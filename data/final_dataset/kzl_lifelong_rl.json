{"home.repos.pwc.inspect_result.kzl_lifelong_rl.experiment_configs.base_experiment.experiment": [[22, 194], ["gtimer.reset", "gtimer.start", "lifelong_rl.core.logging.logging_setup.setup_logger", "lifelong_rl.core.logging.logging.logger.get_tabular_output", "lifelong_rl.set_gpu_mode", "torch.manual_seed", "torch.cuda.is_available", "numpy.random.seed", "random.seed", "variant.get", "lifelong_rl.envs.env_utils.get_dim", "lifelong_rl.envs.env_utils.get_dim", "lifelong_rl.envs.wrappers.FollowerEnv", "variant.get", "gtimer.stamp", "torch.cuda.manual_seed_all", "lifelong_rl.envs.env_processor.make_env", "lifelong_rl.envs.wrappers.ContinualLifelongEnv", "lifelong_rl.data_management.replay_buffers.mujoco_replay_buffer.MujocoReplayBuffer", "lifelong_rl.data_management.replay_buffers.env_replay_buffer.EnvReplayBuffer", "variant.get", "variant.get", "lifelong_rl.samplers.data_collector.step_collector.MdpStepCollector", "lifelong_rl.samplers.data_collector.step_collector.GoalConditionedReplayStepCollector", "lifelong_rl.samplers.data_collector.path_collector.MdpPathCollector", "variant.get", "lifelong_rl.core.logging.logging.logger.set_tabular_output", "offline_algorithm.to", "offline_algorithm.train", "lifelong_rl.core.logging.logging.logger.set_tabular_output", "variant.get", "algorithm.to", "algorithm.train", "len", "AttributeError", "lifelong_rl.envs.env_processor.make_env", "expl_envs.append", "dict", "dict", "lifelong_rl.samplers.data_collector.path_collector.MdpPathCollector", "os.path.join", "variant.get", "experiment_utils.teacher_data.add_transitions", "experiment_utils.teacher_data.add_transitions", "lifelong_rl.samplers.data_collector.path_collector.LatentPathCollector", "lifelong_rl.samplers.data_collector.step_collector.RFCollector", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.reset", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging_setup.setup_logger", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.get_tabular_output", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.set_gpu_mode", "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.env_utils.get_dim", "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.env_utils.get_dim", "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.env_processor.make_env", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.set_tabular_output", "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchOfflineMBRLAlgorithm.to", "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm.train", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.set_tabular_output", "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchOfflineMBRLAlgorithm.to", "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm.train", "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.env_processor.make_env", "home.repos.pwc.inspect_result.kzl_lifelong_rl.experiment_utils.teacher_data.add_transitions", "home.repos.pwc.inspect_result.kzl_lifelong_rl.experiment_utils.teacher_data.add_transitions"], ["def", "experiment", "(", "\n", "experiment_config", ",", "\n", "exp_prefix", ",", "\n", "variant", ",", "\n", "gpu_kwargs", "=", "None", ",", "\n", "log_to_wandb", "=", "False", ",", "\n", ")", ":", "\n", "\n", "    ", "\"\"\"\n    Reset timers\n    (Useful if running multiple seeds from same command)\n    \"\"\"", "\n", "\n", "gt", ".", "reset", "(", ")", "\n", "gt", ".", "start", "(", ")", "\n", "\n", "\"\"\"\n    Setup logging\n    \"\"\"", "\n", "\n", "seed", "=", "variant", "[", "'seed'", "]", "\n", "setup_logger", "(", "exp_prefix", ",", "variant", "=", "variant", ",", "seed", "=", "seed", ",", "log_to_wandb", "=", "log_to_wandb", ")", "\n", "output_csv", "=", "logger", ".", "get_tabular_output", "(", ")", "\n", "\n", "\"\"\"\n    Set GPU mode for pytorch (+ possible other things later)\n    \"\"\"", "\n", "\n", "if", "gpu_kwargs", "is", "None", ":", "\n", "        ", "gpu_kwargs", "=", "{", "'mode'", ":", "False", "}", "\n", "", "ptu", ".", "set_gpu_mode", "(", "**", "gpu_kwargs", ")", "\n", "\n", "\"\"\"\n    Set experiment seeds\n    \"\"\"", "\n", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "\"\"\"\n    Environment setup\n    \"\"\"", "\n", "\n", "envs_list", "=", "variant", ".", "get", "(", "'envs_list'", ",", "None", ")", "\n", "\n", "if", "envs_list", "is", "None", ":", "\n", "        ", "expl_env", ",", "env_infos", "=", "make_env", "(", "variant", "[", "'env_name'", "]", ",", "**", "variant", ".", "get", "(", "'env_kwargs'", ",", "{", "}", ")", ")", "\n", "\n", "", "else", ":", "\n", "# TODO: not sure if this is tested", "\n", "        ", "if", "len", "(", "envs_list", ")", "==", "0", ":", "\n", "            ", "raise", "AttributeError", "(", "'length of envs_list is zero'", ")", "\n", "", "switch_every", "=", "variant", "[", "'switch_every'", "]", "\n", "expl_envs", "=", "[", "]", "\n", "for", "env_params", "in", "envs_list", ":", "\n", "            ", "expl_env", ",", "env_infos", "=", "make_env", "(", "**", "env_params", ")", "\n", "expl_envs", ".", "append", "(", "expl_env", ")", "\n", "", "expl_env", "=", "ContinualLifelongEnv", "(", "expl_envs", "[", "0", "]", ",", "switch_every", ",", "expl_envs", ")", "\n", "\n", "", "obs_dim", "=", "get_dim", "(", "expl_env", ".", "observation_space", ")", "\n", "action_dim", "=", "get_dim", "(", "expl_env", ".", "action_space", ")", "\n", "\n", "if", "env_infos", "[", "'mujoco'", "]", ":", "\n", "        ", "replay_buffer", "=", "MujocoReplayBuffer", "(", "variant", "[", "'replay_buffer_size'", "]", ",", "expl_env", ")", "\n", "", "else", ":", "\n", "        ", "replay_buffer", "=", "EnvReplayBuffer", "(", "variant", "[", "'replay_buffer_size'", "]", ",", "expl_env", ")", "\n", "\n", "", "eval_env", "=", "FollowerEnv", "(", "expl_env", ")", "\n", "\n", "\"\"\"\n    Import any teacher data\n    \"\"\"", "\n", "\n", "if", "'teacher_data_files'", "in", "variant", ":", "\n", "        ", "for", "data_file", "in", "variant", "[", "'teacher_data_files'", "]", ":", "\n", "            ", "if", "'max_teacher_transitions'", "in", "variant", ":", "\n", "                ", "add_transitions", "(", "\n", "replay_buffer", ",", "data_file", ",", "obs_dim", ",", "action_dim", ",", "\n", "max_transitions", "=", "variant", "[", "'max_teacher_transitions'", "]", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "add_transitions", "(", "replay_buffer", ",", "data_file", ",", "obs_dim", ",", "action_dim", ")", "\n", "\n", "", "", "", "\"\"\"\n    Experiment-specific configuration\n    \"\"\"", "\n", "\n", "config", "=", "experiment_config", "[", "'get_config'", "]", "(", "\n", "variant", ",", "\n", "expl_env", "=", "expl_env", ",", "\n", "eval_env", "=", "eval_env", ",", "\n", "obs_dim", "=", "obs_dim", ",", "\n", "action_dim", "=", "action_dim", ",", "\n", "replay_buffer", "=", "replay_buffer", ",", "\n", ")", "\n", "\n", "if", "'load_config'", "in", "experiment_config", ":", "\n", "        ", "experiment_config", "[", "'load_config'", "]", "(", "config", ",", "variant", ",", "gpu_kwargs", ")", "\n", "\n", "", "if", "'algorithm_kwargs'", "not", "in", "config", ":", "\n", "        ", "config", "[", "'algorithm_kwargs'", "]", "=", "variant", ".", "get", "(", "'algorithm_kwargs'", ",", "dict", "(", ")", ")", "\n", "", "if", "'offline_kwargs'", "not", "in", "config", ":", "\n", "        ", "config", "[", "'offline_kwargs'", "]", "=", "variant", ".", "get", "(", "'offline_kwargs'", ",", "dict", "(", ")", ")", "\n", "\n", "", "\"\"\"\n    Path collectors for sampling from environment\n    \"\"\"", "\n", "\n", "collector_type", "=", "variant", ".", "get", "(", "'collector_type'", ",", "'step'", ")", "\n", "exploration_policy", "=", "config", "[", "'exploration_policy'", "]", "\n", "if", "collector_type", "==", "'step'", ":", "\n", "        ", "expl_path_collector", "=", "MdpStepCollector", "(", "expl_env", ",", "exploration_policy", ")", "\n", "", "elif", "collector_type", "==", "'batch'", ":", "\n", "        ", "expl_path_collector", "=", "MdpPathCollector", "(", "expl_env", ",", "exploration_policy", ")", "\n", "", "elif", "collector_type", "==", "'batch_latent'", ":", "\n", "        ", "expl_path_collector", "=", "LatentPathCollector", "(", "\n", "sample_latent_every", "=", "None", ",", "\n", "env", "=", "expl_env", ",", "\n", "policy", "=", "exploration_policy", ",", "\n", ")", "\n", "", "elif", "collector_type", "==", "'rf'", ":", "\n", "        ", "expl_path_collector", "=", "RFCollector", "(", "expl_env", ",", "exploration_policy", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'collector_type of experiment not recognized'", ")", "\n", "\n", "", "if", "collector_type", "==", "'gcr'", ":", "\n", "        ", "eval_path_collector", "=", "GoalConditionedReplayStepCollector", "(", "\n", "eval_env", ",", "config", "[", "'evaluation_policy'", "]", ",", "replay_buffer", ",", "variant", "[", "'resample_goal_every'", "]", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "eval_path_collector", "=", "MdpPathCollector", "(", "\n", "eval_env", ",", "\n", "config", "[", "'evaluation_policy'", "]", ",", "\n", ")", "\n", "\n", "", "\"\"\"\n    Finish timer\n    \"\"\"", "\n", "\n", "gt", ".", "stamp", "(", "'initialization'", ",", "unique", "=", "False", ")", "\n", "\n", "\"\"\"\n    Offline RL pretraining\n    \"\"\"", "\n", "\n", "if", "'get_offline_algorithm'", "in", "experiment_config", "and", "variant", ".", "get", "(", "'do_offline_training'", ",", "False", ")", ":", "\n", "        ", "logger", ".", "set_tabular_output", "(", "os", ".", "path", ".", "join", "(", "logger", ".", "log_dir", ",", "'offline_progress.csv'", ")", ")", "\n", "\n", "offline_algorithm", "=", "experiment_config", "[", "'get_offline_algorithm'", "]", "(", "\n", "config", ",", "\n", "eval_path_collector", "=", "eval_path_collector", ",", "\n", ")", "\n", "offline_algorithm", ".", "to", "(", "ptu", ".", "device", ")", "\n", "offline_algorithm", ".", "train", "(", ")", "\n", "\n", "logger", ".", "set_tabular_output", "(", "output_csv", ")", "\n", "\n", "", "\"\"\"\n    Generate algorithm that performs training\n    \"\"\"", "\n", "\n", "if", "'get_algorithm'", "in", "experiment_config", "and", "variant", ".", "get", "(", "'do_online_training'", ",", "True", ")", ":", "\n", "        ", "algorithm", "=", "experiment_config", "[", "'get_algorithm'", "]", "(", "\n", "config", ",", "\n", "expl_path_collector", "=", "expl_path_collector", ",", "\n", "eval_path_collector", "=", "eval_path_collector", ",", "\n", ")", "\n", "algorithm", ".", "to", "(", "ptu", ".", "device", ")", "\n", "algorithm", ".", "train", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.algorithms.online.get_algorithm": [[4, 18], ["lifelong_rl.core.rl_algorithms.torch_rl_algorithm.TorchOnlineRLAlgorithm"], "function", ["None"], ["def", "get_algorithm", "(", "config", ",", "expl_path_collector", ",", "eval_path_collector", ")", ":", "\n", "\n", "    ", "algorithm", "=", "TorchOnlineRLAlgorithm", "(", "\n", "trainer", "=", "config", "[", "'trainer'", "]", ",", "\n", "exploration_policy", "=", "config", "[", "'exploration_policy'", "]", ",", "\n", "exploration_env", "=", "config", "[", "'exploration_env'", "]", ",", "\n", "evaluation_env", "=", "config", "[", "'evaluation_env'", "]", ",", "\n", "replay_buffer", "=", "config", "[", "'replay_buffer'", "]", ",", "\n", "exploration_data_collector", "=", "expl_path_collector", ",", "\n", "evaluation_data_collector", "=", "eval_path_collector", ",", "\n", "**", "config", "[", "'algorithm_kwargs'", "]", "\n", ")", "\n", "\n", "return", "algorithm", "\n", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.algorithms.batch.get_algorithm": [[4, 18], ["lifelong_rl.core.rl_algorithms.torch_rl_algorithm.TorchBatchRLAlgorithm"], "function", ["None"], ["def", "get_algorithm", "(", "config", ",", "expl_path_collector", ",", "eval_path_collector", ")", ":", "\n", "\n", "    ", "algorithm", "=", "TorchBatchRLAlgorithm", "(", "\n", "trainer", "=", "config", "[", "'trainer'", "]", ",", "\n", "exploration_policy", "=", "config", "[", "'exploration_policy'", "]", ",", "\n", "exploration_env", "=", "config", "[", "'exploration_env'", "]", ",", "\n", "evaluation_env", "=", "config", "[", "'evaluation_env'", "]", ",", "\n", "replay_buffer", "=", "config", "[", "'replay_buffer'", "]", ",", "\n", "exploration_data_collector", "=", "expl_path_collector", ",", "\n", "evaluation_data_collector", "=", "eval_path_collector", ",", "\n", "**", "config", "[", "'algorithm_kwargs'", "]", "\n", ")", "\n", "\n", "return", "algorithm", "\n", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.algorithms.offline.get_offline_algorithm": [[4, 16], ["lifelong_rl.core.rl_algorithms.torch_rl_algorithm.TorchOfflineRLAlgorithm"], "function", ["None"], ["def", "get_offline_algorithm", "(", "config", ",", "eval_path_collector", ")", ":", "\n", "\n", "    ", "algorithm", "=", "TorchOfflineRLAlgorithm", "(", "\n", "trainer", "=", "config", "[", "'trainer'", "]", ",", "\n", "evaluation_policy", "=", "config", "[", "'evaluation_policy'", "]", ",", "\n", "evaluation_env", "=", "config", "[", "'evaluation_env'", "]", ",", "\n", "replay_buffer", "=", "config", "[", "'replay_buffer'", "]", ",", "\n", "evaluation_data_collector", "=", "eval_path_collector", ",", "\n", "**", "config", "[", "'offline_kwargs'", "]", "\n", ")", "\n", "\n", "return", "algorithm", "\n", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.algorithms.mbrl.get_algorithm": [[4, 19], ["lifelong_rl.core.rl_algorithms.torch_rl_algorithm.TorchMBRLAlgorithm"], "function", ["None"], ["def", "get_algorithm", "(", "config", ",", "expl_path_collector", ",", "eval_path_collector", ")", ":", "\n", "\n", "    ", "algorithm", "=", "TorchMBRLAlgorithm", "(", "\n", "trainer", "=", "config", "[", "'trainer'", "]", ",", "\n", "exploration_policy", "=", "config", "[", "'exploration_policy'", "]", ",", "\n", "model_trainer", "=", "config", "[", "'model_trainer'", "]", ",", "\n", "exploration_env", "=", "config", "[", "'exploration_env'", "]", ",", "\n", "evaluation_env", "=", "config", "[", "'evaluation_env'", "]", ",", "\n", "replay_buffer", "=", "config", "[", "'replay_buffer'", "]", ",", "\n", "exploration_data_collector", "=", "expl_path_collector", ",", "\n", "evaluation_data_collector", "=", "eval_path_collector", ",", "\n", "**", "config", "[", "'algorithm_kwargs'", "]", "\n", ")", "\n", "\n", "return", "algorithm", "\n", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.algorithms.batch_mbrl.get_algorithm": [[4, 19], ["lifelong_rl.core.rl_algorithms.torch_rl_algorithm.TorchMBBatchRLAlgorithm"], "function", ["None"], ["def", "get_algorithm", "(", "config", ",", "expl_path_collector", ",", "eval_path_collector", ")", ":", "\n", "\n", "    ", "algorithm", "=", "TorchMBBatchRLAlgorithm", "(", "\n", "trainer", "=", "config", "[", "'trainer'", "]", ",", "\n", "exploration_policy", "=", "config", "[", "'exploration_policy'", "]", ",", "\n", "model_trainer", "=", "config", "[", "'model_trainer'", "]", ",", "\n", "exploration_env", "=", "config", "[", "'exploration_env'", "]", ",", "\n", "evaluation_env", "=", "config", "[", "'evaluation_env'", "]", ",", "\n", "replay_buffer", "=", "config", "[", "'replay_buffer'", "]", ",", "\n", "exploration_data_collector", "=", "expl_path_collector", ",", "\n", "evaluation_data_collector", "=", "eval_path_collector", ",", "\n", "**", "config", "[", "'algorithm_kwargs'", "]", "\n", ")", "\n", "\n", "return", "algorithm", "\n", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.algorithms.offline_mbrl.get_offline_algorithm": [[4, 17], ["lifelong_rl.core.rl_algorithms.torch_rl_algorithm.TorchOfflineMBRLAlgorithm"], "function", ["None"], ["def", "get_offline_algorithm", "(", "config", ",", "eval_path_collector", ")", ":", "\n", "\n", "    ", "algorithm", "=", "TorchOfflineMBRLAlgorithm", "(", "\n", "trainer", "=", "config", "[", "'trainer'", "]", ",", "\n", "evaluation_policy", "=", "config", "[", "'evaluation_policy'", "]", ",", "\n", "model_trainer", "=", "config", "[", "'model_trainer'", "]", ",", "\n", "evaluation_env", "=", "config", "[", "'evaluation_env'", "]", ",", "\n", "replay_buffer", "=", "config", "[", "'replay_buffer'", "]", ",", "\n", "evaluation_data_collector", "=", "eval_path_collector", ",", "\n", "**", "config", "[", "'offline_kwargs'", "]", "\n", ")", "\n", "\n", "return", "algorithm", "\n", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.q_learning.sac_config.get_config": [[8, 61], ["lifelong_rl.group_init", "lifelong_rl.policies.models.gaussian_policy.TanhGaussianPolicy", "lifelong_rl.trainers.q_learning.sac.SACTrainer", "dict", "dict.update", "dict", "lifelong_rl.policies.base.base.MakeDeterministic"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.group_init"], ["def", "get_config", "(", "\n", "variant", ",", "\n", "expl_env", ",", "\n", "eval_env", ",", "\n", "obs_dim", ",", "\n", "action_dim", ",", "\n", "replay_buffer", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Policy construction\n    \"\"\"", "\n", "\n", "M", "=", "variant", "[", "'policy_kwargs'", "]", "[", "'layer_size'", "]", "\n", "\n", "qf1", ",", "qf2", ",", "target_qf1", ",", "target_qf2", "=", "ppp", ".", "group_init", "(", "\n", "4", ",", "\n", "FlattenMlp", ",", "\n", "input_size", "=", "obs_dim", "+", "action_dim", ",", "\n", "output_size", "=", "1", ",", "\n", "hidden_sizes", "=", "[", "M", ",", "M", "]", ",", "\n", ")", "\n", "policy", "=", "TanhGaussianPolicy", "(", "\n", "obs_dim", "=", "obs_dim", ",", "\n", "action_dim", "=", "action_dim", ",", "\n", "hidden_sizes", "=", "[", "M", ",", "M", "]", ",", "\n", ")", "\n", "\n", "trainer", "=", "SACTrainer", "(", "\n", "env", "=", "eval_env", ",", "\n", "policy", "=", "policy", ",", "\n", "qf1", "=", "qf1", ",", "\n", "qf2", "=", "qf2", ",", "\n", "target_qf1", "=", "target_qf1", ",", "\n", "target_qf2", "=", "target_qf2", ",", "\n", "**", "variant", "[", "'trainer_kwargs'", "]", ",", "\n", ")", "\n", "\n", "\"\"\"\n    Create config dict\n    \"\"\"", "\n", "\n", "config", "=", "dict", "(", ")", "\n", "config", ".", "update", "(", "dict", "(", "\n", "trainer", "=", "trainer", ",", "\n", "exploration_policy", "=", "policy", ",", "\n", "evaluation_policy", "=", "MakeDeterministic", "(", "policy", ")", ",", "\n", "exploration_env", "=", "expl_env", ",", "\n", "evaluation_env", "=", "eval_env", ",", "\n", "replay_buffer", "=", "replay_buffer", ",", "\n", ")", ")", "\n", "config", "[", "'algorithm_kwargs'", "]", "=", "variant", "[", "'algorithm_kwargs'", "]", "\n", "\n", "return", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.q_learning.mbpo_config.get_config": [[12, 121], ["lifelong_rl.group_init", "lifelong_rl.policies.models.gaussian_policy.TanhGaussianPolicy", "lifelong_rl.trainers.q_learning.sac.SACTrainer", "lifelong_rl.models.dynamics_models.probabilistic_ensemble.ProbabilisticEnsemble", "lifelong_rl.trainers.mbrl.mbrl.MBRLTrainer", "lifelong_rl.data_management.replay_buffers.env_replay_buffer.EnvReplayBuffer", "lifelong_rl.trainers.q_learning.mbpo.MBPOTrainer", "dict", "dict.update", "dict", "lifelong_rl.policies.base.base.MakeDeterministic", "int"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.group_init"], ["def", "get_config", "(", "\n", "variant", ",", "\n", "expl_env", ",", "\n", "eval_env", ",", "\n", "obs_dim", ",", "\n", "action_dim", ",", "\n", "replay_buffer", ",", "\n", ")", ":", "\n", "\n", "    ", "\"\"\"\n    Setup of soft actor critic (SAC), used as the policy optimization procedure of MBPO\n    \"\"\"", "\n", "\n", "M", "=", "variant", "[", "'policy_kwargs'", "]", "[", "'layer_size'", "]", "\n", "\n", "qf1", ",", "qf2", ",", "target_qf1", ",", "target_qf2", "=", "ppp", ".", "group_init", "(", "\n", "4", ",", "\n", "FlattenMlp", ",", "\n", "input_size", "=", "obs_dim", "+", "action_dim", ",", "\n", "output_size", "=", "1", ",", "\n", "hidden_sizes", "=", "[", "M", ",", "M", "]", ",", "\n", ")", "\n", "policy", "=", "TanhGaussianPolicy", "(", "\n", "obs_dim", "=", "obs_dim", ",", "\n", "action_dim", "=", "action_dim", ",", "\n", "hidden_sizes", "=", "[", "M", ",", "M", "]", ",", "\n", ")", "\n", "\n", "policy_trainer", "=", "SACTrainer", "(", "\n", "env", "=", "eval_env", ",", "\n", "policy", "=", "policy", ",", "\n", "qf1", "=", "qf1", ",", "\n", "qf2", "=", "qf2", ",", "\n", "target_qf1", "=", "target_qf1", ",", "\n", "target_qf2", "=", "target_qf2", ",", "\n", "**", "variant", "[", "'trainer_kwargs'", "]", "[", "'policy_kwargs'", "]", "\n", ")", "\n", "\n", "\"\"\"\n    Model-based reinforcement learning (MBRL) dynamics models\n    \"\"\"", "\n", "\n", "dynamics_model", "=", "ProbabilisticEnsemble", "(", "\n", "ensemble_size", "=", "variant", "[", "'mbrl_kwargs'", "]", "[", "'ensemble_size'", "]", ",", "\n", "obs_dim", "=", "obs_dim", ",", "\n", "action_dim", "=", "action_dim", ",", "\n", "hidden_sizes", "=", "variant", "[", "'mbrl_kwargs'", "]", "[", "'hidden_sizes'", "]", ",", "\n", ")", "\n", "model_trainer", "=", "MBRLTrainer", "(", "\n", "ensemble", "=", "dynamics_model", ",", "\n", "**", "variant", "[", "'mbrl_kwargs'", "]", ",", "\n", ")", "\n", "\n", "\"\"\"\n    Setup of model-based policy optimization (MBPO)\n    \"\"\"", "\n", "\n", "generated_replay_buffer", "=", "EnvReplayBuffer", "(", "\n", "variant", "[", "'trainer_kwargs'", "]", "[", "'generated_buffer_size'", "]", ",", "\n", "expl_env", ",", "\n", ")", "\n", "\n", "rollout_len_schedule", "=", "variant", "[", "'trainer_kwargs'", "]", "[", "'rollout_len_schedule'", "]", "\n", "\n", "def", "rollout_len", "(", "train_steps", ")", ":", "\n", "        ", "\"\"\"\n        rollout_len_schedule: [a, b, len_a, len_b]\n        Linearly increase length from len_a -> len_b over epochs a -> b\n        \"\"\"", "\n", "if", "'algorithm_kwargs'", "in", "variant", ":", "\n", "            ", "epoch", "=", "train_steps", "//", "variant", "[", "'algorithm_kwargs'", "]", "[", "'num_trains_per_train_loop'", "]", "\n", "", "else", ":", "\n", "            ", "epoch", "=", "1", "\n", "", "if", "epoch", "<", "rollout_len_schedule", "[", "0", "]", ":", "\n", "            ", "return", "1", "\n", "", "elif", "epoch", ">=", "rollout_len_schedule", "[", "1", "]", ":", "\n", "            ", "return", "rollout_len_schedule", "[", "3", "]", "\n", "", "else", ":", "\n", "            ", "return", "int", "(", "\n", "(", "epoch", "-", "rollout_len_schedule", "[", "0", "]", ")", "/", "(", "rollout_len_schedule", "[", "1", "]", "-", "rollout_len_schedule", "[", "0", "]", ")", "*", "(", "rollout_len_schedule", "[", "3", "]", "-", "rollout_len_schedule", "[", "2", "]", ")", "\n", ")", "+", "1", "\n", "\n", "", "", "trainer", "=", "MBPOTrainer", "(", "\n", "policy_trainer", "=", "policy_trainer", ",", "\n", "dynamics_model", "=", "dynamics_model", ",", "\n", "replay_buffer", "=", "replay_buffer", ",", "\n", "generated_data_buffer", "=", "generated_replay_buffer", ",", "\n", "rollout_len_func", "=", "rollout_len", ",", "\n", "**", "variant", "[", "'trainer_kwargs'", "]", "\n", ")", "\n", "\n", "\"\"\"\n    Create config dict\n    \"\"\"", "\n", "\n", "config", "=", "dict", "(", ")", "\n", "config", ".", "update", "(", "dict", "(", "\n", "trainer", "=", "trainer", ",", "\n", "model_trainer", "=", "model_trainer", ",", "\n", "exploration_policy", "=", "policy", ",", "\n", "evaluation_policy", "=", "MakeDeterministic", "(", "policy", ")", ",", "\n", "exploration_env", "=", "expl_env", ",", "\n", "evaluation_env", "=", "eval_env", ",", "\n", "replay_buffer", "=", "replay_buffer", ",", "\n", ")", ")", "\n", "\n", "return", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.q_learning.cql_config.get_config": [[8, 60], ["lifelong_rl.group_init", "lifelong_rl.policies.models.gaussian_policy.TanhGaussianPolicy", "lifelong_rl.trainers.q_learning.cql.CQLTrainer", "dict", "dict.update", "dict", "lifelong_rl.policies.base.base.MakeDeterministic"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.group_init"], ["def", "get_config", "(", "\n", "variant", ",", "\n", "expl_env", ",", "\n", "eval_env", ",", "\n", "obs_dim", ",", "\n", "action_dim", ",", "\n", "replay_buffer", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Policy construction\n    \"\"\"", "\n", "\n", "M", "=", "variant", "[", "'policy_kwargs'", "]", "[", "'layer_size'", "]", "\n", "\n", "qf1", ",", "qf2", ",", "target_qf1", ",", "target_qf2", "=", "ppp", ".", "group_init", "(", "\n", "4", ",", "\n", "FlattenMlp", ",", "\n", "input_size", "=", "obs_dim", "+", "action_dim", ",", "\n", "output_size", "=", "1", ",", "\n", "hidden_sizes", "=", "[", "M", ",", "M", "]", ",", "\n", ")", "\n", "policy", "=", "TanhGaussianPolicy", "(", "\n", "obs_dim", "=", "obs_dim", ",", "\n", "action_dim", "=", "action_dim", ",", "\n", "hidden_sizes", "=", "[", "M", ",", "M", "]", ",", "\n", ")", "\n", "\n", "trainer", "=", "CQLTrainer", "(", "\n", "env", "=", "eval_env", ",", "\n", "policy", "=", "policy", ",", "\n", "qf1", "=", "qf1", ",", "\n", "qf2", "=", "qf2", ",", "\n", "target_qf1", "=", "target_qf1", ",", "\n", "target_qf2", "=", "target_qf2", ",", "\n", "**", "variant", "[", "'trainer_kwargs'", "]", ",", "\n", ")", "\n", "\n", "\"\"\"\n    Create config dict\n    \"\"\"", "\n", "\n", "config", "=", "dict", "(", ")", "\n", "config", ".", "update", "(", "dict", "(", "\n", "trainer", "=", "trainer", ",", "\n", "exploration_policy", "=", "policy", ",", "\n", "evaluation_policy", "=", "MakeDeterministic", "(", "policy", ")", ",", "\n", "exploration_env", "=", "expl_env", ",", "\n", "evaluation_env", "=", "eval_env", ",", "\n", "replay_buffer", "=", "replay_buffer", ",", "\n", ")", ")", "\n", "\n", "return", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.q_learning.mbpo.MBPOTrainer.__init__": [[25, 61], ["int", "lifelong_rl.core.rl_algorithms.torch_rl_algorithm.TorchTrainer.__init__", "collections.OrderedDict", "dict"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__"], ["trainer_kwargs", "=", "dict", "(", "\n", "num_model_rollouts", "=", "400", ",", "\n", "rollout_generation_freq", "=", "250", ",", "\n", "rollout_len_schedule", "=", "[", "20", ",", "100", ",", "1", ",", "15", "]", ",", "# same format as MBPO codebase", "\n", "generated_buffer_size", "=", "int", "(", "1e5", ")", ",", "# size of synthetic generated replay buffer", "\n", "num_policy_updates", "=", "20", ",", "\n", "real_data_pct", "=", "0.05", ",", "\n", "policy_kwargs", "=", "dict", "(", "# kwargs for training the policy (note: inside trainer_kwargs)", "\n", "discount", "=", "0.99", ",", "\n", "soft_target_tau", "=", "5e-3", ",", "\n", "target_update_period", "=", "1", ",", "\n", "policy_lr", "=", "3e-4", ",", "\n", "qf_lr", "=", "3e-4", ",", "\n", ")", ",", "\n", ")", ",", "\n", "mbrl_kwargs", "=", "dict", "(", "\n", "ensemble_size", "=", "7", ",", "\n", "num_elites", "=", "5", ",", "\n", "learning_rate", "=", "1e-3", ",", "\n", "batch_size", "=", "256", ",", "\n", "hidden_sizes", "=", "[", "256", ",", "256", ",", "256", ",", "256", "]", ",", "\n", ")", ",", "\n", "algorithm_kwargs", "=", "dict", "(", "\n", "num_epochs", "=", "100", ",", "\n", "num_eval_steps_per_epoch", "=", "5000", ",", "\n", "num_trains_per_train_loop", "=", "1000", ",", "\n", "num_expl_steps_per_train_loop", "=", "1000", ",", "\n", "min_num_steps_before_training", "=", "1000", ",", "\n", "num_model_trains_per_train_loop", "=", "4", ",", "\n", "max_path_length", "=", "1000", ",", "\n", "batch_size", "=", "256", ",", "\n", "model_batch_size", "=", "256", ",", "\n", "save_snapshot_freq", "=", "100", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "sweep_values", "=", "{", "}", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.q_learning.mbpo.MBPOTrainer.train_from_torch": [[62, 129], ["int", "range", "mbpo.MBPOTrainer.rollout_len_func", "gtimer.stamp", "mbpo.MBPOTrainer.replay_buffer.random_batch", "mbpo.MBPOTrainer.generated_data_buffer.random_batch", "mbpo.MBPOTrainer.policy_trainer.train_from_torch", "mbpo.MBPOTrainer.eval_statistics.update", "mbpo.MBPOTrainer.eval_statistics.update", "numpy.array", "min", "mbpo.MBPOTrainer.replay_buffer.random_batch", "numpy.concatenate", "lifelong_rl.from_numpy", "lifelong_rl.from_numpy", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "torch.no_grad", "mbpo.MBPOTrainer.sample_paths", "mbpo.MBPOTrainer.generated_data_buffer.add_path", "len", "numpy.concatenate", "terminated.append", "numpy.array().astype", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.random_batch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.random_batch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchTrainer.train_from_torch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.random_batch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.q_learning.mbpo.MBPOTrainer.sample_paths", "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.replay_buffer.ReplayBuffer.add_path"], ["\n", "launch_experiment", "(", "\n", "get_config", "=", "get_config", ",", "\n", "get_algorithm", "=", "get_algorithm", ",", "\n", "variant", "=", "variant", ",", "\n", "sweep_values", "=", "sweep_values", ",", "\n", "**", "experiment_kwargs", "\n", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.q_learning.mbpo.MBPOTrainer.sample_paths": [[130, 200], ["lifelong_rl.policy", "lifelong_rl.policy", "lifelong_rl.policy_with_disagreement", "lifelong_rl.policy_with_disagreement", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "enumerate", "mbpo.MBPOTrainer.eval_statistics.update", "numpy.zeros", "range", "mask.reshape.reshape.reshape", "mask.reshape.reshape.sum", "len", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.policy_with_disagreement", "lifelong_rl.policy_with_disagreement", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "enumerate", "mbpo.MBPOTrainer.eval_statistics.update", "len", "len", "len", "disagreements[].reshape", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "len"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions.policy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions.policy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions.policy_with_disagreement", "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions.policy_with_disagreement", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions.policy_with_disagreement", "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions.policy_with_disagreement", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.q_learning.mbpo.MBPOTrainer.get_diagnostics": [[201, 204], ["mbpo.MBPOTrainer.eval_statistics.update"], "methods", ["None"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.q_learning.mbpo.MBPOTrainer.end_epoch": [[205, 208], ["mbpo.MBPOTrainer.policy_trainer.end_epoch"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.end_epoch"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.q_learning.mbpo.MBPOTrainer.networks": [[209, 212], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.q_learning.mbpo.MBPOTrainer.get_snapshot": [[213, 219], ["dict", "dict.update", "mbpo.MBPOTrainer.policy_trainer.get_snapshot"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.get_snapshot"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.q_learning.mbpo.always_one": [[13, 15], ["None"], "function", ["None"], ["\n", "\n", "if", "__name__", "==", "\"__main__\"", ":", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.q_learning.sac.SACTrainer.__init__": [[21, 88], ["lifelong_rl.core.rl_algorithms.torch_rl_algorithm.TorchTrainer.__init__", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "optimizer_class", "optimizer_class", "optimizer_class", "collections.OrderedDict", "lifelong_rl.zeros", "optimizer_class", "sac.SACTrainer.policy.parameters", "sac.SACTrainer.qf1.parameters", "sac.SACTrainer.qf2.parameters", "numpy.prod().item", "numpy.prod"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros"], ["replay_buffer_size", "=", "int", "(", "1e6", ")", ",", "\n", "policy_kwargs", "=", "dict", "(", "\n", "layer_size", "=", "256", ",", "\n", ")", ",", "\n", "trainer_kwargs", "=", "dict", "(", "\n", "discount", "=", "0.99", ",", "\n", "soft_target_tau", "=", "5e-3", ",", "\n", "target_update_period", "=", "1", ",", "\n", "policy_lr", "=", "3e-4", ",", "\n", "qf_lr", "=", "3e-4", ",", "\n", ")", ",", "\n", "algorithm_kwargs", "=", "dict", "(", "\n", "num_epochs", "=", "1000", ",", "\n", "num_eval_steps_per_epoch", "=", "5000", ",", "\n", "num_trains_per_train_loop", "=", "1000", ",", "\n", "num_expl_steps_per_train_loop", "=", "1000", ",", "\n", "min_num_steps_before_training", "=", "1000", ",", "\n", "max_path_length", "=", "1000", ",", "\n", "batch_size", "=", "256", ",", "\n", "save_snapshot_freq", "=", "1000", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "sweep_values", "=", "{", "}", "\n", "\n", "launch_experiment", "(", "\n", "get_config", "=", "get_config", ",", "\n", "get_algorithm", "=", "get_algorithm", ",", "\n", "variant", "=", "variant", ",", "\n", "sweep_values", "=", "sweep_values", ",", "\n", "**", "experiment_kwargs", "\n", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.q_learning.sac.SACTrainer.train_from_torch": [[89, 201], ["batch.get", "sac.SACTrainer.policy", "lifelong_rl.torch.distributions.TanhNormal", "lifelong_rl.torch.distributions.TanhNormal.rsample_and_logprob", "log_pi.sum.sum.sum", "torch.min", "torch.min", "torch.min", "torch.min", "sac.SACTrainer.qf1", "sac.SACTrainer.qf2", "sac.SACTrainer.policy", "lifelong_rl.torch.distributions.TanhNormal", "lifelong_rl.torch.distributions.TanhNormal.rsample_and_logprob", "new_log_pi.sum.sum.sum", "sac.SACTrainer.qf_criterion", "sac.SACTrainer.qf_criterion", "sac.SACTrainer.policy_optimizer.zero_grad", "policy_loss.backward", "sac.SACTrainer.policy_optimizer.step", "sac.SACTrainer.qf1_optimizer.zero_grad", "sac.SACTrainer.backward", "sac.SACTrainer.qf1_optimizer.step", "sac.SACTrainer.qf2_optimizer.zero_grad", "sac.SACTrainer.backward", "sac.SACTrainer.qf2_optimizer.step", "sac.SACTrainer.try_update_target_networks", "lifelong_rl.zeros", "policy_logstd.exp", "sac.SACTrainer.log_alpha.exp", "sac.SACTrainer.qf1", "sac.SACTrainer.qf2", "next_policy_logstd.exp", "torch.min", "torch.min", "torch.min", "torch.min", "q_target.detach", "q_target.detach", "sac.SACTrainer.alpha_optimizer.zero_grad", "alpha_loss.backward", "sac.SACTrainer.alpha_optimizer.step", "torch.exp().mean", "torch.exp().mean", "torch.exp().mean", "torch.exp().mean", "numpy.mean", "numpy.mean", "numpy.mean", "sac.SACTrainer.eval_statistics.update", "sac.SACTrainer.eval_statistics.update", "sac.SACTrainer.eval_statistics.update", "sac.SACTrainer.eval_statistics.update", "sac.SACTrainer.eval_statistics.update", "sac.SACTrainer.eval_statistics.update", "numpy.mean", "sac.SACTrainer.target_qf1", "sac.SACTrainer.target_qf2", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.get_numpy", "sac.SACTrainer.item", "alpha_loss.item", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions.policy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.rsample_and_logprob", "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions.policy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.rsample_and_logprob", "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.step", "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.step", "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.step", "home.repos.pwc.inspect_result.kzl_lifelong_rl.q_learning.sac.SACTrainer.try_update_target_networks", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros", "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.step", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.q_learning.sac.SACTrainer.try_update_target_networks": [[202, 205], ["sac.SACTrainer.update_target_networks"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.q_learning.sac.SACTrainer.update_target_networks"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.q_learning.sac.SACTrainer.update_target_networks": [[206, 212], ["lifelong_rl.soft_update_from_to", "lifelong_rl.soft_update_from_to"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.soft_update_from_to", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.soft_update_from_to"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.q_learning.sac.SACTrainer.get_diagnostics": [[214, 216], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.q_learning.sac.SACTrainer.end_epoch": [[217, 219], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.q_learning.sac.SACTrainer.networks": [[220, 228], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.q_learning.sac.SACTrainer.get_snapshot": [[230, 237], ["dict"], "methods", ["None"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.q_learning.ddpg.DDPGTrainer.__init__": [[19, 76], ["lifelong_rl.core.rl_algorithms.torch_rl_algorithm.TorchTrainer.__init__", "optimizer_class", "optimizer_class", "collections.OrderedDict", "torch.nn.MSELoss", "torch.nn.MSELoss", "ddpg.DDPGTrainer.qf.parameters", "ddpg.DDPGTrainer.policy.parameters"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "qf", ",", "\n", "target_qf", ",", "\n", "policy", ",", "\n", "target_policy", ",", "\n", "\n", "discount", "=", "0.99", ",", "\n", "reward_scale", "=", "1.0", ",", "\n", "\n", "policy_learning_rate", "=", "1e-4", ",", "\n", "qf_learning_rate", "=", "1e-3", ",", "\n", "qf_weight_decay", "=", "0", ",", "\n", "target_hard_update_period", "=", "1000", ",", "\n", "tau", "=", "1e-2", ",", "\n", "use_soft_update", "=", "False", ",", "\n", "qf_criterion", "=", "None", ",", "\n", "policy_pre_activation_weight", "=", "0.", ",", "\n", "optimizer_class", "=", "optim", ".", "Adam", ",", "\n", "\n", "min_q_value", "=", "-", "np", ".", "inf", ",", "\n", "max_q_value", "=", "np", ".", "inf", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "qf_criterion", "is", "None", ":", "\n", "            ", "qf_criterion", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "self", ".", "qf", "=", "qf", "\n", "self", ".", "target_qf", "=", "target_qf", "\n", "self", ".", "policy", "=", "policy", "\n", "self", ".", "target_policy", "=", "target_policy", "\n", "\n", "self", ".", "discount", "=", "discount", "\n", "self", ".", "reward_scale", "=", "reward_scale", "\n", "\n", "self", ".", "policy_learning_rate", "=", "policy_learning_rate", "\n", "self", ".", "qf_learning_rate", "=", "qf_learning_rate", "\n", "self", ".", "qf_weight_decay", "=", "qf_weight_decay", "\n", "self", ".", "target_hard_update_period", "=", "target_hard_update_period", "\n", "self", ".", "tau", "=", "tau", "\n", "self", ".", "use_soft_update", "=", "use_soft_update", "\n", "self", ".", "qf_criterion", "=", "qf_criterion", "\n", "self", ".", "policy_pre_activation_weight", "=", "policy_pre_activation_weight", "\n", "self", ".", "min_q_value", "=", "min_q_value", "\n", "self", ".", "max_q_value", "=", "max_q_value", "\n", "\n", "self", ".", "qf_optimizer", "=", "optimizer_class", "(", "\n", "self", ".", "qf", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "qf_learning_rate", ",", "\n", ")", "\n", "self", ".", "policy_optimizer", "=", "optimizer_class", "(", "\n", "self", ".", "policy", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "policy_learning_rate", ",", "\n", ")", "\n", "\n", "self", ".", "eval_statistics", "=", "OrderedDict", "(", ")", "\n", "self", ".", "_n_train_steps_total", "=", "0", "\n", "self", ".", "_need_to_update_eval_statistics", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.q_learning.ddpg.DDPGTrainer.train_from_torch": [[77, 179], ["ddpg.DDPGTrainer.target_policy", "ddpg.DDPGTrainer.detach", "ddpg.DDPGTrainer.target_qf", "torch.clamp.detach", "torch.clamp.detach", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "ddpg.DDPGTrainer.qf", "ddpg.DDPGTrainer.qf_criterion", "ddpg.DDPGTrainer.policy_optimizer.zero_grad", "policy_loss.backward", "ddpg.DDPGTrainer.policy_optimizer.step", "ddpg.DDPGTrainer.qf_optimizer.zero_grad", "qf_loss.backward", "ddpg.DDPGTrainer.qf_optimizer.step", "ddpg.DDPGTrainer._update_target_networks", "ddpg.DDPGTrainer.policy", "ddpg.DDPGTrainer.qf", "ddpg.DDPGTrainer.policy", "ddpg.DDPGTrainer.qf", "numpy.mean", "numpy.mean", "numpy.mean", "ddpg.DDPGTrainer.eval_statistics.update", "ddpg.DDPGTrainer.eval_statistics.update", "ddpg.DDPGTrainer.eval_statistics.update", "ddpg.DDPGTrainer.eval_statistics.update", "ddpg.DDPGTrainer.mean", "ddpg.DDPGTrainer.mean", "sum", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "ddpg.DDPGTrainer.qf.regularizable_parameters"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.step", "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.step", "home.repos.pwc.inspect_result.kzl_lifelong_rl.q_learning.ddpg.DDPGTrainer._update_target_networks", "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions.policy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions.policy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy"], ["", "def", "train_from_torch", "(", "self", ",", "batch", ")", ":", "\n", "        ", "rewards", "=", "batch", "[", "'rewards'", "]", "\n", "terminals", "=", "batch", "[", "'terminals'", "]", "\n", "obs", "=", "batch", "[", "'observations'", "]", "\n", "actions", "=", "batch", "[", "'actions'", "]", "\n", "next_obs", "=", "batch", "[", "'next_observations'", "]", "\n", "\n", "\"\"\"\n        Policy operations.\n        \"\"\"", "\n", "if", "self", ".", "policy_pre_activation_weight", ">", "0", ":", "\n", "            ", "policy_actions", ",", "pre_tanh_value", "=", "self", ".", "policy", "(", "\n", "obs", ",", "return_preactivations", "=", "True", ",", "\n", ")", "\n", "pre_activation_policy_loss", "=", "(", "\n", "(", "pre_tanh_value", "**", "2", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", ")", "\n", "q_output", "=", "self", ".", "qf", "(", "obs", ",", "policy_actions", ")", "\n", "raw_policy_loss", "=", "-", "q_output", ".", "mean", "(", ")", "\n", "policy_loss", "=", "(", "\n", "raw_policy_loss", "+", "\n", "pre_activation_policy_loss", "*", "self", ".", "policy_pre_activation_weight", "\n", ")", "\n", "", "else", ":", "\n", "            ", "policy_actions", "=", "self", ".", "policy", "(", "obs", ")", "\n", "q_output", "=", "self", ".", "qf", "(", "obs", ",", "policy_actions", ")", "\n", "raw_policy_loss", "=", "policy_loss", "=", "-", "q_output", ".", "mean", "(", ")", "\n", "\n", "", "\"\"\"\n        Critic operations.\n        \"\"\"", "\n", "\n", "next_actions", "=", "self", ".", "target_policy", "(", "next_obs", ")", "\n", "# speed up computation by not backpropping these gradients", "\n", "next_actions", ".", "detach", "(", ")", "\n", "target_q_values", "=", "self", ".", "target_qf", "(", "\n", "next_obs", ",", "\n", "next_actions", ",", "\n", ")", "\n", "q_target", "=", "rewards", "+", "(", "1.", "-", "terminals", ")", "*", "self", ".", "discount", "*", "target_q_values", "\n", "q_target", "=", "q_target", ".", "detach", "(", ")", "\n", "q_target", "=", "torch", ".", "clamp", "(", "q_target", ",", "self", ".", "min_q_value", ",", "self", ".", "max_q_value", ")", "\n", "q_pred", "=", "self", ".", "qf", "(", "obs", ",", "actions", ")", "\n", "bellman_errors", "=", "(", "q_pred", "-", "q_target", ")", "**", "2", "\n", "raw_qf_loss", "=", "self", ".", "qf_criterion", "(", "q_pred", ",", "q_target", ")", "\n", "\n", "if", "self", ".", "qf_weight_decay", ">", "0", ":", "\n", "            ", "reg_loss", "=", "self", ".", "qf_weight_decay", "*", "sum", "(", "\n", "torch", ".", "sum", "(", "param", "**", "2", ")", "\n", "for", "param", "in", "self", ".", "qf", ".", "regularizable_parameters", "(", ")", "\n", ")", "\n", "qf_loss", "=", "raw_qf_loss", "+", "reg_loss", "\n", "", "else", ":", "\n", "            ", "qf_loss", "=", "raw_qf_loss", "\n", "\n", "", "\"\"\"\n        Update Networks\n        \"\"\"", "\n", "\n", "self", ".", "policy_optimizer", ".", "zero_grad", "(", ")", "\n", "policy_loss", ".", "backward", "(", ")", "\n", "self", ".", "policy_optimizer", ".", "step", "(", ")", "\n", "\n", "self", ".", "qf_optimizer", ".", "zero_grad", "(", ")", "\n", "qf_loss", ".", "backward", "(", ")", "\n", "self", ".", "qf_optimizer", ".", "step", "(", ")", "\n", "\n", "self", ".", "_update_target_networks", "(", ")", "\n", "\n", "\"\"\"\n        Save some statistics for eval using just one batch.\n        \"\"\"", "\n", "if", "self", ".", "_need_to_update_eval_statistics", ":", "\n", "            ", "self", ".", "_need_to_update_eval_statistics", "=", "False", "\n", "self", ".", "eval_statistics", "[", "'QF Loss'", "]", "=", "np", ".", "mean", "(", "ptu", ".", "get_numpy", "(", "qf_loss", ")", ")", "\n", "self", ".", "eval_statistics", "[", "'Policy Loss'", "]", "=", "np", ".", "mean", "(", "ptu", ".", "get_numpy", "(", "\n", "policy_loss", "\n", ")", ")", "\n", "self", ".", "eval_statistics", "[", "'Raw Policy Loss'", "]", "=", "np", ".", "mean", "(", "ptu", ".", "get_numpy", "(", "\n", "raw_policy_loss", "\n", ")", ")", "\n", "self", ".", "eval_statistics", "[", "'Preactivation Policy Loss'", "]", "=", "(", "\n", "self", ".", "eval_statistics", "[", "'Policy Loss'", "]", "-", "\n", "self", ".", "eval_statistics", "[", "'Raw Policy Loss'", "]", "\n", ")", "\n", "self", ".", "eval_statistics", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "'Q Predictions'", ",", "\n", "ptu", ".", "get_numpy", "(", "q_pred", ")", ",", "\n", ")", ")", "\n", "self", ".", "eval_statistics", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "'Q Targets'", ",", "\n", "ptu", ".", "get_numpy", "(", "q_target", ")", ",", "\n", ")", ")", "\n", "self", ".", "eval_statistics", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "'Bellman Errors'", ",", "\n", "ptu", ".", "get_numpy", "(", "bellman_errors", ")", ",", "\n", ")", ")", "\n", "self", ".", "eval_statistics", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "'Policy Action'", ",", "\n", "ptu", ".", "get_numpy", "(", "policy_actions", ")", ",", "\n", ")", ")", "\n", "", "self", ".", "_n_train_steps_total", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.q_learning.ddpg.DDPGTrainer._update_target_networks": [[180, 188], ["lifelong_rl.soft_update_from_to", "lifelong_rl.soft_update_from_to", "lifelong_rl.copy_model_params_from_to", "lifelong_rl.copy_model_params_from_to"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.soft_update_from_to", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.soft_update_from_to", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.copy_model_params_from_to", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.copy_model_params_from_to"], ["", "def", "_update_target_networks", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "use_soft_update", ":", "\n", "            ", "ptu", ".", "soft_update_from_to", "(", "self", ".", "policy", ",", "self", ".", "target_policy", ",", "self", ".", "tau", ")", "\n", "ptu", ".", "soft_update_from_to", "(", "self", ".", "qf", ",", "self", ".", "target_qf", ",", "self", ".", "tau", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "_n_train_steps_total", "%", "self", ".", "target_hard_update_period", "==", "0", ":", "\n", "                ", "ptu", ".", "copy_model_params_from_to", "(", "self", ".", "qf", ",", "self", ".", "target_qf", ")", "\n", "ptu", ".", "copy_model_params_from_to", "(", "self", ".", "policy", ",", "self", ".", "target_policy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.q_learning.ddpg.DDPGTrainer.get_diagnostics": [[189, 191], ["None"], "methods", ["None"], ["", "", "", "def", "get_diagnostics", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "eval_statistics", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.q_learning.ddpg.DDPGTrainer.end_epoch": [[192, 194], ["None"], "methods", ["None"], ["", "def", "end_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "_need_to_update_eval_statistics", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.q_learning.ddpg.DDPGTrainer.networks": [[195, 202], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "networks", "(", "self", ")", ":", "\n", "        ", "return", "[", "\n", "self", ".", "policy", ",", "\n", "self", ".", "qf", ",", "\n", "self", ".", "target_policy", ",", "\n", "self", ".", "target_qf", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.q_learning.ddpg.DDPGTrainer.get_epoch_snapshot": [[204, 210], ["dict"], "methods", ["None"], ["", "def", "get_epoch_snapshot", "(", "self", ")", ":", "\n", "        ", "return", "dict", "(", "\n", "qf", "=", "self", ".", "qf", ",", "\n", "target_qf", "=", "self", ".", "target_qf", ",", "\n", "trained_policy", "=", "self", ".", "policy", ",", "\n", "target_policy", "=", "self", ".", "target_policy", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.q_learning.td3.TD3Trainer.__init__": [[19, 75], ["lifelong_rl.core.rl_algorithms.torch_rl_algorithm.TorchTrainer.__init__", "optimizer_class", "optimizer_class", "optimizer_class", "collections.OrderedDict", "torch.nn.MSELoss", "torch.nn.MSELoss", "td3.TD3Trainer.qf1.parameters", "td3.TD3Trainer.qf2.parameters", "td3.TD3Trainer.policy.parameters"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "policy", ",", "\n", "qf1", ",", "\n", "qf2", ",", "\n", "target_qf1", ",", "\n", "target_qf2", ",", "\n", "target_policy", ",", "\n", "target_policy_noise", "=", "0.2", ",", "\n", "target_policy_noise_clip", "=", "0.5", ",", "\n", "\n", "discount", "=", "0.99", ",", "\n", "reward_scale", "=", "1.0", ",", "\n", "\n", "policy_learning_rate", "=", "1e-3", ",", "\n", "qf_learning_rate", "=", "1e-3", ",", "\n", "policy_and_target_update_period", "=", "2", ",", "\n", "tau", "=", "0.005", ",", "\n", "qf_criterion", "=", "None", ",", "\n", "optimizer_class", "=", "optim", ".", "Adam", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "qf_criterion", "is", "None", ":", "\n", "            ", "qf_criterion", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "self", ".", "qf1", "=", "qf1", "\n", "self", ".", "qf2", "=", "qf2", "\n", "self", ".", "policy", "=", "policy", "\n", "self", ".", "target_policy", "=", "target_policy", "\n", "self", ".", "target_qf1", "=", "target_qf1", "\n", "self", ".", "target_qf2", "=", "target_qf2", "\n", "self", ".", "target_policy_noise", "=", "target_policy_noise", "\n", "self", ".", "target_policy_noise_clip", "=", "target_policy_noise_clip", "\n", "\n", "self", ".", "discount", "=", "discount", "\n", "self", ".", "reward_scale", "=", "reward_scale", "\n", "\n", "self", ".", "policy_and_target_update_period", "=", "policy_and_target_update_period", "\n", "self", ".", "tau", "=", "tau", "\n", "self", ".", "qf_criterion", "=", "qf_criterion", "\n", "\n", "self", ".", "qf1_optimizer", "=", "optimizer_class", "(", "\n", "self", ".", "qf1", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "qf_learning_rate", ",", "\n", ")", "\n", "self", ".", "qf2_optimizer", "=", "optimizer_class", "(", "\n", "self", ".", "qf2", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "qf_learning_rate", ",", "\n", ")", "\n", "self", ".", "policy_optimizer", "=", "optimizer_class", "(", "\n", "self", ".", "policy", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "policy_learning_rate", ",", "\n", ")", "\n", "\n", "self", ".", "eval_statistics", "=", "OrderedDict", "(", ")", "\n", "self", ".", "_n_train_steps_total", "=", "0", "\n", "self", ".", "_need_to_update_eval_statistics", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.q_learning.td3.TD3Trainer.train_from_torch": [[76, 172], ["td3.TD3Trainer.target_policy", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "td3.TD3Trainer.target_qf1", "td3.TD3Trainer.target_qf2", "torch.min", "torch.min", "torch.min", "torch.min", "q_target.detach.detach.detach", "td3.TD3Trainer.qf1", "bellman_errors_1.mean", "td3.TD3Trainer.qf2", "bellman_errors_2.mean", "td3.TD3Trainer.qf1_optimizer.zero_grad", "bellman_errors_1.mean.backward", "td3.TD3Trainer.qf1_optimizer.step", "td3.TD3Trainer.qf2_optimizer.zero_grad", "bellman_errors_2.mean.backward", "td3.TD3Trainer.qf2_optimizer.step", "lifelong_rl.randn", "td3.TD3Trainer.policy", "td3.TD3Trainer.qf1", "td3.TD3Trainer.policy_optimizer.zero_grad", "policy_loss.backward", "td3.TD3Trainer.policy_optimizer.step", "lifelong_rl.soft_update_from_to", "lifelong_rl.soft_update_from_to", "lifelong_rl.soft_update_from_to", "numpy.mean", "numpy.mean", "numpy.mean", "td3.TD3Trainer.eval_statistics.update", "td3.TD3Trainer.eval_statistics.update", "td3.TD3Trainer.eval_statistics.update", "td3.TD3Trainer.eval_statistics.update", "td3.TD3Trainer.eval_statistics.update", "td3.TD3Trainer.eval_statistics.update", "td3.TD3Trainer.mean", "td3.TD3Trainer.policy", "td3.TD3Trainer.qf1", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "td3.TD3Trainer.mean", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.step", "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.step", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.randn", "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions.policy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.step", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.soft_update_from_to", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.soft_update_from_to", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.soft_update_from_to", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions.policy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy"], ["", "def", "train_from_torch", "(", "self", ",", "batch", ")", ":", "\n", "        ", "rewards", "=", "batch", "[", "'rewards'", "]", "\n", "terminals", "=", "batch", "[", "'terminals'", "]", "\n", "obs", "=", "batch", "[", "'observations'", "]", "\n", "actions", "=", "batch", "[", "'actions'", "]", "\n", "next_obs", "=", "batch", "[", "'next_observations'", "]", "\n", "\n", "\"\"\"\n        Critic operations.\n        \"\"\"", "\n", "\n", "next_actions", "=", "self", ".", "target_policy", "(", "next_obs", ")", "\n", "noise", "=", "ptu", ".", "randn", "(", "next_actions", ".", "shape", ")", "*", "self", ".", "target_policy_noise", "\n", "noise", "=", "torch", ".", "clamp", "(", "\n", "noise", ",", "\n", "-", "self", ".", "target_policy_noise_clip", ",", "\n", "self", ".", "target_policy_noise_clip", "\n", ")", "\n", "noisy_next_actions", "=", "next_actions", "+", "noise", "\n", "\n", "target_q1_values", "=", "self", ".", "target_qf1", "(", "next_obs", ",", "noisy_next_actions", ")", "\n", "target_q2_values", "=", "self", ".", "target_qf2", "(", "next_obs", ",", "noisy_next_actions", ")", "\n", "target_q_values", "=", "torch", ".", "min", "(", "target_q1_values", ",", "target_q2_values", ")", "\n", "q_target", "=", "self", ".", "reward_scale", "*", "rewards", "+", "(", "1.", "-", "terminals", ")", "*", "self", ".", "discount", "*", "target_q_values", "\n", "q_target", "=", "q_target", ".", "detach", "(", ")", "\n", "\n", "q1_pred", "=", "self", ".", "qf1", "(", "obs", ",", "actions", ")", "\n", "bellman_errors_1", "=", "(", "q1_pred", "-", "q_target", ")", "**", "2", "\n", "qf1_loss", "=", "bellman_errors_1", ".", "mean", "(", ")", "\n", "\n", "q2_pred", "=", "self", ".", "qf2", "(", "obs", ",", "actions", ")", "\n", "bellman_errors_2", "=", "(", "q2_pred", "-", "q_target", ")", "**", "2", "\n", "qf2_loss", "=", "bellman_errors_2", ".", "mean", "(", ")", "\n", "\n", "\"\"\"\n        Update Networks\n        \"\"\"", "\n", "self", ".", "qf1_optimizer", ".", "zero_grad", "(", ")", "\n", "qf1_loss", ".", "backward", "(", ")", "\n", "self", ".", "qf1_optimizer", ".", "step", "(", ")", "\n", "\n", "self", ".", "qf2_optimizer", ".", "zero_grad", "(", ")", "\n", "qf2_loss", ".", "backward", "(", ")", "\n", "self", ".", "qf2_optimizer", ".", "step", "(", ")", "\n", "\n", "policy_actions", "=", "policy_loss", "=", "None", "\n", "if", "self", ".", "_n_train_steps_total", "%", "self", ".", "policy_and_target_update_period", "==", "0", ":", "\n", "            ", "policy_actions", "=", "self", ".", "policy", "(", "obs", ")", "\n", "q_output", "=", "self", ".", "qf1", "(", "obs", ",", "policy_actions", ")", "\n", "policy_loss", "=", "-", "q_output", ".", "mean", "(", ")", "\n", "\n", "self", ".", "policy_optimizer", ".", "zero_grad", "(", ")", "\n", "policy_loss", ".", "backward", "(", ")", "\n", "self", ".", "policy_optimizer", ".", "step", "(", ")", "\n", "\n", "ptu", ".", "soft_update_from_to", "(", "self", ".", "policy", ",", "self", ".", "target_policy", ",", "self", ".", "tau", ")", "\n", "ptu", ".", "soft_update_from_to", "(", "self", ".", "qf1", ",", "self", ".", "target_qf1", ",", "self", ".", "tau", ")", "\n", "ptu", ".", "soft_update_from_to", "(", "self", ".", "qf2", ",", "self", ".", "target_qf2", ",", "self", ".", "tau", ")", "\n", "\n", "", "if", "self", ".", "_need_to_update_eval_statistics", ":", "\n", "            ", "self", ".", "_need_to_update_eval_statistics", "=", "False", "\n", "if", "policy_loss", "is", "None", ":", "\n", "                ", "policy_actions", "=", "self", ".", "policy", "(", "obs", ")", "\n", "q_output", "=", "self", ".", "qf1", "(", "obs", ",", "policy_actions", ")", "\n", "policy_loss", "=", "-", "q_output", ".", "mean", "(", ")", "\n", "\n", "", "self", ".", "eval_statistics", "[", "'QF1 Loss'", "]", "=", "np", ".", "mean", "(", "ptu", ".", "get_numpy", "(", "qf1_loss", ")", ")", "\n", "self", ".", "eval_statistics", "[", "'QF2 Loss'", "]", "=", "np", ".", "mean", "(", "ptu", ".", "get_numpy", "(", "qf2_loss", ")", ")", "\n", "self", ".", "eval_statistics", "[", "'Policy Loss'", "]", "=", "np", ".", "mean", "(", "ptu", ".", "get_numpy", "(", "\n", "policy_loss", "\n", ")", ")", "\n", "self", ".", "eval_statistics", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "'Q1 Predictions'", ",", "\n", "ptu", ".", "get_numpy", "(", "q1_pred", ")", ",", "\n", ")", ")", "\n", "self", ".", "eval_statistics", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "'Q2 Predictions'", ",", "\n", "ptu", ".", "get_numpy", "(", "q2_pred", ")", ",", "\n", ")", ")", "\n", "self", ".", "eval_statistics", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "'Q Targets'", ",", "\n", "ptu", ".", "get_numpy", "(", "q_target", ")", ",", "\n", ")", ")", "\n", "self", ".", "eval_statistics", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "'Bellman Errors 1'", ",", "\n", "ptu", ".", "get_numpy", "(", "bellman_errors_1", ")", ",", "\n", ")", ")", "\n", "self", ".", "eval_statistics", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "'Bellman Errors 2'", ",", "\n", "ptu", ".", "get_numpy", "(", "bellman_errors_2", ")", ",", "\n", ")", ")", "\n", "self", ".", "eval_statistics", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "'Policy Action'", ",", "\n", "ptu", ".", "get_numpy", "(", "policy_actions", ")", ",", "\n", ")", ")", "\n", "", "self", ".", "_n_train_steps_total", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.q_learning.td3.TD3Trainer.get_diagnostics": [[173, 175], ["None"], "methods", ["None"], ["", "def", "get_diagnostics", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "eval_statistics", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.q_learning.td3.TD3Trainer.end_epoch": [[176, 178], ["None"], "methods", ["None"], ["", "def", "end_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "_need_to_update_eval_statistics", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.q_learning.td3.TD3Trainer.networks": [[179, 188], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "networks", "(", "self", ")", ":", "\n", "        ", "return", "[", "\n", "self", ".", "policy", ",", "\n", "self", ".", "qf1", ",", "\n", "self", ".", "qf2", ",", "\n", "self", ".", "target_policy", ",", "\n", "self", ".", "target_qf1", ",", "\n", "self", ".", "target_qf2", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.q_learning.td3.TD3Trainer.get_snapshot": [[190, 196], ["dict"], "methods", ["None"], ["", "def", "get_snapshot", "(", "self", ")", ":", "\n", "        ", "return", "dict", "(", "\n", "qf1", "=", "self", ".", "qf1", ",", "\n", "qf2", "=", "self", ".", "qf2", ",", "\n", "trained_policy", "=", "self", ".", "policy", ",", "\n", "target_policy", "=", "self", ".", "target_policy", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.lisp.lisp_config.get_config": [[15, 195], ["lifelong_rl.policies.models.gaussian_policy.TanhGaussianPolicy", "torch.distributions.uniform.Uniform", "lifelong_rl.policies.base.latent_prior_policy.PriorLatentPolicy", "lifelong_rl.group_init", "lifelong_rl.policies.models.gaussian_policy.TanhGaussianPolicy", "lifelong_rl.group_init", "lifelong_rl.trainers.q_learning.sac.SACTrainer", "lifelong_rl.trainers.dads.skill_dynamics.SkillDynamics", "lifelong_rl.trainers.q_learning.sac.SACTrainer", "lifelong_rl.models.dynamics_models.probabilistic_ensemble.ProbabilisticEnsemble", "lifelong_rl.trainers.mbrl.mbrl.MBRLTrainer", "lifelong_rl.trainers.lisp.lisp.LiSPTrainer", "dict", "dict.update", "variant.get", "variant.get", "lifelong_rl.ones", "dict", "dict", "dict", "lifelong_rl.ones", "int"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.group_init", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.group_init", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.ones", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.ones"], ["def", "get_config", "(", "\n", "variant", ",", "\n", "expl_env", ",", "\n", "eval_env", ",", "\n", "obs_dim", ",", "\n", "action_dim", ",", "\n", "replay_buffer", ",", "\n", ")", ":", "\n", "\n", "    ", "\"\"\"\n    Policy construction\n    \"\"\"", "\n", "\n", "M", "=", "variant", "[", "'policy_kwargs'", "]", "[", "'layer_size'", "]", "\n", "latent_dim", "=", "variant", "[", "'policy_kwargs'", "]", "[", "'latent_dim'", "]", "\n", "restrict_dim", "=", "variant", "[", "'discriminator_kwargs'", "]", "[", "'restrict_input_size'", "]", "\n", "\n", "control_policy", "=", "TanhGaussianPolicy", "(", "\n", "obs_dim", "=", "obs_dim", "+", "latent_dim", ",", "\n", "action_dim", "=", "action_dim", ",", "\n", "hidden_sizes", "=", "[", "M", ",", "M", "]", ",", "\n", "restrict_obs_dim", "=", "restrict_dim", ",", "\n", ")", "\n", "\n", "prior", "=", "torch", ".", "distributions", ".", "uniform", ".", "Uniform", "(", "\n", "-", "ptu", ".", "ones", "(", "latent_dim", ")", ",", "ptu", ".", "ones", "(", "latent_dim", ")", ",", "\n", ")", "\n", "\n", "policy", "=", "PriorLatentPolicy", "(", "\n", "policy", "=", "control_policy", ",", "\n", "prior", "=", "prior", ",", "\n", "unconditional", "=", "True", ",", "\n", ")", "\n", "\n", "qf1", ",", "qf2", ",", "target_qf1", ",", "target_qf2", "=", "ppp", ".", "group_init", "(", "\n", "4", ",", "\n", "FlattenMlp", ",", "\n", "input_size", "=", "obs_dim", "+", "latent_dim", "+", "action_dim", ",", "\n", "output_size", "=", "1", ",", "\n", "hidden_sizes", "=", "[", "M", ",", "M", "]", ",", "\n", ")", "\n", "\n", "\"\"\"\n    Learned skill-practice distribution\n    \"\"\"", "\n", "\n", "skill_practice_dist", "=", "TanhGaussianPolicy", "(", "\n", "obs_dim", "=", "obs_dim", ",", "\n", "action_dim", "=", "latent_dim", ",", "\n", "hidden_sizes", "=", "[", "M", ",", "M", "]", ",", "\n", ")", "\n", "\n", "prior_qf1", ",", "prior_qf2", ",", "prior_target_qf1", ",", "prior_target_qf2", "=", "ppp", ".", "group_init", "(", "\n", "4", ",", "\n", "FlattenMlp", ",", "\n", "input_size", "=", "obs_dim", "+", "latent_dim", ",", "\n", "output_size", "=", "1", ",", "\n", "hidden_sizes", "=", "[", "M", ",", "M", "]", ",", "\n", ")", "\n", "\n", "skill_practice_trainer", "=", "SACTrainer", "(", "\n", "env", "=", "expl_env", ",", "\n", "policy", "=", "skill_practice_dist", ",", "\n", "qf1", "=", "prior_qf1", ",", "\n", "qf2", "=", "prior_qf2", ",", "\n", "target_qf1", "=", "prior_target_qf1", ",", "\n", "target_qf2", "=", "prior_target_qf2", ",", "\n", "**", "variant", "[", "'skill_practice_trainer_kwargs'", "]", ",", "\n", ")", "\n", "\n", "\"\"\"\n    Discriminator\n    \"\"\"", "\n", "\n", "discrim_kwargs", "=", "variant", "[", "'discriminator_kwargs'", "]", "\n", "discriminator", "=", "SkillDynamics", "(", "\n", "observation_size", "=", "obs_dim", "if", "restrict_dim", "==", "0", "else", "restrict_dim", ",", "\n", "action_size", "=", "action_dim", ",", "\n", "latent_size", "=", "latent_dim", ",", "\n", "normalize_observations", "=", "True", ",", "\n", "fix_variance", "=", "True", ",", "\n", "fc_layer_params", "=", "[", "discrim_kwargs", "[", "'layer_size'", "]", "]", "*", "discrim_kwargs", "[", "'num_layers'", "]", ",", "\n", "# restrict_observation=0,  # we handle this outside of skill-dynamics", "\n", "# use_latents_as_delta=variant.get('use_latents_as_delta', False),", "\n", ")", "\n", "\n", "\"\"\"\n    Policy trainer\n    \"\"\"", "\n", "\n", "policy_trainer", "=", "SACTrainer", "(", "\n", "env", "=", "expl_env", ",", "\n", "policy", "=", "control_policy", ",", "\n", "qf1", "=", "qf1", ",", "\n", "qf2", "=", "qf2", ",", "\n", "target_qf1", "=", "target_qf1", ",", "\n", "target_qf2", "=", "target_qf2", ",", "\n", "**", "variant", "[", "'policy_trainer_kwargs'", "]", ",", "\n", ")", "\n", "\n", "\"\"\"\n    Model-based reinforcement learning (MBRL) dynamics models\n    \"\"\"", "\n", "\n", "M", "=", "variant", "[", "'mbrl_kwargs'", "]", "[", "'layer_size'", "]", "\n", "\n", "dynamics_model", "=", "ProbabilisticEnsemble", "(", "\n", "ensemble_size", "=", "variant", "[", "'mbrl_kwargs'", "]", "[", "'ensemble_size'", "]", ",", "\n", "obs_dim", "=", "obs_dim", ",", "\n", "action_dim", "=", "action_dim", ",", "\n", "hidden_sizes", "=", "[", "M", ",", "M", ",", "M", ",", "M", "]", ",", "\n", ")", "\n", "model_trainer", "=", "MBRLTrainer", "(", "\n", "ensemble", "=", "dynamics_model", ",", "\n", "**", "variant", "[", "'mbrl_kwargs'", "]", ",", "\n", ")", "\n", "\n", "rollout_len_schedule", "=", "variant", "[", "'rollout_len_schedule'", "]", "\n", "\n", "def", "rollout_len", "(", "train_steps", ")", ":", "\n", "        ", "\"\"\"\n        rollout_len_schedule: [a, b, len_a, len_b]\n        linearly increase length from len_a -> len_b over epochs a -> b\n        \"\"\"", "\n", "epoch", "=", "train_steps", "//", "1000", "\n", "if", "epoch", "<", "rollout_len_schedule", "[", "0", "]", ":", "\n", "            ", "return", "1", "\n", "", "elif", "epoch", ">=", "rollout_len_schedule", "[", "1", "]", ":", "\n", "            ", "return", "rollout_len_schedule", "[", "3", "]", "\n", "", "else", ":", "\n", "            ", "return", "int", "(", "\n", "(", "epoch", "-", "rollout_len_schedule", "[", "0", "]", ")", "/", "\n", "(", "rollout_len_schedule", "[", "1", "]", "-", "rollout_len_schedule", "[", "0", "]", ")", "*", "\n", "(", "rollout_len_schedule", "[", "3", "]", "-", "rollout_len_schedule", "[", "2", "]", ")", "\n", ")", "+", "rollout_len_schedule", "[", "2", "]", "\n", "\n", "", "", "\"\"\"\n    Setup of intrinsic control\n    \"\"\"", "\n", "\n", "trainer", "=", "LiSPTrainer", "(", "\n", "skill_practice_dist", "=", "skill_practice_dist", ",", "\n", "skill_practice_trainer", "=", "skill_practice_trainer", ",", "\n", "dynamics_model", "=", "dynamics_model", ",", "\n", "rollout_len_func", "=", "rollout_len", ",", "\n", "control_policy", "=", "control_policy", ",", "\n", "discriminator", "=", "discriminator", ",", "\n", "replay_buffer", "=", "replay_buffer", ",", "\n", "replay_size", "=", "variant", "[", "'generated_replay_buffer_size'", "]", ",", "\n", "policy_trainer", "=", "policy_trainer", ",", "\n", "restrict_input_size", "=", "restrict_dim", ",", "\n", "**", "variant", "[", "'trainer_kwargs'", "]", ",", "\n", ")", "\n", "\n", "\"\"\"\n    Create config dict\n    \"\"\"", "\n", "\n", "config", "=", "dict", "(", ")", "\n", "config", ".", "update", "(", "dict", "(", "\n", "trainer", "=", "trainer", ",", "\n", "model_trainer", "=", "model_trainer", ",", "\n", "exploration_policy", "=", "policy", ",", "\n", "evaluation_policy", "=", "policy", ",", "\n", "exploration_env", "=", "expl_env", ",", "\n", "evaluation_env", "=", "eval_env", ",", "\n", "replay_buffer", "=", "replay_buffer", ",", "\n", "dynamics_model", "=", "dynamics_model", ",", "\n", "prior", "=", "prior", ",", "\n", "learned_prior", "=", "skill_practice_dist", ",", "\n", "skill_practice_trainer", "=", "skill_practice_trainer", ",", "\n", "control_policy", "=", "control_policy", ",", "\n", "latent_dim", "=", "latent_dim", ",", "\n", "policy_trainer", "=", "policy_trainer", ",", "\n", "rollout_len_func", "=", "rollout_len", ",", "\n", ")", ")", "\n", "config", "[", "'algorithm_kwargs'", "]", "=", "variant", ".", "get", "(", "'algorithm_kwargs'", ",", "dict", "(", ")", ")", "\n", "config", "[", "'offline_kwargs'", "]", "=", "variant", ".", "get", "(", "'offline_kwargs'", ",", "dict", "(", ")", ")", "\n", "\n", "return", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.lisp.mb_skill.MBSkillTrainer.__init__": [[22, 40], ["lifelong_rl.trainers.dads.dads.DADSTrainer.__init__", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros"], ["def", "__init__", "(", "\n", "self", ",", "\n", "dynamics_model", ",", "# Associated dynamics model for generating rollouts", "\n", "rollout_len_func", "=", "always_one", ",", "# Length of generated rollouts", "\n", "num_model_samples", "=", "400", ",", "# Number of timesteps to generate per train call", "\n", "disagreement_threshold", "=", "None", ",", "# Penalize rollouts higher than disagreement threshold", "\n", "*", "args", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "dynamics_model", "=", "dynamics_model", "\n", "self", ".", "rollout_len_func", "=", "rollout_len_func", "\n", "self", ".", "num_model_samples", "=", "num_model_samples", "\n", "self", ".", "disagreement_threshold", "=", "disagreement_threshold", "\n", "\n", "self", ".", "_epoch_size", "=", "self", ".", "num_model_samples", "\n", "self", ".", "_modeL_disagreements", "=", "np", ".", "zeros", "(", "self", ".", "replay_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.lisp.mb_skill.MBSkillTrainer.add_sample": [[41, 44], ["super().add_sample"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.add_sample"], ["", "def", "add_sample", "(", "self", ",", "obs", ",", "next_obs", ",", "true_next_obs", ",", "action", ",", "latent", ",", "disagreement", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_modeL_disagreements", "[", "self", ".", "_ptr", "]", "=", "disagreement", "\n", "super", "(", ")", ".", "add_sample", "(", "obs", ",", "next_obs", ",", "true_next_obs", ",", "action", ",", "latent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.lisp.mb_skill.MBSkillTrainer.generate_latents": [[45, 47], ["numpy.random.uniform"], "methods", ["None"], ["", "def", "generate_latents", "(", "self", ",", "obs", ")", ":", "\n", "        ", "return", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "1", ",", "high", "=", "1", ",", "size", "=", "(", "obs", ".", "shape", "[", "0", "]", ",", "self", ".", "latent_dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.lisp.mb_skill.MBSkillTrainer.generate_paths": [[48, 58], ["lifelong_rl.policy_latent_with_disagreement", "lifelong_rl.policy_latent_with_disagreement"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions.policy_latent_with_disagreement", "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions.policy_latent_with_disagreement"], ["", "def", "generate_paths", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "paths", ",", "path_disagreements", "=", "mrf", ".", "policy_latent_with_disagreement", "(", "\n", "kwargs", "[", "'dynamics_model'", "]", ",", "\n", "kwargs", "[", "'control_policy'", "]", ",", "\n", "kwargs", "[", "'start_states'", "]", ",", "\n", "kwargs", "[", "'latents'", "]", ",", "\n", "max_path_length", "=", "kwargs", "[", "'rollout_len'", "]", ",", "\n", "terminal_cutoff", "=", "None", ",", "\n", ")", "\n", "return", "paths", ",", "path_disagreements", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.lisp.mb_skill.MBSkillTrainer.reward_postprocessing": [[59, 76], ["super().reward_postprocessing", "super().reward_postprocessing", "diagnostics.update", "numpy.mean", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.dads.dads.DADSTrainer.reward_postprocessing", "home.repos.pwc.inspect_result.kzl_lifelong_rl.dads.dads.DADSTrainer.reward_postprocessing", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict"], ["", "def", "reward_postprocessing", "(", "self", ",", "rewards", ",", "reward_kwargs", "=", "None", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "disagreement_threshold", "is", "None", ":", "\n", "            ", "return", "super", "(", ")", ".", "reward_postprocessing", "(", "rewards", ")", "\n", "", "rewards", ",", "diagnostics", "=", "super", "(", ")", ".", "reward_postprocessing", "(", "rewards", ")", "\n", "\n", "disagreements", "=", "reward_kwargs", "[", "'disagreements'", "]", "\n", "violated", "=", "disagreements", ">", "self", ".", "disagreement_threshold", "\n", "rewards", "[", "violated", "]", "=", "self", ".", "reward_bounds", "[", "0", "]", "\n", "\n", "if", "self", ".", "_need_to_update_eval_statistics", ":", "\n", "            ", "diagnostics", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "'Model Disagreement'", ",", "\n", "disagreements", ",", "\n", ")", ")", "\n", "diagnostics", "[", "'Pct of Timesteps over Disagreement Cutoff'", "]", "=", "np", ".", "mean", "(", "violated", ")", "\n", "\n", "", "return", "rewards", ",", "diagnostics", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.lisp.mb_skill.MBSkillTrainer.train_from_torch": [[77, 196], ["mb_skill.MBSkillTrainer.rollout_len_func", "max", "mb_skill.MBSkillTrainer.replay_buffer.random_batch", "mb_skill.MBSkillTrainer.generate_latents", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "gtimer.stamp", "range", "gtimer.stamp", "mb_skill.MBSkillTrainer.train_discriminator", "dict", "mb_skill.MBSkillTrainer.train_from_buffer", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "enumerate", "mb_skill.MBSkillTrainer.calculate_intrinsic_rewards", "rewards.copy", "mb_skill.MBSkillTrainer.reward_postprocessing", "reward_diagnostics.update", "gtimer.stamp", "mb_skill.MBSkillTrainer.eval_statistics.update", "mb_skill.MBSkillTrainer.add_sample", "torch.no_grad", "mb_skill.MBSkillTrainer.generate_paths", "min", "mb_skill.MBSkillTrainer.eval_statistics.update", "mb_skill.MBSkillTrainer.eval_statistics.update", "mb_skill.MBSkillTrainer.eval_statistics.update", "mb_skill.MBSkillTrainer.eval_statistics.update", "mb_skill.MBSkillTrainer.eval_statistics.update", "mb_skill.MBSkillTrainer.eval_statistics.update", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "len", "dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.from_numpy", "lifelong_rl.from_numpy"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.random_batch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.lisp.lisp.LiSPTrainer.generate_latents", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros", "home.repos.pwc.inspect_result.kzl_lifelong_rl.dads.dads.DADSTrainer.train_discriminator", "home.repos.pwc.inspect_result.kzl_lifelong_rl.mbrl.mbrl.MBRLTrainer.train_from_buffer", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.dads.dads.DADSTrainer.calculate_intrinsic_rewards", "home.repos.pwc.inspect_result.kzl_lifelong_rl.dads.dads.DADSTrainer.reward_postprocessing", "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.add_sample", "home.repos.pwc.inspect_result.kzl_lifelong_rl.lisp.mb_skill.MBSkillTrainer.generate_paths", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy"], ["", "def", "train_from_torch", "(", "self", ",", "batch", ")", ":", "\n", "\n", "        ", "self", ".", "_train_calls", "+=", "1", "\n", "if", "self", ".", "_train_calls", "%", "self", ".", "train_every", ">", "0", ":", "\n", "            ", "return", "\n", "\n", "", "rollout_len", "=", "self", ".", "rollout_len_func", "(", "self", ".", "_n_train_steps_total", ")", "\n", "num_model_rollouts", "=", "max", "(", "self", ".", "num_model_samples", "//", "rollout_len", ",", "1", ")", "\n", "self", ".", "eval_statistics", "[", "'Rollout Length'", "]", "=", "rollout_len", "\n", "\n", "real_batch", "=", "self", ".", "replay_buffer", ".", "random_batch", "(", "num_model_rollouts", ")", "\n", "start_states", "=", "real_batch", "[", "'observations'", "]", "\n", "latents", "=", "self", ".", "generate_latents", "(", "start_states", ")", "\n", "\n", "observations", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_model_samples", ",", "self", ".", "obs_dim", ")", ")", "\n", "next_observations", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_model_samples", ",", "self", ".", "obs_dim", ")", ")", "\n", "actions", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_model_samples", ",", "self", ".", "action_dim", ")", ")", "\n", "unfolded_latents", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_model_samples", ",", "self", ".", "latent_dim", ")", ")", "\n", "disagreements", "=", "np", ".", "zeros", "(", "self", ".", "num_model_samples", ")", "\n", "\n", "num_samples", ",", "b_ind", ",", "num_traj", "=", "0", ",", "0", ",", "0", "\n", "while", "num_samples", "<", "self", ".", "num_model_samples", ":", "\n", "            ", "e_ind", "=", "b_ind", "+", "4192", "//", "rollout_len", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "paths", ",", "path_disagreements", "=", "self", ".", "generate_paths", "(", "\n", "dynamics_model", "=", "self", ".", "dynamics_model", ",", "\n", "control_policy", "=", "self", ".", "control_policy", ",", "\n", "start_states", "=", "start_states", "[", "b_ind", ":", "e_ind", "]", ",", "\n", "latents", "=", "ptu", ".", "from_numpy", "(", "latents", "[", "b_ind", ":", "e_ind", "]", ")", ",", "\n", "rollout_len", "=", "rollout_len", ",", "\n", ")", "\n", "\n", "", "b_ind", "=", "e_ind", "\n", "\n", "path_disagreements", "=", "ptu", ".", "get_numpy", "(", "path_disagreements", ")", "\n", "for", "i", ",", "path", "in", "enumerate", "(", "paths", ")", ":", "\n", "                ", "clipped_len", "=", "min", "(", "len", "(", "path", "[", "'observations'", "]", "-", "(", "self", ".", "empowerment_horizon", "-", "1", ")", ")", ",", "\n", "self", ".", "num_model_samples", "-", "num_samples", ")", "\n", "bi", ",", "ei", "=", "num_samples", ",", "num_samples", "+", "clipped_len", "\n", "\n", "if", "self", ".", "empowerment_horizon", ">", "1", ":", "\n", "                    ", "path", "[", "'observations'", "]", "=", "path", "[", "'observations'", "]", "[", ":", "-", "(", "self", ".", "empowerment_horizon", "-", "1", ")", "]", "\n", "path", "[", "'next_observations'", "]", "=", "path", "[", "'next_observations'", "]", "[", "(", "self", ".", "empowerment_horizon", "-", "1", ")", ":", "\n", "(", "self", ".", "empowerment_horizon", "-", "1", ")", "+", "clipped_len", "]", "\n", "path", "[", "'actions'", "]", "=", "path", "[", "'actions'", "]", "[", ":", "-", "(", "self", ".", "empowerment_horizon", "-", "1", ")", "]", "\n", "\n", "", "observations", "[", "bi", ":", "ei", "]", "=", "path", "[", "'observations'", "]", "[", ":", "clipped_len", "]", "\n", "next_observations", "[", "bi", ":", "ei", "]", "=", "path", "[", "'next_observations'", "]", "[", ":", "clipped_len", "]", "\n", "actions", "[", "bi", ":", "ei", "]", "=", "path", "[", "'actions'", "]", "[", ":", "clipped_len", "]", "\n", "unfolded_latents", "[", "bi", ":", "ei", "]", "=", "latents", "[", "num_traj", ":", "num_traj", "+", "1", "]", "\n", "disagreements", "[", "bi", ":", "ei", "]", "=", "path_disagreements", "[", "i", ",", ":", "clipped_len", "]", "\n", "\n", "num_samples", "+=", "clipped_len", "\n", "num_traj", "+=", "1", "\n", "\n", "if", "num_samples", ">=", "self", ".", "num_model_samples", ":", "\n", "                    ", "break", "\n", "\n", "", "", "", "gt", ".", "stamp", "(", "'generating rollouts'", ",", "unique", "=", "False", ")", "\n", "\n", "if", "not", "self", ".", "relabel_rewards", ":", "\n", "            ", "rewards", ",", "(", "logp", ",", "logp_altz", ",", "denom", ")", ",", "reward_diagnostics", "=", "self", ".", "calculate_intrinsic_rewards", "(", "\n", "observations", ",", "next_observations", ",", "unfolded_latents", ")", "\n", "orig_rewards", "=", "rewards", ".", "copy", "(", ")", "\n", "rewards", ",", "postproc_dict", "=", "self", ".", "reward_postprocessing", "(", "\n", "rewards", ",", "reward_kwargs", "=", "dict", "(", "disagreements", "=", "disagreements", ")", ")", "\n", "reward_diagnostics", ".", "update", "(", "postproc_dict", ")", "\n", "\n", "if", "self", ".", "_need_to_update_eval_statistics", ":", "\n", "                ", "self", ".", "eval_statistics", ".", "update", "(", "reward_diagnostics", ")", "\n", "\n", "self", ".", "eval_statistics", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "'Discriminator Log Pis'", ",", "\n", "logp", ",", "\n", ")", ")", "\n", "self", ".", "eval_statistics", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "'Discriminator Alt Log Pis'", ",", "\n", "logp_altz", ",", "\n", ")", ")", "\n", "self", ".", "eval_statistics", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "'Intrinsic Reward Denominator'", ",", "\n", "denom", ",", "\n", ")", ")", "\n", "\n", "self", ".", "eval_statistics", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "'Intrinsic Rewards (Original)'", ",", "\n", "orig_rewards", ",", "\n", ")", ")", "\n", "self", ".", "eval_statistics", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "'Intrinsic Rewards (Processed)'", ",", "\n", "rewards", ",", "\n", ")", ")", "\n", "\n", "", "gt", ".", "stamp", "(", "'intrinsic reward calculation'", ",", "unique", "=", "False", ")", "\n", "\n", "", "if", "self", ".", "_need_to_update_eval_statistics", ":", "\n", "            ", "self", ".", "eval_statistics", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "'Latents'", ",", "\n", "latents", ",", "\n", ")", ")", "\n", "\n", "", "for", "t", "in", "range", "(", "self", ".", "num_model_samples", ")", ":", "\n", "            ", "self", ".", "add_sample", "(", "\n", "observations", "[", "t", "]", ",", "\n", "next_observations", "[", "t", "]", ",", "\n", "next_observations", "[", "t", "]", ",", "# fix this", "\n", "actions", "[", "t", "]", ",", "\n", "unfolded_latents", "[", "t", "]", ",", "\n", "disagreement", "=", "disagreements", "[", "t", "]", ",", "\n", ")", "\n", "\n", "", "gt", ".", "stamp", "(", "'policy training'", ",", "unique", "=", "False", ")", "\n", "\n", "self", ".", "train_discriminator", "(", "observations", ",", "next_observations", ",", "unfolded_latents", ")", "\n", "\n", "reward_kwargs", "=", "dict", "(", "\n", "disagreements", "=", "self", ".", "_modeL_disagreements", "[", ":", "self", ".", "_cur_replay_size", "]", "\n", ")", "\n", "self", ".", "train_from_buffer", "(", "reward_kwargs", "=", "reward_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.lisp.mb_skill.MBSkillTrainer.train_from_paths": [[197, 239], ["len", "gtimer.stamp", "mb_skill.MBSkillTrainer.train_from_torch", "path.get", "numpy.concatenate", "mb_skill.MBSkillTrainer.control_policy.get_log_probs", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "range", "lifelong_rl.from_numpy", "lifelong_rl.from_numpy", "lifelong_rl.from_numpy", "lifelong_rl.from_numpy", "mb_skill.MBSkillTrainer.add_sample", "epoch_obs.append", "epoch_next_obs.append", "epoch_latents.append", "len", "numpy.expand_dims"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchTrainer.train_from_torch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.models.gaussian_policy.TanhGaussianPolicy.get_log_probs", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.add_sample"], ["", "def", "train_from_paths", "(", "self", ",", "paths", ",", "train_discrim", "=", "True", ",", "train_policy", "=", "True", ")", ":", "\n", "\n", "        ", "\"\"\"\n        Reading new paths: append latent to state\n        Note that is equivalent to on-policy when latent buffer size = sum of paths length\n        \"\"\"", "\n", "\n", "epoch_obs", ",", "epoch_next_obs", ",", "epoch_latents", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "path", "in", "paths", ":", "\n", "            ", "obs", "=", "path", "[", "'observations'", "]", "\n", "next_obs", "=", "path", "[", "'next_observations'", "]", "\n", "actions", "=", "path", "[", "'actions'", "]", "\n", "latents", "=", "path", ".", "get", "(", "'latents'", ",", "None", ")", "\n", "path_len", "=", "len", "(", "obs", ")", "-", "self", ".", "empowerment_horizon", "+", "1", "\n", "\n", "obs_latents", "=", "np", ".", "concatenate", "(", "[", "obs", ",", "latents", "]", ",", "axis", "=", "-", "1", ")", "\n", "log_probs", "=", "self", ".", "control_policy", ".", "get_log_probs", "(", "\n", "ptu", ".", "from_numpy", "(", "obs_latents", ")", ",", "\n", "ptu", ".", "from_numpy", "(", "actions", ")", ",", "\n", ")", "\n", "log_probs", "=", "ptu", ".", "get_numpy", "(", "log_probs", ")", "\n", "\n", "for", "t", "in", "range", "(", "path_len", ")", ":", "\n", "                ", "self", ".", "add_sample", "(", "\n", "obs", "[", "t", "]", ",", "\n", "next_obs", "[", "t", "+", "self", ".", "empowerment_horizon", "-", "1", "]", ",", "\n", "next_obs", "[", "t", "]", ",", "\n", "actions", "[", "t", "]", ",", "\n", "latents", "[", "t", "]", ",", "\n", "logprob", "=", "log_probs", "[", "t", "]", ",", "\n", ")", "\n", "\n", "epoch_obs", ".", "append", "(", "obs", "[", "t", ":", "t", "+", "1", "]", ")", "\n", "epoch_next_obs", ".", "append", "(", "next_obs", "[", "t", "+", "self", ".", "empowerment_horizon", "-", "1", ":", "t", "+", "self", ".", "empowerment_horizon", "]", ")", "\n", "epoch_latents", ".", "append", "(", "np", ".", "expand_dims", "(", "latents", "[", "t", "]", ",", "axis", "=", "0", ")", ")", "\n", "\n", "", "", "self", ".", "_epoch_size", "=", "len", "(", "epoch_obs", ")", "\n", "\n", "gt", ".", "stamp", "(", "'policy training'", ",", "unique", "=", "False", ")", "\n", "\n", "self", ".", "train_from_torch", "(", "None", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.lisp.mb_skill.always_one": [[11, 13], ["None"], "function", ["None"], ["def", "always_one", "(", "train_steps", ")", ":", "\n", "    ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.lisp.lisp.LiSPTrainer.__init__": [[20, 39], ["lifelong_rl.trainers.lisp.mb_skill.MBSkillTrainer.__init__"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__"], ["algorithm", "=", "'LiSP'", ",", "\n", "collector_type", "=", "'rf'", ",", "# reset-free exploration environment", "\n", "env_name", "=", "ENV_NAME", ",", "\n", "env_kwargs", "=", "dict", "(", "\n", "terminates", "=", "False", ",", "\n", ")", ",", "\n", "do_offline_training", "=", "True", ",", "# perform both offline and online training (offline always first)", "\n", "do_online_training", "=", "True", ",", "\n", "teacher_data_files", "=", "[", "'lifelong_hopper_full'", "]", ",", "# see README to download", "\n", "replay_buffer_size", "=", "int", "(", "1e6", ")", ",", "\n", "generated_replay_buffer_size", "=", "5000", ",", "# off-policy buffer for policy training", "\n", "use_as_eval_policy", "=", "'uniform'", ",", "# sample uniformly from skill policy for evaluation", "\n", "policy_kwargs", "=", "dict", "(", "\n", "layer_size", "=", "256", ",", "\n", "latent_dim", "=", "4", ",", "\n", ")", ",", "\n", "discriminator_kwargs", "=", "dict", "(", "\n", "layer_size", "=", "512", ",", "\n", "num_layers", "=", "2", ",", "\n", "restrict_input_size", "=", "0", ",", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.lisp.lisp.LiSPTrainer.generate_latents": [[40, 51], ["lisp.LiSPTrainer.skill_practice_dist", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "super().generate_latents", "lifelong_rl.from_numpy", "lifelong_rl.from_numpy", "numpy.random.uniform", "super().generate_latents"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.lisp.lisp.LiSPTrainer.generate_latents", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.lisp.lisp.LiSPTrainer.generate_latents"], [")", ",", "\n", "rollout_len_schedule", "=", "[", "-", "1", ",", "-", "1", ",", "1", ",", "1", "]", ",", "\n", "trainer_kwargs", "=", "dict", "(", "\n", "num_model_samples", "=", "400", ",", "\n", "num_prior_samples", "=", "32", ",", "\n", "num_discrim_updates", "=", "4", ",", "\n", "num_policy_updates", "=", "8", ",", "\n", "discrim_learning_rate", "=", "3e-4", ",", "\n", "policy_batch_size", "=", "256", ",", "\n", "reward_bounds", "=", "(", "-", "30", ",", "30", ")", ",", "\n", "empowerment_horizon", "=", "1", ",", "\n", "reward_scale", "=", "10", ",", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.lisp.lisp.LiSPTrainer.train_from_torch": [[52, 71], ["super().train_from_torch", "range", "lisp.LiSPTrainer.skill_practice_trainer.get_diagnostics().items", "lifelong_rl.sample_batch", "lifelong_rl.sample_batch", "lifelong_rl.np_to_pytorch_batch", "lifelong_rl.np_to_pytorch_batch", "lisp.LiSPTrainer.skill_practice_trainer.train_from_torch", "lisp.LiSPTrainer.skill_practice_trainer.get_diagnostics"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchTrainer.train_from_torch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.sample_batch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.sample_batch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.np_to_pytorch_batch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.np_to_pytorch_batch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchTrainer.train_from_torch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchTrainer.get_diagnostics"], ["disagreement_threshold", "=", ".1", ",", "\n", "relabel_rewards", "=", "True", ",", "\n", "train_every", "=", "10", ",", "\n", "practice_batch_size", "=", "256", ",", "\n", "practice_train_steps", "=", "4", ",", "\n", "epsilon_greedy", "=", "0.2", ",", "\n", ")", ",", "\n", "policy_trainer_kwargs", "=", "dict", "(", "\n", "discount", "=", "0.99", ",", "\n", "policy_lr", "=", "3e-4", ",", "\n", "qf_lr", "=", "3e-4", ",", "\n", "soft_target_tau", "=", "5e-3", ",", "\n", ")", ",", "\n", "skill_practice_trainer_kwargs", "=", "dict", "(", "\n", "discount", "=", "0.99", ",", "\n", "policy_lr", "=", "3e-4", ",", "\n", "qf_lr", "=", "3e-4", ",", "\n", "soft_target_tau", "=", "5e-3", ",", "\n", "use_automatic_entropy_tuning", "=", "True", ",", "\n", "target_entropy", "=", "-", "4", ",", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.lisp.lisp.LiSPTrainer.train_from_buffer": [[72, 156], ["range", "gtimer.stamp", "lisp.LiSPTrainer.calculate_intrinsic_rewards", "rewards.copy", "lisp.LiSPTrainer.reward_postprocessing", "reward_diagnostics.update", "numpy.expand_dims", "gtimer.stamp", "numpy.concatenate", "numpy.concatenate", "lifelong_rl.sample_batch", "lifelong_rl.sample_batch", "lifelong_rl.np_to_pytorch_batch", "lifelong_rl.np_to_pytorch_batch", "lisp.LiSPTrainer.policy_trainer.train_from_torch", "lisp.LiSPTrainer.eval_statistics.update", "lisp.LiSPTrainer.eval_statistics.update", "lisp.LiSPTrainer.eval_statistics.update", "lisp.LiSPTrainer.eval_statistics.update", "lisp.LiSPTrainer.eval_statistics.update", "lisp.LiSPTrainer.eval_statistics.update", "lisp.LiSPTrainer.eval_statistics.update", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.dads.dads.DADSTrainer.calculate_intrinsic_rewards", "home.repos.pwc.inspect_result.kzl_lifelong_rl.dads.dads.DADSTrainer.reward_postprocessing", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.sample_batch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.sample_batch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.np_to_pytorch_batch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.np_to_pytorch_batch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchTrainer.train_from_torch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict"], [")", ",", "\n", "mppi_kwargs", "=", "dict", "(", "\n", "discount", "=", ".99", ",", "\n", "horizon", "=", "60", ",", "\n", "repeat_length", "=", "3", ",", "\n", "plan_every", "=", "1", ",", "\n", "temperature", "=", "0.01", ",", "\n", "noise_std", "=", "1", ",", "\n", "num_rollouts", "=", "400", ",", "\n", "num_particles", "=", "5", ",", "\n", "planning_iters", "=", "10", ",", "\n", "polyak", "=", "0.2", ",", "\n", "sampling_mode", "=", "'ts'", ",", "\n", "sampling_kwargs", "=", "dict", "(", "\n", "reward_penalty", "=", "-", "20", ",", "\n", "disagreement_threshold", "=", "0.1", ",", "\n", ")", ",", "\n", "filter_coefs", "=", "(", "0.05", ",", "0.8", ",", "0", ")", ",", "\n", ")", ",", "\n", "mbrl_kwargs", "=", "dict", "(", "\n", "ensemble_size", "=", "5", ",", "\n", "num_elites", "=", "5", ",", "\n", "layer_size", "=", "256", ",", "\n", "learning_rate", "=", "1e-3", ",", "\n", "batch_size", "=", "256", ",", "\n", ")", ",", "\n", "offline_kwargs", "=", "dict", "(", "\n", "num_epochs", "=", "2000", ",", "\n", "num_eval_steps_per_epoch", "=", "1000", ",", "\n", "num_trains_per_train_loop", "=", "100", ",", "\n", "model_batch_size", "=", "256", ",", "\n", "max_path_length", "=", "200", ",", "\n", "batch_size", "=", "256", ",", "\n", "save_snapshot_freq", "=", "1000", ",", "\n", ")", ",", "\n", "algorithm_kwargs", "=", "dict", "(", "\n", "num_epochs", "=", "10000", ",", "\n", "num_eval_steps_per_epoch", "=", "0", ",", "\n", "num_trains_per_train_loop", "=", "10", ",", "\n", "num_expl_steps_per_train_loop", "=", "10", ",", "\n", "min_num_steps_before_training", "=", "0", ",", "\n", "num_model_trains_per_train_loop", "=", "1", ",", "\n", "max_path_length", "=", "200", ",", "\n", "batch_size", "=", "256", ",", "\n", "model_batch_size", "=", "256", ",", "\n", "save_snapshot_freq", "=", "2500", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "sweep_values", "=", "{", "\n", "}", "\n", "\n", "launch_experiment", "(", "\n", "get_config", "=", "make_get_config", "(", "get_config", ")", ",", "\n", "get_algorithm", "=", "get_algorithm", ",", "\n", "get_offline_algorithm", "=", "get_offline_algorithm", ",", "\n", "variant", "=", "variant", ",", "\n", "sweep_values", "=", "sweep_values", ",", "\n", "**", "experiment_kwargs", "\n", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.lisp.lisp.LiSPTrainer.end_epoch": [[157, 160], ["super().end_epoch", "lisp.LiSPTrainer.skill_practice_trainer.end_epoch"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.end_epoch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.end_epoch"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.lisp.lisp.LiSPTrainer.networks": [[161, 165], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.lisp.lisp.LiSPTrainer.get_snapshot": [[167, 175], ["super().get_snapshot", "lisp.LiSPTrainer.skill_practice_trainer.get_snapshot().items", "lisp.LiSPTrainer.skill_practice_trainer.get_snapshot"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.get_snapshot", "home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.get_snapshot"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.pg.ppo_config.get_config": [[10, 67], ["lifelong_rl.policies.models.gaussian_policy.TanhGaussianPolicy", "lifelong_rl.models.networks.FlattenMlp", "lifelong_rl.trainers.pg.ppo.PPOTrainer", "dict", "dict.update", "dict", "lifelong_rl.policies.base.base.MakeDeterministic"], "function", ["None"], ["def", "get_config", "(", "\n", "variant", ",", "\n", "expl_env", ",", "\n", "eval_env", ",", "\n", "obs_dim", ",", "\n", "action_dim", ",", "\n", "replay_buffer", ",", "\n", ")", ":", "\n", "\n", "    ", "M", "=", "variant", "[", "'policy_kwargs'", "]", "[", "'layer_size'", "]", "\n", "\n", "# PPO is very finicky with weight initializations", "\n", "\n", "policy", "=", "TanhGaussianPolicy", "(", "\n", "obs_dim", "=", "obs_dim", ",", "\n", "action_dim", "=", "action_dim", ",", "\n", "hidden_sizes", "=", "[", "M", ",", "M", "]", ",", "\n", "hidden_activation", "=", "torch", ".", "tanh", ",", "\n", "b_init_value", "=", "0", ",", "\n", "w_scale", "=", "1.41", ",", "\n", "init_w", "=", "0.01", ",", "\n", "final_init_scale", "=", "0.01", ",", "\n", "std", "=", "0.5", ",", "\n", "hidden_init", "=", "ptu", ".", "orthogonal_init", ",", "\n", ")", "\n", "\n", "M", "=", "variant", "[", "'value_kwargs'", "]", "[", "'layer_size'", "]", "\n", "\n", "value_func", "=", "FlattenMlp", "(", "\n", "input_size", "=", "obs_dim", ",", "\n", "output_size", "=", "1", ",", "\n", "hidden_sizes", "=", "[", "M", ",", "M", "]", ",", "\n", "hidden_activation", "=", "torch", ".", "tanh", ",", "\n", "hidden_init", "=", "ptu", ".", "orthogonal_init", ",", "\n", "b_init_value", "=", "0", ",", "\n", "final_init_scale", "=", "1", ",", "\n", ")", "\n", "\n", "trainer", "=", "PPOTrainer", "(", "\n", "env", "=", "eval_env", ",", "\n", "policy", "=", "policy", ",", "\n", "value_func", "=", "value_func", ",", "\n", "**", "variant", "[", "'policy_trainer_kwargs'", "]", ",", "\n", ")", "\n", "\n", "config", "=", "dict", "(", ")", "\n", "config", ".", "update", "(", "dict", "(", "\n", "trainer", "=", "trainer", ",", "\n", "exploration_policy", "=", "policy", ",", "\n", "evaluation_policy", "=", "MakeDeterministic", "(", "policy", ")", ",", "\n", "exploration_env", "=", "expl_env", ",", "\n", "evaluation_env", "=", "eval_env", ",", "\n", "replay_buffer", "=", "replay_buffer", ",", "\n", ")", ")", "\n", "config", "[", "'algorithm_kwargs'", "]", "=", "variant", "[", "'algorithm_kwargs'", "]", "\n", "\n", "return", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.pg.npg_config.get_config": [[10, 67], ["lifelong_rl.policies.models.gaussian_policy.TanhGaussianPolicy", "lifelong_rl.models.networks.FlattenMlp", "lifelong_rl.trainers.pg.npg.NPGTrainer", "dict", "dict.update", "dict", "lifelong_rl.policies.base.base.MakeDeterministic"], "function", ["None"], ["def", "get_config", "(", "\n", "variant", ",", "\n", "expl_env", ",", "\n", "eval_env", ",", "\n", "obs_dim", ",", "\n", "action_dim", ",", "\n", "replay_buffer", ",", "\n", ")", ":", "\n", "\n", "    ", "M", "=", "variant", "[", "'policy_kwargs'", "]", "[", "'layer_size'", "]", "\n", "\n", "# PG is very finicky with weight initializations", "\n", "\n", "policy", "=", "TanhGaussianPolicy", "(", "\n", "obs_dim", "=", "obs_dim", ",", "\n", "action_dim", "=", "action_dim", ",", "\n", "hidden_sizes", "=", "[", "M", ",", "M", "]", ",", "\n", "hidden_activation", "=", "torch", ".", "tanh", ",", "\n", "b_init_value", "=", "0", ",", "\n", "w_scale", "=", "1.41", ",", "\n", "init_w", "=", "0.01", ",", "\n", "final_init_scale", "=", "0.01", ",", "\n", "std", "=", "0.5", ",", "\n", "hidden_init", "=", "ptu", ".", "orthogonal_init", ",", "\n", ")", "\n", "\n", "M", "=", "variant", "[", "'value_kwargs'", "]", "[", "'layer_size'", "]", "\n", "\n", "value_func", "=", "FlattenMlp", "(", "\n", "input_size", "=", "obs_dim", ",", "\n", "output_size", "=", "1", ",", "\n", "hidden_sizes", "=", "[", "M", ",", "M", "]", ",", "\n", "hidden_activation", "=", "torch", ".", "tanh", ",", "\n", "hidden_init", "=", "ptu", ".", "orthogonal_init", ",", "\n", "b_init_value", "=", "0", ",", "\n", "final_init_scale", "=", "1", ",", "\n", ")", "\n", "\n", "trainer", "=", "NPGTrainer", "(", "\n", "env", "=", "eval_env", ",", "\n", "policy", "=", "policy", ",", "\n", "value_func", "=", "value_func", ",", "\n", "**", "variant", "[", "'policy_trainer_kwargs'", "]", ",", "\n", ")", "\n", "\n", "config", "=", "dict", "(", ")", "\n", "config", ".", "update", "(", "dict", "(", "\n", "trainer", "=", "trainer", ",", "\n", "exploration_policy", "=", "policy", ",", "\n", "evaluation_policy", "=", "MakeDeterministic", "(", "policy", ")", ",", "\n", "exploration_env", "=", "expl_env", ",", "\n", "evaluation_env", "=", "eval_env", ",", "\n", "replay_buffer", "=", "replay_buffer", ",", "\n", ")", ")", "\n", "config", "[", "'algorithm_kwargs'", "]", "=", "variant", "[", "'algorithm_kwargs'", "]", "\n", "\n", "return", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.pg.vpg_config.get_config": [[10, 66], ["lifelong_rl.policies.models.gaussian_policy.TanhGaussianPolicy", "lifelong_rl.models.networks.FlattenMlp", "lifelong_rl.trainers.pg.pg.PGTrainer", "dict", "dict.update", "dict", "lifelong_rl.policies.base.base.MakeDeterministic"], "function", ["None"], ["def", "get_config", "(", "\n", "variant", ",", "\n", "expl_env", ",", "\n", "eval_env", ",", "\n", "obs_dim", ",", "\n", "action_dim", ",", "\n", "replay_buffer", ",", "\n", ")", ":", "\n", "\n", "    ", "M", "=", "variant", "[", "'policy_kwargs'", "]", "[", "'layer_size'", "]", "\n", "\n", "policy", "=", "TanhGaussianPolicy", "(", "\n", "obs_dim", "=", "obs_dim", ",", "\n", "action_dim", "=", "action_dim", ",", "\n", "hidden_sizes", "=", "[", "M", ",", "M", "]", ",", "\n", "hidden_activation", "=", "torch", ".", "tanh", ",", "\n", "b_init_value", "=", "0", ",", "\n", "w_scale", "=", "1.41", ",", "\n", "init_w", "=", "0.01", ",", "\n", "final_init_scale", "=", "0.01", ",", "\n", "std", "=", "0.5", ",", "\n", "hidden_init", "=", "ptu", ".", "orthogonal_init", ",", "\n", ")", "\n", "\n", "M", "=", "variant", "[", "'value_kwargs'", "]", "[", "'layer_size'", "]", "\n", "\n", "value_func", "=", "FlattenMlp", "(", "\n", "input_size", "=", "obs_dim", ",", "\n", "output_size", "=", "1", ",", "\n", "hidden_sizes", "=", "[", "M", ",", "M", "]", ",", "\n", "hidden_activation", "=", "torch", ".", "tanh", ",", "\n", "# hidden_init=ptu.orthogonal_init,", "\n", "# w_scale=1.41,", "\n", "b_init_value", "=", "0", ",", "\n", "final_init_scale", "=", "1", ",", "\n", ")", "\n", "\n", "trainer", "=", "PGTrainer", "(", "\n", "env", "=", "eval_env", ",", "\n", "policy", "=", "policy", ",", "\n", "value_func", "=", "value_func", ",", "\n", "**", "variant", "[", "'policy_trainer_kwargs'", "]", ",", "\n", ")", "\n", "\n", "config", "=", "dict", "(", ")", "\n", "config", ".", "update", "(", "dict", "(", "\n", "trainer", "=", "trainer", ",", "\n", "exploration_policy", "=", "policy", ",", "\n", "evaluation_policy", "=", "MakeDeterministic", "(", "policy", ")", ",", "\n", "exploration_env", "=", "expl_env", ",", "\n", "evaluation_env", "=", "eval_env", ",", "\n", "replay_buffer", "=", "replay_buffer", ",", "\n", ")", ")", "\n", "config", "[", "'algorithm_kwargs'", "]", "=", "variant", "[", "'algorithm_kwargs'", "]", "\n", "\n", "return", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.pg.npg.NPGTrainer.__init__": [[38, 51], ["lifelong_rl.trainers.pg.pg.PGTrainer.__init__"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__"], ["normalize_advantages", "=", "True", ",", "\n", "num_policy_epochs", "=", "None", ",", "\n", ")", ",", "\n", "algorithm_kwargs", "=", "dict", "(", "\n", "num_epochs", "=", "1000", ",", "\n", "num_eval_steps_per_epoch", "=", "5000", ",", "\n", "num_trains_per_train_loop", "=", "1", ",", "\n", "num_expl_steps_per_train_loop", "=", "2048", ",", "\n", "min_num_steps_before_training", "=", "1000", ",", "\n", "max_path_length", "=", "1000", ",", "\n", "save_snapshot_freq", "=", "1000", ",", "\n", ")", ",", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.pg.npg.NPGTrainer.CPI_surrogate": [[52, 59], ["torch.autograd.Variable", "torch.squeeze", "torch.squeeze", "torch.exp", "torch.mean", "npg.NPGTrainer.policy.get_log_probs", "old_policy.get_log_probs"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.models.gaussian_policy.TanhGaussianPolicy.get_log_probs", "home.repos.pwc.inspect_result.kzl_lifelong_rl.models.gaussian_policy.TanhGaussianPolicy.get_log_probs"], ["sweep_values", "=", "{", "\n", "}", "\n", "\n", "launch_experiment", "(", "\n", "get_config", "=", "get_config", ",", "\n", "get_algorithm", "=", "get_algorithm", ",", "\n", "variant", "=", "variant", ",", "\n", "sweep_values", "=", "sweep_values", ",", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.pg.npg.NPGTrainer.flat_vpg": [[60, 65], ["npg.NPGTrainer.CPI_surrogate", "torch.autograd.grad", "numpy.concatenate", "g.contiguous().view().cpu().data.numpy", "g.contiguous().view().cpu", "g.contiguous().view", "g.contiguous"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.pg.npg.NPGTrainer.CPI_surrogate"], ["**", "experiment_kwargs", "\n", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.pg.npg.NPGTrainer.HVP": [[66, 86], ["torch.autograd.Variable", "torch.squeeze", "torch.squeeze", "torch.autograd.grad", "torch.cat", "torch.sum", "torch.autograd.grad", "numpy.concatenate", "lifelong_rl.from_numpy().float", "numpy.random.choice", "npg.NPGTrainer.policy.get_log_probs", "old_policy.get_log_probs", "g.contiguous().view", "g.contiguous().view().cpu().data.numpy", "lifelong_rl.from_numpy", "int", "g.contiguous", "g.contiguous().view().cpu", "g.contiguous().view", "g.contiguous"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.models.gaussian_policy.TanhGaussianPolicy.get_log_probs", "home.repos.pwc.inspect_result.kzl_lifelong_rl.models.gaussian_policy.TanhGaussianPolicy.get_log_probs", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.pg.npg.NPGTrainer.build_Hvp_eval": [[87, 93], ["npg.NPGTrainer.HVP"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.pg.npg.NPGTrainer.HVP"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.pg.npg.NPGTrainer.train_policy": [[94, 114], ["lifelong_rl.from_numpy", "lifelong_rl.from_numpy", "lifelong_rl.from_numpy", "torch.squeeze", "torch.squeeze", "npg.NPGTrainer.flat_vpg", "npg.NPGTrainer.build_Hvp_eval", "npg.cg_solve", "numpy.sqrt", "npg.NPGTrainer.policy.get_param_values", "npg.NPGTrainer.policy.set_param_values", "npg.NPGTrainer.policy.get_log_probs", "old_policy.get_log_probs", "numpy.abs", "vpg_grad.copy", "numpy.dot"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.pg.npg.NPGTrainer.flat_vpg", "home.repos.pwc.inspect_result.kzl_lifelong_rl.pg.npg.NPGTrainer.build_Hvp_eval", "home.repos.pwc.inspect_result.kzl_lifelong_rl.pg.npg.cg_solve", "home.repos.pwc.inspect_result.kzl_lifelong_rl.models.gaussian_policy.TanhGaussianPolicy.get_param_values", "home.repos.pwc.inspect_result.kzl_lifelong_rl.models.gaussian_policy.TanhGaussianPolicy.set_param_values", "home.repos.pwc.inspect_result.kzl_lifelong_rl.models.gaussian_policy.TanhGaussianPolicy.get_log_probs", "home.repos.pwc.inspect_result.kzl_lifelong_rl.models.gaussian_policy.TanhGaussianPolicy.get_log_probs"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.pg.npg.cg_solve": [[8, 28], ["numpy.zeros_like", "b.copy", "b.copy.copy", "b.copy.dot", "range", "f_Ax", "b.copy.dot", "r.copy.dot"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros_like"], ["exp_name", "=", "'npg-hopper'", ",", "\n", "num_seeds", "=", "1", ",", "\n", "instance_type", "=", "'c4.4xlarge'", ",", "\n", "use_gpu", "=", "False", ",", "\n", ")", "\n", "\n", "\n", "if", "__name__", "==", "\"__main__\"", ":", "\n", "    ", "variant", "=", "dict", "(", "\n", "algorithm", "=", "'NPG'", ",", "\n", "collector_type", "=", "'batch'", ",", "\n", "env_name", "=", "ENV_NAME", ",", "\n", "env_kwargs", "=", "dict", "(", ")", ",", "\n", "replay_buffer_size", "=", "int", "(", "1e6", ")", ",", "\n", "policy_kwargs", "=", "dict", "(", "\n", "layer_size", "=", "64", ",", "\n", ")", ",", "\n", "value_kwargs", "=", "dict", "(", "\n", "layer_size", "=", "256", ",", "\n", ")", ",", "\n", "policy_trainer_kwargs", "=", "dict", "(", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.pg.pg.PGTrainer.__init__": [[23, 70], ["lifelong_rl.core.rl_algorithms.torch_rl_algorithm.TorchTrainer.__init__", "lifelong_rl.envs.env_utils.get_dim", "lifelong_rl.envs.env_utils.get_dim", "lifelong_rl.envs.env_utils.get_dim", "torch.Adam", "torch.Adam", "collections.OrderedDict", "torch.Adam", "torch.Adam", "pg.PGTrainer.value_func.parameters", "pg.PGTrainer.policy.parameters"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__", "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.env_utils.get_dim", "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.env_utils.get_dim", "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.env_utils.get_dim"], ["def", "__init__", "(", "\n", "self", ",", "\n", "env", ",", "# Associated environment", "\n", "policy", ",", "# Associated policy", "\n", "value_func", ",", "# Associated value function V(s)", "\n", "discount", "=", "0.99", ",", "# Discount factor", "\n", "gae_lambda", "=", "0.95", ",", "# Lambda to use for GAE for value estimation", "\n", "policy_lr", "=", "1e-3", ",", "# Learning rate for policy", "\n", "value_lr", "=", "1e-3", ",", "# Learning rate for value function", "\n", "target_kl", "=", "0.01", ",", "# Can do early termination if KL is reached", "\n", "entropy_coeff", "=", "0.", ",", "# Coefficient of entropy bonus", "\n", "num_epochs", "=", "10", ",", "# Number of epochs for training per train call", "\n", "num_policy_epochs", "=", "None", ",", "# Number of epochs for policy (can be < num_epochs)", "\n", "policy_batch_size", "=", "1024", ",", "# Batch size for policy training", "\n", "value_batch_size", "=", "1024", ",", "# Batch size for value function training", "\n", "normalize_advantages", "=", "True", ",", "# Optionally, can normalize advantages", "\n", "input_normalization", "=", "True", ",", "# Whether or not to normalize the inputs to policy & value", "\n", "max_grad_norm", "=", "10", ",", "# Gradient norm clipping", "\n", "action_dim", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "env", "=", "env", "\n", "self", ".", "obs_dim", "=", "get_dim", "(", "self", ".", "env", ".", "observation_space", ")", "\n", "self", ".", "action_dim", "=", "self", ".", "env", ".", "action_space", ".", "shape", "[", "0", "]", "if", "action_dim", "is", "None", "else", "action_dim", "\n", "self", ".", "policy", "=", "policy", "\n", "self", ".", "value_func", "=", "value_func", "\n", "self", ".", "discount", "=", "discount", "\n", "self", ".", "gae_lambda", "=", "gae_lambda", "\n", "self", ".", "target_kl", "=", "target_kl", "\n", "self", ".", "entropy_coeff", "=", "entropy_coeff", "\n", "self", ".", "num_epochs", "=", "num_epochs", "\n", "self", ".", "num_policy_epochs", "=", "num_policy_epochs", "if", "num_policy_epochs", "is", "not", "None", "else", "num_epochs", "\n", "self", ".", "policy_batch_size", "=", "policy_batch_size", "\n", "self", ".", "value_batch_size", "=", "value_batch_size", "\n", "self", ".", "normalize_advantages", "=", "normalize_advantages", "\n", "self", ".", "input_normalization", "=", "input_normalization", "\n", "self", ".", "max_grad_norm", "=", "max_grad_norm", "\n", "\n", "if", "policy_lr", "is", "not", "None", ":", "\n", "            ", "self", ".", "policy_optim", "=", "optim", ".", "Adam", "(", "self", ".", "policy", ".", "parameters", "(", ")", ",", "lr", "=", "policy_lr", ")", "\n", "", "self", ".", "value_optim", "=", "optim", ".", "Adam", "(", "self", ".", "value_func", ".", "parameters", "(", ")", ",", "lr", "=", "value_lr", ")", "\n", "\n", "self", ".", "_reward_std", "=", "1", "\n", "\n", "self", ".", "_need_to_update_eval_statistics", "=", "True", "\n", "self", ".", "eval_statistics", "=", "OrderedDict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.pg.pg.PGTrainer.train_from_paths": [[71, 217], ["copy.deepcopy", "numpy.concatenate", "numpy.concatenate", "copy.deepcopy", "range", "range", "numpy.squeeze", "numpy.squeeze", "numpy.clip", "numpy.concatenate.append", "numpy.concatenate.append", "lifelong_rl.from_numpy", "lifelong_rl.from_numpy", "lifelong_rl.from_numpy", "lifelong_rl.from_numpy", "lifelong_rl.from_numpy", "lifelong_rl.from_numpy", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "copy.deepcopy.get_log_probs().squeeze", "lifelong_rl.calculate_baselines", "lifelong_rl.calculate_baselines", "lifelong_rl.calculate_baselines", "lifelong_rl.calculate_returns", "lifelong_rl.calculate_returns", "lifelong_rl.calculate_returns", "lifelong_rl.calculate_advantages", "lifelong_rl.calculate_advantages", "lifelong_rl.calculate_advantages", "pg.PGTrainer.policy.get_param_values", "range", "range", "range", "lifelong_rl.get_numpy().mean", "lifelong_rl.get_numpy().mean", "lifelong_rl.get_numpy().mean", "lifelong_rl.get_numpy().mean", "lifelong_rl.get_numpy().mean", "lifelong_rl.get_numpy().mean", "pg.PGTrainer.eval_statistics.update", "pg.PGTrainer.eval_statistics.update", "pg.PGTrainer.eval_statistics.update", "pg.PGTrainer.mean", "pg.PGTrainer.eval_statistics.update", "pg.PGTrainer.eval_statistics.update", "numpy.append", "numpy.append", "len", "pg.PGTrainer.train_policy", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "pg.PGTrainer.policy.get_log_probs().squeeze", "len", "lifelong_rl.sample_batch", "lifelong_rl.sample_batch", "lifelong_rl.sample_batch", "pg.PGTrainer.train_value", "len", "lifelong_rl.sample_batch", "lifelong_rl.sample_batch", "lifelong_rl.sample_batch", "pg.PGTrainer.train_value", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "pg.PGTrainer.policy", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "copy.deepcopy.get_log_probs", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "dict", "lifelong_rl.sample_batch", "lifelong_rl.sample_batch", "lifelong_rl.sample_batch", "pg.PGTrainer.policy.set_param_values", "pg.PGTrainer.value_func", "numpy.var", "numpy.var", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "pg.PGTrainer.value_func", "pg.PGTrainer.policy.get_log_probs"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.path_functions.calculate_baselines", "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.path_functions.calculate_baselines", "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.path_functions.calculate_baselines", "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.path_functions.calculate_returns", "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.path_functions.calculate_returns", "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.path_functions.calculate_returns", "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.path_functions.calculate_advantages", "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.path_functions.calculate_advantages", "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.path_functions.calculate_advantages", "home.repos.pwc.inspect_result.kzl_lifelong_rl.models.gaussian_policy.TanhGaussianPolicy.get_param_values", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.pg.pg.PGTrainer.train_policy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.sample_batch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.sample_batch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.sample_batch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.pg.pg.PGTrainer.train_value", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.sample_batch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.sample_batch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.sample_batch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.pg.pg.PGTrainer.train_value", "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions.policy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.models.gaussian_policy.TanhGaussianPolicy.get_log_probs", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.sample_batch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.sample_batch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.sample_batch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.models.gaussian_policy.TanhGaussianPolicy.set_param_values", "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.loop_config.value_func", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.loop_config.value_func", "home.repos.pwc.inspect_result.kzl_lifelong_rl.models.gaussian_policy.TanhGaussianPolicy.get_log_probs"], ["", "def", "train_from_paths", "(", "self", ",", "paths", ")", ":", "\n", "\n", "        ", "\"\"\"\n        Path preprocessing; have to copy so we don't modify when paths are used elsewhere\n        \"\"\"", "\n", "\n", "paths", "=", "copy", ".", "deepcopy", "(", "paths", ")", "\n", "for", "path", "in", "paths", ":", "\n", "# Other places like to have an extra dimension so that all arrays are 2D", "\n", "            ", "path", "[", "'terminals'", "]", "=", "np", ".", "squeeze", "(", "path", "[", "'terminals'", "]", ",", "axis", "=", "-", "1", ")", "\n", "path", "[", "'rewards'", "]", "=", "np", ".", "squeeze", "(", "path", "[", "'rewards'", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# Reward normalization; divide by std of reward in replay buffer", "\n", "path", "[", "'rewards'", "]", "=", "np", ".", "clip", "(", "path", "[", "'rewards'", "]", "/", "(", "self", ".", "_reward_std", "+", "1e-3", ")", ",", "-", "10", ",", "10", ")", "\n", "\n", "", "obs", ",", "actions", "=", "[", "]", ",", "[", "]", "\n", "for", "path", "in", "paths", ":", "\n", "            ", "obs", ".", "append", "(", "path", "[", "'observations'", "]", ")", "\n", "actions", ".", "append", "(", "path", "[", "'actions'", "]", ")", "\n", "", "obs", "=", "np", ".", "concatenate", "(", "obs", ",", "axis", "=", "0", ")", "\n", "actions", "=", "np", ".", "concatenate", "(", "actions", ",", "axis", "=", "0", ")", "\n", "\n", "obs_tensor", ",", "act_tensor", "=", "ptu", ".", "from_numpy", "(", "obs", ")", ",", "ptu", ".", "from_numpy", "(", "actions", ")", "\n", "\n", "\"\"\"\n        Policy training loop\n        \"\"\"", "\n", "\n", "old_policy", "=", "copy", ".", "deepcopy", "(", "self", ".", "policy", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "log_probs_old", "=", "old_policy", ".", "get_log_probs", "(", "obs_tensor", ",", "act_tensor", ")", ".", "squeeze", "(", "dim", "=", "-", "1", ")", "\n", "\n", "", "rem_value_epochs", "=", "self", ".", "num_epochs", "\n", "for", "epoch", "in", "range", "(", "self", ".", "num_policy_epochs", ")", ":", "\n", "\n", "            ", "\"\"\"\n            Recompute advantages at the beginning of each epoch. This allows for advantages\n                to utilize the latest value function.\n            Note: while this is not present in most implementations, it is recommended\n                  by Andrychowicz et al. 2020.\n            \"\"\"", "\n", "\n", "path_functions", ".", "calculate_baselines", "(", "paths", ",", "self", ".", "value_func", ")", "\n", "path_functions", ".", "calculate_returns", "(", "paths", ",", "self", ".", "discount", ")", "\n", "path_functions", ".", "calculate_advantages", "(", "\n", "paths", ",", "self", ".", "discount", ",", "self", ".", "gae_lambda", ",", "self", ".", "normalize_advantages", ",", "\n", ")", "\n", "\n", "advantages", ",", "returns", ",", "baselines", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "path", "in", "paths", ":", "\n", "                ", "advantages", "=", "np", ".", "append", "(", "advantages", ",", "path", "[", "'advantages'", "]", ")", "\n", "returns", "=", "np", ".", "append", "(", "returns", ",", "path", "[", "'returns'", "]", ")", "\n", "\n", "", "if", "epoch", "==", "0", "and", "self", ".", "_need_to_update_eval_statistics", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "values", "=", "torch", ".", "squeeze", "(", "self", ".", "value_func", "(", "obs_tensor", ")", ",", "dim", "=", "-", "1", ")", "\n", "values_np", "=", "ptu", ".", "get_numpy", "(", "values", ")", "\n", "", "first_val_loss", "=", "(", "(", "returns", "-", "values_np", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "\n", "", "old_params", "=", "self", ".", "policy", ".", "get_param_values", "(", ")", "\n", "\n", "num_policy_steps", "=", "len", "(", "advantages", ")", "//", "self", ".", "policy_batch_size", "\n", "for", "_", "in", "range", "(", "num_policy_steps", ")", ":", "\n", "                ", "if", "num_policy_steps", "==", "1", ":", "\n", "                    ", "batch", "=", "dict", "(", "\n", "observations", "=", "obs", ",", "\n", "actions", "=", "actions", ",", "\n", "advantages", "=", "advantages", ",", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "batch", "=", "ppp", ".", "sample_batch", "(", "\n", "self", ".", "policy_batch_size", ",", "\n", "observations", "=", "obs", ",", "\n", "actions", "=", "actions", ",", "\n", "advantages", "=", "advantages", ",", "\n", ")", "\n", "", "policy_loss", ",", "kl", "=", "self", ".", "train_policy", "(", "batch", ",", "old_policy", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "log_probs", "=", "self", ".", "policy", ".", "get_log_probs", "(", "obs_tensor", ",", "act_tensor", ")", ".", "squeeze", "(", "dim", "=", "-", "1", ")", "\n", "", "kl", "=", "(", "log_probs_old", "-", "log_probs", ")", ".", "mean", "(", ")", "\n", "\n", "if", "(", "self", ".", "target_kl", "is", "not", "None", "and", "kl", ">", "1.5", "*", "self", ".", "target_kl", ")", "or", "(", "kl", "!=", "kl", ")", ":", "\n", "                ", "if", "epoch", ">", "0", "or", "kl", "!=", "kl", ":", "# nan check", "\n", "                    ", "self", ".", "policy", ".", "set_param_values", "(", "old_params", ")", "\n", "", "break", "\n", "\n", "", "num_value_steps", "=", "len", "(", "advantages", ")", "//", "self", ".", "value_batch_size", "\n", "for", "i", "in", "range", "(", "num_value_steps", ")", ":", "\n", "                ", "batch", "=", "ppp", ".", "sample_batch", "(", "\n", "self", ".", "value_batch_size", ",", "\n", "observations", "=", "obs", ",", "\n", "targets", "=", "returns", ",", "\n", ")", "\n", "value_loss", "=", "self", ".", "train_value", "(", "batch", ")", "\n", "", "rem_value_epochs", "-=", "1", "\n", "\n", "# Ensure the value function is always updated for the maximum number", "\n", "# of epochs, regardless of if the policy wants to terminate early.", "\n", "", "for", "_", "in", "range", "(", "rem_value_epochs", ")", ":", "\n", "            ", "num_value_steps", "=", "len", "(", "advantages", ")", "//", "self", ".", "value_batch_size", "\n", "for", "i", "in", "range", "(", "num_value_steps", ")", ":", "\n", "                ", "batch", "=", "ppp", ".", "sample_batch", "(", "\n", "self", ".", "value_batch_size", ",", "\n", "observations", "=", "obs", ",", "\n", "targets", "=", "returns", ",", "\n", ")", "\n", "value_loss", "=", "self", ".", "train_value", "(", "batch", ")", "\n", "\n", "", "", "if", "self", ".", "_need_to_update_eval_statistics", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "_", ",", "_", ",", "_", ",", "log_pi", ",", "*", "_", "=", "self", ".", "policy", "(", "obs_tensor", ",", "return_log_prob", "=", "True", ")", "\n", "values", "=", "torch", ".", "squeeze", "(", "self", ".", "value_func", "(", "obs_tensor", ")", ",", "dim", "=", "-", "1", ")", "\n", "values_np", "=", "ptu", ".", "get_numpy", "(", "values", ")", "\n", "\n", "", "errors", "=", "returns", "-", "values_np", "\n", "explained_variance", "=", "1", "-", "(", "np", ".", "var", "(", "errors", ")", "/", "np", ".", "var", "(", "returns", ")", ")", "\n", "value_loss", "=", "errors", "**", "2", "\n", "\n", "self", ".", "eval_statistics", "[", "'Num Epochs'", "]", "=", "epoch", "+", "1", "\n", "\n", "self", ".", "eval_statistics", "[", "'Policy Loss'", "]", "=", "ptu", ".", "get_numpy", "(", "policy_loss", ")", ".", "mean", "(", ")", "\n", "self", ".", "eval_statistics", "[", "'KL Divergence'", "]", "=", "ptu", ".", "get_numpy", "(", "kl", ")", ".", "mean", "(", ")", "\n", "self", ".", "eval_statistics", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "'Log Pis'", ",", "\n", "ptu", ".", "get_numpy", "(", "log_pi", ")", ",", "\n", ")", ")", "\n", "self", ".", "eval_statistics", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "'Advantages'", ",", "\n", "advantages", ",", "\n", ")", ")", "\n", "self", ".", "eval_statistics", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "'Returns'", ",", "\n", "returns", ",", "\n", ")", ")", "\n", "\n", "self", ".", "eval_statistics", "[", "'Value Loss'", "]", "=", "value_loss", ".", "mean", "(", ")", "\n", "self", ".", "eval_statistics", "[", "'First Value Loss'", "]", "=", "first_val_loss", "\n", "self", ".", "eval_statistics", "[", "'Value Explained Variance'", "]", "=", "explained_variance", "\n", "self", ".", "eval_statistics", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "'Values'", ",", "\n", "ptu", ".", "get_numpy", "(", "values", ")", ",", "\n", ")", ")", "\n", "self", ".", "eval_statistics", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "'Value Squared Errors'", ",", "\n", "value_loss", ",", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.pg.pg.PGTrainer.fit_input_stats": [[219, 228], ["replay_buffer.get_transitions", "pg.PGTrainer.policy.fit_input_stats", "pg.PGTrainer.value_func.fit_input_stats", "transitions[].std", "transitions[].max"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.get_transitions", "home.repos.pwc.inspect_result.kzl_lifelong_rl.models.networks.ParallelizedEnsemble.fit_input_stats", "home.repos.pwc.inspect_result.kzl_lifelong_rl.models.networks.ParallelizedEnsemble.fit_input_stats"], ["", "", "def", "fit_input_stats", "(", "self", ",", "replay_buffer", ")", ":", "\n", "        ", "if", "self", ".", "input_normalization", ":", "\n", "            ", "transitions", "=", "replay_buffer", ".", "get_transitions", "(", ")", "\n", "obs", "=", "transitions", "[", ":", ",", ":", "self", ".", "obs_dim", "]", "\n", "self", ".", "policy", ".", "fit_input_stats", "(", "obs", ")", "\n", "self", ".", "value_func", ".", "fit_input_stats", "(", "obs", ")", "\n", "self", ".", "_reward_std", "=", "transitions", "[", ":", ",", "-", "(", "self", ".", "obs_dim", "+", "2", ")", "]", ".", "std", "(", ")", "\n", "if", "self", ".", "_reward_std", "<", "0.01", ":", "\n", "                ", "self", ".", "_reward_std", "=", "transitions", "[", ":", ",", "-", "(", "self", ".", "obs_dim", "+", "2", ")", "]", ".", "max", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.pg.pg.PGTrainer.policy_objective": [[229, 235], ["torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "pg.PGTrainer.policy.get_log_probs", "old_policy.get_log_probs"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.models.gaussian_policy.TanhGaussianPolicy.get_log_probs", "home.repos.pwc.inspect_result.kzl_lifelong_rl.models.gaussian_policy.TanhGaussianPolicy.get_log_probs"], ["", "", "", "def", "policy_objective", "(", "self", ",", "obs", ",", "actions", ",", "advantages", ",", "old_policy", ")", ":", "\n", "        ", "log_probs", "=", "torch", ".", "squeeze", "(", "self", ".", "policy", ".", "get_log_probs", "(", "obs", ",", "actions", ")", ",", "dim", "=", "-", "1", ")", "\n", "log_probs_old", "=", "torch", ".", "squeeze", "(", "old_policy", ".", "get_log_probs", "(", "obs", ",", "actions", ")", ",", "dim", "=", "-", "1", ")", "\n", "objective", "=", "(", "log_probs", "*", "advantages", ")", ".", "mean", "(", ")", "\n", "kl", "=", "(", "log_probs_old", "-", "log_probs", ")", ".", "mean", "(", ")", "\n", "return", "objective", ",", "kl", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.pg.pg.PGTrainer.train_policy": [[236, 250], ["lifelong_rl.from_numpy", "lifelong_rl.from_numpy", "lifelong_rl.from_numpy", "lifelong_rl.from_numpy", "lifelong_rl.from_numpy", "lifelong_rl.from_numpy", "lifelong_rl.from_numpy", "lifelong_rl.from_numpy", "lifelong_rl.from_numpy", "pg.PGTrainer.policy_objective", "pg.PGTrainer.policy_optim.zero_grad", "policy_loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "pg.PGTrainer.policy_optim.step", "pg.PGTrainer.policy.parameters"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.pg.ppo.PPOTrainer.policy_objective", "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.step"], ["", "def", "train_policy", "(", "self", ",", "batch", ",", "old_policy", ")", ":", "\n", "        ", "obs", "=", "ptu", ".", "from_numpy", "(", "batch", "[", "'observations'", "]", ")", "\n", "actions", "=", "ptu", ".", "from_numpy", "(", "batch", "[", "'actions'", "]", ")", "\n", "advantages", "=", "ptu", ".", "from_numpy", "(", "batch", "[", "'advantages'", "]", ")", "\n", "\n", "objective", ",", "kl", "=", "self", ".", "policy_objective", "(", "obs", ",", "actions", ",", "advantages", ",", "old_policy", ")", "\n", "policy_loss", "=", "-", "objective", "\n", "\n", "self", ".", "policy_optim", ".", "zero_grad", "(", ")", "\n", "policy_loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "policy", ".", "parameters", "(", ")", ",", "self", ".", "max_grad_norm", ")", "\n", "self", ".", "policy_optim", ".", "step", "(", ")", "\n", "\n", "return", "policy_loss", ",", "kl", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.pg.pg.PGTrainer.train_value": [[251, 263], ["lifelong_rl.from_numpy", "lifelong_rl.from_numpy", "lifelong_rl.from_numpy", "lifelong_rl.from_numpy", "lifelong_rl.from_numpy", "lifelong_rl.from_numpy", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "pg.PGTrainer.value_optim.zero_grad", "value_loss.backward", "pg.PGTrainer.value_optim.step", "pg.PGTrainer.value_func"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.step", "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.loop_config.value_func"], ["", "def", "train_value", "(", "self", ",", "batch", ")", ":", "\n", "        ", "obs", "=", "ptu", ".", "from_numpy", "(", "batch", "[", "'observations'", "]", ")", "\n", "targets", "=", "ptu", ".", "from_numpy", "(", "batch", "[", "'targets'", "]", ")", "\n", "\n", "value_preds", "=", "torch", ".", "squeeze", "(", "self", ".", "value_func", "(", "obs", ")", ",", "dim", "=", "-", "1", ")", "\n", "value_loss", "=", "0.5", "*", "(", "(", "value_preds", "-", "targets", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "\n", "self", ".", "value_optim", ".", "zero_grad", "(", ")", "\n", "value_loss", ".", "backward", "(", ")", "\n", "self", ".", "value_optim", ".", "step", "(", ")", "\n", "\n", "return", "value_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.pg.pg.PGTrainer.get_diagnostics": [[264, 266], ["None"], "methods", ["None"], ["", "def", "get_diagnostics", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "eval_statistics", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.pg.pg.PGTrainer.end_epoch": [[267, 269], ["None"], "methods", ["None"], ["", "def", "end_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "_need_to_update_eval_statistics", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.pg.pg.PGTrainer.networks": [[270, 275], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "networks", "(", "self", ")", ":", "\n", "        ", "return", "[", "\n", "self", ".", "policy", ",", "\n", "self", ".", "value_func", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.pg.pg.PGTrainer.get_snapshot": [[277, 281], ["dict"], "methods", ["None"], ["", "def", "get_snapshot", "(", "self", ")", ":", "\n", "        ", "return", "dict", "(", "\n", "policy", "=", "self", ".", "policy", ",", "\n", "value_func", "=", "self", ".", "value_func", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.pg.ppo.PPOTrainer.__init__": [[13, 22], ["lifelong_rl.trainers.pg.pg.PGTrainer.__init__"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__"], ["\n", "\n", "if", "__name__", "==", "\"__main__\"", ":", "\n", "    ", "variant", "=", "dict", "(", "\n", "algorithm", "=", "'PPO'", ",", "\n", "collector_type", "=", "'batch'", ",", "\n", "env_name", "=", "ENV_NAME", ",", "\n", "env_kwargs", "=", "dict", "(", ")", ",", "\n", "replay_buffer_size", "=", "int", "(", "1e6", ")", ",", "\n", "policy_kwargs", "=", "dict", "(", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.pg.ppo.PPOTrainer.policy_objective": [[23, 36], ["torch.squeeze", "torch.squeeze", "torch.exp", "torch.min().mean", "ppo.PPOTrainer.policy.get_log_probs", "old_policy.get_log_probs", "torch.clamp", "torch.min"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.models.gaussian_policy.TanhGaussianPolicy.get_log_probs", "home.repos.pwc.inspect_result.kzl_lifelong_rl.models.gaussian_policy.TanhGaussianPolicy.get_log_probs"], ["layer_size", "=", "64", ",", "\n", ")", ",", "\n", "value_kwargs", "=", "dict", "(", "\n", "layer_size", "=", "256", ",", "\n", ")", ",", "\n", "policy_trainer_kwargs", "=", "dict", "(", "\n", "discount", "=", "0.99", ",", "\n", "gae_lambda", "=", "0.97", ",", "\n", "ppo_epsilon", "=", "0.2", ",", "\n", "policy_lr", "=", "3e-4", ",", "\n", "value_lr", "=", "3e-4", ",", "\n", "target_kl", "=", "None", ",", "\n", "num_epochs", "=", "10", ",", "\n", "policy_batch_size", "=", "64", ",", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.make_mpc_policy.make_get_config": [[4, 44], ["base_get_config", "lifelong_rl.policies.mpc.policy_mpc.PolicyMPCController"], "function", ["None"], ["def", "make_get_config", "(", "base_get_config", ")", ":", "\n", "\n", "    ", "\"\"\"\n    Convert an algorithm that has a skill policy into one which performs MPC\n    over the space of skills.\n    \"\"\"", "\n", "\n", "def", "get_config", "(", "\n", "variant", ",", "\n", "expl_env", ",", "\n", "eval_env", ",", "\n", "obs_dim", ",", "\n", "action_dim", ",", "\n", "replay_buffer", ",", "\n", ")", ":", "\n", "        ", "config", "=", "base_get_config", "(", "\n", "variant", ",", "\n", "expl_env", ",", "\n", "eval_env", ",", "\n", "obs_dim", ",", "\n", "action_dim", ",", "\n", "replay_buffer", ",", "\n", ")", "\n", "\n", "policy", "=", "PolicyMPCController", "(", "\n", "env", "=", "expl_env", ",", "\n", "dynamics_model", "=", "config", "[", "'dynamics_model'", "]", ",", "\n", "policy", "=", "config", "[", "'control_policy'", "]", ",", "\n", "latent_dim", "=", "config", "[", "'latent_dim'", "]", ",", "\n", "**", "variant", "[", "'mppi_kwargs'", "]", ",", "\n", ")", "\n", "\n", "config", "[", "'exploration_policy'", "]", "=", "policy", "\n", "\n", "if", "variant", "[", "'use_as_eval_policy'", "]", "==", "'mppi'", ":", "\n", "            ", "config", "[", "'evaluation_policy'", "]", "=", "policy", "\n", "\n", "", "return", "config", "\n", "\n", "", "return", "get_config", "\n", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.loop_config.value_func": [[14, 20], ["critic_policy", "torch.cat", "torch.min", "qf1", "qf2"], "function", ["None"], ["def", "value_func", "(", "obs", ",", "critic_policy", "=", "None", ",", "qf1", "=", "None", ",", "qf2", "=", "None", ")", ":", "\n", "    ", "actions", ",", "*", "_", "=", "critic_policy", "(", "obs", ")", "\n", "sa", "=", "torch", ".", "cat", "(", "[", "obs", ",", "actions", "]", ",", "dim", "=", "-", "1", ")", "\n", "q1", ",", "q2", "=", "qf1", "(", "sa", ")", ",", "qf2", "(", "sa", ")", "\n", "min_q", "=", "torch", ".", "min", "(", "q1", ",", "q2", ")", "\n", "return", "min_q", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.loop_config.get_config": [[22, 117], ["lifelong_rl.policies.models.gaussian_policy.TanhGaussianPolicy", "lifelong_rl.group_init", "lifelong_rl.trainers.q_learning.sac.SACTrainer", "lifelong_rl.models.dynamics_models.probabilistic_ensemble.ProbabilisticEnsemble", "lifelong_rl.trainers.mbrl.mbrl.MBRLTrainer", "lifelong_rl.policies.mpc.mpc.MPCPolicy", "lifelong_rl.trainers.mpc.mpc_trainer.MPPITrainer", "lifelong_rl.trainers.multi_trainer.MultiTrainer", "dict", "dict.update", "variant.get", "dict", "dict", "dict"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.group_init"], ["", "def", "get_config", "(", "\n", "variant", ",", "\n", "expl_env", ",", "\n", "eval_env", ",", "\n", "obs_dim", ",", "\n", "action_dim", ",", "\n", "replay_buffer", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Set up terminal value function\n    \"\"\"", "\n", "\n", "M", "=", "variant", "[", "'policy_kwargs'", "]", "[", "'layer_size'", "]", "\n", "\n", "critic_policy", "=", "TanhGaussianPolicy", "(", "\n", "obs_dim", "=", "obs_dim", ",", "\n", "action_dim", "=", "action_dim", ",", "\n", "hidden_sizes", "=", "[", "M", ",", "M", "]", ",", "\n", ")", "\n", "\n", "qf1", ",", "qf2", ",", "target_qf1", ",", "target_qf2", "=", "ppp", ".", "group_init", "(", "\n", "4", ",", "\n", "FlattenMlp", ",", "\n", "input_size", "=", "obs_dim", "+", "action_dim", ",", "\n", "output_size", "=", "1", ",", "\n", "hidden_sizes", "=", "[", "M", ",", "M", "]", ",", "\n", ")", "\n", "\n", "critic_policy_trainer", "=", "SACTrainer", "(", "\n", "env", "=", "expl_env", ",", "\n", "policy", "=", "critic_policy", ",", "\n", "qf1", "=", "qf1", ",", "\n", "qf2", "=", "qf2", ",", "\n", "target_qf1", "=", "target_qf1", ",", "\n", "target_qf2", "=", "target_qf2", ",", "\n", "**", "variant", "[", "'policy_trainer_kwargs'", "]", ",", "\n", ")", "\n", "\n", "\"\"\"\n    Set up dynamics model\n    \"\"\"", "\n", "\n", "M", "=", "variant", "[", "'mbrl_kwargs'", "]", "[", "'layer_size'", "]", "\n", "\n", "dynamics_model", "=", "ProbabilisticEnsemble", "(", "\n", "ensemble_size", "=", "variant", "[", "'mbrl_kwargs'", "]", "[", "'ensemble_size'", "]", ",", "\n", "obs_dim", "=", "obs_dim", ",", "\n", "action_dim", "=", "action_dim", ",", "\n", "hidden_sizes", "=", "[", "M", ",", "M", ",", "M", ",", "M", "]", ",", "\n", ")", "\n", "model_trainer", "=", "MBRLTrainer", "(", "\n", "ensemble", "=", "dynamics_model", ",", "\n", "**", "variant", "[", "'mbrl_kwargs'", "]", ",", "\n", ")", "\n", "\n", "\"\"\"\n    Set up MPC\n    \"\"\"", "\n", "\n", "policy", "=", "MPCPolicy", "(", "\n", "env", "=", "expl_env", ",", "\n", "dynamics_model", "=", "dynamics_model", ",", "\n", "plan_dim", "=", "action_dim", ",", "\n", "value_func", "=", "value_func", ",", "\n", "value_func_kwargs", "=", "dict", "(", "\n", "critic_policy", "=", "critic_policy", ",", "\n", "qf1", "=", "qf1", ",", "\n", "qf2", "=", "qf2", ",", "\n", ")", ",", "\n", "**", "variant", "[", "'mpc_kwargs'", "]", ",", "\n", ")", "\n", "trainer", "=", "MPPITrainer", "(", "\n", "policy", "=", "policy", ",", "\n", ")", "\n", "\n", "trainer", "=", "MultiTrainer", "(", "\n", "trainers", "=", "[", "trainer", ",", "critic_policy_trainer", "]", ",", "\n", "trainer_steps", "=", "[", "1", ",", "1", "]", ",", "\n", "trainer_names", "=", "[", "'mpc_trainer'", ",", "'sac_trainer'", "]", ",", "\n", ")", "\n", "\n", "config", "=", "dict", "(", ")", "\n", "config", ".", "update", "(", "dict", "(", "\n", "trainer", "=", "trainer", ",", "\n", "model_trainer", "=", "model_trainer", ",", "\n", "exploration_policy", "=", "policy", ",", "\n", "evaluation_policy", "=", "critic_policy", ",", "\n", "exploration_env", "=", "expl_env", ",", "\n", "evaluation_env", "=", "eval_env", ",", "\n", "replay_buffer", "=", "replay_buffer", ",", "\n", "dynamics_model", "=", "dynamics_model", ",", "\n", ")", ")", "\n", "config", "[", "'algorithm_kwargs'", "]", "=", "variant", ".", "get", "(", "'algorithm_kwargs'", ",", "dict", "(", ")", ")", "\n", "\n", "return", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc.get_config": [[7, 70], ["lifelong_rl.models.dynamics_models.probabilistic_ensemble.ProbabilisticEnsemble", "lifelong_rl.trainers.mbrl.mbrl.MBRLTrainer", "lifelong_rl.policies.mpc.mpc.MPCPolicy", "lifelong_rl.policies.mpc.mpc.MPCPolicy", "lifelong_rl.trainers.mpc.mpc_trainer.MPPITrainer", "dict", "dict.update", "dict"], "function", ["None"], ["def", "get_config", "(", "\n", "variant", ",", "\n", "expl_env", ",", "\n", "eval_env", ",", "\n", "obs_dim", ",", "\n", "action_dim", ",", "\n", "replay_buffer", ",", "\n", ")", ":", "\n", "\n", "    ", "\"\"\"\n    Model-based reinforcement learning (MBRL) dynamics models\n    \"\"\"", "\n", "\n", "M", "=", "variant", "[", "'mbrl_kwargs'", "]", "[", "'layer_size'", "]", "\n", "\n", "dynamics_model", "=", "ProbabilisticEnsemble", "(", "\n", "ensemble_size", "=", "variant", "[", "'mbrl_kwargs'", "]", "[", "'ensemble_size'", "]", ",", "\n", "obs_dim", "=", "obs_dim", ",", "\n", "action_dim", "=", "action_dim", ",", "\n", "hidden_sizes", "=", "[", "M", ",", "M", ",", "M", ",", "M", "]", ",", "\n", ")", "\n", "model_trainer", "=", "MBRLTrainer", "(", "\n", "ensemble", "=", "dynamics_model", ",", "\n", "**", "variant", "[", "'mbrl_kwargs'", "]", ",", "\n", ")", "\n", "\n", "\"\"\"\n    Setup of MPPI policies\n    \"\"\"", "\n", "\n", "policy", "=", "MPCPolicy", "(", "\n", "env", "=", "expl_env", ",", "\n", "dynamics_model", "=", "dynamics_model", ",", "\n", "plan_dim", "=", "action_dim", ",", "\n", "**", "variant", "[", "'mpc_kwargs'", "]", ",", "\n", ")", "\n", "eval_policy", "=", "MPCPolicy", "(", "\n", "env", "=", "eval_env", ",", "\n", "dynamics_model", "=", "dynamics_model", ",", "\n", "plan_dim", "=", "action_dim", ",", "\n", "**", "variant", "[", "'mpc_kwargs'", "]", ",", "\n", ")", "\n", "trainer", "=", "MPPITrainer", "(", "\n", "policy", "=", "policy", ",", "\n", ")", "\n", "\n", "\"\"\"\n    Create config dict\n    \"\"\"", "\n", "\n", "config", "=", "dict", "(", ")", "\n", "config", ".", "update", "(", "dict", "(", "\n", "trainer", "=", "trainer", ",", "\n", "model_trainer", "=", "model_trainer", ",", "\n", "exploration_policy", "=", "policy", ",", "\n", "evaluation_policy", "=", "eval_policy", ",", "\n", "exploration_env", "=", "expl_env", ",", "\n", "evaluation_env", "=", "eval_env", ",", "\n", "replay_buffer", "=", "replay_buffer", ",", "\n", ")", ")", "\n", "config", "[", "'algorithm_kwargs'", "]", "=", "variant", "[", "'algorithm_kwargs'", "]", "\n", "\n", "return", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.policy_mpc.PolicyMPCController.__init__": [[13, 22], ["lifelong_rl.policies.mpc.mpc.MPCPolicy.__init__"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "policy", ",", "# control policy to run that takes in a latent", "\n", "latent_dim", ",", "# dimension of the latent to feed the policy", "\n", "*", "args", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "plan_dim", "=", "latent_dim", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "policy", "=", "policy", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.policy_mpc.PolicyMPCController.convert_plan_to_action": [[23, 29], ["policy_mpc.PolicyMPCController.policy.get_action", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.base.latent_prior_policy.PriorLatentPolicy.get_action"], ["", "def", "convert_plan_to_action", "(", "self", ",", "obs", ",", "plan", ",", "deterministic", "=", "False", ")", ":", "\n", "        ", "action", ",", "*", "_", "=", "self", ".", "policy", ".", "get_action", "(", "\n", "np", ".", "concatenate", "(", "(", "obs", ",", "plan", ")", ",", "axis", "=", "-", "1", ")", ",", "\n", "deterministic", "=", "True", ",", "\n", ")", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.policy_mpc.PolicyMPCController.convert_plans_to_actions": [[30, 36], ["policy_mpc.PolicyMPCController.policy", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions.policy"], ["", "def", "convert_plans_to_actions", "(", "self", ",", "obs", ",", "plans", ",", "deterministic", "=", "True", ")", ":", "\n", "        ", "actions", ",", "*", "_", "=", "self", ".", "policy", "(", "\n", "torch", ".", "cat", "(", "(", "obs", ",", "plans", ")", ",", "dim", "=", "-", "1", ")", ",", "\n", "deterministic", "=", "deterministic", ",", "\n", ")", "\n", "return", "actions", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc.MPCPolicy.__init__": [[21, 100], ["lifelong_rl.optimizers.random_shooting.mppi.MPPIOptimizer", "lifelong_rl.optimizers.random_shooting.mppi.MPPIOptimizer", "mpc.MPCPolicy.initialize_plan", "collections.OrderedDict", "dict", "dict", "dict", "dict"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc.MPCPolicy.initialize_plan"], ["\n", "dynamics_model", "=", "ProbabilisticEnsemble", "(", "\n", "ensemble_size", "=", "variant", "[", "'mbrl_kwargs'", "]", "[", "'ensemble_size'", "]", ",", "\n", "obs_dim", "=", "obs_dim", ",", "\n", "action_dim", "=", "action_dim", ",", "\n", "hidden_sizes", "=", "[", "M", ",", "M", ",", "M", ",", "M", "]", ",", "\n", ")", "\n", "model_trainer", "=", "MBRLTrainer", "(", "\n", "ensemble", "=", "dynamics_model", ",", "\n", "**", "variant", "[", "'mbrl_kwargs'", "]", ",", "\n", ")", "\n", "\n", "\"\"\"\n    Setup of MPPI policies\n    \"\"\"", "\n", "\n", "policy", "=", "MPCPolicy", "(", "\n", "env", "=", "expl_env", ",", "\n", "dynamics_model", "=", "dynamics_model", ",", "\n", "plan_dim", "=", "action_dim", ",", "\n", "**", "variant", "[", "'mpc_kwargs'", "]", ",", "\n", ")", "\n", "eval_policy", "=", "MPCPolicy", "(", "\n", "env", "=", "eval_env", ",", "\n", "dynamics_model", "=", "dynamics_model", ",", "\n", "plan_dim", "=", "action_dim", ",", "\n", "**", "variant", "[", "'mpc_kwargs'", "]", ",", "\n", ")", "\n", "trainer", "=", "MPPITrainer", "(", "\n", "policy", "=", "policy", ",", "\n", ")", "\n", "\n", "\"\"\"\n    Create config dict\n    \"\"\"", "\n", "\n", "config", "=", "dict", "(", ")", "\n", "config", ".", "update", "(", "dict", "(", "\n", "trainer", "=", "trainer", ",", "\n", "model_trainer", "=", "model_trainer", ",", "\n", "exploration_policy", "=", "policy", ",", "\n", "evaluation_policy", "=", "eval_policy", ",", "\n", "exploration_env", "=", "expl_env", ",", "\n", "evaluation_env", "=", "eval_env", ",", "\n", "replay_buffer", "=", "replay_buffer", ",", "\n", ")", ")", "\n", "config", "[", "'algorithm_kwargs'", "]", "=", "variant", "[", "'algorithm_kwargs'", "]", "\n", "\n", "return", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc.MPCPolicy.get_action": [[101, 123], ["mpc.MPCPolicy.convert_plan_to_action", "mpc.MPCPolicy.advance_plan", "mpc.MPCPolicy.optimizer.optimize", "numpy.ones", "mpc.MPCPolicy.diagnostics.update"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc.MPCPolicy.convert_plan_to_action", "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc.MPCPolicy.advance_plan", "home.repos.pwc.inspect_result.kzl_lifelong_rl.random_shooting.rs_optimizer.RSOptimizer.optimize", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.ones"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc.MPCPolicy.convert_plan_to_action": [[124, 127], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc.MPCPolicy.convert_plans_to_actions": [[128, 131], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc.MPCPolicy.advance_plan": [[132, 140], ["numpy.concatenate", "numpy.zeros", "numpy.copy"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc.MPCPolicy.get_plan_values": [[141, 151], ["lifelong_rl.zeros", "lifelong_rl.zeros", "mpc.MPCPolicy.get_plan_values_batch"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros", "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc.MPCPolicy.get_plan_values_batch"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc.MPCPolicy.get_plan_values_batch": [[152, 194], ["range", "mpc.MPCPolicy.diagnostics.update", "mpc.MPCPolicy.get_plan_values_batch_gt", "lifelong_rl.zeros", "lifelong_rl.zeros", "lifelong_rl.zeros", "lifelong_rl.zeros", "dict", "range", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "mpc.MPCPolicy.value_func().view", "mpc.MPCPolicy.diagnostics.update", "mpc.MPCPolicy.convert_plans_to_actions", "mpc.MPCPolicy.predict_transition", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "torch.max", "mpc.MPCPolicy.value_func", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "cur_dones.float"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc.MPCPolicy.get_plan_values_batch_gt", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc.MPCPolicy.convert_plans_to_actions", "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc.MPCPolicy.predict_transition", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.loop_config.value_func", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc.MPCPolicy.get_plan_values_batch_gt": [[195, 206], ["lifelong_rl.zeros", "lifelong_rl.zeros", "numpy.copy", "range", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "mpc.MPCPolicy._get_true_env_value", "mpc.MPCPolicy.value_func", "lifelong_rl.from_numpy", "lifelong_rl.from_numpy"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc.MPCPolicy._get_true_env_value", "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.loop_config.value_func", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc.MPCPolicy._get_true_env_value": [[207, 237], ["copy.deepcopy", "copy.deepcopy.sim.set_state", "range", "copy.deepcopy", "range", "mpc.MPCPolicy.env.sim.get_state", "mpc.MPCPolicy.convert_plan_to_action", "copy.deepcopy.step", "len", "mpc.MPCPolicy.reward_func", "obs.reshape", "mpc.MPCPolicy.reshape", "next_obs.reshape"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc.MPCPolicy.convert_plan_to_action", "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.step"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc.MPCPolicy._get_model_plan_value": [[238, 245], ["plan.view", "plans.permute.permute.permute", "obs.view.view.view", "mpc.MPCPolicy.get_plan_values", "lifelong_rl.get_numpy().mean", "lifelong_rl.get_numpy().mean", "lifelong_rl.from_numpy", "lifelong_rl.from_numpy", "lifelong_rl.from_numpy", "lifelong_rl.from_numpy", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc.MPCPolicy.get_plan_values", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc.MPCPolicy.predict_transition": [[246, 265], ["mpc.MPCPolicy._predict_transition_ts", "mpc.MPCPolicy.reward_func", "mpc.MPCPolicy.diagnostics.update", "mpc.MPCPolicy._predict_transition_uniform", "NotImplementedError", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc.MPCPolicy._predict_transition_ts", "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc.MPCPolicy._predict_transition_uniform", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc.MPCPolicy.cost_function": [[266, 292], ["torch.no_grad", "mpc.MPCPolicy.create_particles", "mpc.MPCPolicy.get_plan_values().view", "mpc.MPCPolicy.get_weighted_returns", "mpc.MPCPolicy.diagnostics.update", "mpc.MPCPolicy.diagnostics.update", "mpc.MPCPolicy.var", "mpc.MPCPolicy.var", "lifelong_rl.get_numpy().mean", "lifelong_rl.get_numpy().mean", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "mpc.MPCPolicy.get_plan_values", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "numpy.std", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "mpc.MPCPolicy.var.mean"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc.MPCPolicy.create_particles", "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc.MPCPolicy.get_weighted_returns", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc.MPCPolicy.get_plan_values", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc.MPCPolicy.filter_noise": [[293, 301], ["noise.reshape.reshape.reshape", "range", "noise.reshape.reshape.reshape"], "methods", ["None"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc.MPCPolicy.create_particles": [[302, 328], ["lifelong_rl.from_numpy", "lifelong_rl.from_numpy", "expanded.expand.contiguous().view.view", "expanded.expand.contiguous().view.transpose", "expanded.expand", "expanded.expand.contiguous().view", "lifelong_rl.from_numpy", "lifelong_rl.from_numpy", "obs.expand.expand.expand", "expanded.expand.contiguous"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc.MPCPolicy.get_weighted_returns": [[329, 334], ["torch.sort", "weighted_returns.sum", "lifelong_rl.get_mask", "lifelong_rl.get_mask"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.risk_aversion.get_mask", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.risk_aversion.get_mask"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc.MPCPolicy._predict_transition_ts": [[339, 346], ["mpc.MPCPolicy.dynamics_model.forward", "mpc.MPCPolicy._flatten_from_ts", "torch.cat", "mpc.MPCPolicy._expand_to_ts_form", "mpc.MPCPolicy._expand_to_ts_form"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.dynamics_models.probabilistic_ensemble.ProbabilisticEnsemble.forward", "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc.MPCPolicy._flatten_from_ts", "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc.MPCPolicy._expand_to_ts_form", "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc.MPCPolicy._expand_to_ts_form"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc.MPCPolicy._predict_transition_uniform": [[347, 350], ["mpc.MPCPolicy.dynamics_model.sample", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.sample"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc.MPCPolicy._predict_transition_penalty_soft": [[351, 354], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc.MPCPolicy._expand_to_ts_form": [[355, 361], ["x.view", "reshaped.transpose.contiguous().view.transpose", "transposed.contiguous().view.transpose.contiguous().view", "transposed.contiguous().view.transpose.contiguous"], "methods", ["None"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc.MPCPolicy._flatten_from_ts": [[362, 368], ["y.view", "reshaped.transpose.contiguous().view.transpose", "transposed.contiguous().view.transpose.contiguous().view", "transposed.contiguous().view.transpose.contiguous"], "methods", ["None"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc.MPCPolicy.initialize_plan": [[373, 375], ["numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc.MPCPolicy.reset": [[376, 381], ["mpc.MPCPolicy.initialize_plan"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc.MPCPolicy.initialize_plan"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc.MPCPolicy.get_diagnostics": [[382, 384], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc.MPCPolicy.end_epoch": [[385, 387], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc_trainer.MPPITrainer.__init__": [[16, 26], ["lifelong_rl.core.rl_algorithms.torch_rl_algorithm.TorchTrainer.__init__", "collections.OrderedDict"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "policy", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "policy", "=", "policy", "\n", "\n", "self", ".", "eval_statistics", "=", "OrderedDict", "(", ")", "\n", "self", ".", "_need_to_update_eval_statistics", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc_trainer.MPPITrainer.train_from_torch": [[27, 29], ["None"], "methods", ["None"], ["", "def", "train_from_torch", "(", "self", ",", "batch", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc_trainer.MPPITrainer.get_diagnostics": [[30, 32], ["None"], "methods", ["None"], ["", "def", "get_diagnostics", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "eval_statistics", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc_trainer.MPPITrainer.end_epoch": [[33, 36], ["mpc_trainer.MPPITrainer.policy.end_epoch"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.end_epoch"], ["", "def", "end_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "policy", ".", "end_epoch", "(", "epoch", ")", "\n", "self", ".", "_need_to_update_eval_statistics", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc_trainer.MPPITrainer.networks": [[37, 40], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "networks", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "policy", ".", "dynamics_model", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc_trainer.MPPITrainer.get_snapshot": [[41, 44], ["dict"], "methods", ["None"], ["", "def", "get_snapshot", "(", "self", ")", ":", "\n", "        ", "return", "dict", "(", "\n", "dynamics_model", "=", "self", ".", "policy", ".", "dynamics_model", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.dads.dads_config.get_config": [[13, 124], ["lifelong_rl.policies.models.gaussian_policy.TanhGaussianPolicy", "torch.distributions.uniform.Uniform", "lifelong_rl.policies.base.latent_prior_policy.PriorLatentPolicy", "lifelong_rl.group_init", "lifelong_rl.trainers.dads.skill_dynamics.SkillDynamics", "lifelong_rl.trainers.q_learning.sac.SACTrainer", "variant.get", "trainer_class", "dict", "dict.update", "variant.get", "variant.get", "lifelong_rl.ones", "NotImplementedError", "dict", "dict", "dict", "lifelong_rl.ones", "discrim_kwargs.get", "discrim_kwargs.get"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.group_init", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.ones", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.ones"], ["def", "get_config", "(", "\n", "variant", ",", "\n", "expl_env", ",", "\n", "eval_env", ",", "\n", "obs_dim", ",", "\n", "action_dim", ",", "\n", "replay_buffer", ",", "\n", ")", ":", "\n", "\n", "    ", "\"\"\"\n    Policy construction\n    \"\"\"", "\n", "\n", "M", "=", "variant", "[", "'policy_kwargs'", "]", "[", "'layer_size'", "]", "\n", "latent_dim", "=", "variant", "[", "'policy_kwargs'", "]", "[", "'latent_dim'", "]", "\n", "restrict_dim", "=", "variant", "[", "'discriminator_kwargs'", "]", "[", "'restrict_input_size'", "]", "\n", "\n", "control_policy", "=", "TanhGaussianPolicy", "(", "\n", "obs_dim", "=", "obs_dim", "+", "latent_dim", ",", "\n", "action_dim", "=", "action_dim", ",", "\n", "hidden_sizes", "=", "[", "M", ",", "M", "]", ",", "\n", "restrict_obs_dim", "=", "restrict_dim", ",", "\n", ")", "\n", "\n", "prior", "=", "torch", ".", "distributions", ".", "uniform", ".", "Uniform", "(", "\n", "-", "ptu", ".", "ones", "(", "latent_dim", ")", ",", "ptu", ".", "ones", "(", "latent_dim", ")", ",", "\n", ")", "\n", "\n", "policy", "=", "PriorLatentPolicy", "(", "\n", "policy", "=", "control_policy", ",", "\n", "prior", "=", "prior", ",", "\n", "unconditional", "=", "True", ",", "\n", ")", "\n", "\n", "qf1", ",", "qf2", ",", "target_qf1", ",", "target_qf2", "=", "ppp", ".", "group_init", "(", "\n", "4", ",", "\n", "FlattenMlp", ",", "\n", "input_size", "=", "obs_dim", "+", "latent_dim", "+", "action_dim", ",", "\n", "output_size", "=", "1", ",", "\n", "hidden_sizes", "=", "[", "M", ",", "M", "]", ",", "\n", ")", "\n", "\n", "\"\"\"\n    Discriminator\n    \"\"\"", "\n", "\n", "discrim_kwargs", "=", "variant", "[", "'discriminator_kwargs'", "]", "\n", "discriminator", "=", "SkillDynamics", "(", "\n", "observation_size", "=", "obs_dim", "if", "restrict_dim", "==", "0", "else", "restrict_dim", ",", "\n", "action_size", "=", "action_dim", ",", "\n", "latent_size", "=", "latent_dim", ",", "\n", "normalize_observations", "=", "discrim_kwargs", ".", "get", "(", "'normalize_observations'", ",", "True", ")", ",", "\n", "fix_variance", "=", "discrim_kwargs", ".", "get", "(", "'fix_variance'", ",", "True", ")", ",", "\n", "fc_layer_params", "=", "[", "discrim_kwargs", "[", "'layer_size'", "]", "]", "*", "discrim_kwargs", "[", "'num_layers'", "]", ",", "\n", ")", "\n", "\n", "\"\"\"\n    Policy trainer\n    \"\"\"", "\n", "\n", "policy_trainer", "=", "SACTrainer", "(", "\n", "env", "=", "expl_env", ",", "\n", "policy", "=", "control_policy", ",", "\n", "qf1", "=", "qf1", ",", "\n", "qf2", "=", "qf2", ",", "\n", "target_qf1", "=", "target_qf1", ",", "\n", "target_qf2", "=", "target_qf2", ",", "\n", "**", "variant", "[", "'policy_trainer_kwargs'", "]", ",", "\n", ")", "\n", "\n", "\"\"\"\n    Setup of intrinsic control\n    \"\"\"", "\n", "\n", "dads_type", "=", "variant", ".", "get", "(", "'dads_type'", ",", "'onpolicy'", ")", "\n", "if", "dads_type", "==", "'onpolicy'", ":", "\n", "        ", "trainer_class", "=", "DADSTrainer", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'dads_type not recognized'", ")", "\n", "\n", "", "trainer", "=", "trainer_class", "(", "\n", "control_policy", "=", "control_policy", ",", "\n", "discriminator", "=", "discriminator", ",", "\n", "replay_buffer", "=", "replay_buffer", ",", "\n", "replay_size", "=", "variant", "[", "'generated_replay_buffer_size'", "]", ",", "\n", "policy_trainer", "=", "policy_trainer", ",", "\n", "restrict_input_size", "=", "restrict_dim", ",", "\n", "**", "variant", "[", "'trainer_kwargs'", "]", ",", "\n", ")", "\n", "\n", "\"\"\"\n    Create config dict\n    \"\"\"", "\n", "\n", "config", "=", "dict", "(", ")", "\n", "config", ".", "update", "(", "dict", "(", "\n", "trainer", "=", "trainer", ",", "\n", "exploration_policy", "=", "policy", ",", "\n", "evaluation_policy", "=", "policy", ",", "\n", "exploration_env", "=", "expl_env", ",", "\n", "evaluation_env", "=", "eval_env", ",", "\n", "replay_buffer", "=", "replay_buffer", ",", "\n", "prior", "=", "prior", ",", "\n", "control_policy", "=", "control_policy", ",", "\n", "latent_dim", "=", "latent_dim", ",", "\n", "policy_trainer", "=", "policy_trainer", ",", "\n", ")", ")", "\n", "config", "[", "'algorithm_kwargs'", "]", "=", "variant", ".", "get", "(", "'algorithm_kwargs'", ",", "dict", "(", ")", ")", "\n", "config", "[", "'offline_kwargs'", "]", "=", "variant", ".", "get", "(", "'offline_kwargs'", ",", "dict", "(", ")", ")", "\n", "\n", "return", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.dads.empowerment_functions.calculate_contrastive_empowerment": [[7, 98], ["discriminator.eval", "lifelong_rl.from_numpy", "numpy.concatenate", "numpy.concatenate", "numpy.array", "torch.no_grad", "discriminator.get_log_prob", "lifelong_rl.get_numpy", "numpy.random.uniform", "torch.no_grad", "numpy.array_split", "dict", "numpy.repeat", "numpy.log", "numpy.log", "lifelong_rl.from_numpy", "lifelong_rl.from_numpy", "lifelong_rl.from_numpy", "prior.get_action", "NotImplementedError", "lifelong_rl.get_numpy", "range", "numpy.concatenate", "numpy.expand_dims", "AssertionError", "discriminator.get_log_prob", "np.concatenate.append", "np.concatenate.append", "numpy.exp().sum", "lifelong_rl.from_numpy", "lifelong_rl.from_numpy", "lifelong_rl.from_numpy", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "discriminator.get_log_prob", "discriminator.get_log_prob", "numpy.exp", "lifelong_rl.from_numpy", "lifelong_rl.from_numpy", "lifelong_rl.from_numpy", "lifelong_rl.from_numpy", "lifelong_rl.from_numpy", "lifelong_rl.from_numpy", "numpy.clip", "ptu.get_numpy.reshape"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.base.latent_prior_policy.PriorLatentPolicy.eval", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.dads.skill_dynamics.SkillDynamics.get_log_prob", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.log", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.log", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.base.latent_prior_policy.PriorLatentPolicy.get_action", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.dads.skill_dynamics.SkillDynamics.get_log_prob", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.dads.skill_dynamics.SkillDynamics.get_log_prob", "home.repos.pwc.inspect_result.kzl_lifelong_rl.dads.skill_dynamics.SkillDynamics.get_log_prob", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy"], ["def", "calculate_contrastive_empowerment", "(", "\n", "discriminator", ",", "\n", "obs", ",", "\n", "next_obs", ",", "\n", "latents", ",", "\n", "num_prior_samples", "=", "512", ",", "\n", "distribution_type", "=", "'uniform'", ",", "\n", "split_group", "=", "4096", "*", "32", ",", "\n", "obs_mean", "=", "None", ",", "\n", "obs_std", "=", "None", ",", "\n", "return_diagnostics", "=", "False", ",", "\n", "prior", "=", "None", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Described in Sharma et al 2019.\n    Approximate variational lower bound using estimate of s' from s, z.\n    Uses contrastive negatives to approximate denominator.\n    \"\"\"", "\n", "\n", "discriminator", ".", "eval", "(", ")", "\n", "\n", "if", "obs_mean", "is", "not", "None", ":", "\n", "        ", "obs", "=", "(", "obs", "-", "obs_mean", ")", "/", "(", "obs_std", "+", "1e-6", ")", "\n", "next_obs", "=", "(", "next_obs", "-", "obs_mean", ")", "/", "(", "obs_std", "+", "1e-6", ")", "\n", "\n", "", "obs_deltas", "=", "ptu", ".", "from_numpy", "(", "next_obs", "-", "obs", ")", "\n", "obs_altz", "=", "np", ".", "concatenate", "(", "[", "obs", "]", "*", "num_prior_samples", ",", "axis", "=", "0", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "logp", "=", "discriminator", ".", "get_log_prob", "(", "\n", "ptu", ".", "from_numpy", "(", "obs", ")", ",", "\n", "ptu", ".", "from_numpy", "(", "latents", ")", ",", "\n", "obs_deltas", ",", "\n", ")", "\n", "logp", "=", "ptu", ".", "get_numpy", "(", "logp", ")", "\n", "\n", "", "if", "distribution_type", "==", "'uniform'", ":", "\n", "        ", "latent_altz", "=", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "1", ",", "high", "=", "1", ",", "size", "=", "(", "obs_altz", ".", "shape", "[", "0", "]", ",", "latents", ".", "shape", "[", "1", "]", ")", ")", "\n", "", "elif", "distribution_type", "==", "'prior'", ":", "\n", "        ", "if", "prior", "is", "None", ":", "\n", "            ", "raise", "AssertionError", "(", "'prior specified but not passed in'", ")", "\n", "", "obs_t", "=", "ptu", ".", "from_numpy", "(", "obs_altz", ")", "\n", "latent_altz", ",", "*", "_", "=", "prior", ".", "get_action", "(", "obs_t", ",", "deterministic", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'distribution_type not found'", ")", "\n", "\n", "# keep track of next obs/delta", "\n", "", "next_obs_altz", "=", "np", ".", "concatenate", "(", "[", "next_obs", "-", "obs", "]", "*", "num_prior_samples", ",", "axis", "=", "0", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "if", "obs_altz", ".", "shape", "[", "0", "]", "<=", "split_group", ":", "\n", "            ", "logp_altz", "=", "ptu", ".", "get_numpy", "(", "discriminator", ".", "get_log_prob", "(", "\n", "ptu", ".", "from_numpy", "(", "obs_altz", ")", ",", "\n", "ptu", ".", "from_numpy", "(", "latent_altz", ")", ",", "\n", "ptu", ".", "from_numpy", "(", "next_obs_altz", ")", ",", "\n", ")", ")", "\n", "", "else", ":", "\n", "            ", "logp_altz", "=", "[", "]", "\n", "for", "split_idx", "in", "range", "(", "obs_altz", ".", "shape", "[", "0", "]", "//", "split_group", ")", ":", "\n", "                ", "start_split", "=", "split_idx", "*", "split_group", "\n", "end_split", "=", "(", "split_idx", "+", "1", ")", "*", "split_group", "\n", "logp_altz", ".", "append", "(", "\n", "ptu", ".", "get_numpy", "(", "discriminator", ".", "get_log_prob", "(", "\n", "ptu", ".", "from_numpy", "(", "obs_altz", "[", "start_split", ":", "end_split", "]", ")", ",", "\n", "ptu", ".", "from_numpy", "(", "latent_altz", "[", "start_split", ":", "end_split", "]", ")", ",", "\n", "ptu", ".", "from_numpy", "(", "next_obs_altz", "[", "start_split", ":", "end_split", "]", ")", ",", "\n", ")", ")", ")", "\n", "", "if", "obs_altz", ".", "shape", "[", "0", "]", "%", "split_group", ":", "\n", "                ", "start_split", "=", "obs_altz", ".", "shape", "[", "0", "]", "%", "split_group", "\n", "logp_altz", ".", "append", "(", "\n", "ptu", ".", "get_numpy", "(", "discriminator", ".", "get_log_prob", "(", "\n", "ptu", ".", "from_numpy", "(", "obs_altz", "[", "-", "start_split", ":", "]", ")", ",", "\n", "ptu", ".", "from_numpy", "(", "latent_altz", "[", "-", "start_split", ":", "]", ")", ",", "\n", "ptu", ".", "from_numpy", "(", "next_obs_altz", "[", "-", "start_split", ":", "]", ")", ",", "\n", ")", ")", ")", "\n", "", "logp_altz", "=", "np", ".", "concatenate", "(", "logp_altz", ")", "\n", "", "", "logp_altz", "=", "np", ".", "array", "(", "np", ".", "array_split", "(", "logp_altz", ",", "num_prior_samples", ")", ")", "\n", "\n", "if", "return_diagnostics", ":", "\n", "        ", "diagnostics", "=", "dict", "(", ")", "\n", "orig_rep", "=", "np", ".", "repeat", "(", "np", ".", "expand_dims", "(", "logp", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ",", "repeats", "=", "num_prior_samples", ")", "\n", "diagnostics", "[", "'Pct Random Skills > Original'", "]", "=", "(", "orig_rep", "<", "logp_altz", ")", ".", "mean", "(", ")", "\n", "\n", "# final DADS reward", "\n", "", "intrinsic_reward", "=", "np", ".", "log", "(", "num_prior_samples", "+", "1", ")", "-", "np", ".", "log", "(", "1", "+", "np", ".", "exp", "(", "\n", "np", ".", "clip", "(", "logp_altz", "-", "logp", ".", "reshape", "(", "1", ",", "-", "1", ")", ",", "-", "50", ",", "50", ")", ")", ".", "sum", "(", "axis", "=", "0", ")", ")", "\n", "\n", "if", "not", "return_diagnostics", ":", "\n", "        ", "return", "intrinsic_reward", ",", "(", "logp", ",", "logp_altz", ",", "logp", "-", "intrinsic_reward", ")", "\n", "", "else", ":", "\n", "        ", "return", "intrinsic_reward", ",", "(", "logp", ",", "logp_altz", ",", "logp", "-", "intrinsic_reward", ")", ",", "diagnostics", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.dads.dads.DADSTrainer.__init__": [[21, 87], ["lifelong_rl.core.rl_algorithms.torch_rl_algorithm.TorchTrainer.__init__", "replay_buffer.obs_dim", "replay_buffer.action_dim", "torch.optim.Adam", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "collections.OrderedDict", "discriminator.parameters"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__", "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.obs_dim", "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.action_dim", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros"], ["env_name", "=", "ENV_NAME", ",", "\n", "env_kwargs", "=", "dict", "(", "\n", "grid_files", "=", "[", "'blank'", "]", ",", "# specifies which file to load for gridworld", "\n", "terminates", "=", "False", ",", "\n", ")", ",", "\n", "policy_kwargs", "=", "dict", "(", "\n", "layer_size", "=", "256", ",", "\n", "latent_dim", "=", "2", ",", "\n", ")", ",", "\n", "discriminator_kwargs", "=", "dict", "(", "\n", "layer_size", "=", "512", ",", "\n", "num_layers", "=", "2", ",", "\n", "restrict_input_size", "=", "0", ",", "\n", ")", ",", "\n", "trainer_kwargs", "=", "dict", "(", "\n", "num_prior_samples", "=", "512", ",", "\n", "num_discrim_updates", "=", "32", ",", "\n", "num_policy_updates", "=", "128", ",", "\n", "discrim_learning_rate", "=", "3e-4", ",", "\n", "policy_batch_size", "=", "256", ",", "\n", "reward_bounds", "=", "(", "-", "30", ",", "30", ")", ",", "\n", "reward_scale", "=", "5", ",", "# increasing reward scale helps learning signal", "\n", ")", ",", "\n", "policy_trainer_kwargs", "=", "dict", "(", "\n", "discount", "=", "0.99", ",", "\n", "policy_lr", "=", "3e-4", ",", "\n", "qf_lr", "=", "3e-4", ",", "\n", "soft_target_tau", "=", "5e-3", ",", "\n", ")", ",", "\n", "algorithm_kwargs", "=", "dict", "(", "\n", "num_epochs", "=", "100", ",", "\n", "num_eval_steps_per_epoch", "=", "5000", ",", "\n", "num_trains_per_train_loop", "=", "1", ",", "\n", "num_expl_steps_per_train_loop", "=", "2000", ",", "\n", "min_num_steps_before_training", "=", "0", ",", "\n", "max_path_length", "=", "100", ",", "\n", "save_snapshot_freq", "=", "100", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "sweep_values", "=", "{", "\n", "}", "\n", "\n", "launch_experiment", "(", "\n", "get_config", "=", "get_config", ",", "\n", "get_algorithm", "=", "get_algorithm", ",", "\n", "variant", "=", "variant", ",", "\n", "sweep_values", "=", "sweep_values", ",", "\n", "**", "experiment_kwargs", "\n", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.dads.dads.DADSTrainer.add_sample": [[88, 100], ["min"], "methods", ["None"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.dads.dads.DADSTrainer.calculate_intrinsic_rewards": [[101, 123], ["reward_func", "numpy.clip", "NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.dads.dads.DADSTrainer.reward_postprocessing": [[124, 129], ["numpy.clip", "dict"], "methods", ["None"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.dads.dads.DADSTrainer.train_from_paths": [[130, 183], ["numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "len", "gtimer.stamp", "path.get", "numpy.concatenate", "dads.DADSTrainer.control_policy.get_log_probs", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "range", "dads.DADSTrainer.train_discriminator", "dads.DADSTrainer.train_from_buffer", "lifelong_rl.from_numpy", "lifelong_rl.from_numpy", "lifelong_rl.from_numpy", "lifelong_rl.from_numpy", "dads.DADSTrainer.add_sample", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.concatenate.append", "len", "numpy.expand_dims"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.models.gaussian_policy.TanhGaussianPolicy.get_log_probs", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.dads.dads.DADSTrainer.train_discriminator", "home.repos.pwc.inspect_result.kzl_lifelong_rl.mbrl.mbrl.MBRLTrainer.train_from_buffer", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.add_sample"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.dads.dads.DADSTrainer.train_discriminator": [[184, 223], ["dads.DADSTrainer.discriminator.train", "range", "gtimer.stamp", "lifelong_rl.sample_batch", "lifelong_rl.sample_batch", "lifelong_rl.np_to_pytorch_batch", "lifelong_rl.np_to_pytorch_batch", "dads.DADSTrainer.discriminator.get_loss", "dads.DADSTrainer.discrim_optim.zero_grad", "dads.DADSTrainer.backward", "dads.DADSTrainer.discrim_optim.step", "lifelong_rl.get_numpy().mean", "lifelong_rl.get_numpy().mean", "lifelong_rl.get_numpy().mean", "lifelong_rl.get_numpy().mean", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm.train", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.sample_batch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.sample_batch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.np_to_pytorch_batch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.np_to_pytorch_batch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.dynamics_models.probabilistic_ensemble.ProbabilisticEnsemble.get_loss", "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.step", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.dads.dads.DADSTrainer.train_from_buffer": [[224, 309], ["range", "gtimer.stamp", "dads.DADSTrainer.calculate_intrinsic_rewards", "rewards.copy", "dads.DADSTrainer.reward_postprocessing", "reward_diagnostics.update", "numpy.expand_dims", "gtimer.stamp", "numpy.concatenate", "numpy.concatenate", "lifelong_rl.sample_batch", "lifelong_rl.sample_batch", "lifelong_rl.np_to_pytorch_batch", "lifelong_rl.np_to_pytorch_batch", "dads.DADSTrainer.policy_trainer.train_from_torch", "dads.DADSTrainer.eval_statistics.update", "dads.DADSTrainer.eval_statistics.update", "dads.DADSTrainer.eval_statistics.update", "dads.DADSTrainer.eval_statistics.update", "dads.DADSTrainer.eval_statistics.update", "dads.DADSTrainer.eval_statistics.update", "dads.DADSTrainer.eval_statistics.update", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.dads.dads.DADSTrainer.calculate_intrinsic_rewards", "home.repos.pwc.inspect_result.kzl_lifelong_rl.dads.dads.DADSTrainer.reward_postprocessing", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.sample_batch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.sample_batch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.np_to_pytorch_batch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.np_to_pytorch_batch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchTrainer.train_from_torch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.dads.dads.DADSTrainer.get_diagnostics": [[310, 312], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.dads.dads.DADSTrainer.end_epoch": [[313, 316], ["dads.DADSTrainer.policy_trainer.end_epoch"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.end_epoch"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.dads.dads.DADSTrainer.networks": [[317, 320], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.dads.dads.DADSTrainer.get_snapshot": [[321, 331], ["dict", "dads.DADSTrainer.policy_trainer.get_snapshot().items", "dads.DADSTrainer.policy_trainer.get_snapshot"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.get_snapshot"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.dads.skill_dynamics.SkillDynamics.__init__": [[9, 54], ["super().__init__", "range", "torch.nn.Sequential", "in_layers.append", "torch.nn.Sequential", "torch.nn.Linear", "layers.append", "layers.append", "in_layers.append", "torch.nn.BatchNorm1d", "print", "torch.nn.Linear", "torch.nn.Linear", "len", "layers.append", "torch.nn.Linear", "activation_func", "torch.nn.BatchNorm1d", "activation_func"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "observation_size", ",", "\n", "action_size", ",", "\n", "latent_size", ",", "\n", "normalize_observations", "=", "True", ",", "\n", "fc_layer_params", "=", "(", "256", ",", "256", ")", ",", "\n", "fix_variance", "=", "True", ",", "\n", "activation_func", "=", "torch", ".", "nn", ".", "ReLU", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_observation_size", "=", "observation_size", "\n", "self", ".", "_action_size", "=", "action_size", "\n", "self", ".", "_latent_size", "=", "latent_size", "\n", "self", ".", "_normalize_observations", "=", "normalize_observations", "\n", "\n", "self", ".", "_fc_layer_params", "=", "fc_layer_params", "\n", "self", ".", "_fix_variance", "=", "fix_variance", "\n", "\n", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "fc_layer_params", ")", "-", "1", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "layers", ".", "append", "(", "activation_func", "(", ")", ")", "\n", "", "layers", ".", "append", "(", "torch", ".", "nn", ".", "Linear", "(", "fc_layer_params", "[", "i", "]", ",", "fc_layer_params", "[", "i", "+", "1", "]", ")", ")", "\n", "layers", ".", "append", "(", "activation_func", "(", ")", ")", "\n", "", "self", ".", "model", "=", "torch", ".", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "in_layers", "=", "[", "]", "\n", "if", "self", ".", "_normalize_observations", ":", "\n", "            ", "in_layers", ".", "append", "(", "torch", ".", "nn", ".", "BatchNorm1d", "(", "observation_size", "+", "latent_size", ")", ")", "\n", "self", ".", "out_preproc", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "observation_size", ",", "affine", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'not normalization observations'", ")", "\n", "", "in_layers", ".", "append", "(", "torch", ".", "nn", ".", "Linear", "(", "observation_size", "+", "latent_size", ",", "fc_layer_params", "[", "0", "]", ")", ")", "\n", "\n", "self", ".", "in_func", "=", "torch", ".", "nn", ".", "Sequential", "(", "*", "in_layers", ")", "\n", "\n", "self", ".", "out_mean", "=", "torch", ".", "nn", ".", "Linear", "(", "fc_layer_params", "[", "-", "1", "]", ",", "observation_size", ")", "\n", "if", "not", "self", ".", "_fix_variance", ":", "\n", "            ", "self", ".", "out_std", "=", "torch", ".", "nn", ".", "Linear", "(", "fc_layer_params", "[", "-", "1", "]", ",", "observation_size", ")", "\n", "# TODO: implement clipping", "\n", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "_normalize_output", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.dads.skill_dynamics.SkillDynamics.forward": [[55, 63], ["torch.cat", "skill_dynamics.SkillDynamics.in_func", "skill_dynamics.SkillDynamics.model", "skill_dynamics.SkillDynamics.out_mean", "skill_dynamics.SkillDynamics.out_mean", "skill_dynamics.SkillDynamics.out_std"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "obs", ",", "latents", ")", ":", "\n", "        ", "x", "=", "torch", ".", "cat", "(", "[", "obs", ",", "latents", "]", ",", "dim", "=", "-", "1", ")", "\n", "x", "=", "self", ".", "in_func", "(", "x", ")", "\n", "x", "=", "self", ".", "model", "(", "x", ")", "\n", "if", "self", ".", "_fix_variance", ":", "\n", "            ", "return", "self", ".", "out_mean", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "out_mean", "(", "x", ")", ",", "self", ".", "out_std", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.dads.skill_dynamics.SkillDynamics._get_distribution": [[64, 79], ["torch.cat", "skill_dynamics.SkillDynamics.in_func", "skill_dynamics.SkillDynamics.model", "skill_dynamics.SkillDynamics.out_mean", "lifelong_rl.ones", "torch.distributions.independent.Independent", "torch.distributions.Normal"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.ones"], ["", "", "def", "_get_distribution", "(", "self", ",", "obs", ",", "latents", ")", ":", "\n", "        ", "x", "=", "torch", ".", "cat", "(", "[", "obs", ",", "latents", "]", ",", "dim", "=", "-", "1", ")", "\n", "x", "=", "self", ".", "in_func", "(", "x", ")", "\n", "x", "=", "self", ".", "model", "(", "x", ")", "\n", "\n", "mean", "=", "self", ".", "out_mean", "(", "x", ")", "\n", "if", "self", ".", "_fix_variance", ":", "\n", "            ", "std", "=", "ptu", ".", "ones", "(", "*", "mean", ".", "shape", ")", "\n", "dist", "=", "torch", ".", "distributions", ".", "independent", ".", "Independent", "(", "\n", "torch", ".", "distributions", ".", "Normal", "(", "mean", ",", "std", ")", ",", "1", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.dads.skill_dynamics.SkillDynamics.get_log_prob": [[80, 85], ["skill_dynamics.SkillDynamics._get_distribution", "skill_dynamics.SkillDynamics.log_prob", "skill_dynamics.SkillDynamics.out_preproc"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.dads.skill_dynamics.SkillDynamics._get_distribution", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.log_prob"], ["", "def", "get_log_prob", "(", "self", ",", "obs", ",", "latents", ",", "next_obs", ")", ":", "\n", "        ", "if", "self", ".", "_normalize_observations", ":", "\n", "            ", "next_obs", "=", "self", ".", "out_preproc", "(", "next_obs", ")", "\n", "", "dist", "=", "self", ".", "_get_distribution", "(", "obs", ",", "latents", ")", "\n", "return", "dist", ".", "log_prob", "(", "next_obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.dads.skill_dynamics.SkillDynamics.get_loss": [[86, 91], ["skill_dynamics.SkillDynamics.get_log_prob", "skill_dynamics.SkillDynamics.mean"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.dads.skill_dynamics.SkillDynamics.get_log_prob", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean"], ["", "def", "get_loss", "(", "self", ",", "obs", ",", "latents", ",", "next_obs", ",", "weights", "=", "None", ")", ":", "\n", "        ", "log_probs", "=", "self", ".", "get_log_prob", "(", "obs", ",", "latents", ",", "next_obs", ")", "\n", "if", "weights", "is", "not", "None", ":", "\n", "            ", "log_probs", "=", "log_probs", "*", "weights", "\n", "", "return", "-", "log_probs", ".", "mean", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.scripts.viz_hist.get_env_states": [[19, 24], ["open", "torch.load"], "function", ["None"], ["def", "get_env_states", "(", "snapshot_name", ")", ":", "\n", "    ", "with", "open", "(", "snapshot_name", "+", "'.pt'", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "snapshot", "=", "torch", ".", "load", "(", "f", ",", "map_location", "=", "'cpu'", ")", "\n", "env_states", "=", "snapshot", "[", "'replay_buffer/env_states'", "]", "\n", "", "return", "env_states", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.experiment_utils.launch_experiment.launch_experiment": [[21, 180], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "dict", "dict", "print", "print", "print", "print", "print", "print", "print", "print", "doodad.MountLocal", "os.path.join", "doodad.DoodadSweeper", "hasattr", "hasattr", "experiment_utils.sweeper.generate_variants", "datetime.datetime.now().strftime", "print", "print", "experiment_utils.utils.query_yes_no", "multiprocessing.cpu_count", "len", "experiment_utils.utils.query_yes_no", "os.path.join", "launcher.DoodadSweeper.run_sweep_ec2", "doodad.mode.LocalDocker", "doodad.easy_sweep.hyper_sweep.run_sweep_doodad", "datetime.datetime.now", "launcher.DoodadSweeper.run_sweep_serial", "len", "len", "launcher.DoodadSweeper.run_sweep_parallel", "list", "launch_experiment.run_sweep_multi_gpu", "NotImplementedError", "itertools.product", "dict.values"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.experiment_utils.sweeper.generate_variants", "home.repos.pwc.inspect_result.kzl_lifelong_rl.experiment_utils.utils.query_yes_no", "home.repos.pwc.inspect_result.kzl_lifelong_rl.experiment_utils.utils.query_yes_no", "home.repos.pwc.inspect_result.kzl_lifelong_rl.experiment_utils.launch_experiment.run_sweep_multi_gpu"], ["def", "launch_experiment", "(", "\n", "exp_name", ",", "\n", "variant", ",", "\n", "sweep_values", "=", "None", ",", "\n", "num_seeds", "=", "1", ",", "\n", "get_confirmation", "=", "True", ",", "\n", "\n", "# arguments specifying where the code to run the experiment is", "\n", "experiment_class", "=", "None", ",", "\n", "get_config", "=", "None", ",", "\n", "get_algorithm", "=", "None", ",", "\n", "get_offline_algorithm", "=", "None", ",", "\n", "load_config", "=", "None", ",", "\n", "\n", "# misc arguments", "\n", "instance_type", "=", "'c4.2xlarge'", ",", "\n", "use_gpu", "=", "False", ",", "\n", "include_date", "=", "True", ",", "\n", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--mode'", ",", "type", "=", "str", ",", "default", "=", "'local'", ",", "\n", "help", "=", "'Mode for running the experiments - local: runs on local machine, '", "\n", "'ec2: runs on AWS ec2 cluster (requires a proper configuration file)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--gpu_id'", ",", "'-id'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'GPU id for running experiments (if using single GPU)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num_gpu'", ",", "'-g'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "\n", "help", "=", "'Number of GPUs to use for running the experiments'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--exps_per_gpu'", ",", "'-e'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'Number of experiments per GPU simultaneously'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num_cpu'", ",", "'-c'", ",", "type", "=", "int", ",", "default", "=", "multiprocessing", ".", "cpu_count", "(", ")", ",", "\n", "help", "=", "'Number of threads to use for running experiments'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--log_to_wandb'", ",", "'-w'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "'Whether or not to log to Weights and Biases'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", "sys", ".", "argv", "[", "1", ":", "]", ")", "\n", "\n", "\"\"\"\n    Generating experiment from specified functions:\n    \n    If the user specifies experiment_class, it is assumed that if get_algorithm and/or\n        get_offline_algorithm are specified, then they are located there. This is mostly\n        just for backwards compatibility.\n    Otherwise, get_algorithm and get_offline_algorithm should be fed into launch_experiment,\n        which is generally more modular than specifying the class. get_config must be\n        specified, either in experiment_class or in the method call.\n    load_config is called after the initialization of the config dict, so it can modify any\n        values of the dict in place as needed, and must be fed directly.\n    \"\"\"", "\n", "\n", "experiment_config", "=", "dict", "(", ")", "\n", "if", "experiment_class", "is", "not", "None", ":", "\n", "        ", "experiment_config", "[", "'get_config'", "]", "=", "experiment_class", ".", "get_config", "\n", "if", "hasattr", "(", "experiment_class", ",", "'get_algorithm'", ")", ":", "\n", "            ", "experiment_config", "[", "'get_algorithm'", "]", "=", "experiment_class", ".", "get_algorithm", "\n", "", "if", "hasattr", "(", "experiment_class", ",", "'get_offline_algorithm'", ")", ":", "\n", "            ", "experiment_config", "[", "'get_offline_algorithm'", "]", "=", "experiment_class", ".", "get_offline_algorithm", "\n", "\n", "", "", "if", "get_config", "is", "not", "None", ":", "\n", "        ", "experiment_config", "[", "'get_config'", "]", "=", "get_config", "\n", "", "if", "get_algorithm", "is", "not", "None", ":", "\n", "        ", "experiment_config", "[", "'get_algorithm'", "]", "=", "get_algorithm", "\n", "", "if", "get_offline_algorithm", "is", "not", "None", ":", "\n", "        ", "experiment_config", "[", "'get_offline_algorithm'", "]", "=", "get_offline_algorithm", "\n", "\n", "", "if", "load_config", "is", "not", "None", ":", "\n", "        ", "experiment_config", "[", "'load_config'", "]", "=", "load_config", "\n", "\n", "", "if", "sweep_values", "is", "None", ":", "\n", "        ", "variants", "=", "[", "variant", "]", "\n", "", "else", ":", "\n", "        ", "variants", "=", "generate_variants", "(", "variant", ",", "sweep_values", ",", "num_seeds", "=", "num_seeds", ")", "\n", "\n", "", "\"\"\"\n    Setup in the form to feed into the doodad sweeper.\n    \"\"\"", "\n", "\n", "if", "include_date", ":", "\n", "        ", "timestamp", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%m-%d'", ")", "\n", "exp_name", "=", "'%s-%s'", "%", "(", "timestamp", ",", "exp_name", ")", "\n", "\n", "", "gpu_id", "=", "args", ".", "gpu_id", "\n", "log_to_wandb", "=", "args", ".", "log_to_wandb", "\n", "sweep_params", "=", "dict", "(", "\n", "experiment_config", "=", "[", "experiment_config", "]", ",", "\n", "exp_prefix", "=", "[", "exp_name", "]", ",", "\n", "variant", "=", "variants", ",", "\n", "gpu_kwargs", "=", "[", "{", "'mode'", ":", "use_gpu", "if", "args", ".", "mode", "!=", "'ec2'", "else", "False", ",", "# don't use GPU with EC2", "\n", "'gpu_id'", ":", "gpu_id", "}", "]", ",", "\n", "log_to_wandb", "=", "[", "log_to_wandb", "]", ",", "\n", ")", "\n", "\n", "\"\"\"\n    Confirmation\n    \"\"\"", "\n", "\n", "print", "(", "'\\n'", ")", "\n", "print", "(", "'='", "*", "50", ")", "\n", "print", "(", "'Launching experiment: %s'", "%", "exp_name", ")", "\n", "print", "(", "'num variants: %d, num seeds: %d'", "%", "(", "len", "(", "variants", ")", "//", "num_seeds", ",", "num_seeds", ")", ")", "\n", "print", "(", "'About to launch %d total experiments'", "%", "(", "len", "(", "variants", ")", ")", ")", "\n", "print", "(", "'='", "*", "50", ")", "\n", "for", "k", "in", "sweep_values", ":", "\n", "        ", "print", "(", "'%s:'", "%", "k", ",", "sweep_values", "[", "k", "]", ")", "\n", "", "print", "(", "'='", "*", "50", ")", "\n", "print", "(", "'\\n'", ")", "\n", "\n", "if", "get_confirmation", "and", "not", "query_yes_no", "(", "'Confirm?'", ")", ":", "\n", "        ", "return", "\n", "\n", "", "\"\"\"\n    Standard run_sweep\n    \"\"\"", "\n", "\n", "local_mount", "=", "mount", ".", "MountLocal", "(", "local_dir", "=", "config", ".", "BASE_DIR", ",", "pythonpath", "=", "True", ")", "\n", "\n", "docker_mount_point", "=", "os", ".", "path", ".", "join", "(", "config", ".", "DOCKER_MOUNT_DIR", ",", "exp_name", ")", "\n", "\n", "sweeper", "=", "launcher", ".", "DoodadSweeper", "(", "[", "local_mount", "]", ",", "docker_img", "=", "config", ".", "DOCKER_IMAGE", ",", "\n", "docker_output_dir", "=", "docker_mount_point", ",", "\n", "local_output_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "DATA_DIR", ",", "'local'", ",", "exp_name", ")", ")", "\n", "\n", "# it's annoying to have to set up s3 if we don't want to use it", "\n", "# TODO: if you want to use S3, uncomment this", "\n", "sweeper", ".", "mount_out_s3", "=", "None", "# mount.MountS3(s3_path='', mount_point=docker_mount_point, output=True)", "\n", "\n", "if", "args", ".", "mode", "==", "'ec2'", ":", "\n", "        ", "print", "(", "\"\\n\"", "+", "\"**********\"", "*", "10", "+", "\"\\nexp_prefix: {}\\nvariants: {}\"", ".", "format", "(", "exp_name", ",", "len", "(", "\n", "list", "(", "itertools", ".", "product", "(", "*", "[", "value", "for", "value", "in", "sweep_params", ".", "values", "(", ")", "]", ")", ")", ")", ")", ")", "\n", "\n", "if", "query_yes_no", "(", "\"Continue?\"", ")", ":", "\n", "            ", "sweeper", ".", "run_sweep_ec2", "(", "run_experiment", ",", "sweep_params", ",", "bucket_name", "=", "config", ".", "S3_BUCKET_NAME", ",", "\n", "instance_type", "=", "instance_type", ",", "\n", "region", "=", "'us-east-2'", ",", "s3_log_name", "=", "exp_name", ",", "add_date_to_logname", "=", "False", ")", "\n", "\n", "", "", "elif", "args", ".", "mode", "==", "'local_docker'", ":", "\n", "        ", "mode_docker", "=", "dd", ".", "mode", ".", "LocalDocker", "(", "\n", "image", "=", "sweeper", ".", "image", ",", "\n", ")", "\n", "run_sweep_doodad", "(", "run_experiment", ",", "sweep_params", ",", "run_mode", "=", "mode_docker", ",", "\n", "mounts", "=", "sweeper", ".", "mounts", ")", "\n", "\n", "", "elif", "args", ".", "mode", "==", "'local'", ":", "\n", "        ", "sweeper", ".", "run_sweep_serial", "(", "run_experiment", ",", "sweep_params", ")", "\n", "\n", "", "elif", "args", ".", "mode", "==", "'local_par'", ":", "\n", "        ", "sweeper", ".", "run_sweep_parallel", "(", "run_experiment", ",", "sweep_params", ")", "\n", "\n", "", "elif", "args", ".", "mode", "==", "'multi_gpu'", ":", "\n", "        ", "run_sweep_multi_gpu", "(", "run_experiment", ",", "sweep_params", ",", "num_gpu", "=", "args", ".", "num_gpu", ",", "exps_per_gpu", "=", "args", ".", "exps_per_gpu", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'experiment run mode not recognized'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.experiment_utils.launch_experiment.run_sweep_multi_gpu": [[182, 215], ["multiprocessing.cpu_count", "doodad.easy_sweep.hyper_sweep.Sweeper", "random.shuffle", "exp_args.append", "range", "range", "time.sleep", "multiprocessing.Process", "os.system", "multiprocessing.Process.start", "processes[].is_alive", "os.getpid", "experiment_configs.base_experiment.experiment"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.experiment_configs.base_experiment.experiment"], ["", "", "def", "run_sweep_multi_gpu", "(", "\n", "run_method", ",", "\n", "params", ",", "\n", "repeat", "=", "1", ",", "\n", "num_cpu", "=", "multiprocessing", ".", "cpu_count", "(", ")", ",", "\n", "num_gpu", "=", "2", ",", "\n", "exps_per_gpu", "=", "2", "\n", ")", ":", "\n", "    ", "sweeper", "=", "Sweeper", "(", "params", ",", "repeat", ",", "include_name", "=", "False", ")", "\n", "gpu_frac", "=", "0.9", "/", "exps_per_gpu", "\n", "num_runs", "=", "num_gpu", "*", "exps_per_gpu", "\n", "cpu_per_gpu", "=", "num_cpu", "/", "num_gpu", "\n", "exp_args", "=", "[", "]", "\n", "for", "config", "in", "sweeper", ":", "\n", "        ", "exp_args", ".", "append", "(", "(", "config", ",", "run_method", ")", ")", "\n", "", "random", ".", "shuffle", "(", "exp_args", ")", "\n", "processes", "=", "[", "None", "]", "*", "num_runs", "\n", "run_info", "=", "[", "(", "i", ",", "(", "i", "*", "cpu_per_gpu", ",", "(", "i", "+", "1", ")", "*", "cpu_per_gpu", ")", ")", "for", "i", "in", "range", "(", "num_gpu", ")", "]", "*", "exps_per_gpu", "\n", "for", "kwarg", ",", "run", "in", "exp_args", ":", "\n", "        ", "launched", "=", "False", "\n", "while", "not", "launched", ":", "\n", "            ", "for", "idx", "in", "range", "(", "num_runs", ")", ":", "\n", "                ", "if", "processes", "[", "idx", "]", "is", "None", "or", "not", "processes", "[", "idx", "]", ".", "is_alive", "(", ")", ":", "\n", "# kwarg['gpu_frac'] = gpu_frac", "\n", "                    ", "p", "=", "multiprocessing", ".", "Process", "(", "target", "=", "run", ",", "kwargs", "=", "kwarg", ")", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "\"%d\"", "%", "run_info", "[", "idx", "]", "[", "0", "]", "\n", "os", ".", "system", "(", "\"taskset -p -c %d-%d %d\"", "%", "(", "run_info", "[", "idx", "]", "[", "1", "]", "+", "(", "os", ".", "getpid", "(", ")", ",", ")", ")", ")", "\n", "p", ".", "start", "(", ")", "\n", "processes", "[", "idx", "]", "=", "p", "\n", "launched", "=", "True", "\n", "break", "\n", "", "", "if", "not", "launched", ":", "\n", "                ", "time", ".", "sleep", "(", "10", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.experiment_utils.teacher_data.add_transitions": [[4, 20], ["int", "min", "range", "open", "pickle.load", "len", "replay_buffer.add_sample"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.add_sample"], ["def", "add_transitions", "(", "replay_buffer", ",", "data_file", ",", "obs_dim", ",", "action_dim", ",", "max_transitions", "=", "int", "(", "1e8", ")", ")", ":", "\n", "    ", "with", "open", "(", "'agent_data/%s.pkl'", "%", "data_file", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "transitions", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "# method signature: add_sample(obs, act, r, d, next_obs, info)", "\n", "", "n_transitions", "=", "min", "(", "len", "(", "transitions", ")", ",", "max_transitions", ")", "\n", "\n", "# in form (s, a, r, d, s')", "\n", "for", "t", "in", "range", "(", "n_transitions", ")", ":", "\n", "        ", "replay_buffer", ".", "add_sample", "(", "\n", "transitions", "[", "t", ",", ":", "obs_dim", "]", ",", "\n", "transitions", "[", "t", ",", "obs_dim", ":", "obs_dim", "+", "action_dim", "]", ",", "\n", "transitions", "[", "t", ",", "obs_dim", "+", "action_dim", ":", "obs_dim", "+", "action_dim", "+", "1", "]", ",", "\n", "transitions", "[", "t", ",", "obs_dim", "+", "action_dim", "+", "1", ":", "obs_dim", "+", "action_dim", "+", "2", "]", ",", "\n", "transitions", "[", "t", ",", "-", "obs_dim", ":", "]", ",", "\n", "env_info", "=", "{", "}", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.experiment_utils.sweeper.set_dict_key": [[6, 11], ["len", "sweeper.set_dict_key"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.experiment_utils.sweeper.set_dict_key"], ["def", "set_dict_key", "(", "dict", ",", "path", ",", "value", ")", ":", "\n", "    ", "if", "len", "(", "path", ")", "==", "1", ":", "\n", "        ", "dict", "[", "path", "[", "0", "]", "]", "=", "value", "\n", "", "else", ":", "\n", "        ", "set_dict_key", "(", "dict", "[", "path", "[", "0", "]", "]", ",", "path", "[", "1", ":", "]", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.experiment_utils.sweeper.generate_variants": [[13, 24], ["range", "itertools.product", "copy.deepcopy", "enumerate", "random.randint", "variants.append", "sweep_values.keys", "loc.split", "sweeper.set_dict_key", "int", "sweep_values.values"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.experiment_utils.sweeper.set_dict_key"], ["", "", "def", "generate_variants", "(", "base_variant", ",", "sweep_values", ",", "num_seeds", "=", "1", ")", ":", "\n", "    ", "variants", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_seeds", ")", ":", "\n", "        ", "for", "params", "in", "itertools", ".", "product", "(", "*", "[", "s", "for", "s", "in", "sweep_values", ".", "values", "(", ")", "]", ")", ":", "\n", "            ", "variant", "=", "copy", ".", "deepcopy", "(", "base_variant", ")", "\n", "for", "i", ",", "loc", "in", "enumerate", "(", "sweep_values", ".", "keys", "(", ")", ")", ":", "\n", "                ", "path", "=", "loc", ".", "split", "(", "'/'", ")", "\n", "set_dict_key", "(", "variant", ",", "path", ",", "params", "[", "i", "]", ")", "\n", "", "variant", "[", "'seed'", "]", "=", "random", ".", "randint", "(", "0", ",", "int", "(", "1e8", ")", ")", "\n", "variants", ".", "append", "(", "variant", ")", "\n", "", "", "return", "variants", "\n", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.experiment_utils.utils.query_yes_no": [[7, 40], ["sys.stdout.write", "input().lower", "ValueError", "input", "sys.stdout.write"], "function", ["None"], ["def", "query_yes_no", "(", "question", ",", "default", "=", "\"no\"", ",", "allow_skip", "=", "False", ")", ":", "\n", "    ", "\"\"\"Ask a yes/no question via raw_input() and return their answer.\n\n    \"question\" is a string that is presented to the user.\n    \"default\" is the presumed answer if the user just hits <Enter>.\n        It must be \"yes\" (the default), \"no\" or None (meaning\n        an answer is required of the user).\n\n    The \"answer\" return value is True for \"yes\" or False for \"no\".\n    \"\"\"", "\n", "valid", "=", "{", "\"yes\"", ":", "True", ",", "\"y\"", ":", "True", ",", "\"ye\"", ":", "True", ",", "\n", "\"no\"", ":", "False", ",", "\"n\"", ":", "False", "}", "\n", "if", "allow_skip", ":", "\n", "        ", "valid", "[", "\"skip\"", "]", "=", "\"skip\"", "\n", "", "if", "default", "is", "None", ":", "\n", "        ", "prompt", "=", "\" [y/n] \"", "\n", "", "elif", "default", "==", "\"yes\"", ":", "\n", "        ", "prompt", "=", "\" [Y/n] \"", "\n", "", "elif", "default", "==", "\"no\"", ":", "\n", "        ", "prompt", "=", "\" [y/N] \"", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"invalid default answer: '%s'\"", "%", "default", ")", "\n", "", "if", "allow_skip", ":", "\n", "        ", "prompt", "+=", "\" or skip\"", "\n", "", "while", "True", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "question", "+", "prompt", ")", "\n", "choice", "=", "input", "(", ")", ".", "lower", "(", ")", "\n", "if", "default", "is", "not", "None", "and", "choice", "==", "''", ":", "\n", "            ", "return", "valid", "[", "default", "]", "\n", "", "elif", "choice", "in", "valid", ":", "\n", "            ", "return", "valid", "[", "choice", "]", "\n", "", "else", ":", "\n", "            ", "sys", ".", "stdout", ".", "write", "(", "\"Please respond with 'yes' or 'no' \"", "\n", "\"(or 'y' or 'n').\\n\"", ")", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.experiment_utils.utils.load_exps_data": [[43, 65], ["os.path.abspath", "glob.iglob", "utils.load_json", "os.path.join", "exps_data.append", "os.walk", "os.path.join", "glob.iglob", "pkl_paths.sort", "dict", "print", "os.path.join", "pkl_paths.append", "int", "x.split"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.experiment_utils.utils.load_json"], ["", "", "", "def", "load_exps_data", "(", "exp_path", ",", "gap", "=", "1", ",", "max", "=", "None", ")", ":", "\n", "    ", "exp_folder_paths", "=", "[", "os", ".", "path", ".", "abspath", "(", "x", ")", "for", "x", "in", "glob", ".", "iglob", "(", "exp_path", ")", "]", "\n", "exps", "=", "[", "]", "\n", "for", "exp_folder_path", "in", "exp_folder_paths", ":", "\n", "        ", "exps", "+=", "[", "x", "[", "0", "]", "for", "x", "in", "os", ".", "walk", "(", "exp_folder_path", ")", "]", "\n", "", "exps_data", "=", "[", "]", "\n", "for", "exp", "in", "exps", ":", "\n", "        ", "try", ":", "\n", "            ", "exp_path", "=", "exp", "\n", "params_json", "=", "load_json", "(", "os", ".", "path", ".", "join", "(", "exp_path", ",", "\"params.json\"", ")", ")", "\n", "progress_csv_path", "=", "os", ".", "path", ".", "join", "(", "exp_path", ",", "\"progress.csv\"", ")", "\n", "pkl_paths", "=", "[", "]", "\n", "if", "gap", ">", "0", ":", "\n", "                ", "for", "pkl_path", "in", "glob", ".", "iglob", "(", "os", ".", "path", ".", "join", "(", "exp_path", ",", "'*.pkl'", ")", ")", ":", "\n", "                    ", "pkl_paths", ".", "append", "(", "pkl_path", ")", "\n", "", "pkl_paths", ".", "sort", "(", "key", "=", "lambda", "x", ":", "int", "(", "x", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "[", ":", "-", "4", "]", ")", ")", "\n", "pkl_paths", "=", "pkl_paths", "[", ":", "max", ":", "gap", "]", "\n", "", "exps_data", ".", "append", "(", "dict", "(", "csv", "=", "progress_csv_path", ",", "json", "=", "params_json", ",", "\n", "pkl", "=", "pkl_paths", ",", "exp_name", "=", "exp_path", ")", ")", "\n", "", "except", "IOError", "as", "e", ":", "\n", "            ", "print", "(", "e", ")", "\n", "", "", "return", "exps_data", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.experiment_utils.utils.load_json": [[67, 75], ["open", "json.loads", "f.read", "params_json_path.split"], "function", ["None"], ["", "def", "load_json", "(", "params_json_path", ")", ":", "\n", "    ", "with", "open", "(", "params_json_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "loads", "(", "f", ".", "read", "(", ")", ")", "\n", "if", "\"args_data\"", "in", "data", ":", "\n", "            ", "del", "data", "[", "\"args_data\"", "]", "\n", "", "if", "\"exp_name\"", "not", "in", "data", ":", "\n", "            ", "data", "[", "\"exp_name\"", "]", "=", "params_json_path", ".", "split", "(", "\"/\"", ")", "[", "-", "2", "]", "\n", "", "", "return", "data", "\n", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.models.gaussian_policy.TanhGaussianPolicy.__init__": [[36, 73], ["lifelong_rl.models.networks.Mlp.__init__", "torch.nn.Linear", "gaussian_policy.TanhGaussianPolicy.last_fc_log_std.weight.data.uniform_", "gaussian_policy.TanhGaussianPolicy.last_fc_log_std.bias.data.uniform_", "torch.nn.Parameter", "filter", "len", "lifelong_rl.ones", "numpy.log", "gaussian_policy.TanhGaussianPolicy.parameters", "list", "p.cpu().data.numpy", "p.cpu().data.numpy", "p.cpu", "p.cpu"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.ones", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.log"], ["def", "__init__", "(", "\n", "self", ",", "\n", "hidden_sizes", ",", "\n", "obs_dim", ",", "\n", "action_dim", ",", "\n", "std", "=", "None", ",", "\n", "init_w", "=", "1e-3", ",", "\n", "restrict_obs_dim", "=", "0", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "hidden_sizes", ",", "\n", "input_size", "=", "obs_dim", ",", "\n", "output_size", "=", "action_dim", ",", "\n", "init_w", "=", "init_w", ",", "\n", "**", "kwargs", "\n", ")", "\n", "self", ".", "log_std", "=", "None", "\n", "self", ".", "std", "=", "std", "\n", "self", ".", "restrict_obs_dim", "=", "restrict_obs_dim", "\n", "\n", "if", "std", "is", "None", ":", "\n", "            ", "last_hidden_size", "=", "obs_dim", "\n", "if", "len", "(", "hidden_sizes", ")", ">", "0", ":", "\n", "                ", "last_hidden_size", "=", "hidden_sizes", "[", "-", "1", "]", "\n", "", "self", ".", "last_fc_log_std", "=", "nn", ".", "Linear", "(", "last_hidden_size", ",", "action_dim", ")", "\n", "self", ".", "last_fc_log_std", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "init_w", ",", "init_w", ")", "\n", "self", ".", "last_fc_log_std", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "init_w", ",", "init_w", ")", "\n", "", "else", ":", "\n", "            ", "init_logstd", "=", "ptu", ".", "ones", "(", "1", ",", "action_dim", ")", "*", "np", ".", "log", "(", "std", ")", "\n", "self", ".", "log_std", "=", "torch", ".", "nn", ".", "Parameter", "(", "init_logstd", ",", "requires_grad", "=", "True", ")", "\n", "\n", "# for NPG", "\n", "model_parameters", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "self", ".", "parameters", "(", ")", ")", "\n", "self", ".", "trainable_params", "=", "list", "(", "model_parameters", ")", "+", "[", "self", ".", "log_std", "]", "\n", "self", ".", "param_shapes", "=", "[", "p", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "shape", "for", "p", "in", "self", ".", "trainable_params", "]", "\n", "self", ".", "param_sizes", "=", "[", "p", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "size", "for", "p", "in", "self", ".", "trainable_params", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.models.gaussian_policy.TanhGaussianPolicy.get_action": [[74, 77], ["gaussian_policy.TanhGaussianPolicy.get_actions"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.models.gaussian_policy.TanhGaussianPolicy.get_actions"], ["", "", "def", "get_action", "(", "self", ",", "obs_np", ",", "deterministic", "=", "False", ")", ":", "\n", "        ", "actions", "=", "self", ".", "get_actions", "(", "obs_np", "[", "None", "]", ",", "deterministic", "=", "deterministic", ")", "\n", "return", "actions", "[", "0", ",", ":", "]", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.models.gaussian_policy.TanhGaussianPolicy.get_actions": [[78, 80], ["lifelong_rl.torch.pytorch_util.eval_np"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.eval_np"], ["", "def", "get_actions", "(", "self", ",", "obs_np", ",", "deterministic", "=", "False", ")", ":", "\n", "        ", "return", "eval_np", "(", "self", ",", "obs_np", ",", "deterministic", "=", "deterministic", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.models.gaussian_policy.TanhGaussianPolicy.forward": [[81, 142], ["enumerate", "gaussian_policy.TanhGaussianPolicy.last_fc", "len", "gaussian_policy.TanhGaussianPolicy.hidden_activation", "gaussian_policy.TanhGaussianPolicy.last_fc_log_std", "torch.clamp", "torch.exp", "torch.clamp", "torch.clamp.exp", "torch.tanh", "lifelong_rl.torch.distributions.TanhNormal", "fc", "lifelong_rl.ones", "lifelong_rl.torch.distributions.TanhNormal.log_prob", "log_prob.sum.sum.sum", "lifelong_rl.torch.distributions.TanhNormal.rsample", "lifelong_rl.torch.distributions.TanhNormal.sample", "lifelong_rl.torch.distributions.TanhNormal.rsample", "lifelong_rl.torch.distributions.TanhNormal.sample"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.ones", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.log_prob", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.rsample", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.sample", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.rsample", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.sample"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "obs", ",", "\n", "reparameterize", "=", "True", ",", "\n", "deterministic", "=", "False", ",", "\n", "return_log_prob", "=", "False", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        :param obs: Observation\n        :param deterministic: If True, do not sample\n        :param return_log_prob: If True, return a sample and its log probability\n        \"\"\"", "\n", "if", "len", "(", "obs", ".", "shape", ")", "==", "1", ":", "\n", "            ", "obs", "=", "obs", "[", "self", ".", "restrict_obs_dim", ":", "]", "\n", "", "else", ":", "\n", "            ", "obs", "=", "obs", "[", ":", ",", "self", ".", "restrict_obs_dim", ":", "]", "\n", "\n", "", "h", "=", "obs", "\n", "for", "i", ",", "fc", "in", "enumerate", "(", "self", ".", "fcs", ")", ":", "\n", "            ", "h", "=", "self", ".", "hidden_activation", "(", "fc", "(", "h", ")", ")", "\n", "", "mean", "=", "self", ".", "last_fc", "(", "h", ")", "\n", "if", "self", ".", "std", "is", "None", ":", "\n", "            ", "log_std", "=", "self", ".", "last_fc_log_std", "(", "h", ")", "\n", "log_std", "=", "torch", ".", "clamp", "(", "log_std", ",", "LOG_SIG_MIN", ",", "LOG_SIG_MAX", ")", "\n", "std", "=", "torch", ".", "exp", "(", "log_std", ")", "\n", "", "else", ":", "\n", "            ", "log_std", "=", "self", ".", "log_std", "*", "ptu", ".", "ones", "(", "*", "mean", ".", "shape", ")", "\n", "log_std", "=", "torch", ".", "clamp", "(", "log_std", ",", "LOG_SIG_MIN", ",", "LOG_SIG_MAX", ")", "\n", "std", "=", "log_std", ".", "exp", "(", ")", "\n", "\n", "", "log_prob", "=", "None", "\n", "entropy", "=", "None", "\n", "mean_action_log_prob", "=", "None", "\n", "pre_tanh_value", "=", "None", "\n", "if", "deterministic", ":", "\n", "            ", "action", "=", "torch", ".", "tanh", "(", "mean", ")", "\n", "", "else", ":", "\n", "            ", "tanh_normal", "=", "TanhNormal", "(", "mean", ",", "std", ")", "\n", "if", "return_log_prob", ":", "\n", "                ", "if", "reparameterize", "is", "True", ":", "\n", "                    ", "action", ",", "pre_tanh_value", "=", "tanh_normal", ".", "rsample", "(", "\n", "return_pretanh_value", "=", "True", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "action", ",", "pre_tanh_value", "=", "tanh_normal", ".", "sample", "(", "\n", "return_pretanh_value", "=", "True", "\n", ")", "\n", "", "log_prob", "=", "tanh_normal", ".", "log_prob", "(", "\n", "action", ",", "\n", "pre_tanh_value", "=", "pre_tanh_value", "\n", ")", "\n", "log_prob", "=", "log_prob", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "if", "reparameterize", "is", "True", ":", "\n", "                    ", "action", "=", "tanh_normal", ".", "rsample", "(", ")", "\n", "", "else", ":", "\n", "                    ", "action", "=", "tanh_normal", ".", "sample", "(", ")", "\n", "\n", "", "", "", "return", "(", "\n", "action", ",", "mean", ",", "log_std", ",", "log_prob", ",", "entropy", ",", "std", ",", "\n", "mean_action_log_prob", ",", "pre_tanh_value", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.models.gaussian_policy.TanhGaussianPolicy.get_log_probs": [[144, 148], ["gaussian_policy.TanhGaussianPolicy.forward", "lifelong_rl.torch.distributions.TanhNormal", "lifelong_rl.torch.distributions.TanhNormal.log_prob().sum", "log_std.exp", "lifelong_rl.torch.distributions.TanhNormal.log_prob"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.dynamics_models.probabilistic_ensemble.ProbabilisticEnsemble.forward", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.log_prob"], ["", "def", "get_log_probs", "(", "self", ",", "obs", ",", "actions", ")", ":", "\n", "        ", "_", ",", "mean", ",", "log_std", ",", "*", "_", "=", "self", ".", "forward", "(", "obs", ",", "deterministic", "=", "True", ")", "\n", "tanh_normal", "=", "TanhNormal", "(", "mean", ",", "log_std", ".", "exp", "(", ")", ")", "\n", "return", "tanh_normal", ".", "log_prob", "(", "actions", ")", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.models.gaussian_policy.TanhGaussianPolicy.get_param_values": [[149, 152], ["numpy.concatenate", "numpy.concatenate.copy", "p.contiguous().view().cpu().data.numpy", "p.contiguous().view().cpu", "p.contiguous().view", "p.contiguous"], "methods", ["None"], ["", "def", "get_param_values", "(", "self", ")", ":", "\n", "        ", "params", "=", "np", ".", "concatenate", "(", "[", "p", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "for", "p", "in", "self", ".", "trainable_params", "]", ")", "\n", "return", "params", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.models.gaussian_policy.TanhGaussianPolicy.set_param_values": [[153, 161], ["enumerate", "torch.clamp", "vals.reshape.reshape.reshape", "lifelong_rl.from_numpy().float", "lifelong_rl.from_numpy"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy"], ["", "def", "set_param_values", "(", "self", ",", "new_params", ")", ":", "\n", "        ", "current_idx", "=", "0", "\n", "for", "idx", ",", "param", "in", "enumerate", "(", "self", ".", "trainable_params", ")", ":", "\n", "            ", "vals", "=", "new_params", "[", "current_idx", ":", "current_idx", "+", "self", ".", "param_sizes", "[", "idx", "]", "]", "\n", "vals", "=", "vals", ".", "reshape", "(", "self", ".", "param_shapes", "[", "idx", "]", ")", "\n", "param", ".", "data", "=", "ptu", ".", "from_numpy", "(", "vals", ")", ".", "float", "(", ")", "\n", "current_idx", "+=", "self", ".", "param_sizes", "[", "idx", "]", "\n", "", "self", ".", "trainable_params", "[", "-", "1", "]", ".", "data", "=", "torch", ".", "clamp", "(", "self", ".", "trainable_params", "[", "-", "1", "]", ",", "LOG_SIG_MIN", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.models.networks.Mlp.__init__": [[15, 74], ["torch.nn.Module.__init__", "torch.nn.Parameter().float", "torch.nn.Parameter().float", "enumerate", "torch.nn.Linear", "torch.nn.Linear", "hidden_init", "torch.nn.Linear.bias.data.fill_", "networks.Mlp.__setattr__", "networks.Mlp.fcs.append", "networks.Mlp.last_fc.weight.data.uniform_", "networks.Mlp.last_fc.bias.data.uniform_", "lifelong_rl.torch.pytorch_util.orthogonal_init", "networks.Mlp.last_fc.bias.data.fill_", "torch.nn.Parameter", "torch.nn.Parameter", "lifelong_rl.torch.modules.LayerNorm", "networks.Mlp.__setattr__", "networks.Mlp.layer_norms.append", "torch.nn.BatchNorm1d", "networks.Mlp.__setattr__", "networks.Mlp.batch_norms.append", "lifelong_rl.torch.pytorch_util.zeros", "lifelong_rl.torch.pytorch_util.ones"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.orthogonal_init", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.ones"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "hidden_sizes", ",", "\n", "output_size", ",", "\n", "input_size", ",", "\n", "init_w", "=", "3e-3", ",", "\n", "hidden_activation", "=", "F", ".", "relu", ",", "\n", "output_activation", "=", "identity", ",", "\n", "hidden_init", "=", "ptu", ".", "fanin_init", ",", "\n", "w_scale", "=", "1", ",", "\n", "b_init_value", "=", "0.1", ",", "\n", "layer_norm", "=", "False", ",", "\n", "batch_norm", "=", "False", ",", "\n", "final_init_scale", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "hidden_activation", "=", "hidden_activation", "\n", "self", ".", "output_activation", "=", "output_activation", "\n", "self", ".", "layer_norm", "=", "layer_norm", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "\n", "self", ".", "fcs", "=", "[", "]", "\n", "self", ".", "layer_norms", "=", "[", "]", "\n", "self", ".", "batch_norms", "=", "[", "]", "\n", "\n", "# data normalization", "\n", "self", ".", "input_mu", "=", "nn", ".", "Parameter", "(", "ptu", ".", "zeros", "(", "input_size", ")", ",", "requires_grad", "=", "False", ")", ".", "float", "(", ")", "\n", "self", ".", "input_std", "=", "nn", ".", "Parameter", "(", "ptu", ".", "ones", "(", "input_size", ")", ",", "requires_grad", "=", "False", ")", ".", "float", "(", ")", "\n", "\n", "in_size", "=", "input_size", "\n", "for", "i", ",", "next_size", "in", "enumerate", "(", "hidden_sizes", ")", ":", "\n", "            ", "fc", "=", "nn", ".", "Linear", "(", "in_size", ",", "next_size", ")", "\n", "hidden_init", "(", "fc", ".", "weight", ",", "w_scale", ")", "\n", "fc", ".", "bias", ".", "data", ".", "fill_", "(", "b_init_value", ")", "\n", "self", ".", "__setattr__", "(", "\"fc{}\"", ".", "format", "(", "i", ")", ",", "fc", ")", "\n", "self", ".", "fcs", ".", "append", "(", "fc", ")", "\n", "\n", "if", "self", ".", "layer_norm", ":", "\n", "                ", "ln", "=", "LayerNorm", "(", "next_size", ")", "\n", "self", ".", "__setattr__", "(", "\"layer_norm{}\"", ".", "format", "(", "i", ")", ",", "ln", ")", "\n", "self", ".", "layer_norms", ".", "append", "(", "ln", ")", "\n", "\n", "", "if", "self", ".", "batch_norm", ":", "\n", "                ", "bn", "=", "nn", ".", "BatchNorm1d", "(", "next_size", ")", "\n", "self", ".", "__setattr__", "(", "'batch_norm%d'", "%", "i", ",", "bn", ")", "\n", "self", ".", "batch_norms", ".", "append", "(", "bn", ")", "\n", "\n", "", "in_size", "=", "next_size", "\n", "\n", "", "self", ".", "last_fc", "=", "nn", ".", "Linear", "(", "in_size", ",", "output_size", ")", "\n", "if", "final_init_scale", "is", "None", ":", "\n", "            ", "self", ".", "last_fc", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "init_w", ",", "init_w", ")", "\n", "self", ".", "last_fc", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "init_w", ",", "init_w", ")", "\n", "", "else", ":", "\n", "            ", "ptu", ".", "orthogonal_init", "(", "self", ".", "last_fc", ".", "weight", ",", "final_init_scale", ")", "\n", "self", ".", "last_fc", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.models.networks.Mlp.forward": [[75, 90], ["enumerate", "networks.Mlp.last_fc", "networks.Mlp.output_activation", "fc", "networks.Mlp.hidden_activation", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "return_preactivations", "=", "False", ")", ":", "\n", "        ", "h", "=", "(", "input", "-", "self", ".", "input_mu", ")", "/", "(", "self", ".", "input_std", "+", "1e-6", ")", "\n", "for", "i", ",", "fc", "in", "enumerate", "(", "self", ".", "fcs", ")", ":", "\n", "            ", "h", "=", "fc", "(", "h", ")", "\n", "if", "self", ".", "layer_norm", "and", "i", "<", "len", "(", "self", ".", "fcs", ")", "-", "1", ":", "\n", "                ", "h", "=", "self", ".", "layer_norms", "[", "i", "]", "(", "h", ")", "\n", "", "if", "self", ".", "batch_norm", ":", "\n", "                ", "h", "=", "self", ".", "batch_norms", "[", "i", "]", "(", "h", ")", "\n", "", "h", "=", "self", ".", "hidden_activation", "(", "h", ")", "\n", "", "preactivation", "=", "self", ".", "last_fc", "(", "h", ")", "\n", "output", "=", "self", ".", "output_activation", "(", "preactivation", ")", "\n", "if", "return_preactivations", ":", "\n", "            ", "return", "output", ",", "preactivation", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.models.networks.Mlp.fit_input_stats": [[91, 101], ["numpy.mean", "numpy.std", "lifelong_rl.torch.pytorch_util.from_numpy", "lifelong_rl.torch.pytorch_util.from_numpy", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.ones"], ["", "", "def", "fit_input_stats", "(", "self", ",", "data", ",", "mask", "=", "None", ")", ":", "\n", "        ", "mean", "=", "np", ".", "mean", "(", "data", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "std", "=", "np", ".", "std", "(", "data", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "std", "[", "std", "!=", "std", "]", "=", "0", "\n", "std", "[", "std", "<", "1e-12", "]", "=", "1.0", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "mean", "*=", "mask", "\n", "std", "=", "mask", "*", "std", "+", "(", "1", "-", "mask", ")", "*", "np", ".", "ones", "(", "self", ".", "input_size", ")", "\n", "", "self", ".", "input_mu", ".", "data", "=", "ptu", ".", "from_numpy", "(", "mean", ")", "\n", "self", ".", "input_std", ".", "data", "=", "ptu", ".", "from_numpy", "(", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.models.networks.FlattenMlp.forward": [[108, 111], ["torch.cat", "networks.Mlp.forward"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.dynamics_models.probabilistic_ensemble.ProbabilisticEnsemble.forward"], ["def", "forward", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "flat_inputs", "=", "torch", ".", "cat", "(", "inputs", ",", "dim", "=", "1", ")", "\n", "return", "super", "(", ")", ".", "forward", "(", "flat_inputs", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.models.networks.Ensemble.__init__": [[115, 124], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "len", "networks.Ensemble.models.append"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "models", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "models", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "m", "in", "models", ":", "\n", "            ", "self", ".", "models", ".", "append", "(", "m", ")", "\n", "\n", "", "self", ".", "ensemble_size", "=", "len", "(", "models", ")", "\n", "self", ".", "input_size", "=", "self", ".", "models", "[", "0", "]", ".", "input_size", "\n", "self", ".", "output_size", "=", "self", ".", "models", "[", "0", "]", ".", "output_size", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.models.networks.Ensemble.forward": [[125, 130], ["lifelong_rl.torch.pytorch_util.zeros", "range", "len", "networks.Ensemble.models[].forward", "len"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros", "home.repos.pwc.inspect_result.kzl_lifelong_rl.dynamics_models.probabilistic_ensemble.ProbabilisticEnsemble.forward"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "preds", "=", "ptu", ".", "zeros", "(", "(", "len", "(", "self", ".", "models", ")", ",", "*", "input", ".", "shape", "[", ":", "-", "1", "]", ",", "self", ".", "output_size", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "models", ")", ")", ":", "\n", "            ", "preds", "[", "i", "]", "=", "self", ".", "models", "[", "i", "]", ".", "forward", "(", "input", ")", "\n", "", "return", "preds", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.models.networks.Ensemble.sample": [[131, 140], ["networks.Ensemble.forward", "torch.randint", "inds.repeat.repeat.unsqueeze().to", "inds.repeat.repeat.repeat", "range", "len", "len", "inds.repeat.repeat.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.dynamics_models.probabilistic_ensemble.ProbabilisticEnsemble.forward", "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchOfflineMBRLAlgorithm.to"], ["", "def", "sample", "(", "self", ",", "input", ")", ":", "\n", "        ", "preds", "=", "self", ".", "forward", "(", "input", ")", "\n", "inds", "=", "torch", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "models", ")", ",", "input", ".", "shape", "[", ":", "-", "1", "]", ")", "\n", "inds", "=", "inds", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ".", "to", "(", "device", "=", "ptu", ".", "device", ")", "\n", "inds", "=", "inds", ".", "repeat", "(", "1", ",", "preds", ".", "shape", "[", "2", "]", ")", "\n", "samples", "=", "(", "inds", "==", "0", ")", ".", "float", "(", ")", "*", "preds", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "self", ".", "models", ")", ")", ":", "\n", "            ", "samples", "+=", "(", "inds", "==", "i", ")", ".", "float", "(", ")", "*", "preds", "[", "i", "]", "\n", "", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.models.networks.Ensemble.fit_input_stats": [[141, 144], ["m.fit_input_stats"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.models.networks.ParallelizedEnsemble.fit_input_stats"], ["", "def", "fit_input_stats", "(", "self", ",", "data", ",", "mask", "=", "None", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "models", ":", "\n", "            ", "m", ".", "fit_input_stats", "(", "data", ",", "mask", "=", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.models.networks.ParallelizedLayer.__init__": [[148, 167], ["torch.nn.Module.__init__", "lifelong_rl.torch.pytorch_util.randn", "torch.nn.Parameter", "lifelong_rl.torch.pytorch_util.zeros().float", "torch.nn.Parameter", "torch.fmod", "lifelong_rl.torch.pytorch_util.zeros"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.randn", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "ensemble_size", ",", "\n", "input_dim", ",", "\n", "output_dim", ",", "\n", "w_std_value", "=", "1.0", ",", "\n", "b_init_value", "=", "0.0", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# approximation to truncated normal of 2 stds", "\n", "w_init", "=", "ptu", ".", "randn", "(", "(", "ensemble_size", ",", "input_dim", ",", "output_dim", ")", ")", "\n", "w_init", "=", "torch", ".", "fmod", "(", "w_init", ",", "2", ")", "*", "w_std_value", "\n", "self", ".", "W", "=", "nn", ".", "Parameter", "(", "w_init", ",", "requires_grad", "=", "True", ")", "\n", "\n", "# constant initialization", "\n", "b_init", "=", "ptu", ".", "zeros", "(", "(", "ensemble_size", ",", "1", ",", "output_dim", ")", ")", ".", "float", "(", ")", "\n", "b_init", "+=", "b_init_value", "\n", "self", ".", "b", "=", "nn", ".", "Parameter", "(", "b_init", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.models.networks.ParallelizedLayer.forward": [[168, 171], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# assumes x is 3D: (ensemble_size, batch_size, dimension)", "\n", "        ", "return", "x", "@", "self", ".", "W", "+", "self", ".", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.models.networks.ParallelizedEnsemble.__init__": [[175, 225], ["torch.nn.Module.__init__", "torch.nn.Parameter().float", "torch.nn.Parameter().float", "enumerate", "networks.ParallelizedLayer", "networks.ParallelizedLayer", "networks.ParallelizedEnsemble.__setattr__", "networks.ParallelizedEnsemble.fcs.append", "range", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.utils.spectral_norm", "lifelong_rl.torch.pytorch_util.zeros", "lifelong_rl.torch.pytorch_util.ones", "numpy.sqrt", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.ones"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "ensemble_size", ",", "\n", "hidden_sizes", ",", "\n", "input_size", ",", "\n", "output_size", ",", "\n", "init_w", "=", "3e-3", ",", "\n", "hidden_activation", "=", "F", ".", "relu", ",", "\n", "output_activation", "=", "identity", ",", "\n", "b_init_value", "=", "0.0", ",", "\n", "layer_norm", "=", "False", ",", "\n", "layer_norm_kwargs", "=", "None", ",", "\n", "spectral_norm", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "ensemble_size", "=", "ensemble_size", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "elites", "=", "[", "i", "for", "i", "in", "range", "(", "self", ".", "ensemble_size", ")", "]", "\n", "\n", "self", ".", "hidden_activation", "=", "hidden_activation", "\n", "self", ".", "output_activation", "=", "output_activation", "\n", "\n", "# data normalization", "\n", "self", ".", "input_mu", "=", "nn", ".", "Parameter", "(", "\n", "ptu", ".", "zeros", "(", "input_size", ")", ",", "requires_grad", "=", "False", ")", ".", "float", "(", ")", "\n", "self", ".", "input_std", "=", "nn", ".", "Parameter", "(", "\n", "ptu", ".", "ones", "(", "input_size", ")", ",", "requires_grad", "=", "False", ")", ".", "float", "(", ")", "\n", "\n", "self", ".", "fcs", "=", "[", "]", "\n", "\n", "in_size", "=", "input_size", "\n", "for", "i", ",", "next_size", "in", "enumerate", "(", "hidden_sizes", ")", ":", "\n", "            ", "layer_size", "=", "(", "ensemble_size", ",", "in_size", ",", "next_size", ")", "\n", "fc", "=", "ParallelizedLayer", "(", "\n", "ensemble_size", ",", "in_size", ",", "next_size", ",", "\n", "w_std_value", "=", "1", "/", "(", "2", "*", "np", ".", "sqrt", "(", "in_size", ")", ")", ",", "\n", "b_init_value", "=", "b_init_value", ",", "\n", ")", "\n", "if", "spectral_norm", ":", "\n", "                ", "fc", "=", "nn", ".", "utils", ".", "spectral_norm", "(", "fc", ",", "name", "=", "'W'", ")", "\n", "", "self", ".", "__setattr__", "(", "'fc%d'", "%", "i", ",", "fc", ")", "\n", "self", ".", "fcs", ".", "append", "(", "fc", ")", "\n", "in_size", "=", "next_size", "\n", "\n", "", "self", ".", "last_fc", "=", "ParallelizedLayer", "(", "\n", "ensemble_size", ",", "in_size", ",", "output_size", ",", "\n", "w_std_value", "=", "1", "/", "(", "2", "*", "np", ".", "sqrt", "(", "in_size", ")", ")", ",", "\n", "b_init_value", "=", "b_init_value", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.models.networks.ParallelizedEnsemble.forward": [[227, 255], ["len", "enumerate", "networks.ParallelizedEnsemble.last_fc", "networks.ParallelizedEnsemble.output_activation", "h.unsqueeze.unsqueeze.unsqueeze", "h.unsqueeze.unsqueeze.repeat", "fc", "networks.ParallelizedEnsemble.hidden_activation", "output.squeeze.squeeze.squeeze", "h.unsqueeze.unsqueeze.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "dim", "=", "len", "(", "input", ".", "shape", ")", "\n", "\n", "# input normalization", "\n", "h", "=", "(", "input", "-", "self", ".", "input_mu", ")", "/", "self", ".", "input_std", "\n", "\n", "# repeat h to make amenable to parallelization", "\n", "# if dim = 3, then we probably already did this somewhere else", "\n", "# (e.g. bootstrapping in training optimization)", "\n", "if", "dim", "<", "3", ":", "\n", "            ", "h", "=", "h", ".", "unsqueeze", "(", "0", ")", "\n", "if", "dim", "==", "1", ":", "\n", "                ", "h", "=", "h", ".", "unsqueeze", "(", "0", ")", "\n", "", "h", "=", "h", ".", "repeat", "(", "self", ".", "ensemble_size", ",", "1", ",", "1", ")", "\n", "\n", "# standard feedforward network", "\n", "", "for", "i", ",", "fc", "in", "enumerate", "(", "self", ".", "fcs", ")", ":", "\n", "            ", "h", "=", "fc", "(", "h", ")", "\n", "h", "=", "self", ".", "hidden_activation", "(", "h", ")", "\n", "", "preactivation", "=", "self", ".", "last_fc", "(", "h", ")", "\n", "output", "=", "self", ".", "output_activation", "(", "preactivation", ")", "\n", "\n", "# if original dim was 1D, squeeze the extra created layer", "\n", "if", "dim", "==", "1", ":", "\n", "            ", "output", "=", "output", ".", "squeeze", "(", "1", ")", "\n", "\n", "# output is (ensemble_size, output_size)", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.models.networks.ParallelizedEnsemble.sample": [[256, 268], ["networks.ParallelizedEnsemble.forward", "torch.randint", "inds.repeat.repeat.unsqueeze().to", "inds.repeat.repeat.repeat", "range", "len", "len", "inds.repeat.repeat.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.dynamics_models.probabilistic_ensemble.ProbabilisticEnsemble.forward", "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchOfflineMBRLAlgorithm.to"], ["", "def", "sample", "(", "self", ",", "input", ")", ":", "\n", "        ", "preds", "=", "self", ".", "forward", "(", "input", ")", "\n", "\n", "inds", "=", "torch", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "elites", ")", ",", "input", ".", "shape", "[", ":", "-", "1", "]", ")", "\n", "inds", "=", "inds", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ".", "to", "(", "device", "=", "ptu", ".", "device", ")", "\n", "inds", "=", "inds", ".", "repeat", "(", "1", ",", "preds", ".", "shape", "[", "2", "]", ")", "\n", "\n", "samples", "=", "(", "inds", "==", "0", ")", ".", "float", "(", ")", "*", "preds", "[", "self", ".", "elites", "[", "0", "]", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "self", ".", "elites", ")", ")", ":", "\n", "            ", "samples", "+=", "(", "inds", "==", "i", ")", ".", "float", "(", ")", "*", "preds", "[", "self", ".", "elites", "[", "i", "]", "]", "\n", "\n", "", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.models.networks.ParallelizedEnsemble.fit_input_stats": [[269, 279], ["numpy.mean", "numpy.std", "lifelong_rl.torch.pytorch_util.from_numpy", "lifelong_rl.torch.pytorch_util.from_numpy"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy"], ["", "def", "fit_input_stats", "(", "self", ",", "data", ",", "mask", "=", "None", ")", ":", "\n", "        ", "mean", "=", "np", ".", "mean", "(", "data", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "std", "=", "np", ".", "std", "(", "data", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "std", "[", "std", "<", "1e-12", "]", "=", "1.0", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "mean", "*=", "mask", "\n", "std", "*=", "mask", "\n", "\n", "", "self", ".", "input_mu", ".", "data", "=", "ptu", ".", "from_numpy", "(", "mean", ")", "\n", "self", ".", "input_std", ".", "data", "=", "ptu", ".", "from_numpy", "(", "std", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.models.networks.identity": [[10, 12], ["None"], "function", ["None"], ["def", "identity", "(", "x", ")", ":", "\n", "    ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.base.base.Policy.get_action": [[12, 20], ["None"], "methods", ["None"], ["@", "abc", ".", "abstractmethod", "\n", "def", "get_action", "(", "self", ",", "observation", ")", ":", "\n", "        ", "\"\"\"\n\n        :param observation:\n        :return: action, debug_dictionary\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.base.base.Policy.reset": [[21, 23], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.base.base.ExplorationPolicy.set_num_steps_total": [[26, 28], ["None"], "methods", ["None"], ["    ", "def", "set_num_steps_total", "(", "self", ",", "t", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.base.base.MakeDeterministic.__init__": [[31, 34], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "stochastic_policy", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stochastic_policy", "=", "stochastic_policy", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.base.base.MakeDeterministic.get_action": [[35, 38], ["base.MakeDeterministic.stochastic_policy.get_action"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.base.latent_prior_policy.PriorLatentPolicy.get_action"], ["", "def", "get_action", "(", "self", ",", "observation", ")", ":", "\n", "        ", "return", "self", ".", "stochastic_policy", ".", "get_action", "(", "observation", ",", "\n", "deterministic", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.base.simple.RandomPolicy.__init__": [[10, 12], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "action_space", ")", ":", "\n", "        ", "self", ".", "action_space", "=", "action_space", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.base.simple.RandomPolicy.get_action": [[13, 15], ["simple.RandomPolicy.action_space.sample"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.sample"], ["", "def", "get_action", "(", "self", ",", "obs", ")", ":", "\n", "        ", "return", "self", ".", "action_space", ".", "sample", "(", ")", ",", "{", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.base.latent_prior_policy.PriorLatentPolicy.__init__": [[14, 30], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "policy", ",", "\n", "prior", ",", "\n", "unconditional", "=", "False", ",", "\n", "steps_between_sampling", "=", "100", ",", "\n", ")", ":", "\n", "        ", "self", ".", "policy", "=", "policy", "\n", "self", ".", "prior", "=", "prior", "\n", "self", ".", "unconditional", "=", "unconditional", "\n", "self", ".", "steps_between_sampling", "=", "steps_between_sampling", "\n", "\n", "self", ".", "fixed_latent", "=", "False", "\n", "\n", "self", ".", "_steps_since_last_sample", "=", "0", "\n", "self", ".", "_last_latent", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.base.latent_prior_policy.PriorLatentPolicy.set_latent": [[31, 33], ["None"], "methods", ["None"], ["", "def", "set_latent", "(", "self", ",", "latent", ")", ":", "\n", "        ", "self", ".", "_last_latent", "=", "latent", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.base.latent_prior_policy.PriorLatentPolicy.get_current_latent": [[34, 36], ["lifelong_rl.get_numpy"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy"], ["", "def", "get_current_latent", "(", "self", ")", ":", "\n", "        ", "return", "ptu", ".", "get_numpy", "(", "self", ".", "_last_latent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.base.latent_prior_policy.PriorLatentPolicy.sample_latent": [[37, 44], ["latent_prior_policy.PriorLatentPolicy.set_latent", "latent_prior_policy.PriorLatentPolicy.prior.sample", "latent_prior_policy.PriorLatentPolicy.prior.forward", "lifelong_rl.from_numpy"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.base.latent_prior_policy.PriorLatentPolicy.set_latent", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.sample", "home.repos.pwc.inspect_result.kzl_lifelong_rl.dynamics_models.probabilistic_ensemble.ProbabilisticEnsemble.forward", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy"], ["", "def", "sample_latent", "(", "self", ",", "state", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "unconditional", "or", "state", "is", "None", ":", "# this will probably be changed", "\n", "            ", "latent", "=", "self", ".", "prior", ".", "sample", "(", ")", "# n=1).squeeze(0)", "\n", "", "else", ":", "\n", "            ", "latent", "=", "self", ".", "prior", ".", "forward", "(", "ptu", ".", "from_numpy", "(", "state", ")", ")", "\n", "", "self", ".", "set_latent", "(", "latent", ")", "\n", "return", "latent", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.base.latent_prior_policy.PriorLatentPolicy.get_action": [[45, 58], ["lifelong_rl.from_numpy", "torch.cat", "latent_prior_policy.PriorLatentPolicy.policy.forward", "latent_prior_policy.PriorLatentPolicy.sample_latent", "lifelong_rl.get_numpy", "dict"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.dynamics_models.probabilistic_ensemble.ProbabilisticEnsemble.forward", "home.repos.pwc.inspect_result.kzl_lifelong_rl.base.latent_prior_policy.PriorLatentPolicy.sample_latent", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy"], ["", "def", "get_action", "(", "self", ",", "state", ")", ":", "\n", "        ", "if", "(", "self", ".", "_steps_since_last_sample", ">=", "self", ".", "steps_between_sampling", "or", "\n", "self", ".", "_last_latent", "is", "None", ")", "and", "not", "self", ".", "fixed_latent", ":", "\n", "            ", "latent", "=", "self", ".", "sample_latent", "(", "state", ")", "\n", "self", ".", "_steps_since_last_sample", "=", "0", "\n", "", "else", ":", "\n", "            ", "latent", "=", "self", ".", "_last_latent", "\n", "", "self", ".", "_steps_since_last_sample", "+=", "1", "\n", "\n", "state", "=", "ptu", ".", "from_numpy", "(", "state", ")", "\n", "sz", "=", "torch", ".", "cat", "(", "(", "state", ",", "latent", ")", ")", "\n", "action", ",", "*", "_", "=", "self", ".", "policy", ".", "forward", "(", "sz", ")", "\n", "return", "ptu", ".", "get_numpy", "(", "action", ")", ",", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.base.latent_prior_policy.PriorLatentPolicy.eval": [[59, 61], ["latent_prior_policy.PriorLatentPolicy.policy.eval"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.base.latent_prior_policy.PriorLatentPolicy.eval"], ["", "def", "eval", "(", "self", ")", ":", "\n", "        ", "self", ".", "policy", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.base.latent_prior_policy.PriorLatentPolicy.train": [[62, 64], ["latent_prior_policy.PriorLatentPolicy.policy.train"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm.train"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "self", ".", "policy", ".", "train", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.risk_aversion.get_mask": [[13, 33], ["dict", "risk_aversion.create_mask", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.risk_aversion.create_mask"], ["def", "get_mask", "(", "mask_type", ",", "n_quantiles", ",", "risk_kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Return a torch mask corresponding to the input parameters.\n    \"\"\"", "\n", "if", "mask_type", "in", "_masks", ":", "\n", "        ", "if", "n_quantiles", "in", "_masks", "[", "mask_type", "]", ":", "\n", "            ", "return", "_masks", "[", "mask_type", "]", "[", "n_quantiles", "]", "\n", "", "", "else", ":", "\n", "        ", "_masks", "[", "mask_type", "]", "=", "dict", "(", ")", "\n", "\n", "", "if", "mask_type", "in", "_inverse_beta_funcs", ":", "\n", "        ", "_masks", "[", "mask_type", "]", "[", "n_quantiles", "]", "=", "create_mask", "(", "\n", "_inverse_beta_funcs", "[", "mask_type", "]", ",", "\n", "n_quantiles", "=", "n_quantiles", ",", "\n", "risk_kwargs", "=", "risk_kwargs", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'mask_type not recognized'", ")", "\n", "\n", "", "return", "_masks", "[", "mask_type", "]", "[", "n_quantiles", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.risk_aversion.create_mask": [[43, 66], ["numpy.linspace", "numpy.zeros", "numpy.zeros", "range", "range", "lifelong_rl.from_numpy", "inverse_beta_func"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy"], ["def", "create_mask", "(", "inverse_beta_func", ",", "n_quantiles", ",", "risk_kwargs", ")", ":", "\n", "    ", "\"\"\"\n    x in [0, 1] represents the CDF of the input.\n    beta(x) represents the cumulative weight assigned to the lower x% of\n        values, e.g. it is analogous to the CDF. This is typically easier\n        to represent via the inverse of the beta function, so we take the\n        inverse of the inverse beta function to get the original function.\n    The reweighted function becomes:\n        R(f, beta) = sum_i f(i/n) * (beta((i+1)/(n+1)) - beta(i/(n+1))\n    \"\"\"", "\n", "\n", "tau", "=", "np", ".", "linspace", "(", "0", ",", "1", ",", "n_quantiles", "+", "1", ")", "\n", "betas", "=", "np", ".", "zeros", "(", "n_quantiles", "+", "1", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "n_quantiles", ")", "\n", "\n", "# TODO: there are some issues with mask and risk_kwarg caching", "\n", "\n", "for", "i", "in", "range", "(", "n_quantiles", "+", "1", ")", ":", "\n", "        ", "betas", "[", "i", "]", "=", "inverse_beta_func", "(", "tau", "[", "i", "]", ",", "risk_kwargs", ")", "\n", "", "for", "i", "in", "range", "(", "n_quantiles", ")", ":", "\n", "        ", "mask", "[", "i", "]", "=", "betas", "[", "i", "+", "1", "]", "-", "betas", "[", "i", "]", "\n", "\n", "", "return", "ptu", ".", "from_numpy", "(", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.risk_aversion.get_inverse": [[68, 82], ["range", "dict", "risk_aversion._cpw_weight"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.risk_aversion._cpw_weight"], ["", "def", "get_inverse", "(", "func", ",", "x", ",", "n_bins", "=", "1024", ",", "risk_kwargs", "=", "None", ")", ":", "\n", "# assumes domain/range is (0, 1), and function is monotonically increasing", "\n", "\n", "# assume we don't need things finer than 1024 for now, just", "\n", "# going to use a slow linear search", "\n", "# TODO: this function can be rewritten much better", "\n", "\n", "    ", "risk_kwargs", "=", "risk_kwargs", "if", "risk_kwargs", "is", "not", "None", "else", "dict", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "n_bins", ")", ":", "\n", "        ", "new_val", "=", "func", "(", "i", "/", "n_bins", ",", "risk_kwargs", ")", "\n", "if", "x", "<=", "new_val", ":", "\n", "            ", "return", "i", "/", "n_bins", "\n", "", "", "return", "1.", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.risk_aversion.neutral_func": [[89, 92], ["None"], "function", ["None"], ["def", "neutral_func", "(", "tau", ",", "risk_kwargs", ")", ":", "\n", "# Neutral risk preference / expected value / identity function", "\n", "    ", "return", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.risk_aversion.cvar_func": [[94, 101], ["None"], "function", ["None"], ["", "def", "cvar_func", "(", "tau", ",", "risk_kwargs", ")", ":", "\n", "# Conditional Value at Risk (only consider bottom alpha% of outcomes)", "\n", "    ", "alpha", "=", "risk_kwargs", "[", "'alpha'", "]", "\n", "if", "tau", "<", "alpha", ":", "\n", "        ", "return", "tau", "/", "alpha", "\n", "", "else", ":", "\n", "        ", "return", "1.", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.risk_aversion._cpw_weight": [[103, 106], ["None"], "function", ["None"], ["", "", "def", "_cpw_weight", "(", "tau", ",", "risk_kwargs", ")", ":", "\n", "    ", "eta", "=", "risk_kwargs", "[", "'eta'", "]", "\n", "return", "(", "tau", "**", "eta", ")", "/", "(", "(", "(", "tau", "**", "eta", ")", "+", "(", "1", "-", "tau", ")", "**", "eta", ")", "**", "(", "1", "/", "eta", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.risk_aversion.cpw_func": [[108, 111], ["risk_aversion.get_inverse"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.risk_aversion.get_inverse"], ["", "def", "cpw_func", "(", "tau", ",", "risk_kwargs", ")", ":", "\n", "# Cumulative Probability Weighting (from prospect theory)", "\n", "    ", "return", "get_inverse", "(", "_cpw_weight", ",", "tau", ",", "risk_kwargs", "=", "risk_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.modules.LayerNorm.__init__": [[10, 23], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.ones", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.ones", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.ones", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.ones", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros"], ["def", "__init__", "(", "self", ",", "features", ",", "center", "=", "True", ",", "scale", "=", "False", ",", "eps", "=", "1e-6", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "center", "=", "center", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "eps", "=", "eps", "\n", "if", "self", ".", "scale", ":", "\n", "            ", "self", ".", "scale_param", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "scale_param", "=", "None", "\n", "", "if", "self", ".", "center", ":", "\n", "            ", "self", ".", "center_param", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "center_param", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.modules.LayerNorm.forward": [[24, 33], ["x.mean", "x.std"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "mean", "=", "x", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "std", "=", "x", ".", "std", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "output", "=", "(", "x", "-", "mean", ")", "/", "(", "std", "+", "self", ".", "eps", ")", "\n", "if", "self", ".", "scale", ":", "\n", "            ", "output", "=", "output", "*", "self", ".", "scale_param", "\n", "", "if", "self", ".", "center", ":", "\n", "            ", "output", "=", "output", "+", "self", ".", "center_param", "\n", "", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.soft_update_from_to": [[5, 9], ["zip", "target.parameters", "source.parameters", "target_param.data.copy_"], "function", ["None"], ["def", "soft_update_from_to", "(", "source", ",", "target", ",", "tau", ")", ":", "\n", "    ", "for", "target_param", ",", "param", "in", "zip", "(", "target", ".", "parameters", "(", ")", ",", "source", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "target_param", ".", "data", ".", "copy_", "(", "\n", "target_param", ".", "data", "*", "(", "1.0", "-", "tau", ")", "+", "param", ".", "data", "*", "tau", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.copy_model_params_from_to": [[12, 15], ["zip", "target.parameters", "source.parameters", "target_param.data.copy_"], "function", ["None"], ["", "", "def", "copy_model_params_from_to", "(", "source", ",", "target", ")", ":", "\n", "    ", "for", "target_param", ",", "param", "in", "zip", "(", "target", ".", "parameters", "(", ")", ",", "source", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "target_param", ".", "data", ".", "copy_", "(", "param", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.fanin_init": [[17, 27], ["tensor.size", "tensor.data.uniform_", "len", "numpy.sqrt", "len", "numpy.prod", "Exception"], "function", ["None"], ["", "", "def", "fanin_init", "(", "tensor", ",", "scale", "=", "1", ")", ":", "\n", "    ", "size", "=", "tensor", ".", "size", "(", ")", "\n", "if", "len", "(", "size", ")", "==", "2", ":", "\n", "        ", "fan_in", "=", "size", "[", "0", "]", "\n", "", "elif", "len", "(", "size", ")", ">", "2", ":", "\n", "        ", "fan_in", "=", "np", ".", "prod", "(", "size", "[", "1", ":", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"Shape must be have dimension at least 2.\"", ")", "\n", "", "bound", "=", "scale", "/", "np", ".", "sqrt", "(", "fan_in", ")", "\n", "return", "tensor", ".", "data", ".", "uniform_", "(", "-", "bound", ",", "bound", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.orthogonal_init": [[29, 31], ["torch.nn.init.orthogonal_"], "function", ["None"], ["", "def", "orthogonal_init", "(", "tensor", ",", "gain", "=", "0.01", ")", ":", "\n", "    ", "torch", ".", "nn", ".", "init", ".", "orthogonal_", "(", "tensor", ",", "gain", "=", "gain", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.fanin_init_weights_like": [[33, 45], ["tensor.size", "pytorch_util.FloatTensor", "FloatTensor.uniform_", "len", "numpy.sqrt", "tensor.size", "len", "numpy.prod", "Exception"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.FloatTensor"], ["", "def", "fanin_init_weights_like", "(", "tensor", ")", ":", "\n", "    ", "size", "=", "tensor", ".", "size", "(", ")", "\n", "if", "len", "(", "size", ")", "==", "2", ":", "\n", "        ", "fan_in", "=", "size", "[", "0", "]", "\n", "", "elif", "len", "(", "size", ")", ">", "2", ":", "\n", "        ", "fan_in", "=", "np", ".", "prod", "(", "size", "[", "1", ":", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"Shape must be have dimension at least 2.\"", ")", "\n", "", "bound", "=", "1.", "/", "np", ".", "sqrt", "(", "fan_in", ")", "\n", "new_tensor", "=", "FloatTensor", "(", "tensor", ".", "size", "(", ")", ")", "\n", "new_tensor", ".", "uniform_", "(", "-", "bound", ",", "bound", ")", "\n", "return", "new_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.set_gpu_mode": [[56, 63], ["torch.device", "str"], "function", ["None"], ["def", "set_gpu_mode", "(", "mode", ",", "gpu_id", "=", "0", ")", ":", "\n", "    ", "global", "_use_gpu", "\n", "global", "device", "\n", "global", "_gpu_id", "\n", "_gpu_id", "=", "gpu_id", "\n", "_use_gpu", "=", "mode", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:\"", "+", "str", "(", "gpu_id", ")", "if", "_use_gpu", "else", "\"cpu\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.gpu_enabled": [[65, 67], ["None"], "function", ["None"], ["", "def", "gpu_enabled", "(", ")", ":", "\n", "    ", "return", "_use_gpu", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.set_device": [[69, 71], ["torch.cuda.set_device"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.set_device"], ["", "def", "set_device", "(", "gpu_id", ")", ":", "\n", "    ", "torch", ".", "cuda", ".", "set_device", "(", "gpu_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.FloatTensor": [[74, 78], ["torch.FloatTensor"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.FloatTensor"], ["", "def", "FloatTensor", "(", "*", "args", ",", "torch_device", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "torch_device", "is", "None", ":", "\n", "        ", "torch_device", "=", "device", "\n", "", "return", "torch", ".", "FloatTensor", "(", "*", "args", ",", "**", "kwargs", ",", "device", "=", "torch_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy": [[80, 82], ["torch.from_numpy().float().to", "torch.from_numpy().float", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchOfflineMBRLAlgorithm.to", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy"], ["", "def", "from_numpy", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "torch", ".", "from_numpy", "(", "*", "args", ",", "**", "kwargs", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy": [[84, 86], ["tensor.to().detach().numpy", "tensor.to().detach", "tensor.to"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchOfflineMBRLAlgorithm.to"], ["", "def", "get_numpy", "(", "tensor", ")", ":", "\n", "    ", "return", "tensor", ".", "to", "(", "'cpu'", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros": [[88, 92], ["torch.zeros"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros"], ["", "def", "zeros", "(", "*", "sizes", ",", "torch_device", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "torch_device", "is", "None", ":", "\n", "        ", "torch_device", "=", "device", "\n", "", "return", "torch", ".", "zeros", "(", "*", "sizes", ",", "**", "kwargs", ",", "device", "=", "torch_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.ones": [[94, 98], ["torch.ones"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.ones"], ["", "def", "ones", "(", "*", "sizes", ",", "torch_device", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "torch_device", "is", "None", ":", "\n", "        ", "torch_device", "=", "device", "\n", "", "return", "torch", ".", "ones", "(", "*", "sizes", ",", "**", "kwargs", ",", "device", "=", "torch_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.ones_like": [[100, 104], ["torch.ones_like"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.ones_like"], ["", "def", "ones_like", "(", "*", "args", ",", "torch_device", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "torch_device", "is", "None", ":", "\n", "        ", "torch_device", "=", "device", "\n", "", "return", "torch", ".", "ones_like", "(", "*", "args", ",", "**", "kwargs", ",", "device", "=", "torch_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.rand": [[106, 110], ["torch.rand"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.rand"], ["", "def", "rand", "(", "*", "args", ",", "torch_device", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "torch_device", "is", "None", ":", "\n", "        ", "torch_device", "=", "device", "\n", "", "return", "torch", ".", "rand", "(", "*", "args", ",", "**", "kwargs", ",", "device", "=", "torch_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.randn": [[112, 116], ["torch.randn"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.randn"], ["", "def", "randn", "(", "*", "args", ",", "torch_device", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "torch_device", "is", "None", ":", "\n", "        ", "torch_device", "=", "device", "\n", "", "return", "torch", ".", "randn", "(", "*", "args", ",", "**", "kwargs", ",", "device", "=", "torch_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros_like": [[118, 122], ["torch.zeros_like"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros_like"], ["", "def", "zeros_like", "(", "*", "args", ",", "torch_device", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "torch_device", "is", "None", ":", "\n", "        ", "torch_device", "=", "device", "\n", "", "return", "torch", ".", "zeros_like", "(", "*", "args", ",", "**", "kwargs", ",", "device", "=", "torch_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.tensor": [[124, 128], ["torch.tensor"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.tensor"], ["", "def", "tensor", "(", "*", "args", ",", "torch_device", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "torch_device", "is", "None", ":", "\n", "        ", "torch_device", "=", "device", "\n", "", "return", "torch", ".", "tensor", "(", "*", "args", ",", "**", "kwargs", ",", "device", "=", "torch_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.normal": [[130, 132], ["torch.normal().to", "torch.normal"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchOfflineMBRLAlgorithm.to", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.normal"], ["", "def", "normal", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "torch", ".", "normal", "(", "*", "args", ",", "**", "kwargs", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.eval_np": [[134, 150], ["tuple", "module", "isinstance", "pytorch_util.torch_ify", "tuple", "pytorch_util.np_ify", "pytorch_util.torch_ify", "kwargs.items", "pytorch_util.np_ify"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.torch_ify", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.np_ify", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.torch_ify", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.np_ify"], ["", "def", "eval_np", "(", "module", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Eval this module with a numpy interface\n\n    Same as a call to __call__ except all Variable input/outputs are\n    replaced with numpy equivalents.\n\n    Assumes the output is either a single object or a tuple of objects.\n    \"\"\"", "\n", "torch_args", "=", "tuple", "(", "torch_ify", "(", "x", ")", "for", "x", "in", "args", ")", "\n", "torch_kwargs", "=", "{", "k", ":", "torch_ify", "(", "v", ")", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "}", "\n", "outputs", "=", "module", "(", "*", "torch_args", ",", "**", "torch_kwargs", ")", "\n", "if", "isinstance", "(", "outputs", ",", "tuple", ")", ":", "\n", "        ", "return", "tuple", "(", "np_ify", "(", "x", ")", "for", "x", "in", "outputs", ")", "\n", "", "else", ":", "\n", "        ", "return", "np_ify", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.torch_ify": [[152, 157], ["isinstance", "pytorch_util.from_numpy"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy"], ["", "", "def", "torch_ify", "(", "np_array_or_other", ")", ":", "\n", "    ", "if", "isinstance", "(", "np_array_or_other", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "from_numpy", "(", "np_array_or_other", ")", "\n", "", "else", ":", "\n", "        ", "return", "np_array_or_other", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.np_ify": [[159, 164], ["isinstance", "pytorch_util.get_numpy"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy"], ["", "", "def", "np_ify", "(", "tensor_or_other", ")", ":", "\n", "    ", "if", "isinstance", "(", "tensor_or_other", ",", "torch", ".", "autograd", ".", "Variable", ")", ":", "\n", "        ", "return", "get_numpy", "(", "tensor_or_other", ")", "\n", "", "else", ":", "\n", "        ", "return", "tensor_or_other", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util._elem_or_tuple_to_variable": [[166, 172], ["isinstance", "from_numpy().float", "tuple", "pytorch_util.from_numpy", "pytorch_util._elem_or_tuple_to_variable"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util._elem_or_tuple_to_variable"], ["", "", "def", "_elem_or_tuple_to_variable", "(", "elem_or_tuple", ")", ":", "\n", "    ", "if", "isinstance", "(", "elem_or_tuple", ",", "tuple", ")", ":", "\n", "        ", "return", "tuple", "(", "\n", "_elem_or_tuple_to_variable", "(", "e", ")", "for", "e", "in", "elem_or_tuple", "\n", ")", "\n", "", "return", "from_numpy", "(", "elem_or_tuple", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util._filter_batch": [[174, 180], ["np_batch.items", "v.astype"], "function", ["None"], ["", "def", "_filter_batch", "(", "np_batch", ")", ":", "\n", "    ", "for", "k", ",", "v", "in", "np_batch", ".", "items", "(", ")", ":", "\n", "        ", "if", "v", ".", "dtype", "==", "np", ".", "bool", ":", "\n", "            ", "yield", "k", ",", "v", ".", "astype", "(", "int", ")", "\n", "", "else", ":", "\n", "            ", "yield", "k", ",", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.np_to_pytorch_batch": [[182, 187], ["pytorch_util._elem_or_tuple_to_variable", "pytorch_util._filter_batch", "numpy.dtype"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util._elem_or_tuple_to_variable", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util._filter_batch"], ["", "", "", "def", "np_to_pytorch_batch", "(", "np_batch", ")", ":", "\n", "    ", "return", "{", "\n", "k", ":", "_elem_or_tuple_to_variable", "(", "x", ")", "\n", "for", "k", ",", "x", "in", "_filter_batch", "(", "np_batch", ")", "\n", "if", "x", ".", "dtype", "!=", "np", ".", "dtype", "(", "'O'", ")", "# ignore object (e.g. dictionaries)", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.Distribution.sample_and_logprob": [[15, 19], ["distributions.Distribution.sample", "distributions.Distribution.log_prob"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.sample", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.log_prob"], ["    ", "def", "sample_and_logprob", "(", "self", ")", ":", "\n", "        ", "s", "=", "self", ".", "sample", "(", ")", "\n", "log_p", "=", "self", ".", "log_prob", "(", "s", ")", "\n", "return", "s", ",", "log_p", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.Distribution.rsample_and_logprob": [[20, 24], ["distributions.Distribution.rsample", "distributions.Distribution.log_prob"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.rsample", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.log_prob"], ["", "def", "rsample_and_logprob", "(", "self", ")", ":", "\n", "        ", "s", "=", "self", ".", "rsample", "(", ")", "\n", "log_p", "=", "self", ".", "log_prob", "(", "s", ")", "\n", "return", "s", ",", "log_p", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.Distribution.mle_estimate": [[25, 27], ["None"], "methods", ["None"], ["", "def", "mle_estimate", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.Distribution.get_diagnostics": [[28, 30], ["None"], "methods", ["None"], ["", "def", "get_diagnostics", "(", "self", ")", ":", "\n", "        ", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.Independent.get_diagnostics": [[34, 36], ["distributions.Independent.base_dist.get_diagnostics"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchTrainer.get_diagnostics"], ["    ", "def", "get_diagnostics", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "base_dist", ".", "get_diagnostics", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TorchDistributionWrapper.__init__": [[40, 42], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "distribution", ":", "TorchDistribution", ")", ":", "\n", "        ", "self", ".", "distribution", "=", "distribution", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TorchDistributionWrapper.batch_shape": [[43, 46], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "batch_shape", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "distribution", ".", "batch_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TorchDistributionWrapper.event_shape": [[47, 50], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "event_shape", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "distribution", ".", "event_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TorchDistributionWrapper.arg_constraints": [[51, 54], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "arg_constraints", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "distribution", ".", "arg_constraints", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TorchDistributionWrapper.support": [[55, 58], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "support", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "distribution", ".", "support", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TorchDistributionWrapper.mean": [[59, 62], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "mean", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "distribution", ".", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TorchDistributionWrapper.variance": [[63, 66], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "variance", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "distribution", ".", "variance", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TorchDistributionWrapper.stddev": [[67, 70], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "stddev", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "distribution", ".", "stddev", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TorchDistributionWrapper.sample": [[71, 73], ["torch.Size", "distributions.TorchDistributionWrapper.distribution.sample"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.sample"], ["", "def", "sample", "(", "self", ",", "sample_size", "=", "torch", ".", "Size", "(", ")", ")", ":", "\n", "        ", "return", "self", ".", "distribution", ".", "sample", "(", "sample_shape", "=", "sample_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TorchDistributionWrapper.rsample": [[74, 76], ["torch.Size", "distributions.TorchDistributionWrapper.distribution.rsample"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.rsample"], ["", "def", "rsample", "(", "self", ",", "sample_size", "=", "torch", ".", "Size", "(", ")", ")", ":", "\n", "        ", "return", "self", ".", "distribution", ".", "rsample", "(", "sample_shape", "=", "sample_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TorchDistributionWrapper.log_prob": [[77, 79], ["distributions.TorchDistributionWrapper.distribution.log_prob"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.log_prob"], ["", "def", "log_prob", "(", "self", ",", "value", ")", ":", "\n", "        ", "return", "self", ".", "distribution", ".", "log_prob", "(", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TorchDistributionWrapper.cdf": [[80, 82], ["distributions.TorchDistributionWrapper.distribution.cdf"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TorchDistributionWrapper.cdf"], ["", "def", "cdf", "(", "self", ",", "value", ")", ":", "\n", "        ", "return", "self", ".", "distribution", ".", "cdf", "(", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TorchDistributionWrapper.icdf": [[83, 85], ["distributions.TorchDistributionWrapper.distribution.icdf"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TorchDistributionWrapper.icdf"], ["", "def", "icdf", "(", "self", ",", "value", ")", ":", "\n", "        ", "return", "self", ".", "distribution", ".", "icdf", "(", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TorchDistributionWrapper.enumerate_support": [[86, 88], ["distributions.TorchDistributionWrapper.distribution.enumerate_support"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TorchDistributionWrapper.enumerate_support"], ["", "def", "enumerate_support", "(", "self", ",", "expand", "=", "True", ")", ":", "\n", "        ", "return", "self", ".", "distribution", ".", "enumerate_support", "(", "expand", "=", "expand", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TorchDistributionWrapper.entropy": [[89, 91], ["distributions.TorchDistributionWrapper.distribution.entropy"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TorchDistributionWrapper.entropy"], ["", "def", "entropy", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "distribution", ".", "entropy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TorchDistributionWrapper.perplexity": [[92, 94], ["distributions.TorchDistributionWrapper.distribution.perplexity"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TorchDistributionWrapper.perplexity"], ["", "def", "perplexity", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "distribution", ".", "perplexity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TorchDistributionWrapper.__repr__": [[95, 97], ["distributions.TorchDistributionWrapper.distribution.__repr__"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.MultivariateDiagonalNormal.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'Wrapped '", "+", "self", ".", "distribution", ".", "__repr__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.MultivariateDiagonalNormal.__init__": [[104, 108], ["distributions.Independent", "distributions.TorchDistributionWrapper.__init__", "torch.distributions.Normal"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__"], ["def", "__init__", "(", "self", ",", "loc", ",", "scale_diag", ",", "reinterpreted_batch_ndims", "=", "1", ")", ":", "\n", "        ", "dist", "=", "Independent", "(", "TorchNormal", "(", "loc", ",", "scale_diag", ")", ",", "\n", "reinterpreted_batch_ndims", "=", "reinterpreted_batch_ndims", ")", "\n", "super", "(", ")", ".", "__init__", "(", "dist", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.MultivariateDiagonalNormal.get_diagnostics": [[109, 121], ["collections.OrderedDict", "collections.OrderedDict.update", "collections.OrderedDict.update", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy"], ["", "def", "get_diagnostics", "(", "self", ")", ":", "\n", "        ", "stats", "=", "OrderedDict", "(", ")", "\n", "stats", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "'mean'", ",", "\n", "ptu", ".", "get_numpy", "(", "self", ".", "mean", ")", ",", "\n", "# exclude_max_min=True,", "\n", ")", ")", "\n", "stats", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "'std'", ",", "\n", "ptu", ".", "get_numpy", "(", "self", ".", "distribution", ".", "stddev", ")", ",", "\n", ")", ")", "\n", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.MultivariateDiagonalNormal.__repr__": [[122, 124], ["distributions.MultivariateDiagonalNormal.distribution.base_dist.__repr__"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.MultivariateDiagonalNormal.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "distribution", ".", "base_dist", ".", "__repr__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.__init__": [[135, 145], ["torch.distributions.Normal"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "normal_mean", ",", "normal_std", ",", "epsilon", "=", "1e-6", ")", ":", "\n", "        ", "\"\"\"\n        :param normal_mean: Mean of the normal distribution\n        :param normal_std: Std of the normal distribution\n        :param epsilon: Numerical stability epsilon when computing log-prob.\n        \"\"\"", "\n", "self", ".", "normal_mean", "=", "normal_mean", "\n", "self", ".", "normal_std", "=", "normal_std", "\n", "self", ".", "normal", "=", "torch", ".", "distributions", ".", "Normal", "(", "normal_mean", ",", "normal_std", ")", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.sample_n": [[146, 152], ["distributions.TanhNormal.normal.sample_n", "torch.tanh", "torch.tanh"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.sample_n"], ["", "def", "sample_n", "(", "self", ",", "n", ",", "return_pre_tanh_value", "=", "False", ")", ":", "\n", "        ", "z", "=", "self", ".", "normal", ".", "sample_n", "(", "n", ")", "\n", "if", "return_pre_tanh_value", ":", "\n", "            ", "return", "torch", ".", "tanh", "(", "z", ")", ",", "z", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "tanh", "(", "z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal._log_prob_from_pre_tanh": [[153, 176], ["distributions.TanhNormal.normal.log_prob", "torch.nn.functional.softplus", "lifelong_rl.from_numpy", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.log_prob", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.log"], ["", "", "def", "_log_prob_from_pre_tanh", "(", "self", ",", "pre_tanh_value", ")", ":", "\n", "        ", "\"\"\"\n        Adapted from\n        https://github.com/tensorflow/probability/blob/master/tensorflow_probability/python/bijectors/tanh.py#L73\n        This formula is mathematically equivalent to log(1 - tanh(x)^2).\n        Derivation:\n        log(1 - tanh(x)^2)\n         = log(sech(x)^2)\n         = 2 * log(sech(x))\n         = 2 * log(2e^-x / (e^-2x + 1))\n         = 2 * (log(2) - x - log(e^-2x + 1))\n         = 2 * (log(2) - x - softplus(-2x))\n        :param value: some value, x\n        :param pre_tanh_value: arctanh(x)\n        :return:\n        \"\"\"", "\n", "log_prob", "=", "self", ".", "normal", ".", "log_prob", "(", "pre_tanh_value", ")", "\n", "correction", "=", "-", "2.", "*", "(", "\n", "ptu", ".", "from_numpy", "(", "np", ".", "log", "(", "[", "2.", "]", ")", ")", "\n", "-", "pre_tanh_value", "\n", "-", "torch", ".", "nn", ".", "functional", ".", "softplus", "(", "-", "2.", "*", "pre_tanh_value", ")", "\n", ")", "\n", "return", "log_prob", "+", "correction", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.log_prob": [[177, 183], ["distributions.TanhNormal._log_prob_from_pre_tanh", "torch.clamp", "torch.log", "torch.log"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal._log_prob_from_pre_tanh", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.log", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.log"], ["", "def", "log_prob", "(", "self", ",", "value", ",", "pre_tanh_value", "=", "None", ")", ":", "\n", "        ", "if", "pre_tanh_value", "is", "None", ":", "\n", "# errors or instability at values near 1", "\n", "            ", "value", "=", "torch", ".", "clamp", "(", "value", ",", "-", "0.999999", ",", "0.999999", ")", "\n", "pre_tanh_value", "=", "torch", ".", "log", "(", "1", "+", "value", ")", "/", "2", "-", "torch", ".", "log", "(", "1", "-", "value", ")", "/", "2", "\n", "", "return", "self", ".", "_log_prob_from_pre_tanh", "(", "pre_tanh_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.rsample_with_pretanh": [[184, 194], ["torch.tanh", "distributions.TorchDistributionWrapper.sample", "distributions.MultivariateDiagonalNormal", "lifelong_rl.zeros", "lifelong_rl.ones", "distributions.TanhNormal.normal_mean.size", "distributions.TanhNormal.normal_std.size"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.sample", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.ones"], ["", "def", "rsample_with_pretanh", "(", "self", ")", ":", "\n", "        ", "z", "=", "(", "\n", "self", ".", "normal_mean", "+", "\n", "self", ".", "normal_std", "*", "\n", "MultivariateDiagonalNormal", "(", "\n", "ptu", ".", "zeros", "(", "self", ".", "normal_mean", ".", "size", "(", ")", ")", ",", "\n", "ptu", ".", "ones", "(", "self", ".", "normal_std", ".", "size", "(", ")", ")", "\n", ")", ".", "sample", "(", ")", "\n", ")", "\n", "return", "torch", ".", "tanh", "(", "z", ")", ",", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.sample": [[195, 205], ["distributions.TanhNormal.rsample_with_pretanh", "value.detach", "value.detach"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.rsample_with_pretanh"], ["", "def", "sample", "(", "self", ",", "return_pretanh_value", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Gradients will and should *not* pass through this operation.\n        See https://github.com/pytorch/pytorch/issues/4620 for discussion.\n        \"\"\"", "\n", "value", ",", "pre_tanh_value", "=", "self", ".", "rsample_with_pretanh", "(", ")", "\n", "if", "return_pretanh_value", ":", "\n", "            ", "return", "value", ".", "detach", "(", ")", ",", "pre_tanh_value", "\n", "", "else", ":", "\n", "            ", "return", "value", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.rsample": [[206, 215], ["distributions.TanhNormal.rsample_with_pretanh"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.rsample_with_pretanh"], ["", "", "def", "rsample", "(", "self", ",", "return_pretanh_value", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Sampling in the reparameterization case.\n        \"\"\"", "\n", "value", ",", "pre_tanh_value", "=", "self", ".", "rsample_with_pretanh", "(", ")", "\n", "if", "return_pretanh_value", ":", "\n", "            ", "return", "value", ",", "pre_tanh_value", "\n", "", "else", ":", "\n", "            ", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.sample_and_logprob": [[216, 221], ["distributions.TanhNormal.rsample_with_pretanh", "distributions.TanhNormal.log_prob", "value.detach", "pre_tanh_value.detach"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.rsample_with_pretanh", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.log_prob"], ["", "", "def", "sample_and_logprob", "(", "self", ")", ":", "\n", "        ", "value", ",", "pre_tanh_value", "=", "self", ".", "rsample_with_pretanh", "(", ")", "\n", "value", ",", "pre_tanh_value", "=", "value", ".", "detach", "(", ")", ",", "pre_tanh_value", ".", "detach", "(", ")", "\n", "log_p", "=", "self", ".", "log_prob", "(", "value", ",", "pre_tanh_value", ")", "\n", "return", "value", ",", "log_p", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.rsample_and_logprob": [[222, 226], ["distributions.TanhNormal.rsample_with_pretanh", "distributions.TanhNormal.log_prob"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.rsample_with_pretanh", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.log_prob"], ["", "def", "rsample_and_logprob", "(", "self", ")", ":", "\n", "        ", "value", ",", "pre_tanh_value", "=", "self", ".", "rsample_with_pretanh", "(", ")", "\n", "log_p", "=", "self", ".", "log_prob", "(", "value", ",", "pre_tanh_value", ")", "\n", "return", "value", ",", "log_p", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean": [[227, 230], ["torch.tanh"], "methods", ["None"], ["", "@", "property", "\n", "def", "mean", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "tanh", "(", "self", ".", "normal_mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.get_diagnostics": [[231, 246], ["collections.OrderedDict", "collections.OrderedDict.update", "collections.OrderedDict.update", "collections.OrderedDict.update", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.util.eval_util.create_stats_ordered_dict", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "torch.log"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.log"], ["", "def", "get_diagnostics", "(", "self", ")", ":", "\n", "        ", "stats", "=", "OrderedDict", "(", ")", "\n", "stats", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "'mean'", ",", "\n", "ptu", ".", "get_numpy", "(", "self", ".", "mean", ")", ",", "\n", ")", ")", "\n", "stats", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "'normal/std'", ",", "\n", "ptu", ".", "get_numpy", "(", "self", ".", "normal_std", ")", "\n", ")", ")", "\n", "stats", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "'normal/log_std'", ",", "\n", "ptu", ".", "get_numpy", "(", "torch", ".", "log", "(", "self", ".", "normal_std", ")", ")", ",", "\n", ")", ")", "\n", "return", "stats", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.path_builder.PathBuilder.__init__": [[34, 37], ["dict.__init__"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_path_length", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.path_builder.PathBuilder.add_all": [[38, 45], ["key_to_value.items", "path_builder.PathBuilder.append"], "methods", ["None"], ["", "def", "add_all", "(", "self", ",", "**", "key_to_value", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "key_to_value", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "not", "in", "self", ":", "\n", "                ", "self", "[", "k", "]", "=", "[", "v", "]", "\n", "", "else", ":", "\n", "                ", "self", "[", "k", "]", ".", "append", "(", "v", ")", "\n", "", "", "self", ".", "_path_length", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.path_builder.PathBuilder.get_all_stacked": [[46, 51], ["dict", "path_builder.PathBuilder.items", "path_builder.stack_list"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.path_builder.stack_list"], ["", "def", "get_all_stacked", "(", "self", ")", ":", "\n", "        ", "output_dict", "=", "dict", "(", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "items", "(", ")", ":", "\n", "            ", "output_dict", "[", "k", "]", "=", "stack_list", "(", "v", ")", "\n", "", "return", "output_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.path_builder.PathBuilder.__len__": [[52, 54], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_path_length", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.path_builder.stack_list": [[56, 61], ["isinstance", "numpy.array"], "function", ["None"], ["", "", "def", "stack_list", "(", "lst", ")", ":", "\n", "    ", "if", "isinstance", "(", "lst", "[", "0", "]", ",", "dict", ")", ":", "\n", "        ", "return", "lst", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "array", "(", "lst", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions._create_full_tensors": [[19, 27], ["lifelong_rl.zeros", "lifelong_rl.from_numpy", "lifelong_rl.zeros", "lifelong_rl.zeros", "lifelong_rl.zeros"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros"], ["def", "_create_full_tensors", "(", "start_states", ",", "max_path_length", ",", "obs_dim", ",", "action_dim", ")", ":", "\n", "    ", "num_rollouts", "=", "start_states", ".", "shape", "[", "0", "]", "\n", "observations", "=", "ptu", ".", "zeros", "(", "(", "num_rollouts", ",", "max_path_length", "+", "1", ",", "obs_dim", ")", ")", "\n", "observations", "[", ":", ",", "0", "]", "=", "ptu", ".", "from_numpy", "(", "start_states", ")", "\n", "actions", "=", "ptu", ".", "zeros", "(", "(", "num_rollouts", ",", "max_path_length", ",", "action_dim", ")", ")", "\n", "rewards", "=", "ptu", ".", "zeros", "(", "(", "num_rollouts", ",", "max_path_length", ",", "1", ")", ")", "\n", "terminals", "=", "ptu", ".", "zeros", "(", "(", "num_rollouts", ",", "max_path_length", ",", "1", ")", ")", "\n", "return", "observations", ",", "actions", ",", "rewards", ",", "terminals", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions._sample_from_model": [[29, 31], ["dynamics_model.sample"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.sample"], ["", "def", "_sample_from_model", "(", "dynamics_model", ",", "state_actions", ",", "t", ")", ":", "\n", "    ", "return", "dynamics_model", ".", "sample", "(", "state_actions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions._get_prediction": [[33, 45], ["torch.cat", "sample_from_model", "print"], "function", ["None"], ["", "def", "_get_prediction", "(", "sample_from_model", ",", "dynamics_model", ",", "states", ",", "actions", ",", "t", ",", "terminal_cutoff", "=", "0.5", ")", ":", "\n", "    ", "state_actions", "=", "torch", ".", "cat", "(", "[", "states", ",", "actions", "]", ",", "dim", "=", "-", "1", ")", "\n", "transitions", "=", "sample_from_model", "(", "dynamics_model", ",", "state_actions", ",", "t", ")", "\n", "if", "(", "transitions", "!=", "transitions", ")", ".", "any", "(", ")", ":", "\n", "        ", "print", "(", "'WARNING: NaN TRANSITIONS IN DYNAMICS MODEL ROLLOUT'", ")", "\n", "transitions", "[", "transitions", "!=", "transitions", "]", "=", "0", "\n", "\n", "", "rewards", "=", "transitions", "[", ":", ",", ":", "1", "]", "\n", "dones", "=", "(", "transitions", "[", ":", ",", "1", ":", "2", "]", ">", "terminal_cutoff", ")", ".", "float", "(", ")", "\n", "delta_obs", "=", "transitions", "[", ":", ",", "2", ":", "]", "\n", "\n", "return", "rewards", ",", "dones", ",", "delta_obs", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions._create_paths": [[47, 68], ["lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "range", "len", "paths.append", "dict", "range", "range"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy"], ["", "def", "_create_paths", "(", "observations", ",", "actions", ",", "rewards", ",", "terminals", ",", "max_path_length", ")", ":", "\n", "    ", "observations_np", "=", "ptu", ".", "get_numpy", "(", "observations", ")", "\n", "actions_np", "=", "ptu", ".", "get_numpy", "(", "actions", ")", "\n", "rewards_np", "=", "ptu", ".", "get_numpy", "(", "rewards", ")", "\n", "terminals_np", "=", "ptu", ".", "get_numpy", "(", "terminals", ")", "\n", "\n", "paths", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "observations", ")", ")", ":", "\n", "        ", "rollout_len", "=", "1", "\n", "while", "rollout_len", "<", "max_path_length", "and", "terminals", "[", "i", ",", "rollout_len", "-", "1", ",", "0", "]", "<", "0.5", ":", "# just check 0 or 1", "\n", "            ", "rollout_len", "+=", "1", "\n", "", "paths", ".", "append", "(", "dict", "(", "\n", "observations", "=", "observations_np", "[", "i", ",", ":", "rollout_len", "]", ",", "\n", "actions", "=", "actions_np", "[", "i", ",", ":", "rollout_len", "]", ",", "\n", "rewards", "=", "rewards_np", "[", "i", ",", ":", "rollout_len", "]", ",", "\n", "next_observations", "=", "observations_np", "[", "i", ",", "1", ":", "rollout_len", "+", "1", "]", ",", "\n", "terminals", "=", "terminals_np", "[", "i", ",", ":", "rollout_len", "]", ",", "\n", "agent_infos", "=", "[", "[", "]", "for", "_", "in", "range", "(", "rollout_len", ")", "]", ",", "\n", "env_infos", "=", "[", "[", "]", "for", "_", "in", "range", "(", "rollout_len", ")", "]", ",", "\n", ")", ")", "\n", "", "return", "paths", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions._get_policy_actions": [[75, 79], ["policy.forward"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.dynamics_models.probabilistic_ensemble.ProbabilisticEnsemble.forward"], ["def", "_get_policy_actions", "(", "states", ",", "t", ",", "action_kwargs", ")", ":", "\n", "    ", "policy", "=", "action_kwargs", "[", "'policy'", "]", "\n", "actions", ",", "*", "_", "=", "policy", ".", "forward", "(", "states", ")", "\n", "return", "actions", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions._get_policy_latent_actions": [[81, 85], ["torch.cat", "model_rollout_functions._get_policy_actions"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions._get_policy_actions"], ["", "def", "_get_policy_latent_actions", "(", "states", ",", "t", ",", "action_kwargs", ")", ":", "\n", "    ", "latents", "=", "action_kwargs", "[", "'latents'", "]", "\n", "state_latents", "=", "torch", ".", "cat", "(", "[", "states", ",", "latents", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "_get_policy_actions", "(", "state_latents", ",", "t", ",", "action_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions._get_policy_latent_prior_actions": [[87, 92], ["latent_prior", "torch.cat", "model_rollout_functions._get_policy_actions"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions._get_policy_actions"], ["", "def", "_get_policy_latent_prior_actions", "(", "states", ",", "t", ",", "action_kwargs", ")", ":", "\n", "    ", "latent_prior", "=", "action_kwargs", "[", "'latent_prior'", "]", "\n", "latents", ",", "*", "_", "=", "latent_prior", "(", "states", ")", "\n", "state_latents", "=", "torch", ".", "cat", "(", "[", "states", ",", "latents", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "_get_policy_actions", "(", "state_latents", ",", "t", ",", "action_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions._get_open_loop_actions": [[94, 97], ["None"], "function", ["None"], ["", "def", "_get_open_loop_actions", "(", "states", ",", "t", ",", "action_kwargs", ")", ":", "\n", "    ", "actions", "=", "action_kwargs", "[", "'actions'", "]", "\n", "return", "actions", "[", ":", ",", "t", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions._model_rollout": [[105, 143], ["create_full_tensors", "range", "create_paths", "dict", "ValueError", "get_prediction", "model_rollout_functions._get_policy_actions", "model_rollout_functions._get_open_loop_actions", "model_rollout_functions._get_policy_latent_actions", "model_rollout_functions._get_policy_latent_prior_actions"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions._get_policy_actions", "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions._get_open_loop_actions", "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions._get_policy_latent_actions", "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions._get_policy_latent_prior_actions"], ["def", "_model_rollout", "(", "\n", "dynamics_model", ",", "# torch dynamics model: (s, a) --> (r, d, s')", "\n", "start_states", ",", "# numpy array of states: (num_rollouts, obs_dim)", "\n", "get_action", ",", "# method for getting action", "\n", "action_kwargs", "=", "None", ",", "# kwargs for get_action (ex. policy or actions)", "\n", "max_path_length", "=", "1000", ",", "# maximum rollout length (if not terminated)", "\n", "terminal_cutoff", "=", "0.5", ",", "# output Done if model pred > terminal_cutoff", "\n", "create_full_tensors", "=", "_create_full_tensors", ",", "\n", "sample_from_model", "=", "_sample_from_model", ",", "\n", "get_prediction", "=", "_get_prediction", ",", "\n", "create_paths", "=", "_create_paths", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "    ", "if", "action_kwargs", "is", "None", ":", "\n", "        ", "action_kwargs", "=", "dict", "(", ")", "\n", "", "if", "terminal_cutoff", "is", "None", ":", "\n", "        ", "terminal_cutoff", "=", "1e6", "\n", "", "if", "max_path_length", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "'Must specify max_path_length in rollout function'", ")", "\n", "\n", "", "obs_dim", "=", "dynamics_model", ".", "obs_dim", "\n", "action_dim", "=", "dynamics_model", ".", "action_dim", "\n", "\n", "s", ",", "a", ",", "r", ",", "d", "=", "create_full_tensors", "(", "start_states", ",", "max_path_length", ",", "obs_dim", ",", "action_dim", ")", "\n", "for", "t", "in", "range", "(", "max_path_length", ")", ":", "\n", "        ", "a", "[", ":", ",", "t", "]", "=", "get_action", "(", "s", "[", ":", ",", "t", "]", ",", "t", ",", "action_kwargs", ")", "\n", "r", "[", ":", ",", "t", "]", ",", "d", "[", ":", ",", "t", "]", ",", "delta_t", "=", "get_prediction", "(", "\n", "sample_from_model", ",", "\n", "dynamics_model", ",", "\n", "s", "[", ":", ",", "t", "]", ",", "a", "[", ":", ",", "t", "]", ",", "t", ",", "\n", "terminal_cutoff", "=", "terminal_cutoff", ",", "\n", ")", "\n", "s", "[", ":", ",", "t", "+", "1", "]", "=", "s", "[", ":", ",", "t", "]", "+", "delta_t", "\n", "\n", "", "paths", "=", "create_paths", "(", "s", ",", "a", ",", "r", ",", "d", ",", "max_path_length", ")", "\n", "\n", "return", "paths", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions.policy": [[156, 163], ["model_rollout_functions._model_rollout", "dict"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions._model_rollout"], ["def", "policy", "(", "dynamics_model", ",", "policy", ",", "start_states", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "_model_rollout", "(", "\n", "dynamics_model", ",", "\n", "start_states", ",", "\n", "_get_policy_actions", ",", "\n", "action_kwargs", "=", "dict", "(", "policy", "=", "policy", ")", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions.open_loop_actions": [[166, 173], ["model_rollout_functions._model_rollout", "dict"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions._model_rollout"], ["", "def", "open_loop_actions", "(", "dynamics_model", ",", "actions", ",", "start_states", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "_model_rollout", "(", "\n", "dynamics_model", ",", "\n", "start_states", ",", "\n", "_get_open_loop_actions", ",", "\n", "action_kwargs", "=", "dict", "(", "actions", "=", "actions", ")", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions.policy_latent": [[176, 183], ["model_rollout_functions._model_rollout", "dict"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions._model_rollout"], ["", "def", "policy_latent", "(", "dynamics_model", ",", "policy", ",", "start_states", ",", "latents", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "_model_rollout", "(", "\n", "dynamics_model", ",", "\n", "start_states", ",", "\n", "_get_policy_latent_actions", ",", "\n", "action_kwargs", "=", "dict", "(", "policy", "=", "policy", ",", "latents", "=", "latents", ")", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions.policy_latent_prior": [[186, 193], ["model_rollout_functions._model_rollout", "dict"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions._model_rollout"], ["", "def", "policy_latent_prior", "(", "dynamics_model", ",", "policy", ",", "latent_prior", ",", "start_states", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "_model_rollout", "(", "\n", "dynamics_model", ",", "\n", "start_states", ",", "\n", "_get_policy_latent_prior_actions", ",", "\n", "action_kwargs", "=", "dict", "(", "policy", "=", "policy", ",", "latent_prior", "=", "latent_prior", ")", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions._rollout_with_disagreement": [[196, 212], ["kwargs.get", "torch.cat", "dynamics_model.sample_with_disagreement", "torch.cat.append", "model_rollout_functions.policy", "model_rollout_functions.policy_latent", "model_rollout_functions.policy_latent_prior", "model_rollout_functions.open_loop_actions"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.dynamics_models.probabilistic_ensemble.ProbabilisticEnsemble.sample_with_disagreement", "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions.policy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions.policy_latent", "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions.policy_latent_prior", "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions.open_loop_actions"], ["", "def", "_rollout_with_disagreement", "(", "base_rollout_func", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "disagreement_type", "=", "kwargs", ".", "get", "(", "'disagreement_type'", ",", "'mean'", ")", "\n", "\n", "disagreements", "=", "[", "]", "\n", "\n", "def", "sample_with_disagreement", "(", "dynamics_model", ",", "state_actions", ",", "t", ")", ":", "\n", "# note that disagreement has shape (num_rollouts, 1), e.g. it is unsqueezed", "\n", "        ", "transitions", ",", "disagreement", "=", "dynamics_model", ".", "sample_with_disagreement", "(", "\n", "state_actions", ",", "disagreement_type", "=", "disagreement_type", ")", "\n", "disagreements", ".", "append", "(", "disagreement", ")", "\n", "return", "transitions", "\n", "\n", "", "paths", "=", "base_rollout_func", "(", "sample_from_model", "=", "sample_with_disagreement", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "disagreements", "=", "torch", ".", "cat", "(", "disagreements", ",", "dim", "=", "-", "1", ")", "\n", "\n", "return", "paths", ",", "disagreements", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions.policy_with_disagreement": [[214, 216], ["model_rollout_functions._rollout_with_disagreement"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions._rollout_with_disagreement"], ["", "def", "policy_with_disagreement", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "_rollout_with_disagreement", "(", "policy", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions.policy_latent_with_disagreement": [[218, 220], ["model_rollout_functions._rollout_with_disagreement"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions._rollout_with_disagreement"], ["", "def", "policy_latent_with_disagreement", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "_rollout_with_disagreement", "(", "policy_latent", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions.policy_latent_prior_with_disagreement": [[222, 224], ["model_rollout_functions._rollout_with_disagreement"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions._rollout_with_disagreement"], ["", "def", "policy_latent_prior_with_disagreement", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "_rollout_with_disagreement", "(", "policy_latent_prior", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions.open_loop_with_disagreement": [[226, 228], ["model_rollout_functions._rollout_with_disagreement"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.model_rollout_functions._rollout_with_disagreement"], ["", "def", "open_loop_with_disagreement", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "_rollout_with_disagreement", "(", "open_loop_actions", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.path_functions.calculate_baselines": [[12, 21], ["lifelong_rl.from_numpy", "torch.squeeze", "lifelong_rl.get_numpy", "numpy.concatenate", "value_func"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.loop_config.value_func"], ["def", "calculate_baselines", "(", "paths", ",", "value_func", ")", ":", "\n", "    ", "for", "path", "in", "paths", ":", "\n", "        ", "obs", "=", "ptu", ".", "from_numpy", "(", "np", ".", "concatenate", "(", "\n", "[", "path", "[", "'observations'", "]", ",", "path", "[", "'next_observations'", "]", "[", "-", "1", ":", "]", "]", ",", "axis", "=", "0", "\n", ")", ")", "\n", "values", "=", "torch", ".", "squeeze", "(", "value_func", "(", "obs", ")", ",", "dim", "=", "-", "1", ")", "\n", "path", "[", "'baselines'", "]", "=", "ptu", ".", "get_numpy", "(", "values", ")", "\n", "if", "path", "[", "'terminals'", "]", "[", "-", "1", "]", ":", "\n", "            ", "path", "[", "'baselines'", "]", "[", "-", "1", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.path_functions.calculate_returns": [[23, 33], ["numpy.append", "path_functions.discount_cumsum", "len", "len"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.path_functions.discount_cumsum"], ["", "", "", "def", "calculate_returns", "(", "paths", ",", "discount", ")", ":", "\n", "    ", "for", "path", "in", "paths", ":", "\n", "        ", "rewards", ",", "dones", "=", "path", "[", "'rewards'", "]", ",", "path", "[", "'terminals'", "]", "\n", "if", "'baselines'", "in", "path", ":", "\n", "            ", "terminal_value", "=", "path", "[", "'baselines'", "]", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "terminal_value", "=", "0", "\n", "", "rewards", "=", "np", ".", "append", "(", "rewards", ",", "terminal_value", ")", "\n", "path", "[", "'returns'", "]", "=", "discount_cumsum", "(", "rewards", ",", "dones", ",", "discount", ")", "[", ":", "-", "1", "]", "\n", "assert", "len", "(", "path", "[", "'returns'", "]", ")", "==", "len", "(", "dones", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.path_functions.calculate_advantages": [[35, 57], ["numpy.append", "np.append.mean", "np.append.std", "path_functions.discount_cumsum", "len", "len"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.path_functions.discount_cumsum"], ["", "", "def", "calculate_advantages", "(", "paths", ",", "discount", ",", "gae_lambda", "=", "None", ",", "normalize", "=", "False", ")", ":", "\n", "    ", "total_advs", "=", "[", "]", "\n", "for", "path", "in", "paths", ":", "\n", "        ", "returns", "=", "path", "[", "'returns'", "]", "\n", "if", "'baselines'", "not", "in", "path", ":", "\n", "            ", "advantages", "=", "returns", "\n", "", "elif", "gae_lambda", "is", "None", ":", "\n", "            ", "advantages", "=", "returns", "-", "path", "[", "'baselines'", "]", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "rewards", ",", "baselines", ",", "dones", "=", "path", "[", "'rewards'", "]", ",", "path", "[", "'baselines'", "]", ",", "path", "[", "'terminals'", "]", "\n", "assert", "len", "(", "baselines", ")", "==", "len", "(", "rewards", ")", "+", "1", "\n", "td_deltas", "=", "rewards", "+", "discount", "*", "baselines", "[", "1", ":", "]", "-", "baselines", "[", ":", "-", "1", "]", "\n", "assert", "td_deltas", ".", "shape", "==", "rewards", ".", "shape", "\n", "advantages", "=", "discount_cumsum", "(", "td_deltas", ",", "dones", ",", "gae_lambda", "*", "discount", ")", "\n", "assert", "advantages", ".", "shape", "==", "rewards", ".", "shape", "\n", "", "path", "[", "'advantages'", "]", "=", "advantages", "\n", "if", "normalize", ":", "\n", "            ", "total_advs", "=", "np", ".", "append", "(", "total_advs", ",", "advantages", ")", "\n", "", "", "if", "normalize", ":", "\n", "        ", "mean", ",", "std", "=", "total_advs", ".", "mean", "(", ")", ",", "total_advs", ".", "std", "(", ")", "\n", "for", "path", "in", "paths", ":", "\n", "            ", "path", "[", "'advantages'", "]", "=", "(", "path", "[", "'advantages'", "]", "-", "mean", ")", "/", "(", "std", "+", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.path_functions.discount_cumsum": [[59, 65], ["numpy.zeros_like", "reversed", "range"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros_like"], ["", "", "", "def", "discount_cumsum", "(", "x", ",", "dones", ",", "gamma", ")", ":", "\n", "    ", "discount_cumsum", "=", "np", ".", "zeros_like", "(", "x", ")", "\n", "discount_cumsum", "[", "-", "1", "]", "=", "x", "[", "-", "1", "]", "\n", "for", "t", "in", "reversed", "(", "range", "(", "x", ".", "shape", "[", "0", "]", "-", "1", ")", ")", ":", "\n", "        ", "discount_cumsum", "[", "t", "]", "=", "x", "[", "t", "]", "+", "gamma", "*", "discount_cumsum", "[", "t", "+", "1", "]", "*", "(", "1", "-", "dones", "[", "t", "]", ")", "\n", "", "return", "discount_cumsum", "\n", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.rollout_functions.multitask_rollout": [[4, 73], ["agent.reset", "env.reset", "numpy.array", "numpy.array", "numpy.array", "dict", "env.render", "dict_obs.append", "numpy.hstack", "agent.get_action", "env.step", "np.array.append", "rewards.append", "terminals.append", "np.expand_dims.append", "np.array.append", "dict_next_obs.append", "agent_infos.append", "env_infos.append", "len", "numpy.expand_dims", "env.render", "numpy.array().reshape", "numpy.array().reshape", "numpy.repeat", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.reset", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.reset", "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.ProxyEnv.render", "home.repos.pwc.inspect_result.kzl_lifelong_rl.base.latent_prior_policy.PriorLatentPolicy.get_action", "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.step", "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.ProxyEnv.render"], ["def", "multitask_rollout", "(", "\n", "env", ",", "\n", "agent", ",", "\n", "max_path_length", "=", "np", ".", "inf", ",", "\n", "render", "=", "False", ",", "\n", "render_kwargs", "=", "None", ",", "\n", "observation_key", "=", "None", ",", "\n", "desired_goal_key", "=", "None", ",", "\n", "get_action_kwargs", "=", "None", ",", "\n", "return_dict_obs", "=", "False", ",", "\n", ")", ":", "\n", "    ", "if", "render_kwargs", "is", "None", ":", "\n", "        ", "render_kwargs", "=", "{", "}", "\n", "", "if", "get_action_kwargs", "is", "None", ":", "\n", "        ", "get_action_kwargs", "=", "{", "}", "\n", "", "dict_obs", "=", "[", "]", "\n", "dict_next_obs", "=", "[", "]", "\n", "observations", "=", "[", "]", "\n", "actions", "=", "[", "]", "\n", "rewards", "=", "[", "]", "\n", "terminals", "=", "[", "]", "\n", "agent_infos", "=", "[", "]", "\n", "env_infos", "=", "[", "]", "\n", "next_observations", "=", "[", "]", "\n", "path_length", "=", "0", "\n", "agent", ".", "reset", "(", ")", "\n", "o", "=", "env", ".", "reset", "(", ")", "\n", "if", "render", ":", "\n", "        ", "env", ".", "render", "(", "**", "render_kwargs", ")", "\n", "", "goal", "=", "o", "[", "desired_goal_key", "]", "\n", "while", "path_length", "<", "max_path_length", ":", "\n", "        ", "dict_obs", ".", "append", "(", "o", ")", "\n", "if", "observation_key", ":", "\n", "            ", "o", "=", "o", "[", "observation_key", "]", "\n", "", "new_obs", "=", "np", ".", "hstack", "(", "(", "o", ",", "goal", ")", ")", "\n", "a", ",", "agent_info", "=", "agent", ".", "get_action", "(", "new_obs", ",", "**", "get_action_kwargs", ")", "\n", "next_o", ",", "r", ",", "d", ",", "env_info", "=", "env", ".", "step", "(", "a", ")", "\n", "if", "render", ":", "\n", "            ", "env", ".", "render", "(", "**", "render_kwargs", ")", "\n", "", "observations", ".", "append", "(", "o", ")", "\n", "rewards", ".", "append", "(", "r", ")", "\n", "terminals", ".", "append", "(", "d", ")", "\n", "actions", ".", "append", "(", "a", ")", "\n", "next_observations", ".", "append", "(", "next_o", ")", "\n", "dict_next_obs", ".", "append", "(", "next_o", ")", "\n", "agent_infos", ".", "append", "(", "agent_info", ")", "\n", "env_infos", ".", "append", "(", "env_info", ")", "\n", "path_length", "+=", "1", "\n", "if", "d", ":", "\n", "            ", "break", "\n", "", "o", "=", "next_o", "\n", "", "actions", "=", "np", ".", "array", "(", "actions", ")", "\n", "if", "len", "(", "actions", ".", "shape", ")", "==", "1", ":", "\n", "        ", "actions", "=", "np", ".", "expand_dims", "(", "actions", ",", "1", ")", "\n", "", "observations", "=", "np", ".", "array", "(", "observations", ")", "\n", "next_observations", "=", "np", ".", "array", "(", "next_observations", ")", "\n", "if", "return_dict_obs", ":", "\n", "        ", "observations", "=", "dict_obs", "\n", "next_observations", "=", "dict_next_obs", "\n", "", "return", "dict", "(", "\n", "observations", "=", "observations", ",", "\n", "actions", "=", "actions", ",", "\n", "rewards", "=", "np", ".", "array", "(", "rewards", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "\n", "next_observations", "=", "next_observations", ",", "\n", "terminals", "=", "np", ".", "array", "(", "terminals", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "\n", "agent_infos", "=", "agent_infos", ",", "\n", "env_infos", "=", "env_infos", ",", "\n", "goals", "=", "np", ".", "repeat", "(", "goal", "[", "None", "]", ",", "path_length", ",", "0", ")", ",", "\n", "full_observations", "=", "dict_obs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.rollout_functions.rollout": [[76, 148], ["env.reset", "agent.reset", "numpy.array", "numpy.array", "numpy.vstack", "dict", "env.render", "agent.get_action", "env.step", "np.expand_dims.append", "rewards.append", "terminals.append", "np.expand_dims.append", "agent_infos.append", "env_infos.append", "len", "numpy.expand_dims", "len", "numpy.expand_dims", "numpy.array", "env.render", "numpy.expand_dims", "numpy.array().reshape", "numpy.array().reshape", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.reset", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.reset", "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.ProxyEnv.render", "home.repos.pwc.inspect_result.kzl_lifelong_rl.base.latent_prior_policy.PriorLatentPolicy.get_action", "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.step", "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.ProxyEnv.render"], ["", "def", "rollout", "(", "\n", "env", ",", "\n", "agent", ",", "\n", "max_path_length", "=", "np", ".", "inf", ",", "\n", "render", "=", "False", ",", "\n", "render_kwargs", "=", "None", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    The following value for the following keys will be a 2D array, with the\n    first dimension corresponding to the time dimension.\n     - observations\n     - actions\n     - rewards\n     - next_observations\n     - terminals\n\n    The next two elements will be lists of dictionaries, with the index into\n    the list being the index into the time\n     - agent_infos\n     - env_infos\n    \"\"\"", "\n", "if", "render_kwargs", "is", "None", ":", "\n", "        ", "render_kwargs", "=", "{", "}", "\n", "", "observations", "=", "[", "]", "\n", "actions", "=", "[", "]", "\n", "rewards", "=", "[", "]", "\n", "terminals", "=", "[", "]", "\n", "agent_infos", "=", "[", "]", "\n", "env_infos", "=", "[", "]", "\n", "o", "=", "env", ".", "reset", "(", ")", "\n", "agent", ".", "reset", "(", ")", "\n", "next_o", "=", "None", "\n", "path_length", "=", "0", "\n", "if", "render", ":", "\n", "        ", "env", ".", "render", "(", "**", "render_kwargs", ")", "\n", "", "while", "path_length", "<", "max_path_length", ":", "\n", "        ", "a", ",", "agent_info", "=", "agent", ".", "get_action", "(", "o", ")", "\n", "next_o", ",", "r", ",", "d", ",", "env_info", "=", "env", ".", "step", "(", "a", ")", "\n", "observations", ".", "append", "(", "o", ")", "\n", "rewards", ".", "append", "(", "r", ")", "\n", "terminals", ".", "append", "(", "d", ")", "\n", "actions", ".", "append", "(", "a", ")", "\n", "agent_infos", ".", "append", "(", "agent_info", ")", "\n", "env_infos", ".", "append", "(", "env_info", ")", "\n", "path_length", "+=", "1", "\n", "if", "d", ":", "\n", "            ", "break", "\n", "", "o", "=", "next_o", "\n", "if", "render", ":", "\n", "            ", "env", ".", "render", "(", "**", "render_kwargs", ")", "\n", "\n", "", "", "actions", "=", "np", ".", "array", "(", "actions", ")", "\n", "if", "len", "(", "actions", ".", "shape", ")", "==", "1", ":", "\n", "        ", "actions", "=", "np", ".", "expand_dims", "(", "actions", ",", "1", ")", "\n", "", "observations", "=", "np", ".", "array", "(", "observations", ")", "\n", "if", "len", "(", "observations", ".", "shape", ")", "==", "1", ":", "\n", "        ", "observations", "=", "np", ".", "expand_dims", "(", "observations", ",", "1", ")", "\n", "next_o", "=", "np", ".", "array", "(", "[", "next_o", "]", ")", "\n", "", "next_observations", "=", "np", ".", "vstack", "(", "\n", "(", "\n", "observations", "[", "1", ":", ",", ":", "]", ",", "\n", "np", ".", "expand_dims", "(", "next_o", ",", "0", ")", "\n", ")", "\n", ")", "\n", "return", "dict", "(", "\n", "observations", "=", "observations", ",", "\n", "actions", "=", "actions", ",", "\n", "rewards", "=", "np", ".", "array", "(", "rewards", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "\n", "next_observations", "=", "next_observations", ",", "\n", "terminals", "=", "np", ".", "array", "(", "terminals", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "\n", "agent_infos", "=", "agent_infos", ",", "\n", "env_infos", "=", "env_infos", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.rollout_functions.rollout_with_latent": [[151, 229], ["env.reset", "agent.reset", "numpy.array", "numpy.array", "numpy.vstack", "dict", "env.render", "agent.get_action", "env.step", "np.expand_dims.append", "rewards.append", "terminals.append", "np.expand_dims.append", "agent_infos.append", "env_infos.append", "latents.append", "len", "numpy.expand_dims", "len", "numpy.expand_dims", "numpy.array", "agent.sample_latent", "agent.get_current_latent", "env.render", "numpy.expand_dims", "numpy.array().reshape", "numpy.array().reshape", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.reset", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.reset", "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.ProxyEnv.render", "home.repos.pwc.inspect_result.kzl_lifelong_rl.base.latent_prior_policy.PriorLatentPolicy.get_action", "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.step", "home.repos.pwc.inspect_result.kzl_lifelong_rl.base.latent_prior_policy.PriorLatentPolicy.sample_latent", "home.repos.pwc.inspect_result.kzl_lifelong_rl.base.latent_prior_policy.PriorLatentPolicy.get_current_latent", "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.ProxyEnv.render"], ["", "def", "rollout_with_latent", "(", "\n", "env", ",", "\n", "agent", ",", "\n", "max_path_length", "=", "np", ".", "inf", ",", "\n", "render", "=", "False", ",", "\n", "render_kwargs", "=", "None", ",", "\n", "sample_latent_every", "=", "None", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    The following value for the following keys will be a 2D array, with the\n    first dimension corresponding to the time dimension.\n     - observations\n     - actions\n     - rewards\n     - next_observations\n     - terminals\n\n    The next two elements will be lists of dictionaries, with the index into\n    the list being the index into the time\n     - agent_infos\n     - env_infos\n    \"\"\"", "\n", "if", "render_kwargs", "is", "None", ":", "\n", "        ", "render_kwargs", "=", "{", "}", "\n", "", "observations", "=", "[", "]", "\n", "actions", "=", "[", "]", "\n", "rewards", "=", "[", "]", "\n", "terminals", "=", "[", "]", "\n", "agent_infos", "=", "[", "]", "\n", "env_infos", "=", "[", "]", "\n", "latents", "=", "[", "]", "\n", "o", "=", "env", ".", "reset", "(", ")", "\n", "agent", ".", "reset", "(", ")", "\n", "next_o", "=", "None", "\n", "path_length", "=", "0", "\n", "if", "render", ":", "\n", "        ", "env", ".", "render", "(", "**", "render_kwargs", ")", "\n", "", "while", "path_length", "<", "max_path_length", ":", "\n", "        ", "if", "sample_latent_every", "is", "not", "None", "and", "path_length", "%", "sample_latent_every", "==", "0", ":", "\n", "            ", "agent", ".", "sample_latent", "(", ")", "\n", "", "a", ",", "agent_info", "=", "agent", ".", "get_action", "(", "o", ")", "\n", "next_o", ",", "r", ",", "d", ",", "env_info", "=", "env", ".", "step", "(", "a", ")", "\n", "observations", ".", "append", "(", "o", ")", "\n", "rewards", ".", "append", "(", "r", ")", "\n", "terminals", ".", "append", "(", "d", ")", "\n", "actions", ".", "append", "(", "a", ")", "\n", "agent_infos", ".", "append", "(", "agent_info", ")", "\n", "env_infos", ".", "append", "(", "env_info", ")", "\n", "latents", ".", "append", "(", "agent", ".", "get_current_latent", "(", ")", ")", "\n", "path_length", "+=", "1", "\n", "if", "d", ":", "\n", "            ", "break", "\n", "", "o", "=", "next_o", "\n", "if", "render", ":", "\n", "            ", "env", ".", "render", "(", "**", "render_kwargs", ")", "\n", "\n", "", "", "actions", "=", "np", ".", "array", "(", "actions", ")", "\n", "if", "len", "(", "actions", ".", "shape", ")", "==", "1", ":", "\n", "        ", "actions", "=", "np", ".", "expand_dims", "(", "actions", ",", "1", ")", "\n", "", "observations", "=", "np", ".", "array", "(", "observations", ")", "\n", "if", "len", "(", "observations", ".", "shape", ")", "==", "1", ":", "\n", "        ", "observations", "=", "np", ".", "expand_dims", "(", "observations", ",", "1", ")", "\n", "next_o", "=", "np", ".", "array", "(", "[", "next_o", "]", ")", "\n", "", "next_observations", "=", "np", ".", "vstack", "(", "\n", "(", "\n", "observations", "[", "1", ":", ",", ":", "]", ",", "\n", "np", ".", "expand_dims", "(", "next_o", ",", "0", ")", "\n", ")", "\n", ")", "\n", "return", "dict", "(", "\n", "observations", "=", "observations", ",", "\n", "actions", "=", "actions", ",", "\n", "rewards", "=", "np", ".", "array", "(", "rewards", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "\n", "next_observations", "=", "next_observations", ",", "\n", "terminals", "=", "np", ".", "array", "(", "terminals", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "\n", "agent_infos", "=", "agent_infos", ",", "\n", "env_infos", "=", "env_infos", ",", "\n", "latents", "=", "np", ".", "array", "(", "latents", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.replay_buffer.ReplayBuffer.add_sample": [[9, 16], ["None"], "methods", ["None"], ["@", "abc", ".", "abstractmethod", "\n", "def", "add_sample", "(", "self", ",", "observation", ",", "action", ",", "reward", ",", "next_observation", ",", "\n", "terminal", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Add a transition tuple.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.replay_buffer.ReplayBuffer.terminate_episode": [[17, 25], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "terminate_episode", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Let the replay buffer know that the episode has terminated in case some\n        special book-keeping has to happen.\n        :return:\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.replay_buffer.ReplayBuffer.num_steps_can_sample": [[26, 32], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "num_steps_can_sample", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        :return: # of unique items that can be sampled.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.replay_buffer.ReplayBuffer.add_path": [[33, 72], ["enumerate", "replay_buffer.ReplayBuffer.terminate_episode", "zip", "replay_buffer.ReplayBuffer.add_sample"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.terminate_episode", "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.add_sample"], ["", "def", "add_path", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"\n        Add a path to the replay buffer.\n\n        This default implementation naively goes through every step, but you\n        may want to optimize this.\n\n        NOTE: You should NOT call \"terminate_episode\" after calling add_path.\n        It's assumed that this function handles the episode termination.\n\n        :param path: Dict like one outputted by lifelong_rl.samplers.util.rollout\n        \"\"\"", "\n", "for", "i", ",", "(", "\n", "obs", ",", "\n", "action", ",", "\n", "reward", ",", "\n", "next_obs", ",", "\n", "terminal", ",", "\n", "agent_info", ",", "\n", "env_info", "\n", ")", "in", "enumerate", "(", "zip", "(", "\n", "path", "[", "\"observations\"", "]", ",", "\n", "path", "[", "\"actions\"", "]", ",", "\n", "path", "[", "\"rewards\"", "]", ",", "\n", "path", "[", "\"next_observations\"", "]", ",", "\n", "path", "[", "\"terminals\"", "]", ",", "\n", "path", "[", "\"agent_infos\"", "]", ",", "\n", "path", "[", "\"env_infos\"", "]", ",", "\n", ")", ")", ":", "\n", "            ", "self", ".", "add_sample", "(", "\n", "observation", "=", "obs", ",", "\n", "action", "=", "action", ",", "\n", "reward", "=", "reward", ",", "\n", "next_observation", "=", "next_obs", ",", "\n", "terminal", "=", "terminal", ",", "\n", "agent_info", "=", "agent_info", ",", "\n", "env_info", "=", "env_info", ",", "\n", ")", "\n", "", "self", ".", "terminate_episode", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.replay_buffer.ReplayBuffer.add_paths": [[73, 76], ["replay_buffer.ReplayBuffer.add_path"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.replay_buffer.ReplayBuffer.add_path"], ["", "def", "add_paths", "(", "self", ",", "paths", ")", ":", "\n", "        ", "for", "path", "in", "paths", ":", "\n", "            ", "self", ".", "add_path", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.replay_buffer.ReplayBuffer.random_batch": [[77, 85], ["None"], "methods", ["None"], ["", "", "@", "abc", ".", "abstractmethod", "\n", "def", "random_batch", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "\"\"\"\n        Return a batch of size `batch_size`.\n        :param batch_size:\n        :return:\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.replay_buffer.ReplayBuffer.get_diagnostics": [[86, 88], ["None"], "methods", ["None"], ["", "def", "get_diagnostics", "(", "self", ")", ":", "\n", "        ", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.replay_buffer.ReplayBuffer.get_snapshot": [[89, 91], ["None"], "methods", ["None"], ["", "def", "get_snapshot", "(", "self", ")", ":", "\n", "        ", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.replay_buffer.ReplayBuffer.end_epoch": [[92, 94], ["None"], "methods", ["None"], ["", "def", "end_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.env_replay_buffer.EnvReplayBuffer.__init__": [[11, 42], ["isinstance", "lifelong_rl.data_management.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.__init__", "hasattr", "dict", "lifelong_rl.envs.env_utils.get_dim", "lifelong_rl.envs.env_utils.get_dim"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__", "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.env_utils.get_dim", "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.env_utils.get_dim"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "max_replay_buffer_size", ",", "\n", "env", ",", "\n", "env_info_sizes", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        :param max_replay_buffer_size:\n        :param env:\n        \"\"\"", "\n", "self", ".", "env", "=", "env", "\n", "self", ".", "_ob_space", "=", "env", ".", "observation_space", "\n", "self", ".", "_action_space", "=", "env", ".", "action_space", "\n", "self", ".", "_meta_infos", "=", "[", "]", "\n", "\n", "if", "env_info_sizes", "is", "None", ":", "\n", "            ", "if", "hasattr", "(", "env", ",", "'info_sizes'", ")", ":", "\n", "                ", "env_info_sizes", "=", "env", ".", "info_sizes", "\n", "", "else", ":", "\n", "                ", "env_info_sizes", "=", "dict", "(", ")", "\n", "\n", "", "", "if", "isinstance", "(", "self", ".", "_ob_space", ",", "gym", ".", "spaces", ".", "Box", ")", ":", "\n", "            ", "self", ".", "_ob_shape", "=", "self", ".", "_ob_space", ".", "shape", "\n", "", "else", ":", "\n", "            ", "self", ".", "_ob_shape", "=", "None", "\n", "\n", "", "super", "(", ")", ".", "__init__", "(", "\n", "max_replay_buffer_size", "=", "max_replay_buffer_size", ",", "\n", "observation_dim", "=", "get_dim", "(", "self", ".", "_ob_space", ")", ",", "\n", "action_dim", "=", "get_dim", "(", "self", ".", "_action_space", ")", ",", "\n", "env_info_sizes", "=", "env_info_sizes", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.env_replay_buffer.EnvReplayBuffer.obs_preproc": [[44, 50], ["len", "len", "numpy.reshape", "numpy.reshape"], "methods", ["None"], ["", "def", "obs_preproc", "(", "self", ",", "obs", ")", ":", "\n", "        ", "if", "len", "(", "obs", ".", "shape", ")", ">", "len", "(", "self", ".", "_ob_space", ".", "shape", ")", ":", "\n", "            ", "obs", "=", "np", ".", "reshape", "(", "obs", ",", "(", "obs", ".", "shape", "[", "0", "]", ",", "self", ".", "_observation_dim", ")", ")", "\n", "", "else", ":", "\n", "            ", "obs", "=", "np", ".", "reshape", "(", "obs", ",", "(", "self", ".", "_observation_dim", ",", ")", ")", "\n", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.env_replay_buffer.EnvReplayBuffer.obs_postproc": [[51, 59], ["len", "numpy.reshape", "numpy.reshape"], "methods", ["None"], ["", "def", "obs_postproc", "(", "self", ",", "obs", ")", ":", "\n", "        ", "if", "self", ".", "_ob_shape", "is", "None", ":", "\n", "            ", "return", "obs", "\n", "", "if", "len", "(", "obs", ".", "shape", ")", ">", "1", ":", "\n", "            ", "obs", "=", "np", ".", "reshape", "(", "obs", ",", "(", "obs", ".", "shape", "[", "0", "]", ",", "*", "self", ".", "_ob_shape", ")", ")", "\n", "", "else", ":", "\n", "            ", "obs", "=", "np", ".", "reshape", "(", "obs", ",", "self", ".", "_ob_shape", ")", "\n", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.env_replay_buffer.EnvReplayBuffer.add_sample": [[60, 79], ["hasattr", "isinstance", "super().add_sample", "env_replay_buffer.EnvReplayBuffer._meta_infos.append", "dict", "numpy.zeros", "env_replay_buffer.EnvReplayBuffer.env.get_meta_infos"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.add_sample", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros", "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.get_meta_infos"], ["", "def", "add_sample", "(", "self", ",", "observation", ",", "action", ",", "reward", ",", "terminal", ",", "\n", "next_observation", ",", "env_info", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ".", "env", ",", "'get_meta_infos'", ")", ":", "\n", "            ", "self", ".", "_meta_infos", ".", "append", "(", "self", ".", "env", ".", "get_meta_infos", "(", ")", ")", "\n", "", "if", "env_info", "is", "None", ":", "\n", "            ", "env_info", "=", "dict", "(", ")", "\n", "", "if", "isinstance", "(", "self", ".", "_action_space", ",", "Discrete", ")", ":", "\n", "            ", "new_action", "=", "np", ".", "zeros", "(", "self", ".", "_action_dim", ")", "\n", "new_action", "[", "action", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "new_action", "=", "action", "\n", "", "return", "super", "(", ")", ".", "add_sample", "(", "\n", "observation", "=", "observation", ",", "\n", "action", "=", "new_action", ",", "\n", "reward", "=", "reward", ",", "\n", "next_observation", "=", "next_observation", ",", "\n", "terminal", "=", "terminal", ",", "\n", "env_info", "=", "env_info", ",", "\n", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.env_replay_buffer.EnvReplayBuffer.get_snapshot": [[81, 85], ["super().get_snapshot"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.get_snapshot"], ["", "def", "get_snapshot", "(", "self", ")", ":", "\n", "        ", "snapshot", "=", "super", "(", ")", ".", "get_snapshot", "(", ")", "\n", "snapshot", "[", "'meta_infos'", "]", "=", "self", ".", "_meta_infos", "\n", "return", "snapshot", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.mujoco_replay_buffer.MujocoReplayBuffer.__init__": [[11, 34], ["lifelong_rl.data_management.replay_buffers.env_replay_buffer.EnvReplayBuffer.__init__", "numpy.zeros", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "max_replay_buffer_size", ",", "\n", "env", ",", "\n", "env_info_sizes", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\"\n        :param max_replay_buffer_size:\n        :param env:\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "max_replay_buffer_size", "=", "max_replay_buffer_size", ",", "\n", "env", "=", "env", ",", "\n", "env_info_sizes", "=", "env_info_sizes", "\n", ")", "\n", "\n", "self", ".", "body_xpos_shape", "=", "env", ".", "sim", ".", "data", ".", "body_xpos", ".", "shape", "\n", "self", ".", "_body_xpos", "=", "np", ".", "zeros", "(", "(", "max_replay_buffer_size", ",", "*", "self", ".", "body_xpos_shape", ")", ")", "\n", "\n", "self", ".", "qpos_shape", "=", "env", ".", "sim", ".", "data", ".", "qpos", ".", "shape", "\n", "self", ".", "_qpos", "=", "np", ".", "zeros", "(", "(", "max_replay_buffer_size", ",", "*", "self", ".", "qpos_shape", ")", ")", "\n", "\n", "self", ".", "env_states", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.mujoco_replay_buffer.MujocoReplayBuffer.add_sample": [[35, 50], ["super().add_sample", "len", "mujoco_replay_buffer.MujocoReplayBuffer.max_replay_buffer_size", "mujoco_replay_buffer.MujocoReplayBuffer.env.sim.get_state", "mujoco_replay_buffer.MujocoReplayBuffer.env_states.append", "copy.deepcopy", "mujoco_replay_buffer.MujocoReplayBuffer.env.sim.get_state"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.add_sample", "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.max_replay_buffer_size"], ["", "def", "add_sample", "(", "self", ",", "observation", ",", "action", ",", "reward", ",", "terminal", ",", "\n", "next_observation", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_body_xpos", "[", "self", ".", "_top", "]", "=", "self", ".", "env", ".", "sim", ".", "data", ".", "body_xpos", "\n", "self", ".", "_qpos", "[", "self", ".", "_top", "]", "=", "self", ".", "env", ".", "sim", ".", "data", ".", "qpos", "\n", "if", "len", "(", "self", ".", "env_states", ")", ">=", "self", ".", "max_replay_buffer_size", "(", ")", ":", "\n", "            ", "self", ".", "env_states", "[", "self", ".", "_top", "]", "=", "self", ".", "env", ".", "sim", ".", "get_state", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "env_states", ".", "append", "(", "copy", ".", "deepcopy", "(", "self", ".", "env", ".", "sim", ".", "get_state", "(", ")", ")", ")", "\n", "", "return", "super", "(", ")", ".", "add_sample", "(", "\n", "observation", "=", "observation", ",", "\n", "action", "=", "action", ",", "\n", "reward", "=", "reward", ",", "\n", "next_observation", "=", "next_observation", ",", "\n", "terminal", "=", "terminal", ",", "\n", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.mujoco_replay_buffer.MujocoReplayBuffer.get_snapshot": [[52, 60], ["super().get_snapshot", "super().get_snapshot.update", "dict"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.get_snapshot"], ["", "def", "get_snapshot", "(", "self", ")", ":", "\n", "        ", "snapshot", "=", "super", "(", ")", ".", "get_snapshot", "(", ")", "\n", "snapshot", ".", "update", "(", "dict", "(", "\n", "body_xpos", "=", "self", ".", "_body_xpos", "[", ":", "self", ".", "_size", "]", ",", "\n", "qpos", "=", "self", ".", "_qpos", "[", ":", "self", ".", "_size", "]", ",", "\n", "env_states", "=", "self", ".", "env_states", "[", ":", "self", ".", "_size", "]", ",", "\n", ")", ")", "\n", "return", "snapshot", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.mujoco_replay_buffer.MujocoReplayBuffer.visualize_agent": [[61, 63], ["lifelong_rl.util.visualize_mujoco.visualize_mujoco_from_states"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.util.visualize_mujoco.visualize_mujoco_from_states"], ["", "def", "visualize_agent", "(", "self", ",", "start_idx", ",", "end_idx", ")", ":", "\n", "        ", "visualize_mujoco_from_states", "(", "self", ".", "env", ",", "self", ".", "env_states", "[", "start_idx", ":", "end_idx", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.__init__": [[24, 57], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "env_info_sizes.items", "env_info_sizes.keys", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "max_replay_buffer_size", ",", "\n", "observation_dim", ",", "\n", "action_dim", ",", "\n", "env_info_sizes", ",", "\n", ")", ":", "\n", "        ", "self", ".", "_observation_dim", "=", "observation_dim", "\n", "self", ".", "_action_dim", "=", "action_dim", "\n", "self", ".", "_max_replay_buffer_size", "=", "max_replay_buffer_size", "\n", "self", ".", "_observations", "=", "np", ".", "zeros", "(", "(", "max_replay_buffer_size", ",", "observation_dim", ")", ")", "\n", "# It's a bit memory inefficient to save the observations twice,", "\n", "# but it makes the code *much* easier since you no longer have to", "\n", "# worry about termination conditions.", "\n", "self", ".", "_next_obs", "=", "np", ".", "zeros", "(", "(", "max_replay_buffer_size", ",", "observation_dim", ")", ")", "\n", "self", ".", "_actions", "=", "np", ".", "zeros", "(", "(", "max_replay_buffer_size", ",", "action_dim", ")", ")", "\n", "# Make everything a 2D np array to make it easier for other code to", "\n", "# reason about the shape of the data", "\n", "self", ".", "_rewards", "=", "np", ".", "zeros", "(", "(", "max_replay_buffer_size", ",", "1", ")", ")", "\n", "# self._terminals[i] = a terminal was received at time i", "\n", "self", ".", "_terminals", "=", "np", ".", "zeros", "(", "(", "max_replay_buffer_size", ",", "1", ")", ",", "dtype", "=", "'uint8'", ")", "\n", "self", ".", "_logprobs", "=", "np", ".", "zeros", "(", "(", "max_replay_buffer_size", ",", "1", ")", ")", "\n", "# Define self._env_infos[key][i] to be the return value of env_info[key]", "\n", "# at time i", "\n", "self", ".", "_env_infos", "=", "{", "}", "\n", "for", "key", ",", "size", "in", "env_info_sizes", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "_env_infos", "[", "key", "]", "=", "np", ".", "zeros", "(", "(", "max_replay_buffer_size", ",", "size", ")", ")", "\n", "", "self", ".", "_env_info_keys", "=", "env_info_sizes", ".", "keys", "(", ")", "\n", "\n", "self", ".", "_top", "=", "0", "\n", "self", ".", "_size", "=", "0", "\n", "\n", "self", ".", "total_entries", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.obs_preproc": [[58, 60], ["None"], "methods", ["None"], ["", "def", "obs_preproc", "(", "self", ",", "obs", ")", ":", "\n", "        ", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.obs_postproc": [[61, 63], ["None"], "methods", ["None"], ["", "def", "obs_postproc", "(", "self", ",", "obs", ")", ":", "\n", "        ", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.add_sample": [[64, 75], ["simple_replay_buffer.SimpleReplayBuffer.obs_preproc", "simple_replay_buffer.SimpleReplayBuffer.obs_preproc", "simple_replay_buffer.SimpleReplayBuffer._advance"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.obs_preproc", "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.obs_preproc", "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer._advance"], ["", "def", "add_sample", "(", "self", ",", "observation", ",", "action", ",", "reward", ",", "terminal", ",", "\n", "next_observation", ",", "env_info", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_observations", "[", "self", ".", "_top", "]", "=", "self", ".", "obs_preproc", "(", "observation", ")", "\n", "self", ".", "_actions", "[", "self", ".", "_top", "]", "=", "action", "\n", "self", ".", "_rewards", "[", "self", ".", "_top", "]", "=", "reward", "\n", "self", ".", "_terminals", "[", "self", ".", "_top", "]", "=", "terminal", "\n", "self", ".", "_next_obs", "[", "self", ".", "_top", "]", "=", "self", ".", "obs_preproc", "(", "next_observation", ")", "\n", "\n", "for", "key", "in", "self", ".", "_env_info_keys", ":", "\n", "            ", "self", ".", "_env_infos", "[", "key", "]", "[", "self", ".", "_top", "]", "=", "env_info", "[", "key", "]", "\n", "", "self", ".", "_advance", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.add_sample_with_logprob": [[76, 80], ["simple_replay_buffer.SimpleReplayBuffer.add_sample"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.add_sample"], ["", "def", "add_sample_with_logprob", "(", "self", ",", "observation", ",", "action", ",", "reward", ",", "terminal", ",", "\n", "next_observation", ",", "env_info", ",", "logprob", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_logprobs", "[", "self", ".", "_top", "]", "=", "logprob", "\n", "self", ".", "add_sample", "(", "observation", ",", "action", ",", "reward", ",", "terminal", ",", "next_observation", ",", "env_info", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.get_transitions": [[81, 89], ["numpy.concatenate"], "methods", ["None"], ["", "def", "get_transitions", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "[", "\n", "self", ".", "_observations", "[", ":", "self", ".", "_size", "]", ",", "\n", "self", ".", "_actions", "[", ":", "self", ".", "_size", "]", ",", "\n", "self", ".", "_rewards", "[", ":", "self", ".", "_size", "]", ",", "\n", "self", ".", "_terminals", "[", ":", "self", ".", "_size", "]", ",", "\n", "self", ".", "_next_obs", "[", ":", "self", ".", "_size", "]", ",", "\n", "]", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.get_logprobs": [[90, 92], ["simple_replay_buffer.SimpleReplayBuffer._logprobs[].copy"], "methods", ["None"], ["", "def", "get_logprobs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_logprobs", "[", ":", "self", ".", "_size", "]", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.relabel_rewards": [[93, 95], ["len"], "methods", ["None"], ["", "def", "relabel_rewards", "(", "self", ",", "rewards", ")", ":", "\n", "        ", "self", ".", "_rewards", "[", ":", "len", "(", "rewards", ")", "]", "=", "rewards", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.terminate_episode": [[96, 98], ["None"], "methods", ["None"], ["", "def", "terminate_episode", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer._advance": [[99, 104], ["None"], "methods", ["None"], ["", "def", "_advance", "(", "self", ")", ":", "\n", "        ", "self", ".", "_top", "=", "(", "self", ".", "_top", "+", "1", ")", "%", "self", ".", "_max_replay_buffer_size", "\n", "if", "self", ".", "_size", "<", "self", ".", "_max_replay_buffer_size", ":", "\n", "            ", "self", ".", "_size", "+=", "1", "\n", "", "self", ".", "total_entries", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.random_batch": [[105, 127], ["numpy.random.randint", "dict", "int", "int", "simple_replay_buffer.SimpleReplayBuffer.obs_postproc", "simple_replay_buffer.SimpleReplayBuffer.obs_postproc", "dict.keys"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.obs_postproc", "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.obs_postproc"], ["", "def", "random_batch", "(", "self", ",", "batch_size", ",", "min_pct", "=", "0", ",", "max_pct", "=", "1", ",", "include_logprobs", "=", "False", ",", "return_indices", "=", "False", ")", ":", "\n", "        ", "indices", "=", "np", ".", "random", ".", "randint", "(", "\n", "int", "(", "min_pct", "*", "self", ".", "_size", ")", ",", "\n", "int", "(", "max_pct", "*", "self", ".", "_size", ")", ",", "\n", "batch_size", ",", "\n", ")", "\n", "batch", "=", "dict", "(", "\n", "observations", "=", "self", ".", "obs_postproc", "(", "self", ".", "_observations", "[", "indices", "]", ")", ",", "\n", "actions", "=", "self", ".", "_actions", "[", "indices", "]", ",", "\n", "rewards", "=", "self", ".", "_rewards", "[", "indices", "]", ",", "\n", "terminals", "=", "self", ".", "_terminals", "[", "indices", "]", ",", "\n", "next_observations", "=", "self", ".", "obs_postproc", "(", "self", ".", "_next_obs", "[", "indices", "]", ")", ",", "\n", ")", "\n", "if", "include_logprobs", ":", "\n", "            ", "batch", "[", "'logprobs'", "]", "=", "self", ".", "_logprobs", "[", "indices", "]", "\n", "", "for", "key", "in", "self", ".", "_env_info_keys", ":", "\n", "            ", "assert", "key", "not", "in", "batch", ".", "keys", "(", ")", "\n", "batch", "[", "key", "]", "=", "self", ".", "_env_infos", "[", "key", "]", "[", "indices", "]", "\n", "", "if", "return_indices", ":", "\n", "            ", "return", "batch", ",", "indices", "\n", "", "else", ":", "\n", "            ", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.get_snapshot": [[128, 136], ["dict"], "methods", ["None"], ["", "", "def", "get_snapshot", "(", "self", ")", ":", "\n", "        ", "return", "dict", "(", "\n", "observations", "=", "self", ".", "_observations", "[", ":", "self", ".", "_size", "]", ",", "\n", "actions", "=", "self", ".", "_actions", "[", ":", "self", ".", "_size", "]", ",", "\n", "rewards", "=", "self", ".", "_rewards", "[", ":", "self", ".", "_size", "]", ",", "\n", "terminals", "=", "self", ".", "_terminals", "[", ":", "self", ".", "_size", "]", ",", "\n", "next_observations", "=", "self", ".", "_next_obs", "[", ":", "self", ".", "_size", "]", ",", "\n", "env_infos", "=", "self", ".", "_env_infos", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.load_snapshot": [[138, 149], ["range", "simple_replay_buffer.SimpleReplayBuffer.add_sample"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.add_sample"], ["", "def", "load_snapshot", "(", "self", ",", "snapshot", ")", ":", "\n", "        ", "prev_info", "=", "snapshot", "[", "'env_info'", "]", "\n", "for", "t", "in", "range", "(", "snapshot", "[", "'observations'", "]", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "env_info", "=", "{", "key", ":", "prev_info", "[", "key", "]", "[", "t", "]", "for", "key", "in", "prev_info", "}", "\n", "self", ".", "add_sample", "(", "\n", "observation", "=", "snapshot", "[", "'observations'", "]", "[", "t", "]", ",", "\n", "action", "=", "snapshot", "[", "'actions'", "]", "[", "t", "]", ",", "\n", "reward", "=", "snapshot", "[", "'rewards'", "]", "[", "t", "]", ",", "\n", "next_observation", "=", "snapshot", "[", "'next_observations'", "]", "[", "t", "]", ",", "\n", "terminal", "=", "snapshot", "[", "'terminals'", "]", "[", "t", "]", ",", "\n", "env_info", "=", "env_info", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.rebuild_env_info_dict": [[151, 155], ["None"], "methods", ["None"], ["", "", "def", "rebuild_env_info_dict", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "{", "\n", "key", ":", "self", ".", "_env_infos", "[", "key", "]", "[", "idx", "]", "\n", "for", "key", "in", "self", ".", "_env_info_keys", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.batch_env_info_dict": [[157, 161], ["None"], "methods", ["None"], ["", "def", "batch_env_info_dict", "(", "self", ",", "indices", ")", ":", "\n", "        ", "return", "{", "\n", "key", ":", "self", ".", "_env_infos", "[", "key", "]", "[", "indices", "]", "\n", "for", "key", "in", "self", ".", "_env_info_keys", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.top": [[163, 165], ["None"], "methods", ["None"], ["", "def", "top", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_top", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.num_steps_can_sample": [[166, 168], ["None"], "methods", ["None"], ["", "def", "num_steps_can_sample", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_size", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.max_replay_buffer_size": [[169, 171], ["None"], "methods", ["None"], ["", "def", "max_replay_buffer_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_max_replay_buffer_size", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.obs_dim": [[172, 174], ["None"], "methods", ["None"], ["", "def", "obs_dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_observation_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.action_dim": [[175, 177], ["None"], "methods", ["None"], ["", "def", "action_dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_action_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.get_diagnostics": [[178, 181], ["collections.OrderedDict"], "methods", ["None"], ["", "def", "get_diagnostics", "(", "self", ")", ":", "\n", "        ", "return", "OrderedDict", "(", "[", "\n", "(", "'size'", ",", "self", ".", "_size", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.load_replay_buffer_from_snapshot": [[8, 20], ["range", "len", "dict", "new_replay.add_sample", "dict", "len"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.add_sample"], ["def", "load_replay_buffer_from_snapshot", "(", "new_replay", ",", "snapshot", ",", "force_terminal_false", "=", "False", ")", ":", "\n", "    ", "for", "t", "in", "range", "(", "len", "(", "snapshot", "[", "'replay_buffer/actions'", "]", ")", ")", ":", "\n", "        ", "sample", "=", "dict", "(", "env_info", "=", "dict", "(", ")", ")", "\n", "for", "k", "in", "[", "'observation'", ",", "'action'", ",", "'reward'", ",", "\n", "'terminal'", ",", "'next_observation'", ",", "'env_info'", "]", ":", "\n", "            ", "if", "len", "(", "snapshot", "[", "'replay_buffer/%ss'", "%", "k", "]", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "if", "force_terminal_false", "and", "k", "==", "'terminal'", ":", "\n", "                ", "sample", "[", "k", "]", "=", "[", "False", "]", "\n", "", "else", ":", "\n", "                ", "sample", "[", "k", "]", "=", "snapshot", "[", "'replay_buffer/%ss'", "%", "k", "]", "[", "t", "]", "\n", "", "", "new_replay", ".", "add_sample", "(", "**", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.optimizers.optimizer.Optimizer.__init__": [[4, 6], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "sol_dim", ")", ":", "\n", "        ", "self", ".", "sol_dim", "=", "sol_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.optimizers.optimizer.Optimizer.optimize": [[7, 9], ["None"], "methods", ["None"], ["", "def", "optimize", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.random_shooting.mppi.MPPIOptimizer.__init__": [[8, 36], ["lifelong_rl.optimizers.random_shooting.rs_optimizer.RSOptimizer.__init__"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "sol_dim", ",", "\n", "num_iters", ",", "\n", "population_size", ",", "\n", "temperature", ",", "\n", "cost_function", ",", "\n", "upper_bound", "=", "1", ",", "\n", "lower_bound", "=", "-", "1", ",", "\n", "epsilon", "=", "1e-3", ",", "\n", "polyak", "=", "0.2", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "sol_dim", ",", "\n", "num_iters", ",", "\n", "population_size", ",", "\n", "cost_function", ",", "\n", "upper_bound", "=", "upper_bound", ",", "\n", "lower_bound", "=", "lower_bound", ",", "\n", "epsilon", "=", "epsilon", ",", "\n", "polyak", "=", "polyak", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "\n", "self", ".", "temperature", "=", "temperature", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.random_shooting.mppi.MPPIOptimizer.update_sol": [[37, 43], ["numpy.exp", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.square"], "methods", ["None"], ["", "def", "update_sol", "(", "self", ",", "costs", ",", "samples", ",", "noise", ",", "init_mean", ",", "init_var", ")", ":", "\n", "        ", "w", "=", "np", ".", "exp", "(", "-", "costs", "/", "self", ".", "temperature", ")", "\n", "w_total", "=", "np", ".", "sum", "(", "w", ")", "+", "1e-6", "\n", "updated_mean", "=", "np", ".", "sum", "(", "(", "w", "*", "samples", ".", "T", ")", ".", "T", ",", "axis", "=", "0", ")", "/", "w_total", "\n", "updated_var", "=", "np", ".", "sum", "(", "(", "w", "*", "np", ".", "square", "(", "noise", ")", ".", "T", ")", ".", "T", ",", "axis", "=", "0", ")", "/", "w_total", "\n", "return", "updated_mean", ",", "updated_var", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.random_shooting.cem.CEMOptimizer.__init__": [[8, 32], ["lifelong_rl.optimizers.random_shooting.rs_optimizer.RSOptimizer.__init__", "max", "min"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "sol_dim", ",", "\n", "num_iters", ",", "\n", "population_size", ",", "\n", "elites_frac", ",", "\n", "cost_function", ",", "\n", "upper_bound", "=", "1", ",", "\n", "lower_bound", "=", "-", "1", ",", "\n", "epsilon", "=", "1e-3", ",", "\n", "polyak", "=", "0.2", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "sol_dim", ",", "\n", "num_iters", ",", "\n", "population_size", ",", "\n", "cost_function", ",", "\n", "upper_bound", "=", "upper_bound", ",", "\n", "lower_bound", "=", "lower_bound", ",", "\n", "epsilon", "=", "epsilon", ",", "\n", "polyak", "=", "polyak", ",", "\n", ")", "\n", "\n", "self", ".", "elites_frac", "=", "max", "(", "min", "(", "elites_frac", ",", "1", ")", ",", ".01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.random_shooting.cem.CEMOptimizer.update_sol": [[33, 38], ["numpy.mean", "numpy.var", "int", "numpy.argsort"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean"], ["", "def", "update_sol", "(", "self", ",", "costs", ",", "samples", ",", "noise", ",", "init_mean", ",", "init_var", ")", ":", "\n", "        ", "elites", "=", "samples", "[", "np", ".", "argsort", "(", "costs", ")", "]", "[", ":", "int", "(", "self", ".", "elites_frac", "*", "self", ".", "population_size", ")", "]", "\n", "updated_mean", "=", "np", ".", "mean", "(", "elites", ",", "axis", "=", "0", ")", "\n", "updated_var", "=", "np", ".", "var", "(", "elites", ",", "axis", "=", "0", ")", "\n", "return", "updated_mean", ",", "updated_var", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.random_shooting.rs_optimizer.RSOptimizer.__init__": [[10, 36], ["lifelong_rl.optimizers.optimizer.Optimizer.__init__"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "sol_dim", ",", "\n", "num_iters", ",", "\n", "population_size", ",", "\n", "cost_function", ",", "\n", "upper_bound", "=", "1", ",", "\n", "lower_bound", "=", "-", "1", ",", "\n", "epsilon", "=", "1e-3", ",", "\n", "polyak", "=", "0.2", ",", "\n", "min_var", "=", "0.5", ",", "\n", "learn_variance", "=", "False", ",", "\n", "filter_noise", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "sol_dim", ")", "\n", "self", ".", "num_iters", "=", "num_iters", "\n", "self", ".", "population_size", "=", "population_size", "\n", "self", ".", "cost_function", "=", "cost_function", "\n", "self", ".", "filter_noise", "=", "filter_noise", "\n", "\n", "self", ".", "upper_bound", "=", "upper_bound", "\n", "self", ".", "lower_bound", "=", "lower_bound", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "polyak", "=", "polyak", "\n", "self", ".", "min_var", "=", "min_var", "\n", "self", ".", "learn_variance", "=", "learn_variance", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.random_shooting.rs_optimizer.RSOptimizer.optimize": [[37, 66], ["collections.OrderedDict", "range", "numpy.minimum", "rs_optimizer.RSOptimizer.cost_function", "numpy.max", "rs_optimizer.RSOptimizer.update_sol", "numpy.mean", "numpy.std", "numpy.random.randn", "numpy.sqrt", "rs_optimizer.RSOptimizer.filter_noise", "numpy.maximum", "numpy.maximum", "numpy.max", "numpy.max", "numpy.min"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc.MPCPolicy.cost_function", "home.repos.pwc.inspect_result.kzl_lifelong_rl.random_shooting.rs_optimizer.RSOptimizer.update_sol", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.randn", "home.repos.pwc.inspect_result.kzl_lifelong_rl.mpc.mpc.MPCPolicy.filter_noise"], ["", "def", "optimize", "(", "self", ",", "init_mean", ",", "init_var", ")", ":", "\n", "        ", "mean", ",", "var", "=", "init_mean", ",", "init_var", "\n", "\n", "diagnostics", "=", "OrderedDict", "(", ")", "\n", "for", "it", "in", "range", "(", "self", ".", "num_iters", ")", ":", "\n", "            ", "noise", "=", "np", ".", "random", ".", "randn", "(", "self", ".", "population_size", ",", "self", ".", "sol_dim", ")", "*", "np", ".", "sqrt", "(", "var", ")", "\n", "if", "self", ".", "filter_noise", "is", "not", "None", ":", "\n", "                ", "noise", "=", "self", ".", "filter_noise", "(", "noise", ")", "\n", "\n", "", "samples", "=", "mean", "+", "noise", "\n", "samples", "=", "np", ".", "minimum", "(", "np", ".", "maximum", "(", "samples", ",", "self", ".", "lower_bound", ")", ",", "self", ".", "upper_bound", ")", "\n", "\n", "costs", "=", "self", ".", "cost_function", "(", "samples", ",", "it", ")", "\n", "\n", "# normalization technique: puts costs in [0, 1], so softmax will be over [-1, 0]", "\n", "costs", "[", "costs", "!=", "costs", "]", "=", "np", ".", "max", "(", "costs", ")", "\n", "costs", "=", "(", "costs", "-", "np", ".", "max", "(", "costs", ")", ")", "/", "(", "np", ".", "max", "(", "costs", ")", "-", "np", ".", "min", "(", "costs", ")", "+", "1e-6", ")", "+", "1", "\n", "\n", "updated_mean", ",", "updated_var", "=", "self", ".", "update_sol", "(", "costs", ",", "samples", ",", "noise", ",", "mean", ",", "var", ")", "\n", "\n", "mean", "=", "self", ".", "polyak", "*", "mean", "+", "(", "1", "-", "self", ".", "polyak", ")", "*", "updated_mean", "\n", "if", "self", ".", "learn_variance", ":", "\n", "                ", "var", "=", "self", ".", "polyak", "*", "var", "+", "(", "1", "-", "self", ".", "polyak", ")", "*", "updated_var", "\n", "var", "=", "np", ".", "maximum", "(", "var", ",", "self", ".", "min_var", ")", "\n", "\n", "", "diagnostics", "[", "'Iteration %d Variance Mean'", "%", "it", "]", "=", "np", ".", "mean", "(", "var", ")", "\n", "diagnostics", "[", "'Iteration %d Variance Std'", "%", "it", "]", "=", "np", ".", "std", "(", "var", ")", "\n", "\n", "", "return", "mean", ",", "diagnostics", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.random_shooting.rs_optimizer.RSOptimizer.update_sol": [[67, 69], ["numpy.argmin"], "methods", ["None"], ["", "def", "update_sol", "(", "self", ",", "costs", ",", "samples", ",", "noise", ",", "init_mean", ",", "init_var", ")", ":", "\n", "        ", "return", "samples", "[", "np", ".", "argmin", "(", "costs", ")", "]", ",", "init_var", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.base.DataCollector.end_epoch": [[5, 7], ["None"], "methods", ["None"], ["\n", "class", "Policy", "(", "object", ",", "metaclass", "=", "abc", ".", "ABCMeta", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.base.DataCollector.get_diagnostics": [[8, 10], ["None"], "methods", ["None"], ["    ", "\"\"\"\n    General policy interface.\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.base.DataCollector.get_snapshot": [[11, 13], ["None"], "methods", ["None"], ["\n", "@", "abc", ".", "abstractmethod", "\n", "def", "get_action", "(", "self", ",", "observation", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.base.DataCollector.get_epoch_paths": [[14, 17], ["None"], "methods", ["None"], ["        "]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.base.PathCollector.collect_new_paths": [[20, 28], ["None"], "methods", ["None"], ["\n", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n", "\n", "", "", "class", "ExplorationPolicy", "(", "Policy", ",", "metaclass", "=", "abc", ".", "ABCMeta", ")", ":", "\n", "    ", "def", "set_num_steps_total", "(", "self", ",", "t", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.base.StepCollector.collect_new_steps": [[31, 39], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "stochastic_policy", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stochastic_policy", "=", "stochastic_policy", "\n", "\n", "", "def", "get_action", "(", "self", ",", "observation", ")", ":", "\n", "        ", "return", "self", ".", "stochastic_policy", ".", "get_action", "(", "observation", ",", "\n", "deterministic", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.MdpStepCollector.__init__": [[12, 32], ["collections.deque"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "env", ",", "\n", "policy", ",", "\n", "max_num_epoch_paths_saved", "=", "None", ",", "\n", "render", "=", "False", ",", "\n", "render_kwargs", "=", "None", ",", "\n", ")", ":", "\n", "        ", "if", "render_kwargs", "is", "None", ":", "\n", "            ", "render_kwargs", "=", "{", "}", "\n", "", "self", ".", "_env", "=", "env", "\n", "self", ".", "_policy", "=", "policy", "\n", "self", ".", "_max_num_epoch_paths_saved", "=", "max_num_epoch_paths_saved", "\n", "self", ".", "_epoch_paths", "=", "deque", "(", "maxlen", "=", "self", ".", "_max_num_epoch_paths_saved", ")", "\n", "self", ".", "_render", "=", "render", "\n", "self", ".", "_render_kwargs", "=", "render_kwargs", "\n", "\n", "self", ".", "_num_steps_total", "=", "0", "\n", "self", ".", "_num_paths_total", "=", "0", "\n", "self", ".", "_obs", "=", "None", "# cache variable", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.MdpStepCollector.get_epoch_paths": [[33, 35], ["None"], "methods", ["None"], ["", "def", "get_epoch_paths", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_epoch_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.MdpStepCollector.end_epoch": [[36, 40], ["collections.deque"], "methods", ["None"], ["", "def", "end_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "_epoch_paths", "=", "deque", "(", "maxlen", "=", "self", ".", "_max_num_epoch_paths_saved", ")", "\n", "# self._obs = None", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.MdpStepCollector.get_diagnostics": [[41, 53], ["collections.OrderedDict", "collections.OrderedDict.update", "len", "lifelong_rl.util.eval_util.create_stats_ordered_dict"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict"], ["", "def", "get_diagnostics", "(", "self", ")", ":", "\n", "        ", "path_lens", "=", "[", "len", "(", "path", "[", "'actions'", "]", ")", "for", "path", "in", "self", ".", "_epoch_paths", "]", "\n", "stats", "=", "OrderedDict", "(", "[", "\n", "(", "'num steps total'", ",", "self", ".", "_num_steps_total", ")", ",", "\n", "(", "'num paths total'", ",", "self", ".", "_num_paths_total", ")", ",", "\n", "]", ")", "\n", "stats", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "\"path length\"", ",", "\n", "path_lens", ",", "\n", "always_show_all_stats", "=", "True", ",", "\n", ")", ")", "\n", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.MdpStepCollector.get_snapshot": [[54, 58], ["dict"], "methods", ["None"], ["", "def", "get_snapshot", "(", "self", ")", ":", "\n", "        ", "return", "dict", "(", "\n", "env", "=", "self", ".", "_env", ",", "\n", "policy", "=", "self", ".", "_policy", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.MdpStepCollector.collect_new_steps": [[60, 68], ["range", "step_collector.MdpStepCollector.collect_one_step"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.GoalConditionedStepCollector.collect_one_step"], ["", "def", "collect_new_steps", "(", "\n", "self", ",", "\n", "max_path_length", ",", "\n", "num_steps", ",", "\n", "discard_incomplete_paths", ",", "\n", ")", ":", "\n", "        ", "for", "_", "in", "range", "(", "num_steps", ")", ":", "\n", "            ", "self", ".", "collect_one_step", "(", "max_path_length", ",", "discard_incomplete_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.MdpStepCollector.collect_one_step": [[69, 113], ["step_collector.MdpStepCollector._env.step", "numpy.array", "numpy.array", "step_collector.MdpStepCollector._current_path_builder.add_all", "step_collector.MdpStepCollector._start_new_rollout", "step_collector.MdpStepCollector._env.action_space.sample", "dict", "step_collector.MdpStepCollector._policy.get_action", "step_collector.MdpStepCollector._env.render", "step_collector.MdpStepCollector._handle_rollout_ending", "step_collector.MdpStepCollector._start_new_rollout", "len"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.step", "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.path_builder.PathBuilder.add_all", "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.GoalConditionedStepCollector._start_new_rollout", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.sample", "home.repos.pwc.inspect_result.kzl_lifelong_rl.base.latent_prior_policy.PriorLatentPolicy.get_action", "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.ProxyEnv.render", "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.GoalConditionedStepCollector._handle_rollout_ending", "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.GoalConditionedStepCollector._start_new_rollout"], ["", "", "def", "collect_one_step", "(", "\n", "self", ",", "\n", "max_path_length", ",", "\n", "discard_incomplete_paths", ",", "\n", "initial_expl", "=", "False", ",", "\n", ")", ":", "\n", "        ", "if", "self", ".", "_obs", "is", "None", ":", "\n", "            ", "self", ".", "_start_new_rollout", "(", ")", "\n", "\n", "", "if", "initial_expl", ":", "\n", "            ", "action", "=", "self", ".", "_env", ".", "action_space", ".", "sample", "(", ")", "\n", "agent_info", "=", "dict", "(", ")", "\n", "", "else", ":", "\n", "            ", "action", ",", "agent_info", "=", "self", ".", "_policy", ".", "get_action", "(", "self", ".", "_obs", ")", "\n", "", "next_ob", ",", "reward", ",", "terminal", ",", "env_info", "=", "(", "\n", "self", ".", "_env", ".", "step", "(", "action", ")", "\n", ")", "\n", "env_transition", "=", "(", "\n", "self", ".", "_obs", ",", "action", ",", "reward", ",", "terminal", ",", "next_ob", ",", "env_info", "\n", ")", "\n", "\n", "if", "self", ".", "_render", ":", "\n", "            ", "self", ".", "_env", ".", "render", "(", "**", "self", ".", "_render_kwargs", ")", "\n", "", "terminal", "=", "np", ".", "array", "(", "[", "terminal", "]", ")", "\n", "reward", "=", "np", ".", "array", "(", "[", "reward", "]", ")", "\n", "# store path obs", "\n", "self", ".", "_current_path_builder", ".", "add_all", "(", "\n", "observations", "=", "self", ".", "_obs", ",", "\n", "actions", "=", "action", ",", "\n", "rewards", "=", "reward", ",", "\n", "next_observations", "=", "next_ob", ",", "\n", "terminals", "=", "terminal", ",", "\n", "agent_infos", "=", "agent_info", ",", "\n", "env_infos", "=", "env_info", ",", "\n", ")", "\n", "if", "terminal", "or", "(", "max_path_length", "is", "not", "None", "and", "\n", "len", "(", "self", ".", "_current_path_builder", ")", ">=", "max_path_length", ")", ":", "\n", "            ", "self", ".", "_handle_rollout_ending", "(", "max_path_length", ",", "\n", "discard_incomplete_paths", ")", "\n", "self", ".", "_start_new_rollout", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_obs", "=", "next_ob", "\n", "\n", "", "return", "env_transition", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.MdpStepCollector._start_new_rollout": [[114, 117], ["lifelong_rl.data_management.utils.path_builder.PathBuilder", "step_collector.MdpStepCollector._env.reset"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.reset"], ["", "def", "_start_new_rollout", "(", "self", ")", ":", "\n", "        ", "self", ".", "_current_path_builder", "=", "PathBuilder", "(", ")", "\n", "self", ".", "_obs", "=", "self", ".", "_env", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.MdpStepCollector._handle_rollout_ending": [[118, 136], ["len", "step_collector.MdpStepCollector._current_path_builder.get_all_stacked", "len", "step_collector.MdpStepCollector._epoch_paths.append", "step_collector.MdpStepCollector._policy.reset"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.path_builder.PathBuilder.get_all_stacked", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.reset"], ["", "def", "_handle_rollout_ending", "(", "\n", "self", ",", "\n", "max_path_length", ",", "\n", "discard_incomplete_paths", "\n", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "_current_path_builder", ")", ">", "0", ":", "\n", "            ", "path", "=", "self", ".", "_current_path_builder", ".", "get_all_stacked", "(", ")", "\n", "path_len", "=", "len", "(", "path", "[", "'actions'", "]", ")", "\n", "if", "(", "\n", "path_len", "!=", "max_path_length", "\n", "and", "not", "path", "[", "'terminals'", "]", "[", "-", "1", "]", "\n", "and", "discard_incomplete_paths", "\n", ")", ":", "\n", "                ", "return", "\n", "", "self", ".", "_epoch_paths", ".", "append", "(", "path", ")", "\n", "self", ".", "_num_paths_total", "+=", "1", "\n", "self", ".", "_num_steps_total", "+=", "path_len", "\n", "self", ".", "_policy", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.RFCollector.__init__": [[140, 157], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "env", ",", "\n", "policy", ",", "\n", "max_num_epoch_paths_saved", "=", "None", ",", "\n", "render", "=", "False", ",", "\n", "render_kwargs", "=", "None", ",", "\n", ")", ":", "\n", "        ", "if", "render_kwargs", "is", "None", ":", "\n", "            ", "render_kwargs", "=", "{", "}", "\n", "", "self", ".", "_env", "=", "env", "\n", "self", ".", "_policy", "=", "policy", "\n", "self", ".", "_render", "=", "render", "\n", "self", ".", "_render_kwargs", "=", "render_kwargs", "\n", "\n", "self", ".", "_num_steps_total", "=", "0", "\n", "self", ".", "_obs", "=", "None", "# cache variable", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.RFCollector.get_epoch_paths": [[158, 160], ["None"], "methods", ["None"], ["", "def", "get_epoch_paths", "(", "self", ")", ":", "\n", "        ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.RFCollector.end_epoch": [[161, 163], ["None"], "methods", ["None"], ["", "def", "end_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "_epoch_steps", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.RFCollector.get_diagnostics": [[164, 181], ["collections.OrderedDict", "lifelong_rl.data_management.utils.path_builder.PathBuilder", "collections.OrderedDict.update", "lifelong_rl.data_management.utils.path_builder.PathBuilder.add_all", "lifelong_rl.util.eval_util.get_generic_path_information", "lifelong_rl.data_management.utils.path_builder.PathBuilder.get_all_stacked"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.path_builder.PathBuilder.add_all", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.get_generic_path_information", "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.path_builder.PathBuilder.get_all_stacked"], ["", "def", "get_diagnostics", "(", "self", ")", ":", "\n", "# get diagnostics here has to be a bit more complicated", "\n", "        ", "stats", "=", "OrderedDict", "(", "[", "\n", "(", "'num steps total'", ",", "self", ".", "_num_steps_total", ")", ",", "\n", "]", ")", "\n", "\n", "tmp_path_builder", "=", "PathBuilder", "(", ")", "\n", "for", "step", "in", "self", ".", "_epoch_steps", ":", "\n", "            ", "tmp_path_builder", ".", "add_all", "(", "**", "step", ")", "\n", "\n", "", "stats", ".", "update", "(", "\n", "eval_util", ".", "get_generic_path_information", "(", "\n", "[", "tmp_path_builder", ".", "get_all_stacked", "(", ")", "]", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.RFCollector.get_snapshot": [[182, 186], ["dict"], "methods", ["None"], ["", "def", "get_snapshot", "(", "self", ")", ":", "\n", "        ", "return", "dict", "(", "\n", "env", "=", "self", ".", "_env", ",", "\n", "policy", "=", "self", ".", "_policy", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.RFCollector.collect_new_steps": [[188, 196], ["range", "step_collector.RFCollector.collect_one_step"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.GoalConditionedStepCollector.collect_one_step"], ["", "def", "collect_new_steps", "(", "\n", "self", ",", "\n", "max_path_length", ",", "\n", "num_steps", ",", "\n", "discard_incomplete_paths", ",", "\n", ")", ":", "\n", "        ", "for", "_", "in", "range", "(", "num_steps", ")", ":", "\n", "            ", "self", ".", "collect_one_step", "(", "max_path_length", ",", "discard_incomplete_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.RFCollector.collect_one_step": [[197, 237], ["step_collector.RFCollector._env.step", "numpy.array", "numpy.array", "step_collector.RFCollector._epoch_steps.append", "step_collector.RFCollector._start_new_rollout", "step_collector.RFCollector._env.action_space.sample", "dict", "step_collector.RFCollector._policy.get_action", "step_collector.RFCollector._env.render"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.step", "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.GoalConditionedStepCollector._start_new_rollout", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.sample", "home.repos.pwc.inspect_result.kzl_lifelong_rl.base.latent_prior_policy.PriorLatentPolicy.get_action", "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.ProxyEnv.render"], ["", "", "def", "collect_one_step", "(", "\n", "self", ",", "\n", "max_path_length", ",", "\n", "discard_incomplete_paths", ",", "\n", "initial_expl", "=", "False", ",", "\n", ")", ":", "\n", "        ", "if", "self", ".", "_obs", "is", "None", ":", "\n", "            ", "self", ".", "_start_new_rollout", "(", ")", "\n", "\n", "", "if", "initial_expl", ":", "\n", "            ", "action", "=", "self", ".", "_env", ".", "action_space", ".", "sample", "(", ")", "\n", "agent_info", "=", "dict", "(", ")", "\n", "", "else", ":", "\n", "            ", "action", ",", "agent_info", "=", "self", ".", "_policy", ".", "get_action", "(", "self", ".", "_obs", ")", "\n", "", "next_ob", ",", "reward", ",", "terminal", ",", "env_info", "=", "(", "\n", "self", ".", "_env", ".", "step", "(", "action", ")", "\n", ")", "\n", "env_transition", "=", "(", "\n", "self", ".", "_obs", ",", "action", ",", "reward", ",", "terminal", ",", "next_ob", ",", "env_info", "\n", ")", "\n", "\n", "if", "self", ".", "_render", ":", "\n", "            ", "self", ".", "_env", ".", "render", "(", "**", "self", ".", "_render_kwargs", ")", "\n", "", "terminal", "=", "np", ".", "array", "(", "[", "terminal", "]", ")", "\n", "reward", "=", "np", ".", "array", "(", "[", "reward", "]", ")", "\n", "# store path obs", "\n", "self", ".", "_epoch_steps", ".", "append", "(", "{", "\n", "'observations'", ":", "self", ".", "_obs", ",", "\n", "'actions'", ":", "action", ",", "\n", "'rewards'", ":", "reward", ",", "\n", "'next_observations'", ":", "next_ob", ",", "\n", "'terminals'", ":", "terminal", ",", "\n", "'agent_infos'", ":", "agent_info", ",", "\n", "'env_infos'", ":", "env_info", ",", "\n", "}", ")", "\n", "self", ".", "_num_steps_total", "+=", "1", "\n", "\n", "self", ".", "_obs", "=", "next_ob", "\n", "\n", "return", "env_transition", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.RFCollector._start_new_rollout": [[238, 241], ["step_collector.RFCollector._env.reset"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.reset"], ["", "def", "_start_new_rollout", "(", "self", ")", ":", "\n", "        ", "self", ".", "_epoch_steps", "=", "[", "]", "\n", "self", ".", "_obs", "=", "self", ".", "_env", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.RFCollector._handle_rollout_ending": [[242, 260], ["len", "step_collector.RFCollector._current_path_builder.get_all_stacked", "len", "step_collector.RFCollector._epoch_paths.append", "step_collector.RFCollector._policy.reset"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.path_builder.PathBuilder.get_all_stacked", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.reset"], ["", "def", "_handle_rollout_ending", "(", "\n", "self", ",", "\n", "max_path_length", ",", "\n", "discard_incomplete_paths", "\n", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "_current_path_builder", ")", ">", "0", ":", "\n", "            ", "path", "=", "self", ".", "_current_path_builder", ".", "get_all_stacked", "(", ")", "\n", "path_len", "=", "len", "(", "path", "[", "'actions'", "]", ")", "\n", "if", "(", "\n", "path_len", "!=", "max_path_length", "\n", "and", "not", "path", "[", "'terminals'", "]", "[", "-", "1", "]", "\n", "and", "discard_incomplete_paths", "\n", ")", ":", "\n", "                ", "return", "\n", "", "self", ".", "_epoch_paths", ".", "append", "(", "path", ")", "\n", "self", ".", "_num_paths_total", "+=", "1", "\n", "self", ".", "_num_steps_total", "+=", "path_len", "\n", "self", ".", "_policy", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.GoalConditionedReplayStepCollector.__init__": [[264, 284], ["collections.deque"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "env", ",", "\n", "policy", ",", "\n", "replay_buffer", ",", "\n", "resample_goal_every", ",", "\n", "max_num_epoch_paths_saved", "=", "None", ",", "\n", ")", ":", "\n", "        ", "self", ".", "_env", "=", "env", "\n", "self", ".", "_policy", "=", "policy", "\n", "self", ".", "_replay_buffer", "=", "replay_buffer", "\n", "\n", "self", ".", "_resample_goal_every", "=", "resample_goal_every", "\n", "self", ".", "_max_num_epoch_paths_saved", "=", "max_num_epoch_paths_saved", "\n", "self", ".", "_epoch_paths", "=", "deque", "(", "maxlen", "=", "self", ".", "_max_num_epoch_paths_saved", ")", "\n", "\n", "self", ".", "_num_steps_total", "=", "0", "\n", "self", ".", "_num_paths_total", "=", "0", "\n", "self", ".", "_obs", "=", "None", "# cache variable", "\n", "self", ".", "_goal", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.GoalConditionedReplayStepCollector.get_epoch_paths": [[285, 287], ["None"], "methods", ["None"], ["", "def", "get_epoch_paths", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_epoch_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.GoalConditionedReplayStepCollector.end_epoch": [[288, 291], ["collections.deque"], "methods", ["None"], ["", "def", "end_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "_epoch_paths", "=", "deque", "(", "maxlen", "=", "self", ".", "_max_num_epoch_paths_saved", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.GoalConditionedReplayStepCollector.get_diagnostics": [[292, 304], ["collections.OrderedDict", "collections.OrderedDict.update", "len", "lifelong_rl.util.eval_util.create_stats_ordered_dict"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict"], ["", "def", "get_diagnostics", "(", "self", ")", ":", "\n", "        ", "path_lens", "=", "[", "len", "(", "path", "[", "'actions'", "]", ")", "for", "path", "in", "self", ".", "_epoch_paths", "]", "\n", "stats", "=", "OrderedDict", "(", "[", "\n", "(", "'num steps total'", ",", "self", ".", "_num_steps_total", ")", ",", "\n", "(", "'num paths total'", ",", "self", ".", "_num_paths_total", ")", ",", "\n", "]", ")", "\n", "stats", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "\"path length\"", ",", "\n", "path_lens", ",", "\n", "always_show_all_stats", "=", "True", ",", "\n", ")", ")", "\n", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.GoalConditionedReplayStepCollector.get_snapshot": [[305, 309], ["dict"], "methods", ["None"], ["", "def", "get_snapshot", "(", "self", ")", ":", "\n", "        ", "return", "dict", "(", "\n", "env", "=", "self", ".", "_env", ",", "\n", "policy", "=", "self", ".", "_policy", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.GoalConditionedReplayStepCollector.collect_new_steps": [[311, 319], ["range", "step_collector.GoalConditionedReplayStepCollector.collect_one_step"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.GoalConditionedStepCollector.collect_one_step"], ["", "def", "collect_new_steps", "(", "\n", "self", ",", "\n", "max_path_length", ",", "\n", "num_steps", ",", "\n", "discard_incomplete_paths", ",", "\n", ")", ":", "\n", "        ", "for", "_", "in", "range", "(", "num_steps", ")", ":", "\n", "            ", "self", ".", "collect_one_step", "(", "max_path_length", ",", "discard_incomplete_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.GoalConditionedReplayStepCollector.collect_one_step": [[320, 374], ["step_collector.GoalConditionedReplayStepCollector._env.step", "numpy.array", "numpy.array", "step_collector.GoalConditionedReplayStepCollector._current_path_builder.add_all", "step_collector.GoalConditionedReplayStepCollector._start_new_rollout", "step_collector.GoalConditionedReplayStepCollector._env.action_space.sample", "dict", "numpy.concatenate", "step_collector.GoalConditionedReplayStepCollector._policy.get_action", "numpy.mean", "step_collector.GoalConditionedReplayStepCollector._handle_rollout_ending", "step_collector.GoalConditionedReplayStepCollector._start_new_rollout", "step_collector.GoalConditionedReplayStepCollector._replay_buffer.num_steps_can_sample", "step_collector.GoalConditionedReplayStepCollector._replay_buffer.random_batch", "len"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.step", "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.path_builder.PathBuilder.add_all", "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.GoalConditionedStepCollector._start_new_rollout", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.sample", "home.repos.pwc.inspect_result.kzl_lifelong_rl.base.latent_prior_policy.PriorLatentPolicy.get_action", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.GoalConditionedStepCollector._handle_rollout_ending", "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.GoalConditionedStepCollector._start_new_rollout", "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.num_steps_can_sample", "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.random_batch"], ["", "", "def", "collect_one_step", "(", "\n", "self", ",", "\n", "max_path_length", ",", "\n", "discard_incomplete_paths", ",", "\n", "initial_expl", "=", "False", ",", "\n", ")", ":", "\n", "        ", "if", "self", ".", "_obs", "is", "None", ":", "\n", "            ", "self", ".", "_start_new_rollout", "(", ")", "\n", "\n", "", "if", "self", ".", "_num_steps_total", "%", "self", ".", "_resample_goal_every", "==", "0", ":", "\n", "            ", "if", "self", ".", "_replay_buffer", ".", "num_steps_can_sample", "(", ")", "==", "0", ":", "\n", "                ", "self", ".", "_goal", "=", "self", ".", "_obs", "\n", "", "else", ":", "\n", "                ", "rbatch", "=", "self", ".", "_replay_buffer", ".", "random_batch", "(", "1", ")", "\n", "self", ".", "_goal", "=", "rbatch", "[", "'observations'", "]", "[", "0", "]", "\n", "\n", "", "", "if", "initial_expl", ":", "\n", "            ", "action", "=", "self", ".", "_env", ".", "action_space", ".", "sample", "(", ")", "\n", "agent_info", "=", "dict", "(", ")", "\n", "", "else", ":", "\n", "            ", "obs_goal", "=", "np", ".", "concatenate", "(", "[", "self", ".", "_obs", ",", "self", ".", "_goal", "]", ",", "axis", "=", "0", ")", "\n", "action", ",", "agent_info", "=", "self", ".", "_policy", ".", "get_action", "(", "obs_goal", ")", "\n", "", "next_ob", ",", "reward", ",", "terminal", ",", "env_info", "=", "(", "\n", "self", ".", "_env", ".", "step", "(", "action", ")", "\n", ")", "\n", "\n", "# relabel reward", "\n", "reward", "=", "-", "np", ".", "mean", "(", "(", "next_ob", "-", "self", ".", "_goal", ")", "**", "2", ")", "\n", "\n", "env_transition", "=", "(", "\n", "self", ".", "_obs", ",", "action", ",", "reward", ",", "terminal", ",", "next_ob", ",", "env_info", "\n", ")", "\n", "\n", "terminal", "=", "np", ".", "array", "(", "[", "terminal", "]", ")", "\n", "reward", "=", "np", ".", "array", "(", "[", "reward", "]", ")", "\n", "# store path obs", "\n", "self", ".", "_current_path_builder", ".", "add_all", "(", "\n", "observations", "=", "self", ".", "_obs", ",", "\n", "actions", "=", "action", ",", "\n", "rewards", "=", "reward", ",", "\n", "next_observations", "=", "next_ob", ",", "\n", "terminals", "=", "terminal", ",", "\n", "agent_infos", "=", "agent_info", ",", "\n", "env_infos", "=", "env_info", ",", "\n", ")", "\n", "if", "terminal", "or", "(", "max_path_length", "is", "not", "None", "and", "\n", "len", "(", "self", ".", "_current_path_builder", ")", ">=", "max_path_length", ")", ":", "\n", "            ", "self", ".", "_handle_rollout_ending", "(", "max_path_length", ",", "\n", "discard_incomplete_paths", ")", "\n", "self", ".", "_start_new_rollout", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_obs", "=", "next_ob", "\n", "\n", "", "return", "env_transition", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.GoalConditionedReplayStepCollector._start_new_rollout": [[375, 378], ["lifelong_rl.data_management.utils.path_builder.PathBuilder", "step_collector.GoalConditionedReplayStepCollector._env.reset"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.reset"], ["", "def", "_start_new_rollout", "(", "self", ")", ":", "\n", "        ", "self", ".", "_current_path_builder", "=", "PathBuilder", "(", ")", "\n", "self", ".", "_obs", "=", "self", ".", "_env", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.GoalConditionedReplayStepCollector._handle_rollout_ending": [[379, 397], ["len", "step_collector.GoalConditionedReplayStepCollector._current_path_builder.get_all_stacked", "len", "step_collector.GoalConditionedReplayStepCollector._epoch_paths.append", "step_collector.GoalConditionedReplayStepCollector._policy.reset"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.path_builder.PathBuilder.get_all_stacked", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.reset"], ["", "def", "_handle_rollout_ending", "(", "\n", "self", ",", "\n", "max_path_length", ",", "\n", "discard_incomplete_paths", "\n", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "_current_path_builder", ")", ">", "0", ":", "\n", "            ", "path", "=", "self", ".", "_current_path_builder", ".", "get_all_stacked", "(", ")", "\n", "path_len", "=", "len", "(", "path", "[", "'actions'", "]", ")", "\n", "if", "(", "\n", "path_len", "!=", "max_path_length", "\n", "and", "not", "path", "[", "'terminals'", "]", "[", "-", "1", "]", "\n", "and", "discard_incomplete_paths", "\n", ")", ":", "\n", "                ", "return", "\n", "", "self", ".", "_epoch_paths", ".", "append", "(", "path", ")", "\n", "self", ".", "_num_paths_total", "+=", "1", "\n", "self", ".", "_num_steps_total", "+=", "path_len", "\n", "self", ".", "_policy", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.GoalConditionedStepCollector.__init__": [[401, 425], ["collections.deque"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "env", ",", "\n", "policy", ",", "\n", "max_num_epoch_paths_saved", "=", "None", ",", "\n", "render", "=", "False", ",", "\n", "render_kwargs", "=", "None", ",", "\n", "observation_key", "=", "'observation'", ",", "\n", "desired_goal_key", "=", "'desired_goal'", ",", "\n", ")", ":", "\n", "        ", "if", "render_kwargs", "is", "None", ":", "\n", "            ", "render_kwargs", "=", "{", "}", "\n", "", "self", ".", "_env", "=", "env", "\n", "self", ".", "_policy", "=", "policy", "\n", "self", ".", "_max_num_epoch_paths_saved", "=", "max_num_epoch_paths_saved", "\n", "self", ".", "_epoch_paths", "=", "deque", "(", "maxlen", "=", "self", ".", "_max_num_epoch_paths_saved", ")", "\n", "self", ".", "_render", "=", "render", "\n", "self", ".", "_render_kwargs", "=", "render_kwargs", "\n", "self", ".", "_observation_key", "=", "observation_key", "\n", "self", ".", "_desired_goal_key", "=", "desired_goal_key", "\n", "\n", "self", ".", "_num_steps_total", "=", "0", "\n", "self", ".", "_num_paths_total", "=", "0", "\n", "self", ".", "_obs", "=", "None", "# cache variable", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.GoalConditionedStepCollector.get_epoch_paths": [[426, 428], ["None"], "methods", ["None"], ["", "def", "get_epoch_paths", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_epoch_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.GoalConditionedStepCollector.end_epoch": [[429, 432], ["collections.deque"], "methods", ["None"], ["", "def", "end_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "_epoch_paths", "=", "deque", "(", "maxlen", "=", "self", ".", "_max_num_epoch_paths_saved", ")", "\n", "self", ".", "_obs", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.GoalConditionedStepCollector.get_diagnostics": [[433, 445], ["collections.OrderedDict", "collections.OrderedDict.update", "len", "lifelong_rl.util.eval_util.create_stats_ordered_dict"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict"], ["", "def", "get_diagnostics", "(", "self", ")", ":", "\n", "        ", "path_lens", "=", "[", "len", "(", "path", "[", "'actions'", "]", ")", "for", "path", "in", "self", ".", "_epoch_paths", "]", "\n", "stats", "=", "OrderedDict", "(", "[", "\n", "(", "'num steps total'", ",", "self", ".", "_num_steps_total", ")", ",", "\n", "(", "'num paths total'", ",", "self", ".", "_num_paths_total", ")", ",", "\n", "]", ")", "\n", "stats", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "\"path length\"", ",", "\n", "path_lens", ",", "\n", "always_show_all_stats", "=", "True", ",", "\n", ")", ")", "\n", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.GoalConditionedStepCollector.get_snapshot": [[446, 452], ["dict"], "methods", ["None"], ["", "def", "get_snapshot", "(", "self", ")", ":", "\n", "        ", "return", "dict", "(", "\n", "env", "=", "self", ".", "_env", ",", "\n", "policy", "=", "self", ".", "_policy", ",", "\n", "observation_key", "=", "self", ".", "_observation_key", ",", "\n", "desired_goal_key", "=", "self", ".", "_desired_goal_key", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.GoalConditionedStepCollector.start_collection": [[454, 456], ["step_collector.GoalConditionedStepCollector._start_new_rollout"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.GoalConditionedStepCollector._start_new_rollout"], ["", "def", "start_collection", "(", "self", ")", ":", "\n", "        ", "self", ".", "_start_new_rollout", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.GoalConditionedStepCollector.end_collection": [[457, 460], ["step_collector.GoalConditionedStepCollector.get_epoch_paths"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.path_collector.GoalConditionedPathCollector.get_epoch_paths"], ["", "def", "end_collection", "(", "self", ")", ":", "\n", "        ", "epoch_paths", "=", "self", ".", "get_epoch_paths", "(", ")", "\n", "return", "epoch_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.GoalConditionedStepCollector.collect_new_steps": [[461, 469], ["range", "step_collector.GoalConditionedStepCollector.collect_one_step"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.GoalConditionedStepCollector.collect_one_step"], ["", "def", "collect_new_steps", "(", "\n", "self", ",", "\n", "max_path_length", ",", "\n", "num_steps", ",", "\n", "discard_incomplete_paths", ",", "\n", ")", ":", "\n", "        ", "for", "_", "in", "range", "(", "num_steps", ")", ":", "\n", "            ", "self", ".", "collect_one_step", "(", "max_path_length", ",", "discard_incomplete_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.GoalConditionedStepCollector.collect_one_step": [[470, 506], ["numpy.hstack", "step_collector.GoalConditionedStepCollector._policy.get_action", "step_collector.GoalConditionedStepCollector._env.step", "numpy.array", "numpy.array", "step_collector.GoalConditionedStepCollector._current_path_builder.add_all", "step_collector.GoalConditionedStepCollector._start_new_rollout", "step_collector.GoalConditionedStepCollector._env.render", "step_collector.GoalConditionedStepCollector._handle_rollout_ending", "step_collector.GoalConditionedStepCollector._start_new_rollout", "len"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.base.latent_prior_policy.PriorLatentPolicy.get_action", "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.step", "home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.path_builder.PathBuilder.add_all", "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.GoalConditionedStepCollector._start_new_rollout", "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.ProxyEnv.render", "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.GoalConditionedStepCollector._handle_rollout_ending", "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.GoalConditionedStepCollector._start_new_rollout"], ["", "", "def", "collect_one_step", "(", "\n", "self", ",", "\n", "max_path_length", ",", "\n", "discard_incomplete_paths", ",", "\n", ")", ":", "\n", "        ", "if", "self", ".", "_obs", "is", "None", ":", "\n", "            ", "self", ".", "_start_new_rollout", "(", ")", "\n", "\n", "", "new_obs", "=", "np", ".", "hstack", "(", "(", "\n", "self", ".", "_obs", "[", "self", ".", "_observation_key", "]", ",", "\n", "self", ".", "_obs", "[", "self", ".", "_desired_goal_key", "]", ",", "\n", ")", ")", "\n", "action", ",", "agent_info", "=", "self", ".", "_policy", ".", "get_action", "(", "new_obs", ")", "\n", "next_ob", ",", "reward", ",", "terminal", ",", "env_info", "=", "(", "\n", "self", ".", "_env", ".", "step", "(", "action", ")", "\n", ")", "\n", "if", "self", ".", "_render", ":", "\n", "            ", "self", ".", "_env", ".", "render", "(", "**", "self", ".", "_render_kwargs", ")", "\n", "", "terminal", "=", "np", ".", "array", "(", "[", "terminal", "]", ")", "\n", "reward", "=", "np", ".", "array", "(", "[", "reward", "]", ")", "\n", "# store path obs", "\n", "self", ".", "_current_path_builder", ".", "add_all", "(", "\n", "observations", "=", "self", ".", "_obs", ",", "\n", "actions", "=", "action", ",", "\n", "rewards", "=", "reward", ",", "\n", "next_observations", "=", "next_ob", ",", "\n", "terminals", "=", "terminal", ",", "\n", "agent_infos", "=", "agent_info", ",", "\n", "env_infos", "=", "env_info", ",", "\n", ")", "\n", "if", "terminal", "or", "len", "(", "self", ".", "_current_path_builder", ")", ">=", "max_path_length", ":", "\n", "            ", "self", ".", "_handle_rollout_ending", "(", "max_path_length", ",", "\n", "discard_incomplete_paths", ")", "\n", "self", ".", "_start_new_rollout", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_obs", "=", "next_ob", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.GoalConditionedStepCollector._start_new_rollout": [[507, 510], ["lifelong_rl.data_management.utils.path_builder.PathBuilder", "step_collector.GoalConditionedStepCollector._env.reset"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.reset"], ["", "", "def", "_start_new_rollout", "(", "self", ")", ":", "\n", "        ", "self", ".", "_current_path_builder", "=", "PathBuilder", "(", ")", "\n", "self", ".", "_obs", "=", "self", ".", "_env", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.GoalConditionedStepCollector._handle_rollout_ending": [[511, 528], ["len", "step_collector.GoalConditionedStepCollector._current_path_builder.get_all_stacked", "len", "step_collector.GoalConditionedStepCollector._epoch_paths.append"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.path_builder.PathBuilder.get_all_stacked"], ["", "def", "_handle_rollout_ending", "(", "\n", "self", ",", "\n", "max_path_length", ",", "\n", "discard_incomplete_paths", "\n", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "_current_path_builder", ")", ">", "0", ":", "\n", "            ", "path", "=", "self", ".", "_current_path_builder", ".", "get_all_stacked", "(", ")", "\n", "path_len", "=", "len", "(", "path", "[", "'actions'", "]", ")", "\n", "if", "(", "\n", "path_len", "!=", "max_path_length", "\n", "and", "not", "path", "[", "'terminals'", "]", "[", "-", "1", "]", "\n", "and", "discard_incomplete_paths", "\n", ")", ":", "\n", "                ", "return", "\n", "", "self", ".", "_epoch_paths", ".", "append", "(", "path", ")", "\n", "self", ".", "_num_paths_total", "+=", "1", "\n", "self", ".", "_num_steps_total", "+=", "path_len", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.path_collector.MdpPathCollector.__init__": [[11, 31], ["collections.deque"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "env", ",", "\n", "policy", ",", "\n", "max_num_epoch_paths_saved", "=", "None", ",", "\n", "render", "=", "False", ",", "\n", "render_kwargs", "=", "None", ",", "\n", ")", ":", "\n", "        ", "if", "render_kwargs", "is", "None", ":", "\n", "            ", "render_kwargs", "=", "{", "}", "\n", "\n", "", "self", ".", "_env", "=", "env", "\n", "self", ".", "_policy", "=", "policy", "\n", "self", ".", "_max_num_epoch_paths_saved", "=", "max_num_epoch_paths_saved", "\n", "self", ".", "_epoch_paths", "=", "deque", "(", "maxlen", "=", "self", ".", "_max_num_epoch_paths_saved", ")", "\n", "self", ".", "_render", "=", "render", "\n", "self", ".", "_render_kwargs", "=", "render_kwargs", "\n", "\n", "self", ".", "_num_steps_total", "=", "0", "\n", "self", ".", "_num_paths_total", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.path_collector.MdpPathCollector.rollout_function": [[32, 34], ["lifelong_rl.samplers.rollout"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.rollout_functions.rollout"], ["", "def", "rollout_function", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "rollout", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.path_collector.MdpPathCollector.reset_policy": [[35, 38], ["path_collector.MdpPathCollector._policy.reset", "path_collector.MdpPathCollector._policy.eval"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.reset", "home.repos.pwc.inspect_result.kzl_lifelong_rl.base.latent_prior_policy.PriorLatentPolicy.eval"], ["", "def", "reset_policy", "(", "self", ")", ":", "\n", "        ", "self", ".", "_policy", ".", "reset", "(", ")", "\n", "self", ".", "_policy", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.path_collector.MdpPathCollector.finish_path": [[39, 41], ["None"], "methods", ["None"], ["", "def", "finish_path", "(", "self", ",", "path", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.path_collector.MdpPathCollector.end_path_collection": [[42, 44], ["path_collector.MdpPathCollector._policy.train"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm.train"], ["", "def", "end_path_collection", "(", "self", ")", ":", "\n", "        ", "self", ".", "_policy", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.path_collector.MdpPathCollector.collect_new_paths": [[45, 79], ["len", "path_collector.MdpPathCollector._epoch_paths.extend", "path_collector.MdpPathCollector.end_path_collection", "min", "path_collector.MdpPathCollector.reset_policy", "path_collector.MdpPathCollector.rollout_function", "len", "path_collector.MdpPathCollector.finish_path", "paths.append"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.path_collector.LatentPathCollector.end_path_collection", "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.path_collector.LatentPathCollector.reset_policy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.path_collector.LatentPathCollector.rollout_function", "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.path_collector.LatentPathCollector.finish_path"], ["", "def", "collect_new_paths", "(", "\n", "self", ",", "\n", "max_path_length", ",", "\n", "num_steps", ",", "\n", "discard_incomplete_paths", ",", "\n", ")", ":", "\n", "        ", "paths", "=", "[", "]", "\n", "num_steps_collected", "=", "0", "\n", "while", "num_steps_collected", "<", "num_steps", ":", "\n", "            ", "max_path_length_this_loop", "=", "min", "(", "# Do not go over num_steps", "\n", "max_path_length", ",", "\n", "num_steps", "-", "num_steps_collected", ",", "\n", ")", "\n", "self", ".", "reset_policy", "(", ")", "\n", "path", "=", "self", ".", "rollout_function", "(", "\n", "self", ".", "_env", ",", "\n", "self", ".", "_policy", ",", "\n", "max_path_length", "=", "max_path_length_this_loop", ",", "\n", ")", "\n", "path_len", "=", "len", "(", "path", "[", "'actions'", "]", ")", "\n", "if", "(", "\n", "path_len", "!=", "max_path_length", "\n", "and", "not", "path", "[", "'terminals'", "]", "[", "-", "1", "]", "\n", "and", "discard_incomplete_paths", "\n", ")", ":", "\n", "                ", "break", "\n", "", "num_steps_collected", "+=", "path_len", "\n", "self", ".", "finish_path", "(", "path", ")", "\n", "paths", ".", "append", "(", "path", ")", "\n", "", "self", ".", "_num_paths_total", "+=", "len", "(", "paths", ")", "\n", "self", ".", "_num_steps_total", "+=", "num_steps_collected", "\n", "self", ".", "_epoch_paths", ".", "extend", "(", "paths", ")", "\n", "self", ".", "end_path_collection", "(", ")", "\n", "return", "paths", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.path_collector.MdpPathCollector.get_epoch_paths": [[80, 82], ["None"], "methods", ["None"], ["", "def", "get_epoch_paths", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_epoch_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.path_collector.MdpPathCollector.end_epoch": [[83, 85], ["collections.deque"], "methods", ["None"], ["", "def", "end_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "_epoch_paths", "=", "deque", "(", "maxlen", "=", "self", ".", "_max_num_epoch_paths_saved", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.path_collector.MdpPathCollector.get_diagnostics": [[86, 98], ["collections.OrderedDict", "collections.OrderedDict.update", "len", "lifelong_rl.util.eval_util.create_stats_ordered_dict"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict"], ["", "def", "get_diagnostics", "(", "self", ")", ":", "\n", "        ", "path_lens", "=", "[", "len", "(", "path", "[", "'actions'", "]", ")", "for", "path", "in", "self", ".", "_epoch_paths", "]", "\n", "stats", "=", "OrderedDict", "(", "[", "\n", "(", "'num steps total'", ",", "self", ".", "_num_steps_total", ")", ",", "\n", "(", "'num paths total'", ",", "self", ".", "_num_paths_total", ")", ",", "\n", "]", ")", "\n", "stats", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "\"path length\"", ",", "\n", "path_lens", ",", "\n", "always_show_all_stats", "=", "True", ",", "\n", ")", ")", "\n", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.path_collector.MdpPathCollector.get_snapshot": [[99, 103], ["dict"], "methods", ["None"], ["", "def", "get_snapshot", "(", "self", ")", ":", "\n", "        ", "return", "dict", "(", "\n", "env", "=", "self", ".", "_env", ",", "\n", "policy", "=", "self", ".", "_policy", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.path_collector.LatentPathCollector.__init__": [[113, 119], ["path_collector.MdpPathCollector.__init__"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__"], ["def", "__init__", "(", "self", ",", "sample_latent_every", "=", "None", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "sample_latent_every", "=", "sample_latent_every", "\n", "self", ".", "prev_latent", "=", "None", "\n", "self", ".", "rollout_func", "=", "rollout_with_latent", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.path_collector.LatentPathCollector.rollout_function": [[120, 122], ["lifelong_rl.samplers.utils.rollout_functions.rollout_with_latent"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.rollout_functions.rollout_with_latent"], ["", "def", "rollout_function", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "rollout_with_latent", "(", "sample_latent_every", "=", "self", ".", "sample_latent_every", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.path_collector.LatentPathCollector.finish_path": [[123, 125], ["None"], "methods", ["None"], ["", "def", "finish_path", "(", "self", ",", "path", ")", ":", "\n", "        ", "path", "[", "'latent'", "]", "=", "self", ".", "prev_latent", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.path_collector.LatentPathCollector.reset_policy": [[126, 131], ["path_collector.MdpPathCollector.reset_policy", "path_collector.LatentPathCollector._policy.sample_latent", "path_collector.LatentPathCollector._policy.get_current_latent"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.path_collector.LatentPathCollector.reset_policy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.base.latent_prior_policy.PriorLatentPolicy.sample_latent", "home.repos.pwc.inspect_result.kzl_lifelong_rl.base.latent_prior_policy.PriorLatentPolicy.get_current_latent"], ["", "def", "reset_policy", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "reset_policy", "(", ")", "\n", "self", ".", "_policy", ".", "fixed_latent", "=", "True", "\n", "self", ".", "_policy", ".", "sample_latent", "(", ")", "\n", "self", ".", "prev_latent", "=", "self", ".", "_policy", ".", "get_current_latent", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.path_collector.LatentPathCollector.end_path_collection": [[132, 136], ["path_collector.MdpPathCollector.end_path_collection", "path_collector.LatentPathCollector._policy.sample_latent"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.path_collector.LatentPathCollector.end_path_collection", "home.repos.pwc.inspect_result.kzl_lifelong_rl.base.latent_prior_policy.PriorLatentPolicy.sample_latent"], ["", "def", "end_path_collection", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "end_path_collection", "(", ")", "\n", "self", ".", "_policy", ".", "fixed_latent", "=", "False", "\n", "self", ".", "_policy", ".", "sample_latent", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.path_collector.GoalConditionedPathCollector.__init__": [[140, 163], ["collections.deque"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "env", ",", "\n", "policy", ",", "\n", "max_num_epoch_paths_saved", "=", "None", ",", "\n", "render", "=", "False", ",", "\n", "render_kwargs", "=", "None", ",", "\n", "observation_key", "=", "'observation'", ",", "\n", "desired_goal_key", "=", "'desired_goal'", ",", "\n", ")", ":", "\n", "        ", "if", "render_kwargs", "is", "None", ":", "\n", "            ", "render_kwargs", "=", "{", "}", "\n", "", "self", ".", "_env", "=", "env", "\n", "self", ".", "_policy", "=", "policy", "\n", "self", ".", "_max_num_epoch_paths_saved", "=", "max_num_epoch_paths_saved", "\n", "self", ".", "_render", "=", "render", "\n", "self", ".", "_render_kwargs", "=", "render_kwargs", "\n", "self", ".", "_epoch_paths", "=", "deque", "(", "maxlen", "=", "self", ".", "_max_num_epoch_paths_saved", ")", "\n", "self", ".", "_observation_key", "=", "observation_key", "\n", "self", ".", "_desired_goal_key", "=", "desired_goal_key", "\n", "\n", "self", ".", "_num_steps_total", "=", "0", "\n", "self", ".", "_num_paths_total", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.path_collector.GoalConditionedPathCollector.collect_new_paths": [[164, 200], ["len", "path_collector.GoalConditionedPathCollector._epoch_paths.extend", "min", "lifelong_rl.samplers.multitask_rollout", "len", "paths.append"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.utils.rollout_functions.multitask_rollout"], ["", "def", "collect_new_paths", "(", "\n", "self", ",", "\n", "max_path_length", ",", "\n", "num_steps", ",", "\n", "discard_incomplete_paths", ",", "\n", ")", ":", "\n", "        ", "paths", "=", "[", "]", "\n", "num_steps_collected", "=", "0", "\n", "while", "num_steps_collected", "<", "num_steps", ":", "\n", "            ", "max_path_length_this_loop", "=", "min", "(", "# Do not go over num_steps", "\n", "max_path_length", ",", "\n", "num_steps", "-", "num_steps_collected", ",", "\n", ")", "\n", "path", "=", "multitask_rollout", "(", "\n", "self", ".", "_env", ",", "\n", "self", ".", "_policy", ",", "\n", "max_path_length", "=", "max_path_length_this_loop", ",", "\n", "render", "=", "self", ".", "_render", ",", "\n", "render_kwargs", "=", "self", ".", "_render_kwargs", ",", "\n", "observation_key", "=", "self", ".", "_observation_key", ",", "\n", "desired_goal_key", "=", "self", ".", "_desired_goal_key", ",", "\n", "return_dict_obs", "=", "True", ",", "\n", ")", "\n", "path_len", "=", "len", "(", "path", "[", "'actions'", "]", ")", "\n", "if", "(", "\n", "path_len", "!=", "max_path_length", "\n", "and", "not", "path", "[", "'terminals'", "]", "[", "-", "1", "]", "\n", "and", "discard_incomplete_paths", "\n", ")", ":", "\n", "                ", "break", "\n", "", "num_steps_collected", "+=", "path_len", "\n", "paths", ".", "append", "(", "path", ")", "\n", "", "self", ".", "_num_paths_total", "+=", "len", "(", "paths", ")", "\n", "self", ".", "_num_steps_total", "+=", "num_steps_collected", "\n", "self", ".", "_epoch_paths", ".", "extend", "(", "paths", ")", "\n", "return", "paths", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.path_collector.GoalConditionedPathCollector.get_epoch_paths": [[201, 203], ["None"], "methods", ["None"], ["", "def", "get_epoch_paths", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_epoch_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.path_collector.GoalConditionedPathCollector.end_epoch": [[204, 206], ["collections.deque"], "methods", ["None"], ["", "def", "end_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "_epoch_paths", "=", "deque", "(", "maxlen", "=", "self", ".", "_max_num_epoch_paths_saved", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.path_collector.GoalConditionedPathCollector.get_diagnostics": [[207, 219], ["collections.OrderedDict", "collections.OrderedDict.update", "len", "lifelong_rl.util.eval_util.create_stats_ordered_dict"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict"], ["", "def", "get_diagnostics", "(", "self", ")", ":", "\n", "        ", "path_lens", "=", "[", "len", "(", "path", "[", "'actions'", "]", ")", "for", "path", "in", "self", ".", "_epoch_paths", "]", "\n", "stats", "=", "OrderedDict", "(", "[", "\n", "(", "'num steps total'", ",", "self", ".", "_num_steps_total", ")", ",", "\n", "(", "'num paths total'", ",", "self", ".", "_num_paths_total", ")", ",", "\n", "]", ")", "\n", "stats", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "\"path length\"", ",", "\n", "path_lens", ",", "\n", "always_show_all_stats", "=", "True", ",", "\n", ")", ")", "\n", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.path_collector.GoalConditionedPathCollector.get_snapshot": [[220, 226], ["dict"], "methods", ["None"], ["", "def", "get_snapshot", "(", "self", ")", ":", "\n", "        ", "return", "dict", "(", "\n", "env", "=", "self", ".", "_env", ",", "\n", "policy", "=", "self", ".", "_policy", ",", "\n", "observation_key", "=", "self", ".", "_observation_key", ",", "\n", "desired_goal_key", "=", "self", ".", "_desired_goal_key", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.trainers.multi_trainer.MultiTrainer.__init__": [[12, 33], ["lifelong_rl.core.rl_algorithms.torch_rl_algorithm.TorchTrainer.__init__", "collections.OrderedDict", "len", "len", "len", "len", "multi_trainer.MultiTrainer.trainer_names.append", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "trainers", ",", "# List of trainers", "\n", "trainer_steps", ",", "# List of number of steps to call each trainer per call of MultiTrainer", "\n", "trainer_names", "=", "None", ",", "# Optionally, specify the names (used for printing/logging)", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "len", "(", "trainers", ")", "==", "len", "(", "trainer_steps", ")", ",", "'Must specify number of steps for each trainer'", "\n", "\n", "self", ".", "trainers", "=", "trainers", "\n", "self", ".", "trainer_steps", "=", "trainer_steps", "\n", "\n", "if", "trainer_names", "is", "None", ":", "\n", "            ", "self", ".", "trainer_names", "=", "[", "'trainer_%d'", "%", "i", "for", "i", "in", "range", "(", "1", ",", "len", "(", "trainers", ")", "+", "1", ")", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "trainer_names", "=", "trainer_names", "\n", "while", "len", "(", "self", ".", "trainer_names", ")", "<", "len", "(", "trainers", ")", ":", "\n", "                ", "self", ".", "trainer_names", ".", "append", "(", "'trainer_%d'", "%", "(", "len", "(", "self", ".", "trainer_names", ")", "+", "1", ")", ")", "\n", "\n", "", "", "self", ".", "eval_statistics", "=", "OrderedDict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.trainers.multi_trainer.MultiTrainer.train_from_torch": [[34, 39], ["range", "len", "multi_trainer.MultiTrainer.trainers[].train_from_torch", "multi_trainer.MultiTrainer.trainers[].get_diagnostics().items", "multi_trainer.MultiTrainer.trainers[].get_diagnostics"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchTrainer.train_from_torch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchTrainer.get_diagnostics"], ["", "def", "train_from_torch", "(", "self", ",", "batch", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "trainers", ")", ")", ":", "\n", "            ", "self", ".", "trainers", "[", "i", "]", ".", "train_from_torch", "(", "batch", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "trainers", "[", "i", "]", ".", "get_diagnostics", "(", ")", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "eval_statistics", "[", "self", ".", "trainer_names", "[", "i", "]", "+", "'/'", "+", "k", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.trainers.multi_trainer.MultiTrainer.get_diagnostics": [[40, 42], ["None"], "methods", ["None"], ["", "", "", "def", "get_diagnostics", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "eval_statistics", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.trainers.multi_trainer.MultiTrainer.end_epoch": [[43, 46], ["trainer.end_epoch"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.end_epoch"], ["", "def", "end_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "for", "trainer", "in", "self", ".", "trainers", ":", "\n", "            ", "trainer", ".", "end_epoch", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.trainers.multi_trainer.MultiTrainer.networks": [[47, 53], ["networks.extend"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "networks", "(", "self", ")", ":", "\n", "        ", "networks", "=", "[", "]", "\n", "for", "trainer", "in", "self", ".", "trainers", ":", "\n", "            ", "networks", ".", "extend", "(", "trainer", ".", "networks", ")", "\n", "", "return", "networks", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.trainers.multi_trainer.MultiTrainer.get_snapshot": [[54, 60], ["dict", "range", "len", "multi_trainer.MultiTrainer.trainers[].get_diagnostics().items", "multi_trainer.MultiTrainer.trainers[].get_diagnostics"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchTrainer.get_diagnostics"], ["", "def", "get_snapshot", "(", "self", ")", ":", "\n", "        ", "snapshot", "=", "dict", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "trainers", ")", ")", ":", "\n", "            ", "for", "k", ",", "v", "in", "self", ".", "trainers", "[", "i", "]", ".", "get_diagnostics", "(", ")", ".", "items", "(", ")", ":", "\n", "                ", "snapshot", "[", "self", ".", "trainer_names", "[", "i", "]", "+", "'/'", "+", "k", "]", "=", "v", "\n", "", "", "return", "snapshot", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.trainers.trainer.Trainer.train": [[6, 9], ["None"], "methods", ["None"], ["    ", "@", "abc", ".", "abstractmethod", "\n", "def", "train", "(", "self", ",", "data", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.trainers.trainer.Trainer.end_epoch": [[10, 12], ["None"], "methods", ["None"], ["", "def", "end_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.trainers.trainer.Trainer.get_snapshot": [[13, 15], ["None"], "methods", ["None"], ["", "def", "get_snapshot", "(", "self", ")", ":", "\n", "        ", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.trainers.trainer.Trainer.get_diagnostics": [[16, 18], ["None"], "methods", ["None"], ["", "def", "get_diagnostics", "(", "self", ")", ":", "\n", "        ", "return", "{", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.mbrl.mbrl.MBRLTrainer.__init__": [[12, 40], ["lifelong_rl.core.rl_algorithms.torch_rl_algorithm.TorchTrainer.__init__", "mbrl.MBRLTrainer.construct_optimizer", "collections.OrderedDict", "min"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__", "home.repos.pwc.inspect_result.kzl_lifelong_rl.mbrl.mbrl.MBRLTrainer.construct_optimizer"], ["replay_buffer", "=", "config", "[", "'replay_buffer'", "]", ",", "\n", "exploration_data_collector", "=", "expl_path_collector", ",", "\n", "evaluation_data_collector", "=", "eval_path_collector", ",", "\n", "**", "config", "[", "'algorithm_kwargs'", "]", "\n", ")", "\n", "\n", "return", "algorithm", "\n", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.mbrl.mbrl.MBRLTrainer.construct_optimizer": [[41, 52], ["optimizer_class", "fcs[].parameters", "range", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.mbrl.mbrl.MBRLTrainer.train_from_buffer": [[53, 132], ["replay_buffer.get_transitions", "mbrl.MBRLTrainer.ensemble.fit_input_stats", "numpy.random.permutation", "max", "float", "int", "numpy.argsort", "int", "lifelong_rl.from_numpy", "lifelong_rl.from_numpy", "numpy.ceil", "mbrl.MBRLTrainer.ensemble.train", "range", "mbrl.MBRLTrainer.ensemble.eval", "numpy.mean", "range", "numpy.random.randint", "x_batch.view.view.view", "y_batch.view.view.view", "mbrl.MBRLTrainer.ensemble.get_loss", "mbrl.MBRLTrainer.optimizer.zero_grad", "mbrl.MBRLTrainer.backward", "mbrl.MBRLTrainer.optimizer.step", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "mbrl.MBRLTrainer.ensemble.get_loss", "sum", "lifelong_rl.get_numpy", "numpy.mean", "numpy.mean", "numpy.mean", "lifelong_rl.from_numpy", "lifelong_rl.from_numpy", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "lifelong_rl.get_numpy", "sorted", "abs", "sum"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.get_transitions", "home.repos.pwc.inspect_result.kzl_lifelong_rl.models.networks.ParallelizedEnsemble.fit_input_stats", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm.train", "home.repos.pwc.inspect_result.kzl_lifelong_rl.base.latent_prior_policy.PriorLatentPolicy.eval", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.dynamics_models.probabilistic_ensemble.ProbabilisticEnsemble.get_loss", "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.step", "home.repos.pwc.inspect_result.kzl_lifelong_rl.dynamics_models.probabilistic_ensemble.ProbabilisticEnsemble.get_loss", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.mbrl.mbrl.MBRLTrainer.train_from_torch": [[133, 135], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.mbrl.mbrl.MBRLTrainer.get_diagnostics": [[136, 138], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.mbrl.mbrl.MBRLTrainer.end_epoch": [[139, 141], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.mbrl.mbrl.MBRLTrainer.networks": [[142, 146], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.mbrl.mbrl.MBRLTrainer.get_snapshot": [[148, 151], ["dict"], "methods", ["None"], []], "home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.__init__": [[16, 45], ["lifelong_rl.core.rl_algorithms.torch_rl_algorithm.TorchTrainer.__init__", "numpy.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "policy_trainer", ",", "\n", "replay_buffer", ",", "\n", "state_dim", ",", "\n", "reward_func", "=", "None", ",", "\n", "relabel_goal_func", "=", "None", ",", "\n", "num_sampled_goals", "=", "1", ",", "\n", "relabel_method", "=", "'future'", ",", "\n", "policy_batch_size", "=", "256", ",", "\n", "num_policy_steps", "=", "1", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "policy_trainer", "=", "policy_trainer", "\n", "self", ".", "replay_buffer", "=", "replay_buffer", "\n", "self", ".", "state_dim", "=", "state_dim", "\n", "self", ".", "reward_func", "=", "reward_func", "\n", "self", ".", "relabel_goal_func", "=", "relabel_goal_func", "\n", "self", ".", "num_sampled_goals", "=", "num_sampled_goals", "\n", "self", ".", "relabel_method", "=", "relabel_method", "\n", "self", ".", "policy_batch_size", "=", "policy_batch_size", "\n", "self", ".", "num_policy_steps", "=", "num_policy_steps", "\n", "\n", "# Default goal methods: L2 distance & goal = desired state", "\n", "if", "self", ".", "reward_func", "is", "None", ":", "\n", "            ", "self", ".", "reward_func", "=", "lambda", "s", ",", "a", ",", "ns", ",", "g", ":", "np", ".", "linalg", ".", "norm", "(", "ns", "[", ":", "2", "]", "-", "g", ")", "<", ".1", "\n", "", "if", "self", ".", "relabel_goal_func", "is", "None", ":", "\n", "            ", "self", ".", "relabel_goal_func", "=", "lambda", "s", ",", "a", ",", "ns", ",", "g", ":", "ns", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.train_from_paths": [[46, 104], ["copy.deepcopy", "range", "len", "range", "numpy.array", "range", "her.HERTrainer.replay_buffer.random_batch", "her.HERTrainer.policy_trainer.train", "len", "numpy.array.append", "range", "range", "her.HERTrainer.relabel_goal_func", "len", "her.HERTrainer.replay_buffer.add_sample", "numpy.random.randint", "numpy.concatenate", "her.HERTrainer.reward_func", "lifelong_rl.get_numpy().mean", "numpy.concatenate", "numpy.concatenate", "lifelong_rl.get_numpy", "her.HERTrainer.learned_reward_func", "lifelong_rl.from_numpy", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.random_batch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm.train", "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.add_sample", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.get_numpy", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.from_numpy"], ["", "", "def", "train_from_paths", "(", "self", ",", "paths", ")", ":", "\n", "\n", "        ", "\"\"\"\n        Path processing\n        \"\"\"", "\n", "\n", "paths", "=", "copy", ".", "deepcopy", "(", "paths", ")", "\n", "for", "path", "in", "paths", ":", "\n", "            ", "obs", ",", "next_obs", "=", "path", "[", "'observations'", "]", ",", "path", "[", "'next_observations'", "]", "\n", "states", ",", "next_states", "=", "obs", "[", ":", ",", ":", "self", ".", "state_dim", "]", ",", "next_obs", "[", ":", ",", ":", "self", ".", "state_dim", "]", "\n", "goals", "=", "obs", "[", ":", ",", "self", ".", "state_dim", ":", "2", "*", "self", ".", "state_dim", "]", "\n", "actions", "=", "path", "[", "'actions'", "]", "\n", "terminals", "=", "path", "[", "'terminals'", "]", "# this is probably always False, but might want it?", "\n", "path_len", "=", "len", "(", "obs", ")", "\n", "\n", "# Relabel goals based on transitions taken", "\n", "relabeled_goals", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "len", "(", "obs", ")", ")", ":", "\n", "                ", "relabeled_goals", ".", "append", "(", "self", ".", "relabel_goal_func", "(", "\n", "states", "[", "t", "]", ",", "actions", "[", "t", "]", ",", "next_states", "[", "t", "]", ",", "goals", "[", "t", "]", ",", "\n", ")", ")", "\n", "", "relabeled_goals", "=", "np", ".", "array", "(", "relabeled_goals", ")", "\n", "\n", "# Add transitions & resampled goals to replay buffer", "\n", "for", "t", "in", "range", "(", "path_len", ")", ":", "\n", "                ", "goals_t", "=", "goals", "[", "t", ":", "t", "+", "1", "]", "\n", "for", "_", "in", "range", "(", "self", ".", "num_sampled_goals", ")", ":", "\n", "                    ", "if", "self", ".", "relabel_method", "==", "'future'", ":", "\n", "                        ", "goal_inds", "=", "np", ".", "random", ".", "randint", "(", "t", ",", "path_len", ",", "self", ".", "num_sampled_goals", ")", "\n", "goals_t", "=", "np", ".", "concatenate", "(", "[", "goals_t", ",", "relabeled_goals", "[", "goal_inds", "]", "]", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "NotImplementedError", "\n", "\n", "", "", "for", "k", "in", "range", "(", "len", "(", "goals_t", ")", ")", ":", "\n", "                    ", "if", "not", "self", ".", "learn_reward_func", ":", "\n", "                        ", "r", "=", "self", ".", "reward_func", "(", "states", "[", "t", "]", ",", "actions", "[", "t", "]", ",", "next_states", "[", "t", "]", ",", "goals_t", "[", "k", "]", ")", "\n", "", "else", ":", "\n", "                        ", "r", "=", "ptu", ".", "get_numpy", "(", "\n", "self", ".", "learned_reward_func", "(", "\n", "ptu", ".", "from_numpy", "(", "\n", "np", ".", "concatenate", "(", "[", "next_states", "[", "t", "]", ",", "goals", "[", "t", "]", "]", ")", ")", ")", ")", ".", "mean", "(", ")", "\n", "", "self", ".", "replay_buffer", ".", "add_sample", "(", "\n", "observation", "=", "np", ".", "concatenate", "(", "[", "states", "[", "t", "]", ",", "goals_t", "[", "k", "]", ",", "obs", "[", "t", ",", "2", "*", "self", ".", "state_dim", ":", "]", "]", ")", ",", "\n", "action", "=", "actions", "[", "t", "]", ",", "\n", "reward", "=", "r", ",", "\n", "terminal", "=", "terminals", "[", "t", "]", ",", "# not obvious what desired behavior is", "\n", "next_observation", "=", "np", ".", "concatenate", "(", "\n", "[", "next_states", "[", "t", ",", ":", "self", ".", "state_dim", "]", ",", "goals_t", "[", "k", "]", ",", "obs", "[", "t", ",", "2", "*", "self", ".", "state_dim", ":", "]", "]", ")", ",", "\n", "env_info", "=", "None", ",", "\n", ")", "\n", "\n", "", "", "", "\"\"\"\n        Off-policy training\n        \"\"\"", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "num_policy_steps", ")", ":", "\n", "            ", "train_data", "=", "self", ".", "replay_buffer", ".", "random_batch", "(", "self", ".", "policy_batch_size", ")", "\n", "self", ".", "policy_trainer", ".", "train", "(", "train_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.get_diagnostics": [[105, 107], ["her.HERTrainer.policy_trainer.get_diagnostics"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchTrainer.get_diagnostics"], ["", "", "def", "get_diagnostics", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "policy_trainer", ".", "get_diagnostics", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.end_epoch": [[108, 110], ["her.HERTrainer.policy_trainer.end_epoch"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.end_epoch"], ["", "def", "end_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "policy_trainer", ".", "end_epoch", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.networks": [[111, 114], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "networks", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "policy_trainer", ".", "networks", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.get_snapshot": [[115, 117], ["her.HERTrainer.policy_trainer.get_snapshot"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.get_snapshot"], ["", "def", "get_snapshot", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "policy_trainer", ".", "get_snapshot", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.ProxyEnv.__init__": [[13, 17], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "wrapped_env", ")", ":", "\n", "        ", "self", ".", "_wrapped_env", "=", "wrapped_env", "\n", "self", ".", "action_space", "=", "self", ".", "_wrapped_env", ".", "action_space", "\n", "self", ".", "observation_space", "=", "self", ".", "_wrapped_env", ".", "observation_space", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.ProxyEnv.wrapped_env": [[18, 21], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "wrapped_env", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped_env", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.ProxyEnv.reset": [[22, 24], ["wrappers.ProxyEnv._wrapped_env.reset"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped_env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.ProxyEnv.step": [[25, 27], ["wrappers.ProxyEnv._wrapped_env.step"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped_env", ".", "step", "(", "action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.ProxyEnv.render": [[28, 30], ["wrappers.ProxyEnv._wrapped_env.render"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.ProxyEnv.render"], ["", "def", "render", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped_env", ".", "render", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.ProxyEnv.horizon": [[31, 34], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "horizon", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped_env", ".", "horizon", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.ProxyEnv.terminate": [[35, 38], ["hasattr", "wrappers.ProxyEnv.wrapped_env.terminate"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.ProxyEnv.terminate"], ["", "def", "terminate", "(", "self", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ".", "wrapped_env", ",", "\"terminate\"", ")", ":", "\n", "            ", "self", ".", "wrapped_env", ".", "terminate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.ProxyEnv.__getattr__": [[39, 43], ["getattr", "AttributeError"], "methods", ["None"], ["", "", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "        ", "if", "attr", "==", "'_wrapped_env'", ":", "\n", "            ", "raise", "AttributeError", "(", ")", "\n", "", "return", "getattr", "(", "self", ".", "_wrapped_env", ",", "attr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.ProxyEnv.__getstate__": [[44, 53], ["None"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This is useful to override in case the wrapped env has some funky\n        __getstate__ that doesn't play well with overriding __getattr__.\n\n        The main problematic case is/was gym's EzPickle serialization scheme.\n        :return:\n        \"\"\"", "\n", "return", "self", ".", "__dict__", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.ProxyEnv.__setstate__": [[54, 56], ["wrappers.ProxyEnv.__dict__.update"], "methods", ["None"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "__dict__", ".", "update", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.ProxyEnv.__str__": [[57, 59], ["type"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'{}({})'", ".", "format", "(", "type", "(", "self", ")", ".", "__name__", ",", "self", ".", "wrapped_env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.HistoryEnv.__init__": [[62, 73], ["wrappers.ProxyEnv.__init__", "gym.spaces.Box", "collections.deque", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.ones"], ["    ", "def", "__init__", "(", "self", ",", "wrapped_env", ",", "history_len", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "wrapped_env", ")", "\n", "self", ".", "history_len", "=", "history_len", "\n", "\n", "high", "=", "np", ".", "inf", "*", "np", ".", "ones", "(", "\n", "self", ".", "history_len", "*", "self", ".", "observation_space", ".", "low", ".", "size", ")", "\n", "low", "=", "-", "high", "\n", "self", ".", "observation_space", "=", "Box", "(", "low", "=", "low", ",", "\n", "high", "=", "high", ",", "\n", ")", "\n", "self", ".", "history", "=", "deque", "(", "maxlen", "=", "self", ".", "history_len", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.HistoryEnv.step": [[74, 79], ["wrappers.ProxyEnv.step", "wrappers.HistoryEnv.history.append", "wrappers.HistoryEnv._get_history().flatten", "wrappers.HistoryEnv._get_history"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.step", "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.HistoryEnv._get_history"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "state", ",", "reward", ",", "done", ",", "info", "=", "super", "(", ")", ".", "step", "(", "action", ")", "\n", "self", ".", "history", ".", "append", "(", "state", ")", "\n", "flattened_history", "=", "self", ".", "_get_history", "(", ")", ".", "flatten", "(", ")", "\n", "return", "flattened_history", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.HistoryEnv.reset": [[80, 86], ["wrappers.ProxyEnv.reset", "collections.deque", "wrappers.HistoryEnv.history.append", "wrappers.HistoryEnv._get_history().flatten", "wrappers.HistoryEnv._get_history"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.reset", "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.HistoryEnv._get_history"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "state", "=", "super", "(", ")", ".", "reset", "(", ")", "\n", "self", ".", "history", "=", "deque", "(", "maxlen", "=", "self", ".", "history_len", ")", "\n", "self", ".", "history", ".", "append", "(", "state", ")", "\n", "flattened_history", "=", "self", ".", "_get_history", "(", ")", ".", "flatten", "(", ")", "\n", "return", "flattened_history", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.HistoryEnv._get_history": [[87, 95], ["list", "len", "range", "numpy.zeros", "list.append"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros"], ["", "def", "_get_history", "(", "self", ")", ":", "\n", "        ", "observations", "=", "list", "(", "self", ".", "history", ")", "\n", "\n", "obs_count", "=", "len", "(", "observations", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "history_len", "-", "obs_count", ")", ":", "\n", "            ", "dummy", "=", "np", ".", "zeros", "(", "self", ".", "_wrapped_env", ".", "observation_space", ".", "low", ".", "size", ")", "\n", "observations", ".", "append", "(", "dummy", ")", "\n", "", "return", "np", ".", "c_", "[", "observations", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.SwapColorEnv.__init__": [[103, 112], ["wrappers.ProxyEnv.__init__", "gym.spaces.Box", "numpy.ones().transpose", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.ones"], ["def", "__init__", "(", "self", ",", "wrapped_env", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "wrapped_env", ")", "\n", "\n", "self", ".", "_obs_shape", "=", "wrapped_env", ".", "observation_space", ".", "shape", "\n", "\n", "high", "=", "np", ".", "inf", "*", "np", ".", "ones", "(", "self", ".", "_obs_shape", ")", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "low", "=", "-", "high", "\n", "\n", "self", ".", "observation_space", "=", "Box", "(", "low", "=", "low", ",", "high", "=", "high", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.SwapColorEnv.obs_proc": [[113, 115], ["s.transpose"], "methods", ["None"], ["", "def", "obs_proc", "(", "self", ",", "s", ")", ":", "\n", "        ", "return", "s", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "/", "255", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.SwapColorEnv.step": [[116, 119], ["wrappers.ProxyEnv.step", "wrappers.SwapColorEnv.obs_proc"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.step", "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.SwapColorEnv.obs_proc"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "s", ",", "r", ",", "d", ",", "info", "=", "super", "(", ")", ".", "step", "(", "action", ")", "\n", "return", "self", ".", "obs_proc", "(", "s", ")", ",", "r", ",", "d", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.SwapColorEnv.reset": [[120, 123], ["wrappers.ProxyEnv.reset", "wrappers.SwapColorEnv.obs_proc"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.reset", "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.SwapColorEnv.obs_proc"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "s", "=", "super", "(", ")", ".", "reset", "(", ")", "\n", "return", "self", ".", "obs_proc", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.DiscretizeEnv.__init__": [[126, 138], ["wrappers.ProxyEnv.__init__", "gym.spaces.Discrete", "numpy.linspace", "numpy.array", "len", "range", "itertools.product", "len"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "wrapped_env", ",", "num_bins", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "wrapped_env", ")", "\n", "low", "=", "self", ".", "wrapped_env", ".", "action_space", ".", "low", "\n", "high", "=", "self", ".", "wrapped_env", ".", "action_space", ".", "high", "\n", "action_ranges", "=", "[", "\n", "np", ".", "linspace", "(", "low", "[", "i", "]", ",", "high", "[", "i", "]", ",", "num_bins", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "low", ")", ")", "\n", "]", "\n", "self", ".", "idx_to_continuous_action", "=", "[", "\n", "np", ".", "array", "(", "x", ")", "for", "x", "in", "itertools", ".", "product", "(", "*", "action_ranges", ")", "\n", "]", "\n", "self", ".", "action_space", "=", "Discrete", "(", "len", "(", "self", ".", "idx_to_continuous_action", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.DiscretizeEnv.step": [[139, 142], ["wrappers.ProxyEnv.step"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "continuous_action", "=", "self", ".", "idx_to_continuous_action", "[", "action", "]", "\n", "return", "super", "(", ")", ".", "step", "(", "continuous_action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.NormalizedBoxEnv.__init__": [[151, 174], ["wrappers.ProxyEnv.__init__", "numpy.ones", "gym.spaces.Box", "numpy.zeros_like", "numpy.array", "numpy.ones_like", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.ones", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros_like", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.ones_like"], ["def", "__init__", "(", "\n", "self", ",", "\n", "env", ",", "\n", "reward_scale", "=", "1.", ",", "\n", "obs_mean", "=", "None", ",", "\n", "obs_std", "=", "None", ",", "\n", ")", ":", "\n", "        ", "ProxyEnv", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "_should_normalize", "=", "not", "(", "obs_mean", "is", "None", "and", "obs_std", "is", "None", ")", "\n", "if", "self", ".", "_should_normalize", ":", "\n", "            ", "if", "obs_mean", "is", "None", ":", "\n", "                ", "obs_mean", "=", "np", ".", "zeros_like", "(", "env", ".", "observation_space", ".", "low", ")", "\n", "", "else", ":", "\n", "                ", "obs_mean", "=", "np", ".", "array", "(", "obs_mean", ")", "\n", "", "if", "obs_std", "is", "None", ":", "\n", "                ", "obs_std", "=", "np", ".", "ones_like", "(", "env", ".", "observation_space", ".", "low", ")", "\n", "", "else", ":", "\n", "                ", "obs_std", "=", "np", ".", "array", "(", "obs_std", ")", "\n", "", "", "self", ".", "_reward_scale", "=", "reward_scale", "\n", "self", ".", "_obs_mean", "=", "obs_mean", "\n", "self", ".", "_obs_std", "=", "obs_std", "\n", "ub", "=", "np", ".", "ones", "(", "self", ".", "_wrapped_env", ".", "action_space", ".", "shape", ")", "\n", "self", ".", "action_space", "=", "Box", "(", "-", "1", "*", "ub", ",", "ub", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.NormalizedBoxEnv.estimate_obs_stats": [[175, 181], ["numpy.mean", "numpy.std", "Exception"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean"], ["", "def", "estimate_obs_stats", "(", "self", ",", "obs_batch", ",", "override_values", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "_obs_mean", "is", "not", "None", "and", "not", "override_values", ":", "\n", "            ", "raise", "Exception", "(", "\"Observation mean and std already set. To \"", "\n", "\"override, set override_values to True.\"", ")", "\n", "", "self", ".", "_obs_mean", "=", "np", ".", "mean", "(", "obs_batch", ",", "axis", "=", "0", ")", "\n", "self", ".", "_obs_std", "=", "np", ".", "std", "(", "obs_batch", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.NormalizedBoxEnv._apply_normalize_obs": [[182, 184], ["None"], "methods", ["None"], ["", "def", "_apply_normalize_obs", "(", "self", ",", "obs", ")", ":", "\n", "        ", "return", "(", "obs", "-", "self", ".", "_obs_mean", ")", "/", "(", "self", ".", "_obs_std", "+", "1e-8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.NormalizedBoxEnv.step": [[185, 196], ["numpy.clip", "wrappers.NormalizedBoxEnv._wrapped_env.step", "wrappers.NormalizedBoxEnv._apply_normalize_obs"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.step", "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.NormalizedBoxEnv._apply_normalize_obs"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "lb", "=", "self", ".", "_wrapped_env", ".", "action_space", ".", "low", "\n", "ub", "=", "self", ".", "_wrapped_env", ".", "action_space", ".", "high", "\n", "scaled_action", "=", "lb", "+", "(", "action", "+", "1.", ")", "*", "0.5", "*", "(", "ub", "-", "lb", ")", "\n", "scaled_action", "=", "np", ".", "clip", "(", "scaled_action", ",", "lb", ",", "ub", ")", "\n", "\n", "wrapped_step", "=", "self", ".", "_wrapped_env", ".", "step", "(", "scaled_action", ")", "\n", "next_obs", ",", "reward", ",", "done", ",", "info", "=", "wrapped_step", "\n", "if", "self", ".", "_should_normalize", ":", "\n", "            ", "next_obs", "=", "self", ".", "_apply_normalize_obs", "(", "next_obs", ")", "\n", "", "return", "next_obs", ",", "reward", "*", "self", ".", "_reward_scale", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.NormalizedBoxEnv.__str__": [[197, 199], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"Normalized: %s\"", "%", "self", ".", "_wrapped_env", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.NonTerminatingEnv.step": [[203, 206], ["wrappers.NonTerminatingEnv._wrapped_env.step"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.step"], ["    ", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "s", ",", "r", ",", "d", ",", "inf", "=", "self", ".", "_wrapped_env", ".", "step", "(", "action", ")", "\n", "return", "s", ",", "r", ",", "False", ",", "inf", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.NonTerminatingEnv.__str__": [[207, 209], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'Non-terminating: %s'", "%", "self", ".", "_wrapped_env", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.ContinualLifelongEnv.__init__": [[213, 220], ["wrappers.ProxyEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "wrapped_env", ",", "switch_every", ",", "envs_list", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "wrapped_env", ")", "\n", "\n", "self", ".", "switch_every", "=", "switch_every", "\n", "self", ".", "envs_list", "=", "envs_list", "\n", "\n", "self", ".", "_n_timesteps", ",", "self", ".", "_ptr", "=", "0", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.ContinualLifelongEnv.step": [[221, 227], ["wrappers.ProxyEnv.step", "wrappers.ContinualLifelongEnv.advance_env"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.step", "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.ContinualLifelongEnv.advance_env"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "transition", "=", "super", "(", ")", ".", "step", "(", "action", ")", "\n", "self", ".", "_n_timesteps", "+=", "1", "\n", "if", "self", ".", "_n_timesteps", "%", "self", ".", "switch_every", ":", "\n", "            ", "self", ".", "advance_env", "(", ")", "\n", "", "return", "transition", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.ContinualLifelongEnv.advance_env": [[228, 233], ["copy.deepcopy", "wrappers.ContinualLifelongEnv._wrapped_env.set_env_state", "wrappers.ContinualLifelongEnv._wrapped_env.get_env_state", "len"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.hopper_env.LifelongHopperEnv.set_env_state", "home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.hopper_env.LifelongHopperEnv.get_env_state"], ["", "def", "advance_env", "(", "self", ")", ":", "\n", "        ", "env_state", "=", "copy", ".", "deepcopy", "(", "self", ".", "_wrapped_env", ".", "get_env_state", "(", ")", ")", "\n", "self", ".", "_ptr", "=", "(", "self", ".", "_ptr", "+", "1", ")", "%", "len", "(", "self", ".", "envs_list", ")", "\n", "self", ".", "_wrapped_env", "=", "self", ".", "envs_list", "[", "self", ".", "_ptr", "]", "\n", "self", ".", "_wrapped_env", ".", "set_env_state", "(", "env_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.FollowerEnv.__init__": [[237, 241], ["wrappers.ProxyEnv.__init__", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env_to_follow", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "copy", ".", "deepcopy", "(", "env_to_follow", ")", ")", "\n", "\n", "self", ".", "parent_env", "=", "env_to_follow", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.FollowerEnv.reset": [[242, 245], ["copy.deepcopy", "wrappers.ProxyEnv.reset"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_wrapped_env", "=", "copy", ".", "deepcopy", "(", "self", ".", "parent_env", ")", "\n", "return", "super", "(", ")", ".", "reset", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.env_processor.make_env": [[9, 64], ["dict", "NameError", "base_env", "isinstance", "lifelong_rl.envs.wrappers.NormalizedBoxEnv", "lifelong_rl.envs.wrappers.NonTerminatingEnv"], "function", ["None"], ["def", "make_env", "(", "env_name", ",", "terminates", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "env", "=", "None", "\n", "base_env", "=", "None", "\n", "env_infos", "=", "dict", "(", ")", "\n", "\n", "\"\"\"\n    Episodic reinforcement learning\n    \"\"\"", "\n", "if", "env_name", "==", "'HalfCheetah'", ":", "\n", "        ", "from", "gym", ".", "envs", ".", "mujoco", "import", "HalfCheetahEnv", "\n", "base_env", "=", "HalfCheetahEnv", "\n", "env_infos", "[", "'mujoco'", "]", "=", "True", "\n", "", "elif", "env_name", "==", "'Hopper'", ":", "\n", "        ", "from", "gym", ".", "envs", ".", "mujoco", "import", "HopperEnv", "\n", "base_env", "=", "HopperEnv", "\n", "env_infos", "[", "'mujoco'", "]", "=", "True", "\n", "", "elif", "env_name", "==", "'InvertedPendulum'", ":", "\n", "        ", "from", "gym", ".", "envs", ".", "mujoco", "import", "InvertedPendulumEnv", "\n", "base_env", "=", "InvertedPendulumEnv", "\n", "env_infos", "[", "'mujoco'", "]", "=", "True", "\n", "", "elif", "env_name", "==", "'Humanoid'", ":", "\n", "        ", "from", "lifelong_rl", ".", "envs", ".", "environments", ".", "humanoid_env", "import", "HumanoidTruncatedObsEnv", "as", "HumanoidEnv", "\n", "from", "gym", ".", "envs", ".", "mujoco", "import", "HumanoidEnv", "\n", "base_env", "=", "HumanoidEnv", "\n", "env_infos", "[", "'mujoco'", "]", "=", "True", "\n", "\n", "", "\"\"\"\n    Lifelong reinforcement learning\n    \"\"\"", "\n", "if", "env_name", "==", "'LifelongHopper'", ":", "\n", "        ", "from", "lifelong_rl", ".", "envs", ".", "environments", ".", "hopper_env", "import", "LifelongHopperEnv", "\n", "base_env", "=", "LifelongHopperEnv", "\n", "env_infos", "[", "'mujoco'", "]", "=", "True", "\n", "", "elif", "env_name", "==", "'LifelongAnt'", ":", "\n", "        ", "from", "lifelong_rl", ".", "envs", ".", "environments", ".", "ant_env", "import", "LifelongAntEnv", "\n", "base_env", "=", "LifelongAntEnv", "\n", "env_infos", "[", "'mujoco'", "]", "=", "True", "\n", "", "elif", "env_name", "==", "'Gridworld'", ":", "\n", "        ", "from", "lifelong_rl", ".", "envs", ".", "environments", ".", "continuous_gridworld", ".", "cont_gridworld", "import", "ContinuousGridworld", "\n", "base_env", "=", "ContinuousGridworld", "\n", "env_infos", "[", "'mujoco'", "]", "=", "False", "\n", "\n", "", "if", "env", "is", "None", "and", "base_env", "is", "None", ":", "\n", "        ", "raise", "NameError", "(", "'env_name not recognized'", ")", "\n", "\n", "", "if", "env", "is", "None", ":", "\n", "        ", "env", "=", "base_env", "(", "**", "kwargs", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "env", ".", "action_space", ",", "gym", ".", "spaces", ".", "Discrete", ")", ":", "\n", "        ", "env", "=", "NormalizedBoxEnv", "(", "env", ")", "\n", "\n", "", "if", "not", "terminates", ":", "\n", "        ", "env", "=", "NonTerminatingEnv", "(", "env", ")", "\n", "\n", "", "return", "env", ",", "env_infos", "\n", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.env_utils.get_asset_full_path": [[8, 10], ["os.path.join"], "function", ["None"], ["def", "get_asset_full_path", "(", "file_name", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "ENV_ASSET_DIR", ",", "file_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.env_utils.get_dim": [[12, 23], ["isinstance", "isinstance", "isinstance", "sum", "hasattr", "TypeError", "env_utils.get_dim"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.env_utils.get_dim"], ["", "def", "get_dim", "(", "space", ")", ":", "\n", "    ", "if", "isinstance", "(", "space", ",", "Box", ")", ":", "\n", "        ", "return", "space", ".", "low", ".", "size", "\n", "", "elif", "isinstance", "(", "space", ",", "Discrete", ")", ":", "\n", "        ", "return", "space", ".", "n", "\n", "", "elif", "isinstance", "(", "space", ",", "Tuple", ")", ":", "\n", "        ", "return", "sum", "(", "get_dim", "(", "subspace", ")", "for", "subspace", "in", "space", ".", "spaces", ")", "\n", "", "elif", "hasattr", "(", "space", ",", "'flat_dim'", ")", ":", "\n", "        ", "return", "space", ".", "flat_dim", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\"Unknown space: {}\"", ".", "format", "(", "space", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.env_utils.mode": [[25, 30], ["getattr"], "function", ["None"], ["", "", "def", "mode", "(", "env", ",", "mode_type", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "getattr", "(", "env", ",", "mode_type", ")", "(", ")", "\n", "", "except", "AttributeError", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.ant_env.LifelongAntEnv.__init__": [[21, 67], ["gym.utils.EzPickle.__init__", "os.path.abspath", "gym.envs.mujoco.mujoco_env.MujocoEnv.__init__", "os.path.join", "locals"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__", "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "xml_file", "=", "'ant.xml'", ",", "\n", "gear_ratio", "=", "30", ",", "\n", "ctrl_cost_weight", "=", "0.01", ",", "\n", "contact_cost_weight", "=", "5e-4", ",", "\n", "healthy_reward", "=", "1.0", ",", "\n", "terminate_when_unhealthy", "=", "True", ",", "\n", "healthy_z_range", "=", "(", "0.2", ",", "1.2", ")", ",", "\n", "contact_force_range", "=", "(", "-", "1.0", ",", "1.0", ")", ",", "\n", "reset_noise_scale", "=", "0.1", ",", "\n", "exclude_current_positions_from_observation", "=", "True", ",", "\n", "target_vel", "=", "DEFAULT_VEL", ",", "\n", "height_cost", "=", "3", ",", "\n", "target_height", "=", "0.7", ",", "\n", "rgb_rendering_tracking", "=", "True", ",", "\n", "action_noise", "=", "0.", ",", "\n", ")", ":", "\n", "        ", "utils", ".", "EzPickle", ".", "__init__", "(", "**", "locals", "(", ")", ")", "\n", "\n", "self", ".", "_ctrl_cost_weight", "=", "ctrl_cost_weight", "\n", "self", ".", "_contact_cost_weight", "=", "contact_cost_weight", "\n", "\n", "self", ".", "_healthy_reward", "=", "healthy_reward", "\n", "self", ".", "_terminate_when_unhealthy", "=", "terminate_when_unhealthy", "\n", "self", ".", "_healthy_z_range", "=", "healthy_z_range", "\n", "\n", "self", ".", "_contact_force_range", "=", "contact_force_range", "\n", "\n", "self", ".", "_reset_noise_scale", "=", "reset_noise_scale", "\n", "\n", "self", ".", "_exclude_current_positions_from_observation", "=", "(", "\n", "exclude_current_positions_from_observation", ")", "\n", "\n", "self", ".", "_target_vel", "=", "target_vel", "\n", "self", ".", "_target_vel_reward_weight", "=", "1", "\n", "\n", "self", ".", "_height_cost", "=", "height_cost", "\n", "self", ".", "_target_height", "=", "target_height", "\n", "\n", "self", ".", "action_noise", "=", "action_noise", "\n", "\n", "xml_path", "=", "'lifelong_rl/envs/environments/assets/'", "\n", "model_path", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "xml_path", ",", "xml_file", ")", ")", "\n", "\n", "mujoco_env", ".", "MujocoEnv", ".", "__init__", "(", "self", ",", "model_path", ",", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.ant_env.LifelongAntEnv.get_env_state": [[72, 74], ["ant_env.LifelongAntEnv.sim.get_state"], "methods", ["None"], ["def", "get_env_state", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "sim", ".", "get_state", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.ant_env.LifelongAntEnv.set_env_state": [[75, 77], ["ant_env.LifelongAntEnv.sim.set_state"], "methods", ["None"], ["", "def", "set_env_state", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "sim", ".", "set_state", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.ant_env.LifelongAntEnv.healthy_reward": [[82, 88], ["float"], "methods", ["None"], ["@", "property", "\n", "def", "healthy_reward", "(", "self", ")", ":", "\n", "        ", "return", "float", "(", "\n", "self", ".", "is_healthy", "\n", "or", "self", ".", "_terminate_when_unhealthy", "\n", ")", "*", "self", ".", "_healthy_reward", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.ant_env.LifelongAntEnv.control_cost": [[89, 92], ["numpy.sum", "numpy.square"], "methods", ["None"], ["", "def", "control_cost", "(", "self", ",", "action", ")", ":", "\n", "        ", "control_cost", "=", "self", ".", "_ctrl_cost_weight", "*", "np", ".", "sum", "(", "np", ".", "square", "(", "action", ")", ")", "\n", "return", "control_cost", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.ant_env.LifelongAntEnv.contact_forces": [[93, 99], ["numpy.clip"], "methods", ["None"], ["", "@", "property", "\n", "def", "contact_forces", "(", "self", ")", ":", "\n", "        ", "raw_contact_forces", "=", "self", ".", "sim", ".", "data", ".", "cfrc_ext", "\n", "min_value", ",", "max_value", "=", "self", ".", "_contact_force_range", "\n", "contact_forces", "=", "np", ".", "clip", "(", "raw_contact_forces", ",", "min_value", ",", "max_value", ")", "\n", "return", "contact_forces", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.ant_env.LifelongAntEnv.contact_cost": [[100, 105], ["numpy.sum", "numpy.square"], "methods", ["None"], ["", "@", "property", "\n", "def", "contact_cost", "(", "self", ")", ":", "\n", "        ", "contact_cost", "=", "self", ".", "_contact_cost_weight", "*", "np", ".", "sum", "(", "\n", "np", ".", "square", "(", "self", ".", "contact_forces", ")", ")", "\n", "return", "contact_cost", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.ant_env.LifelongAntEnv.set_target_vel": [[106, 108], ["None"], "methods", ["None"], ["", "def", "set_target_vel", "(", "self", ",", "vel", ")", ":", "\n", "        ", "self", ".", "_target_vel", "=", "vel", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.ant_env.LifelongAntEnv.get_target_vel": [[109, 114], ["None"], "methods", ["None"], ["", "def", "get_target_vel", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_target_vel", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "_target_vel", "\n", "", "else", ":", "\n", "            ", "return", "DEFAULT_VEL", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.ant_env.LifelongAntEnv.is_healthy": [[115, 121], ["ant_env.LifelongAntEnv.state_vector", "numpy.isfinite().all", "numpy.isfinite"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "is_healthy", "(", "self", ")", ":", "\n", "        ", "state", "=", "self", ".", "state_vector", "(", ")", "\n", "min_z", ",", "max_z", "=", "self", ".", "_healthy_z_range", "\n", "is_healthy", "=", "(", "np", ".", "isfinite", "(", "state", ")", ".", "all", "(", ")", "and", "min_z", "<=", "state", "[", "2", "]", "<=", "max_z", ")", "\n", "return", "is_healthy", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.ant_env.LifelongAntEnv.done": [[122, 128], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "done", "(", "self", ")", ":", "\n", "        ", "done", "=", "(", "not", "self", ".", "is_healthy", "\n", "if", "self", ".", "_terminate_when_unhealthy", "\n", "else", "False", ")", "\n", "return", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.ant_env.LifelongAntEnv.step": [[129, 164], ["action.clip.clip.clip", "[].copy", "ant_env.LifelongAntEnv.do_simulation", "[].copy", "ant_env.LifelongAntEnv.get_target_vel", "abs", "ant_env.LifelongAntEnv._get_obs", "numpy.random.randn", "ant_env.LifelongAntEnv.state_vector", "numpy.sum", "ant_env.LifelongAntEnv.get_target_vel", "ant_env.LifelongAntEnv.get_target_vel", "ant_env.LifelongAntEnv.state_vector", "ant_env.LifelongAntEnv.state_vector", "ant_env.LifelongAntEnv.get_body_com", "ant_env.LifelongAntEnv.get_body_com"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.hopper_env.LifelongHopperEnv.get_target_vel", "home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.hopper_env.LifelongHopperEnv._get_obs", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.randn", "home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.hopper_env.LifelongHopperEnv.get_target_vel", "home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.hopper_env.LifelongHopperEnv.get_target_vel"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "action", "+=", "np", ".", "random", ".", "randn", "(", "*", "action", ".", "shape", ")", "*", "self", ".", "action_noise", "\n", "action", "=", "action", ".", "clip", "(", "-", "1.", ",", "1.", ")", "\n", "\n", "xy_position_before", "=", "self", ".", "get_body_com", "(", "'torso'", ")", "[", ":", "2", "]", ".", "copy", "(", ")", "\n", "self", ".", "do_simulation", "(", "action", ",", "self", ".", "frame_skip", ")", "\n", "xy_position_after", "=", "self", ".", "get_body_com", "(", "'torso'", ")", "[", ":", "2", "]", ".", "copy", "(", ")", "\n", "\n", "xy_velocity", "=", "(", "xy_position_after", "-", "xy_position_before", ")", "/", "self", ".", "dt", "\n", "x_velocity", ",", "y_velocity", "=", "xy_velocity", "\n", "\n", "z", "=", "self", ".", "state_vector", "(", ")", "[", "2", "]", "\n", "\n", "rewards", "=", "self", ".", "get_target_vel", "(", ")", "\n", "\n", "vel_cost", "=", "abs", "(", "x_velocity", "-", "self", ".", "get_target_vel", "(", ")", ")", "\n", "height_cost", "=", "self", ".", "_height_cost", "*", "(", "z", "-", "self", ".", "_target_height", ")", "**", "2", "\n", "action_cost", "=", ".01", "*", "np", ".", "sum", "(", "action", "**", "2", ")", "\n", "costs", "=", "vel_cost", "+", "height_cost", "+", "action_cost", "\n", "\n", "reward", "=", "rewards", "-", "costs", "\n", "done", "=", "not", "self", ".", "is_healthy", "\n", "\n", "observation", "=", "self", ".", "_get_obs", "(", ")", "\n", "\n", "info", "=", "{", "\n", "'x velocity'", ":", "x_velocity", ",", "\n", "'target velocity'", ":", "self", ".", "get_target_vel", "(", ")", ",", "\n", "'z'", ":", "z", ",", "\n", "'x'", ":", "self", ".", "state_vector", "(", ")", "[", "0", "]", ",", "\n", "'y'", ":", "self", ".", "state_vector", "(", ")", "[", "1", "]", ",", "\n", "'height cost'", ":", "height_cost", ",", "\n", "}", "\n", "\n", "return", "observation", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.ant_env.LifelongAntEnv._get_obs": [[165, 175], ["numpy.concatenate", "numpy.concatenate"], "methods", ["None"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_exclude_current_positions_from_observation", ":", "\n", "            ", "return", "np", ".", "concatenate", "(", "[", "\n", "self", ".", "sim", ".", "data", ".", "qpos", ".", "flat", "[", "2", ":", "]", ",", "\n", "self", ".", "sim", ".", "data", ".", "qvel", ".", "flat", ",", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "concatenate", "(", "[", "\n", "self", ".", "sim", ".", "data", ".", "qpos", ".", "flat", ",", "\n", "self", ".", "sim", ".", "data", ".", "qvel", ".", "flat", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.ant_env.LifelongAntEnv.get_obs": [[177, 179], ["ant_env.LifelongAntEnv._get_obs"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.hopper_env.LifelongHopperEnv._get_obs"], ["", "", "def", "get_obs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.ant_env.LifelongAntEnv.reset_model": [[180, 193], ["ant_env.LifelongAntEnv.set_state", "ant_env.LifelongAntEnv._get_obs", "ant_env.LifelongAntEnv.np_random.uniform", "ant_env.LifelongAntEnv.np_random.randn"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.hopper_env.LifelongHopperEnv._get_obs", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.randn"], ["", "def", "reset_model", "(", "self", ")", ":", "\n", "        ", "noise_low", "=", "-", "self", ".", "_reset_noise_scale", "\n", "noise_high", "=", "self", ".", "_reset_noise_scale", "\n", "\n", "qpos", "=", "self", ".", "init_qpos", "+", "self", ".", "np_random", ".", "uniform", "(", "\n", "low", "=", "noise_low", ",", "high", "=", "noise_high", ",", "size", "=", "self", ".", "model", ".", "nq", ")", "\n", "qvel", "=", "self", ".", "init_qvel", "+", "self", ".", "_reset_noise_scale", "*", "self", ".", "np_random", ".", "randn", "(", "\n", "self", ".", "model", ".", "nv", ")", "\n", "self", ".", "set_state", "(", "qpos", ",", "qvel", ")", "\n", "\n", "observation", "=", "self", ".", "_get_obs", "(", ")", "\n", "\n", "return", "observation", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.ant_env.LifelongAntEnv.viewer_setup": [[194, 200], ["DEFAULT_CAMERA_CONFIG.items", "isinstance", "setattr", "getattr"], "methods", ["None"], ["", "def", "viewer_setup", "(", "self", ")", ":", "\n", "        ", "for", "key", ",", "value", "in", "DEFAULT_CAMERA_CONFIG", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "value", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "getattr", "(", "self", ".", "viewer", ".", "cam", ",", "key", ")", "[", ":", "]", "=", "value", "\n", "", "else", ":", "\n", "                ", "setattr", "(", "self", ".", "viewer", ".", "cam", ",", "key", ",", "value", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.humanoid_env.HumanoidTruncatedObsEnv.__init__": [[21, 24], ["gym.envs.mujoco.mujoco_env.MujocoEnv.__init__", "gym.utils.EzPickle.__init__"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__", "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "mujoco_env", ".", "MujocoEnv", ".", "__init__", "(", "self", ",", "'humanoid.xml'", ",", "5", ")", "\n", "utils", ".", "EzPickle", ".", "__init__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.humanoid_env.HumanoidTruncatedObsEnv._get_obs": [[25, 29], ["numpy.concatenate"], "methods", ["None"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "data", "=", "self", ".", "sim", ".", "data", "\n", "return", "np", ".", "concatenate", "(", "[", "data", ".", "qpos", ".", "flat", "[", "2", ":", "]", ",", "\n", "data", ".", "qvel", ".", "flat", ",", "\n", "# data.cinert.flat,", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.humanoid_env.HumanoidTruncatedObsEnv.step": [[35, 49], ["humanoid_env.mass_center", "humanoid_env.HumanoidTruncatedObsEnv.do_simulation", "humanoid_env.mass_center", "min", "bool", "numpy.square().sum", "numpy.square().sum", "humanoid_env.HumanoidTruncatedObsEnv._get_obs", "dict", "numpy.square", "numpy.square"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.humanoid_env.mass_center", "home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.humanoid_env.mass_center", "home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.hopper_env.LifelongHopperEnv._get_obs"], ["", "def", "step", "(", "self", ",", "a", ")", ":", "\n", "        ", "pos_before", "=", "mass_center", "(", "self", ".", "model", ",", "self", ".", "sim", ")", "\n", "self", ".", "do_simulation", "(", "a", ",", "self", ".", "frame_skip", ")", "\n", "pos_after", "=", "mass_center", "(", "self", ".", "model", ",", "self", ".", "sim", ")", "\n", "alive_bonus", "=", "5.0", "\n", "data", "=", "self", ".", "sim", ".", "data", "\n", "lin_vel_cost", "=", "0.25", "*", "(", "pos_after", "-", "pos_before", ")", "/", "self", ".", "model", ".", "opt", ".", "timestep", "\n", "quad_ctrl_cost", "=", "0.1", "*", "np", ".", "square", "(", "data", ".", "ctrl", ")", ".", "sum", "(", ")", "\n", "quad_impact_cost", "=", ".5e-6", "*", "np", ".", "square", "(", "data", ".", "cfrc_ext", ")", ".", "sum", "(", ")", "\n", "quad_impact_cost", "=", "min", "(", "quad_impact_cost", ",", "10", ")", "\n", "reward", "=", "lin_vel_cost", "-", "quad_ctrl_cost", "-", "quad_impact_cost", "+", "alive_bonus", "\n", "qpos", "=", "self", ".", "sim", ".", "data", ".", "qpos", "\n", "done", "=", "bool", "(", "(", "qpos", "[", "2", "]", "<", "1.0", ")", "or", "(", "qpos", "[", "2", "]", ">", "2.0", ")", ")", "\n", "return", "self", ".", "_get_obs", "(", ")", ",", "reward", ",", "done", ",", "dict", "(", "reward_linvel", "=", "lin_vel_cost", ",", "reward_quadctrl", "=", "-", "quad_ctrl_cost", ",", "reward_alive", "=", "alive_bonus", ",", "reward_impact", "=", "-", "quad_impact_cost", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.humanoid_env.HumanoidTruncatedObsEnv.reset_model": [[50, 57], ["humanoid_env.HumanoidTruncatedObsEnv.set_state", "humanoid_env.HumanoidTruncatedObsEnv._get_obs", "humanoid_env.HumanoidTruncatedObsEnv.np_random.uniform", "humanoid_env.HumanoidTruncatedObsEnv.np_random.uniform"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.hopper_env.LifelongHopperEnv._get_obs"], ["", "def", "reset_model", "(", "self", ")", ":", "\n", "        ", "c", "=", "0.01", "\n", "self", ".", "set_state", "(", "\n", "self", ".", "init_qpos", "+", "self", ".", "np_random", ".", "uniform", "(", "low", "=", "-", "c", ",", "high", "=", "c", ",", "size", "=", "self", ".", "model", ".", "nq", ")", ",", "\n", "self", ".", "init_qvel", "+", "self", ".", "np_random", ".", "uniform", "(", "low", "=", "-", "c", ",", "high", "=", "c", ",", "size", "=", "self", ".", "model", ".", "nv", ",", ")", "\n", ")", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.humanoid_env.HumanoidTruncatedObsEnv.viewer_setup": [[58, 63], ["None"], "methods", ["None"], ["", "def", "viewer_setup", "(", "self", ")", ":", "\n", "        ", "self", ".", "viewer", ".", "cam", ".", "trackbodyid", "=", "1", "\n", "self", ".", "viewer", ".", "cam", ".", "distance", "=", "self", ".", "model", ".", "stat", ".", "extent", "*", "1.0", "\n", "self", ".", "viewer", ".", "cam", ".", "lookat", "[", "2", "]", "=", "2.0", "\n", "self", ".", "viewer", ".", "cam", ".", "elevation", "=", "-", "20", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.humanoid_env.mass_center": [[6, 10], ["numpy.expand_dims", "numpy.sum", "numpy.sum"], "function", ["None"], ["def", "mass_center", "(", "model", ",", "sim", ")", ":", "\n", "    ", "mass", "=", "np", ".", "expand_dims", "(", "model", ".", "body_mass", ",", "1", ")", "\n", "xpos", "=", "sim", ".", "data", ".", "xipos", "\n", "return", "(", "np", ".", "sum", "(", "mass", "*", "xpos", ",", "0", ")", "/", "np", ".", "sum", "(", "mass", ")", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.hopper_env.LifelongHopperEnv.__init__": [[21, 60], ["gym.utils.EzPickle.__init__", "gym.envs.mujoco.mujoco_env.MujocoEnv.__init__", "float", "locals"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__", "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "xml_file", "=", "'hopper.xml'", ",", "\n", "forward_reward_weight", "=", "1.0", ",", "\n", "ctrl_cost_weight", "=", "1e-3", ",", "\n", "healthy_reward", "=", "1.0", ",", "\n", "terminate_when_unhealthy", "=", "True", ",", "\n", "healthy_state_range", "=", "(", "-", "100.0", ",", "100.0", ")", ",", "\n", "healthy_z_range", "=", "(", "0.7", ",", "float", "(", "'inf'", ")", ")", ",", "\n", "healthy_angle_range", "=", "(", "-", "0.2", ",", "0.2", ")", ",", "\n", "reset_noise_scale", "=", "5e-3", ",", "\n", "exclude_current_positions_from_observation", "=", "True", ",", "\n", "target_vel", "=", "None", ",", "\n", "target_vel_in_obs", "=", "False", ",", "\n", "rgb_rendering_tracking", "=", "True", ",", "\n", ")", ":", "\n", "        ", "utils", ".", "EzPickle", ".", "__init__", "(", "**", "locals", "(", ")", ")", "\n", "\n", "self", ".", "_forward_reward_weight", "=", "forward_reward_weight", "\n", "\n", "self", ".", "_ctrl_cost_weight", "=", "ctrl_cost_weight", "\n", "\n", "self", ".", "_healthy_reward", "=", "healthy_reward", "\n", "self", ".", "_terminate_when_unhealthy", "=", "terminate_when_unhealthy", "\n", "\n", "self", ".", "_healthy_state_range", "=", "healthy_state_range", "\n", "self", ".", "_healthy_z_range", "=", "healthy_z_range", "\n", "self", ".", "_healthy_angle_range", "=", "healthy_angle_range", "\n", "\n", "self", ".", "_reset_noise_scale", "=", "reset_noise_scale", "\n", "\n", "self", ".", "_exclude_current_positions_from_observation", "=", "(", "\n", "exclude_current_positions_from_observation", ")", "\n", "\n", "self", ".", "_target_vel", "=", "target_vel", "\n", "self", ".", "_target_vel_in_obs", "=", "target_vel_in_obs", "\n", "self", ".", "_target_vel_reward_weight", "=", "1", "\n", "\n", "mujoco_env", ".", "MujocoEnv", ".", "__init__", "(", "self", ",", "xml_file", ",", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.hopper_env.LifelongHopperEnv.get_env_state": [[65, 67], ["hopper_env.LifelongHopperEnv.sim.get_state"], "methods", ["None"], ["def", "get_env_state", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "sim", ".", "get_state", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.hopper_env.LifelongHopperEnv.set_env_state": [[68, 70], ["hopper_env.LifelongHopperEnv.sim.set_state"], "methods", ["None"], ["", "def", "set_env_state", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "sim", ".", "set_state", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.hopper_env.LifelongHopperEnv.healthy_reward": [[75, 81], ["float"], "methods", ["None"], ["@", "property", "\n", "def", "healthy_reward", "(", "self", ")", ":", "\n", "        ", "return", "float", "(", "\n", "self", ".", "is_healthy", "\n", "or", "self", ".", "_terminate_when_unhealthy", "\n", ")", "*", "self", ".", "_healthy_reward", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.hopper_env.LifelongHopperEnv.control_cost": [[82, 85], ["numpy.sum", "numpy.square"], "methods", ["None"], ["", "def", "control_cost", "(", "self", ",", "action", ")", ":", "\n", "        ", "control_cost", "=", "self", ".", "_ctrl_cost_weight", "*", "np", ".", "sum", "(", "np", ".", "square", "(", "action", ")", ")", "\n", "return", "control_cost", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.hopper_env.LifelongHopperEnv.set_target_vel": [[86, 88], ["None"], "methods", ["None"], ["", "def", "set_target_vel", "(", "self", ",", "vel", ")", ":", "\n", "        ", "self", ".", "_target_vel", "=", "vel", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.hopper_env.LifelongHopperEnv.get_target_vel": [[89, 94], ["None"], "methods", ["None"], ["", "def", "get_target_vel", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_target_vel", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "_target_vel", "\n", "", "else", ":", "\n", "            ", "return", "DEFAULT_VEL", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.hopper_env.LifelongHopperEnv.is_healthy": [[95, 112], ["numpy.all", "all", "hopper_env.LifelongHopperEnv.state_vector", "numpy.logical_and"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "is_healthy", "(", "self", ")", ":", "\n", "        ", "z", ",", "angle", "=", "self", ".", "sim", ".", "data", ".", "qpos", "[", "1", ":", "3", "]", "\n", "state", "=", "self", ".", "state_vector", "(", ")", "[", "2", ":", "]", "\n", "\n", "min_state", ",", "max_state", "=", "self", ".", "_healthy_state_range", "\n", "min_z", ",", "max_z", "=", "self", ".", "_healthy_z_range", "\n", "min_angle", ",", "max_angle", "=", "self", ".", "_healthy_angle_range", "\n", "\n", "healthy_state", "=", "np", ".", "all", "(", "\n", "np", ".", "logical_and", "(", "min_state", "<", "state", ",", "state", "<", "max_state", ")", ")", "\n", "healthy_z", "=", "min_z", "<", "z", "<", "max_z", "\n", "healthy_angle", "=", "min_angle", "<", "angle", "<", "max_angle", "\n", "\n", "is_healthy", "=", "all", "(", "(", "healthy_state", ",", "healthy_z", ",", "healthy_angle", ")", ")", "\n", "\n", "return", "is_healthy", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.hopper_env.LifelongHopperEnv.done": [[113, 119], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "done", "(", "self", ")", ":", "\n", "        ", "done", "=", "(", "not", "self", ".", "is_healthy", "\n", "if", "self", ".", "_terminate_when_unhealthy", "\n", "else", "False", ")", "\n", "return", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.hopper_env.LifelongHopperEnv._get_obs": [[120, 135], ["hopper_env.LifelongHopperEnv.sim.data.qpos.flat.copy", "numpy.clip", "numpy.concatenate().ravel", "hopper_env.LifelongHopperEnv.sim.data.qvel.flat.copy", "numpy.array", "numpy.concatenate", "hopper_env.LifelongHopperEnv.get_target_vel"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.hopper_env.LifelongHopperEnv.get_target_vel"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "position", "=", "self", ".", "sim", ".", "data", ".", "qpos", ".", "flat", ".", "copy", "(", ")", "\n", "velocity", "=", "np", ".", "clip", "(", "\n", "self", ".", "sim", ".", "data", ".", "qvel", ".", "flat", ".", "copy", "(", ")", ",", "-", "10.", ",", "10.", ")", "\n", "\n", "if", "self", ".", "_exclude_current_positions_from_observation", ":", "\n", "            ", "position", "=", "position", "[", "1", ":", "]", "\n", "\n", "", "if", "self", ".", "_target_vel", "is", "not", "None", "and", "self", ".", "_target_vel_in_obs", ":", "\n", "            ", "target_vel", "=", "np", ".", "array", "(", "[", "self", ".", "get_target_vel", "(", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "target_vel", "=", "[", "]", "\n", "\n", "", "observation", "=", "np", ".", "concatenate", "(", "(", "position", ",", "velocity", ",", "target_vel", ")", ")", ".", "ravel", "(", ")", "\n", "return", "observation", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.hopper_env.LifelongHopperEnv.get_obs": [[136, 138], ["hopper_env.LifelongHopperEnv._get_obs"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.hopper_env.LifelongHopperEnv._get_obs"], ["", "def", "get_obs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.hopper_env.LifelongHopperEnv.step": [[139, 161], ["hopper_env.LifelongHopperEnv.do_simulation", "abs", "abs", "numpy.sum", "hopper_env.LifelongHopperEnv.get_target_vel", "hopper_env.LifelongHopperEnv._get_obs", "hopper_env.LifelongHopperEnv.get_target_vel", "numpy.square"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.hopper_env.LifelongHopperEnv.get_target_vel", "home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.hopper_env.LifelongHopperEnv._get_obs", "home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.hopper_env.LifelongHopperEnv.get_target_vel"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "x_position_before", "=", "self", ".", "sim", ".", "data", ".", "qpos", "[", "0", "]", "\n", "self", ".", "do_simulation", "(", "action", ",", "self", ".", "frame_skip", ")", "\n", "x_position_after", "=", "self", ".", "sim", ".", "data", ".", "qpos", "[", "0", "]", "\n", "x_velocity", "=", "(", "(", "x_position_after", "-", "x_position_before", ")", "\n", "/", "self", ".", "dt", ")", "\n", "\n", "z", ",", "z_des", "=", "self", ".", "sim", ".", "data", ".", "qpos", "[", "1", "]", ",", "1.8", "\n", "height_cost", "=", "5", "*", "(", "(", "z", "-", "z_des", ")", "**", "2", ")", "\n", "vel_cost", "=", "abs", "(", "x_velocity", "-", "self", ".", "get_target_vel", "(", ")", ")", "\n", "ctrl_cost", "=", ".1", "*", "np", ".", "sum", "(", "np", ".", "square", "(", "action", ")", ")", "\n", "\n", "rewards", "=", "abs", "(", "self", ".", "get_target_vel", "(", ")", ")", "\n", "costs", "=", "height_cost", "+", "vel_cost", "+", "ctrl_cost", "\n", "\n", "reward", "=", "rewards", "-", "costs", "\n", "info", "=", "{", "\n", "'x_velocity'", ":", "x_velocity", ",", "\n", "'z'", ":", "z", ",", "\n", "}", "\n", "\n", "return", "self", ".", "_get_obs", "(", ")", ",", "reward", ",", "False", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.hopper_env.LifelongHopperEnv.reset_model": [[162, 175], ["hopper_env.LifelongHopperEnv.set_state", "hopper_env.LifelongHopperEnv._get_obs", "hopper_env.LifelongHopperEnv.np_random.uniform", "hopper_env.LifelongHopperEnv.np_random.uniform"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.hopper_env.LifelongHopperEnv._get_obs"], ["", "def", "reset_model", "(", "self", ")", ":", "\n", "        ", "noise_low", "=", "-", "self", ".", "_reset_noise_scale", "\n", "noise_high", "=", "self", ".", "_reset_noise_scale", "\n", "\n", "qpos", "=", "self", ".", "init_qpos", "+", "self", ".", "np_random", ".", "uniform", "(", "\n", "low", "=", "noise_low", ",", "high", "=", "noise_high", ",", "size", "=", "self", ".", "model", ".", "nq", ")", "\n", "qvel", "=", "self", ".", "init_qvel", "+", "self", ".", "np_random", ".", "uniform", "(", "\n", "low", "=", "noise_low", ",", "high", "=", "noise_high", ",", "size", "=", "self", ".", "model", ".", "nv", ")", "\n", "\n", "self", ".", "set_state", "(", "qpos", ",", "qvel", ")", "\n", "\n", "observation", "=", "self", ".", "_get_obs", "(", ")", "\n", "return", "observation", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.environments.hopper_env.LifelongHopperEnv.viewer_setup": [[176, 182], ["DEFAULT_CAMERA_CONFIG.items", "isinstance", "setattr", "getattr"], "methods", ["None"], ["", "def", "viewer_setup", "(", "self", ")", ":", "\n", "        ", "for", "key", ",", "value", "in", "DEFAULT_CAMERA_CONFIG", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "value", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "getattr", "(", "self", ".", "viewer", ".", "cam", ",", "key", ")", "[", ":", "]", "=", "value", "\n", "", "else", ":", "\n", "                ", "setattr", "(", "self", ".", "viewer", ".", "cam", ",", "key", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.__init__": [[43, 74], ["os.path.join", "numpy.array", "dict", "cont_gridworld.ContinuousGridworld.parse_grid", "gym.spaces.Box", "gym.spaces.Box", "dict", "os.path.dirname", "numpy.ones", "numpy.array", "numpy.array", "dict", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.parse_grid", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.ones", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.ones"], ["def", "__init__", "(", "\n", "self", ",", "\n", "grid_files", ",", "# List of grid files that worlds switch between (can be 1)", "\n", "switch_grid_every", "=", "None", ",", "# How often to switch grids (None: don't switch)", "\n", "start_pos", "=", "(", "0.", ",", "0.", ")", ",", "# Starting position of agent at beginning of episode", "\n", "dt", "=", "0.1", ",", "# Maximum distance of travel for one action", "\n", "num_collision_steps", "=", "10", ",", "# How often to check for wall collision", "\n", "grid_kwargs", "=", "None", ",", "# Additional kwargs to give to tiles", "\n", "act_noise", "=", "0.", ",", "# Apply a clipped Gaussian noise to actions", "\n", ")", ":", "\n", "        ", "self", ".", "grid_files", "=", "grid_files", "\n", "self", ".", "switch_grid_every", "=", "switch_grid_every", "\n", "self", ".", "start_pos", "=", "start_pos", "\n", "self", ".", "dt", "=", "dt", "\n", "self", ".", "act_noise", "=", "act_noise", "\n", "self", ".", "num_collision_steps", "=", "num_collision_steps", "\n", "self", ".", "grid_kwargs", "=", "grid_kwargs", "if", "grid_kwargs", "is", "not", "None", "else", "dict", "(", ")", "\n", "self", ".", "_grids_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "'grids'", ")", "\n", "\n", "self", ".", "_grid", "=", "[", "]", "\n", "self", ".", "_num_steps_total", "=", "0", "\n", "self", ".", "_cur_grid_ind", "=", "0", "\n", "self", ".", "_x", "=", "np", ".", "array", "(", "start_pos", ")", "\n", "self", ".", "_agent_infos", "=", "dict", "(", "env_infos", "=", "dict", "(", ")", ")", "\n", "\n", "obs_dim", "=", "self", ".", "parse_grid", "(", "self", ".", "grid_files", "[", "self", ".", "_cur_grid_ind", "]", ")", "\n", "self", ".", "observation_space", "=", "gym", ".", "spaces", ".", "Box", "(", "\n", "-", "np", ".", "ones", "(", "obs_dim", ")", ",", "np", ".", "ones", "(", "obs_dim", ")", "\n", ")", "\n", "self", ".", "action_space", "=", "gym", ".", "spaces", ".", "Box", "(", "\n", "np", ".", "array", "(", "[", "-", "1", ",", "-", "1", "]", ")", ",", "np", ".", "array", "(", "[", "1", ",", "1", "]", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.step": [[76, 131], ["numpy.clip", "range", "cont_gridworld.ContinuousGridworld.get_state_infos", "cont_gridworld.ContinuousGridworld.get_obs", "cont_gridworld.ContinuousGridworld.get_reward", "copy.deepcopy", "numpy.random.randn", "cont_gridworld.ContinuousGridworld.get_index", "cont_gridworld.ContinuousGridworld.get_state_infos", "cur_tile.can_pass_through", "numpy.clip", "cont_gridworld.ContinuousGridworld.get_index", "cont_gridworld.ContinuousGridworld.get_state_infos", "next_tile.can_pass_through", "cont_gridworld.ContinuousGridworld.advance_grid", "cur_tile.get_speed", "tile.update_agent_infos"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.get_state_infos", "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Resource.get_obs", "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Resource.get_reward", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.randn", "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.get_index", "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.get_state_infos", "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Wall.can_pass_through", "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.get_index", "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.get_state_infos", "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Wall.can_pass_through", "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.advance_grid", "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Hole.get_speed", "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.ConsumedResource.update_agent_infos"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "action", "+=", "np", ".", "random", ".", "randn", "(", "*", "action", ".", "shape", ")", "*", "self", ".", "act_noise", "\n", "action", "=", "np", ".", "clip", "(", "action", ",", "-", "1", ",", "1", ")", "\n", "\n", "# Perform collision detection: increment x in small steps", "\n", "ddt", "=", "self", ".", "dt", "/", "self", ".", "num_collision_steps", "\n", "for", "_", "in", "range", "(", "self", ".", "num_collision_steps", ")", ":", "\n", "# Process any necessary info from current state", "\n", "            ", "cur_ind", "=", "self", ".", "get_index", "(", "self", ".", "_x", ")", "\n", "cur_tile", "=", "self", ".", "_grid", "[", "cur_ind", "[", "1", "]", "]", "[", "cur_ind", "[", "0", "]", "]", "\n", "state_infos", "=", "self", ".", "get_state_infos", "(", ")", "\n", "\n", "# Calculate movement parameters from current tile", "\n", "delta_x", "=", "0", "\n", "if", "cur_tile", ".", "can_pass_through", "(", "state_infos", ",", "self", ".", "_agent_infos", ")", ":", "\n", "                ", "speed", "=", "cur_tile", ".", "get_speed", "(", "state_infos", ",", "self", ".", "_agent_infos", ")", "\n", "delta_x", "+=", "ddt", "*", "action", "*", "speed", "\n", "", "else", ":", "\n", "                ", "break", "\n", "\n", "# Process any necessary info from next state", "\n", "", "next_x", "=", "np", ".", "clip", "(", "self", ".", "_x", "+", "delta_x", ",", "-", "1", ",", "1", ")", "\n", "next_ind", "=", "self", ".", "get_index", "(", "next_x", ")", "\n", "next_tile", "=", "self", ".", "_grid", "[", "next_ind", "[", "1", "]", "]", "[", "next_ind", "[", "0", "]", "]", "\n", "next_state_infos", "=", "self", ".", "get_state_infos", "(", "next_x", ",", "self", ".", "_num_steps_total", "+", "1", ")", "\n", "\n", "# Check to ensure we can reach the next state", "\n", "if", "next_tile", ".", "can_pass_through", "(", "next_state_infos", ",", "self", ".", "_agent_infos", ")", ":", "\n", "                ", "self", ".", "_x", "=", "next_x", "\n", "", "else", ":", "\n", "                ", "break", "\n", "\n", "# Do updates and get transition, which require state_infos", "\n", "", "", "state_infos", "=", "self", ".", "get_state_infos", "(", ")", "\n", "\n", "# Update agent infos for every tile", "\n", "for", "row", "in", "self", ".", "_grid", ":", "\n", "            ", "for", "tile", "in", "row", ":", "\n", "                ", "tile", ".", "update_agent_infos", "(", "state_infos", ",", "self", ".", "_agent_infos", ")", "\n", "", "", "self", ".", "_agent_infos", "[", "'env_infos'", "]", "[", "'x'", "]", "=", "self", ".", "_x", "[", "0", "]", "\n", "self", ".", "_agent_infos", "[", "'env_infos'", "]", "[", "'y'", "]", "=", "self", ".", "_x", "[", "1", "]", "\n", "\n", "# Get transition", "\n", "next_obs", "=", "self", ".", "get_obs", "(", "state_infos", "=", "state_infos", ")", "\n", "reward", "=", "self", ".", "get_reward", "(", "state_infos", "=", "state_infos", ")", "\n", "done", "=", "False", "\n", "env_infos", "=", "copy", ".", "deepcopy", "(", "self", ".", "_agent_infos", "[", "'env_infos'", "]", ")", "\n", "\n", "# Perform updates related to continual learning", "\n", "self", ".", "_num_steps_total", "+=", "1", "\n", "if", "self", ".", "switch_grid_every", "is", "not", "None", "and", "self", ".", "_num_steps_total", "%", "self", ".", "switch_grid_every", "==", "0", ":", "\n", "            ", "self", ".", "advance_grid", "(", ")", "\n", "\n", "", "return", "next_obs", ",", "reward", ",", "done", ",", "env_infos", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.reset": [[132, 139], ["numpy.array", "dict", "cont_gridworld.ContinuousGridworld.get_obs", "tile.reset"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Resource.get_obs", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_x", "=", "np", ".", "array", "(", "self", ".", "start_pos", ")", "\n", "self", ".", "_agent_infos", "=", "dict", "(", ")", "\n", "for", "row", "in", "self", ".", "_grid", ":", "\n", "            ", "for", "tile", "in", "row", ":", "\n", "                ", "tile", ".", "reset", "(", "self", ".", "_agent_infos", ")", "\n", "", "", "return", "self", ".", "get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.get_meta_infos": [[140, 147], ["dict", "cont_gridworld.ContinuousGridworld._x.copy", "copy.deepcopy"], "methods", ["None"], ["", "def", "get_meta_infos", "(", "self", ")", ":", "\n", "        ", "return", "dict", "(", "\n", "grid_file", "=", "self", ".", "grid_files", "[", "self", ".", "_cur_grid_ind", "]", ",", "\n", "num_steps", "=", "self", ".", "_num_steps_total", ",", "\n", "cur_grid_ind", "=", "self", ".", "_cur_grid_ind", ",", "\n", "x", "=", "self", ".", "_x", ".", "copy", "(", ")", ",", "\n", "agent_infos", "=", "copy", ".", "deepcopy", "(", "self", ".", "_agent_infos", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.get_obs": [[149, 157], ["numpy.concatenate", "cont_gridworld.ContinuousGridworld.get_state_infos", "obs.append", "tile.get_obs"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.get_state_infos", "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Resource.get_obs"], ["", "def", "get_obs", "(", "self", ",", "state_infos", "=", "None", ")", ":", "\n", "        ", "if", "state_infos", "is", "None", ":", "\n", "            ", "state_infos", "=", "self", ".", "get_state_infos", "(", ")", "\n", "", "obs", "=", "[", "self", ".", "_x", "]", "\n", "for", "row", "in", "self", ".", "_grid", ":", "\n", "            ", "for", "tile", "in", "row", ":", "\n", "                ", "obs", ".", "append", "(", "tile", ".", "get_obs", "(", "state_infos", ",", "self", ".", "_agent_infos", ")", ")", "\n", "", "", "return", "np", ".", "concatenate", "(", "obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.get_reward": [[158, 167], ["min", "cont_gridworld.ContinuousGridworld.get_state_infos", "max", "tile.get_reward"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.get_state_infos", "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Resource.get_reward"], ["", "def", "get_reward", "(", "self", ",", "state_infos", "=", "None", ")", ":", "\n", "        ", "if", "state_infos", "is", "None", ":", "\n", "            ", "state_infos", "=", "self", ".", "get_state_infos", "(", ")", "\n", "", "reward", "=", "0", "\n", "for", "row", "in", "self", ".", "_grid", ":", "\n", "            ", "for", "tile", "in", "row", ":", "\n", "                ", "reward", "+=", "tile", ".", "get_reward", "(", "state_infos", ",", "self", ".", "_agent_infos", ")", "\n", "", "", "reward", "=", "min", "(", "max", "(", "reward", ",", "-", "100", ")", ",", "100", ")", "\n", "return", "reward", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.get_state_infos": [[168, 183], ["cont_gridworld.ContinuousGridworld.get_index", "dict"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.get_index"], ["", "def", "get_state_infos", "(", "self", ",", "x", "=", "None", ",", "num_steps_total", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        state_infos includes information about the current state of the environment.\n        \"\"\"", "\n", "if", "x", "is", "None", ":", "\n", "            ", "x", "=", "self", ".", "_x", "\n", "", "if", "num_steps_total", "is", "None", ":", "\n", "            ", "num_steps_total", "=", "self", ".", "_num_steps_total", "\n", "", "inds", "=", "self", ".", "get_index", "(", "x", ")", "\n", "state_infos", "=", "dict", "(", "\n", "num_steps_total", "=", "num_steps_total", ",", "\n", "agent_inds", "=", "inds", ",", "\n", "agent_position", "=", "x", ",", "\n", ")", "\n", "return", "state_infos", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.advance_grid": [[184, 191], ["cont_gridworld.ContinuousGridworld.parse_grid", "len"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.parse_grid"], ["", "def", "advance_grid", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Set the grid to the next grid in the sequence. Note that this does not\n        induce a reset to the agent.\n        \"\"\"", "\n", "self", ".", "_cur_grid_ind", "=", "(", "self", ".", "_cur_grid_ind", "+", "1", ")", "%", "len", "(", "self", ".", "grid_files", ")", "\n", "self", ".", "parse_grid", "(", "self", ".", "grid_files", "[", "self", ".", "_cur_grid_ind", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.get_position": [[192, 204], ["numpy.array", "numpy.array", "len", "len"], "methods", ["None"], ["", "def", "get_position", "(", "self", ",", "inds", ",", "lens", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        The position is defined at the center of the tile. We calculate this by\n        considering each tile as having two halves.\n        \"\"\"", "\n", "if", "lens", "is", "None", ":", "\n", "            ", "lens", "=", "(", "len", "(", "self", ".", "_grid", "[", "0", "]", ")", ",", "len", "(", "self", ".", "_grid", ")", ")", "\n", "\n", "", "inds", ",", "lens", "=", "np", ".", "array", "(", "inds", ")", ",", "np", ".", "array", "(", "lens", ")", "\n", "x", "=", "2", "*", "(", "(", "2", "*", "inds", "+", "1", ")", "/", "(", "2", "*", "lens", ")", ")", "-", "1", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.get_index": [[205, 220], ["numpy.array", "numpy.rint().astype", "min", "min", "len", "len", "numpy.rint"], "methods", ["None"], ["", "def", "get_index", "(", "self", ",", "x", ",", "lens", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        The the index of the cell that x resides in (e.g. the tile whose center\n        is closest to the position of x).\n        \"\"\"", "\n", "if", "lens", "is", "None", ":", "\n", "            ", "lens", "=", "(", "len", "(", "self", ".", "_grid", "[", "0", "]", ")", ",", "len", "(", "self", ".", "_grid", ")", ")", "\n", "\n", "", "lens", "=", "np", ".", "array", "(", "lens", ")", "\n", "ind_vals", "=", "0.5", "*", "(", "x", "+", "1", ")", "*", "lens", "\n", "inds", "=", "np", ".", "rint", "(", "ind_vals", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "inds", "[", "0", "]", "=", "min", "(", "inds", "[", "0", "]", ",", "lens", "[", "0", "]", "-", "1", ")", "\n", "inds", "[", "1", "]", "=", "min", "(", "inds", "[", "1", "]", ",", "lens", "[", "1", "]", "-", "1", ")", "\n", "\n", "return", "inds", "[", "0", "]", ",", "inds", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.parse_grid": [[221, 263], ["os.path.join", "set", "open", "f.readline", "len", "len", "cont_gridworld.ContinuousGridworld._grid.append", "rows.append", "f.readline", "set.add", "tile_class", "cont_gridworld.ContinuousGridworld._grid[].append", "set.add", "cont_gridworld.ContinuousGridworld.get_position"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.get_position"], ["", "def", "parse_grid", "(", "self", ",", "grid_file", ")", ":", "\n", "        ", "\"\"\"\n        Set the self._grids list and self.observation_space from the file with name\n        grid_file. The file should just consist of text characters formatted in a\n        2D array corresponding to the relevant characters.\n        \"\"\"", "\n", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_grids_dir", ",", "grid_file", ")", "\n", "rows", "=", "[", "]", "\n", "with", "open", "(", "file_path", "+", "'.txt'", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "row", "=", "f", ".", "readline", "(", ")", "\n", "while", "row", ":", "\n", "                ", "rows", ".", "append", "(", "row", "[", ":", "-", "1", "]", ")", "# don't include newline", "\n", "row", "=", "f", ".", "readline", "(", ")", "\n", "\n", "", "", "lens", "=", "(", "len", "(", "rows", "[", "0", "]", ")", ",", "len", "(", "rows", ")", ")", "\n", "\n", "self", ".", "_grid", "=", "[", "]", "\n", "obs_dim", "=", "2", "\n", "tile_classes", "=", "set", "(", ")", "\n", "x", ",", "y", "=", "0", ",", "0", "\n", "for", "row", "in", "rows", ":", "\n", "            ", "self", ".", "_grid", ".", "append", "(", "[", "]", ")", "\n", "x", "=", "0", "\n", "for", "char", "in", "row", ":", "\n", "                ", "index", "=", "(", "x", ",", "y", ")", "\n", "tile_class", "=", "CHAR_TO_TILE", "[", "char", "]", "\n", "tile_classes", ".", "add", "(", "tile_class", ")", "\n", "tile", "=", "tile_class", "(", "\n", "index_in_grid", "=", "index", ",", "\n", "position_in_grid", "=", "self", ".", "get_position", "(", "index", ",", "lens", ")", ",", "\n", "**", "self", ".", "grid_kwargs", ",", "\n", ")", "\n", "self", ".", "_grid", "[", "-", "1", "]", ".", "append", "(", "tile", ")", "\n", "if", "tile_class", "not", "in", "tile_classes", ":", "\n", "                    ", "tile_classes", ".", "add", "(", "tile_class", ")", "\n", "obs_dim", "+=", "tile", ".", "class_info_dim", "\n", "", "obs_dim", "+=", "tile", ".", "unique_info_dim", "\n", "x", "+=", "1", "\n", "", "y", "+=", "1", "\n", "\n", "", "return", "obs_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.get_rgb_array": [[264, 274], ["cont_gridworld.ContinuousGridworld.get_state_infos", "numpy.zeros", "enumerate", "enumerate", "len", "len", "tile.get_plot_color"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.cont_gridworld.ContinuousGridworld.get_state_infos", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.zeros", "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Resource.get_plot_color"], ["", "def", "get_rgb_array", "(", "self", ")", ":", "\n", "        ", "state_infos", "=", "self", ".", "get_state_infos", "(", ")", "\n", "agent_infos", "=", "self", ".", "_agent_infos", "\n", "\n", "rgb_array", "=", "np", ".", "zeros", "(", "(", "len", "(", "self", ".", "_grid", "[", "0", "]", ")", ",", "len", "(", "self", ".", "_grid", ")", ",", "3", ")", ")", "\n", "for", "y", ",", "row", "in", "enumerate", "(", "self", ".", "_grid", ")", ":", "\n", "            ", "for", "x", ",", "tile", "in", "enumerate", "(", "row", ")", ":", "\n", "                ", "rgb_array", "[", "x", ",", "y", "]", "=", "tile", ".", "get_plot_color", "(", "state_infos", ",", "agent_infos", ")", "\n", "\n", "", "", "return", "rgb_array", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Tile.__init__": [[19, 24], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "index_in_grid", ",", "position_in_grid", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "index_in_grid", "=", "index_in_grid", "\n", "self", ".", "position_in_grid", "=", "position_in_grid", "\n", "self", ".", "unique_info_dim", "=", "0", "\n", "self", ".", "class_info_dim", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Tile.reset": [[25, 27], ["dict"], "methods", ["None"], ["", "def", "reset", "(", "self", ",", "agent_infos", ")", ":", "\n", "        ", "agent_infos", "[", "'env_infos'", "]", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Tile.get_obs": [[28, 30], ["None"], "methods", ["None"], ["", "def", "get_obs", "(", "self", ",", "state_infos", ",", "agent_infos", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Tile.get_reward": [[31, 33], ["None"], "methods", ["None"], ["", "def", "get_reward", "(", "self", ",", "state_infos", ",", "agent_infos", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Tile.get_speed": [[34, 36], ["None"], "methods", ["None"], ["", "def", "get_speed", "(", "self", ",", "state_infos", ",", "agent_infos", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Tile.can_pass_through": [[37, 39], ["None"], "methods", ["None"], ["", "def", "can_pass_through", "(", "self", ",", "state_infos", ",", "agent_infos", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Tile.update_agent_infos": [[40, 42], ["None"], "methods", ["None"], ["", "def", "update_agent_infos", "(", "self", ",", "state_infos", ",", "agent_infos", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Tile.get_plot_color": [[43, 45], ["None"], "methods", ["None"], ["", "def", "get_plot_color", "(", "self", ",", "state_infos", ",", "agent_infos", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Tile.agent_is_here": [[46, 49], ["None"], "methods", ["None"], ["", "def", "agent_is_here", "(", "self", ",", "state_infos", ")", ":", "\n", "        ", "agent_inds", "=", "state_infos", "[", "'agent_inds'", "]", "\n", "return", "agent_inds", "==", "self", ".", "index_in_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Space.reset": [[58, 60], ["tiles.Tile.reset"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.reset"], ["    ", "def", "reset", "(", "self", ",", "agent_infos", ")", ":", "\n", "        ", "super", "(", ")", ".", "reset", "(", "agent_infos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Space.get_obs": [[61, 63], ["None"], "methods", ["None"], ["", "def", "get_obs", "(", "self", ",", "state_infos", ",", "agent_infos", ")", ":", "\n", "        ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Space.get_reward": [[64, 66], ["None"], "methods", ["None"], ["", "def", "get_reward", "(", "self", ",", "state_infos", ",", "agent_infos", ")", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Space.get_speed": [[67, 69], ["None"], "methods", ["None"], ["", "def", "get_speed", "(", "self", ",", "state_infos", ",", "agent_infos", ")", ":", "\n", "        ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Space.can_pass_through": [[70, 72], ["None"], "methods", ["None"], ["", "def", "can_pass_through", "(", "self", ",", "state_infos", ",", "agent_infos", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Space.update_agent_infos": [[73, 75], ["None"], "methods", ["None"], ["", "def", "update_agent_infos", "(", "self", ",", "state_infos", ",", "agent_infos", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Space.get_plot_color": [[76, 78], ["numpy.array"], "methods", ["None"], ["", "def", "get_plot_color", "(", "self", ",", "state_infos", ",", "agent_infos", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "1", ",", "1", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Wall.reset": [[82, 84], ["tiles.Tile.reset"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.reset"], ["    ", "def", "reset", "(", "self", ",", "agent_infos", ")", ":", "\n", "        ", "super", "(", ")", ".", "reset", "(", "agent_infos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Wall.get_obs": [[85, 87], ["None"], "methods", ["None"], ["", "def", "get_obs", "(", "self", ",", "state_infos", ",", "agent_infos", ")", ":", "\n", "        ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Wall.get_reward": [[88, 90], ["None"], "methods", ["None"], ["", "def", "get_reward", "(", "self", ",", "state_infos", ",", "agent_infos", ")", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Wall.get_speed": [[91, 93], ["None"], "methods", ["None"], ["", "def", "get_speed", "(", "self", ",", "state_infos", ",", "agent_infos", ")", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Wall.can_pass_through": [[94, 96], ["None"], "methods", ["None"], ["", "def", "can_pass_through", "(", "self", ",", "state_infos", ",", "agent_infos", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Wall.update_agent_infos": [[97, 99], ["None"], "methods", ["None"], ["", "def", "update_agent_infos", "(", "self", ",", "state_infos", ",", "agent_infos", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Wall.get_plot_color": [[100, 102], ["numpy.array"], "methods", ["None"], ["", "def", "get_plot_color", "(", "self", ",", "state_infos", ",", "agent_infos", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Goal.__init__": [[111, 118], ["tiles.Tile.__init__"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dense_reward", "=", "True", ",", "reward_scale", "=", "3", ",", "incl_in_env_infos", "=", "True", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "dense_reward", "=", "dense_reward", "\n", "self", ".", "reward_scale", "=", "reward_scale", "\n", "self", ".", "incl_in_env_infos", "=", "incl_in_env_infos", "\n", "self", ".", "unique_info_dim", "=", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Goal.reset": [[119, 121], ["tiles.Space.reset"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.reset"], ["", "def", "reset", "(", "self", ",", "agent_infos", ")", ":", "\n", "        ", "super", "(", ")", ".", "reset", "(", "agent_infos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Goal.get_obs": [[122, 124], ["None"], "methods", ["None"], ["", "def", "get_obs", "(", "self", ",", "state_infos", ",", "agent_infos", ")", ":", "\n", "        ", "return", "self", ".", "position_in_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Goal.get_reward": [[125, 134], ["numpy.sum"], "methods", ["None"], ["", "def", "get_reward", "(", "self", ",", "state_infos", ",", "agent_infos", ")", ":", "\n", "        ", "agent_position", "=", "state_infos", "[", "'agent_position'", "]", "\n", "if", "self", ".", "dense_reward", ":", "\n", "            ", "return", "-", "np", ".", "sum", "(", "(", "agent_position", "-", "self", ".", "position_in_grid", ")", "**", "2", ")", "*", "self", ".", "reward_scale", "\n", "", "else", ":", "\n", "            ", "if", "agent_position", "==", "self", ".", "index_in_grid", ":", "\n", "                ", "return", "self", ".", "reward_scale", "\n", "", "else", ":", "\n", "                ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Goal.update_agent_infos": [[135, 139], ["None"], "methods", ["None"], ["", "", "", "def", "update_agent_infos", "(", "self", ",", "state_infos", ",", "agent_infos", ")", ":", "\n", "        ", "if", "self", ".", "incl_in_env_infos", ":", "\n", "            ", "agent_infos", "[", "'env_infos'", "]", "[", "'goal_x'", "]", "=", "self", ".", "position_in_grid", "[", "0", "]", "\n", "agent_infos", "[", "'env_infos'", "]", "[", "'goal_y'", "]", "=", "self", ".", "position_in_grid", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Goal.get_plot_color": [[140, 142], ["numpy.array"], "methods", ["None"], ["", "", "def", "get_plot_color", "(", "self", ",", "state_infos", ",", "agent_infos", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "85", ",", "168", ",", "104", "]", ")", "/", "255", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Sand.get_speed": [[146, 148], ["None"], "methods", ["None"], ["    ", "def", "get_speed", "(", "self", ",", "state_infos", ",", "agent_infos", ")", ":", "\n", "        ", "return", "0.1", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Sand.get_plot_color": [[149, 151], ["numpy.array"], "methods", ["None"], ["", "def", "get_plot_color", "(", "self", ",", "state_infos", ",", "agent_infos", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "204", ",", "185", ",", "116", "]", ")", "/", "255", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Lava.get_reward": [[155, 160], ["tiles.Lava.agent_is_here"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Tile.agent_is_here"], ["    ", "def", "get_reward", "(", "self", ",", "state_infos", ",", "agent_infos", ")", ":", "\n", "        ", "if", "self", ".", "agent_is_here", "(", "state_infos", ")", ":", "\n", "            ", "return", "-", "1", "\n", "", "else", ":", "\n", "            ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Lava.get_plot_color": [[161, 163], ["numpy.array"], "methods", ["None"], ["", "", "def", "get_plot_color", "(", "self", ",", "state_infos", ",", "agent_infos", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "140", ",", "24", ",", "0", "]", ")", "/", "255", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Hole.__init__": [[167, 170], ["tiles.Tile.__init__"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "in_this_hole", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Hole.get_speed": [[171, 173], ["None"], "methods", ["None"], ["", "def", "get_speed", "(", "self", ",", "state_infos", ",", "agent_infos", ")", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Hole.get_reward": [[174, 179], ["tiles.Hole.agent_is_here"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Tile.agent_is_here"], ["", "def", "get_reward", "(", "self", ",", "state_infos", ",", "agent_infos", ")", ":", "\n", "        ", "if", "self", ".", "agent_is_here", "(", "state_infos", ")", ":", "\n", "            ", "return", "-", "3", "\n", "", "else", ":", "\n", "            ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Hole.get_plot_color": [[180, 182], ["numpy.array"], "methods", ["None"], ["", "", "def", "get_plot_color", "(", "self", ",", "state_infos", ",", "agent_infos", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "147", ",", "120", ",", "95", "]", ")", "/", "255", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Hole.update_agent_infos": [[183, 192], ["tiles.Hole.agent_is_here"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Tile.agent_is_here"], ["", "def", "update_agent_infos", "(", "self", ",", "state_infos", ",", "agent_infos", ")", ":", "\n", "        ", "if", "'in_hole'", "not", "in", "agent_infos", "[", "'env_infos'", "]", ":", "\n", "            ", "agent_infos", "[", "'env_infos'", "]", "[", "'in_hole'", "]", "=", "0", "\n", "", "agent_infos", "[", "'env_infos'", "]", "[", "'in_hole'", "]", "-=", "self", ".", "in_this_hole", "\n", "if", "self", ".", "agent_is_here", "(", "state_infos", ")", ":", "\n", "            ", "self", ".", "in_this_hole", "=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "in_this_hole", "=", "0", "\n", "", "agent_infos", "[", "'env_infos'", "]", "[", "'in_hole'", "]", "+=", "self", ".", "in_this_hole", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.TrackedSpace.__init__": [[196, 199], ["tiles.Tile.__init__"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "visited_in_episode", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.TrackedSpace.reset": [[200, 208], ["tiles.Space.reset", "agent_infos.get"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.reset"], ["", "def", "reset", "(", "self", ",", "agent_infos", ")", ":", "\n", "        ", "super", "(", ")", ".", "reset", "(", "agent_infos", ")", "\n", "\n", "agent_infos", "[", "'tracking_counter'", "]", "=", "0", "\n", "# TODO: is this correct?", "\n", "agent_infos", "[", "'num_tracked_squares'", "]", "=", "agent_infos", ".", "get", "(", "'num_tracked_squares'", ",", "0", ")", "+", "1", "\n", "\n", "self", ".", "visited_in_episode", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.TrackedSpace.update_agent_infos": [[209, 217], ["tiles.TrackedSpace.agent_is_here"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Tile.agent_is_here"], ["", "def", "update_agent_infos", "(", "self", ",", "state_infos", ",", "agent_infos", ")", ":", "\n", "        ", "if", "self", ".", "agent_is_here", "(", "state_infos", ")", ":", "\n", "            ", "if", "not", "self", ".", "visited_in_episode", ":", "\n", "                ", "self", ".", "visited_in_episode", "=", "True", "\n", "agent_infos", "[", "'tracking_counter'", "]", "+=", "1", "\n", "\n", "", "", "visitation_pct", "=", "agent_infos", "[", "'tracking_counter'", "]", "/", "agent_infos", "[", "'num_tracked_squares'", "]", "\n", "agent_infos", "[", "'env_infos'", "]", "[", "'visitation_pct'", "]", "=", "visitation_pct", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.CraftingTable.__init__": [[274, 279], ["tiles.Tile.__init__", "len"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "max_items", "=", "1", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "max_items", "=", "max_items", "\n", "self", ".", "unique_info_dim", "=", "len", "(", "MINECRAFT_ITEMS", ")", "\n", "self", ".", "_reward_this_step", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.CraftingTable.reset": [[280, 286], ["tiles.Space.reset", "tiles.CraftingTable.place_inventory_in_env_infos"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.reset", "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.CraftingTable.place_inventory_in_env_infos"], ["", "def", "reset", "(", "self", ",", "agent_infos", ")", ":", "\n", "        ", "super", "(", ")", ".", "reset", "(", "agent_infos", ")", "\n", "\n", "agent_infos", "[", "'max_items'", "]", "=", "self", ".", "max_items", "\n", "agent_infos", "[", "'inventory'", "]", "=", "{", "item", ":", "0", "for", "item", "in", "MINECRAFT_ITEMS", "}", "\n", "self", ".", "place_inventory_in_env_infos", "(", "agent_infos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.CraftingTable.place_inventory_in_env_infos": [[287, 291], ["None"], "methods", ["None"], ["", "def", "place_inventory_in_env_infos", "(", "self", ",", "agent_infos", ")", ":", "\n", "        ", "inventory", "=", "agent_infos", "[", "'inventory'", "]", "\n", "for", "item", "in", "inventory", ":", "\n", "            ", "agent_infos", "[", "'env_infos'", "]", "[", "'%s Owned'", "%", "item", "]", "=", "inventory", "[", "item", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.CraftingTable.get_obs": [[292, 302], ["numpy.array", "item_quantities.append"], "methods", ["None"], ["", "", "def", "get_obs", "(", "self", ",", "state_infos", ",", "agent_infos", ")", ":", "\n", "        ", "\"\"\"\n        The crafting table shows how much of each item we have\n        \"\"\"", "\n", "\n", "item_quantities", "=", "[", "]", "\n", "inventory", "=", "agent_infos", "[", "'inventory'", "]", "\n", "for", "item", "in", "inventory", ":", "\n", "            ", "item_quantities", ".", "append", "(", "inventory", "[", "item", "]", "/", "self", ".", "max_items", ")", "\n", "", "return", "np", ".", "array", "(", "item_quantities", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.CraftingTable.update_agent_infos": [[303, 350], ["tiles.CraftingTable.place_inventory_in_env_infos", "tiles.CraftingTable.agent_is_here", "tiles.CraftingTable.place_inventory_in_env_infos"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.CraftingTable.place_inventory_in_env_infos", "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Tile.agent_is_here", "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.CraftingTable.place_inventory_in_env_infos"], ["", "def", "update_agent_infos", "(", "self", ",", "state_infos", ",", "agent_infos", ")", ":", "\n", "        ", "\"\"\"\n        Perform all crafting logic based on RECIPES.\n        Craft all items we can possibly craft if we're here.\n        Note that this is called before the reward calculation.\n        \"\"\"", "\n", "\n", "# Only craft if we're standing in the crafting table", "\n", "if", "not", "self", ".", "agent_is_here", "(", "state_infos", ")", ":", "\n", "            ", "self", ".", "place_inventory_in_env_infos", "(", "agent_infos", ")", "\n", "return", "\n", "\n", "# Craft until we can no longer craft", "\n", "", "inventory", "=", "agent_infos", "[", "'inventory'", "]", "\n", "keep_crafting", "=", "True", "\n", "while", "keep_crafting", ":", "\n", "            ", "keep_crafting", "=", "False", "\n", "\n", "for", "recipe", "in", "RECIPES", ":", "\n", "                ", "resources_needed", ",", "item_to_craft", "=", "recipe", "[", ":", "-", "1", "]", ",", "recipe", "[", "-", "1", "]", "\n", "\n", "# First, check that we have room in inventory to make it", "\n", "if", "inventory", "[", "item_to_craft", "]", ">=", "self", ".", "max_items", ":", "\n", "                    ", "continue", "\n", "\n", "# See if we have the necessary resources", "\n", "", "can_craft", "=", "True", "\n", "for", "resource", ",", "quantity", "in", "resources_needed", ":", "\n", "                    ", "if", "inventory", "[", "resource", "]", "<", "quantity", ":", "\n", "                        ", "can_craft", "=", "False", "\n", "break", "\n", "\n", "# If we can't, just proceed to next item", "\n", "", "", "if", "can_craft", ":", "\n", "                    ", "keep_crafting", "=", "True", "\n", "", "else", ":", "\n", "                    ", "continue", "\n", "\n", "# Remove all the resources needed to make item", "\n", "", "for", "resource", ",", "quantity", "in", "resources_needed", ":", "\n", "                    ", "inventory", "[", "resource", "]", "-=", "quantity", "\n", "\n", "# Add the item to inventory and increase reward", "\n", "", "inventory", "[", "item_to_craft", "]", "+=", "1", "\n", "self", ".", "_reward_this_step", "+=", "MINECRAFT_ITEMS", "[", "item_to_craft", "]", "\n", "\n", "", "", "self", ".", "place_inventory_in_env_infos", "(", "agent_infos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.CraftingTable.get_reward": [[351, 355], ["None"], "methods", ["None"], ["", "def", "get_reward", "(", "self", ",", "state_infos", ",", "agent_infos", ")", ":", "\n", "        ", "cur_reward", "=", "self", ".", "_reward_this_step", "\n", "self", ".", "_reward_this_step", "=", "0", "\n", "return", "cur_reward", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.CraftingTable.get_plot_color": [[356, 358], ["numpy.array"], "methods", ["None"], ["", "def", "get_plot_color", "(", "self", ",", "state_infos", ",", "agent_infos", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "172", ",", "102", ",", "56", "]", ")", "/", "255", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Resource.__init__": [[362, 370], ["tiles.Tile.__init__"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "resource_name", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "assert", "resource_name", "in", "RESOURCES", "\n", "\n", "self", ".", "unique_info_dim", "=", "2", "\n", "self", ".", "_resource_name", "=", "resource_name", "\n", "self", ".", "_reward_this_step", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Resource.get_obs": [[371, 373], ["None"], "methods", ["None"], ["", "def", "get_obs", "(", "self", ",", "state_infos", ",", "agent_infos", ")", ":", "\n", "        ", "return", "self", ".", "position_in_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Resource.update_agent_infos": [[374, 410], ["tiles.Resource.agent_is_here"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Tile.agent_is_here"], ["", "def", "update_agent_infos", "(", "self", ",", "state_infos", ",", "agent_infos", ")", ":", "\n", "        ", "\"\"\"\n        If we are in the tile and have the ability to break it, do it and consume\n        the item needed for breaking; we can only mine at most one per timestep\n        \"\"\"", "\n", "\n", "# We must be in the tile", "\n", "if", "not", "self", ".", "agent_is_here", "(", "state_infos", ")", ":", "\n", "            ", "return", "\n", "\n", "", "inventory", "=", "agent_infos", "[", "'inventory'", "]", "\n", "\n", "# Check if we already have the max number of this item", "\n", "if", "inventory", "[", "self", ".", "_resource_name", "]", ">=", "agent_infos", "[", "'max_items'", "]", ":", "\n", "            ", "return", "\n", "\n", "# Check if we have what is needed to break, and consume it", "\n", "", "can_use_to_break", "=", "RESOURCES", "[", "self", ".", "_resource_name", "]", "[", "1", "]", "\n", "can_break", "=", "False", "\n", "\n", "# This means we can just break with our hand", "\n", "if", "None", "in", "can_use_to_break", ":", "\n", "            ", "can_break", "=", "True", "\n", "\n", "# Otherwise, check all items", "\n", "", "if", "not", "can_break", ":", "\n", "            ", "for", "item", "in", "can_use_to_break", ":", "\n", "                ", "if", "inventory", "[", "item", "]", ">=", "1", ":", "\n", "                    ", "inventory", "[", "item", "]", "-=", "1", "\n", "can_break", "=", "True", "\n", "break", "\n", "\n", "# Add to our inventory and accumulate reward", "\n", "", "", "", "if", "can_break", ":", "\n", "            ", "inventory", "[", "self", ".", "_resource_name", "]", "+=", "1", "\n", "self", ".", "_reward_this_step", "+=", "MINECRAFT_ITEMS", "[", "self", ".", "_resource_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Resource.get_reward": [[411, 415], ["None"], "methods", ["None"], ["", "", "def", "get_reward", "(", "self", ",", "state_infos", ",", "agent_infos", ")", ":", "\n", "        ", "cur_reward", "=", "self", ".", "_reward_this_step", "\n", "self", ".", "_reward_this_step", "=", "0", "\n", "return", "cur_reward", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Resource.get_plot_color": [[416, 418], ["numpy.array"], "methods", ["None"], ["", "def", "get_plot_color", "(", "self", ",", "state_infos", ",", "agent_infos", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "RESOURCES", "[", "self", ".", "_resource_name", "]", "[", "0", "]", ")", "/", "255", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Wood.__init__": [[422, 424], ["tiles.Resource.__init__"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "'Wood'", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Stone.__init__": [[428, 430], ["tiles.Resource.__init__"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "'Stone'", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.ConsumedResource.update_agent_infos": [[434, 442], ["tiles.Resource.update_agent_infos"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.ConsumedResource.update_agent_infos"], ["    ", "def", "update_agent_infos", "(", "self", ",", "state_infos", ",", "agent_infos", ")", ":", "\n", "        ", "super", "(", ")", ".", "update_agent_infos", "(", "state_infos", ",", "agent_infos", ")", "\n", "\n", "if", "self", ".", "_reward_this_step", ">", "0", ":", "\n", "            ", "return", "\n", "\n", "# Consume all our resource so we can collect more", "\n", "", "agent_infos", "[", "'inventory'", "]", "[", "self", ".", "_resource_name", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Iron.__init__": [[446, 448], ["tiles.Resource.__init__"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "'Iron'", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.continuous_gridworld.tiles.Diamond.__init__": [[452, 454], ["tiles.Resource.__init__"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "'Diamond'", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.IntIdDict.__init__": [[381, 385], ["itertools.count", "collections.defaultdict.__init__", "next"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "c", "=", "itertools", ".", "count", "(", ")", "\n", "self", ".", "inverse_dict", "=", "{", "}", "\n", "super", "(", ")", ".", "__init__", "(", "lambda", ":", "next", "(", "c", ")", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.IntIdDict.__getitem__": [[386, 390], ["collections.defaultdict.__getitem__"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.IntIdDict.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "y", ")", ":", "\n", "        ", "int_id", "=", "super", "(", ")", ".", "__getitem__", "(", "y", ")", "\n", "self", ".", "inverse_dict", "[", "int_id", "]", "=", "y", "\n", "return", "int_id", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.IntIdDict.reverse_id": [[391, 393], ["None"], "methods", ["None"], ["", "def", "reverse_id", "(", "self", ",", "int_id", ")", ":", "\n", "        ", "return", "self", ".", "inverse_dict", "[", "int_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.ConditionTimer.__init__": [[410, 418], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "trigger_period", ")", ":", "\n", "        ", "\"\"\"\n        :param trigger_period: If None or 0, `check` will always return False.\n        \"\"\"", "\n", "self", ".", "last_time_triggered", "=", "0", "\n", "if", "trigger_period", "is", "None", ":", "\n", "            ", "trigger_period", "=", "0", "\n", "", "self", ".", "trigger_period", "=", "trigger_period", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.ConditionTimer.check": [[419, 428], ["None"], "methods", ["None"], ["", "def", "check", "(", "self", ",", "time", ")", ":", "\n", "        ", "if", "self", ".", "always_false", ":", "\n", "            ", "return", "False", "\n", "\n", "", "if", "time", "-", "self", ".", "last_time_triggered", ">=", "self", ".", "trigger_period", ":", "\n", "            ", "self", ".", "last_time_triggered", "=", "time", "\n", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.ConditionTimer.always_false": [[429, 432], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "always_false", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "trigger_period", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus._Logger.__init__": [[445, 448], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "n_chars", "=", "0", "\n", "self", ".", "lines", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus._Logger.print_over": [[449, 458], ["pythonplusplus.string_tuple_to_string", "sys.stdout.write", "sys.stdout.write", "sys.stdout.flush", "len"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.string_tuple_to_string"], ["", "def", "print_over", "(", "self", ",", "*", "strings", ")", ":", "\n", "        ", "\"\"\"\n        Remove anything printed in the last printover call. Then print `string`\n        \"\"\"", "\n", "string", "=", "string_tuple_to_string", "(", "strings", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "\"\\r\"", "*", "self", ".", "n_chars", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "string", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "self", ".", "n_chars", "=", "len", "(", "string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus._Logger.newline": [[459, 463], ["sys.stdout.write", "sys.stdout.flush"], "methods", ["None"], ["", "def", "newline", "(", "self", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "\"\\n\"", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "self", ".", "n_chars", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.identity": [[14, 16], ["None"], "function", ["None"], ["def", "identity", "(", "x", ")", ":", "\n", "    ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.clip_magnitude": [[18, 27], ["min", "max"], "function", ["None"], ["", "def", "clip_magnitude", "(", "value", ",", "magnitude", ")", ":", "\n", "    ", "\"\"\"\n    Clip the magnitude of value to be within some value.\n\n    :param value:\n    :param magnitude:\n    :return:\n    \"\"\"", "\n", "return", "min", "(", "max", "(", "value", ",", "-", "magnitude", ")", ",", "magnitude", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.is_numeric": [[29, 32], ["isinstance", "isinstance", "isinstance"], "function", ["None"], ["", "def", "is_numeric", "(", "x", ")", ":", "\n", "    ", "return", "not", "isinstance", "(", "x", ",", "bool", ")", "and", "(", "\n", "isinstance", "(", "x", ",", "int", ")", "or", "isinstance", "(", "x", ",", "float", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.group_init": [[35, 38], ["pythonplusplus.group_init", "init_func"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.group_init"], ["", "def", "group_init", "(", "num", ",", "init_func", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "(", "group_init", "(", "num", "-", "1", ",", "init_func", ",", "*", "args", ",", "**", "kwargs", ")", "if", "num", ">", "1", "else", "[", "]", ")", "+", "[", "init_func", "(", "*", "args", ",", "**", "kwargs", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.sample_batch": [[40, 46], ["dict", "numpy.random.randint", "next", "enumerate"], "function", ["None"], ["", "def", "sample_batch", "(", "batch_size", ",", "**", "kwargs", ")", ":", "\n", "    ", "new_batch", "=", "dict", "(", ")", "\n", "inds", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "kwargs", "[", "next", "(", "enumerate", "(", "kwargs", ")", ")", "[", "1", "]", "]", ".", "shape", "[", "0", "]", ",", "batch_size", ")", "\n", "for", "kwarg", "in", "kwargs", ":", "\n", "        ", "new_batch", "[", "kwarg", "]", "=", "kwargs", "[", "kwarg", "]", "[", "inds", "]", "\n", "", "return", "new_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.dot_map_dict_to_nested_dict": [[53, 93], ["dot_map_dict.items", "key.split", "len", "ValueError", "t.setdefault.setdefault", "isinstance", "TypeError", "ValueError"], "function", ["None"], ["def", "dot_map_dict_to_nested_dict", "(", "dot_map_dict", ")", ":", "\n", "    ", "\"\"\"\n    Convert something like\n    ```\n    {\n        'one.two.three.four': 4,\n        'one.six.seven.eight': None,\n        'five.nine.ten': 10,\n        'five.zero': 'foo',\n    }\n    ```\n    into its corresponding nested dict.\n\n    http://stackoverflow.com/questions/16547643/convert-a-list-of-delimited-strings-to-a-tree-nested-dict-using-python\n    :param dot_map_dict:\n    :return:\n    \"\"\"", "\n", "tree", "=", "{", "}", "\n", "\n", "for", "key", ",", "item", "in", "dot_map_dict", ".", "items", "(", ")", ":", "\n", "        ", "split_keys", "=", "key", ".", "split", "(", "'.'", ")", "\n", "if", "len", "(", "split_keys", ")", "==", "1", ":", "\n", "            ", "if", "key", "in", "tree", ":", "\n", "                ", "raise", "ValueError", "(", "\"Duplicate key: {}\"", ".", "format", "(", "key", ")", ")", "\n", "", "tree", "[", "key", "]", "=", "item", "\n", "", "else", ":", "\n", "            ", "t", "=", "tree", "\n", "for", "sub_key", "in", "split_keys", "[", ":", "-", "1", "]", ":", "\n", "                ", "t", "=", "t", ".", "setdefault", "(", "sub_key", ",", "{", "}", ")", "\n", "", "last_key", "=", "split_keys", "[", "-", "1", "]", "\n", "if", "not", "isinstance", "(", "t", ",", "dict", ")", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Key inside dot map must point to dictionary: {}\"", ".", "format", "(", "\n", "key", "\n", ")", "\n", ")", "\n", "", "if", "last_key", "in", "t", ":", "\n", "                ", "raise", "ValueError", "(", "\"Duplicate key: {}\"", ".", "format", "(", "last_key", ")", ")", "\n", "", "t", "[", "last_key", "]", "=", "item", "\n", "", "", "return", "tree", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.nested_dict_to_dot_map_dict": [[95, 111], ["d.items", "dict", "isinstance", "items.extend", "items.append", "nested_dict_to_dot_map_dict().items", "pythonplusplus.nested_dict_to_dot_map_dict"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.nested_dict_to_dot_map_dict"], ["", "def", "nested_dict_to_dot_map_dict", "(", "d", ",", "parent_key", "=", "''", ")", ":", "\n", "    ", "\"\"\"\n    Convert a recursive dictionary into a flat, dot-map dictionary.\n\n    :param d: e.g. {'a': {'b': 2, 'c': 3}}\n    :param parent_key: Used for recursion\n    :return: e.g. {'a.b': 2, 'a.c': 3}\n    \"\"\"", "\n", "items", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", ":", "\n", "        ", "new_key", "=", "parent_key", "+", "\".\"", "+", "k", "if", "parent_key", "else", "k", "\n", "if", "isinstance", "(", "v", ",", "collections", ".", "MutableMapping", ")", ":", "\n", "            ", "items", ".", "extend", "(", "nested_dict_to_dot_map_dict", "(", "v", ",", "new_key", ")", ".", "items", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "items", ".", "append", "(", "(", "new_key", ",", "v", ")", ")", "\n", "", "", "return", "dict", "(", "items", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.merge_recursive_dicts": [[113, 137], ["isinstance", "isinstance", "pythonplusplus.merge_recursive_dicts", "print", "print", "Exception", "str", "str"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.merge_recursive_dicts"], ["", "def", "merge_recursive_dicts", "(", "a", ",", "b", ",", "path", "=", "None", ",", "\n", "ignore_duplicate_keys_in_second_dict", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Merge two dicts that may have nested dicts.\n    \"\"\"", "\n", "if", "path", "is", "None", ":", "path", "=", "[", "]", "\n", "for", "key", "in", "b", ":", "\n", "        ", "if", "key", "in", "a", ":", "\n", "            ", "if", "isinstance", "(", "a", "[", "key", "]", ",", "dict", ")", "and", "isinstance", "(", "b", "[", "key", "]", ",", "dict", ")", ":", "\n", "                ", "merge_recursive_dicts", "(", "a", "[", "key", "]", ",", "b", "[", "key", "]", ",", "path", "+", "[", "str", "(", "key", ")", "]", ",", "\n", "ignore_duplicate_keys_in_second_dict", "=", "ignore_duplicate_keys_in_second_dict", ")", "\n", "", "elif", "a", "[", "key", "]", "==", "b", "[", "key", "]", ":", "\n", "                ", "print", "(", "\"Same value for key: {}\"", ".", "format", "(", "key", ")", ")", "\n", "", "else", ":", "\n", "                ", "duplicate_key", "=", "'.'", ".", "join", "(", "path", "+", "[", "str", "(", "key", ")", "]", ")", "\n", "if", "ignore_duplicate_keys_in_second_dict", ":", "\n", "                    ", "print", "(", "\"duplicate key ignored: {}\"", ".", "format", "(", "duplicate_key", ")", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "Exception", "(", "\n", "'Duplicate keys at {}'", ".", "format", "(", "duplicate_key", ")", "\n", ")", "\n", "", "", "", "else", ":", "\n", "            ", "a", "[", "key", "]", "=", "b", "[", "key", "]", "\n", "", "", "return", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.dict_of_list__to__list_of_dicts": [[139, 160], ["dict.items", "range", "range"], "function", ["None"], ["", "def", "dict_of_list__to__list_of_dicts", "(", "dict", ",", "n_items", ")", ":", "\n", "    ", "\"\"\"\n    ```\n    x = {'foo': [3, 4, 5], 'bar': [1, 2, 3]}\n    ppp.dict_of_list__to__list_of_dicts(x, 3)\n    # Output:\n    # [\n    #     {'foo': 3, 'bar': 1},\n    #     {'foo': 4, 'bar': 2},\n    #     {'foo': 5, 'bar': 3},\n    # ]\n    ```\n    :param dict:\n    :param n_items:\n    :return:\n    \"\"\"", "\n", "new_dicts", "=", "[", "{", "}", "for", "_", "in", "range", "(", "n_items", ")", "]", "\n", "for", "key", ",", "values", "in", "dict", ".", "items", "(", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "n_items", ")", ":", "\n", "            ", "new_dicts", "[", "i", "]", "[", "key", "]", "=", "values", "[", "i", "]", "\n", "", "", "return", "new_dicts", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.list_of_dicts__to__dict_of_lists": [[162, 184], ["lst[].keys", "collections.defaultdict", "len", "set", "set", "output_dict[].append", "d.keys"], "function", ["None"], ["", "def", "list_of_dicts__to__dict_of_lists", "(", "lst", ")", ":", "\n", "    ", "\"\"\"\n    ```\n    x = [\n        {'foo': 3, 'bar': 1},\n        {'foo': 4, 'bar': 2},\n        {'foo': 5, 'bar': 3},\n    ]\n    ppp.list_of_dicts__to__dict_of_lists(x)\n    # Output:\n    # {'foo': [3, 4, 5], 'bar': [1, 2, 3]}\n    ```\n    \"\"\"", "\n", "if", "len", "(", "lst", ")", "==", "0", ":", "\n", "        ", "return", "{", "}", "\n", "", "keys", "=", "lst", "[", "0", "]", ".", "keys", "(", ")", "\n", "output_dict", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "d", "in", "lst", ":", "\n", "        ", "assert", "set", "(", "d", ".", "keys", "(", ")", ")", "==", "set", "(", "keys", ")", "\n", "for", "k", "in", "keys", ":", "\n", "            ", "output_dict", "[", "k", "]", ".", "append", "(", "d", "[", "k", "]", ")", "\n", "", "", "return", "output_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.safe_json": [[186, 196], ["isinstance", "isinstance", "all", "isinstance", "all", "pythonplusplus.safe_json", "isinstance", "pythonplusplus.safe_json", "data.items"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging_setup.safe_json", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging_setup.safe_json"], ["", "def", "safe_json", "(", "data", ")", ":", "\n", "    ", "if", "data", "is", "None", ":", "\n", "        ", "return", "True", "\n", "", "elif", "isinstance", "(", "data", ",", "(", "bool", ",", "int", ",", "float", ")", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "isinstance", "(", "data", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "        ", "return", "all", "(", "safe_json", "(", "x", ")", "for", "x", "in", "data", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "dict", ")", ":", "\n", "        ", "return", "all", "(", "isinstance", "(", "k", ",", "str", ")", "and", "safe_json", "(", "v", ")", "for", "k", ",", "v", "in", "data", ".", "items", "(", ")", ")", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.dict_to_safe_json": [[198, 223], ["isinstance", "d.items", "collections.OrderedDict", "pythonplusplus.safe_json", "collections.OrderedDict", "sorted", "isinstance", "isinstance", "pythonplusplus.dict_to_safe_json", "str", "collections.OrderedDict.items"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging_setup.safe_json", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging_setup.dict_to_safe_json"], ["", "def", "dict_to_safe_json", "(", "d", ",", "sort", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Convert each value in the dictionary into a JSON'able primitive.\n    :param d:\n    :return:\n    \"\"\"", "\n", "if", "isinstance", "(", "d", ",", "collections", ".", "OrderedDict", ")", ":", "\n", "        ", "new_d", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "", "else", ":", "\n", "        ", "new_d", "=", "{", "}", "\n", "", "for", "key", ",", "item", "in", "d", ".", "items", "(", ")", ":", "\n", "        ", "if", "safe_json", "(", "item", ")", ":", "\n", "            ", "new_d", "[", "key", "]", "=", "item", "\n", "", "else", ":", "\n", "            ", "if", "(", "\n", "isinstance", "(", "item", ",", "dict", ")", "\n", "or", "isinstance", "(", "item", ",", "collections", ".", "OrderedDict", ")", "\n", ")", ":", "\n", "                ", "new_d", "[", "key", "]", "=", "dict_to_safe_json", "(", "item", ",", "sort", "=", "sort", ")", "\n", "", "else", ":", "\n", "                ", "new_d", "[", "key", "]", "=", "str", "(", "item", ")", "\n", "", "", "", "if", "sort", ":", "\n", "        ", "return", "collections", ".", "OrderedDict", "(", "sorted", "(", "new_d", ".", "items", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "new_d", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.recursive_items": [[225, 248], ["dictionary.items", "type", "pythonplusplus.recursive_items"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.recursive_items"], ["", "", "def", "recursive_items", "(", "dictionary", ")", ":", "\n", "    ", "\"\"\"\n    Get all (key, item) recursively in a potentially recursive dictionary.\n    Usage:\n\n    ```\n    x = {\n        'foo' : {\n            'bar' : 5\n        }\n    }\n    recursive_items(x)\n    # output:\n    # ('foo', {'bar' : 5})\n    # ('bar', 5)\n    ```\n    :param dictionary:\n    :return:\n    \"\"\"", "\n", "for", "key", ",", "value", "in", "dictionary", ".", "items", "(", ")", ":", "\n", "        ", "yield", "key", ",", "value", "\n", "if", "type", "(", "value", ")", "is", "dict", ":", "\n", "            ", "yield", "from", "recursive_items", "(", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.map_recursive": [[258, 277], ["isinstance", "isinstance", "fctn", "type", "pythonplusplus.map_recursive"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.map_recursive"], ["def", "map_recursive", "(", "fctn", ",", "x_or_iterable", ")", ":", "\n", "    ", "\"\"\"\n    Apply `fctn` to each element in x_or_iterable.\n\n    This is a generalization of the map function since this will work\n    recursively for iterables.\n\n    :param fctn: Function from element of iterable to something.\n    :param x_or_iterable: An element or an Iterable of an element.\n    :return: The same (potentially recursive) iterable but with\n    all the elements transformed by fctn.\n    \"\"\"", "\n", "# if isinstance(x_or_iterable, Iterable):", "\n", "if", "isinstance", "(", "x_or_iterable", ",", "list", ")", "or", "isinstance", "(", "x_or_iterable", ",", "tuple", ")", ":", "\n", "        ", "return", "type", "(", "x_or_iterable", ")", "(", "\n", "map_recursive", "(", "fctn", ",", "item", ")", "for", "item", "in", "x_or_iterable", "\n", ")", "\n", "", "else", ":", "\n", "        ", "return", "fctn", "(", "x_or_iterable", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.filter_recursive": [[279, 300], ["isinstance", "pythonplusplus.filter_recursive", "new_items.append", "isinstance", "len"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.filter_recursive"], ["", "", "def", "filter_recursive", "(", "x_or_iterable", ")", ":", "\n", "    ", "\"\"\"\n    Filter out elements that are Falsy (where bool(x) is False) from\n    potentially recursive lists.\n\n    :param x_or_iterable: An element or a list.\n    :return: If x_or_iterable is not an Iterable, then return x_or_iterable.\n    Otherwise, return a filtered version of x_or_iterable.\n    \"\"\"", "\n", "if", "isinstance", "(", "x_or_iterable", ",", "list", ")", ":", "\n", "        ", "new_items", "=", "[", "]", "\n", "for", "sub_elem", "in", "x_or_iterable", ":", "\n", "            ", "filtered_sub_elem", "=", "filter_recursive", "(", "sub_elem", ")", "\n", "if", "filtered_sub_elem", "is", "not", "None", "and", "not", "(", "\n", "isinstance", "(", "filtered_sub_elem", ",", "list", ")", "and", "\n", "len", "(", "filtered_sub_elem", ")", "==", "0", "\n", ")", ":", "\n", "                ", "new_items", ".", "append", "(", "filtered_sub_elem", ")", "\n", "", "", "return", "new_items", "\n", "", "else", ":", "\n", "        ", "return", "x_or_iterable", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.batch": [[302, 323], ["len", "range", "min"], "function", ["None"], ["", "", "def", "batch", "(", "iterable", ",", "n", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Split an interable into batches of size `n`. If `n` does not evenly divide\n    `iterable`, the last slice will be smaller.\n\n    https://stackoverflow.com/questions/8290397/how-to-split-an-iterable-in-constant-size-chunks\n\n    Usage:\n    ```\n        for i in batch(range(0,10), 3):\n            print i\n\n        [0,1,2]\n        [3,4,5]\n        [6,7,8]\n        [9]\n    ```\n    \"\"\"", "\n", "l", "=", "len", "(", "iterable", ")", "\n", "for", "ndx", "in", "range", "(", "0", ",", "l", ",", "n", ")", ":", "\n", "        ", "yield", "iterable", "[", "ndx", ":", "min", "(", "ndx", "+", "n", ",", "l", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.takespread": [[325, 337], ["float", "range", "len", "int", "math.ceil"], "function", ["None"], ["", "", "def", "takespread", "(", "sequence", ",", "num", ")", ":", "\n", "    ", "\"\"\"\n    Get `num` elements from the sequence that are as spread out as possible.\n\n    https://stackoverflow.com/questions/9873626/choose-m-evenly-spaced-elements-from-a-sequence-of-length-n\n    :param sequence:\n    :param num:\n    :return:\n    \"\"\"", "\n", "length", "=", "float", "(", "len", "(", "sequence", ")", ")", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "        ", "yield", "sequence", "[", "int", "(", "math", ".", "ceil", "(", "i", "*", "length", "/", "num", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.string_tuple_to_string": [[434, 442], ["len", "len", "str"], "function", ["None"], ["", "", "def", "string_tuple_to_string", "(", "strings", ")", ":", "\n", "    ", "if", "len", "(", "strings", ")", "==", "0", ":", "\n", "        ", "string", "=", "\"\"", "\n", "", "elif", "len", "(", "strings", ")", "==", "1", ":", "\n", "        ", "string", "=", "strings", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "string", "=", "\" \"", ".", "join", "(", "[", "str", "(", "s", ")", "for", "s", "in", "strings", "]", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.find_key_recursive": [[468, 476], ["obj.items", "isinstance", "pythonplusplus.find_key_recursive"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.find_key_recursive"], ["def", "find_key_recursive", "(", "obj", ",", "key", ")", ":", "\n", "    ", "if", "key", "in", "obj", ":", "\n", "        ", "return", "obj", "[", "key", "]", "\n", "", "for", "k", ",", "v", "in", "obj", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "            ", "result", "=", "find_key_recursive", "(", "v", ",", "key", ")", "\n", "if", "result", "is", "not", "None", ":", "\n", "                ", "return", "result", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.visualize_mujoco.visualize_mujoco_from_states": [[9, 20], ["range", "env.close", "len", "env.sim.set_state", "env.sim.forward", "env.render", "time.sleep"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.dynamics_models.probabilistic_ensemble.ProbabilisticEnsemble.forward", "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.ProxyEnv.render"], ["def", "visualize_mujoco_from_states", "(", "env", ",", "sim_states", ",", "time_delay", "=", "0.008", ")", ":", "\n", "    ", "\"\"\"\n    Given the states of the simulator, we can visualize the past Mujoco timesteps.\n        - Simulator states are obtained via env.sim.get_state()\n    \"\"\"", "\n", "for", "t", "in", "range", "(", "len", "(", "sim_states", ")", ")", ":", "\n", "        ", "env", ".", "sim", ".", "set_state", "(", "sim_states", "[", "t", "]", ")", "\n", "env", ".", "sim", ".", "forward", "(", ")", "\n", "env", ".", "render", "(", ")", "\n", "time", ".", "sleep", "(", "time_delay", ")", "\n", "", "env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.visualize_mujoco.mujoco_rgb_from_states": [[22, 35], ["range", "env.close", "len", "env.sim.set_state", "env.sim.forward", "rgb.append", "time.sleep", "env.render"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.dynamics_models.probabilistic_ensemble.ProbabilisticEnsemble.forward", "home.repos.pwc.inspect_result.kzl_lifelong_rl.envs.wrappers.ProxyEnv.render"], ["", "def", "mujoco_rgb_from_states", "(", "env", ",", "sim_states", ",", "time_delay", "=", "0.008", ")", ":", "\n", "    ", "\"\"\"\n    Given the states of the simulator, we can visualize the past Mujoco timesteps.\n        - Simulator states are obtained via env.sim.get_state()\n    \"\"\"", "\n", "rgb", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "len", "(", "sim_states", ")", ")", ":", "\n", "        ", "env", ".", "sim", ".", "set_state", "(", "sim_states", "[", "t", "]", ")", "\n", "env", ".", "sim", ".", "forward", "(", ")", "\n", "rgb", ".", "append", "(", "env", ".", "render", "(", "mode", "=", "'rgb_array'", ")", ")", "\n", "time", ".", "sleep", "(", "time_delay", ")", "\n", "", "env", ".", "close", "(", ")", "\n", "return", "rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.visualize_mujoco.record_mujoco_video_from_states": [[37, 54], ["visualize_mujoco.mujoco_rgb_from_states", "os.makedirs", "cv2.VideoWriter", "range", "cv2.VideoWriter.release", "os.path.dirname", "dict", "len", "cv2.cvtColor", "cv2.VideoWriter.write", "cv2.VideoWriter_fourcc", "int"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.util.visualize_mujoco.mujoco_rgb_from_states"], ["", "def", "record_mujoco_video_from_states", "(", "env", ",", "file_name", ",", "sim_states", ",", "time_delay", "=", "0.008", ",", "video_params", "=", "None", ")", ":", "\n", "    ", "rgb", "=", "mujoco_rgb_from_states", "(", "env", ",", "sim_states", ",", "time_delay", "=", "0", ")", "\n", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "file_name", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "if", "video_params", "is", "None", ":", "\n", "        ", "video_params", "=", "dict", "(", "\n", "size", "=", "(", "rgb", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "rgb", "[", "0", "]", ".", "shape", "[", "1", "]", ")", ",", "# (width, height)", "\n", "fourcc", "=", "cv2", ".", "VideoWriter_fourcc", "(", "*", "'mp4v'", ")", ",", "# use 'XVID' if not mp4", "\n", "fps", "=", "int", "(", "1", "/", "time_delay", ")", ",", "\n", ")", "\n", "\n", "", "out", "=", "cv2", ".", "VideoWriter", "(", "file_name", ",", "video_params", "[", "'fourcc'", "]", ",", "video_params", "[", "'fps'", "]", ",", "video_params", "[", "'size'", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "rgb", ")", ")", ":", "\n", "        ", "img", "=", "cv2", ".", "cvtColor", "(", "rgb", "[", "i", "]", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "out", ".", "write", "(", "img", ")", "\n", "", "out", ".", "release", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.get_generic_path_information": [[13, 63], ["collections.OrderedDict", "numpy.vstack", "collections.OrderedDict.update", "collections.OrderedDict.update", "collections.OrderedDict.update", "len", "eval_util.get_average_returns", "sum", "eval_util.create_stats_ordered_dict", "eval_util.create_stats_ordered_dict", "len", "numpy.hstack", "numpy.vstack", "eval_util.create_stats_ordered_dict", "all_env_infos[].keys", "lifelong_rl.list_of_dicts__to__dict_of_lists", "numpy.array", "numpy.array", "numpy.concatenate", "collections.OrderedDict.update", "collections.OrderedDict.update", "collections.OrderedDict.update", "eval_util.create_stats_ordered_dict", "eval_util.create_stats_ordered_dict", "eval_util.create_stats_ordered_dict"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.get_average_returns", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.pythonplusplus.list_of_dicts__to__dict_of_lists", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict"], ["def", "get_generic_path_information", "(", "paths", ",", "stat_prefix", "=", "''", ")", ":", "\n", "    ", "\"\"\"\n    Get an OrderedDict with a bunch of statistic names and values.\n    \"\"\"", "\n", "statistics", "=", "OrderedDict", "(", ")", "\n", "returns", "=", "[", "sum", "(", "path", "[", "\"rewards\"", "]", ")", "for", "path", "in", "paths", "]", "\n", "\n", "rewards", "=", "np", ".", "vstack", "(", "[", "path", "[", "\"rewards\"", "]", "for", "path", "in", "paths", "]", ")", "\n", "statistics", ".", "update", "(", "create_stats_ordered_dict", "(", "'Rewards'", ",", "rewards", ",", "\n", "stat_prefix", "=", "stat_prefix", ")", ")", "\n", "statistics", ".", "update", "(", "create_stats_ordered_dict", "(", "'Returns'", ",", "returns", ",", "\n", "stat_prefix", "=", "stat_prefix", ")", ")", "\n", "actions", "=", "[", "path", "[", "\"actions\"", "]", "for", "path", "in", "paths", "]", "\n", "if", "len", "(", "actions", "[", "0", "]", ".", "shape", ")", "==", "1", ":", "\n", "        ", "actions", "=", "np", ".", "hstack", "(", "[", "path", "[", "\"actions\"", "]", "for", "path", "in", "paths", "]", ")", "\n", "", "else", ":", "\n", "        ", "actions", "=", "np", ".", "vstack", "(", "[", "path", "[", "\"actions\"", "]", "for", "path", "in", "paths", "]", ")", "\n", "", "statistics", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "'Actions'", ",", "actions", ",", "stat_prefix", "=", "stat_prefix", "\n", ")", ")", "\n", "statistics", "[", "'Num Paths'", "]", "=", "len", "(", "paths", ")", "\n", "statistics", "[", "stat_prefix", "+", "'Average Returns'", "]", "=", "get_average_returns", "(", "paths", ")", "\n", "\n", "for", "info_key", "in", "[", "'env_infos'", ",", "'agent_infos'", "]", ":", "\n", "        ", "if", "info_key", "in", "paths", "[", "0", "]", ":", "\n", "            ", "all_env_infos", "=", "[", "\n", "ppp", ".", "list_of_dicts__to__dict_of_lists", "(", "p", "[", "info_key", "]", ")", "\n", "for", "p", "in", "paths", "\n", "]", "\n", "for", "k", "in", "all_env_infos", "[", "0", "]", ".", "keys", "(", ")", ":", "\n", "                ", "final_ks", "=", "np", ".", "array", "(", "[", "info", "[", "k", "]", "[", "-", "1", "]", "for", "info", "in", "all_env_infos", "]", ")", "\n", "first_ks", "=", "np", ".", "array", "(", "[", "info", "[", "k", "]", "[", "0", "]", "for", "info", "in", "all_env_infos", "]", ")", "\n", "all_ks", "=", "np", ".", "concatenate", "(", "[", "info", "[", "k", "]", "for", "info", "in", "all_env_infos", "]", ")", "\n", "statistics", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "stat_prefix", "+", "k", ",", "\n", "final_ks", ",", "\n", "stat_prefix", "=", "'{}/final/'", ".", "format", "(", "info_key", ")", ",", "\n", ")", ")", "\n", "statistics", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "stat_prefix", "+", "k", ",", "\n", "first_ks", ",", "\n", "stat_prefix", "=", "'{}/initial/'", ".", "format", "(", "info_key", ")", ",", "\n", ")", ")", "\n", "statistics", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "stat_prefix", "+", "k", ",", "\n", "all_ks", ",", "\n", "stat_prefix", "=", "'{}/'", ".", "format", "(", "info_key", ")", ",", "\n", ")", ")", "\n", "\n", "", "", "", "return", "statistics", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.get_average_returns": [[65, 68], ["numpy.mean", "sum"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean"], ["", "def", "get_average_returns", "(", "paths", ")", ":", "\n", "    ", "returns", "=", "[", "sum", "(", "path", "[", "\"rewards\"", "]", ")", "for", "path", "in", "paths", "]", "\n", "return", "np", ".", "mean", "(", "returns", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict": [[70, 115], ["isinstance", "isinstance", "isinstance", "collections.OrderedDict", "collections.OrderedDict", "len", "collections.OrderedDict", "collections.OrderedDict", "enumerate", "isinstance", "collections.OrderedDict", "numpy.max", "numpy.min", "eval_util.create_stats_ordered_dict", "collections.OrderedDict.update", "iter", "numpy.concatenate", "float", "numpy.mean", "numpy.std"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean"], ["", "def", "create_stats_ordered_dict", "(", "\n", "name", ",", "\n", "data", ",", "\n", "stat_prefix", "=", "None", ",", "\n", "always_show_all_stats", "=", "True", ",", "\n", "exclude_max_min", "=", "False", ",", "\n", ")", ":", "\n", "    ", "if", "stat_prefix", "is", "not", "None", ":", "\n", "        ", "name", "=", "\"{}{}\"", ".", "format", "(", "stat_prefix", ",", "name", ")", "\n", "", "if", "isinstance", "(", "data", ",", "Number", ")", ":", "\n", "        ", "return", "OrderedDict", "(", "{", "name", ":", "data", "}", ")", "\n", "\n", "", "if", "len", "(", "data", ")", "==", "0", ":", "\n", "        ", "return", "OrderedDict", "(", ")", "\n", "\n", "", "if", "isinstance", "(", "data", ",", "tuple", ")", ":", "\n", "        ", "ordered_dict", "=", "OrderedDict", "(", ")", "\n", "for", "number", ",", "d", "in", "enumerate", "(", "data", ")", ":", "\n", "            ", "sub_dict", "=", "create_stats_ordered_dict", "(", "\n", "\"{0}_{1}\"", ".", "format", "(", "name", ",", "number", ")", ",", "\n", "d", ",", "\n", ")", "\n", "ordered_dict", ".", "update", "(", "sub_dict", ")", "\n", "", "return", "ordered_dict", "\n", "\n", "", "if", "isinstance", "(", "data", ",", "list", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "iter", "(", "data", "[", "0", "]", ")", "\n", "", "except", "TypeError", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "data", "=", "np", ".", "concatenate", "(", "data", ")", "\n", "\n", "", "", "if", "(", "isinstance", "(", "data", ",", "np", ".", "ndarray", ")", "and", "data", ".", "size", "==", "1", "\n", "and", "not", "always_show_all_stats", ")", ":", "\n", "        ", "return", "OrderedDict", "(", "{", "name", ":", "float", "(", "data", ")", "}", ")", "\n", "\n", "", "stats", "=", "OrderedDict", "(", "[", "\n", "(", "name", "+", "' Mean'", ",", "np", ".", "mean", "(", "data", ")", ")", ",", "\n", "(", "name", "+", "' Std'", ",", "np", ".", "std", "(", "data", ")", ")", ",", "\n", "]", ")", "\n", "if", "not", "exclude_max_min", ":", "\n", "        ", "stats", "[", "name", "+", "' Max'", "]", "=", "np", ".", "max", "(", "data", ")", "\n", "stats", "[", "name", "+", "' Min'", "]", "=", "np", ".", "min", "(", "data", ")", "\n", "", "return", "stats", "\n", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.dynamics_models.probabilistic_ensemble.ProbabilisticEnsemble.__init__": [[20, 47], ["lifelong_rl.models.networks.ParallelizedEnsemble.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "lifelong_rl.ones", "lifelong_rl.ones"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.ones", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.ones"], ["def", "__init__", "(", "\n", "self", ",", "\n", "ensemble_size", ",", "# Number of members in ensemble", "\n", "obs_dim", ",", "# Observation dim of environment", "\n", "action_dim", ",", "# Action dim of environment", "\n", "hidden_sizes", ",", "# Hidden sizes for each model", "\n", "spectral_norm", "=", "False", ",", "# Apply spectral norm to every hidden layer", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "ensemble_size", "=", "ensemble_size", ",", "\n", "hidden_sizes", "=", "hidden_sizes", ",", "\n", "input_size", "=", "obs_dim", "+", "action_dim", ",", "\n", "output_size", "=", "2", "*", "(", "obs_dim", "+", "2", ")", ",", "# We predict (reward, done, next_state - state)", "\n", "hidden_activation", "=", "torch", ".", "tanh", ",", "\n", "spectral_norm", "=", "spectral_norm", ",", "\n", "**", "kwargs", "\n", ")", "\n", "\n", "self", ".", "obs_dim", ",", "self", ".", "action_dim", "=", "obs_dim", ",", "action_dim", "\n", "self", ".", "output_size", "=", "obs_dim", "+", "2", "\n", "\n", "# Note: we do not learn the logstd here, but some implementations do", "\n", "self", ".", "max_logstd", "=", "nn", ".", "Parameter", "(", "\n", "ptu", ".", "ones", "(", "obs_dim", "+", "2", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "min_logstd", "=", "nn", ".", "Parameter", "(", "\n", "-", "ptu", ".", "ones", "(", "obs_dim", "+", "2", ")", "*", "5", ",", "requires_grad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.dynamics_models.probabilistic_ensemble.ProbabilisticEnsemble.forward": [[48, 67], ["super().forward", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "lifelong_rl.randn", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.dynamics_models.probabilistic_ensemble.ProbabilisticEnsemble.forward", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.randn"], ["", "def", "forward", "(", "self", ",", "input", ",", "deterministic", "=", "False", ",", "return_dist", "=", "False", ")", ":", "\n", "        ", "output", "=", "super", "(", ")", ".", "forward", "(", "input", ")", "\n", "mean", ",", "logstd", "=", "torch", ".", "chunk", "(", "output", ",", "2", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# Variance clamping to prevent poor numerical predictions", "\n", "logstd", "=", "self", ".", "max_logstd", "-", "F", ".", "softplus", "(", "self", ".", "max_logstd", "-", "logstd", ")", "\n", "logstd", "=", "self", ".", "min_logstd", "+", "F", ".", "softplus", "(", "logstd", "-", "self", ".", "min_logstd", ")", "\n", "\n", "if", "deterministic", ":", "\n", "            ", "return", "mean", ",", "logstd", "if", "return_dist", "else", "mean", "\n", "\n", "", "std", "=", "torch", ".", "exp", "(", "logstd", ")", "\n", "eps", "=", "ptu", ".", "randn", "(", "std", ".", "shape", ")", "\n", "samples", "=", "mean", "+", "std", "*", "eps", "\n", "\n", "if", "return_dist", ":", "\n", "            ", "return", "samples", ",", "mean", ",", "logstd", "\n", "", "else", ":", "\n", "            ", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.dynamics_models.probabilistic_ensemble.ProbabilisticEnsemble.get_loss": [[68, 95], ["probabilistic_ensemble.ProbabilisticEnsemble.forward", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "len", "y.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "torch.sqrt().mean().mean", "torch.sqrt().mean().mean", "torch.sqrt().mean().mean", "torch.sqrt().mean().mean", "torch.sqrt().mean().mean", "torch.sqrt().mean().mean", "torch.sqrt().mean().mean", "torch.sqrt().mean().mean", "torch.sqrt().mean().mean", "loss.mean", "y.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "torch.sqrt().mean", "torch.sqrt().mean", "torch.sqrt().mean", "torch.sqrt().mean", "torch.sqrt().mean", "torch.sqrt().mean", "torch.sqrt().mean", "torch.sqrt().mean", "torch.sqrt().mean", "range", "loss.mean", "torch.sqrt().mean().mean.mean", "torch.sqrt().mean().mean.mean", "torch.sqrt().mean().mean.mean", "range", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.dynamics_models.probabilistic_ensemble.ProbabilisticEnsemble.forward", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean"], ["", "", "def", "get_loss", "(", "self", ",", "x", ",", "y", ",", "split_by_model", "=", "False", ",", "return_l2_error", "=", "False", ")", ":", "\n", "# Note: we assume y here already accounts for the delta of the next state", "\n", "\n", "        ", "mean", ",", "logstd", "=", "self", ".", "forward", "(", "x", ",", "deterministic", "=", "True", ",", "return_dist", "=", "True", ")", "\n", "if", "len", "(", "y", ".", "shape", ")", "<", "3", ":", "\n", "            ", "y", "=", "y", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "self", ".", "ensemble_size", ",", "1", ",", "1", ")", "\n", "\n", "# Maximize log-probability of transitions", "\n", "", "inv_var", "=", "torch", ".", "exp", "(", "-", "2", "*", "logstd", ")", "\n", "sq_l2_error", "=", "(", "mean", "-", "y", ")", "**", "2", "\n", "if", "return_l2_error", ":", "\n", "            ", "l2_error", "=", "torch", ".", "sqrt", "(", "sq_l2_error", ")", ".", "mean", "(", "dim", "=", "-", "1", ")", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "\n", "", "loss", "=", "(", "sq_l2_error", "*", "inv_var", "+", "2", "*", "logstd", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "\n", "if", "split_by_model", ":", "\n", "            ", "losses", "=", "[", "loss", "[", "i", "]", "for", "i", "in", "range", "(", "self", ".", "ensemble_size", ")", "]", "\n", "if", "return_l2_error", ":", "\n", "                ", "l2_errors", "=", "[", "l2_error", "[", "i", "]", "for", "i", "in", "range", "(", "self", ".", "ensemble_size", ")", "]", "\n", "return", "losses", ",", "l2_errors", "\n", "", "else", ":", "\n", "                ", "return", "losses", "\n", "", "", "else", ":", "\n", "            ", "if", "return_l2_error", ":", "\n", "                ", "return", "loss", ".", "mean", "(", ")", ",", "l2_error", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "                ", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.dynamics_models.probabilistic_ensemble.ProbabilisticEnsemble.sample_with_disagreement": [[96, 141], ["probabilistic_ensemble.ProbabilisticEnsemble.forward", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.fmod", "torch.fmod", "torch.fmod", "torch.fmod", "torch.fmod", "torch.fmod", "torch.fmod", "torch.fmod", "torch.fmod", "inds.repeat.repeat.unsqueeze().to", "inds.repeat.repeat.repeat", "inds_b.repeat.repeat.unsqueeze().to", "inds_b.repeat.repeat.repeat", "range", "range", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "inds.repeat.repeat.unsqueeze", "inds_b.repeat.repeat.unsqueeze", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt.max", "torch.sqrt.max", "torch.sqrt.max", "disagreements.reshape.reshape.reshape", "vars.sum"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.dynamics_models.probabilistic_ensemble.ProbabilisticEnsemble.forward", "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchOfflineMBRLAlgorithm.to", "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchOfflineMBRLAlgorithm.to", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean", "home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.distributions.TanhNormal.mean"], ["", "", "", "def", "sample_with_disagreement", "(", "self", ",", "input", ",", "return_dist", "=", "False", ",", "disagreement_type", "=", "'mean'", ")", ":", "\n", "        ", "preds", ",", "mean", ",", "logstd", "=", "self", ".", "forward", "(", "input", ",", "deterministic", "=", "False", ",", "return_dist", "=", "True", ")", "\n", "\n", "# Standard uniformly from the ensemble", "\n", "inds", "=", "torch", ".", "randint", "(", "0", ",", "preds", ".", "shape", "[", "0", "]", ",", "input", ".", "shape", "[", ":", "-", "1", "]", ")", "\n", "\n", "# Ensure we don't use the same member to estimate disagreement", "\n", "inds_b", "=", "torch", ".", "randint", "(", "0", ",", "mean", ".", "shape", "[", "0", "]", ",", "input", ".", "shape", "[", ":", "-", "1", "]", ")", "\n", "inds_b", "[", "inds", "==", "inds_b", "]", "=", "torch", ".", "fmod", "(", "inds_b", "[", "inds", "==", "inds_b", "]", "+", "1", ",", "mean", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# Repeat for multiplication", "\n", "inds", "=", "inds", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ".", "to", "(", "device", "=", "ptu", ".", "device", ")", "\n", "inds", "=", "inds", ".", "repeat", "(", "1", ",", "preds", ".", "shape", "[", "2", "]", ")", "\n", "inds_b", "=", "inds_b", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ".", "to", "(", "device", "=", "ptu", ".", "device", ")", "\n", "inds_b", "=", "inds_b", ".", "repeat", "(", "1", ",", "preds", ".", "shape", "[", "2", "]", ")", "\n", "\n", "# Uniformly sample from ensemble", "\n", "samples", "=", "(", "inds", "==", "0", ")", ".", "float", "(", ")", "*", "preds", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "preds", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "samples", "+=", "(", "inds", "==", "i", ")", ".", "float", "(", ")", "*", "preds", "[", "i", "]", "\n", "\n", "", "if", "disagreement_type", "==", "'mean'", ":", "\n", "# Disagreement = mean squared difference in mean predictions (Kidambi et al. 2020)", "\n", "            ", "means_a", "=", "(", "inds", "==", "0", ")", ".", "float", "(", ")", "*", "mean", "[", "0", "]", "\n", "means_b", "=", "(", "inds_b", "==", "0", ")", ".", "float", "(", ")", "*", "mean", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "preds", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "means_a", "+=", "(", "inds", "==", "i", ")", ".", "float", "(", ")", "*", "mean", "[", "i", "]", "\n", "means_b", "+=", "(", "inds_b", "==", "i", ")", ".", "float", "(", ")", "*", "mean", "[", "i", "]", "\n", "\n", "", "disagreements", "=", "torch", ".", "mean", "(", "(", "means_a", "-", "means_b", ")", "**", "2", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "", "elif", "disagreement_type", "==", "'var'", ":", "\n", "# Disagreement = max Frobenius norm of covariance matrix (Yu et al. 2020)", "\n", "            ", "vars", "=", "(", "2", "*", "logstd", ")", ".", "exp", "(", ")", "\n", "frobenius", "=", "torch", ".", "sqrt", "(", "vars", ".", "sum", "(", "dim", "=", "-", "1", ")", ")", "\n", "disagreements", ",", "*", "_", "=", "frobenius", ".", "max", "(", "dim", "=", "0", ")", "\n", "disagreements", "=", "disagreements", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "if", "return_dist", ":", "\n", "            ", "return", "samples", ",", "disagreements", ",", "mean", ",", "logstd", "\n", "", "else", ":", "\n", "            ", "return", "samples", ",", "disagreements", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.TerminalTablePrinter.__init__": [[26, 29], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "headers", "=", "None", "\n", "self", ".", "tabulars", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.TerminalTablePrinter.print_tabular": [[30, 37], ["logging.TerminalTablePrinter.tabulars.append", "logging.TerminalTablePrinter.refresh", "len", "len"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.TerminalTablePrinter.refresh"], ["", "def", "print_tabular", "(", "self", ",", "new_tabular", ")", ":", "\n", "        ", "if", "self", ".", "headers", "is", "None", ":", "\n", "            ", "self", ".", "headers", "=", "[", "x", "[", "0", "]", "for", "x", "in", "new_tabular", "]", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "self", ".", "headers", ")", "==", "len", "(", "new_tabular", ")", "\n", "", "self", ".", "tabulars", ".", "append", "(", "[", "x", "[", "1", "]", "for", "x", "in", "new_tabular", "]", ")", "\n", "self", ".", "refresh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.TerminalTablePrinter.refresh": [[38, 45], ["os.popen().read().split", "os.popen().read().split", "os.popen().read().split", "os.popen().read().split", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "lifelong_rl.core.logging.tabulate.tabulate", "os.popen().read", "os.popen().read", "os.popen().read", "os.popen().read", "os.popen", "os.popen", "os.popen", "os.popen", "int"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate.tabulate"], ["", "def", "refresh", "(", "self", ")", ":", "\n", "        ", "import", "os", "\n", "rows", ",", "columns", "=", "os", ".", "popen", "(", "'stty size'", ",", "'r'", ")", ".", "read", "(", ")", ".", "split", "(", ")", "\n", "tabulars", "=", "self", ".", "tabulars", "[", "-", "(", "int", "(", "rows", ")", "-", "3", ")", ":", "]", "\n", "sys", ".", "stdout", ".", "write", "(", "\"\\x1b[2J\\x1b[H\"", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "tabulate", "(", "tabulars", ",", "self", ".", "headers", ")", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.MyEncoder.default": [[48, 60], ["isinstance", "json.JSONEncoder.default", "isinstance", "callable"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.MyEncoder.default"], ["    ", "def", "default", "(", "self", ",", "o", ")", ":", "\n", "        ", "if", "isinstance", "(", "o", ",", "type", ")", ":", "\n", "            ", "return", "{", "'$class'", ":", "o", ".", "__module__", "+", "\".\"", "+", "o", ".", "__name__", "}", "\n", "", "elif", "isinstance", "(", "o", ",", "Enum", ")", ":", "\n", "            ", "return", "{", "\n", "'$enum'", ":", "o", ".", "__module__", "+", "\".\"", "+", "o", ".", "__class__", ".", "__name__", "+", "'.'", "+", "o", ".", "name", "\n", "}", "\n", "", "elif", "callable", "(", "o", ")", ":", "\n", "            ", "return", "{", "\n", "'$function'", ":", "o", ".", "__module__", "+", "\".\"", "+", "o", ".", "__name__", "\n", "}", "\n", "", "return", "json", ".", "JSONEncoder", ".", "default", "(", "self", ",", "o", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.__init__": [[73, 101], ["set", "logging.TerminalTablePrinter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "log_dir", "=", "''", "\n", "self", ".", "log_to_wandb", "=", "False", "\n", "\n", "self", ".", "_prefixes", "=", "[", "]", "\n", "self", ".", "_prefix_str", "=", "''", "\n", "\n", "self", ".", "_tabular_prefixes", "=", "[", "]", "\n", "self", ".", "_tabular_prefix_str", "=", "''", "\n", "\n", "self", ".", "_tabular", "=", "[", "]", "\n", "\n", "self", ".", "_text_outputs", "=", "[", "]", "\n", "self", ".", "_tabular_outputs", "=", "[", "]", "\n", "\n", "self", ".", "_text_fds", "=", "{", "}", "\n", "self", ".", "_tabular_fds", "=", "{", "}", "\n", "self", ".", "_tabular_header_written", "=", "set", "(", ")", "\n", "\n", "self", ".", "_snapshot_dir", "=", "None", "\n", "self", ".", "_snapshot_mode", "=", "'all'", "\n", "self", ".", "_snapshot_gap", "=", "1", "\n", "\n", "self", ".", "_log_tabular_only", "=", "False", "\n", "self", ".", "_header_printed", "=", "False", "\n", "self", ".", "table_printer", "=", "TerminalTablePrinter", "(", ")", "\n", "\n", "self", ".", "_plt_figs", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.reset": [[102, 104], ["logging.Logger.__init__"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger._add_output": [[105, 110], ["logging.mkdir_p", "arr.append", "open", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.dirname"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.mkdir_p"], ["", "def", "_add_output", "(", "self", ",", "file_name", ",", "arr", ",", "fds", ",", "mode", "=", "'a'", ")", ":", "\n", "        ", "if", "file_name", "not", "in", "arr", ":", "\n", "            ", "mkdir_p", "(", "os", ".", "path", ".", "dirname", "(", "file_name", ")", ")", "\n", "arr", ".", "append", "(", "file_name", ")", "\n", "fds", "[", "file_name", "]", "=", "open", "(", "file_name", ",", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger._remove_output": [[111, 116], ["fds[].close", "arr.remove"], "methods", ["None"], ["", "", "def", "_remove_output", "(", "self", ",", "file_name", ",", "arr", ",", "fds", ")", ":", "\n", "        ", "if", "file_name", "in", "arr", ":", "\n", "            ", "fds", "[", "file_name", "]", ".", "close", "(", ")", "\n", "del", "fds", "[", "file_name", "]", "\n", "arr", ".", "remove", "(", "file_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.push_prefix": [[117, 120], ["logging.Logger._prefixes.append"], "methods", ["None"], ["", "", "def", "push_prefix", "(", "self", ",", "prefix", ")", ":", "\n", "        ", "self", ".", "_prefixes", ".", "append", "(", "prefix", ")", "\n", "self", ".", "_prefix_str", "=", "''", ".", "join", "(", "self", ".", "_prefixes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.add_text_output": [[121, 124], ["logging.Logger._add_output"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger._add_output"], ["", "def", "add_text_output", "(", "self", ",", "file_name", ")", ":", "\n", "        ", "self", ".", "_add_output", "(", "file_name", ",", "self", ".", "_text_outputs", ",", "self", ".", "_text_fds", ",", "\n", "mode", "=", "'a'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.set_text_output": [[125, 130], ["logging.Logger.add_text_output", "logging.Logger.remove_text_output"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.add_text_output", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.remove_text_output"], ["", "def", "set_text_output", "(", "self", ",", "file_name", ")", ":", "\n", "        ", "old_log_files", "=", "[", "old_file", "for", "old_file", "in", "self", ".", "_text_fds", "]", "\n", "for", "old_file", "in", "old_log_files", ":", "\n", "            ", "self", ".", "remove_text_output", "(", "old_file", ")", "\n", "", "self", ".", "add_text_output", "(", "file_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.remove_text_output": [[131, 133], ["logging.Logger._remove_output"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger._remove_output"], ["", "def", "remove_text_output", "(", "self", ",", "file_name", ")", ":", "\n", "        ", "self", ".", "_remove_output", "(", "file_name", ",", "self", ".", "_text_outputs", ",", "self", ".", "_text_fds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.add_tabular_output": [[134, 139], ["logging.Logger._add_output", "os.join", "os.join"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger._add_output"], ["", "def", "add_tabular_output", "(", "self", ",", "file_name", ",", "relative_to_snapshot_dir", "=", "False", ")", ":", "\n", "        ", "if", "relative_to_snapshot_dir", ":", "\n", "            ", "file_name", "=", "osp", ".", "join", "(", "self", ".", "_snapshot_dir", ",", "file_name", ")", "\n", "", "self", ".", "_add_output", "(", "file_name", ",", "self", ".", "_tabular_outputs", ",", "self", ".", "_tabular_fds", ",", "\n", "mode", "=", "'w'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.set_tabular_output": [[140, 147], ["logging.Logger.add_tabular_output", "os.join", "os.join", "logging.Logger.remove_tabular_output"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.add_tabular_output", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.remove_tabular_output"], ["", "def", "set_tabular_output", "(", "self", ",", "file_name", ",", "relative_to_snapshot_dir", "=", "False", ")", ":", "\n", "        ", "if", "relative_to_snapshot_dir", ":", "\n", "            ", "file_name", "=", "osp", ".", "join", "(", "self", ".", "_snapshot_dir", ",", "file_name", ")", "\n", "", "old_log_files", "=", "[", "old_file", "for", "old_file", "in", "self", ".", "_tabular_fds", "]", "\n", "for", "old_file", "in", "old_log_files", ":", "\n", "            ", "self", ".", "remove_tabular_output", "(", "old_file", ")", "\n", "", "self", ".", "add_tabular_output", "(", "file_name", ",", "relative_to_snapshot_dir", "=", "relative_to_snapshot_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.get_tabular_output": [[148, 150], ["None"], "methods", ["None"], ["", "def", "get_tabular_output", "(", "self", ",", "ind", "=", "0", ")", ":", "\n", "        ", "return", "self", ".", "_tabular_outputs", "[", "ind", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.remove_tabular_output": [[151, 157], ["logging.Logger._remove_output", "os.join", "os.join", "logging.Logger._tabular_header_written.remove"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger._remove_output"], ["", "def", "remove_tabular_output", "(", "self", ",", "file_name", ",", "relative_to_snapshot_dir", "=", "False", ")", ":", "\n", "        ", "if", "relative_to_snapshot_dir", ":", "\n", "            ", "file_name", "=", "osp", ".", "join", "(", "self", ".", "_snapshot_dir", ",", "file_name", ")", "\n", "", "if", "self", ".", "_tabular_fds", "[", "file_name", "]", "in", "self", ".", "_tabular_header_written", ":", "\n", "            ", "self", ".", "_tabular_header_written", ".", "remove", "(", "self", ".", "_tabular_fds", "[", "file_name", "]", ")", "\n", "", "self", ".", "_remove_output", "(", "file_name", ",", "self", ".", "_tabular_outputs", ",", "self", ".", "_tabular_fds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.set_snapshot_dir": [[158, 160], ["None"], "methods", ["None"], ["", "def", "set_snapshot_dir", "(", "self", ",", "dir_name", ")", ":", "\n", "        ", "self", ".", "_snapshot_dir", "=", "dir_name", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.get_snapshot_dir": [[161, 163], ["None"], "methods", ["None"], ["", "def", "get_snapshot_dir", "(", "self", ",", ")", ":", "\n", "        ", "return", "self", ".", "_snapshot_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.get_snapshot_mode": [[164, 166], ["None"], "methods", ["None"], ["", "def", "get_snapshot_mode", "(", "self", ",", ")", ":", "\n", "        ", "return", "self", ".", "_snapshot_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.set_snapshot_mode": [[167, 169], ["None"], "methods", ["None"], ["", "def", "set_snapshot_mode", "(", "self", ",", "mode", ")", ":", "\n", "        ", "self", ".", "_snapshot_mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.get_snapshot_gap": [[170, 172], ["None"], "methods", ["None"], ["", "def", "get_snapshot_gap", "(", "self", ",", ")", ":", "\n", "        ", "return", "self", ".", "_snapshot_gap", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.set_snapshot_gap": [[173, 175], ["None"], "methods", ["None"], ["", "def", "set_snapshot_gap", "(", "self", ",", "gap", ")", ":", "\n", "        ", "self", ".", "_snapshot_gap", "=", "gap", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.set_log_tabular_only": [[176, 178], ["None"], "methods", ["None"], ["", "def", "set_log_tabular_only", "(", "self", ",", "log_tabular_only", ")", ":", "\n", "        ", "self", ".", "_log_tabular_only", "=", "log_tabular_only", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.get_log_tabular_only": [[179, 181], ["None"], "methods", ["None"], ["", "def", "get_log_tabular_only", "(", "self", ",", ")", ":", "\n", "        ", "return", "self", ".", "_log_tabular_only", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.log": [[182, 197], ["datetime.datetime.now", "datetime.datetime.now.strftime", "print", "list", "sys.stdout.flush", "dateutil.tz.tzlocal", "logging.Logger._text_fds.values", "fd.write", "fd.flush"], "methods", ["None"], ["", "def", "log", "(", "self", ",", "s", ",", "with_prefix", "=", "False", ",", "with_timestamp", "=", "True", ")", ":", "\n", "        ", "out", "=", "s", "\n", "if", "with_prefix", ":", "\n", "            ", "out", "=", "self", ".", "_prefix_str", "+", "out", "\n", "", "if", "with_timestamp", ":", "\n", "            ", "now", "=", "datetime", ".", "datetime", ".", "now", "(", "dateutil", ".", "tz", ".", "tzlocal", "(", ")", ")", "\n", "timestamp", "=", "now", ".", "strftime", "(", "'%Y-%m-%d %H:%M:%S.%f %Z'", ")", "\n", "out", "=", "\"%s | %s\"", "%", "(", "timestamp", ",", "out", ")", "\n", "", "if", "not", "self", ".", "_log_tabular_only", ":", "\n", "# Also log to stdout", "\n", "            ", "print", "(", "out", ")", "\n", "for", "fd", "in", "list", "(", "self", ".", "_text_fds", ".", "values", "(", ")", ")", ":", "\n", "                ", "fd", ".", "write", "(", "out", "+", "'\\n'", ")", "\n", "fd", ".", "flush", "(", ")", "\n", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.record_tabular": [[198, 200], ["logging.Logger._tabular.append", "str", "str"], "methods", ["None"], ["", "", "def", "record_tabular", "(", "self", ",", "key", ",", "val", ")", ":", "\n", "        ", "self", ".", "_tabular", ".", "append", "(", "(", "self", ".", "_tabular_prefix_str", "+", "str", "(", "key", ")", ",", "str", "(", "val", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.record_dict": [[201, 208], ["d.items", "logging.Logger.push_tabular_prefix", "logging.Logger.record_tabular", "logging.Logger.pop_tabular_prefix"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.push_tabular_prefix", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.record_tabular", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.pop_tabular_prefix"], ["", "def", "record_dict", "(", "self", ",", "d", ",", "prefix", "=", "None", ")", ":", "\n", "        ", "if", "prefix", "is", "not", "None", ":", "\n", "            ", "self", ".", "push_tabular_prefix", "(", "prefix", ")", "\n", "", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "record_tabular", "(", "k", ",", "v", ")", "\n", "", "if", "prefix", "is", "not", "None", ":", "\n", "            ", "self", ".", "pop_tabular_prefix", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.push_tabular_prefix": [[209, 212], ["logging.Logger._tabular_prefixes.append"], "methods", ["None"], ["", "", "def", "push_tabular_prefix", "(", "self", ",", "key", ")", ":", "\n", "        ", "self", ".", "_tabular_prefixes", ".", "append", "(", "key", ")", "\n", "self", ".", "_tabular_prefix_str", "=", "''", ".", "join", "(", "self", ".", "_tabular_prefixes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.pop_tabular_prefix": [[213, 216], ["None"], "methods", ["None"], ["", "def", "pop_tabular_prefix", "(", "self", ",", ")", ":", "\n", "        ", "del", "self", ".", "_tabular_prefixes", "[", "-", "1", "]", "\n", "self", ".", "_tabular_prefix_str", "=", "''", ".", "join", "(", "self", ".", "_tabular_prefixes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.output_dir": [[217, 219], ["None"], "methods", ["None"], ["", "def", "output_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_snapshot_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.savefig": [[220, 229], ["os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "matplotlib.savefig", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.dirname", "numpy.fromstring", "data.reshape.reshape.reshape", "fig.canvas.tostring_rgb", "fig.canvas.get_width_height"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.savefig"], ["", "def", "savefig", "(", "self", ",", "save_name", ",", "fig", "=", "None", ")", ":", "\n", "        ", "orig_save_name", "=", "save_name", "\n", "save_name", "=", "self", ".", "_snapshot_dir", "+", "'/'", "+", "save_name", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "save_name", ")", ",", "exist_ok", "=", "True", ")", "\n", "plt", ".", "savefig", "(", "save_name", ")", "\n", "\n", "if", "False", "and", "self", ".", "log_to_wandb", "and", "fig", "is", "not", "None", ":", "\n", "            ", "data", "=", "np", ".", "fromstring", "(", "fig", ".", "canvas", ".", "tostring_rgb", "(", ")", ",", "dtype", "=", "np", ".", "uint8", ",", "sep", "=", "''", ")", "\n", "data", "=", "data", ".", "reshape", "(", "fig", ".", "canvas", ".", "get_width_height", "(", ")", "[", ":", ":", "-", "1", "]", "+", "(", "3", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.save_extra_data": [[232, 247], ["os.join", "os.join", "joblib.dump", "pickle.dump", "ValueError", "open"], "methods", ["None"], ["", "", "def", "save_extra_data", "(", "self", ",", "data", ",", "file_name", "=", "'extra_data.pkl'", ",", "mode", "=", "'joblib'", ")", ":", "\n", "        ", "\"\"\"\n        Data saved here will always override the last entry\n\n        :param data: Something pickle'able.\n        \"\"\"", "\n", "file_name", "=", "osp", ".", "join", "(", "self", ".", "_snapshot_dir", ",", "file_name", ")", "\n", "if", "mode", "==", "'joblib'", ":", "\n", "            ", "import", "joblib", "\n", "joblib", ".", "dump", "(", "data", ",", "file_name", ",", "compress", "=", "3", ")", "\n", "", "elif", "mode", "==", "'pickle'", ":", "\n", "            ", "pickle", ".", "dump", "(", "data", ",", "open", "(", "file_name", ",", "\"wb\"", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid mode: {}\"", ".", "format", "(", "mode", ")", ")", "\n", "", "return", "file_name", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.get_table_dict": [[248, 250], ["dict"], "methods", ["None"], ["", "def", "get_table_dict", "(", "self", ",", ")", ":", "\n", "        ", "return", "dict", "(", "self", ".", "_tabular", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.get_table_key_set": [[251, 253], ["set"], "methods", ["None"], ["", "def", "get_table_key_set", "(", "self", ",", ")", ":", "\n", "        ", "return", "set", "(", "key", "for", "key", ",", "value", "in", "self", ".", "_tabular", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.prefix": [[254, 261], ["logging.Logger.push_prefix", "logging.Logger.pop_prefix"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.push_prefix", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.pop_prefix"], ["", "@", "contextmanager", "\n", "def", "prefix", "(", "self", ",", "key", ")", ":", "\n", "        ", "self", ".", "push_prefix", "(", "key", ")", "\n", "try", ":", "\n", "            ", "yield", "\n", "", "finally", ":", "\n", "            ", "self", ".", "pop_prefix", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.tabular_prefix": [[262, 267], ["logging.Logger.push_tabular_prefix", "logging.Logger.pop_tabular_prefix"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.push_tabular_prefix", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.pop_tabular_prefix"], ["", "", "@", "contextmanager", "\n", "def", "tabular_prefix", "(", "self", ",", "key", ")", ":", "\n", "        ", "self", ".", "push_tabular_prefix", "(", "key", ")", "\n", "yield", "\n", "self", ".", "pop_tabular_prefix", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.log_variant": [[268, 272], ["logging.mkdir_p", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.dirname", "open", "json.dump"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.mkdir_p"], ["", "def", "log_variant", "(", "self", ",", "log_file", ",", "variant_data", ")", ":", "\n", "        ", "mkdir_p", "(", "os", ".", "path", ".", "dirname", "(", "log_file", ")", ")", "\n", "with", "open", "(", "log_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "variant_data", ",", "f", ",", "indent", "=", "2", ",", "sort_keys", "=", "True", ",", "cls", "=", "MyEncoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.record_tabular_misc_stat": [[273, 292], ["len", "logging.Logger.record_tabular", "logging.Logger.record_tabular", "logging.Logger.record_tabular", "logging.Logger.record_tabular", "logging.Logger.record_tabular", "logging.Logger.record_tabular", "logging.Logger.record_tabular", "logging.Logger.record_tabular", "logging.Logger.record_tabular", "logging.Logger.record_tabular", "numpy.average", "numpy.std", "numpy.median", "numpy.min", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.record_tabular", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.record_tabular", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.record_tabular", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.record_tabular", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.record_tabular", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.record_tabular", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.record_tabular", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.record_tabular", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.record_tabular", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.record_tabular"], ["", "", "def", "record_tabular_misc_stat", "(", "self", ",", "key", ",", "values", ",", "placement", "=", "'back'", ")", ":", "\n", "        ", "if", "placement", "==", "'front'", ":", "\n", "            ", "prefix", "=", "\"\"", "\n", "suffix", "=", "key", "\n", "", "else", ":", "\n", "            ", "prefix", "=", "key", "\n", "suffix", "=", "\"\"", "\n", "", "if", "len", "(", "values", ")", ">", "0", ":", "\n", "            ", "self", ".", "record_tabular", "(", "prefix", "+", "\"Average\"", "+", "suffix", ",", "np", ".", "average", "(", "values", ")", ")", "\n", "self", ".", "record_tabular", "(", "prefix", "+", "\"Std\"", "+", "suffix", ",", "np", ".", "std", "(", "values", ")", ")", "\n", "self", ".", "record_tabular", "(", "prefix", "+", "\"Median\"", "+", "suffix", ",", "np", ".", "median", "(", "values", ")", ")", "\n", "self", ".", "record_tabular", "(", "prefix", "+", "\"Min\"", "+", "suffix", ",", "np", ".", "min", "(", "values", ")", ")", "\n", "self", ".", "record_tabular", "(", "prefix", "+", "\"Max\"", "+", "suffix", ",", "np", ".", "max", "(", "values", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "record_tabular", "(", "prefix", "+", "\"Average\"", "+", "suffix", ",", "np", ".", "nan", ")", "\n", "self", ".", "record_tabular", "(", "prefix", "+", "\"Std\"", "+", "suffix", ",", "np", ".", "nan", ")", "\n", "self", ".", "record_tabular", "(", "prefix", "+", "\"Median\"", "+", "suffix", ",", "np", ".", "nan", ")", "\n", "self", ".", "record_tabular", "(", "prefix", "+", "\"Min\"", "+", "suffix", ",", "np", ".", "nan", ")", "\n", "self", ".", "record_tabular", "(", "prefix", "+", "\"Max\"", "+", "suffix", ",", "np", ".", "nan", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.dump_tabular": [[293, 334], ["kwargs.pop", "len", "dict", "list", "logging.Logger.table_printer.print_tabular", "lifelong_rl.core.logging.tabulate.tabulate().split", "dict", "wandb.log", "logging.Logger._tabular_fds.values", "csv.DictWriter", "csv.DictWriter.writerow", "tabular_fd.flush", "logging.Logger.log", "proc_key.lower.lower.replace", "proc_key.lower.lower.replace", "proc_key.lower.lower.lower", "float", "csv.DictWriter.writeheader", "logging.Logger._tabular_header_written.add", "lifelong_rl.core.logging.tabulate.tabulate", "list", "dict.keys"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.TerminalTablePrinter.print_tabular", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.log", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.log", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate.tabulate"], ["", "", "def", "dump_tabular", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "wh", "=", "kwargs", ".", "pop", "(", "\"write_header\"", ",", "None", ")", "\n", "if", "len", "(", "self", ".", "_tabular", ")", ">", "0", ":", "\n", "            ", "if", "self", ".", "_log_tabular_only", ":", "\n", "                ", "self", ".", "table_printer", ".", "print_tabular", "(", "self", ".", "_tabular", ")", "\n", "", "else", ":", "\n", "                ", "for", "line", "in", "tabulate", "(", "self", ".", "_tabular", ")", ".", "split", "(", "'\\n'", ")", ":", "\n", "                    ", "self", ".", "log", "(", "line", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "", "tabular_dict", "=", "dict", "(", "self", ".", "_tabular", ")", "\n", "\n", "if", "self", ".", "log_to_wandb", ":", "\n", "# wandb_dict = {key: float(tabular_dict[key]) for key in tabular_dict}", "\n", "# wandb has issues", "\n", "                ", "cnt", "=", "0", "\n", "wandb_dict", "=", "dict", "(", ")", "\n", "for", "key", "in", "tabular_dict", ":", "\n", "                    ", "proc_key", "=", "key", "# key.replace('/', '.')", "\n", "proc_key", "=", "proc_key", ".", "replace", "(", "' (s)'", ",", "''", ")", "\n", "proc_key", "=", "proc_key", ".", "replace", "(", "' '", ",", "'_'", ")", "\n", "proc_key", "=", "proc_key", ".", "lower", "(", ")", "\n", "if", "'/'", "not", "in", "key", "or", "'replay_buffer'", "in", "key", ":", "\n", "                        ", "proc_key", "=", "'misc/'", "+", "proc_key", "\n", "", "wandb_dict", "[", "proc_key", "]", "=", "float", "(", "tabular_dict", "[", "key", "]", ")", "\n", "cnt", "+=", "1", "\n", "# wandb_dict['plt_imgs'] = self._plt_figs", "\n", "", "wandb", ".", "log", "(", "wandb_dict", ")", "\n", "self", ".", "_plt_figs", "=", "[", "]", "\n", "\n", "# Also write to the csv files", "\n", "# This assumes that the keys in each iteration won't change!", "\n", "", "for", "tabular_fd", "in", "list", "(", "self", ".", "_tabular_fds", ".", "values", "(", ")", ")", ":", "\n", "                ", "writer", "=", "csv", ".", "DictWriter", "(", "tabular_fd", ",", "\n", "fieldnames", "=", "list", "(", "tabular_dict", ".", "keys", "(", ")", ")", ")", "\n", "if", "wh", "or", "(", "\n", "wh", "is", "None", "and", "tabular_fd", "not", "in", "self", ".", "_tabular_header_written", ")", ":", "\n", "                    ", "writer", ".", "writeheader", "(", ")", "\n", "self", ".", "_tabular_header_written", ".", "add", "(", "tabular_fd", ")", "\n", "", "writer", ".", "writerow", "(", "tabular_dict", ")", "\n", "tabular_fd", ".", "flush", "(", ")", "\n", "", "del", "self", ".", "_tabular", "[", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.pop_prefix": [[335, 338], ["None"], "methods", ["None"], ["", "", "def", "pop_prefix", "(", "self", ",", ")", ":", "\n", "        ", "del", "self", ".", "_prefixes", "[", "-", "1", "]", "\n", "self", ".", "_prefix_str", "=", "''", ".", "join", "(", "self", ".", "_prefixes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.save_itr_params": [[339, 362], ["os.join", "os.join", "torch.save", "os.join", "os.join", "torch.save", "os.join", "os.join", "torch.save", "os.join", "os.join", "torch.save", "os.join", "os.join", "torch.save"], "methods", ["None"], ["", "def", "save_itr_params", "(", "self", ",", "itr", ",", "params", ",", "prefix", "=", "'itr'", ")", ":", "\n", "        ", "if", "self", ".", "_snapshot_dir", ":", "\n", "            ", "if", "self", ".", "_snapshot_mode", "==", "'all'", ":", "\n", "                ", "file_name", "=", "osp", ".", "join", "(", "self", ".", "_snapshot_dir", ",", "'%s_%d.pt'", "%", "(", "prefix", ",", "itr", ")", ")", "\n", "torch", ".", "save", "(", "params", ",", "file_name", ")", "\n", "", "elif", "self", ".", "_snapshot_mode", "==", "'last'", ":", "\n", "# override previous params", "\n", "                ", "file_name", "=", "osp", ".", "join", "(", "self", ".", "_snapshot_dir", ",", "'params.pkl'", ")", "\n", "torch", ".", "save", "(", "params", ",", "file_name", ")", "\n", "", "elif", "self", ".", "_snapshot_mode", "==", "\"gap\"", ":", "\n", "                ", "if", "itr", "%", "self", ".", "_snapshot_gap", "==", "0", ":", "\n", "                    ", "file_name", "=", "osp", ".", "join", "(", "self", ".", "_snapshot_dir", ",", "'itr_%d.pkl'", "%", "itr", ")", "\n", "torch", ".", "save", "(", "params", ",", "file_name", ")", "\n", "", "", "elif", "self", ".", "_snapshot_mode", "==", "\"gap_and_last\"", ":", "\n", "                ", "if", "itr", "%", "self", ".", "_snapshot_gap", "==", "0", ":", "\n", "                    ", "file_name", "=", "osp", ".", "join", "(", "self", ".", "_snapshot_dir", ",", "'itr_%d.pkl'", "%", "itr", ")", "\n", "torch", ".", "save", "(", "params", ",", "file_name", ")", "\n", "", "file_name", "=", "osp", ".", "join", "(", "self", ".", "_snapshot_dir", ",", "'params.pkl'", ")", "\n", "torch", ".", "save", "(", "params", ",", "file_name", ")", "\n", "", "elif", "self", ".", "_snapshot_mode", "==", "'none'", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.mkdir_p": [[62, 70], ["os.makedirs", "os.makedirs", "os.path.isdir", "os.path.isdir"], "function", ["None"], ["", "", "def", "mkdir_p", "(", "path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "except", "OSError", "as", "exc", ":", "# Python >2.5", "\n", "        ", "if", "exc", ".", "errno", "==", "errno", ".", "EEXIST", "and", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging_setup.get_git_infos": [[24, 48], ["git.Repo", "git_infos.append", "GitInfo", "print", "git.Repo.git.diff", "git.Repo.git.diff"], "function", ["None"], ["def", "get_git_infos", "(", "dirs", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "import", "git", "\n", "git_infos", "=", "[", "]", "\n", "for", "directory", "in", "dirs", ":", "\n", "# Idk how to query these things, so I'm just doing try-catch", "\n", "            ", "try", ":", "\n", "                ", "repo", "=", "git", ".", "Repo", "(", "directory", ")", "\n", "try", ":", "\n", "                    ", "branch_name", "=", "repo", ".", "active_branch", ".", "name", "\n", "", "except", "TypeError", ":", "\n", "                    ", "branch_name", "=", "'[DETACHED]'", "\n", "", "git_infos", ".", "append", "(", "GitInfo", "(", "\n", "directory", "=", "directory", ",", "\n", "code_diff", "=", "repo", ".", "git", ".", "diff", "(", "None", ")", ",", "\n", "code_diff_staged", "=", "repo", ".", "git", ".", "diff", "(", "'--staged'", ")", ",", "\n", "commit_hash", "=", "repo", ".", "head", ".", "commit", ".", "hexsha", ",", "\n", "branch_name", "=", "branch_name", ",", "\n", ")", ")", "\n", "", "except", "git", ".", "exc", ".", "InvalidGitRepositoryError", "as", "e", ":", "\n", "                ", "print", "(", "\"Not a valid git repo: {}\"", ".", "format", "(", "directory", ")", ")", "\n", "", "", "", "except", "ImportError", ":", "\n", "        ", "git_infos", "=", "None", "\n", "", "return", "git_infos", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging_setup.create_exp_name": [[50, 54], ["datetime.datetime.now", "datetime.datetime.now.strftime", "dateutil.tz.tzlocal"], "function", ["None"], ["", "def", "create_exp_name", "(", "exp_prefix", ",", "exp_id", "=", "0", ",", "seed", "=", "0", ")", ":", "\n", "    ", "now", "=", "datetime", ".", "datetime", ".", "now", "(", "dateutil", ".", "tz", ".", "tzlocal", "(", ")", ")", "\n", "timestamp", "=", "now", ".", "strftime", "(", "'%Y_%m_%d_%H_%M_%S'", ")", "\n", "return", "\"%s_%s_%04d--s-%d\"", "%", "(", "exp_prefix", ",", "timestamp", ",", "exp_id", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging_setup.create_log_dir": [[56, 75], ["logging_setup.create_exp_name", "os.exists", "os.makedirs", "os.makedirs", "os.join", "os.join", "print", "os.getcwd", "os.getcwd", "exp_prefix.replace"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging_setup.create_exp_name"], ["", "def", "create_log_dir", "(", "\n", "exp_prefix", ",", "\n", "exp_id", "=", "0", ",", "\n", "seed", "=", "0", ",", "\n", "base_log_dir", "=", "None", ",", "\n", "include_exp_prefix_sub_dir", "=", "True", ",", "\n", ")", ":", "\n", "    ", "exp_name", "=", "create_exp_name", "(", "exp_prefix", ",", "exp_id", "=", "exp_id", ",", "\n", "seed", "=", "seed", ")", "\n", "if", "base_log_dir", "is", "None", ":", "\n", "        ", "base_log_dir", "=", "os", ".", "getcwd", "(", ")", "+", "'/data/'", "\n", "", "if", "include_exp_prefix_sub_dir", ":", "\n", "        ", "log_dir", "=", "osp", ".", "join", "(", "base_log_dir", ",", "exp_prefix", ".", "replace", "(", "\"_\"", ",", "\"-\"", ")", ",", "exp_name", ")", "\n", "", "else", ":", "\n", "        ", "log_dir", "=", "osp", ".", "join", "(", "base_log_dir", ",", "exp_name", ")", "\n", "", "if", "osp", ".", "exists", "(", "log_dir", ")", ":", "\n", "        ", "print", "(", "\"WARNING: Log directory already exists {}\"", ".", "format", "(", "log_dir", ")", ")", "\n", "", "os", ".", "makedirs", "(", "log_dir", ",", "exist_ok", "=", "True", ")", "\n", "return", "log_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging_setup.setup_logger": [[77, 145], ["logging_setup.create_log_dir", "os.join", "os.join", "lifelong_rl.core.logging.logging.logger.set_text_output", "lifelong_rl.core.logging.logging.logger.set_tabular_output", "lifelong_rl.core.logging.logging.logger.set_snapshot_dir", "lifelong_rl.core.logging.logging.logger.set_snapshot_mode", "lifelong_rl.core.logging.logging.logger.set_snapshot_gap", "lifelong_rl.core.logging.logging.logger.set_log_tabular_only", "lifelong_rl.core.logging.logging.logger.push_prefix", "create_log_dir.split", "lifelong_rl.core.logging.logging.logger.log", "lifelong_rl.core.logging.logging.logger.log", "os.join", "lifelong_rl.core.logging.logging.logger.log_variant", "wandb.init", "json.dumps", "open", "f.write", "logging_setup.dict_to_safe_json", "os.path.split", "os.path.split", "directory[].replace", "directory[].replace", "open", "f.write", "f.write", "f.write", "os.join", "len", "len", "open", "f.write", "len", "open", "f.write", "os.join", "os.join", "os.join"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging_setup.create_log_dir", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.set_text_output", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.set_tabular_output", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.set_snapshot_dir", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.set_snapshot_mode", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.set_snapshot_gap", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.set_log_tabular_only", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.push_prefix", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.log", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.log", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.log_variant", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging_setup.dict_to_safe_json"], ["", "def", "setup_logger", "(", "\n", "exp_prefix", "=", "\"default\"", ",", "\n", "variant", "=", "None", ",", "\n", "text_log_file", "=", "\"stdout.log\"", ",", "\n", "variant_log_file", "=", "\"variant.json\"", ",", "\n", "tabular_log_file", "=", "\"progress.csv\"", ",", "\n", "log_to_wandb", "=", "False", ",", "\n", "snapshot_mode", "=", "\"all\"", ",", "\n", "snapshot_gap", "=", "1", ",", "\n", "log_tabular_only", "=", "False", ",", "\n", "log_dir", "=", "None", ",", "\n", "git_infos", "=", "None", ",", "\n", "script_name", "=", "None", ",", "\n", "**", "create_log_dir_kwargs", "\n", ")", ":", "\n", "    ", "log_dir", "=", "create_log_dir", "(", "exp_prefix", ",", "**", "create_log_dir_kwargs", ")", "\n", "logger", ".", "log_dir", "=", "log_dir", "\n", "\n", "text_log_path", "=", "osp", ".", "join", "(", "log_dir", ",", "text_log_file", ")", "\n", "tabular_log_path", "=", "osp", ".", "join", "(", "log_dir", ",", "tabular_log_file", ")", "\n", "\n", "logger", ".", "set_text_output", "(", "text_log_path", ")", "\n", "logger", ".", "set_tabular_output", "(", "tabular_log_path", ")", "\n", "\n", "logger", ".", "set_snapshot_dir", "(", "log_dir", ")", "\n", "\n", "logger", ".", "set_snapshot_mode", "(", "snapshot_mode", ")", "\n", "logger", ".", "set_snapshot_gap", "(", "snapshot_gap", ")", "\n", "logger", ".", "set_log_tabular_only", "(", "log_tabular_only", ")", "\n", "\n", "exp_name", "=", "log_dir", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "logger", ".", "push_prefix", "(", "\"[%s] \"", "%", "exp_name", ")", "\n", "\n", "if", "variant", "is", "not", "None", ":", "\n", "        ", "logger", ".", "log", "(", "\"Variant:\"", ")", "\n", "logger", ".", "log", "(", "json", ".", "dumps", "(", "dict_to_safe_json", "(", "variant", ")", ",", "indent", "=", "2", ")", ")", "\n", "variant_log_path", "=", "osp", ".", "join", "(", "log_dir", ",", "variant_log_file", ")", "\n", "logger", ".", "log_variant", "(", "variant_log_path", ",", "variant", ")", "\n", "\n", "", "if", "log_to_wandb", ":", "\n", "        ", "logger", ".", "log_to_wandb", "=", "True", "\n", "name", "=", "os", ".", "path", ".", "split", "(", "log_dir", ")", "[", "1", "]", "[", "len", "(", "exp_prefix", ")", "+", "1", ":", "]", "\n", "wandb", ".", "init", "(", "name", "=", "name", ",", "config", "=", "variant", ",", "project", "=", "config", ".", "WANDB_PROJECT", ",", "group", "=", "exp_prefix", ")", "\n", "\n", "", "if", "git_infos", "is", "not", "None", ":", "\n", "        ", "for", "(", "\n", "directory", ",", "code_diff", ",", "code_diff_staged", ",", "commit_hash", ",", "branch_name", "\n", ")", "in", "git_infos", ":", "\n", "            ", "if", "directory", "[", "-", "1", "]", "==", "'/'", ":", "\n", "                ", "directory", "=", "directory", "[", ":", "-", "1", "]", "\n", "", "diff_file_name", "=", "directory", "[", "1", ":", "]", ".", "replace", "(", "\"/\"", ",", "\"-\"", ")", "+", "\".patch\"", "\n", "diff_staged_file_name", "=", "(", "\n", "directory", "[", "1", ":", "]", ".", "replace", "(", "\"/\"", ",", "\"-\"", ")", "+", "\"_staged.patch\"", "\n", ")", "\n", "if", "code_diff", "is", "not", "None", "and", "len", "(", "code_diff", ")", ">", "0", ":", "\n", "                ", "with", "open", "(", "osp", ".", "join", "(", "log_dir", ",", "diff_file_name", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "                    ", "f", ".", "write", "(", "code_diff", "+", "'\\n'", ")", "\n", "", "", "if", "code_diff_staged", "is", "not", "None", "and", "len", "(", "code_diff_staged", ")", ">", "0", ":", "\n", "                ", "with", "open", "(", "osp", ".", "join", "(", "log_dir", ",", "diff_staged_file_name", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "                    ", "f", ".", "write", "(", "code_diff_staged", "+", "'\\n'", ")", "\n", "", "", "with", "open", "(", "osp", ".", "join", "(", "log_dir", ",", "\"git_infos.txt\"", ")", ",", "\"a\"", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "\"directory: {}\\n\"", ".", "format", "(", "directory", ")", ")", "\n", "f", ".", "write", "(", "\"git hash: {}\\n\"", ".", "format", "(", "commit_hash", ")", ")", "\n", "f", ".", "write", "(", "\"git branch name: {}\\n\\n\"", ".", "format", "(", "branch_name", ")", ")", "\n", "", "", "", "if", "script_name", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "osp", ".", "join", "(", "log_dir", ",", "\"script_name.txt\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "script_name", ")", "\n", "", "", "return", "log_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging_setup.dict_to_safe_json": [[147, 158], ["d.items", "logging_setup.safe_json", "isinstance", "logging_setup.dict_to_safe_json", "str"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging_setup.safe_json", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging_setup.dict_to_safe_json"], ["", "def", "dict_to_safe_json", "(", "d", ")", ":", "\n", "    ", "new_d", "=", "{", "}", "\n", "for", "key", ",", "item", "in", "d", ".", "items", "(", ")", ":", "\n", "        ", "if", "safe_json", "(", "item", ")", ":", "\n", "            ", "new_d", "[", "key", "]", "=", "item", "\n", "", "else", ":", "\n", "            ", "if", "isinstance", "(", "item", ",", "dict", ")", ":", "\n", "                ", "new_d", "[", "key", "]", "=", "dict_to_safe_json", "(", "item", ")", "\n", "", "else", ":", "\n", "                ", "new_d", "[", "key", "]", "=", "str", "(", "item", ")", "\n", "", "", "", "return", "new_d", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging_setup.safe_json": [[160, 170], ["isinstance", "isinstance", "all", "isinstance", "all", "logging_setup.safe_json", "isinstance", "logging_setup.safe_json", "data.items"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging_setup.safe_json", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging_setup.safe_json"], ["", "def", "safe_json", "(", "data", ")", ":", "\n", "    ", "if", "data", "is", "None", ":", "\n", "        ", "return", "True", "\n", "", "elif", "isinstance", "(", "data", ",", "(", "bool", ",", "int", ",", "float", ")", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "isinstance", "(", "data", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "        ", "return", "all", "(", "safe_json", "(", "x", ")", "for", "x", "in", "data", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "dict", ")", ":", "\n", "        ", "return", "all", "(", "isinstance", "(", "k", ",", "str", ")", "and", "safe_json", "(", "v", ")", "for", "k", ",", "v", "in", "data", ".", "items", "(", ")", ")", "\n", "", "return", "False", "\n", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._pipe_segment_with_colons": [[78, 90], ["None"], "function", ["None"], ["def", "_pipe_segment_with_colons", "(", "align", ",", "colwidth", ")", ":", "\n", "    ", "\"\"\"Return a segment of a horizontal line with optional colons which\n    indicate column's alignment (as in `pipe` output format).\"\"\"", "\n", "w", "=", "colwidth", "\n", "if", "align", "in", "[", "\"right\"", ",", "\"decimal\"", "]", ":", "\n", "        ", "return", "(", "'-'", "*", "(", "w", "-", "1", ")", ")", "+", "\":\"", "\n", "", "elif", "align", "==", "\"center\"", ":", "\n", "        ", "return", "\":\"", "+", "(", "'-'", "*", "(", "w", "-", "2", ")", ")", "+", "\":\"", "\n", "", "elif", "align", "==", "\"left\"", ":", "\n", "        ", "return", "\":\"", "+", "(", "'-'", "*", "(", "w", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "'-'", "*", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._pipe_line_with_colons": [[92, 97], ["tabulate._pipe_segment_with_colons", "zip"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._pipe_segment_with_colons"], ["", "", "def", "_pipe_line_with_colons", "(", "colwidths", ",", "colaligns", ")", ":", "\n", "    ", "\"\"\"Return a horizontal line with optional colons to indicate column's\n    alignment (as in `pipe` output format).\"\"\"", "\n", "segments", "=", "[", "_pipe_segment_with_colons", "(", "a", ",", "w", ")", "for", "a", ",", "w", "in", "zip", "(", "colaligns", ",", "colwidths", ")", "]", "\n", "return", "\"|\"", "+", "\"|\"", ".", "join", "(", "segments", ")", "+", "\"|\"", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._mediawiki_row_with_attrs": [[99, 110], ["zip", "colsep.join", "alignment.get"], "function", ["None"], ["", "def", "_mediawiki_row_with_attrs", "(", "separator", ",", "cell_values", ",", "colwidths", ",", "colaligns", ")", ":", "\n", "    ", "alignment", "=", "{", "\"left\"", ":", "''", ",", "\n", "\"right\"", ":", "'align=\"right\"| '", ",", "\n", "\"center\"", ":", "'align=\"center\"| '", ",", "\n", "\"decimal\"", ":", "'align=\"right\"| '", "}", "\n", "# hard-coded padding _around_ align attribute and value together", "\n", "# rather than padding parameter which affects only the value", "\n", "values_with_attrs", "=", "[", "' '", "+", "alignment", ".", "get", "(", "a", ",", "''", ")", "+", "c", "+", "' '", "\n", "for", "c", ",", "a", "in", "zip", "(", "cell_values", ",", "colaligns", ")", "]", "\n", "colsep", "=", "separator", "*", "2", "\n", "return", "(", "separator", "+", "colsep", ".", "join", "(", "values_with_attrs", ")", ")", ".", "rstrip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._latex_line_begin_tabular": [[112, 116], ["alignment.get"], "function", ["None"], ["", "def", "_latex_line_begin_tabular", "(", "colwidths", ",", "colaligns", ")", ":", "\n", "    ", "alignment", "=", "{", "\"left\"", ":", "\"l\"", ",", "\"right\"", ":", "\"r\"", ",", "\"center\"", ":", "\"c\"", ",", "\"decimal\"", ":", "\"r\"", "}", "\n", "tabular_columns_fmt", "=", "\"\"", ".", "join", "(", "[", "alignment", ".", "get", "(", "a", ",", "\"l\"", ")", "for", "a", "in", "colaligns", "]", ")", "\n", "return", "\"\\\\begin{tabular}{\"", "+", "tabular_columns_fmt", "+", "\"}\\n\\hline\"", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate.simple_separated_format": [[198, 210], ["TableFormat", "DataRow", "DataRow"], "function", ["None"], ["def", "simple_separated_format", "(", "separator", ")", ":", "\n", "    ", "\"\"\"Construct a simple TableFormat with columns separated by a separator.\n\n    >>> tsv = simple_separated_format(\"\\\\t\") ; \\\n        tabulate([[\"foo\", 1], [\"spam\", 23]], tablefmt=tsv) == 'foo \\\\t 1\\\\nspam\\\\t23'\n    True\n\n    \"\"\"", "\n", "return", "TableFormat", "(", "None", ",", "None", ",", "None", ",", "None", ",", "\n", "headerrow", "=", "DataRow", "(", "''", ",", "separator", ",", "''", ")", ",", "\n", "datarow", "=", "DataRow", "(", "''", ",", "separator", ",", "''", ")", ",", "\n", "padding", "=", "0", ",", "with_header_hide", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._isconvertible": [[212, 218], ["conv"], "function", ["None"], ["", "def", "_isconvertible", "(", "conv", ",", "string", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "n", "=", "conv", "(", "string", ")", "\n", "return", "True", "\n", "", "except", "ValueError", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._isnumber": [[220, 230], ["tabulate._isconvertible"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._isconvertible"], ["", "", "def", "_isnumber", "(", "string", ")", ":", "\n", "    ", "\"\"\"\n    >>> _isnumber(\"123.45\")\n    True\n    >>> _isnumber(\"123\")\n    True\n    >>> _isnumber(\"spam\")\n    False\n    \"\"\"", "\n", "return", "_isconvertible", "(", "float", ",", "string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._isint": [[232, 242], ["type", "tabulate._isconvertible", "isinstance", "isinstance"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._isconvertible"], ["", "def", "_isint", "(", "string", ")", ":", "\n", "    ", "\"\"\"\n    >>> _isint(\"123\")\n    True\n    >>> _isint(\"123.45\")\n    False\n    \"\"\"", "\n", "return", "type", "(", "string", ")", "is", "int", "or", "(", "isinstance", "(", "string", ",", "_binary_type", ")", "or", "isinstance", "(", "string", ",", "_text_type", ")", ")", "and", "_isconvertible", "(", "int", ",", "string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._type": [[244, 276], ["tabulate._strip_invisible", "hasattr", "isinstance", "isinstance", "tabulate._isint", "tabulate._isnumber", "isinstance"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._strip_invisible", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._isint", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._isnumber"], ["", "def", "_type", "(", "string", ",", "has_invisible", "=", "True", ")", ":", "\n", "    ", "\"\"\"The least generic type (type(None), int, float, str, unicode).\n\n    >>> _type(None) is type(None)\n    True\n    >>> _type(\"foo\") is type(\"\")\n    True\n    >>> _type(\"1\") is type(1)\n    True\n    >>> _type('\\x1b[31m42\\x1b[0m') is type(42)\n    True\n    >>> _type('\\x1b[31m42\\x1b[0m') is type(42)\n    True\n\n    \"\"\"", "\n", "\n", "if", "has_invisible", "and", "(", "isinstance", "(", "string", ",", "_text_type", ")", "or", "isinstance", "(", "string", ",", "_binary_type", ")", ")", ":", "\n", "        ", "string", "=", "_strip_invisible", "(", "string", ")", "\n", "\n", "", "if", "string", "is", "None", ":", "\n", "        ", "return", "_none_type", "\n", "", "elif", "hasattr", "(", "string", ",", "\"isoformat\"", ")", ":", "# datetime.datetime, date, and time", "\n", "        ", "return", "_text_type", "\n", "", "elif", "_isint", "(", "string", ")", ":", "\n", "        ", "return", "int", "\n", "", "elif", "_isnumber", "(", "string", ")", ":", "\n", "        ", "return", "float", "\n", "", "elif", "isinstance", "(", "string", ",", "_binary_type", ")", ":", "\n", "        ", "return", "_binary_type", "\n", "", "else", ":", "\n", "        ", "return", "_text_type", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._afterpoint": [[278, 303], ["tabulate._isnumber", "tabulate._isint", "string.rfind", "string.lower().rfind", "string.lower", "len"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._isnumber", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._isint"], ["", "", "def", "_afterpoint", "(", "string", ")", ":", "\n", "    ", "\"\"\"Symbols after a decimal point, -1 if the string lacks the decimal point.\n\n    >>> _afterpoint(\"123.45\")\n    2\n    >>> _afterpoint(\"1001\")\n    -1\n    >>> _afterpoint(\"eggs\")\n    -1\n    >>> _afterpoint(\"123e45\")\n    2\n\n    \"\"\"", "\n", "if", "_isnumber", "(", "string", ")", ":", "\n", "        ", "if", "_isint", "(", "string", ")", ":", "\n", "            ", "return", "-", "1", "\n", "", "else", ":", "\n", "            ", "pos", "=", "string", ".", "rfind", "(", "\".\"", ")", "\n", "pos", "=", "string", ".", "lower", "(", ")", ".", "rfind", "(", "\"e\"", ")", "if", "pos", "<", "0", "else", "pos", "\n", "if", "pos", ">=", "0", ":", "\n", "                ", "return", "len", "(", "string", ")", "-", "pos", "-", "1", "\n", "", "else", ":", "\n", "                ", "return", "-", "1", "# no point", "\n", "", "", "", "else", ":", "\n", "        ", "return", "-", "1", "# not a number", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._padleft": [[305, 315], ["fmt.format", "len", "len", "tabulate._strip_invisible"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._strip_invisible"], ["", "", "def", "_padleft", "(", "width", ",", "s", ",", "has_invisible", "=", "True", ")", ":", "\n", "    ", "\"\"\"Flush right.\n\n    >>> _padleft(6, '\\u044f\\u0439\\u0446\\u0430') == '  \\u044f\\u0439\\u0446\\u0430'\n    True\n\n    \"\"\"", "\n", "iwidth", "=", "width", "+", "len", "(", "s", ")", "-", "len", "(", "_strip_invisible", "(", "s", ")", ")", "if", "has_invisible", "else", "width", "\n", "fmt", "=", "\"{0:>%ds}\"", "%", "iwidth", "\n", "return", "fmt", ".", "format", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._padright": [[317, 327], ["fmt.format", "len", "len", "tabulate._strip_invisible"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._strip_invisible"], ["", "def", "_padright", "(", "width", ",", "s", ",", "has_invisible", "=", "True", ")", ":", "\n", "    ", "\"\"\"Flush left.\n\n    >>> _padright(6, '\\u044f\\u0439\\u0446\\u0430') == '\\u044f\\u0439\\u0446\\u0430  '\n    True\n\n    \"\"\"", "\n", "iwidth", "=", "width", "+", "len", "(", "s", ")", "-", "len", "(", "_strip_invisible", "(", "s", ")", ")", "if", "has_invisible", "else", "width", "\n", "fmt", "=", "\"{0:<%ds}\"", "%", "iwidth", "\n", "return", "fmt", ".", "format", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._padboth": [[329, 339], ["fmt.format", "len", "len", "tabulate._strip_invisible"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._strip_invisible"], ["", "def", "_padboth", "(", "width", ",", "s", ",", "has_invisible", "=", "True", ")", ":", "\n", "    ", "\"\"\"Center string.\n\n    >>> _padboth(6, '\\u044f\\u0439\\u0446\\u0430') == ' \\u044f\\u0439\\u0446\\u0430 '\n    True\n\n    \"\"\"", "\n", "iwidth", "=", "width", "+", "len", "(", "s", ")", "-", "len", "(", "_strip_invisible", "(", "s", ")", ")", "if", "has_invisible", "else", "width", "\n", "fmt", "=", "\"{0:^%ds}\"", "%", "iwidth", "\n", "return", "fmt", ".", "format", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._strip_invisible": [[341, 347], ["isinstance", "re.sub", "re.sub"], "function", ["None"], ["", "def", "_strip_invisible", "(", "s", ")", ":", "\n", "    ", "\"Remove invisible ANSI color codes.\"", "\n", "if", "isinstance", "(", "s", ",", "_text_type", ")", ":", "\n", "        ", "return", "re", ".", "sub", "(", "_invisible_codes", ",", "\"\"", ",", "s", ")", "\n", "", "else", ":", "# a bytestring", "\n", "        ", "return", "re", ".", "sub", "(", "_invisible_codes_bytes", ",", "\"\"", ",", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._visible_width": [[349, 360], ["isinstance", "isinstance", "len", "len", "tabulate._strip_invisible", "_text_type"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._strip_invisible"], ["", "", "def", "_visible_width", "(", "s", ")", ":", "\n", "    ", "\"\"\"Visible width of a printed string. ANSI color codes are removed.\n\n    >>> _visible_width('\\x1b[31mhello\\x1b[0m'), _visible_width(\"world\")\n    (5, 5)\n\n    \"\"\"", "\n", "if", "isinstance", "(", "s", ",", "_text_type", ")", "or", "isinstance", "(", "s", ",", "_binary_type", ")", ":", "\n", "        ", "return", "len", "(", "_strip_invisible", "(", "s", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "len", "(", "_text_type", "(", "s", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._align_column": [[362, 398], ["max", "max", "padfn", "s.strip", "list", "s.strip", "max", "map", "tabulate._afterpoint", "zip", "s.strip"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._afterpoint"], ["", "", "def", "_align_column", "(", "strings", ",", "alignment", ",", "minwidth", "=", "0", ",", "has_invisible", "=", "True", ")", ":", "\n", "    ", "\"\"\"[string] -> [padded_string]\n\n    >>> list(map(str,_align_column([\"12.345\", \"-1234.5\", \"1.23\", \"1234.5\", \"1e+234\", \"1.0e234\"], \"decimal\")))\n    ['   12.345  ', '-1234.5    ', '    1.23   ', ' 1234.5    ', '    1e+234 ', '    1.0e234']\n\n    >>> list(map(str,_align_column(['123.4', '56.7890'], None)))\n    ['123.4', '56.7890']\n\n    \"\"\"", "\n", "if", "alignment", "==", "\"right\"", ":", "\n", "        ", "strings", "=", "[", "s", ".", "strip", "(", ")", "for", "s", "in", "strings", "]", "\n", "padfn", "=", "_padleft", "\n", "", "elif", "alignment", "==", "\"center\"", ":", "\n", "        ", "strings", "=", "[", "s", ".", "strip", "(", ")", "for", "s", "in", "strings", "]", "\n", "padfn", "=", "_padboth", "\n", "", "elif", "alignment", "==", "\"decimal\"", ":", "\n", "        ", "decimals", "=", "[", "_afterpoint", "(", "s", ")", "for", "s", "in", "strings", "]", "\n", "maxdecimals", "=", "max", "(", "decimals", ")", "\n", "strings", "=", "[", "s", "+", "(", "maxdecimals", "-", "decs", ")", "*", "\" \"", "\n", "for", "s", ",", "decs", "in", "zip", "(", "strings", ",", "decimals", ")", "]", "\n", "padfn", "=", "_padleft", "\n", "", "elif", "not", "alignment", ":", "\n", "        ", "return", "strings", "\n", "", "else", ":", "\n", "        ", "strings", "=", "[", "s", ".", "strip", "(", ")", "for", "s", "in", "strings", "]", "\n", "padfn", "=", "_padright", "\n", "\n", "", "if", "has_invisible", ":", "\n", "        ", "width_fn", "=", "_visible_width", "\n", "", "else", ":", "\n", "        ", "width_fn", "=", "len", "\n", "\n", "", "maxwidth", "=", "max", "(", "max", "(", "list", "(", "map", "(", "width_fn", ",", "strings", ")", ")", ")", ",", "minwidth", ")", "\n", "padded_strings", "=", "[", "padfn", "(", "maxwidth", ",", "s", ",", "has_invisible", ")", "for", "s", "in", "strings", "]", "\n", "return", "padded_strings", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._more_generic": [[400, 405], ["max", "types.get", "types.get"], "function", ["None"], ["", "def", "_more_generic", "(", "type1", ",", "type2", ")", ":", "\n", "    ", "types", "=", "{", "_none_type", ":", "0", ",", "int", ":", "1", ",", "float", ":", "2", ",", "_binary_type", ":", "3", ",", "_text_type", ":", "4", "}", "\n", "invtypes", "=", "{", "4", ":", "_text_type", ",", "3", ":", "_binary_type", ",", "2", ":", "float", ",", "1", ":", "int", ",", "0", ":", "_none_type", "}", "\n", "moregeneric", "=", "max", "(", "types", ".", "get", "(", "type1", ",", "4", ")", ",", "types", ".", "get", "(", "type2", ",", "4", ")", ")", "\n", "return", "invtypes", "[", "moregeneric", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._column_type": [[407, 429], ["reduce", "tabulate._type"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._type"], ["", "def", "_column_type", "(", "strings", ",", "has_invisible", "=", "True", ")", ":", "\n", "    ", "\"\"\"The least generic type all column values are convertible to.\n\n    >>> _column_type([\"1\", \"2\"]) is _int_type\n    True\n    >>> _column_type([\"1\", \"2.3\"]) is _float_type\n    True\n    >>> _column_type([\"1\", \"2.3\", \"four\"]) is _text_type\n    True\n    >>> _column_type([\"four\", '\\u043f\\u044f\\u0442\\u044c']) is _text_type\n    True\n    >>> _column_type([None, \"brux\"]) is _text_type\n    True\n    >>> _column_type([1, 2, None]) is _int_type\n    True\n    >>> import datetime as dt\n    >>> _column_type([dt.datetime(1991,2,19), dt.time(17,35)]) is _text_type\n    True\n\n    \"\"\"", "\n", "types", "=", "[", "_type", "(", "s", ",", "has_invisible", ")", "for", "s", "in", "strings", "]", "\n", "return", "reduce", "(", "_more_generic", ",", "types", ",", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._format": [[431, 454], ["_text_type", "format", "float"], "function", ["None"], ["", "def", "_format", "(", "val", ",", "valtype", ",", "floatfmt", ",", "missingval", "=", "\"\"", ")", ":", "\n", "    ", "\"\"\"Format a value accoding to its type.\n\n    Unicode is supported:\n\n    >>> hrow = ['\\u0431\\u0443\\u043a\\u0432\\u0430', '\\u0446\\u0438\\u0444\\u0440\\u0430'] ; \\\n        tbl = [['\\u0430\\u0437', 2], ['\\u0431\\u0443\\u043a\\u0438', 4]] ; \\\n        good_result = '\\\\u0431\\\\u0443\\\\u043a\\\\u0432\\\\u0430      \\\\u0446\\\\u0438\\\\u0444\\\\u0440\\\\u0430\\\\n-------  -------\\\\n\\\\u0430\\\\u0437             2\\\\n\\\\u0431\\\\u0443\\\\u043a\\\\u0438           4' ; \\\n        tabulate(tbl, headers=hrow) == good_result\n    True\n\n    \"\"\"", "\n", "if", "val", "is", "None", ":", "\n", "        ", "return", "missingval", "\n", "\n", "", "if", "valtype", "in", "[", "int", ",", "_text_type", "]", ":", "\n", "        ", "return", "\"{0}\"", ".", "format", "(", "val", ")", "\n", "", "elif", "valtype", "is", "_binary_type", ":", "\n", "        ", "return", "_text_type", "(", "val", ",", "\"ascii\"", ")", "\n", "", "elif", "valtype", "is", "float", ":", "\n", "        ", "return", "format", "(", "float", "(", "val", ")", ",", "floatfmt", ")", "\n", "", "else", ":", "\n", "        ", "return", "\"{0}\"", ".", "format", "(", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._align_header": [[456, 465], ["tabulate._padright", "tabulate._padboth", "tabulate._padleft"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._padright", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._padboth", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._padleft"], ["", "", "def", "_align_header", "(", "header", ",", "alignment", ",", "width", ")", ":", "\n", "    ", "if", "alignment", "==", "\"left\"", ":", "\n", "        ", "return", "_padright", "(", "width", ",", "header", ")", "\n", "", "elif", "alignment", "==", "\"center\"", ":", "\n", "        ", "return", "_padboth", "(", "width", ",", "header", ")", "\n", "", "elif", "not", "alignment", ":", "\n", "        ", "return", "\"{0}\"", ".", "format", "(", "header", ")", "\n", "", "else", ":", "\n", "        ", "return", "_padleft", "(", "width", ",", "header", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._normalize_tabular_data": [[467, 539], ["list", "list", "hasattr", "hasattr", "hasattr", "list", "list", "map", "len", "len", "list", "list", "hasattr", "list", "hasattr", "getattr", "len", "map", "len", "tabular_data.keys", "zip_longest", "list", "ValueError", "map", "isinstance", "hasattr", "list", "tabular_data.keys", "len", "map", "list", "list", "list", "zip", "len", "map", "tabular_data.values", "list", "range", "len"], "function", ["None"], ["", "", "def", "_normalize_tabular_data", "(", "tabular_data", ",", "headers", ")", ":", "\n", "    ", "\"\"\"Transform a supported data type to a list of lists, and a list of headers.\n\n    Supported tabular data types:\n\n    * list-of-lists or another iterable of iterables\n\n    * list of named tuples (usually used with headers=\"keys\")\n\n    * 2D NumPy arrays\n\n    * NumPy record arrays (usually used with headers=\"keys\")\n\n    * dict of iterables (usually used with headers=\"keys\")\n\n    * pandas.DataFrame (usually used with headers=\"keys\")\n\n    The first row can be used as headers if headers=\"firstrow\",\n    column indices can be used as headers if headers=\"keys\".\n\n    \"\"\"", "\n", "\n", "if", "hasattr", "(", "tabular_data", ",", "\"keys\"", ")", "and", "hasattr", "(", "tabular_data", ",", "\"values\"", ")", ":", "\n", "# dict-like and pandas.DataFrame?", "\n", "        ", "if", "hasattr", "(", "tabular_data", ".", "values", ",", "\"__call__\"", ")", ":", "\n", "# likely a conventional dict", "\n", "            ", "keys", "=", "list", "(", "tabular_data", ".", "keys", "(", ")", ")", "\n", "rows", "=", "list", "(", "zip_longest", "(", "*", "list", "(", "tabular_data", ".", "values", "(", ")", ")", ")", ")", "# columns have to be transposed", "\n", "", "elif", "hasattr", "(", "tabular_data", ",", "\"index\"", ")", ":", "\n", "# values is a property, has .index => it's likely a pandas.DataFrame (pandas 0.11.0)", "\n", "            ", "keys", "=", "list", "(", "tabular_data", ".", "keys", "(", ")", ")", "\n", "vals", "=", "tabular_data", ".", "values", "# values matrix doesn't need to be transposed", "\n", "names", "=", "tabular_data", ".", "index", "\n", "rows", "=", "[", "[", "v", "]", "+", "list", "(", "row", ")", "for", "v", ",", "row", "in", "zip", "(", "names", ",", "vals", ")", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"tabular data doesn't appear to be a dict or a DataFrame\"", ")", "\n", "\n", "", "if", "headers", "==", "\"keys\"", ":", "\n", "            ", "headers", "=", "list", "(", "map", "(", "_text_type", ",", "keys", ")", ")", "# headers should be strings", "\n", "\n", "", "", "else", ":", "# it's a usual an iterable of iterables, or a NumPy array", "\n", "        ", "rows", "=", "list", "(", "tabular_data", ")", "\n", "\n", "if", "(", "headers", "==", "\"keys\"", "and", "\n", "hasattr", "(", "tabular_data", ",", "\"dtype\"", ")", "and", "\n", "getattr", "(", "tabular_data", ".", "dtype", ",", "\"names\"", ")", ")", ":", "\n", "# numpy record array", "\n", "            ", "headers", "=", "tabular_data", ".", "dtype", ".", "names", "\n", "", "elif", "(", "headers", "==", "\"keys\"", "\n", "and", "len", "(", "rows", ")", ">", "0", "\n", "and", "isinstance", "(", "rows", "[", "0", "]", ",", "tuple", ")", "\n", "and", "hasattr", "(", "rows", "[", "0", "]", ",", "\"_fields\"", ")", ")", ":", "# namedtuple", "\n", "            ", "headers", "=", "list", "(", "map", "(", "_text_type", ",", "rows", "[", "0", "]", ".", "_fields", ")", ")", "\n", "", "elif", "headers", "==", "\"keys\"", "and", "len", "(", "rows", ")", ">", "0", ":", "# keys are column indices", "\n", "            ", "headers", "=", "list", "(", "map", "(", "_text_type", ",", "list", "(", "range", "(", "len", "(", "rows", "[", "0", "]", ")", ")", ")", ")", ")", "\n", "\n", "# take headers from the first row if necessary", "\n", "", "", "if", "headers", "==", "\"firstrow\"", "and", "len", "(", "rows", ")", ">", "0", ":", "\n", "        ", "headers", "=", "list", "(", "map", "(", "_text_type", ",", "rows", "[", "0", "]", ")", ")", "# headers should be strings", "\n", "rows", "=", "rows", "[", "1", ":", "]", "\n", "\n", "", "headers", "=", "list", "(", "headers", ")", "\n", "rows", "=", "list", "(", "map", "(", "list", ",", "rows", ")", ")", "\n", "\n", "# pad with empty headers for initial columns if necessary", "\n", "if", "headers", "and", "len", "(", "rows", ")", ">", "0", ":", "\n", "       ", "nhs", "=", "len", "(", "headers", ")", "\n", "ncols", "=", "len", "(", "rows", "[", "0", "]", ")", "\n", "if", "nhs", "<", "ncols", ":", "\n", "           ", "headers", "=", "[", "\"\"", "]", "*", "(", "ncols", "-", "nhs", ")", "+", "headers", "\n", "\n", "", "", "return", "rows", ",", "headers", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate.tabulate": [[541, 778], ["tabulate._normalize_tabular_data", "re.search", "list", "list", "tabulate._format_table", "zip", "map", "tabulate._align_column", "list", "list", "isinstance", "_table_formats.get", "tabulate._format", "zip", "len", "zip", "max", "tabulate._align_header", "zip", "width_fn", "zip", "width_fn", "width_fn", "zip", "zip", "map", "map"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._normalize_tabular_data", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._format_table", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._align_column", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._format", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._align_header"], ["", "def", "tabulate", "(", "tabular_data", ",", "headers", "=", "[", "]", ",", "tablefmt", "=", "\"simple\"", ",", "\n", "floatfmt", "=", "\"g\"", ",", "numalign", "=", "\"decimal\"", ",", "stralign", "=", "\"left\"", ",", "\n", "missingval", "=", "\"\"", ")", ":", "\n", "    ", "\"\"\"Format a fixed width table for pretty printing.\n\n    >>> print(tabulate([[1, 2.34], [-56, \"8.999\"], [\"2\", \"10001\"]]))\n    ---  ---------\n      1      2.34\n    -56      8.999\n      2  10001\n    ---  ---------\n\n    The first required argument (`tabular_data`) can be a\n    list-of-lists (or another iterable of iterables), a list of named\n    tuples, a dictionary of iterables, a two-dimensional NumPy array,\n    NumPy record array, or a Pandas' dataframe.\n\n\n    Table headers\n    -------------\n\n    To print nice column headers, supply the second argument (`headers`):\n\n      - `headers` can be an explicit list of column headers\n      - if `headers=\"firstrow\"`, then the first row of data is used\n      - if `headers=\"keys\"`, then dictionary keys or column indices are used\n\n    Otherwise a headerless table is produced.\n\n    If the number of headers is less than the number of columns, they\n    are supposed to be names of the last columns. This is consistent\n    with the plain-text format of R and Pandas' dataframes.\n\n    >>> print(tabulate([[\"sex\",\"age\"],[\"Alice\",\"F\",24],[\"Bob\",\"M\",19]],\n    ...       headers=\"firstrow\"))\n           sex      age\n    -----  -----  -----\n    Alice  F         24\n    Bob    M         19\n\n\n    Column alignment\n    ----------------\n\n    `tabulate` tries to detect column types automatically, and aligns\n    the values properly. By default it aligns decimal points of the\n    numbers (or flushes integer numbers to the right), and flushes\n    everything else to the left. Possible column alignments\n    (`numalign`, `stralign`) are: \"right\", \"center\", \"left\", \"decimal\"\n    (only for `numalign`), and None (to disable alignment).\n\n\n    Table formats\n    -------------\n\n    `floatfmt` is a format specification used for columns which\n    contain numeric data with a decimal point.\n\n    `None` values are replaced with a `missingval` string:\n\n    >>> print(tabulate([[\"spam\", 1, None],\n    ...                 [\"eggs\", 42, 3.14],\n    ...                 [\"other\", None, 2.7]], missingval=\"?\"))\n    -----  --  ----\n    spam    1  ?\n    eggs   42  3.14\n    other   ?  2.7\n    -----  --  ----\n\n    Various plain-text table formats (`tablefmt`) are supported:\n    'plain', 'simple', 'grid', 'pipe', 'orgtbl', 'rst', 'mediawiki',\n    and 'latex'. Variable `tabulate_formats` contains the list of\n    currently supported formats.\n\n    \"plain\" format doesn't use any pseudographics to draw tables,\n    it separates columns with a double space:\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]],\n    ...                 [\"strings\", \"numbers\"], \"plain\"))\n    strings      numbers\n    spam         41.9999\n    eggs        451\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]], tablefmt=\"plain\"))\n    spam   41.9999\n    eggs  451\n\n    \"simple\" format is like Pandoc simple_tables:\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]],\n    ...                 [\"strings\", \"numbers\"], \"simple\"))\n    strings      numbers\n    ---------  ---------\n    spam         41.9999\n    eggs        451\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]], tablefmt=\"simple\"))\n    ----  --------\n    spam   41.9999\n    eggs  451\n    ----  --------\n\n    \"grid\" is similar to tables produced by Emacs table.el package or\n    Pandoc grid_tables:\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]],\n    ...                [\"strings\", \"numbers\"], \"grid\"))\n    +-----------+-----------+\n    | strings   |   numbers |\n    +===========+===========+\n    | spam      |   41.9999 |\n    +-----------+-----------+\n    | eggs      |  451      |\n    +-----------+-----------+\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]], tablefmt=\"grid\"))\n    +------+----------+\n    | spam |  41.9999 |\n    +------+----------+\n    | eggs | 451      |\n    +------+----------+\n\n    \"pipe\" is like tables in PHP Markdown Extra extension or Pandoc\n    pipe_tables:\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]],\n    ...                [\"strings\", \"numbers\"], \"pipe\"))\n    | strings   |   numbers |\n    |:----------|----------:|\n    | spam      |   41.9999 |\n    | eggs      |  451      |\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]], tablefmt=\"pipe\"))\n    |:-----|---------:|\n    | spam |  41.9999 |\n    | eggs | 451      |\n\n    \"orgtbl\" is like tables in Emacs org-mode and orgtbl-mode. They\n    are slightly different from \"pipe\" format by not using colons to\n    define column alignment, and using a \"+\" sign to indicate line\n    intersections:\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]],\n    ...                [\"strings\", \"numbers\"], \"orgtbl\"))\n    | strings   |   numbers |\n    |-----------+-----------|\n    | spam      |   41.9999 |\n    | eggs      |  451      |\n\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]], tablefmt=\"orgtbl\"))\n    | spam |  41.9999 |\n    | eggs | 451      |\n\n    \"rst\" is like a simple table format from reStructuredText; please\n    note that reStructuredText accepts also \"grid\" tables:\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]],\n    ...                [\"strings\", \"numbers\"], \"rst\"))\n    =========  =========\n    strings      numbers\n    =========  =========\n    spam         41.9999\n    eggs        451\n    =========  =========\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]], tablefmt=\"rst\"))\n    ====  ========\n    spam   41.9999\n    eggs  451\n    ====  ========\n\n    \"mediawiki\" produces a table markup used in Wikipedia and on other\n    MediaWiki-based sites:\n\n    >>> print(tabulate([[\"strings\", \"numbers\"], [\"spam\", 41.9999], [\"eggs\", \"451.0\"]],\n    ...                headers=\"firstrow\", tablefmt=\"mediawiki\"))\n    {| class=\"wikitable\" style=\"text-align: left;\"\n    |+ <!-- caption -->\n    |-\n    ! strings   !! align=\"right\"|   numbers\n    |-\n    | spam      || align=\"right\"|   41.9999\n    |-\n    | eggs      || align=\"right\"|  451\n    |}\n\n    \"latex\" produces a tabular environment of LaTeX document markup:\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]], tablefmt=\"latex\"))\n    \\\\begin{tabular}{lr}\n    \\\\hline\n     spam &  41.9999 \\\\\\\\\n     eggs & 451      \\\\\\\\\n    \\\\hline\n    \\\\end{tabular}\n\n    \"\"\"", "\n", "\n", "list_of_lists", ",", "headers", "=", "_normalize_tabular_data", "(", "tabular_data", ",", "headers", ")", "\n", "\n", "# optimization: look for ANSI control codes once,", "\n", "# enable smart width functions only if a control code is found", "\n", "plain_text", "=", "'\\n'", ".", "join", "(", "[", "'\\t'", ".", "join", "(", "map", "(", "_text_type", ",", "headers", ")", ")", "]", "+", "[", "'\\t'", ".", "join", "(", "map", "(", "_text_type", ",", "row", ")", ")", "for", "row", "in", "list_of_lists", "]", ")", "\n", "has_invisible", "=", "re", ".", "search", "(", "_invisible_codes", ",", "plain_text", ")", "\n", "if", "has_invisible", ":", "\n", "        ", "width_fn", "=", "_visible_width", "\n", "", "else", ":", "\n", "        ", "width_fn", "=", "len", "\n", "\n", "# format rows and columns, convert numeric values to strings", "\n", "", "cols", "=", "list", "(", "zip", "(", "*", "list_of_lists", ")", ")", "\n", "coltypes", "=", "list", "(", "map", "(", "_column_type", ",", "cols", ")", ")", "\n", "cols", "=", "[", "[", "_format", "(", "v", ",", "ct", ",", "floatfmt", ",", "missingval", ")", "for", "v", "in", "c", "]", "\n", "for", "c", ",", "ct", "in", "zip", "(", "cols", ",", "coltypes", ")", "]", "\n", "\n", "# align columns", "\n", "aligns", "=", "[", "numalign", "if", "ct", "in", "[", "int", ",", "float", "]", "else", "stralign", "for", "ct", "in", "coltypes", "]", "\n", "minwidths", "=", "[", "width_fn", "(", "h", ")", "+", "2", "for", "h", "in", "headers", "]", "if", "headers", "else", "[", "0", "]", "*", "len", "(", "cols", ")", "\n", "cols", "=", "[", "_align_column", "(", "c", ",", "a", ",", "minw", ",", "has_invisible", ")", "\n", "for", "c", ",", "a", ",", "minw", "in", "zip", "(", "cols", ",", "aligns", ",", "minwidths", ")", "]", "\n", "\n", "if", "headers", ":", "\n", "# align headers and add headers", "\n", "        ", "minwidths", "=", "[", "max", "(", "minw", ",", "width_fn", "(", "c", "[", "0", "]", ")", ")", "for", "minw", ",", "c", "in", "zip", "(", "minwidths", ",", "cols", ")", "]", "\n", "headers", "=", "[", "_align_header", "(", "h", ",", "a", ",", "minw", ")", "\n", "for", "h", ",", "a", ",", "minw", "in", "zip", "(", "headers", ",", "aligns", ",", "minwidths", ")", "]", "\n", "rows", "=", "list", "(", "zip", "(", "*", "cols", ")", ")", "\n", "", "else", ":", "\n", "        ", "minwidths", "=", "[", "width_fn", "(", "c", "[", "0", "]", ")", "for", "c", "in", "cols", "]", "\n", "rows", "=", "list", "(", "zip", "(", "*", "cols", ")", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "tablefmt", ",", "TableFormat", ")", ":", "\n", "        ", "tablefmt", "=", "_table_formats", ".", "get", "(", "tablefmt", ",", "_table_formats", "[", "\"simple\"", "]", ")", "\n", "\n", "", "return", "_format_table", "(", "tablefmt", ",", "headers", ",", "rows", ",", "minwidths", ",", "aligns", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._build_simple_row": [[780, 784], ["sep.join"], "function", ["None"], ["", "def", "_build_simple_row", "(", "padded_cells", ",", "rowfmt", ")", ":", "\n", "    ", "\"Format row according to DataRow format without padding.\"", "\n", "begin", ",", "sep", ",", "end", "=", "rowfmt", "\n", "return", "(", "begin", "+", "sep", ".", "join", "(", "padded_cells", ")", "+", "end", ")", ".", "rstrip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._build_row": [[786, 794], ["hasattr", "rowfmt", "tabulate._build_simple_row"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._build_simple_row"], ["", "def", "_build_row", "(", "padded_cells", ",", "colwidths", ",", "colaligns", ",", "rowfmt", ")", ":", "\n", "    ", "\"Return a string which represents a row of data cells.\"", "\n", "if", "not", "rowfmt", ":", "\n", "        ", "return", "None", "\n", "", "if", "hasattr", "(", "rowfmt", ",", "\"__call__\"", ")", ":", "\n", "        ", "return", "rowfmt", "(", "padded_cells", ",", "colwidths", ",", "colaligns", ")", "\n", "", "else", ":", "\n", "        ", "return", "_build_simple_row", "(", "padded_cells", ",", "rowfmt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._build_line": [[796, 806], ["hasattr", "linefmt", "tabulate._build_simple_row"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._build_simple_row"], ["", "", "def", "_build_line", "(", "colwidths", ",", "colaligns", ",", "linefmt", ")", ":", "\n", "    ", "\"Return a string which represents a horizontal line.\"", "\n", "if", "not", "linefmt", ":", "\n", "        ", "return", "None", "\n", "", "if", "hasattr", "(", "linefmt", ",", "\"__call__\"", ")", ":", "\n", "        ", "return", "linefmt", "(", "colwidths", ",", "colaligns", ")", "\n", "", "else", ":", "\n", "        ", "begin", ",", "fill", ",", "sep", ",", "end", "=", "linefmt", "\n", "cells", "=", "[", "fill", "*", "w", "for", "w", "in", "colwidths", "]", "\n", "return", "_build_simple_row", "(", "cells", ",", "(", "begin", ",", "sep", ",", "end", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._pad_row": [[808, 815], ["None"], "function", ["None"], ["", "", "def", "_pad_row", "(", "cells", ",", "padding", ")", ":", "\n", "    ", "if", "cells", ":", "\n", "        ", "pad", "=", "\" \"", "*", "padding", "\n", "padded_cells", "=", "[", "pad", "+", "cell", "+", "pad", "for", "cell", "in", "cells", "]", "\n", "return", "padded_cells", "\n", "", "else", ":", "\n", "        ", "return", "cells", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._format_table": [[817, 851], ["tabulate._pad_row", "tabulate._pad_row", "lines.append", "lines.append", "lines.append", "lines.append", "tabulate._build_line", "tabulate._build_row", "lines.append", "lines.append", "lines.append", "tabulate._build_row", "lines.append", "tabulate._build_line", "tabulate._build_line", "tabulate._build_row", "tabulate._build_line", "tabulate._build_row"], "function", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._pad_row", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._pad_row", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._build_line", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._build_row", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._build_row", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._build_line", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._build_line", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._build_row", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._build_line", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.tabulate._build_row"], ["", "", "def", "_format_table", "(", "fmt", ",", "headers", ",", "rows", ",", "colwidths", ",", "colaligns", ")", ":", "\n", "    ", "\"\"\"Produce a plain-text representation of the table.\"\"\"", "\n", "lines", "=", "[", "]", "\n", "hidden", "=", "fmt", ".", "with_header_hide", "if", "(", "headers", "and", "fmt", ".", "with_header_hide", ")", "else", "[", "]", "\n", "pad", "=", "fmt", ".", "padding", "\n", "headerrow", "=", "fmt", ".", "headerrow", "\n", "\n", "padded_widths", "=", "[", "(", "w", "+", "2", "*", "pad", ")", "for", "w", "in", "colwidths", "]", "\n", "padded_headers", "=", "_pad_row", "(", "headers", ",", "pad", ")", "\n", "padded_rows", "=", "[", "_pad_row", "(", "row", ",", "pad", ")", "for", "row", "in", "rows", "]", "\n", "\n", "if", "fmt", ".", "lineabove", "and", "\"lineabove\"", "not", "in", "hidden", ":", "\n", "        ", "lines", ".", "append", "(", "_build_line", "(", "padded_widths", ",", "colaligns", ",", "fmt", ".", "lineabove", ")", ")", "\n", "\n", "", "if", "padded_headers", ":", "\n", "        ", "lines", ".", "append", "(", "_build_row", "(", "padded_headers", ",", "padded_widths", ",", "colaligns", ",", "headerrow", ")", ")", "\n", "if", "fmt", ".", "linebelowheader", "and", "\"linebelowheader\"", "not", "in", "hidden", ":", "\n", "            ", "lines", ".", "append", "(", "_build_line", "(", "padded_widths", ",", "colaligns", ",", "fmt", ".", "linebelowheader", ")", ")", "\n", "\n", "", "", "if", "padded_rows", "and", "fmt", ".", "linebetweenrows", "and", "\"linebetweenrows\"", "not", "in", "hidden", ":", "\n", "# initial rows with a line below", "\n", "        ", "for", "row", "in", "padded_rows", "[", ":", "-", "1", "]", ":", "\n", "            ", "lines", ".", "append", "(", "_build_row", "(", "row", ",", "padded_widths", ",", "colaligns", ",", "fmt", ".", "datarow", ")", ")", "\n", "lines", ".", "append", "(", "_build_line", "(", "padded_widths", ",", "colaligns", ",", "fmt", ".", "linebetweenrows", ")", ")", "\n", "# the last row without a line below", "\n", "", "lines", ".", "append", "(", "_build_row", "(", "padded_rows", "[", "-", "1", "]", ",", "padded_widths", ",", "colaligns", ",", "fmt", ".", "datarow", ")", ")", "\n", "", "else", ":", "\n", "        ", "for", "row", "in", "padded_rows", ":", "\n", "            ", "lines", ".", "append", "(", "_build_row", "(", "row", ",", "padded_widths", ",", "colaligns", ",", "fmt", ".", "datarow", ")", ")", "\n", "\n", "", "", "if", "fmt", ".", "linebelow", "and", "\"linebelow\"", "not", "in", "hidden", ":", "\n", "        ", "lines", ".", "append", "(", "_build_line", "(", "padded_widths", ",", "colaligns", ",", "fmt", ".", "linebelow", ")", ")", "\n", "\n", "", "return", "\"\\n\"", ".", "join", "(", "lines", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchOnlineRLAlgorithm.configure_logging": [[19, 22], ["set", "wandb.watch"], "methods", ["None"], ["    ", "def", "configure_logging", "(", "self", ")", ":", "\n", "        ", "for", "net", "in", "set", "(", "self", ".", "trainer", ".", "networks", ")", ":", "\n", "            ", "wandb", ".", "watch", "(", "net", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchOnlineRLAlgorithm.to": [[23, 26], ["net.to"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchOfflineMBRLAlgorithm.to"], ["", "", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "for", "net", "in", "self", ".", "trainer", ".", "networks", ":", "\n", "            ", "net", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchOnlineRLAlgorithm.training_mode": [[27, 30], ["net.train"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm.train"], ["", "", "def", "training_mode", "(", "self", ",", "mode", ")", ":", "\n", "        ", "for", "net", "in", "self", ".", "trainer", ".", "networks", ":", "\n", "            ", "net", ".", "train", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchBatchRLAlgorithm.configure_logging": [[33, 36], ["set", "wandb.watch"], "methods", ["None"], ["    ", "def", "configure_logging", "(", "self", ")", ":", "\n", "        ", "for", "net", "in", "set", "(", "self", ".", "trainer", ".", "networks", ")", ":", "\n", "            ", "wandb", ".", "watch", "(", "net", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchBatchRLAlgorithm.to": [[37, 40], ["net.to"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchOfflineMBRLAlgorithm.to"], ["", "", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "for", "net", "in", "self", ".", "trainer", ".", "networks", ":", "\n", "            ", "net", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchBatchRLAlgorithm.training_mode": [[41, 44], ["net.train"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm.train"], ["", "", "def", "training_mode", "(", "self", ",", "mode", ")", ":", "\n", "        ", "for", "net", "in", "self", ".", "trainer", ".", "networks", ":", "\n", "            ", "net", ".", "train", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchMBRLAlgorithm.configure_logging": [[47, 50], ["set", "wandb.watch"], "methods", ["None"], ["    ", "def", "configure_logging", "(", "self", ")", ":", "\n", "        ", "for", "net", "in", "set", "(", "self", ".", "trainer", ".", "networks", "+", "self", ".", "model_trainer", ".", "networks", ")", ":", "\n", "            ", "wandb", ".", "watch", "(", "net", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchMBRLAlgorithm.to": [[51, 56], ["net.to", "net.to"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchOfflineMBRLAlgorithm.to", "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchOfflineMBRLAlgorithm.to"], ["", "", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "for", "net", "in", "self", ".", "trainer", ".", "networks", ":", "\n", "            ", "net", ".", "to", "(", "device", ")", "\n", "", "for", "net", "in", "self", ".", "model_trainer", ".", "networks", ":", "\n", "            ", "net", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchMBRLAlgorithm.training_mode": [[57, 62], ["net.train", "net.train"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm.train", "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm.train"], ["", "", "def", "training_mode", "(", "self", ",", "mode", ")", ":", "\n", "        ", "for", "net", "in", "self", ".", "trainer", ".", "networks", ":", "\n", "            ", "net", ".", "train", "(", "mode", ")", "\n", "", "for", "net", "in", "self", ".", "model_trainer", ".", "networks", ":", "\n", "            ", "net", ".", "train", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchMBBatchRLAlgorithm.configure_logging": [[65, 68], ["set", "wandb.watch"], "methods", ["None"], ["    ", "def", "configure_logging", "(", "self", ")", ":", "\n", "        ", "for", "net", "in", "set", "(", "self", ".", "trainer", ".", "networks", "+", "self", ".", "model_trainer", ".", "networks", ")", ":", "\n", "            ", "wandb", ".", "watch", "(", "net", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchMBBatchRLAlgorithm.to": [[69, 74], ["net.to", "net.to"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchOfflineMBRLAlgorithm.to", "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchOfflineMBRLAlgorithm.to"], ["", "", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "for", "net", "in", "self", ".", "trainer", ".", "networks", ":", "\n", "            ", "net", ".", "to", "(", "device", ")", "\n", "", "for", "net", "in", "self", ".", "model_trainer", ".", "networks", ":", "\n", "            ", "net", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchMBBatchRLAlgorithm.training_mode": [[75, 80], ["net.train", "net.train"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm.train", "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm.train"], ["", "", "def", "training_mode", "(", "self", ",", "mode", ")", ":", "\n", "        ", "for", "net", "in", "self", ".", "trainer", ".", "networks", ":", "\n", "            ", "net", ".", "train", "(", "mode", ")", "\n", "", "for", "net", "in", "self", ".", "model_trainer", ".", "networks", ":", "\n", "            ", "net", ".", "train", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchOfflineRLAlgorithm.configure_logging": [[83, 86], ["set", "wandb.watch"], "methods", ["None"], ["    ", "def", "configure_logging", "(", "self", ")", ":", "\n", "        ", "for", "net", "in", "set", "(", "self", ".", "trainer", ".", "networks", ")", ":", "\n", "            ", "wandb", ".", "watch", "(", "net", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchOfflineRLAlgorithm.to": [[87, 90], ["net.to"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchOfflineMBRLAlgorithm.to"], ["", "", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "for", "net", "in", "self", ".", "trainer", ".", "networks", ":", "\n", "            ", "net", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchOfflineRLAlgorithm.training_mode": [[91, 94], ["net.train"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm.train"], ["", "", "def", "training_mode", "(", "self", ",", "mode", ")", ":", "\n", "        ", "for", "net", "in", "self", ".", "trainer", ".", "networks", ":", "\n", "            ", "net", ".", "train", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchOfflineMBRLAlgorithm.configure_logging": [[97, 100], ["set", "wandb.watch"], "methods", ["None"], ["    ", "def", "configure_logging", "(", "self", ")", ":", "\n", "        ", "for", "net", "in", "set", "(", "self", ".", "trainer", ".", "networks", "+", "self", ".", "model_trainer", ".", "networks", ")", ":", "\n", "            ", "wandb", ".", "watch", "(", "net", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchOfflineMBRLAlgorithm.to": [[101, 106], ["net.to", "net.to"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchOfflineMBRLAlgorithm.to", "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchOfflineMBRLAlgorithm.to"], ["", "", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "for", "net", "in", "self", ".", "trainer", ".", "networks", ":", "\n", "            ", "net", ".", "to", "(", "device", ")", "\n", "", "for", "net", "in", "self", ".", "model_trainer", ".", "networks", ":", "\n", "            ", "net", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchOfflineMBRLAlgorithm.training_mode": [[107, 112], ["net.train", "net.train"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm.train", "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm.train"], ["", "", "def", "training_mode", "(", "self", ",", "mode", ")", ":", "\n", "        ", "for", "net", "in", "self", ".", "trainer", ".", "networks", ":", "\n", "            ", "net", ".", "train", "(", "mode", ")", "\n", "", "for", "net", "in", "self", ".", "model_trainer", ".", "networks", ":", "\n", "            ", "net", ".", "train", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchTrainer.__init__": [[115, 117], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_num_train_steps", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchTrainer.train": [[118, 122], ["lifelong_rl.torch.pytorch_util.np_to_pytorch_batch", "torch_rl_algorithm.TorchTrainer.train_from_torch"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.torch.pytorch_util.np_to_pytorch_batch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchTrainer.train_from_torch"], ["", "def", "train", "(", "self", ",", "np_batch", ")", ":", "\n", "        ", "self", ".", "_num_train_steps", "+=", "1", "\n", "batch", "=", "np_to_pytorch_batch", "(", "np_batch", ")", "\n", "self", ".", "train_from_torch", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchTrainer.get_diagnostics": [[123, 126], ["collections.OrderedDict"], "methods", ["None"], ["", "def", "get_diagnostics", "(", "self", ")", ":", "\n", "        ", "return", "OrderedDict", "(", "[", "\n", "(", "'num train calls'", ",", "self", ".", "_num_train_steps", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchTrainer.train_from_torch": [[128, 130], ["None"], "methods", ["None"], ["", "def", "train_from_torch", "(", "self", ",", "batch", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchTrainer.networks": [[131, 134], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "networks", "(", "self", ")", "->", "Iterable", "[", "nn", ".", "Module", "]", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.rl_algorithm.BaseRLAlgorithm.__init__": [[25, 50], ["rl_algorithm.BaseRLAlgorithm.post_epoch_funcs.extend"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "trainer", ",", "\n", "exploration_policy", ",", "\n", "exploration_env", ",", "\n", "evaluation_env", ",", "\n", "exploration_data_collector", ",", "\n", "evaluation_data_collector", ",", "\n", "replay_buffer", ",", "\n", "save_snapshot_freq", "=", "10", ",", "\n", "post_epoch_funcs", "=", "None", ",", "\n", ")", ":", "\n", "        ", "self", ".", "trainer", "=", "trainer", "\n", "self", ".", "expl_policy", "=", "exploration_policy", "\n", "self", ".", "expl_env", "=", "exploration_env", "\n", "self", ".", "eval_env", "=", "evaluation_env", "\n", "self", ".", "expl_data_collector", "=", "exploration_data_collector", "\n", "self", ".", "eval_data_collector", "=", "evaluation_data_collector", "\n", "self", ".", "replay_buffer", "=", "replay_buffer", "\n", "self", ".", "_start_epoch", "=", "0", "\n", "self", ".", "save_snapshot_freq", "=", "save_snapshot_freq", "\n", "\n", "self", ".", "post_epoch_funcs", "=", "[", "]", "\n", "if", "post_epoch_funcs", "is", "not", "None", ":", "\n", "            ", "self", ".", "post_epoch_funcs", ".", "extend", "(", "post_epoch_funcs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.rl_algorithm.BaseRLAlgorithm.train": [[51, 54], ["rl_algorithm.BaseRLAlgorithm._train"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm._train"], ["", "", "def", "train", "(", "self", ",", "start_epoch", "=", "0", ")", ":", "\n", "        ", "self", ".", "_start_epoch", "=", "start_epoch", "\n", "self", ".", "_train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.rl_algorithm.BaseRLAlgorithm._train": [[55, 60], ["NotImplementedError"], "methods", ["None"], ["", "def", "_train", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Train model.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "'_train must implemented by inherited class'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.rl_algorithm.BaseRLAlgorithm._fit_input_stats": [[61, 64], ["hasattr", "rl_algorithm.BaseRLAlgorithm.trainer.fit_input_stats"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.models.networks.ParallelizedEnsemble.fit_input_stats"], ["", "def", "_fit_input_stats", "(", "self", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ".", "trainer", ",", "'fit_input_stats'", ")", ":", "\n", "            ", "self", ".", "trainer", ".", "fit_input_stats", "(", "self", ".", "replay_buffer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.rl_algorithm.BaseRLAlgorithm._end_epochs": [[65, 73], ["rl_algorithm.BaseRLAlgorithm.expl_data_collector.end_epoch", "rl_algorithm.BaseRLAlgorithm.eval_data_collector.end_epoch", "rl_algorithm.BaseRLAlgorithm.replay_buffer.end_epoch", "rl_algorithm.BaseRLAlgorithm.trainer.end_epoch", "hasattr", "rl_algorithm.BaseRLAlgorithm.expl_policy.end_epoch"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.end_epoch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.end_epoch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.end_epoch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.end_epoch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.end_epoch"], ["", "", "def", "_end_epochs", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "expl_data_collector", ".", "end_epoch", "(", "epoch", ")", "\n", "self", ".", "eval_data_collector", ".", "end_epoch", "(", "epoch", ")", "\n", "self", ".", "replay_buffer", ".", "end_epoch", "(", "epoch", ")", "\n", "self", ".", "trainer", ".", "end_epoch", "(", "epoch", ")", "\n", "\n", "if", "hasattr", "(", "self", ".", "expl_policy", ",", "'end_epoch'", ")", ":", "\n", "            ", "self", ".", "expl_policy", ".", "end_epoch", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.rl_algorithm.BaseRLAlgorithm._end_epoch": [[74, 87], ["rl_algorithm.BaseRLAlgorithm._get_snapshot", "gtimer.stamp", "rl_algorithm.BaseRLAlgorithm._log_stats", "rl_algorithm.BaseRLAlgorithm._end_epochs", "lifelong_rl.core.logger.save_itr_params", "post_epoch_func"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm._get_snapshot", "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm._log_stats", "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm._end_epochs", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.save_itr_params"], ["", "", "def", "_end_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "snapshot", "=", "self", ".", "_get_snapshot", "(", ")", "\n", "if", "self", ".", "save_snapshot_freq", "is", "not", "None", "and", "(", "epoch", "+", "1", ")", "%", "self", ".", "save_snapshot_freq", "==", "0", ":", "\n", "            ", "logger", ".", "save_itr_params", "(", "epoch", ",", "snapshot", ")", "\n", "", "gt", ".", "stamp", "(", "'saving'", ",", "unique", "=", "False", ")", "\n", "\n", "self", ".", "_log_stats", "(", "epoch", ")", "\n", "\n", "self", ".", "_end_epochs", "(", "epoch", ")", "\n", "\n", "for", "post_epoch_func", "in", "self", ".", "post_epoch_funcs", ":", "\n", "            ", "post_epoch_func", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.rl_algorithm.BaseRLAlgorithm._get_snapshot": [[88, 99], ["rl_algorithm.BaseRLAlgorithm.trainer.get_snapshot().items", "rl_algorithm.BaseRLAlgorithm.expl_data_collector.get_snapshot().items", "rl_algorithm.BaseRLAlgorithm.eval_data_collector.get_snapshot().items", "rl_algorithm.BaseRLAlgorithm.replay_buffer.get_snapshot().items", "rl_algorithm.BaseRLAlgorithm.trainer.get_snapshot", "rl_algorithm.BaseRLAlgorithm.expl_data_collector.get_snapshot", "rl_algorithm.BaseRLAlgorithm.eval_data_collector.get_snapshot", "rl_algorithm.BaseRLAlgorithm.replay_buffer.get_snapshot"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.get_snapshot", "home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.get_snapshot", "home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.get_snapshot", "home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.get_snapshot"], ["", "", "def", "_get_snapshot", "(", "self", ")", ":", "\n", "        ", "snapshot", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "self", ".", "trainer", ".", "get_snapshot", "(", ")", ".", "items", "(", ")", ":", "\n", "            ", "snapshot", "[", "'trainer/'", "+", "k", "]", "=", "v", "\n", "", "for", "k", ",", "v", "in", "self", ".", "expl_data_collector", ".", "get_snapshot", "(", ")", ".", "items", "(", ")", ":", "\n", "            ", "snapshot", "[", "'exploration/'", "+", "k", "]", "=", "v", "\n", "", "for", "k", ",", "v", "in", "self", ".", "eval_data_collector", ".", "get_snapshot", "(", ")", ".", "items", "(", ")", ":", "\n", "            ", "snapshot", "[", "'evaluation/'", "+", "k", "]", "=", "v", "\n", "", "for", "k", ",", "v", "in", "self", ".", "replay_buffer", ".", "get_snapshot", "(", ")", ".", "items", "(", ")", ":", "\n", "            ", "snapshot", "[", "'replay_buffer/'", "+", "k", "]", "=", "v", "\n", "", "return", "snapshot", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.rl_algorithm.BaseRLAlgorithm._get_trainer_diagnostics": [[100, 102], ["rl_algorithm.BaseRLAlgorithm.trainer.get_diagnostics"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchTrainer.get_diagnostics"], ["", "def", "_get_trainer_diagnostics", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "trainer", ".", "get_diagnostics", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.rl_algorithm.BaseRLAlgorithm._get_training_diagnostics_dict": [[103, 105], ["rl_algorithm.BaseRLAlgorithm._get_trainer_diagnostics"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm._get_trainer_diagnostics"], ["", "def", "_get_training_diagnostics_dict", "(", "self", ")", ":", "\n", "        ", "return", "{", "'policy_trainer'", ":", "self", ".", "_get_trainer_diagnostics", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.rl_algorithm.BaseRLAlgorithm._log_stats": [[106, 175], ["lifelong_rl.core.logger.log", "lifelong_rl.core.logger.record_dict", "rl_algorithm.BaseRLAlgorithm._get_training_diagnostics_dict", "lifelong_rl.core.logger.record_dict", "rl_algorithm.BaseRLAlgorithm.expl_data_collector.get_epoch_paths", "hasattr", "lifelong_rl.core.logger.record_dict", "lifelong_rl.core.logger.record_tabular", "lifelong_rl.core.logger.dump_tabular", "gtimer.stamp", "rl_algorithm.BaseRLAlgorithm.replay_buffer.get_diagnostics", "lifelong_rl.core.logger.record_dict", "rl_algorithm.BaseRLAlgorithm.expl_data_collector.get_diagnostics", "len", "hasattr", "lifelong_rl.core.logger.record_dict", "lifelong_rl.core.logger.record_dict", "lifelong_rl.core.logger.record_dict", "rl_algorithm.BaseRLAlgorithm.eval_data_collector.get_epoch_paths", "hasattr", "lifelong_rl.core.logger.record_dict", "rl_algorithm._get_epoch_timings", "lifelong_rl.core.logger.record_dict", "lifelong_rl.util.eval_util.get_generic_path_information", "rl_algorithm.BaseRLAlgorithm.expl_policy.get_diagnostics", "rl_algorithm.BaseRLAlgorithm.eval_data_collector.get_diagnostics", "lifelong_rl.core.logger.record_dict", "lifelong_rl.util.eval_util.get_generic_path_information", "rl_algorithm.BaseRLAlgorithm.expl_env.get_diagnostics", "rl_algorithm.BaseRLAlgorithm.eval_env.get_diagnostics"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.log", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.record_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm._get_training_diagnostics_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.record_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.path_collector.GoalConditionedPathCollector.get_epoch_paths", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.record_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.record_tabular", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.dump_tabular", "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchTrainer.get_diagnostics", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.record_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchTrainer.get_diagnostics", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.record_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.record_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.record_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.path_collector.GoalConditionedPathCollector.get_epoch_paths", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.record_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.rl_algorithm._get_epoch_timings", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.record_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.get_generic_path_information", "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchTrainer.get_diagnostics", "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchTrainer.get_diagnostics", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.record_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.get_generic_path_information", "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchTrainer.get_diagnostics", "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchTrainer.get_diagnostics"], ["", "def", "_log_stats", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "logger", ".", "log", "(", "\"Epoch {} finished\"", ".", "format", "(", "epoch", ")", ",", "with_timestamp", "=", "True", ")", "\n", "\n", "\"\"\"\n        Replay Buffer\n        \"\"\"", "\n", "logger", ".", "record_dict", "(", "\n", "self", ".", "replay_buffer", ".", "get_diagnostics", "(", ")", ",", "\n", "prefix", "=", "'replay_buffer/'", "\n", ")", "\n", "\n", "\"\"\"\n        Trainer\n        \"\"\"", "\n", "training_diagnostics", "=", "self", ".", "_get_training_diagnostics_dict", "(", ")", "\n", "for", "prefix", "in", "training_diagnostics", ":", "\n", "            ", "logger", ".", "record_dict", "(", "training_diagnostics", "[", "prefix", "]", ",", "prefix", "=", "prefix", "+", "'/'", ")", "\n", "\n", "", "\"\"\"\n        Exploration\n        \"\"\"", "\n", "logger", ".", "record_dict", "(", "\n", "self", ".", "expl_data_collector", ".", "get_diagnostics", "(", ")", ",", "\n", "prefix", "=", "'exploration/'", "\n", ")", "\n", "expl_paths", "=", "self", ".", "expl_data_collector", ".", "get_epoch_paths", "(", ")", "\n", "if", "len", "(", "expl_paths", ")", ">", "0", ":", "\n", "            ", "if", "hasattr", "(", "self", ".", "expl_env", ",", "'get_diagnostics'", ")", ":", "\n", "                ", "logger", ".", "record_dict", "(", "\n", "self", ".", "expl_env", ".", "get_diagnostics", "(", "expl_paths", ")", ",", "\n", "prefix", "=", "'exploration/'", ",", "\n", ")", "\n", "", "logger", ".", "record_dict", "(", "\n", "eval_util", ".", "get_generic_path_information", "(", "expl_paths", ")", ",", "\n", "prefix", "=", "\"exploration/\"", ",", "\n", ")", "\n", "\n", "", "if", "hasattr", "(", "self", ".", "expl_policy", ",", "'get_diagnostics'", ")", ":", "\n", "            ", "logger", ".", "record_dict", "(", "\n", "self", ".", "expl_policy", ".", "get_diagnostics", "(", ")", ",", "\n", "prefix", "=", "'policy/'", ",", "\n", ")", "\n", "\n", "", "\"\"\"\n        Evaluation\n        \"\"\"", "\n", "if", "self", ".", "num_eval_steps_per_epoch", ">", "0", ":", "\n", "            ", "logger", ".", "record_dict", "(", "\n", "self", ".", "eval_data_collector", ".", "get_diagnostics", "(", ")", ",", "\n", "prefix", "=", "'evaluation/'", ",", "\n", ")", "\n", "eval_paths", "=", "self", ".", "eval_data_collector", ".", "get_epoch_paths", "(", ")", "\n", "if", "hasattr", "(", "self", ".", "eval_env", ",", "'get_diagnostics'", ")", ":", "\n", "                ", "logger", ".", "record_dict", "(", "\n", "self", ".", "eval_env", ".", "get_diagnostics", "(", "eval_paths", ")", ",", "\n", "prefix", "=", "'evaluation/'", ",", "\n", ")", "\n", "", "logger", ".", "record_dict", "(", "\n", "eval_util", ".", "get_generic_path_information", "(", "eval_paths", ")", ",", "\n", "prefix", "=", "\"evaluation/\"", ",", "\n", ")", "\n", "\n", "", "\"\"\"\n        Misc\n        \"\"\"", "\n", "logger", ".", "record_dict", "(", "_get_epoch_timings", "(", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'Epoch'", ",", "epoch", ")", "\n", "logger", ".", "dump_tabular", "(", "with_prefix", "=", "False", ",", "with_timestamp", "=", "False", ")", "\n", "gt", ".", "stamp", "(", "'logging'", ",", "unique", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.rl_algorithm.BaseRLAlgorithm.training_mode": [[176, 184], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "training_mode", "(", "self", ",", "mode", ")", ":", "\n", "        ", "\"\"\"\n        Set training mode to `mode`.\n        :param mode: If True, training will happen (e.g. set the dropout\n        probabilities to not all ones).\n        \"\"\"", "\n", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.rl_algorithm._get_epoch_timings": [[10, 21], ["collections.OrderedDict", "sorted", "gtimer.get_times", "gtimer.get_times"], "function", ["None"], ["def", "_get_epoch_timings", "(", ")", ":", "\n", "    ", "times_itrs", "=", "gt", ".", "get_times", "(", ")", ".", "stamps", ".", "itrs", "\n", "times", "=", "OrderedDict", "(", ")", "\n", "epoch_time", "=", "0", "\n", "for", "key", "in", "sorted", "(", "times_itrs", ")", ":", "\n", "        ", "time", "=", "times_itrs", "[", "key", "]", "[", "-", "1", "]", "\n", "epoch_time", "+=", "time", "\n", "times", "[", "'time/{} (s)'", ".", "format", "(", "key", ")", "]", "=", "time", "\n", "", "times", "[", "'time/epoch (s)'", "]", "=", "epoch_time", "\n", "times", "[", "'time/total (s)'", "]", "=", "gt", ".", "get_times", "(", ")", ".", "total", "\n", "return", "times", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.online.mbrl_algorithm.MBRLAlgorithm.__init__": [[10, 58], ["lifelong_rl.core.rl_algorithms.rl_algorithm.BaseRLAlgorithm.__init__"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "trainer", ",", "\n", "model_trainer", ",", "\n", "exploration_policy", ",", "\n", "exploration_env", ",", "\n", "evaluation_env", ",", "\n", "exploration_data_collector", ",", "\n", "evaluation_data_collector", ",", "\n", "replay_buffer", ",", "\n", "batch_size", ",", "\n", "model_batch_size", ",", "\n", "max_path_length", ",", "\n", "num_epochs", ",", "\n", "num_eval_steps_per_epoch", ",", "\n", "num_expl_steps_per_train_loop", ",", "\n", "num_trains_per_train_loop", ",", "\n", "num_model_trains_per_train_loop", ",", "\n", "num_train_loops_per_epoch", "=", "1", ",", "\n", "min_num_steps_before_training", "=", "0", ",", "\n", "initial_training_steps", "=", "0", ",", "\n", "save_snapshot_freq", "=", "10", ",", "\n", "post_epoch_funcs", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "trainer", ",", "\n", "exploration_policy", ",", "\n", "exploration_env", ",", "\n", "evaluation_env", ",", "\n", "exploration_data_collector", ",", "\n", "evaluation_data_collector", ",", "\n", "replay_buffer", ",", "\n", "save_snapshot_freq", "=", "save_snapshot_freq", ",", "\n", "post_epoch_funcs", "=", "post_epoch_funcs", ",", "\n", ")", "\n", "\n", "self", ".", "model_trainer", "=", "model_trainer", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "model_batch_size", "=", "model_batch_size", "\n", "self", ".", "max_path_length", "=", "max_path_length", "\n", "self", ".", "num_epochs", "=", "num_epochs", "\n", "self", ".", "num_eval_steps_per_epoch", "=", "num_eval_steps_per_epoch", "\n", "self", ".", "num_trains_per_train_loop", "=", "num_trains_per_train_loop", "\n", "self", ".", "num_model_trains_per_train_loop", "=", "num_model_trains_per_train_loop", "\n", "self", ".", "num_train_loops_per_epoch", "=", "num_train_loops_per_epoch", "\n", "self", ".", "num_expl_steps_per_train_loop", "=", "num_expl_steps_per_train_loop", "\n", "self", ".", "min_num_steps_before_training", "=", "min_num_steps_before_training", "\n", "self", ".", "initial_training_steps", "=", "initial_training_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.online.mbrl_algorithm.MBRLAlgorithm._get_training_diagnostics_dict": [[59, 63], ["super()._get_training_diagnostics_dict", "mbrl_algorithm.MBRLAlgorithm.model_trainer.get_diagnostics"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm._get_training_diagnostics_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchTrainer.get_diagnostics"], ["", "def", "_get_training_diagnostics_dict", "(", "self", ")", ":", "\n", "        ", "training_diagnostics", "=", "super", "(", ")", ".", "_get_training_diagnostics_dict", "(", ")", "\n", "training_diagnostics", "[", "'model_trainer'", "]", "=", "self", ".", "model_trainer", ".", "get_diagnostics", "(", ")", "\n", "return", "training_diagnostics", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.online.mbrl_algorithm.MBRLAlgorithm._get_snapshot": [[64, 69], ["super()._get_snapshot", "mbrl_algorithm.MBRLAlgorithm.model_trainer.get_snapshot().items", "mbrl_algorithm.MBRLAlgorithm.model_trainer.get_snapshot"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm._get_snapshot", "home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.get_snapshot"], ["", "def", "_get_snapshot", "(", "self", ")", ":", "\n", "        ", "snapshot", "=", "super", "(", ")", ".", "_get_snapshot", "(", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "model_trainer", ".", "get_snapshot", "(", ")", ".", "items", "(", ")", ":", "\n", "            ", "snapshot", "[", "'model/'", "+", "k", "]", "=", "v", "\n", "", "return", "snapshot", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.online.mbrl_algorithm.MBRLAlgorithm._end_epochs": [[70, 73], ["super()._end_epochs", "mbrl_algorithm.MBRLAlgorithm.model_trainer.end_epoch"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm._end_epochs", "home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.end_epoch"], ["", "def", "_end_epochs", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "super", "(", ")", ".", "_end_epochs", "(", "epoch", ")", "\n", "self", ".", "model_trainer", ".", "end_epoch", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.online.mbrl_algorithm.MBRLAlgorithm._train": [[74, 146], ["mbrl_algorithm.MBRLAlgorithm.training_mode", "gtimer.timed_for", "range", "mbrl_algorithm.MBRLAlgorithm.expl_data_collector.end_epoch", "gtimer.stamp", "mbrl_algorithm.MBRLAlgorithm.model_trainer.train_from_buffer", "gtimer.stamp", "range", "gtimer.stamp", "range", "mbrl_algorithm.MBRLAlgorithm._end_epoch", "mbrl_algorithm.MBRLAlgorithm.expl_data_collector.collect_one_step", "mbrl_algorithm.MBRLAlgorithm.replay_buffer.add_sample", "mbrl_algorithm.MBRLAlgorithm.replay_buffer.num_steps_can_sample", "mbrl_algorithm.MBRLAlgorithm.eval_data_collector.collect_new_paths", "range", "mbrl_algorithm.MBRLAlgorithm.training_mode", "gtimer.stamp", "mbrl_algorithm.MBRLAlgorithm.expl_data_collector.collect_one_step", "gtimer.stamp", "mbrl_algorithm.MBRLAlgorithm.replay_buffer.add_sample", "gtimer.stamp", "range", "gtimer.stamp", "mbrl_algorithm.MBRLAlgorithm.training_mode", "mbrl_algorithm.MBRLAlgorithm.model_trainer.train_from_buffer", "range", "gtimer.stamp", "mbrl_algorithm.MBRLAlgorithm.replay_buffer.random_batch", "mbrl_algorithm.MBRLAlgorithm.trainer.train", "mbrl_algorithm.MBRLAlgorithm.replay_buffer.random_batch", "mbrl_algorithm.MBRLAlgorithm.trainer.train", "mbrl_algorithm.MBRLAlgorithm.replay_buffer.num_steps_can_sample"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm.training_mode", "home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.end_epoch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.mbrl.mbrl.MBRLTrainer.train_from_buffer", "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm._end_epoch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.GoalConditionedStepCollector.collect_one_step", "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.add_sample", "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.num_steps_can_sample", "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.path_collector.GoalConditionedPathCollector.collect_new_paths", "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm.training_mode", "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.GoalConditionedStepCollector.collect_one_step", "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.add_sample", "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm.training_mode", "home.repos.pwc.inspect_result.kzl_lifelong_rl.mbrl.mbrl.MBRLTrainer.train_from_buffer", "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.random_batch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm.train", "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.random_batch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm.train", "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.num_steps_can_sample"], ["", "def", "_train", "(", "self", ")", ":", "\n", "        ", "self", ".", "training_mode", "(", "False", ")", "\n", "\n", "if", "self", ".", "min_num_steps_before_training", ">", "0", ":", "\n", "            ", "for", "_", "in", "range", "(", "self", ".", "min_num_steps_before_training", ")", ":", "\n", "                ", "s", ",", "a", ",", "r", ",", "d", ",", "ns", ",", "info", "=", "self", ".", "expl_data_collector", ".", "collect_one_step", "(", "\n", "self", ".", "max_path_length", ",", "\n", "discard_incomplete_paths", "=", "False", ",", "\n", "initial_expl", "=", "True", ",", "\n", ")", "\n", "\n", "self", ".", "replay_buffer", ".", "add_sample", "(", "s", ",", "a", ",", "r", ",", "d", ",", "ns", ",", "env_info", "=", "info", ")", "\n", "", "self", ".", "expl_data_collector", ".", "end_epoch", "(", "-", "1", ")", "\n", "\n", "gt", ".", "stamp", "(", "'initial exploration'", ",", "unique", "=", "False", ")", "\n", "\n", "", "num_trains_per_expl_step", "=", "self", ".", "num_trains_per_train_loop", "//", "self", ".", "num_expl_steps_per_train_loop", "\n", "if", "self", ".", "num_model_trains_per_train_loop", "==", "0", ":", "\n", "            ", "model_train_freq", "=", "None", "\n", "", "else", ":", "\n", "            ", "model_train_freq", "=", "self", ".", "num_expl_steps_per_train_loop", "//", "self", ".", "num_model_trains_per_train_loop", "\n", "\n", "", "if", "self", ".", "replay_buffer", ".", "num_steps_can_sample", "(", ")", ">", "0", "and", "model_train_freq", "is", "not", "None", ":", "\n", "            ", "self", ".", "model_trainer", ".", "train_from_buffer", "(", "self", ".", "replay_buffer", ",", "max_grad_steps", "=", "100000", ")", "\n", "gt", ".", "stamp", "(", "'model training'", ",", "unique", "=", "False", ")", "\n", "\n", "", "for", "epoch", "in", "gt", ".", "timed_for", "(", "\n", "range", "(", "self", ".", "_start_epoch", ",", "self", ".", "num_epochs", ")", ",", "\n", "save_itrs", "=", "True", ",", "\n", ")", ":", "\n", "            ", "if", "self", ".", "num_eval_steps_per_epoch", ">", "0", ":", "\n", "                ", "self", ".", "eval_data_collector", ".", "collect_new_paths", "(", "\n", "self", ".", "max_path_length", ",", "\n", "self", ".", "num_eval_steps_per_epoch", ",", "\n", "discard_incomplete_paths", "=", "True", ",", "\n", ")", "\n", "", "gt", ".", "stamp", "(", "'evaluation sampling'", ",", "unique", "=", "False", ")", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "num_train_loops_per_epoch", ")", ":", "\n", "                ", "for", "t", "in", "range", "(", "self", ".", "num_expl_steps_per_train_loop", ")", ":", "\n", "                    ", "self", ".", "training_mode", "(", "True", ")", "\n", "if", "model_train_freq", "is", "not", "None", "and", "(", "(", "t", "+", "1", ")", "%", "model_train_freq", "==", "0", "or", "(", "epoch", "==", "0", "and", "t", "==", "0", "and", "self", ".", "replay_buffer", ".", "num_steps_can_sample", "(", ")", ">", "0", ")", ")", ":", "\n", "                        ", "self", ".", "model_trainer", ".", "train_from_buffer", "(", "self", ".", "replay_buffer", ")", "\n", "", "gt", ".", "stamp", "(", "'model training'", ",", "unique", "=", "False", ")", "\n", "\n", "if", "(", "epoch", "==", "0", "and", "t", "==", "0", ")", "and", "self", ".", "initial_training_steps", ">", "0", ":", "\n", "                        ", "for", "_", "in", "range", "(", "self", ".", "initial_training_steps", ")", ":", "\n", "                            ", "train_data", "=", "self", ".", "replay_buffer", ".", "random_batch", "(", "\n", "self", ".", "batch_size", ")", "\n", "self", ".", "trainer", ".", "train", "(", "train_data", ")", "\n", "", "gt", ".", "stamp", "(", "'initial policy training'", ",", "unique", "=", "False", ")", "\n", "\n", "", "s", ",", "a", ",", "r", ",", "d", ",", "ns", ",", "info", "=", "self", ".", "expl_data_collector", ".", "collect_one_step", "(", "\n", "self", ".", "max_path_length", ",", "\n", "discard_incomplete_paths", "=", "False", ",", "\n", ")", "\n", "gt", ".", "stamp", "(", "'exploration sampling'", ",", "unique", "=", "False", ")", "\n", "\n", "self", ".", "replay_buffer", ".", "add_sample", "(", "s", ",", "a", ",", "r", ",", "d", ",", "ns", ",", "env_info", "=", "info", ")", "\n", "gt", ".", "stamp", "(", "'data storing'", ",", "unique", "=", "False", ")", "\n", "\n", "for", "_", "in", "range", "(", "num_trains_per_expl_step", ")", ":", "\n", "                        ", "train_data", "=", "self", ".", "replay_buffer", ".", "random_batch", "(", "\n", "self", ".", "batch_size", ")", "\n", "self", ".", "trainer", ".", "train", "(", "train_data", ")", "\n", "", "gt", ".", "stamp", "(", "'policy training'", ",", "unique", "=", "False", ")", "\n", "self", ".", "training_mode", "(", "False", ")", "\n", "\n", "", "", "self", ".", "_end_epoch", "(", "epoch", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.online.online_rl_algorithm.OnlineRLAlgorithm.__init__": [[10, 50], ["lifelong_rl.core.rl_algorithms.rl_algorithm.BaseRLAlgorithm.__init__"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "trainer", ",", "\n", "exploration_policy", ",", "\n", "exploration_env", ",", "\n", "evaluation_env", ",", "\n", "exploration_data_collector", ",", "\n", "evaluation_data_collector", ",", "\n", "replay_buffer", ",", "\n", "batch_size", ",", "\n", "max_path_length", ",", "\n", "num_epochs", ",", "\n", "num_eval_steps_per_epoch", ",", "\n", "num_expl_steps_per_train_loop", ",", "\n", "num_trains_per_train_loop", ",", "\n", "num_train_loops_per_epoch", "=", "1", ",", "\n", "min_num_steps_before_training", "=", "0", ",", "\n", "save_snapshot_freq", "=", "100", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "trainer", ",", "\n", "exploration_policy", ",", "\n", "exploration_env", ",", "\n", "evaluation_env", ",", "\n", "exploration_data_collector", ",", "\n", "evaluation_data_collector", ",", "\n", "replay_buffer", ",", "\n", "save_snapshot_freq", "=", "save_snapshot_freq", ",", "\n", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "max_path_length", "=", "max_path_length", "\n", "self", ".", "num_epochs", "=", "num_epochs", "\n", "self", ".", "num_eval_steps_per_epoch", "=", "num_eval_steps_per_epoch", "\n", "self", ".", "num_trains_per_train_loop", "=", "num_trains_per_train_loop", "\n", "self", ".", "num_train_loops_per_epoch", "=", "num_train_loops_per_epoch", "\n", "self", ".", "num_expl_steps_per_train_loop", "=", "num_expl_steps_per_train_loop", "\n", "self", ".", "min_num_steps_before_training", "=", "min_num_steps_before_training", "\n", "\n", "assert", "self", ".", "num_trains_per_train_loop", ">=", "self", ".", "num_expl_steps_per_train_loop", ",", "'Online training presumes num_trains_per_train_loop >= num_expl_steps_per_train_loop'", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.online.online_rl_algorithm.OnlineRLAlgorithm._train": [[51, 97], ["online_rl_algorithm.OnlineRLAlgorithm.training_mode", "gtimer.timed_for", "range", "online_rl_algorithm.OnlineRLAlgorithm.expl_data_collector.end_epoch", "gtimer.stamp", "range", "online_rl_algorithm.OnlineRLAlgorithm.eval_data_collector.collect_new_paths", "gtimer.stamp", "range", "online_rl_algorithm.OnlineRLAlgorithm._end_epoch", "online_rl_algorithm.OnlineRLAlgorithm.expl_data_collector.collect_one_step", "online_rl_algorithm.OnlineRLAlgorithm.replay_buffer.add_sample", "range", "online_rl_algorithm.OnlineRLAlgorithm.expl_data_collector.collect_one_step", "gtimer.stamp", "online_rl_algorithm.OnlineRLAlgorithm.replay_buffer.add_sample", "gtimer.stamp", "online_rl_algorithm.OnlineRLAlgorithm.training_mode", "range", "gtimer.stamp", "online_rl_algorithm.OnlineRLAlgorithm.training_mode", "online_rl_algorithm.OnlineRLAlgorithm.replay_buffer.random_batch", "online_rl_algorithm.OnlineRLAlgorithm.trainer.train"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm.training_mode", "home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.end_epoch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.path_collector.GoalConditionedPathCollector.collect_new_paths", "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm._end_epoch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.GoalConditionedStepCollector.collect_one_step", "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.add_sample", "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.step_collector.GoalConditionedStepCollector.collect_one_step", "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.add_sample", "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm.training_mode", "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm.training_mode", "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.random_batch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm.train"], ["", "def", "_train", "(", "self", ")", ":", "\n", "        ", "self", ".", "training_mode", "(", "False", ")", "\n", "if", "self", ".", "min_num_steps_before_training", ">", "0", ":", "\n", "            ", "for", "_", "in", "range", "(", "self", ".", "min_num_steps_before_training", ")", ":", "\n", "                ", "s", ",", "a", ",", "r", ",", "d", ",", "ns", ",", "info", "=", "self", ".", "expl_data_collector", ".", "collect_one_step", "(", "\n", "self", ".", "max_path_length", ",", "\n", "discard_incomplete_paths", "=", "False", ",", "\n", ")", "\n", "\n", "self", ".", "replay_buffer", ".", "add_sample", "(", "s", ",", "a", ",", "r", ",", "d", ",", "ns", ",", "env_info", "=", "info", ")", "\n", "\n", "", "self", ".", "expl_data_collector", ".", "end_epoch", "(", "-", "1", ")", "\n", "gt", ".", "stamp", "(", "'initial exploration'", ",", "unique", "=", "False", ")", "\n", "\n", "", "num_trains_per_expl_step", "=", "self", ".", "num_trains_per_train_loop", "//", "self", ".", "num_expl_steps_per_train_loop", "\n", "for", "epoch", "in", "gt", ".", "timed_for", "(", "\n", "range", "(", "self", ".", "_start_epoch", ",", "self", ".", "num_epochs", ")", ",", "\n", "save_itrs", "=", "True", ",", "\n", ")", ":", "\n", "            ", "self", ".", "eval_data_collector", ".", "collect_new_paths", "(", "\n", "self", ".", "max_path_length", ",", "\n", "self", ".", "num_eval_steps_per_epoch", ",", "\n", "discard_incomplete_paths", "=", "True", ",", "\n", ")", "\n", "gt", ".", "stamp", "(", "'evaluation sampling'", ",", "unique", "=", "False", ")", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "num_train_loops_per_epoch", ")", ":", "\n", "                ", "for", "_", "in", "range", "(", "self", ".", "num_expl_steps_per_train_loop", ")", ":", "\n", "                    ", "s", ",", "a", ",", "r", ",", "d", ",", "ns", ",", "info", "=", "self", ".", "expl_data_collector", ".", "collect_one_step", "(", "\n", "self", ".", "max_path_length", ",", "\n", "discard_incomplete_paths", "=", "False", ",", "\n", ")", "\n", "gt", ".", "stamp", "(", "'exploration sampling'", ",", "unique", "=", "False", ")", "\n", "\n", "self", ".", "replay_buffer", ".", "add_sample", "(", "s", ",", "a", ",", "r", ",", "d", ",", "ns", ",", "env_info", "=", "info", ")", "\n", "gt", ".", "stamp", "(", "'data storing'", ",", "unique", "=", "False", ")", "\n", "\n", "self", ".", "training_mode", "(", "True", ")", "\n", "for", "_", "in", "range", "(", "num_trains_per_expl_step", ")", ":", "\n", "                        ", "train_data", "=", "self", ".", "replay_buffer", ".", "random_batch", "(", "\n", "self", ".", "batch_size", ")", "\n", "self", ".", "trainer", ".", "train", "(", "train_data", ")", "\n", "", "gt", ".", "stamp", "(", "'training'", ",", "unique", "=", "False", ")", "\n", "self", ".", "training_mode", "(", "False", ")", "\n", "\n", "", "", "self", ".", "_end_epoch", "(", "epoch", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.batch.mb_batch_rl_algorithm.MBBatchRLAlgorithm.__init__": [[10, 25], ["int", "lifelong_rl.core.rl_algorithms.batch.batch_rl_algorithm.BatchRLAlgorithm.__init__"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "model_trainer", ",", "\n", "model_batch_size", ",", "\n", "model_max_grad_steps", "=", "int", "(", "1e3", ")", ",", "\n", "model_epochs_since_last_update", "=", "5", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "model_trainer", "=", "model_trainer", "\n", "self", ".", "model_batch_size", "=", "model_batch_size", "\n", "self", ".", "model_max_grad_steps", "=", "model_max_grad_steps", "\n", "self", ".", "model_epochs_since_last_update", "=", "model_epochs_since_last_update", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.batch.mb_batch_rl_algorithm.MBBatchRLAlgorithm._train": [[26, 78], ["gtimer.timed_for", "mb_batch_rl_algorithm.MBBatchRLAlgorithm.expl_data_collector.collect_new_paths", "mb_batch_rl_algorithm.MBBatchRLAlgorithm.replay_buffer.add_paths", "mb_batch_rl_algorithm.MBBatchRLAlgorithm.expl_data_collector.end_epoch", "mb_batch_rl_algorithm.MBBatchRLAlgorithm._fit_input_stats", "range", "mb_batch_rl_algorithm.MBBatchRLAlgorithm.eval_data_collector.collect_new_paths", "gtimer.stamp", "mb_batch_rl_algorithm.MBBatchRLAlgorithm.training_mode", "gtimer.stamp", "range", "mb_batch_rl_algorithm.MBBatchRLAlgorithm._fit_input_stats", "mb_batch_rl_algorithm.MBBatchRLAlgorithm._end_epoch", "mb_batch_rl_algorithm.MBBatchRLAlgorithm.replay_buffer.num_steps_can_sample", "mb_batch_rl_algorithm.MBBatchRLAlgorithm.model_trainer.train_from_buffer", "mb_batch_rl_algorithm.MBBatchRLAlgorithm.expl_data_collector.collect_new_paths", "gtimer.stamp", "mb_batch_rl_algorithm.MBBatchRLAlgorithm.replay_buffer.add_paths", "gtimer.stamp", "mb_batch_rl_algorithm.MBBatchRLAlgorithm.training_mode", "range", "gtimer.stamp", "mb_batch_rl_algorithm.MBBatchRLAlgorithm.training_mode", "mb_batch_rl_algorithm.MBBatchRLAlgorithm.trainer.train_from_paths"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.path_collector.GoalConditionedPathCollector.collect_new_paths", "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.replay_buffer.ReplayBuffer.add_paths", "home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.end_epoch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.rl_algorithm.BaseRLAlgorithm._fit_input_stats", "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.path_collector.GoalConditionedPathCollector.collect_new_paths", "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm.training_mode", "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.rl_algorithm.BaseRLAlgorithm._fit_input_stats", "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm._end_epoch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.num_steps_can_sample", "home.repos.pwc.inspect_result.kzl_lifelong_rl.mbrl.mbrl.MBRLTrainer.train_from_buffer", "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.path_collector.GoalConditionedPathCollector.collect_new_paths", "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.replay_buffer.ReplayBuffer.add_paths", "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm.training_mode", "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm.training_mode", "home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.train_from_paths"], ["", "def", "_train", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "min_num_steps_before_training", ">", "0", ":", "\n", "            ", "init_expl_paths", "=", "self", ".", "expl_data_collector", ".", "collect_new_paths", "(", "\n", "self", ".", "max_path_length", ",", "\n", "self", ".", "min_num_steps_before_training", ",", "\n", "discard_incomplete_paths", "=", "False", ",", "\n", ")", "\n", "self", ".", "replay_buffer", ".", "add_paths", "(", "init_expl_paths", ")", "\n", "self", ".", "expl_data_collector", ".", "end_epoch", "(", "-", "1", ")", "\n", "\n", "self", ".", "_fit_input_stats", "(", ")", "\n", "\n", "", "for", "epoch", "in", "gt", ".", "timed_for", "(", "\n", "range", "(", "self", ".", "_start_epoch", ",", "self", ".", "num_epochs", ")", ",", "\n", "save_itrs", "=", "True", ",", "\n", ")", ":", "\n", "            ", "self", ".", "eval_data_collector", ".", "collect_new_paths", "(", "\n", "self", ".", "max_path_length", ",", "\n", "self", ".", "num_eval_steps_per_epoch", ",", "\n", "discard_incomplete_paths", "=", "True", ",", "\n", ")", "\n", "gt", ".", "stamp", "(", "'evaluation sampling'", ")", "\n", "\n", "self", ".", "training_mode", "(", "True", ")", "\n", "if", "self", ".", "replay_buffer", ".", "num_steps_can_sample", "(", ")", ">", "0", ":", "\n", "                ", "self", ".", "model_trainer", ".", "train_from_buffer", "(", "\n", "self", ".", "replay_buffer", ",", "\n", "max_grad_steps", "=", "self", ".", "model_max_grad_steps", ",", "\n", "epochs_since_last_update", "=", "self", ".", "model_epochs_since_last_update", ",", "\n", ")", "\n", "", "gt", ".", "stamp", "(", "'model training'", ",", "unique", "=", "False", ")", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "num_train_loops_per_epoch", ")", ":", "\n", "                ", "new_expl_paths", "=", "self", ".", "expl_data_collector", ".", "collect_new_paths", "(", "\n", "self", ".", "max_path_length", ",", "\n", "self", ".", "num_expl_steps_per_train_loop", ",", "\n", "discard_incomplete_paths", "=", "False", ",", "\n", ")", "\n", "gt", ".", "stamp", "(", "'exploration sampling'", ",", "unique", "=", "False", ")", "\n", "\n", "self", ".", "replay_buffer", ".", "add_paths", "(", "new_expl_paths", ")", "\n", "gt", ".", "stamp", "(", "'data storing'", ",", "unique", "=", "False", ")", "\n", "\n", "self", ".", "training_mode", "(", "True", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "num_trains_per_train_loop", ")", ":", "\n", "                    ", "self", ".", "trainer", ".", "train_from_paths", "(", "new_expl_paths", ")", "\n", "", "gt", ".", "stamp", "(", "'training'", ",", "unique", "=", "False", ")", "\n", "self", ".", "training_mode", "(", "False", ")", "\n", "\n", "", "self", ".", "_fit_input_stats", "(", ")", "\n", "\n", "self", ".", "_end_epoch", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.batch.mb_batch_rl_algorithm.MBBatchRLAlgorithm._get_training_diagnostics_dict": [[79, 83], ["super()._get_training_diagnostics_dict", "mb_batch_rl_algorithm.MBBatchRLAlgorithm.model_trainer.get_diagnostics"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm._get_training_diagnostics_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchTrainer.get_diagnostics"], ["", "", "def", "_get_training_diagnostics_dict", "(", "self", ")", ":", "\n", "        ", "training_diagnostics", "=", "super", "(", ")", ".", "_get_training_diagnostics_dict", "(", ")", "\n", "training_diagnostics", "[", "'model_trainer'", "]", "=", "self", ".", "model_trainer", ".", "get_diagnostics", "(", ")", "\n", "return", "training_diagnostics", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.batch.mb_batch_rl_algorithm.MBBatchRLAlgorithm._get_snapshot": [[84, 89], ["super()._get_snapshot", "mb_batch_rl_algorithm.MBBatchRLAlgorithm.model_trainer.get_snapshot().items", "mb_batch_rl_algorithm.MBBatchRLAlgorithm.model_trainer.get_snapshot"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm._get_snapshot", "home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.get_snapshot"], ["", "def", "_get_snapshot", "(", "self", ")", ":", "\n", "        ", "snapshot", "=", "super", "(", ")", ".", "_get_snapshot", "(", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "model_trainer", ".", "get_snapshot", "(", ")", ".", "items", "(", ")", ":", "\n", "            ", "snapshot", "[", "'model/'", "+", "k", "]", "=", "v", "\n", "", "return", "snapshot", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.batch.mb_batch_rl_algorithm.MBBatchRLAlgorithm._end_epochs": [[90, 93], ["super()._end_epochs", "mb_batch_rl_algorithm.MBBatchRLAlgorithm.model_trainer.end_epoch"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm._end_epochs", "home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.end_epoch"], ["", "def", "_end_epochs", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "super", "(", ")", ".", "_end_epochs", "(", "epoch", ")", "\n", "self", ".", "model_trainer", ".", "end_epoch", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.batch.batch_rl_algorithm.BatchRLAlgorithm.__init__": [[9, 47], ["lifelong_rl.core.rl_algorithms.rl_algorithm.BaseRLAlgorithm.__init__"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "trainer", ",", "\n", "exploration_policy", ",", "\n", "exploration_env", ",", "\n", "evaluation_env", ",", "\n", "exploration_data_collector", ",", "\n", "evaluation_data_collector", ",", "\n", "replay_buffer", ",", "\n", "max_path_length", ",", "\n", "num_epochs", ",", "\n", "num_eval_steps_per_epoch", ",", "\n", "num_expl_steps_per_train_loop", ",", "\n", "num_trains_per_train_loop", "=", "1", ",", "\n", "num_train_loops_per_epoch", "=", "1", ",", "\n", "min_num_steps_before_training", "=", "0", ",", "\n", "save_snapshot_freq", "=", "100", ",", "\n", "post_epoch_funcs", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "trainer", ",", "\n", "exploration_policy", ",", "\n", "exploration_env", ",", "\n", "evaluation_env", ",", "\n", "exploration_data_collector", ",", "\n", "evaluation_data_collector", ",", "\n", "replay_buffer", ",", "\n", "save_snapshot_freq", "=", "save_snapshot_freq", ",", "\n", "post_epoch_funcs", "=", "post_epoch_funcs", ",", "\n", ")", "\n", "\n", "self", ".", "max_path_length", "=", "max_path_length", "\n", "self", ".", "num_epochs", "=", "num_epochs", "\n", "self", ".", "num_eval_steps_per_epoch", "=", "num_eval_steps_per_epoch", "\n", "self", ".", "num_trains_per_train_loop", "=", "num_trains_per_train_loop", "\n", "self", ".", "num_train_loops_per_epoch", "=", "num_train_loops_per_epoch", "\n", "self", ".", "num_expl_steps_per_train_loop", "=", "num_expl_steps_per_train_loop", "\n", "self", ".", "min_num_steps_before_training", "=", "min_num_steps_before_training", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.batch.batch_rl_algorithm.BatchRLAlgorithm._train": [[48, 91], ["gtimer.timed_for", "batch_rl_algorithm.BatchRLAlgorithm.expl_data_collector.collect_new_paths", "batch_rl_algorithm.BatchRLAlgorithm.replay_buffer.add_paths", "batch_rl_algorithm.BatchRLAlgorithm.expl_data_collector.end_epoch", "batch_rl_algorithm.BatchRLAlgorithm._fit_input_stats", "range", "batch_rl_algorithm.BatchRLAlgorithm.eval_data_collector.collect_new_paths", "gtimer.stamp", "range", "batch_rl_algorithm.BatchRLAlgorithm._fit_input_stats", "batch_rl_algorithm.BatchRLAlgorithm._end_epoch", "batch_rl_algorithm.BatchRLAlgorithm.expl_data_collector.collect_new_paths", "gtimer.stamp", "batch_rl_algorithm.BatchRLAlgorithm.replay_buffer.add_paths", "gtimer.stamp", "batch_rl_algorithm.BatchRLAlgorithm.training_mode", "range", "gtimer.stamp", "batch_rl_algorithm.BatchRLAlgorithm.training_mode", "batch_rl_algorithm.BatchRLAlgorithm.trainer.train_from_paths"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.path_collector.GoalConditionedPathCollector.collect_new_paths", "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.replay_buffer.ReplayBuffer.add_paths", "home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.end_epoch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.rl_algorithm.BaseRLAlgorithm._fit_input_stats", "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.path_collector.GoalConditionedPathCollector.collect_new_paths", "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.rl_algorithm.BaseRLAlgorithm._fit_input_stats", "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm._end_epoch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.path_collector.GoalConditionedPathCollector.collect_new_paths", "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.replay_buffer.ReplayBuffer.add_paths", "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm.training_mode", "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm.training_mode", "home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.train_from_paths"], ["", "def", "_train", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "min_num_steps_before_training", ">", "0", ":", "\n", "            ", "init_expl_paths", "=", "self", ".", "expl_data_collector", ".", "collect_new_paths", "(", "\n", "self", ".", "max_path_length", ",", "\n", "self", ".", "min_num_steps_before_training", ",", "\n", "discard_incomplete_paths", "=", "False", ",", "\n", ")", "\n", "self", ".", "replay_buffer", ".", "add_paths", "(", "init_expl_paths", ")", "\n", "self", ".", "expl_data_collector", ".", "end_epoch", "(", "-", "1", ")", "\n", "\n", "self", ".", "_fit_input_stats", "(", ")", "\n", "\n", "", "for", "epoch", "in", "gt", ".", "timed_for", "(", "\n", "range", "(", "self", ".", "_start_epoch", ",", "self", ".", "num_epochs", ")", ",", "\n", "save_itrs", "=", "True", ",", "\n", ")", ":", "\n", "            ", "self", ".", "eval_data_collector", ".", "collect_new_paths", "(", "\n", "self", ".", "max_path_length", ",", "\n", "self", ".", "num_eval_steps_per_epoch", ",", "\n", "discard_incomplete_paths", "=", "True", ",", "\n", ")", "\n", "gt", ".", "stamp", "(", "'evaluation sampling'", ")", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "num_train_loops_per_epoch", ")", ":", "\n", "                ", "new_expl_paths", "=", "self", ".", "expl_data_collector", ".", "collect_new_paths", "(", "\n", "self", ".", "max_path_length", ",", "\n", "self", ".", "num_expl_steps_per_train_loop", ",", "\n", "discard_incomplete_paths", "=", "False", ",", "\n", ")", "\n", "gt", ".", "stamp", "(", "'exploration sampling'", ",", "unique", "=", "False", ")", "\n", "\n", "self", ".", "replay_buffer", ".", "add_paths", "(", "new_expl_paths", ")", "\n", "gt", ".", "stamp", "(", "'data storing'", ",", "unique", "=", "False", ")", "\n", "\n", "self", ".", "training_mode", "(", "True", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "num_trains_per_train_loop", ")", ":", "\n", "                    ", "self", ".", "trainer", ".", "train_from_paths", "(", "new_expl_paths", ")", "\n", "", "gt", ".", "stamp", "(", "'training'", ",", "unique", "=", "False", ")", "\n", "self", ".", "training_mode", "(", "False", ")", "\n", "\n", "", "self", ".", "_fit_input_stats", "(", ")", "\n", "\n", "self", ".", "_end_epoch", "(", "epoch", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm.__init__": [[12, 43], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "trainer", ",", "\n", "evaluation_policy", ",", "\n", "evaluation_env", ",", "\n", "evaluation_data_collector", ",", "\n", "replay_buffer", ",", "\n", "batch_size", ",", "\n", "max_path_length", ",", "\n", "num_epochs", ",", "\n", "num_eval_steps_per_epoch", ",", "\n", "num_trains_per_train_loop", ",", "\n", "num_train_loops_per_epoch", "=", "1", ",", "\n", "save_snapshot_freq", "=", "10", ",", "\n", ")", ":", "\n", "        ", "self", ".", "trainer", "=", "trainer", "\n", "self", ".", "eval_policy", "=", "evaluation_policy", "\n", "self", ".", "eval_env", "=", "evaluation_env", "\n", "self", ".", "eval_data_collector", "=", "evaluation_data_collector", "\n", "self", ".", "replay_buffer", "=", "replay_buffer", "\n", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "max_path_length", "=", "max_path_length", "\n", "self", ".", "num_epochs", "=", "num_epochs", "\n", "self", ".", "num_eval_steps_per_epoch", "=", "num_eval_steps_per_epoch", "\n", "self", ".", "num_trains_per_train_loop", "=", "num_trains_per_train_loop", "\n", "self", ".", "num_train_loops_per_epoch", "=", "num_train_loops_per_epoch", "\n", "self", ".", "save_snapshot_freq", "=", "save_snapshot_freq", "\n", "\n", "self", ".", "_start_epoch", "=", "0", "\n", "self", ".", "post_epoch_funcs", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm._train": [[44, 65], ["gtimer.timed_for", "range", "offline_rl_algorithm.OfflineRLAlgorithm.eval_data_collector.collect_new_paths", "gtimer.stamp", "offline_rl_algorithm.OfflineRLAlgorithm.training_mode", "range", "offline_rl_algorithm.OfflineRLAlgorithm.training_mode", "gtimer.stamp", "offline_rl_algorithm.OfflineRLAlgorithm._end_epoch", "range", "offline_rl_algorithm.OfflineRLAlgorithm.replay_buffer.random_batch", "offline_rl_algorithm.OfflineRLAlgorithm.trainer.train"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.path_collector.GoalConditionedPathCollector.collect_new_paths", "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm.training_mode", "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm.training_mode", "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm._end_epoch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.random_batch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm.train"], ["", "def", "_train", "(", "self", ")", ":", "\n", "        ", "for", "epoch", "in", "gt", ".", "timed_for", "(", "\n", "range", "(", "self", ".", "_start_epoch", ",", "self", ".", "num_epochs", ")", ",", "\n", "save_itrs", "=", "True", ",", "\n", ")", ":", "\n", "            ", "self", ".", "eval_data_collector", ".", "collect_new_paths", "(", "\n", "self", ".", "max_path_length", ",", "\n", "self", ".", "num_eval_steps_per_epoch", ",", "\n", "discard_incomplete_paths", "=", "True", ",", "\n", ")", "\n", "gt", ".", "stamp", "(", "'evaluation sampling'", ")", "\n", "\n", "self", ".", "training_mode", "(", "True", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "num_train_loops_per_epoch", ")", ":", "\n", "                ", "for", "_", "in", "range", "(", "self", ".", "num_trains_per_train_loop", ")", ":", "\n", "                    ", "train_data", "=", "self", ".", "replay_buffer", ".", "random_batch", "(", "self", ".", "batch_size", ")", "\n", "self", ".", "trainer", ".", "train", "(", "train_data", ")", "\n", "", "", "self", ".", "training_mode", "(", "False", ")", "\n", "gt", ".", "stamp", "(", "'training'", ")", "\n", "\n", "self", ".", "_end_epoch", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm.train": [[66, 69], ["offline_rl_algorithm.OfflineRLAlgorithm._train"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm._train"], ["", "", "def", "train", "(", "self", ",", "start_epoch", "=", "0", ")", ":", "\n", "        ", "self", ".", "_start_epoch", "=", "start_epoch", "\n", "self", ".", "_train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm._end_epoch": [[70, 83], ["offline_rl_algorithm.OfflineRLAlgorithm._get_snapshot", "gtimer.stamp", "offline_rl_algorithm.OfflineRLAlgorithm._log_stats", "offline_rl_algorithm.OfflineRLAlgorithm._end_epochs", "lifelong_rl.core.logger.save_itr_params", "post_epoch_func"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm._get_snapshot", "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm._log_stats", "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm._end_epochs", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.save_itr_params"], ["", "def", "_end_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "snapshot", "=", "self", ".", "_get_snapshot", "(", ")", "\n", "if", "self", ".", "save_snapshot_freq", "is", "not", "None", "and", "(", "epoch", "+", "1", ")", "%", "self", ".", "save_snapshot_freq", "==", "0", ":", "\n", "            ", "logger", ".", "save_itr_params", "(", "epoch", ",", "snapshot", ",", "prefix", "=", "'offline_itr'", ")", "\n", "", "gt", ".", "stamp", "(", "'saving'", ",", "unique", "=", "False", ")", "\n", "\n", "self", ".", "_log_stats", "(", "epoch", ")", "\n", "\n", "self", ".", "_end_epochs", "(", "epoch", ")", "\n", "\n", "for", "post_epoch_func", "in", "self", ".", "post_epoch_funcs", ":", "\n", "            ", "post_epoch_func", "(", "self", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm._get_snapshot": [[84, 93], ["offline_rl_algorithm.OfflineRLAlgorithm.trainer.get_snapshot().items", "offline_rl_algorithm.OfflineRLAlgorithm.eval_data_collector.get_snapshot().items", "offline_rl_algorithm.OfflineRLAlgorithm.replay_buffer.get_snapshot().items", "offline_rl_algorithm.OfflineRLAlgorithm.trainer.get_snapshot", "offline_rl_algorithm.OfflineRLAlgorithm.eval_data_collector.get_snapshot", "offline_rl_algorithm.OfflineRLAlgorithm.replay_buffer.get_snapshot"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.get_snapshot", "home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.get_snapshot", "home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.get_snapshot"], ["", "", "def", "_get_snapshot", "(", "self", ")", ":", "\n", "        ", "snapshot", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "self", ".", "trainer", ".", "get_snapshot", "(", ")", ".", "items", "(", ")", ":", "\n", "            ", "snapshot", "[", "'trainer/'", "+", "k", "]", "=", "v", "\n", "", "for", "k", ",", "v", "in", "self", ".", "eval_data_collector", ".", "get_snapshot", "(", ")", ".", "items", "(", ")", ":", "\n", "            ", "snapshot", "[", "'evaluation/'", "+", "k", "]", "=", "v", "\n", "", "for", "k", ",", "v", "in", "self", ".", "replay_buffer", ".", "get_snapshot", "(", ")", ".", "items", "(", ")", ":", "\n", "            ", "snapshot", "[", "'replay_buffer/'", "+", "k", "]", "=", "v", "\n", "", "return", "snapshot", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm._end_epochs": [[94, 100], ["offline_rl_algorithm.OfflineRLAlgorithm.eval_data_collector.end_epoch", "offline_rl_algorithm.OfflineRLAlgorithm.trainer.end_epoch", "hasattr", "offline_rl_algorithm.OfflineRLAlgorithm.eval_policy.end_epoch"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.end_epoch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.end_epoch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.end_epoch"], ["", "def", "_end_epochs", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "eval_data_collector", ".", "end_epoch", "(", "epoch", ")", "\n", "self", ".", "trainer", ".", "end_epoch", "(", "epoch", ")", "\n", "\n", "if", "hasattr", "(", "self", ".", "eval_policy", ",", "'end_epoch'", ")", ":", "\n", "            ", "self", ".", "eval_policy", ".", "end_epoch", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm._get_trainer_diagnostics": [[101, 103], ["offline_rl_algorithm.OfflineRLAlgorithm.trainer.get_diagnostics"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchTrainer.get_diagnostics"], ["", "", "def", "_get_trainer_diagnostics", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "trainer", ".", "get_diagnostics", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm._get_training_diagnostics_dict": [[104, 106], ["offline_rl_algorithm.OfflineRLAlgorithm._get_trainer_diagnostics"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm._get_trainer_diagnostics"], ["", "def", "_get_training_diagnostics_dict", "(", "self", ")", ":", "\n", "        ", "return", "{", "'policy_trainer'", ":", "self", ".", "_get_trainer_diagnostics", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm._log_stats": [[107, 151], ["lifelong_rl.core.logger.log", "lifelong_rl.core.logger.record_dict", "offline_rl_algorithm.OfflineRLAlgorithm._get_training_diagnostics_dict", "lifelong_rl.core.logger.record_dict", "lifelong_rl.core.logger.record_tabular", "lifelong_rl.core.logger.dump_tabular", "gtimer.stamp", "offline_rl_algorithm.OfflineRLAlgorithm.replay_buffer.get_diagnostics", "lifelong_rl.core.logger.record_dict", "lifelong_rl.core.logger.record_dict", "offline_rl_algorithm.OfflineRLAlgorithm.eval_data_collector.get_epoch_paths", "hasattr", "lifelong_rl.core.logger.record_dict", "lifelong_rl.core.rl_algorithms.rl_algorithm._get_epoch_timings", "offline_rl_algorithm.OfflineRLAlgorithm.eval_data_collector.get_diagnostics", "lifelong_rl.core.logger.record_dict", "lifelong_rl.util.eval_util.get_generic_path_information", "offline_rl_algorithm.OfflineRLAlgorithm.eval_env.get_diagnostics"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.log", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.record_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm._get_training_diagnostics_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.record_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.record_tabular", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.dump_tabular", "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchTrainer.get_diagnostics", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.record_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.record_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.path_collector.GoalConditionedPathCollector.get_epoch_paths", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.record_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.rl_algorithm._get_epoch_timings", "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchTrainer.get_diagnostics", "home.repos.pwc.inspect_result.kzl_lifelong_rl.logging.logging.Logger.record_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.util.eval_util.get_generic_path_information", "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchTrainer.get_diagnostics"], ["", "def", "_log_stats", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "logger", ".", "log", "(", "\"Epoch {} finished\"", ".", "format", "(", "epoch", ")", ",", "with_timestamp", "=", "True", ")", "\n", "\n", "\"\"\"\n        Replay Buffer\n        \"\"\"", "\n", "logger", ".", "record_dict", "(", "\n", "self", ".", "replay_buffer", ".", "get_diagnostics", "(", ")", ",", "\n", "prefix", "=", "'replay_buffer/'", "\n", ")", "\n", "\n", "\"\"\"\n        Trainer\n        \"\"\"", "\n", "training_diagnostics", "=", "self", ".", "_get_training_diagnostics_dict", "(", ")", "\n", "for", "prefix", "in", "training_diagnostics", ":", "\n", "            ", "logger", ".", "record_dict", "(", "training_diagnostics", "[", "prefix", "]", ",", "prefix", "=", "prefix", "+", "'/'", ")", "\n", "\n", "", "\"\"\"\n        Evaluation\n        \"\"\"", "\n", "if", "self", ".", "num_eval_steps_per_epoch", ">", "0", ":", "\n", "            ", "logger", ".", "record_dict", "(", "\n", "self", ".", "eval_data_collector", ".", "get_diagnostics", "(", ")", ",", "\n", "prefix", "=", "'evaluation/'", ",", "\n", ")", "\n", "eval_paths", "=", "self", ".", "eval_data_collector", ".", "get_epoch_paths", "(", ")", "\n", "if", "hasattr", "(", "self", ".", "eval_env", ",", "'get_diagnostics'", ")", ":", "\n", "                ", "logger", ".", "record_dict", "(", "\n", "self", ".", "eval_env", ".", "get_diagnostics", "(", "eval_paths", ")", ",", "\n", "prefix", "=", "'evaluation/'", ",", "\n", ")", "\n", "", "logger", ".", "record_dict", "(", "\n", "eval_util", ".", "get_generic_path_information", "(", "eval_paths", ")", ",", "\n", "prefix", "=", "\"evaluation/\"", ",", "\n", ")", "\n", "\n", "", "\"\"\"\n        Misc\n        \"\"\"", "\n", "logger", ".", "record_dict", "(", "_get_epoch_timings", "(", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'Epoch'", ",", "epoch", ")", "\n", "logger", ".", "dump_tabular", "(", "with_prefix", "=", "False", ",", "with_timestamp", "=", "False", ")", "\n", "gt", ".", "stamp", "(", "'logging'", ",", "unique", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm.training_mode": [[152, 160], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "training_mode", "(", "self", ",", "mode", ")", ":", "\n", "        ", "\"\"\"\n        Set training mode to `mode`.\n        :param mode: If True, training will happen (e.g. set the dropout\n        probabilities to not all ones).\n        \"\"\"", "\n", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__": [[10, 27], ["int", "lifelong_rl.core.rl_algorithms.offline.offline_rl_algorithm.OfflineRLAlgorithm.__init__"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "model_trainer", ",", "\n", "model_batch_size", ",", "\n", "model_max_grad_steps", "=", "int", "(", "1e7", ")", ",", "# The model will train until either this number of grad steps", "\n", "model_epochs_since_last_update", "=", "10", ",", "# or until holdout loss converged for this number of epochs", "\n", "train_at_start", "=", "True", ",", "# Flag for debugging", "\n", "*", "args", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "model_trainer", "=", "model_trainer", "\n", "self", ".", "model_batch_size", "=", "model_batch_size", "\n", "self", ".", "model_max_grad_steps", "=", "model_max_grad_steps", "\n", "self", ".", "model_epochs_since_last_update", "=", "model_epochs_since_last_update", "\n", "self", ".", "train_at_start", "=", "train_at_start", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm._train": [[28, 59], ["gtimer.stamp", "gtimer.timed_for", "mb_offline_rl_algorithm.OfflineMBRLAlgorithm.model_trainer.train_from_buffer", "range", "mb_offline_rl_algorithm.OfflineMBRLAlgorithm.eval_data_collector.collect_new_paths", "gtimer.stamp", "mb_offline_rl_algorithm.OfflineMBRLAlgorithm.training_mode", "range", "mb_offline_rl_algorithm.OfflineMBRLAlgorithm.training_mode", "mb_offline_rl_algorithm.OfflineMBRLAlgorithm._end_epoch", "range", "mb_offline_rl_algorithm.OfflineMBRLAlgorithm.replay_buffer.random_batch", "mb_offline_rl_algorithm.OfflineMBRLAlgorithm.trainer.train", "gtimer.stamp"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.mbrl.mbrl.MBRLTrainer.train_from_buffer", "home.repos.pwc.inspect_result.kzl_lifelong_rl.data_collector.path_collector.GoalConditionedPathCollector.collect_new_paths", "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm.training_mode", "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm.training_mode", "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm._end_epoch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.replay_buffers.simple_replay_buffer.SimpleReplayBuffer.random_batch", "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.offline_rl_algorithm.OfflineRLAlgorithm.train"], ["", "def", "_train", "(", "self", ")", ":", "\n", "# Pretrain the model at the beginning of training until convergence", "\n", "# Note that convergence is measured against a holdout set of max size 8192", "\n", "        ", "if", "self", ".", "train_at_start", ":", "\n", "            ", "self", ".", "model_trainer", ".", "train_from_buffer", "(", "\n", "self", ".", "replay_buffer", ",", "\n", "max_grad_steps", "=", "self", ".", "model_max_grad_steps", ",", "\n", "epochs_since_last_update", "=", "self", ".", "model_epochs_since_last_update", ",", "\n", ")", "\n", "", "gt", ".", "stamp", "(", "'model training'", ",", "unique", "=", "False", ")", "\n", "\n", "for", "epoch", "in", "gt", ".", "timed_for", "(", "\n", "range", "(", "self", ".", "_start_epoch", ",", "self", ".", "num_epochs", ")", ",", "\n", "save_itrs", "=", "True", ",", "\n", ")", ":", "\n", "            ", "self", ".", "eval_data_collector", ".", "collect_new_paths", "(", "\n", "self", ".", "max_path_length", ",", "\n", "self", ".", "num_eval_steps_per_epoch", ",", "\n", "discard_incomplete_paths", "=", "True", ",", "\n", ")", "\n", "gt", ".", "stamp", "(", "'evaluation sampling'", ")", "\n", "\n", "self", ".", "training_mode", "(", "True", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "num_train_loops_per_epoch", ")", ":", "\n", "                ", "for", "t", "in", "range", "(", "self", ".", "num_trains_per_train_loop", ")", ":", "\n", "                    ", "train_data", "=", "self", ".", "replay_buffer", ".", "random_batch", "(", "self", ".", "batch_size", ")", "\n", "self", ".", "trainer", ".", "train", "(", "train_data", ")", "\n", "gt", ".", "stamp", "(", "'policy training'", ",", "unique", "=", "False", ")", "\n", "", "", "self", ".", "training_mode", "(", "False", ")", "\n", "\n", "self", ".", "_end_epoch", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm._get_training_diagnostics_dict": [[60, 64], ["super()._get_training_diagnostics_dict", "mb_offline_rl_algorithm.OfflineMBRLAlgorithm.model_trainer.get_diagnostics"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm._get_training_diagnostics_dict", "home.repos.pwc.inspect_result.kzl_lifelong_rl.rl_algorithms.torch_rl_algorithm.TorchTrainer.get_diagnostics"], ["", "", "def", "_get_training_diagnostics_dict", "(", "self", ")", ":", "\n", "        ", "training_diagnostics", "=", "super", "(", ")", ".", "_get_training_diagnostics_dict", "(", ")", "\n", "training_diagnostics", "[", "'model_trainer'", "]", "=", "self", ".", "model_trainer", ".", "get_diagnostics", "(", ")", "\n", "return", "training_diagnostics", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm._get_snapshot": [[65, 70], ["super()._get_snapshot", "mb_offline_rl_algorithm.OfflineMBRLAlgorithm.model_trainer.get_snapshot().items", "mb_offline_rl_algorithm.OfflineMBRLAlgorithm.model_trainer.get_snapshot"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm._get_snapshot", "home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.get_snapshot"], ["", "def", "_get_snapshot", "(", "self", ")", ":", "\n", "        ", "snapshot", "=", "super", "(", ")", ".", "_get_snapshot", "(", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "model_trainer", ".", "get_snapshot", "(", ")", ".", "items", "(", ")", ":", "\n", "            ", "snapshot", "[", "'model/'", "+", "k", "]", "=", "v", "\n", "", "return", "snapshot", "\n", "\n"]], "home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm._end_epochs": [[71, 74], ["super()._end_epochs", "mb_offline_rl_algorithm.OfflineMBRLAlgorithm.model_trainer.end_epoch"], "methods", ["home.repos.pwc.inspect_result.kzl_lifelong_rl.offline.mb_offline_rl_algorithm.OfflineMBRLAlgorithm._end_epochs", "home.repos.pwc.inspect_result.kzl_lifelong_rl.her.her.HERTrainer.end_epoch"], ["", "def", "_end_epochs", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "super", "(", ")", ".", "_end_epochs", "(", "epoch", ")", "\n", "self", ".", "model_trainer", ".", "end_epoch", "(", "epoch", ")", "\n", "", "", ""]]}