{"home.repos.pwc.inspect_result.kuielab_mdx-net.None.run.main": [[12, 36], ["hydra.main", "pytorch_lightning.utilities.rank_zero_info", "utils.extras", "config.get", "train", "omegaconf.OmegaConf.to_yaml", "utils.print_config"], "function", ["home.repos.pwc.inspect_result.kuielab_mdx-net.utils.data_augmentation.main", "home.repos.pwc.inspect_result.kuielab_mdx-net.utils.utils.extras", "home.repos.pwc.inspect_result.kuielab_mdx-net.src.train.train", "home.repos.pwc.inspect_result.kuielab_mdx-net.utils.utils.print_config"], ["@", "hydra", ".", "main", "(", "config_path", "=", "\"configs/\"", ",", "config_name", "=", "\"config.yaml\"", ")", "\n", "def", "main", "(", "config", ":", "DictConfig", ")", ":", "\n", "\n", "# Imports should be nested inside @hydra.main to optimize tab completion", "\n", "# Read more here: https://github.com/facebookresearch/hydra/issues/934", "\n", "    ", "from", "src", ".", "train", "import", "train", "\n", "from", "src", ".", "utils", "import", "utils", "\n", "\n", "rank_zero_info", "(", "OmegaConf", ".", "to_yaml", "(", "config", ")", ")", "\n", "\n", "# A couple of optional utilities:", "\n", "# - disabling python warnings", "\n", "# - easier access to debug mode", "\n", "# - forcing debug friendly configuration", "\n", "# - forcing multi-gpu friendly configuration", "\n", "# You can safely get rid of this line if you don't want those", "\n", "utils", ".", "extras", "(", "config", ")", "\n", "\n", "# Pretty print config using Rich library", "\n", "if", "config", ".", "get", "(", "\"print_config\"", ")", ":", "\n", "        ", "utils", ".", "print_config", "(", "config", ",", "resolve", "=", "True", ")", "\n", "\n", "# Train model", "\n", "", "return", "train", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.None.run_eval.main": [[8, 20], ["hydra.main", "config.get", "evaluation", "utils.print_config"], "function", ["home.repos.pwc.inspect_result.kuielab_mdx-net.utils.data_augmentation.main", "home.repos.pwc.inspect_result.kuielab_mdx-net.evaluation.eval.evaluation", "home.repos.pwc.inspect_result.kuielab_mdx-net.utils.utils.print_config"], ["@", "hydra", ".", "main", "(", "config_path", "=", "\"configs/\"", ",", "config_name", "=", "\"evaluation.yaml\"", ")", "\n", "def", "main", "(", "config", ":", "DictConfig", ")", ":", "\n", "# Imports should be nested inside @hydra.main to optimize tab completion", "\n", "# Read more here: https://github.com/facebookresearch/hydra/issues/934", "\n", "    ", "from", "src", ".", "evaluation", ".", "eval", "import", "evaluation", "\n", "from", "src", ".", "utils", "import", "utils", "\n", "\n", "# Pretty print config using Rich library", "\n", "if", "config", ".", "get", "(", "\"print_config\"", ")", ":", "\n", "        ", "utils", ".", "print_config", "(", "config", ",", "resolve", "=", "True", ")", "\n", "\n", "", "evaluation", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.src.train.train": [[20, 113], ["log.info", "hydra.utils.instantiate", "log.info", "hydra.utils.instantiate", "log.info", "hydra.utils.instantiate", "log.info", "src.utils.utils.log_hyperparameters", "log.info", "trainer.fit", "log.info", "src.utils.utils.finish", "log.info", "config.get", "config[].items", "config[].items", "any", "config.trainer.get", "log.info", "trainer.test", "pytorch_lightning.seed_everything", "print", "exit", "src.utils.utils.wandb_login", "log.info", "callbacks.append", "log.info", "logger.append", "isinstance", "hydra.utils.instantiate", "hydra.utils.instantiate"], "function", ["home.repos.pwc.inspect_result.kuielab_mdx-net.utils.utils.log_hyperparameters", "home.repos.pwc.inspect_result.kuielab_mdx-net.utils.utils.finish", "home.repos.pwc.inspect_result.kuielab_mdx-net.utils.utils.wandb_login"], ["def", "train", "(", "config", ":", "DictConfig", ")", "->", "Optional", "[", "float", "]", ":", "\n", "    ", "\"\"\"Contains training pipeline.\n    Instantiates all PyTorch Lightning objects from config.\n\n    Args:\n        config (DictConfig): Configuration composed by Hydra.\n\n    Returns:\n        Optional[float]: Metric score for hyperparameter optimization.\n    \"\"\"", "\n", "\n", "# Set seed for random number generators in pytorch, numpy and python.random", "\n", "try", ":", "\n", "        ", "if", "\"seed\"", "in", "config", ":", "\n", "            ", "seed_everything", "(", "config", ".", "seed", ",", "workers", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ModuleNotFoundError", "\n", "\n", "", "", "except", "ModuleNotFoundError", ":", "\n", "        ", "print", "(", "'[Error] seed should be fixed for reproducibility \\n=> e.g. python run.py +seed=$SEED'", ")", "\n", "exit", "(", "-", "1", ")", "\n", "\n", "# Init Lightning datamodule", "\n", "", "log", ".", "info", "(", "f\"Instantiating datamodule <{config.datamodule._target_}>\"", ")", "\n", "datamodule", ":", "LightningDataModule", "=", "hydra", ".", "utils", ".", "instantiate", "(", "config", ".", "datamodule", ")", "\n", "\n", "# Init Lightning model", "\n", "log", ".", "info", "(", "f\"Instantiating model <{config.model._target_}>\"", ")", "\n", "model", ":", "LightningModule", "=", "hydra", ".", "utils", ".", "instantiate", "(", "config", ".", "model", ")", "\n", "\n", "# Init Lightning callbacks", "\n", "callbacks", ":", "List", "[", "Callback", "]", "=", "[", "]", "\n", "if", "\"callbacks\"", "in", "config", ":", "\n", "        ", "for", "_", ",", "cb_conf", "in", "config", "[", "\"callbacks\"", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "\"_target_\"", "in", "cb_conf", ":", "\n", "                ", "log", ".", "info", "(", "f\"Instantiating callback <{cb_conf._target_}>\"", ")", "\n", "callbacks", ".", "append", "(", "hydra", ".", "utils", ".", "instantiate", "(", "cb_conf", ")", ")", "\n", "\n", "# Init Lightning loggers", "\n", "", "", "", "logger", ":", "List", "[", "LightningLoggerBase", "]", "=", "[", "]", "\n", "if", "\"logger\"", "in", "config", ":", "\n", "        ", "for", "_", ",", "lg_conf", "in", "config", "[", "\"logger\"", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "\"_target_\"", "in", "lg_conf", ":", "\n", "                ", "log", ".", "info", "(", "f\"Instantiating logger <{lg_conf._target_}>\"", ")", "\n", "logger", ".", "append", "(", "hydra", ".", "utils", ".", "instantiate", "(", "lg_conf", ")", ")", "\n", "\n", "", "", "if", "any", "(", "[", "isinstance", "(", "l", ",", "WandbLogger", ")", "for", "l", "in", "logger", "]", ")", ":", "\n", "            ", "utils", ".", "wandb_login", "(", "key", "=", "config", ".", "wandb_api_key", ")", "\n", "\n", "# Init Lightning trainer", "\n", "", "", "log", ".", "info", "(", "f\"Instantiating trainer <{config.trainer._target_}>\"", ")", "\n", "trainer", ":", "Trainer", "=", "hydra", ".", "utils", ".", "instantiate", "(", "\n", "config", ".", "trainer", ",", "callbacks", "=", "callbacks", ",", "logger", "=", "logger", ",", "_convert_", "=", "\"partial\"", "\n", ")", "\n", "\n", "# Send some parameters from config to all lightning loggers", "\n", "log", ".", "info", "(", "\"Logging hyperparameters!\"", ")", "\n", "utils", ".", "log_hyperparameters", "(", "\n", "config", "=", "config", ",", "\n", "model", "=", "model", ",", "\n", "datamodule", "=", "datamodule", ",", "\n", "trainer", "=", "trainer", ",", "\n", "callbacks", "=", "callbacks", ",", "\n", "logger", "=", "logger", ",", "\n", ")", "\n", "\n", "# Train the model", "\n", "log", ".", "info", "(", "\"Starting training!\"", ")", "\n", "trainer", ".", "fit", "(", "model", "=", "model", ",", "datamodule", "=", "datamodule", ")", "\n", "\n", "# Evaluate model on test set after training", "\n", "if", "not", "config", ".", "trainer", ".", "get", "(", "\"fast_dev_run\"", ")", ":", "\n", "        ", "log", ".", "info", "(", "\"Starting testing!\"", ")", "\n", "trainer", ".", "test", "(", ")", "\n", "\n", "# Make sure everything closed properly", "\n", "", "log", ".", "info", "(", "\"Finalizing!\"", ")", "\n", "utils", ".", "finish", "(", "\n", "config", "=", "config", ",", "\n", "model", "=", "model", ",", "\n", "datamodule", "=", "datamodule", ",", "\n", "trainer", "=", "trainer", ",", "\n", "callbacks", "=", "callbacks", ",", "\n", "logger", "=", "logger", ",", "\n", ")", "\n", "\n", "# Print path to best checkpoint", "\n", "log", ".", "info", "(", "f\"Best checkpoint path:\\n{trainer.checkpoint_callback.best_model_path}\"", ")", "\n", "\n", "# Return metric score for hyperparameter optimization", "\n", "optimized_metric", "=", "config", ".", "get", "(", "\"optimized_metric\"", ")", "\n", "if", "optimized_metric", ":", "\n", "        ", "return", "trainer", ".", "callback_metrics", "[", "optimized_metric", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kuielab_mdx-net.utils.data_augmentation.main": [[16, 40], ["data_augmentation.save_shifted_dataset", "data_augmentation.save_shifted_dataset", "data_augmentation.save_shifted_dataset"], "function", ["home.repos.pwc.inspect_result.kuielab_mdx-net.utils.data_augmentation.save_shifted_dataset", "home.repos.pwc.inspect_result.kuielab_mdx-net.utils.data_augmentation.save_shifted_dataset", "home.repos.pwc.inspect_result.kuielab_mdx-net.utils.data_augmentation.save_shifted_dataset"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "data_root", "=", "args", ".", "data_dir", "\n", "train", "=", "args", ".", "train", "\n", "test", "=", "args", ".", "test", "\n", "valid", "=", "args", ".", "valid", "\n", "\n", "musdb_train_path", "=", "data_root", "+", "'train/'", "\n", "musdb_test_path", "=", "data_root", "+", "'test/'", "\n", "musdb_valid_path", "=", "data_root", "+", "'valid/'", "\n", "\n", "mix_name", "=", "'mixture'", "\n", "\n", "P", "=", "[", "-", "3", ",", "-", "2", ",", "-", "1", ",", "0", ",", "1", ",", "2", ",", "3", "]", "# pitch shift amounts (in semitones)", "\n", "T", "=", "[", "-", "30", ",", "-", "20", ",", "-", "10", ",", "0", ",", "10", ",", "20", ",", "30", "]", "# time stretch amounts (10 means 10% slower)", "\n", "\n", "for", "p", "in", "P", ":", "\n", "        ", "for", "t", "in", "T", ":", "\n", "            ", "if", "not", "(", "p", "==", "0", "and", "t", "==", "0", ")", ":", "\n", "                ", "if", "train", ":", "\n", "                    ", "save_shifted_dataset", "(", "p", ",", "t", ",", "musdb_train_path", ")", "\n", "", "if", "valid", ":", "\n", "                    ", "save_shifted_dataset", "(", "p", ",", "t", ",", "musdb_valid_path", ")", "\n", "", "if", "test", ":", "\n", "                    ", "save_shifted_dataset", "(", "p", ",", "t", ",", "musdb_test_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.utils.data_augmentation.shift": [[42, 84], ["tempfile.NamedTemporaryFile", "tempfile.NamedTemporaryFile", "soundfile.write", "soundfile.read", "subprocess.run", "wav.float", "i16_pcm().t().numpy", "RuntimeError", "i16_pcm().t", "error.stderr.decode", "data_augmentation.shift.i16_pcm"], "function", ["home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.music_demixing.MusicDemixingPredictor.run"], ["", "", "", "", "", "def", "shift", "(", "wav", ",", "pitch", ",", "tempo", ",", "voice", "=", "False", ",", "quick", "=", "False", ",", "samplerate", "=", "44100", ")", ":", "\n", "    ", "def", "i16_pcm", "(", "wav", ")", ":", "\n", "        ", "if", "wav", ".", "dtype", "==", "np", ".", "int16", ":", "\n", "            ", "return", "wav", "\n", "", "return", "(", "wav", "*", "2", "**", "15", ")", ".", "clamp_", "(", "-", "2", "**", "15", ",", "2", "**", "15", "-", "1", ")", ".", "short", "(", ")", "\n", "\n", "", "def", "f32_pcm", "(", "wav", ")", ":", "\n", "        ", "if", "wav", ".", "dtype", "==", "np", ".", "float", ":", "\n", "            ", "return", "wav", "\n", "", "return", "wav", ".", "float", "(", ")", "/", "2", "**", "15", "\n", "\n", "", "\"\"\"\n    tempo is a relative delta in percentage, so tempo=10 means tempo at 110%!\n    pitch is in semi tones.\n    Requires `soundstretch` to be installed, see\n    https://www.surina.net/soundtouch/soundstretch.html\n    \"\"\"", "\n", "\n", "inputfile", "=", "tempfile", ".", "NamedTemporaryFile", "(", "suffix", "=", "\".wav\"", ")", "\n", "outfile", "=", "tempfile", ".", "NamedTemporaryFile", "(", "suffix", "=", "\".wav\"", ")", "\n", "\n", "sf", ".", "write", "(", "inputfile", ".", "name", ",", "data", "=", "i16_pcm", "(", "wav", ")", ".", "t", "(", ")", ".", "numpy", "(", ")", ",", "samplerate", "=", "samplerate", ",", "format", "=", "'WAV'", ")", "\n", "command", "=", "[", "\n", "\"soundstretch\"", ",", "\n", "inputfile", ".", "name", ",", "\n", "outfile", ".", "name", ",", "\n", "f\"-pitch={pitch}\"", ",", "\n", "f\"-tempo={tempo:.6f}\"", ",", "\n", "]", "\n", "if", "quick", ":", "\n", "        ", "command", "+=", "[", "\"-quick\"", "]", "\n", "", "if", "voice", ":", "\n", "        ", "command", "+=", "[", "\"-speech\"", "]", "\n", "", "try", ":", "\n", "        ", "sp", ".", "run", "(", "command", ",", "capture_output", "=", "True", ",", "check", "=", "True", ")", "\n", "", "except", "sp", ".", "CalledProcessError", "as", "error", ":", "\n", "        ", "raise", "RuntimeError", "(", "f\"Could not change bpm because {error.stderr.decode('utf-8')}\"", ")", "\n", "", "wav", ",", "sr", "=", "sf", ".", "read", "(", "outfile", ".", "name", ",", "dtype", "=", "'float32'", ")", "\n", "# wav = np.float32(wav)", "\n", "# wav = f32_pcm(torch.from_numpy(wav).t())", "\n", "assert", "sr", "==", "samplerate", "\n", "return", "wav", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.utils.data_augmentation.save_shifted_dataset": [[86, 106], ["list", "tqdm.tqdm", "os.mkdir", "filter", "sorted", "os.mkdir", "data_augmentation.load_wav", "data_augmentation.shift", "soundfile.write", "os.path.isdir", "os.listdir", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.kuielab_mdx-net.utils.utils.load_wav", "home.repos.pwc.inspect_result.kuielab_mdx-net.utils.data_augmentation.shift"], ["", "def", "save_shifted_dataset", "(", "delta_pitch", ",", "delta_tempo", ",", "data_path", ")", ":", "\n", "    ", "out_path", "=", "data_path", "[", ":", "-", "1", "]", "+", "f'_p={delta_pitch}_t={delta_tempo}/'", "\n", "try", ":", "\n", "        ", "os", ".", "mkdir", "(", "out_path", ")", "\n", "", "except", "FileExistsError", ":", "\n", "        ", "pass", "\n", "", "track_names", "=", "list", "(", "filter", "(", "lambda", "x", ":", "os", ".", "path", ".", "isdir", "(", "f'{data_path}/{x}'", ")", ",", "sorted", "(", "os", ".", "listdir", "(", "data_path", ")", ")", ")", ")", "\n", "for", "track_name", "in", "tqdm", "(", "track_names", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "mkdir", "(", "f'{out_path}/{track_name}'", ")", "\n", "", "except", "FileExistsError", ":", "\n", "            ", "pass", "\n", "", "for", "s_name", "in", "source_names", ":", "\n", "            ", "source", "=", "load_wav", "(", "f'{data_path}/{track_name}/{s_name}.wav'", ")", "\n", "shifted", "=", "shift", "(", "\n", "torch", ".", "tensor", "(", "source", ")", ",", "\n", "delta_pitch", ",", "\n", "delta_tempo", ",", "\n", "voice", "=", "s_name", "==", "'vocals'", ")", "\n", "sf", ".", "write", "(", "f'{out_path}/{track_name}/{s_name}.wav'", ",", "shifted", ",", "samplerate", "=", "sample_rate", ",", "format", "=", "'WAV'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.utils.data_augmentation.load_wav": [[108, 110], ["soundfile.read"], "function", ["None"], ["", "", "", "def", "load_wav", "(", "path", ",", "sr", "=", "None", ")", ":", "\n", "    ", "return", "sf", ".", "read", "(", "path", ",", "samplerate", "=", "sr", ",", "dtype", "=", "'float32'", ")", "[", "0", "]", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.utils.utils.sdr": [[17, 20], ["numpy.sum", "numpy.sum", "numpy.log10"], "function", ["None"], ["def", "sdr", "(", "est", ",", "ref", ")", ":", "\n", "    ", "ratio", "=", "np", ".", "sum", "(", "ref", "**", "2", ")", "/", "np", ".", "sum", "(", "(", "ref", "-", "est", ")", "**", "2", ")", "\n", "return", "10", "*", "np", ".", "log10", "(", "ratio", "+", "1e-10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.utils.utils.load_wav": [[22, 28], ["numpy.random.randint", "soundfile.read", "soundfile.read"], "function", ["None"], ["", "def", "load_wav", "(", "path", ",", "track_length", "=", "None", ",", "chunk_size", "=", "None", ")", ":", "\n", "    ", "if", "track_length", "is", "None", ":", "\n", "        ", "return", "sf", ".", "read", "(", "path", ",", "dtype", "=", "'float32'", ")", "[", "0", "]", ".", "T", "\n", "", "else", ":", "\n", "        ", "s", "=", "np", ".", "random", ".", "randint", "(", "track_length", "-", "chunk_size", ")", "\n", "return", "sf", ".", "read", "(", "path", ",", "dtype", "=", "'float32'", ",", "start", "=", "s", ",", "frames", "=", "chunk_size", ")", "[", "0", "]", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.utils.utils.get_logger": [[30, 42], ["logging.getLogger", "logging.getLogger.setLevel", "setattr", "pytorch_lightning.utilities.rank_zero_only", "getattr"], "function", ["None"], ["", "", "def", "get_logger", "(", "name", "=", "__name__", ",", "level", "=", "logging", ".", "INFO", ")", "->", "logging", ".", "Logger", ":", "\n", "    ", "\"\"\"Initializes multi-GPU-friendly python logger.\"\"\"", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "level", ")", "\n", "\n", "# this ensures all logging levels get marked with the rank zero decorator", "\n", "# otherwise logs would get multiplied for each GPU process in multi-GPU setup", "\n", "for", "level", "in", "(", "\"debug\"", ",", "\"info\"", ",", "\"warning\"", ",", "\"error\"", ",", "\"exception\"", ",", "\"fatal\"", ",", "\"critical\"", ")", ":", "\n", "        ", "setattr", "(", "logger", ",", "level", ",", "rank_zero_only", "(", "getattr", "(", "logger", ",", "level", ")", ")", ")", "\n", "\n", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.utils.utils.extras": [[44, 94], ["utils.get_logger", "omegaconf.OmegaConf.set_struct", "config.get", "config.get", "config.trainer.get", "omegaconf.OmegaConf.set_struct", "get_logger.info", "warnings.filterwarnings", "warnings.filterwarnings", "get_logger.info", "get_logger.info", "config.trainer.get", "config.datamodule.get", "config.datamodule.get"], "function", ["home.repos.pwc.inspect_result.kuielab_mdx-net.utils.utils.get_logger"], ["", "def", "extras", "(", "config", ":", "DictConfig", ")", "->", "None", ":", "\n", "    ", "\"\"\"A couple of optional utilities, controlled by main config file:\n    - disabling warnings\n    - easier access to debug mode\n    - forcing debug friendly configuration\n    - forcing multi-gpu friendly configuration\n\n    Modifies DictConfig in place.\n\n    Args:\n        config (DictConfig): Configuration composed by Hydra.\n    \"\"\"", "\n", "\n", "log", "=", "get_logger", "(", ")", "\n", "\n", "# enable adding new keys to config", "\n", "OmegaConf", ".", "set_struct", "(", "config", ",", "False", ")", "\n", "\n", "# disable python warnings if <config.ignore_warnings=True>", "\n", "if", "config", ".", "get", "(", "\"ignore_warnings\"", ")", ":", "\n", "        ", "log", ".", "info", "(", "\"Disabling python warnings! <config.ignore_warnings=True>\"", ")", "\n", "warnings", ".", "filterwarnings", "(", "\"ignore\"", ")", "\n", "\n", "# set <config.trainer.fast_dev_run=True> if <config.debug=True>", "\n", "", "if", "config", ".", "get", "(", "\"debug\"", ")", ":", "\n", "        ", "log", ".", "info", "(", "\"Running in debug mode! <config.debug=True>\"", ")", "\n", "config", ".", "trainer", ".", "fast_dev_run", "=", "True", "\n", "\n", "# force debugger friendly configuration if <config.trainer.fast_dev_run=True>", "\n", "", "if", "config", ".", "trainer", ".", "get", "(", "\"fast_dev_run\"", ")", ":", "\n", "        ", "log", ".", "info", "(", "\"Forcing debugger friendly configuration! <config.trainer.fast_dev_run=True>\"", ")", "\n", "# Debuggers don't like GPUs or multiprocessing", "\n", "if", "config", ".", "trainer", ".", "get", "(", "\"gpus\"", ")", ":", "\n", "            ", "config", ".", "trainer", ".", "num_valid_process", "=", "0", "\n", "", "if", "config", ".", "datamodule", ".", "get", "(", "\"pin_memory\"", ")", ":", "\n", "            ", "config", ".", "datamodule", ".", "pin_memory", "=", "False", "\n", "", "if", "config", ".", "datamodule", ".", "get", "(", "\"num_workers\"", ")", ":", "\n", "            ", "config", ".", "datamodule", ".", "num_workers", "=", "0", "\n", "\n", "# force multi-gpu friendly configuration if <config.trainer.accelerator=ddp>", "\n", "# accelerator = config.trainer.get(\"accelerator\")", "\n", "# if accelerator in [\"ddp\", \"ddp_spawn\", \"dp\", \"ddp2\"]:", "\n", "#     log.info(f\"Forcing ddp friendly configuration! <config.trainer.accelerator={accelerator}>\")", "\n", "#     if config.datamodule.get(\"num_workers\"):", "\n", "#         config.datamodule.num_workers = 0", "\n", "#     if config.datamodule.get(\"pin_memory\"):", "\n", "#         config.datamodule.pin_memory = False", "\n", "\n", "# disable adding new keys to config", "\n", "", "", "OmegaConf", ".", "set_struct", "(", "config", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.utils.utils.print_config": [[96, 132], ["rich.tree.Tree", "rich.tree.Tree", "rich.print", "rich.print", "rich.tree.Tree.add", "config.get", "str", "isinstance", "tree.add.add", "omegaconf.OmegaConf.to_yaml", "rich.syntax.Syntax", "rich.syntax.Syntax"], "function", ["None"], ["", "@", "rank_zero_only", "\n", "def", "print_config", "(", "\n", "config", ":", "DictConfig", ",", "\n", "fields", ":", "Sequence", "[", "str", "]", "=", "(", "\n", "\"trainer\"", ",", "\n", "\"model\"", ",", "\n", "\"datamodule\"", ",", "\n", "\"callbacks\"", ",", "\n", "\"logger\"", ",", "\n", "\"seed\"", ",", "\n", ")", ",", "\n", "resolve", ":", "bool", "=", "True", ",", "\n", ")", "->", "None", ":", "\n", "    ", "\"\"\"Prints content of DictConfig using Rich library and its tree structure.\n\n    Args:\n        config (DictConfig): Configuration composed by Hydra.\n        fields (Sequence[str], optional): Determines which main fields from config will\n        be printed and in what order.\n        resolve (bool, optional): Whether to resolve reference fields of DictConfig.\n    \"\"\"", "\n", "\n", "style", "=", "\"dim\"", "\n", "tree", "=", "rich", ".", "tree", ".", "Tree", "(", "\":gear: CONFIG\"", ",", "style", "=", "style", ",", "guide_style", "=", "style", ")", "\n", "\n", "for", "field", "in", "fields", ":", "\n", "        ", "branch", "=", "tree", ".", "add", "(", "field", ",", "style", "=", "style", ",", "guide_style", "=", "style", ")", "\n", "\n", "config_section", "=", "config", ".", "get", "(", "field", ")", "\n", "branch_content", "=", "str", "(", "config_section", ")", "\n", "if", "isinstance", "(", "config_section", ",", "DictConfig", ")", ":", "\n", "            ", "branch_content", "=", "OmegaConf", ".", "to_yaml", "(", "config_section", ",", "resolve", "=", "resolve", ")", "\n", "\n", "", "branch", ".", "add", "(", "rich", ".", "syntax", ".", "Syntax", "(", "branch_content", ",", "\"yaml\"", ")", ")", "\n", "\n", "", "rich", ".", "print", "(", "tree", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.utils.utils.empty": [[134, 136], ["None"], "function", ["None"], ["", "def", "empty", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.utils.utils.log_hyperparameters": [[138, 178], ["sum", "sum", "sum", "trainer.logger.log_hyperparams", "p.numel", "p.numel", "p.numel", "model.parameters", "model.parameters", "model.parameters"], "function", ["None"], ["", "@", "rank_zero_only", "\n", "def", "log_hyperparameters", "(", "\n", "config", ":", "DictConfig", ",", "\n", "model", ":", "pl", ".", "LightningModule", ",", "\n", "datamodule", ":", "pl", ".", "LightningDataModule", ",", "\n", "trainer", ":", "pl", ".", "Trainer", ",", "\n", "callbacks", ":", "List", "[", "pl", ".", "Callback", "]", ",", "\n", "logger", ":", "List", "[", "pl", ".", "loggers", ".", "LightningLoggerBase", "]", ",", "\n", ")", "->", "None", ":", "\n", "    ", "\"\"\"This method controls which parameters from Hydra config are saved by Lightning loggers.\n\n    Additionaly saves:\n        - number of trainable model parameters\n    \"\"\"", "\n", "\n", "hparams", "=", "{", "}", "\n", "\n", "# choose which parts of hydra config will be saved to loggers", "\n", "hparams", "[", "\"trainer\"", "]", "=", "config", "[", "\"trainer\"", "]", "\n", "hparams", "[", "\"model\"", "]", "=", "config", "[", "\"model\"", "]", "\n", "hparams", "[", "\"datamodule\"", "]", "=", "config", "[", "\"datamodule\"", "]", "\n", "if", "\"callbacks\"", "in", "config", ":", "\n", "        ", "hparams", "[", "\"callbacks\"", "]", "=", "config", "[", "\"callbacks\"", "]", "\n", "\n", "# save number of model parameters", "\n", "", "hparams", "[", "\"model/params_total\"", "]", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", ")", "\n", "hparams", "[", "\"model/params_trainable\"", "]", "=", "sum", "(", "\n", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", "\n", ")", "\n", "hparams", "[", "\"model/params_not_trainable\"", "]", "=", "sum", "(", "\n", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "not", "p", ".", "requires_grad", "\n", ")", "\n", "\n", "# send hparams to all loggers", "\n", "trainer", ".", "logger", ".", "log_hyperparams", "(", "hparams", ")", "\n", "\n", "# disable logging any more hyperparameters for all loggers", "\n", "# this is just a trick to prevent trainer from logging hparams of model,", "\n", "# since we already did that above", "\n", "trainer", ".", "logger", ".", "log_hyperparams", "=", "empty", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.utils.utils.finish": [[180, 194], ["isinstance", "wandb.finish"], "function", ["home.repos.pwc.inspect_result.kuielab_mdx-net.utils.utils.finish"], ["", "def", "finish", "(", "\n", "config", ":", "DictConfig", ",", "\n", "model", ":", "pl", ".", "LightningModule", ",", "\n", "datamodule", ":", "pl", ".", "LightningDataModule", ",", "\n", "trainer", ":", "pl", ".", "Trainer", ",", "\n", "callbacks", ":", "List", "[", "pl", ".", "Callback", "]", ",", "\n", "logger", ":", "List", "[", "pl", ".", "loggers", ".", "LightningLoggerBase", "]", ",", "\n", ")", "->", "None", ":", "\n", "    ", "\"\"\"Makes sure everything closed properly.\"\"\"", "\n", "\n", "# without this sweeps with wandb logger might crash!", "\n", "for", "lg", "in", "logger", ":", "\n", "        ", "if", "isinstance", "(", "lg", ",", "WandbLogger", ")", ":", "\n", "            ", "wandb", ".", "finish", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.utils.utils.wandb_login": [[196, 198], ["wandb.login"], "function", ["None"], ["", "", "", "def", "wandb_login", "(", "key", ")", ":", "\n", "    ", "wandb", ".", "login", "(", "key", "=", "key", ")", "", "", ""]], "home.repos.pwc.inspect_result.kuielab_mdx-net.datamodules.musdb_datamodule.MusdbDataModule.__init__": [[27, 78], ["pytorch_lightning.LightningDataModule.__init__", "pathlib.Path", "musdb_datamodule.MusdbDataModule.data_dir.joinpath", "musdb_datamodule.MusdbDataModule.data_dir.joinpath", "os.path.exists", "os.mkdir", "os.listdir", "musdb_datamodule.MusdbDataModule.joinpath().exists", "set", "set", "move", "musdb_datamodule.MusdbDataModule.joinpath", "musdb_datamodule.MusdbDataModule.joinpath", "musdb_datamodule.MusdbDataModule.joinpath"], "methods", ["home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.music_demixing.MusicDemixingPredictor.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "data_dir", ":", "str", ",", "\n", "aug_params", ",", "\n", "target_name", ":", "str", ",", "\n", "overlap", ":", "int", ",", "\n", "hop_length", ":", "int", ",", "\n", "dim_t", ":", "int", ",", "\n", "sample_rate", ":", "int", ",", "\n", "batch_size", ":", "int", ",", "\n", "num_workers", ":", "int", ",", "\n", "pin_memory", ":", "bool", ",", "\n", "external_datasets", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "data_dir", "=", "Path", "(", "data_dir", ")", "\n", "self", ".", "target_name", "=", "target_name", "\n", "self", ".", "aug_params", "=", "aug_params", "\n", "self", ".", "external_datasets", "=", "external_datasets", "\n", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "num_workers", "=", "num_workers", "\n", "self", ".", "pin_memory", "=", "pin_memory", "\n", "\n", "# audio-related", "\n", "self", ".", "hop_length", "=", "hop_length", "\n", "self", ".", "sample_rate", "=", "sample_rate", "\n", "\n", "# derived", "\n", "self", ".", "chunk_size", "=", "hop_length", "*", "(", "dim_t", "-", "1", ")", "\n", "self", ".", "overlap", "=", "overlap", "\n", "\n", "self", ".", "data_train", ":", "Optional", "[", "Dataset", "]", "=", "None", "\n", "self", ".", "data_val", ":", "Optional", "[", "Dataset", "]", "=", "None", "\n", "self", ".", "data_test", ":", "Optional", "[", "Dataset", "]", "=", "None", "\n", "\n", "trainset_path", "=", "self", ".", "data_dir", ".", "joinpath", "(", "'train'", ")", "\n", "validset_path", "=", "self", ".", "data_dir", ".", "joinpath", "(", "'valid'", ")", "\n", "\n", "# create validation split", "\n", "if", "not", "exists", "(", "validset_path", ")", ":", "\n", "            ", "from", "shutil", "import", "move", "\n", "os", ".", "mkdir", "(", "validset_path", ")", "\n", "for", "track", "in", "kwargs", "[", "'validation_set'", "]", ":", "\n", "                ", "if", "trainset_path", ".", "joinpath", "(", "track", ")", ".", "exists", "(", ")", ":", "\n", "                    ", "move", "(", "trainset_path", ".", "joinpath", "(", "track", ")", ",", "validset_path", ".", "joinpath", "(", "track", ")", ")", "\n", "", "", "", "else", ":", "\n", "            ", "valid_files", "=", "os", ".", "listdir", "(", "validset_path", ")", "\n", "assert", "set", "(", "valid_files", ")", "==", "set", "(", "kwargs", "[", "'validation_set'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.datamodules.musdb_datamodule.MusdbDataModule.setup": [[79, 92], ["src.datamodules.datasets.musdb.MusdbTrainDataset", "src.datamodules.datasets.musdb.MusdbValidDataset"], "methods", ["None"], ["", "", "def", "setup", "(", "self", ",", "stage", ":", "Optional", "[", "str", "]", "=", "None", ")", ":", "\n", "        ", "\"\"\"Load data. Set variables: self.data_train, self.data_val, self.data_test.\"\"\"", "\n", "self", ".", "data_train", "=", "MusdbTrainDataset", "(", "self", ".", "data_dir", ",", "\n", "self", ".", "chunk_size", ",", "\n", "self", ".", "target_name", ",", "\n", "self", ".", "aug_params", ",", "\n", "self", ".", "external_datasets", ")", "\n", "\n", "self", ".", "data_val", "=", "MusdbValidDataset", "(", "self", ".", "data_dir", ",", "\n", "self", ".", "chunk_size", ",", "\n", "self", ".", "target_name", ",", "\n", "self", ".", "overlap", ",", "\n", "self", ".", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.datamodules.musdb_datamodule.MusdbDataModule.train_dataloader": [[93, 100], ["torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "train_dataloader", "(", "self", ")", ":", "\n", "        ", "return", "DataLoader", "(", "\n", "dataset", "=", "self", ".", "data_train", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ",", "\n", "pin_memory", "=", "self", ".", "pin_memory", ",", "\n", "shuffle", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.datamodules.musdb_datamodule.MusdbDataModule.val_dataloader": [[102, 109], ["torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "val_dataloader", "(", "self", ")", ":", "\n", "        ", "return", "DataLoader", "(", "\n", "dataset", "=", "self", ".", "data_val", ",", "\n", "batch_size", "=", "1", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ",", "\n", "pin_memory", "=", "self", ".", "pin_memory", ",", "\n", "shuffle", "=", "False", ",", "\n", ")", ""]], "home.repos.pwc.inspect_result.kuielab_mdx-net.datasets.musdb.MusdbDataset.__init__": [[42, 46], ["pathlib.Path"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data_dir", ",", "chunk_size", ")", ":", "\n", "        ", "self", ".", "source_names", "=", "[", "'bass'", ",", "'drums'", ",", "'other'", ",", "'vocals'", "]", "\n", "self", ".", "chunk_size", "=", "chunk_size", "\n", "self", ".", "musdb_path", "=", "Path", "(", "data_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.datasets.musdb.MusdbTrainDataset.__init__": [[49, 94], ["musdb.MusdbDataset.__init__", "musdb.check_target_name", "enumerate", "musdb.MusdbTrainDataset.musdb_path.joinpath().exists", "os.mkdir", "raw_datasets.append", "range", "tqdm.tqdm.tqdm", "sum", "musdb.MusdbTrainDataset.musdb_path.joinpath", "musdb.MusdbTrainDataset.musdb_path.joinpath", "range", "zip", "torch.load", "musdb.MusdbTrainDataset.musdb_path.joinpath", "datasets.append", "metadata_caches.append", "print", "sorted", "torch.save", "musdb.MusdbTrainDataset.musdb_path.joinpath", "musdb.MusdbTrainDataset.musdb_path.joinpath().joinpath", "os.listdir", "dataset.joinpath", "torch.load.append", "musdb.MusdbTrainDataset.musdb_path.joinpath", "src.utils.utils.load_wav", "dataset.joinpath.joinpath"], "methods", ["home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.music_demixing.MusicDemixingPredictor.__init__", "home.repos.pwc.inspect_result.kuielab_mdx-net.datasets.musdb.check_target_name", "home.repos.pwc.inspect_result.kuielab_mdx-net.utils.utils.load_wav"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "chunk_size", ",", "target_name", ",", "aug_params", ",", "external_datasets", ")", ":", "\n", "        ", "super", "(", "MusdbTrainDataset", ",", "self", ")", ".", "__init__", "(", "data_dir", ",", "chunk_size", ")", "\n", "\n", "self", ".", "target_name", "=", "target_name", "\n", "check_target_name", "(", "self", ".", "target_name", ",", "self", ".", "source_names", ")", "\n", "\n", "if", "not", "self", ".", "musdb_path", ".", "joinpath", "(", "'metadata'", ")", ".", "exists", "(", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "self", ".", "musdb_path", ".", "joinpath", "(", "'metadata'", ")", ")", "\n", "\n", "", "splits", "=", "[", "'train'", "]", "\n", "if", "external_datasets", "is", "not", "None", ":", "\n", "            ", "splits", "+=", "external_datasets", "\n", "\n", "# collect paths for datasets and metadata (track names and duration)", "\n", "", "datasets", ",", "metadata_caches", "=", "[", "]", ",", "[", "]", "\n", "raw_datasets", "=", "[", "]", "# un-augmented datasets", "\n", "for", "split", "in", "splits", ":", "\n", "            ", "raw_datasets", ".", "append", "(", "self", ".", "musdb_path", ".", "joinpath", "(", "split", ")", ")", "\n", "max_pitch", ",", "max_tempo", "=", "aug_params", "\n", "for", "p", "in", "range", "(", "-", "max_pitch", ",", "max_pitch", "+", "1", ")", ":", "\n", "                ", "for", "t", "in", "range", "(", "-", "max_tempo", ",", "max_tempo", "+", "1", ",", "10", ")", ":", "\n", "                    ", "aug_split", "=", "split", "if", "p", "==", "t", "==", "0", "else", "split", "+", "f'_p={p}_t={t}'", "\n", "datasets", ".", "append", "(", "self", ".", "musdb_path", ".", "joinpath", "(", "aug_split", ")", ")", "\n", "metadata_caches", ".", "append", "(", "self", ".", "musdb_path", ".", "joinpath", "(", "'metadata'", ")", ".", "joinpath", "(", "aug_split", "+", "'.pkl'", ")", ")", "\n", "\n", "# collect all track names and their duration", "\n", "", "", "", "self", ".", "metadata", "=", "[", "]", "\n", "raw_track_lengths", "=", "[", "]", "# for calculating epoch size", "\n", "for", "i", ",", "(", "dataset", ",", "metadata_cache", ")", "in", "enumerate", "(", "tqdm", "(", "zip", "(", "datasets", ",", "metadata_caches", ")", ")", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "metadata", "=", "torch", ".", "load", "(", "metadata_cache", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "                ", "print", "(", "'creating metadata for'", ",", "dataset", ")", "\n", "metadata", "=", "[", "]", "\n", "for", "track_name", "in", "sorted", "(", "os", ".", "listdir", "(", "dataset", ")", ")", ":", "\n", "                    ", "track_path", "=", "dataset", ".", "joinpath", "(", "track_name", ")", "\n", "track_length", "=", "load_wav", "(", "track_path", ".", "joinpath", "(", "'vocals.wav'", ")", ")", ".", "shape", "[", "-", "1", "]", "\n", "metadata", ".", "append", "(", "(", "track_path", ",", "track_length", ")", ")", "\n", "", "torch", ".", "save", "(", "metadata", ",", "metadata_cache", ")", "\n", "\n", "", "self", ".", "metadata", "+=", "metadata", "\n", "if", "dataset", "in", "raw_datasets", ":", "\n", "                ", "raw_track_lengths", "+=", "[", "length", "for", "path", ",", "length", "in", "metadata", "]", "\n", "\n", "", "", "self", ".", "epoch_size", "=", "sum", "(", "raw_track_lengths", ")", "//", "self", ".", "chunk_size", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.datasets.musdb.MusdbTrainDataset.__getitem__": [[95, 113], ["sum", "random.choice", "src.utils.utils.load_wav", "sources.append", "torch.tensor", "torch.tensor", "track_path.joinpath", "musdb.MusdbTrainDataset.source_names.index"], "methods", ["home.repos.pwc.inspect_result.kuielab_mdx-net.utils.utils.load_wav"], ["", "def", "__getitem__", "(", "self", ",", "_", ")", ":", "\n", "        ", "sources", "=", "[", "]", "\n", "for", "source_name", "in", "self", ".", "source_names", ":", "\n", "            ", "track_path", ",", "track_length", "=", "random", ".", "choice", "(", "self", ".", "metadata", ")", "# random mixing between tracks", "\n", "source", "=", "load_wav", "(", "track_path", ".", "joinpath", "(", "source_name", "+", "'.wav'", ")", ",", "\n", "track_length", "=", "track_length", ",", "chunk_size", "=", "self", ".", "chunk_size", ")", "\n", "sources", ".", "append", "(", "source", ")", "\n", "\n", "", "mix", "=", "sum", "(", "sources", ")", "\n", "\n", "if", "self", ".", "target_name", "==", "'all'", ":", "\n", "# Targets for models that separate all four sources (ex. Demucs).", "\n", "# This adds additional 'source' dimension => batch_shape=[batch, source, channel, time]", "\n", "            ", "target", "=", "sources", "\n", "", "else", ":", "\n", "            ", "target", "=", "sources", "[", "self", ".", "source_names", ".", "index", "(", "self", ".", "target_name", ")", "]", "\n", "\n", "", "return", "torch", ".", "tensor", "(", "mix", ")", ",", "torch", ".", "tensor", "(", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.datasets.musdb.MusdbTrainDataset.__len__": [[114, 116], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "epoch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.datasets.musdb.MusdbValidDataset.__init__": [[120, 132], ["musdb.MusdbDataset.__init__", "musdb.check_target_name", "musdb.MusdbValidDataset.musdb_path.joinpath", "musdb.MusdbValidDataset.joinpath", "os.listdir"], "methods", ["home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.music_demixing.MusicDemixingPredictor.__init__", "home.repos.pwc.inspect_result.kuielab_mdx-net.datasets.musdb.check_target_name"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "chunk_size", ",", "target_name", ",", "overlap", ",", "batch_size", ")", ":", "\n", "        ", "super", "(", "MusdbValidDataset", ",", "self", ")", ".", "__init__", "(", "data_dir", ",", "chunk_size", ")", "\n", "\n", "self", ".", "target_name", "=", "target_name", "\n", "check_target_name", "(", "self", ".", "target_name", ",", "self", ".", "source_names", ")", "\n", "\n", "self", ".", "overlap", "=", "overlap", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n", "musdb_valid_path", "=", "self", ".", "musdb_path", ".", "joinpath", "(", "'valid'", ")", "\n", "self", ".", "track_paths", "=", "[", "musdb_valid_path", ".", "joinpath", "(", "track_name", ")", "\n", "for", "track_name", "in", "os", ".", "listdir", "(", "musdb_valid_path", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.datasets.musdb.MusdbValidDataset.__getitem__": [[133, 154], ["src.utils.utils.load_wav", "numpy.zeros", "numpy.zeros", "numpy.concatenate", "torch.tensor().split", "musdb.MusdbValidDataset.track_paths[].joinpath", "src.utils.utils.load_wav", "torch.tensor", "src.utils.utils.load_wav", "musdb.MusdbValidDataset.track_paths[].joinpath", "range", "torch.tensor", "musdb.MusdbValidDataset.track_paths[].joinpath"], "methods", ["home.repos.pwc.inspect_result.kuielab_mdx-net.utils.utils.load_wav", "home.repos.pwc.inspect_result.kuielab_mdx-net.utils.utils.load_wav", "home.repos.pwc.inspect_result.kuielab_mdx-net.utils.utils.load_wav"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "mix", "=", "load_wav", "(", "self", ".", "track_paths", "[", "index", "]", ".", "joinpath", "(", "'mixture.wav'", ")", ")", "\n", "\n", "if", "self", ".", "target_name", "==", "'all'", ":", "\n", "# Targets for models that separate all four sources (ex. Demucs).", "\n", "# This adds additional 'source' dimension => batch_shape=[batch, source, channel, time]", "\n", "            ", "target", "=", "[", "load_wav", "(", "self", ".", "track_paths", "[", "index", "]", ".", "joinpath", "(", "source_name", "+", "'.wav'", ")", ")", "\n", "for", "source_name", "in", "self", ".", "source_names", "]", "\n", "", "else", ":", "\n", "            ", "target", "=", "load_wav", "(", "self", ".", "track_paths", "[", "index", "]", ".", "joinpath", "(", "self", ".", "target_name", "+", "'.wav'", ")", ")", "\n", "\n", "", "chunk_output_size", "=", "self", ".", "chunk_size", "-", "2", "*", "self", ".", "overlap", "\n", "left_pad", "=", "np", ".", "zeros", "(", "[", "2", ",", "self", ".", "overlap", "]", ")", "\n", "right_pad", "=", "np", ".", "zeros", "(", "[", "2", ",", "self", ".", "overlap", "+", "chunk_output_size", "-", "(", "mix", ".", "shape", "[", "-", "1", "]", "%", "chunk_output_size", ")", "]", ")", "\n", "mix_padded", "=", "np", ".", "concatenate", "(", "[", "left_pad", ",", "mix", ",", "right_pad", "]", ",", "1", ")", "\n", "\n", "num_chunks", "=", "mix_padded", ".", "shape", "[", "-", "1", "]", "//", "chunk_output_size", "\n", "mix_chunks", "=", "[", "mix_padded", "[", ":", ",", "i", "*", "chunk_output_size", ":", "i", "*", "chunk_output_size", "+", "self", ".", "chunk_size", "]", "\n", "for", "i", "in", "range", "(", "num_chunks", ")", "]", "\n", "mix_chunk_batches", "=", "torch", ".", "tensor", "(", "mix_chunks", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "split", "(", "self", ".", "batch_size", ")", "\n", "return", "mix_chunk_batches", ",", "torch", ".", "tensor", "(", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.datasets.musdb.MusdbValidDataset.__len__": [[155, 157], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "track_paths", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.kuielab_mdx-net.datasets.musdb.check_target_name": [[15, 26], ["print", "exit", "print", "exit"], "function", ["None"], ["def", "check_target_name", "(", "target_name", ",", "source_names", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "assert", "target_name", "is", "not", "None", "\n", "", "except", "AssertionError", ":", "\n", "        ", "print", "(", "'[ERROR] please identify target name. ex) +datamodule.target_name=\"vocals\"'", ")", "\n", "exit", "(", "-", "1", ")", "\n", "", "try", ":", "\n", "        ", "assert", "target_name", "in", "source_names", "or", "target_name", "==", "'all'", "\n", "", "except", "AssertionError", ":", "\n", "        ", "print", "(", "'[ERROR] target name should one of \"bass\", \"drums\", \"other\", \"vocals\", \"all\"'", ")", "\n", "exit", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.datasets.musdb.check_sample_rate": [[28, 37], ["soundfile.read", "print", "print", "exit", "soundfile.read"], "function", ["None"], ["", "", "def", "check_sample_rate", "(", "sr", ",", "sample_track", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "sample_rate", "=", "soundfile", ".", "read", "(", "sample_track", ")", "[", "1", "]", "\n", "assert", "sample_rate", "==", "sr", "\n", "", "except", "AssertionError", ":", "\n", "        ", "sample_rate", "=", "soundfile", ".", "read", "(", "sample_track", ")", "[", "1", "]", "\n", "print", "(", "'[ERROR] sampling rate mismatched'", ")", "\n", "print", "(", "'\\t=> sr in Config file: {}, but sr of data: {}'", ".", "format", "(", "sr", ",", "sample_rate", ")", ")", "\n", "exit", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.callbacks.onnx_callback.MakeONNXCallback.__init__": [[14, 18], ["os.path.exists", "os.mkdir"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dirpath", ":", "str", ")", ":", "\n", "        ", "self", ".", "dirpath", "=", "dirpath", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "dirpath", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "self", ".", "dirpath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.callbacks.onnx_callback.MakeONNXCallback.on_save_checkpoint": [[19, 50], ["super().on_save_checkpoint", "pl_module.__class__", "pl_module.__class__.load_state_dict", "inspect.signature", "pl_module.state_dict", "dict", "os.path.exists", "os.mkdir", "torch.no_grad", "torch.onnx.export", "print", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.kuielab_mdx-net.callbacks.onnx_callback.MakeONNXCallback.on_save_checkpoint"], ["", "", "def", "on_save_checkpoint", "(", "self", ",", "trainer", ":", "'pl.Trainer'", ",", "pl_module", ":", "'pl.LightningModule'", ",", "\n", "checkpoint", ":", "Dict", "[", "str", ",", "Any", "]", ")", "->", "dict", ":", "\n", "        ", "res", "=", "super", "(", ")", ".", "on_save_checkpoint", "(", "trainer", ",", "pl_module", ",", "checkpoint", ")", "\n", "\n", "var", "=", "inspect", ".", "signature", "(", "pl_module", ".", "__init__", ")", ".", "parameters", "\n", "model", "=", "pl_module", ".", "__class__", "(", "**", "dict", "(", "(", "name", ",", "pl_module", ".", "__dict__", "[", "name", "]", ")", "for", "name", "in", "var", ")", ")", "\n", "model", ".", "load_state_dict", "(", "pl_module", ".", "state_dict", "(", ")", ")", "\n", "\n", "target_dir", "=", "'{}epoch_{}'", ".", "format", "(", "self", ".", "dirpath", ",", "pl_module", ".", "current_epoch", ")", "\n", "\n", "try", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "target_dir", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "target_dir", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "torch", ".", "onnx", ".", "export", "(", "model", ",", "\n", "torch", ".", "zeros", "(", "model", ".", "input_sample_shape", ")", ",", "\n", "'{}/{}.onnx'", ".", "format", "(", "target_dir", ",", "model", ".", "target_name", ")", ",", "\n", "export_params", "=", "True", ",", "# store the trained parameter weights inside the model file", "\n", "opset_version", "=", "13", ",", "# the ONNX version to export the model to", "\n", "do_constant_folding", "=", "True", ",", "# whether to execute constant folding for optimization", "\n", "input_names", "=", "[", "'input'", "]", ",", "# the model's input names", "\n", "output_names", "=", "[", "'output'", "]", ",", "# the model's output names", "\n", "dynamic_axes", "=", "{", "'input'", ":", "{", "0", ":", "'batch_size'", "}", ",", "# variable length axes", "\n", "'output'", ":", "{", "0", ":", "'batch_size'", "}", "}", ")", "\n", "", "", "except", ":", "\n", "            ", "print", "(", "'onnx error'", ")", "\n", "", "finally", ":", "\n", "            ", "del", "model", "\n", "\n", "", "return", "res", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kuielab_mdx-net.callbacks.wandb_callbacks.UploadValidTrack.__init__": [[33, 37], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "crop", ":", "int", ",", "upload_after_n_epoch", ":", "int", ")", ":", "\n", "        ", "self", ".", "sample_length", "=", "crop", "*", "44100", "\n", "self", ".", "upload_after_n_epoch", "=", "upload_after_n_epoch", "\n", "self", ".", "len_left_window", "=", "self", ".", "len_right_window", "=", "self", ".", "sample_length", "//", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.callbacks.wandb_callbacks.UploadValidTrack.on_validation_batch_end": [[38, 62], ["wandb_callbacks.get_wandb_logger", "experiment.log", "wandb.Audio"], "methods", ["home.repos.pwc.inspect_result.kuielab_mdx-net.callbacks.wandb_callbacks.get_wandb_logger"], ["", "def", "on_validation_batch_end", "(", "\n", "self", ",", "\n", "trainer", ":", "'pl.Trainer'", ",", "\n", "pl_module", ":", "'pl.LightningModule'", ",", "\n", "outputs", ":", "Optional", "[", "STEP_OUTPUT", "]", ",", "\n", "batch", ":", "Any", ",", "\n", "batch_idx", ":", "int", ",", "\n", "dataloader_idx", ":", "int", ",", "\n", ")", "->", "None", ":", "\n", "        ", "if", "outputs", "is", "None", ":", "\n", "            ", "return", "\n", "", "track_id", "=", "outputs", "[", "'track_id'", "]", "\n", "track", "=", "outputs", "[", "'track'", "]", "\n", "\n", "logger", "=", "get_wandb_logger", "(", "trainer", "=", "trainer", ")", "\n", "experiment", "=", "logger", ".", "experiment", "\n", "if", "pl_module", ".", "current_epoch", "<", "self", ".", "upload_after_n_epoch", ":", "\n", "            ", "return", "None", "\n", "\n", "", "mid", "=", "track", ".", "shape", "[", "-", "1", "]", "//", "2", "\n", "track", "=", "track", "[", ":", ",", "mid", "-", "self", ".", "len_left_window", ":", "mid", "+", "self", ".", "len_right_window", "]", "\n", "\n", "experiment", ".", "log", "(", "{", "'track={}_epoch={}'", ".", "format", "(", "track_id", ",", "pl_module", ".", "current_epoch", ")", ":", "\n", "[", "wandb", ".", "Audio", "(", "track", ".", "T", ",", "sample_rate", "=", "44100", ")", "]", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.callbacks.wandb_callbacks.WatchModel.__init__": [[67, 70], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "log", ":", "str", "=", "\"gradients\"", ",", "log_freq", ":", "int", "=", "100", ")", ":", "\n", "        ", "self", ".", "log", "=", "log", "\n", "self", ".", "log_freq", "=", "log_freq", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.callbacks.wandb_callbacks.WatchModel.on_train_start": [[71, 74], ["wandb_callbacks.get_wandb_logger", "get_wandb_logger.watch"], "methods", ["home.repos.pwc.inspect_result.kuielab_mdx-net.callbacks.wandb_callbacks.get_wandb_logger"], ["", "def", "on_train_start", "(", "self", ",", "trainer", ",", "pl_module", ")", ":", "\n", "        ", "logger", "=", "get_wandb_logger", "(", "trainer", "=", "trainer", ")", "\n", "logger", ".", "watch", "(", "model", "=", "trainer", ".", "model", ",", "log", "=", "self", ".", "log", ",", "log_freq", "=", "self", ".", "log_freq", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.callbacks.wandb_callbacks.UploadCodeAsArtifact.__init__": [[79, 81], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "code_dir", ":", "str", ")", ":", "\n", "        ", "self", ".", "code_dir", "=", "code_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.callbacks.wandb_callbacks.UploadCodeAsArtifact.on_train_start": [[82, 91], ["wandb_callbacks.get_wandb_logger", "wandb.Artifact", "glob.glob", "experiment.use_artifact", "os.path.join", "wandb.Artifact.add_file"], "methods", ["home.repos.pwc.inspect_result.kuielab_mdx-net.callbacks.wandb_callbacks.get_wandb_logger"], ["", "def", "on_train_start", "(", "self", ",", "trainer", ",", "pl_module", ")", ":", "\n", "        ", "logger", "=", "get_wandb_logger", "(", "trainer", "=", "trainer", ")", "\n", "experiment", "=", "logger", ".", "experiment", "\n", "\n", "code", "=", "wandb", ".", "Artifact", "(", "\"project-source\"", ",", "type", "=", "\"code\"", ")", "\n", "for", "path", "in", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "code_dir", ",", "\"**/*.py\"", ")", ",", "recursive", "=", "True", ")", ":", "\n", "            ", "code", ".", "add_file", "(", "path", ")", "\n", "\n", "", "experiment", ".", "use_artifact", "(", "code", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.callbacks.wandb_callbacks.UploadCheckpointsAsArtifact.__init__": [[96, 99], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "ckpt_dir", ":", "str", "=", "\"checkpoints/\"", ",", "upload_best_only", ":", "bool", "=", "False", ")", ":", "\n", "        ", "self", ".", "ckpt_dir", "=", "ckpt_dir", "\n", "self", ".", "upload_best_only", "=", "upload_best_only", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.callbacks.wandb_callbacks.UploadCheckpointsAsArtifact.on_train_end": [[100, 113], ["wandb_callbacks.get_wandb_logger", "wandb.Artifact", "experiment.use_artifact", "wandb.Artifact.add_file", "glob.glob", "os.path.join", "wandb.Artifact.add_file"], "methods", ["home.repos.pwc.inspect_result.kuielab_mdx-net.callbacks.wandb_callbacks.get_wandb_logger"], ["", "def", "on_train_end", "(", "self", ",", "trainer", ",", "pl_module", ")", ":", "\n", "        ", "logger", "=", "get_wandb_logger", "(", "trainer", "=", "trainer", ")", "\n", "experiment", "=", "logger", ".", "experiment", "\n", "\n", "ckpts", "=", "wandb", ".", "Artifact", "(", "\"experiment-ckpts\"", ",", "type", "=", "\"checkpoints\"", ")", "\n", "\n", "if", "self", ".", "upload_best_only", ":", "\n", "            ", "ckpts", ".", "add_file", "(", "trainer", ".", "checkpoint_callback", ".", "best_model_path", ")", "\n", "", "else", ":", "\n", "            ", "for", "path", "in", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "ckpt_dir", ",", "\"**/*.ckpt\"", ")", ",", "recursive", "=", "True", ")", ":", "\n", "                ", "ckpts", ".", "add_file", "(", "path", ")", "\n", "\n", "", "", "experiment", ".", "use_artifact", "(", "ckpts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.callbacks.wandb_callbacks.LogConfusionMatrix.__init__": [[120, 124], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "preds", "=", "[", "]", "\n", "self", ".", "targets", "=", "[", "]", "\n", "self", ".", "ready", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.callbacks.wandb_callbacks.LogConfusionMatrix.on_sanity_check_start": [[125, 127], ["None"], "methods", ["None"], ["", "def", "on_sanity_check_start", "(", "self", ",", "trainer", ",", "pl_module", ")", "->", "None", ":", "\n", "        ", "self", ".", "ready", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.callbacks.wandb_callbacks.LogConfusionMatrix.on_sanity_check_end": [[128, 131], ["None"], "methods", ["None"], ["", "def", "on_sanity_check_end", "(", "self", ",", "trainer", ",", "pl_module", ")", ":", "\n", "        ", "\"\"\"Start executing this callback only after all validation sanity checks end.\"\"\"", "\n", "self", ".", "ready", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.callbacks.wandb_callbacks.LogConfusionMatrix.on_validation_batch_end": [[132, 139], ["wandb_callbacks.LogConfusionMatrix.preds.append", "wandb_callbacks.LogConfusionMatrix.targets.append"], "methods", ["None"], ["", "def", "on_validation_batch_end", "(", "\n", "self", ",", "trainer", ",", "pl_module", ",", "outputs", ",", "batch", ",", "batch_idx", ",", "dataloader_idx", "\n", ")", ":", "\n", "        ", "\"\"\"Gather data from single batch.\"\"\"", "\n", "if", "self", ".", "ready", ":", "\n", "            ", "self", ".", "preds", ".", "append", "(", "outputs", "[", "\"preds\"", "]", ")", "\n", "self", ".", "targets", ".", "append", "(", "outputs", "[", "\"targets\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.callbacks.wandb_callbacks.LogConfusionMatrix.on_validation_epoch_end": [[140, 171], ["wandb_callbacks.get_wandb_logger", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "sklearn.metrics.confusion_matrix", "matplotlib.figure", "seaborn.set", "seaborn.heatmap", "experiment.log", "matplotlib.clf", "wandb_callbacks.LogConfusionMatrix.preds.clear", "wandb_callbacks.LogConfusionMatrix.targets.clear", "torch.cat().cpu", "torch.cat().cpu", "wandb.Image", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.kuielab_mdx-net.callbacks.wandb_callbacks.get_wandb_logger"], ["", "", "def", "on_validation_epoch_end", "(", "self", ",", "trainer", ",", "pl_module", ")", ":", "\n", "        ", "\"\"\"Generate confusion matrix.\"\"\"", "\n", "if", "self", ".", "ready", ":", "\n", "            ", "logger", "=", "get_wandb_logger", "(", "trainer", ")", "\n", "experiment", "=", "logger", ".", "experiment", "\n", "\n", "preds", "=", "torch", ".", "cat", "(", "self", ".", "preds", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "targets", "=", "torch", ".", "cat", "(", "self", ".", "targets", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "confusion_matrix", "=", "metrics", ".", "confusion_matrix", "(", "y_true", "=", "targets", ",", "y_pred", "=", "preds", ")", "\n", "\n", "# set figure size", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "14", ",", "8", ")", ")", "\n", "\n", "# set labels size", "\n", "sn", ".", "set", "(", "font_scale", "=", "1.4", ")", "\n", "\n", "# set font size", "\n", "sn", ".", "heatmap", "(", "confusion_matrix", ",", "annot", "=", "True", ",", "annot_kws", "=", "{", "\"size\"", ":", "8", "}", ",", "fmt", "=", "\"g\"", ")", "\n", "\n", "# names should be uniqe or else charts from different experiments in wandb will overlap", "\n", "experiment", ".", "log", "(", "{", "f\"confusion_matrix/{experiment.name}\"", ":", "wandb", ".", "Image", "(", "plt", ")", "}", ",", "commit", "=", "False", ")", "\n", "\n", "# according to wandb docs this should also work but it crashes", "\n", "# experiment.log(f{\"confusion_matrix/{experiment.name}\": plt})", "\n", "\n", "# reset plot", "\n", "plt", ".", "clf", "(", ")", "\n", "\n", "self", ".", "preds", ".", "clear", "(", ")", "\n", "self", ".", "targets", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.callbacks.wandb_callbacks.LogF1PrecRecHeatmap.__init__": [[178, 182], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "class_names", ":", "List", "[", "str", "]", "=", "None", ")", ":", "\n", "        ", "self", ".", "preds", "=", "[", "]", "\n", "self", ".", "targets", "=", "[", "]", "\n", "self", ".", "ready", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.callbacks.wandb_callbacks.LogF1PrecRecHeatmap.on_sanity_check_start": [[183, 185], ["None"], "methods", ["None"], ["", "def", "on_sanity_check_start", "(", "self", ",", "trainer", ",", "pl_module", ")", ":", "\n", "        ", "self", ".", "ready", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.callbacks.wandb_callbacks.LogF1PrecRecHeatmap.on_sanity_check_end": [[186, 189], ["None"], "methods", ["None"], ["", "def", "on_sanity_check_end", "(", "self", ",", "trainer", ",", "pl_module", ")", ":", "\n", "        ", "\"\"\"Start executing this callback only after all validation sanity checks end.\"\"\"", "\n", "self", ".", "ready", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.callbacks.wandb_callbacks.LogF1PrecRecHeatmap.on_validation_batch_end": [[190, 197], ["wandb_callbacks.LogF1PrecRecHeatmap.preds.append", "wandb_callbacks.LogF1PrecRecHeatmap.targets.append"], "methods", ["None"], ["", "def", "on_validation_batch_end", "(", "\n", "self", ",", "trainer", ",", "pl_module", ",", "outputs", ",", "batch", ",", "batch_idx", ",", "dataloader_idx", "\n", ")", ":", "\n", "        ", "\"\"\"Gather data from single batch.\"\"\"", "\n", "if", "self", ".", "ready", ":", "\n", "            ", "self", ".", "preds", ".", "append", "(", "outputs", "[", "\"preds\"", "]", ")", "\n", "self", ".", "targets", ".", "append", "(", "outputs", "[", "\"targets\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.callbacks.wandb_callbacks.LogF1PrecRecHeatmap.on_validation_epoch_end": [[198, 234], ["wandb_callbacks.get_wandb_logger", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "sklearn.metrics.f1_score", "sklearn.metrics.recall_score", "sklearn.metrics.precision_score", "matplotlib.figure", "seaborn.set", "seaborn.heatmap", "experiment.log", "matplotlib.clf", "wandb_callbacks.LogF1PrecRecHeatmap.preds.clear", "wandb_callbacks.LogF1PrecRecHeatmap.targets.clear", "torch.cat().cpu", "torch.cat().cpu", "wandb.Image", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.kuielab_mdx-net.callbacks.wandb_callbacks.get_wandb_logger"], ["", "", "def", "on_validation_epoch_end", "(", "self", ",", "trainer", ",", "pl_module", ")", ":", "\n", "        ", "\"\"\"Generate f1, precision and recall heatmap.\"\"\"", "\n", "if", "self", ".", "ready", ":", "\n", "            ", "logger", "=", "get_wandb_logger", "(", "trainer", "=", "trainer", ")", "\n", "experiment", "=", "logger", ".", "experiment", "\n", "\n", "preds", "=", "torch", ".", "cat", "(", "self", ".", "preds", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "targets", "=", "torch", ".", "cat", "(", "self", ".", "targets", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "f1", "=", "f1_score", "(", "preds", ",", "targets", ",", "average", "=", "None", ")", "\n", "r", "=", "recall_score", "(", "preds", ",", "targets", ",", "average", "=", "None", ")", "\n", "p", "=", "precision_score", "(", "preds", ",", "targets", ",", "average", "=", "None", ")", "\n", "data", "=", "[", "f1", ",", "p", ",", "r", "]", "\n", "\n", "# set figure size", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "14", ",", "3", ")", ")", "\n", "\n", "# set labels size", "\n", "sn", ".", "set", "(", "font_scale", "=", "1.2", ")", "\n", "\n", "# set font size", "\n", "sn", ".", "heatmap", "(", "\n", "data", ",", "\n", "annot", "=", "True", ",", "\n", "annot_kws", "=", "{", "\"size\"", ":", "10", "}", ",", "\n", "fmt", "=", "\".3f\"", ",", "\n", "yticklabels", "=", "[", "\"F1\"", ",", "\"Precision\"", ",", "\"Recall\"", "]", ",", "\n", ")", "\n", "\n", "# names should be uniqe or else charts from different experiments in wandb will overlap", "\n", "experiment", ".", "log", "(", "{", "f\"f1_p_r_heatmap/{experiment.name}\"", ":", "wandb", ".", "Image", "(", "plt", ")", "}", ",", "commit", "=", "False", ")", "\n", "\n", "# reset plot", "\n", "plt", ".", "clf", "(", ")", "\n", "\n", "self", ".", "preds", ".", "clear", "(", ")", "\n", "self", ".", "targets", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.callbacks.wandb_callbacks.LogImagePredictions.__init__": [[242, 246], ["pytorch_lightning.Callback.__init__"], "methods", ["home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.music_demixing.MusicDemixingPredictor.__init__"], ["def", "__init__", "(", "self", ",", "num_samples", ":", "int", "=", "8", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_samples", "=", "num_samples", "\n", "self", ".", "ready", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.callbacks.wandb_callbacks.LogImagePredictions.on_sanity_check_start": [[247, 249], ["None"], "methods", ["None"], ["", "def", "on_sanity_check_start", "(", "self", ",", "trainer", ",", "pl_module", ")", ":", "\n", "        ", "self", ".", "ready", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.callbacks.wandb_callbacks.LogImagePredictions.on_sanity_check_end": [[250, 253], ["None"], "methods", ["None"], ["", "def", "on_sanity_check_end", "(", "self", ",", "trainer", ",", "pl_module", ")", ":", "\n", "        ", "\"\"\"Start executing this callback only after all validation sanity checks end.\"\"\"", "\n", "self", ".", "ready", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.callbacks.wandb_callbacks.LogImagePredictions.on_validation_epoch_end": [[254, 277], ["wandb_callbacks.get_wandb_logger", "next", "val_imgs.to.to.to", "pl_module", "torch.argmax", "experiment.log", "iter", "trainer.datamodule.val_dataloader", "wandb.Image", "zip"], "methods", ["home.repos.pwc.inspect_result.kuielab_mdx-net.callbacks.wandb_callbacks.get_wandb_logger", "home.repos.pwc.inspect_result.kuielab_mdx-net.datamodules.musdb_datamodule.MusdbDataModule.val_dataloader"], ["", "def", "on_validation_epoch_end", "(", "self", ",", "trainer", ",", "pl_module", ")", ":", "\n", "        ", "if", "self", ".", "ready", ":", "\n", "            ", "logger", "=", "get_wandb_logger", "(", "trainer", "=", "trainer", ")", "\n", "experiment", "=", "logger", ".", "experiment", "\n", "\n", "# get a validation batch from the validation dat loader", "\n", "val_samples", "=", "next", "(", "iter", "(", "trainer", ".", "datamodule", ".", "val_dataloader", "(", ")", ")", ")", "\n", "val_imgs", ",", "val_labels", "=", "val_samples", "\n", "\n", "# run the batch through the network", "\n", "val_imgs", "=", "val_imgs", ".", "to", "(", "device", "=", "pl_module", ".", "device", ")", "\n", "logits", "=", "pl_module", "(", "val_imgs", ")", "\n", "preds", "=", "torch", ".", "argmax", "(", "logits", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# log the images as wandb Image", "\n", "experiment", ".", "log", "(", "\n", "{", "\n", "f\"Images/{experiment.name}\"", ":", "[", "\n", "wandb", ".", "Image", "(", "x", ",", "caption", "=", "f\"Pred:{pred}, Label:{y}\"", ")", "\n", "for", "x", ",", "pred", ",", "y", "in", "zip", "(", "\n", "val_imgs", "[", ":", "self", ".", "num_samples", "]", ",", "\n", "preds", "[", ":", "self", ".", "num_samples", "]", ",", "\n", "val_labels", "[", ":", "self", ".", "num_samples", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.callbacks.wandb_callbacks.get_wandb_logger": [[16, 29], ["isinstance", "isinstance", "Exception", "isinstance"], "function", ["None"], ["def", "get_wandb_logger", "(", "trainer", ":", "Trainer", ")", "->", "WandbLogger", ":", "\n", "    ", "\"\"\"Safely get Weights&Biases logger from Trainer.\"\"\"", "\n", "\n", "if", "isinstance", "(", "trainer", ".", "logger", ",", "WandbLogger", ")", ":", "\n", "        ", "return", "trainer", ".", "logger", "\n", "\n", "", "if", "isinstance", "(", "trainer", ".", "logger", ",", "LoggerCollection", ")", ":", "\n", "        ", "for", "logger", "in", "trainer", ".", "logger", ":", "\n", "            ", "if", "isinstance", "(", "logger", ",", "WandbLogger", ")", ":", "\n", "                ", "return", "logger", "\n", "\n", "", "", "", "raise", "Exception", "(", "\n", "\"You are using wandb related callback, but WandbLogger was not found for some reason...\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.models.modules.TFC.__init__": [[6, 16], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "modules.TFC.H.append", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.music_demixing.MusicDemixingPredictor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c", ",", "l", ",", "k", ")", ":", "\n", "        ", "super", "(", "TFC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "H", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "l", ")", ":", "\n", "            ", "self", ".", "H", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "c", ",", "out_channels", "=", "c", ",", "kernel_size", "=", "k", ",", "stride", "=", "1", ",", "padding", "=", "k", "//", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "c", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.models.modules.TFC.forward": [[19, 23], ["h"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "h", "in", "self", ".", "H", ":", "\n", "            ", "x", "=", "h", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.models.modules.DenseTFC.__init__": [[26, 36], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "modules.DenseTFC.conv.append", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.music_demixing.MusicDemixingPredictor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c", ",", "l", ",", "k", ")", ":", "\n", "        ", "super", "(", "DenseTFC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "l", ")", ":", "\n", "            ", "self", ".", "conv", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "c", ",", "out_channels", "=", "c", ",", "kernel_size", "=", "k", ",", "stride", "=", "1", ",", "padding", "=", "k", "//", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "c", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.models.modules.DenseTFC.forward": [[39, 43], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "layer"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "conv", "[", ":", "-", "1", "]", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "[", "layer", "(", "x", ")", ",", "x", "]", ",", "1", ")", "\n", "", "return", "self", ".", "conv", "[", "-", "1", "]", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.models.modules.TFC_TDF.__init__": [[46, 69], ["torch.Module.__init__", "modules.DenseTFC", "modules.TFC", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.music_demixing.MusicDemixingPredictor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c", ",", "l", ",", "f", ",", "k", ",", "bn", ",", "dense", "=", "False", ",", "bias", "=", "True", ")", ":", "\n", "\n", "        ", "super", "(", "TFC_TDF", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "use_tdf", "=", "bn", "is", "not", "None", "\n", "\n", "self", ".", "tfc", "=", "DenseTFC", "(", "c", ",", "l", ",", "k", ")", "if", "dense", "else", "TFC", "(", "c", ",", "l", ",", "k", ")", "\n", "\n", "if", "self", ".", "use_tdf", ":", "\n", "            ", "if", "bn", "==", "0", ":", "\n", "                ", "self", ".", "tdf", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "f", ",", "f", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "c", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "tdf", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "f", ",", "f", "//", "bn", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "c", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "f", "//", "bn", ",", "f", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "c", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.models.modules.TFC_TDF.forward": [[71, 74], ["modules.TFC_TDF.tfc", "modules.TFC_TDF.tdf"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "tfc", "(", "x", ")", "\n", "return", "x", "+", "self", ".", "tdf", "(", "x", ")", "if", "self", ".", "use_tdf", "else", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.models.mdxnet.AbstractMDXNet.__init__": [[18, 38], ["pytorch_lightning.LightningModule.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.hann_window", "torch.hann_window", "torch.hann_window", "torch.hann_window", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "mdxnet.AbstractMDXNet.stft", "mdxnet.AbstractMDXNet.load_from_checkpoint", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.music_demixing.MusicDemixingPredictor.__init__", "home.repos.pwc.inspect_result.kuielab_mdx-net.models.mdxnet.AbstractMDXNet.stft"], ["def", "__init__", "(", "self", ",", "target_name", ",", "lr", ",", "optimizer", ",", "dim_c", ",", "dim_f", ",", "dim_t", ",", "n_fft", ",", "hop_length", ",", "overlap", ",", "ckpt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "target_name", "=", "target_name", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "dim_c", "=", "dim_c", "\n", "self", ".", "dim_f", "=", "dim_f", "\n", "self", ".", "dim_t", "=", "dim_t", "\n", "self", ".", "n_fft", "=", "n_fft", "\n", "self", ".", "n_bins", "=", "n_fft", "//", "2", "+", "1", "\n", "self", ".", "hop_length", "=", "hop_length", "\n", "\n", "self", ".", "chunk_size", "=", "hop_length", "*", "(", "self", ".", "dim_t", "-", "1", ")", "\n", "self", ".", "overlap", "=", "overlap", "\n", "self", ".", "window", "=", "nn", ".", "Parameter", "(", "torch", ".", "hann_window", "(", "window_length", "=", "self", ".", "n_fft", ",", "periodic", "=", "True", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "freq_pad", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "[", "1", ",", "dim_c", ",", "self", ".", "n_bins", "-", "self", ".", "dim_f", ",", "self", ".", "dim_t", "]", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "input_sample_shape", "=", "(", "self", ".", "stft", "(", "torch", ".", "zeros", "(", "[", "1", ",", "2", ",", "self", ".", "chunk_size", "]", ")", ")", ")", ".", "shape", "\n", "\n", "if", "ckpt", "is", "not", "None", ":", "\n", "            ", "self", ".", "load_from_checkpoint", "(", "ckpt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.models.mdxnet.AbstractMDXNet.configure_optimizers": [[39, 42], ["torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "mdxnet.AbstractMDXNet.parameters"], "methods", ["None"], ["", "", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "optimizer", "==", "'rmsprop'", ":", "\n", "            ", "return", "torch", ".", "optim", ".", "RMSprop", "(", "self", ".", "parameters", "(", ")", ",", "self", ".", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.models.mdxnet.AbstractMDXNet.training_step": [[43, 52], ["mdxnet.AbstractMDXNet.stft", "mdxnet.AbstractMDXNet.istft", "torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss", "mdxnet.AbstractMDXNet.log", "mdxnet.AbstractMDXNet."], "methods", ["home.repos.pwc.inspect_result.kuielab_mdx-net.models.mdxnet.AbstractMDXNet.stft", "home.repos.pwc.inspect_result.kuielab_mdx-net.models.mdxnet.AbstractMDXNet.istft"], ["", "", "def", "training_step", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "->", "STEP_OUTPUT", ":", "\n", "        ", "mix_wave", ",", "target_wave", "=", "args", "[", "0", "]", "\n", "mix_spec", "=", "self", ".", "stft", "(", "mix_wave", ")", "\n", "\n", "target_wave_hat", "=", "self", ".", "istft", "(", "self", "(", "mix_spec", ")", ")", "\n", "loss", "=", "mse_loss", "(", "target_wave_hat", ",", "target_wave", ")", "\n", "self", ".", "log", "(", "\"train/loss\"", ",", "loss", ",", "sync_dist", "=", "True", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ",", "prog_bar", "=", "True", ")", "\n", "\n", "return", "{", "\"loss\"", ":", "loss", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.models.mdxnet.AbstractMDXNet.validation_step": [[60, 80], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "src.utils.utils.sdr", "mdxnet.AbstractMDXNet.log", "mdxnet.AbstractMDXNet.stft", "torch.cat.append", "torch.cat.append", "torch.cat.transpose().reshape", "torch.cat.transpose().reshape", "target_hat.detach().cpu().numpy", "target.cpu().numpy", "mdxnet.AbstractMDXNet.istft", "torch.cat.transpose", "torch.cat.transpose", "target_hat.detach().cpu", "target.cpu", "mdxnet.AbstractMDXNet.", "target_hat.detach"], "methods", ["home.repos.pwc.inspect_result.kuielab_mdx-net.utils.utils.sdr", "home.repos.pwc.inspect_result.kuielab_mdx-net.models.mdxnet.AbstractMDXNet.stft", "home.repos.pwc.inspect_result.kuielab_mdx-net.models.mdxnet.AbstractMDXNet.istft"], ["", "def", "validation_step", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "->", "Optional", "[", "STEP_OUTPUT", "]", ":", "\n", "        ", "mix_chunk_batches", ",", "target", "=", "args", "[", "0", "]", "\n", "\n", "# remove data_loader batch dimension", "\n", "mix_chunk_batches", ",", "target", "=", "[", "batch", "[", "0", "]", "for", "batch", "in", "mix_chunk_batches", "]", ",", "target", "[", "0", "]", "\n", "\n", "# process whole track in batches of chunks", "\n", "target_hat_chunks", "=", "[", "]", "\n", "for", "batch", "in", "mix_chunk_batches", ":", "\n", "            ", "mix_spec", "=", "self", ".", "stft", "(", "batch", ")", "\n", "target_hat_chunks", ".", "append", "(", "self", ".", "istft", "(", "self", "(", "mix_spec", ")", ")", "[", "...", ",", "self", ".", "overlap", ":", "-", "self", ".", "overlap", "]", ")", "\n", "", "target_hat_chunks", "=", "torch", ".", "cat", "(", "target_hat_chunks", ")", "\n", "\n", "# concat all output chunks", "\n", "target_hat", "=", "target_hat_chunks", ".", "transpose", "(", "0", ",", "1", ")", ".", "reshape", "(", "2", ",", "-", "1", ")", "[", "...", ",", ":", "target", ".", "shape", "[", "-", "1", "]", "]", "\n", "\n", "score", "=", "sdr", "(", "target_hat", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "self", ".", "log", "(", "\"val/sdr\"", ",", "score", ",", "sync_dist", "=", "True", ",", "on_step", "=", "False", ",", "on_epoch", "=", "True", ",", "logger", "=", "True", ")", "\n", "\n", "return", "{", "'loss'", ":", "score", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.models.mdxnet.AbstractMDXNet.stft": [[81, 87], ["x.reshape().reshape.reshape().reshape.reshape", "torch.stft", "torch.stft", "torch.stft", "torch.stft", "x.reshape().reshape.reshape().reshape.permute", "x.reshape().reshape.reshape().reshape.reshape().reshape", "x.reshape().reshape.reshape().reshape.reshape"], "methods", ["home.repos.pwc.inspect_result.kuielab_mdx-net.models.mdxnet.AbstractMDXNet.stft", "home.repos.pwc.inspect_result.kuielab_mdx-net.models.mdxnet.AbstractMDXNet.stft", "home.repos.pwc.inspect_result.kuielab_mdx-net.models.mdxnet.AbstractMDXNet.stft", "home.repos.pwc.inspect_result.kuielab_mdx-net.models.mdxnet.AbstractMDXNet.stft"], ["", "def", "stft", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "reshape", "(", "[", "-", "1", ",", "self", ".", "chunk_size", "]", ")", "\n", "x", "=", "torch", ".", "stft", "(", "x", ",", "n_fft", "=", "self", ".", "n_fft", ",", "hop_length", "=", "self", ".", "hop_length", ",", "window", "=", "self", ".", "window", ",", "center", "=", "True", ")", "\n", "x", "=", "x", ".", "permute", "(", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "x", "=", "x", ".", "reshape", "(", "[", "-", "1", ",", "2", ",", "2", ",", "self", ".", "n_bins", ",", "self", ".", "dim_t", "]", ")", ".", "reshape", "(", "[", "-", "1", ",", "self", ".", "dim_c", ",", "self", ".", "n_bins", ",", "self", ".", "dim_t", "]", ")", "\n", "return", "x", "[", ":", ",", ":", ",", ":", "self", ".", "dim_f", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.models.mdxnet.AbstractMDXNet.istft": [[88, 94], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.istft.reshape().reshape", "torch.istft.reshape().reshape", "torch.istft.permute", "torch.istft.permute", "torch.istft", "torch.istft", "torch.istft", "torch.istft", "torch.istft.reshape", "torch.istft.reshape", "mdxnet.AbstractMDXNet.freq_pad.repeat", "torch.istft.reshape", "torch.istft.reshape"], "methods", ["home.repos.pwc.inspect_result.kuielab_mdx-net.models.mdxnet.AbstractMDXNet.istft", "home.repos.pwc.inspect_result.kuielab_mdx-net.models.mdxnet.AbstractMDXNet.istft", "home.repos.pwc.inspect_result.kuielab_mdx-net.models.mdxnet.AbstractMDXNet.istft", "home.repos.pwc.inspect_result.kuielab_mdx-net.models.mdxnet.AbstractMDXNet.istft"], ["", "def", "istft", "(", "self", ",", "spec", ")", ":", "\n", "        ", "spec", "=", "torch", ".", "cat", "(", "[", "spec", ",", "self", ".", "freq_pad", ".", "repeat", "(", "[", "spec", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", "]", ")", "]", ",", "-", "2", ")", "\n", "spec", "=", "spec", ".", "reshape", "(", "[", "-", "1", ",", "2", ",", "2", ",", "self", ".", "n_bins", ",", "self", ".", "dim_t", "]", ")", ".", "reshape", "(", "[", "-", "1", ",", "2", ",", "self", ".", "n_bins", ",", "self", ".", "dim_t", "]", ")", "\n", "spec", "=", "spec", ".", "permute", "(", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "spec", "=", "torch", ".", "istft", "(", "spec", ",", "n_fft", "=", "self", ".", "n_fft", ",", "hop_length", "=", "self", ".", "hop_length", ",", "window", "=", "self", ".", "window", ",", "center", "=", "True", ")", "\n", "return", "spec", ".", "reshape", "(", "[", "-", "1", ",", "2", ",", "self", ".", "chunk_size", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.models.mdxnet.ConvTDFNet.__init__": [[97, 155], ["mdxnet.AbstractMDXNet.__init__", "mdxnet.ConvTDFNet.save_hyperparameters", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "src.models.modules.TFC_TDF", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "mdxnet.ConvTDFNet.encoding_blocks.append", "mdxnet.ConvTDFNet.ds.append", "mdxnet.ConvTDFNet.us.append", "mdxnet.ConvTDFNet.decoding_blocks.append", "torch.Conv2d", "torch.Conv2d", "src.models.modules.TFC_TDF", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "src.models.modules.TFC_TDF", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.music_demixing.MusicDemixingPredictor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "target_name", ",", "lr", ",", "optimizer", ",", "dim_c", ",", "dim_f", ",", "dim_t", ",", "n_fft", ",", "hop_length", ",", "\n", "num_blocks", ",", "l", ",", "g", ",", "k", ",", "bn", ",", "bias", ",", "overlap", ",", "ckpt", ")", ":", "\n", "\n", "        ", "super", "(", "ConvTDFNet", ",", "self", ")", ".", "__init__", "(", "\n", "target_name", ",", "lr", ",", "optimizer", ",", "dim_c", ",", "dim_f", ",", "dim_t", ",", "n_fft", ",", "hop_length", ",", "overlap", ",", "ckpt", ")", "\n", "self", ".", "save_hyperparameters", "(", ")", "\n", "\n", "self", ".", "num_blocks", "=", "num_blocks", "\n", "self", ".", "l", "=", "l", "\n", "self", ".", "g", "=", "g", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "bn", "=", "bn", "\n", "self", ".", "bias", "=", "bias", "\n", "\n", "self", ".", "n", "=", "num_blocks", "//", "2", "\n", "scale", "=", "(", "2", ",", "2", ")", "\n", "\n", "self", ".", "first_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "dim_c", ",", "out_channels", "=", "g", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "g", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "\n", "f", "=", "self", ".", "dim_f", "\n", "c", "=", "g", "\n", "self", ".", "encoding_blocks", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "ds", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n", ")", ":", "\n", "            ", "self", ".", "encoding_blocks", ".", "append", "(", "TFC_TDF", "(", "c", ",", "l", ",", "f", ",", "k", ",", "bn", ",", "bias", "=", "bias", ")", ")", "\n", "self", ".", "ds", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "c", ",", "out_channels", "=", "c", "+", "g", ",", "kernel_size", "=", "scale", ",", "stride", "=", "scale", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "c", "+", "g", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", ")", "\n", "f", "=", "f", "//", "2", "\n", "c", "+=", "g", "\n", "\n", "", "self", ".", "bottleneck_block", "=", "TFC_TDF", "(", "c", ",", "l", ",", "f", ",", "k", ",", "bn", ",", "bias", "=", "bias", ")", "\n", "\n", "self", ".", "decoding_blocks", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "us", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n", ")", ":", "\n", "            ", "self", ".", "us", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "c", ",", "out_channels", "=", "c", "-", "g", ",", "kernel_size", "=", "scale", ",", "stride", "=", "scale", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "c", "-", "g", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", ")", "\n", "f", "=", "f", "*", "2", "\n", "c", "-=", "g", "\n", "\n", "self", ".", "decoding_blocks", ".", "append", "(", "TFC_TDF", "(", "c", ",", "l", ",", "f", ",", "k", ",", "bn", ",", "bias", "=", "bias", ")", ")", "\n", "\n", "", "self", ".", "final_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "c", ",", "out_channels", "=", "self", ".", "dim_c", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.models.mdxnet.ConvTDFNet.forward": [[157, 181], ["mdxnet.ConvTDFNet.first_conv", "mdxnet.ConvTDFNet.transpose", "range", "mdxnet.ConvTDFNet.bottleneck_block", "range", "mdxnet.ConvTDFNet.transpose", "mdxnet.ConvTDFNet.final_conv", "ds_outputs.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "first_conv", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "\n", "ds_outputs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n", ")", ":", "\n", "            ", "x", "=", "self", ".", "encoding_blocks", "[", "i", "]", "(", "x", ")", "\n", "ds_outputs", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "ds", "[", "i", "]", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "bottleneck_block", "(", "x", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "n", ")", ":", "\n", "            ", "x", "=", "self", ".", "us", "[", "i", "]", "(", "x", ")", "\n", "x", "*=", "ds_outputs", "[", "-", "i", "-", "1", "]", "\n", "x", "=", "self", ".", "decoding_blocks", "[", "i", "]", "(", "x", ")", "\n", "\n", "", "x", "=", "x", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "\n", "x", "=", "self", ".", "final_conv", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.models.mdxnet.Mixer.__init__": [[184, 213], ["pytorch_lightning.LightningModule.__init__", "mdxnet.Mixer.save_hyperparameters", "torch.ModuleDict", "torch.ModuleDict", "separator_ckpts.values", "separator_configs.keys", "len", "torch.Linear", "torch.Linear", "omegaconf.OmegaConf.load", "mdxnet.ConvTDFNet", "ConvTDFNet.load_from_checkpoint", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "mdxnet.Mixer.separators.parameters", "dict"], "methods", ["home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.music_demixing.MusicDemixingPredictor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "separator_configs", ",", "separator_ckpts", ",", "lr", ",", "optimizer", ",", "dim_t", ",", "hop_length", ",", "overlap", ",", "target_name", "=", "'all'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "save_hyperparameters", "(", ")", "\n", "\n", "# Load pretrained separators per source", "\n", "self", ".", "separators", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "for", "ckpt", "in", "separator_ckpts", ".", "values", "(", ")", ":", "\n", "# if failed here, then fill valid ckpt pahts in the given yaml for Mixer training", "\n", "            ", "assert", "ckpt", "is", "not", "None", "\n", "\n", "", "for", "source", "in", "separator_configs", ".", "keys", "(", ")", ":", "\n", "            ", "model_config", "=", "OmegaConf", ".", "load", "(", "separator_configs", "[", "source", "]", ")", "\n", "assert", "'ConvTDFNet'", "in", "model_config", ".", "_target_", "\n", "separator", "=", "ConvTDFNet", "(", "**", "{", "key", ":", "model_config", "[", "key", "]", "for", "key", "in", "dict", "(", "model_config", ")", "if", "key", "!=", "'_target_'", "}", ")", "\n", "separator", ".", "load_from_checkpoint", "(", "separator_ckpts", "[", "source", "]", ")", "\n", "self", ".", "separators", "[", "source", "]", "=", "separator", "\n", "\n", "# Freeze", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "param", "in", "self", ".", "separators", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "self", ".", "lr", "=", "lr", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "\n", "self", ".", "chunk_size", "=", "hop_length", "*", "(", "dim_t", "-", "1", ")", "\n", "self", ".", "overlap", "=", "overlap", "\n", "self", ".", "dim_s", "=", "len", "(", "separator_configs", ")", "\n", "self", ".", "mixing_layer", "=", "nn", ".", "Linear", "(", "(", "self", ".", "dim_s", "+", "1", ")", "*", "2", ",", "self", ".", "dim_s", "*", "2", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.models.mdxnet.Mixer.configure_optimizers": [[214, 217], ["torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "mdxnet.Mixer.parameters"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "optimizer", "==", "'rmsprop'", ":", "\n", "            ", "return", "torch", ".", "optim", ".", "RMSprop", "(", "self", ".", "parameters", "(", ")", ",", "self", ".", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.models.mdxnet.Mixer.training_step": [[218, 237], ["mdxnet.Mixer.", "torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss", "mdxnet.Mixer.log", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.stack().transpose", "torch.stack().transpose", "torch.stack().transpose", "torch.stack().transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "S.istft", "torch.stack().transpose.append", "torch.stack().transpose.append", "S", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "mix_wave.unsqueeze", "S.stft"], "methods", ["home.repos.pwc.inspect_result.kuielab_mdx-net.models.mdxnet.AbstractMDXNet.istft", "home.repos.pwc.inspect_result.kuielab_mdx-net.models.mdxnet.AbstractMDXNet.stft"], ["", "", "def", "training_step", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "->", "STEP_OUTPUT", ":", "\n", "        ", "mix_wave", ",", "target_waves", "=", "args", "[", "0", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "target_wave_hats", "=", "[", "]", "\n", "for", "source", "in", "[", "'bass'", ",", "'drums'", ",", "'other'", ",", "'vocals'", "]", ":", "\n", "                ", "S", "=", "self", ".", "separators", "[", "source", "]", "\n", "target_wave_hat", "=", "S", ".", "istft", "(", "S", "(", "S", ".", "stft", "(", "mix_wave", ")", ")", ")", "\n", "target_wave_hats", ".", "append", "(", "target_wave_hat", ")", "# shape = [source, batch, channel, time]", "\n", "\n", "", "target_wave_hats", "=", "torch", ".", "stack", "(", "target_wave_hats", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "", "mixer_output", "=", "self", "(", "torch", ".", "cat", "(", "[", "target_wave_hats", ",", "mix_wave", ".", "unsqueeze", "(", "1", ")", "]", ",", "1", ")", ")", "\n", "\n", "loss", "=", "mse_loss", "(", "mixer_output", "[", "...", ",", "self", ".", "overlap", ":", "-", "self", ".", "overlap", "]", ",", "\n", "target_waves", "[", "...", ",", "self", ".", "overlap", ":", "-", "self", ".", "overlap", "]", ")", "\n", "self", ".", "log", "(", "\"train/loss\"", ",", "loss", ",", "sync_dist", "=", "True", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ",", "prog_bar", "=", "True", ")", "\n", "\n", "return", "{", "\"loss\"", ":", "loss", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.models.mdxnet.Mixer.validation_step": [[239, 266], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "src.utils.utils.sdr", "mdxnet.Mixer.log", "torch.stack().transpose", "torch.stack().transpose", "torch.stack().transpose", "torch.stack().transpose", "mdxnet.Mixer.", "torch.cat.append", "torch.cat.append", "torch.cat.permute().reshape", "torch.cat.permute().reshape", "target_hat.detach().cpu().numpy", "target_waves.cpu().numpy", "S.istft", "torch.stack().transpose.append", "torch.stack().transpose.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "S", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.cat.permute", "torch.cat.permute", "target_hat.detach().cpu", "target_waves.cpu", "S.stft", "mix_wave.unsqueeze", "target_hat.detach"], "methods", ["home.repos.pwc.inspect_result.kuielab_mdx-net.utils.utils.sdr", "home.repos.pwc.inspect_result.kuielab_mdx-net.models.mdxnet.AbstractMDXNet.istft", "home.repos.pwc.inspect_result.kuielab_mdx-net.models.mdxnet.AbstractMDXNet.stft"], ["", "def", "validation_step", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "->", "Optional", "[", "STEP_OUTPUT", "]", ":", "\n", "        ", "mix_chunk_batches", ",", "target_waves", "=", "args", "[", "0", "]", "\n", "\n", "# remove data_loader batch dimension", "\n", "mix_chunk_batches", ",", "target_waves", "=", "[", "batch", "[", "0", "]", "for", "batch", "in", "mix_chunk_batches", "]", ",", "target_waves", "[", "0", "]", "\n", "\n", "# process whole track in batches of chunks", "\n", "target_hat_chunks", "=", "[", "]", "\n", "for", "mix_wave", "in", "mix_chunk_batches", ":", "\n", "            ", "target_wave_hats", "=", "[", "]", "\n", "for", "source", "in", "[", "'bass'", ",", "'drums'", ",", "'other'", ",", "'vocals'", "]", ":", "\n", "                ", "S", "=", "self", ".", "separators", "[", "source", "]", "\n", "target_wave_hat", "=", "S", ".", "istft", "(", "S", "(", "S", ".", "stft", "(", "mix_wave", ")", ")", ")", "\n", "target_wave_hats", ".", "append", "(", "target_wave_hat", ")", "# shape = [source, batch, channel, time]", "\n", "", "target_wave_hats", "=", "torch", ".", "stack", "(", "target_wave_hats", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "mixer_output", "=", "self", "(", "torch", ".", "cat", "(", "[", "target_wave_hats", ",", "mix_wave", ".", "unsqueeze", "(", "1", ")", "]", ",", "1", ")", ")", "\n", "target_hat_chunks", ".", "append", "(", "mixer_output", "[", "...", ",", "self", ".", "overlap", ":", "-", "self", ".", "overlap", "]", ")", "\n", "\n", "", "target_hat_chunks", "=", "torch", ".", "cat", "(", "target_hat_chunks", ")", "\n", "\n", "# concat all output chunks", "\n", "target_hat", "=", "target_hat_chunks", ".", "permute", "(", "1", ",", "2", ",", "0", ",", "3", ")", ".", "reshape", "(", "self", ".", "dim_s", ",", "2", ",", "-", "1", ")", "[", "...", ",", ":", "target_waves", ".", "shape", "[", "-", "1", "]", "]", "\n", "\n", "score", "=", "sdr", "(", "target_hat", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "target_waves", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "self", ".", "log", "(", "\"val/sdr\"", ",", "score", ",", "sync_dist", "=", "True", ",", "on_step", "=", "False", ",", "on_epoch", "=", "True", ",", "logger", "=", "True", ")", "\n", "\n", "return", "{", "'loss'", ":", "score", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.models.mdxnet.Mixer.forward": [[267, 271], ["mdxnet.Mixer.reshape().transpose", "mdxnet.Mixer.mixing_layer", "mdxnet.Mixer.transpose().reshape", "mdxnet.Mixer.reshape", "mdxnet.Mixer.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "reshape", "(", "-", "1", ",", "(", "self", ".", "dim_s", "+", "1", ")", "*", "2", ",", "self", ".", "chunk_size", ")", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "x", "=", "self", ".", "mixing_layer", "(", "x", ")", "\n", "return", "x", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "dim_s", ",", "2", ",", "self", ".", "chunk_size", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.music_demixing.MusicDemixingPredictor.__init__": [[36, 44], ["os.getenv", "os.getenv", "int", "int", "os.getenv", "os.getenv", "os.getenv", "os.getcwd", "os.getcwd"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "test_data_path", "=", "os", ".", "getenv", "(", "\"TEST_DATASET_PATH\"", ",", "os", ".", "getcwd", "(", ")", "+", "\"/data/test/\"", ")", "\n", "self", ".", "results_data_path", "=", "os", ".", "getenv", "(", "\"RESULTS_DATASET_PATH\"", ",", "os", ".", "getcwd", "(", ")", "+", "\"/data/results/\"", ")", "\n", "self", ".", "inference_setup_timeout", "=", "int", "(", "os", ".", "getenv", "(", "\"INFERENCE_SETUP_TIMEOUT_SECONDS\"", ",", "\"900\"", ")", ")", "\n", "self", ".", "inference_per_music_timeout", "=", "int", "(", "os", ".", "getenv", "(", "\"INFERENCE_PER_MUSIC_TIMEOUT_SECONDS\"", ",", "\"240\"", ")", ")", "\n", "self", ".", "partial_run", "=", "os", ".", "getenv", "(", "\"PARTIAL_RUN_MUSIC_NAMES\"", ",", "None", ")", "\n", "self", ".", "results", "=", "[", "]", "\n", "self", ".", "current_music_name", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.music_demixing.MusicDemixingPredictor.get_all_music_names": [[45, 55], ["os.listdir", "music_demixing.MusicDemixingPredictor.partial_run.split", "os.path.isfile", "os.path.join", "music_names.append"], "methods", ["None"], ["", "def", "get_all_music_names", "(", "self", ")", ":", "\n", "        ", "valid_music_names", "=", "None", "\n", "if", "self", ".", "partial_run", ":", "\n", "            ", "valid_music_names", "=", "self", ".", "partial_run", ".", "split", "(", "','", ")", "\n", "", "music_names", "=", "[", "]", "\n", "for", "folder", "in", "listdir", "(", "self", ".", "test_data_path", ")", ":", "\n", "            ", "if", "not", "isfile", "(", "join", "(", "self", ".", "test_data_path", ",", "folder", ")", ")", ":", "\n", "                ", "if", "valid_music_names", "is", "None", "or", "folder", "in", "valid_music_names", ":", "\n", "                    ", "music_names", ".", "append", "(", "folder", ")", "\n", "", "", "", "return", "music_names", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.music_demixing.MusicDemixingPredictor.get_music_folder_location": [[56, 58], ["os.path.join"], "methods", ["None"], ["", "def", "get_music_folder_location", "(", "self", ",", "music_name", ")", ":", "\n", "        ", "return", "join", "(", "self", ".", "test_data_path", ",", "music_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.music_demixing.MusicDemixingPredictor.get_music_file_location": [[59, 70], ["os.path.join", "os.path.join", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "get_music_file_location", "(", "self", ",", "music_name", ",", "instrument", "=", "None", ")", ":", "\n", "        ", "if", "instrument", "is", "None", ":", "\n", "            ", "instrument", "=", "\"mixture\"", "\n", "return", "join", "(", "self", ".", "test_data_path", ",", "music_name", ",", "instrument", "+", "\".wav\"", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "results_data_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "results_data_path", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "join", "(", "self", ".", "results_data_path", ",", "music_name", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "join", "(", "self", ".", "results_data_path", ",", "music_name", ")", ")", "\n", "\n", "", "return", "join", "(", "self", ".", "results_data_path", ",", "music_name", ",", "instrument", "+", "\".wav\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.music_demixing.MusicDemixingPredictor.scoring": [[71, 110], ["music_demixing.MusicDemixingPredictor.get_all_music_names", "numpy.sum", "numpy.sum", "print", "numpy.stack", "numpy.stack", "references.astype.astype.astype", "estimates.astype.astype.astype", "sdr().tolist", "numpy.mean", "numpy.square", "numpy.square", "numpy.log10", "os.path.join", "music_demixing.MusicDemixingPredictor.get_music_file_location", "soundfile.read", "soundfile.read", "references.astype.astype.append", "estimates.astype.astype.append", "music_demixing.MusicDemixingPredictor.scoring.sdr"], "methods", ["home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.music_demixing.MusicDemixingPredictor.get_all_music_names", "home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.music_demixing.MusicDemixingPredictor.get_music_file_location", "home.repos.pwc.inspect_result.kuielab_mdx-net.utils.utils.sdr"], ["", "def", "scoring", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Add scoring function in the starter kit for participant's reference\n        \"\"\"", "\n", "def", "sdr", "(", "references", ",", "estimates", ")", ":", "\n", "# compute SDR for one song", "\n", "            ", "delta", "=", "1e-7", "# avoid numerical errors", "\n", "num", "=", "np", ".", "sum", "(", "np", ".", "square", "(", "references", ")", ",", "axis", "=", "(", "1", ",", "2", ")", ")", "\n", "den", "=", "np", ".", "sum", "(", "np", ".", "square", "(", "references", "-", "estimates", ")", ",", "axis", "=", "(", "1", ",", "2", ")", ")", "\n", "num", "+=", "delta", "\n", "den", "+=", "delta", "\n", "return", "10", "*", "np", ".", "log10", "(", "num", "/", "den", ")", "\n", "\n", "", "music_names", "=", "self", ".", "get_all_music_names", "(", ")", "\n", "instruments", "=", "[", "\"bass\"", ",", "\"drums\"", ",", "\"other\"", ",", "\"vocals\"", "]", "\n", "scores", "=", "{", "}", "\n", "for", "music_name", "in", "music_names", ":", "\n", "            ", "print", "(", "\"Evaluating for: %s\"", "%", "music_name", ")", "\n", "scores", "[", "music_name", "]", "=", "{", "}", "\n", "references", "=", "[", "]", "\n", "estimates", "=", "[", "]", "\n", "for", "instrument", "in", "instruments", ":", "\n", "                ", "reference_file", "=", "join", "(", "self", ".", "test_data_path", ",", "music_name", ",", "instrument", "+", "\".wav\"", ")", "\n", "estimate_file", "=", "self", ".", "get_music_file_location", "(", "music_name", ",", "instrument", ")", "\n", "reference", ",", "_", "=", "sf", ".", "read", "(", "reference_file", ")", "\n", "estimate", ",", "_", "=", "sf", ".", "read", "(", "estimate_file", ")", "\n", "references", ".", "append", "(", "reference", ")", "\n", "estimates", ".", "append", "(", "estimate", ")", "\n", "", "references", "=", "np", ".", "stack", "(", "references", ")", "\n", "estimates", "=", "np", ".", "stack", "(", "estimates", ")", "\n", "references", "=", "references", ".", "astype", "(", "np", ".", "float32", ")", "\n", "estimates", "=", "estimates", ".", "astype", "(", "np", ".", "float32", ")", "\n", "song_score", "=", "sdr", "(", "references", ",", "estimates", ")", ".", "tolist", "(", ")", "\n", "scores", "[", "music_name", "]", "[", "\"sdr_bass\"", "]", "=", "song_score", "[", "0", "]", "\n", "scores", "[", "music_name", "]", "[", "\"sdr_drums\"", "]", "=", "song_score", "[", "1", "]", "\n", "scores", "[", "music_name", "]", "[", "\"sdr_other\"", "]", "=", "song_score", "[", "2", "]", "\n", "scores", "[", "music_name", "]", "[", "\"sdr_vocals\"", "]", "=", "song_score", "[", "3", "]", "\n", "scores", "[", "music_name", "]", "[", "\"sdr\"", "]", "=", "np", ".", "mean", "(", "song_score", ")", "\n", "", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.music_demixing.MusicDemixingPredictor.evaluation": [[112, 139], ["evaluator.aicrowd_helpers.execution_start", "evaluator.aicrowd_helpers.execution_running", "music_demixing.MusicDemixingPredictor.get_all_music_names", "evaluator.aicrowd_helpers.execution_success", "music_demixing.time_limit", "music_demixing.MusicDemixingPredictor.prediction_setup", "print", "music_demixing.time_limit", "music_demixing.MusicDemixingPredictor.prediction", "music_demixing.MusicDemixingPredictor.verify_results", "Exception", "music_demixing.MusicDemixingPredictor.get_music_file_location", "music_demixing.MusicDemixingPredictor.get_music_file_location", "music_demixing.MusicDemixingPredictor.get_music_file_location", "music_demixing.MusicDemixingPredictor.get_music_file_location", "music_demixing.MusicDemixingPredictor.get_music_file_location"], "methods", ["home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.aicrowd_helpers.execution_start", "home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.aicrowd_helpers.execution_running", "home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.music_demixing.MusicDemixingPredictor.get_all_music_names", "home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.aicrowd_helpers.execution_success", "home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.music_demixing.time_limit", "home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.music_demixing.MusicDemixingPredictor.prediction_setup", "home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.music_demixing.time_limit", "home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.music_demixing.MusicDemixingPredictor.prediction", "home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.music_demixing.MusicDemixingPredictor.verify_results", "home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.music_demixing.MusicDemixingPredictor.get_music_file_location", "home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.music_demixing.MusicDemixingPredictor.get_music_file_location", "home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.music_demixing.MusicDemixingPredictor.get_music_file_location", "home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.music_demixing.MusicDemixingPredictor.get_music_file_location", "home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.music_demixing.MusicDemixingPredictor.get_music_file_location"], ["", "def", "evaluation", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Admin function: Runs the whole evaluation\n        \"\"\"", "\n", "aicrowd_helpers", ".", "execution_start", "(", ")", "\n", "try", ":", "\n", "            ", "with", "time_limit", "(", "self", ".", "inference_setup_timeout", ")", ":", "\n", "                ", "self", ".", "prediction_setup", "(", ")", "\n", "", "", "except", "NotImplementedError", ":", "\n", "            ", "print", "(", "\"prediction_setup doesn't exist for this run, skipping...\"", ")", "\n", "\n", "", "aicrowd_helpers", ".", "execution_running", "(", ")", "\n", "\n", "music_names", "=", "self", ".", "get_all_music_names", "(", ")", "\n", "\n", "for", "music_name", "in", "music_names", ":", "\n", "            ", "with", "time_limit", "(", "self", ".", "inference_per_music_timeout", ")", ":", "\n", "                ", "self", ".", "prediction", "(", "mixture_file_path", "=", "self", ".", "get_music_file_location", "(", "music_name", ")", ",", "\n", "bass_file_path", "=", "self", ".", "get_music_file_location", "(", "music_name", ",", "\"bass\"", ")", ",", "\n", "drums_file_path", "=", "self", ".", "get_music_file_location", "(", "music_name", ",", "\"drums\"", ")", ",", "\n", "other_file_path", "=", "self", ".", "get_music_file_location", "(", "music_name", ",", "\"other\"", ")", ",", "\n", "vocals_file_path", "=", "self", ".", "get_music_file_location", "(", "music_name", ",", "\"vocals\"", ")", ",", "\n", ")", "\n", "\n", "", "if", "not", "self", ".", "verify_results", "(", "music_name", ")", ":", "\n", "                ", "raise", "Exception", "(", "\"verification failed, demixed files not found.\"", ")", "\n", "", "", "aicrowd_helpers", ".", "execution_success", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.music_demixing.MusicDemixingPredictor.run": [[140, 149], ["music_demixing.MusicDemixingPredictor.evaluation", "traceback.format_exc", "print", "evaluator.aicrowd_helpers.execution_error", "evaluator.aicrowd_helpers.is_grading"], "methods", ["home.repos.pwc.inspect_result.kuielab_mdx-net.evaluation.eval.evaluation", "home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.aicrowd_helpers.execution_error", "home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.aicrowd_helpers.is_grading"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "evaluation", "(", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "error", "=", "traceback", ".", "format_exc", "(", ")", "\n", "print", "(", "error", ")", "\n", "aicrowd_helpers", ".", "execution_error", "(", "error", ")", "\n", "if", "not", "aicrowd_helpers", ".", "is_grading", "(", ")", ":", "\n", "                ", "raise", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.music_demixing.MusicDemixingPredictor.prediction_setup": [[150, 156], ["None"], "methods", ["None"], ["", "", "", "def", "prediction_setup", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        You can do any preprocessing required for your codebase here : \n            like loading your models into memory, etc.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.music_demixing.MusicDemixingPredictor.prediction": [[157, 164], ["None"], "methods", ["None"], ["", "def", "prediction", "(", "self", ",", "music_name", ",", "mixture_file_path", ",", "bass_file_path", ",", "drums_file_path", ",", "other_file_path", ",", "\n", "vocals_file_path", ")", ":", "\n", "        ", "\"\"\"\n        This function will be called for all the flight during the evaluation.\n        NOTE: In case you want to load your model, please do so in `inference_setup` function.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.music_demixing.MusicDemixingPredictor.verify_results": [[165, 176], ["os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "music_demixing.MusicDemixingPredictor.get_music_file_location", "music_demixing.MusicDemixingPredictor.get_music_file_location", "music_demixing.MusicDemixingPredictor.get_music_file_location", "music_demixing.MusicDemixingPredictor.get_music_file_location"], "methods", ["home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.music_demixing.MusicDemixingPredictor.get_music_file_location", "home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.music_demixing.MusicDemixingPredictor.get_music_file_location", "home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.music_demixing.MusicDemixingPredictor.get_music_file_location", "home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.music_demixing.MusicDemixingPredictor.get_music_file_location"], ["", "def", "verify_results", "(", "self", ",", "music_name", ")", ":", "\n", "        ", "\"\"\"\n        This function will be called to check all the files exist and other verification needed.\n        (like length of the wav files)\n        \"\"\"", "\n", "valid", "=", "True", "\n", "valid", "=", "valid", "and", "os", ".", "path", ".", "isfile", "(", "self", ".", "get_music_file_location", "(", "music_name", ",", "\"vocals\"", ")", ")", "\n", "valid", "=", "valid", "and", "os", ".", "path", ".", "isfile", "(", "self", ".", "get_music_file_location", "(", "music_name", ",", "\"bass\"", ")", ")", "\n", "valid", "=", "valid", "and", "os", ".", "path", ".", "isfile", "(", "self", ".", "get_music_file_location", "(", "music_name", ",", "\"drums\"", ")", ")", "\n", "valid", "=", "valid", "and", "os", ".", "path", ".", "isfile", "(", "self", ".", "get_music_file_location", "(", "music_name", ",", "\"other\"", ")", ")", "\n", "return", "valid", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.music_demixing.time_limit": [[22, 33], ["signal.signal", "signal.alarm", "music_demixing.TimeoutException", "signal.alarm"], "function", ["None"], ["@", "contextmanager", "\n", "def", "time_limit", "(", "seconds", ")", ":", "\n", "    ", "def", "signal_handler", "(", "signum", ",", "frame", ")", ":", "\n", "        ", "raise", "TimeoutException", "(", "\"Prediction timed out!\"", ")", "\n", "\n", "", "signal", ".", "signal", "(", "signal", ".", "SIGALRM", ",", "signal_handler", ")", "\n", "signal", ".", "alarm", "(", "seconds", ")", "\n", "try", ":", "\n", "        ", "yield", "\n", "", "finally", ":", "\n", "        ", "signal", ".", "alarm", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.aicrowd_helpers.execution_start": [[11, 20], ["aicrowd_events.register_event"], "function", ["None"], ["def", "execution_start", "(", ")", ":", "\n", "########################################################################", "\n", "# Register Evaluation Start event", "\n", "########################################################################", "\n", "    ", "aicrowd_events", ".", "register_event", "(", "\n", "event_type", "=", "aicrowd_events", ".", "AICROWD_EVENT_INFO", ",", "\n", "message", "=", "\"execution_started\"", ",", "\n", "payload", "=", "{", "\n", "\"event_type\"", ":", "\"airborne_detection:execution_started\"", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.aicrowd_helpers.execution_running": [[23, 33], ["aicrowd_events.register_event"], "function", ["None"], ["", "def", "execution_running", "(", ")", ":", "\n", "########################################################################", "\n", "# Register Evaluation Start event", "\n", "########################################################################", "\n", "    ", "aicrowd_events", ".", "register_event", "(", "\n", "event_type", "=", "aicrowd_events", ".", "AICROWD_EVENT_INFO", ",", "\n", "message", "=", "\"execution_progress\"", ",", "\n", "payload", "=", "{", "\n", "\"event_type\"", ":", "\"airborne_detection:execution_progress\"", ",", "\n", "\"progress\"", ":", "0.0", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.aicrowd_helpers.execution_progress": [[37, 47], ["aicrowd_events.register_event"], "function", ["None"], ["", "def", "execution_progress", "(", "progress", ")", ":", "\n", "########################################################################", "\n", "# Register Evaluation Progress event", "\n", "########################################################################", "\n", "    ", "aicrowd_events", ".", "register_event", "(", "\n", "event_type", "=", "aicrowd_events", ".", "AICROWD_EVENT_INFO", ",", "\n", "message", "=", "\"execution_progress\"", ",", "\n", "payload", "=", "{", "\n", "\"event_type\"", ":", "\"airborne_detection:execution_progress\"", ",", "\n", "\"progress\"", ":", "progress", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.aicrowd_helpers.execution_success": [[50, 64], ["os.getenv", "aicrowd_events.register_event"], "function", ["None"], ["", "def", "execution_success", "(", ")", ":", "\n", "########################################################################", "\n", "# Register Evaluation Complete event", "\n", "########################################################################", "\n", "    ", "predictions_output_path", "=", "os", ".", "getenv", "(", "\"PREDICTIONS_OUTPUT_PATH\"", ",", "False", ")", "\n", "\n", "aicrowd_events", ".", "register_event", "(", "\n", "event_type", "=", "aicrowd_events", ".", "AICROWD_EVENT_SUCCESS", ",", "\n", "message", "=", "\"execution_success\"", ",", "\n", "payload", "=", "{", "\n", "\"event_type\"", ":", "\"airborne_detection:execution_success\"", ",", "\n", "\"predictions_output_path\"", ":", "predictions_output_path", "\n", "}", ",", "\n", "blocking", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.aicrowd_helpers.execution_error": [[66, 78], ["aicrowd_events.register_event"], "function", ["None"], ["", "def", "execution_error", "(", "error", ")", ":", "\n", "########################################################################", "\n", "# Register Evaluation Complete event", "\n", "########################################################################", "\n", "    ", "aicrowd_events", ".", "register_event", "(", "\n", "event_type", "=", "aicrowd_events", ".", "AICROWD_EVENT_ERROR", ",", "\n", "message", "=", "\"execution_error\"", ",", "\n", "payload", "=", "{", "#Arbitrary Payload", "\n", "\"event_type\"", ":", "\"airborne_detection:execution_error\"", ",", "\n", "\"error\"", ":", "error", "\n", "}", ",", "\n", "blocking", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.aicrowd_helpers.is_grading": [[80, 82], ["os.getenv"], "function", ["None"], ["", "def", "is_grading", "(", ")", ":", "\n", "    ", "return", "os", ".", "getenv", "(", "\"AICROWD_IS_GRADING\"", ",", "False", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kuielab_mdx-net.evaluation.eval.evaluation": [[20, 68], ["pathlib.Path().joinpath", "Path().joinpath.exists", "hydra.utils.instantiate", "pathlib.Path().joinpath", "len", "tqdm.tqdm", "any", "config.logger.items", "any", "os.listdir", "enumerate", "Path().joinpath.joinpath", "src.utils.utils.load_wav", "src.utils.utils.load_wav", "src.evaluation.separate.separate_with_ckpt", "src.utils.utils.sdr", "scores.append", "logger.log_metrics", "logger.close", "wandb.finish", "pathlib.Path", "src.utils.utils.wandb_login", "pathlib.Path", "sorted", "data_dir.joinpath.joinpath", "data_dir.joinpath.joinpath", "logger.log_metrics", "wandb_logger.experiment.log", "isinstance", "config.get", "log.info", "loggers.append", "isinstance", "os.listdir", "isinstance", "hydra.utils.instantiate", "sum", "wandb.Audio"], "function", ["home.repos.pwc.inspect_result.kuielab_mdx-net.utils.utils.load_wav", "home.repos.pwc.inspect_result.kuielab_mdx-net.utils.utils.load_wav", "home.repos.pwc.inspect_result.kuielab_mdx-net.evaluation.separate.separate_with_ckpt", "home.repos.pwc.inspect_result.kuielab_mdx-net.utils.utils.sdr", "home.repos.pwc.inspect_result.kuielab_mdx-net.utils.utils.finish", "home.repos.pwc.inspect_result.kuielab_mdx-net.utils.utils.wandb_login"], ["def", "evaluation", "(", "config", ":", "DictConfig", ")", ":", "\n", "\n", "    ", "assert", "config", ".", "split", "in", "[", "'train'", ",", "'valid'", ",", "'test'", "]", "\n", "\n", "data_dir", "=", "Path", "(", "config", ".", "get", "(", "'data_dir'", ")", ")", ".", "joinpath", "(", "config", "[", "'split'", "]", ")", "\n", "assert", "data_dir", ".", "exists", "(", ")", "\n", "\n", "# Init Lightning loggers", "\n", "loggers", ":", "List", "[", "LightningLoggerBase", "]", "=", "[", "]", "\n", "if", "\"logger\"", "in", "config", ":", "\n", "        ", "for", "_", ",", "lg_conf", "in", "config", ".", "logger", ".", "items", "(", ")", ":", "\n", "            ", "if", "\"_target_\"", "in", "lg_conf", ":", "\n", "                ", "log", ".", "info", "(", "f\"Instantiating logger <{lg_conf._target_}>\"", ")", "\n", "loggers", ".", "append", "(", "hydra", ".", "utils", ".", "instantiate", "(", "lg_conf", ")", ")", "\n", "\n", "", "", "if", "any", "(", "[", "isinstance", "(", "l", ",", "WandbLogger", ")", "for", "l", "in", "loggers", "]", ")", ":", "\n", "            ", "utils", ".", "wandb_login", "(", "key", "=", "config", ".", "wandb_api_key", ")", "\n", "\n", "", "", "model", "=", "hydra", ".", "utils", ".", "instantiate", "(", "config", ".", "model", ")", "\n", "target_name", "=", "model", ".", "target_name", "\n", "ckpt_path", "=", "Path", "(", "config", ".", "ckpt_dir", ")", ".", "joinpath", "(", "config", ".", "ckpt_path", ")", "\n", "\n", "scores", "=", "[", "]", "\n", "num_tracks", "=", "len", "(", "listdir", "(", "data_dir", ")", ")", "\n", "for", "i", ",", "track", "in", "tqdm", "(", "enumerate", "(", "sorted", "(", "listdir", "(", "data_dir", ")", ")", ")", ")", ":", "\n", "        ", "track", "=", "data_dir", ".", "joinpath", "(", "track", ")", "\n", "mixture", "=", "load_wav", "(", "track", ".", "joinpath", "(", "'mixture.wav'", ")", ")", "\n", "target", "=", "load_wav", "(", "track", ".", "joinpath", "(", "target_name", "+", "'.wav'", ")", ")", "\n", "#target_hat = {source: separate(config['batch_size'], models[source], onnxs[source], mixture) for source in sources}", "\n", "target_hat", "=", "separate_with_ckpt", "(", "config", ".", "batch_size", ",", "model", ",", "ckpt_path", ",", "mixture", ",", "config", ".", "device", ")", "\n", "score", "=", "sdr", "(", "target_hat", ",", "target", ")", "\n", "scores", ".", "append", "(", "score", ")", "\n", "\n", "for", "logger", "in", "loggers", ":", "\n", "            ", "logger", ".", "log_metrics", "(", "{", "'sdr'", ":", "score", "}", ",", "i", ")", "\n", "\n", "", "for", "wandb_logger", "in", "[", "logger", "for", "logger", "in", "loggers", "if", "isinstance", "(", "logger", ",", "WandbLogger", ")", "]", ":", "\n", "            ", "mid", "=", "mixture", ".", "shape", "[", "-", "1", "]", "//", "2", "\n", "track", "=", "target_hat", "[", ":", ",", "mid", "-", "44100", "*", "3", ":", "mid", "+", "44100", "*", "3", "]", "\n", "wandb_logger", ".", "experiment", ".", "log", "(", "\n", "{", "f'track={i}_target={target_name}'", ":", "[", "wandb", ".", "Audio", "(", "track", ".", "T", ",", "sample_rate", "=", "44100", ")", "]", "}", ")", "\n", "\n", "", "", "for", "logger", "in", "loggers", ":", "\n", "        ", "logger", ".", "log_metrics", "(", "{", "'mean_sdr_'", "+", "target_name", ":", "sum", "(", "scores", ")", "/", "num_tracks", "}", ")", "\n", "logger", ".", "close", "(", ")", "\n", "\n", "", "if", "any", "(", "[", "isinstance", "(", "logger", ",", "WandbLogger", ")", "for", "logger", "in", "loggers", "]", ")", ":", "\n", "        ", "wandb", ".", "finish", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kuielab_mdx-net.evaluation.separate.separate_with_onnx": [[9, 37], ["numpy.concatenate", "torch.tensor().split", "numpy.array", "mix_waves.append", "torch.no_grad", "onnxruntime.InferenceSession", "numpy.zeros", "numpy.zeros", "numpy.zeros", "torch.tensor", "str", "model.istft", "tar_signals.append", "numpy.concatenate", "torch.tensor", "tar_waves[].transpose().reshape().numpy", "ort.InferenceSession.run", "tar_waves[].transpose().reshape", "model.stft().numpy", "tar_waves[].transpose", "model.stft"], "function", ["home.repos.pwc.inspect_result.kuielab_mdx-net.models.mdxnet.AbstractMDXNet.istft", "home.repos.pwc.inspect_result.kuielab_mdx-net.evaluator.music_demixing.MusicDemixingPredictor.run", "home.repos.pwc.inspect_result.kuielab_mdx-net.models.mdxnet.AbstractMDXNet.stft"], ["def", "separate_with_onnx", "(", "batch_size", ",", "model", ",", "onnx_path", ":", "Path", ",", "mix", ")", ":", "\n", "    ", "n_sample", "=", "mix", ".", "shape", "[", "1", "]", "\n", "\n", "trim", "=", "model", ".", "n_fft", "//", "2", "\n", "gen_size", "=", "model", ".", "sampling_size", "-", "2", "*", "trim", "\n", "pad", "=", "gen_size", "-", "n_sample", "%", "gen_size", "\n", "mix_p", "=", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "(", "2", ",", "trim", ")", ")", ",", "mix", ",", "np", ".", "zeros", "(", "(", "2", ",", "pad", ")", ")", ",", "np", ".", "zeros", "(", "(", "2", ",", "trim", ")", ")", ")", ",", "1", ")", "\n", "\n", "mix_waves", "=", "[", "]", "\n", "i", "=", "0", "\n", "while", "i", "<", "n_sample", "+", "pad", ":", "\n", "        ", "waves", "=", "np", ".", "array", "(", "mix_p", "[", ":", ",", "i", ":", "i", "+", "model", ".", "sampling_size", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "mix_waves", ".", "append", "(", "waves", ")", "\n", "i", "+=", "gen_size", "\n", "", "mix_waves_batched", "=", "torch", ".", "tensor", "(", "mix_waves", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "split", "(", "batch_size", ")", "\n", "\n", "tar_signals", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "_ort", "=", "ort", ".", "InferenceSession", "(", "str", "(", "onnx_path", ")", ")", "\n", "for", "mix_waves", "in", "mix_waves_batched", ":", "\n", "            ", "tar_waves", "=", "model", ".", "istft", "(", "torch", ".", "tensor", "(", "\n", "_ort", ".", "run", "(", "None", ",", "{", "'input'", ":", "model", ".", "stft", "(", "mix_waves", ")", ".", "numpy", "(", ")", "}", ")", "[", "0", "]", "\n", ")", ")", "\n", "tar_signals", ".", "append", "(", "tar_waves", "[", ":", ",", ":", ",", "trim", ":", "-", "trim", "]", ".", "transpose", "(", "0", ",", "1", ")", ".", "reshape", "(", "2", ",", "-", "1", ")", ".", "numpy", "(", ")", ")", "\n", "", "tar_signal", "=", "np", ".", "concatenate", "(", "tar_signals", ",", "axis", "=", "-", "1", ")", "[", ":", ",", ":", "-", "pad", "]", "\n", "\n", "", "return", "tar_signal", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.evaluation.separate.separate_with_ckpt": [[39, 67], ["model.load_from_checkpoint().to.load_from_checkpoint().to", "numpy.concatenate", "torch.tensor().split", "torch.no_grad", "model.load_from_checkpoint().to.eval", "model.load_from_checkpoint().to.load_from_checkpoint", "numpy.zeros", "numpy.zeros", "range", "torch.tensor", "model.load_from_checkpoint().to.stft", "model.load_from_checkpoint().to.", "model.load_from_checkpoint().to.istft", "target_wav_hat.cpu().detach().numpy.cpu().detach().numpy", "target_wav_hats.append", "numpy.vstack", "numpy.concatenate", "mixture_wav.to", "target_wav_hat.cpu().detach().numpy.cpu().detach", "target_wav_hat.cpu().detach().numpy.cpu"], "function", ["home.repos.pwc.inspect_result.kuielab_mdx-net.models.mdxnet.AbstractMDXNet.stft", "home.repos.pwc.inspect_result.kuielab_mdx-net.models.mdxnet.AbstractMDXNet.istft"], ["", "def", "separate_with_ckpt", "(", "batch_size", ",", "model", ",", "ckpt_path", ":", "Path", ",", "mix", ",", "device", ")", ":", "\n", "    ", "model", "=", "model", ".", "load_from_checkpoint", "(", "ckpt_path", ")", ".", "to", "(", "device", ")", "\n", "true_samples", "=", "model", ".", "sampling_size", "-", "2", "*", "model", ".", "trim", "\n", "\n", "right_pad", "=", "true_samples", "+", "model", ".", "trim", "-", "(", "(", "mix", ".", "shape", "[", "-", "1", "]", ")", "%", "true_samples", ")", "\n", "mixture", "=", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "(", "2", ",", "model", ".", "trim", ")", ",", "dtype", "=", "'float32'", ")", ",", "\n", "mix", ",", "\n", "np", ".", "zeros", "(", "(", "2", ",", "right_pad", ")", ",", "dtype", "=", "'float32'", ")", ")", ",", "\n", "1", ")", "\n", "num_chunks", "=", "mixture", ".", "shape", "[", "-", "1", "]", "//", "true_samples", "\n", "mix_waves_batched", "=", "[", "mixture", "[", ":", ",", "i", "*", "true_samples", ":", "i", "*", "true_samples", "+", "model", ".", "sampling_size", "]", "for", "i", "in", "\n", "range", "(", "num_chunks", ")", "]", "\n", "mix_waves_batched", "=", "torch", ".", "tensor", "(", "mix_waves_batched", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "split", "(", "batch_size", ")", "\n", "\n", "target_wav_hats", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "for", "mixture_wav", "in", "mix_waves_batched", ":", "\n", "            ", "mix_spec", "=", "model", ".", "stft", "(", "mixture_wav", ".", "to", "(", "device", ")", ")", "\n", "spec_hat", "=", "model", "(", "mix_spec", ")", "\n", "target_wav_hat", "=", "model", ".", "istft", "(", "spec_hat", ")", "\n", "target_wav_hat", "=", "target_wav_hat", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "target_wav_hats", ".", "append", "(", "target_wav_hat", ")", "\n", "\n", "", "target_wav_hat", "=", "np", ".", "vstack", "(", "target_wav_hats", ")", "[", ":", ",", ":", ",", "model", ".", "trim", ":", "-", "model", ".", "trim", "]", "\n", "target_wav_hat", "=", "np", ".", "concatenate", "(", "target_wav_hat", ",", "axis", "=", "-", "1", ")", "[", ":", ",", ":", "mix", ".", "shape", "[", "-", "1", "]", "]", "\n", "", "return", "target_wav_hat", "\n", "", ""]], "home.repos.pwc.inspect_result.kuielab_mdx-net.smoke.test_commands.test_fast_dev_run": [[7, 11], ["tests.helpers.run_command.run_command"], "function", ["home.repos.pwc.inspect_result.kuielab_mdx-net.helpers.run_command.run_command"], ["def", "test_fast_dev_run", "(", ")", ":", "\n", "    ", "\"\"\"Run 1 train, val, test batch.\"\"\"", "\n", "command", "=", "[", "\"run.py\"", ",", "\"trainer=default\"", ",", "\"trainer.fast_dev_run=true\"", "]", "\n", "run_command", "(", "command", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.smoke.test_commands.test_default_cpu": [[13, 17], ["tests.helpers.run_command.run_command"], "function", ["home.repos.pwc.inspect_result.kuielab_mdx-net.helpers.run_command.run_command"], ["", "def", "test_default_cpu", "(", ")", ":", "\n", "    ", "\"\"\"Test default configuration on CPU.\"\"\"", "\n", "command", "=", "[", "\"run.py\"", ",", "\"trainer.max_epochs=1\"", ",", "\"trainer.gpus=0\"", "]", "\n", "run_command", "(", "command", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.smoke.test_commands.test_default_gpu": [[19, 29], ["tests.helpers.runif.RunIf", "tests.helpers.run_command.run_command"], "function", ["home.repos.pwc.inspect_result.kuielab_mdx-net.helpers.run_command.run_command"], ["", "@", "RunIf", "(", "min_gpus", "=", "1", ")", "\n", "def", "test_default_gpu", "(", ")", ":", "\n", "    ", "\"\"\"Test default configuration on GPU.\"\"\"", "\n", "command", "=", "[", "\n", "\"run.py\"", ",", "\n", "\"trainer.max_epochs=1\"", ",", "\n", "\"trainer.gpus=1\"", ",", "\n", "\"datamodule.pin_memory=True\"", ",", "\n", "]", "\n", "run_command", "(", "command", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.smoke.test_commands.test_experiments": [[31, 36], ["tests.helpers.run_command.run_command"], "function", ["home.repos.pwc.inspect_result.kuielab_mdx-net.helpers.run_command.run_command"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_experiments", "(", ")", ":", "\n", "    ", "\"\"\"Train 1 epoch with all experiment configs.\"\"\"", "\n", "command", "=", "[", "\"run.py\"", ",", "\"-m\"", ",", "\"experiment=glob(*)\"", ",", "\"trainer.max_epochs=1\"", "]", "\n", "run_command", "(", "command", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.smoke.test_commands.test_limit_batches": [[38, 49], ["tests.helpers.run_command.run_command"], "function", ["home.repos.pwc.inspect_result.kuielab_mdx-net.helpers.run_command.run_command"], ["", "def", "test_limit_batches", "(", ")", ":", "\n", "    ", "\"\"\"Train 1 epoch on 25% of data.\"\"\"", "\n", "command", "=", "[", "\n", "\"run.py\"", ",", "\n", "\"trainer=default\"", ",", "\n", "\"trainer.max_epochs=1\"", ",", "\n", "\"trainer.limit_train_batches=0.25\"", ",", "\n", "\"trainer.limit_val_batches=0.25\"", ",", "\n", "\"trainer.limit_test_batches=0.25\"", ",", "\n", "]", "\n", "run_command", "(", "command", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.smoke.test_commands.test_gradient_accumulation": [[51, 60], ["tests.helpers.run_command.run_command"], "function", ["home.repos.pwc.inspect_result.kuielab_mdx-net.helpers.run_command.run_command"], ["", "def", "test_gradient_accumulation", "(", ")", ":", "\n", "    ", "\"\"\"Train 1 epoch with gradient accumulation.\"\"\"", "\n", "command", "=", "[", "\n", "\"run.py\"", ",", "\n", "\"trainer=default\"", ",", "\n", "\"trainer.max_epochs=1\"", ",", "\n", "\"trainer.accumulate_grad_batches=10\"", ",", "\n", "]", "\n", "run_command", "(", "command", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.smoke.test_commands.test_double_validation_loop": [[62, 71], ["tests.helpers.run_command.run_command"], "function", ["home.repos.pwc.inspect_result.kuielab_mdx-net.helpers.run_command.run_command"], ["", "def", "test_double_validation_loop", "(", ")", ":", "\n", "    ", "\"\"\"Train 1 epoch with validation loop twice per epoch.\"\"\"", "\n", "command", "=", "[", "\n", "\"run.py\"", ",", "\n", "\"trainer=default\"", ",", "\n", "\"trainer.max_epochs=1\"", ",", "\n", "\"trainer.val_check_interval=0.5\"", ",", "\n", "]", "\n", "run_command", "(", "command", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.smoke.test_commands.test_csv_logger": [[73, 83], ["tests.helpers.run_command.run_command"], "function", ["home.repos.pwc.inspect_result.kuielab_mdx-net.helpers.run_command.run_command"], ["", "def", "test_csv_logger", "(", ")", ":", "\n", "    ", "\"\"\"Train 5 epochs with 5 batches with CSVLogger.\"\"\"", "\n", "command", "=", "[", "\n", "\"run.py\"", ",", "\n", "\"trainer=default\"", ",", "\n", "\"trainer.max_epochs=5\"", ",", "\n", "\"trainer.limit_train_batches=5\"", ",", "\n", "\"logger=csv\"", ",", "\n", "]", "\n", "run_command", "(", "command", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.smoke.test_commands.test_tensorboard_logger": [[85, 95], ["tests.helpers.run_command.run_command"], "function", ["home.repos.pwc.inspect_result.kuielab_mdx-net.helpers.run_command.run_command"], ["", "def", "test_tensorboard_logger", "(", ")", ":", "\n", "    ", "\"\"\"Train 5 epochs with 5 batches with TensorboardLogger.\"\"\"", "\n", "command", "=", "[", "\n", "\"run.py\"", ",", "\n", "\"trainer=default\"", ",", "\n", "\"trainer.max_epochs=5\"", ",", "\n", "\"trainer.limit_train_batches=5\"", ",", "\n", "\"logger=tensorboard\"", ",", "\n", "]", "\n", "run_command", "(", "command", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.smoke.test_commands.test_overfit_batches": [[97, 107], ["tests.helpers.run_command.run_command"], "function", ["home.repos.pwc.inspect_result.kuielab_mdx-net.helpers.run_command.run_command"], ["", "def", "test_overfit_batches", "(", ")", ":", "\n", "    ", "\"\"\"Overfit to 10 batches over 10 epochs.\"\"\"", "\n", "command", "=", "[", "\n", "\"run.py\"", ",", "\n", "\"trainer=default\"", ",", "\n", "\"trainer.min_epochs=10\"", ",", "\n", "\"trainer.max_epochs=10\"", ",", "\n", "\"trainer.overfit_batches=10\"", ",", "\n", "]", "\n", "run_command", "(", "command", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kuielab_mdx-net.smoke.test_sweeps.test_default_sweep": [[11, 23], ["tests.helpers.run_command.run_command"], "function", ["home.repos.pwc.inspect_result.kuielab_mdx-net.helpers.run_command.run_command"], ["@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_default_sweep", "(", ")", ":", "\n", "    ", "\"\"\"Test default Hydra sweeper.\"\"\"", "\n", "command", "=", "[", "\n", "\"run.py\"", ",", "\n", "\"-m\"", ",", "\n", "\"datamodule.batch_size=64,128\"", ",", "\n", "\"model.lr=0.01,0.02\"", ",", "\n", "\"trainer=default\"", ",", "\n", "\"trainer.fast_dev_run=true\"", ",", "\n", "]", "\n", "run_command", "(", "command", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.smoke.test_sweeps.test_optuna_sweep": [[25, 36], ["tests.helpers.run_command.run_command"], "function", ["home.repos.pwc.inspect_result.kuielab_mdx-net.helpers.run_command.run_command"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_optuna_sweep", "(", ")", ":", "\n", "    ", "\"\"\"Test Optuna sweeper.\"\"\"", "\n", "command", "=", "[", "\n", "\"run.py\"", ",", "\n", "\"-m\"", ",", "\n", "\"hparams_search=mnist_optuna\"", ",", "\n", "\"trainer=default\"", ",", "\n", "\"trainer.fast_dev_run=true\"", ",", "\n", "]", "\n", "run_command", "(", "command", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.smoke.test_sweeps.test_ax_sweep": [[38, 44], ["pytest.mark.skip", "tests.helpers.run_command.run_command"], "function", ["home.repos.pwc.inspect_result.kuielab_mdx-net.helpers.run_command.run_command"], ["", "@", "pytest", ".", "mark", ".", "skip", "(", "reason", "=", "\"TODO: Add Ax sweep config.\"", ")", "\n", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_ax_sweep", "(", ")", ":", "\n", "    ", "\"\"\"Test Ax sweeper.\"\"\"", "\n", "command", "=", "[", "\"run.py\"", ",", "\"-m\"", ",", "\"hparams_search=mnist_ax\"", ",", "\"trainer.fast_dev_run=true\"", "]", "\n", "run_command", "(", "command", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kuielab_mdx-net.smoke.test_mixed_precision.test_apex_01": [[5, 18], ["tests.helpers.runif.RunIf", "tests.helpers.run_command.run_command"], "function", ["home.repos.pwc.inspect_result.kuielab_mdx-net.helpers.run_command.run_command"], ["@", "RunIf", "(", "amp_apex", "=", "True", ")", "\n", "def", "test_apex_01", "(", ")", ":", "\n", "    ", "\"\"\"Test mixed-precision level 01.\"\"\"", "\n", "command", "=", "[", "\n", "\"run.py\"", ",", "\n", "\"trainer=default\"", ",", "\n", "\"trainer.max_epochs=1\"", ",", "\n", "\"trainer.gpus=1\"", ",", "\n", "\"trainer.amp_backend=apex\"", ",", "\n", "\"trainer.amp_level=O1\"", ",", "\n", "\"trainer.precision=16\"", ",", "\n", "]", "\n", "run_command", "(", "command", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.smoke.test_mixed_precision.test_apex_02": [[20, 33], ["tests.helpers.runif.RunIf", "tests.helpers.run_command.run_command"], "function", ["home.repos.pwc.inspect_result.kuielab_mdx-net.helpers.run_command.run_command"], ["", "@", "RunIf", "(", "amp_apex", "=", "True", ")", "\n", "def", "test_apex_02", "(", ")", ":", "\n", "    ", "\"\"\"Test mixed-precision level 02.\"\"\"", "\n", "command", "=", "[", "\n", "\"run.py\"", ",", "\n", "\"trainer=default\"", ",", "\n", "\"trainer.max_epochs=1\"", ",", "\n", "\"trainer.gpus=1\"", ",", "\n", "\"trainer.amp_backend=apex\"", ",", "\n", "\"trainer.amp_level=O2\"", ",", "\n", "\"trainer.precision=16\"", ",", "\n", "]", "\n", "run_command", "(", "command", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.smoke.test_mixed_precision.test_apex_03": [[35, 48], ["tests.helpers.runif.RunIf", "tests.helpers.run_command.run_command"], "function", ["home.repos.pwc.inspect_result.kuielab_mdx-net.helpers.run_command.run_command"], ["", "@", "RunIf", "(", "amp_apex", "=", "True", ")", "\n", "def", "test_apex_03", "(", ")", ":", "\n", "    ", "\"\"\"Test mixed-precision level 03.\"\"\"", "\n", "command", "=", "[", "\n", "\"run.py\"", ",", "\n", "\"trainer=default\"", ",", "\n", "\"trainer.max_epochs=1\"", ",", "\n", "\"trainer.gpus=1\"", ",", "\n", "\"trainer.amp_backend=apex\"", ",", "\n", "\"trainer.amp_level=O3\"", ",", "\n", "\"trainer.precision=16\"", ",", "\n", "]", "\n", "run_command", "(", "command", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kuielab_mdx-net.unit.test_sth.test_something1": [[6, 9], ["None"], "function", ["None"], ["def", "test_something1", "(", ")", ":", "\n", "    ", "\"\"\"Some test description.\"\"\"", "\n", "assert", "True", "is", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.unit.test_sth.test_something2": [[11, 14], ["None"], "function", ["None"], ["", "def", "test_something2", "(", ")", ":", "\n", "    ", "\"\"\"Some test description.\"\"\"", "\n", "assert", "1", "+", "1", "==", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.unit.test_sth.test_something3": [[16, 20], ["pytest.mark.parametrize"], "function", ["None"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"arg1\"", ",", "[", "0.5", ",", "1.0", ",", "2.0", "]", ")", "\n", "def", "test_something3", "(", "arg1", ":", "float", ")", ":", "\n", "    ", "\"\"\"Some test description.\"\"\"", "\n", "assert", "arg1", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.unit.test_sth.test_something4": [[23, 27], ["tests.helpers.runif.RunIf"], "function", ["None"], ["", "@", "RunIf", "(", "skip_windows", "=", "True", ",", "min_gpus", "=", "1", ")", "\n", "def", "test_something4", "(", ")", ":", "\n", "    ", "\"\"\"Some test description.\"\"\"", "\n", "assert", "True", "is", "True", "\n", "", ""]], "home.repos.pwc.inspect_result.kuielab_mdx-net.helpers.run_command.run_command": [[7, 16], ["sh.python", "pytest.fail", "e.stderr.decode"], "function", ["None"], ["def", "run_command", "(", "command", ":", "List", "[", "str", "]", ")", ":", "\n", "    ", "\"\"\"Default method for executing shell commands with pytest.\"\"\"", "\n", "msg", "=", "None", "\n", "try", ":", "\n", "        ", "sh", ".", "python", "(", "command", ")", "\n", "", "except", "sh", ".", "ErrorReturnCode", "as", "e", ":", "\n", "        ", "msg", "=", "e", ".", "stderr", ".", "decode", "(", ")", "\n", "", "if", "msg", ":", "\n", "        ", "pytest", ".", "fail", "(", "msg", "=", "msg", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kuielab_mdx-net.helpers.module_available._module_available": [[10, 27], ["importlib.util.find_spec"], "function", ["None"], ["def", "_module_available", "(", "module_path", ":", "str", ")", "->", "bool", ":", "\n", "    ", "\"\"\"Check if a path is available in your environment.\n\n    >>> _module_available('os')\n    True\n    >>> _module_available('bla.bla')\n    False\n\n    \"\"\"", "\n", "try", ":", "\n", "        ", "return", "find_spec", "(", "module_path", ")", "is", "not", "None", "\n", "", "except", "AttributeError", ":", "\n", "# Python 3.6", "\n", "        ", "return", "False", "\n", "", "except", "ModuleNotFoundError", ":", "\n", "# Python 3.7+", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.kuielab_mdx-net.helpers.runif.RunIf.__new__": [[37, 112], ["pytest.mark.skipif", "conditions.append", "reasons.append", "conditions.append", "reasons.append", "conditions.append", "reasons.append", "conditions.append", "reasons.append", "conditions.append", "reasons.append", "conditions.append", "reasons.append", "conditions.append", "reasons.append", "conditions.append", "reasons.append", "conditions.append", "reasons.append", "pkg_resources.get_distribution", "pkg_resources.get_distribution", "zip", "any", "torch.cuda.device_count", "packaging.version.Version", "packaging.version.Version", "packaging.version.Version", "packaging.version.Version", "packaging.version.Version", "packaging.version.Version"], "methods", ["None"], ["def", "__new__", "(", "\n", "self", ",", "\n", "min_gpus", ":", "int", "=", "0", ",", "\n", "min_torch", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "max_torch", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "min_python", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "amp_apex", ":", "bool", "=", "False", ",", "\n", "skip_windows", ":", "bool", "=", "False", ",", "\n", "rpc", ":", "bool", "=", "False", ",", "\n", "fairscale", ":", "bool", "=", "False", ",", "\n", "deepspeed", ":", "bool", "=", "False", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            min_gpus: min number of gpus required to run test\n            min_torch: minimum pytorch version to run test\n            max_torch: maximum pytorch version to run test\n            min_python: minimum python version required to run test\n            amp_apex: NVIDIA Apex is installed\n            skip_windows: skip test for Windows platform\n            rpc: requires Remote Procedure Call (RPC)\n            fairscale: if `fairscale` module is required to run the test\n            deepspeed: if `deepspeed` module is required to run the test\n            kwargs: native pytest.mark.skipif keyword arguments\n        \"\"\"", "\n", "conditions", "=", "[", "]", "\n", "reasons", "=", "[", "]", "\n", "\n", "if", "min_gpus", ":", "\n", "            ", "conditions", ".", "append", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", "<", "min_gpus", ")", "\n", "reasons", ".", "append", "(", "f\"GPUs>={min_gpus}\"", ")", "\n", "\n", "", "if", "min_torch", ":", "\n", "            ", "torch_version", "=", "get_distribution", "(", "\"torch\"", ")", ".", "version", "\n", "conditions", ".", "append", "(", "Version", "(", "torch_version", ")", "<", "Version", "(", "min_torch", ")", ")", "\n", "reasons", ".", "append", "(", "f\"torch>={min_torch}\"", ")", "\n", "\n", "", "if", "max_torch", ":", "\n", "            ", "torch_version", "=", "get_distribution", "(", "\"torch\"", ")", ".", "version", "\n", "conditions", ".", "append", "(", "Version", "(", "torch_version", ")", ">=", "Version", "(", "max_torch", ")", ")", "\n", "reasons", ".", "append", "(", "f\"torch<{max_torch}\"", ")", "\n", "\n", "", "if", "min_python", ":", "\n", "            ", "py_version", "=", "(", "\n", "f\"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}\"", "\n", ")", "\n", "conditions", ".", "append", "(", "Version", "(", "py_version", ")", "<", "Version", "(", "min_python", ")", ")", "\n", "reasons", ".", "append", "(", "f\"python>={min_python}\"", ")", "\n", "\n", "", "if", "amp_apex", ":", "\n", "            ", "conditions", ".", "append", "(", "not", "_APEX_AVAILABLE", ")", "\n", "reasons", ".", "append", "(", "\"NVIDIA Apex\"", ")", "\n", "\n", "", "if", "skip_windows", ":", "\n", "            ", "conditions", ".", "append", "(", "_IS_WINDOWS", ")", "\n", "reasons", ".", "append", "(", "\"does not run on Windows\"", ")", "\n", "\n", "", "if", "rpc", ":", "\n", "            ", "conditions", ".", "append", "(", "not", "_RPC_AVAILABLE", ")", "\n", "reasons", ".", "append", "(", "\"RPC\"", ")", "\n", "\n", "", "if", "fairscale", ":", "\n", "            ", "conditions", ".", "append", "(", "not", "_FAIRSCALE_AVAILABLE", ")", "\n", "reasons", ".", "append", "(", "\"Fairscale\"", ")", "\n", "\n", "", "if", "deepspeed", ":", "\n", "            ", "conditions", ".", "append", "(", "not", "_DEEPSPEED_AVAILABLE", ")", "\n", "reasons", ".", "append", "(", "\"Deepspeed\"", ")", "\n", "\n", "", "reasons", "=", "[", "rs", "for", "cond", ",", "rs", "in", "zip", "(", "conditions", ",", "reasons", ")", "if", "cond", "]", "\n", "return", "pytest", ".", "mark", ".", "skipif", "(", "\n", "condition", "=", "any", "(", "conditions", ")", ",", "\n", "reason", "=", "f\"Requires: [{' + '.join(reasons)}]\"", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n"]]}