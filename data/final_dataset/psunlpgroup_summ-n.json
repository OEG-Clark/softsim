{"home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.configue.Args.__init__": [[12, 16], ["set", "dir"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "contain", "=", "None", ")", ":", "\n", "        ", "self", ".", "__self__", "=", "contain", "\n", "self", ".", "__default__", "=", "None", "\n", "self", ".", "__default__", "=", "set", "(", "dir", "(", "self", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.configue.Args.__call__": [[17, 19], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__self__", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.configue.Args.__getattribute__": [[20, 26], ["object.__getattribute__", "object.__getattribute__", "dir"], "methods", ["home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.configue.Args.__getattribute__", "home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.configue.Args.__getattribute__"], ["", "def", "__getattribute__", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "[", ":", "2", "]", "==", "\"__\"", "and", "name", "[", "-", "2", ":", "]", "==", "\"__\"", ":", "\n", "            ", "return", "super", "(", ")", ".", "__getattribute__", "(", "name", ")", "\n", "", "if", "name", "not", "in", "dir", "(", "self", ")", ":", "\n", "            ", "return", "None", "\n", "", "return", "super", "(", ")", ".", "__getattribute__", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.configue.Args.__setattr__": [[27, 30], ["object.__setattr__"], "methods", ["home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.configue.Args.__setattr__"], ["", "def", "__setattr__", "(", "self", ",", "name", ",", "value", ")", ":", "\n", "        ", "if", "not", "(", "value", "is", "None", ")", "or", "(", "name", "[", ":", "2", "]", "==", "\"__\"", "and", "name", "[", "-", "2", ":", "]", "==", "\"__\"", ")", ":", "\n", "            ", "return", "super", "(", ")", ".", "__setattr__", "(", "name", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.configue.Args.__delattr__": [[31, 34], ["object.__delattr__", "dir"], "methods", ["home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.configue.Args.__delattr__"], ["", "", "def", "__delattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "in", "dir", "(", "self", ")", "and", "name", "not", "in", "self", ".", "__default__", ":", "\n", "            ", "super", "(", ")", ".", "__delattr__", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.configue.Args.__iter__": [[35, 37], ["list().__iter__", "list", "getattr", "set", "dir"], "methods", ["home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.configue.Args.__iter__"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "(", "arg", ",", "getattr", "(", "self", ",", "arg", ")", ")", "for", "arg", "in", "set", "(", "dir", "(", "self", ")", ")", "-", "self", ".", "__default__", ")", ".", "__iter__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.configue.Args.__len__": [[38, 40], ["len", "set", "dir"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "set", "(", "dir", "(", "self", ")", ")", "-", "self", ".", "__default__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.configue.String.to_basic": [[43, 64], ["int", "string.strip", "float"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "to_basic", "(", "string", ")", ":", "\n", "        ", "\"\"\"\n        Convert the String to what it really means.\n        For example, \"true\" --> True as a bool value\n        :param string:\n        :return:\n        \"\"\"", "\n", "try", ":", "\n", "            ", "return", "int", "(", "string", ")", "\n", "", "except", "ValueError", ":", "\n", "            ", "try", ":", "\n", "                ", "return", "float", "(", "string", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "pass", "\n", "", "", "if", "string", "in", "[", "\"True\"", ",", "\"true\"", "]", ":", "\n", "            ", "return", "True", "\n", "", "elif", "string", "in", "[", "\"False\"", ",", "\"false\"", "]", ":", "\n", "            ", "return", "False", "\n", "", "else", ":", "\n", "            ", "return", "string", ".", "strip", "(", "\"\\\"'\"", ")", "# for those we want to add space before and after the string", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.configue.Configure.get_file_cfg": [[67, 82], ["configue.Args", "configparser.ConfigParser", "configparser.ConfigParser.read", "configparser.ConfigParser.sections", "setattr", "configparser.ConfigParser.items", "configue.Args", "setattr", "getattr", "configue.String.to_basic"], "methods", ["home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.configue.String.to_basic"], ["    ", "@", "staticmethod", "\n", "def", "get_file_cfg", "(", "file", ")", ":", "\n", "        ", "\"\"\"\n        get configurations in file.\n        :param file:\n        :return: configure args\n        \"\"\"", "\n", "cfgargs", "=", "Args", "(", ")", "\n", "parser", "=", "configparser", ".", "ConfigParser", "(", ")", "\n", "parser", ".", "read", "(", "file", ")", "\n", "for", "section", "in", "parser", ".", "sections", "(", ")", ":", "\n", "            ", "setattr", "(", "cfgargs", ",", "section", ",", "Args", "(", ")", ")", "\n", "for", "item", "in", "parser", ".", "items", "(", "section", ")", ":", "\n", "                ", "setattr", "(", "getattr", "(", "cfgargs", ",", "section", ")", ",", "item", "[", "0", "]", ",", "String", ".", "to_basic", "(", "item", "[", "1", "]", ")", ")", "\n", "", "", "return", "cfgargs", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.configue.Configure.refresh_args_by_file_cfg": [[83, 104], ["configue.Configure.get_file_cfg", "configue.Args", "arg_name.split", "getattr", "getattr", "setattr", "getattr", "setattr", "configue.Args"], "methods", ["home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.configue.Configure.get_file_cfg"], ["", "@", "staticmethod", "\n", "def", "refresh_args_by_file_cfg", "(", "file", ",", "prev_args", ")", ":", "\n", "        ", "args", "=", "Configure", ".", "get_file_cfg", "(", "file", ")", "\n", "if", "args", ".", "dir", "is", "not", "Args", ":", "\n", "            ", "args", ".", "dir", "=", "Args", "(", ")", "\n", "", "args", ".", "dir", ".", "model", "=", "DEFAULT_MODEL_DIR", "\n", "args", ".", "dir", ".", "dataset", "=", "DEFAULT_DATASET_DIR", "\n", "args", ".", "dir", ".", "configure", "=", "DEFAULT_CONFIGURE_DIR", "\n", "for", "arg_name", ",", "arg", "in", "prev_args", ":", "\n", "            ", "if", "arg", "is", "None", ":", "\n", "                ", "continue", "\n", "", "if", "arg_name", "!=", "\"cfg\"", ":", "\n", "                ", "names", "=", "arg_name", ".", "split", "(", "\".\"", ")", "\n", "cur", "=", "args", "\n", "for", "name", "in", "names", "[", ":", "-", "1", "]", ":", "\n", "                    ", "if", "getattr", "(", "cur", ",", "name", ")", "is", "None", ":", "\n", "                        ", "setattr", "(", "cur", ",", "name", ",", "Args", "(", ")", ")", "\n", "", "cur", "=", "getattr", "(", "cur", ",", "name", ")", "\n", "", "if", "getattr", "(", "cur", ",", "names", "[", "-", "1", "]", ")", "is", "None", ":", "\n", "                    ", "setattr", "(", "cur", ",", "names", "[", "-", "1", "]", ",", "arg", ")", "\n", "", "", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.configue.Configure.get_console_cfg": [[105, 140], ["configue.Args", "argparse.ArgumentParser", "configue.Configure.get_file_cfg", "argparse.ArgumentParser.parse_args", "argparse.ArgumentParser.add_argument", "setattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.configue.Configure.get_file_cfg"], ["", "@", "staticmethod", "\n", "def", "get_console_cfg", "(", "default_file", ")", ":", "\n", "        ", "\"\"\"\n        get configurations from console.\n        :param default_file:\n        :return:\n        \"\"\"", "\n", "conargs", "=", "Args", "(", ")", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "types", "=", "{", "\"bool\"", ":", "bool", ",", "\"int\"", ":", "int", ",", "\"float\"", ":", "float", "}", "\n", "args_label", "=", "Configure", ".", "get_file_cfg", "(", "default_file", ")", "\n", "for", "arg_name", ",", "arg", "in", "args_label", ":", "\n", "            ", "argw", "=", "{", "}", "\n", "if", "arg", ".", "help", ":", "\n", "                ", "argw", "[", "\"help\"", "]", "=", "arg", ".", "help", "\n", "", "if", "arg", ".", "type", "==", "\"implicit_bool\"", "or", "arg", ".", "type", "==", "\"imp_bool\"", ":", "\n", "                ", "argw", "[", "\"action\"", "]", "=", "\"store_true\"", "\n", "", "if", "arg", ".", "type", "==", "\"string\"", "or", "arg", ".", "type", "==", "\"str\"", "or", "arg", ".", "type", "is", "None", ":", "\n", "                ", "if", "arg", ".", "default", ":", "\n", "                    ", "if", "arg", ".", "default", "==", "\"None\"", "or", "\"none\"", ":", "\n", "                        ", "argw", "[", "\"default\"", "]", "=", "None", "\n", "", "else", ":", "\n", "                        ", "argw", "[", "\"default\"", "]", "=", "arg", ".", "default", "\n", "", "", "", "if", "arg", ".", "type", "in", "types", ":", "\n", "                ", "argw", "[", "\"type\"", "]", "=", "types", "[", "arg", ".", "type", "]", "\n", "if", "arg", ".", "default", ":", "\n", "                    ", "if", "arg", ".", "default", "==", "\"None\"", "or", "\"none\"", ":", "\n", "                        ", "argw", "[", "\"default\"", "]", "=", "None", "\n", "", "else", ":", "\n", "                        ", "argw", "[", "\"default\"", "]", "=", "types", "[", "arg", ".", "type", "]", "(", "arg", ".", "default", ")", "\n", "", "", "", "parser", ".", "add_argument", "(", "\"--\"", "+", "arg_name", ",", "**", "argw", ")", "\n", "", "tmpargs", "=", "parser", ".", "parse_args", "(", ")", "\n", "for", "arg_name", ",", "arg", "in", "args_label", ":", "\n", "            ", "setattr", "(", "conargs", ",", "arg_name", ",", "getattr", "(", "tmpargs", ",", "arg_name", ")", ")", "\n", "", "return", "conargs", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.configue.Configure.Get": [[141, 151], ["configue.Configure.get_file_cfg", "os.path.join", "configue.Args"], "methods", ["home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.configue.Configure.get_file_cfg"], ["", "@", "staticmethod", "\n", "def", "Get", "(", "cfg", ")", ":", "\n", "        ", "args", "=", "Configure", ".", "get_file_cfg", "(", "os", ".", "path", ".", "join", "(", "DEFAULT_CONFIGURE_DIR", ",", "cfg", ")", ")", "\n", "\n", "if", "args", ".", "dir", "is", "not", "Args", ":", "\n", "            ", "args", ".", "dir", "=", "Args", "(", ")", "\n", "", "args", ".", "dir", ".", "model", "=", "DEFAULT_MODEL_DIR", "\n", "args", ".", "dir", ".", "dataset", "=", "DEFAULT_DATASET_DIR", "\n", "args", ".", "dir", ".", "configure", "=", "DEFAULT_CONFIGURE_DIR", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.tools.get_dataloader": [[6, 9], ["importlib.import_module"], "function", ["None"], ["def", "get_dataloader", "(", "loader", ")", ":", "\n", "    ", "Loader", "=", "importlib", ".", "import_module", "(", "'dataset_loader.{}'", ".", "format", "(", "loader", ")", ")", ".", "Loader", "\n", "return", "Loader", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.tools.get_model": [[11, 14], ["importlib.import_module"], "function", ["None"], ["", "def", "get_model", "(", "model", ")", ":", "\n", "    ", "Model", "=", "importlib", ".", "import_module", "(", "'models.{}'", ".", "format", "(", "model", ")", ")", ".", "Model", "\n", "return", "Model", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.tools.get_constructor": [[16, 19], ["importlib.import_module"], "function", ["None"], ["", "def", "get_constructor", "(", "constructor", ")", ":", "\n", "    ", "Constructor", "=", "importlib", ".", "import_module", "(", "'{}'", ".", "format", "(", "constructor", ")", ")", ".", "Constructor", "\n", "return", "Constructor", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.tools.get_evaluator": [[21, 24], ["importlib.import_module"], "function", ["None"], ["", "def", "get_evaluator", "(", "evaluate_tool", ")", ":", "\n", "    ", "EvaluateTool", "=", "importlib", ".", "import_module", "(", "'{}'", ".", "format", "(", "evaluate_tool", ")", ")", ".", "EvaluateTool", "\n", "return", "EvaluateTool", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.tools.download_nltk": [[28, 37], ["nltk.download"], "function", ["None"], ["def", "download_nltk", "(", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "_create_unverified_https_context", "=", "ssl", ".", "_create_unverified_context", "\n", "", "except", "AttributeError", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "ssl", ".", "_create_default_https_context", "=", "_create_unverified_https_context", "\n", "\n", "", "nltk", ".", "download", "(", "\"punkt\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.tools.add_sys_path": [[39, 43], ["os.path.abspath", "sys.path.append", "os.path.dirname", "os.path.split"], "function", ["None"], ["", "def", "add_sys_path", "(", ")", ":", "\n", "    ", "curPath", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ")", "\n", "rootPath", "=", "os", ".", "path", ".", "split", "(", "curPath", ")", "[", "0", "]", "\n", "sys", ".", "path", ".", "append", "(", "rootPath", ")", "", "", ""]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.AnyROUGE.make_html_safe": [[6, 10], ["s.replace.replace", "s.replace.replace"], "function", ["None"], ["def", "make_html_safe", "(", "s", ")", ":", "\n", "    ", "s", "=", "s", ".", "replace", "(", "\"<\"", ",", "\"&lt;\"", ")", "\n", "s", "=", "s", ".", "replace", "(", "\">\"", ",", "\"&gt;\"", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.AnyROUGE.rouge": [[12, 59], ["os.path.join", "os.path.join", "range", "ThirdParty.ROUGE.pyrouge.Rouge155", "pyrouge.Rouge155.convert_and_evaluate", "pyrouge.Rouge155.output_to_dict", "print", "print", "shutil.rmtree", "shutil.rmtree", "len", "len", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "len", "round", "round", "round", "round", "round", "round", "round", "round", "round", "open", "nltk.sent_tokenize", "f.write", "open", "nltk.sent_tokenize", "f.write", "os.path.join", "os.path.join", "str", "str", "str", "AnyROUGE.make_html_safe", "AnyROUGE.make_html_safe"], "function", ["home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.AnyROUGE.make_html_safe", "home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.AnyROUGE.make_html_safe"], ["", "def", "rouge", "(", "ref", ",", "hyp", ",", "log_path", ")", ":", "\n", "    ", "assert", "len", "(", "ref", ")", "==", "len", "(", "hyp", ")", "\n", "ref_dir", "=", "os", ".", "path", ".", "join", "(", "log_path", ",", "'reference'", ")", "\n", "cand_dir", "=", "os", ".", "path", ".", "join", "(", "log_path", ",", "'candidate'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "ref_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "ref_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "cand_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "cand_dir", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "ref", ")", ")", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "ref_dir", ",", "\"%06d_reference.txt\"", "%", "i", ")", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "tokenized_ref", "=", "sent_tokenize", "(", "ref", "[", "i", "]", ")", "\n", "tokenized_ref", "=", "'\\n'", ".", "join", "(", "tokenized_ref", ")", "\n", "f", ".", "write", "(", "make_html_safe", "(", "tokenized_ref", ")", "+", "'\\n'", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "cand_dir", ",", "\"%06d_candidate.txt\"", "%", "i", ")", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "tokenized_cand", "=", "sent_tokenize", "(", "hyp", "[", "i", "]", ")", "\n", "tokenized_cand", "=", "'\\n'", ".", "join", "(", "tokenized_cand", ")", "\n", "f", ".", "write", "(", "make_html_safe", "(", "tokenized_cand", ")", "+", "'\\n'", ")", "\n", "\n", "", "", "r", "=", "pyrouge", ".", "Rouge155", "(", ")", "\n", "r", ".", "model_filename_pattern", "=", "'#ID#_reference.txt'", "\n", "r", ".", "system_filename_pattern", "=", "'(\\d+)_candidate.txt'", "\n", "r", ".", "model_dir", "=", "ref_dir", "\n", "r", ".", "system_dir", "=", "cand_dir", "\n", "rouge_results", "=", "r", ".", "convert_and_evaluate", "(", ")", "\n", "scores", "=", "r", ".", "output_to_dict", "(", "rouge_results", ")", "\n", "recall", "=", "[", "round", "(", "scores", "[", "\"rouge_1_recall\"", "]", "*", "100", ",", "2", ")", ",", "\n", "round", "(", "scores", "[", "\"rouge_2_recall\"", "]", "*", "100", ",", "2", ")", ",", "\n", "round", "(", "scores", "[", "\"rouge_l_recall\"", "]", "*", "100", ",", "2", ")", "]", "\n", "precision", "=", "[", "round", "(", "scores", "[", "\"rouge_1_precision\"", "]", "*", "100", ",", "2", ")", ",", "\n", "round", "(", "scores", "[", "\"rouge_2_precision\"", "]", "*", "100", ",", "2", ")", ",", "\n", "round", "(", "scores", "[", "\"rouge_l_precision\"", "]", "*", "100", ",", "2", ")", "]", "\n", "f_score", "=", "[", "round", "(", "scores", "[", "\"rouge_1_f_score\"", "]", "*", "100", ",", "2", ")", ",", "\n", "round", "(", "scores", "[", "\"rouge_2_f_score\"", "]", "*", "100", ",", "2", ")", ",", "\n", "round", "(", "scores", "[", "\"rouge_l_f_score\"", "]", "*", "100", ",", "2", ")", "]", "\n", "print", "(", "\"F_measure: %s Recall: %s Precision: %s\\n\"", "\n", "%", "(", "str", "(", "f_score", ")", ",", "str", "(", "recall", ")", ",", "str", "(", "precision", ")", ")", ")", "\n", "\n", "# remember to delete folder", "\n", "# with open(ref_dir + \"rougeScore\", 'w+', encoding='utf-8') as f:", "\n", "#     f.write(\"F_measure: %s Recall: %s Precision: %s\\n\"", "\n", "#             % (str(f_score), str(recall), str(precision)))", "\n", "\n", "print", "(", "\"deleting {}\"", ".", "format", "(", "ref_dir", ")", ")", "\n", "shutil", ".", "rmtree", "(", "ref_dir", ")", "\n", "shutil", ".", "rmtree", "(", "cand_dir", ")", "\n", "\n", "return", "f_score", "[", ":", "]", ",", "recall", "[", ":", "]", ",", "precision", "[", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.AnyROUGE.readline_aslist": [[61, 67], ["open", "data.append", "line.strip().replace", "line.strip"], "function", ["None"], ["", "def", "readline_aslist", "(", "path", ")", ":", "\n", "    ", "data", "=", "[", "]", "\n", "with", "open", "(", "path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "file", ":", "\n", "        ", "for", "line", "in", "file", ":", "\n", "            ", "data", ".", "append", "(", "line", ".", "strip", "(", ")", ".", "replace", "(", "'\\n'", ",", "''", ")", ")", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.dataset.write_list_asline": [[4, 8], ["open", "file.write", "sample.strip"], "function", ["None"], ["def", "write_list_asline", "(", "path", ",", "data", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "file", ":", "\n", "        ", "for", "sample", "in", "data", ":", "\n", "            ", "file", ".", "write", "(", "sample", ".", "strip", "(", ")", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.dataset.read_list_asline": [[9, 15], ["open", "data.append", "line.strip"], "function", ["None"], ["", "", "", "def", "read_list_asline", "(", "path", ")", ":", "\n", "    ", "data", "=", "[", "]", "\n", "with", "open", "(", "path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "file", ":", "\n", "        ", "for", "line", "in", "file", ":", "\n", "            ", "data", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.dataset.assertion_statis": [[17, 26], ["print", "print", "print", "print", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["None"], ["", "def", "assertion_statis", "(", "source_data", ",", "target_data", ",", "prompt", ")", ":", "\n", "    ", "assert", "len", "(", "source_data", "[", "'train'", "]", ")", "==", "len", "(", "target_data", "[", "'train'", "]", ")", "\n", "assert", "len", "(", "source_data", "[", "'val'", "]", ")", "==", "len", "(", "target_data", "[", "'val'", "]", ")", "\n", "assert", "len", "(", "source_data", "[", "'test'", "]", ")", "==", "len", "(", "target_data", "[", "'test'", "]", ")", "\n", "\n", "print", "(", "prompt", ")", "\n", "print", "(", "\"Train size:\"", ",", "len", "(", "source_data", "[", "'train'", "]", ")", ")", "\n", "print", "(", "\"Val size:\"", ",", "len", "(", "source_data", "[", "'val'", "]", ")", ")", "\n", "print", "(", "\"Test size:\"", ",", "len", "(", "source_data", "[", "'test'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.dataset.write_finegrained_dataset": [[28, 37], ["os.path.exists", "os.makedirs", "os.path.join", "dataset.write_list_asline", "os.path.join", "dataset.write_list_asline"], "function", ["home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.dataset.write_list_asline", "home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.dataset.write_list_asline"], ["", "def", "write_finegrained_dataset", "(", "source", ",", "target", ",", "stage_folder", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "stage_folder", ")", "is", "False", ":", "\n", "        ", "os", ".", "makedirs", "(", "stage_folder", ")", "\n", "", "for", "data_type", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "        ", "source_path", "=", "os", ".", "path", ".", "join", "(", "stage_folder", ",", "f\"{data_type}.source\"", ")", "\n", "write_list_asline", "(", "source_path", ",", "source", "[", "data_type", "]", ")", "\n", "\n", "target_path", "=", "os", ".", "path", ".", "join", "(", "stage_folder", ",", "f\"{data_type}.target\"", ")", "\n", "write_list_asline", "(", "target_path", ",", "target", "[", "data_type", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.dataset.load_split_aslist": [[39, 48], ["os.path.join", "os.path.exists", "dataset.read_list_asline"], "function", ["home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.dataset.read_list_asline"], ["", "", "def", "load_split_aslist", "(", "folder_path", ",", "suffix", "=", "'source'", ")", ":", "\n", "    ", "data", "=", "{", "}", "\n", "for", "data_type", "in", "[", "'train'", ",", "'test'", ",", "'val'", "]", ":", "\n", "        ", "split_path", "=", "os", ".", "path", ".", "join", "(", "folder_path", ",", "f\"{data_type}.{suffix}\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "split_path", ")", ":", "\n", "            ", "data", "[", "data_type", "]", "=", "read_list_asline", "(", "split_path", ")", "\n", "", "else", ":", "\n", "            ", "data", "[", "data_type", "]", "=", "[", "]", "\n", "", "", "return", "data", "", "", ""]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.data_segment.target_matching.TargetSegmentor.__init__": [[14, 37], ["getattr", "models.data_segment.segmentor_core.TargetSplitterCore", "os.path.join", "os.path.join", "read_list_asline", "os.path.join", "read_list_asline"], "methods", ["home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.dataset.read_list_asline", "home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.dataset.read_list_asline"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "data", ":", "Dict", "[", "str", ",", "List", "]", "=", "None", ",", "labels", ":", "Dict", "[", "str", ",", "List", "]", "=", "None", ",", "load_from_file", "=", "True", ")", ":", "\n", "        ", "self", ".", "cur_stage", "=", "cfg", ".", "cur_stage", "\n", "self", ".", "cfg", "=", "getattr", "(", "cfg", ",", "f\"stage{self.cur_stage}\"", ")", "\n", "self", ".", "output_path", "=", "cfg", ".", "train", ".", "output_path", "\n", "self", ".", "splitter", "=", "TargetSplitterCore", "(", ")", "\n", "\n", "# load source and targets", "\n", "if", "load_from_file", "is", "True", ":", "\n", "            ", "for", "data_type", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "# read data from the output of previous stage", "\n", "                ", "stage_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_path", ",", "f\"stage_{self.cur_stage}\"", ")", "\n", "\n", "data_path", "=", "os", ".", "path", ".", "join", "(", "stage_path", ",", "f\"{data_type}.source\"", ")", "\n", "self", ".", "data", "=", "read_list_asline", "(", "data_path", ")", "\n", "label_path", "=", "os", ".", "path", ".", "join", "(", "stage_path", ",", "f\"{data_type}_duplicated.target\"", ")", "\n", "self", ".", "labels", "=", "read_list_asline", "(", "label_path", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "data", "=", "data", "\n", "self", ".", "labels", "=", "labels", "\n", "\n", "# store segmented targets, and the unordered segment", "\n", "", "self", ".", "target", "=", "{", "'train'", ":", "[", "]", ",", "'val'", ":", "[", "]", ",", "'test'", ":", "[", "]", "}", "\n", "self", ".", "best_label_with_scores", "=", "{", "'train'", ":", "[", "]", ",", "'val'", ":", "[", "]", ",", "'test'", ":", "[", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.data_segment.target_matching.TargetSegmentor.segment": [[38, 49], ["list", "min", "multiprocessing.Pool", "tqdm.tqdm.tqdm", "zip", "multiprocessing.cpu_count", "enumerate", "target_matching.TargetSegmentor.target[].append", "target_matching.TargetSegmentor.best_label_with_scores[].append", "range", "multiprocessing.Pool.starmap", "new_tar.strip", "len"], "methods", ["None"], ["", "def", "segment", "(", "self", ")", "->", "Tuple", "[", "Dict", "[", "str", ",", "list", "]", ",", "Dict", "[", "str", ",", "list", "]", "]", ":", "\n", "        ", "for", "data_type", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "# we use multiprocessing to accelerate the split process", "\n", "            ", "tasks", "=", "list", "(", "zip", "(", "self", ".", "data", "[", "data_type", "]", ",", "self", ".", "labels", "[", "data_type", "]", ",", "range", "(", "len", "(", "self", ".", "data", "[", "data_type", "]", ")", ")", ")", ")", "\n", "cores", "=", "min", "(", "multiprocessing", ".", "cpu_count", "(", ")", ",", "self", ".", "cfg", ".", "cores_used", ")", "\n", "pool", "=", "multiprocessing", ".", "Pool", "(", "processes", "=", "cores", ")", "\n", "for", "i", ",", "(", "new_sents", ",", "new_tar", ")", "in", "tqdm", "(", "enumerate", "(", "pool", ".", "starmap", "(", "self", ".", "splitter", ".", "fast_rouge", ",", "tasks", ")", ")", ")", ":", "\n", "                ", "self", ".", "target", "[", "data_type", "]", ".", "append", "(", "new_tar", ".", "strip", "(", ")", ")", "\n", "self", ".", "best_label_with_scores", "[", "data_type", "]", ".", "append", "(", "new_sents", ")", "\n", "\n", "", "", "return", "self", ".", "target", ",", "self", ".", "best_label_with_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.data_segment.target_matching.TargetSegmentor.save": [[50, 62], ["os.path.join", "os.path.exists", "os.makedirs", "os.path.join", "os.path.join", "write_list_asline", "open", "json.dump"], "methods", ["home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.dataset.write_list_asline"], ["", "def", "save", "(", "self", ")", ":", "\n", "        ", "stage_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_path", ",", "f\"stage_{self.cur_stage}\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "stage_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "stage_path", ")", "\n", "\n", "", "for", "data_type", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "            ", "target_output_path", "=", "os", ".", "path", ".", "join", "(", "stage_path", ",", "f\"{data_type}.target\"", ")", "\n", "best_label_path", "=", "os", ".", "path", ".", "join", "(", "stage_path", ",", "f\"{data_type}_fastRouge.json\"", ")", "\n", "\n", "write_list_asline", "(", "target_output_path", ",", "self", ".", "target", "[", "data_type", "]", ")", "\n", "with", "open", "(", "best_label_path", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "file", ":", "\n", "                ", "json", ".", "dump", "(", "self", ".", "best_label_with_scores", "[", "data_type", "]", ",", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.data_segment.segmentor_core.SourceSplitterCore.__init__": [[9, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "token_per_seg", ")", ":", "\n", "        ", "self", ".", "k", "=", "token_per_seg", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.data_segment.segmentor_core.SourceSplitterCore.segment_one_sample": [[12, 30], ["range", "len", "len", "len", "trans.replace().replace().replace.replace().replace().replace.replace().replace().replace", "samples.append", "trans.replace().replace().replace.replace().replace().replace.split", "cur.append", "trans.replace().replace().replace.replace().replace().replace.replace().replace", "samples.append", "trans.replace().replace().replace.replace().replace().replace.replace"], "methods", ["None"], ["", "def", "segment_one_sample", "(", "self", ",", "sou", ")", ":", "\n", "        ", "samples", "=", "[", "]", "\n", "cur", "=", "[", "]", "\n", "count", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "sou", ")", ")", ":", "\n", "            ", "trans", "=", "sou", "[", "i", "]", "# trans is a turn", "\n", "trans_len", "=", "len", "(", "trans", ".", "split", "(", "' '", ")", ")", "\n", "trans", "=", "trans", ".", "replace", "(", "'\\n'", ",", "' '", ")", ".", "replace", "(", "'\\r'", ",", "''", ")", ".", "replace", "(", "'@@ '", ",", "''", ")", "\n", "if", "count", "+", "trans_len", ">", "self", ".", "k", ":", "\n", "                ", "if", "count", "!=", "0", ":", "samples", ".", "append", "(", "cur", ")", "\n", "count", "=", "trans_len", "\n", "cur", "=", "[", "trans", "]", "\n", "", "else", ":", "\n", "                ", "cur", ".", "append", "(", "trans", ")", "\n", "count", "+=", "trans_len", "\n", "", "", "if", "len", "(", "cur", ")", ":", "\n", "            ", "samples", ".", "append", "(", "cur", ")", "\n", "", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.data_segment.segmentor_core.TargetSplitterCore.__init__": [[33, 36], ["rouge.Rouge"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "max_length", ":", "int", "=", "100", ")", ":", "\n", "        ", "self", ".", "max_length", "=", "max_length", "\n", "self", ".", "rouge", "=", "Rouge", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.data_segment.segmentor_core.TargetSplitterCore._get_rouge_from_ngram": [[37, 45], ["len", "len", "evaluated_ngrams.intersection", "len", "f_r_p_rouge_n"], "methods", ["None"], ["", "def", "_get_rouge_from_ngram", "(", "self", ",", "reference_ngrams", ":", "Ngrams", ",", "evaluated_ngrams", ":", "Ngrams", ")", "->", "dict", ":", "\n", "        ", "reference_count", "=", "len", "(", "reference_ngrams", ")", "\n", "evaluated_count", "=", "len", "(", "evaluated_ngrams", ")", "\n", "\n", "# Gets the overlapping ngrams between evaluated and reference", "\n", "overlapping_ngrams", "=", "evaluated_ngrams", ".", "intersection", "(", "reference_ngrams", ")", "\n", "overlapping_count", "=", "len", "(", "overlapping_ngrams", ")", "\n", "return", "f_r_p_rouge_n", "(", "evaluated_count", ",", "reference_count", ",", "overlapping_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.data_segment.segmentor_core.TargetSplitterCore._text_to_ngrams": [[46, 49], ["list", "Ngrams", "nltk.ngrams", "nltk.word_tokenize"], "methods", ["None"], ["", "def", "_text_to_ngrams", "(", "self", ",", "text", ",", "n", "=", "1", ")", ":", "\n", "        ", "ngrams", "=", "list", "(", "nltk", ".", "ngrams", "(", "nltk", ".", "word_tokenize", "(", "text", ")", ",", "n", ")", ")", "\n", "return", "Ngrams", "(", "ngrams", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.data_segment.segmentor_core.TargetSplitterCore.fast_rouge": [[51, 83], ["Ngrams", "segmentor_core.TargetSplitterCore._text_to_ngrams", "len", "range", "list", "list.sort", "min", "max", "segmentor_core.TargetSplitterCore._text_to_ngrams", "print", "set", "segmentor_core.TargetSplitterCore._text_to_ngrams", "enumerate", "segmentor_core.TargetSplitterCore._get_rouge_from_ngram", "best_sents.append", "len", "nltk.sent_tokenize", "segmentor_core.TargetSplitterCore._get_rouge_from_ngram", "segmentor_core.TargetSplitterCore.union"], "methods", ["home.repos.pwc.inspect_result.psunlpgroup_summ-n.data_segment.segmentor_core.TargetSplitterCore._text_to_ngrams", "home.repos.pwc.inspect_result.psunlpgroup_summ-n.data_segment.segmentor_core.TargetSplitterCore._text_to_ngrams", "home.repos.pwc.inspect_result.psunlpgroup_summ-n.data_segment.segmentor_core.TargetSplitterCore._text_to_ngrams", "home.repos.pwc.inspect_result.psunlpgroup_summ-n.data_segment.segmentor_core.TargetSplitterCore._get_rouge_from_ngram", "home.repos.pwc.inspect_result.psunlpgroup_summ-n.data_segment.segmentor_core.TargetSplitterCore._get_rouge_from_ngram"], ["", "def", "fast_rouge", "(", "self", ",", "sou", ",", "tar", ",", "name", "=", "None", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "cur_new", "=", "''", "\n", "cur_ngram", "=", "Ngrams", "(", ")", "\n", "best_score", "=", "0", "\n", "best_sents", "=", "[", "]", "\n", "\n", "# use ngram to represent each text", "\n", "sou", "=", "self", ".", "_text_to_ngrams", "(", "sou", ")", "\n", "seg", "=", "[", "(", "x", ",", "self", ".", "_text_to_ngrams", "(", "x", ")", ",", "i", ")", "for", "i", ",", "x", "in", "enumerate", "(", "nltk", ".", "sent_tokenize", "(", "tar", ")", ")", "]", "\n", "\n", "tot_len", "=", "len", "(", "seg", ")", "\n", "for", "i", "in", "range", "(", "min", "(", "self", ".", "max_length", ",", "tot_len", ")", ")", ":", "\n", "            ", "scores", "=", "[", "(", "x", ",", "self", ".", "_get_rouge_from_ngram", "(", "cur_ngram", ".", "union", "(", "seg_ngram", ")", ",", "sou", ")", ",", "i", ")", "\n", "for", "x", ",", "seg_ngram", ",", "i", "in", "seg", "]", "\n", "best_seg", "=", "max", "(", "scores", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", "[", "'f'", "]", ")", "\n", "seg", "=", "[", "x", "for", "x", "in", "seg", "if", "x", "[", "2", "]", "!=", "best_seg", "[", "2", "]", "]", "# remove dup", "\n", "cur_new", "+=", "' '", "+", "best_seg", "[", "0", "]", "\n", "cur_ngram", "=", "self", ".", "_text_to_ngrams", "(", "cur_new", ")", "\n", "cur_score", "=", "self", ".", "_get_rouge_from_ngram", "(", "cur_ngram", ",", "sou", ")", "[", "'f'", "]", "\n", "if", "cur_score", ">", "best_score", ":", "\n", "                ", "best_score", "=", "cur_score", "\n", "best_sents", ".", "append", "(", "best_seg", ")", "\n", "", "else", ":", "\n", "                ", "break", "\n", "\n", "", "", "if", "verbose", ":", "\n", "            ", "print", "(", "\"id:\"", ",", "name", ",", "\"input/output:\"", ",", "tot_len", ",", "len", "(", "best_sents", ")", ",", "\"best:\"", ",", "best_score", ")", "\n", "", "best_string", "=", "list", "(", "set", "(", "(", "x", "[", "0", "]", ",", "x", "[", "2", "]", ")", "for", "x", "in", "best_sents", ")", ")", "\n", "best_string", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "best_string", "=", "' '", ".", "join", "(", "[", "x", "[", "0", "]", "for", "x", "in", "best_string", "]", ")", "\n", "\n", "return", "best_sents", ",", "best_string", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.data_segment.segmentor_core.TargetSplitterCore.seg_based_on_rouge": [[84, 109], ["len", "range", "list", "list.sort", "min", "scores.sort", "print", "set", "enumerate", "best_sents.append", "len", "nltk.sent_tokenize", "segmentor_core.TargetSplitterCore.rouge.get_scores", "segmentor_core.TargetSplitterCore.rouge.get_scores"], "methods", ["None"], ["", "def", "seg_based_on_rouge", "(", "self", ",", "sou", ",", "tar", ",", "name", "=", "None", ",", "verbose", "=", "False", ")", "->", "(", "list", ",", "str", ")", ":", "\n", "        ", "cur_new", "=", "''", "\n", "best_score", "=", "0", "\n", "best_sents", "=", "[", "]", "\n", "seg", "=", "[", "(", "x", ",", "i", ")", "for", "i", ",", "x", "in", "enumerate", "(", "nltk", ".", "sent_tokenize", "(", "tar", ")", ")", "]", "\n", "tot_len", "=", "len", "(", "seg", ")", "\n", "for", "i", "in", "range", "(", "min", "(", "self", ".", "max_length", ",", "tot_len", ")", ")", ":", "\n", "            ", "scores", "=", "[", "(", "x", ",", "self", ".", "rouge", ".", "get_scores", "(", "cur_new", "+", "' '", "+", "x", ",", "sou", ")", ",", "i", ")", "for", "x", ",", "i", "in", "seg", "]", "\n", "scores", ".", "sort", "(", "key", "=", "lambda", "x", ":", "-", "x", "[", "1", "]", "[", "0", "]", "[", "'rouge-1'", "]", "[", "'f'", "]", ")", "\n", "cur_new", "+=", "scores", "[", "0", "]", "[", "0", "]", "+", "' '", "\n", "seg", "=", "[", "x", "for", "x", "in", "seg", "if", "x", "[", "1", "]", "!=", "scores", "[", "0", "]", "[", "2", "]", "]", "# remove dup", "\n", "cur_score", "=", "self", ".", "rouge", ".", "get_scores", "(", "cur_new", ",", "sou", ")", "[", "0", "]", "[", "'rouge-1'", "]", "[", "'f'", "]", "\n", "if", "cur_score", ">", "best_score", ":", "\n", "                ", "best_score", "=", "cur_score", "\n", "best_sents", ".", "append", "(", "scores", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "break", "\n", "\n", "", "", "if", "verbose", ":", "\n", "            ", "print", "(", "\"id:\"", ",", "name", ",", "\"input/output:\"", ",", "tot_len", ",", "len", "(", "best_sents", ")", ",", "\"best:\"", ",", "best_score", ")", "\n", "", "best_string", "=", "list", "(", "set", "(", "(", "x", "[", "0", "]", ",", "x", "[", "2", "]", ")", "for", "x", "in", "best_sents", ")", ")", "\n", "best_string", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "best_string", "=", "' '", ".", "join", "(", "[", "x", "[", "0", "]", "for", "x", "in", "best_string", "]", ")", "\n", "\n", "return", "best_sents", ",", "best_string", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.data_segment.source_segment.SourceSegmentor.__init__": [[10, 41], ["getattr", "models.data_segment.segmentor_core.SourceSplitterCore", "os.path.join", "os.path.join", "read_list_asline", "os.path.join", "read_list_asline"], "methods", ["home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.dataset.read_list_asline", "home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.dataset.read_list_asline"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "data", ":", "Dict", "[", "str", ",", "List", "]", "=", "None", ",", "labels", ":", "Dict", "[", "str", ",", "List", "]", "=", "None", ",", "load_from_file", "=", "True", ")", ":", "\n", "        ", "self", ".", "cur_stage", "=", "cfg", ".", "cur_stage", "\n", "self", ".", "cfg", "=", "getattr", "(", "cfg", ",", "f\"stage{self.cur_stage}\"", ")", "\n", "self", ".", "output_path", "=", "cfg", ".", "train", ".", "output_path", "\n", "self", ".", "splitter", "=", "SourceSplitterCore", "(", "self", ".", "cfg", ".", "input_max_token", "-", "34", ")", "# 34 tokens for question, if any", "\n", "\n", "# load source and targets", "\n", "if", "load_from_file", "is", "True", ":", "\n", "            ", "for", "data_type", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "# we use the coarse summary as the intput to the next stage, except for stage 0", "\n", "                ", "if", "self", ".", "cur_stage", "==", "1", ":", "\n", "                    ", "suffix", "=", "'source'", "\n", "", "else", ":", "\n", "                    ", "suffix", "=", "'hypo'", "\n", "\n", "# read data from the output of previous stage", "\n", "", "stage_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_path", ",", "f\"stage_{self.cur_stage - 1}\"", ")", "\n", "\n", "data_path", "=", "os", ".", "path", ".", "join", "(", "stage_path", ",", "f\"{data_type}.{suffix}\"", ")", "\n", "self", ".", "data", "=", "read_list_asline", "(", "data_path", ")", "\n", "# we always pick the target from stage 0 as the input target", "\n", "label_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_path", ",", "\"stage_0\"", ",", "f\"{data_type}.target\"", ")", "\n", "self", ".", "labels", "=", "read_list_asline", "(", "label_path", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "data", "=", "data", "\n", "self", ".", "labels", "=", "labels", "\n", "\n", "# store segmented source and targets", "\n", "", "self", ".", "split_source", "=", "{", "'train'", ":", "[", "]", ",", "'val'", ":", "[", "]", ",", "'test'", ":", "[", "]", "}", "\n", "self", ".", "dupli_target", "=", "{", "'train'", ":", "[", "]", ",", "'val'", ":", "[", "]", ",", "'test'", ":", "[", "]", "}", "\n", "self", ".", "count", "=", "{", "'train'", ":", "[", "]", ",", "'val'", ":", "[", "]", ",", "'test'", ":", "[", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.data_segment.source_segment.SourceSegmentor.segment": [[42, 57], ["enumerate", "zip", "source_segment.SourceSegmentor.splitter.segment_one_sample", "source_segment.SourceSegmentor.count[].append", "source_segment.SourceSegmentor.split_source[].append", "source_segment.SourceSegmentor.dupli_target[].append", "len", "tran.strip", "target.strip"], "methods", ["home.repos.pwc.inspect_result.psunlpgroup_summ-n.data_segment.segmentor_core.SourceSplitterCore.segment_one_sample"], ["", "def", "segment", "(", "self", ",", "query", "=", "None", ")", "->", "Tuple", "[", "Dict", "[", "str", ",", "list", "]", ",", "Dict", "[", "str", ",", "list", "]", ",", "Dict", "[", "str", ",", "List", "[", "int", "]", "]", "]", ":", "\n", "        ", "for", "data_type", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "# source segmentation, target duplication, record the counting file", "\n", "            ", "for", "i", ",", "(", "trans", ",", "target", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "data", "[", "data_type", "]", ",", "self", ".", "labels", "[", "data_type", "]", ")", ")", ":", "\n", "                ", "split_trans", "=", "self", ".", "splitter", ".", "segment_one_sample", "(", "trans", ")", "\n", "split_trans", "=", "[", "' '", ".", "join", "(", "x", ")", "for", "x", "in", "split_trans", "]", "\n", "if", "query", "is", "not", "None", ":", "\n", "                    ", "split_trans", "=", "[", "query", "[", "i", "]", "]", "+", "split_trans", "\n", "\n", "", "for", "tran", "in", "split_trans", ":", "\n", "                    ", "self", ".", "split_source", "[", "data_type", "]", ".", "append", "(", "tran", ".", "strip", "(", ")", "+", "'\\n'", ")", "\n", "self", ".", "dupli_target", "[", "data_type", "]", ".", "append", "(", "target", ".", "strip", "(", ")", "+", "'\\n'", ")", "\n", "\n", "", "self", ".", "count", "[", "data_type", "]", ".", "append", "(", "len", "(", "split_trans", ")", ")", "\n", "", "", "return", "self", ".", "split_source", ",", "self", ".", "dupli_target", ",", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.data_segment.source_segment.SourceSegmentor.save": [[58, 73], ["os.path.join", "os.path.exists", "os.makedirs", "os.path.join", "os.path.join", "os.path.join", "write_list_asline", "write_list_asline", "open", "json.dump"], "methods", ["home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.dataset.write_list_asline", "home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.dataset.write_list_asline"], ["", "def", "save", "(", "self", ")", ":", "\n", "        ", "stage_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_path", ",", "f\"stage_{self.cur_stage}\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "stage_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "stage_path", ")", "\n", "\n", "", "for", "data_type", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "            ", "source_output_path", "=", "os", ".", "path", ".", "join", "(", "stage_path", ",", "f\"{data_type}.source\"", ")", "\n", "target_output_path", "=", "os", ".", "path", ".", "join", "(", "stage_path", ",", "f\"{data_type}_duplicated.target\"", ")", "\n", "count_output_path", "=", "os", ".", "path", ".", "join", "(", "stage_path", ",", "f\"{data_type}_count.json\"", ")", "\n", "\n", "write_list_asline", "(", "source_output_path", ",", "self", ".", "split_source", "[", "data_type", "]", ")", "\n", "write_list_asline", "(", "target_output_path", ",", "self", ".", "dupli_target", "[", "data_type", "]", ")", "\n", "\n", "with", "open", "(", "count_output_path", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "file", ":", "\n", "                ", "json", ".", "dump", "(", "self", ".", "count", "[", "data_type", "]", ",", "file", ")", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.gen_summary.inference.SummaryGenerator.__init__": [[10, 29], ["getattr", "fairseq.models.bart.BARTModel.from_pretrained", "inference.SummaryGenerator.bart.cuda", "inference.SummaryGenerator.bart.eval", "inference.SummaryGenerator.bart.half"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "data", ":", "Dict", "[", "str", ",", "list", "]", ",", "fine_grained", "=", "False", ",", "test_mode", "=", "False", ")", ":", "\n", "        ", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "stage_cfg", "=", "getattr", "(", "cfg", ",", "f\"stage{cfg.cur_stage}\"", ")", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "fine_grained", "=", "fine_grained", "\n", "self", ".", "test_mode", "=", "test_mode", "\n", "\n", "self", ".", "bart", "=", "BARTModel", ".", "from_pretrained", "(", "\n", "self", ".", "stage_cfg", ".", "trainer_output_folder", ",", "\n", "checkpoint_file", "=", "'checkpoints/checkpoint_best.pt'", ",", "\n", "data_name_or_path", "=", "\"./bin\"", "\n", ")", "\n", "\n", "self", ".", "bart", ".", "cuda", "(", ")", "\n", "self", ".", "bart", ".", "eval", "(", ")", "\n", "self", ".", "bart", ".", "half", "(", ")", "\n", "\n", "# Store generated samples", "\n", "self", ".", "hypo", "=", "{", "'train'", ":", "[", "]", ",", "'val'", ":", "[", "]", ",", "'test'", ":", "[", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.gen_summary.inference.SummaryGenerator.inference": [[30, 71], ["tqdm.tqdm.tqdm", "slines.append", "inference.SummaryGenerator.bart.sample", "sline.strip", "inference.SummaryGenerator.hypo[].append", "torch.no_grad", "inference.SummaryGenerator.bart.sample", "inference.SummaryGenerator.hypo[].append"], "methods", ["None"], ["", "def", "inference", "(", "self", ",", "bsz", "=", "8", ")", "->", "Dict", "[", "str", ",", "list", "]", ":", "\n", "        ", "for", "data_type", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "\n", "# we only need the test results on the last stage", "\n", "            ", "if", "data_type", "!=", "'test'", "and", "(", "self", ".", "fine_grained", "or", "self", ".", "test_mode", ")", ":", "\n", "                ", "continue", "\n", "\n", "# change the maximum input tokens per batch", "\n", "", "self", ".", "bart", ".", "cfg", ".", "dataset", ".", "batch_size_valid", "=", "bsz", "\n", "self", ".", "bart", ".", "cfg", ".", "dataset", ".", "max_tokens_valid", "=", "bsz", "*", "1024", "\n", "\n", "count", "=", "1", "\n", "slines", "=", "[", "self", ".", "data", "[", "data_type", "]", "[", "0", "]", "]", "\n", "for", "sline", "in", "tqdm", "(", "self", ".", "data", "[", "data_type", "]", "[", "1", ":", "]", ")", ":", "\n", "                ", "if", "count", "%", "bsz", "==", "0", ":", "\n", "                    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# parameters https://github.com/pytorch/fairseq/blob/master/fairseq/sequence_generator.py", "\n", "                        ", "hypotheses_batch", "=", "self", ".", "bart", ".", "sample", "(", "slines", ",", "\n", "beam", "=", "self", ".", "stage_cfg", ".", "beam", ",", "\n", "lenpen", "=", "self", ".", "stage_cfg", ".", "lenpen", ",", "\n", "max_len_b", "=", "self", ".", "stage_cfg", ".", "max_len_b", ",", "\n", "min_len", "=", "self", ".", "stage_cfg", ".", "min_len", ",", "\n", "no_repeat_ngram_size", "=", "self", ".", "stage_cfg", ".", "no_repeat_ngram_size", ")", "\n", "", "for", "hypothesis", "in", "hypotheses_batch", ":", "\n", "                        ", "self", ".", "hypo", "[", "data_type", "]", ".", "append", "(", "hypothesis", ")", "\n", "", "slines", "=", "[", "]", "\n", "\n", "", "slines", ".", "append", "(", "sline", ".", "strip", "(", ")", ")", "\n", "count", "+=", "1", "\n", "\n", "", "if", "slines", ":", "\n", "                ", "hypotheses_batch", "=", "self", ".", "bart", ".", "sample", "(", "slines", ",", "\n", "beam", "=", "self", ".", "stage_cfg", ".", "beam", ",", "\n", "lenpen", "=", "self", ".", "stage_cfg", ".", "lenpen", ",", "\n", "max_len_b", "=", "self", ".", "stage_cfg", ".", "max_len_b", ",", "\n", "min_len", "=", "self", ".", "stage_cfg", ".", "min_len", ",", "\n", "no_repeat_ngram_size", "=", "self", ".", "stage_cfg", ".", "no_repeat_ngram_size", ")", "\n", "for", "hypothesis", "in", "hypotheses_batch", ":", "\n", "                    ", "self", ".", "hypo", "[", "data_type", "]", ".", "append", "(", "hypothesis", ")", "\n", "\n", "", "", "", "return", "self", ".", "hypo", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.gen_summary.inference.SummaryGenerator.save": [[72, 83], ["os.path.join", "os.path.join", "utils.dataset.write_list_asline"], "methods", ["home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.dataset.write_list_asline"], ["", "def", "save", "(", "self", ")", ":", "\n", "        ", "for", "data_type", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "\n", "# we only need the test results on the last stage", "\n", "            ", "if", "data_type", "!=", "'test'", "and", "(", "self", ".", "fine_grained", "or", "self", ".", "test_mode", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "data_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cfg", ".", "train", ".", "output_path", ",", "f\"stage_{self.cfg.cur_stage}\"", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "data_folder", ",", "f\"{data_type}_split.hypo\"", "if", "not", "self", ".", "fine_grained", "\n", "else", "f\"{data_type}.hypo\"", ")", "\n", "write_list_asline", "(", "save_path", ",", "self", ".", "hypo", "[", "data_type", "]", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.gen_summary.coarse_seg.CoarseSegCombiner.__init__": [[7, 34], ["os.path.join", "os.path.join", "utils.dataset.read_list_asline", "os.path.join", "json.load", "open"], "methods", ["home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.dataset.read_list_asline", "home.repos.pwc.inspect_result.psunlpgroup_summ-n.dataset_loader.GovReport.Loader.load"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "\n", "split_results", ":", "Dict", "[", "str", ",", "List", "]", "=", "None", ",", "\n", "count_list", ":", "Dict", "[", "str", ",", "List", "[", "int", "]", "]", "=", "None", ",", "\n", "# origin_target: Dict[str, List] = None,", "\n", "load_from_file", "=", "False", ")", ":", "\n", "        ", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "stage_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cfg", ".", "train", ".", "output_path", ",", "f\"stage_{self.cfg.cur_stage}\"", ")", "\n", "\n", "if", "load_from_file", ":", "\n", "            ", "self", ".", "split_results", "=", "{", "'train'", ":", "[", "]", ",", "'test'", ":", "[", "]", ",", "'val'", ":", "[", "]", "}", "\n", "self", ".", "count_list", "=", "{", "'train'", ":", "[", "]", ",", "'test'", ":", "[", "]", ",", "'val'", ":", "[", "]", "}", "\n", "# self.target = {'train':[], 'test':[], 'val':[]}", "\n", "for", "data_type", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "                ", "data_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "stage_folder", ",", "f\"{data_type}_split.hypo\"", ")", "\n", "self", ".", "split_results", "[", "data_type", "]", "=", "read_list_asline", "(", "data_path", ")", "\n", "count_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "stage_folder", ",", "f\"{data_type}_count.json\"", ")", "\n", "self", ".", "count_list", "[", "data_type", "]", "=", "json", ".", "load", "(", "open", "(", "count_path", ")", ")", "\n", "# target_path = os.path.join(self.cfg.train.output_path, f\"stage_0\", f\"{data_type}.target\")", "\n", "# self.target[data_type] = read_list_asline(target_path)", "\n", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "split_results", "=", "split_results", "\n", "self", ".", "count_list", "=", "count_list", "\n", "# self.target = origin_target", "\n", "\n", "# store combined hypos", "\n", "", "self", ".", "combined_hypos", "=", "{", "'train'", ":", "[", "]", ",", "'test'", ":", "[", "]", ",", "'val'", ":", "[", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.gen_summary.coarse_seg.CoarseSegCombiner.combine": [[35, 46], ["len", "coarse_seg.CoarseSegCombiner.combined_hypos[].append"], "methods", ["None"], ["", "def", "combine", "(", "self", ")", ":", "\n", "        ", "for", "data_type", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "            ", "start", "=", "0", "\n", "for", "lengths", "in", "self", ".", "count_list", "[", "data_type", "]", ":", "\n", "                ", "if", "start", "+", "lengths", "<=", "len", "(", "self", ".", "split_results", "[", "data_type", "]", ")", ":", "\n", "                    ", "end", "=", "start", "+", "lengths", "\n", "self", ".", "combined_hypos", "[", "data_type", "]", ".", "append", "(", "\"<s> \"", "+", "\" </s> \"", ".", "join", "(", "self", ".", "split_results", "[", "data_type", "]", "[", "start", ":", "end", "]", ")", ")", "\n", "start", "=", "start", "+", "lengths", "\n", "", "else", ":", "\n", "                    ", "break", "\n", "", "", "", "return", "self", ".", "combined_hypos", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.gen_summary.coarse_seg.CoarseSegCombiner.save": [[47, 51], ["os.path.join", "utils.dataset.write_list_asline"], "methods", ["home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.dataset.write_list_asline"], ["", "def", "save", "(", "self", ")", ":", "\n", "        ", "for", "data_type", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "            ", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "stage_folder", ",", "f\"{data_type}.hypo\"", ")", "\n", "write_list_asline", "(", "save_path", ",", "self", ".", "combined_hypos", "[", "data_type", "]", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.dataset_loader.SummScreenFD.Loader.__init__": [[6, 9], ["SummN.dataset_loader.base_loader.LoaderBase.__init__"], "methods", ["home.repos.pwc.inspect_result.psunlpgroup_summ-n.dataset_loader.GovReport.Loader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "cfg", ")", "\n", "self", ".", "is_dialogue", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.dataset_loader.SummScreenFD.Loader.load": [[10, 27], ["os.path.join", "os.path.join", "open", "json.loads", "tar.replace().replace.replace().replace.replace().replace", "SummScreenFD.Loader.data[].append", "SummScreenFD.Loader.label[].append", "x.replace", "tar.replace().replace.replace().replace.replace"], "methods", ["None"], ["", "def", "load", "(", "self", ")", ":", "\n", "        ", "for", "data_type", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "            ", "if", "data_type", "==", "\"val\"", ":", "# name of tms is dev not val", "\n", "                ", "data_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cfg", ".", "train", ".", "dataset_path", ",", "\"fd_dev.json\"", ")", "\n", "", "else", ":", "\n", "                ", "data_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cfg", ".", "train", ".", "dataset_path", ",", "f\"fd_{data_type}.json\"", ")", "\n", "\n", "", "with", "open", "(", "data_path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "file", ":", "\n", "                ", "dataset", "=", "[", "json", ".", "loads", "(", "line", ")", "for", "line", "in", "file", "]", "\n", "for", "sample", "in", "dataset", ":", "\n", "                    ", "tar", "=", "sample", "[", "'Recap'", "]", "[", "0", "]", "\n", "sou", "=", "[", "x", ".", "replace", "(", "\"@@ \"", ",", "''", ")", "for", "x", "in", "sample", "[", "'Transcript'", "]", "]", "\n", "tar", "=", "tar", ".", "replace", "(", "\"@@ \"", ",", "''", ")", ".", "replace", "(", "'\\n'", ",", "''", ")", "\n", "self", ".", "data", "[", "data_type", "]", ".", "append", "(", "sou", ")", "# source is a list of string for dialogue dataset", "\n", "self", ".", "label", "[", "data_type", "]", ".", "append", "(", "tar", ")", "# target is a string", "\n", "\n", "", "", "", "return", "self", ".", "data", ",", "self", ".", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.dataset_loader.base_loader.LoaderBase.__init__": [[7, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "self", ".", "data", "=", "{", "\"train\"", ":", "[", "]", ",", "\"test\"", ":", "[", "]", ",", "\"val\"", ":", "[", "]", "}", "\n", "self", ".", "label", "=", "{", "\"train\"", ":", "[", "]", ",", "\"test\"", ":", "[", "]", ",", "\"val\"", ":", "[", "]", "}", "\n", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "is_dialogue", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.dataset_loader.base_loader.LoaderBase.load": [[14, 16], ["None"], "methods", ["None"], ["", "def", "load", "(", "self", ")", "->", "Tuple", "[", "Dict", "[", "str", ",", "list", "]", ",", "Dict", "[", "str", ",", "list", "]", "]", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.dataset_loader.base_loader.LoaderBase.save": [[17, 30], ["os.path.join", "os.path.join", "os.path.join", "write_list_asline", "write_list_asline", "os.path.exists", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.dataset.write_list_asline", "home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.dataset.write_list_asline"], ["", "def", "save", "(", "self", ")", ":", "\n", "        ", "for", "data_type", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "# write to stage 0 path", "\n", "            ", "stage_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cfg", ".", "train", ".", "output_path", ",", "f\"stage_{self.cfg.cur_stage}\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "stage_path", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "stage_path", ")", "\n", "\n", "", "source_path", "=", "os", ".", "path", ".", "join", "(", "stage_path", ",", "f\"{data_type}.source\"", ")", "\n", "target_path", "=", "os", ".", "path", ".", "join", "(", "stage_path", ",", "f\"{data_type}.target\"", ")", "\n", "\n", "# join all turns in dialogue dataset", "\n", "write_list_asline", "(", "source_path", ",", "[", "' '", ".", "join", "(", "x", ")", "for", "x", "in", "self", ".", "data", "[", "data_type", "]", "]", ")", "\n", "write_list_asline", "(", "target_path", ",", "self", ".", "label", "[", "data_type", "]", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.dataset_loader.AMI.Loader.__init__": [[10, 13], ["dataset_loader.base_loader.LoaderBase.__init__"], "methods", ["home.repos.pwc.inspect_result.psunlpgroup_summ-n.dataset_loader.GovReport.Loader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "cfg", ")", "\n", "self", ".", "is_dialogue", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.dataset_loader.AMI.Loader.load": [[14, 43], ["os.listdir", "os.path.join", "os.path.join", "os.path.join", "AMI.Loader.data[].append", "AMI.Loader.label[].append", "gzip.open", "meeting.append", "samples.append", "json.loads"], "methods", ["None"], ["", "def", "load", "(", "self", ")", ":", "\n", "        ", "for", "data_type", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "            ", "if", "data_type", "==", "\"val\"", ":", "# name of AMI is dev not val", "\n", "                ", "data_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cfg", ".", "train", ".", "dataset_path", ",", "\"dev\"", ")", "\n", "", "else", ":", "\n", "                ", "data_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cfg", ".", "train", ".", "dataset_path", ",", "data_type", ")", "\n", "\n", "", "samples", "=", "[", "]", "\n", "for", "gz_name", "in", "os", ".", "listdir", "(", "data_path", ")", ":", "\n", "                ", "if", "'gz'", "not", "in", "gz_name", ":", "\n", "                    ", "continue", "\n", "", "sample_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "gz_name", ")", "\n", "with", "gzip", ".", "open", "(", "sample_path", ",", "'rb'", ")", "as", "file", ":", "\n", "                    ", "for", "line", "in", "file", ":", "\n", "                        ", "samples", ".", "append", "(", "json", ".", "loads", "(", "line", ")", ")", "\n", "\n", "", "", "", "for", "sample", "in", "samples", ":", "\n", "# get meetings & summary", "\n", "                ", "meeting", "=", "[", "]", "\n", "for", "turn", "in", "sample", "[", "'meeting'", "]", ":", "\n", "                    ", "sent", "=", "turn", "[", "'role'", "]", "+", "' '", "+", "turn", "[", "'speaker'", "]", "+", "\" : \"", "\n", "sent", "+=", "' '", ".", "join", "(", "turn", "[", "'utt'", "]", "[", "'word'", "]", ")", "\n", "meeting", ".", "append", "(", "sent", ")", "\n", "", "summary", "=", "' '", ".", "join", "(", "sample", "[", "'summary'", "]", ")", "\n", "\n", "self", ".", "data", "[", "data_type", "]", ".", "append", "(", "meeting", ")", "\n", "self", ".", "label", "[", "data_type", "]", ".", "append", "(", "summary", ")", "\n", "\n", "", "", "return", "self", ".", "data", ",", "self", ".", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.dataset_loader.ICSI.Loader.__init__": [[10, 13], ["dataset_loader.base_loader.LoaderBase.__init__"], "methods", ["home.repos.pwc.inspect_result.psunlpgroup_summ-n.dataset_loader.GovReport.Loader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "cfg", ")", "\n", "self", ".", "is_dialogue", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.dataset_loader.ICSI.Loader.load": [[14, 43], ["os.listdir", "os.path.join", "os.path.join", "os.path.join", "ICSI.Loader.data[].append", "ICSI.Loader.label[].append", "gzip.open", "meeting.append", "samples.append", "json.loads"], "methods", ["None"], ["", "def", "load", "(", "self", ")", ":", "\n", "        ", "for", "data_type", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "            ", "if", "data_type", "==", "\"val\"", ":", "# name of AMI is dev not val", "\n", "                ", "data_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cfg", ".", "train", ".", "dataset_path", ",", "\"dev\"", ")", "\n", "", "else", ":", "\n", "                ", "data_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cfg", ".", "train", ".", "dataset_path", ",", "data_type", ")", "\n", "\n", "", "samples", "=", "[", "]", "\n", "for", "gz_name", "in", "os", ".", "listdir", "(", "data_path", ")", ":", "\n", "                ", "if", "'gz'", "not", "in", "gz_name", ":", "\n", "                    ", "continue", "\n", "", "sample_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "gz_name", ")", "\n", "with", "gzip", ".", "open", "(", "sample_path", ",", "'rb'", ")", "as", "file", ":", "\n", "                    ", "for", "line", "in", "file", ":", "\n", "                        ", "samples", ".", "append", "(", "json", ".", "loads", "(", "line", ")", ")", "\n", "\n", "", "", "", "for", "sample", "in", "samples", ":", "\n", "# get meetings & summary", "\n", "                ", "meeting", "=", "[", "]", "\n", "for", "turn", "in", "sample", "[", "'meeting'", "]", ":", "\n", "                    ", "sent", "=", "turn", "[", "'role'", "]", "+", "' '", "+", "turn", "[", "'speaker'", "]", "+", "\" : \"", "\n", "sent", "+=", "' '", ".", "join", "(", "turn", "[", "'utt'", "]", "[", "'word'", "]", ")", "\n", "meeting", ".", "append", "(", "sent", ")", "\n", "", "summary", "=", "' '", ".", "join", "(", "sample", "[", "'summary'", "]", ")", "\n", "\n", "self", ".", "data", "[", "data_type", "]", ".", "append", "(", "meeting", ")", "\n", "self", ".", "label", "[", "data_type", "]", ".", "append", "(", "summary", ")", "\n", "\n", "", "", "return", "self", ".", "data", ",", "self", ".", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.dataset_loader.SummScreenMG.Loader.__init__": [[6, 9], ["SummN.dataset_loader.base_loader.LoaderBase.__init__"], "methods", ["home.repos.pwc.inspect_result.psunlpgroup_summ-n.dataset_loader.GovReport.Loader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "cfg", ")", "\n", "self", ".", "is_dialogue", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.dataset_loader.SummScreenMG.Loader.load": [[10, 27], ["os.path.join", "os.path.join", "open", "json.loads", "tar.replace().replace.replace().replace.replace().replace", "SummScreenMG.Loader.data[].append", "SummScreenMG.Loader.label[].append", "x.replace", "tar.replace().replace.replace().replace.replace"], "methods", ["None"], ["", "def", "load", "(", "self", ")", ":", "\n", "        ", "for", "data_type", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "            ", "if", "data_type", "==", "\"val\"", ":", "# name of tms is dev not val", "\n", "                ", "data_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cfg", ".", "train", ".", "dataset_path", ",", "\"tms_dev.json\"", ")", "\n", "", "else", ":", "\n", "                ", "data_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cfg", ".", "train", ".", "dataset_path", ",", "f\"tms_{data_type}.json\"", ")", "\n", "\n", "", "with", "open", "(", "data_path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "file", ":", "\n", "                ", "dataset", "=", "[", "json", ".", "loads", "(", "line", ")", "for", "line", "in", "file", "]", "\n", "for", "sample", "in", "dataset", ":", "\n", "                    ", "tar", "=", "sample", "[", "'Recap'", "]", "[", "0", "]", "\n", "sou", "=", "[", "x", ".", "replace", "(", "\"@@ \"", ",", "''", ")", "for", "x", "in", "sample", "[", "'Transcript'", "]", "]", "\n", "tar", "=", "tar", ".", "replace", "(", "\"@@ \"", ",", "''", ")", ".", "replace", "(", "'\\n'", ",", "''", ")", "\n", "self", ".", "data", "[", "data_type", "]", ".", "append", "(", "sou", ")", "# source is a list of string for dialogue dataset", "\n", "self", ".", "label", "[", "data_type", "]", ".", "append", "(", "tar", ")", "# target is a string", "\n", "\n", "", "", "", "return", "self", ".", "data", ",", "self", ".", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.dataset_loader.QMSum_gold.Loader.__init__": [[10, 15], ["SummN.dataset_loader.base_loader.LoaderBase.__init__"], "methods", ["home.repos.pwc.inspect_result.psunlpgroup_summ-n.dataset_loader.GovReport.Loader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "cfg", ")", "\n", "self", ".", "is_dialogue", "=", "True", "\n", "self", ".", "has_query", "=", "True", "\n", "self", ".", "query", "=", "{", "'train'", ":", "[", "]", ",", "'val'", ":", "[", "]", ",", "'test'", ":", "[", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.dataset_loader.QMSum_gold.Loader.load": [[16, 44], ["NotImplementedError", "os.path.join", "open", "zip", "data.append", "all_query.append", "all_target.append", "all_query.append", "all_target.append", "QMSum_gold.Loader.query[].append", "QMSum_gold.Loader.data[].append", "QMSum_gold.Loader.label[].append", "json.loads"], "methods", ["None"], ["", "def", "load", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "for", "data_type", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "            ", "data_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cfg", ".", "train", ".", "dataset_path", ",", "f\"jsonl/{data_type}.jsonl\"", ")", "\n", "\n", "data", "=", "[", "]", "\n", "with", "open", "(", "data_path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "file", ":", "\n", "                ", "for", "line", "in", "file", ":", "\n", "                    ", "data", ".", "append", "(", "json", ".", "loads", "(", "line", ")", ")", "\n", "\n", "", "", "for", "sample", "in", "data", ":", "\n", "                ", "trans", "=", "[", "x", "[", "'speaker'", "]", "+", "' : '", "+", "x", "[", "'content'", "]", "for", "x", "in", "sample", "[", "'meeting_transcripts'", "]", "]", "\n", "\n", "all_query", "=", "[", "]", "\n", "all_target", "=", "[", "]", "\n", "for", "pair", "in", "sample", "[", "'general_query_list'", "]", ":", "\n", "                    ", "all_query", ".", "append", "(", "pair", "[", "'query'", "]", ")", "\n", "all_target", ".", "append", "(", "pair", "[", "'answer'", "]", ")", "\n", "", "for", "pair", "in", "sample", "[", "'specific_query_list'", "]", ":", "\n", "                    ", "all_query", ".", "append", "(", "pair", "[", "'query'", "]", ")", "\n", "all_target", ".", "append", "(", "pair", "[", "'answer'", "]", ")", "\n", "\n", "", "for", "q", ",", "t", "in", "zip", "(", "all_query", ",", "all_target", ")", ":", "\n", "                    ", "self", ".", "query", "[", "data_type", "]", ".", "append", "(", "q", ")", "\n", "self", ".", "data", "[", "data_type", "]", ".", "append", "(", "trans", ")", "\n", "self", ".", "label", "[", "data_type", "]", ".", "append", "(", "t", ")", "\n", "\n", "", "", "", "return", "self", ".", "data", ",", "self", ".", "label", ",", "self", ".", "query", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.dataset_loader.QMSum.Loader.__init__": [[10, 15], ["SummN.dataset_loader.base_loader.LoaderBase.__init__"], "methods", ["home.repos.pwc.inspect_result.psunlpgroup_summ-n.dataset_loader.GovReport.Loader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "cfg", ")", "\n", "self", ".", "is_dialogue", "=", "True", "\n", "self", ".", "has_query", "=", "True", "\n", "self", ".", "query", "=", "{", "'train'", ":", "[", "]", ",", "'val'", ":", "[", "]", ",", "'test'", ":", "[", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.dataset_loader.QMSum.Loader.load": [[16, 44], ["NotImplementedError", "os.path.join", "open", "zip", "data.append", "all_query.append", "all_target.append", "all_query.append", "all_target.append", "QMSum.Loader.query[].append", "QMSum.Loader.data[].append", "QMSum.Loader.label[].append", "json.loads"], "methods", ["None"], ["", "def", "load", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "for", "data_type", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "            ", "data_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cfg", ".", "train", ".", "dataset_path", ",", "f\"jsonl/{data_type}.jsonl\"", ")", "\n", "\n", "data", "=", "[", "]", "\n", "with", "open", "(", "data_path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "file", ":", "\n", "                ", "for", "line", "in", "file", ":", "\n", "                    ", "data", ".", "append", "(", "json", ".", "loads", "(", "line", ")", ")", "\n", "\n", "", "", "for", "sample", "in", "data", ":", "\n", "                ", "trans", "=", "[", "x", "[", "'speaker'", "]", "+", "' : '", "+", "x", "[", "'content'", "]", "for", "x", "in", "sample", "[", "'meeting_transcripts'", "]", "]", "\n", "\n", "all_query", "=", "[", "]", "\n", "all_target", "=", "[", "]", "\n", "for", "pair", "in", "sample", "[", "'general_query_list'", "]", ":", "\n", "                    ", "all_query", ".", "append", "(", "pair", "[", "'query'", "]", ")", "\n", "all_target", ".", "append", "(", "pair", "[", "'answer'", "]", ")", "\n", "", "for", "pair", "in", "sample", "[", "'specific_query_list'", "]", ":", "\n", "                    ", "all_query", ".", "append", "(", "pair", "[", "'query'", "]", ")", "\n", "all_target", ".", "append", "(", "pair", "[", "'answer'", "]", ")", "\n", "\n", "", "for", "q", ",", "t", "in", "zip", "(", "all_query", ",", "all_target", ")", ":", "\n", "                    ", "self", ".", "query", "[", "data_type", "]", ".", "append", "(", "q", ")", "\n", "self", ".", "data", "[", "data_type", "]", ".", "append", "(", "trans", ")", "\n", "self", ".", "label", "[", "data_type", "]", ".", "append", "(", "t", ")", "\n", "\n", "", "", "", "return", "self", ".", "data", ",", "self", ".", "label", ",", "self", ".", "query", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.dataset_loader.GovReport.Loader.__init__": [[11, 14], ["dataset_loader.base_loader.LoaderBase.__init__"], "methods", ["home.repos.pwc.inspect_result.psunlpgroup_summ-n.dataset_loader.GovReport.Loader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "cfg", ")", "\n", "self", ".", "is_dialogue", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.psunlpgroup_summ-n.dataset_loader.GovReport.Loader.load": [[15, 24], ["os.path.join", "os.path.join", "read_list_asline", "read_list_asline", "nltk.sent_tokenize"], "methods", ["home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.dataset.read_list_asline", "home.repos.pwc.inspect_result.psunlpgroup_summ-n.utils.dataset.read_list_asline"], ["", "def", "load", "(", "self", ")", ":", "\n", "        ", "for", "data_type", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "            ", "source_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cfg", ".", "train", ".", "dataset_path", ",", "f\"{data_type}.source\"", ")", "\n", "target_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cfg", ".", "train", ".", "dataset_path", ",", "f\"{data_type}.target\"", ")", "\n", "source", "=", "read_list_asline", "(", "source_path", ")", "\n", "target", "=", "read_list_asline", "(", "target_path", ")", "\n", "self", ".", "data", "[", "data_type", "]", "=", "[", "sent_tokenize", "(", "x", ")", "for", "x", "in", "source", "]", "# we need to split document into sentences", "\n", "self", ".", "label", "[", "data_type", "]", "=", "target", "\n", "", "return", "self", ".", "data", ",", "self", ".", "label", "\n", "\n"]]}