{"home.repos.pwc.inspect_result.NicoZenith_PAD.None.fig5_plot_accuracies_occ.mean_and_err": [[37, 41], ["array.mean", "scipy.stats.sem"], "function", ["None"], ["", "def", "mean_and_err", "(", "array", ",", "axis", "=", "0", ")", ":", "\n", "    ", "mean", "=", "array", ".", "mean", "(", "axis", "=", "0", ")", "\n", "sem", "=", "stats", ".", "sem", "(", "array", ",", "axis", "=", "axis", ")", "\n", "return", "mean", ",", "sem", "\n", "\n"]], "home.repos.pwc.inspect_result.NicoZenith_PAD.None.fig6_plot_distances.mean_and_err": [[36, 40], ["array.mean", "scipy.stats.sem"], "function", ["None"], ["", "def", "mean_and_err", "(", "array", ",", "axis", "=", "0", ")", ":", "\n", "    ", "mean", "=", "array", ".", "mean", "(", "axis", "=", "0", ")", "\n", "sem", "=", "stats", ".", "sem", "(", "array", ",", "axis", "=", "axis", ")", "\n", "return", "mean", ",", "sem", "\n", "\n"]], "home.repos.pwc.inspect_result.NicoZenith_PAD.None.network.Generator.__init__": [[9, 35], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.NicoZenith_PAD.None.utils.Occlude.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ngpu", ",", "nz", ",", "ngf", "=", "64", ",", "img_channels", "=", "3", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ngpu", "=", "ngpu", "\n", "self", ".", "nz", "=", "nz", "\n", "self", ".", "bias", "=", "True", "\n", "\n", "# input is Z, going into a convolution", "\n", "self", ".", "tconv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "nz", ",", "ngf", "*", "4", ",", "kernel_size", "=", "4", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "self", ".", "bias", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "# state size. (ngf*4) x 4 x 4", "\n", "self", ".", "tconv2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "4", ",", "ngf", "*", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "self", ".", "bias", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "# state size. (ngf*2) x 8 x 8", "\n", "self", ".", "tconv3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "2", ",", "ngf", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "self", ".", "bias", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "# state size. (ngf) x 16 x 16", "\n", "self", ".", "tconv4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "ngf", ",", "img_channels", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "self", ".", "bias", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.NicoZenith_PAD.None.network.Generator.forward": [[37, 46], ["input.view", "network.Generator.tconv1", "network.Generator.tconv2", "network.Generator.tconv3", "network.Generator.tconv4", "input.size", "input.size", "network.grad_reverse"], "methods", ["home.repos.pwc.inspect_result.NicoZenith_PAD.None.network.grad_reverse"], ["", "def", "forward", "(", "self", ",", "input", ",", "reverse", "=", "True", ")", ":", "\n", "        ", "fc1", "=", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "input", ".", "size", "(", "1", ")", ",", "1", ",", "1", ")", "\n", "tconv1", "=", "self", ".", "tconv1", "(", "fc1", ")", "\n", "tconv2", "=", "self", ".", "tconv2", "(", "tconv1", ")", "\n", "tconv3", "=", "self", ".", "tconv3", "(", "tconv2", ")", "\n", "output", "=", "self", ".", "tconv4", "(", "tconv3", ")", "\n", "if", "reverse", ":", "\n", "            ", "output", "=", "grad_reverse", "(", "output", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.NicoZenith_PAD.None.network.GradReverse.forward": [[50, 53], ["x.view_as"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view_as", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NicoZenith_PAD.None.network.GradReverse.backward": [[54, 57], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "self", ",", "grad_output", ")", ":", "\n", "        ", "return", "(", "grad_output", "*", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NicoZenith_PAD.None.network.Flatten.forward": [[64, 67], ["x.view"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_size", "=", "x", ".", "shape", "[", "0", "]", "\n", "return", "x", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NicoZenith_PAD.None.network.Discriminator.__init__": [[73, 111], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "network.Flatten", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "network.Flatten"], "methods", ["home.repos.pwc.inspect_result.NicoZenith_PAD.None.utils.Occlude.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ngpu", ",", "nz", ",", "ndf", "=", "64", ",", "img_channels", "=", "3", ",", "p_drop", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ngpu", "=", "ngpu", "\n", "self", ".", "ndf", "=", "ndf", "\n", "self", ".", "bias", "=", "True", "\n", "\n", "\n", "# input is (3) x 32 x 32", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "img_channels", ",", "ndf", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "self", ".", "bias", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "# state size. (64) x 16 x 16", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ndf", ",", "ndf", "*", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "self", ".", "bias", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "# state size. (ndf*2) x 8 x 8", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "ndf", "*", "4", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "self", ".", "bias", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "\n", "# # state size. (ndf*4) x 4 x 4", "\n", "self", ".", "conv4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "4", ",", "nz", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "self", ".", "bias", ")", ",", "\n", "Flatten", "(", ")", "\n", ")", "\n", "\n", "self", ".", "dis", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "4", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "self", ".", "bias", ")", ",", "\n", "Flatten", "(", ")", "\n", ")", "\n", "\n", "# sigmoid", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NicoZenith_PAD.None.network.Discriminator.forward": [[112, 120], ["network.Discriminator.conv1", "network.Discriminator.conv2", "network.Discriminator.conv3", "network.Discriminator.sigmoid", "network.Discriminator.conv4", "network.Discriminator.view().squeeze", "network.Discriminator.dis", "network.Discriminator.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "conv1", "=", "self", ".", "conv1", "(", "input", ")", "\n", "conv2", "=", "self", ".", "conv2", "(", "conv1", ")", "\n", "conv3", "=", "self", ".", "conv3", "(", "conv2", ")", "\n", "fc_dis", "=", "self", ".", "sigmoid", "(", "self", ".", "dis", "(", "conv3", ")", ")", "\n", "fc_enc", "=", "self", ".", "conv4", "(", "conv3", ")", "\n", "realfake", "=", "fc_dis", ".", "view", "(", "-", "1", ",", "1", ")", ".", "squeeze", "(", "1", ")", "\n", "return", "fc_enc", ",", "realfake", "\n", "\n"]], "home.repos.pwc.inspect_result.NicoZenith_PAD.None.network.OutputClassifier.__init__": [[129, 136], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.NicoZenith_PAD.None.utils.Occlude.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nz", ",", "ni", "=", "32", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "OutputClassifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "fc_classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "nz", ",", "num_classes", ",", "bias", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NicoZenith_PAD.None.network.OutputClassifier.forward": [[137, 140], ["network.OutputClassifier.fc_classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "classes", "=", "self", ".", "fc_classifier", "(", "input", ")", "\n", "return", "classes", "\n", "\n"]], "home.repos.pwc.inspect_result.NicoZenith_PAD.None.network.InputClassifier.__init__": [[146, 150], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.NicoZenith_PAD.None.utils.Occlude.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "InputClassifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc_classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "input_dim", ",", "num_classes", ",", "bias", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.NicoZenith_PAD.None.network.InputClassifier.forward": [[152, 156], ["input.view", "network.InputClassifier.fc_classifier", "input.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "-", "1", ")", "# convert batch_size x 28 x 28 to batch_size x (28*28)", "\n", "out", "=", "self", ".", "fc_classifier", "(", "out", ")", "# Applies out = input * A + b. A, b are parameters of nn.Linear that we want to learn", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.NicoZenith_PAD.None.network.InceptionV3.__init__": [[177, 242], ["torch.Module.__init__", "sorted", "max", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torchvision.inception_v3", "network.InceptionV3.blocks.append", "network.InceptionV3.parameters", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "network.InceptionV3.blocks.append", "network.InceptionV3.blocks.append", "network.InceptionV3.blocks.append", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.NicoZenith_PAD.None.utils.Occlude.__init__"], ["def", "__init__", "(", "self", ",", "\n", "output_blocks", "=", "[", "DEFAULT_BLOCK_INDEX", "]", ",", "\n", "resize_input", "=", "True", ",", "\n", "normalize_input", "=", "True", ",", "\n", "requires_grad", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", "InceptionV3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "resize_input", "=", "resize_input", "\n", "self", ".", "normalize_input", "=", "normalize_input", "\n", "self", ".", "output_blocks", "=", "sorted", "(", "output_blocks", ")", "\n", "self", ".", "last_needed_block", "=", "max", "(", "output_blocks", ")", "\n", "\n", "assert", "self", ".", "last_needed_block", "<=", "3", ",", "'Last possible output block index is 3'", "\n", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "\n", "inception", "=", "models", ".", "inception_v3", "(", "pretrained", "=", "True", ")", "\n", "\n", "# Block 0: input to maxpool1", "\n", "block0", "=", "[", "\n", "inception", ".", "Conv2d_1a_3x3", ",", "\n", "inception", ".", "Conv2d_2a_3x3", ",", "\n", "inception", ".", "Conv2d_2b_3x3", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block0", ")", ")", "\n", "\n", "# Block 1: maxpool1 to maxpool2", "\n", "if", "self", ".", "last_needed_block", ">=", "1", ":", "\n", "            ", "block1", "=", "[", "\n", "inception", ".", "Conv2d_3b_1x1", ",", "\n", "inception", ".", "Conv2d_4a_3x3", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block1", ")", ")", "\n", "\n", "# Block 2: maxpool2 to aux classifier", "\n", "", "if", "self", ".", "last_needed_block", ">=", "2", ":", "\n", "            ", "block2", "=", "[", "\n", "inception", ".", "Mixed_5b", ",", "\n", "inception", ".", "Mixed_5c", ",", "\n", "inception", ".", "Mixed_5d", ",", "\n", "inception", ".", "Mixed_6a", ",", "\n", "inception", ".", "Mixed_6b", ",", "\n", "inception", ".", "Mixed_6c", ",", "\n", "inception", ".", "Mixed_6d", ",", "\n", "inception", ".", "Mixed_6e", ",", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block2", ")", ")", "\n", "\n", "# Block 3: aux classifier to final avgpool", "\n", "", "if", "self", ".", "last_needed_block", ">=", "3", ":", "\n", "            ", "block3", "=", "[", "\n", "inception", ".", "Mixed_7a", ",", "\n", "inception", ".", "Mixed_7b", ",", "\n", "inception", ".", "Mixed_7c", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "output_size", "=", "(", "1", ",", "1", ")", ")", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block3", ")", ")", "\n", "\n", "", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "requires_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.NicoZenith_PAD.None.network.InceptionV3.forward": [[243, 276], ["enumerate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "block", "outp.append"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "\"\"\"Get Inception feature maps\n        Parameters\n        ----------\n        inp : torch.autograd.Variable\n            Input tensor of shape Bx3xHxW. Values are expected to be in\n            range (0, 1)\n        Returns\n        -------\n        List of torch.autograd.Variable, corresponding to the selected output\n        block, sorted ascending by index\n        \"\"\"", "\n", "outp", "=", "[", "]", "\n", "x", "=", "inp", "\n", "\n", "if", "self", ".", "resize_input", ":", "\n", "            ", "x", "=", "F", ".", "interpolate", "(", "x", ",", "\n", "size", "=", "(", "299", ",", "299", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "False", ")", "\n", "\n", "", "if", "self", ".", "normalize_input", ":", "\n", "            ", "x", "=", "2", "*", "x", "-", "1", "# Scale from range (0, 1) to range (-1, 1)", "\n", "\n", "", "for", "idx", ",", "block", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "            ", "x", "=", "block", "(", "x", ")", "\n", "if", "idx", "in", "self", ".", "output_blocks", ":", "\n", "                ", "outp", ".", "append", "(", "x", ")", "\n", "\n", "", "if", "idx", "==", "self", ".", "last_needed_block", ":", "\n", "                ", "break", "\n", "\n", "", "", "return", "outp", "\n", "", "", ""]], "home.repos.pwc.inspect_result.NicoZenith_PAD.None.network.grad_reverse": [[58, 60], ["GradReverse.apply"], "function", ["None"], ["", "", "def", "grad_reverse", "(", "x", ")", ":", "\n", "    ", "return", "GradReverse", ".", "apply", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NicoZenith_PAD.None.fig4_plot_accuracies.mean_and_sem": [[59, 69], ["array.mean", "scipy.stats.sem", "scipy.stats.sem", "ax.fill_between", "ax.fill_between", "numpy.arange", "numpy.arange"], "function", ["None"], ["", "def", "mean_and_sem", "(", "array", ",", "color", "=", "None", ",", "return_sem", "=", "False", ",", "axis", "=", "0", ")", ":", "\n", "    ", "mean", "=", "array", ".", "mean", "(", "axis", "=", "0", ")", "\n", "sem_plus", "=", "mean", "+", "stats", ".", "sem", "(", "array", ",", "axis", "=", "axis", ")", "\n", "sem_minus", "=", "mean", "-", "stats", ".", "sem", "(", "array", ",", "axis", "=", "axis", ")", "\n", "if", "color", "is", "not", "None", ":", "\n", "        ", "ax", ".", "fill_between", "(", "np", ".", "arange", "(", "mean", ".", "shape", "[", "0", "]", ")", ",", "sem_plus", ",", "sem_minus", ",", "color", "=", "color", ",", "alpha", "=", "0.5", ")", "\n", "", "else", ":", "\n", "        ", "ax", ".", "fill_between", "(", "np", ".", "arange", "(", "mean", ".", "shape", "[", "0", "]", ")", ",", "sem_plus", ",", "sem_minus", ",", "alpha", "=", "0.5", ")", "\n", "#return mean, stats.sem(array, axis=axis)", "\n", "", "return", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.NicoZenith_PAD.None.fig6_compute_distances.get_indices": [[73, 84], ["range", "range", "len", "len", "indices.append", "indices.append"], "function", ["None"], ["def", "get_indices", "(", "dataset", ",", "dataset_name", ",", "class_name", ")", ":", "\n", "    ", "indices", "=", "[", "]", "\n", "if", "dataset_name", "==", "'cifar10'", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "dataset", ".", "targets", ")", ")", ":", "\n", "            ", "if", "dataset", ".", "targets", "[", "i", "]", "==", "class_name", ":", "\n", "                ", "indices", ".", "append", "(", "i", ")", "\n", "", "", "", "else", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "dataset", ".", "labels", ")", ")", ":", "\n", "            ", "if", "dataset", ".", "labels", "[", "i", "]", "==", "class_name", ":", "\n", "                ", "indices", ".", "append", "(", "i", ")", "\n", "", "", "", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.NicoZenith_PAD.None.utils.UnNormalize.__init__": [[106, 109], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.NicoZenith_PAD.None.utils.UnNormalize.__call__": [[110, 122], ["range", "len", "range", "len", "[].mul_().add_", "[].mul_"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "tensorBatch", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            tensor (Tensor): Tensor image of size (C, H, W) to be normalized.\n        Returns:\n            Tensor: Normalized image.\n        \"\"\"", "\n", "for", "i", "in", "range", "(", "len", "(", "tensorBatch", ")", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "len", "(", "tensorBatch", "[", "i", "]", ")", ")", ":", "\n", "                ", "tensorBatch", "[", "i", "]", "[", "j", "]", ".", "mul_", "(", "self", ".", "std", "[", "j", "]", ")", ".", "add_", "(", "self", ".", "mean", "[", "j", "]", ")", "\n", "# The normalize code -> t.sub_(m).div_(s)", "\n", "", "", "return", "tensorBatch", "\n", "\n"]], "home.repos.pwc.inspect_result.NicoZenith_PAD.None.utils.Occlude.__init__": [[174, 177], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "drop_rate", "=", "0.0", ",", "tile_size", "=", "7", ")", ":", "\n", "        ", "self", ".", "drop_rate", "=", "drop_rate", "\n", "self", ".", "tile_size", "=", "tile_size", "\n", "\n"]], "home.repos.pwc.inspect_result.NicoZenith_PAD.None.utils.Occlude.__call__": [[178, 199], ["imgs.clone", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "imgs.get_device", "imgs.clone.size", "imgs.clone.size", "imgs.clone.size", "imgs.clone.size", "imgs.clone.size", "numpy.random.rand", "range", "torch.ones.size", "torch.ones.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "imgs", ",", "d", "=", "0", ")", ":", "\n", "        ", "imgs_n", "=", "imgs", ".", "clone", "(", ")", "\n", "if", "d", "==", "0", ":", "\n", "            ", "device", "=", "'cpu'", "\n", "", "else", ":", "\n", "            ", "device", "=", "imgs", ".", "get_device", "(", ")", "\n", "if", "device", "==", "-", "1", ":", "\n", "                ", "device", "=", "'cpu'", "\n", "", "", "mask", "=", "torch", ".", "ones", "(", "(", "imgs_n", ".", "size", "(", "d", ")", ",", "imgs_n", ".", "size", "(", "d", "+", "1", ")", ",", "imgs_n", ".", "size", "(", "d", "+", "2", ")", ")", ",", "device", "=", "device", ")", "# only ones = no mask", "\n", "i", "=", "0", "\n", "while", "i", "<", "imgs_n", ".", "size", "(", "d", "+", "1", ")", ":", "\n", "            ", "j", "=", "0", "\n", "while", "j", "<", "imgs_n", ".", "size", "(", "d", "+", "2", ")", ":", "\n", "                ", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "drop_rate", ":", "\n", "                    ", "for", "k", "in", "range", "(", "mask", ".", "size", "(", "0", ")", ")", ":", "\n", "                        ", "mask", "[", "k", ",", "i", ":", "i", "+", "self", ".", "tile_size", ",", "j", ":", "j", "+", "self", ".", "tile_size", "]", "=", "0", "# set to zero the whole tile", "\n", "", "", "j", "+=", "self", ".", "tile_size", "\n", "", "i", "+=", "self", ".", "tile_size", "\n", "\n", "", "imgs_n", "=", "imgs_n", "*", "mask", "# apply the mask to each image", "\n", "return", "imgs_n", "\n", "\n"]], "home.repos.pwc.inspect_result.NicoZenith_PAD.None.utils.weights_init": [[16, 23], ["classname.find", "m.weight.data.normal_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "function", ["None"], ["def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NicoZenith_PAD.None.utils.get_dataset": [[25, 86], ["torchvision.CIFAR10", "utils.UnNormalize", "torchvision.SVHN", "utils.UnNormalize", "torchvision.Compose", "torchvision.MNIST", "utils.UnNormalize", "torchvision.Compose", "torchvision.FashionMNIST", "utils.UnNormalize", "NotImplementedError", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Normalize", "utils.Occlude", "torchvision.Compose", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Normalize", "utils.Occlude", "torchvision.Compose", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Normalize", "utils.Occlude", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Normalize", "utils.Occlude"], "function", ["None"], ["", "", "def", "get_dataset", "(", "dataset_name", ",", "dataroot", ",", "imageSize", ",", "is_train", "=", "True", ",", "drop_rate", "=", "0.0", ",", "tile_size", "=", "32", ")", ":", "\n", "    ", "if", "dataset_name", "==", "'cifar10'", ":", "\n", "        ", "dataset", "=", "dset", ".", "CIFAR10", "(", "\n", "train", "=", "is_train", ",", "\n", "root", "=", "dataroot", ",", "download", "=", "False", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "imageSize", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", ",", "\n", "Occlude", "(", "drop_rate", "=", "drop_rate", ",", "tile_size", "=", "tile_size", ")", ",", "\n", "]", ")", ")", "\n", "unorm", "=", "UnNormalize", "(", "mean", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "std", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "\n", "img_channels", "=", "3", "\n", "\n", "", "elif", "dataset_name", "==", "'svhn'", ":", "\n", "        ", "if", "is_train", ":", "\n", "            ", "split", "=", "'train'", "\n", "", "else", ":", "\n", "            ", "split", "=", "'test'", "\n", "", "dataset", "=", "dset", ".", "SVHN", "(", "\n", "root", "=", "dataroot", ",", "download", "=", "False", ",", "\n", "split", "=", "split", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "imageSize", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", ",", "\n", "Occlude", "(", "drop_rate", "=", "drop_rate", ",", "tile_size", "=", "tile_size", ")", "\n", "]", ")", ")", "\n", "unorm", "=", "UnNormalize", "(", "mean", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "std", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "\n", "img_channels", "=", "3", "\n", "\n", "", "elif", "dataset_name", "==", "'mnist'", ":", "\n", "        ", "dataset", "=", "dset", ".", "MNIST", "(", "\n", "train", "=", "is_train", ",", "\n", "root", "=", "dataroot", ",", "download", "=", "False", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "imageSize", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "(", "0.5", ",", ")", ",", "std", "=", "(", "0.5", ",", ")", ")", ",", "\n", "Occlude", "(", "drop_rate", "=", "drop_rate", ",", "tile_size", "=", "tile_size", ")", "\n", "]", ")", "\n", ")", "\n", "unorm", "=", "UnNormalize", "(", "mean", "=", "(", "0.5", ",", ")", ",", "std", "=", "(", "0.5", ",", ")", ")", "\n", "img_channels", "=", "1", "\n", "", "elif", "dataset_name", "==", "'fashion'", ":", "\n", "        ", "dataset", "=", "dset", ".", "FashionMNIST", "(", "\n", "train", "=", "is_train", ",", "\n", "root", "=", "dataroot", ",", "download", "=", "False", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "imageSize", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "(", "0.5", ",", ")", ",", "std", "=", "(", "0.5", ",", ")", ")", ",", "\n", "Occlude", "(", "drop_rate", "=", "drop_rate", ",", "tile_size", "=", "tile_size", ")", "\n", "]", ")", ")", "\n", "unorm", "=", "UnNormalize", "(", "mean", "=", "(", "0.5", ",", ")", ",", "std", "=", "(", "0.5", ",", ")", ")", "\n", "img_channels", "=", "1", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"No such dataset {}\"", ".", "format", "(", "dataset_name", ")", ")", "\n", "\n", "", "assert", "dataset", "\n", "return", "dataset", ",", "unorm", ",", "img_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.NicoZenith_PAD.None.utils.compute_acc": [[90, 96], ["preds_.eq().cpu().sum", "preds.data.max", "preds_.eq().cpu", "float", "float", "len", "preds_.eq"], "function", ["None"], ["", "def", "compute_acc", "(", "preds", ",", "labels", ")", ":", "\n", "    ", "correct", "=", "0", "\n", "preds_", "=", "preds", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "correct", "=", "preds_", ".", "eq", "(", "labels", ".", "data", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", "\n", "acc", "=", "float", "(", "correct", ")", "/", "float", "(", "len", "(", "labels", ".", "data", ")", ")", "*", "100.0", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.NicoZenith_PAD.None.utils.get_latent": [[98, 103], ["numpy.random.normal", "torch.tensor", "torch.tensor", "latent_z.view.view"], "function", ["None"], ["", "def", "get_latent", "(", "dim_latent", ",", "batch_size", ",", "device", ")", ":", "\n", "    ", "latent_z", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ",", "(", "batch_size", ",", "dim_latent", ")", ")", "# generate random labels", "\n", "latent_z", "=", "torch", ".", "tensor", "(", "latent_z", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", "\n", "latent_z", "=", "latent_z", ".", "view", "(", "batch_size", ",", "dim_latent", ",", "1", ",", "1", ")", "\n", "return", "latent_z", "\n", "\n"]], "home.repos.pwc.inspect_result.NicoZenith_PAD.None.utils.save_fig_losses": [[124, 150], ["numpy.arange", "matplotlib.figure", "plt.figure.add_subplot", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "fig.add_subplot.set_title", "fig.add_subplot.legend", "plt.figure.savefig", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "plt.figure.add_subplot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.legend"], "function", ["None"], ["", "", "def", "save_fig_losses", "(", "epoch", ",", "d_losses", ",", "g_losses", ",", "r_losses_real", ",", "r_losses_fake", ",", "kl_losses", ",", "fid_NREM", ",", "fid_REM", ",", "dir_files", ")", ":", "\n", "    ", "e", "=", "np", ".", "arange", "(", "0", ",", "epoch", "+", "1", ")", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "10", ",", "5", ")", ")", "\n", "ax1", "=", "fig", ".", "add_subplot", "(", "121", ")", "\n", "if", "g_losses", "is", "not", "None", ":", "\n", "        ", "ax1", ".", "plot", "(", "e", ",", "g_losses", ",", "label", "=", "'generator (REM)'", ")", "\n", "", "if", "d_losses", "is", "not", "None", ":", "\n", "        ", "ax1", ".", "plot", "(", "e", ",", "d_losses", ",", "color", "=", "'green'", ",", "label", "=", "'discriminator (Wake, REM)'", ")", "\n", "#ax1.set_ylim(0, 10)", "\n", "", "ax1", ".", "set_xlabel", "(", "'epochs'", ")", "\n", "ax1", ".", "set_ylabel", "(", "'loss'", ")", "\n", "ax1", ".", "set_title", "(", "'losses with training'", ")", "\n", "if", "r_losses_real", "is", "not", "None", ":", "\n", "        ", "ax1", ".", "plot", "(", "e", ",", "r_losses_real", ",", "color", "=", "'orange'", ",", "label", "=", "'data rec. (Wake)'", ")", "\n", "", "if", "r_losses_fake", "is", "not", "None", ":", "\n", "        ", "ax1", ".", "plot", "(", "e", ",", "r_losses_fake", ",", "color", "=", "'magenta'", ",", "label", "=", "'latent rec. (NREM)'", ")", "\n", "", "if", "kl_losses", "is", "not", "None", ":", "\n", "        ", "ax1", ".", "plot", "(", "e", ",", "kl_losses", ",", "color", "=", "'brown'", ",", "label", "=", "'KL div. (Wake)'", ")", "\n", "", "ax1", ".", "legend", "(", ")", "\n", "\n", "if", "fid_NREM", "is", "not", "None", "and", "fid_REM", "is", "not", "None", ":", "\n", "        ", "ax2", "=", "fig", ".", "add_subplot", "(", "122", ")", "\n", "ax2", ".", "plot", "(", "e", ",", "fid_NREM", ",", "color", "=", "'darkorange'", ",", "label", "=", "'FID NREM'", ")", "\n", "ax2", ".", "plot", "(", "e", ",", "fid_REM", ",", "color", "=", "'magenta'", ",", "label", "=", "'FID REM'", ")", "\n", "ax2", ".", "legend", "(", ")", "\n", "", "fig", ".", "savefig", "(", "dir_files", "+", "'/losses.pdf'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NicoZenith_PAD.None.utils.save_fig_trainval": [[152, 170], ["numpy.arange", "matplotlib.figure", "plt.figure.add_subplot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "fig.add_subplot.legend", "plt.figure.add_subplot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "fig.add_subplot.set_ylim", "fig.add_subplot.legend", "plt.figure.savefig"], "function", ["None"], ["", "def", "save_fig_trainval", "(", "epoch", ",", "all_losses", ",", "all_accuracies", ",", "dir_files", ")", ":", "\n", "    ", "e", "=", "np", ".", "arange", "(", "0", ",", "epoch", "+", "1", ")", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "10", ",", "5", ")", ")", "\n", "ax1", "=", "fig", ".", "add_subplot", "(", "121", ")", "\n", "ax1", ".", "plot", "(", "e", ",", "all_losses", "[", "'train'", "]", ",", "label", "=", "'train loss'", ")", "\n", "ax1", ".", "plot", "(", "e", ",", "all_losses", "[", "'val'", "]", ",", "label", "=", "'validation loss'", ")", "\n", "ax1", ".", "set_xlabel", "(", "'epochs'", ")", "\n", "ax1", ".", "set_ylabel", "(", "'loss'", ")", "\n", "ax1", ".", "legend", "(", ")", "\n", "\n", "ax2", "=", "fig", ".", "add_subplot", "(", "122", ")", "\n", "ax2", ".", "plot", "(", "e", ",", "all_accuracies", "[", "'train'", "]", ",", "label", "=", "'train accuracy'", ")", "\n", "ax2", ".", "plot", "(", "e", ",", "all_accuracies", "[", "'val'", "]", ",", "label", "=", "'val accuracy'", ")", "\n", "ax2", ".", "set_xlabel", "(", "'epochs'", ")", "\n", "ax2", ".", "set_ylabel", "(", "'accuracy (%)'", ")", "\n", "ax2", ".", "set_ylim", "(", "0", ",", "100", ")", "\n", "ax2", ".", "legend", "(", ")", "\n", "fig", ".", "savefig", "(", "dir_files", "+", "'/trainval.pdf'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NicoZenith_PAD.None.utils.kl_loss": [[202, 208], ["torch.mean", "torch.mean", "torch.std", "torch.std", "torch.mean", "torch.mean", "torch.log", "torch.log"], "function", ["None"], ["", "", "def", "kl_loss", "(", "latent_output", ")", ":", "\n", "    ", "m", "=", "torch", ".", "mean", "(", "latent_output", ",", "dim", "=", "0", ")", "\n", "s", "=", "torch", ".", "std", "(", "latent_output", ",", "dim", "=", "0", ")", "\n", "\n", "kl_loss", "=", "torch", ".", "mean", "(", "(", "s", "**", "2", "+", "m", "**", "2", ")", "/", "2", "-", "torch", ".", "log", "(", "s", ")", "-", "1", "/", "2", ")", "\n", "return", "kl_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.NicoZenith_PAD.None.utils.mean_and_sem": [[210, 219], ["array.mean", "stats.sem", "stats.sem", "ax.fill_between", "ax.fill_between", "numpy.arange", "numpy.arange"], "function", ["None"], ["", "def", "mean_and_sem", "(", "array", ",", "color", "=", "None", ",", "axis", "=", "0", ")", ":", "\n", "    ", "mean", "=", "array", ".", "mean", "(", "axis", "=", "0", ")", "\n", "sem_plus", "=", "mean", "+", "stats", ".", "sem", "(", "array", ",", "axis", "=", "axis", ")", "\n", "sem_minus", "=", "mean", "-", "stats", ".", "sem", "(", "array", ",", "axis", "=", "axis", ")", "\n", "if", "color", "is", "not", "None", ":", "\n", "        ", "ax", ".", "fill_between", "(", "np", ".", "arange", "(", "mean", ".", "shape", "[", "0", "]", ")", ",", "sem_plus", ",", "sem_minus", ",", "color", "=", "color", ",", "alpha", "=", "0.5", ")", "\n", "", "else", ":", "\n", "        ", "ax", ".", "fill_between", "(", "np", ".", "arange", "(", "mean", ".", "shape", "[", "0", "]", ")", ",", "sem_plus", ",", "sem_minus", ",", "alpha", "=", "0.5", ")", "\n", "", "return", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.NicoZenith_PAD.None.utils.calculate_activation_statistics": [[223, 245], ["model.eval", "numpy.empty", "adaptive_avg_pool2d.cpu().data.numpy().reshape", "numpy.mean", "numpy.cov", "images.cuda", "model", "adaptive_avg_pool2d", "adaptive_avg_pool2d.size", "len", "adaptive_avg_pool2d.size", "adaptive_avg_pool2d.size", "adaptive_avg_pool2d.cpu().data.numpy", "adaptive_avg_pool2d.cpu"], "function", ["None"], ["", "def", "calculate_activation_statistics", "(", "images", ",", "model", ",", "batch_size", "=", "128", ",", "dims", "=", "2048", ",", "\n", "cuda", "=", "False", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "act", "=", "np", ".", "empty", "(", "(", "len", "(", "images", ")", ",", "dims", ")", ")", "\n", "\n", "if", "cuda", ":", "\n", "        ", "batch", "=", "images", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "batch", "=", "images", "\n", "", "pred", "=", "model", "(", "batch", ")", "[", "0", "]", "\n", "\n", "\n", "# If model output is not scalar, apply global spatial average pooling.", "\n", "# This happens if you choose a dimensionality not equal 2048.", "\n", "if", "pred", ".", "size", "(", "2", ")", "!=", "1", "or", "pred", ".", "size", "(", "3", ")", "!=", "1", ":", "\n", "        ", "pred", "=", "adaptive_avg_pool2d", "(", "pred", ",", "output_size", "=", "(", "1", ",", "1", ")", ")", "\n", "", "act", "=", "pred", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "reshape", "(", "pred", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "act", "\n", "\n", "mu", "=", "np", ".", "mean", "(", "act", ",", "axis", "=", "0", ")", "\n", "sigma", "=", "np", ".", "cov", "(", "act", ",", "rowvar", "=", "False", ")", "\n", "return", "mu", ",", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.NicoZenith_PAD.None.utils.calculate_frechet_distance": [[248, 288], ["numpy.atleast_1d", "numpy.atleast_1d", "numpy.atleast_2d", "numpy.atleast_2d", "scipy.linalg.sqrtm", "numpy.iscomplexobj", "numpy.trace", "np.atleast_2d.dot", "numpy.isfinite().all", "print", "scipy.linalg.sqrtm", "numpy.eye", "numpy.allclose", "numpy.max", "ValueError", "numpy.trace", "numpy.isfinite", "numpy.abs", "diff.dot", "numpy.trace", "numpy.diagonal"], "function", ["None"], ["", "def", "calculate_frechet_distance", "(", "mu1", ",", "sigma1", ",", "mu2", ",", "sigma2", ",", "eps", "=", "1e-6", ")", ":", "\n", "    ", "\"\"\"Numpy implementation of the Frechet Distance.\n    The Frechet distance between two multivariate Gaussians X_1 ~ N(mu_1, C_1)\n    and X_2 ~ N(mu_2, C_2) is\n            d^2 = ||mu_1 - mu_2||^2 + Tr(C_1 + C_2 - 2*sqrt(C_1*C_2)).\n    \"\"\"", "\n", "\n", "mu1", "=", "np", ".", "atleast_1d", "(", "mu1", ")", "\n", "mu2", "=", "np", ".", "atleast_1d", "(", "mu2", ")", "\n", "\n", "sigma1", "=", "np", ".", "atleast_2d", "(", "sigma1", ")", "\n", "sigma2", "=", "np", ".", "atleast_2d", "(", "sigma2", ")", "\n", "\n", "assert", "mu1", ".", "shape", "==", "mu2", ".", "shape", ",", "'Training and test mean vectors have different lengths'", "\n", "assert", "sigma1", ".", "shape", "==", "sigma2", ".", "shape", ",", "'Training and test covariances have different dimensions'", "\n", "\n", "diff", "=", "mu1", "-", "mu2", "\n", "\n", "\n", "covmean", ",", "_", "=", "linalg", ".", "sqrtm", "(", "sigma1", ".", "dot", "(", "sigma2", ")", ",", "disp", "=", "False", ")", "\n", "if", "not", "np", ".", "isfinite", "(", "covmean", ")", ".", "all", "(", ")", ":", "\n", "        ", "msg", "=", "(", "'fid calculation produces singular product; '", "\n", "'adding %s to diagonal of cov estimates'", ")", "%", "eps", "\n", "print", "(", "msg", ")", "\n", "offset", "=", "np", ".", "eye", "(", "sigma1", ".", "shape", "[", "0", "]", ")", "*", "eps", "\n", "covmean", "=", "linalg", ".", "sqrtm", "(", "(", "sigma1", "+", "offset", ")", ".", "dot", "(", "sigma2", "+", "offset", ")", ")", "\n", "\n", "\n", "", "if", "np", ".", "iscomplexobj", "(", "covmean", ")", ":", "\n", "        ", "if", "not", "np", ".", "allclose", "(", "np", ".", "diagonal", "(", "covmean", ")", ".", "imag", ",", "0", ",", "atol", "=", "1e-3", ")", ":", "\n", "            ", "m", "=", "np", ".", "max", "(", "np", ".", "abs", "(", "covmean", ".", "imag", ")", ")", "\n", "raise", "ValueError", "(", "'Imaginary component {}'", ".", "format", "(", "m", ")", ")", "\n", "", "covmean", "=", "covmean", ".", "real", "\n", "\n", "", "tr_covmean", "=", "np", ".", "trace", "(", "covmean", ")", "\n", "\n", "return", "(", "diff", ".", "dot", "(", "diff", ")", "+", "np", ".", "trace", "(", "sigma1", ")", "+", "\n", "np", ".", "trace", "(", "sigma2", ")", "-", "2", "*", "tr_covmean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NicoZenith_PAD.None.utils.calculate_frechet": [[291, 301], ["numpy.mean", "numpy.mean", "numpy.cov", "numpy.cov", "utils.calculate_frechet_distance"], "function", ["home.repos.pwc.inspect_result.NicoZenith_PAD.None.utils.calculate_frechet_distance"], ["", "def", "calculate_frechet", "(", "inception_real", ",", "inception_fake", ",", "model", ",", "return_statistics", "=", "False", ")", ":", "\n", "     ", "mu_1", "=", "np", ".", "mean", "(", "inception_real", ",", "axis", "=", "0", ")", "\n", "mu_2", "=", "np", ".", "mean", "(", "inception_fake", ",", "axis", "=", "0", ")", "\n", "std_1", "=", "np", ".", "cov", "(", "inception_real", ",", "rowvar", "=", "False", ")", "\n", "std_2", "=", "np", ".", "cov", "(", "inception_fake", ",", "rowvar", "=", "False", ")", "\n", "\n", "\"\"\"get fretched distance\"\"\"", "\n", "fid_value", "=", "calculate_frechet_distance", "(", "mu_1", ",", "std_1", ",", "mu_2", ",", "std_2", ")", "\n", "\n", "return", "fid_value", "\n", "\n"]], "home.repos.pwc.inspect_result.NicoZenith_PAD.None.fig6_plot_FID.mean_and_err": [[29, 33], ["array.mean", "scipy.stats.sem"], "function", ["None"], ["", "def", "mean_and_err", "(", "array", ",", "axis", "=", "0", ")", ":", "\n", "    ", "mean", "=", "array", ".", "mean", "(", "axis", "=", "0", ")", "\n", "sem", "=", "stats", ".", "sem", "(", "array", ",", "axis", "=", "axis", ")", "\n", "return", "mean", ",", "sem", "\n", "\n"]]}