{"home.repos.pwc.inspect_result.clovaai_overhaul-distillation.Segmentation.train_with_distillation.Trainer.__init__": [[19, 100], ["utils.saver.Saver", "train_with_distillation.Trainer.saver.save_experiment_config", "dataloaders.make_data_loader", "modeling.deeplab.DeepLab", "torch.load", "train_with_distillation.Trainer.t_net.load_state_dict", "modeling.deeplab.DeepLab", "distiller.Distiller", "print", "print", "print", "print", "print", "print", "torch.optim.SGD", "torch.optim.SGD", "utils.loss.SegmentationLosses().build_loss", "utils.metrics.Evaluator", "utils.lr_scheduler.LR_Scheduler", "os.path.join", "os.path.isfile", "torch.from_numpy", "len", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "sum", "sum", "train_with_distillation.Trainer.s_net.get_1x_lr_params", "train_with_distillation.Trainer.s_net.get_10x_lr_params", "train_with_distillation.Trainer.d_net.Connectors.parameters", "train_with_distillation.Trainer.d_net.Connectors.parameters", "mypath.Path.db_root_dir", "numpy.load", "utils.calculate_weights.calculate_weigths_labels", "utils.calculate_weights.calculate_weigths_labels.astype", "utils.loss.SegmentationLosses", "torch.nn.DataParallel", "torch.nn.DataParallel", "p.data.nelement", "p.data.nelement", "train_with_distillation.Trainer.t_net.parameters", "train_with_distillation.Trainer.s_net.parameters"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.saver.Saver.save_experiment_config", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.dataloaders.__init__.make_data_loader", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.loss.SegmentationLosses.build_loss", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.modeling.deeplab.DeepLab.get_1x_lr_params", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.modeling.deeplab.DeepLab.get_10x_lr_params", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.Segmentation.mypath.Path.db_root_dir", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.calculate_weights.calculate_weigths_labels"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "\n", "# Define Saver", "\n", "self", ".", "saver", "=", "Saver", "(", "args", ")", "\n", "self", ".", "saver", ".", "save_experiment_config", "(", ")", "\n", "\n", "# Define Dataloader", "\n", "kwargs", "=", "{", "'num_workers'", ":", "args", ".", "workers", ",", "'pin_memory'", ":", "True", "}", "\n", "self", ".", "train_loader", ",", "self", ".", "val_loader", ",", "self", ".", "test_loader", ",", "self", ".", "nclass", "=", "make_data_loader", "(", "args", ",", "**", "kwargs", ")", "\n", "\n", "# Define network", "\n", "self", ".", "t_net", "=", "DeepLab", "(", "num_classes", "=", "self", ".", "nclass", ",", "\n", "backbone", "=", "'resnet101'", ",", "\n", "output_stride", "=", "args", ".", "out_stride", ",", "\n", "sync_bn", "=", "args", ".", "sync_bn", ",", "\n", "freeze_bn", "=", "args", ".", "freeze_bn", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "'pretrained/deeplab-resnet.pth.tar'", ")", "\n", "self", ".", "t_net", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n", "self", ".", "s_net", "=", "DeepLab", "(", "num_classes", "=", "self", ".", "nclass", ",", "\n", "backbone", "=", "args", ".", "backbone", ",", "\n", "output_stride", "=", "args", ".", "out_stride", ",", "\n", "sync_bn", "=", "args", ".", "sync_bn", ",", "\n", "freeze_bn", "=", "args", ".", "freeze_bn", ")", "\n", "self", ".", "d_net", "=", "distiller", ".", "Distiller", "(", "self", ".", "t_net", ",", "self", ".", "s_net", ")", "\n", "\n", "print", "(", "'Teacher Net: '", ")", "\n", "print", "(", "self", ".", "t_net", ")", "\n", "print", "(", "'Student Net: '", ")", "\n", "print", "(", "self", ".", "s_net", ")", "\n", "print", "(", "'the number of teacher model parameters: {}'", ".", "format", "(", "\n", "sum", "(", "[", "p", ".", "data", ".", "nelement", "(", ")", "for", "p", "in", "self", ".", "t_net", ".", "parameters", "(", ")", "]", ")", ")", ")", "\n", "print", "(", "'the number of student model parameters: {}'", ".", "format", "(", "\n", "sum", "(", "[", "p", ".", "data", ".", "nelement", "(", ")", "for", "p", "in", "self", ".", "s_net", ".", "parameters", "(", ")", "]", ")", ")", ")", "\n", "\n", "self", ".", "distill_ratio", "=", "1e-5", "\n", "self", ".", "batch_size", "=", "args", ".", "batch_size", "\n", "\n", "distill_params", "=", "[", "{", "'params'", ":", "self", ".", "s_net", ".", "get_1x_lr_params", "(", ")", ",", "'lr'", ":", "args", ".", "lr", "}", ",", "\n", "{", "'params'", ":", "self", ".", "s_net", ".", "get_10x_lr_params", "(", ")", ",", "'lr'", ":", "args", ".", "lr", "*", "10", "}", ",", "\n", "{", "'params'", ":", "self", ".", "d_net", ".", "Connectors", ".", "parameters", "(", ")", ",", "'lr'", ":", "args", ".", "lr", "*", "10", "}", "]", "\n", "\n", "init_params", "=", "[", "{", "'params'", ":", "self", ".", "d_net", ".", "Connectors", ".", "parameters", "(", ")", ",", "'lr'", ":", "args", ".", "lr", "*", "10", "}", "]", "\n", "\n", "# # Define Optimizer", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "distill_params", ",", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "nesterov", "=", "args", ".", "nesterov", ")", "\n", "self", ".", "init_optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "init_params", ",", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "nesterov", "=", "args", ".", "nesterov", ")", "\n", "\n", "# Define Criterion", "\n", "# whether to use class balanced weights", "\n", "if", "args", ".", "use_balanced_weights", ":", "\n", "            ", "classes_weights_path", "=", "os", ".", "path", ".", "join", "(", "Path", ".", "db_root_dir", "(", "args", ".", "dataset", ")", ",", "args", ".", "dataset", "+", "'_classes_weights.npy'", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "classes_weights_path", ")", ":", "\n", "                ", "weight", "=", "np", ".", "load", "(", "classes_weights_path", ")", "\n", "", "else", ":", "\n", "                ", "weight", "=", "calculate_weigths_labels", "(", "args", ".", "dataset", ",", "self", ".", "train_loader", ",", "self", ".", "nclass", ")", "\n", "", "weight", "=", "torch", ".", "from_numpy", "(", "weight", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "", "else", ":", "\n", "            ", "weight", "=", "None", "\n", "", "self", ".", "criterion", "=", "SegmentationLosses", "(", "weight", "=", "weight", ",", "cuda", "=", "args", ".", "cuda", ")", ".", "build_loss", "(", "mode", "=", "args", ".", "loss_type", ")", "\n", "\n", "# Define Evaluator", "\n", "self", ".", "evaluator", "=", "Evaluator", "(", "self", ".", "nclass", ")", "\n", "# Define lr scheduler", "\n", "self", ".", "scheduler", "=", "LR_Scheduler", "(", "args", ".", "lr_scheduler", ",", "args", ".", "lr", ",", "\n", "args", ".", "epochs", ",", "len", "(", "self", ".", "train_loader", ")", ")", "\n", "\n", "# Using cuda", "\n", "if", "args", ".", "cuda", ":", "\n", "            ", "self", ".", "s_net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "self", ".", "s_net", ")", ".", "cuda", "(", ")", "\n", "self", ".", "d_net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "self", ".", "d_net", ")", ".", "cuda", "(", ")", "\n", "\n", "# Resuming checkpoint", "\n", "", "self", ".", "best_pred", "=", "0.0", "\n", "\n", "# Clear start epoch if fine-tuning", "\n", "if", "args", ".", "ft", ":", "\n", "            ", "args", ".", "start_epoch", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.Segmentation.train_with_distillation.Trainer.training": [[101, 142], ["train_with_distillation.Trainer.d_net.train", "train_with_distillation.Trainer.d_net.module.t_net.train", "train_with_distillation.Trainer.d_net.module.s_net.train", "tqdm.tqdm.tqdm", "len", "enumerate", "print", "print", "train_with_distillation.Trainer.scheduler", "optimizer.zero_grad", "train_with_distillation.Trainer.d_net", "train_with_distillation.Trainer.criterion", "loss.backward", "optimizer.step", "loss.item", "tqdm.tqdm.tqdm.set_description", "train_with_distillation.Trainer.saver.save_checkpoint", "image.cuda", "target.cuda", "train_with_distillation.Trainer.s_net.module.state_dict", "loss_distill.sum"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.saver.Saver.save_checkpoint"], ["", "", "def", "training", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "train_loss", "=", "0.0", "\n", "self", ".", "d_net", ".", "train", "(", ")", "\n", "self", ".", "d_net", ".", "module", ".", "t_net", ".", "train", "(", ")", "\n", "self", ".", "d_net", ".", "module", ".", "s_net", ".", "train", "(", ")", "\n", "tbar", "=", "tqdm", "(", "self", ".", "train_loader", ")", "\n", "num_img_tr", "=", "len", "(", "self", ".", "train_loader", ")", "\n", "\n", "if", "epoch", "==", "0", ":", "\n", "            ", "optimizer", "=", "self", ".", "init_optimizer", "\n", "", "else", ":", "\n", "            ", "optimizer", "=", "self", ".", "optimizer", "\n", "\n", "", "for", "i", ",", "sample", "in", "enumerate", "(", "tbar", ")", ":", "\n", "            ", "image", ",", "target", "=", "sample", "[", "'image'", "]", ",", "sample", "[", "'label'", "]", "\n", "batch_size", "=", "image", ".", "shape", "[", "0", "]", "\n", "if", "self", ".", "args", ".", "cuda", ":", "\n", "                ", "image", ",", "target", "=", "image", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "", "self", ".", "scheduler", "(", "optimizer", ",", "i", ",", "epoch", ",", "self", ".", "best_pred", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", ",", "loss_distill", "=", "self", ".", "d_net", "(", "image", ")", "\n", "\n", "loss_seg", "=", "self", ".", "criterion", "(", "output", ",", "target", ")", "\n", "loss", "=", "loss_seg", "+", "loss_distill", ".", "sum", "(", ")", "/", "batch_size", "*", "1e-5", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "tbar", ".", "set_description", "(", "'Train loss: %.3f'", "%", "(", "train_loss", "/", "(", "i", "+", "1", ")", ")", ")", "\n", "\n", "", "print", "(", "'[Epoch: %d, numImages: %5d]'", "%", "(", "epoch", ",", "i", "*", "self", ".", "args", ".", "batch_size", "+", "image", ".", "data", ".", "shape", "[", "0", "]", ")", ")", "\n", "print", "(", "'Loss: %.3f'", "%", "train_loss", ")", "\n", "\n", "if", "self", ".", "args", ".", "no_val", ":", "\n", "# save checkpoint every epoch", "\n", "            ", "is_best", "=", "False", "\n", "self", ".", "saver", ".", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'state_dict'", ":", "self", ".", "s_net", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "'best_pred'", ":", "self", ".", "best_pred", ",", "\n", "}", ",", "is_best", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.Segmentation.train_with_distillation.Trainer.validation": [[144, 183], ["train_with_distillation.Trainer.s_net.eval", "train_with_distillation.Trainer.evaluator.reset", "tqdm.tqdm.tqdm", "enumerate", "train_with_distillation.Trainer.evaluator.Pixel_Accuracy", "train_with_distillation.Trainer.evaluator.Pixel_Accuracy_Class", "train_with_distillation.Trainer.evaluator.Mean_Intersection_over_Union", "train_with_distillation.Trainer.evaluator.Frequency_Weighted_Intersection_over_Union", "print", "print", "print", "print", "train_with_distillation.Trainer.criterion", "train_with_distillation.Trainer.item", "tqdm.tqdm.tqdm.set_description", "train_with_distillation.Trainer.data.cpu().numpy", "target.cpu().numpy.cpu().numpy.cpu().numpy", "numpy.argmax", "train_with_distillation.Trainer.evaluator.add_batch", "train_with_distillation.Trainer.saver.save_checkpoint", "torch.no_grad", "train_with_distillation.Trainer.s_net", "image.cuda", "target.cpu().numpy.cpu().numpy.cuda", "train_with_distillation.Trainer.data.cpu", "target.cpu().numpy.cpu().numpy.cpu", "train_with_distillation.Trainer.s_net.module.state_dict"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.metrics.Evaluator.reset", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.metrics.Evaluator.Pixel_Accuracy", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.metrics.Evaluator.Pixel_Accuracy_Class", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.metrics.Evaluator.Mean_Intersection_over_Union", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.metrics.Evaluator.Frequency_Weighted_Intersection_over_Union", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.metrics.Evaluator.add_batch", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.saver.Saver.save_checkpoint"], ["", "", "def", "validation", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "s_net", ".", "eval", "(", ")", "\n", "self", ".", "evaluator", ".", "reset", "(", ")", "\n", "tbar", "=", "tqdm", "(", "self", ".", "val_loader", ",", "desc", "=", "'\\r'", ")", "\n", "test_loss", "=", "0.0", "\n", "for", "i", ",", "sample", "in", "enumerate", "(", "tbar", ")", ":", "\n", "            ", "image", ",", "target", "=", "sample", "[", "'image'", "]", ",", "sample", "[", "'label'", "]", "\n", "if", "self", ".", "args", ".", "cuda", ":", "\n", "                ", "image", ",", "target", "=", "image", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "output", "=", "self", ".", "s_net", "(", "image", ")", "\n", "", "loss", "=", "self", ".", "criterion", "(", "output", ",", "target", ")", "\n", "test_loss", "+=", "loss", ".", "item", "(", ")", "\n", "tbar", ".", "set_description", "(", "'Test loss: %.3f'", "%", "(", "test_loss", "/", "(", "i", "+", "1", ")", ")", ")", "\n", "pred", "=", "output", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "target", "=", "target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred", "=", "np", ".", "argmax", "(", "pred", ",", "axis", "=", "1", ")", "\n", "# Add batch sample into evaluator", "\n", "self", ".", "evaluator", ".", "add_batch", "(", "target", ",", "pred", ")", "\n", "\n", "# Fast test during the training", "\n", "", "Acc", "=", "self", ".", "evaluator", ".", "Pixel_Accuracy", "(", ")", "\n", "Acc_class", "=", "self", ".", "evaluator", ".", "Pixel_Accuracy_Class", "(", ")", "\n", "mIoU", "=", "self", ".", "evaluator", ".", "Mean_Intersection_over_Union", "(", ")", "\n", "FWIoU", "=", "self", ".", "evaluator", ".", "Frequency_Weighted_Intersection_over_Union", "(", ")", "\n", "print", "(", "'Validation:'", ")", "\n", "print", "(", "'[Epoch: %d, numImages: %5d]'", "%", "(", "epoch", ",", "i", "*", "self", ".", "args", ".", "batch_size", "+", "image", ".", "data", ".", "shape", "[", "0", "]", ")", ")", "\n", "print", "(", "\"Acc:{}, Acc_class:{}, mIoU:{}, fwIoU: {}\"", ".", "format", "(", "Acc", ",", "Acc_class", ",", "mIoU", ",", "FWIoU", ")", ")", "\n", "print", "(", "'Loss: %.3f'", "%", "test_loss", ")", "\n", "\n", "new_pred", "=", "mIoU", "\n", "if", "new_pred", ">", "self", ".", "best_pred", ":", "\n", "            ", "is_best", "=", "True", "\n", "self", ".", "best_pred", "=", "new_pred", "\n", "self", ".", "saver", ".", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'state_dict'", ":", "self", ".", "s_net", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "'best_pred'", ":", "self", ".", "best_pred", ",", "\n", "}", ",", "is_best", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.Segmentation.train_with_distillation.main": [[184, 299], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "torch.manual_seed", "train_with_distillation.Trainer", "print", "print", "range", "torch.cuda.is_available", "train_with_distillation.Trainer.training", "len", "str", "train_with_distillation.Trainer.validation", "int", "ValueError", "parser.parse_args.dataset.lower", "parser.parse_args.gpu_ids.split", "len", "parser.parse_args.dataset.lower"], "function", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.Segmentation.train.Trainer.training", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.Segmentation.train.Trainer.validation"], ["", "", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"PyTorch DeeplabV3Plus Training\"", ")", "\n", "parser", ".", "add_argument", "(", "'--backbone'", ",", "type", "=", "str", ",", "default", "=", "'resnet18'", ",", "\n", "choices", "=", "[", "'resnet101'", ",", "'resnet18'", ",", "'xception'", ",", "'drn'", ",", "'mobilenet'", "]", ",", "\n", "help", "=", "'backbone name (default: resnet)'", ")", "\n", "parser", ".", "add_argument", "(", "'--out-stride'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "\n", "help", "=", "'network output stride (default: 8)'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'pascal'", ",", "\n", "choices", "=", "[", "'pascal'", ",", "'coco'", ",", "'cityscapes'", "]", ",", "\n", "help", "=", "'dataset name (default: pascal)'", ")", "\n", "parser", ".", "add_argument", "(", "'--use-sbd'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'whether to use SBD dataset (default: False)'", ")", "\n", "parser", ".", "add_argument", "(", "'--workers'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "metavar", "=", "'N'", ",", "help", "=", "'dataloader threads'", ")", "\n", "parser", ".", "add_argument", "(", "'--base-size'", ",", "type", "=", "int", ",", "default", "=", "513", ",", "\n", "help", "=", "'base image size'", ")", "\n", "parser", ".", "add_argument", "(", "'--crop-size'", ",", "type", "=", "int", ",", "default", "=", "513", ",", "\n", "help", "=", "'crop image size'", ")", "\n", "parser", ".", "add_argument", "(", "'--sync-bn'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'whether to use sync bn (default: False)'", ")", "\n", "parser", ".", "add_argument", "(", "'--freeze-bn'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'whether to freeze bn parameters (default: False)'", ")", "\n", "parser", ".", "add_argument", "(", "'--loss-type'", ",", "type", "=", "str", ",", "default", "=", "'ce'", ",", "\n", "choices", "=", "[", "'ce'", ",", "'focal'", "]", ",", "\n", "help", "=", "'loss func type (default: ce)'", ")", "\n", "# training hyper params", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of epochs to train (default: auto)'", ")", "\n", "parser", ".", "add_argument", "(", "'--start_epoch'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "metavar", "=", "'N'", ",", "help", "=", "'start epochs (default:0)'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "metavar", "=", "'N'", ",", "help", "=", "'input batch size for \\\n                                training (default: auto)'", ")", "\n", "parser", ".", "add_argument", "(", "'--test-batch-size'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "metavar", "=", "'N'", ",", "help", "=", "'input batch size for \\\n                                testing (default: auto)'", ")", "\n", "parser", ".", "add_argument", "(", "'--use-balanced-weights'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'whether to use balanced weights (default: False)'", ")", "\n", "# optimizer params", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'learning rate (default: auto)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr-scheduler'", ",", "type", "=", "str", ",", "default", "=", "'poly'", ",", "\n", "choices", "=", "[", "'poly'", ",", "'step'", ",", "'cos'", "]", ",", "\n", "help", "=", "'lr scheduler mode: (default: poly)'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "\n", "metavar", "=", "'M'", ",", "help", "=", "'momentum (default: 0.9)'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight-decay'", ",", "type", "=", "float", ",", "default", "=", "5e-4", ",", "\n", "metavar", "=", "'M'", ",", "help", "=", "'w-decay (default: 5e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--nesterov'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'whether use nesterov (default: False)'", ")", "\n", "# cuda, seed and logging", "\n", "parser", ".", "add_argument", "(", "'--no-cuda'", ",", "action", "=", "'store_true'", ",", "default", "=", "\n", "False", ",", "help", "=", "'disables CUDA training'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu-ids'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "\n", "help", "=", "'use which gpu to train, must be a \\\n                        comma-separated list of integers only (default=0)'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'S'", ",", "\n", "help", "=", "'random seed (default: 1)'", ")", "\n", "# checking point", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'put the path to resuming file if needed'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkname'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'set the checkpoint name'", ")", "\n", "# finetuning pre-trained models", "\n", "parser", ".", "add_argument", "(", "'--ft'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'finetuning on a different dataset'", ")", "\n", "# evaluation option", "\n", "parser", ".", "add_argument", "(", "'--eval-interval'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'evaluuation interval (default: 1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-val'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'skip validation during training'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "args", ".", "cuda", "=", "not", "args", ".", "no_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "if", "args", ".", "cuda", ":", "\n", "        ", "try", ":", "\n", "            ", "args", ".", "gpu_ids", "=", "[", "int", "(", "s", ")", "for", "s", "in", "args", ".", "gpu_ids", ".", "split", "(", "','", ")", "]", "\n", "", "except", "ValueError", ":", "\n", "            ", "raise", "ValueError", "(", "'Argument --gpu_ids must be a comma-separated list of integers only'", ")", "\n", "\n", "# default settings for epochs, batch_size and lr", "\n", "", "", "if", "args", ".", "epochs", "is", "None", ":", "\n", "        ", "epoches", "=", "{", "\n", "'coco'", ":", "30", ",", "\n", "'cityscapes'", ":", "200", ",", "\n", "'pascal'", ":", "50", ",", "\n", "}", "\n", "args", ".", "epochs", "=", "epoches", "[", "args", ".", "dataset", ".", "lower", "(", ")", "]", "\n", "\n", "", "if", "args", ".", "batch_size", "is", "None", ":", "\n", "        ", "args", ".", "batch_size", "=", "6", "*", "len", "(", "args", ".", "gpu_ids", ")", "\n", "\n", "", "if", "args", ".", "test_batch_size", "is", "None", ":", "\n", "        ", "args", ".", "test_batch_size", "=", "args", ".", "batch_size", "\n", "\n", "", "if", "args", ".", "lr", "is", "None", ":", "\n", "        ", "lrs", "=", "{", "\n", "'coco'", ":", "0.1", ",", "\n", "'cityscapes'", ":", "0.01", ",", "\n", "'pascal'", ":", "0.007", ",", "\n", "}", "\n", "args", ".", "lr", "=", "lrs", "[", "args", ".", "dataset", ".", "lower", "(", ")", "]", "/", "(", "6", "*", "len", "(", "args", ".", "gpu_ids", ")", ")", "*", "args", ".", "batch_size", "\n", "\n", "\n", "", "if", "args", ".", "checkname", "is", "None", ":", "\n", "        ", "args", ".", "checkname", "=", "'deeplab-'", "+", "str", "(", "args", ".", "backbone", ")", "\n", "", "print", "(", "args", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "trainer", "=", "Trainer", "(", "args", ")", "\n", "print", "(", "'Starting Epoch:'", ",", "trainer", ".", "args", ".", "start_epoch", ")", "\n", "print", "(", "'Total Epoches:'", ",", "trainer", ".", "args", ".", "epochs", ")", "\n", "for", "epoch", "in", "range", "(", "trainer", ".", "args", ".", "start_epoch", ",", "trainer", ".", "args", ".", "epochs", ")", ":", "\n", "        ", "trainer", ".", "training", "(", "epoch", ")", "\n", "if", "not", "trainer", ".", "args", ".", "no_val", "and", "epoch", "%", "args", ".", "eval_interval", "==", "(", "args", ".", "eval_interval", "-", "1", ")", ":", "\n", "            ", "trainer", ".", "validation", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.Segmentation.mypath.Path.db_root_dir": [[5, 18], ["print"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "db_root_dir", "(", "dataset", ")", ":", "\n", "        ", "if", "dataset", "==", "'pascal'", ":", "\n", "            ", "return", "'/path/to/datasets/VOCdevkit/VOC2012/'", "# folder that contains VOCdevkit/.", "\n", "", "elif", "dataset", "==", "'sbd'", ":", "\n", "            ", "return", "'/path/to/datasets/benchmark_RELEASE/'", "# folder that contains dataset/.", "\n", "", "elif", "dataset", "==", "'cityscapes'", ":", "\n", "            ", "return", "'/path/to/datasets/cityscapes/'", "# foler that contains leftImg8bit/", "\n", "", "elif", "dataset", "==", "'coco'", ":", "\n", "            ", "return", "'/path/to/datasets/coco/'", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Dataset {} not available.'", ".", "format", "(", "dataset", ")", ")", "\n", "raise", "NotImplementedError", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.Segmentation.distiller.Distiller.__init__": [[44, 61], ["torch.Module.__init__", "t_net.get_channel_num", "s_net.get_channel_num", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "t_net.get_bn_before_relu", "enumerate", "distiller.get_margin_from_BN", "distiller.Distiller.register_buffer", "distiller.build_feature_connector", "margin.unsqueeze().unsqueeze().unsqueeze().detach", "zip", "margin.unsqueeze().unsqueeze().unsqueeze", "margin.unsqueeze().unsqueeze", "margin.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.Distiller.__init__", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.WideResNet.get_channel_num", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.WideResNet.get_channel_num", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.WideResNet.get_bn_before_relu", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.get_margin_from_BN", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.build_feature_connector"], ["    ", "def", "__init__", "(", "self", ",", "t_net", ",", "s_net", ")", ":", "\n", "        ", "super", "(", "Distiller", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "t_channels", "=", "t_net", ".", "get_channel_num", "(", ")", "\n", "s_channels", "=", "s_net", ".", "get_channel_num", "(", ")", "\n", "\n", "self", ".", "Connectors", "=", "nn", ".", "ModuleList", "(", "[", "build_feature_connector", "(", "t", ",", "s", ")", "for", "t", ",", "s", "in", "zip", "(", "t_channels", ",", "s_channels", ")", "]", ")", "\n", "\n", "teacher_bns", "=", "t_net", ".", "get_bn_before_relu", "(", ")", "\n", "margins", "=", "[", "get_margin_from_BN", "(", "bn", ")", "for", "bn", "in", "teacher_bns", "]", "\n", "for", "i", ",", "margin", "in", "enumerate", "(", "margins", ")", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'margin%d'", "%", "(", "i", "+", "1", ")", ",", "margin", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "0", ")", ".", "detach", "(", ")", ")", "\n", "\n", "", "self", ".", "t_net", "=", "t_net", "\n", "self", ".", "s_net", "=", "s_net", "\n", "\n", "self", ".", "loss_divider", "=", "[", "8", ",", "4", ",", "2", ",", "1", ",", "1", ",", "4", "*", "4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.Segmentation.distiller.Distiller.forward": [[62, 75], ["distiller.Distiller.t_net.extract_feature", "distiller.Distiller.s_net.extract_feature", "len", "range", "distiller.distillation_loss", "t_feats[].detach", "getattr"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.WideResNet.extract_feature", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.WideResNet.extract_feature", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.distillation_loss"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "t_feats", ",", "t_out", "=", "self", ".", "t_net", ".", "extract_feature", "(", "x", ")", "\n", "s_feats", ",", "s_out", "=", "self", ".", "s_net", ".", "extract_feature", "(", "x", ")", "\n", "feat_num", "=", "len", "(", "t_feats", ")", "\n", "\n", "loss_distill", "=", "0", "\n", "for", "i", "in", "range", "(", "feat_num", ")", ":", "\n", "            ", "s_feats", "[", "i", "]", "=", "self", ".", "Connectors", "[", "i", "]", "(", "s_feats", "[", "i", "]", ")", "\n", "loss_distill", "+=", "distillation_loss", "(", "s_feats", "[", "i", "]", ",", "t_feats", "[", "i", "]", ".", "detach", "(", ")", ",", "getattr", "(", "self", ",", "'margin%d'", "%", "(", "i", "+", "1", ")", ")", ")", "/", "self", ".", "loss_divider", "[", "i", "]", "\n", "\n", "", "return", "s_out", ",", "loss_distill", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.Segmentation.distiller.distillation_loss": [[9, 14], ["torch.max", "torch.max", "torch.max", "torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss.sum"], "function", ["None"], ["def", "distillation_loss", "(", "source", ",", "target", ",", "margin", ")", ":", "\n", "    ", "target", "=", "torch", ".", "max", "(", "target", ",", "margin", ")", "\n", "loss", "=", "torch", ".", "nn", ".", "functional", ".", "mse_loss", "(", "source", ",", "target", ",", "reduction", "=", "\"none\"", ")", "\n", "loss", "=", "loss", "*", "(", "(", "source", ">", "target", ")", "|", "(", "target", ">", "0", ")", ")", ".", "float", "(", ")", "\n", "return", "loss", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.Segmentation.distiller.build_feature_connector": [[15, 28], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "function", ["None"], ["", "def", "build_feature_connector", "(", "t_channel", ",", "s_channel", ")", ":", "\n", "    ", "C", "=", "[", "nn", ".", "Conv2d", "(", "s_channel", ",", "t_channel", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "t_channel", ")", "]", "\n", "\n", "for", "m", "in", "C", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "C", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.Segmentation.distiller.get_margin_from_BN": [[29, 42], ["zip", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "abs", "m.item.item", "abs.item", "scipy.stats.norm.cdf", "margin.append", "margin.append", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "scipy.stats.norm.cdf", "math.sqrt", "math.exp"], "function", ["None"], ["", "def", "get_margin_from_BN", "(", "bn", ")", ":", "\n", "    ", "margin", "=", "[", "]", "\n", "std", "=", "bn", ".", "weight", ".", "data", "\n", "mean", "=", "bn", ".", "bias", ".", "data", "\n", "for", "(", "s", ",", "m", ")", "in", "zip", "(", "std", ",", "mean", ")", ":", "\n", "        ", "s", "=", "abs", "(", "s", ".", "item", "(", ")", ")", "\n", "m", "=", "m", ".", "item", "(", ")", "\n", "if", "norm", ".", "cdf", "(", "-", "m", "/", "s", ")", ">", "0.001", ":", "\n", "            ", "margin", ".", "append", "(", "-", "s", "*", "math", ".", "exp", "(", "-", "(", "m", "/", "s", ")", "**", "2", "/", "2", ")", "/", "math", ".", "sqrt", "(", "2", "*", "math", ".", "pi", ")", "/", "norm", ".", "cdf", "(", "-", "m", "/", "s", ")", "+", "m", ")", "\n", "", "else", ":", "\n", "            ", "margin", ".", "append", "(", "-", "3", "*", "s", ")", "\n", "\n", "", "", "return", "torch", ".", "FloatTensor", "(", "margin", ")", ".", "to", "(", "std", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.Segmentation.train.Trainer.__init__": [[18, 89], ["utils.saver.Saver", "train.Trainer.saver.save_experiment_config", "dataloaders.make_data_loader", "modeling.deeplab.DeepLab", "torch.optim.SGD", "utils.loss.SegmentationLosses().build_loss", "utils.metrics.Evaluator", "utils.lr_scheduler.LR_Scheduler", "os.path.join", "os.path.isfile", "torch.from_numpy", "len", "torch.nn.DataParallel", "modeling.sync_batchnorm.replicate.patch_replication_callback", "train.Trainer.model.cuda", "torch.load", "print", "modeling.deeplab.DeepLab.get_1x_lr_params", "modeling.deeplab.DeepLab.get_10x_lr_params", "mypath.Path.db_root_dir", "numpy.load", "utils.calculate_weights.calculate_weigths_labels", "utils.calculate_weights.calculate_weigths_labels.astype", "utils.loss.SegmentationLosses", "os.path.isfile", "RuntimeError", "train.Trainer.model.module.load_state_dict", "train.Trainer.model.load_state_dict", "train.Trainer.optimizer.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.saver.Saver.save_experiment_config", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.dataloaders.__init__.make_data_loader", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.loss.SegmentationLosses.build_loss", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.replicate.patch_replication_callback", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.modeling.deeplab.DeepLab.get_1x_lr_params", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.modeling.deeplab.DeepLab.get_10x_lr_params", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.Segmentation.mypath.Path.db_root_dir", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.calculate_weights.calculate_weigths_labels"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "\n", "# Define Saver", "\n", "self", ".", "saver", "=", "Saver", "(", "args", ")", "\n", "self", ".", "saver", ".", "save_experiment_config", "(", ")", "\n", "\n", "# Define Dataloader", "\n", "kwargs", "=", "{", "'num_workers'", ":", "args", ".", "workers", ",", "'pin_memory'", ":", "True", "}", "\n", "self", ".", "train_loader", ",", "self", ".", "val_loader", ",", "self", ".", "test_loader", ",", "self", ".", "nclass", "=", "make_data_loader", "(", "args", ",", "**", "kwargs", ")", "\n", "\n", "# Define network", "\n", "model", "=", "DeepLab", "(", "num_classes", "=", "self", ".", "nclass", ",", "\n", "backbone", "=", "args", ".", "backbone", ",", "\n", "output_stride", "=", "args", ".", "out_stride", ",", "\n", "sync_bn", "=", "args", ".", "sync_bn", ",", "\n", "freeze_bn", "=", "args", ".", "freeze_bn", ")", "\n", "\n", "train_params", "=", "[", "{", "'params'", ":", "model", ".", "get_1x_lr_params", "(", ")", ",", "'lr'", ":", "args", ".", "lr", "}", ",", "\n", "{", "'params'", ":", "model", ".", "get_10x_lr_params", "(", ")", ",", "'lr'", ":", "args", ".", "lr", "*", "10", "}", "]", "\n", "\n", "# Define Optimizer", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "train_params", ",", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "nesterov", "=", "args", ".", "nesterov", ")", "\n", "\n", "# Define Criterion", "\n", "# whether to use class balanced weights", "\n", "if", "args", ".", "use_balanced_weights", ":", "\n", "            ", "classes_weights_path", "=", "os", ".", "path", ".", "join", "(", "Path", ".", "db_root_dir", "(", "args", ".", "dataset", ")", ",", "args", ".", "dataset", "+", "'_classes_weights.npy'", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "classes_weights_path", ")", ":", "\n", "                ", "weight", "=", "np", ".", "load", "(", "classes_weights_path", ")", "\n", "", "else", ":", "\n", "                ", "weight", "=", "calculate_weigths_labels", "(", "args", ".", "dataset", ",", "self", ".", "train_loader", ",", "self", ".", "nclass", ")", "\n", "", "weight", "=", "torch", ".", "from_numpy", "(", "weight", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "", "else", ":", "\n", "            ", "weight", "=", "None", "\n", "", "self", ".", "criterion", "=", "SegmentationLosses", "(", "weight", "=", "weight", ",", "cuda", "=", "args", ".", "cuda", ")", ".", "build_loss", "(", "mode", "=", "args", ".", "loss_type", ")", "\n", "self", ".", "model", ",", "self", ".", "optimizer", "=", "model", ",", "optimizer", "\n", "\n", "# Define Evaluator", "\n", "self", ".", "evaluator", "=", "Evaluator", "(", "self", ".", "nclass", ")", "\n", "# Define lr scheduler", "\n", "self", ".", "scheduler", "=", "LR_Scheduler", "(", "args", ".", "lr_scheduler", ",", "args", ".", "lr", ",", "\n", "args", ".", "epochs", ",", "len", "(", "self", ".", "train_loader", ")", ")", "\n", "\n", "# Using cuda", "\n", "if", "args", ".", "cuda", ":", "\n", "            ", "self", ".", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "self", ".", "model", ",", "device_ids", "=", "self", ".", "args", ".", "gpu_ids", ")", "\n", "patch_replication_callback", "(", "self", ".", "model", ")", "\n", "self", ".", "model", "=", "self", ".", "model", ".", "cuda", "(", ")", "\n", "\n", "# Resuming checkpoint", "\n", "", "self", ".", "best_pred", "=", "0.0", "\n", "if", "args", ".", "resume", "is", "not", "None", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "if", "args", ".", "cuda", ":", "\n", "                ", "self", ".", "model", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "", "if", "not", "args", ".", "ft", ":", "\n", "                ", "self", ".", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "", "self", ".", "best_pred", "=", "checkpoint", "[", "'best_pred'", "]", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "\n", "# Clear start epoch if fine-tuning", "\n", "", "if", "args", ".", "ft", ":", "\n", "            ", "args", ".", "start_epoch", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.Segmentation.train.Trainer.training": [[90, 120], ["train.Trainer.model.train", "tqdm.tqdm.tqdm", "len", "enumerate", "print", "print", "train.Trainer.scheduler", "train.Trainer.optimizer.zero_grad", "train.Trainer.model", "train.Trainer.criterion", "train.Trainer.backward", "train.Trainer.optimizer.step", "train.Trainer.item", "tqdm.tqdm.tqdm.set_description", "train.Trainer.saver.save_checkpoint", "image.cuda", "target.cuda", "train.Trainer.model.module.state_dict", "train.Trainer.optimizer.state_dict"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.saver.Saver.save_checkpoint"], ["", "", "def", "training", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "train_loss", "=", "0.0", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "tbar", "=", "tqdm", "(", "self", ".", "train_loader", ")", "\n", "num_img_tr", "=", "len", "(", "self", ".", "train_loader", ")", "\n", "for", "i", ",", "sample", "in", "enumerate", "(", "tbar", ")", ":", "\n", "            ", "image", ",", "target", "=", "sample", "[", "'image'", "]", ",", "sample", "[", "'label'", "]", "\n", "if", "self", ".", "args", ".", "cuda", ":", "\n", "                ", "image", ",", "target", "=", "image", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "", "self", ".", "scheduler", "(", "self", ".", "optimizer", ",", "i", ",", "epoch", ",", "self", ".", "best_pred", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "self", ".", "model", "(", "image", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "output", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "tbar", ".", "set_description", "(", "'Train loss: %.3f'", "%", "(", "train_loss", "/", "(", "i", "+", "1", ")", ")", ")", "\n", "\n", "", "print", "(", "'[Epoch: %d, numImages: %5d]'", "%", "(", "epoch", ",", "i", "*", "self", ".", "args", ".", "batch_size", "+", "image", ".", "data", ".", "shape", "[", "0", "]", ")", ")", "\n", "print", "(", "'Loss: %.3f'", "%", "train_loss", ")", "\n", "\n", "if", "self", ".", "args", ".", "no_val", ":", "\n", "# save checkpoint every epoch", "\n", "            ", "is_best", "=", "False", "\n", "self", ".", "saver", ".", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'state_dict'", ":", "self", ".", "model", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'best_pred'", ":", "self", ".", "best_pred", ",", "\n", "}", ",", "is_best", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.Segmentation.train.Trainer.validation": [[122, 162], ["train.Trainer.model.eval", "train.Trainer.evaluator.reset", "tqdm.tqdm.tqdm", "enumerate", "train.Trainer.evaluator.Pixel_Accuracy", "train.Trainer.evaluator.Pixel_Accuracy_Class", "train.Trainer.evaluator.Mean_Intersection_over_Union", "train.Trainer.evaluator.Frequency_Weighted_Intersection_over_Union", "print", "print", "print", "print", "train.Trainer.criterion", "train.Trainer.item", "tqdm.tqdm.tqdm.set_description", "train.Trainer.data.cpu().numpy", "target.cpu().numpy.cpu().numpy.cpu().numpy", "numpy.argmax", "train.Trainer.evaluator.add_batch", "train.Trainer.saver.save_checkpoint", "torch.no_grad", "train.Trainer.model", "image.cuda", "target.cpu().numpy.cpu().numpy.cuda", "train.Trainer.data.cpu", "target.cpu().numpy.cpu().numpy.cpu", "train.Trainer.model.module.state_dict", "train.Trainer.optimizer.state_dict"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.metrics.Evaluator.reset", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.metrics.Evaluator.Pixel_Accuracy", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.metrics.Evaluator.Pixel_Accuracy_Class", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.metrics.Evaluator.Mean_Intersection_over_Union", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.metrics.Evaluator.Frequency_Weighted_Intersection_over_Union", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.metrics.Evaluator.add_batch", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.saver.Saver.save_checkpoint"], ["", "", "def", "validation", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "evaluator", ".", "reset", "(", ")", "\n", "tbar", "=", "tqdm", "(", "self", ".", "val_loader", ",", "desc", "=", "'\\r'", ")", "\n", "test_loss", "=", "0.0", "\n", "for", "i", ",", "sample", "in", "enumerate", "(", "tbar", ")", ":", "\n", "            ", "image", ",", "target", "=", "sample", "[", "'image'", "]", ",", "sample", "[", "'label'", "]", "\n", "if", "self", ".", "args", ".", "cuda", ":", "\n", "                ", "image", ",", "target", "=", "image", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "output", "=", "self", ".", "model", "(", "image", ")", "\n", "", "loss", "=", "self", ".", "criterion", "(", "output", ",", "target", ")", "\n", "test_loss", "+=", "loss", ".", "item", "(", ")", "\n", "tbar", ".", "set_description", "(", "'Test loss: %.3f'", "%", "(", "test_loss", "/", "(", "i", "+", "1", ")", ")", ")", "\n", "pred", "=", "output", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "target", "=", "target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred", "=", "np", ".", "argmax", "(", "pred", ",", "axis", "=", "1", ")", "\n", "# Add batch sample into evaluator", "\n", "self", ".", "evaluator", ".", "add_batch", "(", "target", ",", "pred", ")", "\n", "\n", "# Fast test during the training", "\n", "", "Acc", "=", "self", ".", "evaluator", ".", "Pixel_Accuracy", "(", ")", "\n", "Acc_class", "=", "self", ".", "evaluator", ".", "Pixel_Accuracy_Class", "(", ")", "\n", "mIoU", "=", "self", ".", "evaluator", ".", "Mean_Intersection_over_Union", "(", ")", "\n", "FWIoU", "=", "self", ".", "evaluator", ".", "Frequency_Weighted_Intersection_over_Union", "(", ")", "\n", "print", "(", "'Validation:'", ")", "\n", "print", "(", "'[Epoch: %d, numImages: %5d]'", "%", "(", "epoch", ",", "i", "*", "self", ".", "args", ".", "batch_size", "+", "image", ".", "data", ".", "shape", "[", "0", "]", ")", ")", "\n", "print", "(", "\"Acc:{}, Acc_class:{}, mIoU:{}, fwIoU: {}\"", ".", "format", "(", "Acc", ",", "Acc_class", ",", "mIoU", ",", "FWIoU", ")", ")", "\n", "print", "(", "'Loss: %.3f'", "%", "test_loss", ")", "\n", "\n", "new_pred", "=", "mIoU", "\n", "if", "new_pred", ">", "self", ".", "best_pred", ":", "\n", "            ", "is_best", "=", "True", "\n", "self", ".", "best_pred", "=", "new_pred", "\n", "self", ".", "saver", ".", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'state_dict'", ":", "self", ".", "model", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'best_pred'", ":", "self", ".", "best_pred", ",", "\n", "}", ",", "is_best", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.Segmentation.train.main": [[163, 278], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "torch.manual_seed", "train.Trainer", "print", "print", "range", "torch.cuda.is_available", "Trainer.training", "len", "str", "train.Trainer.validation", "int", "ValueError", "parser.parse_args.dataset.lower", "parser.parse_args.gpu_ids.split", "len", "parser.parse_args.dataset.lower"], "function", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.Segmentation.train.Trainer.training", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.Segmentation.train.Trainer.validation"], ["", "", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"PyTorch DeeplabV3Plus Training\"", ")", "\n", "parser", ".", "add_argument", "(", "'--backbone'", ",", "type", "=", "str", ",", "default", "=", "'resnet18'", ",", "\n", "choices", "=", "[", "'resnet101'", ",", "'resnet18'", ",", "'xception'", ",", "'drn'", ",", "'mobilenet'", "]", ",", "\n", "help", "=", "'backbone name (default: resnet)'", ")", "\n", "parser", ".", "add_argument", "(", "'--out-stride'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "\n", "help", "=", "'network output stride (default: 16)'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'pascal'", ",", "\n", "choices", "=", "[", "'pascal'", ",", "'coco'", ",", "'cityscapes'", "]", ",", "\n", "help", "=", "'dataset name (default: pascal)'", ")", "\n", "parser", ".", "add_argument", "(", "'--use-sbd'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'whether to use SBD dataset (default: False)'", ")", "\n", "parser", ".", "add_argument", "(", "'--workers'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "metavar", "=", "'N'", ",", "help", "=", "'dataloader threads'", ")", "\n", "parser", ".", "add_argument", "(", "'--base-size'", ",", "type", "=", "int", ",", "default", "=", "513", ",", "\n", "help", "=", "'base image size'", ")", "\n", "parser", ".", "add_argument", "(", "'--crop-size'", ",", "type", "=", "int", ",", "default", "=", "513", ",", "\n", "help", "=", "'crop image size'", ")", "\n", "parser", ".", "add_argument", "(", "'--sync-bn'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'whether to use sync bn (default: False)'", ")", "\n", "parser", ".", "add_argument", "(", "'--freeze-bn'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'whether to freeze bn parameters (default: False)'", ")", "\n", "parser", ".", "add_argument", "(", "'--loss-type'", ",", "type", "=", "str", ",", "default", "=", "'ce'", ",", "\n", "choices", "=", "[", "'ce'", ",", "'focal'", "]", ",", "\n", "help", "=", "'loss func type (default: ce)'", ")", "\n", "# training hyper params", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of epochs to train (default: auto)'", ")", "\n", "parser", ".", "add_argument", "(", "'--start_epoch'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "metavar", "=", "'N'", ",", "help", "=", "'start epochs (default:0)'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "metavar", "=", "'N'", ",", "help", "=", "'input batch size for \\\n                                training (default: auto)'", ")", "\n", "parser", ".", "add_argument", "(", "'--test-batch-size'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "metavar", "=", "'N'", ",", "help", "=", "'input batch size for \\\n                                testing (default: auto)'", ")", "\n", "parser", ".", "add_argument", "(", "'--use-balanced-weights'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'whether to use balanced weights (default: False)'", ")", "\n", "# optimizer params", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'learning rate (default: auto)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr-scheduler'", ",", "type", "=", "str", ",", "default", "=", "'poly'", ",", "\n", "choices", "=", "[", "'poly'", ",", "'step'", ",", "'cos'", "]", ",", "\n", "help", "=", "'lr scheduler mode: (default: poly)'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "\n", "metavar", "=", "'M'", ",", "help", "=", "'momentum (default: 0.9)'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight-decay'", ",", "type", "=", "float", ",", "default", "=", "5e-4", ",", "\n", "metavar", "=", "'M'", ",", "help", "=", "'w-decay (default: 5e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--nesterov'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'whether use nesterov (default: False)'", ")", "\n", "# cuda, seed and logging", "\n", "parser", ".", "add_argument", "(", "'--no-cuda'", ",", "action", "=", "'store_true'", ",", "default", "=", "\n", "False", ",", "help", "=", "'disables CUDA training'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu-ids'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "\n", "help", "=", "'use which gpu to train, must be a \\\n                        comma-separated list of integers only (default=0)'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'S'", ",", "\n", "help", "=", "'random seed (default: 1)'", ")", "\n", "# checking point", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'put the path to resuming file if needed'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkname'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'set the checkpoint name'", ")", "\n", "# finetuning pre-trained models", "\n", "parser", ".", "add_argument", "(", "'--ft'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'finetuning on a different dataset'", ")", "\n", "# evaluation option", "\n", "parser", ".", "add_argument", "(", "'--eval-interval'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'evaluuation interval (default: 1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-val'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'skip validation during training'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "args", ".", "cuda", "=", "not", "args", ".", "no_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "if", "args", ".", "cuda", ":", "\n", "        ", "try", ":", "\n", "            ", "args", ".", "gpu_ids", "=", "[", "int", "(", "s", ")", "for", "s", "in", "args", ".", "gpu_ids", ".", "split", "(", "','", ")", "]", "\n", "", "except", "ValueError", ":", "\n", "            ", "raise", "ValueError", "(", "'Argument --gpu_ids must be a comma-separated list of integers only'", ")", "\n", "\n", "# default settings for epochs, batch_size and lr", "\n", "", "", "if", "args", ".", "epochs", "is", "None", ":", "\n", "        ", "epoches", "=", "{", "\n", "'coco'", ":", "30", ",", "\n", "'cityscapes'", ":", "200", ",", "\n", "'pascal'", ":", "50", ",", "\n", "}", "\n", "args", ".", "epochs", "=", "epoches", "[", "args", ".", "dataset", ".", "lower", "(", ")", "]", "\n", "\n", "", "if", "args", ".", "batch_size", "is", "None", ":", "\n", "        ", "args", ".", "batch_size", "=", "6", "*", "len", "(", "args", ".", "gpu_ids", ")", "\n", "\n", "", "if", "args", ".", "test_batch_size", "is", "None", ":", "\n", "        ", "args", ".", "test_batch_size", "=", "args", ".", "batch_size", "\n", "\n", "", "if", "args", ".", "lr", "is", "None", ":", "\n", "        ", "lrs", "=", "{", "\n", "'coco'", ":", "0.1", ",", "\n", "'cityscapes'", ":", "0.01", ",", "\n", "'pascal'", ":", "0.007", ",", "\n", "}", "\n", "args", ".", "lr", "=", "lrs", "[", "args", ".", "dataset", ".", "lower", "(", ")", "]", "/", "(", "6", "*", "len", "(", "args", ".", "gpu_ids", ")", ")", "*", "args", ".", "batch_size", "\n", "\n", "\n", "", "if", "args", ".", "checkname", "is", "None", ":", "\n", "        ", "args", ".", "checkname", "=", "'deeplab-'", "+", "str", "(", "args", ".", "backbone", ")", "\n", "", "print", "(", "args", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "trainer", "=", "Trainer", "(", "args", ")", "\n", "print", "(", "'Starting Epoch:'", ",", "trainer", ".", "args", ".", "start_epoch", ")", "\n", "print", "(", "'Total Epoches:'", ",", "trainer", ".", "args", ".", "epochs", ")", "\n", "for", "epoch", "in", "range", "(", "trainer", ".", "args", ".", "start_epoch", ",", "trainer", ".", "args", ".", "epochs", ")", ":", "\n", "        ", "trainer", ".", "training", "(", "epoch", ")", "\n", "if", "not", "trainer", ".", "args", ".", "no_val", "and", "epoch", "%", "args", ".", "eval_interval", "==", "(", "args", ".", "eval_interval", "-", "1", ")", ":", "\n", "            ", "trainer", ".", "validation", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.metrics.Evaluator.__init__": [[5, 8], ["numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_class", ")", ":", "\n", "        ", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "confusion_matrix", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_class", ",", ")", "*", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.metrics.Evaluator.Pixel_Accuracy": [[9, 12], ["numpy.diag().sum", "metrics.Evaluator.confusion_matrix.sum", "numpy.diag"], "methods", ["None"], ["", "def", "Pixel_Accuracy", "(", "self", ")", ":", "\n", "        ", "Acc", "=", "np", ".", "diag", "(", "self", ".", "confusion_matrix", ")", ".", "sum", "(", ")", "/", "self", ".", "confusion_matrix", ".", "sum", "(", ")", "\n", "return", "Acc", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.metrics.Evaluator.Pixel_Accuracy_Class": [[13, 17], ["numpy.nanmean", "numpy.diag", "metrics.Evaluator.confusion_matrix.sum"], "methods", ["None"], ["", "def", "Pixel_Accuracy_Class", "(", "self", ")", ":", "\n", "        ", "Acc", "=", "np", ".", "diag", "(", "self", ".", "confusion_matrix", ")", "/", "self", ".", "confusion_matrix", ".", "sum", "(", "axis", "=", "1", ")", "\n", "Acc", "=", "np", ".", "nanmean", "(", "Acc", ")", "\n", "return", "Acc", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.metrics.Evaluator.Mean_Intersection_over_Union": [[18, 24], ["numpy.nanmean", "numpy.diag", "numpy.diag", "numpy.sum", "numpy.sum"], "methods", ["None"], ["", "def", "Mean_Intersection_over_Union", "(", "self", ")", ":", "\n", "        ", "MIoU", "=", "np", ".", "diag", "(", "self", ".", "confusion_matrix", ")", "/", "(", "\n", "np", ".", "sum", "(", "self", ".", "confusion_matrix", ",", "axis", "=", "1", ")", "+", "np", ".", "sum", "(", "self", ".", "confusion_matrix", ",", "axis", "=", "0", ")", "-", "\n", "np", ".", "diag", "(", "self", ".", "confusion_matrix", ")", ")", "\n", "MIoU", "=", "np", ".", "nanmean", "(", "MIoU", ")", "\n", "return", "MIoU", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.metrics.Evaluator.Frequency_Weighted_Intersection_over_Union": [[25, 33], ["numpy.sum", "numpy.sum", "numpy.diag", "numpy.diag", "numpy.sum", "numpy.sum"], "methods", ["None"], ["", "def", "Frequency_Weighted_Intersection_over_Union", "(", "self", ")", ":", "\n", "        ", "freq", "=", "np", ".", "sum", "(", "self", ".", "confusion_matrix", ",", "axis", "=", "1", ")", "/", "np", ".", "sum", "(", "self", ".", "confusion_matrix", ")", "\n", "iu", "=", "np", ".", "diag", "(", "self", ".", "confusion_matrix", ")", "/", "(", "\n", "np", ".", "sum", "(", "self", ".", "confusion_matrix", ",", "axis", "=", "1", ")", "+", "np", ".", "sum", "(", "self", ".", "confusion_matrix", ",", "axis", "=", "0", ")", "-", "\n", "np", ".", "diag", "(", "self", ".", "confusion_matrix", ")", ")", "\n", "\n", "FWIoU", "=", "(", "freq", "[", "freq", ">", "0", "]", "*", "iu", "[", "freq", ">", "0", "]", ")", ".", "sum", "(", ")", "\n", "return", "FWIoU", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.metrics.Evaluator._generate_matrix": [[34, 40], ["numpy.bincount", "numpy.bincount.reshape", "gt_image[].astype"], "methods", ["None"], ["", "def", "_generate_matrix", "(", "self", ",", "gt_image", ",", "pre_image", ")", ":", "\n", "        ", "mask", "=", "(", "gt_image", ">=", "0", ")", "&", "(", "gt_image", "<", "self", ".", "num_class", ")", "\n", "label", "=", "self", ".", "num_class", "*", "gt_image", "[", "mask", "]", ".", "astype", "(", "'int'", ")", "+", "pre_image", "[", "mask", "]", "\n", "count", "=", "np", ".", "bincount", "(", "label", ",", "minlength", "=", "self", ".", "num_class", "**", "2", ")", "\n", "confusion_matrix", "=", "count", ".", "reshape", "(", "self", ".", "num_class", ",", "self", ".", "num_class", ")", "\n", "return", "confusion_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.metrics.Evaluator.add_batch": [[41, 44], ["metrics.Evaluator._generate_matrix"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.metrics.Evaluator._generate_matrix"], ["", "def", "add_batch", "(", "self", ",", "gt_image", ",", "pre_image", ")", ":", "\n", "        ", "assert", "gt_image", ".", "shape", "==", "pre_image", ".", "shape", "\n", "self", ".", "confusion_matrix", "+=", "self", ".", "_generate_matrix", "(", "gt_image", ",", "pre_image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.metrics.Evaluator.reset": [[45, 47], ["numpy.zeros"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "confusion_matrix", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_class", ",", ")", "*", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.summaries.TensorboardSummary.__init__": [[8, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "directory", ")", ":", "\n", "        ", "self", ".", "directory", "=", "directory", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.summaries.TensorboardSummary.create_summary": [[11, 14], ["tensorboardX.SummaryWriter", "os.path.join"], "methods", ["None"], ["", "def", "create_summary", "(", "self", ")", ":", "\n", "        ", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "directory", ")", ")", "\n", "return", "writer", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.summaries.TensorboardSummary.visualize_image": [[15, 24], ["torchvision.utils.make_grid", "writer.add_image", "torchvision.utils.make_grid", "writer.add_image", "torchvision.utils.make_grid", "writer.add_image", "dataloaders.utils.decode_seg_map_sequence", "dataloaders.utils.decode_seg_map_sequence", "image[].clone().cpu", "[].detach().cpu().numpy", "torch.squeeze().detach().cpu().numpy", "image[].clone", "[].detach().cpu", "torch.squeeze().detach().cpu", "[].detach", "torch.squeeze().detach", "torch.squeeze", "torch.max"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.dataloaders.utils.decode_seg_map_sequence", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.dataloaders.utils.decode_seg_map_sequence"], ["", "def", "visualize_image", "(", "self", ",", "writer", ",", "dataset", ",", "image", ",", "target", ",", "output", ",", "global_step", ")", ":", "\n", "        ", "grid_image", "=", "make_grid", "(", "image", "[", ":", "3", "]", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "data", ",", "3", ",", "normalize", "=", "True", ")", "\n", "writer", ".", "add_image", "(", "'Image'", ",", "grid_image", ",", "global_step", ")", "\n", "grid_image", "=", "make_grid", "(", "decode_seg_map_sequence", "(", "torch", ".", "max", "(", "output", "[", ":", "3", "]", ",", "1", ")", "[", "1", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "dataset", "=", "dataset", ")", ",", "3", ",", "normalize", "=", "False", ",", "range", "=", "(", "0", ",", "255", ")", ")", "\n", "writer", ".", "add_image", "(", "'Predicted label'", ",", "grid_image", ",", "global_step", ")", "\n", "grid_image", "=", "make_grid", "(", "decode_seg_map_sequence", "(", "torch", ".", "squeeze", "(", "target", "[", ":", "3", "]", ",", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "dataset", "=", "dataset", ")", ",", "3", ",", "normalize", "=", "False", ",", "range", "=", "(", "0", ",", "255", ")", ")", "\n", "writer", ".", "add_image", "(", "'Groundtruth label'", ",", "grid_image", ",", "global_step", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.loss.SegmentationLosses.__init__": [[5, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "weight", "=", "None", ",", "size_average", "=", "True", ",", "batch_average", "=", "True", ",", "ignore_index", "=", "255", ",", "cuda", "=", "False", ")", ":", "\n", "        ", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "weight", "=", "weight", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "batch_average", "=", "batch_average", "\n", "self", ".", "cuda", "=", "cuda", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.loss.SegmentationLosses.build_loss": [[12, 20], ["None"], "methods", ["None"], ["", "def", "build_loss", "(", "self", ",", "mode", "=", "'ce'", ")", ":", "\n", "        ", "\"\"\"Choices: ['ce' or 'focal']\"\"\"", "\n", "if", "mode", "==", "'ce'", ":", "\n", "            ", "return", "self", ".", "CrossEntropyLoss", "\n", "", "elif", "mode", "==", "'focal'", ":", "\n", "            ", "return", "self", ".", "FocalLoss", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.loss.SegmentationLosses.CrossEntropyLoss": [[21, 34], ["logit.size", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "criterion.cuda.cuda.", "criterion.cuda.cuda.cuda", "target.long"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.loss.SegmentationLosses.CrossEntropyLoss", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.loss.SegmentationLosses.CrossEntropyLoss"], ["", "", "def", "CrossEntropyLoss", "(", "self", ",", "logit", ",", "target", ")", ":", "\n", "        ", "n", ",", "c", ",", "h", ",", "w", "=", "logit", ".", "size", "(", ")", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "weight", "=", "self", ".", "weight", ",", "ignore_index", "=", "self", ".", "ignore_index", ",", "\n", "size_average", "=", "self", ".", "size_average", ")", "\n", "if", "self", ".", "cuda", ":", "\n", "            ", "criterion", "=", "criterion", ".", "cuda", "(", ")", "\n", "\n", "", "loss", "=", "criterion", "(", "logit", ",", "target", ".", "long", "(", ")", ")", "\n", "\n", "if", "self", ".", "batch_average", ":", "\n", "            ", "loss", "/=", "n", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.loss.SegmentationLosses.FocalLoss": [[35, 52], ["logit.size", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "criterion.cuda.cuda.cuda", "criterion.cuda.cuda.", "target.long"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.loss.SegmentationLosses.CrossEntropyLoss", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.loss.SegmentationLosses.CrossEntropyLoss"], ["", "def", "FocalLoss", "(", "self", ",", "logit", ",", "target", ",", "gamma", "=", "2", ",", "alpha", "=", "0.5", ")", ":", "\n", "        ", "n", ",", "c", ",", "h", ",", "w", "=", "logit", ".", "size", "(", ")", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "weight", "=", "self", ".", "weight", ",", "ignore_index", "=", "self", ".", "ignore_index", ",", "\n", "size_average", "=", "self", ".", "size_average", ")", "\n", "if", "self", ".", "cuda", ":", "\n", "            ", "criterion", "=", "criterion", ".", "cuda", "(", ")", "\n", "\n", "", "logpt", "=", "-", "criterion", "(", "logit", ",", "target", ".", "long", "(", ")", ")", "\n", "pt", "=", "torch", ".", "exp", "(", "logpt", ")", "\n", "if", "alpha", "is", "not", "None", ":", "\n", "            ", "logpt", "*=", "alpha", "\n", "", "loss", "=", "-", "(", "(", "1", "-", "pt", ")", "**", "gamma", ")", "*", "logpt", "\n", "\n", "if", "self", ".", "batch_average", ":", "\n", "            ", "loss", "/=", "n", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.lr_scheduler.LR_Scheduler.__init__": [[30, 42], ["print"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mode", ",", "base_lr", ",", "num_epochs", ",", "iters_per_epoch", "=", "0", ",", "\n", "lr_step", "=", "0", ",", "warmup_epochs", "=", "0", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "print", "(", "'Using {} LR Scheduler!'", ".", "format", "(", "self", ".", "mode", ")", ")", "\n", "self", ".", "lr", "=", "base_lr", "\n", "if", "mode", "==", "'step'", ":", "\n", "            ", "assert", "lr_step", "\n", "", "self", ".", "lr_step", "=", "lr_step", "\n", "self", ".", "iters_per_epoch", "=", "iters_per_epoch", "\n", "self", ".", "N", "=", "num_epochs", "*", "iters_per_epoch", "\n", "self", ".", "epoch", "=", "-", "1", "\n", "self", ".", "warmup_iters", "=", "warmup_epochs", "*", "iters_per_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.lr_scheduler.LR_Scheduler.__call__": [[43, 62], ["lr_scheduler.LR_Scheduler._adjust_learning_rate", "print", "math.cos", "pow"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.lr_scheduler.LR_Scheduler._adjust_learning_rate"], ["", "def", "__call__", "(", "self", ",", "optimizer", ",", "i", ",", "epoch", ",", "best_pred", ")", ":", "\n", "        ", "T", "=", "epoch", "*", "self", ".", "iters_per_epoch", "+", "i", "\n", "if", "self", ".", "mode", "==", "'cos'", ":", "\n", "            ", "lr", "=", "0.5", "*", "self", ".", "lr", "*", "(", "1", "+", "math", ".", "cos", "(", "1.0", "*", "T", "/", "self", ".", "N", "*", "math", ".", "pi", ")", ")", "\n", "", "elif", "self", ".", "mode", "==", "'poly'", ":", "\n", "            ", "lr", "=", "self", ".", "lr", "*", "pow", "(", "(", "1", "-", "1.0", "*", "T", "/", "self", ".", "N", ")", ",", "0.9", ")", "\n", "", "elif", "self", ".", "mode", "==", "'step'", ":", "\n", "            ", "lr", "=", "self", ".", "lr", "*", "(", "0.1", "**", "(", "epoch", "//", "self", ".", "lr_step", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplemented", "\n", "# warm up lr schedule", "\n", "", "if", "self", ".", "warmup_iters", ">", "0", "and", "T", "<", "self", ".", "warmup_iters", ":", "\n", "            ", "lr", "=", "lr", "*", "1.0", "*", "T", "/", "self", ".", "warmup_iters", "\n", "", "if", "epoch", ">", "self", ".", "epoch", ":", "\n", "            ", "print", "(", "'\\n=>Epoches %i, learning rate = %.4f, \\\n                previous best = %.4f'", "%", "(", "epoch", ",", "lr", ",", "best_pred", ")", ")", "\n", "self", ".", "epoch", "=", "epoch", "\n", "", "assert", "lr", ">=", "0", "\n", "self", ".", "_adjust_learning_rate", "(", "optimizer", ",", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.lr_scheduler.LR_Scheduler._adjust_learning_rate": [[63, 71], ["len", "range", "len"], "methods", ["None"], ["", "def", "_adjust_learning_rate", "(", "self", ",", "optimizer", ",", "lr", ")", ":", "\n", "        ", "if", "len", "(", "optimizer", ".", "param_groups", ")", "==", "1", ":", "\n", "            ", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "\n", "", "else", ":", "\n", "# enlarge the lr at the head", "\n", "            ", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "optimizer", ".", "param_groups", ")", ")", ":", "\n", "                ", "optimizer", ".", "param_groups", "[", "i", "]", "[", "'lr'", "]", "=", "lr", "*", "10", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.saver.Saver.__init__": [[9, 18], ["os.path.join", "sorted", "os.path.join", "glob.glob", "os.path.exists", "os.makedirs", "os.path.join", "int", "str", "saver.Saver.runs[].split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "directory", "=", "os", ".", "path", ".", "join", "(", "'run'", ",", "args", ".", "dataset", ",", "args", ".", "checkname", ")", "\n", "self", ".", "runs", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "directory", ",", "'experiment_*'", ")", ")", ")", "\n", "run_id", "=", "int", "(", "self", ".", "runs", "[", "-", "1", "]", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "+", "1", "if", "self", ".", "runs", "else", "0", "\n", "\n", "self", ".", "experiment_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "directory", ",", "'experiment_{}'", ".", "format", "(", "str", "(", "run_id", ")", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "experiment_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "experiment_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.saver.Saver.save_checkpoint": [[19, 43], ["os.path.join", "torch.save", "open", "f.write", "max", "shutil.copyfile", "os.path.join", "str", "os.path.join", "os.path.exists", "shutil.copyfile", "os.path.join", "run.split", "os.path.join", "str", "open", "float", "previous_miou.append", "f.readline"], "methods", ["None"], ["", "", "def", "save_checkpoint", "(", "self", ",", "state", ",", "is_best", ",", "filename", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "        ", "\"\"\"Saves checkpoint to disk\"\"\"", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "experiment_dir", ",", "filename", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "            ", "best_pred", "=", "state", "[", "'best_pred'", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "experiment_dir", ",", "'best_pred.txt'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "str", "(", "best_pred", ")", ")", "\n", "", "if", "self", ".", "runs", ":", "\n", "                ", "previous_miou", "=", "[", "0.0", "]", "\n", "for", "run", "in", "self", ".", "runs", ":", "\n", "                    ", "run_id", "=", "run", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "directory", ",", "'experiment_{}'", ".", "format", "(", "str", "(", "run_id", ")", ")", ",", "'best_pred.txt'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "                        ", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "                            ", "miou", "=", "float", "(", "f", ".", "readline", "(", ")", ")", "\n", "previous_miou", ".", "append", "(", "miou", ")", "\n", "", "", "else", ":", "\n", "                        ", "continue", "\n", "", "", "max_miou", "=", "max", "(", "previous_miou", ")", "\n", "if", "best_pred", ">", "max_miou", ":", "\n", "                    ", "shutil", ".", "copyfile", "(", "filename", ",", "os", ".", "path", ".", "join", "(", "self", ".", "directory", ",", "'model_best.pth.tar'", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "shutil", ".", "copyfile", "(", "filename", ",", "os", ".", "path", ".", "join", "(", "self", ".", "directory", ",", "'model_best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.saver.Saver.save_experiment_config": [[44, 61], ["os.path.join", "open", "collections.OrderedDict", "collections.OrderedDict.items", "open.close", "open.write", "str"], "methods", ["None"], ["", "", "", "def", "save_experiment_config", "(", "self", ")", ":", "\n", "        ", "logfile", "=", "os", ".", "path", ".", "join", "(", "self", ".", "experiment_dir", ",", "'parameters.txt'", ")", "\n", "log_file", "=", "open", "(", "logfile", ",", "'w'", ")", "\n", "p", "=", "OrderedDict", "(", ")", "\n", "p", "[", "'datset'", "]", "=", "self", ".", "args", ".", "dataset", "\n", "p", "[", "'backbone'", "]", "=", "self", ".", "args", ".", "backbone", "\n", "p", "[", "'out_stride'", "]", "=", "self", ".", "args", ".", "out_stride", "\n", "p", "[", "'lr'", "]", "=", "self", ".", "args", ".", "lr", "\n", "p", "[", "'lr_scheduler'", "]", "=", "self", ".", "args", ".", "lr_scheduler", "\n", "p", "[", "'loss_type'", "]", "=", "self", ".", "args", ".", "loss_type", "\n", "p", "[", "'epoch'", "]", "=", "self", ".", "args", ".", "epochs", "\n", "p", "[", "'base_size'", "]", "=", "self", ".", "args", ".", "base_size", "\n", "p", "[", "'crop_size'", "]", "=", "self", ".", "args", ".", "crop_size", "\n", "\n", "for", "key", ",", "val", "in", "p", ".", "items", "(", ")", ":", "\n", "            ", "log_file", ".", "write", "(", "key", "+", "':'", "+", "str", "(", "val", ")", "+", "'\\n'", ")", "\n", "", "log_file", ".", "close", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.utils.calculate_weights.calculate_weigths_labels": [[6, 30], ["numpy.zeros", "tqdm.tqdm", "print", "tqdm.tqdm.close", "numpy.sum", "numpy.array", "os.path.join", "numpy.save", "y.detach().cpu().numpy.detach().cpu().numpy", "y[].astype", "numpy.bincount", "class_weights.append", "mypath.Path.db_root_dir", "numpy.log", "y.detach().cpu().numpy.detach().cpu", "y.detach().cpu().numpy.detach"], "function", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.Segmentation.mypath.Path.db_root_dir"], ["def", "calculate_weigths_labels", "(", "dataset", ",", "dataloader", ",", "num_classes", ")", ":", "\n", "# Create an instance from the data loader", "\n", "    ", "z", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", ")", ")", "\n", "# Initialize tqdm", "\n", "tqdm_batch", "=", "tqdm", "(", "dataloader", ")", "\n", "print", "(", "'Calculating classes weights'", ")", "\n", "for", "sample", "in", "tqdm_batch", ":", "\n", "        ", "y", "=", "sample", "[", "'label'", "]", "\n", "y", "=", "y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "mask", "=", "(", "y", ">=", "0", ")", "&", "(", "y", "<", "num_classes", ")", "\n", "labels", "=", "y", "[", "mask", "]", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "count_l", "=", "np", ".", "bincount", "(", "labels", ",", "minlength", "=", "num_classes", ")", "\n", "z", "+=", "count_l", "\n", "", "tqdm_batch", ".", "close", "(", ")", "\n", "total_frequency", "=", "np", ".", "sum", "(", "z", ")", "\n", "class_weights", "=", "[", "]", "\n", "for", "frequency", "in", "z", ":", "\n", "        ", "class_weight", "=", "1", "/", "(", "np", ".", "log", "(", "1.02", "+", "(", "frequency", "/", "total_frequency", ")", ")", ")", "\n", "class_weights", ".", "append", "(", "class_weight", ")", "\n", "", "ret", "=", "np", ".", "array", "(", "class_weights", ")", "\n", "classes_weights_path", "=", "os", ".", "path", ".", "join", "(", "Path", ".", "db_root_dir", "(", "dataset", ")", ",", "dataset", "+", "'_classes_weights.npy'", ")", "\n", "np", ".", "save", "(", "classes_weights_path", ",", "ret", ")", "\n", "\n", "return", "ret", "", "", ""]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.modeling.aspp._ASPPModule.__init__": [[8, 16], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "aspp._ASPPModule._init_weight"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.Distiller.__init__", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.xception.AlignedXception._init_weight"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "kernel_size", ",", "padding", ",", "dilation", ",", "BatchNorm", ")", ":", "\n", "        ", "super", "(", "_ASPPModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "atrous_conv", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "1", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "BatchNorm", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "_init_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.modeling.aspp._ASPPModule.forward": [[17, 22], ["aspp._ASPPModule.atrous_conv", "aspp._ASPPModule.bn", "aspp._ASPPModule.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "atrous_conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "\n", "return", "self", ".", "relu", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.modeling.aspp._ASPPModule._init_weight": [[23, 33], ["aspp._ASPPModule.modules", "isinstance", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_init_weight", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "SynchronizedBatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.modeling.aspp.ASPP.__init__": [[35, 66], ["torch.Module.__init__", "aspp._ASPPModule", "aspp._ASPPModule", "aspp._ASPPModule", "aspp._ASPPModule", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "aspp.ASPP._init_weight", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.Distiller.__init__", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.xception.AlignedXception._init_weight"], ["    ", "def", "__init__", "(", "self", ",", "backbone", ",", "output_stride", ",", "BatchNorm", ")", ":", "\n", "        ", "super", "(", "ASPP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "backbone", "==", "'drn'", ":", "\n", "            ", "inplanes", "=", "512", "\n", "", "elif", "backbone", "==", "'mobilenet'", ":", "\n", "            ", "inplanes", "=", "320", "\n", "", "elif", "backbone", "==", "'resnet18'", ":", "\n", "            ", "inplanes", "=", "512", "\n", "", "else", ":", "\n", "            ", "inplanes", "=", "2048", "\n", "", "if", "output_stride", "==", "16", ":", "\n", "            ", "dilations", "=", "[", "1", ",", "6", ",", "12", ",", "18", "]", "\n", "", "elif", "output_stride", "==", "8", ":", "\n", "            ", "dilations", "=", "[", "1", ",", "12", ",", "24", ",", "36", "]", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "aspp1", "=", "_ASPPModule", "(", "inplanes", ",", "256", ",", "1", ",", "padding", "=", "0", ",", "dilation", "=", "dilations", "[", "0", "]", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "self", ".", "aspp2", "=", "_ASPPModule", "(", "inplanes", ",", "256", ",", "3", ",", "padding", "=", "dilations", "[", "1", "]", ",", "dilation", "=", "dilations", "[", "1", "]", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "self", ".", "aspp3", "=", "_ASPPModule", "(", "inplanes", ",", "256", ",", "3", ",", "padding", "=", "dilations", "[", "2", "]", ",", "dilation", "=", "dilations", "[", "2", "]", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "self", ".", "aspp4", "=", "_ASPPModule", "(", "inplanes", ",", "256", ",", "3", ",", "padding", "=", "dilations", "[", "3", "]", ",", "dilation", "=", "dilations", "[", "3", "]", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "\n", "self", ".", "global_avg_pool", "=", "nn", ".", "Sequential", "(", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "256", ",", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "1280", ",", "256", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm", "(", "256", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "_init_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.modeling.aspp.ASPP.forward": [[67, 81], ["aspp.ASPP.aspp1", "aspp.ASPP.aspp2", "aspp.ASPP.aspp3", "aspp.ASPP.aspp4", "aspp.ASPP.global_avg_pool", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "aspp.ASPP.conv1", "aspp.ASPP.bn1", "aspp.ASPP.relu", "aspp.ASPP.dropout", "aspp.ASPP.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "self", ".", "aspp1", "(", "x", ")", "\n", "x2", "=", "self", ".", "aspp2", "(", "x", ")", "\n", "x3", "=", "self", ".", "aspp3", "(", "x", ")", "\n", "x4", "=", "self", ".", "aspp4", "(", "x", ")", "\n", "x5", "=", "self", ".", "global_avg_pool", "(", "x", ")", "\n", "x5", "=", "F", ".", "interpolate", "(", "x5", ",", "size", "=", "x4", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x1", ",", "x2", ",", "x3", ",", "x4", ",", "x5", ")", ",", "dim", "=", "1", ")", "\n", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "return", "self", ".", "dropout", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.modeling.aspp.ASPP.get_bn_before_relu": [[82, 84], ["None"], "methods", ["None"], ["", "def", "get_bn_before_relu", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "bn1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.modeling.aspp.ASPP.get_channel_num": [[85, 87], ["None"], "methods", ["None"], ["", "def", "get_channel_num", "(", "self", ")", ":", "\n", "        ", "return", "[", "256", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.modeling.aspp.ASPP.extract_feature": [[89, 104], ["aspp.ASPP.aspp1", "aspp.ASPP.aspp2", "aspp.ASPP.aspp3", "aspp.ASPP.aspp4", "aspp.ASPP.global_avg_pool", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "aspp.ASPP.conv1", "aspp.ASPP.bn1", "aspp.ASPP.relu", "aspp.ASPP.size"], "methods", ["None"], ["", "def", "extract_feature", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "self", ".", "aspp1", "(", "x", ")", "\n", "x2", "=", "self", ".", "aspp2", "(", "x", ")", "\n", "x3", "=", "self", ".", "aspp3", "(", "x", ")", "\n", "x4", "=", "self", ".", "aspp4", "(", "x", ")", "\n", "x5", "=", "self", ".", "global_avg_pool", "(", "x", ")", "\n", "x5", "=", "F", ".", "interpolate", "(", "x5", ",", "size", "=", "x4", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x1", ",", "x2", ",", "x3", ",", "x4", ",", "x5", ")", ",", "dim", "=", "1", ")", "\n", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "feat1", "=", "x", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "return", "[", "feat1", "]", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.modeling.aspp.ASPP._init_weight": [[105, 117], ["aspp.ASPP.modules", "isinstance", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_init_weight", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "# n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels", "\n", "# m.weight.data.normal_(0, math.sqrt(2. / n))", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "SynchronizedBatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.modeling.aspp.build_aspp": [[119, 121], ["aspp.ASPP"], "function", ["None"], ["", "", "", "", "def", "build_aspp", "(", "backbone", ",", "output_stride", ",", "BatchNorm", ")", ":", "\n", "    ", "return", "ASPP", "(", "backbone", ",", "output_stride", ",", "BatchNorm", ")", "", "", ""]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.modeling.deeplab.DeepLab.__init__": [[10, 27], ["torch.Module.__init__", "modeling.backbone.build_backbone", "modeling.aspp.build_aspp", "modeling.decoder.build_decoder", "deeplab.DeepLab.freeze_bn"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.Distiller.__init__", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.__init__.build_backbone", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.modeling.aspp.build_aspp", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.modeling.decoder.build_decoder", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.modeling.deeplab.DeepLab.freeze_bn"], ["    ", "def", "__init__", "(", "self", ",", "backbone", "=", "'resnet'", ",", "output_stride", "=", "16", ",", "num_classes", "=", "21", ",", "\n", "sync_bn", "=", "True", ",", "freeze_bn", "=", "False", ")", ":", "\n", "        ", "super", "(", "DeepLab", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "backbone", "==", "'drn'", ":", "\n", "            ", "output_stride", "=", "8", "\n", "\n", "", "if", "sync_bn", "==", "True", ":", "\n", "            ", "BatchNorm", "=", "SynchronizedBatchNorm2d", "\n", "", "else", ":", "\n", "            ", "BatchNorm", "=", "nn", ".", "BatchNorm2d", "\n", "\n", "", "self", ".", "backbone", "=", "build_backbone", "(", "backbone", ",", "output_stride", ",", "BatchNorm", ")", "\n", "self", ".", "aspp", "=", "build_aspp", "(", "backbone", ",", "output_stride", ",", "BatchNorm", ")", "\n", "self", ".", "decoder", "=", "build_decoder", "(", "num_classes", ",", "backbone", ",", "BatchNorm", ")", "\n", "\n", "if", "freeze_bn", ":", "\n", "            ", "self", ".", "freeze_bn", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.modeling.deeplab.DeepLab.forward": [[28, 35], ["deeplab.DeepLab.backbone", "deeplab.DeepLab.aspp", "deeplab.DeepLab.decoder", "torch.interpolate", "torch.interpolate", "torch.interpolate", "input.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", ",", "low_level_feat", "=", "self", ".", "backbone", "(", "input", ")", "\n", "x", "=", "self", ".", "aspp", "(", "x", ")", "\n", "x", "=", "self", ".", "decoder", "(", "x", ",", "low_level_feat", ")", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "input", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.modeling.deeplab.DeepLab.freeze_bn": [[36, 42], ["deeplab.DeepLab.modules", "isinstance", "m.eval", "isinstance", "m.eval"], "methods", ["None"], ["", "def", "freeze_bn", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "SynchronizedBatchNorm2d", ")", ":", "\n", "                ", "m", ".", "eval", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.modeling.deeplab.DeepLab.get_1x_lr_params": [[43, 52], ["range", "len", "modules[].named_modules", "isinstance", "isinstance", "isinstance", "m[].parameters"], "methods", ["None"], ["", "", "", "def", "get_1x_lr_params", "(", "self", ")", ":", "\n", "        ", "modules", "=", "[", "self", ".", "backbone", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "modules", ")", ")", ":", "\n", "            ", "for", "m", "in", "modules", "[", "i", "]", ".", "named_modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", "[", "1", "]", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", "[", "1", "]", ",", "SynchronizedBatchNorm2d", ")", "or", "isinstance", "(", "m", "[", "1", "]", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "for", "p", "in", "m", "[", "1", "]", ".", "parameters", "(", ")", ":", "\n", "                        ", "if", "p", ".", "requires_grad", ":", "\n", "                            ", "yield", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.modeling.deeplab.DeepLab.get_10x_lr_params": [[53, 62], ["range", "len", "modules[].named_modules", "isinstance", "isinstance", "isinstance", "m[].parameters"], "methods", ["None"], ["", "", "", "", "", "", "def", "get_10x_lr_params", "(", "self", ")", ":", "\n", "        ", "modules", "=", "[", "self", ".", "aspp", ",", "self", ".", "decoder", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "modules", ")", ")", ":", "\n", "            ", "for", "m", "in", "modules", "[", "i", "]", ".", "named_modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", "[", "1", "]", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", "[", "1", "]", ",", "SynchronizedBatchNorm2d", ")", "or", "isinstance", "(", "m", "[", "1", "]", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "for", "p", "in", "m", "[", "1", "]", ".", "parameters", "(", ")", ":", "\n", "                        ", "if", "p", ".", "requires_grad", ":", "\n", "                            ", "yield", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.modeling.deeplab.DeepLab.get_bn_before_relu": [[63, 69], ["deeplab.DeepLab.backbone.get_bn_before_relu", "deeplab.DeepLab.aspp.get_bn_before_relu", "deeplab.DeepLab.decoder.get_bn_before_relu"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.WideResNet.get_bn_before_relu", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.WideResNet.get_bn_before_relu", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.WideResNet.get_bn_before_relu"], ["", "", "", "", "", "", "def", "get_bn_before_relu", "(", "self", ")", ":", "\n", "        ", "BNs", "=", "self", ".", "backbone", ".", "get_bn_before_relu", "(", ")", "\n", "BNs", "+=", "self", ".", "aspp", ".", "get_bn_before_relu", "(", ")", "\n", "BNs", "+=", "self", ".", "decoder", ".", "get_bn_before_relu", "(", ")", "\n", "\n", "return", "BNs", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.modeling.deeplab.DeepLab.get_channel_num": [[70, 76], ["deeplab.DeepLab.backbone.get_channel_num", "deeplab.DeepLab.aspp.get_channel_num", "deeplab.DeepLab.decoder.get_channel_num"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.WideResNet.get_channel_num", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.WideResNet.get_channel_num", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.WideResNet.get_channel_num"], ["", "def", "get_channel_num", "(", "self", ")", ":", "\n", "        ", "channels", "=", "self", ".", "backbone", ".", "get_channel_num", "(", ")", "\n", "channels", "+=", "self", ".", "aspp", ".", "get_channel_num", "(", ")", "\n", "channels", "+=", "self", ".", "decoder", ".", "get_channel_num", "(", ")", "\n", "\n", "return", "channels", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.modeling.deeplab.DeepLab.extract_feature": [[77, 86], ["deeplab.DeepLab.backbone.extract_feature", "deeplab.DeepLab.aspp.extract_feature", "deeplab.DeepLab.decoder.extract_feature", "torch.interpolate", "torch.interpolate", "torch.interpolate", "input.size"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.WideResNet.extract_feature", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.WideResNet.extract_feature", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.WideResNet.extract_feature"], ["", "def", "extract_feature", "(", "self", ",", "input", ")", ":", "\n", "        ", "feats", ",", "x", ",", "low_level_feat", "=", "self", ".", "backbone", ".", "extract_feature", "(", "input", ")", "\n", "feat", ",", "x", "=", "self", ".", "aspp", ".", "extract_feature", "(", "x", ")", "\n", "feats", "+=", "feat", "\n", "feat", ",", "x", "=", "self", ".", "decoder", ".", "extract_feature", "(", "x", ",", "low_level_feat", ")", "\n", "feats", "+=", "feat", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "input", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "return", "feats", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.modeling.decoder.Decoder.__init__": [[8, 34], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "decoder.Decoder._init_weight", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.Distiller.__init__", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.xception.AlignedXception._init_weight"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "backbone", ",", "BatchNorm", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "backbone", "==", "'resnet101'", "or", "backbone", "==", "'drn'", ":", "\n", "            ", "low_level_inplanes", "=", "256", "\n", "", "elif", "backbone", "==", "'xception'", ":", "\n", "            ", "low_level_inplanes", "=", "128", "\n", "", "elif", "backbone", "==", "'mobilenet'", ":", "\n", "            ", "low_level_inplanes", "=", "24", "\n", "", "elif", "backbone", "==", "'resnet18'", ":", "\n", "            ", "low_level_inplanes", "=", "64", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "low_level_inplanes", ",", "48", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm", "(", "48", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "last_conv", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "304", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.5", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "num_classes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", ")", "\n", "self", ".", "_init_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.modeling.decoder.Decoder.forward": [[36, 46], ["decoder.Decoder.conv1", "decoder.Decoder.bn1", "decoder.Decoder.relu", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "decoder.Decoder.last_conv", "decoder.Decoder.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "low_level_feat", ")", ":", "\n", "        ", "low_level_feat", "=", "self", ".", "conv1", "(", "low_level_feat", ")", "\n", "low_level_feat", "=", "self", ".", "bn1", "(", "low_level_feat", ")", "\n", "low_level_feat", "=", "self", ".", "relu", "(", "low_level_feat", ")", "\n", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "low_level_feat", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "low_level_feat", ")", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "last_conv", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.modeling.decoder.Decoder.get_bn_before_relu": [[47, 49], ["None"], "methods", ["None"], ["", "def", "get_bn_before_relu", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "last_conv", "[", "5", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.modeling.decoder.Decoder.get_channel_num": [[50, 52], ["None"], "methods", ["None"], ["", "def", "get_channel_num", "(", "self", ")", ":", "\n", "        ", "return", "[", "256", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.modeling.decoder.Decoder.extract_feature": [[53, 65], ["decoder.Decoder.conv1", "decoder.Decoder.bn1", "decoder.Decoder.relu", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "decoder.Decoder.size"], "methods", ["None"], ["", "def", "extract_feature", "(", "self", ",", "x", ",", "low_level_feat", ")", ":", "\n", "        ", "low_level_feat", "=", "self", ".", "conv1", "(", "low_level_feat", ")", "\n", "low_level_feat", "=", "self", ".", "bn1", "(", "low_level_feat", ")", "\n", "low_level_feat", "=", "self", ".", "relu", "(", "low_level_feat", ")", "\n", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "low_level_feat", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "low_level_feat", ")", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "last_conv", "[", "0", ":", "6", "]", "(", "x", ")", "\n", "feat1", "=", "x", "\n", "x", "=", "self", ".", "last_conv", "[", "6", ":", "]", "(", "x", ")", "\n", "\n", "return", "[", "feat1", "]", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.modeling.decoder.Decoder._init_weight": [[66, 76], ["decoder.Decoder.modules", "isinstance", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_init_weight", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "SynchronizedBatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.modeling.decoder.build_decoder": [[77, 79], ["decoder.Decoder"], "function", ["None"], ["", "", "", "", "def", "build_decoder", "(", "num_classes", ",", "backbone", ",", "BatchNorm", ")", ":", "\n", "    ", "return", "Decoder", "(", "num_classes", ",", "backbone", ",", "BatchNorm", ")", "", "", ""]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.replicate.DataParallelWithCallback.replicate": [[59, 63], ["super().replicate", "replicate.execute_replication_callbacks"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.replicate.DataParallelWithCallback.replicate", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.replicate.execute_replication_callbacks"], ["def", "replicate", "(", "self", ",", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "super", "(", "DataParallelWithCallback", ",", "self", ")", ".", "replicate", "(", "module", ",", "device_ids", ")", "\n", "execute_replication_callbacks", "(", "modules", ")", "\n", "return", "modules", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.replicate.execute_replication_callbacks": [[27, 45], ["len", "enumerate", "list", "replicate.CallbackContext", "enumerate", "master_copy.modules", "range", "module.modules", "hasattr", "m.__data_parallel_replicate__"], "function", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__data_parallel_replicate__"], ["", "def", "execute_replication_callbacks", "(", "modules", ")", ":", "\n", "    ", "\"\"\"\n    Execute an replication callback `__data_parallel_replicate__` on each module created by original replication.\n    The callback will be invoked with arguments `__data_parallel_replicate__(ctx, copy_id)`\n    Note that, as all modules are isomorphism, we assign each sub-module with a context\n    (shared among multiple copies of this module on different devices).\n    Through this context, different copies can share some information.\n    We guarantee that the callback on the master copy (the first copy) will be called ahead of calling the callback\n    of any slave copies.\n    \"\"\"", "\n", "master_copy", "=", "modules", "[", "0", "]", "\n", "nr_modules", "=", "len", "(", "list", "(", "master_copy", ".", "modules", "(", ")", ")", ")", "\n", "ctxs", "=", "[", "CallbackContext", "(", ")", "for", "_", "in", "range", "(", "nr_modules", ")", "]", "\n", "\n", "for", "i", ",", "module", "in", "enumerate", "(", "modules", ")", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "module", ".", "modules", "(", ")", ")", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'__data_parallel_replicate__'", ")", ":", "\n", "                ", "m", ".", "__data_parallel_replicate__", "(", "ctxs", "[", "j", "]", ",", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.replicate.patch_replication_callback": [[65, 89], ["isinstance", "functools.wraps", "old_replicate", "replicate.execute_replication_callbacks"], "function", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.replicate.execute_replication_callbacks"], ["", "", "def", "patch_replication_callback", "(", "data_parallel", ")", ":", "\n", "    ", "\"\"\"\n    Monkey-patch an existing `DataParallel` object. Add the replication callback.\n    Useful when you have customized `DataParallel` implementation.\n    Examples:\n        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)\n        > sync_bn = DataParallel(sync_bn, device_ids=[0, 1])\n        > patch_replication_callback(sync_bn)\n        # this is equivalent to\n        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)\n        > sync_bn = DataParallelWithCallback(sync_bn, device_ids=[0, 1])\n    \"\"\"", "\n", "\n", "assert", "isinstance", "(", "data_parallel", ",", "DataParallel", ")", "\n", "\n", "old_replicate", "=", "data_parallel", ".", "replicate", "\n", "\n", "@", "functools", ".", "wraps", "(", "old_replicate", ")", "\n", "def", "new_replicate", "(", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "old_replicate", "(", "module", ",", "device_ids", ")", "\n", "execute_replication_callbacks", "(", "modules", ")", "\n", "return", "modules", "\n", "\n", "", "data_parallel", ".", "replicate", "=", "new_replicate", "", "", ""]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.comm.FutureResult.__init__": [[21, 25], ["threading.Lock", "threading.Condition"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_result", "=", "None", "\n", "self", ".", "_lock", "=", "threading", ".", "Lock", "(", ")", "\n", "self", ".", "_cond", "=", "threading", ".", "Condition", "(", "self", ".", "_lock", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.comm.FutureResult.put": [[26, 31], ["comm.FutureResult._cond.notify"], "methods", ["None"], ["", "def", "put", "(", "self", ",", "result", ")", ":", "\n", "        ", "with", "self", ".", "_lock", ":", "\n", "            ", "assert", "self", ".", "_result", "is", "None", ",", "'Previous result has\\'t been fetched.'", "\n", "self", ".", "_result", "=", "result", "\n", "self", ".", "_cond", ".", "notify", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.comm.FutureResult.get": [[32, 40], ["comm.FutureResult._cond.wait"], "methods", ["None"], ["", "", "def", "get", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "_lock", ":", "\n", "            ", "if", "self", ".", "_result", "is", "None", ":", "\n", "                ", "self", ".", "_cond", ".", "wait", "(", ")", "\n", "\n", "", "res", "=", "self", ".", "_result", "\n", "self", ".", "_result", "=", "None", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.comm.SlavePipe.run_slave": [[49, 54], ["comm.SlavePipe.queue.put", "comm.SlavePipe.result.get", "comm.SlavePipe.queue.put"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.comm.FutureResult.put", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.comm.FutureResult.put"], ["def", "run_slave", "(", "self", ",", "msg", ")", ":", "\n", "        ", "self", ".", "queue", ".", "put", "(", "(", "self", ".", "identifier", ",", "msg", ")", ")", "\n", "ret", "=", "self", ".", "result", ".", "get", "(", ")", "\n", "self", ".", "queue", ".", "put", "(", "True", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.comm.SyncMaster.__init__": [[66, 75], ["queue.Queue", "collections.OrderedDict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "master_callback", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            master_callback: a callback to be invoked after having collected messages from slave devices.\n        \"\"\"", "\n", "self", ".", "_master_callback", "=", "master_callback", "\n", "self", ".", "_queue", "=", "queue", ".", "Queue", "(", ")", "\n", "self", ".", "_registry", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "self", ".", "_activated", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.comm.SyncMaster.__getstate__": [[76, 78], ["None"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "return", "{", "'master_callback'", ":", "self", ".", "_master_callback", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.comm.SyncMaster.__setstate__": [[79, 81], ["comm.SyncMaster.__init__"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.Distiller.__init__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "__init__", "(", "state", "[", "'master_callback'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.comm.SyncMaster.register_slave": [[82, 96], ["comm.FutureResult", "_MasterRegistry", "comm.SlavePipe", "comm.SyncMaster._queue.empty", "comm.SyncMaster._registry.clear"], "methods", ["None"], ["", "def", "register_slave", "(", "self", ",", "identifier", ")", ":", "\n", "        ", "\"\"\"\n        Register an slave device.\n        Args:\n            identifier: an identifier, usually is the device id.\n        Returns: a `SlavePipe` object which can be used to communicate with the master device.\n        \"\"\"", "\n", "if", "self", ".", "_activated", ":", "\n", "            ", "assert", "self", ".", "_queue", ".", "empty", "(", ")", ",", "'Queue is not clean before next initialization.'", "\n", "self", ".", "_activated", "=", "False", "\n", "self", ".", "_registry", ".", "clear", "(", ")", "\n", "", "future", "=", "FutureResult", "(", ")", "\n", "self", ".", "_registry", "[", "identifier", "]", "=", "_MasterRegistry", "(", "future", ")", "\n", "return", "SlavePipe", "(", "identifier", ",", "self", ".", "_queue", ",", "future", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.comm.SyncMaster.run_master": [[97, 126], ["range", "comm.SyncMaster._master_callback", "range", "intermediates.append", "comm.SyncMaster._registry[].result.put", "comm.SyncMaster._queue.get", "comm.SyncMaster._queue.get"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.comm.FutureResult.put", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.comm.FutureResult.get"], ["", "def", "run_master", "(", "self", ",", "master_msg", ")", ":", "\n", "        ", "\"\"\"\n        Main entry for the master device in each forward pass.\n        The messages were first collected from each devices (including the master device), and then\n        an callback will be invoked to compute the message to be sent back to each devices\n        (including the master device).\n        Args:\n            master_msg: the message that the master want to send to itself. This will be placed as the first\n            message when calling `master_callback`. For detailed usage, see `_SynchronizedBatchNorm` for an example.\n        Returns: the message to be sent back to the master device.\n        \"\"\"", "\n", "self", ".", "_activated", "=", "True", "\n", "\n", "intermediates", "=", "[", "(", "0", ",", "master_msg", ")", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "nr_slaves", ")", ":", "\n", "            ", "intermediates", ".", "append", "(", "self", ".", "_queue", ".", "get", "(", ")", ")", "\n", "\n", "", "results", "=", "self", ".", "_master_callback", "(", "intermediates", ")", "\n", "assert", "results", "[", "0", "]", "[", "0", "]", "==", "0", ",", "'The first result should belongs to the master.'", "\n", "\n", "for", "i", ",", "res", "in", "results", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "continue", "\n", "", "self", ".", "_registry", "[", "i", "]", ".", "result", ".", "put", "(", "res", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "nr_slaves", ")", ":", "\n", "            ", "assert", "self", ".", "_queue", ".", "get", "(", ")", "is", "True", "\n", "\n", "", "return", "results", "[", "0", "]", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.comm.SyncMaster.nr_slaves": [[127, 130], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "nr_slaves", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_registry", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.unittest.TorchTestCase.assertTensorClose": [[24, 29], ["unittest.TorchTestCase.assertTrue", "unittest.as_numpy", "unittest.as_numpy", "numpy.allclose", "numpy.abs().max", "numpy.abs().max", "numpy.abs", "numpy.abs", "numpy.fmax"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.unittest.as_numpy", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.unittest.as_numpy"], ["    ", "def", "assertTensorClose", "(", "self", ",", "a", ",", "b", ",", "atol", "=", "1e-3", ",", "rtol", "=", "1e-3", ")", ":", "\n", "        ", "npa", ",", "npb", "=", "as_numpy", "(", "a", ")", ",", "as_numpy", "(", "b", ")", "\n", "self", ".", "assertTrue", "(", "\n", "np", ".", "allclose", "(", "npa", ",", "npb", ",", "atol", "=", "atol", ")", ",", "\n", "'Tensor close check failed\\n{}\\n{}\\nadiff={}, rdiff={}'", ".", "format", "(", "a", ",", "b", ",", "np", ".", "abs", "(", "npa", "-", "npb", ")", ".", "max", "(", ")", ",", "np", ".", "abs", "(", "(", "npa", "-", "npb", ")", "/", "np", ".", "fmax", "(", "npa", ",", "1e-5", ")", ")", ".", "max", "(", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.unittest.as_numpy": [[17, 21], ["isinstance", "v.cpu().numpy", "v.cpu"], "function", ["None"], ["def", "as_numpy", "(", "v", ")", ":", "\n", "    ", "if", "isinstance", "(", "v", ",", "Variable", ")", ":", "\n", "        ", "v", "=", "v", ".", "data", "\n", "", "return", "v", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__init__": [[39, 47], ["torch.nn.modules.batchnorm._BatchNorm.__init__", "comm.SyncMaster"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.Distiller.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "_SynchronizedBatchNorm", ",", "self", ")", ".", "__init__", "(", "num_features", ",", "eps", "=", "eps", ",", "momentum", "=", "momentum", ",", "affine", "=", "affine", ")", "\n", "\n", "self", ".", "_sync_master", "=", "SyncMaster", "(", "self", ".", "_data_parallel_master", ")", "\n", "\n", "self", ".", "_is_parallel", "=", "False", "\n", "self", ".", "_parallel_id", "=", "None", "\n", "self", ".", "_slave_pipe", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.batchnorm._SynchronizedBatchNorm.forward": [[48, 79], ["input.view.view.size", "input.view.view.view", "batchnorm._sum_ft", "batchnorm._sum_ft", "output.view", "torch.batch_norm", "torch.batch_norm", "input.view.view.size", "input.view.view.size", "input.view.view.size", "batchnorm._SynchronizedBatchNorm._sync_master.run_master", "batchnorm._SynchronizedBatchNorm._slave_pipe.run_slave", "_ChildMessage", "_ChildMessage", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.batchnorm._sum_ft", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.batchnorm._sum_ft", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.comm.SyncMaster.run_master", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.comm.SlavePipe.run_slave", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.batchnorm._unsqueeze_ft"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# If it is not parallel computation or is in evaluation mode, use PyTorch's implementation.", "\n", "        ", "if", "not", "(", "self", ".", "_is_parallel", "and", "self", ".", "training", ")", ":", "\n", "            ", "return", "F", ".", "batch_norm", "(", "\n", "input", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "self", ".", "training", ",", "self", ".", "momentum", ",", "self", ".", "eps", ")", "\n", "\n", "# Resize the input to (B, C, -1).", "\n", "", "input_shape", "=", "input", ".", "size", "(", ")", "\n", "input", "=", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "self", ".", "num_features", ",", "-", "1", ")", "\n", "\n", "# Compute the sum and square-sum.", "\n", "sum_size", "=", "input", ".", "size", "(", "0", ")", "*", "input", ".", "size", "(", "2", ")", "\n", "input_sum", "=", "_sum_ft", "(", "input", ")", "\n", "input_ssum", "=", "_sum_ft", "(", "input", "**", "2", ")", "\n", "\n", "# Reduce-and-broadcast the statistics.", "\n", "if", "self", ".", "_parallel_id", "==", "0", ":", "\n", "            ", "mean", ",", "inv_std", "=", "self", ".", "_sync_master", ".", "run_master", "(", "_ChildMessage", "(", "input_sum", ",", "input_ssum", ",", "sum_size", ")", ")", "\n", "", "else", ":", "\n", "            ", "mean", ",", "inv_std", "=", "self", ".", "_slave_pipe", ".", "run_slave", "(", "_ChildMessage", "(", "input_sum", ",", "input_ssum", ",", "sum_size", ")", ")", "\n", "\n", "# Compute the output.", "\n", "", "if", "self", ".", "affine", ":", "\n", "# MJY:: Fuse the multiplication for speed.", "\n", "            ", "output", "=", "(", "input", "-", "_unsqueeze_ft", "(", "mean", ")", ")", "*", "_unsqueeze_ft", "(", "inv_std", "*", "self", ".", "weight", ")", "+", "_unsqueeze_ft", "(", "self", ".", "bias", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "(", "input", "-", "_unsqueeze_ft", "(", "mean", ")", ")", "*", "_unsqueeze_ft", "(", "inv_std", ")", "\n", "\n", "# Reshape it.", "\n", "", "return", "output", ".", "view", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__data_parallel_replicate__": [[80, 89], ["ctx.sync_master.register_slave"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.comm.SyncMaster.register_slave"], ["", "def", "__data_parallel_replicate__", "(", "self", ",", "ctx", ",", "copy_id", ")", ":", "\n", "        ", "self", ".", "_is_parallel", "=", "True", "\n", "self", ".", "_parallel_id", "=", "copy_id", "\n", "\n", "# parallel_id == 0 means master device.", "\n", "if", "self", ".", "_parallel_id", "==", "0", ":", "\n", "            ", "ctx", ".", "sync_master", "=", "self", ".", "_sync_master", "\n", "", "else", ":", "\n", "            ", "self", ".", "_slave_pipe", "=", "ctx", ".", "sync_master", ".", "register_slave", "(", "copy_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.batchnorm._SynchronizedBatchNorm._data_parallel_master": [[90, 112], ["sorted", "sum", "torch.nn.parallel._functions.ReduceAddCoalesced.apply", "torch.nn.parallel._functions.ReduceAddCoalesced.apply", "batchnorm._SynchronizedBatchNorm._compute_mean_std", "torch.nn.parallel._functions.Broadcast.apply", "torch.nn.parallel._functions.Broadcast.apply", "enumerate", "i[].sum.get_device", "outputs.append", "i[].sum.get_device", "_MasterMessage"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.batchnorm._SynchronizedBatchNorm._compute_mean_std"], ["", "", "def", "_data_parallel_master", "(", "self", ",", "intermediates", ")", ":", "\n", "        ", "\"\"\"Reduce the sum and square-sum, compute the statistics, and broadcast it.\"\"\"", "\n", "\n", "# Always using same \"device order\" makes the ReduceAdd operation faster.", "\n", "# Thanks to:: Tete Xiao (http://tetexiao.com/)", "\n", "intermediates", "=", "sorted", "(", "intermediates", ",", "key", "=", "lambda", "i", ":", "i", "[", "1", "]", ".", "sum", ".", "get_device", "(", ")", ")", "\n", "\n", "to_reduce", "=", "[", "i", "[", "1", "]", "[", ":", "2", "]", "for", "i", "in", "intermediates", "]", "\n", "to_reduce", "=", "[", "j", "for", "i", "in", "to_reduce", "for", "j", "in", "i", "]", "# flatten", "\n", "target_gpus", "=", "[", "i", "[", "1", "]", ".", "sum", ".", "get_device", "(", ")", "for", "i", "in", "intermediates", "]", "\n", "\n", "sum_size", "=", "sum", "(", "[", "i", "[", "1", "]", ".", "sum_size", "for", "i", "in", "intermediates", "]", ")", "\n", "sum_", ",", "ssum", "=", "ReduceAddCoalesced", ".", "apply", "(", "target_gpus", "[", "0", "]", ",", "2", ",", "*", "to_reduce", ")", "\n", "mean", ",", "inv_std", "=", "self", ".", "_compute_mean_std", "(", "sum_", ",", "ssum", ",", "sum_size", ")", "\n", "\n", "broadcasted", "=", "Broadcast", ".", "apply", "(", "target_gpus", ",", "mean", ",", "inv_std", ")", "\n", "\n", "outputs", "=", "[", "]", "\n", "for", "i", ",", "rec", "in", "enumerate", "(", "intermediates", ")", ":", "\n", "            ", "outputs", ".", "append", "(", "(", "rec", "[", "0", "]", ",", "_MasterMessage", "(", "*", "broadcasted", "[", "i", "*", "2", ":", "i", "*", "2", "+", "2", "]", ")", ")", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.batchnorm._SynchronizedBatchNorm._compute_mean_std": [[113, 126], ["bias_var.clamp"], "methods", ["None"], ["", "def", "_compute_mean_std", "(", "self", ",", "sum_", ",", "ssum", ",", "size", ")", ":", "\n", "        ", "\"\"\"Compute the mean and standard-deviation with sum and square-sum. This method\n        also maintains the moving average on the master device.\"\"\"", "\n", "assert", "size", ">", "1", ",", "'BatchNorm computes unbiased standard-deviation, which requires size > 1.'", "\n", "mean", "=", "sum_", "/", "size", "\n", "sumvar", "=", "ssum", "-", "sum_", "*", "mean", "\n", "unbias_var", "=", "sumvar", "/", "(", "size", "-", "1", ")", "\n", "bias_var", "=", "sumvar", "/", "size", "\n", "\n", "self", ".", "running_mean", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_mean", "+", "self", ".", "momentum", "*", "mean", ".", "data", "\n", "self", ".", "running_var", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_var", "+", "self", ".", "momentum", "*", "unbias_var", ".", "data", "\n", "\n", "return", "mean", ",", "bias_var", ".", "clamp", "(", "self", ".", "eps", ")", "**", "-", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.batchnorm.SynchronizedBatchNorm1d._check_input_dim": [[173, 178], ["super()._check_input_dim", "ValueError", "input.dim", "input.dim", "input.dim"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "2", "and", "input", ".", "dim", "(", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 2D or 3D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "", "super", "(", "SynchronizedBatchNorm1d", ",", "self", ")", ".", "_check_input_dim", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.batchnorm.SynchronizedBatchNorm2d._check_input_dim": [[225, 230], ["super()._check_input_dim", "input.dim", "ValueError", "input.dim"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 4D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "", "super", "(", "SynchronizedBatchNorm2d", ",", "self", ")", ".", "_check_input_dim", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim": [[278, 283], ["super()._check_input_dim", "input.dim", "ValueError", "input.dim"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "5", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 5D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "", "super", "(", "SynchronizedBatchNorm3d", ",", "self", ")", ".", "_check_input_dim", "(", "input", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.batchnorm._sum_ft": [[24, 27], ["tensor.sum().sum", "tensor.sum"], "function", ["None"], ["def", "_sum_ft", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"sum over the first and last dimention\"\"\"", "\n", "return", "tensor", ".", "sum", "(", "dim", "=", "0", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.sync_batchnorm.batchnorm._unsqueeze_ft": [[29, 32], ["tensor.unsqueeze().unsqueeze", "tensor.unsqueeze"], "function", ["None"], ["", "def", "_unsqueeze_ft", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"add new dementions at the front and the tail\"\"\"", "\n", "return", "tensor", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.mobilenet.InvertedResidual.__init__": [[26, 59], ["torch.Module.__init__", "round", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU6", "torch.ReLU6", "torch.ReLU6", "torch.ReLU6", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU6", "torch.ReLU6", "torch.ReLU6", "torch.ReLU6", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU6", "torch.ReLU6", "torch.ReLU6", "torch.ReLU6", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.Distiller.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inp", ",", "oup", ",", "stride", ",", "dilation", ",", "expand_ratio", ",", "BatchNorm", ")", ":", "\n", "        ", "super", "(", "InvertedResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "\n", "hidden_dim", "=", "round", "(", "inp", "*", "expand_ratio", ")", "\n", "self", ".", "use_res_connect", "=", "self", ".", "stride", "==", "1", "and", "inp", "==", "oup", "\n", "self", ".", "kernel_size", "=", "3", "\n", "self", ".", "dilation", "=", "dilation", "\n", "\n", "if", "expand_ratio", "==", "1", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "# dw", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "hidden_dim", ",", "3", ",", "stride", ",", "0", ",", "dilation", ",", "groups", "=", "hidden_dim", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "False", ")", ",", "\n", "# pw-linear", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "oup", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "# pw", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "hidden_dim", ",", "1", ",", "1", ",", "0", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "False", ")", ",", "\n", "# dw", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "hidden_dim", ",", "3", ",", "stride", ",", "0", ",", "dilation", ",", "groups", "=", "hidden_dim", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "False", ")", ",", "\n", "# pw-linear", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "oup", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.mobilenet.InvertedResidual.forward": [[61, 68], ["mobilenet.fixed_padding", "mobilenet.InvertedResidual.conv", "mobilenet.InvertedResidual.conv"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.xception.fixed_padding"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_pad", "=", "fixed_padding", "(", "x", ",", "self", ".", "kernel_size", ",", "dilation", "=", "self", ".", "dilation", ")", "\n", "if", "self", ".", "use_res_connect", ":", "\n", "            ", "x", "=", "x", "+", "self", ".", "conv", "(", "x_pad", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "conv", "(", "x_pad", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.mobilenet.MobileNetV2.__init__": [[71, 117], ["torch.Module.__init__", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "mobilenet.MobileNetV2._initialize_weights", "mobilenet.conv_bn", "int", "range", "mobilenet.MobileNetV2._load_pretrained_model", "mobilenet.MobileNetV2.features.append", "mobilenet.MobileNetV2.features.append", "block", "block"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.Distiller.__init__", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.mobilenet.MobileNetV2._initialize_weights", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.mobilenet.conv_bn", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.xception.AlignedXception._load_pretrained_model"], ["    ", "def", "__init__", "(", "self", ",", "output_stride", "=", "8", ",", "BatchNorm", "=", "None", ",", "width_mult", "=", "1.", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "MobileNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "block", "=", "InvertedResidual", "\n", "input_channel", "=", "32", "\n", "current_stride", "=", "1", "\n", "rate", "=", "1", "\n", "interverted_residual_setting", "=", "[", "\n", "# t, c, n, s", "\n", "[", "1", ",", "16", ",", "1", ",", "1", "]", ",", "\n", "[", "6", ",", "24", ",", "2", ",", "2", "]", ",", "\n", "[", "6", ",", "32", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "64", ",", "4", ",", "2", "]", ",", "\n", "[", "6", ",", "96", ",", "3", ",", "1", "]", ",", "\n", "[", "6", ",", "160", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "320", ",", "1", ",", "1", "]", ",", "\n", "]", "\n", "\n", "# building first layer", "\n", "input_channel", "=", "int", "(", "input_channel", "*", "width_mult", ")", "\n", "self", ".", "features", "=", "[", "conv_bn", "(", "3", ",", "input_channel", ",", "2", ",", "BatchNorm", ")", "]", "\n", "current_stride", "*=", "2", "\n", "# building inverted residual blocks", "\n", "for", "t", ",", "c", ",", "n", ",", "s", "in", "interverted_residual_setting", ":", "\n", "            ", "if", "current_stride", "==", "output_stride", ":", "\n", "                ", "stride", "=", "1", "\n", "dilation", "=", "rate", "\n", "rate", "*=", "s", "\n", "", "else", ":", "\n", "                ", "stride", "=", "s", "\n", "dilation", "=", "1", "\n", "current_stride", "*=", "s", "\n", "", "output_channel", "=", "int", "(", "c", "*", "width_mult", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "self", ".", "features", ".", "append", "(", "block", "(", "input_channel", ",", "output_channel", ",", "stride", ",", "dilation", ",", "t", ",", "BatchNorm", ")", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "features", ".", "append", "(", "block", "(", "input_channel", ",", "output_channel", ",", "1", ",", "dilation", ",", "t", ",", "BatchNorm", ")", ")", "\n", "", "input_channel", "=", "output_channel", "\n", "", "", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "features", ")", "\n", "self", ".", "_initialize_weights", "(", ")", "\n", "\n", "if", "pretrained", ":", "\n", "            ", "self", ".", "_load_pretrained_model", "(", ")", "\n", "\n", "", "self", ".", "low_level_features", "=", "self", ".", "features", "[", "0", ":", "4", "]", "\n", "self", ".", "high_level_features", "=", "self", ".", "features", "[", "4", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.mobilenet.MobileNetV2.forward": [[118, 122], ["mobilenet.MobileNetV2.low_level_features", "mobilenet.MobileNetV2.high_level_features"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "low_level_feat", "=", "self", ".", "low_level_features", "(", "x", ")", "\n", "x", "=", "self", ".", "high_level_features", "(", "low_level_feat", ")", "\n", "return", "x", ",", "low_level_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.mobilenet.MobileNetV2.get_bn_before_relu": [[123, 130], ["None"], "methods", ["None"], ["", "def", "get_bn_before_relu", "(", "self", ")", ":", "\n", "        ", "bn1", "=", "self", ".", "features", "[", "4", "]", ".", "conv", "[", "1", "]", "\n", "bn2", "=", "self", ".", "features", "[", "7", "]", ".", "conv", "[", "1", "]", "\n", "bn3", "=", "self", ".", "features", "[", "14", "]", ".", "conv", "[", "1", "]", "\n", "bn4", "=", "self", ".", "features", "[", "-", "1", "]", ".", "conv", "[", "-", "1", "]", "\n", "\n", "return", "[", "bn1", ",", "bn2", ",", "bn3", ",", "bn4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.mobilenet.MobileNetV2.get_channel_num": [[131, 133], ["None"], "methods", ["None"], ["", "def", "get_channel_num", "(", "self", ")", ":", "\n", "        ", "return", "[", "144", ",", "192", ",", "576", ",", "320", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.mobilenet.MobileNetV2.extract_feature": [[135, 150], ["None"], "methods", ["None"], ["", "def", "extract_feature", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "feat1", "=", "self", ".", "features", "[", "0", ":", "4", "]", "(", "x", ")", "\n", "low_level_feat", "=", "feat1", "\n", "feat2", "=", "self", ".", "features", "[", "4", ":", "7", "]", "(", "feat1", ")", "\n", "feat3", "=", "self", ".", "features", "[", "7", ":", "14", "]", "(", "feat2", ")", "\n", "feat4", "=", "self", ".", "features", "[", "14", ":", "]", "(", "feat3", ")", "\n", "out", "=", "feat4", "\n", "\n", "# preReLU", "\n", "feat1", "=", "self", ".", "features", "[", "4", "]", ".", "conv", "[", "0", ":", "2", "]", "(", "feat1", ")", "\n", "feat2", "=", "self", ".", "features", "[", "7", "]", ".", "conv", "[", "0", ":", "2", "]", "(", "feat2", ")", "\n", "feat3", "=", "self", ".", "features", "[", "14", "]", ".", "conv", "[", "0", ":", "2", "]", "(", "feat3", ")", "\n", "\n", "return", "[", "feat1", ",", "feat2", ",", "feat3", ",", "feat4", "]", ",", "out", ",", "low_level_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.mobilenet.MobileNetV2._load_pretrained_model": [[151, 160], ["torch.load_url", "torch.load_url", "torch.load_url", "torch.load_url", "mobilenet.MobileNetV2.state_dict", "torch.load_url.items", "mobilenet.MobileNetV2.update", "mobilenet.MobileNetV2.load_state_dict"], "methods", ["None"], ["", "def", "_load_pretrained_model", "(", "self", ")", ":", "\n", "        ", "pretrain_dict", "=", "model_zoo", ".", "load_url", "(", "'http://jeff95.me/models/mobilenet_v2-6a65762b.pth'", ")", "\n", "model_dict", "=", "{", "}", "\n", "state_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "for", "k", ",", "v", "in", "pretrain_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "in", "state_dict", ":", "\n", "                ", "model_dict", "[", "k", "]", "=", "v", "\n", "", "", "state_dict", ".", "update", "(", "model_dict", ")", "\n", "self", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.mobilenet.MobileNetV2._initialize_weights": [[161, 173], ["mobilenet.MobileNetV2.modules", "isinstance", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "# n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels", "\n", "# m.weight.data.normal_(0, math.sqrt(2. / n))", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "SynchronizedBatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.mobilenet.conv_bn": [[8, 13], ["torch.Sequential", "torch.Conv2d", "BatchNorm", "torch.ReLU6"], "function", ["None"], ["def", "conv_bn", "(", "inp", ",", "oup", ",", "stride", ",", "BatchNorm", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "oup", ",", "3", ",", "stride", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.mobilenet.fixed_padding": [[16, 23], ["torch.pad"], "function", ["None"], ["", "def", "fixed_padding", "(", "inputs", ",", "kernel_size", ",", "dilation", ")", ":", "\n", "    ", "kernel_size_effective", "=", "kernel_size", "+", "(", "kernel_size", "-", "1", ")", "*", "(", "dilation", "-", "1", ")", "\n", "pad_total", "=", "kernel_size_effective", "-", "1", "\n", "pad_beg", "=", "pad_total", "//", "2", "\n", "pad_end", "=", "pad_total", "-", "pad_beg", "\n", "padded_inputs", "=", "F", ".", "pad", "(", "inputs", ",", "(", "pad_beg", ",", "pad_end", ",", "pad_beg", ",", "pad_end", ")", ")", "\n", "return", "padded_inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.resnet.BasicBlock.__init__": [[10, 20], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.Distiller.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "downsample", "=", "None", ",", "BatchNorm", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "dilation", "=", "dilation", ",", "padding", "=", "dilation", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "dilation", ",", "padding", "=", "dilation", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BatchNorm", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.resnet.BasicBlock.forward": [[21, 39], ["torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "# out = self.relu(out)", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.resnet.Bottleneck.__init__": [[43, 56], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.Distiller.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "downsample", "=", "None", ",", "BatchNorm", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "padding", "=", "dilation", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BatchNorm", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "BatchNorm", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "dilation", "=", "dilation", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.resnet.Bottleneck.forward": [[57, 79], ["torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "# out = self.relu(out)", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.resnet.ResNet.__init__": [[82, 114], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "isinstance", "resnet.ResNet._init_weight", "resnet.ResNet._make_layer", "resnet.ResNet._make_MG_unit", "resnet.ResNet._load_pretrained_model"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.Distiller.__init__", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.xception.AlignedXception._init_weight", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.resnet.ResNet._make_MG_unit", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.xception.AlignedXception._load_pretrained_model"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "output_stride", ",", "BatchNorm", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "blocks", "=", "[", "1", ",", "2", ",", "4", "]", "\n", "if", "output_stride", "==", "16", ":", "\n", "            ", "strides", "=", "[", "1", ",", "2", ",", "2", ",", "1", "]", "\n", "dilations", "=", "[", "1", ",", "1", ",", "1", ",", "2", "]", "\n", "", "elif", "output_stride", "==", "8", ":", "\n", "            ", "strides", "=", "[", "1", ",", "2", ",", "1", ",", "1", "]", "\n", "dilations", "=", "[", "1", ",", "1", ",", "2", ",", "4", "]", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "# Modules", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "stride", "=", "strides", "[", "0", "]", ",", "dilation", "=", "dilations", "[", "0", "]", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "strides", "[", "1", "]", ",", "dilation", "=", "dilations", "[", "1", "]", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "strides", "[", "2", "]", ",", "dilation", "=", "dilations", "[", "2", "]", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "if", "isinstance", "(", "self", ".", "layer1", "[", "0", "]", ",", "BasicBlock", ")", ":", "\n", "            ", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "strides", "[", "3", "]", ",", "dilation", "=", "dilations", "[", "3", "]", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "layer4", "=", "self", ".", "_make_MG_unit", "(", "block", ",", "512", ",", "blocks", "=", "blocks", ",", "stride", "=", "strides", "[", "3", "]", ",", "dilation", "=", "dilations", "[", "3", "]", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "# self.layer4 = self._make_layer(block, 512, layers[3], stride=strides[3], dilation=dilations[3], BatchNorm=BatchNorm)", "\n", "", "self", ".", "_init_weight", "(", ")", "\n", "\n", "if", "pretrained", ":", "\n", "            ", "self", ".", "_load_pretrained_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.resnet.ResNet._make_layer": [[115, 131], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "block"], "methods", ["None"], ["", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "BatchNorm", "=", "None", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", ",", "downsample", ",", "BatchNorm", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ",", "BatchNorm", "=", "BatchNorm", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.resnet.ResNet._make_MG_unit": [[132, 150], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "len", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "block"], "methods", ["None"], ["", "def", "_make_MG_unit", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "BatchNorm", "=", "None", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "blocks", "[", "0", "]", "*", "dilation", ",", "\n", "downsample", "=", "downsample", ",", "BatchNorm", "=", "BatchNorm", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "blocks", ")", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "\n", "dilation", "=", "blocks", "[", "i", "]", "*", "dilation", ",", "BatchNorm", "=", "BatchNorm", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.resnet.ResNet.forward": [[151, 164], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "torch.relu", "torch.relu", "torch.relu", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "input", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "low_level_feat", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "return", "x", ",", "low_level_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.resnet.ResNet.get_bn_before_relu": [[165, 180], ["isinstance", "isinstance", "print"], "methods", ["None"], ["", "def", "get_bn_before_relu", "(", "self", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "layer1", "[", "0", "]", ",", "Bottleneck", ")", ":", "\n", "            ", "bn1", "=", "self", ".", "layer1", "[", "-", "1", "]", ".", "bn3", "\n", "bn2", "=", "self", ".", "layer2", "[", "-", "1", "]", ".", "bn3", "\n", "bn3", "=", "self", ".", "layer3", "[", "-", "1", "]", ".", "bn3", "\n", "bn4", "=", "self", ".", "layer4", "[", "-", "1", "]", ".", "bn3", "\n", "", "elif", "isinstance", "(", "self", ".", "layer1", "[", "0", "]", ",", "BasicBlock", ")", ":", "\n", "            ", "bn1", "=", "self", ".", "layer1", "[", "-", "1", "]", ".", "bn2", "\n", "bn2", "=", "self", ".", "layer2", "[", "-", "1", "]", ".", "bn2", "\n", "bn3", "=", "self", ".", "layer3", "[", "-", "1", "]", ".", "bn2", "\n", "bn4", "=", "self", ".", "layer4", "[", "-", "1", "]", ".", "bn2", "\n", "", "else", ":", "\n", "            ", "print", "(", "'ResNet unknown block error !!!'", ")", "\n", "\n", "", "return", "[", "bn1", ",", "bn2", ",", "bn3", ",", "bn4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.resnet.ResNet.get_channel_num": [[181, 186], ["isinstance", "isinstance"], "methods", ["None"], ["", "def", "get_channel_num", "(", "self", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "layer1", "[", "0", "]", ",", "Bottleneck", ")", ":", "\n", "            ", "return", "[", "256", ",", "512", ",", "1024", ",", "2048", "]", "\n", "", "elif", "isinstance", "(", "self", ".", "layer1", "[", "0", "]", ",", "BasicBlock", ")", ":", "\n", "            ", "return", "[", "64", ",", "128", ",", "256", ",", "512", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.resnet.ResNet.extract_feature": [[188, 203], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "torch.relu", "torch.relu", "torch.relu", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "", "def", "extract_feature", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "feat1", "=", "self", ".", "layer1", "(", "x", ")", "\n", "low_level_feat", "=", "F", ".", "relu", "(", "feat1", ")", "\n", "feat2", "=", "self", ".", "layer2", "(", "feat1", ")", "\n", "feat3", "=", "self", ".", "layer3", "(", "feat2", ")", "\n", "feat4", "=", "self", ".", "layer4", "(", "feat3", ")", "\n", "out", "=", "F", ".", "relu", "(", "feat4", ")", "\n", "\n", "return", "[", "feat1", ",", "feat2", ",", "feat3", ",", "feat4", "]", ",", "out", ",", "low_level_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.resnet.ResNet._init_weight": [[204, 215], ["resnet.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_init_weight", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "SynchronizedBatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.resnet.ResNet._load_pretrained_model": [[216, 228], ["isinstance", "resnet.ResNet.state_dict", "torch.load_url.items", "resnet.ResNet.update", "resnet.ResNet.load_state_dict", "torch.load_url", "torch.load_url", "torch.load_url", "torch.load_url", "torch.load_url", "torch.load_url"], "methods", ["None"], ["", "", "", "def", "_load_pretrained_model", "(", "self", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "layer1", "[", "0", "]", ",", "BasicBlock", ")", ":", "\n", "            ", "pretrain_dict", "=", "model_zoo", ".", "load_url", "(", "'https://download.pytorch.org/models/resnet18-5c106cde.pth'", ")", "\n", "", "else", ":", "\n", "            ", "pretrain_dict", "=", "model_zoo", ".", "load_url", "(", "'https://download.pytorch.org/models/resnet101-5d3b4d8f.pth'", ")", "\n", "", "model_dict", "=", "{", "}", "\n", "state_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "for", "k", ",", "v", "in", "pretrain_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "in", "state_dict", ":", "\n", "                ", "model_dict", "[", "k", "]", "=", "v", "\n", "", "", "state_dict", ".", "update", "(", "model_dict", ")", "\n", "self", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.resnet.ResNet101": [[229, 236], ["resnet.ResNet"], "function", ["None"], ["", "", "def", "ResNet101", "(", "output_stride", ",", "BatchNorm", ",", "pretrained", "=", "True", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "output_stride", ",", "BatchNorm", ",", "pretrained", "=", "pretrained", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.resnet.ResNet18": [[238, 245], ["resnet.ResNet"], "function", ["None"], ["def", "ResNet18", "(", "output_stride", ",", "BatchNorm", ",", "pretrained", "=", "True", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "output_stride", ",", "BatchNorm", ",", "pretrained", "=", "pretrained", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.drn.BasicBlock.__init__": [[28, 41], ["torch.Module.__init__", "drn.conv3x3", "BatchNorm", "torch.ReLU", "torch.ReLU", "drn.conv3x3", "BatchNorm"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.Distiller.__init__", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.PyramidNet.conv3x3", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.PyramidNet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "\n", "dilation", "=", "(", "1", ",", "1", ")", ",", "residual", "=", "True", ",", "BatchNorm", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ",", "\n", "padding", "=", "dilation", "[", "0", "]", ",", "dilation", "=", "dilation", "[", "0", "]", ")", "\n", "self", ".", "bn1", "=", "BatchNorm", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "\n", "padding", "=", "dilation", "[", "1", "]", ",", "dilation", "=", "dilation", "[", "1", "]", ")", "\n", "self", ".", "bn2", "=", "BatchNorm", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "residual", "=", "residual", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.drn.BasicBlock.forward": [[42, 59], ["drn.BasicBlock.conv1", "drn.BasicBlock.bn1", "drn.BasicBlock.relu", "drn.BasicBlock.conv2", "drn.BasicBlock.bn2", "drn.BasicBlock.relu", "drn.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "if", "self", ".", "residual", ":", "\n", "            ", "out", "+=", "residual", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.drn.Bottleneck.__init__": [[64, 78], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.Distiller.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "\n", "dilation", "=", "(", "1", ",", "1", ")", ",", "residual", "=", "True", ",", "BatchNorm", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", "[", "1", "]", ",", "bias", "=", "False", ",", "\n", "dilation", "=", "dilation", "[", "1", "]", ")", "\n", "self", ".", "bn2", "=", "BatchNorm", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "BatchNorm", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.drn.Bottleneck.forward": [[79, 100], ["drn.Bottleneck.conv1", "drn.Bottleneck.bn1", "drn.Bottleneck.relu", "drn.Bottleneck.conv2", "drn.Bottleneck.bn2", "drn.Bottleneck.relu", "drn.Bottleneck.conv3", "drn.Bottleneck.bn3", "drn.Bottleneck.relu", "drn.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.drn.DRN.__init__": [[104, 158], ["torch.Module.__init__", "drn.DRN._make_layer", "drn.DRN._make_layer", "drn.DRN._make_layer", "drn.DRN._init_weight", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU", "drn.DRN._make_layer", "drn.DRN._make_layer", "drn.DRN._make_layer", "torch.Sequential", "torch.Sequential", "drn.DRN._make_conv_layers", "drn.DRN._make_conv_layers", "drn.DRN._make_layer", "drn.DRN._make_layer", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU", "drn.DRN._make_conv_layers", "drn.DRN._make_conv_layers"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.Distiller.__init__", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.xception.AlignedXception._init_weight", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.drn.DRN._make_conv_layers", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.drn.DRN._make_conv_layers", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.drn.DRN._make_conv_layers", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.drn.DRN._make_conv_layers"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "arch", "=", "'D'", ",", "\n", "channels", "=", "(", "16", ",", "32", ",", "64", ",", "128", ",", "256", ",", "512", ",", "512", ",", "512", ")", ",", "\n", "BatchNorm", "=", "None", ")", ":", "\n", "        ", "super", "(", "DRN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "channels", "[", "0", "]", "\n", "self", ".", "out_dim", "=", "channels", "[", "-", "1", "]", "\n", "self", ".", "arch", "=", "arch", "\n", "\n", "if", "arch", "==", "'C'", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "channels", "[", "0", "]", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "\n", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm", "(", "channels", "[", "0", "]", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "\n", "BasicBlock", ",", "channels", "[", "0", "]", ",", "layers", "[", "0", "]", ",", "stride", "=", "1", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "BasicBlock", ",", "channels", "[", "1", "]", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "\n", "", "elif", "arch", "==", "'D'", ":", "\n", "            ", "self", ".", "layer0", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "channels", "[", "0", "]", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "channels", "[", "0", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_conv_layers", "(", "\n", "channels", "[", "0", "]", ",", "layers", "[", "0", "]", ",", "stride", "=", "1", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_conv_layers", "(", "\n", "channels", "[", "1", "]", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "\n", "", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "channels", "[", "2", "]", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "channels", "[", "3", "]", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "self", ".", "layer5", "=", "self", ".", "_make_layer", "(", "block", ",", "channels", "[", "4", "]", ",", "layers", "[", "4", "]", ",", "\n", "dilation", "=", "2", ",", "new_level", "=", "False", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "self", ".", "layer6", "=", "None", "if", "layers", "[", "5", "]", "==", "0", "else", "self", ".", "_make_layer", "(", "block", ",", "channels", "[", "5", "]", ",", "layers", "[", "5", "]", ",", "dilation", "=", "4", ",", "\n", "new_level", "=", "False", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "\n", "if", "arch", "==", "'C'", ":", "\n", "            ", "self", ".", "layer7", "=", "None", "if", "layers", "[", "6", "]", "==", "0", "else", "self", ".", "_make_layer", "(", "BasicBlock", ",", "channels", "[", "6", "]", ",", "layers", "[", "6", "]", ",", "dilation", "=", "2", ",", "\n", "new_level", "=", "False", ",", "residual", "=", "False", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "self", ".", "layer8", "=", "None", "if", "layers", "[", "7", "]", "==", "0", "else", "self", ".", "_make_layer", "(", "BasicBlock", ",", "channels", "[", "7", "]", ",", "layers", "[", "7", "]", ",", "dilation", "=", "1", ",", "\n", "new_level", "=", "False", ",", "residual", "=", "False", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "", "elif", "arch", "==", "'D'", ":", "\n", "            ", "self", ".", "layer7", "=", "None", "if", "layers", "[", "6", "]", "==", "0", "else", "self", ".", "_make_conv_layers", "(", "channels", "[", "6", "]", ",", "layers", "[", "6", "]", ",", "dilation", "=", "2", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "self", ".", "layer8", "=", "None", "if", "layers", "[", "7", "]", "==", "0", "else", "self", ".", "_make_conv_layers", "(", "channels", "[", "7", "]", ",", "layers", "[", "7", "]", ",", "dilation", "=", "1", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "\n", "", "self", ".", "_init_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.drn.DRN._init_weight": [[159, 170], ["drn.DRN.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_init_weight", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "SynchronizedBatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.drn.DRN._make_layer": [[172, 195], ["list", "list.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "list.append", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "\n", "new_level", "=", "True", ",", "residual", "=", "True", ",", "BatchNorm", "=", "None", ")", ":", "\n", "        ", "assert", "dilation", "==", "1", "or", "dilation", "%", "2", "==", "0", "\n", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "list", "(", ")", "\n", "layers", ".", "append", "(", "block", "(", "\n", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "\n", "dilation", "=", "(", "1", ",", "1", ")", "if", "dilation", "==", "1", "else", "(", "\n", "dilation", "//", "2", "if", "new_level", "else", "dilation", ",", "dilation", ")", ",", "\n", "residual", "=", "residual", ",", "BatchNorm", "=", "BatchNorm", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "residual", "=", "residual", ",", "\n", "dilation", "=", "(", "dilation", ",", "dilation", ")", ",", "BatchNorm", "=", "BatchNorm", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.drn.DRN._make_conv_layers": [[196, 207], ["range", "torch.Sequential", "torch.Sequential", "modules.extend", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_conv_layers", "(", "self", ",", "channels", ",", "convs", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "BatchNorm", "=", "None", ")", ":", "\n", "        ", "modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "convs", ")", ":", "\n", "            ", "modules", ".", "extend", "(", "[", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "channels", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", "if", "i", "==", "0", "else", "1", ",", "\n", "padding", "=", "dilation", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", ",", "\n", "BatchNorm", "(", "channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", ")", "\n", "self", ".", "inplanes", "=", "channels", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.drn.DRN.forward": [[208, 235], ["drn.DRN.layer1", "drn.DRN.layer2", "drn.DRN.layer3", "drn.DRN.layer4", "drn.DRN.layer5", "drn.DRN.conv1", "drn.DRN.bn1", "drn.DRN.relu", "drn.DRN.layer6", "drn.DRN.layer7", "drn.DRN.layer8", "drn.DRN.layer0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "arch", "==", "'C'", ":", "\n", "            ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "", "elif", "self", ".", "arch", "==", "'D'", ":", "\n", "            ", "x", "=", "self", ".", "layer0", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "low_level_feat", "=", "x", "\n", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "layer5", "(", "x", ")", "\n", "\n", "if", "self", ".", "layer6", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "layer6", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "layer7", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "layer7", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "layer8", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "layer8", "(", "x", ")", "\n", "\n", "", "return", "x", ",", "low_level_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.drn.DRN_A.__init__": [[239, 256], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "drn.DRN_A._make_layer", "drn.DRN_A._make_layer", "drn.DRN_A._make_layer", "drn.DRN_A._make_layer", "drn.DRN_A._init_weight"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.Distiller.__init__", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.xception.AlignedXception._init_weight"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "BatchNorm", "=", "None", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "DRN_A", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_dim", "=", "512", "*", "block", ".", "expansion", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ",", "\n", "dilation", "=", "2", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "\n", "dilation", "=", "4", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "\n", "self", ".", "_init_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.drn.DRN_A._init_weight": [[257, 268], ["drn.DRN_A.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_init_weight", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "SynchronizedBatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.drn.DRN_A._make_layer": [[269, 286], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "BatchNorm", "=", "None", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "BatchNorm", "=", "BatchNorm", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "\n", "dilation", "=", "(", "dilation", ",", "dilation", ",", ")", ",", "BatchNorm", "=", "BatchNorm", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.drn.DRN_A.forward": [[287, 299], ["drn.DRN_A.conv1", "drn.DRN_A.bn1", "drn.DRN_A.relu", "drn.DRN_A.maxpool", "drn.DRN_A.layer1", "drn.DRN_A.layer2", "drn.DRN_A.layer3", "drn.DRN_A.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.drn.conv3x3": [[20, 23], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.drn.drn_a_50": [[300, 305], ["drn.DRN_A", "DRN_A.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "drn_a_50", "(", "BatchNorm", ",", "pretrained", "=", "True", ")", ":", "\n", "    ", "model", "=", "DRN_A", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.drn.drn_c_26": [[307, 315], ["drn.DRN", "torch.load_url", "DRN.load_state_dict"], "function", ["None"], ["", "def", "drn_c_26", "(", "BatchNorm", ",", "pretrained", "=", "True", ")", ":", "\n", "    ", "model", "=", "DRN", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "2", ",", "2", ",", "2", ",", "2", ",", "1", ",", "1", "]", ",", "arch", "=", "'C'", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "if", "pretrained", ":", "\n", "        ", "pretrained", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'drn-c-26'", "]", ")", "\n", "del", "pretrained", "[", "'fc.weight'", "]", "\n", "del", "pretrained", "[", "'fc.bias'", "]", "\n", "model", ".", "load_state_dict", "(", "pretrained", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.drn.drn_c_42": [[317, 325], ["drn.DRN", "torch.load_url", "DRN.load_state_dict"], "function", ["None"], ["", "def", "drn_c_42", "(", "BatchNorm", ",", "pretrained", "=", "True", ")", ":", "\n", "    ", "model", "=", "DRN", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "3", ",", "4", ",", "6", ",", "3", ",", "1", ",", "1", "]", ",", "arch", "=", "'C'", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "if", "pretrained", ":", "\n", "        ", "pretrained", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'drn-c-42'", "]", ")", "\n", "del", "pretrained", "[", "'fc.weight'", "]", "\n", "del", "pretrained", "[", "'fc.bias'", "]", "\n", "model", ".", "load_state_dict", "(", "pretrained", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.drn.drn_c_58": [[327, 335], ["drn.DRN", "torch.load_url", "DRN.load_state_dict"], "function", ["None"], ["", "def", "drn_c_58", "(", "BatchNorm", ",", "pretrained", "=", "True", ")", ":", "\n", "    ", "model", "=", "DRN", "(", "Bottleneck", ",", "[", "1", ",", "1", ",", "3", ",", "4", ",", "6", ",", "3", ",", "1", ",", "1", "]", ",", "arch", "=", "'C'", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "if", "pretrained", ":", "\n", "        ", "pretrained", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'drn-c-58'", "]", ")", "\n", "del", "pretrained", "[", "'fc.weight'", "]", "\n", "del", "pretrained", "[", "'fc.bias'", "]", "\n", "model", ".", "load_state_dict", "(", "pretrained", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.drn.drn_d_22": [[337, 345], ["drn.DRN", "torch.load_url", "DRN.load_state_dict"], "function", ["None"], ["", "def", "drn_d_22", "(", "BatchNorm", ",", "pretrained", "=", "True", ")", ":", "\n", "    ", "model", "=", "DRN", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "2", ",", "2", ",", "2", ",", "2", ",", "1", ",", "1", "]", ",", "arch", "=", "'D'", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "if", "pretrained", ":", "\n", "        ", "pretrained", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'drn-d-22'", "]", ")", "\n", "del", "pretrained", "[", "'fc.weight'", "]", "\n", "del", "pretrained", "[", "'fc.bias'", "]", "\n", "model", ".", "load_state_dict", "(", "pretrained", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.drn.drn_d_24": [[347, 355], ["drn.DRN", "torch.load_url", "DRN.load_state_dict"], "function", ["None"], ["", "def", "drn_d_24", "(", "BatchNorm", ",", "pretrained", "=", "True", ")", ":", "\n", "    ", "model", "=", "DRN", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", "]", ",", "arch", "=", "'D'", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "if", "pretrained", ":", "\n", "        ", "pretrained", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'drn-d-24'", "]", ")", "\n", "del", "pretrained", "[", "'fc.weight'", "]", "\n", "del", "pretrained", "[", "'fc.bias'", "]", "\n", "model", ".", "load_state_dict", "(", "pretrained", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.drn.drn_d_38": [[357, 365], ["drn.DRN", "torch.load_url", "DRN.load_state_dict"], "function", ["None"], ["", "def", "drn_d_38", "(", "BatchNorm", ",", "pretrained", "=", "True", ")", ":", "\n", "    ", "model", "=", "DRN", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "3", ",", "4", ",", "6", ",", "3", ",", "1", ",", "1", "]", ",", "arch", "=", "'D'", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "if", "pretrained", ":", "\n", "        ", "pretrained", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'drn-d-38'", "]", ")", "\n", "del", "pretrained", "[", "'fc.weight'", "]", "\n", "del", "pretrained", "[", "'fc.bias'", "]", "\n", "model", ".", "load_state_dict", "(", "pretrained", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.drn.drn_d_40": [[367, 375], ["drn.DRN", "torch.load_url", "DRN.load_state_dict"], "function", ["None"], ["", "def", "drn_d_40", "(", "BatchNorm", ",", "pretrained", "=", "True", ")", ":", "\n", "    ", "model", "=", "DRN", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "3", ",", "4", ",", "6", ",", "3", ",", "2", ",", "2", "]", ",", "arch", "=", "'D'", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "if", "pretrained", ":", "\n", "        ", "pretrained", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'drn-d-40'", "]", ")", "\n", "del", "pretrained", "[", "'fc.weight'", "]", "\n", "del", "pretrained", "[", "'fc.bias'", "]", "\n", "model", ".", "load_state_dict", "(", "pretrained", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.drn.drn_d_54": [[377, 385], ["drn.DRN", "torch.load_url", "DRN.load_state_dict"], "function", ["None"], ["", "def", "drn_d_54", "(", "BatchNorm", ",", "pretrained", "=", "True", ")", ":", "\n", "    ", "model", "=", "DRN", "(", "Bottleneck", ",", "[", "1", ",", "1", ",", "3", ",", "4", ",", "6", ",", "3", ",", "1", ",", "1", "]", ",", "arch", "=", "'D'", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "if", "pretrained", ":", "\n", "        ", "pretrained", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'drn-d-54'", "]", ")", "\n", "del", "pretrained", "[", "'fc.weight'", "]", "\n", "del", "pretrained", "[", "'fc.bias'", "]", "\n", "model", ".", "load_state_dict", "(", "pretrained", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.drn.drn_d_105": [[387, 395], ["drn.DRN", "torch.load_url", "DRN.load_state_dict"], "function", ["None"], ["", "def", "drn_d_105", "(", "BatchNorm", ",", "pretrained", "=", "True", ")", ":", "\n", "    ", "model", "=", "DRN", "(", "Bottleneck", ",", "[", "1", ",", "1", ",", "3", ",", "4", ",", "23", ",", "3", ",", "1", ",", "1", "]", ",", "arch", "=", "'D'", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "if", "pretrained", ":", "\n", "        ", "pretrained", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'drn-d-105'", "]", ")", "\n", "del", "pretrained", "[", "'fc.weight'", "]", "\n", "del", "pretrained", "[", "'fc.bias'", "]", "\n", "model", ".", "load_state_dict", "(", "pretrained", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.xception.SeparableConv2d.__init__": [[18, 25], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.Distiller.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "False", ",", "BatchNorm", "=", "None", ")", ":", "\n", "        ", "super", "(", "SeparableConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "inplanes", ",", "kernel_size", ",", "stride", ",", "0", ",", "dilation", ",", "\n", "groups", "=", "inplanes", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn", "=", "BatchNorm", "(", "inplanes", ")", "\n", "self", ".", "pointwise", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.xception.SeparableConv2d.forward": [[26, 32], ["xception.fixed_padding", "xception.SeparableConv2d.conv1", "xception.SeparableConv2d.bn", "xception.SeparableConv2d.pointwise"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.xception.fixed_padding"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "fixed_padding", "(", "x", ",", "self", ".", "conv1", ".", "kernel_size", "[", "0", "]", ",", "dilation", "=", "self", ".", "conv1", ".", "dilation", "[", "0", "]", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "pointwise", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.xception.Block.__init__": [[35, 79], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "xception.SeparableConv2d", "BatchNorm", "xception.SeparableConv2d", "BatchNorm", "xception.SeparableConv2d", "BatchNorm", "xception.SeparableConv2d", "BatchNorm", "xception.SeparableConv2d", "BatchNorm"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.Distiller.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "reps", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "BatchNorm", "=", "None", ",", "\n", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ",", "is_last", "=", "False", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "planes", "!=", "inplanes", "or", "stride", "!=", "1", ":", "\n", "            ", "self", ".", "skip", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "self", ".", "skipbn", "=", "BatchNorm", "(", "planes", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "skip", "=", "None", "\n", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "rep", "=", "[", "]", "\n", "\n", "filters", "=", "inplanes", "\n", "if", "grow_first", ":", "\n", "            ", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "rep", ".", "append", "(", "SeparableConv2d", "(", "inplanes", ",", "planes", ",", "3", ",", "1", ",", "dilation", ",", "BatchNorm", "=", "BatchNorm", ")", ")", "\n", "rep", ".", "append", "(", "BatchNorm", "(", "planes", ")", ")", "\n", "filters", "=", "planes", "\n", "\n", "", "for", "i", "in", "range", "(", "reps", "-", "1", ")", ":", "\n", "            ", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "rep", ".", "append", "(", "SeparableConv2d", "(", "filters", ",", "filters", ",", "3", ",", "1", ",", "dilation", ",", "BatchNorm", "=", "BatchNorm", ")", ")", "\n", "rep", ".", "append", "(", "BatchNorm", "(", "filters", ")", ")", "\n", "\n", "", "if", "not", "grow_first", ":", "\n", "            ", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "rep", ".", "append", "(", "SeparableConv2d", "(", "inplanes", ",", "planes", ",", "3", ",", "1", ",", "dilation", ",", "BatchNorm", "=", "BatchNorm", ")", ")", "\n", "rep", ".", "append", "(", "BatchNorm", "(", "planes", ")", ")", "\n", "\n", "", "if", "stride", "!=", "1", ":", "\n", "            ", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "rep", ".", "append", "(", "SeparableConv2d", "(", "planes", ",", "planes", ",", "3", ",", "2", ",", "BatchNorm", "=", "BatchNorm", ")", ")", "\n", "rep", ".", "append", "(", "BatchNorm", "(", "planes", ")", ")", "\n", "\n", "", "if", "stride", "==", "1", "and", "is_last", ":", "\n", "            ", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "rep", ".", "append", "(", "SeparableConv2d", "(", "planes", ",", "planes", ",", "3", ",", "1", ",", "BatchNorm", "=", "BatchNorm", ")", ")", "\n", "rep", ".", "append", "(", "BatchNorm", "(", "planes", ")", ")", "\n", "\n", "", "if", "not", "start_with_relu", ":", "\n", "            ", "rep", "=", "rep", "[", "1", ":", "]", "\n", "\n", "", "self", ".", "rep", "=", "nn", ".", "Sequential", "(", "*", "rep", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.xception.Block.forward": [[80, 92], ["xception.Block.rep", "xception.Block.skip", "xception.Block.skipbn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "x", "=", "self", ".", "rep", "(", "inp", ")", "\n", "\n", "if", "self", ".", "skip", "is", "not", "None", ":", "\n", "            ", "skip", "=", "self", ".", "skip", "(", "inp", ")", "\n", "skip", "=", "self", ".", "skipbn", "(", "skip", ")", "\n", "", "else", ":", "\n", "            ", "skip", "=", "inp", "\n", "\n", "", "x", "=", "x", "+", "skip", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.xception.AlignedXception.__init__": [[98, 181], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.SeparableConv2d", "BatchNorm", "xception.SeparableConv2d", "BatchNorm", "xception.SeparableConv2d", "BatchNorm", "xception.AlignedXception._init_weight", "xception.AlignedXception._load_pretrained_model"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.Distiller.__init__", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.xception.AlignedXception._init_weight", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.xception.AlignedXception._load_pretrained_model"], ["def", "__init__", "(", "self", ",", "output_stride", ",", "BatchNorm", ",", "\n", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "AlignedXception", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "output_stride", "==", "16", ":", "\n", "            ", "entry_block3_stride", "=", "2", "\n", "middle_block_dilation", "=", "1", "\n", "exit_block_dilations", "=", "(", "1", ",", "2", ")", "\n", "", "elif", "output_stride", "==", "8", ":", "\n", "            ", "entry_block3_stride", "=", "1", "\n", "middle_block_dilation", "=", "2", "\n", "exit_block_dilations", "=", "(", "2", ",", "4", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "\n", "# Entry flow", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm", "(", "32", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BatchNorm", "(", "64", ")", "\n", "\n", "self", ".", "block1", "=", "Block", "(", "64", ",", "128", ",", "reps", "=", "2", ",", "stride", "=", "2", ",", "BatchNorm", "=", "BatchNorm", ",", "start_with_relu", "=", "False", ")", "\n", "self", ".", "block2", "=", "Block", "(", "128", ",", "256", ",", "reps", "=", "2", ",", "stride", "=", "2", ",", "BatchNorm", "=", "BatchNorm", ",", "start_with_relu", "=", "False", ",", "\n", "grow_first", "=", "True", ")", "\n", "self", ".", "block3", "=", "Block", "(", "256", ",", "728", ",", "reps", "=", "2", ",", "stride", "=", "entry_block3_stride", ",", "BatchNorm", "=", "BatchNorm", ",", "\n", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ",", "is_last", "=", "True", ")", "\n", "\n", "# Middle flow", "\n", "self", ".", "block4", "=", "Block", "(", "728", ",", "728", ",", "reps", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "BatchNorm", "=", "BatchNorm", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block5", "=", "Block", "(", "728", ",", "728", ",", "reps", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "BatchNorm", "=", "BatchNorm", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block6", "=", "Block", "(", "728", ",", "728", ",", "reps", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "BatchNorm", "=", "BatchNorm", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block7", "=", "Block", "(", "728", ",", "728", ",", "reps", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "BatchNorm", "=", "BatchNorm", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block8", "=", "Block", "(", "728", ",", "728", ",", "reps", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "BatchNorm", "=", "BatchNorm", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block9", "=", "Block", "(", "728", ",", "728", ",", "reps", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "BatchNorm", "=", "BatchNorm", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block10", "=", "Block", "(", "728", ",", "728", ",", "reps", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "BatchNorm", "=", "BatchNorm", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block11", "=", "Block", "(", "728", ",", "728", ",", "reps", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "BatchNorm", "=", "BatchNorm", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block12", "=", "Block", "(", "728", ",", "728", ",", "reps", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "BatchNorm", "=", "BatchNorm", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block13", "=", "Block", "(", "728", ",", "728", ",", "reps", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "BatchNorm", "=", "BatchNorm", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block14", "=", "Block", "(", "728", ",", "728", ",", "reps", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "BatchNorm", "=", "BatchNorm", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block15", "=", "Block", "(", "728", ",", "728", ",", "reps", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "BatchNorm", "=", "BatchNorm", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block16", "=", "Block", "(", "728", ",", "728", ",", "reps", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "BatchNorm", "=", "BatchNorm", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block17", "=", "Block", "(", "728", ",", "728", ",", "reps", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "BatchNorm", "=", "BatchNorm", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block18", "=", "Block", "(", "728", ",", "728", ",", "reps", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "BatchNorm", "=", "BatchNorm", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block19", "=", "Block", "(", "728", ",", "728", ",", "reps", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "BatchNorm", "=", "BatchNorm", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "\n", "# Exit flow", "\n", "self", ".", "block20", "=", "Block", "(", "728", ",", "1024", ",", "reps", "=", "2", ",", "stride", "=", "1", ",", "dilation", "=", "exit_block_dilations", "[", "0", "]", ",", "\n", "BatchNorm", "=", "BatchNorm", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "False", ",", "is_last", "=", "True", ")", "\n", "\n", "self", ".", "conv3", "=", "SeparableConv2d", "(", "1024", ",", "1536", ",", "3", ",", "stride", "=", "1", ",", "dilation", "=", "exit_block_dilations", "[", "1", "]", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "self", ".", "bn3", "=", "BatchNorm", "(", "1536", ")", "\n", "\n", "self", ".", "conv4", "=", "SeparableConv2d", "(", "1536", ",", "1536", ",", "3", ",", "stride", "=", "1", ",", "dilation", "=", "exit_block_dilations", "[", "1", "]", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "self", ".", "bn4", "=", "BatchNorm", "(", "1536", ")", "\n", "\n", "self", ".", "conv5", "=", "SeparableConv2d", "(", "1536", ",", "2048", ",", "3", ",", "stride", "=", "1", ",", "dilation", "=", "exit_block_dilations", "[", "1", "]", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "self", ".", "bn5", "=", "BatchNorm", "(", "2048", ")", "\n", "\n", "# Init weights", "\n", "self", ".", "_init_weight", "(", ")", "\n", "\n", "# Load pretrained model", "\n", "if", "pretrained", ":", "\n", "            ", "self", ".", "_load_pretrained_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.xception.AlignedXception.forward": [[182, 233], ["xception.AlignedXception.conv1", "xception.AlignedXception.bn1", "xception.AlignedXception.relu", "xception.AlignedXception.conv2", "xception.AlignedXception.bn2", "xception.AlignedXception.relu", "xception.AlignedXception.block1", "xception.AlignedXception.relu", "xception.AlignedXception.block2", "xception.AlignedXception.block3", "xception.AlignedXception.block4", "xception.AlignedXception.block5", "xception.AlignedXception.block6", "xception.AlignedXception.block7", "xception.AlignedXception.block8", "xception.AlignedXception.block9", "xception.AlignedXception.block10", "xception.AlignedXception.block11", "xception.AlignedXception.block12", "xception.AlignedXception.block13", "xception.AlignedXception.block14", "xception.AlignedXception.block15", "xception.AlignedXception.block16", "xception.AlignedXception.block17", "xception.AlignedXception.block18", "xception.AlignedXception.block19", "xception.AlignedXception.block20", "xception.AlignedXception.relu", "xception.AlignedXception.conv3", "xception.AlignedXception.bn3", "xception.AlignedXception.relu", "xception.AlignedXception.conv4", "xception.AlignedXception.bn4", "xception.AlignedXception.relu", "xception.AlignedXception.conv5", "xception.AlignedXception.bn5", "xception.AlignedXception.relu"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Entry flow", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "# add relu here", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "low_level_feat", "=", "x", "\n", "x", "=", "self", ".", "block2", "(", "x", ")", "\n", "x", "=", "self", ".", "block3", "(", "x", ")", "\n", "\n", "# Middle flow", "\n", "x", "=", "self", ".", "block4", "(", "x", ")", "\n", "x", "=", "self", ".", "block5", "(", "x", ")", "\n", "x", "=", "self", ".", "block6", "(", "x", ")", "\n", "x", "=", "self", ".", "block7", "(", "x", ")", "\n", "x", "=", "self", ".", "block8", "(", "x", ")", "\n", "x", "=", "self", ".", "block9", "(", "x", ")", "\n", "x", "=", "self", ".", "block10", "(", "x", ")", "\n", "x", "=", "self", ".", "block11", "(", "x", ")", "\n", "x", "=", "self", ".", "block12", "(", "x", ")", "\n", "x", "=", "self", ".", "block13", "(", "x", ")", "\n", "x", "=", "self", ".", "block14", "(", "x", ")", "\n", "x", "=", "self", ".", "block15", "(", "x", ")", "\n", "x", "=", "self", ".", "block16", "(", "x", ")", "\n", "x", "=", "self", ".", "block17", "(", "x", ")", "\n", "x", "=", "self", ".", "block18", "(", "x", ")", "\n", "x", "=", "self", ".", "block19", "(", "x", ")", "\n", "\n", "# Exit flow", "\n", "x", "=", "self", ".", "block20", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "bn3", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "bn4", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "x", "=", "self", ".", "bn5", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "return", "x", ",", "low_level_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.xception.AlignedXception._init_weight": [[234, 245], ["xception.AlignedXception.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_init_weight", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "SynchronizedBatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.xception.AlignedXception._load_pretrained_model": [[247, 279], ["torch.load_url", "torch.load_url", "torch.load_url", "torch.load_url", "xception.AlignedXception.state_dict", "torch.load_url.items", "xception.AlignedXception.update", "xception.AlignedXception.load_state_dict", "k.startswith", "v.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze().unsqueeze", "k.startswith", "k.startswith", "v.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.startswith", "k.replace", "k.startswith", "k.replace", "k.replace", "k.replace"], "methods", ["None"], ["", "", "", "def", "_load_pretrained_model", "(", "self", ")", ":", "\n", "        ", "pretrain_dict", "=", "model_zoo", ".", "load_url", "(", "'http://data.lip6.fr/cadene/pretrainedmodels/xception-b5690688.pth'", ")", "\n", "model_dict", "=", "{", "}", "\n", "state_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "\n", "for", "k", ",", "v", "in", "pretrain_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "in", "model_dict", ":", "\n", "                ", "if", "'pointwise'", "in", "k", ":", "\n", "                    ", "v", "=", "v", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "if", "k", ".", "startswith", "(", "'block11'", ")", ":", "\n", "                    ", "model_dict", "[", "k", "]", "=", "v", "\n", "model_dict", "[", "k", ".", "replace", "(", "'block11'", ",", "'block12'", ")", "]", "=", "v", "\n", "model_dict", "[", "k", ".", "replace", "(", "'block11'", ",", "'block13'", ")", "]", "=", "v", "\n", "model_dict", "[", "k", ".", "replace", "(", "'block11'", ",", "'block14'", ")", "]", "=", "v", "\n", "model_dict", "[", "k", ".", "replace", "(", "'block11'", ",", "'block15'", ")", "]", "=", "v", "\n", "model_dict", "[", "k", ".", "replace", "(", "'block11'", ",", "'block16'", ")", "]", "=", "v", "\n", "model_dict", "[", "k", ".", "replace", "(", "'block11'", ",", "'block17'", ")", "]", "=", "v", "\n", "model_dict", "[", "k", ".", "replace", "(", "'block11'", ",", "'block18'", ")", "]", "=", "v", "\n", "model_dict", "[", "k", ".", "replace", "(", "'block11'", ",", "'block19'", ")", "]", "=", "v", "\n", "", "elif", "k", ".", "startswith", "(", "'block12'", ")", ":", "\n", "                    ", "model_dict", "[", "k", ".", "replace", "(", "'block12'", ",", "'block20'", ")", "]", "=", "v", "\n", "", "elif", "k", ".", "startswith", "(", "'bn3'", ")", ":", "\n", "                    ", "model_dict", "[", "k", "]", "=", "v", "\n", "model_dict", "[", "k", ".", "replace", "(", "'bn3'", ",", "'bn4'", ")", "]", "=", "v", "\n", "", "elif", "k", ".", "startswith", "(", "'conv4'", ")", ":", "\n", "                    ", "model_dict", "[", "k", ".", "replace", "(", "'conv4'", ",", "'conv5'", ")", "]", "=", "v", "\n", "", "elif", "k", ".", "startswith", "(", "'bn4'", ")", ":", "\n", "                    ", "model_dict", "[", "k", ".", "replace", "(", "'bn4'", ",", "'bn5'", ")", "]", "=", "v", "\n", "", "else", ":", "\n", "                    ", "model_dict", "[", "k", "]", "=", "v", "\n", "", "", "", "state_dict", ".", "update", "(", "model_dict", ")", "\n", "self", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.xception.fixed_padding": [[8, 15], ["torch.pad"], "function", ["None"], ["def", "fixed_padding", "(", "inputs", ",", "kernel_size", ",", "dilation", ")", ":", "\n", "    ", "kernel_size_effective", "=", "kernel_size", "+", "(", "kernel_size", "-", "1", ")", "*", "(", "dilation", "-", "1", ")", "\n", "pad_total", "=", "kernel_size_effective", "-", "1", "\n", "pad_beg", "=", "pad_total", "//", "2", "\n", "pad_end", "=", "pad_total", "-", "pad_beg", "\n", "padded_inputs", "=", "F", ".", "pad", "(", "inputs", ",", "(", "pad_beg", ",", "pad_end", ",", "pad_beg", ",", "pad_end", ")", ")", "\n", "return", "padded_inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.__init__.build_backbone": [[3, 16], ["modeling.backbone.resnet.ResNet101", "modeling.backbone.xception.AlignedXception", "modeling.backbone.drn.drn_d_54", "modeling.backbone.mobilenet.MobileNetV2", "modeling.backbone.resnet.ResNet18"], "function", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.resnet.ResNet101", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.drn.drn_d_54", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.resnet.ResNet18"], []], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.dataloaders.custom_transforms.Normalize.__init__": [[14, 17], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mean", "=", "(", "0.", ",", "0.", ",", "0.", ")", ",", "std", "=", "(", "1.", ",", "1.", ",", "1.", ")", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.dataloaders.custom_transforms.Normalize.__call__": [[18, 29], ["numpy.array().astype", "numpy.array().astype", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "img", "=", "sample", "[", "'image'", "]", "\n", "mask", "=", "sample", "[", "'label'", "]", "\n", "img", "=", "np", ".", "array", "(", "img", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "mask", "=", "np", ".", "array", "(", "mask", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img", "/=", "255.0", "\n", "img", "-=", "self", ".", "mean", "\n", "img", "/=", "self", ".", "std", "\n", "\n", "return", "{", "'image'", ":", "img", ",", "\n", "'label'", ":", "mask", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.dataloaders.custom_transforms.ToTensor.__call__": [[34, 48], ["numpy.array().astype().transpose", "numpy.array().astype", "torch.from_numpy().float", "torch.from_numpy().float", "numpy.array().astype", "numpy.array", "torch.from_numpy", "torch.from_numpy", "numpy.array"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "# swap color axis because", "\n", "# numpy image: H x W x C", "\n", "# torch image: C X H X W", "\n", "        ", "img", "=", "sample", "[", "'image'", "]", "\n", "mask", "=", "sample", "[", "'label'", "]", "\n", "img", "=", "np", ".", "array", "(", "img", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "mask", "=", "np", ".", "array", "(", "mask", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "float", "(", ")", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", ".", "float", "(", ")", "\n", "\n", "return", "{", "'image'", ":", "img", ",", "\n", "'label'", ":", "mask", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.dataloaders.custom_transforms.RandomHorizontalFlip.__call__": [[51, 60], ["random.random", "img.transpose.transpose.transpose", "mask.transpose.transpose.transpose"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "img", "=", "sample", "[", "'image'", "]", "\n", "mask", "=", "sample", "[", "'label'", "]", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "img", "=", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "mask", "=", "mask", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "\n", "", "return", "{", "'image'", ":", "img", ",", "\n", "'label'", ":", "mask", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.dataloaders.custom_transforms.RandomRotate.__init__": [[63, 65], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "degree", ")", ":", "\n", "        ", "self", ".", "degree", "=", "degree", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.dataloaders.custom_transforms.RandomRotate.__call__": [[66, 75], ["random.uniform", "img.rotate.rotate.rotate", "mask.rotate.rotate.rotate"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "img", "=", "sample", "[", "'image'", "]", "\n", "mask", "=", "sample", "[", "'label'", "]", "\n", "rotate_degree", "=", "random", ".", "uniform", "(", "-", "1", "*", "self", ".", "degree", ",", "self", ".", "degree", ")", "\n", "img", "=", "img", ".", "rotate", "(", "rotate_degree", ",", "Image", ".", "BILINEAR", ")", "\n", "mask", "=", "mask", ".", "rotate", "(", "rotate_degree", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "return", "{", "'image'", ":", "img", ",", "\n", "'label'", ":", "mask", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.dataloaders.custom_transforms.RandomGaussianBlur.__call__": [[78, 87], ["random.random", "img.filter.filter.filter", "PIL.ImageFilter.GaussianBlur", "random.random"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "img", "=", "sample", "[", "'image'", "]", "\n", "mask", "=", "sample", "[", "'label'", "]", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "img", "=", "img", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "\n", "radius", "=", "random", ".", "random", "(", ")", ")", ")", "\n", "\n", "", "return", "{", "'image'", ":", "img", ",", "\n", "'label'", ":", "mask", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.dataloaders.custom_transforms.RandomScaleCrop.__init__": [[90, 94], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "base_size", ",", "crop_size", ",", "fill", "=", "0", ")", ":", "\n", "        ", "self", ".", "base_size", "=", "base_size", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "fill", "=", "fill", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.dataloaders.custom_transforms.RandomScaleCrop.__call__": [[95, 124], ["random.randint", "PIL.ImageOps.expand.resize", "PIL.ImageOps.expand.resize", "random.randint", "random.randint", "PIL.ImageOps.expand.crop", "PIL.ImageOps.expand.crop", "int", "int", "int", "int", "PIL.ImageOps.expand", "PIL.ImageOps.expand"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "img", "=", "sample", "[", "'image'", "]", "\n", "mask", "=", "sample", "[", "'label'", "]", "\n", "# random scale (short edge)", "\n", "short_size", "=", "random", ".", "randint", "(", "int", "(", "self", ".", "base_size", "*", "0.5", ")", ",", "int", "(", "self", ".", "base_size", "*", "2.0", ")", ")", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "h", ">", "w", ":", "\n", "            ", "ow", "=", "short_size", "\n", "oh", "=", "int", "(", "1.0", "*", "h", "*", "ow", "/", "w", ")", "\n", "", "else", ":", "\n", "            ", "oh", "=", "short_size", "\n", "ow", "=", "int", "(", "1.0", "*", "w", "*", "oh", "/", "h", ")", "\n", "", "img", "=", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BILINEAR", ")", "\n", "mask", "=", "mask", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", "\n", "# pad crop", "\n", "if", "short_size", "<", "self", ".", "crop_size", ":", "\n", "            ", "padh", "=", "self", ".", "crop_size", "-", "oh", "if", "oh", "<", "self", ".", "crop_size", "else", "0", "\n", "padw", "=", "self", ".", "crop_size", "-", "ow", "if", "ow", "<", "self", ".", "crop_size", "else", "0", "\n", "img", "=", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "(", "0", ",", "0", ",", "padw", ",", "padh", ")", ",", "fill", "=", "0", ")", "\n", "mask", "=", "ImageOps", ".", "expand", "(", "mask", ",", "border", "=", "(", "0", ",", "0", ",", "padw", ",", "padh", ")", ",", "fill", "=", "self", ".", "fill", ")", "\n", "# random crop crop_size", "\n", "", "w", ",", "h", "=", "img", ".", "size", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "self", ".", "crop_size", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "self", ".", "crop_size", ")", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "self", ".", "crop_size", ",", "y1", "+", "self", ".", "crop_size", ")", ")", "\n", "mask", "=", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "self", ".", "crop_size", ",", "y1", "+", "self", ".", "crop_size", ")", ")", "\n", "\n", "return", "{", "'image'", ":", "img", ",", "\n", "'label'", ":", "mask", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.dataloaders.custom_transforms.FixScaleCrop.__init__": [[127, 129], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "crop_size", ")", ":", "\n", "        ", "self", ".", "crop_size", "=", "crop_size", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.dataloaders.custom_transforms.FixScaleCrop.__call__": [[130, 151], ["img.crop.crop.resize", "mask.crop.crop.resize", "int", "int", "img.crop.crop.crop", "mask.crop.crop.crop", "int", "int", "round", "round"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "img", "=", "sample", "[", "'image'", "]", "\n", "mask", "=", "sample", "[", "'label'", "]", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "w", ">", "h", ":", "\n", "            ", "oh", "=", "self", ".", "crop_size", "\n", "ow", "=", "int", "(", "1.0", "*", "w", "*", "oh", "/", "h", ")", "\n", "", "else", ":", "\n", "            ", "ow", "=", "self", ".", "crop_size", "\n", "oh", "=", "int", "(", "1.0", "*", "h", "*", "ow", "/", "w", ")", "\n", "", "img", "=", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BILINEAR", ")", "\n", "mask", "=", "mask", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", "\n", "# center crop", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "x1", "=", "int", "(", "round", "(", "(", "w", "-", "self", ".", "crop_size", ")", "/", "2.", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "(", "h", "-", "self", ".", "crop_size", ")", "/", "2.", ")", ")", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "self", ".", "crop_size", ",", "y1", "+", "self", ".", "crop_size", ")", ")", "\n", "mask", "=", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "self", ".", "crop_size", ",", "y1", "+", "self", ".", "crop_size", ")", ")", "\n", "\n", "return", "{", "'image'", ":", "img", ",", "\n", "'label'", ":", "mask", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.dataloaders.custom_transforms.FixedResize.__init__": [[153, 156], ["torchvision.transforms.Resize", "torchvision.transforms.Resize"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "image_resize", "=", "transforms", ".", "Resize", "(", "size", ",", "Image", ".", "BILINEAR", ")", "\n", "self", ".", "mask_resize", "=", "transforms", ".", "Resize", "(", "size", ",", "Image", ".", "NEAREST", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.dataloaders.custom_transforms.FixedResize.__call__": [[157, 168], ["custom_transforms.FixedResize.image_resize", "custom_transforms.FixedResize.mask_resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "img", "=", "sample", "[", "'image'", "]", "\n", "mask", "=", "sample", "[", "'label'", "]", "\n", "\n", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "\n", "img", "=", "self", ".", "image_resize", "(", "img", ")", "\n", "mask", "=", "self", ".", "mask_resize", "(", "mask", ")", "\n", "\n", "return", "{", "'image'", ":", "img", ",", "\n", "'label'", ":", "mask", "}", "", "", "", ""]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.dataloaders.__init__.make_data_loader": [[4, 42], ["dataloaders.datasets.pascal.VOCSegmentation", "dataloaders.datasets.pascal.VOCSegmentation", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "dataloaders.datasets.sbd.SBDSegmentation", "dataloaders.datasets.combine_dbs.CombineDBs", "dataloaders.datasets.cityscapes.CityscapesSegmentation", "dataloaders.datasets.cityscapes.CityscapesSegmentation", "dataloaders.datasets.cityscapes.CityscapesSegmentation", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "dataloaders.datasets.coco.COCOSegmentation", "dataloaders.datasets.coco.COCOSegmentation", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["None"], []], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.dataloaders.utils.decode_seg_map_sequence": [[5, 12], ["torch.from_numpy", "utils.decode_segmap", "torch.from_numpy.append", "numpy.array().transpose", "numpy.array"], "function", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.dataloaders.utils.decode_segmap"], ["def", "decode_seg_map_sequence", "(", "label_masks", ",", "dataset", "=", "'pascal'", ")", ":", "\n", "    ", "rgb_masks", "=", "[", "]", "\n", "for", "label_mask", "in", "label_masks", ":", "\n", "        ", "rgb_mask", "=", "decode_segmap", "(", "label_mask", ",", "dataset", ")", "\n", "rgb_masks", ".", "append", "(", "rgb_mask", ")", "\n", "", "rgb_masks", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "rgb_masks", ")", ".", "transpose", "(", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", ")", "\n", "return", "rgb_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.dataloaders.utils.decode_segmap": [[14, 49], ["label_mask.copy", "label_mask.copy", "label_mask.copy", "range", "numpy.zeros", "utils.get_pascal_labels", "matplotlib.imshow", "matplotlib.show", "utils.get_cityscapes_labels"], "function", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.dataloaders.utils.get_pascal_labels", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.dataloaders.utils.get_cityscapes_labels"], ["", "def", "decode_segmap", "(", "label_mask", ",", "dataset", ",", "plot", "=", "False", ")", ":", "\n", "    ", "\"\"\"Decode segmentation class labels into a color image\n    Args:\n        label_mask (np.ndarray): an (M,N) array of integer values denoting\n          the class label at each spatial location.\n        plot (bool, optional): whether to show the resulting color image\n          in a figure.\n    Returns:\n        (np.ndarray, optional): the resulting decoded color image.\n    \"\"\"", "\n", "if", "dataset", "==", "'pascal'", "or", "dataset", "==", "'coco'", ":", "\n", "        ", "n_classes", "=", "21", "\n", "label_colours", "=", "get_pascal_labels", "(", ")", "\n", "", "elif", "dataset", "==", "'cityscapes'", ":", "\n", "        ", "n_classes", "=", "19", "\n", "label_colours", "=", "get_cityscapes_labels", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "r", "=", "label_mask", ".", "copy", "(", ")", "\n", "g", "=", "label_mask", ".", "copy", "(", ")", "\n", "b", "=", "label_mask", ".", "copy", "(", ")", "\n", "for", "ll", "in", "range", "(", "0", ",", "n_classes", ")", ":", "\n", "        ", "r", "[", "label_mask", "==", "ll", "]", "=", "label_colours", "[", "ll", ",", "0", "]", "\n", "g", "[", "label_mask", "==", "ll", "]", "=", "label_colours", "[", "ll", ",", "1", "]", "\n", "b", "[", "label_mask", "==", "ll", "]", "=", "label_colours", "[", "ll", ",", "2", "]", "\n", "", "rgb", "=", "np", ".", "zeros", "(", "(", "label_mask", ".", "shape", "[", "0", "]", ",", "label_mask", ".", "shape", "[", "1", "]", ",", "3", ")", ")", "\n", "rgb", "[", ":", ",", ":", ",", "0", "]", "=", "r", "/", "255.0", "\n", "rgb", "[", ":", ",", ":", ",", "1", "]", "=", "g", "/", "255.0", "\n", "rgb", "[", ":", ",", ":", ",", "2", "]", "=", "b", "/", "255.0", "\n", "if", "plot", ":", "\n", "        ", "plt", ".", "imshow", "(", "rgb", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.dataloaders.utils.encode_segmap": [[51, 66], ["mask.astype.astype", "numpy.zeros", "enumerate", "label_mask.astype.astype", "utils.get_pascal_labels", "numpy.where", "numpy.all"], "function", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.dataloaders.utils.get_pascal_labels"], ["", "", "def", "encode_segmap", "(", "mask", ")", ":", "\n", "    ", "\"\"\"Encode segmentation label images as pascal classes\n    Args:\n        mask (np.ndarray): raw segmentation label image of dimension\n          (M, N, 3), in which the Pascal classes are encoded as colours.\n    Returns:\n        (np.ndarray): class map with dimensions (M,N), where the value at\n        a given location is the integer denoting the class index.\n    \"\"\"", "\n", "mask", "=", "mask", ".", "astype", "(", "int", ")", "\n", "label_mask", "=", "np", ".", "zeros", "(", "(", "mask", ".", "shape", "[", "0", "]", ",", "mask", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "np", ".", "int16", ")", "\n", "for", "ii", ",", "label", "in", "enumerate", "(", "get_pascal_labels", "(", ")", ")", ":", "\n", "        ", "label_mask", "[", "np", ".", "where", "(", "np", ".", "all", "(", "mask", "==", "label", ",", "axis", "=", "-", "1", ")", ")", "[", ":", "2", "]", "]", "=", "ii", "\n", "", "label_mask", "=", "label_mask", ".", "astype", "(", "int", ")", "\n", "return", "label_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.dataloaders.utils.get_cityscapes_labels": [[68, 89], ["numpy.array"], "function", ["None"], ["", "def", "get_cityscapes_labels", "(", ")", ":", "\n", "    ", "return", "np", ".", "array", "(", "[", "\n", "[", "128", ",", "64", ",", "128", "]", ",", "\n", "[", "244", ",", "35", ",", "232", "]", ",", "\n", "[", "70", ",", "70", ",", "70", "]", ",", "\n", "[", "102", ",", "102", ",", "156", "]", ",", "\n", "[", "190", ",", "153", ",", "153", "]", ",", "\n", "[", "153", ",", "153", ",", "153", "]", ",", "\n", "[", "250", ",", "170", ",", "30", "]", ",", "\n", "[", "220", ",", "220", ",", "0", "]", ",", "\n", "[", "107", ",", "142", ",", "35", "]", ",", "\n", "[", "152", ",", "251", ",", "152", "]", ",", "\n", "[", "0", ",", "130", ",", "180", "]", ",", "\n", "[", "220", ",", "20", ",", "60", "]", ",", "\n", "[", "255", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "142", "]", ",", "\n", "[", "0", ",", "0", ",", "70", "]", ",", "\n", "[", "0", ",", "60", ",", "100", "]", ",", "\n", "[", "0", ",", "80", ",", "100", "]", ",", "\n", "[", "0", ",", "0", ",", "230", "]", ",", "\n", "[", "119", ",", "11", ",", "32", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.dataloaders.utils.get_pascal_labels": [[91, 102], ["numpy.asarray"], "function", ["None"], ["", "def", "get_pascal_labels", "(", ")", ":", "\n", "    ", "\"\"\"Load the mapping that associates pascal classes with label colors\n    Returns:\n        np.ndarray with dimensions (21, 3)\n    \"\"\"", "\n", "return", "np", ".", "asarray", "(", "[", "[", "0", ",", "0", ",", "0", "]", ",", "[", "128", ",", "0", ",", "0", "]", ",", "[", "0", ",", "128", ",", "0", "]", ",", "[", "128", ",", "128", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "128", "]", ",", "[", "128", ",", "0", ",", "128", "]", ",", "[", "0", ",", "128", ",", "128", "]", ",", "[", "128", ",", "128", ",", "128", "]", ",", "\n", "[", "64", ",", "0", ",", "0", "]", ",", "[", "192", ",", "0", ",", "0", "]", ",", "[", "64", ",", "128", ",", "0", "]", ",", "[", "192", ",", "128", ",", "0", "]", ",", "\n", "[", "64", ",", "0", ",", "128", "]", ",", "[", "192", ",", "0", ",", "128", "]", ",", "[", "64", ",", "128", ",", "128", "]", ",", "[", "192", ",", "128", ",", "128", "]", ",", "\n", "[", "0", ",", "64", ",", "0", "]", ",", "[", "128", ",", "64", ",", "0", "]", ",", "[", "0", ",", "192", ",", "0", "]", ",", "[", "128", ",", "192", ",", "0", "]", ",", "\n", "[", "0", ",", "64", ",", "128", "]", "]", ")", "", "", ""]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.coco.COCOSegmentation.__init__": [[20, 38], ["mypath.Path.db_root_dir", "torch.utils.data.Dataset.__init__", "os.path.join", "os.path.join", "os.path.join", "pycocotools.coco.COCO", "os.path.exists", "torch.load", "list", "coco.COCOSegmentation._preprocess", "coco.COCOSegmentation.coco.imgs.keys"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.Segmentation.mypath.Path.db_root_dir", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.Distiller.__init__", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.coco.COCOSegmentation._preprocess"], ["def", "__init__", "(", "self", ",", "\n", "args", ",", "\n", "base_dir", "=", "Path", ".", "db_root_dir", "(", "'coco'", ")", ",", "\n", "split", "=", "'train'", ",", "\n", "year", "=", "'2017'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "ann_file", "=", "os", ".", "path", ".", "join", "(", "base_dir", ",", "'annotations/instances_{}{}.json'", ".", "format", "(", "split", ",", "year", ")", ")", "\n", "ids_file", "=", "os", ".", "path", ".", "join", "(", "base_dir", ",", "'annotations/{}_ids_{}.pth'", ".", "format", "(", "split", ",", "year", ")", ")", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "base_dir", ",", "'images/{}{}'", ".", "format", "(", "split", ",", "year", ")", ")", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "coco", "=", "COCO", "(", "ann_file", ")", "\n", "self", ".", "coco_mask", "=", "mask", "\n", "if", "os", ".", "path", ".", "exists", "(", "ids_file", ")", ":", "\n", "            ", "self", ".", "ids", "=", "torch", ".", "load", "(", "ids_file", ")", "\n", "", "else", ":", "\n", "            ", "ids", "=", "list", "(", "self", ".", "coco", ".", "imgs", ".", "keys", "(", ")", ")", "\n", "self", ".", "ids", "=", "self", ".", "_preprocess", "(", "ids", ",", "ids_file", ")", "\n", "", "self", ".", "args", "=", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.coco.COCOSegmentation.__getitem__": [[39, 47], ["coco.COCOSegmentation._make_img_gt_point_pair", "coco.COCOSegmentation.transform_tr", "coco.COCOSegmentation.transform_val"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.pascal.VOCSegmentation._make_img_gt_point_pair", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.pascal.VOCSegmentation.transform_tr", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.pascal.VOCSegmentation.transform_val"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "_img", ",", "_target", "=", "self", ".", "_make_img_gt_point_pair", "(", "index", ")", "\n", "sample", "=", "{", "'image'", ":", "_img", ",", "'label'", ":", "_target", "}", "\n", "\n", "if", "self", ".", "split", "==", "\"train\"", ":", "\n", "            ", "return", "self", ".", "transform_tr", "(", "sample", ")", "\n", "", "elif", "self", ".", "split", "==", "'val'", ":", "\n", "            ", "return", "self", ".", "transform_val", "(", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.coco.COCOSegmentation._make_img_gt_point_pair": [[48, 59], ["PIL.Image.open().convert", "coco.loadAnns", "PIL.Image.fromarray", "coco.loadImgs", "coco.getAnnIds", "coco.COCOSegmentation._gen_seg_mask", "PIL.Image.open", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.coco.COCOSegmentation._gen_seg_mask"], ["", "", "def", "_make_img_gt_point_pair", "(", "self", ",", "index", ")", ":", "\n", "        ", "coco", "=", "self", ".", "coco", "\n", "img_id", "=", "self", ".", "ids", "[", "index", "]", "\n", "img_metadata", "=", "coco", ".", "loadImgs", "(", "img_id", ")", "[", "0", "]", "\n", "path", "=", "img_metadata", "[", "'file_name'", "]", "\n", "_img", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "path", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "cocotarget", "=", "coco", ".", "loadAnns", "(", "coco", ".", "getAnnIds", "(", "imgIds", "=", "img_id", ")", ")", "\n", "_target", "=", "Image", ".", "fromarray", "(", "self", ".", "_gen_seg_mask", "(", "\n", "cocotarget", ",", "img_metadata", "[", "'height'", "]", ",", "img_metadata", "[", "'width'", "]", ")", ")", "\n", "\n", "return", "_img", ",", "_target", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.coco.COCOSegmentation._preprocess": [[60, 79], ["print", "tqdm.trange", "print", "torch.save", "len", "coco.COCOSegmentation.coco.loadAnns", "coco.COCOSegmentation._gen_seg_mask", "tqdm.trange.set_description", "len", "coco.COCOSegmentation.coco.getAnnIds", "coco.COCOSegmentation.coco.loadImgs", "new_ids.append", "len", "len"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.coco.COCOSegmentation._gen_seg_mask"], ["", "def", "_preprocess", "(", "self", ",", "ids", ",", "ids_file", ")", ":", "\n", "        ", "print", "(", "\"Preprocessing mask, this will take a while. \"", "+", "\"But don't worry, it only run once for each split.\"", ")", "\n", "tbar", "=", "trange", "(", "len", "(", "ids", ")", ")", "\n", "new_ids", "=", "[", "]", "\n", "for", "i", "in", "tbar", ":", "\n", "            ", "img_id", "=", "ids", "[", "i", "]", "\n", "cocotarget", "=", "self", ".", "coco", ".", "loadAnns", "(", "self", ".", "coco", ".", "getAnnIds", "(", "imgIds", "=", "img_id", ")", ")", "\n", "img_metadata", "=", "self", ".", "coco", ".", "loadImgs", "(", "img_id", ")", "[", "0", "]", "\n", "mask", "=", "self", ".", "_gen_seg_mask", "(", "cocotarget", ",", "img_metadata", "[", "'height'", "]", ",", "\n", "img_metadata", "[", "'width'", "]", ")", "\n", "# more than 1k pixels", "\n", "if", "(", "mask", ">", "0", ")", ".", "sum", "(", ")", ">", "1000", ":", "\n", "                ", "new_ids", ".", "append", "(", "img_id", ")", "\n", "", "tbar", ".", "set_description", "(", "'Doing: {}/{}, got {} qualified images'", ".", "format", "(", "i", ",", "len", "(", "ids", ")", ",", "len", "(", "new_ids", ")", ")", ")", "\n", "", "print", "(", "'Found number of qualified images: '", ",", "len", "(", "new_ids", ")", ")", "\n", "torch", ".", "save", "(", "new_ids", ",", "ids_file", ")", "\n", "return", "new_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.coco.COCOSegmentation._gen_seg_mask": [[80, 96], ["numpy.zeros", "coco_mask.frPyObjects", "coco_mask.decode", "coco.COCOSegmentation.CAT_LIST.index", "len", "numpy.sum"], "methods", ["None"], ["", "def", "_gen_seg_mask", "(", "self", ",", "target", ",", "h", ",", "w", ")", ":", "\n", "        ", "mask", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "coco_mask", "=", "self", ".", "coco_mask", "\n", "for", "instance", "in", "target", ":", "\n", "            ", "rle", "=", "coco_mask", ".", "frPyObjects", "(", "instance", "[", "'segmentation'", "]", ",", "h", ",", "w", ")", "\n", "m", "=", "coco_mask", ".", "decode", "(", "rle", ")", "\n", "cat", "=", "instance", "[", "'category_id'", "]", "\n", "if", "cat", "in", "self", ".", "CAT_LIST", ":", "\n", "                ", "c", "=", "self", ".", "CAT_LIST", ".", "index", "(", "cat", ")", "\n", "", "else", ":", "\n", "                ", "continue", "\n", "", "if", "len", "(", "m", ".", "shape", ")", "<", "3", ":", "\n", "                ", "mask", "[", ":", ",", ":", "]", "+=", "(", "mask", "==", "0", ")", "*", "(", "m", "*", "c", ")", "\n", "", "else", ":", "\n", "                ", "mask", "[", ":", ",", ":", "]", "+=", "(", "mask", "==", "0", ")", "*", "(", "(", "(", "np", ".", "sum", "(", "m", ",", "axis", "=", "2", ")", ")", ">", "0", ")", "*", "c", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.coco.COCOSegmentation.transform_tr": [[97, 106], ["torchvision.transforms.Compose", "torchvision.transforms.Compose.", "dataloaders.custom_transforms.RandomHorizontalFlip", "dataloaders.custom_transforms.RandomScaleCrop", "dataloaders.custom_transforms.RandomGaussianBlur", "dataloaders.custom_transforms.Normalize", "dataloaders.custom_transforms.ToTensor"], "methods", ["None"], ["", "def", "transform_tr", "(", "self", ",", "sample", ")", ":", "\n", "        ", "composed_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "tr", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "tr", ".", "RandomScaleCrop", "(", "base_size", "=", "self", ".", "args", ".", "base_size", ",", "crop_size", "=", "self", ".", "args", ".", "crop_size", ")", ",", "\n", "tr", ".", "RandomGaussianBlur", "(", ")", ",", "\n", "tr", ".", "Normalize", "(", "mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ",", "\n", "tr", ".", "ToTensor", "(", ")", "]", ")", "\n", "\n", "return", "composed_transforms", "(", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.coco.COCOSegmentation.transform_val": [[107, 115], ["torchvision.transforms.Compose", "torchvision.transforms.Compose.", "dataloaders.custom_transforms.FixedResize", "dataloaders.custom_transforms.Normalize", "dataloaders.custom_transforms.ToTensor"], "methods", ["None"], ["", "def", "transform_val", "(", "self", ",", "sample", ")", ":", "\n", "\n", "        ", "composed_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "tr", ".", "FixedResize", "(", "size", "=", "self", ".", "args", ".", "crop_size", ")", ",", "\n", "tr", ".", "Normalize", "(", "mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ",", "\n", "tr", ".", "ToTensor", "(", ")", "]", ")", "\n", "\n", "return", "composed_transforms", "(", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.coco.COCOSegmentation.__len__": [[117, 119], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.sbd.SBDSegmentation.__init__": [[16, 62], ["mypath.Path.db_root_dir", "torch.Dataset.__init__", "os.path.join", "os.path.join", "os.path.join", "isinstance", "print", "split.sort", "len", "len", "open", "f.read().splitlines", "os.path.join", "os.path.join", "os.path.isfile", "os.path.isfile", "sbd.SBDSegmentation.im_ids.append", "sbd.SBDSegmentation.images.append", "sbd.SBDSegmentation.categories.append", "len", "os.path.join", "f.read"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.Segmentation.mypath.Path.db_root_dir", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.Distiller.__init__"], ["def", "__init__", "(", "self", ",", "\n", "args", ",", "\n", "base_dir", "=", "Path", ".", "db_root_dir", "(", "'sbd'", ")", ",", "\n", "split", "=", "'train'", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        :param base_dir: path to VOC dataset directory\n        :param split: train/val\n        :param transform: transform to apply\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_base_dir", "=", "base_dir", "\n", "self", ".", "_dataset_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_base_dir", ",", "'dataset'", ")", "\n", "self", ".", "_image_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_dataset_dir", ",", "'img'", ")", "\n", "self", ".", "_cat_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_dataset_dir", ",", "'cls'", ")", "\n", "\n", "\n", "if", "isinstance", "(", "split", ",", "str", ")", ":", "\n", "            ", "self", ".", "split", "=", "[", "split", "]", "\n", "", "else", ":", "\n", "            ", "split", ".", "sort", "(", ")", "\n", "self", ".", "split", "=", "split", "\n", "\n", "", "self", ".", "args", "=", "args", "\n", "\n", "# Get list of all images from the split and check that the files exist", "\n", "self", ".", "im_ids", "=", "[", "]", "\n", "self", ".", "images", "=", "[", "]", "\n", "self", ".", "categories", "=", "[", "]", "\n", "for", "splt", "in", "self", ".", "split", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "_dataset_dir", ",", "splt", "+", "'.txt'", ")", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "lines", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "\n", "", "for", "line", "in", "lines", ":", "\n", "                ", "_image", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_image_dir", ",", "line", "+", "\".jpg\"", ")", "\n", "_categ", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_cat_dir", ",", "line", "+", "\".mat\"", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "_image", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "_categ", ")", "\n", "self", ".", "im_ids", ".", "append", "(", "line", ")", "\n", "self", ".", "images", ".", "append", "(", "_image", ")", "\n", "self", ".", "categories", ".", "append", "(", "_categ", ")", "\n", "\n", "", "", "assert", "(", "len", "(", "self", ".", "images", ")", "==", "len", "(", "self", ".", "categories", ")", ")", "\n", "\n", "# Display stats", "\n", "print", "(", "'Number of images: {:d}'", ".", "format", "(", "len", "(", "self", ".", "images", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.sbd.SBDSegmentation.__getitem__": [[64, 69], ["sbd.SBDSegmentation._make_img_gt_point_pair", "sbd.SBDSegmentation.transform"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.pascal.VOCSegmentation._make_img_gt_point_pair", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.sbd.SBDSegmentation.transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "_img", ",", "_target", "=", "self", ".", "_make_img_gt_point_pair", "(", "index", ")", "\n", "sample", "=", "{", "'image'", ":", "_img", ",", "'label'", ":", "_target", "}", "\n", "\n", "return", "self", ".", "transform", "(", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.sbd.SBDSegmentation.__len__": [[70, 72], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.sbd.SBDSegmentation._make_img_gt_point_pair": [[73, 78], ["PIL.Image.open().convert", "PIL.Image.fromarray", "PIL.Image.open", "scipy.io.loadmat"], "methods", ["None"], ["", "def", "_make_img_gt_point_pair", "(", "self", ",", "index", ")", ":", "\n", "        ", "_img", "=", "Image", ".", "open", "(", "self", ".", "images", "[", "index", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "_target", "=", "Image", ".", "fromarray", "(", "scipy", ".", "io", ".", "loadmat", "(", "self", ".", "categories", "[", "index", "]", ")", "[", "\"GTcls\"", "]", "[", "0", "]", "[", "'Segmentation'", "]", "[", "0", "]", ")", "\n", "\n", "return", "_img", ",", "_target", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.sbd.SBDSegmentation.transform": [[79, 88], ["torchvision.transforms.Compose", "torchvision.transforms.Compose.", "dataloaders.custom_transforms.RandomHorizontalFlip", "dataloaders.custom_transforms.RandomScaleCrop", "dataloaders.custom_transforms.RandomGaussianBlur", "dataloaders.custom_transforms.Normalize", "dataloaders.custom_transforms.ToTensor"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "sample", ")", ":", "\n", "        ", "composed_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "tr", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "tr", ".", "RandomScaleCrop", "(", "base_size", "=", "self", ".", "args", ".", "base_size", ",", "crop_size", "=", "self", ".", "args", ".", "crop_size", ")", ",", "\n", "tr", ".", "RandomGaussianBlur", "(", ")", ",", "\n", "tr", ".", "Normalize", "(", "mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ",", "\n", "tr", ".", "ToTensor", "(", ")", "]", ")", "\n", "\n", "return", "composed_transforms", "(", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.sbd.SBDSegmentation.__str__": [[90, 92], ["str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'SBDSegmentation(split='", "+", "str", "(", "self", ".", "split", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.combine_dbs.CombineDBs.__init__": [[6, 38], ["enumerate", "print", "enumerate", "combine_dbs.CombineDBs.im_ids.append", "new_im_ids.append", "combine_dbs.CombineDBs.cat_list.append", "combine_dbs.CombineDBs.im_ids.remove"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataloaders", ",", "excluded", "=", "None", ")", ":", "\n", "        ", "self", ".", "dataloaders", "=", "dataloaders", "\n", "self", ".", "excluded", "=", "excluded", "\n", "self", ".", "im_ids", "=", "[", "]", "\n", "\n", "# Combine object lists", "\n", "for", "dl", "in", "dataloaders", ":", "\n", "            ", "for", "elem", "in", "dl", ".", "im_ids", ":", "\n", "                ", "if", "elem", "not", "in", "self", ".", "im_ids", ":", "\n", "                    ", "self", ".", "im_ids", ".", "append", "(", "elem", ")", "\n", "\n", "# Exclude", "\n", "", "", "", "if", "excluded", ":", "\n", "            ", "for", "dl", "in", "excluded", ":", "\n", "                ", "for", "elem", "in", "dl", ".", "im_ids", ":", "\n", "                    ", "if", "elem", "in", "self", ".", "im_ids", ":", "\n", "                        ", "self", ".", "im_ids", ".", "remove", "(", "elem", ")", "\n", "\n", "# Get object pointers", "\n", "", "", "", "", "self", ".", "cat_list", "=", "[", "]", "\n", "self", ".", "im_list", "=", "[", "]", "\n", "new_im_ids", "=", "[", "]", "\n", "num_images", "=", "0", "\n", "for", "ii", ",", "dl", "in", "enumerate", "(", "dataloaders", ")", ":", "\n", "            ", "for", "jj", ",", "curr_im_id", "in", "enumerate", "(", "dl", ".", "im_ids", ")", ":", "\n", "                ", "if", "(", "curr_im_id", "in", "self", ".", "im_ids", ")", "and", "(", "curr_im_id", "not", "in", "new_im_ids", ")", ":", "\n", "                    ", "num_images", "+=", "1", "\n", "new_im_ids", ".", "append", "(", "curr_im_id", ")", "\n", "self", ".", "cat_list", ".", "append", "(", "{", "'db_ii'", ":", "ii", ",", "'cat_ii'", ":", "jj", "}", ")", "\n", "\n", "", "", "", "self", ".", "im_ids", "=", "new_im_ids", "\n", "print", "(", "'Combined number of images: {:d}'", ".", "format", "(", "num_images", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.combine_dbs.CombineDBs.__getitem__": [[39, 49], ["combine_dbs.CombineDBs.dataloaders[].__getitem__", "combine_dbs.CombineDBs.keys", "str"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.pascal.VOCSegmentation.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "_db_ii", "=", "self", ".", "cat_list", "[", "index", "]", "[", "\"db_ii\"", "]", "\n", "_cat_ii", "=", "self", ".", "cat_list", "[", "index", "]", "[", "'cat_ii'", "]", "\n", "sample", "=", "self", ".", "dataloaders", "[", "_db_ii", "]", ".", "__getitem__", "(", "_cat_ii", ")", "\n", "\n", "if", "'meta'", "in", "sample", ".", "keys", "(", ")", ":", "\n", "            ", "sample", "[", "'meta'", "]", "[", "'db'", "]", "=", "str", "(", "self", ".", "dataloaders", "[", "_db_ii", "]", ")", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.combine_dbs.CombineDBs.__len__": [[50, 52], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "cat_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.combine_dbs.CombineDBs.__str__": [[53, 57], ["str", "str", "str", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "include_db", "=", "[", "str", "(", "db", ")", "for", "db", "in", "self", ".", "dataloaders", "]", "\n", "exclude_db", "=", "[", "str", "(", "db", ")", "for", "db", "in", "self", ".", "excluded", "]", "\n", "return", "'Included datasets:'", "+", "str", "(", "include_db", ")", "+", "'\\n'", "+", "'Excluded datasets:'", "+", "str", "(", "exclude_db", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.cityscapes.CityscapesSegmentation.__init__": [[13, 39], ["mypath.Path.db_root_dir", "os.path.join", "os.path.join", "cityscapes.CityscapesSegmentation.recursive_glob", "dict", "print", "zip", "Exception", "range", "len"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.Segmentation.mypath.Path.db_root_dir", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.cityscapes.CityscapesSegmentation.recursive_glob"], ["def", "__init__", "(", "self", ",", "args", ",", "root", "=", "Path", ".", "db_root_dir", "(", "'cityscapes'", ")", ",", "split", "=", "\"train\"", ")", ":", "\n", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "files", "=", "{", "}", "\n", "\n", "self", ".", "images_base", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'leftImg8bit'", ",", "self", ".", "split", ")", "\n", "self", ".", "annotations_base", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'gtFine_trainvaltest'", ",", "'gtFine'", ",", "self", ".", "split", ")", "\n", "\n", "self", ".", "files", "[", "split", "]", "=", "self", ".", "recursive_glob", "(", "rootdir", "=", "self", ".", "images_base", ",", "suffix", "=", "'.png'", ")", "\n", "\n", "self", ".", "void_classes", "=", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "9", ",", "10", ",", "14", ",", "15", ",", "16", ",", "18", ",", "29", ",", "30", ",", "-", "1", "]", "\n", "self", ".", "valid_classes", "=", "[", "7", ",", "8", ",", "11", ",", "12", ",", "13", ",", "17", ",", "19", ",", "20", ",", "21", ",", "22", ",", "23", ",", "24", ",", "25", ",", "26", ",", "27", ",", "28", ",", "31", ",", "32", ",", "33", "]", "\n", "self", ".", "class_names", "=", "[", "'unlabelled'", ",", "'road'", ",", "'sidewalk'", ",", "'building'", ",", "'wall'", ",", "'fence'", ",", "'pole'", ",", "'traffic_light'", ",", "'traffic_sign'", ",", "'vegetation'", ",", "'terrain'", ",", "'sky'", ",", "'person'", ",", "'rider'", ",", "'car'", ",", "'truck'", ",", "'bus'", ",", "'train'", ",", "'motorcycle'", ",", "'bicycle'", "]", "\n", "\n", "self", ".", "ignore_index", "=", "255", "\n", "self", ".", "class_map", "=", "dict", "(", "zip", "(", "self", ".", "valid_classes", ",", "range", "(", "self", ".", "NUM_CLASSES", ")", ")", ")", "\n", "\n", "if", "not", "self", ".", "files", "[", "split", "]", ":", "\n", "            ", "raise", "Exception", "(", "\"No files for split=[%s] found in %s\"", "%", "(", "split", ",", "self", ".", "images_base", ")", ")", "\n", "\n", "", "print", "(", "\"Found %d %s images\"", "%", "(", "len", "(", "self", ".", "files", "[", "split", "]", ")", ",", "split", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.cityscapes.CityscapesSegmentation.__len__": [[40, 42], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", "[", "self", ".", "split", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.cityscapes.CityscapesSegmentation.__getitem__": [[43, 63], ["[].rstrip", "os.path.join", "PIL.Image.open().convert", "numpy.array", "cityscapes.CityscapesSegmentation.encode_segmap", "PIL.Image.fromarray", "PIL.Image.open", "cityscapes.CityscapesSegmentation.transform_tr", "[].rstrip.split", "PIL.Image.open", "cityscapes.CityscapesSegmentation.transform_val", "os.path.basename", "cityscapes.CityscapesSegmentation.transform_ts"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.cityscapes.CityscapesSegmentation.encode_segmap", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.pascal.VOCSegmentation.transform_tr", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.pascal.VOCSegmentation.transform_val", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.cityscapes.CityscapesSegmentation.transform_ts"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "img_path", "=", "self", ".", "files", "[", "self", ".", "split", "]", "[", "index", "]", ".", "rstrip", "(", ")", "\n", "lbl_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "annotations_base", ",", "\n", "img_path", ".", "split", "(", "os", ".", "sep", ")", "[", "-", "2", "]", ",", "\n", "os", ".", "path", ".", "basename", "(", "img_path", ")", "[", ":", "-", "15", "]", "+", "'gtFine_labelIds.png'", ")", "\n", "\n", "_img", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "_tmp", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "lbl_path", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "_tmp", "=", "self", ".", "encode_segmap", "(", "_tmp", ")", "\n", "_target", "=", "Image", ".", "fromarray", "(", "_tmp", ")", "\n", "\n", "sample", "=", "{", "'image'", ":", "_img", ",", "'label'", ":", "_target", "}", "\n", "\n", "if", "self", ".", "split", "==", "'train'", ":", "\n", "            ", "return", "self", ".", "transform_tr", "(", "sample", ")", "\n", "", "elif", "self", ".", "split", "==", "'val'", ":", "\n", "            ", "return", "self", ".", "transform_val", "(", "sample", ")", "\n", "", "elif", "self", ".", "split", "==", "'test'", ":", "\n", "            ", "return", "self", ".", "transform_ts", "(", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.cityscapes.CityscapesSegmentation.encode_segmap": [[64, 71], ["None"], "methods", ["None"], ["", "", "def", "encode_segmap", "(", "self", ",", "mask", ")", ":", "\n", "# Put all void classes to zero", "\n", "        ", "for", "_voidc", "in", "self", ".", "void_classes", ":", "\n", "            ", "mask", "[", "mask", "==", "_voidc", "]", "=", "self", ".", "ignore_index", "\n", "", "for", "_validc", "in", "self", ".", "valid_classes", ":", "\n", "            ", "mask", "[", "mask", "==", "_validc", "]", "=", "self", ".", "class_map", "[", "_validc", "]", "\n", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.cityscapes.CityscapesSegmentation.recursive_glob": [[72, 80], ["os.path.join", "os.walk", "filename.endswith"], "methods", ["None"], ["", "def", "recursive_glob", "(", "self", ",", "rootdir", "=", "'.'", ",", "suffix", "=", "''", ")", ":", "\n", "        ", "\"\"\"Performs recursive glob with given suffix and rootdir\n            :param rootdir is the root directory\n            :param suffix is the suffix to be searched\n        \"\"\"", "\n", "return", "[", "os", ".", "path", ".", "join", "(", "looproot", ",", "filename", ")", "\n", "for", "looproot", ",", "_", ",", "filenames", "in", "os", ".", "walk", "(", "rootdir", ")", "\n", "for", "filename", "in", "filenames", "if", "filename", ".", "endswith", "(", "suffix", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.cityscapes.CityscapesSegmentation.transform_tr": [[81, 90], ["torchvision.transforms.Compose", "torchvision.transforms.Compose.", "dataloaders.custom_transforms.RandomHorizontalFlip", "dataloaders.custom_transforms.RandomScaleCrop", "dataloaders.custom_transforms.RandomGaussianBlur", "dataloaders.custom_transforms.Normalize", "dataloaders.custom_transforms.ToTensor"], "methods", ["None"], ["", "def", "transform_tr", "(", "self", ",", "sample", ")", ":", "\n", "        ", "composed_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "tr", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "tr", ".", "RandomScaleCrop", "(", "base_size", "=", "self", ".", "args", ".", "base_size", ",", "crop_size", "=", "self", ".", "args", ".", "crop_size", ",", "fill", "=", "255", ")", ",", "\n", "tr", ".", "RandomGaussianBlur", "(", ")", ",", "\n", "tr", ".", "Normalize", "(", "mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ",", "\n", "tr", ".", "ToTensor", "(", ")", "]", ")", "\n", "\n", "return", "composed_transforms", "(", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.cityscapes.CityscapesSegmentation.transform_val": [[91, 99], ["torchvision.transforms.Compose", "torchvision.transforms.Compose.", "dataloaders.custom_transforms.FixedResize", "dataloaders.custom_transforms.Normalize", "dataloaders.custom_transforms.ToTensor"], "methods", ["None"], ["", "def", "transform_val", "(", "self", ",", "sample", ")", ":", "\n", "\n", "        ", "composed_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "tr", ".", "FixedResize", "(", "size", "=", "self", ".", "args", ".", "crop_size", ")", ",", "\n", "tr", ".", "Normalize", "(", "mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ",", "\n", "tr", ".", "ToTensor", "(", ")", "]", ")", "\n", "\n", "return", "composed_transforms", "(", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.cityscapes.CityscapesSegmentation.transform_ts": [[100, 108], ["torchvision.transforms.Compose", "torchvision.transforms.Compose.", "dataloaders.custom_transforms.FixedResize", "dataloaders.custom_transforms.Normalize", "dataloaders.custom_transforms.ToTensor"], "methods", ["None"], ["", "def", "transform_ts", "(", "self", ",", "sample", ")", ":", "\n", "\n", "        ", "composed_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "tr", ".", "FixedResize", "(", "size", "=", "self", ".", "args", ".", "crop_size", ")", ",", "\n", "tr", ".", "Normalize", "(", "mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ",", "\n", "tr", ".", "ToTensor", "(", ")", "]", ")", "\n", "\n", "return", "composed_transforms", "(", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.pascal.VOCSegmentation.__init__": [[16, 62], ["mypath.Path.db_root_dir", "torch.utils.data.Dataset.__init__", "os.path.join", "os.path.join", "isinstance", "os.path.join", "print", "split.sort", "enumerate", "len", "len", "open", "f.read().splitlines", "os.path.join", "os.path.join", "os.path.isfile", "os.path.isfile", "pascal.VOCSegmentation.im_ids.append", "pascal.VOCSegmentation.images.append", "pascal.VOCSegmentation.categories.append", "len", "os.path.join", "os.path.join", "f.read"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.Segmentation.mypath.Path.db_root_dir", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.Distiller.__init__"], ["def", "__init__", "(", "self", ",", "\n", "args", ",", "\n", "base_dir", "=", "Path", ".", "db_root_dir", "(", "'pascal'", ")", ",", "\n", "split", "=", "'train'", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        :param base_dir: path to VOC dataset directory\n        :param split: train/val\n        :param transform: transform to apply\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_base_dir", "=", "base_dir", "\n", "self", ".", "_image_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_base_dir", ",", "'JPEGImages'", ")", "\n", "self", ".", "_cat_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_base_dir", ",", "'SegmentationClass'", ")", "\n", "\n", "if", "isinstance", "(", "split", ",", "str", ")", ":", "\n", "            ", "self", ".", "split", "=", "[", "split", "]", "\n", "", "else", ":", "\n", "            ", "split", ".", "sort", "(", ")", "\n", "self", ".", "split", "=", "split", "\n", "\n", "", "self", ".", "args", "=", "args", "\n", "\n", "_splits_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_base_dir", ",", "'ImageSets'", ",", "'Segmentation'", ")", "\n", "\n", "self", ".", "im_ids", "=", "[", "]", "\n", "self", ".", "images", "=", "[", "]", "\n", "self", ".", "categories", "=", "[", "]", "\n", "\n", "for", "splt", "in", "self", ".", "split", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "join", "(", "_splits_dir", ",", "splt", "+", "'.txt'", ")", ")", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "lines", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "\n", "", "for", "ii", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "                ", "_image", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_image_dir", ",", "line", "+", "\".jpg\"", ")", "\n", "_cat", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_cat_dir", ",", "line", "+", "\".png\"", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "_image", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "_cat", ")", "\n", "self", ".", "im_ids", ".", "append", "(", "line", ")", "\n", "self", ".", "images", ".", "append", "(", "_image", ")", "\n", "self", ".", "categories", ".", "append", "(", "_cat", ")", "\n", "\n", "", "", "assert", "(", "len", "(", "self", ".", "images", ")", "==", "len", "(", "self", ".", "categories", ")", ")", "\n", "\n", "# Display stats", "\n", "print", "(", "'Number of images in {}: {:d}'", ".", "format", "(", "split", ",", "len", "(", "self", ".", "images", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.pascal.VOCSegmentation.__len__": [[63, 65], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.pascal.VOCSegmentation.__getitem__": [[67, 76], ["pascal.VOCSegmentation._make_img_gt_point_pair", "pascal.VOCSegmentation.transform_tr", "pascal.VOCSegmentation.transform_val"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.pascal.VOCSegmentation._make_img_gt_point_pair", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.pascal.VOCSegmentation.transform_tr", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.pascal.VOCSegmentation.transform_val"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "_img", ",", "_target", "=", "self", ".", "_make_img_gt_point_pair", "(", "index", ")", "\n", "sample", "=", "{", "'image'", ":", "_img", ",", "'label'", ":", "_target", "}", "\n", "\n", "for", "split", "in", "self", ".", "split", ":", "\n", "            ", "if", "split", "==", "\"train\"", ":", "\n", "                ", "return", "self", ".", "transform_tr", "(", "sample", ")", "\n", "", "elif", "split", "==", "'val'", ":", "\n", "                ", "return", "self", ".", "transform_val", "(", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.pascal.VOCSegmentation._make_img_gt_point_pair": [[78, 83], ["PIL.Image.open().convert", "PIL.Image.open", "PIL.Image.open"], "methods", ["None"], ["", "", "", "def", "_make_img_gt_point_pair", "(", "self", ",", "index", ")", ":", "\n", "        ", "_img", "=", "Image", ".", "open", "(", "self", ".", "images", "[", "index", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "_target", "=", "Image", ".", "open", "(", "self", ".", "categories", "[", "index", "]", ")", "\n", "\n", "return", "_img", ",", "_target", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.pascal.VOCSegmentation.transform_tr": [[84, 93], ["torchvision.transforms.Compose", "torchvision.transforms.Compose.", "dataloaders.custom_transforms.RandomHorizontalFlip", "dataloaders.custom_transforms.RandomScaleCrop", "dataloaders.custom_transforms.RandomGaussianBlur", "dataloaders.custom_transforms.Normalize", "dataloaders.custom_transforms.ToTensor"], "methods", ["None"], ["", "def", "transform_tr", "(", "self", ",", "sample", ")", ":", "\n", "        ", "composed_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "tr", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "tr", ".", "RandomScaleCrop", "(", "base_size", "=", "self", ".", "args", ".", "base_size", ",", "crop_size", "=", "self", ".", "args", ".", "crop_size", ")", ",", "\n", "tr", ".", "RandomGaussianBlur", "(", ")", ",", "\n", "tr", ".", "Normalize", "(", "mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ",", "\n", "tr", ".", "ToTensor", "(", ")", "]", ")", "\n", "\n", "return", "composed_transforms", "(", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.pascal.VOCSegmentation.transform_val": [[94, 102], ["torchvision.transforms.Compose", "torchvision.transforms.Compose.", "dataloaders.custom_transforms.FixedResize", "dataloaders.custom_transforms.Normalize", "dataloaders.custom_transforms.ToTensor"], "methods", ["None"], ["", "def", "transform_val", "(", "self", ",", "sample", ")", ":", "\n", "\n", "        ", "composed_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "tr", ".", "FixedResize", "(", "size", "=", "self", ".", "args", ".", "crop_size", ")", ",", "\n", "tr", ".", "Normalize", "(", "mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ",", "\n", "tr", ".", "ToTensor", "(", ")", "]", ")", "\n", "\n", "return", "composed_transforms", "(", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.datasets.pascal.VOCSegmentation.__str__": [[103, 105], ["str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'VOC2012(split='", "+", "str", "(", "self", ".", "split", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.ImageNet.distiller.Distiller.__init__": [[44, 59], ["torch.Module.__init__", "t_net.get_channel_num", "s_net.get_channel_num", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "t_net.get_bn_before_relu", "enumerate", "distiller.get_margin_from_BN", "distiller.Distiller.register_buffer", "distiller.build_feature_connector", "margin.unsqueeze().unsqueeze().unsqueeze().detach", "zip", "margin.unsqueeze().unsqueeze().unsqueeze", "margin.unsqueeze().unsqueeze", "margin.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.Distiller.__init__", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.WideResNet.get_channel_num", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.WideResNet.get_channel_num", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.WideResNet.get_bn_before_relu", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.get_margin_from_BN", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.build_feature_connector"], ["    ", "def", "__init__", "(", "self", ",", "t_net", ",", "s_net", ")", ":", "\n", "        ", "super", "(", "Distiller", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "t_channels", "=", "t_net", ".", "get_channel_num", "(", ")", "\n", "s_channels", "=", "s_net", ".", "get_channel_num", "(", ")", "\n", "\n", "self", ".", "Connectors", "=", "nn", ".", "ModuleList", "(", "[", "build_feature_connector", "(", "t", ",", "s", ")", "for", "t", ",", "s", "in", "zip", "(", "t_channels", ",", "s_channels", ")", "]", ")", "\n", "\n", "teacher_bns", "=", "t_net", ".", "get_bn_before_relu", "(", ")", "\n", "margins", "=", "[", "get_margin_from_BN", "(", "bn", ")", "for", "bn", "in", "teacher_bns", "]", "\n", "for", "i", ",", "margin", "in", "enumerate", "(", "margins", ")", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'margin%d'", "%", "(", "i", "+", "1", ")", ",", "margin", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "0", ")", ".", "detach", "(", ")", ")", "\n", "\n", "", "self", ".", "t_net", "=", "t_net", "\n", "self", ".", "s_net", "=", "s_net", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.ImageNet.distiller.Distiller.forward": [[60, 73], ["distiller.Distiller.t_net.extract_feature", "distiller.Distiller.s_net.extract_feature", "len", "range", "distiller.distillation_loss", "t_feats[].detach", "getattr"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.WideResNet.extract_feature", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.WideResNet.extract_feature", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.distillation_loss"], ["self", ".", "loss_divider", "=", "[", "8", ",", "4", ",", "2", ",", "1", ",", "1", ",", "4", "*", "4", "]", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "t_feats", ",", "t_out", "=", "self", ".", "t_net", ".", "extract_feature", "(", "x", ")", "\n", "s_feats", ",", "s_out", "=", "self", ".", "s_net", ".", "extract_feature", "(", "x", ")", "\n", "feat_num", "=", "len", "(", "t_feats", ")", "\n", "\n", "loss_distill", "=", "0", "\n", "for", "i", "in", "range", "(", "feat_num", ")", ":", "\n", "            ", "s_feats", "[", "i", "]", "=", "self", ".", "Connectors", "[", "i", "]", "(", "s_feats", "[", "i", "]", ")", "\n", "loss_distill", "+=", "distillation_loss", "(", "s_feats", "[", "i", "]", ",", "t_feats", "[", "i", "]", ".", "detach", "(", ")", ",", "getattr", "(", "self", ",", "'margin%d'", "%", "(", "i", "+", "1", ")", ")", ")", "/", "self", ".", "loss_divider", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.ImageNet.distiller.distillation_loss": [[9, 14], ["torch.max", "torch.max", "torch.max", "torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss.sum"], "function", ["None"], ["def", "distillation_loss", "(", "source", ",", "target", ",", "margin", ")", ":", "\n", "    ", "target", "=", "torch", ".", "max", "(", "target", ",", "margin", ")", "\n", "loss", "=", "torch", ".", "nn", ".", "functional", ".", "mse_loss", "(", "source", ",", "target", ",", "reduction", "=", "\"none\"", ")", "\n", "loss", "=", "loss", "*", "(", "(", "source", ">", "target", ")", "|", "(", "target", ">", "0", ")", ")", ".", "float", "(", ")", "\n", "return", "loss", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.ImageNet.distiller.build_feature_connector": [[15, 28], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "function", ["None"], ["", "def", "build_feature_connector", "(", "t_channel", ",", "s_channel", ")", ":", "\n", "    ", "C", "=", "[", "nn", ".", "Conv2d", "(", "s_channel", ",", "t_channel", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "t_channel", ")", "]", "\n", "\n", "for", "m", "in", "C", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "C", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.ImageNet.distiller.get_margin_from_BN": [[29, 42], ["zip", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "abs", "m.item.item", "abs.item", "scipy.stats.norm.cdf", "margin.append", "margin.append", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "scipy.stats.norm.cdf", "math.sqrt", "math.exp"], "function", ["None"], ["", "def", "get_margin_from_BN", "(", "bn", ")", ":", "\n", "    ", "margin", "=", "[", "]", "\n", "std", "=", "bn", ".", "weight", ".", "data", "\n", "mean", "=", "bn", ".", "bias", ".", "data", "\n", "for", "(", "s", ",", "m", ")", "in", "zip", "(", "std", ",", "mean", ")", ":", "\n", "        ", "s", "=", "abs", "(", "s", ".", "item", "(", ")", ")", "\n", "m", "=", "m", ".", "item", "(", ")", "\n", "if", "norm", ".", "cdf", "(", "-", "m", "/", "s", ")", ">", "0.001", ":", "\n", "            ", "margin", ".", "append", "(", "-", "s", "*", "math", ".", "exp", "(", "-", "(", "m", "/", "s", ")", "**", "2", "/", "2", ")", "/", "math", ".", "sqrt", "(", "2", "*", "math", ".", "pi", ")", "/", "norm", ".", "cdf", "(", "-", "m", "/", "s", ")", "+", "m", ")", "\n", "", "else", ":", "\n", "            ", "margin", ".", "append", "(", "-", "3", "*", "s", ")", "\n", "\n", "", "", "return", "torch", ".", "FloatTensor", "(", "margin", ")", ".", "to", "(", "std", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.ImageNet.utils.Compose.__init__": [[22, 24], ["None"], "methods", ["None"], ["\n", "if", "dataset", "==", "'pascal'", "or", "dataset", "==", "'coco'", ":", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.ImageNet.utils.Compose.__call__": [[25, 29], ["t"], "methods", ["None"], ["        ", "n_classes", "=", "21", "\n", "label_colours", "=", "get_pascal_labels", "(", ")", "\n", "", "elif", "dataset", "==", "'cityscapes'", ":", "\n", "        ", "n_classes", "=", "19", "\n", "label_colours", "=", "get_cityscapes_labels", "(", ")", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.ImageNet.utils.Compose.__repr__": [[30, 37], ["None"], "methods", ["None"], ["", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "r", "=", "label_mask", ".", "copy", "(", ")", "\n", "g", "=", "label_mask", ".", "copy", "(", ")", "\n", "b", "=", "label_mask", ".", "copy", "(", ")", "\n", "for", "ll", "in", "range", "(", "0", ",", "n_classes", ")", ":", "\n", "        ", "r", "[", "label_mask", "==", "ll", "]", "=", "label_colours", "[", "ll", ",", "0", "]", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.ImageNet.utils.Lighting.__init__": [[42, 46], ["torch.Tensor", "torch.Tensor"], "methods", ["None"], ["rgb", "[", ":", ",", ":", ",", "1", "]", "=", "g", "/", "255.0", "\n", "rgb", "[", ":", ",", ":", ",", "2", "]", "=", "b", "/", "255.0", "\n", "if", "plot", ":", "\n", "        ", "plt", ".", "imshow", "(", "rgb", ")", "\n", "plt", ".", "show", "(", ")", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.ImageNet.utils.Lighting.__call__": [[47, 58], ["img.new().resize_().normal_", "utils.Lighting.eigvec.type_as().clone().mul().mul().sum().squeeze", "img.add", "utils.Lighting.view().expand_as", "img.new().resize_", "utils.Lighting.eigvec.type_as().clone().mul().mul().sum", "utils.Lighting.view", "img.new", "utils.Lighting.eigvec.type_as().clone().mul().mul", "utils.Lighting.eigval.view().expand", "utils.Lighting.eigvec.type_as().clone().mul", "img.new().resize_().normal_.view().expand", "utils.Lighting.eigval.view", "utils.Lighting.eigvec.type_as().clone", "img.new().resize_().normal_.view", "utils.Lighting.eigvec.type_as"], "methods", ["None"], ["", "else", ":", "\n", "        ", "return", "rgb", "\n", "\n", "\n", "", "", "def", "encode_segmap", "(", "mask", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.ImageNet.utils.Grayscale.__call__": [[62, 68], ["img.clone", "gs[].mul_().add_().add_", "gs[].copy_", "gs[].copy_", "gs[].mul_().add_", "gs[].mul_"], "methods", ["None"], ["for", "ii", ",", "label", "in", "enumerate", "(", "get_pascal_labels", "(", ")", ")", ":", "\n", "        ", "label_mask", "[", "np", ".", "where", "(", "np", ".", "all", "(", "mask", "==", "label", ",", "axis", "=", "-", "1", ")", ")", "[", ":", "2", "]", "]", "=", "ii", "\n", "", "label_mask", "=", "label_mask", ".", "astype", "(", "int", ")", "\n", "return", "label_mask", "\n", "\n", "\n", "", "def", "get_cityscapes_labels", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.ImageNet.utils.Saturation.__init__": [[72, 74], ["None"], "methods", ["None"], ["[", "70", ",", "70", ",", "70", "]", ",", "\n", "[", "102", ",", "102", ",", "156", "]", ",", "\n", "[", "190", ",", "153", ",", "153", "]", ",", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.ImageNet.utils.Saturation.__call__": [[75, 79], ["random.uniform", "img.lerp", "utils.Grayscale"], "methods", ["None"], ["[", "153", ",", "153", ",", "153", "]", ",", "\n", "[", "250", ",", "170", ",", "30", "]", ",", "\n", "[", "220", ",", "220", ",", "0", "]", ",", "\n", "[", "107", ",", "142", ",", "35", "]", ",", "\n", "[", "152", ",", "251", ",", "152", "]", ",", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.ImageNet.utils.Brightness.__init__": [[83, 85], ["None"], "methods", ["None"], ["[", "0", ",", "0", ",", "142", "]", ",", "\n", "[", "0", ",", "0", ",", "70", "]", ",", "\n", "[", "0", ",", "60", ",", "100", "]", ",", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.ImageNet.utils.Brightness.__call__": [[86, 90], ["img.new().resize_as_().zero_", "random.uniform", "img.lerp", "img.new().resize_as_", "img.new"], "methods", ["None"], ["[", "0", ",", "80", ",", "100", "]", ",", "\n", "[", "0", ",", "0", ",", "230", "]", ",", "\n", "[", "119", ",", "11", ",", "32", "]", "]", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.ImageNet.utils.Contrast.__init__": [[94, 96], ["None"], "methods", ["None"], ["\n", "return", "np", ".", "asarray", "(", "[", "[", "0", ",", "0", ",", "0", "]", ",", "[", "128", ",", "0", ",", "0", "]", ",", "[", "0", ",", "128", ",", "0", "]", ",", "[", "128", ",", "128", ",", "0", "]", ",", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.ImageNet.utils.Contrast.__call__": [[97, 102], ["gs.fill_", "random.uniform", "img.lerp", "utils.Grayscale", "gs.mean"], "methods", ["None"], ["[", "0", ",", "0", ",", "128", "]", ",", "[", "128", ",", "0", ",", "128", "]", ",", "[", "0", ",", "128", ",", "128", "]", ",", "[", "128", ",", "128", ",", "128", "]", ",", "\n", "[", "64", ",", "0", ",", "0", "]", ",", "[", "192", ",", "0", ",", "0", "]", ",", "[", "64", ",", "128", ",", "0", "]", ",", "[", "192", ",", "128", ",", "0", "]", ",", "\n", "[", "64", ",", "0", ",", "128", "]", ",", "[", "192", ",", "0", ",", "128", "]", ",", "[", "64", ",", "128", ",", "128", "]", ",", "[", "192", ",", "128", ",", "128", "]", ",", "\n", "[", "0", ",", "64", ",", "0", "]", ",", "[", "128", ",", "64", ",", "0", "]", ",", "[", "0", ",", "192", ",", "0", "]", ",", "[", "128", ",", "192", ",", "0", "]", ",", "\n", "[", "0", ",", "64", ",", "128", "]", "]", ")", "", "", ""]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.ImageNet.utils.ColorJitter.__init__": [[106, 110], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.ImageNet.utils.ColorJitter.__call__": [[111, 124], ["random.shuffle", "utils.Compose", "Compose.", "utils.ColorJitter.transforms.append", "utils.ColorJitter.transforms.append", "utils.ColorJitter.transforms.append", "utils.Brightness", "utils.Contrast", "utils.Saturation"], "methods", ["None"], []], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.ResNet.BasicBlock.__init__": [[16, 26], ["torch.Module.__init__", "ResNet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "ResNet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.Distiller.__init__", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.PyramidNet.conv3x3", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.PyramidNet.conv3x3"], ["'resnet101'", ":", "'https://download.pytorch.org/models/resnet101-5d3b4d8f.pth'", ",", "\n", "'resnet152'", ":", "'https://download.pytorch.org/models/resnet152-b121ed2d.pth'", ",", "\n", "}", "\n", "\n", "\n", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.ResNet.BasicBlock.forward": [[27, 45], ["torch.relu", "torch.relu", "torch.relu", "ResNet.BasicBlock.conv1", "ResNet.BasicBlock.bn1", "ResNet.BasicBlock.relu", "ResNet.BasicBlock.conv2", "ResNet.BasicBlock.bn2", "ResNet.BasicBlock.downsample"], "methods", ["None"], ["", "class", "BasicBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "1", "\n", "\n", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.ResNet.Bottleneck.__init__": [[50, 63], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.Distiller.__init__"], ["\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "#out = self.relu(out)", "\n", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "Bottleneck", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "4", "\n", "\n", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.ResNet.Bottleneck.forward": [[64, 85], ["torch.relu", "torch.relu", "torch.relu", "ResNet.Bottleneck.conv1", "ResNet.Bottleneck.bn1", "ResNet.Bottleneck.relu", "ResNet.Bottleneck.conv2", "ResNet.Bottleneck.bn2", "ResNet.Bottleneck.relu", "ResNet.Bottleneck.conv3", "ResNet.Bottleneck.bn3", "ResNet.Bottleneck.downsample"], "methods", ["None"], ["        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.ResNet.ResNet.__init__": [[88, 115], ["torch.Module.__init__", "print", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "ResNet.ResNet._make_layer", "ResNet.ResNet._make_layer", "ResNet.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "ResNet.ResNet.modules", "int", "int", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.Distiller.__init__", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.NetworkBlock._make_layer"], ["out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "#out = self.relu(out)", "\n", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "ResNet", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.ResNet.ResNet._make_layer": [[116, 132], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.ResNet.ResNet.forward": [[133, 148], ["ResNet.ResNet.conv1", "ResNet.ResNet.bn1", "ResNet.ResNet.layer1", "ResNet.ResNet.layer2", "ResNet.ResNet.layer3", "torch.relu", "torch.relu", "torch.relu", "ResNet.ResNet.avgpool", "ResNet.ResNet.view", "ResNet.ResNet.fc", "ResNet.ResNet.size"], "methods", ["None"], ["\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.ResNet.ResNet.get_bn_before_relu": [[149, 162], ["isinstance", "isinstance", "print"], "methods", ["None"], ["x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "layer4", "(", "x", ")", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n", "", "def", "get_bn_before_relu", "(", "self", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "layer1", "[", "0", "]", ",", "Bottleneck", ")", ":", "\n", "            ", "bn1", "=", "self", ".", "layer1", "[", "-", "1", "]", ".", "bn3", "\n", "bn2", "=", "self", ".", "layer2", "[", "-", "1", "]", ".", "bn3", "\n", "bn3", "=", "self", ".", "layer3", "[", "-", "1", "]", ".", "bn3", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.ResNet.ResNet.get_channel_num": [[163, 166], ["None"], "methods", ["None"], ["bn4", "=", "self", ".", "layer4", "[", "-", "1", "]", ".", "bn3", "\n", "", "elif", "isinstance", "(", "self", ".", "layer1", "[", "0", "]", ",", "BasicBlock", ")", ":", "\n", "            ", "bn1", "=", "self", ".", "layer1", "[", "-", "1", "]", ".", "bn2", "\n", "bn2", "=", "self", ".", "layer2", "[", "-", "1", "]", ".", "bn2", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.ResNet.ResNet.extract_feature": [[167, 187], ["ResNet.ResNet.conv1", "ResNet.ResNet.bn1", "ResNet.ResNet.layer1", "ResNet.ResNet.layer2", "ResNet.ResNet.layer3", "torch.relu", "torch.relu", "torch.relu", "ResNet.ResNet.avgpool", "x.view.view.view", "ResNet.ResNet.fc", "x.view.view.size", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["bn3", "=", "self", ".", "layer3", "[", "-", "1", "]", ".", "bn2", "\n", "bn4", "=", "self", ".", "layer4", "[", "-", "1", "]", ".", "bn2", "\n", "", "else", ":", "\n", "            ", "print", "(", "'ResNet unknown block error !!!'", ")", "\n", "\n", "", "return", "[", "bn1", ",", "bn2", ",", "bn3", ",", "bn4", "]", "\n", "\n", "", "def", "get_channel_num", "(", "self", ")", ":", "\n", "\n", "        ", "return", "[", "256", ",", "512", ",", "1024", ",", "2048", "]", "\n", "\n", "", "def", "extract_feature", "(", "self", ",", "x", ",", "preReLU", "=", "False", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "feat1", "=", "self", ".", "layer1", "(", "x", ")", "\n", "feat2", "=", "self", ".", "layer2", "(", "feat1", ")", "\n", "feat3", "=", "self", ".", "layer3", "(", "feat2", ")", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.ResNet.conv3x3": [[7, 11], ["torch.Conv2d"], "function", ["None"], ["\n", "__all__", "=", "[", "'ResNet'", ",", "'resnet18'", ",", "'resnet34'", ",", "'resnet50'", ",", "'resnet101'", ",", "\n", "'resnet152'", "]", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.ResNet.resnet18": [[203, 212], ["ResNet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "resnet18", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.ResNet.resnet34": [[214, 223], ["ResNet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.ResNet.resnet50": [[225, 234], ["ResNet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.ResNet.resnet101": [[236, 245], ["ResNet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.ResNet.resnet152": [[247, 256], ["ResNet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", ")", "\n", "", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.MobileNet.MobileNet.__init__": [[10, 49], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "MobileNet.MobileNet.__init__.conv_bn"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.Distiller.__init__", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.backbone.mobilenet.conv_bn"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MobileNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "def", "conv_bn", "(", "inp", ",", "oup", ",", "stride", ")", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "oup", ",", "3", ",", "stride", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "", "def", "conv_dw", "(", "inp", ",", "oup", ",", "stride", ")", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "inp", ",", "3", ",", "stride", ",", "1", ",", "groups", "=", "inp", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "inp", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "conv_bn", "(", "3", ",", "32", ",", "2", ")", ",", "\n", "conv_dw", "(", "32", ",", "64", ",", "1", ")", ",", "\n", "conv_dw", "(", "64", ",", "128", ",", "2", ")", ",", "\n", "conv_dw", "(", "128", ",", "128", ",", "1", ")", ",", "\n", "conv_dw", "(", "128", ",", "256", ",", "2", ")", ",", "\n", "conv_dw", "(", "256", ",", "256", ",", "1", ")", ",", "\n", "conv_dw", "(", "256", ",", "512", ",", "2", ")", ",", "\n", "conv_dw", "(", "512", ",", "512", ",", "1", ")", ",", "\n", "conv_dw", "(", "512", ",", "512", ",", "1", ")", ",", "\n", "conv_dw", "(", "512", ",", "512", ",", "1", ")", ",", "\n", "conv_dw", "(", "512", ",", "512", ",", "1", ")", ",", "\n", "conv_dw", "(", "512", ",", "512", ",", "1", ")", ",", "\n", "conv_dw", "(", "512", ",", "1024", ",", "2", ")", ",", "\n", "conv_dw", "(", "1024", ",", "1024", ",", "1", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "7", ")", ",", "\n", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "1024", ",", "1000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.MobileNet.MobileNet.forward": [[50, 55], ["MobileNet.MobileNet.model", "MobileNet.MobileNet.view", "MobileNet.MobileNet.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "model", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "1024", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.MobileNet.MobileNet.get_bn_before_relu": [[56, 63], ["None"], "methods", ["None"], ["", "def", "get_bn_before_relu", "(", "self", ")", ":", "\n", "        ", "bn1", "=", "self", ".", "model", "[", "3", "]", "[", "-", "2", "]", "\n", "bn2", "=", "self", ".", "model", "[", "5", "]", "[", "-", "2", "]", "\n", "bn3", "=", "self", ".", "model", "[", "11", "]", "[", "-", "2", "]", "\n", "bn4", "=", "self", ".", "model", "[", "13", "]", "[", "-", "2", "]", "\n", "\n", "return", "[", "bn1", ",", "bn2", ",", "bn3", ",", "bn4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.MobileNet.MobileNet.get_channel_num": [[64, 67], ["None"], "methods", ["None"], ["", "def", "get_channel_num", "(", "self", ")", ":", "\n", "\n", "        ", "return", "[", "128", ",", "256", ",", "512", ",", "1024", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.MobileNet.MobileNet.extract_feature": [[68, 86], ["MobileNet.MobileNet.view", "MobileNet.MobileNet.fc", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "extract_feature", "(", "self", ",", "x", ",", "preReLU", "=", "False", ")", ":", "\n", "\n", "        ", "feat1", "=", "self", ".", "model", "[", "3", "]", "[", ":", "-", "1", "]", "(", "self", ".", "model", "[", "0", ":", "3", "]", "(", "x", ")", ")", "\n", "feat2", "=", "self", ".", "model", "[", "5", "]", "[", ":", "-", "1", "]", "(", "self", ".", "model", "[", "4", ":", "5", "]", "(", "F", ".", "relu", "(", "feat1", ")", ")", ")", "\n", "feat3", "=", "self", ".", "model", "[", "11", "]", "[", ":", "-", "1", "]", "(", "self", ".", "model", "[", "6", ":", "11", "]", "(", "F", ".", "relu", "(", "feat2", ")", ")", ")", "\n", "feat4", "=", "self", ".", "model", "[", "13", "]", "[", ":", "-", "1", "]", "(", "self", ".", "model", "[", "12", ":", "13", "]", "(", "F", ".", "relu", "(", "feat3", ")", ")", ")", "\n", "\n", "out", "=", "self", ".", "model", "[", "14", "]", "(", "F", ".", "relu", "(", "feat4", ")", ")", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "1024", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "\n", "if", "not", "preReLU", ":", "\n", "            ", "feat1", "=", "F", ".", "relu", "(", "feat1", ")", "\n", "feat2", "=", "F", ".", "relu", "(", "feat2", ")", "\n", "feat3", "=", "F", ".", "relu", "(", "feat3", ")", "\n", "feat4", "=", "F", ".", "relu", "(", "feat4", ")", "\n", "\n", "", "return", "[", "feat1", ",", "feat2", ",", "feat3", ",", "feat4", "]", ",", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.PyramidNet.BasicBlock.__init__": [[16, 26], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "PyramidNet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "PyramidNet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.Distiller.__init__", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.PyramidNet.conv3x3", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.PyramidNet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "inplanes", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.PyramidNet.BasicBlock.forward": [[27, 53], ["PyramidNet.BasicBlock.bn1", "PyramidNet.BasicBlock.conv1", "PyramidNet.BasicBlock.bn2", "PyramidNet.BasicBlock.relu", "PyramidNet.BasicBlock.conv2", "PyramidNet.BasicBlock.bn3", "PyramidNet.BasicBlock.downsample", "PyramidNet.BasicBlock.size", "PyramidNet.BasicBlock.size", "PyramidNet.BasicBlock.size", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PyramidNet.BasicBlock.size", "PyramidNet.BasicBlock.size", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "out", "=", "self", ".", "bn1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "shortcut", "=", "self", ".", "downsample", "(", "x", ")", "\n", "featuremap_size", "=", "shortcut", ".", "size", "(", ")", "[", "2", ":", "4", "]", "\n", "", "else", ":", "\n", "            ", "shortcut", "=", "x", "\n", "featuremap_size", "=", "out", ".", "size", "(", ")", "[", "2", ":", "4", "]", "\n", "\n", "", "batch_size", "=", "out", ".", "size", "(", ")", "[", "0", "]", "\n", "residual_channel", "=", "out", ".", "size", "(", ")", "[", "1", "]", "\n", "shortcut_channel", "=", "shortcut", ".", "size", "(", ")", "[", "1", "]", "\n", "\n", "if", "residual_channel", "!=", "shortcut_channel", ":", "\n", "            ", "padding", "=", "torch", ".", "autograd", ".", "Variable", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "batch_size", ",", "residual_channel", "-", "shortcut_channel", ",", "featuremap_size", "[", "0", "]", ",", "featuremap_size", "[", "1", "]", ")", ".", "fill_", "(", "0", ")", ")", "\n", "out", "+=", "torch", ".", "cat", "(", "(", "shortcut", ",", "padding", ")", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "out", "+=", "shortcut", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.PyramidNet.Bottleneck.__init__": [[58, 71], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.Distiller.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "reduction", "=", "16", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "inplanes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "(", "planes", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "groups", "=", "1", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "(", "planes", ")", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "(", "planes", ")", ",", "planes", "*", "Bottleneck", ".", "outchannel_ratio", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "Bottleneck", ".", "outchannel_ratio", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.PyramidNet.Bottleneck.forward": [[72, 104], ["PyramidNet.Bottleneck.bn1", "PyramidNet.Bottleneck.conv1", "PyramidNet.Bottleneck.bn2", "PyramidNet.Bottleneck.relu", "PyramidNet.Bottleneck.conv2", "PyramidNet.Bottleneck.bn3", "PyramidNet.Bottleneck.relu", "PyramidNet.Bottleneck.conv3", "PyramidNet.Bottleneck.bn4", "PyramidNet.Bottleneck.downsample", "PyramidNet.Bottleneck.size", "PyramidNet.Bottleneck.size", "PyramidNet.Bottleneck.size", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PyramidNet.Bottleneck.size", "PyramidNet.Bottleneck.size", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "out", "=", "self", ".", "bn1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "bn4", "(", "out", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "shortcut", "=", "self", ".", "downsample", "(", "x", ")", "\n", "featuremap_size", "=", "shortcut", ".", "size", "(", ")", "[", "2", ":", "4", "]", "\n", "", "else", ":", "\n", "            ", "shortcut", "=", "x", "\n", "featuremap_size", "=", "out", ".", "size", "(", ")", "[", "2", ":", "4", "]", "\n", "\n", "", "batch_size", "=", "out", ".", "size", "(", ")", "[", "0", "]", "\n", "residual_channel", "=", "out", ".", "size", "(", ")", "[", "1", "]", "\n", "shortcut_channel", "=", "shortcut", ".", "size", "(", ")", "[", "1", "]", "\n", "\n", "if", "residual_channel", "!=", "shortcut_channel", ":", "\n", "            ", "padding", "=", "torch", ".", "autograd", ".", "Variable", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "batch_size", ",", "residual_channel", "-", "shortcut_channel", ",", "featuremap_size", "[", "0", "]", ",", "featuremap_size", "[", "1", "]", ")", ".", "fill_", "(", "0", ")", ")", "\n", "out", "+=", "torch", ".", "cat", "(", "(", "shortcut", ",", "padding", ")", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "out", "+=", "shortcut", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.PyramidNet.PyramidNet.__init__": [[108, 142], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "PyramidNet.PyramidNet.pyramidal_make_layer", "PyramidNet.PyramidNet.pyramidal_make_layer", "PyramidNet.PyramidNet.pyramidal_make_layer", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "PyramidNet.PyramidNet.modules", "int", "int", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.Distiller.__init__", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.PyramidNet.PyramidNet.pyramidal_make_layer", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.PyramidNet.PyramidNet.pyramidal_make_layer", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.PyramidNet.PyramidNet.pyramidal_make_layer"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "alpha", ",", "num_classes", ",", "bottleneck", "=", "False", ")", ":", "\n", "        ", "super", "(", "PyramidNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "16", "\n", "if", "bottleneck", "==", "True", ":", "\n", "            ", "n", "=", "int", "(", "(", "depth", "-", "2", ")", "/", "9", ")", "\n", "block", "=", "Bottleneck", "\n", "", "else", ":", "\n", "            ", "n", "=", "int", "(", "(", "depth", "-", "2", ")", "/", "6", ")", "\n", "block", "=", "BasicBlock", "\n", "\n", "", "self", ".", "addrate", "=", "alpha", "/", "(", "3", "*", "n", "*", "1.0", ")", "\n", "\n", "self", ".", "input_featuremap_dim", "=", "self", ".", "inplanes", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "input_featuremap_dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "input_featuremap_dim", ")", "\n", "\n", "self", ".", "featuremap_dim", "=", "self", ".", "input_featuremap_dim", "\n", "self", ".", "layer1", "=", "self", ".", "pyramidal_make_layer", "(", "block", ",", "n", ")", "\n", "self", ".", "layer2", "=", "self", ".", "pyramidal_make_layer", "(", "block", ",", "n", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "pyramidal_make_layer", "(", "block", ",", "n", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "final_featuremap_dim", "=", "self", ".", "input_featuremap_dim", "\n", "self", ".", "bn_final", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "final_featuremap_dim", ")", "\n", "self", ".", "relu_final", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "final_featuremap_dim", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.PyramidNet.PyramidNet.pyramidal_make_layer": [[143, 158], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "block", "layers.append", "int", "int", "block", "round", "round", "int", "int", "round", "round"], "methods", ["None"], ["", "", "", "def", "pyramidal_make_layer", "(", "self", ",", "block", ",", "block_depth", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", ":", "# or self.inplanes != int(round(featuremap_dim_1st)) * block.outchannel_ratio:", "\n", "            ", "downsample", "=", "nn", ".", "AvgPool2d", "(", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "ceil_mode", "=", "True", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "self", ".", "featuremap_dim", "=", "self", ".", "featuremap_dim", "+", "self", ".", "addrate", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "input_featuremap_dim", ",", "int", "(", "round", "(", "self", ".", "featuremap_dim", ")", ")", ",", "stride", ",", "downsample", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "block_depth", ")", ":", "\n", "            ", "temp_featuremap_dim", "=", "self", ".", "featuremap_dim", "+", "self", ".", "addrate", "\n", "layers", ".", "append", "(", "block", "(", "int", "(", "round", "(", "self", ".", "featuremap_dim", ")", ")", "*", "block", ".", "outchannel_ratio", ",", "int", "(", "round", "(", "temp_featuremap_dim", ")", ")", ",", "1", ")", ")", "\n", "self", ".", "featuremap_dim", "=", "temp_featuremap_dim", "\n", "", "self", ".", "input_featuremap_dim", "=", "int", "(", "round", "(", "self", ".", "featuremap_dim", ")", ")", "*", "block", ".", "outchannel_ratio", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.PyramidNet.PyramidNet.forward": [[159, 173], ["PyramidNet.PyramidNet.conv1", "PyramidNet.PyramidNet.bn1", "PyramidNet.PyramidNet.layer1", "PyramidNet.PyramidNet.layer2", "PyramidNet.PyramidNet.layer3", "PyramidNet.PyramidNet.bn_final", "PyramidNet.PyramidNet.relu_final", "PyramidNet.PyramidNet.avgpool", "PyramidNet.PyramidNet.view", "PyramidNet.PyramidNet.fc", "PyramidNet.PyramidNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "bn_final", "(", "x", ")", "\n", "x", "=", "self", ".", "relu_final", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.PyramidNet.PyramidNet.get_bn_before_relu": [[174, 180], ["None"], "methods", ["None"], ["", "def", "get_bn_before_relu", "(", "self", ")", ":", "\n", "        ", "bn1", "=", "self", ".", "layer2", "[", "0", "]", ".", "bn2", "\n", "bn2", "=", "self", ".", "layer3", "[", "0", "]", ".", "bn2", "\n", "bn3", "=", "self", ".", "bn_final", "\n", "\n", "return", "[", "bn1", ",", "bn2", ",", "bn3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.PyramidNet.PyramidNet.get_channel_num": [[181, 195], ["isinstance", "isinstance", "print"], "methods", ["None"], ["", "def", "get_channel_num", "(", "self", ")", ":", "\n", "\n", "        ", "if", "isinstance", "(", "self", ".", "layer1", "[", "0", "]", ",", "Bottleneck", ")", ":", "\n", "            ", "nChannel1", "=", "self", ".", "layer2", "[", "0", "]", ".", "conv1", ".", "out_channels", "\n", "nChannel2", "=", "self", ".", "layer3", "[", "0", "]", ".", "conv1", ".", "out_channels", "\n", "nChannel3", "=", "self", ".", "final_featuremap_dim", "\n", "", "elif", "isinstance", "(", "self", ".", "layer1", "[", "0", "]", ",", "BasicBlock", ")", ":", "\n", "            ", "nChannel1", "=", "self", ".", "layer2", "[", "0", "]", ".", "conv1", ".", "in_channels", "\n", "nChannel2", "=", "self", ".", "layer3", "[", "0", "]", ".", "conv1", ".", "in_channels", "\n", "nChannel3", "=", "self", ".", "final_featuremap_dim", "\n", "", "else", ":", "\n", "            ", "print", "(", "'PyramidNet unknown block error !!!'", ")", "\n", "\n", "", "return", "[", "nChannel1", ",", "nChannel2", ",", "nChannel3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.PyramidNet.PyramidNet.extract_feature": [[196, 225], ["PyramidNet.PyramidNet.conv1", "PyramidNet.PyramidNet.bn1", "PyramidNet.PyramidNet.layer1", "PyramidNet.PyramidNet.layer2", "PyramidNet.PyramidNet.layer3", "PyramidNet.PyramidNet.bn_final", "PyramidNet.PyramidNet.relu_final", "PyramidNet.PyramidNet.avgpool", "x.view.view.view", "PyramidNet.PyramidNet.fc", "x.view.view.size", "isinstance", "l.bn2", "l.bn2", "PyramidNet.PyramidNet.bn_final", "isinstance", "l.conv1", "l.conv1", "PyramidNet.PyramidNet.layer2[].bn1", "PyramidNet.PyramidNet.layer3[].bn1", "PyramidNet.PyramidNet.bn_final", "print", "l.bn1", "l.bn1"], "methods", ["None"], ["", "def", "extract_feature", "(", "self", ",", "x", ",", "preReLU", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "\n", "feat1", "=", "self", ".", "layer1", "(", "x", ")", "\n", "feat2", "=", "self", ".", "layer2", "(", "feat1", ")", "\n", "feat3", "=", "self", ".", "layer3", "(", "feat2", ")", "\n", "\n", "x", "=", "self", ".", "bn_final", "(", "feat3", ")", "\n", "x", "=", "self", ".", "relu_final", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "if", "preReLU", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "layer1", "[", "0", "]", ",", "Bottleneck", ")", ":", "\n", "                ", "l", "=", "self", ".", "layer2", "[", "0", "]", "\n", "feat1", "=", "l", ".", "bn2", "(", "l", ".", "conv1", "(", "l", ".", "bn1", "(", "feat1", ")", ")", ")", "\n", "l", "=", "self", ".", "layer3", "[", "0", "]", "\n", "feat2", "=", "l", ".", "bn2", "(", "l", ".", "conv1", "(", "l", ".", "bn1", "(", "feat2", ")", ")", ")", "\n", "feat3", "=", "self", ".", "bn_final", "(", "feat3", ")", "\n", "", "elif", "isinstance", "(", "self", ".", "layer1", "[", "0", "]", ",", "BasicBlock", ")", ":", "\n", "                ", "feat1", "=", "self", ".", "layer2", "[", "0", "]", ".", "bn1", "(", "feat1", ")", "\n", "feat2", "=", "self", ".", "layer3", "[", "0", "]", ".", "bn1", "(", "feat2", ")", "\n", "feat3", "=", "self", ".", "bn_final", "(", "feat3", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'PyramidNet unknown block error !!!'", ")", "\n", "\n", "", "", "return", "[", "feat1", ",", "feat2", ",", "feat3", "]", ",", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.PyramidNet.conv3x3": [[7, 11], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.BasicBlock.__init__": [[8, 22], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.Distiller.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "droprate", "=", "dropRate", "\n", "self", ".", "equalInOut", "=", "(", "in_planes", "==", "out_planes", ")", "\n", "self", ".", "convShortcut", "=", "(", "not", "self", ".", "equalInOut", ")", "and", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "bias", "=", "False", ")", "or", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.BasicBlock.forward": [[23, 33], ["WideResNet.BasicBlock.relu2", "WideResNet.BasicBlock.conv2", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "WideResNet.BasicBlock.relu1", "WideResNet.BasicBlock.relu1", "WideResNet.BasicBlock.bn2", "torch.dropout", "torch.dropout", "torch.dropout", "WideResNet.BasicBlock.bn1", "WideResNet.BasicBlock.bn1", "WideResNet.BasicBlock.conv1", "WideResNet.BasicBlock.convShortcut"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "equalInOut", ":", "\n", "            ", "x", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "out", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv1", "(", "out", "if", "self", ".", "equalInOut", "else", "x", ")", ")", ")", "\n", "if", "self", ".", "droprate", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "droprate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "return", "torch", ".", "add", "(", "x", "if", "self", ".", "equalInOut", "else", "self", ".", "convShortcut", "(", "x", ")", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.NetworkBlock.__init__": [[35, 38], ["torch.Module.__init__", "WideResNet.NetworkBlock._make_layer"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.Distiller.__init__", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.NetworkBlock._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "nb_layers", ",", "in_planes", ",", "out_planes", ",", "block", ",", "stride", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "NetworkBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "self", ".", "_make_layer", "(", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.NetworkBlock._make_layer": [[39, 44], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "int", "(", "nb_layers", ")", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "i", "==", "0", "and", "in_planes", "or", "out_planes", ",", "out_planes", ",", "i", "==", "0", "and", "stride", "or", "1", ",", "dropRate", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.NetworkBlock.forward": [[45, 47], ["WideResNet.NetworkBlock.layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.WideResNet.__init__": [[49, 78], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "WideResNet.NetworkBlock", "WideResNet.NetworkBlock", "WideResNet.NetworkBlock", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "WideResNet.WideResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.Distiller.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "num_classes", ",", "widen_factor", "=", "1", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "WideResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nChannels", "=", "[", "16", ",", "16", "*", "widen_factor", ",", "32", "*", "widen_factor", ",", "64", "*", "widen_factor", "]", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", "\n", "n", "=", "(", "depth", "-", "4", ")", "/", "6", "\n", "block", "=", "BasicBlock", "\n", "# 1st conv before any network block", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "nChannels", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "# 1st block", "\n", "self", ".", "block1", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "0", "]", ",", "nChannels", "[", "1", "]", ",", "block", ",", "1", ",", "dropRate", ")", "\n", "# 2nd block", "\n", "self", ".", "block2", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "1", "]", ",", "nChannels", "[", "2", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "# 3rd block", "\n", "self", ".", "block3", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "2", "]", ",", "nChannels", "[", "3", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "# global average pooling and classifier", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nChannels", "[", "3", "]", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "nChannels", "[", "3", "]", ",", "num_classes", ")", "\n", "self", ".", "nChannels", "=", "nChannels", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.WideResNet.forward": [[79, 88], ["WideResNet.WideResNet.conv1", "WideResNet.WideResNet.block1", "WideResNet.WideResNet.block2", "WideResNet.WideResNet.block3", "WideResNet.WideResNet.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "out.view.view.view", "WideResNet.WideResNet.fc", "WideResNet.WideResNet.bn1"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "block1", "(", "out", ")", "\n", "out", "=", "self", ".", "block2", "(", "out", ")", "\n", "out", "=", "self", ".", "block3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "self", ".", "nChannels", "[", "3", "]", ")", "\n", "return", "self", ".", "fc", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.WideResNet.get_bn_before_relu": [[89, 95], ["None"], "methods", ["None"], ["", "def", "get_bn_before_relu", "(", "self", ")", ":", "\n", "        ", "bn1", "=", "self", ".", "block2", ".", "layer", "[", "0", "]", ".", "bn1", "\n", "bn2", "=", "self", ".", "block3", ".", "layer", "[", "0", "]", ".", "bn1", "\n", "bn3", "=", "self", ".", "bn1", "\n", "\n", "return", "[", "bn1", ",", "bn2", ",", "bn3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.WideResNet.get_channel_num": [[96, 99], ["None"], "methods", ["None"], ["", "def", "get_channel_num", "(", "self", ")", ":", "\n", "\n", "        ", "return", "self", ".", "nChannels", "[", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.WideResNet.extract_feature": [[100, 116], ["WideResNet.WideResNet.conv1", "WideResNet.WideResNet.block1", "WideResNet.WideResNet.block2", "WideResNet.WideResNet.block3", "WideResNet.WideResNet.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "WideResNet.WideResNet.view", "WideResNet.WideResNet.fc", "WideResNet.WideResNet.bn1", "WideResNet.WideResNet.block2.layer[].bn1", "WideResNet.WideResNet.block3.layer[].bn1", "WideResNet.WideResNet.bn1"], "methods", ["None"], ["", "def", "extract_feature", "(", "self", ",", "x", ",", "preReLU", "=", "False", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "feat1", "=", "self", ".", "block1", "(", "out", ")", "\n", "feat2", "=", "self", ".", "block2", "(", "feat1", ")", "\n", "feat3", "=", "self", ".", "block3", "(", "feat2", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "feat3", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "self", ".", "nChannels", "[", "3", "]", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "\n", "if", "preReLU", ":", "\n", "            ", "feat1", "=", "self", ".", "block2", ".", "layer", "[", "0", "]", ".", "bn1", "(", "feat1", ")", "\n", "feat2", "=", "self", ".", "block3", ".", "layer", "[", "0", "]", ".", "bn1", "(", "feat2", ")", "\n", "feat3", "=", "self", ".", "bn1", "(", "feat3", ")", "\n", "\n", "", "return", "[", "feat1", ",", "feat2", ",", "feat3", "]", ",", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.train_with_distillation.train_with_distill": [[69, 108], ["time.time", "print", "d_net.train", "d_net.s_net.train", "d_net.t_net.train", "enumerate", "print", "print", "optimizer.zero_grad", "d_net", "criterion_CE", "loss.backward", "optimizer.step", "criterion_CE.item", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "targets.size", "predicted.eq().cpu().sum().float().item", "inputs.cuda", "targets.cuda", "predicted.eq().cpu().sum().float", "time.time", "loss_distill.sum", "predicted.eq().cpu().sum", "predicted.eq().cpu", "predicted.eq"], "function", ["None"], ["\n", "# Define Criterion", "\n", "# whether to use class balanced weights", "\n", "if", "args", ".", "use_balanced_weights", ":", "\n", "            ", "classes_weights_path", "=", "os", ".", "path", ".", "join", "(", "Path", ".", "db_root_dir", "(", "args", ".", "dataset", ")", ",", "args", ".", "dataset", "+", "'_classes_weights.npy'", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "classes_weights_path", ")", ":", "\n", "                ", "weight", "=", "np", ".", "load", "(", "classes_weights_path", ")", "\n", "", "else", ":", "\n", "                ", "weight", "=", "calculate_weigths_labels", "(", "args", ".", "dataset", ",", "self", ".", "train_loader", ",", "self", ".", "nclass", ")", "\n", "", "weight", "=", "torch", ".", "from_numpy", "(", "weight", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "", "else", ":", "\n", "            ", "weight", "=", "None", "\n", "", "self", ".", "criterion", "=", "SegmentationLosses", "(", "weight", "=", "weight", ",", "cuda", "=", "args", ".", "cuda", ")", ".", "build_loss", "(", "mode", "=", "args", ".", "loss_type", ")", "\n", "\n", "# Define Evaluator", "\n", "self", ".", "evaluator", "=", "Evaluator", "(", "self", ".", "nclass", ")", "\n", "# Define lr scheduler", "\n", "self", ".", "scheduler", "=", "LR_Scheduler", "(", "args", ".", "lr_scheduler", ",", "args", ".", "lr", ",", "\n", "args", ".", "epochs", ",", "len", "(", "self", ".", "train_loader", ")", ")", "\n", "\n", "# Using cuda", "\n", "if", "args", ".", "cuda", ":", "\n", "            ", "self", ".", "s_net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "self", ".", "s_net", ")", ".", "cuda", "(", ")", "\n", "self", ".", "d_net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "self", ".", "d_net", ")", ".", "cuda", "(", ")", "\n", "\n", "# Resuming checkpoint", "\n", "", "self", ".", "best_pred", "=", "0.0", "\n", "\n", "# Clear start epoch if fine-tuning", "\n", "if", "args", ".", "ft", ":", "\n", "            ", "args", ".", "start_epoch", "=", "0", "\n", "\n", "", "", "def", "training", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "train_loss", "=", "0.0", "\n", "self", ".", "d_net", ".", "train", "(", ")", "\n", "self", ".", "d_net", ".", "module", ".", "t_net", ".", "train", "(", ")", "\n", "self", ".", "d_net", ".", "module", ".", "s_net", ".", "train", "(", ")", "\n", "tbar", "=", "tqdm", "(", "self", ".", "train_loader", ")", "\n", "num_img_tr", "=", "len", "(", "self", ".", "train_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.train_with_distillation.test": [[109, 130], ["time.time", "net.eval", "enumerate", "print", "print", "net", "criterion_CE", "criterion_CE.item", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "targets.size", "predicted.eq().cpu().sum().float().item", "inputs.cuda", "targets.cuda", "predicted.eq().cpu().sum().float", "time.time", "predicted.eq().cpu().sum", "predicted.eq().cpu", "predicted.eq"], "function", ["None"], ["if", "epoch", "==", "0", ":", "\n", "            ", "optimizer", "=", "self", ".", "init_optimizer", "\n", "", "else", ":", "\n", "            ", "optimizer", "=", "self", ".", "optimizer", "\n", "\n", "", "for", "i", ",", "sample", "in", "enumerate", "(", "tbar", ")", ":", "\n", "            ", "image", ",", "target", "=", "sample", "[", "'image'", "]", ",", "sample", "[", "'label'", "]", "\n", "batch_size", "=", "image", ".", "shape", "[", "0", "]", "\n", "if", "self", ".", "args", ".", "cuda", ":", "\n", "                ", "image", ",", "target", "=", "image", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "", "self", ".", "scheduler", "(", "optimizer", ",", "i", ",", "epoch", ",", "self", ".", "best_pred", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", ",", "loss_distill", "=", "self", ".", "d_net", "(", "image", ")", "\n", "\n", "loss_seg", "=", "self", ".", "criterion", "(", "output", ",", "target", ")", "\n", "loss", "=", "loss_seg", "+", "loss_distill", ".", "sum", "(", ")", "/", "batch_size", "*", "1e-5", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "tbar", ".", "set_description", "(", "'Train loss: %.3f'", "%", "(", "train_loss", "/", "(", "i", "+", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.Distiller.__init__": [[44, 59], ["torch.Module.__init__", "t_net.get_channel_num", "s_net.get_channel_num", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "t_net.get_bn_before_relu", "enumerate", "distiller.get_margin_from_BN", "distiller.Distiller.register_buffer", "distiller.build_feature_connector", "margin.unsqueeze().unsqueeze().unsqueeze().detach", "zip", "margin.unsqueeze().unsqueeze().unsqueeze", "margin.unsqueeze().unsqueeze", "margin.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.Distiller.__init__", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.WideResNet.get_channel_num", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.WideResNet.get_channel_num", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.WideResNet.get_bn_before_relu", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.get_margin_from_BN", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.build_feature_connector"], ["    ", "def", "__init__", "(", "self", ",", "t_net", ",", "s_net", ")", ":", "\n", "        ", "super", "(", "Distiller", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "t_channels", "=", "t_net", ".", "get_channel_num", "(", ")", "\n", "s_channels", "=", "s_net", ".", "get_channel_num", "(", ")", "\n", "\n", "self", ".", "Connectors", "=", "nn", ".", "ModuleList", "(", "[", "build_feature_connector", "(", "t", ",", "s", ")", "for", "t", ",", "s", "in", "zip", "(", "t_channels", ",", "s_channels", ")", "]", ")", "\n", "\n", "teacher_bns", "=", "t_net", ".", "get_bn_before_relu", "(", ")", "\n", "margins", "=", "[", "get_margin_from_BN", "(", "bn", ")", "for", "bn", "in", "teacher_bns", "]", "\n", "for", "i", ",", "margin", "in", "enumerate", "(", "margins", ")", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'margin%d'", "%", "(", "i", "+", "1", ")", ",", "margin", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "0", ")", ".", "detach", "(", ")", ")", "\n", "\n", "", "self", ".", "t_net", "=", "t_net", "\n", "self", ".", "s_net", "=", "s_net", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.Distiller.forward": [[60, 73], ["distiller.Distiller.t_net.extract_feature", "distiller.Distiller.s_net.extract_feature", "len", "range", "distiller.distillation_loss", "t_feats[].detach", "getattr"], "methods", ["home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.WideResNet.extract_feature", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.models.WideResNet.WideResNet.extract_feature", "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.distillation_loss"], ["self", ".", "loss_divider", "=", "[", "8", ",", "4", ",", "2", ",", "1", ",", "1", ",", "4", "*", "4", "]", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "t_feats", ",", "t_out", "=", "self", ".", "t_net", ".", "extract_feature", "(", "x", ")", "\n", "s_feats", ",", "s_out", "=", "self", ".", "s_net", ".", "extract_feature", "(", "x", ")", "\n", "feat_num", "=", "len", "(", "t_feats", ")", "\n", "\n", "loss_distill", "=", "0", "\n", "for", "i", "in", "range", "(", "feat_num", ")", ":", "\n", "            ", "s_feats", "[", "i", "]", "=", "self", ".", "Connectors", "[", "i", "]", "(", "s_feats", "[", "i", "]", ")", "\n", "loss_distill", "+=", "distillation_loss", "(", "s_feats", "[", "i", "]", ",", "t_feats", "[", "i", "]", ".", "detach", "(", ")", ",", "getattr", "(", "self", ",", "'margin%d'", "%", "(", "i", "+", "1", ")", ")", ")", "/", "self", ".", "loss_divider", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.distillation_loss": [[9, 14], ["torch.max", "torch.max", "torch.max", "torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss.sum"], "function", ["None"], ["def", "distillation_loss", "(", "source", ",", "target", ",", "margin", ")", ":", "\n", "    ", "target", "=", "torch", ".", "max", "(", "target", ",", "margin", ")", "\n", "loss", "=", "torch", ".", "nn", ".", "functional", ".", "mse_loss", "(", "source", ",", "target", ",", "reduction", "=", "\"none\"", ")", "\n", "loss", "=", "loss", "*", "(", "(", "source", ">", "target", ")", "|", "(", "target", ">", "0", ")", ")", ".", "float", "(", ")", "\n", "return", "loss", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.build_feature_connector": [[15, 28], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "function", ["None"], ["", "def", "build_feature_connector", "(", "t_channel", ",", "s_channel", ")", ":", "\n", "    ", "C", "=", "[", "nn", ".", "Conv2d", "(", "s_channel", ",", "t_channel", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "t_channel", ")", "]", "\n", "\n", "for", "m", "in", "C", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "C", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.distiller.get_margin_from_BN": [[29, 42], ["zip", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "abs", "m.item.item", "abs.item", "scipy.stats.norm.cdf", "margin.append", "margin.append", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "scipy.stats.norm.cdf", "math.sqrt", "math.exp"], "function", ["None"], ["", "def", "get_margin_from_BN", "(", "bn", ")", ":", "\n", "    ", "margin", "=", "[", "]", "\n", "std", "=", "bn", ".", "weight", ".", "data", "\n", "mean", "=", "bn", ".", "bias", ".", "data", "\n", "for", "(", "s", ",", "m", ")", "in", "zip", "(", "std", ",", "mean", ")", ":", "\n", "        ", "s", "=", "abs", "(", "s", ".", "item", "(", ")", ")", "\n", "m", "=", "m", ".", "item", "(", ")", "\n", "if", "norm", ".", "cdf", "(", "-", "m", "/", "s", ")", ">", "0.001", ":", "\n", "            ", "margin", ".", "append", "(", "-", "s", "*", "math", ".", "exp", "(", "-", "(", "m", "/", "s", ")", "**", "2", "/", "2", ")", "/", "math", ".", "sqrt", "(", "2", "*", "math", ".", "pi", ")", "/", "norm", ".", "cdf", "(", "-", "m", "/", "s", ")", "+", "m", ")", "\n", "", "else", ":", "\n", "            ", "margin", ".", "append", "(", "-", "3", "*", "s", ")", "\n", "\n", "", "", "return", "torch", ".", "FloatTensor", "(", "margin", ")", ".", "to", "(", "std", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clovaai_overhaul-distillation.CIFAR-100.load_settings.load_paper_settings": [[9, 64], ["os.path.join", "os.path.join", "models.WideResNet", "PYN.PyramidNet.load_state_dict", "models.WideResNet", "torch.load", "models.WideResNet", "PYN.PyramidNet.load_state_dict", "models.WideResNet", "torch.load", "models.WideResNet", "PYN.PyramidNet.load_state_dict", "models.WideResNet", "torch.load", "models.WideResNet", "PYN.PyramidNet.load_state_dict", "models.ResNet", "torch.load", "models.PyramidNet", "OrderedDict", "state.items", "PYN.PyramidNet.load_state_dict", "models.WideResNet", "torch.load", "models.PyramidNet", "OrderedDict", "state.items", "PYN.PyramidNet.load_state_dict", "models.PyramidNet", "print", "torch.load"], "function", ["None"], ["def", "load_paper_settings", "(", "args", ")", ":", "\n", "\n", "    ", "WRN_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_path", ",", "'WRN28-4_21.09.pt'", ")", "\n", "Pyramid_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_path", ",", "'pyramid200_mixup_15.6.tar'", ")", "\n", "\n", "if", "args", ".", "paper_setting", "==", "'a'", ":", "\n", "        ", "teacher", "=", "WRN", ".", "WideResNet", "(", "depth", "=", "28", ",", "widen_factor", "=", "4", ",", "num_classes", "=", "100", ")", "\n", "state", "=", "torch", ".", "load", "(", "WRN_path", ",", "map_location", "=", "{", "'cuda:0'", ":", "'cpu'", "}", ")", "[", "'model'", "]", "\n", "teacher", ".", "load_state_dict", "(", "state", ")", "\n", "student", "=", "WRN", ".", "WideResNet", "(", "depth", "=", "16", ",", "widen_factor", "=", "4", ",", "num_classes", "=", "100", ")", "\n", "\n", "", "elif", "args", ".", "paper_setting", "==", "'b'", ":", "\n", "        ", "teacher", "=", "WRN", ".", "WideResNet", "(", "depth", "=", "28", ",", "widen_factor", "=", "4", ",", "num_classes", "=", "100", ")", "\n", "state", "=", "torch", ".", "load", "(", "WRN_path", ",", "map_location", "=", "{", "'cuda:0'", ":", "'cpu'", "}", ")", "[", "'model'", "]", "\n", "teacher", ".", "load_state_dict", "(", "state", ")", "\n", "student", "=", "WRN", ".", "WideResNet", "(", "depth", "=", "28", ",", "widen_factor", "=", "2", ",", "num_classes", "=", "100", ")", "\n", "\n", "", "elif", "args", ".", "paper_setting", "==", "'c'", ":", "\n", "        ", "teacher", "=", "WRN", ".", "WideResNet", "(", "depth", "=", "28", ",", "widen_factor", "=", "4", ",", "num_classes", "=", "100", ")", "\n", "state", "=", "torch", ".", "load", "(", "WRN_path", ",", "map_location", "=", "{", "'cuda:0'", ":", "'cpu'", "}", ")", "[", "'model'", "]", "\n", "teacher", ".", "load_state_dict", "(", "state", ")", "\n", "student", "=", "WRN", ".", "WideResNet", "(", "depth", "=", "16", ",", "widen_factor", "=", "2", ",", "num_classes", "=", "100", ")", "\n", "\n", "", "elif", "args", ".", "paper_setting", "==", "'d'", ":", "\n", "        ", "teacher", "=", "WRN", ".", "WideResNet", "(", "depth", "=", "28", ",", "widen_factor", "=", "4", ",", "num_classes", "=", "100", ")", "\n", "state", "=", "torch", ".", "load", "(", "WRN_path", ",", "map_location", "=", "{", "'cuda:0'", ":", "'cpu'", "}", ")", "[", "'model'", "]", "\n", "teacher", ".", "load_state_dict", "(", "state", ")", "\n", "student", "=", "RN", ".", "ResNet", "(", "depth", "=", "56", ",", "num_classes", "=", "100", ")", "\n", "\n", "", "elif", "args", ".", "paper_setting", "==", "'e'", ":", "\n", "        ", "teacher", "=", "PYN", ".", "PyramidNet", "(", "depth", "=", "200", ",", "alpha", "=", "240", ",", "num_classes", "=", "100", ",", "bottleneck", "=", "True", ")", "\n", "state", "=", "torch", ".", "load", "(", "Pyramid_path", ",", "map_location", "=", "{", "'cuda:0'", ":", "'cpu'", "}", ")", "[", "'state_dict'", "]", "\n", "from", "collections", "import", "OrderedDict", "\n", "new_state", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state", ".", "items", "(", ")", ":", "\n", "            ", "name", "=", "k", "[", "7", ":", "]", "# remove 'module.' of dataparallel", "\n", "new_state", "[", "name", "]", "=", "v", "\n", "", "teacher", ".", "load_state_dict", "(", "new_state", ")", "\n", "student", "=", "WRN", ".", "WideResNet", "(", "depth", "=", "28", ",", "widen_factor", "=", "4", ",", "num_classes", "=", "100", ")", "\n", "\n", "", "elif", "args", ".", "paper_setting", "==", "'f'", ":", "\n", "        ", "teacher", "=", "PYN", ".", "PyramidNet", "(", "depth", "=", "200", ",", "alpha", "=", "240", ",", "num_classes", "=", "100", ",", "bottleneck", "=", "True", ")", "\n", "state", "=", "torch", ".", "load", "(", "Pyramid_path", ",", "map_location", "=", "{", "'cuda:0'", ":", "'cpu'", "}", ")", "[", "'state_dict'", "]", "\n", "from", "collections", "import", "OrderedDict", "\n", "new_state", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state", ".", "items", "(", ")", ":", "\n", "            ", "name", "=", "k", "[", "7", ":", "]", "# remove 'module.' of dataparallel", "\n", "new_state", "[", "name", "]", "=", "v", "\n", "", "teacher", ".", "load_state_dict", "(", "new_state", ")", "\n", "student", "=", "PYN", ".", "PyramidNet", "(", "depth", "=", "110", ",", "alpha", "=", "84", ",", "num_classes", "=", "100", ",", "bottleneck", "=", "False", ")", "\n", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Undefined setting name !!!'", ")", "\n", "\n", "", "return", "teacher", ",", "student", ",", "args", "", "", ""]]}