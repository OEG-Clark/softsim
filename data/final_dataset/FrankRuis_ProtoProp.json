{"home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.prototype_model.LocalProts.__init__": [[8, 33], ["torch.Module.__init__", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "prototype_model.LocalProts.class_identity.size", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.FrankRuis_ProtoProp.dataloaders.ao_clevr.AOClevr.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ch_in", ",", "n_class", ",", "prot_dim", "=", "512", ",", "prot_shape", "=", "(", "1", ",", "1", ")", ",", "bn", "=", "True", ",", "metric", "=", "'dot'", ",", "pooling", "=", "False", ",", "proj", "=", "True", ",", "type_", "=", "None", ",", "i", "=", "None", ")", ":", "\n", "        ", "super", "(", "LocalProts", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "type_", "=", "type_", "\n", "self", ".", "i", "=", "i", "\n", "self", ".", "bn", "=", "bn", "\n", "self", ".", "prot_dim", "=", "prot_dim", "\n", "self", ".", "n_class", "=", "n_class", "\n", "self", ".", "prototype_shape", "=", "(", "self", ".", "n_class", ",", "self", ".", "prot_dim", ",", "*", "prot_shape", ")", "\n", "self", ".", "metric", "=", "metric", "\n", "self", ".", "pooling", "=", "pooling", "\n", "self", ".", "proj", "=", "proj", "\n", "\n", "self", ".", "class_identity", "=", "torch", ".", "zeros", "(", "self", ".", "prototype_shape", "[", "0", "]", ",", "self", ".", "n_class", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "class_identity", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "self", ".", "class_identity", "[", "i", ",", "i", "]", "=", "1", "\n", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "ch_in", ",", "self", ".", "prot_dim", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "if", "self", ".", "bn", ":", "\n", "            ", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "prot_dim", ")", "\n", "\n", "", "self", ".", "prototypes", "=", "nn", ".", "Parameter", "(", "torch", ".", "rand", "(", "self", ".", "prototype_shape", ")", ")", "\n", "self", ".", "logit_scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "[", "]", ")", ")", "\n", "\n", "self", ".", "ones", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "self", ".", "prototype_shape", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.prototype_model.LocalProts.forward": [[34, 65], ["prototype_model.LocalProts._distance", "torch.softmax().view_as", "torch.softmax().view_as", "torch.softmax().view_as", "range", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "print", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "prototype_model.LocalProts._project", "torch.softmax().view_as.size", "sm[].unsqueeze", "torch.stack().sum.append", "torch.stack().sum.append", "torch.stack().sum.append", "torch.softmax", "torch.softmax", "torch.softmax", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "prototype_model.LocalProts.view", "prototype_model.LocalProts.prototypes.flatten", "prototype_model.LocalProts.size"], "methods", ["home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.prototype_model.LocalProts._distance", "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.prototype_model.LocalProts._project"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "pooling", ":", "\n", "            ", "x", "=", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "(", "1", ",", "1", ")", ")", "\n", "\n", "", "if", "self", ".", "proj", ":", "\n", "            ", "x", "=", "self", ".", "_project", "(", "x", ")", "\n", "\n", "", "dist", "=", "self", ".", "_distance", "(", "x", ")", "\n", "\n", "sm", "=", "F", ".", "softmax", "(", "dist", ".", "view", "(", "*", "dist", ".", "size", "(", ")", "[", ":", "2", "]", ",", "-", "1", ")", ",", "dim", "=", "2", ")", ".", "view_as", "(", "dist", ")", "\n", "vecs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "sm", ".", "size", "(", "1", ")", ")", ":", "\n", "            ", "smi", "=", "sm", "[", ":", ",", "i", "]", ".", "unsqueeze", "(", "1", ")", "\n", "vecs", ".", "append", "(", "torch", ".", "mul", "(", "x", ",", "smi", ")", ")", "\n", "", "vecs", "=", "torch", ".", "stack", "(", "vecs", ",", "dim", "=", "1", ")", ".", "sum", "(", "dim", "=", "(", "3", ",", "4", ")", ")", "\n", "dist", "=", "(", "vecs", "*", "self", ".", "prototypes", ".", "flatten", "(", "1", ")", ")", ".", "sum", "(", "2", ")", "\n", "print", "(", "dist", ".", "shape", ")", "\n", "\n", "# if self.metric == 'euclidean':", "\n", "#     # min pooling for euclidean distance", "\n", "#     dist, idxs = F.max_pool2d(-dist, dist.shape[2:], return_indices=True)", "\n", "#     dist = -dist", "\n", "# else:", "\n", "#     dist, idxs = F.max_pool2d(dist, dist.shape[2:], return_indices=True)", "\n", "# dist = dist.flatten(1)", "\n", "\n", "out", "=", "dist", "\n", "if", "self", ".", "metric", "==", "'euclidean'", ":", "\n", "            ", "out", "=", "-", "out", "\n", "\n", "", "return", "out", ",", "vecs", ",", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.prototype_model.LocalProts.get_loss": [[66, 92], ["torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "len", "len", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "attr_onehots.repeat.repeat.repeat", "model.hsic.hsic_normalized", "prototype_model.LocalProts.cluster_costs", "prototype_model.LocalProts.separation_costs", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "prototype_model.LocalProts.separation_costs", "range", "range", "torch.cat.size", "torch.cat.size", "torch.cat.size", "range", "torch.cat.size", "torch.cat.size", "torch.cat.size"], "methods", ["home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.hsic.hsic_normalized", "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.prototype_model.LocalProts.cluster_costs", "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.prototype_model.LocalProts.separation_costs", "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.prototype_model.LocalProts.separation_costs"], ["", "def", "get_loss", "(", "self", ",", "attr_sims", ",", "attr_outputs", ",", "distances", ",", "graph", ",", "args", ",", "labels", ",", "device", "=", "'cuda'", ")", ":", "\n", "        ", "targets", "=", "labels", "[", "self", ".", "i", "]", "\n", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "attr_sims", ",", "targets", ")", "\n", "if", "args", "[", "'l_hsic'", "]", "!=", "0", ":", "\n", "            ", "nclasses", "=", "len", "(", "graph", ".", "objects", ")", "if", "self", ".", "type_", "==", "'attributes'", "else", "len", "(", "graph", ".", "attributes", ")", "\n", "attr_onehots", "=", "torch", ".", "squeeze", "(", "torch", ".", "eye", "(", "nclasses", ")", "[", "labels", "[", "self", ".", "i", "-", "1", "]", "]", ")", "\n", "if", "attr_outputs", ".", "size", "(", "1", ")", "==", "self", ".", "n_class", ":", "\n", "                ", "attr_outputs", "=", "attr_outputs", "[", "range", "(", "attr_outputs", ".", "size", "(", "0", ")", ")", ",", "targets", "]", "\n", "", "else", ":", "\n", "                ", "n", "=", "self", ".", "prots_per_class", "\n", "attr_outputs", "=", "torch", ".", "cat", "(", "\n", "[", "attr_outputs", "[", ":", ",", "j", ":", ":", "n", "]", "[", "range", "(", "attr_outputs", ".", "size", "(", "0", ")", ")", ",", "targets", "]", "for", "j", "in", "range", "(", "n", ")", "]", ")", "\n", "attr_onehots", "=", "attr_onehots", ".", "repeat", "(", "n", ",", "1", ")", "\n", "\n", "", "loss", "+=", "args", "[", "'l_hsic'", "]", "*", "hsic_normalized", "(", "attr_outputs", ",", "attr_onehots", ")", "\n", "\n", "", "if", "args", "[", "'l_clst'", "]", "!=", "0", ":", "\n", "            ", "loss", "+=", "args", "[", "'l_clst'", "]", "*", "self", ".", "cluster_costs", "(", "distances", ",", "targets", ",", "device", "=", "device", ")", "\n", "\n", "", "if", "args", "[", "'l_sep'", "]", "!=", "0", "and", "not", "args", "[", "'obj_only_sep'", "]", ":", "\n", "            ", "loss", "+=", "args", "[", "'l_sep'", "]", "*", "self", ".", "separation_costs", "(", "distances", ",", "targets", ",", "device", "=", "device", ")", "\n", "", "elif", "args", "[", "'l_sep'", "]", "!=", "0", "and", "self", ".", "type_", "==", "'objects'", ":", "\n", "            ", "loss", "+=", "args", "[", "'l_sep'", "]", "*", "self", ".", "separation_costs", "(", "distances", ",", "targets", ",", "device", "=", "device", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.prototype_model.LocalProts._project": [[93, 100], ["prototype_model.LocalProts.conv1", "prototype_model.LocalProts.relu", "prototype_model.LocalProts.bn1"], "methods", ["None"], ["", "def", "_project", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "if", "self", ".", "bn", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.prototype_model.LocalProts._distance": [[101, 117], ["callable", "prototype_model.LocalProts.metric", "torch.conv2d", "torch.conv2d", "torch.conv2d", "prototype_model.LocalProts._l2_convolution", "NotImplementedError", "x.norm", "prototype_model.LocalProts.prototypes.norm", "prototype_model.LocalProts.logit_scale.exp", "torch.conv2d", "torch.conv2d", "torch.conv2d"], "methods", ["home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.prototype_model.LocalProts._l2_convolution"], ["", "def", "_distance", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "callable", "(", "self", ".", "metric", ")", ":", "\n", "            ", "dist", "=", "self", ".", "metric", "(", "x", ")", "\n", "", "elif", "self", ".", "metric", "==", "'dot'", ":", "\n", "# dist = self.logit_scale.exp() * F.conv2d(x, weight=self.prototypes)", "\n", "            ", "dist", "=", "F", ".", "conv2d", "(", "x", ",", "weight", "=", "self", ".", "prototypes", ")", "\n", "", "elif", "self", ".", "metric", "==", "'euclidean'", ":", "\n", "            ", "dist", "=", "self", ".", "_l2_convolution", "(", "x", ")", "\n", "", "elif", "self", ".", "metric", "==", "'cosine'", ":", "\n", "            ", "x", "=", "x", "/", "x", ".", "norm", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "weight", "=", "self", ".", "prototypes", "/", "self", ".", "prototypes", ".", "norm", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "dist", "=", "self", ".", "logit_scale", ".", "exp", "(", ")", "*", "F", ".", "conv2d", "(", "x", ",", "weight", "=", "weight", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Metric {} not implemented.'", ".", "format", "(", "self", ".", "metric", ")", ")", "\n", "\n", "", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.prototype_model.LocalProts.cluster_costs": [[118, 138], ["prototype_model.LocalProts.class_identity[].t().to", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "prototype_model.LocalProts.class_identity[].t", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["", "def", "cluster_costs", "(", "self", ",", "distances", ",", "labels", ",", "device", "=", "'cuda'", ")", ":", "\n", "        ", "\"\"\"\n        Loss adapted from https://github.com/cfchen-duke/ProtoPNet\n        \"\"\"", "\n", "target_prots", "=", "self", ".", "class_identity", "[", ":", ",", "labels", "]", ".", "t", "(", ")", ".", "to", "(", "device", ")", "\n", "if", "self", ".", "metric", "==", "'cosine'", ":", "\n", "            ", "mx", "=", "self", ".", "logit_scale", "\n", "", "elif", "self", ".", "metric", "==", "'euclidean'", ":", "\n", "            ", "mx", "=", "self", ".", "prototype_shape", "[", "1", "]", "*", "self", ".", "prototype_shape", "[", "2", "]", "*", "self", ".", "prototype_shape", "[", "3", "]", "\n", "", "else", ":", "\n", "            ", "mx", "=", "torch", ".", "max", "(", "distances", ")", "\n", "\n", "", "if", "self", ".", "metric", "==", "'euclidean'", ":", "\n", "            ", "max_dist_per_prot", ",", "_", "=", "torch", ".", "max", "(", "(", "mx", "-", "distances", ")", "*", "target_prots", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "max_dist_per_prot", ",", "_", "=", "torch", ".", "max", "(", "distances", "*", "target_prots", ",", "dim", "=", "1", ")", "\n", "\n", "", "cluster_cost", "=", "torch", ".", "mean", "(", "mx", "-", "max_dist_per_prot", ")", "\n", "\n", "return", "cluster_cost", "\n", "\n"]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.prototype_model.LocalProts.separation_costs": [[139, 158], ["prototype_model.LocalProts.class_identity[].t().to", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "prototype_model.LocalProts.class_identity[].t"], "methods", ["None"], ["", "def", "separation_costs", "(", "self", ",", "distances", ",", "labels", ",", "device", "=", "'cuda'", ")", ":", "\n", "        ", "\"\"\"\n        Loss adapted from https://github.com/cfchen-duke/ProtoPNet\n        \"\"\"", "\n", "if", "self", ".", "metric", "==", "'euclidean'", ":", "\n", "            ", "mx", "=", "self", ".", "prototype_shape", "[", "1", "]", "*", "self", ".", "prototype_shape", "[", "2", "]", "*", "self", ".", "prototype_shape", "[", "3", "]", "\n", "\n", "", "other_prots", "=", "1", "-", "self", ".", "class_identity", "[", ":", ",", "labels", "]", ".", "t", "(", ")", ".", "to", "(", "device", ")", "\n", "if", "self", ".", "metric", "==", "'euclidean'", ":", "\n", "            ", "max_dist_per_other_prot", ",", "_", "=", "torch", ".", "max", "(", "(", "mx", "-", "distances", ")", "*", "other_prots", ",", "dim", "=", "1", ")", "\n", "separation_cost", "=", "torch", ".", "mean", "(", "mx", "-", "max_dist_per_other_prot", ")", "\n", "", "elif", "self", ".", "metric", "==", "'cosine'", ":", "\n", "            ", "max_dist_per_other_prot", ",", "_", "=", "torch", ".", "max", "(", "distances", "*", "other_prots", ",", "dim", "=", "1", ")", "\n", "separation_cost", "=", "torch", ".", "mean", "(", "self", ".", "logit_scale", "+", "max_dist_per_other_prot", ")", "\n", "", "else", ":", "\n", "            ", "max_dist_per_other_prot", ",", "_", "=", "torch", ".", "max", "(", "distances", "*", "other_prots", ",", "dim", "=", "1", ")", "\n", "separation_cost", "=", "torch", ".", "mean", "(", "max_dist_per_other_prot", ")", "\n", "\n", "", "return", "separation_cost", "\n", "\n"]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.prototype_model.LocalProts._l2_convolution": [[159, 179], ["torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum.view", "torch.sum.view", "torch.sum.view", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "_l2_convolution", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Taken from https://github.com/cfchen-duke/ProtoPNet\n        apply self.prototype_vectors as l2-convolution filters on input x\n        \"\"\"", "\n", "x2", "=", "x", "**", "2", "\n", "x2_patch_sum", "=", "F", ".", "conv2d", "(", "input", "=", "x2", ",", "weight", "=", "self", ".", "ones", ")", "\n", "\n", "p2", "=", "self", ".", "prototypes", "**", "2", "\n", "p2", "=", "torch", ".", "sum", "(", "p2", ",", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "# p2 is a vector of shape (num_prototypes,)", "\n", "# then we reshape it to (num_prototypes, 1, 1)", "\n", "p2_reshape", "=", "p2", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "xp", "=", "F", ".", "conv2d", "(", "input", "=", "x", ",", "weight", "=", "self", ".", "prototypes", ")", "\n", "intermediate_result", "=", "-", "2", "*", "xp", "+", "p2_reshape", "# use broadcast", "\n", "# x2_patch_sum and intermediate_result are of the same shape", "\n", "distances", "=", "F", ".", "relu", "(", "x2_patch_sum", "+", "intermediate_result", ")", "\n", "\n", "return", "distances", "\n", "", "", ""]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.graph.CompositionalGraph.__init__": [[5, 55], ["torch.cat", "torch.tensor", "set", "set", "edges.append", "relations.append", "edges.append", "relations.append", "enumerate", "range", "edges.append", "relations.append", "edges.append", "relations.append", "edges.append", "relations.append", "edges.append", "relations.append", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "edges.append", "relations.append", "edges.append", "relations.append", "range", "range", "torch.tensor", "torch.tensor", "str", "str", "str", "str"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "attributes", ",", "objects", ",", "compositions", ",", "undirected", "=", "False", ",", "seen", "=", "None", ",", "ao_edges", "=", "True", ")", ":", "\n", "        ", "ppc", "=", "1", "\n", "self", ".", "attributes", "=", "[", "a", "for", "e", "in", "attributes", "for", "a", "in", "[", "e", "+", "str", "(", "i", ")", "if", "i", ">", "0", "else", "e", "for", "i", "in", "range", "(", "ppc", ")", "]", "]", "\n", "self", ".", "objects", "=", "[", "o", "for", "e", "in", "objects", "for", "o", "in", "[", "e", "+", "str", "(", "i", ")", "if", "i", ">", "0", "else", "e", "for", "i", "in", "range", "(", "ppc", ")", "]", "]", "\n", "self", ".", "compositions", "=", "compositions", "\n", "self", ".", "nodes", "=", "self", ".", "compositions", "+", "self", ".", "attributes", "+", "self", ".", "objects", "\n", "self", ".", "ntoi", "=", "{", "e", ":", "i", "for", "i", ",", "e", "in", "enumerate", "(", "self", ".", "nodes", ")", "}", "\n", "self", ".", "ppc", "=", "ppc", "\n", "\n", "if", "seen", ":", "\n", "            ", "sattr", "=", "set", "(", "[", "e", "[", "0", "]", "for", "e", "in", "seen", "]", ")", "\n", "sobj", "=", "set", "(", "[", "e", "[", "1", "]", "for", "e", "in", "seen", "]", ")", "\n", "skattr", "=", "{", "e", "for", "e", "in", "self", ".", "attributes", "if", "e", "not", "in", "sattr", "}", "\n", "skobj", "=", "{", "e", "for", "e", "in", "self", ".", "objects", "if", "e", "not", "in", "sobj", "}", "\n", "\n", "", "edges", "=", "[", "]", "\n", "relations", "=", "[", "]", "\n", "for", "a", ",", "o", "in", "compositions", ":", "\n", "            ", "if", "seen", "is", "not", "None", "and", "(", "a", "in", "skattr", "or", "o", "in", "skobj", ")", ":", "\n", "                ", "continue", "\n", "\n", "# edges from attributes and objects to compositional nodes", "\n", "", "edges", ".", "append", "(", "(", "self", ".", "ntoi", "[", "a", "]", ",", "self", ".", "ntoi", "[", "(", "a", ",", "o", ")", "]", ")", ")", "\n", "relations", ".", "append", "(", "0", ")", "\n", "edges", ".", "append", "(", "(", "self", ".", "ntoi", "[", "o", "]", ",", "self", ".", "ntoi", "[", "(", "a", ",", "o", ")", "]", ")", ")", "\n", "relations", ".", "append", "(", "1", ")", "\n", "\n", "if", "ppc", ">", "1", ":", "\n", "                ", "for", "i", "in", "range", "(", "1", ",", "ppc", ")", ":", "\n", "                    ", "edges", ".", "append", "(", "(", "self", ".", "ntoi", "[", "a", "+", "str", "(", "i", ")", "]", ",", "self", ".", "ntoi", "[", "(", "a", ",", "o", ")", "]", ")", ")", "\n", "relations", ".", "append", "(", "0", ")", "\n", "edges", ".", "append", "(", "(", "self", ".", "ntoi", "[", "o", "+", "str", "(", "i", ")", "]", ",", "self", ".", "ntoi", "[", "(", "a", ",", "o", ")", "]", ")", ")", "\n", "relations", ".", "append", "(", "1", ")", "\n", "\n", "# undirected edges between attributes and objects", "\n", "", "", "if", "ao_edges", ":", "\n", "                ", "edges", ".", "append", "(", "(", "self", ".", "ntoi", "[", "a", "]", ",", "self", ".", "ntoi", "[", "o", "]", ")", ")", "\n", "relations", ".", "append", "(", "4", ")", "\n", "edges", ".", "append", "(", "(", "self", ".", "ntoi", "[", "o", "]", ",", "self", ".", "ntoi", "[", "a", "]", ")", ")", "\n", "relations", ".", "append", "(", "5", ")", "\n", "\n", "# add reverse edges", "\n", "", "if", "undirected", ":", "\n", "                ", "edges", ".", "append", "(", "(", "self", ".", "ntoi", "[", "(", "a", ",", "o", ")", "]", ",", "self", ".", "ntoi", "[", "a", "]", ")", ")", "\n", "relations", ".", "append", "(", "2", ")", "\n", "edges", ".", "append", "(", "(", "self", ".", "ntoi", "[", "(", "a", ",", "o", ")", "]", ",", "self", ".", "ntoi", "[", "o", "]", ")", ")", "\n", "relations", ".", "append", "(", "3", ")", "\n", "\n", "", "", "self", ".", "edge_index", "=", "torch", ".", "cat", "(", "(", "torch", ".", "tensor", "(", "[", "e", "[", "0", "]", "for", "e", "in", "edges", "]", ")", ".", "unsqueeze", "(", "0", ")", ",", "torch", ".", "tensor", "(", "[", "e", "[", "1", "]", "for", "e", "in", "edges", "]", ")", ".", "unsqueeze", "(", "0", ")", ")", ")", "\n", "self", ".", "relations", "=", "torch", ".", "tensor", "(", "relations", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.graph.CompositionalGraph.get_target": [[56, 58], ["None"], "methods", ["None"], ["", "def", "get_target", "(", "self", ",", "ai", ",", "oi", ")", ":", "\n", "        ", "return", "self", ".", "ntoi", "[", "(", "self", ".", "attributes", "[", "ai", "*", "self", ".", "ppc", "]", ",", "self", ".", "objects", "[", "oi", "*", "self", ".", "ppc", "]", ")", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.hsic.sigma_estimation": [[7, 20], ["hsic.distmat", "D.detach().cpu().numpy.detach().cpu().numpy", "numpy.tril_indices", "numpy.median", "torch.cat", "numpy.mean", "D.detach().cpu().numpy.detach().cpu", "D.detach().cpu().numpy.detach"], "function", ["home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.hsic.distmat"], ["def", "sigma_estimation", "(", "X", ",", "Y", ")", ":", "\n", "    ", "\"\"\" sigma from median distance\n    \"\"\"", "\n", "D", "=", "distmat", "(", "torch", ".", "cat", "(", "[", "X", ",", "Y", "]", ")", ")", "\n", "D", "=", "D", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "Itri", "=", "np", ".", "tril_indices", "(", "D", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "Tri", "=", "D", "[", "Itri", "]", "\n", "med", "=", "np", ".", "median", "(", "Tri", ")", "\n", "if", "med", "<=", "0", ":", "\n", "        ", "med", "=", "np", ".", "mean", "(", "Tri", ")", "\n", "", "if", "med", "<", "1E-2", ":", "\n", "        ", "med", "=", "1E-2", "\n", "", "return", "med", "\n", "\n"]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.hsic.distmat": [[22, 31], ["torch.sum", "r.view.view", "torch.mm", "torch.abs", "torch.transpose", "torch.transpose().expand_as", "r.view.expand_as", "torch.transpose"], "function", ["None"], ["", "def", "distmat", "(", "X", ")", ":", "\n", "    ", "\"\"\" distance matrix\n    \"\"\"", "\n", "r", "=", "torch", ".", "sum", "(", "X", "*", "X", ",", "1", ")", "\n", "r", "=", "r", ".", "view", "(", "[", "-", "1", ",", "1", "]", ")", "\n", "a", "=", "torch", ".", "mm", "(", "X", ",", "torch", ".", "transpose", "(", "X", ",", "0", ",", "1", ")", ")", "\n", "D", "=", "r", ".", "expand_as", "(", "a", ")", "-", "2", "*", "a", "+", "torch", ".", "transpose", "(", "r", ",", "0", ",", "1", ")", ".", "expand_as", "(", "a", ")", "\n", "D", "=", "torch", ".", "abs", "(", "D", ")", "\n", "return", "D", "\n", "\n"]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.hsic.kernelmat": [[33, 54], ["int", "hsic.distmat", "torch.mm", "torch.eye", "torch.exp().type", "X.size", "torch.ones", "hsic.sigma_estimation", "torch.exp().type", "X.size", "torch.exp", "RuntimeError", "torch.exp", "torch.max", "torch.min"], "function", ["home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.hsic.distmat", "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.hsic.sigma_estimation"], ["", "def", "kernelmat", "(", "X", ",", "sigma", ")", ":", "\n", "    ", "\"\"\" kernel matrix baker\n    \"\"\"", "\n", "m", "=", "int", "(", "X", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "H", "=", "torch", ".", "eye", "(", "m", ")", "-", "(", "1.", "/", "m", ")", "*", "torch", ".", "ones", "(", "[", "m", ",", "m", "]", ")", "\n", "Dxx", "=", "distmat", "(", "X", ")", "\n", "\n", "if", "sigma", ":", "\n", "        ", "variance", "=", "2.", "*", "sigma", "*", "sigma", "*", "X", ".", "size", "(", ")", "[", "1", "]", "\n", "Kx", "=", "torch", ".", "exp", "(", "-", "Dxx", "/", "variance", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "# kernel matrices", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "sx", "=", "sigma_estimation", "(", "X", ",", "X", ")", "\n", "Kx", "=", "torch", ".", "exp", "(", "-", "Dxx", "/", "(", "2.", "*", "sx", "*", "sx", ")", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "", "except", "RuntimeError", "as", "e", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Unstable sigma {} with maximum/minimum input ({},{})\"", ".", "format", "(", "\n", "sx", ",", "torch", ".", "max", "(", "X", ")", ",", "torch", ".", "min", "(", "X", ")", ")", ")", "\n", "\n", "", "", "Kxc", "=", "torch", ".", "mm", "(", "Kx", ",", "H", ")", "\n", "\n", "return", "Kxc", "\n", "\n"]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.hsic.distcorr": [[56, 60], ["hsic.distmat", "torch.exp", "torch.mean"], "function", ["home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.hsic.distmat"], ["", "def", "distcorr", "(", "X", ",", "sigma", "=", "1.0", ")", ":", "\n", "    ", "X", "=", "distmat", "(", "X", ")", "\n", "X", "=", "torch", ".", "exp", "(", "-", "X", "/", "(", "2.", "*", "sigma", "*", "sigma", ")", ")", "\n", "return", "torch", ".", "mean", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.hsic.compute_kernel": [[62, 72], ["x.unsqueeze.size", "y.unsqueeze.size", "x.unsqueeze.size", "x.unsqueeze.unsqueeze", "y.unsqueeze.unsqueeze", "x.unsqueeze.expand", "y.unsqueeze.expand", "torch.exp", "float"], "function", ["None"], ["", "def", "compute_kernel", "(", "x", ",", "y", ")", ":", "\n", "    ", "x_size", "=", "x", ".", "size", "(", "0", ")", "\n", "y_size", "=", "y", ".", "size", "(", "0", ")", "\n", "dim", "=", "x", ".", "size", "(", "1", ")", "\n", "x", "=", "x", ".", "unsqueeze", "(", "1", ")", "# (x_size, 1, dim)", "\n", "y", "=", "y", ".", "unsqueeze", "(", "0", ")", "# (1, y_size, dim)", "\n", "tiled_x", "=", "x", ".", "expand", "(", "x_size", ",", "y_size", ",", "dim", ")", "\n", "tiled_y", "=", "y", ".", "expand", "(", "x_size", ",", "y_size", ",", "dim", ")", "\n", "kernel_input", "=", "(", "tiled_x", "-", "tiled_y", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", "2", ")", "/", "float", "(", "dim", ")", "\n", "return", "torch", ".", "exp", "(", "-", "kernel_input", ")", "# (x_size, y_size)", "\n", "\n"]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.hsic.mmd": [[74, 96], ["hsic.distmat", "hsic.distmat", "hsic.distmat", "torch.exp", "torch.exp", "torch.exp", "hsic.sigma_estimation", "hsic.sigma_estimation", "hsic.sigma_estimation", "torch.exp", "torch.exp", "torch.cat", "torch.mean", "torch.mean", "torch.mean", "x.size", "x.size"], "function", ["home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.hsic.distmat", "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.hsic.distmat", "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.hsic.distmat", "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.hsic.sigma_estimation", "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.hsic.sigma_estimation", "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.hsic.sigma_estimation"], ["", "def", "mmd", "(", "x", ",", "y", ",", "sigma", "=", "None", ",", "use_cuda", "=", "True", ",", "to_numpy", "=", "False", ")", ":", "\n", "    ", "Dxx", "=", "distmat", "(", "x", ")", "\n", "Dyy", "=", "distmat", "(", "y", ")", "\n", "\n", "if", "sigma", ":", "\n", "        ", "Kx", "=", "torch", ".", "exp", "(", "-", "Dxx", "/", "(", "2.", "*", "sigma", "*", "sigma", ")", ")", "# kernel matrices", "\n", "Ky", "=", "torch", ".", "exp", "(", "-", "Dyy", "/", "(", "2.", "*", "sigma", "*", "sigma", ")", ")", "\n", "sxy", "=", "sigma", "\n", "", "else", ":", "\n", "        ", "sx", "=", "sigma_estimation", "(", "x", ",", "x", ")", "\n", "sy", "=", "sigma_estimation", "(", "y", ",", "y", ")", "\n", "sxy", "=", "sigma_estimation", "(", "x", ",", "y", ")", "\n", "Kx", "=", "torch", ".", "exp", "(", "-", "Dxx", "/", "(", "2.", "*", "sx", "*", "sx", ")", ")", "\n", "Ky", "=", "torch", ".", "exp", "(", "-", "Dyy", "/", "(", "2.", "*", "sy", "*", "sy", ")", ")", "\n", "\n", "", "Dxy", "=", "distmat", "(", "torch", ".", "cat", "(", "[", "x", ",", "y", "]", ")", ")", "\n", "Dxy", "=", "Dxy", "[", ":", "x", ".", "size", "(", ")", "[", "0", "]", ",", "x", ".", "size", "(", ")", "[", "0", "]", ":", "]", "\n", "Kxy", "=", "torch", ".", "exp", "(", "-", "Dxy", "/", "(", "1.", "*", "sxy", "*", "sxy", ")", ")", "\n", "\n", "mmdval", "=", "torch", ".", "mean", "(", "Kx", ")", "+", "torch", ".", "mean", "(", "Ky", ")", "-", "2", "*", "torch", ".", "mean", "(", "Kxy", ")", "\n", "\n", "return", "mmdval", "\n", "\n"]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.hsic.mmd_pxpy_pxy": [[98, 120], ["hsic.distmat", "hsic.distmat", "torch.mean", "torch.mean", "x.cuda.cuda", "y.cuda.cuda", "torch.exp", "torch.exp", "hsic.sigma_estimation", "hsic.sigma_estimation", "torch.exp", "torch.exp", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "function", ["home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.hsic.distmat", "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.hsic.distmat", "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.hsic.sigma_estimation", "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.hsic.sigma_estimation"], ["", "def", "mmd_pxpy_pxy", "(", "x", ",", "y", ",", "sigma", "=", "None", ",", "use_cuda", "=", "True", ",", "to_numpy", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    \"\"\"", "\n", "if", "use_cuda", ":", "\n", "        ", "x", "=", "x", ".", "cuda", "(", ")", "\n", "y", "=", "y", ".", "cuda", "(", ")", "\n", "\n", "", "Dxx", "=", "distmat", "(", "x", ")", "\n", "Dyy", "=", "distmat", "(", "y", ")", "\n", "if", "sigma", ":", "\n", "        ", "Kx", "=", "torch", ".", "exp", "(", "-", "Dxx", "/", "(", "2.", "*", "sigma", "*", "sigma", ")", ")", "# kernel matrices", "\n", "Ky", "=", "torch", ".", "exp", "(", "-", "Dyy", "/", "(", "2.", "*", "sigma", "*", "sigma", ")", ")", "\n", "", "else", ":", "\n", "        ", "sx", "=", "sigma_estimation", "(", "x", ",", "x", ")", "\n", "sy", "=", "sigma_estimation", "(", "y", ",", "y", ")", "\n", "Kx", "=", "torch", ".", "exp", "(", "-", "Dxx", "/", "(", "2.", "*", "sx", "*", "sx", ")", ")", "\n", "Ky", "=", "torch", ".", "exp", "(", "-", "Dyy", "/", "(", "2.", "*", "sy", "*", "sy", ")", ")", "\n", "", "A", "=", "torch", ".", "mean", "(", "Kx", "*", "Ky", ")", "\n", "B", "=", "torch", ".", "mean", "(", "torch", ".", "mean", "(", "Kx", ",", "dim", "=", "0", ")", "*", "torch", ".", "mean", "(", "Ky", ",", "dim", "=", "0", ")", ")", "\n", "C", "=", "torch", ".", "mean", "(", "Kx", ")", "*", "torch", ".", "mean", "(", "Ky", ")", "\n", "mmd_pxpy_pxy_val", "=", "A", "-", "2", "*", "B", "+", "C", "\n", "return", "mmd_pxpy_pxy_val", "\n", "\n"]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.hsic.hsic_regular": [[122, 130], ["hsic.kernelmat", "hsic.kernelmat", "torch.mul", "torch.mean", "kernelmat.t"], "function", ["home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.hsic.kernelmat", "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.hsic.kernelmat"], ["", "def", "hsic_regular", "(", "x", ",", "y", ",", "sigma", "=", "None", ",", "use_cuda", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    \"\"\"", "\n", "Kxc", "=", "kernelmat", "(", "x", ",", "sigma", ")", "\n", "Kyc", "=", "kernelmat", "(", "y", ",", "sigma", ")", "\n", "KtK", "=", "torch", ".", "mul", "(", "Kxc", ",", "Kyc", ".", "t", "(", ")", ")", "\n", "Pxy", "=", "torch", ".", "mean", "(", "KtK", ")", "\n", "return", "Pxy", "\n", "\n"]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.hsic.hsic_normalized": [[132, 143], ["hsic.hsic_regular", "torch.sqrt", "torch.sqrt", "hsic.hsic_regular", "hsic.hsic_regular", "print", "exit"], "function", ["home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.hsic.hsic_regular", "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.hsic.hsic_regular", "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.hsic.hsic_regular"], ["", "def", "hsic_normalized", "(", "x", ",", "y", ",", "sigma", "=", "None", ",", "use_cuda", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    \"\"\"", "\n", "Pxy", "=", "hsic_regular", "(", "x", ",", "y", ",", "sigma", ",", "use_cuda", ")", "\n", "Px", "=", "torch", ".", "sqrt", "(", "hsic_regular", "(", "x", ",", "x", ",", "sigma", ",", "use_cuda", ")", ")", "\n", "Py", "=", "torch", ".", "sqrt", "(", "hsic_regular", "(", "y", ",", "y", ",", "sigma", ",", "use_cuda", ")", ")", "\n", "if", "Py", "==", "0", ":", "\n", "        ", "print", "(", "y", ")", "\n", "exit", "(", ")", "\n", "", "thehsic", "=", "Pxy", "/", "(", "Px", "*", "Py", ")", "\n", "return", "thehsic", "\n", "\n"]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.hsic.hsic_normalized_cca": [[145, 161], ["int", "hsic.kernelmat", "hsic.kernelmat", "torch.eye", "torch.inverse", "torch.inverse", "kernelmat.mm", "kernelmat.mm", "torch.sum", "torch.mul", "x.size", "Kyc.mm.t"], "function", ["home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.hsic.kernelmat", "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.hsic.kernelmat"], ["", "def", "hsic_normalized_cca", "(", "x", ",", "y", ",", "sigma", ",", "use_cuda", "=", "True", ",", "to_numpy", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    \"\"\"", "\n", "m", "=", "int", "(", "x", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "Kxc", "=", "kernelmat", "(", "x", ",", "sigma", "=", "sigma", ")", "\n", "Kyc", "=", "kernelmat", "(", "y", ",", "sigma", "=", "sigma", ")", "\n", "\n", "epsilon", "=", "1E-5", "\n", "K_I", "=", "torch", ".", "eye", "(", "m", ")", "\n", "Kxc_i", "=", "torch", ".", "inverse", "(", "Kxc", "+", "epsilon", "*", "m", "*", "K_I", ")", "\n", "Kyc_i", "=", "torch", ".", "inverse", "(", "Kyc", "+", "epsilon", "*", "m", "*", "K_I", ")", "\n", "Rx", "=", "(", "Kxc", ".", "mm", "(", "Kxc_i", ")", ")", "\n", "Ry", "=", "(", "Kyc", ".", "mm", "(", "Kyc_i", ")", ")", "\n", "Pxy", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "Rx", ",", "Ry", ".", "t", "(", ")", ")", ")", "\n", "\n", "return", "Pxy", "\n", "\n"]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.hsic.pairwise_distances": [[163, 166], ["torch.sum().reshape", "torch.sum().reshape.t", "torch.sum", "torch.mm", "x.t"], "function", ["None"], ["", "def", "pairwise_distances", "(", "x", ")", ":", "\n", "    ", "instances_norm", "=", "torch", ".", "sum", "(", "x", "**", "2", ",", "-", "1", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "return", "-", "2", "*", "torch", ".", "mm", "(", "x", ",", "x", ".", "t", "(", ")", ")", "+", "instances_norm", "+", "instances_norm", ".", "t", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.hsic.GaussianKernelMatrix": [[168, 171], ["hsic.pairwise_distances", "torch.exp"], "function", ["home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.hsic.pairwise_distances"], ["", "def", "GaussianKernelMatrix", "(", "x", ",", "sigma", "=", "1", ")", ":", "\n", "    ", "pairwise_distances_", "=", "pairwise_distances", "(", "x", ")", "\n", "return", "torch", ".", "exp", "(", "-", "pairwise_distances_", "/", "sigma", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.hsic.HSIC": [[173, 182], ["torch.mm().to", "torch.mm().to", "torch.trace", "torch.mm", "torch.mm", "torch.mm", "x.t", "y.t", "torch.eye", "torch.mm", "torch.ones", "torch.mm"], "function", ["None"], ["", "def", "HSIC", "(", "x", ",", "y", ",", "s_x", "=", "1", ",", "s_y", "=", "1", ",", "device", "=", "'cuda'", ")", ":", "\n", "    ", "m", ",", "_", "=", "x", ".", "shape", "\n", "# K = GaussianKernelMatrix(x, s_x).to(device)", "\n", "# L = GaussianKernelMatrix(y, s_y).to(device)", "\n", "K", "=", "torch", ".", "mm", "(", "x", ",", "x", ".", "t", "(", ")", ")", ".", "to", "(", "device", ")", "\n", "L", "=", "torch", ".", "mm", "(", "y", ",", "y", ".", "t", "(", ")", ")", ".", "to", "(", "device", ")", "\n", "H", "=", "(", "torch", ".", "eye", "(", "m", ")", "-", "1.0", "/", "m", "*", "torch", ".", "ones", "(", "(", "m", ",", "m", ")", ")", ")", ".", "to", "(", "device", ")", "\n", "HSIC", "=", "torch", ".", "trace", "(", "torch", ".", "mm", "(", "L", ",", "torch", ".", "mm", "(", "H", ",", "torch", ".", "mm", "(", "K", ",", "H", ")", ")", ")", ")", "/", "(", "(", "m", "-", "1", ")", "**", "2", ")", "\n", "return", "HSIC", "\n", "", ""]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.__init__.get_optimizer": [[4, 19], ["torch.optim.Adam", "torch.optim.lr_scheduler.StepLR", "torch.optim.SGD", "ValueError"], "function", ["None"], ["def", "get_optimizer", "(", "args", ",", "parameters", ")", ":", "\n", "    ", "if", "args", "[", "'optimizer'", "]", "==", "'adam'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "parameters", ",", "lr", "=", "args", "[", "'lr'", "]", ",", "weight_decay", "=", "args", "[", "'weight_decay'", "]", ")", "\n", "", "elif", "args", "[", "'optimizer'", "]", "==", "'SGD'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "parameters", ",", "lr", "=", "args", "[", "'lr'", "]", ",", "momentum", "=", "args", "[", "'momentum'", "]", ",", "weight_decay", "=", "0", ",", "\n", "nesterov", "=", "args", "[", "'nesterov'", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown optimizer {}.'", ".", "format", "(", "args", "[", "'optimizer'", "]", ")", ")", "\n", "\n", "", "if", "args", "[", "'scheduler'", "]", ":", "\n", "        ", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "step_size", "=", "args", "[", "'step_size'", "]", ",", "gamma", "=", "args", "[", "'gamma'", "]", ")", "\n", "", "else", ":", "\n", "        ", "lr_scheduler", "=", "None", "\n", "\n", "", "return", "optimizer", ",", "lr_scheduler", "\n", "", ""]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.skeleton.GraphModel.__init__": [[9, 41], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch_geometric.nn.GCNConv", "dataloaders.get_embeddings().cuda", "attr_head.prototypes.size", "obj_head.prototypes.size", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch_geometric.nn.GCNConv", "torch_geometric.nn.GCNConv", "embeddings[].unsqueeze().unsqueeze", "embeddings[].unsqueeze().unsqueeze", "dataloaders.get_embeddings", "embeddings[].unsqueeze", "embeddings[].unsqueeze", "len"], "methods", ["home.repos.pwc.inspect_result.FrankRuis_ProtoProp.dataloaders.ao_clevr.AOClevr.__init__", "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.dataloaders.__init__.get_embeddings"], ["    ", "def", "__init__", "(", "self", ",", "backbone", ",", "attr_head", ",", "obj_head", ",", "dataset", ",", "back_out", ",", "dim_proto", ",", "dim_hidden", "=", "2048", ",", "dim_out", "=", "512", ",", "dropout", "=", "0", ",", "dset", "=", "None", ",", "glayers", "=", "1", ",", "init_protos", "=", "False", ")", ":", "\n", "        ", "super", "(", "GraphModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "dset", "=", "dset", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "attr_head", "=", "attr_head", "\n", "self", ".", "obj_head", "=", "obj_head", "\n", "self", ".", "dim_proto", "=", "dim_proto", "\n", "self", ".", "protos", "=", "None", "\n", "\n", "# Initialize prototypes with word embeddings (if enabled)", "\n", "if", "init_protos", ":", "\n", "            ", "embeddings", "=", "get_embeddings", "(", "dataset", ")", ".", "cuda", "(", ")", "\n", "apn", "=", "attr_head", ".", "prototypes", ".", "size", "(", "0", ")", "\n", "opn", "=", "obj_head", ".", "prototypes", ".", "size", "(", "0", ")", "\n", "attr_head", ".", "prototypes", "=", "torch", ".", "nn", ".", "Parameter", "(", "embeddings", "[", "-", "(", "apn", "+", "opn", ")", ":", "-", "opn", "]", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", "obj_head", ".", "prototypes", "=", "torch", ".", "nn", ".", "Parameter", "(", "embeddings", "[", "-", "opn", ":", "]", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", "self", ".", "protos", "=", "torch", ".", "nn", ".", "Parameter", "(", "embeddings", "[", ":", "len", "(", "embeddings", ")", "-", "(", "apn", "+", "opn", ")", "]", ")", "\n", "\n", "", "self", ".", "glayers", "=", "glayers", "\n", "if", "back_out", "!=", "dim_out", ":", "\n", "            ", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "back_out", ",", "dim_out", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "dim_out", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "proj", "=", "None", "\n", "\n", "", "if", "self", ".", "glayers", "==", "1", ":", "\n", "            ", "self", ".", "gcn1", "=", "GCNConv", "(", "dim_proto", ",", "dim_out", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "gcn1", "=", "GCNConv", "(", "dim_proto", ",", "dim_hidden", ")", "\n", "", "self", ".", "gcn2", "=", "GCNConv", "(", "dim_hidden", ",", "dim_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.skeleton.GraphModel.forward": [[42, 93], ["skeleton.GraphModel.backbone", "skeleton.GraphModel.pool().flatten", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "skeleton.GraphModel.gcn1", "enumerate", "skeleton.GraphModel.proj", "torch.relu", "torch.relu", "torch.relu", "skeleton.GraphModel.bn", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.dropout", "torch.dropout", "torch.dropout", "graph.edge_index.cuda", "skeleton.GraphModel.gcn2", "skeleton.GraphModel.pool", "head", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "isinstance", "torch.dropout", "torch.dropout", "torch.dropout", "graph.edge_index.cuda", "skeleton.GraphModel.norm", "embeddings[].norm", "emb.t", "embeddings[].t", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "head.get_loss", "skeleton.GraphModel.attr_head.prototypes.view().permute", "skeleton.GraphModel.obj_head.prototypes.view().permute", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "len", "skeleton.GraphModel.attr_head.prototypes.view", "skeleton.GraphModel.obj_head.prototypes.view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "len", "len", "skeleton.GraphModel.attr_head.prototypes.size", "skeleton.GraphModel.obj_head.prototypes.size"], "methods", ["home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.prototype_model.LocalProts.get_loss"], ["", "def", "forward", "(", "self", ",", "x", ",", "attr_truth", "=", "None", ",", "obj_truth", "=", "None", ",", "pair_truth", "=", "None", ",", "graph", "=", "None", ",", "args", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "backbone", "(", "x", ")", "\n", "xc", "=", "self", ".", "pool", "(", "x", ")", ".", "flatten", "(", "1", ")", "\n", "labels", "=", "[", "attr_truth", ",", "obj_truth", "]", "\n", "if", "self", ".", "proj", "is", "not", "None", ":", "\n", "            ", "xc", "=", "self", ".", "proj", "(", "xc", ")", "\n", "xc", "=", "F", ".", "relu", "(", "xc", ")", "\n", "xc", "=", "self", ".", "bn", "(", "xc", ")", "\n", "\n", "", "loss", "=", "0.", "\n", "if", "self", ".", "training", ":", "\n", "            ", "for", "head", "in", "[", "self", ".", "attr_head", ",", "self", ".", "obj_head", "]", ":", "\n", "                ", "sims", ",", "outputs", ",", "distances", "=", "head", "(", "x", ")", "\n", "_", ",", "preds", "=", "torch", ".", "max", "(", "sims", ",", "1", ")", "\n", "\n", "if", "attr_truth", "is", "not", "None", ":", "\n", "                    ", "loss", "+=", "head", ".", "get_loss", "(", "sims", ",", "outputs", ",", "distances", ",", "graph", ",", "args", ",", "labels", ")", "\n", "", "", "loss", "/=", "2", "\n", "\n", "", "ppc", "=", "1", "\n", "attr_protos", "=", "torch", ".", "cat", "(", "[", "*", "self", ".", "attr_head", ".", "prototypes", ".", "view", "(", "(", "self", ".", "attr_head", ".", "prototypes", ".", "size", "(", "0", ")", "//", "ppc", ",", "ppc", ",", "-", "1", ")", ")", ".", "permute", "(", "(", "1", ",", "0", ",", "-", "1", ")", ")", "]", ",", "dim", "=", "1", ")", "\n", "obj_protos", "=", "torch", ".", "cat", "(", "[", "*", "self", ".", "obj_head", ".", "prototypes", ".", "view", "(", "(", "self", ".", "obj_head", ".", "prototypes", ".", "size", "(", "0", ")", "//", "ppc", ",", "ppc", ",", "-", "1", ")", ")", ".", "permute", "(", "(", "1", ",", "0", ",", "-", "1", ")", ")", "]", ",", "dim", "=", "1", ")", "\n", "if", "self", ".", "protos", ":", "\n", "            ", "embeddings", "=", "torch", ".", "cat", "(", "[", "self", ".", "protos", ",", "attr_protos", ",", "obj_protos", "]", ")", "\n", "", "else", ":", "\n", "            ", "embeddings", "=", "torch", ".", "cat", "(", "[", "torch", ".", "zeros", "(", "len", "(", "graph", ".", "compositions", ")", ",", "self", ".", "dim_proto", "*", "ppc", ")", ".", "cuda", "(", ")", ",", "attr_protos", ",", "obj_protos", "]", ")", "\n", "\n", "", "if", "self", ".", "dropout", ">", "0", ":", "\n", "            ", "embeddings", "=", "F", ".", "dropout", "(", "embeddings", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "", "embeddings", "=", "self", ".", "gcn1", "(", "embeddings", ",", "graph", ".", "edge_index", ".", "cuda", "(", ")", ")", "\n", "if", "self", ".", "glayers", ">", "1", "and", "not", "isinstance", "(", "self", ".", "gcn1", ",", "SGConv", ")", ":", "\n", "           ", "if", "self", ".", "dropout", ">", "0", ":", "\n", "               ", "embeddings", "=", "F", ".", "dropout", "(", "embeddings", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "", "embeddings", "=", "self", ".", "gcn2", "(", "embeddings", ",", "graph", ".", "edge_index", ".", "cuda", "(", ")", ")", "\n", "\n", "", "if", "args", "[", "'metric'", "]", "==", "'cosine'", ":", "\n", "            ", "xc", "=", "xc", "/", "xc", ".", "norm", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "emb", "=", "embeddings", "[", ":", "len", "(", "graph", ".", "compositions", ")", "]", "/", "embeddings", "[", ":", "len", "(", "graph", ".", "compositions", ")", "]", ".", "norm", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "xc", "=", "xc", "@", "emb", ".", "t", "(", ")", "\n", "", "else", ":", "\n", "            ", "xc", "=", "xc", "@", "embeddings", "[", ":", "len", "(", "graph", ".", "compositions", ")", "]", ".", "t", "(", ")", "\n", "\n", "", "preds", "=", "{", "}", "\n", "for", "itr", ",", "pair", "in", "enumerate", "(", "self", ".", "dset", ".", "pairs", ")", ":", "\n", "            ", "preds", "[", "pair", "]", "=", "xc", "[", ":", ",", "self", ".", "dset", ".", "pair2idx", "[", "pair", "]", "]", "\n", "\n", "", "if", "attr_truth", "is", "not", "None", ":", "\n", "            ", "loss", "+=", "args", "[", "'l_comp'", "]", "*", "F", ".", "cross_entropy", "(", "xc", ",", "pair_truth", ")", "\n", "\n", "", "return", "loss", ",", "preds", "\n", "", "", ""]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.eval.__init__.Evaluator.__init__": [[16, 66], ["torch.LongTensor", "dict.fromkeys", "torch.BoolTensor", "set", "torch.BoolTensor", "torch.stack", "print", "set", "set", "oracle_obj_mask.append", "print", "set", "set", "print", "set", "set", "torch.BoolTensor"], "methods", ["None"], ["        ", "lr_scheduler", "=", "None", "\n", "\n", "", "return", "optimizer", ",", "lr_scheduler", "\n", "", ""]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.eval.__init__.Evaluator.generate_predictions": [[68, 118], ["scores.clone", "__init__.Evaluator.seen_mask.repeat", "results.update", "results.update", "__init__.Evaluator.closed_mask.repeat", "scores.clone", "scores.clone.clone", "results.update", "results.update", "scores.clone", "scores.clone.clone", "results.update", "results.update", "_scores.topk", "pair_pred.contiguous().view.contiguous().view.contiguous().view", "[].view", "[].view", "__init__.Evaluator.generate_predictions.get_pred_from_scores"], "methods", ["None"], []], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.eval.__init__.Evaluator.score_clf_model": [[119, 138], ["attr_pred.index_select", "obj_pred.index_select", "__init__.Evaluator.generate_predictions", "attr_pred.to", "obj_pred.to", "obj_truth.to"], "methods", ["home.repos.pwc.inspect_result.FrankRuis_ProtoProp.eval.__init__.Evaluator.generate_predictions"], []], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.eval.__init__.Evaluator.score_manifold_model": [[139, 155], ["obj_truth.to.to.to", "torch.stack", "torch.stack.clone", "__init__.Evaluator.generate_predictions", "v.to", "torch.stack.items"], "methods", ["home.repos.pwc.inspect_result.FrankRuis_ProtoProp.eval.__init__.Evaluator.generate_predictions"], []], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.eval.__init__.Evaluator.score_fast_model": [[156, 177], ["__init__.Evaluator.seen_mask.repeat", "__init__.Evaluator.closed_mask.repeat", "scores.clone", "scores.clone.topk", "pair_pred.contiguous().view.contiguous().view.contiguous().view", "results.update", "[].view", "[].view", "pair_pred.contiguous().view.contiguous().view.contiguous"], "methods", ["None"], []], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.eval.__init__.Evaluator.evaluate_predictions": [[178, 322], ["list", "range", "dict", "__init__.Evaluator.evaluate_predictions._process"], "methods", ["None"], []], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.train.train_protoprop.train_model": [[16, 96], ["copy.deepcopy", "eval.Evaluator", "range", "model.load_state_dict", "print", "model.state_dict", "print", "all_pred[].keys", "model.train", "model.eval", "tqdm.tqdm", "optimizer.zero_grad", "all_pred.append", "all_attr_gt.append", "all_obj_gt.append", "all_pair_gt.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "eval.score_model", "eval.evaluate_predictions", "eval.Evaluator.score_model", "eval.Evaluator.evaluate_predictions", "lr_scheduler.step", "print", "copy.deepcopy", "print", "print", "d.to", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "model", "inputs.size", "model.state_dict", "torch.save", "torch.save", "torch.save", "loss.backward", "optimizer.step", "isinstance", "loss.item", "range", "len"], "function", ["home.repos.pwc.inspect_result.FrankRuis_ProtoProp.eval.__init__.Evaluator.evaluate_predictions", "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.eval.__init__.Evaluator.evaluate_predictions"], ["def", "train_model", "(", "model", ",", "optimizer", ",", "lr_scheduler", ",", "dataloaders", ",", "data_sizes", ",", "graph", ",", "args", ",", "prev_acc", "=", "0", ",", "t_metric", "=", "'total'", ",", "device", "=", "'cuda'", ",", "eval", "=", "None", ")", ":", "\n", "    ", "model_params", "=", "copy", ".", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "teval", "=", "Evaluator", "(", "dataloaders", "[", "'val'", "]", ".", "dataset", ",", "None", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "args", "[", "'epochs'", "]", ")", ":", "\n", "        ", "print", "(", "'Starting epoch {}:'", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "for", "phase", "in", "[", "'train'", ",", "'val'", "]", ":", "\n", "            ", "eval", ".", "dset", ".", "phase", "=", "phase", "\n", "teval", ".", "dset", ".", "phase", "=", "phase", "\n", "if", "phase", "==", "'train'", ":", "\n", "                ", "model", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "                ", "model", ".", "eval", "(", ")", "\n", "\n", "", "accuracies", ",", "all_sub_gt", ",", "all_attr_gt", ",", "all_obj_gt", ",", "all_pair_gt", ",", "all_pred", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "running_loss", "=", "0.", "\n", "for", "data", "in", "tqdm", "(", "dataloaders", "[", "phase", "]", ")", "if", "phase", "==", "'train'", "else", "dataloaders", "[", "phase", "]", ":", "\n", "                ", "data", "=", "[", "d", ".", "to", "(", "device", ")", "for", "d", "in", "data", "]", "\n", "inputs", ",", "attr_truth", ",", "obj_truth", ",", "pair_truth", "=", "data", "[", ":", "4", "]", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "with", "torch", ".", "set_grad_enabled", "(", "phase", "==", "'train'", ")", ":", "\n", "                    ", "loss", ",", "preds", "=", "model", "(", "inputs", ",", "attr_truth", ",", "obj_truth", ",", "pair_truth", ",", "graph", ",", "args", ")", "\n", "\n", "if", "phase", "==", "'train'", ":", "\n", "                        ", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "", "all_pred", ".", "append", "(", "preds", ")", "\n", "all_attr_gt", ".", "append", "(", "attr_truth", ")", "\n", "all_obj_gt", ".", "append", "(", "obj_truth", ")", "\n", "all_pair_gt", ".", "append", "(", "pair_truth", ")", "\n", "\n", "running_loss", "+=", "(", "loss", ".", "item", "(", ")", "if", "isinstance", "(", "loss", ",", "torch", ".", "Tensor", ")", "else", "loss", ")", "*", "inputs", ".", "size", "(", "0", ")", "\n", "\n", "", "all_attr_gt", ",", "all_obj_gt", ",", "all_pair_gt", "=", "torch", ".", "cat", "(", "all_attr_gt", ")", ",", "torch", ".", "cat", "(", "all_obj_gt", ")", ",", "torch", ".", "cat", "(", "all_pair_gt", ")", "\n", "\n", "all_pred_dict", "=", "{", "}", "\n", "# Gather values as dict of (attr, obj) as key and list of predictions as values", "\n", "for", "k", "in", "all_pred", "[", "0", "]", ".", "keys", "(", ")", ":", "\n", "                ", "all_pred_dict", "[", "k", "]", "=", "torch", ".", "cat", "(", "\n", "[", "all_pred", "[", "i", "]", "[", "k", "]", "for", "i", "in", "range", "(", "len", "(", "all_pred", ")", ")", "]", ")", "\n", "\n", "# Calculate best unseen accuracy", "\n", "", "if", "phase", "==", "'train'", "or", "phase", "==", "'val'", ":", "\n", "                ", "results", "=", "eval", ".", "score_model", "(", "all_pred_dict", ",", "all_obj_gt", ",", "bias", "=", "1000", ",", "topk", "=", "1", ")", "\n", "stats", "=", "eval", ".", "evaluate_predictions", "(", "results", ",", "all_attr_gt", ",", "all_obj_gt", ",", "all_pair_gt", ",", "all_pred_dict", ",", "\n", "topk", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "results", "=", "teval", ".", "score_model", "(", "all_pred_dict", ",", "all_obj_gt", ",", "bias", "=", "1000", ",", "topk", "=", "1", ")", "\n", "stats", "=", "teval", ".", "evaluate_predictions", "(", "results", ",", "all_attr_gt", ",", "all_obj_gt", ",", "all_pair_gt", ",", "all_pred_dict", ",", "\n", "topk", "=", "1", ")", "\n", "\n", "", "stats", "[", "'a_epoch'", "]", "=", "epoch", "\n", "\n", "if", "phase", "==", "'train'", "and", "lr_scheduler", ":", "\n", "                ", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "", "epoch_loss", "=", "running_loss", "/", "data_sizes", "[", "phase", "]", "\n", "\n", "if", "phase", "==", "'val'", "and", "prev_acc", "<=", "stats", "[", "'best_hm'", "]", ":", "\n", "                ", "print", "(", "'Val accuracy higher than previous best {:.4f}'", ".", "format", "(", "prev_acc", ")", ")", "\n", "prev_acc", "=", "stats", "[", "'best_hm'", "]", "\n", "model_params", "=", "copy", ".", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "\n", "if", "args", "[", "'save_every_best'", "]", ":", "\n", "                    ", "torch", ".", "save", "(", "model", ",", "'out/cur_best.pt'", ")", "\n", "\n", "", "", "if", "phase", "==", "'val'", ":", "\n", "                ", "print", "(", "'{} Loss: {:.4f} Acc: {:.4f} (hm seen {:.4f}, hm unseen {:.4f}, AUC {:.4f}) @ bias {:.4f} (seen {:.4f}, unseen {:.4f})'", ".", "format", "(", "phase", ",", "epoch_loss", ",", "stats", "[", "'best_hm'", "]", ",", "stats", "[", "'hm_seen'", "]", ",", "stats", "[", "'hm_unseen'", "]", ",", "stats", "[", "'AUC'", "]", ",", "stats", "[", "'biasterm'", "]", ",", "stats", "[", "'best_seen'", "]", ",", "stats", "[", "'best_unseen'", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'{} Loss: {:.4f}'", ".", "format", "(", "phase", ",", "epoch_loss", ")", ")", "\n", "\n", "# Load best model", "\n", "", "", "", "model", ".", "load_state_dict", "(", "model_params", ")", "\n", "print", "(", "'Best acc: {:.4f}'", ".", "format", "(", "prev_acc", ")", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.train.train_protoprop.main": [[98, 137], ["print", "torch.autograd.set_detect_anomaly", "torch.autograd.set_detect_anomaly", "torch.autograd.set_detect_anomaly", "dataloaders.get_dataloader", "list", "torch.Sequential().cuda", "model.prototype_model.LocalProts().cuda", "model.prototype_model.LocalProts().cuda", "model.skeleton.GraphModel().cuda", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "print", "model.get_optimizer", "eval.Evaluator", "train_protoprop.train_model", "torchvision.models.resnet18().children", "torch.Sequential", "model.prototype_model.LocalProts", "model.prototype_model.LocalProts", "model.skeleton.GraphModel", "nn.Sequential().cuda.parameters", "list", "graph.get_target", "torchvision.models.resnet18", "len", "len", "set", "set", "train_model.parameters", "nn.Sequential().cuda.parameters"], "function", ["home.repos.pwc.inspect_result.FrankRuis_ProtoProp.dataloaders.__init__.get_dataloader", "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.__init__.get_optimizer", "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.train.train_protoprop.train_model", "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.model.graph.CompositionalGraph.get_target"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "print", "(", "args", ")", "\n", "\n", "# Helps with nan detection", "\n", "torch", ".", "autograd", ".", "set_detect_anomaly", "(", "True", ")", "\n", "\n", "dataloaders", ",", "data_sizes", ",", "graph", ",", "seen", ",", "valdata", "=", "get_dataloader", "(", "args", ")", "\n", "\n", "layers", "=", "list", "(", "resnet18", "(", "pretrained", "=", "True", ")", ".", "children", "(", ")", ")", "\n", "backbone", "=", "nn", ".", "Sequential", "(", "*", "layers", "[", ":", "-", "2", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "amodel", "=", "LocalProts", "(", "args", "[", "'dim_back'", "]", ",", "len", "(", "graph", ".", "attributes", ")", ",", "prot_dim", "=", "args", "[", "'dim_proto'", "]", ",", "\n", "prot_shape", "=", "(", "1", ",", "1", ")", ",", "metric", "=", "args", "[", "'metric'", "]", ",", "pooling", "=", "args", "[", "'pooling'", "]", ",", "proj", "=", "not", "args", "[", "'shared_proj'", "]", ",", "type_", "=", "'attributes'", ",", "i", "=", "0", ")", ".", "cuda", "(", ")", "\n", "omodel", "=", "LocalProts", "(", "args", "[", "'dim_back'", "]", ",", "len", "(", "graph", ".", "objects", ")", ",", "prot_dim", "=", "args", "[", "'dim_proto'", "]", ",", "\n", "prot_shape", "=", "(", "1", ",", "1", ")", ",", "metric", "=", "args", "[", "'metric'", "]", ",", "pooling", "=", "args", "[", "'pooling'", "]", ",", "proj", "=", "not", "args", "[", "'shared_proj'", "]", ",", "type_", "=", "'objects'", ",", "i", "=", "1", ")", ".", "cuda", "(", ")", "\n", "\n", "model", "=", "GraphModel", "(", "backbone", ",", "amodel", ",", "omodel", ",", "args", "[", "'dataset'", "]", ",", "args", "[", "'dim_back'", "]", ",", "args", "[", "'dim_proto'", "]", ",", "args", "[", "'dim_hidden'", "]", ",", "\n", "args", "[", "'dim_out'", "]", ",", "args", "[", "'dropout'", "]", ",", "dset", "=", "valdata", ",", "glayers", "=", "args", "[", "'g_layers'", "]", ",", "init_protos", "=", "args", "[", "'init_protos'", "]", ")", ".", "cuda", "(", ")", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "\n", "print", "(", "'Training model {}.'", ".", "format", "(", "model", ".", "__class__", ".", "__name__", ")", ")", "\n", "\n", "parameters", "=", "[", "\n", "{", "'params'", ":", "backbone", ".", "parameters", "(", ")", "}", ",", "\n", "{", "'params'", ":", "list", "(", "set", "(", "model", ".", "parameters", "(", ")", ")", "-", "set", "(", "backbone", ".", "parameters", "(", ")", ")", ")", ",", "'lr'", ":", "args", "[", "'lr_comp'", "]", "}", "\n", "]", "\n", "optimizer", ",", "lr_scheduler", "=", "get_optimizer", "(", "args", ",", "parameters", ")", "\n", "\n", "seen", "=", "{", "\n", "'attributes'", ":", "{", "e", "[", "0", "]", "for", "e", "in", "seen", "}", ",", "\n", "'objects'", ":", "{", "e", "[", "1", "]", "for", "e", "in", "seen", "}", ",", "\n", "'total'", ":", "seen", ",", "\n", "'comp'", ":", "{", "graph", ".", "get_target", "(", "*", "e", ")", "for", "e", "in", "seen", "}", "\n", "}", "\n", "evaluator", "=", "Evaluator", "(", "valdata", ",", "None", ")", "\n", "\n", "model", "=", "train_model", "(", "model", ",", "optimizer", ",", "lr_scheduler", ",", "dataloaders", ",", "data_sizes", ",", "graph", ",", "args", ",", "t_metric", "=", "'comp'", ",", "device", "=", "'cuda'", ",", "eval", "=", "evaluator", ")", "\n", "\n", "return", "model", ",", "dataloaders", ",", "data_sizes", ",", "graph", ",", "seen", ",", "valdata", "\n", "\n"]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.dataloaders.ut_zappos.ImageLoader.__init__": [[18, 20], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ")", ":", "\n", "        ", "self", ".", "img_dir", "=", "root", "\n", "\n"]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.dataloaders.ut_zappos.ImageLoader.__call__": [[21, 25], ["PIL.Image.open().convert", "PIL.Image.open"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "file", "=", "'%s/%s'", "%", "(", "self", ".", "img_dir", ",", "img", ")", "\n", "img", "=", "Image", ".", "open", "(", "file", ")", ".", "convert", "(", "'RGB'", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.dataloaders.ut_zappos.CompositionDataset.__init__": [[55, 119], ["ut_zappos.imagenet_transform", "ut_zappos.ImageLoader", "ut_zappos.CompositionDataset.parse_split", "ut_zappos.CompositionDataset.get_split_info", "print", "print", "list", "numpy.arange", "sorted", "sorted", "range", "len", "enumerate", "enumerate", "enumerate", "list", "list", "len", "len", "len", "len", "len", "len", "len", "set", "set", "len"], "methods", ["home.repos.pwc.inspect_result.FrankRuis_ProtoProp.dataloaders.ut_zappos.imagenet_transform", "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.dataloaders.ut_zappos.CompositionDataset.parse_split", "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.dataloaders.ut_zappos.CompositionDataset.get_split_info"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "root", ",", "\n", "phase", ",", "\n", "split", "=", "'compositional-split'", ",", "\n", "subset", "=", "False", ",", "\n", "num_negs", "=", "1", ",", "\n", "pair_dropout", "=", "0.0", ",", "\n", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "phase", "=", "phase", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "num_negs", "=", "num_negs", "\n", "self", ".", "pair_dropout", "=", "pair_dropout", "\n", "\n", "self", ".", "feat_dim", "=", "None", "\n", "self", ".", "transform", "=", "imagenet_transform", "(", "phase", ")", "\n", "self", ".", "loader", "=", "ImageLoader", "(", "self", ".", "root", "+", "'/images/'", ")", "\n", "\n", "self", ".", "attrs", ",", "self", ".", "objs", ",", "self", ".", "pairs", ",", "self", ".", "train_pairs", ",", "self", ".", "val_pairs", ",", "self", ".", "test_pairs", "=", "self", ".", "parse_split", "(", ")", "\n", "\n", "self", ".", "train_data", ",", "self", ".", "val_data", ",", "self", ".", "test_data", "=", "self", ".", "get_split_info", "(", ")", "\n", "if", "self", ".", "phase", "==", "'train'", ":", "\n", "            ", "self", ".", "data", "=", "self", ".", "train_data", "\n", "", "elif", "self", ".", "phase", "==", "'val'", ":", "\n", "            ", "self", ".", "data", "=", "self", ".", "val_data", "\n", "", "else", ":", "\n", "            ", "self", ".", "data", "=", "self", ".", "test_data", "\n", "", "if", "subset", ":", "\n", "            ", "ind", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "data", ")", ")", "\n", "ind", "=", "ind", "[", ":", ":", "len", "(", "ind", ")", "//", "1000", "]", "\n", "self", ".", "data", "=", "[", "self", ".", "data", "[", "i", "]", "for", "i", "in", "ind", "]", "\n", "\n", "", "self", ".", "obj2idx", "=", "{", "obj", ":", "idx", "for", "idx", ",", "obj", "in", "enumerate", "(", "self", ".", "objs", ")", "}", "\n", "self", ".", "attr2idx", "=", "{", "attr", ":", "idx", "for", "idx", ",", "attr", "in", "enumerate", "(", "self", ".", "attrs", ")", "}", "\n", "self", ".", "pair2idx", "=", "{", "pair", ":", "idx", "for", "idx", ",", "pair", "in", "enumerate", "(", "self", ".", "pairs", ")", "}", "\n", "\n", "print", "(", "'# train pairs: %d | # val pairs: %d | # test pairs: %d'", "%", "(", "len", "(", "\n", "self", ".", "train_pairs", ")", ",", "len", "(", "self", ".", "val_pairs", ")", ",", "len", "(", "self", ".", "test_pairs", ")", ")", ")", "\n", "print", "(", "'# train images: %d | # val images: %d | # test images: %d'", "%", "\n", "(", "len", "(", "self", ".", "train_data", ")", ",", "len", "(", "self", ".", "val_data", ")", ",", "len", "(", "self", ".", "test_data", ")", ")", ")", "\n", "\n", "# fix later -- affordance thing", "\n", "# return {object: all attrs that occur with obj}", "\n", "self", ".", "obj_affordance", "=", "{", "}", "\n", "self", ".", "train_obj_affordance", "=", "{", "}", "\n", "for", "_obj", "in", "self", ".", "objs", ":", "\n", "            ", "candidates", "=", "[", "\n", "attr", "\n", "for", "(", "_", ",", "attr", ",", "\n", "obj", ")", "in", "self", ".", "train_data", "+", "self", ".", "val_data", "+", "self", ".", "test_data", "\n", "if", "obj", "==", "_obj", "\n", "]", "\n", "self", ".", "obj_affordance", "[", "_obj", "]", "=", "sorted", "(", "list", "(", "set", "(", "candidates", ")", ")", ")", "\n", "\n", "candidates", "=", "[", "\n", "attr", "for", "(", "_", ",", "attr", ",", "obj", ")", "in", "self", ".", "train_data", "if", "obj", "==", "_obj", "\n", "]", "\n", "self", ".", "train_obj_affordance", "[", "_obj", "]", "=", "sorted", "(", "list", "(", "set", "(", "candidates", ")", ")", ")", "\n", "\n", "", "self", ".", "sample_indices", "=", "list", "(", "range", "(", "len", "(", "self", ".", "data", ")", ")", ")", "\n", "self", ".", "sample_pairs", "=", "self", ".", "train_pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.dataloaders.ut_zappos.CompositionDataset.reset_dropout": [[120, 137], ["list", "numpy.random.permutation", "int", "print", "print", "range", "len", "len", "len", "len", "range", "len", "len", "len"], "methods", ["None"], ["", "def", "reset_dropout", "(", "self", ")", ":", "\n", "        ", "self", ".", "sample_indices", "=", "list", "(", "range", "(", "len", "(", "self", ".", "data", ")", ")", ")", "\n", "self", ".", "sample_pairs", "=", "self", ".", "train_pairs", "\n", "\n", "shuffled_ind", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "self", ".", "train_pairs", ")", ")", "\n", "n_pairs", "=", "int", "(", "(", "1", "-", "self", ".", "pair_dropout", ")", "*", "len", "(", "self", ".", "train_pairs", ")", ")", "\n", "self", ".", "sample_pairs", "=", "[", "\n", "self", ".", "train_pairs", "[", "pi", "]", "for", "pi", "in", "shuffled_ind", "[", ":", "n_pairs", "]", "\n", "]", "\n", "print", "(", "'Using {} pairs out of {} pairs right now'", ".", "format", "(", "\n", "n_pairs", ",", "len", "(", "self", ".", "train_pairs", ")", ")", ")", "\n", "self", ".", "sample_indices", "=", "[", "\n", "i", "for", "i", "in", "range", "(", "len", "(", "self", ".", "data", ")", ")", "\n", "if", "(", "self", ".", "data", "[", "i", "]", "[", "1", "]", ",", "self", ".", "data", "[", "i", "]", "[", "2", "]", ")", "in", "self", ".", "sample_pairs", "\n", "]", "\n", "print", "(", "'Using {} images out of {} images right now'", ".", "format", "(", "\n", "len", "(", "self", ".", "sample_indices", ")", ",", "len", "(", "self", ".", "data", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.dataloaders.ut_zappos.CompositionDataset.get_split_info": [[138, 160], ["torch.load", "torch.load", "torch.load", "torch.load", "train_data.append", "val_data.append", "test_data.append"], "methods", ["None"], ["", "def", "get_split_info", "(", "self", ")", ":", "\n", "        ", "data", "=", "torch", ".", "load", "(", "self", ".", "root", "+", "'/metadata_{}.t7'", ".", "format", "(", "self", ".", "split", ")", ")", "\n", "train_data", ",", "val_data", ",", "test_data", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "instance", "in", "data", ":", "\n", "            ", "image", ",", "attr", ",", "obj", ",", "settype", "=", "instance", "[", "'image'", "]", ",", "instance", "[", "\n", "'attr'", "]", ",", "instance", "[", "'obj'", "]", ",", "instance", "[", "'set'", "]", "\n", "\n", "if", "attr", "==", "'NA'", "or", "(", "attr", ",", "\n", "obj", ")", "not", "in", "self", ".", "pairs", "or", "settype", "==", "'NA'", ":", "\n", "# ignore instances with unlabeled attributes", "\n", "# ignore instances that are not in current split", "\n", "                ", "continue", "\n", "\n", "", "data_i", "=", "[", "image", ",", "attr", ",", "obj", "]", "\n", "if", "settype", "==", "'train'", ":", "\n", "                ", "train_data", ".", "append", "(", "data_i", ")", "\n", "", "elif", "settype", "==", "'val'", ":", "\n", "                ", "val_data", ".", "append", "(", "data_i", ")", "\n", "", "else", ":", "\n", "                ", "test_data", ".", "append", "(", "data_i", ")", "\n", "\n", "", "", "return", "train_data", ",", "val_data", ",", "test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.dataloaders.ut_zappos.CompositionDataset.parse_split": [[161, 184], ["ut_zappos.CompositionDataset.parse_split.parse_pairs"], "methods", ["None"], ["", "def", "parse_split", "(", "self", ")", ":", "\n", "        ", "def", "parse_pairs", "(", "pair_list", ")", ":", "\n", "            ", "with", "open", "(", "pair_list", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "pairs", "=", "f", ".", "read", "(", ")", ".", "strip", "(", ")", ".", "split", "(", "'\\n'", ")", "\n", "# pairs = [t.split() if not '_' in t else t.split('_') for t in pairs]", "\n", "pairs", "=", "[", "t", ".", "split", "(", ")", "for", "t", "in", "pairs", "]", "\n", "pairs", "=", "list", "(", "map", "(", "tuple", ",", "pairs", ")", ")", "\n", "", "attrs", ",", "objs", "=", "zip", "(", "*", "pairs", ")", "\n", "return", "attrs", ",", "objs", ",", "pairs", "\n", "\n", "", "tr_attrs", ",", "tr_objs", ",", "tr_pairs", "=", "parse_pairs", "(", "\n", "'%s/%s/train_pairs.txt'", "%", "(", "self", ".", "root", ",", "self", ".", "split", ")", ")", "\n", "vl_attrs", ",", "vl_objs", ",", "vl_pairs", "=", "parse_pairs", "(", "\n", "'%s/%s/val_pairs.txt'", "%", "(", "self", ".", "root", ",", "self", ".", "split", ")", ")", "\n", "ts_attrs", ",", "ts_objs", ",", "ts_pairs", "=", "parse_pairs", "(", "\n", "'%s/%s/test_pairs.txt'", "%", "(", "self", ".", "root", ",", "self", ".", "split", ")", ")", "\n", "\n", "all_attrs", ",", "all_objs", "=", "sorted", "(", "\n", "list", "(", "set", "(", "tr_attrs", "+", "vl_attrs", "+", "ts_attrs", ")", ")", ")", ",", "sorted", "(", "\n", "list", "(", "set", "(", "tr_objs", "+", "vl_objs", "+", "ts_objs", ")", ")", ")", "\n", "all_pairs", "=", "sorted", "(", "list", "(", "set", "(", "tr_pairs", "+", "vl_pairs", "+", "ts_pairs", ")", ")", ")", "\n", "\n", "return", "all_attrs", ",", "all_objs", ",", "all_pairs", ",", "tr_pairs", ",", "vl_pairs", ",", "ts_pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.dataloaders.ut_zappos.CompositionDataset.sample_negative": [[185, 191], ["ut_zappos.CompositionDataset.sample_negative", "numpy.random.choice", "len"], "methods", ["home.repos.pwc.inspect_result.FrankRuis_ProtoProp.dataloaders.ut_zappos.CompositionDataset.sample_negative"], ["", "def", "sample_negative", "(", "self", ",", "attr", ",", "obj", ")", ":", "\n", "        ", "new_attr", ",", "new_obj", "=", "self", ".", "sample_pairs", "[", "np", ".", "random", ".", "choice", "(", "\n", "len", "(", "self", ".", "sample_pairs", ")", ")", "]", "\n", "if", "new_attr", "==", "attr", "and", "new_obj", "==", "obj", ":", "\n", "            ", "return", "self", ".", "sample_negative", "(", "attr", ",", "obj", ")", "\n", "", "return", "(", "self", ".", "attr2idx", "[", "new_attr", "]", ",", "self", ".", "obj2idx", "[", "new_obj", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.dataloaders.ut_zappos.CompositionDataset.sample_affordance": [[192, 197], ["numpy.random.choice", "ut_zappos.CompositionDataset.sample_affordance"], "methods", ["home.repos.pwc.inspect_result.FrankRuis_ProtoProp.dataloaders.ut_zappos.CompositionDataset.sample_affordance"], ["", "def", "sample_affordance", "(", "self", ",", "attr", ",", "obj", ")", ":", "\n", "        ", "new_attr", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "obj_affordance", "[", "obj", "]", ")", "\n", "if", "new_attr", "==", "attr", ":", "\n", "            ", "return", "self", ".", "sample_affordance", "(", "attr", ",", "obj", ")", "\n", "", "return", "self", ".", "attr2idx", "[", "new_attr", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.dataloaders.ut_zappos.CompositionDataset.sample_train_affordance": [[198, 203], ["numpy.random.choice", "ut_zappos.CompositionDataset.sample_train_affordance"], "methods", ["home.repos.pwc.inspect_result.FrankRuis_ProtoProp.dataloaders.ut_zappos.CompositionDataset.sample_train_affordance"], ["", "def", "sample_train_affordance", "(", "self", ",", "attr", ",", "obj", ")", ":", "\n", "        ", "new_attr", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "train_obj_affordance", "[", "obj", "]", ")", "\n", "if", "new_attr", "==", "attr", ":", "\n", "            ", "return", "self", ".", "sample_train_affordance", "(", "attr", ",", "obj", ")", "\n", "", "return", "self", ".", "attr2idx", "[", "new_attr", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.dataloaders.ut_zappos.CompositionDataset.__getitem__": [[204, 215], ["ut_zappos.CompositionDataset.loader", "ut_zappos.CompositionDataset.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "index", "=", "self", ".", "sample_indices", "[", "index", "]", "\n", "image", ",", "attr", ",", "obj", "=", "self", ".", "data", "[", "index", "]", "\n", "img", "=", "self", ".", "loader", "(", "image", ")", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "data", "=", "[", "\n", "img", ",", "self", ".", "attr2idx", "[", "attr", "]", ",", "self", ".", "obj2idx", "[", "obj", "]", ",", "self", ".", "pair2idx", "[", "(", "attr", ",", "obj", ")", "]", "\n", "]", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.dataloaders.ut_zappos.CompositionDataset.__len__": [[216, 218], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sample_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.dataloaders.ut_zappos.chunks": [[11, 15], ["range", "len"], "function", ["None"], ["def", "chunks", "(", "l", ",", "n", ")", ":", "\n", "    ", "\"\"\"Yield successive n-sized chunks from l.\"\"\"", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "l", ")", ",", "n", ")", ":", "\n", "        ", "yield", "l", "[", "i", ":", "i", "+", "n", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.dataloaders.ut_zappos.imagenet_transform": [[27, 49], ["torchvision.Compose", "torchvision.Compose", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "", "def", "imagenet_transform", "(", "phase", ")", ":", "\n", "    ", "\"\"\"\n    Warning, imagenet transforms cut out significant portions of UT-Zappos and C-GQA images.\n    We use them for fair comparison with previous works, but we would recommend using different val and test crops otherwise.\n    \"\"\"", "\n", "mean", ",", "std", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "if", "phase", "==", "'train'", ":", "\n", "        ", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "(", "224", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "\n", "]", ")", "\n", "", "elif", "phase", "==", "'test'", "or", "phase", "==", "'val'", ":", "\n", "        ", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "\n", "]", ")", "\n", "\n", "", "return", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.dataloaders.ut_zappos.get_dataloaders": [[220, 249], ["print", "ut_zappos.CompositionDataset", "ut_zappos.CompositionDataset", "ut_zappos.CompositionDataset", "model.graph.CompositionalGraph", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "len", "len", "len"], "function", ["None"], ["", "", "def", "get_dataloaders", "(", "batch_size", "=", "256", ",", "workers", "=", "1", ",", "undirected", "=", "False", ",", "ao_edges", "=", "False", ")", ":", "\n", "    ", "print", "(", "'Don\\'t forget to fix ImageNet transforms clipping.'", ")", "\n", "train_dataset", "=", "CompositionDataset", "(", "root", "=", "'data/ut-zap50k'", ",", "phase", "=", "'train'", ",", "split", "=", "'compositional-split-natural'", ")", "\n", "val_dataset", "=", "CompositionDataset", "(", "root", "=", "'data/ut-zap50k'", ",", "phase", "=", "'val'", ",", "split", "=", "'compositional-split-natural'", ")", "\n", "test_dataset", "=", "CompositionDataset", "(", "root", "=", "'data/ut-zap50k'", ",", "phase", "=", "'test'", ",", "split", "=", "'compositional-split-natural'", ")", "\n", "seen", "=", "{", "(", "train_dataset", ".", "attr2idx", "[", "a", "]", ",", "train_dataset", ".", "obj2idx", "[", "b", "]", ")", "for", "a", ",", "b", "in", "train_dataset", ".", "train_pairs", "}", "\n", "\n", "attributes", "=", "train_dataset", ".", "attrs", "\n", "objects", "=", "train_dataset", ".", "objs", "\n", "compositions", "=", "train_dataset", ".", "pairs", "\n", "graph", "=", "CompositionalGraph", "(", "attributes", ",", "objects", ",", "compositions", ",", "undirected", "=", "undirected", ",", "ao_edges", "=", "ao_edges", ")", "\n", "\n", "train_loader", "=", "tdata", ".", "DataLoader", "(", "train_dataset", ",", "shuffle", "=", "True", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "workers", ")", "\n", "validation_loader", "=", "tdata", ".", "DataLoader", "(", "val_dataset", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "workers", ")", "\n", "test_loader", "=", "tdata", ".", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "workers", ")", "\n", "\n", "dataloaders", "=", "{", "\n", "'train'", ":", "train_loader", ",", "\n", "'val'", ":", "validation_loader", ",", "\n", "'test'", ":", "test_loader", "\n", "}", "\n", "\n", "data_sizes", "=", "{", "\n", "'train'", ":", "len", "(", "train_dataset", ")", ",", "\n", "'val'", ":", "len", "(", "val_dataset", ")", ",", "\n", "'test'", ":", "len", "(", "test_dataset", ")", "\n", "}", "\n", "\n", "return", "dataloaders", ",", "data_sizes", ",", "graph", ",", "seen", ",", "val_dataset", "\n", "", ""]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.dataloaders.cgqa.get_dataloaders": [[6, 34], ["dataloaders.ut_zappos.CompositionDataset", "dataloaders.ut_zappos.CompositionDataset", "dataloaders.ut_zappos.CompositionDataset", "model.graph.CompositionalGraph", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "len", "len", "len"], "function", ["None"], ["def", "get_dataloaders", "(", "batch_size", "=", "128", ",", "workers", "=", "0", ",", "undirected", "=", "False", ",", "ao_edges", "=", "False", ")", ":", "\n", "    ", "train_dataset", "=", "CompositionDataset", "(", "root", "=", "'data/cgqa'", ",", "phase", "=", "'train'", ",", "split", "=", "'compositional-split-natural'", ")", "\n", "val_dataset", "=", "CompositionDataset", "(", "root", "=", "'data/cgqa'", ",", "phase", "=", "'val'", ",", "split", "=", "'compositional-split-natural'", ")", "\n", "test_dataset", "=", "CompositionDataset", "(", "root", "=", "'data/cgqa'", ",", "phase", "=", "'test'", ",", "split", "=", "'compositional-split-natural'", ")", "\n", "seen", "=", "{", "(", "train_dataset", ".", "attr2idx", "[", "a", "]", ",", "train_dataset", ".", "obj2idx", "[", "b", "]", ")", "for", "a", ",", "b", "in", "train_dataset", ".", "train_pairs", "}", "\n", "\n", "attributes", "=", "train_dataset", ".", "attrs", "\n", "objects", "=", "train_dataset", ".", "objs", "\n", "compositions", "=", "train_dataset", ".", "pairs", "\n", "graph", "=", "CompositionalGraph", "(", "attributes", ",", "objects", ",", "compositions", ",", "undirected", "=", "undirected", ",", "ao_edges", "=", "ao_edges", ")", "\n", "\n", "train_loader", "=", "tdata", ".", "DataLoader", "(", "train_dataset", ",", "shuffle", "=", "True", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "workers", ")", "\n", "validation_loader", "=", "tdata", ".", "DataLoader", "(", "val_dataset", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "workers", ")", "\n", "test_loader", "=", "tdata", ".", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "workers", ")", "\n", "\n", "dataloaders", "=", "{", "\n", "'train'", ":", "train_loader", ",", "\n", "'val'", ":", "validation_loader", ",", "\n", "'test'", ":", "test_loader", "\n", "}", "\n", "\n", "data_sizes", "=", "{", "\n", "'train'", ":", "len", "(", "train_dataset", ")", ",", "\n", "'val'", ":", "len", "(", "val_dataset", ")", ",", "\n", "'test'", ":", "len", "(", "test_dataset", ")", "\n", "}", "\n", "\n", "return", "dataloaders", ",", "data_sizes", ",", "graph", ",", "seen", ",", "val_dataset", "\n", "", ""]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.dataloaders.ao_clevr.AOClevr.__init__": [[20, 37], ["torchvision.transforms.Compose", "pandas.read_csv", "ao_clevr.AOClevr.metadata[].astype", "torch.eye", "torchvision.transforms.ToTensor", "len", "x.convert", "ao_clevr.AOClevr.metadata[].unique"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "root_dir", "=", "'data/images'", ",", "csv_file", "=", "'data/objects_metadata.csv'", ",", "transform", "=", "Compose", "(", "[", "lambda", "x", ":", "x", ".", "convert", "(", "'RGB'", ")", ",", "ToTensor", "(", ")", "]", ")", ",", "one_hot", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            csv_file (string): Path to the csv file with annotations.\n            root_dir (string): Directory with all the images.\n            transform (callable, optional): Optional transform to be applied on a sample.\n        \"\"\"", "\n", "self", ".", "metadata", "=", "pd", ".", "read_csv", "(", "csv_file", ")", "\n", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "attributes", "=", "[", "'color'", ",", "'shape'", ",", "'material'", ",", "'size'", "]", "\n", "self", ".", "one_hot", "=", "one_hot", "\n", "self", ".", "one_hots", "=", "{", "}", "\n", "\n", "for", "a", "in", "self", ".", "attributes", ":", "\n", "            ", "self", ".", "metadata", "[", "a", "]", "=", "self", ".", "metadata", "[", "a", "]", ".", "astype", "(", "'category'", ")", "\n", "self", ".", "one_hots", "[", "a", "]", "=", "torch", ".", "eye", "(", "len", "(", "self", ".", "metadata", "[", "a", "]", ".", "unique", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.dataloaders.ao_clevr.AOClevr.__len__": [[38, 40], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "metadata", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.dataloaders.ao_clevr.AOClevr.__getitem__": [[41, 58], ["torch.is_tensor", "os.path.join", "PIL.Image.open().convert", "idx.tolist.tolist.tolist", "ao_clevr.AOClevr.transform", "numpy.array", "PIL.Image.open", "torch.LongTensor"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "torch", ".", "is_tensor", "(", "idx", ")", ":", "\n", "            ", "idx", "=", "idx", ".", "tolist", "(", ")", "\n", "\n", "", "img_name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "\n", "self", ".", "metadata", ".", "iloc", "[", "idx", ",", "0", "]", ")", "\n", "image", "=", "Image", ".", "open", "(", "img_name", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "\n", "", "if", "self", ".", "one_hot", ":", "\n", "            ", "attributes", "=", "[", "self", ".", "one_hots", "[", "a", "]", "[", "self", ".", "metadata", "[", "a", "]", ".", "cat", ".", "codes", ".", "iloc", "[", "idx", "]", "]", "for", "a", "in", "self", ".", "attributes", "]", "\n", "", "else", ":", "\n", "            ", "attributes", "=", "np", ".", "array", "(", "[", "self", ".", "metadata", "[", "a", "]", ".", "cat", ".", "codes", ".", "iloc", "[", "idx", "]", "for", "a", "in", "self", ".", "attributes", "]", ")", "\n", "\n", "# return image, attributes", "\n", "", "return", "[", "image", ",", "*", "torch", ".", "LongTensor", "(", "attributes", "[", ":", "2", "]", ")", ",", "self", ".", "pair2idx", "[", "(", "self", ".", "attrs", "[", "attributes", "[", "0", "]", "]", ",", "self", ".", "objs", "[", "attributes", "[", "1", "]", "]", ")", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.dataloaders.ao_clevr.AOClevr.get_attribute_name": [[59, 61], ["None"], "methods", ["None"], ["", "def", "get_attribute_name", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "attributes", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.dataloaders.ao_clevr.AOClevr.get_value_name": [[62, 64], ["None"], "methods", ["None"], ["", "def", "get_value_name", "(", "self", ",", "idx", ",", "val", ")", ":", "\n", "        ", "return", "self", ".", "metadata", "[", "self", ".", "attributes", "[", "idx", "]", "]", ".", "cat", ".", "categories", "[", "val", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.dataloaders.ao_clevr.get_data_stats": [[66, 81], ["torch.utils.data.sampler.SubsetRandomSampler", "torch.mean", "torch.mean", "ao_clevr.AOClevr", "random.sample", "means.append", "stds.append", "torch.tensor", "torch.tensor", "list", "torch.mean().numpy", "torch.std().numpy", "torchvision.transforms.Compose", "range", "len", "len", "torch.mean", "torch.std", "torchvision.transforms.ToTensor", "x.convert"], "function", ["None"], ["", "", "def", "get_data_stats", "(", "dataset", "=", "None", ")", ":", "\n", "    ", "if", "not", "dataset", ":", "\n", "        ", "dataset", "=", "AOClevr", "(", "transform", "=", "Compose", "(", "[", "lambda", "x", ":", "x", ".", "convert", "(", "'RGB'", ")", ",", "ToTensor", "(", ")", "]", ")", ")", "\n", "\n", "", "sampler", "=", "SubsetRandomSampler", "(", "sample", "(", "list", "(", "range", "(", "len", "(", "dataset", ")", ")", ")", ",", "len", "(", "dataset", ")", "//", "10", ")", ")", "\n", "means", "=", "[", "]", "\n", "stds", "=", "[", "]", "\n", "for", "idx", "in", "sampler", ":", "\n", "        ", "means", ".", "append", "(", "torch", ".", "mean", "(", "dataset", "[", "idx", "]", "[", "0", "]", ",", "dim", "=", "(", "-", "1", ",", "1", ")", ")", ".", "numpy", "(", ")", ")", "\n", "stds", ".", "append", "(", "torch", ".", "std", "(", "dataset", "[", "idx", "]", "[", "0", "]", ",", "dim", "=", "(", "-", "1", ",", "1", ")", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "mean", "=", "torch", ".", "mean", "(", "torch", ".", "tensor", "(", "means", ")", ",", "dim", "=", "0", ")", "\n", "std", "=", "torch", ".", "mean", "(", "torch", ".", "tensor", "(", "stds", ")", ",", "dim", "=", "0", ")", "\n", "\n", "return", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.dataloaders.ao_clevr.get_dataloaders": [[83, 144], ["ao_clevr.AOClevr", "list", "list", "list", "list", "list", "list", "model.graph.CompositionalGraph", "list", "list", "list", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "open", "pickle.load", "split[].keys", "len", "len", "len", "list.index", "list.index", "len", "len", "len", "AOClevr.metadata[].isin", "AOClevr.metadata[].isin", "AOClevr.metadata[].isin"], "function", ["None"], ["", "def", "get_dataloaders", "(", "transforms", ",", "batch_size", "=", "512", ",", "spl", "=", "'VT'", ",", "seed", "=", "4000", ",", "seen_seed", "=", "0", ",", "workers", "=", "1", ",", "undirected", "=", "False", ",", "ao_edges", "=", "False", ")", ":", "\n", "    ", "filename", "=", "'data/metadata_pickles/metadata_ao_clevr__{}_random__comp_seed_{}__seen_seed_{}__train.pkl'", ".", "format", "(", "\n", "spl", ",", "\n", "seed", ",", "\n", "seen_seed", "\n", ")", "\n", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "file", ":", "\n", "        ", "split", "=", "pickle", ".", "load", "(", "file", ")", "\n", "\n", "", "dataset", "=", "AOClevr", "(", "transform", "=", "transforms", ")", "\n", "attributes", "=", "list", "(", "split", "[", "'attrs'", "]", ")", "\n", "objects", "=", "list", "(", "split", "[", "'objs'", "]", ")", "\n", "compositions", "=", "list", "(", "split", "[", "'pair2idx'", "]", ".", "keys", "(", ")", ")", "\n", "\n", "dataset", ".", "attrs", "=", "attributes", "\n", "dataset", ".", "objs", "=", "objects", "\n", "dataset", ".", "pairs", "=", "compositions", "\n", "\n", "seen", "=", "list", "(", "split", "[", "'seen_pairs'", "]", ")", "\n", "seen_ids", "=", "{", "(", "attributes", ".", "index", "(", "a", ")", ",", "objects", ".", "index", "(", "o", ")", ")", "for", "(", "a", ",", "o", ")", "in", "seen", "}", "\n", "unseen_val", "=", "list", "(", "split", "[", "'unseen_closed_val_pairs'", "]", ")", "\n", "unseen_test", "=", "list", "(", "split", "[", "'unseen_closed_test_pairs'", "]", ")", "\n", "\n", "graph", "=", "CompositionalGraph", "(", "attributes", ",", "objects", ",", "compositions", ",", "undirected", "=", "undirected", ",", "seen", "=", "seen", ",", "ao_edges", "=", "ao_edges", ")", "\n", "dataset", ".", "attr2idx", "=", "{", "a", ":", "graph", ".", "ntoi", "[", "a", "]", "-", "len", "(", "compositions", ")", "for", "a", "in", "attributes", "}", "\n", "dataset", ".", "obj2idx", "=", "{", "o", ":", "graph", ".", "ntoi", "[", "o", "]", "-", "len", "(", "compositions", ")", "-", "len", "(", "attributes", ")", "for", "o", "in", "objects", "}", "\n", "dataset", ".", "pair2idx", "=", "graph", ".", "ntoi", "\n", "\n", "dataset", ".", "train_pairs", "=", "seen", "\n", "dataset", ".", "val_pairs", "=", "unseen_val", "\n", "dataset", ".", "test_pairs", "=", "unseen_test", "\n", "dataset", ".", "phase", "=", "'val'", "\n", "\n", "train_indices", "=", "list", "(", "dataset", ".", "metadata", ".", "loc", "[", "dataset", ".", "metadata", "[", "'image_filename'", "]", ".", "isin", "(", "\n", "{", "e", "[", "0", "]", "for", "e", "in", "split", "[", "'train_data'", "]", "if", "e", "[", "1", ":", "]", "in", "seen", "and", "e", "[", "1", ":", "]", "not", "in", "unseen_val", "}", ")", "]", ".", "index", ")", "\n", "val_indices", "=", "list", "(", "dataset", ".", "metadata", ".", "loc", "[", "dataset", ".", "metadata", "[", "'image_filename'", "]", ".", "isin", "(", "\n", "{", "e", "[", "0", "]", "for", "e", "in", "split", "[", "'val_data'", "]", "if", "e", "[", "1", ":", "]", "}", ")", "]", ".", "index", ")", "\n", "test_indices", "=", "list", "(", "dataset", ".", "metadata", ".", "loc", "[", "dataset", ".", "metadata", "[", "'image_filename'", "]", ".", "isin", "(", "\n", "{", "e", "[", "0", "]", "for", "e", "in", "split", "[", "'test_data'", "]", "if", "e", "[", "1", ":", "]", "}", ")", "]", ".", "index", ")", "\n", "\n", "train_sampler", "=", "SubsetRandomSampler", "(", "train_indices", ")", "\n", "valid_sampler", "=", "SubsetRandomSampler", "(", "val_indices", ")", "\n", "test_sampler", "=", "SubsetRandomSampler", "(", "test_indices", ")", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "sampler", "=", "train_sampler", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "validation_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "sampler", "=", "valid_sampler", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "sampler", "=", "test_sampler", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "dataloaders", "=", "{", "\n", "'train'", ":", "train_loader", ",", "\n", "'val'", ":", "validation_loader", ",", "\n", "'test'", ":", "test_loader", "\n", "}", "\n", "\n", "data_sizes", "=", "{", "\n", "'train'", ":", "len", "(", "train_indices", ")", ",", "\n", "'val'", ":", "len", "(", "val_indices", ")", ",", "\n", "'test'", ":", "len", "(", "test_indices", ")", "\n", "}", "\n", "\n", "return", "dataloaders", ",", "data_sizes", ",", "graph", ",", "seen_ids", ",", "dataset", "\n", "", ""]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.dataloaders.__init__.get_dataloader": [[9, 27], ["torchvision.Compose", "dataloaders.ao_clevr.get_dataloaders", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Normalize", "dataloaders.ut_zappos.get_dataloaders", "dataloaders.cgqa.get_dataloaders", "ValueError"], "function", ["home.repos.pwc.inspect_result.FrankRuis_ProtoProp.dataloaders.ao_clevr.get_dataloaders", "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.dataloaders.ao_clevr.get_dataloaders", "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.dataloaders.ao_clevr.get_dataloaders"], ["nesterov", "=", "args", "[", "'nesterov'", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown optimizer {}.'", ".", "format", "(", "args", "[", "'optimizer'", "]", ")", ")", "\n", "\n", "", "if", "args", "[", "'scheduler'", "]", ":", "\n", "        ", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "step_size", "=", "args", "[", "'step_size'", "]", ",", "gamma", "=", "args", "[", "'gamma'", "]", ")", "\n", "", "else", ":", "\n", "        ", "lr_scheduler", "=", "None", "\n", "\n", "", "return", "optimizer", ",", "lr_scheduler", "\n", "", ""]], "home.repos.pwc.inspect_result.FrankRuis_ProtoProp.dataloaders.__init__.get_embeddings": [[29, 40], ["torch.load", "torch.load", "torch.load", "torch.cat", "ValueError"], "function", ["None"], []]}