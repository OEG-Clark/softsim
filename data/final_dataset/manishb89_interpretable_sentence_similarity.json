{"home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.embed.embedding.ChunkEmbedding.__init__": [[7, 13], ["emb_reader.vocab_len", "emb_reader.vocab_dim"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "emb_reader", ")", ":", "\n", "        ", "self", ".", "vocab_size", "=", "emb_reader", ".", "vocab_len", "(", ")", "\n", "self", ".", "vocab_dim", "=", "emb_reader", ".", "vocab_dim", "(", ")", "\n", "self", ".", "padding_idx", "=", "self", ".", "vocab_size", "-", "1", "\n", "self", ".", "emb_reader", "=", "emb_reader", "\n", "self", ".", "embedding", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.embed.embedding.ChunkEmbedding._load_pretrained": [[14, 22], ["embedding.ChunkEmbedding.emb_reader.embedding_matrix", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.Embedding.from_pretrained", "torch.Embedding.from_pretrained", "f"], "methods", ["None"], ["", "def", "_load_pretrained", "(", "f", ")", ":", "\n", "        ", "def", "wrapper", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "weight_matrix", "=", "self", ".", "emb_reader", ".", "embedding_matrix", "(", ")", "\n", "weight_matrix", "=", "torch", ".", "FloatTensor", "(", "weight_matrix", ")", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", ".", "from_pretrained", "(", "weight_matrix", ")", "\n", "self", ".", "embedding", ".", "weight", ".", "requires_grad", "=", "False", "\n", "return", "f", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.embed.embedding.ChunkEmbedding.torch_chunk_embedding": [[23, 26], ["None"], "methods", ["None"], ["", "@", "_load_pretrained", "\n", "def", "torch_chunk_embedding", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "embedding", "\n", "", "", ""]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.training.holder.Holder.__setitem__": [[3, 5], ["None"], "methods", ["None"], ["    ", "def", "__setitem__", "(", "self", ",", "key", ",", "item", ")", ":", "\n", "        ", "self", ".", "__dict__", "[", "key", "]", "=", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.training.holder.Holder.__getitem__": [[6, 8], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "__dict__", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.training.holder.Holder.__repr__": [[9, 11], ["repr"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "repr", "(", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.training.holder.Holder.__len__": [[12, 14], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.training.holder.Holder.__delitem__": [[15, 17], ["None"], "methods", ["None"], ["", "def", "__delitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "del", "self", ".", "__dict__", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.training.holder.Holder.clear": [[18, 20], ["holder.Holder.__dict__.clear"], "methods", ["home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.training.holder.Holder.clear"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__dict__", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.training.holder.Holder.copy": [[21, 23], ["holder.Holder.__dict__.copy"], "methods", ["home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.training.holder.Holder.copy"], ["", "def", "copy", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__dict__", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.training.holder.Holder.has_key": [[24, 26], ["None"], "methods", ["None"], ["", "def", "has_key", "(", "self", ",", "k", ")", ":", "\n", "        ", "return", "k", "in", "self", ".", "__dict__", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.training.holder.Holder.update": [[27, 29], ["holder.Holder.__dict__.update"], "methods", ["home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.training.holder.Holder.update"], ["", "def", "update", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "__dict__", ".", "update", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.training.holder.Holder.keys": [[30, 32], ["holder.Holder.__dict__.keys"], "methods", ["home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.training.holder.Holder.keys"], ["", "def", "keys", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__dict__", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.training.holder.Holder.values": [[33, 35], ["holder.Holder.__dict__.values"], "methods", ["home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.training.holder.Holder.values"], ["", "def", "values", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__dict__", ".", "values", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.training.holder.Holder.items": [[36, 38], ["holder.Holder.__dict__.items"], "methods", ["home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.training.holder.Holder.items"], ["", "def", "items", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__dict__", ".", "items", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.training.holder.Holder.pop": [[39, 41], ["holder.Holder.__dict__.pop"], "methods", ["home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.training.holder.Holder.pop"], ["", "def", "pop", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "return", "self", ".", "__dict__", ".", "pop", "(", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.training.holder.Holder.__cmp__": [[42, 44], ["holder.Holder.__cmp__"], "methods", ["home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.training.holder.Holder.__cmp__"], ["", "def", "__cmp__", "(", "self", ",", "dict_", ")", ":", "\n", "        ", "return", "self", ".", "__cmp__", "(", "self", ".", "__dict__", ",", "dict_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.training.holder.Holder.__contains__": [[45, 47], ["None"], "methods", ["None"], ["", "def", "__contains__", "(", "self", ",", "item", ")", ":", "\n", "        ", "return", "item", "in", "self", ".", "__dict__", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.training.holder.Holder.__iter__": [[48, 50], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.training.holder.Holder.__unicode__": [[51, 53], ["unicode", "repr"], "methods", ["None"], ["", "def", "__unicode__", "(", "self", ")", ":", "\n", "        ", "return", "unicode", "(", "repr", "(", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.training.configuration.parse_args": [[5, 36], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.getcwd", "os.getcwd"], "function", ["home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.training.configuration.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"interpretable sentence similarity\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--dataset_type'", ",", "default", "=", "'headlines'", ",", "choices", "=", "[", "'headlines'", ",", "'images'", "]", ",", "\n", "help", "=", "'headlines or images'", ")", "\n", "parser", ".", "add_argument", "(", "'--constraint'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use FOL constraints'", ")", "\n", "parser", ".", "add_argument", "(", "'--resource_suffix'", ",", "default", "=", "'cn_combined_unigram_content_only.json'", ",", "\n", "help", "=", "'constraint file name after fol.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--train_path'", ",", "default", "=", "'../datasets/sts_16/train_2015_10_22.utf-8/'", ",", "\n", "help", "=", "'base path to train dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_path'", ",", "default", "=", "'../datasets/sts_16/test/'", ",", "\n", "help", "=", "'base path to test dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--emb_type'", ",", "default", "=", "'chunk'", ",", "help", "=", "'type of the embedding'", ",", "choices", "=", "[", "\"chunk\"", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--train_embedding'", ",", "default", "=", "os", ".", "getcwd", "(", ")", "+", "'/resources/bert_base_uncased_input_headlines_1536._emb.bin'", ",", "help", "=", "'train embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_embedding'", ",", "default", "=", "os", ".", "getcwd", "(", ")", "+", "'/resources/bert_base_uncased_testinput_headlines_1536._emb.bin'", ",", "help", "=", "'test embeddings'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--rho'", ",", "default", "=", "4.0", ",", "type", "=", "float", ",", "help", "=", "'rho'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpuid'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "'gpuid'", ")", "\n", "parser", ".", "add_argument", "(", "'--check_start_epoch'", ",", "default", "=", "5", ",", "type", "=", "int", ",", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--tol'", ",", "default", "=", "1e-3", ",", "help", "=", "'tolerance'", ")", "\n", "parser", ".", "add_argument", "(", "'--pat'", ",", "default", "=", "5", ",", "help", "=", "'patience'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--input_dim'", ",", "default", "=", "1536", ",", "type", "=", "int", ",", "help", "=", "'embedding dimension'", ")", "# 1536", "\n", "parser", ".", "add_argument", "(", "'--hidden_dim'", ",", "default", "=", "768", ",", "type", "=", "int", ",", "help", "=", "'Pointer network hidden dimension'", ")", "# 150", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "default", "=", "32", ",", "type", "=", "int", ",", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--num_epoch'", ",", "default", "=", "50", ",", "type", "=", "int", ",", "help", "=", "'number of epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_script'", ",", "default", "=", "'../scripts/evalF1.pl'", ",", "help", "=", "'eval script path'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.scripts.external_eval.evaluate_alignment": [[5, 30], ["enumerate", "lxml.etree.Element", "xml.sax.saxutils.unescape", "dict", "subprocess.Popen", "float", "assignments.append", "lxml.etree.SubElement", "ET.SubElement.set", "ET.SubElement.set", "lxml.etree.SubElement", "lxml.etree.tostring", "open", "fp.write", "trainer.predict_assignment", "str", "subprocess.Popen.stdout.read().split", "subprocess.Popen.stdout.read"], "function", ["home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.corpus.corpus.DatasetReader.read"], ["def", "evaluate_alignment", "(", "trainer", ",", "test_loader", ",", "script_file", ",", "gold_ali_file", ",", "tmp_file_name", "=", "'/tmp/output'", ")", ":", "\n", "    ", "assignments", "=", "[", "]", "\n", "for", "idx", ",", "p", "in", "enumerate", "(", "test_loader", ".", "dataset", ")", ":", "\n", "        ", "pr", "=", "trainer", ".", "predict_assignment", "(", "p", ")", "[", "1", "]", "\n", "assignments", ".", "append", "(", "(", "idx", "+", "1", ",", "pr", ")", ")", "\n", "\n", "", "sentences", "=", "ET", ".", "Element", "(", "\"sentences\"", ")", "\n", "for", "al", "in", "assignments", ":", "\n", "        ", "sentence", "=", "ET", ".", "SubElement", "(", "sentences", ",", "\"sentence\"", ")", "\n", "sentence", ".", "set", "(", "\"id\"", ",", "str", "(", "al", "[", "0", "]", ")", ")", "\n", "sentence", ".", "set", "(", "\"status\"", ",", "\"\"", ")", "\n", "alignment", "=", "ET", ".", "SubElement", "(", "sentence", ",", "\"alignment\"", ")", "\n", "#Dummy fill the rest of the columns, as we are interested only in alignment", "\n", "s", "=", "\"\\n\"", ".", "join", "(", "[", "e", "+", "\" // EQUI // 5 // for the Philippines\"", "for", "e", "in", "al", "[", "1", "]", "]", ")", "\n", "alignment", ".", "text", "=", "\"\\n\"", "+", "s", "+", "\"\\n\"", "\n", "\n", "", "xml_data", "=", "unescape", "(", "ET", ".", "tostring", "(", "sentences", ")", ")", "\n", "with", "open", "(", "tmp_file_name", ",", "\"w\"", ")", "as", "fp", ":", "\n", "        ", "fp", ".", "write", "(", "xml_data", ")", "\n", "\n", "", "fixed_env", "=", "dict", "(", "os", ".", "environ", ",", "LC_CTYPE", "=", "'en_US.UTF-8'", ",", "LC_ALL", "=", "'en_US.UTF-8'", ")", "\n", "p", "=", "subprocess", ".", "Popen", "(", "[", "'perl'", ",", "script_file", ",", "gold_ali_file", ",", "tmp_file_name", "]", ",", "stdout", "=", "subprocess", ".", "PIPE", ",", "env", "=", "fixed_env", ")", "\n", "f1_score", "=", "float", "(", "p", ".", "stdout", ".", "read", "(", ")", ".", "split", "(", ")", "[", "2", "]", ")", "\n", "\n", "return", "f1_score", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.scripts.preprocess.process_spacy": [[8, 16], ["spacy_nlp", "tok.lemma_.replace"], "function", ["None"], ["def", "process_spacy", "(", "all_sentences", ")", ":", "\n", "# all_sent1_lemma = [[process_spacy(chunk) for chunk in sent1] for sent1 in all_sent1]", "\n", "\t", "for", "sentence", "in", "all_sentences", ":", "\n", "\t\t", "for", "chunk", "in", "sentence", ":", "\n", "\t\t\t", "tokenized", "=", "spacy_nlp", "(", "chunk", ")", "\n", "lemma", "=", "[", "tok", ".", "lemma_", ".", "replace", "(", "' '", ",", "''", ")", "for", "tok", "in", "tokenized", "if", "not", "tok", ".", "is_space", "]", "\n", "\n", "", "", "return", "lemma", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.scripts.preprocess.read_text": [[18, 24], ["codecs.open", "fp.readlines", "line.split"], "function", ["None"], ["", "def", "read_text", "(", "fpath", ")", ":", "\n", "        ", "lines", "=", "None", "\n", "with", "codecs", ".", "open", "(", "fpath", ",", "mode", "=", "\"rt\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "fp", ":", "\n", "            ", "lines", "=", "fp", ".", "readlines", "(", ")", "\n", "lines", "=", "[", "line", ".", "split", "(", "\"\\n\"", ")", "[", "0", "]", "for", "line", "in", "lines", "]", "\n", "", "return", "lines", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.scripts.preprocess.read_chunks": [[26, 36], ["codecs.open", "fp.readlines", "[].strip", "l[].split", "e.strip().decode", "line.split", "e.strip"], "function", ["None"], ["", "def", "read_chunks", "(", "fpath", ")", ":", "\n", "    ", "chunks", "=", "None", "\n", "with", "codecs", ".", "open", "(", "fpath", ",", "mode", "=", "\"rt\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "fp", ":", "\n", "        ", "chunks", "=", "fp", ".", "readlines", "(", ")", "\n", "chunks", "=", "[", "line", ".", "split", "(", "\"\\n\"", ")", "[", "0", "]", ".", "strip", "(", ")", "for", "line", "in", "chunks", "]", "\n", "chunks", "=", "[", "l", "[", "1", ":", "-", "1", "]", ".", "split", "(", "\"] [\"", ")", "for", "l", "in", "chunks", "]", "\n", "chunks", "=", "[", "[", "e", ".", "strip", "(", ")", ".", "decode", "(", ")", "for", "e", "in", "l", "]", "for", "l", "in", "chunks", "]", "\n", "\n", "# chunks = [[e.split() for ix,e in enumerate(l)] for l in chunks]", "\n", "", "return", "chunks", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.scripts.preprocess.main": [[45, 65], ["parser.parse_args", "preprocess.read_chunks", "preprocess.read_chunks", "codecs.open", "codecs.open", "f1.writelines", "f2.writelines", "preprocess.process_spacy", "preprocess.process_spacy"], "function", ["home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.training.configuration.parse_args", "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.scripts.preprocess.read_chunks", "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.scripts.preprocess.read_chunks", "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.scripts.preprocess.process_spacy", "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.scripts.preprocess.process_spacy"], ["def", "main", "(", "args", ")", ":", "\n", "\t", "opt", "=", "parser", ".", "parse_args", "(", "args", ")", "\n", "all_sent1", "=", "read_chunks", "(", "opt", ".", "sent1", ")", "\n", "all_sent2", "=", "read_chunks", "(", "opt", ".", "sent2", ")", "\n", "\n", "all_sent1_lemma", "=", "[", "[", "process_spacy", "(", "chunk", ")", "for", "chunk", "in", "sent1", "]", "for", "sent1", "in", "all_sent1", "]", "\n", "all_sent2_lemma", "=", "[", "[", "process_spacy", "(", "chunk", ")", "for", "chunk", "in", "sent2", "]", "for", "sent2", "in", "all_sent2", "]", "\n", "\n", "all_sent1_lemma", "=", "[", "[", "' '", ".", "join", "(", "chunk", ")", "for", "chunk", "in", "sent", "]", "for", "sent", "in", "all_sent1_lemma", "]", "\n", "all_sent1_lemma", "=", "[", "' ] [ '", ".", "join", "(", "sent", ")", "for", "sent", "in", "all_sent1_lemma", "]", "\n", "all_sent1_lemma", "=", "[", "'[ '", "+", "sent", "+", "' ]'", "for", "sent", "in", "all_sent1_lemma", "]", "\n", "\n", "all_sent2_lemma", "=", "[", "[", "' '", ".", "join", "(", "chunk", ")", "for", "chunk", "in", "sent", "]", "for", "sent", "in", "all_sent2_lemma", "]", "\n", "all_sent2_lemma", "=", "[", "' ] [ '", ".", "join", "(", "sent", ")", "for", "sent", "in", "all_sent2_lemma", "]", "\n", "all_sent2_lemma", "=", "[", "'[ '", "+", "sent", "+", "' ]'", "for", "sent", "in", "all_sent2_lemma", "]", "\n", "# print all_sent1_lemma[:5]", "\n", "\n", "with", "codecs", ".", "open", "(", "opt", ".", "out1", ",", "'w+'", ",", "'utf-8'", ")", "as", "f1", ",", "codecs", ".", "open", "(", "opt", ".", "out2", ",", "'w+'", ",", "'utf-8'", ")", "as", "f2", ":", "\n", "\t\t", "f1", ".", "writelines", "(", "[", "sent1", "+", "'\\n'", "for", "sent1", "in", "all_sent1_lemma", "]", ")", "\n", "f2", ".", "writelines", "(", "[", "sent2", "+", "'\\n'", "for", "sent2", "in", "all_sent2_lemma", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.corpus.corpus.SentenceAlignment.__init__": [[46, 55], ["corpus.SentenceAlignment.form_alignments"], "methods", ["home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.corpus.corpus.SentenceAlignment.form_alignments"], ["def", "__init__", "(", "self", ",", "alignment_text", ",", "lc", ",", "rc", ",", "s1", ",", "s2", ",", "idx", ")", ":", "\n", "        ", "self", ".", "alignment_text", "=", "alignment_text", "\n", "self", ".", "lc", "=", "lc", "\n", "self", ".", "rc", "=", "rc", "\n", "self", ".", "chunks", "=", "[", "]", "\n", "self", ".", "sidx", "=", "idx", "\n", "self", ".", "s1", "=", "s1", "\n", "self", ".", "s2", "=", "s2", "\n", "self", ".", "form_alignments", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.corpus.corpus.SentenceAlignment.form_alignments": [[56, 84], ["corpus.SentenceAlignment.alignment_text.split", "chunk_text.strip.strip.strip", "[].split", "[].split", "zip", "zip", "corpus.chunk_tiler", "corpus.chunk_tiler", "itertools.product", "int", "int", "chunk_text1.strip", "chunk_text2.strip", "chunk_text1.split", "chunk_text2.split", "corpus.ChunkAlignment", "corpus.SentenceAlignment.chunks.append", "chunk_token_id1.split", "chunk_token_id2.split", "chunk_text.strip.strip.split", "chunk_text.strip.strip.split"], "methods", ["home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.corpus.corpus.chunk_tiler", "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.corpus.corpus.chunk_tiler"], ["", "def", "form_alignments", "(", "self", ")", ":", "\n", "        ", "chunks_text", "=", "self", ".", "alignment_text", ".", "split", "(", "\"\\n\"", ")", "\n", "for", "chunk_text", "in", "chunks_text", ":", "\n", "            ", "chunk_text", "=", "chunk_text", ".", "strip", "(", ")", "\n", "if", "not", "chunk_text", ":", "continue", "\n", "chunk_token_id1", ",", "chunk_token_id2", "=", "chunk_text", ".", "split", "(", "\"//\"", ")", "[", "0", "]", ".", "split", "(", "\"==\"", ")", "\n", "\n", "chunk_token_id1", "=", "[", "int", "(", "idx", ")", "for", "idx", "in", "chunk_token_id1", ".", "split", "(", ")", "]", "\n", "chunk_token_id2", "=", "[", "int", "(", "idx", ")", "for", "idx", "in", "chunk_token_id2", ".", "split", "(", ")", "]", "\n", "\n", "chunk_text1", ",", "chunk_text2", "=", "chunk_text", ".", "split", "(", "\"//\"", ")", "[", "-", "1", "]", ".", "split", "(", "\"==\"", ")", "\n", "chunk_text1", ",", "chunk_text2", "=", "chunk_text1", ".", "strip", "(", ")", ",", "chunk_text2", ".", "strip", "(", ")", "\n", "\n", "chunk_seg1", "=", "zip", "(", "chunk_text1", ".", "split", "(", ")", ",", "chunk_token_id1", ")", "\n", "chunk_seg2", "=", "zip", "(", "chunk_text2", ".", "split", "(", ")", ",", "chunk_token_id2", ")", "\n", "\n", "expanded_left_chunk", "=", "[", "]", "\n", "expanded_right_chunk", "=", "[", "]", "\n", "\n", "chunk_tiler", "(", "chunk_seg1", ",", "self", ".", "lc", ",", "expanded_left_chunk", ")", "\n", "chunk_tiler", "(", "chunk_seg2", ",", "self", ".", "rc", ",", "expanded_right_chunk", ")", "\n", "\n", "if", "expanded_left_chunk", "is", "None", "or", "expanded_right_chunk", "is", "None", ":", "\n", "                ", "continue", "\n", "\n", "", "for", "c1", ",", "c2", "in", "product", "(", "expanded_left_chunk", ",", "expanded_right_chunk", ")", ":", "\n", "                ", "chunk", "=", "ChunkAlignment", "(", "chunk_text", ",", "c1", ",", "c2", ")", "\n", "self", ".", "chunks", ".", "append", "(", "chunk", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.corpus.corpus.ChunkAlignment.__init__": [[89, 95], ["corpus.ChunkAlignment.form_chunks"], "methods", ["home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.corpus.corpus.ChunkAlignment.form_chunks"], ["def", "__init__", "(", "self", ",", "chunk_text", ",", "c1", ",", "c2", ")", ":", "\n", "        ", "self", ".", "chunk_text", "=", "chunk_text", "\n", "self", ".", "c1", "=", "c1", "\n", "self", ".", "c2", "=", "c2", "\n", "self", ".", "idx", "=", "None", "\n", "self", ".", "form_chunks", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.corpus.corpus.ChunkAlignment.form_chunks": [[96, 102], ["corpus.ChunkAlignment.chunk_text.split", "segments[].strip", "segments[].strip"], "methods", ["None"], ["", "def", "form_chunks", "(", "self", ")", ":", "\n", "        ", "segments", "=", "self", ".", "chunk_text", ".", "split", "(", "\"//\"", ")", "\n", "self", ".", "type", "=", "segments", "[", "1", "]", ".", "strip", "(", ")", "\n", "self", ".", "chunk1", "=", "self", ".", "c1", "\n", "self", ".", "chunk2", "=", "self", ".", "c2", "\n", "self", ".", "score", "=", "segments", "[", "2", "]", ".", "strip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.corpus.corpus.DatasetReader.__init__": [[114, 128], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "file_path_1", ",", "file_path_2", ",", "file_path_1_chunk", ",", "\n", "file_path_2_chunk", ",", "file_alignment", ")", ":", "\n", "        ", "self", ".", "fp1", "=", "file_path_1", "\n", "self", ".", "fp2", "=", "file_path_2", "\n", "self", ".", "fp1_chunk", "=", "file_path_1_chunk", "\n", "self", ".", "fp2_chunk", "=", "file_path_2_chunk", "\n", "self", ".", "fp_align", "=", "file_alignment", "\n", "\n", "self", ".", "dataset", "=", "None", "\n", "self", ".", "left_chunks", "=", "None", "\n", "self", ".", "right_chunks", "=", "None", "\n", "self", ".", "alignments", "=", "None", "\n", "self", ".", "max_chunk_len", "=", "0", "\n", "self", ".", "max_chunks", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.corpus.corpus.DatasetReader.__read_text": [[129, 135], ["codecs.open", "fp.readlines", "[].strip().lower", "[].strip", "line.split"], "methods", ["None"], ["", "def", "__read_text", "(", "self", ",", "fpath", ")", ":", "\n", "        ", "lines", "=", "None", "\n", "with", "codecs", ".", "open", "(", "fpath", ",", "mode", "=", "\"rt\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "fp", ":", "\n", "            ", "lines", "=", "fp", ".", "readlines", "(", ")", "\n", "lines", "=", "[", "line", ".", "split", "(", "\"\\n\"", ")", "[", "0", "]", ".", "strip", "(", ")", ".", "lower", "(", ")", "for", "line", "in", "lines", "]", "\n", "", "return", "lines", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.corpus.corpus.DatasetReader.__read_chunks": [[136, 164], ["codecs.open", "fp.readlines", "[].strip().lower", "l[].split", "chunks_with_id.append", "e.strip", "e.split", "len", "chunk_with_id.append", "len", "len", "[].strip", "enumerate", "len", "enumerate", "len", "line.split"], "methods", ["None"], ["", "def", "__read_chunks", "(", "self", ",", "fpath", ")", ":", "\n", "        ", "chunks", "=", "None", "\n", "with", "codecs", ".", "open", "(", "fpath", ",", "mode", "=", "\"rt\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "fp", ":", "\n", "            ", "chunks", "=", "fp", ".", "readlines", "(", ")", "\n", "chunks", "=", "[", "line", ".", "split", "(", "\"\\n\"", ")", "[", "0", "]", ".", "strip", "(", ")", ".", "lower", "(", ")", "for", "line", "in", "chunks", "]", "\n", "chunks", "=", "[", "l", "[", "1", ":", "-", "1", "]", ".", "split", "(", "\"] [\"", ")", "for", "l", "in", "chunks", "]", "\n", "chunks", "=", "[", "[", "e", ".", "strip", "(", ")", "for", "e", "in", "l", "]", "for", "l", "in", "chunks", "]", "\n", "\n", "chunks", "=", "[", "[", "e", ".", "split", "(", ")", "for", "ix", ",", "e", "in", "enumerate", "(", "l", ")", "]", "for", "l", "in", "chunks", "]", "\n", "chunks_with_id", "=", "[", "]", "\n", "for", "chunk", "in", "chunks", ":", "\n", "                ", "chunk_with_id", "=", "[", "]", "\n", "idx", "=", "0", "\n", "for", "w", "in", "chunk", ":", "\n", "                    ", "wl", "=", "len", "(", "w", ")", "\n", "w", "=", "[", "(", "w0", ",", "idx", "+", "i", "+", "1", ")", "for", "i", ",", "w0", "in", "enumerate", "(", "w", ")", "]", "\n", "chunk_with_id", ".", "append", "(", "w", ")", "\n", "idx", "+=", "wl", "\n", "", "chunks_with_id", ".", "append", "(", "chunk_with_id", ")", "\n", "\n", "\n", "", "for", "chunk", "in", "chunks_with_id", ":", "\n", "                ", "if", "len", "(", "chunk", ")", ">", "self", ".", "max_chunks", ":", "\n", "                    ", "self", ".", "max_chunks", "=", "len", "(", "chunk", ")", "\n", "", "for", "e", "in", "chunk", ":", "\n", "                    ", "if", "len", "(", "e", ")", ">", "self", ".", "max_chunk_len", ":", "\n", "                        ", "self", ".", "max_chunk_len", "=", "len", "(", "e", ")", "*", "5", "\n", "", "", "", "", "return", "chunks_with_id", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.corpus.corpus.DatasetReader.read": [[165, 192], ["corpus.DatasetReader.__read_text", "corpus.DatasetReader.__read_text", "corpus.DatasetReader.__read_chunks", "corpus.DatasetReader.__read_chunks", "zip", "codecs.open", "fp.read", "alignments.encode.encode.replace().replace", "alignments.encode.encode.encode", "xml.fromstring", "xml.fromstring.findall", "enumerate", "[].text.lower", "corpus.SentenceAlignment", "corpus.DatasetReader.sentence_alignments.append", "alignments.encode.encode.replace", "sentence.text.split", "s[].strip", "sentence.findall"], "methods", ["home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.corpus.corpus.DatasetReader.__read_text", "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.corpus.corpus.DatasetReader.__read_text", "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.corpus.corpus.DatasetReader.__read_chunks", "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.corpus.corpus.DatasetReader.__read_chunks", "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.corpus.corpus.DatasetReader.read"], ["", "def", "read", "(", "self", ")", ":", "\n", "        ", "left_lines", "=", "self", ".", "__read_text", "(", "self", ".", "fp1", ")", "\n", "right_lines", "=", "self", ".", "__read_text", "(", "self", ".", "fp2", ")", "\n", "self", ".", "left_chunks", "=", "self", ".", "__read_chunks", "(", "self", ".", "fp1_chunk", ")", "\n", "self", ".", "right_chunks", "=", "self", ".", "__read_chunks", "(", "self", ".", "fp2_chunk", ")", "\n", "\n", "self", ".", "dataset", "=", "zip", "(", "left_lines", ",", "right_lines", ")", "\n", "self", ".", "sentence_alignments", "=", "[", "]", "\n", "\n", "# Read the alignments file as XML, this is not straightforward", "\n", "# some preprocessing is needed", "\n", "with", "codecs", ".", "open", "(", "self", ".", "fp_align", ",", "mode", "=", "\"rt\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "fp", ":", "\n", "            ", "alignments", "=", "fp", ".", "read", "(", ")", "\n", "#This to escape failure of XML parsing", "\n", "alignments", "=", "alignments", ".", "replace", "(", "\"<==>\"", ",", "\"==\"", ")", ".", "replace", "(", "\"&\"", ",", "\"&amp;\"", ")", "\n", "alignments", "=", "alignments", ".", "encode", "(", "\"ascii\"", ",", "errors", "=", "\"ignore\"", ")", "\n", "tree", "=", "ET", ".", "fromstring", "(", "alignments", ")", "\n", "sentences", "=", "tree", ".", "findall", "(", "\"sentence\"", ")", "\n", "for", "idx", ",", "sentence", "in", "enumerate", "(", "sentences", ")", ":", "\n", "                ", "sentence_text", "=", "sentence", ".", "text", ".", "split", "(", "\"\\n\"", ")", "[", "1", ":", "-", "1", "]", "\n", "s1", ",", "s2", "=", "[", "s", "[", "2", ":", "]", ".", "strip", "(", ")", "for", "s", "in", "sentence_text", "]", "\n", "sentence_alignment", "=", "sentence", ".", "findall", "(", "\"alignment\"", ")", "[", "0", "]", ".", "text", ".", "lower", "(", ")", "\n", "lc", "=", "self", ".", "left_chunks", "[", "idx", "]", "\n", "rc", "=", "self", ".", "right_chunks", "[", "idx", "]", "\n", "sentence_alignment", "=", "SentenceAlignment", "(", "sentence_alignment", ",", "lc", ",", "\n", "rc", ",", "s1", ",", "s2", ",", "idx", "+", "1", ")", "\n", "self", ".", "sentence_alignments", ".", "append", "(", "sentence_alignment", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.corpus.corpus.TrainerDatasetReader.__init__": [[201, 211], ["embed.embedding.ChunkEmbedding", "embed.embedding.ChunkEmbedding.torch_chunk_embedding"], "methods", ["home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.embed.embedding.ChunkEmbedding.torch_chunk_embedding"], ["    ", "def", "__init__", "(", "self", ",", "dataset_reader", ",", "emb_reader", ",", "cfg", ")", ":", "\n", "#assert isinstance(dataset_reader, DatasetReader), \"dataset_reader must be an object of class DatasetReader\"", "\n", "#assert isinstance(emb_reader, VB.EmbeddingReader), \"emb_reader must be an instance of class EmbeddingReader\"", "\n", "        ", "self", ".", "reader", "=", "dataset_reader", "\n", "self", ".", "emb_reader", "=", "emb_reader", "\n", "self", ".", "bert_tokenizer", "=", "self", ".", "emb_reader", ".", "bert_tokenizer", "\n", "chunk_emb_reader", "=", "EM", ".", "ChunkEmbedding", "(", "emb_reader", ")", "\n", "self", ".", "chunk_embedding", "=", "chunk_emb_reader", ".", "torch_chunk_embedding", "(", ")", "\n", "self", ".", "emb_type", "=", "self", ".", "emb_reader", ".", "emb_type", "\n", "self", ".", "cfg", "=", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.corpus.corpus.TrainerDatasetReader.__len__": [[212, 214], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "reader", ".", "sentence_alignments", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.corpus.corpus.TrainerDatasetReader._init_training": [[215, 312], ["f", "set", "enumerate", "sklearn.preprocessing.LabelEncoder", "corpus.TrainerDatasetReader.type_encoder.fit", "set", "list", "len", "list", "len", "list.extend", "list.extend", "str", "corpus.TrainerDatasetReader.emb_reader.vocab_to_index", "corpus.TrainerDatasetReader.emb_reader.vocab_to_index", "list", "set", "set", "list", "list", "chunk.extend", "list", "list", "chunk.extend", "len", "len", "numpy.array2string", "numpy.array2string", "corpus.TrainerDatasetReader.emb_reader.vocab_to_index", "corpus.TrainerDatasetReader.emb_reader.vocab_to_index", "set.add", "filter", "filter", "corpus.chunk_identifier", "corpus.chunk_identifier", "open", "json.load", "list", "list", "numpy.array", "r[].strip", "numpy.array", "l[].strip", "STOP_WORDS.get", "STOP_WORDS.get", "list", "list", "len", "len", "itertools.chain", "zip", "zip", "itertools.chain", "zip", "zip", "len", "len", "corpus.TrainerDatasetReader.bert_tokenizer.tokenize", "corpus.TrainerDatasetReader.bert_tokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.corpus.corpus.chunk_identifier", "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.corpus.corpus.chunk_identifier"], ["", "def", "_init_training", "(", "f", ")", ":", "\n", "        ", "def", "wrapper", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "if", "not", "wrapper", ".", "initialized", ":", "\n", "                ", "types", "=", "set", "(", ")", "\n", "for", "s_idx", ",", "sentence_alignment", "in", "enumerate", "(", "self", ".", "reader", ".", "sentence_alignments", ")", ":", "\n", "                    ", "chunk1_set", ",", "chunk2_set", "=", "set", "(", ")", ",", "set", "(", ")", "\n", "aligned", "=", "set", "(", ")", "\n", "\n", "left_chunks", "=", "list", "(", "self", ".", "reader", ".", "left_chunks", "[", "s_idx", "]", ")", "\n", "if", "self", ".", "bert_tokenizer", ":", "\n", "                        ", "left_chunks", "=", "[", "[", "[", "(", "t", ",", "token_idx", ")", "for", "t", "in", "self", ".", "bert_tokenizer", ".", "tokenize", "(", "token", ")", "]", "for", "token", ",", "token_idx", "in", "chunk", "]", "for", "chunk", "in", "left_chunks", "]", "\n", "left_chunks", "=", "[", "list", "(", "chain", "(", "*", "lc", ")", ")", "for", "lc", "in", "left_chunks", "]", "\n", "\n", "\n", "", "left_chunks", ",", "left_chunk_ids", "=", "[", "zip", "(", "*", "lc", ")", "[", "0", "]", "for", "lc", "in", "left_chunks", "]", ",", "[", "zip", "(", "*", "lc", ")", "[", "1", "]", "for", "lc", "in", "left_chunks", "]", "\n", "left_chunks", "=", "[", "list", "(", "lc", ")", "for", "lc", "in", "left_chunks", "]", "\n", "left_chunk_ids", "=", "[", "list", "(", "ids", ")", "for", "ids", "in", "left_chunk_ids", "]", "\n", "\n", "sentence_alignment", ".", "num_left_chunks", "=", "len", "(", "left_chunks", ")", "\n", "sentence_alignment", ".", "left_chunk_ids", "=", "left_chunk_ids", "\n", "\n", "for", "chunk", "in", "left_chunks", ":", "\n", "                        ", "chunk", ".", "extend", "(", "[", "'-PAD-'", "]", "*", "(", "self", ".", "reader", ".", "max_chunk_len", "-", "len", "(", "chunk", ")", ")", ")", "\n", "\n", "", "right_chunks", "=", "list", "(", "self", ".", "reader", ".", "right_chunks", "[", "s_idx", "]", ")", "\n", "if", "self", ".", "bert_tokenizer", ":", "\n", "                        ", "right_chunks", "=", "[", "[", "[", "(", "t", ",", "token_idx", ")", "for", "t", "in", "self", ".", "bert_tokenizer", ".", "tokenize", "(", "token", ")", "]", "for", "token", ",", "token_idx", "in", "chunk", "]", "for", "chunk", "in", "right_chunks", "]", "\n", "right_chunks", "=", "[", "list", "(", "chain", "(", "*", "lc", ")", ")", "for", "lc", "in", "right_chunks", "]", "\n", "\n", "\n", "", "right_chunks", ",", "right_chunk_ids", "=", "[", "zip", "(", "*", "rc", ")", "[", "0", "]", "for", "rc", "in", "right_chunks", "]", ",", "[", "zip", "(", "*", "rc", ")", "[", "1", "]", "for", "rc", "in", "right_chunks", "]", "\n", "\n", "right_chunks", "=", "[", "list", "(", "rc", ")", "for", "rc", "in", "right_chunks", "]", "\n", "right_chunk_ids", "=", "[", "list", "(", "ids", ")", "for", "ids", "in", "right_chunk_ids", "]", "\n", "sentence_alignment", ".", "right_chunk_ids", "=", "right_chunk_ids", "\n", "sentence_alignment", ".", "num_right_chunks", "=", "len", "(", "right_chunks", ")", "\n", "\n", "for", "chunk", "in", "right_chunks", ":", "\n", "                        ", "chunk", ".", "extend", "(", "[", "'-PAD-'", "]", "*", "(", "self", ".", "reader", ".", "max_chunk_len", "-", "len", "(", "chunk", ")", ")", ")", "\n", "\n", "", "num_chunks_l", ",", "num_chunks_r", "=", "len", "(", "left_chunks", ")", ",", "len", "(", "right_chunks", ")", "\n", "\n", "pad_l", "=", "self", ".", "reader", ".", "max_chunks", "-", "num_chunks_l", "\n", "pad_r", "=", "self", ".", "reader", ".", "max_chunks", "-", "num_chunks_r", "\n", "\n", "pad_l", "=", "[", "[", "'-PAD-'", "]", "*", "self", ".", "reader", ".", "max_chunk_len", "]", "*", "pad_l", "\n", "pad_r", "=", "[", "[", "'-PAD-'", "]", "*", "self", ".", "reader", ".", "max_chunk_len", "]", "*", "pad_r", "\n", "\n", "left_chunks", ".", "extend", "(", "pad_l", ")", "\n", "right_chunks", ".", "extend", "(", "pad_r", ")", "\n", "\n", "s_id", "=", "str", "(", "s_idx", "+", "1", ")", "\n", "r_chunk_ids", "=", "[", "np", ".", "array2string", "(", "np", ".", "array", "(", "r", ")", ",", "separator", "=", "\",\"", ")", "for", "r", "in", "right_chunk_ids", "]", "\n", "r_chunk_ids", "=", "[", "s_id", "+", "\"_r_\"", "+", "r", "[", "1", ":", "-", "1", "]", ".", "strip", "(", ")", "for", "r", "in", "r_chunk_ids", "]", "\n", "right_chunk_emb_ids", "=", "self", ".", "emb_reader", ".", "vocab_to_index", "(", "r_chunk_ids", ")", "\n", "\n", "l_chunk_ids", "=", "[", "np", ".", "array2string", "(", "np", ".", "array", "(", "l", ")", ",", "separator", "=", "\",\"", ")", "for", "l", "in", "left_chunk_ids", "]", "\n", "l_chunk_ids", "=", "[", "s_id", "+", "\"_l_\"", "+", "l", "[", "1", ":", "-", "1", "]", ".", "strip", "(", ")", "for", "l", "in", "l_chunk_ids", "]", "\n", "left_chunk_emb_ids", "=", "self", ".", "emb_reader", ".", "vocab_to_index", "(", "l_chunk_ids", ")", "\n", "\n", "sentence_alignment", ".", "left_chunk_emb_ids", "=", "left_chunk_emb_ids", "\n", "sentence_alignment", ".", "right_chunk_emb_ids", "=", "right_chunk_emb_ids", "\n", "\n", "left_content_mask", "=", "[", "[", "STOP_WORDS", ".", "get", "(", "t", ",", "1.0", ")", "for", "t", "in", "lc", "]", "for", "lc", "in", "left_chunks", "]", "\n", "sentence_alignment", ".", "left_content_mask", "=", "left_content_mask", "\n", "\n", "right_content_mask", "=", "[", "[", "STOP_WORDS", ".", "get", "(", "t", ",", "1.0", ")", "for", "t", "in", "rc", "]", "for", "rc", "in", "right_chunks", "]", "\n", "sentence_alignment", ".", "right_content_mask", "=", "right_content_mask", "\n", "\n", "sentence_alignment", ".", "left_chunks_tokenized", "=", "[", "self", ".", "emb_reader", ".", "vocab_to_index", "(", "tokens", ")", "for", "tokens", "in", "left_chunks", "]", "\n", "sentence_alignment", ".", "right_chunks_tokenized", "=", "[", "self", ".", "emb_reader", ".", "vocab_to_index", "(", "tokens", ")", "for", "tokens", "in", "right_chunks", "]", "\n", "\n", "for", "chunk", "in", "sentence_alignment", ".", "chunks", ":", "\n", "                        ", "types", ".", "add", "(", "chunk", ".", "type", ")", "\n", "chunk1", ",", "chunk2", "=", "list", "(", "chunk", ".", "chunk1", ")", ",", "list", "(", "chunk", ".", "chunk2", ")", "\n", "chunk", ".", "seq_len", "=", "[", "len", "(", "chunk1", ")", ",", "len", "(", "chunk2", ")", "]", "\n", "\n", "chunk1", "=", "filter", "(", "lambda", "e", ":", "e", "!=", "'-PAD-'", ",", "chunk1", ")", "\n", "chunk2", "=", "filter", "(", "lambda", "e", ":", "e", "!=", "'-PAD-'", ",", "chunk2", ")", "\n", "\n", "chunk1_idx", "=", "chunk_identifier", "(", "chunk1", ",", "self", ".", "reader", ".", "left_chunks", "[", "s_idx", "]", ")", "\n", "chunk2_idx", "=", "chunk_identifier", "(", "chunk2", ",", "self", ".", "reader", ".", "right_chunks", "[", "s_idx", "]", ")", "\n", "if", "chunk1_idx", "!=", "-", "1", "and", "chunk2_idx", "!=", "-", "1", ":", "\n", "                            ", "chunk", ".", "idx", "=", "[", "chunk1_idx", ",", "chunk2_idx", "]", "\n", "\n", "\n", "", "", "", "self", ".", "type_encoder", "=", "LabelEncoder", "(", ")", "\n", "self", ".", "type_encoder", ".", "fit", "(", "list", "(", "types", ")", ")", "\n", "wrapper", ".", "initialized", "=", "True", "\n", "\n", "# Load FOL resource(s)", "\n", "if", "self", ".", "cfg", ".", "constr_res_path", ":", "\n", "                    ", "with", "open", "(", "self", ".", "cfg", ".", "constr_res_path", ",", "'r'", ")", "as", "fp", ":", "\n", "                        ", "self", ".", "constr_res", "=", "json", ".", "load", "(", "fp", ")", "\n", "", "", "", "return", "f", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "wrapper", ".", "initialized", "=", "False", "\n", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.corpus.corpus.TrainerDatasetReader.score_transform": [[314, 319], ["int"], "methods", ["None"], ["", "def", "score_transform", "(", "self", ",", "score", ")", ":", "\n", "        ", "if", "score", "==", "\"NIL\"", ":", "\n", "            ", "return", "0", "\n", "", "else", ":", "\n", "            ", "return", "int", "(", "score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.corpus.corpus.TrainerDatasetReader.__getitem__": [[320, 424], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor().float.extend", "torch.tensor().float", "torch.tensor", "torch.tensor", "torch.tensor().float.extend", "torch.tensor().float", "torch.tensor", "torch.tensor", "numpy.zeros", "numpy.zeros", "numpy.zeros", "syntactic.SyntacticSimilarity", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "corpus.TrainerDatasetReader.constr_res.get", "torch.tensor", "sum", "torch.tensor", "sum", "corpus.TrainerDatasetReader.chunk_embedding", "torch.mean", "corpus.TrainerDatasetReader.chunk_embedding", "torch.mean", "corpus.TrainerDatasetReader.chunk_embedding", "corpus.TrainerDatasetReader.chunk_embedding", "corpus.TrainerDatasetReader.chunk_embedding", "corpus.TrainerDatasetReader.chunk_embedding", "numpy.zeros", "itertools.product", "torch.tensor().float", "numpy.logical_not().astype", "str", "torch.tensor", "torch.Tensor", "zip", "torch.tensor", "zip", "torch.tensor", "torch.sum", "torch.sum", "enumerate", "enumerate", "syntactic.SyntacticSimilarity.compute_chunk_similarity", "tuple", "corpus.TrainerDatasetReader.score_transform", "range", "range", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.tensor", "corpus.TrainerDatasetReader.type_encoder.transform", "numpy.logical_not", "lm.unsqueeze", "rm.unsqueeze", "numpy.any", "len", "len", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.corpus.syntactic.SyntacticSimilarity.compute_chunk_similarity", "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.corpus.corpus.TrainerDatasetReader.score_transform"], ["", "", "@", "_init_training", "\n", "def", "__getitem__", "(", "self", ",", "item_id", ")", ":", "\n", "        ", "aligned_input", "=", "self", ".", "reader", ".", "sentence_alignments", "[", "item_id", "]", "\n", "data_point", "=", "{", "}", "\n", "\n", "data_point", "[", "\"sidx\"", "]", "=", "torch", ".", "tensor", "(", "aligned_input", ".", "sidx", ")", "\n", "data_point", "[", "\"left_chunks\"", "]", "=", "torch", ".", "tensor", "(", "aligned_input", ".", "left_chunks_tokenized", ")", "\n", "data_point", "[", "\"right_chunks\"", "]", "=", "torch", ".", "tensor", "(", "aligned_input", ".", "right_chunks_tokenized", ")", "\n", "data_point", "[", "\"left_chunk_emb_ids\"", "]", "=", "torch", ".", "tensor", "(", "aligned_input", ".", "left_chunk_emb_ids", ")", "\n", "data_point", "[", "\"right_chunk_emb_ids\"", "]", "=", "torch", ".", "tensor", "(", "aligned_input", ".", "right_chunk_emb_ids", ")", "\n", "\n", "data_point", "[", "\"left_chunk_ids\"", "]", "=", "[", "torch", ".", "tensor", "(", "l", ")", "for", "l", "in", "aligned_input", ".", "left_chunk_ids", "]", "\n", "\n", "ll", "=", "[", "sum", "(", "l", ")", "for", "l", ",", "_", "in", "zip", "(", "aligned_input", ".", "left_content_mask", ",", "aligned_input", ".", "left_chunk_ids", ")", "]", "\n", "ll", ".", "extend", "(", "[", "1", "for", "i", "in", "range", "(", "self", ".", "reader", ".", "max_chunks", "-", "len", "(", "ll", ")", ")", "]", ")", "\n", "ll", "=", "torch", ".", "tensor", "(", "ll", ")", ".", "float", "(", ")", "\n", "\n", "data_point", "[", "\"right_chunk_ids\"", "]", "=", "[", "torch", ".", "tensor", "(", "l", ")", "for", "l", "in", "aligned_input", ".", "right_chunk_ids", "]", "\n", "\n", "data_point", "[", "\"left_content_mask\"", "]", "=", "torch", ".", "tensor", "(", "aligned_input", ".", "left_content_mask", ")", "\n", "data_point", "[", "\"right_content_mask\"", "]", "=", "torch", ".", "tensor", "(", "aligned_input", ".", "right_content_mask", ")", "\n", "\n", "rr", "=", "[", "sum", "(", "r", ")", "for", "r", ",", "_", "in", "zip", "(", "aligned_input", ".", "right_content_mask", ",", "aligned_input", ".", "right_chunk_ids", ")", "]", "\n", "rr", ".", "extend", "(", "[", "1", "for", "i", "in", "range", "(", "self", ".", "reader", ".", "max_chunks", "-", "len", "(", "rr", ")", ")", "]", ")", "\n", "rr", "=", "torch", ".", "tensor", "(", "rr", ")", ".", "float", "(", ")", "\n", "\n", "data_point", "[", "\"num_left_chunks\"", "]", "=", "torch", ".", "tensor", "(", "aligned_input", ".", "num_left_chunks", ")", "\n", "data_point", "[", "\"num_right_chunks\"", "]", "=", "torch", ".", "tensor", "(", "aligned_input", ".", "num_right_chunks", ")", "\n", "\n", "lx", ",", "rx", "=", "data_point", "[", "\"left_chunks\"", "]", ",", "data_point", "[", "\"right_chunks\"", "]", "\n", "\n", "left_l", ",", "right_l", "=", "data_point", "[", "\"num_left_chunks\"", "]", ",", "data_point", "[", "\"num_right_chunks\"", "]", "\n", "lm", "=", "data_point", "[", "\"left_content_mask\"", "]", "\n", "rm", "=", "data_point", "[", "\"right_content_mask\"", "]", "\n", "\n", "if", "self", ".", "emb_type", "==", "\"chunk\"", ":", "\n", "            ", "lx_chunk", ",", "rx_chunk", "=", "data_point", "[", "\"left_chunk_emb_ids\"", "]", ",", "data_point", "[", "\"right_chunk_emb_ids\"", "]", "\n", "\n", "lx", "=", "self", ".", "chunk_embedding", "(", "lx", ")", "\n", "lx", "=", "torch", ".", "mean", "(", "lx", ",", "1", ")", "\n", "\n", "rx", "=", "self", ".", "chunk_embedding", "(", "rx", ")", "\n", "rx", "=", "torch", ".", "mean", "(", "rx", ",", "1", ")", "\n", "\n", "lx_chunk", "=", "self", ".", "chunk_embedding", "(", "lx_chunk", ")", "\n", "rx_chunk", "=", "self", ".", "chunk_embedding", "(", "rx_chunk", ")", "\n", "\n", "lx", "[", ":", "left_l", "]", "=", "lx_chunk", "\n", "rx", "[", ":", "right_l", "]", "=", "rx_chunk", "\n", "\n", "", "if", "self", ".", "emb_type", "==", "\"glove\"", ":", "\n", "            ", "lx", "=", "self", ".", "chunk_embedding", "(", "lx", ")", "\n", "lx", "=", "torch", ".", "sum", "(", "(", "lx", "*", "lm", ".", "unsqueeze", "(", "2", ")", ")", ",", "1", ")", "/", "(", "torch", ".", "sum", "(", "lm", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", "+", "1e-15", ")", "\n", "# lx = torch.sum(lx, 1) / ll.unsqueeze(1)", "\n", "# lx = torch.mean(lx, 1)", "\n", "\n", "rx", "=", "self", ".", "chunk_embedding", "(", "rx", ")", "\n", "rx", "=", "torch", ".", "sum", "(", "(", "rx", "*", "rm", ".", "unsqueeze", "(", "2", ")", ")", ",", "1", ")", "/", "(", "torch", ".", "sum", "(", "rm", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", "+", "1e-15", ")", "\n", "\n", "# rx = torch.sum(rx, 1) / rr.unsqueeze(1)", "\n", "# rx = torch.mean(rx, 1)", "\n", "\n", "", "data_point", "[", "\"left_embedding\"", "]", "=", "lx", "\n", "data_point", "[", "\"right_embedding\"", "]", "=", "rx", "\n", "\n", "aligned", "=", "np", ".", "zeros", "(", "shape", "=", "(", "self", ".", "reader", ".", "max_chunks", ",", "self", ".", "reader", ".", "max_chunks", ")", ")", "\n", "\n", "scores", "=", "np", ".", "zeros", "(", "shape", "=", "(", "self", ".", "reader", ".", "max_chunks", ",", "self", ".", "reader", ".", "max_chunks", ")", ")", "\n", "scores", "[", ":", "]", "=", "-", "1", "\n", "\n", "types", "=", "np", ".", "zeros", "(", "shape", "=", "(", "self", ".", "reader", ".", "max_chunks", ",", "self", ".", "reader", ".", "max_chunks", ")", ")", "\n", "types", "[", ":", "]", "=", "-", "1", "\n", "syn", "=", "SS", ".", "SyntacticSimilarity", "(", "aligned_input", ".", "s1", ",", "aligned_input", ".", "s2", ")", "\n", "\n", "if", "self", ".", "cfg", ".", "syn_scores", ":", "\n", "            ", "syn_scores", "=", "np", ".", "zeros", "(", "shape", "=", "(", "self", ".", "reader", ".", "max_chunks", ",", "self", ".", "reader", ".", "max_chunks", ")", ")", "\n", "for", "(", "(", "ix1", ",", "sv1", ")", ",", "(", "ix2", ",", "sv2", ")", ")", "in", "product", "(", "enumerate", "(", "aligned_input", ".", "left_chunk_ids", ")", ",", "enumerate", "(", "aligned_input", ".", "right_chunk_ids", ")", ")", ":", "\n", "                ", "sv1", "=", "[", "i", "-", "1", "for", "i", "in", "sv1", "]", "\n", "sv2", "=", "[", "i", "-", "1", "for", "i", "in", "sv2", "]", "\n", "syn_scores", "[", "ix1", ",", "ix2", "]", "=", "syn", ".", "compute_chunk_similarity", "(", "sv1", ",", "sv2", ")", "\n", "", "data_point", "[", "\"syn_scores\"", "]", "=", "torch", ".", "tensor", "(", "syn_scores", ")", ".", "float", "(", ")", "\n", "\n", "", "for", "chunk", "in", "aligned_input", ".", "chunks", ":", "\n", "            ", "al_type", "=", "chunk", ".", "type", "\n", "al_score", "=", "chunk", ".", "score", "\n", "if", "chunk", ".", "idx", ":", "\n", "                ", "chunk", ".", "idx", "=", "tuple", "(", "chunk", ".", "idx", ")", "\n", "scores", "[", "chunk", ".", "idx", "]", "=", "self", ".", "score_transform", "(", "al_score", ")", "\n", "types", "[", "chunk", ".", "idx", "]", "=", "self", ".", "type_encoder", ".", "transform", "(", "[", "al_type", "]", ")", "[", "0", "]", "\n", "aligned", "[", "chunk", ".", "idx", "]", "=", "1", "\n", "", "else", ":", "\n", "# print chunk.chunk1, chunk.chunk2", "\n", "# print chunk", "\n", "# print al_type", "\n", "                ", "pass", "\n", "\n", "", "", "data_point", "[", "\"is_aligned\"", "]", "=", "torch", ".", "tensor", "(", "np", ".", "logical_not", "(", "np", ".", "any", "(", "aligned", ",", "axis", "=", "1", ")", ")", ".", "astype", "(", "np", ".", "int", ")", ")", "\n", "data_point", "[", "\"aligned\"", "]", "=", "torch", ".", "tensor", "(", "aligned", ")", "\n", "data_point", "[", "\"scores\"", "]", "=", "torch", ".", "tensor", "(", "scores", ")", "\n", "data_point", "[", "\"types\"", "]", "=", "torch", ".", "tensor", "(", "types", ")", "\n", "\n", "constr", "=", "self", ".", "constr_res", ".", "get", "(", "str", "(", "item_id", "+", "1", ")", ")", "# item_id+1 because resource self.reader.sentence_alignments is 0 indexed and constr_res 1 indexed", "\n", "data_point", "[", "'constr'", "]", "=", "torch", ".", "tensor", "(", "constr", ")", "if", "constr", "else", "torch", ".", "Tensor", "(", ")", "\n", "return", "data_point", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.corpus.corpus.chunk_tiler": [[26, 40], ["accumulator.append", "range", "len", "corpus.chunk_tiler", "accumulator.append"], "function", ["home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.corpus.corpus.chunk_tiler"], ["def", "chunk_tiler", "(", "text_chunks", ",", "chunks", ",", "accumulator", ")", ":", "\n", "    ", "if", "text_chunks", "is", "None", "or", "text_chunks", "==", "\"\"", ":", "\n", "        ", "return", "[", "]", "\n", "\n", "", "if", "text_chunks", "in", "chunks", ":", "\n", "        ", "accumulator", ".", "append", "(", "text_chunks", ")", "\n", "return", "\n", "\n", "", "else", ":", "\n", "        ", "for", "idx", "in", "range", "(", "len", "(", "text_chunks", ")", ")", ":", "\n", "            ", "if", "text_chunks", "[", ":", "idx", "+", "1", "]", "in", "chunks", ":", "\n", "                ", "chunk_tiler", "(", "text_chunks", "[", "idx", "+", "1", ":", "]", ",", "chunks", ",", "accumulator", ")", "\n", "accumulator", ".", "append", "(", "text_chunks", "[", ":", "idx", "+", "1", "]", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.corpus.corpus.chunk_identifier": [[194, 198], ["enumerate"], "function", ["None"], ["", "", "", "", "def", "chunk_identifier", "(", "chunk", ",", "chunk_list", ")", ":", "\n", "    ", "for", "idx", ",", "chunk_c", "in", "enumerate", "(", "chunk_list", ")", ":", "\n", "        ", "if", "chunk", "==", "chunk_c", ":", "return", "idx", "\n", "", "return", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.corpus.syntactic.TokenFeature.__init__": [[20, 22], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "tree_node", ")", ":", "\n", "        ", "self", ".", "tree_node", "=", "tree_node", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.corpus.syntactic.TokenFeature.compute_feature": [[23, 29], ["None"], "methods", ["None"], ["", "def", "compute_feature", "(", "self", ")", ":", "\n", "#pos = [self.tree_node.pos_]", "\n", "        ", "ancestors", "=", "[", "t", ".", "dep_", "for", "t", "in", "self", ".", "tree_node", ".", "ancestors", "]", "\n", "children", "=", "[", "t", ".", "dep_", "for", "t", "in", "self", ".", "tree_node", ".", "children", "]", "\n", "is_root", "=", "[", "self", ".", "tree_node", ".", "dep_", "==", "'ROOT'", "]", "\n", "return", "[", "ancestors", ",", "children", ",", "is_root", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.corpus.syntactic.SyntacticSimilarity.__init__": [[32, 37], ["SPACY_NLP", "SPACY_NLP", "unicode", "unicode"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "s1", ",", "s2", ")", ":", "\n", "        ", "self", ".", "s1", "=", "s1", "\n", "self", ".", "s2", "=", "s2", "\n", "self", ".", "d1", "=", "SPACY_NLP", "(", "unicode", "(", "self", ".", "s1", ")", ")", "\n", "self", ".", "d2", "=", "SPACY_NLP", "(", "unicode", "(", "self", ".", "s2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.corpus.syntactic.SyntacticSimilarity.compute_token_similarity": [[38, 55], ["syntactic.TokenFeature", "syntactic.TokenFeature", "syntactic.TokenFeature.compute_feature", "syntactic.TokenFeature.compute_feature", "zip", "syntactic.jaccard", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.corpus.syntactic.TokenFeature.compute_feature", "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.corpus.syntactic.TokenFeature.compute_feature", "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.corpus.syntactic.jaccard"], ["", "def", "compute_token_similarity", "(", "self", ",", "t1_ix", ",", "t2_ix", ")", ":", "\n", "        ", "if", "t1_ix", ">=", "len", "(", "self", ".", "d1", ")", "or", "t2_ix", ">=", "len", "(", "self", ".", "d2", ")", ":", "return", "0.0", "\n", "t1", "=", "self", ".", "d1", "[", "t1_ix", "]", "\n", "t2", "=", "self", ".", "d2", "[", "t2_ix", "]", "\n", "\n", "t1_node", "=", "TokenFeature", "(", "t1", ")", "\n", "t2_node", "=", "TokenFeature", "(", "t2", ")", "\n", "\n", "fs1", "=", "t1_node", ".", "compute_feature", "(", ")", "\n", "fs2", "=", "t2_node", ".", "compute_feature", "(", ")", "\n", "\n", "total_sim", "=", "0.0", "\n", "for", "f1", ",", "f2", "in", "zip", "(", "fs1", ",", "fs2", ")", ":", "\n", "            ", "sim", "=", "jaccard", "(", "f1", ",", "f2", ")", "\n", "total_sim", "+=", "sim", "\n", "\n", "", "return", "total_sim", "/", "len", "(", "fs1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.corpus.syntactic.SyntacticSimilarity.compute_chunk_similarity": [[56, 65], ["numpy.zeros", "itertools.product", "numpy.mean", "enumerate", "enumerate", "syntactic.SyntacticSimilarity.compute_token_similarity", "numpy.max", "len", "len"], "methods", ["home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.corpus.syntactic.SyntacticSimilarity.compute_token_similarity"], ["", "def", "compute_chunk_similarity", "(", "self", ",", "c1_ix", ",", "c2_ix", ")", ":", "\n", "        ", "sim_matrix", "=", "np", ".", "zeros", "(", "(", "len", "(", "c1_ix", ")", ",", "len", "(", "c2_ix", ")", ")", ")", "\n", "\n", "for", "(", "(", "i1", ",", "t1", ")", ",", "(", "i2", ",", "t2", ")", ")", "in", "product", "(", "enumerate", "(", "c1_ix", ")", ",", "enumerate", "(", "c2_ix", ")", ")", ":", "\n", "            ", "sim", "=", "self", ".", "compute_token_similarity", "(", "t1", ",", "t2", ")", "\n", "sim_matrix", "[", "i1", ",", "i2", "]", "=", "sim", "\n", "\n", "#return sim_matrix", "\n", "", "return", "np", ".", "mean", "(", "np", ".", "max", "(", "sim_matrix", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.corpus.syntactic.jaccard": [[9, 17], ["set", "set", "float", "float", "len", "len", "set.intersection", "set.union"], "function", ["None"], ["def", "jaccard", "(", "s1", ",", "s2", ")", ":", "\n", "    ", "s1", "=", "set", "(", "s1", ")", "\n", "s2", "=", "set", "(", "s2", ")", "\n", "\n", "if", "not", "s1", "and", "not", "s2", ":", "return", "0.0", "\n", "common", "=", "float", "(", "len", "(", "s1", ".", "intersection", "(", "s2", ")", ")", ")", "\n", "union", "=", "float", "(", "len", "(", "s1", ".", "union", "(", "s2", ")", ")", ")", "\n", "return", "common", "/", "union", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.corpus.util.process_sentence": [[7, 18], ["s[].split.strip().lower", "s[].split", "chunk_regex.sub", "chk.replace().replace", "chunk.replace().split", "s[].split.strip", "chk.replace", "chunk.replace", "zip", "spacy_nlp"], "function", ["None"], ["def", "process_sentence", "(", "s", ",", "lemmatize", "=", "False", ")", ":", "\n", "    ", "if", "lemmatize", ":", "\n", "        ", "s", "=", "' '", ".", "join", "(", "[", "x", ".", "lemma_", "for", "x", "in", "spacy_nlp", "(", "s", ")", "]", ")", "#todo: check if lemmatization on non-chunked sentence is any better", "\n", "", "s", "=", "s", ".", "strip", "(", ")", ".", "lower", "(", ")", "\n", "s", "=", "s", "[", "2", ":", "-", "2", "]", ".", "split", "(", "' ] [ '", ")", "\n", "s", "=", "[", "chunk_regex", ".", "sub", "(", "''", ",", "x", ")", "for", "x", "in", "s", "]", "\n", "chunks", "=", "[", "chk", ".", "replace", "(", "' '", ",", "'_'", ")", ".", "replace", "(", "'-'", ",", "'_'", ")", "for", "chk", "in", "s", "]", "\n", "s", "=", "[", "chunk", ".", "replace", "(", "'-'", ",", "' '", ")", ".", "split", "(", ")", "for", "chunk", "in", "s", "]", "#unigrams", "\n", "# s = [chunk.split() for chunk in s] #unigrams", "\n", "bigrams", "=", "[", "[", "'_'", ".", "join", "(", "wrd", ")", "for", "wrd", "in", "zip", "(", "chk", "[", ":", "-", "1", "]", ",", "chk", "[", "1", ":", "]", ")", "]", "for", "chk", "in", "s", "]", "\n", "return", "(", "chunks", ",", "bigrams", ",", "s", ")", "", "", ""]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.constraints.C1.C1.__init__": [[5, 8], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.constraints.C1.C1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", "=", "None", ")", ":", "\n", "        ", "super", "(", "C1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.constraints.C1.C1.get_rel_mask": [[9, 20], ["torch.zeros", "torch.autograd.Variable"], "methods", ["None"], ["", "def", "get_rel_mask", "(", "self", ",", "data_point", ")", ":", "\n", "        ", "rel_mask", "=", "torch", ".", "zeros", "(", "data_point", "[", "'left_chunks'", "]", ".", "shape", "[", "0", "]", ",", "data_point", "[", "'right_chunks'", "]", ".", "shape", "[", "0", "]", ")", "\n", "\n", "rels", "=", "data_point", "[", "'constr'", "]", "\n", "for", "rel", "in", "rels", ":", "\n", "            ", "s1_idx", ",", "s2_idx", "=", "rel", "[", "0", "]", ",", "rel", "[", "1", "]", "\n", "rel_mask", "[", "s1_idx", "]", "[", "s2_idx", "]", "=", "1.0", "\n", "\n", "", "rel_mask", "=", "Variable", "(", "rel_mask", ",", "requires_grad", "=", "False", ")", "\n", "\n", "return", "rel_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.constraints.C1.C1.forward": [[21, 26], ["C1.C1.get_rel_mask"], "methods", ["home.repos.pwc.inspect_result.manishb89_interpretable_sentence_similarity.constraints.C1.C1.get_rel_mask"], ["", "def", "forward", "(", "self", ",", "data_point", ")", ":", "\n", "        ", "mask", "=", "self", ".", "get_rel_mask", "(", "data_point", ")", "\n", "# if opt.gpuid != -1:", "\n", "#     mask = mask.cuda()", "\n", "return", "mask", "\n", "", "", ""]]}