{"home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.helpful_functions.walk": [[7, 14], ["os.walk", "len", "filename.endswith", "filename.startswith", "os.path.join"], "function", ["home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.helpful_functions.walk"], ["def", "walk", "(", "from_dir", ",", "prefix", "=", "\"\"", ",", "file_ext", "=", "\".html\"", ")", ":", "\n", "\t", "\"\"\" Iterator over files in a directory. \"\"\"", "\n", "for", "dir_path", ",", "dir_names", ",", "files", "in", "os", ".", "walk", "(", "from_dir", ")", ":", "\n", "\t\t", "if", "len", "(", "dir_names", ")", "==", "0", ":", "\n", "\t\t\t", "for", "filename", "in", "files", ":", "\n", "\t\t\t\t", "if", "filename", ".", "endswith", "(", "file_ext", ")", "and", "filename", ".", "startswith", "(", "prefix", ")", ":", "\n", "\t\t\t\t\t", "yield", "os", ".", "path", ".", "join", "(", "dir_path", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.helpful_functions.basic_preprocess": [[15, 40], ["re.sub.replace", "re.sub.replace", "re.sub.replace", "re.sub.replace", "re.sub.replace", "re.sub.replace", "re.sub.replace", "re.sub.replace", "re.sub.replace", "re.sub.replace", "re.sub.replace", "re.sub.replace", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub"], "function", ["None"], ["", "", "", "", "", "def", "basic_preprocess", "(", "text", ")", ":", "\n", "\t", "text", "=", "text", ".", "replace", "(", "\",\"", ",", "\" \"", ")", "\n", "text", "=", "text", ".", "replace", "(", "\".\"", ",", "\" \"", ")", "\n", "text", "=", "text", ".", "replace", "(", "\"'\"", ",", "\"\"", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\"'", ",", "\"\"", ")", "\n", "text", "=", "text", ".", "replace", "(", "\";\"", ",", "\" \"", ")", "\n", "text", "=", "text", ".", "replace", "(", "\":\"", ",", "\" \"", ")", "\n", "text", "=", "text", ".", "replace", "(", "\"!\"", ",", "\" \"", ")", "\n", "text", "=", "text", ".", "replace", "(", "\"?\"", ",", "\" \"", ")", "\n", "#text = text.replace (\"-\", \" \")", "\n", "text", "=", "text", ".", "replace", "(", "\"[\"", ",", "\" \"", ")", "\n", "text", "=", "text", ".", "replace", "(", "\"]\"", ",", "\" \"", ")", "\n", "text", "=", "text", ".", "replace", "(", "\"{\"", ",", "\" \"", ")", "\n", "text", "=", "text", ".", "replace", "(", "\"}\"", ",", "\" \"", ")", "\n", "\n", "# remove em-dashes", "\n", "text", "=", "re", ".", "sub", "(", "r'\\u2014'", ",", "' '", ",", "text", ")", "\n", "# remove quotations", "\n", "text", "=", "re", ".", "sub", "(", "r'\\u201D'", ",", "''", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "r'\\u201C'", ",", "''", ",", "text", ")", "\n", "# replace $ amounts by special token", "\n", "text", "=", "re", ".", "sub", "(", "r\"\\$\\d+(?:\\.\\d+)?\"", ",", "\"<currency>\"", ",", "text", ")", "\n", "# replace numbers by special token ", "\n", "text", "=", "re", ".", "sub", "(", "r\"^(\\d+)$\"", ",", "'<number>'", ",", "text", ")", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.helpful_functions.mkdir_p": [[42, 49], ["os.makedirs", "os.path.isdir"], "function", ["None"], ["", "def", "mkdir_p", "(", "path", ")", ":", "\n", "\t", "try", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "path", ",", "exist_ok", "=", "True", ")", "\n", "", "except", "OSError", "as", "exc", ":", "# Python >2.5", "\n", "\t\t", "if", "exc", ".", "errno", "==", "errno", ".", "EEXIST", "and", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "\t\t\t", "pass", "\n", "", "else", ":", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.helpful_functions.safe_open_w": [[51, 56], ["helpful_functions.mkdir_p", "open", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.helpful_functions.mkdir_p"], ["", "", "def", "safe_open_w", "(", "path", ")", ":", "\n", "\t", "\"\"\" Open \"path\" for writing, creating any parent directories as needed.\n\t\"\"\"", "\n", "mkdir_p", "(", "os", ".", "path", ".", "dirname", "(", "path", ")", ")", "\n", "return", "open", "(", "path", ",", "'w'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.helpful_functions.readEmbeddings": [[59, 75], ["dict", "open", "enumerate", "line.strip().split", "line.strip().split", "numpy.array", "int", "int", "list", "dict", "line.strip", "line.strip", "map"], "function", ["None"], ["", "def", "readEmbeddings", "(", "filename", ")", ":", "\n", "\t", "embeddings", "=", "dict", "(", ")", "\n", "with", "open", "(", "filename", ")", "as", "fin", ":", "\n", "\t\t", "for", "i", ",", "line", "in", "enumerate", "(", "fin", ")", ":", "\n", "\t\t\t", "if", "i", "==", "0", ":", "\n", "\t\t\t\t", "parts", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "vocab_size", ",", "dims", "=", "int", "(", "parts", "[", "0", "]", ")", ",", "int", "(", "parts", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "parts", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "facet_name", "=", "parts", "[", "0", "]", "\n", "word", "=", "parts", "[", "1", "]", "\n", "values", "=", "np", ".", "array", "(", "list", "(", "map", "(", "float", ",", "parts", "[", "2", ":", "]", ")", ")", ")", "\n", "if", "facet_name", "not", "in", "embeddings", ":", "\n", "\t\t\t\t\t", "embeddings", "[", "facet_name", "]", "=", "dict", "(", ")", "\n", "", "embeddings", "[", "facet_name", "]", "[", "word", "]", "=", "values", "\n", "", "", "", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.helpful_functions.normalize": [[76, 80], ["numpy.linalg.norm"], "function", ["None"], ["", "def", "normalize", "(", "embeddings", ")", ":", "\n", "\t", "norms", "=", "np", ".", "linalg", ".", "norm", "(", "embeddings", ",", "ord", "=", "2", ",", "axis", "=", "1", ")", "\n", "new_matrix", "=", "embeddings", "/", "norms", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "return", "new_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.helpful_functions.sigmoid": [[81, 83], ["math.exp"], "function", ["None"], ["", "def", "sigmoid", "(", "x", ")", ":", "\n", "\t", "return", "1", "/", "(", "1", "+", "math", ".", "exp", "(", "-", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.helpful_functions.logsigmoid": [[84, 86], ["math.log", "helpful_functions.sigmoid"], "function", ["home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.helpful_functions.sigmoid"], ["", "def", "logsigmoid", "(", "x", ")", ":", "\n", "\t", "return", "math", ".", "log", "(", "sigmoid", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.helpful_functions.is_count_greater": [[87, 89], ["sum"], "function", ["None"], ["", "def", "is_count_greater", "(", "values", ",", "thresh", "=", "5", ")", ":", "\n", "\t", "return", "sum", "(", "values", ")", ">=", "thresh", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.helpful_functions.is_count_smaller": [[90, 92], ["sum"], "function", ["None"], ["", "def", "is_count_smaller", "(", "values", ",", "thresh", "=", "5", ")", ":", "\n", "\t", "return", "sum", "(", "values", ")", "<", "thresh", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.helpful_functions.init_dict": [[111, 113], ["None"], "function", ["None"], ["def", "init_dict", "(", "names", ")", ":", "\n", "    ", "return", "{", "name", ":", "0", "for", "name", "in", "names", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.calculate_normalization.readArgs": [[8, 16], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "readArgs", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"calculate the normalization part\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--src-dir\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"source directory\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--embeddings-file\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"embeddings file\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--contexts-file\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"contexts file\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--features-file\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"features file\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.calculate_normalization.readFeats": [[17, 26], ["open", "line.strip().split", "len", "facet_names.append", "line.strip", "line.strip"], "function", ["None"], ["", "def", "readFeats", "(", "filename", ")", ":", "\n", "\t", "facet_names", "=", "[", "(", "MAIN_FEAT", ",", ")", "]", "\n", "with", "open", "(", "filename", ")", "as", "fin", ":", "\n", "\t\t", "for", "line", "in", "fin", ":", "\n", "\t\t\t", "parts", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"_\"", ")", "\n", "if", "len", "(", "parts", ")", ">", "1", ":", "\n", "\t\t\t\t", "facet_names", ".", "append", "(", "(", "parts", "[", "0", "]", ",", "line", ".", "strip", "(", ")", ")", ")", "\n", "\n", "", "", "", "return", "facet_names", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.calculate_normalization.get_conditional_embeddings": [[27, 37], ["dict", "calculate_normalization.transform_to_numpy", "list", "len", "tuple", "facet[].split"], "function", ["home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.leadership_scores.transform_to_numpy"], ["", "def", "get_conditional_embeddings", "(", "deviations", ",", "w2i", ",", "i2w", ",", "facet_names", ")", ":", "\n", "# Calculate the true embeddings based on the deviations.", "\n", "\t", "fully_conditional_embeddings", "=", "dict", "(", ")", "\n", "for", "facet", "in", "facet_names", ":", "\n", "\t\t", "mat", "=", "transform_to_numpy", "(", "deviations", ",", "w2i", ",", "i2w", ",", "list", "(", "facet", ")", ",", "apply_normalization", "=", "False", ")", "\n", "if", "len", "(", "facet", ")", "==", "1", "and", "MAIN_FEAT", "in", "facet", ":", "\n", "\t\t\t", "fully_conditional_embeddings", "[", "MAIN_FEAT", "]", "=", "mat", "\n", "", "else", ":", "\n", "\t\t\t", "fully_conditional_embeddings", "[", "tuple", "(", "facet", "[", "1", "]", ".", "split", "(", "\"_\"", ")", ")", "]", "=", "mat", "\n", "", "", "return", "fully_conditional_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.calculate_normalization.transform_to_numpy": [[38, 49], ["numpy.array", "activated_facets.insert", "numpy.array", "helpful_functions.normalize", "len", "numpy.sum", "enumerate", "enumerate"], "function", ["home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.findNearest.normalize"], ["", "def", "transform_to_numpy", "(", "dict_embeddings", ",", "w2i", ",", "i2w", ",", "activated_facets", ",", "apply_normalization", "=", "True", ")", ":", "\n", "\t", "if", "len", "(", "activated_facets", ")", "==", "1", "and", "MAIN_FEAT", "in", "activated_facets", ":", "\n", "\t\t", "mat", "=", "np", ".", "array", "(", "[", "dict_embeddings", "[", "MAIN_FEAT", "]", "[", "w", "]", "for", "i", ",", "w", "in", "enumerate", "(", "w2i", ")", "]", ")", "\n", "", "else", ":", "\n", "\t\t", "activated_facets", ".", "insert", "(", "0", ",", "MAIN_FEAT", ")", "\n", "mat", "=", "np", ".", "array", "(", "[", "np", ".", "sum", "(", "[", "dict_embeddings", "[", "facet_name", "]", "[", "w", "]", "for", "facet_name", "in", "activated_facets", "]", ",", "axis", "=", "0", ")", "for", "i", ",", "w", "in", "enumerate", "(", "w2i", ")", "]", ")", "\n", "", "if", "apply_normalization", ":", "\n", "\t\t", "mat", "=", "normalize", "(", "mat", ")", "\n", "", "return", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.calculate_normalization.readContextEmbeddings": [[50, 63], ["dict", "open", "enumerate", "line.strip().split", "line.strip().split", "numpy.array", "int", "int", "list", "line.strip", "line.strip", "map"], "function", ["None"], ["", "def", "readContextEmbeddings", "(", "filename", ")", ":", "\n", "\t", "embeddings", "=", "dict", "(", ")", "\n", "with", "open", "(", "filename", ")", "as", "fin", ":", "\n", "\t\t", "for", "i", ",", "line", "in", "enumerate", "(", "fin", ")", ":", "\n", "\t\t\t", "if", "i", "==", "0", ":", "\n", "\t\t\t\t", "parts", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "vocab_size", ",", "dims", "=", "int", "(", "parts", "[", "0", "]", ")", ",", "int", "(", "parts", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "parts", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "word", "=", "parts", "[", "0", "]", "\n", "values", "=", "np", ".", "array", "(", "list", "(", "map", "(", "float", ",", "parts", "[", "1", ":", "]", ")", ")", ")", "\n", "embeddings", "[", "word", "]", "=", "values", "\n", "", "", "", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.calculate_normalization.main": [[64, 117], ["os.path.join", "helpful_functions.readEmbeddings", "logging.info", "logging.info", "os.path.join", "calculate_normalization.readFeats", "logging.info", "os.path.join", "calculate_normalization.get_conditional_embeddings", "calculate_normalization.readContextEmbeddings", "numpy.array", "print", "context_embeddings.astype.astype", "print", "logging.info", "list", "sorted", "numpy.array", "os.path.join", "logging.info", "os.path.join", "logging.info", "iidx_facets.items", "tuple", "numpy.dot", "numpy.log", "np.array.append", "open", "numpy.save", "open", "sorted", "enumerate", "enumerate", "enumerate", "enumerate", "facet.split", "numpy.sum", "logging.info", "iidx_facets.items", "fout.write", "len", "len", "len", "enumerate", "numpy.exp"], "function", ["home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.helpful_functions.readEmbeddings", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.leadership_scores.readFeats", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.leadership_scores.get_conditional_embeddings", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.calculate_normalization.readContextEmbeddings"], ["", "def", "main", "(", "args", ")", ":", "\n", "\t", "embeddings_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "src_dir", ",", "args", ".", "embeddings_file", ")", "\n", "embeddings", "=", "readEmbeddings", "(", "embeddings_file", ")", "\n", "static_embeddings", "=", "embeddings", "[", "MAIN_FEAT", "]", "\n", "logging", ".", "info", "(", "f\"Embeddings read from {embeddings_file}\"", ")", "\n", "\n", "# vocabulary", "\n", "w2i", "=", "{", "w", ":", "i", "for", "i", ",", "w", "in", "enumerate", "(", "static_embeddings", ")", "}", "\n", "i2w", "=", "{", "i", ":", "w", "for", "i", ",", "w", "in", "enumerate", "(", "static_embeddings", ")", "}", "\n", "logging", ".", "info", "(", "f\"Vocabulary mapping done, total words {len(w2i)}\"", ")", "\n", "\n", "features_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "src_dir", ",", "args", ".", "features_file", ")", "\n", "facet_names", "=", "readFeats", "(", "features_file", ")", "\n", "logging", ".", "info", "(", "f\"Read {len(facet_names)} facets from {features_file}\"", ")", "\n", "\n", "facets", "=", "[", "f", "[", "1", "]", "for", "f", "in", "facet_names", "if", "len", "(", "f", ")", ">", "1", "]", "\n", "idx_facets", "=", "{", "facet", ":", "i", "for", "i", ",", "facet", "in", "enumerate", "(", "facets", ")", "}", "\n", "iidx_facets", "=", "{", "i", ":", "facet", "for", "i", ",", "facet", "in", "enumerate", "(", "facets", ")", "}", "\n", "\n", "contexts_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "src_dir", ",", "args", ".", "contexts_file", ")", "\n", "conditional_embeddings", "=", "get_conditional_embeddings", "(", "embeddings", ",", "w2i", ",", "i2w", ",", "facet_names", ")", "\n", "context_embeddings", "=", "readContextEmbeddings", "(", "contexts_file", ")", "\n", "context_embeddings", "=", "np", ".", "array", "(", "[", "context_embeddings", "[", "w", "]", "for", "i", ",", "w", "in", "enumerate", "(", "w2i", ")", "]", ")", "\n", "print", "(", "context_embeddings", ".", "nbytes", ")", "\n", "context_embeddings", "=", "context_embeddings", ".", "astype", "(", "np", ".", "float16", ")", "\n", "print", "(", "context_embeddings", ".", "nbytes", ")", "\n", "return", "\n", "\n", "logging", ".", "info", "(", "f\"Read context embeddings from {contexts_file}\"", ")", "\n", "\n", "Z", "=", "list", "(", ")", "\n", "for", "i", ",", "facet", "in", "sorted", "(", "iidx_facets", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", ":", "\n", "\t\t", "key", "=", "tuple", "(", "facet", ".", "split", "(", "\"_\"", ")", ")", "\n", "C", "=", "np", ".", "dot", "(", "context_embeddings", ",", "conditional_embeddings", "[", "key", "]", ".", "T", ")", "\n", "z", "=", "np", ".", "log", "(", "np", ".", "sum", "(", "np", ".", "exp", "(", "C", ")", ",", "axis", "=", "0", ")", ")", "\n", "Z", ".", "append", "(", "z", ")", "\n", "if", "(", "i", "+", "1", ")", "%", "10", "==", "0", ":", "\n", "\t\t\t", "logging", ".", "info", "(", "f\"normmalization at {i+1} facet\"", ")", "\n", "", "", "Z", "=", "np", ".", "array", "(", "Z", ")", "\n", "\n", "normalization_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "src_dir", ",", "\"Z.npy\"", ")", "\n", "with", "open", "(", "normalization_file", ",", "\"wb\"", ")", "as", "f", ":", "\n", "\t\t", "np", ".", "save", "(", "f", ",", "Z", ")", "\n", "\n", "", "logging", ".", "info", "(", "f\"Normalization values stored in {normalization_file}\"", ")", "\n", "\n", "facets_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "src_dir", ",", "\"facets.txt\"", ")", "\n", "\n", "with", "open", "(", "facets_file", ",", "\"w\"", ")", "as", "fout", ":", "\n", "\t\t", "for", "i", ",", "facet", "in", "sorted", "(", "iidx_facets", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", ":", "\n", "\t\t\t", "fout", ".", "write", "(", "f\"{facet}\\n\"", ")", "\n", "\n", "", "", "logging", ".", "info", "(", "f\"Facet index stored in  {facets_file}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.local_dynamic_ranks.readArgs": [[14, 22], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "readArgs", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Top changed words\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dir-path\"", ",", "required", "=", "True", ",", "type", "=", "str", ",", "help", "=", "\"directory that contains the required files\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--embeddings-file\"", ",", "required", "=", "True", ",", "type", "=", "str", ",", "help", "=", "\"filename of the embeddings\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--k\"", ",", "required", "=", "False", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "\"number of near neighbors to be used (default: 10)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--scores-file\"", ",", "required", "=", "True", ",", "type", "=", "str", ",", "help", "=", "\"file contains the ranked list of words based on quantity of semantic change\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.local_dynamic_ranks.emds2temporal": [[23, 40], ["numpy.array", "helpful_functions.normalize", "helpful_functions.normalize", "enumerate", "enumerate", "numpy.array", "range", "len", "range", "len"], "function", ["home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.findNearest.normalize", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.findNearest.normalize"], ["", "def", "emds2temporal", "(", "embeddings", ",", "facet_names", ")", ":", "\n", "# Separate the main embeddings and the facet embeddings", "\n", "\t", "static_embeddings", "=", "embeddings", "[", "\"MAIN\"", "]", "\n", "\n", "# vocabulary", "\n", "w2i", "=", "{", "w", ":", "i", "for", "i", ",", "w", "in", "enumerate", "(", "static_embeddings", ")", "}", "\n", "i2w", "=", "{", "i", ":", "w", "for", "i", ",", "w", "in", "enumerate", "(", "static_embeddings", ")", "}", "\n", "\n", "# the atemporal embeddings", "\n", "main_embeddings", "=", "np", ".", "array", "(", "[", "static_embeddings", "[", "i2w", "[", "i", "]", "]", "for", "i", "in", "range", "(", "len", "(", "i2w", ")", ")", "]", ")", "\n", "main_embeddings", "=", "normalize", "(", "main_embeddings", ")", "\n", "\n", "residual_embeddings", "=", "{", "facet_name", ":", "embeddings", "[", "facet_name", "]", "for", "facet_name", "in", "facet_names", "}", "\n", "temporal_embeddings", "=", "{", "facet_name", ":", "normalize", "(", "np", ".", "array", "(", "[", "static_embeddings", "[", "i2w", "[", "i", "]", "]", "+", "residual_embeddings", "[", "facet_name", "]", "[", "i2w", "[", "i", "]", "]", "for", "i", "in", "range", "(", "len", "(", "i2w", ")", ")", "]", ")", ")", "for", "facet_name", "in", "facet_names", "}", "\n", "\n", "\n", "return", "main_embeddings", ",", "temporal_embeddings", ",", "(", "w2i", ",", "i2w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.local_dynamic_ranks.readNeighbors": [[41, 51], ["dict", "os.path.basename", "os.path.basename.split", "open", "pickle.load"], "function", ["None"], ["", "def", "readNeighbors", "(", "files", ")", ":", "\n", "\t", "neighbors", "=", "dict", "(", ")", "\n", "for", "filename", "in", "files", ":", "\n", "\t\t", "basename", "=", "os", ".", "path", ".", "basename", "(", "filename", ")", "\n", "facet", "=", "basename", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "with", "open", "(", "filename", ",", "\"rb\"", ")", "as", "fin", ":", "\n", "\t\t\t", "neighbor", "=", "pickle", ".", "load", "(", "fin", ")", "\n", "neighbors", "[", "facet", "]", "=", "neighbor", "\n", "\n", "", "", "return", "neighbors", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.local_dynamic_ranks.cos_dist": [[52, 58], ["numpy.linalg.norm", "numpy.linalg.norm", "numpy.dot"], "function", ["None"], ["", "def", "cos_dist", "(", "vec1", ",", "vec2", ")", ":", "\n", "\t", "l1", "=", "np", ".", "linalg", ".", "norm", "(", "vec1", ")", "\n", "l2", "=", "np", ".", "linalg", ".", "norm", "(", "vec2", ")", "\n", "\n", "sim", "=", "(", "np", ".", "dot", "(", "vec1", ",", "vec2", ")", "/", "(", "l1", "*", "l2", ")", ")", "\n", "return", "1", "-", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.local_dynamic_ranks.getScores": [[59, 76], ["collections.defaultdict", "itertools.combinations", "set().union", "local_dynamic_ranks.cos_dist", "scores[].append", "numpy.dot", "numpy.dot", "set"], "function", ["home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.local_dynamic_ranks.cos_dist"], ["", "def", "getScores", "(", "embeddings", ",", "neighbors", ",", "voc", ",", "k", "=", "10", ")", ":", "\n", "\t", "scores", "=", "defaultdict", "(", "list", ")", "\n", "w2i", ",", "i2w", "=", "voc", "\n", "facets", "=", "[", "key", "for", "key", "in", "embeddings", "]", "\n", "for", "word", "in", "w2i", ":", "\n", "\t\t", "for", "f1", ",", "f2", "in", "itertools", ".", "combinations", "(", "facets", ",", "2", ")", ":", "\n", "\t\t\t", "neighbors1", "=", "neighbors", "[", "f1", "]", "[", "word", "]", "[", "0", "]", "\n", "neighbors2", "=", "neighbors", "[", "f2", "]", "[", "word", "]", "[", "0", "]", "\n", "s1", ",", "n1", "=", "{", "n", ":", "s", "for", "s", ",", "n", "in", "neighbors1", "}", ",", "[", "n", "for", "_", ",", "n", "in", "neighbors1", "]", "\n", "s2", ",", "n2", "=", "{", "n", ":", "s", "for", "s", ",", "n", "in", "neighbors2", "}", ",", "[", "n", "for", "_", ",", "n", "in", "neighbors2", "]", "\n", "common", "=", "set", "(", "n1", "[", "0", ":", "k", "]", ")", ".", "union", "(", "n2", "[", "0", ":", "k", "]", ")", "\n", "s1_vec", "=", "[", "np", ".", "dot", "(", "embeddings", "[", "f1", "]", "[", "w2i", "[", "word", "]", "]", ",", "embeddings", "[", "f1", "]", "[", "w2i", "[", "n", "]", "]", ")", "for", "n", "in", "common", "]", "\n", "s2_vec", "=", "[", "np", ".", "dot", "(", "embeddings", "[", "f2", "]", "[", "w2i", "[", "word", "]", "]", ",", "embeddings", "[", "f2", "]", "[", "w2i", "[", "n", "]", "]", ")", "for", "n", "in", "common", "]", "\n", "dist", "=", "cos_dist", "(", "s1_vec", ",", "s2_vec", ")", "\n", "scores", "[", "word", "]", ".", "append", "(", "(", "f1", ",", "f2", ",", "dist", ")", ")", "\n", "\n", "", "", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.local_dynamic_ranks.getMaximalScores": [[77, 83], ["dict", "max"], "function", ["None"], ["", "def", "getMaximalScores", "(", "scores", ",", "ignore", "=", "\"MAIN\"", ")", ":", "\n", "\t", "maximal", "=", "dict", "(", ")", "\n", "for", "w", "in", "scores", ":", "\n", "\t\t", "score", "=", "[", "item", "for", "item", "in", "scores", "[", "w", "]", "if", "not", "item", "[", "0", "]", "==", "ignore", "and", "not", "item", "[", "1", "]", "==", "ignore", "]", "\n", "maximal", "[", "w", "]", "=", "max", "(", "score", ",", "key", "=", "lambda", "x", ":", "x", "[", "2", "]", ")", "\n", "", "return", "maximal", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.local_dynamic_ranks.getRankedList": [[84, 87], ["enumerate", "sorted", "maximal_scores.items"], "function", ["None"], ["", "def", "getRankedList", "(", "maximal_scores", ")", ":", "\n", "\t", "ranks", "=", "{", "word", ":", "i", "for", "i", ",", "(", "word", ",", "item", ")", "in", "enumerate", "(", "sorted", "(", "maximal_scores", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", "[", "2", "]", ",", "reverse", "=", "True", ")", ")", "}", "\n", "return", "ranks", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.local_dynamic_ranks.writeResults": [[88, 99], ["list", "sorted", "pandas.DataFrame", "pd.DataFrame.to_csv", "ranks.items", "list.append"], "function", ["None"], ["", "def", "writeResults", "(", "scores", ",", "ranks", ",", "neighbors", ",", "filename", ",", "k", "=", "10", ",", "sep", "=", "\";\"", ")", ":", "\n", "\t", "items", "=", "list", "(", ")", "\n", "for", "word", ",", "rank", "in", "sorted", "(", "ranks", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", ":", "\n", "\t\t", "p1", ",", "p2", ",", "score", "=", "scores", "[", "word", "]", "\n", "n1", "=", "[", "n", "for", "_", ",", "n", "in", "neighbors", "[", "p1", "]", "[", "word", "]", "[", "0", "]", "[", "0", ":", "k", "]", "]", "\n", "n2", "=", "[", "n", "for", "_", ",", "n", "in", "neighbors", "[", "p2", "]", "[", "word", "]", "[", "0", "]", "[", "0", ":", "k", "]", "]", "\n", "\n", "items", ".", "append", "(", "[", "word", ",", "rank", ",", "p1", ",", "p2", ",", "n1", ",", "n2", ",", "score", "]", ")", "\n", "\n", "", "df", "=", "pd", ".", "DataFrame", "(", "items", ",", "columns", "=", "[", "\"word\"", ",", "\"rank\"", ",", "\"Period1\"", ",", "\"Period2\"", ",", "\"Neighbors1\"", ",", "\"Neighbors2\"", ",", "\"Score\"", "]", ")", "\n", "df", ".", "to_csv", "(", "filename", ",", "sep", "=", "sep", ",", "header", "=", "True", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.local_dynamic_ranks.main": [[100, 112], ["helpful_functions.readEmbeddings", "local_dynamic_ranks.emds2temporal", "local_dynamic_ranks.readNeighbors", "local_dynamic_ranks.getScores", "local_dynamic_ranks.getMaximalScores", "local_dynamic_ranks.getRankedList", "local_dynamic_ranks.writeResults", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.helpful_functions.readEmbeddings", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.local_dynamic_ranks.emds2temporal", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.local_dynamic_ranks.readNeighbors", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.local_dynamic_ranks.getScores", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.local_dynamic_ranks.getMaximalScores", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.local_dynamic_ranks.getRankedList", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.local_dynamic_ranks.writeResults"], ["", "def", "main", "(", "args", ")", ":", "\n", "\t", "embeddings", "=", "readEmbeddings", "(", "os", ".", "path", ".", "join", "(", "args", ".", "dir_path", ",", "args", ".", "embeddings_file", ")", ")", "\n", "facet_names", "=", "[", "key", "for", "key", "in", "embeddings", "if", "not", "key", "==", "\"MAIN\"", "]", "\n", "main_embeddings", ",", "temporal_embeddings", ",", "voc", "=", "emds2temporal", "(", "embeddings", ",", "facet_names", ")", "\n", "\n", "w2i", ",", "i2w", "=", "voc", "\n", "\n", "neighbors", "=", "readNeighbors", "(", "[", "os", ".", "path", ".", "join", "(", "args", ".", "dir_path", ",", "f\"{facet_name}.neighbors.pkl\"", ")", "for", "facet_name", "in", "facet_names", "]", ")", "\n", "scores", "=", "getScores", "(", "temporal_embeddings", ",", "neighbors", ",", "voc", ",", "k", "=", "args", ".", "k", ")", "\n", "maximal_scores", "=", "getMaximalScores", "(", "scores", ")", "\n", "ranks", "=", "getRankedList", "(", "maximal_scores", ")", "\n", "writeResults", "(", "maximal_scores", ",", "ranks", ",", "neighbors", ",", "os", ".", "path", ".", "join", "(", "args", ".", "dir_path", ",", "args", ".", "scores_file", ")", ",", "k", "=", "10", ",", "sep", "=", "\";\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.makeAAOneFile.Reader.__init__": [[52, 73], ["None"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "from_dir", ",", "to_file", ",", "epochs", "=", "10", ",", "sort_in_time", "=", "True", ",", "excluded_sources", "=", "[", "]", ",", "exclude_lists", "=", "[", "]", ",", "relabel_sources", "=", "{", "}", ",", "file_ext", "=", "\".txt\"", ",", "min_src_docs", "=", "100", ",", "\n", "years_range", "=", "(", "1827", ",", "1865", ")", ")", ":", "\n", "\t\t", "self", ".", "from_dir", "=", "from_dir", "\n", "self", ".", "to_file", "=", "to_file", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "sort_in_time", "=", "sort_in_time", "\n", "self", ".", "excluded_sources", "=", "excluded_sources", "\n", "self", ".", "exclude_lists", "=", "exclude_lists", "\n", "self", ".", "relabel_sources", "=", "relabel_sources", "\n", "self", ".", "file_ext", "=", "file_ext", "\n", "self", ".", "min_src_docs", "=", "min_src_docs", "\n", "self", ".", "years_range", "=", "years_range", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.makeAAOneFile.Reader._walk": [[74, 83], ["os.walk", "len", "dir_path.split", "dir_path.split", "filename.endswith", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.helpful_functions.walk"], ["", "def", "_walk", "(", "self", ",", "verbose", "=", "True", ")", ":", "\n", "\t\t", "for", "dir_path", ",", "dir_names", ",", "files", "in", "os", ".", "walk", "(", "self", ".", "from_dir", ")", ":", "\n", "\t\t\t", "if", "len", "(", "dir_names", ")", "==", "0", ":", "\n", "\t\t\t\t", "source", "=", "dir_path", ".", "split", "(", "\"/\"", ")", "[", "-", "2", "]", "\n", "if", "source", "not", "in", "self", ".", "excluded_sources", ":", "\n", "\t\t\t\t\t", "date", "=", "dir_path", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "for", "filename", "in", "files", ":", "\n", "\t\t\t\t\t\t", "if", "filename", ".", "endswith", "(", "self", ".", "file_ext", ")", ":", "\n", "\t\t\t\t\t\t\t", "yield", "os", ".", "path", ".", "join", "(", "dir_path", ",", "filename", ")", ",", "source", ",", "date", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.makeAAOneFile.Reader.transfer": [[84, 143], ["set", "set", "makeAAOneFile.Reader.min_date.timestamp", "makeAAOneFile.Reader.max_date.timestamp", "collections.defaultdict", "len", "min", "max", "sorted", "helpful_functions.safe_open_w", "print", "datetime.datetime.strptime", "makeAAOneFile.Reader._walk", "open", "range", "date.timestamp", "makeAAOneFile.date_format", "set.add", "makeAAOneFile.Reader.relabel_sources.get", "open", "ujson.loads", "fout.write", "fout.write", "line.strip", "fin.read().strip", "token.lower", "len", "makeAAOneFile.timestamp2epoch", "text.split", "makeAAOneFile.is_valid_word", "fin.read"], "methods", ["home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.helpful_functions.safe_open_w", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.makeAAOneFile.Reader._walk", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.makeAAOneFile.date_format", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.makeAAOneFile.timestamp2epoch", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.makeAAOneFile.is_valid_word"], ["", "", "", "", "", "", "def", "transfer", "(", "self", ",", "format", "=", "\"%Y%m%d\"", ",", "mode", "=", "\"source\"", ",", "verbose", "=", "False", ")", ":", "\n", "# Read all the documents in memory.", "\n", "\t\t", "documents", "=", "[", "(", "filename", ",", "source", ",", "datetime", ".", "datetime", ".", "strptime", "(", "date", ",", "date_format", "(", "date", ",", "format", ")", ")", ")", "for", "filename", ",", "source", ",", "date", "in", "self", ".", "_walk", "(", "verbose", "=", "verbose", ")", "]", "\n", "excluded_files", "=", "set", "(", ")", "\n", "for", "filename", "in", "self", ".", "exclude_lists", ":", "\n", "\t\t\t", "with", "open", "(", "filename", ")", "as", "fin", ":", "\n", "\t\t\t\t", "for", "line", "in", "fin", ":", "\n", "\t\t\t\t\t", "excluded_files", ".", "add", "(", "line", ".", "strip", "(", ")", ")", "\n", "\n", "", "", "", "documents", "=", "[", "(", "filename", ",", "source", ",", "date", ")", "for", "filename", ",", "source", ",", "date", "in", "documents", "if", "filename", "not", "in", "excluded_files", "]", "\n", "\n", "# Relabel the sources (if necessary)", "\n", "if", "len", "(", "self", ".", "relabel_sources", ")", ">", "0", ":", "\n", "\t\t\t", "documents", "=", "[", "(", "filename", ",", "self", ".", "relabel_sources", ".", "get", "(", "source", ",", "source", ")", ",", "date", ")", "for", "filename", ",", "source", ",", "date", "in", "documents", "]", "\n", "\n", "", "all_sources", "=", "set", "(", "[", "source", "for", "_", ",", "source", ",", "_", "in", "documents", "]", ")", "\n", "all_time_bins", "=", "[", "f\"T{i}\"", "for", "i", "in", "range", "(", "self", ".", "epochs", ")", "]", "\n", "self", ".", "features", "=", "all_time_bins", "\n", "if", "mode", "==", "\"source\"", ":", "\n", "\t\t\t", "self", ".", "features", "=", "self", ".", "features", "+", "[", "f\"{bin_name}_{s}\"", "for", "bin_name", "in", "all_time_bins", "for", "s", "in", "all_sources", "]", "\n", "\n", "\n", "", "self", ".", "min_date", "=", "min", "(", "documents", ",", "key", "=", "lambda", "x", ":", "x", "[", "2", "]", ")", "[", "2", "]", "\n", "self", ".", "max_date", "=", "max", "(", "documents", ",", "key", "=", "lambda", "x", ":", "x", "[", "2", "]", ")", "[", "2", "]", "\n", "min_time", "=", "self", ".", "min_date", ".", "timestamp", "(", ")", "\n", "max_time", "=", "self", ".", "max_date", ".", "timestamp", "(", ")", "\n", "\n", "stride", "=", "1", "/", "self", ".", "epochs", "\n", "\n", "if", "self", ".", "sort_in_time", ":", "\n", "\t\t\t", "ordered_collection", "=", "sorted", "(", "documents", ",", "key", "=", "lambda", "x", ":", "x", "[", "2", "]", ")", "\n", "", "else", ":", "\n", "\t\t\t", "ordered_collection", "=", "documents", "\n", "\n", "", "records", "=", "0", "\n", "self", ".", "vocab", "=", "defaultdict", "(", "int", ")", "\n", "with", "safe_open_w", "(", "self", ".", "to_file", ")", "as", "fout", ":", "\n", "\t\t\t", "for", "filename", ",", "source", ",", "date", "in", "ordered_collection", ":", "\n", "\t\t\t\t", "t", "=", "date", ".", "timestamp", "(", ")", "\n", "timestamp", "=", "(", "t", "-", "min_time", ")", "/", "(", "max_time", "-", "min_time", ")", "\n", "with", "open", "(", "filename", ")", "as", "fin", ":", "\n", "\t\t\t\t\t", "js", "=", "ujson", ".", "loads", "(", "fin", ".", "read", "(", ")", ".", "strip", "(", ")", ")", "\n", "text", "=", "js", "[", "\"corrected_text\"", "]", "\n", "tokens", "=", "[", "token", ".", "lower", "(", ")", "for", "token", "in", "text", ".", "split", "(", ")", "if", "is_valid_word", "(", "token", ")", "]", "\n", "if", "len", "(", "tokens", ")", "==", "0", ":", "\n", "\t\t\t\t\t\t", "continue", "\n", "", "for", "token", "in", "tokens", ":", "\n", "\t\t\t\t\t\t", "self", ".", "vocab", "[", "token", "]", "+=", "1", "\n", "", "tokenized_text", "=", "\" \"", ".", "join", "(", "tokens", ")", "\n", "", "bin_name", "=", "f\"T{timestamp2epoch (timestamp, stride)}\"", "\n", "source_name", "=", "f\"{bin_name}_{source}\"", "\n", "if", "mode", "==", "\"source\"", ":", "\n", "\t\t\t\t\t", "fout", ".", "write", "(", "\"\\t\"", ".", "join", "(", "[", "filename", ",", "bin_name", ",", "source_name", ",", "tokenized_text", "]", ")", "+", "\"\\n\"", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "fout", ".", "write", "(", "\"\\t\"", ".", "join", "(", "[", "filename", ",", "bin_name", ",", "bin_name", ",", "tokenized_text", "]", ")", "+", "\"\\n\"", ")", "\n", "", "records", "+=", "1", "\n", "\n", "", "", "if", "verbose", ":", "\n", "\t\t\t", "print", "(", "f\"{self.to_file} contains {records} records\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.makeAAOneFile.Reader.dumpVocab": [[144, 148], ["helpful_functions.safe_open_w", "sorted", "makeAAOneFile.Reader.vocab.items", "fout.write"], "methods", ["home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.helpful_functions.safe_open_w"], ["", "", "def", "dumpVocab", "(", "self", ",", "filename", ",", "sep", "=", "\"\\t\"", ")", ":", "\n", "\t\t", "with", "safe_open_w", "(", "filename", ")", "as", "fout", ":", "\n", "\t\t\t", "for", "item", "in", "sorted", "(", "self", ".", "vocab", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", ":", "\n", "\t\t\t\t", "fout", ".", "write", "(", "f\"{item[1]}{sep}{item[0]}\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.makeAAOneFile.Reader.dumpFeatures": [[149, 153], ["helpful_functions.safe_open_w", "fout.write"], "methods", ["home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.helpful_functions.safe_open_w"], ["", "", "", "def", "dumpFeatures", "(", "self", ",", "filename", ")", ":", "\n", "\t\t", "with", "safe_open_w", "(", "filename", ")", "as", "fout", ":", "\n", "\t\t\t", "for", "item", "in", "self", ".", "features", ":", "\n", "\t\t\t\t", "fout", ".", "write", "(", "f\"{item}\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.makeAAOneFile.readArgs": [[20, 31], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "readArgs", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-dir\"", ",", "required", "=", "True", ",", "help", "=", "\"data directory that contains the files\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-file\"", ",", "required", "=", "True", ",", "help", "=", "\"file in which the data is collated\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--features-file\"", ",", "required", "=", "True", ",", "help", "=", "\"file in which the categorical features are listed\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--vocab-file\"", ",", "required", "=", "True", ",", "help", "=", "\"file in which the vocabulary and the counts are listed\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--mode\"", ",", "required", "=", "False", ",", "choices", "=", "{", "\"temporal\"", ",", "\"source\"", "}", ",", "default", "=", "\"source\"", ",", "help", "=", "\"mode for creation of the data file (default: source)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--epochs\"", ",", "required", "=", "False", ",", "default", "=", "10", ",", "type", "=", "int", ",", "help", "=", "\"number of temporal divisions (default: 10)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ignore-file\"", ",", "required", "=", "True", ",", "type", "=", "str", ",", "help", "=", "\"file lists the files that should be ignored\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.makeAAOneFile.is_valid_word": [[32, 37], ["word.strip.strip", "re.match"], "function", ["None"], ["", "def", "is_valid_word", "(", "word", ")", ":", "\n", "\t", "\"\"\" accepts a word only if contains all alphabetic characters \n\t\tor hyphen \"\"\"", "\n", "word", "=", "word", ".", "strip", "(", ")", "\n", "return", "re", ".", "match", "(", "r'^[a-zA-Z][A-Za-z-]*$'", ",", "word", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.makeAAOneFile.timestamp2epoch": [[38, 45], ["int", "enumerate", "range"], "function", ["None"], ["", "def", "timestamp2epoch", "(", "timestamp", ",", "stride", ")", ":", "\n", "\t", "nEpochs", "=", "int", "(", "1", "/", "stride", ")", "\n", "ranges", "=", "[", "(", "i", "*", "stride", ",", "(", "i", "+", "1", ")", "*", "stride", ")", "for", "i", "in", "range", "(", "nEpochs", ")", "]", "\n", "for", "i", ",", "(", "start", ",", "end", ")", "in", "enumerate", "(", "ranges", ")", ":", "\n", "\t\t", "if", "timestamp", ">=", "start", "and", "timestamp", "<", "end", ":", "\n", "\t\t\t", "return", "i", "\n", "", "", "return", "nEpochs", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.makeAAOneFile.date_format": [[46, 50], ["len"], "function", ["None"], ["", "def", "date_format", "(", "string", ",", "format", "=", "\"%Y%m%d\"", ")", ":", "\n", "\t", "if", "len", "(", "string", ")", "==", "6", ":", "\n", "\t\t", "format", "=", "\"%Y%m\"", "\n", "", "return", "format", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.makeAAOneFile.main": [[154, 176], ["makeAAOneFile.Reader", "makeAAOneFile.Reader.transfer", "makeAAOneFile.Reader.dumpVocab", "makeAAOneFile.Reader.dumpFeatures"], "function", ["home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.makeAAOneFile.Reader.transfer", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.makeAAOneFile.Reader.dumpVocab", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.makeAAOneFile.Reader.dumpFeatures"], ["", "", "", "", "def", "main", "(", "args", ")", ":", "\n", "\t", "relabel_sources", "=", "{", "\"DouglassMonthly\"", ":", "\"DouglassPapers\"", ",", "\"FrederickDouglassPaper\"", ":", "\"DouglassPapers\"", ",", "\"TheNorthStar\"", ":", "\"DouglassPapers\"", ",", "\"TheColoredAmerican\"", ":", "\"TheColoredAmerican\"", ",", "\"WeeklyAdvocate\"", ":", "\"TheColoredAmerican\"", "}", "\n", "\n", "reader", "=", "Reader", "(", "args", ".", "data_dir", ",", "args", ".", "data_file", ",", "epochs", "=", "args", ".", "epochs", ",", "sort_in_time", "=", "True", ",", "#excluded_sources=[\"DouglassMonthly\", \"GodeysLadysBook\", \"TheCharlestonMercury-incomplete\", \"WeeklyAdvocate\"], \\", "\n", "excluded_sources", "=", "[", "\"TheCharlestonMercury-incomplete\"", "]", ",", "exclude_lists", "=", "[", "args", ".", "ignore_file", "]", ",", "relabel_sources", "=", "relabel_sources", ",", "file_ext", "=", "\".json\"", ",", "years_range", "=", "(", "1827", ",", "1865", ")", ",", "min_src_docs", "=", "500", "\n", ")", "\n", "reader", ".", "transfer", "(", "mode", "=", "args", ".", "mode", ",", "verbose", "=", "True", ")", "\n", "reader", ".", "dumpVocab", "(", "args", ".", "vocab_file", ",", "sep", "=", "\"\\t\"", ")", "\n", "reader", ".", "dumpFeatures", "(", "args", ".", "features_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.name_identification.readArgs": [[19, 29], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "readArgs", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"classify words as either names or not\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dir-path\"", ",", "required", "=", "True", ",", "type", "=", "str", ",", "help", "=", "\"path to the directory\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--scores-file\"", ",", "required", "=", "True", ",", "type", "=", "str", ",", "help", "=", "\"scores file\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--embeddings-file\"", ",", "required", "=", "True", ",", "type", "=", "str", ",", "help", "=", "\"embeddings file\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--casestats-file\"", ",", "required", "=", "True", ",", "type", "=", "str", ",", "help", "=", "\"wordcase statistics file\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--annotations-file\"", ",", "required", "=", "True", ",", "type", "=", "str", ",", "help", "=", "\"annotations file\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--names-file\"", ",", "required", "=", "True", ",", "type", "=", "str", ",", "help", "=", "\"names file\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.name_identification.load_dataset": [[30, 37], ["numpy.array", "print", "len", "len"], "function", ["None"], ["", "def", "load_dataset", "(", "propernames", ",", "non_propernames", ",", "emds", ",", "idx", ",", "iidx", ")", ":", "\n", "\t", "name_indices", "=", "[", "idx", "[", "item", "]", "for", "item", "in", "propernames", "if", "item", "in", "idx", "]", "\n", "non_name_indices", "=", "[", "idx", "[", "item", "]", "for", "item", "in", "non_propernames", "if", "item", "in", "idx", "]", "\n", "X", "=", "emds", "[", "non_name_indices", "+", "name_indices", "]", "\n", "y", "=", "np", ".", "array", "(", "[", "0", "for", "item", "in", "non_name_indices", "]", "+", "[", "1", "for", "item", "in", "name_indices", "]", ")", "\n", "print", "(", "len", "(", "name_indices", ")", ",", "len", "(", "non_name_indices", ")", ")", "\n", "return", "X", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.name_identification.run_classifier": [[38, 51], ["name_identification.load_dataset", "sklearn.model_selection.train_test_split", "sklearn.linear_model.LogisticRegression().fit", "LogisticRegression().fit.predict", "print", "print", "LogisticRegression().fit.predict", "sklearn.metrics.accuracy_score", "sklearn.metrics.classification_report", "sklearn.linear_model.LogisticRegression"], "function", ["home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.name_identification.load_dataset"], ["", "def", "run_classifier", "(", "positive_examples", ",", "negative_examples", ",", "main_embeddings", ",", "w2i", ",", "i2w", ")", ":", "\n", "\t", "X", ",", "y", "=", "load_dataset", "(", "positive_examples", ",", "negative_examples", ",", "main_embeddings", ",", "w2i", ",", "i2w", ")", "\n", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "0.25", ",", "random_state", "=", "42", ")", "\n", "\n", "clf", "=", "LogisticRegression", "(", "random_state", "=", "42", ")", ".", "fit", "(", "X_train", ",", "y_train", ")", "\n", "y_pred", "=", "clf", ".", "predict", "(", "X_test", ")", "\n", "print", "(", "accuracy_score", "(", "y_test", ",", "y_pred", ")", ")", "\n", "target_names", "=", "[", "'Non-name'", ",", "'Name'", "]", "\n", "print", "(", "classification_report", "(", "y_test", ",", "y_pred", ",", "target_names", "=", "target_names", ")", ")", "\n", "\n", "# Apply to all the words in the vocabulary", "\n", "predictions", "=", "clf", ".", "predict", "(", "main_embeddings", ")", "\n", "return", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.name_identification.get_all_names_and_locations": [[52, 60], ["name_identification.run_classifier", "set", "enumerate", "set.add"], "function", ["home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.name_identification.run_classifier"], ["", "def", "get_all_names_and_locations", "(", "positive_annotations", ",", "negative_annotations", ",", "embeddings", ",", "w2i", ",", "i2w", ")", ":", "\n", "\t", "predictions", "=", "run_classifier", "(", "positive_annotations", ",", "negative_annotations", ",", "embeddings", ",", "w2i", ",", "i2w", ")", "\n", "predicted_names_locations", "=", "set", "(", ")", "\n", "for", "i", ",", "item", "in", "enumerate", "(", "predictions", ")", ":", "\n", "\t\t", "if", "item", "==", "1", ":", "\n", "\t\t\t", "predicted_names_locations", ".", "add", "(", "i2w", "[", "i", "]", ")", "\n", "\n", "", "", "return", "predicted_names_locations", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.name_identification.generate_annotations": [[61, 71], ["random.choices", "print", "open", "set", "len", "len", "set.add", "len", "line.strip"], "function", ["None"], ["", "def", "generate_annotations", "(", "filename", ",", "w2i", ")", ":", "\n", "\t", "with", "open", "(", "filename", ")", "as", "fin", ":", "\n", "\t\t", "annotations", "=", "set", "(", ")", "\n", "for", "line", "in", "fin", ":", "\n", "\t\t\t", "annotations", ".", "add", "(", "line", ".", "strip", "(", ")", ")", "\n", "\n", "", "", "neg_annotations", "=", "random", ".", "choices", "(", "[", "w", "for", "w", "in", "w2i", "if", "w", "not", "in", "annotations", "]", ",", "k", "=", "len", "(", "annotations", ")", ")", "\n", "print", "(", "len", "(", "annotations", ")", ",", "len", "(", "neg_annotations", ")", ")", "\n", "\n", "return", "annotations", ",", "neg_annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.name_identification.main": [[72, 101], ["helpful_functions.readEmbeddings", "numpy.array", "helpful_functions.normalize", "pandas.read_csv", "name_identification.generate_annotations", "name_identification.get_all_names_and_locations", "pandas.read_csv", "set", "os.path.join", "os.path.join", "list", "open", "enumerate", "enumerate", "os.path.join", "fout.write", "range", "len"], "function", ["home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.helpful_functions.readEmbeddings", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.findNearest.normalize", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.name_identification.generate_annotations", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.name_identification.get_all_names_and_locations"], ["", "def", "main", "(", "args", ")", ":", "\n", "\t", "embeddings", "=", "readEmbeddings", "(", "os", ".", "path", ".", "join", "(", "args", ".", "dir_path", ",", "args", ".", "embeddings_file", ")", ")", "\n", "static_embeddings", "=", "embeddings", "[", "\"MAIN\"", "]", "\n", "\n", "w2i", "=", "{", "w", ":", "i", "for", "i", ",", "w", "in", "enumerate", "(", "static_embeddings", ")", "}", "\n", "i2w", "=", "{", "i", ":", "w", "for", "i", ",", "w", "in", "enumerate", "(", "static_embeddings", ")", "}", "\n", "\n", "# the atemporal embeddings", "\n", "main_embeddings", "=", "np", ".", "array", "(", "[", "static_embeddings", "[", "i2w", "[", "i", "]", "]", "for", "i", "in", "range", "(", "len", "(", "i2w", ")", ")", "]", ")", "\n", "main_embeddings", "=", "normalize", "(", "main_embeddings", ")", "\n", "\n", "# read the words and their change scores", "\n", "ranks", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "args", ".", "dir_path", ",", "args", ".", "scores_file", ")", ",", "sep", "=", "\";\"", ")", "\n", "\n", "# names and locations identification using name embeddings", "\n", "positives", ",", "negatives", "=", "generate_annotations", "(", "args", ".", "annotations_file", ",", "w2i", ")", "\n", "\n", "names_locations_by_embeddings", "=", "get_all_names_and_locations", "(", "positives", ",", "negatives", ",", "main_embeddings", ",", "w2i", ",", "i2w", ")", "\n", "\n", "# names and locations identification using wordcase statistics\t", "\n", "wordcase_stats", "=", "pd", ".", "read_csv", "(", "args", ".", "casestats_file", ",", "sep", "=", "\"\\t\"", ")", "\n", "casestats_names_locations", "=", "set", "(", "list", "(", "wordcase_stats", "[", "(", "wordcase_stats", ".", "upperp", ">", "0.8", ")", "|", "(", "wordcase_stats", ".", "titlep", ">", "0.8", ")", "|", "(", "wordcase_stats", ".", "lowerp", "<=", "0.2", ")", "]", ".", "word", ".", "values", ")", ")", "\n", "names_locations_by_casestats", "=", "{", "w", "for", "w", "in", "w2i", "if", "w", "in", "casestats_names_locations", "}", "\n", "names_locations", "=", "names_locations_by_embeddings", "&", "names_locations_by_casestats", "\n", "\n", "# write the names and locations to file", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "dir_path", ",", "args", ".", "names_file", ")", ",", "\"w\"", ")", "as", "fout", ":", "\n", "\t\t", "for", "w", "in", "names_locations", ":", "\n", "\t\t\t", "fout", ".", "write", "(", "f\"{w}\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.filter_words.readArgs": [[11, 21], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "readArgs", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"filter the words\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dir-path\"", ",", "required", "=", "True", ",", "type", "=", "str", ",", "help", "=", "\"directory path\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--scores-file\"", ",", "required", "=", "True", ",", "type", "=", "str", ",", "help", "=", "\"scores file\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--period-freq-file\"", ",", "required", "=", "True", ",", "type", "=", "str", ",", "help", "=", "\"period frequency file\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--filter-names\"", ",", "required", "=", "True", ",", "type", "=", "str", ",", "nargs", "=", "\"+\"", ",", "help", "=", "\"filter names\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--output-file\"", ",", "required", "=", "True", ",", "type", "=", "str", ",", "help", "=", "\"output file\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--periods\"", ",", "required", "=", "False", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "\"number of periods\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.filter_words.readDictFromFile": [[22, 32], ["dict", "open", "line.strip().split", "int", "helpful_functions.init_dict", "line.strip"], "function", ["home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.helpful_functions.init_dict"], ["", "def", "readDictFromFile", "(", "filename", ",", "names", ")", ":", "\n", "\t", "freq", "=", "dict", "(", ")", "\n", "with", "open", "(", "filename", ")", "as", "fin", ":", "\n", "\t\t", "for", "line", "in", "fin", ":", "\n", "\t\t\t", "parts", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\",\"", ")", "\n", "word", ",", "facet", ",", "count", "=", "parts", "[", "0", "]", ",", "parts", "[", "1", "]", ",", "parts", "[", "2", "]", "\n", "if", "word", "not", "in", "freq", ":", "\n", "\t\t\t\t", "freq", "[", "word", "]", "=", "init_dict", "(", "names", ")", "\n", "", "freq", "[", "word", "]", "[", "facet", "]", "=", "int", "(", "count", ")", "\n", "", "", "return", "freq", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.filter_words.main": [[33, 60], ["pandas.read_csv", "set", "filter_words.readDictFromFile", "df[].values.tolist", "copy.deepcopy", "pandas.DataFrame", "pd.DataFrame.to_csv", "os.path.join", "os.path.join", "str", "row.append", "row.append", "row.append", "row.append", "os.path.join", "open", "range", "eval", "eval", "os.path.join", "set.add", "df[].isin", "line.strip"], "function", ["home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.create_filters.readDictFromFile"], ["", "def", "main", "(", "args", ")", ":", "\n", "\t", "df", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "args", ".", "dir_path", ",", "args", ".", "scores_file", ")", ",", "sep", "=", "\";\"", ")", "\n", "words", "=", "set", "(", ")", "\n", "for", "filter_name", "in", "args", ".", "filter_names", ":", "\n", "\t\t", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "dir_path", ",", "f\"{filter_name}.ignore\"", ")", ")", "as", "fin", ":", "\n", "\t\t\t", "for", "line", "in", "fin", ":", "\n", "\t\t\t\t", "words", ".", "add", "(", "line", ".", "strip", "(", ")", ")", "\n", "\n", "", "", "", "period_names", "=", "[", "f'T{i}'", "for", "i", "in", "range", "(", "args", ".", "periods", ")", "]", "\n", "\n", "period_freq", "=", "readDictFromFile", "(", "os", ".", "path", ".", "join", "(", "args", ".", "dir_path", ",", "args", ".", "period_freq_file", ")", ",", "period_names", ")", "\n", "\n", "df", "=", "df", "[", "~", "df", "[", "\"word\"", "]", ".", "isin", "(", "words", ")", "]", "\n", "rows", "=", "df", "[", "[", "\"word\"", ",", "\"rank\"", ",", "\"Period1\"", ",", "\"Period2\"", ",", "\"Neighbors1\"", ",", "\"Neighbors2\"", "]", "]", ".", "values", ".", "tolist", "(", ")", "\n", "new_rows", "=", "deepcopy", "(", "rows", ")", "\n", "for", "row", "in", "new_rows", ":", "\n", "\t\t", "word", "=", "str", "(", "row", "[", "0", "]", ")", "\n", "p1", ",", "p2", "=", "row", "[", "2", "]", ",", "row", "[", "3", "]", "\n", "n1", ",", "n2", "=", "eval", "(", "row", "[", "4", "]", ")", ",", "eval", "(", "row", "[", "5", "]", ")", "\n", "#print (word, p1, p2)", "\n", "row", ".", "append", "(", "period_freq", "[", "word", "]", "[", "p1", "]", ")", "\n", "row", ".", "append", "(", "period_freq", "[", "word", "]", "[", "p2", "]", ")", "\n", "row", ".", "append", "(", "[", "period_freq", "[", "n", "]", "[", "p1", "]", "for", "n", "in", "n1", "]", ")", "\n", "row", ".", "append", "(", "[", "period_freq", "[", "n", "]", "[", "p2", "]", "for", "n", "in", "n2", "]", ")", "\n", "\n", "", "new_df", "=", "pd", ".", "DataFrame", "(", "new_rows", ",", "columns", "=", "[", "\"word\"", ",", "\"rank\"", ",", "\"Period1\"", ",", "\"Period2\"", ",", "\"Neighbors1\"", ",", "\"Neighbors2\"", ",", "\"Freq1\"", ",", "\"Freq2\"", ",", "\"NeighborsFreq1\"", ",", "\"NeighborsFreq2\"", "]", ")", "\n", "new_df", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "args", ".", "dir_path", ",", "args", ".", "output_file", ")", ",", "sep", "=", "\";\"", ",", "header", "=", "True", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.final_words.readArgs": [[11, 18], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "readArgs", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"filter the words\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dir-path\"", ",", "required", "=", "True", ",", "type", "=", "str", ",", "help", "=", "\"directory path\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--changes-file\"", ",", "required", "=", "True", ",", "type", "=", "str", ",", "help", "=", "\"changes file\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--output-file\"", ",", "required", "=", "True", ",", "type", "=", "str", ",", "help", "=", "\"output file\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.final_words.readDictFromFile": [[19, 29], ["dict", "open", "line.strip().split", "int", "helpful_functions.init_dict", "line.strip"], "function", ["home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.helpful_functions.init_dict"], ["", "def", "readDictFromFile", "(", "filename", ",", "names", ")", ":", "\n", "\t", "freq", "=", "dict", "(", ")", "\n", "with", "open", "(", "filename", ")", "as", "fin", ":", "\n", "\t\t", "for", "line", "in", "fin", ":", "\n", "\t\t\t", "parts", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\",\"", ")", "\n", "word", ",", "facet", ",", "count", "=", "parts", "[", "0", "]", ",", "parts", "[", "1", "]", ",", "parts", "[", "2", "]", "\n", "if", "word", "not", "in", "freq", ":", "\n", "\t\t\t\t", "freq", "[", "word", "]", "=", "init_dict", "(", "names", ")", "\n", "", "freq", "[", "word", "]", "[", "facet", "]", "=", "int", "(", "count", ")", "\n", "", "", "return", "freq", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.final_words.main": [[30, 42], ["pandas.read_csv", "df[].values.tolist", "list", "pandas.DataFrame", "pd.DataFrame.to_csv", "os.path.join", "os.path.join", "int", "int", "list.append"], "function", ["None"], ["", "def", "main", "(", "args", ")", ":", "\n", "\t", "df", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "args", ".", "dir_path", ",", "args", ".", "changes_file", ")", ",", "sep", "=", "\";\"", ")", "\n", "rows", "=", "df", "[", "[", "\"word\"", ",", "\"rank\"", ",", "\"Period1\"", ",", "\"Period2\"", ",", "\"Neighbors1\"", ",", "\"Neighbors2\"", ",", "\"Freq1\"", ",", "\"Freq2\"", ",", "\"NeighborsFreq1\"", ",", "\"NeighborsFreq2\"", "]", "]", ".", "values", ".", "tolist", "(", ")", "\n", "new_rows", "=", "list", "(", ")", "\n", "for", "row", "in", "rows", ":", "\n", "\t\t", "p1", ",", "p2", "=", "row", "[", "2", "]", ",", "row", "[", "3", "]", "\n", "t1", ",", "t2", "=", "int", "(", "p1", "[", "1", ":", "]", ")", ",", "int", "(", "p2", "[", "1", ":", "]", ")", "\n", "if", "(", "t2", "-", "t1", ")", "==", "1", ":", "\n", "\t\t\t", "new_rows", ".", "append", "(", "row", ")", "\n", "\n", "", "", "new_df", "=", "pd", ".", "DataFrame", "(", "new_rows", ",", "columns", "=", "[", "\"word\"", ",", "\"rank\"", ",", "\"Period1\"", ",", "\"Period2\"", ",", "\"Neighbors1\"", ",", "\"Neighbors2\"", ",", "\"Freq1\"", ",", "\"Freq2\"", ",", "\"NeighborsFreq1\"", ",", "\"NeighborsFreq2\"", "]", ")", "\n", "new_df", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "args", ".", "dir_path", ",", "args", ".", "output_file", ")", ",", "sep", "=", "\";\"", ",", "header", "=", "True", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.near_neighbors.readArgs": [[10, 19], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "readArgs", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Near negihbors for words\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dir-path\"", ",", "required", "=", "True", ",", "type", "=", "str", ",", "help", "=", "\"directory path\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--embeddings-file\"", ",", "required", "=", "True", ",", "type", "=", "str", ",", "help", "=", "\"embeddings file\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--near-neighbors-file\"", ",", "required", "=", "True", ",", "type", "=", "str", ",", "help", "=", "\"near neighbors file\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--facet-name\"", ",", "required", "=", "False", ",", "type", "=", "str", ",", "default", "=", "\"MAIN\"", ",", "help", "=", "\"name of the facet (default: MAIN)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--nearest\"", ",", "required", "=", "False", ",", "type", "=", "int", ",", "default", "=", "25", ",", "help", "=", "\"number of near neighbors (default: 25)\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.near_neighbors.getNeighbors": [[20, 30], ["collections.defaultdict", "enumerate", "range", "len", "neighbors[].append", "logging.info", "mylib.semantic_neighbors", "len"], "function", ["home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.mylib.semantic_neighbors"], ["", "def", "getNeighbors", "(", "all_embeddings", ",", "w2i", ",", "i2w", ",", "k", "=", "25", ",", "log_every", "=", "1000", ")", ":", "\n", "\t", "neighbors", "=", "defaultdict", "(", "list", ")", "\n", "for", "index", ",", "w", "in", "enumerate", "(", "w2i", ")", ":", "\n", "\t\t", "for", "i", "in", "range", "(", "len", "(", "all_embeddings", ")", ")", ":", "\n", "\t\t\t", "neighbors", "[", "w", "]", ".", "append", "(", "semantic_neighbors", "(", "w", ",", "all_embeddings", "[", "i", "]", ",", "(", "w2i", ",", "i2w", ")", ",", "k", "=", "k", ")", ")", "\n", "\n", "", "if", "(", "index", "+", "1", ")", "%", "log_every", "==", "0", ":", "\n", "\t\t\t", "logging", ".", "info", "(", "f\"Words processed: {index+1}, Percentage: {(index+1)/len(w2i)}\"", ")", "\n", "\n", "", "", "return", "neighbors", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.near_neighbors.main": [[31, 64], ["helpful_functions.readEmbeddings", "numpy.array", "helpful_functions.normalize", "list", "near_neighbors.getNeighbors", "os.path.join", "helpful_functions.normalize", "list.append", "list.append", "open", "pickle.dump", "enumerate", "enumerate", "numpy.array", "os.path.join", "range", "len", "range", "len"], "function", ["home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.helpful_functions.readEmbeddings", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.findNearest.normalize", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.near_neighbors.getNeighbors", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.findNearest.normalize"], ["", "def", "main", "(", "args", ")", ":", "\n", "\t", "embeddings", "=", "readEmbeddings", "(", "os", ".", "path", ".", "join", "(", "args", ".", "dir_path", ",", "args", ".", "embeddings_file", ")", ")", "\n", "\n", "# Separate the main embeddings and the facet embeddings", "\n", "static_embeddings", "=", "embeddings", "[", "\"MAIN\"", "]", "\n", "\n", "# vocabulary", "\n", "w2i", "=", "{", "w", ":", "i", "for", "i", ",", "w", "in", "enumerate", "(", "static_embeddings", ")", "}", "\n", "i2w", "=", "{", "i", ":", "w", "for", "i", ",", "w", "in", "enumerate", "(", "static_embeddings", ")", "}", "\n", "\n", "# the atemporal embeddings", "\n", "main_embeddings", "=", "np", ".", "array", "(", "[", "static_embeddings", "[", "i2w", "[", "i", "]", "]", "for", "i", "in", "range", "(", "len", "(", "i2w", ")", ")", "]", ")", "\n", "main_embeddings", "=", "normalize", "(", "main_embeddings", ")", "\n", "\n", "if", "not", "args", ".", "facet_name", "==", "\"MAIN\"", ":", "\n", "\t\t", "residual_embeddings", "=", "embeddings", "[", "args", ".", "facet_name", "]", "\n", "# temporal embeddings (just add the static embeddings to the facets)", "\n", "temporal_embeddings", "=", "normalize", "(", "np", ".", "array", "(", "[", "static_embeddings", "[", "i2w", "[", "i", "]", "]", "+", "residual_embeddings", "[", "i2w", "[", "i", "]", "]", "for", "i", "in", "range", "(", "len", "(", "i2w", ")", ")", "]", ")", ")", "\n", "\n", "\n", "# all the embeddings (the atemporal embeddings are first followed by all the temporal embeddings)", "\n", "", "all_embeddings", "=", "list", "(", ")", "\n", "if", "args", ".", "facet_name", "==", "\"MAIN\"", ":", "\n", "\t\t", "all_embeddings", ".", "append", "(", "main_embeddings", ")", "\n", "", "else", ":", "\n", "\t\t", "all_embeddings", ".", "append", "(", "temporal_embeddings", ")", "\n", "\n", "", "neighbors", "=", "getNeighbors", "(", "all_embeddings", ",", "w2i", ",", "i2w", ",", "k", "=", "args", ".", "nearest", ")", "\n", "\n", "# write the neighbors to file", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "dir_path", ",", "args", ".", "near_neighbors_file", ")", ",", "\"wb\"", ")", "as", "fout", ":", "\n", "\t\t", "pickle", ".", "dump", "(", "neighbors", ",", "fout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.findNearest.find": [[11, 31], ["print", "sorted", "range", "print", "print", "scores.items", "print", "numpy.inner"], "function", ["None"], ["def", "find", "(", "word", ",", "data", ",", "name", ")", ":", "\n", "\t", "print", "(", "f\"Finding: {word} in {name}\"", ")", "\n", "scores", "=", "{", "}", "\n", "if", "word", "not", "in", "data", ":", "\n", "\t\t", "print", "(", "f\"{word} not in vocab\"", ")", "\n", "return", "\n", "\n", "", "a", "=", "data", "[", "word", "]", "\n", "for", "word2", "in", "data", ":", "\n", "\t\t", "try", ":", "\n", "\t\t\t", "score", "=", "np", ".", "inner", "(", "a", ",", "data", "[", "word2", "]", ")", "\n", "scores", "[", "word2", "]", "=", "score", "\n", "", "except", ":", "\n", "\t\t\t", "pass", "\n", "\n", "", "", "sorted_x", "=", "sorted", "(", "scores", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "\t\t", "(", "k", ",", "v", ")", "=", "sorted_x", "[", "i", "]", "\n", "print", "(", "f\"{k}\\t{v:.3f}\"", ")", "\n", "", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.findNearest.bigfind": [[33, 41], ["sorted", "sorted", "findNearest.find", "findNearest.find"], "function", ["home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.findNearest.find", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.findNearest.find"], ["", "def", "bigfind", "(", "word", ",", "embeddings", ",", "expected_facet", "=", "None", ")", ":", "\n", "\t", "if", "expected_facet", "==", "None", ":", "\n", "\t\t", "for", "n", "in", "sorted", "(", "embeddings", ")", ":", "\n", "\t\t\t", "find", "(", "word", ",", "embeddings", "[", "n", "]", ",", "n", ")", "\n", "", "", "else", ":", "\n", "\t\t", "for", "n", "in", "sorted", "(", "embeddings", ")", ":", "\n", "\t\t\t", "if", "n", "==", "expected_facet", ":", "\n", "\t\t\t\t", "find", "(", "word", ",", "embeddings", "[", "n", "]", ",", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.findNearest.normalize": [[43, 51], ["numpy.linalg.norm"], "function", ["None"], ["", "", "", "", "def", "normalize", "(", "embeddings", ")", ":", "\n", "\t", "for", "name", "in", "embeddings", ":", "\n", "\t\t", "for", "word", "in", "embeddings", "[", "name", "]", ":", "\n", "\t\t\t", "a", "=", "embeddings", "[", "name", "]", "[", "word", "]", "\n", "norm", "=", "LA", ".", "norm", "(", "a", ",", "2", ")", "\n", "\n", "a", "/=", "norm", "\n", "embeddings", "[", "name", "]", "[", "word", "]", "=", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.findNearest.getFacets": [[53, 67], ["open", "enumerate", "open.close", "facets.keys", "line.rstrip().split", "line.rstrip"], "function", ["None"], ["", "", "", "def", "getFacets", "(", "filename", ")", ":", "\n", "\t", "file", "=", "open", "(", "filename", ")", "\n", "\n", "facets", "=", "{", "}", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "file", ")", ":", "\n", "\t\t", "if", "i", ">", "0", ":", "\n", "\t\t\t", "cols", "=", "line", ".", "rstrip", "(", ")", ".", "split", "(", "\" \"", ")", "\n", "facets", "[", "cols", "[", "0", "]", "]", "=", "1", "\n", "", "", "file", ".", "close", "(", ")", "\n", "\n", "# don't count the base facet", "\n", "#del facets[\"MAIN\"]", "\n", "\n", "return", "facets", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.findNearest.process": [[68, 128], ["open", "findNearest.getFacets", "open.close", "findNearest.normalize", "print", "sys.stdin.readline", "sys.stdin.readline.rstrip().split", "numpy.array", "len", "sys.stdin.readline.rstrip", "print", "findNearest.bigfind", "print", "sys.stdin.readline", "len", "sys.stdin.readline.rstrip", "numpy.zeros", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.findNearest.getFacets", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.findNearest.normalize", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.findNearest.bigfind"], ["", "def", "process", "(", "filename", ",", "expected_facet", "=", "None", ")", ":", "\n", "\t", "file", "=", "open", "(", "filename", ")", "\n", "\n", "embeddings", "=", "{", "}", "\n", "\n", "facets", "=", "getFacets", "(", "filename", ")", "\n", "\n", "# if you want to only consider a few metadata facets and not all 51 states, do that here.  e.g.:", "\n", "# facets=[\"MA\", \"PA\"]", "\n", "\n", "for", "facet", "in", "facets", ":", "\n", "\t\t", "embeddings", "[", "facet", "]", "=", "{", "}", "\n", "\n", "", "for", "line", "in", "file", ":", "\n", "\t\t", "cols", "=", "line", ".", "rstrip", "(", ")", ".", "split", "(", "\" \"", ")", "\n", "if", "len", "(", "cols", ")", "<", "10", ":", "\n", "\t\t\t", "continue", "\n", "\n", "", "facet", "=", "cols", "[", "0", "]", "\n", "\n", "#if facet != \"MAIN\" and facet not in embeddings:", "\n", "if", "facet", "not", "in", "embeddings", ":", "\n", "\t\t\t", "continue", "\n", "\n", "", "word", "=", "cols", "[", "1", "]", "\n", "vals", "=", "cols", "[", "2", ":", "]", "\n", "a", "=", "np", ".", "array", "(", "vals", ",", "dtype", "=", "float", ")", ";", "\n", "size", "=", "len", "(", "vals", ")", "\n", "\n", "## ", "\n", "# State embeddings for a word = the MAIN embedding for that word *plus* the state-specific deviation", "\n", "# e.g.", "\n", "# \"wicked\" in MA = wicked/MAIN + wicked/MA", "\n", "##", "\n", "\n", "if", "facet", "==", "\"MAIN\"", ":", "\n", "\t\t\t", "for", "n", "in", "embeddings", ":", "\n", "\t\t\t\t", "if", "word", "not", "in", "embeddings", "[", "n", "]", ":", "\n", "\t\t\t\t\t", "embeddings", "[", "n", "]", "[", "word", "]", "=", "np", ".", "zeros", "(", "size", ")", "\n", "\n", "", "embeddings", "[", "n", "]", "[", "word", "]", "+=", "a", "\n", "\n", "", "", "else", ":", "\n", "\t\t\t", "if", "word", "not", "in", "embeddings", "[", "facet", "]", ":", "\n", "\t\t\t\t", "embeddings", "[", "facet", "]", "[", "word", "]", "=", "np", ".", "zeros", "(", "size", ")", "\n", "\n", "", "embeddings", "[", "facet", "]", "[", "word", "]", "+=", "a", "\n", "\n", "", "", "file", ".", "close", "(", ")", "\n", "\n", "normalize", "(", "embeddings", ")", "\n", "\n", "print", "(", "\"query (ctrl-c to quit): \"", ")", "\n", "line", "=", "sys", ".", "stdin", ".", "readline", "(", ")", "\n", "while", "line", ":", "\n", "\t\t", "word", "=", "line", ".", "rstrip", "(", ")", "\n", "print", "(", "word", ")", "\n", "bigfind", "(", "word", ",", "embeddings", ",", "expected_facet", "=", "expected_facet", ")", "\n", "print", "(", "\"query (ctrl-c to quit): \"", ")", "\n", "line", "=", "sys", ".", "stdin", ".", "readline", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.leadership_scores_new.readArgs": [[10, 20], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "readArgs", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Comparing per word leadership statistic with a randomized dataset\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--rand-path\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"directory contains source conditional embeddings for randomized datasets\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--obs-path\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"directory that contains the source conditional embeddings for observed data\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--embeddings-file\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"embeddings file\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--feats-file\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"features file\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--leaders-file\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"leaders file\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--output-file\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"output file\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.leadership_scores_new.readDFAsDict": [[21, 27], ["dict", "df[].iterrows"], "function", ["None"], ["", "def", "readDFAsDict", "(", "df", ",", "columns", "=", "[", "\"word\"", ",", "\"s1\"", ",", "\"s2\"", ",", "\"t\"", ",", "\"t+1\"", ",", "\"Lead1\"", "]", ")", ":", "\n", "\t", "words", "=", "dict", "(", ")", "\n", "cols", "=", "columns", "[", "1", ":", "]", "\n", "for", "i", ",", "row", "in", "df", "[", "columns", "]", ".", "iterrows", "(", ")", ":", "\n", "\t\t", "words", "[", "row", "[", "\"word\"", "]", "]", "=", "[", "row", "[", "col", "]", "for", "col", "in", "cols", "]", "\n", "", "return", "words", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.leadership_scores_new.readFeats": [[28, 37], ["open", "line.strip().split", "len", "facet_names.append", "line.strip", "line.strip"], "function", ["None"], ["", "def", "readFeats", "(", "filename", ")", ":", "\n", "\t", "facet_names", "=", "[", "(", "MAIN_FEAT", ",", ")", "]", "\n", "with", "open", "(", "filename", ")", "as", "fin", ":", "\n", "\t\t", "for", "line", "in", "fin", ":", "\n", "\t\t\t", "parts", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"_\"", ")", "\n", "if", "len", "(", "parts", ")", ">", "1", ":", "\n", "\t\t\t\t", "facet_names", ".", "append", "(", "(", "parts", "[", "0", "]", ",", "line", ".", "strip", "(", ")", ")", ")", "\n", "\n", "", "", "", "return", "facet_names", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.leadership_scores_new.transform_to_numpy": [[38, 49], ["numpy.array", "activated_facets.insert", "numpy.array", "helpful_functions.normalize", "len", "numpy.sum", "enumerate", "enumerate"], "function", ["home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.findNearest.normalize"], ["", "def", "transform_to_numpy", "(", "dict_embeddings", ",", "w2i", ",", "i2w", ",", "activated_facets", ",", "apply_normalization", "=", "False", ")", ":", "\n", "\t", "if", "len", "(", "activated_facets", ")", "==", "1", "and", "MAIN_FEAT", "in", "activated_facets", ":", "\n", "\t\t", "mat", "=", "np", ".", "array", "(", "[", "dict_embeddings", "[", "MAIN_FEAT", "]", "[", "w", "]", "for", "i", ",", "w", "in", "enumerate", "(", "w2i", ")", "]", ")", "\n", "", "else", ":", "\n", "\t\t", "activated_facets", ".", "insert", "(", "0", ",", "MAIN_FEAT", ")", "\n", "mat", "=", "np", ".", "array", "(", "[", "np", ".", "sum", "(", "[", "dict_embeddings", "[", "facet_name", "]", "[", "w", "]", "for", "facet_name", "in", "activated_facets", "]", ",", "axis", "=", "0", ")", "for", "i", ",", "w", "in", "enumerate", "(", "w2i", ")", "]", ")", "\n", "", "if", "apply_normalization", ":", "\n", "\t\t", "mat", "=", "normalize", "(", "mat", ")", "\n", "", "return", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.leadership_scores_new.get_conditional_embeddings": [[50, 60], ["dict", "leadership_scores_new.transform_to_numpy", "list", "len", "tuple", "facet[].split"], "function", ["home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.leadership_scores.transform_to_numpy"], ["", "def", "get_conditional_embeddings", "(", "deviations", ",", "w2i", ",", "i2w", ",", "facet_names", ",", "apply_normalization", "=", "False", ")", ":", "\n", "# Calculate the true embeddings based on the deviations.", "\n", "\t", "fully_conditional_embeddings", "=", "dict", "(", ")", "\n", "for", "facet", "in", "facet_names", ":", "\n", "\t\t", "mat", "=", "transform_to_numpy", "(", "deviations", ",", "w2i", ",", "i2w", ",", "list", "(", "facet", ")", ",", "apply_normalization", "=", "apply_normalization", ")", "\n", "if", "len", "(", "facet", ")", "==", "1", "and", "MAIN_FEAT", "in", "facet", ":", "\n", "\t\t\t", "fully_conditional_embeddings", "[", "MAIN_FEAT", "]", "=", "mat", "\n", "", "else", ":", "\n", "\t\t\t", "fully_conditional_embeddings", "[", "tuple", "(", "facet", "[", "1", "]", ".", "split", "(", "\"_\"", ")", ")", "]", "=", "mat", "\n", "", "", "return", "fully_conditional_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.leadership_scores_new.get_lead_score": [[61, 66], ["tuple", "leadership_scores_new.lead_measurement", "int", "int"], "function", ["home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.leadership_scores.lead_measurement"], ["", "def", "get_lead_score", "(", "w", ",", "deviations", ",", "embeddings", ",", "observed_stats", ",", "w2i", ",", "lead_type", "=", "\"l1\"", ")", ":", "\n", "\t", "_", ",", "s1", ",", "s2", ",", "t1", ",", "t2", ",", "lead1", "=", "tuple", "(", "observed_stats", ")", "\n", "t1", ",", "t2", "=", "int", "(", "t1", "[", "1", ":", "]", ")", ",", "int", "(", "t2", "[", "1", ":", "]", ")", "\n", "lead", "=", "lead_measurement", "(", "deviations", ",", "embeddings", ",", "w", ",", "s1", ",", "s2", ",", "t1", ",", "t2", ",", "w2i", ",", "lead_type", ")", "\n", "return", "lead", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.leadership_scores_new.lead_measurement": [[67, 93], ["numpy.dot", "numpy.dot", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["", "def", "lead_measurement", "(", "deviations", ",", "embeddings", ",", "w", ",", "s1", ",", "s2", ",", "t1", ",", "t2", ",", "w2i", ",", "lead_type", ")", ":", "\n", "# No point in calculating the lead-lag between sources", "\n", "# that were inactive at t1 and t2.", "\n", "# The following condition checks for that by measuring", "\n", "# a source-specific deviation at the given times.", "\n", "#if w not in deviations:", "\n", "#   return 1 # This shouldn't really happen but I will debug this later.", "\n", "\t", "if", "w", "not", "in", "deviations", "[", "f\"T{t1}_{s1}\"", "]", "or", "w", "not", "in", "deviations", "[", "f\"T{t2}_{s2}\"", "]", "or", "w", "not", "in", "deviations", "[", "f\"T{t1}_{s2}\"", "]", ":", "\n", "\t\t", "return", "-", "1", "# word not present", "\n", "\n", "", "elif", "np", ".", "linalg", ".", "norm", "(", "deviations", "[", "f\"T{t1}_{s1}\"", "]", "[", "w", "]", ")", "==", "0", "or", "np", ".", "linalg", ".", "norm", "(", "deviations", "[", "f\"T{t2}_{s2}\"", "]", "[", "w", "]", ")", "==", "0", "or", "np", ".", "linalg", ".", "norm", "(", "deviations", "[", "f\"T{t1}_{s2}\"", "]", "[", "w", "]", ")", "==", "0", ":", "\n", "\t\t", "return", "-", "np", ".", "inf", "\n", "\n", "", "e1", "=", "embeddings", "[", "(", "f\"T{t1}\"", ",", "s1", ")", "]", "[", "w2i", "[", "w", "]", "]", "\n", "e2", "=", "embeddings", "[", "(", "f\"T{t2}\"", ",", "s2", ")", "]", "[", "w2i", "[", "w", "]", "]", "\n", "e3", "=", "embeddings", "[", "(", "f\"T{t1}\"", ",", "s2", ")", "]", "[", "w2i", "[", "w", "]", "]", "\n", "\n", "num", "=", "np", ".", "dot", "(", "e1", ",", "e2", ")", "\n", "den", "=", "np", ".", "dot", "(", "e3", ",", "e2", ")", "\n", "\n", "if", "lead_type", "==", "\"l1\"", ":", "\n", "\t\t", "return", "num", "/", "den", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.leadership_scores_new.main": [[94, 128], ["pandas.read_csv", "leadership_scores_new.readDFAsDict", "os.path.join", "helpful_functions.readEmbeddings", "len", "os.path.join", "leadership_scores_new.readFeats", "leadership_scores_new.get_conditional_embeddings", "dict", "os.path.join", "leadership_scores_new.get_lead_score", "open", "fout.write", "sorted", "enumerate", "enumerate", "os.path.join", "dict.items", "fout.write"], "function", ["home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.leadership_scores_new.readDFAsDict", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.helpful_functions.readEmbeddings", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.leadership_scores.readFeats", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.leadership_scores.get_conditional_embeddings", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.leadership_scores_new.get_lead_score"], ["", "", "def", "main", "(", "args", ")", ":", "\n", "# load the observed leadership data", "\n", "\t", "observed_df", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "args", ".", "obs_path", ",", "args", ".", "leaders_file", ")", ",", "sep", "=", "\";\"", ")", "\n", "\n", "# Select word, s1, s2, t, t+1, lead1", "\n", "observed_dict", "=", "readDFAsDict", "(", "observed_df", ",", "columns", "=", "[", "\"word\"", ",", "\"rank\"", ",", "\"s1\"", ",", "\"s2\"", ",", "\"t\"", ",", "\"t+1\"", ",", "\"Lead1\"", "]", ")", "\n", "\n", "# Now go over the randomization run", "\n", "embeddings_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "rand_path", ",", "args", ".", "embeddings_file", ")", "\n", "embeddings", "=", "readEmbeddings", "(", "embeddings_file", ")", "\n", "static_embeddings", "=", "embeddings", "[", "MAIN_FEAT", "]", "\n", "\n", "# vocabulary", "\n", "w2i", "=", "{", "w", ":", "i", "for", "i", ",", "w", "in", "enumerate", "(", "static_embeddings", ")", "}", "\n", "i2w", "=", "{", "i", ":", "w", "for", "i", ",", "w", "in", "enumerate", "(", "static_embeddings", ")", "}", "\n", "vocab_size", "=", "len", "(", "w2i", ")", "\n", "\n", "facets_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "rand_path", ",", "args", ".", "feats_file", ")", "\n", "facet_names", "=", "readFeats", "(", "facets_file", ")", "\n", "\n", "conditional_embeddings", "=", "get_conditional_embeddings", "(", "embeddings", ",", "w2i", ",", "i2w", ",", "facet_names", ")", "\n", "\n", "randomized_dict", "=", "dict", "(", ")", "\n", "for", "w", "in", "observed_dict", ":", "\n", "\t\t", "lead", "=", "get_lead_score", "(", "w", ",", "embeddings", ",", "conditional_embeddings", ",", "observed_dict", "[", "w", "]", ",", "w2i", ",", "\"l1\"", ")", "\n", "randomized_dict", "[", "w", "]", "=", "observed_dict", "[", "w", "]", "+", "[", "lead", "]", "\n", "\n", "# write to file", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "rand_path", ",", "args", ".", "output_file", ")", ",", "\"w\"", ")", "as", "fout", ":", "\n", "\t\t", "header", "=", "f\"word,rank,s1,s2,t,t+1,lead1,random_lead1\"", "\n", "fout", ".", "write", "(", "f\"{header}\\n\"", ")", "\n", "for", "key", ",", "value", "in", "sorted", "(", "randomized_dict", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", "[", "0", "]", ",", "reverse", "=", "False", ")", ":", "\n", "\t\t\t", "text", "=", "f\"{key},{value[0]},{value[1]},{value[2]},{value[3]},{value[4]},{value[5]:.4f},{value[6]:.4f}\"", "\n", "fout", ".", "write", "(", "f\"{text}\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.leadership_scores.readArgs": [[11, 22], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "readArgs", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"leadership score calculation\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--src-path\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"directory that contains the source embeddings\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--temp-path\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"directory that contains the temporal embeddings and other files\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--embeddings-file\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"embeddings file\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--feats-file\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"listing the features in a file\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--changes-file\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"file contains all the changes\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--leaders-file\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"file that contains the leadership scores\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lead-types\"", ",", "type", "=", "str", ",", "nargs", "=", "\"+\"", ",", "required", "=", "True", ",", "help", "=", "\"short codes for lead types\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.leadership_scores.readFeats": [[23, 32], ["open", "line.strip().split", "len", "facet_names.append", "line.strip", "line.strip"], "function", ["None"], ["", "def", "readFeats", "(", "filename", ")", ":", "\n", "\t", "facet_names", "=", "[", "(", "MAIN_FEAT", ",", ")", "]", "\n", "with", "open", "(", "filename", ")", "as", "fin", ":", "\n", "\t\t", "for", "line", "in", "fin", ":", "\n", "\t\t\t", "parts", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"_\"", ")", "\n", "if", "len", "(", "parts", ")", ">", "1", ":", "\n", "\t\t\t\t", "facet_names", ".", "append", "(", "(", "parts", "[", "0", "]", ",", "line", ".", "strip", "(", ")", ")", ")", "\n", "\n", "", "", "", "return", "facet_names", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.leadership_scores.transform_to_numpy": [[33, 44], ["numpy.array", "activated_facets.insert", "numpy.array", "helpful_functions.normalize", "len", "numpy.sum", "enumerate", "enumerate"], "function", ["home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.findNearest.normalize"], ["", "def", "transform_to_numpy", "(", "dict_embeddings", ",", "w2i", ",", "i2w", ",", "activated_facets", ",", "apply_normalization", "=", "False", ")", ":", "\n", "\t", "if", "len", "(", "activated_facets", ")", "==", "1", "and", "MAIN_FEAT", "in", "activated_facets", ":", "\n", "\t\t", "mat", "=", "np", ".", "array", "(", "[", "dict_embeddings", "[", "MAIN_FEAT", "]", "[", "w", "]", "for", "i", ",", "w", "in", "enumerate", "(", "w2i", ")", "]", ")", "\n", "", "else", ":", "\n", "\t\t", "activated_facets", ".", "insert", "(", "0", ",", "MAIN_FEAT", ")", "\n", "mat", "=", "np", ".", "array", "(", "[", "np", ".", "sum", "(", "[", "dict_embeddings", "[", "facet_name", "]", "[", "w", "]", "for", "facet_name", "in", "activated_facets", "]", ",", "axis", "=", "0", ")", "for", "i", ",", "w", "in", "enumerate", "(", "w2i", ")", "]", ")", "\n", "", "if", "apply_normalization", ":", "\n", "\t\t", "mat", "=", "normalize", "(", "mat", ")", "\n", "", "return", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.leadership_scores.get_conditional_embeddings": [[45, 55], ["dict", "leadership_scores.transform_to_numpy", "list", "len", "tuple", "facet[].split"], "function", ["home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.leadership_scores.transform_to_numpy"], ["", "def", "get_conditional_embeddings", "(", "deviations", ",", "w2i", ",", "i2w", ",", "facet_names", ",", "apply_normalization", "=", "False", ")", ":", "\n", "# Calculate the true embeddings based on the deviations.", "\n", "\t", "fully_conditional_embeddings", "=", "dict", "(", ")", "\n", "for", "facet", "in", "facet_names", ":", "\n", "\t\t", "mat", "=", "transform_to_numpy", "(", "deviations", ",", "w2i", ",", "i2w", ",", "list", "(", "facet", ")", ",", "apply_normalization", "=", "apply_normalization", ")", "\n", "if", "len", "(", "facet", ")", "==", "1", "and", "MAIN_FEAT", "in", "facet", ":", "\n", "\t\t\t", "fully_conditional_embeddings", "[", "MAIN_FEAT", "]", "=", "mat", "\n", "", "else", ":", "\n", "\t\t\t", "fully_conditional_embeddings", "[", "tuple", "(", "facet", "[", "1", "]", ".", "split", "(", "\"_\"", ")", ")", "]", "=", "mat", "\n", "", "", "return", "fully_conditional_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.leadership_scores.get_leader_dyads": [[56, 72], ["dict", "enumerate", "str", "int", "int", "leadership_scores.lead_measurement", "len", "max", "itertools.permutations", "zip", "leads.items", "range", "range"], "function", ["home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.leadership_scores.lead_measurement"], ["", "def", "get_leader_dyads", "(", "words", ",", "deviations", ",", "embeddings", ",", "sources", ",", "w2i", ",", "lead_type", ")", ":", "\n", "\t", "instance_specific_leads", "=", "dict", "(", ")", "\n", "for", "i", ",", "item", "in", "enumerate", "(", "words", ")", ":", "\n", "\t\t", "w", ",", "t1", ",", "t2", ",", "f1", ",", "f2", "=", "str", "(", "item", "[", "0", "]", ")", ",", "int", "(", "item", "[", "1", "]", "[", "1", ":", "]", ")", ",", "int", "(", "item", "[", "2", "]", "[", "1", ":", "]", ")", ",", "item", "[", "3", "]", ",", "item", "[", "4", "]", "\n", "if", "w", "in", "w2i", ":", "\n", "\t\t\t", "leads", "=", "{", "(", "s1", ",", "s2", ",", "x", ",", "y", ")", ":", "lead_measurement", "(", "deviations", ",", "embeddings", ",", "w", ",", "s1", ",", "s2", ",", "x", ",", "y", ",", "f1", ",", "f2", ",", "w2i", ",", "lead_type", ")", "for", "s1", ",", "s2", "in", "itertools", ".", "permutations", "(", "sources", ",", "2", ")", "for", "x", ",", "y", "in", "zip", "(", "range", "(", "t1", ",", "t2", ")", ",", "range", "(", "t1", "+", "1", ",", "t2", "+", "1", ")", ")", "}", "\n", "\n", "leads", "=", "{", "key", ":", "leads", "[", "key", "]", "for", "key", "in", "leads", "if", "leads", "[", "key", "]", "!=", "-", "np", ".", "inf", "}", "# keep only those pairs which have leads", "\n", "if", "len", "(", "leads", ")", ">", "0", ":", "\n", "\t\t\t\t", "key", ",", "value", "=", "max", "(", "leads", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "key", ",", "value", "=", "None", ",", "None", "\n", "", "instance_specific_leads", "[", "w", "]", "=", "(", "key", ",", "value", ")", "\n", "", "", "return", "instance_specific_leads", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.leadership_scores.lead_measurement": [[73, 107], ["len", "math.log", "numpy.dot", "numpy.dot", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "helpful_functions.logsigmoid", "helpful_functions.logsigmoid", "helpful_functions.logsigmoid", "helpful_functions.logsigmoid", "helpful_functions.logsigmoid", "helpful_functions.logsigmoid", "helpful_functions.logsigmoid", "helpful_functions.logsigmoid"], "function", ["home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.helpful_functions.logsigmoid", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.helpful_functions.logsigmoid", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.helpful_functions.logsigmoid", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.helpful_functions.logsigmoid", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.helpful_functions.logsigmoid", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.helpful_functions.logsigmoid", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.helpful_functions.logsigmoid", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.helpful_functions.logsigmoid"], ["", "def", "lead_measurement", "(", "deviations", ",", "embeddings", ",", "w", ",", "s1", ",", "s2", ",", "t1", ",", "t2", ",", "f1", ",", "f2", ",", "w2i", ",", "lead_type", ")", ":", "\n", "# No point in calculating the lead-lag between sources ", "\n", "# that were inactive at t1 and t2.", "\n", "# The following condition checks for that by measuring ", "\n", "# a source-specific deviation at the given times.", "\n", "#if w not in deviations:", "\n", "#\treturn 1 # This shouldn't really happen but I will debug this later.", "\n", "\n", "\t", "V", "=", "len", "(", "w2i", ")", "\n", "k", "=", "50", "# I would like to remove this hardcoded code", "\n", "const", "=", "math", ".", "log", "(", "V", "/", "k", ")", "\n", "\n", "if", "np", ".", "linalg", ".", "norm", "(", "deviations", "[", "f\"T{t1}_{s1}\"", "]", "[", "w", "]", ")", "==", "0", "or", "np", ".", "linalg", ".", "norm", "(", "deviations", "[", "f\"T{t2}_{s2}\"", "]", "[", "w", "]", ")", "==", "0", "or", "np", ".", "linalg", ".", "norm", "(", "deviations", "[", "f\"T{t1}_{s2}\"", "]", "[", "w", "]", ")", "==", "0", ":", "\n", "\t\t", "return", "-", "np", ".", "inf", "\n", "\n", "", "e1", "=", "embeddings", "[", "(", "f\"T{t1}\"", ",", "s1", ")", "]", "[", "w2i", "[", "w", "]", "]", "\n", "e2", "=", "embeddings", "[", "(", "f\"T{t2}\"", ",", "s2", ")", "]", "[", "w2i", "[", "w", "]", "]", "\n", "e3", "=", "embeddings", "[", "(", "f\"T{t1}\"", ",", "s2", ")", "]", "[", "w2i", "[", "w", "]", "]", "\n", "\n", "num", "=", "np", ".", "dot", "(", "e1", ",", "e2", ")", "\n", "den", "=", "np", ".", "dot", "(", "e3", ",", "e2", ")", "\n", "\n", "if", "lead_type", "==", "\"l1\"", ":", "\n", "\t\t", "return", "num", "/", "den", "\n", "", "elif", "lead_type", "==", "\"l2\"", ":", "\n", "\t\t", "return", "(", "f2", "*", "(", "logsigmoid", "(", "num", ")", "-", "logsigmoid", "(", "den", ")", ")", ")", "\n", "", "elif", "lead_type", "==", "\"l3\"", ":", "\n", "\t\t", "return", "(", "f2", "*", "(", "logsigmoid", "(", "num", "+", "const", ")", "-", "logsigmoid", "(", "den", "+", "const", ")", ")", ")", "\n", "", "elif", "lead_type", "==", "\"l4\"", ":", "\n", "\t\t", "return", "logsigmoid", "(", "num", ")", "-", "logsigmoid", "(", "den", ")", "\n", "", "elif", "lead_type", "==", "\"l5\"", ":", "\n", "\t\t", "return", "logsigmoid", "(", "num", "+", "const", ")", "-", "logsigmoid", "(", "den", "+", "const", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.leadership_scores.get_leader_words": [[108, 110], ["None"], "function", ["None"], ["", "", "def", "get_leader_words", "(", "dictionary", ")", ":", "\n", "\t", "return", "[", "key", "for", "key", "in", "dictionary", "if", "not", "dictionary", "[", "key", "]", "==", "(", "None", ",", "None", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.leadership_scores.writeToFile": [[111, 113], ["changes.to_csv"], "function", ["None"], ["", "def", "writeToFile", "(", "filename", ",", "changes", ",", "sep", "=", "\";\"", ")", ":", "\n", "\t", "changes", ".", "to_csv", "(", "filename", ",", "sep", "=", "sep", ",", "header", "=", "True", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.leadership_scores.add2df": [[114, 135], ["list", "changes.columns.values.tolist", "changes.iterrows", "pandas.DataFrame", "str", "new_row.extend", "list.append"], "function", ["None"], ["", "def", "add2df", "(", "changes", ",", "dyads", ",", "lead_type", ")", ":", "\n", "\t", "\"\"\"\n\tdyads is a dictionary with word as the key.\n\t\"\"\"", "\n", "lead_types", "=", "{", "\"l1\"", ":", "\"Lead1\"", ",", "\"l2\"", ":", "\"Lead2\"", ",", "\"l3\"", ":", "\"Lead3\"", ",", "\"l4\"", ":", "\"Lead4\"", ",", "\"l5\"", ":", "\"Lead5\"", "}", "\n", "\n", "rows", "=", "list", "(", ")", "\n", "header", "=", "changes", ".", "columns", ".", "values", ".", "tolist", "(", ")", "\n", "for", "index", ",", "row", "in", "changes", ".", "iterrows", "(", ")", ":", "\n", "\t\t", "w", "=", "str", "(", "row", "[", "\"word\"", "]", ")", "\n", "if", "w", "in", "dyads", ":", "\n", "\t\t\t", "new_row", "=", "[", "row", "[", "name", "]", "for", "name", "in", "header", "]", "\n", "key", ",", "value", "=", "dyads", "[", "w", "]", "\n", "if", "key", "is", "not", "None", "and", "value", "is", "not", "None", ":", "\n", "\t\t\t\t", "s1", ",", "s2", ",", "x", ",", "y", "=", "key", "\n", "lead", "=", "value", "\n", "new_row", ".", "extend", "(", "[", "s1", ",", "s2", ",", "f\"T{x}\"", ",", "f\"T{y}\"", ",", "lead", "]", ")", "\n", "rows", ".", "append", "(", "new_row", ")", "\n", "\n", "", "", "", "new_df", "=", "pd", ".", "DataFrame", "(", "rows", ",", "columns", "=", "header", "+", "[", "f\"{lead_types[lead_type]}_s1\"", ",", "f\"{lead_types[lead_type]}_s2\"", ",", "f\"{lead_types[lead_type]}_t\"", ",", "f\"{lead_types[lead_type]}_t+1\"", ",", "lead_types", "[", "lead_type", "]", "]", ")", "\n", "return", "new_df", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.leadership_scores.main": [[136, 171], ["os.path.join", "helpful_functions.readEmbeddings", "logging.info", "len", "logging.info", "os.path.join", "leadership_scores.readFeats", "logging.info", "os.path.join", "pandas.read_csv", "candidates[].values.tolist", "set", "os.path.join", "leadership_scores.writeToFile", "logging.info", "leadership_scores.get_leader_dyads", "leadership_scores.add2df", "logging.info", "enumerate", "enumerate", "leadership_scores.get_conditional_embeddings", "leadership_scores.get_conditional_embeddings", "len", "len", "facet[].split", "len", "len"], "function", ["home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.helpful_functions.readEmbeddings", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.leadership_scores.readFeats", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.leadership_scores.writeToFile", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.leadership_scores.get_leader_dyads", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.leadership_scores.add2df", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.leadership_scores.get_conditional_embeddings", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.leadership_scores.get_conditional_embeddings"], ["", "def", "main", "(", "args", ")", ":", "\n", "\t", "embeddings_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "src_path", ",", "args", ".", "embeddings_file", ")", "\n", "embeddings", "=", "readEmbeddings", "(", "embeddings_file", ")", "\n", "static_embeddings", "=", "embeddings", "[", "MAIN_FEAT", "]", "\n", "logging", ".", "info", "(", "f\"Embeddings read from {embeddings_file}\"", ")", "\n", "\n", "# vocabulary", "\n", "w2i", "=", "{", "w", ":", "i", "for", "i", ",", "w", "in", "enumerate", "(", "static_embeddings", ")", "}", "\n", "i2w", "=", "{", "i", ":", "w", "for", "i", ",", "w", "in", "enumerate", "(", "static_embeddings", ")", "}", "\n", "vocab_size", "=", "len", "(", "w2i", ")", "\n", "logging", ".", "info", "(", "f\"Vocabulary mapping done, total words {len(w2i)}\"", ")", "\n", "\n", "facets_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "src_path", ",", "args", ".", "feats_file", ")", "\n", "facet_names", "=", "readFeats", "(", "facets_file", ")", "\n", "logging", ".", "info", "(", "f\"Read {len(facet_names)} facets from {facets_file}\"", ")", "\n", "\n", "changes_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "temp_path", ",", "args", ".", "changes_file", ")", "\n", "candidates", "=", "pd", ".", "read_csv", "(", "changes_file", ",", "sep", "=", "\";\"", ")", "\n", "all_words", "=", "candidates", "[", "[", "\"word\"", ",", "\"Period1\"", ",", "\"Period2\"", ",", "\"Freq1\"", ",", "\"Freq2\"", "]", "]", ".", "values", ".", "tolist", "(", ")", "\n", "sources", "=", "set", "(", "[", "facet", "[", "1", "]", ".", "split", "(", "\"_\"", ")", "[", "1", "]", "for", "facet", "in", "facet_names", "if", "len", "(", "facet", ")", ">", "1", "]", ")", "\n", "\n", "for", "lead_type", "in", "args", ".", "lead_types", ":", "\n", "\t\t", "if", "lead_type", "!=", "\"l1\"", ":", "\n", "\t\t\t", "conditional_embeddings", "=", "get_conditional_embeddings", "(", "embeddings", ",", "w2i", ",", "i2w", ",", "facet_names", ",", "apply_normalization", "=", "True", ")", "\n", "", "else", ":", "\n", "\t\t\t", "conditional_embeddings", "=", "get_conditional_embeddings", "(", "embeddings", ",", "w2i", ",", "i2w", ",", "facet_names", ")", "\n", "\n", "", "leader_dyads", "=", "get_leader_dyads", "(", "all_words", ",", "embeddings", ",", "conditional_embeddings", ",", "sources", ",", "w2i", ",", "lead_type", ")", "\n", "candidates", "=", "add2df", "(", "candidates", ",", "leader_dyads", ",", "lead_type", ")", "\n", "logging", ".", "info", "(", "f\"Leadership scores calculated for {len(leader_dyads)} for lead type {lead_type}\"", ")", "\n", "\n", "# write to file", "\n", "", "leaders_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "src_path", ",", "args", ".", "leaders_file", ")", "\n", "writeToFile", "(", "leaders_file", ",", "candidates", ")", "\n", "logging", ".", "info", "(", "f\"All leader values written to {leaders_file}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.mylib.semantic_neighbors": [[3, 19], ["numpy.dot", "np.dot.argsort", "output.append"], "function", ["None"], ["def", "semantic_neighbors", "(", "word", ":", "str", ",", "embs", ":", "np", ".", "array", ",", "voc", ":", "tuple", ",", "k", "=", "3", ")", "->", "list", ":", "\n", "\t", "\"\"\" Get the list of near neighbors for a given word from the embeddings.\n\n\t\tEach row of the matrix `embs` is a vector for a word.\n\t\tThe mapping of words and row numbers is in `voc`.\n\n\t\tNOTE: Assumes that the embeddings are unit vectors.\n\t\"\"\"", "\n", "w2i", ",", "i2w", "=", "voc", "\n", "sims", "=", "np", ".", "dot", "(", "embs", "[", "w2i", "[", "word", "]", ",", "]", ",", "embs", ".", "T", ")", "\n", "\n", "output", "=", "[", "]", "\n", "for", "sim_idx", "in", "sims", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "[", "1", ":", "(", "1", "+", "k", ")", "]", ":", "\n", "\t\t", "if", "sims", "[", "sim_idx", "]", ">", "0", ":", "\n", "\t\t\t", "output", ".", "append", "(", "(", "sims", "[", "sim_idx", "]", ",", "i2w", "[", "sim_idx", "]", ")", ")", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.leadership_thresholds.readArgs": [[8, 17], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "readArgs", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"leadership score calculation\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--src-path\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"directory that contains the source embeddings\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--leaders-file\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"file that contains the leadership scores\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--thresh\"", ",", "type", "=", "int", ",", "required", "=", "False", ",", "default", "=", "50", ",", "help", "=", "\"threshold in terms of percentile (default: 50)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--thresholds-file\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"file that contains the leadership scores but filtered to satisfy threshold\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lead-type\"", ",", "type", "=", "str", ",", "required", "=", "False", ",", "default", "=", "\"l1\"", ",", "choices", "=", "{", "\"l1\"", ",", "\"l2\"", ",", "\"l3\"", ",", "\"l4\"", ",", "\"l5\"", "}", ",", "help", "=", "\"file that contains the leadership scores but filtered to satisfy threshold\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.leadership_thresholds.main": [[18, 41], ["os.path.join", "pandas.read_csv", "df.rename.columns.values.tolist", "df.rename.columns.values.tolist", "df.rename.rename", "logging.info", "numpy.percentile", "logging.info", "logging.info", "os.path.join", "df.rename.to_csv", "logging.info", "col.startswith", "col.split", "len", "len", "col.startswith"], "function", ["None"], ["", "def", "main", "(", "args", ")", ":", "\n", "# read the leadership scores file", "\n", "\t", "lead_short_codes", "=", "{", "\"l1\"", ":", "\"Lead1\"", ",", "\"l2\"", ":", "\"Lead2\"", ",", "\"l3\"", ":", "\"Lead3\"", ",", "\"l4\"", ":", "\"Lead4\"", ",", "\"l5\"", ":", "\"Lead5\"", "}", "\n", "lead_key", "=", "lead_short_codes", "[", "args", ".", "lead_type", "]", "\n", "\n", "src_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "src_path", ",", "args", ".", "leaders_file", ")", "\n", "df", "=", "pd", ".", "read_csv", "(", "src_file", ",", "sep", "=", "\";\"", ")", "\n", "header", "=", "df", ".", "columns", ".", "values", ".", "tolist", "(", ")", "\n", "keep_cols", "=", "[", "\"word\"", ",", "\"rank\"", ",", "\"Period1\"", ",", "\"Period2\"", ",", "\"Neighbors1\"", ",", "\"Neighbors2\"", ",", "\"Freq1\"", ",", "\"Freq2\"", ",", "\"NeighborsFreq1\"", ",", "\"NeighborsFreq2\"", "]", "\n", "cols", "=", "[", "col", "for", "col", "in", "header", "if", "col", "in", "keep_cols", "or", "col", ".", "startswith", "(", "lead_key", ")", "]", "\n", "df", "=", "df", "[", "cols", "]", "\n", "header", "=", "df", ".", "columns", ".", "values", ".", "tolist", "(", ")", "\n", "remapped", "=", "{", "col", ":", "col", "if", "not", "col", ".", "startswith", "(", "lead_key", ")", "or", "not", "\"_\"", "in", "col", "else", "col", ".", "split", "(", "\"_\"", ")", "[", "1", "]", "for", "col", "in", "header", "}", "\n", "df", "=", "df", ".", "rename", "(", "columns", "=", "remapped", ")", "\n", "logging", ".", "info", "(", "f\"Read leadership values from {src_file}: {len(df)} rows\"", ")", "\n", "lead", "=", "df", "[", "lead_key", "]", ".", "values", "\n", "val", "=", "np", ".", "percentile", "(", "lead", ",", "args", ".", "thresh", ")", "\n", "logging", ".", "info", "(", "f\"Calculated {args.thresh} percentile as {val:.6f}\"", ")", "\n", "df", "=", "df", "[", "df", "[", "lead_key", "]", ">=", "val", "]", "\n", "logging", ".", "info", "(", "f\"Retained rows after threshold filter {len(df)}\"", ")", "\n", "tgt_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "src_path", ",", "args", ".", "thresholds_file", ")", "\n", "df", ".", "to_csv", "(", "tgt_file", ",", "sep", "=", "\";\"", ",", "header", "=", "True", ",", "index", "=", "False", ")", "\n", "logging", ".", "info", "(", "f\"Filtered dyads written to {tgt_file}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.leadership_stats.readArgs": [[9, 17], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "readArgs", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"statistics about semantic leaders\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--src-path\"", ",", "required", "=", "True", ",", "type", "=", "str", ",", "help", "=", "\"directory contains the leadership scores\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--leaders-file\"", ",", "required", "=", "True", ",", "type", "=", "str", ",", "help", "=", "\"file contains the leaders and their scores\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--leader-stats-file\"", ",", "required", "=", "True", ",", "type", "=", "str", ",", "help", "=", "\"output file should contain aggregated leadership stats\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--leader-follower-stats-file\"", ",", "required", "=", "True", ",", "type", "=", "str", ",", "help", "=", "\"output file should contain aggregated leadership/followee stats\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.leadership_stats.create_net": [[18, 27], ["networkx.DiGraph", "nx.DiGraph.add_nodes_from", "sum", "nx.DiGraph.add_edge", "helpful_functions.source_names"], "function", ["None"], ["", "def", "create_net", "(", "source_names", ",", "dyads_counter", ")", ":", "\n", "\t", "G", "=", "nx", ".", "DiGraph", "(", ")", "\n", "\n", "G", ".", "add_nodes_from", "(", "source_names", ")", "\n", "n_edges", "=", "sum", "(", "[", "dyads_counter", "[", "item", "]", "for", "item", "in", "dyads_counter", "]", ")", "\n", "for", "item", "in", "dyads_counter", ":", "\n", "# edge should point from follower to leader", "\n", "\t\t", "G", ".", "add_edge", "(", "item", "[", "1", "]", ",", "item", "[", "0", "]", ",", "weight", "=", "dyads_counter", "[", "item", "]", "/", "n_edges", ")", "\n", "", "return", "G", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.leadership_stats.main": [[28, 68], ["pandas.read_csv", "df[].values.tolist", "list", "collections.Counter", "leadership_stats.create_net", "networkx.pagerank_numpy", "collections.Counter", "collections.Counter", "list", "sum", "collections.Counter.most_common", "pandas.DataFrame", "list", "sorted", "pandas.DataFrame", "pd.DataFrame.to_csv", "pd.DataFrame.to_csv", "os.path.join", "list.append", "list.append", "scipy.stats.binom_test", "list.append", "os.path.join", "os.path.join", "collections.Counter.most_common"], "function", ["home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.leadership_stats.create_net"], ["", "def", "main", "(", "args", ")", ":", "\n", "\t", "df", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "args", ".", "src_path", ",", "args", ".", "leaders_file", ")", ",", "sep", "=", "\";\"", ")", "\n", "rows", "=", "df", "[", "[", "\"s1\"", ",", "\"s2\"", "]", "]", ".", "values", ".", "tolist", "(", ")", "\n", "pairs", "=", "list", "(", ")", "\n", "for", "row", "in", "rows", ":", "\n", "\t\t", "s1", ",", "s2", "=", "row", "[", "0", "]", ",", "row", "[", "1", "]", "\n", "pairs", ".", "append", "(", "(", "s1", ",", "s2", ")", ")", "\n", "\n", "", "leaders_followers", "=", "Counter", "(", "pairs", ")", "\n", "\n", "G", "=", "create_net", "(", "source_names", ",", "leaders_followers", ")", "\n", "pagerank", "=", "nx", ".", "pagerank_numpy", "(", "G", ",", "alpha", "=", "0.85", ")", "\n", "# include also a personalization factor", "\n", "\n", "leaders", "=", "Counter", "(", "[", "x1", "for", "x1", ",", "x2", "in", "pairs", "]", ")", "\n", "followers", "=", "Counter", "(", "[", "x2", "for", "x1", ",", "x2", "in", "pairs", "]", ")", "\n", "\n", "# calculate the leader follower stats", "\n", "items", "=", "list", "(", ")", "\n", "total_dyads", "=", "sum", "(", "[", "item", "[", "1", "]", "for", "item", "in", "leaders_followers", ".", "most_common", "(", "None", ")", "]", ")", "\n", "for", "item", "in", "leaders_followers", ".", "most_common", "(", "None", ")", ":", "\n", "\t\t", "items", ".", "append", "(", "[", "item", "[", "0", "]", "[", "0", "]", ",", "item", "[", "0", "]", "[", "1", "]", ",", "item", "[", "1", "]", ",", "item", "[", "1", "]", "/", "total_dyads", "]", ")", "\n", "\n", "", "leaders_followers_df", "=", "pd", ".", "DataFrame", "(", "items", ",", "columns", "=", "[", "\"Leader\"", ",", "\"Follower\"", ",", "\"Count\"", ",", "\"Probability\"", "]", ")", "\n", "\n", "# calculate the leader stats", "\n", "items", "=", "list", "(", ")", "\n", "epsilon", "=", "1e-10", "\n", "for", "name", "in", "sorted", "(", "source_names", ")", ":", "\n", "\t\t", "leader_prob", "=", "leaders", "[", "name", "]", "/", "(", "leaders", "[", "name", "]", "+", "followers", "[", "name", "]", "+", "epsilon", ")", "\n", "follower_prob", "=", "followers", "[", "name", "]", "/", "(", "leaders", "[", "name", "]", "+", "followers", "[", "name", "]", "+", "epsilon", ")", "\n", "pval", "=", "binom_test", "(", "[", "leaders", "[", "name", "]", ",", "followers", "[", "name", "]", "]", ",", "alternative", "=", "\"greater\"", ")", "\n", "pr", "=", "pagerank", "[", "name", "]", "\n", "items", ".", "append", "(", "[", "name", ",", "leaders", "[", "name", "]", ",", "f\"{leader_prob:.4f}\"", ",", "f\"{pval:.4f}\"", ",", "followers", "[", "name", "]", ",", "f\"{follower_prob:.4f}\"", ",", "f\"{pr:.4f}\"", "]", ")", "\n", "\n", "", "leaders_df", "=", "pd", ".", "DataFrame", "(", "items", ",", "columns", "=", "[", "\"Name\"", ",", "\"Count(role as leader)\"", ",", "\"P(Name=leader)\"", ",", "\"Pval\"", ",", "\"Count(role as follower)\"", ",", "\"P(Name=follower)\"", ",", "\"PageRank\"", "]", ")", "\n", "\n", "## Write to files", "\n", "leaders_followers_df", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "args", ".", "src_path", ",", "args", ".", "leader_follower_stats_file", ")", ",", "sep", "=", "\",\"", ",", "index", "=", "False", ",", "header", "=", "True", ")", "\n", "leaders_df", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "args", ".", "src_path", ",", "args", ".", "leader_stats_file", ")", ",", "sep", "=", "\",\"", ",", "index", "=", "False", ",", "header", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.random_swaps.readArgs": [[11, 32], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.parse_args", "argparse.ArgumentParser.error", "len"], "function", ["None"], ["def", "readArgs", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"swapping code \"", ")", "\n", "parser", ".", "add_argument", "(", "\"--src-file\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"file contains all the observed data\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--tgt-file\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"file contains all the randomly permuted data\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--chunk-size\"", ",", "type", "=", "int", ",", "required", "=", "False", ",", "default", "=", "1000", ",", "help", "=", "\"size of each document\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--max-source-size\"", ",", "type", "=", "int", ",", "required", "=", "False", ",", "default", "=", "None", ",", "help", "=", "\"total overall tokens for a source-time combination\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--keep-all\"", ",", "dest", "=", "\"keep_all\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--no-keep-all\"", ",", "dest", "=", "\"keep_all\"", ",", "action", "=", "\"store_false\"", ")", "\n", "parser", ".", "set_defaults", "(", "keep_all", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--epochs\"", ",", "type", "=", "str", ",", "nargs", "=", "\"+\"", ",", "required", "=", "False", ",", "default", "=", "[", "]", ",", "help", "=", "\"the epochs that need to be kept\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--always-activated\"", ",", "dest", "=", "\"always_activated\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--not-always-activated\"", ",", "dest", "=", "\"always_activated\"", ",", "action", "=", "\"store_false\"", ")", "\n", "parser", ".", "set_defaults", "(", "always_activated", "=", "False", ")", "\n", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "not", "args", ".", "keep_all", "and", "len", "(", "args", ".", "epochs", ")", "==", "0", ":", "\n", "\t\t", "parser", ".", "error", "(", "'must have non-zero number --epochs when --no-keep-all'", ")", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.random_swaps.chunks": [[33, 37], ["range", "len"], "function", ["None"], ["", "def", "chunks", "(", "lst", ",", "n", ")", ":", "\n", "\t", "\"\"\"Yield successive n-sized chunks from lst.\"\"\"", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "lst", ")", ",", "n", ")", ":", "\n", "\t\t", "yield", "lst", "[", "i", ":", "i", "+", "n", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.random_swaps.make_chunks": [[38, 40], ["random_swaps.chunks"], "function", ["home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.random_swaps.chunks"], ["", "", "def", "make_chunks", "(", "text", ",", "chunk_size", ")", ":", "\n", "\t", "return", "[", "chunk", "for", "chunk", "in", "chunks", "(", "text", ",", "chunk_size", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.random_swaps.read_data": [[41, 73], ["list", "collections.defaultdict", "list", "pandas.DataFrame", "open", "grouped[].append", "random_swaps.make_chunks", "line.strip().split", "list.append", "list.append", "parts[].split", "text.split", "line.strip"], "function", ["home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.random_swaps.make_chunks"], ["", "def", "read_data", "(", "filename", ",", "chunk_size", "=", "1000", ")", ":", "\n", "# read the data as it is", "\n", "\t", "docs", "=", "list", "(", ")", "\n", "with", "open", "(", "filename", ")", "as", "fin", ":", "\n", "\t\t", "for", "line", "in", "fin", ":", "\n", "\t\t\t", "parts", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "epoch", "=", "parts", "[", "1", "]", "\n", "source", "=", "parts", "[", "2", "]", ".", "split", "(", "\"_\"", ")", "[", "1", "]", "\n", "text", "=", "parts", "[", "3", "]", "\n", "docs", ".", "append", "(", "[", "epoch", ",", "source", ",", "text", "]", ")", "\n", "\n", "# group all documents from one epoch and ", "\n", "# one source", "\n", "", "", "grouped", "=", "defaultdict", "(", "list", ")", "\n", "for", "doc", "in", "docs", ":", "\n", "\t\t", "epoch", ",", "src", ",", "text", "=", "doc", "[", "0", "]", ",", "doc", "[", "1", "]", ",", "doc", "[", "2", "]", "\n", "grouped", "[", "(", "epoch", ",", "src", ")", "]", ".", "append", "(", "doc", "[", "2", "]", ")", "\n", "\n", "# coalesce all documents into one", "\n", "", "grouped", "=", "{", "key", ":", "[", "token", "for", "text", "in", "grouped", "[", "key", "]", "for", "token", "in", "text", ".", "split", "(", ")", "]", "for", "key", "in", "grouped", "}", "\n", "\n", "# and then make document chunks", "\n", "grouped", "=", "{", "key", ":", "make_chunks", "(", "grouped", "[", "key", "]", ",", "chunk_size", ")", "for", "key", "in", "grouped", "}", "\n", "\n", "rows", "=", "list", "(", ")", "\n", "for", "key", "in", "grouped", ":", "\n", "\t\t", "epoch", ",", "src", "=", "key", "\n", "for", "chunk", "in", "grouped", "[", "key", "]", ":", "\n", "\t\t\t", "rows", ".", "append", "(", "[", "epoch", ",", "src", ",", "chunk", "]", ")", "\n", "\n", "", "", "df", "=", "pd", ".", "DataFrame", "(", "rows", ",", "columns", "=", "[", "\"epoch\"", ",", "\"orig_source\"", ",", "\"text\"", "]", ")", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.random_swaps.transform_by_permuting": [[74, 90], ["df[].unique", "dict", "list", "pandas.Series", "numpy.random.permutation", "list.append", "numpy.concatenate"], "function", ["None"], ["", "def", "transform_by_permuting", "(", "df", ")", ":", "\n", "# add modified_src column", "\n", "\t", "df", "[", "\"mod_source\"", "]", "=", "df", "[", "\"orig_source\"", "]", "\n", "\n", "# Per epoch, print the initial source distribution", "\n", "epochs", "=", "df", "[", "\"epoch\"", "]", ".", "unique", "(", ")", "\n", "src_dist", "=", "dict", "(", ")", "\n", "sources", "=", "list", "(", ")", "\n", "for", "epoch", "in", "epochs", ":", "\n", "\t\t", "epoch_sources", "=", "df", "[", "df", "[", "\"epoch\"", "]", "==", "epoch", "]", "[", "\"mod_source\"", "]", ".", "values", "\n", "new_sources", "=", "np", ".", "random", ".", "permutation", "(", "epoch_sources", ")", "\n", "sources", ".", "append", "(", "new_sources", ")", "\n", "\n", "# assign the new sources", "\n", "", "df", "[", "\"mod_source\"", "]", "=", "pd", ".", "Series", "(", "np", ".", "concatenate", "(", "sources", ",", "axis", "=", "0", ")", ")", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.random_swaps.select_docs": [[92, 125], ["dict", "df.iterrows", "list", "pandas.DataFrame", "[].append", "dict", "list", "len", "random.sample", "list.append", "list.append"], "function", ["None"], ["", "def", "select_docs", "(", "df", ",", "max_docs", "=", "None", ")", ":", "\n", "\t", "if", "max_docs", "is", "None", ":", "\n", "\t\t", "return", "df", "\n", "\n", "# reorient into a epoch-source dictionary", "\n", "", "data", "=", "dict", "(", ")", "\n", "for", "index", ",", "row", "in", "df", ".", "iterrows", "(", ")", ":", "\n", "\t\t", "epoch", ",", "mod_source", "=", "row", "[", "\"epoch\"", "]", ",", "row", "[", "\"mod_source\"", "]", "\n", "if", "epoch", "not", "in", "data", ":", "\n", "\t\t\t", "data", "[", "epoch", "]", "=", "dict", "(", ")", "\n", "", "if", "mod_source", "not", "in", "data", "[", "epoch", "]", ":", "\n", "\t\t\t", "data", "[", "epoch", "]", "[", "mod_source", "]", "=", "list", "(", ")", "\n", "\n", "", "data", "[", "epoch", "]", "[", "mod_source", "]", ".", "append", "(", "(", "row", "[", "\"orig_source\"", "]", ",", "row", "[", "\"text\"", "]", ")", ")", "\n", "\n", "\n", "# now sweep over every epoch one at a time; then every source one at a time;", "\n", "# and then select a sample for each combination ", "\n", "", "modified_rows", "=", "list", "(", ")", "\n", "for", "epoch", "in", "data", ":", "\n", "\t\t", "for", "source", "in", "data", "[", "epoch", "]", ":", "\n", "\t\t\t", "if", "len", "(", "data", "[", "epoch", "]", "[", "source", "]", ")", "<=", "max_docs", ":", "\n", "# just copy everything", "\n", "\t\t\t\t", "for", "item", "in", "data", "[", "epoch", "]", "[", "source", "]", ":", "\n", "\t\t\t\t\t", "modified_rows", ".", "append", "(", "[", "epoch", ",", "source", ",", "item", "[", "0", "]", ",", "item", "[", "1", "]", "]", ")", "\n", "", "", "else", ":", "\n", "\t\t\t\t", "items", "=", "sample", "(", "data", "[", "epoch", "]", "[", "source", "]", ",", "max_docs", ")", "\n", "for", "item", "in", "items", ":", "\n", "\t\t\t\t\t", "modified_rows", ".", "append", "(", "[", "epoch", ",", "source", ",", "item", "[", "0", "]", ",", "item", "[", "1", "]", "]", ")", "\n", "\n", "\n", "", "", "", "", "mod_df", "=", "pd", ".", "DataFrame", "(", "modified_rows", ",", "columns", "=", "[", "\"epoch\"", ",", "\"mod_source\"", ",", "\"orig_source\"", ",", "\"text\"", "]", ")", "\n", "return", "mod_df", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.random_swaps.select_based_on_time": [[126, 189], ["dict", "df.iterrows", "list", "pandas.DataFrame", "[].append", "dict", "dict", "list", "len", "len", "set", "dict", "set", "source_map[].append", "len", "len", "epochs.append", "epochs.append", "list.append", "list", "set.add", "source_map[].append", "set.add", "list", "len", "len"], "function", ["None"], ["", "def", "select_based_on_time", "(", "df", ",", "epochs", ",", "activated_throughout", "=", "False", ")", ":", "\n", "# reorient into an epoch-source dictionary", "\n", "\t", "data", "=", "dict", "(", ")", "\n", "for", "index", ",", "row", "in", "df", ".", "iterrows", "(", ")", ":", "\n", "\t\t", "epoch", ",", "mod_source", "=", "row", "[", "\"epoch\"", "]", ",", "row", "[", "\"mod_source\"", "]", "\n", "if", "epoch", "not", "in", "data", ":", "\n", "\t\t\t", "data", "[", "epoch", "]", "=", "dict", "(", ")", "\n", "", "if", "mod_source", "not", "in", "data", "[", "epoch", "]", ":", "\n", "\t\t\t", "data", "[", "epoch", "]", "[", "mod_source", "]", "=", "list", "(", ")", "\n", "\n", "", "data", "[", "epoch", "]", "[", "mod_source", "]", ".", "append", "(", "(", "row", "[", "\"orig_source\"", "]", ",", "row", "[", "\"text\"", "]", ")", ")", "\n", "\n", "# now select only the relevant source-epoch pairs", "\n", "", "if", "len", "(", "epochs", ")", ">", "0", "and", "activated_throughout", ":", "\n", "# there are a few selected epochs and we want all sources ", "\n", "# that are activated throughout them", "\n", "\t\t", "source_map", "=", "dict", "(", ")", "\n", "for", "epoch", "in", "data", ":", "\n", "\t\t\t", "if", "epoch", "in", "epochs", ":", "\n", "\t\t\t\t", "for", "source", "in", "data", "[", "epoch", "]", ":", "\n", "\t\t\t\t\t", "if", "source", "not", "in", "source_map", ":", "\n", "\t\t\t\t\t\t", "source_map", "[", "source", "]", "=", "list", "(", ")", "\n", "", "source_map", "[", "source", "]", ".", "append", "(", "epoch", ")", "\n", "\n", "", "", "", "relevant_sources", "=", "{", "key", "for", "key", "in", "source_map", "if", "len", "(", "source_map", "[", "key", "]", ")", "==", "len", "(", "epochs", ")", "}", "\n", "\n", "", "elif", "len", "(", "epochs", ")", ">", "0", ":", "\n", "# there are few selected epochs and we select all sources within those epochs", "\n", "\t\t", "relevant_sources", "=", "set", "(", ")", "\n", "for", "epoch", "in", "data", ":", "\n", "\t\t\t", "if", "epoch", "in", "epochs", ":", "\n", "\t\t\t\t", "for", "source", "in", "data", "[", "epoch", "]", ":", "\n", "\t\t\t\t\t", "relevant_sources", ".", "add", "(", "source", ")", "\n", "\n", "", "", "", "", "elif", "activated_throughout", ":", "\n", "# there are not selected epochs but we only want those sources that are activated throughout", "\n", "\t\t", "source_map", "=", "dict", "(", ")", "\n", "for", "epoch", "in", "data", ":", "\n", "\t\t\t", "epochs", ".", "append", "(", "epoch", ")", "\n", "for", "source", "in", "data", "[", "epoch", "]", ":", "\n", "\t\t\t\t", "if", "source", "not", "in", "source_map", ":", "\n", "\t\t\t\t\t", "source_map", "[", "source", "]", "=", "list", "(", ")", "\n", "", "source_map", "[", "source", "]", ".", "append", "(", "epoch", ")", "\n", "\n", "", "", "relevant_sources", "=", "{", "key", "for", "key", "in", "source_map", "if", "len", "(", "source_map", "[", "key", "]", ")", "==", "len", "(", "epochs", ")", "}", "\n", "", "else", ":", "\n", "# select everything", "\n", "\t\t", "relevant_sources", "=", "set", "(", ")", "\n", "for", "epoch", "in", "data", ":", "\n", "\t\t\t", "epochs", ".", "append", "(", "epoch", ")", "\n", "for", "source", "in", "data", "[", "epoch", "]", ":", "\n", "\t\t\t\t", "relevant_sources", ".", "add", "(", "source", ")", "\n", "\n", "# now create a dataframe out of it", "\n", "", "", "", "modified_rows", "=", "list", "(", ")", "\n", "for", "epoch", "in", "data", ":", "\n", "\t\t", "for", "source", "in", "data", "[", "epoch", "]", ":", "\n", "\t\t\t", "if", "epoch", "in", "epochs", "and", "source", "in", "relevant_sources", ":", "\n", "\t\t\t\t", "for", "item", "in", "data", "[", "epoch", "]", "[", "source", "]", ":", "\n", "\t\t\t\t\t", "modified_rows", ".", "append", "(", "[", "epoch", ",", "source", ",", "item", "[", "0", "]", ",", "item", "[", "1", "]", "]", ")", "\n", "\n", "", "", "", "", "mod_df", "=", "pd", ".", "DataFrame", "(", "modified_rows", ",", "columns", "=", "[", "\"epoch\"", ",", "\"mod_source\"", ",", "\"orig_source\"", ",", "\"text\"", "]", ")", "\n", "return", "mod_df", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.random_swaps.write_data": [[190, 199], ["helpful_functions.safe_open_w", "df.iterrows", "fout.write"], "function", ["home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.helpful_functions.safe_open_w"], ["", "def", "write_data", "(", "df", ",", "filename", ")", ":", "\n", "\t", "with", "safe_open_w", "(", "filename", ")", "as", "fout", ":", "\n", "\t\t", "for", "index", ",", "row", "in", "df", ".", "iterrows", "(", ")", ":", "\n", "\t\t\t", "tokens", "=", "\" \"", ".", "join", "(", "row", "[", "\"text\"", "]", ")", "\n", "epoch", "=", "row", "[", "\"epoch\"", "]", "\n", "src", "=", "row", "[", "\"mod_source\"", "]", "\n", "orig", "=", "row", "[", "\"orig_source\"", "]", "\n", "intersection", "=", "f\"{epoch}_{src}\"", "\n", "fout", ".", "write", "(", "f\"{orig}\\t{epoch}\\t{intersection}\\t{tokens}\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.random_swaps.main": [[200, 213], ["random_swaps.read_data", "random_swaps.transform_by_permuting", "random_swaps.select_docs", "random_swaps.write_data", "random_swaps.select_based_on_time", "int"], "function", ["home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.random_swaps.read_data", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.random_swaps.transform_by_permuting", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.random_swaps.select_docs", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.random_swaps.write_data", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.random_swaps.select_based_on_time"], ["", "", "", "def", "main", "(", "args", ")", ":", "\n", "# load data and create per source document chunks", "\n", "\t", "df", "=", "read_data", "(", "args", ".", "src_file", ",", "chunk_size", "=", "args", ".", "chunk_size", ")", "\n", "new_df", "=", "transform_by_permuting", "(", "df", ")", "\n", "\n", "# restrict to max number of documents per source in every epoch", "\n", "new_df", "=", "select_docs", "(", "new_df", ",", "max_docs", "=", "int", "(", "args", ".", "max_source_size", "/", "args", ".", "chunk_size", ")", ")", "\n", "\n", "# restrict further to small number of epochs if necessary", "\n", "# and decide which source time pairs are to be kept", "\n", "if", "not", "args", ".", "keep_all", ":", "\n", "\t\t", "new_df", "=", "select_based_on_time", "(", "new_df", ",", "args", ".", "epochs", ",", "args", ".", "always_activated", ")", "\n", "", "write_data", "(", "new_df", ",", "args", ".", "tgt_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.aggregate_leader_runs.readArgs": [[6, 16], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "readArgs", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"aggregate the statistics from all the random runs\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dir-prefix\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"prefix of the directory\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--output-file\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"output file\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--nums\"", ",", "type", "=", "str", ",", "nargs", "=", "\"+\"", ",", "required", "=", "True", ",", "help", "=", "\"the numbers for the random runs\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--thresholds\"", ",", "type", "=", "int", ",", "nargs", "=", "\"+\"", ",", "required", "=", "True", ",", "help", "=", "\"the threshold values\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lead-types\"", ",", "type", "=", "str", ",", "nargs", "=", "\"+\"", ",", "required", "=", "True", ",", "help", "=", "\"the different ways of measuring leads\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--column-num\"", ",", "type", "=", "int", ",", "required", "=", "False", ",", "default", "=", "2", ",", "help", "=", "\"the column number in the file\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.aggregate_leader_runs.extract_source_values": [[17, 28], ["open", "enumerate", "line.strip().split", "float", "line.strip", "helpful_functions.source_names"], "function", ["None"], ["", "def", "extract_source_values", "(", "filename", ",", "source_names", ",", "column_num", "=", "2", ")", ":", "\n", "\t", "source_values", "=", "{", "source_name", ":", "0.0", "for", "source_name", "in", "source_names", "}", "\n", "with", "open", "(", "filename", ")", "as", "fin", ":", "\n", "\t\t", "for", "i", ",", "line", "in", "enumerate", "(", "fin", ")", ":", "\n", "\t\t\t", "if", "i", ">", "0", ":", "\n", "\t\t\t\t", "parts", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\",\"", ")", "\n", "src", "=", "parts", "[", "0", "]", "\n", "if", "src", "in", "source_values", ":", "\n", "\t\t\t\t\t", "source_values", "[", "src", "]", "=", "float", "(", "parts", "[", "column_num", "]", ")", "\n", "\n", "", "", "", "", "return", "source_values", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.aggregate_leader_runs.main": [[29, 40], ["helpful_functions.safe_open_w", "fout.write", "os.path.join", "aggregate_leader_runs.extract_source_values", "fout.write"], "function", ["home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.helpful_functions.safe_open_w", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.aggregate_leader_runs.extract_source_values"], ["", "def", "main", "(", "args", ")", ":", "\n", "\t", "with", "safe_open_w", "(", "args", ".", "output_file", ")", "as", "fout", ":", "\n", "\t\t", "for", "thresh", "in", "args", ".", "thresholds", ":", "\n", "\t\t\t", "for", "lead_type", "in", "args", ".", "lead_types", ":", "\n", "\t\t\t\t", "header", "=", "\",\"", ".", "join", "(", "source_names", ")", "\n", "fout", ".", "write", "(", "f\"{header}\\n\"", ")", "\n", "for", "num", "in", "args", ".", "nums", ":", "\n", "\t\t\t\t\t", "filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "dir_prefix", "+", "f\".{num}\"", ",", "f\"leader_stats.{thresh}.{lead_type}.csv\"", ")", "\n", "source_values", "=", "extract_source_values", "(", "filename", ",", "source_names", ",", "column_num", "=", "args", ".", "column_num", ")", "\n", "row", "=", "\",\"", ".", "join", "(", "[", "f\"{source_values[source_name]:.4f}\"", "for", "source_name", "in", "source_names", "]", ")", "\n", "fout", ".", "write", "(", "f\"{row}\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.context_gathering.readArgs": [[17, 26], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "readArgs", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"leadership score calculation\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--src-path\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"directory that contains the source embeddings\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-file\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"file contains all the data in one file\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--temp-path\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"directory that contains the temporal embeddings and other files\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--changes-file\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"file contains all the changes\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--contexts-file\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"file that contains the target and context words\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.context_gathering.words2dict": [[27, 38], ["dict"], "function", ["None"], ["", "def", "words2dict", "(", "all_words", ")", ":", "\n", "\t", "\"\"\" Every item in the list `all_words` is of the form [word, period1, period2]\n\n\t\tTurn into dictionary where word is a key and (period1, period2) is a pair of value\n\t\"\"\"", "\n", "words", "=", "dict", "(", ")", "\n", "for", "item", "in", "all_words", ":", "\n", "\t\t", "word", ",", "p1", ",", "p2", "=", "item", "[", "0", "]", ",", "item", "[", "1", "]", ",", "item", "[", "2", "]", "\n", "words", "[", "word", "]", "=", "(", "p1", ",", "p2", ")", "\n", "\n", "", "return", "words", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.context_gathering.records_iterator": [[39, 45], ["open", "line.strip().split", "line.strip", "parts[].split"], "function", ["None"], ["", "def", "records_iterator", "(", "filename", ")", ":", "\n", "\t", "with", "open", "(", "filename", ")", "as", "fin", ":", "\n", "\t\t", "for", "line", "in", "fin", ":", "\n", "\t\t\t", "parts", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "period", ",", "source", ",", "text", "=", "parts", "[", "1", "]", ",", "parts", "[", "2", "]", ".", "split", "(", "\"_\"", ")", "[", "1", "]", ",", "parts", "[", "3", "]", "\n", "yield", "text", ",", "period", ",", "source", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.context_gathering.if_correct_period": [[46, 51], ["None"], "function", ["None"], ["", "", "", "def", "if_correct_period", "(", "period", ",", "end_points", ")", ":", "\n", "\t", "p1", ",", "p2", "=", "end_points", "\n", "t", "=", "period", "[", "1", "]", "\n", "t1", ",", "t2", "=", "p1", "[", "1", "]", ",", "p2", "[", "1", "]", "\n", "return", "t", ">", "t1", "and", "t", "<=", "t2", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.context_gathering.get_contexts": [[52, 66], ["list", "text.split", "enumerate", "context_gathering.if_correct_period", "list.append", "max", "min", "min", "len", "len"], "function", ["home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.context_gathering.if_correct_period"], ["", "def", "get_contexts", "(", "text", ",", "period", ",", "source", ",", "changes", ",", "window_size", "=", "5", ")", ":", "\n", "\t", "items", "=", "list", "(", ")", "\n", "tokens", "=", "text", ".", "split", "(", ")", "\n", "for", "i", ",", "token", "in", "enumerate", "(", "tokens", ")", ":", "\n", "\t\t", "if", "token", "in", "changes", "and", "if_correct_period", "(", "period", ",", "changes", "[", "token", "]", ")", ":", "\n", "\t\t\t", "lc", "=", "tokens", "[", "max", "(", "0", ",", "i", "-", "window_size", ")", ":", "i", "]", "\n", "rc", "=", "tokens", "[", "min", "(", "len", "(", "tokens", ")", ",", "i", "+", "1", ")", ":", "min", "(", "len", "(", "tokens", ")", ",", "i", "+", "1", "+", "window_size", ")", "]", "\n", "items", ".", "append", "(", "{", "\"word\"", ":", "token", ",", "\"period\"", ":", "period", ",", "\"source\"", ":", "source", ",", "\"left_contexts\"", ":", "lc", ",", "\"right_contexts\"", ":", "rc", "}", ")", "\n", "\n", "", "", "return", "items", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.context_gathering.main": [[67, 80], ["os.path.join", "pandas.read_csv", "candidates[].values.tolist", "context_gathering.words2dict", "open", "context_gathering.records_iterator", "os.path.join", "os.path.join", "context_gathering.get_contexts", "fout.write", "ujson.dumps"], "function", ["home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.context_gathering.words2dict", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.context_gathering.records_iterator", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.context_gathering.get_contexts"], ["", "def", "main", "(", "args", ")", ":", "\n", "# Let's first read the word changes to memory", "\n", "\t", "changes_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "temp_path", ",", "args", ".", "changes_file", ")", "\n", "candidates", "=", "pd", ".", "read_csv", "(", "changes_file", ",", "sep", "=", "\";\"", ")", "\n", "all_words", "=", "candidates", "[", "[", "\"word\"", ",", "\"Period1\"", ",", "\"Period2\"", "]", "]", ".", "values", ".", "tolist", "(", ")", "\n", "changes", "=", "words2dict", "(", "all_words", ")", "\n", "\n", "# Now let's read a document one at a time", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "src_path", ",", "args", ".", "contexts_file", ")", ",", "\"w\"", ")", "as", "fout", ":", "\n", "\t\t", "for", "text", ",", "period", ",", "source", "in", "records_iterator", "(", "os", ".", "path", ".", "join", "(", "args", ".", "src_path", ",", "args", ".", "data_file", ")", ")", ":", "\n", "\t\t\t", "items", "=", "get_contexts", "(", "text", ",", "period", ",", "source", ",", "changes", ")", "\n", "for", "item", "in", "items", ":", "\n", "\t\t\t\t", "fout", ".", "write", "(", "ujson", ".", "dumps", "(", "item", ")", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.get_frequency_stats.readArgs": [[6, 17], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "readArgs", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"get the period and source specific frequencies\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dir-path\"", ",", "required", "=", "True", ",", "type", "=", "str", ",", "help", "=", "\"directory that contains the files\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-file\"", ",", "required", "=", "True", ",", "type", "=", "str", ",", "help", "=", "\"file that contains all the data\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--word-freq-file\"", ",", "required", "=", "True", ",", "type", "=", "str", ",", "help", "=", "\"file that contains the word frequency\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--doc-freq-file\"", ",", "required", "=", "True", ",", "type", "=", "str", ",", "help", "=", "\"file that contains the document frequency\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--period-freq-file\"", ",", "required", "=", "True", ",", "type", "=", "str", ",", "help", "=", "\"file that contains the period frequency\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--source-freq-file\"", ",", "required", "=", "True", ",", "type", "=", "str", ",", "help", "=", "\"file that contains the source frequency\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--periods\"", ",", "required", "=", "False", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "\"specify the number of periods\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.get_frequency_stats.main": [[18, 77], ["collections.defaultdict", "collections.defaultdict", "dict", "dict", "print", "open", "enumerate", "open", "open", "open", "open", "range", "os.path.join", "line.strip().split", "text.split", "set", "text.split", "os.path.join", "fout.write", "os.path.join", "fout.write", "os.path.join", "os.path.join", "parts[].strip().split", "text.split", "print", "fout.write", "fout.write", "line.strip", "helpful_functions.init_dict", "helpful_functions.init_dict", "parts[].strip"], "function", ["home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.helpful_functions.init_dict", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.helpful_functions.init_dict"], ["", "def", "main", "(", "args", ")", ":", "\n", "# For each word in the vocab, calculate the word frequency and the document frequency. ", "\n", "# We want to pick words that have either high token frequencies or document frequencies.", "\n", "# For each word in the vocab, calculate the frequency of the word in each period, and in each source.", "\n", "\t", "word_freq_vocab", "=", "defaultdict", "(", "int", ")", "\n", "doc_freq_vocab", "=", "defaultdict", "(", "int", ")", "\n", "\n", "period_freq_vocab", "=", "dict", "(", ")", "\n", "source_freq_vocab", "=", "dict", "(", ")", "\n", "\n", "period_names", "=", "[", "f'T{i}'", "for", "i", "in", "range", "(", "args", ".", "periods", ")", "]", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "dir_path", ",", "args", ".", "data_file", ")", ")", "as", "fin", ":", "\n", "\t\t", "for", "i", ",", "line", "in", "enumerate", "(", "fin", ")", ":", "\n", "\t\t\t", "parts", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "source", "=", "parts", "[", "0", "]", ".", "strip", "(", "\"/\"", ")", ".", "split", "(", "\"/\"", ")", "[", "3", "]", "\n", "if", "source", "in", "name_changes", ":", "\n", "\t\t\t\t", "source", "=", "name_changes", "[", "source", "]", "\n", "", "period", "=", "parts", "[", "1", "]", "\n", "period", "=", "parts", "[", "1", "]", "\n", "text", "=", "parts", "[", "3", "]", "\n", "\n", "for", "w", "in", "text", ".", "split", "(", ")", ":", "\n", "\t\t\t\t", "word_freq_vocab", "[", "w", "]", "+=", "1", "\n", "\n", "", "for", "w", "in", "set", "(", "text", ".", "split", "(", ")", ")", ":", "\n", "\t\t\t\t", "doc_freq_vocab", "[", "w", "]", "+=", "1", "\n", "\n", "", "for", "w", "in", "text", ".", "split", "(", ")", ":", "\n", "\t\t\t\t", "if", "w", "not", "in", "period_freq_vocab", ":", "\n", "\t\t\t\t\t", "period_freq_vocab", "[", "w", "]", "=", "init_dict", "(", "period_names", ")", "\n", "", "period_freq_vocab", "[", "w", "]", "[", "period", "]", "+=", "1", "\n", "\n", "if", "w", "not", "in", "source_freq_vocab", ":", "\n", "\t\t\t\t\t", "source_freq_vocab", "[", "w", "]", "=", "init_dict", "(", "source_names", ")", "\n", "", "source_freq_vocab", "[", "w", "]", "[", "source", "]", "+=", "1", "\n", "\n", "", "if", "(", "i", "+", "1", ")", "%", "50000", "==", "0", ":", "\n", "\t\t\t\t", "print", "(", "f\"{i+1} documents processed\"", ")", "\n", "\n", "", "", "", "print", "(", "f\"{i+1} documents processed overall\"", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "dir_path", ",", "args", ".", "word_freq_file", ")", ",", "\"w\"", ")", "as", "fout", ":", "\n", "\t\t", "for", "word", "in", "word_freq_vocab", ":", "\n", "\t\t\t", "fout", ".", "write", "(", "f\"{word},{word_freq_vocab[word]}\\n\"", ")", "\n", "\n", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "dir_path", ",", "args", ".", "doc_freq_file", ")", ",", "\"w\"", ")", "as", "fout", ":", "\n", "\t\t", "for", "word", "in", "doc_freq_vocab", ":", "\n", "\t\t\t", "fout", ".", "write", "(", "f\"{word},{doc_freq_vocab[word]}\\n\"", ")", "\n", "\n", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "dir_path", ",", "args", ".", "period_freq_file", ")", ",", "\"w\"", ")", "as", "fout", ":", "\n", "\t\t", "for", "word", "in", "period_freq_vocab", ":", "\n", "\t\t\t", "for", "period", "in", "period_freq_vocab", "[", "word", "]", ":", "\n", "\t\t\t\t", "fout", ".", "write", "(", "f\"{word},{period},{period_freq_vocab[word][period]}\\n\"", ")", "\n", "\n", "", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "dir_path", ",", "args", ".", "source_freq_file", ")", ",", "\"w\"", ")", "as", "fout", ":", "\n", "\t\t", "for", "word", "in", "source_freq_vocab", ":", "\n", "\t\t\t", "for", "source", "in", "source_freq_vocab", "[", "word", "]", ":", "\n", "\t\t\t\t", "fout", ".", "write", "(", "f\"{word},{source},{source_freq_vocab[word][source]}\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.create_filters.readArgs": [[14, 22], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "readArgs", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"filter words that change the most\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dir-path\"", ",", "required", "=", "True", ",", "type", "=", "str", ",", "help", "=", "\"directory that contains the required files\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--periods-freq-file\"", ",", "required", "=", "True", ",", "type", "=", "str", ",", "help", "=", "\"file that contains period frequencies\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--sources-freq-file\"", ",", "required", "=", "True", ",", "type", "=", "str", ",", "help", "=", "\"file that contains source frequencies\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--scores-file\"", ",", "required", "=", "True", ",", "type", "=", "str", ",", "help", "=", "\"file contains near neighbors and scores\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--periods\"", ",", "required", "=", "False", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "\"number of periods\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.create_filters.filter_by_freq": [[23, 27], ["set", "sum", "period_frequencies[].values", "sorted", "frequencies.items"], "function", ["None"], ["", "def", "filter_by_freq", "(", "period_frequencies", ",", "topn", "=", "250", ")", ":", "\n", "\t", "frequencies", "=", "{", "w", ":", "sum", "(", "period_frequencies", "[", "w", "]", ".", "values", "(", ")", ")", "for", "w", "in", "period_frequencies", "}", "\n", "ranked_words", "=", "[", "w", "for", "w", ",", "_", "in", "sorted", "(", "frequencies", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "]", "\n", "return", "set", "(", "ranked_words", "[", "0", ":", "topn", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.create_filters.filter_by_period_freq": [[28, 32], ["helpful_functions.is_count_greater"], "function", ["home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.helpful_functions.is_count_greater"], ["", "def", "filter_by_period_freq", "(", "period_frequencies", ",", "period_thresh", "=", "5", ")", ":", "\n", "\t", "\"\"\" Return True if more than `period_thresh` periods have zero counts\"\"\"", "\n", "zero_freq_dist", "=", "[", "period_frequencies", "[", "period", "]", "==", "0", "for", "period", "in", "period_frequencies", "]", "\n", "return", "is_count_greater", "(", "zero_freq_dist", ",", "thresh", "=", "period_thresh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.create_filters.filter_by_source_freq": [[34, 38], ["helpful_functions.is_count_smaller"], "function", ["home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.helpful_functions.is_count_smaller"], ["", "def", "filter_by_source_freq", "(", "source_frequencies", ",", "source_thresh", "=", "4", ")", ":", "\n", "\t", "\"\"\" Return True if less than `source_thresh` sources have non-zero counts\"\"\"", "\n", "nonzero_freq_dist", "=", "[", "source_frequencies", "[", "source", "]", ">", "0", "for", "source", "in", "source_frequencies", "]", "\n", "return", "is_count_smaller", "(", "nonzero_freq_dist", ",", "source_thresh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.create_filters.readDictFromFile": [[39, 49], ["dict", "open", "line.strip().split", "int", "helpful_functions.init_dict", "line.strip", "helpful_functions.source_names"], "function", ["home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.helpful_functions.init_dict"], ["", "def", "readDictFromFile", "(", "filename", ",", "names", ")", ":", "\n", "\t", "freq", "=", "dict", "(", ")", "\n", "with", "open", "(", "filename", ")", "as", "fin", ":", "\n", "\t\t", "for", "line", "in", "fin", ":", "\n", "\t\t\t", "parts", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\",\"", ")", "\n", "word", ",", "facet", ",", "count", "=", "parts", "[", "0", "]", ",", "parts", "[", "1", "]", ",", "parts", "[", "2", "]", "\n", "if", "word", "not", "in", "freq", ":", "\n", "\t\t\t\t", "freq", "[", "word", "]", "=", "init_dict", "(", "names", ")", "\n", "", "freq", "[", "word", "]", "[", "facet", "]", "=", "int", "(", "count", ")", "\n", "", "", "return", "freq", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.create_filters.write_filters": [[50, 54], ["open", "os.path.join", "fout.write"], "function", ["None"], ["", "def", "write_filters", "(", "words", ",", "dir_path", ",", "filter_name", ")", ":", "\n", "\t", "with", "open", "(", "os", ".", "path", ".", "join", "(", "dir_path", ",", "f\"{filter_name}.ignore\"", ")", ",", "\"w\"", ")", "as", "fout", ":", "\n", "\t\t", "for", "word", "in", "words", ":", "\n", "\t\t\t", "fout", ".", "write", "(", "f\"{word}\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.create_filters.main": [[55, 123], ["pandas.read_csv", "create_filters.readDictFromFile", "create_filters.filter_by_freq", "create_filters.readDictFromFile", "set", "set", "set", "create_filters.write_filters", "create_filters.write_filters", "create_filters.write_filters", "create_filters.write_filters", "create_filters.write_filters", "create_filters.write_filters", "create_filters.write_filters", "create_filters.write_filters", "os.path.join", "str", "os.path.join", "os.path.join", "open", "range", "w.endswith", "str", "set.add", "str", "eval", "eval", "helpful_functions.is_count_greater", "helpful_functions.is_count_greater", "set.add", "os.path.join", "line.strip", "str", "eval", "eval", "set.add", "len", "create_filters.filter_by_period_freq", "create_filters.filter_by_source_freq", "len", "len"], "function", ["home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.create_filters.readDictFromFile", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.create_filters.filter_by_freq", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.create_filters.readDictFromFile", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.create_filters.write_filters", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.create_filters.write_filters", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.create_filters.write_filters", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.create_filters.write_filters", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.create_filters.write_filters", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.create_filters.write_filters", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.create_filters.write_filters", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.create_filters.write_filters", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.helpful_functions.is_count_greater", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.helpful_functions.is_count_greater", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.create_filters.filter_by_period_freq", "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.create_filters.filter_by_source_freq"], ["", "", "", "def", "main", "(", "args", ")", ":", "\n", "\t", "ranks", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "args", ".", "dir_path", ",", "args", ".", "scores_file", ")", ",", "sep", "=", "\";\"", ")", "\n", "words", "=", "{", "str", "(", "w", ")", "for", "w", "in", "ranks", "[", "\"word\"", "]", ".", "values", "}", "\n", "\n", "period_names", "=", "[", "f'T{i}'", "for", "i", "in", "range", "(", "args", ".", "periods", ")", "]", "\n", "# remove words that have hyphens at the end", "\n", "hyphen_endings", "=", "{", "w", "for", "w", "in", "words", "if", "w", ".", "endswith", "(", "\"-\"", ")", "}", "\n", "# remove words that are too short", "\n", "very_short_words", "=", "{", "w", "for", "w", "in", "words", "if", "len", "(", "w", ")", "<=", "2", "}", "\n", "\n", "# remove words with zero counts in more than 5 periods", "\n", "period_freq_vocab", "=", "readDictFromFile", "(", "os", ".", "path", ".", "join", "(", "args", ".", "dir_path", ",", "args", ".", "periods_freq_file", ")", ",", "period_names", ")", "\n", "\n", "# remove words that are very high frequency (i.e functional words)", "\n", "functional_words", "=", "filter_by_freq", "(", "period_freq_vocab", ",", "topn", "=", "250", ")", "\n", "infrequent_period_words", "=", "{", "w", "for", "w", "in", "period_freq_vocab", "if", "filter_by_period_freq", "(", "period_freq_vocab", "[", "w", "]", ",", "period_thresh", "=", "5", ")", "and", "w", "in", "words", "}", "\n", "\n", "# remove words if they have non-zero counts only in 3 or fewer sources.", "\n", "source_freq_vocab", "=", "readDictFromFile", "(", "os", ".", "path", ".", "join", "(", "args", ".", "dir_path", ",", "args", ".", "sources_freq_file", ")", ",", "source_names", ")", "\n", "infrequent_source_words", "=", "{", "w", "for", "w", "in", "source_freq_vocab", "if", "filter_by_source_freq", "(", "source_freq_vocab", "[", "w", "]", ",", "source_thresh", "=", "4", ")", "and", "w", "in", "words", "}", "\n", "\n", "\n", "#remove words with trivial counts in the periods they are supposed to have changed.", "\n", "trivial_freq_words", "=", "set", "(", ")", "\n", "rows", "=", "ranks", "[", "[", "\"word\"", ",", "\"Period1\"", ",", "\"Period2\"", "]", "]", ".", "values", "\n", "for", "row", "in", "rows", ":", "\n", "\t\t", "w", ",", "p1", ",", "p2", "=", "str", "(", "row", "[", "0", "]", ")", ",", "row", "[", "1", "]", ",", "row", "[", "2", "]", "\n", "if", "period_freq_vocab", "[", "w", "]", "[", "p1", "]", "<=", "10", "or", "period_freq_vocab", "[", "w", "]", "[", "p2", "]", "<=", "10", ":", "\n", "\t\t\t", "trivial_freq_words", ".", "add", "(", "w", ")", "\n", "\n", "# remove words if many neighbors with trivial counts in the periods words supposed to have changed.", "\n", "", "", "trivial_neighbor_freq_words", "=", "set", "(", ")", "\n", "rows", "=", "ranks", "[", "[", "\"word\"", ",", "\"Period1\"", ",", "\"Period2\"", ",", "\"Neighbors1\"", ",", "\"Neighbors2\"", "]", "]", ".", "values", "\n", "for", "row", "in", "rows", ":", "\n", "\t\t", "w", ",", "p1", ",", "p2", ",", "n1", ",", "n2", "=", "str", "(", "row", "[", "0", "]", ")", ",", "row", "[", "1", "]", ",", "row", "[", "2", "]", ",", "eval", "(", "row", "[", "3", "]", ")", ",", "eval", "(", "row", "[", "4", "]", ")", "\n", "n1_freq", "=", "[", "period_freq_vocab", "[", "n", "]", "[", "p1", "]", "for", "n", "in", "n1", "]", "\n", "n2_freq", "=", "[", "period_freq_vocab", "[", "n", "]", "[", "p2", "]", "for", "n", "in", "n2", "]", "\n", "\n", "if", "is_count_greater", "(", "[", "f", "<=", "3", "for", "f", "in", "n1_freq", "]", ",", "7", ")", "or", "is_count_greater", "(", "[", "f", "<=", "3", "for", "f", "in", "n2_freq", "]", ",", "7", ")", ":", "\n", "\t\t\t", "trivial_neighbor_freq_words", ".", "add", "(", "w", ")", "\n", "\n", "# remove words if many neighbors are names in the periods when words are supposed to have changed.", "\n", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "dir_path", ",", "\"names.ignore\"", ")", ")", "as", "fin", ":", "\n", "\t\t", "names", "=", "{", "line", ".", "strip", "(", ")", "for", "line", "in", "fin", "}", "\n", "\n", "", "too_many_neighbors_as_names", "=", "set", "(", ")", "\n", "rows", "=", "ranks", "[", "[", "\"word\"", ",", "\"Period1\"", ",", "\"Period2\"", ",", "\"Neighbors1\"", ",", "\"Neighbors2\"", "]", "]", ".", "values", "\n", "for", "row", "in", "rows", ":", "\n", "\t\t", "w", ",", "p1", ",", "p2", ",", "n1", ",", "n2", "=", "str", "(", "row", "[", "0", "]", ")", ",", "row", "[", "1", "]", ",", "row", "[", "2", "]", ",", "eval", "(", "row", "[", "3", "]", ")", ",", "eval", "(", "row", "[", "4", "]", ")", "\n", "n1_names", "=", "[", "n", "for", "n", "in", "n1", "if", "n", "in", "names", "]", "\n", "n2_names", "=", "[", "n", "for", "n", "in", "n2", "if", "n", "in", "names", "]", "\n", "\n", "if", "len", "(", "n1_names", ")", ">=", "5", "or", "len", "(", "n2_names", ")", ">=", "5", ":", "\n", "\t\t\t", "too_many_neighbors_as_names", ".", "add", "(", "w", ")", "\n", "\n", "\n", "", "", "write_filters", "(", "functional_words", ",", "args", ".", "dir_path", ",", "\"functional-words\"", ")", "\n", "write_filters", "(", "hyphen_endings", ",", "args", ".", "dir_path", ",", "\"end-hyphens\"", ")", "\n", "write_filters", "(", "very_short_words", ",", "args", ".", "dir_path", ",", "\"very-short\"", ")", "\n", "write_filters", "(", "infrequent_period_words", ",", "args", ".", "dir_path", ",", "\"infrequent-periods\"", ")", "\n", "write_filters", "(", "infrequent_source_words", ",", "args", ".", "dir_path", ",", "\"infrequent-sources\"", ")", "\n", "write_filters", "(", "trivial_freq_words", ",", "args", ".", "dir_path", ",", "\"trivial-change-freq\"", ")", "\n", "write_filters", "(", "trivial_neighbor_freq_words", ",", "args", ".", "dir_path", ",", "\"trivial-neighbor-freq-words\"", ")", "\n", "write_filters", "(", "too_many_neighbors_as_names", ",", "args", ".", "dir_path", ",", "\"many-names-neighbors\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.random_leader_analysis.readArgs": [[6, 16], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "readArgs", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"randomized trials data\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dir-path\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"directory path\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--prefix\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"prefix of the directories that contain the relevant files\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--runs\"", ",", "type", "=", "int", ",", "required", "=", "True", ",", "nargs", "=", "\"+\"", ",", "help", "=", "\"integer for num\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--leader-stats-file\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"leader stats filename\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--field-name\"", ",", "type", "=", "str", ",", "required", "=", "False", ",", "default", "=", "\"P(Leader)\"", ",", "choices", "=", "{", "\"P(Leader)\"", ",", "\"PageRank\"", "}", ",", "help", "=", "\"field name to extract\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--out-file\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"csv file containing the results from all the runs for the given field name\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.sandeepsoni_semantic-leadership-network.scripts.random_leader_analysis.main": [[17, 27], ["list", "list.append", "pandas.DataFrame", "pd.DataFrame.to_csv", "sorted", "os.path.join", "pandas.read_csv", "list.append", "sorted"], "function", ["None"], ["", "def", "main", "(", "args", ")", ":", "\n", "\t", "rows", "=", "list", "(", ")", "\n", "rows", ".", "append", "(", "sorted", "(", "source_names", ")", ")", "\n", "for", "run", "in", "args", ".", "runs", ":", "\n", "\t\t", "filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "dir_path", ",", "f\"{args.prefix}.{run}\"", ",", "args", ".", "leader_stats_file", ")", "\n", "df", "=", "pd", ".", "read_csv", "(", "filename", ")", "\n", "items", "=", "[", "df", "[", "df", "[", "\"Leader\"", "]", "==", "name", "]", "[", "args", ".", "field_name", "]", ".", "iloc", "[", "0", "]", "for", "name", "in", "sorted", "(", "source_names", ")", "]", "\n", "rows", ".", "append", "(", "items", ")", "\n", "", "out_df", "=", "pd", ".", "DataFrame", "(", "rows", ")", "\n", "out_df", ".", "to_csv", "(", "args", ".", "out_file", ",", "header", "=", "False", ",", "index", "=", "False", ")", "\n", "\n"]]}