{"home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.config.str2bool": [[7, 9], ["v.lower"], "function", ["None"], ["def", "str2bool", "(", "v", ")", ":", "\n", "    ", "return", "v", ".", "lower", "(", ")", "in", "(", "'yes'", ",", "'true'", ",", "'t'", ",", "'1'", ",", "'y'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.trian.TriAN.__init__": [[10, 80], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "trian.TriAN.embedding.weight.data.fill_", "trian.TriAN.embedding.weight.data[].normal_", "torch.Embedding", "torch.Embedding", "torch.Embedding", "trian.TriAN.pos_embedding.weight.data.normal_", "torch.Embedding", "torch.Embedding", "torch.Embedding", "trian.TriAN.ner_embedding.weight.data.normal_", "torch.Embedding", "torch.Embedding", "torch.Embedding", "trian.TriAN.rel_embedding.weight.data.normal_", "layers.SeqAttnMatch", "layers.SeqAttnMatch", "layers.SeqAttnMatch", "layers.StackedBRNN", "layers.StackedBRNN", "layers.StackedBRNN", "layers.LinearSeqAttn", "layers.LinearSeqAttn", "layers.BilinearSeqAttn", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.Dictionary.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "TriAN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "embedding_dim", "=", "300", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "len", "(", "vocab", ")", ",", "self", ".", "embedding_dim", ",", "padding_idx", "=", "0", ")", "\n", "self", ".", "embedding", ".", "weight", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "embedding", ".", "weight", ".", "data", "[", ":", "2", "]", ".", "normal_", "(", "0", ",", "0.1", ")", "\n", "self", ".", "pos_embedding", "=", "nn", ".", "Embedding", "(", "len", "(", "pos_vocab", ")", ",", "args", ".", "pos_emb_dim", ",", "padding_idx", "=", "0", ")", "\n", "self", ".", "pos_embedding", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.1", ")", "\n", "self", ".", "ner_embedding", "=", "nn", ".", "Embedding", "(", "len", "(", "ner_vocab", ")", ",", "args", ".", "ner_emb_dim", ",", "padding_idx", "=", "0", ")", "\n", "self", ".", "ner_embedding", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.1", ")", "\n", "self", ".", "rel_embedding", "=", "nn", ".", "Embedding", "(", "len", "(", "rel_vocab", ")", ",", "args", ".", "rel_emb_dim", ",", "padding_idx", "=", "0", ")", "\n", "self", ".", "rel_embedding", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.1", ")", "\n", "self", ".", "RNN_TYPES", "=", "{", "'lstm'", ":", "nn", ".", "LSTM", ",", "'gru'", ":", "nn", ".", "GRU", "}", "\n", "\n", "self", ".", "p_q_emb_match", "=", "layers", ".", "SeqAttnMatch", "(", "self", ".", "embedding_dim", ")", "\n", "self", ".", "c_q_emb_match", "=", "layers", ".", "SeqAttnMatch", "(", "self", ".", "embedding_dim", ")", "\n", "self", ".", "c_p_emb_match", "=", "layers", ".", "SeqAttnMatch", "(", "self", ".", "embedding_dim", ")", "\n", "\n", "# Input size to RNN: word emb + question emb + pos emb + ner emb + manual features", "\n", "doc_input_size", "=", "2", "*", "self", ".", "embedding_dim", "+", "args", ".", "pos_emb_dim", "+", "args", ".", "ner_emb_dim", "+", "5", "+", "2", "*", "args", ".", "rel_emb_dim", "\n", "\n", "# RNN document encoder", "\n", "self", ".", "doc_rnn", "=", "layers", ".", "StackedBRNN", "(", "\n", "input_size", "=", "doc_input_size", ",", "\n", "hidden_size", "=", "args", ".", "hidden_size", ",", "\n", "num_layers", "=", "args", ".", "doc_layers", ",", "\n", "dropout_rate", "=", "args", ".", "dropout_rnn_output", ",", "\n", "dropout_output", "=", "True", ",", "\n", "concat_layers", "=", "False", ",", "\n", "rnn_type", "=", "self", ".", "RNN_TYPES", "[", "args", ".", "rnn_type", "]", ",", "\n", "padding", "=", "args", ".", "rnn_padding", ")", "\n", "\n", "# RNN question encoder: word emb + pos emb", "\n", "qst_input_size", "=", "self", ".", "embedding_dim", "+", "args", ".", "pos_emb_dim", "\n", "self", ".", "question_rnn", "=", "layers", ".", "StackedBRNN", "(", "\n", "input_size", "=", "qst_input_size", ",", "\n", "hidden_size", "=", "args", ".", "hidden_size", ",", "\n", "num_layers", "=", "1", ",", "\n", "dropout_rate", "=", "args", ".", "dropout_rnn_output", ",", "\n", "dropout_output", "=", "True", ",", "\n", "concat_layers", "=", "False", ",", "\n", "rnn_type", "=", "self", ".", "RNN_TYPES", "[", "args", ".", "rnn_type", "]", ",", "\n", "padding", "=", "args", ".", "rnn_padding", ")", "\n", "\n", "# RNN answer encoder", "\n", "choice_input_size", "=", "3", "*", "self", ".", "embedding_dim", "\n", "self", ".", "choice_rnn", "=", "layers", ".", "StackedBRNN", "(", "\n", "input_size", "=", "choice_input_size", ",", "\n", "hidden_size", "=", "args", ".", "hidden_size", ",", "\n", "num_layers", "=", "1", ",", "\n", "dropout_rate", "=", "args", ".", "dropout_rnn_output", ",", "\n", "dropout_output", "=", "True", ",", "\n", "concat_layers", "=", "False", ",", "\n", "rnn_type", "=", "self", ".", "RNN_TYPES", "[", "args", ".", "rnn_type", "]", ",", "\n", "padding", "=", "args", ".", "rnn_padding", ")", "\n", "\n", "# Output sizes of rnn encoders", "\n", "doc_hidden_size", "=", "2", "*", "args", ".", "hidden_size", "\n", "question_hidden_size", "=", "2", "*", "args", ".", "hidden_size", "\n", "choice_hidden_size", "=", "2", "*", "args", ".", "hidden_size", "\n", "\n", "# Answer merging", "\n", "self", ".", "c_self_attn", "=", "layers", ".", "LinearSeqAttn", "(", "choice_hidden_size", ")", "\n", "self", ".", "q_self_attn", "=", "layers", ".", "LinearSeqAttn", "(", "question_hidden_size", ")", "\n", "\n", "self", ".", "p_q_attn", "=", "layers", ".", "BilinearSeqAttn", "(", "x_size", "=", "doc_hidden_size", ",", "y_size", "=", "question_hidden_size", ")", "\n", "\n", "self", ".", "p_c_bilinear", "=", "nn", ".", "Linear", "(", "doc_hidden_size", ",", "choice_hidden_size", ")", "\n", "self", ".", "q_c_bilinear", "=", "nn", ".", "Linear", "(", "question_hidden_size", ",", "choice_hidden_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.trian.TriAN.forward": [[81, 128], ["trian.TriAN.p_q_emb_match", "trian.TriAN.c_q_emb_match", "trian.TriAN.c_p_emb_match", "torch.functional.dropout", "torch.functional.dropout", "torch.functional.dropout", "torch.functional.dropout", "torch.functional.dropout", "torch.functional.dropout", "torch.functional.dropout", "torch.functional.dropout", "torch.functional.dropout", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "trian.TriAN.doc_rnn", "trian.TriAN.choice_rnn", "trian.TriAN.question_rnn", "trian.TriAN.q_self_attn", "layers.weighted_avg", "trian.TriAN.p_q_attn", "layers.weighted_avg", "trian.TriAN.c_self_attn", "layers.weighted_avg", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "trian.TriAN.embedding", "trian.TriAN.embedding", "trian.TriAN.embedding", "trian.TriAN.pos_embedding", "trian.TriAN.ner_embedding", "trian.TriAN.pos_embedding", "trian.TriAN.rel_embedding", "trian.TriAN.rel_embedding", "torch.functional.dropout", "torch.functional.dropout", "torch.functional.dropout", "torch.functional.dropout", "torch.functional.dropout", "torch.functional.dropout", "torch.functional.dropout", "torch.functional.dropout", "torch.functional.dropout", "torch.functional.dropout", "torch.functional.dropout", "torch.functional.dropout", "torch.functional.dropout", "torch.functional.dropout", "torch.functional.dropout", "torch.functional.dropout", "torch.functional.dropout", "torch.functional.dropout", "torch.functional.dropout", "torch.functional.dropout", "torch.functional.dropout", "torch.functional.dropout", "torch.functional.dropout", "torch.functional.dropout", "trian.TriAN.p_c_bilinear", "trian.TriAN.q_c_bilinear"], "methods", ["home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.layers.weighted_avg", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.layers.weighted_avg", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.layers.weighted_avg"], ["", "def", "forward", "(", "self", ",", "p", ",", "p_pos", ",", "p_ner", ",", "p_mask", ",", "q", ",", "q_pos", ",", "q_mask", ",", "c", ",", "c_mask", ",", "f_tensor", ",", "p_q_relation", ",", "p_c_relation", ")", ":", "\n", "        ", "p_emb", ",", "q_emb", ",", "c_emb", "=", "self", ".", "embedding", "(", "p", ")", ",", "self", ".", "embedding", "(", "q", ")", ",", "self", ".", "embedding", "(", "c", ")", "\n", "p_pos_emb", ",", "p_ner_emb", ",", "q_pos_emb", "=", "self", ".", "pos_embedding", "(", "p_pos", ")", ",", "self", ".", "ner_embedding", "(", "p_ner", ")", ",", "self", ".", "pos_embedding", "(", "q_pos", ")", "\n", "p_q_rel_emb", ",", "p_c_rel_emb", "=", "self", ".", "rel_embedding", "(", "p_q_relation", ")", ",", "self", ".", "rel_embedding", "(", "p_c_relation", ")", "\n", "\n", "# Dropout on embeddings", "\n", "if", "self", ".", "args", ".", "dropout_emb", ">", "0", ":", "\n", "            ", "p_emb", "=", "nn", ".", "functional", ".", "dropout", "(", "p_emb", ",", "p", "=", "self", ".", "args", ".", "dropout_emb", ",", "training", "=", "self", ".", "training", ")", "\n", "q_emb", "=", "nn", ".", "functional", ".", "dropout", "(", "q_emb", ",", "p", "=", "self", ".", "args", ".", "dropout_emb", ",", "training", "=", "self", ".", "training", ")", "\n", "c_emb", "=", "nn", ".", "functional", ".", "dropout", "(", "c_emb", ",", "p", "=", "self", ".", "args", ".", "dropout_emb", ",", "training", "=", "self", ".", "training", ")", "\n", "p_pos_emb", "=", "nn", ".", "functional", ".", "dropout", "(", "p_pos_emb", ",", "p", "=", "self", ".", "args", ".", "dropout_emb", ",", "training", "=", "self", ".", "training", ")", "\n", "p_ner_emb", "=", "nn", ".", "functional", ".", "dropout", "(", "p_ner_emb", ",", "p", "=", "self", ".", "args", ".", "dropout_emb", ",", "training", "=", "self", ".", "training", ")", "\n", "q_pos_emb", "=", "nn", ".", "functional", ".", "dropout", "(", "q_pos_emb", ",", "p", "=", "self", ".", "args", ".", "dropout_emb", ",", "training", "=", "self", ".", "training", ")", "\n", "p_q_rel_emb", "=", "nn", ".", "functional", ".", "dropout", "(", "p_q_rel_emb", ",", "p", "=", "self", ".", "args", ".", "dropout_emb", ",", "training", "=", "self", ".", "training", ")", "\n", "p_c_rel_emb", "=", "nn", ".", "functional", ".", "dropout", "(", "p_c_rel_emb", ",", "p", "=", "self", ".", "args", ".", "dropout_emb", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "", "p_q_weighted_emb", "=", "self", ".", "p_q_emb_match", "(", "p_emb", ",", "q_emb", ",", "q_mask", ")", "\n", "c_q_weighted_emb", "=", "self", ".", "c_q_emb_match", "(", "c_emb", ",", "q_emb", ",", "q_mask", ")", "\n", "c_p_weighted_emb", "=", "self", ".", "c_p_emb_match", "(", "c_emb", ",", "p_emb", ",", "p_mask", ")", "\n", "p_q_weighted_emb", "=", "nn", ".", "functional", ".", "dropout", "(", "p_q_weighted_emb", ",", "p", "=", "self", ".", "args", ".", "dropout_emb", ",", "training", "=", "self", ".", "training", ")", "\n", "c_q_weighted_emb", "=", "nn", ".", "functional", ".", "dropout", "(", "c_q_weighted_emb", ",", "p", "=", "self", ".", "args", ".", "dropout_emb", ",", "training", "=", "self", ".", "training", ")", "\n", "c_p_weighted_emb", "=", "nn", ".", "functional", ".", "dropout", "(", "c_p_weighted_emb", ",", "p", "=", "self", ".", "args", ".", "dropout_emb", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "p_rnn_input", "=", "torch", ".", "cat", "(", "[", "p_emb", ",", "p_q_weighted_emb", ",", "p_pos_emb", ",", "p_ner_emb", ",", "f_tensor", ",", "p_q_rel_emb", ",", "p_c_rel_emb", "]", ",", "dim", "=", "2", ")", "\n", "c_rnn_input", "=", "torch", ".", "cat", "(", "[", "c_emb", ",", "c_q_weighted_emb", ",", "c_p_weighted_emb", "]", ",", "dim", "=", "2", ")", "\n", "q_rnn_input", "=", "torch", ".", "cat", "(", "[", "q_emb", ",", "q_pos_emb", "]", ",", "dim", "=", "2", ")", "\n", "\n", "p_hiddens", "=", "self", ".", "doc_rnn", "(", "p_rnn_input", ",", "p_mask", ")", "\n", "c_hiddens", "=", "self", ".", "choice_rnn", "(", "c_rnn_input", ",", "c_mask", ")", "\n", "q_hiddens", "=", "self", ".", "question_rnn", "(", "q_rnn_input", ",", "q_mask", ")", "\n", "\n", "q_merge_weights", "=", "self", ".", "q_self_attn", "(", "q_hiddens", ",", "q_mask", ")", "\n", "q_hidden", "=", "layers", ".", "weighted_avg", "(", "q_hiddens", ",", "q_merge_weights", ")", "\n", "\n", "p_merge_weights", "=", "self", ".", "p_q_attn", "(", "p_hiddens", ",", "q_hidden", ",", "p_mask", ")", "\n", "# [batch_size, 2*hidden_size]", "\n", "p_hidden", "=", "layers", ".", "weighted_avg", "(", "p_hiddens", ",", "p_merge_weights", ")", "\n", "\n", "c_merge_weights", "=", "self", ".", "c_self_attn", "(", "c_hiddens", ",", "c_mask", ")", "\n", "# [batch_size, 2*hidden_size]", "\n", "c_hidden", "=", "layers", ".", "weighted_avg", "(", "c_hiddens", ",", "c_merge_weights", ")", "\n", "\n", "logits", "=", "torch", ".", "sum", "(", "self", ".", "p_c_bilinear", "(", "p_hidden", ")", "*", "c_hidden", ",", "dim", "=", "-", "1", ")", "\n", "logits", "+=", "torch", ".", "sum", "(", "self", ".", "q_c_bilinear", "(", "q_hidden", ")", "*", "c_hidden", ",", "dim", "=", "-", "1", ")", "\n", "proba", "=", "F", ".", "sigmoid", "(", "logits", ")", "\n", "\n", "return", "proba", "\n", "", "", ""]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.layers.StackedBRNN.__init__": [[16, 31], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "layers.StackedBRNN.rnns.append", "rnn_type"], "methods", ["home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.Dictionary.__init__"], ["def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "num_layers", ",", "\n", "dropout_rate", "=", "0", ",", "dropout_output", "=", "False", ",", "rnn_type", "=", "nn", ".", "LSTM", ",", "\n", "concat_layers", "=", "False", ",", "padding", "=", "False", ")", ":", "\n", "        ", "super", "(", "StackedBRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "dropout_output", "=", "dropout_output", "\n", "self", ".", "dropout_rate", "=", "dropout_rate", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "concat_layers", "=", "concat_layers", "\n", "self", ".", "rnns", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "input_size", "=", "input_size", "if", "i", "==", "0", "else", "2", "*", "hidden_size", "\n", "self", ".", "rnns", ".", "append", "(", "rnn_type", "(", "input_size", ",", "hidden_size", ",", "\n", "num_layers", "=", "1", ",", "\n", "bidirectional", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.layers.StackedBRNN.forward": [[32, 55], ["layers.StackedBRNN.contiguous", "x_mask.data.sum", "layers.StackedBRNN._forward_unpadded", "layers.StackedBRNN._forward_padded", "layers.StackedBRNN._forward_unpadded"], "methods", ["home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.layers.StackedBRNN._forward_unpadded", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.layers.StackedBRNN._forward_padded", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.layers.StackedBRNN._forward_unpadded"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "x_mask", ")", ":", "\n", "        ", "\"\"\"Encode either padded or non-padded sequences.\n\n        Can choose to either handle or ignore variable length sequences.\n        Always handle padding in eval.\n\n        Args:\n            x: batch * len * hdim\n            x_mask: batch * len (1 for padding, 0 for true)\n        Output:\n            x_encoded: batch * len * hdim_encoded\n        \"\"\"", "\n", "if", "x_mask", ".", "data", ".", "sum", "(", ")", "==", "0", ":", "\n", "# No padding necessary.", "\n", "            ", "output", "=", "self", ".", "_forward_unpadded", "(", "x", ",", "x_mask", ")", "\n", "", "elif", "self", ".", "padding", "or", "not", "self", ".", "training", ":", "\n", "# Pad if we care or if its during eval.", "\n", "            ", "output", "=", "self", ".", "_forward_padded", "(", "x", ",", "x_mask", ")", "\n", "", "else", ":", "\n", "# We don't care.", "\n", "            ", "output", "=", "self", ".", "_forward_unpadded", "(", "x", ",", "x_mask", ")", "\n", "\n", "", "return", "output", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.layers.StackedBRNN._forward_unpadded": [[56, 90], ["x.transpose.transpose.transpose", "range", "torch.dropout.transpose", "outputs.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout"], "methods", ["None"], ["", "def", "_forward_unpadded", "(", "self", ",", "x", ",", "x_mask", ")", ":", "\n", "        ", "\"\"\"Faster encoding that ignores any padding.\"\"\"", "\n", "# Transpose batch and sequence dims", "\n", "x", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "# Encode all layers", "\n", "outputs", "=", "[", "x", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "rnn_input", "=", "outputs", "[", "-", "1", "]", "\n", "\n", "# Apply dropout to hidden input", "\n", "if", "i", ">", "0", "and", "self", ".", "dropout_rate", ">", "0", ":", "\n", "                ", "rnn_input", "=", "F", ".", "dropout", "(", "rnn_input", ",", "\n", "p", "=", "self", ".", "dropout_rate", ",", "\n", "training", "=", "self", ".", "training", ")", "\n", "# Forward", "\n", "", "rnn_output", "=", "self", ".", "rnns", "[", "i", "]", "(", "rnn_input", ")", "[", "0", "]", "\n", "outputs", ".", "append", "(", "rnn_output", ")", "\n", "\n", "# Concat hidden layers", "\n", "", "if", "self", ".", "concat_layers", ":", "\n", "            ", "output", "=", "torch", ".", "cat", "(", "outputs", "[", "1", ":", "]", ",", "2", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "outputs", "[", "-", "1", "]", "\n", "\n", "# Transpose back", "\n", "", "output", "=", "output", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "# Dropout on output layer", "\n", "if", "self", ".", "dropout_output", "and", "self", ".", "dropout_rate", ">", "0", ":", "\n", "            ", "output", "=", "F", ".", "dropout", "(", "output", ",", "\n", "p", "=", "self", ".", "dropout_rate", ",", "\n", "training", "=", "self", ".", "training", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.layers.StackedBRNN._forward_padded": [[91, 154], ["x_mask.data.eq().long().sum().squeeze", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "list", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "x.transpose.transpose.index_select", "x.transpose.transpose.transpose", "torch.utils.rnn.pack_padded_sequence", "torch.utils.rnn.pack_padded_sequence", "torch.utils.rnn.pack_padded_sequence", "range", "enumerate", "torch.dropout.transpose", "torch.dropout.index_select", "outputs.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.dropout.size", "x_mask.size", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.dropout", "torch.dropout", "torch.dropout", "x_mask.data.eq().long().sum", "torch.dropout", "torch.dropout", "torch.dropout", "torch.utils.rnn.PackedSequence", "torch.utils.rnn.PackedSequence", "torch.utils.rnn.PackedSequence", "torch.utils.rnn.pad_packed_sequence", "torch.utils.rnn.pad_packed_sequence", "torch.utils.rnn.pad_packed_sequence", "torch.dropout.data.type", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "x_mask.data.eq().long", "torch.dropout.size", "torch.dropout.size", "x_mask.size", "torch.dropout.size", "x_mask.data.eq"], "methods", ["None"], ["", "def", "_forward_padded", "(", "self", ",", "x", ",", "x_mask", ")", ":", "\n", "        ", "\"\"\"Slower (significantly), but more precise, encoding that handles\n        padding.\n        \"\"\"", "\n", "# Compute sorted sequence lengths", "\n", "lengths", "=", "x_mask", ".", "data", ".", "eq", "(", "0", ")", ".", "long", "(", ")", ".", "sum", "(", "1", ")", ".", "squeeze", "(", ")", "\n", "_", ",", "idx_sort", "=", "torch", ".", "sort", "(", "lengths", ",", "dim", "=", "0", ",", "descending", "=", "True", ")", "\n", "_", ",", "idx_unsort", "=", "torch", ".", "sort", "(", "idx_sort", ",", "dim", "=", "0", ")", "\n", "\n", "lengths", "=", "list", "(", "lengths", "[", "idx_sort", "]", ")", "\n", "idx_sort", "=", "Variable", "(", "idx_sort", ")", "\n", "idx_unsort", "=", "Variable", "(", "idx_unsort", ")", "\n", "\n", "# Sort x", "\n", "x", "=", "x", ".", "index_select", "(", "0", ",", "idx_sort", ")", "\n", "\n", "# Transpose batch and sequence dims", "\n", "x", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "# Pack it up", "\n", "rnn_input", "=", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "x", ",", "lengths", ")", "\n", "\n", "# Encode all layers", "\n", "outputs", "=", "[", "rnn_input", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "rnn_input", "=", "outputs", "[", "-", "1", "]", "\n", "\n", "# Apply dropout to input", "\n", "if", "i", ">", "0", "and", "self", ".", "dropout_rate", ">", "0", ":", "\n", "                ", "dropout_input", "=", "F", ".", "dropout", "(", "rnn_input", ".", "data", ",", "\n", "p", "=", "self", ".", "dropout_rate", ",", "\n", "training", "=", "self", ".", "training", ")", "\n", "rnn_input", "=", "nn", ".", "utils", ".", "rnn", ".", "PackedSequence", "(", "dropout_input", ",", "\n", "rnn_input", ".", "batch_sizes", ")", "\n", "", "outputs", ".", "append", "(", "self", ".", "rnns", "[", "i", "]", "(", "rnn_input", ")", "[", "0", "]", ")", "\n", "\n", "# Unpack everything", "\n", "", "for", "i", ",", "o", "in", "enumerate", "(", "outputs", "[", "1", ":", "]", ",", "1", ")", ":", "\n", "            ", "outputs", "[", "i", "]", "=", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "o", ")", "[", "0", "]", "\n", "\n", "# Concat hidden layers or take final", "\n", "", "if", "self", ".", "concat_layers", ":", "\n", "            ", "output", "=", "torch", ".", "cat", "(", "outputs", "[", "1", ":", "]", ",", "2", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "outputs", "[", "-", "1", "]", "\n", "\n", "# Transpose and unsort", "\n", "", "output", "=", "output", ".", "transpose", "(", "0", ",", "1", ")", "\n", "output", "=", "output", ".", "index_select", "(", "0", ",", "idx_unsort", ")", "\n", "\n", "# Pad up to original batch sequence length", "\n", "if", "output", ".", "size", "(", "1", ")", "!=", "x_mask", ".", "size", "(", "1", ")", ":", "\n", "            ", "padding", "=", "torch", ".", "zeros", "(", "output", ".", "size", "(", "0", ")", ",", "\n", "x_mask", ".", "size", "(", "1", ")", "-", "output", ".", "size", "(", "1", ")", ",", "\n", "output", ".", "size", "(", "2", ")", ")", ".", "type", "(", "output", ".", "data", ".", "type", "(", ")", ")", "\n", "output", "=", "torch", ".", "cat", "(", "[", "output", ",", "Variable", "(", "padding", ")", "]", ",", "1", ")", "\n", "\n", "# Dropout on output layer", "\n", "", "if", "self", ".", "dropout_output", "and", "self", ".", "dropout_rate", ">", "0", ":", "\n", "            ", "output", "=", "F", ".", "dropout", "(", "output", ",", "\n", "p", "=", "self", ".", "dropout_rate", ",", "\n", "training", "=", "self", ".", "training", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.layers.SeqAttnMatch.__init__": [[163, 169], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.Dictionary.__init__"], ["def", "__init__", "(", "self", ",", "input_size", ",", "identity", "=", "False", ")", ":", "\n", "        ", "super", "(", "SeqAttnMatch", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "not", "identity", ":", "\n", "            ", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "input_size", ",", "input_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "linear", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.layers.SeqAttnMatch.forward": [[170, 203], ["torch.relu.bmm", "y_mask.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "F.relu.bmm.data.masked_fill_", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax.view", "F.softmax.view.bmm", "layers.SeqAttnMatch.linear().view", "torch.relu", "torch.relu", "torch.relu", "layers.SeqAttnMatch.linear().view", "torch.relu", "torch.relu", "torch.relu", "torch.relu.transpose", "F.relu.bmm.size", "F.relu.bmm.view", "x.size", "y.size", "x.size", "y.size", "y_mask.unsqueeze().expand.unsqueeze().expand.unsqueeze", "float", "y.size", "layers.SeqAttnMatch.linear", "layers.SeqAttnMatch.linear", "x.view", "y.view", "x.size", "y.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "y_mask", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            x: batch * len1 * hdim\n            y: batch * len2 * hdim\n            y_mask: batch * len2 (1 for padding, 0 for true)\n        Output:\n            matched_seq: batch * len1 * hdim\n        \"\"\"", "\n", "# Project vectors", "\n", "if", "self", ".", "linear", ":", "\n", "            ", "x_proj", "=", "self", ".", "linear", "(", "x", ".", "view", "(", "-", "1", ",", "x", ".", "size", "(", "2", ")", ")", ")", ".", "view", "(", "x", ".", "size", "(", ")", ")", "\n", "x_proj", "=", "F", ".", "relu", "(", "x_proj", ")", "\n", "y_proj", "=", "self", ".", "linear", "(", "y", ".", "view", "(", "-", "1", ",", "y", ".", "size", "(", "2", ")", ")", ")", ".", "view", "(", "y", ".", "size", "(", ")", ")", "\n", "y_proj", "=", "F", ".", "relu", "(", "y_proj", ")", "\n", "", "else", ":", "\n", "            ", "x_proj", "=", "x", "\n", "y_proj", "=", "y", "\n", "\n", "# Compute scores", "\n", "", "scores", "=", "x_proj", ".", "bmm", "(", "y_proj", ".", "transpose", "(", "2", ",", "1", ")", ")", "\n", "\n", "# Mask padding", "\n", "y_mask", "=", "y_mask", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "scores", ".", "size", "(", ")", ")", "\n", "scores", ".", "data", ".", "masked_fill_", "(", "y_mask", ".", "data", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "\n", "# Normalize with softmax", "\n", "alpha_flat", "=", "F", ".", "softmax", "(", "scores", ".", "view", "(", "-", "1", ",", "y", ".", "size", "(", "1", ")", ")", ")", "\n", "alpha", "=", "alpha_flat", ".", "view", "(", "-", "1", ",", "x", ".", "size", "(", "1", ")", ",", "y", ".", "size", "(", "1", ")", ")", "\n", "\n", "# Take weighted average", "\n", "matched_seq", "=", "alpha", ".", "bmm", "(", "y", ")", "\n", "return", "matched_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.layers.BilinearSeqAttn.__init__": [[213, 222], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.Dictionary.__init__"], ["def", "__init__", "(", "self", ",", "x_size", ",", "y_size", ",", "identity", "=", "False", ",", "normalize", "=", "True", ")", ":", "\n", "        ", "super", "(", "BilinearSeqAttn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "normalize", "=", "normalize", "\n", "\n", "# If identity is true, we just use a dot product without transformation.", "\n", "if", "not", "identity", ":", "\n", "            ", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "y_size", ",", "x_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "linear", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.layers.BilinearSeqAttn.forward": [[223, 240], ["x.bmm().squeeze", "x.bmm().squeeze.data.masked_fill_", "layers.BilinearSeqAttn.linear", "torch.softmax", "torch.softmax", "torch.softmax", "x.bmm().squeeze.exp", "x.bmm", "float", "Wy.unsqueeze"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "x_mask", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            x: batch * len * hdim1\n            y: batch * hdim2\n            x_mask: batch * len (1 for padding, 0 for true)\n        Output:\n            alpha = batch * len\n        \"\"\"", "\n", "Wy", "=", "self", ".", "linear", "(", "y", ")", "if", "self", ".", "linear", "is", "not", "None", "else", "y", "\n", "xWy", "=", "x", ".", "bmm", "(", "Wy", ".", "unsqueeze", "(", "2", ")", ")", ".", "squeeze", "(", "2", ")", "\n", "xWy", ".", "data", ".", "masked_fill_", "(", "x_mask", ".", "data", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "if", "self", ".", "normalize", ":", "\n", "            ", "alpha", "=", "F", ".", "softmax", "(", "xWy", ")", "\n", "", "else", ":", "\n", "            ", "alpha", "=", "xWy", ".", "exp", "(", ")", "\n", "", "return", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.layers.LinearSeqAttn.__init__": [[248, 251], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.Dictionary.__init__"], ["def", "__init__", "(", "self", ",", "input_size", ")", ":", "\n", "        ", "super", "(", "LinearSeqAttn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "input_size", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.layers.LinearSeqAttn.forward": [[252, 265], ["x.view", "layers.LinearSeqAttn.linear().view", "layers.LinearSeqAttn.data.masked_fill_", "torch.softmax", "torch.softmax", "torch.softmax", "x.size", "x.size", "x.size", "layers.LinearSeqAttn.linear", "float"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "x_mask", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            x: batch * len * hdim\n            x_mask: batch * len (1 for padding, 0 for true)\n        Output:\n            alpha: batch * len\n        \"\"\"", "\n", "x_flat", "=", "x", ".", "view", "(", "-", "1", ",", "x", ".", "size", "(", "-", "1", ")", ")", "\n", "scores", "=", "self", ".", "linear", "(", "x_flat", ")", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ")", "\n", "scores", ".", "data", ".", "masked_fill_", "(", "x_mask", ".", "data", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "alpha", "=", "F", ".", "softmax", "(", "scores", ")", "\n", "return", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.layers.uniform_weights": [[272, 287], ["torch.autograd.Variable", "torch.ones", "torch.ones", "torch.ones", "alpha.cuda.cuda", "x_mask.eq().float", "alpha.cuda.sum().expand", "x.size", "x.size", "alpha.cuda.size", "x_mask.eq", "alpha.cuda.sum"], "function", ["None"], ["", "", "def", "uniform_weights", "(", "x", ",", "x_mask", ")", ":", "\n", "    ", "\"\"\"Return uniform weights over non-masked x (a sequence of vectors).\n\n    Args:\n        x: batch * len * hdim\n        x_mask: batch * len (1 for padding, 0 for true)\n    Output:\n        x_avg: batch * hdim\n    \"\"\"", "\n", "alpha", "=", "Variable", "(", "torch", ".", "ones", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ")", ")", "\n", "if", "x", ".", "data", ".", "is_cuda", ":", "\n", "        ", "alpha", "=", "alpha", ".", "cuda", "(", ")", "\n", "", "alpha", "=", "alpha", "*", "x_mask", ".", "eq", "(", "0", ")", ".", "float", "(", ")", "\n", "alpha", "=", "alpha", "/", "alpha", ".", "sum", "(", "1", ")", ".", "expand", "(", "alpha", ".", "size", "(", ")", ")", "\n", "return", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.layers.weighted_avg": [[289, 299], ["weights.unsqueeze().bmm().squeeze", "weights.unsqueeze().bmm", "weights.unsqueeze"], "function", ["None"], ["", "def", "weighted_avg", "(", "x", ",", "weights", ")", ":", "\n", "    ", "\"\"\"Return a weighted average of x (a sequence of vectors).\n\n    Args:\n        x: batch * len * hdim\n        weights: batch * len, sum(dim = 1) = 1\n    Output:\n        x_avg: batch * hdim\n    \"\"\"", "\n", "return", "weights", ".", "unsqueeze", "(", "1", ")", ".", "bmm", "(", "x", ")", ".", "squeeze", "(", "1", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.conceptnet.ConceptNet.__init__": [[5, 18], ["open", "print", "triple.split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path", "=", "'./data/concept.filter'", ")", ":", "\n", "        ", "self", ".", "data", "=", "{", "}", "\n", "cnt", "=", "0", "\n", "for", "triple", "in", "open", "(", "path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", ":", "\n", "            ", "r", ",", "arg1", ",", "arg2", "=", "triple", ".", "split", "(", ")", "\n", "if", "not", "arg1", "in", "self", ".", "data", ":", "\n", "                ", "self", ".", "data", "[", "arg1", "]", "=", "{", "}", "\n", "", "self", ".", "data", "[", "arg1", "]", "[", "arg2", "]", "=", "r", "\n", "if", "not", "arg2", "in", "self", ".", "data", ":", "\n", "                ", "self", ".", "data", "[", "arg2", "]", "=", "{", "}", "\n", "", "self", ".", "data", "[", "arg2", "]", "[", "arg1", "]", "=", "r", "\n", "cnt", "+=", "1", "\n", "", "print", "(", "'Load %d triples from %s'", "%", "(", "cnt", ",", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.conceptnet.ConceptNet.get_relation": [[19, 27], ["conceptnet.ConceptNet.data[].get", "utils.is_stopword", "utils.is_stopword", "w1.lower().split", "w2.lower().split", "w1.lower", "w2.lower"], "methods", ["home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.is_stopword", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.is_stopword"], ["", "def", "get_relation", "(", "self", ",", "w1", ",", "w2", ")", ":", "\n", "        ", "if", "is_stopword", "(", "w1", ")", "or", "is_stopword", "(", "w2", ")", ":", "\n", "            ", "return", "'<NULL>'", "\n", "", "w1", "=", "'_'", ".", "join", "(", "w1", ".", "lower", "(", ")", ".", "split", "(", ")", ")", "\n", "w2", "=", "'_'", ".", "join", "(", "w2", ".", "lower", "(", ")", ".", "split", "(", ")", ")", "\n", "if", "not", "w1", "in", "self", ".", "data", ":", "\n", "            ", "return", "'<NULL>'", "\n", "", "return", "self", ".", "data", "[", "w1", "]", ".", "get", "(", "w2", ",", "'<NULL>'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.conceptnet.ConceptNet.p_q_relation": [[28, 45], ["set", "range", "w.lower", "w.lower", "set", "set", "len", "conceptnet.ConceptNet.get_relation", "conceptnet.ConceptNet.get_relation", "range", "utils.is_stopword", "len"], "methods", ["home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.conceptnet.ConceptNet.get_relation", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.conceptnet.ConceptNet.get_relation", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.is_stopword"], ["", "def", "p_q_relation", "(", "self", ",", "passage", ",", "query", ")", ":", "\n", "        ", "passage", "=", "[", "w", ".", "lower", "(", ")", "for", "w", "in", "passage", "]", "\n", "query", "=", "[", "w", ".", "lower", "(", ")", "for", "w", "in", "query", "]", "\n", "query", "=", "set", "(", "query", ")", "|", "set", "(", "[", "' '", ".", "join", "(", "query", "[", "i", ":", "(", "i", "+", "2", ")", "]", ")", "for", "i", "in", "range", "(", "len", "(", "query", ")", ")", "]", ")", "\n", "query", "=", "set", "(", "[", "q", "for", "q", "in", "query", "if", "not", "is_stopword", "(", "q", ")", "]", ")", "\n", "ret", "=", "[", "'<NULL>'", "for", "_", "in", "passage", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "passage", ")", ")", ":", "\n", "            ", "for", "q", "in", "query", ":", "\n", "                ", "r", "=", "self", ".", "get_relation", "(", "passage", "[", "i", "]", ",", "q", ")", "\n", "if", "r", "!=", "'<NULL>'", ":", "\n", "                    ", "ret", "[", "i", "]", "=", "r", "\n", "break", "\n", "", "r", "=", "self", ".", "get_relation", "(", "' '", ".", "join", "(", "passage", "[", "i", ":", "(", "i", "+", "2", ")", "]", ")", ",", "q", ")", "\n", "if", "r", "!=", "'<NULL>'", ":", "\n", "                    ", "ret", "[", "i", "]", "=", "r", "\n", "break", "\n", "", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.preprocess.Tokens.__init__": [[21, 25], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data", ",", "annotators", ",", "opts", "=", "None", ")", ":", "\n", "        ", "self", ".", "data", "=", "data", "\n", "self", ".", "annotators", "=", "annotators", "\n", "self", ".", "opts", "=", "opts", "or", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.preprocess.Tokens.__len__": [[26, 29], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"The number of tokens.\"\"\"", "\n", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.preprocess.Tokens.slice": [[30, 35], ["copy.copy"], "methods", ["None"], ["", "def", "slice", "(", "self", ",", "i", "=", "None", ",", "j", "=", "None", ")", ":", "\n", "        ", "\"\"\"Return a view of the list of tokens from [i, j).\"\"\"", "\n", "new_tokens", "=", "copy", ".", "copy", "(", "self", ")", "\n", "new_tokens", ".", "data", "=", "self", ".", "data", "[", "i", ":", "j", "]", "\n", "return", "new_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.preprocess.Tokens.untokenize": [[36, 39], ["None"], "methods", ["None"], ["", "def", "untokenize", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the original text (with whitespace reinserted).\"\"\"", "\n", "return", "''", ".", "join", "(", "[", "t", "[", "self", ".", "TEXT_WS", "]", "for", "t", "in", "self", ".", "data", "]", ")", ".", "strip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.preprocess.Tokens.words": [[40, 50], ["t[].lower"], "methods", ["None"], ["", "def", "words", "(", "self", ",", "uncased", "=", "False", ")", ":", "\n", "        ", "\"\"\"Returns a list of the text of each token\n\n        Args:\n            uncased: lower cases text\n        \"\"\"", "\n", "if", "uncased", ":", "\n", "            ", "return", "[", "t", "[", "self", ".", "TEXT", "]", ".", "lower", "(", ")", "for", "t", "in", "self", ".", "data", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "t", "[", "self", ".", "TEXT", "]", "for", "t", "in", "self", ".", "data", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.preprocess.Tokens.offsets": [[51, 54], ["None"], "methods", ["None"], ["", "", "def", "offsets", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns a list of [start, end) character offsets of each token.\"\"\"", "\n", "return", "[", "t", "[", "self", ".", "SPAN", "]", "for", "t", "in", "self", ".", "data", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.preprocess.Tokens.pos": [[55, 62], ["None"], "methods", ["None"], ["", "def", "pos", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns a list of part-of-speech tags of each token.\n        Returns None if this annotation was not included.\n        \"\"\"", "\n", "if", "'pos'", "not", "in", "self", ".", "annotators", ":", "\n", "            ", "return", "None", "\n", "", "return", "[", "t", "[", "self", ".", "POS", "]", "for", "t", "in", "self", ".", "data", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.preprocess.Tokens.lemmas": [[63, 70], ["None"], "methods", ["None"], ["", "def", "lemmas", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns a list of the lemmatized text of each token.\n        Returns None if this annotation was not included.\n        \"\"\"", "\n", "if", "'lemma'", "not", "in", "self", ".", "annotators", ":", "\n", "            ", "return", "None", "\n", "", "return", "[", "t", "[", "self", ".", "LEMMA", "]", "for", "t", "in", "self", ".", "data", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.preprocess.Tokens.entities": [[71, 78], ["None"], "methods", ["None"], ["", "def", "entities", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns a list of named-entity-recognition tags of each token.\n        Returns None if this annotation was not included.\n        \"\"\"", "\n", "if", "'ner'", "not", "in", "self", ".", "annotators", ":", "\n", "            ", "return", "None", "\n", "", "return", "[", "t", "[", "self", ".", "NER", "]", "for", "t", "in", "self", ".", "data", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.preprocess.Tokens.ngrams": [[79, 105], ["preprocess.Tokens.words", "filter_fn", "range", "range", "len", "min", "preprocess.Tokens.ngrams._skip"], "methods", ["home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.preprocess.Tokens.words"], ["", "def", "ngrams", "(", "self", ",", "n", "=", "1", ",", "uncased", "=", "False", ",", "filter_fn", "=", "None", ",", "as_strings", "=", "True", ")", ":", "\n", "        ", "\"\"\"Returns a list of all ngrams from length 1 to n.\n\n        Args:\n            n: upper limit of ngram length\n            uncased: lower cases text\n            filter_fn: user function that takes in an ngram list and returns\n              True or False to keep or not keep the ngram\n            as_string: return the ngram as a string vs list\n        \"\"\"", "\n", "def", "_skip", "(", "gram", ")", ":", "\n", "            ", "if", "not", "filter_fn", ":", "\n", "                ", "return", "False", "\n", "", "return", "filter_fn", "(", "gram", ")", "\n", "\n", "", "words", "=", "self", ".", "words", "(", "uncased", ")", "\n", "ngrams", "=", "[", "(", "s", ",", "e", "+", "1", ")", "\n", "for", "s", "in", "range", "(", "len", "(", "words", ")", ")", "\n", "for", "e", "in", "range", "(", "s", ",", "min", "(", "s", "+", "n", ",", "len", "(", "words", ")", ")", ")", "\n", "if", "not", "_skip", "(", "words", "[", "s", ":", "e", "+", "1", "]", ")", "]", "\n", "\n", "# Concatenate into strings", "\n", "if", "as_strings", ":", "\n", "            ", "ngrams", "=", "[", "'{}'", ".", "format", "(", "' '", ".", "join", "(", "words", "[", "s", ":", "e", "]", ")", ")", "for", "(", "s", ",", "e", ")", "in", "ngrams", "]", "\n", "\n", "", "return", "ngrams", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.preprocess.Tokens.entity_groups": [[106, 126], ["preprocess.Tokens.entities", "preprocess.Tokens.opts.get", "len", "groups.append", "len", "preprocess.Tokens.slice().untokenize", "preprocess.Tokens.slice"], "methods", ["home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.preprocess.Tokens.entities", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.preprocess.Tokens.untokenize", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.preprocess.Tokens.slice"], ["", "def", "entity_groups", "(", "self", ")", ":", "\n", "        ", "\"\"\"Group consecutive entity tokens with the same NER tag.\"\"\"", "\n", "entities", "=", "self", ".", "entities", "(", ")", "\n", "if", "not", "entities", ":", "\n", "            ", "return", "None", "\n", "", "non_ent", "=", "self", ".", "opts", ".", "get", "(", "'non_ent'", ",", "'O'", ")", "\n", "groups", "=", "[", "]", "\n", "idx", "=", "0", "\n", "while", "idx", "<", "len", "(", "entities", ")", ":", "\n", "            ", "ner_tag", "=", "entities", "[", "idx", "]", "\n", "# Check for entity tag", "\n", "if", "ner_tag", "!=", "non_ent", ":", "\n", "# Chomp the sequence", "\n", "                ", "start", "=", "idx", "\n", "while", "(", "idx", "<", "len", "(", "entities", ")", "and", "entities", "[", "idx", "]", "==", "ner_tag", ")", ":", "\n", "                    ", "idx", "+=", "1", "\n", "", "groups", ".", "append", "(", "(", "self", ".", "slice", "(", "start", ",", "idx", ")", ".", "untokenize", "(", ")", ",", "ner_tag", ")", ")", "\n", "", "else", ":", "\n", "                ", "idx", "+=", "1", "\n", "", "", "return", "groups", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.preprocess.SpacyTokenizer.__init__": [[129, 143], ["kwargs.get", "copy.deepcopy", "spacy.load", "kwargs.get", "set"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            annotators: set that can include pos, lemma, and ner.\n            model: spaCy model to use (either path, or keyword like 'en').\n        \"\"\"", "\n", "model", "=", "kwargs", ".", "get", "(", "'model'", ",", "'en'", ")", "\n", "self", ".", "annotators", "=", "copy", ".", "deepcopy", "(", "kwargs", ".", "get", "(", "'annotators'", ",", "set", "(", ")", ")", ")", "\n", "nlp_kwargs", "=", "{", "'parser'", ":", "False", "}", "\n", "if", "not", "{", "'lemma'", ",", "'pos'", ",", "'ner'", "}", "&", "self", ".", "annotators", ":", "\n", "            ", "nlp_kwargs", "[", "'tagger'", "]", "=", "False", "\n", "", "if", "not", "{", "'ner'", "}", "&", "self", ".", "annotators", ":", "\n", "            ", "nlp_kwargs", "[", "'entity'", "]", "=", "False", "\n", "", "self", ".", "nlp", "=", "spacy", ".", "load", "(", "model", ",", "**", "nlp_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.preprocess.SpacyTokenizer.tokenize": [[144, 176], ["text.replace().replace().replace().strip", "preprocess.SpacyTokenizer.nlp.tokenizer", "range", "preprocess.Tokens", "text.replace().replace().replace().strip.find", "preprocess.SpacyTokenizer.nlp.tagger", "preprocess.SpacyTokenizer.nlp.entity", "len", "data.append", "text.replace().replace().replace", "text.replace().replace().replace().strip.split", "len", "len", "text.replace().replace", "len", "text.replace"], "methods", ["None"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "# We don't treat new lines as tokens.", "\n", "        ", "clean_text", "=", "text", ".", "replace", "(", "'\\n'", ",", "' '", ")", ".", "replace", "(", "'\\t'", ",", "' '", ")", ".", "replace", "(", "'/'", ",", "' / '", ")", ".", "strip", "(", ")", "\n", "# remove consecutive spaces", "\n", "if", "clean_text", ".", "find", "(", "'  '", ")", ">=", "0", ":", "\n", "            ", "clean_text", "=", "' '", ".", "join", "(", "clean_text", ".", "split", "(", ")", ")", "\n", "", "tokens", "=", "self", ".", "nlp", ".", "tokenizer", "(", "clean_text", ")", "\n", "if", "{", "'lemma'", ",", "'pos'", ",", "'ner'", "}", "&", "self", ".", "annotators", ":", "\n", "            ", "self", ".", "nlp", ".", "tagger", "(", "tokens", ")", "\n", "", "if", "{", "'ner'", "}", "&", "self", ".", "annotators", ":", "\n", "            ", "self", ".", "nlp", ".", "entity", "(", "tokens", ")", "\n", "\n", "", "data", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "tokens", ")", ")", ":", "\n", "# Get whitespace", "\n", "            ", "start_ws", "=", "tokens", "[", "i", "]", ".", "idx", "\n", "if", "i", "+", "1", "<", "len", "(", "tokens", ")", ":", "\n", "                ", "end_ws", "=", "tokens", "[", "i", "+", "1", "]", ".", "idx", "\n", "", "else", ":", "\n", "                ", "end_ws", "=", "tokens", "[", "i", "]", ".", "idx", "+", "len", "(", "tokens", "[", "i", "]", ".", "text", ")", "\n", "\n", "", "data", ".", "append", "(", "(", "\n", "tokens", "[", "i", "]", ".", "text", ",", "\n", "text", "[", "start_ws", ":", "end_ws", "]", ",", "\n", "(", "tokens", "[", "i", "]", ".", "idx", ",", "tokens", "[", "i", "]", ".", "idx", "+", "len", "(", "tokens", "[", "i", "]", ".", "text", ")", ")", ",", "\n", "tokens", "[", "i", "]", ".", "tag_", ",", "\n", "tokens", "[", "i", "]", ".", "lemma_", ",", "\n", "tokens", "[", "i", "]", ".", "ent_type_", ",", "\n", ")", ")", "\n", "\n", "# Set special option for non-entity tag: '' vs 'O' in spaCy", "\n", "", "return", "Tokens", "(", "data", ",", "self", ".", "annotators", ",", "opts", "=", "{", "'non_ent'", ":", "''", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.preprocess.init_tokenizer": [[180, 183], ["preprocess.SpacyTokenizer"], "function", ["None"], ["def", "init_tokenizer", "(", ")", ":", "\n", "    ", "global", "TOK", "\n", "TOK", "=", "SpacyTokenizer", "(", "annotators", "=", "{", "'pos'", ",", "'lemma'", ",", "'ner'", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.preprocess.replace_digits": [[187, 190], ["None"], "function", ["None"], ["def", "replace_digits", "(", "words", ")", ":", "\n", "    ", "global", "digits2w", "\n", "return", "[", "digits2w", "[", "w", "]", "if", "w", "in", "digits2w", "else", "w", "for", "w", "in", "words", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.preprocess.tokenize": [[191, 203], ["TOK.tokenize", "preprocess.replace_digits", "TOK.tokenize.offsets", "TOK.tokenize.pos", "TOK.tokenize.lemmas", "TOK.tokenize.entities", "TOK.tokenize.words"], "function", ["home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.preprocess.tokenize", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.preprocess.replace_digits", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.preprocess.Tokens.offsets", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.preprocess.Tokens.pos", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.preprocess.Tokens.lemmas", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.preprocess.Tokens.entities", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.preprocess.Tokens.words"], ["", "def", "tokenize", "(", "text", ")", ":", "\n", "    ", "\"\"\"Call the global process tokenizer on the input text.\"\"\"", "\n", "global", "TOK", "\n", "tokens", "=", "TOK", ".", "tokenize", "(", "text", ")", "\n", "output", "=", "{", "\n", "'words'", ":", "replace_digits", "(", "tokens", ".", "words", "(", ")", ")", ",", "\n", "'offsets'", ":", "tokens", ".", "offsets", "(", ")", ",", "\n", "'pos'", ":", "tokens", ".", "pos", "(", ")", ",", "\n", "'lemma'", ":", "tokens", ".", "lemmas", "(", ")", ",", "\n", "'ner'", ":", "tokens", ".", "entities", "(", ")", ",", "\n", "}", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.preprocess.compute_features": [[205, 233], ["set", "set", "set", "set", "collections.Counter", "concept_net.p_q_relation", "concept_net.p_q_relation", "int", "int", "int", "int", "float", "filter", "w.lower", "w.lower", "w.lower", "w.lower", "math.log", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "w.lower", "utils.is_stopword", "utils.is_punc", "w.lower", "utils.is_stopword", "utils.is_punc", "w.lower", "utils.is_stopword", "utils.is_punc", "w.lower", "utils.is_stopword", "utils.is_punc", "wikiwords.freq", "utils.is_stopword", "utils.is_punc", "w.lower"], "function", ["home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.conceptnet.ConceptNet.p_q_relation", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.conceptnet.ConceptNet.p_q_relation", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.is_stopword", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.is_punc", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.is_stopword", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.is_punc", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.is_stopword", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.is_punc", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.is_stopword", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.is_punc", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.is_stopword", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.is_punc"], ["def", "compute_features", "(", "d_dict", ",", "q_dict", ",", "c_dict", ")", ":", "\n", "# in_q, in_c, lemma_in_q, lemma_in_c, tf", "\n", "    ", "q_words_set", "=", "set", "(", "[", "w", ".", "lower", "(", ")", "for", "w", "in", "q_dict", "[", "'words'", "]", "]", ")", "\n", "in_q", "=", "[", "int", "(", "w", ".", "lower", "(", ")", "in", "q_words_set", "and", "not", "is_stopword", "(", "w", ")", "and", "not", "is_punc", "(", "w", ")", ")", "for", "w", "in", "d_dict", "[", "'words'", "]", "]", "\n", "c_words_set", "=", "set", "(", "[", "w", ".", "lower", "(", ")", "for", "w", "in", "c_dict", "[", "'words'", "]", "]", ")", "\n", "in_c", "=", "[", "int", "(", "w", ".", "lower", "(", ")", "in", "c_words_set", "and", "not", "is_stopword", "(", "w", ")", "and", "not", "is_punc", "(", "w", ")", ")", "for", "w", "in", "d_dict", "[", "'words'", "]", "]", "\n", "\n", "q_words_set", "=", "set", "(", "[", "w", ".", "lower", "(", ")", "for", "w", "in", "q_dict", "[", "'lemma'", "]", "]", ")", "\n", "lemma_in_q", "=", "[", "int", "(", "w", ".", "lower", "(", ")", "in", "q_words_set", "and", "not", "is_stopword", "(", "w", ")", "and", "not", "is_punc", "(", "w", ")", ")", "for", "w", "in", "d_dict", "[", "'lemma'", "]", "]", "\n", "c_words_set", "=", "set", "(", "[", "w", ".", "lower", "(", ")", "for", "w", "in", "c_dict", "[", "'lemma'", "]", "]", ")", "\n", "lemma_in_c", "=", "[", "int", "(", "w", ".", "lower", "(", ")", "in", "c_words_set", "and", "not", "is_stopword", "(", "w", ")", "and", "not", "is_punc", "(", "w", ")", ")", "for", "w", "in", "d_dict", "[", "'lemma'", "]", "]", "\n", "\n", "tf", "=", "[", "0.1", "*", "math", ".", "log", "(", "wikiwords", ".", "N", "*", "wikiwords", ".", "freq", "(", "w", ".", "lower", "(", ")", ")", "+", "10", ")", "for", "w", "in", "d_dict", "[", "'words'", "]", "]", "\n", "tf", "=", "[", "float", "(", "'%.2f'", "%", "v", ")", "for", "v", "in", "tf", "]", "\n", "d_words", "=", "Counter", "(", "filter", "(", "lambda", "w", ":", "not", "is_stopword", "(", "w", ")", "and", "not", "is_punc", "(", "w", ")", ",", "d_dict", "[", "'words'", "]", ")", ")", "\n", "from", "conceptnet", "import", "concept_net", "\n", "p_q_relation", "=", "concept_net", ".", "p_q_relation", "(", "d_dict", "[", "'words'", "]", ",", "q_dict", "[", "'words'", "]", ")", "\n", "p_c_relation", "=", "concept_net", ".", "p_q_relation", "(", "d_dict", "[", "'words'", "]", ",", "c_dict", "[", "'words'", "]", ")", "\n", "assert", "len", "(", "in_q", ")", "==", "len", "(", "in_c", ")", "and", "len", "(", "lemma_in_q", ")", "==", "len", "(", "in_q", ")", "and", "len", "(", "lemma_in_c", ")", "==", "len", "(", "in_q", ")", "and", "len", "(", "tf", ")", "==", "len", "(", "in_q", ")", "\n", "assert", "len", "(", "tf", ")", "==", "len", "(", "p_q_relation", ")", "and", "len", "(", "tf", ")", "==", "len", "(", "p_c_relation", ")", "\n", "return", "{", "\n", "'in_q'", ":", "in_q", ",", "\n", "'in_c'", ":", "in_c", ",", "\n", "'lemma_in_q'", ":", "lemma_in_q", ",", "\n", "'lemma_in_c'", ":", "lemma_in_c", ",", "\n", "'tf'", ":", "tf", ",", "\n", "'p_q_relation'", ":", "p_q_relation", ",", "\n", "'p_c_relation'", ":", "p_c_relation", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.preprocess.get_example": [[235, 245], ["None"], "function", ["None"], ["", "def", "get_example", "(", "d_id", ",", "q_id", ",", "c_id", ",", "d_dict", ",", "q_dict", ",", "c_dict", ",", "label", ")", ":", "\n", "    ", "return", "{", "\n", "'id'", ":", "d_id", "+", "'_'", "+", "q_id", "+", "'_'", "+", "c_id", ",", "\n", "'d_words'", ":", "' '", ".", "join", "(", "d_dict", "[", "'words'", "]", ")", ",", "\n", "'d_pos'", ":", "d_dict", "[", "'pos'", "]", ",", "\n", "'d_ner'", ":", "d_dict", "[", "'ner'", "]", ",", "\n", "'q_words'", ":", "' '", ".", "join", "(", "q_dict", "[", "'words'", "]", ")", ",", "\n", "'q_pos'", ":", "q_dict", "[", "'pos'", "]", ",", "\n", "'c_words'", ":", "' '", ".", "join", "(", "c_dict", "[", "'words'", "]", ")", ",", "\n", "'label'", ":", "label", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.preprocess.preprocess_dataset": [[247, 275], ["open", "print", "open.close", "preprocess.tokenize", "path.replace", "json.load", "preprocess.tokenize", "open", "preprocess.tokenize", "preprocess.get_example", "get_example.update", "open.write", "open.write", "int", "preprocess.compute_features", "json.dumps", "ans[].lower"], "function", ["home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.preprocess.tokenize", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.preprocess.tokenize", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.preprocess.tokenize", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.preprocess.get_example", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.preprocess.compute_features"], ["", "def", "preprocess_dataset", "(", "path", ",", "is_test_set", "=", "False", ")", ":", "\n", "    ", "writer", "=", "open", "(", "path", ".", "replace", "(", "'.json'", ",", "''", ")", "+", "'-processed.json'", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "\n", "ex_cnt", "=", "0", "\n", "for", "obj", "in", "json", ".", "load", "(", "open", "(", "path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", ")", "[", "'data'", "]", "[", "'instance'", "]", ":", "\n", "        ", "if", "not", "obj", "[", "'questions'", "]", ":", "\n", "            ", "continue", "\n", "", "d_dict", "=", "tokenize", "(", "obj", "[", "'text'", "]", ")", "\n", "d_id", "=", "path", "+", "'_'", "+", "obj", "[", "'@id'", "]", "\n", "try", ":", "\n", "            ", "qs", "=", "[", "q", "for", "q", "in", "obj", "[", "'questions'", "]", "[", "'question'", "]", "]", "\n", "dummy", "=", "qs", "[", "0", "]", "[", "'@text'", "]", "\n", "", "except", ":", "\n", "# some passages have only one question", "\n", "            ", "qs", "=", "[", "obj", "[", "'questions'", "]", "[", "'question'", "]", "]", "\n", "", "for", "q", "in", "qs", ":", "\n", "            ", "q_dict", "=", "tokenize", "(", "q", "[", "'@text'", "]", ")", "\n", "q_id", "=", "q", "[", "'@id'", "]", "\n", "for", "ans", "in", "q", "[", "'answer'", "]", ":", "\n", "                ", "c_dict", "=", "tokenize", "(", "ans", "[", "'@text'", "]", ")", "\n", "label", "=", "int", "(", "ans", "[", "'@correct'", "]", ".", "lower", "(", ")", "==", "'true'", ")", "if", "not", "is_test_set", "else", "-", "1", "\n", "c_id", "=", "ans", "[", "'@id'", "]", "\n", "example", "=", "get_example", "(", "d_id", ",", "q_id", ",", "c_id", ",", "d_dict", ",", "q_dict", ",", "c_dict", ",", "label", ")", "\n", "example", ".", "update", "(", "compute_features", "(", "d_dict", ",", "q_dict", ",", "c_dict", ")", ")", "\n", "writer", ".", "write", "(", "json", ".", "dumps", "(", "example", ")", ")", "\n", "writer", ".", "write", "(", "'\\n'", ")", "\n", "ex_cnt", "+=", "1", "\n", "", "", "", "print", "(", "'Found %d examples in %s...'", "%", "(", "ex_cnt", ",", "path", ")", ")", "\n", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.preprocess._get_race_obj": [[277, 283], ["os.walk", "f.endswith", "json.load", "open"], "function", ["None"], ["", "def", "_get_race_obj", "(", "d", ")", ":", "\n", "    ", "for", "root_d", ",", "_", ",", "files", "in", "os", ".", "walk", "(", "d", ")", ":", "\n", "        ", "for", "f", "in", "files", ":", "\n", "            ", "if", "f", ".", "endswith", "(", "'txt'", ")", ":", "\n", "                ", "obj", "=", "json", ".", "load", "(", "open", "(", "root_d", "+", "'/'", "+", "f", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", ")", "\n", "yield", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.preprocess.preprocess_race_dataset": [[284, 324], ["utils.build_vocab", "open", "preprocess._get_race_obj", "print", "open.close", "preprocess.tokenize", "zip", "obj[].replace().replace", "preprocess.preprocess_race_dataset.is_passage_ok"], "function", ["home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.build_vocab", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.preprocess._get_race_obj", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.preprocess.tokenize"], ["", "", "", "", "def", "preprocess_race_dataset", "(", "d", ")", ":", "\n", "    ", "import", "utils", "\n", "utils", ".", "build_vocab", "(", ")", "\n", "def", "is_passage_ok", "(", "words", ")", ":", "\n", "        ", "return", "len", "(", "words", ")", ">=", "50", "and", "len", "(", "words", ")", "<=", "500", "and", "sum", "(", "[", "int", "(", "w", "in", "utils", ".", "vocab", ")", "for", "w", "in", "words", "]", ")", ">=", "0.85", "*", "len", "(", "words", ")", "\n", "", "def", "is_question_ok", "(", "words", ")", ":", "\n", "        ", "return", "True", "\n", "", "def", "is_option_ok", "(", "words", ")", ":", "\n", "        ", "s", "=", "' '", ".", "join", "(", "words", ")", ".", "lower", "(", ")", "\n", "return", "s", "!=", "'all of the above'", "and", "s", "!=", "'none of the above'", "\n", "", "writer", "=", "open", "(", "'./data/race-processed.json'", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "\n", "ex_cnt", "=", "0", "\n", "for", "obj", "in", "_get_race_obj", "(", "d", ")", ":", "\n", "        ", "d_dict", "=", "tokenize", "(", "obj", "[", "'article'", "]", ".", "replace", "(", "'\\n'", ",", "' '", ")", ".", "replace", "(", "'--'", ",", "' '", ")", ")", "\n", "if", "not", "is_passage_ok", "(", "d_dict", "[", "'words'", "]", ")", ":", "\n", "            ", "continue", "\n", "", "d_id", "=", "obj", "[", "'id'", "]", "\n", "assert", "len", "(", "obj", "[", "'options'", "]", ")", "==", "len", "(", "obj", "[", "'answers'", "]", ")", "and", "len", "(", "obj", "[", "'answers'", "]", ")", "==", "len", "(", "obj", "[", "'questions'", "]", ")", "\n", "q_cnt", "=", "0", "\n", "for", "q", ",", "ans", ",", "choices", "in", "zip", "(", "obj", "[", "'questions'", "]", ",", "obj", "[", "'answers'", "]", ",", "obj", "[", "'options'", "]", ")", ":", "\n", "            ", "q_id", "=", "str", "(", "q_cnt", ")", "\n", "q_cnt", "+=", "1", "\n", "ans", "=", "ord", "(", "ans", ")", "-", "ord", "(", "'A'", ")", "\n", "assert", "0", "<=", "ans", "<", "len", "(", "choices", ")", "\n", "q_dict", "=", "tokenize", "(", "q", ".", "replace", "(", "'_'", ",", "' _ '", ")", ")", "\n", "if", "not", "is_question_ok", "(", "q_dict", "[", "'words'", "]", ")", ":", "\n", "                ", "continue", "\n", "", "for", "c_id", ",", "choice", "in", "enumerate", "(", "choices", ")", ":", "\n", "                ", "c_dict", "=", "tokenize", "(", "choice", ")", "\n", "if", "not", "is_option_ok", "(", "c_dict", "[", "'words'", "]", ")", ":", "\n", "                    ", "continue", "\n", "", "label", "=", "int", "(", "c_id", "==", "ans", ")", "\n", "c_id", "=", "str", "(", "c_id", ")", "\n", "example", "=", "get_example", "(", "d_id", ",", "q_id", ",", "c_id", ",", "d_dict", ",", "q_dict", ",", "c_dict", ",", "label", ")", "\n", "example", ".", "update", "(", "compute_features", "(", "d_dict", ",", "q_dict", ",", "c_dict", ")", ")", "\n", "writer", ".", "write", "(", "json", ".", "dumps", "(", "example", ")", ")", "\n", "writer", ".", "write", "(", "'\\n'", ")", "\n", "ex_cnt", "+=", "1", "\n", "", "", "", "print", "(", "'Found %d examples in %s...'", "%", "(", "ex_cnt", ",", "d", ")", ")", "\n", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.preprocess.build_vocab_from_raw_dataset": [[326, 353], ["collections.Counter", "glob.glob", "collections.Counter.most_common", "print", "open", "open.write", "open.close", "utils.vocab.add", "preprocess.tokenize", "collections.Counter", "len", "utils.vocab.tokens", "json.load", "preprocess.tokenize", "collections.Counter", "open", "preprocess.tokenize", "collections.Counter"], "function", ["home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.Dictionary.add", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.preprocess.tokenize", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.Dictionary.tokens", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.preprocess.tokenize", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.preprocess.tokenize"], ["", "def", "build_vocab_from_raw_dataset", "(", "path", "=", "'./data/*-data.json'", ")", ":", "\n", "    ", "import", "utils", "\n", "word_cnt", "=", "Counter", "(", ")", "\n", "for", "data_path", "in", "glob", ".", "glob", "(", "path", ")", ":", "\n", "        ", "for", "obj", "in", "json", ".", "load", "(", "open", "(", "data_path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", ")", "[", "'data'", "]", "[", "'instance'", "]", ":", "\n", "            ", "if", "not", "obj", "[", "'questions'", "]", ":", "\n", "                ", "continue", "\n", "", "d_dict", "=", "tokenize", "(", "obj", "[", "'text'", "]", ")", "\n", "word_cnt", "+=", "Counter", "(", "d_dict", "[", "'words'", "]", ")", "\n", "try", ":", "\n", "                ", "qs", "=", "[", "q", "for", "q", "in", "obj", "[", "'questions'", "]", "[", "'question'", "]", "]", "\n", "dummy", "=", "qs", "[", "0", "]", "[", "'@text'", "]", "\n", "", "except", ":", "\n", "# some passages have only one question", "\n", "                ", "qs", "=", "[", "obj", "[", "'questions'", "]", "[", "'question'", "]", "]", "\n", "", "for", "q", "in", "qs", ":", "\n", "                ", "q_dict", "=", "tokenize", "(", "q", "[", "'@text'", "]", ")", "\n", "word_cnt", "+=", "Counter", "(", "q_dict", "[", "'words'", "]", ")", "\n", "for", "ans", "in", "q", "[", "'answer'", "]", ":", "\n", "                    ", "c_dict", "=", "tokenize", "(", "ans", "[", "'@text'", "]", ")", "\n", "word_cnt", "+=", "Counter", "(", "c_dict", "[", "'words'", "]", ")", "\n", "", "", "", "", "for", "key", ",", "val", "in", "word_cnt", ".", "most_common", "(", ")", ":", "\n", "        ", "utils", ".", "vocab", ".", "add", "(", "key", ")", "\n", "", "print", "(", "'Vocabulary size: %d'", "%", "len", "(", "utils", ".", "vocab", ")", ")", "\n", "writer", "=", "open", "(", "'./data/vocab'", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "\n", "writer", ".", "write", "(", "'\\n'", ".", "join", "(", "utils", ".", "vocab", ".", "tokens", "(", ")", ")", ")", "\n", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.preprocess.preprocess_conceptnet": [[354, 375], ["preprocess.build_vocab_from_raw_dataset", "open", "open", "open.close", "arg.strip().split.strip().split", "line.split", "preprocess.preprocess_conceptnet._get_lan_and_w"], "function", ["home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.preprocess.build_vocab_from_raw_dataset"], ["", "def", "preprocess_conceptnet", "(", "path", ")", ":", "\n", "    ", "import", "utils", "\n", "build_vocab_from_raw_dataset", "(", "path", "=", "'./data/*-data.json'", ")", "\n", "writer", "=", "open", "(", "'./data/concept.filter'", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "\n", "def", "_get_lan_and_w", "(", "arg", ")", ":", "\n", "        ", "arg", "=", "arg", ".", "strip", "(", "'/'", ")", ".", "split", "(", "'/'", ")", "\n", "return", "arg", "[", "1", "]", ",", "arg", "[", "2", "]", "\n", "", "for", "line", "in", "open", "(", "path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", ":", "\n", "        ", "fs", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "relation", ",", "arg1", ",", "arg2", "=", "fs", "[", "1", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ",", "fs", "[", "2", "]", ",", "fs", "[", "3", "]", "\n", "lan1", ",", "w1", "=", "_get_lan_and_w", "(", "arg1", ")", "\n", "if", "lan1", "!=", "'en'", "or", "not", "all", "(", "w", "in", "utils", ".", "vocab", "for", "w", "in", "w1", ".", "split", "(", "'_'", ")", ")", ":", "\n", "            ", "continue", "\n", "", "lan2", ",", "w2", "=", "_get_lan_and_w", "(", "arg2", ")", "\n", "if", "lan2", "!=", "'en'", "or", "not", "all", "(", "w", "in", "utils", ".", "vocab", "for", "w", "in", "w2", ".", "split", "(", "'_'", ")", ")", ":", "\n", "            ", "continue", "\n", "", "obj", "=", "json", ".", "loads", "(", "fs", "[", "-", "1", "]", ")", "\n", "if", "obj", "[", "'weight'", "]", "<", "1.0", ":", "\n", "            ", "continue", "\n", "", "writer", ".", "write", "(", "'%s %s %s\\n'", "%", "(", "relation", ",", "w1", ",", "w2", ")", ")", "\n", "", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.doc.Example.__init__": [[8, 33], ["numpy.stack", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.from_numpy().type", "torch.LongTensor", "torch.LongTensor", "len", "len", "len", "len", "len", "len", "doc.Example.question.split", "doc.Example.passage.split", "doc.Example.passage.split", "torch.from_numpy", "doc.Example.passage.split", "doc.Example.question.split", "doc.Example.choice.split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "input_dict", ")", ":", "\n", "        ", "self", ".", "id", "=", "input_dict", "[", "'id'", "]", "\n", "self", ".", "passage", "=", "input_dict", "[", "'d_words'", "]", "\n", "self", ".", "question", "=", "input_dict", "[", "'q_words'", "]", "\n", "self", ".", "choice", "=", "input_dict", "[", "'c_words'", "]", "\n", "self", ".", "d_pos", "=", "input_dict", "[", "'d_pos'", "]", "\n", "self", ".", "d_ner", "=", "input_dict", "[", "'d_ner'", "]", "\n", "self", ".", "q_pos", "=", "input_dict", "[", "'q_pos'", "]", "\n", "assert", "len", "(", "self", ".", "q_pos", ")", "==", "len", "(", "self", ".", "question", ".", "split", "(", ")", ")", ",", "(", "self", ".", "q_pos", ",", "self", ".", "question", ")", "\n", "assert", "len", "(", "self", ".", "d_pos", ")", "==", "len", "(", "self", ".", "passage", ".", "split", "(", ")", ")", "\n", "self", ".", "features", "=", "np", ".", "stack", "(", "[", "input_dict", "[", "'in_q'", "]", ",", "input_dict", "[", "'in_c'", "]", ",", "input_dict", "[", "'lemma_in_q'", "]", ",", "input_dict", "[", "'lemma_in_c'", "]", ",", "input_dict", "[", "'tf'", "]", "]", ",", "1", ")", "\n", "assert", "len", "(", "self", ".", "features", ")", "==", "len", "(", "self", ".", "passage", ".", "split", "(", ")", ")", "\n", "self", ".", "label", "=", "input_dict", "[", "'label'", "]", "\n", "\n", "self", ".", "d_tensor", "=", "torch", ".", "LongTensor", "(", "[", "vocab", "[", "w", "]", "for", "w", "in", "self", ".", "passage", ".", "split", "(", ")", "]", ")", "\n", "self", ".", "q_tensor", "=", "torch", ".", "LongTensor", "(", "[", "vocab", "[", "w", "]", "for", "w", "in", "self", ".", "question", ".", "split", "(", ")", "]", ")", "\n", "self", ".", "c_tensor", "=", "torch", ".", "LongTensor", "(", "[", "vocab", "[", "w", "]", "for", "w", "in", "self", ".", "choice", ".", "split", "(", ")", "]", ")", "\n", "self", ".", "d_pos_tensor", "=", "torch", ".", "LongTensor", "(", "[", "pos_vocab", "[", "w", "]", "for", "w", "in", "self", ".", "d_pos", "]", ")", "\n", "self", ".", "q_pos_tensor", "=", "torch", ".", "LongTensor", "(", "[", "pos_vocab", "[", "w", "]", "for", "w", "in", "self", ".", "q_pos", "]", ")", "\n", "self", ".", "d_ner_tensor", "=", "torch", ".", "LongTensor", "(", "[", "ner_vocab", "[", "w", "]", "for", "w", "in", "self", ".", "d_ner", "]", ")", "\n", "self", ".", "features", "=", "torch", ".", "from_numpy", "(", "self", ".", "features", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "self", ".", "p_q_relation", "=", "torch", ".", "LongTensor", "(", "[", "rel_vocab", "[", "r", "]", "for", "r", "in", "input_dict", "[", "'p_q_relation'", "]", "]", ")", "\n", "self", ".", "p_c_relation", "=", "torch", ".", "LongTensor", "(", "[", "rel_vocab", "[", "r", "]", "for", "r", "in", "input_dict", "[", "'p_c_relation'", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.doc.Example.__str__": [[34, 36], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'Passage: %s\\n Question: %s\\n Answer: %s, Label: %d'", "%", "(", "self", ".", "passage", ",", "self", ".", "question", ",", "self", ".", "choice", ",", "self", ".", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.doc._to_indices_and_mask": [[37, 51], ["max", "len", "torch.LongTensor().fill_", "enumerate", "torch.ByteTensor().fill_", "indices[].copy_", "t.size", "torch.LongTensor", "mask[].fill_", "torch.ByteTensor", "len", "len"], "function", ["None"], ["", "", "def", "_to_indices_and_mask", "(", "batch_tensor", ",", "need_mask", "=", "True", ")", ":", "\n", "    ", "mx_len", "=", "max", "(", "[", "t", ".", "size", "(", "0", ")", "for", "t", "in", "batch_tensor", "]", ")", "\n", "batch_size", "=", "len", "(", "batch_tensor", ")", "\n", "indices", "=", "torch", ".", "LongTensor", "(", "batch_size", ",", "mx_len", ")", ".", "fill_", "(", "0", ")", "\n", "if", "need_mask", ":", "\n", "        ", "mask", "=", "torch", ".", "ByteTensor", "(", "batch_size", ",", "mx_len", ")", ".", "fill_", "(", "1", ")", "\n", "", "for", "i", ",", "t", "in", "enumerate", "(", "batch_tensor", ")", ":", "\n", "        ", "indices", "[", "i", ",", ":", "len", "(", "t", ")", "]", ".", "copy_", "(", "t", ")", "\n", "if", "need_mask", ":", "\n", "            ", "mask", "[", "i", ",", ":", "len", "(", "t", ")", "]", ".", "fill_", "(", "0", ")", "\n", "", "", "if", "need_mask", ":", "\n", "        ", "return", "indices", ",", "mask", "\n", "", "else", ":", "\n", "        ", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.doc._to_feature_tensor": [[52, 60], ["max", "len", "features[].size", "torch.FloatTensor().fill_", "enumerate", "f_tensor[].copy_", "f.size", "torch.FloatTensor", "len"], "function", ["None"], ["", "", "def", "_to_feature_tensor", "(", "features", ")", ":", "\n", "    ", "mx_len", "=", "max", "(", "[", "f", ".", "size", "(", "0", ")", "for", "f", "in", "features", "]", ")", "\n", "batch_size", "=", "len", "(", "features", ")", "\n", "f_dim", "=", "features", "[", "0", "]", ".", "size", "(", "1", ")", "\n", "f_tensor", "=", "torch", ".", "FloatTensor", "(", "batch_size", ",", "mx_len", ",", "f_dim", ")", ".", "fill_", "(", "0", ")", "\n", "for", "i", ",", "f", "in", "enumerate", "(", "features", ")", ":", "\n", "        ", "f_tensor", "[", "i", ",", ":", "len", "(", "f", ")", ",", ":", "]", ".", "copy_", "(", "f", ")", "\n", "", "return", "f_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.doc.batchify": [[61, 74], ["doc._to_indices_and_mask", "doc._to_indices_and_mask", "doc._to_indices_and_mask", "doc._to_indices_and_mask", "doc._to_indices_and_mask", "doc._to_indices_and_mask", "doc._to_indices_and_mask", "doc._to_indices_and_mask", "doc._to_feature_tensor", "torch.FloatTensor", "ex.choice.split"], "function", ["home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.doc._to_indices_and_mask", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.doc._to_indices_and_mask", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.doc._to_indices_and_mask", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.doc._to_indices_and_mask", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.doc._to_indices_and_mask", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.doc._to_indices_and_mask", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.doc._to_indices_and_mask", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.doc._to_indices_and_mask", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.doc._to_feature_tensor"], ["", "def", "batchify", "(", "batch_data", ")", ":", "\n", "    ", "p", ",", "p_mask", "=", "_to_indices_and_mask", "(", "[", "ex", ".", "d_tensor", "for", "ex", "in", "batch_data", "]", ")", "\n", "p_pos", "=", "_to_indices_and_mask", "(", "[", "ex", ".", "d_pos_tensor", "for", "ex", "in", "batch_data", "]", ",", "need_mask", "=", "False", ")", "\n", "p_ner", "=", "_to_indices_and_mask", "(", "[", "ex", ".", "d_ner_tensor", "for", "ex", "in", "batch_data", "]", ",", "need_mask", "=", "False", ")", "\n", "p_q_relation", "=", "_to_indices_and_mask", "(", "[", "ex", ".", "p_q_relation", "for", "ex", "in", "batch_data", "]", ",", "need_mask", "=", "False", ")", "\n", "p_c_relation", "=", "_to_indices_and_mask", "(", "[", "ex", ".", "p_c_relation", "for", "ex", "in", "batch_data", "]", ",", "need_mask", "=", "False", ")", "\n", "q", ",", "q_mask", "=", "_to_indices_and_mask", "(", "[", "ex", ".", "q_tensor", "for", "ex", "in", "batch_data", "]", ")", "\n", "q_pos", "=", "_to_indices_and_mask", "(", "[", "ex", ".", "q_pos_tensor", "for", "ex", "in", "batch_data", "]", ",", "need_mask", "=", "False", ")", "\n", "choices", "=", "[", "ex", ".", "choice", ".", "split", "(", ")", "for", "ex", "in", "batch_data", "]", "\n", "c", ",", "c_mask", "=", "_to_indices_and_mask", "(", "[", "ex", ".", "c_tensor", "for", "ex", "in", "batch_data", "]", ")", "\n", "f_tensor", "=", "_to_feature_tensor", "(", "[", "ex", ".", "features", "for", "ex", "in", "batch_data", "]", ")", "\n", "y", "=", "torch", ".", "FloatTensor", "(", "[", "ex", ".", "label", "for", "ex", "in", "batch_data", "]", ")", "\n", "return", "p", ",", "p_pos", ",", "p_ner", ",", "p_mask", ",", "q", ",", "q_pos", ",", "q_mask", ",", "c", ",", "c_mask", ",", "f_tensor", ",", "p_q_relation", ",", "p_c_relation", ",", "y", "\n", "", ""]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.Dictionary.normalize": [[37, 40], ["unicodedata.normalize"], "methods", ["home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.Dictionary.normalize"], ["@", "staticmethod", "\n", "def", "normalize", "(", "token", ")", ":", "\n", "        ", "return", "unicodedata", ".", "normalize", "(", "'NFD'", ",", "token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.Dictionary.__init__": [[41, 44], ["None"], "methods", ["None"], ["", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "tok2ind", "=", "{", "self", ".", "NULL", ":", "0", ",", "self", ".", "UNK", ":", "1", "}", "\n", "self", ".", "ind2tok", "=", "{", "0", ":", "self", ".", "NULL", ",", "1", ":", "self", ".", "UNK", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.Dictionary.__len__": [[45, 47], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "tok2ind", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.Dictionary.__iter__": [[48, 50], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "tok2ind", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.Dictionary.__contains__": [[51, 56], ["type", "type", "utils.Dictionary.normalize"], "methods", ["home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.Dictionary.normalize"], ["", "def", "__contains__", "(", "self", ",", "key", ")", ":", "\n", "        ", "if", "type", "(", "key", ")", "==", "int", ":", "\n", "            ", "return", "key", "in", "self", ".", "ind2tok", "\n", "", "elif", "type", "(", "key", ")", "==", "str", ":", "\n", "            ", "return", "self", ".", "normalize", "(", "key", ")", "in", "self", ".", "tok2ind", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.Dictionary.__getitem__": [[57, 63], ["type", "utils.Dictionary.ind2tok.get", "type", "utils.Dictionary.tok2ind.get", "utils.Dictionary.normalize", "utils.Dictionary.tok2ind.get"], "methods", ["home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.Dictionary.normalize"], ["", "", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "if", "type", "(", "key", ")", "==", "int", ":", "\n", "            ", "return", "self", ".", "ind2tok", ".", "get", "(", "key", ",", "self", ".", "UNK", ")", "\n", "", "if", "type", "(", "key", ")", "==", "str", ":", "\n", "            ", "return", "self", ".", "tok2ind", ".", "get", "(", "self", ".", "normalize", "(", "key", ")", ",", "\n", "self", ".", "tok2ind", ".", "get", "(", "self", ".", "UNK", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.Dictionary.__setitem__": [[64, 71], ["type", "type", "RuntimeError", "type", "type"], "methods", ["None"], ["", "", "def", "__setitem__", "(", "self", ",", "key", ",", "item", ")", ":", "\n", "        ", "if", "type", "(", "key", ")", "==", "int", "and", "type", "(", "item", ")", "==", "str", ":", "\n", "            ", "self", ".", "ind2tok", "[", "key", "]", "=", "item", "\n", "", "elif", "type", "(", "key", ")", "==", "str", "and", "type", "(", "item", ")", "==", "int", ":", "\n", "            ", "self", ".", "tok2ind", "[", "key", "]", "=", "item", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Invalid (key, item) types.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.Dictionary.add": [[72, 78], ["utils.Dictionary.normalize", "len"], "methods", ["home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.Dictionary.normalize"], ["", "", "def", "add", "(", "self", ",", "token", ")", ":", "\n", "        ", "token", "=", "self", ".", "normalize", "(", "token", ")", "\n", "if", "token", "not", "in", "self", ".", "tok2ind", ":", "\n", "            ", "index", "=", "len", "(", "self", ".", "tok2ind", ")", "\n", "self", ".", "tok2ind", "[", "token", "]", "=", "index", "\n", "self", ".", "ind2tok", "[", "index", "]", "=", "token", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.Dictionary.tokens": [[79, 88], ["utils.Dictionary.tok2ind.keys"], "methods", ["None"], ["", "", "def", "tokens", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get dictionary tokens.\n\n        Return all the words indexed by this dictionary, except for special\n        tokens.\n        \"\"\"", "\n", "tokens", "=", "[", "k", "for", "k", "in", "self", ".", "tok2ind", ".", "keys", "(", ")", "\n", "if", "k", "not", "in", "{", "'<NULL>'", ",", "'<UNK>'", "}", "]", "\n", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.is_stopword": [[13, 15], ["w.lower"], "function", ["None"], ["def", "is_stopword", "(", "w", ")", ":", "\n", "    ", "return", "w", ".", "lower", "(", ")", "in", "words", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.is_punc": [[16, 18], ["None"], "function", ["None"], ["", "def", "is_punc", "(", "c", ")", ":", "\n", "    ", "return", "c", "in", "punc", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.get_idf": [[20, 22], ["numpy.log", "wikiwords.freq", "w.lower"], "function", ["None"], ["def", "get_idf", "(", "w", ")", ":", "\n", "    ", "return", "np", ".", "log", "(", "baseline", "/", "(", "wikiwords", ".", "freq", "(", "w", ".", "lower", "(", ")", ")", "+", "1e-10", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.load_data": [[23, 31], ["open", "print", "data.append", "path.find", "numpy.random.random", "Example", "len", "json.loads"], "function", ["None"], ["", "def", "load_data", "(", "path", ")", ":", "\n", "    ", "from", "doc", "import", "Example", "\n", "data", "=", "[", "]", "\n", "for", "line", "in", "open", "(", "path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", ":", "\n", "        ", "if", "path", ".", "find", "(", "'race'", ")", "<", "0", "or", "np", ".", "random", ".", "random", "(", ")", "<", "0.6", ":", "\n", "            ", "data", ".", "append", "(", "Example", "(", "json", ".", "loads", "(", "line", ")", ")", ")", "\n", "", "", "print", "(", "'Load %d examples from %s...'", "%", "(", "len", "(", "data", ")", ",", "path", ")", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.gen_race_vocab": [[90, 105], ["utils.Dictionary", "utils.build_vocab", "collections.Counter", "collections.Counter.most_common", "print", "open", "open.write", "open.close", "collections.Counter", "collections.Counter", "collections.Counter", "ex.passage.split", "ex.question.split", "ex.choice.split", "utils.Dictionary.add", "len", "utils.Dictionary.tokens"], "function", ["home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.build_vocab", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.Dictionary.add", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.Dictionary.tokens"], ["def", "gen_race_vocab", "(", "data", ")", ":", "\n", "    ", "race_vocab", "=", "Dictionary", "(", ")", "\n", "build_vocab", "(", ")", "\n", "cnt", "=", "Counter", "(", ")", "\n", "for", "ex", "in", "data", ":", "\n", "        ", "cnt", "+=", "Counter", "(", "ex", ".", "passage", ".", "split", "(", ")", ")", "\n", "cnt", "+=", "Counter", "(", "ex", ".", "question", ".", "split", "(", ")", ")", "\n", "cnt", "+=", "Counter", "(", "ex", ".", "choice", ".", "split", "(", ")", ")", "\n", "", "for", "key", ",", "val", "in", "cnt", ".", "most_common", "(", "30000", ")", ":", "\n", "        ", "if", "key", "not", "in", "vocab", ":", "\n", "            ", "race_vocab", ".", "add", "(", "key", ")", "\n", "", "", "print", "(", "'Vocabulary size: %d'", "%", "len", "(", "race_vocab", ")", ")", "\n", "writer", "=", "open", "(", "'./data/race_vocab'", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "\n", "writer", ".", "write", "(", "'\\n'", ".", "join", "(", "race_vocab", ".", "tokens", "(", ")", ")", ")", "\n", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.build_vocab": [[106, 166], ["os.path.exists", "os.path.exists", "os.path.exists", "print", "open", "print", "print", "open", "print", "collections.Counter", "collections.Counter.most_common", "print", "open", "open.write", "open.close", "print", "open", "print", "collections.Counter", "collections.Counter.most_common", "print", "open", "open.write", "open.close", "print", "open", "print", "collections.Counter", "collections.Counter.most_common", "print", "open", "open.write", "open.close", "os.path.exists", "os.system", "rel_vocab.add", "vocab.add", "collections.Counter", "collections.Counter", "collections.Counter", "vocab.add", "pos_vocab.add", "collections.Counter", "collections.Counter", "ner_vocab.add", "collections.Counter", "w.strip", "len", "w.strip", "len", "ex.passage.split", "ex.question.split", "ex.choice.split", "len", "vocab.tokens", "w.strip", "len", "pos_vocab.add", "len", "pos_vocab.tokens", "w.strip", "len", "ner_vocab.add", "len", "ner_vocab.tokens"], "function", ["home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.Dictionary.add", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.Dictionary.add", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.Dictionary.add", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.Dictionary.add", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.Dictionary.add", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.Dictionary.tokens", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.Dictionary.add", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.Dictionary.tokens", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.Dictionary.add", "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.Dictionary.tokens"], ["", "def", "build_vocab", "(", "data", "=", "None", ")", ":", "\n", "    ", "global", "vocab", ",", "pos_vocab", ",", "ner_vocab", ",", "rel_vocab", "\n", "# build word vocabulary", "\n", "if", "os", ".", "path", ".", "exists", "(", "'./data/vocab'", ")", ":", "\n", "        ", "print", "(", "'Load vocabulary from ./data/vocab...'", ")", "\n", "for", "w", "in", "open", "(", "'./data/vocab'", ",", "encoding", "=", "'utf-8'", ")", ":", "\n", "            ", "vocab", ".", "add", "(", "w", ".", "strip", "(", ")", ")", "\n", "", "print", "(", "'Vocabulary size: %d'", "%", "len", "(", "vocab", ")", ")", "\n", "", "else", ":", "\n", "        ", "cnt", "=", "Counter", "(", ")", "\n", "for", "ex", "in", "data", ":", "\n", "            ", "cnt", "+=", "Counter", "(", "ex", ".", "passage", ".", "split", "(", ")", ")", "\n", "cnt", "+=", "Counter", "(", "ex", ".", "question", ".", "split", "(", ")", ")", "\n", "cnt", "+=", "Counter", "(", "ex", ".", "choice", ".", "split", "(", ")", ")", "\n", "", "for", "key", ",", "val", "in", "cnt", ".", "most_common", "(", ")", ":", "\n", "            ", "vocab", ".", "add", "(", "key", ")", "\n", "", "print", "(", "'Vocabulary size: %d'", "%", "len", "(", "vocab", ")", ")", "\n", "writer", "=", "open", "(", "'./data/vocab'", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "\n", "writer", ".", "write", "(", "'\\n'", ".", "join", "(", "vocab", ".", "tokens", "(", ")", ")", ")", "\n", "writer", ".", "close", "(", ")", "\n", "# build part-of-speech vocabulary", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "'./data/pos_vocab'", ")", ":", "\n", "        ", "print", "(", "'Load pos vocabulary from ./data/pos_vocab...'", ")", "\n", "for", "w", "in", "open", "(", "'./data/pos_vocab'", ",", "encoding", "=", "'utf-8'", ")", ":", "\n", "            ", "pos_vocab", ".", "add", "(", "w", ".", "strip", "(", ")", ")", "\n", "", "print", "(", "'POS vocabulary size: %d'", "%", "len", "(", "pos_vocab", ")", ")", "\n", "", "else", ":", "\n", "        ", "cnt", "=", "Counter", "(", ")", "\n", "for", "ex", "in", "data", ":", "\n", "            ", "cnt", "+=", "Counter", "(", "ex", ".", "d_pos", ")", "\n", "cnt", "+=", "Counter", "(", "ex", ".", "q_pos", ")", "\n", "", "for", "key", ",", "val", "in", "cnt", ".", "most_common", "(", ")", ":", "\n", "            ", "if", "key", ":", "pos_vocab", ".", "add", "(", "key", ")", "\n", "", "print", "(", "'POS vocabulary size: %d'", "%", "len", "(", "pos_vocab", ")", ")", "\n", "writer", "=", "open", "(", "'./data/pos_vocab'", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "\n", "writer", ".", "write", "(", "'\\n'", ".", "join", "(", "pos_vocab", ".", "tokens", "(", ")", ")", ")", "\n", "writer", ".", "close", "(", ")", "\n", "# build named entity vocabulary", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "'./data/ner_vocab'", ")", ":", "\n", "        ", "print", "(", "'Load ner vocabulary from ./data/ner_vocab...'", ")", "\n", "for", "w", "in", "open", "(", "'./data/ner_vocab'", ",", "encoding", "=", "'utf-8'", ")", ":", "\n", "            ", "ner_vocab", ".", "add", "(", "w", ".", "strip", "(", ")", ")", "\n", "", "print", "(", "'NER vocabulary size: %d'", "%", "len", "(", "ner_vocab", ")", ")", "\n", "", "else", ":", "\n", "        ", "cnt", "=", "Counter", "(", ")", "\n", "for", "ex", "in", "data", ":", "\n", "            ", "cnt", "+=", "Counter", "(", "ex", ".", "d_ner", ")", "\n", "", "for", "key", ",", "val", "in", "cnt", ".", "most_common", "(", ")", ":", "\n", "            ", "if", "key", ":", "ner_vocab", ".", "add", "(", "key", ")", "\n", "", "print", "(", "'NER vocabulary size: %d'", "%", "len", "(", "ner_vocab", ")", ")", "\n", "writer", "=", "open", "(", "'./data/ner_vocab'", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "\n", "writer", ".", "write", "(", "'\\n'", ".", "join", "(", "ner_vocab", ".", "tokens", "(", ")", ")", ")", "\n", "writer", ".", "close", "(", ")", "\n", "# Load conceptnet relation vocabulary", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "'./data/rel_vocab'", ")", ":", "\n", "        ", "os", ".", "system", "(", "\"cut -d' ' -f1 data/concept.filter | sort | uniq > ./data/rel_vocab\"", ")", "\n", "", "print", "(", "'Load relation vocabulary from ./data/rel_vocab...'", ")", "\n", "for", "w", "in", "open", "(", "'./data/rel_vocab'", ",", "encoding", "=", "'utf-8'", ")", ":", "\n", "        ", "rel_vocab", ".", "add", "(", "w", ".", "strip", "(", ")", ")", "\n", "", "print", "(", "'Rel vocabulary size: %d'", "%", "len", "(", "rel_vocab", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.gen_submission": [[167, 174], ["open", "zip", "open.close", "len", "len", "open.write", "numpy.random.randint", "ex.id.split"], "function", ["None"], ["", "def", "gen_submission", "(", "data", ",", "prediction", ")", ":", "\n", "    ", "assert", "len", "(", "data", ")", "==", "len", "(", "prediction", ")", "\n", "writer", "=", "open", "(", "'out-%d.txt'", "%", "np", ".", "random", ".", "randint", "(", "10", "**", "18", ")", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "\n", "for", "p", ",", "ex", "in", "zip", "(", "prediction", ",", "data", ")", ":", "\n", "        ", "p_id", ",", "q_id", ",", "c_id", "=", "ex", ".", "id", ".", "split", "(", "'_'", ")", "[", "-", "3", ":", "]", "\n", "writer", ".", "write", "(", "'%s,%s,%s,%f\\n'", "%", "(", "p_id", ",", "q_id", ",", "c_id", ",", "p", ")", ")", "\n", "", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.gen_debug_file": [[175, 193], ["open", "enumerate", "open.close", "cur_pred.append", "cur_choices.append", "len", "cur_pred.append", "cur_choices.append", "open.write", "open.write", "enumerate", "open.write", "len", "open.write"], "function", ["None"], ["", "def", "gen_debug_file", "(", "data", ",", "prediction", ")", ":", "\n", "    ", "writer", "=", "open", "(", "'./data/output.log'", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "\n", "cur_pred", ",", "cur_choices", "=", "[", "]", ",", "[", "]", "\n", "for", "i", ",", "ex", "in", "enumerate", "(", "data", ")", ":", "\n", "        ", "if", "i", "+", "1", "==", "len", "(", "data", ")", ":", "\n", "            ", "cur_pred", ".", "append", "(", "prediction", "[", "i", "]", ")", "\n", "cur_choices", ".", "append", "(", "ex", ".", "choice", ")", "\n", "", "if", "(", "i", ">", "0", "and", "ex", ".", "id", "[", ":", "-", "1", "]", "!=", "data", "[", "i", "-", "1", "]", ".", "id", "[", ":", "-", "1", "]", ")", "or", "(", "i", "+", "1", "==", "len", "(", "data", ")", ")", ":", "\n", "            ", "writer", ".", "write", "(", "'Passage: %s\\n'", "%", "data", "[", "i", "-", "1", "]", ".", "passage", ")", "\n", "writer", ".", "write", "(", "'Question: %s\\n'", "%", "data", "[", "i", "-", "1", "]", ".", "question", ")", "\n", "for", "idx", ",", "choice", "in", "enumerate", "(", "cur_choices", ")", ":", "\n", "                ", "writer", ".", "write", "(", "'%s  %f\\n'", "%", "(", "choice", ",", "cur_pred", "[", "idx", "]", ")", ")", "\n", "", "writer", ".", "write", "(", "'\\n'", ")", "\n", "cur_pred", ",", "cur_choices", "=", "[", "]", ",", "[", "]", "\n", "", "cur_pred", ".", "append", "(", "prediction", "[", "i", "]", ")", "\n", "cur_choices", ".", "append", "(", "ex", ".", "choice", ")", "\n", "\n", "", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.gen_final_submission": [[194, 227], ["glob.glob", "range", "utils.gen_debug_file", "open", "zip", "open.close", "os.system", "print", "print", "open().readlines", "map", "list", "proba_list.append", "len", "numpy.average", "len", "len", "numpy.argmax", "open.write", "filter", "len", "len", "avg_proba.append", "p_q_id.append", "avg_proba[].append", "len", "len", "open.write", "open", "s.strip", "float", "data[].id.split", "len", "p[].split"], "function", ["home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.gen_debug_file"], ["", "def", "gen_final_submission", "(", "data", ")", ":", "\n", "    ", "import", "glob", "\n", "proba_list", "=", "[", "]", "\n", "for", "f", "in", "glob", ".", "glob", "(", "'./out-*.txt'", ")", ":", "\n", "        ", "print", "(", "'Process %s...'", "%", "f", ")", "\n", "lines", "=", "open", "(", "f", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", ".", "readlines", "(", ")", "\n", "lines", "=", "map", "(", "lambda", "s", ":", "s", ".", "strip", "(", ")", ",", "lines", ")", "\n", "lines", "=", "list", "(", "filter", "(", "lambda", "s", ":", "len", "(", "s", ")", ">", "0", ",", "lines", ")", ")", "\n", "assert", "len", "(", "lines", ")", "==", "len", "(", "data", ")", "\n", "proba_list", ".", "append", "(", "lines", ")", "\n", "", "avg_proba", ",", "p_q_id", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "data", ")", ")", ":", "\n", "        ", "cur_avg_p", "=", "np", ".", "average", "(", "[", "float", "(", "p", "[", "i", "]", ".", "split", "(", "','", ")", "[", "-", "1", "]", ")", "for", "p", "in", "proba_list", "]", ")", "\n", "cur_p_q_id", "=", "','", ".", "join", "(", "data", "[", "i", "]", ".", "id", ".", "split", "(", "'_'", ")", "[", "-", "3", ":", "-", "1", "]", ")", "\n", "if", "i", "==", "0", "or", "cur_p_q_id", "!=", "p_q_id", "[", "-", "1", "]", ":", "\n", "            ", "avg_proba", ".", "append", "(", "[", "cur_avg_p", "]", ")", "\n", "p_q_id", ".", "append", "(", "cur_p_q_id", ")", "\n", "", "else", ":", "\n", "            ", "avg_proba", "[", "-", "1", "]", ".", "append", "(", "cur_avg_p", ")", "\n", "", "", "gen_debug_file", "(", "data", ",", "[", "p", "for", "sublist", "in", "avg_proba", "for", "p", "in", "sublist", "]", ")", "\n", "writer", "=", "open", "(", "'answer.txt'", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "\n", "assert", "len", "(", "avg_proba", ")", "==", "len", "(", "p_q_id", ")", "\n", "cnt", "=", "0", "\n", "for", "probas", ",", "cur_p_q_id", "in", "zip", "(", "avg_proba", ",", "p_q_id", ")", ":", "\n", "        ", "cnt", "+=", "1", "\n", "assert", "len", "(", "probas", ")", ">", "1", "\n", "pred_ans", "=", "np", ".", "argmax", "(", "probas", ")", "\n", "writer", ".", "write", "(", "'%s,%d'", "%", "(", "cur_p_q_id", ",", "pred_ans", ")", ")", "\n", "if", "cnt", "<", "len", "(", "p_q_id", ")", ":", "\n", "            ", "writer", ".", "write", "(", "'\\n'", ")", "\n", "", "", "writer", ".", "close", "(", ")", "\n", "os", ".", "system", "(", "'zip final_output.zip answer.txt'", ")", "\n", "print", "(", "'Please submit final_output.zip to codalab.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.eval_based_on_outputs": [[228, 245], ["utils.load_data", "enumerate", "print", "int", "cur_gold.append", "s.strip", "int", "len", "len", "sum", "len", "len", "cur_gold.append", "numpy.argmax", "gold.append", "open().readlines", "len", "len", "s.split", "int", "open", "s.strip", "zip"], "function", ["home.repos.pwc.inspect_result.intfloat_commonsense-rc.src.utils.load_data"], ["", "def", "eval_based_on_outputs", "(", "path", ")", ":", "\n", "    ", "dev_data", "=", "load_data", "(", "'./data/dev-data-processed.json'", ")", "\n", "label", "=", "[", "int", "(", "ex", ".", "label", ")", "for", "ex", "in", "dev_data", "]", "\n", "gold", ",", "cur_gold", "=", "[", "]", ",", "[", "]", "\n", "for", "i", ",", "ex", "in", "enumerate", "(", "dev_data", ")", ":", "\n", "        ", "if", "i", "+", "1", "==", "len", "(", "dev_data", ")", ":", "\n", "            ", "cur_gold", ".", "append", "(", "label", "[", "i", "]", ")", "\n", "", "if", "(", "i", ">", "0", "and", "ex", ".", "id", "[", ":", "-", "1", "]", "!=", "dev_data", "[", "i", "-", "1", "]", ".", "id", "[", ":", "-", "1", "]", ")", "or", "(", "i", "+", "1", "==", "len", "(", "dev_data", ")", ")", ":", "\n", "            ", "gy", "=", "np", ".", "argmax", "(", "cur_gold", ")", "\n", "gold", ".", "append", "(", "gy", ")", "\n", "cur_gold", "=", "[", "]", "\n", "", "cur_gold", ".", "append", "(", "label", "[", "i", "]", ")", "\n", "", "prediction", "=", "[", "s", ".", "strip", "(", ")", "for", "s", "in", "open", "(", "path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", ".", "readlines", "(", ")", "if", "len", "(", "s", ".", "strip", "(", ")", ")", ">", "0", "]", "\n", "prediction", "=", "[", "int", "(", "s", ".", "split", "(", "','", ")", "[", "-", "1", "]", ")", "for", "s", "in", "prediction", "]", "\n", "assert", "len", "(", "prediction", ")", "==", "len", "(", "gold", ")", "\n", "acc", "=", "sum", "(", "[", "int", "(", "p", "==", "g", ")", "for", "p", ",", "g", "in", "zip", "(", "prediction", ",", "gold", ")", "]", ")", "/", "len", "(", "gold", ")", "\n", "print", "(", "'Accuracy on dev_data: %f'", "%", "acc", ")", "\n", "", ""]]}