{"home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.main.lcm": [[29, 30], ["abs", "math.gcd"], "function", ["None"], ["def", "lcm", "(", "a", ",", "b", ")", ":", "return", "abs", "(", "a", "*", "b", ")", "/", "math", ".", "gcd", "(", "a", ",", "b", ")", "if", "a", "and", "b", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.main.worker_init_fn": [[51, 53], ["numpy.random.seed", "numpy.random.get_state"], "function", ["None"], ["def", "worker_init_fn", "(", "worker_id", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "np", ".", "random", ".", "get_state", "(", ")", "[", "1", "]", "[", "0", "]", "+", "worker_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.main.train": [[55, 373], ["torch.device", "torch.device", "main.lcm", "os.path.join", "datasets.get_segmentation_dataset", "torch.utils.data.DataLoader", "utils.visualizer.Visualizer", "models.SGINetModel", "range", "print", "len", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "len", "len", "torch.cuda.set_device", "torch.cuda.set_device", "time.time", "enumerate", "numpy.loadtxt", "len", "torch.nn.parallel.DataParallel.cuda", "list", "print", "amp.initialize", "torch.nn.parallel.DataParallel.cuda", "apex.parallel.DistributedDataParallel", "len", "torch.utils.data.distributed.DistributedSampler.set_epoch", "iter", "input_dict[].to", "input_dict[].type().to", "input_dict[].to", "input_dict[].to", "input_dict[].to", "input_dict[].to", "input_dict[].to", "input_dict[].to", "input_dict[].to", "input_dict[].to", "torch.FloatTensor().zero_().to", "torch.FloatTensor().zero_().to", "torch.FloatTensor().zero_().to.scatter_", "input_dict[].type().to.clone", "torch.FloatTensor().zero_().to", "torch.FloatTensor().zero_().to", "torch.FloatTensor().zero_().to.scatter_", "torch.nn.parallel.DataParallel.forward", "generated_images.detach", "generated_seg_maps.detach", "one_hot_gt_seg_maps_masked_inst.detach.detach", "optimizer_G.zero_grad", "optimizer_G.step", "optimizer_D.zero_grad", "optimizer_D.step", "optimizer_D.zero_grad", "time.time", "print", "print", "numpy.savetxt", "torch.cuda.device_count", "torch.cuda.device_count", "range", "torch.device", "torch.device", "torch.nn.parallel.DataParallel", "torch.nn.parallel.DataParallel", "time.time", "generated_instances_pad.detach.detach", "dict", "dict", "dict.get", "dict.get", "optimizer_G_instance.zero_grad", "optimizer_G_instance.step", "loss_G.backward", "optimizer_D_obj.zero_grad", "optimizer_D_obj.step", "loss_D.backward", "collections.OrderedDict", "utils.visualizer.Visualizer.display_current_results", "print", "numpy.savetxt", "len", "torch.nn.parallel.DataParallel.module.save", "torch.nn.parallel.DataParallel.module.save", "torch.nn.parallel.DataParallel.save", "torch.nn.parallel.DataParallel.save", "torch.nn.parallel.DataParallel.module.update_learning_rate", "torch.nn.parallel.DataParallel.update_learning_rate", "amp.initialize", "amp.initialize", "input_dict[].type", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.mean", "torch.mean", "zip", "zip", "dict.get", "dict.get", "dict.get", "dict.get", "dict.get", "loss_instance.backward", "amp.scale_loss", "scaled_loss.backward", "loss_D_obj.backward", "amp.scale_loss", "scaled_loss.backward", "utils.visualizer.Visualizer.print_current_errors", "utils.visualizer.Visualizer.plot_current_errors", "len", "len", "torch.nn.parallel.DataParallel.module.save", "torch.nn.parallel.DataParallel.save", "dict.get", "amp.scale_loss", "scaled_loss_instance.backward", "amp.scale_loss", "scaled_loss_disc_obj.backward", "len", "utils.reduce_tensor", "os.getpid", "torch.get_rank", "torch.get_world_size", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "isinstance", "dict.get", "v.data.item", "dict.items", "torch.get_world_size", "dict.items", "time.time", "utils.tensor2label", "utils.tensor2label", "utils.tensor2im", "utils.tensor2im", "utils.tensor2im", "utils.tensor2im", "utils.tensor2im", "utils.tensor2label", "utils.tensor2label", "utils.tensor2im", "time.time", "dict.get", "torch.is_tensor", "torch.is_tensor", "isinstance", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor", "torch.Tensor"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.compute_yolo_detection.lcm", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.datasets.__init__.get_segmentation_dataset", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.AlexNet.forward", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.visualizer.Visualizer.display_current_results", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.save", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.save", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.save", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.save", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.base_model.BaseModel.update_learning_rate", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.base_model.BaseModel.update_learning_rate", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.visualizer.Visualizer.print_current_errors", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.visualizer.Visualizer.plot_current_errors", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.save", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.save", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.reduce_tensor", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.tensor2label", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.tensor2label", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.tensor2label", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.tensor2label", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.comm.FutureResult.get"], ["", "def", "train", "(", "gpu", ",", "opt", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "f\"cuda:{opt.gpu_ids[0]}\"", "if", "use_cuda", "else", "\"cpu\"", ")", "\n", "opt", ".", "print_freq", "=", "lcm", "(", "opt", ".", "print_freq", ",", "opt", ".", "batchSize", ")", "\n", "\n", "folder_name", "=", "\"SGI-NET\"", "\n", "\n", "iter_path", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "folder_name", ",", "opt", ".", "name", ",", "\n", "'iter.txt'", ")", "\n", "if", "opt", ".", "continue_train", ":", "\n", "        ", "try", ":", "\n", "            ", "start_epoch", ",", "epoch_iter", "=", "np", ".", "loadtxt", "(", "iter_path", ",", "delimiter", "=", "','", ",", "\n", "dtype", "=", "int", ")", "\n", "", "except", "FileNotFoundError", "as", "e", ":", "\n", "            ", "start_epoch", ",", "epoch_iter", "=", "1", ",", "0", "\n", "", "print", "(", "'Resuming from epoch %d at iteration %d'", "%", "(", "\n", "start_epoch", ",", "epoch_iter", ")", ")", "\n", "", "else", ":", "\n", "        ", "start_epoch", ",", "epoch_iter", "=", "1", ",", "0", "\n", "", "train_loader_kwargs", "=", "{", "'transform'", ":", "input_transform", ",", "\n", "\"gt_transform\"", ":", "gt_transform", ",", "\n", "\"inst_map_transform\"", ":", "inst_map_transform", ",", "\n", "\"root\"", ":", "opt", ".", "dataroot", ",", "\"opt\"", ":", "opt", "}", "\n", "trainset", "=", "get_segmentation_dataset", "(", "opt", ".", "dataset", ",", "split", "=", "'train'", ",", "mode", "=", "'train'", ",", "\n", "**", "train_loader_kwargs", ")", "\n", "if", "len", "(", "opt", ".", "gpu_ids", ")", ">", "1", ":", "\n", "        ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "\n", "trainset", ")", "\n", "", "else", ":", "\n", "        ", "train_sampler", "=", "None", "\n", "", "trainloader", "=", "data", ".", "DataLoader", "(", "trainset", ",", "batch_size", "=", "opt", ".", "batchSize", ",", "\n", "drop_last", "=", "True", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "opt", ".", "nThreads", ",", "worker_init_fn", "=", "worker_init_fn", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ")", "\n", "\n", "\n", "dataset_size", "=", "len", "(", "trainloader", ")", "*", "opt", ".", "batchSize", "\n", "visualizer", "=", "Visualizer", "(", "opt", ")", "\n", "total_steps", "=", "(", "start_epoch", "-", "1", ")", "*", "dataset_size", "+", "epoch_iter", "\n", "display_delta", "=", "total_steps", "%", "opt", ".", "display_freq", "\n", "print_delta", "=", "total_steps", "%", "opt", ".", "print_freq", "\n", "save_delta", "=", "total_steps", "%", "opt", ".", "save_latest_freq", "\n", "\n", "if", "len", "(", "opt", ".", "gpu_ids", ")", ">", "1", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "opt", ".", "local_rank", ")", "\n", "", "model", "=", "SGINetModel", "(", "opt", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "        ", "if", "len", "(", "opt", ".", "gpu_ids", ")", ">", "1", ":", "\n", "            ", "model", ".", "cuda", "(", ")", "\n", "n", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "//", "opt", ".", "local_world_size", "\n", "device", "=", "list", "(", "\n", "range", "(", "opt", ".", "local_rank", "*", "n", ",", "(", "opt", ".", "local_rank", "+", "1", ")", "*", "n", ")", ")", "\n", "print", "(", "f\"[{os.getpid()}] rank = {dist.get_rank()}, \"", "\n", "+", "f\"world_size = {dist.get_world_size()},\"", "\n", "f\" n = {n}, device_ids = {device}\"", ")", "\n", "opt_level", "=", "\"O1\"", "if", "opt", ".", "fp16", "else", "'O0'", "\n", "from", "apex", "import", "amp", "\n", "model", ",", "[", "optimizer_G", ",", "optimizer_D", ",", "optimizer_G_instance", ",", "\n", "optimizer_D_obj", "]", "=", "amp", ".", "initialize", "(", "model", ",", "[", "\n", "model", ".", "optimizer_G", ",", "model", ".", "optimizer_D", ",", "\n", "model", ".", "optimizer_G_instance", ",", "model", ".", "optimizer_D_obj", "]", ",", "\n", "opt_level", "=", "opt_level", ")", "\n", "model", ".", "cuda", "(", "device", "[", "0", "]", ")", "\n", "model", "=", "DDP", "(", "model", ",", "delay_allreduce", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "device", "=", "[", "torch", ".", "device", "(", "f\"cuda:{opt.gpu_ids[0]}\"", "if", "use_cuda", "else", "\"cpu\"", ")", "]", "\n", "if", "opt", ".", "fp16", ":", "\n", "                ", "from", "apex", "import", "amp", "\n", "if", "opt", ".", "use_bbox", ":", "\n", "                    ", "model", ",", "[", "optimizer_G", ",", "optimizer_D", ",", "optimizer_G_instance", ",", "\n", "optimizer_D_obj", "]", "=", "amp", ".", "initialize", "(", "model", ",", "[", "\n", "model", ".", "optimizer_G", ",", "model", ".", "optimizer_D", ",", "\n", "model", ".", "optimizer_G_instance", ",", "model", ".", "optimizer_D_obj", "]", ",", "\n", "opt_level", "=", "'O1'", ")", "\n", "", "else", ":", "\n", "                    ", "model", ",", "[", "optimizer_G", ",", "optimizer_D", "]", "=", "amp", ".", "initialize", "(", "\n", "model", ",", "[", "\n", "model", ".", "optimizer_G", ",", "model", ".", "optimizer_D", "]", ",", "\n", "opt_level", "=", "'O1'", ")", "\n", "", "model", "=", "DataParallel", "(", "model", ",", "device_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "", "else", ":", "\n", "                ", "model", "=", "DataParallel", "(", "model", ",", "device_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "if", "opt", ".", "use_bbox", ":", "\n", "                    ", "optimizer_G", ",", "optimizer_D", ",", "optimizer_G_instance", ",", "optimizer_D_obj", "=", "model", ".", "module", ".", "optimizer_G", ",", "model", ".", "module", ".", "optimizer_D", ",", "model", ".", "module", ".", "optimizer_G_instance", ",", "model", ".", "module", ".", "optimizer_D_obj", "\n", "", "else", ":", "\n", "                    ", "optimizer_G", ",", "optimizer_D", "=", "model", ".", "module", ".", "optimizer_G", ",", "model", ".", "module", ".", "optimizer_D", "\n", "\n", "", "", "", "", "else", ":", "\n", "        ", "optimizer_G", ",", "optimizer_D", ",", "optimizer_G_instance", ",", "optimizer_D_obj", "=", "model", ".", "optimizer_G", ",", "model", ".", "optimizer_D", ",", "model", ".", "optimizer_G_instance", ",", "model", ".", "optimizer_D_obj", "\n", "\n", "", "for", "epoch", "in", "range", "(", "start_epoch", ",", "opt", ".", "niter", "+", "opt", ".", "niter_decay", "+", "1", ")", ":", "\n", "        ", "epoch_start_time", "=", "time", ".", "time", "(", ")", "\n", "if", "epoch", "!=", "start_epoch", ":", "\n", "            ", "epoch_iter", "=", "epoch_iter", "%", "dataset_size", "\n", "", "if", "len", "(", "opt", ".", "gpu_ids", ")", ">", "1", ":", "\n", "            ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "", "for", "i", ",", "input_dict", "in", "enumerate", "(", "iter", "(", "trainloader", ")", ")", ":", "\n", "\n", "            ", "gt_images", "=", "input_dict", "[", "\"gt_images\"", "]", ".", "to", "(", "device", "[", "0", "]", ")", "\n", "gt_seg_maps", "=", "input_dict", "[", "\"gt_seg_maps\"", "]", ".", "type", "(", "torch", ".", "LongTensor", ")", ".", "to", "(", "device", "[", "0", "]", ")", "\n", "inst_maps", "=", "input_dict", "[", "\"inst_map\"", "]", ".", "to", "(", "device", "[", "0", "]", ")", "\n", "inst_maps_valid_idx", "=", "input_dict", "[", "\"inst_map_valid_idx\"", "]", ".", "to", "(", "device", "[", "0", "]", ")", "\n", "masks", "=", "input_dict", "[", "\"masks\"", "]", ".", "to", "(", "device", "[", "0", "]", ")", "\n", "indexes", "=", "input_dict", "[", "\"indexes\"", "]", ".", "to", "(", "device", "[", "0", "]", ")", "\n", "insta_maps_bbox", "=", "input_dict", "[", "\"insta_maps_bbox\"", "]", ".", "to", "(", "device", "[", "0", "]", ")", "\n", "inst_map_compact", "=", "input_dict", "[", "\"inst_map_compact\"", "]", ".", "to", "(", "device", "[", "0", "]", ")", "\n", "theta", "=", "input_dict", "[", "\"theta\"", "]", ".", "to", "(", "device", "[", "0", "]", ")", "\n", "compute_instance", "=", "input_dict", "[", "\"compute_instance\"", "]", ".", "to", "(", "device", "[", "0", "]", ")", "\n", "\n", "images_masked", "=", "(", "gt_images", "-", "gt_images", "*", "masks", ")", "\n", "if", "total_steps", "%", "opt", ".", "print_freq", "==", "print_delta", ":", "\n", "                ", "iter_start_time", "=", "time", ".", "time", "(", ")", "\n", "", "total_steps", "+=", "opt", ".", "batchSize", "\n", "epoch_iter", "+=", "opt", ".", "batchSize", "\n", "save_fake", "=", "total_steps", "%", "opt", ".", "display_freq", "==", "display_delta", "\n", "\n", "one_hot_seg_map", "=", "torch", ".", "FloatTensor", "(", "opt", ".", "batchSize", ",", "opt", ".", "semantic_nc", ",", "gt_seg_maps", ".", "shape", "[", "2", "]", ",", "\n", "gt_seg_maps", ".", "shape", "[", "3", "]", ")", ".", "zero_", "(", ")", ".", "to", "(", "device", "[", "0", "]", ")", "\n", "one_hot_seg_map", ".", "scatter_", "(", "1", ",", "gt_seg_maps", ",", "1", ")", "\n", "\n", "gt_seg_maps_masked", "=", "gt_seg_maps", ".", "clone", "(", ")", "\n", "gt_seg_maps_masked", "[", "masks", "==", "1.0", "]", "=", "opt", ".", "label_nc", "-", "1", "if", "opt", ".", "no_contain_dontcare_label", "else", "opt", ".", "label_nc", "\n", "one_hot_gt_seg_maps_masked", "=", "torch", ".", "FloatTensor", "(", "opt", ".", "batchSize", ",", "opt", ".", "semantic_nc", ",", "\n", "gt_seg_maps", ".", "shape", "[", "\n", "2", "]", ",", "\n", "gt_seg_maps", ".", "shape", "[", "\n", "3", "]", ")", ".", "zero_", "(", ")", ".", "to", "(", "\n", "device", "[", "0", "]", ")", "\n", "one_hot_gt_seg_maps_masked", ".", "scatter_", "(", "1", ",", "gt_seg_maps_masked", ",", "\n", "1.0", ")", "\n", "model_input", "=", "{", "\n", "\"one_hot_gt_seg_maps_masked\"", ":", "one_hot_gt_seg_maps_masked", ",", "\n", "\"one_hot_seg_map\"", ":", "one_hot_seg_map", ",", "\n", "\"gt_images_masked\"", ":", "images_masked", ",", "\n", "\"gt_images\"", ":", "gt_images", ",", "\n", "\"masks\"", ":", "masks", ",", "\n", "\"insta_maps_bbox\"", ":", "insta_maps_bbox", ",", "\n", "\"inst_maps\"", ":", "inst_maps", ",", "\n", "\"inst_maps_compact\"", ":", "inst_map_compact", ",", "\n", "\"theta_transform\"", ":", "theta", ",", "\n", "\"indexes\"", ":", "indexes", ",", "\n", "\"compute_loss_g\"", ":", "True", ",", "\n", "\"inst_maps_valid_idx\"", ":", "inst_maps_valid_idx", ",", "\n", "\"compute_instance\"", ":", "compute_instance", "}", "\n", "losses", ",", "generated_images", ",", "generated_instances_pad", ",", "generated_instances", ",", "generated_seg_maps", ",", "offset_flow", ",", "one_hot_gt_seg_maps_masked_inst", "=", "model", ".", "forward", "(", "model_input", ")", "\n", "output_images", "=", "generated_images", ".", "detach", "(", ")", "\n", "output_seg_maps", "=", "generated_seg_maps", ".", "detach", "(", ")", "\n", "one_hot_gt_seg_maps_masked_inst", "=", "one_hot_gt_seg_maps_masked_inst", ".", "detach", "(", ")", "\n", "\n", "if", "generated_instances", "[", "0", "]", "is", "not", "None", ":", "\n", "                ", "generated_instances_pad", "=", "generated_instances_pad", ".", "detach", "(", ")", "\n", "inst_map", "=", "inst_maps", "\n", "", "else", ":", "\n", "                ", "inst_map", "=", "[", "None", "]", "\n", "", "blended_images", "=", "(", "output_images", "*", "masks", "+", "gt_images", "*", "(", "1", "-", "masks", ")", ")", ".", "cpu", "(", ")", "\n", "# sum per device losses", "\n", "losses", "=", "[", "\n", "torch", ".", "mean", "(", "x", ")", "if", "not", "isinstance", "(", "x", ",", "\n", "int", ")", "and", "x", "is", "not", "None", "else", "x", "\n", "for", "x", "in", "losses", "]", "\n", "if", "use_cuda", ":", "\n", "                ", "loss_dict", "=", "dict", "(", "zip", "(", "model", ".", "module", ".", "loss_names", ",", "losses", ")", ")", "\n", "", "else", ":", "\n", "                ", "loss_dict", "=", "dict", "(", "zip", "(", "model", ".", "loss_names", ",", "losses", ")", ")", "\n", "# calculate final loss scalar", "\n", "", "loss_D", "=", "(", "loss_dict", "[", "'D_fake'", "]", "+", "loss_dict", "[", "'D_real'", "]", ")", "*", "0.5", "\n", "loss_D_obj", "=", "(", "loss_dict", ".", "get", "(", "\"D_fake_obj\"", ",", "0", ")", "+", "loss_dict", ".", "get", "(", "\"D_real_obj\"", ",", "0", ")", ")", "*", "0.5", "\n", "\n", "############### Backward Pass ####################", "\n", "# update generator weights", "\n", "# Update G", "\n", "loss_G", "=", "loss_dict", "[", "'G_GAN'", "]", "+", "loss_dict", ".", "get", "(", "'G_GAN_Feat'", ",", "0", ")", "+", "loss_dict", ".", "get", "(", "'G_perceptual_'", "+", "\n", "opt", ".", "which_perceptual_loss", ",", "0", ")", "+", "loss_dict", ".", "get", "(", "\"G_Image_Rec\"", ",", "0", ")", "+", "loss_dict", ".", "get", "(", "\"G_seg_map_rec\"", ",", "0", ")", "+", "loss_dict", ".", "get", "(", "\"G_Style\"", ",", "0", ")", "\n", "loss_instance", "=", "loss_dict", ".", "get", "(", "'G_KL_inst'", ",", "0", ")", "+", "loss_dict", ".", "get", "(", "'G_Inst_rec'", ",", "0", ")", "+", "loss_dict", ".", "get", "(", "\"G_GAN_obj\"", ",", "0", ")", "\n", "optimizer_G", ".", "zero_grad", "(", ")", "\n", "if", "opt", ".", "use_bbox", ":", "\n", "                ", "optimizer_G_instance", ".", "zero_grad", "(", ")", "\n", "if", "opt", ".", "fp16", ":", "\n", "                    ", "with", "amp", ".", "scale_loss", "(", "loss_instance", ",", "optimizer_G_instance", ")", "as", "scaled_loss_instance", ":", "\n", "                        ", "scaled_loss_instance", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "                    ", "loss_instance", ".", "backward", "(", ")", "\n", "", "optimizer_G_instance", ".", "step", "(", ")", "\n", "", "if", "opt", ".", "fp16", ":", "\n", "                ", "with", "amp", ".", "scale_loss", "(", "loss_G", ",", "optimizer_G", ")", "as", "scaled_loss", ":", "\n", "                    ", "scaled_loss", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "loss_G", ".", "backward", "(", ")", "\n", "", "optimizer_G", ".", "step", "(", ")", "\n", "# update discriminator weights", "\n", "if", "opt", ".", "use_bbox", ":", "\n", "                ", "optimizer_D_obj", ".", "zero_grad", "(", ")", "\n", "if", "opt", ".", "fp16", ":", "\n", "                    ", "with", "amp", ".", "scale_loss", "(", "loss_D_obj", ",", "optimizer_D_obj", ")", "as", "scaled_loss_disc_obj", ":", "\n", "                        ", "scaled_loss_disc_obj", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "                    ", "loss_D_obj", ".", "backward", "(", ")", "\n", "", "optimizer_D_obj", ".", "step", "(", ")", "\n", "\n", "", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "if", "opt", ".", "fp16", ":", "\n", "                ", "with", "amp", ".", "scale_loss", "(", "loss_D", ",", "optimizer_D", ")", "as", "scaled_loss", ":", "\n", "                    ", "scaled_loss", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "loss_D", ".", "backward", "(", ")", "\n", "", "optimizer_D", ".", "step", "(", ")", "\n", "\n", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "\n", "############## Display results and errors ##########", "\n", "### print out errors", "\n", "if", "total_steps", "%", "opt", ".", "print_freq", "==", "print_delta", ":", "\n", "                ", "if", "not", "len", "(", "opt", ".", "gpu_ids", ")", ">", "1", ":", "\n", "                    ", "errors", "=", "{", "k", ":", "v", ".", "data", ".", "item", "(", ")", "if", "not", "isinstance", "(", "v", ",", "\n", "int", ")", "and", "v", "is", "not", "None", "else", "v", "\n", "for", "k", ",", "v", "\n", "in", "loss_dict", ".", "items", "(", ")", "}", "\n", "", "else", ":", "\n", "                    ", "errors", "=", "{", "k", ":", "util", ".", "reduce_tensor", "(", "v", ".", "data", "if", "torch", ".", "is_tensor", "(", "v", ")", "else", "torch", ".", "Tensor", "(", "[", "v", "]", ")", ".", "to", "(", "device", "[", "0", "]", ")", ".", "data", ",", "dist", ".", "get_world_size", "(", ")", ")", "for", "k", ",", "v", "\n", "in", "loss_dict", ".", "items", "(", ")", "}", "\n", "", "if", "opt", ".", "local_rank", "==", "0", ":", "\n", "                    ", "t", "=", "(", "time", ".", "time", "(", ")", "-", "iter_start_time", ")", "/", "opt", ".", "print_freq", "\n", "visualizer", ".", "print_current_errors", "(", "epoch", ",", "epoch_iter", ",", "errors", ",", "\n", "t", ")", "\n", "visualizer", ".", "plot_current_errors", "(", "errors", ",", "total_steps", ")", "\n", "# call([\"nvidia-smi\", \"--format=csv\", \"--query-gpu=memory.used,memory.free\"])", "\n", "\n", "### display output images", "\n", "", "", "if", "len", "(", "opt", ".", "gpu_ids", ")", ">", "1", "and", "opt", ".", "local_rank", "!=", "0", ":", "\n", "                ", "save_fake", "=", "False", "\n", "", "if", "save_fake", ":", "\n", "                ", "visuals", "=", "OrderedDict", "(", "[", "(", "'gt_seg_map'", ",", "\n", "util", ".", "tensor2label", "(", "gt_seg_maps", "[", "0", "]", ",", "\n", "opt", ".", "semantic_nc", ")", ")", ",", "\n", "(", "'gt_seg_map_masked'", ",", "\n", "util", ".", "tensor2label", "(", "one_hot_gt_seg_maps_masked_inst", "[", "0", "]", ",", "\n", "opt", ".", "semantic_nc", ")", ")", ",", "\n", "(", "'real_image'", ",", "\n", "util", ".", "tensor2im", "(", "gt_images", "[", "0", "]", ")", ")", ",", "\n", "(", "'inst_map'", ",", "\n", "util", ".", "tensor2im", "(", "inst_map", "[", "0", "]", ",", "normalize", "=", "False", ")", ")", ",", "\n", "(", "'masked_image'", ",", "\n", "util", ".", "tensor2im", "(", "images_masked", "[", "0", "]", ")", ")", ",", "\n", "(", "\"expected_flow\"", ",", "\n", "util", ".", "tensor2im", "(", "offset_flow", "[", "0", "]", ")", ")", ",", "\n", "(", "'fake_image'", ",", "\n", "util", ".", "tensor2im", "(", "output_images", "[", "0", "]", ")", ")", ",", "\n", "(", "\"fake_instance_pad\"", ",", "\n", "util", ".", "tensor2label", "(", "\n", "generated_instances_pad", "[", "0", "]", ",", "\n", "opt", ".", "semantic_nc", ")", ")", ",", "\n", "(", "'fake_seg_maps'", ",", "\n", "util", ".", "tensor2label", "(", "output_seg_maps", "[", "0", "]", ",", "\n", "opt", ".", "semantic_nc", ")", ")", ",", "\n", "(", "'reconstructed_image'", ",", "\n", "util", ".", "tensor2im", "(", "blended_images", "[", "0", "]", ")", ")", "\n", "]", ")", "\n", "visualizer", ".", "display_current_results", "(", "visuals", ",", "epoch", ",", "\n", "total_steps", ")", "\n", "### save latest model", "\n", "", "if", "len", "(", "opt", ".", "gpu_ids", ")", ">", "1", "and", "opt", ".", "local_rank", "!=", "0", ":", "\n", "                ", "save_model", "=", "False", "\n", "", "else", ":", "\n", "                ", "save_model", "=", "True", "\n", "", "if", "(", "total_steps", "%", "opt", ".", "save_latest_freq", "==", "save_delta", ")", "and", "save_model", ":", "\n", "\n", "                ", "print", "(", "\n", "'saving the latest model (epoch %d, total_steps %d)'", "%", "(", "\n", "epoch", ",", "total_steps", ")", ")", "\n", "if", "use_cuda", ":", "\n", "                    ", "model", ".", "module", ".", "save", "(", "'latest'", ")", "\n", "", "else", ":", "\n", "                    ", "model", ".", "save", "(", "'latest'", ")", "\n", "", "np", ".", "savetxt", "(", "iter_path", ",", "(", "epoch", ",", "epoch_iter", ")", ",", "delimiter", "=", "','", ",", "\n", "fmt", "=", "'%d'", ")", "\n", "", "if", "epoch_iter", ">=", "dataset_size", ":", "\n", "                ", "break", "\n", "# end of epoch", "\n", "", "", "if", "opt", ".", "local_rank", "==", "0", ":", "\n", "            ", "iter_end_time", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'End of epoch %d / %d \\t Time Taken: %d sec'", "%", "\n", "(", "epoch", ",", "opt", ".", "niter", "+", "opt", ".", "niter_decay", ",", "\n", "time", ".", "time", "(", ")", "-", "epoch_start_time", ")", ")", "\n", "\n", "### save model for this epoch", "\n", "", "if", "len", "(", "opt", ".", "gpu_ids", ")", ">", "1", "and", "opt", ".", "local_rank", "!=", "0", ":", "\n", "            ", "save_model", "=", "False", "\n", "", "else", ":", "\n", "            ", "save_model", "=", "True", "\n", "", "if", "(", "epoch", "%", "opt", ".", "save_epoch_freq", "==", "0", ")", "and", "save_model", ":", "\n", "            ", "print", "(", "'saving the model at the end of epoch %d, iters %d'", "%", "(", "\n", "epoch", ",", "total_steps", ")", ")", "\n", "if", "use_cuda", ":", "\n", "                ", "model", ".", "module", ".", "save", "(", "'latest'", ")", "\n", "model", ".", "module", ".", "save", "(", "epoch", ")", "\n", "", "else", ":", "\n", "                ", "model", ".", "save", "(", "'latest'", ")", "\n", "model", ".", "save", "(", "epoch", ")", "\n", "", "np", ".", "savetxt", "(", "iter_path", ",", "(", "epoch", "+", "1", ",", "0", ")", ",", "delimiter", "=", "','", ",", "fmt", "=", "'%d'", ")", "\n", "\n", "### linearly decay learning rate after certain iterations", "\n", "", "if", "epoch", ">", "opt", ".", "niter", ":", "\n", "            ", "if", "use_cuda", ":", "\n", "                ", "model", ".", "module", ".", "update_learning_rate", "(", ")", "\n", "", "else", ":", "\n", "                ", "model", ".", "update_learning_rate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.main.test_sgi": [[374, 565], ["utils.load_latent_vector_appr", "os.path.join", "utils.html.HTML", "utils.visualizer.Visualizer", "models.SGINetInferenceModel", "print", "range", "torch.stack().numpy", "torch.stack().numpy", "torch.stack().numpy", "torch.stack().numpy", "torch.stack().numpy", "torch.stack().numpy", "utils.fid.calculate_fid", "utils.fid.calculate_fid", "print", "utils.visualizer.Visualizer.print_results", "glob.glob", "epoch.split", "torch.nn.DataParallel", "torch.nn.DataParallel", "print", "datasets.get_segmentation_dataset", "torch.utils.data.DataLoader", "tqdm.tqdm", "enumerate", "html.HTML.save", "len", "len", "real_images[].numpy", "fake_images[].cpu().numpy", "fake_images_no_cond[].cpu().numpy", "numpy.square().sum", "numpy.abs().sum", "pytorch_msssim.ssim", "pytorch_msssim.ssim", "skimage.metrics.peak_signal_noise_ratio", "skimage.metrics.peak_signal_noise_ratio", "gt_seg_maps.clone().type().to", "torch.FloatTensor().zero_().to", "torch.FloatTensor().zero_().to", "one_hot_gt_seg_maps_masked.scatter_.scatter_", "torch.nn.DataParallel.forward", "generated_images.detach().cpu", "res_no_cond[].detach().cpu", "generated_seg_maps.detach().cpu", "res_no_cond[].detach().cpu", "one_hot_gt_seg_maps_masked_inst.detach().cpu.detach().cpu", "res_no_cond[].detach().cpu", "range", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "[].split", "os.path.join", "gt_images.to", "masks.to", "insta_maps_bbox.to", "inst_maps.to", "inst_map_compact.to", "theta.to", "[].unsqueeze", "generated_instances.detach().cpu", "len", "torch.stack().numpy.append", "torch.stack().numpy.append", "torch.stack().numpy.append", "collections.OrderedDict", "utils.visualizer.Visualizer.save_images", "fake_images[].cpu", "fake_images_no_cond[].cpu", "numpy.square", "numpy.abs", "fake_images[].cpu().numpy.transpose", "real_images[].numpy.transpose", "fake_images_no_cond[].cpu().numpy.transpose", "real_images[].numpy.transpose", "gt_images.to", "masks.to", "gt_seg_maps.clone().type", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "generated_images.detach", "res_no_cond[].detach", "generated_seg_maps.detach", "res_no_cond[].detach", "one_hot_gt_seg_maps_masked_inst.detach().cpu.detach", "res_no_cond[].detach", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "generated_instances.detach", "x.split", "gt_seg_maps.clone", "torch.FloatTensor", "torch.FloatTensor", "util.load_latent_vector_appr.to", "utils.tensor2label", "utils.tensor2label", "utils.tensor2label", "utils.tensor2im", "utils.tensor2im", "utils.tensor2im", "utils.tensor2im", "utils.tensor2im", "utils.tensor2im", "utils.tensor2im", "utils.tensor2label", "utils.tensor2label", "utils.tensor2im", "utils.tensor2label", "utils.tensor2im", "images_masked.cpu"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.load_latent_vector_appr", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.fid.calculate_fid", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.fid.calculate_fid", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPanopticSemanticLabeling.print_results", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.datasets.__init__.get_segmentation_dataset", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.save", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.AlexNet.forward", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.visualizer.Visualizer.save_images", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.tensor2label", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.tensor2label", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.tensor2label", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.tensor2label", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.tensor2label", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.tensor2label", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2im"], ["", "", "", "", "def", "test_sgi", "(", "opt", ")", ":", "\n", "    ", "folder_name", "=", "\"SGI-NET\"", "\n", "import", "glob", "\n", "epochs", "=", "[", "f\"epoch_{x.split('/')[-1].split('_')[0]}\"", "for", "x", "in", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "folder_name", ",", "opt", ".", "name", ")", "+", "\"/latest*SGI*_G.pth\"", ")", "]", "\n", "test_z_appr", "=", "util", ".", "load_latent_vector_appr", "(", "opt", ")", "\n", "for", "epoch", "in", "epochs", ":", "\n", "        ", "old_epoch_folder", "=", "epoch", ".", "split", "(", "\"_\"", ")", "[", "1", "]", "\n", "opt", ".", "which_epoch", "=", "epoch", "\n", "web_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "folder_name", ",", "opt", ".", "name", ",", "\"test\"", ",", "opt", ".", "which_epoch", ",", "\"results\"", ")", "\n", "webpage", "=", "html", ".", "HTML", "(", "web_dir", ",", "'Experiment = %s, Phase = %s, Epoch = %s'", "%", "(", "\n", "opt", ".", "name", ",", "opt", ".", "phase", ",", "opt", ".", "which_epoch", ")", ")", "\n", "\n", "visualizer", "=", "Visualizer", "(", "opt", ")", "\n", "opt", ".", "which_epoch", "=", "old_epoch_folder", "\n", "model", "=", "SGINetInferenceModel", "(", "opt", ")", "\n", "if", "use_cuda", ":", "\n", "            ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "", "opt", ".", "which_epoch", "=", "epoch", "\n", "real_images", "=", "[", "]", "\n", "fake_images", "=", "[", "]", "\n", "fake_images_no_cond", "=", "[", "]", "\n", "l1", "=", "0", "\n", "l2", "=", "0", "\n", "psnr_all", "=", "[", "]", "\n", "ssim_score", "=", "0", "\n", "ssim_score_no_cond", "=", "0", "\n", "psnr_score", "=", "0", "\n", "psnr_score_no_cond", "=", "0", "\n", "count", "=", "0", "\n", "for", "crop_type", "in", "[", "\"left\"", ",", "\"center\"", ",", "\"right\"", "]", ":", "\n", "            ", "print", "(", "f\"epoch: {epoch} crop_type:{crop_type}\\n\"", ")", "\n", "test_loader_kwargs", "=", "{", "'transform'", ":", "input_transform", ",", "\n", "\"gt_transform\"", ":", "gt_transform", ",", "\n", "\"inst_map_transform\"", ":", "inst_map_transform", ",", "\n", "\"root\"", ":", "opt", ".", "dataroot", ",", "\"opt\"", ":", "opt", ",", "\n", "\"crop_type\"", ":", "crop_type", "}", "\n", "testset", "=", "get_segmentation_dataset", "(", "opt", ".", "dataset", ",", "split", "=", "'test'", ",", "\n", "mode", "=", "'test'", ",", "\n", "**", "test_loader_kwargs", ")", "\n", "\n", "testloader", "=", "data", ".", "DataLoader", "(", "testset", ",", "batch_size", "=", "1", ",", "\n", "drop_last", "=", "False", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "1", ")", "\n", "tbar", "=", "tqdm", "(", "testloader", ",", "leave", "=", "True", ")", "\n", "for", "i", ",", "input_dict", "in", "enumerate", "(", "tbar", ")", ":", "\n", "                ", "count", "+=", "1", "\n", "gt_images", "=", "input_dict", "[", "\"gt_images\"", "]", "\n", "gt_seg_maps", "=", "input_dict", "[", "\"gt_seg_maps\"", "]", "\n", "inst_maps", "=", "input_dict", "[", "\"inst_map\"", "]", "\n", "inst_maps_valid_idx", "=", "input_dict", "[", "\"inst_map_valid_idx\"", "]", "\n", "images_path", "=", "input_dict", "[", "\"images_path\"", "]", "\n", "masks", "=", "input_dict", "[", "\"masks\"", "]", "\n", "indexes", "=", "input_dict", "[", "\"indexes\"", "]", "\n", "insta_maps_bbox", "=", "input_dict", "[", "\"insta_maps_bbox\"", "]", "\n", "inst_map_compact", "=", "input_dict", "[", "\"inst_map_compact\"", "]", "\n", "theta", "=", "input_dict", "[", "\"theta\"", "]", "\n", "compute_instance", "=", "input_dict", "[", "\"compute_instance\"", "]", "\n", "images_masked", "=", "(", "\n", "gt_images", ".", "to", "(", "device", "[", "0", "]", ")", "-", "gt_images", ".", "to", "(", "device", "[", "0", "]", ")", "*", "masks", ".", "to", "(", "\n", "device", "[", "0", "]", ")", ")", "\n", "\n", "\n", "gt_seg_maps_masked", "=", "gt_seg_maps", ".", "clone", "(", ")", ".", "type", "(", "torch", ".", "LongTensor", ")", ".", "to", "(", "\n", "device", "[", "0", "]", ")", "\n", "gt_seg_maps_masked", "[", "masks", "==", "1.0", "]", "=", "opt", ".", "label_nc", "-", "1", "if", "opt", ".", "no_contain_dontcare_label", "else", "opt", ".", "label_nc", "\n", "one_hot_gt_seg_maps_masked", "=", "torch", ".", "FloatTensor", "(", "1", ",", "opt", ".", "semantic_nc", ",", "\n", "gt_seg_maps", ".", "shape", "[", "2", "]", ",", "\n", "gt_seg_maps", ".", "shape", "[", "\n", "3", "]", ")", ".", "zero_", "(", ")", ".", "to", "(", "\n", "device", "[", "0", "]", ")", "\n", "one_hot_gt_seg_maps_masked", "=", "one_hot_gt_seg_maps_masked", ".", "scatter_", "(", "1", ",", "gt_seg_maps_masked", ",", "1.0", ")", "\n", "model_input", "=", "{", "\n", "\"one_hot_gt_seg_maps_masked\"", ":", "one_hot_gt_seg_maps_masked", ",", "\n", "\"gt_images_masked\"", ":", "images_masked", ",", "\n", "\"masks\"", ":", "masks", ".", "to", "(", "device", "[", "0", "]", ")", ",", "\n", "\"insta_maps_bbox\"", ":", "insta_maps_bbox", ".", "to", "(", "device", "[", "0", "]", ")", ",", "\n", "\"inst_maps\"", ":", "inst_maps", ".", "to", "(", "device", "[", "0", "]", ")", ",", "\n", "\"inst_maps_compact\"", ":", "inst_map_compact", ".", "to", "(", "device", "[", "0", "]", ")", ",", "\n", "\"theta_transform\"", ":", "theta", ".", "to", "(", "device", "[", "0", "]", ")", ",", "\n", "\"inst_maps_valid_idx\"", ":", "inst_maps_valid_idx", ",", "\n", "\"compute_instance\"", ":", "compute_instance", ",", "\n", "\"indexes\"", ":", "indexes", ",", "\n", "\"test_z_appr\"", ":", "test_z_appr", ".", "to", "(", "device", "[", "0", "]", ")", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ",", "\n", "\"use_gt_instance_encoder\"", ":", "opt", ".", "use_gt_instance_encoder", "}", "\n", "generated_images", ",", "generated_instances", ",", "generated_seg_maps", ",", "offset_flow", ",", "one_hot_gt_seg_maps_masked_inst", ",", "res_no_cond", "=", "model", ".", "forward", "(", "\n", "model_input", ")", "\n", "output_images", "=", "generated_images", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "output_images_no_cond", "=", "res_no_cond", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "output_seg_maps", "=", "generated_seg_maps", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "output_seg_maps_no_cond", "=", "res_no_cond", "[", "1", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "one_hot_gt_seg_maps_masked_inst", "=", "one_hot_gt_seg_maps_masked_inst", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "one_hot_gt_seg_maps_masked_inst_no_cond", "=", "res_no_cond", "[", "-", "1", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "if", "generated_instances", "[", "0", "]", "is", "not", "None", ":", "\n", "                    ", "output_gen_instances", "=", "generated_instances", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "inst_map_bbox", "=", "insta_maps_bbox", "\n", "inst_map", "=", "inst_maps", "\n", "", "completed_images", "=", "output_images", "*", "masks", "+", "gt_images", "*", "(", "1", "-", "masks", ")", "\n", "completed_images_no_cond", "=", "output_images_no_cond", "*", "masks", "+", "gt_images", "*", "(", "1", "-", "masks", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "gt_images", ")", ")", ":", "\n", "                    ", "real_images", ".", "append", "(", "gt_images", "[", "j", "]", ")", "\n", "fake_images", ".", "append", "(", "completed_images", "[", "j", "]", ")", "\n", "fake_images_no_cond", ".", "append", "(", "completed_images_no_cond", "[", "j", "]", ")", "\n", "visuals", "=", "OrderedDict", "(", "[", "(", "'gt_seg_map'", ",", "\n", "util", ".", "tensor2label", "(", "gt_seg_maps", "[", "0", "]", ",", "\n", "opt", ".", "label_nc", ")", ")", ",", "\n", "(", "'gt_seg_map_masked'", ",", "\n", "util", ".", "tensor2label", "(", "\n", "one_hot_gt_seg_maps_masked_inst", "[", "0", "]", ",", "\n", "opt", ".", "semantic_nc", ")", ")", ",", "\n", "(", "'gt_seg_map_masked_no_cond'", ",", "\n", "util", ".", "tensor2label", "(", "\n", "one_hot_gt_seg_maps_masked_inst_no_cond", "[", "0", "]", ",", "\n", "opt", ".", "semantic_nc", ")", ")", ",", "\n", "(", "'real_image'", ",", "\n", "util", ".", "tensor2im", "(", "gt_images", "[", "0", "]", ")", ")", ",", "\n", "(", "'inst_map'", ",", "\n", "util", ".", "tensor2im", "(", "inst_map", "[", "0", "]", ")", ")", ",", "\n", "(", "'inst_bbox'", ",", "\n", "util", ".", "tensor2im", "(", "inst_map_bbox", "[", "0", "]", ")", ")", ",", "\n", "(", "'masked_image'", ",", "\n", "util", ".", "tensor2im", "(", "images_masked", ".", "cpu", "(", ")", "[", "0", "]", ")", ")", ",", "\n", "(", "\"expected_flow\"", ",", "\n", "util", ".", "tensor2im", "(", "offset_flow", "[", "0", "]", ")", ")", ",", "\n", "(", "'fake_image'", ",", "\n", "util", ".", "tensor2im", "(", "output_images", "[", "0", "]", ")", ")", ",", "\n", "(", "'fake_image_no_cond'", ",", "\n", "util", ".", "tensor2im", "(", "output_images_no_cond", "[", "0", "]", ")", ")", ",", "\n", "(", "\"fake_instance\"", ",", "\n", "util", ".", "tensor2label", "(", "\n", "output_gen_instances", "[", "0", "]", ",", "\n", "opt", ".", "semantic_nc", ")", ")", ",", "\n", "(", "'fake_seg_maps'", ",", "\n", "util", ".", "tensor2label", "(", "output_seg_maps", "[", "0", "]", ",", "\n", "opt", ".", "semantic_nc", ")", ")", ",", "\n", "(", "'reconstructed_image'", ",", "\n", "util", ".", "tensor2im", "(", "completed_images", "[", "0", "]", ")", ")", ",", "\n", "(", "'fake_seg_maps_no_cond'", ",", "\n", "util", ".", "tensor2label", "(", "\n", "output_seg_maps_no_cond", "[", "0", "]", ",", "\n", "opt", ".", "semantic_nc", ")", ")", ",", "\n", "(", "'reconstructed_image_no_cond'", ",", "\n", "util", ".", "tensor2im", "(", "\n", "completed_images_no_cond", "[", "0", "]", ")", ")", "\n", "]", ")", "\n", "visualizer", ".", "save_images", "(", "webpage", ",", "visuals", ",", "[", "f\"{images_path[j][:-4]}_{crop_type}{images_path[j][-4:]}\"", "]", ")", "\n", "\n", "", "", "webpage", ".", "save", "(", ")", "\n", "", "print", "(", "len", "(", "real_images", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "real_images", ")", ")", ":", "\n", "            ", "real", "=", "real_images", "[", "i", "]", ".", "numpy", "(", ")", "\n", "fake", "=", "fake_images", "[", "i", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "fake_no_cond", "=", "fake_images_no_cond", "[", "i", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "t", "=", "real", "-", "fake", "\n", "t1", "=", "real", "-", "fake_no_cond", "\n", "l2", "+=", "np", ".", "square", "(", "t", ")", ".", "sum", "(", "(", "0", ",", "1", ",", "2", ")", ",", "keepdims", "=", "True", ")", "\n", "l1", "+=", "np", ".", "abs", "(", "t", ")", ".", "sum", "(", "(", "0", ",", "1", ",", "2", ")", ",", "keepdims", "=", "True", ")", "\n", "real", "=", "(", "real", "+", "1", ")", "*", "127.5", "\n", "fake", "=", "(", "fake", "+", "1", ")", "*", "127.5", "\n", "fake_no_cond", "=", "(", "fake_no_cond", "+", "1", ")", "*", "127.5", "\n", "ssim_score", "+=", "ssim", "(", "torch", ".", "from_numpy", "(", "real", ")", ".", "unsqueeze", "(", "0", ")", ",", "\n", "torch", ".", "from_numpy", "(", "fake", ")", ".", "unsqueeze", "(", "0", ")", ",", "\n", "data_range", "=", "255", ",", "size_average", "=", "True", ")", "\n", "ssim_score_no_cond", "+=", "ssim", "(", "torch", ".", "from_numpy", "(", "real", ")", ".", "unsqueeze", "(", "0", ")", ",", "\n", "torch", ".", "from_numpy", "(", "fake_no_cond", ")", ".", "unsqueeze", "(", "0", ")", ",", "\n", "data_range", "=", "255", ",", "size_average", "=", "True", ")", "\n", "psnr_score", "+=", "compare_psnr", "(", "fake", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "/", "255", ",", "\n", "real", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "/", "255", ",", "data_range", "=", "1", ")", "\n", "psnr_score_no_cond", "+=", "compare_psnr", "(", "fake_no_cond", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "/", "255", ",", "\n", "real", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "/", "255", ",", "\n", "data_range", "=", "1", ")", "\n", "", "real_images", "=", "torch", ".", "stack", "(", "[", "(", "(", "real_image", "+", "1", ")", "*", "0.5", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "for", "real_image", "in", "real_images", "]", ",", "dim", "=", "0", ")", ".", "numpy", "(", ")", "\n", "fake_images", "=", "torch", ".", "stack", "(", "[", "(", "(", "fake_image", "+", "1", ")", "*", "0.5", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "for", "fake_image", "in", "fake_images", "]", ",", "dim", "=", "0", ")", ".", "numpy", "(", ")", "\n", "fake_images_no_cond", "=", "torch", ".", "stack", "(", "[", "(", "(", "fake_image_no_cond", "+", "1", ")", "*", "0.5", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "for", "fake_image_no_cond", "in", "fake_images_no_cond", "]", ",", "dim", "=", "0", ")", ".", "numpy", "(", ")", "\n", "fid_cond", "=", "calculate_fid", "(", "real_images", ",", "fake_images", ",", "True", ",", "8", ")", "\n", "fid_no_cond", "=", "calculate_fid", "(", "real_images", ",", "fake_images_no_cond", ",", "True", ",", "8", ")", "\n", "final_psnr", "=", "psnr_score", "/", "count", "\n", "final_psnr_no_cond", "=", "psnr_score_no_cond", "/", "count", "\n", "final_ssim", "=", "ssim_score", "/", "count", "\n", "final_ssim_no_cond", "=", "ssim_score_no_cond", "/", "count", "\n", "print", "(", "f\"epoch: {epoch} count: {count}\"", ")", "\n", "results", "=", "{", "\"l1\"", ":", "l1", "/", "count", ",", "\n", "\"l2\"", ":", "l2", "/", "count", ",", "\n", "\"psnr\"", ":", "final_psnr", ",", "\n", "\"ssim\"", ":", "final_ssim", ",", "\n", "\"psnr_no_cond\"", ":", "final_psnr_no_cond", ",", "\n", "\"ssim_no_cond\"", ":", "final_ssim_no_cond", ",", "\n", "\"fid_cond\"", ":", "fid_cond", ",", "\n", "\"fid_no_cond\"", ":", "fid_no_cond", "\n", "}", "\n", "visualizer", ".", "print_results", "(", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_idd.check_bbox_occlusion": [[17, 43], ["float", "float", "Rectangle", "Rectangle", "preprocess_idd.check_bbox_occlusion.touch"], "function", ["None"], ["def", "check_bbox_occlusion", "(", "bbox1", ",", "bbox2", ")", ":", "\n", "\n", "    ", "def", "x_touch", "(", "bbox1", ",", "bbox2", ")", ":", "\n", "        ", "return", "bbox1", "[", "2", "]", "==", "bbox2", "[", "0", "]", "and", "(", "(", "bbox1", "[", "1", "]", "<=", "bbox2", "[", "1", "]", "<=", "bbox1", "[", "3", "]", ")", "or", "(", "bbox1", "[", "1", "]", "<=", "bbox2", "[", "3", "]", "<=", "bbox1", "[", "3", "]", ")", ")", "\n", "\n", "", "def", "y_touch", "(", "bbox1", ",", "bbox2", ")", ":", "\n", "        ", "return", "bbox1", "[", "1", "]", "==", "bbox2", "[", "3", "]", "and", "(", "(", "bbox1", "[", "0", "]", "<=", "bbox2", "[", "0", "]", "<=", "bbox1", "[", "2", "]", ")", "or", "(", "bbox1", "[", "0", "]", "<=", "bbox2", "[", "2", "]", "<=", "bbox1", "[", "2", "]", ")", ")", "\n", "\n", "", "def", "touch", "(", "bbox1", ",", "bbox2", ")", ":", "\n", "        ", "return", "x_touch", "(", "bbox1", ",", "bbox2", ")", "or", "x_touch", "(", "bbox2", ",", "bbox1", ")", "or", "y_touch", "(", "bbox1", ",", "bbox2", ")", "or", "y_touch", "(", "bbox2", ",", "bbox1", ")", "\n", "\n", "", "def", "overlap", "(", "a", ",", "b", ")", ":", "# returns None if rectangles don't intersect", "\n", "        ", "height", "=", "float", "(", "a", "[", "2", "]", "-", "a", "[", "0", "]", "+", "1", ")", "\n", "width", "=", "float", "(", "a", "[", "3", "]", "-", "a", "[", "1", "]", "+", "1", ")", "\n", "a", "=", "Rectangle", "(", "a", "[", "0", "]", ",", "a", "[", "1", "]", ",", "a", "[", "2", "]", ",", "a", "[", "3", "]", ")", "\n", "b", "=", "Rectangle", "(", "b", "[", "0", "]", ",", "b", "[", "1", "]", ",", "b", "[", "2", "]", ",", "b", "[", "3", "]", ")", "\n", "dx", "=", "min", "(", "a", ".", "xmax", ",", "b", ".", "xmax", ")", "-", "max", "(", "a", ".", "xmin", ",", "b", ".", "xmin", ")", "\n", "dy", "=", "min", "(", "a", ".", "ymax", ",", "b", ".", "ymax", ")", "-", "max", "(", "a", ".", "ymin", ",", "b", ".", "ymin", ")", "\n", "if", "(", "dx", ">=", "0", ")", "and", "(", "dy", ">=", "0", ")", ":", "\n", "            ", "if", "dx", "*", "dy", ">", "0.05", "*", "height", "*", "width", ":", "\n", "                ", "return", "True", "\n", "", "else", ":", "\n", "                ", "return", "False", "\n", "", "", "else", ":", "\n", "            ", "return", "False", "\n", "", "", "return", "touch", "(", "bbox1", ",", "bbox2", ")", "or", "overlap", "(", "bbox1", ",", "bbox2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_idd.check_occlusion": [[45, 53], ["list", "any", "any", "map", "preprocess_idd.check_bbox_occlusion"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.check_bbox_occlusion"], ["", "def", "check_occlusion", "(", "json_data", ",", "img", ")", ":", "\n", "    ", "occlusions", "=", "{", "}", "\n", "for", "obj_id", "in", "json_data", ":", "\n", "        ", "occlusion", "=", "list", "(", "(", "map", "(", "lambda", "x", ":", "json_data", "[", "x", "]", "[", "\"global_id\"", "]", ">", "json_data", "[", "obj_id", "]", "[", "\"global_id\"", "]", "and", "check_bbox_occlusion", "(", "json_data", "[", "obj_id", "]", "[", "\"bbox\"", "]", ",", "json_data", "[", "x", "]", "[", "\"bbox\"", "]", ")", ",", "json_data", ")", ")", ")", "\n", "occlusions", "[", "obj_id", "]", "=", "any", "(", "occlusion", ")", "\n", "json_data", "[", "obj_id", "]", "[", "\"occlusion\"", "]", "=", "any", "(", "occlusion", ")", "\n", "\n", "", "return", "json_data", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_idd.generate_json_data_inst": [[56, 124], ["publiccode.helpers.annotation.Annotation", "publiccode.helpers.annotation.Annotation.fromJsonFile", "preprocess_idd.check_occlusion", "label.endswith", "print", "instances_ids[].append", "numpy.sum", "fname.split", "numpy.where", "float", "float", "numpy.max", "float", "float", "float", "int", "int", "int", "float", "float", "len", "numpy.squeeze", "numpy.squeeze", "str", "float", "float", "float", "float", "yy.max", "yy.min", "xx.max", "xx.min", "yy.min", "xx.min", "yy.max", "xx.max"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.Annotation.fromJsonFile", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.check_occlusion"], ["", "def", "generate_json_data_inst", "(", "fname", ",", "img", ",", "src", ")", ":", "\n", "    ", "json_name", "=", "\"_\"", ".", "join", "(", "fname", ".", "split", "(", "'_'", ")", "[", ":", "-", "1", "]", ")", "+", "\"_polygons.json\"", "\n", "annotation", "=", "Annotation", "(", ")", "\n", "annotation", ".", "fromJsonFile", "(", "json_name", ")", "\n", "nbInstances", "=", "{", "}", "\n", "instances_ids", "=", "{", "}", "\n", "json_data", "=", "{", "}", "\n", "global_id", "=", "0", "\n", "for", "labelTuple", "in", "labels", ":", "\n", "        ", "if", "labelTuple", ".", "hasInstances", ":", "\n", "            ", "nbInstances", "[", "labelTuple", ".", "name", "]", "=", "0", "\n", "", "", "for", "obj", "in", "annotation", ".", "objects", ":", "\n", "        ", "label", "=", "obj", ".", "label", "\n", "polygon", "=", "obj", ".", "polygon", "\n", "\n", "# If the object is deleted, skip it", "\n", "if", "obj", ".", "deleted", ":", "\n", "            ", "continue", "\n", "\n", "# if the label is not known, but ends with a 'group' (e.g. cargroup)", "\n", "# try to remove the s and see if that works", "\n", "# also we know that this polygon describes a group", "\n", "", "isGroup", "=", "False", "\n", "if", "(", "not", "label", "in", "name2label", ")", "and", "label", ".", "endswith", "(", "'group'", ")", ":", "\n", "            ", "label", "=", "label", "[", ":", "-", "len", "(", "'group'", ")", "]", "\n", "isGroup", "=", "True", "\n", "\n", "", "if", "not", "label", "in", "name2label", ":", "\n", "            ", "print", "(", "\"Label '{}' not known.\"", ".", "format", "(", "label", ")", ")", "\n", "continue", "\n", "\n", "# the label tuple", "\n", "", "labelTuple", "=", "name2label", "[", "label", "]", "\n", "id", "=", "labelTuple", ".", "train_id", "\n", "if", "labelTuple", ".", "hasInstances", "and", "not", "isGroup", "and", "id", "!=", "255", ":", "\n", "            ", "if", "id", "not", "in", "instances_ids", ":", "\n", "                ", "instances_ids", "[", "id", "]", "=", "[", "]", "\n", "", "id", "=", "id", "*", "1000", "+", "nbInstances", "[", "label", "]", "\n", "instances_ids", "[", "labelTuple", ".", "train_id", "]", ".", "append", "(", "id", ")", "\n", "nbInstances", "[", "label", "]", "+=", "1", "\n", "object_id", "=", "global_id", "\n", "global_id", "+=", "1", "\n", "ins_map", "=", "(", "np", ".", "squeeze", "(", "img", ")", "==", "np", ".", "squeeze", "(", "id", ")", ")", ".", "astype", "(", "float", ")", "\n", "ins_area", "=", "np", ".", "sum", "(", "ins_map", ")", "\n", "if", "ins_area", ">", "0", ":", "\n", "                ", "yy", ",", "xx", "=", "np", ".", "where", "(", "ins_map", ">", "0", ")", "\n", "height", "=", "float", "(", "yy", ".", "max", "(", ")", "-", "yy", ".", "min", "(", ")", "+", "1", ")", "\n", "width", "=", "float", "(", "xx", ".", "max", "(", ")", "-", "xx", ".", "min", "(", ")", "+", "1", ")", "\n", "box_area", "=", "height", "*", "width", "\n", "area_ratio", "=", "float", "(", "ins_area", ")", "/", "box_area", "\n", "width_ratio", "=", "float", "(", "512", ")", "/", "width", "\n", "height_ratio", "=", "float", "(", "256", ")", "/", "height", "\n", "aspect_ratio", "=", "np", ".", "max", "(", "(", "height", "/", "width", ",", "width", "/", "height", ")", ")", "\n", "json_data", "[", "str", "(", "id", ")", "]", "=", "{", "\"class_id\"", ":", "int", "(", "labelTuple", ".", "train_id", ")", ",", "\n", "\"global_id\"", ":", "int", "(", "object_id", ")", ",", "\n", "\"train_id\"", ":", "int", "(", "labelTuple", ".", "train_id", ")", ",", "\n", "\"area\"", ":", "float", "(", "ins_area", ")", ",", "\n", "\"height\"", ":", "height", ",", "\n", "\"width\"", ":", "width", ",", "\n", "\"box_area\"", ":", "box_area", ",", "\n", "\"area_ratio\"", ":", "area_ratio", ",", "\n", "\"width_ratio\"", ":", "width_ratio", ",", "\n", "\"height_ratio\"", ":", "height_ratio", ",", "\n", "\"aspect_ratio\"", ":", "float", "(", "aspect_ratio", ")", ",", "\n", "\"bbox\"", ":", "[", "float", "(", "yy", ".", "min", "(", ")", ")", ",", "float", "(", "xx", ".", "min", "(", ")", ")", ",", "float", "(", "yy", ".", "max", "(", ")", ")", ",", "float", "(", "xx", ".", "max", "(", ")", ")", "]", "\n", "}", "\n", "", "", "", "json_data", "=", "check_occlusion", "(", "json_data", ",", "img", ")", "\n", "return", "json_data", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_idd.copy_file": [[127, 149], ["sorted", "glob.glob", "PIL.Image.open", "img.crop.save", "print", "os.path.join", "img.crop.resize", "img.crop.crop", "img.crop.resize", "img.crop.crop", "preprocess_idd.generate_json_data_inst", "json.dump", "json.dump", "os.path.join", "open", "os.path.join().split", "os.path.join", "os.path.join", "fname.split", "src_path.replace().split", "fname.split", "src_path.replace"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.save", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.datasets.resize", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.datasets.resize", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.generate_json_data_inst"], ["", "def", "copy_file", "(", "src", ",", "src_ext", ",", "dst", ",", "type", ")", ":", "\n", "# find all files ends up with ext", "\n", "    ", "flist", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "src", ",", "'*'", ",", "src_ext", ")", ")", ")", "\n", "for", "fname", "in", "flist", ":", "\n", "        ", "src_path", "=", "fname", "\n", "img", "=", "Image", ".", "open", "(", "src_path", ")", "\n", "if", "img", ".", "size", "!=", "(", "1920", ",", "1080", ")", ":", "\n", "            ", "continue", "\n", "", "size", "=", "512", ",", "512", "\n", "if", "type", "==", "\"img\"", ":", "\n", "            ", "img", "=", "img", ".", "resize", "(", "(", "512", ",", "288", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "img", "=", "img", ".", "crop", "(", "(", "0", ",", "0", ",", "512", ",", "256", ")", ")", "\n", "", "elif", "type", "in", "[", "\"inst\"", ",", "\"label\"", "]", ":", "\n", "            ", "img", "=", "img", ".", "resize", "(", "(", "512", ",", "288", ")", ",", "Image", ".", "NEAREST", ")", "\n", "img", "=", "img", ".", "crop", "(", "(", "0", ",", "0", ",", "512", ",", "256", ")", ")", "\n", "if", "type", "==", "\"inst\"", ":", "\n", "                ", "json_data", "=", "generate_json_data_inst", "(", "fname", ",", "img", ",", "src", ")", "\n", "json", ".", "dump", "(", "json_data", ",", "open", "(", "os", ".", "path", ".", "join", "(", "dst", ",", "\"_\"", ".", "join", "(", "src_path", ".", "replace", "(", "\"_instanceIds.png\"", ",", "\"\"", ")", ".", "split", "(", "\"/\"", ")", "[", "-", "2", ":", "]", ")", "+", "\"_data.json\"", ")", ",", "\n", "\"w\"", ")", ",", "indent", "=", "4", ")", "\n", "", "", "dst_path", "=", "\".\"", ".", "join", "(", "[", "\".\"", ".", "join", "(", "os", ".", "path", ".", "join", "(", "dst", ",", "\"_\"", ".", "join", "(", "fname", ".", "split", "(", "\"/\"", ")", "[", "-", "2", ":", "]", ")", ")", ".", "split", "(", "\".\"", ")", "[", ":", "-", "1", "]", ")", ",", "\"png\"", "]", ")", "\n", "img", ".", "save", "(", "dst_path", ")", "\n", "print", "(", "'copied %s to %s'", "%", "(", "src_path", ",", "os", ".", "path", ".", "join", "(", "dst", ",", "\"_\"", ".", "join", "(", "fname", ".", "split", "(", "\"/\"", ")", "[", "-", "2", ":", "]", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.compute_yolo_detection.lcm": [[35, 36], ["abs", "math.gcd"], "function", ["None"], ["def", "lcm", "(", "a", ",", "b", ")", ":", "return", "abs", "(", "a", "*", "b", ")", "/", "math", ".", "gcd", "(", "a", ",", "b", ")", "if", "a", "and", "b", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.compute_yolo_detection.worker_init_fn": [[57, 59], ["numpy.random.seed", "numpy.random.get_state"], "function", ["None"], ["def", "worker_init_fn", "(", "worker_id", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "np", ".", "random", ".", "get_state", "(", ")", "[", "1", "]", "[", "0", "]", "+", "worker_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.compute_yolo_detection.overlap": [[61, 77], ["namedtuple", "float", "float", "namedtuple.", "namedtuple.", "min", "max", "min", "max"], "function", ["None"], ["", "def", "overlap", "(", "a", ",", "b", ")", ":", "# returns None if rectangles don't intersect", "\n", "    ", "from", "collections", "import", "namedtuple", "\n", "Rectangle", "=", "namedtuple", "(", "'Rectangle'", ",", "'ymin xmin ymax xmax'", ")", "\n", "height", "=", "float", "(", "a", "[", "2", "]", "-", "a", "[", "0", "]", "+", "1", ")", "\n", "width", "=", "float", "(", "a", "[", "3", "]", "-", "a", "[", "1", "]", "+", "1", ")", "\n", "a", "=", "Rectangle", "(", "a", "[", "0", "]", ",", "a", "[", "1", "]", ",", "a", "[", "2", "]", ",", "a", "[", "3", "]", ")", "\n", "b", "=", "Rectangle", "(", "b", "[", "0", "]", ",", "b", "[", "1", "]", ",", "b", "[", "2", "]", ",", "b", "[", "3", "]", ")", "\n", "dx", "=", "min", "(", "a", ".", "xmax", ",", "b", ".", "xmax", ")", "-", "max", "(", "a", ".", "xmin", ",", "b", ".", "xmin", ")", "\n", "dy", "=", "min", "(", "a", ".", "ymax", ",", "b", ".", "ymax", ")", "-", "max", "(", "a", ".", "ymin", ",", "b", ".", "ymin", ")", "\n", "if", "(", "dx", ">=", "0", ")", "and", "(", "dy", ">=", "0", ")", ":", "\n", "        ", "if", "dx", "*", "dy", ">", "0.30", "*", "height", "*", "width", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "", "", "else", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.compute_yolo_detection.compute_detection": [[80, 180], ["output_images.to", "torch.interpolate", "matplotlib.figure", "matplotlib.subplots", "ax.imshow", "images.append", "matplotlib.axis", "matplotlib.gca().xaxis.set_major_locator", "matplotlib.gca().yaxis.set_major_locator", "os.path.join", "matplotlib.savefig", "matplotlib.close", "input_transform", "os.remove", "torch.no_grad", "torch.no_grad", "model_yolo", "utils.tensor2im", "models.rescale_boxes", "detections[].cpu().unique", "len", "random.sample", "matplotlib.ticker.NullLocator", "matplotlib.ticker.NullLocator", "Image.open().convert", "models.non_max_suppression", "completed_images[].cpu", "print", "matplotlib.Rectangle", "ax.add_patch", "matplotlib.text", "detections[].cpu", "numpy.where", "yy.min", "xx.min", "yy.max", "xx.max", "compute_yolo_detection.overlap", "matplotlib.gca", "matplotlib.gca", "Image.open", "count_detection_cond.append", "count_detection_no_cond.append", "int", "[].split", "[].split", "utils.tensor2im", "int", "int", "int", "int", "cls_conf.item", "int", "int", "numpy.where", "int", "str", "int", "int", "int", "inst_maps_valid_idx[].item"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.utils.rescale_boxes", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.utils.non_max_suppression", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.compute_yolo_detection.overlap", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2im"], ["", "", "def", "compute_detection", "(", "output_images", ",", "model_yolo", ",", "\n", "images", ",", "model_input", ",", "classes", ",", "\n", "count_detection_cond", ",", "count_detection_no_cond", ",", "colors", ",", "web_dir", ",", "images_path", ",", "crop_type", ",", "\n", "inst_maps_valid_idx", ",", "cond", ")", ":", "\n", "    ", "completed_images", "=", "output_images", ".", "to", "(", "device", "[", "0", "]", ")", "\n", "image", "=", "F", ".", "interpolate", "(", "completed_images", ",", "size", "=", "416", ",", "\n", "mode", "=", "\"nearest\"", ")", "\n", "image", "=", "(", "image", "+", "1", ")", "*", "0.5", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "detections", "=", "model_yolo", "(", "image", ")", "\n", "detections", "=", "yolo_model", ".", "non_max_suppression", "(", "detections", ",", "0.90", ",", "\n", "0.4", ")", "[", "0", "]", "\n", "", "plt", ".", "figure", "(", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ")", "\n", "ax", ".", "imshow", "(", "util", ".", "tensor2im", "(", "completed_images", "[", "0", "]", ".", "cpu", "(", ")", ")", ")", "\n", "images", ".", "append", "(", "1", ")", "\n", "# Draw bounding boxes and labels of detections", "\n", "if", "detections", "is", "not", "None", ":", "\n", "# Rescale boxes to original image", "\n", "        ", "detections", "=", "yolo_utils", ".", "rescale_boxes", "(", "detections", ",", "416", ",", "\n", "completed_images", ".", "shape", "[", "\n", "2", ":", "]", ")", "\n", "unique_labels", "=", "detections", "[", ":", ",", "-", "1", "]", ".", "cpu", "(", ")", ".", "unique", "(", ")", "\n", "n_cls_preds", "=", "len", "(", "unique_labels", ")", "\n", "import", "random", "\n", "bbox_colors", "=", "random", ".", "sample", "(", "colors", ",", "n_cls_preds", ")", "\n", "if", "opt", ".", "label_nc", "==", "17", ":", "\n", "            ", "id_to_text", "=", "{", "\"24\"", ":", "\"person\"", ",", "\"26\"", ":", "\"car\"", "}", "\n", "", "else", ":", "\n", "            ", "id_to_text", "=", "{", "\"4\"", ":", "\"person\"", ",", "\"10\"", ":", "\"car\"", "}", "\n", "", "for", "x1", ",", "y1", ",", "x2", ",", "y2", ",", "conf", ",", "cls_conf", ",", "cls_pred", "in", "detections", ":", "\n", "            ", "if", "cond", ":", "\n", "                ", "yy", ",", "xx", "=", "np", ".", "where", "(", "\n", "util", ".", "tensor2im", "(", "model_input", "[", "\"insta_maps_bbox\"", "]", "[", "0", "]", ",", "\n", "normalize", "=", "False", ")", ">", "0", ")", "\n", "bbox_y_min", "=", "yy", ".", "min", "(", ")", "\n", "bbox_x_min", "=", "xx", ".", "min", "(", ")", "\n", "bbox_y_max", "=", "yy", ".", "max", "(", ")", "\n", "bbox_x_max", "=", "xx", ".", "max", "(", ")", "\n", "", "else", ":", "\n", "                ", "bbox_y_min", "=", "model_input", "[", "\"indexes\"", "]", "[", "0", "]", "[", "0", "]", "\n", "bbox_x_min", "=", "model_input", "[", "\"indexes\"", "]", "[", "0", "]", "[", "2", "]", "\n", "bbox_y_max", "=", "model_input", "[", "\"indexes\"", "]", "[", "0", "]", "[", "1", "]", "\n", "bbox_x_max", "=", "model_input", "[", "\"indexes\"", "]", "[", "0", "]", "[", "3", "]", "\n", "", "if", "not", "overlap", "(", "[", "bbox_y_min", ",", "bbox_x_min", ",", "bbox_y_max", ",", "bbox_x_max", "]", ",", "\n", "[", "int", "(", "y1", ")", ",", "int", "(", "x1", ")", ",", "int", "(", "y2", ")", ",", "int", "(", "x2", ")", "]", ")", ":", "\n", "                ", "continue", "\n", "", "if", "cond", ":", "\n", "                ", "if", "classes", "[", "int", "(", "cls_pred", ")", "]", "==", "id_to_text", "[", "\n", "str", "(", "int", "(", "inst_maps_valid_idx", "[", "0", "]", ".", "item", "(", ")", ")", ")", "[", ":", "-", "3", "]", "]", ":", "\n", "                    ", "count_detection_cond", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "                    ", "continue", "\n", "", "", "else", ":", "\n", "                ", "if", "classes", "[", "int", "(", "cls_pred", ")", "]", "in", "[", "\"car\"", ",", "\"person\"", "]", ":", "\n", "                    ", "count_detection_no_cond", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "                    ", "continue", "\n", "", "", "print", "(", "\"\\t+ Label: %s, Conf: %.5f\"", "%", "(", "\n", "classes", "[", "int", "(", "cls_pred", ")", "]", ",", "cls_conf", ".", "item", "(", ")", ")", ")", "\n", "\n", "box_w", "=", "x2", "-", "x1", "\n", "box_h", "=", "y2", "-", "y1", "\n", "\n", "color", "=", "bbox_colors", "[", "\n", "int", "(", "np", ".", "where", "(", "unique_labels", "==", "int", "(", "cls_pred", ")", ")", "[", "0", "]", ")", "]", "\n", "# Create a Rectangle patch", "\n", "bbox", "=", "patches", ".", "Rectangle", "(", "(", "x1", ",", "y1", ")", ",", "box_w", ",", "box_h", ",", "\n", "linewidth", "=", "2", ",", "edgecolor", "=", "color", ",", "\n", "facecolor", "=", "\"none\"", ")", "\n", "# Add the bbox to the plot", "\n", "ax", ".", "add_patch", "(", "bbox", ")", "\n", "# Add label", "\n", "plt", ".", "text", "(", "\n", "x1", ",", "\n", "y1", ",", "\n", "s", "=", "classes", "[", "int", "(", "cls_pred", ")", "]", ",", "\n", "color", "=", "\"white\"", ",", "\n", "verticalalignment", "=", "\"top\"", ",", "\n", "bbox", "=", "{", "\"color\"", ":", "color", ",", "\"pad\"", ":", "0", "}", ",", "\n", ")", "\n", "\n", "# Save generated image with detections", "\n", "", "", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "plt", ".", "gca", "(", ")", ".", "xaxis", ".", "set_major_locator", "(", "NullLocator", "(", ")", ")", "\n", "plt", ".", "gca", "(", ")", ".", "yaxis", ".", "set_major_locator", "(", "NullLocator", "(", ")", ")", "\n", "img_dir", "=", "os", ".", "path", ".", "join", "(", "web_dir", ",", "'images'", ")", "\n", "if", "cond", ":", "\n", "        ", "filename", "=", "f\"{images_path[0][:-4].split('/')[-1]}_{crop_type}_detection_cond\"", "\n", "", "else", ":", "\n", "        ", "filename", "=", "f\"{images_path[0][:-4].split('/')[-1]}_{crop_type}_detection_no_cond\"", "\n", "", "plt", ".", "savefig", "(", "f\"{img_dir}/{filename}.png\"", ",", "bbox_inches", "=", "\"tight\"", ",", "\n", "pad_inches", "=", "0.0", ")", "\n", "plt", ".", "close", "(", ")", "\n", "from", "PIL", "import", "Image", "\n", "detection_image", "=", "input_transform", "(", "\n", "Image", ".", "open", "(", "f\"{img_dir}/{filename}.png\"", ")", ".", "convert", "(", "'RGB'", ")", ")", "\n", "os", ".", "remove", "(", "f\"{img_dir}/{filename}.png\"", ")", "\n", "return", "detection_image", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.compute_yolo_detection.test": [[182, 347], ["models.Darknet().to", "yolo_model.Darknet().to.load_darknet_weights", "yolo_model.Darknet().to.eval", "matplotlib.get_cmap", "models.load_classes", "plt.get_cmap.", "os.path.join", "utils.html.HTML", "utils.visualizer.Visualizer", "models.SPGNetInferenceModel", "print", "count_detection_cond.extend", "count_detection_no_cond.extend", "print", "utils.visualizer.Visualizer.print_results", "glob.glob", "models.Darknet", "numpy.linspace", "epoch.split", "torch.nn.DataParallel", "torch.nn.DataParallel", "datasets.get_segmentation_dataset", "torch.utils.data.DataLoader", "tqdm.tqdm", "enumerate", "html.HTML.save", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "torch.FloatTensor().zero_().to", "torch.FloatTensor().zero_().to", "one_hot_seg_map.scatter.scatter", "gt_seg_maps.clone().type().to", "torch.FloatTensor().zero_().to", "torch.FloatTensor().zero_().to", "one_hot_gt_seg_maps_masked.scatter_.scatter_", "torch.nn.DataParallel.forward", "generated_images.detach().cpu", "generated_images_no_cond.detach().cpu", "generated_seg_maps.detach().cpu", "generated_seg_maps_no_cond.detach().cpu", "compute_yolo_detection.compute_detection", "compute_yolo_detection.compute_detection", "collections.OrderedDict", "utils.visualizer.Visualizer.save_images", "[].split", "os.path.join", "gt_images.to", "gt_seg_maps.type().to", "masks.to", "insta_maps_bbox.to", "inst_maps.to", "inst_map_compact.to", "theta.to", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "generated_instances_pad.detach().cpu", "range", "range", "gt_images.to", "masks.to", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "gt_seg_maps.clone().type", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "generated_images.detach", "generated_images_no_cond.detach", "generated_seg_maps.detach", "generated_seg_maps_no_cond.detach", "gt_seg_maps.type", "torch.FloatTensor", "torch.FloatTensor", "generated_instances_pad.detach", "utils.tensor2label", "utils.tensor2label", "utils.tensor2im", "utils.tensor2im", "utils.tensor2im", "utils.tensor2im", "utils.tensor2im", "utils.tensor2label", "utils.tensor2label", "utils.tensor2label", "utils.tensor2im", "utils.tensor2im", "utils.tensor2im", "utils.tensor2im", "len", "len", "len", "len", "x.split", "torch.FloatTensor", "torch.FloatTensor", "gt_seg_maps.clone", "torch.FloatTensor", "torch.FloatTensor", "images_masked.cpu"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.yolo.models.Darknet.load_darknet_weights", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.utils.load_classes", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPanopticSemanticLabeling.print_results", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.datasets.__init__.get_segmentation_dataset", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.save", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.AlexNet.forward", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.compute_yolo_detection.compute_detection", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.compute_yolo_detection.compute_detection", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.visualizer.Visualizer.save_images", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.tensor2label", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.tensor2label", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.tensor2label", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.tensor2label", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.tensor2label", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2im"], ["", "def", "test", "(", "opt", ")", ":", "\n", "    ", "import", "glob", "\n", "epochs", "=", "[", "f\"epoch_{x.split('/')[-1].split('_')[0]}\"", "for", "x", "in", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "test_model_sg", ")", "+", "\"/latest*SG*_G.pth\"", ")", "]", "\n", "#test_z_appr = util.load_latent_vector_appr(opt)", "\n", "model_yolo", "=", "yolo_model", ".", "Darknet", "(", "\"models/functions/yolo/config/yolov3.cfg\"", ",", "\n", "img_size", "=", "256", ")", ".", "to", "(", "device", "[", "0", "]", ")", "\n", "model_yolo", ".", "load_darknet_weights", "(", "\n", "\"models/functions/yolo/weights/yolov3.weights\"", ")", "\n", "model_yolo", ".", "eval", "(", ")", "\n", "# Bounding-box colors", "\n", "cmap", "=", "plt", ".", "get_cmap", "(", "\"tab20b\"", ")", "\n", "colors", "=", "[", "cmap", "(", "i", ")", "for", "i", "in", "np", ".", "linspace", "(", "0", ",", "1", ",", "20", ")", "]", "\n", "classes", "=", "yolo_utils", ".", "load_classes", "(", "\"models/functions/yolo/data/coco.names\"", ")", "\n", "for", "epoch", "in", "epochs", ":", "\n", "        ", "old_epoch_folder", "=", "epoch", ".", "split", "(", "\"_\"", ")", "[", "1", "]", "\n", "opt", ".", "which_epoch", "=", "epoch", "\n", "web_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "\"SPG-NET\"", ",", "opt", ".", "name", ",", "\"test\"", ",", "opt", ".", "which_epoch", ",", "\"results\"", ")", "\n", "webpage", "=", "html", ".", "HTML", "(", "web_dir", ",", "'Experiment = %s, Phase = %s, Epoch = %s'", "%", "(", "\n", "opt", ".", "name", ",", "opt", ".", "phase", ",", "opt", ".", "which_epoch", ")", ")", "\n", "\n", "visualizer", "=", "Visualizer", "(", "opt", ")", "\n", "opt", ".", "which_epoch", "=", "old_epoch_folder", "\n", "model", "=", "SPGNetInferenceModel", "(", "opt", ")", "\n", "if", "use_cuda", ":", "\n", "            ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "", "opt", ".", "which_epoch", "=", "epoch", "\n", "real_images", "=", "[", "]", "\n", "fake_images", "=", "[", "]", "\n", "fake_images_no_cond", "=", "[", "]", "\n", "l1", "=", "0", "\n", "l2", "=", "0", "\n", "psnr_all", "=", "[", "]", "\n", "ssim_score", "=", "0", "\n", "ssim_score_no_cond", "=", "0", "\n", "psnr_score", "=", "0", "\n", "psnr_score_no_cond", "=", "0", "\n", "print", "(", "f\"epoch: {epoch} \\n\"", ")", "\n", "count", "=", "0", "\n", "images_cond", "=", "[", "]", "\n", "images_no_cond", "=", "[", "]", "\n", "count_detection_cond", "=", "[", "]", "\n", "count_detection_no_cond", "=", "[", "]", "\n", "for", "crop_type", "in", "[", "\"left\"", ",", "\"center\"", ",", "\"right\"", "]", ":", "\n", "            ", "test_loader_kwargs", "=", "{", "'transform'", ":", "input_transform", ",", "\n", "\"gt_transform\"", ":", "gt_transform", ",", "\n", "\"inst_map_transform\"", ":", "inst_map_transform", ",", "\n", "\"root\"", ":", "opt", ".", "dataroot", ",", "\"opt\"", ":", "opt", ",", "\n", "\"crop_type\"", ":", "crop_type", "}", "\n", "testset", "=", "get_segmentation_dataset", "(", "opt", ".", "dataset", ",", "split", "=", "'test'", ",", "\n", "mode", "=", "'test'", ",", "\n", "**", "test_loader_kwargs", ")", "\n", "\n", "testloader", "=", "data", ".", "DataLoader", "(", "testset", ",", "batch_size", "=", "1", ",", "\n", "drop_last", "=", "False", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "1", ")", "\n", "tbar", "=", "tqdm", "(", "testloader", ",", "leave", "=", "True", ")", "\n", "for", "i", ",", "input_dict", "in", "enumerate", "(", "tbar", ")", ":", "\n", "                ", "if", "-", "1", "in", "input_dict", "[", "\"inst_map_valid_idx\"", "]", ":", "\n", "                    ", "continue", "\n", "", "count", "+=", "1", "\n", "gt_images", "=", "input_dict", "[", "\"gt_images\"", "]", "\n", "gt_seg_maps", "=", "input_dict", "[", "\"gt_seg_maps\"", "]", "\n", "inst_maps", "=", "input_dict", "[", "\"inst_map\"", "]", "\n", "inst_maps_valid_idx", "=", "input_dict", "[", "\"inst_map_valid_idx\"", "]", "\n", "images_path", "=", "input_dict", "[", "\"images_path\"", "]", "\n", "masks", "=", "input_dict", "[", "\"masks\"", "]", "\n", "indexes", "=", "input_dict", "[", "\"indexes\"", "]", "\n", "insta_maps_bbox", "=", "input_dict", "[", "\"insta_maps_bbox\"", "]", "\n", "inst_map_compact", "=", "input_dict", "[", "\"inst_map_compact\"", "]", "\n", "theta", "=", "input_dict", "[", "\"theta\"", "]", "\n", "compute_instance", "=", "input_dict", "[", "\"compute_instance\"", "]", "\n", "images_masked", "=", "(", "\n", "gt_images", ".", "to", "(", "device", "[", "0", "]", ")", "-", "gt_images", ".", "to", "(", "device", "[", "0", "]", ")", "*", "masks", ".", "to", "(", "\n", "device", "[", "0", "]", ")", ")", "\n", "one_hot_seg_map", "=", "torch", ".", "FloatTensor", "(", "opt", ".", "batchSize", ",", "opt", ".", "semantic_nc", ",", "\n", "gt_seg_maps", ".", "shape", "[", "2", "]", ",", "\n", "gt_seg_maps", ".", "shape", "[", "\n", "3", "]", ")", ".", "zero_", "(", ")", ".", "to", "(", "device", "[", "0", "]", ")", "\n", "one_hot_seg_map", "=", "one_hot_seg_map", ".", "scatter", "(", "1", ",", "gt_seg_maps", ".", "type", "(", "\n", "torch", ".", "LongTensor", ")", ".", "to", "(", "device", "[", "0", "]", ")", ",", "1", ")", "\n", "\n", "gt_seg_maps_masked", "=", "gt_seg_maps", ".", "clone", "(", ")", ".", "type", "(", "torch", ".", "LongTensor", ")", ".", "to", "(", "\n", "device", "[", "0", "]", ")", "\n", "gt_seg_maps_masked", "[", "masks", "==", "1.0", "]", "=", "opt", ".", "label_nc", "-", "1", "if", "opt", ".", "no_contain_dontcare_label", "else", "opt", ".", "label_nc", "\n", "one_hot_gt_seg_maps_masked", "=", "torch", ".", "FloatTensor", "(", "1", ",", "opt", ".", "semantic_nc", ",", "\n", "gt_seg_maps", ".", "shape", "[", "2", "]", ",", "\n", "gt_seg_maps", ".", "shape", "[", "\n", "3", "]", ")", ".", "zero_", "(", ")", ".", "to", "(", "\n", "device", "[", "0", "]", ")", "\n", "one_hot_gt_seg_maps_masked", "=", "one_hot_gt_seg_maps_masked", ".", "scatter_", "(", "1", ",", "gt_seg_maps_masked", ",", "1.0", ")", "\n", "model_input", "=", "{", "\n", "\"one_hot_gt_seg_maps_masked\"", ":", "one_hot_gt_seg_maps_masked", ",", "\n", "\"gt_images_masked\"", ":", "images_masked", ",", "\n", "\"masks\"", ":", "masks", ".", "to", "(", "device", "[", "0", "]", ")", ",", "\n", "\"insta_maps_bbox\"", ":", "insta_maps_bbox", ".", "to", "(", "device", "[", "0", "]", ")", ",", "\n", "\"inst_maps\"", ":", "inst_maps", ".", "to", "(", "device", "[", "0", "]", ")", ",", "\n", "\"inst_maps_compact\"", ":", "inst_map_compact", ".", "to", "(", "device", "[", "0", "]", ")", ",", "\n", "\"theta_transform\"", ":", "theta", ".", "to", "(", "device", "[", "0", "]", ")", ",", "\n", "\"inst_maps_valid_idx\"", ":", "inst_maps_valid_idx", ",", "\n", "\"compute_instance\"", ":", "compute_instance", ",", "\n", "\"use_gt_instance_encoder\"", ":", "opt", ".", "use_gt_instance_encoder", ",", "\n", "\"indexes\"", ":", "indexes", ",", "\n", "\"test_z_appr\"", ":", "torch", ".", "FloatTensor", "(", "1", ",", "opt", ".", "z_len", ",", "1", ",", "1", ")", ".", "normal_", "(", "0", ",", "1", ")", "}", "\n", "generated_images", ",", "generated_images_no_cond", ",", "generated_instances_pad", ",", "generated_instances", ",", "generated_seg_maps", ",", "generated_seg_maps_no_cond", "=", "model", ".", "forward", "(", "\n", "model_input", ")", "\n", "output_images", "=", "generated_images", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "output_images_no_cond", "=", "generated_images_no_cond", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "output_seg_maps", "=", "generated_seg_maps", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "output_seg_maps_no_cond", "=", "generated_seg_maps_no_cond", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "if", "generated_instances", "[", "0", "]", "is", "not", "None", ":", "\n", "                    ", "output_gen_instances", "=", "generated_instances_pad", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "inst_map_bbox", "=", "insta_maps_bbox", "\n", "inst_map", "=", "inst_maps", "\n", "", "detection_cond", "=", "compute_detection", "(", "output_images", ",", "model_yolo", ",", "\n", "images_cond", ",", "model_input", ",", "classes", ",", "count_detection_cond", ",", "count_detection_no_cond", ",", "colors", ",", "web_dir", ",", "images_path", ",", "crop_type", ",", "inst_maps_valid_idx", ",", "True", ")", "\n", "detection_no_cond", "=", "compute_detection", "(", "output_images_no_cond", ",", "model_yolo", ",", "\n", "images_no_cond", ",", "model_input", ",", "classes", ",", "count_detection_cond", ",", "count_detection_no_cond", ",", "colors", ",", "web_dir", ",", "images_path", ",", "crop_type", ",", "inst_maps_valid_idx", ",", "False", ")", "\n", "visuals", "=", "OrderedDict", "(", "[", "(", "'gt_seg_map'", ",", "\n", "util", ".", "tensor2label", "(", "gt_seg_maps", "[", "0", "]", ",", "\n", "opt", ".", "label_nc", ")", ")", ",", "\n", "(", "'gt_seg_map_masked'", ",", "\n", "util", ".", "tensor2label", "(", "\n", "one_hot_gt_seg_maps_masked", "[", "0", "]", ",", "\n", "opt", ".", "semantic_nc", ")", ")", ",", "\n", "(", "'real_image'", ",", "\n", "util", ".", "tensor2im", "(", "gt_images", "[", "0", "]", ")", ")", ",", "\n", "(", "'inst_map'", ",", "\n", "util", ".", "tensor2im", "(", "inst_map", "[", "0", "]", ")", ")", ",", "\n", "(", "'inst_bbox'", ",", "\n", "util", ".", "tensor2im", "(", "inst_map_bbox", "[", "0", "]", ")", ")", ",", "\n", "(", "'masked_image'", ",", "\n", "util", ".", "tensor2im", "(", "images_masked", ".", "cpu", "(", ")", "[", "0", "]", ")", ")", ",", "\n", "(", "'fake_image'", ",", "\n", "util", ".", "tensor2im", "(", "output_images", "[", "0", "]", ")", ")", ",", "\n", "(", "\"fake_instance\"", ",", "\n", "util", ".", "tensor2label", "(", "\n", "output_gen_instances", "[", "0", "]", ",", "\n", "opt", ".", "semantic_nc", ")", ")", ",", "\n", "(", "'fake_seg_maps'", ",", "\n", "util", ".", "tensor2label", "(", "output_seg_maps", "[", "0", "]", ",", "\n", "opt", ".", "semantic_nc", ")", ")", ",", "\n", "(", "'fake_seg_maps_no_cond'", ",", "\n", "util", ".", "tensor2label", "(", "output_seg_maps_no_cond", "[", "0", "]", ",", "\n", "opt", ".", "semantic_nc", ")", ")", ",", "\n", "(", "'reconstructed_image_cond'", ",", "\n", "util", ".", "tensor2im", "(", "output_images", "[", "0", "]", ")", ")", ",", "\n", "(", "'reconstructed_image_no_cond'", ",", "\n", "util", ".", "tensor2im", "(", "output_images_no_cond", "[", "0", "]", ")", ")", ",", "\n", "(", "'detection_image_cond'", ",", "\n", "util", ".", "tensor2im", "(", "detection_cond", ")", ")", ",", "\n", "(", "'detection_image_no_cond'", ",", "\n", "util", ".", "tensor2im", "(", "detection_no_cond", ")", ")", ",", "\n", "]", ")", "\n", "visualizer", ".", "save_images", "(", "webpage", ",", "visuals", ",", "[", "\n", "f\"{images_path[0][:-4]}_{crop_type}_{images_path[0][-4:]}\"", "]", ")", "\n", "\n", "", "webpage", ".", "save", "(", ")", "\n", "", "count_detection_cond", ".", "extend", "(", "[", "0", "for", "_", "in", "range", "(", "len", "(", "images_cond", ")", "-", "len", "(", "count_detection_cond", ")", ")", "]", ")", "\n", "count_detection_no_cond", ".", "extend", "(", "\n", "[", "0", "for", "_", "in", "range", "(", "len", "(", "images_no_cond", ")", "-", "len", "(", "count_detection_no_cond", ")", ")", "]", ")", "\n", "results", "=", "{", "\"F1_score_cond\"", ":", "f1_score", "(", "images_cond", ",", "count_detection_cond", ")", ",", "\n", "\"F1_score_no_cond\"", ":", "f1_score", "(", "images_cond", ",", "count_detection_no_cond", ")", "}", "\n", "print", "(", "results", ")", "\n", "visualizer", ".", "print_results", "(", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.compute_yolo_detection.test_slg": [[348, 523], ["models.Darknet().to", "yolo_model.Darknet().to.load_darknet_weights", "yolo_model.Darknet().to.eval", "matplotlib.get_cmap", "models.load_classes", "any", "plt.get_cmap.", "os.path.join", "utils.html.HTML", "utils.visualizer.Visualizer", "count_detection_cond.extend", "count_detection_no_cond.extend", "print", "utils.visualizer.Visualizer.print_results", "glob.glob", "models.Darknet", "numpy.linspace", "epoch.split", "models.SLGNetInferenceModelFineTune", "models.SLGNetInferenceModel", "torch.nn.DataParallel", "torch.nn.DataParallel", "print", "datasets.get_segmentation_dataset", "torch.utils.data.DataLoader", "tqdm.tqdm", "enumerate", "html.HTML.save", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "torch.FloatTensor().zero_().to", "torch.FloatTensor().zero_().to", "gt_seg_maps.clone().type().to", "torch.FloatTensor().zero_().to", "torch.FloatTensor().zero_().to", "one_hot_gt_seg_maps_masked.scatter_.scatter_", "torch.nn.DataParallel.forward", "generated_images.detach().cpu", "res_no_cond[].detach().cpu", "generated_seg_maps.detach().cpu", "res_no_cond[].detach().cpu", "one_hot_gt_seg_maps_masked_inst.detach().cpu.detach().cpu", "res_no_cond[].detach().cpu", "compute_yolo_detection.compute_detection", "compute_yolo_detection.compute_detection", "collections.OrderedDict", "utils.visualizer.Visualizer.save_images", "[].split", "os.path.join", "gt_images.to", "masks.to", "insta_maps_bbox.to", "inst_maps.to", "inst_map_compact.to", "theta.to", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "generated_instances.detach().cpu", "range", "range", "gt_images.to", "masks.to", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "gt_seg_maps.clone().type", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "generated_images.detach", "res_no_cond[].detach", "generated_seg_maps.detach", "res_no_cond[].detach", "one_hot_gt_seg_maps_masked_inst.detach().cpu.detach", "res_no_cond[].detach", "torch.FloatTensor", "torch.FloatTensor", "generated_instances.detach", "utils.tensor2label", "utils.tensor2label", "utils.tensor2im", "utils.tensor2im", "utils.tensor2im", "utils.tensor2im", "utils.tensor2im", "utils.tensor2im", "utils.tensor2label", "utils.tensor2label", "utils.tensor2label", "utils.tensor2im", "utils.tensor2im", "utils.tensor2im", "utils.tensor2im", "len", "len", "len", "len", "x.split", "torch.FloatTensor", "torch.FloatTensor", "gt_seg_maps.clone", "torch.FloatTensor", "torch.FloatTensor", "images_masked.cpu"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.yolo.models.Darknet.load_darknet_weights", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.utils.load_classes", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPanopticSemanticLabeling.print_results", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.datasets.__init__.get_segmentation_dataset", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.save", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.AlexNet.forward", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.compute_yolo_detection.compute_detection", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.compute_yolo_detection.compute_detection", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.visualizer.Visualizer.save_images", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.tensor2label", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.tensor2label", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.tensor2label", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.tensor2label", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.tensor2label", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2im"], ["", "", "def", "test_slg", "(", "opt", ")", ":", "\n", "    ", "folder_name", "=", "\"SPG-NET\"", "if", "any", "(", "\n", "x", "in", "opt", ".", "name", "for", "x", "in", "[", "\"SG-NET\"", ",", "\"SP-NET\"", ",", "\"SPG-NET\"", "]", ")", "else", "\"SLG-NET\"", "\n", "import", "glob", "\n", "epochs", "=", "[", "f\"epoch_{x.split('/')[-1].split('_')[0]}\"", "for", "x", "in", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "folder_name", ",", "opt", ".", "name", ")", "+", "\"/latest*SLG*_G.pth\"", ")", "]", "\n", "#test_z_appr = util.load_latent_vector_appr(opt)", "\n", "best_psnr", "=", "[", "]", "\n", "model_yolo", "=", "yolo_model", ".", "Darknet", "(", "\"models/functions/yolo/config/yolov3.cfg\"", ",", "img_size", "=", "256", ")", ".", "to", "(", "device", "[", "0", "]", ")", "\n", "model_yolo", ".", "load_darknet_weights", "(", "\"models/functions/yolo/weights/yolov3.weights\"", ")", "\n", "model_yolo", ".", "eval", "(", ")", "\n", "# Bounding-box colors", "\n", "cmap", "=", "plt", ".", "get_cmap", "(", "\"tab20b\"", ")", "\n", "colors", "=", "[", "cmap", "(", "i", ")", "for", "i", "in", "np", ".", "linspace", "(", "0", ",", "1", ",", "20", ")", "]", "\n", "classes", "=", "yolo_utils", ".", "load_classes", "(", "\"models/functions/yolo/data/coco.names\"", ")", "\n", "for", "epoch", "in", "epochs", ":", "\n", "        ", "old_epoch_folder", "=", "epoch", ".", "split", "(", "\"_\"", ")", "[", "1", "]", "\n", "opt", ".", "which_epoch", "=", "epoch", "\n", "web_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "folder_name", ",", "opt", ".", "name", ",", "\"test\"", ",", "opt", ".", "which_epoch", ",", "\"results\"", ")", "\n", "webpage", "=", "html", ".", "HTML", "(", "web_dir", ",", "'Experiment = %s, Phase = %s, Epoch = %s'", "%", "(", "\n", "opt", ".", "name", ",", "opt", ".", "phase", ",", "opt", ".", "which_epoch", ")", ")", "\n", "\n", "visualizer", "=", "Visualizer", "(", "opt", ")", "\n", "opt", ".", "which_epoch", "=", "old_epoch_folder", "\n", "if", "opt", ".", "fineTuning", ":", "\n", "            ", "model", "=", "SLGNetInferenceModelFineTune", "(", "opt", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "SLGNetInferenceModel", "(", "opt", ")", "\n", "", "if", "use_cuda", ":", "\n", "            ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "", "opt", ".", "which_epoch", "=", "epoch", "\n", "count", "=", "0", "\n", "lpips_images", "=", "[", "]", "\n", "images_cond", "=", "[", "]", "\n", "images_no_cond", "=", "[", "]", "\n", "count_detection_cond", "=", "[", "]", "\n", "count_detection_no_cond", "=", "[", "]", "\n", "for", "crop_type", "in", "[", "\"left\"", ",", "\"center\"", ",", "\"right\"", "]", ":", "\n", "            ", "print", "(", "f\"epoch: {epoch} crop_type:{crop_type}\\n\"", ")", "\n", "test_loader_kwargs", "=", "{", "'transform'", ":", "input_transform", ",", "\n", "\"gt_transform\"", ":", "gt_transform", ",", "\n", "\"inst_map_transform\"", ":", "inst_map_transform", ",", "\n", "\"root\"", ":", "opt", ".", "dataroot", ",", "\"opt\"", ":", "opt", ",", "\n", "\"crop_type\"", ":", "crop_type", "}", "\n", "testset", "=", "get_segmentation_dataset", "(", "opt", ".", "dataset", ",", "split", "=", "'test'", ",", "\n", "mode", "=", "'test'", ",", "\n", "**", "test_loader_kwargs", ")", "\n", "\n", "testloader", "=", "data", ".", "DataLoader", "(", "testset", ",", "batch_size", "=", "1", ",", "\n", "drop_last", "=", "False", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "1", ")", "\n", "tbar", "=", "tqdm", "(", "testloader", ",", "leave", "=", "True", ")", "\n", "for", "i", ",", "input_dict", "in", "enumerate", "(", "tbar", ")", ":", "\n", "                ", "if", "-", "1", "in", "input_dict", "[", "\"inst_map_valid_idx\"", "]", ":", "\n", "                    ", "continue", "\n", "", "count", "+=", "1", "\n", "gt_images", "=", "input_dict", "[", "\"gt_images\"", "]", "\n", "gt_seg_maps", "=", "input_dict", "[", "\"gt_seg_maps\"", "]", "\n", "inst_maps", "=", "input_dict", "[", "\"inst_map\"", "]", "\n", "inst_maps_valid_idx", "=", "input_dict", "[", "\"inst_map_valid_idx\"", "]", "\n", "images_path", "=", "input_dict", "[", "\"images_path\"", "]", "\n", "masks", "=", "input_dict", "[", "\"masks\"", "]", "\n", "indexes", "=", "input_dict", "[", "\"indexes\"", "]", "\n", "insta_maps_bbox", "=", "input_dict", "[", "\"insta_maps_bbox\"", "]", "\n", "inst_map_compact", "=", "input_dict", "[", "\"inst_map_compact\"", "]", "\n", "theta", "=", "input_dict", "[", "\"theta\"", "]", "\n", "compute_instance", "=", "input_dict", "[", "\"compute_instance\"", "]", "\n", "images_masked", "=", "(", "\n", "gt_images", ".", "to", "(", "device", "[", "0", "]", ")", "-", "gt_images", ".", "to", "(", "device", "[", "0", "]", ")", "*", "masks", ".", "to", "(", "\n", "device", "[", "0", "]", ")", ")", "\n", "one_hot_seg_map", "=", "torch", ".", "FloatTensor", "(", "opt", ".", "batchSize", ",", "opt", ".", "semantic_nc", ",", "\n", "gt_seg_maps", ".", "shape", "[", "2", "]", ",", "\n", "gt_seg_maps", ".", "shape", "[", "\n", "3", "]", ")", ".", "zero_", "(", ")", ".", "to", "(", "device", "[", "0", "]", ")", "\n", "\n", "gt_seg_maps_masked", "=", "gt_seg_maps", ".", "clone", "(", ")", ".", "type", "(", "torch", ".", "LongTensor", ")", ".", "to", "(", "\n", "device", "[", "0", "]", ")", "\n", "gt_seg_maps_masked", "[", "masks", "==", "1.0", "]", "=", "opt", ".", "label_nc", "-", "1", "if", "opt", ".", "no_contain_dontcare_label", "else", "opt", ".", "label_nc", "\n", "one_hot_gt_seg_maps_masked", "=", "torch", ".", "FloatTensor", "(", "1", ",", "opt", ".", "semantic_nc", ",", "\n", "gt_seg_maps", ".", "shape", "[", "2", "]", ",", "\n", "gt_seg_maps", ".", "shape", "[", "\n", "3", "]", ")", ".", "zero_", "(", ")", ".", "to", "(", "\n", "device", "[", "0", "]", ")", "\n", "one_hot_gt_seg_maps_masked", "=", "one_hot_gt_seg_maps_masked", ".", "scatter_", "(", "1", ",", "gt_seg_maps_masked", ",", "1.0", ")", "\n", "model_input", "=", "{", "\n", "\"one_hot_gt_seg_maps_masked\"", ":", "one_hot_gt_seg_maps_masked", ",", "\n", "\"gt_images_masked\"", ":", "images_masked", ",", "\n", "\"masks\"", ":", "masks", ".", "to", "(", "device", "[", "0", "]", ")", ",", "\n", "\"insta_maps_bbox\"", ":", "insta_maps_bbox", ".", "to", "(", "device", "[", "0", "]", ")", ",", "\n", "\"inst_maps\"", ":", "inst_maps", ".", "to", "(", "device", "[", "0", "]", ")", ",", "\n", "\"inst_maps_compact\"", ":", "inst_map_compact", ".", "to", "(", "device", "[", "0", "]", ")", ",", "\n", "\"theta_transform\"", ":", "theta", ".", "to", "(", "device", "[", "0", "]", ")", ",", "\n", "\"inst_maps_valid_idx\"", ":", "inst_maps_valid_idx", ",", "\n", "\"compute_instance\"", ":", "compute_instance", ",", "\n", "\"indexes\"", ":", "indexes", ",", "\n", "\"test_z_appr\"", ":", "torch", ".", "FloatTensor", "(", "1", ",", "opt", ".", "z_len", ",", "1", ",", "1", ")", ".", "normal_", "(", "0", ",", "1", ")", ",", "\n", "\"use_gt_instance_encoder\"", ":", "opt", ".", "use_gt_instance_encoder", "}", "\n", "generated_images", ",", "generated_instances", ",", "generated_seg_maps", ",", "offset_flow", ",", "one_hot_gt_seg_maps_masked_inst", ",", "res_no_cond", "=", "model", ".", "forward", "(", "\n", "model_input", ")", "\n", "output_images", "=", "generated_images", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "output_images_no_cond", "=", "res_no_cond", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "output_seg_maps", "=", "generated_seg_maps", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "output_seg_maps_no_cond", "=", "res_no_cond", "[", "1", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "one_hot_gt_seg_maps_masked_inst", "=", "one_hot_gt_seg_maps_masked_inst", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "one_hot_gt_seg_maps_masked_inst_no_cond", "=", "res_no_cond", "[", "-", "1", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "if", "generated_instances", "[", "0", "]", "is", "not", "None", ":", "\n", "                    ", "output_gen_instances", "=", "generated_instances", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "inst_map_bbox", "=", "insta_maps_bbox", "\n", "inst_map", "=", "inst_maps", "\n", "", "detection_cond", "=", "compute_detection", "(", "output_images", ",", "model_yolo", ",", "\n", "images_cond", ",", "model_input", ",", "classes", ",", "\n", "count_detection_cond", ",", "\n", "count_detection_no_cond", ",", "\n", "colors", ",", "web_dir", ",", "images_path", ",", "\n", "crop_type", ",", "\n", "inst_maps_valid_idx", ",", "True", ")", "\n", "detection_no_cond", "=", "compute_detection", "(", "output_images_no_cond", ",", "\n", "model_yolo", ",", "\n", "images_no_cond", ",", "model_input", ",", "\n", "classes", ",", "\n", "count_detection_cond", ",", "\n", "count_detection_no_cond", ",", "\n", "colors", ",", "web_dir", ",", "\n", "images_path", ",", "crop_type", ",", "\n", "inst_maps_valid_idx", ",", "\n", "False", ")", "\n", "visuals", "=", "OrderedDict", "(", "[", "(", "'gt_seg_map'", ",", "\n", "util", ".", "tensor2label", "(", "gt_seg_maps", "[", "0", "]", ",", "\n", "opt", ".", "label_nc", ")", ")", ",", "\n", "(", "'gt_seg_map_masked'", ",", "\n", "util", ".", "tensor2label", "(", "\n", "one_hot_gt_seg_maps_masked_inst", "[", "0", "]", ",", "\n", "opt", ".", "semantic_nc", ")", ")", ",", "\n", "(", "'real_image'", ",", "\n", "util", ".", "tensor2im", "(", "gt_images", "[", "0", "]", ")", ")", ",", "\n", "(", "'inst_map'", ",", "\n", "util", ".", "tensor2im", "(", "inst_map", "[", "0", "]", ")", ")", ",", "\n", "(", "'inst_bbox'", ",", "\n", "util", ".", "tensor2im", "(", "inst_map_bbox", "[", "0", "]", ")", ")", ",", "\n", "(", "'masked_image'", ",", "\n", "util", ".", "tensor2im", "(", "images_masked", ".", "cpu", "(", ")", "[", "0", "]", ")", ")", ",", "\n", "(", "\"expected_flow\"", ",", "\n", "util", ".", "tensor2im", "(", "offset_flow", "[", "0", "]", ")", ")", ",", "\n", "(", "'fake_image'", ",", "\n", "util", ".", "tensor2im", "(", "output_images", "[", "0", "]", ")", ")", ",", "\n", "(", "\"fake_instance\"", ",", "\n", "util", ".", "tensor2label", "(", "\n", "output_gen_instances", "[", "0", "]", ",", "\n", "opt", ".", "semantic_nc", ")", ")", ",", "\n", "(", "'fake_seg_maps'", ",", "\n", "util", ".", "tensor2label", "(", "output_seg_maps", "[", "0", "]", ",", "\n", "opt", ".", "semantic_nc", ")", ")", ",", "\n", "(", "'fake_seg_maps_no_cond'", ",", "\n", "util", ".", "tensor2label", "(", "output_seg_maps_no_cond", "[", "0", "]", ",", "\n", "opt", ".", "semantic_nc", ")", ")", ",", "\n", "(", "'reconstructed_image_cond'", ",", "\n", "util", ".", "tensor2im", "(", "output_images", "[", "0", "]", ")", ")", ",", "\n", "(", "'reconstructed_image_no_cond'", ",", "\n", "util", ".", "tensor2im", "(", "output_images_no_cond", "[", "0", "]", ")", ")", ",", "\n", "(", "'detection_image_cond'", ",", "\n", "util", ".", "tensor2im", "(", "detection_cond", ")", ")", ",", "\n", "(", "'detection_image_no_cond'", ",", "\n", "util", ".", "tensor2im", "(", "detection_no_cond", ")", ")", ",", "\n", "]", ")", "\n", "visualizer", ".", "save_images", "(", "webpage", ",", "visuals", ",", "[", "f\"{images_path[0][:-4]}_{crop_type}_{images_path[0][-4:]}\"", "]", ")", "\n", "\n", "\n", "", "webpage", ".", "save", "(", ")", "\n", "", "count_detection_cond", ".", "extend", "(", "[", "0", "for", "_", "in", "range", "(", "len", "(", "images_cond", ")", "-", "len", "(", "count_detection_cond", ")", ")", "]", ")", "\n", "count_detection_no_cond", ".", "extend", "(", "\n", "[", "0", "for", "_", "in", "range", "(", "len", "(", "images_no_cond", ")", "-", "len", "(", "count_detection_no_cond", ")", ")", "]", ")", "\n", "results", "=", "{", "\"F1_score_cond\"", ":", "f1_score", "(", "images_cond", ",", "count_detection_cond", ")", ",", "\n", "\"F1_score_no_cond\"", ":", "f1_score", "(", "images_cond", ",", "count_detection_no_cond", ")", "}", "\n", "print", "(", "results", ")", "\n", "visualizer", ".", "print_results", "(", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size": [[13, 19], ["map", "s.split", "argparse.ArgumentTypeError"], "function", ["None"], ["def", "size", "(", "s", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "width", ",", "height", "=", "map", "(", "int", ",", "s", ".", "split", "(", "','", ")", ")", "\n", "return", "width", ",", "height", "\n", "", "except", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "\"Size must be width , height\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.check_bbox_occlusion": [[22, 48], ["float", "float", "Rectangle", "Rectangle", "preprocess_city.check_bbox_occlusion.touch"], "function", ["None"], ["def", "check_bbox_occlusion", "(", "bbox1", ",", "bbox2", ")", ":", "\n", "\n", "    ", "def", "x_touch", "(", "bbox1", ",", "bbox2", ")", ":", "\n", "        ", "return", "bbox1", "[", "2", "]", "==", "bbox2", "[", "0", "]", "and", "(", "(", "bbox1", "[", "1", "]", "<=", "bbox2", "[", "1", "]", "<=", "bbox1", "[", "3", "]", ")", "or", "(", "bbox1", "[", "1", "]", "<=", "bbox2", "[", "3", "]", "<=", "bbox1", "[", "3", "]", ")", ")", "\n", "\n", "", "def", "y_touch", "(", "bbox1", ",", "bbox2", ")", ":", "\n", "        ", "return", "bbox1", "[", "1", "]", "==", "bbox2", "[", "3", "]", "and", "(", "(", "bbox1", "[", "0", "]", "<=", "bbox2", "[", "0", "]", "<=", "bbox1", "[", "2", "]", ")", "or", "(", "bbox1", "[", "0", "]", "<=", "bbox2", "[", "2", "]", "<=", "bbox1", "[", "2", "]", ")", ")", "\n", "\n", "", "def", "touch", "(", "bbox1", ",", "bbox2", ")", ":", "\n", "        ", "return", "x_touch", "(", "bbox1", ",", "bbox2", ")", "or", "x_touch", "(", "bbox2", ",", "bbox1", ")", "or", "y_touch", "(", "bbox1", ",", "bbox2", ")", "or", "y_touch", "(", "bbox2", ",", "bbox1", ")", "\n", "\n", "", "def", "overlap", "(", "a", ",", "b", ")", ":", "# returns None if rectangles don't intersect", "\n", "        ", "height", "=", "float", "(", "a", "[", "2", "]", "-", "a", "[", "0", "]", "+", "1", ")", "\n", "width", "=", "float", "(", "a", "[", "3", "]", "-", "a", "[", "1", "]", "+", "1", ")", "\n", "a", "=", "Rectangle", "(", "a", "[", "0", "]", ",", "a", "[", "1", "]", ",", "a", "[", "2", "]", ",", "a", "[", "3", "]", ")", "\n", "b", "=", "Rectangle", "(", "b", "[", "0", "]", ",", "b", "[", "1", "]", ",", "b", "[", "2", "]", ",", "b", "[", "3", "]", ")", "\n", "dx", "=", "min", "(", "a", ".", "xmax", ",", "b", ".", "xmax", ")", "-", "max", "(", "a", ".", "xmin", ",", "b", ".", "xmin", ")", "\n", "dy", "=", "min", "(", "a", ".", "ymax", ",", "b", ".", "ymax", ")", "-", "max", "(", "a", ".", "ymin", ",", "b", ".", "ymin", ")", "\n", "if", "(", "dx", ">=", "0", ")", "and", "(", "dy", ">=", "0", ")", ":", "\n", "            ", "if", "dx", "*", "dy", ">", "0.05", "*", "height", "*", "width", ":", "\n", "                ", "return", "True", "\n", "", "else", ":", "\n", "                ", "return", "False", "\n", "", "", "else", ":", "\n", "            ", "False", "\n", "", "", "return", "touch", "(", "bbox1", ",", "bbox2", ")", "or", "overlap", "(", "bbox1", ",", "bbox2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.check_occlusion": [[50, 58], ["list", "any", "any", "map", "preprocess_city.check_bbox_occlusion"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.check_bbox_occlusion"], ["", "def", "check_occlusion", "(", "json_data", ",", "img", ")", ":", "\n", "    ", "occlusions", "=", "{", "}", "\n", "for", "obj_id", "in", "json_data", ":", "\n", "        ", "occlusion", "=", "list", "(", "(", "map", "(", "lambda", "x", ":", "json_data", "[", "x", "]", "[", "\"global_id\"", "]", ">", "json_data", "[", "obj_id", "]", "[", "\"global_id\"", "]", "and", "check_bbox_occlusion", "(", "json_data", "[", "obj_id", "]", "[", "\"bbox\"", "]", ",", "json_data", "[", "x", "]", "[", "\"bbox\"", "]", ")", ",", "json_data", ")", ")", ")", "\n", "occlusions", "[", "obj_id", "]", "=", "any", "(", "occlusion", ")", "\n", "json_data", "[", "obj_id", "]", "[", "\"occlusion\"", "]", "=", "any", "(", "occlusion", ")", "\n", "\n", "", "return", "json_data", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.generate_json_data_inst": [[61, 129], ["cityscapesscripts.helpers.annotation.Annotation", "cityscapesscripts.helpers.annotation.Annotation.fromJsonFile", "preprocess_city.check_occlusion", "label.endswith", "print", "instances_ids[].append", "numpy.sum", "fname.split", "numpy.where", "float", "float", "numpy.max", "float", "float", "float", "int", "int", "int", "float", "float", "len", "numpy.squeeze", "numpy.squeeze", "str", "float", "float", "float", "float", "yy.max", "yy.min", "xx.max", "xx.min", "yy.min", "xx.min", "yy.max", "xx.max"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.Annotation.fromJsonFile", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.check_occlusion"], ["", "def", "generate_json_data_inst", "(", "fname", ",", "img", ",", "src", ",", "resize_size", ")", ":", "\n", "    ", "json_name", "=", "\"_\"", ".", "join", "(", "fname", ".", "split", "(", "'_'", ")", "[", ":", "-", "1", "]", ")", "+", "\"_polygons.json\"", "\n", "annotation", "=", "Annotation", "(", ")", "\n", "annotation", ".", "fromJsonFile", "(", "json_name", ")", "\n", "nbInstances", "=", "{", "}", "\n", "instances_ids", "=", "{", "}", "\n", "json_data", "=", "{", "}", "\n", "global_id", "=", "0", "\n", "for", "labelTuple", "in", "labels", ":", "\n", "        ", "if", "labelTuple", ".", "hasInstances", ":", "\n", "            ", "nbInstances", "[", "labelTuple", ".", "name", "]", "=", "0", "\n", "", "", "for", "obj", "in", "annotation", ".", "objects", ":", "\n", "        ", "label", "=", "obj", ".", "label", "\n", "polygon", "=", "obj", ".", "polygon", "\n", "\n", "# If the object is deleted, skip it", "\n", "if", "obj", ".", "deleted", ":", "\n", "            ", "continue", "\n", "\n", "# if the label is not known, but ends with a 'group' (e.g. cargroup)", "\n", "# try to remove the s and see if that works", "\n", "# also we know that this polygon describes a group", "\n", "", "isGroup", "=", "False", "\n", "if", "(", "not", "label", "in", "name2label", ")", "and", "label", ".", "endswith", "(", "'group'", ")", ":", "\n", "            ", "label", "=", "label", "[", ":", "-", "len", "(", "'group'", ")", "]", "\n", "isGroup", "=", "True", "\n", "\n", "", "if", "not", "label", "in", "name2label", ":", "\n", "            ", "print", "(", "\"Label '{}' not known.\"", ".", "format", "(", "label", ")", ")", "\n", "continue", "\n", "\n", "# the label tuple", "\n", "", "labelTuple", "=", "name2label", "[", "label", "]", "\n", "id", "=", "labelTuple", ".", "id", "\n", "if", "labelTuple", ".", "hasInstances", "and", "not", "isGroup", "and", "id", "!=", "255", ":", "\n", "            ", "if", "id", "not", "in", "instances_ids", ":", "\n", "                ", "instances_ids", "[", "id", "]", "=", "[", "]", "\n", "", "id", "=", "id", "*", "1000", "+", "nbInstances", "[", "label", "]", "\n", "instances_ids", "[", "labelTuple", ".", "id", "]", ".", "append", "(", "id", ")", "\n", "nbInstances", "[", "label", "]", "+=", "1", "\n", "object_id", "=", "global_id", "\n", "global_id", "+=", "1", "\n", "ins_map", "=", "(", "np", ".", "squeeze", "(", "img", ")", "==", "np", ".", "squeeze", "(", "id", ")", ")", ".", "astype", "(", "float", ")", "\n", "ins_area", "=", "np", ".", "sum", "(", "ins_map", ")", "\n", "if", "ins_area", ">", "0", ":", "\n", "                ", "yy", ",", "xx", "=", "np", ".", "where", "(", "ins_map", ">", "0", ")", "\n", "height", "=", "float", "(", "yy", ".", "max", "(", ")", "-", "yy", ".", "min", "(", ")", "+", "1", ")", "\n", "width", "=", "float", "(", "xx", ".", "max", "(", ")", "-", "xx", ".", "min", "(", ")", "+", "1", ")", "\n", "box_area", "=", "height", "*", "width", "\n", "area_ratio", "=", "float", "(", "ins_area", ")", "/", "box_area", "\n", "width_ratio", "=", "float", "(", "resize_size", "[", "0", "]", ")", "/", "width", "\n", "height_ratio", "=", "float", "(", "resize_size", "[", "1", "]", ")", "/", "height", "\n", "aspect_ratio", "=", "np", ".", "max", "(", "(", "height", "/", "width", ",", "width", "/", "height", ")", ")", "\n", "json_data", "[", "str", "(", "id", ")", "]", "=", "{", "\"class_id\"", ":", "int", "(", "labelTuple", ".", "id", ")", ",", "\n", "\"global_id\"", ":", "int", "(", "object_id", ")", ",", "\n", "\"train_id\"", ":", "int", "(", "labelTuple", ".", "trainId", ")", ",", "\n", "\"area\"", ":", "float", "(", "ins_area", ")", ",", "\n", "\"height\"", ":", "height", ",", "\n", "\"width\"", ":", "width", ",", "\n", "\"box_area\"", ":", "box_area", ",", "\n", "\"area_ratio\"", ":", "area_ratio", ",", "\n", "\"width_ratio\"", ":", "width_ratio", ",", "\n", "\"height_ratio\"", ":", "height_ratio", ",", "\n", "\"aspect_ratio\"", ":", "float", "(", "aspect_ratio", ")", ",", "\n", "\"bbox\"", ":", "[", "float", "(", "yy", ".", "min", "(", ")", ")", ",", "float", "(", "xx", ".", "min", "(", ")", ")", ",", "float", "(", "yy", ".", "max", "(", ")", ")", ",", "float", "(", "xx", ".", "max", "(", ")", ")", "]", "\n", "}", "\n", "", "", "", "json_data", "=", "check_occlusion", "(", "json_data", ",", "img", ")", "\n", "return", "json_data", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.copy_file": [[132, 147], ["sorted", "enumerate", "glob.glob", "PIL.Image.open", "img.resize.save", "print", "os.path.join", "img.resize.resize", "os.path.join", "img.resize.resize", "preprocess_city.generate_json_data_inst", "json.dump", "json.dump", "src_path.split", "len", "open", "os.path.join", "[].split", "src_path.split"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.save", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.datasets.resize", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.datasets.resize", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.generate_json_data_inst"], ["", "def", "copy_file", "(", "src", ",", "src_ext", ",", "dst", ",", "type", ",", "resize_size", ")", ":", "\n", "# find all files ends up with ext", "\n", "    ", "flist", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "src", ",", "'*'", ",", "src_ext", ")", ")", ")", "\n", "for", "idx", ",", "fname", "in", "enumerate", "(", "flist", ")", ":", "\n", "        ", "src_path", "=", "fname", "\n", "img", "=", "Image", ".", "open", "(", "src_path", ")", "\n", "if", "type", "==", "\"img\"", ":", "\n", "            ", "img", "=", "img", ".", "resize", "(", "(", "resize_size", "[", "0", "]", ",", "resize_size", "[", "1", "]", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "", "elif", "type", "in", "[", "\"inst\"", ",", "\"label\"", "]", ":", "\n", "            ", "img", "=", "img", ".", "resize", "(", "(", "resize_size", "[", "0", "]", ",", "resize_size", "[", "1", "]", ")", ",", "Image", ".", "NEAREST", ")", "\n", "if", "type", "==", "\"inst\"", ":", "\n", "                ", "json_data", "=", "generate_json_data_inst", "(", "fname", ",", "img", ",", "src", ",", "resize_size", ")", "\n", "json", ".", "dump", "(", "json_data", ",", "open", "(", "os", ".", "path", ".", "join", "(", "dst", ",", "\"_\"", ".", "join", "(", "src_path", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\"_\"", ")", "[", ":", "-", "1", "]", ")", "+", "\"_data.json\"", ")", ",", "\"w\"", ")", ",", "indent", "=", "4", ")", "\n", "", "", "img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "dst", ",", "src_path", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ")", ")", "\n", "print", "(", "f'[{idx+1}/{len(flist)}] copied {src_path} to {dst}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.html.HTML.__init__": [[7, 20], ["os.path.join", "dominate.document", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "meta", "str"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "web_dir", ",", "title", ",", "refresh", "=", "0", ")", ":", "\n", "        ", "self", ".", "title", "=", "title", "\n", "self", ".", "web_dir", "=", "web_dir", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "'images'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "web_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "web_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "img_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "img_dir", ")", "\n", "\n", "", "self", ".", "doc", "=", "dominate", ".", "document", "(", "title", "=", "title", ")", "\n", "if", "refresh", ">", "0", ":", "\n", "            ", "with", "self", ".", "doc", ".", "head", ":", "\n", "                ", "meta", "(", "http_equiv", "=", "\"refresh\"", ",", "content", "=", "str", "(", "refresh", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.html.HTML.get_image_dir": [[21, 23], ["None"], "methods", ["None"], ["", "", "", "def", "get_image_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "img_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.html.HTML.add_header": [[24, 27], ["h3"], "methods", ["None"], ["", "def", "add_header", "(", "self", ",", "str", ")", ":", "\n", "        ", "with", "self", ".", "doc", ":", "\n", "            ", "h3", "(", "str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.html.HTML.add_table": [[28, 31], ["table", "html.HTML.doc.add"], "methods", ["None"], ["", "", "def", "add_table", "(", "self", ",", "border", "=", "1", ")", ":", "\n", "        ", "self", ".", "t", "=", "table", "(", "border", "=", "border", ",", "style", "=", "\"table-layout: fixed;\"", ")", "\n", "self", ".", "doc", ".", "add", "(", "self", ".", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.html.HTML.add_images": [[32, 43], ["html.HTML.add_table", "tr", "zip", "td", "p", "br", "p", "a", "img", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.html.HTML.add_table"], ["", "def", "add_images", "(", "self", ",", "ims", ",", "txts", ",", "links", ",", "width", "=", "512", ")", ":", "\n", "        ", "self", ".", "add_table", "(", ")", "\n", "with", "self", ".", "t", ":", "\n", "            ", "with", "tr", "(", ")", ":", "\n", "                ", "for", "im", ",", "txt", ",", "link", "in", "zip", "(", "ims", ",", "txts", ",", "links", ")", ":", "\n", "                    ", "with", "td", "(", "style", "=", "\"word-wrap: break-word;\"", ",", "halign", "=", "\"center\"", ",", "valign", "=", "\"top\"", ")", ":", "\n", "                        ", "with", "p", "(", ")", ":", "\n", "                            ", "with", "a", "(", "href", "=", "os", ".", "path", ".", "join", "(", "'images'", ",", "link", ")", ")", ":", "\n", "                                ", "img", "(", "style", "=", "\"width:%dpx\"", "%", "(", "width", ")", ",", "src", "=", "os", ".", "path", ".", "join", "(", "'images'", ",", "im", ")", ")", "\n", "", "br", "(", ")", "\n", "p", "(", "txt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.html.HTML.save": [[44, 49], ["open", "open.write", "open.close", "html.HTML.doc.render"], "methods", ["None"], ["", "", "", "", "", "", "def", "save", "(", "self", ")", ":", "\n", "        ", "html_file", "=", "'%s/index.html'", "%", "self", ".", "web_dir", "\n", "f", "=", "open", "(", "html_file", ",", "'wt'", ")", "\n", "f", ".", "write", "(", "self", ".", "doc", ".", "render", "(", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.visualizer.Visualizer.__init__": [[14, 47], ["tf.disable_eager_execution", "os.path.join", "tf.summary.FileWriter", "os.path.join", "os.path.join", "util.mkdirs", "os.path.join", "os.path.join", "open", "time.strftime", "print", "log_file.write", "log_file.write"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.mkdirs"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "# self.opt = opt", "\n", "        ", "self", ".", "tf_log", "=", "opt", ".", "tf_log", "\n", "self", ".", "use_html", "=", "opt", ".", "isTrain", "and", "not", "opt", ".", "no_html", "\n", "self", ".", "win_size", "=", "opt", ".", "display_winsize", "\n", "self", ".", "name", "=", "opt", ".", "name", "\n", "self", ".", "base_folder", "=", "\"SGI-NET\"", "\n", "\n", "if", "self", ".", "tf_log", ":", "\n", "            ", "import", "tensorflow", ".", "compat", ".", "v1", "as", "tf", "\n", "tf", ".", "disable_eager_execution", "(", ")", "\n", "self", ".", "tf", "=", "tf", "\n", "self", ".", "log_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "self", ".", "base_folder", ",", "opt", ".", "name", ",", "'logs'", ")", "\n", "self", ".", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "self", ".", "log_dir", ")", "\n", "\n", "", "if", "self", ".", "use_html", ":", "\n", "            ", "self", ".", "web_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "self", ".", "base_folder", ",", "opt", ".", "name", ",", "'web'", ")", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "'images'", ")", "\n", "if", "opt", ".", "local_rank", "==", "0", ":", "\n", "                ", "print", "(", "'create web directory %s...'", "%", "self", ".", "web_dir", ")", "\n", "", "util", ".", "mkdirs", "(", "[", "self", ".", "web_dir", ",", "self", ".", "img_dir", "]", ")", "\n", "", "if", "opt", ".", "isTrain", ":", "\n", "            ", "self", ".", "log_name", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "self", ".", "base_folder", ",", "opt", ".", "name", ",", "'loss_log.txt'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "log_name", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "self", ".", "base_folder", ",", "\n", "opt", ".", "name", ",", "\"test\"", ",", "opt", ".", "which_epoch", ",", "'res_log.txt'", ")", "\n", "", "with", "open", "(", "self", ".", "log_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "            ", "now", "=", "time", ".", "strftime", "(", "\"%c\"", ")", "\n", "if", "opt", ".", "isTrain", ":", "\n", "                ", "log_file", ".", "write", "(", "'================ Training Loss (%s) ================\\n'", "%", "now", ")", "\n", "", "else", ":", "\n", "                ", "log_file", ".", "write", "(", "\n", "'================ Test Time (%s) ================\\n'", "%", "now", ")", "\n", "# |visuals|: dictionary of images to display or save", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.visualizer.Visualizer.display_current_results": [[48, 112], ["visuals.items", "visualizer.Visualizer.tf.Summary", "visualizer.Visualizer.writer.add_summary", "visuals.items", "html.HTML", "range", "html.HTML.save", "PIL.Image.fromarray().save", "visualizer.Visualizer.tf.Summary.Image", "img_summaries.append", "isinstance", "max", "html.HTML.add_header", "visuals.items", "StringIO", "visualizer.Visualizer.tf.Summary.Value", "range", "os.path.join", "util.save_image", "isinstance", "len", "html.HTML.add_images", "int", "html.HTML.add_images", "html.HTML.add_images", "BytesIO", "PIL.Image.fromarray", "BytesIO.getvalue", "len", "os.path.join", "util.save_image", "range", "ims.append", "txts.append", "links.append", "round", "len", "ims.append", "txts.append", "links.append", "len", "str"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.save", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.save", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.html.HTML.add_header", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.save_image", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.html.HTML.add_images", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.html.HTML.add_images", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.html.HTML.add_images", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.save_image"], ["", "", "", "def", "display_current_results", "(", "self", ",", "visuals", ",", "epoch", ",", "step", ")", ":", "\n", "        ", "if", "self", ".", "tf_log", ":", "# show images in tensorboard output", "\n", "            ", "img_summaries", "=", "[", "]", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "# Write the image to a string", "\n", "                ", "if", "None", "in", "image_numpy", ":", "\n", "                    ", "continue", "\n", "", "try", ":", "\n", "                    ", "s", "=", "StringIO", "(", ")", "\n", "", "except", ":", "\n", "                    ", "s", "=", "BytesIO", "(", ")", "\n", "", "Image", ".", "fromarray", "(", "image_numpy", ")", ".", "save", "(", "s", ",", "format", "=", "\"jpeg\"", ")", "\n", "# Create an Image object", "\n", "img_sum", "=", "self", ".", "tf", ".", "Summary", ".", "Image", "(", "encoded_image_string", "=", "s", ".", "getvalue", "(", ")", ",", "height", "=", "image_numpy", ".", "shape", "[", "0", "]", ",", "width", "=", "image_numpy", ".", "shape", "[", "1", "]", ")", "\n", "# Create a Summary value", "\n", "img_summaries", ".", "append", "(", "self", ".", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "f\"Train/{label}\"", ",", "image", "=", "img_sum", ")", ")", "\n", "\n", "# Create and write Summary", "\n", "", "summary", "=", "self", ".", "tf", ".", "Summary", "(", "value", "=", "img_summaries", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "\n", "", "if", "self", ".", "use_html", ":", "# save images to a html file", "\n", "            ", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                ", "if", "None", "in", "image_numpy", ":", "\n", "                    ", "continue", "\n", "\n", "", "if", "isinstance", "(", "image_numpy", ",", "list", ")", ":", "\n", "                    ", "for", "i", "in", "range", "(", "len", "(", "image_numpy", ")", ")", ":", "\n", "                        ", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "'epoch%.3d_%s_%d.jpg'", "%", "(", "epoch", ",", "label", ",", "i", ")", ")", "\n", "util", ".", "save_image", "(", "image_numpy", "[", "i", "]", ",", "img_path", ")", "\n", "", "", "else", ":", "\n", "                    ", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "'epoch%.3d_%s.jpg'", "%", "(", "epoch", ",", "label", ")", ")", "\n", "util", ".", "save_image", "(", "image_numpy", ",", "img_path", ")", "\n", "\n", "# update website", "\n", "", "", "webpage", "=", "html", ".", "HTML", "(", "self", ".", "web_dir", ",", "'Experiment name = %s'", "%", "self", ".", "name", ",", "refresh", "=", "30", ")", "\n", "for", "n", "in", "range", "(", "epoch", ",", "max", "(", "epoch", "-", "10", ",", "0", ")", ",", "-", "1", ")", ":", "\n", "                ", "webpage", ".", "add_header", "(", "'epoch [%d]'", "%", "n", ")", "\n", "ims", "=", "[", "]", "\n", "txts", "=", "[", "]", "\n", "links", "=", "[", "]", "\n", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                    ", "if", "None", "in", "image_numpy", ":", "\n", "                        ", "continue", "\n", "\n", "", "if", "isinstance", "(", "image_numpy", ",", "list", ")", ":", "\n", "                        ", "for", "i", "in", "range", "(", "len", "(", "image_numpy", ")", ")", ":", "\n", "                            ", "img_path", "=", "'epoch%.3d_%s_%d.jpg'", "%", "(", "n", ",", "label", ",", "i", ")", "\n", "ims", ".", "append", "(", "img_path", ")", "\n", "txts", ".", "append", "(", "label", "+", "str", "(", "i", ")", ")", "\n", "links", ".", "append", "(", "img_path", ")", "\n", "", "", "else", ":", "\n", "                        ", "img_path", "=", "'epoch%.3d_%s.jpg'", "%", "(", "n", ",", "label", ")", "\n", "ims", ".", "append", "(", "img_path", ")", "\n", "txts", ".", "append", "(", "label", ")", "\n", "links", ".", "append", "(", "img_path", ")", "\n", "", "", "if", "len", "(", "ims", ")", "<", "10", ":", "\n", "                    ", "webpage", ".", "add_images", "(", "ims", ",", "txts", ",", "links", ",", "width", "=", "self", ".", "win_size", ")", "\n", "", "else", ":", "\n", "                    ", "num", "=", "int", "(", "round", "(", "len", "(", "ims", ")", "/", "2.0", ")", ")", "\n", "webpage", ".", "add_images", "(", "ims", "[", ":", "num", "]", ",", "txts", "[", ":", "num", "]", ",", "links", "[", ":", "num", "]", ",", "width", "=", "self", ".", "win_size", ")", "\n", "webpage", ".", "add_images", "(", "ims", "[", "num", ":", "]", ",", "txts", "[", "num", ":", "]", ",", "links", "[", "num", ":", "]", ",", "width", "=", "self", ".", "win_size", ")", "\n", "", "", "webpage", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.visualizer.Visualizer.plot_current_errors": [[114, 119], ["errors.items", "visualizer.Visualizer.tf.Summary", "visualizer.Visualizer.writer.add_summary", "visualizer.Visualizer.tf.Summary.Value"], "methods", ["None"], ["", "", "def", "plot_current_errors", "(", "self", ",", "errors", ",", "step", ")", ":", "\n", "        ", "if", "self", ".", "tf_log", ":", "\n", "            ", "for", "tag", ",", "value", "in", "errors", ".", "items", "(", ")", ":", "\n", "                ", "summary", "=", "self", ".", "tf", ".", "Summary", "(", "value", "=", "[", "self", ".", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "f\"Train/{tag}\"", ",", "simple_value", "=", "value", ")", "]", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.visualizer.Visualizer.print_current_errors": [[121, 130], ["errors.items", "print", "open", "log_file.write"], "methods", ["None"], ["", "", "", "def", "print_current_errors", "(", "self", ",", "epoch", ",", "i", ",", "errors", ",", "t", ")", ":", "\n", "        ", "message", "=", "'(epoch: %d, iters: %d, time: %.7f) '", "%", "(", "epoch", ",", "i", ",", "t", ")", "\n", "for", "k", ",", "v", "in", "errors", ".", "items", "(", ")", ":", "\n", "            ", "if", "v", "!=", "0", ":", "\n", "                ", "message", "+=", "'%s: %.7f '", "%", "(", "k", ",", "v", ")", "\n", "\n", "", "", "print", "(", "message", ")", "\n", "with", "open", "(", "self", ".", "log_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "            ", "log_file", ".", "write", "(", "'%s\\n'", "%", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.visualizer.Visualizer.print_results": [[131, 139], ["results.items", "print", "open", "log_file.write"], "methods", ["None"], ["", "", "def", "print_results", "(", "self", ",", "results", ")", ":", "\n", "        ", "message", "=", "'(test epoch)'", "\n", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", ":", "\n", "            ", "if", "v", "!=", "0", ":", "\n", "                ", "message", "+=", "'%s: %.7f '", "%", "(", "k", ",", "v", ")", "\n", "", "", "print", "(", "message", ")", "\n", "with", "open", "(", "self", ".", "log_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "            ", "log_file", ".", "write", "(", "'%s\\n'", "%", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.visualizer.Visualizer.print_current_gradient": [[141, 150], ["gradients.items", "print", "open", "log_file.write"], "methods", ["None"], ["", "", "def", "print_current_gradient", "(", "self", ",", "epoch", ",", "i", ",", "gradients", ",", "t", ")", ":", "\n", "        ", "message", "=", "'(epoch: %d, iters: %d, time: %.3f) '", "%", "(", "epoch", ",", "i", ",", "t", ")", "\n", "for", "k", ",", "v", "in", "gradients", ".", "items", "(", ")", ":", "\n", "            ", "if", "v", ":", "\n", "                ", "message", "+=", "'%s: %.8f \\n '", "%", "(", "k", ",", "v", ")", "\n", "\n", "", "", "print", "(", "message", ")", "\n", "with", "open", "(", "self", ".", "log_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "            ", "log_file", ".", "write", "(", "'%s\\n'", "%", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.visualizer.Visualizer.save_images": [[152, 173], ["webpage.get_image_dir", "ntpath.basename", "webpage.add_header", "visuals.items", "webpage.add_images", "os.path.splitext", "os.path.join", "util.save_image", "ims.append", "txts.append", "links.append"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.html.HTML.get_image_dir", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.html.HTML.add_header", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.html.HTML.add_images", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.save_image"], ["", "", "def", "save_images", "(", "self", ",", "webpage", ",", "visuals", ",", "image_path", ")", ":", "\n", "        ", "image_dir", "=", "webpage", ".", "get_image_dir", "(", ")", "\n", "short_path", "=", "ntpath", ".", "basename", "(", "image_path", "[", "0", "]", ")", "\n", "name", "=", "os", ".", "path", ".", "splitext", "(", "short_path", ")", "[", "0", "]", "\n", "\n", "webpage", ".", "add_header", "(", "name", ")", "\n", "ims", "=", "[", "]", "\n", "txts", "=", "[", "]", "\n", "links", "=", "[", "]", "\n", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "            ", "if", "None", "in", "image_numpy", ":", "\n", "                ", "continue", "\n", "", "image_name", "=", "'%s_%s.jpg'", "%", "(", "name", ",", "label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "image_dir", ",", "image_name", ")", "\n", "util", ".", "save_image", "(", "image_numpy", ",", "save_path", ")", "\n", "\n", "ims", ".", "append", "(", "image_name", ")", "\n", "txts", ".", "append", "(", "label", ")", "\n", "links", ".", "append", "(", "image_name", ")", "\n", "", "webpage", ".", "add_images", "(", "ims", ",", "txts", ",", "links", ",", "width", "=", "self", ".", "win_size", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.Colorize.__init__": [[741, 744], ["util.labelcolormap", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.labelcolormap"], ["    ", "def", "__init__", "(", "self", ",", "n", "=", "35", ")", ":", "\n", "        ", "self", ".", "cmap", "=", "labelcolormap", "(", "n", ")", "\n", "self", ".", "cmap", "=", "torch", ".", "from_numpy", "(", "self", ".", "cmap", "[", ":", "n", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.Colorize.__call__": [[745, 756], ["gray_image.size", "torch.ByteTensor().fill_", "range", "len", "torch.ByteTensor"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size"], ["", "def", "__call__", "(", "self", ",", "gray_image", ")", ":", "\n", "        ", "size", "=", "gray_image", ".", "size", "(", ")", "\n", "color_image", "=", "torch", ".", "ByteTensor", "(", "3", ",", "size", "[", "1", "]", ",", "size", "[", "2", "]", ")", ".", "fill_", "(", "0", ")", "\n", "\n", "for", "label", "in", "range", "(", "0", ",", "len", "(", "self", ".", "cmap", ")", ")", ":", "\n", "            ", "mask", "=", "(", "label", "==", "gray_image", "[", "0", "]", ")", ".", "cpu", "(", ")", "\n", "color_image", "[", "0", "]", "[", "mask", "]", "=", "self", ".", "cmap", "[", "label", "]", "[", "0", "]", "\n", "color_image", "[", "1", "]", "[", "mask", "]", "=", "self", ".", "cmap", "[", "label", "]", "[", "1", "]", "\n", "color_image", "[", "2", "]", "[", "mask", "]", "=", "self", ".", "cmap", "[", "label", "]", "[", "2", "]", "\n", "\n", "", "return", "color_image", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.normalize_tensor": [[14, 17], ["torch.sqrt", "torch.sum"], "function", ["None"], ["def", "normalize_tensor", "(", "in_feat", ",", "eps", "=", "1e-10", ")", ":", "\n", "    ", "norm_factor", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "in_feat", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ")", "\n", "return", "in_feat", "/", "(", "norm_factor", "+", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.tensor2im": [[21, 38], ["isinstance", "image_tensor.cpu().float().numpy", "numpy.clip", "np.clip.astype", "range", "len", "np.clip.append", "image_tensor.cpu().float", "numpy.transpose", "util.tensor2im", "image_tensor.cpu", "numpy.transpose", "util.normalize"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.normalize"], ["", "def", "tensor2im", "(", "image_tensor", ",", "imtype", "=", "np", ".", "uint8", ",", "normalize", "=", "True", ")", ":", "\n", "    ", "if", "image_tensor", "is", "None", ":", "\n", "        ", "return", "[", "None", "]", "\n", "", "if", "isinstance", "(", "image_tensor", ",", "list", ")", ":", "\n", "        ", "image_numpy", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "image_tensor", ")", ")", ":", "\n", "            ", "image_numpy", ".", "append", "(", "tensor2im", "(", "image_tensor", "[", "i", "]", ",", "imtype", ",", "normalize", ")", ")", "\n", "", "return", "image_numpy", "\n", "", "image_numpy", "=", "image_tensor", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "if", "normalize", ":", "\n", "        ", "image_numpy", "=", "(", "np", ".", "transpose", "(", "image_numpy", ",", "(", "1", ",", "2", ",", "0", ")", ")", "+", "1", ")", "/", "2.0", "*", "255.0", "\n", "", "else", ":", "\n", "        ", "image_numpy", "=", "np", ".", "transpose", "(", "image_numpy", ",", "(", "1", ",", "2", ",", "0", ")", ")", "*", "255.0", "\n", "", "image_numpy", "=", "np", ".", "clip", "(", "image_numpy", ",", "0", ",", "255", ")", "\n", "if", "image_numpy", ".", "shape", "[", "2", "]", "==", "1", "or", "image_numpy", ".", "shape", "[", "2", "]", ">", "3", ":", "\n", "        ", "image_numpy", "=", "image_numpy", "[", ":", ",", ":", ",", "0", "]", "\n", "", "return", "image_numpy", ".", "astype", "(", "imtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.tensor2label": [[40, 51], ["label_tensor.cpu().float.cpu().float", "numpy.transpose", "np.transpose.astype", "util.tensor2im", "util.Colorize", "label_tensor.cpu().float.numpy", "label_tensor.cpu().float.cpu", "label_tensor.cpu().float.size", "label_tensor.cpu().float.max"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size"], ["", "def", "tensor2label", "(", "label_tensor", ",", "n_label", ",", "imtype", "=", "np", ".", "uint8", ")", ":", "\n", "    ", "if", "label_tensor", "is", "None", ":", "\n", "        ", "return", "[", "None", "]", "\n", "", "if", "n_label", "==", "0", ":", "\n", "        ", "return", "tensor2im", "(", "label_tensor", ",", "imtype", ")", "\n", "", "label_tensor", "=", "label_tensor", ".", "cpu", "(", ")", ".", "float", "(", ")", "\n", "if", "label_tensor", ".", "size", "(", ")", "[", "0", "]", ">", "1", ":", "\n", "        ", "label_tensor", "=", "label_tensor", ".", "max", "(", "0", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "", "label_tensor", "=", "Colorize", "(", "n_label", ")", "(", "label_tensor", ")", "\n", "label_numpy", "=", "np", ".", "transpose", "(", "label_tensor", ".", "numpy", "(", ")", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "return", "label_numpy", ".", "astype", "(", "imtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.save_image": [[52, 55], ["PIL.Image.fromarray", "Image.fromarray.save"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.save"], ["", "def", "save_image", "(", "image_numpy", ",", "image_path", ")", ":", "\n", "    ", "image_pil", "=", "Image", ".", "fromarray", "(", "image_numpy", ")", "\n", "image_pil", ".", "save", "(", "image_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.generate_masks": [[56, 66], ["range", "util._random_mask", "masks.append", "indexes.append", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util._random_mask"], ["", "def", "generate_masks", "(", "opt", ")", ":", "\n", "    ", "masks", "=", "[", "]", "\n", "indexes", "=", "[", "]", "\n", "image_height", "=", "opt", ".", "size_crop_height", "if", "opt", ".", "size_crop_height", "else", "opt", ".", "image_height", "\n", "image_width", "=", "opt", ".", "size_crop_width", "if", "opt", ".", "size_crop_width", "else", "opt", ".", "image_width", "\n", "for", "_", "in", "range", "(", "opt", ".", "how_many", ")", ":", "\n", "        ", "mask", ",", "index", "=", "_random_mask", "(", "[", "image_height", ",", "image_width", "]", ",", "opt", ".", "min_hole_size", ",", "opt", ".", "max_hole_size", ")", "\n", "masks", ".", "append", "(", "mask", ")", "\n", "indexes", ".", "append", "(", "index", ")", "\n", "", "return", "np", ".", "asarray", "(", "masks", ")", ",", "indexes", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.generare_masks_data": [[68, 89], ["util.generate_masks", "util.mkdir", "pickle.dump", "opt.dataset.lower", "open"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.generate_masks", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.mkdir"], ["", "def", "generare_masks_data", "(", "opt", ")", ":", "\n", "    ", "import", "pickle", "\n", "masks", ",", "indexes", "=", "generate_masks", "(", "opt", ")", "\n", "opt_dict", "=", "{", "}", "\n", "image_height", "=", "opt", ".", "size_crop_height", "if", "opt", ".", "size_crop_height", "else", "opt", ".", "image_height", "\n", "image_width", "=", "opt", ".", "size_crop_width", "if", "opt", ".", "size_crop_width", "else", "opt", ".", "image_width", "\n", "opt_dict", "[", "\"masks\"", "]", "=", "masks", "\n", "opt_dict", "[", "\"indexes\"", "]", "=", "indexes", "\n", "opt_dict", "[", "\"min_hole_size\"", "]", "=", "opt", ".", "min_hole_size", "\n", "opt_dict", "[", "\"max_hole_size\"", "]", "=", "opt", ".", "max_hole_size", "\n", "opt_dict", "[", "\"image_height\"", "]", "=", "image_height", "\n", "opt_dict", "[", "\"image_width\"", "]", "=", "image_width", "\n", "if", "opt", ".", "dataset", ".", "lower", "(", ")", "==", "\"indiandrivingdataset\"", ":", "\n", "        ", "folder", "=", "\"../masks_data_idd\"", "\n", "", "else", ":", "\n", "        ", "folder", "=", "\"../masks_data\"", "\n", "", "mkdir", "(", "folder", ")", "\n", "pickle", ".", "dump", "(", "opt_dict", ",", "open", "(", "f\"{folder}/masks_dict_H{image_height}\"", "\n", "f\"_W{image_width}_Min{opt.min_hole_size}\"", "\n", "f\"_Max{opt.max_hole_size}.p\"", ",", "\"wb\"", ")", ")", "\n", "return", "masks", ",", "indexes", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.generate_latent_data": [[91, 103], ["torch.FloatTensor().normal_", "util.mkdir", "pickle.dump", "opt.dataset.lower", "open", "torch.FloatTensor"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.mkdir"], ["", "def", "generate_latent_data", "(", "opt", ")", ":", "\n", "    ", "import", "pickle", "\n", "z_appr", "=", "torch", ".", "FloatTensor", "(", "opt", ".", "how_many", ",", "opt", ".", "z_len", ",", "1", ",", "1", ")", ".", "normal_", "(", "0", ",", "1", ")", "\n", "opt_dict", "=", "{", "}", "\n", "opt_dict", "[", "\"z_latent_appr\"", "]", "=", "z_appr", "\n", "if", "opt", ".", "dataset", ".", "lower", "(", ")", "==", "\"indiandrivingdataset\"", ":", "\n", "        ", "folder", "=", "\"../latent_data_idd\"", "\n", "", "else", ":", "\n", "        ", "folder", "=", "\"../latent_data\"", "\n", "", "mkdir", "(", "folder", ")", "\n", "pickle", ".", "dump", "(", "opt_dict", ",", "open", "(", "f\"{folder}/latent_data_Z{opt.z_len}_MANY_{opt.how_many}\"", ",", "\"wb\"", ")", ")", "\n", "return", "z_appr", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.load_masks_data": [[105, 123], ["os.path.exists", "opt.dataset.lower", "pickle.load", "print", "util.generare_masks_data", "open"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.configuration.load", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.generare_masks_data"], ["", "def", "load_masks_data", "(", "opt", ")", ":", "\n", "    ", "import", "pickle", "\n", "image_height", "=", "opt", ".", "size_crop_height", "if", "opt", ".", "size_crop_height", "else", "opt", ".", "image_height", "\n", "image_width", "=", "opt", ".", "size_crop_width", "if", "opt", ".", "size_crop_width", "else", "opt", ".", "image_width", "\n", "if", "opt", ".", "dataset", ".", "lower", "(", ")", "==", "\"indiandrivingdataset\"", ":", "\n", "        ", "path", "=", "f\"../masks_data_idd/masks_dict_H{image_height}\"", "f\"_W{image_width}_Min{opt.min_hole_size}\"", "f\"_Max{opt.max_hole_size}.p\"", "\n", "", "else", ":", "\n", "        ", "path", "=", "f\"../masks_data/masks_dict_H{image_height}\"", "f\"_W{image_width}_Min{opt.min_hole_size}\"", "f\"_Max{opt.max_hole_size}.p\"", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "opt_dict", "=", "pickle", ".", "load", "(", "open", "(", "path", ",", "\"rb\"", ")", ")", "\n", "return", "opt_dict", "[", "\"masks\"", "]", ",", "opt_dict", "[", "\"indexes\"", "]", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Mask data does not exists, generate new ones.\"", ")", "\n", "return", "generare_masks_data", "(", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.load_latent_vector_appr": [[125, 137], ["os.path.exists", "opt.dataset.lower", "pickle.load", "print", "util.generate_latent_data", "open"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.configuration.load", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.generate_latent_data"], ["", "", "def", "load_latent_vector_appr", "(", "opt", ")", ":", "\n", "    ", "import", "pickle", "\n", "if", "opt", ".", "dataset", ".", "lower", "(", ")", "==", "\"indiandrivingdataset\"", ":", "\n", "        ", "path", "=", "f\"../latent_data_idd/latent_data_Z{opt.z_len}_MANY_{opt.how_many}\"", "\n", "", "else", ":", "\n", "        ", "path", "=", "f\"../latent_data/latent_data_Z{opt.z_len}_MANY_{opt.how_many}\"", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "opt_dict", "=", "pickle", ".", "load", "(", "open", "(", "path", ",", "\"rb\"", ")", ")", "\n", "return", "opt_dict", "[", "\"z_latent_appr\"", "]", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Latent data does not exists, generate new ones.\"", ")", "\n", "return", "generate_latent_data", "(", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.mkdirs": [[139, 145], ["isinstance", "util.mkdir", "isinstance", "util.mkdir"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.mkdir", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.mkdir"], ["", "", "def", "mkdirs", "(", "paths", ")", ":", "\n", "    ", "if", "isinstance", "(", "paths", ",", "list", ")", "and", "not", "isinstance", "(", "paths", ",", "str", ")", ":", "\n", "        ", "for", "path", "in", "paths", ":", "\n", "            ", "mkdir", "(", "path", ")", "\n", "", "", "else", ":", "\n", "        ", "mkdir", "(", "paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.mkdir": [[147, 150], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util._random_mask": [[152, 160], ["numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.full"], "function", ["None"], ["", "", "def", "_random_mask", "(", "img_shape", ",", "min_hole", ",", "max_hole", ",", "fix_seed", "=", "False", ")", ":", "\n", "    ", "cur_rows", ",", "cur_cols", "=", "np", ".", "random", ".", "randint", "(", "min_hole", ",", "max_hole", ",", "size", "=", "2", ")", "\n", "cur_y", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "img_shape", "[", "0", "]", "-", "cur_rows", ")", "\n", "cur_x", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "img_shape", "[", "1", "]", "-", "cur_cols", ")", "\n", "cur_mask", "=", "np", ".", "full", "(", "(", "img_shape", "[", "0", "]", ",", "img_shape", "[", "1", "]", ")", ",", "0", ",", "dtype", "=", "'uint8'", ")", "\n", "#cur_mask = np.zeros([img.shape[1], img.shape[2]], dtype='uint8')", "\n", "cur_mask", "[", "cur_y", ":", "cur_y", "+", "cur_rows", ",", "cur_x", ":", "cur_x", "+", "cur_cols", "]", "=", "255", "\n", "return", "cur_mask", ",", "[", "cur_y", ",", "cur_y", "+", "cur_rows", ",", "cur_x", ",", "cur_x", "+", "cur_cols", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util._center_mask": [[162, 170], ["int", "int", "numpy.full"], "function", ["None"], ["", "def", "_center_mask", "(", "img_shape", ",", "min_hole", ",", "max_hole", ",", "fix_seed", "=", "False", ")", ":", "\n", "    ", "cur_rows", ",", "cur_cols", "=", "min_hole", ",", "max_hole", "\n", "cur_y", "=", "int", "(", "(", "img_shape", "[", "0", "]", "/", "2", ")", "-", "(", "cur_rows", "/", "2", ")", ")", "\n", "cur_x", "=", "int", "(", "(", "img_shape", "[", "1", "]", "/", "2", ")", "-", "(", "cur_cols", "/", "2", ")", ")", "\n", "cur_mask", "=", "np", ".", "full", "(", "(", "img_shape", "[", "0", "]", ",", "img_shape", "[", "1", "]", ")", ",", "0", ",", "dtype", "=", "'uint8'", ")", "\n", "#cur_mask = np.zeros([img.shape[1], img.shape[2]], dtype='uint8')", "\n", "cur_mask", "[", "cur_y", ":", "cur_y", "+", "cur_rows", ",", "cur_x", ":", "cur_x", "+", "cur_cols", "]", "=", "255", "\n", "return", "cur_mask", ",", "[", "cur_y", ",", "cur_y", "+", "cur_rows", ",", "cur_x", ",", "cur_x", "+", "cur_cols", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util._random_mask_with_instance_cond": [[172, 194], ["numpy.random.randint", "numpy.where", "int", "int", "max", "max", "numpy.random.randint", "numpy.random.randint", "numpy.full", "numpy.random.seed", "min", "min", "max", "max", "yy.min", "xx.min", "yy.max", "xx.max", "inst_maps.view", "min", "min", "yy.max", "yy.min", "xx.max", "xx.min", "yy.max", "yy.min", "xx.max", "xx.min"], "function", ["None"], ["", "def", "_random_mask_with_instance_cond", "(", "img_shape", ",", "min_hole", ",", "max_hole", ",", "inst_maps", ",", "seed", ")", ":", "\n", "    ", "if", "seed", "is", "not", "None", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "", "cur_rows_random", ",", "cur_cols_random", "=", "np", ".", "random", ".", "randint", "(", "min_hole", ",", "max_hole", ",", "size", "=", "2", ")", "\n", "yy", ",", "xx", "=", "np", ".", "where", "(", "inst_maps", ".", "view", "(", "img_shape", "[", "0", "]", ",", "img_shape", "[", "1", "]", ")", ">", "0", ")", "\n", "height", "=", "int", "(", "yy", ".", "max", "(", ")", "-", "yy", ".", "min", "(", ")", "+", "1", ")", "\n", "width", "=", "int", "(", "xx", ".", "max", "(", ")", "-", "xx", ".", "min", "(", ")", "+", "1", ")", "\n", "cur_rows", "=", "max", "(", "cur_rows_random", ",", "min", "(", "height", "+", "min_hole", ",", "max_hole", ")", ")", "\n", "cur_cols", "=", "max", "(", "cur_cols_random", ",", "min", "(", "width", "+", "min_hole", ",", "max_hole", ")", ")", "\n", "cur_y", "=", "np", ".", "random", ".", "randint", "(", "max", "(", "0", ",", "yy", ".", "max", "(", ")", "-", "cur_rows", ")", ",", "min", "(", "yy", ".", "min", "(", ")", ",", "img_shape", "[", "0", "]", "-", "cur_rows", ")", "+", "1", ")", "\n", "cur_x", "=", "np", ".", "random", ".", "randint", "(", "max", "(", "0", ",", "xx", ".", "max", "(", ")", "-", "cur_cols", ")", ",", "min", "(", "xx", ".", "min", "(", ")", ",", "img_shape", "[", "1", "]", "-", "cur_cols", ")", "+", "1", ")", "\n", "\n", "cur_mask", "=", "np", ".", "full", "(", "(", "img_shape", "[", "0", "]", ",", "img_shape", "[", "1", "]", ")", ",", "0", ",", "dtype", "=", "'uint8'", ")", "\n", "#cur_mask = np.zeros([img.shape[1], img.shape[2]], dtype='uint8')", "\n", "cur_mask", "[", "cur_y", ":", "cur_y", "+", "cur_rows", ",", "cur_x", ":", "cur_x", "+", "cur_cols", "]", "=", "255", "\n", "assert", "cur_y", "<=", "yy", ".", "min", "(", ")", "<=", "cur_y", "+", "cur_rows", "\n", "assert", "cur_x", "<=", "xx", ".", "min", "(", ")", "<=", "cur_x", "+", "cur_cols", "\n", "assert", "cur_y", "<=", "yy", ".", "max", "(", ")", "<=", "cur_y", "+", "cur_rows", "\n", "assert", "cur_x", "<=", "xx", ".", "max", "(", ")", "<=", "cur_x", "+", "cur_cols", "\n", "assert", "cur_y", "+", "cur_rows", "<=", "img_shape", "[", "0", "]", "\n", "assert", "cur_x", "+", "cur_cols", "<=", "img_shape", "[", "1", "]", "\n", "return", "cur_mask", ",", "(", "cur_y", ",", "cur_y", "+", "cur_rows", ",", "cur_x", ",", "cur_x", "+", "cur_cols", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.instInCrop": [[197, 202], ["None"], "function", ["None"], ["", "def", "instInCrop", "(", "bbox", ",", "indexes", ",", "offset", "=", "0", ")", ":", "\n", "    ", "if", "not", "indexes", ":", "\n", "        ", "return", "True", "\n", "", "return", "bbox", "[", "0", "]", ">=", "(", "indexes", "[", "0", "]", "+", "offset", ")", "and", "bbox", "[", "2", "]", "<=", "(", "indexes", "[", "0", "]", "+", "indexes", "[", "2", "]", "-", "offset", ")", "and", "bbox", "[", "1", "]", ">=", "(", "indexes", "[", "1", "]", "+", "offset", ")", "and", "bbox", "[", "3", "]", "<=", "(", "indexes", "[", "1", "]", "+", "indexes", "[", "3", "]", "-", "offset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.instInMap": [[204, 209], ["None"], "function", ["None"], ["", "def", "instInMap", "(", "bbox", ",", "indexes", ",", "crop_indexes", ")", ":", "\n", "    ", "if", "not", "indexes", ":", "\n", "        ", "return", "True", "\n", "", "return", "bbox", "[", "0", "]", ">=", "(", "indexes", "[", "0", "]", "+", "crop_indexes", "[", "0", "]", ")", "and", "bbox", "[", "2", "]", "<=", "indexes", "[", "1", "]", "+", "(", "crop_indexes", "[", "0", "]", ")", "and", "bbox", "[", "1", "]", ">=", "(", "indexes", "[", "2", "]", "+", "crop_indexes", "[", "1", "]", ")", "and", "bbox", "[", "3", "]", "<=", "(", "indexes", "[", "3", "]", "+", "(", "crop_indexes", "[", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.local_patch": [[210, 217], ["range", "torch.stack", "len", "x.size", "patches.append", "x.size"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size"], ["", "def", "local_patch", "(", "x", ",", "bbox", ")", ":", "\n", "    ", "assert", "len", "(", "x", ".", "size", "(", ")", ")", "==", "4", "\n", "patches", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "x", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "h", ",", "h_final", ",", "w", ",", "w_final", "=", "bbox", "\n", "patches", ".", "append", "(", "x", "[", "i", ",", ":", ",", "h", ":", "h_final", ",", "w", ":", "w_final", "]", ")", "\n", "", "return", "torch", ".", "stack", "(", "patches", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.inst_map2bbox": [[218, 241], ["maps.squeeze", "torch.zeros", "numpy.where", "torchvision.Resize", "torchvision.ToPILImage", "torchvision.ToTensor", "torch.from_numpy().float", "transform.ToTensor.", "torch.zeros.unsqueeze", "maps.squeeze.view", "transform.Resize.", "maps.squeeze.view", "torch.from_numpy", "transform.ToPILImage.", "yy.min", "xx.min", "yy.min", "xx.min", "numpy.array", "float", "float", "float", "float", "yy.max", "xx.max", "yy.max", "xx.max", "yy.min", "xx.min", "yy.max", "xx.max"], "function", ["None"], ["", "def", "inst_map2bbox", "(", "maps", ",", "opt", ")", ":", "\n", "    ", "x", "=", "maps", ".", "squeeze", "(", "0", ")", "\n", "bbox", "=", "torch", ".", "zeros", "(", "x", ".", "shape", ")", "\n", "yy", ",", "xx", "=", "np", ".", "where", "(", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ")", ">", "0", ")", "\n", "yt", ",", "yb", "=", "float", "(", "yy", ".", "min", "(", ")", ")", "/", "x", ".", "shape", "[", "0", "]", "*", "2", "-", "1", ",", "float", "(", "\n", "yy", ".", "max", "(", ")", "+", "1", ")", "/", "x", ".", "shape", "[", "0", "]", "*", "2", "-", "1", "\n", "xl", ",", "xr", "=", "float", "(", "xx", ".", "min", "(", ")", ")", "/", "x", ".", "shape", "[", "1", "]", "*", "2", "-", "1", ",", "float", "(", "\n", "xx", ".", "max", "(", ")", "+", "1", ")", "/", "x", ".", "shape", "[", "1", "]", "*", "2", "-", "1", "\n", "theta11", "=", "2", "/", "(", "xr", "-", "xl", ")", "\n", "theta13", "=", "1", "-", "2", "*", "xr", "/", "(", "xr", "-", "xl", ")", "\n", "theta22", "=", "2", "/", "(", "yb", "-", "yt", ")", "\n", "theta23", "=", "1", "-", "2", "*", "yb", "/", "(", "yb", "-", "yt", ")", "\n", "bbox", "[", "yy", ".", "min", "(", ")", ":", "yy", ".", "max", "(", ")", "+", "1", ",", "xx", ".", "min", "(", ")", ":", "xx", ".", "max", "(", ")", "+", "1", "]", "=", "1", "\n", "compact", "=", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ")", "[", "yy", ".", "min", "(", ")", ":", "yy", ".", "max", "(", ")", "+", "1", ",", "xx", ".", "min", "(", ")", ":", "xx", ".", "max", "(", ")", "+", "1", "]", "\n", "resize_img", "=", "transform", ".", "Resize", "(", "(", "opt", ".", "compact_sizex", ",", "\n", "opt", ".", "compact_sizey", ")", ",", "\n", "Image", ".", "NEAREST", ")", "\n", "to_pil", "=", "transform", ".", "ToPILImage", "(", ")", "\n", "to_tensor", "=", "transform", ".", "ToTensor", "(", ")", "\n", "b_theta", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "theta11", ",", "0.", ",", "theta13", ",", "0.", ",", "theta22", ",", "theta23", "]", ")", ")", ".", "float", "(", ")", "\n", "inst_compact", "=", "to_tensor", "(", "resize_img", "(", "to_pil", "(", "compact", ")", ")", ")", "\n", "bboxes", "=", "(", "bbox", ".", "unsqueeze", "(", "0", ")", ")", "\n", "return", "bboxes", ",", "inst_compact", ",", "b_theta", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.extract_coords": [[243, 249], ["maps_bboxes.squeeze", "torch.stack", "torch.where", "bboxes.append", "torch.cuda.FloatTensor", "x.view", "yy.min", "xx.min", "yy.max", "xx.max"], "function", ["None"], ["", "def", "extract_coords", "(", "maps_bboxes", ")", ":", "\n", "    ", "bboxes", "=", "[", "]", "\n", "for", "x", "in", "maps_bboxes", ".", "squeeze", "(", "1", ")", ":", "\n", "        ", "yy", ",", "xx", "=", "torch", ".", "where", "(", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ")", ">", "0", ")", "\n", "bboxes", ".", "append", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "[", "yy", ".", "min", "(", ")", ",", "yy", ".", "max", "(", ")", "+", "1", ",", "xx", ".", "min", "(", ")", ",", "xx", ".", "max", "(", ")", "+", "1", "]", ")", ")", "\n", "", "return", "torch", ".", "stack", "(", "bboxes", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.same_padding": [[251, 268], ["images.size", "max", "max", "int", "int", "len", "torch.nn.ZeroPad2d", "images.size"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size"], ["", "def", "same_padding", "(", "images", ",", "ksizes", ",", "strides", ",", "rates", ")", ":", "\n", "    ", "assert", "len", "(", "images", ".", "size", "(", ")", ")", "==", "4", "\n", "batch_size", ",", "channel", ",", "rows", ",", "cols", "=", "images", ".", "size", "(", ")", "\n", "out_rows", "=", "(", "rows", "+", "strides", "[", "0", "]", "-", "1", ")", "//", "strides", "[", "0", "]", "\n", "out_cols", "=", "(", "cols", "+", "strides", "[", "1", "]", "-", "1", ")", "//", "strides", "[", "1", "]", "\n", "effective_k_row", "=", "(", "ksizes", "[", "0", "]", "-", "1", ")", "*", "rates", "[", "0", "]", "+", "1", "\n", "effective_k_col", "=", "(", "ksizes", "[", "1", "]", "-", "1", ")", "*", "rates", "[", "1", "]", "+", "1", "\n", "padding_rows", "=", "max", "(", "0", ",", "(", "out_rows", "-", "1", ")", "*", "strides", "[", "0", "]", "+", "effective_k_row", "-", "rows", ")", "\n", "padding_cols", "=", "max", "(", "0", ",", "(", "out_cols", "-", "1", ")", "*", "strides", "[", "1", "]", "+", "effective_k_col", "-", "cols", ")", "\n", "# Pad the input", "\n", "padding_top", "=", "int", "(", "padding_rows", "/", "2.", ")", "\n", "padding_left", "=", "int", "(", "padding_cols", "/", "2.", ")", "\n", "padding_bottom", "=", "padding_rows", "-", "padding_top", "\n", "padding_right", "=", "padding_cols", "-", "padding_left", "\n", "paddings", "=", "(", "padding_left", ",", "padding_right", ",", "padding_top", ",", "padding_bottom", ")", "\n", "images", "=", "torch", ".", "nn", ".", "ZeroPad2d", "(", "paddings", ")", "(", "images", ")", "\n", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.extract_image_patches": [[270, 299], ["same_padding.size", "torch.nn.Unfold", "torch.nn.Unfold.", "len", "util.same_padding", "same_padding.size", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.same_padding", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size"], ["", "def", "extract_image_patches", "(", "images", ",", "ksizes", ",", "strides", ",", "rates", ",", "padding", "=", "'same'", ")", ":", "\n", "    ", "\"\"\"\n    Extract patches from images and put them in the C output dimension.\n    :param padding:\n    :param images: [batch, channels, in_rows, in_cols]. A 4-D Tensor with shape\n    :param ksizes: [ksize_rows, ksize_cols]. The size of the sliding window for\n     each dimension of images\n    :param strides: [stride_rows, stride_cols]\n    :param rates: [dilation_rows, dilation_cols]\n    :return: A Tensor\n    \"\"\"", "\n", "assert", "len", "(", "images", ".", "size", "(", ")", ")", "==", "4", "\n", "assert", "padding", "in", "[", "'same'", ",", "'valid'", "]", "\n", "batch_size", ",", "channel", ",", "height", ",", "width", "=", "images", ".", "size", "(", ")", "\n", "\n", "if", "padding", "==", "'same'", ":", "\n", "        ", "images", "=", "same_padding", "(", "images", ",", "ksizes", ",", "strides", ",", "rates", ")", "\n", "", "elif", "padding", "==", "'valid'", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Unsupported padding type: {}.\\\n                Only \"same\" or \"valid\" are supported.'", ".", "format", "(", "padding", ")", ")", "\n", "\n", "", "unfold", "=", "torch", ".", "nn", ".", "Unfold", "(", "kernel_size", "=", "ksizes", ",", "\n", "dilation", "=", "rates", ",", "\n", "padding", "=", "0", ",", "\n", "stride", "=", "strides", ")", "\n", "patches", "=", "unfold", "(", "images", ")", "\n", "return", "patches", "# [N, C*k*k, L], L is the total number of such blocks", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.spatial_discounting_mask": [[301, 333], ["torch.tensor", "numpy.ones", "range", "numpy.expand_dims", "numpy.expand_dims", "numpy.ones", "len", "spatial_discounting_mask_tensor.cuda.cuda", "range", "max", "min", "min"], "function", ["None"], ["", "def", "spatial_discounting_mask", "(", "opt", ",", "indexes", ",", "gpu_ids", ")", ":", "\n", "    ", "\"\"\"Generate spatial discounting mask constant.\n\n    Spatial discounting mask is first introduced in publication:\n        Generative Image Inpainting with Contextual Attention, Yu et al.\n\n    Args:\n        config: Config should have configuration including HEIGHT, WIDTH,\n            DISCOUNTED_MASK.\n\n    Returns:\n        tf.Tensor: spatial discounting mask\n\n    \"\"\"", "\n", "gamma", "=", "opt", ".", "spatial_discounting_gamma", "\n", "height", ",", "width", "=", "indexes", "[", "1", "]", "-", "indexes", "[", "0", "]", ",", "indexes", "[", "3", "]", "-", "indexes", "[", "2", "]", "\n", "shape", "=", "[", "1", ",", "1", ",", "height", ",", "width", "]", "\n", "if", "opt", ".", "use_discounted_mask", ":", "\n", "        ", "mask_values", "=", "np", ".", "ones", "(", "(", "height", ",", "width", ")", ")", "\n", "for", "i", "in", "range", "(", "height", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "width", ")", ":", "\n", "                ", "mask_values", "[", "i", ",", "j", "]", "=", "max", "(", "\n", "gamma", "**", "min", "(", "i", ",", "height", "-", "i", ")", ",", "\n", "gamma", "**", "min", "(", "j", ",", "width", "-", "j", ")", ")", "\n", "", "", "mask_values", "=", "np", ".", "expand_dims", "(", "mask_values", ",", "0", ")", "\n", "mask_values", "=", "np", ".", "expand_dims", "(", "mask_values", ",", "0", ")", "\n", "", "else", ":", "\n", "        ", "mask_values", "=", "np", ".", "ones", "(", "shape", ")", "\n", "", "spatial_discounting_mask_tensor", "=", "torch", ".", "tensor", "(", "mask_values", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "spatial_discounting_mask_tensor", "=", "spatial_discounting_mask_tensor", ".", "cuda", "(", ")", "\n", "", "return", "spatial_discounting_mask_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.normalize": [[335, 349], ["torch.is_tensor", "TypeError", "zip", "t.sub_().div_", "t.sub_"], "function", ["None"], ["", "def", "normalize", "(", "tensors", ",", "mean", ",", "std", ")", ":", "\n", "    ", "\"\"\"\n    Normalize tensor with std and mean\n    :param tensors: input tensor\n    :param mean: mean of normalization\n    :param std: std of normalization\n    :return: normalized tensor\n    \"\"\"", "\n", "if", "not", "torch", ".", "is_tensor", "(", "tensors", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'tensor is not a torch image.'", ")", "\n", "", "for", "tensor", "in", "tensors", ":", "\n", "        ", "for", "t", ",", "m", ",", "s", "in", "zip", "(", "tensor", ",", "mean", ",", "std", ")", ":", "\n", "            ", "t", ".", "sub_", "(", "m", ")", ".", "div_", "(", "s", ")", "\n", "", "", "return", "tensors", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.reduce_mean": [[351, 357], ["sorted", "range", "torch.mean", "len"], "function", ["None"], ["", "def", "reduce_mean", "(", "x", ",", "axis", "=", "None", ",", "keepdim", "=", "False", ")", ":", "\n", "    ", "if", "not", "axis", ":", "\n", "        ", "axis", "=", "range", "(", "len", "(", "x", ".", "shape", ")", ")", "\n", "", "for", "i", "in", "sorted", "(", "axis", ",", "reverse", "=", "True", ")", ":", "\n", "        ", "x", "=", "torch", ".", "mean", "(", "x", ",", "dim", "=", "i", ",", "keepdim", "=", "keepdim", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.reduce_std": [[359, 365], ["sorted", "range", "torch.std", "len"], "function", ["None"], ["", "def", "reduce_std", "(", "x", ",", "axis", "=", "None", ",", "keepdim", "=", "False", ")", ":", "\n", "    ", "if", "not", "axis", ":", "\n", "        ", "axis", "=", "range", "(", "len", "(", "x", ".", "shape", ")", ")", "\n", "", "for", "i", "in", "sorted", "(", "axis", ",", "reverse", "=", "True", ")", ":", "\n", "        ", "x", "=", "torch", ".", "std", "(", "x", ",", "dim", "=", "i", ",", "keepdim", "=", "keepdim", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.reduce_sum": [[367, 373], ["sorted", "range", "torch.sum", "len"], "function", ["None"], ["", "def", "reduce_sum", "(", "x", ",", "axis", "=", "None", ",", "keepdim", "=", "False", ")", ":", "\n", "    ", "if", "not", "axis", ":", "\n", "        ", "axis", "=", "range", "(", "len", "(", "x", ".", "shape", ")", ")", "\n", "", "for", "i", "in", "sorted", "(", "axis", ",", "reverse", "=", "True", ")", ":", "\n", "        ", "x", "=", "torch", ".", "sum", "(", "x", ",", "dim", "=", "i", ",", "keepdim", "=", "keepdim", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.reduce_tensor": [[375, 381], ["tensor.clone", "dist.all_reduce"], "function", ["None"], ["", "def", "reduce_tensor", "(", "tensor", ",", "world_size", ")", ":", "\n", "    ", "import", "torch", ".", "distributed", "as", "dist", "\n", "rt", "=", "tensor", ".", "clone", "(", ")", "\n", "dist", ".", "all_reduce", "(", "rt", ",", "op", "=", "dist", ".", "reduce_op", ".", "SUM", ")", "\n", "rt", "/=", "world_size", "\n", "return", "rt", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.flow_to_image": [[383, 410], ["range", "numpy.float32", "max", "min", "max", "min", "numpy.sqrt", "max", "util.compute_color", "out.append", "numpy.uint8", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "abs", "abs", "numpy.finfo", "numpy.finfo"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.compute_color"], ["", "def", "flow_to_image", "(", "flow", ")", ":", "\n", "    ", "\"\"\"Transfer flow map to image.\n    Part of code forked from flownet.\n    \"\"\"", "\n", "out", "=", "[", "]", "\n", "maxu", "=", "-", "999.", "\n", "maxv", "=", "-", "999.", "\n", "minu", "=", "999.", "\n", "minv", "=", "999.", "\n", "maxrad", "=", "-", "1", "\n", "for", "i", "in", "range", "(", "flow", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "u", "=", "flow", "[", "i", ",", ":", ",", ":", ",", "0", "]", "\n", "v", "=", "flow", "[", "i", ",", ":", ",", ":", ",", "1", "]", "\n", "idxunknow", "=", "(", "abs", "(", "u", ")", ">", "1e7", ")", "|", "(", "abs", "(", "v", ")", ">", "1e7", ")", "\n", "u", "[", "idxunknow", "]", "=", "0", "\n", "v", "[", "idxunknow", "]", "=", "0", "\n", "maxu", "=", "max", "(", "maxu", ",", "np", ".", "max", "(", "u", ")", ")", "\n", "minu", "=", "min", "(", "minu", ",", "np", ".", "min", "(", "u", ")", ")", "\n", "maxv", "=", "max", "(", "maxv", ",", "np", ".", "max", "(", "v", ")", ")", "\n", "minv", "=", "min", "(", "minv", ",", "np", ".", "min", "(", "v", ")", ")", "\n", "rad", "=", "np", ".", "sqrt", "(", "u", "**", "2", "+", "v", "**", "2", ")", "\n", "maxrad", "=", "max", "(", "maxrad", ",", "np", ".", "max", "(", "rad", ")", ")", "\n", "u", "=", "u", "/", "(", "maxrad", "+", "np", ".", "finfo", "(", "float", ")", ".", "eps", ")", "\n", "v", "=", "v", "/", "(", "maxrad", "+", "np", ".", "finfo", "(", "float", ")", ".", "eps", ")", "\n", "img", "=", "compute_color", "(", "u", ",", "v", ")", "\n", "out", ".", "append", "(", "img", ")", "\n", "", "return", "np", ".", "float32", "(", "np", ".", "uint8", "(", "out", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.pt_flow_to_image": [[412, 446], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.cuda.is_available", "range", "torch.stack", "torch.max.cuda", "torch.max.cuda", "torch.min.cuda", "torch.min.cuda", "torch.max.cuda", "torch.max", "torch.min", "torch.max", "torch.min", "torch.sqrt().to", "torch.max", "util.pt_compute_color", "out.append", "torch.max", "torch.min", "torch.max", "torch.min", "torch.max", "torch.abs", "torch.abs", "torch.sqrt", "torch.finfo", "torch.finfo"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.pt_compute_color"], ["", "def", "pt_flow_to_image", "(", "flow", ")", ":", "\n", "    ", "\"\"\"Transfer flow map to image.\n    Part of code forked from flownet.\n    \"\"\"", "\n", "out", "=", "[", "]", "\n", "maxu", "=", "torch", ".", "tensor", "(", "-", "999", ")", "\n", "maxv", "=", "torch", ".", "tensor", "(", "-", "999", ")", "\n", "minu", "=", "torch", ".", "tensor", "(", "999", ")", "\n", "minv", "=", "torch", ".", "tensor", "(", "999", ")", "\n", "maxrad", "=", "torch", ".", "tensor", "(", "-", "1", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "maxu", "=", "maxu", ".", "cuda", "(", ")", "\n", "maxv", "=", "maxv", ".", "cuda", "(", ")", "\n", "minu", "=", "minu", ".", "cuda", "(", ")", "\n", "minv", "=", "minv", ".", "cuda", "(", ")", "\n", "maxrad", "=", "maxrad", ".", "cuda", "(", ")", "\n", "", "for", "i", "in", "range", "(", "flow", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "u", "=", "flow", "[", "i", ",", "0", ",", ":", ",", ":", "]", "\n", "v", "=", "flow", "[", "i", ",", "1", ",", ":", ",", ":", "]", "\n", "idxunknow", "=", "(", "torch", ".", "abs", "(", "u", ")", ">", "1e7", ")", "+", "(", "torch", ".", "abs", "(", "v", ")", ">", "1e7", ")", "\n", "u", "[", "idxunknow", "]", "=", "0", "\n", "v", "[", "idxunknow", "]", "=", "0", "\n", "maxu", "=", "torch", ".", "max", "(", "maxu", ",", "torch", ".", "max", "(", "u", ")", ")", "\n", "minu", "=", "torch", ".", "min", "(", "minu", ",", "torch", ".", "min", "(", "u", ")", ")", "\n", "maxv", "=", "torch", ".", "max", "(", "maxv", ",", "torch", ".", "max", "(", "v", ")", ")", "\n", "minv", "=", "torch", ".", "min", "(", "minv", ",", "torch", ".", "min", "(", "v", ")", ")", "\n", "rad", "=", "torch", ".", "sqrt", "(", "(", "u", "**", "2", "+", "v", "**", "2", ")", ".", "float", "(", ")", ")", ".", "to", "(", "torch", ".", "int64", ")", "\n", "maxrad", "=", "torch", ".", "max", "(", "maxrad", ",", "torch", ".", "max", "(", "rad", ")", ")", "\n", "u", "=", "u", "/", "(", "maxrad", "+", "torch", ".", "finfo", "(", "torch", ".", "float32", ")", ".", "eps", ")", "\n", "v", "=", "v", "/", "(", "maxrad", "+", "torch", ".", "finfo", "(", "torch", ".", "float32", ")", ".", "eps", ")", "\n", "img", "=", "pt_compute_color", "(", "u", ",", "v", ")", "\n", "out", ".", "append", "(", "img", ")", "\n", "\n", "", "return", "torch", ".", "stack", "(", "out", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.highlight_flow": [[448, 464], ["range", "numpy.float32", "range", "out.append", "numpy.uint8", "numpy.ones", "range"], "function", ["None"], ["", "def", "highlight_flow", "(", "flow", ")", ":", "\n", "    ", "\"\"\"Convert flow into middlebury color code image.\n    \"\"\"", "\n", "out", "=", "[", "]", "\n", "s", "=", "flow", ".", "shape", "\n", "for", "i", "in", "range", "(", "flow", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "img", "=", "np", ".", "ones", "(", "(", "s", "[", "1", "]", ",", "s", "[", "2", "]", ",", "3", ")", ")", "*", "144.", "\n", "u", "=", "flow", "[", "i", ",", ":", ",", ":", ",", "0", "]", "\n", "v", "=", "flow", "[", "i", ",", ":", ",", ":", ",", "1", "]", "\n", "for", "h", "in", "range", "(", "s", "[", "1", "]", ")", ":", "\n", "            ", "for", "w", "in", "range", "(", "s", "[", "1", "]", ")", ":", "\n", "                ", "ui", "=", "u", "[", "h", ",", "w", "]", "\n", "vi", "=", "v", "[", "h", ",", "w", "]", "\n", "img", "[", "ui", ",", "vi", ",", ":", "]", "=", "255.", "\n", "", "", "out", ".", "append", "(", "img", ")", "\n", "", "return", "np", ".", "float32", "(", "np", ".", "uint8", "(", "out", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.pt_highlight_flow": [[466, 482], ["range", "numpy.float32", "range", "out.append", "numpy.uint8", "numpy.ones", "range"], "function", ["None"], ["", "def", "pt_highlight_flow", "(", "flow", ")", ":", "\n", "    ", "\"\"\"Convert flow into middlebury color code image.\n        \"\"\"", "\n", "out", "=", "[", "]", "\n", "s", "=", "flow", ".", "shape", "\n", "for", "i", "in", "range", "(", "flow", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "img", "=", "np", ".", "ones", "(", "(", "s", "[", "1", "]", ",", "s", "[", "2", "]", ",", "3", ")", ")", "*", "144.", "\n", "u", "=", "flow", "[", "i", ",", ":", ",", ":", ",", "0", "]", "\n", "v", "=", "flow", "[", "i", ",", ":", ",", ":", ",", "1", "]", "\n", "for", "h", "in", "range", "(", "s", "[", "1", "]", ")", ":", "\n", "            ", "for", "w", "in", "range", "(", "s", "[", "1", "]", ")", ":", "\n", "                ", "ui", "=", "u", "[", "h", ",", "w", "]", "\n", "vi", "=", "v", "[", "h", ",", "w", "]", "\n", "img", "[", "ui", ",", "vi", ",", ":", "]", "=", "255.", "\n", "", "", "out", ".", "append", "(", "img", ")", "\n", "", "return", "np", ".", "float32", "(", "np", ".", "uint8", "(", "out", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.compute_color": [[484, 511], ["numpy.zeros", "util.make_color_wheel", "numpy.size", "numpy.sqrt", "numpy.floor().astype", "range", "numpy.isnan", "numpy.isnan", "numpy.arctan2", "numpy.size", "numpy.logical_not", "numpy.uint8", "numpy.floor", "numpy.floor"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.make_color_wheel", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size"], ["", "def", "compute_color", "(", "u", ",", "v", ")", ":", "\n", "    ", "h", ",", "w", "=", "u", ".", "shape", "\n", "img", "=", "np", ".", "zeros", "(", "[", "h", ",", "w", ",", "3", "]", ")", "\n", "nanIdx", "=", "np", ".", "isnan", "(", "u", ")", "|", "np", ".", "isnan", "(", "v", ")", "\n", "u", "[", "nanIdx", "]", "=", "0", "\n", "v", "[", "nanIdx", "]", "=", "0", "\n", "# colorwheel = COLORWHEEL", "\n", "colorwheel", "=", "make_color_wheel", "(", ")", "\n", "ncols", "=", "np", ".", "size", "(", "colorwheel", ",", "0", ")", "\n", "rad", "=", "np", ".", "sqrt", "(", "u", "**", "2", "+", "v", "**", "2", ")", "\n", "a", "=", "np", ".", "arctan2", "(", "-", "v", ",", "-", "u", ")", "/", "np", ".", "pi", "\n", "fk", "=", "(", "a", "+", "1", ")", "/", "2", "*", "(", "ncols", "-", "1", ")", "+", "1", "\n", "k0", "=", "np", ".", "floor", "(", "fk", ")", ".", "astype", "(", "int", ")", "\n", "k1", "=", "k0", "+", "1", "\n", "k1", "[", "k1", "==", "ncols", "+", "1", "]", "=", "1", "\n", "f", "=", "fk", "-", "k0", "\n", "for", "i", "in", "range", "(", "np", ".", "size", "(", "colorwheel", ",", "1", ")", ")", ":", "\n", "        ", "tmp", "=", "colorwheel", "[", ":", ",", "i", "]", "\n", "col0", "=", "tmp", "[", "k0", "-", "1", "]", "/", "255", "\n", "col1", "=", "tmp", "[", "k1", "-", "1", "]", "/", "255", "\n", "col", "=", "(", "1", "-", "f", ")", "*", "col0", "+", "f", "*", "col1", "\n", "idx", "=", "rad", "<=", "1", "\n", "col", "[", "idx", "]", "=", "1", "-", "rad", "[", "idx", "]", "*", "(", "1", "-", "col", "[", "idx", "]", ")", "\n", "notidx", "=", "np", ".", "logical_not", "(", "idx", ")", "\n", "col", "[", "notidx", "]", "*=", "0.75", "\n", "img", "[", ":", ",", ":", ",", "i", "]", "=", "np", ".", "uint8", "(", "np", ".", "floor", "(", "255", "*", "col", "*", "(", "1", "-", "nanIdx", ")", ")", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.pt_compute_color": [[513, 544], ["torch.zeros", "torch.cuda.is_available", "util.pt_make_color_wheel", "torch.cuda.is_available", "torch.sqrt", "torch.floor().to", "range", "img.cuda.cuda", "colorwheel.cuda.cuda", "colorwheel.cuda.size", "torch.atan2", "torch.floor().to.to", "torch.isnan", "torch.isnan", "torch.floor", "colorwheel.cuda.size", "v.to", "u.to"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.pt_make_color_wheel", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size"], ["", "def", "pt_compute_color", "(", "u", ",", "v", ")", ":", "\n", "    ", "h", ",", "w", "=", "u", ".", "shape", "\n", "img", "=", "torch", ".", "zeros", "(", "[", "3", ",", "h", ",", "w", "]", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "img", "=", "img", ".", "cuda", "(", ")", "\n", "", "nanIdx", "=", "(", "torch", ".", "isnan", "(", "u", ")", "+", "torch", ".", "isnan", "(", "v", ")", ")", "!=", "0", "\n", "u", "[", "nanIdx", "]", "=", "0.", "\n", "v", "[", "nanIdx", "]", "=", "0.", "\n", "# colorwheel = COLORWHEEL", "\n", "colorwheel", "=", "pt_make_color_wheel", "(", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "colorwheel", "=", "colorwheel", ".", "cuda", "(", ")", "\n", "", "ncols", "=", "colorwheel", ".", "size", "(", ")", "[", "0", "]", "\n", "rad", "=", "torch", ".", "sqrt", "(", "(", "u", "**", "2", "+", "v", "**", "2", ")", ".", "to", "(", "torch", ".", "float32", ")", ")", "\n", "a", "=", "torch", ".", "atan2", "(", "-", "v", ".", "to", "(", "torch", ".", "float32", ")", ",", "-", "u", ".", "to", "(", "torch", ".", "float32", ")", ")", "/", "np", ".", "pi", "\n", "fk", "=", "(", "a", "+", "1", ")", "/", "2", "*", "(", "ncols", "-", "1", ")", "+", "1", "\n", "k0", "=", "torch", ".", "floor", "(", "fk", ")", ".", "to", "(", "torch", ".", "int64", ")", "\n", "k1", "=", "k0", "+", "1", "\n", "k1", "[", "k1", "==", "ncols", "+", "1", "]", "=", "1", "\n", "f", "=", "fk", "-", "k0", ".", "to", "(", "torch", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "colorwheel", ".", "size", "(", ")", "[", "1", "]", ")", ":", "\n", "        ", "tmp", "=", "colorwheel", "[", ":", ",", "i", "]", "\n", "col0", "=", "tmp", "[", "k0", "-", "1", "]", "\n", "col1", "=", "tmp", "[", "k1", "-", "1", "]", "\n", "col", "=", "(", "1", "-", "f", ")", "*", "col0", "+", "f", "*", "col1", "\n", "idx", "=", "rad", "<=", "1.", "/", "255.", "\n", "col", "[", "idx", "]", "=", "1", "-", "rad", "[", "idx", "]", "*", "(", "1", "-", "col", "[", "idx", "]", ")", "\n", "notidx", "=", "(", "idx", "!=", "0", ")", "\n", "col", "[", "notidx", "]", "*=", "0.75", "\n", "img", "[", "i", ",", ":", ",", ":", "]", "=", "col", "*", "(", "1", "-", "nanIdx", ")", ".", "to", "(", "torch", ".", "float32", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.make_color_wheel": [[546, 575], ["numpy.zeros", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.floor", "numpy.transpose", "numpy.floor", "numpy.transpose", "numpy.floor", "numpy.transpose", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange"], "function", ["None"], ["", "def", "make_color_wheel", "(", ")", ":", "\n", "    ", "RY", ",", "YG", ",", "GC", ",", "CB", ",", "BM", ",", "MR", "=", "(", "15", ",", "6", ",", "4", ",", "11", ",", "13", ",", "6", ")", "\n", "ncols", "=", "RY", "+", "YG", "+", "GC", "+", "CB", "+", "BM", "+", "MR", "\n", "colorwheel", "=", "np", ".", "zeros", "(", "[", "ncols", ",", "3", "]", ")", "\n", "col", "=", "0", "\n", "# RY", "\n", "colorwheel", "[", "0", ":", "RY", ",", "0", "]", "=", "255", "\n", "colorwheel", "[", "0", ":", "RY", ",", "1", "]", "=", "np", ".", "transpose", "(", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "RY", ")", "/", "RY", ")", ")", "\n", "col", "+=", "RY", "\n", "# YG", "\n", "colorwheel", "[", "col", ":", "col", "+", "YG", ",", "0", "]", "=", "255", "-", "np", ".", "transpose", "(", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "YG", ")", "/", "YG", ")", ")", "\n", "colorwheel", "[", "col", ":", "col", "+", "YG", ",", "1", "]", "=", "255", "\n", "col", "+=", "YG", "\n", "# GC", "\n", "colorwheel", "[", "col", ":", "col", "+", "GC", ",", "1", "]", "=", "255", "\n", "colorwheel", "[", "col", ":", "col", "+", "GC", ",", "2", "]", "=", "np", ".", "transpose", "(", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "GC", ")", "/", "GC", ")", ")", "\n", "col", "+=", "GC", "\n", "# CB", "\n", "colorwheel", "[", "col", ":", "col", "+", "CB", ",", "1", "]", "=", "255", "-", "np", ".", "transpose", "(", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "CB", ")", "/", "CB", ")", ")", "\n", "colorwheel", "[", "col", ":", "col", "+", "CB", ",", "2", "]", "=", "255", "\n", "col", "+=", "CB", "\n", "# BM", "\n", "colorwheel", "[", "col", ":", "col", "+", "BM", ",", "2", "]", "=", "255", "\n", "colorwheel", "[", "col", ":", "col", "+", "BM", ",", "0", "]", "=", "np", ".", "transpose", "(", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "BM", ")", "/", "BM", ")", ")", "\n", "col", "+=", "+", "BM", "\n", "# MR", "\n", "colorwheel", "[", "col", ":", "col", "+", "MR", ",", "2", "]", "=", "255", "-", "np", ".", "transpose", "(", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "MR", ")", "/", "MR", ")", ")", "\n", "colorwheel", "[", "col", ":", "col", "+", "MR", ",", "0", "]", "=", "255", "\n", "return", "colorwheel", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.pt_make_color_wheel": [[577, 606], ["torch.zeros", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "function", ["None"], ["", "def", "pt_make_color_wheel", "(", ")", ":", "\n", "    ", "RY", ",", "YG", ",", "GC", ",", "CB", ",", "BM", ",", "MR", "=", "(", "15", ",", "6", ",", "4", ",", "11", ",", "13", ",", "6", ")", "\n", "ncols", "=", "RY", "+", "YG", "+", "GC", "+", "CB", "+", "BM", "+", "MR", "\n", "colorwheel", "=", "torch", ".", "zeros", "(", "[", "ncols", ",", "3", "]", ")", "\n", "col", "=", "0", "\n", "# RY", "\n", "colorwheel", "[", "0", ":", "RY", ",", "0", "]", "=", "1.", "\n", "colorwheel", "[", "0", ":", "RY", ",", "1", "]", "=", "torch", ".", "arange", "(", "0", ",", "RY", ",", "dtype", "=", "torch", ".", "float32", ")", "/", "RY", "\n", "col", "+=", "RY", "\n", "# YG", "\n", "colorwheel", "[", "col", ":", "col", "+", "YG", ",", "0", "]", "=", "1.", "-", "(", "torch", ".", "arange", "(", "0", ",", "YG", ",", "dtype", "=", "torch", ".", "float32", ")", "/", "YG", ")", "\n", "colorwheel", "[", "col", ":", "col", "+", "YG", ",", "1", "]", "=", "1.", "\n", "col", "+=", "YG", "\n", "# GC", "\n", "colorwheel", "[", "col", ":", "col", "+", "GC", ",", "1", "]", "=", "1.", "\n", "colorwheel", "[", "col", ":", "col", "+", "GC", ",", "2", "]", "=", "torch", ".", "arange", "(", "0", ",", "GC", ",", "dtype", "=", "torch", ".", "float32", ")", "/", "GC", "\n", "col", "+=", "GC", "\n", "# CB", "\n", "colorwheel", "[", "col", ":", "col", "+", "CB", ",", "1", "]", "=", "1.", "-", "(", "torch", ".", "arange", "(", "0", ",", "CB", ",", "dtype", "=", "torch", ".", "float32", ")", "/", "CB", ")", "\n", "colorwheel", "[", "col", ":", "col", "+", "CB", ",", "2", "]", "=", "1.", "\n", "col", "+=", "CB", "\n", "# BM", "\n", "colorwheel", "[", "col", ":", "col", "+", "BM", ",", "2", "]", "=", "1.", "\n", "colorwheel", "[", "col", ":", "col", "+", "BM", ",", "0", "]", "=", "torch", ".", "arange", "(", "0", ",", "BM", ",", "dtype", "=", "torch", ".", "float32", ")", "/", "BM", "\n", "col", "+=", "BM", "\n", "# MR", "\n", "colorwheel", "[", "col", ":", "col", "+", "MR", ",", "2", "]", "=", "1.", "-", "(", "torch", ".", "arange", "(", "0", ",", "MR", ",", "dtype", "=", "torch", ".", "float32", ")", "/", "MR", ")", "\n", "colorwheel", "[", "col", ":", "col", "+", "MR", ",", "0", "]", "=", "1.", "\n", "return", "colorwheel", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.uint82bin": [[612, 615], ["str", "range"], "function", ["None"], ["", "def", "uint82bin", "(", "n", ",", "count", "=", "8", ")", ":", "\n", "    ", "\"\"\"returns the binary of integer n, count refers to amount of bits\"\"\"", "\n", "return", "''", ".", "join", "(", "[", "str", "(", "(", "n", ">>", "y", ")", "&", "1", ")", "for", "y", "in", "range", "(", "count", "-", "1", ",", "-", "1", ",", "-", "1", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.labelcolormap": [[616, 687], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.zeros", "range", "range", "util.uint82bin", "numpy.uint8", "numpy.uint8", "numpy.uint8"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.uint82bin"], ["", "def", "labelcolormap", "(", "N", ")", ":", "\n", "    ", "if", "N", "==", "35", ":", "# cityscape", "\n", "        ", "cmap", "=", "np", ".", "array", "(", "[", "(", "0", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "0", ")", ",", "(", "111", ",", "74", ",", "0", ")", ",", "(", "81", ",", "0", ",", "81", ")", ",", "\n", "(", "128", ",", "64", ",", "128", ")", ",", "(", "244", ",", "35", ",", "232", ")", ",", "(", "250", ",", "170", ",", "160", ")", ",", "(", "230", ",", "150", ",", "140", ")", ",", "(", "70", ",", "70", ",", "70", ")", ",", "(", "102", ",", "102", ",", "156", ")", ",", "(", "190", ",", "153", ",", "153", ")", ",", "\n", "(", "180", ",", "165", ",", "180", ")", ",", "(", "150", ",", "100", ",", "100", ")", ",", "(", "150", ",", "120", ",", "90", ")", ",", "(", "153", ",", "153", ",", "153", ")", ",", "(", "153", ",", "153", ",", "153", ")", ",", "(", "250", ",", "170", ",", "30", ")", ",", "(", "220", ",", "220", ",", "0", ")", ",", "\n", "(", "107", ",", "142", ",", "35", ")", ",", "(", "152", ",", "251", ",", "152", ")", ",", "(", "70", ",", "130", ",", "180", ")", ",", "(", "220", ",", "20", ",", "60", ")", ",", "(", "255", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "142", ")", ",", "(", "0", ",", "0", ",", "70", ")", ",", "\n", "(", "0", ",", "60", ",", "100", ")", ",", "(", "0", ",", "0", ",", "90", ")", ",", "(", "0", ",", "0", ",", "110", ")", ",", "(", "0", ",", "80", ",", "100", ")", ",", "(", "0", ",", "0", ",", "230", ")", ",", "(", "119", ",", "11", ",", "32", ")", ",", "(", "0", ",", "0", ",", "142", ")", "]", ",", "\n", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "elif", "N", "==", "29", ":", "\n", "        ", "cmap", "=", "np", ".", "array", "(", "[", "(", "128", ",", "64", ",", "128", ")", ",", "(", "244", ",", "35", ",", "232", ")", ",", "(", "250", ",", "170", ",", "160", ")", ",", "(", "230", ",", "150", ",", "140", ")", ",", "(", "70", ",", "70", ",", "70", ")", ",", "(", "102", ",", "102", ",", "156", ")", ",", "(", "190", ",", "153", ",", "153", ")", ",", "\n", "(", "180", ",", "165", ",", "180", ")", ",", "(", "150", ",", "100", ",", "100", ")", ",", "(", "150", ",", "120", ",", "90", ")", ",", "(", "153", ",", "153", ",", "153", ")", ",", "(", "153", ",", "153", ",", "153", ")", ",", "(", "250", ",", "170", ",", "30", ")", ",", "(", "220", ",", "220", ",", "0", ")", ",", "\n", "(", "107", ",", "142", ",", "35", ")", ",", "(", "152", ",", "251", ",", "152", ")", ",", "(", "70", ",", "130", ",", "180", ")", ",", "(", "220", ",", "20", ",", "60", ")", ",", "(", "255", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "142", ")", ",", "(", "0", ",", "0", ",", "70", ")", ",", "\n", "(", "0", ",", "60", ",", "100", ")", ",", "(", "0", ",", "0", ",", "90", ")", ",", "(", "0", ",", "0", ",", "110", ")", ",", "(", "0", ",", "80", ",", "100", ")", ",", "(", "0", ",", "0", ",", "230", ")", ",", "(", "119", ",", "11", ",", "32", ")", ",", "(", "0", ",", "0", ",", "0", ")", ",", "(", "255", ",", "255", ",", "255", ")", "]", ",", "\n", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "elif", "N", "==", "18", ":", "\n", "        ", "cmap", "=", "np", ".", "array", "(", "[", "(", "128", ",", "64", ",", "128", ")", ",", "(", "244", ",", "35", ",", "232", ")", ",", "(", "70", ",", "70", ",", "70", ")", ",", "(", "102", ",", "102", ",", "156", ")", ",", "(", "220", ",", "220", ",", "0", ")", ",", "\n", "(", "107", ",", "142", ",", "35", ")", ",", "(", "152", ",", "251", ",", "152", ")", ",", "(", "70", ",", "130", ",", "180", ")", ",", "(", "220", ",", "20", ",", "60", ")", ",", "(", "255", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "142", ")", ",", "(", "0", ",", "0", ",", "70", ")", ",", "\n", "(", "0", ",", "60", ",", "100", ")", ",", "(", "0", ",", "80", ",", "100", ")", ",", "(", "0", ",", "0", ",", "230", ")", ",", "(", "119", ",", "11", ",", "32", ")", ",", "(", "0", ",", "0", ",", "0", ")", ",", "(", "255", ",", "255", ",", "255", ")", "]", ",", "\n", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "elif", "N", "==", "9", ":", "\n", "        ", "cmap", "=", "np", ".", "array", "(", "\n", "[", "(", "128", ",", "64", ",", "128", ")", ",", "(", "70", ",", "70", ",", "70", ")", ",", "(", "220", ",", "220", ",", "0", ")", ",", "(", "107", ",", "142", ",", "35", ")", ",", "\n", "(", "70", ",", "130", ",", "180", ")", ",", "(", "220", ",", "20", ",", "60", ")", ",", "(", "0", ",", "0", ",", "142", ")", ",", "(", "0", ",", "0", ",", "0", ")", ",", "(", "255", ",", "255", ",", "255", ")", "]", ",", "\n", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "elif", "N", "==", "17", ":", "\n", "        ", "cmap", "=", "np", ".", "array", "(", "\n", "[", "(", "128", ",", "64", ",", "128", ")", ",", "(", "244", ",", "35", ",", "232", ")", ",", "(", "70", ",", "70", ",", "70", ")", ",", "(", "102", ",", "102", ",", "156", ")", ",", "\n", "(", "220", ",", "220", ",", "0", ")", ",", "\n", "(", "107", ",", "142", ",", "35", ")", ",", "(", "152", ",", "251", ",", "152", ")", ",", "(", "70", ",", "130", ",", "180", ")", ",", "(", "220", ",", "20", ",", "60", ")", ",", "\n", "(", "255", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "142", ")", ",", "(", "0", ",", "0", ",", "70", ")", ",", "\n", "(", "0", ",", "60", ",", "100", ")", ",", "(", "0", ",", "80", ",", "100", ")", ",", "(", "0", ",", "0", ",", "230", ")", ",", "(", "119", ",", "11", ",", "32", ")", ",", "(", "0", ",", "0", ",", "0", ")", "]", ",", "\n", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "elif", "N", "==", "8", ":", "\n", "        ", "cmap", "=", "np", ".", "array", "(", "\n", "[", "(", "128", ",", "64", ",", "128", ")", ",", "(", "70", ",", "70", ",", "70", ")", ",", "(", "220", ",", "220", ",", "0", ")", ",", "(", "107", ",", "142", ",", "35", ")", ",", "\n", "(", "70", ",", "130", ",", "180", ")", ",", "(", "220", ",", "20", ",", "60", ")", ",", "(", "0", ",", "0", ",", "142", ")", ",", "(", "0", ",", "0", ",", "0", ")", "]", ",", "\n", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "elif", "N", "==", "21", ":", "\n", "        ", "cmap", "=", "np", ".", "array", "(", "\n", "[", "(", "128", ",", "64", ",", "128", ")", ",", "(", "81", ",", "0", ",", "81", ")", ",", "(", "244", ",", "35", ",", "232", ")", ",", "(", "152", ",", "251", ",", "152", ")", ",", "(", "220", ",", "20", ",", "60", ")", ",", "\n", "(", "246", ",", "198", ",", "145", ")", ",", "(", "255", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "230", ")", ",", "(", "119", ",", "11", ",", "32", ")", ",", "(", "255", ",", "204", ",", "54", ")", ",", "\n", "(", "0", ",", "0", ",", "142", ")", ",", "(", "0", ",", "0", ",", "70", ")", ",", "(", "0", ",", "60", ",", "100", ")", ",", "(", "0", ",", "80", ",", "100", ")", ",", "(", "136", ",", "143", ",", "153", ")", ",", "\n", "(", "102", ",", "102", ",", "156", ")", ",", "(", "70", ",", "70", ",", "70", ")", ",", "(", "220", ",", "220", ",", "0", ")", ",", "\n", "(", "107", ",", "142", ",", "35", ")", ",", "(", "70", ",", "130", ",", "180", ")", ",", "(", "0", ",", "0", ",", "0", ")", "]", ",", "\n", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "elif", "N", "==", "22", ":", "\n", "        ", "cmap", "=", "np", ".", "array", "(", "\n", "[", "(", "128", ",", "64", ",", "128", ")", ",", "(", "81", ",", "0", ",", "81", ")", ",", "(", "244", ",", "35", ",", "232", ")", ",", "(", "152", ",", "251", ",", "152", ")", ",", "\n", "(", "220", ",", "20", ",", "60", ")", ",", "\n", "(", "246", ",", "198", ",", "145", ")", ",", "(", "255", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "230", ")", ",", "(", "119", ",", "11", ",", "32", ")", ",", "\n", "(", "255", ",", "204", ",", "54", ")", ",", "\n", "(", "0", ",", "0", ",", "142", ")", ",", "(", "0", ",", "0", ",", "70", ")", ",", "(", "0", ",", "60", ",", "100", ")", ",", "(", "0", ",", "80", ",", "100", ")", ",", "\n", "(", "136", ",", "143", ",", "153", ")", ",", "\n", "(", "102", ",", "102", ",", "156", ")", ",", "(", "70", ",", "70", ",", "70", ")", ",", "(", "220", ",", "220", ",", "0", ")", ",", "\n", "(", "107", ",", "142", ",", "35", ")", ",", "(", "70", ",", "130", ",", "180", ")", ",", "(", "0", ",", "0", ",", "0", ")", ",", "(", "255", ",", "255", ",", "255", ")", "]", ",", "\n", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "        ", "cmap", "=", "np", ".", "zeros", "(", "(", "N", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "            ", "r", ",", "g", ",", "b", "=", "0", ",", "0", ",", "0", "\n", "id", "=", "i", "\n", "for", "j", "in", "range", "(", "7", ")", ":", "\n", "                ", "str_id", "=", "uint82bin", "(", "id", ")", "\n", "r", "=", "r", "^", "(", "np", ".", "uint8", "(", "str_id", "[", "-", "1", "]", ")", "<<", "(", "7", "-", "j", ")", ")", "\n", "g", "=", "g", "^", "(", "np", ".", "uint8", "(", "str_id", "[", "-", "2", "]", ")", "<<", "(", "7", "-", "j", ")", ")", "\n", "b", "=", "b", "^", "(", "np", ".", "uint8", "(", "str_id", "[", "-", "3", "]", ")", "<<", "(", "7", "-", "j", ")", ")", "\n", "id", "=", "id", ">>", "3", "\n", "", "cmap", "[", "i", ",", "0", "]", "=", "r", "\n", "cmap", "[", "i", ",", "1", "]", "=", "g", "\n", "cmap", "[", "i", ",", "2", "]", "=", "b", "\n", "", "", "return", "cmap", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.plot_grad_flow": [[689, 705], ["matplotlib.plot", "matplotlib.hlines", "matplotlib.xticks", "matplotlib.xlim", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.grid", "matplotlib.show", "range", "layers.append", "ave_grads.append", "len", "len", "len", "p.grad.abs().mean", "p.grad.abs"], "function", ["None"], ["", "def", "plot_grad_flow", "(", "named_parameters", ")", ":", "\n", "    ", "ave_grads", "=", "[", "]", "\n", "layers", "=", "[", "]", "\n", "for", "n", ",", "p", "in", "named_parameters", ":", "\n", "        ", "if", "(", "p", ".", "requires_grad", ")", "and", "(", "\"bias\"", "not", "in", "n", ")", ":", "\n", "            ", "layers", ".", "append", "(", "n", ")", "\n", "ave_grads", ".", "append", "(", "p", ".", "grad", ".", "abs", "(", ")", ".", "mean", "(", ")", ")", "\n", "", "", "plt", ".", "plot", "(", "ave_grads", ",", "alpha", "=", "0.3", ",", "color", "=", "\"b\"", ")", "\n", "plt", ".", "hlines", "(", "0", ",", "0", ",", "len", "(", "ave_grads", ")", "+", "1", ",", "linewidth", "=", "1", ",", "color", "=", "\"k\"", ")", "\n", "plt", ".", "xticks", "(", "range", "(", "0", ",", "len", "(", "ave_grads", ")", ",", "1", ")", ",", "layers", ",", "rotation", "=", "\"vertical\"", ")", "\n", "plt", ".", "xlim", "(", "xmin", "=", "0", ",", "xmax", "=", "len", "(", "ave_grads", ")", ")", "\n", "plt", ".", "xlabel", "(", "\"Layers\"", ")", "\n", "plt", ".", "ylabel", "(", "\"average gradient\"", ")", "\n", "plt", ".", "title", "(", "\"Gradient flow\"", ")", "\n", "plt", ".", "grid", "(", "True", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.plot_grad_flow_v2": [[709, 738], ["matplotlib.bar", "matplotlib.bar", "matplotlib.hlines", "matplotlib.xticks", "matplotlib.xlim", "matplotlib.ylim", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.grid", "matplotlib.legend", "matplotlib.show", "numpy.arange", "numpy.arange", "range", "layers.append", "ave_grads.append", "max_grads.append", "len", "len", "len", "len", "len", "matplotlib.pyplot.Line2D", "matplotlib.pyplot.Line2D", "matplotlib.pyplot.Line2D", "p.grad.abs().mean", "p.grad.abs().max", "p.grad.abs", "p.grad.abs"], "function", ["None"], ["", "def", "plot_grad_flow_v2", "(", "named_parameters", ")", ":", "\n", "    ", "'''Plots the gradients flowing through different layers in the net during training.\n    Can be used for checking for possible gradient vanishing / exploding problems.\n\n    Usage: Plug this function in Trainer class after loss.backwards() as\n    \"plot_grad_flow(self.model.named_parameters())\" to visualize the gradient flow'''", "\n", "ave_grads", "=", "[", "]", "\n", "max_grads", "=", "[", "]", "\n", "layers", "=", "[", "]", "\n", "for", "n", ",", "p", "in", "named_parameters", ":", "\n", "        ", "if", "(", "p", ".", "requires_grad", ")", "and", "(", "\"bias\"", "not", "in", "n", ")", ":", "\n", "            ", "layers", ".", "append", "(", "n", ")", "\n", "ave_grads", ".", "append", "(", "p", ".", "grad", ".", "abs", "(", ")", ".", "mean", "(", ")", ")", "\n", "max_grads", ".", "append", "(", "p", ".", "grad", ".", "abs", "(", ")", ".", "max", "(", ")", ")", "\n", "", "", "plt", ".", "bar", "(", "np", ".", "arange", "(", "len", "(", "max_grads", ")", ")", ",", "max_grads", ",", "alpha", "=", "0.1", ",", "lw", "=", "1", ",", "color", "=", "\"c\"", ")", "\n", "plt", ".", "bar", "(", "np", ".", "arange", "(", "len", "(", "max_grads", ")", ")", ",", "ave_grads", ",", "alpha", "=", "0.1", ",", "lw", "=", "1", ",", "color", "=", "\"b\"", ")", "\n", "plt", ".", "hlines", "(", "0", ",", "0", ",", "len", "(", "ave_grads", ")", "+", "1", ",", "lw", "=", "2", ",", "color", "=", "\"k\"", ")", "\n", "plt", ".", "xticks", "(", "range", "(", "0", ",", "len", "(", "ave_grads", ")", ",", "1", ")", ",", "layers", ",", "rotation", "=", "\"vertical\"", ")", "\n", "plt", ".", "xlim", "(", "left", "=", "0", ",", "right", "=", "len", "(", "ave_grads", ")", ")", "\n", "plt", ".", "ylim", "(", "bottom", "=", "-", "0.001", ",", "top", "=", "0.4", ")", "# zoom in on the lower gradient regions", "\n", "plt", ".", "xlabel", "(", "\"Layers\"", ")", "\n", "plt", ".", "ylabel", "(", "\"average gradient\"", ")", "\n", "plt", ".", "title", "(", "\"Gradient flow\"", ")", "\n", "plt", ".", "grid", "(", "True", ")", "\n", "plt", ".", "legend", "(", "[", "Line2D", "(", "[", "0", "]", ",", "[", "0", "]", ",", "color", "=", "\"c\"", ",", "lw", "=", "4", ")", ",", "\n", "Line2D", "(", "[", "0", "]", ",", "[", "0", "]", ",", "color", "=", "\"b\"", ",", "lw", "=", "4", ")", ",", "\n", "Line2D", "(", "[", "0", "]", ",", "[", "0", "]", ",", "color", "=", "\"k\"", ",", "lw", "=", "4", ")", "]", ",", "\n", "[", "'max-gradient'", ",", "'mean-gradient'", ",", "'zero-gradient'", "]", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.fid.PartialInceptionNetwork.__init__": [[28, 33], ["torch.nn.Module.__init__", "torchvision.models.inception_v3", "fid.PartialInceptionNetwork.inception_network.Mixed_7c.register_forward_hook"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__"], ["    ", "def", "__init__", "(", "self", ",", "transform_input", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inception_network", "=", "inception_v3", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "inception_network", ".", "Mixed_7c", ".", "register_forward_hook", "(", "self", ".", "output_hook", ")", "\n", "self", ".", "transform_input", "=", "transform_input", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.fid.PartialInceptionNetwork.output_hook": [[34, 37], ["None"], "methods", ["None"], ["", "def", "output_hook", "(", "self", ",", "module", ",", "input", ",", "output", ")", ":", "\n", "# N x 2048 x 8 x 8", "\n", "        ", "self", ".", "mixed_7c_output", "=", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.fid.PartialInceptionNetwork.forward": [[38, 59], ["fid.PartialInceptionNetwork.inception_network", "torch.nn.functional.adaptive_avg_pool2d", "activations.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            x: shape (N, 3, 299, 299) dtype: torch.float32 in range 0-1\n        Returns:\n            inception activations: torch.tensor, shape: (N, 2048), dtype: torch.float32\n        \"\"\"", "\n", "assert", "x", ".", "shape", "[", "1", ":", "]", "==", "(", "\n", "3", ",", "299", ",", "299", ")", ",", "\"Expected input shape to be: (N,3,299,299)\"", "+", "\", but got {}\"", ".", "format", "(", "x", ".", "shape", ")", "\n", "x", "=", "x", "*", "2", "-", "1", "# Normalize to [-1, 1]", "\n", "\n", "# Trigger output hook", "\n", "self", ".", "inception_network", "(", "x", ")", "\n", "\n", "# Output: N x 2048 x 1 x 1", "\n", "activations", "=", "self", ".", "mixed_7c_output", "\n", "activations", "=", "torch", ".", "nn", ".", "functional", ".", "adaptive_avg_pool2d", "(", "activations", ",", "\n", "(", "1", ",", "1", ")", ")", "\n", "activations", "=", "activations", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "2048", ")", "\n", "return", "activations", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.fid.to_cuda": [[12, 24], ["torch.cuda.is_available", "elements.cuda"], "function", ["None"], ["def", "to_cuda", "(", "elements", ")", ":", "\n", "    ", "\"\"\"\n    Transfers elements to cuda if GPU is available\n    Args:\n        elements: torch.tensor or torch.nn.module\n        --\n    Returns:\n        elements: same as input on GPU memory, if available\n    \"\"\"", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "elements", ".", "cuda", "(", ")", "\n", "", "return", "elements", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.fid.get_activations": [[61, 93], ["fid.PartialInceptionNetwork", "fid.to_cuda", "to_cuda.eval", "int", "numpy.zeros", "range", "numpy.ceil", "fid.to_cuda", "to_cuda.", "activations.detach().cpu().numpy.detach().cpu().numpy", "activations.detach().cpu().numpy.detach().cpu", "activations.detach().cpu().numpy.detach"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.fid.to_cuda", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.fid.to_cuda"], ["", "", "def", "get_activations", "(", "images", ",", "batch_size", ")", ":", "\n", "    ", "\"\"\"\n    Calculates activations for last pool layer for all iamges\n    --\n        Images: torch.array shape: (N, 3, 299, 299), dtype: torch.float32\n        batch size: batch size used for inception network\n    --\n    Returns: np array shape: (N, 2048), dtype: np.float32\n    \"\"\"", "\n", "assert", "images", ".", "shape", "[", "1", ":", "]", "==", "(", "\n", "3", ",", "299", ",", "299", ")", ",", "\"Expected input shape to be: (N,3,299,299)\"", "+", "\", but got {}\"", ".", "format", "(", "images", ".", "shape", ")", "\n", "\n", "num_images", "=", "images", ".", "shape", "[", "0", "]", "\n", "inception_network", "=", "PartialInceptionNetwork", "(", ")", "\n", "inception_network", "=", "to_cuda", "(", "inception_network", ")", "\n", "inception_network", ".", "eval", "(", ")", "\n", "n_batches", "=", "int", "(", "np", ".", "ceil", "(", "num_images", "/", "batch_size", ")", ")", "\n", "inception_activations", "=", "np", ".", "zeros", "(", "(", "num_images", ",", "2048", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "batch_idx", "in", "range", "(", "n_batches", ")", ":", "\n", "        ", "start_idx", "=", "batch_size", "*", "batch_idx", "\n", "end_idx", "=", "batch_size", "*", "(", "batch_idx", "+", "1", ")", "\n", "\n", "ims", "=", "images", "[", "start_idx", ":", "end_idx", "]", "\n", "ims", "=", "to_cuda", "(", "ims", ")", "\n", "activations", "=", "inception_network", "(", "ims", ")", "\n", "activations", "=", "activations", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "assert", "activations", ".", "shape", "==", "(", "ims", ".", "shape", "[", "0", "]", ",", "\n", "2048", ")", ",", "\"Expexted output shape to be: {}, but was: {}\"", ".", "format", "(", "\n", "(", "ims", ".", "shape", "[", "0", "]", ",", "2048", ")", ",", "activations", ".", "shape", ")", "\n", "inception_activations", "[", "start_idx", ":", "end_idx", ",", ":", "]", "=", "activations", "\n", "", "return", "inception_activations", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.fid.calculate_activation_statistics": [[95, 110], ["fid.get_activations", "numpy.mean", "numpy.cov"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.fid.get_activations"], ["", "def", "calculate_activation_statistics", "(", "images", ",", "batch_size", ")", ":", "\n", "    ", "\"\"\"Calculates the statistics used by FID\n    Args:\n        images: torch.tensor, shape: (N, 3, H, W), dtype: torch.float32 in range 0 - 1\n        batch_size: batch size to use to calculate inception scores\n    Returns:\n        mu:     mean over all activations from the last pool layer of the inception model\n        sigma:  covariance matrix over all activations from the last pool layer\n                of the inception model.\n\n    \"\"\"", "\n", "act", "=", "get_activations", "(", "images", ",", "batch_size", ")", "\n", "mu", "=", "np", ".", "mean", "(", "act", ",", "axis", "=", "0", ")", "\n", "sigma", "=", "np", ".", "cov", "(", "act", ",", "rowvar", "=", "False", ")", "\n", "return", "mu", ",", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.fid.calculate_frechet_distance": [[113, 164], ["numpy.atleast_1d", "numpy.atleast_1d", "numpy.atleast_2d", "numpy.atleast_2d", "scipy.linalg.sqrtm", "numpy.iscomplexobj", "numpy.trace", "np.atleast_2d.dot", "numpy.isfinite().all", "warnings.warn", "scipy.linalg.sqrtm", "numpy.eye", "numpy.allclose", "numpy.max", "ValueError", "numpy.trace", "numpy.isfinite", "numpy.abs", "diff.dot", "numpy.trace", "numpy.diagonal"], "function", ["None"], ["", "def", "calculate_frechet_distance", "(", "mu1", ",", "sigma1", ",", "mu2", ",", "sigma2", ",", "eps", "=", "1e-6", ")", ":", "\n", "    ", "\"\"\"Numpy implementation of the Frechet Distance.\n    The Frechet distance between two multivariate Gaussians X_1 ~ N(mu_1, C_1)\n    and X_2 ~ N(mu_2, C_2) is\n            d^2 = ||mu_1 - mu_2||^2 + Tr(C_1 + C_2 - 2*sqrt(C_1*C_2)).\n\n    Stable version by Dougal J. Sutherland.\n\n    Params:\n    -- mu1 : Numpy array containing the activations of the pool_3 layer of the\n             inception net ( like returned by the function 'get_predictions')\n             for generated samples.\n    -- mu2   : The sample mean over activations of the pool_3 layer, precalcualted\n               on an representive data set.\n    -- sigma1: The covariance matrix over activations of the pool_3 layer for\n               generated samples.\n    -- sigma2: The covariance matrix over activations of the pool_3 layer,\n               precalcualted on an representive data set.\n\n    Returns:\n    --   : The Frechet Distance.\n    \"\"\"", "\n", "\n", "mu1", "=", "np", ".", "atleast_1d", "(", "mu1", ")", "\n", "mu2", "=", "np", ".", "atleast_1d", "(", "mu2", ")", "\n", "\n", "sigma1", "=", "np", ".", "atleast_2d", "(", "sigma1", ")", "\n", "sigma2", "=", "np", ".", "atleast_2d", "(", "sigma2", ")", "\n", "\n", "assert", "mu1", ".", "shape", "==", "mu2", ".", "shape", ",", "\"Training and test mean vectors have different lengths\"", "\n", "assert", "sigma1", ".", "shape", "==", "sigma2", ".", "shape", ",", "\"Training and test covariances have different dimensions\"", "\n", "\n", "diff", "=", "mu1", "-", "mu2", "\n", "# product might be almost singular", "\n", "covmean", ",", "_", "=", "linalg", ".", "sqrtm", "(", "sigma1", ".", "dot", "(", "sigma2", ")", ",", "disp", "=", "False", ")", "\n", "if", "not", "np", ".", "isfinite", "(", "covmean", ")", ".", "all", "(", ")", ":", "\n", "        ", "msg", "=", "\"fid calculation produces singular product; adding %s to diagonal of cov estimates\"", "%", "eps", "\n", "warnings", ".", "warn", "(", "msg", ")", "\n", "offset", "=", "np", ".", "eye", "(", "sigma1", ".", "shape", "[", "0", "]", ")", "*", "eps", "\n", "covmean", "=", "linalg", ".", "sqrtm", "(", "(", "sigma1", "+", "offset", ")", ".", "dot", "(", "sigma2", "+", "offset", ")", ")", "\n", "\n", "# numerical error might give slight imaginary component", "\n", "", "if", "np", ".", "iscomplexobj", "(", "covmean", ")", ":", "\n", "        ", "if", "not", "np", ".", "allclose", "(", "np", ".", "diagonal", "(", "covmean", ")", ".", "imag", ",", "0", ",", "atol", "=", "1e-3", ")", ":", "\n", "            ", "m", "=", "np", ".", "max", "(", "np", ".", "abs", "(", "covmean", ".", "imag", ")", ")", "\n", "raise", "ValueError", "(", "\"Imaginary component {}\"", ".", "format", "(", "m", ")", ")", "\n", "", "covmean", "=", "covmean", ".", "real", "\n", "\n", "", "tr_covmean", "=", "np", ".", "trace", "(", "covmean", ")", "\n", "\n", "return", "diff", ".", "dot", "(", "diff", ")", "+", "np", ".", "trace", "(", "sigma1", ")", "+", "np", ".", "trace", "(", "sigma2", ")", "-", "2", "*", "tr_covmean", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.fid.preprocess_image": [[166, 186], ["cv2.resize", "numpy.rollaxis", "torch.from_numpy", "len", "torch.from_numpy.max", "torch.from_numpy.min", "torch.from_numpy.astype"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.datasets.resize"], ["", "def", "preprocess_image", "(", "im", ")", ":", "\n", "    ", "\"\"\"Resizes and shifts the dynamic range of image to 0-1\n    Args:\n        im: np.array, shape: (H, W, 3), dtype: float32 between 0-1 or np.uint8\n    Return:\n        im: torch.tensor, shape: (3, 299, 299), dtype: torch.float32 between 0-1\n    \"\"\"", "\n", "assert", "im", ".", "shape", "[", "2", "]", "==", "3", "\n", "assert", "len", "(", "im", ".", "shape", ")", "==", "3", "\n", "if", "im", ".", "dtype", "==", "np", ".", "uint8", ":", "\n", "        ", "im", "=", "im", ".", "astype", "(", "np", ".", "float32", ")", "/", "255", "\n", "", "im", "=", "cv2", ".", "resize", "(", "im", ",", "(", "299", ",", "299", ")", ")", "\n", "im", "=", "np", ".", "rollaxis", "(", "im", ",", "axis", "=", "2", ")", "\n", "im", "=", "torch", ".", "from_numpy", "(", "im", ")", "\n", "assert", "im", ".", "max", "(", ")", "<=", "1.0", "\n", "assert", "im", ".", "min", "(", ")", ">=", "0.0", "\n", "assert", "im", ".", "dtype", "==", "torch", ".", "float32", "\n", "assert", "im", ".", "shape", "==", "(", "3", ",", "299", ",", "299", ")", "\n", "\n", "return", "im", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.fid.preprocess_images": [[188, 214], ["torch.stack", "torch.zeros.max", "torch.zeros.min", "multiprocessing.Pool", "torch.zeros", "enumerate", "multiprocessing.cpu_count", "pool.apply_async", "jobs.append", "pool.apply_async.get", "fid.preprocess_image"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.fid.preprocess_image"], ["", "def", "preprocess_images", "(", "images", ",", "use_multiprocessing", ")", ":", "\n", "    ", "\"\"\"Resizes and shifts the dynamic range of image to 0-1\n    Args:\n        images: np.array, shape: (N, H, W, 3), dtype: float32 between 0-1 or np.uint8\n        use_multiprocessing: If multiprocessing should be used to pre-process the images\n    Return:\n        final_images: torch.tensor, shape: (N, 3, 299, 299), dtype: torch.float32 between 0-1\n    \"\"\"", "\n", "if", "use_multiprocessing", ":", "\n", "        ", "with", "multiprocessing", ".", "Pool", "(", "multiprocessing", ".", "cpu_count", "(", ")", ")", "as", "pool", ":", "\n", "            ", "jobs", "=", "[", "]", "\n", "for", "im", "in", "images", ":", "\n", "                ", "job", "=", "pool", ".", "apply_async", "(", "preprocess_image", ",", "(", "im", ",", ")", ")", "\n", "jobs", ".", "append", "(", "job", ")", "\n", "", "final_images", "=", "torch", ".", "zeros", "(", "images", ".", "shape", "[", "0", "]", ",", "3", ",", "299", ",", "299", ")", "\n", "for", "idx", ",", "job", "in", "enumerate", "(", "jobs", ")", ":", "\n", "                ", "im", "=", "job", ".", "get", "(", ")", "\n", "final_images", "[", "idx", "]", "=", "im", "# job.get()", "\n", "", "", "", "else", ":", "\n", "        ", "final_images", "=", "torch", ".", "stack", "(", "[", "preprocess_image", "(", "im", ")", "for", "im", "in", "images", "]", ",", "\n", "dim", "=", "0", ")", "\n", "", "assert", "final_images", ".", "shape", "==", "(", "images", ".", "shape", "[", "0", "]", ",", "3", ",", "299", ",", "299", ")", "\n", "assert", "final_images", ".", "max", "(", ")", "<=", "1.0", "\n", "assert", "final_images", ".", "min", "(", ")", ">=", "0.0", "\n", "assert", "final_images", ".", "dtype", "==", "torch", ".", "float32", "\n", "return", "final_images", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.fid.calculate_fid": [[216, 232], ["fid.preprocess_images", "fid.preprocess_images", "fid.calculate_activation_statistics", "fid.calculate_activation_statistics", "fid.calculate_frechet_distance"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.fid.preprocess_images", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.fid.preprocess_images", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.fid.calculate_activation_statistics", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.fid.calculate_activation_statistics", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.fid.calculate_frechet_distance"], ["", "def", "calculate_fid", "(", "images1", ",", "images2", ",", "use_multiprocessing", ",", "batch_size", ")", ":", "\n", "    ", "\"\"\" Calculate FID between images1 and images2\n    Args:\n        images1: np.array, shape: (N, H, W, 3), dtype: np.float32 between 0-1 or np.uint8\n        images2: np.array, shape: (N, H, W, 3), dtype: np.float32 between 0-1 or np.uint8\n        use_multiprocessing: If multiprocessing should be used to pre-process the images\n        batch size: batch size used for inception network\n    Returns:\n        FID (scalar)\n    \"\"\"", "\n", "images1", "=", "preprocess_images", "(", "images1", ",", "use_multiprocessing", ")", "\n", "images2", "=", "preprocess_images", "(", "images2", ",", "use_multiprocessing", ")", "\n", "mu1", ",", "sigma1", "=", "calculate_activation_statistics", "(", "images1", ",", "batch_size", ")", "\n", "mu2", ",", "sigma2", "=", "calculate_activation_statistics", "(", "images2", ",", "batch_size", ")", "\n", "fid", "=", "calculate_frechet_distance", "(", "mu1", ",", "sigma1", ",", "mu2", ",", "sigma2", ")", "\n", "return", "fid", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.fid.load_images": [[234, 260], ["cv2.imread", "image_paths.sort", "numpy.zeros", "enumerate", "print", "glob.glob", "cv2.imread", "os.path.join", "os.path.join", "image_paths.append", "len"], "function", ["None"], ["", "def", "load_images", "(", "path", ")", ":", "\n", "    ", "\"\"\" Loads all .png or .jpg images from a given path\n    Warnings: Expects all images to be of same dtype and shape.\n    Args:\n        path: relative path to directory\n    Returns:\n        final_images: np.array of image dtype and shape.\n    \"\"\"", "\n", "image_paths", "=", "[", "]", "\n", "image_extensions", "=", "[", "\"png\"", ",", "\"jpg\"", "]", "\n", "for", "ext", "in", "image_extensions", ":", "\n", "        ", "print", "(", "\"Looking for images in\"", ",", "os", ".", "path", ".", "join", "(", "path", ",", "\"*.{}\"", ".", "format", "(", "ext", ")", ")", ")", "\n", "for", "impath", "in", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "path", ",", "\"*.{}\"", ".", "format", "(", "ext", ")", ")", ")", ":", "\n", "            ", "image_paths", ".", "append", "(", "impath", ")", "\n", "", "", "first_image", "=", "cv2", ".", "imread", "(", "image_paths", "[", "0", "]", ")", "\n", "W", ",", "H", "=", "first_image", ".", "shape", "[", ":", "2", "]", "\n", "image_paths", ".", "sort", "(", ")", "\n", "image_paths", "=", "image_paths", "\n", "final_images", "=", "np", ".", "zeros", "(", "(", "len", "(", "image_paths", ")", ",", "H", ",", "W", ",", "3", ")", ",", "\n", "dtype", "=", "first_image", ".", "dtype", ")", "\n", "for", "idx", ",", "impath", "in", "enumerate", "(", "image_paths", ")", ":", "\n", "        ", "im", "=", "cv2", ".", "imread", "(", "impath", ")", "\n", "im", "=", "im", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# Convert from BGR to RGB", "\n", "assert", "im", ".", "dtype", "==", "final_images", ".", "dtype", "\n", "final_images", "[", "idx", "]", "=", "im", "\n", "", "return", "final_images", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.psnr.psnr": [[6, 12], ["numpy.mean", "math.log10", "math.sqrt"], "function", ["None"], ["def", "psnr", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "mse", "=", "numpy", ".", "mean", "(", "(", "img1", "-", "img2", ")", "**", "2", ")", "\n", "if", "mse", "==", "0", ":", "\n", "        ", "return", "100", "\n", "", "PIXEL_MAX", "=", "255.0", "\n", "return", "20", "*", "math", ".", "log10", "(", "PIXEL_MAX", "/", "math", ".", "sqrt", "(", "mse", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.logger.Logger.__init__": [[5, 8], ["tensorflow.summary.FileWriter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "log_dir", ")", ":", "\n", "        ", "\"\"\"Create a summary writer logging to log_dir.\"\"\"", "\n", "self", ".", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "log_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.logger.Logger.scalar_summary": [[9, 13], ["tensorflow.Summary", "logger.Logger.writer.add_summary", "tensorflow.Summary.Value"], "methods", ["None"], ["", "def", "scalar_summary", "(", "self", ",", "tag", ",", "value", ",", "step", ")", ":", "\n", "        ", "\"\"\"Log a scalar variable.\"\"\"", "\n", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "tag", ",", "simple_value", "=", "value", ")", "]", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.logger.Logger.list_of_scalars_summary": [[14, 18], ["tensorflow.Summary", "logger.Logger.writer.add_summary", "tensorflow.Summary.Value"], "methods", ["None"], ["", "def", "list_of_scalars_summary", "(", "self", ",", "tag_value_pairs", ",", "step", ")", ":", "\n", "        ", "\"\"\"Log scalar variables.\"\"\"", "\n", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "tag", ",", "simple_value", "=", "value", ")", "for", "tag", ",", "value", "in", "tag_value_pairs", "]", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.augmentations.horisontal_flip": [[6, 10], ["torch.flip", "torch.flip"], "function", ["None"], ["def", "horisontal_flip", "(", "images", ",", "targets", ")", ":", "\n", "    ", "images", "=", "torch", ".", "flip", "(", "images", ",", "[", "-", "1", "]", ")", "\n", "targets", "[", ":", ",", "2", "]", "=", "1", "-", "targets", "[", ":", ",", "2", "]", "\n", "return", "images", ",", "targets", "\n", "", ""]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.parse_config.parse_model_config": [[3, 22], ["open", "open.read().split", "x.rstrip().lstrip", "line.startswith", "open.read", "module_defs.append", "line[].rstrip", "line.split", "value.strip.strip", "value.strip.strip", "x.rstrip", "x.startswith", "key.rstrip"], "function", ["None"], ["def", "parse_model_config", "(", "path", ")", ":", "\n", "    ", "\"\"\"Parses the yolo-v3 layer configuration file and returns module definitions\"\"\"", "\n", "file", "=", "open", "(", "path", ",", "'r'", ")", "\n", "lines", "=", "file", ".", "read", "(", ")", ".", "split", "(", "'\\n'", ")", "\n", "lines", "=", "[", "x", "for", "x", "in", "lines", "if", "x", "and", "not", "x", ".", "startswith", "(", "'#'", ")", "]", "\n", "lines", "=", "[", "x", ".", "rstrip", "(", ")", ".", "lstrip", "(", ")", "for", "x", "in", "lines", "]", "# get rid of fringe whitespaces", "\n", "module_defs", "=", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "if", "line", ".", "startswith", "(", "'['", ")", ":", "# This marks the start of a new block", "\n", "            ", "module_defs", ".", "append", "(", "{", "}", ")", "\n", "module_defs", "[", "-", "1", "]", "[", "'type'", "]", "=", "line", "[", "1", ":", "-", "1", "]", ".", "rstrip", "(", ")", "\n", "if", "module_defs", "[", "-", "1", "]", "[", "'type'", "]", "==", "'convolutional'", ":", "\n", "                ", "module_defs", "[", "-", "1", "]", "[", "'batch_normalize'", "]", "=", "0", "\n", "", "", "else", ":", "\n", "            ", "key", ",", "value", "=", "line", ".", "split", "(", "\"=\"", ")", "\n", "value", "=", "value", ".", "strip", "(", ")", "\n", "module_defs", "[", "-", "1", "]", "[", "key", ".", "rstrip", "(", ")", "]", "=", "value", ".", "strip", "(", ")", "\n", "\n", "", "", "return", "module_defs", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.parse_config.parse_data_config": [[23, 37], ["dict", "open", "fp.readlines", "line.strip.strip", "line.strip.split", "value.strip", "line.strip.startswith", "key.strip"], "function", ["None"], ["", "def", "parse_data_config", "(", "path", ")", ":", "\n", "    ", "\"\"\"Parses the data configuration file\"\"\"", "\n", "options", "=", "dict", "(", ")", "\n", "options", "[", "'gpus'", "]", "=", "'0,1,2,3'", "\n", "options", "[", "'num_workers'", "]", "=", "'10'", "\n", "with", "open", "(", "path", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "lines", "=", "fp", ".", "readlines", "(", ")", "\n", "", "for", "line", "in", "lines", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", "==", "''", "or", "line", ".", "startswith", "(", "'#'", ")", ":", "\n", "            ", "continue", "\n", "", "key", ",", "value", "=", "line", ".", "split", "(", "'='", ")", "\n", "options", "[", "key", ".", "strip", "(", ")", "]", "=", "value", ".", "strip", "(", ")", "\n", "", "return", "options", "\n", "", ""]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.utils.to_cpu": [[14, 16], ["tensor.detach().cpu", "tensor.detach"], "function", ["None"], ["def", "to_cpu", "(", "tensor", ")", ":", "\n", "    ", "return", "tensor", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.utils.load_classes": [[18, 25], ["open", "open.read().split", "open.read"], "function", ["None"], ["", "def", "load_classes", "(", "path", ")", ":", "\n", "    ", "\"\"\"\n    Loads class labels at 'path'\n    \"\"\"", "\n", "fp", "=", "open", "(", "path", ",", "\"r\"", ")", "\n", "names", "=", "fp", ".", "read", "(", ")", ".", "split", "(", "\"\\n\"", ")", "[", ":", "-", "1", "]", "\n", "return", "names", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.utils.weights_init_normal": [[27, 34], ["classname.find", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "classname.find", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "function", ["None"], ["", "def", "weights_init_normal", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "\"Conv\"", ")", "!=", "-", "1", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "\"BatchNorm2d\"", ")", "!=", "-", "1", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "0.02", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.utils.rescale_boxes": [[36, 51], ["max", "max", "max", "max"], "function", ["None"], ["", "", "def", "rescale_boxes", "(", "boxes", ",", "current_dim", ",", "original_shape", ")", ":", "\n", "    ", "\"\"\" Rescales bounding boxes to the original shape \"\"\"", "\n", "orig_h", ",", "orig_w", "=", "original_shape", "\n", "# The amount of padding that was added", "\n", "pad_x", "=", "max", "(", "orig_h", "-", "orig_w", ",", "0", ")", "*", "(", "current_dim", "/", "max", "(", "original_shape", ")", ")", "\n", "pad_y", "=", "max", "(", "orig_w", "-", "orig_h", ",", "0", ")", "*", "(", "current_dim", "/", "max", "(", "original_shape", ")", ")", "\n", "# Image height and width after padding is removed", "\n", "unpad_h", "=", "current_dim", "-", "pad_y", "\n", "unpad_w", "=", "current_dim", "-", "pad_x", "\n", "# Rescale bounding boxes to dimension of original image", "\n", "boxes", "[", ":", ",", "0", "]", "=", "(", "(", "boxes", "[", ":", ",", "0", "]", "-", "pad_x", "//", "2", ")", "/", "unpad_w", ")", "*", "orig_w", "\n", "boxes", "[", ":", ",", "1", "]", "=", "(", "(", "boxes", "[", ":", ",", "1", "]", "-", "pad_y", "//", "2", ")", "/", "unpad_h", ")", "*", "orig_h", "\n", "boxes", "[", ":", ",", "2", "]", "=", "(", "(", "boxes", "[", ":", ",", "2", "]", "-", "pad_x", "//", "2", ")", "/", "unpad_w", ")", "*", "orig_w", "\n", "boxes", "[", ":", ",", "3", "]", "=", "(", "(", "boxes", "[", ":", ",", "3", "]", "-", "pad_y", "//", "2", ")", "/", "unpad_h", ")", "*", "orig_h", "\n", "return", "boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.utils.xywh2xyxy": [[53, 60], ["x.new"], "function", ["None"], ["", "def", "xywh2xyxy", "(", "x", ")", ":", "\n", "    ", "y", "=", "x", ".", "new", "(", "x", ".", "shape", ")", "\n", "y", "[", "...", ",", "0", "]", "=", "x", "[", "...", ",", "0", "]", "-", "x", "[", "...", ",", "2", "]", "/", "2", "\n", "y", "[", "...", ",", "1", "]", "=", "x", "[", "...", ",", "1", "]", "-", "x", "[", "...", ",", "3", "]", "/", "2", "\n", "y", "[", "...", ",", "2", "]", "=", "x", "[", "...", ",", "0", "]", "+", "x", "[", "...", ",", "2", "]", "/", "2", "\n", "y", "[", "...", ",", "3", "]", "=", "x", "[", "...", ",", "1", "]", "+", "x", "[", "...", ",", "3", "]", "/", "2", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.utils.ap_per_class": [[62, 115], ["numpy.argsort", "numpy.unique", "tqdm.tqdm", "np.argsort.sum", "numpy.array", "numpy.array", "numpy.array", "np.unique.astype", "ap.append", "r.append", "p.append", "tp[].cumsum", "r.append", "p.append", "ap.append", "utils.compute_ap"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.utils.compute_ap"], ["", "def", "ap_per_class", "(", "tp", ",", "conf", ",", "pred_cls", ",", "target_cls", ")", ":", "\n", "    ", "\"\"\" Compute the average precision, given the recall and precision curves.\n    Source: https://github.com/rafaelpadilla/Object-Detection-Metrics.\n    # Arguments\n        tp:    True positives (list).\n        conf:  Objectness value from 0-1 (list).\n        pred_cls: Predicted object classes (list).\n        target_cls: True object classes (list).\n    # Returns\n        The average precision as computed in py-faster-rcnn.\n    \"\"\"", "\n", "\n", "# Sort by objectness", "\n", "i", "=", "np", ".", "argsort", "(", "-", "conf", ")", "\n", "tp", ",", "conf", ",", "pred_cls", "=", "tp", "[", "i", "]", ",", "conf", "[", "i", "]", ",", "pred_cls", "[", "i", "]", "\n", "\n", "# Find unique classes", "\n", "unique_classes", "=", "np", ".", "unique", "(", "target_cls", ")", "\n", "\n", "# Create Precision-Recall curve and compute AP for each class", "\n", "ap", ",", "p", ",", "r", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "c", "in", "tqdm", ".", "tqdm", "(", "unique_classes", ",", "desc", "=", "\"Computing AP\"", ")", ":", "\n", "        ", "i", "=", "pred_cls", "==", "c", "\n", "n_gt", "=", "(", "target_cls", "==", "c", ")", ".", "sum", "(", ")", "# Number of ground truth objects", "\n", "n_p", "=", "i", ".", "sum", "(", ")", "# Number of predicted objects", "\n", "\n", "if", "n_p", "==", "0", "and", "n_gt", "==", "0", ":", "\n", "            ", "continue", "\n", "", "elif", "n_p", "==", "0", "or", "n_gt", "==", "0", ":", "\n", "            ", "ap", ".", "append", "(", "0", ")", "\n", "r", ".", "append", "(", "0", ")", "\n", "p", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "# Accumulate FPs and TPs", "\n", "            ", "fpc", "=", "(", "1", "-", "tp", "[", "i", "]", ")", ".", "cumsum", "(", ")", "\n", "tpc", "=", "(", "tp", "[", "i", "]", ")", ".", "cumsum", "(", ")", "\n", "\n", "# Recall", "\n", "recall_curve", "=", "tpc", "/", "(", "n_gt", "+", "1e-16", ")", "\n", "r", ".", "append", "(", "recall_curve", "[", "-", "1", "]", ")", "\n", "\n", "# Precision", "\n", "precision_curve", "=", "tpc", "/", "(", "tpc", "+", "fpc", ")", "\n", "p", ".", "append", "(", "precision_curve", "[", "-", "1", "]", ")", "\n", "\n", "# AP from recall-precision curve", "\n", "ap", ".", "append", "(", "compute_ap", "(", "recall_curve", ",", "precision_curve", ")", ")", "\n", "\n", "# Compute F1 score (harmonic mean of precision and recall)", "\n", "", "", "p", ",", "r", ",", "ap", "=", "np", ".", "array", "(", "p", ")", ",", "np", ".", "array", "(", "r", ")", ",", "np", ".", "array", "(", "ap", ")", "\n", "f1", "=", "2", "*", "p", "*", "r", "/", "(", "p", "+", "r", "+", "1e-16", ")", "\n", "\n", "return", "p", ",", "r", ",", "ap", ",", "f1", ",", "unique_classes", ".", "astype", "(", "\"int32\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.utils.compute_ap": [[117, 143], ["numpy.concatenate", "numpy.concatenate", "range", "numpy.sum", "numpy.maximum", "numpy.where"], "function", ["None"], ["", "def", "compute_ap", "(", "recall", ",", "precision", ")", ":", "\n", "    ", "\"\"\" Compute the average precision, given the recall and precision curves.\n    Code originally from https://github.com/rbgirshick/py-faster-rcnn.\n\n    # Arguments\n        recall:    The recall curve (list).\n        precision: The precision curve (list).\n    # Returns\n        The average precision as computed in py-faster-rcnn.\n    \"\"\"", "\n", "# correct AP calculation", "\n", "# first append sentinel values at the end", "\n", "mrec", "=", "np", ".", "concatenate", "(", "(", "[", "0.0", "]", ",", "recall", ",", "[", "1.0", "]", ")", ")", "\n", "mpre", "=", "np", ".", "concatenate", "(", "(", "[", "0.0", "]", ",", "precision", ",", "[", "0.0", "]", ")", ")", "\n", "\n", "# compute the precision envelope", "\n", "for", "i", "in", "range", "(", "mpre", ".", "size", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "        ", "mpre", "[", "i", "-", "1", "]", "=", "np", ".", "maximum", "(", "mpre", "[", "i", "-", "1", "]", ",", "mpre", "[", "i", "]", ")", "\n", "\n", "# to calculate area under PR curve, look for points", "\n", "# where X axis (recall) changes value", "\n", "", "i", "=", "np", ".", "where", "(", "mrec", "[", "1", ":", "]", "!=", "mrec", "[", ":", "-", "1", "]", ")", "[", "0", "]", "\n", "\n", "# and sum (\\Delta recall) * prec", "\n", "ap", "=", "np", ".", "sum", "(", "(", "mrec", "[", "i", "+", "1", "]", "-", "mrec", "[", "i", "]", ")", "*", "mpre", "[", "i", "+", "1", "]", ")", "\n", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.utils.get_batch_statistics": [[145, 182], ["range", "len", "numpy.zeros", "len", "batch_metrics.append", "len", "enumerate", "zip", "bbox_iou().max", "len", "len", "utils.bbox_iou", "pred_box.unsqueeze"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.utils.bbox_iou"], ["", "def", "get_batch_statistics", "(", "outputs", ",", "targets", ",", "iou_threshold", ")", ":", "\n", "    ", "\"\"\" Compute true positives, predicted scores and predicted labels per sample \"\"\"", "\n", "batch_metrics", "=", "[", "]", "\n", "for", "sample_i", "in", "range", "(", "len", "(", "outputs", ")", ")", ":", "\n", "\n", "        ", "if", "outputs", "[", "sample_i", "]", "is", "None", ":", "\n", "            ", "continue", "\n", "\n", "", "output", "=", "outputs", "[", "sample_i", "]", "\n", "pred_boxes", "=", "output", "[", ":", ",", ":", "4", "]", "\n", "pred_scores", "=", "output", "[", ":", ",", "4", "]", "\n", "pred_labels", "=", "output", "[", ":", ",", "-", "1", "]", "\n", "\n", "true_positives", "=", "np", ".", "zeros", "(", "pred_boxes", ".", "shape", "[", "0", "]", ")", "\n", "\n", "annotations", "=", "targets", "[", "targets", "[", ":", ",", "0", "]", "==", "sample_i", "]", "[", ":", ",", "1", ":", "]", "\n", "target_labels", "=", "annotations", "[", ":", ",", "0", "]", "if", "len", "(", "annotations", ")", "else", "[", "]", "\n", "if", "len", "(", "annotations", ")", ":", "\n", "            ", "detected_boxes", "=", "[", "]", "\n", "target_boxes", "=", "annotations", "[", ":", ",", "1", ":", "]", "\n", "\n", "for", "pred_i", ",", "(", "pred_box", ",", "pred_label", ")", "in", "enumerate", "(", "zip", "(", "pred_boxes", ",", "pred_labels", ")", ")", ":", "\n", "\n", "# If targets are found break", "\n", "                ", "if", "len", "(", "detected_boxes", ")", "==", "len", "(", "annotations", ")", ":", "\n", "                    ", "break", "\n", "\n", "# Ignore if label is not one of the target labels", "\n", "", "if", "pred_label", "not", "in", "target_labels", ":", "\n", "                    ", "continue", "\n", "\n", "", "iou", ",", "box_index", "=", "bbox_iou", "(", "pred_box", ".", "unsqueeze", "(", "0", ")", ",", "target_boxes", ")", ".", "max", "(", "0", ")", "\n", "if", "iou", ">=", "iou_threshold", "and", "box_index", "not", "in", "detected_boxes", ":", "\n", "                    ", "true_positives", "[", "pred_i", "]", "=", "1", "\n", "detected_boxes", "+=", "[", "box_index", "]", "\n", "", "", "", "batch_metrics", ".", "append", "(", "[", "true_positives", ",", "pred_scores", ",", "pred_labels", "]", ")", "\n", "", "return", "batch_metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.utils.bbox_wh_iou": [[184, 191], ["wh2.t.t", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min"], "function", ["None"], ["", "def", "bbox_wh_iou", "(", "wh1", ",", "wh2", ")", ":", "\n", "    ", "wh2", "=", "wh2", ".", "t", "(", ")", "\n", "w1", ",", "h1", "=", "wh1", "[", "0", "]", ",", "wh1", "[", "1", "]", "\n", "w2", ",", "h2", "=", "wh2", "[", "0", "]", ",", "wh2", "[", "1", "]", "\n", "inter_area", "=", "torch", ".", "min", "(", "w1", ",", "w2", ")", "*", "torch", ".", "min", "(", "h1", ",", "h2", ")", "\n", "union_area", "=", "(", "w1", "*", "h1", "+", "1e-16", ")", "+", "w2", "*", "h2", "-", "inter_area", "\n", "return", "inter_area", "/", "union_area", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.utils.bbox_iou": [[193, 224], ["torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp"], "function", ["None"], ["", "def", "bbox_iou", "(", "box1", ",", "box2", ",", "x1y1x2y2", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Returns the IoU of two bounding boxes\n    \"\"\"", "\n", "if", "not", "x1y1x2y2", ":", "\n", "# Transform from center and width to exact coordinates", "\n", "        ", "b1_x1", ",", "b1_x2", "=", "box1", "[", ":", ",", "0", "]", "-", "box1", "[", ":", ",", "2", "]", "/", "2", ",", "box1", "[", ":", ",", "0", "]", "+", "box1", "[", ":", ",", "2", "]", "/", "2", "\n", "b1_y1", ",", "b1_y2", "=", "box1", "[", ":", ",", "1", "]", "-", "box1", "[", ":", ",", "3", "]", "/", "2", ",", "box1", "[", ":", ",", "1", "]", "+", "box1", "[", ":", ",", "3", "]", "/", "2", "\n", "b2_x1", ",", "b2_x2", "=", "box2", "[", ":", ",", "0", "]", "-", "box2", "[", ":", ",", "2", "]", "/", "2", ",", "box2", "[", ":", ",", "0", "]", "+", "box2", "[", ":", ",", "2", "]", "/", "2", "\n", "b2_y1", ",", "b2_y2", "=", "box2", "[", ":", ",", "1", "]", "-", "box2", "[", ":", ",", "3", "]", "/", "2", ",", "box2", "[", ":", ",", "1", "]", "+", "box2", "[", ":", ",", "3", "]", "/", "2", "\n", "", "else", ":", "\n", "# Get the coordinates of bounding boxes", "\n", "        ", "b1_x1", ",", "b1_y1", ",", "b1_x2", ",", "b1_y2", "=", "box1", "[", ":", ",", "0", "]", ",", "box1", "[", ":", ",", "1", "]", ",", "box1", "[", ":", ",", "2", "]", ",", "box1", "[", ":", ",", "3", "]", "\n", "b2_x1", ",", "b2_y1", ",", "b2_x2", ",", "b2_y2", "=", "box2", "[", ":", ",", "0", "]", ",", "box2", "[", ":", ",", "1", "]", ",", "box2", "[", ":", ",", "2", "]", ",", "box2", "[", ":", ",", "3", "]", "\n", "\n", "# get the corrdinates of the intersection rectangle", "\n", "", "inter_rect_x1", "=", "torch", ".", "max", "(", "b1_x1", ",", "b2_x1", ")", "\n", "inter_rect_y1", "=", "torch", ".", "max", "(", "b1_y1", ",", "b2_y1", ")", "\n", "inter_rect_x2", "=", "torch", ".", "min", "(", "b1_x2", ",", "b2_x2", ")", "\n", "inter_rect_y2", "=", "torch", ".", "min", "(", "b1_y2", ",", "b2_y2", ")", "\n", "# Intersection area", "\n", "inter_area", "=", "torch", ".", "clamp", "(", "inter_rect_x2", "-", "inter_rect_x1", "+", "1", ",", "min", "=", "0", ")", "*", "torch", ".", "clamp", "(", "\n", "inter_rect_y2", "-", "inter_rect_y1", "+", "1", ",", "min", "=", "0", "\n", ")", "\n", "# Union Area", "\n", "b1_area", "=", "(", "b1_x2", "-", "b1_x1", "+", "1", ")", "*", "(", "b1_y2", "-", "b1_y1", "+", "1", ")", "\n", "b2_area", "=", "(", "b2_x2", "-", "b2_x1", "+", "1", ")", "*", "(", "b2_y2", "-", "b2_y1", "+", "1", ")", "\n", "\n", "iou", "=", "inter_area", "/", "(", "b1_area", "+", "b2_area", "-", "inter_area", "+", "1e-16", ")", "\n", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.utils.non_max_suppression": [[226, 265], ["utils.xywh2xyxy", "enumerate", "image_pred[].max", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "range", "image_pred.size", "torch.stack", "torch.stack", "torch.stack", "len", "image_pred[].max", "class_confs.float", "class_preds.float", "utils.bbox_iou", "weights.sum", "detections[].unsqueeze"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.utils.xywh2xyxy", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.utils.bbox_iou"], ["", "def", "non_max_suppression", "(", "prediction", ",", "conf_thres", "=", "0.5", ",", "nms_thres", "=", "0.4", ")", ":", "\n", "    ", "\"\"\"\n    Removes detections with lower object confidence score than 'conf_thres' and performs\n    Non-Maximum Suppression to further filter detections.\n    Returns detections with shape:\n        (x1, y1, x2, y2, object_conf, class_score, class_pred)\n    \"\"\"", "\n", "\n", "# From (center x, center y, width, height) to (x1, y1, x2, y2)", "\n", "prediction", "[", "...", ",", ":", "4", "]", "=", "xywh2xyxy", "(", "prediction", "[", "...", ",", ":", "4", "]", ")", "\n", "output", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "prediction", ")", ")", "]", "\n", "for", "image_i", ",", "image_pred", "in", "enumerate", "(", "prediction", ")", ":", "\n", "# Filter out confidence scores below threshold", "\n", "        ", "image_pred", "=", "image_pred", "[", "image_pred", "[", ":", ",", "4", "]", ">=", "conf_thres", "]", "\n", "# If none are remaining => process next image", "\n", "if", "not", "image_pred", ".", "size", "(", "0", ")", ":", "\n", "            ", "continue", "\n", "# Object confidence times class confidence", "\n", "", "score", "=", "image_pred", "[", ":", ",", "4", "]", "*", "image_pred", "[", ":", ",", "5", ":", "]", ".", "max", "(", "1", ")", "[", "0", "]", "\n", "# Sort by it", "\n", "image_pred", "=", "image_pred", "[", "(", "-", "score", ")", ".", "argsort", "(", ")", "]", "\n", "class_confs", ",", "class_preds", "=", "image_pred", "[", ":", ",", "5", ":", "]", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "detections", "=", "torch", ".", "cat", "(", "(", "image_pred", "[", ":", ",", ":", "5", "]", ",", "class_confs", ".", "float", "(", ")", ",", "class_preds", ".", "float", "(", ")", ")", ",", "1", ")", "\n", "# Perform non-maximum suppression", "\n", "keep_boxes", "=", "[", "]", "\n", "while", "detections", ".", "size", "(", "0", ")", ":", "\n", "            ", "large_overlap", "=", "bbox_iou", "(", "detections", "[", "0", ",", ":", "4", "]", ".", "unsqueeze", "(", "0", ")", ",", "detections", "[", ":", ",", ":", "4", "]", ")", ">", "nms_thres", "\n", "label_match", "=", "detections", "[", "0", ",", "-", "1", "]", "==", "detections", "[", ":", ",", "-", "1", "]", "\n", "# Indices of boxes with lower confidence scores, large IOUs and matching labels", "\n", "invalid", "=", "large_overlap", "&", "label_match", "\n", "weights", "=", "detections", "[", "invalid", ",", "4", ":", "5", "]", "\n", "# Merge overlapping bboxes by order of confidence", "\n", "detections", "[", "0", ",", ":", "4", "]", "=", "(", "weights", "*", "detections", "[", "invalid", ",", ":", "4", "]", ")", ".", "sum", "(", "0", ")", "/", "weights", ".", "sum", "(", ")", "\n", "keep_boxes", "+=", "[", "detections", "[", "0", "]", "]", "\n", "detections", "=", "detections", "[", "~", "invalid", "]", "\n", "", "if", "keep_boxes", ":", "\n", "            ", "output", "[", "image_i", "]", "=", "torch", ".", "stack", "(", "keep_boxes", ")", "\n", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.utils.build_targets": [[267, 322], ["pred_boxes.size", "pred_boxes.size", "pred_cls.size", "pred_boxes.size", "ByteTensor().fill_", "ByteTensor().fill_", "FloatTensor().fill_", "FloatTensor().fill_", "FloatTensor().fill_", "FloatTensor().fill_", "FloatTensor().fill_", "FloatTensor().fill_", "FloatTensor().fill_", "torch.stack", "torch.stack", "torch.stack", "torch.stack.max", "target[].long().t", "gxy.t", "gwh.t", "gxy.long().t", "enumerate", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "utils.bbox_iou", "ByteTensor().fill_.float", "torch.stack.t", "gx.floor", "gy.floor", "ByteTensor", "ByteTensor", "FloatTensor", "FloatTensor", "FloatTensor", "FloatTensor", "FloatTensor", "FloatTensor", "FloatTensor", "utils.bbox_wh_iou", "target[].long", "gxy.long", "pred_cls[].argmax"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.utils.bbox_iou", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.utils.bbox_wh_iou"], ["", "def", "build_targets", "(", "pred_boxes", ",", "pred_cls", ",", "target", ",", "anchors", ",", "ignore_thres", ")", ":", "\n", "\n", "    ", "ByteTensor", "=", "torch", ".", "cuda", ".", "ByteTensor", "if", "pred_boxes", ".", "is_cuda", "else", "torch", ".", "ByteTensor", "\n", "FloatTensor", "=", "torch", ".", "cuda", ".", "FloatTensor", "if", "pred_boxes", ".", "is_cuda", "else", "torch", ".", "FloatTensor", "\n", "\n", "nB", "=", "pred_boxes", ".", "size", "(", "0", ")", "\n", "nA", "=", "pred_boxes", ".", "size", "(", "1", ")", "\n", "nC", "=", "pred_cls", ".", "size", "(", "-", "1", ")", "\n", "nG", "=", "pred_boxes", ".", "size", "(", "2", ")", "\n", "\n", "# Output tensors", "\n", "obj_mask", "=", "ByteTensor", "(", "nB", ",", "nA", ",", "nG", ",", "nG", ")", ".", "fill_", "(", "0", ")", "\n", "noobj_mask", "=", "ByteTensor", "(", "nB", ",", "nA", ",", "nG", ",", "nG", ")", ".", "fill_", "(", "1", ")", "\n", "class_mask", "=", "FloatTensor", "(", "nB", ",", "nA", ",", "nG", ",", "nG", ")", ".", "fill_", "(", "0", ")", "\n", "iou_scores", "=", "FloatTensor", "(", "nB", ",", "nA", ",", "nG", ",", "nG", ")", ".", "fill_", "(", "0", ")", "\n", "tx", "=", "FloatTensor", "(", "nB", ",", "nA", ",", "nG", ",", "nG", ")", ".", "fill_", "(", "0", ")", "\n", "ty", "=", "FloatTensor", "(", "nB", ",", "nA", ",", "nG", ",", "nG", ")", ".", "fill_", "(", "0", ")", "\n", "tw", "=", "FloatTensor", "(", "nB", ",", "nA", ",", "nG", ",", "nG", ")", ".", "fill_", "(", "0", ")", "\n", "th", "=", "FloatTensor", "(", "nB", ",", "nA", ",", "nG", ",", "nG", ")", ".", "fill_", "(", "0", ")", "\n", "tcls", "=", "FloatTensor", "(", "nB", ",", "nA", ",", "nG", ",", "nG", ",", "nC", ")", ".", "fill_", "(", "0", ")", "\n", "\n", "# Convert to position relative to box", "\n", "target_boxes", "=", "target", "[", ":", ",", "2", ":", "6", "]", "*", "nG", "\n", "gxy", "=", "target_boxes", "[", ":", ",", ":", "2", "]", "\n", "gwh", "=", "target_boxes", "[", ":", ",", "2", ":", "]", "\n", "# Get anchors with best iou", "\n", "ious", "=", "torch", ".", "stack", "(", "[", "bbox_wh_iou", "(", "anchor", ",", "gwh", ")", "for", "anchor", "in", "anchors", "]", ")", "\n", "best_ious", ",", "best_n", "=", "ious", ".", "max", "(", "0", ")", "\n", "# Separate target values", "\n", "b", ",", "target_labels", "=", "target", "[", ":", ",", ":", "2", "]", ".", "long", "(", ")", ".", "t", "(", ")", "\n", "gx", ",", "gy", "=", "gxy", ".", "t", "(", ")", "\n", "gw", ",", "gh", "=", "gwh", ".", "t", "(", ")", "\n", "gi", ",", "gj", "=", "gxy", ".", "long", "(", ")", ".", "t", "(", ")", "\n", "# Set masks", "\n", "obj_mask", "[", "b", ",", "best_n", ",", "gj", ",", "gi", "]", "=", "1", "\n", "noobj_mask", "[", "b", ",", "best_n", ",", "gj", ",", "gi", "]", "=", "0", "\n", "\n", "# Set noobj mask to zero where iou exceeds ignore threshold", "\n", "for", "i", ",", "anchor_ious", "in", "enumerate", "(", "ious", ".", "t", "(", ")", ")", ":", "\n", "        ", "noobj_mask", "[", "b", "[", "i", "]", ",", "anchor_ious", ">", "ignore_thres", ",", "gj", "[", "i", "]", ",", "gi", "[", "i", "]", "]", "=", "0", "\n", "\n", "# Coordinates", "\n", "", "tx", "[", "b", ",", "best_n", ",", "gj", ",", "gi", "]", "=", "gx", "-", "gx", ".", "floor", "(", ")", "\n", "ty", "[", "b", ",", "best_n", ",", "gj", ",", "gi", "]", "=", "gy", "-", "gy", ".", "floor", "(", ")", "\n", "# Width and height", "\n", "tw", "[", "b", ",", "best_n", ",", "gj", ",", "gi", "]", "=", "torch", ".", "log", "(", "gw", "/", "anchors", "[", "best_n", "]", "[", ":", ",", "0", "]", "+", "1e-16", ")", "\n", "th", "[", "b", ",", "best_n", ",", "gj", ",", "gi", "]", "=", "torch", ".", "log", "(", "gh", "/", "anchors", "[", "best_n", "]", "[", ":", ",", "1", "]", "+", "1e-16", ")", "\n", "# One-hot encoding of label", "\n", "tcls", "[", "b", ",", "best_n", ",", "gj", ",", "gi", ",", "target_labels", "]", "=", "1", "\n", "# Compute label correctness and iou at best anchor", "\n", "class_mask", "[", "b", ",", "best_n", ",", "gj", ",", "gi", "]", "=", "(", "pred_cls", "[", "b", ",", "best_n", ",", "gj", ",", "gi", "]", ".", "argmax", "(", "-", "1", ")", "==", "target_labels", ")", ".", "float", "(", ")", "\n", "iou_scores", "[", "b", ",", "best_n", ",", "gj", ",", "gi", "]", "=", "bbox_iou", "(", "pred_boxes", "[", "b", ",", "best_n", ",", "gj", ",", "gi", "]", ",", "target_boxes", ",", "x1y1x2y2", "=", "False", ")", "\n", "\n", "tconf", "=", "obj_mask", ".", "float", "(", ")", "\n", "return", "iou_scores", ",", "class_mask", ",", "obj_mask", ",", "noobj_mask", ",", "tx", ",", "ty", ",", "tw", ",", "th", ",", "tcls", ",", "tconf", "\n", "", ""]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.datasets.ImageFolder.__init__": [[40, 43], ["sorted", "glob.glob"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "folder_path", ",", "img_size", "=", "416", ")", ":", "\n", "        ", "self", ".", "files", "=", "sorted", "(", "glob", ".", "glob", "(", "\"%s/*.*\"", "%", "folder_path", ")", ")", "\n", "self", ".", "img_size", "=", "img_size", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.datasets.ImageFolder.__getitem__": [[44, 54], ["datasets.pad_to_square", "datasets.resize", "torchvision.ToTensor", "PIL.Image.open", "len"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.datasets.pad_to_square", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.datasets.resize"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_path", "=", "self", ".", "files", "[", "index", "%", "len", "(", "self", ".", "files", ")", "]", "\n", "# Extract image as PyTorch tensor", "\n", "img", "=", "transforms", ".", "ToTensor", "(", ")", "(", "Image", ".", "open", "(", "img_path", ")", ")", "\n", "# Pad to square resolution", "\n", "img", ",", "_", "=", "pad_to_square", "(", "img", ",", "0", ")", "\n", "# Resize", "\n", "img", "=", "resize", "(", "img", ",", "self", ".", "img_size", ")", "\n", "\n", "return", "img_path", ",", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.datasets.ImageFolder.__len__": [[55, 57], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.datasets.ListDataset.__init__": [[60, 76], ["open", "file.readlines", "path.replace().replace().replace", "path.replace().replace", "path.replace"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "list_path", ",", "img_size", "=", "416", ",", "augment", "=", "True", ",", "multiscale", "=", "True", ",", "normalized_labels", "=", "True", ")", ":", "\n", "        ", "with", "open", "(", "list_path", ",", "\"r\"", ")", "as", "file", ":", "\n", "            ", "self", ".", "img_files", "=", "file", ".", "readlines", "(", ")", "\n", "\n", "", "self", ".", "label_files", "=", "[", "\n", "path", ".", "replace", "(", "\"images\"", ",", "\"labels\"", ")", ".", "replace", "(", "\".png\"", ",", "\".txt\"", ")", ".", "replace", "(", "\".jpg\"", ",", "\".txt\"", ")", "\n", "for", "path", "in", "self", ".", "img_files", "\n", "]", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "max_objects", "=", "100", "\n", "self", ".", "augment", "=", "augment", "\n", "self", ".", "multiscale", "=", "multiscale", "\n", "self", ".", "normalized_labels", "=", "normalized_labels", "\n", "self", ".", "min_size", "=", "self", ".", "img_size", "-", "3", "*", "32", "\n", "self", ".", "max_size", "=", "self", ".", "img_size", "+", "3", "*", "32", "\n", "self", ".", "batch_count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.datasets.ListDataset.__getitem__": [[77, 133], ["datasets.ListDataset.img_files[].rstrip", "datasets.pad_to_square", "datasets.ListDataset.label_files[].rstrip", "os.path.exists", "torchvision.ToTensor", "PIL.Image.open().convert", "len", "img.expand.expand.unsqueeze", "img.expand.expand.expand", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "numpy.loadtxt().reshape", "numpy.random.random", "utils.augmentations.horisontal_flip", "PIL.Image.open", "len", "numpy.loadtxt", "len", "len"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.datasets.pad_to_square", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.augmentations.horisontal_flip"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "# ---------", "\n", "#  Image", "\n", "# ---------", "\n", "\n", "        ", "img_path", "=", "self", ".", "img_files", "[", "index", "%", "len", "(", "self", ".", "img_files", ")", "]", ".", "rstrip", "(", ")", "\n", "\n", "# Extract image as PyTorch tensor", "\n", "img", "=", "transforms", ".", "ToTensor", "(", ")", "(", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", ")", "\n", "\n", "# Handle images with less than three channels", "\n", "if", "len", "(", "img", ".", "shape", ")", "!=", "3", ":", "\n", "            ", "img", "=", "img", ".", "unsqueeze", "(", "0", ")", "\n", "img", "=", "img", ".", "expand", "(", "(", "3", ",", "img", ".", "shape", "[", "1", ":", "]", ")", ")", "\n", "\n", "", "_", ",", "h", ",", "w", "=", "img", ".", "shape", "\n", "h_factor", ",", "w_factor", "=", "(", "h", ",", "w", ")", "if", "self", ".", "normalized_labels", "else", "(", "1", ",", "1", ")", "\n", "# Pad to square resolution", "\n", "img", ",", "pad", "=", "pad_to_square", "(", "img", ",", "0", ")", "\n", "_", ",", "padded_h", ",", "padded_w", "=", "img", ".", "shape", "\n", "\n", "# ---------", "\n", "#  Label", "\n", "# ---------", "\n", "\n", "label_path", "=", "self", ".", "label_files", "[", "index", "%", "len", "(", "self", ".", "img_files", ")", "]", ".", "rstrip", "(", ")", "\n", "\n", "targets", "=", "None", "\n", "if", "os", ".", "path", ".", "exists", "(", "label_path", ")", ":", "\n", "            ", "boxes", "=", "torch", ".", "from_numpy", "(", "np", ".", "loadtxt", "(", "label_path", ")", ".", "reshape", "(", "-", "1", ",", "5", ")", ")", "\n", "# Extract coordinates for unpadded + unscaled image", "\n", "x1", "=", "w_factor", "*", "(", "boxes", "[", ":", ",", "1", "]", "-", "boxes", "[", ":", ",", "3", "]", "/", "2", ")", "\n", "y1", "=", "h_factor", "*", "(", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "4", "]", "/", "2", ")", "\n", "x2", "=", "w_factor", "*", "(", "boxes", "[", ":", ",", "1", "]", "+", "boxes", "[", ":", ",", "3", "]", "/", "2", ")", "\n", "y2", "=", "h_factor", "*", "(", "boxes", "[", ":", ",", "2", "]", "+", "boxes", "[", ":", ",", "4", "]", "/", "2", ")", "\n", "# Adjust for added padding", "\n", "x1", "+=", "pad", "[", "0", "]", "\n", "y1", "+=", "pad", "[", "2", "]", "\n", "x2", "+=", "pad", "[", "1", "]", "\n", "y2", "+=", "pad", "[", "3", "]", "\n", "# Returns (x, y, w, h)", "\n", "boxes", "[", ":", ",", "1", "]", "=", "(", "(", "x1", "+", "x2", ")", "/", "2", ")", "/", "padded_w", "\n", "boxes", "[", ":", ",", "2", "]", "=", "(", "(", "y1", "+", "y2", ")", "/", "2", ")", "/", "padded_h", "\n", "boxes", "[", ":", ",", "3", "]", "*=", "w_factor", "/", "padded_w", "\n", "boxes", "[", ":", ",", "4", "]", "*=", "h_factor", "/", "padded_h", "\n", "\n", "targets", "=", "torch", ".", "zeros", "(", "(", "len", "(", "boxes", ")", ",", "6", ")", ")", "\n", "targets", "[", ":", ",", "1", ":", "]", "=", "boxes", "\n", "\n", "# Apply augmentations", "\n", "", "if", "self", ".", "augment", ":", "\n", "            ", "if", "np", ".", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "img", ",", "targets", "=", "horisontal_flip", "(", "img", ",", "targets", ")", "\n", "\n", "", "", "return", "img_path", ",", "img", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.datasets.ListDataset.collate_fn": [[134, 149], ["list", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "zip", "random.choice", "range", "datasets.resize"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.datasets.resize"], ["", "def", "collate_fn", "(", "self", ",", "batch", ")", ":", "\n", "        ", "paths", ",", "imgs", ",", "targets", "=", "list", "(", "zip", "(", "*", "batch", ")", ")", "\n", "# Remove empty placeholder targets", "\n", "targets", "=", "[", "boxes", "for", "boxes", "in", "targets", "if", "boxes", "is", "not", "None", "]", "\n", "# Add sample index to targets", "\n", "for", "i", ",", "boxes", "in", "enumerate", "(", "targets", ")", ":", "\n", "            ", "boxes", "[", ":", ",", "0", "]", "=", "i", "\n", "", "targets", "=", "torch", ".", "cat", "(", "targets", ",", "0", ")", "\n", "# Selects new image size every tenth batch", "\n", "if", "self", ".", "multiscale", "and", "self", ".", "batch_count", "%", "10", "==", "0", ":", "\n", "            ", "self", ".", "img_size", "=", "random", ".", "choice", "(", "range", "(", "self", ".", "min_size", ",", "self", ".", "max_size", "+", "1", ",", "32", ")", ")", "\n", "# Resize images to input shape", "\n", "", "imgs", "=", "torch", ".", "stack", "(", "[", "resize", "(", "img", ",", "self", ".", "img_size", ")", "for", "img", "in", "imgs", "]", ")", "\n", "self", ".", "batch_count", "+=", "1", "\n", "return", "paths", ",", "imgs", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.datasets.ListDataset.__len__": [[150, 152], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_files", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.datasets.pad_to_square": [[15, 26], ["numpy.abs", "torch.pad"], "function", ["None"], ["def", "pad_to_square", "(", "img", ",", "pad_value", ")", ":", "\n", "    ", "c", ",", "h", ",", "w", "=", "img", ".", "shape", "\n", "dim_diff", "=", "np", ".", "abs", "(", "h", "-", "w", ")", "\n", "# (upper / left) padding and (lower / right) padding", "\n", "pad1", ",", "pad2", "=", "dim_diff", "//", "2", ",", "dim_diff", "-", "dim_diff", "//", "2", "\n", "# Determine padding", "\n", "pad", "=", "(", "0", ",", "0", ",", "pad1", ",", "pad2", ")", "if", "h", "<=", "w", "else", "(", "pad1", ",", "pad2", ",", "0", ",", "0", ")", "\n", "# Add padding", "\n", "img", "=", "F", ".", "pad", "(", "img", ",", "pad", ",", "\"constant\"", ",", "value", "=", "pad_value", ")", "\n", "\n", "return", "img", ",", "pad", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.datasets.resize": [[28, 31], ["torch.interpolate().squeeze", "torch.interpolate", "F.interpolate().squeeze.unsqueeze"], "function", ["None"], ["", "def", "resize", "(", "image", ",", "size", ")", ":", "\n", "    ", "image", "=", "F", ".", "interpolate", "(", "image", ".", "unsqueeze", "(", "0", ")", ",", "size", "=", "size", ",", "mode", "=", "\"nearest\"", ")", ".", "squeeze", "(", "0", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.datasets.random_resize": [[33, 37], ["torch.interpolate", "random.sample", "list", "range"], "function", ["None"], ["", "def", "random_resize", "(", "images", ",", "min_size", "=", "288", ",", "max_size", "=", "448", ")", ":", "\n", "    ", "new_size", "=", "random", ".", "sample", "(", "list", "(", "range", "(", "min_size", ",", "max_size", "+", "1", ",", "32", ")", ")", ",", "1", ")", "[", "0", "]", "\n", "images", "=", "F", ".", "interpolate", "(", "images", ",", "size", "=", "new_size", ",", "mode", "=", "\"nearest\"", ")", "\n", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.datasets.base.BaseDataset.__init__": [[11, 23], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "split", ",", "mode", "=", "None", ",", "transform", "=", "None", ",", "\n", "gt_transform", "=", "None", ",", "inst_map_transform", "=", "None", ",", "\n", "logger", "=", "None", ",", "scale", "=", "True", ",", "opt", "=", "None", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "gt_transform", "=", "gt_transform", "\n", "self", ".", "inst_map_transform", "=", "inst_map_transform", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "mode", "=", "mode", "if", "mode", "is", "not", "None", "else", "split", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "opt", "=", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.datasets.base.BaseDataset.__getitem__": [[24, 26], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "raise", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.datasets.base.BaseDataset.num_class": [[27, 30], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_class", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "NUM_CLASS", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.datasets.base.BaseDataset.pred_offset": [[31, 34], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "pred_offset", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.datasets.indianDrivingDataset.IndianDrivingDataset.__init__": [[24, 50], ["base.BaseDataset.__init__", "os.path.join", "os.path.exists", "indianDrivingDataset._get_cityscapes_tuple", "len", "RuntimeError", "len", "len"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.datasets.cityscapes._get_cityscapes_tuple"], ["def", "__init__", "(", "self", ",", "root", "=", "'../datasets'", ",", "split", "=", "'train'", ",", "\n", "mode", "=", "None", ",", "transform", "=", "None", ",", "crop_type", "=", "\"random\"", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "IndianDrivingDataset", ",", "self", ")", ".", "__init__", "(", "\n", "root", ",", "split", ",", "mode", ",", "transform", ",", "**", "kwargs", ")", "\n", "# assert exists", "\n", "root", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "BASE_DIR", ")", "\n", "if", "self", ".", "opt", ".", "label_nc", "==", "21", ":", "\n", "            ", "self", ".", "ch_to_inst_id", "=", "{", "\"4\"", ":", "\"4\"", ",", "\"5\"", ":", "\"5\"", ",", "\"6\"", ":", "\"6\"", ",", "\"7\"", ":", "\"7\"", ",", "\n", "\"8\"", ":", "\"8\"", ",", "\"9\"", ":", "\"9\"", ",", "\"10\"", ":", "\"10\"", ",", "\n", "\"11\"", ":", "\"11\"", ",", "\"12\"", ":", "\"12\"", ",", "\"13\"", ":", "\"13\"", ",", "\"14\"", ":", "\"14\"", "}", "\n", "self", ".", "param_obj", "=", "{", "\"4\"", ":", "[", "0.25", ",", "50", ",", "10", ",", "4", ",", "0.4", "]", ",", "\n", "\"10\"", ":", "[", "0.5", ",", "30", ",", "10", ",", "3", ",", "0.4", "]", "}", "\n", "", "self", ".", "use_bbox", "=", "False", "\n", "self", ".", "idx_valid_ins", "=", "-", "1", "\n", "assert", "os", ".", "path", ".", "exists", "(", "root", ")", ",", "\"Please download the dataset!!\"", "\n", "self", ".", "classes_of_interest_ids", "=", "self", ".", "opt", ".", "classes_of_interest_ids", "\n", "self", ".", "use_bbox", "=", "self", ".", "opt", ".", "use_bbox", "\n", "self", ".", "crop_type", "=", "crop_type", "\n", "self", ".", "images", ",", "self", ".", "gts", ",", "self", ".", "inst_maps", ",", "self", ".", "inst_data_json", "=", "_get_cityscapes_tuple", "(", "root", ",", "split", ",", "self", ".", "use_bbox", ",", "self", ".", "opt", ".", "fineTuning", ",", "self", ".", "opt", ".", "how_many", ")", "\n", "if", "split", "!=", "'vis'", ":", "\n", "            ", "assert", "(", "len", "(", "self", ".", "images", ")", "==", "len", "(", "self", ".", "gts", ")", ")", "\n", "", "if", "len", "(", "self", ".", "images", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 images in subfolders of: \\\n                \"", "+", "root", "+", "\"\\n\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.datasets.indianDrivingDataset.IndianDrivingDataset.__getitem__": [[51, 130], ["PIL.Image.open().convert", "PIL.Image.open", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose.", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "indianDrivingDataset.IndianDrivingDataset.get_test_item", "indianDrivingDataset.IndianDrivingDataset.transpose", "PIL.Image.open", "json.load", "torchvision.crop.transpose", "indianDrivingDataset.IndianDrivingDataset.get_crop_params", "torchvision.crop", "torchvision.crop", "torchvision.crop", "torchvision.crop", "indianDrivingDataset.IndianDrivingDataset.transform", "indianDrivingDataset.IndianDrivingDataset.inst_map_transform", "utils._random_mask_with_instance_cond", "utils.inst_map2bbox", "utils._random_mask", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "numpy.random.uniform", "PIL.Image.open", "open", "torchvision.crop.transpose", "indianDrivingDataset.IndianDrivingDataset.check_instance", "torchvision.crop", "torchvision.crop", "indianDrivingDataset.IndianDrivingDataset.check_instance", "indianDrivingDataset.IndianDrivingDataset.gt_transform", "torchvision.ToTensor", "torchvision.ToTensor", "range"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.datasets.cityscapes.CityscapesSegmentation.get_test_item", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.configuration.load", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.datasets.cityscapes.CityscapesSegmentation.get_crop_params", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util._random_mask_with_instance_cond", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.inst_map2bbox", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util._random_mask", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.datasets.cityscapes.CityscapesSegmentation.check_instance", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.datasets.cityscapes.CityscapesSegmentation.check_instance"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "\"test\"", ":", "\n", "            ", "outputs", "=", "self", ".", "get_test_item", "(", "index", ")", "\n", "return", "outputs", "\n", "", "outputs", "=", "{", "}", "\n", "flip", "=", "False", "\n", "crop", "=", "True", "if", "self", ".", "opt", ".", "size_crop_height", "is", "not", "None", "and", "self", ".", "opt", ".", "size_crop_width", "is", "not", "None", "else", "False", "\n", "\"\"\"resize_img = transform.Resize((self.opt.image_height,\n                                       self.opt.image_width),\n                                      Image.BICUBIC)\n        resize_gt_inst = transform.Resize((self.opt.image_height,\n                                           self.opt.image_width),\n                                          Image.NEAREST)\"\"\"", "\n", "if", "(", "not", "self", ".", "opt", ".", "no_flip", ")", "and", "np", ".", "random", ".", "uniform", "(", ")", "<", "0.5", "and", "self", ".", "split", "==", "\"train\"", ":", "\n", "            ", "flip", "=", "True", "\n", "", "img", "=", "Image", ".", "open", "(", "self", ".", "images", "[", "index", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "flip", ":", "\n", "            ", "img", "=", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "\n", "#img = resize_img(img)", "\n", "", "if", "self", ".", "use_bbox", ":", "\n", "            ", "inst_map", "=", "Image", ".", "open", "(", "self", ".", "inst_maps", "[", "index", "]", ")", "\n", "json_data", "=", "json", ".", "load", "(", "open", "(", "self", ".", "inst_data_json", "[", "index", "]", ")", ")", "\n", "if", "flip", ":", "\n", "                ", "inst_map", "=", "inst_map", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "#inst_map = resize_gt_inst(inst_map)", "\n", "\n", "", "", "gt", "=", "Image", ".", "open", "(", "self", ".", "gts", "[", "index", "]", ")", "\n", "if", "flip", ":", "\n", "            ", "gt", "=", "gt", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "\n", "#gt = resize_gt_inst(gt)", "\n", "", "if", "crop", ":", "\n", "\n", "            ", "i", ",", "j", ",", "h", ",", "w", "=", "self", ".", "get_crop_params", "(", ")", "\n", "if", "self", ".", "use_bbox", ":", "\n", "                ", "self", ".", "idx_valid_ins", "=", "self", ".", "check_instance", "(", "inst_map", ",", "gt", ",", "False", ",", "[", "i", ",", "j", ",", "h", ",", "w", "]", ",", "json_data", ",", "flip", "=", "flip", ")", "\n", "", "img", "=", "TF", ".", "crop", "(", "img", ",", "i", ",", "j", ",", "h", ",", "w", ")", "\n", "gt", "=", "TF", ".", "crop", "(", "gt", ",", "i", ",", "j", ",", "h", ",", "w", ")", "\n", "if", "self", ".", "use_bbox", ":", "\n", "                ", "inst_map", "=", "TF", ".", "crop", "(", "inst_map", ",", "i", ",", "j", ",", "h", ",", "w", ")", "\n", "", "", "elif", "self", ".", "use_bbox", ":", "\n", "            ", "self", ".", "idx_valid_ins", "=", "self", ".", "check_instance", "(", "inst_map", ",", "gt", ",", "False", ",", "json_data", "=", "json_data", ",", "flip", "=", "flip", ")", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "if", "self", ".", "gt_transform", "is", "not", "None", ":", "\n", "            ", "gt", "=", "self", ".", "gt_transform", "(", "gt", ")", "*", "255", "\n", "", "if", "self", ".", "inst_map_transform", "is", "not", "None", "and", "self", ".", "use_bbox", ":", "\n", "            ", "inst_map", "=", "self", ".", "inst_map_transform", "(", "inst_map", ")", "\n", "", "if", "self", ".", "idx_valid_ins", "is", "not", "-", "1", ":", "\n", "            ", "masks", ",", "indexes", "=", "util", ".", "_random_mask_with_instance_cond", "(", "\n", "img", ".", "shape", "[", "1", ":", "]", ",", "self", ".", "opt", ".", "min_hole_size", ",", "\n", "self", ".", "opt", ".", "max_hole_size", ",", "(", "inst_map", "==", "self", ".", "idx_valid_ins", ")", "*", "1.0", ",", "None", ")", "\n", "insta_maps_bbox", ",", "inst_map_compact", ",", "theta", "=", "util", ".", "inst_map2bbox", "(", "\n", "(", "inst_map", "==", "self", ".", "idx_valid_ins", ")", "*", "1.0", ",", "self", ".", "opt", ")", "\n", "\n", "", "else", ":", "\n", "            ", "masks", ",", "indexes", "=", "util", ".", "_random_mask", "(", "img", ".", "shape", "[", "1", ":", "]", ",", "\n", "self", ".", "opt", ".", "min_hole_size", ",", "\n", "self", ".", "opt", ".", "max_hole_size", ")", "\n", "inst_map", "=", "insta_maps_bbox", "=", "torch", ".", "zeros", "(", "1", ",", "img", ".", "shape", "[", "1", "]", ",", "img", ".", "shape", "[", "2", "]", ")", "\n", "inst_map_compact", "=", "torch", ".", "zeros", "(", "1", ",", "self", ".", "opt", ".", "compact_sizey", ",", "self", ".", "opt", ".", "compact_sizex", ")", "\n", "theta", "=", "torch", ".", "Tensor", "(", "[", "0", "for", "_", "in", "range", "(", "6", ")", "]", ")", "\n", "", "mask_transform", "=", "transform", ".", "Compose", "(", "[", "\n", "transform", ".", "ToTensor", "(", ")", "]", ")", "\n", "outputs", "[", "\"gt_images\"", "]", "=", "img", "\n", "outputs", "[", "\"gt_seg_maps\"", "]", "=", "gt", "\n", "outputs", "[", "\"inst_map\"", "]", "=", "(", "inst_map", "==", "self", ".", "idx_valid_ins", ")", "*", "1.0", "if", "self", ".", "use_bbox", "else", "inst_map", "\n", "outputs", "[", "\"inst_map_valid_idx\"", "]", "=", "self", ".", "idx_valid_ins", "\n", "outputs", "[", "\"images_path\"", "]", "=", "self", ".", "images", "[", "index", "]", "\n", "outputs", "[", "\"masks\"", "]", "=", "mask_transform", "(", "masks", ")", "\n", "outputs", "[", "\"indexes\"", "]", "=", "torch", ".", "Tensor", "(", "indexes", ")", "\n", "outputs", "[", "\"insta_maps_bbox\"", "]", "=", "insta_maps_bbox", "\n", "outputs", "[", "\"inst_map_compact\"", "]", "=", "inst_map_compact", "\n", "outputs", "[", "\"theta\"", "]", "=", "theta", "\n", "outputs", "[", "\"compute_instance\"", "]", "=", "torch", ".", "Tensor", "(", "[", "1", "]", ")", "if", "self", ".", "idx_valid_ins", "is", "not", "-", "1", "else", "torch", ".", "Tensor", "(", "[", "0", "]", ")", "\n", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.datasets.indianDrivingDataset.IndianDrivingDataset.get_test_item": [[131, 221], ["PIL.Image.open().convert", "PIL.Image.open", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose.", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "PIL.Image.open", "json.load", "indianDrivingDataset.IndianDrivingDataset.get_crop_params", "torchvision.crop", "torchvision.crop", "torchvision.crop", "torchvision.crop", "indianDrivingDataset.IndianDrivingDataset.inst_map_transform", "indianDrivingDataset.IndianDrivingDataset.transform", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "PIL.Image.open", "open", "utils.load_masks_data", "indianDrivingDataset.IndianDrivingDataset.check_instance_with_masks_and_crop", "torchvision.crop", "torchvision.crop", "utils.load_masks_data", "indianDrivingDataset.IndianDrivingDataset.check_instance_with_masks_and_crop", "indianDrivingDataset.IndianDrivingDataset.gt_transform", "utils.inst_map2bbox", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "utils._random_mask_with_instance_cond", "utils.inst_map2bbox", "utils._random_mask", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torchvision.ToTensor", "torchvision.ToTensor", "range", "range"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.configuration.load", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.datasets.cityscapes.CityscapesSegmentation.get_crop_params", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.load_masks_data", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.datasets.cityscapes.CityscapesSegmentation.check_instance_with_masks_and_crop", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.load_masks_data", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.datasets.cityscapes.CityscapesSegmentation.check_instance_with_masks_and_crop", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.inst_map2bbox", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util._random_mask_with_instance_cond", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.inst_map2bbox", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util._random_mask"], ["", "def", "get_test_item", "(", "self", ",", "index", ")", ":", "\n", "        ", "outputs", "=", "{", "}", "\n", "flip", "=", "False", "\n", "crop", "=", "True", "if", "self", ".", "opt", ".", "size_crop_height", "is", "not", "None", "and", "self", ".", "opt", ".", "size_crop_width", "is", "not", "None", "else", "False", "\n", "\n", "img", "=", "Image", ".", "open", "(", "self", ".", "images", "[", "index", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "self", ".", "use_bbox", ":", "\n", "            ", "inst_map", "=", "Image", ".", "open", "(", "self", ".", "inst_maps", "[", "index", "]", ")", "\n", "json_data", "=", "json", ".", "load", "(", "open", "(", "self", ".", "inst_data_json", "[", "index", "]", ")", ")", "\n", "\n", "", "gt", "=", "Image", ".", "open", "(", "self", ".", "gts", "[", "index", "]", ")", "\n", "i", ",", "j", ",", "h", ",", "w", "=", "0", ",", "0", ",", "self", ".", "opt", ".", "image_height", ",", "self", ".", "opt", ".", "image_width", "\n", "if", "crop", ":", "\n", "            ", "i", ",", "j", ",", "h", ",", "w", "=", "self", ".", "get_crop_params", "(", ")", "\n", "if", "self", ".", "opt", ".", "use_load_mask", ":", "\n", "                ", "masks", ",", "indexes", "=", "util", ".", "load_masks_data", "(", "self", ".", "opt", ")", "\n", "", "if", "self", ".", "use_bbox", ":", "\n", "                ", "self", ".", "idx_valid_ins", "=", "self", ".", "check_instance_with_masks_and_crop", "(", "\n", "inst_map", ",", "gt", ",", "True", ",", "(", "\n", "indexes", "[", "index", "]", "if", "self", ".", "opt", ".", "use_load_mask", "else", "[", "0", ",", "self", ".", "opt", ".", "size_crop_height", ",", "\n", "0", ",", "self", ".", "opt", ".", "size_crop_width", "]", ")", ",", "\n", "[", "i", ",", "j", ",", "h", ",", "w", "]", ",", "json_data", ",", "False", ")", "\n", "", "img", "=", "TF", ".", "crop", "(", "img", ",", "i", ",", "j", ",", "h", ",", "w", ")", "\n", "gt", "=", "TF", ".", "crop", "(", "gt", ",", "i", ",", "j", ",", "h", ",", "w", ")", "\n", "if", "self", ".", "use_bbox", ":", "\n", "                ", "inst_map", "=", "TF", ".", "crop", "(", "inst_map", ",", "i", ",", "j", ",", "h", ",", "w", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "opt", ".", "use_load_mask", ":", "\n", "                ", "masks", ",", "indexes", "=", "util", ".", "load_masks_data", "(", "self", ".", "opt", ")", "\n", "", "if", "self", ".", "use_bbox", ":", "\n", "                ", "self", ".", "idx_valid_ins", "=", "self", ".", "check_instance_with_masks_and_crop", "(", "\n", "inst_map", ",", "gt", ",", "True", ",", "(", "\n", "indexes", "[", "index", "]", "if", "self", ".", "opt", ".", "use_load_mask", "else", "[", "0", ",", "256", ",", "\n", "0", ",", "256", "]", ")", ",", "\n", "[", "i", ",", "j", ",", "h", ",", "w", "]", ",", "json_data", ",", "False", ")", "\n", "", "", "if", "self", ".", "gt_transform", "is", "not", "None", ":", "\n", "            ", "gt", "=", "self", ".", "gt_transform", "(", "gt", ")", "*", "255", "\n", "", "if", "self", ".", "inst_map_transform", "is", "not", "None", "and", "self", ".", "use_bbox", ":", "\n", "            ", "inst_map", "=", "self", ".", "inst_map_transform", "(", "inst_map", ")", "\n", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "if", "self", ".", "opt", ".", "use_load_mask", ":", "\n", "            ", "if", "self", ".", "idx_valid_ins", "is", "not", "-", "1", ":", "\n", "                ", "insta_maps_bbox", ",", "inst_map_compact", ",", "theta", "=", "util", ".", "inst_map2bbox", "(", "\n", "(", "inst_map", "==", "self", ".", "idx_valid_ins", ")", "*", "1.0", ",", "self", ".", "opt", ")", "\n", "", "else", ":", "\n", "                ", "inst_map", "=", "insta_maps_bbox", "=", "torch", ".", "zeros", "(", "1", ",", "img", ".", "shape", "[", "1", "]", ",", "\n", "img", ".", "shape", "[", "2", "]", ")", "\n", "inst_map_compact", "=", "torch", ".", "zeros", "(", "1", ",", "self", ".", "opt", ".", "compact_sizey", ",", "\n", "self", ".", "opt", ".", "compact_sizex", ")", "\n", "theta", "=", "torch", ".", "Tensor", "(", "[", "0", "for", "_", "in", "range", "(", "6", ")", "]", ")", "\n", "", "", "else", ":", "\n", "\n", "            ", "if", "self", ".", "idx_valid_ins", "is", "not", "-", "1", ":", "\n", "                ", "masks", ",", "indexes", "=", "util", ".", "_random_mask_with_instance_cond", "(", "\n", "img", ".", "shape", "[", "1", ":", "]", ",", "self", ".", "opt", ".", "min_hole_size", ",", "\n", "self", ".", "opt", ".", "max_hole_size", ",", "\n", "(", "inst_map", "==", "self", ".", "idx_valid_ins", ")", "*", "1.0", ",", "index", ")", "\n", "insta_maps_bbox", ",", "inst_map_compact", ",", "theta", "=", "util", ".", "inst_map2bbox", "(", "\n", "(", "inst_map", "==", "self", ".", "idx_valid_ins", ")", "*", "1.0", ",", "self", ".", "opt", ")", "\n", "\n", "", "else", ":", "\n", "                ", "masks", ",", "indexes", "=", "util", ".", "_random_mask", "(", "img", ".", "shape", "[", "1", ":", "]", ",", "\n", "self", ".", "opt", ".", "min_hole_size", ",", "\n", "self", ".", "opt", ".", "max_hole_size", ",", "index", ")", "\n", "inst_map", "=", "insta_maps_bbox", "=", "torch", ".", "zeros", "(", "1", ",", "img", ".", "shape", "[", "1", "]", ",", "\n", "img", ".", "shape", "[", "2", "]", ")", "\n", "inst_map_compact", "=", "torch", ".", "zeros", "(", "1", ",", "self", ".", "opt", ".", "compact_sizey", ",", "\n", "self", ".", "opt", ".", "compact_sizex", ")", "\n", "theta", "=", "torch", ".", "Tensor", "(", "[", "0", "for", "_", "in", "range", "(", "6", ")", "]", ")", "\n", "", "", "mask_transform", "=", "transform", ".", "Compose", "(", "[", "\n", "transform", ".", "ToTensor", "(", ")", "]", ")", "\n", "outputs", "[", "\"gt_images\"", "]", "=", "img", "\n", "outputs", "[", "\"gt_seg_maps\"", "]", "=", "gt", "\n", "outputs", "[", "\"inst_map\"", "]", "=", "(", "\n", "inst_map", "==", "self", ".", "idx_valid_ins", ")", "*", "1.0", "if", "self", ".", "use_bbox", "else", "inst_map", "\n", "outputs", "[", "\"inst_map_valid_idx\"", "]", "=", "self", ".", "idx_valid_ins", "\n", "outputs", "[", "\"images_path\"", "]", "=", "self", ".", "images", "[", "index", "]", "\n", "outputs", "[", "\"masks\"", "]", "=", "mask_transform", "(", "\n", "(", "masks", "[", "index", "]", "if", "self", ".", "opt", ".", "use_load_mask", "else", "masks", ")", ")", "\n", "outputs", "[", "\"indexes\"", "]", "=", "torch", ".", "Tensor", "(", "\n", "(", "indexes", "[", "index", "]", "if", "self", ".", "opt", ".", "use_load_mask", "else", "indexes", ")", ")", "\n", "outputs", "[", "\"insta_maps_bbox\"", "]", "=", "insta_maps_bbox", "\n", "outputs", "[", "\"inst_map_compact\"", "]", "=", "inst_map_compact", "\n", "outputs", "[", "\"theta\"", "]", "=", "theta", "\n", "outputs", "[", "\"compute_instance\"", "]", "=", "torch", ".", "Tensor", "(", "\n", "[", "1", "]", ")", "if", "self", ".", "idx_valid_ins", "is", "not", "-", "1", "else", "torch", ".", "Tensor", "(", "[", "0", "]", ")", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.datasets.indianDrivingDataset.IndianDrivingDataset.get_crop_params": [[223, 233], ["numpy.random.choice"], "methods", ["None"], ["", "def", "get_crop_params", "(", "self", ")", ":", "\n", "        ", "crop_type", "=", "np", ".", "random", ".", "choice", "(", "[", "\"left\"", ",", "\"center\"", ",", "\"right\"", "]", ")", "\n", "if", "self", ".", "crop_type", "!=", "\"random\"", ":", "\n", "            ", "crop_type", "=", "self", ".", "crop_type", "\n", "", "if", "crop_type", "==", "\"left\"", ":", "\n", "            ", "return", "0", ",", "0", ",", "self", ".", "opt", ".", "size_crop_width", ",", "self", ".", "opt", ".", "size_crop_width", "\n", "", "elif", "crop_type", "==", "\"right\"", ":", "\n", "            ", "return", "0", ",", "self", ".", "opt", ".", "size_crop_width", ",", "self", ".", "opt", ".", "size_crop_height", ",", "self", ".", "opt", ".", "size_crop_width", "\n", "", "else", ":", "\n", "            ", "return", "0", ",", "self", ".", "opt", ".", "size_crop_width", "/", "2", ",", "self", ".", "opt", ".", "size_crop_height", ",", "self", ".", "opt", ".", "size_crop_width", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.datasets.indianDrivingDataset.IndianDrivingDataset.check_instance": [[234, 275], ["indianDrivingDataset.IndianDrivingDataset.inst_map_transform", "json_load.items", "indianDrivingDataset.IndianDrivingDataset.gt_transform", "int", "len", "json_load.items", "int", "numpy.random.choice", "utils.instInCrop", "utils.instInCrop", "idx_valid_ins.append", "len", "len", "numpy.float", "str", "str", "str", "str", "str", "indianDrivingDataset.IndianDrivingDataset.size", "indianDrivingDataset.IndianDrivingDataset.size"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.instInCrop", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.instInCrop", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size"], ["", "", "def", "check_instance", "(", "self", ",", "inst", ",", "gt", ",", "test", "=", "False", ",", "crop_indexes", "=", "[", "0", ",", "128", ",", "256", ",", "256", "]", ",", "json_load", "=", "[", "]", ",", "flip", "=", "False", ")", ":", "\n", "        ", "instance_idx", "=", "[", "]", "\n", "idx_valid_ins", "=", "[", "]", "\n", "inst", "=", "self", ".", "inst_map_transform", "(", "inst", ")", "\n", "gt", "=", "self", ".", "gt_transform", "(", "gt", ")", "*", "255", "\n", "contained_idx", "=", "[", "]", "\n", "contained_idx", "=", "[", "int", "(", "obj_id", ")", "for", "obj_id", ",", "obj", "in", "json_load", ".", "items", "(", ")", "if", "obj", "[", "\"train_id\"", "]", "in", "self", ".", "classes_of_interest_ids", "]", "\n", "if", "len", "(", "contained_idx", ")", "==", "0", ":", "\n", "            ", "return", "-", "1", "\n", "", "for", "obj_id", ",", "obj", "in", "json_load", ".", "items", "(", ")", ":", "\n", "            ", "if", "int", "(", "obj_id", ")", "not", "in", "contained_idx", ":", "\n", "                ", "continue", "\n", "", "min_size_percent", "=", "self", ".", "param_obj", "[", "str", "(", "obj_id", ")", "[", ":", "-", "3", "]", "]", "[", "0", "]", "\n", "max_width_ratio", "=", "self", ".", "param_obj", "[", "str", "(", "obj_id", ")", "[", ":", "-", "3", "]", "]", "[", "1", "]", "\n", "max_height_ratio", "=", "self", ".", "param_obj", "[", "str", "(", "obj_id", ")", "[", ":", "-", "3", "]", "]", "[", "2", "]", "\n", "max_aspect_ratio", "=", "self", ".", "param_obj", "[", "str", "(", "obj_id", ")", "[", ":", "-", "3", "]", "]", "[", "3", "]", "\n", "min_area_ratio", "=", "self", ".", "param_obj", "[", "str", "(", "obj_id", ")", "[", ":", "-", "3", "]", "]", "[", "4", "]", "\n", "if", "obj", "[", "\"area\"", "]", ">", "(", "\n", "inst", ".", "size", "(", ")", "[", "1", "]", "*", "inst", ".", "size", "(", ")", "[", "2", "]", "*", "min_size_percent", "/", "100", ")", ":", "\n", "                ", "height", "=", "obj", "[", "\"height\"", "]", "\n", "width", "=", "obj", "[", "\"width\"", "]", "\n", "area_ratio", "=", "obj", "[", "\"area_ratio\"", "]", "\n", "\n", "width_ratio", "=", "obj", "[", "\"width_ratio\"", "]", "\n", "height_ratio", "=", "obj", "[", "\"height_ratio\"", "]", "\n", "aspect_ratio", "=", "obj", "[", "\"aspect_ratio\"", "]", "\n", "bbox", "=", "obj", "[", "\"bbox\"", "]", "\n", "if", "flip", "==", "True", ":", "\n", "                    ", "bbox", "=", "[", "bbox", "[", "0", "]", ",", "self", ".", "opt", ".", "image_width", "-", "1", "-", "bbox", "[", "3", "]", ",", "bbox", "[", "2", "]", ",", "\n", "self", ".", "opt", ".", "image_width", "-", "1", "-", "bbox", "[", "1", "]", "]", "\n", "\n", "", "if", "obj", "[", "\"occlusion\"", "]", "is", "False", "and", "width_ratio", "<", "max_width_ratio", "and", "height_ratio", "<", "max_height_ratio", "and", "area_ratio", ">", "min_area_ratio", "and", "aspect_ratio", "<", "max_aspect_ratio", "and", "height", "<=", "self", ".", "opt", ".", "max_hole_size", "and", "width", "<=", "self", ".", "opt", ".", "max_hole_size", "and", "util", ".", "instInCrop", "(", "bbox", ",", "crop_indexes", ",", "0", ")", "and", "util", ".", "instInCrop", "(", "bbox", ",", "[", "0", ",", "0", ",", "self", ".", "opt", ".", "image_height", ",", "self", ".", "opt", ".", "image_width", "]", ",", "20", ")", ":", "\n", "                    ", "idx_valid_ins", ".", "append", "(", "np", ".", "float", "(", "obj_id", ")", ")", "\n", "", "", "", "if", "test", "==", "False", ":", "\n", "            ", "return", "np", ".", "random", ".", "choice", "(", "idx_valid_ins", ")", "if", "len", "(", "idx_valid_ins", ")", ">", "0", "else", "-", "1", "\n", "", "else", ":", "\n", "            ", "return", "idx_valid_ins", "if", "len", "(", "\n", "idx_valid_ins", ")", ">", "0", "else", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.datasets.indianDrivingDataset.IndianDrivingDataset.check_instance_with_masks_and_crop": [[276, 324], ["indianDrivingDataset.IndianDrivingDataset.inst_map_transform", "json_load.items", "indianDrivingDataset.IndianDrivingDataset.gt_transform", "int", "len", "json_load.items", "int", "numpy.random.choice", "utils.instInMap", "utils.instInCrop", "utils.instInCrop", "idx_valid_ins.append", "areas.append", "len", "len", "numpy.float", "numpy.argmax", "str", "str", "str", "str", "str", "indianDrivingDataset.IndianDrivingDataset.size", "indianDrivingDataset.IndianDrivingDataset.size"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.instInMap", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.instInCrop", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.instInCrop", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size"], ["", "", "def", "check_instance_with_masks_and_crop", "(", "self", ",", "inst", ",", "gt", ",", "test", "=", "False", ",", "\n", "indexes", "=", "[", "]", ",", "crop_indexes", "=", "[", "]", ",", "json_load", "=", "[", "]", ",", "flip", "=", "False", ")", ":", "\n", "        ", "instance_idx", "=", "[", "]", "\n", "idx_valid_ins", "=", "[", "]", "\n", "inst", "=", "self", ".", "inst_map_transform", "(", "inst", ")", "\n", "gt", "=", "self", ".", "gt_transform", "(", "gt", ")", "*", "255", "\n", "contained_idx", "=", "[", "]", "\n", "areas", "=", "[", "]", "\n", "contained_idx", "=", "[", "int", "(", "obj_id", ")", "for", "obj_id", ",", "obj", "in", "json_load", ".", "items", "(", ")", "if", "\n", "obj", "[", "\"train_id\"", "]", "in", "self", ".", "classes_of_interest_ids", "]", "\n", "if", "len", "(", "contained_idx", ")", "==", "0", ":", "\n", "            ", "return", "-", "1", "\n", "", "for", "obj_id", ",", "obj", "in", "json_load", ".", "items", "(", ")", ":", "\n", "            ", "if", "int", "(", "obj_id", ")", "not", "in", "contained_idx", ":", "\n", "                ", "continue", "\n", "", "min_size_percent", "=", "self", ".", "param_obj", "[", "str", "(", "obj_id", ")", "[", ":", "-", "3", "]", "]", "[", "0", "]", "\n", "max_width_ratio", "=", "self", ".", "param_obj", "[", "str", "(", "obj_id", ")", "[", ":", "-", "3", "]", "]", "[", "1", "]", "\n", "max_height_ratio", "=", "self", ".", "param_obj", "[", "str", "(", "obj_id", ")", "[", ":", "-", "3", "]", "]", "[", "2", "]", "\n", "max_aspect_ratio", "=", "self", ".", "param_obj", "[", "str", "(", "obj_id", ")", "[", ":", "-", "3", "]", "]", "[", "3", "]", "\n", "min_area_ratio", "=", "self", ".", "param_obj", "[", "str", "(", "obj_id", ")", "[", ":", "-", "3", "]", "]", "[", "4", "]", "\n", "if", "obj", "[", "\"area\"", "]", ">", "(", "\n", "inst", ".", "size", "(", ")", "[", "1", "]", "*", "inst", ".", "size", "(", ")", "[", "2", "]", "*", "min_size_percent", "/", "100", ")", ":", "\n", "                ", "height", "=", "obj", "[", "\"height\"", "]", "\n", "width", "=", "obj", "[", "\"width\"", "]", "\n", "area_ratio", "=", "obj", "[", "\"area_ratio\"", "]", "\n", "\n", "width_ratio", "=", "obj", "[", "\"width_ratio\"", "]", "\n", "height_ratio", "=", "obj", "[", "\"height_ratio\"", "]", "\n", "aspect_ratio", "=", "obj", "[", "\"aspect_ratio\"", "]", "\n", "bbox", "=", "obj", "[", "\"bbox\"", "]", "\n", "if", "flip", "==", "True", ":", "\n", "                    ", "bbox", "=", "[", "bbox", "[", "0", "]", ",", "self", ".", "opt", ".", "image_width", "-", "1", "-", "bbox", "[", "3", "]", ",", "\n", "bbox", "[", "2", "]", ",", "\n", "self", ".", "opt", ".", "image_width", "-", "1", "-", "bbox", "[", "1", "]", "]", "\n", "\n", "", "if", "obj", "[", "\"occlusion\"", "]", "is", "False", "and", "width_ratio", "<", "max_width_ratio", "and", "height_ratio", "<", "max_height_ratio", "and", "area_ratio", ">", "min_area_ratio", "and", "aspect_ratio", "<", "max_aspect_ratio", "and", "height", "<=", "self", ".", "opt", ".", "max_hole_size", "and", "width", "<=", "self", ".", "opt", ".", "max_hole_size", "and", "util", ".", "instInMap", "(", "\n", "bbox", ",", "indexes", ",", "crop_indexes", ")", "and", "util", ".", "instInCrop", "(", "bbox", ",", "crop_indexes", ",", "0", ")", "and", "util", ".", "instInCrop", "(", "bbox", ",", "[", "0", ",", "0", ",", "self", ".", "opt", ".", "image_height", ",", "self", ".", "opt", ".", "image_width", "]", ",", "20", ")", ":", "\n", "                    ", "idx_valid_ins", ".", "append", "(", "np", ".", "float", "(", "obj_id", ")", ")", "\n", "areas", ".", "append", "(", "obj", "[", "\"area\"", "]", ")", "\n", "", "", "", "if", "test", "==", "False", ":", "\n", "            ", "return", "np", ".", "random", ".", "choice", "(", "idx_valid_ins", ")", "if", "len", "(", "\n", "idx_valid_ins", ")", ">", "0", "else", "-", "1", "\n", "", "else", ":", "\n", "            ", "return", "idx_valid_ins", "[", "np", ".", "argmax", "(", "areas", ")", "]", "if", "len", "(", "\n", "idx_valid_ins", ")", ">", "0", "else", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.datasets.indianDrivingDataset.IndianDrivingDataset.__len__": [[326, 328], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.datasets.indianDrivingDataset.IndianDrivingDataset.pred_offset": [[329, 332], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "pred_offset", "(", "self", ")", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.datasets.indianDrivingDataset._get_cityscapes_tuple": [[339, 374], ["os.path.join", "indianDrivingDataset._get_cityscapes_tuple.get_path_tuples"], "function", ["None"], ["", "", "def", "_get_cityscapes_tuple", "(", "folder", ",", "split", "=", "'train'", ",", "use_bbox", "=", "False", ",", "fine_tutning", "=", "False", ",", "how_many", "=", "1500", ")", ":", "\n", "    ", "def", "get_path_tuples", "(", "folder", ",", "split_f", ",", "use_bbox", ",", "split", ",", "how_many", ")", ":", "\n", "        ", "img_paths", "=", "[", "]", "\n", "gt_paths", "=", "[", "]", "\n", "inst_maps", "=", "[", "]", "\n", "insts_data_json", "=", "[", "]", "\n", "with", "open", "(", "split_f", ",", "'r'", ")", "as", "lines", ":", "\n", "            ", "for", "line", "in", "lines", ".", "read", "(", ")", ".", "splitlines", "(", ")", "[", ":", "how_many", "]", ":", "\n", "                ", "imgpath", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "f\"{split}_img\"", ",", "line", "+", "\"_leftImg8bit.png\"", ")", "\n", "gtpath", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "f\"{split}_label\"", ",", "line", "+", "\"_gtFine_trainIds.png\"", ")", "\n", "if", "use_bbox", ":", "\n", "                    ", "inst_map", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "f\"{split}_inst\"", ",", "line", "+", "\"_gtFine_instanceIds.png\"", ")", "\n", "inst_data_json", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "f\"{split}_inst\"", ",", "line", "+", "\"_gtFine_data.json\"", ")", "\n", "", "else", ":", "\n", "                    ", "inst_bbox", "=", "inst_map", "=", "inst_data_json", "=", "\"\"", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "gtpath", ")", ":", "\n", "                    ", "img_paths", ".", "append", "(", "imgpath", ")", "\n", "gt_paths", ".", "append", "(", "gtpath", ")", "\n", "inst_maps", ".", "append", "(", "inst_map", ")", "\n", "insts_data_json", ".", "append", "(", "inst_data_json", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "'cannot find the mask:'", ",", "gtpath", ")", "\n", "", "", "", "return", "img_paths", ",", "gt_paths", ",", "inst_maps", ",", "insts_data_json", "\n", "\n", "", "if", "split", "==", "'train'", ":", "\n", "        ", "split_f", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'train.txt'", ")", "\n", "img_paths", ",", "mask_paths", ",", "inst_maps", ",", "inst_data_json", "=", "get_path_tuples", "(", "folder", ",", "split_f", ",", "use_bbox", ",", "\"train\"", ",", "100000", ")", "\n", "", "elif", "split", "==", "'test'", ":", "\n", "        ", "split_f", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'val.txt'", ")", "\n", "img_paths", ",", "mask_paths", ",", "inst_maps", ",", "inst_data_json", "=", "get_path_tuples", "(", "folder", ",", "split_f", ",", "use_bbox", ",", "\"val\"", ",", "how_many", ")", "\n", "", "else", ":", "\n", "        ", "split_f", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'trainval.txt'", ")", "\n", "img_paths", ",", "mask_paths", ",", "inst_maps", ",", "inst_data_json", "=", "get_path_tuples", "(", "folder", ",", "split_f", ",", "use_bbox", ")", "\n", "\n", "", "return", "img_paths", ",", "mask_paths", ",", "inst_maps", ",", "inst_data_json", "", "", ""]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.datasets.cityscapes.CityscapesSegmentation.__init__": [[24, 59], ["base.BaseDataset.__init__", "os.path.join", "os.path.exists", "cityscapes._get_cityscapes_tuple", "len", "RuntimeError", "len", "len"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.datasets.cityscapes._get_cityscapes_tuple"], ["def", "__init__", "(", "self", ",", "root", "=", "'../datasets'", ",", "split", "=", "'train'", ",", "\n", "mode", "=", "None", ",", "transform", "=", "None", ",", "crop_type", "=", "\"random\"", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CityscapesSegmentation", ",", "self", ")", ".", "__init__", "(", "\n", "root", ",", "split", ",", "mode", ",", "transform", ",", "**", "kwargs", ")", "\n", "# assert exists", "\n", "root", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "BASE_DIR", ")", "\n", "if", "self", ".", "opt", ".", "label_nc", "==", "8", ":", "\n", "            ", "self", ".", "ch_to_inst_id", "=", "{", "\"5\"", ":", "\"24\"", ",", "\"6\"", ":", "\"26\"", "}", "\n", "self", ".", "param_obj", "=", "{", "\"24\"", ":", "[", "0.25", ",", "50", ",", "10", ",", "4", ",", "0.4", "]", ",", "\n", "\"26\"", ":", "[", "0.4", ",", "50", ",", "20", ",", "6", ",", "0.5", "]", "}", "\n", "", "elif", "self", ".", "opt", ".", "label_nc", "==", "17", ":", "\n", "            ", "self", ".", "ch_to_inst_id", "=", "{", "\"8\"", ":", "\"24\"", ",", "\"9\"", ":", "\"25\"", ",", "\"10\"", ":", "\"26\"", ",", "\"11\"", ":", "\"27\"", ",", "\"12\"", ":", "\"28\"", ",", "\"13\"", ":", "\"31\"", ",", "\"14\"", ":", "\"32\"", ",", "\"15\"", ":", "\"33\"", "}", "\n", "self", ".", "param_obj", "=", "{", "\"24\"", ":", "[", "0.25", ",", "50", ",", "10", ",", "4", ",", "0.3", "]", ",", "\n", "\"25\"", ":", "[", "0.1", ",", "50", ",", "10", ",", "10", ",", "0.10", "]", ",", "\n", "\"26\"", ":", "[", "0.6", ",", "40", ",", "10", ",", "1.5", ",", "0.70", "]", ",", "\n", "\"27\"", ":", "[", "0.5", ",", "30", ",", "10", ",", "3", ",", "0.4", "]", ",", "\n", "\"28\"", ":", "[", "0.5", ",", "50", ",", "20", ",", "6", ",", "0.5", "]", ",", "\n", "\"31\"", ":", "[", "0.5", ",", "50", ",", "20", ",", "6", ",", "0.5", "]", ",", "\n", "\"32\"", ":", "[", "0.20", ",", "50", ",", "10", ",", "6", ",", "0.25", "]", ",", "\n", "\"33\"", ":", "[", "0.20", ",", "50", ",", "10", ",", "6", ",", "0.25", "]", ",", "\n", "}", "\n", "", "self", ".", "use_bbox", "=", "False", "\n", "self", ".", "idx_valid_ins", "=", "-", "1", "\n", "assert", "os", ".", "path", ".", "exists", "(", "root", ")", ",", "\"Please download the dataset!!\"", "\n", "self", ".", "classes_of_interest_ids", "=", "self", ".", "opt", ".", "classes_of_interest_ids", "\n", "self", ".", "use_bbox", "=", "self", ".", "opt", ".", "use_bbox", "\n", "self", ".", "crop_type", "=", "crop_type", "\n", "self", ".", "images", ",", "self", ".", "gts", ",", "self", ".", "inst_maps", ",", "self", ".", "inst_data_json", "=", "_get_cityscapes_tuple", "(", "root", ",", "split", ",", "self", ".", "use_bbox", ",", "self", ".", "opt", ".", "fineTuning", ")", "\n", "if", "split", "!=", "'vis'", ":", "\n", "            ", "assert", "(", "len", "(", "self", ".", "images", ")", "==", "len", "(", "self", ".", "gts", ")", ")", "\n", "", "if", "len", "(", "self", ".", "images", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 images in subfolders of: \\\n                \"", "+", "root", "+", "\"\\n\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.datasets.cityscapes.CityscapesSegmentation.__getitem__": [[60, 141], ["PIL.Image.open().convert", "PIL.Image.open", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose.", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "cityscapes.CityscapesSegmentation.get_test_item", "cityscapes.CityscapesSegmentation.transpose", "PIL.Image.open", "json.load", "torchvision.crop.transpose", "cityscapes.CityscapesSegmentation.get_crop_params", "torchvision.crop", "torchvision.crop", "torchvision.crop", "torchvision.crop", "cityscapes.CityscapesSegmentation.transform", "cityscapes.CityscapesSegmentation.inst_map_transform", "utils._random_mask_with_instance_cond", "utils.inst_map2bbox", "utils._random_mask", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "numpy.random.uniform", "PIL.Image.open", "open", "torchvision.crop.transpose", "cityscapes.CityscapesSegmentation.check_instance", "torchvision.crop", "torchvision.crop", "cityscapes.CityscapesSegmentation.check_instance", "numpy.random.uniform", "cityscapes.CityscapesSegmentation.gt_transform", "numpy.array", "torchvision.ToTensor", "torchvision.ToTensor", "range"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.datasets.cityscapes.CityscapesSegmentation.get_test_item", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.configuration.load", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.datasets.cityscapes.CityscapesSegmentation.get_crop_params", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util._random_mask_with_instance_cond", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.inst_map2bbox", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util._random_mask", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.datasets.cityscapes.CityscapesSegmentation.check_instance", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.datasets.cityscapes.CityscapesSegmentation.check_instance"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "\"test\"", ":", "\n", "            ", "outputs", "=", "self", ".", "get_test_item", "(", "index", ")", "\n", "return", "outputs", "\n", "", "outputs", "=", "{", "}", "\n", "flip", "=", "False", "\n", "crop", "=", "True", "if", "self", ".", "opt", ".", "size_crop_height", "is", "not", "None", "and", "self", ".", "opt", ".", "size_crop_width", "is", "not", "None", "else", "False", "\n", "\"\"\"resize_img = transform.Resize((self.opt.image_height,\n                                       self.opt.image_width),\n                                      Image.BICUBIC)\n        resize_gt_inst = transform.Resize((self.opt.image_height,\n                                           self.opt.image_width),\n                                          Image.NEAREST)\"\"\"", "\n", "if", "(", "not", "self", ".", "opt", ".", "no_flip", ")", "and", "np", ".", "random", ".", "uniform", "(", ")", "<", "0.5", "and", "self", ".", "split", "==", "\"train\"", ":", "\n", "            ", "flip", "=", "True", "\n", "", "img", "=", "Image", ".", "open", "(", "self", ".", "images", "[", "index", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "flip", ":", "\n", "            ", "img", "=", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "\n", "#img = resize_img(img)", "\n", "", "if", "self", ".", "use_bbox", ":", "\n", "            ", "inst_map", "=", "Image", ".", "open", "(", "self", ".", "inst_maps", "[", "index", "]", ")", "\n", "json_data", "=", "json", ".", "load", "(", "open", "(", "self", ".", "inst_data_json", "[", "index", "]", ")", ")", "\n", "if", "flip", ":", "\n", "                ", "inst_map", "=", "inst_map", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "#inst_map = resize_gt_inst(inst_map)", "\n", "\n", "", "", "gt", "=", "Image", ".", "open", "(", "self", ".", "gts", "[", "index", "]", ")", "\n", "if", "flip", ":", "\n", "            ", "gt", "=", "gt", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "\n", "#gt = resize_gt_inst(gt)", "\n", "", "if", "crop", ":", "\n", "\n", "            ", "i", ",", "j", ",", "h", ",", "w", "=", "self", ".", "get_crop_params", "(", ")", "\n", "if", "self", ".", "use_bbox", ":", "\n", "                ", "self", ".", "idx_valid_ins", "=", "self", ".", "check_instance", "(", "inst_map", ",", "gt", ",", "False", ",", "[", "i", ",", "j", ",", "h", ",", "w", "]", ",", "json_data", ",", "flip", "=", "flip", ")", "\n", "", "img", "=", "TF", ".", "crop", "(", "img", ",", "i", ",", "j", ",", "h", ",", "w", ")", "\n", "gt", "=", "TF", ".", "crop", "(", "gt", ",", "i", ",", "j", ",", "h", ",", "w", ")", "\n", "if", "self", ".", "use_bbox", ":", "\n", "                ", "inst_map", "=", "TF", ".", "crop", "(", "inst_map", ",", "i", ",", "j", ",", "h", ",", "w", ")", "\n", "", "", "elif", "self", ".", "use_bbox", ":", "\n", "            ", "self", ".", "idx_valid_ins", "=", "self", ".", "check_instance", "(", "inst_map", ",", "gt", ",", "False", ",", "json_data", "=", "json_data", ",", "flip", "=", "flip", ")", "\n", "\n", "", "self", ".", "idx_valid_ins", "=", "self", ".", "idx_valid_ins", "if", "np", ".", "random", ".", "uniform", "(", ")", ">=", "self", ".", "opt", ".", "prob_bg", "else", "-", "1", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "if", "self", ".", "gt_transform", "is", "not", "None", ":", "\n", "            ", "gt", "=", "self", ".", "gt_transform", "(", "gt", ")", "*", "255", "\n", "", "if", "self", ".", "inst_map_transform", "is", "not", "None", "and", "self", ".", "use_bbox", ":", "\n", "            ", "inst_map", "=", "inst_map_complete", "=", "self", ".", "inst_map_transform", "(", "np", ".", "array", "(", "inst_map", ")", ")", "\n", "", "if", "self", ".", "idx_valid_ins", "!=", "-", "1", ":", "\n", "            ", "masks", ",", "indexes", "=", "util", ".", "_random_mask_with_instance_cond", "(", "\n", "img", ".", "shape", "[", "1", ":", "]", ",", "self", ".", "opt", ".", "min_hole_size", ",", "\n", "self", ".", "opt", ".", "max_hole_size", ",", "(", "inst_map", "==", "self", ".", "idx_valid_ins", ")", "*", "1.0", ",", "None", ")", "\n", "insta_maps_bbox", ",", "inst_map_compact", ",", "theta", "=", "util", ".", "inst_map2bbox", "(", "\n", "(", "inst_map", "==", "self", ".", "idx_valid_ins", ")", "*", "1.0", ",", "self", ".", "opt", ")", "\n", "\n", "", "else", ":", "\n", "            ", "masks", ",", "indexes", "=", "util", ".", "_random_mask", "(", "img", ".", "shape", "[", "1", ":", "]", ",", "\n", "self", ".", "opt", ".", "min_hole_size", ",", "\n", "self", ".", "opt", ".", "max_hole_size", ")", "\n", "inst_map", "=", "insta_maps_bbox", "=", "inst_map_complete", "=", "torch", ".", "zeros", "(", "1", ",", "img", ".", "shape", "[", "1", "]", ",", "img", ".", "shape", "[", "2", "]", ")", "\n", "inst_map_compact", "=", "torch", ".", "zeros", "(", "1", ",", "self", ".", "opt", ".", "compact_sizey", ",", "self", ".", "opt", ".", "compact_sizex", ")", "\n", "theta", "=", "torch", ".", "Tensor", "(", "[", "0", "for", "_", "in", "range", "(", "6", ")", "]", ")", "\n", "", "mask_transform", "=", "transform", ".", "Compose", "(", "[", "\n", "transform", ".", "ToTensor", "(", ")", "]", ")", "\n", "outputs", "[", "\"gt_images\"", "]", "=", "img", "\n", "outputs", "[", "\"gt_seg_maps\"", "]", "=", "gt", "\n", "outputs", "[", "\"inst_map\"", "]", "=", "(", "inst_map", "==", "self", ".", "idx_valid_ins", ")", "*", "1.0", "if", "self", ".", "use_bbox", "else", "inst_map", "\n", "outputs", "[", "\"inst_map_valid_idx\"", "]", "=", "self", ".", "idx_valid_ins", "\n", "outputs", "[", "\"images_path\"", "]", "=", "self", ".", "images", "[", "index", "]", "\n", "outputs", "[", "\"masks\"", "]", "=", "mask_transform", "(", "masks", ")", "\n", "outputs", "[", "\"indexes\"", "]", "=", "torch", ".", "Tensor", "(", "indexes", ")", "\n", "outputs", "[", "\"insta_maps_bbox\"", "]", "=", "insta_maps_bbox", "\n", "outputs", "[", "\"inst_map_compact\"", "]", "=", "inst_map_compact", "\n", "outputs", "[", "\"theta\"", "]", "=", "theta", "\n", "outputs", "[", "\"compute_instance\"", "]", "=", "torch", ".", "Tensor", "(", "[", "1", "]", ")", "if", "self", ".", "idx_valid_ins", "!=", "-", "1", "else", "torch", ".", "Tensor", "(", "[", "0", "]", ")", "\n", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.datasets.cityscapes.CityscapesSegmentation.get_test_item": [[142, 231], ["PIL.Image.open().convert", "PIL.Image.open", "torchvision.Compose", "torchvision.Compose", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "PIL.Image.open", "json.load", "cityscapes.CityscapesSegmentation.get_crop_params", "torchvision.crop", "torchvision.crop", "torchvision.crop", "torchvision.crop", "cityscapes.CityscapesSegmentation.inst_map_transform", "cityscapes.CityscapesSegmentation.transform", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "PIL.Image.open", "open", "utils.load_masks_data", "cityscapes.CityscapesSegmentation.check_instance_with_masks_and_crop", "torchvision.crop", "torchvision.crop", "utils.load_masks_data", "cityscapes.CityscapesSegmentation.check_instance_with_masks_and_crop", "cityscapes.CityscapesSegmentation.gt_transform", "numpy.random.uniform", "utils.inst_map2bbox", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "utils._random_mask_with_instance_cond", "utils.inst_map2bbox", "utils._random_mask", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torchvision.ToTensor", "torchvision.ToTensor", "range", "range"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.configuration.load", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.datasets.cityscapes.CityscapesSegmentation.get_crop_params", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.load_masks_data", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.datasets.cityscapes.CityscapesSegmentation.check_instance_with_masks_and_crop", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.load_masks_data", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.datasets.cityscapes.CityscapesSegmentation.check_instance_with_masks_and_crop", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.inst_map2bbox", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util._random_mask_with_instance_cond", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.inst_map2bbox", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util._random_mask"], ["", "def", "get_test_item", "(", "self", ",", "index", ")", ":", "\n", "        ", "outputs", "=", "{", "}", "\n", "flip", "=", "False", "\n", "crop", "=", "True", "if", "self", ".", "opt", ".", "size_crop_height", "is", "not", "None", "and", "self", ".", "opt", ".", "size_crop_width", "is", "not", "None", "else", "False", "\n", "\n", "img", "=", "Image", ".", "open", "(", "self", ".", "images", "[", "index", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "self", ".", "use_bbox", ":", "\n", "            ", "inst_map", "=", "Image", ".", "open", "(", "self", ".", "inst_maps", "[", "index", "]", ")", "\n", "json_data", "=", "json", ".", "load", "(", "open", "(", "self", ".", "inst_data_json", "[", "index", "]", ")", ")", "\n", "\n", "", "gt", "=", "Image", ".", "open", "(", "self", ".", "gts", "[", "index", "]", ")", "\n", "i", ",", "j", ",", "h", ",", "w", "=", "0", ",", "0", ",", "self", ".", "opt", ".", "image_height", ",", "self", ".", "opt", ".", "image_width", "\n", "if", "crop", ":", "\n", "            ", "i", ",", "j", ",", "h", ",", "w", "=", "self", ".", "get_crop_params", "(", ")", "\n", "if", "self", ".", "opt", ".", "use_load_mask", ":", "\n", "                ", "masks", ",", "indexes", "=", "util", ".", "load_masks_data", "(", "self", ".", "opt", ")", "\n", "", "if", "self", ".", "use_bbox", ":", "\n", "                ", "self", ".", "idx_valid_ins", "=", "self", ".", "check_instance_with_masks_and_crop", "(", "\n", "inst_map", ",", "gt", ",", "True", ",", "(", "\n", "indexes", "[", "index", "]", "if", "self", ".", "opt", ".", "use_load_mask", "else", "[", "0", ",", "self", ".", "opt", ".", "size_crop_height", ",", "\n", "0", ",", "self", ".", "opt", ".", "size_crop_width", "]", ")", ",", "\n", "[", "i", ",", "j", ",", "h", ",", "w", "]", ",", "json_data", ",", "False", ")", "\n", "", "img", "=", "TF", ".", "crop", "(", "img", ",", "i", ",", "j", ",", "h", ",", "w", ")", "\n", "gt", "=", "TF", ".", "crop", "(", "gt", ",", "i", ",", "j", ",", "h", ",", "w", ")", "\n", "if", "self", ".", "use_bbox", ":", "\n", "                ", "inst_map", "=", "TF", ".", "crop", "(", "inst_map", ",", "i", ",", "j", ",", "h", ",", "w", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "opt", ".", "use_load_mask", ":", "\n", "                ", "masks", ",", "indexes", "=", "util", ".", "load_masks_data", "(", "self", ".", "opt", ")", "\n", "", "if", "self", ".", "use_bbox", ":", "\n", "                ", "self", ".", "idx_valid_ins", "=", "self", ".", "check_instance_with_masks_and_crop", "(", "\n", "inst_map", ",", "gt", ",", "True", ",", "(", "\n", "indexes", "[", "index", "]", "if", "self", ".", "opt", ".", "use_load_mask", "else", "[", "0", ",", "256", ",", "\n", "0", ",", "256", "]", ")", ",", "\n", "[", "i", ",", "j", ",", "h", ",", "w", "]", ",", "json_data", ",", "False", ")", "\n", "", "", "if", "self", ".", "gt_transform", "is", "not", "None", ":", "\n", "            ", "gt", "=", "self", ".", "gt_transform", "(", "gt", ")", "*", "255", "\n", "", "if", "self", ".", "inst_map_transform", "is", "not", "None", "and", "self", ".", "use_bbox", ":", "\n", "            ", "inst_map", "=", "inst_map_complete", "=", "self", ".", "inst_map_transform", "(", "inst_map", ")", "\n", "", "self", ".", "idx_valid_ins", "=", "self", ".", "idx_valid_ins", "if", "np", ".", "random", ".", "uniform", "(", ")", ">=", "self", ".", "opt", ".", "prob_bg", "else", "-", "1", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "if", "self", ".", "opt", ".", "use_load_mask", ":", "\n", "            ", "if", "self", ".", "idx_valid_ins", "!=", "-", "1", ":", "\n", "                ", "insta_maps_bbox", ",", "inst_map_compact", ",", "theta", "=", "util", ".", "inst_map2bbox", "(", "\n", "(", "inst_map", "==", "self", ".", "idx_valid_ins", ")", "*", "1.0", ",", "self", ".", "opt", ")", "\n", "", "else", ":", "\n", "                ", "inst_map", "=", "insta_maps_bbox", "=", "torch", ".", "zeros", "(", "1", ",", "img", ".", "shape", "[", "1", "]", ",", "\n", "img", ".", "shape", "[", "2", "]", ")", "\n", "inst_map_compact", "=", "torch", ".", "zeros", "(", "1", ",", "self", ".", "opt", ".", "compact_sizey", ",", "\n", "self", ".", "opt", ".", "compact_sizex", ")", "\n", "theta", "=", "torch", ".", "Tensor", "(", "[", "0", "for", "_", "in", "range", "(", "6", ")", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "idx_valid_ins", "!=", "-", "1", ":", "\n", "                ", "masks", ",", "indexes", "=", "util", ".", "_random_mask_with_instance_cond", "(", "\n", "img", ".", "shape", "[", "1", ":", "]", ",", "self", ".", "opt", ".", "min_hole_size", ",", "\n", "self", ".", "opt", ".", "max_hole_size", ",", "\n", "(", "inst_map", "==", "self", ".", "idx_valid_ins", ")", "*", "1.0", ",", "index", ")", "\n", "insta_maps_bbox", ",", "inst_map_compact", ",", "theta", "=", "util", ".", "inst_map2bbox", "(", "\n", "(", "inst_map", "==", "self", ".", "idx_valid_ins", ")", "*", "1.0", ",", "self", ".", "opt", ")", "\n", "\n", "", "else", ":", "\n", "                ", "masks", ",", "indexes", "=", "util", ".", "_random_mask", "(", "img", ".", "shape", "[", "1", ":", "]", ",", "\n", "self", ".", "opt", ".", "min_hole_size", ",", "\n", "self", ".", "opt", ".", "max_hole_size", ",", "True", ")", "\n", "inst_map", "=", "insta_maps_bbox", "=", "torch", ".", "zeros", "(", "1", ",", "img", ".", "shape", "[", "1", "]", ",", "\n", "img", ".", "shape", "[", "2", "]", ")", "\n", "inst_map_compact", "=", "torch", ".", "zeros", "(", "1", ",", "self", ".", "opt", ".", "compact_sizey", ",", "\n", "self", ".", "opt", ".", "compact_sizex", ")", "\n", "theta", "=", "torch", ".", "Tensor", "(", "[", "0", "for", "_", "in", "range", "(", "6", ")", "]", ")", "\n", "", "", "mask_transform", "=", "transform", ".", "Compose", "(", "[", "\n", "transform", ".", "ToTensor", "(", ")", "]", ")", "\n", "outputs", "[", "\"gt_images\"", "]", "=", "img", "\n", "outputs", "[", "\"gt_seg_maps\"", "]", "=", "gt", "\n", "outputs", "[", "\"inst_map\"", "]", "=", "(", "\n", "inst_map", "==", "self", ".", "idx_valid_ins", ")", "*", "1.0", "if", "self", ".", "use_bbox", "else", "inst_map", "\n", "outputs", "[", "\"inst_map_complete\"", "]", "=", "inst_map_complete", "\n", "outputs", "[", "\"inst_map_valid_idx\"", "]", "=", "self", ".", "idx_valid_ins", "\n", "outputs", "[", "\"images_path\"", "]", "=", "self", ".", "images", "[", "index", "]", "\n", "outputs", "[", "\"masks\"", "]", "=", "insta_maps_bbox", "\n", "outputs", "[", "\"indexes\"", "]", "=", "torch", ".", "Tensor", "(", "\n", "(", "indexes", "[", "index", "]", "if", "self", ".", "opt", ".", "use_load_mask", "else", "indexes", ")", ")", "\n", "outputs", "[", "\"insta_maps_bbox\"", "]", "=", "insta_maps_bbox", "\n", "outputs", "[", "\"inst_map_compact\"", "]", "=", "inst_map_compact", "\n", "outputs", "[", "\"theta\"", "]", "=", "theta", "\n", "outputs", "[", "\"compute_instance\"", "]", "=", "torch", ".", "Tensor", "(", "\n", "[", "1", "]", ")", "if", "self", ".", "idx_valid_ins", "!=", "-", "1", "else", "torch", ".", "Tensor", "(", "[", "0", "]", ")", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.datasets.cityscapes.CityscapesSegmentation.get_crop_params": [[233, 243], ["numpy.random.choice"], "methods", ["None"], ["", "def", "get_crop_params", "(", "self", ")", ":", "\n", "        ", "crop_type", "=", "np", ".", "random", ".", "choice", "(", "[", "\"left\"", ",", "\"center\"", ",", "\"right\"", "]", ")", "\n", "if", "self", ".", "crop_type", "!=", "\"random\"", ":", "\n", "            ", "crop_type", "=", "self", ".", "crop_type", "\n", "", "if", "crop_type", "==", "\"left\"", ":", "\n", "            ", "return", "0", ",", "0", ",", "self", ".", "opt", ".", "size_crop_width", ",", "self", ".", "opt", ".", "size_crop_width", "\n", "", "elif", "crop_type", "==", "\"right\"", ":", "\n", "            ", "return", "0", ",", "self", ".", "opt", ".", "size_crop_width", ",", "self", ".", "opt", ".", "size_crop_height", ",", "self", ".", "opt", ".", "size_crop_width", "\n", "", "else", ":", "\n", "            ", "return", "0", ",", "self", ".", "opt", ".", "size_crop_width", "/", "2", ",", "self", ".", "opt", ".", "size_crop_height", ",", "self", ".", "opt", ".", "size_crop_width", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.datasets.cityscapes.CityscapesSegmentation.check_instance": [[244, 285], ["cityscapes.CityscapesSegmentation.inst_map_transform", "json_load.items", "numpy.array", "cityscapes.CityscapesSegmentation.gt_transform", "int", "len", "json_load.items", "int", "numpy.random.choice", "utils.instInCrop", "utils.instInCrop", "idx_valid_ins.append", "len", "len", "str", "list", "numpy.float", "cityscapes.CityscapesSegmentation.ch_to_inst_id.values", "str", "str", "str", "str", "str", "cityscapes.CityscapesSegmentation.size", "cityscapes.CityscapesSegmentation.size"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.instInCrop", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.instInCrop", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size"], ["", "", "def", "check_instance", "(", "self", ",", "inst", ",", "gt", ",", "test", "=", "False", ",", "crop_indexes", "=", "[", "0", ",", "128", ",", "256", ",", "256", "]", ",", "json_load", "=", "[", "]", ",", "flip", "=", "False", ")", ":", "\n", "        ", "instance_idx", "=", "[", "]", "\n", "idx_valid_ins", "=", "[", "]", "\n", "inst", "=", "self", ".", "inst_map_transform", "(", "np", ".", "array", "(", "inst", ")", ")", "\n", "gt", "=", "self", ".", "gt_transform", "(", "gt", ")", "*", "255", "\n", "contained_idx", "=", "[", "]", "\n", "contained_idx", "=", "[", "int", "(", "obj_id", ")", "for", "obj_id", ",", "obj", "in", "json_load", ".", "items", "(", ")", "if", "obj", "[", "\"train_id\"", "]", "in", "self", ".", "classes_of_interest_ids", "and", "str", "(", "obj", "[", "\"class_id\"", "]", ")", "in", "list", "(", "self", ".", "ch_to_inst_id", ".", "values", "(", ")", ")", "]", "\n", "if", "len", "(", "contained_idx", ")", "==", "0", ":", "\n", "            ", "return", "-", "1", "\n", "", "for", "obj_id", ",", "obj", "in", "json_load", ".", "items", "(", ")", ":", "\n", "            ", "if", "int", "(", "obj_id", ")", "not", "in", "contained_idx", ":", "\n", "                ", "continue", "\n", "", "min_size_percent", "=", "self", ".", "param_obj", "[", "str", "(", "obj_id", ")", "[", ":", "2", "]", "]", "[", "0", "]", "\n", "max_width_ratio", "=", "self", ".", "param_obj", "[", "str", "(", "obj_id", ")", "[", ":", "2", "]", "]", "[", "1", "]", "\n", "max_height_ratio", "=", "self", ".", "param_obj", "[", "str", "(", "obj_id", ")", "[", ":", "2", "]", "]", "[", "2", "]", "\n", "max_aspect_ratio", "=", "self", ".", "param_obj", "[", "str", "(", "obj_id", ")", "[", ":", "2", "]", "]", "[", "3", "]", "\n", "min_area_ratio", "=", "self", ".", "param_obj", "[", "str", "(", "obj_id", ")", "[", ":", "2", "]", "]", "[", "4", "]", "\n", "if", "obj", "[", "\"area\"", "]", ">", "(", "\n", "inst", ".", "size", "(", ")", "[", "1", "]", "*", "inst", ".", "size", "(", ")", "[", "2", "]", "*", "min_size_percent", "/", "100", ")", ":", "\n", "                ", "height", "=", "obj", "[", "\"height\"", "]", "\n", "width", "=", "obj", "[", "\"width\"", "]", "\n", "area_ratio", "=", "obj", "[", "\"area_ratio\"", "]", "\n", "\n", "width_ratio", "=", "obj", "[", "\"width_ratio\"", "]", "\n", "height_ratio", "=", "obj", "[", "\"height_ratio\"", "]", "\n", "aspect_ratio", "=", "obj", "[", "\"aspect_ratio\"", "]", "\n", "bbox", "=", "obj", "[", "\"bbox\"", "]", "\n", "if", "flip", "==", "True", ":", "\n", "                    ", "bbox", "=", "[", "bbox", "[", "0", "]", ",", "self", ".", "opt", ".", "image_width", "-", "1", "-", "bbox", "[", "3", "]", ",", "bbox", "[", "2", "]", ",", "\n", "self", ".", "opt", ".", "image_width", "-", "1", "-", "bbox", "[", "1", "]", "]", "\n", "\n", "", "if", "obj", "[", "\"occlusion\"", "]", "is", "False", "and", "width_ratio", "<", "max_width_ratio", "and", "height_ratio", "<", "max_height_ratio", "and", "area_ratio", ">", "min_area_ratio", "and", "aspect_ratio", "<", "max_aspect_ratio", "and", "height", "<=", "self", ".", "opt", ".", "max_hole_size", "and", "width", "<=", "self", ".", "opt", ".", "max_hole_size", "and", "util", ".", "instInCrop", "(", "bbox", ",", "crop_indexes", ",", "0", ")", "and", "util", ".", "instInCrop", "(", "bbox", ",", "[", "0", ",", "0", ",", "self", ".", "opt", ".", "image_height", ",", "self", ".", "opt", ".", "image_width", "]", ",", "20", ")", ":", "\n", "                    ", "idx_valid_ins", ".", "append", "(", "np", ".", "float", "(", "obj_id", ")", ")", "\n", "", "", "", "if", "test", "==", "False", ":", "\n", "            ", "return", "np", ".", "random", ".", "choice", "(", "idx_valid_ins", ")", "if", "len", "(", "idx_valid_ins", ")", ">", "0", "else", "-", "1", "\n", "", "else", ":", "\n", "            ", "return", "idx_valid_ins", "if", "len", "(", "\n", "idx_valid_ins", ")", ">", "0", "else", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.datasets.cityscapes.CityscapesSegmentation.check_instance_with_masks_and_crop": [[286, 333], ["cityscapes.CityscapesSegmentation.inst_map_transform", "json_load.items", "cityscapes.CityscapesSegmentation.gt_transform", "int", "len", "json_load.items", "int", "numpy.random.choice", "utils.instInMap", "utils.instInCrop", "utils.instInCrop", "idx_valid_ins.append", "areas.append", "len", "len", "str", "list", "numpy.float", "numpy.argmax", "cityscapes.CityscapesSegmentation.ch_to_inst_id.values", "str", "str", "str", "str", "str", "cityscapes.CityscapesSegmentation.size", "cityscapes.CityscapesSegmentation.size"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.instInMap", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.instInCrop", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.instInCrop", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size"], ["", "", "def", "check_instance_with_masks_and_crop", "(", "self", ",", "inst", ",", "gt", ",", "test", "=", "False", ",", "\n", "indexes", "=", "[", "]", ",", "crop_indexes", "=", "[", "]", ",", "json_load", "=", "[", "]", ",", "flip", "=", "False", ")", ":", "\n", "        ", "instance_idx", "=", "[", "]", "\n", "idx_valid_ins", "=", "[", "]", "\n", "inst", "=", "self", ".", "inst_map_transform", "(", "inst", ")", "\n", "gt", "=", "self", ".", "gt_transform", "(", "gt", ")", "*", "255", "\n", "contained_idx", "=", "[", "]", "\n", "areas", "=", "[", "]", "\n", "contained_idx", "=", "[", "int", "(", "obj_id", ")", "for", "obj_id", ",", "obj", "in", "json_load", ".", "items", "(", ")", "if", "obj", "[", "\"train_id\"", "]", "in", "self", ".", "classes_of_interest_ids", "and", "str", "(", "obj", "[", "\"class_id\"", "]", ")", "in", "list", "(", "self", ".", "ch_to_inst_id", ".", "values", "(", ")", ")", "]", "\n", "if", "len", "(", "contained_idx", ")", "==", "0", ":", "\n", "            ", "return", "-", "1", "\n", "", "for", "obj_id", ",", "obj", "in", "json_load", ".", "items", "(", ")", ":", "\n", "            ", "if", "int", "(", "obj_id", ")", "not", "in", "contained_idx", ":", "\n", "                ", "continue", "\n", "", "min_size_percent", "=", "self", ".", "param_obj", "[", "str", "(", "obj_id", ")", "[", ":", "2", "]", "]", "[", "0", "]", "\n", "max_width_ratio", "=", "self", ".", "param_obj", "[", "str", "(", "obj_id", ")", "[", ":", "2", "]", "]", "[", "1", "]", "\n", "max_height_ratio", "=", "self", ".", "param_obj", "[", "str", "(", "obj_id", ")", "[", ":", "2", "]", "]", "[", "2", "]", "\n", "max_aspect_ratio", "=", "self", ".", "param_obj", "[", "str", "(", "obj_id", ")", "[", ":", "2", "]", "]", "[", "3", "]", "\n", "min_area_ratio", "=", "self", ".", "param_obj", "[", "str", "(", "obj_id", ")", "[", ":", "2", "]", "]", "[", "4", "]", "\n", "if", "obj", "[", "\"area\"", "]", ">", "(", "\n", "inst", ".", "size", "(", ")", "[", "1", "]", "*", "inst", ".", "size", "(", ")", "[", "2", "]", "*", "min_size_percent", "/", "100", ")", ":", "\n", "                ", "height", "=", "obj", "[", "\"height\"", "]", "\n", "width", "=", "obj", "[", "\"width\"", "]", "\n", "area_ratio", "=", "obj", "[", "\"area_ratio\"", "]", "\n", "\n", "width_ratio", "=", "obj", "[", "\"width_ratio\"", "]", "\n", "height_ratio", "=", "obj", "[", "\"height_ratio\"", "]", "\n", "aspect_ratio", "=", "obj", "[", "\"aspect_ratio\"", "]", "\n", "bbox", "=", "obj", "[", "\"bbox\"", "]", "\n", "if", "flip", "==", "True", ":", "\n", "                    ", "bbox", "=", "[", "bbox", "[", "0", "]", ",", "self", ".", "opt", ".", "image_width", "-", "1", "-", "bbox", "[", "3", "]", ",", "\n", "bbox", "[", "2", "]", ",", "\n", "self", ".", "opt", ".", "image_width", "-", "1", "-", "bbox", "[", "1", "]", "]", "\n", "\n", "", "if", "obj", "[", "\"occlusion\"", "]", "is", "False", "and", "width_ratio", "<", "max_width_ratio", "and", "height_ratio", "<", "max_height_ratio", "and", "area_ratio", ">", "min_area_ratio", "and", "aspect_ratio", "<", "max_aspect_ratio", "and", "height", "<=", "self", ".", "opt", ".", "max_hole_size", "and", "width", "<=", "self", ".", "opt", ".", "max_hole_size", "and", "util", ".", "instInMap", "(", "\n", "bbox", ",", "indexes", ",", "crop_indexes", ")", "and", "util", ".", "instInCrop", "(", "bbox", ",", "crop_indexes", ",", "0", ")", "and", "util", ".", "instInCrop", "(", "bbox", ",", "[", "0", ",", "0", ",", "self", ".", "opt", ".", "image_height", ",", "self", ".", "opt", ".", "image_width", "]", ",", "20", ")", ":", "\n", "                    ", "idx_valid_ins", ".", "append", "(", "np", ".", "float", "(", "obj_id", ")", ")", "\n", "areas", ".", "append", "(", "obj", "[", "\"area\"", "]", ")", "\n", "", "", "", "if", "test", "==", "False", ":", "\n", "            ", "return", "np", ".", "random", ".", "choice", "(", "idx_valid_ins", ")", "if", "len", "(", "\n", "idx_valid_ins", ")", ">", "0", "else", "-", "1", "\n", "", "else", ":", "\n", "            ", "return", "idx_valid_ins", "[", "np", ".", "argmax", "(", "areas", ")", "]", "if", "len", "(", "\n", "idx_valid_ins", ")", ">", "0", "else", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.datasets.cityscapes.CityscapesSegmentation.__len__": [[335, 337], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.datasets.cityscapes.CityscapesSegmentation.pred_offset": [[338, 341], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "pred_offset", "(", "self", ")", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.datasets.cityscapes._get_cityscapes_tuple": [[348, 383], ["os.path.join", "cityscapes._get_cityscapes_tuple.get_path_tuples"], "function", ["None"], ["", "", "def", "_get_cityscapes_tuple", "(", "folder", ",", "split", "=", "'train'", ",", "use_bbox", "=", "False", ",", "fine_tutning", "=", "False", ")", ":", "\n", "    ", "def", "get_path_tuples", "(", "folder", ",", "split_f", ",", "use_bbox", ",", "split", ")", ":", "\n", "        ", "img_paths", "=", "[", "]", "\n", "gt_paths", "=", "[", "]", "\n", "inst_maps", "=", "[", "]", "\n", "insts_data_json", "=", "[", "]", "\n", "with", "open", "(", "split_f", ",", "'r'", ")", "as", "lines", ":", "\n", "            ", "for", "line", "in", "lines", ".", "read", "(", ")", ".", "splitlines", "(", ")", ":", "\n", "                ", "imgpath", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "f\"{split}_img\"", ",", "line", "+", "\"_leftImg8bit.png\"", ")", "\n", "gtpath", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "f\"{split}_label\"", ",", "line", "+", "\"_gtFine_trainIds.png\"", ")", "\n", "if", "use_bbox", ":", "\n", "                    ", "inst_map", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "f\"{split}_inst\"", ",", "line", "+", "\"_gtFine_instanceIds.png\"", ")", "\n", "inst_data_json", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "f\"{split}_inst\"", ",", "line", "+", "\"_gtFine_data.json\"", ")", "\n", "", "else", ":", "\n", "                    ", "inst_bbox", "=", "inst_map", "=", "inst_data_json", "=", "\"\"", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "gtpath", ")", ":", "\n", "                    ", "img_paths", ".", "append", "(", "imgpath", ")", "\n", "gt_paths", ".", "append", "(", "gtpath", ")", "\n", "inst_maps", ".", "append", "(", "inst_map", ")", "\n", "insts_data_json", ".", "append", "(", "inst_data_json", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "'cannot find the mask:'", ",", "gtpath", ")", "\n", "", "", "", "return", "img_paths", ",", "gt_paths", ",", "inst_maps", ",", "insts_data_json", "\n", "\n", "", "if", "split", "==", "'train'", ":", "\n", "        ", "split_f", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'train.txt'", ")", "\n", "img_paths", ",", "mask_paths", ",", "inst_maps", ",", "inst_data_json", "=", "get_path_tuples", "(", "folder", ",", "split_f", ",", "use_bbox", ",", "\"train\"", ")", "\n", "", "elif", "split", "==", "'test'", ":", "\n", "        ", "split_f", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'val.txt'", ")", "\n", "img_paths", ",", "mask_paths", ",", "inst_maps", ",", "inst_data_json", "=", "get_path_tuples", "(", "folder", ",", "split_f", ",", "use_bbox", ",", "\"val\"", ")", "\n", "", "else", ":", "\n", "        ", "split_f", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'trainval.txt'", ")", "\n", "img_paths", ",", "mask_paths", ",", "inst_maps", ",", "inst_data_json", "=", "get_path_tuples", "(", "folder", ",", "split_f", ",", "use_bbox", ")", "\n", "\n", "", "return", "img_paths", ",", "mask_paths", ",", "inst_maps", ",", "inst_data_json", "", "", ""]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.datasets.__init__.get_segmentation_dataset": [[11, 13], ["name.lower"], "function", ["None"], []], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.models.sgi_model.SGINetModel.name": [[50, 52], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'SGINetModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.models.sgi_model.SGINetModel.init_loss_filter": [[53, 66], ["zip", "zip"], "methods", ["None"], ["", "def", "init_loss_filter", "(", "self", ",", "use_gan_feat_loss", ",", "use_perceptual_loss", ",", "use_style_loss", ",", "gan_mode", ")", ":", "\n", "        ", "flags", "=", "(", "True", ",", "True", ",", "True", ",", "use_gan_feat_loss", ",", "True", ",", "True", ",", "use_perceptual_loss", ",", "use_style_loss", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ")", "\n", "if", "gan_mode", "==", "\"wgangp\"", ":", "\n", "            ", "def", "loss_filter", "(", "g_gan", ",", "g_gan_feat", ",", "g_image_rec", ",", "g_seg_map_rec", ",", "g_perceptual", ",", "g_style", ",", "d_loss", ",", "\n", "wgan_gp", ",", "d_real_obj", ",", "d_fake_obj", ",", "g_gan_obj", ")", ":", "\n", "                ", "return", "[", "l", "for", "(", "l", ",", "f", ")", "in", "\n", "zip", "(", "(", "g_gan", ",", "g_gan_feat", ",", "g_image_rec", ",", "g_seg_map_rec", ",", "g_perceptual", ",", "g_style", ",", "d_loss", ",", "\n", "wgan_gp", ",", "d_real_obj", ",", "d_fake_obj", ",", "g_gan_obj", ")", ",", "flags", ")", "if", "f", "]", "\n", "", "", "else", ":", "\n", "            ", "def", "loss_filter", "(", "g_gan", ",", "g_kl_inst", ",", "g_inst_rec", ",", "g_gan_feat", ",", "g_image_rec", ",", "g_seg_map_rec", ",", "g_perceptual", ",", "g_style", ",", "d_real", ",", "d_fake", ",", "d_real_obj", ",", "d_fake_obj", ",", "g_gan_obj", ")", ":", "\n", "                ", "return", "[", "l", "for", "(", "l", ",", "f", ")", "in", "\n", "zip", "(", "(", "g_gan", ",", "g_kl_inst", ",", "g_inst_rec", ",", "g_gan_feat", ",", "g_image_rec", ",", "g_seg_map_rec", ",", "g_perceptual", ",", "g_style", ",", "d_real", ",", "d_fake", ",", "d_real_obj", ",", "d_fake_obj", ",", "g_gan_obj", ")", ",", "flags", ")", "if", "f", "]", "\n", "", "", "return", "loss_filter", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.models.sgi_model.SGINetModel.__init__": [[67, 241], ["base_model.BaseModel.__init__", "os.path.join", "sgi_model.get_norm_layer", "sgi_model.get_activation_layer", "generators.sgi_net.SGINet", "print", "sgi_model.SGINetModel.netG.apply", "generators.sgi_net.Shape_Encoder", "generators.sgi_net.Shape_Decoder", "functions.base_function.STN_fixTheta", "len", "torch.cuda.is_available", "sgi_model.SGINetModel.netG.cuda", "sgi_model.SGINetModel.netG_shape_decoder.apply", "sgi_model.SGINetModel.netG_shape_encoder.apply", "torch.autograd.Variable().cuda", "torch.FloatTensor().zero_().to", "torch.autograd.Variable", "torch.autograd.Variable().cuda", "discriminators.multiscale_discriminator.MultiscaleDiscriminator", "sgi_model.SGINetModel.netD_global.apply", "print", "sgi_model.SGINetModel.load_network", "sgi_model.SGINetModel.init_loss_filter", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.MSELoss", "torch.nn.NLLLoss2d", "torch.nn.L1Loss", "sgi_model.SGINetModel.loss_filter", "list", "torch.optim.Adam", "list", "torch.optim.Adam", "len", "len", "sgi_model.SGINetModel.netG_shape_decoder.cuda", "sgi_model.SGINetModel.netG_shape_encoder.cuda", "sgi_model.SGINetModel.stn_fix.cuda", "sgi_model.SGINetModel.Tensor().fill_", "discriminators.discriminator_obj.DiscriminatorObj", "len", "torch.cuda.is_available", "sgi_model.SGINetModel.netD_global.cuda", "sgi_model.SGINetModel.netD_obj.apply", "sgi_model.SGINetModel.load_network", "sgi_model.SGINetModel.load_network", "sgi_model.SGINetModel.load_network", "len", "losses.losses.losses.GANLoss", "losses.losses.losses.GANLoss", "losses.losses.losses.GANLoss", "losses.losses.losses.GANLoss", "torch.optim.Adam", "sgi_model.SGINetModel.netG.parameters", "sgi_model.SGINetModel.netD_global.parameters", "list", "torch.optim.Adam", "torch.autograd.Variable", "enumerate", "sgi_model.SGINetModel.ch_to_index.items", "sgi_model.SGINetModel.ch_to_inst_id.items", "torch.FloatTensor().zero_", "torch.autograd.Variable", "sgi_model.SGINetModel.netD_obj.cuda", "sgi_model.SGINetModel.load_network", "losses.losses.losses.Style_Perceptual_Loss", "list", "list", "sgi_model.SGINetModel.netD_obj.parameters", "torch.zeros", "sgi_model.SGINetModel.Tensor", "torch.from_numpy().float", "sgi_model.SGINetModel.netG_shape_encoder.parameters", "sgi_model.SGINetModel.netG_shape_decoder.parameters", "torch.FloatTensor", "torch.from_numpy", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.models.sgi_model.get_norm_layer", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.models.sgi_model.get_activation_layer", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.models.sgi_model.SGINetModel.init_loss_filter", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.base_model.BaseModel.load_network"], ["", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "SGINetModel", ",", "self", ")", ".", "__init__", "(", "opt", ")", "\n", "if", "opt", ".", "isTrain", ":", "# when training at full res this causes OOM", "\n", "            ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "", "self", ".", "isTrain", "=", "opt", ".", "isTrain", "\n", "self", ".", "gen_features", "=", "False", "\n", "self", ".", "gan_mode", "=", "opt", ".", "gan_mode", "\n", "self", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "\"SGI-NET\"", ",", "opt", ".", "name", ")", "\n", "##### define networks", "\n", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "opt", ".", "norm", ")", "\n", "activation_layer", "=", "get_activation_layer", "(", "activation_type", "=", "opt", ".", "activation", ")", "\n", "# Generator network", "\n", "netG_input_nc", "=", "opt", ".", "semantic_nc", "\n", "self", ".", "netG", "=", "sgi_net", ".", "SGINet", "(", "netG_input_nc", ",", "opt", ".", "input_nc", ",", "norm_layer", ",", "\n", "not", "opt", ".", "no_deconv", ",", "opt", ".", "use_attention", ",", "\n", "not", "opt", ".", "no_dilated_conv", ",", "opt", ".", "use_sn_generator", ",", "\n", "opt", ".", "ngf", ",", "opt", ".", "n_downsample_global", ",", "opt", ".", "use_skip", ",", "\n", "activation_layer", ",", "opt", ".", "use_spade", ",", "\n", "opt", ".", "which_encoder", ",", "opt", ".", "use_pixel_shuffle", ",", "opt", ".", "use_bbox", ",", "opt", ".", "use_multi_scale_loss", ",", "self", ".", "gpu_ids", ")", "\n", "print", "(", "self", ".", "netG", ")", "\n", "crop", "=", "True", "if", "self", ".", "opt", ".", "size_crop_height", "is", "not", "None", "and", "self", ".", "opt", ".", "size_crop_width", "is", "not", "None", "else", "False", "\n", "if", "not", "crop", ":", "\n", "            ", "self", ".", "image_width", "=", "self", ".", "opt", ".", "image_width", "\n", "self", ".", "image_height", "=", "self", ".", "opt", ".", "image_height", "\n", "", "else", ":", "\n", "            ", "self", ".", "image_width", "=", "self", ".", "opt", ".", "size_crop_width", "\n", "self", ".", "image_height", "=", "self", ".", "opt", ".", "size_crop_height", "\n", "", "if", "self", ".", "opt", ".", "use_bbox", ":", "\n", "            ", "self", ".", "netG_shape_encoder", "=", "sgi_net", ".", "Shape_Encoder", "(", "32", ",", "opt", ".", "z_len", ",", "opt", ".", "compact_sizex", "*", "opt", ".", "compact_sizey", ",", "len", "(", "self", ".", "opt", ".", "classes_of_interest_ids", ")", ",", "6", ")", "\n", "self", ".", "netG_shape_decoder", "=", "sgi_net", ".", "Shape_Decoder", "(", "opt", ".", "z_len", ",", "len", "(", "self", ".", "opt", ".", "classes_of_interest_ids", ")", ",", "6", ")", "\n", "self", ".", "stn_fix", "=", "STN_fixTheta", "(", "self", ".", "opt", ")", "\n", "", "if", "len", "(", "self", ".", "gpu_ids", ")", ">", "0", ":", "\n", "            ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "self", ".", "netG", ".", "cuda", "(", "\"cuda\"", ")", "\n", "if", "self", ".", "opt", ".", "use_bbox", ":", "\n", "                ", "self", ".", "netG_shape_decoder", ".", "cuda", "(", "\"cuda\"", ")", "\n", "self", ".", "netG_shape_encoder", ".", "cuda", "(", "\"cuda\"", ")", "\n", "self", ".", "stn_fix", ".", "cuda", "(", "\"cuda\"", ")", "\n", "", "", "self", ".", "netG", ".", "apply", "(", "weights_init", ")", "\n", "if", "self", ".", "opt", ".", "use_bbox", ":", "\n", "            ", "self", ".", "netG_shape_decoder", ".", "apply", "(", "weights_init", ")", "\n", "self", ".", "netG_shape_encoder", ".", "apply", "(", "weights_init", ")", "\n", "self", ".", "pad", "=", "Variable", "(", "torch", ".", "zeros", "(", "self", ".", "opt", ".", "semantic_nc", ",", "self", ".", "image_height", ",", "self", ".", "image_width", ")", ")", ".", "cuda", "(", ")", "\n", "if", "self", ".", "opt", ".", "label_nc", "==", "21", ":", "\n", "                ", "self", ".", "ch_to_inst_id", "=", "{", "\"4\"", ":", "\"4\"", ",", "\"5\"", ":", "\"5\"", ",", "\"6\"", ":", "\"6\"", ",", "\"7\"", ":", "\"7\"", ",", "\n", "\"8\"", ":", "\"8\"", ",", "\"9\"", ":", "\"9\"", ",", "\"10\"", ":", "\"10\"", ",", "\n", "\"11\"", ":", "\"11\"", ",", "\"12\"", ":", "\"12\"", ",", "\"13\"", ":", "\"13\"", ",", "\n", "\"14\"", ":", "\"14\"", "}", "\n", "", "elif", "self", ".", "opt", ".", "label_nc", "==", "17", ":", "\n", "                ", "self", ".", "ch_to_inst_id", "=", "{", "\"8\"", ":", "\"24\"", ",", "\"9\"", ":", "\"25\"", ",", "\"10\"", ":", "\"26\"", ",", "\n", "\"11\"", ":", "\"27\"", ",", "\"12\"", ":", "\"28\"", ",", "\"13\"", ":", "\"31\"", ",", "\n", "\"14\"", ":", "\"32\"", ",", "\"15\"", ":", "\"33\"", "}", "\n", "", "self", ".", "ch_to_index", "=", "{", "ch", ":", "i", "for", "i", ",", "ch", "in", "enumerate", "(", "self", ".", "opt", ".", "classes_of_interest_ids", ")", "}", "\n", "self", ".", "index_to_ch", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "ch_to_index", ".", "items", "(", ")", "}", "\n", "self", ".", "inst_id_to_ch", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "ch_to_inst_id", ".", "items", "(", ")", "}", "\n", "self", ".", "one_hot_instance", "=", "torch", ".", "FloatTensor", "(", "self", ".", "opt", ".", "semantic_nc", ",", "self", ".", "image_height", ",", "self", ".", "image_width", ")", ".", "zero_", "(", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "self", ".", "bb_white", "=", "Variable", "(", "\n", "self", ".", "Tensor", "(", "self", ".", "opt", ".", "batchSize", ",", "1", ",", "self", ".", "opt", ".", "compact_sizey", ",", "\n", "self", ".", "opt", ".", "compact_sizex", ")", ".", "fill_", "(", "1.", ")", ")", "\n", "self", ".", "rotFix", "=", "Variable", "(", "\n", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "1.", ",", "0.", ",", "1.", ",", "0.", ",", "1.", ",", "1.", "]", ")", ")", ".", "float", "(", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "# Discriminator network", "\n", "", "if", "self", ".", "isTrain", ":", "\n", "            ", "use_sigmoid", "=", "True", "if", "opt", ".", "gan_mode", "==", "\"vanilla\"", "else", "False", "\n", "netD_input_nc", "=", "opt", ".", "input_nc", "+", "opt", ".", "semantic_nc", "\n", "\n", "self", ".", "netD_global", "=", "MultiscaleDiscriminator", "(", "netD_input_nc", ",", "\n", "ndf", "=", "64", ",", "\n", "n_layers", "=", "opt", ".", "n_layers_D", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "use_sigmoid", "=", "use_sigmoid", ",", "\n", "num_D", "=", "opt", ".", "num_D_global", ",", "\n", "getIntermFeat", "=", "not", "opt", ".", "no_ganFeat_loss", ",", "\n", "use_sn_discriminator", "=", "opt", ".", "use_sn_discriminator", ")", "\n", "if", "self", ".", "opt", ".", "use_bbox", ":", "\n", "                ", "self", ".", "netD_obj", "=", "DiscriminatorObj", "(", "ndf", "=", "64", ")", "\n", "", "if", "len", "(", "self", ".", "gpu_ids", ")", ">", "0", ":", "\n", "                ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "self", ".", "netD_global", ".", "cuda", "(", "\"cuda\"", ")", "\n", "if", "self", ".", "opt", ".", "use_bbox", ":", "\n", "                    ", "self", ".", "netD_obj", ".", "cuda", "(", "\"cuda\"", ")", "\n", "", "", "self", ".", "netD_global", ".", "apply", "(", "weights_init", ")", "\n", "if", "self", ".", "opt", ".", "use_bbox", ":", "\n", "                ", "self", ".", "netD_obj", ".", "apply", "(", "weights_init", ")", "\n", "", "", "if", "self", ".", "opt", ".", "verbose", ":", "\n", "            ", "print", "(", "'---------- Networks initialized -------------'", ")", "\n", "\n", "# load networks", "\n", "", "if", "not", "self", ".", "isTrain", "or", "opt", ".", "continue_train", "or", "opt", ".", "load_pretrain_sg", ":", "\n", "            ", "pretrained_path", "=", "opt", ".", "test_model_sg", "if", "not", "self", ".", "isTrain", "else", "opt", ".", "load_pretrain_sg", "\n", "\n", "self", ".", "load_network", "(", "self", ".", "netG", ",", "'SGI_NET_G'", ",", "opt", ".", "which_epoch", ",", "\n", "pretrained_path", ")", "\n", "if", "self", ".", "opt", ".", "use_bbox", ":", "\n", "                ", "self", ".", "load_network", "(", "self", ".", "netG_shape_encoder", ",", "\"SGI_NET_INST_ENC\"", ",", "opt", ".", "which_epoch", ",", "\n", "pretrained_path", ")", "\n", "self", ".", "load_network", "(", "self", ".", "netG_shape_decoder", ",", "\"SGI_NET_INST_DEC\"", ",", "opt", ".", "which_epoch", ",", "\n", "pretrained_path", ")", "\n", "", "if", "self", ".", "isTrain", ":", "\n", "                ", "self", ".", "load_network", "(", "self", ".", "netD_global", ",", "\n", "'SGI_NET_D_GLOBAL'", ",", "\n", "opt", ".", "which_epoch", ",", "\n", "pretrained_path", ")", "\n", "if", "self", ".", "opt", ".", "use_bbox", ":", "\n", "                    ", "self", ".", "load_network", "(", "self", ".", "netD_obj", ",", "\n", "'SGI_NET_D_OBJ'", ",", "\n", "opt", ".", "which_epoch", ",", "\n", "pretrained_path", ")", "\n", "# set loss functions and optimizers", "\n", "", "", "", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "old_lr", "=", "opt", ".", "lr", "\n", "self", ".", "use_perceptual_loss", "=", "True", "if", "opt", ".", "which_perceptual_loss", "in", "[", "\n", "\"alex\"", ",", "\"vgg\"", "]", "else", "False", "\n", "# define loss functions", "\n", "self", ".", "loss_filter", "=", "self", ".", "init_loss_filter", "(", "\n", "not", "opt", ".", "no_ganFeat_loss", ",", "\n", "self", ".", "use_perceptual_loss", ",", "not", "self", ".", "opt", ".", "no_ganStyle_loss", ",", "\n", "self", ".", "opt", ".", "gan_mode", ")", "\n", "if", "len", "(", "self", ".", "gpu_ids", ")", ">", "0", ":", "\n", "                ", "self", ".", "criterionGAN", "=", "losses", ".", "GANLoss", "(", "gan_mode", "=", "self", ".", "gan_mode", ",", "\n", "tensor", "=", "self", ".", "Tensor", ",", "\n", "device", "=", "\"cuda\"", ")", "\n", "self", ".", "criterionGAN_obj", "=", "losses", ".", "GANLoss", "(", "gan_mode", "=", "\"lsgan\"", ",", "\n", "tensor", "=", "self", ".", "Tensor", ",", "\n", "device", "=", "\"cuda\"", ")", "\n", "\n", "", "else", ":", "\n", "                ", "self", ".", "criterionGAN", "=", "losses", ".", "GANLoss", "(", "gan_mode", "=", "self", ".", "gan_mode", ",", "\n", "tensor", "=", "self", ".", "Tensor", ",", "\n", "device", "=", "\"cpu\"", ")", "\n", "self", ".", "criterionGAN_obj", "=", "losses", ".", "GANLoss", "(", "gan_mode", "=", "\"lsgan\"", ",", "\n", "tensor", "=", "self", ".", "Tensor", ",", "\n", "device", "=", "\"cpu\"", ")", "\n", "\n", "", "self", ".", "criterionRec", "=", "torch", ".", "nn", ".", "L1Loss", "(", "reduction", "=", "\"sum\"", ")", "\n", "self", ".", "criterionFeat", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "criterionMSE", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "self", ".", "criterionCE", "=", "torch", ".", "nn", ".", "NLLLoss2d", "(", ")", "\n", "self", ".", "criterionInst", "=", "torch", ".", "nn", ".", "L1Loss", "(", "reduction", "=", "\"none\"", ")", "\n", "if", "self", ".", "use_perceptual_loss", "or", "not", "self", ".", "opt", ".", "no_ganStyle_loss", ":", "\n", "                ", "if", "opt", ".", "which_perceptual_loss", "==", "\"vgg\"", ":", "\n", "                    ", "self", ".", "criterion_perceptual_style", "=", "losses", ".", "Style_Perceptual_Loss", "(", "gpu_ids", "=", "self", ".", "gpu_ids", ",", "fp16", "=", "self", ".", "opt", ".", "fp16", ")", "\n", "\n", "\n", "# Names so we can breakout loss", "\n", "", "", "self", ".", "loss_names", "=", "self", ".", "loss_filter", "(", "'G_GAN'", ",", "\"G_KL_inst\"", ",", "\"G_Inst_rec\"", ",", "'G_GAN_Feat'", ",", "\"G_Image_Rec\"", ",", "\n", "\"G_seg_map_rec\"", ",", "\n", "'G_perceptual_'", "+", "opt", ".", "which_perceptual_loss", ",", "\n", "\"G_Style\"", ",", "'D_real'", ",", "'D_fake'", ",", "'D_real_obj'", ",", "'D_fake_obj'", ",", "\"G_GAN_obj\"", ")", "\n", "\n", "# initialize optimizers", "\n", "# optimizer G", "\n", "if", "self", ".", "opt", ".", "use_bbox", ":", "\n", "                ", "params_instance", "=", "list", "(", "self", ".", "netG_shape_encoder", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "netG_shape_decoder", ".", "parameters", "(", ")", ")", "\n", "self", ".", "optimizer_G_instance", "=", "torch", ".", "optim", ".", "Adam", "(", "params_instance", ",", "lr", "=", "opt", ".", "lr", ",", "\n", "betas", "=", "(", "opt", ".", "beta1", ",", "opt", ".", "beta2", ")", ")", "\n", "", "params", "=", "list", "(", "self", ".", "netG", ".", "parameters", "(", ")", ")", "\n", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "opt", ".", "lr", ",", "\n", "betas", "=", "(", "opt", ".", "beta1", ",", "opt", ".", "beta2", ")", ")", "\n", "# optimizer D", "\n", "params", "=", "list", "(", "self", ".", "netD_global", ".", "parameters", "(", ")", ")", "\n", "\n", "self", ".", "optimizer_D", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "opt", ".", "lr", ",", "\n", "betas", "=", "(", "opt", ".", "beta1", ",", "opt", ".", "beta2", ")", ")", "\n", "if", "self", ".", "opt", ".", "use_bbox", ":", "\n", "                ", "params", "=", "list", "(", "self", ".", "netD_obj", ".", "parameters", "(", ")", ")", "\n", "self", ".", "optimizer_D_obj", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "opt", ".", "lr", ",", "\n", "betas", "=", "(", "opt", ".", "beta1", ",", "opt", ".", "beta2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.models.sgi_model.SGINetModel.pad_to_nClass": [[242, 262], ["range", "torch.stack", "x[].clone().type().to", "int", "inst_maps_valid_idx[].item", "int", "sgi_model.SGINetModel.one_hot_instance.zero_", "sgi_model.SGINetModel.one_hot_instance.scatter", "seg_maps.append", "sgi_model.SGINetModel.one_hot_instance.zero_", "sgi_model.SGINetModel.one_hot_instance.scatter", "seg_maps.append", "x[].clone().type", "x[].clone", "str"], "methods", ["None"], ["", "", "", "def", "pad_to_nClass", "(", "self", ",", "x", ",", "masks", ",", "compute", ",", "inst_maps_valid_idx", ")", ":", "\n", "        ", "seg_maps", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "x", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "seg_map", "=", "x", "[", "i", "]", ".", "clone", "(", ")", ".", "type", "(", "torch", ".", "LongTensor", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "comp_instance", "=", "compute", "[", "i", "]", "\n", "mask", "=", "masks", "[", "i", "]", "\n", "idx", "=", "int", "(", "inst_maps_valid_idx", "[", "i", "]", ".", "item", "(", ")", ")", "\n", "if", "1", "in", "comp_instance", ":", "\n", "                ", "ch", "=", "int", "(", "self", ".", "inst_id_to_ch", "[", "str", "(", "idx", ")", "[", ":", "-", "3", "]", "]", ")", "\n", "seg_map", "[", "seg_map", "==", "1", "]", "=", "ch", "\n", "seg_map", "[", "seg_map", "==", "0", "]", "=", "self", ".", "opt", ".", "label_nc", "-", "1", "if", "self", ".", "opt", ".", "no_contain_dontcare_label", "else", "self", ".", "opt", ".", "label_nc", "\n", "self", ".", "one_hot_instance", ".", "zero_", "(", ")", "\n", "one_hot_instance", "=", "self", ".", "one_hot_instance", ".", "scatter", "(", "0", ",", "seg_map", ",", "1.0", ")", "\n", "seg_maps", ".", "append", "(", "one_hot_instance", ")", "\n", "", "else", ":", "\n", "                ", "seg_map", "[", "seg_map", "==", "0", "]", "=", "self", ".", "opt", ".", "label_nc", "-", "1", "if", "self", ".", "opt", ".", "no_contain_dontcare_label", "else", "self", ".", "opt", ".", "label_nc", "\n", "self", ".", "one_hot_instance", ".", "zero_", "(", ")", "\n", "one_hot_instance", "=", "self", ".", "one_hot_instance", ".", "scatter", "(", "0", ",", "seg_map", ",", "1.0", ")", "\n", "seg_maps", ".", "append", "(", "one_hot_instance", ")", "\n", "", "", "return", "torch", ".", "stack", "(", "seg_maps", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.models.sgi_model.SGINetModel.ch_to_one_hot": [[264, 281], ["torch.ones().cuda", "range", "torch.stack", "int", "torch.ones", "inst_maps_valid_idx[].item", "int", "torch.LongTensor().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda.scatter", "vae_cond_decoder.append", "torch.autograd.Variable().cuda", "vae_cond_decoder.append", "torch.FloatTensor().zero_().cuda.unsqueeze().unsqueeze", "torch.LongTensor", "torch.FloatTensor().zero_", "torch.autograd.Variable", "torch.FloatTensor().zero_().cuda.unsqueeze", "torch.zeros", "str", "torch.FloatTensor", "len", "len"], "methods", ["None"], ["", "def", "ch_to_one_hot", "(", "self", ",", "inst_maps_valid_idx", ",", "comp_instances", ")", ":", "\n", "        ", "vae_cond_decoder", "=", "[", "]", "\n", "self", ".", "ch", "=", "torch", ".", "ones", "(", "1", ",", "1", ",", "1", ")", ".", "cuda", "(", ")", "\n", "for", "i", "in", "range", "(", "inst_maps_valid_idx", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "idx", "=", "int", "(", "inst_maps_valid_idx", "[", "i", "]", ".", "item", "(", ")", ")", "\n", "comp_instance", "=", "comp_instances", "[", "i", "]", "\n", "if", "1", "in", "comp_instance", ":", "\n", "                ", "ch", "=", "int", "(", "self", ".", "inst_id_to_ch", "[", "str", "(", "idx", ")", "[", ":", "-", "3", "]", "]", ")", "\n", "index", "=", "torch", ".", "LongTensor", "(", "[", "self", ".", "ch_to_index", "[", "ch", "]", "]", ")", ".", "cuda", "(", ")", "\n", "index_one_hot", "=", "torch", ".", "FloatTensor", "(", "len", "(", "self", ".", "opt", ".", "classes_of_interest_ids", ")", ")", ".", "zero_", "(", ")", ".", "cuda", "(", ")", "\n", "index_one_hot", ".", "scatter", "(", "0", ",", "index", ",", "1", ")", "\n", "vae_cond_decoder", ".", "append", "(", "index_one_hot", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ")", "\n", "", "else", ":", "\n", "                ", "pad_ch", "=", "Variable", "(", "\n", "torch", ".", "zeros", "(", "len", "(", "self", ".", "opt", ".", "classes_of_interest_ids", ")", ",", "1", ",", "1", ")", ")", ".", "cuda", "(", ")", "\n", "vae_cond_decoder", ".", "append", "(", "pad_ch", ")", "\n", "", "", "return", "torch", ".", "stack", "(", "vae_cond_decoder", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.models.sgi_model.SGINetModel.discriminate": [[284, 292], ["torch.cat", "torch.cat", "netD.forward", "netD.forward", "fake_image.detach", "fake_seg_maps.detach"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.AlexNet.forward", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.AlexNet.forward"], ["", "def", "discriminate", "(", "self", ",", "netD", ",", "gt_seg_maps", ",", "fake_seg_maps", ",", "fake_image", ",", "real_image", ",", "mask", ")", ":", "\n", "        ", "input_concat_fake", "=", "torch", ".", "cat", "(", "(", "fake_image", ".", "detach", "(", ")", ",", "fake_seg_maps", ".", "detach", "(", ")", ")", ",", "dim", "=", "1", ")", "\n", "input_concat_real", "=", "torch", ".", "cat", "(", "(", "real_image", ",", "gt_seg_maps", ")", ",", "\n", "dim", "=", "1", ")", "\n", "return", "netD", ".", "forward", "(", "input_concat_fake", ")", ",", "netD", ".", "forward", "(", "input_concat_real", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.models.sgi_model.SGINetModel.reparameterize": [[293, 312], ["mu.float.float.float", "logvar.float", "amp.disable_casts", "torch.exp", "torch.autograd.Variable", "torch.exp", "torch.autograd.Variable", "torch.exp.data.new().normal_", "torch.exp.data.new().normal_", "torch.exp.data.new", "torch.exp.data.new", "torch.exp.size", "torch.exp.size"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size"], ["", "def", "reparameterize", "(", "self", ",", "mu", ",", "logvar", ",", "mode", ")", ":", "\n", "        ", "from", "apex", "import", "amp", "\n", "mu", "=", "mu", ".", "float", "(", ")", "\n", "logvar", "=", "logvar", ".", "float", "(", ")", "if", "logvar", "is", "not", "None", "else", "None", "\n", "if", "self", ".", "opt", ".", "fp16", ":", "\n", "            ", "with", "amp", ".", "disable_casts", "(", ")", ":", "\n", "                ", "if", "mode", "==", "'train'", ":", "\n", "                    ", "std", "=", "torch", ".", "exp", "(", "0.5", "*", "logvar", ")", "\n", "eps", "=", "Variable", "(", "std", ".", "data", ".", "new", "(", "std", ".", "size", "(", ")", ")", ".", "normal_", "(", ")", ")", "\n", "return", "mu", "+", "eps", "*", "std", "\n", "", "else", ":", "\n", "                    ", "return", "mu", "\n", "", "", "", "else", ":", "\n", "            ", "if", "mode", "==", "'train'", ":", "\n", "                ", "std", "=", "torch", ".", "exp", "(", "0.5", "*", "logvar", ")", "\n", "eps", "=", "Variable", "(", "std", ".", "data", ".", "new", "(", "std", ".", "size", "(", ")", ")", ".", "normal_", "(", ")", ")", "\n", "return", "mu", "+", "eps", "*", "std", "\n", "", "else", ":", "\n", "                ", "return", "mu", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.models.sgi_model.SGINetModel.forward": [[313, 451], ["sgi_model.SGINetModel.netG.forward", "sgi_model.SGINetModel.discriminate", "sgi_model.SGINetModel.criterionGAN.forward", "sgi_model.SGINetModel.criterionGAN", "torch.cat", "sgi_model.SGINetModel.netD_global.forward", "sgi_model.SGINetModel.criterionGAN", "enumerate", "sgi_model.SGINetModel.criterion_perceptual_style", "sgi_model.SGINetModel.ch_to_one_hot", "sgi_model.SGINetModel.netG_shape_encoder", "sgi_model.SGINetModel.reparameterize", "sgi_model.SGINetModel.stn_fix", "sgi_model.SGINetModel.netD_obj.forward", "sgi_model.SGINetModel.netD_obj.forward", "sgi_model.SGINetModel.criterionGAN.forward", "sgi_model.SGINetModel.criterionGAN.forward", "sgi_model.SGINetModel.pad_to_nClass", "sgi_model.SGINetModel.netD_obj.forward", "sgi_model.SGINetModel.criterionGAN.forward", "len", "range", "sgi_model.SGINetModel.criterionRec", "sgi_model.SGINetModel.criterionRec", "sgi_model.SGINetModel.loss_filter", "sgi_model.SGINetModel.netG_shape_decoder", "model_input[].unsqueeze().unsqueeze", "disc_input_fake.detach", "sgi_model.SGINetModel.mu.float", "sgi_model.SGINetModel.logvar.float", "max", "max", "range", "model_input[].sum", "torch.nn.functional.interpolate", "len", "model_input[].bool().squeeze", "model_input[].bool().squeeze", "amp.disable_casts", "max", "max", "torch.prod", "torch.sum", "[].detach", "sgi_model.SGINetModel.criterionFeat", "len", "model_input[].unsqueeze", "sgi_model.SGINetModel.instance_transformed.detach", "torch.prod", "torch.sum", "torch.sum", "model_input[].squeeze().nonzero", "model_input[].squeeze().nonzero", "torch.FloatTensor", "torch.abs", "len", "sgi_model.SGINetModel.criterionCE", "model_input[].bool", "model_input[].bool", "torch.sum", "model_input[].bool().squeeze", "model_input[].bool().squeeze", "torch.FloatTensor", "torch.abs", "torch.sum", "list", "torch.argmax", "torch.sum", "list", "model_input[].squeeze", "model_input[].squeeze", "model_input[].long", "model_input[].bool", "model_input[].bool", "sgi_model.SGINetModel.logvar.exp", "sgi_model.SGINetModel.logvar.exp", "sgi_model.SGINetModel.mu.pow", "sgi_model.SGINetModel.mu.pow"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.AlexNet.forward", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.models.sgi_model.SGINetModel.discriminate", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.AlexNet.forward", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.AlexNet.forward", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.models.sgi_model.SGINetModel.ch_to_one_hot", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.models.sgi_model.SGINetModel.reparameterize", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.AlexNet.forward", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.AlexNet.forward", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.AlexNet.forward", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.AlexNet.forward", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.models.sgi_model.SGINetModel.pad_to_nClass", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.AlexNet.forward", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.AlexNet.forward"], ["", "", "", "def", "forward", "(", "self", ",", "model_input", ")", ":", "\n", "# Encode Inputs", "\n", "# input_concat = torch.cat((image_masked, predicted_label), dim=1)", "\n", "        ", "loss_D_real_obj", "=", "loss_D_fake_obj", "=", "0", "\n", "if", "self", ".", "opt", ".", "use_bbox", ":", "\n", "            ", "self", ".", "class_conditioning", "=", "self", ".", "ch_to_one_hot", "(", "\n", "model_input", "[", "\"inst_maps_valid_idx\"", "]", ",", "\n", "model_input", "[", "\"compute_instance\"", "]", ")", "\n", "self", ".", "mu", ",", "self", ".", "logvar", "=", "self", ".", "netG_shape_encoder", "(", "model_input", "[", "\"inst_maps_compact\"", "]", ",", "self", ".", "class_conditioning", ",", "model_input", "[", "\"theta_transform\"", "]", ")", "\n", "self", ".", "z_rep", "=", "self", ".", "reparameterize", "(", "self", ".", "mu", ",", "self", ".", "logvar", ",", "\"train\"", ")", "\n", "self", ".", "instance", "=", "self", ".", "netG_shape_decoder", "(", "self", ".", "z_rep", ",", "\n", "self", ".", "class_conditioning", ",", "model_input", "[", "\"theta_transform\"", "]", ")", "*", "model_input", "[", "\"compute_instance\"", "]", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "2", ")", "\n", "self", ".", "instance_transformed", "=", "self", ".", "stn_fix", "(", "self", ".", "instance", ",", "model_input", "[", "\"theta_transform\"", "]", ",", "self", ".", "image_width", ",", "self", ".", "image_height", ")", "\n", "disc_input_fake", "=", "self", ".", "instance", "\n", "disc_input_real", "=", "model_input", "[", "\"inst_maps_compact\"", "]", "\n", "obj_pred_fake", "=", "self", ".", "netD_obj", ".", "forward", "(", "disc_input_fake", ".", "detach", "(", ")", ")", "\n", "obj_pred_real", "=", "self", ".", "netD_obj", ".", "forward", "(", "disc_input_real", ")", "\n", "# update D obj", "\n", "\n", "obj_pred_fake", "=", "obj_pred_fake", "*", "model_input", "[", "\"compute_instance\"", "]", "\n", "obj_pred_real", "=", "obj_pred_real", "*", "model_input", "[", "\"compute_instance\"", "]", "+", "(", "1", "-", "model_input", "[", "\"compute_instance\"", "]", ")", "\n", "loss_D_fake_obj", "=", "self", ".", "criterionGAN", ".", "forward", "(", "obj_pred_fake", ",", "False", ")", "\n", "loss_D_real_obj", "=", "self", ".", "criterionGAN", ".", "forward", "(", "obj_pred_real", ",", "True", ")", "\n", "self", ".", "instance_masked", "=", "(", "self", ".", "instance_transformed", ".", "detach", "(", ")", "*", "model_input", "[", "\"insta_maps_bbox\"", "]", ")", ".", "float", "(", ")", "\n", "self", ".", "instance_pad", "=", "self", ".", "pad_to_nClass", "(", "(", "self", ".", "instance_masked", ">", "0.5", ")", ".", "float", "(", ")", ",", "model_input", "[", "\"masks\"", "]", ",", "model_input", "[", "'compute_instance'", "]", ",", "model_input", "[", "\"inst_maps_valid_idx\"", "]", ")", "\n", "disc_input_fake", "=", "self", ".", "instance", "\n", "obj_pred_fake", "=", "self", ".", "netD_obj", ".", "forward", "(", "disc_input_fake", ")", "\n", "obj_pred_fake", "=", "obj_pred_fake", "*", "model_input", "[", "\"compute_instance\"", "]", "+", "(", "1", "-", "model_input", "[", "\"compute_instance\"", "]", ")", "\n", "loss_G_fake_obj", "=", "self", ".", "criterionGAN", ".", "forward", "(", "obj_pred_fake", ",", "True", ")", "\n", "loss_G_GAN_obj", "=", "loss_G_fake_obj", "\n", "from", "apex", "import", "amp", "\n", "self", ".", "mu", "=", "self", ".", "mu", ".", "float", "(", ")", "[", "\n", "model_input", "[", "\"compute_instance\"", "]", ".", "bool", "(", ")", ".", "squeeze", "(", "1", ")", "]", "\n", "self", ".", "logvar", "=", "self", ".", "logvar", ".", "float", "(", ")", "[", "\n", "model_input", "[", "\"compute_instance\"", "]", ".", "bool", "(", ")", ".", "squeeze", "(", "1", ")", "]", "\n", "if", "self", ".", "opt", ".", "fp16", ":", "\n", "                ", "with", "amp", ".", "disable_casts", "(", ")", ":", "\n", "                    ", "denominator", "=", "max", "(", "(", "torch", ".", "sum", "(", "\n", "model_input", "[", "\"compute_instance\"", "]", ")", "*", "self", ".", "opt", ".", "z_len", ")", ",", "1", ")", "\n", "instance_KL_loss", "=", "(", "-", "0.5", "*", "(", "torch", ".", "sum", "(", "\n", "1", "+", "self", ".", "logvar", "-", "self", ".", "mu", ".", "pow", "(", "\n", "2", ")", "-", "self", ".", "logvar", ".", "exp", "(", ")", ")", "/", "denominator", ")", ")", "*", "self", ".", "opt", ".", "lambda_KL_rec", "\n", "fake_inst", "=", "self", ".", "instance", "[", "\n", "model_input", "[", "\"compute_instance\"", "]", ".", "bool", "(", ")", ".", "squeeze", "(", "1", ")", "]", "\n", "real_inst", "=", "model_input", "[", "\"inst_maps_compact\"", "]", "[", "\n", "model_input", "[", "\"compute_instance\"", "]", ".", "bool", "(", ")", ".", "squeeze", "(", "1", ")", "]", "\n", "denominator", "=", "max", "(", "\n", "torch", ".", "prod", "(", "torch", ".", "FloatTensor", "(", "list", "(", "real_inst", ".", "shape", ")", ")", ")", ",", "1", ")", "\n", "instance_rec_loss", "=", "torch", ".", "sum", "(", "\n", "torch", ".", "abs", "(", "fake_inst", "-", "real_inst", ")", ")", "/", "denominator", "\n", "instance_rec_loss", "=", "instance_rec_loss", "*", "self", ".", "opt", ".", "lambda_inst_rec", "\n", "", "", "else", ":", "\n", "                ", "denominator", "=", "max", "(", "(", "torch", ".", "sum", "(", "model_input", "[", "\"compute_instance\"", "]", ")", "*", "self", ".", "opt", ".", "z_len", ")", ",", "1", ")", "\n", "instance_KL_loss", "=", "(", "-", "0.5", "*", "(", "torch", ".", "sum", "(", "\n", "1", "+", "self", ".", "logvar", "-", "self", ".", "mu", ".", "pow", "(", "2", ")", "-", "self", ".", "logvar", ".", "exp", "(", ")", ")", "/", "denominator", ")", ")", "*", "self", ".", "opt", ".", "lambda_KL_rec", "\n", "fake_inst", "=", "self", ".", "instance", "[", "model_input", "[", "\"compute_instance\"", "]", ".", "squeeze", "(", ")", ".", "nonzero", "(", ")", "]", "\n", "real_inst", "=", "model_input", "[", "\"inst_maps_compact\"", "]", "[", "model_input", "[", "\"compute_instance\"", "]", ".", "squeeze", "(", ")", ".", "nonzero", "(", ")", "]", "\n", "denominator", "=", "max", "(", "torch", ".", "prod", "(", "torch", ".", "FloatTensor", "(", "list", "(", "real_inst", ".", "shape", ")", ")", ")", ",", "1", ")", "\n", "instance_rec_loss", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "fake_inst", "-", "real_inst", ")", ")", "/", "denominator", "\n", "instance_rec_loss", "=", "instance_rec_loss", "*", "self", ".", "opt", ".", "lambda_inst_rec", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "instance_masked", "=", "None", "\n", "instance_KL_loss", "=", "0", "\n", "instance_rec_loss", "=", "0", "\n", "loss_G_GAN_obj", "=", "0", "\n", "self", ".", "instance_pad", "=", "self", ".", "instance_masked", "=", "[", "None", "]", "\n", "", "multi_scale_fake_seg_maps", ",", "fake_images", ",", "offset_flow", "=", "self", ".", "netG", ".", "forward", "(", "model_input", "[", "\"one_hot_gt_seg_maps_masked\"", "]", ",", "\n", "model_input", "[", "\"gt_images_masked\"", "]", ",", "\n", "model_input", "[", "\"masks\"", "]", ",", "\n", "self", ".", "instance_masked", ")", "\n", "# Fake Detection and Loss", "\n", "\n", "global_pred_fake", ",", "global_pred_real", "=", "self", ".", "discriminate", "(", "\n", "self", ".", "netD_global", ",", "\n", "model_input", "[", "\"one_hot_seg_map\"", "]", ",", "\n", "model_input", "[", "\"one_hot_seg_map\"", "]", ",", "\n", "fake_images", ",", "\n", "model_input", "[", "\"gt_images\"", "]", ",", "model_input", "[", "\"masks\"", "]", ")", "\n", "loss_D_fake_global", "=", "self", ".", "criterionGAN", ".", "forward", "(", "global_pred_fake", ",", "False", ")", "\n", "\n", "# Real Loss", "\n", "\n", "loss_D_real_global", "=", "self", ".", "criterionGAN", "(", "global_pred_real", ",", "True", ")", "\n", "\n", "loss_D_penalty", "=", "0", "\n", "loss_D", "=", "0", "\n", "loss_G_GAN", "=", "0", "\n", "loss_D_fake", "=", "loss_D_fake_global", "\n", "loss_D_real", "=", "loss_D_real_global", "\n", "\n", "# GAN feature matching loss", "\n", "## G part", "\n", "loss_G_GAN_Feat", "=", "loss_image_rec", "=", "loss_seg_map_rec", "=", "loss_G_perceptual", "=", "loss_G_style", "=", "0", "\n", "# GAN loss (Fake Passability Loss)", "\n", "fake_cond", "=", "torch", ".", "cat", "(", "(", "fake_images", ",", "model_input", "[", "\"one_hot_seg_map\"", "]", ")", ",", "dim", "=", "1", ")", "\n", "global_pred_fake", "=", "self", ".", "netD_global", ".", "forward", "(", "fake_cond", ")", "\n", "loss_G_GAN_global", "=", "self", ".", "criterionGAN", "(", "global_pred_fake", ",", "True", ")", "\n", "loss_G_GAN", "=", "loss_G_GAN_global", "\n", "\n", "if", "not", "self", ".", "opt", ".", "no_ganFeat_loss", ":", "\n", "            ", "numD", "=", "len", "(", "global_pred_fake", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "opt", ".", "num_D_global", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "len", "(", "global_pred_real", "[", "i", "]", ")", "-", "1", ")", ":", "\n", "                    ", "fake", "=", "global_pred_fake", "[", "i", "]", "[", "j", "]", "\n", "real", "=", "global_pred_real", "[", "i", "]", "[", "j", "]", ".", "detach", "(", ")", "\n", "criterionFeat", "=", "self", ".", "criterionFeat", "(", "fake", ",", "real", ")", "\n", "loss_G_GAN_Feat", "+=", "criterionFeat", "*", "self", ".", "opt", ".", "lambda_feat", "/", "numD", "\n", "# VGG feature matching loss", "\n", "### real image", "\n", "\n", "", "", "", "rec_hole", "=", "self", ".", "criterionRec", "(", "fake_images", "*", "model_input", "[", "\"masks\"", "]", ",", "model_input", "[", "\"gt_images\"", "]", "*", "model_input", "[", "\"masks\"", "]", ")", "/", "(", "model_input", "[", "\"masks\"", "]", ".", "sum", "(", ")", "*", "3", ")", "\n", "rec_no_hole", "=", "self", ".", "criterionRec", "(", "fake_images", "*", "(", "1", "-", "model_input", "[", "\"masks\"", "]", ")", ",", "model_input", "[", "\"gt_images\"", "]", "*", "(", "1", "-", "model_input", "[", "\"masks\"", "]", ")", ")", "/", "(", "(", "1", "-", "model_input", "[", "\"masks\"", "]", ")", ".", "sum", "(", ")", "*", "3", ")", "\n", "loss_image_rec", "=", "(", "rec_hole", "+", "rec_no_hole", ")", "*", "self", ".", "opt", ".", "lambda_rec", "\n", "loss_seg_map_rec", "=", "0", "\n", "for", "i", ",", "scale_fake_seg_maps", "in", "enumerate", "(", "multi_scale_fake_seg_maps", ")", ":", "\n", "            ", "if", "i", "<", "len", "(", "multi_scale_fake_seg_maps", ")", "-", "1", ":", "\n", "                ", "scale_fake_seg_maps", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "scale_fake_seg_maps", ",", "size", "=", "(", "fake_images", ".", "shape", "[", "2", ":", "]", ")", ",", "mode", "=", "\"nearest\"", ")", "\n", "", "loss_seg_map_rec", "+=", "self", ".", "criterionCE", "(", "scale_fake_seg_maps", ",", "\n", "torch", ".", "argmax", "(", "model_input", "[", "\"one_hot_seg_map\"", "]", ".", "long", "(", ")", ",", "\n", "dim", "=", "1", ")", ")", "*", "self", ".", "opt", ".", "lambda_seg_map", "*", "1", "/", "len", "(", "multi_scale_fake_seg_maps", ")", "\n", "", "loss_G_style_out", ",", "loss_G_perceptual_out", "=", "self", ".", "criterion_perceptual_style", "(", "fake_images", ",", "\n", "model_input", "[", "\"gt_images\"", "]", ",", "\n", "self", ".", "use_perceptual_loss", ",", "\n", "not", "self", ".", "opt", ".", "no_ganStyle_loss", ")", "\n", "loss_G_perceptual", "=", "loss_G_perceptual_out", "\n", "loss_G_style", "=", "loss_G_style_out", "\n", "loss_G_perceptual", "*=", "self", ".", "opt", ".", "lambda_perceptual", "\n", "loss_G_style", "*=", "self", ".", "opt", ".", "lambda_style", "\n", "\n", "# Only return the fake_B image if necessary to save BW", "\n", "return", "[", "self", ".", "loss_filter", "(", "loss_G_GAN", ",", "instance_KL_loss", ",", "instance_rec_loss", ",", "loss_G_GAN_Feat", ",", "loss_image_rec", ",", "\n", "loss_seg_map_rec", ",", "loss_G_perceptual", ",", "\n", "loss_G_style", ",", "loss_D_real", ",", "loss_D_fake", ",", "\n", "loss_D_real_obj", ",", "loss_D_fake_obj", ",", "loss_G_GAN_obj", ")", ",", "\n", "fake_images", ",", "self", ".", "instance_pad", ",", "self", ".", "instance_masked", ",", "multi_scale_fake_seg_maps", "[", "-", "1", "]", ",", "offset_flow", ",", "model_input", "[", "\"one_hot_gt_seg_maps_masked\"", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.models.sgi_model.SGINetModel.inference": [[453, 511], ["torch.no_grad", "torch.any().item", "sgi_model.SGINetModel.netG.forward", "sgi_model.SGINetModel.ch_to_one_hot", "sgi_model.SGINetModel.stn_fix", "sgi_model.SGINetModel.pad_to_nClass", "sgi_model.SGINetModel.pad_to_nClass", "sgi_model.SGINetModel.netG.forward", "torch.any", "sgi_model.SGINetModel.ch_to_one_hot", "sgi_model.SGINetModel.netG_shape_encoder", "sgi_model.SGINetModel.reparameterize", "sgi_model.SGINetModel.reparameterize", "sgi_model.SGINetModel.netG_shape_decoder", "model_input[].unsqueeze().unsqueeze", "model_input[].unique", "model_input[].unsqueeze", "sgi_model.SGINetModel.instance_transformed.detach"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.AlexNet.forward", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.models.sgi_model.SGINetModel.ch_to_one_hot", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.models.sgi_model.SGINetModel.pad_to_nClass", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.models.sgi_model.SGINetModel.pad_to_nClass", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.AlexNet.forward", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.models.sgi_model.SGINetModel.ch_to_one_hot", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.models.sgi_model.SGINetModel.reparameterize", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.models.sgi_model.SGINetModel.reparameterize"], ["", "def", "inference", "(", "self", ",", "model_input", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "torch", ".", "any", "(", "model_input", "[", "'inst_maps_valid_idx'", "]", ".", "unique", "(", ")", "!=", "-", "1", ")", ".", "item", "(", ")", ":", "\n", "                ", "if", "model_input", "[", "\"use_gt_instance_encoder\"", "]", ":", "\n", "                    ", "self", ".", "class_conditioning", "=", "self", ".", "ch_to_one_hot", "(", "\n", "model_input", "[", "\"inst_maps_valid_idx\"", "]", ",", "\n", "model_input", "[", "\"compute_instance\"", "]", ")", "\n", "self", ".", "mu", ",", "self", ".", "logvar", "=", "self", ".", "netG_shape_encoder", "(", "\n", "model_input", "[", "\"inst_maps_compact\"", "]", ",", "\n", "self", ".", "class_conditioning", ",", "model_input", "[", "\"theta_transform\"", "]", ")", "\n", "self", ".", "z_rep", "=", "self", ".", "reparameterize", "(", "self", ".", "mu", ",", "self", ".", "logvar", ",", "\n", "\"train\"", ")", "\n", "", "else", ":", "\n", "                    ", "test_z_appr", "=", "model_input", "[", "\"test_z_appr\"", "]", "\n", "self", ".", "z_rep", "=", "self", ".", "reparameterize", "(", "test_z_appr", ",", "None", ",", "\"test\"", ")", "\n", "", "self", ".", "class_conditioning", "=", "self", ".", "ch_to_one_hot", "(", "\n", "model_input", "[", "\"inst_maps_valid_idx\"", "]", ",", "\n", "model_input", "[", "\"compute_instance\"", "]", ")", "\n", "self", ".", "instance", "=", "self", ".", "netG_shape_decoder", "(", "self", ".", "z_rep", ",", "\n", "self", ".", "class_conditioning", ",", "model_input", "[", "\"theta_transform\"", "]", ")", "*", "model_input", "[", "\"compute_instance\"", "]", ".", "unsqueeze", "(", "\n", "2", ")", ".", "unsqueeze", "(", "2", ")", "\n", "self", ".", "instance_transformed", "=", "self", ".", "stn_fix", "(", "self", ".", "instance", ",", "\n", "model_input", "[", "\n", "\"theta_transform\"", "]", ",", "\n", "self", ".", "image_width", ",", "\n", "self", ".", "image_height", ")", "\n", "self", ".", "instance_masked", "=", "(", "\n", "self", ".", "instance_transformed", ".", "detach", "(", ")", "*", "model_input", "[", "\n", "\"insta_maps_bbox\"", "]", ")", ".", "float", "(", ")", "\n", "self", ".", "instance_pad", "=", "self", ".", "pad_to_nClass", "(", "(", "self", ".", "instance_masked", ">", "0.5", ")", ".", "float", "(", ")", ",", "\n", "model_input", "[", "\"masks\"", "]", ",", "\n", "model_input", "[", "'compute_instance'", "]", ",", "\n", "model_input", "[", "\"inst_maps_valid_idx\"", "]", ")", "\n", "one_hot_gt_seg_maps_masked_pre", "=", "model_input", "[", "\"one_hot_gt_seg_maps_masked\"", "]", "\n", "input_concat_no_cond", "=", "True", "\n", "", "else", ":", "\n", "                ", "input_concat_no_cond", "=", "False", "\n", "self", ".", "instance_pad", "=", "self", ".", "pad_to_nClass", "(", "model_input", "[", "\"inst_maps\"", "]", ",", "\n", "model_input", "[", "\"masks\"", "]", ",", "\n", "model_input", "[", "\n", "'compute_instance'", "]", ",", "\n", "model_input", "[", "\n", "\"inst_maps_valid_idx\"", "]", ")", "\n", "self", ".", "instance_masked", "=", "model_input", "[", "\"inst_maps\"", "]", "\n", "", "multi_scale_fake_seg_maps", ",", "fake_images", ",", "offset_flow", "=", "self", ".", "netG", ".", "forward", "(", "model_input", "[", "\"one_hot_gt_seg_maps_masked\"", "]", ",", "\n", "model_input", "[", "\"gt_images_masked\"", "]", ",", "\n", "model_input", "[", "\"masks\"", "]", ",", "self", ".", "instance_masked", ")", "\n", "if", "input_concat_no_cond", ":", "\n", "                ", "fake_seg_maps_no", ",", "fake_images_no", ",", "offset_flow_no", "=", "self", ".", "netG", ".", "forward", "(", "model_input", "[", "\"one_hot_gt_seg_maps_masked\"", "]", ",", "\n", "model_input", "[", "\"gt_images_masked\"", "]", ",", "\n", "model_input", "[", "\"masks\"", "]", ",", "\n", "self", ".", "instance_masked", "*", "0", ")", "\n", "", "else", ":", "\n", "                ", "fake_seg_maps_no", ",", "fake_images_no", ",", "offset_flow_no", ",", "one_hot_gt_seg_maps_masked_pre", "=", "multi_scale_fake_seg_maps", ",", "fake_images", ",", "offset_flow", ",", "model_input", "[", "\"one_hot_gt_seg_maps_masked\"", "]", "\n", "", "return", "fake_images", ",", "self", ".", "instance_pad", ",", "multi_scale_fake_seg_maps", "[", "-", "1", "]", ",", "offset_flow", ",", "model_input", "[", "\"one_hot_gt_seg_maps_masked\"", "]", ",", "[", "fake_images_no", ",", "fake_seg_maps_no", "[", "-", "1", "]", ",", "offset_flow_no", ",", "one_hot_gt_seg_maps_masked_pre", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.models.sgi_model.SGINetModel.save": [[512, 525], ["sgi_model.SGINetModel.save_network", "sgi_model.SGINetModel.save_network", "sgi_model.SGINetModel.save_network", "sgi_model.SGINetModel.save_network", "sgi_model.SGINetModel.save_network", "sgi_model.SGINetModel.save_network"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.base_model.BaseModel.save_network"], ["", "", "def", "save", "(", "self", ",", "which_epoch", ")", ":", "\n", "        ", "self", ".", "save_network", "(", "self", ".", "netG", ",", "'SLG_NET_G'", ",", "which_epoch", ",", "self", ".", "gpu_ids", ")", "\n", "if", "self", ".", "opt", ".", "use_bbox", ":", "\n", "            ", "self", ".", "save_network", "(", "self", ".", "netG_shape_encoder", ",", "\"SLG_NET_INST_ENC\"", ",", "which_epoch", ",", "self", ".", "gpu_ids", ")", "\n", "self", ".", "save_network", "(", "self", ".", "netG_shape_decoder", ",", "\"SLG_NET_INST_DEC\"", ",", "\n", "which_epoch", ",", "self", ".", "gpu_ids", ")", "\n", "self", ".", "save_network", "(", "self", ".", "netD_obj", ",", "'SLG_NET_D_OBJ'", ",", "which_epoch", ",", "\n", "self", ".", "gpu_ids", ")", "\n", "", "self", ".", "save_network", "(", "self", ".", "netD_global", ",", "'SLG_NET_D_GLOBAL'", ",", "which_epoch", ",", "\n", "self", ".", "gpu_ids", ")", "\n", "if", "self", ".", "gen_features", ":", "\n", "            ", "self", ".", "save_network", "(", "self", ".", "netE", ",", "'SLG_NET_E'", ",", "which_epoch", ",", "\n", "self", ".", "gpu_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.models.sgi_model.SGINetModel.update_fixed_params": [[526, 536], ["list", "torch.optim.Adam", "sgi_model.SGINetModel.netG.parameters", "list", "print", "sgi_model.SGINetModel.netE.parameters"], "methods", ["None"], ["", "", "def", "update_fixed_params", "(", "self", ")", ":", "\n", "# after fixing the global generator for a number of iterations, also start finetuning it", "\n", "        ", "params", "=", "list", "(", "self", ".", "netG", ".", "parameters", "(", ")", ")", "\n", "if", "self", ".", "gen_features", ":", "\n", "            ", "params", "+=", "list", "(", "self", ".", "netE", ".", "parameters", "(", ")", ")", "\n", "", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "self", ".", "opt", ".", "lr", ",", "\n", "betas", "=", "(", "self", ".", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "if", "self", ".", "opt", ".", "verbose", ":", "\n", "            ", "print", "(", "\n", "'------------ Now also finetuning global generator -----------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.models.sgi_model.SGINetModel.update_learning_rate": [[537, 547], ["print"], "methods", ["None"], ["", "", "def", "update_learning_rate", "(", "self", ")", ":", "\n", "        ", "lrd", "=", "self", ".", "opt", ".", "lr", "/", "self", ".", "opt", ".", "niter_decay", "\n", "lr", "=", "self", ".", "old_lr", "-", "lrd", "\n", "for", "param_group", "in", "self", ".", "optimizer_D", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "for", "param_group", "in", "self", ".", "optimizer_G", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "if", "self", ".", "opt", ".", "verbose", ":", "\n", "            ", "print", "(", "'update learning rate: %f -> %f'", "%", "(", "self", ".", "old_lr", ",", "lr", ")", ")", "\n", "", "self", ".", "old_lr", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.models.sgi_model.SGINetInferenceModel.__init__": [[550, 552], ["sgi_model.SGINetModel.__init__"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "SGINetInferenceModel", ",", "self", ")", ".", "__init__", "(", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.models.sgi_model.SGINetInferenceModel.forward": [[553, 555], ["sgi_model.SGINetInferenceModel.inference"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.models.sgi_model.SGINetModel.inference"], ["", "def", "forward", "(", "self", ",", "model_input", ")", ":", "\n", "        ", "return", "self", ".", "inference", "(", "model_input", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.models.sgi_model.weights_init": [[18, 27], ["classname.find", "m.weight.data.normal_", "classname.find", "hasattr", "m.weight.data.normal_", "hasattr", "m.bias.data.fill_"], "function", ["None"], ["def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "        ", "if", "hasattr", "(", "m", ",", "'weight'", ")", "and", "m", ".", "weight", "is", "not", "None", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.models.sgi_model.get_norm_layer": [[29, 37], ["functools.partial", "functools.partial", "NotImplementedError"], "function", ["None"], ["", "", "", "def", "get_norm_layer", "(", "norm_type", "=", "'instance'", ")", ":", "\n", "    ", "if", "norm_type", "==", "'batch'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "BatchNorm2d", ",", "affine", "=", "True", ")", "\n", "", "elif", "norm_type", "==", "'instance'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'normalization layer [%s] is not found'", "%", "norm_type", ")", "\n", "", "return", "norm_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.models.sgi_model.get_activation_layer": [[39, 47], ["functools.partial", "functools.partial", "NotImplementedError"], "function", ["None"], ["", "def", "get_activation_layer", "(", "activation_type", "=", "\"elu\"", ")", ":", "\n", "    ", "if", "activation_type", "==", "'elu'", ":", "\n", "        ", "activation_layer", "=", "functools", ".", "partial", "(", "nn", ".", "ELU", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_type", "==", "'relu'", ":", "\n", "        ", "activation_layer", "=", "functools", ".", "partial", "(", "nn", ".", "ReLU", ",", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'activation layer [%s] is not found'", "%", "activation_type", ")", "\n", "", "return", "activation_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.models.base_model.BaseModel.name": [[7, 9], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'BaseModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.models.base_model.BaseModel.__init__": [[10, 16], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__"], ["", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "BaseModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "gpu_ids", "=", "opt", ".", "gpu_ids", "\n", "self", ".", "isTrain", "=", "opt", ".", "isTrain", "\n", "self", ".", "Tensor", "=", "torch", ".", "cuda", ".", "FloatTensor", "if", "self", ".", "gpu_ids", "else", "torch", ".", "Tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.models.base_model.BaseModel.set_input": [[17, 19], ["None"], "methods", ["None"], ["", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "        ", "self", ".", "input", "=", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.models.base_model.BaseModel.forward": [[20, 22], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.models.base_model.BaseModel.test": [[24, 26], ["None"], "methods", ["None"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.models.base_model.BaseModel.get_image_paths": [[27, 29], ["None"], "methods", ["None"], ["", "def", "get_image_paths", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.models.base_model.BaseModel.optimize_parameters": [[30, 32], ["None"], "methods", ["None"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.models.base_model.BaseModel.get_current_visuals": [[33, 35], ["None"], "methods", ["None"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.models.base_model.BaseModel.get_current_errors": [[36, 38], ["None"], "methods", ["None"], ["", "def", "get_current_errors", "(", "self", ")", ":", "\n", "        ", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.models.base_model.BaseModel.save": [[39, 41], ["None"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "label", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.models.base_model.BaseModel.save_network": [[43, 48], ["os.path.join", "print", "torch.save", "network.state_dict"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.save"], ["", "def", "save_network", "(", "self", ",", "network", ",", "network_label", ",", "epoch_label", ",", "gpu_ids", ")", ":", "\n", "        ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch_label", ",", "network_label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "save_filename", ")", "\n", "print", "(", "save_path", ")", "\n", "torch", ".", "save", "(", "network", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.models.base_model.BaseModel.load_network": [[50, 101], ["os.path.join", "os.path.isfile", "print", "len", "torch.distributed.barrier", "network.load_state_dict", "torch.distributed.barrier", "network.load_state_dict", "torch.load", "network.state_dict", "torch.load", "torch.load", "network.load_state_dict", "print", "print", "torch.load.items", "network.state_dict.items", "print", "network.load_state_dict", "torch.load.items", "set", "Set", "sorted", "v.size", "model_dict[].size", "Set.add", "v.size", "pretrained_dict[].size", "k.split"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.configuration.load", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.configuration.load", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.configuration.load", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size"], ["", "def", "load_network", "(", "self", ",", "network", ",", "network_label", ",", "epoch_label", ",", "save_dir", "=", "''", ")", ":", "\n", "        ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch_label", ",", "network_label", ")", "\n", "if", "not", "save_dir", ":", "\n", "            ", "save_dir", "=", "self", ".", "save_dir", "\n", "", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "save_filename", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "save_path", ")", ":", "\n", "            ", "print", "(", "'%s not exists yet!'", "%", "save_path", ")", "\n", "if", "network_label", "==", "'G'", ":", "\n", "                ", "raise", "(", "'Generator must exist!'", ")", "\n", "", "", "else", ":", "\n", "# network.load_state_dict(torch.load(save_path))", "\n", "            ", "try", ":", "\n", "                ", "if", "len", "(", "self", ".", "opt", ".", "gpu_ids", ")", ">", "1", ":", "\n", "                    ", "torch", ".", "distributed", ".", "barrier", "(", ")", "\n", "# configure map_location properly", "\n", "map_location", "=", "{", "'cuda:%d'", "%", "0", ":", "'cuda:%d'", "%", "self", ".", "opt", ".", "local_rank", "}", "\n", "network", ".", "load_state_dict", "(", "\n", "torch", ".", "load", "(", "save_path", ",", "map_location", "=", "map_location", ")", ")", "\n", "torch", ".", "distributed", ".", "barrier", "(", ")", "\n", "", "else", ":", "\n", "                    ", "network", ".", "load_state_dict", "(", "torch", ".", "load", "(", "save_path", ")", ")", "\n", "", "", "except", ":", "\n", "                ", "pretrained_dict", "=", "torch", ".", "load", "(", "save_path", ")", "\n", "model_dict", "=", "network", ".", "state_dict", "(", ")", "\n", "try", ":", "\n", "                    ", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "\n", "if", "k", "in", "model_dict", "}", "\n", "network", ".", "load_state_dict", "(", "pretrained_dict", ")", "\n", "if", "self", ".", "opt", ".", "verbose", ":", "\n", "                        ", "print", "(", "\n", "'Pretrained network %s has excessive layers; Only loading layers that are used'", "%", "network_label", ")", "\n", "", "", "except", ":", "\n", "                    ", "print", "(", "\n", "'Pretrained network %s has fewer layers; The following are not initialized:'", "%", "network_label", ")", "\n", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", ":", "\n", "                        ", "if", "v", ".", "size", "(", ")", "==", "model_dict", "[", "k", "]", ".", "size", "(", ")", ":", "\n", "                            ", "model_dict", "[", "k", "]", "=", "v", "\n", "\n", "", "", "if", "sys", ".", "version_info", ">=", "(", "3", ",", "0", ")", ":", "\n", "                        ", "not_initialized", "=", "set", "(", ")", "\n", "", "else", ":", "\n", "                        ", "from", "sets", "import", "Set", "\n", "not_initialized", "=", "Set", "(", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "model_dict", ".", "items", "(", ")", ":", "\n", "                        ", "if", "k", "not", "in", "pretrained_dict", "or", "v", ".", "size", "(", ")", "!=", "pretrained_dict", "[", "k", "]", ".", "size", "(", ")", ":", "\n", "                            ", "not_initialized", ".", "add", "(", "k", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "\n", "", "", "print", "(", "sorted", "(", "not_initialized", ")", ")", "\n", "network", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.models.base_model.BaseModel.update_learning_rate": [[102, 104], ["None"], "methods", ["None"], ["", "", "", "", "def", "update_learning_rate", "(", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.Upsample.__init__": [[26, 30], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__"], ["    ", "def", "__init__", "(", "self", ",", "scale_factor", ",", "mode", "=", "\"bilinear\"", ")", ":", "\n", "        ", "super", "(", "Upsample", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "self", ".", "mode", "=", "mode", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.Upsample.forward": [[30, 32], ["torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "F", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "self", ".", "scale_factor", ",", "mode", "=", "self", ".", "mode", ",", "align_corners", "=", "True", "if", "self", ".", "mode", "==", "\"bilinear\"", "else", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.Identity.__init__": [[68, 70], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "values", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.Identity.forward": [[71, 73], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_var", ")", ":", "\n", "        ", "return", "input_var", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.FeatureFusionBlock.__init__": [[76, 89], ["torch.nn.Module.__init__", "base_function.FeatureFusionBlock.initialize_concat_layer", "base_function.FeatureFusionBlock.initialize_deep_layer"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.FeatureFusionBlock.initialize_concat_layer", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.FeatureFusionBlock.initialize_deep_layer"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "fusion_type", ",", "\n", "norm_fn", ",", "activation_fn", ",", "main_module", ")", ":", "\n", "        ", "super", "(", "FeatureFusionBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#assert in_planes == out_planes", "\n", "assert", "fusion_type", "in", "[", "'add'", ",", "'concat'", "]", "# 'deep']", "\n", "self", ".", "fusion_type", "=", "fusion_type", "\n", "self", ".", "main_module", "=", "main_module", "\n", "self", ".", "norm_fn", "=", "norm_fn", "\n", "self", ".", "activation_fn", "=", "activation_fn", "\n", "if", "fusion_type", "==", "'concat'", ":", "\n", "            ", "self", ".", "fuse_module", "=", "self", ".", "initialize_concat_layer", "(", "in_planes", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fuse_module", "=", "self", ".", "initialize_deep_layer", "(", "in_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.FeatureFusionBlock.initialize_concat_layer": [[90, 95], ["torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "base_function.FeatureFusionBlock.norm_fn"], "methods", ["None"], ["", "", "def", "initialize_concat_layer", "(", "self", ",", "in_planes", ")", ":", "\n", "        ", "self", ".", "nonlinear1", "=", "self", ".", "activation_fn", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", "*", "2", ",", "in_planes", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "norm1", "=", "self", ".", "norm_fn", "(", "in_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.FeatureFusionBlock.initialize_deep_layer": [[97, 99], ["None"], "methods", ["None"], ["", "def", "initialize_deep_layer", "(", "self", ",", "in_planes", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.FeatureFusionBlock.forward": [[100, 111], ["base_function.FeatureFusionBlock.main_module", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "base_function.FeatureFusionBlock.nonlinear1", "base_function.FeatureFusionBlock.conv1", "base_function.FeatureFusionBlock.norm1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "#out = self.main_module(x)", "\n", "        ", "if", "self", ".", "fusion_type", "==", "'add'", ":", "\n", "            ", "out", "=", "x", "+", "y", "\n", "", "elif", "self", ".", "fusion_type", "==", "'concat'", ":", "\n", "            ", "out", "=", "torch", ".", "cat", "(", "[", "x", ",", "y", "]", ",", "1", ")", "\n", "out", "=", "self", ".", "nonlinear1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "norm1", "(", "out", ")", "\n", "", "out", "=", "self", ".", "main_module", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.NetEdgeHorizontal1.__init__": [[150, 158], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "base_function.NetEdgeHorizontal1.conv.apply", "torch.nn.ZeroPad2d", "torch.nn.ZeroPad2d", "torch.nn.ZeroPad2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "NetEdgeHorizontal1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "1", ",", "1", ",", "kernel_size", "=", "(", "1", ",", "2", ")", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv", ".", "apply", "(", "weights_init_horizontal1", ")", "\n", "self", ".", "conv", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "self", ".", "pad", "=", "nn", ".", "ZeroPad2d", "(", "(", "1", ",", "0", ",", "0", ",", "0", ")", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.NetEdgeHorizontal1.forward": [[159, 164], ["base_function.NetEdgeHorizontal1.conv", "base_function.NetEdgeHorizontal1.pad", "base_function.NetEdgeHorizontal1.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "mask", ")", ":", "\n", "        ", "edge", "=", "self", ".", "conv", "(", "mask", ")", "\n", "edge", "=", "self", ".", "pad", "(", "edge", ")", "\n", "edge", "=", "self", ".", "relu", "(", "edge", ")", "\n", "return", "edge", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.NetEdgeHorizontal2.__init__": [[167, 175], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "base_function.NetEdgeHorizontal2.conv.apply", "torch.nn.ZeroPad2d", "torch.nn.ZeroPad2d", "torch.nn.ZeroPad2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "NetEdgeHorizontal2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "1", ",", "1", ",", "kernel_size", "=", "(", "1", ",", "2", ")", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv", ".", "apply", "(", "weights_init_horizontal2", ")", "\n", "self", ".", "conv", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "self", ".", "pad", "=", "nn", ".", "ZeroPad2d", "(", "(", "0", ",", "1", ",", "0", ",", "0", ")", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.NetEdgeHorizontal2.forward": [[176, 181], ["base_function.NetEdgeHorizontal2.conv", "base_function.NetEdgeHorizontal2.pad", "base_function.NetEdgeHorizontal2.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "mask", ")", ":", "\n", "        ", "edge", "=", "self", ".", "conv", "(", "mask", ")", "\n", "edge", "=", "self", ".", "pad", "(", "edge", ")", "\n", "edge", "=", "self", ".", "relu", "(", "edge", ")", "\n", "return", "edge", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.NetEdgeVertical1.__init__": [[184, 192], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "base_function.NetEdgeVertical1.conv.apply", "torch.nn.ZeroPad2d", "torch.nn.ZeroPad2d", "torch.nn.ZeroPad2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "NetEdgeVertical1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "1", ",", "1", ",", "kernel_size", "=", "(", "2", ",", "1", ")", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv", ".", "apply", "(", "weights_init_vertical1", ")", "\n", "self", ".", "conv", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "self", ".", "pad", "=", "nn", ".", "ZeroPad2d", "(", "(", "0", ",", "0", ",", "1", ",", "0", ")", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.NetEdgeVertical1.forward": [[193, 198], ["base_function.NetEdgeVertical1.conv", "base_function.NetEdgeVertical1.pad", "base_function.NetEdgeVertical1.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "mask", ")", ":", "\n", "        ", "edge", "=", "self", ".", "conv", "(", "mask", ")", "\n", "edge", "=", "self", ".", "pad", "(", "edge", ")", "\n", "edge", "=", "self", ".", "relu", "(", "edge", ")", "\n", "return", "edge", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.NetEdgeVertical2.__init__": [[201, 209], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "base_function.NetEdgeVertical2.conv.apply", "torch.nn.ZeroPad2d", "torch.nn.ZeroPad2d", "torch.nn.ZeroPad2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "NetEdgeVertical2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "1", ",", "1", ",", "kernel_size", "=", "(", "2", ",", "1", ")", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv", ".", "apply", "(", "weights_init_vertical2", ")", "\n", "self", ".", "conv", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "self", ".", "pad", "=", "nn", ".", "ZeroPad2d", "(", "(", "0", ",", "0", ",", "0", ",", "1", ")", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.NetEdgeVertical2.forward": [[210, 215], ["base_function.NetEdgeVertical2.conv", "base_function.NetEdgeVertical2.pad", "base_function.NetEdgeVertical2.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "mask", ")", ":", "\n", "        ", "edge", "=", "self", ".", "conv", "(", "mask", ")", "\n", "edge", "=", "self", ".", "pad", "(", "edge", ")", "\n", "edge", "=", "self", ".", "relu", "(", "edge", ")", "\n", "return", "edge", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.STN_fixTheta.__init__": [[218, 221], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "STN_fixTheta", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "batch_size", "=", "opt", ".", "batchSize", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.STN_fixTheta.forward": [[222, 230], ["theta.view.view.view", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "gt", ",", "theta", ",", "output_sizex", ",", "output_sizey", ")", ":", "\n", "\n", "        ", "theta", "=", "theta", ".", "view", "(", "-", "1", ",", "2", ",", "3", ")", "\n", "\n", "gt_up", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "8", ")", "(", "gt", ")", "\n", "grid", "=", "F", ".", "affine_grid", "(", "theta", ",", "torch", ".", "Size", "(", "[", "self", ".", "batch_size", ",", "1", ",", "output_sizey", ",", "output_sizex", "]", ")", ")", "\n", "box", "=", "F", ".", "grid_sample", "(", "gt_up", ",", "grid", ")", "\n", "return", "box", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.SPADE.__init__": [[242, 270], ["torch.nn.Module.__init__", "config_text.startswith", "re.search", "str", "int", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "re.search.group", "re.search.group", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "models.functions.sync_batchnorm.SynchronizedBatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "ValueError"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config_text", ",", "norm_nc", ",", "label_nc", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "config_text", ".", "startswith", "(", "'spade'", ")", "\n", "parsed", "=", "re", ".", "search", "(", "'spade(\\D+)(\\d)x\\d'", ",", "config_text", ")", "\n", "param_free_norm_type", "=", "str", "(", "parsed", ".", "group", "(", "1", ")", ")", "\n", "ks", "=", "int", "(", "parsed", ".", "group", "(", "2", ")", ")", "\n", "\n", "if", "param_free_norm_type", "==", "'instance'", ":", "\n", "            ", "self", ".", "param_free_norm", "=", "nn", ".", "InstanceNorm2d", "(", "norm_nc", ",", "affine", "=", "False", ")", "\n", "", "elif", "param_free_norm_type", "==", "'syncbatch'", ":", "\n", "            ", "self", ".", "param_free_norm", "=", "SynchronizedBatchNorm2d", "(", "norm_nc", ",", "affine", "=", "False", ")", "\n", "", "elif", "param_free_norm_type", "==", "'batch'", ":", "\n", "            ", "self", ".", "param_free_norm", "=", "nn", ".", "BatchNorm2d", "(", "norm_nc", ",", "affine", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'%s is not a recognized param-free norm type in SPADE'", "\n", "%", "param_free_norm_type", ")", "\n", "\n", "# The dimension of the intermediate embedding space. Yes, hardcoded.", "\n", "", "nhidden", "=", "128", "\n", "\n", "pw", "=", "ks", "//", "2", "\n", "self", ".", "mlp_shared", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "label_nc", ",", "nhidden", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "mlp_gamma", "=", "nn", ".", "Conv2d", "(", "nhidden", ",", "norm_nc", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", "\n", "self", ".", "mlp_beta", "=", "nn", ".", "Conv2d", "(", "nhidden", ",", "norm_nc", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.SPADE.forward": [[271, 285], ["base_function.SPADE.param_free_norm", "base_function.SPADE.mlp_shared", "base_function.SPADE.mlp_gamma", "base_function.SPADE.mlp_beta"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "segmap", ")", ":", "\n", "\n", "# Part 1. generate parameter-free normalized activations", "\n", "        ", "normalized", "=", "self", ".", "param_free_norm", "(", "x", ")", "\n", "\n", "# Part 2. produce scaling and bias conditioned on semantic map", "\n", "actv", "=", "self", ".", "mlp_shared", "(", "segmap", ")", "\n", "gamma", "=", "self", ".", "mlp_gamma", "(", "actv", ")", "\n", "beta", "=", "self", ".", "mlp_beta", "(", "actv", ")", "\n", "\n", "# apply scale and bias", "\n", "out", "=", "normalized", "*", "(", "1", "+", "gamma", ")", "+", "beta", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.SPADEResnetBlock.__init__": [[288, 315], ["torch.nn.Module.__init__", "min", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "norm_G.replace", "base_function.SPADE", "base_function.SPADE", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch", "torch", "torch", "torch", "torch", "torch", "base_function.SPADE", "torch", "torch", "torch"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fin", ",", "fout", ",", "semantic_nc", ",", "seg_probs", "=", "True", ",", "gpu_ids", "=", "[", "0", "]", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "norm_G", "=", "'spadeinstance3x3'", "\n", "# Attributes", "\n", "self", ".", "seg_probs", "=", "seg_probs", "\n", "self", ".", "learned_shortcut", "=", "(", "fin", "!=", "fout", ")", "\n", "fmiddle", "=", "min", "(", "fin", ",", "fout", ")", "\n", "# create conv layers", "\n", "self", ".", "conv_0", "=", "nn", ".", "Conv2d", "(", "fin", ",", "fmiddle", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_1", "=", "nn", ".", "Conv2d", "(", "fmiddle", ",", "fout", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "if", "self", ".", "learned_shortcut", ":", "\n", "            ", "self", ".", "conv_s", "=", "nn", ".", "Conv2d", "(", "fin", ",", "fout", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "# apply spectral norm if specified", "\n", "", "if", "'spectral'", "in", "norm_G", ":", "\n", "            ", "self", ".", "conv_0", "=", "spectral_norm", "(", "self", ".", "conv_0", ")", "\n", "self", ".", "conv_1", "=", "spectral_norm", "(", "self", ".", "conv_1", ")", "\n", "if", "self", ".", "learned_shortcut", ":", "\n", "                ", "self", ".", "conv_s", "=", "spectral_norm", "(", "self", ".", "conv_s", ")", "\n", "\n", "# define normalization layers", "\n", "", "", "spade_config_str", "=", "norm_G", ".", "replace", "(", "'spectral'", ",", "''", ")", "\n", "self", ".", "norm_0", "=", "SPADE", "(", "spade_config_str", ",", "fin", ",", "semantic_nc", ")", "\n", "self", ".", "norm_1", "=", "SPADE", "(", "spade_config_str", ",", "fmiddle", ",", "semantic_nc", ")", "\n", "if", "self", ".", "learned_shortcut", ":", "\n", "            ", "self", ".", "norm_s", "=", "SPADE", "(", "spade_config_str", ",", "fin", ",", "semantic_nc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.SPADEResnetBlock.forward": [[318, 331], ["torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda.zero_", "torch.FloatTensor().cuda.zero_", "torch.FloatTensor().cuda.zero_", "torch.FloatTensor().cuda.scatter_", "torch.FloatTensor().cuda.scatter_", "torch.FloatTensor().cuda.scatter_", "base_function.SPADEResnetBlock.shortcut", "base_function.SPADEResnetBlock.conv_0", "base_function.SPADEResnetBlock.conv_1", "base_function.SPADEResnetBlock.actvn", "base_function.SPADEResnetBlock.actvn", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "base_function.SPADEResnetBlock.norm_0", "base_function.SPADEResnetBlock.norm_1"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.SPADEResnetBlock.shortcut", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.SPADEResnetBlock.actvn", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.SPADEResnetBlock.actvn"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "seg_map", "=", "None", ")", ":", "\n", "        ", "max_idx", "=", "torch", ".", "argmax", "(", "seg_map", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "seg", "=", "torch", ".", "FloatTensor", "(", "seg_map", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "seg", ".", "zero_", "(", ")", "\n", "seg", ".", "scatter_", "(", "1", ",", "max_idx", ",", "1", ")", "\n", "x_s", "=", "self", ".", "shortcut", "(", "x", ",", "seg", ")", "\n", "\n", "dx", "=", "self", ".", "conv_0", "(", "self", ".", "actvn", "(", "self", ".", "norm_0", "(", "x", ",", "seg", ")", ")", ")", "\n", "dx", "=", "self", ".", "conv_1", "(", "self", ".", "actvn", "(", "self", ".", "norm_1", "(", "dx", ",", "seg", ")", ")", ")", "\n", "\n", "out", "=", "x_s", "+", "dx", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.SPADEResnetBlock.shortcut": [[332, 338], ["base_function.SPADEResnetBlock.conv_s", "base_function.SPADEResnetBlock.norm_s"], "methods", ["None"], ["", "def", "shortcut", "(", "self", ",", "x", ",", "seg", ")", ":", "\n", "        ", "if", "self", ".", "learned_shortcut", ":", "\n", "            ", "x_s", "=", "self", ".", "conv_s", "(", "self", ".", "norm_s", "(", "x", ",", "seg", ")", ")", "\n", "", "else", ":", "\n", "            ", "x_s", "=", "x", "\n", "", "return", "x_s", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.SPADEResnetBlock.actvn": [[339, 341], ["torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu"], "methods", ["None"], ["", "def", "actvn", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "F", ".", "leaky_relu", "(", "x", ",", "2e-1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.BasicBlock_v3.__init__": [[354, 375], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "norm", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "base_function.conv3x3", "norm", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "base_function.conv3x3"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.conv3x3", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "\n", "dilation", "=", "(", "1", ",", "1", ")", ",", "residual", "=", "True", ",", "norm", "=", "BatchNorm", ",", "use_sn", "=", "True", ")", ":", "\n", "        ", "super", "(", "BasicBlock_v3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_block", "=", "[", "norm", "(", "planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ",", "\n", "padding", "=", "dilation", "[", "0", "]", ",", "dilation", "=", "dilation", "[", "0", "]", ",", "\n", "use_sn", "=", "use_sn", ")", "\n", "]", "\n", "\n", "self", ".", "conv_block", "+=", "[", "norm", "(", "planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "conv3x3", "(", "planes", ",", "planes", ",", "\n", "padding", "=", "dilation", "[", "0", "]", ",", "dilation", "=", "dilation", "[", "0", "]", ",", "\n", "use_sn", "=", "use_sn", ")", "\n", "]", "\n", "self", ".", "conv_block", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "conv_block", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "residual", "=", "residual", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.BasicBlock_v3.forward": [[376, 379], ["base_function.BasicBlock_v3.conv_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", "+", "self", ".", "conv_block", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.BasicBlock_v2.__init__": [[389, 406], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "base_function.conv3x3", "norm", "base_function.BasicBlock_v2.activation", "base_function.conv3x3", "norm"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.conv3x3", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "\n", "dilation", "=", "(", "1", ",", "1", ")", ",", "residual", "=", "True", ",", "norm", "=", "BatchNorm", ",", "use_sn", "=", "True", ",", "final_activation", "=", "False", ",", "activation", "=", "ReLU", ")", ":", "\n", "        ", "super", "(", "BasicBlock_v2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "conv_block", "=", "[", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ",", "\n", "padding", "=", "dilation", "[", "0", "]", ",", "dilation", "=", "dilation", "[", "0", "]", ",", "use_sn", "=", "use_sn", ")", ",", "\n", "norm", "(", "planes", ")", ",", "\n", "self", ".", "activation", "(", ")", "]", "\n", "\n", "self", ".", "conv_block", "+=", "[", "conv3x3", "(", "planes", ",", "planes", ",", "\n", "padding", "=", "1", ",", "dilation", "=", "1", ",", "use_sn", "=", "use_sn", ")", ",", "\n", "norm", "(", "planes", ")", "]", "\n", "self", ".", "conv_block", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "conv_block", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "residual", "=", "residual", "\n", "self", ".", "final_activation", "=", "final_activation", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.BasicBlock_v2.forward": [[407, 413], ["base_function.BasicBlock_v2.activation", "base_function.BasicBlock_v2.conv_block", "base_function.BasicBlock_v2.conv_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "final_activation", ":", "\n", "            ", "out", "=", "self", ".", "activation", "(", "x", "+", "self", ".", "conv_block", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "x", "+", "self", ".", "conv_block", "(", "x", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.BasicBlock.__init__": [[423, 436], ["torch.nn.Module.__init__", "base_function.conv3x3", "BatchNorm", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "base_function.conv3x3", "BatchNorm"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.conv3x3", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "\n", "dilation", "=", "(", "1", ",", "1", ")", ",", "residual", "=", "True", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ",", "\n", "padding", "=", "dilation", "[", "0", "]", ",", "dilation", "=", "dilation", "[", "0", "]", ")", "\n", "self", ".", "bn1", "=", "BatchNorm", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "\n", "padding", "=", "dilation", "[", "1", "]", ",", "dilation", "=", "dilation", "[", "1", "]", ")", "\n", "self", ".", "bn2", "=", "BatchNorm", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "residual", "=", "residual", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.BasicBlock.forward": [[437, 454], ["base_function.BasicBlock.conv1", "base_function.BasicBlock.bn1", "base_function.BasicBlock.relu", "base_function.BasicBlock.conv2", "base_function.BasicBlock.bn2", "base_function.BasicBlock.relu", "base_function.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "if", "self", ".", "residual", ":", "\n", "            ", "out", "+=", "residual", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.ContextualAttention.__init__": [[457, 468], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ksize", "=", "3", ",", "stride", "=", "1", ",", "rate", "=", "1", ",", "fuse_k", "=", "3", ",", "softmax_scale", "=", "10", ",", "\n", "fuse", "=", "False", ",", "use_cuda", "=", "False", ",", "device_ids", "=", "None", ")", ":", "\n", "        ", "super", "(", "ContextualAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ksize", "=", "ksize", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "rate", "=", "rate", "\n", "self", ".", "fuse_k", "=", "fuse_k", "\n", "self", ".", "softmax_scale", "=", "softmax_scale", "\n", "self", ".", "fuse", "=", "fuse", "\n", "self", ".", "use_cuda", "=", "use_cuda", "\n", "self", ".", "device_ids", "=", "device_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.ContextualAttention.forward": [[469, 629], ["list", "list", "utils.util.extract_image_patches", "raw_w.permute.permute.view", "raw_w.permute.permute.permute", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "list", "list", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "utils.util.extract_image_patches", "w.permute.permute.view", "w.permute.permute.permute", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "list", "utils.util.extract_image_patches", "m.permute.permute.view", "m.permute.permute.permute", "mm.permute.permute.permute", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.contiguous().view", "torch.cat.contiguous().view", "torch.cat.contiguous().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "offsets.view.view.view", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.interpolate.permute", "torch.interpolate.size", "torch.interpolate.size", "torch.interpolate.size", "torch.interpolate.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.interpolate", "torch.interpolate", "torch.interpolate", "mask.cuda.cuda.size", "fuse_weight.cuda.cuda.cuda", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "utils.util.same_padding", "torch.conv2d", "torch.conv2d", "torch.conv2d", "yi.permute().contiguous.permute().contiguous.view", "torch.softmax", "torch.softmax", "torch.softmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.append", "torch.cat.append", "torch.cat.append", "offsets.view.view.append", "ref_coordinate.cuda.cuda.cuda", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.interpolate.cuda", "torch.interpolate", "torch.interpolate", "torch.interpolate", "mask.cuda.cuda.cuda", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "escape_NaN.cuda.cuda.cuda", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "yi.permute().contiguous.permute().contiguous.view", "utils.util.same_padding", "torch.conv2d", "torch.conv2d", "torch.conv2d", "yi.permute().contiguous.permute().contiguous.contiguous().view", "yi.permute().contiguous.permute().contiguous.permute", "yi.permute().contiguous.permute().contiguous.contiguous().view", "utils.util.same_padding", "torch.conv2d", "torch.conv2d", "torch.conv2d", "yi.permute().contiguous.permute().contiguous.contiguous().view", "yi.permute().contiguous.permute().contiguous.permute().contiguous", "torch.conv_transpose2d", "torch.conv_transpose2d", "torch.conv_transpose2d", "torch.cat.contiguous", "torch.cat.contiguous", "torch.cat.contiguous", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "utils.util.flow_to_image", "utils.util.reduce_mean", "utils.util.reduce_sum", "float", "float", "offsets.view.view.permute().cpu().data.numpy", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "yi.permute().contiguous.permute().contiguous.contiguous", "yi.permute().contiguous.permute().contiguous.contiguous", "yi.permute().contiguous.permute().contiguous.contiguous", "yi.permute().contiguous.permute().contiguous.permute", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "offsets.view.view.permute().cpu", "offsets.view.view.permute"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.extract_image_patches", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.extract_image_patches", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.extract_image_patches", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.same_padding", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.same_padding", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.same_padding", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.flow_to_image", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.reduce_mean", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.reduce_sum"], ["", "def", "forward", "(", "self", ",", "f", ",", "b", ",", "mask", "=", "None", ")", ":", "\n", "        ", "\"\"\" Contextual attention layer implementation.\n        Contextual attention is first introduced in publication:\n            Generative Image Inpainting with Contextual Attention, Yu et al.\n        Args:\n            f: Input feature to match (foreground).\n            b: Input feature for match (background).\n            mask: Input mask for b, indicating patches not available.\n            ksize: Kernel size for contextual attention.\n            stride: Stride for extracting patches from b.\n            rate: Dilation for matching.\n            softmax_scale: Scaled softmax for attention.\n        Returns:\n            torch.tensor: output\n        \"\"\"", "\n", "# get shapes", "\n", "raw_int_fs", "=", "list", "(", "f", ".", "size", "(", ")", ")", "# b*c*h*w", "\n", "raw_int_bs", "=", "list", "(", "b", ".", "size", "(", ")", ")", "# b*c*h*w", "\n", "\n", "# extract patches from background with stride and rate", "\n", "kernel", "=", "2", "*", "self", ".", "rate", "\n", "# raw_w is extracted for reconstruction", "\n", "raw_w", "=", "util", ".", "extract_image_patches", "(", "b", ",", "ksizes", "=", "[", "kernel", ",", "kernel", "]", ",", "\n", "strides", "=", "[", "self", ".", "rate", "*", "self", ".", "stride", ",", "\n", "self", ".", "rate", "*", "self", ".", "stride", "]", ",", "\n", "rates", "=", "[", "1", ",", "1", "]", ",", "\n", "padding", "=", "'same'", ")", "# [N, C*k*k, L]", "\n", "# raw_shape: [N, C, k, k, L]", "\n", "raw_w", "=", "raw_w", ".", "view", "(", "raw_int_bs", "[", "0", "]", ",", "raw_int_bs", "[", "1", "]", ",", "kernel", ",", "kernel", ",", "-", "1", ")", "\n", "raw_w", "=", "raw_w", ".", "permute", "(", "0", ",", "4", ",", "1", ",", "2", ",", "3", ")", "# raw_shape: [N, L, C, k, k]", "\n", "raw_w_groups", "=", "torch", ".", "split", "(", "raw_w", ",", "1", ",", "dim", "=", "0", ")", "\n", "\n", "# downscaling foreground option: downscaling both foreground and", "\n", "# background for matching and use original background for reconstruction.", "\n", "f", "=", "F", ".", "interpolate", "(", "f", ",", "scale_factor", "=", "1.", "/", "self", ".", "rate", ",", "mode", "=", "'nearest'", ")", "\n", "b", "=", "F", ".", "interpolate", "(", "b", ",", "scale_factor", "=", "1.", "/", "self", ".", "rate", ",", "mode", "=", "'nearest'", ")", "\n", "int_fs", "=", "list", "(", "f", ".", "size", "(", ")", ")", "# b*c*h*w", "\n", "int_bs", "=", "list", "(", "b", ".", "size", "(", ")", ")", "\n", "f_groups", "=", "torch", ".", "split", "(", "f", ",", "1", ",", "dim", "=", "0", ")", "# split tensors along the batch dimension", "\n", "# w shape: [N, C*k*k, L]", "\n", "w", "=", "util", ".", "extract_image_patches", "(", "b", ",", "ksizes", "=", "[", "self", ".", "ksize", ",", "self", ".", "ksize", "]", ",", "\n", "strides", "=", "[", "self", ".", "stride", ",", "self", ".", "stride", "]", ",", "\n", "rates", "=", "[", "1", ",", "1", "]", ",", "\n", "padding", "=", "'same'", ")", "\n", "# w shape: [N, C, k, k, L]", "\n", "w", "=", "w", ".", "view", "(", "int_bs", "[", "0", "]", ",", "int_bs", "[", "1", "]", ",", "self", ".", "ksize", ",", "self", ".", "ksize", ",", "-", "1", ")", "\n", "w", "=", "w", ".", "permute", "(", "0", ",", "4", ",", "1", ",", "2", ",", "3", ")", "# w shape: [N, L, C, k, k]", "\n", "w_groups", "=", "torch", ".", "split", "(", "w", ",", "1", ",", "dim", "=", "0", ")", "\n", "\n", "# process mask", "\n", "if", "mask", "is", "None", ":", "\n", "            ", "mask", "=", "torch", ".", "zeros", "(", "[", "int_bs", "[", "0", "]", ",", "1", ",", "int_bs", "[", "2", "]", ",", "int_bs", "[", "3", "]", "]", ")", "\n", "if", "self", ".", "use_cuda", ":", "\n", "                ", "mask", "=", "mask", ".", "cuda", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "mask", "=", "F", ".", "interpolate", "(", "mask", ",", "scale_factor", "=", "1.", "/", "(", "4", "*", "self", ".", "rate", ")", ",", "mode", "=", "'nearest'", ")", "\n", "", "int_ms", "=", "list", "(", "mask", ".", "size", "(", ")", ")", "\n", "# m shape: [N, C*k*k, L]", "\n", "m", "=", "util", ".", "extract_image_patches", "(", "mask", ",", "ksizes", "=", "[", "self", ".", "ksize", ",", "self", ".", "ksize", "]", ",", "\n", "strides", "=", "[", "self", ".", "stride", ",", "self", ".", "stride", "]", ",", "\n", "rates", "=", "[", "1", ",", "1", "]", ",", "\n", "padding", "=", "'same'", ")", "\n", "# m shape: [N, C, k, k, L]", "\n", "m", "=", "m", ".", "view", "(", "int_ms", "[", "0", "]", ",", "int_ms", "[", "1", "]", ",", "self", ".", "ksize", ",", "self", ".", "ksize", ",", "-", "1", ")", "\n", "m", "=", "m", ".", "permute", "(", "0", ",", "4", ",", "1", ",", "2", ",", "3", ")", "# m shape: [N, L, C, k, k]", "\n", "m", "=", "m", "[", "0", "]", "# m shape: [L, C, k, k]", "\n", "# mm shape: [L, 1, 1, 1]", "\n", "mm", "=", "(", "util", ".", "reduce_mean", "(", "m", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ",", "keepdim", "=", "True", ")", "==", "0.", ")", ".", "to", "(", "torch", ".", "float32", ")", "\n", "mm", "=", "mm", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "# mm shape: [1, L, 1, 1]", "\n", "\n", "y", "=", "[", "]", "\n", "offsets", "=", "[", "]", "\n", "k", "=", "self", ".", "fuse_k", "\n", "scale", "=", "self", ".", "softmax_scale", "# to fit the PyTorch tensor image value range", "\n", "fuse_weight", "=", "torch", ".", "eye", "(", "k", ")", ".", "view", "(", "1", ",", "1", ",", "k", ",", "k", ")", "# 1*1*k*k", "\n", "if", "self", ".", "use_cuda", ":", "\n", "            ", "fuse_weight", "=", "fuse_weight", ".", "cuda", "(", ")", "\n", "\n", "", "for", "xi", ",", "wi", ",", "raw_wi", "in", "zip", "(", "f_groups", ",", "w_groups", ",", "raw_w_groups", ")", ":", "\n", "            ", "'''\n            O => output channel as a conv filter\n            I => input channel as a conv filter\n            xi : separated tensor along batch dimension of front; (B=1, C=128, H=32, W=32)\n            wi : separated patch tensor along batch dimension of back; (B=1, O=32*32, I=128, KH=3, KW=3)\n            raw_wi : separated tensor along batch dimension of back; (B=1, I=32*32, O=128, KH=4, KW=4)\n            '''", "\n", "# conv for compare", "\n", "escape_NaN", "=", "torch", ".", "FloatTensor", "(", "[", "1e-4", "]", ")", "\n", "if", "self", ".", "use_cuda", ":", "\n", "                ", "escape_NaN", "=", "escape_NaN", ".", "cuda", "(", ")", "\n", "", "wi", "=", "wi", "[", "0", "]", "# [L, C, k, k]", "\n", "max_wi", "=", "torch", ".", "max", "(", "torch", ".", "sqrt", "(", "util", ".", "reduce_sum", "(", "torch", ".", "pow", "(", "wi", ",", "2", ")", ",", "\n", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ",", "\n", "keepdim", "=", "True", ")", ")", ",", "\n", "escape_NaN", ")", "\n", "wi_normed", "=", "wi", "/", "max_wi", "\n", "# xi shape: [1, C, H, W], yi shape: [1, L, H, W]", "\n", "xi", "=", "util", ".", "same_padding", "(", "xi", ",", "[", "self", ".", "ksize", ",", "self", ".", "ksize", "]", ",", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ")", "# xi: 1*c*H*W", "\n", "yi", "=", "F", ".", "conv2d", "(", "xi", ",", "wi_normed", ",", "stride", "=", "1", ")", "# [1, L, H, W]", "\n", "# conv implementation for fuse scores to encourage large patches", "\n", "if", "self", ".", "fuse", ":", "\n", "# make all of depth to spatial resolution", "\n", "                ", "yi", "=", "yi", ".", "view", "(", "1", ",", "1", ",", "int_bs", "[", "2", "]", "*", "int_bs", "[", "3", "]", ",", "int_fs", "[", "2", "]", "*", "int_fs", "[", "3", "]", ")", "# (B=1, I=1, H=32*32, W=32*32)", "\n", "yi", "=", "util", ".", "same_padding", "(", "yi", ",", "[", "k", ",", "k", "]", ",", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ")", "\n", "yi", "=", "F", ".", "conv2d", "(", "yi", ",", "fuse_weight", ",", "stride", "=", "1", ")", "# (B=1, C=1, H=32*32, W=32*32)", "\n", "yi", "=", "yi", ".", "contiguous", "(", ")", ".", "view", "(", "1", ",", "int_bs", "[", "2", "]", ",", "int_bs", "[", "3", "]", ",", "int_fs", "[", "2", "]", ",", "int_fs", "[", "3", "]", ")", "# (B=1, 32, 32, 32, 32)", "\n", "yi", "=", "yi", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "4", ",", "3", ")", "\n", "yi", "=", "yi", ".", "contiguous", "(", ")", ".", "view", "(", "1", ",", "1", ",", "int_bs", "[", "2", "]", "*", "int_bs", "[", "3", "]", ",", "int_fs", "[", "2", "]", "*", "int_fs", "[", "3", "]", ")", "\n", "yi", "=", "util", ".", "same_padding", "(", "yi", ",", "[", "k", ",", "k", "]", ",", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ")", "\n", "yi", "=", "F", ".", "conv2d", "(", "yi", ",", "fuse_weight", ",", "stride", "=", "1", ")", "\n", "yi", "=", "yi", ".", "contiguous", "(", ")", ".", "view", "(", "1", ",", "int_bs", "[", "3", "]", ",", "int_bs", "[", "2", "]", ",", "int_fs", "[", "3", "]", ",", "int_fs", "[", "2", "]", ")", "\n", "yi", "=", "yi", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "4", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "", "yi", "=", "yi", ".", "view", "(", "1", ",", "int_bs", "[", "2", "]", "*", "int_bs", "[", "3", "]", ",", "int_fs", "[", "2", "]", ",", "int_fs", "[", "3", "]", ")", "# (B=1, C=32*32, H=32, W=32)", "\n", "# softmax to match", "\n", "yi", "=", "yi", "*", "mm", "\n", "yi", "=", "F", ".", "softmax", "(", "yi", "*", "scale", ",", "dim", "=", "1", ")", "\n", "yi", "=", "yi", "*", "mm", "# [1, L, H, W]", "\n", "\n", "offset", "=", "torch", ".", "argmax", "(", "yi", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# 1*1*H*W", "\n", "\n", "if", "int_bs", "!=", "int_fs", ":", "\n", "# Normalize the offset value to match foreground dimension", "\n", "                ", "times", "=", "float", "(", "int_fs", "[", "2", "]", "*", "int_fs", "[", "3", "]", ")", "/", "float", "(", "int_bs", "[", "2", "]", "*", "int_bs", "[", "3", "]", ")", "\n", "offset", "=", "(", "(", "offset", "+", "1", ")", ".", "float", "(", ")", "*", "times", "-", "1", ")", ".", "to", "(", "torch", ".", "int64", ")", "\n", "", "offset", "=", "torch", ".", "cat", "(", "[", "offset", "//", "int_fs", "[", "3", "]", ",", "offset", "%", "int_fs", "[", "3", "]", "]", ",", "dim", "=", "1", ")", "# 1*2*H*W", "\n", "\n", "# deconv for patch pasting", "\n", "wi_center", "=", "raw_wi", "[", "0", "]", "\n", "# yi = F.pad(yi, [0, 1, 0, 1])    # here may need conv_transpose same padding", "\n", "yi", "=", "F", ".", "conv_transpose2d", "(", "yi", ",", "wi_center", ",", "stride", "=", "self", ".", "rate", ",", "padding", "=", "1", ")", "/", "4.", "# (B=1, C=128, H=64, W=64)", "\n", "y", ".", "append", "(", "yi", ")", "\n", "offsets", ".", "append", "(", "offset", ")", "\n", "\n", "", "y", "=", "torch", ".", "cat", "(", "y", ",", "dim", "=", "0", ")", "# back to the mini-batch", "\n", "y", ".", "contiguous", "(", ")", ".", "view", "(", "raw_int_fs", ")", "\n", "\n", "offsets", "=", "torch", ".", "cat", "(", "offsets", ",", "dim", "=", "0", ")", "\n", "offsets", "=", "offsets", ".", "view", "(", "int_fs", "[", "0", "]", ",", "2", ",", "*", "int_fs", "[", "2", ":", "]", ")", "\n", "\n", "# case1: visualize optical flow: minus current position", "\n", "h_add", "=", "torch", ".", "arange", "(", "int_fs", "[", "2", "]", ")", ".", "view", "(", "[", "1", ",", "1", ",", "int_fs", "[", "2", "]", ",", "1", "]", ")", ".", "expand", "(", "int_fs", "[", "0", "]", ",", "-", "1", ",", "-", "1", ",", "int_fs", "[", "3", "]", ")", "\n", "w_add", "=", "torch", ".", "arange", "(", "int_fs", "[", "3", "]", ")", ".", "view", "(", "[", "1", ",", "1", ",", "1", ",", "int_fs", "[", "3", "]", "]", ")", ".", "expand", "(", "int_fs", "[", "0", "]", ",", "-", "1", ",", "int_fs", "[", "2", "]", ",", "-", "1", ")", "\n", "ref_coordinate", "=", "torch", ".", "cat", "(", "[", "h_add", ",", "w_add", "]", ",", "dim", "=", "1", ")", "\n", "if", "self", ".", "use_cuda", ":", "\n", "            ", "ref_coordinate", "=", "ref_coordinate", ".", "cuda", "(", ")", "\n", "\n", "", "offsets", "=", "offsets", "-", "ref_coordinate", "\n", "# flow = pt_flow_to_image(offsets)", "\n", "\n", "flow", "=", "torch", ".", "from_numpy", "(", "util", ".", "flow_to_image", "(", "offsets", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", ")", "/", "255.", "\n", "flow", "=", "flow", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "if", "self", ".", "use_cuda", ":", "\n", "            ", "flow", "=", "flow", ".", "cuda", "(", ")", "\n", "# case2: visualize which pixels are attended", "\n", "# flow = torch.from_numpy(highlight_flow((offsets * mask.long()).cpu().data.numpy()))", "\n", "\n", "", "if", "self", ".", "rate", "!=", "1", ":", "\n", "            ", "flow", "=", "F", ".", "interpolate", "(", "flow", ",", "scale_factor", "=", "self", ".", "rate", "*", "4", ",", "mode", "=", "'nearest'", ")", "\n", "\n", "", "return", "y", ",", "flow", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.conv3x3": [[34, 38], ["torch.nn.Sequential", "torch.nn.ReflectionPad2d", "torch", "torch.nn.Conv2d"], "function", ["None"], ["", "", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "use_sn", "=", "True", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "nn", ".", "ReflectionPad2d", "(", "padding", ")", ",", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "bias", "=", "not", "use_sn", ",", "dilation", "=", "dilation", ")", ",", "use_sn", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.get_input": [[41, 50], ["torch.nn.Sequential", "torch.nn.ReflectionPad2d", "torch", "norm_layer", "activation", "torch.nn.Conv2d"], "function", ["None"], ["", "def", "get_input", "(", "input_nc", ",", "norm_layer", ",", "use_sn_generator", ",", "ngf", ",", "activation", ")", ":", "\n", "    ", "encoder", "=", "[", "nn", ".", "ReflectionPad2d", "(", "2", ")", ",", "\n", "spectral_norm", "(", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "5", ",", "\n", "padding", "=", "0", ",", "\n", "stride", "=", "1", ")", ",", "use_sn_generator", ")", ",", "\n", "norm_layer", "(", "ngf", ")", ",", "\n", "activation", "(", ")", "]", "\n", "return", "nn", ".", "Sequential", "(", "*", "encoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.get_downsampler": [[52, 65], ["range", "torch.nn.Sequential", "torch.nn.ReflectionPad2d", "torch", "norm_layer", "activation", "torch.nn.Conv2d"], "function", ["None"], ["", "def", "get_downsampler", "(", "n_downsample_global", ",", "ngf", ",", "use_sn_generator", ",", "norm_layer", ",", "activation", ")", ":", "\n", "    ", "downsample", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_downsample_global", ")", ":", "\n", "        ", "mult", "=", "2", "**", "i", "\n", "downsample", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "spectral_norm", "(", "\n", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "2", "*", "mult", ",", "\n", "kernel_size", "=", "4", ",", "\n", "padding", "=", "0", ",", "stride", "=", "2", ")", ",", "\n", "use_sn_generator", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "2", "*", "mult", ")", ",", "\n", "activation", "(", ")", "]", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "downsample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.weights_init_horizontal1": [[113, 120], ["classname.find", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "function", ["None"], ["", "", "def", "weights_init_horizontal1", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "filter", "=", "torch", ".", "FloatTensor", "(", "1", ",", "1", ",", "1", ",", "2", ")", "\n", "filter", "[", "0", ",", "0", ",", "0", ",", "0", "]", "=", "-", "1", "\n", "filter", "[", "0", ",", "0", ",", "0", ",", "1", "]", "=", "1", "\n", "m", ".", "weight", ".", "data", "=", "filter", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.weights_init_horizontal2": [[122, 129], ["classname.find", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "function", ["None"], ["", "", "def", "weights_init_horizontal2", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "filter", "=", "torch", ".", "FloatTensor", "(", "1", ",", "1", ",", "1", ",", "2", ")", "\n", "filter", "[", "0", ",", "0", ",", "0", ",", "0", "]", "=", "1", "\n", "filter", "[", "0", ",", "0", ",", "0", ",", "1", "]", "=", "-", "1", "\n", "m", ".", "weight", ".", "data", "=", "filter", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.weights_init_vertical1": [[131, 138], ["classname.find", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "function", ["None"], ["", "", "def", "weights_init_vertical1", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "filter", "=", "torch", ".", "FloatTensor", "(", "1", ",", "1", ",", "2", ",", "1", ")", "\n", "filter", "[", "0", ",", "0", ",", "0", ",", "0", "]", "=", "-", "1", "\n", "filter", "[", "0", ",", "0", ",", "1", ",", "0", "]", "=", "1", "\n", "m", ".", "weight", ".", "data", "=", "filter", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.weights_init_vertical2": [[140, 147], ["classname.find", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "function", ["None"], ["", "", "def", "weights_init_vertical2", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "filter", "=", "torch", ".", "FloatTensor", "(", "1", ",", "1", ",", "2", ",", "1", ")", "\n", "filter", "[", "0", ",", "0", ",", "0", ",", "0", "]", "=", "1", "\n", "filter", "[", "0", ",", "0", ",", "1", ",", "0", "]", "=", "-", "1", "\n", "m", ".", "weight", ".", "data", "=", "filter", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.spectral_norm": [[631, 636], ["torch.nn.utils.spectral_norm"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.spectral_norm"], ["", "", "def", "spectral_norm", "(", "module", ",", "mode", "=", "True", ")", ":", "\n", "    ", "if", "mode", ":", "\n", "        ", "return", "nn", ".", "utils", ".", "spectral_norm", "(", "module", ")", "\n", "\n", "", "return", "module", "", "", ""]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.networks_basic.PNetLin.__init__": [[27, 62], ["torch.Module.__init__", "networks_basic.ScalingLayer", "len", "net_type", "networks_basic.NetLinLayer", "networks_basic.NetLinLayer", "networks_basic.NetLinLayer", "networks_basic.NetLinLayer", "networks_basic.NetLinLayer", "networks_basic.NetLinLayer", "networks_basic.NetLinLayer"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__"], ["    ", "def", "__init__", "(", "self", ",", "pnet_type", "=", "'vgg'", ",", "pnet_rand", "=", "False", ",", "pnet_tune", "=", "False", ",", "use_dropout", "=", "True", ",", "spatial", "=", "False", ",", "version", "=", "'0.1'", ",", "lpips", "=", "True", ")", ":", "\n", "        ", "super", "(", "PNetLin", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "pnet_type", "=", "pnet_type", "\n", "self", ".", "pnet_tune", "=", "pnet_tune", "\n", "self", ".", "pnet_rand", "=", "pnet_rand", "\n", "self", ".", "spatial", "=", "spatial", "\n", "self", ".", "lpips", "=", "lpips", "\n", "self", ".", "version", "=", "version", "\n", "self", ".", "scaling_layer", "=", "ScalingLayer", "(", ")", "\n", "\n", "if", "(", "self", ".", "pnet_type", "in", "[", "'vgg'", ",", "'vgg16'", "]", ")", ":", "\n", "            ", "net_type", "=", "pn", ".", "vgg16", "\n", "self", ".", "chns", "=", "[", "64", ",", "128", ",", "256", ",", "512", ",", "512", "]", "\n", "", "elif", "(", "self", ".", "pnet_type", "==", "'alex'", ")", ":", "\n", "            ", "net_type", "=", "pn", ".", "alexnet", "\n", "self", ".", "chns", "=", "[", "64", ",", "192", ",", "384", ",", "256", ",", "256", "]", "\n", "", "elif", "(", "self", ".", "pnet_type", "==", "'squeeze'", ")", ":", "\n", "            ", "net_type", "=", "pn", ".", "squeezenet", "\n", "self", ".", "chns", "=", "[", "64", ",", "128", ",", "256", ",", "384", ",", "384", ",", "512", ",", "512", "]", "\n", "", "self", ".", "L", "=", "len", "(", "self", ".", "chns", ")", "\n", "\n", "self", ".", "net", "=", "net_type", "(", "pretrained", "=", "not", "self", ".", "pnet_rand", ",", "requires_grad", "=", "self", ".", "pnet_tune", ")", "\n", "\n", "if", "(", "lpips", ")", ":", "\n", "            ", "self", ".", "lin0", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "0", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin1", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "1", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin2", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "2", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin3", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "3", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin4", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "4", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lins", "=", "[", "self", ".", "lin0", ",", "self", ".", "lin1", ",", "self", ".", "lin2", ",", "self", ".", "lin3", ",", "self", ".", "lin4", "]", "\n", "if", "(", "self", ".", "pnet_type", "==", "'squeeze'", ")", ":", "# 7 layers for squeezenet", "\n", "                ", "self", ".", "lin5", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "5", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin6", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "6", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lins", "+=", "[", "self", ".", "lin5", ",", "self", ".", "lin6", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.networks_basic.PNetLin.forward": [[63, 92], ["range", "range", "networks_basic.PNetLin.net.forward", "networks_basic.PNetLin.net.forward", "networks_basic.PNetLin.scaling_layer", "networks_basic.PNetLin.scaling_layer", "models.normalize_tensor", "models.normalize_tensor", "networks_basic.upsample", "networks_basic.spatial_average", "networks_basic.upsample", "networks_basic.spatial_average", "networks_basic.PNetLin.lins[].model", "range", "networks_basic.PNetLin.lins[].model", "range", "diffs[].sum", "range", "diffs[].sum", "range"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.AlexNet.forward", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.AlexNet.forward", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.normalize_tensor", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.normalize_tensor", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.networks_basic.upsample", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.spatial_average", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.networks_basic.upsample", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.spatial_average"], ["", "", "", "def", "forward", "(", "self", ",", "in0", ",", "in1", ",", "retPerLayer", "=", "False", ")", ":", "\n", "# v0.0 - original release had a bug, where input was not scaled", "\n", "        ", "in0_input", ",", "in1_input", "=", "(", "self", ".", "scaling_layer", "(", "in0", ")", ",", "self", ".", "scaling_layer", "(", "in1", ")", ")", "if", "self", ".", "version", "==", "'0.1'", "else", "(", "in0", ",", "in1", ")", "\n", "outs0", ",", "outs1", "=", "self", ".", "net", ".", "forward", "(", "in0_input", ")", ",", "self", ".", "net", ".", "forward", "(", "in1_input", ")", "\n", "feats0", ",", "feats1", ",", "diffs", "=", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "\n", "for", "kk", "in", "range", "(", "self", ".", "L", ")", ":", "\n", "            ", "feats0", "[", "kk", "]", ",", "feats1", "[", "kk", "]", "=", "util", ".", "normalize_tensor", "(", "outs0", "[", "kk", "]", ")", ",", "util", ".", "normalize_tensor", "(", "outs1", "[", "kk", "]", ")", "\n", "diffs", "[", "kk", "]", "=", "(", "feats0", "[", "kk", "]", "-", "feats1", "[", "kk", "]", ")", "**", "2", "\n", "\n", "", "if", "(", "self", ".", "lpips", ")", ":", "\n", "            ", "if", "(", "self", ".", "spatial", ")", ":", "\n", "                ", "res", "=", "[", "upsample", "(", "self", ".", "lins", "[", "kk", "]", ".", "model", "(", "diffs", "[", "kk", "]", ")", ",", "out_H", "=", "in0", ".", "shape", "[", "2", "]", ")", "for", "kk", "in", "range", "(", "self", ".", "L", ")", "]", "\n", "", "else", ":", "\n", "                ", "res", "=", "[", "spatial_average", "(", "self", ".", "lins", "[", "kk", "]", ".", "model", "(", "diffs", "[", "kk", "]", ")", ",", "keepdim", "=", "True", ")", "for", "kk", "in", "range", "(", "self", ".", "L", ")", "]", "\n", "", "", "else", ":", "\n", "            ", "if", "(", "self", ".", "spatial", ")", ":", "\n", "                ", "res", "=", "[", "upsample", "(", "diffs", "[", "kk", "]", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ",", "out_H", "=", "in0", ".", "shape", "[", "2", "]", ")", "for", "kk", "in", "range", "(", "self", ".", "L", ")", "]", "\n", "", "else", ":", "\n", "                ", "res", "=", "[", "spatial_average", "(", "diffs", "[", "kk", "]", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ",", "keepdim", "=", "True", ")", "for", "kk", "in", "range", "(", "self", ".", "L", ")", "]", "\n", "\n", "", "", "val", "=", "res", "[", "0", "]", "\n", "for", "l", "in", "range", "(", "1", ",", "self", ".", "L", ")", ":", "\n", "            ", "val", "+=", "res", "[", "l", "]", "\n", "\n", "", "if", "(", "retPerLayer", ")", ":", "\n", "            ", "return", "(", "val", ",", "res", ")", "\n", "", "else", ":", "\n", "            ", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.networks_basic.ScalingLayer.__init__": [[94, 98], ["torch.Module.__init__", "networks_basic.ScalingLayer.register_buffer", "networks_basic.ScalingLayer.register_buffer", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ScalingLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'shift'", ",", "torch", ".", "Tensor", "(", "[", "-", ".030", ",", "-", ".088", ",", "-", ".188", "]", ")", "[", "None", ",", ":", ",", "None", ",", "None", "]", ")", "\n", "self", ".", "register_buffer", "(", "'scale'", ",", "torch", ".", "Tensor", "(", "[", ".458", ",", ".448", ",", ".450", "]", ")", "[", "None", ",", ":", ",", "None", ",", "None", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.networks_basic.ScalingLayer.forward": [[99, 101], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "return", "(", "inp", "-", "self", ".", "shift", ")", "/", "self", ".", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.networks_basic.NetLinLayer.__init__": [[105, 111], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__"], ["def", "__init__", "(", "self", ",", "chn_in", ",", "chn_out", "=", "1", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "NetLinLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "layers", "=", "[", "nn", ".", "Dropout", "(", ")", ",", "]", "if", "(", "use_dropout", ")", "else", "[", "]", "\n", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "chn_in", ",", "chn_out", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "]", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.networks_basic.Dist2LogitLayer.__init__": [[115, 126], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__"], ["def", "__init__", "(", "self", ",", "chn_mid", "=", "32", ",", "use_sigmoid", "=", "True", ")", ":", "\n", "        ", "super", "(", "Dist2LogitLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "layers", "=", "[", "nn", ".", "Conv2d", "(", "5", ",", "chn_mid", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "]", "\n", "layers", "+=", "[", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "]", "\n", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "chn_mid", ",", "chn_mid", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "]", "\n", "layers", "+=", "[", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "]", "\n", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "chn_mid", ",", "1", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "]", "\n", "if", "(", "use_sigmoid", ")", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "Sigmoid", "(", ")", ",", "]", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.networks_basic.Dist2LogitLayer.forward": [[127, 129], ["networks_basic.Dist2LogitLayer.model.forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.AlexNet.forward"], ["", "def", "forward", "(", "self", ",", "d0", ",", "d1", ",", "eps", "=", "0.1", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "forward", "(", "torch", ".", "cat", "(", "(", "d0", ",", "d1", ",", "d0", "-", "d1", ",", "d0", "/", "(", "d1", "+", "eps", ")", ",", "d1", "/", "(", "d0", "+", "eps", ")", ")", ",", "dim", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.networks_basic.BCERankingLoss.__init__": [[131, 136], ["torch.Module.__init__", "networks_basic.Dist2LogitLayer", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__"], ["    ", "def", "__init__", "(", "self", ",", "chn_mid", "=", "32", ")", ":", "\n", "        ", "super", "(", "BCERankingLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "Dist2LogitLayer", "(", "chn_mid", "=", "chn_mid", ")", "\n", "# self.parameters = list(self.net.parameters())", "\n", "self", ".", "loss", "=", "torch", ".", "nn", ".", "BCELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.networks_basic.BCERankingLoss.forward": [[137, 141], ["networks_basic.BCERankingLoss.net.forward", "networks_basic.BCERankingLoss.loss"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.AlexNet.forward"], ["", "def", "forward", "(", "self", ",", "d0", ",", "d1", ",", "judge", ")", ":", "\n", "        ", "per", "=", "(", "judge", "+", "1.", ")", "/", "2.", "\n", "self", ".", "logit", "=", "self", ".", "net", ".", "forward", "(", "d0", ",", "d1", ")", "\n", "return", "self", ".", "loss", "(", "self", ".", "logit", ",", "per", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.networks_basic.FakeNet.__init__": [[144, 148], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__"], ["    ", "def", "__init__", "(", "self", ",", "use_gpu", "=", "True", ",", "colorspace", "=", "'Lab'", ")", ":", "\n", "        ", "super", "(", "FakeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "self", ".", "colorspace", "=", "colorspace", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.networks_basic.L2.forward": [[151, 165], ["in0.size", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "in0.size", "models.l2().astype", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "ret_var.cuda.cuda.cuda", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "models.l2", "models.tensor2np", "models.tensor2np", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "models.tensor2tensorlab", "models.tensor2tensorlab", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.l2", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2np", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2np", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2tensorlab", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2tensorlab"], ["    ", "def", "forward", "(", "self", ",", "in0", ",", "in1", ",", "retPerLayer", "=", "None", ")", ":", "\n", "        ", "assert", "(", "in0", ".", "size", "(", ")", "[", "0", "]", "==", "1", ")", "# currently only supports batchSize 1", "\n", "\n", "if", "(", "self", ".", "colorspace", "==", "'RGB'", ")", ":", "\n", "            ", "(", "N", ",", "C", ",", "X", ",", "Y", ")", "=", "in0", ".", "size", "(", ")", "\n", "value", "=", "torch", ".", "mean", "(", "torch", ".", "mean", "(", "torch", ".", "mean", "(", "(", "in0", "-", "in1", ")", "**", "2", ",", "dim", "=", "1", ")", ".", "view", "(", "N", ",", "1", ",", "X", ",", "Y", ")", ",", "dim", "=", "2", ")", ".", "view", "(", "N", ",", "1", ",", "1", ",", "Y", ")", ",", "dim", "=", "3", ")", ".", "view", "(", "N", ")", "\n", "return", "value", "\n", "", "elif", "(", "self", ".", "colorspace", "==", "'Lab'", ")", ":", "\n", "            ", "value", "=", "util", ".", "l2", "(", "util", ".", "tensor2np", "(", "util", ".", "tensor2tensorlab", "(", "in0", ".", "data", ",", "to_norm", "=", "False", ")", ")", ",", "\n", "util", ".", "tensor2np", "(", "util", ".", "tensor2tensorlab", "(", "in1", ".", "data", ",", "to_norm", "=", "False", ")", ")", ",", "range", "=", "100.", ")", ".", "astype", "(", "'float'", ")", "\n", "ret_var", "=", "Variable", "(", "torch", ".", "Tensor", "(", "(", "value", ",", ")", ")", ")", "\n", "if", "(", "self", ".", "use_gpu", ")", ":", "\n", "                ", "ret_var", "=", "ret_var", ".", "cuda", "(", ")", "\n", "", "return", "ret_var", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.networks_basic.DSSIM.forward": [[168, 180], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "models.dssim().astype", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "ret_var.cuda.cuda.cuda", "in0.size", "models.dssim().astype", "models.dssim", "models.dssim", "models.tensor2im", "models.tensor2im", "models.tensor2np", "models.tensor2np", "models.tensor2tensorlab", "models.tensor2tensorlab"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.dssim", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.dssim", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2np", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2np", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2tensorlab", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2tensorlab"], ["    ", "def", "forward", "(", "self", ",", "in0", ",", "in1", ",", "retPerLayer", "=", "None", ")", ":", "\n", "        ", "assert", "(", "in0", ".", "size", "(", ")", "[", "0", "]", "==", "1", ")", "# currently only supports batchSize 1", "\n", "\n", "if", "(", "self", ".", "colorspace", "==", "'RGB'", ")", ":", "\n", "            ", "value", "=", "util", ".", "dssim", "(", "1.", "*", "util", ".", "tensor2im", "(", "in0", ".", "data", ")", ",", "1.", "*", "util", ".", "tensor2im", "(", "in1", ".", "data", ")", ",", "range", "=", "255.", ")", ".", "astype", "(", "'float'", ")", "\n", "", "elif", "(", "self", ".", "colorspace", "==", "'Lab'", ")", ":", "\n", "            ", "value", "=", "util", ".", "dssim", "(", "util", ".", "tensor2np", "(", "util", ".", "tensor2tensorlab", "(", "in0", ".", "data", ",", "to_norm", "=", "False", ")", ")", ",", "\n", "util", ".", "tensor2np", "(", "util", ".", "tensor2tensorlab", "(", "in1", ".", "data", ",", "to_norm", "=", "False", ")", ")", ",", "range", "=", "100.", ")", ".", "astype", "(", "'float'", ")", "\n", "", "ret_var", "=", "Variable", "(", "torch", ".", "Tensor", "(", "(", "value", ",", ")", ")", ")", "\n", "if", "(", "self", ".", "use_gpu", ")", ":", "\n", "            ", "ret_var", "=", "ret_var", ".", "cuda", "(", ")", "\n", "", "return", "ret_var", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.networks_basic.spatial_average": [[16, 18], ["in_tens.mean"], "function", ["None"], ["def", "spatial_average", "(", "in_tens", ",", "keepdim", "=", "True", ")", ":", "\n", "    ", "return", "in_tens", ".", "mean", "(", "[", "2", ",", "3", "]", ",", "keepdim", "=", "keepdim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.networks_basic.upsample": [[19, 24], ["torch.Upsample"], "function", ["None"], ["", "def", "upsample", "(", "in_tens", ",", "out_H", "=", "64", ")", ":", "# assumes scale factor is same for H and W", "\n", "    ", "in_H", "=", "in_tens", ".", "shape", "[", "2", "]", "\n", "scale_factor", "=", "1.", "*", "out_H", "/", "in_H", "\n", "\n", "return", "nn", ".", "Upsample", "(", "scale_factor", "=", "scale_factor", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "(", "in_tens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.networks_basic.print_network": [[181, 187], ["net.parameters", "print", "print", "param.numel"], "function", ["None"], ["", "", "def", "print_network", "(", "net", ")", ":", "\n", "    ", "num_params", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "print", "(", "'Network'", ",", "net", ")", "\n", "print", "(", "'Total number of parameters: %d'", "%", "num_params", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.dist_model.DistModel.name": [[24, 26], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "model_name", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.dist_model.DistModel.initialize": [[27, 107], ["base_model.BaseModel.initialize", "list", "networks_basic.PNetLin", "dist_model.DistModel.net.parameters", "networks_basic.BCERankingLoss", "list", "torch.optim.Adam", "dist_model.DistModel.net.eval", "dist_model.DistModel.net.to", "torch.nn.DataParallel", "print", "networks_basic.print_network", "print", "os.path.abspath", "print", "dist_model.DistModel.net.load_state_dict", "networks_basic.PNetLin", "dist_model.DistModel.rankLoss.net.parameters", "dist_model.DistModel.rankLoss.to", "os.path.join", "torch.load", "networks_basic.L2", "inspect.getfile", "networks_basic.DSSIM", "ValueError"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.networks_basic.print_network", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.configuration.load"], ["", "def", "initialize", "(", "self", ",", "model", "=", "'net-lin'", ",", "net", "=", "'alex'", ",", "colorspace", "=", "'Lab'", ",", "pnet_rand", "=", "False", ",", "pnet_tune", "=", "False", ",", "model_path", "=", "None", ",", "\n", "use_gpu", "=", "True", ",", "printNet", "=", "False", ",", "spatial", "=", "False", ",", "\n", "is_train", "=", "False", ",", "lr", "=", ".0001", ",", "beta1", "=", "0.5", ",", "version", "=", "'0.1'", ",", "gpu_ids", "=", "[", "0", "]", ")", ":", "\n", "        ", "'''\n        INPUTS\n            model - ['net-lin'] for linearly calibrated network\n                    ['net'] for off-the-shelf network\n                    ['L2'] for L2 distance in Lab colorspace\n                    ['SSIM'] for ssim in RGB colorspace\n            net - ['squeeze','alex','vgg']\n            model_path - if None, will look in weights/[NET_NAME].pth\n            colorspace - ['Lab','RGB'] colorspace to use for L2 and SSIM\n            use_gpu - bool - whether or not to use a GPU\n            printNet - bool - whether or not to print network architecture out\n            spatial - bool - whether to output an array containing varying distances across spatial dimensions\n            spatial_shape - if given, output spatial shape. if None then spatial shape is determined automatically via spatial_factor (see below).\n            spatial_factor - if given, specifies upsampling factor relative to the largest spatial extent of a convolutional layer. if None then resized to size of input images.\n            spatial_order - spline order of filter for upsampling in spatial mode, by default 1 (bilinear).\n            is_train - bool - [True] for training mode\n            lr - float - initial learning rate\n            beta1 - float - initial momentum term for adam\n            version - 0.1 for latest, 0.0 was original (with a bug)\n            gpu_ids - int array - [0] by default, gpus to use\n        '''", "\n", "BaseModel", ".", "initialize", "(", "self", ",", "use_gpu", "=", "use_gpu", ",", "gpu_ids", "=", "gpu_ids", ")", "\n", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "net", "=", "net", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "spatial", "=", "spatial", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "self", ".", "model_name", "=", "'%s [%s]'", "%", "(", "model", ",", "net", ")", "\n", "\n", "if", "(", "self", ".", "model", "==", "'net-lin'", ")", ":", "# pretrained net + linear layer", "\n", "            ", "self", ".", "net", "=", "networks", ".", "PNetLin", "(", "pnet_rand", "=", "pnet_rand", ",", "pnet_tune", "=", "pnet_tune", ",", "pnet_type", "=", "net", ",", "\n", "use_dropout", "=", "True", ",", "spatial", "=", "spatial", ",", "version", "=", "version", ",", "lpips", "=", "True", ")", "\n", "kw", "=", "{", "}", "\n", "if", "not", "use_gpu", ":", "\n", "                ", "kw", "[", "'map_location'", "]", "=", "'cpu'", "\n", "", "if", "(", "model_path", "is", "None", ")", ":", "\n", "                ", "import", "inspect", "\n", "model_path", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "inspect", ".", "getfile", "(", "self", ".", "initialize", ")", ",", "'..'", ",", "'weights/v%s/%s.pth'", "%", "(", "version", ",", "net", ")", ")", ")", "\n", "\n", "", "if", "(", "not", "is_train", ")", ":", "\n", "                ", "print", "(", "'Loading model from: %s'", "%", "model_path", ")", "\n", "self", ".", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ",", "**", "kw", ")", ",", "strict", "=", "False", ")", "\n", "\n", "", "", "elif", "(", "self", ".", "model", "==", "'net'", ")", ":", "# pretrained network", "\n", "            ", "self", ".", "net", "=", "networks", ".", "PNetLin", "(", "pnet_rand", "=", "pnet_rand", ",", "pnet_type", "=", "net", ",", "lpips", "=", "False", ")", "\n", "", "elif", "(", "self", ".", "model", "in", "[", "'L2'", ",", "'l2'", "]", ")", ":", "\n", "            ", "self", ".", "net", "=", "networks", ".", "L2", "(", "use_gpu", "=", "use_gpu", ",", "colorspace", "=", "colorspace", ")", "# not really a network, only for testing", "\n", "self", ".", "model_name", "=", "'L2'", "\n", "", "elif", "(", "self", ".", "model", "in", "[", "'DSSIM'", ",", "'dssim'", ",", "'SSIM'", ",", "'ssim'", "]", ")", ":", "\n", "            ", "self", ".", "net", "=", "networks", ".", "DSSIM", "(", "use_gpu", "=", "use_gpu", ",", "colorspace", "=", "colorspace", ")", "\n", "self", ".", "model_name", "=", "'SSIM'", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Model [%s] not recognized.\"", "%", "self", ".", "model", ")", "\n", "\n", "", "self", ".", "parameters", "=", "list", "(", "self", ".", "net", ".", "parameters", "(", ")", ")", "\n", "\n", "if", "self", ".", "is_train", ":", "# training mode", "\n", "# extra network on top to go from distances (d0,d1) => predicted human judgment (h*)", "\n", "            ", "self", ".", "rankLoss", "=", "networks", ".", "BCERankingLoss", "(", ")", "\n", "self", ".", "parameters", "+=", "list", "(", "self", ".", "rankLoss", ".", "net", ".", "parameters", "(", ")", ")", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "old_lr", "=", "lr", "\n", "self", ".", "optimizer_net", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "parameters", ",", "lr", "=", "lr", ",", "betas", "=", "(", "beta1", ",", "0.999", ")", ")", "\n", "", "else", ":", "# test mode", "\n", "            ", "self", ".", "net", ".", "eval", "(", ")", "\n", "\n", "", "if", "(", "use_gpu", ")", ":", "\n", "            ", "self", ".", "net", ".", "to", "(", "gpu_ids", "[", "0", "]", ")", "\n", "self", ".", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "self", ".", "net", ",", "device_ids", "=", "gpu_ids", ")", "\n", "if", "(", "self", ".", "is_train", ")", ":", "\n", "                ", "self", ".", "rankLoss", "=", "self", ".", "rankLoss", ".", "to", "(", "device", "=", "gpu_ids", "[", "0", "]", ")", "# just put this on GPU0", "\n", "\n", "", "", "if", "(", "printNet", ")", ":", "\n", "            ", "print", "(", "'---------- Networks initialized -------------'", ")", "\n", "networks", ".", "print_network", "(", "self", ".", "net", ")", "\n", "print", "(", "'-----------------------------------------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.dist_model.DistModel.forward": [[108, 117], ["dist_model.DistModel.net.forward"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.AlexNet.forward"], ["", "", "def", "forward", "(", "self", ",", "in0", ",", "in1", ",", "retPerLayer", "=", "False", ")", ":", "\n", "        ", "''' Function computes the distance between image patches in0 and in1\n        INPUTS\n            in0, in1 - torch.Tensor object of shape Nx3xXxY - image patch scaled to [-1,1]\n        OUTPUT\n            computed distances between in0 and in1\n        '''", "\n", "\n", "return", "self", ".", "net", ".", "forward", "(", "in0", ",", "in1", ",", "retPerLayer", "=", "retPerLayer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.dist_model.DistModel.optimize_parameters": [[119, 125], ["dist_model.DistModel.forward_train", "dist_model.DistModel.optimizer_net.zero_grad", "dist_model.DistModel.backward_train", "dist_model.DistModel.optimizer_net.step", "dist_model.DistModel.clamp_weights"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.dist_model.DistModel.forward_train", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.dist_model.DistModel.backward_train", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.dist_model.DistModel.clamp_weights"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "forward_train", "(", ")", "\n", "self", ".", "optimizer_net", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_train", "(", ")", "\n", "self", ".", "optimizer_net", ".", "step", "(", ")", "\n", "self", ".", "clamp_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.dist_model.DistModel.clamp_weights": [[126, 130], ["dist_model.DistModel.net.modules", "hasattr", "torch.clamp"], "methods", ["None"], ["", "def", "clamp_weights", "(", "self", ")", ":", "\n", "        ", "for", "module", "in", "self", ".", "net", ".", "modules", "(", ")", ":", "\n", "            ", "if", "(", "hasattr", "(", "module", ",", "'weight'", ")", "and", "module", ".", "kernel_size", "==", "(", "1", ",", "1", ")", ")", ":", "\n", "                ", "module", ".", "weight", ".", "data", "=", "torch", ".", "clamp", "(", "module", ".", "weight", ".", "data", ",", "min", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.dist_model.DistModel.set_input": [[131, 146], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "dist_model.DistModel.input_ref.to", "dist_model.DistModel.input_p0.to", "dist_model.DistModel.input_p1.to", "dist_model.DistModel.input_judge.to"], "methods", ["None"], ["", "", "", "def", "set_input", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "input_ref", "=", "data", "[", "'ref'", "]", "\n", "self", ".", "input_p0", "=", "data", "[", "'p0'", "]", "\n", "self", ".", "input_p1", "=", "data", "[", "'p1'", "]", "\n", "self", ".", "input_judge", "=", "data", "[", "'judge'", "]", "\n", "\n", "if", "(", "self", ".", "use_gpu", ")", ":", "\n", "            ", "self", ".", "input_ref", "=", "self", ".", "input_ref", ".", "to", "(", "device", "=", "self", ".", "gpu_ids", "[", "0", "]", ")", "\n", "self", ".", "input_p0", "=", "self", ".", "input_p0", ".", "to", "(", "device", "=", "self", ".", "gpu_ids", "[", "0", "]", ")", "\n", "self", ".", "input_p1", "=", "self", ".", "input_p1", ".", "to", "(", "device", "=", "self", ".", "gpu_ids", "[", "0", "]", ")", "\n", "self", ".", "input_judge", "=", "self", ".", "input_judge", ".", "to", "(", "device", "=", "self", ".", "gpu_ids", "[", "0", "]", ")", "\n", "\n", "", "self", ".", "var_ref", "=", "Variable", "(", "self", ".", "input_ref", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "var_p0", "=", "Variable", "(", "self", ".", "input_p0", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "var_p1", "=", "Variable", "(", "self", ".", "input_p1", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.dist_model.DistModel.forward_train": [[147, 160], ["dist_model.DistModel.forward", "dist_model.DistModel.forward", "dist_model.DistModel.compute_accuracy", "torch.autograd.Variable().view", "dist_model.DistModel.rankLoss.forward", "dist_model.DistModel.d0.size", "torch.autograd.Variable"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.AlexNet.forward", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.AlexNet.forward", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.dist_model.DistModel.compute_accuracy", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.AlexNet.forward", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size"], ["", "def", "forward_train", "(", "self", ")", ":", "# run forward pass", "\n", "# print(self.net.module.scaling_layer.shift)", "\n", "# print(torch.norm(self.net.module.net.slice1[0].weight).item(), torch.norm(self.net.module.lin0.model[1].weight).item())", "\n", "\n", "        ", "self", ".", "d0", "=", "self", ".", "forward", "(", "self", ".", "var_ref", ",", "self", ".", "var_p0", ")", "\n", "self", ".", "d1", "=", "self", ".", "forward", "(", "self", ".", "var_ref", ",", "self", ".", "var_p1", ")", "\n", "self", ".", "acc_r", "=", "self", ".", "compute_accuracy", "(", "self", ".", "d0", ",", "self", ".", "d1", ",", "self", ".", "input_judge", ")", "\n", "\n", "self", ".", "var_judge", "=", "Variable", "(", "1.", "*", "self", ".", "input_judge", ")", ".", "view", "(", "self", ".", "d0", ".", "size", "(", ")", ")", "\n", "\n", "self", ".", "loss_total", "=", "self", ".", "rankLoss", ".", "forward", "(", "self", ".", "d0", ",", "self", ".", "d1", ",", "self", ".", "var_judge", "*", "2.", "-", "1.", ")", "\n", "\n", "return", "self", ".", "loss_total", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.dist_model.DistModel.backward_train": [[161, 163], ["torch.mean().backward", "torch.mean"], "methods", ["None"], ["", "def", "backward_train", "(", "self", ")", ":", "\n", "        ", "torch", ".", "mean", "(", "self", ".", "loss_total", ")", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.dist_model.DistModel.compute_accuracy": [[164, 169], ["judge.cpu().numpy().flatten", "judge.cpu().numpy", "judge.cpu"], "methods", ["None"], ["", "def", "compute_accuracy", "(", "self", ",", "d0", ",", "d1", ",", "judge", ")", ":", "\n", "        ", "''' d0, d1 are Variables, judge is a Tensor '''", "\n", "d1_lt_d0", "=", "(", "d1", "<", "d0", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "flatten", "(", ")", "\n", "judge_per", "=", "judge", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", "\n", "return", "d1_lt_d0", "*", "judge_per", "+", "(", "1", "-", "d1_lt_d0", ")", "*", "(", "1", "-", "judge_per", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.dist_model.DistModel.get_current_errors": [[170, 178], ["collections.OrderedDict", "collections.OrderedDict.keys", "numpy.mean", "dist_model.DistModel.loss_total.data.cpu().numpy", "dist_model.DistModel.loss_total.data.cpu"], "methods", ["None"], ["", "def", "get_current_errors", "(", "self", ")", ":", "\n", "        ", "retDict", "=", "OrderedDict", "(", "[", "(", "'loss_total'", ",", "self", ".", "loss_total", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "\n", "(", "'acc_r'", ",", "self", ".", "acc_r", ")", "]", ")", "\n", "\n", "for", "key", "in", "retDict", ".", "keys", "(", ")", ":", "\n", "            ", "retDict", "[", "key", "]", "=", "np", ".", "mean", "(", "retDict", "[", "key", "]", ")", "\n", "\n", "", "return", "retDict", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.dist_model.DistModel.get_current_visuals": [[179, 193], ["models.tensor2im", "models.tensor2im", "models.tensor2im", "scipy.ndimage.zoom", "scipy.ndimage.zoom", "scipy.ndimage.zoom", "collections.OrderedDict", "dist_model.DistModel.var_ref.data.size"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "zoom_factor", "=", "256", "/", "self", ".", "var_ref", ".", "data", ".", "size", "(", ")", "[", "2", "]", "\n", "\n", "ref_img", "=", "util", ".", "tensor2im", "(", "self", ".", "var_ref", ".", "data", ")", "\n", "p0_img", "=", "util", ".", "tensor2im", "(", "self", ".", "var_p0", ".", "data", ")", "\n", "p1_img", "=", "util", ".", "tensor2im", "(", "self", ".", "var_p1", ".", "data", ")", "\n", "\n", "ref_img_vis", "=", "zoom", "(", "ref_img", ",", "[", "zoom_factor", ",", "zoom_factor", ",", "1", "]", ",", "order", "=", "0", ")", "\n", "p0_img_vis", "=", "zoom", "(", "p0_img", ",", "[", "zoom_factor", ",", "zoom_factor", ",", "1", "]", ",", "order", "=", "0", ")", "\n", "p1_img_vis", "=", "zoom", "(", "p1_img", ",", "[", "zoom_factor", ",", "zoom_factor", ",", "1", "]", ",", "order", "=", "0", ")", "\n", "\n", "return", "OrderedDict", "(", "[", "(", "'ref'", ",", "ref_img_vis", ")", ",", "\n", "(", "'p0'", ",", "p0_img_vis", ")", ",", "\n", "(", "'p1'", ",", "p1_img_vis", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.dist_model.DistModel.save": [[194, 200], ["dist_model.DistModel.save_network", "dist_model.DistModel.save_network", "dist_model.DistModel.save_network"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.base_model.BaseModel.save_network"], ["", "def", "save", "(", "self", ",", "path", ",", "label", ")", ":", "\n", "        ", "if", "(", "self", ".", "use_gpu", ")", ":", "\n", "            ", "self", ".", "save_network", "(", "self", ".", "net", ".", "module", ",", "path", ",", "''", ",", "label", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "save_network", "(", "self", ".", "net", ",", "path", ",", "''", ",", "label", ")", "\n", "", "self", ".", "save_network", "(", "self", ".", "rankLoss", ".", "net", ",", "path", ",", "'rank'", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.dist_model.DistModel.update_learning_rate": [[201, 210], ["print"], "methods", ["None"], ["", "def", "update_learning_rate", "(", "self", ",", "nepoch_decay", ")", ":", "\n", "        ", "lrd", "=", "self", ".", "lr", "/", "nepoch_decay", "\n", "lr", "=", "self", ".", "old_lr", "-", "lrd", "\n", "\n", "for", "param_group", "in", "self", ".", "optimizer_net", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n", "", "print", "(", "'update lr [%s] decay: %f -> %f'", "%", "(", "type", ",", "self", ".", "old_lr", ",", "lr", ")", ")", "\n", "self", ".", "old_lr", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.dist_model.score_2afc_dataset": [[211, 245], ["tqdm.tqdm", "numpy.array", "numpy.array", "numpy.array", "data_loader.load_data", "func().data.cpu().numpy().flatten().tolist", "func().data.cpu().numpy().flatten().tolist", "data[].cpu().numpy().flatten().tolist", "numpy.mean", "dict", "func().data.cpu().numpy().flatten", "func().data.cpu().numpy().flatten", "data[].cpu().numpy().flatten", "func().data.cpu().numpy", "func().data.cpu().numpy", "data[].cpu().numpy", "func().data.cpu", "func().data.cpu", "data[].cpu", "func", "func"], "function", ["None"], ["", "", "def", "score_2afc_dataset", "(", "data_loader", ",", "func", ",", "name", "=", "''", ")", ":", "\n", "    ", "''' Function computes Two Alternative Forced Choice (2AFC) score using\n        distance function 'func' in dataset 'data_loader'\n    INPUTS\n        data_loader - CustomDatasetDataLoader object - contains a TwoAFCDataset inside\n        func - callable distance function - calling d=func(in0,in1) should take 2\n            pytorch tensors with shape Nx3xXxY, and return numpy array of length N\n    OUTPUTS\n        [0] - 2AFC score in [0,1], fraction of time func agrees with human evaluators\n        [1] - dictionary with following elements\n            d0s,d1s - N arrays containing distances between reference patch to perturbed patches \n            gts - N array in [0,1], preferred patch selected by human evaluators\n                (closer to \"0\" for left patch p0, \"1\" for right patch p1,\n                \"0.6\" means 60pct people preferred right patch, 40pct preferred left)\n            scores - N array in [0,1], corresponding to what percentage function agreed with humans\n    CONSTS\n        N - number of test triplets in data_loader\n    '''", "\n", "\n", "d0s", "=", "[", "]", "\n", "d1s", "=", "[", "]", "\n", "gts", "=", "[", "]", "\n", "\n", "for", "data", "in", "tqdm", "(", "data_loader", ".", "load_data", "(", ")", ",", "desc", "=", "name", ")", ":", "\n", "        ", "d0s", "+=", "func", "(", "data", "[", "'ref'", "]", ",", "data", "[", "'p0'", "]", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "d1s", "+=", "func", "(", "data", "[", "'ref'", "]", ",", "data", "[", "'p1'", "]", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "gts", "+=", "data", "[", "'judge'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "", "d0s", "=", "np", ".", "array", "(", "d0s", ")", "\n", "d1s", "=", "np", ".", "array", "(", "d1s", ")", "\n", "gts", "=", "np", ".", "array", "(", "gts", ")", "\n", "scores", "=", "(", "d0s", "<", "d1s", ")", "*", "(", "1.", "-", "gts", ")", "+", "(", "d1s", "<", "d0s", ")", "*", "gts", "+", "(", "d1s", "==", "d0s", ")", "*", ".5", "\n", "\n", "return", "(", "np", ".", "mean", "(", "scores", ")", ",", "dict", "(", "d0s", "=", "d0s", ",", "d1s", "=", "d1s", ",", "gts", "=", "gts", ",", "scores", "=", "scores", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.dist_model.score_jnd_dataset": [[246, 284], ["tqdm.tqdm", "numpy.array", "numpy.array", "numpy.argsort", "numpy.cumsum", "numpy.cumsum", "models.voc_ap", "data_loader.load_data", "func().data.cpu().numpy().tolist", "data[].cpu().numpy().flatten().tolist", "numpy.sum", "dict", "func().data.cpu().numpy", "data[].cpu().numpy().flatten", "func().data.cpu", "data[].cpu().numpy", "data[].cpu", "func"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.voc_ap"], ["", "def", "score_jnd_dataset", "(", "data_loader", ",", "func", ",", "name", "=", "''", ")", ":", "\n", "    ", "''' Function computes JND score using distance function 'func' in dataset 'data_loader'\n    INPUTS\n        data_loader - CustomDatasetDataLoader object - contains a JNDDataset inside\n        func - callable distance function - calling d=func(in0,in1) should take 2\n            pytorch tensors with shape Nx3xXxY, and return pytorch array of length N\n    OUTPUTS\n        [0] - JND score in [0,1], mAP score (area under precision-recall curve)\n        [1] - dictionary with following elements\n            ds - N array containing distances between two patches shown to human evaluator\n            sames - N array containing fraction of people who thought the two patches were identical\n    CONSTS\n        N - number of test triplets in data_loader\n    '''", "\n", "\n", "ds", "=", "[", "]", "\n", "gts", "=", "[", "]", "\n", "\n", "for", "data", "in", "tqdm", "(", "data_loader", ".", "load_data", "(", ")", ",", "desc", "=", "name", ")", ":", "\n", "        ", "ds", "+=", "func", "(", "data", "[", "'p0'", "]", ",", "data", "[", "'p1'", "]", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "gts", "+=", "data", "[", "'same'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "", "sames", "=", "np", ".", "array", "(", "gts", ")", "\n", "ds", "=", "np", ".", "array", "(", "ds", ")", "\n", "\n", "sorted_inds", "=", "np", ".", "argsort", "(", "ds", ")", "\n", "ds_sorted", "=", "ds", "[", "sorted_inds", "]", "\n", "sames_sorted", "=", "sames", "[", "sorted_inds", "]", "\n", "\n", "TPs", "=", "np", ".", "cumsum", "(", "sames_sorted", ")", "\n", "FPs", "=", "np", ".", "cumsum", "(", "1", "-", "sames_sorted", ")", "\n", "FNs", "=", "np", ".", "sum", "(", "sames_sorted", ")", "-", "TPs", "\n", "\n", "precs", "=", "TPs", "/", "(", "TPs", "+", "FPs", ")", "\n", "recs", "=", "TPs", "/", "(", "TPs", "+", "FNs", ")", "\n", "score", "=", "util", ".", "voc_ap", "(", "recs", ",", "precs", ")", "\n", "\n", "return", "(", "score", ",", "dict", "(", "ds", "=", "ds", ",", "sames", "=", "sames", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.pretrained_networks.squeezenet.__init__": [[6, 34], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "range", "range", "torchvision.models.squeezenet1_1", "pretrained_networks.squeezenet.slice1.add_module", "pretrained_networks.squeezenet.slice2.add_module", "pretrained_networks.squeezenet.slice3.add_module", "pretrained_networks.squeezenet.slice4.add_module", "pretrained_networks.squeezenet.slice5.add_module", "pretrained_networks.squeezenet.slice6.add_module", "pretrained_networks.squeezenet.slice7.add_module", "pretrained_networks.squeezenet.parameters", "str", "str", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "squeezenet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "pretrained_features", "=", "tv", ".", "squeezenet1_1", "(", "pretrained", "=", "pretrained", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice6", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice7", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "N_slices", "=", "7", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "2", ",", "5", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "5", ",", "8", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "8", ",", "10", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "10", ",", "11", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "11", ",", "12", ")", ":", "\n", "            ", "self", ".", "slice6", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "12", ",", "13", ")", ":", "\n", "            ", "self", ".", "slice7", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.pretrained_networks.squeezenet.forward": [[35, 54], ["pretrained_networks.squeezenet.slice1", "pretrained_networks.squeezenet.slice2", "pretrained_networks.squeezenet.slice3", "pretrained_networks.squeezenet.slice4", "pretrained_networks.squeezenet.slice5", "pretrained_networks.squeezenet.slice6", "pretrained_networks.squeezenet.slice7", "collections.namedtuple", "collections.namedtuple."], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu1", "=", "h", "\n", "h", "=", "self", ".", "slice2", "(", "h", ")", "\n", "h_relu2", "=", "h", "\n", "h", "=", "self", ".", "slice3", "(", "h", ")", "\n", "h_relu3", "=", "h", "\n", "h", "=", "self", ".", "slice4", "(", "h", ")", "\n", "h_relu4", "=", "h", "\n", "h", "=", "self", ".", "slice5", "(", "h", ")", "\n", "h_relu5", "=", "h", "\n", "h", "=", "self", ".", "slice6", "(", "h", ")", "\n", "h_relu6", "=", "h", "\n", "h", "=", "self", ".", "slice7", "(", "h", ")", "\n", "h_relu7", "=", "h", "\n", "vgg_outputs", "=", "namedtuple", "(", "\"SqueezeOutputs\"", ",", "[", "'relu1'", ",", "'relu2'", ",", "'relu3'", ",", "'relu4'", ",", "'relu5'", ",", "'relu6'", ",", "'relu7'", "]", ")", "\n", "out", "=", "vgg_outputs", "(", "h_relu1", ",", "h_relu2", ",", "h_relu3", ",", "h_relu4", ",", "h_relu5", ",", "h_relu6", ",", "h_relu7", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.pretrained_networks.alexnet.__init__": [[57, 79], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "torchvision.models.alexnet", "pretrained_networks.alexnet.slice1.add_module", "pretrained_networks.alexnet.slice2.add_module", "pretrained_networks.alexnet.slice3.add_module", "pretrained_networks.alexnet.slice4.add_module", "pretrained_networks.alexnet.slice5.add_module", "pretrained_networks.alexnet.parameters", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "alexnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "alexnet_pretrained_features", "=", "tv", ".", "alexnet", "(", "pretrained", "=", "pretrained", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "N_slices", "=", "5", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "2", ",", "5", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "5", ",", "8", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "8", ",", "10", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "10", ",", "12", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.pretrained_networks.alexnet.forward": [[80, 95], ["pretrained_networks.alexnet.slice1", "pretrained_networks.alexnet.slice2", "pretrained_networks.alexnet.slice3", "pretrained_networks.alexnet.slice4", "pretrained_networks.alexnet.slice5", "collections.namedtuple", "collections.namedtuple."], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu1", "=", "h", "\n", "h", "=", "self", ".", "slice2", "(", "h", ")", "\n", "h_relu2", "=", "h", "\n", "h", "=", "self", ".", "slice3", "(", "h", ")", "\n", "h_relu3", "=", "h", "\n", "h", "=", "self", ".", "slice4", "(", "h", ")", "\n", "h_relu4", "=", "h", "\n", "h", "=", "self", ".", "slice5", "(", "h", ")", "\n", "h_relu5", "=", "h", "\n", "alexnet_outputs", "=", "namedtuple", "(", "\"AlexnetOutputs\"", ",", "[", "'relu1'", ",", "'relu2'", ",", "'relu3'", ",", "'relu4'", ",", "'relu5'", "]", ")", "\n", "out", "=", "alexnet_outputs", "(", "h_relu1", ",", "h_relu2", ",", "h_relu3", ",", "h_relu4", ",", "h_relu5", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.pretrained_networks.vgg16.__init__": [[97, 119], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "torchvision.models.vgg16", "pretrained_networks.vgg16.slice1.add_module", "pretrained_networks.vgg16.slice2.add_module", "pretrained_networks.vgg16.slice3.add_module", "pretrained_networks.vgg16.slice4.add_module", "pretrained_networks.vgg16.slice5.add_module", "pretrained_networks.vgg16.parameters", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "vgg16", ",", "self", ")", ".", "__init__", "(", ")", "\n", "vgg_pretrained_features", "=", "tv", ".", "vgg16", "(", "pretrained", "=", "pretrained", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "N_slices", "=", "5", "\n", "for", "x", "in", "range", "(", "4", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "4", ",", "9", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "9", ",", "16", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "16", ",", "23", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "23", ",", "30", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.pretrained_networks.vgg16.forward": [[120, 135], ["pretrained_networks.vgg16.slice1", "pretrained_networks.vgg16.slice2", "pretrained_networks.vgg16.slice3", "pretrained_networks.vgg16.slice4", "pretrained_networks.vgg16.slice5", "collections.namedtuple", "collections.namedtuple."], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu1_2", "=", "h", "\n", "h", "=", "self", ".", "slice2", "(", "h", ")", "\n", "h_relu2_2", "=", "h", "\n", "h", "=", "self", ".", "slice3", "(", "h", ")", "\n", "h_relu3_3", "=", "h", "\n", "h", "=", "self", ".", "slice4", "(", "h", ")", "\n", "h_relu4_3", "=", "h", "\n", "h", "=", "self", ".", "slice5", "(", "h", ")", "\n", "h_relu5_3", "=", "h", "\n", "vgg_outputs", "=", "namedtuple", "(", "\"VggOutputs\"", ",", "[", "'relu1_2'", ",", "'relu2_2'", ",", "'relu3_3'", ",", "'relu4_3'", ",", "'relu5_3'", "]", ")", "\n", "out", "=", "vgg_outputs", "(", "h_relu1_2", ",", "h_relu2_2", ",", "h_relu3_3", ",", "h_relu4_3", ",", "h_relu5_3", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.pretrained_networks.resnet.__init__": [[139, 161], ["super().__init__", "torchvision.models.resnet18", "torchvision.models.resnet34", "torchvision.models.resnet50", "torchvision.models.resnet101", "torchvision.models.resnet152"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ",", "pretrained", "=", "True", ",", "num", "=", "18", ")", ":", "\n", "        ", "super", "(", "resnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "(", "num", "==", "18", ")", ":", "\n", "            ", "self", ".", "net", "=", "tv", ".", "resnet18", "(", "pretrained", "=", "pretrained", ")", "\n", "", "elif", "(", "num", "==", "34", ")", ":", "\n", "            ", "self", ".", "net", "=", "tv", ".", "resnet34", "(", "pretrained", "=", "pretrained", ")", "\n", "", "elif", "(", "num", "==", "50", ")", ":", "\n", "            ", "self", ".", "net", "=", "tv", ".", "resnet50", "(", "pretrained", "=", "pretrained", ")", "\n", "", "elif", "(", "num", "==", "101", ")", ":", "\n", "            ", "self", ".", "net", "=", "tv", ".", "resnet101", "(", "pretrained", "=", "pretrained", ")", "\n", "", "elif", "(", "num", "==", "152", ")", ":", "\n", "            ", "self", ".", "net", "=", "tv", ".", "resnet152", "(", "pretrained", "=", "pretrained", ")", "\n", "", "self", ".", "N_slices", "=", "5", "\n", "\n", "self", ".", "conv1", "=", "self", ".", "net", ".", "conv1", "\n", "self", ".", "bn1", "=", "self", ".", "net", ".", "bn1", "\n", "self", ".", "relu", "=", "self", ".", "net", ".", "relu", "\n", "self", ".", "maxpool", "=", "self", ".", "net", ".", "maxpool", "\n", "self", ".", "layer1", "=", "self", ".", "net", ".", "layer1", "\n", "self", ".", "layer2", "=", "self", ".", "net", ".", "layer2", "\n", "self", ".", "layer3", "=", "self", ".", "net", ".", "layer3", "\n", "self", ".", "layer4", "=", "self", ".", "net", ".", "layer4", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.pretrained_networks.resnet.forward": [[162, 181], ["pretrained_networks.resnet.conv1", "pretrained_networks.resnet.bn1", "pretrained_networks.resnet.relu", "pretrained_networks.resnet.maxpool", "pretrained_networks.resnet.layer1", "pretrained_networks.resnet.layer2", "pretrained_networks.resnet.layer3", "pretrained_networks.resnet.layer4", "collections.namedtuple", "collections.namedtuple."], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h", "=", "self", ".", "conv1", "(", "X", ")", "\n", "h", "=", "self", ".", "bn1", "(", "h", ")", "\n", "h", "=", "self", ".", "relu", "(", "h", ")", "\n", "h_relu1", "=", "h", "\n", "h", "=", "self", ".", "maxpool", "(", "h", ")", "\n", "h", "=", "self", ".", "layer1", "(", "h", ")", "\n", "h_conv2", "=", "h", "\n", "h", "=", "self", ".", "layer2", "(", "h", ")", "\n", "h_conv3", "=", "h", "\n", "h", "=", "self", ".", "layer3", "(", "h", ")", "\n", "h_conv4", "=", "h", "\n", "h", "=", "self", ".", "layer4", "(", "h", ")", "\n", "h_conv5", "=", "h", "\n", "\n", "outputs", "=", "namedtuple", "(", "\"Outputs\"", ",", "[", "'relu1'", ",", "'conv2'", ",", "'conv3'", ",", "'conv4'", ",", "'conv5'", "]", ")", "\n", "out", "=", "outputs", "(", "h_relu1", ",", "h_conv2", ",", "h_conv3", ",", "h_conv4", ",", "h_conv5", ")", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.PerceptualLoss.__init__": [[14, 25], ["super().__init__", "print", "dist_model.DistModel", "__init__.PerceptualLoss.model.initialize", "print", "print", "__init__.PerceptualLoss.model.name"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.base_model.BaseModel.name"], []], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.PerceptualLoss.forward": [[26, 41], ["__init__.PerceptualLoss.model.forward"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.AlexNet.forward"], []], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.normalize_tensor": [[42, 45], ["torch.sqrt", "torch.sum"], "function", ["None"], []], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.l2": [[46, 48], ["numpy.mean"], "function", ["None"], []], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.psnr": [[49, 51], ["numpy.log10", "numpy.mean"], "function", ["None"], []], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.dssim": [[52, 54], ["skimage.measure.compare_ssim"], "function", ["None"], []], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.rgb2lab": [[102, 105], ["color.rgb2lab"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.rgb2lab"], []], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2np": [[62, 65], ["tensor_obj[].cpu().float().numpy().transpose", "tensor_obj[].cpu().float().numpy", "tensor_obj[].cpu().float", "tensor_obj[].cpu"], "function", ["None"], []], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.np2tensor": [[66, 69], ["torch.Tensor", "np_obj[].transpose"], "function", ["None"], []], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2tensorlab": [[70, 83], ["__init__.tensor2im", "color.rgb2lab", "__init__.np2tensor"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.rgb2lab", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.np2tensor"], []], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensorlab2tensor": [[84, 101], ["warnings.filterwarnings", "__init__.tensor2np", "numpy.clip", "color.rgb2lab", "__init__.np2tensor", "__init__.im2tensor", "color.lab2rgb", "rgb_back.astype", "numpy.isclose", "__init__.im2tensor", "lab.astype", "numpy.prod"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2np", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.rgb2lab", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.np2tensor", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.im2tensor", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.im2tensor"], []], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2im": [[151, 156], ["image_tensor[].cpu().float().numpy", "image_tensor[].cpu().float().numpy.astype", "image_tensor[].cpu().float", "numpy.transpose", "image_tensor[].cpu"], "function", ["None"], []], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.im2tensor": [[157, 161], ["torch.Tensor", "[].transpose"], "function", ["None"], []], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.tensor2vec": [[115, 117], ["vector_tensor.data.cpu().numpy", "vector_tensor.data.cpu"], "function", ["None"], []], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.voc_ap": [[118, 150], ["numpy.arange", "numpy.concatenate", "numpy.concatenate", "range", "numpy.sum", "numpy.maximum", "numpy.where", "numpy.sum", "numpy.max"], "function", ["None"], []], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.base_model.BaseModel.__init__": [[8, 10], ["None"], "methods", ["None"], ["        ", "return", "'BaseModel'", "\n", "\n", "", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.base_model.BaseModel.name": [[11, 13], ["None"], "methods", ["None"], ["        ", "super", "(", "BaseModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "gpu_ids", "=", "opt", ".", "gpu_ids", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.base_model.BaseModel.initialize": [[14, 17], ["None"], "methods", ["None"], ["self", ".", "isTrain", "=", "opt", ".", "isTrain", "\n", "self", ".", "Tensor", "=", "torch", ".", "cuda", ".", "FloatTensor", "if", "self", ".", "gpu_ids", "else", "torch", ".", "Tensor", "\n", "\n", "", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.base_model.BaseModel.forward": [[18, 20], ["None"], "methods", ["None"], ["        ", "self", ".", "input", "=", "input", "\n", "\n", "", "def", "forward", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.base_model.BaseModel.get_image_paths": [[52, 54], ["None"], "methods", ["None"], ["if", "not", "save_dir", ":", "\n", "            ", "save_dir", "=", "self", ".", "save_dir", "\n", "", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "save_filename", ")", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.base_model.BaseModel.optimize_parameters": [[24, 26], ["None"], "methods", ["None"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.base_model.BaseModel.get_current_visuals": [[27, 29], ["None"], "methods", ["None"], ["", "def", "get_image_paths", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.base_model.BaseModel.get_current_errors": [[30, 32], ["None"], "methods", ["None"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.base_model.BaseModel.save": [[33, 35], ["None"], "methods", ["None"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.base_model.BaseModel.save_network": [[37, 41], ["os.path.join", "torch.save", "network.state_dict"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.save"], ["        ", "return", "{", "}", "\n", "\n", "", "def", "save", "(", "self", ",", "label", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.base_model.BaseModel.load_network": [[43, 48], ["os.path.join", "print", "network.load_state_dict", "torch.load"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.configuration.load"], ["", "def", "save_network", "(", "self", ",", "network", ",", "network_label", ",", "epoch_label", ",", "gpu_ids", ")", ":", "\n", "        ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch_label", ",", "network_label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "save_filename", ")", "\n", "print", "(", "save_path", ")", "\n", "torch", ".", "save", "(", "network", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.base_model.BaseModel.update_learning_rate": [[49, 51], ["None"], "methods", ["None"], ["# helper loading function that can be used by subclasses", "\n", "", "def", "load_network", "(", "self", ",", "network", ",", "network_label", ",", "epoch_label", ",", "save_dir", "=", "''", ")", ":", "\n", "        ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch_label", ",", "network_label", ")", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.base_model.BaseModel.save_done": [[55, 58], ["numpy.save", "numpy.savetxt", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.save"], ["if", "not", "os", ".", "path", ".", "isfile", "(", "save_path", ")", ":", "\n", "            ", "print", "(", "'%s not exists yet!'", "%", "save_path", ")", "\n", "if", "network_label", "==", "'G'", ":", "\n", "                ", "raise", "(", "'Generator must exist!'", ")", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.replicate.DataParallelWithCallback.replicate": [[64, 68], ["super().replicate", "replicate.execute_replication_callbacks"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.replicate.DataParallelWithCallback.replicate", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.replicate.execute_replication_callbacks"], ["def", "replicate", "(", "self", ",", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "super", "(", "DataParallelWithCallback", ",", "self", ")", ".", "replicate", "(", "module", ",", "device_ids", ")", "\n", "execute_replication_callbacks", "(", "modules", ")", "\n", "return", "modules", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.replicate.execute_replication_callbacks": [[27, 48], ["len", "enumerate", "list", "replicate.CallbackContext", "enumerate", "master_copy.modules", "range", "module.modules", "hasattr", "m.__data_parallel_replicate__"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__data_parallel_replicate__"], ["", "def", "execute_replication_callbacks", "(", "modules", ")", ":", "\n", "    ", "\"\"\"\n    Execute an replication callback `__data_parallel_replicate__` on each module created by original replication.\n\n    The callback will be invoked with arguments `__data_parallel_replicate__(ctx, copy_id)`\n\n    Note that, as all modules are isomorphism, we assign each sub-module with a context\n    (shared among multiple copies of this module on different devices).\n    Through this context, different copies can share some information.\n\n    We guarantee that the callback on the master copy (the first copy) will be called ahead of calling the callback\n    of any slave copies.\n    \"\"\"", "\n", "master_copy", "=", "modules", "[", "0", "]", "\n", "nr_modules", "=", "len", "(", "list", "(", "master_copy", ".", "modules", "(", ")", ")", ")", "\n", "ctxs", "=", "[", "CallbackContext", "(", ")", "for", "_", "in", "range", "(", "nr_modules", ")", "]", "\n", "\n", "for", "i", ",", "module", "in", "enumerate", "(", "modules", ")", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "module", ".", "modules", "(", ")", ")", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'__data_parallel_replicate__'", ")", ":", "\n", "                ", "m", ".", "__data_parallel_replicate__", "(", "ctxs", "[", "j", "]", ",", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.replicate.patch_replication_callback": [[70, 95], ["isinstance", "functools.wraps", "old_replicate", "replicate.execute_replication_callbacks"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.replicate.execute_replication_callbacks"], ["", "", "def", "patch_replication_callback", "(", "data_parallel", ")", ":", "\n", "    ", "\"\"\"\n    Monkey-patch an existing `DataParallel` object. Add the replication callback.\n    Useful when you have customized `DataParallel` implementation.\n\n    Examples:\n        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)\n        > sync_bn = DataParallel(sync_bn, device_ids=[0, 1])\n        > patch_replication_callback(sync_bn)\n        # this is equivalent to\n        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)\n        > sync_bn = DataParallelWithCallback(sync_bn, device_ids=[0, 1])\n    \"\"\"", "\n", "\n", "assert", "isinstance", "(", "data_parallel", ",", "DataParallel", ")", "\n", "\n", "old_replicate", "=", "data_parallel", ".", "replicate", "\n", "\n", "@", "functools", ".", "wraps", "(", "old_replicate", ")", "\n", "def", "new_replicate", "(", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "old_replicate", "(", "module", ",", "device_ids", ")", "\n", "execute_replication_callbacks", "(", "modules", ")", "\n", "return", "modules", "\n", "\n", "", "data_parallel", ".", "replicate", "=", "new_replicate", "\n", "", ""]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.comm.FutureResult.__init__": [[21, 25], ["threading.Lock", "threading.Condition"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_result", "=", "None", "\n", "self", ".", "_lock", "=", "threading", ".", "Lock", "(", ")", "\n", "self", ".", "_cond", "=", "threading", ".", "Condition", "(", "self", ".", "_lock", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.comm.FutureResult.put": [[26, 31], ["comm.FutureResult._cond.notify"], "methods", ["None"], ["", "def", "put", "(", "self", ",", "result", ")", ":", "\n", "        ", "with", "self", ".", "_lock", ":", "\n", "            ", "assert", "self", ".", "_result", "is", "None", ",", "'Previous result has\\'t been fetched.'", "\n", "self", ".", "_result", "=", "result", "\n", "self", ".", "_cond", ".", "notify", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.comm.FutureResult.get": [[32, 40], ["comm.FutureResult._cond.wait"], "methods", ["None"], ["", "", "def", "get", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "_lock", ":", "\n", "            ", "if", "self", ".", "_result", "is", "None", ":", "\n", "                ", "self", ".", "_cond", ".", "wait", "(", ")", "\n", "\n", "", "res", "=", "self", ".", "_result", "\n", "self", ".", "_result", "=", "None", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.comm.SlavePipe.run_slave": [[49, 54], ["comm.SlavePipe.queue.put", "comm.SlavePipe.result.get", "comm.SlavePipe.queue.put"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.comm.FutureResult.put", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.comm.FutureResult.put"], ["def", "run_slave", "(", "self", ",", "msg", ")", ":", "\n", "        ", "self", ".", "queue", ".", "put", "(", "(", "self", ".", "identifier", ",", "msg", ")", ")", "\n", "ret", "=", "self", ".", "result", ".", "get", "(", ")", "\n", "self", ".", "queue", ".", "put", "(", "True", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.comm.SyncMaster.__init__": [[67, 77], ["queue.Queue", "collections.OrderedDict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "master_callback", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            master_callback: a callback to be invoked after having collected messages from slave devices.\n        \"\"\"", "\n", "self", ".", "_master_callback", "=", "master_callback", "\n", "self", ".", "_queue", "=", "queue", ".", "Queue", "(", ")", "\n", "self", ".", "_registry", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "self", ".", "_activated", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.comm.SyncMaster.__getstate__": [[78, 80], ["None"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "return", "{", "'master_callback'", ":", "self", ".", "_master_callback", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.comm.SyncMaster.__setstate__": [[81, 83], ["comm.SyncMaster.__init__"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "__init__", "(", "state", "[", "'master_callback'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.comm.SyncMaster.register_slave": [[84, 101], ["comm.FutureResult", "_MasterRegistry", "comm.SlavePipe", "comm.SyncMaster._queue.empty", "comm.SyncMaster._registry.clear"], "methods", ["None"], ["", "def", "register_slave", "(", "self", ",", "identifier", ")", ":", "\n", "        ", "\"\"\"\n        Register an slave device.\n\n        Args:\n            identifier: an identifier, usually is the device id.\n\n        Returns: a `SlavePipe` object which can be used to communicate with the master device.\n\n        \"\"\"", "\n", "if", "self", ".", "_activated", ":", "\n", "            ", "assert", "self", ".", "_queue", ".", "empty", "(", ")", ",", "'Queue is not clean before next initialization.'", "\n", "self", ".", "_activated", "=", "False", "\n", "self", ".", "_registry", ".", "clear", "(", ")", "\n", "", "future", "=", "FutureResult", "(", ")", "\n", "self", ".", "_registry", "[", "identifier", "]", "=", "_MasterRegistry", "(", "future", ")", "\n", "return", "SlavePipe", "(", "identifier", ",", "self", ".", "_queue", ",", "future", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.comm.SyncMaster.run_master": [[102, 134], ["range", "comm.SyncMaster._master_callback", "range", "intermediates.append", "comm.SyncMaster._registry[].result.put", "comm.SyncMaster._queue.get", "comm.SyncMaster._queue.get"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.comm.FutureResult.put", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.comm.FutureResult.get"], ["", "def", "run_master", "(", "self", ",", "master_msg", ")", ":", "\n", "        ", "\"\"\"\n        Main entry for the master device in each forward pass.\n        The messages were first collected from each devices (including the master device), and then\n        an callback will be invoked to compute the message to be sent back to each devices\n        (including the master device).\n\n        Args:\n            master_msg: the message that the master want to send to itself. This will be placed as the first\n            message when calling `master_callback`. For detailed usage, see `_SynchronizedBatchNorm` for an example.\n\n        Returns: the message to be sent back to the master device.\n\n        \"\"\"", "\n", "self", ".", "_activated", "=", "True", "\n", "\n", "intermediates", "=", "[", "(", "0", ",", "master_msg", ")", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "nr_slaves", ")", ":", "\n", "            ", "intermediates", ".", "append", "(", "self", ".", "_queue", ".", "get", "(", ")", ")", "\n", "\n", "", "results", "=", "self", ".", "_master_callback", "(", "intermediates", ")", "\n", "assert", "results", "[", "0", "]", "[", "0", "]", "==", "0", ",", "'The first result should belongs to the master.'", "\n", "\n", "for", "i", ",", "res", "in", "results", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "continue", "\n", "", "self", ".", "_registry", "[", "i", "]", ".", "result", ".", "put", "(", "res", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "nr_slaves", ")", ":", "\n", "            ", "assert", "self", ".", "_queue", ".", "get", "(", ")", "is", "True", "\n", "\n", "", "return", "results", "[", "0", "]", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.comm.SyncMaster.nr_slaves": [[135, 138], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "nr_slaves", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_registry", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.unittest.TorchTestCase.assertTensorClose": [[16, 29], ["float", "unittest.TorchTestCase.assertTrue", "float", "torch.allclose"], "methods", ["None"], ["    ", "def", "assertTensorClose", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "adiff", "=", "float", "(", "(", "x", "-", "y", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ")", "\n", "if", "(", "y", "==", "0", ")", ".", "all", "(", ")", ":", "\n", "            ", "rdiff", "=", "'NaN'", "\n", "", "else", ":", "\n", "            ", "rdiff", "=", "float", "(", "(", "adiff", "/", "y", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ")", "\n", "\n", "", "message", "=", "(", "\n", "'Tensor close check failed\\n'", "\n", "'adiff={}\\n'", "\n", "'rdiff={}\\n'", "\n", ")", ".", "format", "(", "adiff", ",", "rdiff", ")", "\n", "self", ".", "assertTrue", "(", "torch", ".", "allclose", "(", "x", ",", "y", ")", ",", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__init__": [[52, 67], ["torch.nn.modules.batchnorm._BatchNorm.__init__", "SyncMaster", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", ":", "\n", "        ", "assert", "ReduceAddCoalesced", "is", "not", "None", ",", "'Can not use Synchronized Batch Normalization without CUDA support.'", "\n", "\n", "super", "(", "_SynchronizedBatchNorm", ",", "self", ")", ".", "__init__", "(", "num_features", ",", "eps", "=", "eps", ",", "momentum", "=", "momentum", ",", "affine", "=", "affine", ",", "\n", "track_running_stats", "=", "track_running_stats", ")", "\n", "\n", "if", "not", "self", ".", "track_running_stats", ":", "\n", "            ", "import", "warnings", "\n", "warnings", ".", "warn", "(", "'track_running_stats=False is not supported by the SynchronizedBatchNorm.'", ")", "\n", "\n", "", "self", ".", "_sync_master", "=", "SyncMaster", "(", "self", ".", "_data_parallel_master", ")", "\n", "\n", "self", ".", "_is_parallel", "=", "False", "\n", "self", ".", "_parallel_id", "=", "None", "\n", "self", ".", "_slave_pipe", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.batchnorm._SynchronizedBatchNorm.forward": [[68, 99], ["input.view.view.size", "input.view.view.view", "batchnorm._sum_ft", "batchnorm._sum_ft", "output.view", "torch.batch_norm", "torch.batch_norm", "input.view.view.size", "input.view.view.size", "input.view.view.size", "batchnorm._SynchronizedBatchNorm._sync_master.run_master", "batchnorm._SynchronizedBatchNorm._slave_pipe.run_slave", "_ChildMessage", "_ChildMessage", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.batchnorm._sum_ft", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.batchnorm._sum_ft", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.comm.SyncMaster.run_master", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.comm.SlavePipe.run_slave", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.batchnorm._unsqueeze_ft"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# If it is not parallel computation or is in evaluation mode, use PyTorch's implementation.", "\n", "        ", "if", "not", "(", "self", ".", "_is_parallel", "and", "self", ".", "training", ")", ":", "\n", "            ", "return", "F", ".", "batch_norm", "(", "\n", "input", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "self", ".", "training", ",", "self", ".", "momentum", ",", "self", ".", "eps", ")", "\n", "\n", "# Resize the input to (B, C, -1).", "\n", "", "input_shape", "=", "input", ".", "size", "(", ")", "\n", "input", "=", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "self", ".", "num_features", ",", "-", "1", ")", "\n", "\n", "# Compute the sum and square-sum.", "\n", "sum_size", "=", "input", ".", "size", "(", "0", ")", "*", "input", ".", "size", "(", "2", ")", "\n", "input_sum", "=", "_sum_ft", "(", "input", ")", "\n", "input_ssum", "=", "_sum_ft", "(", "input", "**", "2", ")", "\n", "\n", "# Reduce-and-broadcast the statistics.", "\n", "if", "self", ".", "_parallel_id", "==", "0", ":", "\n", "            ", "mean", ",", "inv_std", "=", "self", ".", "_sync_master", ".", "run_master", "(", "_ChildMessage", "(", "input_sum", ",", "input_ssum", ",", "sum_size", ")", ")", "\n", "", "else", ":", "\n", "            ", "mean", ",", "inv_std", "=", "self", ".", "_slave_pipe", ".", "run_slave", "(", "_ChildMessage", "(", "input_sum", ",", "input_ssum", ",", "sum_size", ")", ")", "\n", "\n", "# Compute the output.", "\n", "", "if", "self", ".", "affine", ":", "\n", "# MJY:: Fuse the multiplication for speed.", "\n", "            ", "output", "=", "(", "input", "-", "_unsqueeze_ft", "(", "mean", ")", ")", "*", "_unsqueeze_ft", "(", "inv_std", "*", "self", ".", "weight", ")", "+", "_unsqueeze_ft", "(", "self", ".", "bias", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "(", "input", "-", "_unsqueeze_ft", "(", "mean", ")", ")", "*", "_unsqueeze_ft", "(", "inv_std", ")", "\n", "\n", "# Reshape it.", "\n", "", "return", "output", ".", "view", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__data_parallel_replicate__": [[100, 109], ["ctx.sync_master.register_slave"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.comm.SyncMaster.register_slave"], ["", "def", "__data_parallel_replicate__", "(", "self", ",", "ctx", ",", "copy_id", ")", ":", "\n", "        ", "self", ".", "_is_parallel", "=", "True", "\n", "self", ".", "_parallel_id", "=", "copy_id", "\n", "\n", "# parallel_id == 0 means master device.", "\n", "if", "self", ".", "_parallel_id", "==", "0", ":", "\n", "            ", "ctx", ".", "sync_master", "=", "self", ".", "_sync_master", "\n", "", "else", ":", "\n", "            ", "self", ".", "_slave_pipe", "=", "ctx", ".", "sync_master", ".", "register_slave", "(", "copy_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.batchnorm._SynchronizedBatchNorm._data_parallel_master": [[110, 132], ["sorted", "sum", "ReduceAddCoalesced.apply", "batchnorm._SynchronizedBatchNorm._compute_mean_std", "Broadcast.apply", "enumerate", "i[].sum.get_device", "outputs.append", "i[].sum.get_device", "_MasterMessage"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.batchnorm._SynchronizedBatchNorm._compute_mean_std"], ["", "", "def", "_data_parallel_master", "(", "self", ",", "intermediates", ")", ":", "\n", "        ", "\"\"\"Reduce the sum and square-sum, compute the statistics, and broadcast it.\"\"\"", "\n", "\n", "# Always using same \"device order\" makes the ReduceAdd operation faster.", "\n", "# Thanks to:: Tete Xiao (http://tetexiao.com/)", "\n", "intermediates", "=", "sorted", "(", "intermediates", ",", "key", "=", "lambda", "i", ":", "i", "[", "1", "]", ".", "sum", ".", "get_device", "(", ")", ")", "\n", "\n", "to_reduce", "=", "[", "i", "[", "1", "]", "[", ":", "2", "]", "for", "i", "in", "intermediates", "]", "\n", "to_reduce", "=", "[", "j", "for", "i", "in", "to_reduce", "for", "j", "in", "i", "]", "# flatten", "\n", "target_gpus", "=", "[", "i", "[", "1", "]", ".", "sum", ".", "get_device", "(", ")", "for", "i", "in", "intermediates", "]", "\n", "\n", "sum_size", "=", "sum", "(", "[", "i", "[", "1", "]", ".", "sum_size", "for", "i", "in", "intermediates", "]", ")", "\n", "sum_", ",", "ssum", "=", "ReduceAddCoalesced", ".", "apply", "(", "target_gpus", "[", "0", "]", ",", "2", ",", "*", "to_reduce", ")", "\n", "mean", ",", "inv_std", "=", "self", ".", "_compute_mean_std", "(", "sum_", ",", "ssum", ",", "sum_size", ")", "\n", "\n", "broadcasted", "=", "Broadcast", ".", "apply", "(", "target_gpus", ",", "mean", ",", "inv_std", ")", "\n", "\n", "outputs", "=", "[", "]", "\n", "for", "i", ",", "rec", "in", "enumerate", "(", "intermediates", ")", ":", "\n", "            ", "outputs", ".", "append", "(", "(", "rec", "[", "0", "]", ",", "_MasterMessage", "(", "*", "broadcasted", "[", "i", "*", "2", ":", "i", "*", "2", "+", "2", "]", ")", ")", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.batchnorm._SynchronizedBatchNorm._compute_mean_std": [[133, 151], ["hasattr", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "bias_var.clamp"], "methods", ["None"], ["", "def", "_compute_mean_std", "(", "self", ",", "sum_", ",", "ssum", ",", "size", ")", ":", "\n", "        ", "\"\"\"Compute the mean and standard-deviation with sum and square-sum. This method\n        also maintains the moving average on the master device.\"\"\"", "\n", "assert", "size", ">", "1", ",", "'BatchNorm computes unbiased standard-deviation, which requires size > 1.'", "\n", "mean", "=", "sum_", "/", "size", "\n", "sumvar", "=", "ssum", "-", "sum_", "*", "mean", "\n", "unbias_var", "=", "sumvar", "/", "(", "size", "-", "1", ")", "\n", "bias_var", "=", "sumvar", "/", "size", "\n", "\n", "if", "hasattr", "(", "torch", ",", "'no_grad'", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "self", ".", "running_mean", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_mean", "+", "self", ".", "momentum", "*", "mean", ".", "data", "\n", "self", ".", "running_var", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_var", "+", "self", ".", "momentum", "*", "unbias_var", ".", "data", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "running_mean", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_mean", "+", "self", ".", "momentum", "*", "mean", ".", "data", "\n", "self", ".", "running_var", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_var", "+", "self", ".", "momentum", "*", "unbias_var", ".", "data", "\n", "\n", "", "return", "mean", ",", "bias_var", ".", "clamp", "(", "self", ".", "eps", ")", "**", "-", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.batchnorm.SynchronizedBatchNorm1d._check_input_dim": [[209, 213], ["ValueError", "input.dim", "input.dim", "input.dim"], "methods", ["None"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "2", "and", "input", ".", "dim", "(", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 2D or 3D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.batchnorm.SynchronizedBatchNorm2d._check_input_dim": [[271, 275], ["input.dim", "ValueError", "input.dim"], "methods", ["None"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 4D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim": [[334, 338], ["input.dim", "ValueError", "input.dim"], "methods", ["None"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "5", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 5D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.batchnorm._sum_ft": [[37, 40], ["tensor.sum().sum", "tensor.sum"], "function", ["None"], ["def", "_sum_ft", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"sum over the first and last dimention\"\"\"", "\n", "return", "tensor", ".", "sum", "(", "dim", "=", "0", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.batchnorm._unsqueeze_ft": [[42, 45], ["tensor.unsqueeze().unsqueeze", "tensor.unsqueeze"], "function", ["None"], ["", "def", "_unsqueeze_ft", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"add new dimensions at the front and the tail\"\"\"", "\n", "return", "tensor", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.batchnorm.patch_sync_batchnorm": [[340, 353], ["None"], "function", ["None"], ["", "", "", "@", "contextlib", ".", "contextmanager", "\n", "def", "patch_sync_batchnorm", "(", ")", ":", "\n", "    ", "import", "torch", ".", "nn", "as", "nn", "\n", "\n", "backup", "=", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm3d", "\n", "\n", "nn", ".", "BatchNorm1d", "=", "SynchronizedBatchNorm1d", "\n", "nn", ".", "BatchNorm2d", "=", "SynchronizedBatchNorm2d", "\n", "nn", ".", "BatchNorm3d", "=", "SynchronizedBatchNorm3d", "\n", "\n", "yield", "\n", "\n", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm3d", "=", "backup", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.batchnorm.convert_model": [[355, 397], ["isinstance", "zip", "module.named_children", "batchnorm.convert_model", "DataParallelWithCallback", "isinstance", "sync_module.add_module", "sync_module", "batchnorm.convert_model", "module.weight.data.clone().detach", "module.bias.data.clone().detach", "module.weight.data.clone", "module.bias.data.clone"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.batchnorm.convert_model", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.batchnorm.convert_model"], ["", "def", "convert_model", "(", "module", ")", ":", "\n", "    ", "\"\"\"Traverse the input module and its child recursively\n       and replace all instance of torch.nn.modules.batchnorm.BatchNorm*N*d\n       to SynchronizedBatchNorm*N*d\n\n    Args:\n        module: the input module needs to be convert to SyncBN model\n\n    Examples:\n        >>> import torch.nn as nn\n        >>> import torchvision\n        >>> # m is a standard pytorch model\n        >>> m = torchvision.models.resnet18(True)\n        >>> m = nn.DataParallel(m)\n        >>> # after convert, m is using SyncBN\n        >>> m = convert_model(m)\n    \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "        ", "mod", "=", "module", ".", "module", "\n", "mod", "=", "convert_model", "(", "mod", ")", "\n", "mod", "=", "DataParallelWithCallback", "(", "mod", ",", "device_ids", "=", "module", ".", "device_ids", ")", "\n", "return", "mod", "\n", "\n", "", "mod", "=", "module", "\n", "for", "pth_module", ",", "sync_module", "in", "zip", "(", "[", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "BatchNorm1d", ",", "\n", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "BatchNorm2d", ",", "\n", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "BatchNorm3d", "]", ",", "\n", "[", "SynchronizedBatchNorm1d", ",", "\n", "SynchronizedBatchNorm2d", ",", "\n", "SynchronizedBatchNorm3d", "]", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "pth_module", ")", ":", "\n", "            ", "mod", "=", "sync_module", "(", "module", ".", "num_features", ",", "module", ".", "eps", ",", "module", ".", "momentum", ",", "module", ".", "affine", ")", "\n", "mod", ".", "running_mean", "=", "module", ".", "running_mean", "\n", "mod", ".", "running_var", "=", "module", ".", "running_var", "\n", "if", "module", ".", "affine", ":", "\n", "                ", "mod", ".", "weight", ".", "data", "=", "module", ".", "weight", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "mod", ".", "bias", ".", "data", "=", "module", ".", "bias", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "", "", "", "for", "name", ",", "child", "in", "module", ".", "named_children", "(", ")", ":", "\n", "        ", "mod", ".", "add_module", "(", "name", ",", "convert_model", "(", "child", ")", ")", "\n", "\n", "", "return", "mod", "\n", "", ""]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.__init__": [[27, 38], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "batchnorm_reimpl.BatchNorm2dReimpl.register_buffer", "batchnorm_reimpl.BatchNorm2dReimpl.register_buffer", "batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters"], ["def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "num_features", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_running_stats": [[39, 42], ["batchnorm_reimpl.BatchNorm2dReimpl.running_mean.zero_", "batchnorm_reimpl.BatchNorm2dReimpl.running_var.fill_"], "methods", ["None"], ["", "def", "reset_running_stats", "(", "self", ")", ":", "\n", "        ", "self", ".", "running_mean", ".", "zero_", "(", ")", "\n", "self", ".", "running_var", ".", "fill_", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters": [[43, 47], ["batchnorm_reimpl.BatchNorm2dReimpl.reset_running_stats", "torch.uniform_", "torch.uniform_", "torch.uniform_", "torch.zeros_", "torch.zeros_", "torch.zeros_"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_running_stats"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset_running_stats", "(", ")", "\n", "init", ".", "uniform_", "(", "self", ".", "weight", ")", "\n", "init", ".", "zeros_", "(", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.forward": [[48, 74], ["input_.permute().contiguous().view.permute().contiguous().view.size", "input_.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "input_.permute().contiguous().view.permute().contiguous().view.sum", "input_.permute().contiguous().view.permute().contiguous().view.pow().sum", "output.view().permute().contiguous", "batchnorm_reimpl.BatchNorm2dReimpl.bias.unsqueeze", "input_.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "input_.permute().contiguous().view.permute().contiguous().view.pow", "mean.detach", "unbias_var.detach", "batchnorm_reimpl.BatchNorm2dReimpl.weight.unsqueeze", "output.view().permute", "inv_std.unsqueeze", "input_.permute().contiguous().view.permute().contiguous().view.permute", "mean.unsqueeze", "output.view"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size"], ["", "def", "forward", "(", "self", ",", "input_", ")", ":", "\n", "        ", "batchsize", ",", "channels", ",", "height", ",", "width", "=", "input_", ".", "size", "(", ")", "\n", "numel", "=", "batchsize", "*", "height", "*", "width", "\n", "input_", "=", "input_", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "channels", ",", "numel", ")", "\n", "sum_", "=", "input_", ".", "sum", "(", "1", ")", "\n", "sum_of_square", "=", "input_", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ")", "\n", "mean", "=", "sum_", "/", "numel", "\n", "sumvar", "=", "sum_of_square", "-", "sum_", "*", "mean", "\n", "\n", "self", ".", "running_mean", "=", "(", "\n", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_mean", "\n", "+", "self", ".", "momentum", "*", "mean", ".", "detach", "(", ")", "\n", ")", "\n", "unbias_var", "=", "sumvar", "/", "(", "numel", "-", "1", ")", "\n", "self", ".", "running_var", "=", "(", "\n", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_var", "\n", "+", "self", ".", "momentum", "*", "unbias_var", ".", "detach", "(", ")", "\n", ")", "\n", "\n", "bias_var", "=", "sumvar", "/", "numel", "\n", "inv_std", "=", "1", "/", "(", "bias_var", "+", "self", ".", "eps", ")", ".", "pow", "(", "0.5", ")", "\n", "output", "=", "(", "\n", "(", "input_", "-", "mean", ".", "unsqueeze", "(", "1", ")", ")", "*", "inv_std", ".", "unsqueeze", "(", "1", ")", "*", "\n", "self", ".", "weight", ".", "unsqueeze", "(", "1", ")", "+", "self", ".", "bias", ".", "unsqueeze", "(", "1", ")", ")", "\n", "\n", "return", "output", ".", "view", "(", "channels", ",", "batchsize", ",", "height", ",", "width", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.tests.test_sync_batchnorm.SyncTestCase._syncParameters": [[37, 43], ["bn1.reset_parameters", "bn2.reset_parameters", "bn2.weight.data.copy_", "bn2.bias.data.copy_"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters"], ["    ", "def", "_syncParameters", "(", "self", ",", "bn1", ",", "bn2", ")", ":", "\n", "        ", "bn1", ".", "reset_parameters", "(", ")", "\n", "bn2", ".", "reset_parameters", "(", ")", "\n", "if", "bn1", ".", "affine", "and", "bn2", ".", "affine", ":", "\n", "            ", "bn2", ".", "weight", ".", "data", ".", "copy_", "(", "bn1", ".", "weight", ".", "data", ")", "\n", "bn2", ".", "bias", ".", "data", ".", "copy_", "(", "bn1", ".", "bias", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.tests.test_sync_batchnorm.SyncTestCase._checkBatchNormResult": [[44, 66], ["bn1.train", "bn2.train", "test_sync_batchnorm.SyncTestCase._syncParameters", "torch.autograd.Variable", "torch.autograd.Variable", "bn1", "bn1.sum().backward", "torch.autograd.Variable", "torch.autograd.Variable", "bn2", "bn2.sum().backward", "test_sync_batchnorm.SyncTestCase.assertTensorClose", "test_sync_batchnorm.SyncTestCase.assertTensorClose", "test_sync_batchnorm.SyncTestCase.assertTensorClose", "test_sync_batchnorm.SyncTestCase.assertTensorClose", "test_sync_batchnorm.SyncTestCase.assertTensorClose", "input.cuda.cuda.cuda", "test_sync_batchnorm._find_bn", "test_sync_batchnorm._find_bn", "bn1.sum", "bn2.sum", "test_sync_batchnorm._find_bn", "test_sync_batchnorm._find_bn", "test_sync_batchnorm._find_bn", "test_sync_batchnorm._find_bn"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.main.train", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.main.train", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.tests.test_sync_batchnorm.SyncTestCase._syncParameters", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.unittest.TorchTestCase.assertTensorClose", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.unittest.TorchTestCase.assertTensorClose", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.unittest.TorchTestCase.assertTensorClose", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.unittest.TorchTestCase.assertTensorClose", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.unittest.TorchTestCase.assertTensorClose", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.tests.test_sync_batchnorm._find_bn", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.tests.test_sync_batchnorm._find_bn", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.tests.test_sync_batchnorm._find_bn", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.tests.test_sync_batchnorm._find_bn", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.tests.test_sync_batchnorm._find_bn", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.tests.test_sync_batchnorm._find_bn"], ["", "", "def", "_checkBatchNormResult", "(", "self", ",", "bn1", ",", "bn2", ",", "input", ",", "is_train", ",", "cuda", "=", "False", ")", ":", "\n", "        ", "\"\"\"Check the forward and backward for the customized batch normalization.\"\"\"", "\n", "bn1", ".", "train", "(", "mode", "=", "is_train", ")", "\n", "bn2", ".", "train", "(", "mode", "=", "is_train", ")", "\n", "\n", "if", "cuda", ":", "\n", "            ", "input", "=", "input", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "_syncParameters", "(", "_find_bn", "(", "bn1", ")", ",", "_find_bn", "(", "bn2", ")", ")", "\n", "\n", "input1", "=", "Variable", "(", "input", ",", "requires_grad", "=", "True", ")", "\n", "output1", "=", "bn1", "(", "input1", ")", "\n", "output1", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "input2", "=", "Variable", "(", "input", ",", "requires_grad", "=", "True", ")", "\n", "output2", "=", "bn2", "(", "input2", ")", "\n", "output2", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "\n", "self", ".", "assertTensorClose", "(", "input1", ".", "data", ",", "input2", ".", "data", ")", "\n", "self", ".", "assertTensorClose", "(", "output1", ".", "data", ",", "output2", ".", "data", ")", "\n", "self", ".", "assertTensorClose", "(", "input1", ".", "grad", ",", "input2", ".", "grad", ")", "\n", "self", ".", "assertTensorClose", "(", "_find_bn", "(", "bn1", ")", ".", "running_mean", ",", "_find_bn", "(", "bn2", ")", ".", "running_mean", ")", "\n", "self", ".", "assertTensorClose", "(", "_find_bn", "(", "bn1", ")", ".", "running_var", ",", "_find_bn", "(", "bn2", ")", ".", "running_var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.tests.test_sync_batchnorm.SyncTestCase.testSyncBatchNormNormalTrain": [[67, 72], ["torch.BatchNorm1d", "torch.BatchNorm1d", "sync_batchnorm.SynchronizedBatchNorm1d", "test_sync_batchnorm.SyncTestCase._checkBatchNormResult", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.tests.test_sync_batchnorm.SyncTestCase._checkBatchNormResult"], ["", "def", "testSyncBatchNormNormalTrain", "(", "self", ")", ":", "\n", "        ", "bn", "=", "nn", ".", "BatchNorm1d", "(", "10", ")", "\n", "sync_bn", "=", "SynchronizedBatchNorm1d", "(", "10", ")", "\n", "\n", "self", ".", "_checkBatchNormResult", "(", "bn", ",", "sync_bn", ",", "torch", ".", "rand", "(", "16", ",", "10", ")", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.tests.test_sync_batchnorm.SyncTestCase.testSyncBatchNormNormalEval": [[73, 78], ["torch.BatchNorm1d", "torch.BatchNorm1d", "sync_batchnorm.SynchronizedBatchNorm1d", "test_sync_batchnorm.SyncTestCase._checkBatchNormResult", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.tests.test_sync_batchnorm.SyncTestCase._checkBatchNormResult"], ["", "def", "testSyncBatchNormNormalEval", "(", "self", ")", ":", "\n", "        ", "bn", "=", "nn", ".", "BatchNorm1d", "(", "10", ")", "\n", "sync_bn", "=", "SynchronizedBatchNorm1d", "(", "10", ")", "\n", "\n", "self", ".", "_checkBatchNormResult", "(", "bn", ",", "sync_bn", ",", "torch", ".", "rand", "(", "16", ",", "10", ")", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.tests.test_sync_batchnorm.SyncTestCase.testSyncBatchNormSyncTrain": [[79, 88], ["torch.BatchNorm1d", "torch.BatchNorm1d", "sync_batchnorm.SynchronizedBatchNorm1d", "sync_batchnorm.DataParallelWithCallback", "torch.BatchNorm1d.cuda", "sync_batchnorm.DataParallelWithCallback.cuda", "test_sync_batchnorm.SyncTestCase._checkBatchNormResult", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.tests.test_sync_batchnorm.SyncTestCase._checkBatchNormResult"], ["", "def", "testSyncBatchNormSyncTrain", "(", "self", ")", ":", "\n", "        ", "bn", "=", "nn", ".", "BatchNorm1d", "(", "10", ",", "eps", "=", "1e-5", ",", "affine", "=", "False", ")", "\n", "sync_bn", "=", "SynchronizedBatchNorm1d", "(", "10", ",", "eps", "=", "1e-5", ",", "affine", "=", "False", ")", "\n", "sync_bn", "=", "DataParallelWithCallback", "(", "sync_bn", ",", "device_ids", "=", "[", "0", ",", "1", "]", ")", "\n", "\n", "bn", ".", "cuda", "(", ")", "\n", "sync_bn", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "_checkBatchNormResult", "(", "bn", ",", "sync_bn", ",", "torch", ".", "rand", "(", "16", ",", "10", ")", ",", "True", ",", "cuda", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.tests.test_sync_batchnorm.SyncTestCase.testSyncBatchNormSyncEval": [[89, 98], ["torch.BatchNorm1d", "torch.BatchNorm1d", "sync_batchnorm.SynchronizedBatchNorm1d", "sync_batchnorm.DataParallelWithCallback", "torch.BatchNorm1d.cuda", "sync_batchnorm.DataParallelWithCallback.cuda", "test_sync_batchnorm.SyncTestCase._checkBatchNormResult", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.tests.test_sync_batchnorm.SyncTestCase._checkBatchNormResult"], ["", "def", "testSyncBatchNormSyncEval", "(", "self", ")", ":", "\n", "        ", "bn", "=", "nn", ".", "BatchNorm1d", "(", "10", ",", "eps", "=", "1e-5", ",", "affine", "=", "False", ")", "\n", "sync_bn", "=", "SynchronizedBatchNorm1d", "(", "10", ",", "eps", "=", "1e-5", ",", "affine", "=", "False", ")", "\n", "sync_bn", "=", "DataParallelWithCallback", "(", "sync_bn", ",", "device_ids", "=", "[", "0", ",", "1", "]", ")", "\n", "\n", "bn", ".", "cuda", "(", ")", "\n", "sync_bn", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "_checkBatchNormResult", "(", "bn", ",", "sync_bn", ",", "torch", ".", "rand", "(", "16", ",", "10", ")", ",", "False", ",", "cuda", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.tests.test_sync_batchnorm.SyncTestCase.testSyncBatchNorm2DSyncTrain": [[99, 108], ["torch.BatchNorm2d", "torch.BatchNorm2d", "sync_batchnorm.SynchronizedBatchNorm2d", "sync_batchnorm.DataParallelWithCallback", "torch.BatchNorm2d.cuda", "sync_batchnorm.DataParallelWithCallback.cuda", "test_sync_batchnorm.SyncTestCase._checkBatchNormResult", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.tests.test_sync_batchnorm.SyncTestCase._checkBatchNormResult"], ["", "def", "testSyncBatchNorm2DSyncTrain", "(", "self", ")", ":", "\n", "        ", "bn", "=", "nn", ".", "BatchNorm2d", "(", "10", ")", "\n", "sync_bn", "=", "SynchronizedBatchNorm2d", "(", "10", ")", "\n", "sync_bn", "=", "DataParallelWithCallback", "(", "sync_bn", ",", "device_ids", "=", "[", "0", ",", "1", "]", ")", "\n", "\n", "bn", ".", "cuda", "(", ")", "\n", "sync_bn", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "_checkBatchNormResult", "(", "bn", ",", "sync_bn", ",", "torch", ".", "rand", "(", "16", ",", "10", ",", "16", ",", "16", ")", ",", "True", ",", "cuda", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.tests.test_sync_batchnorm.handy_var": [[19, 28], ["a.size", "a.sum"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size"], ["def", "handy_var", "(", "a", ",", "unbias", "=", "True", ")", ":", "\n", "    ", "n", "=", "a", ".", "size", "(", "0", ")", "\n", "asum", "=", "a", ".", "sum", "(", "dim", "=", "0", ")", "\n", "as_sum", "=", "(", "a", "**", "2", ")", ".", "sum", "(", "dim", "=", "0", ")", "# a square sum", "\n", "sumvar", "=", "as_sum", "-", "asum", "*", "asum", "/", "n", "\n", "if", "unbias", ":", "\n", "        ", "return", "sumvar", "/", "(", "n", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "return", "sumvar", "/", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.tests.test_sync_batchnorm._find_bn": [[30, 34], ["module.modules", "isinstance"], "function", ["None"], ["", "", "def", "_find_bn", "(", "module", ")", ":", "\n", "    ", "for", "m", "in", "module", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "SynchronizedBatchNorm1d", ",", "SynchronizedBatchNorm2d", ")", ")", ":", "\n", "            ", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.tests.test_numeric_batchnorm_v2.NumericTestCasev2.testNumericBatchNorm": [[28, 58], ["torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.SGD", "torch.SGD", "torch.SGD", "sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl", "sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.weight.data.copy_", "sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.bias.data.copy_", "torch.SGD", "torch.SGD", "torch.SGD", "range", "test_numeric_batchnorm_v2.NumericTestCasev2.assertTensorClose", "test_numeric_batchnorm_v2.NumericTestCasev2.assertTensorClose", "test_numeric_batchnorm_v2.NumericTestCasev2.assertTensorClose", "test_numeric_batchnorm_v2.NumericTestCasev2.assertTensorClose", "test_numeric_batchnorm_v2.NumericTestCasev2.assertTensorClose", "test_numeric_batchnorm_v2.NumericTestCasev2.assertTensorClose", "test_numeric_batchnorm_v2.NumericTestCasev2.assertTensorClose", "torch.BatchNorm2d.parameters", "sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.parameters", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand.clone().requires_grad_", "torch.rand.clone().requires_grad_", "torch.rand.clone().requires_grad_", "torch.BatchNorm2d.", "nn.BatchNorm2d.sum().backward", "torch.SGD.step", "torch.rand.clone().requires_grad_", "torch.rand.clone().requires_grad_", "torch.rand.clone().requires_grad_", "sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.", "sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.sum().backward", "torch.SGD.step", "torch.rand.clone", "torch.rand.clone", "torch.rand.clone", "nn.BatchNorm2d.sum", "torch.rand.clone", "torch.rand.clone", "torch.rand.clone", "sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.sum"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.unittest.TorchTestCase.assertTensorClose", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.unittest.TorchTestCase.assertTensorClose", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.unittest.TorchTestCase.assertTensorClose", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.unittest.TorchTestCase.assertTensorClose", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.unittest.TorchTestCase.assertTensorClose", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.unittest.TorchTestCase.assertTensorClose", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.unittest.TorchTestCase.assertTensorClose"], ["    ", "def", "testNumericBatchNorm", "(", "self", ")", ":", "\n", "        ", "CHANNELS", "=", "16", "\n", "batchnorm1", "=", "nn", ".", "BatchNorm2d", "(", "CHANNELS", ",", "momentum", "=", "1", ")", "\n", "optimizer1", "=", "optim", ".", "SGD", "(", "batchnorm1", ".", "parameters", "(", ")", ",", "lr", "=", "0.01", ")", "\n", "\n", "batchnorm2", "=", "BatchNorm2dReimpl", "(", "CHANNELS", ",", "momentum", "=", "1", ")", "\n", "batchnorm2", ".", "weight", ".", "data", ".", "copy_", "(", "batchnorm1", ".", "weight", ".", "data", ")", "\n", "batchnorm2", ".", "bias", ".", "data", ".", "copy_", "(", "batchnorm1", ".", "bias", ".", "data", ")", "\n", "optimizer2", "=", "optim", ".", "SGD", "(", "batchnorm2", ".", "parameters", "(", ")", ",", "lr", "=", "0.01", ")", "\n", "\n", "for", "_", "in", "range", "(", "100", ")", ":", "\n", "            ", "input_", "=", "torch", ".", "rand", "(", "16", ",", "CHANNELS", ",", "16", ",", "16", ")", "\n", "\n", "input1", "=", "input_", ".", "clone", "(", ")", ".", "requires_grad_", "(", "True", ")", "\n", "output1", "=", "batchnorm1", "(", "input1", ")", "\n", "output1", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "optimizer1", ".", "step", "(", ")", "\n", "\n", "input2", "=", "input_", ".", "clone", "(", ")", ".", "requires_grad_", "(", "True", ")", "\n", "output2", "=", "batchnorm2", "(", "input2", ")", "\n", "output2", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "optimizer2", ".", "step", "(", ")", "\n", "\n", "", "self", ".", "assertTensorClose", "(", "input1", ",", "input2", ")", "\n", "self", ".", "assertTensorClose", "(", "output1", ",", "output2", ")", "\n", "self", ".", "assertTensorClose", "(", "input1", ".", "grad", ",", "input2", ".", "grad", ")", "\n", "self", ".", "assertTensorClose", "(", "batchnorm1", ".", "weight", ".", "grad", ",", "batchnorm2", ".", "weight", ".", "grad", ")", "\n", "self", ".", "assertTensorClose", "(", "batchnorm1", ".", "bias", ".", "grad", ",", "batchnorm2", ".", "bias", ".", "grad", ")", "\n", "self", ".", "assertTensorClose", "(", "batchnorm1", ".", "running_mean", ",", "batchnorm2", ".", "running_mean", ")", "\n", "self", ".", "assertTensorClose", "(", "batchnorm2", ".", "running_mean", ",", "batchnorm2", ".", "running_mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.tests.test_numeric_batchnorm.NumericTestCase.testNumericBatchNorm": [[30, 53], ["torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d.train", "torch.autograd.Variable", "torch.autograd.Variable", "torch.BatchNorm1d.", "nn.BatchNorm1d.sum", "bn.sum.backward", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable.mean", "torch.autograd.Variable.mean", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "b_var2.sum", "b_var2.sum.backward", "test_numeric_batchnorm.NumericTestCase.assertTensorClose", "test_numeric_batchnorm.NumericTestCase.assertTensorClose", "test_numeric_batchnorm.NumericTestCase.assertTensorClose", "test_numeric_batchnorm.NumericTestCase.assertTensorClose", "test_numeric_batchnorm.NumericTestCase.assertTensorClose", "handy_var().clamp", "torch.rand.mean", "torch.rand.mean", "test_numeric_batchnorm.handy_var", "test_numeric_batchnorm.handy_var"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.main.train", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.unittest.TorchTestCase.assertTensorClose", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.unittest.TorchTestCase.assertTensorClose", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.unittest.TorchTestCase.assertTensorClose", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.unittest.TorchTestCase.assertTensorClose", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.unittest.TorchTestCase.assertTensorClose", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.tests.test_numeric_batchnorm.handy_var", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.tests.test_numeric_batchnorm.handy_var"], ["    ", "def", "testNumericBatchNorm", "(", "self", ")", ":", "\n", "        ", "a", "=", "torch", ".", "rand", "(", "16", ",", "10", ")", "\n", "bn", "=", "nn", ".", "BatchNorm1d", "(", "10", ",", "momentum", "=", "1", ",", "eps", "=", "1e-5", ",", "affine", "=", "False", ")", "\n", "bn", ".", "train", "(", ")", "\n", "\n", "a_var1", "=", "Variable", "(", "a", ",", "requires_grad", "=", "True", ")", "\n", "b_var1", "=", "bn", "(", "a_var1", ")", "\n", "loss1", "=", "b_var1", ".", "sum", "(", ")", "\n", "loss1", ".", "backward", "(", ")", "\n", "\n", "a_var2", "=", "Variable", "(", "a", ",", "requires_grad", "=", "True", ")", "\n", "a_mean2", "=", "a_var2", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "a_std2", "=", "torch", ".", "sqrt", "(", "handy_var", "(", "a_var2", ",", "unbias", "=", "False", ")", ".", "clamp", "(", "min", "=", "1e-5", ")", ")", "\n", "# a_std2 = torch.sqrt(a_var2.var(dim=0, keepdim=True, unbiased=False) + 1e-5)", "\n", "b_var2", "=", "(", "a_var2", "-", "a_mean2", ")", "/", "a_std2", "\n", "loss2", "=", "b_var2", ".", "sum", "(", ")", "\n", "loss2", ".", "backward", "(", ")", "\n", "\n", "self", ".", "assertTensorClose", "(", "bn", ".", "running_mean", ",", "a", ".", "mean", "(", "dim", "=", "0", ")", ")", "\n", "self", ".", "assertTensorClose", "(", "bn", ".", "running_var", ",", "handy_var", "(", "a", ")", ")", "\n", "self", ".", "assertTensorClose", "(", "a_var1", ".", "data", ",", "a_var2", ".", "data", ")", "\n", "self", ".", "assertTensorClose", "(", "b_var1", ".", "data", ",", "b_var2", ".", "data", ")", "\n", "self", ".", "assertTensorClose", "(", "a_var1", ".", "grad", ",", "a_var2", ".", "grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.tests.test_numeric_batchnorm.handy_var": [[18, 27], ["a.size", "a.sum"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size"], ["def", "handy_var", "(", "a", ",", "unbias", "=", "True", ")", ":", "\n", "    ", "n", "=", "a", ".", "size", "(", "0", ")", "\n", "asum", "=", "a", ".", "sum", "(", "dim", "=", "0", ")", "\n", "as_sum", "=", "(", "a", "**", "2", ")", ".", "sum", "(", "dim", "=", "0", ")", "# a square sum", "\n", "sumvar", "=", "as_sum", "-", "asum", "*", "asum", "/", "n", "\n", "if", "unbias", ":", "\n", "        ", "return", "sumvar", "/", "(", "n", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "return", "sumvar", "/", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.yolo.models.Upsample.__init__": [[89, 93], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__"], ["def", "__init__", "(", "self", ",", "scale_factor", ",", "mode", "=", "\"nearest\"", ")", ":", "\n", "        ", "super", "(", "Upsample", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.yolo.models.Upsample.forward": [[94, 97], ["torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "self", ".", "scale_factor", ",", "mode", "=", "self", ".", "mode", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.yolo.models.EmptyLayer.__init__": [[102, 104], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "EmptyLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.yolo.models.YOLOLayer.__init__": [[109, 122], ["torch.Module.__init__", "len", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.BCELoss", "torch.BCELoss", "torch.BCELoss"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__"], ["def", "__init__", "(", "self", ",", "anchors", ",", "num_classes", ",", "img_dim", "=", "416", ")", ":", "\n", "        ", "super", "(", "YOLOLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "anchors", "=", "anchors", "\n", "self", ".", "num_anchors", "=", "len", "(", "anchors", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "ignore_thres", "=", "0.5", "\n", "self", ".", "mse_loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "self", ".", "bce_loss", "=", "nn", ".", "BCELoss", "(", ")", "\n", "self", ".", "obj_scale", "=", "1", "\n", "self", ".", "noobj_scale", "=", "100", "\n", "self", ".", "metrics", "=", "{", "}", "\n", "self", ".", "img_dim", "=", "img_dim", "\n", "self", ".", "grid_size", "=", "0", "# grid size", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.yolo.models.YOLOLayer.compute_grid_offsets": [[123, 134], ["torch.arange().repeat().view().type", "torch.arange().repeat().view().type", "torch.arange().repeat().view().type", "torch.arange().repeat().view().type", "torch.arange().repeat().view().type", "torch.arange().repeat().view().type", "torch.arange().repeat().view().type", "torch.arange().repeat().view().type", "torch.arange().repeat().view().type", "torch.arange().repeat().t().view().type", "torch.arange().repeat().t().view().type", "torch.arange().repeat().t().view().type", "torch.arange().repeat().t().view().type", "torch.arange().repeat().t().view().type", "torch.arange().repeat().t().view().type", "torch.arange().repeat().t().view().type", "torch.arange().repeat().t().view().type", "torch.arange().repeat().t().view().type", "FloatTensor", "models.YOLOLayer.scaled_anchors[].view", "models.YOLOLayer.scaled_anchors[].view", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().t().view", "torch.arange().repeat().t().view", "torch.arange().repeat().t().view", "torch.arange().repeat().t().view", "torch.arange().repeat().t().view", "torch.arange().repeat().t().view", "torch.arange().repeat().t().view", "torch.arange().repeat().t().view", "torch.arange().repeat().t().view", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat().t", "torch.arange().repeat().t", "torch.arange().repeat().t", "torch.arange().repeat().t", "torch.arange().repeat().t", "torch.arange().repeat().t", "torch.arange().repeat().t", "torch.arange().repeat().t", "torch.arange().repeat().t", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "compute_grid_offsets", "(", "self", ",", "grid_size", ",", "cuda", "=", "True", ")", ":", "\n", "        ", "self", ".", "grid_size", "=", "grid_size", "\n", "g", "=", "self", ".", "grid_size", "\n", "FloatTensor", "=", "torch", ".", "cuda", ".", "FloatTensor", "if", "cuda", "else", "torch", ".", "FloatTensor", "\n", "self", ".", "stride", "=", "self", ".", "img_dim", "/", "self", ".", "grid_size", "\n", "# Calculate offsets for each grid", "\n", "self", ".", "grid_x", "=", "torch", ".", "arange", "(", "g", ")", ".", "repeat", "(", "g", ",", "1", ")", ".", "view", "(", "[", "1", ",", "1", ",", "g", ",", "g", "]", ")", ".", "type", "(", "FloatTensor", ")", "\n", "self", ".", "grid_y", "=", "torch", ".", "arange", "(", "g", ")", ".", "repeat", "(", "g", ",", "1", ")", ".", "t", "(", ")", ".", "view", "(", "[", "1", ",", "1", ",", "g", ",", "g", "]", ")", ".", "type", "(", "FloatTensor", ")", "\n", "self", ".", "scaled_anchors", "=", "FloatTensor", "(", "[", "(", "a_w", "/", "self", ".", "stride", ",", "a_h", "/", "self", ".", "stride", ")", "for", "a_w", ",", "a_h", "in", "self", ".", "anchors", "]", ")", "\n", "self", ".", "anchor_w", "=", "self", ".", "scaled_anchors", "[", ":", ",", "0", ":", "1", "]", ".", "view", "(", "(", "1", ",", "self", ".", "num_anchors", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "anchor_h", "=", "self", ".", "scaled_anchors", "[", ":", ",", "1", ":", "2", "]", ".", "view", "(", "(", "1", ",", "self", ".", "num_anchors", ",", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.yolo.models.YOLOLayer.forward": [[135, 232], ["torch.sigmoid.size", "torch.sigmoid.size", "torch.sigmoid.size", "torch.sigmoid.size", "torch.sigmoid.size", "torch.sigmoid.size", "torch.sigmoid.view().permute().contiguous", "torch.sigmoid.view().permute().contiguous", "torch.sigmoid.view().permute().contiguous", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "FloatTensor", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.YOLOLayer.compute_grid_offsets", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "models.functions.yolo.utils.utils.build_targets", "models.YOLOLayer.mse_loss", "models.YOLOLayer.mse_loss", "models.YOLOLayer.mse_loss", "models.YOLOLayer.mse_loss", "models.YOLOLayer.bce_loss", "models.YOLOLayer.bce_loss", "models.YOLOLayer.bce_loss", "pred_conf[].mean", "pred_conf[].mean", "torch.sigmoid.view().permute", "torch.sigmoid.view().permute", "torch.sigmoid.view().permute", "torch.sigmoid.view", "torch.sigmoid.view", "torch.sigmoid.view", "torch.sigmoid.view", "torch.sigmoid.view", "torch.sigmoid.view", "class_mask[].mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "models.functions.yolo.utils.utils.to_cpu().item", "models.functions.yolo.utils.utils.to_cpu().item", "models.functions.yolo.utils.utils.to_cpu().item", "models.functions.yolo.utils.utils.to_cpu().item", "models.functions.yolo.utils.utils.to_cpu().item", "models.functions.yolo.utils.utils.to_cpu().item", "models.functions.yolo.utils.utils.to_cpu().item", "models.functions.yolo.utils.utils.to_cpu().item", "models.functions.yolo.utils.utils.to_cpu().item", "models.functions.yolo.utils.utils.to_cpu().item", "models.functions.yolo.utils.utils.to_cpu().item", "models.functions.yolo.utils.utils.to_cpu().item", "models.functions.yolo.utils.utils.to_cpu().item", "FloatTensor.view", "conf50.sum", "obj_mask.sum", "obj_mask.sum", "torch.sigmoid.view", "torch.sigmoid.view", "torch.sigmoid.view", "models.functions.yolo.utils.utils.to_cpu", "models.functions.yolo.utils.utils.to_cpu", "models.functions.yolo.utils.utils.to_cpu", "models.functions.yolo.utils.utils.to_cpu", "models.functions.yolo.utils.utils.to_cpu", "models.functions.yolo.utils.utils.to_cpu", "models.functions.yolo.utils.utils.to_cpu", "models.functions.yolo.utils.utils.to_cpu", "models.functions.yolo.utils.utils.to_cpu", "models.functions.yolo.utils.utils.to_cpu", "models.functions.yolo.utils.utils.to_cpu", "models.functions.yolo.utils.utils.to_cpu", "models.functions.yolo.utils.utils.to_cpu"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.yolo.models.YOLOLayer.compute_grid_offsets", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.utils.build_targets", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.utils.to_cpu", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.utils.to_cpu", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.utils.to_cpu", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.utils.to_cpu", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.utils.to_cpu", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.utils.to_cpu", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.utils.to_cpu", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.utils.to_cpu", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.utils.to_cpu", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.utils.to_cpu", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.utils.to_cpu", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.utils.to_cpu", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.utils.to_cpu"], ["", "def", "forward", "(", "self", ",", "x", ",", "targets", "=", "None", ",", "img_dim", "=", "None", ")", ":", "\n", "\n", "# Tensors for cuda support", "\n", "        ", "FloatTensor", "=", "torch", ".", "cuda", ".", "FloatTensor", "if", "x", ".", "is_cuda", "else", "torch", ".", "FloatTensor", "\n", "LongTensor", "=", "torch", ".", "cuda", ".", "LongTensor", "if", "x", ".", "is_cuda", "else", "torch", ".", "LongTensor", "\n", "ByteTensor", "=", "torch", ".", "cuda", ".", "ByteTensor", "if", "x", ".", "is_cuda", "else", "torch", ".", "ByteTensor", "\n", "\n", "self", ".", "img_dim", "=", "img_dim", "\n", "num_samples", "=", "x", ".", "size", "(", "0", ")", "\n", "grid_size", "=", "x", ".", "size", "(", "2", ")", "\n", "\n", "prediction", "=", "(", "\n", "x", ".", "view", "(", "num_samples", ",", "self", ".", "num_anchors", ",", "self", ".", "num_classes", "+", "5", ",", "grid_size", ",", "grid_size", ")", "\n", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "4", ",", "2", ")", "\n", ".", "contiguous", "(", ")", "\n", ")", "\n", "\n", "# Get outputs", "\n", "x", "=", "torch", ".", "sigmoid", "(", "prediction", "[", "...", ",", "0", "]", ")", "# Center x", "\n", "y", "=", "torch", ".", "sigmoid", "(", "prediction", "[", "...", ",", "1", "]", ")", "# Center y", "\n", "w", "=", "prediction", "[", "...", ",", "2", "]", "# Width", "\n", "h", "=", "prediction", "[", "...", ",", "3", "]", "# Height", "\n", "pred_conf", "=", "torch", ".", "sigmoid", "(", "prediction", "[", "...", ",", "4", "]", ")", "# Conf", "\n", "pred_cls", "=", "torch", ".", "sigmoid", "(", "prediction", "[", "...", ",", "5", ":", "]", ")", "# Cls pred.", "\n", "\n", "# If grid size does not match current we compute new offsets", "\n", "if", "grid_size", "!=", "self", ".", "grid_size", ":", "\n", "            ", "self", ".", "compute_grid_offsets", "(", "grid_size", ",", "cuda", "=", "x", ".", "is_cuda", ")", "\n", "\n", "# Add offset and scale with anchors", "\n", "", "pred_boxes", "=", "FloatTensor", "(", "prediction", "[", "...", ",", ":", "4", "]", ".", "shape", ")", "\n", "pred_boxes", "[", "...", ",", "0", "]", "=", "x", ".", "data", "+", "self", ".", "grid_x", "\n", "pred_boxes", "[", "...", ",", "1", "]", "=", "y", ".", "data", "+", "self", ".", "grid_y", "\n", "pred_boxes", "[", "...", ",", "2", "]", "=", "torch", ".", "exp", "(", "w", ".", "data", ")", "*", "self", ".", "anchor_w", "\n", "pred_boxes", "[", "...", ",", "3", "]", "=", "torch", ".", "exp", "(", "h", ".", "data", ")", "*", "self", ".", "anchor_h", "\n", "\n", "output", "=", "torch", ".", "cat", "(", "\n", "(", "\n", "pred_boxes", ".", "view", "(", "num_samples", ",", "-", "1", ",", "4", ")", "*", "self", ".", "stride", ",", "\n", "pred_conf", ".", "view", "(", "num_samples", ",", "-", "1", ",", "1", ")", ",", "\n", "pred_cls", ".", "view", "(", "num_samples", ",", "-", "1", ",", "self", ".", "num_classes", ")", ",", "\n", ")", ",", "\n", "-", "1", ",", "\n", ")", "\n", "\n", "if", "targets", "is", "None", ":", "\n", "            ", "return", "output", ",", "0", "\n", "", "else", ":", "\n", "            ", "iou_scores", ",", "class_mask", ",", "obj_mask", ",", "noobj_mask", ",", "tx", ",", "ty", ",", "tw", ",", "th", ",", "tcls", ",", "tconf", "=", "build_targets", "(", "\n", "pred_boxes", "=", "pred_boxes", ",", "\n", "pred_cls", "=", "pred_cls", ",", "\n", "target", "=", "targets", ",", "\n", "anchors", "=", "self", ".", "scaled_anchors", ",", "\n", "ignore_thres", "=", "self", ".", "ignore_thres", ",", "\n", ")", "\n", "\n", "# Loss : Mask outputs to ignore non-existing objects (except with conf. loss)", "\n", "loss_x", "=", "self", ".", "mse_loss", "(", "x", "[", "obj_mask", "]", ",", "tx", "[", "obj_mask", "]", ")", "\n", "loss_y", "=", "self", ".", "mse_loss", "(", "y", "[", "obj_mask", "]", ",", "ty", "[", "obj_mask", "]", ")", "\n", "loss_w", "=", "self", ".", "mse_loss", "(", "w", "[", "obj_mask", "]", ",", "tw", "[", "obj_mask", "]", ")", "\n", "loss_h", "=", "self", ".", "mse_loss", "(", "h", "[", "obj_mask", "]", ",", "th", "[", "obj_mask", "]", ")", "\n", "loss_conf_obj", "=", "self", ".", "bce_loss", "(", "pred_conf", "[", "obj_mask", "]", ",", "tconf", "[", "obj_mask", "]", ")", "\n", "loss_conf_noobj", "=", "self", ".", "bce_loss", "(", "pred_conf", "[", "noobj_mask", "]", ",", "tconf", "[", "noobj_mask", "]", ")", "\n", "loss_conf", "=", "self", ".", "obj_scale", "*", "loss_conf_obj", "+", "self", ".", "noobj_scale", "*", "loss_conf_noobj", "\n", "loss_cls", "=", "self", ".", "bce_loss", "(", "pred_cls", "[", "obj_mask", "]", ",", "tcls", "[", "obj_mask", "]", ")", "\n", "total_loss", "=", "loss_x", "+", "loss_y", "+", "loss_w", "+", "loss_h", "+", "loss_conf", "+", "loss_cls", "\n", "\n", "# Metrics", "\n", "cls_acc", "=", "100", "*", "class_mask", "[", "obj_mask", "]", ".", "mean", "(", ")", "\n", "conf_obj", "=", "pred_conf", "[", "obj_mask", "]", ".", "mean", "(", ")", "\n", "conf_noobj", "=", "pred_conf", "[", "noobj_mask", "]", ".", "mean", "(", ")", "\n", "conf50", "=", "(", "pred_conf", ">", "0.5", ")", ".", "float", "(", ")", "\n", "iou50", "=", "(", "iou_scores", ">", "0.5", ")", ".", "float", "(", ")", "\n", "iou75", "=", "(", "iou_scores", ">", "0.75", ")", ".", "float", "(", ")", "\n", "detected_mask", "=", "conf50", "*", "class_mask", "*", "tconf", "\n", "precision", "=", "torch", ".", "sum", "(", "iou50", "*", "detected_mask", ")", "/", "(", "conf50", ".", "sum", "(", ")", "+", "1e-16", ")", "\n", "recall50", "=", "torch", ".", "sum", "(", "iou50", "*", "detected_mask", ")", "/", "(", "obj_mask", ".", "sum", "(", ")", "+", "1e-16", ")", "\n", "recall75", "=", "torch", ".", "sum", "(", "iou75", "*", "detected_mask", ")", "/", "(", "obj_mask", ".", "sum", "(", ")", "+", "1e-16", ")", "\n", "\n", "self", ".", "metrics", "=", "{", "\n", "\"loss\"", ":", "to_cpu", "(", "total_loss", ")", ".", "item", "(", ")", ",", "\n", "\"x\"", ":", "to_cpu", "(", "loss_x", ")", ".", "item", "(", ")", ",", "\n", "\"y\"", ":", "to_cpu", "(", "loss_y", ")", ".", "item", "(", ")", ",", "\n", "\"w\"", ":", "to_cpu", "(", "loss_w", ")", ".", "item", "(", ")", ",", "\n", "\"h\"", ":", "to_cpu", "(", "loss_h", ")", ".", "item", "(", ")", ",", "\n", "\"conf\"", ":", "to_cpu", "(", "loss_conf", ")", ".", "item", "(", ")", ",", "\n", "\"cls\"", ":", "to_cpu", "(", "loss_cls", ")", ".", "item", "(", ")", ",", "\n", "\"cls_acc\"", ":", "to_cpu", "(", "cls_acc", ")", ".", "item", "(", ")", ",", "\n", "\"recall50\"", ":", "to_cpu", "(", "recall50", ")", ".", "item", "(", ")", ",", "\n", "\"recall75\"", ":", "to_cpu", "(", "recall75", ")", ".", "item", "(", ")", ",", "\n", "\"precision\"", ":", "to_cpu", "(", "precision", ")", ".", "item", "(", ")", ",", "\n", "\"conf_obj\"", ":", "to_cpu", "(", "conf_obj", ")", ".", "item", "(", ")", ",", "\n", "\"conf_noobj\"", ":", "to_cpu", "(", "conf_noobj", ")", ".", "item", "(", ")", ",", "\n", "\"grid_size\"", ":", "grid_size", ",", "\n", "}", "\n", "\n", "return", "output", ",", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.yolo.models.Darknet.__init__": [[237, 245], ["torch.Module.__init__", "parse_model_config", "models.create_modules", "numpy.array", "hasattr"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.parse_config.parse_model_config", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.yolo.models.create_modules"], ["def", "__init__", "(", "self", ",", "config_path", ",", "img_size", "=", "416", ")", ":", "\n", "        ", "super", "(", "Darknet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "module_defs", "=", "parse_model_config", "(", "config_path", ")", "\n", "self", ".", "hyperparams", ",", "self", ".", "module_list", "=", "create_modules", "(", "self", ".", "module_defs", ")", "\n", "self", ".", "yolo_layers", "=", "[", "layer", "[", "0", "]", "for", "layer", "in", "self", ".", "module_list", "if", "hasattr", "(", "layer", "[", "0", "]", ",", "\"metrics\"", ")", "]", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "seen", "=", "0", "\n", "self", ".", "header_info", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "self", ".", "seen", ",", "0", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.yolo.models.Darknet.forward": [[246, 265], ["enumerate", "models.functions.yolo.utils.utils.to_cpu", "zip", "layer_outputs.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "module", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "int", "models.functions.yolo.utils.utils.to_cpu.append", "module_def[].split", "int"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.utils.to_cpu"], ["", "def", "forward", "(", "self", ",", "x", ",", "targets", "=", "None", ")", ":", "\n", "        ", "img_dim", "=", "x", ".", "shape", "[", "2", "]", "\n", "loss", "=", "0", "\n", "layer_outputs", ",", "yolo_outputs", "=", "[", "]", ",", "[", "]", "\n", "for", "i", ",", "(", "module_def", ",", "module", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "module_defs", ",", "self", ".", "module_list", ")", ")", ":", "\n", "            ", "if", "module_def", "[", "\"type\"", "]", "in", "[", "\"convolutional\"", ",", "\"upsample\"", ",", "\"maxpool\"", "]", ":", "\n", "                ", "x", "=", "module", "(", "x", ")", "\n", "", "elif", "module_def", "[", "\"type\"", "]", "==", "\"route\"", ":", "\n", "                ", "x", "=", "torch", ".", "cat", "(", "[", "layer_outputs", "[", "int", "(", "layer_i", ")", "]", "for", "layer_i", "in", "module_def", "[", "\"layers\"", "]", ".", "split", "(", "\",\"", ")", "]", ",", "1", ")", "\n", "", "elif", "module_def", "[", "\"type\"", "]", "==", "\"shortcut\"", ":", "\n", "                ", "layer_i", "=", "int", "(", "module_def", "[", "\"from\"", "]", ")", "\n", "x", "=", "layer_outputs", "[", "-", "1", "]", "+", "layer_outputs", "[", "layer_i", "]", "\n", "", "elif", "module_def", "[", "\"type\"", "]", "==", "\"yolo\"", ":", "\n", "                ", "x", ",", "layer_loss", "=", "module", "[", "0", "]", "(", "x", ",", "targets", ",", "img_dim", ")", "\n", "loss", "+=", "layer_loss", "\n", "yolo_outputs", ".", "append", "(", "x", ")", "\n", "", "layer_outputs", ".", "append", "(", "x", ")", "\n", "", "yolo_outputs", "=", "to_cpu", "(", "torch", ".", "cat", "(", "yolo_outputs", ",", "1", ")", ")", "\n", "return", "yolo_outputs", "if", "targets", "is", "None", "else", "(", "loss", ",", "yolo_outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.yolo.models.Darknet.load_darknet_weights": [[266, 318], ["enumerate", "open", "numpy.fromfile", "numpy.fromfile", "zip", "conv_layer.weight.numel", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "conv_layer.weight.data.copy_", "bn_layer.bias.numel", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "bn_layer.bias.data.copy_", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "bn_layer.weight.data.copy_", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "bn_layer.running_mean.data.copy_", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "bn_layer.running_var.data.copy_", "conv_layer.bias.numel", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "torch.from_numpy().view_as", "conv_layer.bias.data.copy_", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "load_darknet_weights", "(", "self", ",", "weights_path", ")", ":", "\n", "        ", "\"\"\"Parses and loads the weights stored in 'weights_path'\"\"\"", "\n", "\n", "# Open the weights file", "\n", "with", "open", "(", "weights_path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "header", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "np", ".", "int32", ",", "count", "=", "5", ")", "# First five are header values", "\n", "self", ".", "header_info", "=", "header", "# Needed to write header when saving weights", "\n", "self", ".", "seen", "=", "header", "[", "3", "]", "# number of images seen during training", "\n", "weights", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "np", ".", "float32", ")", "# The rest are weights", "\n", "\n", "# Establish cutoff for loading backbone weights", "\n", "", "cutoff", "=", "None", "\n", "if", "\"darknet53.conv.74\"", "in", "weights_path", ":", "\n", "            ", "cutoff", "=", "75", "\n", "\n", "", "ptr", "=", "0", "\n", "for", "i", ",", "(", "module_def", ",", "module", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "module_defs", ",", "self", ".", "module_list", ")", ")", ":", "\n", "            ", "if", "i", "==", "cutoff", ":", "\n", "                ", "break", "\n", "", "if", "module_def", "[", "\"type\"", "]", "==", "\"convolutional\"", ":", "\n", "                ", "conv_layer", "=", "module", "[", "0", "]", "\n", "if", "module_def", "[", "\"batch_normalize\"", "]", ":", "\n", "# Load BN bias, weights, running mean and running variance", "\n", "                    ", "bn_layer", "=", "module", "[", "1", "]", "\n", "num_b", "=", "bn_layer", ".", "bias", ".", "numel", "(", ")", "# Number of biases", "\n", "# Bias", "\n", "bn_b", "=", "torch", ".", "from_numpy", "(", "weights", "[", "ptr", ":", "ptr", "+", "num_b", "]", ")", ".", "view_as", "(", "bn_layer", ".", "bias", ")", "\n", "bn_layer", ".", "bias", ".", "data", ".", "copy_", "(", "bn_b", ")", "\n", "ptr", "+=", "num_b", "\n", "# Weight", "\n", "bn_w", "=", "torch", ".", "from_numpy", "(", "weights", "[", "ptr", ":", "ptr", "+", "num_b", "]", ")", ".", "view_as", "(", "bn_layer", ".", "weight", ")", "\n", "bn_layer", ".", "weight", ".", "data", ".", "copy_", "(", "bn_w", ")", "\n", "ptr", "+=", "num_b", "\n", "# Running Mean", "\n", "bn_rm", "=", "torch", ".", "from_numpy", "(", "weights", "[", "ptr", ":", "ptr", "+", "num_b", "]", ")", ".", "view_as", "(", "bn_layer", ".", "running_mean", ")", "\n", "bn_layer", ".", "running_mean", ".", "data", ".", "copy_", "(", "bn_rm", ")", "\n", "ptr", "+=", "num_b", "\n", "# Running Var", "\n", "bn_rv", "=", "torch", ".", "from_numpy", "(", "weights", "[", "ptr", ":", "ptr", "+", "num_b", "]", ")", ".", "view_as", "(", "bn_layer", ".", "running_var", ")", "\n", "bn_layer", ".", "running_var", ".", "data", ".", "copy_", "(", "bn_rv", ")", "\n", "ptr", "+=", "num_b", "\n", "", "else", ":", "\n", "# Load conv. bias", "\n", "                    ", "num_b", "=", "conv_layer", ".", "bias", ".", "numel", "(", ")", "\n", "conv_b", "=", "torch", ".", "from_numpy", "(", "weights", "[", "ptr", ":", "ptr", "+", "num_b", "]", ")", ".", "view_as", "(", "conv_layer", ".", "bias", ")", "\n", "conv_layer", ".", "bias", ".", "data", ".", "copy_", "(", "conv_b", ")", "\n", "ptr", "+=", "num_b", "\n", "# Load conv. weights", "\n", "", "num_w", "=", "conv_layer", ".", "weight", ".", "numel", "(", ")", "\n", "conv_w", "=", "torch", ".", "from_numpy", "(", "weights", "[", "ptr", ":", "ptr", "+", "num_w", "]", ")", ".", "view_as", "(", "conv_layer", ".", "weight", ")", "\n", "conv_layer", ".", "weight", ".", "data", ".", "copy_", "(", "conv_w", ")", "\n", "ptr", "+=", "num_w", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.yolo.models.Darknet.save_darknet_weights": [[319, 346], ["open", "models.Darknet.header_info.tofile", "enumerate", "open.close", "zip", "conv_layer.weight.data.cpu().numpy().tofile", "bn_layer.bias.data.cpu().numpy().tofile", "bn_layer.weight.data.cpu().numpy().tofile", "bn_layer.running_mean.data.cpu().numpy().tofile", "bn_layer.running_var.data.cpu().numpy().tofile", "conv_layer.bias.data.cpu().numpy().tofile", "conv_layer.weight.data.cpu().numpy", "bn_layer.bias.data.cpu().numpy", "bn_layer.weight.data.cpu().numpy", "bn_layer.running_mean.data.cpu().numpy", "bn_layer.running_var.data.cpu().numpy", "conv_layer.bias.data.cpu().numpy", "conv_layer.weight.data.cpu", "bn_layer.bias.data.cpu", "bn_layer.weight.data.cpu", "bn_layer.running_mean.data.cpu", "bn_layer.running_var.data.cpu", "conv_layer.bias.data.cpu"], "methods", ["None"], ["", "", "", "def", "save_darknet_weights", "(", "self", ",", "path", ",", "cutoff", "=", "-", "1", ")", ":", "\n", "        ", "\"\"\"\n            @:param path    - path of the new weights file\n            @:param cutoff  - save layers between 0 and cutoff (cutoff = -1 -> all are saved)\n        \"\"\"", "\n", "fp", "=", "open", "(", "path", ",", "\"wb\"", ")", "\n", "self", ".", "header_info", "[", "3", "]", "=", "self", ".", "seen", "\n", "self", ".", "header_info", ".", "tofile", "(", "fp", ")", "\n", "\n", "# Iterate through layers", "\n", "for", "i", ",", "(", "module_def", ",", "module", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "module_defs", "[", ":", "cutoff", "]", ",", "self", ".", "module_list", "[", ":", "cutoff", "]", ")", ")", ":", "\n", "            ", "if", "module_def", "[", "\"type\"", "]", "==", "\"convolutional\"", ":", "\n", "                ", "conv_layer", "=", "module", "[", "0", "]", "\n", "# If batch norm, load bn first", "\n", "if", "module_def", "[", "\"batch_normalize\"", "]", ":", "\n", "                    ", "bn_layer", "=", "module", "[", "1", "]", "\n", "bn_layer", ".", "bias", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tofile", "(", "fp", ")", "\n", "bn_layer", ".", "weight", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tofile", "(", "fp", ")", "\n", "bn_layer", ".", "running_mean", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tofile", "(", "fp", ")", "\n", "bn_layer", ".", "running_var", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tofile", "(", "fp", ")", "\n", "# Load conv bias", "\n", "", "else", ":", "\n", "                    ", "conv_layer", ".", "bias", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tofile", "(", "fp", ")", "\n", "# Load conv weights", "\n", "", "conv_layer", ".", "weight", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tofile", "(", "fp", ")", "\n", "\n", "", "", "fp", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.yolo.models.create_modules": [[16, 84], ["module_defs.pop", "torch.ModuleList", "enumerate", "int", "torch.Sequential", "nn.ModuleList.append", "output_filters.append", "int", "int", "int", "nn.Sequential.add_module", "torch.Conv2d", "nn.Sequential.add_module", "nn.Sequential.add_module", "int", "int", "torch.MaxPool2d", "nn.Sequential.add_module", "torch.BatchNorm2d", "torch.LeakyReLU", "nn.Sequential.add_module", "models.Upsample", "nn.Sequential.add_module", "int", "torch.ZeroPad2d", "int", "sum", "nn.Sequential.add_module", "int", "int", "models.EmptyLayer", "nn.Sequential.add_module", "module_def[].split", "models.EmptyLayer", "int", "int", "models.YOLOLayer", "nn.Sequential.add_module", "int", "int", "int", "module_def[].split", "module_def[].split", "range", "len"], "function", ["None"], ["def", "create_modules", "(", "module_defs", ")", ":", "\n", "    ", "\"\"\"\n    Constructs module list of layer blocks from module configuration in module_defs\n    \"\"\"", "\n", "hyperparams", "=", "module_defs", ".", "pop", "(", "0", ")", "\n", "output_filters", "=", "[", "int", "(", "hyperparams", "[", "\"channels\"", "]", ")", "]", "\n", "module_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "module_i", ",", "module_def", "in", "enumerate", "(", "module_defs", ")", ":", "\n", "        ", "modules", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "if", "module_def", "[", "\"type\"", "]", "==", "\"convolutional\"", ":", "\n", "            ", "bn", "=", "int", "(", "module_def", "[", "\"batch_normalize\"", "]", ")", "\n", "filters", "=", "int", "(", "module_def", "[", "\"filters\"", "]", ")", "\n", "kernel_size", "=", "int", "(", "module_def", "[", "\"size\"", "]", ")", "\n", "pad", "=", "(", "kernel_size", "-", "1", ")", "//", "2", "\n", "modules", ".", "add_module", "(", "\n", "f\"conv_{module_i}\"", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "output_filters", "[", "-", "1", "]", ",", "\n", "out_channels", "=", "filters", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "int", "(", "module_def", "[", "\"stride\"", "]", ")", ",", "\n", "padding", "=", "pad", ",", "\n", "bias", "=", "not", "bn", ",", "\n", ")", ",", "\n", ")", "\n", "if", "bn", ":", "\n", "                ", "modules", ".", "add_module", "(", "f\"batch_norm_{module_i}\"", ",", "nn", ".", "BatchNorm2d", "(", "filters", ",", "momentum", "=", "0.9", ",", "eps", "=", "1e-5", ")", ")", "\n", "", "if", "module_def", "[", "\"activation\"", "]", "==", "\"leaky\"", ":", "\n", "                ", "modules", ".", "add_module", "(", "f\"leaky_{module_i}\"", ",", "nn", ".", "LeakyReLU", "(", "0.1", ")", ")", "\n", "\n", "", "", "elif", "module_def", "[", "\"type\"", "]", "==", "\"maxpool\"", ":", "\n", "            ", "kernel_size", "=", "int", "(", "module_def", "[", "\"size\"", "]", ")", "\n", "stride", "=", "int", "(", "module_def", "[", "\"stride\"", "]", ")", "\n", "if", "kernel_size", "==", "2", "and", "stride", "==", "1", ":", "\n", "                ", "modules", ".", "add_module", "(", "f\"_debug_padding_{module_i}\"", ",", "nn", ".", "ZeroPad2d", "(", "(", "0", ",", "1", ",", "0", ",", "1", ")", ")", ")", "\n", "", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "int", "(", "(", "kernel_size", "-", "1", ")", "//", "2", ")", ")", "\n", "modules", ".", "add_module", "(", "f\"maxpool_{module_i}\"", ",", "maxpool", ")", "\n", "\n", "", "elif", "module_def", "[", "\"type\"", "]", "==", "\"upsample\"", ":", "\n", "            ", "upsample", "=", "Upsample", "(", "scale_factor", "=", "int", "(", "module_def", "[", "\"stride\"", "]", ")", ",", "mode", "=", "\"nearest\"", ")", "\n", "modules", ".", "add_module", "(", "f\"upsample_{module_i}\"", ",", "upsample", ")", "\n", "\n", "", "elif", "module_def", "[", "\"type\"", "]", "==", "\"route\"", ":", "\n", "            ", "layers", "=", "[", "int", "(", "x", ")", "for", "x", "in", "module_def", "[", "\"layers\"", "]", ".", "split", "(", "\",\"", ")", "]", "\n", "filters", "=", "sum", "(", "[", "output_filters", "[", "1", ":", "]", "[", "i", "]", "for", "i", "in", "layers", "]", ")", "\n", "modules", ".", "add_module", "(", "f\"route_{module_i}\"", ",", "EmptyLayer", "(", ")", ")", "\n", "\n", "", "elif", "module_def", "[", "\"type\"", "]", "==", "\"shortcut\"", ":", "\n", "            ", "filters", "=", "output_filters", "[", "1", ":", "]", "[", "int", "(", "module_def", "[", "\"from\"", "]", ")", "]", "\n", "modules", ".", "add_module", "(", "f\"shortcut_{module_i}\"", ",", "EmptyLayer", "(", ")", ")", "\n", "\n", "", "elif", "module_def", "[", "\"type\"", "]", "==", "\"yolo\"", ":", "\n", "            ", "anchor_idxs", "=", "[", "int", "(", "x", ")", "for", "x", "in", "module_def", "[", "\"mask\"", "]", ".", "split", "(", "\",\"", ")", "]", "\n", "# Extract anchors", "\n", "anchors", "=", "[", "int", "(", "x", ")", "for", "x", "in", "module_def", "[", "\"anchors\"", "]", ".", "split", "(", "\",\"", ")", "]", "\n", "anchors", "=", "[", "(", "anchors", "[", "i", "]", ",", "anchors", "[", "i", "+", "1", "]", ")", "for", "i", "in", "range", "(", "0", ",", "len", "(", "anchors", ")", ",", "2", ")", "]", "\n", "anchors", "=", "[", "anchors", "[", "i", "]", "for", "i", "in", "anchor_idxs", "]", "\n", "num_classes", "=", "int", "(", "module_def", "[", "\"classes\"", "]", ")", "\n", "img_size", "=", "int", "(", "hyperparams", "[", "\"height\"", "]", ")", "\n", "# Define detection layer", "\n", "yolo_layer", "=", "YOLOLayer", "(", "anchors", ",", "num_classes", ",", "img_size", ")", "\n", "modules", ".", "add_module", "(", "f\"yolo_{module_i}\"", ",", "yolo_layer", ")", "\n", "# Register module list and number of output filters", "\n", "", "module_list", ".", "append", "(", "modules", ")", "\n", "output_filters", ".", "append", "(", "filters", ")", "\n", "\n", "", "return", "hyperparams", ",", "module_list", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.discriminators.multiscale_discriminator.MultiscaleDiscriminator.__init__": [[9, 27], ["torch.nn.Module.__init__", "range", "torch.nn.AvgPool2d", "multiscale_discriminator.NLayerDiscriminator", "range", "setattr", "setattr", "getattr", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "use_sigmoid", "=", "False", ",", "num_D", "=", "3", ",", "getIntermFeat", "=", "False", ",", "\n", "use_sn_discriminator", "=", "False", ")", ":", "\n", "        ", "super", "(", "MultiscaleDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_D", "=", "num_D", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "getIntermFeat", "=", "getIntermFeat", "\n", "self", ".", "use_sn_discriminator", "=", "use_sn_discriminator", "\n", "for", "i", "in", "range", "(", "num_D", ")", ":", "\n", "            ", "netD", "=", "NLayerDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers", ",", "norm_layer", ",", "use_sigmoid", ",", "getIntermFeat", ",", "self", ".", "use_sn_discriminator", ")", "\n", "if", "getIntermFeat", ":", "\n", "\n", "                ", "for", "j", "in", "range", "(", "n_layers", "+", "2", ")", ":", "\n", "                    ", "setattr", "(", "self", ",", "'scale'", "+", "str", "(", "i", ")", "+", "'_layer'", "+", "str", "(", "j", ")", ",", "getattr", "(", "netD", ",", "'model'", "+", "str", "(", "j", ")", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "setattr", "(", "self", ",", "'layer'", "+", "str", "(", "i", ")", ",", "netD", ".", "model", ")", "\n", "\n", "", "", "self", ".", "downsample", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "[", "1", ",", "1", "]", ",", "count_include_pad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.discriminators.multiscale_discriminator.MultiscaleDiscriminator.singleD_forward": [[28, 38], ["range", "len", "result.append", "model"], "methods", ["None"], ["", "def", "singleD_forward", "(", "self", ",", "model", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "getIntermFeat", ":", "\n", "            ", "result", "=", "[", "input", "]", "\n", "shapes", "=", "[", "input", ".", "shape", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "model", ")", ")", ":", "\n", "                ", "result", ".", "append", "(", "model", "[", "i", "]", "(", "result", "[", "-", "1", "]", ")", ")", "\n", "\n", "", "return", "result", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "model", "(", "input", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.discriminators.multiscale_discriminator.MultiscaleDiscriminator.forward": [[39, 54], ["range", "multiscale_discriminator.MultiscaleDiscriminator.singleD_forward", "result.append", "getattr", "multiscale_discriminator.MultiscaleDiscriminator.downsample", "getattr", "range", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.discriminators.multiscale_discriminator.MultiscaleDiscriminator.singleD_forward"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "num_D", "=", "self", ".", "num_D", "\n", "result", "=", "[", "]", "\n", "shapes", "=", "[", "]", "\n", "input_downsampled", "=", "input", "\n", "for", "i", "in", "range", "(", "num_D", ")", ":", "\n", "            ", "if", "self", ".", "getIntermFeat", ":", "\n", "                ", "model", "=", "[", "getattr", "(", "self", ",", "'scale'", "+", "str", "(", "num_D", "-", "1", "-", "i", ")", "+", "'_layer'", "+", "str", "(", "j", ")", ")", "for", "j", "in", "range", "(", "self", ".", "n_layers", "+", "2", ")", "]", "\n", "", "else", ":", "\n", "                ", "model", "=", "getattr", "(", "self", ",", "'layer'", "+", "str", "(", "num_D", "-", "1", "-", "i", ")", ")", "\n", "", "res", "=", "self", ".", "singleD_forward", "(", "model", ",", "input_downsampled", ")", "\n", "result", ".", "append", "(", "res", ")", "\n", "if", "i", "!=", "(", "num_D", "-", "1", ")", ":", "\n", "                ", "input_downsampled", "=", "self", ".", "downsample", "(", "input_downsampled", ")", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.discriminators.multiscale_discriminator.NLayerDiscriminator.__init__": [[57, 101], ["torch.nn.Module.__init__", "int", "range", "min", "print", "numpy.floor", "min", "range", "range", "torch.nn.Sequential", "models.functions.base_function.spectral_norm", "torch.nn.LeakyReLU", "models.functions.base_function.spectral_norm", "norm_layer", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "len", "setattr", "len", "torch.nn.Conv2d", "models.functions.base_function.spectral_norm", "norm_layer", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Sigmoid", "torch.nn.Sequential", "torch.nn.Conv2d", "str"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.spectral_norm", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.spectral_norm", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.spectral_norm"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_sigmoid", "=", "False", ",", "getIntermFeat", "=", "False", ",", "\n", "use_sn_discriminator", "=", "False", ")", ":", "\n", "        ", "super", "(", "NLayerDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "getIntermFeat", "=", "getIntermFeat", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "use_sn_discriminator", "=", "use_sn_discriminator", "\n", "kw", "=", "4", "\n", "padw", "=", "int", "(", "np", ".", "floor", "(", "(", "kw", "-", "1.0", ")", "/", "2", ")", ")", "\n", "sequence", "=", "[", "\n", "[", "spectral_norm", "(", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "use_sn_discriminator", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "]", "]", "\n", "\n", "nf", "=", "ndf", "\n", "for", "n", "in", "range", "(", "1", ",", "n_layers", ")", ":", "\n", "            ", "nf_prev", "=", "nf", "\n", "nf", "=", "min", "(", "nf", "*", "2", ",", "512", ")", "\n", "sequence", "+=", "[", "[", "spectral_norm", "(", "\n", "nn", ".", "Conv2d", "(", "nf_prev", ",", "nf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "use_sn_discriminator", ")", ",", "\n", "norm_layer", "(", "nf", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "]", "\n", "\n", "", "nf_prev", "=", "nf", "\n", "nf", "=", "min", "(", "nf", "*", "2", ",", "512", ")", "\n", "sequence", "+=", "[", "[", "spectral_norm", "(", "\n", "nn", ".", "Conv2d", "(", "nf_prev", ",", "nf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", ",", "use_sn_discriminator", ")", ",", "\n", "norm_layer", "(", "nf", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "]", "\n", "\n", "sequence", "+=", "[", "[", "nn", ".", "Conv2d", "(", "nf", ",", "1", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", "]", "]", "\n", "\n", "if", "use_sigmoid", ":", "\n", "            ", "sequence", "+=", "[", "[", "nn", ".", "Sigmoid", "(", ")", "]", "]", "\n", "\n", "", "if", "getIntermFeat", ":", "\n", "            ", "for", "n", "in", "range", "(", "len", "(", "sequence", ")", ")", ":", "\n", "                ", "setattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", ",", "nn", ".", "Sequential", "(", "*", "sequence", "[", "n", "]", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "sequence_stream", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "len", "(", "sequence", ")", ")", ":", "\n", "                ", "sequence_stream", "+=", "sequence", "[", "n", "]", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "sequence_stream", ")", "\n", "", "print", "(", "\"Done!\"", ")", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.discriminators.multiscale_discriminator.NLayerDiscriminator.forward": [[101, 110], ["range", "multiscale_discriminator.NLayerDiscriminator.model", "getattr", "res.append", "getattr.", "str"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "getIntermFeat", ":", "\n", "            ", "res", "=", "[", "input", "]", "\n", "for", "n", "in", "range", "(", "self", ".", "n_layers", "+", "2", ")", ":", "\n", "                ", "model", "=", "getattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", ")", "\n", "res", ".", "append", "(", "model", "(", "res", "[", "-", "1", "]", ")", ")", "\n", "", "return", "res", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "model", "(", "input", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.discriminators.discriminator_obj.DiscriminatorObj.__init__": [[5, 36], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.InstanceNorm2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.InstanceNorm2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.InstanceNorm2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ndf", "=", "64", ")", ":", "\n", "        ", "super", "(", "DiscriminatorObj", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "f_dim", "=", "ndf", "\n", "\n", "self", ".", "conv0", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1", ",", "f_dim", "*", "1", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "f_dim", "*", "1", ",", "f_dim", "*", "2", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "f_dim", "*", "2", ",", "affine", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "f_dim", "*", "2", ",", "f_dim", "*", "4", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "f_dim", "*", "4", ",", "affine", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "f_dim", "*", "4", ",", "f_dim", "*", "8", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "f_dim", "*", "8", ",", "affine", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "f_dim", "*", "8", ",", "1", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.discriminators.discriminator_obj.DiscriminatorObj.forward": [[38, 45], ["discriminator_obj.DiscriminatorObj.conv0", "discriminator_obj.DiscriminatorObj.conv1", "discriminator_obj.DiscriminatorObj.conv2", "discriminator_obj.DiscriminatorObj.conv3", "discriminator_obj.DiscriminatorObj.conv4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "d0", "=", "self", ".", "conv0", "(", "x", ")", "\n", "d1", "=", "self", ".", "conv1", "(", "d0", ")", "\n", "d2", "=", "self", ".", "conv2", "(", "d1", ")", "\n", "d3", "=", "self", ".", "conv3", "(", "d2", ")", "\n", "disc", "=", "self", ".", "conv4", "(", "d3", ")", "\n", "return", "disc", "", "", "", ""]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.generators.sgi_net.SGINet.__init__": [[16, 248], ["torch.nn.Module.__init__", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "models.functions.base_function.get_input", "models.functions.base_function.get_downsampler", "models.functions.base_function.get_input", "models.functions.base_function.get_downsampler", "models.functions.base_function.get_input", "models.functions.base_function.get_downsampler", "range", "int", "torch.nn.Sequential", "torch.nn.Sequential", "models.functions.base_function.BasicBlock_v2", "int", "torch.nn.ReflectionPad2d", "torch.nn.ReflectionPad2d", "models.functions.base_function.spectral_norm", "torch.nn.Tanh", "torch.nn.Tanh", "range", "int", "range", "int", "torch.nn.ReflectionPad2d", "torch.nn.ReflectionPad2d", "models.functions.base_function.spectral_norm", "norm_layer", "sgi_net.SGINet.activation", "models.functions.base_function.SPADEResnetBlock", "torch.nn.Conv2d", "torch.nn.Conv2d", "int", "torch.nn.ReflectionPad2d", "torch.nn.ReflectionPad2d", "models.functions.base_function.spectral_norm", "torch.nn.Tanh", "torch.nn.Tanh", "int", "torch.nn.ReflectionPad2d", "torch.nn.ReflectionPad2d", "models.functions.base_function.spectral_norm", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "norm_layer", "sgi_net.SGINet.activation", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "models.functions.base_function.SPADEResnetBlock", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReflectionPad2d", "torch.nn.ReflectionPad2d", "models.functions.base_function.spectral_norm", "norm_layer", "sgi_net.SGINet.activation", "models.functions.base_function.SPADEResnetBlock", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReflectionPad2d", "torch.nn.ReflectionPad2d", "models.functions.base_function.spectral_norm", "norm_layer", "sgi_net.SGINet.activation", "models.functions.base_function.SPADEResnetBlock", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReflectionPad2d", "torch.nn.ReflectionPad2d", "models.functions.base_function.spectral_norm", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.ReflectionPad2d", "torch.nn.ReflectionPad2d", "models.functions.base_function.spectral_norm", "torch.nn.PixelShuffle", "torch.nn.PixelShuffle", "norm_layer", "sgi_net.SGINet.activation", "torch.nn.ReflectionPad2d", "torch.nn.ReflectionPad2d", "models.functions.base_function.spectral_norm", "torch.nn.PixelShuffle", "torch.nn.PixelShuffle", "models.functions.base_function.SPADEResnetBlock", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "models.functions.base_function.Upsample", "torch.nn.ReflectionPad2d", "torch.nn.ReflectionPad2d", "models.functions.base_function.spectral_norm", "norm_layer", "sgi_net.SGINet.activation", "torch.nn.ReflectionPad2d", "torch.nn.ReflectionPad2d", "models.functions.base_function.spectral_norm", "norm_layer", "sgi_net.SGINet.activation", "models.functions.base_function.Upsample", "models.functions.base_function.SPADEResnetBlock", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "int", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "models.functions.base_function.Upsample", "torch.nn.ReflectionPad2d", "torch.nn.ReflectionPad2d", "models.functions.base_function.spectral_norm", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "int", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReflectionPad2d", "torch.nn.ReflectionPad2d", "models.functions.base_function.spectral_norm", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.get_input", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.get_downsampler", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.get_input", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.get_downsampler", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.get_input", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.get_downsampler", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.spectral_norm", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.spectral_norm", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.spectral_norm", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.spectral_norm", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.spectral_norm", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.spectral_norm", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.spectral_norm", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.spectral_norm", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.spectral_norm", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.spectral_norm", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.spectral_norm", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.spectral_norm", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.functions.base_function.spectral_norm"], ["    ", "def", "__init__", "(", "self", ",", "label_categories", ",", "image_channels", ",", "norm_layer", ",", "use_deconv", "=", "True", ",", "use_attention", "=", "False", ",", "\n", "use_dilated_conv", "=", "False", ",", "use_sn_generator", "=", "False", ",", "ngf", "=", "64", ",", "n_downsample_global", "=", "3", ",", "use_skip", "=", "True", ",", "activation", "=", "Elu", ",", "use_spade", "=", "False", ",", "\n", "which_encoder", "=", "\"ctx_label\"", ",", "use_pixel_shuffle", "=", "False", ",", "use_bbox", "=", "False", ",", "use_multi_scale_loss", "=", "False", ",", "gpu_ids", "=", "[", "0", "]", ")", ":", "\n", "        ", "super", "(", "SGINet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "label_categories", "=", "label_categories", "\n", "self", ".", "image_channels", "=", "image_channels", "\n", "self", ".", "use_deconv", "=", "use_deconv", "if", "not", "use_pixel_shuffle", "else", "False", "\n", "self", ".", "use_pixel_shuffle", "=", "use_pixel_shuffle", "\n", "self", ".", "use_sn_generator", "=", "use_sn_generator", "\n", "self", ".", "log_softmax", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "self", ".", "use_attention", "=", "use_attention", "\n", "self", ".", "use_dilated_conv", "=", "use_dilated_conv", "\n", "self", ".", "n_downsample_global", "=", "n_downsample_global", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "use_spade", "=", "use_spade", "\n", "self", ".", "ngf", "=", "ngf", "\n", "self", ".", "use_bbox", "=", "use_bbox", "\n", "self", ".", "use_multi_scale_loss", "=", "use_multi_scale_loss", "\n", "feat_dim", "=", "self", ".", "ngf", "*", "2", "**", "self", ".", "n_downsample_global", "\n", "self", ".", "feat_dim", "=", "feat_dim", "\n", "self", ".", "use_skip", "=", "use_skip", "\n", "self", ".", "input_channel", "=", "(", "self", ".", "label_categories", "+", "self", ".", "image_channels", "+", "1", "+", "1", ")", "if", "self", ".", "use_bbox", "else", "self", ".", "label_categories", "+", "self", ".", "image_channels", "+", "1", "\n", "self", ".", "which_encoder", "=", "which_encoder", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "if", "'ctx'", "in", "which_encoder", ":", "\n", "            ", "self", ".", "ctx_inputEmbedder", "=", "get_input", "(", "self", ".", "image_channels", "+", "1", ",", "norm_layer", ",", "self", ".", "use_sn_generator", ",", "ngf", "//", "2", ",", "self", ".", "activation", ")", "\n", "self", ".", "ctx_downsampler", "=", "get_downsampler", "(", "n_downsample_global", ",", "ngf", "//", "2", ",", "use_sn_generator", ",", "norm_layer", ",", "activation", ")", "\n", "", "if", "'label'", "in", "which_encoder", ":", "\n", "            ", "self", ".", "obj_inputEmbedder", "=", "get_input", "(", "(", "self", ".", "label_categories", "+", "2", ")", "if", "self", ".", "use_bbox", "else", "self", ".", "label_categories", "+", "1", ",", "norm_layer", ",", "self", ".", "use_sn_generator", ",", "ngf", "//", "2", ",", "self", ".", "activation", ")", "\n", "self", ".", "obj_downsampler", "=", "get_downsampler", "(", "n_downsample_global", ",", "ngf", "//", "2", ",", "use_sn_generator", ",", "norm_layer", ",", "activation", ")", "\n", "\n", "", "if", "which_encoder", "==", "\"concat\"", ":", "\n", "            ", "self", ".", "input_embedder", "=", "get_input", "(", "self", ".", "input_channel", ",", "norm_layer", ",", "self", ".", "use_sn_generator", ",", "ngf", ",", "self", ".", "activation", ")", "\n", "self", ".", "downsampler", "=", "get_downsampler", "(", "n_downsample_global", ",", "ngf", ",", "use_sn_generator", ",", "norm_layer", ",", "activation", ")", "\n", "\n", "\n", "\n", "", "self", ".", "res_blocks", "=", "[", "]", "\n", "if", "self", ".", "n_downsample_global", "<", "4", ":", "\n", "            ", "dilation_factors", "=", "[", "2", ",", "5", ",", "9", ",", "16", ",", "2", ",", "5", ",", "9", ",", "16", ",", "16", "]", "if", "self", ".", "use_dilated_conv", "else", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "", "else", ":", "\n", "            ", "dilation_factors", "=", "[", "2", ",", "2", ",", "2", ",", "4", ",", "4", ",", "4", ",", "8", ",", "8", ",", "8", "]", "if", "self", ".", "use_dilated_conv", "else", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "\n", "", "for", "factor", "in", "dilation_factors", ":", "\n", "            ", "self", ".", "res_blocks", "+=", "[", "BasicBlock_v2", "(", "inplanes", "=", "feat_dim", ",", "planes", "=", "feat_dim", ",", "stride", "=", "1", ",", "\n", "dilation", "=", "(", "factor", ",", "factor", ")", ",", "norm", "=", "norm_layer", ",", "\n", "use_sn", "=", "self", ".", "use_sn_generator", ",", "activation", "=", "self", ".", "activation", ")", "]", "\n", "\n", "", "self", ".", "res_blocks", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "res_blocks", ")", "\n", "self", ".", "upconv", "=", "[", "]", "\n", "self", ".", "get_inter_seg_map", "=", "[", "]", "\n", "if", "self", ".", "use_deconv", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "n_downsample_global", ")", ":", "\n", "                ", "mult", "=", "2", "**", "(", "self", ".", "n_downsample_global", "-", "i", ")", "\n", "dim_in", "=", "self", ".", "ngf", "*", "mult", "\n", "dim_out", "=", "int", "(", "self", ".", "ngf", "*", "mult", "/", "2", ")", "\n", "if", "self", ".", "use_skip", "and", "i", ">", "0", ":", "\n", "                    ", "dim_in", "=", "dim_in", "*", "2", "\n", "", "if", "not", "self", ".", "use_spade", ":", "\n", "                    ", "self", ".", "upconv", "+=", "[", "\n", "nn", ".", "ConvTranspose2d", "(", "dim_in", ",", "dim_out", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "\n", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "dim_out", ")", ",", "\n", "self", ".", "activation", "(", ")", "]", "\n", "", "else", ":", "\n", "                    ", "self", ".", "upconv", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "dim_in", ",", "dim_out", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "\n", "output_padding", "=", "1", ")", ",", "\n", "SPADEResnetBlock", "(", "dim_out", ",", "dim_out", ",", "label_categories", "-", "1", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ")", "]", "\n", "", "if", "self", ".", "use_multi_scale_loss", ":", "\n", "                    ", "self", ".", "get_inter_seg_map", "+=", "[", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "spectral_norm", "(", "\n", "nn", ".", "Conv2d", "(", "dim_out", ",", "label_categories", "-", "1", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "\n", "stride", "=", "1", ")", ",", "self", ".", "use_sn_generator", ")", ",", "\n", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", ")", "]", "\n", "", "", "dim_in", "=", "int", "(", "dim_out", ")", "\n", "dim_out", "=", "dim_in", "//", "2", "\n", "self", ".", "up_conv_image", "=", "[", "]", "\n", "if", "not", "self", ".", "use_spade", ":", "\n", "                ", "self", ".", "up_conv_image", "+=", "[", "\n", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "spectral_norm", "(", "\n", "nn", ".", "Conv2d", "(", "dim_in", ",", "dim_out", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "\n", "stride", "=", "1", ")", ",", "self", ".", "use_sn_generator", ")", ",", "\n", "norm_layer", "(", "dim_out", ")", ",", "\n", "self", ".", "activation", "(", ")", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "up_conv_image", "+=", "[", "\n", "SPADEResnetBlock", "(", "dim_in", ",", "dim_out", ",", "label_categories", "-", "1", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ")", "]", "\n", "", "dim_in", "=", "dim_out", "\n", "dim_out", "=", "dim_out", "\n", "self", ".", "up_conv_image", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "spectral_norm", "(", "\n", "nn", ".", "Conv2d", "(", "dim_out", ",", "3", ",", "kernel_size", "=", "7", ",", "\n", "padding", "=", "0", ",", "\n", "stride", "=", "1", ")", ",", "\n", "self", ".", "use_sn_generator", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "]", "\n", "", "elif", "self", ".", "use_pixel_shuffle", ":", "\n", "            ", "self", ".", "upconv", "=", "[", "]", "\n", "self", ".", "get_inter_seg_map", "=", "[", "]", "\n", "self", ".", "get_inter_image", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_downsample_global", ")", ":", "\n", "                ", "mult", "=", "2", "**", "(", "self", ".", "n_downsample_global", "-", "i", ")", "\n", "dim_in", "=", "self", ".", "ngf", "*", "mult", "\n", "dim_out", "=", "int", "(", "self", ".", "ngf", "*", "mult", "/", "2", ")", "\n", "if", "self", ".", "use_skip", "and", "i", ">", "0", ":", "\n", "                    ", "if", "self", ".", "which_encoder", "==", "\"concat\"", ":", "\n", "                        ", "dim_in", "=", "dim_in", "*", "2", "\n", "", "else", ":", "\n", "                        ", "dim_in", "=", "dim_in", "+", "int", "(", "(", "dim_in", "//", "2", ")", ")", "\n", "", "", "if", "not", "self", ".", "use_spade", ":", "\n", "                    ", "self", ".", "upconv", "+=", "[", "\n", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "spectral_norm", "(", "\n", "nn", ".", "Conv2d", "(", "dim_in", ",", "dim_out", "*", "4", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "\n", "stride", "=", "1", ")", ",", "self", ".", "use_sn_generator", ")", ",", "\n", "nn", ".", "PixelShuffle", "(", "2", ")", ",", "\n", "norm_layer", "(", "dim_out", ")", ",", "\n", "self", ".", "activation", "(", ")", "]", "\n", "", "else", ":", "\n", "                    ", "self", ".", "upconv", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "dim_in", ",", "dim_out", "*", "4", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "\n", "stride", "=", "1", ")", ",", "self", ".", "use_sn_generator", ")", ",", "\n", "nn", ".", "PixelShuffle", "(", "2", ")", ",", "\n", "SPADEResnetBlock", "(", "dim_out", ",", "dim_out", ",", "\n", "label_categories", "-", "1", ",", "seg_probs", "=", "True", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ")", "\n", "]", "\n", "", "if", "self", ".", "use_multi_scale_loss", ":", "\n", "                    ", "self", ".", "get_inter_seg_map", "+=", "[", "nn", ".", "Sequential", "(", "\n", "Upsample", "(", "scale_factor", "=", "2.0", ",", "mode", "=", "\"nearest\"", ")", ",", "\n", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "spectral_norm", "(", "\n", "nn", ".", "Conv2d", "(", "dim_out", ",", "label_categories", "-", "1", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "\n", "stride", "=", "1", ")", ",", "self", ".", "use_sn_generator", ")", ",", "\n", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", ")", "]", "\n", "", "", "dim_in", "=", "int", "(", "dim_out", ")", "\n", "dim_out", "=", "dim_in", "//", "2", "\n", "self", ".", "up_conv_image", "=", "[", "]", "\n", "if", "not", "self", ".", "use_spade", ":", "\n", "                ", "self", ".", "up_conv_image", "+=", "[", "\n", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "spectral_norm", "(", "\n", "nn", ".", "Conv2d", "(", "dim_in", ",", "dim_out", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "\n", "stride", "=", "1", ")", ",", "self", ".", "use_sn_generator", ")", ",", "\n", "norm_layer", "(", "dim_out", ")", ",", "\n", "self", ".", "activation", "(", ")", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "up_conv_image", "+=", "[", "\n", "SPADEResnetBlock", "(", "dim_in", ",", "dim_out", ",", "label_categories", "-", "1", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ")", "]", "\n", "", "dim_in", "=", "dim_out", "\n", "dim_out", "=", "dim_out", "\n", "self", ".", "up_conv_image", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "spectral_norm", "(", "\n", "nn", ".", "Conv2d", "(", "dim_out", ",", "3", ",", "kernel_size", "=", "7", ",", "\n", "padding", "=", "0", ",", "\n", "stride", "=", "1", ")", ",", "\n", "self", ".", "use_sn_generator", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "upconv", "=", "[", "]", "\n", "self", ".", "get_inter_seg_map", "=", "[", "]", "\n", "self", ".", "get_inter_image", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_downsample_global", ")", ":", "\n", "                ", "mult", "=", "2", "**", "(", "self", ".", "n_downsample_global", "-", "i", ")", "\n", "dim_in", "=", "self", ".", "ngf", "*", "mult", "\n", "dim_out", "=", "int", "(", "self", ".", "ngf", "*", "mult", "/", "2", ")", "\n", "if", "self", ".", "use_skip", "and", "i", ">", "0", ":", "\n", "                    ", "if", "self", ".", "which_encoder", "==", "\"concat\"", ":", "\n", "                        ", "dim_in", "=", "dim_in", "*", "2", "\n", "", "else", ":", "\n", "                        ", "dim_in", "=", "dim_in", "+", "int", "(", "(", "dim_in", "//", "2", ")", ")", "\n", "", "", "if", "not", "self", ".", "use_spade", ":", "\n", "                    ", "self", ".", "upconv", "+=", "[", "\n", "Upsample", "(", "scale_factor", "=", "2.0", ")", ",", "\n", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "spectral_norm", "(", "\n", "nn", ".", "Conv2d", "(", "dim_in", ",", "dim_out", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "\n", "stride", "=", "1", ")", ",", "self", ".", "use_sn_generator", ")", ",", "\n", "norm_layer", "(", "dim_out", ")", ",", "\n", "self", ".", "activation", "(", ")", ",", "\n", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "spectral_norm", "(", "\n", "nn", ".", "Conv2d", "(", "dim_out", ",", "dim_out", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "\n", "stride", "=", "1", ")", ",", "self", ".", "use_sn_generator", ")", ",", "\n", "norm_layer", "(", "dim_out", ")", ",", "\n", "self", ".", "activation", "(", ")", "]", "\n", "", "else", ":", "\n", "                    ", "self", ".", "upconv", "+=", "[", "Upsample", "(", "scale_factor", "=", "2.0", ")", ",", "\n", "SPADEResnetBlock", "(", "dim_in", ",", "dim_out", ",", "label_categories", "-", "1", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ")", "]", "\n", "", "if", "self", ".", "use_multi_scale_loss", ":", "\n", "                    ", "self", ".", "get_inter_seg_map", "+=", "[", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "spectral_norm", "(", "\n", "nn", ".", "Conv2d", "(", "dim_in", ",", "label_categories", "-", "1", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "\n", "stride", "=", "1", ")", ",", "self", ".", "use_sn_generator", ")", ",", "\n", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", ")", "]", "\n", "", "", "dim_in", "=", "int", "(", "dim_out", ")", "\n", "dim_out", "=", "dim_in", "//", "2", "\n", "self", ".", "up_conv_image", "=", "[", "]", "\n", "if", "not", "self", ".", "use_spade", ":", "\n", "                ", "self", ".", "up_conv_image", "+=", "[", "\n", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "spectral_norm", "(", "\n", "nn", ".", "Conv2d", "(", "dim_in", ",", "dim_out", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "\n", "stride", "=", "1", ")", ",", "self", ".", "use_sn_generator", ")", ",", "\n", "norm_layer", "(", "dim_out", ")", ",", "\n", "self", ".", "activation", "(", ")", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "up_conv_image", "+=", "[", "\n", "SPADEResnetBlock", "(", "dim_in", ",", "dim_out", ",", "label_categories", "-", "1", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ")", "]", "\n", "", "dim_in", "=", "dim_out", "\n", "dim_out", "=", "dim_out", "\n", "self", ".", "up_conv_image", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "spectral_norm", "(", "\n", "nn", ".", "Conv2d", "(", "dim_out", ",", "3", ",", "kernel_size", "=", "7", ",", "\n", "padding", "=", "0", ",", "\n", "stride", "=", "1", ")", ",", "\n", "self", ".", "use_sn_generator", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "]", "\n", "", "self", ".", "up_conv_image", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "up_conv_image", ")", "\n", "if", "self", ".", "use_multi_scale_loss", ":", "\n", "            ", "self", ".", "get_inter_seg_map", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "get_inter_seg_map", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "get_inter_seg_map", "=", "None", "\n", "", "self", ".", "upconv", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "upconv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.generators.sgi_net.SGINet.forward_encoder": [[250, 258], ["encoder", "enumerate", "layer", "enc_feats.append"], "methods", ["None"], ["", "def", "forward_encoder", "(", "self", ",", "encoder", ",", "downsampler", ",", "input", ",", "use_skip", ")", ":", "\n", "        ", "enc_feats", "=", "[", "]", "\n", "enc_feat", "=", "encoder", "(", "input", ")", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "downsampler", ")", ":", "\n", "            ", "enc_feat", "=", "layer", "(", "enc_feat", ")", "\n", "if", "use_skip", "and", "(", "(", "i", "<", "self", ".", "n_downsample_global", "*", "4", "-", "1", ")", "and", "(", "i", "%", "4", "==", "3", ")", ")", ":", "# super-duper hard-coded", "\n", "                ", "enc_feats", ".", "append", "(", "enc_feat", ")", "\n", "", "", "return", "enc_feat", ",", "enc_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.generators.sgi_net.SGINet.forward_decoder_ps": [[260, 276], ["enumerate", "multi_scale_seg_map.append", "layer", "layer.__str__", "layer.__str__", "layer.__str__", "layer", "layer"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__str__", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__str__", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__str__"], ["", "def", "forward_decoder_ps", "(", "self", ",", "decoder", ",", "dec_feat", ",", "enc_feats", ",", "get_inter_seg_map", ")", ":", "\n", "        ", "embed_layer", "=", "5", "\n", "j", "=", "0", "\n", "multi_scale_seg_map", "=", "[", "]", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "decoder", ")", ":", "\n", "            ", "if", "\"SPADE\"", "in", "layer", ".", "__str__", "(", ")", "or", "\"Instance\"", "in", "layer", ".", "__str__", "(", ")", ":", "\n", "                ", "scale_seg_map", "=", "get_inter_seg_map", "[", "j", "]", "(", "dec_feat", ")", "\n", "multi_scale_seg_map", ".", "append", "(", "scale_seg_map", ")", "\n", "j", "+=", "1", "\n", "if", "\"SPADE\"", "in", "layer", ".", "__str__", "(", ")", ":", "\n", "                    ", "dec_feat", "=", "layer", "(", "dec_feat", ",", "scale_seg_map", ")", "\n", "", "else", ":", "\n", "                    ", "dec_feat", "=", "layer", "(", "dec_feat", ")", "\n", "", "", "else", ":", "\n", "                ", "dec_feat", "=", "layer", "(", "dec_feat", ")", "\n", "", "", "return", "dec_feat", ",", "multi_scale_seg_map", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.generators.sgi_net.SGINet.forward_decoder_deconv": [[277, 290], ["enumerate", "layer.__str__", "multi_scale_seg_map.append", "layer", "layer"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__str__"], ["", "def", "forward_decoder_deconv", "(", "self", ",", "decoder", ",", "dec_feat", ",", "enc_feats", ",", "get_inter_seg_map", ")", ":", "\n", "        ", "embed_layer", "=", "3", "\n", "j", "=", "0", "\n", "multi_scale_seg_map", "=", "[", "]", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "decoder", ")", ":", "\n", "            ", "if", "\"SPADE\"", "in", "layer", ".", "__str__", "(", ")", ":", "\n", "                ", "scale_seg_map", "=", "get_inter_seg_map", "[", "j", "]", "(", "dec_feat", ")", "\n", "multi_scale_seg_map", ".", "append", "(", "scale_seg_map", ")", "\n", "j", "+=", "1", "\n", "dec_feat", "=", "layer", "(", "dec_feat", ",", "scale_seg_map", ")", "\n", "", "else", ":", "\n", "                ", "dec_feat", "=", "layer", "(", "dec_feat", ")", "\n", "", "", "return", "dec_feat", ",", "multi_scale_seg_map", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.generators.sgi_net.SGINet.forward_decoder_upsample": [[291, 304], ["enumerate", "layer.__str__", "multi_scale_seg_map.append", "layer", "layer"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__str__"], ["", "def", "forward_decoder_upsample", "(", "self", ",", "decoder", ",", "dec_feat", ",", "enc_feats", ",", "get_inter_seg_map", ")", ":", "\n", "        ", "embed_layer", "=", "9", "\n", "j", "=", "0", "\n", "multi_scale_seg_map", "=", "[", "]", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "decoder", ")", ":", "\n", "            ", "if", "\"SPADE\"", "in", "layer", ".", "__str__", "(", ")", ":", "\n", "                ", "scale_seg_map", "=", "get_inter_seg_map", "[", "j", "]", "(", "dec_feat", ")", "\n", "multi_scale_seg_map", ".", "append", "(", "scale_seg_map", ")", "\n", "j", "+=", "1", "\n", "dec_feat", "=", "layer", "(", "dec_feat", ",", "scale_seg_map", ")", "\n", "", "else", ":", "\n", "                ", "dec_feat", "=", "layer", "(", "dec_feat", ")", "\n", "", "", "return", "dec_feat", ",", "multi_scale_seg_map", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.generators.sgi_net.SGINet.forward_decoder": [[305, 312], ["sgi_net.SGINet.forward_decoder_deconv", "sgi_net.SGINet.forward_decoder_ps", "sgi_net.SGINet.forward_decoder_upsample"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.generators.sgi_net.SGINet.forward_decoder_deconv", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.generators.sgi_net.SGINet.forward_decoder_ps", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.generators.sgi_net.SGINet.forward_decoder_upsample"], ["", "def", "forward_decoder", "(", "self", ",", "decoder", ",", "dec_feat", ",", "enc_feats", ",", "get_inter_seg_map", ")", ":", "\n", "        ", "if", "self", ".", "use_deconv", ":", "\n", "            ", "return", "self", ".", "forward_decoder_deconv", "(", "decoder", ",", "dec_feat", ",", "enc_feats", ",", "get_inter_seg_map", ")", "\n", "", "elif", "self", ".", "use_pixel_shuffle", ":", "\n", "            ", "return", "self", ".", "forward_decoder_ps", "(", "decoder", ",", "dec_feat", ",", "enc_feats", ",", "get_inter_seg_map", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "forward_decoder_upsample", "(", "decoder", ",", "dec_feat", ",", "enc_feats", ",", "get_inter_seg_map", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.generators.sgi_net.SGINet.forward_image": [[314, 321], ["enumerate", "layer", "layer"], "methods", ["None"], ["", "", "def", "forward_image", "(", "self", ",", "decoder_image", ",", "dec_feat", ",", "seg_map", ")", ":", "\n", "        ", "for", "i", ",", "layer", "in", "enumerate", "(", "decoder_image", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "dec_feat", "=", "layer", "(", "dec_feat", ",", "seg_map", ")", "\n", "", "else", ":", "\n", "                ", "dec_feat", "=", "layer", "(", "dec_feat", ")", "\n", "", "", "return", "dec_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.generators.sgi_net.SGINet.forward": [[322, 354], ["sgi_net.SGINet.res_blocks", "sgi_net.SGINet.forward_decoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sgi_net.SGINet.forward_encoder", "sgi_net.SGINet.forward_encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sgi_net.SGINet.forward_encoder", "sgi_net.SGINet.up_conv_image", "sgi_net.SGINet.forward_image", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.generators.sgi_net.SGINet.forward_decoder", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.generators.sgi_net.SGINet.forward_encoder", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.generators.sgi_net.SGINet.forward_encoder", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.generators.sgi_net.SGINet.forward_encoder", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.generators.sgi_net.SGINet.forward_image"], ["", "def", "forward", "(", "self", ",", "label", ",", "img", ",", "mask", ",", "instance", ")", ":", "\n", "        ", "ctx_feat", "=", "obj_feat", "=", "mask_feat", "=", "0", "\n", "ctx_feats", "=", "[", "]", "\n", "if", "'ctx'", "in", "self", ".", "which_encoder", ":", "\n", "            ", "img_masked", "=", "torch", ".", "cat", "(", "(", "img", ",", "mask", ")", ",", "dim", "=", "1", ")", "\n", "ctx_feat", ",", "feat", "=", "self", ".", "forward_encoder", "(", "self", ".", "ctx_inputEmbedder", ",", "\n", "self", ".", "ctx_downsampler", ",", "\n", "img_masked", ",", "self", ".", "use_skip", ")", "\n", "", "if", "'label'", "in", "self", ".", "which_encoder", ":", "\n", "            ", "if", "self", ".", "use_bbox", ":", "\n", "                ", "input_concat", "=", "torch", ".", "cat", "(", "[", "label", ",", "instance", ",", "mask", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "input_concat", "=", "torch", ".", "cat", "(", "[", "label", ",", "mask", "]", ",", "dim", "=", "1", ")", "\n", "", "obj_feat", ",", "_", "=", "self", ".", "forward_encoder", "(", "self", ".", "obj_inputEmbedder", ",", "\n", "self", ".", "obj_downsampler", ",", "input_concat", ",", "\n", "False", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "ctx_feat", ",", "obj_feat", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "if", "self", ".", "which_encoder", "==", "\"concat\"", ":", "\n", "            ", "if", "self", ".", "use_bbox", ":", "\n", "                ", "input_concat", "=", "torch", ".", "cat", "(", "[", "img", ",", "label", ",", "mask", ",", "instance", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "input_concat", "=", "torch", ".", "cat", "(", "[", "img", ",", "label", ",", "mask", "]", ",", "dim", "=", "1", ")", "\n", "", "x", ",", "feat", "=", "self", ".", "forward_encoder", "(", "self", ".", "input_embedder", ",", "self", ".", "downsampler", ",", "input_concat", ",", "self", ".", "use_skip", ")", "\n", "", "x", "=", "self", ".", "res_blocks", "(", "x", ")", "\n", "offset_flow", "=", "[", "None", "]", "\n", "x", ",", "multi_scale_seg_map", "=", "self", ".", "forward_decoder", "(", "self", ".", "upconv", ",", "x", ",", "feat", ",", "self", ".", "get_inter_seg_map", ")", "\n", "if", "not", "self", ".", "use_spade", ":", "\n", "            ", "image_inp", "=", "self", ".", "up_conv_image", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "image_inp", "=", "self", ".", "forward_image", "(", "self", ".", "up_conv_image", ",", "x", ",", "multi_scale_seg_map", "[", "-", "1", "]", ")", "\n", "", "return", "multi_scale_seg_map", ",", "image_inp", ",", "offset_flow", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.generators.sgi_net.Shape_Encoder.__init__": [[358, 400], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ngf", "=", "64", ",", "z_len", "=", "1024", ",", "input_dim", "=", "4096", ",", "classes", "=", "31", ",", "theta_len", "=", "6", ")", ":", "\n", "        ", "super", "(", "Shape_Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "f_dim", "=", "ngf", "\n", "self", ".", "z_len", "=", "z_len", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "classes", "=", "classes", "\n", "self", ".", "theta_len", "=", "theta_len", "\n", "self", ".", "lin0", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "input_dim", "+", "self", ".", "classes", "+", "theta_len", ",", "32", "*", "32", "*", "8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", ")", "\n", "self", ".", "conv0", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "8", ",", "self", ".", "f_dim", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "f_dim", ",", "self", ".", "f_dim", "*", "2", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "self", ".", "f_dim", "*", "2", ",", "affine", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "f_dim", "*", "2", ",", "self", ".", "f_dim", "*", "4", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "self", ".", "f_dim", "*", "4", ",", "affine", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "f_dim", "*", "4", ",", "self", ".", "f_dim", "*", "8", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "self", ".", "f_dim", "*", "8", ",", "affine", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", ")", "\n", "self", ".", "fc_mu", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "f_dim", "*", "8", ",", "self", ".", "z_len", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", ")", "\n", "self", ".", "fc_logvar", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "f_dim", "*", "8", ",", "self", ".", "z_len", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.generators.sgi_net.Shape_Encoder.forward": [[402, 414], ["inst_shape.view", "sgi_net.Shape_Encoder.lin0", "sgi_net.Shape_Encoder.view", "sgi_net.Shape_Encoder.conv0", "sgi_net.Shape_Encoder.conv1", "sgi_net.Shape_Encoder.conv2", "sgi_net.Shape_Encoder.conv3", "sgi_net.Shape_Encoder.fc_mu", "sgi_net.Shape_Encoder.fc_logvar", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "conditioning.squeeze().squeeze", "conditioning.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inst_shape", ",", "conditioning", ",", "theta", ")", ":", "\n", "        ", "inst_shape_flatten", "=", "inst_shape", ".", "view", "(", "inst_shape", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "l0", "=", "self", ".", "lin0", "(", "torch", ".", "cat", "(", "[", "inst_shape_flatten", ",", "conditioning", ".", "squeeze", "(", "2", ")", ".", "squeeze", "(", "2", ")", ",", "theta", "]", ",", "dim", "=", "1", ")", ")", "\n", "l0_reshaped", "=", "l0", ".", "view", "(", "l0", ".", "shape", "[", "0", "]", ",", "8", ",", "32", ",", "32", ")", "\n", "e0", "=", "self", ".", "conv0", "(", "l0_reshaped", ")", "\n", "e1", "=", "self", ".", "conv1", "(", "e0", ")", "\n", "e2", "=", "self", ".", "conv2", "(", "e1", ")", "\n", "e3", "=", "self", ".", "conv3", "(", "e2", ")", "\n", "mu", "=", "self", ".", "fc_mu", "(", "e3", ")", "\n", "logvar", "=", "self", ".", "fc_logvar", "(", "e3", ")", "\n", "\n", "return", "mu", ",", "logvar", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.generators.sgi_net.Shape_Decoder.__init__": [[417, 451], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.Sigmoid", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__"], ["    ", "def", "__init__", "(", "self", ",", "z_len", ",", "label_nc", ",", "theta_len", "=", "6", ",", "ngf", "=", "32", ")", ":", "\n", "        ", "super", "(", "Shape_Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "z_dim", "=", "z_len", "\n", "self", ".", "f_dim", "=", "ngf", "\n", "self", ".", "label_nc", "=", "label_nc", "\n", "self", ".", "theta_len", "=", "theta_len", "\n", "self", ".", "conv0", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "self", ".", "z_dim", "+", "label_nc", "+", "theta_len", ",", "self", ".", "f_dim", "*", "8", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "self", ".", "f_dim", ",", "affine", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "self", ".", "f_dim", "*", "8", ",", "self", ".", "f_dim", "*", "4", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "self", ".", "f_dim", "*", "4", ",", "affine", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "self", ".", "f_dim", "*", "4", ",", "self", ".", "f_dim", "*", "2", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "self", ".", "f_dim", "*", "2", ",", "affine", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "self", ".", "f_dim", "*", "2", ",", "self", ".", "f_dim", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "self", ".", "f_dim", ",", "affine", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "self", ".", "f_dim", ",", "1", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.generators.sgi_net.Shape_Decoder.forward": [[453, 461], ["sgi_net.Shape_Decoder.conv0", "sgi_net.Shape_Decoder.conv1", "sgi_net.Shape_Decoder.conv2", "sgi_net.Shape_Decoder.conv3", "sgi_net.Shape_Decoder.conv4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "theta.unsqueeze().unsqueeze", "theta.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z", ",", "conditioning", ",", "theta", ")", ":", "\n", "\n", "        ", "e1", "=", "self", ".", "conv0", "(", "torch", ".", "cat", "(", "[", "z", ",", "conditioning", ",", "theta", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "2", ")", "]", ",", "dim", "=", "1", ")", ")", "\n", "e2", "=", "self", ".", "conv1", "(", "e1", ")", "\n", "e3", "=", "self", ".", "conv2", "(", "e2", ")", "\n", "e4", "=", "self", ".", "conv3", "(", "e3", ")", "\n", "instance", "=", "self", ".", "conv4", "(", "e4", ")", "\n", "return", "instance", "", "", "", ""]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.GANLoss.__init__": [[8, 26], ["torch.nn.Module.__init__", "torch.nn.MSELoss", "torch.nn.BCEWithLogitsLoss", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gan_mode", "=", "\"lsgan\"", ",", "target_real_label", "=", "1.0", ",", "target_fake_label", "=", "0.0", ",", "\n", "tensor", "=", "torch", ".", "FloatTensor", ",", "device", "=", "\"cpu\"", ")", ":", "\n", "        ", "super", "(", "GANLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "real_label", "=", "target_real_label", "\n", "self", ".", "fake_label", "=", "target_fake_label", "\n", "self", ".", "real_label_var", "=", "None", "\n", "self", ".", "fake_label_var", "=", "None", "\n", "self", ".", "Tensor", "=", "tensor", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "gan_mode", "=", "gan_mode", "\n", "if", "gan_mode", "==", "'lsgan'", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "elif", "gan_mode", "==", "'vanilla'", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "", "elif", "gan_mode", "in", "[", "'wgangp'", ",", "\"wganr1\"", "]", ":", "\n", "            ", "self", ".", "loss", "=", "None", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'gan mode %s not implemented'", "%", "gan_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.GANLoss.get_target_tensor": [[27, 38], ["target_tensor.to", "losses.GANLoss.Tensor().fill_", "losses.GANLoss.Tensor().fill_", "losses.GANLoss.Tensor", "losses.GANLoss.Tensor", "input.size", "input.size"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size"], ["", "", "def", "get_target_tensor", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "target_tensor", "=", "None", "\n", "if", "target_is_real", ":", "\n", "            ", "self", ".", "real_label_var", "=", "self", ".", "Tensor", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "self", ".", "real_label", ")", "\n", "self", ".", "real_label_var", ".", "requires_grad", "=", "False", "\n", "target_tensor", "=", "self", ".", "real_label_var", "\n", "", "else", ":", "\n", "            ", "self", ".", "fake_label_var", "=", "self", ".", "Tensor", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "self", ".", "fake_label", ")", "\n", "self", ".", "fake_label_var", ".", "requires_grad", "=", "False", "\n", "target_tensor", "=", "self", ".", "fake_label_var", "\n", "", "return", "target_tensor", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.GANLoss.forward": [[39, 58], ["isinstance", "losses.GANLoss.get_target_tensor", "losses.GANLoss.loss", "isinstance", "losses.GANLoss.get_target_tensor", "losses.GANLoss.loss", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.GANLoss.get_target_tensor", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.GANLoss.get_target_tensor"], ["", "def", "forward", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "input", ",", "list", ")", "and", "input", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "return", "0", "\n", "", "if", "isinstance", "(", "input", "[", "0", "]", ",", "list", ")", ":", "\n", "            ", "loss", "=", "0", "\n", "for", "input_i", "in", "input", ":", "\n", "                ", "pred", "=", "input_i", "[", "-", "1", "]", "\n", "if", "self", ".", "gan_mode", "in", "[", "'lsgan'", ",", "'vanilla'", "]", ":", "\n", "                    ", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "pred", ",", "target_is_real", ")", "\n", "loss", "+=", "self", ".", "loss", "(", "pred", ",", "target_tensor", ")", "\n", "", "else", ":", "\n", "                    ", "if", "target_is_real", ":", "\n", "                        ", "loss", "+=", "-", "torch", ".", "mean", "(", "pred", ")", "\n", "", "else", ":", "\n", "                        ", "loss", "+=", "torch", ".", "mean", "(", "pred", ")", "\n", "", "", "", "return", "loss", "\n", "", "else", ":", "\n", "            ", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "input", "[", "-", "1", "]", ",", "target_is_real", ")", "\n", "return", "self", ".", "loss", "(", "input", "[", "-", "1", "]", ",", "target_tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.AlexNetLoss.__init__": [[64, 87], ["torch.nn.Module.__init__", "print", "losses.ScalingLayer", "len", "losses.NetLinLayer", "losses.NetLinLayer", "losses.NetLinLayer", "losses.NetLinLayer", "losses.NetLinLayer", "len", "net_type().to", "net_type", "net_type"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__"], ["    ", "def", "__init__", "(", "self", ",", "pnet_type", "=", "'alex'", ",", "pnet_rand", "=", "False", ",", "pnet_tune", "=", "False", ",", "\n", "use_dropout", "=", "True", ",", "gpu_ids", "=", "None", ")", ":", "\n", "        ", "super", "(", "AlexNetLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "pnet_type", "=", "pnet_type", "\n", "self", ".", "pnet_tune", "=", "pnet_tune", "\n", "self", ".", "pnet_rand", "=", "pnet_rand", "\n", "print", "(", "gpu_ids", ")", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "self", ".", "scaling_layer", "=", "ScalingLayer", "(", ")", "\n", "net_type", "=", "AlexNet", "\n", "self", ".", "chns", "=", "[", "64", ",", "192", ",", "384", ",", "256", ",", "256", "]", "\n", "self", ".", "L", "=", "len", "(", "self", ".", "chns", ")", "\n", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "            ", "self", ".", "net", "=", "net_type", "(", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "net", "=", "net_type", "(", ")", "\n", "", "self", ".", "lin0", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "0", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin1", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "1", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin2", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "2", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin3", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "3", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin4", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "4", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.AlexNetLoss.forward": [[89, 110], ["range", "range", "losses.AlexNetLoss.scaling_layer", "losses.AlexNetLoss.scaling_layer", "losses.AlexNetLoss.net.forward", "losses.AlexNetLoss.net.forward", "losses.spatial_average", "utils.util.normalize_tensor", "utils.util.normalize_tensor", "losses.AlexNetLoss.lins[].model", "range"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.AlexNet.forward", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.AlexNet.forward", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.spatial_average", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.normalize_tensor", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.lpips.__init__.normalize_tensor"], ["", "def", "forward", "(", "self", ",", "in0", ",", "in1", ",", "retPerLayer", "=", "False", ")", ":", "\n", "# v0.0 - original release had a bug, where input was not scaled", "\n", "        ", "self", ".", "lins", "=", "[", "self", ".", "lin0", ",", "self", ".", "lin1", ",", "self", ".", "lin2", ",", "self", ".", "lin3", ",", "self", ".", "lin4", "]", "\n", "in0_input", ",", "in1_input", "=", "(", "self", ".", "scaling_layer", "(", "in0", ")", ",", "self", ".", "scaling_layer", "(", "\n", "in1", ")", ")", "\n", "outs0", ",", "outs1", "=", "self", ".", "net", ".", "forward", "(", "in0_input", ")", ",", "self", ".", "net", ".", "forward", "(", "in1_input", ")", "\n", "feats0", ",", "feats1", ",", "diffs", "=", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "\n", "for", "kk", "in", "range", "(", "self", ".", "L", ")", ":", "\n", "            ", "feats0", "[", "kk", "]", ",", "feats1", "[", "kk", "]", "=", "util", ".", "normalize_tensor", "(", "\n", "outs0", "[", "kk", "]", ")", ",", "util", ".", "normalize_tensor", "(", "outs1", "[", "kk", "]", ")", "\n", "diffs", "[", "kk", "]", "=", "(", "feats0", "[", "kk", "]", "-", "feats1", "[", "kk", "]", ")", "**", "2", "\n", "\n", "", "res", "=", "[", "spatial_average", "(", "self", ".", "lins", "[", "kk", "]", ".", "model", "(", "diffs", "[", "kk", "]", ")", ",", "\n", "keepdim", "=", "True", ")", "for", "kk", "in", "range", "(", "self", ".", "L", ")", "]", "\n", "\n", "val", "=", "res", "[", "0", "]", "\n", "for", "l", "in", "range", "(", "1", ",", "self", ".", "L", ")", ":", "\n", "            ", "val", "+=", "res", "[", "l", "]", "\n", "\n", "", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.ScalingLayer.__init__": [[113, 121], ["torch.nn.Module.__init__", "losses.ScalingLayer.register_buffer", "losses.ScalingLayer.register_buffer", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ScalingLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'shift'", ",", "\n", "torch", ".", "Tensor", "(", "[", "-", ".030", ",", "-", ".088", ",", "-", ".188", "]", ")", "[", "None", ",", ":", ",", "None", ",", "\n", "None", "]", ")", "\n", "self", ".", "register_buffer", "(", "'scale'", ",", "\n", "torch", ".", "Tensor", "(", "[", ".458", ",", ".448", ",", ".450", "]", ")", "[", "None", ",", ":", ",", "None", ",", "\n", "None", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.ScalingLayer.forward": [[122, 124], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "return", "(", "inp", "-", "self", ".", "shift", ")", "/", "self", ".", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.NetLinLayer.__init__": [[129, 136], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__"], ["def", "__init__", "(", "self", ",", "chn_in", ",", "chn_out", "=", "1", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "NetLinLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "layers", "=", "[", "nn", ".", "Dropout", "(", ")", ",", "]", "if", "(", "use_dropout", ")", "else", "[", "]", "\n", "layers", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "chn_in", ",", "chn_out", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "]", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.AlexNetLoss1.__init__": [[138, 145], ["torch.nn.Module.__init__", "torch.nn.MSELoss", "len", "AlexNet().to", "losses.AlexNet", "losses.AlexNet"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu_ids", ")", ":", "\n", "        ", "super", "(", "AlexNetLoss1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "            ", "self", ".", "alexnet", "=", "AlexNet", "(", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "alexnet", "=", "AlexNet", "(", ")", "\n", "", "self", ".", "criterion", "=", "nn", ".", "MSELoss", "(", "reduction", "=", "\"none\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.AlexNetLoss1.forward": [[146, 154], ["range", "losses.AlexNetLoss1.alexnet", "losses.AlexNetLoss1.alexnet", "len", "losses.AlexNetLoss1.criterion().mean().sum().sum", "losses.AlexNetLoss1.criterion().mean().sum", "losses.AlexNetLoss1.criterion().mean", "losses.AlexNetLoss1.criterion", "y_alexnet[].detach"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "x_alexnet", ",", "y_alexnet", "=", "self", ".", "alexnet", "(", "x", ")", ",", "self", ".", "alexnet", "(", "y", ")", "\n", "loss", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "x_alexnet", ")", ")", ":", "\n", "            ", "const_shape", "=", "1", "/", "(", "x_alexnet", "[", "i", "]", ".", "shape", "[", "2", "]", "*", "x_alexnet", "[", "i", "]", ".", "shape", "[", "3", "]", ")", "\n", "loss", "+=", "const_shape", "*", "self", ".", "criterion", "(", "x_alexnet", "[", "i", "]", ",", "\n", "y_alexnet", "[", "i", "]", ".", "detach", "(", ")", ")", ".", "mean", "(", "1", ")", ".", "sum", "(", "1", ")", ".", "sum", "(", "1", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.Style_Perceptual_Loss.__init__": [[166, 175], ["torch.nn.Module.__init__", "torch.nn.L1Loss", "len", "losses.Style_Perceptual_Loss.add_module", "losses.Style_Perceptual_Loss.add_module", "VGG19().to", "losses.VGG19", "losses.VGG19"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__"], ["def", "__init__", "(", "self", ",", "weights", "=", "[", "1.0", "/", "32", ",", "1.0", "/", "16", ",", "1.0", "/", "8", ",", "1.0", "/", "4", ",", "1.0", "]", ",", "gpu_ids", "=", "[", "]", ",", "fp16", "=", "False", ")", ":", "\n", "        ", "super", "(", "Style_Perceptual_Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "            ", "self", ".", "add_module", "(", "'vgg'", ",", "VGG19", "(", ")", ".", "to", "(", "\"cuda\"", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "add_module", "(", "'vgg'", ",", "VGG19", "(", ")", ")", "\n", "", "self", ".", "criterion", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "weights", "=", "weights", "\n", "self", ".", "fp16", "=", "fp16", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.Style_Perceptual_Loss.compute_gram": [[176, 192], ["x.type.type.size", "x.type.type.view", "x.type.view.transpose", "amp.disable_casts", "x.type.type.type", "x.type.type.size", "x.type.type.view", "x.type.view.transpose", "x.type.view.bmm", "x.type.view.bmm"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size"], ["", "def", "compute_gram", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "fp16", ":", "\n", "            ", "from", "apex", "import", "amp", "\n", "with", "amp", ".", "disable_casts", "(", ")", ":", "\n", "                ", "x", "=", "x", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", "\n", "b", ",", "ch", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "f", "=", "x", ".", "view", "(", "b", ",", "ch", ",", "w", "*", "h", ")", "\n", "f_T", "=", "f", ".", "transpose", "(", "1", ",", "2", ")", "\n", "G", "=", "f", ".", "bmm", "(", "f_T", ")", "/", "(", "h", "*", "w", "*", "ch", ")", "\n", "", "", "else", ":", "\n", "            ", "b", ",", "ch", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "f", "=", "x", ".", "view", "(", "b", ",", "ch", ",", "w", "*", "h", ")", "\n", "f_T", "=", "f", ".", "transpose", "(", "1", ",", "2", ")", "\n", "G", "=", "f", ".", "bmm", "(", "f_T", ")", "/", "(", "h", "*", "w", "*", "ch", ")", "\n", "\n", "", "return", "G", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.Style_Perceptual_Loss.__call__": [[193, 227], ["utils.util.normalize", "utils.util.normalize", "losses.Style_Perceptual_Loss.vgg", "losses.Style_Perceptual_Loss.vgg", "losses.Style_Perceptual_Loss.criterion", "losses.Style_Perceptual_Loss.criterion", "losses.Style_Perceptual_Loss.criterion", "losses.Style_Perceptual_Loss.criterion", "losses.Style_Perceptual_Loss.compute_gram", "losses.Style_Perceptual_Loss.compute_gram", "losses.Style_Perceptual_Loss.compute_gram", "losses.Style_Perceptual_Loss.compute_gram", "losses.Style_Perceptual_Loss.compute_gram", "losses.Style_Perceptual_Loss.compute_gram", "losses.Style_Perceptual_Loss.compute_gram", "losses.Style_Perceptual_Loss.compute_gram", "losses.Style_Perceptual_Loss.criterion", "losses.Style_Perceptual_Loss.criterion", "losses.Style_Perceptual_Loss.criterion", "losses.Style_Perceptual_Loss.criterion", "losses.Style_Perceptual_Loss.criterion"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.normalize", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.normalize", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.Style_Perceptual_Loss.compute_gram", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.Style_Perceptual_Loss.compute_gram", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.Style_Perceptual_Loss.compute_gram", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.Style_Perceptual_Loss.compute_gram", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.Style_Perceptual_Loss.compute_gram", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.Style_Perceptual_Loss.compute_gram", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.Style_Perceptual_Loss.compute_gram", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.Style_Perceptual_Loss.compute_gram"], ["", "def", "__call__", "(", "self", ",", "x", ",", "y", ",", "compute_perceptual", ",", "compute_style", ",", "normalize", "=", "False", ")", ":", "\n", "# Compute features", "\n", "        ", "if", "normalize", ":", "\n", "            ", "x_norm", "=", "(", "x", "+", "1", ")", "*", "0.5", "\n", "x", "=", "util", ".", "normalize", "(", "x_norm", ",", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "y_norm", "=", "(", "y", "+", "1", ")", "*", "0.5", "\n", "y", "=", "util", ".", "normalize", "(", "y_norm", ",", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "", "x_vgg", ",", "y_vgg", "=", "self", ".", "vgg", "(", "x", ")", ",", "self", ".", "vgg", "(", "y", ")", "\n", "style_loss", "=", "0.0", "\n", "if", "compute_style", ":", "\n", "# Compute loss", "\n", "            ", "style_loss", "=", "0.0", "\n", "style_loss", "+=", "self", ".", "criterion", "(", "self", ".", "compute_gram", "(", "x_vgg", "[", "'relu2_2'", "]", ")", ",", "self", ".", "compute_gram", "(", "y_vgg", "[", "'relu2_2'", "]", ")", ")", "\n", "style_loss", "+=", "self", ".", "criterion", "(", "self", ".", "compute_gram", "(", "x_vgg", "[", "'relu3_4'", "]", ")", ",", "self", ".", "compute_gram", "(", "y_vgg", "[", "'relu3_4'", "]", ")", ")", "\n", "style_loss", "+=", "self", ".", "criterion", "(", "self", ".", "compute_gram", "(", "x_vgg", "[", "'relu4_4'", "]", ")", ",", "self", ".", "compute_gram", "(", "y_vgg", "[", "'relu4_4'", "]", ")", ")", "\n", "style_loss", "+=", "self", ".", "criterion", "(", "self", ".", "compute_gram", "(", "x_vgg", "[", "'relu5_2'", "]", ")", ",", "self", ".", "compute_gram", "(", "y_vgg", "[", "'relu5_2'", "]", ")", ")", "\n", "", "content_loss", "=", "0.0", "\n", "if", "compute_perceptual", ":", "\n", "            ", "content_loss", "=", "0.0", "\n", "content_loss", "+=", "self", ".", "weights", "[", "0", "]", "*", "self", ".", "criterion", "(", "x_vgg", "[", "'relu1_1'", "]", ",", "\n", "y_vgg", "[", "'relu1_1'", "]", ")", "\n", "content_loss", "+=", "self", ".", "weights", "[", "1", "]", "*", "self", ".", "criterion", "(", "x_vgg", "[", "'relu2_1'", "]", ",", "\n", "y_vgg", "[", "'relu2_1'", "]", ")", "\n", "content_loss", "+=", "self", ".", "weights", "[", "2", "]", "*", "self", ".", "criterion", "(", "x_vgg", "[", "'relu3_1'", "]", ",", "\n", "y_vgg", "[", "'relu3_1'", "]", ")", "\n", "content_loss", "+=", "self", ".", "weights", "[", "3", "]", "*", "self", ".", "criterion", "(", "x_vgg", "[", "'relu4_1'", "]", ",", "\n", "y_vgg", "[", "'relu4_1'", "]", ")", "\n", "content_loss", "+=", "self", ".", "weights", "[", "4", "]", "*", "self", ".", "criterion", "(", "x_vgg", "[", "'relu5_1'", "]", ",", "\n", "y_vgg", "[", "'relu5_1'", "]", ")", "\n", "\n", "\n", "", "return", "style_loss", ",", "content_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.L1ReconLoss.__init__": [[240, 243], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__"], ["def", "__init__", "(", "self", ",", "weight", "=", "1", ")", ":", "\n", "        ", "super", "(", "L1ReconLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.L1ReconLoss.forward": [[244, 250], ["torch.mean", "torch.mean", "torch.abs", "torch.abs", "masks.view().mean().view", "masks.view().mean", "masks.view", "masks.size"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size"], ["", "def", "forward", "(", "self", ",", "imgs", ",", "recon_imgs", ",", "masks", "=", "None", ")", ":", "\n", "        ", "if", "masks", "is", "None", ":", "\n", "            ", "return", "self", ".", "weight", "*", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "imgs", "-", "recon_imgs", ")", ")", "\n", "", "else", ":", "\n", "#print(masks.view(masks.size(0), -1).mean(1).size(), imgs.size())", "\n", "            ", "return", "self", ".", "weight", "*", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "imgs", "-", "recon_imgs", ")", "/", "masks", ".", "view", "(", "masks", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "mean", "(", "1", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.VGG19.__init__": [[253, 328], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "losses.VGG19.parameters", "torchvision.models.vgg19", "losses.VGG19.relu1_1.add_module", "losses.VGG19.relu1_2.add_module", "losses.VGG19.relu2_1.add_module", "losses.VGG19.relu2_2.add_module", "losses.VGG19.relu3_1.add_module", "losses.VGG19.relu3_2.add_module", "losses.VGG19.relu3_3.add_module", "losses.VGG19.relu3_4.add_module", "losses.VGG19.relu4_1.add_module", "losses.VGG19.relu4_2.add_module", "losses.VGG19.relu4_3.add_module", "losses.VGG19.relu4_4.add_module", "losses.VGG19.relu5_1.add_module", "losses.VGG19.relu5_2.add_module", "losses.VGG19.relu5_3.add_module", "losses.VGG19.relu5_4.add_module", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "VGG19", ",", "self", ")", ".", "__init__", "(", ")", "\n", "features", "=", "models", ".", "vgg19", "(", "pretrained", "=", "True", ")", ".", "features", "\n", "self", ".", "relu1_1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu1_2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "\n", "self", ".", "relu2_1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu2_2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "\n", "self", ".", "relu3_1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu3_2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu3_3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu3_4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "\n", "self", ".", "relu4_1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu4_2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu4_3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu4_4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "\n", "self", ".", "relu5_1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu5_2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu5_3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu5_4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "relu1_1", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "2", ",", "4", ")", ":", "\n", "            ", "self", ".", "relu1_2", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "4", ",", "7", ")", ":", "\n", "            ", "self", ".", "relu2_1", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "7", ",", "9", ")", ":", "\n", "            ", "self", ".", "relu2_2", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "9", ",", "12", ")", ":", "\n", "            ", "self", ".", "relu3_1", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "12", ",", "14", ")", ":", "\n", "            ", "self", ".", "relu3_2", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "14", ",", "16", ")", ":", "\n", "            ", "self", ".", "relu3_3", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "16", ",", "18", ")", ":", "\n", "            ", "self", ".", "relu3_4", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "18", ",", "21", ")", ":", "\n", "            ", "self", ".", "relu4_1", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "21", ",", "23", ")", ":", "\n", "            ", "self", ".", "relu4_2", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "23", ",", "25", ")", ":", "\n", "            ", "self", ".", "relu4_3", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "25", ",", "27", ")", ":", "\n", "            ", "self", ".", "relu4_4", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "27", ",", "30", ")", ":", "\n", "            ", "self", ".", "relu5_1", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "30", ",", "32", ")", ":", "\n", "            ", "self", ".", "relu5_2", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "32", ",", "34", ")", ":", "\n", "            ", "self", ".", "relu5_3", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "34", ",", "36", ")", ":", "\n", "            ", "self", ".", "relu5_4", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "# don't need the gradients, just want the features", "\n", "", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.VGG19.forward": [[329, 374], ["losses.VGG19.relu1_1", "losses.VGG19.relu1_2", "losses.VGG19.relu2_1", "losses.VGG19.relu2_2", "losses.VGG19.relu3_1", "losses.VGG19.relu3_2", "losses.VGG19.relu3_3", "losses.VGG19.relu3_4", "losses.VGG19.relu4_1", "losses.VGG19.relu4_2", "losses.VGG19.relu4_3", "losses.VGG19.relu4_4", "losses.VGG19.relu5_1", "losses.VGG19.relu5_2", "losses.VGG19.relu5_3", "losses.VGG19.relu5_4"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "relu1_1", "=", "self", ".", "relu1_1", "(", "x", ")", "\n", "relu1_2", "=", "self", ".", "relu1_2", "(", "relu1_1", ")", "\n", "\n", "relu2_1", "=", "self", ".", "relu2_1", "(", "relu1_2", ")", "\n", "relu2_2", "=", "self", ".", "relu2_2", "(", "relu2_1", ")", "\n", "\n", "relu3_1", "=", "self", ".", "relu3_1", "(", "relu2_2", ")", "\n", "relu3_2", "=", "self", ".", "relu3_2", "(", "relu3_1", ")", "\n", "relu3_3", "=", "self", ".", "relu3_3", "(", "relu3_2", ")", "\n", "relu3_4", "=", "self", ".", "relu3_4", "(", "relu3_3", ")", "\n", "\n", "relu4_1", "=", "self", ".", "relu4_1", "(", "relu3_4", ")", "\n", "relu4_2", "=", "self", ".", "relu4_2", "(", "relu4_1", ")", "\n", "relu4_3", "=", "self", ".", "relu4_3", "(", "relu4_2", ")", "\n", "relu4_4", "=", "self", ".", "relu4_4", "(", "relu4_3", ")", "\n", "\n", "relu5_1", "=", "self", ".", "relu5_1", "(", "relu4_4", ")", "\n", "relu5_2", "=", "self", ".", "relu5_2", "(", "relu5_1", ")", "\n", "relu5_3", "=", "self", ".", "relu5_3", "(", "relu5_2", ")", "\n", "relu5_4", "=", "self", ".", "relu5_4", "(", "relu5_3", ")", "\n", "\n", "out", "=", "{", "\n", "'relu1_1'", ":", "relu1_1", ",", "\n", "'relu1_2'", ":", "relu1_2", ",", "\n", "\n", "'relu2_1'", ":", "relu2_1", ",", "\n", "'relu2_2'", ":", "relu2_2", ",", "\n", "\n", "'relu3_1'", ":", "relu3_1", ",", "\n", "'relu3_2'", ":", "relu3_2", ",", "\n", "'relu3_3'", ":", "relu3_3", ",", "\n", "'relu3_4'", ":", "relu3_4", ",", "\n", "\n", "'relu4_1'", ":", "relu4_1", ",", "\n", "'relu4_2'", ":", "relu4_2", ",", "\n", "'relu4_3'", ":", "relu4_3", ",", "\n", "'relu4_4'", ":", "relu4_4", ",", "\n", "\n", "'relu5_1'", ":", "relu5_1", ",", "\n", "'relu5_2'", ":", "relu5_2", ",", "\n", "'relu5_3'", ":", "relu5_3", ",", "\n", "'relu5_4'", ":", "relu5_4", ",", "\n", "}", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.AlexNet.__init__": [[377, 399], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "torchvision.models.alexnet", "losses.AlexNet.slice1.add_module", "losses.AlexNet.slice2.add_module", "losses.AlexNet.slice3.add_module", "losses.AlexNet.slice4.add_module", "losses.AlexNet.slice5.add_module", "losses.AlexNet.parameters", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ")", ":", "\n", "        ", "super", "(", "AlexNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "alexnet_pretrained_features", "=", "models", ".", "alexnet", "(", "pretrained", "=", "True", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "N_slices", "=", "5", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "2", ",", "5", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "5", ",", "8", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "8", ",", "10", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "10", ",", "12", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.AlexNet.forward": [[400, 417], ["losses.AlexNet.slice1", "losses.AlexNet.slice2", "losses.AlexNet.slice3", "losses.AlexNet.slice4", "losses.AlexNet.slice5", "collections.namedtuple", "collections.namedtuple."], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu1", "=", "h", "\n", "h", "=", "self", ".", "slice2", "(", "h", ")", "\n", "h_relu2", "=", "h", "\n", "h", "=", "self", ".", "slice3", "(", "h", ")", "\n", "h_relu3", "=", "h", "\n", "h", "=", "self", ".", "slice4", "(", "h", ")", "\n", "h_relu4", "=", "h", "\n", "h", "=", "self", ".", "slice5", "(", "h", ")", "\n", "h_relu5", "=", "h", "\n", "alexnet_outputs", "=", "namedtuple", "(", "\"AlexnetOutputs\"", ",", "\n", "[", "'relu1'", ",", "'relu2'", ",", "'relu3'", ",", "'relu4'", ",", "\n", "'relu5'", "]", ")", "\n", "out", "=", "alexnet_outputs", "(", "h_relu1", ",", "h_relu2", ",", "h_relu3", ",", "h_relu4", ",", "h_relu5", ")", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.spatial_average": [[59, 61], ["in_tens.mean"], "function", ["None"], ["", "", "", "def", "spatial_average", "(", "in_tens", ",", "keepdim", "=", "True", ")", ":", "\n", "    ", "return", "in_tens", ".", "mean", "(", "[", "2", ",", "3", "]", ",", "keepdim", "=", "keepdim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.losses.losses.total_variation_loss": [[229, 234], ["torch.mean", "torch.mean", "torch.abs", "torch.abs"], "function", ["None"], ["", "", "def", "total_variation_loss", "(", "image", ")", ":", "\n", "# shift one pixel and get difference (for both x and y direction)", "\n", "    ", "loss", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "image", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "-", "image", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", ")", ")", "+", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "image", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "-", "image", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.options.test_options.TestOptions.initialize": [[4, 16], ["base_options.BaseOptions.initialize", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "float"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.options.base_options.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "BaseOptions", ".", "initialize", "(", "self", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--ntest'", ",", "type", "=", "int", ",", "default", "=", "float", "(", "\"inf\"", ")", ",", "help", "=", "'# of test examples.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--results_dir'", ",", "type", "=", "str", ",", "default", "=", "'./results/'", ",", "help", "=", "'saves results here.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--aspect_ratio'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'aspect ratio of result images'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'test'", ",", "help", "=", "'train, val, test, etc'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--which_epoch'", ",", "type", "=", "str", ",", "default", "=", "'latest'", ",", "help", "=", "'which epoch to load? set to latest to use latest cached model'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--how_many'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'how many test images to run'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--use_load_mask\"", ",", "action", "=", "'store_true'", ")", "\n", "\n", "\n", "self", ".", "isTrain", "=", "False", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.options.train_options.TrainOptions.initialize": [[4, 62], ["base_options.BaseOptions.initialize", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.options.base_options.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "BaseOptions", ".", "initialize", "(", "self", ")", "\n", "# for displays", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--display_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'frequency of showing training results on screen'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'frequency of showing training results on console'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--save_latest_freq'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'frequency of saving the latest results'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--save_epoch_freq'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'frequency of saving checkpoints at the end of epochs'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_html'", ",", "action", "=", "'store_true'", ",", "help", "=", "'do not save intermediate training results to [opt.checkpoints_dir]/[opt.name]/web/'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--debug'", ",", "action", "=", "'store_true'", ",", "help", "=", "'only do one epoch and displays at each iteration'", ")", "\n", "\n", "# for training", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--continue_train'", ",", "action", "=", "'store_true'", ",", "help", "=", "'continue training: load the latest model'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--fineTuning'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'finetune training: load the latest model'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--load_pretrain_sp'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'load the pretrained model for SP-NET from the specified location'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--load_pretrain_sg'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "\n", "help", "=", "'load the pretrained model for SG-NET from the specified location'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--which_epoch'", ",", "type", "=", "str", ",", "default", "=", "'latest'", ",", "help", "=", "'which epoch to load? set to latest to use latest cached model'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'train'", ",", "help", "=", "'train, val, test, etc'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--niter'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'# of iter at starting learning rate'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--niter_decay'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'# of iter to linearly decay learning rate to zero'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--beta1'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "'momentum term of adam'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--beta2'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "\n", "help", "=", "'momentum term of adam'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0002", ",", "help", "=", "'initial learning rate for adam'", ")", "\n", "\n", "# for discriminators", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--num_D_local'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'number of local discriminators to use'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--num_D_global'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'number of global discriminators to use'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_layers_D'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'only used if which_model_netD==n_layers'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--ndf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of discrim filters in first conv layer'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lambda_feat'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "'weight for feature matching loss'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lambda_rec'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "\n", "help", "=", "'weight for reconstruction loss'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lambda_KL_rec'", ",", "type", "=", "float", ",", "default", "=", "5.0", ",", "\n", "help", "=", "'weight for KL loss'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lambda_inst_rec'", ",", "type", "=", "float", ",", "default", "=", "20.0", ",", "\n", "help", "=", "'weight for instance reconstruction loss'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lambda_seg_map'", ",", "type", "=", "float", ",", "default", "=", "5.0", ",", "\n", "help", "=", "'weight for seg map reconstruction loss'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lambda_perceptual'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "\n", "help", "=", "'weight for perceptual loss'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lambda_style'", ",", "type", "=", "float", ",", "\n", "default", "=", "10.0", ",", "\n", "help", "=", "'weight for style loss'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--gp_lambda'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "\"weight for gradient penalty\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--spatial_discounting_gamma'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "\n", "help", "=", "\"gamma for discounting mask\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_critic'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "\"critic number for wgan training\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_ganFeat_loss'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do *not* use discriminator feature matching loss'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--which_perceptual_loss'", ",", "type", "=", "str", ",", "help", "=", "'specify wich perceptuall loss to use'", ",", "choices", "=", "[", "'vgg'", ",", "'alex'", ",", "'None'", "]", ",", "default", "=", "\"vgg\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_ganStyle_loss'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if specified, do *not* use Gan Style loss'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--gan_mode'", ",", "type", "=", "str", ",", "default", "=", "'lsgan'", ",", "choices", "=", "[", "'vanilla'", ",", "'lsgan'", ",", "'wgangp'", ",", "'wganr1'", "]", ",", "help", "=", "'the type of GAN objective. [vanilla| lsgan | wgangp]. vanilla GAN loss is the cross-entropy objective used in the original GAN paper.'", ")", "\n", "\n", "\n", "self", ".", "isTrain", "=", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.options.base_options.BaseOptions.__init__": [[7, 10], ["argparse.ArgumentParser"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "self", ".", "initialized", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.options.base_options.BaseOptions.initialize": [[11, 97], ["base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument"], "methods", ["None"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "# experiment specifics", "\n", "        ", "self", ".", "parser", ".", "add_argument", "(", "'--name'", ",", "type", "=", "str", ",", "default", "=", "'SGI_NET_debug'", ",", "\n", "help", "=", "'name of the experiment. It decides where to store samples and models'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--gpu_ids'", ",", "type", "=", "str", ",", "default", "=", "'-1'", ",", "\n", "help", "=", "'gpu ids: e.g. 0  0,1,2, 0,2. use -1 for CPU'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--checkpoints_dir'", ",", "type", "=", "str", ",", "\n", "default", "=", "'./checkpoints'", ",", "\n", "help", "=", "'models are saved here'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--norm'", ",", "type", "=", "str", ",", "default", "=", "'instance'", ",", "\n", "help", "=", "'instance normalization or batch normalization'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--activation'", ",", "type", "=", "str", ",", "default", "=", "'elu'", ",", "\n", "help", "=", "'relu or elu activation'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--verbose'", ",", "action", "=", "'store_true'", ",", "\n", "default", "=", "False", ",", "help", "=", "'toggles verbose'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--nThreads'", ",", "default", "=", "2", ",", "type", "=", "int", ",", "\n", "help", "=", "'# threads for loading data'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--how_many'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "\n", "help", "=", "'how many test images to run'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_flip'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if specified, do not flip the images for data argumentation'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--size_crop_height\"", ",", "type", "=", "int", ",", "help", "=", "\"height of crop\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--size_crop_width\"", ",", "type", "=", "int", ",", "help", "=", "\"width of crop\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--ngf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of gen filters in first conv layer'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_downsample_global'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'number of downsampling layers in netG'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--prob_bg'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "\n", "help", "=", "'probablity of sampling random background patches'", ")", "\n", "\n", "\n", "# input/output sizes", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--batchSize'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'input batch size'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--label_nc'", ",", "type", "=", "int", ",", "default", "=", "28", ",", "\n", "help", "=", "'# of label channels'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_contain_dontcare_label'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"DO NOT use additional channel for masked region, use background class instead\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--input_nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "\n", "help", "=", "'# of input image channels'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--output_nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "\n", "help", "=", "'# of output image channels'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--image_height'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "\"image_height\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--image_width'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "\"image_width\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--fp16'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'train with AMP'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--use_bbox\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"use class conditioning\"", ",", "default", "=", "False", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--classes_of_interest\"", ",", "type", "=", "str", ",", "help", "=", "'class conditioning'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--z_len\"", ",", "type", "=", "int", ",", "default", "=", "1024", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--compact_sizex'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--compact_sizey'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--use_skip\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"use skip connections\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--use_spade\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"use spade normalization\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--local_world_size\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--which_encoder'", ",", "type", "=", "str", ",", "default", "=", "'concat'", ",", "choices", "=", "[", "\"concat\"", ",", "\"ctx_label\"", "]", ",", "\n", "help", "=", "'which encoder: concatenate image and seg encoder or use two encoder for context and label'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--use_load_mask\"", ",", "action", "=", "'store_true'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--use_gt_instance_encoder\"", ",", "action", "=", "'store_true'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--use_pixel_shuffle\"", ",", "\n", "action", "=", "'store_true'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_deconv'", ",", "action", "=", "'store_true'", ",", "help", "=", "'do *not* use deconv layer, if false, use upsampling + conv'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--use_attention'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'do use contextual attention'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--use_discounted_mask'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'do use discounted mask for l1 loss'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--use_sn_generator'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'do use spectral norm in generator'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--use_sn_discriminator'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'do use spectral norm in discriminator'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_dilated_conv'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'do use resblock without dilation instead of resblock+dilation'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--min_hole_size'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "help", "=", "'min size of missing hole'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--max_hole_size'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "help", "=", "\"max size of missing hole\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--use_multi_scale_loss\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"multi scale cross entropy loss\"", ")", "\n", "\n", "\n", "# for setting inputs", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--dataroot'", ",", "type", "=", "str", ",", "\n", "default", "=", "'../datasets'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--dataset\"", ",", "type", "=", "str", ",", "choices", "=", "[", "\"cityscapes\"", ",", "\"indianDrivingDataset\"", "]", ",", "default", "=", "\"cityscapes\"", ")", "\n", "\n", "# for displays", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--display_winsize'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "\n", "help", "=", "'display window size'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--tf_log'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if specified, use tensorboard logging. Requires tensorflow installed'", ")", "\n", "self", ".", "initialized", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.options.base_options.BaseOptions.parse": [[98, 146], ["base_options.BaseOptions.parser.parse_args", "base_options.BaseOptions.opt.gpu_ids.split", "vars", "utils.util.mkdirs", "base_options.BaseOptions.initialize", "int", "base_options.BaseOptions.opt.classes_of_interest.split", "len", "torch.cuda.set_device", "print", "sorted", "print", "os.path.join", "os.path.join", "os.path.join", "base_options.BaseOptions.opt.gpu_ids.append", "int", "vars.items", "print", "open", "opt_file.write", "sorted", "opt_file.write", "base_options.BaseOptions.opt.classes_of_interest_ids.append", "vars.items", "opt_file.write", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.mkdirs", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.options.base_options.BaseOptions.initialize"], ["", "def", "parse", "(", "self", ",", "save", "=", "True", ")", ":", "\n", "        ", "if", "not", "self", ".", "initialized", ":", "\n", "            ", "self", ".", "initialize", "(", ")", "\n", "", "self", ".", "opt", "=", "self", ".", "parser", ".", "parse_args", "(", ")", "\n", "self", ".", "opt", ".", "isTrain", "=", "self", ".", "isTrain", "# train or test", "\n", "\n", "str_ids", "=", "self", ".", "opt", ".", "gpu_ids", ".", "split", "(", "','", ")", "\n", "self", ".", "opt", ".", "gpu_ids", "=", "[", "]", "\n", "self", ".", "opt", ".", "semantic_nc", "=", "self", ".", "opt", ".", "label_nc", "+", "(", "0", "if", "self", ".", "opt", ".", "no_contain_dontcare_label", "else", "1", ")", "\n", "for", "str_id", "in", "str_ids", ":", "\n", "            ", "id", "=", "int", "(", "str_id", ")", "\n", "if", "id", ">=", "0", ":", "\n", "                ", "self", ".", "opt", ".", "gpu_ids", ".", "append", "(", "id", ")", "\n", "", "", "self", ".", "opt", ".", "classes_of_interest_ids", "=", "[", "]", "\n", "if", "self", ".", "opt", ".", "use_bbox", "is", "not", "False", ":", "\n", "            ", "for", "str_class_id", "in", "self", ".", "opt", ".", "classes_of_interest", ".", "split", "(", "','", ")", ":", "\n", "                ", "id", "=", "int", "(", "str_class_id", ")", "\n", "if", "id", ">=", "0", ":", "\n", "                    ", "self", ".", "opt", ".", "classes_of_interest_ids", ".", "append", "(", "id", ")", "\n", "\n", "# set gpu ids", "\n", "", "", "", "if", "len", "(", "self", ".", "opt", ".", "gpu_ids", ")", ">", "0", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "self", ".", "opt", ".", "gpu_ids", "[", "0", "]", ")", "\n", "\n", "", "args", "=", "vars", "(", "self", ".", "opt", ")", "\n", "if", "self", ".", "opt", ".", "local_rank", "==", "0", ":", "\n", "            ", "print", "(", "'------------ Options -------------'", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "args", ".", "items", "(", ")", ")", ":", "\n", "                ", "print", "(", "'%s: %s'", "%", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ")", ")", "\n", "", "print", "(", "'-------------- End ----------------'", ")", "\n", "\n", "# save to the disk", "\n", "", "folder_name", "=", "\"SGI-NET\"", "\n", "if", "self", ".", "opt", ".", "phase", "==", "\"test\"", ":", "\n", "            ", "expr_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "checkpoints_dir", ",", "folder_name", ",", "self", ".", "opt", ".", "name", ",", "\"test\"", ")", "\n", "", "else", ":", "\n", "            ", "expr_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "checkpoints_dir", ",", "folder_name", ",", "\n", "self", ".", "opt", ".", "name", ")", "\n", "", "util", ".", "mkdirs", "(", "expr_dir", ")", "\n", "if", "save", "and", "not", "self", ".", "opt", ".", "continue_train", ":", "\n", "            ", "file_name", "=", "os", ".", "path", ".", "join", "(", "expr_dir", ",", "'opt.txt'", ")", "\n", "with", "open", "(", "file_name", ",", "'wt'", ")", "as", "opt_file", ":", "\n", "                ", "opt_file", ".", "write", "(", "'------------ Options -------------\\n'", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "args", ".", "items", "(", ")", ")", ":", "\n", "                    ", "opt_file", ".", "write", "(", "'%s: %s\\n'", "%", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ")", ")", "\n", "", "opt_file", ".", "write", "(", "'-------------- End ----------------\\n'", ")", "\n", "", "", "return", "self", ".", "opt", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.download.downloader.login": [[18, 61], ["appdirs.user_data_dir", "os.path.join", "os.path.isfile", "requests.Session", "requests.Session.get", "session.post.raise_for_status", "requests.Session.post", "session.post.raise_for_status", "__name__.split", "builtins.input", "getpass.getpass", "store_question.format.format", "builtins.input().strip().lower", "os.path.isfile", "Exception", "open", "json.load", "os.makedirs", "os.chmod", "os.remove", "builtins.input().strip", "open", "json.dump", "builtins.input"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.configuration.load"], ["def", "login", "(", ")", ":", "\n", "    ", "appname", "=", "__name__", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "appauthor", "=", "'cityscapes'", "\n", "data_dir", "=", "appdirs", ".", "user_data_dir", "(", "appname", ",", "appauthor", ")", "\n", "credentials_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'credentials.json'", ")", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "credentials_file", ")", ":", "\n", "        ", "with", "open", "(", "credentials_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "credentials", "=", "json", ".", "load", "(", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "username", "=", "input", "(", "\"Cityscapes username or email address: \"", ")", "\n", "password", "=", "getpass", ".", "getpass", "(", "\"Cityscapes password: \"", ")", "\n", "\n", "credentials", "=", "{", "\n", "'username'", ":", "username", ",", "\n", "'password'", ":", "password", "\n", "}", "\n", "\n", "store_question", "=", "\"Store credentials unencrypted in '{}' [y/N]: \"", "\n", "store_question", "=", "store_question", ".", "format", "(", "credentials_file", ")", "\n", "store", "=", "input", "(", "store_question", ")", ".", "strip", "(", ")", ".", "lower", "(", ")", "\n", "if", "store", "in", "[", "'y'", ",", "'yes'", "]", ":", "\n", "            ", "os", ".", "makedirs", "(", "data_dir", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "credentials_file", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "json", ".", "dump", "(", "credentials", ",", "f", ")", "\n", "", "os", ".", "chmod", "(", "credentials_file", ",", "stat", ".", "S_IREAD", "|", "stat", ".", "S_IWRITE", ")", "\n", "\n", "", "", "session", "=", "requests", ".", "Session", "(", ")", "\n", "r", "=", "session", ".", "get", "(", "\"https://www.cityscapes-dataset.com/login\"", ",", "\n", "allow_redirects", "=", "False", ")", "\n", "r", ".", "raise_for_status", "(", ")", "\n", "credentials", "[", "'submit'", "]", "=", "'Login'", "\n", "r", "=", "session", ".", "post", "(", "\"https://www.cityscapes-dataset.com/login\"", ",", "\n", "data", "=", "credentials", ",", "allow_redirects", "=", "False", ")", "\n", "r", ".", "raise_for_status", "(", ")", "\n", "\n", "# login was successful, if user is redirected", "\n", "if", "r", ".", "status_code", "!=", "302", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "credentials_file", ")", ":", "\n", "            ", "os", ".", "remove", "(", "credentials_file", ")", "\n", "", "raise", "Exception", "(", "\"Bad credentials.\"", ")", "\n", "\n", "", "return", "session", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.download.downloader.get_available_packages": [[63, 68], ["session.get", "session.get.raise_for_status", "session.get.json"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.comm.FutureResult.get"], ["", "def", "get_available_packages", "(", "*", ",", "session", ")", ":", "\n", "    ", "r", "=", "session", ".", "get", "(", "\n", "\"https://www.cityscapes-dataset.com/downloads/?list\"", ",", "allow_redirects", "=", "False", ")", "\n", "r", ".", "raise_for_status", "(", ")", "\n", "return", "r", ".", "json", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.download.downloader.list_available_packages": [[70, 80], ["downloader.get_available_packages", "print", "print", "print"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.download.downloader.get_available_packages"], ["", "def", "list_available_packages", "(", "*", ",", "session", ")", ":", "\n", "    ", "packages", "=", "get_available_packages", "(", "session", "=", "session", ")", "\n", "print", "(", "\"The following packages are available for download.\"", ")", "\n", "print", "(", "\"Please refer to https://www.cityscapes-dataset.com/downloads/ \"", "\n", "\"for additional packages and instructions on properly citing third party packages.\"", ")", "\n", "for", "p", "in", "packages", ":", "\n", "        ", "info", "=", "' {} -> {}'", ".", "format", "(", "p", "[", "'name'", "]", ",", "p", "[", "'size'", "]", ")", "\n", "if", "p", "[", "'thirdparty'", "]", "==", "'1'", ":", "\n", "            ", "info", "+=", "\" (third party)\"", "\n", "", "print", "(", "info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.download.downloader.download_packages": [[82, 134], ["downloader.get_available_packages", "os.path.isdir", "Exception", "Exception", "os.path.join", "print", "os.path.exists", "session.get", "session.get.raise_for_status", "hashlib.md5", "session.get.text.split", "open", "open", "iter", "hashlib.md5.hexdigest", "Exception", "print", "Exception", "session.get", "session.get.raise_for_status", "shutil.copyfileobj", "hashlib.md5.update", "f.read", "f.tell"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.download.downloader.get_available_packages", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.update"], ["", "", "def", "download_packages", "(", "*", ",", "session", ",", "package_names", ",", "destination_path", ",", "resume", "=", "False", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "destination_path", ")", ":", "\n", "        ", "raise", "Exception", "(", "\n", "\"Destination path '{}' does not exist.\"", ".", "format", "(", "destination_path", ")", ")", "\n", "\n", "", "packages", "=", "get_available_packages", "(", "session", "=", "session", ")", "\n", "name_to_id", "=", "{", "p", "[", "'name'", "]", ":", "p", "[", "'packageID'", "]", "for", "p", "in", "packages", "}", "\n", "invalid_names", "=", "[", "n", "for", "n", "in", "package_names", "if", "n", "not", "in", "name_to_id", "]", "\n", "if", "invalid_names", ":", "\n", "        ", "raise", "Exception", "(", "\n", "\"These packages do not exist or you don't have access: {}\"", ".", "format", "(", "invalid_names", ")", ")", "\n", "\n", "", "for", "package_name", "in", "package_names", ":", "\n", "        ", "local_filename", "=", "os", ".", "path", ".", "join", "(", "destination_path", ",", "package_name", ")", "\n", "package_id", "=", "name_to_id", "[", "package_name", "]", "\n", "\n", "print", "(", "\"Downloading cityscapes package '{}' to '{}'\"", ".", "format", "(", "\n", "package_name", ",", "local_filename", ")", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "local_filename", ")", ":", "\n", "            ", "if", "resume", ":", "\n", "                ", "print", "(", "\"Resuming previous download\"", ")", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "\n", "\"Destination file '{}' already exists.\"", ".", "format", "(", "local_filename", ")", ")", "\n", "\n", "# md5sum", "\n", "", "", "url", "=", "\"https://www.cityscapes-dataset.com/md5-sum/?packageID={}\"", ".", "format", "(", "\n", "package_id", ")", "\n", "r", "=", "session", ".", "get", "(", "url", ",", "allow_redirects", "=", "False", ")", "\n", "r", ".", "raise_for_status", "(", ")", "\n", "md5sum", "=", "r", ".", "text", ".", "split", "(", ")", "[", "0", "]", "\n", "\n", "# download in chunks, support resume", "\n", "url", "=", "\"https://www.cityscapes-dataset.com/file-handling/?packageID={}\"", ".", "format", "(", "\n", "package_id", ")", "\n", "with", "open", "(", "local_filename", ",", "'ab'", "if", "resume", "else", "'wb'", ")", "as", "f", ":", "\n", "            ", "resume_header", "=", "{", "\n", "'Range'", ":", "'bytes={}-'", ".", "format", "(", "f", ".", "tell", "(", ")", ")", "}", "if", "resume", "else", "{", "}", "\n", "with", "session", ".", "get", "(", "url", ",", "allow_redirects", "=", "False", ",", "stream", "=", "True", ",", "headers", "=", "resume_header", ")", "as", "r", ":", "\n", "                ", "r", ".", "raise_for_status", "(", ")", "\n", "assert", "r", ".", "status_code", "in", "[", "200", ",", "206", "]", "\n", "\n", "shutil", ".", "copyfileobj", "(", "r", ".", "raw", ",", "f", ")", "\n", "\n", "# verify md5sum", "\n", "", "", "hash_md5", "=", "hashlib", ".", "md5", "(", ")", "\n", "with", "open", "(", "local_filename", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "for", "chunk", "in", "iter", "(", "lambda", ":", "f", ".", "read", "(", "4096", ")", ",", "b\"\"", ")", ":", "\n", "                ", "hash_md5", ".", "update", "(", "chunk", ")", "\n", "", "", "if", "md5sum", "!=", "hash_md5", ".", "hexdigest", "(", ")", ":", "\n", "            ", "raise", "Exception", "(", "\"MD5 sum of downloaded file does not match.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.download.downloader.parse_arguments": [[136, 154], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "", "", "def", "parse_arguments", "(", ")", ":", "\n", "    ", "description", "=", "\"Download packages of the Cityscapes Dataset.\"", "\n", "epilog", "=", "\"Requires an account that can be created via https://www.cityscapes-dataset.com/register/\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "description", ",", "epilog", "=", "epilog", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-l'", ",", "'--list_available'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"list available packages and exit\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-d'", ",", "'--destination_path'", ",", "default", "=", "'.'", ",", "\n", "help", "=", "\"destination path for downloads\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-r'", ",", "'--resume'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"resume previous download\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'package_name'", ",", "nargs", "=", "'*'", ",", "\n", "help", "=", "\"name of the packages to download\"", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.download.downloader.main": [[156, 168], ["downloader.parse_arguments", "downloader.login", "downloader.download_packages", "downloader.list_available_packages"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.download.downloader.parse_arguments", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.download.downloader.login", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.download.downloader.download_packages", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.download.downloader.list_available_packages"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_arguments", "(", ")", "\n", "\n", "session", "=", "login", "(", ")", "\n", "\n", "if", "args", ".", "list_available", ":", "\n", "        ", "list_available_packages", "(", "session", "=", "session", ")", "\n", "return", "\n", "\n", "", "download_packages", "(", "session", "=", "session", ",", "package_names", "=", "args", ".", "package_name", ",", "\n", "destination_path", "=", "args", ".", "destination_path", ",", "\n", "resume", "=", "args", ".", "resume", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.configuration.__init__": [[47, 88], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "# The filename of the image we currently working on", "\n", "        ", "self", ".", "currentFile", "=", "\"\"", "\n", "# The filename of the labels we currently working on", "\n", "self", ".", "currentLabelFile", "=", "\"\"", "\n", "# The filename of the corrections we currently working on", "\n", "self", ".", "currentCorrectionFile", "=", "\"\"", "\n", "# The path where the Cityscapes dataset is located", "\n", "self", ".", "csPath", "=", "\"\"", "\n", "# The path of the images of the currently loaded city", "\n", "self", ".", "city", "=", "\"\"", "\n", "# The name of the currently loaded city", "\n", "self", ".", "cityName", "=", "\"\"", "\n", "# The type of the current annotations", "\n", "self", ".", "gtType", "=", "\"\"", "\n", "# The split, where the currently loaded city belongs to", "\n", "self", ".", "split", "=", "\"\"", "\n", "# The path of the labels. In this folder we expect a folder for each city", "\n", "# Within these city folders we expect the label with a filename matching", "\n", "# the images, except for the extension", "\n", "self", ".", "labelPath", "=", "\"\"", "\n", "# The path to store correction markings", "\n", "self", ".", "correctionPath", "=", "\"\"", "\n", "# The transparency of the labels over the image", "\n", "self", ".", "transp", "=", "0.5", "\n", "# The zoom toggle", "\n", "self", ".", "zoom", "=", "False", "\n", "# The zoom factor", "\n", "self", ".", "zoomFactor", "=", "1.0", "\n", "# The size of the zoom window. Currently there is no setter or getter for that", "\n", "self", ".", "zoomSize", "=", "400", "# px", "\n", "# The highlight toggle", "\n", "self", ".", "highlight", "=", "False", "\n", "# The highlight label", "\n", "self", ".", "highlightLabelSelection", "=", "\"\"", "\n", "# Screenshot file", "\n", "self", ".", "screenshotFilename", "=", "\"%i\"", "\n", "# Correction mode", "\n", "self", ".", "correctionMode", "=", "False", "\n", "# Warn before saving that you are overwriting files", "\n", "self", ".", "showSaveWarning", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.configuration.load": [[90, 99], ["os.path.isfile", "cityscapesLabelTool.configuration.fixConsistency", "open", "f.read", "json.loads"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.configuration.fixConsistency"], ["", "def", "load", "(", "self", ",", "filename", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "filename", ")", ":", "\n", "            ", "with", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "jsonText", "=", "f", ".", "read", "(", ")", "\n", "jsonDict", "=", "json", ".", "loads", "(", "jsonText", ")", "\n", "for", "key", "in", "jsonDict", ":", "\n", "                    ", "if", "key", "in", "self", ".", "__dict__", ":", "\n", "                        ", "self", ".", "__dict__", "[", "key", "]", "=", "jsonDict", "[", "key", "]", "\n", "", "", "", "", "self", ".", "fixConsistency", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.configuration.fixConsistency": [[102, 139], ["os.path.normpath", "os.path.normpath", "os.path.normpath", "os.path.normpath", "os.path.normpath", "os.path.normpath", "os.path.normpath", "os.path.isdir", "os.path.isdir", "os.path.basename", "os.path.isfile", "os.path.dirname", "os.path.isfile", "os.path.isdir", "os.path.dirname", "os.path.join", "os.path.isfile", "os.path.isdir", "os.path.dirname", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "fixConsistency", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "currentFile", ":", "\n", "            ", "self", ".", "currentFile", "=", "os", ".", "path", ".", "normpath", "(", "self", ".", "currentFile", ")", "\n", "", "if", "self", ".", "currentLabelFile", ":", "\n", "            ", "self", ".", "currentLabelFile", "=", "os", ".", "path", ".", "normpath", "(", "self", ".", "currentLabelFile", ")", "\n", "", "if", "self", ".", "currentCorrectionFile", ":", "\n", "            ", "self", ".", "currentCorrectionFile", "=", "os", ".", "path", ".", "normpath", "(", "\n", "self", ".", "currentCorrectionFile", ")", "\n", "", "if", "self", ".", "csPath", ":", "\n", "            ", "self", ".", "csPath", "=", "os", ".", "path", ".", "normpath", "(", "self", ".", "csPath", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "csPath", ")", ":", "\n", "                ", "self", ".", "csPath", "=", "\"\"", "\n", "", "", "if", "self", ".", "city", ":", "\n", "            ", "self", ".", "city", "=", "os", ".", "path", ".", "normpath", "(", "self", ".", "city", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "city", ")", ":", "\n", "                ", "self", ".", "city", "=", "\"\"", "\n", "", "", "if", "self", ".", "labelPath", ":", "\n", "            ", "self", ".", "labelPath", "=", "os", ".", "path", ".", "normpath", "(", "self", ".", "labelPath", ")", "\n", "\n", "", "if", "self", ".", "correctionPath", ":", "\n", "            ", "self", ".", "correctionPath", "=", "os", ".", "path", ".", "normpath", "(", "self", ".", "correctionPath", ")", "\n", "\n", "", "if", "self", ".", "city", ":", "\n", "            ", "self", ".", "cityName", "==", "os", ".", "path", ".", "basename", "(", "self", ".", "city", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isfile", "(", "self", ".", "currentFile", ")", "or", "os", ".", "path", ".", "dirname", "(", "self", ".", "currentFile", ")", "!=", "self", ".", "city", ":", "\n", "            ", "self", ".", "currentFile", "=", "\"\"", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isfile", "(", "self", ".", "currentLabelFile", ")", "or", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "self", ".", "labelPath", ",", "self", ".", "cityName", ")", ")", "or", "os", ".", "path", ".", "dirname", "(", "self", ".", "currentLabelFile", ")", "!=", "os", ".", "path", ".", "join", "(", "self", ".", "labelPath", ",", "self", ".", "cityName", ")", ":", "\n", "            ", "self", ".", "currentLabelFile", "=", "\"\"", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isfile", "(", "self", ".", "currentCorrectionFile", ")", "or", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "self", ".", "correctionPath", ",", "self", ".", "cityName", ")", ")", "or", "os", ".", "path", ".", "dirname", "(", "self", ".", "currentCorrectionFile", ")", "!=", "os", ".", "path", ".", "join", "(", "self", ".", "correctionPath", ",", "self", ".", "cityName", ")", ":", "\n", "            ", "self", ".", "currentCorrectionFile", "=", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.configuration.save": [[142, 146], ["open", "f.write", "json.dumps"], "methods", ["None"], ["", "", "def", "save", "(", "self", ",", "filename", ")", ":", "\n", "        ", "with", "open", "(", "filename", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "json", ".", "dumps", "(", "self", ".", "__dict__", ",", "\n", "default", "=", "lambda", "o", ":", "o", ".", "__dict__", ",", "sort_keys", "=", "True", ",", "indent", "=", "4", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CorrectionBox.__init__": [[156, 163], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "rect", "=", "None", ",", "annotation", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "type", "=", "CorrectionBox", ".", "types", ".", "TO_CORRECT", "\n", "self", ".", "bbox", "=", "rect", "\n", "self", ".", "annotation", "=", "annotation", "\n", "self", ".", "selected", "=", "False", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CorrectionBox.get_colour": [[164, 173], ["PyQt5.QtGui.QColor", "PyQt5.QtGui.QColor", "PyQt5.QtGui.QColor", "PyQt5.QtGui.QColor"], "methods", ["None"], ["", "def", "get_colour", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "type", "==", "CorrectionBox", ".", "types", ".", "TO_CORRECT", ":", "\n", "            ", "return", "QtGui", ".", "QColor", "(", "255", ",", "0", ",", "0", ")", "\n", "", "elif", "self", ".", "type", "==", "CorrectionBox", ".", "types", ".", "TO_REVIEW", ":", "\n", "            ", "return", "QtGui", ".", "QColor", "(", "255", ",", "255", ",", "0", ")", "\n", "", "elif", "self", ".", "type", "==", "CorrectionBox", ".", "types", ".", "RESOLVED", ":", "\n", "            ", "return", "QtGui", ".", "QColor", "(", "0", ",", "255", ",", "0", ")", "\n", "", "elif", "self", ".", "type", "==", "CorrectionBox", ".", "types", ".", "QUESTION", ":", "\n", "            ", "return", "QtGui", ".", "QColor", "(", "0", ",", "0", ",", "255", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CorrectionBox.select": [[174, 178], ["None"], "methods", ["None"], ["", "", "def", "select", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "selected", ":", "\n", "            ", "self", ".", "selected", "=", "True", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CorrectionBox.unselect": [[179, 183], ["None"], "methods", ["None"], ["", "def", "unselect", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "selected", ":", "\n", "            ", "self", ".", "selected", "=", "False", "\n", "", "return", "\n", "# Read the information from the given object node in an XML file", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CorrectionBox.readFromXMLNode": [[186, 200], ["correctionNode.find", "int", "correctionNode.find", "correctionNode.find", "float", "float", "float", "float", "PyQt5.QtCore.QRectF", "correctionNode.find.find", "correctionNode.find.find", "correctionNode.find.find", "correctionNode.find.find"], "methods", ["None"], ["", "def", "readFromXMLNode", "(", "self", ",", "correctionNode", ")", ":", "\n", "        ", "if", "not", "correctionNode", ".", "tag", "==", "'correction'", ":", "\n", "            ", "return", "\n", "\n", "", "typeNode", "=", "correctionNode", ".", "find", "(", "'type'", ")", "\n", "self", ".", "type", "=", "int", "(", "typeNode", ".", "text", ")", "\n", "annotationNode", "=", "correctionNode", ".", "find", "(", "'annotation'", ")", "\n", "self", ".", "annotation", "=", "annotationNode", ".", "text", "\n", "bboxNode", "=", "correctionNode", ".", "find", "(", "'bbox'", ")", "\n", "x", "=", "float", "(", "bboxNode", ".", "find", "(", "'x'", ")", ".", "text", ")", "\n", "y", "=", "float", "(", "bboxNode", ".", "find", "(", "'y'", ")", ".", "text", ")", "\n", "width", "=", "float", "(", "bboxNode", ".", "find", "(", "'width'", ")", ".", "text", ")", "\n", "height", "=", "float", "(", "bboxNode", ".", "find", "(", "'height'", ")", ".", "text", ")", "\n", "self", ".", "bbox", "=", "QtCore", ".", "QRectF", "(", "x", ",", "y", ",", "width", ",", "height", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CorrectionBox.appendToXMLNode": [[204, 238], ["xml.SubElement", "xml.SubElement", "str", "xml.SubElement", "str", "xml.SubElement", "xml.SubElement", "xml.SubElement", "str", "str", "xml.SubElement", "xml.SubElement", "str", "str", "int", "int", "int", "int", "int", "round", "round", "round", "round", "cityscapesLabelTool.CorrectionBox.bbox.x", "cityscapesLabelTool.CorrectionBox.bbox.y", "cityscapesLabelTool.CorrectionBox.bbox.width", "cityscapesLabelTool.CorrectionBox.bbox.height"], "methods", ["None"], ["", "def", "appendToXMLNode", "(", "self", ",", "node", ")", ":", "\n", "\n", "# New object node", "\n", "        ", "correctionNode", "=", "ET", ".", "SubElement", "(", "node", ",", "'correction'", ")", "\n", "correctionNode", ".", "tail", "=", "\"\\n\"", "\n", "correctionNode", ".", "text", "=", "\"\\n\"", "\n", "\n", "# Name node", "\n", "typeNode", "=", "ET", ".", "SubElement", "(", "correctionNode", ",", "'type'", ")", "\n", "typeNode", ".", "tail", "=", "\"\\n\"", "\n", "typeNode", ".", "text", "=", "str", "(", "int", "(", "self", ".", "type", ")", ")", "\n", "\n", "# Deleted node", "\n", "annotationNode", "=", "ET", ".", "SubElement", "(", "correctionNode", ",", "'annotation'", ")", "\n", "annotationNode", ".", "tail", "=", "\"\\n\"", "\n", "annotationNode", ".", "text", "=", "str", "(", "self", ".", "annotation", ")", "\n", "\n", "# Polygon node", "\n", "bboxNode", "=", "ET", ".", "SubElement", "(", "correctionNode", ",", "'bbox'", ")", "\n", "bboxNode", ".", "text", "=", "\"\\n\"", "\n", "bboxNode", ".", "tail", "=", "\"\\n\"", "\n", "\n", "xNode", "=", "ET", ".", "SubElement", "(", "bboxNode", ",", "'x'", ")", "\n", "xNode", ".", "tail", "=", "\"\\n\"", "\n", "yNode", "=", "ET", ".", "SubElement", "(", "bboxNode", ",", "'y'", ")", "\n", "yNode", ".", "tail", "=", "\"\\n\"", "\n", "xNode", ".", "text", "=", "str", "(", "int", "(", "round", "(", "self", ".", "bbox", ".", "x", "(", ")", ")", ")", ")", "\n", "yNode", ".", "text", "=", "str", "(", "int", "(", "round", "(", "self", ".", "bbox", ".", "y", "(", ")", ")", ")", ")", "\n", "wNode", "=", "ET", ".", "SubElement", "(", "bboxNode", ",", "'width'", ")", "\n", "wNode", ".", "tail", "=", "\"\\n\"", "\n", "hNode", "=", "ET", ".", "SubElement", "(", "bboxNode", ",", "'height'", ")", "\n", "hNode", ".", "tail", "=", "\"\\n\"", "\n", "wNode", ".", "text", "=", "str", "(", "int", "(", "round", "(", "self", ".", "bbox", ".", "width", "(", ")", ")", ")", ")", "\n", "hNode", ".", "text", "=", "str", "(", "int", "(", "round", "(", "self", ".", "bbox", ".", "height", "(", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.__init__": [[252, 381], ["PyQt5.QtWidgets.QMainWindow.__init__", "os.path.dirname", "os.path.join", "cityscapesLabelTool.configuration", "cityscapesLabelTool.CityscapesLabelTool.config.load", "PyQt5.QtGui.QImage", "PyQt5.QtGui.QPolygonF", "cityscapesLabelTool.CityscapesLabelTool.initUI", "cityscapesLabelTool.CityscapesLabelTool.deselectAllObjects", "cityscapesLabelTool.CityscapesLabelTool.clearPolygon", "cityscapesLabelTool.CityscapesLabelTool.clearChanges", "cityscapesLabelTool.CityscapesLabelTool.loadCity", "cityscapesLabelTool.CityscapesLabelTool.imageChanged", "print"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.configuration.load", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.initUI", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.deselectAllObjects", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.clearPolygon", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.clearChanges", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.loadCity", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.imageChanged"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "# Construct base class", "\n", "        ", "super", "(", "CityscapesLabelTool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# The filename of where the config is saved and loaded", "\n", "configDir", "=", "os", ".", "path", ".", "dirname", "(", "__file__", ")", "\n", "self", ".", "configFile", "=", "os", ".", "path", ".", "join", "(", "configDir", ",", "\"cityscapesLabelTool.conf\"", ")", "\n", "\n", "# This is the configuration.", "\n", "self", ".", "config", "=", "configuration", "(", ")", "\n", "self", ".", "config", ".", "load", "(", "self", ".", "configFile", ")", "\n", "\n", "# Other member variables", "\n", "\n", "# The width that we actually use to show the image", "\n", "self", ".", "w", "=", "0", "\n", "# The height that we actually use to show the image", "\n", "self", ".", "h", "=", "0", "\n", "# The horizontal offset where we start drawing within the widget", "\n", "self", ".", "xoff", "=", "0", "\n", "# The vertical offset where we start drawing withing the widget", "\n", "self", ".", "yoff", "=", "0", "\n", "# A gap that we  leave around the image as little border", "\n", "self", ".", "bordergap", "=", "20", "\n", "# The scale that was used, ie", "\n", "# self.w = self.scale * self.image.width()", "\n", "# self.h = self.scale * self.image.height()", "\n", "self", ".", "scale", "=", "1.0", "\n", "# Filenames of all images in current city", "\n", "self", ".", "images", "=", "[", "]", "\n", "# Image extension", "\n", "self", ".", "imageExt", "=", "\"_leftImg8bit.png\"", "\n", "# Ground truth extension", "\n", "self", ".", "gtExt", "=", "\"{}_polygons.json\"", "\n", "# Current image as QImage", "\n", "self", ".", "image", "=", "QtGui", ".", "QImage", "(", ")", "\n", "# Index of the current image within the city folder", "\n", "self", ".", "idx", "=", "0", "\n", "# All annotated objects in current image", "\n", "self", ".", "annotation", "=", "None", "\n", "# The XML ElementTree representing the corrections for the current image", "\n", "self", ".", "correctionXML", "=", "None", "\n", "# A list of changes that we did on the current annotation", "\n", "# Each change is simply a descriptive string", "\n", "self", ".", "changes", "=", "[", "]", "\n", "# The current object the mouse points to. It's index in self.annotation.objects", "\n", "self", ".", "mouseObj", "=", "-", "1", "\n", "# The currently selected objects. Their index in self.annotation.objects", "\n", "self", ".", "selObjs", "=", "[", "]", "\n", "# The objects that are highlighted. List of object instances", "\n", "self", ".", "highlightObjs", "=", "[", "]", "\n", "# A label that is selected for highlighting", "\n", "self", ".", "highlightObjLabel", "=", "None", "\n", "# Texture for highlighting", "\n", "self", ".", "highlightTexture", "=", "None", "\n", "# The position of the mouse", "\n", "self", ".", "mousePos", "=", "None", "\n", "# TODO: NEEDS BETTER EXPLANATION/ORGANISATION", "\n", "self", ".", "mousePosOrig", "=", "None", "\n", "# The position of the mouse scaled to label coordinates", "\n", "self", ".", "mousePosScaled", "=", "None", "\n", "# If the mouse is outside of the image", "\n", "self", ".", "mouseOutsideImage", "=", "True", "\n", "# The position of the mouse upon enabling the zoom window", "\n", "self", ".", "mousePosOnZoom", "=", "None", "\n", "# The button state of the mouse", "\n", "self", ".", "mouseButtons", "=", "0", "\n", "# A list of objects with changed layer", "\n", "self", ".", "changedLayer", "=", "[", "]", "\n", "# A list of objects with changed polygon", "\n", "self", ".", "changedPolygon", "=", "[", "]", "\n", "# A polygon that is drawn by the user", "\n", "self", ".", "drawPoly", "=", "QtGui", ".", "QPolygonF", "(", ")", "\n", "# Treat the polygon as being closed", "\n", "self", ".", "drawPolyClosed", "=", "False", "\n", "# A point of this poly that is dragged", "\n", "self", ".", "draggedPt", "=", "-", "1", "\n", "# A list of toolbar actions that need an image", "\n", "self", ".", "actImage", "=", "[", "]", "\n", "# A list of toolbar actions that need an image that is not the first", "\n", "self", ".", "actImageNotFirst", "=", "[", "]", "\n", "# A list of toolbar actions that need an image that is not the last", "\n", "self", ".", "actImageNotLast", "=", "[", "]", "\n", "# A list of toolbar actions that need changes", "\n", "self", ".", "actChanges", "=", "[", "]", "\n", "# A list of toolbar actions that need a drawn polygon or selected objects", "\n", "self", ".", "actPolyOrSelObj", "=", "[", "]", "\n", "# A list of toolbar actions that need a closed drawn polygon", "\n", "self", ".", "actClosedPoly", "=", "[", "]", "\n", "# A list of toolbar actions that need selected objects", "\n", "self", ".", "actSelObj", "=", "[", "]", "\n", "# A list of toolbar actions that need a single active selected object", "\n", "self", ".", "singleActSelObj", "=", "[", "]", "\n", "# Toggle status of auto-doing screenshots", "\n", "self", ".", "screenshotToggleState", "=", "False", "\n", "# Toggle status of the play icon", "\n", "self", ".", "playState", "=", "False", "\n", "# Temporary zero transparency", "\n", "self", ".", "transpTempZero", "=", "False", "\n", "\n", "# Toggle correction mode on and off", "\n", "self", ".", "correctAction", "=", "[", "]", "\n", "self", ".", "corrections", "=", "[", "]", "\n", "self", ".", "selected_correction", "=", "-", "1", "\n", "\n", "self", ".", "in_progress_bbox", "=", "None", "\n", "self", ".", "in_progress_correction", "=", "None", "\n", "self", ".", "mousePressEvent", "=", "[", "]", "\n", "\n", "# Default label", "\n", "self", ".", "defaultLabel", "=", "'static'", "\n", "if", "not", "self", ".", "defaultLabel", "in", "name2label", ":", "\n", "            ", "print", "(", "'The {0} label is missing in the internal label definitions.'", ".", "format", "(", "\n", "self", ".", "defaultLabel", ")", ")", "\n", "return", "\n", "# Last selected label", "\n", "", "self", ".", "lastLabel", "=", "self", ".", "defaultLabel", "\n", "\n", "# Setup the GUI", "\n", "self", ".", "initUI", "(", ")", "\n", "\n", "# Initially clear stuff", "\n", "self", ".", "deselectAllObjects", "(", ")", "\n", "self", ".", "clearPolygon", "(", ")", "\n", "self", ".", "clearChanges", "(", ")", "\n", "\n", "# If we already know a city from the saved config -> load it", "\n", "self", ".", "loadCity", "(", ")", "\n", "self", ".", "imageChanged", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.__del__": [[383, 385], ["cityscapesLabelTool.CityscapesLabelTool.config.save"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.save"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "config", ".", "save", "(", "self", ".", "configFile", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.initUI": [[387, 626], ["cityscapesLabelTool.CityscapesLabelTool.addToolBar", "os.path.join", "PyQt5.QtWidgets.QAction", "PyQt5.QtWidgets.QAction.setShortcuts", "cityscapesLabelTool.CityscapesLabelTool.setTip", "PyQt5.QtWidgets.QAction.triggered.connect", "cityscapesLabelTool.CityscapesLabelTool.toolbar.addAction", "PyQt5.QtWidgets.QAction", "PyQt5.QtWidgets.QAction.setShortcut", "PyQt5.QtWidgets.QAction.setStatusTip", "PyQt5.QtWidgets.QAction.triggered.connect", "cityscapesLabelTool.CityscapesLabelTool.toolbar.addAction", "cityscapesLabelTool.CityscapesLabelTool.actImageNotFirst.append", "PyQt5.QtWidgets.QAction", "PyQt5.QtWidgets.QAction.setShortcut", "cityscapesLabelTool.CityscapesLabelTool.setTip", "PyQt5.QtWidgets.QAction.triggered.connect", "cityscapesLabelTool.CityscapesLabelTool.toolbar.addAction", "cityscapesLabelTool.CityscapesLabelTool.actImageNotLast.append", "PyQt5.QtWidgets.QAction", "PyQt5.QtWidgets.QAction.setShortcut", "PyQt5.QtWidgets.QAction.setCheckable", "PyQt5.QtWidgets.QAction.setChecked", "cityscapesLabelTool.CityscapesLabelTool.setTip", "PyQt5.QtWidgets.QAction.triggered.connect", "cityscapesLabelTool.CityscapesLabelTool.toolbar.addAction", "cityscapesLabelTool.CityscapesLabelTool.actImageNotLast.append", "PyQt5.QtWidgets.QAction", "PyQt5.QtWidgets.QAction.setShortcut", "cityscapesLabelTool.CityscapesLabelTool.setTip", "PyQt5.QtWidgets.QAction.triggered.connect", "cityscapesLabelTool.CityscapesLabelTool.toolbar.addAction", "cityscapesLabelTool.CityscapesLabelTool.actImage.append", "PyQt5.QtWidgets.QAction", "PyQt5.QtWidgets.QAction.setShortcut", "cityscapesLabelTool.CityscapesLabelTool.setTip", "PyQt5.QtWidgets.QAction.triggered.connect", "cityscapesLabelTool.CityscapesLabelTool.toolbar.addAction", "cityscapesLabelTool.CityscapesLabelTool.actChanges.append", "PyQt5.QtWidgets.QAction", "PyQt5.QtWidgets.QAction.setShortcuts", "cityscapesLabelTool.CityscapesLabelTool.setTip", "PyQt5.QtWidgets.QAction.triggered.connect", "cityscapesLabelTool.CityscapesLabelTool.toolbar.addAction", "cityscapesLabelTool.CityscapesLabelTool.actPolyOrSelObj.append", "PyQt5.QtWidgets.QAction", "PyQt5.QtWidgets.QAction.setShortcuts", "cityscapesLabelTool.CityscapesLabelTool.setTip", "PyQt5.QtWidgets.QAction.triggered.connect", "cityscapesLabelTool.CityscapesLabelTool.toolbar.addAction", "cityscapesLabelTool.CityscapesLabelTool.actClosedPoly.append", "PyQt5.QtWidgets.QAction", "PyQt5.QtWidgets.QAction.setShortcuts", "cityscapesLabelTool.CityscapesLabelTool.setTip", "PyQt5.QtWidgets.QAction.triggered.connect", "cityscapesLabelTool.CityscapesLabelTool.toolbar.addAction", "cityscapesLabelTool.CityscapesLabelTool.actSelObj.append", "PyQt5.QtWidgets.QAction", "PyQt5.QtWidgets.QAction.setShortcut", "cityscapesLabelTool.CityscapesLabelTool.setTip", "PyQt5.QtWidgets.QAction.triggered.connect", "cityscapesLabelTool.CityscapesLabelTool.toolbar.addAction", "cityscapesLabelTool.CityscapesLabelTool.actChanges.append", "PyQt5.QtWidgets.QAction", "PyQt5.QtWidgets.QAction.setShortcuts", "cityscapesLabelTool.CityscapesLabelTool.setTip", "PyQt5.QtWidgets.QAction.triggered.connect", "cityscapesLabelTool.CityscapesLabelTool.toolbar.addAction", "cityscapesLabelTool.CityscapesLabelTool.actSelObj.append", "PyQt5.QtWidgets.QAction", "PyQt5.QtWidgets.QAction.setShortcuts", "cityscapesLabelTool.CityscapesLabelTool.setTip", "PyQt5.QtWidgets.QAction.triggered.connect", "cityscapesLabelTool.CityscapesLabelTool.toolbar.addAction", "cityscapesLabelTool.CityscapesLabelTool.singleActSelObj.append", "PyQt5.QtWidgets.QAction", "PyQt5.QtWidgets.QAction.setShortcuts", "cityscapesLabelTool.CityscapesLabelTool.setTip", "PyQt5.QtWidgets.QAction.triggered.connect", "cityscapesLabelTool.CityscapesLabelTool.toolbar.addAction", "cityscapesLabelTool.CityscapesLabelTool.singleActSelObj.append", "PyQt5.QtWidgets.QAction", "PyQt5.QtWidgets.QAction.setShortcuts", "PyQt5.QtWidgets.QAction.setCheckable", "PyQt5.QtWidgets.QAction.setChecked", "cityscapesLabelTool.CityscapesLabelTool.setTip", "PyQt5.QtWidgets.QAction.toggled.connect", "cityscapesLabelTool.CityscapesLabelTool.toolbar.addAction", "cityscapesLabelTool.CityscapesLabelTool.actImage.append", "PyQt5.QtWidgets.QAction", "PyQt5.QtWidgets.QAction.setShortcuts", "PyQt5.QtWidgets.QAction.setCheckable", "PyQt5.QtWidgets.QAction.setChecked", "cityscapesLabelTool.CityscapesLabelTool.setTip", "PyQt5.QtWidgets.QAction.toggled.connect", "cityscapesLabelTool.CityscapesLabelTool.toolbar.addAction", "cityscapesLabelTool.CityscapesLabelTool.actImage.append", "PyQt5.QtWidgets.QAction", "PyQt5.QtWidgets.QAction.setShortcut", "cityscapesLabelTool.CityscapesLabelTool.setTip", "PyQt5.QtWidgets.QAction.triggered.connect", "cityscapesLabelTool.CityscapesLabelTool.toolbar.addAction", "PyQt5.QtWidgets.QAction", "PyQt5.QtWidgets.QAction.setShortcut", "cityscapesLabelTool.CityscapesLabelTool.setTip", "PyQt5.QtWidgets.QAction.triggered.connect", "cityscapesLabelTool.CityscapesLabelTool.toolbar.addAction", "PyQt5.QtWidgets.QAction", "PyQt5.QtWidgets.QAction.setShortcut", "cityscapesLabelTool.CityscapesLabelTool.setTip", "PyQt5.QtWidgets.QAction.triggered.connect", "cityscapesLabelTool.CityscapesLabelTool.toolbar.addAction", "cityscapesLabelTool.CityscapesLabelTool.actImage.append", "PyQt5.QtWidgets.QAction", "PyQt5.QtWidgets.QAction.setShortcut", "PyQt5.QtWidgets.QAction.setCheckable", "PyQt5.QtWidgets.QAction.setChecked", "cityscapesLabelTool.CityscapesLabelTool.setTip", "PyQt5.QtWidgets.QAction.toggled.connect", "cityscapesLabelTool.CityscapesLabelTool.toolbar.addAction", "cityscapesLabelTool.CityscapesLabelTool.actImage.append", "PyQt5.QtWidgets.QAction", "PyQt5.QtWidgets.QAction.setShortcut", "cityscapesLabelTool.CityscapesLabelTool.setTip", "PyQt5.QtWidgets.QAction.triggered.connect", "cityscapesLabelTool.CityscapesLabelTool.toolbar.addAction", "PyQt5.QtWidgets.QAction", "cityscapesLabelTool.CityscapesLabelTool.correctAction.setShortcut", "cityscapesLabelTool.CityscapesLabelTool.correctAction.setCheckable", "cityscapesLabelTool.CityscapesLabelTool.correctAction.setChecked", "cityscapesLabelTool.CityscapesLabelTool.setTip", "cityscapesLabelTool.CityscapesLabelTool.correctAction.triggered.connect", "cityscapesLabelTool.CityscapesLabelTool.toolbar.addAction", "PyQt5.QtWidgets.QAction", "PyQt5.QtWidgets.QAction.setShortcut", "cityscapesLabelTool.CityscapesLabelTool.setTip", "PyQt5.QtWidgets.QAction.triggered.connect", "cityscapesLabelTool.CityscapesLabelTool.toolbar.addAction", "PyQt5.QtWidgets.QAction", "cityscapesLabelTool.CityscapesLabelTool.setTip", "PyQt5.QtWidgets.QAction.triggered.connect", "cityscapesLabelTool.CityscapesLabelTool.toolbar.addAction", "cityscapesLabelTool.CityscapesLabelTool.statusBar().showMessage", "cityscapesLabelTool.CityscapesLabelTool.setMouseTracking", "cityscapesLabelTool.CityscapesLabelTool.toolbar.setMouseTracking", "PyQt5.QtWidgets.QDesktopWidget().screenGeometry", "cityscapesLabelTool.CityscapesLabelTool.resize", "cityscapesLabelTool.CityscapesLabelTool.setWindowTitle", "cityscapesLabelTool.CityscapesLabelTool.show", "os.path.dirname", "PyQt5.QtGui.QIcon", "PyQt5.QtGui.QIcon", "PyQt5.QtGui.QIcon", "PyQt5.QtGui.QIcon", "PyQt5.QtGui.QIcon", "PyQt5.QtGui.QIcon", "PyQt5.QtGui.QIcon", "PyQt5.QtGui.QIcon", "PyQt5.QtGui.QIcon", "PyQt5.QtGui.QIcon", "PyQt5.QtGui.QIcon", "PyQt5.QtGui.QIcon", "PyQt5.QtGui.QIcon", "PyQt5.QtGui.QIcon", "PyQt5.QtGui.QIcon", "PyQt5.QtGui.QIcon", "PyQt5.QtGui.QIcon", "PyQt5.QtGui.QIcon", "PyQt5.QtGui.QIcon", "PyQt5.QtGui.QIcon", "PyQt5.QtGui.QIcon", "cityscapesLabelTool.CityscapesLabelTool.correctAction.setIcon", "PyQt5.QtGui.QIcon", "PyQt5.QtGui.QIcon", "PyQt5.QtWidgets.QDesktopWidget().screenGeometry.width", "PyQt5.QtWidgets.QDesktopWidget().screenGeometry.height", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "PyQt5.QtGui.QIcon", "os.path.join", "os.path.join", "cityscapesLabelTool.CityscapesLabelTool.statusBar", "PyQt5.QtWidgets.QDesktopWidget", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.setTip", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.setTip", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.setTip", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.setTip", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.setTip", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.setTip", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.setTip", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.setTip", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.setTip", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.setTip", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.setTip", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.setTip", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.setTip", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.setTip", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.setTip", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.setTip", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.setTip", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.setTip", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.setTip", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.setTip", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.setTip", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.setTip", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.datasets.resize"], ["", "def", "initUI", "(", "self", ")", ":", "\n", "# Create a toolbar", "\n", "        ", "self", ".", "toolbar", "=", "self", ".", "addToolBar", "(", "'Tools'", ")", "\n", "\n", "# Add the tool buttons", "\n", "iconDir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "'icons'", ")", "\n", "\n", "# Loading a new city", "\n", "loadAction", "=", "QtWidgets", ".", "QAction", "(", "QtGui", ".", "QIcon", "(", "\n", "os", ".", "path", ".", "join", "(", "iconDir", ",", "'open.png'", ")", ")", ",", "'&Tools'", ",", "self", ")", "\n", "loadAction", ".", "setShortcuts", "(", "[", "'o'", "]", ")", "\n", "self", ".", "setTip", "(", "loadAction", ",", "'Open city'", ")", "\n", "loadAction", ".", "triggered", ".", "connect", "(", "self", ".", "selectCity", ")", "\n", "self", ".", "toolbar", ".", "addAction", "(", "loadAction", ")", "\n", "\n", "# Open previous image", "\n", "backAction", "=", "QtWidgets", ".", "QAction", "(", "QtGui", ".", "QIcon", "(", "\n", "os", ".", "path", ".", "join", "(", "iconDir", ",", "'back.png'", ")", ")", ",", "'&Tools'", ",", "self", ")", "\n", "backAction", ".", "setShortcut", "(", "'left'", ")", "\n", "backAction", ".", "setStatusTip", "(", "'Previous image'", ")", "\n", "backAction", ".", "triggered", ".", "connect", "(", "self", ".", "prevImage", ")", "\n", "self", ".", "toolbar", ".", "addAction", "(", "backAction", ")", "\n", "self", ".", "actImageNotFirst", ".", "append", "(", "backAction", ")", "\n", "\n", "# Open next image", "\n", "nextAction", "=", "QtWidgets", ".", "QAction", "(", "QtGui", ".", "QIcon", "(", "\n", "os", ".", "path", ".", "join", "(", "iconDir", ",", "'next.png'", ")", ")", ",", "'&Tools'", ",", "self", ")", "\n", "nextAction", ".", "setShortcut", "(", "'right'", ")", "\n", "self", ".", "setTip", "(", "nextAction", ",", "'Next image'", ")", "\n", "nextAction", ".", "triggered", ".", "connect", "(", "self", ".", "nextImage", ")", "\n", "self", ".", "toolbar", ".", "addAction", "(", "nextAction", ")", "\n", "self", ".", "actImageNotLast", ".", "append", "(", "nextAction", ")", "\n", "\n", "# Play", "\n", "playAction", "=", "QtWidgets", ".", "QAction", "(", "QtGui", ".", "QIcon", "(", "\n", "os", ".", "path", ".", "join", "(", "iconDir", ",", "'play.png'", ")", ")", ",", "'&Tools'", ",", "self", ")", "\n", "playAction", ".", "setShortcut", "(", "' '", ")", "\n", "playAction", ".", "setCheckable", "(", "True", ")", "\n", "playAction", ".", "setChecked", "(", "False", ")", "\n", "self", ".", "setTip", "(", "playAction", ",", "'Play all images'", ")", "\n", "playAction", ".", "triggered", ".", "connect", "(", "self", ".", "playImages", ")", "\n", "self", ".", "toolbar", ".", "addAction", "(", "playAction", ")", "\n", "self", ".", "actImageNotLast", ".", "append", "(", "playAction", ")", "\n", "self", ".", "playAction", "=", "playAction", "\n", "\n", "# Select image", "\n", "selImageAction", "=", "QtWidgets", ".", "QAction", "(", "QtGui", ".", "QIcon", "(", "\n", "os", ".", "path", ".", "join", "(", "iconDir", ",", "'shuffle.png'", ")", ")", ",", "'&Tools'", ",", "self", ")", "\n", "selImageAction", ".", "setShortcut", "(", "'i'", ")", "\n", "self", ".", "setTip", "(", "selImageAction", ",", "'Select image'", ")", "\n", "selImageAction", ".", "triggered", ".", "connect", "(", "self", ".", "selectImage", ")", "\n", "self", ".", "toolbar", ".", "addAction", "(", "selImageAction", ")", "\n", "self", ".", "actImage", ".", "append", "(", "selImageAction", ")", "\n", "\n", "# Save the current image", "\n", "saveAction", "=", "QtWidgets", ".", "QAction", "(", "QtGui", ".", "QIcon", "(", "\n", "os", ".", "path", ".", "join", "(", "iconDir", ",", "'save.png'", ")", ")", ",", "'&Tools'", ",", "self", ")", "\n", "saveAction", ".", "setShortcut", "(", "'s'", ")", "\n", "self", ".", "setTip", "(", "saveAction", ",", "'Save changes'", ")", "\n", "saveAction", ".", "triggered", ".", "connect", "(", "self", ".", "save", ")", "\n", "self", ".", "toolbar", ".", "addAction", "(", "saveAction", ")", "\n", "self", ".", "actChanges", ".", "append", "(", "saveAction", ")", "\n", "\n", "# Clear the currently edited polygon", "\n", "clearPolAction", "=", "QtWidgets", ".", "QAction", "(", "QtGui", ".", "QIcon", "(", "\n", "os", ".", "path", ".", "join", "(", "iconDir", ",", "'clearpolygon.png'", ")", ")", ",", "'&Tools'", ",", "self", ")", "\n", "clearPolAction", ".", "setShortcuts", "(", "[", "'q'", ",", "'Esc'", "]", ")", "\n", "self", ".", "setTip", "(", "clearPolAction", ",", "'Clear polygon'", ")", "\n", "clearPolAction", ".", "triggered", ".", "connect", "(", "self", ".", "clearPolygonAction", ")", "\n", "self", ".", "toolbar", ".", "addAction", "(", "clearPolAction", ")", "\n", "self", ".", "actPolyOrSelObj", ".", "append", "(", "clearPolAction", ")", "\n", "\n", "# Create new object from drawn polygon", "\n", "newObjAction", "=", "QtWidgets", ".", "QAction", "(", "QtGui", ".", "QIcon", "(", "\n", "os", ".", "path", ".", "join", "(", "iconDir", ",", "'newobject.png'", ")", ")", ",", "'&Tools'", ",", "self", ")", "\n", "newObjAction", ".", "setShortcuts", "(", "[", "'n'", "]", ")", "\n", "self", ".", "setTip", "(", "newObjAction", ",", "'New object'", ")", "\n", "newObjAction", ".", "triggered", ".", "connect", "(", "self", ".", "newObject", ")", "\n", "self", ".", "toolbar", ".", "addAction", "(", "newObjAction", ")", "\n", "self", ".", "actClosedPoly", ".", "append", "(", "newObjAction", ")", "\n", "\n", "# Delete the currently selected object", "\n", "deleteObjectAction", "=", "QtWidgets", ".", "QAction", "(", "QtGui", ".", "QIcon", "(", "\n", "os", ".", "path", ".", "join", "(", "iconDir", ",", "'deleteobject.png'", ")", ")", ",", "'&Tools'", ",", "self", ")", "\n", "deleteObjectAction", ".", "setShortcuts", "(", "[", "'d'", ",", "'delete'", "]", ")", "\n", "self", ".", "setTip", "(", "deleteObjectAction", ",", "'Delete object'", ")", "\n", "deleteObjectAction", ".", "triggered", ".", "connect", "(", "self", ".", "deleteObject", ")", "\n", "self", ".", "toolbar", ".", "addAction", "(", "deleteObjectAction", ")", "\n", "self", ".", "actSelObj", ".", "append", "(", "deleteObjectAction", ")", "\n", "\n", "# Undo changes in current image, ie. reload labels from file", "\n", "undoAction", "=", "QtWidgets", ".", "QAction", "(", "QtGui", ".", "QIcon", "(", "\n", "os", ".", "path", ".", "join", "(", "iconDir", ",", "'undo.png'", ")", ")", ",", "'&Tools'", ",", "self", ")", "\n", "undoAction", ".", "setShortcut", "(", "'u'", ")", "\n", "self", ".", "setTip", "(", "undoAction", ",", "'Undo all unsaved changes'", ")", "\n", "undoAction", ".", "triggered", ".", "connect", "(", "self", ".", "undo", ")", "\n", "self", ".", "toolbar", ".", "addAction", "(", "undoAction", ")", "\n", "self", ".", "actChanges", ".", "append", "(", "undoAction", ")", "\n", "\n", "# Modify the label of a selected object", "\n", "labelAction", "=", "QtWidgets", ".", "QAction", "(", "QtGui", ".", "QIcon", "(", "\n", "os", ".", "path", ".", "join", "(", "iconDir", ",", "'modify.png'", ")", ")", ",", "'&Tools'", ",", "self", ")", "\n", "labelAction", ".", "setShortcuts", "(", "[", "'m'", ",", "'l'", "]", ")", "\n", "self", ".", "setTip", "(", "labelAction", ",", "'Modify label'", ")", "\n", "labelAction", ".", "triggered", ".", "connect", "(", "self", ".", "modifyLabel", ")", "\n", "self", ".", "toolbar", ".", "addAction", "(", "labelAction", ")", "\n", "self", ".", "actSelObj", ".", "append", "(", "labelAction", ")", "\n", "\n", "# Move selected object a layer up", "\n", "layerUpAction", "=", "QtWidgets", ".", "QAction", "(", "QtGui", ".", "QIcon", "(", "\n", "os", ".", "path", ".", "join", "(", "iconDir", ",", "'layerup.png'", ")", ")", ",", "'&Tools'", ",", "self", ")", "\n", "layerUpAction", ".", "setShortcuts", "(", "[", "'Up'", "]", ")", "\n", "self", ".", "setTip", "(", "layerUpAction", ",", "'Move object a layer up'", ")", "\n", "layerUpAction", ".", "triggered", ".", "connect", "(", "self", ".", "layerUp", ")", "\n", "self", ".", "toolbar", ".", "addAction", "(", "layerUpAction", ")", "\n", "self", ".", "singleActSelObj", ".", "append", "(", "layerUpAction", ")", "\n", "\n", "# Move selected object a layer down", "\n", "layerDownAction", "=", "QtWidgets", ".", "QAction", "(", "QtGui", ".", "QIcon", "(", "\n", "os", ".", "path", ".", "join", "(", "iconDir", ",", "'layerdown.png'", ")", ")", ",", "'&Tools'", ",", "self", ")", "\n", "layerDownAction", ".", "setShortcuts", "(", "[", "'Down'", "]", ")", "\n", "self", ".", "setTip", "(", "layerDownAction", ",", "'Move object a layer down'", ")", "\n", "layerDownAction", ".", "triggered", ".", "connect", "(", "self", ".", "layerDown", ")", "\n", "self", ".", "toolbar", ".", "addAction", "(", "layerDownAction", ")", "\n", "self", ".", "singleActSelObj", ".", "append", "(", "layerDownAction", ")", "\n", "\n", "# Enable/disable zoom. Toggle button", "\n", "zoomAction", "=", "QtWidgets", ".", "QAction", "(", "QtGui", ".", "QIcon", "(", "\n", "os", ".", "path", ".", "join", "(", "iconDir", ",", "'zoom.png'", ")", ")", ",", "'&Tools'", ",", "self", ")", "\n", "zoomAction", ".", "setShortcuts", "(", "[", "'z'", "]", ")", "\n", "zoomAction", ".", "setCheckable", "(", "True", ")", "\n", "zoomAction", ".", "setChecked", "(", "self", ".", "config", ".", "zoom", ")", "\n", "self", ".", "setTip", "(", "zoomAction", ",", "'Enable/disable permanent zoom'", ")", "\n", "zoomAction", ".", "toggled", ".", "connect", "(", "self", ".", "zoomToggle", ")", "\n", "self", ".", "toolbar", ".", "addAction", "(", "zoomAction", ")", "\n", "self", ".", "actImage", ".", "append", "(", "zoomAction", ")", "\n", "\n", "# Highlight objects of a certain class", "\n", "highlightAction", "=", "QtWidgets", ".", "QAction", "(", "QtGui", ".", "QIcon", "(", "\n", "os", ".", "path", ".", "join", "(", "iconDir", ",", "'highlight.png'", ")", ")", ",", "'&Tools'", ",", "self", ")", "\n", "highlightAction", ".", "setShortcuts", "(", "[", "'g'", "]", ")", "\n", "highlightAction", ".", "setCheckable", "(", "True", ")", "\n", "highlightAction", ".", "setChecked", "(", "self", ".", "config", ".", "highlight", ")", "\n", "self", ".", "setTip", "(", "highlightAction", ",", "\n", "'Enable/disable highlight of certain object class'", ")", "\n", "highlightAction", ".", "toggled", ".", "connect", "(", "self", ".", "highlightClassToggle", ")", "\n", "self", ".", "toolbar", ".", "addAction", "(", "highlightAction", ")", "\n", "self", ".", "actImage", ".", "append", "(", "highlightAction", ")", "\n", "\n", "# Decrease transparency", "\n", "minusAction", "=", "QtWidgets", ".", "QAction", "(", "QtGui", ".", "QIcon", "(", "\n", "os", ".", "path", ".", "join", "(", "iconDir", ",", "'minus.png'", ")", ")", ",", "'&Tools'", ",", "self", ")", "\n", "minusAction", ".", "setShortcut", "(", "'-'", ")", "\n", "self", ".", "setTip", "(", "minusAction", ",", "'Decrease transparency'", ")", "\n", "minusAction", ".", "triggered", ".", "connect", "(", "self", ".", "minus", ")", "\n", "self", ".", "toolbar", ".", "addAction", "(", "minusAction", ")", "\n", "\n", "# Increase transparency", "\n", "plusAction", "=", "QtWidgets", ".", "QAction", "(", "QtGui", ".", "QIcon", "(", "\n", "os", ".", "path", ".", "join", "(", "iconDir", ",", "'plus.png'", ")", ")", ",", "'&Tools'", ",", "self", ")", "\n", "plusAction", ".", "setShortcut", "(", "'+'", ")", "\n", "self", ".", "setTip", "(", "plusAction", ",", "'Increase transparency'", ")", "\n", "plusAction", ".", "triggered", ".", "connect", "(", "self", ".", "plus", ")", "\n", "self", ".", "toolbar", ".", "addAction", "(", "plusAction", ")", "\n", "\n", "# Take a screenshot", "\n", "screenshotAction", "=", "QtWidgets", ".", "QAction", "(", "QtGui", ".", "QIcon", "(", "\n", "os", ".", "path", ".", "join", "(", "iconDir", ",", "'screenshot.png'", ")", ")", ",", "'&Tools'", ",", "self", ")", "\n", "screenshotAction", ".", "setShortcut", "(", "'t'", ")", "\n", "self", ".", "setTip", "(", "screenshotAction", ",", "'Take a screenshot'", ")", "\n", "screenshotAction", ".", "triggered", ".", "connect", "(", "self", ".", "screenshot", ")", "\n", "self", ".", "toolbar", ".", "addAction", "(", "screenshotAction", ")", "\n", "self", ".", "actImage", ".", "append", "(", "screenshotAction", ")", "\n", "\n", "# Take a screenshot in each loaded frame", "\n", "screenshotToggleAction", "=", "QtWidgets", ".", "QAction", "(", "QtGui", ".", "QIcon", "(", "\n", "os", ".", "path", ".", "join", "(", "iconDir", ",", "'screenshotToggle.png'", ")", ")", ",", "'&Tools'", ",", "self", ")", "\n", "screenshotToggleAction", ".", "setShortcut", "(", "'Ctrl+t'", ")", "\n", "screenshotToggleAction", ".", "setCheckable", "(", "True", ")", "\n", "screenshotToggleAction", ".", "setChecked", "(", "False", ")", "\n", "self", ".", "setTip", "(", "screenshotToggleAction", ",", "\n", "'Take a screenshot in each loaded frame'", ")", "\n", "screenshotToggleAction", ".", "toggled", ".", "connect", "(", "self", ".", "screenshotToggle", ")", "\n", "self", ".", "toolbar", ".", "addAction", "(", "screenshotToggleAction", ")", "\n", "self", ".", "actImage", ".", "append", "(", "screenshotToggleAction", ")", "\n", "\n", "# Display path to current image in message bar", "\n", "displayFilepathAction", "=", "QtWidgets", ".", "QAction", "(", "QtGui", ".", "QIcon", "(", "\n", "os", ".", "path", ".", "join", "(", "iconDir", ",", "'filepath.png'", ")", ")", ",", "'&Tools'", ",", "self", ")", "\n", "displayFilepathAction", ".", "setShortcut", "(", "'f'", ")", "\n", "self", ".", "setTip", "(", "displayFilepathAction", ",", "'Show path to current image'", ")", "\n", "displayFilepathAction", ".", "triggered", ".", "connect", "(", "self", ".", "displayFilepath", ")", "\n", "self", ".", "toolbar", ".", "addAction", "(", "displayFilepathAction", ")", "\n", "\n", "# Open correction mode", "\n", "self", ".", "correctAction", "=", "QtWidgets", ".", "QAction", "(", "QtGui", ".", "QIcon", "(", "\n", "os", ".", "path", ".", "join", "(", "iconDir", ",", "'checked6.png'", ")", ")", ",", "'&Tools'", ",", "self", ")", "\n", "self", ".", "correctAction", ".", "setShortcut", "(", "'c'", ")", "\n", "self", ".", "correctAction", ".", "setCheckable", "(", "True", ")", "\n", "self", ".", "correctAction", ".", "setChecked", "(", "self", ".", "config", ".", "correctionMode", ")", "\n", "if", "self", ".", "config", ".", "correctionMode", ":", "\n", "            ", "self", ".", "correctAction", ".", "setIcon", "(", "QtGui", ".", "QIcon", "(", "\n", "os", ".", "path", ".", "join", "(", "iconDir", ",", "'checked6_red.png'", ")", ")", ")", "\n", "", "self", ".", "setTip", "(", "self", ".", "correctAction", ",", "'Toggle correction mode'", ")", "\n", "self", ".", "correctAction", ".", "triggered", ".", "connect", "(", "self", ".", "toggleCorrectionMode", ")", "\n", "self", ".", "toolbar", ".", "addAction", "(", "self", ".", "correctAction", ")", "\n", "\n", "# Display help message", "\n", "helpAction", "=", "QtWidgets", ".", "QAction", "(", "QtGui", ".", "QIcon", "(", "\n", "os", ".", "path", ".", "join", "(", "iconDir", ",", "'help19.png'", ")", ")", ",", "'&Tools'", ",", "self", ")", "\n", "helpAction", ".", "setShortcut", "(", "'h'", ")", "\n", "self", ".", "setTip", "(", "helpAction", ",", "'Help'", ")", "\n", "helpAction", ".", "triggered", ".", "connect", "(", "self", ".", "displayHelpMessage", ")", "\n", "self", ".", "toolbar", ".", "addAction", "(", "helpAction", ")", "\n", "\n", "# Close the application", "\n", "exitAction", "=", "QtWidgets", ".", "QAction", "(", "QtGui", ".", "QIcon", "(", "\n", "os", ".", "path", ".", "join", "(", "iconDir", ",", "'exit.png'", ")", ")", ",", "'&Tools'", ",", "self", ")", "\n", "# exitAction.setShortcuts(['Esc'])", "\n", "self", ".", "setTip", "(", "exitAction", ",", "'Exit'", ")", "\n", "exitAction", ".", "triggered", ".", "connect", "(", "self", ".", "close", ")", "\n", "self", ".", "toolbar", ".", "addAction", "(", "exitAction", ")", "\n", "\n", "# The default text for the status bar", "\n", "self", ".", "defaultStatusbar", "=", "'Ready'", "\n", "# Create a statusbar. Init with default", "\n", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "self", ".", "defaultStatusbar", ")", "\n", "\n", "# Enable mouse move events", "\n", "self", ".", "setMouseTracking", "(", "True", ")", "\n", "self", ".", "toolbar", ".", "setMouseTracking", "(", "True", ")", "\n", "# Open in full screen", "\n", "screenShape", "=", "QtWidgets", ".", "QDesktopWidget", "(", ")", ".", "screenGeometry", "(", ")", "\n", "self", ".", "resize", "(", "screenShape", ".", "width", "(", ")", ",", "screenShape", ".", "height", "(", ")", ")", "\n", "# Set a title", "\n", "self", ".", "applicationTitle", "=", "'Cityscapes Label Tool v{}'", ".", "format", "(", "VERSION", ")", "\n", "self", ".", "setWindowTitle", "(", "self", ".", "applicationTitle", ")", "\n", "# And show the application", "\n", "self", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.selectCity": [[647, 731], ["cityscapesLabelTool.CityscapesLabelTool.statusBar().currentMessage", "sorted", "cityscapesLabelTool.CityscapesLabelTool.statusBar().showMessage", "glob.glob", "os.path.basename", "items.index", "PyQt5.QtWidgets.QInputDialog.getItem", "cityscapesLabelTool.CityscapesLabelTool.statusBar().showMessage", "PyQt5.QtWidgets.QMessageBox.information", "cityscapesLabelTool.CityscapesLabelTool.statusBar", "os.path.isdir", "os.path.join", "os.path.join", "glob.glob", "glob.glob.sort", "availableCities.extend", "cityscapesLabelTool.CityscapesLabelTool.statusBar", "os.path.normpath", "os.path.normpath", "os.path.normpath", "cityscapesLabelTool.CityscapesLabelTool.deselectAllObjects", "cityscapesLabelTool.CityscapesLabelTool.clearPolygon", "cityscapesLabelTool.CityscapesLabelTool.loadCity", "cityscapesLabelTool.CityscapesLabelTool.imageChanged", "sys.exit", "os.path.dirname", "os.path.join", "cityscapesLabelTool.CityscapesLabelTool.statusBar", "str", "os.path.join", "os.path.join", "os.path.join", "os.path.realpath", "item.split", "os.path.basename", "os.path.isdir"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.deselectAllObjects", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.clearPolygon", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.loadCity", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.imageChanged"], ["", "def", "selectCity", "(", "self", ")", ":", "\n", "# Reset the status bar to this message when leaving", "\n", "        ", "restoreMessage", "=", "self", ".", "statusBar", "(", ")", ".", "currentMessage", "(", ")", "\n", "\n", "csPath", "=", "self", ".", "config", ".", "csPath", "\n", "if", "not", "csPath", "or", "not", "os", ".", "path", ".", "isdir", "(", "csPath", ")", ":", "\n", "            ", "if", "'CITYSCAPES_DATASET'", "in", "os", ".", "environ", ":", "\n", "                ", "csPath", "=", "os", ".", "environ", "[", "'CITYSCAPES_DATASET'", "]", "\n", "", "else", ":", "\n", "                ", "csPath", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "\n", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", ",", "'..'", ",", "'..'", ")", "\n", "\n", "", "", "availableCities", "=", "[", "]", "\n", "annotations", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "csPath", ",", "'gt*'", ")", ")", ")", "\n", "annotations", "=", "[", "os", ".", "path", ".", "basename", "(", "a", ")", "for", "a", "in", "annotations", "]", "\n", "splits", "=", "[", "\"train_extra\"", ",", "\"train\"", ",", "\"val\"", ",", "\"test\"", "]", "\n", "for", "gt", "in", "annotations", ":", "\n", "            ", "for", "split", "in", "splits", ":", "\n", "                ", "cities", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "csPath", ",", "gt", ",", "split", ",", "'*'", ")", ")", "\n", "cities", ".", "sort", "(", ")", "\n", "availableCities", ".", "extend", "(", "\n", "[", "(", "split", ",", "gt", ",", "os", ".", "path", ".", "basename", "(", "c", ")", ")", "for", "c", "in", "cities", "if", "os", ".", "path", ".", "isdir", "(", "c", ")", "]", ")", "\n", "\n", "# List of possible labels", "\n", "", "", "items", "=", "[", "split", "+", "\", \"", "+", "gt", "+", "\", \"", "+", "\n", "city", "for", "(", "split", ",", "gt", ",", "city", ")", "in", "availableCities", "]", "\n", "# default", "\n", "previousItem", "=", "self", ".", "config", ".", "split", "+", "\", \"", "+", "self", ".", "config", ".", "gtType", "+", "\", \"", "+", "self", ".", "config", ".", "cityName", "\n", "default", "=", "0", "\n", "if", "previousItem", "in", "items", ":", "\n", "            ", "default", "=", "items", ".", "index", "(", "previousItem", ")", "\n", "\n", "# Specify title", "\n", "", "dlgTitle", "=", "\"Select city\"", "\n", "message", "=", "dlgTitle", "\n", "question", "=", "dlgTitle", "\n", "message", "=", "\"Select city for editing\"", "\n", "question", "=", "\"Which city would you like to edit?\"", "\n", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "message", ")", "\n", "\n", "if", "items", ":", "\n", "\n", "# Create and wait for dialog", "\n", "            ", "(", "item", ",", "ok", ")", "=", "QtWidgets", ".", "QInputDialog", ".", "getItem", "(", "\n", "self", ",", "dlgTitle", ",", "question", ",", "items", ",", "default", ",", "False", ")", "\n", "\n", "# Restore message", "\n", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "restoreMessage", ")", "\n", "\n", "if", "ok", "and", "item", ":", "\n", "                ", "(", "split", ",", "gt", ",", "city", ")", "=", "[", "str", "(", "i", ")", "for", "i", "in", "item", ".", "split", "(", "', '", ")", "]", "\n", "self", ".", "config", ".", "city", "=", "os", ".", "path", ".", "normpath", "(", "\n", "os", ".", "path", ".", "join", "(", "csPath", ",", "\"leftImg8bit\"", ",", "split", ",", "city", ")", ")", "\n", "self", ".", "config", ".", "cityName", "=", "city", "\n", "\n", "self", ".", "config", ".", "labelPath", "=", "os", ".", "path", ".", "normpath", "(", "\n", "os", ".", "path", ".", "join", "(", "csPath", ",", "gt", ",", "split", ",", "city", ")", ")", "\n", "self", ".", "config", ".", "correctionPath", "=", "os", ".", "path", ".", "normpath", "(", "\n", "os", ".", "path", ".", "join", "(", "csPath", ",", "gt", "+", "'_corrections'", ",", "split", ",", "city", ")", ")", "\n", "\n", "self", ".", "config", ".", "gtType", "=", "gt", "\n", "self", ".", "config", ".", "split", "=", "split", "\n", "\n", "self", ".", "deselectAllObjects", "(", ")", "\n", "self", ".", "clearPolygon", "(", ")", "\n", "self", ".", "loadCity", "(", ")", "\n", "self", ".", "imageChanged", "(", ")", "\n", "\n", "", "", "else", ":", "\n", "\n", "            ", "warning", "=", "\"\"", "\n", "warning", "+=", "\"The data was not found. Please:\\n\\n\"", "\n", "warning", "+=", "\" - make sure the scripts folder is in the Cityscapes root folder\\n\"", "\n", "warning", "+=", "\"or\\n\"", "\n", "warning", "+=", "\" - set CITYSCAPES_DATASET to the Cityscapes root folder\\n\"", "\n", "warning", "+=", "\"       e.g. 'export CITYSCAPES_DATASET=<root_path>'\\n\"", "\n", "\n", "reply", "=", "QtWidgets", ".", "QMessageBox", ".", "information", "(", "\n", "self", ",", "\"ERROR!\"", ",", "warning", ",", "QtWidgets", ".", "QMessageBox", ".", "Ok", ")", "\n", "if", "reply", "==", "QtWidgets", ".", "QMessageBox", ".", "Ok", ":", "\n", "                ", "sys", ".", "exit", "(", ")", "\n", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.prevImage": [[737, 745], ["cityscapesLabelTool.CityscapesLabelTool.checkAndSave", "cityscapesLabelTool.CityscapesLabelTool.imageChanged"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.checkAndSave", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.imageChanged"], ["", "def", "prevImage", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "images", ":", "\n", "            ", "return", "\n", "", "if", "self", ".", "idx", ">", "0", ":", "\n", "            ", "if", "self", ".", "checkAndSave", "(", ")", ":", "\n", "                ", "self", ".", "idx", "-=", "1", "\n", "self", ".", "imageChanged", "(", ")", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.nextImage": [[751, 765], ["cityscapesLabelTool.CityscapesLabelTool.checkAndSave", "PyQt5.QtCore.QTimer.singleShot", "len", "cityscapesLabelTool.CityscapesLabelTool.imageChanged", "cityscapesLabelTool.CityscapesLabelTool.playAction.setChecked"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.checkAndSave", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.imageChanged"], ["", "def", "nextImage", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "images", ":", "\n", "            ", "return", "\n", "", "if", "self", ".", "idx", "<", "len", "(", "self", ".", "images", ")", "-", "1", ":", "\n", "            ", "if", "self", ".", "checkAndSave", "(", ")", ":", "\n", "                ", "self", ".", "idx", "+=", "1", "\n", "self", ".", "imageChanged", "(", ")", "\n", "", "", "elif", "self", ".", "playState", ":", "\n", "            ", "self", ".", "playState", "=", "False", "\n", "self", ".", "playAction", ".", "setChecked", "(", "False", ")", "\n", "\n", "", "if", "self", ".", "playState", ":", "\n", "            ", "QtCore", ".", "QTimer", ".", "singleShot", "(", "0", ",", "self", ".", "nextImage", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.playImages": [[767, 771], ["PyQt5.QtCore.QTimer.singleShot"], "methods", ["None"], ["", "def", "playImages", "(", "self", ",", "status", ")", ":", "\n", "        ", "self", ".", "playState", "=", "status", "\n", "if", "self", ".", "playState", ":", "\n", "            ", "QtCore", ".", "QTimer", ".", "singleShot", "(", "0", ",", "self", ".", "nextImage", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.toggleCorrectionMode": [[774, 787], ["cityscapesLabelTool.CityscapesLabelTool.update", "os.path.join", "cityscapesLabelTool.CityscapesLabelTool.correctAction.setIcon", "os.path.join", "cityscapesLabelTool.CityscapesLabelTool.correctAction.setIcon", "os.path.dirname", "PyQt5.QtGui.QIcon", "os.path.dirname", "PyQt5.QtGui.QIcon", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.update"], ["", "", "def", "toggleCorrectionMode", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "config", ".", "correctionMode", ":", "\n", "            ", "self", ".", "config", ".", "correctionMode", "=", "True", "\n", "iconDir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "sys", ".", "argv", "[", "0", "]", ")", ",", "'icons'", ")", "\n", "self", ".", "correctAction", ".", "setIcon", "(", "QtGui", ".", "QIcon", "(", "\n", "os", ".", "path", ".", "join", "(", "iconDir", ",", "'checked6_red.png'", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "config", ".", "correctionMode", "=", "False", "\n", "iconDir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "sys", ".", "argv", "[", "0", "]", ")", ",", "'icons'", ")", "\n", "self", ".", "correctAction", ".", "setIcon", "(", "QtGui", ".", "QIcon", "(", "\n", "os", ".", "path", ".", "join", "(", "iconDir", ",", "'checked6.png'", ")", ")", ")", "\n", "", "self", ".", "update", "(", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.selectImage": [[795, 813], ["cityscapesLabelTool.CityscapesLabelTool.statusBar().showMessage", "PyQt5.QtWidgets.QInputDialog.getItem", "items.index", "cityscapesLabelTool.CityscapesLabelTool.statusBar().showMessage", "cityscapesLabelTool.CityscapesLabelTool.statusBar", "os.path.basename", "enumerate", "cityscapesLabelTool.CityscapesLabelTool.checkAndSave", "cityscapesLabelTool.CityscapesLabelTool.imageChanged", "cityscapesLabelTool.CityscapesLabelTool.statusBar"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.checkAndSave", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.imageChanged"], ["", "def", "selectImage", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "images", ":", "\n", "            ", "return", "\n", "\n", "", "dlgTitle", "=", "\"Select image to load\"", "\n", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "dlgTitle", ")", "\n", "items", "=", "[", "\"{}: {}\"", ".", "format", "(", "num", ",", "os", ".", "path", ".", "basename", "(", "i", ")", ")", "\n", "for", "(", "num", ",", "i", ")", "in", "enumerate", "(", "self", ".", "images", ")", "]", "\n", "(", "item", ",", "ok", ")", "=", "QtWidgets", ".", "QInputDialog", ".", "getItem", "(", "\n", "self", ",", "dlgTitle", ",", "\"Image\"", ",", "items", ",", "self", ".", "idx", ",", "False", ")", "\n", "if", "(", "ok", "and", "item", ")", ":", "\n", "            ", "idx", "=", "items", ".", "index", "(", "item", ")", "\n", "if", "idx", "!=", "self", ".", "idx", "and", "self", ".", "checkAndSave", "(", ")", ":", "\n", "                ", "self", ".", "idx", "=", "idx", "\n", "self", ".", "imageChanged", "(", ")", "\n", "", "", "else", ":", "\n", "# Restore the message", "\n", "            ", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "self", ".", "defaultStatusbar", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.save": [[816, 948], ["cityscapesLabelTool.CityscapesLabelTool.statusBar().showMessage", "cityscapesLabelTool.CityscapesLabelTool.image.width", "cityscapesLabelTool.CityscapesLabelTool.image.height", "cityscapesLabelTool.CityscapesLabelTool.clearChanges", "cityscapesLabelTool.CityscapesLabelTool.statusBar", "cityscapesLabelTool.CityscapesLabelTool.getLabelFilename", "cityscapesLabelTool.CityscapesLabelTool.getCorrectionFilename", "xml.Element", "xml.SubElement", "os.path.basename", "xml.SubElement", "xml.SubElement", "xml.SubElement", "xml.SubElement", "xml.SubElement", "xml.SubElement", "str", "xml.SubElement", "str", "xml.ElementTree", "os.path.isfile", "PyQt5.QtWidgets.QMessageBox", "PyQt5.QtWidgets.QMessageBox.setWindowTitle", "PyQt5.QtWidgets.QMessageBox.setText", "PyQt5.QtWidgets.QMessageBox.addButton", "PyQt5.QtWidgets.QMessageBox.addButton", "PyQt5.QtWidgets.QMessageBox.addButton", "PyQt5.QtWidgets.QMessageBox.setDefaultButton", "PyQt5.QtWidgets.QMessageBox.setIcon", "PyQt5.QtWidgets.QMessageBox.exec_", "cityscapesLabelTool.CityscapesLabelTool.image.height", "cityscapesLabelTool.CityscapesLabelTool.image.height", "correction.appendToXMLNode", "cityscapesLabelTool.CityscapesLabelTool.correctionXML.write", "PyQt5.QtWidgets.QMessageBox.clickedButton", "cityscapesLabelTool.CityscapesLabelTool.annotation.toJsonFile", "PyQt5.QtWidgets.QMessageBox.clickedButton"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.clearChanges", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.getLabelFilename", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.getCorrectionFilename", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CorrectionBox.appendToXMLNode", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.Annotation.toJsonFile"], ["", "", "def", "save", "(", "self", ")", ":", "\n", "# Status", "\n", "        ", "saved", "=", "False", "\n", "# Message to show at the status bar when done", "\n", "message", "=", "\"\"", "\n", "# Only save if there are changes, labels, an image filename and an image", "\n", "if", "self", ".", "changes", "and", "(", "self", ".", "annotation", "or", "self", ".", "corrections", ")", "and", "self", ".", "config", ".", "currentFile", "and", "self", ".", "image", ":", "\n", "            ", "if", "self", ".", "annotation", ":", "\n", "# set image dimensions", "\n", "                ", "self", ".", "annotation", ".", "imgWidth", "=", "self", ".", "image", ".", "width", "(", ")", "\n", "self", ".", "annotation", ".", "imgHeight", "=", "self", ".", "image", ".", "height", "(", ")", "\n", "\n", "# Determine the filename", "\n", "# If we have a loaded label file, then this is also the filename", "\n", "filename", "=", "self", ".", "config", ".", "currentLabelFile", "\n", "# If not, then generate one", "\n", "if", "not", "filename", ":", "\n", "                    ", "filename", "=", "self", ".", "getLabelFilename", "(", "True", ")", "\n", "\n", "", "if", "filename", ":", "\n", "                    ", "proceed", "=", "True", "\n", "# warn user that he is overwriting an old file", "\n", "if", "os", ".", "path", ".", "isfile", "(", "filename", ")", "and", "self", ".", "config", ".", "showSaveWarning", ":", "\n", "                        ", "msgBox", "=", "QtWidgets", ".", "QMessageBox", "(", "self", ")", "\n", "msgBox", ".", "setWindowTitle", "(", "\"Overwriting\"", ")", "\n", "msgBox", ".", "setText", "(", "\n", "\"Saving overwrites the original file and it cannot be reversed. Do you want to continue?\"", ")", "\n", "msgBox", ".", "addButton", "(", "QtWidgets", ".", "QMessageBox", ".", "Cancel", ")", "\n", "okAndNeverAgainButton", "=", "msgBox", ".", "addButton", "(", "\n", "'OK and never ask again'", ",", "QtWidgets", ".", "QMessageBox", ".", "AcceptRole", ")", "\n", "okButton", "=", "msgBox", ".", "addButton", "(", "QtWidgets", ".", "QMessageBox", ".", "Ok", ")", "\n", "msgBox", ".", "setDefaultButton", "(", "QtWidgets", ".", "QMessageBox", ".", "Ok", ")", "\n", "msgBox", ".", "setIcon", "(", "QtWidgets", ".", "QMessageBox", ".", "Warning", ")", "\n", "msgBox", ".", "exec_", "(", ")", "\n", "\n", "# User clicked on \"OK\"", "\n", "if", "msgBox", ".", "clickedButton", "(", ")", "==", "okButton", ":", "\n", "                            ", "pass", "\n", "# User clicked on \"OK and never ask again\"", "\n", "", "elif", "msgBox", ".", "clickedButton", "(", ")", "==", "okAndNeverAgainButton", ":", "\n", "                            ", "self", ".", "config", ".", "showSaveWarning", "=", "False", "\n", "", "else", ":", "\n", "# Do nothing", "\n", "                            ", "message", "+=", "\"Nothing saved, no harm has been done. \"", "\n", "proceed", "=", "False", "\n", "\n", "# Save JSON file", "\n", "", "", "if", "proceed", ":", "\n", "                        ", "try", ":", "\n", "                            ", "self", ".", "annotation", ".", "toJsonFile", "(", "filename", ")", "\n", "saved", "=", "True", "\n", "message", "+=", "\"Saved labels to {0} \"", ".", "format", "(", "filename", ")", "\n", "", "except", "IOError", "as", "e", ":", "\n", "                            ", "message", "+=", "\"Error writing labels to {0}. Message: {1} \"", ".", "format", "(", "\n", "filename", ",", "e", ".", "strerror", ")", "\n", "\n", "", "", "", "else", ":", "\n", "                    ", "message", "+=", "\"Error writing labels. Cannot generate a valid filename. \"", "\n", "", "", "if", "self", ".", "corrections", "or", "self", ".", "config", ".", "currentCorrectionFile", ":", "\n", "# Determine the filename", "\n", "# If we have a loaded label file, then this is also the filename", "\n", "                ", "filename", "=", "self", ".", "config", ".", "currentCorrectionFile", "\n", "# If not, then generate one", "\n", "if", "not", "filename", ":", "\n", "                    ", "filename", "=", "self", ".", "getCorrectionFilename", "(", "True", ")", "\n", "\n", "", "if", "filename", ":", "\n", "# Prepare the root", "\n", "                    ", "root", "=", "ET", ".", "Element", "(", "'correction'", ")", "\n", "root", ".", "text", "=", "\"\\n\"", "\n", "root", ".", "tail", "=", "\"\\n\"", "\n", "# Add the filename of the image that is annotated", "\n", "filenameNode", "=", "ET", ".", "SubElement", "(", "root", ",", "'filename'", ")", "\n", "filenameNode", ".", "text", "=", "os", ".", "path", ".", "basename", "(", "\n", "self", ".", "config", ".", "currentFile", ")", "\n", "filenameNode", ".", "tail", "=", "\"\\n\"", "\n", "# Add the folder where this image is located in", "\n", "# For compatibility with the LabelMe Tool, we need to use the folder", "\n", "# StereoDataset/cityName", "\n", "folderNode", "=", "ET", ".", "SubElement", "(", "root", ",", "'folder'", ")", "\n", "folderNode", ".", "text", "=", "\"StereoDataset/\"", "+", "self", ".", "config", ".", "cityName", "\n", "folderNode", ".", "tail", "=", "\"\\n\"", "\n", "# The name of the tool. Here, we do not follow the output of the LabelMe tool,", "\n", "# since this is crap anyway", "\n", "sourceNode", "=", "ET", ".", "SubElement", "(", "root", ",", "'source'", ")", "\n", "sourceNode", ".", "text", "=", "\"\\n\"", "\n", "sourceNode", ".", "tail", "=", "\"\\n\"", "\n", "sourceImageNode", "=", "ET", ".", "SubElement", "(", "sourceNode", ",", "'sourceImage'", ")", "\n", "sourceImageNode", ".", "text", "=", "\"Label Cities\"", "\n", "sourceImageNode", ".", "tail", "=", "\"\\n\"", "\n", "sourceAnnotationNode", "=", "ET", ".", "SubElement", "(", "\n", "sourceNode", ",", "'sourceAnnotation'", ")", "\n", "sourceAnnotationNode", ".", "text", "=", "\"mcLabelTool\"", "\n", "sourceAnnotationNode", ".", "tail", "=", "\"\\n\"", "\n", "# The image size", "\n", "imagesizeNode", "=", "ET", ".", "SubElement", "(", "root", ",", "'imagesize'", ")", "\n", "imagesizeNode", ".", "text", "=", "\"\\n\"", "\n", "imagesizeNode", ".", "tail", "=", "\"\\n\"", "\n", "nrowsNode", "=", "ET", ".", "SubElement", "(", "imagesizeNode", ",", "'nrows'", ")", "\n", "nrowsNode", ".", "text", "=", "str", "(", "self", ".", "image", ".", "height", "(", ")", ")", "\n", "nrowsNode", ".", "tail", "=", "\"\\n\"", "\n", "ncolsNode", "=", "ET", ".", "SubElement", "(", "imagesizeNode", ",", "'ncols'", ")", "\n", "ncolsNode", ".", "text", "=", "str", "(", "self", ".", "image", ".", "height", "(", ")", ")", "\n", "ncolsNode", ".", "tail", "=", "\"\\n\"", "\n", "# Add all objects", "\n", "for", "correction", "in", "self", ".", "corrections", ":", "\n", "                        ", "correction", ".", "appendToXMLNode", "(", "root", ")", "\n", "\n", "# Create the actual XML tree", "\n", "", "self", ".", "correctionXML", "=", "ET", ".", "ElementTree", "(", "root", ")", "\n", "\n", "# Save XML file", "\n", "try", ":", "\n", "                        ", "self", ".", "correctionXML", ".", "write", "(", "filename", ")", "\n", "saved", "=", "True", "\n", "message", "+=", "\"Saved corrections to {0} \"", ".", "format", "(", "filename", ")", "\n", "", "except", "IOError", "as", "e", ":", "\n", "                        ", "message", "+=", "\"Error writing corrections to {0}. Message: {1} \"", ".", "format", "(", "\n", "filename", ",", "e", ".", "strerror", ")", "\n", "", "", "else", ":", "\n", "                    ", "message", "+=", "\"Error writing corrections. Cannot generate a valid filename. \"", "\n", "# Clear changes", "\n", "", "", "if", "saved", ":", "\n", "                ", "self", ".", "clearChanges", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "message", "+=", "\"Nothing to save \"", "\n", "saved", "=", "True", "\n", "\n", "# Show the status message", "\n", "", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "message", ")", "\n", "\n", "return", "saved", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.undo": [[950, 978], ["cityscapesLabelTool.CityscapesLabelTool.imageChanged", "len", "cityscapesLabelTool.CityscapesLabelTool.statusBar().currentMessage", "cityscapesLabelTool.CityscapesLabelTool.statusBar().showMessage", "PyQt5.QtWidgets.QMessageBox.question", "cityscapesLabelTool.CityscapesLabelTool.statusBar().showMessage", "cityscapesLabelTool.CityscapesLabelTool.statusBar", "cityscapesLabelTool.CityscapesLabelTool.statusBar", "cityscapesLabelTool.CityscapesLabelTool.statusBar"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.imageChanged"], ["", "def", "undo", "(", "self", ")", ":", "\n", "# check if we really want to do this in case there are multiple changes", "\n", "        ", "if", "len", "(", "self", ".", "changes", ")", ">", "1", ":", "\n", "# Backup of status message", "\n", "            ", "restoreMessage", "=", "self", ".", "statusBar", "(", ")", ".", "currentMessage", "(", ")", "\n", "# Create the dialog", "\n", "dlgTitle", "=", "\"Undo changes?\"", "\n", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "dlgTitle", ")", "\n", "text", "=", "\"Do you want to undo the following changes?\\n\"", "\n", "for", "c", "in", "self", ".", "changes", ":", "\n", "                ", "text", "+=", "\"- \"", "+", "c", "+", "'\\n'", "\n", "", "buttons", "=", "QtWidgets", ".", "QMessageBox", ".", "Ok", "|", "QtWidgets", ".", "QMessageBox", ".", "Cancel", "\n", "ret", "=", "QtWidgets", ".", "QMessageBox", ".", "question", "(", "\n", "self", ",", "dlgTitle", ",", "text", ",", "buttons", ",", "QtWidgets", ".", "QMessageBox", ".", "Ok", ")", "\n", "proceed", "=", "False", "\n", "# If the user selected yes -> undo", "\n", "if", "ret", "==", "QtWidgets", ".", "QMessageBox", ".", "Ok", ":", "\n", "                ", "proceed", "=", "True", "\n", "", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "restoreMessage", ")", "\n", "\n", "# If we do not proceed -> return", "\n", "if", "not", "proceed", ":", "\n", "                ", "return", "\n", "\n", "# Clear labels to force a reload", "\n", "", "", "self", ".", "annotation", "=", "None", "\n", "# Reload", "\n", "self", ".", "imageChanged", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.clearPolygonAction": [[980, 984], ["cityscapesLabelTool.CityscapesLabelTool.deselectAllObjects", "cityscapesLabelTool.CityscapesLabelTool.clearPolygon", "cityscapesLabelTool.CityscapesLabelTool.update"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.deselectAllObjects", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.clearPolygon", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.update"], ["", "def", "clearPolygonAction", "(", "self", ")", ":", "\n", "        ", "self", ".", "deselectAllObjects", "(", ")", "\n", "self", ".", "clearPolygon", "(", ")", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.newObject": [[986, 1009], ["cityscapesLabelTool.CityscapesLabelTool.getLabelFromUser", "cityscapesLabelTool.CityscapesLabelTool.update", "cityscapesLabelTool.CityscapesLabelTool.appendObject", "cityscapesLabelTool.CityscapesLabelTool.deselectAllObjects", "cityscapesLabelTool.CityscapesLabelTool.clearPolygon", "cityscapesLabelTool.CityscapesLabelTool.statusBar().showMessage", "cityscapesLabelTool.CityscapesLabelTool.statusBar"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.getLabelFromUser", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.update", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.appendObject", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.deselectAllObjects", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.clearPolygon"], ["", "def", "newObject", "(", "self", ")", ":", "\n", "# Default label", "\n", "        ", "label", "=", "self", ".", "lastLabel", "\n", "\n", "# Ask the user for a label", "\n", "(", "label", ",", "ok", ")", "=", "self", ".", "getLabelFromUser", "(", "label", ")", "\n", "\n", "if", "ok", "and", "label", ":", "\n", "# Append and create the new object", "\n", "            ", "self", ".", "appendObject", "(", "label", ",", "self", ".", "drawPoly", ")", "\n", "\n", "# Clear the drawn polygon", "\n", "self", ".", "deselectAllObjects", "(", ")", "\n", "self", ".", "clearPolygon", "(", ")", "\n", "\n", "# Default message", "\n", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "self", ".", "defaultStatusbar", ")", "\n", "\n", "# Set as default label for next time", "\n", "self", ".", "lastLabel", "=", "label", "\n", "\n", "# Redraw", "\n", "", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.deleteObject": [[1011, 1036], ["obj.delete", "cityscapesLabelTool.CityscapesLabelTool.addChange", "cityscapesLabelTool.CityscapesLabelTool.deselectAllObjects", "cityscapesLabelTool.CityscapesLabelTool.clearPolygon", "cityscapesLabelTool.CityscapesLabelTool.update"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.CsObject.delete", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.addChange", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.deselectAllObjects", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.clearPolygon", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.update"], ["", "def", "deleteObject", "(", "self", ")", ":", "\n", "# Cannot do anything without a selected object", "\n", "        ", "if", "not", "self", ".", "selObjs", ":", "\n", "            ", "return", "\n", "# Cannot do anything without labels", "\n", "", "if", "not", "self", ".", "annotation", ":", "\n", "            ", "return", "\n", "\n", "", "for", "selObj", "in", "self", ".", "selObjs", ":", "\n", "# The selected object that is deleted", "\n", "            ", "obj", "=", "self", ".", "annotation", ".", "objects", "[", "selObj", "]", "\n", "\n", "# Delete", "\n", "", "obj", ".", "delete", "(", ")", "\n", "\n", "# Save changes", "\n", "self", ".", "addChange", "(", "\n", "\"Deleted object {0} with label {1}\"", ".", "format", "(", "obj", ".", "id", ",", "obj", ".", "label", ")", ")", "\n", "\n", "# Clear polygon", "\n", "self", ".", "deselectAllObjects", "(", ")", "\n", "self", ".", "clearPolygon", "(", ")", "\n", "\n", "# Redraw", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.modifyLabel": [[1038, 1071], ["cityscapesLabelTool.CityscapesLabelTool.getLabelFromUser", "cityscapesLabelTool.CityscapesLabelTool.update", "len", "cityscapesLabelTool.CityscapesLabelTool.addChange", "obj.updateDate"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.getLabelFromUser", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.update", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.addChange", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.CsObject.updateDate"], ["", "def", "modifyLabel", "(", "self", ")", ":", "\n", "# Cannot do anything without labels", "\n", "        ", "if", "not", "self", ".", "annotation", ":", "\n", "            ", "return", "\n", "# Cannot do anything without a selected object", "\n", "", "if", "not", "self", ".", "selObjs", ":", "\n", "            ", "return", "\n", "\n", "# The last selected object", "\n", "", "obj", "=", "self", ".", "annotation", ".", "objects", "[", "self", ".", "selObjs", "[", "-", "1", "]", "]", "\n", "# default label", "\n", "defaultLabel", "=", "obj", ".", "label", "\n", "defaultId", "=", "-", "1", "\n", "# If there is only one object the dialog text can be improved", "\n", "if", "len", "(", "self", ".", "selObjs", ")", "==", "1", ":", "\n", "            ", "defaultId", "=", "obj", ".", "id", "\n", "\n", "", "(", "label", ",", "ok", ")", "=", "self", ".", "getLabelFromUser", "(", "defaultLabel", ",", "defaultId", ")", "\n", "\n", "if", "ok", "and", "label", ":", "\n", "            ", "for", "selObj", "in", "self", ".", "selObjs", ":", "\n", "# The selected object that is modified", "\n", "                ", "obj", "=", "self", ".", "annotation", ".", "objects", "[", "selObj", "]", "\n", "\n", "# Save changes", "\n", "if", "obj", ".", "label", "!=", "label", ":", "\n", "                    ", "self", ".", "addChange", "(", "\"Set label {0} for object {1} with previous label {2}\"", ".", "format", "(", "\n", "label", ",", "obj", ".", "id", ",", "obj", ".", "label", ")", ")", "\n", "obj", ".", "label", "=", "label", "\n", "obj", ".", "updateDate", "(", ")", "\n", "\n", "# Update", "\n", "", "", "", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.layerUp": [[1073, 1078], ["cityscapesLabelTool.CityscapesLabelTool.modifyLayer", "cityscapesLabelTool.CityscapesLabelTool.update"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.modifyLayer", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.update"], ["", "def", "layerUp", "(", "self", ")", ":", "\n", "# Change layer", "\n", "        ", "self", ".", "modifyLayer", "(", "+", "1", ")", "\n", "# Update", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.layerDown": [[1080, 1085], ["cityscapesLabelTool.CityscapesLabelTool.modifyLayer", "cityscapesLabelTool.CityscapesLabelTool.update"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.modifyLayer", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.update"], ["", "def", "layerDown", "(", "self", ")", ":", "\n", "# Change layer", "\n", "        ", "self", ".", "modifyLayer", "(", "-", "1", ")", "\n", "# Update", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.zoomToggle": [[1087, 1092], ["cityscapesLabelTool.CityscapesLabelTool.update"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.update"], ["", "def", "zoomToggle", "(", "self", ",", "status", ")", ":", "\n", "        ", "self", ".", "config", ".", "zoom", "=", "status", "\n", "if", "status", ":", "\n", "            ", "self", ".", "mousePosOnZoom", "=", "self", ".", "mousePos", "\n", "", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.highlightClassToggle": [[1094, 1108], ["cityscapesLabelTool.CityscapesLabelTool.update", "cityscapesLabelTool.CityscapesLabelTool.getLabelFromUser"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.update", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.getLabelFromUser"], ["", "def", "highlightClassToggle", "(", "self", ",", "status", ")", ":", "\n", "        ", "if", "status", ":", "\n", "            ", "defaultLabel", "=", "\"\"", "\n", "if", "self", ".", "config", ".", "highlightLabelSelection", "and", "self", ".", "config", ".", "highlightLabelSelection", "in", "name2label", ":", "\n", "                ", "defaultLabel", "=", "self", ".", "config", ".", "highlightLabelSelection", "\n", "", "(", "label", ",", "ok", ")", "=", "self", ".", "getLabelFromUser", "(", "defaultLabel", ")", "\n", "\n", "if", "ok", "and", "label", ":", "\n", "                ", "self", ".", "config", ".", "highlightLabelSelection", "=", "label", "\n", "", "else", ":", "\n", "                ", "status", "=", "False", "\n", "\n", "", "", "self", ".", "config", ".", "highlight", "=", "status", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.minus": [[1110, 1113], ["max", "cityscapesLabelTool.CityscapesLabelTool.update"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.update"], ["", "def", "minus", "(", "self", ")", ":", "\n", "        ", "self", ".", "config", ".", "transp", "=", "max", "(", "self", ".", "config", ".", "transp", "-", "0.1", ",", "0.0", ")", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.displayFilepath": [[1114, 1118], ["cityscapesLabelTool.CityscapesLabelTool.statusBar().showMessage", "cityscapesLabelTool.CityscapesLabelTool.update", "cityscapesLabelTool.CityscapesLabelTool.statusBar"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.update"], ["", "def", "displayFilepath", "(", "self", ")", ":", "\n", "        ", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "\n", "\"Current image: {0}\"", ".", "format", "(", "self", ".", "config", ".", "currentFile", ")", ")", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.plus": [[1121, 1124], ["min", "cityscapesLabelTool.CityscapesLabelTool.update"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.update"], ["", "def", "plus", "(", "self", ")", ":", "\n", "        ", "self", ".", "config", ".", "transp", "=", "min", "(", "self", ".", "config", ".", "transp", "+", "0.1", ",", "1.0", ")", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.screenshot": [[1126, 1139], ["PyQt5.QtWidgets.QFileDialog.getSaveFileName", "cityscapesLabelTool.CityscapesLabelTool.doScreenshot", "str"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.doScreenshot"], ["", "def", "screenshot", "(", "self", ")", ":", "\n", "# Get a filename for saving", "\n", "        ", "dlgTitle", "=", "\"Get screenshot filename\"", "\n", "filter", "=", "\"Images (*.png *.xpm *.jpg)\"", "\n", "answer", ",", "_", "=", "QtWidgets", ".", "QFileDialog", ".", "getSaveFileName", "(", "\n", "self", ",", "dlgTitle", ",", "self", ".", "config", ".", "screenshotFilename", ",", "filter", ",", "options", "=", "QtWidgets", ".", "QFileDialog", ".", "DontUseNativeDialog", ")", "\n", "if", "answer", ":", "\n", "            ", "self", ".", "config", ".", "screenshotFilename", "=", "str", "(", "answer", ")", "\n", "", "else", ":", "\n", "            ", "return", "\n", "\n", "# Actually make the screenshot", "\n", "", "self", ".", "doScreenshot", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.screenshotToggle": [[1141, 1145], ["cityscapesLabelTool.CityscapesLabelTool.screenshot"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.screenshot"], ["", "def", "screenshotToggle", "(", "self", ",", "status", ")", ":", "\n", "        ", "self", ".", "screenshotToggleState", "=", "status", "\n", "if", "status", ":", "\n", "            ", "self", ".", "screenshot", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.displayHelpMessage": [[1146, 1188], ["PyQt5.QtWidgets.QMessageBox.about", "cityscapesLabelTool.CityscapesLabelTool.update"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.update"], ["", "", "def", "displayHelpMessage", "(", "self", ")", ":", "\n", "\n", "        ", "message", "=", "self", ".", "applicationTitle", "+", "\"\\n\\n\"", "\n", "message", "+=", "\"INSTRUCTIONS\\n\"", "\n", "message", "+=", "\" - press open (left button) to select a city from drop-down menu\\n\"", "\n", "message", "+=", "\" - browse images and edit labels using\\n\"", "\n", "message", "+=", "\"   the toolbar buttons (check tooltips) and the controls below\\n\"", "\n", "message", "+=", "\" - note that the editing happens in-place;\\n\"", "\n", "message", "+=", "\"   if you want to annotate your own images or edit a custom\\n\"", "\n", "message", "+=", "\"   set of labels, check (and modify) the code of the method 'loadCity'\\n\"", "\n", "message", "+=", "\" - note that this tool modifys the JSON polygon files, but\\n\"", "\n", "message", "+=", "\"   does not create or update the pngs; for the latter use\\n\"", "\n", "message", "+=", "\"   the preparation tools that come with this tool box.\\n\"", "\n", "message", "+=", "\"\\n\"", "\n", "message", "+=", "\"CONTROLS\\n\"", "\n", "message", "+=", "\" - highlight objects [move mouse]\\n\"", "\n", "message", "+=", "\" - draw new polygon\\n\"", "\n", "message", "+=", "\"     - start drawing a polygon [left click]\\n\"", "\n", "message", "+=", "\"     - add point to open polygon [left click]\\n\"", "\n", "message", "+=", "\"     - delete last added point [Backspace]\\n\"", "\n", "message", "+=", "\"     - close polygon [left click on first point]\\n\"", "\n", "message", "+=", "\" - select closed polygon, existing object [Ctrl + left click]\\n\"", "\n", "message", "+=", "\"     - move point [left click and hold on point, move mouse]\\n\"", "\n", "message", "+=", "\"     - add point [click on edge]\\n\"", "\n", "message", "+=", "\"     - delete point from polygon [Shift + left click on point]\\n\"", "\n", "message", "+=", "\"     - deselect polygon [Q]\\n\"", "\n", "message", "+=", "\"     - select multiple polygons [Ctrl + left click]\\n\"", "\n", "message", "+=", "\" - intersect/merge two polygons: draw new polygon, then\\n\"", "\n", "message", "+=", "\"     - intersect [Shift + left click on existing polygon]\\n\"", "\n", "message", "+=", "\"     - merge [Alt + left click on existing polygon]\\n\"", "\n", "message", "+=", "\" - open zoom window [Z or hold down right mouse button]\\n\"", "\n", "message", "+=", "\"     - zoom in/out [mousewheel]\\n\"", "\n", "message", "+=", "\"     - enlarge/shrink zoom window [shift+mousewheel]\\n\"", "\n", "message", "+=", "\" - start correction mode [C]\\n\"", "\n", "message", "+=", "\"     - draw a correction box [left click and hold, move, release]\\n\"", "\n", "message", "+=", "\"     - set box type [1,2,3,4]\\n\"", "\n", "message", "+=", "\"     - previous/next box [E,R]\\n\"", "\n", "message", "+=", "\"     - delete box [D]\\n\"", "\n", "message", "+=", "\"     - modify text, use ascii only [M]\\n\"", "\n", "\n", "QtWidgets", ".", "QMessageBox", ".", "about", "(", "self", ",", "\"HELP!\"", ",", "message", ")", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.closeEvent": [[1190, 1195], ["cityscapesLabelTool.CityscapesLabelTool.checkAndSave", "event.accept", "event.ignore"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.checkAndSave"], ["", "def", "closeEvent", "(", "self", ",", "event", ")", ":", "\n", "        ", "if", "self", ".", "checkAndSave", "(", ")", ":", "\n", "            ", "event", ".", "accept", "(", ")", "\n", "", "else", ":", "\n", "            ", "event", ".", "ignore", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.imageChanged": [[1200, 1220], ["cityscapesLabelTool.CityscapesLabelTool.deselectAllObjects", "cityscapesLabelTool.CityscapesLabelTool.clearPolygon", "cityscapesLabelTool.CityscapesLabelTool.loadImage", "cityscapesLabelTool.CityscapesLabelTool.loadLabels", "cityscapesLabelTool.CityscapesLabelTool.loadCorrections", "cityscapesLabelTool.CityscapesLabelTool.updateMouseObject", "cityscapesLabelTool.CityscapesLabelTool.update", "cityscapesLabelTool.CityscapesLabelTool.doScreenshot"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.deselectAllObjects", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.clearPolygon", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.loadImage", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.loadLabels", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.loadCorrections", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.updateMouseObject", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.update", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.doScreenshot"], ["", "", "def", "imageChanged", "(", "self", ")", ":", "\n", "# Clear corrections", "\n", "        ", "self", ".", "corrections", "=", "[", "]", "\n", "self", ".", "selected_correction", "=", "-", "1", "\n", "# Clear the polygon", "\n", "self", ".", "deselectAllObjects", "(", ")", "\n", "self", ".", "clearPolygon", "(", ")", "\n", "# Load the first image", "\n", "self", ".", "loadImage", "(", ")", "\n", "# Load its labels if available", "\n", "self", ".", "loadLabels", "(", ")", "\n", "# Load its corrections if available", "\n", "self", ".", "loadCorrections", "(", ")", "\n", "# Update the object the mouse points to", "\n", "self", ".", "updateMouseObject", "(", ")", "\n", "# Update the GUI", "\n", "self", ".", "update", "(", ")", "\n", "# Save screenshot if set", "\n", "if", "self", ".", "screenshotToggleState", ":", "\n", "            ", "self", ".", "doScreenshot", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.loadCity": [[1226, 1237], ["os.path.isdir", "glob.glob", "cityscapesLabelTool.CityscapesLabelTool.images.sort", "os.path.join", "cityscapesLabelTool.CityscapesLabelTool.images.index"], "methods", ["None"], ["", "", "def", "loadCity", "(", "self", ")", ":", "\n", "# Search for all *.pngs to get the image list", "\n", "        ", "self", ".", "images", "=", "[", "]", "\n", "if", "os", ".", "path", ".", "isdir", "(", "self", ".", "config", ".", "city", ")", ":", "\n", "            ", "self", ".", "images", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "config", ".", "city", ",", "'*'", "+", "self", ".", "imageExt", ")", ")", "\n", "self", ".", "images", ".", "sort", "(", ")", "\n", "if", "self", ".", "config", ".", "currentFile", "in", "self", ".", "images", ":", "\n", "                ", "self", ".", "idx", "=", "self", ".", "images", ".", "index", "(", "self", ".", "config", ".", "currentFile", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "idx", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.loadImage": [[1241, 1267], ["cityscapesLabelTool.CityscapesLabelTool.statusBar().showMessage", "os.path.normpath", "act.setEnabled", "act.setEnabled", "act.setEnabled", "PyQt5.QtGui.QImage", "cityscapesLabelTool.CityscapesLabelTool.image.isNull", "cityscapesLabelTool.CityscapesLabelTool.statusBar", "cityscapesLabelTool.CityscapesLabelTool.image.isNull", "len"], "methods", ["None"], ["", "", "", "def", "loadImage", "(", "self", ")", ":", "\n", "        ", "success", "=", "False", "\n", "message", "=", "self", ".", "defaultStatusbar", "\n", "if", "self", ".", "images", ":", "\n", "            ", "filename", "=", "self", ".", "images", "[", "self", ".", "idx", "]", "\n", "filename", "=", "os", ".", "path", ".", "normpath", "(", "filename", ")", "\n", "if", "not", "self", ".", "image", ".", "isNull", "(", ")", "and", "filename", "==", "self", ".", "config", ".", "currentFile", ":", "\n", "                ", "success", "=", "True", "\n", "", "else", ":", "\n", "                ", "self", ".", "image", "=", "QtGui", ".", "QImage", "(", "filename", ")", "\n", "if", "self", ".", "image", ".", "isNull", "(", ")", ":", "\n", "                    ", "message", "=", "\"Failed to read image: {0}\"", ".", "format", "(", "filename", ")", "\n", "", "else", ":", "\n", "                    ", "message", "=", "\"Read image: {0}\"", ".", "format", "(", "filename", ")", "\n", "self", ".", "config", ".", "currentFile", "=", "filename", "\n", "success", "=", "True", "\n", "\n", "# Update toolbar actions that need an image", "\n", "", "", "", "for", "act", "in", "self", ".", "actImage", ":", "\n", "            ", "act", ".", "setEnabled", "(", "success", ")", "\n", "", "for", "act", "in", "self", ".", "actImageNotFirst", ":", "\n", "            ", "act", ".", "setEnabled", "(", "success", "and", "self", ".", "idx", ">", "0", ")", "\n", "", "for", "act", "in", "self", ".", "actImageNotLast", ":", "\n", "            ", "act", ".", "setEnabled", "(", "success", "and", "self", ".", "idx", "<", "len", "(", "self", ".", "images", ")", "-", "1", ")", "\n", "\n", "", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.loadLabels": [[1271, 1301], ["cityscapesLabelTool.CityscapesLabelTool.getLabelFilename", "cityscapesLabelTool.CityscapesLabelTool.clearAnnotation", "cityscapesLabelTool.CityscapesLabelTool.statusBar().currentMessage", "cityscapesLabelTool.CityscapesLabelTool.statusBar().showMessage", "cityscapesLabelTool.CityscapesLabelTool.clearAnnotation", "cityscapesscripts.helpers.annotation.Annotation", "cityscapesLabelTool.CityscapesLabelTool.annotation.fromJsonFile", "os.path.isfile", "cityscapesLabelTool.CityscapesLabelTool.statusBar().showMessage", "cityscapesLabelTool.CityscapesLabelTool.statusBar", "cityscapesLabelTool.CityscapesLabelTool.statusBar", "cityscapesLabelTool.CityscapesLabelTool.statusBar"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.getLabelFilename", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.clearAnnotation", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.clearAnnotation", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.Annotation.fromJsonFile"], ["", "def", "loadLabels", "(", "self", ")", ":", "\n", "        ", "filename", "=", "self", ".", "getLabelFilename", "(", ")", "\n", "if", "not", "filename", "or", "not", "os", ".", "path", ".", "isfile", "(", "filename", ")", ":", "\n", "            ", "self", ".", "clearAnnotation", "(", ")", "\n", "return", "\n", "\n", "# If we have everything and the filename did not change, then we are good", "\n", "", "if", "self", ".", "annotation", "and", "filename", "==", "self", ".", "currentLabelFile", ":", "\n", "            ", "return", "\n", "\n", "# Clear the current labels first", "\n", "", "self", ".", "clearAnnotation", "(", ")", "\n", "\n", "try", ":", "\n", "            ", "self", ".", "annotation", "=", "Annotation", "(", ")", "\n", "self", ".", "annotation", ".", "fromJsonFile", "(", "filename", ")", "\n", "", "except", "IOError", "as", "e", ":", "\n", "# This is the error if the file does not exist", "\n", "            ", "message", "=", "\"Error parsing labels in {0}. Message: {1}\"", ".", "format", "(", "\n", "filename", ",", "e", ".", "strerror", ")", "\n", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "message", ")", "\n", "\n", "# Remember the filename loaded", "\n", "", "self", ".", "currentLabelFile", "=", "filename", "\n", "\n", "# Remeber the status bar message to restore it later", "\n", "restoreMessage", "=", "self", ".", "statusBar", "(", ")", ".", "currentMessage", "(", ")", "\n", "\n", "# Restore the message", "\n", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "restoreMessage", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.loadCorrections": [[1305, 1361], ["cityscapesLabelTool.CityscapesLabelTool.getCorrectionFilename", "cityscapesLabelTool.CityscapesLabelTool.clearCorrections", "cityscapesLabelTool.CityscapesLabelTool.statusBar().currentMessage", "cityscapesLabelTool.CityscapesLabelTool.correctionXML.getroot", "enumerate", "cityscapesLabelTool.CityscapesLabelTool.statusBar().showMessage", "cityscapesLabelTool.CityscapesLabelTool.clearCorrections", "os.path.isfile", "xml.parse", "cityscapesLabelTool.CityscapesLabelTool.findall", "cityscapesLabelTool.CorrectionBox", "cityscapesLabelTool.CorrectionBox.readFromXMLNode", "cityscapesLabelTool.CityscapesLabelTool.corrections.append", "cityscapesLabelTool.CityscapesLabelTool.statusBar().showMessage", "cityscapesLabelTool.CityscapesLabelTool.statusBar().showMessage", "cityscapesLabelTool.CityscapesLabelTool.statusBar", "cityscapesLabelTool.CorrectionBox.select", "cityscapesLabelTool.CityscapesLabelTool.statusBar", "cityscapesLabelTool.CityscapesLabelTool.statusBar", "cityscapesLabelTool.CityscapesLabelTool.statusBar"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.getCorrectionFilename", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.clearCorrections", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.clearCorrections", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.options.base_options.BaseOptions.parse", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CorrectionBox.readFromXMLNode", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CorrectionBox.select"], ["", "def", "loadCorrections", "(", "self", ")", ":", "# TODO", "\n", "        ", "filename", "=", "self", ".", "getCorrectionFilename", "(", ")", "\n", "if", "not", "filename", ":", "\n", "            ", "self", ".", "clearCorrections", "(", ")", "\n", "return", "\n", "\n", "# If we have everything and the filename did not change, then we are good", "\n", "", "if", "self", ".", "correctionXML", "and", "self", ".", "corrections", "and", "filename", "==", "self", ".", "config", ".", "currentCorrectionFile", ":", "\n", "            ", "return", "\n", "\n", "# Clear the current labels first", "\n", "", "self", ".", "clearCorrections", "(", ")", "\n", "\n", "# We do not always expect to have corrections, therefore prevent a failure due to missing file", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "filename", ")", ":", "\n", "            ", "return", "\n", "\n", "", "try", ":", "\n", "# Try to parse the XML file", "\n", "            ", "self", ".", "correctionXML", "=", "ET", ".", "parse", "(", "filename", ")", "\n", "", "except", "IOError", "as", "e", ":", "\n", "# This is the error if the file does not exist", "\n", "            ", "message", "=", "\"Error parsing corrections in {0}. Message: {1}\"", ".", "format", "(", "\n", "filename", ",", "e", ".", "strerror", ")", "\n", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "message", ")", "\n", "self", ".", "correctionXML", "=", "[", "]", "\n", "return", "\n", "", "except", "ET", ".", "ParseError", "as", "e", ":", "\n", "# This is the error if the content is no valid XML", "\n", "            ", "message", "=", "\"Error parsing corrections in {0}. Message: {1}\"", ".", "format", "(", "\n", "filename", ",", "e", ")", "\n", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "message", ")", "\n", "self", ".", "correctionXML", "=", "[", "]", "\n", "return", "\n", "\n", "# Remember the filename loaded", "\n", "", "self", ".", "config", ".", "currentCorrectionFile", "=", "filename", "\n", "\n", "# Remeber the status bar message to restore it later", "\n", "restoreMessage", "=", "self", ".", "statusBar", "(", ")", ".", "currentMessage", "(", ")", "\n", "\n", "# Iterate through all objects in the XML", "\n", "root", "=", "self", ".", "correctionXML", ".", "getroot", "(", ")", "\n", "for", "i", ",", "objNode", "in", "enumerate", "(", "root", ".", "findall", "(", "'correction'", ")", ")", ":", "\n", "# Instantate a new object and read the XML node", "\n", "            ", "obj", "=", "CorrectionBox", "(", ")", "\n", "obj", ".", "readFromXMLNode", "(", "objNode", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "self", ".", "selected_correction", "=", "0", "\n", "obj", ".", "select", "(", ")", "\n", "\n", "# Append the object to our list of labels", "\n", "", "self", ".", "corrections", ".", "append", "(", "obj", ")", "\n", "\n", "# Restore the message", "\n", "", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "restoreMessage", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.modify_correction_type": [[1362, 1368], ["cityscapesLabelTool.CityscapesLabelTool.addChange", "cityscapesLabelTool.CityscapesLabelTool.update"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.addChange", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.update"], ["", "def", "modify_correction_type", "(", "self", ",", "correction_type", ")", ":", "\n", "        ", "if", "self", ".", "selected_correction", ">=", "0", ":", "\n", "            ", "self", ".", "corrections", "[", "self", ".", "selected_correction", "]", ".", "type", "=", "correction_type", "\n", "self", ".", "addChange", "(", "\"Modified correction type.\"", ")", "\n", "self", ".", "update", "(", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.delete_selected_annotation": [[1369, 1379], ["cityscapesLabelTool.CityscapesLabelTool.addChange", "cityscapesLabelTool.CityscapesLabelTool.update", "len", "cityscapesLabelTool.CityscapesLabelTool.corrections[].select"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.addChange", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.update", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CorrectionBox.select"], ["", "def", "delete_selected_annotation", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "selected_correction", ">=", "0", "and", "self", ".", "config", ".", "correctionMode", ":", "\n", "            ", "del", "self", ".", "corrections", "[", "self", ".", "selected_correction", "]", "\n", "if", "self", ".", "selected_correction", "==", "len", "(", "self", ".", "corrections", ")", ":", "\n", "                ", "self", ".", "selected_correction", "=", "self", ".", "selected_correction", "-", "1", "\n", "", "if", "self", ".", "selected_correction", ">=", "0", ":", "\n", "                ", "self", ".", "corrections", "[", "self", ".", "selected_correction", "]", ".", "select", "(", ")", "\n", "", "self", ".", "addChange", "(", "\"Deleted correction.\"", ")", "\n", "self", ".", "update", "(", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.modify_correction_description": [[1380, 1389], ["PyQt5.QtWidgets.QInputDialog.getText", "cityscapesLabelTool.CityscapesLabelTool.addChange", "cityscapesLabelTool.CityscapesLabelTool.update"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.addChange", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.update"], ["", "def", "modify_correction_description", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "selected_correction", ">=", "0", "and", "self", ".", "config", ".", "correctionMode", ":", "\n", "            ", "description", "=", "QtWidgets", ".", "QInputDialog", ".", "getText", "(", "self", ",", "\"Modify Error Description\"", ",", "\"Please describe the labeling error briefly.\"", ",", "\n", "text", "=", "self", ".", "corrections", "[", "self", ".", "selected_correction", "]", ".", "annotation", ")", "\n", "if", "description", "[", "1", "]", ":", "\n", "                ", "self", ".", "corrections", "[", "self", ".", "selected_correction", "]", ".", "annotation", "=", "description", "[", "0", "]", "\n", "self", ".", "addChange", "(", "\"Changed correction description.\"", ")", "\n", "self", ".", "update", "(", ")", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.select_next_correction": [[1390, 1402], ["cityscapesLabelTool.CityscapesLabelTool.corrections[].unselect", "cityscapesLabelTool.CityscapesLabelTool.corrections[].select", "cityscapesLabelTool.CityscapesLabelTool.update", "len"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CorrectionBox.unselect", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CorrectionBox.select", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.update"], ["", "def", "select_next_correction", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "selected_correction", ">=", "0", ":", "\n", "            ", "self", ".", "corrections", "[", "self", ".", "selected_correction", "]", ".", "unselect", "(", ")", "\n", "if", "self", ".", "selected_correction", "==", "(", "len", "(", "self", ".", "corrections", ")", "-", "1", ")", ":", "\n", "                ", "self", ".", "selected_correction", "=", "0", "\n", "", "else", ":", "\n", "                ", "self", ".", "selected_correction", "=", "self", ".", "selected_correction", "+", "1", "\n", "", "self", ".", "corrections", "[", "self", ".", "selected_correction", "]", ".", "select", "(", ")", "\n", "self", ".", "update", "(", ")", "\n", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.select_previous_correction": [[1403, 1415], ["cityscapesLabelTool.CityscapesLabelTool.corrections[].unselect", "cityscapesLabelTool.CityscapesLabelTool.corrections[].select", "cityscapesLabelTool.CityscapesLabelTool.update", "len"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CorrectionBox.unselect", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CorrectionBox.select", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.update"], ["", "def", "select_previous_correction", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "selected_correction", ">=", "0", ":", "\n", "            ", "self", ".", "corrections", "[", "self", ".", "selected_correction", "]", ".", "unselect", "(", ")", "\n", "if", "self", ".", "selected_correction", "==", "0", ":", "\n", "                ", "self", ".", "selected_correction", "=", "(", "len", "(", "self", ".", "corrections", ")", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "selected_correction", "=", "self", ".", "selected_correction", "-", "1", "\n", "", "self", ".", "corrections", "[", "self", ".", "selected_correction", "]", ".", "select", "(", ")", "\n", "self", ".", "update", "(", ")", "\n", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.paintEvent": [[1425, 1452], ["PyQt5.QtGui.QPainter", "PyQt5.QtGui.QPainter.begin", "cityscapesLabelTool.CityscapesLabelTool.updateScale", "cityscapesLabelTool.CityscapesLabelTool.getHighlightedObject", "cityscapesLabelTool.CityscapesLabelTool.drawImage", "cityscapesLabelTool.CityscapesLabelTool.drawLabels", "cityscapesLabelTool.CityscapesLabelTool.drawDrawPoly", "cityscapesLabelTool.CityscapesLabelTool.drawDrawRect", "cityscapesLabelTool.CityscapesLabelTool.drawLabelAtMouse", "cityscapesLabelTool.CityscapesLabelTool.drawZoom", "PyQt5.QtGui.QPainter.end", "PyQt5.QtWidgets.QMainWindow.paintEvent"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.updateScale", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.getHighlightedObject", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.drawImage", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.drawLabels", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.drawDrawPoly", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.drawDrawRect", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.drawLabelAtMouse", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.drawZoom", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.paintEvent"], ["", "def", "paintEvent", "(", "self", ",", "event", ")", ":", "\n", "# Create a QPainter that can perform draw actions within a widget or image", "\n", "        ", "qp", "=", "QtGui", ".", "QPainter", "(", ")", "\n", "# Begin drawing in the application widget", "\n", "qp", ".", "begin", "(", "self", ")", "\n", "# Update scale", "\n", "self", ".", "updateScale", "(", "qp", ")", "\n", "# Determine the object ID to highlight", "\n", "self", ".", "getHighlightedObject", "(", "qp", ")", "\n", "# Draw the image first", "\n", "self", ".", "drawImage", "(", "qp", ")", "\n", "# Draw the labels on top", "\n", "overlay", "=", "self", ".", "drawLabels", "(", "qp", ")", "\n", "# Draw the user drawn polygon", "\n", "self", ".", "drawDrawPoly", "(", "qp", ")", "\n", "self", ".", "drawDrawRect", "(", "qp", ")", "\n", "# Draw the label name next to the mouse", "\n", "self", ".", "drawLabelAtMouse", "(", "qp", ")", "\n", "# Draw the zoom", "\n", "# self.drawZoom(qp, overlay)", "\n", "self", ".", "drawZoom", "(", "qp", ",", "None", ")", "\n", "\n", "# Thats all drawing", "\n", "qp", ".", "end", "(", ")", "\n", "\n", "# Forward the paint event", "\n", "QtWidgets", ".", "QMainWindow", ".", "paintEvent", "(", "self", ",", "event", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.updateScale": [[1454, 1471], ["min", "cityscapesLabelTool.CityscapesLabelTool.toolbar.height", "float", "cityscapesLabelTool.CityscapesLabelTool.image.width", "float", "cityscapesLabelTool.CityscapesLabelTool.image.height", "cityscapesLabelTool.CityscapesLabelTool.image.width", "cityscapesLabelTool.CityscapesLabelTool.image.height", "cityscapesLabelTool.CityscapesLabelTool.image.width", "cityscapesLabelTool.CityscapesLabelTool.image.height", "qp.device().width", "qp.device().height", "qp.device", "qp.device"], "methods", ["None"], ["", "def", "updateScale", "(", "self", ",", "qp", ")", ":", "\n", "        ", "if", "not", "self", ".", "image", ".", "width", "(", ")", "or", "not", "self", ".", "image", ".", "height", "(", ")", ":", "\n", "            ", "return", "\n", "# Horizontal offset", "\n", "", "self", ".", "xoff", "=", "self", ".", "bordergap", "\n", "# Vertical offset", "\n", "self", ".", "yoff", "=", "self", ".", "toolbar", ".", "height", "(", ")", "+", "self", ".", "bordergap", "\n", "# We want to make sure to keep the image aspect ratio and to make it fit within the widget", "\n", "# Without keeping the aspect ratio, each side of the image is scaled (multiplied) with", "\n", "sx", "=", "float", "(", "qp", ".", "device", "(", ")", ".", "width", "(", ")", "-", "2", "*", "self", ".", "xoff", ")", "/", "self", ".", "image", ".", "width", "(", ")", "\n", "sy", "=", "float", "(", "qp", ".", "device", "(", ")", ".", "height", "(", ")", "-", "2", "*", "self", ".", "yoff", ")", "/", "self", ".", "image", ".", "height", "(", ")", "\n", "# To keep the aspect ratio while making sure it fits, we use the minimum of both scales", "\n", "# Remember the scale for later", "\n", "self", ".", "scale", "=", "min", "(", "sx", ",", "sy", ")", "\n", "# These are then the actual dimensions used", "\n", "self", ".", "w", "=", "self", ".", "scale", "*", "self", ".", "image", ".", "width", "(", ")", "\n", "self", ".", "h", "=", "self", ".", "scale", "*", "self", ".", "image", ".", "height", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.getHighlightedObject": [[1473, 1496], ["cityscapesLabelTool.CityscapesLabelTool.drawPoly.isEmpty", "len"], "methods", ["None"], ["", "def", "getHighlightedObject", "(", "self", ",", "qp", ")", ":", "\n", "# These variables we want to fill", "\n", "        ", "self", ".", "highlightObjs", "=", "[", "]", "\n", "self", ".", "highlightObjLabel", "=", "None", "\n", "\n", "# Without labels we cannot do so", "\n", "if", "not", "self", ".", "annotation", ":", "\n", "            ", "return", "\n", "\n", "# If available set the selected objects", "\n", "", "highlightObjIds", "=", "self", ".", "selObjs", "\n", "# If not available but the polygon is empty or closed, its the mouse object", "\n", "if", "not", "highlightObjIds", "and", "(", "self", ".", "drawPoly", ".", "isEmpty", "(", ")", "or", "self", ".", "drawPolyClosed", ")", "and", "self", ".", "mouseObj", ">=", "0", "and", "not", "self", ".", "mouseOutsideImage", ":", "\n", "            ", "highlightObjIds", "=", "[", "self", ".", "mouseObj", "]", "\n", "# Get the actual object that is highlighted", "\n", "", "if", "highlightObjIds", ":", "\n", "            ", "self", ".", "highlightObjs", "=", "[", "self", ".", "annotation", ".", "objects", "[", "i", "]", "\n", "for", "i", "in", "highlightObjIds", "]", "\n", "# Set the highlight object label if appropriate", "\n", "", "if", "self", ".", "config", ".", "highlight", ":", "\n", "            ", "self", ".", "highlightObjLabel", "=", "self", ".", "config", ".", "highlightLabelSelection", "\n", "", "elif", "len", "(", "highlightObjIds", ")", "==", "1", "and", "self", ".", "config", ".", "correctionMode", ":", "\n", "            ", "self", ".", "highlightObjLabel", "=", "self", ".", "annotation", ".", "objects", "[", "highlightObjIds", "[", "-", "1", "]", "]", ".", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.drawImage": [[1498, 1510], ["cityscapesLabelTool.CityscapesLabelTool.image.isNull", "qp.save", "qp.drawImage", "qp.restore", "PyQt5.QtCore.QRect"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.save", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.drawImage"], ["", "", "def", "drawImage", "(", "self", ",", "qp", ")", ":", "\n", "# Return if no image available", "\n", "        ", "if", "self", ".", "image", ".", "isNull", "(", ")", ":", "\n", "            ", "return", "\n", "\n", "# Save the painters current setting to a stack", "\n", "", "qp", ".", "save", "(", ")", "\n", "# Draw the image", "\n", "qp", ".", "drawImage", "(", "QtCore", ".", "QRect", "(", "self", ".", "xoff", ",", "self", ".", "yoff", ",", "\n", "self", ".", "w", ",", "self", ".", "h", ")", ",", "self", ".", "image", ")", "\n", "# Restore the saved setting from the stack", "\n", "qp", ".", "restore", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.getPolygon": [[1511, 1517], ["PyQt5.QtGui.QPolygonF", "PyQt5.QtCore.QPointF", "PyQt5.QtGui.QPolygonF.append"], "methods", ["None"], ["", "def", "getPolygon", "(", "self", ",", "obj", ")", ":", "\n", "        ", "poly", "=", "QtGui", ".", "QPolygonF", "(", ")", "\n", "for", "pt", "in", "obj", ".", "polygon", ":", "\n", "            ", "point", "=", "QtCore", ".", "QPointF", "(", "pt", ".", "x", ",", "pt", ".", "y", ")", "\n", "poly", ".", "append", "(", "point", ")", "\n", "", "return", "poly", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.drawLabels": [[1520, 1612], ["PyQt5.QtGui.QImage", "PyQt5.QtGui.QColor", "PyQt5.QtGui.QImage.fill", "PyQt5.QtGui.QPainter", "PyQt5.QtGui.QPainter.begin", "PyQt5.QtGui.QPainter.setPen", "PyQt5.QtGui.QPainter.end", "qp.save", "qp.setOpacity", "qp.drawImage", "qp.restore", "cityscapesLabelTool.CityscapesLabelTool.image.isNull", "PyQt5.QtGui.QColor", "cityscapesscripts.helpers.labels.assureSingleInstanceName", "cityscapesLabelTool.CityscapesLabelTool.getPolygon", "PyQt5.QtGui.QColor", "PyQt5.QtGui.QBrush", "PyQt5.QtGui.QPainter.setBrush", "PyQt5.QtGui.QPainter.drawPolygon", "PyQt5.QtGui.QBrush", "PyQt5.QtGui.QPainter.setBrush", "PyQt5.QtGui.QPainter.setPen", "PyQt5.QtGui.QPainter.drawPolygon", "print", "print", "PyQt5.QtGui.QTransform.fromScale", "PyQt5.QtGui.QPainter.setCompositionMode", "PyQt5.QtGui.QPainter.drawPolygon", "PyQt5.QtGui.QPainter.setCompositionMode", "PyQt5.QtGui.QBrush", "PyQt5.QtGui.QPainter.setBrush", "cityscapesLabelTool.CityscapesLabelTool.getPolygon", "PyQt5.QtGui.QTransform.fromScale"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.save", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.drawImage", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.labels.assureSingleInstanceName", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.getPolygon", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.getPolygon"], ["", "def", "drawLabels", "(", "self", ",", "qp", ",", "ignore", "=", "[", "]", ")", ":", "\n", "        ", "if", "self", ".", "image", ".", "isNull", "(", ")", "or", "self", ".", "w", "<=", "0", "or", "self", ".", "h", "<=", "0", ":", "\n", "            ", "return", "\n", "", "if", "not", "self", ".", "annotation", ":", "\n", "            ", "return", "\n", "", "if", "self", ".", "transpTempZero", ":", "\n", "            ", "return", "\n", "\n", "# The overlay is created in the viewing coordinates", "\n", "# This way, the drawing is more dense and the polygon edges are nicer", "\n", "# We create an image that is the overlay", "\n", "# Within this image we draw using another QPainter", "\n", "# Finally we use the real QPainter to overlay the overlay-image on what is drawn so far", "\n", "\n", "# The image that is used to draw the overlays", "\n", "", "overlay", "=", "QtGui", ".", "QImage", "(", "\n", "self", ".", "w", ",", "self", ".", "h", ",", "QtGui", ".", "QImage", ".", "Format_ARGB32_Premultiplied", ")", "\n", "# Fill the image with the default color", "\n", "defaultLabel", "=", "name2label", "[", "self", ".", "defaultLabel", "]", "\n", "col", "=", "QtGui", ".", "QColor", "(", "*", "defaultLabel", ".", "color", ")", "\n", "overlay", ".", "fill", "(", "col", ")", "\n", "# Create a new QPainter that draws in the overlay image", "\n", "qp2", "=", "QtGui", ".", "QPainter", "(", ")", "\n", "qp2", ".", "begin", "(", "overlay", ")", "\n", "\n", "# The color of the outlines", "\n", "qp2", ".", "setPen", "(", "QtGui", ".", "QColor", "(", "'white'", ")", ")", "\n", "# Draw all objects", "\n", "for", "obj", "in", "self", ".", "annotation", ".", "objects", ":", "\n", "# Some are flagged to not be drawn. Skip them", "\n", "            ", "if", "not", "obj", ".", "draw", ":", "\n", "                ", "continue", "\n", "\n", "# The label of the object", "\n", "", "name", "=", "assureSingleInstanceName", "(", "obj", ".", "label", ")", "\n", "# If we do not know a color for this label, warn the user", "\n", "if", "not", "name", "in", "name2label", ":", "\n", "                ", "print", "(", "\n", "\"The annotations contain unkown labels. This should not happen. Please inform the datasets authors. Thank you!\"", ")", "\n", "print", "(", "\"Details: label '{}', file '{}'\"", ".", "format", "(", "\n", "name", ",", "self", ".", "currentLabelFile", ")", ")", "\n", "continue", "\n", "\n", "# If we ignore this label, skip", "\n", "", "if", "name", "in", "ignore", ":", "\n", "                ", "continue", "\n", "\n", "", "poly", "=", "self", ".", "getPolygon", "(", "obj", ")", "\n", "\n", "# Scale the polygon properly", "\n", "polyToDraw", "=", "poly", "*", "QtGui", ".", "QTransform", ".", "fromScale", "(", "self", ".", "scale", ",", "self", ".", "scale", ")", "\n", "\n", "# Default drawing", "\n", "# Color from color table, solid brush", "\n", "col", "=", "QtGui", ".", "QColor", "(", "*", "name2label", "[", "name", "]", ".", "color", ")", "\n", "brush", "=", "QtGui", ".", "QBrush", "(", "col", ",", "QtCore", ".", "Qt", ".", "SolidPattern", ")", "\n", "qp2", ".", "setBrush", "(", "brush", ")", "\n", "# Overwrite drawing if this is the highlighted object", "\n", "if", "(", "obj", "in", "self", ".", "highlightObjs", "or", "name", "==", "self", ".", "highlightObjLabel", ")", ":", "\n", "# First clear everything below of the polygon", "\n", "                ", "qp2", ".", "setCompositionMode", "(", "QtGui", ".", "QPainter", ".", "CompositionMode_Clear", ")", "\n", "qp2", ".", "drawPolygon", "(", "polyToDraw", ")", "\n", "qp2", ".", "setCompositionMode", "(", "\n", "QtGui", ".", "QPainter", ".", "CompositionMode_SourceOver", ")", "\n", "# Set the drawing to a special pattern", "\n", "brush", "=", "QtGui", ".", "QBrush", "(", "col", ",", "QtCore", ".", "Qt", ".", "DiagCrossPattern", ")", "\n", "qp2", ".", "setBrush", "(", "brush", ")", "\n", "\n", "", "qp2", ".", "drawPolygon", "(", "polyToDraw", ")", "\n", "\n", "# Draw outline of selected object dotted", "\n", "", "for", "obj", "in", "self", ".", "highlightObjs", ":", "\n", "            ", "brush", "=", "QtGui", ".", "QBrush", "(", "QtCore", ".", "Qt", ".", "NoBrush", ")", "\n", "qp2", ".", "setBrush", "(", "brush", ")", "\n", "qp2", ".", "setPen", "(", "QtCore", ".", "Qt", ".", "DashLine", ")", "\n", "polyToDraw", "=", "self", ".", "getPolygon", "(", "\n", "obj", ")", "*", "QtGui", ".", "QTransform", ".", "fromScale", "(", "self", ".", "scale", ",", "self", ".", "scale", ")", "\n", "qp2", ".", "drawPolygon", "(", "polyToDraw", ")", "\n", "\n", "# End the drawing of the overlay", "\n", "", "qp2", ".", "end", "(", ")", "\n", "# Save QPainter settings to stack", "\n", "qp", ".", "save", "(", ")", "\n", "# Define transparency", "\n", "qp", ".", "setOpacity", "(", "self", ".", "config", ".", "transp", ")", "\n", "# Draw the overlay image", "\n", "qp", ".", "drawImage", "(", "self", ".", "xoff", ",", "self", ".", "yoff", ",", "overlay", ")", "\n", "# Restore settings", "\n", "qp", ".", "restore", "(", ")", "\n", "\n", "return", "overlay", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.drawDrawRect": [[1613, 1669], ["qp.save", "qp.setBrush", "qp.setFont", "PyQt5.QtGui.QPen", "qp.setPen", "qp.restore", "PyQt5.QtGui.QBrush", "PyQt5.QtGui.QFont", "copy.deepcopy", "copy.deepcopy.width", "copy.deepcopy.height", "copy.deepcopy.setX", "copy.deepcopy.setY", "copy.deepcopy.setWidth", "copy.deepcopy.setHeight", "c.get_colour", "PyQt5.QtGui.QPen.setColor", "PyQt5.QtGui.QPen.setWidth", "qp.setPen", "qp.drawRect", "copy.deepcopy", "copy.deepcopy.width", "copy.deepcopy.height", "copy.deepcopy.setX", "copy.deepcopy.setY", "copy.deepcopy.setWidth", "copy.deepcopy.setHeight", "PyQt5.QtGui.QPen.setColor", "PyQt5.QtGui.QPen.setWidth", "qp.setPen", "qp.drawRect", "PyQt5.QtGui.QPen.setColor", "qp.setPen", "qp.drawText", "PyQt5.QtGui.QColor", "PyQt5.QtGui.QColor", "PyQt5.QtCore.QPoint", "c.bbox.x", "c.bbox.y", "cityscapesLabelTool.CityscapesLabelTool.in_progress_bbox.x", "cityscapesLabelTool.CityscapesLabelTool.in_progress_bbox.y"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.save", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CorrectionBox.get_colour"], ["", "def", "drawDrawRect", "(", "self", ",", "qp", ")", ":", "\n", "\n", "        ", "qp", ".", "save", "(", ")", "\n", "qp", ".", "setBrush", "(", "QtGui", ".", "QBrush", "(", "QtCore", ".", "Qt", ".", "NoBrush", ")", ")", "\n", "qp", ".", "setFont", "(", "QtGui", ".", "QFont", "(", "'QFont::AnyStyle'", ",", "14", ")", ")", "\n", "thickPen", "=", "QtGui", ".", "QPen", "(", ")", "\n", "qp", ".", "setPen", "(", "thickPen", ")", "\n", "\n", "for", "c", "in", "self", ".", "corrections", ":", "\n", "            ", "rect", "=", "copy", ".", "deepcopy", "(", "c", ".", "bbox", ")", "\n", "\n", "width", "=", "rect", ".", "width", "(", ")", "\n", "height", "=", "rect", ".", "height", "(", ")", "\n", "rect", ".", "setX", "(", "c", ".", "bbox", ".", "x", "(", ")", "*", "self", ".", "scale", "+", "self", ".", "xoff", ")", "\n", "rect", ".", "setY", "(", "c", ".", "bbox", ".", "y", "(", ")", "*", "self", ".", "scale", "+", "self", ".", "yoff", ")", "\n", "\n", "rect", ".", "setWidth", "(", "width", "*", "self", ".", "scale", ")", "\n", "rect", ".", "setHeight", "(", "height", "*", "self", ".", "scale", ")", "\n", "\n", "if", "c", ".", "selected", ":", "\n", "                ", "thickPen", ".", "setColor", "(", "QtGui", ".", "QColor", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "if", "c", ".", "type", "==", "CorrectionBox", ".", "types", ".", "QUESTION", ":", "\n", "                    ", "descr", "=", "\"QUESTION\"", "\n", "", "elif", "c", ".", "type", "==", "CorrectionBox", ".", "types", ".", "RESOLVED", ":", "\n", "                    ", "descr", "=", "\"FIXED\"", "\n", "", "else", ":", "\n", "                    ", "descr", "=", "\"ERROR\"", "\n", "", "qp", ".", "setPen", "(", "thickPen", ")", "\n", "qp", ".", "drawText", "(", "QtCore", ".", "QPoint", "(", "self", ".", "xoff", ",", "self", ".", "yoff", "+", "self", ".", "h", "+", "20", ")", ",", "\n", "\"(%s: %s)\"", "%", "(", "descr", ",", "c", ".", "annotation", ")", ")", "\n", "pen_width", "=", "6", "\n", "", "else", ":", "\n", "                ", "pen_width", "=", "3", "\n", "\n", "", "colour", "=", "c", ".", "get_colour", "(", ")", "\n", "thickPen", ".", "setColor", "(", "colour", ")", "\n", "thickPen", ".", "setWidth", "(", "pen_width", ")", "\n", "qp", ".", "setPen", "(", "thickPen", ")", "\n", "qp", ".", "drawRect", "(", "rect", ")", "\n", "\n", "", "if", "self", ".", "in_progress_bbox", "is", "not", "None", ":", "\n", "            ", "rect", "=", "copy", ".", "deepcopy", "(", "self", ".", "in_progress_bbox", ")", "\n", "width", "=", "rect", ".", "width", "(", ")", "\n", "height", "=", "rect", ".", "height", "(", ")", "\n", "rect", ".", "setX", "(", "self", ".", "in_progress_bbox", ".", "x", "(", ")", "*", "self", ".", "scale", "+", "self", ".", "xoff", ")", "\n", "rect", ".", "setY", "(", "self", ".", "in_progress_bbox", ".", "y", "(", ")", "*", "self", ".", "scale", "+", "self", ".", "yoff", ")", "\n", "\n", "rect", ".", "setWidth", "(", "width", "*", "self", ".", "scale", ")", "\n", "rect", ".", "setHeight", "(", "height", "*", "self", ".", "scale", ")", "\n", "\n", "thickPen", ".", "setColor", "(", "QtGui", ".", "QColor", "(", "255", ",", "0", ",", "0", ")", ")", "\n", "thickPen", ".", "setWidth", "(", "3", ")", "\n", "qp", ".", "setPen", "(", "thickPen", ")", "\n", "qp", ".", "drawRect", "(", "rect", ")", "\n", "\n", "", "qp", ".", "restore", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.drawDrawPoly": [[1673, 1741], ["cityscapesLabelTool.CityscapesLabelTool.drawPoly.isEmpty", "qp.save", "PyQt5.QtGui.QPolygonF", "qp.setBrush", "PyQt5.QtGui.QColor", "qp.setPen", "qp.setPen", "range", "qp.restore", "PyQt5.QtGui.QPolygonF.append", "PyQt5.QtGui.QPolygonF.translate", "PyQt5.QtGui.QBrush", "qp.drawPolyline", "qp.drawPolygon", "cityscapesLabelTool.CityscapesLabelTool.getClosestPoint", "PyQt5.QtGui.QPen", "PyQt5.QtGui.QPen.setWidth", "qp.setPen", "qp.drawLine", "cityscapesLabelTool.CityscapesLabelTool.drawPoint", "PyQt5.QtGui.QPolygonF.size", "cityscapesLabelTool.CityscapesLabelTool.drawPoint", "PyQt5.QtGui.QTransform.fromScale", "PyQt5.QtGui.QPolygonF.first", "cityscapesLabelTool.CityscapesLabelTool.drawPoly.size"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.save", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.getClosestPoint", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.drawPoint", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.drawPoint", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size"], ["", "def", "drawDrawPoly", "(", "self", ",", "qp", ",", "transform", "=", "None", ")", ":", "\n", "# Nothing to do?", "\n", "        ", "if", "self", ".", "drawPoly", ".", "isEmpty", "(", ")", ":", "\n", "            ", "return", "\n", "", "if", "not", "self", ".", "image", ":", "\n", "            ", "return", "\n", "\n", "# Save QPainter settings to stack", "\n", "", "qp", ".", "save", "(", ")", "\n", "\n", "# The polygon - make a copy", "\n", "poly", "=", "QtGui", ".", "QPolygonF", "(", "self", ".", "drawPoly", ")", "\n", "\n", "# Append the current mouse position", "\n", "if", "not", "self", ".", "drawPolyClosed", "and", "(", "self", ".", "mousePosScaled", "is", "not", "None", ")", ":", "\n", "            ", "poly", ".", "append", "(", "self", ".", "mousePosScaled", ")", "\n", "\n", "# Transform", "\n", "", "if", "not", "transform", ":", "\n", "            ", "poly", "=", "poly", "*", "QtGui", ".", "QTransform", ".", "fromScale", "(", "self", ".", "scale", ",", "self", ".", "scale", ")", "\n", "poly", ".", "translate", "(", "self", ".", "xoff", ",", "self", ".", "yoff", ")", "\n", "", "else", ":", "\n", "            ", "poly", "=", "poly", "*", "transform", "\n", "\n", "# Do not fill the polygon", "\n", "", "qp", ".", "setBrush", "(", "QtGui", ".", "QBrush", "(", "QtCore", ".", "Qt", ".", "NoBrush", ")", ")", "\n", "\n", "# Draw the polygon edges", "\n", "polyColor", "=", "QtGui", ".", "QColor", "(", "255", ",", "0", ",", "0", ")", "\n", "qp", ".", "setPen", "(", "polyColor", ")", "\n", "if", "not", "self", ".", "drawPolyClosed", ":", "\n", "            ", "qp", ".", "drawPolyline", "(", "poly", ")", "\n", "", "else", ":", "\n", "            ", "qp", ".", "drawPolygon", "(", "poly", ")", "\n", "\n", "# Get the ID of the closest point to the mouse", "\n", "", "if", "self", ".", "mousePosScaled", "is", "not", "None", ":", "\n", "            ", "closestPt", "=", "self", ".", "getClosestPoint", "(", "\n", "self", ".", "drawPoly", ",", "self", ".", "mousePosScaled", ")", "\n", "", "else", ":", "\n", "            ", "closestPt", "=", "(", "-", "1", ",", "-", "1", ")", "\n", "\n", "# If a polygon edge is selected, draw in bold", "\n", "", "if", "closestPt", "[", "0", "]", "!=", "closestPt", "[", "1", "]", ":", "\n", "            ", "thickPen", "=", "QtGui", ".", "QPen", "(", "polyColor", ")", "\n", "thickPen", ".", "setWidth", "(", "3", ")", "\n", "qp", ".", "setPen", "(", "thickPen", ")", "\n", "qp", ".", "drawLine", "(", "poly", "[", "closestPt", "[", "0", "]", "]", ",", "poly", "[", "closestPt", "[", "1", "]", "]", ")", "\n", "\n", "# Draw the polygon points", "\n", "", "qp", ".", "setPen", "(", "polyColor", ")", "\n", "startDrawingPts", "=", "0", "\n", "\n", "# A bit different if not closed", "\n", "if", "not", "self", ".", "drawPolyClosed", ":", "\n", "# Draw", "\n", "            ", "self", ".", "drawPoint", "(", "qp", ",", "poly", ".", "first", "(", ")", ",", "True", ",", "closestPt", "==", "\n", "(", "0", ",", "0", ")", "and", "self", ".", "drawPoly", ".", "size", "(", ")", ">", "1", ")", "\n", "# Do not draw again", "\n", "startDrawingPts", "=", "1", "\n", "\n", "# The next in red", "\n", "", "for", "pt", "in", "range", "(", "startDrawingPts", ",", "poly", ".", "size", "(", ")", ")", ":", "\n", "            ", "self", ".", "drawPoint", "(", "\n", "qp", ",", "poly", "[", "pt", "]", ",", "False", ",", "self", ".", "drawPolyClosed", "and", "closestPt", "==", "(", "pt", ",", "pt", ")", ")", "\n", "\n", "# Restore QPainter settings from stack", "\n", "", "qp", ".", "restore", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.drawLabelAtMouse": [[1743, 1800], ["qp.save", "PyQt5.QtCore.QRect", "PyQt5.QtCore.QRect.setTopLeft", "PyQt5.QtCore.QRect.setBottomRight", "qp.setPen", "PyQt5.QtGui.QFont", "qp.setFont", "qp.setOpacity", "qp.drawText", "qp.restore", "cityscapesLabelTool.CityscapesLabelTool.drawPoly.isEmpty", "cityscapesLabelTool.CityscapesLabelTool.toolbar.height", "mouse.y", "mouse.y", "PyQt5.QtCore.QPoint", "PyQt5.QtCore.QPoint", "PyQt5.QtGui.QColor", "cityscapesLabelTool.CityscapesLabelTool.image.isNull", "mouse.y", "mouse.y", "mouse.y", "mouse.x", "mouse.x"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.save"], ["", "def", "drawLabelAtMouse", "(", "self", ",", "qp", ")", ":", "\n", "# Nothing to do without a highlighted object", "\n", "        ", "if", "not", "self", ".", "highlightObjs", ":", "\n", "            ", "return", "\n", "# Also we do not want to draw the label, if we have a drawn polygon", "\n", "", "if", "not", "self", ".", "drawPoly", ".", "isEmpty", "(", ")", ":", "\n", "            ", "return", "\n", "# Nothing to without a mouse position", "\n", "", "if", "not", "self", ".", "mousePos", ":", "\n", "            ", "return", "\n", "\n", "# Save QPainter settings to stack", "\n", "", "qp", ".", "save", "(", ")", "\n", "\n", "# That is the mouse positiong", "\n", "mouse", "=", "self", ".", "mousePos", "\n", "\n", "# Will show zoom", "\n", "showZoom", "=", "self", ".", "config", ".", "zoom", "and", "not", "self", ".", "image", ".", "isNull", "(", ")", "and", "self", ".", "w", "and", "self", ".", "h", "\n", "\n", "# The text that is written next to the mouse", "\n", "mouseText", "=", "self", ".", "highlightObjs", "[", "-", "1", "]", ".", "label", "\n", "\n", "# Where to write the text", "\n", "# Depends on the zoom (additional offset to mouse to make space for zoom?)", "\n", "# The location in the image (if we are at the top we want to write below of the mouse)", "\n", "off", "=", "36", "\n", "if", "showZoom", ":", "\n", "            ", "off", "+=", "self", ".", "config", ".", "zoomSize", "/", "2", "\n", "", "if", "mouse", ".", "y", "(", ")", "-", "off", ">", "self", ".", "toolbar", ".", "height", "(", ")", ":", "\n", "            ", "top", "=", "mouse", ".", "y", "(", ")", "-", "off", "\n", "btm", "=", "mouse", ".", "y", "(", ")", "\n", "vAlign", "=", "QtCore", ".", "Qt", ".", "AlignTop", "\n", "", "else", ":", "\n", "# The height of the cursor", "\n", "            ", "if", "not", "showZoom", ":", "\n", "                ", "off", "+=", "20", "\n", "", "top", "=", "mouse", ".", "y", "(", ")", "\n", "btm", "=", "mouse", ".", "y", "(", ")", "+", "off", "\n", "vAlign", "=", "QtCore", ".", "Qt", ".", "AlignBottom", "\n", "\n", "# Here we can draw", "\n", "", "rect", "=", "QtCore", ".", "QRect", "(", ")", "\n", "rect", ".", "setTopLeft", "(", "QtCore", ".", "QPoint", "(", "mouse", ".", "x", "(", ")", "-", "100", ",", "top", ")", ")", "\n", "rect", ".", "setBottomRight", "(", "QtCore", ".", "QPoint", "(", "mouse", ".", "x", "(", ")", "+", "100", ",", "btm", ")", ")", "\n", "\n", "# The color", "\n", "qp", ".", "setPen", "(", "QtGui", ".", "QColor", "(", "'white'", ")", ")", "\n", "# The font to use", "\n", "font", "=", "QtGui", ".", "QFont", "(", "\"Helvetica\"", ",", "20", ",", "QtGui", ".", "QFont", ".", "Bold", ")", "\n", "qp", ".", "setFont", "(", "font", ")", "\n", "# Non-transparent", "\n", "qp", ".", "setOpacity", "(", "1", ")", "\n", "# Draw the text, horizontally centered", "\n", "qp", ".", "drawText", "(", "rect", ",", "QtCore", ".", "Qt", ".", "AlignHCenter", "|", "vAlign", ",", "mouseText", ")", "\n", "# Restore settings", "\n", "qp", ".", "restore", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.drawZoom": [[1802, 1851], ["PyQt5.QtCore.QRectF", "PyQt5.QtCore.QRectF", "qp.drawImage", "cityscapesLabelTool.CityscapesLabelTool.image.isNull", "cityscapesLabelTool.CityscapesLabelTool.drawPoly.isEmpty", "PyQt5.QtGui.QTransform", "PyQt5.QtGui.QPolygonF", "PyQt5.QtGui.QPolygonF.append", "PyQt5.QtGui.QPolygonF.append", "PyQt5.QtGui.QPolygonF.append", "PyQt5.QtGui.QPolygonF.append", "PyQt5.QtGui.QPolygonF", "PyQt5.QtGui.QPolygonF.append", "PyQt5.QtGui.QPolygonF.append", "PyQt5.QtGui.QPolygonF.append", "PyQt5.QtGui.QPolygonF.append", "PyQt5.QtGui.QTransform.quadToQuad", "pix.x", "pix.y", "mouse.x", "mouse.y", "PyQt5.QtCore.QRectF.topLeft", "PyQt5.QtCore.QRectF.topRight", "PyQt5.QtCore.QRectF.bottomRight", "PyQt5.QtCore.QRectF.bottomLeft", "PyQt5.QtCore.QRectF.topLeft", "PyQt5.QtCore.QRectF.topRight", "PyQt5.QtCore.QRectF.bottomRight", "PyQt5.QtCore.QRectF.bottomLeft", "qp.setClipRect", "cityscapesLabelTool.CityscapesLabelTool.drawDrawPoly", "print"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.drawImage", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.drawDrawPoly"], ["", "def", "drawZoom", "(", "self", ",", "qp", ",", "overlay", ")", ":", "\n", "# Zoom disabled?", "\n", "        ", "if", "not", "self", ".", "config", ".", "zoom", ":", "\n", "            ", "return", "\n", "# No image", "\n", "", "if", "self", ".", "image", ".", "isNull", "(", ")", "or", "not", "self", ".", "w", "or", "not", "self", ".", "h", ":", "\n", "            ", "return", "\n", "# No mouse", "\n", "", "if", "not", "self", ".", "mousePos", ":", "\n", "            ", "return", "\n", "\n", "# Abbrevation for the zoom window size", "\n", "", "zoomSize", "=", "self", ".", "config", ".", "zoomSize", "\n", "# Abbrevation for the mouse position", "\n", "mouse", "=", "self", ".", "mousePos", "\n", "\n", "# The pixel that is the zoom center", "\n", "pix", "=", "self", ".", "mousePosScaled", "\n", "# The size of the part of the image that is drawn in the zoom window", "\n", "selSize", "=", "zoomSize", "/", "(", "self", ".", "config", ".", "zoomFactor", "*", "self", ".", "config", ".", "zoomFactor", ")", "\n", "# The selection window for the image", "\n", "sel", "=", "QtCore", ".", "QRectF", "(", "pix", ".", "x", "(", ")", "-", "selSize", "/", "2", ",", "pix", ".", "y", "(", ")", "-", "\n", "selSize", "/", "2", ",", "selSize", ",", "selSize", ")", "\n", "# The selection window for the widget", "\n", "view", "=", "QtCore", ".", "QRectF", "(", "mouse", ".", "x", "(", ")", "-", "zoomSize", "/", "2", ",", "\n", "mouse", ".", "y", "(", ")", "-", "zoomSize", "/", "2", ",", "zoomSize", ",", "zoomSize", ")", "\n", "\n", "# Show the zoom image", "\n", "qp", ".", "drawImage", "(", "view", ",", "self", ".", "image", ",", "sel", ")", "\n", "\n", "# If we are currently drawing the polygon, we need to draw again in the zoom", "\n", "if", "not", "self", ".", "drawPoly", ".", "isEmpty", "(", ")", ":", "\n", "            ", "transform", "=", "QtGui", ".", "QTransform", "(", ")", "\n", "quadFrom", "=", "QtGui", ".", "QPolygonF", "(", ")", "\n", "quadFrom", ".", "append", "(", "sel", ".", "topLeft", "(", ")", ")", "\n", "quadFrom", ".", "append", "(", "sel", ".", "topRight", "(", ")", ")", "\n", "quadFrom", ".", "append", "(", "sel", ".", "bottomRight", "(", ")", ")", "\n", "quadFrom", ".", "append", "(", "sel", ".", "bottomLeft", "(", ")", ")", "\n", "quadTo", "=", "QtGui", ".", "QPolygonF", "(", ")", "\n", "quadTo", ".", "append", "(", "view", ".", "topLeft", "(", ")", ")", "\n", "quadTo", ".", "append", "(", "view", ".", "topRight", "(", ")", ")", "\n", "quadTo", ".", "append", "(", "view", ".", "bottomRight", "(", ")", ")", "\n", "quadTo", ".", "append", "(", "view", ".", "bottomLeft", "(", ")", ")", "\n", "if", "QtGui", ".", "QTransform", ".", "quadToQuad", "(", "quadFrom", ",", "quadTo", ",", "transform", ")", ":", "\n", "                ", "qp", ".", "setClipRect", "(", "view", ")", "\n", "# transform.translate(self.xoff,self.yoff)", "\n", "self", ".", "drawDrawPoly", "(", "qp", ",", "transform", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"not possible\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.mouseMoveEvent": [[1860, 1900], ["cityscapesLabelTool.CityscapesLabelTool.updateMousePos", "cityscapesLabelTool.CityscapesLabelTool.updateMouseObject", "cityscapesLabelTool.CityscapesLabelTool.update", "cityscapesLabelTool.CityscapesLabelTool.image.isNull", "event.localPos", "cityscapesLabelTool.CityscapesLabelTool.drawPoly.replace", "PyQt5.QtCore.QRectF", "cityscapesscripts.helpers.annotation.Point", "cityscapesLabelTool.CityscapesLabelTool.mousePosScaled.x", "cityscapesLabelTool.CityscapesLabelTool.mousePosScaled.y", "cityscapesLabelTool.CityscapesLabelTool.mousePressEvent.x", "cityscapesLabelTool.CityscapesLabelTool.mousePressEvent.y", "min", "min", "abs", "abs", "cityscapesLabelTool.CityscapesLabelTool.mousePosScaled.x", "cityscapesLabelTool.CityscapesLabelTool.mousePosScaled.y", "cityscapesLabelTool.CityscapesLabelTool.changedPolygon.append", "cityscapesLabelTool.CityscapesLabelTool.addChange"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.updateMousePos", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.updateMouseObject", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.update", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.addChange"], ["", "", "", "def", "mouseMoveEvent", "(", "self", ",", "event", ")", ":", "\n", "        ", "if", "self", ".", "image", ".", "isNull", "(", ")", "or", "self", ".", "w", "==", "0", "or", "self", ".", "h", "==", "0", ":", "\n", "            ", "return", "\n", "\n", "", "self", ".", "updateMousePos", "(", "event", ".", "localPos", "(", ")", ")", "\n", "\n", "if", "not", "self", ".", "config", ".", "correctionMode", ":", "\n", "# If we are dragging a point, update", "\n", "            ", "if", "self", ".", "draggedPt", ">=", "0", ":", "\n", "# Update the dragged point", "\n", "                ", "self", ".", "drawPoly", ".", "replace", "(", "self", ".", "draggedPt", ",", "self", ".", "mousePosScaled", ")", "\n", "# If the polygon is the polygon of the selected object,", "\n", "# update the object polygon and", "\n", "# keep track of the changes we do", "\n", "if", "self", ".", "selObjs", ":", "\n", "                    ", "obj", "=", "self", ".", "annotation", ".", "objects", "[", "self", ".", "selObjs", "[", "-", "1", "]", "]", "\n", "obj", ".", "polygon", "[", "self", ".", "draggedPt", "]", "=", "Point", "(", "\n", "self", ".", "mousePosScaled", ".", "x", "(", ")", ",", "self", ".", "mousePosScaled", ".", "y", "(", ")", ")", "\n", "# Check if we changed the object's polygon the first time", "\n", "if", "not", "obj", ".", "id", "in", "self", ".", "changedPolygon", ":", "\n", "                        ", "self", ".", "changedPolygon", ".", "append", "(", "obj", ".", "id", ")", "\n", "self", ".", "addChange", "(", "\n", "\"Changed polygon of object {0} with label {1}\"", ".", "format", "(", "obj", ".", "id", ",", "obj", ".", "label", ")", ")", "\n", "", "", "", "", "else", ":", "\n", "            ", "if", "self", ".", "in_progress_bbox", "is", "not", "None", ":", "\n", "                ", "p0", "=", "(", "self", ".", "mousePosScaled", ".", "x", "(", ")", ",", "self", ".", "mousePosScaled", ".", "y", "(", ")", ")", "\n", "p1", "=", "(", "self", ".", "mousePressEvent", ".", "x", "(", ")", ",", "self", ".", "mousePressEvent", ".", "y", "(", ")", ")", "\n", "xy", "=", "min", "(", "p0", "[", "0", "]", ",", "p1", "[", "0", "]", ")", ",", "min", "(", "p0", "[", "1", "]", ",", "p1", "[", "1", "]", ")", "\n", "w", ",", "h", "=", "abs", "(", "p0", "[", "0", "]", "-", "p1", "[", "0", "]", ")", ",", "abs", "(", "p0", "[", "1", "]", "-", "p1", "[", "1", "]", ")", "\n", "self", ".", "in_progress_bbox", "=", "QtCore", ".", "QRectF", "(", "xy", "[", "0", "]", ",", "xy", "[", "1", "]", ",", "w", ",", "h", ")", "\n", "# p.set_x(xy[0])", "\n", "# p.set_y(xy[1])", "\n", "# p.set_width(w)", "\n", "# p.set_height(h)", "\n", "\n", "# Update the object selected by the mouse", "\n", "", "", "self", ".", "updateMouseObject", "(", ")", "\n", "\n", "# Redraw", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.leaveEvent": [[1902, 1906], ["None"], "methods", ["None"], ["", "def", "leaveEvent", "(", "self", ",", "event", ")", ":", "\n", "        ", "self", ".", "mousePos", "=", "None", "\n", "self", ".", "mousePosScaled", "=", "None", "\n", "self", ".", "mouseOutsideImage", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.mousePressEvent": [[1910, 1974], ["event.buttons", "cityscapesLabelTool.CityscapesLabelTool.updateMousePos", "cityscapesLabelTool.CityscapesLabelTool.update", "PyQt5.QtWidgets.QApplication.keyboardModifiers", "event.localPos", "event.button", "PyQt5.QtCore.QRectF", "event.button", "cityscapesLabelTool.CityscapesLabelTool.toggleZoom", "cityscapesLabelTool.CityscapesLabelTool.getClosestPoint", "cityscapesLabelTool.CityscapesLabelTool.mousePosScaled.x", "cityscapesLabelTool.CityscapesLabelTool.mousePosScaled.y", "event.localPos", "cityscapesLabelTool.CityscapesLabelTool.update", "cityscapesLabelTool.CityscapesLabelTool.drawPoly.insert", "obj.polygon.insert", "cityscapesLabelTool.CityscapesLabelTool.changedPolygon.append", "cityscapesLabelTool.CityscapesLabelTool.addChange", "cityscapesscripts.helpers.annotation.Point", "cityscapesLabelTool.CityscapesLabelTool.changedPolygon.append", "cityscapesLabelTool.CityscapesLabelTool.addChange", "cityscapesLabelTool.CityscapesLabelTool.mousePosScaled.x", "cityscapesLabelTool.CityscapesLabelTool.mousePosScaled.y"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.updateMousePos", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.update", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.toggleZoom", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.getClosestPoint", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.update", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.addChange", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.addChange"], ["", "def", "mousePressEvent", "(", "self", ",", "event", ")", ":", "\n", "\n", "        ", "self", ".", "mouseButtons", "=", "event", ".", "buttons", "(", ")", "\n", "shiftPressed", "=", "QtWidgets", ".", "QApplication", ".", "keyboardModifiers", "(", ")", "==", "QtCore", ".", "Qt", ".", "ShiftModifier", "\n", "self", ".", "updateMousePos", "(", "event", ".", "localPos", "(", ")", ")", "\n", "self", ".", "mousePressEvent", "=", "self", ".", "mousePosScaled", "\n", "# Handle left click", "\n", "if", "event", ".", "button", "(", ")", "==", "QtCore", ".", "Qt", ".", "LeftButton", ":", "\n", "\n", "# If the drawn polygon is closed and the mouse clicks a point,", "\n", "# Then this one is dragged around", "\n", "            ", "if", "not", "self", ".", "config", ".", "correctionMode", ":", "\n", "                ", "if", "self", ".", "drawPolyClosed", "and", "(", "self", ".", "mousePosScaled", "is", "not", "None", ")", ":", "\n", "                    ", "closestPt", "=", "self", ".", "getClosestPoint", "(", "\n", "self", ".", "drawPoly", ",", "self", ".", "mousePosScaled", ")", "\n", "if", "shiftPressed", ":", "\n", "                        ", "if", "closestPt", "[", "0", "]", "==", "closestPt", "[", "1", "]", ":", "\n", "                            ", "del", "self", ".", "drawPoly", "[", "closestPt", "[", "0", "]", "]", "\n", "\n", "# If the polygon is the polygon of the selected object,", "\n", "# update the object", "\n", "# and keep track of the changes we do", "\n", "if", "self", ".", "selObjs", ":", "\n", "                                ", "obj", "=", "self", ".", "annotation", ".", "objects", "[", "self", ".", "selObjs", "[", "-", "1", "]", "]", "\n", "del", "obj", ".", "polygon", "[", "closestPt", "[", "0", "]", "]", "\n", "# Check if we changed the object's polygon the first time", "\n", "if", "not", "obj", ".", "id", "in", "self", ".", "changedPolygon", ":", "\n", "                                    ", "self", ".", "changedPolygon", ".", "append", "(", "obj", ".", "id", ")", "\n", "self", ".", "addChange", "(", "\n", "\"Changed polygon of object {0} with label {1}\"", ".", "format", "(", "obj", ".", "id", ",", "obj", ".", "label", ")", ")", "\n", "\n", "", "", "self", ".", "update", "(", ")", "\n", "", "", "else", ":", "\n", "# If we got a point (or nothing), we make it dragged", "\n", "                        ", "if", "closestPt", "[", "0", "]", "==", "closestPt", "[", "1", "]", ":", "\n", "                            ", "self", ".", "draggedPt", "=", "closestPt", "[", "0", "]", "\n", "# If we got an edge, we insert a point and make it dragged", "\n", "", "else", ":", "\n", "                            ", "self", ".", "drawPoly", ".", "insert", "(", "\n", "closestPt", "[", "1", "]", ",", "self", ".", "mousePosScaled", ")", "\n", "self", ".", "draggedPt", "=", "closestPt", "[", "1", "]", "\n", "# If the polygon is the polygon of the selected object,", "\n", "# update the object", "\n", "# and keep track of the changes we do", "\n", "if", "self", ".", "selObjs", ":", "\n", "                                ", "obj", "=", "self", ".", "annotation", ".", "objects", "[", "self", ".", "selObjs", "[", "-", "1", "]", "]", "\n", "obj", ".", "polygon", ".", "insert", "(", "closestPt", "[", "1", "]", ",", "Point", "(", "\n", "self", ".", "mousePosScaled", ".", "x", "(", ")", ",", "self", ".", "mousePosScaled", ".", "y", "(", ")", ")", ")", "\n", "# Check if we changed the object's polygon the first time", "\n", "if", "not", "obj", ".", "id", "in", "self", ".", "changedPolygon", ":", "\n", "                                    ", "self", ".", "changedPolygon", ".", "append", "(", "obj", ".", "id", ")", "\n", "self", ".", "addChange", "(", "\n", "\"Changed polygon of object {0} with label {1}\"", ".", "format", "(", "obj", ".", "id", ",", "obj", ".", "label", ")", ")", "\n", "", "", "", "", "", "", "else", ":", "\n", "                ", "assert", "self", ".", "in_progress_bbox", "==", "None", "\n", "self", ".", "in_progress_bbox", "=", "QtCore", ".", "QRectF", "(", "\n", "self", ".", "mousePosScaled", ".", "x", "(", ")", ",", "self", ".", "mousePosScaled", ".", "y", "(", ")", ",", "0", ",", "0", ")", "\n", "\n", "# Handle right click", "\n", "", "", "elif", "event", ".", "button", "(", ")", "==", "QtCore", ".", "Qt", ".", "RightButton", ":", "\n", "            ", "self", ".", "toggleZoom", "(", "event", ".", "localPos", "(", ")", ")", "\n", "\n", "# Redraw", "\n", "", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.mouseReleaseEvent": [[1980, 2038], ["event.buttons", "cityscapesLabelTool.CityscapesLabelTool.update", "event.modifiers", "event.modifiers", "event.modifiers", "event.button", "event.button", "cityscapesLabelTool.CityscapesLabelTool.toggleZoom", "event.localPos", "cityscapesLabelTool.CityscapesLabelTool.intersectPolygon", "cityscapesLabelTool.CityscapesLabelTool.mergePolygon", "cityscapesLabelTool.CityscapesLabelTool.selectObject", "cityscapesLabelTool.CityscapesLabelTool.ptClosesPoly", "cityscapesLabelTool.CityscapesLabelTool.in_progress_bbox.width", "PyQt5.QtWidgets.QInputDialog.getText", "cityscapesLabelTool.CityscapesLabelTool.closePolygon", "cityscapesLabelTool.CityscapesLabelTool.corrections.append", "cityscapesLabelTool.CityscapesLabelTool.corrections[].unselect", "cityscapesLabelTool.CityscapesLabelTool.corrections[].select", "cityscapesLabelTool.CityscapesLabelTool.addChange", "cityscapesLabelTool.CityscapesLabelTool.addPtToPoly", "cityscapesLabelTool.CorrectionBox", "len", "cityscapesLabelTool.CityscapesLabelTool.drawPoly.isEmpty"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.update", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.toggleZoom", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.intersectPolygon", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.mergePolygon", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.selectObject", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.ptClosesPoly", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.closePolygon", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CorrectionBox.unselect", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CorrectionBox.select", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.addChange", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.addPtToPoly"], ["", "def", "mouseReleaseEvent", "(", "self", ",", "event", ")", ":", "\n", "        ", "self", ".", "mouseButtons", "=", "event", ".", "buttons", "(", ")", "\n", "ctrlPressed", "=", "event", ".", "modifiers", "(", ")", "&", "QtCore", ".", "Qt", ".", "ControlModifier", "\n", "shiftPressed", "=", "event", ".", "modifiers", "(", ")", "&", "QtCore", ".", "Qt", ".", "ShiftModifier", "\n", "altPressed", "=", "event", ".", "modifiers", "(", ")", "&", "QtCore", ".", "Qt", ".", "AltModifier", "\n", "\n", "# Handle left click", "\n", "if", "event", ".", "button", "(", ")", "==", "QtCore", ".", "Qt", ".", "LeftButton", ":", "\n", "            ", "if", "not", "self", ".", "config", ".", "correctionMode", ":", "\n", "# Check if Ctrl is pressed", "\n", "                ", "if", "ctrlPressed", ":", "\n", "# If also Shift is pressed and we have a closed polygon, then we intersect", "\n", "# the polygon with the mouse object", "\n", "                    ", "if", "shiftPressed", "and", "self", ".", "drawPolyClosed", ":", "\n", "                        ", "self", ".", "intersectPolygon", "(", ")", "\n", "# If also Alt is pressed and we have a closed polygon, then we merge", "\n", "# the polygon with the mouse object", "\n", "", "if", "altPressed", "and", "self", ".", "drawPolyClosed", ":", "\n", "                        ", "self", ".", "mergePolygon", "(", ")", "\n", "# Make the current mouse object the selected", "\n", "# and process the selection", "\n", "", "else", ":", "\n", "                        ", "self", ".", "selectObject", "(", ")", "\n", "# Add the point to the drawn polygon if not already closed", "\n", "", "", "elif", "not", "self", ".", "drawPolyClosed", ":", "\n", "# If the mouse would close the poly make sure to do so", "\n", "                    ", "if", "self", ".", "ptClosesPoly", "(", ")", ":", "\n", "                        ", "self", ".", "closePolygon", "(", ")", "\n", "", "elif", "self", ".", "mousePosScaled", "is", "not", "None", ":", "\n", "                        ", "if", "not", "self", ".", "drawPolyClosed", "and", "self", ".", "drawPoly", ".", "isEmpty", "(", ")", ":", "\n", "                            ", "self", ".", "mousePosOnZoom", "=", "self", ".", "mousePos", "\n", "", "self", ".", "addPtToPoly", "(", "self", ".", "mousePosScaled", ")", "\n", "# Otherwise end a possible dragging", "\n", "", "", "elif", "self", ".", "drawPolyClosed", ":", "\n", "                    ", "self", ".", "draggedPt", "=", "-", "1", "\n", "", "", "else", ":", "\n", "                ", "if", "self", ".", "in_progress_bbox", "is", "not", "None", ":", "\n", "                    ", "if", "self", ".", "in_progress_bbox", ".", "width", "(", ")", ">", "20", ":", "\n", "                        ", "description", "=", "QtWidgets", ".", "QInputDialog", ".", "getText", "(", "\n", "self", ",", "\"Error Description\"", ",", "\"Please describe the labeling error briefly.\"", ")", "\n", "if", "description", "[", "1", "]", "and", "description", "[", "0", "]", ":", "\n", "                            ", "self", ".", "corrections", ".", "append", "(", "CorrectionBox", "(", "\n", "self", ".", "in_progress_bbox", ",", "annotation", "=", "description", "[", "0", "]", ")", ")", "\n", "# last_annotation = self.in_progress_annotation  #TODO: self?", "\n", "self", ".", "corrections", "[", "self", ".", "selected_correction", "]", ".", "unselect", "(", "\n", ")", "\n", "self", ".", "selected_correction", "=", "len", "(", "self", ".", "corrections", ")", "-", "1", "\n", "self", ".", "corrections", "[", "self", ".", "selected_correction", "]", ".", "select", "(", ")", "\n", "self", ".", "addChange", "(", "\"Added correction.\"", ")", "\n", "", "", "self", ".", "in_progress_annotation", "=", "None", "\n", "self", ".", "in_progress_bbox", "=", "None", "\n", "\n", "# Handle right click", "\n", "", "", "", "elif", "event", ".", "button", "(", ")", "==", "QtCore", ".", "Qt", ".", "RightButton", ":", "\n", "            ", "self", ".", "toggleZoom", "(", "event", ".", "localPos", "(", ")", ")", "\n", "\n", "# Redraw", "\n", "", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.wheelEvent": [[2040, 2056], ["event.angleDelta().y", "cityscapesLabelTool.CityscapesLabelTool.update", "event.modifiers", "max", "min", "max", "min", "event.angleDelta"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.update"], ["", "def", "wheelEvent", "(", "self", ",", "event", ")", ":", "\n", "        ", "deltaDegree", "=", "event", ".", "angleDelta", "(", ")", ".", "y", "(", ")", "/", "8", "# Rotation in degree", "\n", "deltaSteps", "=", "deltaDegree", "/", "15", "# Usually one step on the mouse is 15 degrees", "\n", "\n", "if", "self", ".", "config", ".", "zoom", ":", "\n", "# If shift is pressed, change zoom window size", "\n", "            ", "if", "event", ".", "modifiers", "(", ")", "and", "QtCore", ".", "Qt", ".", "Key_Shift", ":", "\n", "                ", "self", ".", "config", ".", "zoomSize", "+=", "deltaSteps", "*", "10", "\n", "self", ".", "config", ".", "zoomSize", "=", "max", "(", "self", ".", "config", ".", "zoomSize", ",", "10", ")", "\n", "self", ".", "config", ".", "zoomSize", "=", "min", "(", "self", ".", "config", ".", "zoomSize", ",", "1000", ")", "\n", "# Change zoom factor", "\n", "", "else", ":", "\n", "                ", "self", ".", "config", ".", "zoomFactor", "+=", "deltaSteps", "*", "0.05", "\n", "self", ".", "config", ".", "zoomFactor", "=", "max", "(", "self", ".", "config", ".", "zoomFactor", ",", "0.1", ")", "\n", "self", ".", "config", ".", "zoomFactor", "=", "min", "(", "self", ".", "config", ".", "zoomFactor", ",", "10", ")", "\n", "", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.keyPressEvent": [[2058, 2088], ["e.key", "PyQt5.QtWidgets.QApplication.setOverrideCursor", "PyQt5.QtGui.QCursor", "e.key", "cityscapesLabelTool.CityscapesLabelTool.update", "e.key", "cityscapesLabelTool.CityscapesLabelTool.update", "e.key", "cityscapesLabelTool.CityscapesLabelTool.select_next_correction", "e.key", "cityscapesLabelTool.CityscapesLabelTool.select_previous_correction", "e.key", "cityscapesLabelTool.CityscapesLabelTool.modify_correction_type", "e.key", "cityscapesLabelTool.CityscapesLabelTool.modify_correction_type", "e.key", "cityscapesLabelTool.CityscapesLabelTool.modify_correction_type", "e.key", "cityscapesLabelTool.CityscapesLabelTool.modify_correction_type", "cityscapesLabelTool.CityscapesLabelTool.delete_selected_annotation", "e.key", "cityscapesLabelTool.CityscapesLabelTool.modify_correction_description", "e.key"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.update", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.update", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.select_next_correction", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.select_previous_correction", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.modify_correction_type", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.modify_correction_type", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.modify_correction_type", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.modify_correction_type", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.delete_selected_annotation", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.modify_correction_description"], ["", "", "def", "keyPressEvent", "(", "self", ",", "e", ")", ":", "\n", "# Ctrl key changes mouse cursor", "\n", "        ", "if", "e", ".", "key", "(", ")", "==", "QtCore", ".", "Qt", ".", "Key_Control", ":", "\n", "            ", "QtWidgets", ".", "QApplication", ".", "setOverrideCursor", "(", "\n", "QtGui", ".", "QCursor", "(", "QtCore", ".", "Qt", ".", "PointingHandCursor", ")", ")", "\n", "# Backspace deletes last point from polygon", "\n", "", "elif", "e", ".", "key", "(", ")", "==", "QtCore", ".", "Qt", ".", "Key_Backspace", ":", "\n", "            ", "if", "not", "self", ".", "drawPolyClosed", ":", "\n", "                ", "del", "self", ".", "drawPoly", "[", "-", "1", "]", "\n", "self", ".", "update", "(", ")", "\n", "# set alpha to temporary zero", "\n", "", "", "elif", "e", ".", "key", "(", ")", "==", "QtCore", ".", "Qt", ".", "Key_0", ":", "\n", "            ", "self", ".", "transpTempZero", "=", "True", "\n", "self", ".", "update", "(", ")", "\n", "", "elif", "e", ".", "key", "(", ")", "==", "QtCore", ".", "Qt", ".", "Key_E", ":", "\n", "            ", "self", ".", "select_next_correction", "(", ")", "\n", "", "elif", "e", ".", "key", "(", ")", "==", "QtCore", ".", "Qt", ".", "Key_R", ":", "\n", "            ", "self", ".", "select_previous_correction", "(", ")", "\n", "", "elif", "e", ".", "key", "(", ")", "==", "QtCore", ".", "Qt", ".", "Key_1", ":", "\n", "            ", "self", ".", "modify_correction_type", "(", "CorrectionBox", ".", "types", ".", "TO_CORRECT", ")", "\n", "", "elif", "e", ".", "key", "(", ")", "==", "QtCore", ".", "Qt", ".", "Key_2", ":", "\n", "            ", "self", ".", "modify_correction_type", "(", "CorrectionBox", ".", "types", ".", "TO_REVIEW", ")", "\n", "", "elif", "e", ".", "key", "(", ")", "==", "QtCore", ".", "Qt", ".", "Key_3", ":", "\n", "            ", "self", ".", "modify_correction_type", "(", "CorrectionBox", ".", "types", ".", "RESOLVED", ")", "\n", "", "elif", "e", ".", "key", "(", ")", "==", "QtCore", ".", "Qt", ".", "Key_4", ":", "\n", "            ", "self", ".", "modify_correction_type", "(", "CorrectionBox", ".", "types", ".", "QUESTION", ")", "\n", "", "elif", "e", ".", "key", "(", ")", "==", "QtCore", ".", "Qt", ".", "Key_D", "and", "self", ".", "config", ".", "correctionMode", ":", "\n", "            ", "self", ".", "delete_selected_annotation", "(", ")", "\n", "", "elif", "e", ".", "key", "(", ")", "==", "QtCore", ".", "Qt", ".", "Key_M", "and", "self", ".", "config", ".", "correctionMode", ":", "\n", "            ", "self", ".", "modify_correction_description", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.keyReleaseEvent": [[2090, 2099], ["e.key", "PyQt5.QtWidgets.QApplication.restoreOverrideCursor", "cityscapesLabelTool.CityscapesLabelTool.update", "e.key", "e.key"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.update"], ["", "", "def", "keyReleaseEvent", "(", "self", ",", "e", ")", ":", "\n", "# Ctrl key changes mouse cursor", "\n", "        ", "if", "e", ".", "key", "(", ")", "==", "QtCore", ".", "Qt", ".", "Key_Control", ":", "\n", "            ", "QtWidgets", ".", "QApplication", ".", "restoreOverrideCursor", "(", ")", "\n", "# check for zero to release temporary zero", "\n", "# somehow, for the numpad key in some machines, a check on Insert is needed aswell", "\n", "", "elif", "e", ".", "key", "(", ")", "==", "QtCore", ".", "Qt", ".", "Key_0", "or", "e", ".", "key", "(", ")", "==", "QtCore", ".", "Qt", ".", "Key_Insert", ":", "\n", "            ", "self", ".", "transpTempZero", "=", "False", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.setTip": [[2107, 2112], ["action.setStatusTip", "action.setToolTip", "str", "s.toString", "action.shortcuts"], "methods", ["None"], ["", "", "def", "setTip", "(", "self", ",", "action", ",", "tip", ")", ":", "\n", "        ", "tip", "+=", "\" (Hotkeys: '\"", "+", "\"', '\"", ".", "join", "(", "[", "str", "(", "s", ".", "toString", "(", ")", ")", "for", "s", "in", "action", ".", "shortcuts", "(", ")", "]", ")", "+", "\"')\"", "\n", "action", ".", "setStatusTip", "(", "tip", ")", "\n", "action", ".", "setToolTip", "(", "tip", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.updateMousePos": [[2117, 2150], ["PyQt5.QtCore.QPointF", "PyQt5.QtCore.QPointF.setX", "PyQt5.QtCore.QPointF.setY", "PyQt5.QtCore.QPointF.setX", "PyQt5.QtCore.QPointF.setY", "PyQt5.QtCore.QPointF", "cityscapesLabelTool.CityscapesLabelTool.image.rect().contains", "max", "max", "min", "min", "cityscapesLabelTool.CityscapesLabelTool.image.rect().contains", "cityscapesLabelTool.CityscapesLabelTool.updateMouseObject", "cityscapesLabelTool.CityscapesLabelTool.update", "cityscapesLabelTool.CityscapesLabelTool.drawPoly.isEmpty", "pow", "round", "round", "float", "float", "PyQt5.QtCore.QPointF.toPoint", "PyQt5.QtCore.QPointF.x", "PyQt5.QtCore.QPointF.y", "PyQt5.QtCore.QPointF.x", "cityscapesLabelTool.CityscapesLabelTool.image.rect().right", "PyQt5.QtCore.QPointF.y", "cityscapesLabelTool.CityscapesLabelTool.image.rect().bottom", "PyQt5.QtCore.QPointF.toPoint", "cityscapesLabelTool.CityscapesLabelTool.image.rect", "cityscapesLabelTool.CityscapesLabelTool.image.rect", "PyQt5.QtCore.QPointF.x", "PyQt5.QtCore.QPointF.y", "cityscapesLabelTool.CityscapesLabelTool.image.rect", "cityscapesLabelTool.CityscapesLabelTool.image.rect", "cityscapesLabelTool.CityscapesLabelTool.mousePosOnZoom.x", "mousePosOrig.x", "cityscapesLabelTool.CityscapesLabelTool.mousePosOnZoom.y", "mousePosOrig.y"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.updateMouseObject", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.update"], ["", "def", "updateMousePos", "(", "self", ",", "mousePosOrig", ")", ":", "\n", "        ", "if", "self", ".", "config", ".", "zoomFactor", "<=", "1", "or", "(", "self", ".", "drawPolyClosed", "or", "self", ".", "drawPoly", ".", "isEmpty", "(", ")", ")", ":", "\n", "            ", "sens", "=", "1.0", "\n", "", "else", ":", "\n", "            ", "sens", "=", "1.0", "/", "pow", "(", "self", ".", "config", ".", "zoomFactor", ",", "3", ")", "\n", "\n", "", "if", "self", ".", "config", ".", "zoom", "and", "self", ".", "mousePosOnZoom", "is", "not", "None", ":", "\n", "            ", "mousePos", "=", "QtCore", ".", "QPointF", "(", "round", "(", "(", "1", "-", "sens", ")", "*", "self", ".", "mousePosOnZoom", ".", "x", "(", ")", "+", "(", "\n", "sens", ")", "*", "mousePosOrig", ".", "x", "(", ")", ")", ",", "round", "(", "(", "1", "-", "sens", ")", "*", "self", ".", "mousePosOnZoom", ".", "y", "(", ")", "+", "sens", "*", "mousePosOrig", ".", "y", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "mousePos", "=", "mousePosOrig", "\n", "", "mousePosScaled", "=", "QtCore", ".", "QPointF", "(", "float", "(", "mousePos", ".", "x", "(", "\n", ")", "-", "self", ".", "xoff", ")", "/", "self", ".", "scale", ",", "float", "(", "mousePos", ".", "y", "(", ")", "-", "self", ".", "yoff", ")", "/", "self", ".", "scale", ")", "\n", "mouseOutsideImage", "=", "not", "self", ".", "image", ".", "rect", "(", ")", ".", "contains", "(", "mousePosScaled", ".", "toPoint", "(", ")", ")", "\n", "\n", "mousePosScaled", ".", "setX", "(", "max", "(", "mousePosScaled", ".", "x", "(", ")", ",", "0.", ")", ")", "\n", "mousePosScaled", ".", "setY", "(", "max", "(", "mousePosScaled", ".", "y", "(", ")", ",", "0.", ")", ")", "\n", "mousePosScaled", ".", "setX", "(", "min", "(", "mousePosScaled", ".", "x", "(", ")", ",", "self", ".", "image", ".", "rect", "(", ")", ".", "right", "(", ")", ")", ")", "\n", "mousePosScaled", ".", "setY", "(", "\n", "min", "(", "mousePosScaled", ".", "y", "(", ")", ",", "self", ".", "image", ".", "rect", "(", ")", ".", "bottom", "(", ")", ")", ")", "\n", "\n", "if", "not", "self", ".", "image", ".", "rect", "(", ")", ".", "contains", "(", "mousePosScaled", ".", "toPoint", "(", ")", ")", ":", "\n", "            ", "self", ".", "mousePos", "=", "None", "\n", "self", ".", "mousePosScaled", "=", "None", "\n", "self", ".", "mousePosOrig", "=", "None", "\n", "self", ".", "updateMouseObject", "(", ")", "\n", "self", ".", "update", "(", ")", "\n", "return", "\n", "\n", "", "self", ".", "mousePos", "=", "mousePos", "\n", "self", ".", "mousePosScaled", "=", "mousePosScaled", "\n", "self", ".", "mousePosOrig", "=", "mousePosOrig", "\n", "self", ".", "mouseOutsideImage", "=", "mouseOutsideImage", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.toggleZoom": [[2152, 2165], ["cityscapesLabelTool.CityscapesLabelTool.updateMousePos", "cityscapesLabelTool.CityscapesLabelTool.updateMousePos", "cityscapesLabelTool.CityscapesLabelTool.drawPoly.replace"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.updateMousePos", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.updateMousePos"], ["", "def", "toggleZoom", "(", "self", ",", "mousePosOrig", ")", ":", "\n", "        ", "self", ".", "config", ".", "zoom", "=", "not", "self", ".", "config", ".", "zoom", "\n", "\n", "if", "self", ".", "config", ".", "zoom", ":", "\n", "            ", "self", ".", "mousePosOnZoom", "=", "self", ".", "mousePos", "\n", "# Update the mouse position afterwards", "\n", "self", ".", "updateMousePos", "(", "mousePosOrig", ")", "\n", "", "else", ":", "\n", "# Update the mouse position first", "\n", "            ", "self", ".", "updateMousePos", "(", "mousePosOrig", ")", "\n", "# Update the dragged point to the non-zoom point", "\n", "if", "not", "self", ".", "config", ".", "correctionMode", "and", "self", ".", "draggedPt", ">=", "0", ":", "\n", "                ", "self", ".", "drawPoly", ".", "replace", "(", "self", ".", "draggedPt", ",", "self", ".", "mousePosScaled", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.getClosestPoint": [[2170, 2210], ["range", "poly.size", "cityscapesLabelTool.CityscapesLabelTool.ptDist", "range", "poly.size", "poly.size", "PyQt5.QtCore.QLineF", "PyQt5.QtCore.QLineF.normalVector", "PyQt5.QtCore.QLineF", "PyQt5.QtCore.QPointF", "PyQt5.QtCore.QLineF.intersect", "poly.size", "pt.x", "pt.y", "cityscapesLabelTool.CityscapesLabelTool.ptDist", "pt.x", "QtCore.QLineF.normalVector.dx", "pt.y", "QtCore.QLineF.normalVector.dy"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.ptDist", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.src.preprocess_city.size", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.ptDist"], ["", "", "", "def", "getClosestPoint", "(", "self", ",", "poly", ",", "pt", ")", ":", "\n", "        ", "closest", "=", "(", "-", "1", ",", "-", "1", ")", "\n", "distTh", "=", "4.0", "\n", "dist", "=", "1e9", "# should be enough", "\n", "for", "i", "in", "range", "(", "poly", ".", "size", "(", ")", ")", ":", "\n", "            ", "curDist", "=", "self", ".", "ptDist", "(", "poly", "[", "i", "]", ",", "pt", ")", "\n", "if", "curDist", "<", "dist", ":", "\n", "                ", "closest", "=", "(", "i", ",", "i", ")", "\n", "dist", "=", "curDist", "\n", "# Close enough?", "\n", "", "", "if", "dist", "<=", "distTh", ":", "\n", "            ", "return", "closest", "\n", "\n", "# Otherwise see if the polygon is closed, but a line is close enough", "\n", "", "if", "self", ".", "drawPolyClosed", "and", "poly", ".", "size", "(", ")", ">=", "2", ":", "\n", "            ", "for", "i", "in", "range", "(", "poly", ".", "size", "(", ")", ")", ":", "\n", "                ", "pt1", "=", "poly", "[", "i", "]", "\n", "j", "=", "i", "+", "1", "\n", "if", "j", "==", "poly", ".", "size", "(", ")", ":", "\n", "                    ", "j", "=", "0", "\n", "", "pt2", "=", "poly", "[", "j", "]", "\n", "edge", "=", "QtCore", ".", "QLineF", "(", "pt1", ",", "pt2", ")", "\n", "normal", "=", "edge", ".", "normalVector", "(", ")", "\n", "normalThroughMouse", "=", "QtCore", ".", "QLineF", "(", "\n", "pt", ".", "x", "(", ")", ",", "pt", ".", "y", "(", ")", ",", "pt", ".", "x", "(", ")", "+", "normal", ".", "dx", "(", ")", ",", "pt", ".", "y", "(", ")", "+", "normal", ".", "dy", "(", ")", ")", "\n", "intersectionPt", "=", "QtCore", ".", "QPointF", "(", ")", "\n", "intersectionType", "=", "edge", ".", "intersect", "(", "\n", "normalThroughMouse", ",", "intersectionPt", ")", "\n", "if", "intersectionType", "==", "QtCore", ".", "QLineF", ".", "BoundedIntersection", ":", "\n", "                    ", "curDist", "=", "self", ".", "ptDist", "(", "intersectionPt", ",", "pt", ")", "\n", "if", "curDist", "<", "dist", ":", "\n", "                        ", "closest", "=", "(", "i", ",", "j", ")", "\n", "dist", "=", "curDist", "\n", "\n", "# Close enough?", "\n", "", "", "", "", "if", "dist", "<=", "distTh", ":", "\n", "            ", "return", "closest", "\n", "\n", "# If we didnt return yet, we didnt find anything", "\n", "", "return", "(", "-", "1", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.ptDist": [[2212, 2218], ["PyQt5.QtCore.QLineF", "PyQt5.QtCore.QLineF.length"], "methods", ["None"], ["", "def", "ptDist", "(", "self", ",", "pt1", ",", "pt2", ")", ":", "\n", "# A line between both", "\n", "        ", "line", "=", "QtCore", ".", "QLineF", "(", "pt1", ",", "pt2", ")", "\n", "# Length", "\n", "lineLength", "=", "line", ".", "length", "(", ")", "\n", "return", "lineLength", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.ptClosesPoly": [[2220, 2227], ["cityscapesLabelTool.CityscapesLabelTool.drawPoly.isEmpty", "cityscapesLabelTool.CityscapesLabelTool.getClosestPoint"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.getClosestPoint"], ["", "def", "ptClosesPoly", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "drawPoly", ".", "isEmpty", "(", ")", ":", "\n", "            ", "return", "False", "\n", "", "if", "self", ".", "mousePosScaled", "is", "None", ":", "\n", "            ", "return", "False", "\n", "", "closestPt", "=", "self", ".", "getClosestPoint", "(", "self", ".", "drawPoly", ",", "self", ".", "mousePosScaled", ")", "\n", "return", "closestPt", "==", "(", "0", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.drawPoint": [[2232, 2249], ["qp.drawEllipse", "qp.setBrush", "qp.setBrush", "PyQt5.QtGui.QBrush", "PyQt5.QtGui.QBrush", "PyQt5.QtGui.QColor", "PyQt5.QtGui.QColor"], "methods", ["None"], ["", "def", "drawPoint", "(", "self", ",", "qp", ",", "pt", ",", "isFirst", ",", "increaseRadius", ")", ":", "\n", "# The first in green", "\n", "        ", "if", "isFirst", ":", "\n", "            ", "qp", ".", "setBrush", "(", "QtGui", ".", "QBrush", "(", "QtGui", ".", "QColor", "(", "\n", "0", ",", "255", ",", "0", ")", ",", "QtCore", ".", "Qt", ".", "SolidPattern", ")", ")", "\n", "# Other in red", "\n", "", "else", ":", "\n", "            ", "qp", ".", "setBrush", "(", "QtGui", ".", "QBrush", "(", "QtGui", ".", "QColor", "(", "\n", "255", ",", "0", ",", "0", ")", ",", "QtCore", ".", "Qt", ".", "SolidPattern", ")", ")", "\n", "\n", "# Standard radius", "\n", "", "r", "=", "3.0", "\n", "# Increase maybe", "\n", "if", "increaseRadius", ":", "\n", "            ", "r", "*=", "2.5", "\n", "# Draw", "\n", "", "qp", ".", "drawEllipse", "(", "pt", ",", "r", ",", "r", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.isLabelPathValid": [[2251, 2253], ["os.path.isdir"], "methods", ["None"], ["", "def", "isLabelPathValid", "(", "self", ",", "labelPath", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "isdir", "(", "labelPath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.getLabelFromUser": [[2259, 2298], ["cityscapesLabelTool.CityscapesLabelTool.statusBar().currentMessage", "list", "list.sort", "list.index", "cityscapesLabelTool.CityscapesLabelTool.statusBar().showMessage", "PyQt5.QtWidgets.QInputDialog.getItem", "str", "cityscapesLabelTool.CityscapesLabelTool.statusBar().showMessage", "cityscapesscripts.helpers.labels.name2label.keys", "cityscapesLabelTool.CityscapesLabelTool.statusBar().showMessage", "cityscapesLabelTool.CityscapesLabelTool.statusBar", "cityscapesLabelTool.CityscapesLabelTool.statusBar", "cityscapesLabelTool.CityscapesLabelTool.statusBar", "cityscapesLabelTool.CityscapesLabelTool.statusBar"], "methods", ["None"], ["", "def", "getLabelFromUser", "(", "self", ",", "defaultLabel", "=", "\"\"", ",", "objID", "=", "-", "1", ")", ":", "\n", "# Reset the status bar to this message when leaving", "\n", "        ", "restoreMessage", "=", "self", ".", "statusBar", "(", ")", ".", "currentMessage", "(", ")", "\n", "\n", "# Update defaultLabel", "\n", "if", "not", "defaultLabel", ":", "\n", "            ", "defaultLabel", "=", "self", ".", "defaultLabel", "\n", "\n", "# List of possible labels", "\n", "", "items", "=", "list", "(", "name2label", ".", "keys", "(", ")", ")", "\n", "items", ".", "sort", "(", ")", "\n", "default", "=", "items", ".", "index", "(", "defaultLabel", ")", "\n", "if", "default", "<", "0", ":", "\n", "            ", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "\n", "'The selected label is missing in the internal color map.'", ")", "\n", "return", "\n", "\n", "# Specify title", "\n", "", "dlgTitle", "=", "\"Select label\"", "\n", "message", "=", "dlgTitle", "\n", "question", "=", "dlgTitle", "\n", "if", "objID", ">=", "0", ":", "\n", "            ", "message", "=", "\"Select new label for object {0} with current label {1}\"", ".", "format", "(", "\n", "objID", ",", "defaultLabel", ")", "\n", "question", "=", "\"Label for object {0}\"", ".", "format", "(", "objID", ")", "\n", "", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "message", ")", "\n", "\n", "# Create and wait for dialog", "\n", "(", "item", ",", "ok", ")", "=", "QtWidgets", ".", "QInputDialog", ".", "getItem", "(", "\n", "self", ",", "dlgTitle", ",", "question", ",", "items", ",", "default", ",", "False", ")", "\n", "\n", "# Process the answer a bit", "\n", "item", "=", "str", "(", "item", ")", "\n", "\n", "# Restore message", "\n", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "restoreMessage", ")", "\n", "\n", "# Return", "\n", "return", "(", "item", ",", "ok", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.addPtToPoly": [[2300, 2305], ["cityscapesLabelTool.CityscapesLabelTool.drawPoly.append", "act.setEnabled"], "methods", ["None"], ["", "def", "addPtToPoly", "(", "self", ",", "pt", ")", ":", "\n", "        ", "self", ".", "drawPoly", ".", "append", "(", "pt", ")", "\n", "# Enable actions that need a polygon", "\n", "for", "act", "in", "self", ".", "actPolyOrSelObj", ":", "\n", "            ", "act", ".", "setEnabled", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.clearPolygon": [[2307, 2316], ["PyQt5.QtGui.QPolygonF", "act.setEnabled", "act.setEnabled", "bool"], "methods", ["None"], ["", "", "def", "clearPolygon", "(", "self", ")", ":", "\n", "# We do not clear, since the drawPoly might be a reference on an object one", "\n", "        ", "self", ".", "drawPoly", "=", "QtGui", ".", "QPolygonF", "(", ")", "\n", "self", ".", "drawPolyClosed", "=", "False", "\n", "# Disable actions that need a polygon", "\n", "for", "act", "in", "self", ".", "actPolyOrSelObj", ":", "\n", "            ", "act", ".", "setEnabled", "(", "bool", "(", "self", ".", "selObjs", ")", ")", "\n", "", "for", "act", "in", "self", ".", "actClosedPoly", ":", "\n", "            ", "act", ".", "setEnabled", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.closePolygon": [[2318, 2326], ["cityscapesLabelTool.CityscapesLabelTool.statusBar().showMessage", "act.setEnabled", "cityscapesLabelTool.CityscapesLabelTool.statusBar"], "methods", ["None"], ["", "", "def", "closePolygon", "(", "self", ")", ":", "\n", "        ", "self", ".", "drawPolyClosed", "=", "True", "\n", "for", "act", "in", "self", ".", "actClosedPoly", ":", "\n", "            ", "act", ".", "setEnabled", "(", "True", ")", "\n", "", "message", "=", "\"What should I do with the polygon? Press n to create a new object, \"", "\n", "message", "+=", "\"press Ctrl + Shift + Left Click to intersect with another object, \"", "\n", "message", "+=", "\"press Ctrl + Alt + Left Click to merge with another object.\"", "\n", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.intersectPolygon": [[2329, 2361], ["cityscapesLabelTool.CityscapesLabelTool.drawPoly.intersected", "cityscapesLabelTool.CityscapesLabelTool.deselectAllObjects", "cityscapesLabelTool.CityscapesLabelTool.update", "cityscapesLabelTool.CityscapesLabelTool.getPolygon", "cityscapesLabelTool.CityscapesLabelTool.isEmpty", "cityscapesLabelTool.CityscapesLabelTool.getLabelFromUser", "cityscapesLabelTool.CityscapesLabelTool.appendObject", "cityscapesLabelTool.CityscapesLabelTool.clearPolygon", "cityscapesLabelTool.CityscapesLabelTool.statusBar().showMessage", "cityscapesLabelTool.CityscapesLabelTool.statusBar"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.deselectAllObjects", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.update", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.getPolygon", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.getLabelFromUser", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.appendObject", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.clearPolygon"], ["", "def", "intersectPolygon", "(", "self", ")", ":", "\n", "# Cannot do anything without labels", "\n", "        ", "if", "not", "self", ".", "annotation", ":", "\n", "            ", "return", "\n", "# Cannot do anything without a single selected object", "\n", "", "if", "self", ".", "mouseObj", "<", "0", ":", "\n", "            ", "return", "\n", "# The selected object that is modified", "\n", "", "obj", "=", "self", ".", "annotation", ".", "objects", "[", "self", ".", "mouseObj", "]", "\n", "\n", "# The intersection of the polygons", "\n", "intersection", "=", "self", ".", "drawPoly", ".", "intersected", "(", "self", ".", "getPolygon", "(", "obj", ")", ")", "\n", "\n", "if", "not", "intersection", ".", "isEmpty", "(", ")", ":", "\n", "# Ask the user for a label", "\n", "            ", "self", ".", "drawPoly", "=", "intersection", "\n", "(", "label", ",", "ok", ")", "=", "self", ".", "getLabelFromUser", "(", "obj", ".", "label", ")", "\n", "\n", "if", "ok", "and", "label", ":", "\n", "# Append and create the new object", "\n", "                ", "self", ".", "appendObject", "(", "label", ",", "intersection", ")", "\n", "\n", "# Clear the drawn polygon", "\n", "self", ".", "clearPolygon", "(", ")", "\n", "\n", "# Default message", "\n", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "self", ".", "defaultStatusbar", ")", "\n", "\n", "# Deselect", "\n", "", "", "self", ".", "deselectAllObjects", "(", ")", "\n", "# Redraw", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.mergePolygon": [[2364, 2396], ["cityscapesLabelTool.CityscapesLabelTool.drawPoly.united", "cityscapesLabelTool.CityscapesLabelTool.deselectAllObjects", "cityscapesLabelTool.CityscapesLabelTool.update", "cityscapesLabelTool.CityscapesLabelTool.getPolygon", "cityscapesLabelTool.CityscapesLabelTool.isEmpty", "cityscapesLabelTool.CityscapesLabelTool.getLabelFromUser", "cityscapesLabelTool.CityscapesLabelTool.appendObject", "cityscapesLabelTool.CityscapesLabelTool.clearPolygon", "cityscapesLabelTool.CityscapesLabelTool.statusBar().showMessage", "cityscapesLabelTool.CityscapesLabelTool.statusBar"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.deselectAllObjects", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.update", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.getPolygon", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.getLabelFromUser", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.appendObject", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.clearPolygon"], ["", "def", "mergePolygon", "(", "self", ")", ":", "\n", "# Cannot do anything without labels", "\n", "        ", "if", "not", "self", ".", "annotation", ":", "\n", "            ", "return", "\n", "# Cannot do anything without a single selected object", "\n", "", "if", "self", ".", "mouseObj", "<", "0", ":", "\n", "            ", "return", "\n", "# The selected object that is modified", "\n", "", "obj", "=", "self", ".", "annotation", ".", "objects", "[", "self", ".", "mouseObj", "]", "\n", "\n", "# The union of the polygons", "\n", "union", "=", "self", ".", "drawPoly", ".", "united", "(", "self", ".", "getPolygon", "(", "obj", ")", ")", "\n", "\n", "if", "not", "union", ".", "isEmpty", "(", ")", ":", "\n", "# Ask the user for a label", "\n", "            ", "self", ".", "drawPoly", "=", "union", "\n", "(", "label", ",", "ok", ")", "=", "self", ".", "getLabelFromUser", "(", "obj", ".", "label", ")", "\n", "\n", "if", "ok", "and", "label", ":", "\n", "# Append and create the new object", "\n", "                ", "self", ".", "appendObject", "(", "label", ",", "union", ")", "\n", "\n", "# Clear the drawn polygon", "\n", "self", ".", "clearPolygon", "(", ")", "\n", "\n", "# Default message", "\n", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "self", ".", "defaultStatusbar", ")", "\n", "\n", "# Deselect", "\n", "", "", "self", ".", "deselectAllObjects", "(", ")", "\n", "# Redraw", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.initPolygonFromObject": [[2398, 2430], ["cityscapesLabelTool.CityscapesLabelTool.getPolygon", "cityscapesLabelTool.CityscapesLabelTool.update", "len", "cityscapesLabelTool.CityscapesLabelTool.clearPolygon", "cityscapesLabelTool.CityscapesLabelTool.update", "act.setEnabled", "act.setEnabled"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.getPolygon", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.update", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.clearPolygon", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.update"], ["", "def", "initPolygonFromObject", "(", "self", ")", ":", "\n", "# Cannot do anything without labels", "\n", "        ", "if", "not", "self", ".", "annotation", ":", "\n", "            ", "return", "\n", "# Cannot do anything without any selected object", "\n", "", "if", "not", "self", ".", "selObjs", ":", "\n", "            ", "return", "\n", "# If there are multiple objects selected, we clear the polygon", "\n", "", "if", "len", "(", "self", ".", "selObjs", ")", ">", "1", ":", "\n", "            ", "self", ".", "clearPolygon", "(", ")", "\n", "self", ".", "update", "(", ")", "\n", "return", "\n", "\n", "# The selected object that is used for init", "\n", "", "obj", "=", "self", ".", "annotation", ".", "objects", "[", "self", ".", "selObjs", "[", "-", "1", "]", "]", "\n", "\n", "# Make a reference to the polygon", "\n", "self", ".", "drawPoly", "=", "self", ".", "getPolygon", "(", "obj", ")", "\n", "\n", "# Make sure its closed", "\n", "self", ".", "drawPolyClosed", "=", "True", "\n", "\n", "# Update toolbar icons", "\n", "# Enable actions that need a polygon", "\n", "for", "act", "in", "self", ".", "actPolyOrSelObj", ":", "\n", "            ", "act", ".", "setEnabled", "(", "True", ")", "\n", "# Enable actions that need a closed polygon", "\n", "", "for", "act", "in", "self", ".", "actClosedPoly", ":", "\n", "            ", "act", ".", "setEnabled", "(", "True", ")", "\n", "\n", "# Redraw", "\n", "", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.appendObject": [[2432, 2470], ["cityscapesscripts.helpers.annotation.CsPoly", "getpass.getuser", "cityscapesscripts.helpers.annotation.CsPoly.updateDate", "cityscapesLabelTool.CityscapesLabelTool.annotation.objects.append", "cityscapesLabelTool.CityscapesLabelTool.addChange", "cityscapesLabelTool.CityscapesLabelTool.deselectAllObjects", "cityscapesLabelTool.CityscapesLabelTool.clearPolygon", "cityscapesLabelTool.CityscapesLabelTool.selectObject", "cityscapesscripts.helpers.annotation.Annotation", "cityscapesscripts.helpers.annotation.Point", "p.x", "p.y"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.CsObject.updateDate", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.addChange", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.deselectAllObjects", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.clearPolygon", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.selectObject"], ["", "def", "appendObject", "(", "self", ",", "label", ",", "polygon", ")", ":", "\n", "# Create empty annotation object", "\n", "# if first object", "\n", "        ", "if", "not", "self", ".", "annotation", ":", "\n", "            ", "self", ".", "annotation", "=", "Annotation", "(", ")", "\n", "\n", "# Search the highest ID", "\n", "", "newID", "=", "0", "\n", "for", "obj", "in", "self", ".", "annotation", ".", "objects", ":", "\n", "            ", "if", "obj", ".", "id", ">=", "newID", ":", "\n", "                ", "newID", "=", "obj", ".", "id", "+", "1", "\n", "\n", "# New object", "\n", "# Insert the object in the labels list", "\n", "", "", "obj", "=", "CsPoly", "(", ")", "\n", "obj", ".", "label", "=", "label", "\n", "\n", "obj", ".", "polygon", "=", "[", "Point", "(", "p", ".", "x", "(", ")", ",", "p", ".", "y", "(", ")", ")", "for", "p", "in", "polygon", "]", "\n", "\n", "obj", ".", "id", "=", "newID", "\n", "obj", ".", "deleted", "=", "0", "\n", "obj", ".", "verified", "=", "0", "\n", "obj", ".", "user", "=", "getpass", ".", "getuser", "(", ")", "\n", "obj", ".", "updateDate", "(", ")", "\n", "\n", "self", ".", "annotation", ".", "objects", ".", "append", "(", "obj", ")", "\n", "\n", "# Append to changes", "\n", "self", ".", "addChange", "(", "\n", "\"Created object {0} with label {1}\"", ".", "format", "(", "newID", ",", "label", ")", ")", "\n", "\n", "# Clear the drawn polygon", "\n", "self", ".", "deselectAllObjects", "(", ")", "\n", "self", ".", "clearPolygon", "(", ")", "\n", "\n", "# select the new object", "\n", "self", ".", "mouseObj", "=", "0", "\n", "self", ".", "selectObject", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.checkAndSave": [[2475, 2504], ["cityscapesLabelTool.CityscapesLabelTool.statusBar().currentMessage", "cityscapesLabelTool.CityscapesLabelTool.statusBar().showMessage", "PyQt5.QtWidgets.QMessageBox.question", "cityscapesLabelTool.CityscapesLabelTool.statusBar().showMessage", "cityscapesLabelTool.CityscapesLabelTool.save", "cityscapesLabelTool.CityscapesLabelTool.statusBar", "cityscapesLabelTool.CityscapesLabelTool.statusBar", "cityscapesLabelTool.CityscapesLabelTool.clearChanges", "cityscapesLabelTool.CityscapesLabelTool.statusBar"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.save", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.clearChanges"], ["", "def", "checkAndSave", "(", "self", ")", ":", "\n", "# Without changes it's ok to leave the image", "\n", "        ", "if", "not", "self", ".", "changes", ":", "\n", "            ", "return", "True", "\n", "\n", "# Backup of status message", "\n", "", "restoreMessage", "=", "self", ".", "statusBar", "(", ")", ".", "currentMessage", "(", ")", "\n", "# Create the dialog", "\n", "dlgTitle", "=", "\"Save changes?\"", "\n", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "dlgTitle", ")", "\n", "text", "=", "\"Do you want to save the following changes?\\n\"", "\n", "for", "c", "in", "self", ".", "changes", ":", "\n", "            ", "text", "+=", "\"- \"", "+", "c", "+", "'\\n'", "\n", "", "buttons", "=", "QtWidgets", ".", "QMessageBox", ".", "Save", "|", "QtWidgets", ".", "QMessageBox", ".", "Discard", "|", "QtWidgets", ".", "QMessageBox", ".", "Cancel", "\n", "ret", "=", "QtWidgets", ".", "QMessageBox", ".", "question", "(", "\n", "self", ",", "dlgTitle", ",", "text", ",", "buttons", ",", "QtWidgets", ".", "QMessageBox", ".", "Save", ")", "\n", "proceed", "=", "False", "\n", "# If the user selected yes -> save", "\n", "if", "ret", "==", "QtWidgets", ".", "QMessageBox", ".", "Save", ":", "\n", "            ", "proceed", "=", "self", ".", "save", "(", ")", "\n", "# If the user selected to discard the changes, clear them", "\n", "", "elif", "ret", "==", "QtWidgets", ".", "QMessageBox", ".", "Discard", ":", "\n", "            ", "self", ".", "clearChanges", "(", ")", "\n", "proceed", "=", "True", "\n", "# Otherwise prevent leaving the image", "\n", "", "else", ":", "\n", "            ", "proceed", "=", "False", "\n", "", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "restoreMessage", ")", "\n", "return", "proceed", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.doScreenshot": [[2506, 2590], ["PyQt5.QtGui.QImage", "PyQt5.QtGui.QPainter", "PyQt5.QtGui.QPainter.begin", "cityscapesLabelTool.CityscapesLabelTool.image.width", "cityscapesLabelTool.CityscapesLabelTool.image.height", "cityscapesLabelTool.CityscapesLabelTool.drawLabels", "PyQt5.QtGui.QPainter.end", "file.replace.replace.find", "cityscapesLabelTool.CityscapesLabelTool.statusBar().showMessage", "cityscapesLabelTool.CityscapesLabelTool.update", "cityscapesLabelTool.CityscapesLabelTool.blurLicensePlates", "ignore.append", "file.replace.replace.replace", "PyQt5.QtGui.QImage.save", "os.path.join", "file.replace.replace.replace", "cityscapesLabelTool.CityscapesLabelTool.statusBar", "os.path.exists", "os.makedirs", "file.replace.replace.find", "os.path.splitext", "os.path.splitext", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.drawLabels", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.update", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.blurLicensePlates", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.save"], ["", "def", "doScreenshot", "(", "self", ")", ":", "\n", "# For creating the screenshot we re-use the label drawing function", "\n", "# However, we draw in an image using a QPainter", "\n", "\n", "# Create such an image", "\n", "        ", "img", "=", "QtGui", ".", "QImage", "(", "self", ".", "image", ")", "\n", "# Create a QPainter that can perform draw actions within a widget or image", "\n", "qp", "=", "QtGui", ".", "QPainter", "(", ")", "\n", "# Begin drawing in the image", "\n", "qp", ".", "begin", "(", "img", ")", "\n", "\n", "# Remember some settings", "\n", "xoff", "=", "self", ".", "xoff", "\n", "yoff", "=", "self", ".", "yoff", "\n", "scale", "=", "self", ".", "scale", "\n", "w", "=", "self", ".", "w", "\n", "h", "=", "self", ".", "h", "\n", "# Update scale", "\n", "self", ".", "xoff", "=", "0", "\n", "self", ".", "yoff", "=", "0", "\n", "self", ".", "scale", "=", "1", "\n", "self", ".", "w", "=", "self", ".", "image", ".", "width", "(", ")", "\n", "self", ".", "h", "=", "self", ".", "image", ".", "height", "(", ")", "\n", "# Detactivate the highlighted object", "\n", "self", ".", "highlightObjs", "=", "[", "]", "\n", "\n", "# Blur the license plates", "\n", "# make this variabel a member and use as option if desired", "\n", "blurLicensePlates", "=", "True", "\n", "if", "blurLicensePlates", ":", "\n", "            ", "self", ".", "blurLicensePlates", "(", "qp", ")", "\n", "\n", "# Draw the labels on top", "\n", "", "ignore", "=", "[", "]", "\n", "if", "blurLicensePlates", ":", "\n", "            ", "ignore", ".", "append", "(", "'numberplate'", ")", "\n", "", "self", ".", "drawLabels", "(", "qp", ",", "ignore", ")", "\n", "\n", "# Finish drawing", "\n", "qp", ".", "end", "(", ")", "\n", "# Reset scale and stuff", "\n", "self", ".", "xoff", "=", "xoff", "\n", "self", ".", "yoff", "=", "yoff", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "w", "=", "w", "\n", "self", ".", "h", "=", "h", "\n", "\n", "# Generate the real filename for saving", "\n", "file", "=", "self", ".", "config", ".", "screenshotFilename", "\n", "# Replace occurance of %c with the city name (as directory)", "\n", "# Generate the directory if necessary", "\n", "cityIdx", "=", "file", ".", "find", "(", "'%c'", ")", "\n", "if", "cityIdx", ">=", "0", ":", "\n", "            ", "if", "self", ".", "config", ".", "cityName", ":", "\n", "                ", "dir", "=", "os", ".", "path", ".", "join", "(", "file", "[", ":", "cityIdx", "]", ",", "self", ".", "config", ".", "cityName", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dir", ")", ":", "\n", "                    ", "os", ".", "makedirs", "(", "dir", ")", "\n", "", "file", "=", "file", ".", "replace", "(", "'%c'", ",", "self", ".", "config", ".", "cityName", "+", "'/'", ",", "1", ")", "\n", "\n", "if", "file", ".", "find", "(", "'%c'", ")", ">", "0", ":", "\n", "                    ", "message", "=", "\"Found multiple '%c' in screenshot filename. Not allowed\"", "\n", "file", "=", "None", "\n", "", "", "else", ":", "\n", "                ", "message", "=", "\"Do not have a city name. Cannot replace '%c' in screenshot filename.\"", "\n", "file", "=", "None", "\n", "# Replace occurances of %i with the image filename (without extension)", "\n", "", "", "if", "file", ":", "\n", "            ", "file", "=", "file", ".", "replace", "(", "'%i'", ",", "os", ".", "path", ".", "splitext", "(", "\n", "os", ".", "path", ".", "basename", "(", "self", ".", "config", ".", "currentFile", ")", ")", "[", "0", "]", ")", "\n", "# Add extension .png if no extension given", "\n", "", "if", "file", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "splitext", "(", "file", ")", "[", "1", "]", ":", "\n", "                ", "file", "+=", "'.png'", "\n", "# Save", "\n", "", "", "if", "file", ":", "\n", "            ", "success", "=", "img", ".", "save", "(", "file", ")", "\n", "if", "success", ":", "\n", "                ", "message", "=", "\"Saved screenshot to \"", "+", "file", "\n", "", "else", ":", "\n", "                ", "message", "=", "\"Failed to save screenshot\"", "\n", "\n", "", "", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "message", ")", "\n", "# Update to reset everything to the correct state", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.blurLicensePlates": [[2594, 2643], ["polyToDraw.boundingRect", "range", "float", "float", "float", "PyQt5.QtGui.QColor", "qp.setPen", "PyQt5.QtGui.QBrush", "qp.setBrush", "qp.drawPolygon", "cityscapesLabelTool.CityscapesLabelTool.getPolygon", "PyQt5.QtGui.QTransform.fromScale", "max", "min", "range", "int", "int", "img.height", "max", "min", "img.pixel", "PyQt5.QtGui.QColor().red", "PyQt5.QtGui.QColor().green", "PyQt5.QtGui.QColor().blue", "polyToDraw.boundingRect.top", "int", "int", "img.width", "polyToDraw.boundingRect.bottom", "polyToDraw.boundingRect.left", "PyQt5.QtGui.QColor", "PyQt5.QtGui.QColor", "PyQt5.QtGui.QColor", "polyToDraw.boundingRect.right"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.getPolygon"], ["", "def", "blurLicensePlates", "(", "self", ",", "qp", ")", ":", "\n", "# license plate name", "\n", "        ", "searchedNames", "=", "[", "'license plate'", "]", "\n", "\n", "# the image", "\n", "img", "=", "self", ".", "image", "\n", "\n", "# Draw all objects", "\n", "for", "obj", "in", "self", ".", "annotation", ".", "objects", ":", "\n", "# Some are flagged to not be drawn. Skip them", "\n", "            ", "if", "not", "obj", ".", "draw", ":", "\n", "                ", "continue", "\n", "\n", "# The label of the object", "\n", "", "name", "=", "obj", ".", "label", "\n", "# If we do not know a color for this label, skip", "\n", "if", "name", "not", "in", "name2label", ":", "\n", "                ", "continue", "\n", "# If we do not blur this label, skip", "\n", "", "if", "not", "name", "in", "searchedNames", ":", "\n", "                ", "continue", "\n", "\n", "# Scale the polygon properly", "\n", "", "polyToDraw", "=", "self", ".", "getPolygon", "(", "\n", "obj", ")", "*", "QtGui", ".", "QTransform", ".", "fromScale", "(", "self", ".", "scale", ",", "self", ".", "scale", ")", "\n", "bb", "=", "polyToDraw", ".", "boundingRect", "(", ")", "\n", "\n", "# Get the mean color within the polygon", "\n", "meanR", "=", "0", "\n", "meanG", "=", "0", "\n", "meanB", "=", "0", "\n", "num", "=", "0", "\n", "for", "y", "in", "range", "(", "max", "(", "int", "(", "bb", ".", "top", "(", ")", ")", ",", "0", ")", ",", "min", "(", "int", "(", "bb", ".", "bottom", "(", ")", "+", "1.5", ")", ",", "img", ".", "height", "(", ")", ")", ")", ":", "\n", "                ", "for", "x", "in", "range", "(", "max", "(", "int", "(", "bb", ".", "left", "(", ")", ")", ",", "0", ")", ",", "min", "(", "int", "(", "bb", ".", "right", "(", ")", "+", "1.5", ")", ",", "img", ".", "width", "(", ")", ")", ")", ":", "\n", "                    ", "col", "=", "img", ".", "pixel", "(", "x", ",", "y", ")", "\n", "meanR", "+=", "QtGui", ".", "QColor", "(", "col", ")", ".", "red", "(", ")", "\n", "meanG", "+=", "QtGui", ".", "QColor", "(", "col", ")", ".", "green", "(", ")", "\n", "meanB", "+=", "QtGui", ".", "QColor", "(", "col", ")", ".", "blue", "(", ")", "\n", "num", "+=", "1", "\n", "", "", "meanR", "/=", "float", "(", "num", ")", "\n", "meanG", "/=", "float", "(", "num", ")", "\n", "meanB", "/=", "float", "(", "num", ")", "\n", "col", "=", "QtGui", ".", "QColor", "(", "meanR", ",", "meanG", ",", "meanB", ")", "\n", "qp", ".", "setPen", "(", "col", ")", "\n", "brush", "=", "QtGui", ".", "QBrush", "(", "col", ",", "QtCore", ".", "Qt", ".", "SolidPattern", ")", "\n", "qp", ".", "setBrush", "(", "brush", ")", "\n", "\n", "# Default drawing", "\n", "qp", ".", "drawPolygon", "(", "polyToDraw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.updateMouseObject": [[2646, 2657], ["reversed", "range", "len", "cityscapesLabelTool.CityscapesLabelTool.getPolygon().containsPoint", "cityscapesLabelTool.CityscapesLabelTool.getPolygon"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.getPolygon"], ["", "", "def", "updateMouseObject", "(", "self", ")", ":", "\n", "        ", "self", ".", "mouseObj", "=", "-", "1", "\n", "if", "self", ".", "mousePosScaled", "is", "None", ":", "\n", "            ", "return", "\n", "", "if", "not", "self", ".", "annotation", "or", "not", "self", ".", "annotation", ".", "objects", ":", "\n", "            ", "return", "\n", "", "for", "idx", "in", "reversed", "(", "range", "(", "len", "(", "self", ".", "annotation", ".", "objects", ")", ")", ")", ":", "\n", "            ", "obj", "=", "self", ".", "annotation", ".", "objects", "[", "idx", "]", "\n", "if", "obj", ".", "draw", "and", "self", ".", "getPolygon", "(", "obj", ")", ".", "containsPoint", "(", "self", ".", "mousePosScaled", ",", "QtCore", ".", "Qt", ".", "OddEvenFill", ")", ":", "\n", "                ", "self", ".", "mouseObj", "=", "idx", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.infoOnSelectedObject": [[2659, 2667], ["cityscapesLabelTool.CityscapesLabelTool.statusBar().showMessage", "cityscapesLabelTool.CityscapesLabelTool.statusBar"], "methods", ["None"], ["", "", "", "def", "infoOnSelectedObject", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "selObjs", ":", "\n", "            ", "return", "\n", "", "objID", "=", "self", ".", "selObjs", "[", "-", "1", "]", "\n", "if", "self", ".", "annotation", "and", "objID", ">=", "0", ":", "\n", "            ", "obj", "=", "self", ".", "annotation", ".", "objects", "[", "objID", "]", "\n", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "\n", "\"Label of object {0}: {1}\"", ".", "format", "(", "obj", ".", "id", ",", "obj", ".", "label", ")", ")", "\n", "# else:", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.selectObject": [[2671, 2696], ["cityscapesLabelTool.CityscapesLabelTool.initPolygonFromObject", "cityscapesLabelTool.CityscapesLabelTool.infoOnSelectedObject", "cityscapesLabelTool.CityscapesLabelTool.deselectObject", "cityscapesLabelTool.CityscapesLabelTool.selObjs.append", "cityscapesLabelTool.CityscapesLabelTool.deselectObject", "act.setEnabled", "act.setEnabled", "len"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.initPolygonFromObject", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.infoOnSelectedObject", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.deselectObject", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.deselectObject"], ["", "", "def", "selectObject", "(", "self", ")", ":", "\n", "# If there is no mouse selection, we are good", "\n", "        ", "if", "self", ".", "mouseObj", "<", "0", ":", "\n", "            ", "self", ".", "deselectObject", "(", ")", "\n", "return", "\n", "\n", "# Append the object to selection if it's not in there", "\n", "", "if", "not", "self", ".", "mouseObj", "in", "self", ".", "selObjs", ":", "\n", "            ", "self", ".", "selObjs", ".", "append", "(", "self", ".", "mouseObj", ")", "\n", "# Otherwise remove the object", "\n", "", "else", ":", "\n", "            ", "self", ".", "deselectObject", "(", ")", "\n", "\n", "# update polygon", "\n", "", "self", ".", "initPolygonFromObject", "(", ")", "\n", "\n", "# If we have selected objects make the toolbar actions active", "\n", "if", "self", ".", "selObjs", ":", "\n", "            ", "for", "act", "in", "self", ".", "actSelObj", "+", "self", ".", "actPolyOrSelObj", ":", "\n", "                ", "act", ".", "setEnabled", "(", "True", ")", "\n", "# If we have a single selected object make their toolbar actions active", "\n", "", "", "for", "act", "in", "self", ".", "singleActSelObj", ":", "\n", "            ", "act", ".", "setEnabled", "(", "len", "(", "self", ".", "selObjs", ")", "==", "1", ")", "\n", "\n", "", "self", ".", "infoOnSelectedObject", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.deselectObject": [[2698, 2719], ["cityscapesLabelTool.CityscapesLabelTool.infoOnSelectedObject", "cityscapesLabelTool.CityscapesLabelTool.selObjs.remove", "act.setEnabled", "act.setEnabled", "act.setEnabled", "bool", "len"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.infoOnSelectedObject"], ["", "def", "deselectObject", "(", "self", ")", ":", "\n", "# If there is no object to deselect, we are good", "\n", "        ", "if", "not", "self", ".", "selObjs", ":", "\n", "            ", "return", "\n", "# If the mouse does not select and object, remove the last one", "\n", "", "if", "self", ".", "mouseObj", "<", "0", ":", "\n", "            ", "del", "self", ".", "selObjs", "[", "-", "1", "]", "\n", "# Otherwise try to find the mouse obj in the list", "\n", "", "if", "self", ".", "mouseObj", "in", "self", ".", "selObjs", ":", "\n", "            ", "self", ".", "selObjs", ".", "remove", "(", "self", ".", "mouseObj", ")", "\n", "\n", "# No object left?", "\n", "", "if", "not", "self", ".", "selObjs", ":", "\n", "            ", "for", "act", "in", "self", ".", "actSelObj", ":", "\n", "                ", "act", ".", "setEnabled", "(", "False", ")", "\n", "", "for", "act", "in", "self", ".", "actPolyOrSelObj", ":", "\n", "                ", "act", ".", "setEnabled", "(", "bool", "(", "self", ".", "drawPoly", ")", ")", "\n", "# If we have a single selected object make their toolbar actions active", "\n", "", "", "for", "act", "in", "self", ".", "singleActSelObj", ":", "\n", "            ", "act", ".", "setEnabled", "(", "len", "(", "self", ".", "selObjs", ")", "==", "1", ")", "\n", "", "self", ".", "infoOnSelectedObject", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.deselectAllObjects": [[2721, 2731], ["cityscapesLabelTool.CityscapesLabelTool.infoOnSelectedObject", "act.setEnabled", "act.setEnabled", "len"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.infoOnSelectedObject"], ["", "def", "deselectAllObjects", "(", "self", ")", ":", "\n", "# If there is no object to deselect, we are good", "\n", "        ", "self", ".", "selObjs", "=", "[", "]", "\n", "self", ".", "mouseObj", "=", "-", "1", "\n", "for", "act", "in", "self", ".", "actSelObj", ":", "\n", "            ", "act", ".", "setEnabled", "(", "False", ")", "\n", "# If we have a single selected object make their toolbar actions active", "\n", "", "for", "act", "in", "self", ".", "singleActSelObj", ":", "\n", "            ", "act", ".", "setEnabled", "(", "len", "(", "self", ".", "selObjs", ")", "==", "1", ")", "\n", "", "self", ".", "infoOnSelectedObject", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.modifyLayer": [[2734, 2771], ["max", "min", "cityscapesLabelTool.CityscapesLabelTool.annotation.objects.insert", "cityscapesLabelTool.CityscapesLabelTool.statusBar().showMessage", "len", "cityscapesLabelTool.CityscapesLabelTool.annotation.objects.pop", "cityscapesLabelTool.CityscapesLabelTool.changedLayer.append", "cityscapesLabelTool.CityscapesLabelTool.addChange", "len", "cityscapesLabelTool.CityscapesLabelTool.statusBar"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.addChange"], ["", "def", "modifyLayer", "(", "self", ",", "offset", ")", ":", "\n", "# Cannot do anything without labels", "\n", "        ", "if", "not", "self", ".", "annotation", ":", "\n", "            ", "return", "\n", "# Cannot do anything without a single selected object", "\n", "", "if", "len", "(", "self", ".", "selObjs", ")", "!=", "1", ":", "\n", "            ", "return", "\n", "\n", "# The selected object that is modified", "\n", "", "obj", "=", "self", ".", "annotation", ".", "objects", "[", "self", ".", "selObjs", "[", "-", "1", "]", "]", "\n", "# The index in the label list we are right now", "\n", "oldidx", "=", "self", ".", "selObjs", "[", "-", "1", "]", "\n", "# The index we want to move to", "\n", "newidx", "=", "oldidx", "+", "offset", "\n", "\n", "# Make sure not not exceed zero and the list", "\n", "newidx", "=", "max", "(", "newidx", ",", "0", ")", "\n", "newidx", "=", "min", "(", "newidx", ",", "len", "(", "self", ".", "annotation", ".", "objects", ")", "-", "1", ")", "\n", "\n", "# If new and old idx are equal, there is nothing to do", "\n", "if", "oldidx", "==", "newidx", ":", "\n", "            ", "return", "\n", "\n", "# Move the entry in the labels list", "\n", "", "self", ".", "annotation", ".", "objects", ".", "insert", "(", "\n", "newidx", ",", "self", ".", "annotation", ".", "objects", ".", "pop", "(", "oldidx", ")", ")", "\n", "\n", "# Update the selected object to the new index", "\n", "self", ".", "selObjs", "[", "-", "1", "]", "=", "newidx", "\n", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "\n", "\"Moved object {0} with label {1} to layer {2}\"", ".", "format", "(", "obj", ".", "id", ",", "obj", ".", "label", ",", "newidx", ")", ")", "\n", "\n", "# Check if we moved the object the first time", "\n", "if", "not", "obj", ".", "id", "in", "self", ".", "changedLayer", ":", "\n", "            ", "self", ".", "changedLayer", ".", "append", "(", "obj", ".", "id", ")", "\n", "self", ".", "addChange", "(", "\n", "\"Changed layer for object {0} with label {1}\"", ".", "format", "(", "obj", ".", "id", ",", "obj", ".", "label", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.addChange": [[2773, 2780], ["cityscapesLabelTool.CityscapesLabelTool.changes.append", "act.setEnabled"], "methods", ["None"], ["", "", "def", "addChange", "(", "self", ",", "text", ")", ":", "\n", "        ", "if", "not", "text", ":", "\n", "            ", "return", "\n", "\n", "", "self", ".", "changes", ".", "append", "(", "text", ")", "\n", "for", "act", "in", "self", ".", "actChanges", ":", "\n", "            ", "act", ".", "setEnabled", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.clearChanges": [[2782, 2788], ["act.setEnabled"], "methods", ["None"], ["", "", "def", "clearChanges", "(", "self", ")", ":", "\n", "        ", "self", ".", "changes", "=", "[", "]", "\n", "self", ".", "changedLayer", "=", "[", "]", "\n", "self", ".", "changedPolygon", "=", "[", "]", "\n", "for", "act", "in", "self", ".", "actChanges", ":", "\n", "            ", "act", ".", "setEnabled", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.clearAnnotation": [[2790, 2796], ["cityscapesLabelTool.CityscapesLabelTool.clearChanges", "cityscapesLabelTool.CityscapesLabelTool.deselectAllObjects", "cityscapesLabelTool.CityscapesLabelTool.clearPolygon"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.clearChanges", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.deselectAllObjects", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.clearPolygon"], ["", "", "def", "clearAnnotation", "(", "self", ")", ":", "\n", "        ", "self", ".", "annotation", "=", "None", "\n", "self", ".", "clearChanges", "(", ")", "\n", "self", ".", "deselectAllObjects", "(", ")", "\n", "self", ".", "clearPolygon", "(", ")", "\n", "self", ".", "config", ".", "currentLabelFile", "=", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.clearCorrections": [[2797, 2803], ["None"], "methods", ["None"], ["", "def", "clearCorrections", "(", "self", ")", ":", "\n", "        ", "self", ".", "correctionXML", "=", "None", "\n", "self", ".", "corrections", "=", "[", "]", "\n", "# self.clearChanges() #TODO perhaps?", "\n", "# self.clearPolygon()", "\n", "self", ".", "config", ".", "currentCorrectionFile", "=", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.getLabelFilename": [[2807, 2838], ["os.path.basename", "os.path.normpath.replace", "os.path.join", "os.path.normpath", "cityscapesLabelTool.CityscapesLabelTool.isLabelPathValid", "os.path.isdir", "cityscapesLabelTool.CityscapesLabelTool.gtExt.format", "cityscapesLabelTool.CityscapesLabelTool.gtExt.format"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.isLabelPathValid"], ["", "def", "getLabelFilename", "(", "self", ",", "createDirs", "=", "False", ")", ":", "\n", "# We need the name of the current city", "\n", "        ", "if", "not", "self", ".", "config", ".", "cityName", ":", "\n", "            ", "return", "\"\"", "\n", "# And we need to have a directory where labels should be searched", "\n", "", "if", "not", "self", ".", "config", ".", "labelPath", ":", "\n", "            ", "return", "\"\"", "\n", "# Without the name of the current images, there is also nothing we can do", "\n", "", "if", "not", "self", ".", "config", ".", "currentFile", ":", "\n", "            ", "return", "\"\"", "\n", "# Check if the label directory is valid. This folder is selected by the user", "\n", "# and thus expected to exist", "\n", "", "if", "not", "self", ".", "isLabelPathValid", "(", "self", ".", "config", ".", "labelPath", ")", ":", "\n", "            ", "return", "\"\"", "\n", "# Dirs are not automatically created in this version of the tool", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "config", ".", "labelPath", ")", ":", "\n", "            ", "return", "\"\"", "\n", "\n", "", "labelDir", "=", "self", ".", "config", ".", "labelPath", "\n", "\n", "# extension of ground truth files", "\n", "if", "self", ".", "config", ".", "gtType", ":", "\n", "            ", "ext", "=", "self", ".", "gtExt", ".", "format", "(", "'_'", "+", "self", ".", "config", ".", "gtType", ")", "\n", "", "else", ":", "\n", "            ", "ext", "=", "self", ".", "gtExt", ".", "format", "(", "''", ")", "\n", "# Generate the filename of the label file", "\n", "", "filename", "=", "os", ".", "path", ".", "basename", "(", "self", ".", "config", ".", "currentFile", ")", "\n", "filename", "=", "filename", ".", "replace", "(", "self", ".", "imageExt", ",", "ext", ")", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "labelDir", ",", "filename", ")", "\n", "filename", "=", "os", ".", "path", ".", "normpath", "(", "filename", ")", "\n", "return", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.getCorrectionFilename": [[2842, 2868], ["os.path.basename", "os.path.normpath.replace", "os.path.join", "os.path.normpath", "os.path.isdir", "os.makedirs", "os.path.isdir"], "methods", ["None"], ["", "def", "getCorrectionFilename", "(", "self", ",", "createDirs", "=", "False", ")", ":", "\n", "# And we need to have a directory where corrections are stored", "\n", "        ", "if", "not", "self", ".", "config", ".", "correctionPath", ":", "\n", "            ", "return", "\"\"", "\n", "# Without the name of the current images, there is also nothing we can do", "\n", "", "if", "not", "self", ".", "config", ".", "currentFile", ":", "\n", "            ", "return", "\"\"", "\n", "\n", "# Folder where to store the labels", "\n", "", "correctionDir", "=", "self", ".", "config", ".", "correctionPath", "\n", "\n", "# If the folder does not exist, create it if allowed", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "correctionDir", ")", ":", "\n", "            ", "if", "createDirs", ":", "\n", "                ", "os", ".", "makedirs", "(", "correctionDir", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "correctionDir", ")", ":", "\n", "                    ", "return", "\"\"", "\n", "", "", "else", ":", "\n", "                ", "return", "\"\"", "\n", "\n", "# Generate the filename of the label file", "\n", "", "", "filename", "=", "os", ".", "path", ".", "basename", "(", "self", ".", "config", ".", "currentFile", ")", "\n", "filename", "=", "filename", ".", "replace", "(", "self", ".", "imageExt", ",", "'.xml'", ")", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "correctionDir", ",", "filename", ")", "\n", "filename", "=", "os", ".", "path", ".", "normpath", "(", "filename", ")", "\n", "return", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.createPopupMenu": [[2870, 2872], ["None"], "methods", ["None"], ["", "def", "createPopupMenu", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.enum": [[148, 150], ["type"], "function", ["None"], ["", "", "", "def", "enum", "(", "**", "enums", ")", ":", "\n", "    ", "return", "type", "(", "'Enum'", ",", "(", ")", ",", "enums", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.main": [[2874, 2878], ["PyQt5.QtWidgets.QApplication", "cityscapesLabelTool.CityscapesLabelTool", "sys.exit", "QtWidgets.QApplication.exec_"], "function", ["None"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "app", "=", "QtWidgets", ".", "QApplication", "(", "sys", ".", "argv", ")", "\n", "tool", "=", "CityscapesLabelTool", "(", ")", "\n", "sys", ".", "exit", "(", "app", ".", "exec_", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.__init__": [[73, 197], ["PyQt5.QtWidgets.QMainWindow.__init__", "PyQt5.QtGui.QImage", "cityscapesViewer.CityscapesViewer.initUI", "cityscapesViewer.CityscapesViewer.loadCity", "cityscapesViewer.CityscapesViewer.imageChanged", "LabelType", "LabelType", "LabelType", "LabelType", "LabelType", "LabelType", "LabelType", "matplotlib.colors.Normalize", "matplotlib.colors.Normalize", "matplotlib.colors.Normalize", "matplotlib.colors.Normalize", "matplotlib.cm.ScalarMappable", "matplotlib.cm.ScalarMappable", "matplotlib.cm.ScalarMappable", "matplotlib.cm.ScalarMappable", "print"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.initUI", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.loadCity", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.imageChanged"], ["def", "__init__", "(", "self", ")", ":", "\n", "# Construct base class", "\n", "        ", "super", "(", "CityscapesViewer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# This is the configuration.", "\n", "\n", "# The filename of the image we currently working on", "\n", "self", ".", "currentFile", "=", "\"\"", "\n", "# The filename of the labels we currently working on", "\n", "self", ".", "currentLabelFile", "=", "\"\"", "\n", "# The path of the images of the currently loaded city", "\n", "self", ".", "city", "=", "\"\"", "\n", "# The name of the currently loaded city", "\n", "self", ".", "cityName", "=", "\"\"", "\n", "# The name of the current split", "\n", "self", ".", "split", "=", "\"\"", "\n", "# Ground truth type", "\n", "self", ".", "gtType", "=", "CsLabelType", ".", "NONE", "\n", "# The path of the labels. In this folder we expect a folder for each city", "\n", "# Within these city folders we expect the label with a filename matching", "\n", "# the images, except for the extension", "\n", "self", ".", "labelPath", "=", "\"\"", "\n", "# The transparency of the labels over the image", "\n", "self", ".", "transp", "=", "0.5", "\n", "# The zoom toggle", "\n", "self", ".", "zoom", "=", "False", "\n", "# The zoom factor", "\n", "self", ".", "zoomFactor", "=", "1.5", "\n", "# The size of the zoom window. Currently there is no setter or getter for that", "\n", "self", ".", "zoomSize", "=", "400", "# px", "\n", "\n", "# The width that we actually use to show the image", "\n", "self", ".", "w", "=", "0", "\n", "# The height that we actually use to show the image", "\n", "self", ".", "h", "=", "0", "\n", "# The horizontal offset where we start drawing within the widget", "\n", "self", ".", "xoff", "=", "0", "\n", "# The vertical offset where we start drawing withing the widget", "\n", "self", ".", "yoff", "=", "0", "\n", "# A gap that we  leave around the image as little border", "\n", "self", ".", "bordergap", "=", "20", "\n", "# The scale that was used, ie", "\n", "# self.w = self.scale * self.image.width()", "\n", "# self.h = self.scale * self.image.height()", "\n", "self", ".", "scale", "=", "1.0", "\n", "# Filenames of all images in current city", "\n", "self", ".", "images", "=", "[", "]", "\n", "# Image extension", "\n", "self", ".", "imageExt", "=", "\"_leftImg8bit.png\"", "\n", "# Ground truth extension", "\n", "self", ".", "gtExt", "=", "\"_gt*.json\"", "\n", "# Current image as QImage", "\n", "self", ".", "image", "=", "QtGui", ".", "QImage", "(", ")", "\n", "# Index of the current image within the city folder", "\n", "self", ".", "idx", "=", "0", "\n", "# All annotated objects in current image, i.e. list of csPoly or csBbox", "\n", "self", ".", "annotation", "=", "[", "]", "\n", "# The current object the mouse points to. It's index in self.labels", "\n", "self", ".", "mouseObj", "=", "-", "1", "\n", "# The object that is highlighted and its label. An object instance", "\n", "self", ".", "highlightObj", "=", "None", "\n", "self", ".", "highlightObjLabel", "=", "None", "\n", "# The position of the mouse", "\n", "self", ".", "mousePosOrig", "=", "None", "\n", "# The position of the mouse scaled to label coordinates", "\n", "self", ".", "mousePosScaled", "=", "None", "\n", "# If the mouse is outside of the image", "\n", "self", ".", "mouseOutsideImage", "=", "True", "\n", "# The position of the mouse upon enabling the zoom window", "\n", "self", ".", "mousePosOnZoom", "=", "None", "\n", "# A list of toolbar actions that need an image", "\n", "self", ".", "actImage", "=", "[", "]", "\n", "# A list of toolbar actions that need an image that is not the first", "\n", "self", ".", "actImageNotFirst", "=", "[", "]", "\n", "# A list of toolbar actions that need an image that is not the last", "\n", "self", ".", "actImageNotLast", "=", "[", "]", "\n", "# Toggle status of the play icon", "\n", "self", ".", "playState", "=", "False", "\n", "# Enable disparity visu in general", "\n", "self", ".", "enableDisparity", "=", "True", "\n", "# The filename of the disparity map we currently working on", "\n", "self", ".", "currentDispFile", "=", "\"\"", "\n", "# The disparity image", "\n", "self", ".", "dispImg", "=", "None", "\n", "# As overlay", "\n", "self", ".", "dispOverlay", "=", "None", "\n", "# The disparity search path", "\n", "self", ".", "dispPath", "=", "None", "\n", "# Disparity extension", "\n", "self", ".", "dispExt", "=", "\"_disparity.png\"", "\n", "# Available label types", "\n", "self", ".", "labelTypes", "=", "{", "\n", "CsLabelType", ".", "POLY_FINE", ":", "LabelType", "(", "\"gtFine\"", ",", "\"gtFine\"", ",", "CsObjectType", ".", "POLY", ")", ",", "\n", "CsLabelType", ".", "POLY_COARSE", ":", "LabelType", "(", "\"gtCoarse\"", ",", "\"gtCoarse\"", ",", "CsObjectType", ".", "POLY", ")", ",", "\n", "CsLabelType", ".", "CS3D_BBOX3D", ":", "LabelType", "(", "\"CS3D: 3D Boxes\"", ",", "\"gtBbox3d\"", ",", "CsObjectType", ".", "BBOX3D", ")", ",", "\n", "CsLabelType", ".", "CS3D_BBOX2D_MODAL", ":", "LabelType", "(", "\"CS3D: Modal 2D Boxes\"", ",", "\"gtBbox3d\"", ",", "CsObjectType", ".", "BBOX3D", ")", ",", "\n", "CsLabelType", ".", "CS3D_BBOX2D_AMODAL", ":", "LabelType", "(", "\"CS3D: Amodal 2D Boxes\"", ",", "\"gtBbox3d\"", ",", "CsObjectType", ".", "BBOX3D", ")", ",", "\n", "CsLabelType", ".", "CITYPERSONS_BBOX2D", ":", "LabelType", "(", "\"Citypersons\"", ",", "\"gtBboxCityPersons\"", ",", "CsObjectType", ".", "BBOX2D", ")", ",", "\n", "CsLabelType", ".", "DISPARITY", ":", "LabelType", "(", "\"Stereo Disparity\"", ",", "\"disparity\"", ",", "CsObjectType", ".", "POLY", ")", "\n", "}", "\n", "\n", "# Generate colormap", "\n", "try", ":", "\n", "            ", "norm", "=", "matplotlib", ".", "colors", ".", "Normalize", "(", "vmin", "=", "3", ",", "vmax", "=", "100", ")", "\n", "cmap", "=", "matplotlib", ".", "cm", ".", "plasma", "\n", "self", ".", "colormap", "=", "matplotlib", ".", "cm", ".", "ScalarMappable", "(", "norm", "=", "norm", ",", "cmap", "=", "cmap", ")", "\n", "", "except", "Exception", ":", "\n", "            ", "self", ".", "enableDisparity", "=", "False", "\n", "\n", "# Default label", "\n", "", "self", ".", "defaultLabel", "=", "'static'", "\n", "if", "self", ".", "defaultLabel", "not", "in", "name2label", ":", "\n", "            ", "print", "(", "'The {0} label is missing in the internal label definitions.'", ".", "format", "(", "\n", "self", ".", "defaultLabel", ")", ")", "\n", "return", "\n", "# Last selected label", "\n", "", "self", ".", "lastLabel", "=", "self", ".", "defaultLabel", "\n", "\n", "# Setup the GUI", "\n", "self", ".", "initUI", "(", ")", "\n", "\n", "# If we already know a city from the saved config -> load it", "\n", "self", ".", "loadCity", "(", ")", "\n", "self", ".", "imageChanged", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.__del__": [[199, 201], ["None"], "methods", ["None"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.initUI": [[203, 333], ["cityscapesViewer.CityscapesViewer.addToolBar", "os.path.join", "PyQt5.QtWidgets.QAction", "PyQt5.QtWidgets.QAction.setShortcuts", "cityscapesViewer.CityscapesViewer.setTip", "PyQt5.QtWidgets.QAction.triggered.connect", "cityscapesViewer.CityscapesViewer.toolbar.addAction", "PyQt5.QtWidgets.QAction", "PyQt5.QtWidgets.QAction.setShortcuts", "cityscapesViewer.CityscapesViewer.setTip", "PyQt5.QtWidgets.QAction.triggered.connect", "cityscapesViewer.CityscapesViewer.toolbar.addAction", "PyQt5.QtWidgets.QAction", "PyQt5.QtWidgets.QAction.setShortcut", "PyQt5.QtWidgets.QAction.setStatusTip", "PyQt5.QtWidgets.QAction.triggered.connect", "cityscapesViewer.CityscapesViewer.toolbar.addAction", "cityscapesViewer.CityscapesViewer.actImageNotFirst.append", "PyQt5.QtWidgets.QAction", "PyQt5.QtWidgets.QAction.setShortcut", "cityscapesViewer.CityscapesViewer.setTip", "PyQt5.QtWidgets.QAction.triggered.connect", "cityscapesViewer.CityscapesViewer.toolbar.addAction", "cityscapesViewer.CityscapesViewer.actImageNotLast.append", "PyQt5.QtWidgets.QAction", "PyQt5.QtWidgets.QAction.setShortcut", "PyQt5.QtWidgets.QAction.setCheckable", "PyQt5.QtWidgets.QAction.setChecked", "cityscapesViewer.CityscapesViewer.setTip", "PyQt5.QtWidgets.QAction.triggered.connect", "cityscapesViewer.CityscapesViewer.toolbar.addAction", "cityscapesViewer.CityscapesViewer.actImageNotLast.append", "PyQt5.QtWidgets.QAction", "PyQt5.QtWidgets.QAction.setShortcut", "cityscapesViewer.CityscapesViewer.setTip", "PyQt5.QtWidgets.QAction.triggered.connect", "cityscapesViewer.CityscapesViewer.toolbar.addAction", "cityscapesViewer.CityscapesViewer.actImage.append", "PyQt5.QtWidgets.QAction", "PyQt5.QtWidgets.QAction.setShortcuts", "PyQt5.QtWidgets.QAction.setCheckable", "PyQt5.QtWidgets.QAction.setChecked", "cityscapesViewer.CityscapesViewer.setTip", "PyQt5.QtWidgets.QAction.toggled.connect", "cityscapesViewer.CityscapesViewer.toolbar.addAction", "cityscapesViewer.CityscapesViewer.actImage.append", "PyQt5.QtWidgets.QAction", "PyQt5.QtWidgets.QAction.setShortcut", "cityscapesViewer.CityscapesViewer.setTip", "PyQt5.QtWidgets.QAction.triggered.connect", "cityscapesViewer.CityscapesViewer.toolbar.addAction", "PyQt5.QtWidgets.QAction", "PyQt5.QtWidgets.QAction.setShortcut", "cityscapesViewer.CityscapesViewer.setTip", "PyQt5.QtWidgets.QAction.triggered.connect", "cityscapesViewer.CityscapesViewer.toolbar.addAction", "PyQt5.QtWidgets.QAction", "PyQt5.QtWidgets.QAction.setShortcut", "cityscapesViewer.CityscapesViewer.setTip", "PyQt5.QtWidgets.QAction.triggered.connect", "cityscapesViewer.CityscapesViewer.toolbar.addAction", "PyQt5.QtWidgets.QAction", "PyQt5.QtWidgets.QAction.setShortcut", "cityscapesViewer.CityscapesViewer.setTip", "PyQt5.QtWidgets.QAction.triggered.connect", "cityscapesViewer.CityscapesViewer.toolbar.addAction", "PyQt5.QtWidgets.QAction", "PyQt5.QtWidgets.QAction.setShortcuts", "cityscapesViewer.CityscapesViewer.setTip", "PyQt5.QtWidgets.QAction.triggered.connect", "cityscapesViewer.CityscapesViewer.toolbar.addAction", "cityscapesViewer.CityscapesViewer.statusBar().showMessage", "cityscapesViewer.CityscapesViewer.setMouseTracking", "cityscapesViewer.CityscapesViewer.toolbar.setMouseTracking", "cityscapesViewer.CityscapesViewer.show", "cityscapesViewer.CityscapesViewer.setWindowTitle", "cityscapesViewer.CityscapesViewer.displayHelpMessage", "cityscapesViewer.CityscapesViewer.getCityFromUser", "cityscapesViewer.CityscapesViewer.show", "os.path.dirname", "PyQt5.QtGui.QIcon", "PyQt5.QtGui.QIcon", "PyQt5.QtGui.QIcon", "PyQt5.QtGui.QIcon", "PyQt5.QtGui.QIcon", "PyQt5.QtGui.QIcon", "PyQt5.QtGui.QIcon", "PyQt5.QtGui.QIcon", "PyQt5.QtGui.QIcon", "PyQt5.QtGui.QIcon", "PyQt5.QtGui.QIcon", "PyQt5.QtGui.QIcon", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "cityscapesViewer.CityscapesViewer.statusBar"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.setTip", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.setTip", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.setTip", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.setTip", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.setTip", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.setTip", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.setTip", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.setTip", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.setTip", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.setTip", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.setTip", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.displayHelpMessage", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.getCityFromUser"], ["", "def", "initUI", "(", "self", ")", ":", "\n", "# Create a toolbar", "\n", "        ", "self", ".", "toolbar", "=", "self", ".", "addToolBar", "(", "'Tools'", ")", "\n", "\n", "# Add the tool buttons", "\n", "iconDir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "'icons'", ")", "\n", "\n", "# Loading a new city", "\n", "loadAction", "=", "QtWidgets", ".", "QAction", "(", "QtGui", ".", "QIcon", "(", "\n", "os", ".", "path", ".", "join", "(", "iconDir", ",", "'open.png'", ")", ")", ",", "'&Tools'", ",", "self", ")", "\n", "loadAction", ".", "setShortcuts", "(", "[", "'o'", "]", ")", "\n", "self", ".", "setTip", "(", "loadAction", ",", "'Open city'", ")", "\n", "loadAction", ".", "triggered", ".", "connect", "(", "self", ".", "getCityFromUser", ")", "\n", "self", ".", "toolbar", ".", "addAction", "(", "loadAction", ")", "\n", "\n", "# Changing the label type", "\n", "labelTypeAction", "=", "QtWidgets", ".", "QAction", "(", "QtGui", ".", "QIcon", "(", "\n", "os", ".", "path", ".", "join", "(", "iconDir", ",", "'label.png'", ")", ")", ",", "'&Tools'", ",", "self", ")", "\n", "labelTypeAction", ".", "setShortcuts", "(", "[", "'l'", "]", ")", "\n", "self", ".", "setTip", "(", "labelTypeAction", ",", "'Change label type'", ")", "\n", "labelTypeAction", ".", "triggered", ".", "connect", "(", "self", ".", "getLabelTypeFromUser", ")", "\n", "self", ".", "toolbar", ".", "addAction", "(", "labelTypeAction", ")", "\n", "\n", "# Open previous image", "\n", "backAction", "=", "QtWidgets", ".", "QAction", "(", "QtGui", ".", "QIcon", "(", "\n", "os", ".", "path", ".", "join", "(", "iconDir", ",", "'back.png'", ")", ")", ",", "'&Tools'", ",", "self", ")", "\n", "backAction", ".", "setShortcut", "(", "'left'", ")", "\n", "backAction", ".", "setStatusTip", "(", "'Previous image'", ")", "\n", "backAction", ".", "triggered", ".", "connect", "(", "self", ".", "prevImage", ")", "\n", "self", ".", "toolbar", ".", "addAction", "(", "backAction", ")", "\n", "self", ".", "actImageNotFirst", ".", "append", "(", "backAction", ")", "\n", "\n", "# Open next image", "\n", "nextAction", "=", "QtWidgets", ".", "QAction", "(", "QtGui", ".", "QIcon", "(", "\n", "os", ".", "path", ".", "join", "(", "iconDir", ",", "'next.png'", ")", ")", ",", "'&Tools'", ",", "self", ")", "\n", "nextAction", ".", "setShortcut", "(", "'right'", ")", "\n", "self", ".", "setTip", "(", "nextAction", ",", "'Next image'", ")", "\n", "nextAction", ".", "triggered", ".", "connect", "(", "self", ".", "nextImage", ")", "\n", "self", ".", "toolbar", ".", "addAction", "(", "nextAction", ")", "\n", "self", ".", "actImageNotLast", ".", "append", "(", "nextAction", ")", "\n", "\n", "# Play", "\n", "playAction", "=", "QtWidgets", ".", "QAction", "(", "QtGui", ".", "QIcon", "(", "\n", "os", ".", "path", ".", "join", "(", "iconDir", ",", "'play.png'", ")", ")", ",", "'&Tools'", ",", "self", ")", "\n", "playAction", ".", "setShortcut", "(", "' '", ")", "\n", "playAction", ".", "setCheckable", "(", "True", ")", "\n", "playAction", ".", "setChecked", "(", "False", ")", "\n", "self", ".", "setTip", "(", "playAction", ",", "'Play all images'", ")", "\n", "playAction", ".", "triggered", ".", "connect", "(", "self", ".", "playImages", ")", "\n", "self", ".", "toolbar", ".", "addAction", "(", "playAction", ")", "\n", "self", ".", "actImageNotLast", ".", "append", "(", "playAction", ")", "\n", "self", ".", "playAction", "=", "playAction", "\n", "\n", "# Select image", "\n", "selImageAction", "=", "QtWidgets", ".", "QAction", "(", "QtGui", ".", "QIcon", "(", "\n", "os", ".", "path", ".", "join", "(", "iconDir", ",", "'shuffle.png'", ")", ")", ",", "'&Tools'", ",", "self", ")", "\n", "selImageAction", ".", "setShortcut", "(", "'i'", ")", "\n", "self", ".", "setTip", "(", "selImageAction", ",", "'Select image'", ")", "\n", "selImageAction", ".", "triggered", ".", "connect", "(", "self", ".", "selectImage", ")", "\n", "self", ".", "toolbar", ".", "addAction", "(", "selImageAction", ")", "\n", "self", ".", "actImage", ".", "append", "(", "selImageAction", ")", "\n", "\n", "# Enable/disable zoom. Toggle button", "\n", "zoomAction", "=", "QtWidgets", ".", "QAction", "(", "QtGui", ".", "QIcon", "(", "\n", "os", ".", "path", ".", "join", "(", "iconDir", ",", "'zoom.png'", ")", ")", ",", "'&Tools'", ",", "self", ")", "\n", "zoomAction", ".", "setShortcuts", "(", "[", "'z'", "]", ")", "\n", "zoomAction", ".", "setCheckable", "(", "True", ")", "\n", "zoomAction", ".", "setChecked", "(", "self", ".", "zoom", ")", "\n", "self", ".", "setTip", "(", "zoomAction", ",", "'Enable/disable permanent zoom'", ")", "\n", "zoomAction", ".", "toggled", ".", "connect", "(", "self", ".", "zoomToggle", ")", "\n", "self", ".", "toolbar", ".", "addAction", "(", "zoomAction", ")", "\n", "self", ".", "actImage", ".", "append", "(", "zoomAction", ")", "\n", "\n", "# Decrease transparency", "\n", "minusAction", "=", "QtWidgets", ".", "QAction", "(", "QtGui", ".", "QIcon", "(", "\n", "os", ".", "path", ".", "join", "(", "iconDir", ",", "'minus.png'", ")", ")", ",", "'&Tools'", ",", "self", ")", "\n", "minusAction", ".", "setShortcut", "(", "'-'", ")", "\n", "self", ".", "setTip", "(", "minusAction", ",", "'Decrease transparency'", ")", "\n", "minusAction", ".", "triggered", ".", "connect", "(", "self", ".", "minus", ")", "\n", "self", ".", "toolbar", ".", "addAction", "(", "minusAction", ")", "\n", "\n", "# Increase transparency", "\n", "plusAction", "=", "QtWidgets", ".", "QAction", "(", "QtGui", ".", "QIcon", "(", "\n", "os", ".", "path", ".", "join", "(", "iconDir", ",", "'plus.png'", ")", ")", ",", "'&Tools'", ",", "self", ")", "\n", "plusAction", ".", "setShortcut", "(", "'+'", ")", "\n", "self", ".", "setTip", "(", "plusAction", ",", "'Increase transparency'", ")", "\n", "plusAction", ".", "triggered", ".", "connect", "(", "self", ".", "plus", ")", "\n", "self", ".", "toolbar", ".", "addAction", "(", "plusAction", ")", "\n", "\n", "# Display path to current image in message bar", "\n", "displayFilepathAction", "=", "QtWidgets", ".", "QAction", "(", "QtGui", ".", "QIcon", "(", "\n", "os", ".", "path", ".", "join", "(", "iconDir", ",", "'filepath.png'", ")", ")", ",", "'&Tools'", ",", "self", ")", "\n", "displayFilepathAction", ".", "setShortcut", "(", "'f'", ")", "\n", "self", ".", "setTip", "(", "displayFilepathAction", ",", "'Show path to current image'", ")", "\n", "displayFilepathAction", ".", "triggered", ".", "connect", "(", "self", ".", "displayFilepath", ")", "\n", "self", ".", "toolbar", ".", "addAction", "(", "displayFilepathAction", ")", "\n", "\n", "# Display help message", "\n", "helpAction", "=", "QtWidgets", ".", "QAction", "(", "QtGui", ".", "QIcon", "(", "\n", "os", ".", "path", ".", "join", "(", "iconDir", ",", "'help19.png'", ")", ")", ",", "'&Tools'", ",", "self", ")", "\n", "helpAction", ".", "setShortcut", "(", "'h'", ")", "\n", "self", ".", "setTip", "(", "helpAction", ",", "'Help'", ")", "\n", "helpAction", ".", "triggered", ".", "connect", "(", "self", ".", "displayHelpMessage", ")", "\n", "self", ".", "toolbar", ".", "addAction", "(", "helpAction", ")", "\n", "\n", "# Close the application", "\n", "exitAction", "=", "QtWidgets", ".", "QAction", "(", "QtGui", ".", "QIcon", "(", "\n", "os", ".", "path", ".", "join", "(", "iconDir", ",", "'exit.png'", ")", ")", ",", "'&Tools'", ",", "self", ")", "\n", "exitAction", ".", "setShortcuts", "(", "[", "'Esc'", "]", ")", "\n", "self", ".", "setTip", "(", "exitAction", ",", "'Exit'", ")", "\n", "exitAction", ".", "triggered", ".", "connect", "(", "self", ".", "close", ")", "\n", "self", ".", "toolbar", ".", "addAction", "(", "exitAction", ")", "\n", "\n", "# The default text for the status bar", "\n", "self", ".", "defaultStatusbar", "=", "'Ready'", "\n", "# Create a statusbar. Init with default", "\n", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "self", ".", "defaultStatusbar", ")", "\n", "\n", "# Enable mouse move events", "\n", "self", ".", "setMouseTracking", "(", "True", ")", "\n", "self", ".", "toolbar", ".", "setMouseTracking", "(", "True", ")", "\n", "# Open in full screen", "\n", "self", ".", "show", "(", ")", "\n", "# Set a title", "\n", "self", ".", "applicationTitle", "=", "'Cityscapes Viewer v{}'", ".", "format", "(", "VERSION", ")", "\n", "self", ".", "setWindowTitle", "(", "self", ".", "applicationTitle", ")", "\n", "self", ".", "displayHelpMessage", "(", ")", "\n", "self", ".", "getCityFromUser", "(", ")", "\n", "# And show the application", "\n", "self", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.prevImage": [[343, 353], ["cityscapesViewer.CityscapesViewer.imageChanged", "cityscapesViewer.CityscapesViewer.statusBar().showMessage", "cityscapesViewer.CityscapesViewer.statusBar"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.imageChanged"], ["", "def", "prevImage", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "images", ":", "\n", "            ", "return", "\n", "", "if", "self", ".", "idx", ">", "0", ":", "\n", "            ", "self", ".", "idx", "-=", "1", "\n", "self", ".", "imageChanged", "(", ")", "\n", "", "else", ":", "\n", "            ", "message", "=", "\"Already at the first image\"", "\n", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "message", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.nextImage": [[359, 374], ["cityscapesViewer.CityscapesViewer.imageChanged", "PyQt5.QtCore.QTimer.singleShot", "len", "cityscapesViewer.CityscapesViewer.playAction.setChecked", "cityscapesViewer.CityscapesViewer.statusBar().showMessage", "cityscapesViewer.CityscapesViewer.statusBar"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.imageChanged"], ["", "def", "nextImage", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "images", ":", "\n", "            ", "return", "\n", "", "if", "self", ".", "idx", "<", "len", "(", "self", ".", "images", ")", "-", "1", ":", "\n", "            ", "self", ".", "idx", "+=", "1", "\n", "self", ".", "imageChanged", "(", ")", "\n", "", "elif", "self", ".", "playState", ":", "\n", "            ", "self", ".", "playState", "=", "False", "\n", "self", ".", "playAction", ".", "setChecked", "(", "False", ")", "\n", "", "else", ":", "\n", "            ", "message", "=", "\"Already at the last image\"", "\n", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "message", ")", "\n", "", "if", "self", ".", "playState", ":", "\n", "            ", "QtCore", ".", "QTimer", ".", "singleShot", "(", "0", ",", "self", ".", "nextImage", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.playImages": [[376, 380], ["PyQt5.QtCore.QTimer.singleShot"], "methods", ["None"], ["", "def", "playImages", "(", "self", ",", "status", ")", ":", "\n", "        ", "self", ".", "playState", "=", "status", "\n", "if", "self", ".", "playState", ":", "\n", "            ", "QtCore", ".", "QTimer", ".", "singleShot", "(", "0", ",", "self", ".", "nextImage", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.selectImage": [[388, 405], ["cityscapesViewer.CityscapesViewer.statusBar().showMessage", "PyQt5.QtWidgets.QInputDialog.getItem", "os.path.basename", "items.index", "cityscapesViewer.CityscapesViewer.statusBar().showMessage", "cityscapesViewer.CityscapesViewer.statusBar", "cityscapesViewer.CityscapesViewer.imageChanged", "cityscapesViewer.CityscapesViewer.statusBar"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.imageChanged"], ["", "", "def", "selectImage", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "images", ":", "\n", "            ", "return", "\n", "\n", "", "dlgTitle", "=", "\"Select image to load\"", "\n", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "dlgTitle", ")", "\n", "items", "=", "[", "os", ".", "path", ".", "basename", "(", "i", ")", "for", "i", "in", "self", ".", "images", "]", "\n", "(", "item", ",", "ok", ")", "=", "QtWidgets", ".", "QInputDialog", ".", "getItem", "(", "\n", "self", ",", "dlgTitle", ",", "\"Image\"", ",", "items", ",", "self", ".", "idx", ",", "False", ")", "\n", "if", "(", "ok", "and", "item", ")", ":", "\n", "            ", "idx", "=", "items", ".", "index", "(", "item", ")", "\n", "if", "idx", "!=", "self", ".", "idx", ":", "\n", "                ", "self", ".", "idx", "=", "idx", "\n", "self", ".", "imageChanged", "(", ")", "\n", "", "", "else", ":", "\n", "# Restore the message", "\n", "            ", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "self", ".", "defaultStatusbar", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.zoomToggle": [[408, 413], ["cityscapesViewer.CityscapesViewer.update"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.update"], ["", "", "def", "zoomToggle", "(", "self", ",", "status", ")", ":", "\n", "        ", "self", ".", "zoom", "=", "status", "\n", "if", "status", ":", "\n", "            ", "self", ".", "mousePosOnZoom", "=", "self", ".", "mousePosOrig", "\n", "", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.minus": [[416, 419], ["max", "cityscapesViewer.CityscapesViewer.update"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.update"], ["", "def", "minus", "(", "self", ")", ":", "\n", "        ", "self", ".", "transp", "=", "max", "(", "self", ".", "transp", "-", "0.1", ",", "0.0", ")", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.displayFilepath": [[420, 424], ["cityscapesViewer.CityscapesViewer.statusBar().showMessage", "cityscapesViewer.CityscapesViewer.update", "cityscapesViewer.CityscapesViewer.statusBar"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.update"], ["", "def", "displayFilepath", "(", "self", ")", ":", "\n", "        ", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "\n", "\"Current image: {0}\"", ".", "format", "(", "self", ".", "currentFile", ")", ")", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.displayHelpMessage": [[425, 451], ["PyQt5.QtWidgets.QMessageBox.about", "cityscapesViewer.CityscapesViewer.update"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.update"], ["", "def", "displayHelpMessage", "(", "self", ")", ":", "\n", "\n", "        ", "message", "=", "self", ".", "applicationTitle", "+", "\"\\n\\n\"", "\n", "message", "+=", "\"INSTRUCTIONS\\n\"", "\n", "message", "+=", "\" - select a city and label type from drop-down menu\\n\"", "\n", "message", "+=", "\" - browse images and labels using\\n\"", "\n", "message", "+=", "\"   the toolbar buttons or the controls below\\n\"", "\n", "message", "+=", "\"\\n\"", "\n", "message", "+=", "\"CONTROLS\\n\"", "\n", "message", "+=", "\" - select city [o]\\n\"", "\n", "message", "+=", "\" - select label type [l]\\n\"", "\n", "message", "+=", "\" - highlight objects [move mouse]\\n\"", "\n", "message", "+=", "\" - next image [left arrow]\\n\"", "\n", "message", "+=", "\" - previous image [right arrow]\\n\"", "\n", "message", "+=", "\" - toggle autoplay [space]\\n\"", "\n", "message", "+=", "\" - increase/decrease label transparency\\n\"", "\n", "message", "+=", "\"   [ctrl+mousewheel] or [+ / -]\\n\"", "\n", "message", "+=", "\" - open zoom window [z]\\n\"", "\n", "message", "+=", "\"       zoom in/out [mousewheel]\\n\"", "\n", "message", "+=", "\"       enlarge/shrink zoom window [shift+mousewheel]\\n\"", "\n", "message", "+=", "\" - select a specific image [i]\\n\"", "\n", "message", "+=", "\" - show path to image below [f]\\n\"", "\n", "message", "+=", "\" - exit viewer [esc]\\n\"", "\n", "\n", "QtWidgets", ".", "QMessageBox", ".", "about", "(", "self", ",", "\"HELP!\"", ",", "message", ")", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.plus": [[454, 457], ["min", "cityscapesViewer.CityscapesViewer.update"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.update"], ["", "def", "plus", "(", "self", ")", ":", "\n", "        ", "self", ".", "transp", "=", "min", "(", "self", ".", "transp", "+", "0.1", ",", "1.0", ")", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.closeEvent": [[459, 461], ["event.accept"], "methods", ["None"], ["", "def", "closeEvent", "(", "self", ",", "event", ")", ":", "\n", "        ", "event", ".", "accept", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.imageChanged": [[466, 477], ["cityscapesViewer.CityscapesViewer.loadImage", "cityscapesViewer.CityscapesViewer.loadLabels", "cityscapesViewer.CityscapesViewer.loadDisparities", "cityscapesViewer.CityscapesViewer.updateMouseObject", "cityscapesViewer.CityscapesViewer.update"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.loadImage", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.loadLabels", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.loadDisparities", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.updateMouseObject", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.update"], ["", "def", "imageChanged", "(", "self", ")", ":", "\n", "# Load the first image", "\n", "        ", "self", ".", "loadImage", "(", ")", "\n", "# Load its labels if available", "\n", "self", ".", "loadLabels", "(", ")", "\n", "# Load disparities if available", "\n", "self", ".", "loadDisparities", "(", ")", "\n", "# Update the object the mouse points to", "\n", "self", ".", "updateMouseObject", "(", ")", "\n", "# Update the GUI", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.loadCity": [[483, 496], ["os.path.isdir", "glob.glob", "cityscapesViewer.CityscapesViewer.images.sort", "os.path.join", "cityscapesViewer.CityscapesViewer.images.index"], "methods", ["None"], ["", "def", "loadCity", "(", "self", ")", ":", "\n", "# clear annotations", "\n", "        ", "self", ".", "annotation", "=", "[", "]", "\n", "# Search for all *.pngs to get the image list", "\n", "self", ".", "images", "=", "[", "]", "\n", "if", "os", ".", "path", ".", "isdir", "(", "self", ".", "city", ")", ":", "\n", "            ", "self", ".", "images", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "city", ",", "'*'", "+", "self", ".", "imageExt", ")", ")", "\n", "self", ".", "images", ".", "sort", "(", ")", "\n", "if", "self", ".", "currentFile", "in", "self", ".", "images", ":", "\n", "                ", "self", ".", "idx", "=", "self", ".", "images", ".", "index", "(", "self", ".", "currentFile", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "idx", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.loadImage": [[500, 526], ["cityscapesViewer.CityscapesViewer.statusBar().showMessage", "os.path.normpath", "act.setEnabled", "act.setEnabled", "act.setEnabled", "PyQt5.QtGui.QImage", "cityscapesViewer.CityscapesViewer.image.isNull", "cityscapesViewer.CityscapesViewer.statusBar", "cityscapesViewer.CityscapesViewer.image.isNull", "len"], "methods", ["None"], ["", "", "", "def", "loadImage", "(", "self", ")", ":", "\n", "        ", "success", "=", "False", "\n", "message", "=", "self", ".", "defaultStatusbar", "\n", "if", "self", ".", "images", ":", "\n", "            ", "filename", "=", "self", ".", "images", "[", "self", ".", "idx", "]", "\n", "filename", "=", "os", ".", "path", ".", "normpath", "(", "filename", ")", "\n", "if", "not", "self", ".", "image", ".", "isNull", "(", ")", "and", "filename", "==", "self", ".", "currentFile", ":", "\n", "                ", "success", "=", "True", "\n", "", "else", ":", "\n", "                ", "self", ".", "image", "=", "QtGui", ".", "QImage", "(", "filename", ")", "\n", "if", "self", ".", "image", ".", "isNull", "(", ")", ":", "\n", "                    ", "message", "=", "\"Failed to read image: {0}\"", ".", "format", "(", "filename", ")", "\n", "", "else", ":", "\n", "                    ", "message", "=", "\"Read image: {0}\"", ".", "format", "(", "filename", ")", "\n", "self", ".", "currentFile", "=", "filename", "\n", "success", "=", "True", "\n", "\n", "# Update toolbar actions that need an image", "\n", "", "", "", "for", "act", "in", "self", ".", "actImage", ":", "\n", "            ", "act", ".", "setEnabled", "(", "success", ")", "\n", "", "for", "act", "in", "self", ".", "actImageNotFirst", ":", "\n", "            ", "act", ".", "setEnabled", "(", "success", "and", "self", ".", "idx", ">", "0", ")", "\n", "", "for", "act", "in", "self", ".", "actImageNotLast", ":", "\n", "            ", "act", ".", "setEnabled", "(", "success", "and", "self", ".", "idx", "<", "len", "(", "self", ".", "images", ")", "-", "1", ")", "\n", "\n", "", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.loadLabels": [[530, 560], ["cityscapesViewer.CityscapesViewer.getLabelFilename", "cityscapesViewer.CityscapesViewer.clearAnnotation", "cityscapesViewer.CityscapesViewer.statusBar().currentMessage", "cityscapesViewer.CityscapesViewer.statusBar().showMessage", "cityscapesViewer.CityscapesViewer.clearAnnotation", "cityscapesscripts.helpers.annotation.Annotation", "cityscapesViewer.CityscapesViewer.annotation.fromJsonFile", "cityscapesViewer.CityscapesViewer.statusBar().showMessage", "cityscapesViewer.CityscapesViewer.statusBar", "cityscapesViewer.CityscapesViewer.statusBar", "cityscapesViewer.CityscapesViewer.statusBar"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.getLabelFilename", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.clearAnnotation", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.clearAnnotation", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.Annotation.fromJsonFile"], ["", "def", "loadLabels", "(", "self", ")", ":", "\n", "        ", "filename", "=", "self", ".", "getLabelFilename", "(", ")", "\n", "if", "not", "filename", ":", "\n", "            ", "self", ".", "clearAnnotation", "(", ")", "\n", "return", "\n", "\n", "# If we have everything and the filename did not change, then we are good", "\n", "", "if", "self", ".", "annotation", "and", "filename", "==", "self", ".", "currentLabelFile", ":", "\n", "            ", "return", "\n", "\n", "# Clear the current labels first", "\n", "", "self", ".", "clearAnnotation", "(", ")", "\n", "\n", "try", ":", "\n", "            ", "self", ".", "annotation", "=", "Annotation", "(", "self", ".", "labelTypes", "[", "self", ".", "gtType", "]", ".", "objectType", ")", "\n", "self", ".", "annotation", ".", "fromJsonFile", "(", "filename", ")", "\n", "", "except", "IOError", "as", "e", ":", "\n", "# This is the error if the file does not exist", "\n", "            ", "message", "=", "\"Error parsing labels in {0}. Message: {1}\"", ".", "format", "(", "\n", "filename", ",", "e", ".", "strerror", ")", "\n", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "message", ")", "\n", "\n", "# Remember the filename loaded", "\n", "", "self", ".", "currentLabelFile", "=", "filename", "\n", "\n", "# Remember the status bar message to restore it later", "\n", "restoreMessage", "=", "self", ".", "statusBar", "(", ")", ".", "currentMessage", "(", ")", "\n", "\n", "# Restore the message", "\n", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "restoreMessage", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.loadDisparities": [[563, 619], ["cityscapesViewer.CityscapesViewer.getDisparityFilename", "cityscapesViewer.CityscapesViewer.statusBar().currentMessage", "cityscapesViewer.CityscapesViewer.statusBar().showMessage", "PIL.Image.open", "numpy.array", "numpy.array.round", "numpy.array", "PyQt5.QtGui.QImage", "range", "dispQt.convertToFormat.convertToFormat.setColorTable", "dispQt.convertToFormat.convertToFormat.convertToFormat", "cityscapesViewer.CityscapesViewer.statusBar().showMessage", "cityscapesViewer.CityscapesViewer.colormap.to_rgba", "colortable.append", "cityscapesViewer.CityscapesViewer.statusBar", "cityscapesViewer.CityscapesViewer.statusBar", "int", "int", "int", "PyQt5.QtGui.qRgb", "cityscapesViewer.CityscapesViewer.statusBar"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.getDisparityFilename"], ["", "def", "loadDisparities", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "enableDisparity", ":", "\n", "            ", "return", "\n", "", "if", "not", "self", ".", "gtType", "==", "CsLabelType", ".", "DISPARITY", ":", "\n", "            ", "return", "\n", "\n", "", "filename", "=", "self", ".", "getDisparityFilename", "(", ")", "\n", "if", "not", "filename", ":", "\n", "            ", "self", ".", "dispImg", "=", "None", "\n", "return", "\n", "\n", "# If we have everything and the filename did not change, then we are good", "\n", "", "if", "self", ".", "dispImg", "and", "filename", "==", "self", ".", "currentDispFile", ":", "\n", "            ", "return", "\n", "\n", "# Clear the current labels first", "\n", "", "self", ".", "dispImg", "=", "None", "\n", "\n", "try", ":", "\n", "            ", "self", ".", "dispImg", "=", "Image", ".", "open", "(", "filename", ")", "\n", "", "except", "IOError", "as", "e", ":", "\n", "# This is the error if the file does not exist", "\n", "            ", "message", "=", "\"Error parsing disparities in {0}. Message: {1}\"", ".", "format", "(", "\n", "filename", ",", "e", ".", "strerror", ")", "\n", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "message", ")", "\n", "self", ".", "dispImg", "=", "None", "\n", "\n", "", "if", "self", ".", "dispImg", ":", "\n", "            ", "dispNp", "=", "np", ".", "array", "(", "self", ".", "dispImg", ")", "\n", "dispNp", "=", "dispNp", "/", "128.", "\n", "dispNp", ".", "round", "(", ")", "\n", "dispNp", "=", "np", ".", "array", "(", "dispNp", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "dispQt", "=", "QtGui", ".", "QImage", "(", "\n", "dispNp", ".", "data", ",", "dispNp", ".", "shape", "[", "1", "]", ",", "dispNp", ".", "shape", "[", "0", "]", ",", "QtGui", ".", "QImage", ".", "Format_Indexed8", ")", "\n", "\n", "colortable", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "256", ")", ":", "\n", "                ", "color", "=", "self", ".", "colormap", ".", "to_rgba", "(", "i", ")", "\n", "colorRgb", "=", "(", "int", "(", "color", "[", "0", "]", "*", "255", ")", ",", "\n", "int", "(", "color", "[", "1", "]", "*", "255", ")", ",", "int", "(", "color", "[", "2", "]", "*", "255", ")", ")", "\n", "colortable", ".", "append", "(", "QtGui", ".", "qRgb", "(", "*", "colorRgb", ")", ")", "\n", "\n", "", "dispQt", ".", "setColorTable", "(", "colortable", ")", "\n", "dispQt", "=", "dispQt", ".", "convertToFormat", "(", "\n", "QtGui", ".", "QImage", ".", "Format_ARGB32_Premultiplied", ")", "\n", "self", ".", "dispOverlay", "=", "dispQt", "\n", "\n", "# Remember the filename loaded", "\n", "", "self", ".", "currentDispFile", "=", "filename", "\n", "\n", "# Remember the status bar message to restore it later", "\n", "restoreMessage", "=", "self", ".", "statusBar", "(", ")", ".", "currentMessage", "(", ")", "\n", "\n", "# Restore the message", "\n", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "restoreMessage", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.paintEvent": [[628, 664], ["PyQt5.QtGui.QPainter", "PyQt5.QtGui.QPainter.begin", "cityscapesViewer.CityscapesViewer.updateScale", "cityscapesViewer.CityscapesViewer.getHighlightedObject", "cityscapesViewer.CityscapesViewer.drawImage", "cityscapesViewer.CityscapesViewer.drawLabelAtMouse", "cityscapesViewer.CityscapesViewer.drawZoom", "PyQt5.QtGui.QPainter.end", "PyQt5.QtWidgets.QMainWindow.paintEvent", "cityscapesViewer.CityscapesViewer.draw3dLabels", "cityscapesViewer.CityscapesViewer.drawLabels", "cityscapesViewer.CityscapesViewer.drawBboxes", "cityscapesViewer.CityscapesViewer.drawDisp"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.updateScale", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.getHighlightedObject", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.drawImage", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.drawLabelAtMouse", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.drawZoom", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.paintEvent", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.draw3dLabels", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.drawLabels", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.drawBboxes", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.drawDisp"], ["", "def", "paintEvent", "(", "self", ",", "event", ")", ":", "\n", "# Create a QPainter that can perform draw actions within a widget or image", "\n", "        ", "qp", "=", "QtGui", ".", "QPainter", "(", ")", "\n", "# Begin drawing in the application widget", "\n", "qp", ".", "begin", "(", "self", ")", "\n", "# Update scale", "\n", "self", ".", "updateScale", "(", "qp", ")", "\n", "# Determine the object ID to highlight", "\n", "self", ".", "getHighlightedObject", "(", "qp", ")", "\n", "# Draw the image first", "\n", "self", ".", "drawImage", "(", "qp", ")", "\n", "\n", "# Draw the labels on top", "\n", "if", "self", ".", "gtType", "in", "[", "CsLabelType", ".", "CS3D_BBOX3D", ",", "\n", "CsLabelType", ".", "CS3D_BBOX2D_MODAL", ",", "\n", "CsLabelType", ".", "CS3D_BBOX2D_AMODAL", "]", ":", "\n", "            ", "overlay", "=", "self", ".", "draw3dLabels", "(", "qp", ")", "\n", "", "elif", "self", ".", "gtType", "in", "[", "CsLabelType", ".", "NONE", ",", "\n", "CsLabelType", ".", "POLY_FINE", ",", "\n", "CsLabelType", ".", "POLY_COARSE", "]", ":", "\n", "            ", "overlay", "=", "self", ".", "drawLabels", "(", "qp", ")", "\n", "", "elif", "self", ".", "gtType", "==", "CsLabelType", ".", "CITYPERSONS_BBOX2D", ":", "\n", "            ", "overlay", "=", "self", ".", "drawBboxes", "(", "qp", ")", "\n", "", "elif", "self", ".", "gtType", "==", "CsLabelType", ".", "DISPARITY", ":", "\n", "            ", "overlay", "=", "self", ".", "drawDisp", "(", "qp", ")", "\n", "# Draw the label name next to the mouse", "\n", "", "self", ".", "drawLabelAtMouse", "(", "qp", ")", "\n", "\n", "# Draw the zoom", "\n", "self", ".", "drawZoom", "(", "qp", ",", "overlay", ")", "\n", "\n", "# Thats all drawing", "\n", "qp", ".", "end", "(", ")", "\n", "\n", "# Forward the paint event", "\n", "QtWidgets", ".", "QMainWindow", ".", "paintEvent", "(", "self", ",", "event", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.updateScale": [[666, 683], ["min", "cityscapesViewer.CityscapesViewer.toolbar.height", "float", "cityscapesViewer.CityscapesViewer.image.width", "float", "cityscapesViewer.CityscapesViewer.image.height", "cityscapesViewer.CityscapesViewer.image.width", "cityscapesViewer.CityscapesViewer.image.height", "cityscapesViewer.CityscapesViewer.image.width", "cityscapesViewer.CityscapesViewer.image.height", "qp.device().width", "qp.device().height", "qp.device", "qp.device"], "methods", ["None"], ["", "def", "updateScale", "(", "self", ",", "qp", ")", ":", "\n", "        ", "if", "not", "self", ".", "image", ".", "width", "(", ")", "or", "not", "self", ".", "image", ".", "height", "(", ")", ":", "\n", "            ", "return", "\n", "# Horizontal offset", "\n", "", "self", ".", "xoff", "=", "self", ".", "bordergap", "\n", "# Vertical offset", "\n", "self", ".", "yoff", "=", "self", ".", "toolbar", ".", "height", "(", ")", "+", "self", ".", "bordergap", "\n", "# We want to make sure to keep the image aspect ratio and to make it fit within the widget", "\n", "# Without keeping the aspect ratio, each side of the image is scaled (multiplied) with", "\n", "sx", "=", "float", "(", "qp", ".", "device", "(", ")", ".", "width", "(", ")", "-", "2", "*", "self", ".", "xoff", ")", "/", "self", ".", "image", ".", "width", "(", ")", "\n", "sy", "=", "float", "(", "qp", ".", "device", "(", ")", ".", "height", "(", ")", "-", "2", "*", "self", ".", "yoff", ")", "/", "self", ".", "image", ".", "height", "(", ")", "\n", "# To keep the aspect ratio while making sure it fits, we use the minimum of both scales", "\n", "# Remember the scale for later", "\n", "self", ".", "scale", "=", "min", "(", "sx", ",", "sy", ")", "\n", "# These are then the actual dimensions used", "\n", "self", ".", "w", "=", "self", ".", "scale", "*", "self", ".", "image", ".", "width", "(", ")", "\n", "self", ".", "h", "=", "self", ".", "scale", "*", "self", ".", "image", ".", "height", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.getHighlightedObject": [[685, 702], ["None"], "methods", ["None"], ["", "def", "getHighlightedObject", "(", "self", ",", "qp", ")", ":", "\n", "# This variable we want to fill", "\n", "        ", "self", ".", "highlightObj", "=", "None", "\n", "\n", "# Without labels we cannot do so", "\n", "if", "not", "self", ".", "annotation", ":", "\n", "            ", "return", "\n", "\n", "# If available its the selected object", "\n", "", "highlightObjId", "=", "-", "1", "\n", "# If not available but the polygon is empty or closed, its the mouse object", "\n", "if", "highlightObjId", "<", "0", "and", "not", "self", ".", "mouseOutsideImage", ":", "\n", "            ", "highlightObjId", "=", "self", ".", "mouseObj", "\n", "# Get the actual object that is highlighted", "\n", "", "if", "highlightObjId", ">=", "0", ":", "\n", "            ", "self", ".", "highlightObj", "=", "self", ".", "annotation", ".", "objects", "[", "highlightObjId", "]", "\n", "self", ".", "highlightObjLabel", "=", "self", ".", "annotation", ".", "objects", "[", "highlightObjId", "]", ".", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.drawImage": [[704, 716], ["cityscapesViewer.CityscapesViewer.image.isNull", "qp.save", "qp.drawImage", "qp.restore", "PyQt5.QtCore.QRect"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.save", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.drawImage"], ["", "", "def", "drawImage", "(", "self", ",", "qp", ")", ":", "\n", "# Return if no image available", "\n", "        ", "if", "self", ".", "image", ".", "isNull", "(", ")", ":", "\n", "            ", "return", "\n", "\n", "# Save the painters current setting to a stack", "\n", "", "qp", ".", "save", "(", ")", "\n", "# Draw the image", "\n", "qp", ".", "drawImage", "(", "QtCore", ".", "QRect", "(", "self", ".", "xoff", ",", "self", ".", "yoff", ",", "\n", "self", ".", "w", ",", "self", ".", "h", ")", ",", "self", ".", "image", ")", "\n", "# Restore the saved setting from the stack", "\n", "qp", ".", "restore", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.getPolygon": [[717, 723], ["PyQt5.QtGui.QPolygonF", "PyQt5.QtCore.QPointF", "PyQt5.QtGui.QPolygonF.append"], "methods", ["None"], ["", "def", "getPolygon", "(", "self", ",", "obj", ")", ":", "\n", "        ", "poly", "=", "QtGui", ".", "QPolygonF", "(", ")", "\n", "for", "pt", "in", "obj", ".", "polygon", ":", "\n", "            ", "point", "=", "QtCore", ".", "QPointF", "(", "pt", ".", "x", ",", "pt", ".", "y", ")", "\n", "poly", ".", "append", "(", "point", ")", "\n", "", "return", "poly", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.drawLabels": [[726, 811], ["PyQt5.QtGui.QImage", "PyQt5.QtGui.QColor", "PyQt5.QtGui.QImage.fill", "PyQt5.QtGui.QPainter", "PyQt5.QtGui.QPainter.begin", "PyQt5.QtGui.QPainter.setPen", "PyQt5.QtGui.QPainter.end", "qp.save", "qp.setOpacity", "qp.drawImage", "qp.restore", "cityscapesViewer.CityscapesViewer.image.isNull", "PyQt5.QtGui.QColor", "cityscapesscripts.helpers.labels.assureSingleInstanceName", "cityscapesViewer.CityscapesViewer.getPolygon", "PyQt5.QtGui.QColor", "PyQt5.QtGui.QBrush", "PyQt5.QtGui.QPainter.setBrush", "PyQt5.QtGui.QPainter.drawPolygon", "PyQt5.QtGui.QBrush", "PyQt5.QtGui.QPainter.setBrush", "PyQt5.QtGui.QPainter.setPen", "PyQt5.QtGui.QPainter.drawPolygon", "print", "print", "PyQt5.QtGui.QTransform.fromScale", "PyQt5.QtGui.QPainter.setCompositionMode", "PyQt5.QtGui.QPainter.drawPolygon", "PyQt5.QtGui.QPainter.setCompositionMode", "PyQt5.QtGui.QBrush", "PyQt5.QtGui.QPainter.setBrush", "cityscapesViewer.CityscapesViewer.getPolygon", "PyQt5.QtGui.QTransform.fromScale"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.save", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.drawImage", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.labels.assureSingleInstanceName", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.getPolygon", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.getPolygon"], ["", "def", "drawLabels", "(", "self", ",", "qp", ",", "ignore", "=", "[", "]", ")", ":", "\n", "        ", "if", "self", ".", "image", ".", "isNull", "(", ")", "or", "self", ".", "w", "<=", "0", "or", "self", ".", "h", "<=", "0", ":", "\n", "            ", "return", "\n", "", "if", "not", "self", ".", "annotation", ":", "\n", "            ", "return", "\n", "\n", "# The overlay is created in the viewing coordinates", "\n", "# This way, the drawing is more dense and the polygon edges are nicer", "\n", "# We create an image that is the overlay", "\n", "# Within this image we draw using another QPainter", "\n", "# Finally we use the real QPainter to overlay the overlay-image on what is drawn so far", "\n", "\n", "# The image that is used to draw the overlays", "\n", "", "overlay", "=", "QtGui", ".", "QImage", "(", "\n", "self", ".", "w", ",", "self", ".", "h", ",", "QtGui", ".", "QImage", ".", "Format_ARGB32_Premultiplied", ")", "\n", "# Fill the image with the default color", "\n", "defaultLabel", "=", "name2label", "[", "self", ".", "defaultLabel", "]", "\n", "col", "=", "QtGui", ".", "QColor", "(", "*", "defaultLabel", ".", "color", ")", "\n", "overlay", ".", "fill", "(", "col", ")", "\n", "# Create a new QPainter that draws in the overlay image", "\n", "qp2", "=", "QtGui", ".", "QPainter", "(", ")", "\n", "qp2", ".", "begin", "(", "overlay", ")", "\n", "\n", "# The color of the outlines", "\n", "qp2", ".", "setPen", "(", "QtGui", ".", "QColor", "(", "'white'", ")", ")", "\n", "# Draw all objects", "\n", "for", "obj", "in", "self", ".", "annotation", ".", "objects", ":", "\n", "            ", "if", "obj", ".", "deleted", ":", "\n", "                ", "continue", "\n", "\n", "# The label of the object", "\n", "", "name", "=", "assureSingleInstanceName", "(", "obj", ".", "label", ")", "\n", "# If we do not know a color for this label, warn the user", "\n", "if", "name", "not", "in", "name2label", ":", "\n", "                ", "print", "(", "\"The annotations contain unknown labels. This should not happen. \"", "\n", "\"Please inform the datasets authors. Thank you!\"", ")", "\n", "print", "(", "\"Details: label '{}', file '{}'\"", ".", "format", "(", "\n", "name", ",", "self", ".", "currentLabelFile", ")", ")", "\n", "continue", "\n", "\n", "", "poly", "=", "self", ".", "getPolygon", "(", "obj", ")", "\n", "\n", "# Scale the polygon properly", "\n", "polyToDraw", "=", "poly", "*", "QtGui", ".", "QTransform", ".", "fromScale", "(", "self", ".", "scale", ",", "self", ".", "scale", ")", "\n", "\n", "# Default drawing", "\n", "# Color from color table, solid brush", "\n", "col", "=", "QtGui", ".", "QColor", "(", "*", "name2label", "[", "name", "]", ".", "color", ")", "\n", "brush", "=", "QtGui", ".", "QBrush", "(", "col", ",", "QtCore", ".", "Qt", ".", "SolidPattern", ")", "\n", "qp2", ".", "setBrush", "(", "brush", ")", "\n", "# Overwrite drawing if this is the highlighted object", "\n", "if", "self", ".", "highlightObj", "and", "obj", "==", "self", ".", "highlightObj", ":", "\n", "# First clear everything below of the polygon", "\n", "                ", "qp2", ".", "setCompositionMode", "(", "QtGui", ".", "QPainter", ".", "CompositionMode_Clear", ")", "\n", "qp2", ".", "drawPolygon", "(", "polyToDraw", ")", "\n", "qp2", ".", "setCompositionMode", "(", "\n", "QtGui", ".", "QPainter", ".", "CompositionMode_SourceOver", ")", "\n", "# Set the drawing to a special pattern", "\n", "brush", "=", "QtGui", ".", "QBrush", "(", "col", ",", "QtCore", ".", "Qt", ".", "DiagCrossPattern", ")", "\n", "qp2", ".", "setBrush", "(", "brush", ")", "\n", "\n", "", "qp2", ".", "drawPolygon", "(", "polyToDraw", ")", "\n", "\n", "# Draw outline of selected object dotted", "\n", "", "if", "self", ".", "highlightObj", ":", "\n", "            ", "brush", "=", "QtGui", ".", "QBrush", "(", "QtCore", ".", "Qt", ".", "NoBrush", ")", "\n", "qp2", ".", "setBrush", "(", "brush", ")", "\n", "qp2", ".", "setPen", "(", "QtCore", ".", "Qt", ".", "DashLine", ")", "\n", "polyToDraw", "=", "self", ".", "getPolygon", "(", "\n", "self", ".", "highlightObj", ")", "*", "QtGui", ".", "QTransform", ".", "fromScale", "(", "self", ".", "scale", ",", "self", ".", "scale", ")", "\n", "qp2", ".", "drawPolygon", "(", "polyToDraw", ")", "\n", "\n", "# End the drawing of the overlay", "\n", "", "qp2", ".", "end", "(", ")", "\n", "# Save QPainter settings to stack", "\n", "qp", ".", "save", "(", ")", "\n", "# Define transparency", "\n", "qp", ".", "setOpacity", "(", "self", ".", "transp", ")", "\n", "# Draw the overlay image", "\n", "qp", ".", "drawImage", "(", "self", ".", "xoff", ",", "self", ".", "yoff", ",", "overlay", ")", "\n", "# Restore settings", "\n", "qp", ".", "restore", "(", ")", "\n", "\n", "return", "overlay", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.draw3dLabels": [[812, 885], ["PyQt5.QtGui.QImage", "PyQt5.QtGui.QColor", "PyQt5.QtGui.QImage.fill", "PyQt5.QtGui.QPainter", "PyQt5.QtGui.QPainter.begin", "PyQt5.QtGui.QPainter.end", "qp.save", "qp.setOpacity", "qp.drawImage", "qp.restore", "cityscapesViewer.CityscapesViewer.image.isNull", "PyQt5.QtGui.QColor", "cityscapesscripts.helpers.box3dImageTransform.Box3dImageTransform", "cityscapesscripts.helpers.box3dImageTransform.Box3dImageTransform.initialize_box_from_annotation", "cityscapesViewer.CityscapesViewer.drawCityscapes3dBox3d", "PyQt5.QtGui.QColor", "PyQt5.QtCore.QRectF", "cityscapesViewer.CityscapesViewer.drawCityscapes3dBox2d", "PyQt5.QtCore.QRectF", "cityscapesViewer.CityscapesViewer.drawCityscapes3dBox2d", "PyQt5.QtCore.QRectF", "cityscapesViewer.CityscapesViewer.drawCityscapes3dBox2d"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.save", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.drawImage", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.initialize_box_from_annotation", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.drawCityscapes3dBox3d", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.drawCityscapes3dBox2d", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.drawCityscapes3dBox2d", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.drawCityscapes3dBox2d"], ["", "def", "draw3dLabels", "(", "self", ",", "qp", ")", ":", "\n", "        ", "if", "self", ".", "image", ".", "isNull", "(", ")", "or", "self", ".", "w", "<=", "0", "or", "self", ".", "h", "<=", "0", ":", "\n", "            ", "return", "\n", "", "if", "not", "self", ".", "annotation", "or", "self", ".", "gtType", "==", "CsLabelType", ".", "NONE", ":", "\n", "            ", "return", "\n", "\n", "# The overlay is created in the viewing coordinates", "\n", "# This way, the drawing is more dense and the polygon edges are nicer", "\n", "# We create an image that is the overlay", "\n", "# Within this image we draw using another QPainter", "\n", "# Finally we use the real QPainter to overlay the overlay-image on what is drawn so far", "\n", "\n", "# The image that is used to draw the overlays", "\n", "", "overlay", "=", "QtGui", ".", "QImage", "(", "\n", "self", ".", "w", ",", "self", ".", "h", ",", "QtGui", ".", "QImage", ".", "Format_ARGB32_Premultiplied", ")", "\n", "\n", "# Fill the image with the default color", "\n", "col", "=", "QtGui", ".", "QColor", "(", "0", ",", "0", ",", "0", ",", "0", ")", "\n", "overlay", ".", "fill", "(", "col", ")", "\n", "\n", "# Create a new QPainter that draws in the overlay image", "\n", "qp2", "=", "QtGui", ".", "QPainter", "(", ")", "\n", "qp2", ".", "begin", "(", "overlay", ")", "\n", "\n", "# Loop through annotated objects", "\n", "for", "obj", "in", "self", ".", "annotation", ".", "objects", ":", "\n", "            ", "color", "=", "QtGui", ".", "QColor", "(", "*", "name2label", "[", "obj", ".", "label", "]", ".", "color", ")", "\n", "\n", "# Draw only the 3D boxes", "\n", "if", "obj", ".", "objectType", "==", "CsObjectType", ".", "BBOX3D", ":", "\n", "                ", "if", "self", ".", "gtType", "==", "CsLabelType", ".", "CS3D_BBOX3D", ":", "\n", "                    ", "box3d_annotation", "=", "Box3dImageTransform", "(", "\n", "camera", "=", "self", ".", "annotation", ".", "camera", ")", "\n", "box3d_annotation", ".", "initialize_box_from_annotation", "(", "obj", ")", "\n", "self", ".", "drawCityscapes3dBox3d", "(", "box3d_annotation", ",", "qp2", ",", "color", ",", "highlight", "=", "(", "obj", "==", "self", ".", "highlightObj", ")", ")", "\n", "\n", "# Draw only the modal 2D boxes", "\n", "", "elif", "obj", ".", "bbox_2d", ".", "bbox_modal", "is", "not", "None", "and", "self", ".", "gtType", "==", "CsLabelType", ".", "CS3D_BBOX2D_MODAL", ":", "\n", "                    ", "bbox_modal", "=", "QtCore", ".", "QRectF", "(", "\n", "obj", ".", "bbox_2d", ".", "bbox_modal_xywh", "[", "0", "]", ",", "\n", "obj", ".", "bbox_2d", ".", "bbox_modal_xywh", "[", "1", "]", ",", "\n", "obj", ".", "bbox_2d", ".", "bbox_modal_xywh", "[", "2", "]", ",", "\n", "obj", ".", "bbox_2d", ".", "bbox_modal_xywh", "[", "3", "]", ")", "\n", "self", ".", "drawCityscapes3dBox2d", "(", "bbox_modal", ",", "qp2", ",", "color", ",", "highlight", "=", "(", "obj", "==", "self", ".", "highlightObj", ")", ")", "\n", "\n", "# Draw only the amodal 2D boxes", "\n", "", "elif", "obj", ".", "bbox_2d", ".", "bbox_amodal", "is", "not", "None", "and", "self", ".", "gtType", "==", "CsLabelType", ".", "CS3D_BBOX2D_AMODAL", ":", "\n", "                    ", "bbox", "=", "QtCore", ".", "QRectF", "(", "\n", "obj", ".", "bbox_2d", ".", "bbox_amodal_xywh", "[", "0", "]", ",", "\n", "obj", ".", "bbox_2d", ".", "bbox_amodal_xywh", "[", "1", "]", ",", "\n", "obj", ".", "bbox_2d", ".", "bbox_amodal_xywh", "[", "2", "]", ",", "\n", "obj", ".", "bbox_2d", ".", "bbox_amodal_xywh", "[", "3", "]", ")", "\n", "self", ".", "drawCityscapes3dBox2d", "(", "bbox", ",", "qp2", ",", "color", ",", "highlight", "=", "(", "obj", "==", "self", ".", "highlightObj", ")", ")", "\n", "\n", "# Draw only the ignore regions", "\n", "", "", "elif", "obj", ".", "objectType", "==", "CsObjectType", ".", "IGNORE2D", ":", "\n", "                ", "color", "=", "QtGui", ".", "QColor", "(", "*", "name2label", "[", "obj", ".", "label", "]", ".", "color", ")", "\n", "bbox", "=", "QtCore", ".", "QRectF", "(", "\n", "obj", ".", "bbox_xywh", "[", "0", "]", ",", "obj", ".", "bbox_xywh", "[", "1", "]", ",", "obj", ".", "bbox_xywh", "[", "2", "]", ",", "obj", ".", "bbox_xywh", "[", "3", "]", ")", "\n", "self", ".", "drawCityscapes3dBox2d", "(", "bbox", ",", "qp2", ",", "color", ",", "ignore", "=", "True", ",", "highlight", "=", "(", "obj", "==", "self", ".", "highlightObj", ")", ")", "\n", "\n", "# End the drawing of the overlay", "\n", "", "", "qp2", ".", "end", "(", ")", "\n", "# Save QPainter settings to stack", "\n", "qp", ".", "save", "(", ")", "\n", "# Define transparency", "\n", "qp", ".", "setOpacity", "(", "self", ".", "transp", ")", "\n", "# Draw the overlay image", "\n", "qp", ".", "drawImage", "(", "self", ".", "xoff", ",", "self", ".", "yoff", ",", "overlay", ")", "\n", "# Restore settings", "\n", "qp", ".", "restore", "(", ")", "\n", "\n", "return", "overlay", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.drawCityscapes3dBox2d": [[886, 899], ["cityscapesViewer.CityscapesViewer.scaleBoundingBox", "PyQt5.QtGui.QPen", "qp.setPen", "qp.drawRect", "PyQt5.QtGui.QBrush", "qp.setBrush", "PyQt5.QtGui.QBrush", "qp.setBrush", "color.setAlpha", "qp.setBrush", "PyQt5.QtGui.QBrush", "PyQt5.QtGui.QBrush"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.scaleBoundingBox"], ["", "def", "drawCityscapes3dBox2d", "(", "self", ",", "bbox2d", ",", "qp", ",", "color", ",", "ignore", "=", "False", ",", "highlight", "=", "False", ")", ":", "\n", "        ", "bboxToDraw", "=", "self", ".", "scaleBoundingBox", "(", "bbox2d", ")", "\n", "pen", "=", "QtGui", ".", "QPen", "(", "QtGui", ".", "QBrush", "(", "color", ")", ",", "3.0", ")", "\n", "qp", ".", "setPen", "(", "pen", ")", "\n", "if", "highlight", ":", "\n", "            ", "qp", ".", "setBrush", "(", "QtGui", ".", "QBrush", "(", "QtCore", ".", "Qt", ".", "NoBrush", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "ignore", ":", "\n", "                ", "qp", ".", "setBrush", "(", "QtGui", ".", "QBrush", "(", "color", ",", "QtCore", ".", "Qt", ".", "DiagCrossPattern", ")", ")", "\n", "", "else", ":", "\n", "                ", "color", ".", "setAlpha", "(", "60", ")", "\n", "qp", ".", "setBrush", "(", "QtGui", ".", "QBrush", "(", "color", ",", "QtCore", ".", "Qt", ".", "SolidPattern", ")", ")", "\n", "", "", "qp", ".", "drawRect", "(", "bboxToDraw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.drawCityscapes3dBox3d": [[900, 939], ["box3d_annotation.get_all_side_polygons_2d", "box3d_annotation.get_all_side_visibilities", "box3d_annotation.get_all_side_polygons_2d.append", "box3d_annotation.get_all_side_visibilities.append", "enumerate", "zip", "fill_color.setAlpha", "PyQt5.QtGui.QPen", "pen_color.setAlpha", "PyQt5.QtGui.QPen.setColor", "qp.setPen", "qp.setBrush", "qp.setRenderHints", "qp.drawPolygon", "PyQt5.QtCore.QPointF", "PyQt5.QtGui.QPolygonF", "PyQt5.QtGui.QTransform.fromScale", "PyQt5.QtGui.QBrush", "PyQt5.QtGui.QBrush", "PyQt5.QtGui.QPen.setWidth", "PyQt5.QtGui.QPen.setWidth", "PyQt5.QtGui.QPen.setStyle", "PyQt5.QtGui.QPen.setDashPattern", "PyQt5.QtGui.QBrush"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.get_all_side_polygons_2d", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.get_all_side_visibilities"], ["", "def", "drawCityscapes3dBox3d", "(", "self", ",", "box3d_annotation", ",", "qp", ",", "color", ",", "highlight", "=", "False", ")", ":", "\n", "        ", "box3d_sides", "=", "box3d_annotation", ".", "get_all_side_polygons_2d", "(", ")", "\n", "box3d_side_visibilities", "=", "box3d_annotation", ".", "get_all_side_visibilities", "(", ")", "\n", "box3d_sides", ".", "append", "(", "box3d_annotation", ".", "bottom_arrow_2d", ")", "\n", "box3d_side_visibilities", ".", "append", "(", "True", ")", "\n", "\n", "for", "i", ",", "(", "side", ",", "visible", ")", "in", "enumerate", "(", "zip", "(", "box3d_sides", ",", "box3d_side_visibilities", ")", ")", ":", "\n", "            ", "side", "=", "[", "QtCore", ".", "QPointF", "(", "point", "[", "0", "]", ",", "point", "[", "1", "]", ")", "for", "point", "in", "side", "]", "\n", "\n", "fill_color", "=", "color", "\n", "fill_color", ".", "setAlpha", "(", "60", ")", "\n", "\n", "polygon", "=", "QtGui", ".", "QPolygonF", "(", "\n", "side", ")", "*", "QtGui", ".", "QTransform", ".", "fromScale", "(", "self", ".", "scale", ",", "self", ".", "scale", ")", "\n", "\n", "if", "highlight", ":", "\n", "                ", "fill_brush", "=", "QtGui", ".", "QBrush", "(", "QtCore", ".", "Qt", ".", "NoBrush", ")", "\n", "", "else", ":", "\n", "                ", "fill_brush", "=", "QtGui", ".", "QBrush", "(", "fill_color", ",", "QtCore", ".", "Qt", ".", "SolidPattern", ")", "\n", "\n", "", "thickPen", "=", "QtGui", ".", "QPen", "(", "QtCore", ".", "Qt", ".", "SolidLine", ")", "\n", "pen_color", "=", "fill_color", "\n", "pen_color", ".", "setAlpha", "(", "255", ")", "\n", "thickPen", ".", "setColor", "(", "pen_color", ")", "\n", "if", "i", "<", "6", ":", "\n", "                ", "thickPen", ".", "setWidth", "(", "2", ")", "\n", "", "else", ":", "\n", "# Make arrow thick", "\n", "                ", "thickPen", ".", "setWidth", "(", "5", ")", "\n", "\n", "", "if", "not", "visible", ":", "\n", "                ", "thickPen", ".", "setStyle", "(", "QtCore", ".", "Qt", ".", "CustomDashLine", ")", "\n", "thickPen", ".", "setDashPattern", "(", "[", "1", ",", "10", "]", ")", "\n", "fill_brush", "=", "QtGui", ".", "QBrush", "(", "QtCore", ".", "Qt", ".", "NoBrush", ")", "\n", "\n", "", "qp", ".", "setPen", "(", "thickPen", ")", "\n", "qp", ".", "setBrush", "(", "fill_brush", ")", "\n", "qp", ".", "setRenderHints", "(", "QtGui", ".", "QPainter", ".", "Antialiasing", ")", "\n", "qp", ".", "drawPolygon", "(", "polygon", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.getBoundingBox": [[940, 952], ["PyQt5.QtCore.QRectF", "PyQt5.QtCore.QRectF"], "methods", ["None"], ["", "", "def", "getBoundingBox", "(", "self", ",", "obj", ")", ":", "\n", "        ", "bboxAmodal", "=", "QtCore", ".", "QRectF", "(", "\n", "obj", ".", "bbox_amodal_xywh", "[", "0", "]", ",", "\n", "obj", ".", "bbox_amodal_xywh", "[", "1", "]", ",", "\n", "obj", ".", "bbox_amodal_xywh", "[", "2", "]", ",", "\n", "obj", ".", "bbox_amodal_xywh", "[", "3", "]", ")", "\n", "bboxModal", "=", "QtCore", ".", "QRectF", "(", "\n", "obj", ".", "bbox_modal_xywh", "[", "0", "]", ",", "\n", "obj", ".", "bbox_modal_xywh", "[", "1", "]", ",", "\n", "obj", ".", "bbox_modal_xywh", "[", "2", "]", ",", "\n", "obj", ".", "bbox_modal_xywh", "[", "3", "]", ")", "\n", "return", "bboxAmodal", ",", "bboxModal", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.scaleBoundingBox": [[953, 959], ["copy.deepcopy", "copy.deepcopy.getRect", "copy.deepcopy.setTopLeft", "copy.deepcopy.setSize", "PyQt5.QtCore.QPointF", "PyQt5.QtCore.QSizeF"], "methods", ["None"], ["", "def", "scaleBoundingBox", "(", "self", ",", "bbox", ")", ":", "\n", "        ", "bboxToDraw", "=", "copy", ".", "deepcopy", "(", "bbox", ")", "\n", "x", ",", "y", ",", "w", ",", "h", "=", "bboxToDraw", ".", "getRect", "(", ")", "\n", "bboxToDraw", ".", "setTopLeft", "(", "QtCore", ".", "QPointF", "(", "x", "*", "self", ".", "scale", ",", "y", "*", "self", ".", "scale", ")", ")", "\n", "bboxToDraw", ".", "setSize", "(", "QtCore", ".", "QSizeF", "(", "w", "*", "self", ".", "scale", ",", "h", "*", "self", ".", "scale", ")", ")", "\n", "return", "bboxToDraw", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.drawBboxes": [[962, 1054], ["PyQt5.QtGui.QImage", "PyQt5.QtGui.QColor", "PyQt5.QtGui.QImage.fill", "PyQt5.QtGui.QPainter", "PyQt5.QtGui.QPainter.begin", "PyQt5.QtGui.QPainter.end", "qp.save", "qp.setOpacity", "qp.drawImage", "qp.restore", "cityscapesViewer.CityscapesViewer.image.isNull", "cityscapesViewer.CityscapesViewer.getBoundingBox", "cityscapesViewer.CityscapesViewer.scaleBoundingBox", "cityscapesViewer.CityscapesViewer.scaleBoundingBox", "PyQt5.QtGui.QPainter.setBrush", "PyQt5.QtGui.QColor", "print", "print", "PyQt5.QtGui.QBrush", "PyQt5.QtGui.QPainter.setPen", "PyQt5.QtGui.QPainter.setOpacity", "PyQt5.QtGui.QPainter.drawRect", "PyQt5.QtGui.QPainter.setOpacity", "PyQt5.QtGui.QPainter.drawRect", "PyQt5.QtGui.QPen", "PyQt5.QtGui.QPen", "PyQt5.QtGui.QPen", "PyQt5.QtGui.QPainter.setPen", "PyQt5.QtGui.QPainter.setOpacity", "PyQt5.QtGui.QPainter.drawRect", "PyQt5.QtGui.QPen", "PyQt5.QtGui.QPainter.setPen", "PyQt5.QtGui.QPainter.setOpacity", "PyQt5.QtGui.QPainter.drawRect", "PyQt5.QtGui.QPainter.setBrush", "PyQt5.QtGui.QPainter.setOpacity", "PyQt5.QtGui.QPainter.drawRect", "PyQt5.QtGui.QPen", "PyQt5.QtGui.QPainter.setPen", "PyQt5.QtGui.QPainter.setBrush", "PyQt5.QtGui.QPen", "PyQt5.QtGui.QPainter.setPen", "PyQt5.QtGui.QPainter.setBrush", "PyQt5.QtGui.QBrush", "PyQt5.QtGui.QBrush", "PyQt5.QtGui.QBrush", "PyQt5.QtGui.QBrush", "PyQt5.QtGui.QBrush", "PyQt5.QtGui.QBrush", "PyQt5.QtGui.QBrush", "PyQt5.QtGui.QBrush", "PyQt5.QtGui.QBrush"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.save", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.drawImage", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.getBoundingBox", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.scaleBoundingBox", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.scaleBoundingBox"], ["", "def", "drawBboxes", "(", "self", ",", "qp", ",", "ignore", "=", "[", "]", ")", ":", "\n", "        ", "if", "self", ".", "image", ".", "isNull", "(", ")", "or", "self", ".", "w", "<=", "0", "or", "self", ".", "h", "<=", "0", ":", "\n", "            ", "return", "\n", "", "if", "not", "self", ".", "annotation", ":", "\n", "            ", "return", "\n", "\n", "# The overlay is created in the viewing coordinates", "\n", "# This way, the drawing is more dense and the polygon edges are nicer", "\n", "# We create an image that is the overlay", "\n", "# Within this image we draw using another QPainter", "\n", "# Finally we use the real QPainter to overlay the overlay-image on what is drawn so far", "\n", "\n", "# The image that is used to draw the overlays", "\n", "", "overlay", "=", "QtGui", ".", "QImage", "(", "\n", "self", ".", "w", ",", "self", ".", "h", ",", "QtGui", ".", "QImage", ".", "Format_ARGB32_Premultiplied", ")", "\n", "# Fill the image", "\n", "col", "=", "QtGui", ".", "QColor", "(", "0", ",", "0", ",", "0", ",", "0", ")", "\n", "overlay", ".", "fill", "(", "col", ")", "\n", "# Create a new QPainter that draws in the overlay image", "\n", "qp2", "=", "QtGui", ".", "QPainter", "(", ")", "\n", "qp2", ".", "begin", "(", "overlay", ")", "\n", "\n", "# Draw all objects", "\n", "for", "obj", "in", "self", ".", "annotation", ".", "objects", ":", "\n", "            ", "bboxAmodal", ",", "bboxModal", "=", "self", ".", "getBoundingBox", "(", "obj", ")", "\n", "bboxAmodalToDraw", "=", "self", ".", "scaleBoundingBox", "(", "bboxAmodal", ")", "\n", "bboxModalToDraw", "=", "self", ".", "scaleBoundingBox", "(", "bboxModal", ")", "\n", "# The label of the object", "\n", "name", "=", "obj", ".", "label", "\n", "# If we do not know a color for this label, warn the user", "\n", "if", "name", "not", "in", "name2labelCp", ":", "\n", "                ", "print", "(", "\"The annotations contain unknown labels. This should not happen. \"", "\n", "\"Please inform the datasets authors. Thank you!\"", ")", "\n", "print", "(", "\"Details: label '{}', file '{}'\"", ".", "format", "(", "\n", "name", ",", "self", ".", "currentLabelFile", ")", ")", "\n", "continue", "\n", "\n", "# Reset brush for QPainter object", "\n", "", "qp2", ".", "setBrush", "(", "QtGui", ".", "QBrush", "(", ")", ")", "\n", "\n", "# Color from color table", "\n", "col", "=", "QtGui", ".", "QColor", "(", "*", "name2labelCp", "[", "name", "]", ".", "color", ")", "\n", "\n", "if", "name2labelCp", "[", "name", "]", ".", "hasInstances", ":", "\n", "                ", "if", "self", ".", "highlightObj", "and", "obj", "==", "self", ".", "highlightObj", ":", "\n", "                    ", "pen", "=", "QtGui", ".", "QPen", "(", "QtGui", ".", "QBrush", "(", "col", ")", ",", "5.0", ")", "\n", "", "else", ":", "\n", "                    ", "pen", "=", "QtGui", ".", "QPen", "(", "QtGui", ".", "QBrush", "(", "col", ")", ",", "3.0", ")", "\n", "", "qp2", ".", "setPen", "(", "pen", ")", "\n", "qp2", ".", "setOpacity", "(", "1.0", ")", "\n", "qp2", ".", "drawRect", "(", "bboxAmodalToDraw", ")", "\n", "\n", "if", "self", ".", "highlightObj", "and", "obj", "==", "self", ".", "highlightObj", ":", "\n", "                    ", "pen", "=", "QtGui", ".", "QPen", "(", "QtGui", ".", "QBrush", "(", "col", ")", ",", "3.0", ",", "\n", "style", "=", "QtCore", ".", "Qt", ".", "DotLine", ")", "\n", "qp2", ".", "setPen", "(", "pen", ")", "\n", "qp2", ".", "setOpacity", "(", "1.0", ")", "\n", "qp2", ".", "drawRect", "(", "bboxModalToDraw", ")", "\n", "", "else", ":", "\n", "                    ", "pen", "=", "QtGui", ".", "QPen", "(", "QtGui", ".", "QBrush", "(", "col", ")", ",", "1.0", ",", "\n", "style", "=", "QtCore", ".", "Qt", ".", "DashLine", ")", "\n", "qp2", ".", "setPen", "(", "pen", ")", "\n", "qp2", ".", "setOpacity", "(", "1.0", ")", "\n", "qp2", ".", "drawRect", "(", "bboxModalToDraw", ")", "\n", "\n", "qp2", ".", "setBrush", "(", "QtGui", ".", "QBrush", "(", "col", ",", "QtCore", ".", "Qt", ".", "SolidPattern", ")", ")", "\n", "qp2", ".", "setOpacity", "(", "0.4", ")", "\n", "qp2", ".", "drawRect", "(", "bboxModalToDraw", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "self", ".", "highlightObj", "and", "obj", "==", "self", ".", "highlightObj", ":", "\n", "                    ", "pen", "=", "QtGui", ".", "QPen", "(", "QtGui", ".", "QBrush", "(", "col", ")", ",", "3.0", ")", "\n", "qp2", ".", "setPen", "(", "pen", ")", "\n", "qp2", ".", "setBrush", "(", "QtGui", ".", "QBrush", "(", "col", ",", "QtCore", ".", "Qt", ".", "NoBrush", ")", ")", "\n", "", "else", ":", "\n", "                    ", "pen", "=", "QtGui", ".", "QPen", "(", "QtGui", ".", "QBrush", "(", "col", ")", ",", "3.0", ")", "\n", "qp2", ".", "setPen", "(", "pen", ")", "\n", "qp2", ".", "setBrush", "(", "QtGui", ".", "QBrush", "(", "col", ",", "QtCore", ".", "Qt", ".", "DiagCrossPattern", ")", ")", "\n", "", "qp2", ".", "setOpacity", "(", "1.0", ")", "\n", "qp2", ".", "drawRect", "(", "bboxAmodalToDraw", ")", "\n", "\n", "# End the drawing of the overlay", "\n", "", "", "qp2", ".", "end", "(", ")", "\n", "# Save QPainter settings to stack", "\n", "qp", ".", "save", "(", ")", "\n", "# Define transparency", "\n", "qp", ".", "setOpacity", "(", "self", ".", "transp", ")", "\n", "# Draw the overlay image", "\n", "qp", ".", "drawImage", "(", "self", ".", "xoff", ",", "self", ".", "yoff", ",", "overlay", ")", "\n", "# Restore settings", "\n", "qp", ".", "restore", "(", ")", "\n", "\n", "return", "overlay", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.drawLabelAtMouse": [[1056, 1110], ["qp.save", "PyQt5.QtCore.QRect", "PyQt5.QtCore.QRect.setTopLeft", "PyQt5.QtCore.QRect.setBottomRight", "qp.setPen", "PyQt5.QtGui.QFont", "qp.setFont", "qp.setOpacity", "qp.drawText", "qp.restore", "cityscapesViewer.CityscapesViewer.toolbar.height", "mouse.y", "mouse.y", "PyQt5.QtCore.QPoint", "PyQt5.QtCore.QPoint", "PyQt5.QtGui.QColor", "cityscapesViewer.CityscapesViewer.image.isNull", "mouse.y", "mouse.y", "mouse.y", "mouse.x", "mouse.x"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.save"], ["", "def", "drawLabelAtMouse", "(", "self", ",", "qp", ")", ":", "\n", "# Nothing to do without a highlighted object", "\n", "        ", "if", "not", "self", ".", "highlightObj", ":", "\n", "            ", "return", "\n", "# Nothing to without a mouse position", "\n", "", "if", "not", "self", ".", "mousePosOrig", ":", "\n", "            ", "return", "\n", "\n", "# Save QPainter settings to stack", "\n", "", "qp", ".", "save", "(", ")", "\n", "\n", "# That is the mouse position", "\n", "mouse", "=", "self", ".", "mousePosOrig", "\n", "\n", "# Will show zoom", "\n", "showZoom", "=", "self", ".", "zoom", "and", "not", "self", ".", "image", ".", "isNull", "(", ")", "and", "self", ".", "w", "and", "self", ".", "h", "\n", "\n", "# The text that is written next to the mouse", "\n", "mouseText", "=", "self", ".", "highlightObj", ".", "label", "\n", "\n", "# Where to write the text", "\n", "# Depends on the zoom (additional offset to mouse to make space for zoom?)", "\n", "# The location in the image (if we are at the top we want to write below of the mouse)", "\n", "off", "=", "36", "\n", "if", "showZoom", ":", "\n", "            ", "off", "+=", "self", ".", "zoomSize", "/", "2", "\n", "", "if", "mouse", ".", "y", "(", ")", "-", "off", ">", "self", ".", "toolbar", ".", "height", "(", ")", ":", "\n", "            ", "top", "=", "mouse", ".", "y", "(", ")", "-", "off", "\n", "btm", "=", "mouse", ".", "y", "(", ")", "\n", "vAlign", "=", "QtCore", ".", "Qt", ".", "AlignTop", "\n", "", "else", ":", "\n", "# The height of the cursor", "\n", "            ", "if", "not", "showZoom", ":", "\n", "                ", "off", "+=", "20", "\n", "", "top", "=", "mouse", ".", "y", "(", ")", "\n", "btm", "=", "mouse", ".", "y", "(", ")", "+", "off", "\n", "vAlign", "=", "QtCore", ".", "Qt", ".", "AlignBottom", "\n", "\n", "# Here we can draw", "\n", "", "rect", "=", "QtCore", ".", "QRect", "(", ")", "\n", "rect", ".", "setTopLeft", "(", "QtCore", ".", "QPoint", "(", "mouse", ".", "x", "(", ")", "-", "200", ",", "top", ")", ")", "\n", "rect", ".", "setBottomRight", "(", "QtCore", ".", "QPoint", "(", "mouse", ".", "x", "(", ")", "+", "200", ",", "btm", ")", ")", "\n", "\n", "# The color", "\n", "qp", ".", "setPen", "(", "QtGui", ".", "QColor", "(", "'white'", ")", ")", "\n", "# The font to use", "\n", "font", "=", "QtGui", ".", "QFont", "(", "\"Helvetica\"", ",", "20", ",", "QtGui", ".", "QFont", ".", "Bold", ")", "\n", "qp", ".", "setFont", "(", "font", ")", "\n", "# Non-transparent", "\n", "qp", ".", "setOpacity", "(", "1", ")", "\n", "# Draw the text, horizontally centered", "\n", "qp", ".", "drawText", "(", "rect", ",", "QtCore", ".", "Qt", ".", "AlignHCenter", "|", "vAlign", ",", "mouseText", ")", "\n", "# Restore settings", "\n", "qp", ".", "restore", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.drawZoom": [[1112, 1151], ["PyQt5.QtCore.QRectF", "PyQt5.QtCore.QRectF", "qp.save", "qp.drawImage", "qp.setOpacity", "qp.drawImage", "qp.restore", "cityscapesViewer.CityscapesViewer.image.isNull", "overlay.scaled", "PyQt5.QtGui.QImage", "pix.x", "pix.y", "mouse.x", "mouse.y", "cityscapesViewer.CityscapesViewer.image.width", "cityscapesViewer.CityscapesViewer.image.height", "cityscapesViewer.CityscapesViewer.image.width", "cityscapesViewer.CityscapesViewer.image.height"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.save", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.drawImage", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.drawImage"], ["", "def", "drawZoom", "(", "self", ",", "qp", ",", "overlay", ")", ":", "\n", "# Zoom disabled?", "\n", "        ", "if", "not", "self", ".", "zoom", ":", "\n", "            ", "return", "\n", "# No image", "\n", "", "if", "self", ".", "image", ".", "isNull", "(", ")", "or", "not", "self", ".", "w", "or", "not", "self", ".", "h", ":", "\n", "            ", "return", "\n", "# No mouse", "\n", "", "if", "not", "self", ".", "mousePosOrig", ":", "\n", "            ", "return", "\n", "\n", "# Abbreviation for the zoom window size", "\n", "", "zoomSize", "=", "self", ".", "zoomSize", "\n", "# Abbreviation for the mouse position", "\n", "mouse", "=", "self", ".", "mousePosOrig", "\n", "\n", "# The pixel that is the zoom center", "\n", "pix", "=", "self", ".", "mousePosScaled", "\n", "# The size of the part of the image that is drawn in the zoom window", "\n", "selSize", "=", "zoomSize", "/", "(", "self", ".", "zoomFactor", "*", "self", ".", "zoomFactor", ")", "\n", "# The selection window for the image", "\n", "sel", "=", "QtCore", ".", "QRectF", "(", "pix", ".", "x", "(", ")", "-", "selSize", "/", "2", ",", "pix", ".", "y", "(", ")", "-", "\n", "selSize", "/", "2", ",", "selSize", ",", "selSize", ")", "\n", "# The selection window for the widget", "\n", "view", "=", "QtCore", ".", "QRectF", "(", "mouse", ".", "x", "(", ")", "-", "zoomSize", "/", "2", ",", "\n", "mouse", ".", "y", "(", ")", "-", "zoomSize", "/", "2", ",", "zoomSize", ",", "zoomSize", ")", "\n", "if", "overlay", ":", "\n", "            ", "overlay_scaled", "=", "overlay", ".", "scaled", "(", "\n", "self", ".", "image", ".", "width", "(", ")", ",", "self", ".", "image", ".", "height", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "overlay_scaled", "=", "QtGui", ".", "QImage", "(", "self", ".", "image", ".", "width", "(", "\n", ")", ",", "self", ".", "image", ".", "height", "(", ")", ",", "QtGui", ".", "QImage", ".", "Format_ARGB32_Premultiplied", ")", "\n", "\n", "# Show the zoom image", "\n", "", "qp", ".", "save", "(", ")", "\n", "qp", ".", "drawImage", "(", "view", ",", "self", ".", "image", ",", "sel", ")", "\n", "qp", ".", "setOpacity", "(", "self", ".", "transp", ")", "\n", "qp", ".", "drawImage", "(", "view", ",", "overlay_scaled", ",", "sel", ")", "\n", "qp", ".", "restore", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.drawDisp": [[1153, 1168], ["qp.save", "qp.setOpacity", "qp.drawImage", "qp.restore", "PyQt5.QtCore.QRect"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.save", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.drawImage"], ["", "def", "drawDisp", "(", "self", ",", "qp", ")", ":", "\n", "        ", "if", "not", "self", ".", "dispOverlay", ":", "\n", "            ", "return", "\n", "\n", "# Save QPainter settings to stack", "\n", "", "qp", ".", "save", "(", ")", "\n", "# Define transparency", "\n", "qp", ".", "setOpacity", "(", "self", ".", "transp", ")", "\n", "# Draw the overlay image", "\n", "qp", ".", "drawImage", "(", "QtCore", ".", "QRect", "(", "self", ".", "xoff", ",", "self", ".", "yoff", ",", "\n", "self", ".", "w", ",", "self", ".", "h", ")", ",", "self", ".", "dispOverlay", ")", "\n", "# Restore settings", "\n", "qp", ".", "restore", "(", ")", "\n", "\n", "return", "self", ".", "dispOverlay", "\n", "#############################", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.mouseMoveEvent": [[1177, 1208], ["PyQt5.QtCore.QPointF", "PyQt5.QtCore.QPointF", "PyQt5.QtCore.QPointF.setX", "PyQt5.QtCore.QPointF.setY", "PyQt5.QtCore.QPointF.setX", "PyQt5.QtCore.QPointF.setY", "cityscapesViewer.CityscapesViewer.updateMouseObject", "cityscapesViewer.CityscapesViewer.update", "cityscapesViewer.CityscapesViewer.image.isNull", "event.x", "event.y", "cityscapesViewer.CityscapesViewer.image.rect().contains", "max", "max", "min", "min", "cityscapesViewer.CityscapesViewer.image.rect().contains", "print", "print", "cityscapesViewer.CityscapesViewer.updateMouseObject", "cityscapesViewer.CityscapesViewer.update", "float", "float", "PyQt5.QtCore.QPointF.toPoint", "PyQt5.QtCore.QPointF.x", "PyQt5.QtCore.QPointF.y", "PyQt5.QtCore.QPointF.x", "cityscapesViewer.CityscapesViewer.image.rect().right", "PyQt5.QtCore.QPointF.y", "cityscapesViewer.CityscapesViewer.image.rect().bottom", "PyQt5.QtCore.QPointF.toPoint", "cityscapesViewer.CityscapesViewer.image.rect", "PyQt5.QtCore.QPointF.toPoint", "cityscapesViewer.CityscapesViewer.image.rect", "cityscapesViewer.CityscapesViewer.image.rect", "PyQt5.QtCore.QPointF.x", "PyQt5.QtCore.QPointF.y", "cityscapesViewer.CityscapesViewer.image.rect", "cityscapesViewer.CityscapesViewer.image.rect"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.updateMouseObject", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.update", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.updateMouseObject", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.update"], ["", "def", "mouseMoveEvent", "(", "self", ",", "event", ")", ":", "\n", "        ", "if", "self", ".", "image", ".", "isNull", "(", ")", "or", "self", ".", "w", "==", "0", "or", "self", ".", "h", "==", "0", ":", "\n", "            ", "return", "\n", "\n", "", "mousePosOrig", "=", "QtCore", ".", "QPointF", "(", "event", ".", "x", "(", ")", ",", "event", ".", "y", "(", ")", ")", "\n", "mousePosScaled", "=", "QtCore", ".", "QPointF", "(", "float", "(", "mousePosOrig", ".", "x", "(", "\n", ")", "-", "self", ".", "xoff", ")", "/", "self", ".", "scale", ",", "float", "(", "mousePosOrig", ".", "y", "(", ")", "-", "self", ".", "yoff", ")", "/", "self", ".", "scale", ")", "\n", "mouseOutsideImage", "=", "not", "self", ".", "image", ".", "rect", "(", ")", ".", "contains", "(", "mousePosScaled", ".", "toPoint", "(", ")", ")", "\n", "\n", "mousePosScaled", ".", "setX", "(", "max", "(", "mousePosScaled", ".", "x", "(", ")", ",", "0.", ")", ")", "\n", "mousePosScaled", ".", "setY", "(", "max", "(", "mousePosScaled", ".", "y", "(", ")", ",", "0.", ")", ")", "\n", "mousePosScaled", ".", "setX", "(", "min", "(", "mousePosScaled", ".", "x", "(", ")", ",", "self", ".", "image", ".", "rect", "(", ")", ".", "right", "(", ")", ")", ")", "\n", "mousePosScaled", ".", "setY", "(", "\n", "min", "(", "mousePosScaled", ".", "y", "(", ")", ",", "self", ".", "image", ".", "rect", "(", ")", ".", "bottom", "(", ")", ")", ")", "\n", "\n", "if", "not", "self", ".", "image", ".", "rect", "(", ")", ".", "contains", "(", "mousePosScaled", ".", "toPoint", "(", ")", ")", ":", "\n", "            ", "print", "(", "self", ".", "image", ".", "rect", "(", ")", ")", "\n", "print", "(", "mousePosScaled", ".", "toPoint", "(", ")", ")", "\n", "self", ".", "mousePosScaled", "=", "None", "\n", "self", ".", "mousePosOrig", "=", "None", "\n", "self", ".", "updateMouseObject", "(", ")", "\n", "self", ".", "update", "(", ")", "\n", "return", "\n", "\n", "", "self", ".", "mousePosScaled", "=", "mousePosScaled", "\n", "self", ".", "mousePosOrig", "=", "mousePosOrig", "\n", "self", ".", "mouseOutsideImage", "=", "mouseOutsideImage", "\n", "\n", "# Redraw", "\n", "self", ".", "updateMouseObject", "(", ")", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.leaveEvent": [[1210, 1214], ["None"], "methods", ["None"], ["", "def", "leaveEvent", "(", "self", ",", "event", ")", ":", "\n", "        ", "self", ".", "mousePosOrig", "=", "None", "\n", "self", ".", "mousePosScaled", "=", "None", "\n", "self", ".", "mouseOutsideImage", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.wheelEvent": [[1216, 1238], ["event.modifiers", "event.angleDelta().y", "max", "cityscapesViewer.CityscapesViewer.update", "min", "cityscapesViewer.CityscapesViewer.update", "event.angleDelta", "event.modifiers", "max", "min", "max", "min"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.update", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.update"], ["", "def", "wheelEvent", "(", "self", ",", "event", ")", ":", "\n", "        ", "ctrlPressed", "=", "event", ".", "modifiers", "(", ")", "&", "QtCore", ".", "Qt", ".", "ControlModifier", "\n", "\n", "deltaDegree", "=", "event", ".", "angleDelta", "(", ")", ".", "y", "(", ")", "/", "8", "# Rotation in degree", "\n", "deltaSteps", "=", "deltaDegree", "/", "15", "# Usually one step on the mouse is 15 degrees", "\n", "\n", "if", "ctrlPressed", ":", "\n", "            ", "self", ".", "transp", "=", "max", "(", "min", "(", "self", ".", "transp", "+", "(", "deltaSteps", "*", "0.1", ")", ",", "1.0", ")", ",", "0.0", ")", "\n", "self", ".", "update", "(", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "zoom", ":", "\n", "# If shift is pressed, change zoom window size", "\n", "                ", "if", "event", ".", "modifiers", "(", ")", "and", "QtCore", ".", "Qt", ".", "Key_Shift", ":", "\n", "                    ", "self", ".", "zoomSize", "+=", "deltaSteps", "*", "10", "\n", "self", ".", "zoomSize", "=", "max", "(", "self", ".", "zoomSize", ",", "10", ")", "\n", "self", ".", "zoomSize", "=", "min", "(", "self", ".", "zoomSize", ",", "1000", ")", "\n", "# Change zoom factor", "\n", "", "else", ":", "\n", "                    ", "self", ".", "zoomFactor", "+=", "deltaSteps", "*", "0.05", "\n", "self", ".", "zoomFactor", "=", "max", "(", "self", ".", "zoomFactor", ",", "0.1", ")", "\n", "self", ".", "zoomFactor", "=", "min", "(", "self", ".", "zoomFactor", ",", "10", ")", "\n", "", "self", ".", "update", "(", ")", "\n", "#############################", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.setTip": [[1245, 1250], ["action.setStatusTip", "action.setToolTip", "str", "s.toString", "action.shortcuts"], "methods", ["None"], ["", "", "", "def", "setTip", "(", "self", ",", "action", ",", "tip", ")", ":", "\n", "        ", "tip", "+=", "\" (Hotkeys: '\"", "+", "\"', '\"", ".", "join", "(", "[", "str", "(", "s", ".", "toString", "(", ")", ")", "for", "s", "in", "action", ".", "shortcuts", "(", ")", "]", ")", "+", "\"')\"", "\n", "action", ".", "setStatusTip", "(", "tip", ")", "\n", "action", ".", "setToolTip", "(", "tip", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.updateMouseObject": [[1252, 1272], ["reversed", "range", "len", "cityscapesViewer.CityscapesViewer.getPolygon().containsPoint", "cityscapesViewer.CityscapesViewer.getBoundingBox", "bbox.contains", "cityscapesViewer.CityscapesViewer.getPolygon", "cityscapesViewer.CityscapesViewer.getBoundingBox", "bbox.contains"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.getBoundingBox", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.getPolygon", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.getBoundingBox"], ["", "def", "updateMouseObject", "(", "self", ")", ":", "\n", "        ", "self", ".", "mouseObj", "=", "-", "1", "\n", "if", "self", ".", "mousePosScaled", "is", "None", "or", "self", ".", "annotation", "is", "None", ":", "\n", "            ", "return", "\n", "", "for", "idx", "in", "reversed", "(", "range", "(", "len", "(", "self", ".", "annotation", ".", "objects", ")", ")", ")", ":", "\n", "            ", "obj", "=", "self", ".", "annotation", ".", "objects", "[", "idx", "]", "\n", "if", "obj", ".", "objectType", "==", "CsObjectType", ".", "POLY", ":", "\n", "                ", "if", "self", ".", "getPolygon", "(", "obj", ")", ".", "containsPoint", "(", "self", ".", "mousePosScaled", ",", "QtCore", ".", "Qt", ".", "OddEvenFill", ")", ":", "\n", "                    ", "self", ".", "mouseObj", "=", "idx", "\n", "break", "\n", "", "", "elif", "obj", ".", "objectType", "in", "[", "CsObjectType", ".", "BBOX2D", ",", "CsObjectType", ".", "IGNORE2D", "]", ":", "\n", "                ", "bbox", ",", "_", "=", "self", ".", "getBoundingBox", "(", "obj", ")", "\n", "if", "bbox", ".", "contains", "(", "self", ".", "mousePosScaled", ")", ":", "\n", "                    ", "self", ".", "mouseObj", "=", "idx", "\n", "break", "\n", "", "", "elif", "obj", ".", "objectType", "==", "CsObjectType", ".", "BBOX3D", ":", "\n", "                ", "bbox", ",", "_", "=", "self", ".", "getBoundingBox", "(", "obj", ".", "bbox_2d", ")", "\n", "if", "bbox", ".", "contains", "(", "self", ".", "mousePosScaled", ")", ":", "\n", "                    ", "self", ".", "mouseObj", "=", "idx", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.clearAnnotation": [[1274, 1277], ["None"], "methods", ["None"], ["", "", "", "", "def", "clearAnnotation", "(", "self", ")", ":", "\n", "        ", "self", ".", "annotation", "=", "None", "\n", "self", ".", "currentLabelFile", "=", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.getLabelTypeFromUser": [[1279, 1338], ["cityscapesViewer.CityscapesViewer.statusBar().currentMessage", "cityscapesViewer.CityscapesViewer.statusBar().showMessage", "os.path.join", "os.path.basename", "PyQt5.QtWidgets.QInputDialog.getItem", "cityscapesViewer.CityscapesViewer.statusBar().showMessage", "cityscapesViewer.CityscapesViewer.statusBar", "os.path.dirname", "glob.glob", "cityscapesViewer.CityscapesViewer.statusBar", "os.path.normpath", "os.path.normpath", "os.path.normpath", "cityscapesViewer.CityscapesViewer.loadCity", "cityscapesViewer.CityscapesViewer.imageChanged", "os.path.realpath", "os.path.join", "availableLabelTypes.append", "cityscapesViewer.CityscapesViewer.statusBar", "os.path.join", "os.path.join", "os.path.join", "len", "cityscapesViewer.CityscapesViewer.labelTypes.items"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.loadCity", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.imageChanged"], ["", "def", "getLabelTypeFromUser", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "cityName", "==", "\"\"", "or", "self", ".", "split", "==", "\"\"", ":", "\n", "            ", "return", "\n", "\n", "# Reset the status bar to this message when leaving", "\n", "", "restoreMessage", "=", "self", ".", "statusBar", "(", ")", ".", "currentMessage", "(", ")", "\n", "\n", "if", "'CITYSCAPES_DATASET'", "in", "os", ".", "environ", ":", "\n", "            ", "csPath", "=", "os", ".", "environ", "[", "'CITYSCAPES_DATASET'", "]", "\n", "", "else", ":", "\n", "            ", "csPath", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "\n", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", ",", "'..'", ",", "'..'", ")", "\n", "\n", "", "availableLabelTypes", "=", "[", "]", "\n", "gtDirs", "=", "[", "os", ".", "path", ".", "basename", "(", "path", ")", "for", "path", "in", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "csPath", ",", "'*'", ")", ")", "]", "\n", "\n", "current_idx", "=", "0", "\n", "for", "gtType", "in", "self", ".", "labelTypes", ":", "\n", "            ", "if", "self", ".", "labelTypes", "[", "gtType", "]", ".", "gtDir", "in", "gtDirs", ":", "\n", "                ", "if", "gtType", "!=", "CsLabelType", ".", "DISPARITY", "or", "self", ".", "enableDisparity", ":", "\n", "                    ", "availableLabelTypes", ".", "append", "(", "self", ".", "labelTypes", "[", "gtType", "]", ".", "description", ")", "\n", "# Preselect current label type", "\n", "if", "self", ".", "gtType", "==", "gtType", ":", "\n", "                        ", "current_idx", "=", "len", "(", "availableLabelTypes", ")", "-", "1", "\n", "\n", "# Specify title", "\n", "", "", "", "", "dlgTitle", "=", "\"Select new label type\"", "\n", "message", "=", "dlgTitle", "\n", "question", "=", "dlgTitle", "\n", "message", "=", "\"Select label type for viewing\"", "\n", "question", "=", "\"Which label type would you like to view?\"", "\n", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "message", ")", "\n", "\n", "if", "availableLabelTypes", ":", "\n", "\n", "# Create and wait for dialog", "\n", "            ", "(", "item", ",", "ok", ")", "=", "QtWidgets", ".", "QInputDialog", ".", "getItem", "(", "self", ",", "dlgTitle", ",", "question", ",", "\n", "availableLabelTypes", ",", "current_idx", ",", "False", ")", "\n", "\n", "# Restore message", "\n", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "restoreMessage", ")", "\n", "\n", "if", "ok", "and", "item", ":", "\n", "                ", "self", ".", "gtType", "=", "[", "k", "for", "k", ",", "v", "in", "self", ".", "labelTypes", ".", "items", "(", ")", "if", "v", ".", "description", "==", "item", "]", "[", "0", "]", "\n", "\n", "if", "self", ".", "split", "==", "\"test\"", "and", "self", ".", "gtType", "!=", "\"disparity\"", ":", "\n", "                    ", "self", ".", "transp", "=", "0.1", "\n", "", "else", ":", "\n", "                    ", "self", ".", "transp", "=", "0.5", "\n", "\n", "", "self", ".", "city", "=", "os", ".", "path", ".", "normpath", "(", "os", ".", "path", ".", "join", "(", "\n", "csPath", ",", "\"leftImg8bit\"", ",", "self", ".", "split", ",", "self", ".", "cityName", ")", ")", "\n", "self", ".", "labelPath", "=", "os", ".", "path", ".", "normpath", "(", "\n", "os", ".", "path", ".", "join", "(", "csPath", ",", "self", ".", "labelTypes", "[", "self", ".", "gtType", "]", ".", "gtDir", ",", "self", ".", "split", ",", "self", ".", "cityName", ")", ")", "\n", "self", ".", "dispPath", "=", "os", ".", "path", ".", "normpath", "(", "\n", "os", ".", "path", ".", "join", "(", "csPath", ",", "\"disparity\"", ",", "self", ".", "split", ",", "self", ".", "cityName", ")", ")", "\n", "\n", "self", ".", "loadCity", "(", ")", "\n", "self", ".", "imageChanged", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.getCityFromUser": [[1339, 1416], ["cityscapesViewer.CityscapesViewer.statusBar().currentMessage", "cityscapesViewer.CityscapesViewer.statusBar().showMessage", "os.path.join", "glob.glob", "glob.glob.sort", "availableCities.extend", "cityNames.index", "PyQt5.QtWidgets.QInputDialog.getItem", "cityscapesViewer.CityscapesViewer.statusBar().showMessage", "PyQt5.QtWidgets.QMessageBox.information", "cityscapesViewer.CityscapesViewer.statusBar", "os.path.dirname", "os.path.join", "cityscapesViewer.CityscapesViewer.statusBar", "sys.exit", "os.path.realpath", "cityscapesViewer.CityscapesViewer.statusBar", "str", "os.path.normpath", "os.path.normpath", "os.path.normpath", "cityscapesViewer.CityscapesViewer.loadCity", "cityscapesViewer.CityscapesViewer.imageChanged", "cityscapesViewer.CityscapesViewer.getLabelTypeFromUser", "os.path.basename", "os.listdir", "item.split", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.loadCity", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.imageChanged", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.getLabelTypeFromUser"], ["", "", "", "def", "getCityFromUser", "(", "self", ")", ":", "\n", "# Reset the status bar to this message when leaving", "\n", "        ", "restoreMessage", "=", "self", ".", "statusBar", "(", ")", ".", "currentMessage", "(", ")", "\n", "\n", "if", "'CITYSCAPES_DATASET'", "in", "os", ".", "environ", ":", "\n", "            ", "csPath", "=", "os", ".", "environ", "[", "'CITYSCAPES_DATASET'", "]", "\n", "", "else", ":", "\n", "            ", "csPath", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "\n", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", ",", "'..'", ",", "'..'", ")", "\n", "\n", "", "availableCities", "=", "[", "]", "\n", "splits", "=", "[", "\"train_extra\"", ",", "\"train\"", ",", "\"val\"", ",", "\"test\"", "]", "\n", "for", "split", "in", "splits", ":", "\n", "            ", "cities", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "csPath", ",", "\"leftImg8bit\"", ",", "split", ",", "'*'", ")", ")", "\n", "cities", ".", "sort", "(", ")", "\n", "availableCities", ".", "extend", "(", "\n", "[", "(", "split", ",", "os", ".", "path", ".", "basename", "(", "c", ")", ")", "for", "c", "in", "cities", "if", "os", ".", "listdir", "(", "c", ")", "]", ")", "\n", "\n", "# List of possible labels", "\n", "", "items", "=", "[", "split", "+", "\", \"", "+", "city", "for", "(", "split", ",", "city", ")", "in", "availableCities", "]", "\n", "\n", "# Preselect current city", "\n", "current_idx", "=", "0", "\n", "cityNames", "=", "[", "item", "[", "1", "]", "for", "item", "in", "availableCities", "]", "\n", "if", "self", ".", "cityName", "in", "cityNames", ":", "\n", "            ", "current_idx", "=", "cityNames", ".", "index", "(", "self", ".", "cityName", ")", "\n", "\n", "# Specify title", "\n", "", "dlgTitle", "=", "\"Select new city\"", "\n", "message", "=", "dlgTitle", "\n", "question", "=", "dlgTitle", "\n", "message", "=", "\"Select city for viewing\"", "\n", "question", "=", "\"Which city would you like to view?\"", "\n", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "message", ")", "\n", "\n", "if", "items", ":", "\n", "# Create and wait for dialog", "\n", "            ", "(", "item", ",", "ok", ")", "=", "QtWidgets", ".", "QInputDialog", ".", "getItem", "(", "self", ",", "dlgTitle", ",", "question", ",", "\n", "items", ",", "current_idx", ",", "False", ")", "\n", "\n", "# Restore message", "\n", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "restoreMessage", ")", "\n", "\n", "if", "ok", "and", "item", ":", "\n", "                ", "(", "split", ",", "city", ")", "=", "[", "str", "(", "i", ")", "for", "i", "in", "item", ".", "split", "(", "', '", ")", "]", "\n", "\n", "self", ".", "cityName", "=", "city", "\n", "self", ".", "split", "=", "split", "\n", "\n", "if", "self", ".", "gtType", "!=", "CsLabelType", ".", "NONE", ":", "\n", "                    ", "self", ".", "city", "=", "os", ".", "path", ".", "normpath", "(", "os", ".", "path", ".", "join", "(", "\n", "csPath", ",", "\"leftImg8bit\"", ",", "self", ".", "split", ",", "self", ".", "cityName", ")", ")", "\n", "self", ".", "labelPath", "=", "os", ".", "path", ".", "normpath", "(", "\n", "os", ".", "path", ".", "join", "(", "csPath", ",", "self", ".", "labelTypes", "[", "self", ".", "gtType", "]", ".", "gtDir", ",", "self", ".", "split", ",", "self", ".", "cityName", ")", ")", "\n", "self", ".", "dispPath", "=", "os", ".", "path", ".", "normpath", "(", "\n", "os", ".", "path", ".", "join", "(", "csPath", ",", "\"disparity\"", ",", "self", ".", "split", ",", "self", ".", "cityName", ")", ")", "\n", "self", ".", "loadCity", "(", ")", "\n", "self", ".", "imageChanged", "(", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "self", ".", "getLabelTypeFromUser", "(", ")", "\n", "\n", "", "", "", "else", ":", "\n", "\n", "            ", "warning", "=", "\"\"", "\n", "warning", "+=", "\"The data was not found. Please:\\n\\n\"", "\n", "warning", "+=", "\" - make sure the scripts folder is in the Cityscapes root folder\\n\"", "\n", "warning", "+=", "\"or\\n\"", "\n", "warning", "+=", "\" - set CITYSCAPES_DATASET to the Cityscapes root folder\\n\"", "\n", "warning", "+=", "\"       e.g. 'export CITYSCAPES_DATASET=<root_path>'\\n\"", "\n", "\n", "reply", "=", "QtWidgets", ".", "QMessageBox", ".", "information", "(", "self", ",", "\"ERROR!\"", ",", "warning", ",", "\n", "QtWidgets", ".", "QMessageBox", ".", "Ok", ")", "\n", "if", "reply", "==", "QtWidgets", ".", "QMessageBox", ".", "Ok", ":", "\n", "                ", "sys", ".", "exit", "(", ")", "\n", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.isLabelPathValid": [[1418, 1420], ["os.path.isdir"], "methods", ["None"], ["", "def", "isLabelPathValid", "(", "self", ",", "labelPath", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "isdir", "(", "labelPath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.getLabelFilename": [[1423, 1443], ["os.path.basename", "os.path.normpath.replace", "os.path.join", "glob.glob", "os.path.normpath", "cityscapesViewer.CityscapesViewer.isLabelPathValid"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.isLabelPathValid"], ["", "def", "getLabelFilename", "(", "self", ")", ":", "\n", "# And we need to have a directory where labels should be searched", "\n", "        ", "if", "not", "self", ".", "labelPath", ":", "\n", "            ", "return", "\"\"", "\n", "# Without the name of the current images, there is also nothing we can do", "\n", "", "if", "not", "self", ".", "currentFile", ":", "\n", "            ", "return", "\"\"", "\n", "# Check if the label directory is valid.", "\n", "", "if", "not", "self", ".", "isLabelPathValid", "(", "self", ".", "labelPath", ")", ":", "\n", "            ", "return", "\"\"", "\n", "\n", "# Generate the filename of the label file", "\n", "", "filename", "=", "os", ".", "path", ".", "basename", "(", "self", ".", "currentFile", ")", "\n", "filename", "=", "filename", ".", "replace", "(", "self", ".", "imageExt", ",", "self", ".", "gtExt", ")", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "labelPath", ",", "filename", ")", "\n", "search", "=", "glob", ".", "glob", "(", "filename", ")", "\n", "if", "not", "search", ":", "\n", "            ", "return", "\"\"", "\n", "", "filename", "=", "os", ".", "path", ".", "normpath", "(", "search", "[", "0", "]", ")", "\n", "return", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.getDisparityFilename": [[1446, 1463], ["os.path.basename", "os.path.normpath.replace", "os.path.join", "os.path.normpath", "os.path.isdir"], "methods", ["None"], ["", "def", "getDisparityFilename", "(", "self", ")", ":", "\n", "# And we need to have a directory where disparities should be searched", "\n", "        ", "if", "not", "self", ".", "dispPath", ":", "\n", "            ", "return", "\"\"", "\n", "# Without the name of the current images, there is also nothing we can do", "\n", "", "if", "not", "self", ".", "currentFile", ":", "\n", "            ", "return", "\"\"", "\n", "# Check if the label directory is valid.", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "dispPath", ")", ":", "\n", "            ", "return", "\"\"", "\n", "\n", "# Generate the filename of the label file", "\n", "", "filename", "=", "os", ".", "path", ".", "basename", "(", "self", ".", "currentFile", ")", "\n", "filename", "=", "filename", ".", "replace", "(", "self", ".", "imageExt", ",", "self", ".", "dispExt", ")", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dispPath", ",", "filename", ")", "\n", "filename", "=", "os", ".", "path", ".", "normpath", "(", "filename", ")", "\n", "return", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.CityscapesViewer.createPopupMenu": [[1465, 1467], ["None"], "methods", ["None"], ["", "def", "createPopupMenu", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.viewer.cityscapesViewer.main": [[1469, 1474], ["PyQt5.QtWidgets.QApplication", "cityscapesViewer.CityscapesViewer", "CityscapesViewer.resize", "sys.exit", "QtWidgets.QApplication.exec_"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.datasets.resize"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "app", "=", "QtWidgets", ".", "QApplication", "(", "sys", ".", "argv", ")", "\n", "tool", "=", "CityscapesViewer", "(", ")", "\n", "tool", ".", "resize", "(", "800", ",", "510", ")", "\n", "sys", ".", "exit", "(", "app", ".", "exec_", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.CsObject.__init__": [[35, 53], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "objType", ")", ":", "\n", "        ", "self", ".", "objectType", "=", "objType", "\n", "# the label", "\n", "self", ".", "label", "=", "\"\"", "\n", "\n", "# If deleted or not", "\n", "self", ".", "deleted", "=", "0", "\n", "# If verified or not", "\n", "self", ".", "verified", "=", "0", "\n", "# The date string", "\n", "self", ".", "date", "=", "\"\"", "\n", "# The username", "\n", "self", ".", "user", "=", "\"\"", "\n", "# Draw the object", "\n", "# Not read from or written to JSON", "\n", "# Set to False if deleted object", "\n", "# Might be set to False by the application for other reasons", "\n", "self", ".", "draw", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.CsObject.__str__": [[54, 56], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "__str__", "(", "self", ")", ":", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.CsObject.fromJsonText": [[57, 59], ["None"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "fromJsonText", "(", "self", ",", "jsonText", ",", "objId", "=", "-", "1", ")", ":", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.CsObject.toJsonText": [[60, 62], ["None"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "toJsonText", "(", "self", ")", ":", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.CsObject.updateDate": [[63, 75], ["datetime.datetime.now().strftime", "locale.setlocale", "locale.setlocale", "locale.setlocale", "locale.setlocale", "datetime.datetime.now"], "methods", ["None"], ["def", "updateDate", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "locale", ".", "setlocale", "(", "locale", ".", "LC_ALL", ",", "'en_US.utf8'", ")", "\n", "", "except", "locale", ".", "Error", ":", "\n", "            ", "locale", ".", "setlocale", "(", "locale", ".", "LC_ALL", ",", "'en_US'", ")", "\n", "", "except", "locale", ".", "Error", ":", "\n", "            ", "locale", ".", "setlocale", "(", "locale", ".", "LC_ALL", ",", "'us_us.utf8'", ")", "\n", "", "except", "locale", ".", "Error", ":", "\n", "            ", "locale", ".", "setlocale", "(", "locale", ".", "LC_ALL", ",", "'us_us'", ")", "\n", "", "except", "Exception", ":", "\n", "            ", "pass", "\n", "", "self", ".", "date", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%d-%b-%Y %H:%M:%S\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.CsObject.delete": [[77, 80], ["None"], "methods", ["None"], ["", "def", "delete", "(", "self", ")", ":", "\n", "        ", "self", ".", "deleted", "=", "1", "\n", "self", ".", "draw", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.CsPoly.__init__": [[86, 92], ["annotation.CsObject.__init__"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "CsObject", ".", "__init__", "(", "self", ",", "CsObjectType", ".", "POLY", ")", "\n", "# the polygon as list of points", "\n", "self", ".", "polygon", "=", "[", "]", "\n", "# the object ID", "\n", "self", ".", "id", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.CsPoly.__str__": [[93, 109], ["len"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "polyText", "=", "\"\"", "\n", "if", "self", ".", "polygon", ":", "\n", "            ", "if", "len", "(", "self", ".", "polygon", ")", "<=", "4", ":", "\n", "                ", "for", "p", "in", "self", ".", "polygon", ":", "\n", "                    ", "polyText", "+=", "'({},{}) '", ".", "format", "(", "p", ".", "x", ",", "p", ".", "y", ")", "\n", "", "", "else", ":", "\n", "                ", "polyText", "+=", "'({},{}) ({},{}) ... ({},{}) ({},{})'", ".", "format", "(", "\n", "self", ".", "polygon", "[", "0", "]", ".", "x", ",", "self", ".", "polygon", "[", "0", "]", ".", "y", ",", "\n", "self", ".", "polygon", "[", "1", "]", ".", "x", ",", "self", ".", "polygon", "[", "1", "]", ".", "y", ",", "\n", "self", ".", "polygon", "[", "-", "2", "]", ".", "x", ",", "self", ".", "polygon", "[", "-", "2", "]", ".", "y", ",", "\n", "self", ".", "polygon", "[", "-", "1", "]", ".", "x", ",", "self", ".", "polygon", "[", "-", "1", "]", ".", "y", ")", "\n", "", "", "else", ":", "\n", "            ", "polyText", "=", "\"none\"", "\n", "", "text", "=", "\"Object: {} - {}\"", ".", "format", "(", "self", ".", "label", ",", "polyText", ")", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.CsPoly.fromJsonText": [[110, 134], ["str", "Point", "jsonText.keys", "jsonText.keys", "jsonText.keys", "jsonText.keys"], "methods", ["None"], ["", "def", "fromJsonText", "(", "self", ",", "jsonText", ",", "objId", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "id", "=", "objId", "\n", "self", ".", "label", "=", "str", "(", "jsonText", "[", "'label'", "]", ")", "\n", "self", ".", "polygon", "=", "[", "Point", "(", "p", "[", "0", "]", ",", "p", "[", "1", "]", ")", "for", "p", "in", "jsonText", "[", "'polygon'", "]", "]", "\n", "if", "'deleted'", "in", "jsonText", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "deleted", "=", "jsonText", "[", "'deleted'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "deleted", "=", "0", "\n", "", "if", "'verified'", "in", "jsonText", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "verified", "=", "jsonText", "[", "'verified'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "verified", "=", "1", "\n", "", "if", "'user'", "in", "jsonText", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "user", "=", "jsonText", "[", "'user'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "user", "=", "''", "\n", "", "if", "'date'", "in", "jsonText", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "date", "=", "jsonText", "[", "'date'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "date", "=", "''", "\n", "", "if", "self", ".", "deleted", "==", "1", ":", "\n", "            ", "self", ".", "draw", "=", "False", "\n", "", "else", ":", "\n", "            ", "self", ".", "draw", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.CsPoly.toJsonText": [[135, 148], ["objDict[].append"], "methods", ["None"], ["", "", "def", "toJsonText", "(", "self", ")", ":", "\n", "        ", "objDict", "=", "{", "}", "\n", "objDict", "[", "'label'", "]", "=", "self", ".", "label", "\n", "objDict", "[", "'id'", "]", "=", "self", ".", "id", "\n", "objDict", "[", "'deleted'", "]", "=", "self", ".", "deleted", "\n", "objDict", "[", "'verified'", "]", "=", "self", ".", "verified", "\n", "objDict", "[", "'user'", "]", "=", "self", ".", "user", "\n", "objDict", "[", "'date'", "]", "=", "self", ".", "date", "\n", "objDict", "[", "'polygon'", "]", "=", "[", "]", "\n", "for", "pt", "in", "self", ".", "polygon", ":", "\n", "            ", "objDict", "[", "'polygon'", "]", ".", "append", "(", "[", "pt", ".", "x", ",", "pt", ".", "y", "]", ")", "\n", "\n", "", "return", "objDict", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.CsBbox2d.__init__": [[154, 164], ["annotation.CsObject.__init__"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "CsObject", ".", "__init__", "(", "self", ",", "CsObjectType", ".", "BBOX2D", ")", "\n", "# the polygon as list of points", "\n", "self", ".", "bbox_amodal_xywh", "=", "[", "]", "\n", "self", ".", "bbox_modal_xywh", "=", "[", "]", "\n", "\n", "# the ID of the corresponding object", "\n", "self", ".", "instanceId", "=", "-", "1", "\n", "# the label of the corresponding object", "\n", "self", ".", "label", "=", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.CsBbox2d.__str__": [[165, 177], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "bboxAmodalText", "=", "\"\"", "\n", "bboxAmodalText", "+=", "'[(x1: {}, y1: {}), (w: {}, h: {})]'", ".", "format", "(", "\n", "self", ".", "bbox_amodal_xywh", "[", "0", "]", ",", "self", ".", "bbox_amodal_xywh", "[", "1", "]", ",", "self", ".", "bbox_amodal_xywh", "[", "2", "]", ",", "self", ".", "bbox_amodal_xywh", "[", "3", "]", ")", "\n", "\n", "bboxModalText", "=", "\"\"", "\n", "bboxModalText", "+=", "'[(x1: {}, y1: {}), (w: {}, h: {})]'", ".", "format", "(", "\n", "self", ".", "bbox_modal_xywh", "[", "0", "]", ",", "self", ".", "bbox_modal_xywh", "[", "1", "]", ",", "self", ".", "bbox_modal_xywh", "[", "2", "]", ",", "self", ".", "bbox_modal_xywh", "[", "3", "]", ")", "\n", "\n", "text", "=", "\"Object: {}\\n - Amodal {}\\n - Modal {}\"", ".", "format", "(", "\n", "self", ".", "label", ",", "bboxAmodalText", ",", "bboxModalText", ")", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.CsBbox2d.setAmodalBox": [[178, 185], ["None"], "methods", ["None"], ["", "def", "setAmodalBox", "(", "self", ",", "bbox_amodal", ")", ":", "\n", "# sets the amodal box if required", "\n", "        ", "self", ".", "bbox_amodal_xywh", "=", "[", "\n", "bbox_amodal", "[", "0", "]", ",", "\n", "bbox_amodal", "[", "1", "]", ",", "\n", "bbox_amodal", "[", "2", "]", "-", "bbox_amodal", "[", "0", "]", ",", "\n", "bbox_amodal", "[", "3", "]", "-", "bbox_amodal", "[", "1", "]", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.CsBbox2d.bbox_amodal": [[188, 196], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "bbox_amodal", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the 2d box as [xmin, ymin, xmax, ymax]\"\"\"", "\n", "return", "[", "\n", "self", ".", "bbox_amodal_xywh", "[", "0", "]", ",", "\n", "self", ".", "bbox_amodal_xywh", "[", "1", "]", ",", "\n", "self", ".", "bbox_amodal_xywh", "[", "0", "]", "+", "self", ".", "bbox_amodal_xywh", "[", "2", "]", ",", "\n", "self", ".", "bbox_amodal_xywh", "[", "1", "]", "+", "self", ".", "bbox_amodal_xywh", "[", "3", "]", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.CsBbox2d.bbox_modal": [[198, 206], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "bbox_modal", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the 2d box as [xmin, ymin, xmax, ymax]\"\"\"", "\n", "return", "[", "\n", "self", ".", "bbox_modal_xywh", "[", "0", "]", ",", "\n", "self", ".", "bbox_modal_xywh", "[", "1", "]", ",", "\n", "self", ".", "bbox_modal_xywh", "[", "0", "]", "+", "self", ".", "bbox_modal_xywh", "[", "2", "]", ",", "\n", "self", ".", "bbox_modal_xywh", "[", "1", "]", "+", "self", ".", "bbox_modal_xywh", "[", "3", "]", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.CsBbox2d.fromJsonText": [[208, 226], ["str", "jsonText.keys", "jsonText.keys", "jsonText.keys", "jsonText.keys", "jsonText.keys", "jsonText.keys"], "methods", ["None"], ["", "def", "fromJsonText", "(", "self", ",", "jsonText", ",", "objId", "=", "-", "1", ")", ":", "\n", "# try to load from cityperson format", "\n", "        ", "if", "'bbox'", "in", "jsonText", ".", "keys", "(", ")", "and", "'bboxVis'", "in", "jsonText", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "bbox_amodal_xywh", "=", "jsonText", "[", "'bbox'", "]", "\n", "self", ".", "bbox_modal_xywh", "=", "jsonText", "[", "'bboxVis'", "]", "\n", "# both modal and amodal boxes are provided", "\n", "", "elif", "\"modal\"", "in", "jsonText", ".", "keys", "(", ")", "and", "\"amodal\"", "in", "jsonText", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "bbox_amodal_xywh", "=", "jsonText", "[", "'amodal'", "]", "\n", "self", ".", "bbox_modal_xywh", "=", "jsonText", "[", "'modal'", "]", "\n", "# only amodal boxes are provided", "\n", "", "else", ":", "\n", "            ", "self", ".", "bbox_modal_xywh", "=", "jsonText", "[", "'amodal'", "]", "\n", "self", ".", "bbox_amodal_xywh", "=", "jsonText", "[", "'amodal'", "]", "\n", "\n", "# load label and instanceId if available", "\n", "", "if", "'label'", "in", "jsonText", ".", "keys", "(", ")", "and", "'instanceId'", "in", "jsonText", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "label", "=", "str", "(", "jsonText", "[", "'label'", "]", ")", "\n", "self", ".", "instanceId", "=", "jsonText", "[", "'instanceId'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.CsBbox2d.toJsonText": [[227, 235], ["None"], "methods", ["None"], ["", "", "def", "toJsonText", "(", "self", ")", ":", "\n", "        ", "objDict", "=", "{", "}", "\n", "objDict", "[", "'label'", "]", "=", "self", ".", "label", "\n", "objDict", "[", "'instanceId'", "]", "=", "self", ".", "instanceId", "\n", "objDict", "[", "'modal'", "]", "=", "self", ".", "bbox_modal_xywh", "\n", "objDict", "[", "'amodal'", "]", "=", "self", ".", "bbox_amodal_xywh", "\n", "\n", "return", "objDict", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.CsBbox3d.__init__": [[241, 252], ["annotation.CsObject.__init__"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "CsObject", ".", "__init__", "(", "self", ",", "CsObjectType", ".", "BBOX3D", ")", "\n", "\n", "self", ".", "bbox_2d", "=", "None", "\n", "\n", "self", ".", "center", "=", "[", "]", "\n", "self", ".", "dims", "=", "[", "]", "\n", "self", ".", "rotation", "=", "[", "]", "\n", "self", ".", "instanceId", "=", "-", "1", "\n", "self", ".", "label", "=", "\"\"", "\n", "self", ".", "score", "=", "-", "1.", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.CsBbox3d.__str__": [[253, 267], ["str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "bbox2dText", "=", "str", "(", "self", ".", "bbox_2d", ")", "\n", "\n", "bbox3dText", "=", "\"\"", "\n", "bbox3dText", "+=", "'\\n - Center (x/y/z) [m]: {}/{}/{}'", ".", "format", "(", "\n", "self", ".", "center", "[", "0", "]", ",", "self", ".", "center", "[", "1", "]", ",", "self", ".", "center", "[", "2", "]", ")", "\n", "bbox3dText", "+=", "'\\n - Dimensions (l/w/h) [m]: {}/{}/{}'", ".", "format", "(", "\n", "self", ".", "dims", "[", "0", "]", ",", "self", ".", "dims", "[", "1", "]", ",", "self", ".", "dims", "[", "2", "]", ")", "\n", "bbox3dText", "+=", "'\\n - Rotation: {}/{}/{}/{}'", ".", "format", "(", "\n", "self", ".", "rotation", "[", "0", "]", ",", "self", ".", "rotation", "[", "1", "]", ",", "self", ".", "rotation", "[", "2", "]", ",", "self", ".", "rotation", "[", "3", "]", ")", "\n", "\n", "text", "=", "\"Object: {}\\n2D {}\\n - 3D {}\"", ".", "format", "(", "\n", "self", ".", "label", ",", "bbox2dText", ",", "bbox3dText", ")", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.CsBbox3d.fromJsonText": [[268, 281], ["annotation.CsBbox2d", "annotation.CsBbox3d.bbox_2d.fromJsonText", "jsonText.keys"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.Annotation.fromJsonText"], ["", "def", "fromJsonText", "(", "self", ",", "jsonText", ",", "objId", "=", "-", "1", ")", ":", "\n", "# load 2D box", "\n", "        ", "self", ".", "bbox_2d", "=", "CsBbox2d", "(", ")", "\n", "self", ".", "bbox_2d", ".", "fromJsonText", "(", "jsonText", "[", "'2d'", "]", ")", "\n", "\n", "self", ".", "center", "=", "jsonText", "[", "'3d'", "]", "[", "'center'", "]", "\n", "self", ".", "dims", "=", "jsonText", "[", "'3d'", "]", "[", "'dimensions'", "]", "\n", "self", ".", "rotation", "=", "jsonText", "[", "'3d'", "]", "[", "'rotation'", "]", "\n", "self", ".", "label", "=", "jsonText", "[", "'label'", "]", "\n", "self", ".", "score", "=", "jsonText", "[", "'score'", "]", "\n", "\n", "if", "'instanceId'", "in", "jsonText", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "instanceId", "=", "jsonText", "[", "'instanceId'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.CsBbox3d.toJsonText": [[282, 293], ["None"], "methods", ["None"], ["", "", "def", "toJsonText", "(", "self", ")", ":", "\n", "        ", "objDict", "=", "{", "}", "\n", "objDict", "[", "'label'", "]", "=", "self", ".", "label", "\n", "objDict", "[", "'instanceId'", "]", "=", "self", ".", "instanceId", "\n", "objDict", "[", "'2d'", "]", "[", "'amodal'", "]", "=", "self", ".", "bbox_2d", ".", "bbox_amodal_xywh", "\n", "objDict", "[", "'2d'", "]", "[", "'modal'", "]", "=", "self", ".", "bbox_2d", ".", "bbox_modal_xywh", "\n", "objDict", "[", "'3d'", "]", "[", "'center'", "]", "=", "self", ".", "center", "\n", "objDict", "[", "'3d'", "]", "[", "'dimensions'", "]", "=", "self", ".", "dims", "\n", "objDict", "[", "'3d'", "]", "[", "'rotation'", "]", "=", "self", ".", "rotation", "\n", "\n", "return", "objDict", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.CsBbox3d.depth": [[294, 298], ["numpy.sqrt().astype", "numpy.sqrt"], "methods", ["None"], ["", "@", "property", "\n", "def", "depth", "(", "self", ")", ":", "\n", "# returns the BEV depth", "\n", "        ", "return", "np", ".", "sqrt", "(", "self", ".", "center", "[", "0", "]", "**", "2", "+", "self", ".", "center", "[", "1", "]", "**", "2", ")", ".", "astype", "(", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.CsIgnore2d.__init__": [[304, 310], ["annotation.CsObject.__init__"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "CsObject", ".", "__init__", "(", "self", ",", "CsObjectType", ".", "IGNORE2D", ")", "\n", "\n", "self", ".", "bbox_xywh", "=", "[", "]", "\n", "self", ".", "label", "=", "\"\"", "\n", "self", ".", "instanceId", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.CsIgnore2d.__str__": [[311, 317], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "bbox2dText", "=", "\"\"", "\n", "bbox2dText", "+=", "'Ignore Region:  (x1: {}, y1: {}), (w: {}, h: {})'", ".", "format", "(", "\n", "self", ".", "bbox_xywh", "[", "0", "]", ",", "self", ".", "bbox_xywh", "[", "1", "]", ",", "self", ".", "bbox_xywh", "[", "2", "]", ",", "self", ".", "bbox_xywh", "[", "3", "]", ")", "\n", "\n", "return", "bbox2dText", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.CsIgnore2d.fromJsonText": [[318, 326], ["jsonText.keys", "jsonText.keys"], "methods", ["None"], ["", "def", "fromJsonText", "(", "self", ",", "jsonText", ",", "objId", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "bbox_xywh", "=", "jsonText", "[", "'2d'", "]", "\n", "\n", "if", "'label'", "in", "jsonText", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "label", "=", "jsonText", "[", "'label'", "]", "\n", "\n", "", "if", "'instanceId'", "in", "jsonText", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "instanceId", "=", "jsonText", "[", "'instanceId'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.CsIgnore2d.toJsonText": [[327, 334], ["None"], "methods", ["None"], ["", "", "def", "toJsonText", "(", "self", ")", ":", "\n", "        ", "objDict", "=", "{", "}", "\n", "objDict", "[", "'label'", "]", "=", "self", ".", "label", "\n", "objDict", "[", "'instanceId'", "]", "=", "self", ".", "instanceId", "\n", "objDict", "[", "'2d'", "]", "=", "self", ".", "bbox_xywh", "\n", "\n", "return", "objDict", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.CsIgnore2d.bbox": [[335, 343], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "bbox", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the 2d box as [xmin, ymin, xmax, ymax]\"\"\"", "\n", "return", "[", "\n", "self", ".", "bbox_xywh", "[", "0", "]", ",", "\n", "self", ".", "bbox_xywh", "[", "1", "]", ",", "\n", "self", ".", "bbox_xywh", "[", "0", "]", "+", "self", ".", "bbox_xywh", "[", "2", "]", ",", "\n", "self", ".", "bbox_xywh", "[", "1", "]", "+", "self", ".", "bbox_xywh", "[", "3", "]", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.CsIgnore2d.bbox_amodal_xywh": [[346, 349], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "bbox_amodal_xywh", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "bbox_xywh", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.CsIgnore2d.bbox_modal_xywh": [[350, 353], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "bbox_modal_xywh", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "bbox_xywh", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.Annotation.__init__": [[359, 370], ["CsObjectType.__dict__.values"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "objType", "=", "CsObjectType", ".", "POLY", ")", ":", "\n", "# the width of that image and thus of the label image", "\n", "        ", "self", ".", "imgWidth", "=", "0", "\n", "# the height of that image and thus of the label image", "\n", "self", ".", "imgHeight", "=", "0", "\n", "# the list of objects", "\n", "self", ".", "objects", "=", "[", "]", "\n", "# the camera calibration", "\n", "self", ".", "camera", "=", "None", "\n", "assert", "objType", "in", "CsObjectType", ".", "__dict__", ".", "values", "(", ")", "\n", "self", ".", "objectType", "=", "objType", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.Annotation.toJson": [[371, 373], ["json.dumps"], "methods", ["None"], ["", "def", "toJson", "(", "self", ")", ":", "\n", "        ", "return", "json", ".", "dumps", "(", "self", ",", "default", "=", "lambda", "o", ":", "o", ".", "__dict__", ",", "sort_keys", "=", "True", ",", "indent", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.Annotation.fromJsonText": [[374, 405], ["json.loads", "int", "int", "enumerate", "json.loads.keys", "enumerate", "json.loads.keys", "box3dImageTransform.Camera", "annotation.CsBbox3d.fromJsonText", "annotation.Annotation.objects.append", "annotation.CsIgnore2d", "annotation.CsBbox3d.fromJsonText", "annotation.Annotation.objects.append", "annotation.CsPoly", "annotation.CsBbox2d", "annotation.CsBbox3d"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.Annotation.fromJsonText", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.Annotation.fromJsonText"], ["", "def", "fromJsonText", "(", "self", ",", "jsonText", ")", ":", "\n", "        ", "jsonDict", "=", "json", ".", "loads", "(", "jsonText", ")", "\n", "self", ".", "imgWidth", "=", "int", "(", "jsonDict", "[", "'imgWidth'", "]", ")", "\n", "self", ".", "imgHeight", "=", "int", "(", "jsonDict", "[", "'imgHeight'", "]", ")", "\n", "self", ".", "objects", "=", "[", "]", "\n", "# load objects", "\n", "if", "self", ".", "objectType", "!=", "CsObjectType", ".", "IGNORE2D", ":", "\n", "            ", "for", "objId", ",", "objIn", "in", "enumerate", "(", "jsonDict", "[", "'objects'", "]", ")", ":", "\n", "                ", "if", "self", ".", "objectType", "==", "CsObjectType", ".", "POLY", ":", "\n", "                    ", "obj", "=", "CsPoly", "(", ")", "\n", "", "elif", "self", ".", "objectType", "==", "CsObjectType", ".", "BBOX2D", ":", "\n", "                    ", "obj", "=", "CsBbox2d", "(", ")", "\n", "", "elif", "self", ".", "objectType", "==", "CsObjectType", ".", "BBOX3D", ":", "\n", "                    ", "obj", "=", "CsBbox3d", "(", ")", "\n", "", "obj", ".", "fromJsonText", "(", "objIn", ",", "objId", ")", "\n", "self", ".", "objects", ".", "append", "(", "obj", ")", "\n", "\n", "# load ignores", "\n", "", "", "if", "'ignore'", "in", "jsonDict", ".", "keys", "(", ")", ":", "\n", "            ", "for", "ignoreId", ",", "ignoreIn", "in", "enumerate", "(", "jsonDict", "[", "'ignore'", "]", ")", ":", "\n", "                ", "obj", "=", "CsIgnore2d", "(", ")", "\n", "obj", ".", "fromJsonText", "(", "ignoreIn", ",", "ignoreId", ")", "\n", "self", ".", "objects", ".", "append", "(", "obj", ")", "\n", "\n", "# load camera calibration", "\n", "", "", "if", "'sensor'", "in", "jsonDict", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "camera", "=", "Camera", "(", "fx", "=", "jsonDict", "[", "'sensor'", "]", "[", "'fx'", "]", ",", "\n", "fy", "=", "jsonDict", "[", "'sensor'", "]", "[", "'fy'", "]", ",", "\n", "u0", "=", "jsonDict", "[", "'sensor'", "]", "[", "'u0'", "]", ",", "\n", "v0", "=", "jsonDict", "[", "'sensor'", "]", "[", "'v0'", "]", ",", "\n", "sensor_T_ISO_8855", "=", "jsonDict", "[", "'sensor'", "]", "[", "'sensor_T_ISO_8855'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.Annotation.toJsonText": [[406, 416], ["obj.toJsonText", "jsonDict[].append"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.Annotation.toJsonText"], ["", "", "def", "toJsonText", "(", "self", ")", ":", "\n", "        ", "jsonDict", "=", "{", "}", "\n", "jsonDict", "[", "'imgWidth'", "]", "=", "self", ".", "imgWidth", "\n", "jsonDict", "[", "'imgHeight'", "]", "=", "self", ".", "imgHeight", "\n", "jsonDict", "[", "'objects'", "]", "=", "[", "]", "\n", "for", "obj", "in", "self", ".", "objects", ":", "\n", "            ", "objDict", "=", "obj", ".", "toJsonText", "(", ")", "\n", "jsonDict", "[", "'objects'", "]", ".", "append", "(", "objDict", ")", "\n", "\n", "", "return", "jsonDict", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.Annotation.fromJsonFile": [[418, 425], ["os.path.isfile", "print", "open", "f.read", "annotation.Annotation.fromJsonText"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.Annotation.fromJsonText"], ["", "def", "fromJsonFile", "(", "self", ",", "jsonFile", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isfile", "(", "jsonFile", ")", ":", "\n", "            ", "print", "(", "'Given json file not found: {}'", ".", "format", "(", "jsonFile", ")", ")", "\n", "return", "\n", "", "with", "open", "(", "jsonFile", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "jsonText", "=", "f", ".", "read", "(", ")", "\n", "self", ".", "fromJsonText", "(", "jsonText", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.Annotation.toJsonFile": [[426, 429], ["open", "f.write", "annotation.Annotation.toJson"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.Annotation.toJson"], ["", "", "def", "toJsonFile", "(", "self", ",", "jsonFile", ")", ":", "\n", "        ", "with", "open", "(", "jsonFile", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "self", ".", "toJson", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Camera.__init__": [[71, 87], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "fx", ",", "\n", "fy", ",", "\n", "u0", ",", "\n", "v0", ",", "\n", "sensor_T_ISO_8855", ",", "\n", "imgWidth", "=", "2048", ",", "\n", "imgHeight", "=", "1024", ")", ":", "\n", "        ", "self", ".", "fx", "=", "fx", "\n", "self", ".", "fy", "=", "fy", "\n", "self", ".", "u0", "=", "u0", "\n", "self", ".", "v0", "=", "v0", "\n", "self", ".", "sensor_T_ISO_8855", "=", "sensor_T_ISO_8855", "\n", "self", ".", "imgWidth", "=", "imgWidth", "\n", "self", ".", "imgHeight", "=", "imgHeight", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.__init__": [[90, 112], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "camera", ")", ":", "\n", "        ", "self", ".", "_camera", "=", "camera", "\n", "self", ".", "_rotation_matrix", "=", "np", ".", "zeros", "(", "(", "3", ",", "3", ")", ")", "\n", "self", ".", "_size", "=", "np", ".", "zeros", "(", "(", "3", ",", ")", ")", "\n", "self", ".", "_center", "=", "np", ".", "zeros", "(", "(", "3", ",", ")", ")", "\n", "\n", "self", ".", "loc", "=", "[", "\"BLB\"", ",", "\"BRB\"", ",", "\"FRB\"", ",", "\"FLB\"", ",", "\"BLT\"", ",", "\"BRT\"", ",", "\"FRT\"", ",", "\"FLT\"", "]", "\n", "\n", "self", ".", "_box_points_2d", "=", "np", ".", "zeros", "(", "(", "8", ",", "2", ")", ")", "\n", "self", ".", "_box_points_3d_vehicle", "=", "np", ".", "zeros", "(", "(", "8", ",", "3", ")", ")", "\n", "self", ".", "_box_points_3d_cam", "=", "np", ".", "zeros", "(", "(", "8", ",", "3", ")", ")", "\n", "\n", "self", ".", "bottom_arrow_2d", "=", "np", ".", "zeros", "(", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "_bottom_arrow_3d_vehicle", "=", "np", ".", "zeros", "(", "(", "2", ",", "3", ")", ")", "\n", "self", ".", "_bottom_arrow_3d_cam", "=", "np", ".", "zeros", "(", "(", "2", ",", "3", ")", ")", "\n", "\n", "self", ".", "_box_left_side_cropped_2d", "=", "[", "]", "\n", "self", ".", "_box_right_side_cropped_2d", "=", "[", "]", "\n", "self", ".", "_box_front_side_cropped_2d", "=", "[", "]", "\n", "self", ".", "_box_back_side_cropped_2d", "=", "[", "]", "\n", "self", ".", "_box_top_side_cropped_2d", "=", "[", "]", "\n", "self", ".", "_box_bottom_side_cropped_2d", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.initialize_box_from_annotation": [[113, 120], ["box3dImageTransform.Box3dImageTransform.initialize_box"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.initialize_box"], ["", "def", "initialize_box_from_annotation", "(", "self", ",", "csBbox3dAnnotation", ",", "coordinate_system", "=", "CRS_V", ")", ":", "\n", "# Unpack annotation and call initialize_box() method", "\n", "        ", "self", ".", "initialize_box", "(", "\n", "csBbox3dAnnotation", ".", "dims", ",", "\n", "csBbox3dAnnotation", ".", "rotation", ",", "\n", "csBbox3dAnnotation", ".", "center", ",", "\n", "coordinate_system", "=", "coordinate_system", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.initialize_box": [[122, 158], ["box3dImageTransform.get_K_multiplier", "pyquaternion.Quaternion", "numpy.array", "numpy.array", "numpy.array", "box3dImageTransform.Box3dImageTransform.update", "pyquaternion.Quaternion", "numpy.eye", "numpy.array", "numpy.linalg.inv", "numpy.ones", "numpy.matmul", "pyquaternion.Quaternion", "numpy.matmul", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.get_K_multiplier", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.update"], ["", "def", "initialize_box", "(", "self", ",", "size", ",", "quaternion", ",", "center", ",", "coordinate_system", "=", "CRS_V", ")", ":", "\n", "# Internally, the box is always stored in the ISO 8855 coordinate system V", "\n", "# If the box is passed with another coordinate system, we transform it to V first.", "\n", "# \"size\" is always given in LxWxH", "\n", "        ", "K_multiplier", "=", "get_K_multiplier", "(", ")", "\n", "quaternion_rot", "=", "Quaternion", "(", "quaternion", ")", "\n", "center", "=", "np", ".", "array", "(", "center", ")", "\n", "\n", "if", "coordinate_system", "==", "CRS_S", ":", "# convert it to CRS_C first", "\n", "            ", "center", "=", "np", ".", "matmul", "(", "K_multiplier", ".", "T", ",", "center", ".", "T", ")", ".", "T", "\n", "image_T_sensor_quaternion", "=", "Quaternion", "(", "matrix", "=", "K_multiplier", ")", "\n", "quaternion_rot", "=", "(", "\n", "image_T_sensor_quaternion", ".", "inverse", "*", "\n", "quaternion_rot", "*", "\n", "image_T_sensor_quaternion", "\n", ")", "\n", "\n", "# center and quaternion must be corrected", "\n", "", "if", "coordinate_system", "==", "CRS_C", "or", "coordinate_system", "==", "CRS_S", ":", "\n", "            ", "sensor_T_ISO_8855_4x4", "=", "np", ".", "eye", "(", "4", ")", "\n", "sensor_T_ISO_8855_4x4", "[", ":", "3", ",", ":", "]", "=", "np", ".", "array", "(", "self", ".", "_camera", ".", "sensor_T_ISO_8855", ")", "\n", "sensor_T_ISO_8855_4x4_inv", "=", "np", ".", "linalg", ".", "inv", "(", "sensor_T_ISO_8855_4x4", ")", "\n", "center_T", "=", "np", ".", "ones", "(", "(", "4", ",", "1", ")", ")", "\n", "center_T", "[", ":", "3", ",", "0", "]", "=", "center", ".", "T", "\n", "center", "=", "np", ".", "matmul", "(", "sensor_T_ISO_8855_4x4_inv", ",", "center_T", ")", "\n", "center", "=", "(", "center", ".", "T", ")", "[", "0", ",", ":", "3", "]", "\n", "\n", "sensor_T_ISO_8855_quaternion", "=", "Quaternion", "(", "\n", "matrix", "=", "np", ".", "array", "(", "self", ".", "_camera", ".", "sensor_T_ISO_8855", ")", "[", ":", "3", ",", ":", "3", "]", ")", "\n", "quaternion_rot", "=", "sensor_T_ISO_8855_quaternion", ".", "inverse", "*", "quaternion_rot", "\n", "\n", "", "self", ".", "_size", "=", "np", ".", "array", "(", "size", ")", "\n", "self", ".", "_rotation_matrix", "=", "np", ".", "array", "(", "quaternion_rot", ".", "rotation_matrix", ")", "\n", "self", ".", "_center", "=", "center", "\n", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.get_vertices": [[159, 173], ["box3dImageTransform.apply_transformation_points", "box3dImageTransform.get_K_multiplier", "numpy.matmul", "zip"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.apply_transformation_points", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.get_K_multiplier"], ["", "def", "get_vertices", "(", "self", ",", "coordinate_system", "=", "CRS_V", ")", ":", "\n", "        ", "if", "coordinate_system", "==", "CRS_V", ":", "\n", "            ", "box_points_3d", "=", "self", ".", "_box_points_3d_vehicle", "\n", "\n", "", "if", "coordinate_system", "==", "CRS_C", "or", "coordinate_system", "==", "CRS_S", ":", "\n", "            ", "box_points_3d", "=", "apply_transformation_points", "(", "\n", "self", ".", "_box_points_3d_vehicle", ",", "self", ".", "_camera", ".", "sensor_T_ISO_8855", "\n", ")", "\n", "\n", "", "if", "coordinate_system", "==", "CRS_S", ":", "\n", "            ", "K_multiplier", "=", "get_K_multiplier", "(", ")", "\n", "box_points_3d", "=", "np", ".", "matmul", "(", "K_multiplier", ",", "box_points_3d", ".", "T", ")", ".", "T", "\n", "\n", "", "return", "{", "l", ":", "p", "for", "(", "l", ",", "p", ")", "in", "zip", "(", "self", ".", "loc", ",", "box_points_3d", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.get_vertices_2d": [[174, 176], ["zip"], "methods", ["None"], ["", "def", "get_vertices_2d", "(", "self", ")", ":", "\n", "        ", "return", "{", "l", ":", "p", "for", "(", "l", ",", "p", ")", "in", "zip", "(", "self", ".", "loc", ",", "self", ".", "_box_points_2d", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.get_parameters": [[177, 206], ["box3dImageTransform.get_K_multiplier", "pyquaternion.Quaternion", "numpy.eye", "numpy.array", "numpy.ones", "numpy.matmul", "pyquaternion.Quaternion", "pyquaternion.Quaternion", "numpy.matmul", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.get_K_multiplier"], ["", "def", "get_parameters", "(", "self", ",", "coordinate_system", "=", "CRS_V", ")", ":", "\n", "        ", "K_multiplier", "=", "get_K_multiplier", "(", ")", "\n", "quaternion_rot", "=", "Quaternion", "(", "matrix", "=", "self", ".", "_rotation_matrix", ")", "\n", "center", "=", "self", ".", "_center", "\n", "\n", "# center and quaternion must be corrected", "\n", "if", "coordinate_system", "==", "CRS_C", "or", "coordinate_system", "==", "CRS_S", ":", "\n", "            ", "sensor_T_ISO_8855_4x4", "=", "np", ".", "eye", "(", "4", ")", "\n", "sensor_T_ISO_8855_4x4", "[", ":", "3", ",", ":", "]", "=", "np", ".", "array", "(", "self", ".", "_camera", ".", "sensor_T_ISO_8855", ")", "\n", "center_T", "=", "np", ".", "ones", "(", "(", "4", ",", "1", ")", ")", "\n", "center_T", "[", ":", "3", ",", "0", "]", "=", "center", ".", "T", "\n", "center", "=", "np", ".", "matmul", "(", "sensor_T_ISO_8855_4x4", ",", "center_T", ")", "\n", "center", "=", "(", "center", ".", "T", ")", "[", "0", ",", ":", "3", "]", "\n", "sensor_T_ISO_8855_quaternion", "=", "Quaternion", "(", "\n", "matrix", "=", "np", ".", "array", "(", "self", ".", "_camera", ".", "sensor_T_ISO_8855", ")", "[", ":", "3", ",", ":", "3", "]", "\n", ")", "\n", "quaternion_rot", "=", "sensor_T_ISO_8855_quaternion", "*", "quaternion_rot", "\n", "\n", "# change axis", "\n", "", "if", "coordinate_system", "==", "CRS_S", ":", "\n", "            ", "center", "=", "np", ".", "matmul", "(", "K_multiplier", ",", "center", ".", "T", ")", ".", "T", "\n", "image_T_sensor_quaternion", "=", "Quaternion", "(", "matrix", "=", "K_multiplier", ")", "\n", "quaternion_rot", "=", "(", "\n", "image_T_sensor_quaternion", "*", "\n", "quaternion_rot", "*", "\n", "image_T_sensor_quaternion", ".", "inverse", "\n", ")", "\n", "\n", "", "return", "(", "self", ".", "_size", ",", "center", ",", "quaternion_rot", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform._get_side_visibility": [[207, 209], ["numpy.dot"], "methods", ["None"], ["", "def", "_get_side_visibility", "(", "self", ",", "face_center", ",", "face_normal", ")", ":", "\n", "        ", "return", "np", ".", "dot", "(", "face_normal", ",", "face_center", ")", "<", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.get_all_side_visibilities": [[210, 246], ["box3dImageTransform.get_K_multiplier", "numpy.matmul", "box3dImageTransform.Box3dImageTransform._get_side_visibility", "box3dImageTransform.Box3dImageTransform._get_side_visibility", "box3dImageTransform.Box3dImageTransform._get_side_visibility", "box3dImageTransform.Box3dImageTransform._get_side_visibility", "box3dImageTransform.Box3dImageTransform._get_side_visibility", "box3dImageTransform.Box3dImageTransform._get_side_visibility", "numpy.matmul"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.get_K_multiplier", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform._get_side_visibility", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform._get_side_visibility", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform._get_side_visibility", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform._get_side_visibility", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform._get_side_visibility", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform._get_side_visibility"], ["", "def", "get_all_side_visibilities", "(", "self", ")", ":", "\n", "        ", "K_multiplier", "=", "get_K_multiplier", "(", ")", "\n", "rotation_matrix_cam", "=", "np", ".", "matmul", "(", "\n", "np", ".", "matmul", "(", "K_multiplier", ",", "self", ".", "_rotation_matrix", ")", ",", "K_multiplier", ".", "T", "\n", ")", "\n", "\n", "box_vector_x", "=", "rotation_matrix_cam", "[", ":", ",", "0", "]", "\n", "box_vector_y", "=", "rotation_matrix_cam", "[", ":", ",", "1", "]", "\n", "box_vector_z", "=", "rotation_matrix_cam", "[", ":", ",", "2", "]", "\n", "\n", "front_visible", "=", "self", ".", "_get_side_visibility", "(", "\n", "(", "self", ".", "_box_points_3d_cam", "[", "3", "]", "+", "self", ".", "_box_points_3d_cam", "[", "6", "]", ")", "/", "2", ",", "box_vector_z", "\n", ")", "\n", "back_visible", "=", "self", ".", "_get_side_visibility", "(", "\n", "(", "self", ".", "_box_points_3d_cam", "[", "0", "]", "+", "self", ".", "_box_points_3d_cam", "[", "5", "]", ")", "/", "2", ",", "-", "box_vector_z", "\n", ")", "\n", "top_visible", "=", "self", ".", "_get_side_visibility", "(", "\n", "(", "self", ".", "_box_points_3d_cam", "[", "7", "]", "+", "self", ".", "_box_points_3d_cam", "[", "5", "]", ")", "/", "2", ",", "-", "box_vector_y", "\n", ")", "\n", "bottom_visible", "=", "self", ".", "_get_side_visibility", "(", "\n", "(", "self", ".", "_box_points_3d_cam", "[", "0", "]", "+", "self", ".", "_box_points_3d_cam", "[", "2", "]", ")", "/", "2", ",", "box_vector_y", "\n", ")", "\n", "left_visible", "=", "self", ".", "_get_side_visibility", "(", "\n", "(", "self", ".", "_box_points_3d_cam", "[", "0", "]", "+", "self", ".", "_box_points_3d_cam", "[", "7", "]", ")", "/", "2", ",", "-", "box_vector_x", "\n", ")", "\n", "right_visible", "=", "self", ".", "_get_side_visibility", "(", "\n", "(", "self", ".", "_box_points_3d_cam", "[", "1", "]", "+", "self", ".", "_box_points_3d_cam", "[", "6", "]", ")", "/", "2", ",", "box_vector_x", "\n", ")", "\n", "\n", "return", "[", "\n", "front_visible", ",", "\n", "back_visible", ",", "\n", "top_visible", ",", "\n", "bottom_visible", ",", "\n", "left_visible", ",", "\n", "right_visible", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.get_all_side_polygons_2d": [[248, 257], ["None"], "methods", ["None"], ["", "def", "get_all_side_polygons_2d", "(", "self", ")", ":", "\n", "        ", "front_side", "=", "self", ".", "_box_front_side_cropped_2d", "\n", "back_side", "=", "self", ".", "_box_back_side_cropped_2d", "\n", "top_side", "=", "self", ".", "_box_top_side_cropped_2d", "\n", "bottom_side", "=", "self", ".", "_box_bottom_side_cropped_2d", "\n", "left_side", "=", "self", ".", "_box_left_side_cropped_2d", "\n", "right_side", "=", "self", ".", "_box_right_side_cropped_2d", "\n", "\n", "return", "[", "front_side", ",", "back_side", ",", "top_side", ",", "bottom_side", ",", "left_side", ",", "right_side", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.get_amodal_box_2d": [[258, 276], ["box3dImageTransform.Box3dImageTransform.get_all_side_polygons_2d", "len", "min", "min", "min", "min", "xs.append", "ys.append", "max", "max", "max", "max", "min", "min", "max", "max"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.get_all_side_polygons_2d"], ["", "def", "get_amodal_box_2d", "(", "self", ")", ":", "\n", "        ", "xs", "=", "[", "]", "\n", "ys", "=", "[", "]", "\n", "\n", "for", "side_polygon", "in", "self", ".", "get_all_side_polygons_2d", "(", ")", ":", "\n", "            ", "for", "[", "x", ",", "y", "]", "in", "side_polygon", ":", "\n", "                ", "xs", ".", "append", "(", "x", ")", "\n", "ys", ".", "append", "(", "y", ")", "\n", "\n", "# if the whole box is behind the camera, return [0., 0., 0., 0.]", "\n", "", "", "if", "len", "(", "xs", ")", "==", "0", ":", "\n", "            ", "return", "[", "0.", ",", "0.", ",", "0.", ",", "0.", "]", "\n", "\n", "", "return", "[", "\n", "min", "(", "self", ".", "_camera", ".", "imgWidth", "-", "1", ",", "max", "(", "0", ",", "min", "(", "xs", ")", ")", ")", ",", "\n", "min", "(", "self", ".", "_camera", ".", "imgHeight", "-", "1", ",", "max", "(", "0", ",", "min", "(", "ys", ")", ")", ")", ",", "\n", "min", "(", "self", ".", "_camera", ".", "imgWidth", "-", "1", ",", "max", "(", "0", ",", "max", "(", "xs", ")", ")", ")", ",", "\n", "min", "(", "self", ".", "_camera", ".", "imgHeight", "-", "1", ",", "max", "(", "0", ",", "max", "(", "ys", ")", ")", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform._crop_side_polygon_and_project": [[278, 314], ["box3dImageTransform.get_projection_matrix", "enumerate", "len", "numpy.matmul", "cropped_polygon_2d.T.tolist.T.tolist.T.tolist", "cropped_polygon_2d.T.tolist.T.tolist.append", "cropped_polygon_3d.append", "len", "cropped_polygon_3d.append", "cropped_polygon_3d.append", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.get_projection_matrix"], ["", "def", "_crop_side_polygon_and_project", "(", "self", ",", "side_point_indices", "=", "[", "]", ",", "side_points", "=", "[", "]", ")", ":", "\n", "        ", "K_matrix", "=", "get_projection_matrix", "(", "self", ".", "_camera", ")", "\n", "camera_plane_z", "=", "0.01", "\n", "\n", "side_points_3d_cam", "=", "[", "self", ".", "_box_points_3d_cam", "[", "i", "]", "for", "i", "in", "side_point_indices", "]", "\n", "side_points_3d_cam", "+=", "side_points", "\n", "\n", "cropped_polygon_3d", "=", "[", "]", "\n", "for", "i", ",", "point", "in", "enumerate", "(", "side_points_3d_cam", ")", ":", "\n", "            ", "if", "point", "[", "2", "]", ">", "camera_plane_z", ":", "# 1 cm", "\n", "                ", "cropped_polygon_3d", ".", "append", "(", "point", ")", "\n", "", "else", ":", "\n", "                ", "next_index", "=", "(", "i", "+", "1", ")", "%", "len", "(", "side_points_3d_cam", ")", "\n", "prev_index", "=", "i", "-", "1", "\n", "\n", "if", "side_points_3d_cam", "[", "prev_index", "]", "[", "2", "]", ">", "camera_plane_z", ":", "\n", "                    ", "delta_0", "=", "point", "-", "side_points_3d_cam", "[", "prev_index", "]", "\n", "k_0", "=", "(", "camera_plane_z", "-", "point", "[", "2", "]", ")", "/", "delta_0", "[", "2", "]", "\n", "point_0", "=", "point", "+", "k_0", "*", "delta_0", "\n", "cropped_polygon_3d", ".", "append", "(", "point_0", ")", "\n", "\n", "", "if", "side_points_3d_cam", "[", "next_index", "]", "[", "2", "]", ">", "camera_plane_z", ":", "\n", "                    ", "delta_1", "=", "point", "-", "side_points_3d_cam", "[", "next_index", "]", "\n", "k_1", "=", "(", "camera_plane_z", "-", "point", "[", "2", "]", ")", "/", "delta_1", "[", "2", "]", "\n", "point_1", "=", "point", "+", "k_1", "*", "delta_1", "\n", "cropped_polygon_3d", ".", "append", "(", "point_1", ")", "\n", "\n", "", "", "", "if", "len", "(", "cropped_polygon_3d", ")", "==", "0", ":", "\n", "            ", "cropped_polygon_2d", "=", "[", "]", "\n", "", "else", ":", "\n", "            ", "cropped_polygon_2d", "=", "np", ".", "matmul", "(", "K_matrix", ",", "np", ".", "array", "(", "cropped_polygon_3d", ")", ".", "T", ")", "\n", "cropped_polygon_2d", "=", "cropped_polygon_2d", "[", ":", "2", ",", ":", "]", "/", "cropped_polygon_2d", "[", "-", "1", ",", ":", "]", "\n", "cropped_polygon_2d", "=", "cropped_polygon_2d", ".", "T", ".", "tolist", "(", ")", "\n", "cropped_polygon_2d", ".", "append", "(", "cropped_polygon_2d", "[", "0", "]", ")", "\n", "\n", "", "return", "cropped_polygon_2d", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.update": [[315, 319], ["box3dImageTransform.Box3dImageTransform._update_box_points_3d", "box3dImageTransform.Box3dImageTransform._update_box_sides_cropped", "box3dImageTransform.Box3dImageTransform._update_box_points_2d"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform._update_box_points_3d", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform._update_box_sides_cropped", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform._update_box_points_2d"], ["", "def", "update", "(", "self", ")", ":", "\n", "        ", "self", ".", "_update_box_points_3d", "(", ")", "\n", "self", ".", "_update_box_sides_cropped", "(", ")", "\n", "self", ".", "_update_box_points_2d", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform._update_box_sides_cropped": [[320, 341], ["box3dImageTransform.Box3dImageTransform._crop_side_polygon_and_project", "box3dImageTransform.Box3dImageTransform._crop_side_polygon_and_project", "box3dImageTransform.Box3dImageTransform._crop_side_polygon_and_project", "box3dImageTransform.Box3dImageTransform._crop_side_polygon_and_project", "box3dImageTransform.Box3dImageTransform._crop_side_polygon_and_project", "box3dImageTransform.Box3dImageTransform._crop_side_polygon_and_project", "box3dImageTransform.Box3dImageTransform._crop_side_polygon_and_project", "range"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform._crop_side_polygon_and_project", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform._crop_side_polygon_and_project", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform._crop_side_polygon_and_project", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform._crop_side_polygon_and_project", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform._crop_side_polygon_and_project", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform._crop_side_polygon_and_project", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform._crop_side_polygon_and_project"], ["", "def", "_update_box_sides_cropped", "(", "self", ")", ":", "\n", "        ", "self", ".", "_box_left_side_cropped_2d", "=", "self", ".", "_crop_side_polygon_and_project", "(", "\n", "[", "3", ",", "0", ",", "4", ",", "7", "]", "\n", ")", "\n", "self", ".", "_box_right_side_cropped_2d", "=", "self", ".", "_crop_side_polygon_and_project", "(", "\n", "[", "1", ",", "5", ",", "6", ",", "2", "]", "\n", ")", "\n", "self", ".", "_box_front_side_cropped_2d", "=", "self", ".", "_crop_side_polygon_and_project", "(", "\n", "[", "3", ",", "2", ",", "6", ",", "7", "]", "\n", ")", "\n", "self", ".", "_box_back_side_cropped_2d", "=", "self", ".", "_crop_side_polygon_and_project", "(", "\n", "[", "0", ",", "1", ",", "5", ",", "4", "]", "\n", ")", "\n", "self", ".", "_box_top_side_cropped_2d", "=", "self", ".", "_crop_side_polygon_and_project", "(", "\n", "[", "4", ",", "5", ",", "6", ",", "7", "]", "\n", ")", "\n", "self", ".", "_box_bottom_side_cropped_2d", "=", "self", ".", "_crop_side_polygon_and_project", "(", "\n", "[", "0", ",", "1", ",", "2", ",", "3", "]", "\n", ")", "\n", "self", ".", "bottom_arrow_2d", "=", "self", ".", "_crop_side_polygon_and_project", "(", "\n", "side_points", "=", "[", "self", ".", "_bottom_arrow_3d_cam", "[", "x", "]", "for", "x", "in", "range", "(", "2", ")", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform._update_box_points_3d": [[343, 405], ["numpy.zeros", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "box3dImageTransform.apply_transformation_points", "box3dImageTransform.apply_transformation_points", "box3dImageTransform.get_K_multiplier", "numpy.matmul", "numpy.matmul", "numpy.matmul"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.apply_transformation_points", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.apply_transformation_points", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.get_K_multiplier"], ["", "def", "_update_box_points_3d", "(", "self", ")", ":", "\n", "        ", "center_vectors", "=", "np", ".", "zeros", "(", "(", "8", ",", "3", ")", ")", "\n", "# Bottom Face", "\n", "center_vectors", "[", "0", "]", "=", "np", ".", "array", "(", "\n", "[", "-", "self", ".", "_size", "[", "0", "]", "/", "2", ",", "self", ".", "_size", "[", "1", "]", "/", "2", ",", "-", "self", ".", "_size", "[", "2", "]", "/", "2", "]", "\n", "# Back Left Bottom", "\n", ")", "\n", "center_vectors", "[", "1", "]", "=", "np", ".", "array", "(", "\n", "[", "-", "self", ".", "_size", "[", "0", "]", "/", "2", ",", "-", "self", ".", "_size", "[", "1", "]", "/", "2", ",", "-", "self", ".", "_size", "[", "2", "]", "/", "2", "]", "\n", "# Back Right Bottom", "\n", ")", "\n", "center_vectors", "[", "2", "]", "=", "np", ".", "array", "(", "\n", "[", "self", ".", "_size", "[", "0", "]", "/", "2", ",", "-", "self", ".", "_size", "[", "1", "]", "/", "2", ",", "-", "self", ".", "_size", "[", "2", "]", "/", "2", "]", "\n", "# Front Right Bottom", "\n", ")", "\n", "center_vectors", "[", "3", "]", "=", "np", ".", "array", "(", "\n", "[", "self", ".", "_size", "[", "0", "]", "/", "2", ",", "self", ".", "_size", "[", "1", "]", "/", "2", ",", "-", "self", ".", "_size", "[", "2", "]", "/", "2", "]", "\n", "# Front Left Bottom", "\n", ")", "\n", "\n", "# Top Face", "\n", "center_vectors", "[", "4", "]", "=", "np", ".", "array", "(", "\n", "[", "-", "self", ".", "_size", "[", "0", "]", "/", "2", ",", "self", ".", "_size", "[", "1", "]", "/", "2", ",", "self", ".", "_size", "[", "2", "]", "/", "2", "]", "\n", "# Back Left Top", "\n", ")", "\n", "center_vectors", "[", "5", "]", "=", "np", ".", "array", "(", "\n", "[", "-", "self", ".", "_size", "[", "0", "]", "/", "2", ",", "-", "self", ".", "_size", "[", "1", "]", "/", "2", ",", "self", ".", "_size", "[", "2", "]", "/", "2", "]", "\n", "# Back Right Top", "\n", ")", "\n", "center_vectors", "[", "6", "]", "=", "np", ".", "array", "(", "\n", "[", "self", ".", "_size", "[", "0", "]", "/", "2", ",", "-", "self", ".", "_size", "[", "1", "]", "/", "2", ",", "self", ".", "_size", "[", "2", "]", "/", "2", "]", "\n", "# Front Right Top", "\n", ")", "\n", "center_vectors", "[", "7", "]", "=", "np", ".", "array", "(", "\n", "[", "self", ".", "_size", "[", "0", "]", "/", "2", ",", "self", ".", "_size", "[", "1", "]", "/", "2", ",", "self", ".", "_size", "[", "2", "]", "/", "2", "]", "\n", "# Front Left Top", "\n", ")", "\n", "\n", "# Rotate the vectors", "\n", "box_points_3d", "=", "np", ".", "matmul", "(", "self", ".", "_rotation_matrix", ",", "center_vectors", ".", "T", ")", ".", "T", "\n", "# Translate to box position in 3d space", "\n", "box_points_3d", "+=", "self", ".", "_center", "\n", "\n", "self", ".", "_box_points_3d_vehicle", "=", "box_points_3d", "\n", "\n", "self", ".", "_bottom_arrow_3d_vehicle", "=", "np", ".", "array", "(", "\n", "[", "\n", "(", "0.5", "*", "(", "self", ".", "_box_points_3d_vehicle", "[", "3", "]", "+", "self", ".", "_box_points_3d_vehicle", "[", "2", "]", ")", ")", ",", "\n", "(", "0.5", "*", "(", "self", ".", "_box_points_3d_vehicle", "[", "3", "]", "+", "self", ".", "_box_points_3d_vehicle", "[", "1", "]", ")", ")", ",", "\n", "]", "\n", ")", "\n", "bottom_arrow_3d_cam", "=", "apply_transformation_points", "(", "\n", "self", ".", "_bottom_arrow_3d_vehicle", ",", "self", ".", "_camera", ".", "sensor_T_ISO_8855", "\n", ")", "\n", "\n", "# Points in ISO8855 system with origin at the sensor", "\n", "box_points_3d_cam", "=", "apply_transformation_points", "(", "\n", "self", ".", "_box_points_3d_vehicle", ",", "self", ".", "_camera", ".", "sensor_T_ISO_8855", "\n", ")", "\n", "K_multiplier", "=", "get_K_multiplier", "(", ")", "\n", "self", ".", "_box_points_3d_cam", "=", "np", ".", "matmul", "(", "K_multiplier", ",", "box_points_3d_cam", ".", "T", ")", ".", "T", "\n", "self", ".", "_bottom_arrow_3d_cam", "=", "np", ".", "matmul", "(", "K_multiplier", ",", "bottom_arrow_3d_cam", ".", "T", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform._update_box_points_2d": [[406, 411], ["box3dImageTransform.get_projection_matrix", "numpy.matmul"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.get_projection_matrix"], ["", "def", "_update_box_points_2d", "(", "self", ")", ":", "\n", "        ", "K_matrix", "=", "get_projection_matrix", "(", "self", ".", "_camera", ")", "\n", "box_points_2d", "=", "np", ".", "matmul", "(", "K_matrix", ",", "self", ".", "_box_points_3d_cam", ".", "T", ")", "\n", "box_points_2d", "=", "box_points_2d", "[", ":", "2", ",", ":", "]", "/", "box_points_2d", "[", "-", "1", ",", ":", "]", "\n", "self", ".", "_box_points_2d", "=", "box_points_2d", ".", "T", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.get_K_multiplier": [[47, 52], ["numpy.zeros"], "function", ["None"], ["def", "get_K_multiplier", "(", ")", ":", "\n", "    ", "K_multiplier", "=", "np", ".", "zeros", "(", "(", "3", ",", "3", ")", ")", "\n", "K_multiplier", "[", "0", "]", "[", "1", "]", "=", "K_multiplier", "[", "1", "]", "[", "2", "]", "=", "-", "1", "\n", "K_multiplier", "[", "2", "]", "[", "0", "]", "=", "1", "\n", "return", "K_multiplier", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.get_projection_matrix": [[54, 62], ["numpy.zeros"], "function", ["None"], ["", "def", "get_projection_matrix", "(", "camera", ")", ":", "\n", "    ", "K_matrix", "=", "np", ".", "zeros", "(", "(", "3", ",", "3", ")", ")", "\n", "K_matrix", "[", "0", "]", "[", "0", "]", "=", "camera", ".", "fx", "\n", "K_matrix", "[", "0", "]", "[", "2", "]", "=", "camera", ".", "u0", "\n", "K_matrix", "[", "1", "]", "[", "1", "]", "=", "camera", ".", "fy", "\n", "K_matrix", "[", "1", "]", "[", "2", "]", "=", "camera", ".", "v0", "\n", "K_matrix", "[", "2", "]", "[", "2", "]", "=", "1", "\n", "return", "K_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.apply_transformation_points": [[64, 68], ["numpy.concatenate", "numpy.matmul", "numpy.ones"], "function", ["None"], ["", "def", "apply_transformation_points", "(", "points", ",", "transformation_matrix", ")", ":", "\n", "    ", "points", "=", "np", ".", "concatenate", "(", "[", "points", ",", "np", ".", "ones", "(", "(", "points", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "]", ",", "axis", "=", "1", ")", "\n", "points", "=", "np", ".", "matmul", "(", "transformation_matrix", ",", "points", ".", "T", ")", ".", "T", "\n", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.csHelpers.printError": [[30, 34], ["print", "sys.exit", "str"], "function", ["None"], ["def", "printError", "(", "message", ")", ":", "\n", "    ", "\"\"\"Print an error message and quit\"\"\"", "\n", "print", "(", "'ERROR: '", "+", "str", "(", "message", ")", ")", "\n", "sys", ".", "exit", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.csHelpers.getColorEntry": [[49, 66], ["math.isnan", "isinstance"], "function", ["None"], ["", "def", "getColorEntry", "(", "val", ",", "args", ")", ":", "\n", "    ", "\"\"\"Colored value output if colorized flag is activated.\"\"\"", "\n", "\n", "if", "not", "args", ".", "colorized", ":", "\n", "        ", "return", "\"\"", "\n", "", "if", "not", "isinstance", "(", "val", ",", "float", ")", "or", "math", ".", "isnan", "(", "val", ")", ":", "\n", "        ", "return", "colors", ".", "ENDC", "\n", "", "if", "(", "val", "<", ".20", ")", ":", "\n", "        ", "return", "colors", ".", "RED", "\n", "", "elif", "(", "val", "<", ".40", ")", ":", "\n", "        ", "return", "colors", ".", "YELLOW", "\n", "", "elif", "(", "val", "<", ".60", ")", ":", "\n", "        ", "return", "colors", ".", "BLUE", "\n", "", "elif", "(", "val", "<", ".80", ")", ":", "\n", "        ", "return", "colors", ".", "CYAN", "\n", "", "else", ":", "\n", "        ", "return", "colors", ".", "GREEN", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.csHelpers.getCsFileInfo": [[75, 90], ["os.path.basename", "os.path.basename.split", "parts[].split", "csHelpers.printError", "len", "CsFile", "len", "CsFile", "csHelpers.printError", "len"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printError", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printError"], ["def", "getCsFileInfo", "(", "fileName", ")", ":", "\n", "    ", "\"\"\"Returns a CsFile object filled from the info in the given filename\"\"\"", "\n", "baseName", "=", "os", ".", "path", ".", "basename", "(", "fileName", ")", "\n", "parts", "=", "baseName", ".", "split", "(", "'_'", ")", "\n", "parts", "=", "parts", "[", ":", "-", "1", "]", "+", "parts", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "\n", "if", "not", "parts", ":", "\n", "        ", "printError", "(", "'Cannot parse given filename ({}). Does not seem to be a valid Cityscapes file.'", ".", "format", "(", "fileName", ")", ")", "\n", "", "if", "len", "(", "parts", ")", "==", "5", ":", "\n", "        ", "csFile", "=", "CsFile", "(", "*", "parts", "[", ":", "-", "1", "]", ",", "type2", "=", "\"\"", ",", "ext", "=", "parts", "[", "-", "1", "]", ")", "\n", "", "elif", "len", "(", "parts", ")", "==", "6", ":", "\n", "        ", "csFile", "=", "CsFile", "(", "*", "parts", ")", "\n", "", "else", ":", "\n", "        ", "printError", "(", "'Found {} part(s) in given filename ({}). Expected 5 or 6.'", ".", "format", "(", "len", "(", "parts", ")", ",", "fileName", ")", ")", "\n", "\n", "", "return", "csFile", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.csHelpers.getCoreImageFileName": [[92, 99], ["csHelpers.getCsFileInfo"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.csHelpers.getCsFileInfo"], ["", "def", "getCoreImageFileName", "(", "filename", ")", ":", "\n", "    ", "\"\"\"Returns the part of Cityscapes filenames that is common to all data types\n\n    e.g. for city_123456_123456_gtFine_polygons.json returns city_123456_123456\n    \"\"\"", "\n", "csFile", "=", "getCsFileInfo", "(", "filename", ")", "\n", "return", "\"{}_{}_{}\"", ".", "format", "(", "csFile", ".", "city", ",", "csFile", ".", "sequenceNb", ",", "csFile", ".", "frameNb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.csHelpers.getDirectory": [[101, 111], ["os.path.dirname", "os.path.basename"], "function", ["None"], ["", "def", "getDirectory", "(", "fileName", ")", ":", "\n", "    ", "\"\"\"Returns the directory name for the given filename\n\n    e.g.\n    fileName = \"/foo/bar/foobar.txt\"\n    return value is \"bar\"\n    Not much error checking though\n    \"\"\"", "\n", "dirName", "=", "os", ".", "path", ".", "dirname", "(", "fileName", ")", "\n", "return", "os", ".", "path", ".", "basename", "(", "dirName", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.csHelpers.ensurePath": [[113, 119], ["os.path.isdir", "os.makedirs"], "function", ["None"], ["", "def", "ensurePath", "(", "path", ")", ":", "\n", "    ", "\"\"\"Make sure that the given path exists\"\"\"", "\n", "if", "not", "path", ":", "\n", "        ", "return", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.csHelpers.writeDict2JSON": [[121, 125], ["open", "f.write", "json.dumps"], "function", ["None"], ["", "", "def", "writeDict2JSON", "(", "dictName", ",", "fileName", ")", ":", "\n", "    ", "\"\"\"Write a dictionary as json file\"\"\"", "\n", "with", "open", "(", "fileName", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "json", ".", "dumps", "(", "dictName", ",", "default", "=", "lambda", "o", ":", "o", ".", "__dict__", ",", "sort_keys", "=", "True", ",", "indent", "=", "4", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.labels.assureSingleInstanceName": [[135, 152], ["name.endswith", "len"], "function", ["None"], ["", "", "def", "assureSingleInstanceName", "(", "name", ")", ":", "\n", "# if the name is known, it is not a group", "\n", "    ", "if", "name", "in", "name2label", ":", "\n", "        ", "return", "name", "\n", "# test if the name actually denotes a group", "\n", "", "if", "not", "name", ".", "endswith", "(", "\"group\"", ")", ":", "\n", "        ", "return", "None", "\n", "# remove group", "\n", "", "name", "=", "name", "[", ":", "-", "len", "(", "\"group\"", ")", "]", "\n", "# test if the new name exists", "\n", "if", "not", "name", "in", "name2label", ":", "\n", "        ", "return", "None", "\n", "# test if the new name denotes a label that actually has instances", "\n", "", "if", "not", "name2label", "[", "name", "]", ".", "hasInstances", ":", "\n", "        ", "return", "None", "\n", "# all good then", "\n", "", "return", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalObjectDetection3d.Box3dEvaluator.__init__": [[95, 128], ["collections.OrderedDict", "collections.OrderedDict", "numpy.arange", "range"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "evaluation_params", "# type: EvaluationParameters", "\n", ")", ":", "\n", "# type: (...) -> None", "\n", "\n", "        ", "self", ".", "eval_params", "=", "evaluation_params", "\n", "\n", "# dict containing the GTs per image", "\n", "self", ".", "gts", "=", "{", "}", "\n", "\n", "# dict containing the Camera object per image", "\n", "self", ".", "cameras", "=", "{", "}", "\n", "\n", "# dict containing the predictions per image", "\n", "self", ".", "preds", "=", "{", "}", "\n", "\n", "# dict containing information for AP per class", "\n", "self", ".", "ap", "=", "{", "}", "\n", "\n", "# dict containing all required results", "\n", "self", ".", "results", "=", "OrderedDict", "(", ")", "\n", "\n", "# internal dict keeping additional statistics", "\n", "self", ".", "_stats", "=", "OrderedDict", "(", ")", "\n", "\n", "# the actual confidence thresholds", "\n", "self", ".", "_conf_thresholds", "=", "np", ".", "arange", "(", "\n", "0.0", ",", "1.01", ",", "1.0", "/", "self", ".", "eval_params", ".", "num_conf", "\n", ")", "\n", "\n", "# the actual depth bins", "\n", "self", ".", "_depth_bins", "=", "range", "(", "0", ",", "self", ".", "eval_params", ".", "max_depth", "+", "1", ",", "self", ".", "eval_params", ".", "step_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalObjectDetection3d.Box3dEvaluator.reset": [[129, 138], ["collections.OrderedDict", "collections.OrderedDict"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "# type: (...) -> None", "\n", "        ", "\"\"\"Resets state of this instance to a newly initialized one.\"\"\"", "\n", "\n", "self", ".", "gts", "=", "{", "}", "\n", "self", ".", "preds", "=", "{", "}", "\n", "self", ".", "_stats", "=", "OrderedDict", "(", ")", "\n", "self", ".", "ap", "=", "{", "}", "\n", "self", ".", "results", "=", "OrderedDict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalObjectDetection3d.Box3dEvaluator.checkCw": [[139, 159], ["logger.warning", "min", "filter"], "methods", ["None"], ["", "def", "checkCw", "(", "self", ")", ":", "\n", "# type: (...) -> None", "\n", "        ", "\"\"\"Checks chosen working confidence value.\"\"\"", "\n", "if", "(", "\n", "self", ".", "eval_params", ".", "cw", "not", "in", "self", ".", "_conf_thresholds", "and", "\n", "self", ".", "eval_params", ".", "cw", "!=", "-", "1.0", "\n", ")", ":", "\n", "            ", "old_cw", "=", "self", ".", "eval_params", ".", "cw", "\n", "# set 0 and 1 as lower and upper bound", "\n", "if", "old_cw", "<", "0.0", ":", "\n", "                ", "self", ".", "eval_params", ".", "cw", "=", "0.0", "\n", "", "elif", "old_cw", ">", "1.0", ":", "\n", "                ", "self", ".", "eval_params", ".", "cw", "=", "1.0", "\n", "", "else", ":", "# determine closest possible confidence", "\n", "                ", "self", ".", "eval_params", ".", "cw", "=", "min", "(", "\n", "filter", "(", "lambda", "c", ":", "c", ">=", "self", ".", "eval_params", ".", "cw", ",", "self", ".", "_conf_thresholds", ")", "\n", ")", "\n", "\n", "", "logger", ".", "warning", "(", "\n", "\"{:.2f} is used as working confidence instead of {}.\"", ".", "format", "(", "self", ".", "eval_params", ".", "cw", ",", "old_cw", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalObjectDetection3d.Box3dEvaluator.loadGT": [[161, 234], ["logger.info", "cityscapesscripts.evaluation.objectDetectionHelpers.getFiles", "logger.info", "collections.OrderedDict", "os.path.basename", "cityscapesscripts.helpers.box3dImageTransform.Camera", "len", "json.load.keys", "logger.error", "KeyError", "json.load.keys", "logger.error", "KeyError", "cityscapesscripts.helpers.annotation.CsIgnore2d", "cityscapesscripts.helpers.annotation.CsBbox3d.fromJsonText", "ignores_for_image.append", "os.path.basename.rfind", "open", "json.load", "logger.error", "cityscapesscripts.helpers.annotation.CsBbox3d", "cityscapesscripts.helpers.annotation.CsBbox3d.fromJsonText", "gts_for_image.append"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.objectDetectionHelpers.getFiles", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.Annotation.fromJsonText", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.configuration.load", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.Annotation.fromJsonText"], ["", "", "def", "loadGT", "(", "\n", "self", ",", "\n", "gt_folder", "# type: str", "\n", ")", ":", "\n", "# type: (...) -> None", "\n", "        ", "\"\"\"Loads ground truth from the given folder.\n\n        Args:\n            gt_folder (str): Ground truth folder\n        \"\"\"", "\n", "\n", "logger", ".", "info", "(", "\"Loading GT...\"", ")", "\n", "gts", "=", "getFiles", "(", "gt_folder", ")", "\n", "\n", "logger", ".", "info", "(", "\"Found {} GT files.\"", ".", "format", "(", "len", "(", "gts", ")", ")", ")", "\n", "\n", "self", ".", "_stats", "[", "\"GT_stats\"", "]", "=", "OrderedDict", "(", "(", "x", ",", "0", ")", "for", "x", "in", "self", ".", "eval_params", ".", "labels_to_evaluate", ")", "\n", "\n", "for", "p", "in", "gts", ":", "\n", "            ", "gts_for_image", "=", "[", "]", "\n", "ignores_for_image", "=", "[", "]", "\n", "\n", "# extract CITY_RECORDID_IMAGE from filepath", "\n", "base", "=", "os", ".", "path", ".", "basename", "(", "p", ")", "\n", "base", "=", "base", "[", ":", "base", ".", "rfind", "(", "\"_\"", ")", "]", "\n", "\n", "# check for valid json file", "\n", "try", ":", "\n", "                ", "with", "open", "(", "p", ")", "as", "f", ":", "\n", "                    ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "", "", "except", "json", ".", "decoder", ".", "JSONDecodeError", ":", "\n", "                ", "logger", ".", "error", "(", "\"Invalid GT json file: {}\"", ".", "format", "(", "base", ")", ")", "\n", "raise", "\n", "\n", "# check for 'objects' and 'sensor'", "\n", "", "if", "\"objects\"", "not", "in", "data", ".", "keys", "(", ")", ":", "\n", "                ", "msg", "=", "\"'objects' missing in GT json file: {}\"", ".", "format", "(", "base", ")", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "raise", "KeyError", "(", "msg", ")", "\n", "", "if", "\"sensor\"", "not", "in", "data", ".", "keys", "(", ")", ":", "\n", "                ", "msg", "=", "\"'sensor' missing in GT json file: {}\"", ".", "format", "(", "base", ")", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "raise", "KeyError", "(", "msg", ")", "\n", "\n", "# load Camera object", "\n", "", "camera", "=", "Camera", "(", "\n", "data", "[", "\"sensor\"", "]", "[", "\"fx\"", "]", ",", "\n", "data", "[", "\"sensor\"", "]", "[", "\"fy\"", "]", ",", "\n", "data", "[", "\"sensor\"", "]", "[", "\"u0\"", "]", ",", "\n", "data", "[", "\"sensor\"", "]", "[", "\"v0\"", "]", ",", "\n", "data", "[", "\"sensor\"", "]", "[", "\"sensor_T_ISO_8855\"", "]", "\n", ")", "\n", "\n", "# load 3D boxes", "\n", "for", "d", "in", "data", "[", "\"objects\"", "]", ":", "\n", "                ", "if", "d", "[", "\"label\"", "]", "in", "self", ".", "eval_params", ".", "labels_to_evaluate", ":", "\n", "                    ", "self", ".", "_stats", "[", "\"GT_stats\"", "]", "[", "d", "[", "\"label\"", "]", "]", "+=", "1", "\n", "box_data", "=", "CsBbox3d", "(", ")", "\n", "box_data", ".", "fromJsonText", "(", "d", ")", "\n", "gts_for_image", ".", "append", "(", "box_data", ")", "\n", "\n", "# load ignore regions", "\n", "", "", "for", "d", "in", "data", "[", "\"ignore\"", "]", ":", "\n", "                ", "box_data", "=", "CsIgnore2d", "(", ")", "\n", "box_data", ".", "fromJsonText", "(", "d", ")", "\n", "ignores_for_image", ".", "append", "(", "box_data", ")", "\n", "\n", "", "self", ".", "gts", "[", "base", "]", "=", "{", "\n", "\"objects\"", ":", "gts_for_image", ",", "\n", "\"ignores\"", ":", "ignores_for_image", "\n", "}", "\n", "\n", "self", ".", "cameras", "[", "base", "]", "=", "camera", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalObjectDetection3d.Box3dEvaluator.loadPredictions": [[235, 288], ["logger.info", "cityscapesscripts.evaluation.objectDetectionHelpers.getFiles", "cityscapesscripts.evaluation.objectDetectionHelpers.getFiles.sort", "logger.info", "os.path.basename", "len", "json.load.keys", "logger.error", "os.path.basename.rfind", "open", "json.load", "logger.error", "preds_for_image.append", "d.keys", "cityscapesscripts.helpers.annotation.CsBbox3d", "cityscapesscripts.helpers.annotation.CsBbox3d.fromJsonText", "logger.critical"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.objectDetectionHelpers.getFiles", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.configuration.load", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.Annotation.fromJsonText"], ["", "", "def", "loadPredictions", "(", "\n", "self", ",", "\n", "pred_folder", "# type: str", "\n", ")", ":", "\n", "# type: (...) -> None", "\n", "        ", "\"\"\"Loads all predictions from the given folder.\n\n        Args:\n            pred_folder (str): Prediction folder\n        \"\"\"", "\n", "\n", "logger", ".", "info", "(", "\"Loading predictions...\"", ")", "\n", "predictions", "=", "getFiles", "(", "pred_folder", ")", "\n", "\n", "predictions", ".", "sort", "(", ")", "\n", "logger", ".", "info", "(", "\"Found {} prediction files.\"", ".", "format", "(", "len", "(", "predictions", ")", ")", ")", "\n", "\n", "for", "p", "in", "predictions", ":", "\n", "            ", "preds_for_image", "=", "[", "]", "\n", "\n", "# extract CITY_RECORDID_IMAGE from filepath", "\n", "base", "=", "os", ".", "path", ".", "basename", "(", "p", ")", "\n", "base", "=", "base", "[", ":", "base", ".", "rfind", "(", "\"_\"", ")", "]", "\n", "\n", "# check for valid json file", "\n", "try", ":", "\n", "                ", "with", "open", "(", "p", ")", "as", "f", ":", "\n", "                    ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "", "", "except", "json", ".", "decoder", ".", "JSONDecodeError", ":", "\n", "                ", "logger", ".", "error", "(", "\"Invalid prediction json file: {}\"", ".", "format", "(", "base", ")", ")", "\n", "raise", "\n", "\n", "# check for 'objects'", "\n", "", "if", "\"objects\"", "not", "in", "data", ".", "keys", "(", ")", ":", "\n", "                ", "logger", ".", "error", "(", "\"'objects' missing in prediction json file: {}\"", ".", "format", "(", "base", ")", ")", "\n", "raise", "\n", "\n", "", "for", "d", "in", "data", "[", "\"objects\"", "]", ":", "\n", "                ", "if", "(", "\n", "\"label\"", "in", "d", ".", "keys", "(", ")", "and", "\n", "d", "[", "\"label\"", "]", "in", "self", ".", "eval_params", ".", "labels_to_evaluate", "\n", ")", ":", "\n", "                    ", "try", ":", "\n", "                        ", "box_data", "=", "CsBbox3d", "(", ")", "\n", "box_data", ".", "fromJsonText", "(", "d", ")", "\n", "", "except", "Exception", ":", "\n", "                        ", "logger", ".", "critical", "(", "\"Found incorrect annotation in {}.\"", ".", "format", "(", "p", ")", ")", "\n", "continue", "\n", "\n", "", "preds_for_image", ".", "append", "(", "box_data", ")", "\n", "\n", "", "", "self", ".", "preds", "[", "base", "]", "=", "{", "\n", "\"objects\"", ":", "preds_for_image", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalObjectDetection3d.Box3dEvaluator.evaluate": [[290, 317], ["evalObjectDetection3d.Box3dEvaluator.gts.keys", "logger.info", "evalObjectDetection3d.Box3dEvaluator._calcImageStats", "logger.info", "evalObjectDetection3d.Box3dEvaluator._calculateAp", "logger.info", "evalObjectDetection3d.Box3dEvaluator._calcTpStats", "evalObjectDetection3d.Box3dEvaluator.preds.keys", "logger.critical"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalObjectDetection3d.Box3dEvaluator._calcImageStats", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalObjectDetection3d.Box3dEvaluator._calculateAp", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalObjectDetection3d.Box3dEvaluator._calcTpStats"], ["", "", "def", "evaluate", "(", "self", ")", ":", "\n", "# type: (...) -> None", "\n", "        ", "\"\"\"Main evaluation routine.\"\"\"", "\n", "\n", "# fill up predictions dict with empty detections if prediction file not found", "\n", "for", "base", "in", "self", ".", "gts", ".", "keys", "(", ")", ":", "\n", "            ", "if", "base", "not", "in", "self", ".", "preds", ".", "keys", "(", ")", ":", "\n", "                ", "logger", ".", "critical", "(", "\n", "\"Could not find any prediction for image {}.\"", ".", "format", "(", "base", ")", ")", "\n", "self", ".", "preds", "[", "base", "]", "=", "{", "\"objects\"", ":", "[", "]", "}", "\n", "\n", "# initialize empty data", "\n", "", "", "for", "s", "in", "self", ".", "_conf_thresholds", ":", "\n", "            ", "self", ".", "_stats", "[", "s", "]", "=", "{", "}", "\n", "self", ".", "_stats", "[", "s", "]", "[", "\"data\"", "]", "=", "{", "}", "\n", "\n", "", "logger", ".", "info", "(", "\"Evaluating images...\"", ")", "\n", "# calculate stats for each image", "\n", "self", ".", "_calcImageStats", "(", ")", "\n", "\n", "logger", ".", "info", "(", "\"Calculate AP...\"", ")", "\n", "# calculate 2D ap", "\n", "self", ".", "_calculateAp", "(", ")", "\n", "\n", "logger", ".", "info", "(", "\"Calculate TP stats...\"", ")", "\n", "# calculate TP stats (center dist, size similarity, orientation score)", "\n", "self", ".", "_calcTpStats", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalObjectDetection3d.Box3dEvaluator.saveResults": [[318, 342], ["os.path.join", "open", "json.dump"], "methods", ["None"], ["", "def", "saveResults", "(", "\n", "self", ",", "\n", "result_folder", "# type: str", "\n", ")", ":", "\n", "# type: (...) -> str", "\n", "        ", "\"\"\"Saves the evaluation results to ``\"results.json\"``\n\n        Args:\n            result_folder (str): directory in which the result files are saved\n\n        Returns:\n            str: filepath of ``\"results.json\"``\n        \"\"\"", "\n", "\n", "result_file", "=", "os", ".", "path", ".", "join", "(", "result_folder", ",", "\"results.json\"", ")", "\n", "with", "open", "(", "result_file", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "self", ".", "results", ",", "f", ",", "indent", "=", "4", ")", "\n", "\n", "# dump internal stats for debugging", "\n", "# stats_file = os.path.join(result_folder, \"stats.json\")", "\n", "# with open(stats_file, 'w') as f:", "\n", "#    json.dump(self._stats, f, indent=4)", "\n", "\n", "", "return", "result_file", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalObjectDetection3d.Box3dEvaluator._calcImageStats": [[343, 358], ["tqdm.tqdm.tqdm", "evalObjectDetection3d.Box3dEvaluator.gts.keys", "results.append", "thread_result.items", "evalObjectDetection3d.Box3dEvaluator._worker", "data.items"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalObjectDetection3d.Box3dEvaluator._worker"], ["", "def", "_calcImageStats", "(", "self", ")", ":", "\n", "# type: (...) -> None", "\n", "        ", "\"\"\"Internal method that calculates Precision and Recall values for whole dataset.\"\"\"", "\n", "\n", "# single threaded", "\n", "results", "=", "[", "]", "\n", "for", "x", "in", "tqdm", "(", "self", ".", "gts", ".", "keys", "(", ")", ")", ":", "\n", "            ", "results", ".", "append", "(", "self", ".", "_worker", "(", "x", ")", ")", "\n", "\n", "# update internal result dict with the corresponding results", "\n", "", "for", "thread_result", "in", "results", ":", "\n", "            ", "for", "score", ",", "eval_data", "in", "thread_result", ".", "items", "(", ")", ":", "\n", "                ", "data", "=", "eval_data", "[", "\"data\"", "]", "\n", "for", "img_base", ",", "match_data", "in", "data", ".", "items", "(", ")", ":", "\n", "                    ", "self", ".", "_stats", "[", "score", "]", "[", "\"data\"", "]", "[", "img_base", "]", "=", "match_data", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalObjectDetection3d.Box3dEvaluator._worker": [[359, 396], ["cityscapesscripts.helpers.box3dImageTransform.Box3dImageTransform", "cityscapesscripts.helpers.box3dImageTransform.Box3dImageTransform.initialize_box_from_annotation", "p.bbox_2d.setAmodalBox", "evalObjectDetection3d.Box3dEvaluator._addImageEvaluation", "cityscapesscripts.helpers.box3dImageTransform.Box3dImageTransform.get_amodal_box_2d", "len", "len"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.initialize_box_from_annotation", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.CsBbox2d.setAmodalBox", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalObjectDetection3d.Box3dEvaluator._addImageEvaluation", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.box3dImageTransform.Box3dImageTransform.get_amodal_box_2d"], ["", "", "", "", "def", "_worker", "(", "\n", "self", ",", "\n", "base", "# type: str", "\n", ")", ":", "\n", "# type: (...) -> dict", "\n", "        ", "\"\"\"Internal method to run evaluation for a single image.\"\"\"", "\n", "tmp_stats", "=", "{", "}", "\n", "\n", "gt_boxes", "=", "self", ".", "gts", "[", "base", "]", "\n", "pred_boxes", "=", "self", ".", "preds", "[", "base", "]", "\n", "camera", "=", "self", ".", "cameras", "[", "base", "]", "\n", "\n", "# recalculate the amodal bounding boxes", "\n", "box3dTransform", "=", "Box3dImageTransform", "(", "camera", ")", "\n", "\n", "for", "p", "in", "pred_boxes", "[", "\"objects\"", "]", ":", "\n", "            ", "box3dTransform", ".", "initialize_box_from_annotation", "(", "p", ")", "\n", "p", ".", "bbox_2d", ".", "setAmodalBox", "(", "box3dTransform", ".", "get_amodal_box_2d", "(", ")", ")", "\n", "\n", "# calculate PR stats for each conf threshold", "\n", "", "for", "s", "in", "self", ".", "_conf_thresholds", ":", "\n", "            ", "tmp_stats", "[", "s", "]", "=", "{", "\n", "\"data\"", ":", "{", "}", "\n", "}", "\n", "(", "tp_idx_gt", ",", "tp_idx_pred", ",", "fp_idx_pred", ",", "\n", "fn_idx_gt", ")", "=", "self", ".", "_addImageEvaluation", "(", "gt_boxes", ",", "pred_boxes", ",", "s", ")", "\n", "\n", "assert", "len", "(", "tp_idx_gt", ")", "==", "len", "(", "tp_idx_pred", ")", "\n", "\n", "tmp_stats", "[", "s", "]", "[", "\"data\"", "]", "[", "base", "]", "=", "{", "\n", "\"tp_idx_gt\"", ":", "tp_idx_gt", ",", "\n", "\"tp_idx_pred\"", ":", "tp_idx_pred", ",", "\n", "\"fp_idx_pred\"", ":", "fp_idx_pred", ",", "\n", "\"fn_idx_gt\"", ":", "fn_idx_gt", "\n", "}", "\n", "\n", "", "return", "tmp_stats", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalObjectDetection3d.Box3dEvaluator._addImageEvaluation": [[397, 511], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "cityscapesscripts.evaluation.objectDetectionHelpers.calcIouMatrix", "evalObjectDetection3d.Box3dEvaluator._getMatches", "numpy.zeros", "cityscapesscripts.evaluation.objectDetectionHelpers.calcOverlapMatrix", "evalObjectDetection3d.Box3dEvaluator._getMatches", "enumerate", "len", "len", "len", "len", "numpy.asarray", "len", "numpy.asarray", "enumerate", "enumerate", "numpy.asarray", "numpy.asarray", "numpy.asarray", "ValueError", "numpy.asarray", "ValueError"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.objectDetectionHelpers.calcIouMatrix", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalObjectDetection3d.Box3dEvaluator._getMatches", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.objectDetectionHelpers.calcOverlapMatrix", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalObjectDetection3d.Box3dEvaluator._getMatches"], ["", "def", "_addImageEvaluation", "(", "\n", "self", ",", "\n", "gt_boxes", ",", "# type: List[CsBbox3d]", "\n", "pred_boxes", ",", "# type: List[CsBbox3d]", "\n", "min_score", "# type: float", "\n", ")", ":", "\n", "# type: (...) -> Tuple[dict, dict, dict, dict]", "\n", "        ", "\"\"\"Internal method to evaluate a single image.\n\n        Args:\n            gt_boxes (List[CsBbox3d]): GT boxes\n            pred_boxes (List[CsBbox3d]): Predicted boxes\n            min_score (float): minimum required score\n\n        Returns:\n            tuple(dict, dict, dict, dict): tuple of TP, FP and FN data\n        \"\"\"", "\n", "tp_idx_gt", "=", "{", "}", "\n", "tp_idx_pred", "=", "{", "}", "\n", "fp_idx_pred", "=", "{", "}", "\n", "fn_idx_gt", "=", "{", "}", "\n", "\n", "# pre-load all ignore regions as they are the same for all classes", "\n", "gt_idx_ignores", "=", "[", "idx", "for", "idx", ",", "\n", "box", "in", "enumerate", "(", "gt_boxes", "[", "\"ignores\"", "]", ")", "]", "\n", "\n", "# calculate stats per class", "\n", "for", "i", "in", "self", ".", "eval_params", ".", "labels_to_evaluate", ":", "\n", "# get idx for pred boxes for current class", "\n", "            ", "pred_idx", "=", "[", "idx", "for", "idx", ",", "box", "in", "enumerate", "(", "\n", "pred_boxes", "[", "\"objects\"", "]", ")", "if", "box", ".", "label", "==", "i", "and", "box", ".", "score", ">=", "min_score", "]", "\n", "\n", "# get idx for gt boxes for current class", "\n", "gt_idx", "=", "[", "idx", "for", "idx", ",", "box", "in", "enumerate", "(", "\n", "gt_boxes", "[", "\"objects\"", "]", ")", "if", "box", ".", "label", "==", "i", "]", "\n", "\n", "# if there is no prediction at all, just return an empty result", "\n", "if", "len", "(", "pred_idx", ")", "==", "0", ":", "\n", "# dump data to result dicts", "\n", "                ", "tp_idx_gt", "[", "i", "]", "=", "[", "]", "\n", "tp_idx_pred", "[", "i", "]", "=", "[", "]", "\n", "fp_idx_pred", "[", "i", "]", "=", "pred_idx", "\n", "fn_idx_gt", "[", "i", "]", "=", "gt_idx", "\n", "continue", "\n", "\n", "# create 2D box matrix for predictions and gts", "\n", "", "boxes_2d_pred", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ")", "\n", "if", "len", "(", "pred_idx", ")", ">", "0", ":", "\n", "# get modal or amodal boxes depending on matching strategy", "\n", "                ", "if", "self", ".", "eval_params", ".", "matching_method", "==", "MATCHING_AMODAL", ":", "\n", "                    ", "boxes_2d_pred", "=", "np", ".", "asarray", "(", "\n", "[", "pred_boxes", "[", "\"objects\"", "]", "[", "x", "]", ".", "bbox_2d", ".", "bbox_amodal", "for", "x", "in", "pred_idx", "]", ")", "\n", "", "elif", "self", ".", "eval_params", ".", "matching_method", "==", "MATCHING_MODAL", ":", "\n", "                    ", "boxes_2d_pred", "=", "np", ".", "asarray", "(", "\n", "[", "pred_boxes", "[", "\"objects\"", "]", "[", "x", "]", ".", "bbox_2d", ".", "bbox_modal", "for", "x", "in", "pred_idx", "]", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "\"Matching method {} not known!\"", ".", "format", "(", "self", ".", "eval_params", ".", "matching_method", ")", ")", "\n", "\n", "", "", "boxes_2d_gt", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ")", "\n", "if", "len", "(", "gt_idx", ")", ">", "0", ":", "\n", "# get modal or amodal boxes depending on matching strategy", "\n", "                ", "if", "self", ".", "eval_params", ".", "matching_method", "==", "MATCHING_AMODAL", ":", "\n", "                    ", "boxes_2d_gt", "=", "np", ".", "asarray", "(", "\n", "[", "gt_boxes", "[", "\"objects\"", "]", "[", "x", "]", ".", "bbox_2d", ".", "bbox_amodal", "for", "x", "in", "gt_idx", "]", ")", "\n", "", "elif", "self", ".", "eval_params", ".", "matching_method", "==", "MATCHING_MODAL", ":", "\n", "                    ", "boxes_2d_gt", "=", "np", ".", "asarray", "(", "\n", "[", "gt_boxes", "[", "\"objects\"", "]", "[", "x", "]", ".", "bbox_2d", ".", "bbox_modal", "for", "x", "in", "gt_idx", "]", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "\"Matching method {} not known!\"", ".", "format", "(", "self", ".", "eval_params", ".", "matching_method", ")", ")", "\n", "\n", "", "", "boxes_2d_gt_ignores", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ")", "\n", "if", "len", "(", "gt_idx_ignores", ")", ">", "0", ":", "\n", "                ", "boxes_2d_gt_ignores", "=", "np", ".", "asarray", "(", "\n", "[", "gt_boxes", "[", "\"ignores\"", "]", "[", "x", "]", ".", "bbox", "for", "x", "in", "gt_idx_ignores", "]", ")", "\n", "\n", "# calculate IoU matrix between GTs and Preds", "\n", "", "iou_matrix", "=", "calcIouMatrix", "(", "boxes_2d_gt", ",", "boxes_2d_pred", ")", "\n", "\n", "# get matches", "\n", "(", "gt_tp_row_idx", ",", "pred_tp_col_idx", ",", "_", ")", "=", "self", ".", "_getMatches", "(", "iou_matrix", ")", "\n", "\n", "# convert it to box idx", "\n", "gt_tp_idx", "=", "[", "gt_idx", "[", "x", "]", "for", "x", "in", "gt_tp_row_idx", "]", "\n", "pred_tp_idx", "=", "[", "pred_idx", "[", "x", "]", "for", "x", "in", "pred_tp_col_idx", "]", "\n", "gt_fn_idx", "=", "[", "x", "for", "x", "in", "gt_idx", "if", "x", "not", "in", "gt_tp_idx", "]", "\n", "pred_fp_idx_check_for_ignores", "=", "[", "\n", "x", "for", "x", "in", "pred_idx", "if", "x", "not", "in", "pred_tp_idx", "]", "\n", "\n", "# check if remaining FP idx match with ignored GT", "\n", "boxes_2d_pred_fp", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ")", "\n", "if", "len", "(", "pred_fp_idx_check_for_ignores", ")", ">", "0", ":", "\n", "# as there are no amodal boxes for ignore regions", "\n", "# matching with ignore regions should only be performed on", "\n", "# modal predictions.", "\n", "                ", "boxes_2d_pred_fp", "=", "np", ".", "asarray", "(", "\n", "[", "pred_boxes", "[", "\"objects\"", "]", "[", "x", "]", ".", "bbox_2d", ".", "bbox_modal", "for", "x", "in", "pred_fp_idx_check_for_ignores", "]", ")", "\n", "\n", "", "overlap_matrix", "=", "calcOverlapMatrix", "(", "\n", "boxes_2d_gt_ignores", ",", "boxes_2d_pred_fp", ")", "\n", "\n", "# get matches and convert to actual box idx", "\n", "(", "_", ",", "pred_tp_col_idx", ",", "_", ")", "=", "self", ".", "_getMatches", "(", "overlap_matrix", ",", "matchIgnores", "=", "True", ")", "\n", "pred_tp_ignores_idx", "=", "[", "\n", "pred_fp_idx_check_for_ignores", "[", "x", "]", "for", "x", "in", "pred_tp_col_idx", "]", "\n", "pred_fp_idx", "=", "[", "\n", "x", "for", "x", "in", "pred_fp_idx_check_for_ignores", "if", "x", "not", "in", "pred_tp_ignores_idx", "]", "\n", "\n", "# dump data to result dicts", "\n", "tp_idx_gt", "[", "i", "]", "=", "gt_tp_idx", "\n", "tp_idx_pred", "[", "i", "]", "=", "pred_tp_idx", "\n", "fp_idx_pred", "[", "i", "]", "=", "pred_fp_idx", "\n", "fn_idx_gt", "[", "i", "]", "=", "gt_fn_idx", "\n", "\n", "", "return", "(", "tp_idx_gt", ",", "tp_idx_pred", ",", "fp_idx_pred", ",", "fn_idx_gt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalObjectDetection3d.Box3dEvaluator._getMatches": [[512, 558], ["numpy.max", "numpy.where", "matched_gts.append", "matched_preds.append", "matched_ious.append", "numpy.max", "numpy.max"], "methods", ["None"], ["", "def", "_getMatches", "(", "\n", "self", ",", "\n", "iou_matrix", ",", "# type: np.ndarray", "\n", "matchIgnores", "=", "False", "# type: bool", "\n", ")", ":", "\n", "# type: (...) -> Tuple[List[int], List[int], List[int]]", "\n", "        ", "\"\"\"Internal method that gets the TP matches between the predictions and the GT data.\n\n        Args:\n            iou_matrix (np.ndarray): The NxM matrix containing the pairwise overlap or IoU\n            matchIgnores (bool): If set to True, allow multiple matches with ignore regions\n\n        Returns:\n            tuple(list[int],list[int],list[float]): A tuple containing the TP indices\n            for GT and predictions and the corresponding iou\n        \"\"\"", "\n", "matched_gts", "=", "[", "]", "\n", "matched_preds", "=", "[", "]", "\n", "matched_ious", "=", "[", "]", "\n", "\n", "# we either have gt and no predictions or no predictions but gt", "\n", "if", "iou_matrix", ".", "shape", "[", "0", "]", "==", "0", "or", "iou_matrix", ".", "shape", "[", "1", "]", "==", "0", ":", "\n", "            ", "return", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "# iteratively select the max of the iou_matrix and set the corresponding", "\n", "# rows and cols to 0.", "\n", "", "tmp_iou_max", "=", "np", ".", "max", "(", "iou_matrix", ")", "\n", "\n", "while", "tmp_iou_max", ">", "self", ".", "eval_params", ".", "min_iou_to_match", ":", "\n", "            ", "tmp_row", ",", "tmp_col", "=", "np", ".", "where", "(", "iou_matrix", "==", "tmp_iou_max", ")", "\n", "\n", "used_row", "=", "tmp_row", "[", "0", "]", "\n", "used_col", "=", "tmp_col", "[", "0", "]", "\n", "\n", "matched_gts", ".", "append", "(", "used_row", ")", "\n", "matched_preds", ".", "append", "(", "used_col", ")", "\n", "matched_ious", ".", "append", "(", "np", ".", "max", "(", "iou_matrix", ")", ")", "\n", "\n", "if", "matchIgnores", "is", "False", ":", "\n", "                ", "iou_matrix", "[", "used_row", ",", "...", "]", "=", "0.0", "\n", "\n", "", "iou_matrix", "[", "...", ",", "used_col", "]", "=", "0.0", "\n", "\n", "tmp_iou_max", "=", "np", ".", "max", "(", "iou_matrix", ")", "\n", "\n", "", "return", "(", "matched_gts", ",", "matched_preds", ",", "matched_ious", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalObjectDetection3d.Box3dEvaluator._calcCenterDistances": [[559, 603], ["numpy.asarray", "numpy.asarray", "numpy.sqrt().astype", "numpy.sqrt", "zip", "[].append", "numpy.sqrt", "int", "min", "float"], "methods", ["None"], ["", "def", "_calcCenterDistances", "(", "\n", "self", ",", "\n", "label", ",", "# type: str", "\n", "gt_boxes", ",", "# type: List[CsBbox3d]", "\n", "pred_boxes", ",", "# type: List[CsBbox3d]", "\n", ")", ":", "\n", "# type: (...) -> np.ndarray", "\n", "        ", "\"\"\"Internal method that calculates the BEV distance for a TP box\n        d = sqrt(dx*dx + dz*dz)\n\n        Args:\n            label (str): the class that will be evaluated\n            gt_boxes (List[CsBbox3d]): GT boxes\n            pred_boxes (List[CsBbox3d]): Predicted boxes\n\n        Returns:\n            np.ndarray: array containing the GT distances\n        \"\"\"", "\n", "\n", "gt_boxes", "=", "np", ".", "asarray", "(", "[", "x", ".", "center", "for", "x", "in", "gt_boxes", "]", ")", "\n", "pred_boxes", "=", "np", ".", "asarray", "(", "[", "x", ".", "center", "for", "x", "in", "pred_boxes", "]", ")", "\n", "\n", "gt_dists", "=", "np", ".", "sqrt", "(", "gt_boxes", "[", "...", ",", "0", "]", "**", "2", "+", "\n", "gt_boxes", "[", "...", ",", "1", "]", "**", "2", ")", ".", "astype", "(", "int", ")", "\n", "\n", "center_dists", "=", "gt_boxes", "-", "pred_boxes", "\n", "center_dists", "=", "np", ".", "sqrt", "(", "center_dists", "[", "...", ",", "0", "]", "**", "2", "+", "\n", "center_dists", "[", "...", ",", "1", "]", "**", "2", ")", "\n", "\n", "for", "gt_dist", ",", "center_dist", "in", "zip", "(", "gt_dists", ",", "center_dists", ")", ":", "\n", "            ", "if", "gt_dist", ">=", "self", ".", "eval_params", ".", "max_depth", ":", "\n", "                ", "continue", "\n", "\n", "# instead of unbound distances in m we want to transform this in a score between 0 and 1", "\n", "# e.g. if the max_depth == 100", "\n", "# score = 1. - (dist / 100)", "\n", "\n", "", "gt_dist", "=", "int", "(", "gt_dist", "/", "self", ".", "eval_params", ".", "step_size", ")", "*", "self", ".", "eval_params", ".", "step_size", "\n", "\n", "self", ".", "_stats", "[", "\"working_data\"", "]", "[", "label", "]", "[", "\"Center_Dist\"", "]", "[", "gt_dist", "]", ".", "append", "(", "\n", "1.", "-", "min", "(", "center_dist", "/", "float", "(", "self", ".", "eval_params", ".", "max_depth", ")", ",", "1.", ")", ")", "# norm it to 1.", "\n", "\n", "", "return", "gt_dists", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalObjectDetection3d.Box3dEvaluator._calcSizeSimilarities": [[604, 637], ["numpy.asarray", "numpy.asarray", "numpy.prod", "zip", "numpy.minimum", "[].append", "int"], "methods", ["None"], ["", "def", "_calcSizeSimilarities", "(", "\n", "self", ",", "\n", "label", ",", "# type: str", "\n", "gt_boxes", ",", "# type: List[CsBbox3d]", "\n", "pred_boxes", ",", "# type: List[CsBbox3d]", "\n", "gt_dists", "# type: np.ndarray", "\n", ")", ":", "\n", "# type: (...) -> None", "\n", "        ", "\"\"\"Internal method that calculates the size similarity for a TP box\n        s = min(w/w', w'/w) * min(h/h', h'/h) * min(l/l', l'/l)\n\n        Args:\n            label (str): the class that will be evaluated\n            gt_boxes (List[CsBbox3d]): GT boxes\n            pred_boxes (List[CsBbox3d]): Predicted boxes\n            gt_dists (np.ndarray): GT distances\n        \"\"\"", "\n", "\n", "gt_boxes", "=", "np", ".", "asarray", "(", "[", "x", ".", "dims", "for", "x", "in", "gt_boxes", "]", ")", "\n", "pred_boxes", "=", "np", ".", "asarray", "(", "[", "x", ".", "dims", "for", "x", "in", "pred_boxes", "]", ")", "\n", "\n", "size_similarities", "=", "np", ".", "prod", "(", "np", ".", "minimum", "(", "\n", "gt_boxes", "/", "pred_boxes", ",", "pred_boxes", "/", "gt_boxes", ")", ",", "axis", "=", "1", ")", "\n", "\n", "for", "gt_dist", ",", "size_simi", "in", "zip", "(", "gt_dists", ",", "size_similarities", ")", ":", "\n", "            ", "if", "gt_dist", ">=", "self", ".", "eval_params", ".", "max_depth", ":", "\n", "                ", "continue", "\n", "\n", "", "gt_dist", "=", "int", "(", "gt_dist", "/", "self", ".", "eval_params", ".", "step_size", ")", "*", "self", ".", "eval_params", ".", "step_size", "\n", "\n", "self", ".", "_stats", "[", "\"working_data\"", "]", "[", "label", "]", "[", "\"Size_Similarity\"", "]", "[", "gt_dist", "]", ".", "append", "(", "\n", "size_simi", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalObjectDetection3d.Box3dEvaluator._calcOrientationSimilarities": [[638, 678], ["numpy.asarray", "numpy.asarray", "zip", "[].append", "[].append", "numpy.cos", "int", "pyquaternion.Quaternion", "pyquaternion.Quaternion", "numpy.cos", "numpy.cos"], "methods", ["None"], ["", "", "def", "_calcOrientationSimilarities", "(", "\n", "self", ",", "\n", "label", ",", "# type: str", "\n", "gt_boxes", ",", "# type: List[CsBbox3d]", "\n", "pred_boxes", ",", "# type: List[CsBbox3d]", "\n", "gt_dists", "# type: np.ndarray", "\n", ")", ":", "\n", "# type: (...) -> None", "\n", "        ", "\"\"\"Internal method that calculates the orientation similarity for a TP box.\n        os_yaw = (1 + cos(delta)) / 2.\n        os_pitch/roll = 0.5 + (cos(delta_pitch) + cos(delta_roll)) / 4.\n\n        Args:\n            label (str): the class that will be evaluated\n            gt_boxes (List[CsBbox3d]): GT boxes\n            pred_boxes (List[CsBbox3d]): Predicted boxes\n            gt_dists (np.ndarray): GT distances\n        \"\"\"", "\n", "\n", "gt_vals", "=", "np", ".", "asarray", "(", "\n", "[", "Quaternion", "(", "x", ".", "rotation", ")", ".", "yaw_pitch_roll", "for", "x", "in", "gt_boxes", "]", ")", "\n", "pred_vals", "=", "np", ".", "asarray", "(", "\n", "[", "Quaternion", "(", "x", ".", "rotation", ")", ".", "yaw_pitch_roll", "for", "x", "in", "pred_boxes", "]", ")", "\n", "\n", "os_yaws", "=", "(", "1.", "+", "np", ".", "cos", "(", "gt_vals", "[", "...", ",", "0", "]", "-", "pred_vals", "[", "...", ",", "0", "]", ")", ")", "/", "2.", "\n", "os_pitch_rolls", "=", "0.5", "+", "(", "np", ".", "cos", "(", "gt_vals", "[", "...", ",", "1", "]", "-", "pred_vals", "[", "...", ",", "1", "]", ")", "+", "\n", "np", ".", "cos", "(", "gt_vals", "[", "...", ",", "2", "]", "-", "pred_vals", "[", "...", ",", "2", "]", ")", ")", "/", "4.", "\n", "\n", "for", "gt_dist", ",", "os_yaw", ",", "os_pitch_roll", "in", "zip", "(", "gt_dists", ",", "os_yaws", ",", "os_pitch_rolls", ")", ":", "\n", "            ", "if", "gt_dist", ">=", "self", ".", "eval_params", ".", "max_depth", ":", "\n", "                ", "continue", "\n", "\n", "", "gt_dist", "=", "int", "(", "gt_dist", "/", "self", ".", "eval_params", ".", "step_size", ")", "*", "self", ".", "eval_params", ".", "step_size", "\n", "\n", "self", ".", "_stats", "[", "\"working_data\"", "]", "[", "label", "]", "[", "\"OS_Yaw\"", "]", "[", "gt_dist", "]", ".", "append", "(", "\n", "os_yaw", ")", "\n", "self", ".", "_stats", "[", "\"working_data\"", "]", "[", "label", "]", "[", "\"OS_Pitch_Roll\"", "]", "[", "gt_dist", "]", ".", "append", "(", "\n", "os_pitch_roll", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalObjectDetection3d.Box3dEvaluator._calculateAUC": [[679, 729], ["parameter_depth_data.items", "collections.OrderedDict", "collections.OrderedDict", "value_dict.items", "list", "len", "numpy.mean", "zip", "len", "len", "depths.append", "vals.append", "num_items_list.append", "sum", "float", "len", "len"], "methods", ["None"], ["", "", "def", "_calculateAUC", "(", "\n", "self", ",", "\n", "label", "# type: str", "\n", ")", ":", "\n", "# type: (...) -> None", "\n", "        ", "\"\"\"Internal method that calculates the Area Under Curve (AUC)\n        for the available DDTP metrics.\n\n        Args:\n            label (str): the class that will be evaluated\n        \"\"\"", "\n", "parameter_depth_data", "=", "self", ".", "_stats", "[", "\"working_data\"", "]", "[", "label", "]", "\n", "\n", "for", "parameter_name", ",", "value_dict", "in", "parameter_depth_data", ".", "items", "(", ")", ":", "\n", "            ", "curr_mean", "=", "-", "1.", "\n", "result_dict", "=", "OrderedDict", "(", ")", "\n", "result_items", "=", "OrderedDict", "(", ")", "\n", "result_auc", "=", "0.", "\n", "num_items", "=", "0", "\n", "\n", "depths", "=", "[", "]", "\n", "vals", "=", "[", "]", "\n", "num_items_list", "=", "[", "]", "\n", "all_items", "=", "[", "]", "\n", "\n", "for", "depth", ",", "values", "in", "value_dict", ".", "items", "(", ")", ":", "\n", "                ", "if", "len", "(", "values", ")", ">", "0", ":", "\n", "                    ", "num_items", "+=", "len", "(", "values", ")", "\n", "all_items", "+=", "values", "\n", "\n", "curr_mean", "=", "sum", "(", "values", ")", "/", "float", "(", "len", "(", "values", ")", ")", "\n", "\n", "depths", ".", "append", "(", "depth", ")", "\n", "vals", ".", "append", "(", "curr_mean", ")", "\n", "num_items_list", ".", "append", "(", "len", "(", "values", ")", ")", "\n", "\n", "# AUC is calculated as the mean of all values for available depths", "\n", "", "", "if", "len", "(", "vals", ")", ">", "1", ":", "\n", "                ", "result_auc", "=", "np", ".", "mean", "(", "vals", ")", "\n", "", "else", ":", "\n", "                ", "result_auc", "=", "0.", "\n", "\n", "# remove the expanded entries", "\n", "", "for", "d", ",", "v", ",", "n", "in", "list", "(", "zip", "(", "depths", ",", "vals", ",", "num_items_list", ")", ")", ":", "\n", "                ", "result_dict", "[", "d", "]", "=", "v", "\n", "result_items", "[", "d", "]", "=", "n", "\n", "\n", "", "self", ".", "results", "[", "parameter_name", "]", "[", "label", "]", "[", "\"data\"", "]", "=", "result_dict", "\n", "self", ".", "results", "[", "parameter_name", "]", "[", "label", "]", "[", "\"auc\"", "]", "=", "result_auc", "\n", "self", ".", "results", "[", "parameter_name", "]", "[", "label", "]", "[", "\"items\"", "]", "=", "result_items", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalObjectDetection3d.Box3dEvaluator._calcTpStats": [[730, 850], ["evalObjectDetection3d.Box3dEvaluator._stats[].items", "collections.OrderedDict", "collections.OrderedDict", "logger.info", "logger.info", "logger.info", "numpy.mean", "logger.info", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "working_data.items", "evalObjectDetection3d.Box3dEvaluator._calculateAUC", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "numpy.mean", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "evalObjectDetection3d.Box3dEvaluator._calcCenterDistances", "evalObjectDetection3d.Box3dEvaluator._calcSizeSimilarities", "evalObjectDetection3d.Box3dEvaluator._calcOrientationSimilarities", "logger.warn", "accept_cats.append", "evalObjectDetection3d.Box3dEvaluator.results[].items", "len", "len", "evalObjectDetection3d.Box3dEvaluator.results[].items"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalObjectDetection3d.Box3dEvaluator._calculateAUC", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalObjectDetection3d.Box3dEvaluator._calcCenterDistances", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalObjectDetection3d.Box3dEvaluator._calcSizeSimilarities", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalObjectDetection3d.Box3dEvaluator._calcOrientationSimilarities"], ["", "", "def", "_calcTpStats", "(", "self", ")", ":", "\n", "# type (...) -> None", "\n", "        ", "\"\"\"Internal method that calculates working point for each class and calculate TP stats.\n\n        Calculated stats are:\n          - BEV mean center distance\n          - size similarity\n          - orientation score for yaw and pitch/roll\n        \"\"\"", "\n", "\n", "parameters", "=", "[", "\"AP\"", ",", "\"Center_Dist\"", ",", "\n", "\"Size_Similarity\"", ",", "\"OS_Yaw\"", ",", "\"OS_Pitch_Roll\"", "]", "\n", "\n", "# setup result dict", "\n", "for", "parameter", "in", "parameters", ":", "\n", "            ", "if", "parameter", "==", "\"AP\"", ":", "\n", "                ", "continue", "\n", "", "self", ".", "results", "[", "parameter", "]", "=", "OrderedDict", "(", ")", "\n", "for", "x", "in", "self", ".", "eval_params", ".", "labels_to_evaluate", ":", "\n", "                ", "self", ".", "results", "[", "parameter", "]", "[", "x", "]", "=", "OrderedDict", "(", ")", "\n", "self", ".", "results", "[", "parameter", "]", "[", "x", "]", "[", "\"data\"", "]", "=", "OrderedDict", "(", ")", "\n", "self", ".", "results", "[", "parameter", "]", "[", "x", "]", "[", "\"items\"", "]", "=", "OrderedDict", "(", ")", "\n", "self", ".", "results", "[", "parameter", "]", "[", "x", "]", "[", "\"auc\"", "]", "=", "0.", "\n", "\n", "# calculate the statistics for each class", "\n", "", "", "for", "label", "in", "self", ".", "eval_params", ".", "labels_to_evaluate", ":", "\n", "            ", "working_confidence", "=", "self", ".", "_stats", "[", "\"working_confidence\"", "]", "[", "label", "]", "\n", "working_data", "=", "self", ".", "_stats", "[", "working_confidence", "]", "[", "\"data\"", "]", "\n", "\n", "self", ".", "_stats", "[", "\"working_data\"", "]", "=", "{", "}", "\n", "self", ".", "_stats", "[", "\"working_data\"", "]", "[", "label", "]", "=", "OrderedDict", "(", ")", "\n", "self", ".", "_stats", "[", "\"working_data\"", "]", "[", "label", "]", "[", "\"Center_Dist\"", "]", "=", "OrderedDict", "(", "(", "x", ",", "[", "]", ")", "for", "x", "in", "self", ".", "_depth_bins", ")", "\n", "self", ".", "_stats", "[", "\"working_data\"", "]", "[", "label", "]", "[", "\"Size_Similarity\"", "]", "=", "OrderedDict", "(", "(", "x", ",", "[", "]", ")", "for", "x", "in", "self", ".", "_depth_bins", ")", "\n", "self", ".", "_stats", "[", "\"working_data\"", "]", "[", "label", "]", "[", "\"OS_Yaw\"", "]", "=", "OrderedDict", "(", "(", "x", ",", "[", "]", ")", "for", "x", "in", "self", ".", "_depth_bins", ")", "\n", "self", ".", "_stats", "[", "\"working_data\"", "]", "[", "label", "]", "[", "\"OS_Pitch_Roll\"", "]", "=", "OrderedDict", "(", "(", "x", ",", "[", "]", ")", "for", "x", "in", "self", ".", "_depth_bins", ")", "\n", "\n", "# loop over all images", "\n", "for", "base_img", ",", "tp_fp_fn_data", "in", "working_data", ".", "items", "(", ")", ":", "\n", "                ", "gt_boxes", "=", "self", ".", "gts", "[", "base_img", "]", "[", "\"objects\"", "]", "\n", "pred_boxes", "=", "self", ".", "preds", "[", "base_img", "]", "[", "\"objects\"", "]", "\n", "\n", "tp_idx_gt", "=", "tp_fp_fn_data", "[", "\"tp_idx_gt\"", "]", "\n", "tp_idx_pred", "=", "tp_fp_fn_data", "[", "\"tp_idx_pred\"", "]", "\n", "\n", "# only select the GT boxes", "\n", "gt_boxes", "=", "[", "gt_boxes", "[", "x", "]", "for", "x", "in", "tp_idx_gt", "[", "label", "]", "]", "\n", "pred_boxes", "=", "[", "pred_boxes", "[", "x", "]", "for", "x", "in", "tp_idx_pred", "[", "label", "]", "]", "\n", "\n", "# there is no prediction or GT -> no TP statistics", "\n", "if", "len", "(", "gt_boxes", ")", "==", "0", "or", "len", "(", "pred_boxes", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "\n", "# calculate center_dists for image", "\n", "", "gt_dists", "=", "self", ".", "_calcCenterDistances", "(", "\n", "label", ",", "gt_boxes", ",", "pred_boxes", ")", "\n", "\n", "# calculate size similarities", "\n", "self", ".", "_calcSizeSimilarities", "(", "\n", "label", ",", "gt_boxes", ",", "pred_boxes", ",", "gt_dists", ")", "\n", "\n", "# calculate orientation similarities", "\n", "self", ".", "_calcOrientationSimilarities", "(", "\n", "label", ",", "gt_boxes", ",", "pred_boxes", ",", "gt_dists", ")", "\n", "\n", "# calc AUC and detection score", "\n", "", "self", ".", "_calculateAUC", "(", "label", ")", "\n", "\n", "# determine which categories have GT data and can be used for mean calculation", "\n", "", "accept_cats", "=", "[", "]", "\n", "for", "cat", ",", "count", "in", "self", ".", "_stats", "[", "\"GT_stats\"", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "count", "==", "0", ":", "\n", "                ", "logger", ".", "warn", "(", "\"Category {} has no GT!\"", ".", "format", "(", "cat", ")", ")", "\n", "", "else", ":", "\n", "                ", "accept_cats", ".", "append", "(", "cat", ")", "\n", "\n", "# add GT statistics and working confidence to results", "\n", "", "", "self", ".", "results", "[", "\"GT_stats\"", "]", "=", "self", ".", "_stats", "[", "\"GT_stats\"", "]", "\n", "self", ".", "results", "[", "\"working_confidence\"", "]", "=", "self", ".", "_stats", "[", "\"working_confidence\"", "]", "\n", "\n", "# add evaluation parameters to results", "\n", "modal_amodal_modifier", "=", "\"Amodal\"", "\n", "if", "self", ".", "eval_params", ".", "matching_method", "==", "MATCHING_MODAL", ":", "\n", "            ", "modal_amodal_modifier", "=", "\"Modal\"", "\n", "\n", "", "self", ".", "results", "[", "\"eval_params\"", "]", "=", "OrderedDict", "(", ")", "\n", "self", ".", "results", "[", "\"eval_params\"", "]", "[", "\"labels\"", "]", "=", "self", ".", "eval_params", ".", "labels_to_evaluate", "\n", "self", ".", "results", "[", "\"eval_params\"", "]", "[", "\"min_iou_to_match\"", "]", "=", "self", ".", "eval_params", ".", "min_iou_to_match", "\n", "self", ".", "results", "[", "\"eval_params\"", "]", "[", "\"max_depth\"", "]", "=", "self", ".", "eval_params", ".", "max_depth", "\n", "self", ".", "results", "[", "\"eval_params\"", "]", "[", "\"step_size\"", "]", "=", "self", ".", "eval_params", ".", "step_size", "\n", "self", ".", "results", "[", "\"eval_params\"", "]", "[", "\"matching_method\"", "]", "=", "modal_amodal_modifier", "\n", "\n", "# calculate detection scores and add them to results", "\n", "self", ".", "results", "[", "\"Detection_Score\"", "]", "=", "OrderedDict", "(", ")", "\n", "logger", ".", "info", "(", "\"========================\"", ")", "\n", "logger", ".", "info", "(", "\"======= Results ========\"", ")", "\n", "logger", ".", "info", "(", "\"========================\"", ")", "\n", "\n", "# calculate detection store for each class", "\n", "for", "label", "in", "self", ".", "eval_params", ".", "labels_to_evaluate", ":", "\n", "            ", "vals", "=", "{", "p", ":", "self", ".", "results", "[", "p", "]", "[", "label", "]", "[", "\"auc\"", "]", "for", "p", "in", "parameters", "}", "\n", "det_score", "=", "vals", "[", "\"AP\"", "]", "*", "(", "vals", "[", "\"Center_Dist\"", "]", "+", "vals", "[", "\"Size_Similarity\"", "]", "+", "\n", "vals", "[", "\"OS_Yaw\"", "]", "+", "vals", "[", "\"OS_Pitch_Roll\"", "]", ")", "/", "4.", "\n", "self", ".", "results", "[", "\"Detection_Score\"", "]", "[", "label", "]", "=", "det_score", "\n", "\n", "logger", ".", "info", "(", "label", ")", "\n", "logger", ".", "info", "(", "\" -> 2D AP {:<6}                : {:8.4f}\"", ".", "format", "(", "modal_amodal_modifier", ",", "vals", "[", "\"AP\"", "]", "*", "100", ")", ")", "\n", "logger", ".", "info", "(", "\" -> BEV Center Distance (DDTP)  : {:8.4f}\"", ".", "format", "(", "vals", "[", "\"Center_Dist\"", "]", "*", "100", ")", ")", "\n", "logger", ".", "info", "(", "\" -> Yaw Similarity (DDTP)       : {:8.4f}\"", ".", "format", "(", "vals", "[", "\"OS_Yaw\"", "]", "*", "100", ")", ")", "\n", "logger", ".", "info", "(", "\" -> Pitch/Roll Similarity (DDTP): {:8.4f}\"", ".", "format", "(", "vals", "[", "\"OS_Pitch_Roll\"", "]", "*", "100", ")", ")", "\n", "logger", ".", "info", "(", "\" -> Size Similarity (DDTP)      : {:8.4f}\"", ".", "format", "(", "vals", "[", "\"Size_Similarity\"", "]", "*", "100", ")", ")", "\n", "logger", ".", "info", "(", "\" -> Detection Score             : {:8.4f}\"", ".", "format", "(", "det_score", "*", "100", ")", ")", "\n", "\n", "", "self", ".", "results", "[", "\"mDetection_Score\"", "]", "=", "np", ".", "mean", "(", "\n", "[", "x", "for", "cat", ",", "x", "in", "self", ".", "results", "[", "\"Detection_Score\"", "]", ".", "items", "(", ")", "if", "cat", "in", "accept_cats", "]", ")", "\n", "logger", ".", "info", "(", "\"Mean Detection Score: {:8.4f}\"", ".", "format", "(", "self", ".", "results", "[", "\"mDetection_Score\"", "]", "*", "100", ")", ")", "\n", "\n", "# add mean evaluation results", "\n", "for", "parameter_name", "in", "parameters", ":", "\n", "            ", "self", ".", "results", "[", "\"m\"", "+", "parameter_name", "]", "=", "np", ".", "mean", "(", "\n", "[", "x", "[", "\"auc\"", "]", "for", "cat", ",", "x", "in", "self", ".", "results", "[", "parameter_name", "]", ".", "items", "(", ")", "if", "cat", "in", "accept_cats", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalObjectDetection3d.Box3dEvaluator._calculateAp": [[851, 1093], ["collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "score_data.items", "collections.OrderedDict", "collections.OrderedDict", "sorted", "map", "numpy.asarray", "numpy.asarray", "range", "numpy.sum", "float", "img_base_stats[].items", "img_base_stats[].items", "img_base_stats[].items", "recalls_.append", "precisions_.append", "zip", "zip", "numpy.maximum", "float", "float", "collections.OrderedDict", "collections.OrderedDict", "len", "len", "len", "len", "len", "len", "collections.OrderedDict", "len", "numpy.where", "sorted", "map", "numpy.asarray", "numpy.asarray", "range", "numpy.sum", "float", "[].append", "[].append", "[].append", "float", "float", "[].keys", "recalls_.append", "precisions_.append", "len", "len", "zip", "zip", "numpy.maximum", "float", "float", "int", "int", "int", "len", "numpy.where", "float", "float"], "methods", ["None"], ["", "", "def", "_calculateAp", "(", "self", ")", ":", "\n", "# type: (...) -> None", "\n", "        ", "\"\"\"Internal method that calculates Average Precision (AP) values for the whole dataset.\"\"\"", "\n", "\n", "for", "s", "in", "self", ".", "_conf_thresholds", ":", "\n", "            ", "score_data", "=", "self", ".", "_stats", "[", "s", "]", "[", "\"data\"", "]", "\n", "\n", "# dicts containing TP, FP and FN per depth per class", "\n", "tp_per_depth", "=", "{", "x", ":", "{", "d", ":", "[", "]", "for", "d", "in", "self", ".", "_depth_bins", "}", "for", "x", "in", "self", ".", "eval_params", ".", "labels_to_evaluate", "}", "\n", "fp_per_depth", "=", "{", "x", ":", "{", "d", ":", "[", "]", "for", "d", "in", "self", ".", "_depth_bins", "}", "for", "x", "in", "self", ".", "eval_params", ".", "labels_to_evaluate", "}", "\n", "fn_per_depth", "=", "{", "x", ":", "{", "d", ":", "[", "]", "for", "d", "in", "self", ".", "_depth_bins", "}", "for", "x", "in", "self", ".", "eval_params", ".", "labels_to_evaluate", "}", "\n", "\n", "# dicts containing precision and recall and AP per depth per class", "\n", "precision_per_depth", "=", "{", "x", ":", "{", "}", "for", "x", "in", "self", ".", "eval_params", ".", "labels_to_evaluate", "}", "\n", "recall_per_depth", "=", "{", "x", ":", "{", "}", "for", "x", "in", "self", ".", "eval_params", ".", "labels_to_evaluate", "}", "\n", "auc_per_depth", "=", "{", "x", ":", "{", "}", "for", "x", "in", "self", ".", "eval_params", ".", "labels_to_evaluate", "}", "\n", "\n", "# dicts containing overall TP, FP and FN per class", "\n", "tp", "=", "{", "x", ":", "0", "for", "x", "in", "self", ".", "eval_params", ".", "labels_to_evaluate", "}", "\n", "fp", "=", "{", "x", ":", "0", "for", "x", "in", "self", ".", "eval_params", ".", "labels_to_evaluate", "}", "\n", "fn", "=", "{", "x", ":", "0", "for", "x", "in", "self", ".", "eval_params", ".", "labels_to_evaluate", "}", "\n", "\n", "# dicts containing overall precision, recall and AP per class", "\n", "precision", "=", "{", "x", ":", "0", "for", "x", "in", "self", ".", "eval_params", ".", "labels_to_evaluate", "}", "\n", "recall", "=", "{", "x", ":", "0", "for", "x", "in", "self", ".", "eval_params", ".", "labels_to_evaluate", "}", "\n", "auc", "=", "{", "x", ":", "0", "for", "x", "in", "self", ".", "eval_params", ".", "labels_to_evaluate", "}", "\n", "\n", "# get the statistics for each image", "\n", "for", "img_base", ",", "img_base_stats", "in", "score_data", ".", "items", "(", ")", ":", "\n", "                ", "gt_depths", "=", "[", "x", ".", "depth", "for", "x", "in", "self", ".", "gts", "[", "img_base", "]", "[", "\"objects\"", "]", "]", "\n", "pred_depths", "=", "[", "x", ".", "depth", "for", "x", "in", "self", ".", "preds", "[", "img_base", "]", "[", "\"objects\"", "]", "]", "\n", "\n", "for", "label", ",", "idxs", "in", "img_base_stats", "[", "\"tp_idx_gt\"", "]", ".", "items", "(", ")", ":", "\n", "                    ", "tp", "[", "label", "]", "+=", "len", "(", "idxs", ")", "\n", "\n", "for", "idx", "in", "idxs", ":", "\n", "                        ", "tp_depth", "=", "gt_depths", "[", "idx", "]", "\n", "if", "tp_depth", ">=", "self", ".", "eval_params", ".", "max_depth", ":", "\n", "                            ", "continue", "\n", "\n", "", "tp_depth", "=", "int", "(", "tp_depth", "/", "self", ".", "eval_params", ".", "step_size", ")", "*", "self", ".", "eval_params", ".", "step_size", "\n", "\n", "tp_per_depth", "[", "label", "]", "[", "tp_depth", "]", ".", "append", "(", "idx", ")", "\n", "\n", "", "", "for", "label", ",", "idxs", "in", "img_base_stats", "[", "\"fp_idx_pred\"", "]", ".", "items", "(", ")", ":", "\n", "                    ", "fp", "[", "label", "]", "+=", "len", "(", "idxs", ")", "\n", "\n", "for", "idx", "in", "idxs", ":", "\n", "                        ", "fp_depth", "=", "pred_depths", "[", "idx", "]", "\n", "if", "fp_depth", ">=", "self", ".", "eval_params", ".", "max_depth", ":", "\n", "                            ", "continue", "\n", "\n", "", "fp_depth", "=", "int", "(", "fp_depth", "/", "self", ".", "eval_params", ".", "step_size", ")", "*", "self", ".", "eval_params", ".", "step_size", "\n", "\n", "fp_per_depth", "[", "label", "]", "[", "fp_depth", "]", ".", "append", "(", "idx", ")", "\n", "\n", "", "", "for", "label", ",", "idxs", "in", "img_base_stats", "[", "\"fn_idx_gt\"", "]", ".", "items", "(", ")", ":", "\n", "                    ", "fn", "[", "label", "]", "+=", "len", "(", "idxs", ")", "\n", "\n", "for", "idx", "in", "idxs", ":", "\n", "                        ", "fn_depth", "=", "gt_depths", "[", "idx", "]", "\n", "if", "fn_depth", ">=", "self", ".", "eval_params", ".", "max_depth", ":", "\n", "                            ", "continue", "\n", "\n", "", "fn_depth", "=", "int", "(", "fn_depth", "/", "self", ".", "eval_params", ".", "step_size", ")", "*", "self", ".", "eval_params", ".", "step_size", "\n", "\n", "fn_per_depth", "[", "label", "]", "[", "fn_depth", "]", ".", "append", "(", "idx", ")", "\n", "\n", "# calculate per depth precision and recall per class", "\n", "", "", "", "for", "label", "in", "self", ".", "eval_params", ".", "labels_to_evaluate", ":", "\n", "                ", "for", "i", "in", "self", ".", "_depth_bins", ":", "\n", "                    ", "tp_at_depth", "=", "len", "(", "tp_per_depth", "[", "label", "]", "[", "i", "]", ")", "\n", "fp_at_depth", "=", "len", "(", "fp_per_depth", "[", "label", "]", "[", "i", "]", ")", "\n", "accum_fn", "=", "len", "(", "fn_per_depth", "[", "label", "]", "[", "i", "]", ")", "\n", "\n", "if", "tp_at_depth", "==", "0", "and", "accum_fn", "==", "0", ":", "\n", "                        ", "precision_per_depth", "[", "label", "]", "[", "i", "]", "=", "-", "1", "\n", "recall_per_depth", "[", "label", "]", "[", "i", "]", "=", "-", "1", "\n", "", "elif", "tp_at_depth", "==", "0", ":", "\n", "                        ", "precision_per_depth", "[", "label", "]", "[", "i", "]", "=", "0", "\n", "recall_per_depth", "[", "label", "]", "[", "i", "]", "=", "0", "\n", "", "else", ":", "\n", "                        ", "precision_per_depth", "[", "label", "]", "[", "i", "]", "=", "tp_at_depth", "/", "float", "(", "tp_at_depth", "+", "fp_at_depth", ")", "\n", "recall_per_depth", "[", "label", "]", "[", "i", "]", "=", "tp_at_depth", "/", "float", "(", "tp_at_depth", "+", "accum_fn", ")", "\n", "\n", "", "auc_per_depth", "[", "label", "]", "[", "i", "]", "=", "precision_per_depth", "[", "label", "]", "[", "i", "]", "*", "recall_per_depth", "[", "label", "]", "[", "i", "]", "\n", "\n", "", "if", "tp", "[", "label", "]", "==", "0", ":", "\n", "                    ", "precision", "[", "label", "]", "=", "0", "\n", "recall", "[", "label", "]", "=", "0", "\n", "", "else", ":", "\n", "                    ", "precision", "[", "label", "]", "=", "tp", "[", "label", "]", "/", "float", "(", "tp", "[", "label", "]", "+", "fp", "[", "label", "]", ")", "\n", "recall", "[", "label", "]", "=", "tp", "[", "label", "]", "/", "float", "(", "tp", "[", "label", "]", "+", "fn", "[", "label", "]", ")", "\n", "\n", "", "auc", "[", "label", "]", "=", "precision", "[", "label", "]", "*", "recall", "[", "label", "]", "\n", "\n", "# write to stats", "\n", "", "self", ".", "_stats", "[", "s", "]", "[", "\"pr_data\"", "]", "=", "{", "\n", "\"tp\"", ":", "tp", ",", "\n", "\"fp\"", ":", "tp", ",", "\n", "\"fn\"", ":", "fn", ",", "\n", "\"precision\"", ":", "precision", ",", "\n", "\"recall\"", ":", "recall", ",", "\n", "\"auc\"", ":", "auc", ",", "\n", "\"tp_per_depth\"", ":", "tp_per_depth", ",", "\n", "\"fp_per_depth\"", ":", "fp_per_depth", ",", "\n", "\"fn_per_depth\"", ":", "fn_per_depth", ",", "\n", "\"precision_per_depth\"", ":", "precision_per_depth", ",", "\n", "\"recall_per_depth\"", ":", "recall_per_depth", ",", "\n", "\"auc_per_depth\"", ":", "auc_per_depth", ",", "\n", "}", "\n", "\n", "# dict containing data for AP and mAP", "\n", "", "ap", "=", "OrderedDict", "(", ")", "\n", "for", "x", "in", "self", ".", "eval_params", ".", "labels_to_evaluate", ":", "\n", "            ", "ap", "[", "x", "]", "=", "OrderedDict", "(", ")", "\n", "ap", "[", "x", "]", "[", "\"data\"", "]", "=", "OrderedDict", "(", ")", "\n", "ap", "[", "x", "]", "[", "\"auc\"", "]", "=", "0.", "\n", "\n", "", "ap_per_depth", "=", "OrderedDict", "(", "\n", "(", "x", ",", "OrderedDict", "(", ")", ")", "for", "x", "in", "self", ".", "eval_params", ".", "labels_to_evaluate", "\n", ")", "\n", "\n", "# dict containing the working point for DDTP metrics", "\n", "working_confidence", "=", "OrderedDict", "(", "(", "x", ",", "0", ")", "for", "x", "in", "self", ".", "eval_params", ".", "labels_to_evaluate", ")", "\n", "\n", "# calculate standard AP per class", "\n", "for", "label", "in", "self", ".", "eval_params", ".", "labels_to_evaluate", ":", "\n", "# best_auc and best_score are used for determining working point", "\n", "            ", "best_auc", "=", "0.", "\n", "best_score", "=", "0.", "\n", "\n", "recalls_", "=", "[", "]", "\n", "precisions_", "=", "[", "]", "\n", "for", "s", "in", "self", ".", "_conf_thresholds", ":", "\n", "                ", "current_auc_for_score", "=", "self", ".", "_stats", "[", "s", "]", "[", "\"pr_data\"", "]", "[", "\"auc\"", "]", "[", "label", "]", "\n", "if", "current_auc_for_score", ">", "best_auc", ":", "\n", "                    ", "best_auc", "=", "current_auc_for_score", "\n", "best_score", "=", "s", "\n", "\n", "", "recalls_", ".", "append", "(", "self", ".", "_stats", "[", "s", "]", "[", "\"pr_data\"", "]", "[", "\"recall\"", "]", "[", "label", "]", ")", "\n", "precisions_", ".", "append", "(", "self", ".", "_stats", "[", "s", "]", "[", "\"pr_data\"", "]", "[", "\"precision\"", "]", "[", "label", "]", ")", "\n", "\n", "# sort for an ascending recalls list", "\n", "", "sorted_pairs", "=", "sorted", "(", "zip", "(", "recalls_", ",", "precisions_", ")", ",", "key", "=", "lambda", "pair", ":", "pair", "[", "0", "]", ")", "\n", "recalls", ",", "precisions", "=", "map", "(", "list", ",", "zip", "(", "*", "sorted_pairs", ")", ")", "\n", "\n", "# convert the data to numpy tensor for easier processing and add leading and trailing zeros/ones", "\n", "precisions", "=", "np", ".", "asarray", "(", "[", "0", "]", "+", "precisions", "+", "[", "0", "]", ")", "\n", "recalls", "=", "np", ".", "asarray", "(", "[", "0", "]", "+", "recalls", "+", "[", "1", "]", ")", "\n", "\n", "# precision values should be decreasing only", "\n", "# p(r) = max{r' > r} p(r')", "\n", "for", "i", "in", "range", "(", "len", "(", "precisions", ")", "-", "2", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "                ", "precisions", "[", "i", "]", "=", "np", ".", "maximum", "(", "precisions", "[", "i", "]", ",", "precisions", "[", "i", "+", "1", "]", ")", "\n", "\n", "# gather indices of distinct recall values", "\n", "", "recall_idx", "=", "np", ".", "where", "(", "recalls", "[", "1", ":", "]", "!=", "recalls", "[", ":", "-", "1", "]", ")", "[", "0", "]", "+", "1", "\n", "\n", "# calculate ap", "\n", "class_ap", "=", "np", ".", "sum", "(", "\n", "(", "recalls", "[", "recall_idx", "]", "-", "recalls", "[", "recall_idx", "-", "1", "]", ")", "*", "precisions", "[", "recall_idx", "]", ")", "\n", "\n", "ap", "[", "label", "]", "[", "\"auc\"", "]", "=", "float", "(", "class_ap", ")", "\n", "ap", "[", "label", "]", "[", "\"data\"", "]", "[", "\"recall\"", "]", "=", "[", "float", "(", "x", ")", "for", "x", "in", "recalls_", "]", "\n", "ap", "[", "label", "]", "[", "\"data\"", "]", "[", "\"precision\"", "]", "=", "[", "float", "(", "x", ")", "for", "x", "in", "precisions_", "]", "\n", "\n", "# store best confidence value or use specified default", "\n", "if", "(", "self", ".", "eval_params", ".", "cw", "==", "-", "1.0", ")", ":", "\n", "                ", "working_confidence", "[", "label", "]", "=", "best_score", "\n", "", "else", ":", "\n", "                ", "working_confidence", "[", "label", "]", "=", "self", ".", "eval_params", ".", "cw", "\n", "\n", "# calculate depth dependent mAP", "\n", "", "", "for", "label", "in", "self", ".", "eval_params", ".", "labels_to_evaluate", ":", "\n", "            ", "for", "d", "in", "self", ".", "_depth_bins", ":", "\n", "                ", "tmp_dict", "=", "OrderedDict", "(", ")", "\n", "tmp_dict", "[", "\"data\"", "]", "=", "OrderedDict", "(", ")", "\n", "tmp_dict", "[", "\"auc\"", "]", "=", "0.", "\n", "\n", "recalls_", "=", "[", "]", "\n", "precisions_", "=", "[", "]", "\n", "\n", "valid_depth", "=", "True", "\n", "for", "s", "in", "self", ".", "_conf_thresholds", ":", "\n", "                    ", "if", "d", "not", "in", "self", ".", "_stats", "[", "s", "]", "[", "\"pr_data\"", "]", "[", "\"recall_per_depth\"", "]", "[", "label", "]", ".", "keys", "(", ")", ":", "\n", "                        ", "valid_depth", "=", "False", "\n", "break", "\n", "\n", "", "tmp_recall", "=", "self", ".", "_stats", "[", "s", "]", "[", "\"pr_data\"", "]", "[", "\"recall_per_depth\"", "]", "[", "label", "]", "[", "d", "]", "\n", "tmp_precision", "=", "self", ".", "_stats", "[", "s", "]", "[", "\"pr_data\"", "]", "[", "\"precision_per_depth\"", "]", "[", "label", "]", "[", "d", "]", "\n", "\n", "if", "tmp_recall", ">=", "0", "and", "tmp_precision", ">=", "0", ":", "\n", "                        ", "recalls_", ".", "append", "(", "tmp_recall", ")", "\n", "precisions_", ".", "append", "(", "tmp_precision", ")", "\n", "\n", "", "", "if", "len", "(", "precisions_", ")", ">", "0", "and", "len", "(", "recalls_", ")", ">", "0", ":", "\n", "                    ", "if", "not", "valid_depth", ":", "\n", "                        ", "continue", "\n", "\n", "# sort for an ascending recalls list", "\n", "", "sorted_pairs", "=", "sorted", "(", "\n", "zip", "(", "recalls_", ",", "precisions_", ")", ",", "key", "=", "lambda", "pair", ":", "pair", "[", "0", "]", ")", "\n", "recalls", ",", "precisions", "=", "map", "(", "list", ",", "zip", "(", "*", "sorted_pairs", ")", ")", "\n", "\n", "# convert the data to numpy tensor for easier processing and add leading and trailing zeros/ones", "\n", "precisions", "=", "np", ".", "asarray", "(", "[", "0", "]", "+", "precisions", "+", "[", "0", "]", ")", "\n", "recalls", "=", "np", ".", "asarray", "(", "[", "0", "]", "+", "recalls", "+", "[", "1", "]", ")", "\n", "\n", "# precision values should be decreasing only", "\n", "# p(r) = max{r' > r} p(r')", "\n", "for", "i", "in", "range", "(", "len", "(", "precisions", ")", "-", "2", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "                        ", "precisions", "[", "i", "]", "=", "np", ".", "maximum", "(", "precisions", "[", "i", "]", ",", "precisions", "[", "i", "+", "1", "]", ")", "\n", "\n", "# gather indices of distinct recall values", "\n", "", "recall_idx", "=", "np", ".", "where", "(", "recalls", "[", "1", ":", "]", "!=", "recalls", "[", ":", "-", "1", "]", ")", "[", "0", "]", "+", "1", "\n", "\n", "# calculate ap", "\n", "class_ap", "=", "np", ".", "sum", "(", "\n", "(", "recalls", "[", "recall_idx", "]", "-", "recalls", "[", "recall_idx", "-", "1", "]", ")", "*", "precisions", "[", "recall_idx", "]", ")", "\n", "\n", "tmp_dict", "[", "\"auc\"", "]", "=", "float", "(", "class_ap", ")", "\n", "tmp_dict", "[", "\"data\"", "]", "[", "\"recall\"", "]", "=", "[", "float", "(", "x", ")", "for", "x", "in", "recalls_", "]", "\n", "tmp_dict", "[", "\"data\"", "]", "[", "\"precision\"", "]", "=", "[", "\n", "float", "(", "x", ")", "for", "x", "in", "precisions_", "]", "\n", "\n", "ap_per_depth", "[", "label", "]", "[", "d", "]", "=", "tmp_dict", "\n", "", "else", ":", "# no valid detection until this depth", "\n", "                    ", "tmp_dict", "[", "\"auc\"", "]", "=", "-", "1.", "\n", "tmp_dict", "[", "\"data\"", "]", "[", "\"recall\"", "]", "=", "[", "]", "\n", "tmp_dict", "[", "\"data\"", "]", "[", "\"precision\"", "]", "=", "[", "]", "\n", "\n", "# dump mAP and working points to internal stats", "\n", "", "", "", "self", ".", "_stats", "[", "\"min_iou\"", "]", "=", "self", ".", "eval_params", ".", "min_iou_to_match", "\n", "self", ".", "_stats", "[", "\"working_confidence\"", "]", "=", "working_confidence", "\n", "self", ".", "results", "[", "\"AP\"", "]", "=", "ap", "\n", "self", ".", "results", "[", "\"AP_per_depth\"", "]", "=", "ap_per_depth", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalObjectDetection3d.evaluate3dObjectDetection": [[1097, 1147], ["evalObjectDetection3d.Box3dEvaluator", "evalObjectDetection3d.Box3dEvaluator.checkCw", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "evalObjectDetection3d.Box3dEvaluator.loadGT", "evalObjectDetection3d.Box3dEvaluator.loadPredictions", "evalObjectDetection3d.Box3dEvaluator.evaluate", "evalObjectDetection3d.Box3dEvaluator.saveResults", "logger.info", "logger.info", "plot_data"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalObjectDetection3d.Box3dEvaluator.checkCw", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalObjectDetection3d.Box3dEvaluator.loadGT", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalObjectDetection3d.Box3dEvaluator.loadPredictions", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalObjectDetection3d.Box3dEvaluator.evaluate", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalObjectDetection3d.Box3dEvaluator.saveResults", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.plot3dResults.plot_data"], ["", "", "def", "evaluate3dObjectDetection", "(", "\n", "gt_folder", ",", "# type: str", "\n", "pred_folder", ",", "# type: str", "\n", "result_folder", ",", "# type: str", "\n", "eval_params", ",", "# type: EvaluationParameters", "\n", "plot", "=", "True", "# type: bool", "\n", ")", ":", "\n", "# type: (...) -> None", "\n", "    ", "\"\"\"Performs the 3D object detection evaluation.\n\n    Args:\n        gt_folder (str): directory of the GT annotation files\n        pred_folder (str): directory of the prediction files\n        result_folder (str): directory in which the result files are saved\n        eval_params (EvaluationParameters): evaluation parameters\n        plot (bool): plot the evaluation results\n    \"\"\"", "\n", "\n", "# initialize the evaluator", "\n", "boxEvaluator", "=", "Box3dEvaluator", "(", "eval_params", ")", "\n", "boxEvaluator", ".", "checkCw", "(", ")", "\n", "\n", "logger", ".", "info", "(", "\"Use the following options\"", ")", "\n", "logger", ".", "info", "(", "\" -> GT folder    : {}\"", ".", "format", "(", "gt_folder", ")", ")", "\n", "logger", ".", "info", "(", "\" -> Pred folder  : {}\"", ".", "format", "(", "pred_folder", ")", ")", "\n", "logger", ".", "info", "(", "\" -> Labels       : {}\"", ".", "format", "(", "\", \"", ".", "join", "(", "eval_params", ".", "labels_to_evaluate", ")", ")", ")", "\n", "logger", ".", "info", "(", "\" -> Min IoU:     : {:.2f}\"", ".", "format", "(", "eval_params", ".", "min_iou_to_match", ")", ")", "\n", "logger", ".", "info", "(", "\" -> Max depth [m]: {}\"", ".", "format", "(", "eval_params", ".", "max_depth", ")", ")", "\n", "logger", ".", "info", "(", "\" -> Step size [m]: {}\"", ".", "format", "(", "eval_params", ".", "step_size", ")", ")", "\n", "if", "boxEvaluator", ".", "eval_params", ".", "cw", "==", "-", "1.0", ":", "\n", "        ", "logger", ".", "info", "(", "\" -> cw           : -- automatically determined --\"", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "\" -> cw           : {:.2f}\"", ".", "format", "(", "boxEvaluator", ".", "eval_params", ".", "cw", ")", ")", "\n", "\n", "# load GT and predictions", "\n", "", "boxEvaluator", ".", "loadGT", "(", "gt_folder", ")", "\n", "boxEvaluator", ".", "loadPredictions", "(", "pred_folder", ")", "\n", "\n", "# perform evaluation", "\n", "boxEvaluator", ".", "evaluate", "(", ")", "\n", "\n", "# save results and plot them", "\n", "boxEvaluator", ".", "saveResults", "(", "result_folder", ")", "\n", "\n", "if", "plot", ":", "\n", "# lazy import as matplotlib does not run properly on all python version for all OSs", "\n", "        ", "from", "cityscapesscripts", ".", "evaluation", ".", "plot3dResults", "import", "plot_data", "\n", "plot_data", "(", "boxEvaluator", ".", "results", ")", "\n", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalObjectDetection3d.main": [[1149, 1275], ["logger.info", "logger.info", "logger.info", "os.environ.get", "os.path.join", "os.environ.get", "os.path.join", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "cityscapesscripts.evaluation.objectDetectionHelpers.EvaluationParameters", "evalObjectDetection3d.evaluate3dObjectDetection", "logger.info", "logger.info", "logger.info", "os.path.join", "os.path.join", "os.path.exists", "logger.error", "argparse.ArgumentError", "os.path.exists", "logger.error", "argparse.ArgumentError", "os.path.exists", "os.makedirs", "os.path.dirname", "int", "os.path.realpath"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalObjectDetection3d.evaluate3dObjectDetection"], ["", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"main method\"\"\"", "\n", "logger", ".", "info", "(", "\"========================\"", ")", "\n", "logger", ".", "info", "(", "\"=== Start evaluation ===\"", ")", "\n", "logger", ".", "info", "(", "\"========================\"", ")", "\n", "\n", "# get cityscapes paths", "\n", "cityscapesPath", "=", "os", ".", "environ", ".", "get", "(", "\n", "'CITYSCAPES_DATASET'", ",", "os", ".", "path", ".", "join", "(", "\n", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", ",", "'..'", ",", "'..'", ")", "\n", ")", "\n", "gtFolder", "=", "os", ".", "path", ".", "join", "(", "cityscapesPath", ",", "\"gtBbox3d\"", ",", "\"val\"", ")", "\n", "\n", "predictionPath", "=", "os", ".", "environ", ".", "get", "(", "\n", "'CITYSCAPES_RESULTS'", ",", "\n", "os", ".", "path", ".", "join", "(", "cityscapesPath", ",", "\"results\"", ")", "\n", ")", "\n", "predictionFolder", "=", "os", ".", "path", ".", "join", "(", "predictionPath", ",", "\"predBbox3d\"", ")", "\n", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "# setup location", "\n", "gt_folder_arg", "=", "parser", ".", "add_argument", "(", "\"-gt\"", ",", "\"--gt-folder\"", ",", "\n", "dest", "=", "\"gtFolder\"", ",", "\n", "help", "=", "\"path to folder that contains ground truth *.json files. If the \"", "\n", "\"argument is not provided this script will look for the *.json files in \"", "\n", "\"the 'gtBbox3d/val' folder in CITYSCAPES_DATASET.\"", ",", "\n", "default", "=", "gtFolder", ",", "\n", "type", "=", "str", ")", "\n", "\n", "pred_folder_arg", "=", "parser", ".", "add_argument", "(", "\"-pred\"", ",", "\"--prediction-folder\"", ",", "\n", "dest", "=", "\"predictionFolder\"", ",", "\n", "help", "=", "\"path to folder that contains ground truth * .json files. If the \"", "\n", "\"argument is not provided this script will look for the * .json files in \"", "\n", "\"the 'predBbox3d' folder in CITYSCAPES_RESULTS.\"", ",", "\n", "default", "=", "predictionFolder", ",", "\n", "type", "=", "str", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--results-folder\"", ",", "\n", "dest", "=", "\"resultsFolder\"", ",", "\n", "help", "=", "\"File to store evaluation results. Default: prediction folder\"", ",", "\n", "default", "=", "\"\"", ",", "\n", "type", "=", "str", ")", "\n", "\n", "# setup evaluation parameters", "\n", "evalLabels", "=", "[", "\"car\"", ",", "\"truck\"", ",", "\"bus\"", ",", "\"train\"", ",", "\"motorcycle\"", ",", "\"bicycle\"", "]", "\n", "parser", ".", "add_argument", "(", "\"--labels\"", ",", "\n", "dest", "=", "\"evalLabels\"", ",", "\n", "help", "=", "\"Labels to be evaluated separated with a space. Default: {}\"", ".", "format", "(", "\" \"", ".", "join", "(", "evalLabels", ")", ")", ",", "\n", "default", "=", "evalLabels", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "type", "=", "str", ")", "\n", "minIou", "=", "0.7", "\n", "parser", ".", "add_argument", "(", "\"--min-iou\"", ",", "\n", "dest", "=", "\"minIou\"", ",", "\n", "help", "=", "\"Minimum IoU required to accept a detection as TP. Default: {}\"", ".", "format", "(", "minIou", ")", ",", "\n", "default", "=", "minIou", ",", "\n", "type", "=", "float", ")", "\n", "maxDepth", "=", "100", "\n", "parser", ".", "add_argument", "(", "\"--max-depth\"", ",", "\n", "dest", "=", "\"maxDepth\"", ",", "\n", "help", "=", "\"Maximum depth for DDTP metrics. Default: {}\"", ".", "format", "(", "maxDepth", ")", ",", "\n", "default", "=", "maxDepth", ",", "\n", "type", "=", "int", ")", "\n", "stepSize", "=", "5", "\n", "parser", ".", "add_argument", "(", "\"--step-size\"", ",", "\n", "dest", "=", "\"stepSize\"", ",", "\n", "help", "=", "\"Step size for DDTP metrics. Default: {}\"", ".", "format", "(", "stepSize", ")", ",", "\n", "default", "=", "stepSize", ",", "\n", "type", "=", "int", ")", "\n", "\n", "cw", "=", "-", "1.", "\n", "parser", ".", "add_argument", "(", "\"--cw\"", ",", "\n", "dest", "=", "\"cw\"", ",", "\n", "help", "=", "\"Working confidence. If not set, it will be determined automatically during evaluation\"", ",", "\n", "default", "=", "cw", ",", "\n", "type", "=", "float", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--modal\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Use modal 2D boxes for matching\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--noplot\"", ",", "\n", "dest", "=", "\"plot_results\"", ",", "\n", "action", "=", "\"store_false\"", ",", "\n", "help", "=", "\"Don't plot the graphical results\"", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "gtFolder", ")", ":", "\n", "        ", "msg", "=", "\"Could not find gt folder '{}'. Please run the script with '--help'\"", ".", "format", "(", "args", ".", "gtFolder", ")", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "raise", "argparse", ".", "ArgumentError", "(", "gt_folder_arg", ",", "msg", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "predictionFolder", ")", ":", "\n", "        ", "msg", "=", "\"Could not find prediction folder '{}'. Please run the script with '--help'\"", ".", "format", "(", "args", ".", "predictionFolder", ")", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "raise", "argparse", ".", "ArgumentError", "(", "pred_folder_arg", ",", "msg", ")", "\n", "\n", "", "resultsFolder", "=", "args", ".", "resultsFolder", "\n", "if", "not", "resultsFolder", ":", "\n", "        ", "resultsFolder", "=", "args", ".", "predictionFolder", "\n", "# keep python 2 compatibility", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "resultsFolder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "resultsFolder", ")", "\n", "\n", "# setup the evaluation parameters", "\n", "", "eval_params", "=", "EvaluationParameters", "(", "\n", "args", ".", "evalLabels", ",", "\n", "min_iou_to_match", "=", "args", ".", "minIou", ",", "\n", "max_depth", "=", "args", ".", "maxDepth", ",", "\n", "step_size", "=", "args", ".", "stepSize", ",", "\n", "matching_method", "=", "int", "(", "args", ".", "modal", ")", ",", "\n", "cw", "=", "args", ".", "cw", "\n", ")", "\n", "\n", "evaluate3dObjectDetection", "(", "\n", "args", ".", "gtFolder", ",", "\n", "args", ".", "predictionFolder", ",", "\n", "resultsFolder", ",", "\n", "eval_params", ",", "\n", "plot", "=", "args", ".", "plot_results", "\n", ")", "\n", "\n", "logger", ".", "info", "(", "\"========================\"", ")", "\n", "logger", ".", "info", "(", "\"=== Stop evaluation ====\"", ")", "\n", "logger", ".", "info", "(", "\"========================\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPanopticSemanticLabeling.PQStatCat.__init__": [[68, 73], ["None"], "methods", ["None"], ["        ", "def", "__init__", "(", "self", ")", ":", "\n", "            ", "self", ".", "iou", "=", "0.0", "\n", "self", ".", "tp", "=", "0", "\n", "self", ".", "fp", "=", "0", "\n", "self", ".", "fn", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPanopticSemanticLabeling.PQStatCat.__iadd__": [[74, 80], ["None"], "methods", ["None"], ["", "def", "__iadd__", "(", "self", ",", "pq_stat_cat", ")", ":", "\n", "            ", "self", ".", "iou", "+=", "pq_stat_cat", ".", "iou", "\n", "self", ".", "tp", "+=", "pq_stat_cat", ".", "tp", "\n", "self", ".", "fp", "+=", "pq_stat_cat", ".", "fp", "\n", "self", ".", "fn", "+=", "pq_stat_cat", ".", "fn", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPanopticSemanticLabeling.PQStat.__init__": [[83, 85], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "pq_per_cat", "=", "defaultdict", "(", "PQStatCat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPanopticSemanticLabeling.PQStat.__getitem__": [[86, 88], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "self", ".", "pq_per_cat", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPanopticSemanticLabeling.PQStat.__iadd__": [[89, 93], ["pq_stat.pq_per_cat.items"], "methods", ["None"], ["", "def", "__iadd__", "(", "self", ",", "pq_stat", ")", ":", "\n", "        ", "for", "label", ",", "pq_stat_cat", "in", "pq_stat", ".", "pq_per_cat", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "pq_per_cat", "[", "label", "]", "+=", "pq_stat_cat", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPanopticSemanticLabeling.PQStat.pq_average": [[94, 119], ["categories.items"], "methods", ["None"], ["", "def", "pq_average", "(", "self", ",", "categories", ",", "isthing", ")", ":", "\n", "        ", "pq", ",", "sq", ",", "rq", ",", "n", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "per_class_results", "=", "{", "}", "\n", "for", "label", ",", "label_info", "in", "categories", ".", "items", "(", ")", ":", "\n", "            ", "if", "isthing", "is", "not", "None", ":", "\n", "                ", "cat_isthing", "=", "label_info", "[", "'isthing'", "]", "==", "1", "\n", "if", "isthing", "!=", "cat_isthing", ":", "\n", "                    ", "continue", "\n", "", "", "iou", "=", "self", ".", "pq_per_cat", "[", "label", "]", ".", "iou", "\n", "tp", "=", "self", ".", "pq_per_cat", "[", "label", "]", ".", "tp", "\n", "fp", "=", "self", ".", "pq_per_cat", "[", "label", "]", ".", "fp", "\n", "fn", "=", "self", ".", "pq_per_cat", "[", "label", "]", ".", "fn", "\n", "if", "tp", "+", "fp", "+", "fn", "==", "0", ":", "\n", "                ", "per_class_results", "[", "label", "]", "=", "{", "'pq'", ":", "0.0", ",", "'sq'", ":", "0.0", ",", "'rq'", ":", "0.0", "}", "\n", "continue", "\n", "", "n", "+=", "1", "\n", "pq_class", "=", "iou", "/", "(", "tp", "+", "0.5", "*", "fp", "+", "0.5", "*", "fn", ")", "\n", "sq_class", "=", "iou", "/", "tp", "if", "tp", "!=", "0", "else", "0", "\n", "rq_class", "=", "tp", "/", "(", "tp", "+", "0.5", "*", "fp", "+", "0.5", "*", "fn", ")", "\n", "per_class_results", "[", "label", "]", "=", "{", "'pq'", ":", "pq_class", ",", "'sq'", ":", "sq_class", ",", "'rq'", ":", "rq_class", "}", "\n", "pq", "+=", "pq_class", "\n", "sq", "+=", "sq_class", "\n", "rq", "+=", "rq_class", "\n", "\n", "", "return", "{", "'pq'", ":", "pq", "/", "n", ",", "'sq'", ":", "sq", "/", "n", ",", "'rq'", ":", "rq", "/", "n", ",", "'n'", ":", "n", "}", ",", "per_class_results", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPanopticSemanticLabeling.get_traceback": [[46, 57], ["functools.wraps", "f", "print", "traceback.print_exc"], "function", ["None"], ["def", "get_traceback", "(", "f", ")", ":", "\n", "    ", "@", "functools", ".", "wraps", "(", "f", ")", "\n", "def", "wrapper", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "f", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "'Caught exception in worker thread:'", ")", "\n", "traceback", ".", "print_exc", "(", ")", "\n", "raise", "e", "\n", "\n", "", "", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPanopticSemanticLabeling.rgb2id": [[59, 65], ["int", "isinstance", "len", "color.astype.astype", "numpy.np.uint64", "numpy.np.uint64"], "function", ["None"], ["", "def", "rgb2id", "(", "color", ")", ":", "\n", "    ", "if", "isinstance", "(", "color", ",", "np", ".", "ndarray", ")", "and", "len", "(", "color", ".", "shape", ")", "==", "3", ":", "\n", "        ", "if", "color", ".", "dtype", "==", "np", ".", "uint8", ":", "\n", "            ", "color", "=", "color", ".", "astype", "(", "np", ".", "int32", ")", "\n", "", "return", "color", "[", ":", ",", ":", ",", "0", "]", "+", "256", "*", "color", "[", ":", ",", ":", ",", "1", "]", "+", "256", "*", "256", "*", "color", "[", ":", ",", ":", ",", "2", "]", "\n", "", "return", "int", "(", "color", "[", "0", "]", "+", "256", "*", "color", "[", "1", "]", "+", "256", "*", "256", "*", "color", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPanopticSemanticLabeling.pq_compute_single_core": [[121, 211], ["evalPanopticSemanticLabeling.PQStat", "print", "numpy.array", "evalPanopticSemanticLabeling.rgb2id", "numpy.array", "evalPanopticSemanticLabeling.rgb2id", "set", "numpy.unique", "zip", "numpy.unique", "zip", "set", "set", "gt_pred_map.items", "gt_segms.items", "pred_segms.items", "print", "PIL.Image.open", "PIL.Image.open", "set.remove", "len", "KeyError", "rgb2id.astype", "gt_pred_map.get", "len", "os.path.join", "os.path.join", "KeyError", "KeyError", "rgb2id.astype", "gt_pred_map.get", "set.add", "set.add", "gt_pred_map.get", "len", "list"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPanopticSemanticLabeling.rgb2id", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPanopticSemanticLabeling.rgb2id", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.comm.FutureResult.get"], ["", "", "@", "get_traceback", "\n", "def", "pq_compute_single_core", "(", "proc_id", ",", "annotation_set", ",", "gt_folder", ",", "pred_folder", ",", "categories", ")", ":", "\n", "    ", "pq_stat", "=", "PQStat", "(", ")", "\n", "\n", "idx", "=", "0", "\n", "for", "gt_ann", ",", "pred_ann", "in", "annotation_set", ":", "\n", "        ", "if", "idx", "%", "30", "==", "0", ":", "\n", "            ", "print", "(", "'Core: {}, {} from {} images processed'", ".", "format", "(", "proc_id", ",", "idx", ",", "len", "(", "annotation_set", ")", ")", ")", "\n", "", "idx", "+=", "1", "\n", "\n", "pan_gt", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "gt_folder", ",", "gt_ann", "[", "'file_name'", "]", ")", ")", ",", "dtype", "=", "np", ".", "uint32", ")", "\n", "pan_gt", "=", "rgb2id", "(", "pan_gt", ")", "\n", "pan_pred", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "pred_folder", ",", "pred_ann", "[", "'file_name'", "]", ")", ")", ",", "dtype", "=", "np", ".", "uint32", ")", "\n", "pan_pred", "=", "rgb2id", "(", "pan_pred", ")", "\n", "\n", "gt_segms", "=", "{", "el", "[", "'id'", "]", ":", "el", "for", "el", "in", "gt_ann", "[", "'segments_info'", "]", "}", "\n", "pred_segms", "=", "{", "el", "[", "'id'", "]", ":", "el", "for", "el", "in", "pred_ann", "[", "'segments_info'", "]", "}", "\n", "\n", "# predicted segments area calculation + prediction sanity checks", "\n", "pred_labels_set", "=", "set", "(", "el", "[", "'id'", "]", "for", "el", "in", "pred_ann", "[", "'segments_info'", "]", ")", "\n", "labels", ",", "labels_cnt", "=", "np", ".", "unique", "(", "pan_pred", ",", "return_counts", "=", "True", ")", "\n", "for", "label", ",", "label_cnt", "in", "zip", "(", "labels", ",", "labels_cnt", ")", ":", "\n", "            ", "if", "label", "not", "in", "pred_segms", ":", "\n", "                ", "if", "label", "==", "VOID", ":", "\n", "                    ", "continue", "\n", "", "raise", "KeyError", "(", "'In the image with ID {} segment with ID {} is presented in PNG and not presented in JSON.'", ".", "format", "(", "gt_ann", "[", "'image_id'", "]", ",", "label", ")", ")", "\n", "", "pred_segms", "[", "label", "]", "[", "'area'", "]", "=", "label_cnt", "\n", "pred_labels_set", ".", "remove", "(", "label", ")", "\n", "if", "pred_segms", "[", "label", "]", "[", "'category_id'", "]", "not", "in", "categories", ":", "\n", "                ", "raise", "KeyError", "(", "'In the image with ID {} segment with ID {} has unknown category_id {}.'", ".", "format", "(", "gt_ann", "[", "'image_id'", "]", ",", "label", ",", "pred_segms", "[", "label", "]", "[", "'category_id'", "]", ")", ")", "\n", "", "", "if", "len", "(", "pred_labels_set", ")", "!=", "0", ":", "\n", "            ", "raise", "KeyError", "(", "'In the image with ID {} the following segment IDs {} are presented in JSON and not presented in PNG.'", ".", "format", "(", "gt_ann", "[", "'image_id'", "]", ",", "list", "(", "pred_labels_set", ")", ")", ")", "\n", "\n", "# confusion matrix calculation", "\n", "", "pan_gt_pred", "=", "pan_gt", ".", "astype", "(", "np", ".", "uint64", ")", "*", "OFFSET", "+", "pan_pred", ".", "astype", "(", "np", ".", "uint64", ")", "\n", "gt_pred_map", "=", "{", "}", "\n", "labels", ",", "labels_cnt", "=", "np", ".", "unique", "(", "pan_gt_pred", ",", "return_counts", "=", "True", ")", "\n", "for", "label", ",", "intersection", "in", "zip", "(", "labels", ",", "labels_cnt", ")", ":", "\n", "            ", "gt_id", "=", "label", "//", "OFFSET", "\n", "pred_id", "=", "label", "%", "OFFSET", "\n", "gt_pred_map", "[", "(", "gt_id", ",", "pred_id", ")", "]", "=", "intersection", "\n", "\n", "# count all matched pairs", "\n", "", "gt_matched", "=", "set", "(", ")", "\n", "pred_matched", "=", "set", "(", ")", "\n", "for", "label_tuple", ",", "intersection", "in", "gt_pred_map", ".", "items", "(", ")", ":", "\n", "            ", "gt_label", ",", "pred_label", "=", "label_tuple", "\n", "if", "gt_label", "not", "in", "gt_segms", ":", "\n", "                ", "continue", "\n", "", "if", "pred_label", "not", "in", "pred_segms", ":", "\n", "                ", "continue", "\n", "", "if", "gt_segms", "[", "gt_label", "]", "[", "'iscrowd'", "]", "==", "1", ":", "\n", "                ", "continue", "\n", "", "if", "gt_segms", "[", "gt_label", "]", "[", "'category_id'", "]", "!=", "pred_segms", "[", "pred_label", "]", "[", "'category_id'", "]", ":", "\n", "                ", "continue", "\n", "\n", "", "union", "=", "pred_segms", "[", "pred_label", "]", "[", "'area'", "]", "+", "gt_segms", "[", "gt_label", "]", "[", "'area'", "]", "-", "intersection", "-", "gt_pred_map", ".", "get", "(", "(", "VOID", ",", "pred_label", ")", ",", "0", ")", "\n", "iou", "=", "intersection", "/", "union", "\n", "if", "iou", ">", "0.5", ":", "\n", "                ", "pq_stat", "[", "gt_segms", "[", "gt_label", "]", "[", "'category_id'", "]", "]", ".", "tp", "+=", "1", "\n", "pq_stat", "[", "gt_segms", "[", "gt_label", "]", "[", "'category_id'", "]", "]", ".", "iou", "+=", "iou", "\n", "gt_matched", ".", "add", "(", "gt_label", ")", "\n", "pred_matched", ".", "add", "(", "pred_label", ")", "\n", "\n", "# count false positives", "\n", "", "", "crowd_labels_dict", "=", "{", "}", "\n", "for", "gt_label", ",", "gt_info", "in", "gt_segms", ".", "items", "(", ")", ":", "\n", "            ", "if", "gt_label", "in", "gt_matched", ":", "\n", "                ", "continue", "\n", "# crowd segments are ignored", "\n", "", "if", "gt_info", "[", "'iscrowd'", "]", "==", "1", ":", "\n", "                ", "crowd_labels_dict", "[", "gt_info", "[", "'category_id'", "]", "]", "=", "gt_label", "\n", "continue", "\n", "", "pq_stat", "[", "gt_info", "[", "'category_id'", "]", "]", ".", "fn", "+=", "1", "\n", "\n", "# count false positives", "\n", "", "for", "pred_label", ",", "pred_info", "in", "pred_segms", ".", "items", "(", ")", ":", "\n", "            ", "if", "pred_label", "in", "pred_matched", ":", "\n", "                ", "continue", "\n", "# intersection of the segment with VOID", "\n", "", "intersection", "=", "gt_pred_map", ".", "get", "(", "(", "VOID", ",", "pred_label", ")", ",", "0", ")", "\n", "# plus intersection with corresponding CROWD region if it exists", "\n", "if", "pred_info", "[", "'category_id'", "]", "in", "crowd_labels_dict", ":", "\n", "                ", "intersection", "+=", "gt_pred_map", ".", "get", "(", "(", "crowd_labels_dict", "[", "pred_info", "[", "'category_id'", "]", "]", ",", "pred_label", ")", ",", "0", ")", "\n", "# predicted segment is ignored if more than half of the segment correspond to VOID and CROWD regions", "\n", "", "if", "intersection", "/", "pred_info", "[", "'area'", "]", ">", "0.5", ":", "\n", "                ", "continue", "\n", "", "pq_stat", "[", "pred_info", "[", "'category_id'", "]", "]", ".", "fp", "+=", "1", "\n", "", "", "print", "(", "'Core: {}, all {} images processed'", ".", "format", "(", "proc_id", ",", "len", "(", "annotation_set", ")", ")", ")", "\n", "return", "pq_stat", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPanopticSemanticLabeling.pq_compute_multi_core": [[213, 228], ["multiprocessing.cpu_count", "numpy.array_split", "print", "multiprocessing.Pool", "enumerate", "evalPanopticSemanticLabeling.PQStat", "multiprocessing.Pool.close", "multiprocessing.Pool.apply_async", "processes.append", "workers.apply_async.get", "len"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.comm.FutureResult.get"], ["", "def", "pq_compute_multi_core", "(", "matched_annotations_list", ",", "gt_folder", ",", "pred_folder", ",", "categories", ")", ":", "\n", "    ", "cpu_num", "=", "multiprocessing", ".", "cpu_count", "(", ")", "\n", "annotations_split", "=", "np", ".", "array_split", "(", "matched_annotations_list", ",", "cpu_num", ")", "\n", "print", "(", "\"Number of cores: {}, images per core: {}\"", ".", "format", "(", "cpu_num", ",", "len", "(", "annotations_split", "[", "0", "]", ")", ")", ")", "\n", "workers", "=", "multiprocessing", ".", "Pool", "(", "processes", "=", "cpu_num", ")", "\n", "processes", "=", "[", "]", "\n", "for", "proc_id", ",", "annotation_set", "in", "enumerate", "(", "annotations_split", ")", ":", "\n", "        ", "p", "=", "workers", ".", "apply_async", "(", "pq_compute_single_core", ",", "\n", "(", "proc_id", ",", "annotation_set", ",", "gt_folder", ",", "pred_folder", ",", "categories", ")", ")", "\n", "processes", ".", "append", "(", "p", ")", "\n", "", "pq_stat", "=", "PQStat", "(", ")", "\n", "for", "p", "in", "processes", ":", "\n", "        ", "pq_stat", "+=", "p", ".", "get", "(", ")", "\n", "", "workers", ".", "close", "(", ")", "\n", "return", "pq_stat", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPanopticSemanticLabeling.average_pq": [[230, 238], ["pq_stat.pq_average"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPanopticSemanticLabeling.PQStat.pq_average"], ["", "def", "average_pq", "(", "pq_stat", ",", "categories", ")", ":", "\n", "    ", "metrics", "=", "[", "(", "\"All\"", ",", "None", ")", ",", "(", "\"Things\"", ",", "True", ")", ",", "(", "\"Stuff\"", ",", "False", ")", "]", "\n", "results", "=", "{", "}", "\n", "for", "name", ",", "isthing", "in", "metrics", ":", "\n", "        ", "results", "[", "name", "]", ",", "per_class_results", "=", "pq_stat", ".", "pq_average", "(", "categories", ",", "isthing", "=", "isthing", ")", "\n", "if", "name", "==", "'All'", ":", "\n", "            ", "results", "[", "'per_class'", "]", "=", "per_class_results", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPanopticSemanticLabeling.print_results": [[240, 261], ["print", "sorted", "print", "print", "results[].keys", "print", "print"], "function", ["None"], ["", "def", "print_results", "(", "results", ",", "categories", ")", ":", "\n", "    ", "metrics", "=", "[", "\"All\"", ",", "\"Things\"", ",", "\"Stuff\"", "]", "\n", "print", "(", "\"{:14s}| {:>5s}  {:>5s}  {:>5s}\"", ".", "format", "(", "\"Category\"", ",", "\"PQ\"", ",", "\"SQ\"", ",", "\"RQ\"", ")", ")", "\n", "labels", "=", "sorted", "(", "results", "[", "'per_class'", "]", ".", "keys", "(", ")", ")", "\n", "for", "label", "in", "labels", ":", "\n", "        ", "print", "(", "\"{:14s}| {:5.1f}  {:5.1f}  {:5.1f}\"", ".", "format", "(", "\n", "categories", "[", "label", "]", "[", "'name'", "]", ",", "\n", "100", "*", "results", "[", "'per_class'", "]", "[", "label", "]", "[", "'pq'", "]", ",", "\n", "100", "*", "results", "[", "'per_class'", "]", "[", "label", "]", "[", "'sq'", "]", ",", "\n", "100", "*", "results", "[", "'per_class'", "]", "[", "label", "]", "[", "'rq'", "]", "\n", ")", ")", "\n", "", "print", "(", "\"-\"", "*", "41", ")", "\n", "print", "(", "\"{:14s}| {:>5s}  {:>5s}  {:>5s} {:>5s}\"", ".", "format", "(", "\"\"", ",", "\"PQ\"", ",", "\"SQ\"", ",", "\"RQ\"", ",", "\"N\"", ")", ")", "\n", "\n", "for", "name", "in", "metrics", ":", "\n", "        ", "print", "(", "\"{:14s}| {:5.1f}  {:5.1f}  {:5.1f} {:5d}\"", ".", "format", "(", "\n", "name", ",", "\n", "100", "*", "results", "[", "name", "]", "[", "'pq'", "]", ",", "\n", "100", "*", "results", "[", "name", "]", "[", "'sq'", "]", ",", "\n", "100", "*", "results", "[", "name", "]", "[", "'rq'", "]", ",", "\n", "results", "[", "name", "]", "[", "'n'", "]", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPanopticSemanticLabeling.evaluatePanoptic": [[264, 306], ["time.time", "print", "print", "print", "print", "print", "print", "print", "evalPanopticSemanticLabeling.pq_compute_multi_core", "evalPanopticSemanticLabeling.average_pq", "evalPanopticSemanticLabeling.print_results", "print", "open", "json.load", "open", "json.load", "os.path.isdir", "cityscapesscripts.helpers.csHelpers.printError", "os.path.isdir", "cityscapesscripts.helpers.csHelpers.printError", "matched_annotations_list.append", "open", "print", "json.dump", "time.time", "Exception"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPanopticSemanticLabeling.pq_compute_multi_core", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPanopticSemanticLabeling.average_pq", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPanopticSemanticLabeling.print_results", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.configuration.load", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.configuration.load", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printError", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printError"], ["", "", "def", "evaluatePanoptic", "(", "gt_json_file", ",", "gt_folder", ",", "pred_json_file", ",", "pred_folder", ",", "resultsFile", ")", ":", "\n", "\n", "    ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "with", "open", "(", "gt_json_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "gt_json", "=", "json", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "pred_json_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "pred_json", "=", "json", ".", "load", "(", "f", ")", "\n", "", "categories", "=", "{", "el", "[", "'id'", "]", ":", "el", "for", "el", "in", "gt_json", "[", "'categories'", "]", "}", "\n", "\n", "print", "(", "\"Evaluation panoptic segmentation metrics:\"", ")", "\n", "print", "(", "\"Ground truth:\"", ")", "\n", "print", "(", "\"\\tSegmentation folder: {}\"", ".", "format", "(", "gt_folder", ")", ")", "\n", "print", "(", "\"\\tJSON file: {}\"", ".", "format", "(", "gt_json_file", ")", ")", "\n", "print", "(", "\"Prediction:\"", ")", "\n", "print", "(", "\"\\tSegmentation folder: {}\"", ".", "format", "(", "pred_folder", ")", ")", "\n", "print", "(", "\"\\tJSON file: {}\"", ".", "format", "(", "pred_json_file", ")", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "gt_folder", ")", ":", "\n", "        ", "printError", "(", "\"Folder {} with ground truth segmentations doesn't exist\"", ".", "format", "(", "gt_folder", ")", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "pred_folder", ")", ":", "\n", "        ", "printError", "(", "\"Folder {} with predicted segmentations doesn't exist\"", ".", "format", "(", "pred_folder", ")", ")", "\n", "\n", "", "pred_annotations", "=", "{", "el", "[", "'image_id'", "]", ":", "el", "for", "el", "in", "pred_json", "[", "'annotations'", "]", "}", "\n", "matched_annotations_list", "=", "[", "]", "\n", "for", "gt_ann", "in", "gt_json", "[", "'annotations'", "]", ":", "\n", "        ", "image_id", "=", "gt_ann", "[", "'image_id'", "]", "\n", "if", "image_id", "not", "in", "pred_annotations", ":", "\n", "            ", "raise", "Exception", "(", "'no prediction for the image with id: {}'", ".", "format", "(", "image_id", ")", ")", "\n", "", "matched_annotations_list", ".", "append", "(", "(", "gt_ann", ",", "pred_annotations", "[", "image_id", "]", ")", ")", "\n", "\n", "", "pq_stat", "=", "pq_compute_multi_core", "(", "matched_annotations_list", ",", "gt_folder", ",", "pred_folder", ",", "categories", ")", "\n", "\n", "results", "=", "average_pq", "(", "pq_stat", ",", "categories", ")", "\n", "with", "open", "(", "resultsFile", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "print", "(", "\"Saving computed results in {}\"", ".", "format", "(", "resultsFile", ")", ")", "\n", "json", ".", "dump", "(", "results", ",", "f", ",", "sort_keys", "=", "True", ",", "indent", "=", "4", ")", "\n", "", "print_results", "(", "results", ",", "categories", ")", "\n", "\n", "t_delta", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "print", "(", "\"Time elapsed: {:0.2f} seconds\"", ".", "format", "(", "t_delta", ")", ")", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPanopticSemanticLabeling.main": [[309, 375], ["os.environ.get", "os.path.join", "os.environ.get", "os.path.join", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "evalPanopticSemanticLabeling.evaluatePanoptic", "os.path.join", "os.path.join", "os.path.isfile", "cityscapesscripts.helpers.csHelpers.printError", "os.path.isfile", "cityscapesscripts.helpers.csHelpers.printError", "os.path.dirname", "os.path.splitext", "os.path.splitext", "os.path.realpath"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPanopticSemanticLabeling.evaluatePanoptic", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printError", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printError"], ["", "def", "main", "(", ")", ":", "\n", "    ", "cityscapesPath", "=", "os", ".", "environ", ".", "get", "(", "\n", "'CITYSCAPES_DATASET'", ",", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", ",", "'..'", ",", "'..'", ")", "\n", ")", "\n", "gtJsonFile", "=", "os", ".", "path", ".", "join", "(", "cityscapesPath", ",", "\"gtFine\"", ",", "\"cityscapes_panoptic_val.json\"", ")", "\n", "\n", "predictionPath", "=", "os", ".", "environ", ".", "get", "(", "\n", "'CITYSCAPES_RESULTS'", ",", "\n", "os", ".", "path", ".", "join", "(", "cityscapesPath", ",", "\"results\"", ")", "\n", ")", "\n", "predictionJsonFile", "=", "os", ".", "path", ".", "join", "(", "predictionPath", ",", "\"cityscapes_panoptic_val.json\"", ")", "\n", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--gt-json-file\"", ",", "\n", "dest", "=", "\"gtJsonFile\"", ",", "\n", "help", "=", "'''path to json file that contains ground truth in COCO panoptic format.\n                            By default it is $CITYSCAPES_DATASET/gtFine/cityscapes_panoptic_val.json.\n                        '''", ",", "\n", "default", "=", "gtJsonFile", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--gt-folder\"", ",", "\n", "dest", "=", "\"gtFolder\"", ",", "\n", "help", "=", "'''path to folder that contains ground truth *.png files. If the\n                            argument is not provided this script will look for the *.png files in\n                            'name' if --gt-json-file set to 'name.json'.\n                        '''", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--prediction-json-file\"", ",", "\n", "dest", "=", "\"predictionJsonFile\"", ",", "\n", "help", "=", "'''path to json file that contains prediction in COCO panoptic format.\n                            By default is either $CITYSCAPES_RESULTS/cityscapes_panoptic_val.json\n                            or $CITYSCAPES_DATASET/results/cityscapes_panoptic_val.json if\n                            $CITYSCAPES_RESULTS is not set.\n                        '''", ",", "\n", "default", "=", "predictionJsonFile", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--prediction-folder\"", ",", "\n", "dest", "=", "\"predictionFolder\"", ",", "\n", "help", "=", "'''path to folder that contains prediction *.png files. If the\n                            argument is not provided this script will look for the *.png files in\n                            'name' if --prediction-json-file set to 'name.json'.\n                        '''", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", ")", "\n", "resultFile", "=", "\"resultPanopticSemanticLabeling.json\"", "\n", "parser", ".", "add_argument", "(", "\"--results_file\"", ",", "\n", "dest", "=", "\"resultsFile\"", ",", "\n", "help", "=", "\"File to store computed panoptic quality. Default: {}\"", ".", "format", "(", "resultFile", ")", ",", "\n", "default", "=", "resultFile", ",", "\n", "type", "=", "str", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "args", ".", "gtJsonFile", ")", ":", "\n", "        ", "printError", "(", "\"Could not find a ground truth json file in {}. Please run the script with '--help'\"", ".", "format", "(", "args", ".", "gtJsonFile", ")", ")", "\n", "", "if", "args", ".", "gtFolder", "is", "None", ":", "\n", "        ", "args", ".", "gtFolder", "=", "os", ".", "path", ".", "splitext", "(", "args", ".", "gtJsonFile", ")", "[", "0", "]", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isfile", "(", "args", ".", "predictionJsonFile", ")", ":", "\n", "        ", "printError", "(", "\"Could not find a prediction json file in {}. Please run the script with '--help'\"", ".", "format", "(", "args", ".", "predictionJsonFile", ")", ")", "\n", "", "if", "args", ".", "predictionFolder", "is", "None", ":", "\n", "        ", "args", ".", "predictionFolder", "=", "os", ".", "path", ".", "splitext", "(", "args", ".", "predictionJsonFile", ")", "[", "0", "]", "\n", "\n", "", "evaluatePanoptic", "(", "args", ".", "gtJsonFile", ",", "args", ".", "gtFolder", ",", "args", ".", "predictionJsonFile", ",", "args", ".", "predictionFolder", ",", "args", ".", "resultsFile", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instances2dict.instances2dict": [[13, 53], ["isinstance", "print", "Image.open", "np.array", "np.unique", "os.path.abspath", "print", "Instance", "instances[].append", "print", "sys.stdout.flush", "len", "Instance.toDict"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.toDict"], ["def", "instances2dict", "(", "imageFileList", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "imgCount", "=", "0", "\n", "instanceDict", "=", "{", "}", "\n", "\n", "if", "not", "isinstance", "(", "imageFileList", ",", "list", ")", ":", "\n", "        ", "imageFileList", "=", "[", "imageFileList", "]", "\n", "\n", "", "if", "verbose", ":", "\n", "        ", "print", "(", "\"Processing {} images...\"", ".", "format", "(", "len", "(", "imageFileList", ")", ")", ")", "\n", "\n", "", "for", "imageFileName", "in", "imageFileList", ":", "\n", "# Load image", "\n", "        ", "img", "=", "Image", ".", "open", "(", "imageFileName", ")", "\n", "\n", "# Image as numpy array", "\n", "imgNp", "=", "np", ".", "array", "(", "img", ")", "\n", "\n", "# Initialize label categories", "\n", "instances", "=", "{", "}", "\n", "for", "label", "in", "labels", ":", "\n", "            ", "instances", "[", "label", ".", "name", "]", "=", "[", "]", "\n", "\n", "# Loop through all instance ids in instance image", "\n", "", "for", "instanceId", "in", "np", ".", "unique", "(", "imgNp", ")", ":", "\n", "            ", "instanceObj", "=", "Instance", "(", "imgNp", ",", "instanceId", ")", "\n", "\n", "instances", "[", "id2label", "[", "instanceObj", ".", "labelID", "]", ".", "name", "]", ".", "append", "(", "instanceObj", ".", "toDict", "(", ")", ")", "\n", "\n", "", "imgKey", "=", "os", ".", "path", ".", "abspath", "(", "imageFileName", ")", "\n", "instanceDict", "[", "imgKey", "]", "=", "instances", "\n", "imgCount", "+=", "1", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"\\rImages Processed: {}\"", ".", "format", "(", "imgCount", ")", ",", "end", "=", "' '", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "", "if", "verbose", ":", "\n", "        ", "print", "(", "\"\"", ")", "\n", "\n", "", "return", "instanceDict", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instances2dict.main": [[54, 61], ["instances2dict.instances2dict", "len", "fileList.append"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instances2dict.instances2dict"], ["", "def", "main", "(", "argv", ")", ":", "\n", "    ", "fileList", "=", "[", "]", "\n", "if", "(", "len", "(", "argv", ")", ">", "2", ")", ":", "\n", "        ", "for", "arg", "in", "argv", ":", "\n", "            ", "if", "(", "\"png\"", "in", "arg", ")", ":", "\n", "                ", "fileList", ".", "append", "(", "arg", ")", "\n", "", "", "", "instances2dict", "(", "fileList", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPixelLevelSemanticLabeling.getPrediction": [[68, 106], ["getCsFileInfo", "os.walk", "fnmatch.filter", "printError", "os.path.isdir", "printError", "walk.append", "os.path.join", "os.path.join", "os.path.join", "printError", "os.path.dirname", "os.path.realpath"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.csHelpers.getCsFileInfo", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printError", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printError", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printError"], ["", "", "def", "getPrediction", "(", "args", ",", "groundTruthFile", ")", ":", "\n", "# determine the prediction path, if the method is first called", "\n", "    ", "if", "not", "args", ".", "predictionPath", ":", "\n", "        ", "rootPath", "=", "None", "\n", "if", "'CITYSCAPES_RESULTS'", "in", "os", ".", "environ", ":", "\n", "            ", "rootPath", "=", "os", ".", "environ", "[", "'CITYSCAPES_RESULTS'", "]", "\n", "", "elif", "'CITYSCAPES_DATASET'", "in", "os", ".", "environ", ":", "\n", "            ", "rootPath", "=", "os", ".", "path", ".", "join", "(", "os", ".", "environ", "[", "'CITYSCAPES_DATASET'", "]", ",", "\"results\"", ")", "\n", "", "else", ":", "\n", "            ", "rootPath", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", ",", "'..'", ",", "'..'", ",", "'results'", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "rootPath", ")", ":", "\n", "            ", "printError", "(", "\"Could not find a result root folder. Please read the instructions of this method.\"", ")", "\n", "\n", "", "args", ".", "predictionPath", "=", "rootPath", "\n", "\n", "# walk the prediction path, if not happened yet", "\n", "", "if", "not", "args", ".", "predictionWalk", ":", "\n", "        ", "walk", "=", "[", "]", "\n", "for", "root", ",", "dirnames", ",", "filenames", "in", "os", ".", "walk", "(", "args", ".", "predictionPath", ")", ":", "\n", "            ", "walk", ".", "append", "(", "(", "root", ",", "filenames", ")", ")", "\n", "", "args", ".", "predictionWalk", "=", "walk", "\n", "\n", "", "csFile", "=", "getCsFileInfo", "(", "groundTruthFile", ")", "\n", "filePattern", "=", "\"{}_{}_{}*.png\"", ".", "format", "(", "csFile", ".", "city", ",", "csFile", ".", "sequenceNb", ",", "csFile", ".", "frameNb", ")", "\n", "\n", "predictionFile", "=", "None", "\n", "for", "root", ",", "filenames", "in", "args", ".", "predictionWalk", ":", "\n", "        ", "for", "filename", "in", "fnmatch", ".", "filter", "(", "filenames", ",", "filePattern", ")", ":", "\n", "            ", "if", "not", "predictionFile", ":", "\n", "                ", "predictionFile", "=", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", "\n", "", "else", ":", "\n", "                ", "printError", "(", "\"Found multiple predictions for ground truth {}\"", ".", "format", "(", "groundTruthFile", ")", ")", "\n", "\n", "", "", "", "if", "not", "predictionFile", ":", "\n", "        ", "printError", "(", "\"Found no prediction for ground truth {}\"", ".", "format", "(", "groundTruthFile", ")", ")", "\n", "\n", "", "return", "predictionFile", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPixelLevelSemanticLabeling.generateMatrix": [[172, 182], ["max", "np.zeros", "args.evalLabels.append"], "function", ["None"], ["def", "generateMatrix", "(", "args", ")", ":", "\n", "    ", "args", ".", "evalLabels", "=", "[", "]", "\n", "for", "label", "in", "labels", ":", "\n", "        ", "if", "(", "label", ".", "id", "<", "0", ")", ":", "\n", "            ", "continue", "\n", "# we append all found labels, regardless of being ignored", "\n", "", "args", ".", "evalLabels", ".", "append", "(", "label", ".", "id", ")", "\n", "", "maxId", "=", "max", "(", "args", ".", "evalLabels", ")", "\n", "# We use longlong type to be sure that there are no overflows", "\n", "return", "np", ".", "zeros", "(", "shape", "=", "(", "maxId", "+", "1", ",", "maxId", "+", "1", ")", ",", "dtype", "=", "np", ".", "ulonglong", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPixelLevelSemanticLabeling.generateInstanceStats": [[183, 215], ["labelIds.append"], "function", ["None"], ["", "def", "generateInstanceStats", "(", "args", ")", ":", "\n", "    ", "instanceStats", "=", "{", "}", "\n", "instanceStats", "[", "\"classes\"", "]", "=", "{", "}", "\n", "instanceStats", "[", "\"categories\"", "]", "=", "{", "}", "\n", "for", "label", "in", "labels", ":", "\n", "        ", "if", "label", ".", "hasInstances", "and", "not", "label", ".", "ignoreInEval", ":", "\n", "            ", "instanceStats", "[", "\"classes\"", "]", "[", "label", ".", "name", "]", "=", "{", "}", "\n", "instanceStats", "[", "\"classes\"", "]", "[", "label", ".", "name", "]", "[", "\"tp\"", "]", "=", "0.0", "\n", "instanceStats", "[", "\"classes\"", "]", "[", "label", ".", "name", "]", "[", "\"tpWeighted\"", "]", "=", "0.0", "\n", "instanceStats", "[", "\"classes\"", "]", "[", "label", ".", "name", "]", "[", "\"fn\"", "]", "=", "0.0", "\n", "instanceStats", "[", "\"classes\"", "]", "[", "label", ".", "name", "]", "[", "\"fnWeighted\"", "]", "=", "0.0", "\n", "", "", "for", "category", "in", "category2labels", ":", "\n", "        ", "labelIds", "=", "[", "]", "\n", "allInstances", "=", "True", "\n", "for", "label", "in", "category2labels", "[", "category", "]", ":", "\n", "            ", "if", "label", ".", "id", "<", "0", ":", "\n", "                ", "continue", "\n", "", "if", "not", "label", ".", "hasInstances", ":", "\n", "                ", "allInstances", "=", "False", "\n", "break", "\n", "", "labelIds", ".", "append", "(", "label", ".", "id", ")", "\n", "", "if", "not", "allInstances", ":", "\n", "            ", "continue", "\n", "\n", "", "instanceStats", "[", "\"categories\"", "]", "[", "category", "]", "=", "{", "}", "\n", "instanceStats", "[", "\"categories\"", "]", "[", "category", "]", "[", "\"tp\"", "]", "=", "0.0", "\n", "instanceStats", "[", "\"categories\"", "]", "[", "category", "]", "[", "\"tpWeighted\"", "]", "=", "0.0", "\n", "instanceStats", "[", "\"categories\"", "]", "[", "category", "]", "[", "\"fn\"", "]", "=", "0.0", "\n", "instanceStats", "[", "\"categories\"", "]", "[", "category", "]", "[", "\"fnWeighted\"", "]", "=", "0.0", "\n", "instanceStats", "[", "\"categories\"", "]", "[", "category", "]", "[", "\"labelIds\"", "]", "=", "labelIds", "\n", "\n", "", "return", "instanceStats", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPixelLevelSemanticLabeling.getMatrixFieldValue": [[218, 226], ["confMatrix[].sum", "float", "float"], "function", ["None"], ["", "def", "getMatrixFieldValue", "(", "confMatrix", ",", "i", ",", "j", ",", "args", ")", ":", "\n", "    ", "if", "args", ".", "normalized", ":", "\n", "        ", "rowSum", "=", "confMatrix", "[", "i", "]", ".", "sum", "(", ")", "\n", "if", "(", "rowSum", "==", "0", ")", ":", "\n", "            ", "return", "float", "(", "'nan'", ")", "\n", "", "return", "float", "(", "confMatrix", "[", "i", "]", "[", "j", "]", ")", "/", "rowSum", "\n", "", "else", ":", "\n", "        ", "return", "confMatrix", "[", "i", "]", "[", "j", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPixelLevelSemanticLabeling.getIouScoreForLabel": [[228, 255], ["np.longlong", "np.longlong", "float", "np.longlong", "confMatrix[].sum", "float", "float", "confMatrix[].sum"], "function", ["None"], ["", "", "def", "getIouScoreForLabel", "(", "label", ",", "confMatrix", ",", "args", ")", ":", "\n", "    ", "if", "id2label", "[", "label", "]", ".", "ignoreInEval", ":", "\n", "        ", "return", "float", "(", "'nan'", ")", "\n", "\n", "# the number of true positive pixels for this label", "\n", "# the entry on the diagonal of the confusion matrix", "\n", "", "tp", "=", "np", ".", "longlong", "(", "confMatrix", "[", "label", ",", "label", "]", ")", "\n", "\n", "# the number of false negative pixels for this label", "\n", "# the row sum of the matching row in the confusion matrix", "\n", "# minus the diagonal entry", "\n", "fn", "=", "np", ".", "longlong", "(", "confMatrix", "[", "label", ",", ":", "]", ".", "sum", "(", ")", ")", "-", "tp", "\n", "\n", "# the number of false positive pixels for this labels", "\n", "# Only pixels that are not on a pixel with ground truth label that is ignored", "\n", "# The column sum of the corresponding column in the confusion matrix", "\n", "# without the ignored rows and without the actual label of interest", "\n", "notIgnored", "=", "[", "l", "for", "l", "in", "args", ".", "evalLabels", "if", "not", "id2label", "[", "l", "]", ".", "ignoreInEval", "and", "not", "l", "==", "label", "]", "\n", "fp", "=", "np", ".", "longlong", "(", "confMatrix", "[", "notIgnored", ",", "label", "]", ".", "sum", "(", ")", ")", "\n", "\n", "# the denominator of the IOU score", "\n", "denom", "=", "(", "tp", "+", "fp", "+", "fn", ")", "\n", "if", "denom", "==", "0", ":", "\n", "        ", "return", "float", "(", "'nan'", ")", "\n", "\n", "# return IOU", "\n", "", "return", "float", "(", "tp", ")", "/", "denom", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPixelLevelSemanticLabeling.getInstanceIouScoreForLabel": [[257, 278], ["np.longlong", "float", "float", "confMatrix[].sum", "float", "float"], "function", ["None"], ["", "def", "getInstanceIouScoreForLabel", "(", "label", ",", "confMatrix", ",", "instStats", ",", "args", ")", ":", "\n", "    ", "if", "id2label", "[", "label", "]", ".", "ignoreInEval", ":", "\n", "        ", "return", "float", "(", "'nan'", ")", "\n", "\n", "", "labelName", "=", "id2label", "[", "label", "]", ".", "name", "\n", "if", "not", "labelName", "in", "instStats", "[", "\"classes\"", "]", ":", "\n", "        ", "return", "float", "(", "'nan'", ")", "\n", "\n", "", "tp", "=", "instStats", "[", "\"classes\"", "]", "[", "labelName", "]", "[", "\"tpWeighted\"", "]", "\n", "fn", "=", "instStats", "[", "\"classes\"", "]", "[", "labelName", "]", "[", "\"fnWeighted\"", "]", "\n", "# false postives computed as above", "\n", "notIgnored", "=", "[", "l", "for", "l", "in", "args", ".", "evalLabels", "if", "not", "id2label", "[", "l", "]", ".", "ignoreInEval", "and", "not", "l", "==", "label", "]", "\n", "fp", "=", "np", ".", "longlong", "(", "confMatrix", "[", "notIgnored", ",", "label", "]", ".", "sum", "(", ")", ")", "\n", "\n", "# the denominator of the IOU score", "\n", "denom", "=", "(", "tp", "+", "fp", "+", "fn", ")", "\n", "if", "denom", "==", "0", ":", "\n", "        ", "return", "float", "(", "'nan'", ")", "\n", "\n", "# return IOU", "\n", "", "return", "float", "(", "tp", ")", "/", "denom", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPixelLevelSemanticLabeling.getPrior": [[280, 282], ["float", "confMatrix.sum", "confMatrix[].sum"], "function", ["None"], ["", "def", "getPrior", "(", "label", ",", "confMatrix", ")", ":", "\n", "    ", "return", "float", "(", "confMatrix", "[", "label", ",", ":", "]", ".", "sum", "(", ")", ")", "/", "confMatrix", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPixelLevelSemanticLabeling.getScoreAverage": [[285, 295], ["float", "math.isnan"], "function", ["None"], ["", "def", "getScoreAverage", "(", "scoreList", ",", "args", ")", ":", "\n", "    ", "validScores", "=", "0", "\n", "scoreSum", "=", "0.0", "\n", "for", "score", "in", "scoreList", ":", "\n", "        ", "if", "not", "math", ".", "isnan", "(", "scoreList", "[", "score", "]", ")", ":", "\n", "            ", "validScores", "+=", "1", "\n", "scoreSum", "+=", "scoreList", "[", "score", "]", "\n", "", "", "if", "validScores", "==", "0", ":", "\n", "        ", "return", "float", "(", "'nan'", ")", "\n", "", "return", "scoreSum", "/", "validScores", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPixelLevelSemanticLabeling.getIouScoreForCategory": [[297, 329], ["np.longlong", "np.longlong", "float", "[].sum", "np.longlong", "[].sum", "float", "float", "confMatrix[].sum"], "function", ["None"], ["", "def", "getIouScoreForCategory", "(", "category", ",", "confMatrix", ",", "args", ")", ":", "\n", "# All labels in this category", "\n", "    ", "labels", "=", "category2labels", "[", "category", "]", "\n", "# The IDs of all valid labels in this category", "\n", "labelIds", "=", "[", "label", ".", "id", "for", "label", "in", "labels", "if", "not", "label", ".", "ignoreInEval", "and", "label", ".", "id", "in", "args", ".", "evalLabels", "]", "\n", "# If there are no valid labels, then return NaN", "\n", "if", "not", "labelIds", ":", "\n", "        ", "return", "float", "(", "'nan'", ")", "\n", "\n", "# the number of true positive pixels for this category", "\n", "# this is the sum of all entries in the confusion matrix", "\n", "# where row and column belong to a label ID of this category", "\n", "", "tp", "=", "np", ".", "longlong", "(", "confMatrix", "[", "labelIds", ",", ":", "]", "[", ":", ",", "labelIds", "]", ".", "sum", "(", ")", ")", "\n", "\n", "# the number of false negative pixels for this category", "\n", "# that is the sum of all rows of labels within this category", "\n", "# minus the number of true positive pixels", "\n", "fn", "=", "np", ".", "longlong", "(", "confMatrix", "[", "labelIds", ",", ":", "]", ".", "sum", "(", ")", ")", "-", "tp", "\n", "\n", "# the number of false positive pixels for this category", "\n", "# we count the column sum of all labels within this category", "\n", "# while skipping the rows of ignored labels and of labels within this category", "\n", "notIgnoredAndNotInCategory", "=", "[", "l", "for", "l", "in", "args", ".", "evalLabels", "if", "not", "id2label", "[", "l", "]", ".", "ignoreInEval", "and", "id2label", "[", "l", "]", ".", "category", "!=", "category", "]", "\n", "fp", "=", "np", ".", "longlong", "(", "confMatrix", "[", "notIgnoredAndNotInCategory", ",", ":", "]", "[", ":", ",", "labelIds", "]", ".", "sum", "(", ")", ")", "\n", "\n", "# the denominator of the IOU score", "\n", "denom", "=", "(", "tp", "+", "fp", "+", "fn", ")", "\n", "if", "denom", "==", "0", ":", "\n", "        ", "return", "float", "(", "'nan'", ")", "\n", "\n", "# return IOU", "\n", "", "return", "float", "(", "tp", ")", "/", "denom", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPixelLevelSemanticLabeling.getInstanceIouScoreForCategory": [[331, 351], ["np.longlong", "float", "[].sum", "float", "float"], "function", ["None"], ["", "def", "getInstanceIouScoreForCategory", "(", "category", ",", "confMatrix", ",", "instStats", ",", "args", ")", ":", "\n", "    ", "if", "not", "category", "in", "instStats", "[", "\"categories\"", "]", ":", "\n", "        ", "return", "float", "(", "'nan'", ")", "\n", "", "labelIds", "=", "instStats", "[", "\"categories\"", "]", "[", "category", "]", "[", "\"labelIds\"", "]", "\n", "\n", "tp", "=", "instStats", "[", "\"categories\"", "]", "[", "category", "]", "[", "\"tpWeighted\"", "]", "\n", "fn", "=", "instStats", "[", "\"categories\"", "]", "[", "category", "]", "[", "\"fnWeighted\"", "]", "\n", "\n", "# the number of false positive pixels for this category", "\n", "# same as above", "\n", "notIgnoredAndNotInCategory", "=", "[", "l", "for", "l", "in", "args", ".", "evalLabels", "if", "not", "id2label", "[", "l", "]", ".", "ignoreInEval", "and", "id2label", "[", "l", "]", ".", "category", "!=", "category", "]", "\n", "fp", "=", "np", ".", "longlong", "(", "confMatrix", "[", "notIgnoredAndNotInCategory", ",", ":", "]", "[", ":", ",", "labelIds", "]", ".", "sum", "(", ")", ")", "\n", "\n", "# the denominator of the IOU score", "\n", "denom", "=", "(", "tp", "+", "fp", "+", "fn", ")", "\n", "if", "denom", "==", "0", ":", "\n", "        ", "return", "float", "(", "'nan'", ")", "\n", "\n", "# return IOU", "\n", "", "return", "float", "(", "tp", ")", "/", "denom", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPixelLevelSemanticLabeling.createResultDict": [[354, 376], ["confMatrix.tolist", "evalPixelLevelSemanticLabeling.getScoreAverage", "evalPixelLevelSemanticLabeling.getScoreAverage", "evalPixelLevelSemanticLabeling.getScoreAverage", "evalPixelLevelSemanticLabeling.getScoreAverage", "evalPixelLevelSemanticLabeling.getPrior"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPixelLevelSemanticLabeling.getScoreAverage", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPixelLevelSemanticLabeling.getScoreAverage", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPixelLevelSemanticLabeling.getScoreAverage", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPixelLevelSemanticLabeling.getScoreAverage", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPixelLevelSemanticLabeling.getPrior"], ["", "def", "createResultDict", "(", "confMatrix", ",", "classScores", ",", "classInstScores", ",", "categoryScores", ",", "categoryInstScores", ",", "perImageStats", ",", "args", ")", ":", "\n", "# write JSON result file", "\n", "    ", "wholeData", "=", "{", "}", "\n", "wholeData", "[", "\"confMatrix\"", "]", "=", "confMatrix", ".", "tolist", "(", ")", "\n", "wholeData", "[", "\"priors\"", "]", "=", "{", "}", "\n", "wholeData", "[", "\"labels\"", "]", "=", "{", "}", "\n", "for", "label", "in", "args", ".", "evalLabels", ":", "\n", "        ", "wholeData", "[", "\"priors\"", "]", "[", "id2label", "[", "label", "]", ".", "name", "]", "=", "getPrior", "(", "label", ",", "confMatrix", ")", "\n", "wholeData", "[", "\"labels\"", "]", "[", "id2label", "[", "label", "]", ".", "name", "]", "=", "label", "\n", "", "wholeData", "[", "\"classScores\"", "]", "=", "classScores", "\n", "wholeData", "[", "\"classInstScores\"", "]", "=", "classInstScores", "\n", "wholeData", "[", "\"categoryScores\"", "]", "=", "categoryScores", "\n", "wholeData", "[", "\"categoryInstScores\"", "]", "=", "categoryInstScores", "\n", "wholeData", "[", "\"averageScoreClasses\"", "]", "=", "getScoreAverage", "(", "classScores", ",", "args", ")", "\n", "wholeData", "[", "\"averageScoreInstClasses\"", "]", "=", "getScoreAverage", "(", "classInstScores", ",", "args", ")", "\n", "wholeData", "[", "\"averageScoreCategories\"", "]", "=", "getScoreAverage", "(", "categoryScores", ",", "args", ")", "\n", "wholeData", "[", "\"averageScoreInstCategories\"", "]", "=", "getScoreAverage", "(", "categoryInstScores", ",", "args", ")", "\n", "\n", "if", "perImageStats", ":", "\n", "        ", "wholeData", "[", "\"perImageScores\"", "]", "=", "perImageStats", "\n", "\n", "", "return", "wholeData", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPixelLevelSemanticLabeling.writeJSONFile": [[377, 381], ["os.path.dirname", "ensurePath", "writeDict2JSON"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.csHelpers.ensurePath", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.csHelpers.writeDict2JSON"], ["", "def", "writeJSONFile", "(", "wholeData", ",", "args", ")", ":", "\n", "    ", "path", "=", "os", ".", "path", ".", "dirname", "(", "args", ".", "exportFile", ")", "\n", "ensurePath", "(", "path", ")", "\n", "writeDict2JSON", "(", "wholeData", ",", "args", ".", "exportFile", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPixelLevelSemanticLabeling.printConfMatrix": [[383, 430], ["print", "print", "print", "print", "print", "print", "range", "print", "print", "print", "print", "print", "evalPixelLevelSemanticLabeling.getPrior", "print", "range", "print", "print", "len", "len", "evalPixelLevelSemanticLabeling.getMatrixFieldValue", "print", "getColorEntry", "getColorEntry"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPixelLevelSemanticLabeling.getPrior", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPixelLevelSemanticLabeling.getMatrixFieldValue", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.csHelpers.getColorEntry", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.csHelpers.getColorEntry"], ["", "def", "printConfMatrix", "(", "confMatrix", ",", "args", ")", ":", "\n", "# print line", "\n", "    ", "print", "(", "\"\\b{text:{fill}>{width}}\"", ".", "format", "(", "width", "=", "15", ",", "fill", "=", "'-'", ",", "text", "=", "\" \"", ")", ",", "end", "=", "' '", ")", "\n", "for", "label", "in", "args", ".", "evalLabels", ":", "\n", "        ", "print", "(", "\"\\b{text:{fill}>{width}}\"", ".", "format", "(", "width", "=", "args", ".", "printRow", "+", "2", ",", "fill", "=", "'-'", ",", "text", "=", "\" \"", ")", ",", "end", "=", "' '", ")", "\n", "", "print", "(", "\"\\b{text:{fill}>{width}}\"", ".", "format", "(", "width", "=", "args", ".", "printRow", "+", "3", ",", "fill", "=", "'-'", ",", "text", "=", "\" \"", ")", ")", "\n", "\n", "# print label names", "\n", "print", "(", "\"\\b{text:>{width}} |\"", ".", "format", "(", "width", "=", "13", ",", "text", "=", "\"\"", ")", ",", "end", "=", "' '", ")", "\n", "for", "label", "in", "args", ".", "evalLabels", ":", "\n", "        ", "print", "(", "\"\\b{text:^{width}} |\"", ".", "format", "(", "width", "=", "args", ".", "printRow", ",", "text", "=", "id2label", "[", "label", "]", ".", "name", "[", "0", "]", ")", ",", "end", "=", "' '", ")", "\n", "", "print", "(", "\"\\b{text:>{width}} |\"", ".", "format", "(", "width", "=", "6", ",", "text", "=", "\"Prior\"", ")", ")", "\n", "\n", "# print line", "\n", "print", "(", "\"\\b{text:{fill}>{width}}\"", ".", "format", "(", "width", "=", "15", ",", "fill", "=", "'-'", ",", "text", "=", "\" \"", ")", ",", "end", "=", "' '", ")", "\n", "for", "label", "in", "args", ".", "evalLabels", ":", "\n", "        ", "print", "(", "\"\\b{text:{fill}>{width}}\"", ".", "format", "(", "width", "=", "args", ".", "printRow", "+", "2", ",", "fill", "=", "'-'", ",", "text", "=", "\" \"", ")", ",", "end", "=", "' '", ")", "\n", "", "print", "(", "\"\\b{text:{fill}>{width}}\"", ".", "format", "(", "width", "=", "args", ".", "printRow", "+", "3", ",", "fill", "=", "'-'", ",", "text", "=", "\" \"", ")", ")", "\n", "\n", "# print matrix", "\n", "for", "x", "in", "range", "(", "0", ",", "confMatrix", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "if", "(", "not", "x", "in", "args", ".", "evalLabels", ")", ":", "\n", "            ", "continue", "\n", "# get prior of this label", "\n", "", "prior", "=", "getPrior", "(", "x", ",", "confMatrix", ")", "\n", "# skip if label does not exist in ground truth", "\n", "if", "prior", "<", "1e-9", ":", "\n", "            ", "continue", "\n", "\n", "# print name", "\n", "", "name", "=", "id2label", "[", "x", "]", ".", "name", "\n", "if", "len", "(", "name", ")", ">", "13", ":", "\n", "            ", "name", "=", "name", "[", ":", "13", "]", "\n", "", "print", "(", "\"\\b{text:>{width}} |\"", ".", "format", "(", "width", "=", "13", ",", "text", "=", "name", ")", ",", "end", "=", "' '", ")", "\n", "# print matrix content", "\n", "for", "y", "in", "range", "(", "0", ",", "len", "(", "confMatrix", "[", "x", "]", ")", ")", ":", "\n", "            ", "if", "(", "not", "y", "in", "args", ".", "evalLabels", ")", ":", "\n", "                ", "continue", "\n", "", "matrixFieldValue", "=", "getMatrixFieldValue", "(", "confMatrix", ",", "x", ",", "y", ",", "args", ")", "\n", "print", "(", "getColorEntry", "(", "matrixFieldValue", ",", "args", ")", "+", "\"\\b{text:>{width}.2f}  \"", ".", "format", "(", "width", "=", "args", ".", "printRow", ",", "text", "=", "matrixFieldValue", ")", "+", "args", ".", "nocol", ",", "end", "=", "' '", ")", "\n", "# print prior", "\n", "", "print", "(", "getColorEntry", "(", "prior", ",", "args", ")", "+", "\"\\b{text:>{width}.4f} \"", ".", "format", "(", "width", "=", "6", ",", "text", "=", "prior", ")", "+", "args", ".", "nocol", ")", "\n", "# print line", "\n", "", "print", "(", "\"\\b{text:{fill}>{width}}\"", ".", "format", "(", "width", "=", "15", ",", "fill", "=", "'-'", ",", "text", "=", "\" \"", ")", ",", "end", "=", "' '", ")", "\n", "for", "label", "in", "args", ".", "evalLabels", ":", "\n", "        ", "print", "(", "\"\\b{text:{fill}>{width}}\"", ".", "format", "(", "width", "=", "args", ".", "printRow", "+", "2", ",", "fill", "=", "'-'", ",", "text", "=", "\" \"", ")", ",", "end", "=", "' '", ")", "\n", "", "print", "(", "\"\\b{text:{fill}>{width}}\"", ".", "format", "(", "width", "=", "args", ".", "printRow", "+", "3", ",", "fill", "=", "'-'", ",", "text", "=", "\" \"", ")", ",", "end", "=", "' '", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPixelLevelSemanticLabeling.printClassScores": [[432, 444], ["print", "print", "str", "print", "getColorEntry", "getColorEntry"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.csHelpers.getColorEntry", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.csHelpers.getColorEntry"], ["", "def", "printClassScores", "(", "scoreList", ",", "instScoreList", ",", "args", ")", ":", "\n", "    ", "if", "(", "args", ".", "quiet", ")", ":", "\n", "        ", "return", "\n", "", "print", "(", "args", ".", "bold", "+", "\"classes          IoU      nIoU\"", "+", "args", ".", "nocol", ")", "\n", "print", "(", "\"--------------------------------\"", ")", "\n", "for", "label", "in", "args", ".", "evalLabels", ":", "\n", "        ", "if", "(", "id2label", "[", "label", "]", ".", "ignoreInEval", ")", ":", "\n", "            ", "continue", "\n", "", "labelName", "=", "str", "(", "id2label", "[", "label", "]", ".", "name", ")", "\n", "iouStr", "=", "getColorEntry", "(", "scoreList", "[", "labelName", "]", ",", "args", ")", "+", "\"{val:>5.3f}\"", ".", "format", "(", "val", "=", "scoreList", "[", "labelName", "]", ")", "+", "args", ".", "nocol", "\n", "niouStr", "=", "getColorEntry", "(", "instScoreList", "[", "labelName", "]", ",", "args", ")", "+", "\"{val:>5.3f}\"", ".", "format", "(", "val", "=", "instScoreList", "[", "labelName", "]", ")", "+", "args", ".", "nocol", "\n", "print", "(", "\"{:<14}: \"", ".", "format", "(", "labelName", ")", "+", "iouStr", "+", "\"    \"", "+", "niouStr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPixelLevelSemanticLabeling.printCategoryScores": [[446, 457], ["print", "print", "all", "print", "getColorEntry", "getColorEntry"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.csHelpers.getColorEntry", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.csHelpers.getColorEntry"], ["", "", "def", "printCategoryScores", "(", "scoreDict", ",", "instScoreDict", ",", "args", ")", ":", "\n", "    ", "if", "(", "args", ".", "quiet", ")", ":", "\n", "        ", "return", "\n", "", "print", "(", "args", ".", "bold", "+", "\"categories       IoU      nIoU\"", "+", "args", ".", "nocol", ")", "\n", "print", "(", "\"--------------------------------\"", ")", "\n", "for", "categoryName", "in", "scoreDict", ":", "\n", "        ", "if", "all", "(", "label", ".", "ignoreInEval", "for", "label", "in", "category2labels", "[", "categoryName", "]", ")", ":", "\n", "            ", "continue", "\n", "", "iouStr", "=", "getColorEntry", "(", "scoreDict", "[", "categoryName", "]", ",", "args", ")", "+", "\"{val:>5.3f}\"", ".", "format", "(", "val", "=", "scoreDict", "[", "categoryName", "]", ")", "+", "args", ".", "nocol", "\n", "niouStr", "=", "getColorEntry", "(", "instScoreDict", "[", "categoryName", "]", ",", "args", ")", "+", "\"{val:>5.3f}\"", ".", "format", "(", "val", "=", "instScoreDict", "[", "categoryName", "]", ")", "+", "args", ".", "nocol", "\n", "print", "(", "\"{:<14}: \"", ".", "format", "(", "categoryName", ")", "+", "iouStr", "+", "\"    \"", "+", "niouStr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPixelLevelSemanticLabeling.evaluateImgLists": [[459, 547], ["evalPixelLevelSemanticLabeling.generateMatrix", "evalPixelLevelSemanticLabeling.generateInstanceStats", "range", "category2labels.keys", "category2labels.keys", "evalPixelLevelSemanticLabeling.createResultDict", "len", "len", "printError", "print", "len", "evalPixelLevelSemanticLabeling.evaluatePair", "print", "generateMatrix.sum", "printError", "evalPixelLevelSemanticLabeling.printConfMatrix", "evalPixelLevelSemanticLabeling.getIouScoreForLabel", "evalPixelLevelSemanticLabeling.getInstanceIouScoreForLabel", "print", "print", "evalPixelLevelSemanticLabeling.printClassScores", "print", "print", "print", "print", "evalPixelLevelSemanticLabeling.getIouScoreForCategory", "evalPixelLevelSemanticLabeling.getInstanceIouScoreForCategory", "print", "evalPixelLevelSemanticLabeling.printCategoryScores", "print", "print", "print", "print", "evalPixelLevelSemanticLabeling.writeJSONFile", "generateMatrix.sum", "printError", "print", "sys.stdout.flush", "len", "generateMatrix.sum", "getColorEntry", "getColorEntry", "getColorEntry", "getColorEntry", "generateMatrix.sum", "evalPixelLevelSemanticLabeling.getScoreAverage", "evalPixelLevelSemanticLabeling.getScoreAverage", "evalPixelLevelSemanticLabeling.getScoreAverage", "evalPixelLevelSemanticLabeling.getScoreAverage", "evalPixelLevelSemanticLabeling.getScoreAverage", "evalPixelLevelSemanticLabeling.getScoreAverage", "evalPixelLevelSemanticLabeling.getScoreAverage", "evalPixelLevelSemanticLabeling.getScoreAverage"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPixelLevelSemanticLabeling.generateMatrix", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPixelLevelSemanticLabeling.generateInstanceStats", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPixelLevelSemanticLabeling.createResultDict", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printError", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPixelLevelSemanticLabeling.evaluatePair", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printError", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPixelLevelSemanticLabeling.printConfMatrix", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPixelLevelSemanticLabeling.getIouScoreForLabel", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPixelLevelSemanticLabeling.getInstanceIouScoreForLabel", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPixelLevelSemanticLabeling.printClassScores", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPixelLevelSemanticLabeling.getIouScoreForCategory", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPixelLevelSemanticLabeling.getInstanceIouScoreForCategory", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPixelLevelSemanticLabeling.printCategoryScores", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPixelLevelSemanticLabeling.writeJSONFile", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printError", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.csHelpers.getColorEntry", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.csHelpers.getColorEntry", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.csHelpers.getColorEntry", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.csHelpers.getColorEntry", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPixelLevelSemanticLabeling.getScoreAverage", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPixelLevelSemanticLabeling.getScoreAverage", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPixelLevelSemanticLabeling.getScoreAverage", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPixelLevelSemanticLabeling.getScoreAverage", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPixelLevelSemanticLabeling.getScoreAverage", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPixelLevelSemanticLabeling.getScoreAverage", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPixelLevelSemanticLabeling.getScoreAverage", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPixelLevelSemanticLabeling.getScoreAverage"], ["", "", "def", "evaluateImgLists", "(", "predictionImgList", ",", "groundTruthImgList", ",", "args", ")", ":", "\n", "    ", "if", "len", "(", "predictionImgList", ")", "!=", "len", "(", "groundTruthImgList", ")", ":", "\n", "        ", "printError", "(", "\"List of images for prediction and groundtruth are not of equal size.\"", ")", "\n", "", "confMatrix", "=", "generateMatrix", "(", "args", ")", "\n", "instStats", "=", "generateInstanceStats", "(", "args", ")", "\n", "perImageStats", "=", "{", "}", "\n", "nbPixels", "=", "0", "\n", "\n", "if", "not", "args", ".", "quiet", ":", "\n", "        ", "print", "(", "\"Evaluating {} pairs of images...\"", ".", "format", "(", "len", "(", "predictionImgList", ")", ")", ")", "\n", "\n", "# Evaluate all pairs of images and save them into a matrix", "\n", "", "for", "i", "in", "range", "(", "len", "(", "predictionImgList", ")", ")", ":", "\n", "        ", "predictionImgFileName", "=", "predictionImgList", "[", "i", "]", "\n", "groundTruthImgFileName", "=", "groundTruthImgList", "[", "i", "]", "\n", "#print \"Evaluate \", predictionImgFileName, \"<>\", groundTruthImgFileName", "\n", "nbPixels", "+=", "evaluatePair", "(", "predictionImgFileName", ",", "groundTruthImgFileName", ",", "confMatrix", ",", "instStats", ",", "perImageStats", ",", "args", ")", "\n", "\n", "# sanity check", "\n", "if", "confMatrix", ".", "sum", "(", ")", "!=", "nbPixels", ":", "\n", "            ", "printError", "(", "'Number of analyzed pixels and entries in confusion matrix disagree: contMatrix {}, pixels {}'", ".", "format", "(", "confMatrix", ".", "sum", "(", ")", ",", "nbPixels", ")", ")", "\n", "\n", "", "if", "not", "args", ".", "quiet", ":", "\n", "            ", "print", "(", "\"\\rImages Processed: {}\"", ".", "format", "(", "i", "+", "1", ")", ",", "end", "=", "' '", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "", "", "if", "not", "args", ".", "quiet", ":", "\n", "        ", "print", "(", "\"\\n\"", ")", "\n", "\n", "# sanity check", "\n", "", "if", "confMatrix", ".", "sum", "(", ")", "!=", "nbPixels", ":", "\n", "        ", "printError", "(", "'Number of analyzed pixels and entries in confusion matrix disagree: contMatrix {}, pixels {}'", ".", "format", "(", "confMatrix", ".", "sum", "(", ")", ",", "nbPixels", ")", ")", "\n", "\n", "# print confusion matrix", "\n", "", "if", "(", "not", "args", ".", "quiet", ")", ":", "\n", "        ", "printConfMatrix", "(", "confMatrix", ",", "args", ")", "\n", "\n", "# Calculate IOU scores on class level from matrix", "\n", "", "classScoreList", "=", "{", "}", "\n", "for", "label", "in", "args", ".", "evalLabels", ":", "\n", "        ", "labelName", "=", "id2label", "[", "label", "]", ".", "name", "\n", "classScoreList", "[", "labelName", "]", "=", "getIouScoreForLabel", "(", "label", ",", "confMatrix", ",", "args", ")", "\n", "\n", "# Calculate instance IOU scores on class level from matrix", "\n", "", "classInstScoreList", "=", "{", "}", "\n", "for", "label", "in", "args", ".", "evalLabels", ":", "\n", "        ", "labelName", "=", "id2label", "[", "label", "]", ".", "name", "\n", "classInstScoreList", "[", "labelName", "]", "=", "getInstanceIouScoreForLabel", "(", "label", ",", "confMatrix", ",", "instStats", ",", "args", ")", "\n", "\n", "# Print IOU scores", "\n", "", "if", "(", "not", "args", ".", "quiet", ")", ":", "\n", "        ", "print", "(", "\"\"", ")", "\n", "print", "(", "\"\"", ")", "\n", "printClassScores", "(", "classScoreList", ",", "classInstScoreList", ",", "args", ")", "\n", "iouAvgStr", "=", "getColorEntry", "(", "getScoreAverage", "(", "classScoreList", ",", "args", ")", ",", "args", ")", "+", "\"{avg:5.3f}\"", ".", "format", "(", "avg", "=", "getScoreAverage", "(", "classScoreList", ",", "args", ")", ")", "+", "args", ".", "nocol", "\n", "niouAvgStr", "=", "getColorEntry", "(", "getScoreAverage", "(", "classInstScoreList", ",", "args", ")", ",", "args", ")", "+", "\"{avg:5.3f}\"", ".", "format", "(", "avg", "=", "getScoreAverage", "(", "classInstScoreList", ",", "args", ")", ")", "+", "args", ".", "nocol", "\n", "print", "(", "\"--------------------------------\"", ")", "\n", "print", "(", "\"Score Average : \"", "+", "iouAvgStr", "+", "\"    \"", "+", "niouAvgStr", ")", "\n", "print", "(", "\"--------------------------------\"", ")", "\n", "print", "(", "\"\"", ")", "\n", "\n", "# Calculate IOU scores on category level from matrix", "\n", "", "categoryScoreList", "=", "{", "}", "\n", "for", "category", "in", "category2labels", ".", "keys", "(", ")", ":", "\n", "        ", "categoryScoreList", "[", "category", "]", "=", "getIouScoreForCategory", "(", "category", ",", "confMatrix", ",", "args", ")", "\n", "\n", "# Calculate instance IOU scores on category level from matrix", "\n", "", "categoryInstScoreList", "=", "{", "}", "\n", "for", "category", "in", "category2labels", ".", "keys", "(", ")", ":", "\n", "        ", "categoryInstScoreList", "[", "category", "]", "=", "getInstanceIouScoreForCategory", "(", "category", ",", "confMatrix", ",", "instStats", ",", "args", ")", "\n", "\n", "# Print IOU scores", "\n", "", "if", "(", "not", "args", ".", "quiet", ")", ":", "\n", "        ", "print", "(", "\"\"", ")", "\n", "printCategoryScores", "(", "categoryScoreList", ",", "categoryInstScoreList", ",", "args", ")", "\n", "iouAvgStr", "=", "getColorEntry", "(", "getScoreAverage", "(", "categoryScoreList", ",", "args", ")", ",", "args", ")", "+", "\"{avg:5.3f}\"", ".", "format", "(", "avg", "=", "getScoreAverage", "(", "categoryScoreList", ",", "args", ")", ")", "+", "args", ".", "nocol", "\n", "niouAvgStr", "=", "getColorEntry", "(", "getScoreAverage", "(", "categoryInstScoreList", ",", "args", ")", ",", "args", ")", "+", "\"{avg:5.3f}\"", ".", "format", "(", "avg", "=", "getScoreAverage", "(", "categoryInstScoreList", ",", "args", ")", ")", "+", "args", ".", "nocol", "\n", "print", "(", "\"--------------------------------\"", ")", "\n", "print", "(", "\"Score Average : \"", "+", "iouAvgStr", "+", "\"    \"", "+", "niouAvgStr", ")", "\n", "print", "(", "\"--------------------------------\"", ")", "\n", "print", "(", "\"\"", ")", "\n", "\n", "", "allResultsDict", "=", "createResultDict", "(", "confMatrix", ",", "classScoreList", ",", "classInstScoreList", ",", "categoryScoreList", ",", "categoryInstScoreList", ",", "perImageStats", ",", "args", ")", "\n", "# write result file", "\n", "if", "args", ".", "JSONOutput", ":", "\n", "        ", "writeJSONFile", "(", "allResultsDict", ",", "args", ")", "\n", "\n", "# return confusion matrix", "\n", "", "return", "allResultsDict", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPixelLevelSemanticLabeling.evaluatePair": [[550, 653], ["Image.open", "np.array", "Image.open", "np.array", "groundTruthImgFileName.replace", "printError", "printError", "len", "printError", "addToConfusionMatrix.cEvaluatePair", "np.unique", "zip", "np.unique", "np.in1d().reshape", "np.logical_and", "np.count_nonzero", "np.count_nonzero", "printError", "printError", "Image.open", "np.array", "max().astype", "int", "np.in1d().reshape", "int", "np.count_nonzero", "np.count_nonzero", "printError", "np.array.astype", "printError", "float", "float", "float", "np.count_nonzero", "np.in1d", "max", "np.in1d", "np.logical_and", "float", "float", "np.array.max", "np.array.max"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printError", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printError", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printError", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printError", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printError", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printError", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printError"], ["", "def", "evaluatePair", "(", "predictionImgFileName", ",", "groundTruthImgFileName", ",", "confMatrix", ",", "instanceStats", ",", "perImageStats", ",", "args", ")", ":", "\n", "# Loading all resources for evaluation.", "\n", "    ", "try", ":", "\n", "        ", "predictionImg", "=", "Image", ".", "open", "(", "predictionImgFileName", ")", "\n", "predictionNp", "=", "np", ".", "array", "(", "predictionImg", ")", "\n", "", "except", ":", "\n", "        ", "printError", "(", "\"Unable to load \"", "+", "predictionImgFileName", ")", "\n", "", "try", ":", "\n", "        ", "groundTruthImg", "=", "Image", ".", "open", "(", "groundTruthImgFileName", ")", "\n", "groundTruthNp", "=", "np", ".", "array", "(", "groundTruthImg", ")", "\n", "", "except", ":", "\n", "        ", "printError", "(", "\"Unable to load \"", "+", "groundTruthImgFileName", ")", "\n", "# load ground truth instances, if needed", "\n", "", "if", "args", ".", "evalInstLevelScore", ":", "\n", "        ", "groundTruthInstanceImgFileName", "=", "groundTruthImgFileName", ".", "replace", "(", "\"labelIds\"", ",", "\"instanceIds\"", ")", "\n", "try", ":", "\n", "            ", "instanceImg", "=", "Image", ".", "open", "(", "groundTruthInstanceImgFileName", ")", "\n", "instanceNp", "=", "np", ".", "array", "(", "instanceImg", ")", "\n", "", "except", ":", "\n", "            ", "printError", "(", "\"Unable to load \"", "+", "groundTruthInstanceImgFileName", ")", "\n", "\n", "# Check for equal image sizes", "\n", "", "", "if", "(", "predictionImg", ".", "size", "[", "0", "]", "!=", "groundTruthImg", ".", "size", "[", "0", "]", ")", ":", "\n", "        ", "printError", "(", "\"Image widths of \"", "+", "predictionImgFileName", "+", "\" and \"", "+", "groundTruthImgFileName", "+", "\" are not equal.\"", ")", "\n", "", "if", "(", "predictionImg", ".", "size", "[", "1", "]", "!=", "groundTruthImg", ".", "size", "[", "1", "]", ")", ":", "\n", "        ", "printError", "(", "\"Image heights of \"", "+", "predictionImgFileName", "+", "\" and \"", "+", "groundTruthImgFileName", "+", "\" are not equal.\"", ")", "\n", "", "if", "(", "len", "(", "predictionNp", ".", "shape", ")", "!=", "2", ")", ":", "\n", "        ", "printError", "(", "\"Predicted image has multiple channels.\"", ")", "\n", "\n", "", "imgWidth", "=", "predictionImg", ".", "size", "[", "0", "]", "\n", "imgHeight", "=", "predictionImg", ".", "size", "[", "1", "]", "\n", "nbPixels", "=", "imgWidth", "*", "imgHeight", "\n", "\n", "# Evaluate images", "\n", "if", "(", "CSUPPORT", ")", ":", "\n", "# using cython", "\n", "        ", "confMatrix", "=", "addToConfusionMatrix", ".", "cEvaluatePair", "(", "predictionNp", ",", "groundTruthNp", ",", "confMatrix", ",", "args", ".", "evalLabels", ")", "\n", "", "else", ":", "\n", "# the slower python way ", "\n", "        ", "encoding_value", "=", "max", "(", "groundTruthNp", ".", "max", "(", ")", ",", "predictionNp", ".", "max", "(", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", "+", "1", "\n", "encoded", "=", "(", "groundTruthNp", ".", "astype", "(", "np", ".", "int32", ")", "*", "encoding_value", ")", "+", "predictionNp", "\n", "\n", "values", ",", "cnt", "=", "np", ".", "unique", "(", "encoded", ",", "return_counts", "=", "True", ")", "\n", "\n", "for", "value", ",", "c", "in", "zip", "(", "values", ",", "cnt", ")", ":", "\n", "            ", "pred_id", "=", "value", "%", "encoding_value", "\n", "gt_id", "=", "int", "(", "(", "value", "-", "pred_id", ")", "/", "encoding_value", ")", "\n", "if", "not", "gt_id", "in", "args", ".", "evalLabels", ":", "\n", "                ", "printError", "(", "\"Unknown label with id {:}\"", ".", "format", "(", "gt_id", ")", ")", "\n", "", "confMatrix", "[", "gt_id", "]", "[", "pred_id", "]", "+=", "c", "\n", "\n", "\n", "", "", "if", "args", ".", "evalInstLevelScore", ":", "\n", "# Generate category masks", "\n", "        ", "categoryMasks", "=", "{", "}", "\n", "for", "category", "in", "instanceStats", "[", "\"categories\"", "]", ":", "\n", "            ", "categoryMasks", "[", "category", "]", "=", "np", ".", "in1d", "(", "predictionNp", ",", "instanceStats", "[", "\"categories\"", "]", "[", "category", "]", "[", "\"labelIds\"", "]", ")", ".", "reshape", "(", "predictionNp", ".", "shape", ")", "\n", "\n", "", "instList", "=", "np", ".", "unique", "(", "instanceNp", "[", "instanceNp", ">", "1000", "]", ")", "\n", "for", "instId", "in", "instList", ":", "\n", "            ", "labelId", "=", "int", "(", "instId", "/", "1000", ")", "\n", "label", "=", "id2label", "[", "labelId", "]", "\n", "if", "label", ".", "ignoreInEval", ":", "\n", "                ", "continue", "\n", "\n", "", "mask", "=", "instanceNp", "==", "instId", "\n", "instSize", "=", "np", ".", "count_nonzero", "(", "mask", ")", "\n", "\n", "tp", "=", "np", ".", "count_nonzero", "(", "predictionNp", "[", "mask", "]", "==", "labelId", ")", "\n", "fn", "=", "instSize", "-", "tp", "\n", "\n", "weight", "=", "args", ".", "avgClassSize", "[", "label", ".", "name", "]", "/", "float", "(", "instSize", ")", "\n", "tpWeighted", "=", "float", "(", "tp", ")", "*", "weight", "\n", "fnWeighted", "=", "float", "(", "fn", ")", "*", "weight", "\n", "\n", "instanceStats", "[", "\"classes\"", "]", "[", "label", ".", "name", "]", "[", "\"tp\"", "]", "+=", "tp", "\n", "instanceStats", "[", "\"classes\"", "]", "[", "label", ".", "name", "]", "[", "\"fn\"", "]", "+=", "fn", "\n", "instanceStats", "[", "\"classes\"", "]", "[", "label", ".", "name", "]", "[", "\"tpWeighted\"", "]", "+=", "tpWeighted", "\n", "instanceStats", "[", "\"classes\"", "]", "[", "label", ".", "name", "]", "[", "\"fnWeighted\"", "]", "+=", "fnWeighted", "\n", "\n", "category", "=", "label", ".", "category", "\n", "if", "category", "in", "instanceStats", "[", "\"categories\"", "]", ":", "\n", "                ", "catTp", "=", "0", "\n", "catTp", "=", "np", ".", "count_nonzero", "(", "np", ".", "logical_and", "(", "mask", ",", "categoryMasks", "[", "category", "]", ")", ")", "\n", "catFn", "=", "instSize", "-", "catTp", "\n", "\n", "catTpWeighted", "=", "float", "(", "catTp", ")", "*", "weight", "\n", "catFnWeighted", "=", "float", "(", "catFn", ")", "*", "weight", "\n", "\n", "instanceStats", "[", "\"categories\"", "]", "[", "category", "]", "[", "\"tp\"", "]", "+=", "catTp", "\n", "instanceStats", "[", "\"categories\"", "]", "[", "category", "]", "[", "\"fn\"", "]", "+=", "catFn", "\n", "instanceStats", "[", "\"categories\"", "]", "[", "category", "]", "[", "\"tpWeighted\"", "]", "+=", "catTpWeighted", "\n", "instanceStats", "[", "\"categories\"", "]", "[", "category", "]", "[", "\"fnWeighted\"", "]", "+=", "catFnWeighted", "\n", "\n", "", "", "", "if", "args", ".", "evalPixelAccuracy", ":", "\n", "        ", "notIgnoredLabels", "=", "[", "l", "for", "l", "in", "args", ".", "evalLabels", "if", "not", "id2label", "[", "l", "]", ".", "ignoreInEval", "]", "\n", "notIgnoredPixels", "=", "np", ".", "in1d", "(", "groundTruthNp", ",", "notIgnoredLabels", ",", "invert", "=", "True", ")", ".", "reshape", "(", "groundTruthNp", ".", "shape", ")", "\n", "erroneousPixels", "=", "np", ".", "logical_and", "(", "notIgnoredPixels", ",", "(", "predictionNp", "!=", "groundTruthNp", ")", ")", "\n", "perImageStats", "[", "predictionImgFileName", "]", "=", "{", "}", "\n", "perImageStats", "[", "predictionImgFileName", "]", "[", "\"nbNotIgnoredPixels\"", "]", "=", "np", ".", "count_nonzero", "(", "notIgnoredPixels", ")", "\n", "perImageStats", "[", "predictionImgFileName", "]", "[", "\"nbCorrectPixels\"", "]", "=", "np", ".", "count_nonzero", "(", "erroneousPixels", ")", "\n", "\n", "", "return", "nbPixels", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalPixelLevelSemanticLabeling.main": [[655, 683], ["evalPixelLevelSemanticLabeling.evaluateImgLists", "len", "len", "glob.glob", "glob.glob.append", "printError", "predictionImgList.append", "predictionImgList.append", "evalPixelLevelSemanticLabeling.getPrediction"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalInstanceLevelSemanticLabeling.evaluateImgLists", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printError", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalInstanceLevelSemanticLabeling.getPrediction"], ["", "def", "main", "(", ")", ":", "\n", "    ", "global", "args", "\n", "argv", "=", "sys", ".", "argv", "[", "1", ":", "]", "\n", "\n", "predictionImgList", "=", "[", "]", "\n", "groundTruthImgList", "=", "[", "]", "\n", "\n", "# the image lists can either be provided as arguments", "\n", "if", "(", "len", "(", "argv", ")", ">", "3", ")", ":", "\n", "        ", "for", "arg", "in", "argv", ":", "\n", "            ", "if", "(", "\"gt\"", "in", "arg", "or", "\"groundtruth\"", "in", "arg", ")", ":", "\n", "                ", "groundTruthImgList", ".", "append", "(", "arg", ")", "\n", "", "elif", "(", "\"pred\"", "in", "arg", ")", ":", "\n", "                ", "predictionImgList", ".", "append", "(", "arg", ")", "\n", "# however the no-argument way is prefered", "\n", "", "", "", "elif", "len", "(", "argv", ")", "==", "0", ":", "\n", "# use the ground truth search string specified above", "\n", "        ", "groundTruthImgList", "=", "glob", ".", "glob", "(", "args", ".", "groundTruthSearch", ")", "\n", "if", "not", "groundTruthImgList", ":", "\n", "            ", "printError", "(", "\"Cannot find any ground truth images to use for evaluation. Searched for: {}\"", ".", "format", "(", "args", ".", "groundTruthSearch", ")", ")", "\n", "# get the corresponding prediction for each ground truth imag", "\n", "", "for", "gt", "in", "groundTruthImgList", ":", "\n", "            ", "predictionImgList", ".", "append", "(", "getPrediction", "(", "args", ",", "gt", ")", ")", "\n", "\n", "# evaluate", "\n", "", "", "evaluateImgLists", "(", "predictionImgList", ",", "groundTruthImgList", ",", "args", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.objectDetectionHelpers.EvaluationParameters.__init__": [[29, 48], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "labels_to_evaluate", ",", "# type: List[str]", "\n", "min_iou_to_match", "=", "0.7", ",", "# type: float", "\n", "max_depth", "=", "100", ",", "# type: int", "\n", "step_size", "=", "5", ",", "# type: int", "\n", "matching_method", "=", "MATCHING_AMODAL", ",", "# type: int", "\n", "cw", "=", "-", "1.", ",", "# type: float", "\n", "num_conf", "=", "50", "# type: int", "\n", ")", ":", "\n", "# type: (...) -> None", "\n", "\n", "        ", "self", ".", "_labels_to_evaluate", "=", "labels_to_evaluate", "\n", "self", ".", "_min_iou_to_match", "=", "min_iou_to_match", "\n", "self", ".", "_max_depth", "=", "max_depth", "\n", "self", ".", "_step_size", "=", "step_size", "\n", "self", ".", "_matching_method", "=", "matching_method", "\n", "self", ".", "_cw", "=", "cw", "\n", "self", ".", "_num_conf", "=", "num_conf", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.objectDetectionHelpers.EvaluationParameters.labels_to_evaluate": [[49, 52], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "labels_to_evaluate", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_labels_to_evaluate", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.objectDetectionHelpers.EvaluationParameters.min_iou_to_match": [[53, 56], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "min_iou_to_match", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_min_iou_to_match", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.objectDetectionHelpers.EvaluationParameters.max_depth": [[57, 60], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "max_depth", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_max_depth", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.objectDetectionHelpers.EvaluationParameters.step_size": [[61, 64], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "step_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_step_size", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.objectDetectionHelpers.EvaluationParameters.matching_method": [[65, 68], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "matching_method", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_matching_method", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.objectDetectionHelpers.EvaluationParameters.cw": [[73, 76], ["None"], "methods", ["None"], ["", "@", "cw", ".", "setter", "\n", "def", "cw", "(", "self", ",", "cw", ")", ":", "\n", "        ", "self", ".", "_cw", "=", "cw", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.objectDetectionHelpers.EvaluationParameters.num_conf": [[77, 80], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_conf", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_num_conf", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.objectDetectionHelpers.calcIouMatrix": [[82, 112], ["numpy.split", "numpy.split", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.maximum", "numpy.maximum", "numpy.transpose"], "function", ["None"], ["", "", "def", "calcIouMatrix", "(", "\n", "gts", ",", "# type: np.ndarray,", "\n", "preds", "# type: np.ndarray", "\n", ")", ":", "\n", "# type: (...) -> np.ndarray", "\n", "    ", "\"\"\"Calculates the pairwise Intersection Over Union (IoU)\n    matrix for a set of GTs and predictions.\n\n    Args:\n        gts (np.ndarray): GT boxes with shape Mx4\n        preds (np.ndarray): predictions with shape Nx4\n\n    Returns:\n        np.ndarray: IoU matrix with shape MxN\n    \"\"\"", "\n", "xmin_1", ",", "ymin_1", ",", "xmax_1", ",", "ymax_1", "=", "np", ".", "split", "(", "gts", ",", "4", ",", "axis", "=", "1", ")", "\n", "xmin_2", ",", "ymin_2", ",", "xmax_2", ",", "ymax_2", "=", "np", ".", "split", "(", "preds", ",", "4", ",", "axis", "=", "1", ")", "\n", "\n", "inter_xmin", "=", "np", ".", "maximum", "(", "xmin_1", ",", "np", ".", "transpose", "(", "xmin_2", ")", ")", "\n", "inter_ymin", "=", "np", ".", "maximum", "(", "ymin_1", ",", "np", ".", "transpose", "(", "ymin_2", ")", ")", "\n", "inter_xmax", "=", "np", ".", "minimum", "(", "xmax_1", ",", "np", ".", "transpose", "(", "xmax_2", ")", ")", "\n", "inter_ymax", "=", "np", ".", "minimum", "(", "ymax_1", ",", "np", ".", "transpose", "(", "ymax_2", ")", ")", "\n", "\n", "inter_area", "=", "np", ".", "maximum", "(", "(", "inter_xmax", "-", "inter_xmin", "+", "1", ")", ",", "0", ")", "*", "np", ".", "maximum", "(", "(", "inter_ymax", "-", "inter_ymin", "+", "1", ")", ",", "0", ")", "\n", "\n", "area_1", "=", "(", "xmax_1", "-", "xmin_1", "+", "1", ")", "*", "(", "ymax_1", "-", "ymin_1", "+", "1", ")", "\n", "area_2", "=", "(", "xmax_2", "-", "xmin_2", "+", "1", ")", "*", "(", "ymax_2", "-", "ymin_2", "+", "1", ")", "\n", "iou", "=", "inter_area", "/", "(", "area_1", "+", "np", ".", "transpose", "(", "area_2", ")", "-", "inter_area", "+", "1e-10", ")", "\n", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.objectDetectionHelpers.calcOverlapMatrix": [[114, 143], ["numpy.split", "numpy.split", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.maximum", "numpy.maximum", "numpy.transpose"], "function", ["None"], ["", "def", "calcOverlapMatrix", "(", "\n", "gt_ignores", ",", "# type: np.ndarray,", "\n", "preds", "# type: np.ndarray", "\n", ")", ":", "\n", "# type: (...) -> np.ndarray", "\n", "    ", "\"\"\"Calculates the overlap matrix for a set\n    of GT ignore regions and predictions.\n\n    Args:\n        gt_ignores (np.ndarray): GT ignore regions with shape Mx4\n        preds (np.ndarray): predictions with shape Nx4\n\n    Returns:\n        np.ndarray: overlap matrix with shape MxN\n    \"\"\"", "\n", "xmin_1", ",", "ymin_1", ",", "xmax_1", ",", "ymax_1", "=", "np", ".", "split", "(", "gt_ignores", ",", "4", ",", "axis", "=", "1", ")", "\n", "xmin_2", ",", "ymin_2", ",", "xmax_2", ",", "ymax_2", "=", "np", ".", "split", "(", "preds", ",", "4", ",", "axis", "=", "1", ")", "\n", "\n", "inter_xmin", "=", "np", ".", "maximum", "(", "xmin_1", ",", "np", ".", "transpose", "(", "xmin_2", ")", ")", "\n", "inter_ymin", "=", "np", ".", "maximum", "(", "ymin_1", ",", "np", ".", "transpose", "(", "ymin_2", ")", ")", "\n", "inter_xmax", "=", "np", ".", "minimum", "(", "xmax_1", ",", "np", ".", "transpose", "(", "xmax_2", ")", ")", "\n", "inter_ymax", "=", "np", ".", "minimum", "(", "ymax_1", ",", "np", ".", "transpose", "(", "ymax_2", ")", ")", "\n", "\n", "inter_area", "=", "np", ".", "maximum", "(", "(", "inter_xmax", "-", "inter_xmin", "+", "1", ")", ",", "0", ")", "*", "np", ".", "maximum", "(", "(", "inter_ymax", "-", "inter_ymin", "+", "1", ")", ",", "0", ")", "\n", "\n", "area_2", "=", "(", "xmax_2", "-", "xmin_2", "+", "1", ")", "*", "(", "ymax_2", "-", "ymin_2", "+", "1", ")", "\n", "overlap", "=", "inter_area", "/", "(", "np", ".", "transpose", "(", "area_2", ")", "+", "1e-10", ")", "\n", "\n", "return", "overlap", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.objectDetectionHelpers.getFiles": [[145, 170], ["os.walk", "file_list.sort", "f.endswith", "file_list.append", "os.path.join"], "function", ["None"], ["", "def", "getFiles", "(", "\n", "folder", ",", "# type: str", "\n", "suffix", "=", "\".json\"", ",", "# type: str", "\n", "exclude", "=", "[", "\"results.json\"", "]", "# type: List[str]", "\n", ")", ":", "\n", "# type: (...) -> List[str]", "\n", "    ", "\"\"\"Recursively walks through the folder and finds\n    returns all files that end with ``\"suffix\"``.\n\n    Args:\n        folder (str): the directory\n        suffix (str): the suffix used for filtering\n        exclude (List[str]): filenames to exclude\n\n    Returns:\n        List[str]: list of all found files\n    \"\"\"", "\n", "file_list", "=", "[", "]", "\n", "for", "root", ",", "_", ",", "filenames", "in", "os", ".", "walk", "(", "folder", ")", ":", "\n", "        ", "for", "f", "in", "filenames", ":", "\n", "            ", "if", "f", ".", "endswith", "(", "suffix", ")", "and", "f", "not", "in", "exclude", ":", "\n", "                ", "file_list", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "f", ")", ")", "\n", "", "", "", "file_list", ".", "sort", "(", ")", "\n", "\n", "return", "file_list", "\n", "", ""]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__init__": [[13, 19], ["int", "int", "int", "instance.Instance.getLabelID", "instance.Instance.getInstancePixels"], "methods", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.getLabelID", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.getInstancePixels"], ["def", "__init__", "(", "self", ",", "imgNp", ",", "instID", ")", ":", "\n", "        ", "if", "(", "instID", "==", "-", "1", ")", ":", "\n", "            ", "return", "\n", "", "self", ".", "instID", "=", "int", "(", "instID", ")", "\n", "self", ".", "labelID", "=", "int", "(", "self", ".", "getLabelID", "(", "instID", ")", ")", "\n", "self", ".", "pixelCount", "=", "int", "(", "self", ".", "getInstancePixels", "(", "imgNp", ",", "instID", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.getLabelID": [[20, 25], ["int"], "methods", ["None"], ["", "def", "getLabelID", "(", "self", ",", "instID", ")", ":", "\n", "        ", "if", "(", "instID", "<", "1000", ")", ":", "\n", "            ", "return", "instID", "\n", "", "else", ":", "\n", "            ", "return", "int", "(", "instID", "/", "1000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.getInstancePixels": [[26, 28], ["None"], "methods", ["None"], ["", "", "def", "getInstancePixels", "(", "self", ",", "imgNp", ",", "instLabel", ")", ":", "\n", "        ", "return", "(", "imgNp", "==", "instLabel", ")", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.toJSON": [[29, 31], ["json.dumps"], "methods", ["None"], ["", "def", "toJSON", "(", "self", ")", ":", "\n", "        ", "return", "json", ".", "dumps", "(", "self", ",", "default", "=", "lambda", "o", ":", "o", ".", "__dict__", ",", "sort_keys", "=", "True", ",", "indent", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.toDict": [[32, 40], ["None"], "methods", ["None"], ["", "def", "toDict", "(", "self", ")", ":", "\n", "        ", "buildDict", "=", "{", "}", "\n", "buildDict", "[", "\"instID\"", "]", "=", "self", ".", "instID", "\n", "buildDict", "[", "\"labelID\"", "]", "=", "self", ".", "labelID", "\n", "buildDict", "[", "\"pixelCount\"", "]", "=", "self", ".", "pixelCount", "\n", "buildDict", "[", "\"medDist\"", "]", "=", "self", ".", "medDist", "\n", "buildDict", "[", "\"distConf\"", "]", "=", "self", ".", "distConf", "\n", "return", "buildDict", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.fromJSON": [[41, 48], ["int", "int", "int", "float", "float"], "methods", ["None"], ["", "def", "fromJSON", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "instID", "=", "int", "(", "data", "[", "\"instID\"", "]", ")", "\n", "self", ".", "labelID", "=", "int", "(", "data", "[", "\"labelID\"", "]", ")", "\n", "self", ".", "pixelCount", "=", "int", "(", "data", "[", "\"pixelCount\"", "]", ")", "\n", "if", "(", "\"medDist\"", "in", "data", ")", ":", "\n", "            ", "self", ".", "medDist", "=", "float", "(", "data", "[", "\"medDist\"", "]", ")", "\n", "self", ".", "distConf", "=", "float", "(", "data", "[", "\"distConf\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instance.Instance.__str__": [[49, 51], ["str"], "methods", ["None"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"(\"", "+", "str", "(", "self", ".", "instID", ")", "+", "\")\"", "", "", "", ""]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalInstanceLevelSemanticLabeling.getPrediction": [[66, 104], ["getCsFileInfo", "os.path.abspath", "os.walk", "fnmatch.filter", "printError", "os.path.isdir", "printError", "walk.append", "os.path.join", "os.path.join", "os.path.join", "printError", "os.path.dirname", "os.path.realpath"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.csHelpers.getCsFileInfo", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printError", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printError", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printError"], ["def", "getPrediction", "(", "groundTruthFile", ",", "args", ")", ":", "\n", "# determine the prediction path, if the method is first called", "\n", "    ", "if", "not", "args", ".", "predictionPath", ":", "\n", "        ", "rootPath", "=", "None", "\n", "if", "'CITYSCAPES_RESULTS'", "in", "os", ".", "environ", ":", "\n", "            ", "rootPath", "=", "os", ".", "environ", "[", "'CITYSCAPES_RESULTS'", "]", "\n", "", "elif", "'CITYSCAPES_DATASET'", "in", "os", ".", "environ", ":", "\n", "            ", "rootPath", "=", "os", ".", "path", ".", "join", "(", "os", ".", "environ", "[", "'CITYSCAPES_DATASET'", "]", ",", "\"results\"", ")", "\n", "", "else", ":", "\n", "            ", "rootPath", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", ",", "'..'", ",", "'..'", ",", "'results'", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "rootPath", ")", ":", "\n", "            ", "printError", "(", "\"Could not find a result root folder. Please read the instructions of this method.\"", ")", "\n", "\n", "", "args", ".", "predictionPath", "=", "os", ".", "path", ".", "abspath", "(", "rootPath", ")", "\n", "\n", "# walk the prediction path, if not happened yet", "\n", "", "if", "not", "args", ".", "predictionWalk", ":", "\n", "        ", "walk", "=", "[", "]", "\n", "for", "root", ",", "dirnames", ",", "filenames", "in", "os", ".", "walk", "(", "args", ".", "predictionPath", ")", ":", "\n", "            ", "walk", ".", "append", "(", "(", "root", ",", "filenames", ")", ")", "\n", "", "args", ".", "predictionWalk", "=", "walk", "\n", "\n", "", "csFile", "=", "getCsFileInfo", "(", "groundTruthFile", ")", "\n", "filePattern", "=", "\"{}_{}_{}*.txt\"", ".", "format", "(", "csFile", ".", "city", ",", "csFile", ".", "sequenceNb", ",", "csFile", ".", "frameNb", ")", "\n", "\n", "predictionFile", "=", "None", "\n", "for", "root", ",", "filenames", "in", "args", ".", "predictionWalk", ":", "\n", "        ", "for", "filename", "in", "fnmatch", ".", "filter", "(", "filenames", ",", "filePattern", ")", ":", "\n", "            ", "if", "not", "predictionFile", ":", "\n", "                ", "predictionFile", "=", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", "\n", "", "else", ":", "\n", "                ", "printError", "(", "\"Found multiple predictions for ground truth {}\"", ".", "format", "(", "groundTruthFile", ")", ")", "\n", "\n", "", "", "", "if", "not", "predictionFile", ":", "\n", "        ", "printError", "(", "\"Found no prediction for ground truth {}\"", ".", "format", "(", "groundTruthFile", ")", ")", "\n", "\n", "", "return", "predictionFile", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalInstanceLevelSemanticLabeling.setInstanceLabels": [[151, 156], ["args.instLabels.append"], "function", ["None"], ["def", "setInstanceLabels", "(", "args", ")", ":", "\n", "    ", "args", ".", "instLabels", "=", "[", "]", "\n", "for", "label", "in", "labels", ":", "\n", "        ", "if", "label", ".", "hasInstances", "and", "not", "label", ".", "ignoreInEval", ":", "\n", "            ", "args", ".", "instLabels", ".", "append", "(", "label", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalInstanceLevelSemanticLabeling.readPredInfo": [[159, 184], ["os.path.isfile", "printError", "open", "line.split", "os.path.isabs", "os.path.join", "os.path.abspath", "int", "float", "len", "printError", "printError", "os.path.dirname", "os.path.commonprefix", "printError", "float"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printError", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printError", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printError", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printError"], ["", "", "", "def", "readPredInfo", "(", "predInfoFileName", ",", "args", ")", ":", "\n", "    ", "predInfo", "=", "{", "}", "\n", "if", "(", "not", "os", ".", "path", ".", "isfile", "(", "predInfoFileName", ")", ")", ":", "\n", "        ", "printError", "(", "\"Infofile '{}' for the predictions not found.\"", ".", "format", "(", "predInfoFileName", ")", ")", "\n", "", "with", "open", "(", "predInfoFileName", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "splittedLine", "=", "line", ".", "split", "(", "\" \"", ")", "\n", "if", "len", "(", "splittedLine", ")", "!=", "3", ":", "\n", "                ", "printError", "(", "\"Invalid prediction file. Expected content: relPathPrediction1 labelIDPrediction1 confidencePrediction1\"", ")", "\n", "", "if", "os", ".", "path", ".", "isabs", "(", "splittedLine", "[", "0", "]", ")", ":", "\n", "                ", "printError", "(", "\"Invalid prediction file. First entry in each line must be a relative path.\"", ")", "\n", "\n", "", "filename", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "predInfoFileName", ")", ",", "splittedLine", "[", "0", "]", ")", "\n", "filename", "=", "os", ".", "path", ".", "abspath", "(", "filename", ")", "\n", "\n", "# check if that file is actually somewhere within the prediction root", "\n", "if", "os", ".", "path", ".", "commonprefix", "(", "[", "filename", ",", "args", ".", "predictionPath", "]", ")", "!=", "args", ".", "predictionPath", ":", "\n", "                ", "printError", "(", "\"Predicted mask {} in prediction text file {} points outside of prediction path.\"", ".", "format", "(", "filename", ",", "predInfoFileName", ")", ")", "\n", "\n", "", "imageInfo", "=", "{", "}", "\n", "imageInfo", "[", "\"labelID\"", "]", "=", "int", "(", "float", "(", "splittedLine", "[", "1", "]", ")", ")", "\n", "imageInfo", "[", "\"conf\"", "]", "=", "float", "(", "splittedLine", "[", "2", "]", ")", "\n", "predInfo", "[", "filename", "]", "=", "imageInfo", "\n", "\n", "", "", "return", "predInfo", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalInstanceLevelSemanticLabeling.readGTImage": [[186, 188], ["Image.open"], "function", ["None"], ["", "def", "readGTImage", "(", "gtImageFileName", ",", "args", ")", ":", "\n", "    ", "return", "Image", ".", "open", "(", "gtImageFileName", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalInstanceLevelSemanticLabeling.getGtInstances": [[190, 206], ["os.path.isfile", "cityscapesscripts.evaluation.instances2dict.instances2dict", "writeDict2JSON", "print", "open", "json.load", "print"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.instances2dict.instances2dict", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.csHelpers.writeDict2JSON", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.configuration.load"], ["", "def", "getGtInstances", "(", "groundTruthList", ",", "args", ")", ":", "\n", "    ", "gtInstances", "=", "{", "}", "\n", "# if there is a global statistics json, then load it", "\n", "if", "(", "os", ".", "path", ".", "isfile", "(", "args", ".", "gtInstancesFile", ")", ")", ":", "\n", "        ", "if", "not", "args", ".", "quiet", ":", "\n", "            ", "print", "(", "\"Loading ground truth instances from JSON.\"", ")", "\n", "", "with", "open", "(", "args", ".", "gtInstancesFile", ")", "as", "json_file", ":", "\n", "            ", "gtInstances", "=", "json", ".", "load", "(", "json_file", ")", "\n", "# otherwise create it", "\n", "", "", "else", ":", "\n", "        ", "if", "(", "not", "args", ".", "quiet", ")", ":", "\n", "            ", "print", "(", "\"Creating ground truth instances from png files.\"", ")", "\n", "", "gtInstances", "=", "instances2dict", "(", "groundTruthList", ",", "not", "args", ".", "quiet", ")", "\n", "writeDict2JSON", "(", "gtInstances", ",", "args", ".", "gtInstancesFile", ")", "\n", "\n", "", "return", "gtInstances", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalInstanceLevelSemanticLabeling.filterGtInstances": [[208, 215], ["None"], "function", ["None"], ["", "def", "filterGtInstances", "(", "singleImageInstances", ",", "args", ")", ":", "\n", "    ", "instanceDict", "=", "{", "}", "\n", "for", "labelName", "in", "singleImageInstances", ":", "\n", "        ", "if", "not", "labelName", "in", "args", ".", "instLabels", ":", "\n", "            ", "continue", "\n", "", "instanceDict", "[", "labelName", "]", "=", "singleImageInstances", "[", "labelName", "]", "\n", "", "return", "instanceDict", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalInstanceLevelSemanticLabeling.matchGtWithPreds": [[217, 252], ["zip", "print", "os.path.abspath", "evalInstanceLevelSemanticLabeling.readGTImage", "evalInstanceLevelSemanticLabeling.readPredInfo", "evalInstanceLevelSemanticLabeling.filterGtInstances", "evalInstanceLevelSemanticLabeling.assignGt2Preds", "print", "print", "sys.stdout.flush", "len"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalInstanceLevelSemanticLabeling.readGTImage", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalInstanceLevelSemanticLabeling.readPredInfo", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalInstanceLevelSemanticLabeling.filterGtInstances", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalInstanceLevelSemanticLabeling.assignGt2Preds"], ["", "def", "matchGtWithPreds", "(", "predictionList", ",", "groundTruthList", ",", "gtInstances", ",", "args", ")", ":", "\n", "    ", "matches", "=", "{", "}", "\n", "if", "not", "args", ".", "quiet", ":", "\n", "        ", "print", "(", "\"Matching {} pairs of images...\"", ".", "format", "(", "len", "(", "predictionList", ")", ")", ")", "\n", "\n", "", "count", "=", "0", "\n", "for", "(", "pred", ",", "gt", ")", "in", "zip", "(", "predictionList", ",", "groundTruthList", ")", ":", "\n", "# key for dicts", "\n", "        ", "dictKey", "=", "os", ".", "path", ".", "abspath", "(", "gt", ")", "\n", "\n", "# Read input files", "\n", "gtImage", "=", "readGTImage", "(", "gt", ",", "args", ")", "\n", "predInfo", "=", "readPredInfo", "(", "pred", ",", "args", ")", "\n", "\n", "# Get and filter ground truth instances", "\n", "unfilteredInstances", "=", "gtInstances", "[", "dictKey", "]", "\n", "curGtInstancesOrig", "=", "filterGtInstances", "(", "unfilteredInstances", ",", "args", ")", "\n", "\n", "# Try to assign all predictions", "\n", "(", "curGtInstances", ",", "curPredInstances", ")", "=", "assignGt2Preds", "(", "curGtInstancesOrig", ",", "gtImage", ",", "predInfo", ",", "args", ")", "\n", "\n", "# append to global dict", "\n", "matches", "[", "dictKey", "]", "=", "{", "}", "\n", "matches", "[", "dictKey", "]", "[", "\"groundTruth\"", "]", "=", "curGtInstances", "\n", "matches", "[", "dictKey", "]", "[", "\"prediction\"", "]", "=", "curPredInstances", "\n", "\n", "count", "+=", "1", "\n", "if", "not", "args", ".", "quiet", ":", "\n", "            ", "print", "(", "\"\\rImages Processed: {}\"", ".", "format", "(", "count", ")", ",", "end", "=", "' '", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "", "if", "not", "args", ".", "quiet", ":", "\n", "        ", "print", "(", "\"\"", ")", "\n", "\n", "", "return", "matches", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalInstanceLevelSemanticLabeling.assignGt2Preds": [[254, 349], ["copy.deepcopy", "np.array", "np.in1d().reshape", "Image.open", "predImage.convert.convert", "np.array", "np.count_nonzero", "int", "np.count_nonzero", "enumerate", "predInstances[].append", "voidLabelIDList.append", "np.in1d", "np.logical_and", "np.count_nonzero", "np.logical_and", "gtInstance.copy", "predInstance.copy", "matchedGt.append", "[].append", "int"], "function", ["None"], ["", "def", "assignGt2Preds", "(", "gtInstancesOrig", ",", "gtImage", ",", "predInfo", ",", "args", ")", ":", "\n", "# In this method, we create two lists", "\n", "#  - predInstances: contains all predictions and their associated gt", "\n", "#  - gtInstances:   contains all gt instances and their associated predictions", "\n", "    ", "predInstances", "=", "{", "}", "\n", "predInstCount", "=", "0", "\n", "\n", "# Create a prediction array for each class", "\n", "for", "label", "in", "args", ".", "instLabels", ":", "\n", "        ", "predInstances", "[", "label", "]", "=", "[", "]", "\n", "\n", "# We already know about the gt instances", "\n", "# Add the matching information array", "\n", "", "gtInstances", "=", "deepcopy", "(", "gtInstancesOrig", ")", "\n", "for", "label", "in", "gtInstances", ":", "\n", "        ", "for", "gt", "in", "gtInstances", "[", "label", "]", ":", "\n", "            ", "gt", "[", "\"matchedPred\"", "]", "=", "[", "]", "\n", "\n", "# Make the gt a numpy array", "\n", "", "", "gtNp", "=", "np", ".", "array", "(", "gtImage", ")", "\n", "\n", "# Get a mask of void labels in the groundtruth", "\n", "voidLabelIDList", "=", "[", "]", "\n", "for", "label", "in", "labels", ":", "\n", "        ", "if", "label", ".", "ignoreInEval", ":", "\n", "            ", "voidLabelIDList", ".", "append", "(", "label", ".", "id", ")", "\n", "", "", "boolVoid", "=", "np", ".", "in1d", "(", "gtNp", ",", "voidLabelIDList", ")", ".", "reshape", "(", "gtNp", ".", "shape", ")", "\n", "\n", "# Loop through all prediction masks", "\n", "for", "predImageFile", "in", "predInfo", ":", "\n", "# Additional prediction info", "\n", "        ", "labelID", "=", "predInfo", "[", "predImageFile", "]", "[", "\"labelID\"", "]", "\n", "predConf", "=", "predInfo", "[", "predImageFile", "]", "[", "\"conf\"", "]", "\n", "\n", "# label name", "\n", "labelName", "=", "id2label", "[", "int", "(", "labelID", ")", "]", ".", "name", "\n", "\n", "# maybe we are not interested in that label", "\n", "if", "not", "labelName", "in", "args", ".", "instLabels", ":", "\n", "            ", "continue", "\n", "\n", "# Read the mask", "\n", "", "predImage", "=", "Image", ".", "open", "(", "predImageFile", ")", "\n", "predImage", "=", "predImage", ".", "convert", "(", "\"L\"", ")", "\n", "predNp", "=", "np", ".", "array", "(", "predImage", ")", "\n", "\n", "# make the image really binary, i.e. everything non-zero is part of the prediction", "\n", "boolPredInst", "=", "predNp", "!=", "0", "\n", "predPixelCount", "=", "np", ".", "count_nonzero", "(", "boolPredInst", ")", "\n", "\n", "# skip if actually empty", "\n", "if", "not", "predPixelCount", ":", "\n", "            ", "continue", "\n", "\n", "# The information we want to collect for this instance", "\n", "", "predInstance", "=", "{", "}", "\n", "predInstance", "[", "\"imgName\"", "]", "=", "predImageFile", "\n", "predInstance", "[", "\"predID\"", "]", "=", "predInstCount", "\n", "predInstance", "[", "\"labelID\"", "]", "=", "int", "(", "labelID", ")", "\n", "predInstance", "[", "\"pixelCount\"", "]", "=", "predPixelCount", "\n", "predInstance", "[", "\"confidence\"", "]", "=", "predConf", "\n", "# Determine the number of pixels overlapping void", "\n", "predInstance", "[", "\"voidIntersection\"", "]", "=", "np", ".", "count_nonzero", "(", "np", ".", "logical_and", "(", "boolVoid", ",", "boolPredInst", ")", ")", "\n", "\n", "# A list of all overlapping ground truth instances", "\n", "matchedGt", "=", "[", "]", "\n", "\n", "# Loop through all ground truth instances with matching label", "\n", "# This list contains all ground truth instances that distinguish groups", "\n", "# We do not know, if a certain instance is actually a single object or a group", "\n", "# e.g. car or cargroup", "\n", "# However, for now we treat both the same and do the rest later", "\n", "for", "(", "gtNum", ",", "gtInstance", ")", "in", "enumerate", "(", "gtInstancesOrig", "[", "labelName", "]", ")", ":", "\n", "\n", "            ", "intersection", "=", "np", ".", "count_nonzero", "(", "np", ".", "logical_and", "(", "gtNp", "==", "gtInstance", "[", "\"instID\"", "]", ",", "boolPredInst", ")", ")", "\n", "\n", "# If they intersect add them as matches to both dicts", "\n", "if", "(", "intersection", ">", "0", ")", ":", "\n", "                ", "gtCopy", "=", "gtInstance", ".", "copy", "(", ")", "\n", "predCopy", "=", "predInstance", ".", "copy", "(", ")", "\n", "\n", "# let the two know their intersection", "\n", "gtCopy", "[", "\"intersection\"", "]", "=", "intersection", "\n", "predCopy", "[", "\"intersection\"", "]", "=", "intersection", "\n", "\n", "# append ground truth to matches", "\n", "matchedGt", ".", "append", "(", "gtCopy", ")", "\n", "# append prediction to ground truth instance", "\n", "gtInstances", "[", "labelName", "]", "[", "gtNum", "]", "[", "\"matchedPred\"", "]", ".", "append", "(", "predCopy", ")", "\n", "\n", "", "", "predInstance", "[", "\"matchedGt\"", "]", "=", "matchedGt", "\n", "predInstCount", "+=", "1", "\n", "predInstances", "[", "labelName", "]", ".", "append", "(", "predInstance", ")", "\n", "\n", "", "return", "(", "gtInstances", ",", "predInstances", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalInstanceLevelSemanticLabeling.evaluateMatches": [[351, 547], ["np.zeros", "enumerate", "len", "len", "printError", "len", "len", "printError", "zip", "enumerate", "len", "len", "len", "enumerate", "np.empty", "np.empty", "np.ones", "np.zeros", "enumerate", "np.append", "np.append", "np.argsort", "np.cumsum", "np.unique", "len", "np.zeros", "np.zeros", "np.append", "enumerate", "np.copy", "np.append", "np.append", "np.convolve", "np.dot", "len", "np.ones", "len", "len", "float", "len", "float", "float", "float", "float", "float", "float", "np.append", "np.append", "max", "min", "np.append", "np.append", "np.append"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printError", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printError"], ["", "def", "evaluateMatches", "(", "matches", ",", "args", ")", ":", "\n", "# In the end, we need two vectors for each class and for each overlap", "\n", "# The first vector (y_true) is binary and is 1, where the ground truth says true,", "\n", "# and is 0 otherwise.", "\n", "# The second vector (y_score) is float [0...1] and represents the confidence of", "\n", "# the prediction.", "\n", "#", "\n", "# We represent the following cases as:", "\n", "#                                       | y_true |   y_score", "\n", "#   gt instance with matched prediction |    1   | confidence", "\n", "#   gt instance w/o  matched prediction |    1   |     0.0", "\n", "#          false positive prediction    |    0   | confidence", "\n", "#", "\n", "# The current implementation makes only sense for an overlap threshold >= 0.5,", "\n", "# since only then, a single prediction can either be ignored or matched, but", "\n", "# never both. Further, it can never match to two gt instances.", "\n", "# For matching, we vary the overlap and do the following steps:", "\n", "#   1.) remove all predictions that satisfy the overlap criterion with an ignore region (either void or *group)", "\n", "#   2.) remove matches that do not satisfy the overlap", "\n", "#   3.) mark non-matched predictions as false positive", "\n", "\n", "# AP", "\n", "    ", "overlaps", "=", "args", ".", "overlaps", "\n", "# region size", "\n", "minRegionSizes", "=", "args", ".", "minRegionSizes", "\n", "# distance thresholds", "\n", "distThs", "=", "args", ".", "distanceThs", "\n", "# distance confidences", "\n", "distConfs", "=", "args", ".", "distanceConfs", "\n", "# only keep the first, if distances are not available", "\n", "if", "not", "args", ".", "distanceAvailable", ":", "\n", "        ", "minRegionSizes", "=", "[", "minRegionSizes", "[", "0", "]", "]", "\n", "distThs", "=", "[", "distThs", "[", "0", "]", "]", "\n", "distConfs", "=", "[", "distConfs", "[", "0", "]", "]", "\n", "\n", "# last three must be of same size", "\n", "", "if", "len", "(", "distThs", ")", "!=", "len", "(", "minRegionSizes", ")", ":", "\n", "        ", "printError", "(", "\"Number of distance thresholds and region sizes different\"", ")", "\n", "", "if", "len", "(", "distThs", ")", "!=", "len", "(", "distConfs", ")", ":", "\n", "        ", "printError", "(", "\"Number of distance thresholds and confidences different\"", ")", "\n", "\n", "# Here we hold the results", "\n", "# First dimension is class, second overlap", "\n", "", "ap", "=", "np", ".", "zeros", "(", "(", "len", "(", "distThs", ")", ",", "len", "(", "args", ".", "instLabels", ")", ",", "len", "(", "overlaps", ")", ")", ",", "np", ".", "float", ")", "\n", "\n", "for", "dI", ",", "(", "minRegionSize", ",", "distanceTh", ",", "distanceConf", ")", "in", "enumerate", "(", "zip", "(", "minRegionSizes", ",", "distThs", ",", "distConfs", ")", ")", ":", "\n", "        ", "for", "(", "oI", ",", "overlapTh", ")", "in", "enumerate", "(", "overlaps", ")", ":", "\n", "            ", "for", "(", "lI", ",", "labelName", ")", "in", "enumerate", "(", "args", ".", "instLabels", ")", ":", "\n", "                ", "y_true", "=", "np", ".", "empty", "(", "0", ")", "\n", "y_score", "=", "np", ".", "empty", "(", "0", ")", "\n", "# count hard false negatives", "\n", "hardFns", "=", "0", "\n", "# found at least one gt and predicted instance?", "\n", "haveGt", "=", "False", "\n", "havePred", "=", "False", "\n", "\n", "for", "img", "in", "matches", ":", "\n", "                    ", "predInstances", "=", "matches", "[", "img", "]", "[", "\"prediction\"", "]", "[", "labelName", "]", "\n", "gtInstances", "=", "matches", "[", "img", "]", "[", "\"groundTruth\"", "]", "[", "labelName", "]", "\n", "# filter groups in ground truth", "\n", "gtInstances", "=", "[", "gt", "for", "gt", "in", "gtInstances", "if", "gt", "[", "\"instID\"", "]", ">=", "1000", "and", "gt", "[", "\"pixelCount\"", "]", ">=", "minRegionSize", "and", "gt", "[", "\"medDist\"", "]", "<=", "distanceTh", "and", "gt", "[", "\"distConf\"", "]", ">=", "distanceConf", "]", "\n", "\n", "if", "gtInstances", ":", "\n", "                        ", "haveGt", "=", "True", "\n", "", "if", "predInstances", ":", "\n", "                        ", "havePred", "=", "True", "\n", "\n", "", "curTrue", "=", "np", ".", "ones", "(", "len", "(", "gtInstances", ")", ")", "\n", "curScore", "=", "np", ".", "ones", "(", "len", "(", "gtInstances", ")", ")", "*", "(", "-", "float", "(", "\"inf\"", ")", ")", "\n", "curMatch", "=", "np", ".", "zeros", "(", "len", "(", "gtInstances", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "\n", "# collect matches", "\n", "for", "(", "gtI", ",", "gt", ")", "in", "enumerate", "(", "gtInstances", ")", ":", "\n", "                        ", "foundMatch", "=", "False", "\n", "for", "pred", "in", "gt", "[", "\"matchedPred\"", "]", ":", "\n", "                            ", "overlap", "=", "float", "(", "pred", "[", "\"intersection\"", "]", ")", "/", "(", "gt", "[", "\"pixelCount\"", "]", "+", "pred", "[", "\"pixelCount\"", "]", "-", "pred", "[", "\"intersection\"", "]", ")", "\n", "if", "overlap", ">", "overlapTh", ":", "\n", "# the score", "\n", "                                ", "confidence", "=", "pred", "[", "\"confidence\"", "]", "\n", "\n", "# if we already hat a prediction for this groundtruth", "\n", "# the prediction with the lower score is automatically a false positive", "\n", "if", "curMatch", "[", "gtI", "]", ":", "\n", "                                    ", "maxScore", "=", "max", "(", "curScore", "[", "gtI", "]", ",", "confidence", ")", "\n", "minScore", "=", "min", "(", "curScore", "[", "gtI", "]", ",", "confidence", ")", "\n", "curScore", "[", "gtI", "]", "=", "maxScore", "\n", "# append false positive", "\n", "curTrue", "=", "np", ".", "append", "(", "curTrue", ",", "0", ")", "\n", "curScore", "=", "np", ".", "append", "(", "curScore", ",", "minScore", ")", "\n", "curMatch", "=", "np", ".", "append", "(", "curMatch", ",", "True", ")", "\n", "# otherwise set score", "\n", "", "else", ":", "\n", "                                    ", "foundMatch", "=", "True", "\n", "curMatch", "[", "gtI", "]", "=", "True", "\n", "curScore", "[", "gtI", "]", "=", "confidence", "\n", "\n", "", "", "", "if", "not", "foundMatch", ":", "\n", "                            ", "hardFns", "+=", "1", "\n", "\n", "# remove non-matched ground truth instances", "\n", "", "", "curTrue", "=", "curTrue", "[", "curMatch", "==", "True", "]", "\n", "curScore", "=", "curScore", "[", "curMatch", "==", "True", "]", "\n", "\n", "# collect non-matched predictions as false positive", "\n", "for", "pred", "in", "predInstances", ":", "\n", "                        ", "foundGt", "=", "False", "\n", "for", "gt", "in", "pred", "[", "\"matchedGt\"", "]", ":", "\n", "                            ", "overlap", "=", "float", "(", "gt", "[", "\"intersection\"", "]", ")", "/", "(", "gt", "[", "\"pixelCount\"", "]", "+", "pred", "[", "\"pixelCount\"", "]", "-", "gt", "[", "\"intersection\"", "]", ")", "\n", "if", "overlap", ">", "overlapTh", ":", "\n", "                                ", "foundGt", "=", "True", "\n", "break", "\n", "", "", "if", "not", "foundGt", ":", "\n", "# collect number of void and *group pixels", "\n", "                            ", "nbIgnorePixels", "=", "pred", "[", "\"voidIntersection\"", "]", "\n", "for", "gt", "in", "pred", "[", "\"matchedGt\"", "]", ":", "\n", "# group?", "\n", "                                ", "if", "gt", "[", "\"instID\"", "]", "<", "1000", ":", "\n", "                                    ", "nbIgnorePixels", "+=", "gt", "[", "\"intersection\"", "]", "\n", "# small ground truth instances", "\n", "", "if", "gt", "[", "\"pixelCount\"", "]", "<", "minRegionSize", "or", "gt", "[", "\"medDist\"", "]", ">", "distanceTh", "or", "gt", "[", "\"distConf\"", "]", "<", "distanceConf", ":", "\n", "                                    ", "nbIgnorePixels", "+=", "gt", "[", "\"intersection\"", "]", "\n", "", "", "proportionIgnore", "=", "float", "(", "nbIgnorePixels", ")", "/", "pred", "[", "\"pixelCount\"", "]", "\n", "# if not ignored", "\n", "# append false positive", "\n", "if", "proportionIgnore", "<=", "overlapTh", ":", "\n", "                                ", "curTrue", "=", "np", ".", "append", "(", "curTrue", ",", "0", ")", "\n", "confidence", "=", "pred", "[", "\"confidence\"", "]", "\n", "curScore", "=", "np", ".", "append", "(", "curScore", ",", "confidence", ")", "\n", "\n", "# append to overall results", "\n", "", "", "", "y_true", "=", "np", ".", "append", "(", "y_true", ",", "curTrue", ")", "\n", "y_score", "=", "np", ".", "append", "(", "y_score", ",", "curScore", ")", "\n", "\n", "# compute the average precision", "\n", "", "if", "haveGt", "and", "havePred", ":", "\n", "# compute precision recall curve first", "\n", "\n", "# sorting and cumsum", "\n", "                    ", "scoreArgSort", "=", "np", ".", "argsort", "(", "y_score", ")", "\n", "yScoreSorted", "=", "y_score", "[", "scoreArgSort", "]", "\n", "yTrueSorted", "=", "y_true", "[", "scoreArgSort", "]", "\n", "yTrueSortedCumsum", "=", "np", ".", "cumsum", "(", "yTrueSorted", ")", "\n", "\n", "# unique thresholds", "\n", "(", "thresholds", ",", "uniqueIndices", ")", "=", "np", ".", "unique", "(", "yScoreSorted", ",", "return_index", "=", "True", ")", "\n", "\n", "# since we need to add an artificial point to the precision-recall curve", "\n", "# increase its length by 1", "\n", "nbPrecRecall", "=", "len", "(", "uniqueIndices", ")", "+", "1", "\n", "\n", "# prepare precision recall", "\n", "nbExamples", "=", "len", "(", "yScoreSorted", ")", "\n", "nbTrueExamples", "=", "yTrueSortedCumsum", "[", "-", "1", "]", "\n", "precision", "=", "np", ".", "zeros", "(", "nbPrecRecall", ")", "\n", "recall", "=", "np", ".", "zeros", "(", "nbPrecRecall", ")", "\n", "\n", "# deal with the first point", "\n", "# only thing we need to do, is to append a zero to the cumsum at the end.", "\n", "# an index of -1 uses that zero then", "\n", "yTrueSortedCumsum", "=", "np", ".", "append", "(", "yTrueSortedCumsum", ",", "0", ")", "\n", "\n", "# deal with remaining", "\n", "for", "idxRes", ",", "idxScores", "in", "enumerate", "(", "uniqueIndices", ")", ":", "\n", "                        ", "cumSum", "=", "yTrueSortedCumsum", "[", "idxScores", "-", "1", "]", "\n", "tp", "=", "nbTrueExamples", "-", "cumSum", "\n", "fp", "=", "nbExamples", "-", "idxScores", "-", "tp", "\n", "fn", "=", "cumSum", "+", "hardFns", "\n", "p", "=", "float", "(", "tp", ")", "/", "(", "tp", "+", "fp", ")", "\n", "r", "=", "float", "(", "tp", ")", "/", "(", "tp", "+", "fn", ")", "\n", "precision", "[", "idxRes", "]", "=", "p", "\n", "recall", "[", "idxRes", "]", "=", "r", "\n", "\n", "# first point in curve is artificial", "\n", "", "precision", "[", "-", "1", "]", "=", "1.", "\n", "recall", "[", "-", "1", "]", "=", "0.", "\n", "\n", "# compute average of precision-recall curve", "\n", "# integration is performed via zero order, or equivalently step-wise integration", "\n", "# first compute the widths of each step:", "\n", "# use a convolution with appropriate kernel, manually deal with the boundaries first", "\n", "recallForConv", "=", "np", ".", "copy", "(", "recall", ")", "\n", "recallForConv", "=", "np", ".", "append", "(", "recallForConv", "[", "0", "]", ",", "recallForConv", ")", "\n", "recallForConv", "=", "np", ".", "append", "(", "recallForConv", ",", "0.", ")", "\n", "\n", "stepWidths", "=", "np", ".", "convolve", "(", "recallForConv", ",", "[", "-", "0.5", ",", "0", ",", "0.5", "]", ",", "'valid'", ")", "\n", "\n", "# integrate is now simply a dot product", "\n", "apCurrent", "=", "np", ".", "dot", "(", "precision", ",", "stepWidths", ")", "\n", "\n", "", "elif", "haveGt", ":", "\n", "                    ", "apCurrent", "=", "0.0", "\n", "", "else", ":", "\n", "                    ", "apCurrent", "=", "float", "(", "'nan'", ")", "\n", "", "ap", "[", "dI", ",", "lI", ",", "oI", "]", "=", "apCurrent", "\n", "\n", "", "", "", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalInstanceLevelSemanticLabeling.computeAverages": [[548, 575], ["np.argmax", "np.where", "np.where", "np.where", "np.nanmean", "np.nanmean", "enumerate", "np.isclose", "np.isclose", "np.isclose", "np.nanmean", "np.nanmean", "np.nanmean", "np.average", "np.average", "np.average", "np.average", "np.average"], "function", ["None"], ["", "def", "computeAverages", "(", "aps", ",", "args", ")", ":", "\n", "# max distance index", "\n", "    ", "dInf", "=", "np", ".", "argmax", "(", "args", ".", "distanceThs", ")", "\n", "d50m", "=", "np", ".", "where", "(", "np", ".", "isclose", "(", "args", ".", "distanceThs", ",", "50.", ")", ")", "\n", "d100m", "=", "np", ".", "where", "(", "np", ".", "isclose", "(", "args", ".", "distanceThs", ",", "100.", ")", ")", "\n", "o50", "=", "np", ".", "where", "(", "np", ".", "isclose", "(", "args", ".", "overlaps", ",", "0.5", ")", ")", "\n", "\n", "avgDict", "=", "{", "}", "\n", "avgDict", "[", "\"allAp\"", "]", "=", "np", ".", "nanmean", "(", "aps", "[", "dInf", ",", ":", ",", ":", "]", ")", "\n", "avgDict", "[", "\"allAp50%\"", "]", "=", "np", ".", "nanmean", "(", "aps", "[", "dInf", ",", ":", ",", "o50", "]", ")", "\n", "\n", "if", "args", ".", "distanceAvailable", ":", "\n", "        ", "avgDict", "[", "\"allAp50m\"", "]", "=", "np", ".", "nanmean", "(", "aps", "[", "d50m", ",", ":", ",", ":", "]", ")", "\n", "avgDict", "[", "\"allAp100m\"", "]", "=", "np", ".", "nanmean", "(", "aps", "[", "d100m", ",", ":", ",", ":", "]", ")", "\n", "avgDict", "[", "\"allAp50%50m\"", "]", "=", "np", ".", "nanmean", "(", "aps", "[", "d50m", ",", ":", ",", "o50", "]", ")", "\n", "\n", "", "avgDict", "[", "\"classes\"", "]", "=", "{", "}", "\n", "for", "(", "lI", ",", "labelName", ")", "in", "enumerate", "(", "args", ".", "instLabels", ")", ":", "\n", "        ", "avgDict", "[", "\"classes\"", "]", "[", "labelName", "]", "=", "{", "}", "\n", "avgDict", "[", "\"classes\"", "]", "[", "labelName", "]", "[", "\"ap\"", "]", "=", "np", ".", "average", "(", "aps", "[", "dInf", ",", "lI", ",", ":", "]", ")", "\n", "avgDict", "[", "\"classes\"", "]", "[", "labelName", "]", "[", "\"ap50%\"", "]", "=", "np", ".", "average", "(", "aps", "[", "dInf", ",", "lI", ",", "o50", "]", ")", "\n", "if", "args", ".", "distanceAvailable", ":", "\n", "            ", "avgDict", "[", "\"classes\"", "]", "[", "labelName", "]", "[", "\"ap50m\"", "]", "=", "np", ".", "average", "(", "aps", "[", "d50m", ",", "lI", ",", ":", "]", ")", "\n", "avgDict", "[", "\"classes\"", "]", "[", "labelName", "]", "[", "\"ap100m\"", "]", "=", "np", ".", "average", "(", "aps", "[", "d100m", ",", "lI", ",", ":", "]", ")", "\n", "avgDict", "[", "\"classes\"", "]", "[", "labelName", "]", "[", "\"ap50%50m\"", "]", "=", "np", ".", "average", "(", "aps", "[", "d50m", ",", "lI", ",", "o50", "]", ")", "\n", "\n", "", "", "return", "avgDict", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalInstanceLevelSemanticLabeling.printResults": [[576, 638], ["print", "print", "enumerate", "print", "print", "print", "print", "print", "print", "getColorEntry", "getColorEntry", "getColorEntry", "getColorEntry", "getColorEntry", "getColorEntry", "getColorEntry", "getColorEntry", "getColorEntry", "getColorEntry"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.csHelpers.getColorEntry", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.csHelpers.getColorEntry", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.csHelpers.getColorEntry", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.csHelpers.getColorEntry", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.csHelpers.getColorEntry", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.csHelpers.getColorEntry", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.csHelpers.getColorEntry", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.csHelpers.getColorEntry", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.csHelpers.getColorEntry", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.csHelpers.getColorEntry"], ["", "def", "printResults", "(", "avgDict", ",", "args", ")", ":", "\n", "    ", "sep", "=", "(", "\",\"", "if", "args", ".", "csv", "else", "\"\"", ")", "\n", "col1", "=", "(", "\":\"", "if", "not", "args", ".", "csv", "else", "\"\"", ")", "\n", "noCol", "=", "(", "colors", ".", "ENDC", "if", "args", ".", "colorized", "else", "\"\"", ")", "\n", "bold", "=", "(", "colors", ".", "BOLD", "if", "args", ".", "colorized", "else", "\"\"", ")", "\n", "lineLen", "=", "50", "\n", "if", "args", ".", "distanceAvailable", ":", "\n", "        ", "lineLen", "+=", "40", "\n", "\n", "", "print", "(", "\"\"", ")", "\n", "if", "not", "args", ".", "csv", ":", "\n", "        ", "print", "(", "\"#\"", "*", "lineLen", ")", "\n", "", "line", "=", "bold", "\n", "line", "+=", "\"{:<15}\"", ".", "format", "(", "\"what\"", ")", "+", "sep", "+", "col1", "\n", "line", "+=", "\"{:>15}\"", ".", "format", "(", "\"AP\"", ")", "+", "sep", "\n", "line", "+=", "\"{:>15}\"", ".", "format", "(", "\"AP_50%\"", ")", "+", "sep", "\n", "if", "args", ".", "distanceAvailable", ":", "\n", "        ", "line", "+=", "\"{:>15}\"", ".", "format", "(", "\"AP_50m\"", ")", "+", "sep", "\n", "line", "+=", "\"{:>15}\"", ".", "format", "(", "\"AP_100m\"", ")", "+", "sep", "\n", "line", "+=", "\"{:>15}\"", ".", "format", "(", "\"AP_50%50m\"", ")", "+", "sep", "\n", "", "line", "+=", "noCol", "\n", "print", "(", "line", ")", "\n", "if", "not", "args", ".", "csv", ":", "\n", "        ", "print", "(", "\"#\"", "*", "lineLen", ")", "\n", "\n", "", "for", "(", "lI", ",", "labelName", ")", "in", "enumerate", "(", "args", ".", "instLabels", ")", ":", "\n", "        ", "apAvg", "=", "avgDict", "[", "\"classes\"", "]", "[", "labelName", "]", "[", "\"ap\"", "]", "\n", "ap50o", "=", "avgDict", "[", "\"classes\"", "]", "[", "labelName", "]", "[", "\"ap50%\"", "]", "\n", "if", "args", ".", "distanceAvailable", ":", "\n", "            ", "ap50m", "=", "avgDict", "[", "\"classes\"", "]", "[", "labelName", "]", "[", "\"ap50m\"", "]", "\n", "ap100m", "=", "avgDict", "[", "\"classes\"", "]", "[", "labelName", "]", "[", "\"ap100m\"", "]", "\n", "ap5050", "=", "avgDict", "[", "\"classes\"", "]", "[", "labelName", "]", "[", "\"ap50%50m\"", "]", "\n", "\n", "", "line", "=", "\"{:<15}\"", ".", "format", "(", "labelName", ")", "+", "sep", "+", "col1", "\n", "line", "+=", "getColorEntry", "(", "apAvg", ",", "args", ")", "+", "sep", "+", "\"{:>15.3f}\"", ".", "format", "(", "apAvg", ")", "+", "sep", "\n", "line", "+=", "getColorEntry", "(", "ap50o", ",", "args", ")", "+", "sep", "+", "\"{:>15.3f}\"", ".", "format", "(", "ap50o", ")", "+", "sep", "\n", "if", "args", ".", "distanceAvailable", ":", "\n", "            ", "line", "+=", "getColorEntry", "(", "ap50m", ",", "args", ")", "+", "sep", "+", "\"{:>15.3f}\"", ".", "format", "(", "ap50m", ")", "+", "sep", "\n", "line", "+=", "getColorEntry", "(", "ap100m", ",", "args", ")", "+", "sep", "+", "\"{:>15.3f}\"", ".", "format", "(", "ap100m", ")", "+", "sep", "\n", "line", "+=", "getColorEntry", "(", "ap5050", ",", "args", ")", "+", "sep", "+", "\"{:>15.3f}\"", ".", "format", "(", "ap5050", ")", "+", "sep", "\n", "", "line", "+=", "noCol", "\n", "print", "(", "line", ")", "\n", "\n", "", "allApAvg", "=", "avgDict", "[", "\"allAp\"", "]", "\n", "allAp50o", "=", "avgDict", "[", "\"allAp50%\"", "]", "\n", "if", "args", ".", "distanceAvailable", ":", "\n", "        ", "allAp50m", "=", "avgDict", "[", "\"allAp50m\"", "]", "\n", "allAp100m", "=", "avgDict", "[", "\"allAp100m\"", "]", "\n", "allAp5050", "=", "avgDict", "[", "\"allAp50%50m\"", "]", "\n", "\n", "", "if", "not", "args", ".", "csv", ":", "\n", "            ", "print", "(", "\"-\"", "*", "lineLen", ")", "\n", "", "line", "=", "\"{:<15}\"", ".", "format", "(", "\"average\"", ")", "+", "sep", "+", "col1", "\n", "line", "+=", "getColorEntry", "(", "allApAvg", ",", "args", ")", "+", "sep", "+", "\"{:>15.3f}\"", ".", "format", "(", "allApAvg", ")", "+", "sep", "\n", "line", "+=", "getColorEntry", "(", "allAp50o", ",", "args", ")", "+", "sep", "+", "\"{:>15.3f}\"", ".", "format", "(", "allAp50o", ")", "+", "sep", "\n", "if", "args", ".", "distanceAvailable", ":", "\n", "        ", "line", "+=", "getColorEntry", "(", "allAp50m", ",", "args", ")", "+", "sep", "+", "\"{:>15.3f}\"", ".", "format", "(", "allAp50m", ")", "+", "sep", "\n", "line", "+=", "getColorEntry", "(", "allAp100m", ",", "args", ")", "+", "sep", "+", "\"{:>15.3f}\"", ".", "format", "(", "allAp100m", ")", "+", "sep", "\n", "line", "+=", "getColorEntry", "(", "allAp5050", ",", "args", ")", "+", "sep", "+", "\"{:>15.3f}\"", ".", "format", "(", "allAp5050", ")", "+", "sep", "\n", "", "line", "+=", "noCol", "\n", "print", "(", "line", ")", "\n", "print", "(", "\"\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalInstanceLevelSemanticLabeling.prepareJSONDataForResults": [[639, 650], ["args.overlaps.tolist", "args.minRegionSizes.tolist", "args.distanceThs.tolist", "args.distanceConfs.tolist", "aps.tolist"], "function", ["None"], ["", "def", "prepareJSONDataForResults", "(", "avgDict", ",", "aps", ",", "args", ")", ":", "\n", "    ", "JSONData", "=", "{", "}", "\n", "JSONData", "[", "\"averages\"", "]", "=", "avgDict", "\n", "JSONData", "[", "\"overlaps\"", "]", "=", "args", ".", "overlaps", ".", "tolist", "(", ")", "\n", "JSONData", "[", "\"minRegionSizes\"", "]", "=", "args", ".", "minRegionSizes", ".", "tolist", "(", ")", "\n", "JSONData", "[", "\"distanceThresholds\"", "]", "=", "args", ".", "distanceThs", ".", "tolist", "(", ")", "\n", "JSONData", "[", "\"minStereoDensities\"", "]", "=", "args", ".", "distanceConfs", ".", "tolist", "(", ")", "\n", "JSONData", "[", "\"instLabels\"", "]", "=", "args", ".", "instLabels", "\n", "JSONData", "[", "\"resultApMatrix\"", "]", "=", "aps", ".", "tolist", "(", ")", "\n", "\n", "return", "JSONData", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalInstanceLevelSemanticLabeling.evaluateImgLists": [[652, 678], ["evalInstanceLevelSemanticLabeling.setInstanceLabels", "evalInstanceLevelSemanticLabeling.getGtInstances", "evalInstanceLevelSemanticLabeling.matchGtWithPreds", "writeDict2JSON", "evalInstanceLevelSemanticLabeling.evaluateMatches", "evalInstanceLevelSemanticLabeling.computeAverages", "evalInstanceLevelSemanticLabeling.prepareJSONDataForResults", "os.path.dirname", "ensurePath", "writeDict2JSON", "evalInstanceLevelSemanticLabeling.printResults"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalInstanceLevelSemanticLabeling.setInstanceLabels", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalInstanceLevelSemanticLabeling.getGtInstances", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalInstanceLevelSemanticLabeling.matchGtWithPreds", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.csHelpers.writeDict2JSON", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalInstanceLevelSemanticLabeling.evaluateMatches", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalInstanceLevelSemanticLabeling.computeAverages", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalInstanceLevelSemanticLabeling.prepareJSONDataForResults", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.csHelpers.ensurePath", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.csHelpers.writeDict2JSON", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalInstanceLevelSemanticLabeling.printResults"], ["", "def", "evaluateImgLists", "(", "predictionList", ",", "groundTruthList", ",", "args", ")", ":", "\n", "# determine labels of interest", "\n", "    ", "setInstanceLabels", "(", "args", ")", "\n", "# get dictionary of all ground truth instances", "\n", "gtInstances", "=", "getGtInstances", "(", "groundTruthList", ",", "args", ")", "\n", "# match predictions and ground truth", "\n", "matches", "=", "matchGtWithPreds", "(", "predictionList", ",", "groundTruthList", ",", "gtInstances", ",", "args", ")", "\n", "writeDict2JSON", "(", "matches", ",", "\"matches.json\"", ")", "\n", "# evaluate matches", "\n", "apScores", "=", "evaluateMatches", "(", "matches", ",", "args", ")", "\n", "# averages", "\n", "avgDict", "=", "computeAverages", "(", "apScores", ",", "args", ")", "\n", "# result dict", "\n", "resDict", "=", "prepareJSONDataForResults", "(", "avgDict", ",", "apScores", ",", "args", ")", "\n", "if", "args", ".", "JSONOutput", ":", "\n", "# create output folder if necessary", "\n", "        ", "path", "=", "os", ".", "path", ".", "dirname", "(", "args", ".", "exportFile", ")", "\n", "ensurePath", "(", "path", ")", "\n", "# Write APs to JSON", "\n", "writeDict2JSON", "(", "resDict", ",", "args", ".", "exportFile", ")", "\n", "\n", "", "if", "not", "args", ".", "quiet", ":", "\n", "# Print results", "\n", "        ", "printResults", "(", "avgDict", ",", "args", ")", "\n", "\n", "", "return", "resDict", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalInstanceLevelSemanticLabeling.main": [[680, 712], ["print", "print", "evalInstanceLevelSemanticLabeling.evaluateImgLists", "len", "len", "glob.glob", "glob.glob.append", "printError", "predictionImgList.append", "predictionImgList.append", "evalInstanceLevelSemanticLabeling.getPrediction"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalInstanceLevelSemanticLabeling.evaluateImgLists", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printError", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.evalInstanceLevelSemanticLabeling.getPrediction"], ["", "def", "main", "(", ")", ":", "\n", "    ", "global", "args", "\n", "argv", "=", "sys", ".", "argv", "[", "1", ":", "]", "\n", "\n", "predictionImgList", "=", "[", "]", "\n", "groundTruthImgList", "=", "[", "]", "\n", "\n", "# the image lists can either be provided as arguments", "\n", "if", "(", "len", "(", "argv", ")", ">", "3", ")", ":", "\n", "        ", "for", "arg", "in", "argv", ":", "\n", "            ", "if", "(", "\"gt\"", "in", "arg", "or", "\"groundtruth\"", "in", "arg", ")", ":", "\n", "                ", "groundTruthImgList", ".", "append", "(", "arg", ")", "\n", "", "elif", "(", "\"pred\"", "in", "arg", ")", ":", "\n", "                ", "predictionImgList", ".", "append", "(", "arg", ")", "\n", "# however the no-argument way is prefered", "\n", "", "", "", "elif", "len", "(", "argv", ")", "==", "0", ":", "\n", "# use the ground truth search string specified above", "\n", "        ", "groundTruthImgList", "=", "glob", ".", "glob", "(", "args", ".", "groundTruthSearch", ")", "\n", "if", "not", "groundTruthImgList", ":", "\n", "            ", "printError", "(", "\"Cannot find any ground truth images to use for evaluation. Searched for: {}\"", ".", "format", "(", "args", ".", "groundTruthSearch", ")", ")", "\n", "# get the corresponding prediction for each ground truth imag", "\n", "", "for", "gt", "in", "groundTruthImgList", ":", "\n", "            ", "predictionImgList", ".", "append", "(", "getPrediction", "(", "gt", ",", "args", ")", ")", "\n", "\n", "# print some info for user", "\n", "", "", "print", "(", "\"Note that this tool uses the file '{}' to cache the ground truth instances.\"", ".", "format", "(", "args", ".", "gtInstancesFile", ")", ")", "\n", "print", "(", "\"If anything goes wrong, or if you change the ground truth, please delete the file.\"", ")", "\n", "\n", "# evaluate", "\n", "evaluateImgLists", "(", "predictionImgList", ",", "groundTruthImgList", ",", "args", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.plot3dResults.csToMplColor": [[18, 21], ["None"], "function", ["None"], ["def", "csToMplColor", "(", "label", ")", ":", "\n", "    ", "color", "=", "name2label", "[", "label", "]", ".", "color", "\n", "return", "[", "x", "/", "255.", "for", "x", "in", "color", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.plot3dResults.create_table_row": [[23, 62], ["axis.text", "data_dict[].items", "axis.text", "axis.text", "axis.text", "axis.text"], "function", ["None"], ["", "def", "create_table_row", "(", "\n", "axis", ",", "# type: Axes", "\n", "x_pos", ",", "# type: float", "\n", "y_pos", ",", "# type: float", "\n", "data_dict", ",", "# type: dict", "\n", "title", ",", "# type: str", "\n", "key", ",", "# type: str", "\n", "subdict_key", "=", "None", "# type: str", "\n", ")", ":", "\n", "# type: (...) -> None", "\n", "    ", "\"\"\"Creates a row presenting scores for all classes in category ``key`` in ``data_dict``.\n\n    Args:\n        axis (Axes): Axes-instances to use for the subplot\n        x_pos (float): x-value for the left of the row relative in the given subplot\n        y_pos (float): y-value for the top of the row relative in the given subplot\n        data_dict (dict): dict containing data to visualize\n        title (str): title of the row / category-name\n        key (str): key in ``data_dict`` to obtain data to visualize\n        subdict_key (str or None):\n            additional key to access data, if ``data_dict[key]`` returns again a dict,\n            otherwise None\n    \"\"\"", "\n", "\n", "axis", ".", "text", "(", "x_pos", ",", "y_pos", ",", "title", ",", "fontdict", "=", "{", "'weight'", ":", "'bold'", "}", ")", "\n", "y_pos", "-=", "0.1", "\n", "delta_x_pos", "=", "0.2", "\n", "\n", "for", "(", "cat", ",", "valdict", ")", "in", "data_dict", "[", "key", "]", ".", "items", "(", ")", ":", "\n", "        ", "val", "=", "valdict", "if", "subdict_key", "is", "None", "else", "valdict", "[", "subdict_key", "]", "\n", "axis", ".", "text", "(", "x_pos", ",", "y_pos", ",", "cat", ")", "\n", "axis", ".", "text", "(", "x_pos", "+", "delta_x_pos", ",", "y_pos", ",", "\"{:.4f}\"", ".", "format", "(", "val", "*", "100", ")", ",", "ha", "=", "\"right\"", ")", "\n", "y_pos", "-=", "0.1", "\n", "\n", "# add Mean", "\n", "", "y_pos", "-=", "0.05", "\n", "axis", ".", "text", "(", "x_pos", ",", "y_pos", ",", "\"Mean\"", ",", "fontdict", "=", "{", "'weight'", ":", "'bold'", "}", ")", "\n", "axis", ".", "text", "(", "x_pos", "+", "delta_x_pos", ",", "y_pos", ",", "\"{:.4f}\"", ".", "format", "(", "\n", "data_dict", "[", "\"m\"", "+", "key", "]", "*", "100", ")", ",", "fontdict", "=", "{", "'weight'", ":", "'bold'", "}", ",", "ha", "=", "\"right\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.plot3dResults.create_result_table_and_legend_plot": [[64, 109], ["all", "axis.axis", "axis.text", "plot3dResults.create_table_row", "plot3dResults.create_table_row", "axis.text", "axis.legend", "axis.text", "data_to_plot.keys"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.plot3dResults.create_table_row", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.plot3dResults.create_table_row"], ["", "def", "create_result_table_and_legend_plot", "(", "\n", "axis", ",", "# type: Axes", "\n", "data_to_plot", ",", "# type: dict", "\n", "handles_labels", "# type: Tuple[List, List]", "\n", ")", ":", "\n", "# type: (...) -> None", "\n", "    ", "\"\"\"Creates the plot-section containing a table with result scores and labels.\n\n    Args:\n        axis (Axes): Axes-instances to use for the subplot\n        data_to_plot (dict): Dictionary containing ``\"Detection_Score\"`` and ``\"AP\"``\n            and corresponding mean values\n        handles_labels (Tuple[List, List]): Tuple of matplotlib handles and corresponding labels\n    \"\"\"", "\n", "\n", "required_keys", "=", "[", "\"Detection_Score\"", ",", "\"mDetection_Score\"", ",", "\"AP\"", ",", "\"mAP\"", "]", "\n", "assert", "all", "(", "[", "key", "in", "data_to_plot", ".", "keys", "(", ")", "for", "key", "in", "required_keys", "]", ")", "\n", "\n", "# Results", "\n", "axis", ".", "axis", "(", "\"off\"", ")", "\n", "axis", ".", "text", "(", "0", ",", "0.95", ",", "'Results'", ",", "fontdict", "=", "{", "'weight'", ":", "'bold'", ",", "'size'", ":", "16", "}", ")", "\n", "\n", "y_pos_row", "=", "0.75", "\n", "# 2D AP results", "\n", "create_table_row", "(", "axis", ",", "0.00", ",", "y_pos_row", ",", "data_to_plot", ",", "\n", "title", "=", "\"2D AP\"", ",", "key", "=", "\"AP\"", ",", "subdict_key", "=", "\"auc\"", ")", "\n", "\n", "# Detection score results", "\n", "create_table_row", "(", "axis", ",", "0.28", ",", "y_pos_row", ",", "data_to_plot", ",", "\n", "title", "=", "\"Detection Score\"", ",", "key", "=", "\"Detection_Score\"", ",", "subdict_key", "=", "None", ")", "\n", "\n", "# Legend", "\n", "x_pos_legend", "=", "0.6", "\n", "y_pos_legend", "=", "0.75", "\n", "y_pos_dot_size", "=", "0.0", "\n", "axis", ".", "text", "(", "x_pos_legend", ",", "0.95", ",", "'Legend'", ",", "\n", "fontdict", "=", "{", "'weight'", ":", "'bold'", ",", "'size'", ":", "16", "}", ")", "\n", "axis", ".", "legend", "(", "*", "handles_labels", ",", "frameon", "=", "True", ",", "\n", "loc", "=", "\"upper left\"", ",", "bbox_to_anchor", "=", "(", "x_pos_legend", ",", "y_pos_legend", ")", ",", "ncol", "=", "2", ")", "\n", "\n", "# add data-point-marker size explanation", "\n", "dot_size_explanation", "=", "\"The size of each data-point-marker indicates\\n\"", "\n", "dot_size_explanation", "+=", "\"the relative amount of samples for that data-\\n\"", "\n", "dot_size_explanation", "+=", "\"point, with large dots indicate larger samples.\"", "\n", "axis", ".", "text", "(", "x_pos_legend", ",", "y_pos_dot_size", ",", "dot_size_explanation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.plot3dResults.create_spider_chart_plot": [[111, 170], ["len", "axis.set_theta_offset", "axis.set_theta_direction", "axis.set_rlabel_position", "axis.set_yticks", "axis.set_yticklabels", "axis.tick_params", "axis.set_ylim", "axis.set_xticks", "axis.set_xticklabels", "enumerate", "axis.plot", "axis.legend", "category.replace", "numpy.arange", "axis.plot", "axis.fill", "range", "numpy.mean", "data_to_plot[].items", "float", "zip", "plot3dResults.csToMplColor", "plot3dResults.csToMplColor", "float"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.plot3dResults.csToMplColor", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.plot3dResults.csToMplColor"], ["", "def", "create_spider_chart_plot", "(", "\n", "axis", ",", "# type: Axes", "\n", "data_to_plot", ",", "# type: dict", "\n", "categories", ",", "# type: List[str]", "\n", "accept_classes", "# type: List[str]", "\n", ")", ":", "\n", "# type: (...) -> None", "\n", "    ", "\"\"\"Creates spider-chart with ``categories`` for all classes in ``accept_classes``.\n\n    Args:\n        axis (Axes): Axes-instances to use for the spider-chart\n        data_to_plot (dict): Dictionary containing ``categories`` as keys.\n        categories (list of str): List of category-names to use for the spider-chart.\n        accept_classes (list of str): List of class-names to use for the spider-chart.\n    \"\"\"", "\n", "\n", "# create labels", "\n", "lables", "=", "[", "category", ".", "replace", "(", "\"_\"", ",", "\"-\"", ")", "for", "category", "in", "categories", "]", "\n", "\n", "# Calculate metrics for each class", "\n", "vals", "=", "{", "\n", "cat", ":", "[", "cat_vals", "[", "\"auc\"", "]", "\n", "for", "x", ",", "cat_vals", "in", "data_to_plot", "[", "cat", "]", ".", "items", "(", ")", "if", "x", "in", "accept_classes", "]", "\n", "for", "cat", "in", "categories", "\n", "}", "\n", "\n", "# norm everything to AP", "\n", "for", "key", "in", "[", "\"Center_Dist\"", ",", "\"Size_Similarity\"", ",", "\"OS_Yaw\"", ",", "\"OS_Pitch_Roll\"", "]", ":", "\n", "        ", "vals", "[", "key", "]", "=", "[", "v", "*", "float", "(", "ap", ")", "for", "(", "v", ",", "ap", ")", "in", "zip", "(", "vals", "[", "key", "]", ",", "vals", "[", "\"AP\"", "]", ")", "]", "\n", "\n", "# setup axis", "\n", "", "num_categories", "=", "len", "(", "categories", ")", "\n", "\n", "angles", "=", "[", "n", "/", "float", "(", "num_categories", ")", "*", "2", "*", "\n", "np", ".", "pi", "for", "n", "in", "range", "(", "num_categories", ")", "]", "\n", "angles", "+=", "angles", "[", ":", "1", "]", "\n", "\n", "axis", ".", "set_theta_offset", "(", "np", ".", "pi", "/", "2.", ")", "\n", "axis", ".", "set_theta_direction", "(", "-", "1", ")", "\n", "axis", ".", "set_rlabel_position", "(", "0", ")", "\n", "axis", ".", "set_yticks", "(", "[", "0.25", ",", "0.50", ",", "0.75", "]", ")", "\n", "axis", ".", "set_yticklabels", "(", "[", "\"0.25\"", ",", "\"0.50\"", ",", "\"0.75\"", "]", ",", "color", "=", "\"grey\"", ",", "size", "=", "7", ")", "\n", "axis", ".", "tick_params", "(", "axis", "=", "\"x\"", ",", "direction", "=", "\"out\"", ",", "pad", "=", "10", ")", "\n", "axis", ".", "set_ylim", "(", "[", "0", ",", "1", "]", ")", "\n", "axis", ".", "set_xticks", "(", "np", ".", "arange", "(", "0", ",", "2.0", "*", "np", ".", "pi", ",", "np", ".", "pi", "/", "2.5", ")", ")", "\n", "axis", ".", "set_xticklabels", "(", "lables", ")", "\n", "\n", "for", "idx", ",", "label", "in", "enumerate", "(", "accept_classes", ")", ":", "\n", "        ", "values", "=", "[", "x", "[", "idx", "]", "for", "x", "in", "[", "vals", "[", "cat", "]", "for", "cat", "in", "categories", "]", "]", "\n", "values", "+=", "values", "[", ":", "1", "]", "\n", "\n", "axis", ".", "plot", "(", "angles", ",", "values", ",", "linewidth", "=", "1", ",", "\n", "linestyle", "=", "'solid'", ",", "color", "=", "csToMplColor", "(", "label", ")", ")", "\n", "axis", ".", "fill", "(", "\n", "angles", ",", "values", ",", "color", "=", "csToMplColor", "(", "label", ")", ",", "alpha", "=", "0.05", ")", "\n", "\n", "", "axis", ".", "plot", "(", "angles", ",", "[", "np", ".", "mean", "(", "x", ")", "for", "x", "in", "[", "vals", "[", "cat", "]", "for", "cat", "in", "categories", "]", "+", "[", "\n", "vals", "[", "\"AP\"", "]", "]", "]", ",", "linewidth", "=", "1", ",", "linestyle", "=", "'solid'", ",", "color", "=", "\"r\"", ",", "label", "=", "\"Mean\"", ")", "\n", "axis", ".", "legend", "(", "bbox_to_anchor", "=", "(", "0", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.plot3dResults.create_AP_plot": [[172, 203], ["axis.set_title", "axis.set_ylim", "axis.set_ylabel", "ValueError", "plot3dResults.fill_standard_subplot", "float", "float", "list", "list", "aps.keys", "aps.values"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.plot3dResults.fill_standard_subplot"], ["", "def", "create_AP_plot", "(", "\n", "axis", ",", "# type: Axes", "\n", "data_to_plot", ",", "# type: dict", "\n", "accept_classes", ",", "# type: List[str]", "\n", "max_depth", "# type: int", "\n", ")", ":", "\n", "# type: (...) -> None", "\n", "    ", "\"\"\"Create the average precision (AP) subplot for classes in ``accept_classes``.\n\n    Args:\n        axis (Axes): Axes-instances to use for AP-plot\n        data_to_plot (dict): Dictionary containing data to be visualized\n            for all classes in ``accept_classes``\n        accept_classes (list of str): List of class-names to use for the spider-chart\n        max_depth (int): maximal encountered depth value\n    \"\"\"", "\n", "\n", "if", "\"AP_per_depth\"", "not", "in", "data_to_plot", ":", "\n", "        ", "raise", "ValueError", "(", ")", "\n", "\n", "", "axis", ".", "set_title", "(", "\"AP per depth\"", ")", "\n", "axis", ".", "set_ylim", "(", "[", "0", ",", "1.01", "]", ")", "\n", "axis", ".", "set_ylabel", "(", "\"AP\"", ")", "\n", "\n", "for", "label", "in", "accept_classes", ":", "\n", "        ", "aps", "=", "data_to_plot", "[", "\"AP_per_depth\"", "]", "[", "label", "]", "\n", "\n", "x_vals", "=", "[", "float", "(", "x", ")", "for", "x", "in", "list", "(", "aps", ".", "keys", "(", ")", ")", "]", "\n", "y_vals", "=", "[", "float", "(", "x", "[", "\"auc\"", "]", ")", "for", "x", "in", "list", "(", "aps", ".", "values", "(", ")", ")", "]", "\n", "\n", "fill_standard_subplot", "(", "axis", ",", "x_vals", ",", "y_vals", ",", "label", ",", "[", "]", ",", "max_depth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.plot3dResults.set_up_xaxis": [[205, 221], ["axis.set_xlim", "axis.set_xticks", "axis.set_xticklabels", "numpy.linspace", "numpy.linspace"], "function", ["None"], ["", "", "def", "set_up_xaxis", "(", "\n", "axis", ",", "# type: Axes", "\n", "max_depth", ",", "# type: int", "\n", "num_ticks", "# type: int", "\n", ")", ":", "\n", "# type: (...) -> None", "\n", "    ", "\"\"\"Sets up the x-Axis of given Axes-instance ``axis``.\n\n    Args:\n        axis (Axes): Axes-instances to use\n        max_depth (int): max value of the x-axis is set to ``max_depth+1``\n        num_ticks (int): number of ticks on the x-axis\n    \"\"\"", "\n", "axis", ".", "set_xlim", "(", "[", "0", ",", "max_depth", "]", ")", "\n", "axis", ".", "set_xticks", "(", "np", ".", "linspace", "(", "0", ",", "max_depth", ",", "num_ticks", "+", "1", ")", ")", "\n", "axis", ".", "set_xticklabels", "(", "[", "\"{:.1f}\"", ".", "format", "(", "x", ")", "for", "x", "in", "np", ".", "linspace", "(", "0", ",", "max_depth", ",", "num_ticks", "+", "1", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.plot3dResults.set_up_PR_plot_axis": [[223, 237], ["axis.set_title", "axis.set_xlabel", "axis.set_ylabel", "axis.set_xlim", "axis.set_ylim", "axis.set_xticks", "axis.set_xticklabels", "numpy.arange", "range"], "function", ["None"], ["", "def", "set_up_PR_plot_axis", "(", "\n", "axis", ",", "# type: Axes", "\n", "min_iou", ",", "# type: float", "\n", "matching_method", "# type: str", "\n", ")", ":", "\n", "# type: (...) -> None", "\n", "    ", "\"\"\"Sets up the axis for the precision plot.\"\"\"", "\n", "axis", ".", "set_title", "(", "\"PR Curve@{:.2f} ({})\"", ".", "format", "(", "min_iou", ",", "matching_method", ")", ")", "\n", "axis", ".", "set_xlabel", "(", "\"Recall\"", ")", "\n", "axis", ".", "set_ylabel", "(", "\"Precision\"", ")", "\n", "axis", ".", "set_xlim", "(", "[", "0", ",", "1.0", "]", ")", "\n", "axis", ".", "set_ylim", "(", "[", "0", ",", "1.01", "]", ")", "\n", "axis", ".", "set_xticks", "(", "np", ".", "arange", "(", "0", ",", "1.01", ",", "0.1", ")", ")", "\n", "axis", ".", "set_xticklabels", "(", "[", "x", "/", "10.", "for", "x", "in", "range", "(", "11", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.plot3dResults.create_all_axes": [[239, 274], ["matplotlib.subplot2grid", "matplotlib.subplot2grid", "matplotlib.subplot2grid", "matplotlib.subplot2grid", "matplotlib.subplot2grid", "matplotlib.subplot2grid", "matplotlib.subplot2grid", "matplotlib.subplot2grid", "plot3dResults.set_up_xaxis", "plt.subplot2grid.set_xlabel", "plt.subplot2grid.set_xlabel"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.plot3dResults.set_up_xaxis"], ["", "def", "create_all_axes", "(", "\n", "max_depth", ",", "# type: int", "\n", "num_ticks", "# type: int", "\n", ")", ":", "\n", "# type: (...) -> None", "\n", "    ", "\"\"\"Creates all Axes-instances of the 8 subplots.\n\n    Args:\n        max_depth (int): max value of the x-axis is set to ``max_depth+1``\n        num_ticks (int): number of ticks on the x-axis\n\n    Returns:\n        ax_results (Axes): Axes-instance of the subplot\n            containing the results-table and plot-legend\n        ax_spider (Axes): Axes-instance of the subplot\n            containing the spider_chart of AP-values for\n        axes (List[Axes]): 6 Axes-instances for the categories.\n    \"\"\"", "\n", "\n", "ax_results", "=", "plt", ".", "subplot2grid", "(", "(", "4", ",", "2", ")", ",", "(", "0", ",", "0", ")", ")", "\n", "ax_spider", "=", "plt", ".", "subplot2grid", "(", "(", "4", ",", "2", ")", ",", "(", "0", ",", "1", ")", ",", "polar", "=", "True", ")", "\n", "ax1", "=", "plt", ".", "subplot2grid", "(", "(", "4", ",", "2", ")", ",", "(", "1", ",", "0", ")", ")", "\n", "ax2", "=", "plt", ".", "subplot2grid", "(", "(", "4", ",", "2", ")", ",", "(", "1", ",", "1", ")", ")", "\n", "ax3", "=", "plt", ".", "subplot2grid", "(", "(", "4", ",", "2", ")", ",", "(", "2", ",", "0", ")", ",", "sharex", "=", "ax2", ")", "\n", "ax4", "=", "plt", ".", "subplot2grid", "(", "(", "4", ",", "2", ")", ",", "(", "2", ",", "1", ")", ",", "sharex", "=", "ax2", ")", "\n", "ax5", "=", "plt", ".", "subplot2grid", "(", "(", "4", ",", "2", ")", ",", "(", "3", ",", "0", ")", ",", "sharex", "=", "ax2", ")", "\n", "ax6", "=", "plt", ".", "subplot2grid", "(", "(", "4", ",", "2", ")", ",", "(", "3", ",", "1", ")", ",", "sharex", "=", "ax2", ")", "\n", "axes", "=", "(", "ax1", ",", "ax2", ",", "ax3", ",", "ax4", ",", "ax5", ",", "ax6", ")", "\n", "\n", "# set up x-axes for ax2-ax6", "\n", "set_up_xaxis", "(", "ax2", ",", "max_depth", ",", "num_ticks", ")", "\n", "ax5", ".", "set_xlabel", "(", "\"Depth [m]\"", ")", "\n", "ax6", ".", "set_xlabel", "(", "\"Depth [m]\"", ")", "\n", "\n", "return", "ax_results", ",", "ax_spider", ",", "axes", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.plot3dResults.create_PR_plot": [[276, 317], ["plot3dResults.set_up_PR_plot_axis", "sorted", "map", "range", "axis.plot", "zip", "zip", "numpy.maximum", "len", "plot3dResults.csToMplColor"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.plot3dResults.set_up_PR_plot_axis", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.plot3dResults.csToMplColor"], ["", "def", "create_PR_plot", "(", "\n", "axis", ",", "# type: Axes", "\n", "data", ",", "# type: dict", "\n", "accept_classes", "# type: List[str]", "\n", ")", ":", "\n", "# type: (...) -> None", "\n", "    ", "\"\"\"Fills precision-recall (PR) subplot with data and finalizes ``axis``-set-up.\n\n    Args:\n        axis (Axes): Axes-instance of the subplot\n        data (dict): data-dictionnary containing precision and recall values\n            for all classes in ``accept_classes``\n        accept_classes (list of str):\n    \"\"\"", "\n", "set_up_PR_plot_axis", "(", "\n", "axis", ",", "\n", "data", "[", "\"eval_params\"", "]", "[", "\"min_iou_to_match\"", "]", ",", "\n", "data", "[", "\"eval_params\"", "]", "[", "\"matching_method\"", "]", "\n", ")", "\n", "\n", "for", "label", "in", "accept_classes", ":", "\n", "        ", "recalls_", "=", "data", "[", "'AP'", "]", "[", "label", "]", "[", "\"data\"", "]", "[", "\"recall\"", "]", "\n", "precisions_", "=", "data", "[", "'AP'", "]", "[", "label", "]", "[", "\"data\"", "]", "[", "\"precision\"", "]", "\n", "\n", "# sort the data ascending", "\n", "sorted_pairs", "=", "sorted", "(", "\n", "zip", "(", "recalls_", ",", "precisions_", ")", ",", "key", "=", "lambda", "pair", ":", "pair", "[", "0", "]", ")", "\n", "recalls", ",", "precisions", "=", "map", "(", "list", ",", "zip", "(", "*", "sorted_pairs", ")", ")", "\n", "recalls", "=", "[", "0.", "]", "+", "recalls", "\n", "precisions", "=", "[", "0.", "]", "+", "precisions", "\n", "\n", "recalls", "+=", "recalls", "[", "-", "1", ":", "]", "+", "[", "1.", "]", "\n", "precisions", "+=", "[", "0.", ",", "0.", "]", "\n", "\n", "# precision values should be decreasing only", "\n", "# p(r) = max{r' > r} p(r')", "\n", "for", "i", "in", "range", "(", "len", "(", "precisions", ")", "-", "2", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "precisions", "[", "i", "]", "=", "np", ".", "maximum", "(", "precisions", "[", "i", "]", ",", "precisions", "[", "i", "+", "1", "]", ")", "\n", "\n", "", "axis", ".", "plot", "(", "recalls", ",", "precisions", ",", "label", "=", "label", ",", "\n", "color", "=", "csToMplColor", "(", "label", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.plot3dResults.fill_and_finalize_subplot": [[319, 370], ["plot3dResults.create_PR_plot", "plot3dResults.create_AP_plot", "axis.set_title", "ValueError", "axis.set_ylim", "axis.set_ylabel", "axis.set_ylim", "axis.set_ylabel", "plot3dResults.get_x_y_vals", "plot3dResults.get_available_items_scaling", "plot3dResults.fill_standard_subplot", "category.replace"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.plot3dResults.create_PR_plot", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.plot3dResults.create_AP_plot", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.plot3dResults.get_x_y_vals", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.plot3dResults.get_available_items_scaling", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.plot3dResults.fill_standard_subplot"], ["", "", "def", "fill_and_finalize_subplot", "(", "\n", "category", ",", "# type: str", "\n", "data_to_plot", ",", "# type: dict", "\n", "accept_classes", ",", "# type: List[str]", "\n", "axis", ",", "# type: Axes", "\n", "max_depth", "# type: int", "\n", ")", ":", "\n", "# type: (...) -> None", "\n", "    ", "\"\"\"Plot data to subplots by selecting correct data for given ``category`` and looping over\n    all classes in ``accept_classes``.\n\n    Args:\n        category (str): score category, one of\n            [\"PR\", \"AP\", \"Center_Dist\", \"Size_Similarity\", \"OS_Yaw\", \"OS_Pitch_Roll\"]\n        data_to_plot (dict): Dictionary containing data to be visualized.\n        accept_classes (list of str): List of class-names to use for the spider-chart.\n        axis (Axes): Axes-instances to use for the subplot\n        max_depth (int): maximal encountered depth value\n    \"\"\"", "\n", "\n", "if", "category", "==", "'PR'", ":", "\n", "        ", "create_PR_plot", "(", "axis", ",", "data_to_plot", ",", "accept_classes", ")", "\n", "\n", "", "elif", "category", "==", "'AP'", ":", "\n", "        ", "create_AP_plot", "(", "axis", ",", "data_to_plot", ",", "accept_classes", ",", "max_depth", ")", "\n", "\n", "", "elif", "category", "in", "[", "\"Center_Dist\"", ",", "\"Size_Similarity\"", ",", "\"OS_Yaw\"", ",", "\"OS_Pitch_Roll\"", "]", ":", "\n", "\n", "        ", "axis", ".", "set_title", "(", "category", ".", "replace", "(", "\"_\"", ",", "\" \"", ")", "+", "\" (DDTP Metric)\"", ")", "\n", "\n", "if", "category", "==", "'Center_Dist'", ":", "\n", "            ", "axis", ".", "set_ylim", "(", "[", "0", ",", "25", "]", ")", "\n", "axis", ".", "set_ylabel", "(", "\"Distance [m]\"", ")", "\n", "", "else", ":", "\n", "            ", "axis", ".", "set_ylim", "(", "[", "0.", ",", "1.01", "]", ")", "\n", "axis", ".", "set_ylabel", "(", "\"Similarity\"", ")", "\n", "\n", "", "for", "label", "in", "accept_classes", ":", "\n", "            ", "x_vals", ",", "y_vals", "=", "get_x_y_vals", "(", "\n", "data_to_plot", "[", "category", "]", "[", "label", "]", "[", "\"data\"", "]", ")", "\n", "available_items_scaling", "=", "get_available_items_scaling", "(", "\n", "data_to_plot", "[", "category", "]", "[", "label", "]", "[", "\"items\"", "]", ")", "\n", "\n", "if", "category", "==", "'Center_Dist'", ":", "\n", "                ", "y_vals", "=", "[", "(", "1", "-", "y", ")", "*", "max_depth", "for", "y", "in", "y_vals", "]", "\n", "\n", "", "fill_standard_subplot", "(", "\n", "axis", ",", "x_vals", ",", "y_vals", ",", "label", ",", "available_items_scaling", ",", "max_depth", ")", "\n", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unsupported category, got {}.\"", ".", "format", "(", "category", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.plot3dResults.fill_standard_subplot": [[372, 413], ["sorted", "axis.plot", "zip", "len", "map", "len", "axis.scatter", "len", "axis.plot", "axis.plot", "zip", "plot3dResults.csToMplColor", "plot3dResults.csToMplColor", "plot3dResults.csToMplColor", "plot3dResults.csToMplColor"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.plot3dResults.csToMplColor", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.plot3dResults.csToMplColor", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.plot3dResults.csToMplColor", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.plot3dResults.csToMplColor"], ["", "", "def", "fill_standard_subplot", "(", "\n", "axis", ",", "# type: Axes", "\n", "x_vals_unsorted", ",", "# type: List[float]", "\n", "y_vals_unsorted", ",", "# type: List[float]", "\n", "label", ",", "# type: str", "\n", "available_items_scaling", ",", "# type: List[float]", "\n", "max_depth", "# type: int", "\n", ")", ":", "\n", "# type: (...) -> None", "\n", "    ", "\"\"\"Fills standard-subplots with data for ``label`` with data.\n\n    Includes scatter-plot with size-scaled data-points, line-plot and\n    a dashed line from maximal value in ``x_vals`` to ``max_depth``.\n\n    Args:\n        axis (Axes): Axes-instances to use for the subplot\n        x_vals (list of float): x-values to visualize\n        y_vals (list of float): y-values to visualize\n        label (str): name of class to visualize data for\n        available_items_scaling (list of float): size of data-points\n        max_depth (int): maximal value of x-axis\n    \"\"\"", "\n", "\n", "sorted_pairs", "=", "sorted", "(", "zip", "(", "x_vals_unsorted", ",", "y_vals_unsorted", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "if", "len", "(", "sorted_pairs", ")", ">", "0", ":", "\n", "        ", "x_vals", ",", "y_vals", "=", "map", "(", "list", ",", "zip", "(", "*", "sorted_pairs", ")", ")", "\n", "", "else", ":", "\n", "        ", "x_vals", "=", "x_vals_unsorted", "\n", "y_vals", "=", "y_vals_unsorted", "\n", "\n", "", "if", "len", "(", "available_items_scaling", ")", ">", "0", ":", "\n", "        ", "axis", ".", "scatter", "(", "x_vals", ",", "y_vals", ",", "s", "=", "available_items_scaling", ",", "\n", "color", "=", "csToMplColor", "(", "label", ")", ",", "marker", "=", "\"o\"", ",", "alpha", "=", "1.0", ")", "\n", "", "axis", ".", "plot", "(", "x_vals", ",", "y_vals", ",", "label", "=", "label", ",", "\n", "color", "=", "csToMplColor", "(", "label", ")", ")", "\n", "\n", "if", "len", "(", "x_vals", ")", ">=", "1", ":", "\n", "        ", "axis", ".", "plot", "(", "[", "x_vals", "[", "-", "1", "]", ",", "max_depth", "]", ",", "[", "y_vals", "[", "-", "1", "]", ",", "y_vals", "[", "-", "1", "]", "]", ",", "label", "=", "label", ",", "\n", "color", "=", "csToMplColor", "(", "label", ")", ",", "linestyle", "=", "\"--\"", ",", "alpha", "=", "0.6", ")", "\n", "axis", ".", "plot", "(", "[", "0", ",", "x_vals", "[", "0", "]", "]", ",", "[", "y_vals", "[", "0", "]", ",", "y_vals", "[", "0", "]", "]", ",", "label", "=", "label", ",", "\n", "color", "=", "csToMplColor", "(", "label", ")", ",", "linestyle", "=", "\"--\"", ",", "alpha", "=", "0.6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.plot3dResults.get_available_items_scaling": [[415, 429], ["list", "max", "data.values", "len", "float"], "function", ["None"], ["", "", "def", "get_available_items_scaling", "(", "\n", "data", ",", "# type: dict", "\n", "scale_fac", "=", "100", "# type: float", "\n", ")", ":", "\n", "# type: (...) -> None", "\n", "    ", "\"\"\"Counts available items per data-point. Normalizes and scales according to ``scale_fac``.\"\"\"", "\n", "available_items", "=", "list", "(", "data", ".", "values", "(", ")", ")", "\n", "if", "len", "(", "available_items", ")", "==", "0", ":", "\n", "        ", "return", "available_items", "\n", "\n", "", "max_num_item", "=", "max", "(", "available_items", ")", "\n", "available_items_scaling", "=", "[", "\n", "x", "/", "float", "(", "max_num_item", ")", "*", "scale_fac", "for", "x", "in", "available_items", "]", "\n", "return", "available_items_scaling", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.plot3dResults.get_x_y_vals": [[431, 439], ["list", "float", "data.values", "list", "data.keys"], "function", ["None"], ["", "def", "get_x_y_vals", "(", "\n", "data", "# type: dict", "\n", ")", ":", "\n", "# type: (...) -> None", "\n", "    ", "\"\"\"Reads and returns x- and y-values from dict.\"\"\"", "\n", "x_vals", "=", "[", "float", "(", "x", ")", "for", "x", "in", "list", "(", "data", ".", "keys", "(", ")", ")", "]", "\n", "y_vals", "=", "list", "(", "data", ".", "values", "(", ")", ")", "\n", "return", "x_vals", ",", "y_vals", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.plot3dResults.plot_data": [[441, 485], ["all", "matplotlib.figure", "plot3dResults.create_all_axes", "enumerate", "plot3dResults.create_spider_chart_plot", "plot3dResults.create_result_table_and_legend_plot", "matplotlib.tight_layout", "matplotlib.show", "plot3dResults.fill_and_finalize_subplot", "axes[].get_legend_handles_labels", "data_to_plot.keys"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.plot3dResults.create_all_axes", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.plot3dResults.create_spider_chart_plot", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.plot3dResults.create_result_table_and_legend_plot", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.plot3dResults.fill_and_finalize_subplot"], ["", "def", "plot_data", "(", "\n", "data_to_plot", "# type: dict", "\n", ")", ":", "\n", "# type: (...) -> None", "\n", "    ", "\"\"\"Creates the visualization of the data in ``data_to_plot``.\n\n    Args:\n        data_to_plot (dict): Dictionary containing data to be visualized.\n            Has to contain the keys \"AP\", \"Center_Dist\", \"Size_Similarity\",\n            \"OS_Yaw\", \"OS_Pitch_Roll\".\n    \"\"\"", "\n", "\n", "# get max depth", "\n", "max_depth", "=", "data_to_plot", "[", "\"eval_params\"", "]", "[", "\"max_depth\"", "]", "\n", "\n", "# setup all categories", "\n", "categories", "=", "[", "\"AP\"", ",", "\"Center_Dist\"", ",", "\"Size_Similarity\"", ",", "\n", "\"OS_Yaw\"", ",", "\"OS_Pitch_Roll\"", "]", "\n", "subplot_categories", "=", "[", "\"PR\"", "]", "+", "categories", "\n", "assert", "all", "(", "[", "key", "in", "data_to_plot", ".", "keys", "(", ")", "for", "key", "in", "categories", "]", ")", "\n", "\n", "accept_classes", "=", "data_to_plot", "[", "\"eval_params\"", "]", "[", "\"labels\"", "]", "\n", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "12", ")", ",", "dpi", "=", "100", ")", "\n", "\n", "# create subplot-axes", "\n", "ax_results", ",", "ax_spider", ",", "axes", "=", "create_all_axes", "(", "max_depth", ",", "10", ")", "\n", "\n", "# 1st fill subplots (3-8)", "\n", "for", "idx", ",", "category", "in", "enumerate", "(", "subplot_categories", ")", ":", "\n", "        ", "fill_and_finalize_subplot", "(", "\n", "category", ",", "data_to_plot", ",", "accept_classes", ",", "axes", "[", "idx", "]", ",", "max_depth", ")", "\n", "\n", "# 2nd plot Spider plot", "\n", "", "create_spider_chart_plot", "(", "ax_spider", ",", "data_to_plot", ",", "\n", "categories", ",", "accept_classes", ")", "\n", "\n", "# 3rd create subplot showing the table with result scores and labels", "\n", "create_result_table_and_legend_plot", "(", "\n", "ax_results", ",", "data_to_plot", ",", "axes", "[", "0", "]", ".", "get_legend_handles_labels", "(", ")", ")", "\n", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "# plt.savefig(\"results.pdf\")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.plot3dResults.prepare_data": [[487, 501], ["open", "json.load"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.configuration.load"], ["", "def", "prepare_data", "(", "\n", "json_path", "# type: str", "\n", ")", ":", "\n", "# type: (...) -> dict", "\n", "    ", "\"\"\"Loads data from json-file.\n\n    Args:\n        json_path (str): Path to json-file from which data should be loaded\n    \"\"\"", "\n", "\n", "with", "open", "(", "json_path", ")", "as", "file_", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "file_", ")", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.plot3dResults.main": [[503, 515], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "plot3dResults.prepare_data", "plot3dResults.plot_data", "os.path.exists", "Exception"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.plot3dResults.prepare_data", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.evaluation.plot3dResults.plot_data"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"path\"", ",", "\n", "help", "=", "'Path to result .json file as produced by 3D evaluation script. '", "\n", "'Can be downloaded from the evaluation server for test set results.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "path", ")", ":", "\n", "        ", "raise", "Exception", "(", "\"Result file not found!\"", ")", "\n", "\n", "", "data", "=", "prepare_data", "(", "args", ".", "path", ")", "\n", "plot_data", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2instanceImg.printHelp": [[48, 74], ["print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "os.path.basename"], "function", ["None"], ["def", "printHelp", "(", ")", ":", "\n", "    ", "print", "(", "'{} [OPTIONS] inputJson outputImg'", ".", "format", "(", "os", ".", "path", ".", "basename", "(", "sys", ".", "argv", "[", "0", "]", ")", ")", ")", "\n", "print", "(", "''", ")", "\n", "print", "(", "' Reads labels as polygons in JSON format and converts them to instance images,'", ")", "\n", "print", "(", "' where each pixel has an ID that represents the ground truth class and the'", ")", "\n", "print", "(", "' individual instance of that class.'", ")", "\n", "print", "(", "''", ")", "\n", "print", "(", "' The pixel values encode both, class and the individual instance.'", ")", "\n", "print", "(", "' The integer part of a division by 1000 of each ID provides the class ID,'", ")", "\n", "print", "(", "' as described in labels.py. The remainder is the instance ID. If a certain'", ")", "\n", "print", "(", "' annotation describes multiple instances, then the pixels have the regular'", ")", "\n", "print", "(", "' ID of that class.'", ")", "\n", "print", "(", "''", ")", "\n", "print", "(", "' Example:'", ")", "\n", "print", "(", "' Let\\'s say your labels.py assigns the ID 26 to the class \"car\".'", ")", "\n", "print", "(", "' Then, the individual cars in an image get the IDs 26000, 26001, 26002, ... .'", ")", "\n", "print", "(", "' A group of cars, where our annotators could not identify the individual'", ")", "\n", "print", "(", "' instances anymore, is assigned to the ID 26.'", ")", "\n", "print", "(", "''", ")", "\n", "print", "(", "' Note that not all classes distinguish instances (see labels.py for a full list).'", ")", "\n", "print", "(", "' The classes without instance annotations are always directly encoded with'", ")", "\n", "print", "(", "' their regular ID, e.g. 11 for \"building\".'", ")", "\n", "print", "(", "''", ")", "\n", "print", "(", "'Options:'", ")", "\n", "print", "(", "' -h                 Print this help'", ")", "\n", "print", "(", "' -t                 Use the \"trainIDs\" instead of the regular mapping. See \"labels.py\" for details.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2instanceImg.printError": [[76, 82], ["print", "print", "print", "json2instanceImg.printHelp", "sys.exit"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printHelp"], ["", "def", "printError", "(", "message", ")", ":", "\n", "    ", "print", "(", "'ERROR: {}'", ".", "format", "(", "message", ")", ")", "\n", "print", "(", "''", ")", "\n", "print", "(", "'USAGE:'", ")", "\n", "printHelp", "(", ")", "\n", "sys", ".", "exit", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2instanceImg.createInstanceImage": [[84, 156], ["PIL.Image.new", "PIL.ImageDraw.Draw", "print", "label.endswith", "json2instanceImg.printError", "ImageDraw.Draw.polygon", "print", "len"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printError"], ["", "def", "createInstanceImage", "(", "annotation", ",", "encoding", ")", ":", "\n", "# the size of the image", "\n", "    ", "size", "=", "(", "annotation", ".", "imgWidth", ",", "annotation", ".", "imgHeight", ")", "\n", "\n", "# the background", "\n", "if", "encoding", "==", "\"ids\"", ":", "\n", "        ", "backgroundId", "=", "name2label", "[", "'unlabeled'", "]", ".", "id", "\n", "", "elif", "encoding", "==", "\"trainIds\"", ":", "\n", "        ", "backgroundId", "=", "name2label", "[", "'unlabeled'", "]", ".", "trainId", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Unknown encoding '{}'\"", ".", "format", "(", "encoding", ")", ")", "\n", "return", "None", "\n", "\n", "# this is the image that we want to create", "\n", "", "instanceImg", "=", "Image", ".", "new", "(", "\"I\"", ",", "size", ",", "backgroundId", ")", "\n", "\n", "# a drawer to draw into the image", "\n", "drawer", "=", "ImageDraw", ".", "Draw", "(", "instanceImg", ")", "\n", "\n", "# a dict where we keep track of the number of instances that", "\n", "# we already saw of each class", "\n", "nbInstances", "=", "{", "}", "\n", "for", "labelTuple", "in", "labels", ":", "\n", "        ", "if", "labelTuple", ".", "hasInstances", ":", "\n", "            ", "nbInstances", "[", "labelTuple", ".", "name", "]", "=", "0", "\n", "\n", "# loop over all objects", "\n", "", "", "for", "obj", "in", "annotation", ".", "objects", ":", "\n", "        ", "label", "=", "obj", ".", "label", "\n", "polygon", "=", "obj", ".", "polygon", "\n", "\n", "# If the object is deleted, skip it", "\n", "if", "obj", ".", "deleted", ":", "\n", "            ", "continue", "\n", "\n", "# if the label is not known, but ends with a 'group' (e.g. cargroup)", "\n", "# try to remove the s and see if that works", "\n", "# also we know that this polygon describes a group", "\n", "", "isGroup", "=", "False", "\n", "if", "(", "not", "label", "in", "name2label", ")", "and", "label", ".", "endswith", "(", "'group'", ")", ":", "\n", "            ", "label", "=", "label", "[", ":", "-", "len", "(", "'group'", ")", "]", "\n", "isGroup", "=", "True", "\n", "\n", "", "if", "not", "label", "in", "name2label", ":", "\n", "            ", "printError", "(", "\"Label '{}' not known.\"", ".", "format", "(", "label", ")", ")", "\n", "\n", "# the label tuple", "\n", "", "labelTuple", "=", "name2label", "[", "label", "]", "\n", "\n", "# get the class ID", "\n", "if", "encoding", "==", "\"ids\"", ":", "\n", "            ", "id", "=", "labelTuple", ".", "id", "\n", "", "elif", "encoding", "==", "\"trainIds\"", ":", "\n", "            ", "id", "=", "labelTuple", ".", "trainId", "\n", "\n", "# if this label distinguishs between individual instances,", "\n", "# make the id a instance ID", "\n", "", "if", "labelTuple", ".", "hasInstances", "and", "not", "isGroup", "and", "id", "!=", "255", ":", "\n", "            ", "id", "=", "id", "*", "1000", "+", "nbInstances", "[", "label", "]", "\n", "nbInstances", "[", "label", "]", "+=", "1", "\n", "\n", "# If the ID is negative that polygon should not be drawn", "\n", "", "if", "id", "<", "0", ":", "\n", "            ", "continue", "\n", "\n", "", "try", ":", "\n", "            ", "drawer", ".", "polygon", "(", "polygon", ",", "fill", "=", "id", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "\"Failed to draw polygon with label {} and id {}: {}\"", ".", "format", "(", "label", ",", "id", ",", "polygon", ")", ")", "\n", "raise", "\n", "\n", "", "", "return", "instanceImg", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2instanceImg.json2instanceImg": [[163, 168], ["cityscapesscripts.helpers.annotation.Annotation", "cityscapesscripts.helpers.annotation.Annotation.fromJsonFile", "json2instanceImg.createInstanceImage", "createInstanceImage.save"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.Annotation.fromJsonFile", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2instanceImg.createInstanceImage", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.save"], ["", "def", "json2instanceImg", "(", "inJson", ",", "outImg", ",", "encoding", "=", "\"ids\"", ")", ":", "\n", "    ", "annotation", "=", "Annotation", "(", ")", "\n", "annotation", ".", "fromJsonFile", "(", "inJson", ")", "\n", "instanceImg", "=", "createInstanceImage", "(", "annotation", ",", "encoding", ")", "\n", "instanceImg", ".", "save", "(", "outImg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2instanceImg.main": [[171, 200], ["getopt.getopt", "len", "json2instanceImg.printError", "json2instanceImg.json2instanceImg", "json2instanceImg.json2instanceImg", "json2instanceImg.printError", "json2instanceImg.printHelp", "sys.exit", "len", "json2instanceImg.printError", "json2instanceImg.printError", "len", "json2instanceImg.printError"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printError", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2instanceImg.json2instanceImg", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2instanceImg.json2instanceImg", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printError", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printHelp", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printError", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printError", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printError"], ["", "def", "main", "(", "argv", ")", ":", "\n", "    ", "trainIds", "=", "False", "\n", "try", ":", "\n", "        ", "opts", ",", "args", "=", "getopt", ".", "getopt", "(", "argv", ",", "\"ht\"", ")", "\n", "", "except", "getopt", ".", "GetoptError", ":", "\n", "        ", "printError", "(", "'Invalid arguments'", ")", "\n", "", "for", "opt", ",", "arg", "in", "opts", ":", "\n", "        ", "if", "opt", "==", "'-h'", ":", "\n", "            ", "printHelp", "(", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "", "elif", "opt", "==", "'-t'", ":", "\n", "            ", "trainIds", "=", "True", "\n", "", "else", ":", "\n", "            ", "printError", "(", "\"Handling of argument '{}' not implementend\"", ".", "format", "(", "opt", ")", ")", "\n", "\n", "", "", "if", "len", "(", "args", ")", "==", "0", ":", "\n", "        ", "printError", "(", "\"Missing input json file\"", ")", "\n", "", "elif", "len", "(", "args", ")", "==", "1", ":", "\n", "        ", "printError", "(", "\"Missing output image filename\"", ")", "\n", "", "elif", "len", "(", "args", ")", ">", "2", ":", "\n", "        ", "printError", "(", "\"Too many arguments\"", ")", "\n", "\n", "", "inJson", "=", "args", "[", "0", "]", "\n", "outImg", "=", "args", "[", "1", "]", "\n", "\n", "if", "trainIds", ":", "\n", "        ", "json2instanceImg", "(", "inJson", ",", "outImg", ",", "'trainIds'", ")", "\n", "", "else", ":", "\n", "        ", "json2instanceImg", "(", "inJson", ",", "outImg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.createTrainIdInstanceImgs.main": [[35, 80], ["os.path.join", "os.path.join", "glob.glob", "glob.glob.sort", "glob.glob", "glob.glob.sort", "print", "print", "os.path.join", "cityscapesscripts.helpers.csHelpers.printError", "f.replace", "print", "sys.stdout.flush", "os.path.dirname", "len", "cityscapesscripts.preparation.json2instanceImg.json2instanceImg", "os.path.realpath", "len", "print", "len"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printError", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2instanceImg.json2instanceImg"], ["def", "main", "(", ")", ":", "\n", "# Where to look for Cityscapes", "\n", "    ", "if", "'CITYSCAPES_DATASET'", "in", "os", ".", "environ", ":", "\n", "        ", "cityscapesPath", "=", "os", ".", "environ", "[", "'CITYSCAPES_DATASET'", "]", "\n", "", "else", ":", "\n", "        ", "cityscapesPath", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", ",", "'..'", ",", "'..'", ")", "\n", "# how to search for all ground truth", "\n", "", "searchFine", "=", "os", ".", "path", ".", "join", "(", "cityscapesPath", ",", "\"gtFine\"", ",", "\"*\"", ",", "\"*\"", ",", "\"*_gt*_polygons.json\"", ")", "\n", "searchCoarse", "=", "os", ".", "path", ".", "join", "(", "cityscapesPath", ",", "\"gtCoarse\"", ",", "\"*\"", ",", "\"*\"", ",", "\"*_gt*_polygons.json\"", ")", "\n", "\n", "# search files", "\n", "filesFine", "=", "glob", ".", "glob", "(", "searchFine", ")", "\n", "filesFine", ".", "sort", "(", ")", "\n", "filesCoarse", "=", "glob", ".", "glob", "(", "searchCoarse", ")", "\n", "filesCoarse", ".", "sort", "(", ")", "\n", "\n", "# concatenate fine and coarse", "\n", "files", "=", "filesFine", "+", "filesCoarse", "\n", "# files = filesFine # use this line if fine is enough for now.", "\n", "\n", "# quit if we did not find anything", "\n", "if", "not", "files", ":", "\n", "        ", "printError", "(", "\"Did not find any files. Please consult the README.\"", ")", "\n", "\n", "# a bit verbose", "\n", "", "print", "(", "\"Processing {} annotation files\"", ".", "format", "(", "len", "(", "files", ")", ")", ")", "\n", "\n", "# iterate through files", "\n", "progress", "=", "0", "\n", "print", "(", "\"Progress: {:>3} %\"", ".", "format", "(", "progress", "*", "100", "/", "len", "(", "files", ")", ")", ",", "end", "=", "' '", ")", "\n", "for", "f", "in", "files", ":", "\n", "# create the output filename", "\n", "        ", "dst", "=", "f", ".", "replace", "(", "\"_polygons.json\"", ",", "\"_instanceTrainIds.png\"", ")", "\n", "\n", "# do the conversion", "\n", "try", ":", "\n", "            ", "json2instanceImg", "(", "f", ",", "dst", ",", "\"trainIds\"", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "\"Failed to convert: {}\"", ".", "format", "(", "f", ")", ")", "\n", "raise", "\n", "\n", "# status", "\n", "", "progress", "+=", "1", "\n", "print", "(", "\"\\rProgress: {:>3} %\"", ".", "format", "(", "progress", "*", "100", "/", "len", "(", "files", ")", ")", ",", "end", "=", "' '", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.createTrainIdLabelImgs.main": [[31, 76], ["os.path.join", "os.path.join", "glob.glob", "glob.glob.sort", "glob.glob", "glob.glob.sort", "print", "print", "os.path.join", "cityscapesscripts.helpers.csHelpers.printError", "f.replace", "print", "sys.stdout.flush", "os.path.dirname", "len", "cityscapesscripts.preparation.json2labelImg.json2labelImg", "os.path.realpath", "len", "print", "len"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printError", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.json2labelImg"], ["def", "main", "(", ")", ":", "\n", "# Where to look for Cityscapes", "\n", "    ", "if", "'CITYSCAPES_DATASET'", "in", "os", ".", "environ", ":", "\n", "        ", "cityscapesPath", "=", "os", ".", "environ", "[", "'CITYSCAPES_DATASET'", "]", "\n", "", "else", ":", "\n", "        ", "cityscapesPath", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", ",", "'..'", ",", "'..'", ")", "\n", "# how to search for all ground truth", "\n", "", "searchFine", "=", "os", ".", "path", ".", "join", "(", "cityscapesPath", ",", "\"gtFine\"", ",", "\"*\"", ",", "\"*\"", ",", "\"*_gt*_polygons.json\"", ")", "\n", "searchCoarse", "=", "os", ".", "path", ".", "join", "(", "cityscapesPath", ",", "\"gtCoarse\"", ",", "\"*\"", ",", "\"*\"", ",", "\"*_gt*_polygons.json\"", ")", "\n", "\n", "# search files", "\n", "filesFine", "=", "glob", ".", "glob", "(", "searchFine", ")", "\n", "filesFine", ".", "sort", "(", ")", "\n", "filesCoarse", "=", "glob", ".", "glob", "(", "searchCoarse", ")", "\n", "filesCoarse", ".", "sort", "(", ")", "\n", "\n", "# concatenate fine and coarse", "\n", "files", "=", "filesFine", "+", "filesCoarse", "\n", "# files = filesFine # use this line if fine is enough for now.", "\n", "\n", "# quit if we did not find anything", "\n", "if", "not", "files", ":", "\n", "        ", "printError", "(", "\"Did not find any files. Please consult the README.\"", ")", "\n", "\n", "# a bit verbose", "\n", "", "print", "(", "\"Processing {} annotation files\"", ".", "format", "(", "len", "(", "files", ")", ")", ")", "\n", "\n", "# iterate through files", "\n", "progress", "=", "0", "\n", "print", "(", "\"Progress: {:>3} %\"", ".", "format", "(", "progress", "*", "100", "/", "len", "(", "files", ")", ")", ",", "end", "=", "' '", ")", "\n", "for", "f", "in", "files", ":", "\n", "# create the output filename", "\n", "        ", "dst", "=", "f", ".", "replace", "(", "\"_polygons.json\"", ",", "\"_trainIds.png\"", ")", "\n", "\n", "# do the conversion", "\n", "try", ":", "\n", "            ", "json2labelImg", "(", "f", ",", "dst", ",", "\"trainIds\"", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "\"Failed to convert: {}\"", ".", "format", "(", "f", ")", ")", "\n", "raise", "\n", "\n", "# status", "\n", "", "progress", "+=", "1", "\n", "print", "(", "\"\\rProgress: {:>3} %\"", ".", "format", "(", "progress", "*", "100", "/", "len", "(", "files", ")", ")", ",", "end", "=", "' '", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.createPanopticImgs.convert2panoptic": [[34, 156], ["os.path.join", "categories.append", "os.path.join", "glob.glob", "glob.glob.sort", "print", "os.path.join", "print", "os.path.join", "print", "enumerate", "print", "os.path.join", "cityscapesscripts.helpers.csHelpers.printError", "os.path.isdir", "print", "os.mkdir", "numpy.array", "os.path.basename", "os.path.basename.replace", "os.path.basename.replace", "os.path.basename.replace", "images.append", "numpy.zeros", "numpy.unique", "annotations.append", "PIL.Image.fromarray().save", "print", "sys.stdout.flush", "open", "json.dump", "os.path.dirname", "len", "PIL.Image.open", "numpy.sum", "numpy.sum", "numpy.sum", "segmInfo.append", "os.path.join", "os.path.realpath", "int", "int", "int", "int", "numpy.nonzero", "numpy.nonzero", "int", "int", "int", "int", "PIL.Image.fromarray", "int", "int", "int", "len"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printError", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.utils.util.mkdir", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.save"], ["def", "convert2panoptic", "(", "cityscapesPath", "=", "None", ",", "outputFolder", "=", "None", ",", "useTrainId", "=", "False", ",", "setNames", "=", "[", "\"val\"", ",", "\"train\"", ",", "\"test\"", "]", ")", ":", "\n", "# Where to look for Cityscapes", "\n", "    ", "if", "cityscapesPath", "is", "None", ":", "\n", "        ", "if", "'CITYSCAPES_DATASET'", "in", "os", ".", "environ", ":", "\n", "            ", "cityscapesPath", "=", "os", ".", "environ", "[", "'CITYSCAPES_DATASET'", "]", "\n", "", "else", ":", "\n", "            ", "cityscapesPath", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", ",", "'..'", ",", "'..'", ")", "\n", "", "cityscapesPath", "=", "os", ".", "path", ".", "join", "(", "cityscapesPath", ",", "\"gtFine\"", ")", "\n", "\n", "", "if", "outputFolder", "is", "None", ":", "\n", "        ", "outputFolder", "=", "cityscapesPath", "\n", "\n", "", "categories", "=", "[", "]", "\n", "for", "label", "in", "labels", ":", "\n", "        ", "if", "label", ".", "ignoreInEval", ":", "\n", "            ", "continue", "\n", "", "categories", ".", "append", "(", "{", "'id'", ":", "int", "(", "label", ".", "trainId", ")", "if", "useTrainId", "else", "int", "(", "label", ".", "id", ")", ",", "\n", "'name'", ":", "label", ".", "name", ",", "\n", "'color'", ":", "label", ".", "color", ",", "\n", "'supercategory'", ":", "label", ".", "category", ",", "\n", "'isthing'", ":", "1", "if", "label", ".", "hasInstances", "else", "0", "}", ")", "\n", "\n", "", "for", "setName", "in", "setNames", ":", "\n", "# how to search for all ground truth", "\n", "        ", "searchFine", "=", "os", ".", "path", ".", "join", "(", "cityscapesPath", ",", "setName", ",", "\"*\"", ",", "\"*_instanceIds.png\"", ")", "\n", "# search files", "\n", "filesFine", "=", "glob", ".", "glob", "(", "searchFine", ")", "\n", "filesFine", ".", "sort", "(", ")", "\n", "\n", "files", "=", "filesFine", "\n", "# quit if we did not find anything", "\n", "if", "not", "files", ":", "\n", "            ", "printError", "(", "\n", "\"Did not find any files for {} set using matching pattern {}. Please consult the README.\"", ".", "format", "(", "setName", ",", "searchFine", ")", "\n", ")", "\n", "# a bit verbose", "\n", "", "print", "(", "\"Converting {} annotation files for {} set.\"", ".", "format", "(", "len", "(", "files", ")", ",", "setName", ")", ")", "\n", "\n", "trainIfSuffix", "=", "\"_trainId\"", "if", "useTrainId", "else", "\"\"", "\n", "outputBaseFile", "=", "\"cityscapes_panoptic_{}{}\"", ".", "format", "(", "setName", ",", "trainIfSuffix", ")", "\n", "outFile", "=", "os", ".", "path", ".", "join", "(", "outputFolder", ",", "\"{}.json\"", ".", "format", "(", "outputBaseFile", ")", ")", "\n", "print", "(", "\"Json file with the annotations in panoptic format will be saved in {}\"", ".", "format", "(", "outFile", ")", ")", "\n", "panopticFolder", "=", "os", ".", "path", ".", "join", "(", "outputFolder", ",", "outputBaseFile", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "panopticFolder", ")", ":", "\n", "            ", "print", "(", "\"Creating folder {} for panoptic segmentation PNGs\"", ".", "format", "(", "panopticFolder", ")", ")", "\n", "os", ".", "mkdir", "(", "panopticFolder", ")", "\n", "", "print", "(", "\"Corresponding segmentations in .png format will be saved in {}\"", ".", "format", "(", "panopticFolder", ")", ")", "\n", "\n", "images", "=", "[", "]", "\n", "annotations", "=", "[", "]", "\n", "for", "progress", ",", "f", "in", "enumerate", "(", "files", ")", ":", "\n", "\n", "            ", "originalFormat", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "f", ")", ")", "\n", "\n", "fileName", "=", "os", ".", "path", ".", "basename", "(", "f", ")", "\n", "imageId", "=", "fileName", ".", "replace", "(", "\"_gtFine_instanceIds.png\"", ",", "\"\"", ")", "\n", "inputFileName", "=", "fileName", ".", "replace", "(", "\"_instanceIds.png\"", ",", "\"_leftImg8bit.png\"", ")", "\n", "outputFileName", "=", "fileName", ".", "replace", "(", "\"_instanceIds.png\"", ",", "\"_panoptic.png\"", ")", "\n", "# image entry, id for image is its filename without extension", "\n", "images", ".", "append", "(", "{", "\"id\"", ":", "imageId", ",", "\n", "\"width\"", ":", "int", "(", "originalFormat", ".", "shape", "[", "1", "]", ")", ",", "\n", "\"height\"", ":", "int", "(", "originalFormat", ".", "shape", "[", "0", "]", ")", ",", "\n", "\"file_name\"", ":", "inputFileName", "}", ")", "\n", "\n", "pan_format", "=", "np", ".", "zeros", "(", "\n", "(", "originalFormat", ".", "shape", "[", "0", "]", ",", "originalFormat", ".", "shape", "[", "1", "]", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", "\n", ")", "\n", "\n", "segmentIds", "=", "np", ".", "unique", "(", "originalFormat", ")", "\n", "segmInfo", "=", "[", "]", "\n", "for", "segmentId", "in", "segmentIds", ":", "\n", "                ", "if", "segmentId", "<", "1000", ":", "\n", "                    ", "semanticId", "=", "segmentId", "\n", "isCrowd", "=", "1", "\n", "", "else", ":", "\n", "                    ", "semanticId", "=", "segmentId", "//", "1000", "\n", "isCrowd", "=", "0", "\n", "", "labelInfo", "=", "id2label", "[", "semanticId", "]", "\n", "categoryId", "=", "labelInfo", ".", "trainId", "if", "useTrainId", "else", "labelInfo", ".", "id", "\n", "if", "labelInfo", ".", "ignoreInEval", ":", "\n", "                    ", "continue", "\n", "", "if", "not", "labelInfo", ".", "hasInstances", ":", "\n", "                    ", "isCrowd", "=", "0", "\n", "\n", "", "mask", "=", "originalFormat", "==", "segmentId", "\n", "color", "=", "[", "segmentId", "%", "256", ",", "segmentId", "//", "256", ",", "segmentId", "//", "256", "//", "256", "]", "\n", "pan_format", "[", "mask", "]", "=", "color", "\n", "\n", "area", "=", "np", ".", "sum", "(", "mask", ")", "# segment area computation", "\n", "\n", "# bbox computation for a segment", "\n", "hor", "=", "np", ".", "sum", "(", "mask", ",", "axis", "=", "0", ")", "\n", "hor_idx", "=", "np", ".", "nonzero", "(", "hor", ")", "[", "0", "]", "\n", "x", "=", "hor_idx", "[", "0", "]", "\n", "width", "=", "hor_idx", "[", "-", "1", "]", "-", "x", "+", "1", "\n", "vert", "=", "np", ".", "sum", "(", "mask", ",", "axis", "=", "1", ")", "\n", "vert_idx", "=", "np", ".", "nonzero", "(", "vert", ")", "[", "0", "]", "\n", "y", "=", "vert_idx", "[", "0", "]", "\n", "height", "=", "vert_idx", "[", "-", "1", "]", "-", "y", "+", "1", "\n", "bbox", "=", "[", "int", "(", "x", ")", ",", "int", "(", "y", ")", ",", "int", "(", "width", ")", ",", "int", "(", "height", ")", "]", "\n", "\n", "segmInfo", ".", "append", "(", "{", "\"id\"", ":", "int", "(", "segmentId", ")", ",", "\n", "\"category_id\"", ":", "int", "(", "categoryId", ")", ",", "\n", "\"area\"", ":", "int", "(", "area", ")", ",", "\n", "\"bbox\"", ":", "bbox", ",", "\n", "\"iscrowd\"", ":", "isCrowd", "}", ")", "\n", "\n", "", "annotations", ".", "append", "(", "{", "'image_id'", ":", "imageId", ",", "\n", "'file_name'", ":", "outputFileName", ",", "\n", "\"segments_info\"", ":", "segmInfo", "}", ")", "\n", "\n", "Image", ".", "fromarray", "(", "pan_format", ")", ".", "save", "(", "os", ".", "path", ".", "join", "(", "panopticFolder", ",", "outputFileName", ")", ")", "\n", "\n", "print", "(", "\"\\rProgress: {:>3.2f} %\"", ".", "format", "(", "(", "progress", "+", "1", ")", "*", "100", "/", "len", "(", "files", ")", ")", ",", "end", "=", "' '", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "print", "(", "\"\\nSaving the json file {}\"", ".", "format", "(", "outFile", ")", ")", "\n", "d", "=", "{", "'images'", ":", "images", ",", "\n", "'annotations'", ":", "annotations", ",", "\n", "'categories'", ":", "categories", "}", "\n", "with", "open", "(", "outFile", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "d", ",", "f", ",", "sort_keys", "=", "True", ",", "indent", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.createPanopticImgs.main": [[158, 180], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "createPanopticImgs.convert2panoptic"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.createPanopticImgs.convert2panoptic"], ["", "", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset-folder\"", ",", "\n", "dest", "=", "\"cityscapesPath\"", ",", "\n", "help", "=", "\"path to the Cityscapes dataset 'gtFine' folder\"", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--output-folder\"", ",", "\n", "dest", "=", "\"outputFolder\"", ",", "\n", "help", "=", "\"path to the output folder.\"", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--use-train-id\"", ",", "action", "=", "\"store_true\"", ",", "dest", "=", "\"useTrainId\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--set-names\"", ",", "\n", "dest", "=", "\"setNames\"", ",", "\n", "help", "=", "\"set names to which apply the function to\"", ",", "\n", "nargs", "=", "'+'", ",", "\n", "default", "=", "[", "\"val\"", ",", "\"train\"", ",", "\"test\"", "]", ",", "\n", "type", "=", "str", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "convert2panoptic", "(", "args", ".", "cityscapesPath", ",", "args", ".", "outputFolder", ",", "args", ".", "useTrainId", ",", "args", ".", "setNames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printHelp": [[31, 40], ["print", "print", "print", "print", "print", "print", "print", "print", "os.path.basename"], "function", ["None"], ["def", "printHelp", "(", ")", ":", "\n", "    ", "print", "(", "'{} [OPTIONS] inputJson outputImg'", ".", "format", "(", "os", ".", "path", ".", "basename", "(", "sys", ".", "argv", "[", "0", "]", ")", ")", ")", "\n", "print", "(", "''", ")", "\n", "print", "(", "'Reads labels as polygons in JSON format and converts them to label images,'", ")", "\n", "print", "(", "'where each pixel has an ID that represents the ground truth label.'", ")", "\n", "print", "(", "''", ")", "\n", "print", "(", "'Options:'", ")", "\n", "print", "(", "' -h                 Print this help'", ")", "\n", "print", "(", "' -t                 Use the \"trainIDs\" instead of the regular mapping. See \"labels.py\" for details.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printError": [[42, 48], ["print", "print", "print", "json2labelImg.printHelp", "sys.exit"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printHelp"], ["", "def", "printError", "(", "message", ")", ":", "\n", "    ", "print", "(", "'ERROR: {}'", ".", "format", "(", "message", ")", ")", "\n", "print", "(", "''", ")", "\n", "print", "(", "'USAGE:'", ")", "\n", "printHelp", "(", ")", "\n", "sys", ".", "exit", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.createLabelImage": [[50, 112], ["PIL.ImageDraw.Draw", "PIL.Image.new", "PIL.Image.new", "label.endswith", "json2labelImg.printError", "print", "ImageDraw.Draw.polygon", "ImageDraw.Draw.polygon", "print", "len"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printError"], ["", "def", "createLabelImage", "(", "annotation", ",", "encoding", ",", "outline", "=", "None", ")", ":", "\n", "# the size of the image", "\n", "    ", "size", "=", "(", "annotation", ".", "imgWidth", ",", "annotation", ".", "imgHeight", ")", "\n", "\n", "# the background", "\n", "if", "encoding", "==", "\"ids\"", ":", "\n", "        ", "background", "=", "name2label", "[", "'unlabeled'", "]", ".", "id", "\n", "", "elif", "encoding", "==", "\"trainIds\"", ":", "\n", "        ", "background", "=", "name2label", "[", "'unlabeled'", "]", ".", "trainId", "\n", "", "elif", "encoding", "==", "\"color\"", ":", "\n", "        ", "background", "=", "name2label", "[", "'unlabeled'", "]", ".", "color", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Unknown encoding '{}'\"", ".", "format", "(", "encoding", ")", ")", "\n", "return", "None", "\n", "\n", "# this is the image that we want to create", "\n", "", "if", "encoding", "==", "\"color\"", ":", "\n", "        ", "labelImg", "=", "Image", ".", "new", "(", "\"RGBA\"", ",", "size", ",", "background", ")", "\n", "", "else", ":", "\n", "        ", "labelImg", "=", "Image", ".", "new", "(", "\"L\"", ",", "size", ",", "background", ")", "\n", "\n", "# a drawer to draw into the image", "\n", "", "drawer", "=", "ImageDraw", ".", "Draw", "(", "labelImg", ")", "\n", "\n", "# loop over all objects", "\n", "for", "obj", "in", "annotation", ".", "objects", ":", "\n", "        ", "label", "=", "obj", ".", "label", "\n", "polygon", "=", "obj", ".", "polygon", "\n", "\n", "# If the object is deleted, skip it", "\n", "if", "obj", ".", "deleted", ":", "\n", "            ", "continue", "\n", "\n", "# If the label is not known, but ends with a 'group' (e.g. cargroup)", "\n", "# try to remove the s and see if that works", "\n", "", "if", "(", "not", "label", "in", "name2label", ")", "and", "label", ".", "endswith", "(", "'group'", ")", ":", "\n", "            ", "label", "=", "label", "[", ":", "-", "len", "(", "'group'", ")", "]", "\n", "\n", "", "if", "not", "label", "in", "name2label", ":", "\n", "            ", "printError", "(", "\"Label '{}' not known.\"", ".", "format", "(", "label", ")", ")", "\n", "\n", "# If the ID is negative that polygon should not be drawn", "\n", "", "if", "name2label", "[", "label", "]", ".", "id", "<", "0", ":", "\n", "            ", "continue", "\n", "\n", "", "if", "encoding", "==", "\"ids\"", ":", "\n", "            ", "val", "=", "name2label", "[", "label", "]", ".", "id", "\n", "", "elif", "encoding", "==", "\"trainIds\"", ":", "\n", "            ", "val", "=", "name2label", "[", "label", "]", ".", "trainId", "\n", "", "elif", "encoding", "==", "\"color\"", ":", "\n", "            ", "val", "=", "name2label", "[", "label", "]", ".", "color", "\n", "\n", "", "try", ":", "\n", "            ", "if", "outline", ":", "\n", "                ", "drawer", ".", "polygon", "(", "polygon", ",", "fill", "=", "val", ",", "outline", "=", "outline", ")", "\n", "", "else", ":", "\n", "                ", "drawer", ".", "polygon", "(", "polygon", ",", "fill", "=", "val", ")", "\n", "", "", "except", ":", "\n", "            ", "print", "(", "\"Failed to draw polygon with label {}\"", ".", "format", "(", "label", ")", ")", "\n", "raise", "\n", "\n", "", "", "return", "labelImg", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.json2labelImg": [[120, 125], ["cityscapesscripts.helpers.annotation.Annotation", "cityscapesscripts.helpers.annotation.Annotation.fromJsonFile", "json2labelImg.createLabelImage", "createLabelImage.save"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.helpers.annotation.Annotation.fromJsonFile", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.createLabelImage", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.annotation.cityscapesLabelTool.CityscapesLabelTool.save"], ["", "def", "json2labelImg", "(", "inJson", ",", "outImg", ",", "encoding", "=", "\"ids\"", ")", ":", "\n", "    ", "annotation", "=", "Annotation", "(", ")", "\n", "annotation", ".", "fromJsonFile", "(", "inJson", ")", "\n", "labelImg", "=", "createLabelImage", "(", "annotation", ",", "encoding", ")", "\n", "labelImg", ".", "save", "(", "outImg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.main": [[128, 157], ["getopt.getopt", "len", "json2labelImg.printError", "json2labelImg.json2labelImg", "json2labelImg.json2labelImg", "json2labelImg.printError", "json2labelImg.printHelp", "sys.exit", "len", "json2labelImg.printError", "json2labelImg.printError", "len", "json2labelImg.printError"], "function", ["home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printError", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.json2labelImg", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.json2labelImg", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printError", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printHelp", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printError", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printError", "home.repos.pwc.inspect_result.PierfrancescoArdino_SGINet.preparation.json2labelImg.printError"], ["", "def", "main", "(", "argv", ")", ":", "\n", "    ", "trainIds", "=", "False", "\n", "try", ":", "\n", "        ", "opts", ",", "args", "=", "getopt", ".", "getopt", "(", "argv", ",", "\"ht\"", ")", "\n", "", "except", "getopt", ".", "GetoptError", ":", "\n", "        ", "printError", "(", "'Invalid arguments'", ")", "\n", "", "for", "opt", ",", "arg", "in", "opts", ":", "\n", "        ", "if", "opt", "==", "'-h'", ":", "\n", "            ", "printHelp", "(", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "", "elif", "opt", "==", "'-t'", ":", "\n", "            ", "trainIds", "=", "True", "\n", "", "else", ":", "\n", "            ", "printError", "(", "\"Handling of argument '{}' not implementend\"", ".", "format", "(", "opt", ")", ")", "\n", "\n", "", "", "if", "len", "(", "args", ")", "==", "0", ":", "\n", "        ", "printError", "(", "\"Missing input json file\"", ")", "\n", "", "elif", "len", "(", "args", ")", "==", "1", ":", "\n", "        ", "printError", "(", "\"Missing output image filename\"", ")", "\n", "", "elif", "len", "(", "args", ")", ">", "2", ":", "\n", "        ", "printError", "(", "\"Too many arguments\"", ")", "\n", "\n", "", "inJson", "=", "args", "[", "0", "]", "\n", "outImg", "=", "args", "[", "1", "]", "\n", "\n", "if", "trainIds", ":", "\n", "        ", "json2labelImg", "(", "inJson", ",", "outImg", ",", "\"trainIds\"", ")", "\n", "", "else", ":", "\n", "        ", "json2labelImg", "(", "inJson", ",", "outImg", ")", "\n", "\n"]]}