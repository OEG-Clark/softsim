{"home.repos.pwc.inspect_result.Sjtubrian_SAMMD.None.Baselines.Discriminator.__init__": [[53, 76], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Softmax", "torch.Softmax", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Dropout2d", "torch.Dropout2d", "block.append", "Baselines.Discriminator.__init__.discriminator_block"], "methods", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.Wide_ResNet_Madry.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "def", "discriminator_block", "(", "in_filters", ",", "out_filters", ",", "bn", "=", "True", ")", ":", "\n", "            ", "block", "=", "[", "nn", ".", "Conv2d", "(", "in_filters", ",", "out_filters", ",", "3", ",", "2", ",", "1", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "nn", ".", "Dropout2d", "(", "0", ")", "]", "\n", "if", "bn", ":", "\n", "                ", "block", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "out_filters", ",", "0.8", ")", ")", "\n", "", "return", "block", "\n", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "*", "discriminator_block", "(", "opt", ".", "channels", ",", "16", ",", "bn", "=", "False", ")", ",", "\n", "*", "discriminator_block", "(", "16", ",", "32", ")", ",", "\n", "*", "discriminator_block", "(", "32", ",", "64", ")", ",", "\n", "*", "discriminator_block", "(", "64", ",", "128", ")", ",", "\n", ")", "\n", "\n", "# The height and width of downsampled image", "\n", "ds_size", "=", "opt", ".", "img_size", "//", "2", "**", "4", "\n", "self", ".", "adv_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "512", ",", "300", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "300", ",", "2", ")", ",", "\n", "nn", ".", "Softmax", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.None.Baselines.Discriminator.forward": [[77, 83], ["Baselines.Discriminator.model", "out.view.view.view", "Baselines.Discriminator.adv_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ")", ":", "\n", "        ", "out", "=", "self", ".", "model", "(", "img", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "validity", "=", "self", ".", "adv_layer", "(", "out", ")", "\n", "\n", "return", "validity", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.None.Baselines.Featurizer.__init__": [[86, 106], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Dropout2d", "torch.Dropout2d", "block.append", "Baselines.Featurizer.__init__.discriminator_block"], "methods", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.Wide_ResNet_Madry.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Featurizer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "def", "discriminator_block", "(", "in_filters", ",", "out_filters", ",", "bn", "=", "True", ")", ":", "\n", "            ", "block", "=", "[", "nn", ".", "Conv2d", "(", "in_filters", ",", "out_filters", ",", "3", ",", "2", ",", "1", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "nn", ".", "Dropout2d", "(", "0", ")", "]", "#0.25", "\n", "if", "bn", ":", "\n", "                ", "block", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "out_filters", ",", "0.8", ")", ")", "\n", "", "return", "block", "\n", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "*", "discriminator_block", "(", "opt", ".", "channels", ",", "16", ",", "bn", "=", "False", ")", ",", "\n", "*", "discriminator_block", "(", "16", ",", "32", ")", ",", "\n", "*", "discriminator_block", "(", "32", ",", "64", ")", ",", "\n", "*", "discriminator_block", "(", "64", ",", "128", ")", ",", "\n", ")", "\n", "\n", "# The height and width of downsampled image", "\n", "ds_size", "=", "opt", ".", "img_size", "//", "2", "**", "4", "\n", "self", ".", "adv_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "512", ",", "300", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.None.Baselines.Featurizer.forward": [[107, 113], ["Baselines.Featurizer.model", "out.view.view.view", "Baselines.Featurizer.adv_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ")", ":", "\n", "        ", "out", "=", "self", ".", "model", "(", "img", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "feature", "=", "self", ".", "adv_layer", "(", "out", ")", "\n", "\n", "return", "feature", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.None.utils_HD.ModelLatentF.__init__": [[14, 27], ["super().__init__", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Softplus", "torch.nn.Linear", "torch.nn.Softplus", "torch.nn.Linear", "torch.nn.Softplus", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.Wide_ResNet_Madry.__init__"], ["def", "__init__", "(", "self", ",", "x_in", ",", "H", ",", "x_out", ")", ":", "\n", "        ", "\"\"\"Init latent features.\"\"\"", "\n", "super", "(", "ModelLatentF", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "restored", "=", "False", "\n", "\n", "self", ".", "latent", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Linear", "(", "x_in", ",", "H", ",", "bias", "=", "True", ")", ",", "\n", "torch", ".", "nn", ".", "Softplus", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "H", ",", "H", ",", "bias", "=", "True", ")", ",", "\n", "torch", ".", "nn", ".", "Softplus", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "H", ",", "H", ",", "bias", "=", "True", ")", ",", "\n", "torch", ".", "nn", ".", "Softplus", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "H", ",", "x_out", ",", "bias", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.None.utils_HD.ModelLatentF.forward": [[28, 32], ["utils_HD.ModelLatentF.latent"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"Forward the LeNet.\"\"\"", "\n", "fealant", "=", "self", ".", "latent", "(", "input", ")", "\n", "return", "fealant", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.None.utils_HD.get_item": [[33, 40], ["x.detach().numpy.cpu().detach().numpy", "x.detach().numpy.detach().numpy", "x.detach().numpy.cpu().detach", "x.detach().numpy.detach", "x.detach().numpy.cpu"], "function", ["None"], ["", "", "def", "get_item", "(", "x", ",", "is_cuda", ")", ":", "\n", "    ", "\"\"\"get the numpy value from a torch tensor.\"\"\"", "\n", "if", "is_cuda", ":", "\n", "        ", "x", "=", "x", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "        ", "x", "=", "x", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.None.utils_HD.MatConvert": [[41, 45], ["torch.from_numpy().to", "torch.from_numpy"], "function", ["None"], ["", "def", "MatConvert", "(", "x", ",", "device", ",", "dtype", ")", ":", "\n", "    ", "\"\"\"convert the numpy to a torch tensor.\"\"\"", "\n", "x", "=", "torch", ".", "from_numpy", "(", "x", ")", ".", "to", "(", "device", ",", "dtype", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.None.utils_HD.Pdist2": [[46, 57], ["x_norm.view", "torch.mm", "torch.transpose"], "function", ["None"], ["", "def", "Pdist2", "(", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\"compute the paired distance between x and y.\"\"\"", "\n", "x_norm", "=", "(", "x", "**", "2", ")", ".", "sum", "(", "1", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "if", "y", "is", "not", "None", ":", "\n", "        ", "y_norm", "=", "(", "y", "**", "2", ")", ".", "sum", "(", "1", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "y", "=", "x", "\n", "y_norm", "=", "x_norm", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "", "Pdist", "=", "x_norm", "+", "y_norm", "-", "2.0", "*", "torch", ".", "mm", "(", "x", ",", "torch", ".", "transpose", "(", "y", ",", "0", ",", "1", ")", ")", "\n", "Pdist", "[", "Pdist", "<", "0", "]", "=", "0", "\n", "return", "Pdist", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.None.utils_HD.Wild_bootsrap_process": [[59, 70], ["numpy.exp", "numpy.array", "scipy.signal.lfilter", "numpy.exp", "numpy.sqrt", "numpy.random.randn", "numpy.array"], "function", ["None"], ["", "def", "Wild_bootsrap_process", "(", "data_length", ",", "Num_trails", ")", ":", "\n", "#ln = 20.0", "\n", "#ln = 0.2 \u539f\u53c2\u65700.2", "\n", "    ", "ln", "=", "0.2", "\n", "ar", "=", "np", ".", "exp", "(", "-", "1", "/", "ln", ")", "\n", "variance", "=", "1", "-", "np", ".", "exp", "(", "-", "2", "/", "ln", ")", "\n", "\n", "w", "=", "np", ".", "sqrt", "(", "variance", ")", "*", "np", ".", "random", ".", "randn", "(", "data_length", ",", "Num_trails", ")", "\n", "a", "=", "np", ".", "array", "(", "[", "1", ",", "-", "1", "*", "ar", "]", ")", "\n", "process", "=", "signal", ".", "lfilter", "(", "np", ".", "array", "(", "[", "1", "]", ")", ",", "a", ",", "w", ")", "\n", "return", "process", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.None.utils_HD.bootsrap_null": [[71, 95], ["utils_HD.MatConvert", "testStatMat.mean", "torch.zeros().to", "range", "utils_HD.Wild_bootsrap_process", "process[].mean", "numpy.sort", "testStatMat.mean.item", "torch.zeros", "numpy.ceil", "torch.zeros().to.cpu().detach().numpy", "numpy.int", "torch.zeros().to.cpu().detach", "numpy.ceil", "torch.zeros().to.cpu"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.MatConvert", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Wild_bootsrap_process"], ["", "def", "bootsrap_null", "(", "data_length", ",", "Num_trails", ",", "Kx", ",", "Ky", ",", "Kxy", ",", "alpha", ",", "device", ",", "dtype", ")", ":", "\n", "\n", "    ", "process", "=", "MatConvert", "(", "Wild_bootsrap_process", "(", "data_length", ",", "Num_trails", ")", ",", "device", ",", "dtype", ")", "\n", "testStatMat", "=", "Kx", "+", "Ky", "-", "2", "*", "Kxy", "\n", "testStat", "=", "testStatMat", ".", "mean", "(", ")", "\n", "testStat_tem", "=", "torch", ".", "zeros", "(", "Num_trails", ")", ".", "to", "(", "device", ",", "dtype", ")", "\n", "count", "=", "0", "\n", "for", "kk", "in", "range", "(", "Num_trails", ")", ":", "\n", "        ", "mn", "=", "process", "[", ":", ",", "kk", "]", ".", "mean", "(", ")", "\n", "matWB", "=", "(", "process", "[", ":", ",", "kk", "]", "-", "mn", ")", ".", "unsqueeze", "(", "1", ")", ".", "matmul", "(", "(", "process", "[", ":", ",", "kk", "]", "-", "mn", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "testStat_tem", "[", "kk", "]", "=", "(", "testStatMat", "*", "matWB", ")", ".", "mean", "(", ")", "\n", "if", "testStat_tem", "[", "kk", "]", ">", "testStat", ":", "\n", "            ", "count", "=", "count", "+", "1", "\n", "", "if", "count", ">", "np", ".", "ceil", "(", "Num_trails", "*", "alpha", ")", ":", "\n", "            ", "h", "=", "0", "\n", "threshold", "=", "\"NaN\"", "\n", "break", "\n", "", "else", ":", "\n", "            ", "h", "=", "1", "\n", "", "", "if", "h", "==", "1", ":", "\n", "        ", "S_mmd_vector", "=", "np", ".", "sort", "(", "testStat_tem", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "#        print(np.int(np.ceil(N_per*alpha)))", "\n", "threshold", "=", "S_mmd_vector", "[", "np", ".", "int", "(", "np", ".", "ceil", "(", "Num_trails", "*", "(", "1", "-", "alpha", ")", ")", ")", "]", "\n", "", "return", "h", ",", "threshold", ",", "testStat", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.None.utils_HD.TST_MMD_adaptive_WB": [[96, 111], ["utils_HD.Pdist2", "utils_HD.Pdist2", "utils_HD.Pdist2", "torch.exp", "torch.exp", "torch.exp", "utils_HD.bootsrap_null"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.bootsrap_null"], ["", "def", "TST_MMD_adaptive_WB", "(", "Fea", ",", "N_per", ",", "N_te", ",", "sigma", ",", "sigma0", ",", "alpha", ",", "device", ",", "dtype", ")", ":", "\n", "\n", "    ", "X", "=", "Fea", "[", "0", ":", "N_te", ",", ":", "]", "# fetch the sample 1 (features of deep networks)", "\n", "Y", "=", "Fea", "[", "N_te", ":", ",", ":", "]", "# fetch the sample 2 (features of deep networks)", "\n", "\n", "\n", "Dxx", "=", "Pdist2", "(", "X", ",", "X", ")", "\n", "Dyy", "=", "Pdist2", "(", "Y", ",", "Y", ")", "\n", "Dxy", "=", "Pdist2", "(", "X", ",", "Y", ")", "\n", "\n", "Kx", "=", "torch", ".", "exp", "(", "-", "Dxx", "/", "sigma0", ")", "\n", "Ky", "=", "torch", ".", "exp", "(", "-", "Dyy", "/", "sigma0", ")", "\n", "Kxy", "=", "torch", ".", "exp", "(", "-", "Dxy", "/", "sigma0", ")", "\n", "\n", "return", "bootsrap_null", "(", "N_te", ",", "N_per", ",", "Kx", ",", "Ky", ",", "Kxy", ",", "alpha", ",", "device", ",", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.None.utils_HD.SAMMD_WB": [[113, 133], ["utils_HD.Pdist2", "utils_HD.Pdist2", "utils_HD.Pdist2", "utils_HD.Pdist2", "utils_HD.Pdist2", "utils_HD.Pdist2", "utils_HD.bootsrap_null", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.bootsrap_null"], ["", "def", "SAMMD_WB", "(", "Fea", ",", "N_per", ",", "N_te", ",", "Fea_org", ",", "sigma", ",", "sigma0", ",", "epsilon", ",", "alpha", ",", "device", ",", "dtype", ")", ":", "\n", "\n", "    ", "X", "=", "Fea", "[", "0", ":", "N_te", ",", ":", "]", "# fetch the sample 1 (features of deep networks)", "\n", "Y", "=", "Fea", "[", "N_te", ":", ",", ":", "]", "# fetch the sample 2 (features of deep networks)", "\n", "X_org", "=", "Fea_org", "[", "0", ":", "N_te", ",", ":", "]", "# fetch the original sample 1", "\n", "Y_org", "=", "Fea_org", "[", "N_te", ":", ",", ":", "]", "# fetch the original sample 2", "\n", "\n", "\n", "Dxx", "=", "Pdist2", "(", "X", ",", "X", ")", "\n", "Dyy", "=", "Pdist2", "(", "Y", ",", "Y", ")", "\n", "Dxy", "=", "Pdist2", "(", "X", ",", "Y", ")", "\n", "Dxx_org", "=", "Pdist2", "(", "X_org", ",", "X_org", ")", "\n", "Dyy_org", "=", "Pdist2", "(", "Y_org", ",", "Y_org", ")", "\n", "Dxy_org", "=", "Pdist2", "(", "X_org", ",", "Y_org", ")", "\n", "\n", "Kx", "=", "(", "1", "-", "epsilon", ")", "*", "torch", ".", "exp", "(", "-", "(", "Dxx", "/", "sigma0", ")", "-", "Dxx_org", "/", "sigma", ")", "+", "epsilon", "*", "torch", ".", "exp", "(", "-", "Dxx_org", "/", "sigma", ")", "\n", "Ky", "=", "(", "1", "-", "epsilon", ")", "*", "torch", ".", "exp", "(", "-", "(", "Dyy", "/", "sigma0", ")", "-", "Dyy_org", "/", "sigma", ")", "+", "epsilon", "*", "torch", ".", "exp", "(", "-", "Dyy_org", "/", "sigma", ")", "\n", "Kxy", "=", "(", "1", "-", "epsilon", ")", "*", "torch", ".", "exp", "(", "-", "(", "Dxy", "/", "sigma0", ")", "-", "Dxy_org", "/", "sigma", ")", "+", "epsilon", "*", "torch", ".", "exp", "(", "-", "Dxy_org", "/", "sigma", ")", "\n", "\n", "return", "bootsrap_null", "(", "N_te", ",", "N_per", ",", "Kx", ",", "Ky", ",", "Kxy", ",", "alpha", ",", "device", ",", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.None.utils_HD.TST_WBMMD_u": [[134, 159], ["utils_HD.Pdist2", "utils_HD.Pdist2", "utils_HD.Pdist2", "utils_HD.Pdist2", "utils_HD.Pdist2", "utils_HD.Pdist2", "utils_HD.bootsrap_null", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.bootsrap_null"], ["", "def", "TST_WBMMD_u", "(", "Fea", ",", "N_per", ",", "N1", ",", "Fea_org", ",", "sigma", ",", "sigma0", ",", "epsilon", ",", "alpha", ",", "device", ",", "dtype", ",", "is_smooth", ")", ":", "\n", "    ", "\"\"\"run two-sample test (TST) using deep kernel kernel.\"\"\"", "\n", "X", "=", "Fea", "[", "0", ":", "N1", ",", ":", "]", "# fetch the sample 1 (features of deep networks)", "\n", "Y", "=", "Fea", "[", "N1", ":", ",", ":", "]", "# fetch the sample 2 (features of deep networks)", "\n", "X_org", "=", "Fea_org", "[", "0", ":", "N1", ",", ":", "]", "# fetch the original sample 1", "\n", "Y_org", "=", "Fea_org", "[", "N1", ":", ",", ":", "]", "# fetch the original sample 2", "\n", "\n", "nx", "=", "X", ".", "shape", "[", "0", "]", "\n", "ny", "=", "Y", ".", "shape", "[", "0", "]", "\n", "Dxx", "=", "Pdist2", "(", "X", ",", "X", ")", "\n", "Dyy", "=", "Pdist2", "(", "Y", ",", "Y", ")", "\n", "Dxy", "=", "Pdist2", "(", "X", ",", "Y", ")", "\n", "Dxx_org", "=", "Pdist2", "(", "X_org", ",", "X_org", ")", "\n", "Dyy_org", "=", "Pdist2", "(", "Y_org", ",", "Y_org", ")", "\n", "Dxy_org", "=", "Pdist2", "(", "X_org", ",", "Y_org", ")", "\n", "if", "is_smooth", ":", "\n", "        ", "Kx", "=", "(", "1", "-", "epsilon", ")", "*", "torch", ".", "exp", "(", "-", "(", "Dxx", "/", "sigma0", ")", "-", "Dxx_org", "/", "sigma", ")", "+", "epsilon", "*", "torch", ".", "exp", "(", "-", "Dxx_org", "/", "sigma", ")", "\n", "Ky", "=", "(", "1", "-", "epsilon", ")", "*", "torch", ".", "exp", "(", "-", "(", "Dyy", "/", "sigma0", ")", "-", "Dyy_org", "/", "sigma", ")", "+", "epsilon", "*", "torch", ".", "exp", "(", "-", "Dyy_org", "/", "sigma", ")", "\n", "Kxy", "=", "(", "1", "-", "epsilon", ")", "*", "torch", ".", "exp", "(", "-", "(", "Dxy", "/", "sigma0", ")", "-", "Dxy_org", "/", "sigma", ")", "+", "epsilon", "*", "torch", ".", "exp", "(", "-", "Dxy_org", "/", "sigma", ")", "\n", "", "else", ":", "\n", "        ", "Kx", "=", "torch", ".", "exp", "(", "-", "Dxx", "/", "sigma0", ")", "\n", "Ky", "=", "torch", ".", "exp", "(", "-", "Dyy", "/", "sigma0", ")", "\n", "Kxy", "=", "torch", ".", "exp", "(", "-", "Dxy", "/", "sigma0", ")", "\n", "\n", "", "return", "bootsrap_null", "(", "N1", ",", "N_per", ",", "Kx", ",", "Ky", ",", "Kxy", ",", "alpha", ",", "device", ",", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.None.utils_HD.h1_mean_var_gram": [[163, 199], ["torch.cat", "torch.cat", "torch.cat", "torch.div", "torch.div", "torch.div", "torch.div", "Kxy.transpose", "torch.dot", "print", "print", "Kxy.transpose", "torch.div", "torch.div", "torch.sum", "torch.sum", "torch.div", "torch.div", "hh.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "hh.sum", "hh.sum", "str", "torch.diag", "torch.diag", "torch.sum", "torch.sum", "torch.diag"], "function", ["None"], ["", "def", "h1_mean_var_gram", "(", "Kx", ",", "Ky", ",", "Kxy", ",", "is_var_computed", ",", "use_1sample_U", "=", "True", ")", ":", "\n", "    ", "\"\"\"compute value of MMD and std of MMD using kernel matrix.\"\"\"", "\n", "Kxxy", "=", "torch", ".", "cat", "(", "(", "Kx", ",", "Kxy", ")", ",", "1", ")", "\n", "Kyxy", "=", "torch", ".", "cat", "(", "(", "Kxy", ".", "transpose", "(", "0", ",", "1", ")", ",", "Ky", ")", ",", "1", ")", "\n", "Kxyxy", "=", "torch", ".", "cat", "(", "(", "Kxxy", ",", "Kyxy", ")", ",", "0", ")", "\n", "nx", "=", "Kx", ".", "shape", "[", "0", "]", "\n", "ny", "=", "Ky", ".", "shape", "[", "0", "]", "\n", "is_unbiased", "=", "True", "\n", "if", "is_unbiased", ":", "\n", "        ", "xx", "=", "torch", ".", "div", "(", "(", "torch", ".", "sum", "(", "Kx", ")", "-", "torch", ".", "sum", "(", "torch", ".", "diag", "(", "Kx", ")", ")", ")", ",", "(", "nx", "*", "(", "nx", "-", "1", ")", ")", ")", "\n", "yy", "=", "torch", ".", "div", "(", "(", "torch", ".", "sum", "(", "Ky", ")", "-", "torch", ".", "sum", "(", "torch", ".", "diag", "(", "Ky", ")", ")", ")", ",", "(", "ny", "*", "(", "ny", "-", "1", ")", ")", ")", "\n", "# one-sample U-statistic.", "\n", "if", "use_1sample_U", ":", "\n", "            ", "xy", "=", "torch", ".", "div", "(", "(", "torch", ".", "sum", "(", "Kxy", ")", "-", "torch", ".", "sum", "(", "torch", ".", "diag", "(", "Kxy", ")", ")", ")", ",", "(", "nx", "*", "(", "ny", "-", "1", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "xy", "=", "torch", ".", "div", "(", "torch", ".", "sum", "(", "Kxy", ")", ",", "(", "nx", "*", "ny", ")", ")", "\n", "", "mmd2", "=", "xx", "-", "2", "*", "xy", "+", "yy", "\n", "", "else", ":", "\n", "        ", "xx", "=", "torch", ".", "div", "(", "(", "torch", ".", "sum", "(", "Kx", ")", ")", ",", "(", "nx", "*", "nx", ")", ")", "\n", "yy", "=", "torch", ".", "div", "(", "(", "torch", ".", "sum", "(", "Ky", ")", ")", ",", "(", "ny", "*", "ny", ")", ")", "\n", "# one-sample U-statistic.", "\n", "if", "use_1sample_U", ":", "\n", "            ", "xy", "=", "torch", ".", "div", "(", "(", "torch", ".", "sum", "(", "Kxy", ")", ")", ",", "(", "nx", "*", "ny", ")", ")", "\n", "", "else", ":", "\n", "            ", "xy", "=", "torch", ".", "div", "(", "torch", ".", "sum", "(", "Kxy", ")", ",", "(", "nx", "*", "ny", ")", ")", "\n", "", "mmd2", "=", "xx", "-", "2", "*", "xy", "+", "yy", "\n", "", "if", "not", "is_var_computed", ":", "\n", "        ", "return", "mmd2", ",", "None", ",", "Kxyxy", "\n", "", "hh", "=", "Kx", "+", "Ky", "-", "Kxy", "-", "Kxy", ".", "transpose", "(", "0", ",", "1", ")", "\n", "V1", "=", "torch", ".", "dot", "(", "hh", ".", "sum", "(", "1", ")", "/", "ny", ",", "hh", ".", "sum", "(", "1", ")", "/", "ny", ")", "/", "ny", "\n", "V2", "=", "(", "hh", ")", ".", "sum", "(", ")", "/", "(", "nx", ")", "/", "nx", "\n", "varEst", "=", "4", "*", "(", "V1", "-", "V2", "**", "2", ")", "\n", "if", "varEst", "==", "0.0", ":", "\n", "        ", "print", "(", "'error_var!!'", "+", "str", "(", "V1", ")", ")", "\n", "print", "(", "Kx", ".", "shape", ")", "\n", "", "return", "mmd2", ",", "varEst", ",", "Kxyxy", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.None.utils_HD.MMDu": [[200, 228], ["utils_HD.Pdist2", "utils_HD.Pdist2", "utils_HD.Pdist2", "utils_HD.Pdist2", "utils_HD.Pdist2", "utils_HD.Pdist2", "torch.eye().cuda", "torch.eye().cuda", "utils_HD.h1_mean_var_gram", "torch.exp", "torch.exp", "torch.exp", "torch.eye", "torch.eye", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.h1_mean_var_gram"], ["", "def", "MMDu", "(", "Fea", ",", "len_s", ",", "Fea_org", ",", "sigma", ",", "sigma0", "=", "0.1", ",", "epsilon", "=", "10", "**", "(", "-", "10", ")", ",", "is_smooth", "=", "True", ",", "is_var_computed", "=", "True", ",", "use_1sample_U", "=", "True", ")", ":", "\n", "    ", "\"\"\"compute value of deep-kernel MMD and std of deep-kernel MMD using merged data.\"\"\"", "\n", "X", "=", "Fea", "[", "0", ":", "len_s", ",", ":", "]", "# fetch the sample 1 (features of deep networks)", "\n", "Y", "=", "Fea", "[", "len_s", ":", ",", ":", "]", "# fetch the sample 2 (features of deep networks)", "\n", "X_org", "=", "Fea_org", "[", "0", ":", "len_s", ",", ":", "]", "# fetch the original sample 1", "\n", "Y_org", "=", "Fea_org", "[", "len_s", ":", ",", ":", "]", "# fetch the original sample 2", "\n", "L", "=", "1", "# generalized Gaussian (if L>1)", "\n", "\n", "nx", "=", "X", ".", "shape", "[", "0", "]", "\n", "ny", "=", "Y", ".", "shape", "[", "0", "]", "\n", "Dxx", "=", "Pdist2", "(", "X", ",", "X", ")", "\n", "Dyy", "=", "Pdist2", "(", "Y", ",", "Y", ")", "\n", "Dxy", "=", "Pdist2", "(", "X", ",", "Y", ")", "\n", "Dxx_org", "=", "Pdist2", "(", "X_org", ",", "X_org", ")", "\n", "Dyy_org", "=", "Pdist2", "(", "Y_org", ",", "Y_org", ")", "\n", "Dxy_org", "=", "Pdist2", "(", "X_org", ",", "Y_org", ")", "\n", "K_Ix", "=", "torch", ".", "eye", "(", "nx", ")", ".", "cuda", "(", ")", "\n", "K_Iy", "=", "torch", ".", "eye", "(", "ny", ")", ".", "cuda", "(", ")", "\n", "if", "is_smooth", ":", "\n", "        ", "Kx", "=", "(", "1", "-", "epsilon", ")", "*", "torch", ".", "exp", "(", "-", "(", "Dxx", "/", "sigma0", ")", "**", "L", "-", "Dxx_org", "/", "sigma", ")", "+", "epsilon", "*", "torch", ".", "exp", "(", "-", "Dxx_org", "/", "sigma", ")", "\n", "Ky", "=", "(", "1", "-", "epsilon", ")", "*", "torch", ".", "exp", "(", "-", "(", "Dyy", "/", "sigma0", ")", "**", "L", "-", "Dyy_org", "/", "sigma", ")", "+", "epsilon", "*", "torch", ".", "exp", "(", "-", "Dyy_org", "/", "sigma", ")", "\n", "Kxy", "=", "(", "1", "-", "epsilon", ")", "*", "torch", ".", "exp", "(", "-", "(", "Dxy", "/", "sigma0", ")", "**", "L", "-", "Dxy_org", "/", "sigma", ")", "+", "epsilon", "*", "torch", ".", "exp", "(", "-", "Dxy_org", "/", "sigma", ")", "\n", "", "else", ":", "\n", "        ", "Kx", "=", "torch", ".", "exp", "(", "-", "Dxx", "/", "sigma0", ")", "\n", "Ky", "=", "torch", ".", "exp", "(", "-", "Dyy", "/", "sigma0", ")", "\n", "Kxy", "=", "torch", ".", "exp", "(", "-", "Dxy", "/", "sigma0", ")", "\n", "\n", "", "return", "h1_mean_var_gram", "(", "Kx", ",", "Ky", ",", "Kxy", ",", "is_var_computed", ",", "use_1sample_U", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.None.utils_HD.MMDu_linear_kernel": [[230, 244], ["Fea[].unsqueeze.mm", "Fea[].unsqueeze.mm", "Fea[].unsqueeze.mm", "utils_HD.h1_mean_var_gram", "Fea[].unsqueeze.transpose", "Fea[].unsqueeze.transpose", "Fea[].unsqueeze.transpose", "Fea[].unsqueeze", "Fea[].unsqueeze"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.h1_mean_var_gram"], ["", "def", "MMDu_linear_kernel", "(", "Fea", ",", "len_s", ",", "is_var_computed", "=", "True", ",", "use_1sample_U", "=", "True", ")", ":", "\n", "    ", "\"\"\"compute value of (deep) lineaer-kernel MMD and std of (deep) lineaer-kernel MMD using merged data.\"\"\"", "\n", "try", ":", "\n", "        ", "X", "=", "Fea", "[", "0", ":", "len_s", ",", ":", "]", "\n", "Y", "=", "Fea", "[", "len_s", ":", ",", ":", "]", "\n", "", "except", ":", "\n", "        ", "X", "=", "Fea", "[", "0", ":", "len_s", "]", ".", "unsqueeze", "(", "1", ")", "\n", "Y", "=", "Fea", "[", "len_s", ":", "]", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "", "Kx", "=", "X", ".", "mm", "(", "X", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "Ky", "=", "Y", ".", "mm", "(", "Y", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "Kxy", "=", "X", ".", "mm", "(", "Y", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "\n", "return", "h1_mean_var_gram", "(", "Kx", ",", "Ky", ",", "Kxy", ",", "is_var_computed", ",", "use_1sample_U", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.None.utils_HD.C2ST_NN_fit": [[245, 286], ["torch.randn().to", "torch.randn().to", "torch.optim.Adam", "torch.nn.CrossEntropyLoss", "torch.nn.Softmax", "numpy.random.choice", "torch.utils.data.TensorDataset", "torch.utils.data.DataLoader", "len", "range", "torch.nn.Softmax.", "abs", "ModelLatentF().cuda", "utils_HD.ModelLatentF", "iter", "f.max", "torch.randn", "torch.randn", "numpy.int", "iter.next", "torch.nn.CrossEntropyLoss.", "torch.optim.Adam.zero_grad", "criterion.backward", "torch.optim.Adam.step", "print", "ModelLatentF.mm", "pred[].type().mean", "pred[].type().mean", "utils_HD.ModelLatentF", "list", "numpy.ceil", "ModelLatentF.mm", "torch.nn.CrossEntropyLoss.item", "ModelLatentF.parameters", "ModelLatentF.", "pred[].type", "pred[].type", "ModelLatentF.", "torch.nn.CrossEntropyLoss.", "ModelLatentF.mm", "ModelLatentF."], "function", ["None"], ["", "def", "C2ST_NN_fit", "(", "S", ",", "y", ",", "N1", ",", "x_in", ",", "H", ",", "x_out", ",", "learning_rate_C2ST", ",", "N_epoch", ",", "batch_size", ",", "device", ",", "dtype", ")", ":", "\n", "    ", "\"\"\"Train a deep network for C2STs.\"\"\"", "\n", "N", "=", "S", ".", "shape", "[", "0", "]", "\n", "if", "is_cuda", ":", "\n", "        ", "model_C2ST", "=", "ModelLatentF", "(", "x_in", ",", "H", ",", "x_out", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "model_C2ST", "=", "ModelLatentF", "(", "x_in", ",", "H", ",", "x_out", ")", "\n", "", "w_C2ST", "=", "torch", ".", "randn", "(", "[", "x_out", ",", "2", "]", ")", ".", "to", "(", "device", ",", "dtype", ")", "\n", "b_C2ST", "=", "torch", ".", "randn", "(", "[", "1", ",", "2", "]", ")", ".", "to", "(", "device", ",", "dtype", ")", "\n", "w_C2ST", ".", "requires_grad", "=", "True", "\n", "b_C2ST", ".", "requires_grad", "=", "True", "\n", "optimizer_C2ST", "=", "torch", ".", "optim", ".", "Adam", "(", "list", "(", "model_C2ST", ".", "parameters", "(", ")", ")", "+", "[", "w_C2ST", "]", "+", "[", "b_C2ST", "]", ",", "lr", "=", "learning_rate_C2ST", ")", "\n", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "f", "=", "torch", ".", "nn", ".", "Softmax", "(", ")", "\n", "ind", "=", "np", ".", "random", ".", "choice", "(", "N", ",", "N", ",", "replace", "=", "False", ")", "\n", "tr_ind", "=", "ind", "[", ":", "np", ".", "int", "(", "np", ".", "ceil", "(", "N", "*", "1", ")", ")", "]", "\n", "te_ind", "=", "tr_ind", "\n", "dataset", "=", "torch", ".", "utils", ".", "data", ".", "TensorDataset", "(", "S", "[", "tr_ind", ",", ":", "]", ",", "y", "[", "tr_ind", "]", ")", "\n", "dataloader_C2ST", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "len_dataloader", "=", "len", "(", "dataloader_C2ST", ")", "\n", "for", "epoch", "in", "range", "(", "N_epoch", ")", ":", "\n", "        ", "data_iter", "=", "iter", "(", "dataloader_C2ST", ")", "\n", "tt", "=", "0", "\n", "while", "tt", "<", "len_dataloader", ":", "\n", "# training model using source data", "\n", "            ", "data_source", "=", "data_iter", ".", "next", "(", ")", "\n", "S_b", ",", "y_b", "=", "data_source", "\n", "output_b", "=", "model_C2ST", "(", "S_b", ")", ".", "mm", "(", "w_C2ST", ")", "+", "b_C2ST", "\n", "loss_C2ST", "=", "criterion", "(", "output_b", ",", "y_b", ")", "\n", "optimizer_C2ST", ".", "zero_grad", "(", ")", "\n", "loss_C2ST", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "# Update sigma0 using gradient descent", "\n", "optimizer_C2ST", ".", "step", "(", ")", "\n", "tt", "=", "tt", "+", "1", "\n", "", "if", "epoch", "%", "100", "==", "0", ":", "\n", "            ", "print", "(", "criterion", "(", "model_C2ST", "(", "S", ")", ".", "mm", "(", "w_C2ST", ")", "+", "b_C2ST", ",", "y", ")", ".", "item", "(", ")", ")", "\n", "\n", "", "", "output", "=", "f", "(", "model_C2ST", "(", "S", "[", "te_ind", ",", ":", "]", ")", ".", "mm", "(", "w_C2ST", ")", "+", "b_C2ST", ")", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "STAT_C2ST", "=", "abs", "(", "pred", "[", ":", "N1", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "mean", "(", ")", "-", "pred", "[", "N1", ":", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "mean", "(", ")", ")", "\n", "return", "pred", ",", "STAT_C2ST", ",", "model_C2ST", ",", "w_C2ST", ",", "b_C2ST", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.None.utils_HD.gauss_kernel": [[287, 294], ["utils_HD.Pdist2", "utils_HD.Pdist2", "torch.exp", "torch.exp"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2"], ["", "def", "gauss_kernel", "(", "X", ",", "test_locs", ",", "X_org", ",", "test_locs_org", ",", "sigma", ",", "sigma0", ",", "epsilon", ")", ":", "\n", "    ", "\"\"\"compute a deep kernel matrix between a set of samples between test locations.\"\"\"", "\n", "DXT", "=", "Pdist2", "(", "X", ",", "test_locs", ")", "\n", "DXT_org", "=", "Pdist2", "(", "X_org", ",", "test_locs_org", ")", "\n", "# Kx = torch.exp(-(DXT / sigma0))", "\n", "Kx", "=", "(", "1", "-", "epsilon", ")", "*", "torch", ".", "exp", "(", "-", "(", "DXT", "/", "sigma0", ")", "-", "DXT_org", "/", "sigma", ")", "+", "epsilon", "*", "torch", ".", "exp", "(", "-", "DXT_org", "/", "sigma", ")", "\n", "return", "Kx", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.None.utils_HD.compute_ME_stat": [[295, 313], ["utils_HD.gauss_kernel", "utils_HD.gauss_kernel", "Z.mean", "torch.eye().cuda", "torch.eye", "Z.mean.unsqueeze().mm", "torch.eye", "Z.mean.unsqueeze", "torch.solve", "Z.mean.unsqueeze"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.gauss_kernel", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.gauss_kernel"], ["", "def", "compute_ME_stat", "(", "X", ",", "Y", ",", "T", ",", "X_org", ",", "Y_org", ",", "T_org", ",", "sigma", ",", "sigma0", ",", "epsilon", ")", ":", "\n", "    ", "\"\"\"compute a deep kernel based ME statistic.\"\"\"", "\n", "# if gwidth is None or gwidth <= 0:", "\n", "#     raise ValueError('require gaussian_width > 0. Was %s.' % (str(gwidth)))", "\n", "reg", "=", "0", "#10**(-8)", "\n", "n", "=", "X", ".", "shape", "[", "0", "]", "\n", "J", "=", "T", ".", "shape", "[", "0", "]", "\n", "g", "=", "gauss_kernel", "(", "X", ",", "T", ",", "X_org", ",", "T_org", ",", "sigma", ",", "sigma0", ",", "epsilon", ")", "\n", "h", "=", "gauss_kernel", "(", "Y", ",", "T", ",", "Y_org", ",", "T_org", ",", "sigma", ",", "sigma0", ",", "epsilon", ")", "\n", "Z", "=", "g", "-", "h", "\n", "W", "=", "Z", ".", "mean", "(", "0", ")", "\n", "Sig", "=", "(", "(", "Z", "-", "W", ")", ".", "transpose", "(", "1", ",", "0", ")", ")", ".", "mm", "(", "(", "Z", "-", "W", ")", ")", "\n", "if", "is_cuda", ":", "\n", "        ", "IJ", "=", "torch", ".", "eye", "(", "J", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "IJ", "=", "torch", ".", "eye", "(", "J", ")", "\n", "", "s", "=", "n", "*", "W", ".", "unsqueeze", "(", "0", ")", ".", "mm", "(", "torch", ".", "solve", "(", "W", ".", "unsqueeze", "(", "1", ")", ",", "Sig", "+", "reg", "*", "IJ", ")", "[", "0", "]", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.None.utils_HD.mmd2_permutations": [[314, 344], ["torch.as_tensor", "torch.full", "range", "torch.einsum", "[].view", "[].view", "torch.as_tensor.take().sum", "est.item", "p_val.item", "torch.as_tensor.take", "[].numpy", "is_X.nonzero", "torch.as_tensor.trace", "torch.randperm"], "function", ["None"], ["", "def", "mmd2_permutations", "(", "K", ",", "n_X", ",", "permutations", "=", "200", ")", ":", "\n", "    ", "\"\"\"\n        Fast implementation of permutations using kernel matrix.\n    \"\"\"", "\n", "K", "=", "torch", ".", "as_tensor", "(", "K", ")", "\n", "n", "=", "K", ".", "shape", "[", "0", "]", "\n", "assert", "K", ".", "shape", "[", "0", "]", "==", "K", ".", "shape", "[", "1", "]", "\n", "n_Y", "=", "n_X", "\n", "assert", "n", "==", "n_X", "+", "n_Y", "\n", "w_X", "=", "1", "\n", "w_Y", "=", "-", "1", "\n", "ws", "=", "torch", ".", "full", "(", "(", "permutations", "+", "1", ",", "n", ")", ",", "w_Y", ",", "dtype", "=", "K", ".", "dtype", ",", "device", "=", "K", ".", "device", ")", "\n", "ws", "[", "-", "1", ",", ":", "n_X", "]", "=", "w_X", "\n", "for", "i", "in", "range", "(", "permutations", ")", ":", "\n", "        ", "ws", "[", "i", ",", "torch", ".", "randperm", "(", "n", ")", "[", ":", "n_X", "]", ".", "numpy", "(", ")", "]", "=", "w_X", "\n", "", "biased_ests", "=", "torch", ".", "einsum", "(", "\"pi,ij,pj->p\"", ",", "ws", ",", "K", ",", "ws", ")", "\n", "if", "True", ":", "# u-stat estimator", "\n", "# need to subtract \\sum_i k(X_i, X_i) + k(Y_i, Y_i) + 2 k(X_i, Y_i)", "\n", "# first two are just trace, but last is harder:", "\n", "        ", "is_X", "=", "ws", ">", "0", "\n", "X_inds", "=", "is_X", ".", "nonzero", "(", ")", "[", ":", ",", "1", "]", ".", "view", "(", "permutations", "+", "1", ",", "n_X", ")", "\n", "Y_inds", "=", "(", "~", "is_X", ")", ".", "nonzero", "(", ")", "[", ":", ",", "1", "]", ".", "view", "(", "permutations", "+", "1", ",", "n_Y", ")", "\n", "del", "is_X", ",", "ws", "\n", "cross_terms", "=", "K", ".", "take", "(", "Y_inds", "*", "n", "+", "X_inds", ")", ".", "sum", "(", "1", ")", "\n", "del", "X_inds", ",", "Y_inds", "\n", "ests", "=", "(", "biased_ests", "-", "K", ".", "trace", "(", ")", "+", "2", "*", "cross_terms", ")", "/", "(", "n_X", "*", "(", "n_X", "-", "1", ")", ")", "\n", "", "est", "=", "ests", "[", "-", "1", "]", "\n", "rest", "=", "ests", "[", ":", "-", "1", "]", "\n", "p_val", "=", "(", "rest", ">", "est", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "return", "est", ".", "item", "(", ")", ",", "p_val", ".", "item", "(", ")", ",", "rest", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.None.utils_HD.TST_MMD_adaptive_bandwidth": [[345, 380], ["numpy.zeros", "utils_HD.MMDu", "utils_HD.get_item", "range", "numpy.random.choice", "utils_HD.h1_mean_var_gram", "numpy.sort", "get_item.item", "numpy.ceil", "numpy.ix_", "numpy.ix_", "numpy.ix_", "numpy.int", "numpy.ceil"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.MMDu", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.get_item", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.h1_mean_var_gram"], ["", "def", "TST_MMD_adaptive_bandwidth", "(", "Fea", ",", "N_per", ",", "N1", ",", "Fea_org", ",", "sigma", ",", "sigma0", ",", "alpha", ",", "device", ",", "dtype", ")", ":", "\n", "    ", "\"\"\"run two-sample test (TST) using ordinary Gaussian kernel.\"\"\"", "\n", "mmd_vector", "=", "np", ".", "zeros", "(", "N_per", ")", "\n", "TEMP", "=", "MMDu", "(", "Fea", ",", "N1", ",", "Fea_org", ",", "sigma", ",", "sigma0", ",", "is_smooth", "=", "False", ")", "\n", "mmd_value", "=", "get_item", "(", "TEMP", "[", "0", "]", ",", "is_cuda", ")", "\n", "Kxyxy", "=", "TEMP", "[", "2", "]", "\n", "count", "=", "0", "\n", "nxy", "=", "Fea", ".", "shape", "[", "0", "]", "\n", "nx", "=", "N1", "\n", "for", "r", "in", "range", "(", "N_per", ")", ":", "\n", "# print r", "\n", "        ", "ind", "=", "np", ".", "random", ".", "choice", "(", "nxy", ",", "nxy", ",", "replace", "=", "False", ")", "\n", "# divide into new X, Y", "\n", "indx", "=", "ind", "[", ":", "nx", "]", "\n", "# print(indx)", "\n", "indy", "=", "ind", "[", "nx", ":", "]", "\n", "Kx", "=", "Kxyxy", "[", "np", ".", "ix_", "(", "indx", ",", "indx", ")", "]", "\n", "# print(Kx)", "\n", "Ky", "=", "Kxyxy", "[", "np", ".", "ix_", "(", "indy", ",", "indy", ")", "]", "\n", "Kxy", "=", "Kxyxy", "[", "np", ".", "ix_", "(", "indx", ",", "indy", ")", "]", "\n", "TEMP", "=", "h1_mean_var_gram", "(", "Kx", ",", "Ky", ",", "Kxy", ",", "is_var_computed", "=", "False", ")", "\n", "mmd_vector", "[", "r", "]", "=", "TEMP", "[", "0", "]", "\n", "if", "mmd_vector", "[", "r", "]", ">", "mmd_value", ":", "\n", "            ", "count", "=", "count", "+", "1", "\n", "", "if", "count", ">", "np", ".", "ceil", "(", "N_per", "*", "alpha", ")", ":", "\n", "            ", "h", "=", "0", "\n", "threshold", "=", "\"NaN\"", "\n", "break", "\n", "", "else", ":", "\n", "            ", "h", "=", "1", "\n", "", "", "if", "h", "==", "1", ":", "\n", "        ", "S_mmd_vector", "=", "np", ".", "sort", "(", "mmd_vector", ")", "\n", "#        print(np.int(np.ceil(N_per*alpha)))", "\n", "threshold", "=", "S_mmd_vector", "[", "np", ".", "int", "(", "np", ".", "ceil", "(", "N_per", "*", "(", "1", "-", "alpha", ")", ")", ")", "]", "\n", "", "return", "h", ",", "threshold", ",", "mmd_value", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.None.utils_HD.TST_MMD_u": [[381, 417], ["numpy.zeros", "utils_HD.MMDu", "utils_HD.get_item", "range", "numpy.random.choice", "utils_HD.h1_mean_var_gram", "numpy.sort", "get_item.item", "numpy.ceil", "numpy.ix_", "numpy.ix_", "numpy.ix_", "numpy.int", "numpy.ceil"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.MMDu", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.get_item", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.h1_mean_var_gram"], ["", "def", "TST_MMD_u", "(", "Fea", ",", "N_per", ",", "N1", ",", "Fea_org", ",", "sigma", ",", "sigma0", ",", "ep", ",", "alpha", ",", "device", ",", "dtype", ",", "is_smooth", "=", "True", ")", ":", "\n", "    ", "\"\"\"run two-sample test (TST) using deep kernel kernel.\"\"\"", "\n", "mmd_vector", "=", "np", ".", "zeros", "(", "N_per", ")", "\n", "TEMP", "=", "MMDu", "(", "Fea", ",", "N1", ",", "Fea_org", ",", "sigma", ",", "sigma0", ",", "ep", ",", "is_smooth", ")", "\n", "mmd_value", "=", "get_item", "(", "TEMP", "[", "0", "]", ",", "is_cuda", ")", "\n", "Kxyxy", "=", "TEMP", "[", "2", "]", "\n", "count", "=", "0", "\n", "nxy", "=", "Fea", ".", "shape", "[", "0", "]", "\n", "nx", "=", "N1", "\n", "for", "r", "in", "range", "(", "N_per", ")", ":", "\n", "# print r", "\n", "        ", "ind", "=", "np", ".", "random", ".", "choice", "(", "nxy", ",", "nxy", ",", "replace", "=", "False", ")", "\n", "# divide into new X, Y", "\n", "indx", "=", "ind", "[", ":", "nx", "]", "\n", "# print(indx)", "\n", "indy", "=", "ind", "[", "nx", ":", "]", "\n", "Kx", "=", "Kxyxy", "[", "np", ".", "ix_", "(", "indx", ",", "indx", ")", "]", "\n", "# print(Kx)", "\n", "Ky", "=", "Kxyxy", "[", "np", ".", "ix_", "(", "indy", ",", "indy", ")", "]", "\n", "Kxy", "=", "Kxyxy", "[", "np", ".", "ix_", "(", "indx", ",", "indy", ")", "]", "\n", "\n", "TEMP", "=", "h1_mean_var_gram", "(", "Kx", ",", "Ky", ",", "Kxy", ",", "is_var_computed", "=", "False", ")", "\n", "mmd_vector", "[", "r", "]", "=", "TEMP", "[", "0", "]", "\n", "if", "mmd_vector", "[", "r", "]", ">", "mmd_value", ":", "\n", "            ", "count", "=", "count", "+", "1", "\n", "", "if", "count", ">", "np", ".", "ceil", "(", "N_per", "*", "alpha", ")", ":", "\n", "            ", "h", "=", "0", "\n", "threshold", "=", "\"NaN\"", "\n", "break", "\n", "", "else", ":", "\n", "            ", "h", "=", "1", "\n", "", "", "if", "h", "==", "1", ":", "\n", "        ", "S_mmd_vector", "=", "np", ".", "sort", "(", "mmd_vector", ")", "\n", "#        print(np.int(np.ceil(N_per*alpha)))", "\n", "threshold", "=", "S_mmd_vector", "[", "np", ".", "int", "(", "np", ".", "ceil", "(", "N_per", "*", "(", "1", "-", "alpha", ")", ")", ")", "]", "\n", "", "return", "h", ",", "threshold", ",", "mmd_value", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.None.utils_HD.TST_MMD_u_linear_kernel": [[418, 455], ["numpy.zeros", "utils_HD.MMDu_linear_kernel", "utils_HD.get_item", "range", "numpy.random.choice", "utils_HD.h1_mean_var_gram", "numpy.sort", "get_item.item", "numpy.ceil", "numpy.ix_", "numpy.ix_", "numpy.ix_", "numpy.int", "numpy.ceil"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.MMDu_linear_kernel", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.get_item", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.h1_mean_var_gram"], ["", "def", "TST_MMD_u_linear_kernel", "(", "Fea", ",", "N_per", ",", "N1", ",", "alpha", ",", "device", ",", "dtype", ")", ":", "\n", "    ", "\"\"\"run two-sample test (TST) using (deep) lineaer kernel kernel.\"\"\"", "\n", "mmd_vector", "=", "np", ".", "zeros", "(", "N_per", ")", "\n", "TEMP", "=", "MMDu_linear_kernel", "(", "Fea", ",", "N1", ")", "\n", "mmd_value", "=", "get_item", "(", "TEMP", "[", "0", "]", ",", "is_cuda", ")", "\n", "Kxyxy", "=", "TEMP", "[", "2", "]", "\n", "count", "=", "0", "\n", "nxy", "=", "Fea", ".", "shape", "[", "0", "]", "\n", "nx", "=", "N1", "\n", "\n", "for", "r", "in", "range", "(", "N_per", ")", ":", "\n", "# print r", "\n", "        ", "ind", "=", "np", ".", "random", ".", "choice", "(", "nxy", ",", "nxy", ",", "replace", "=", "False", ")", "\n", "# divide into new X, Y", "\n", "indx", "=", "ind", "[", ":", "nx", "]", "\n", "# print(indx)", "\n", "indy", "=", "ind", "[", "nx", ":", "]", "\n", "Kx", "=", "Kxyxy", "[", "np", ".", "ix_", "(", "indx", ",", "indx", ")", "]", "\n", "# print(Kx)", "\n", "Ky", "=", "Kxyxy", "[", "np", ".", "ix_", "(", "indy", ",", "indy", ")", "]", "\n", "Kxy", "=", "Kxyxy", "[", "np", ".", "ix_", "(", "indx", ",", "indy", ")", "]", "\n", "\n", "TEMP", "=", "h1_mean_var_gram", "(", "Kx", ",", "Ky", ",", "Kxy", ",", "is_var_computed", "=", "False", ")", "\n", "mmd_vector", "[", "r", "]", "=", "TEMP", "[", "0", "]", "\n", "if", "mmd_vector", "[", "r", "]", ">", "mmd_value", ":", "\n", "            ", "count", "=", "count", "+", "1", "\n", "", "if", "count", ">", "np", ".", "ceil", "(", "N_per", "*", "alpha", ")", ":", "\n", "            ", "h", "=", "0", "\n", "threshold", "=", "\"NaN\"", "\n", "break", "\n", "", "else", ":", "\n", "            ", "h", "=", "1", "\n", "", "", "if", "h", "==", "1", ":", "\n", "        ", "S_mmd_vector", "=", "np", ".", "sort", "(", "mmd_vector", ")", "\n", "#        print(np.int(np.ceil(N_per*alpha)))", "\n", "threshold", "=", "S_mmd_vector", "[", "np", ".", "int", "(", "np", ".", "ceil", "(", "N_per", "*", "(", "1", "-", "alpha", ")", ")", ")", "]", "\n", "", "return", "h", ",", "threshold", ",", "mmd_value", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.None.utils_HD.TST_C2ST": [[456, 483], ["numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.nn.Softmax", "torch.nn.Softmax.", "abs", "numpy.zeros", "range", "numpy.sort", "f.max", "numpy.random.choice", "abs", "abs.item", "model_C2ST().mm", "pred_C2ST[].type().mean", "pred_C2ST[].type().mean", "numpy.int", "numpy.int", "pred_C2ST[].type().mean", "pred_C2ST[].type().mean", "numpy.ceil", "numpy.ceil", "model_C2ST", "pred_C2ST[].type", "pred_C2ST[].type", "pred_C2ST[].type", "pred_C2ST[].type"], "function", ["None"], ["", "def", "TST_C2ST", "(", "S", ",", "N1", ",", "N_per", ",", "alpha", ",", "model_C2ST", ",", "w_C2ST", ",", "b_C2ST", ",", "device", ",", "dtype", ")", ":", "\n", "    ", "\"\"\"run C2ST-S on non-image datasets.\"\"\"", "\n", "np", ".", "random", ".", "seed", "(", "seed", "=", "1102", ")", "\n", "torch", ".", "manual_seed", "(", "1102", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "1102", ")", "\n", "N", "=", "S", ".", "shape", "[", "0", "]", "\n", "f", "=", "torch", ".", "nn", ".", "Softmax", "(", ")", "\n", "output", "=", "f", "(", "model_C2ST", "(", "S", ")", ".", "mm", "(", "w_C2ST", ")", "+", "b_C2ST", ")", "\n", "pred_C2ST", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "STAT", "=", "abs", "(", "pred_C2ST", "[", ":", "N1", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "mean", "(", ")", "-", "pred_C2ST", "[", "N1", ":", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "mean", "(", ")", ")", "\n", "STAT_vector", "=", "np", ".", "zeros", "(", "N_per", ")", "\n", "for", "r", "in", "range", "(", "N_per", ")", ":", "\n", "        ", "ind", "=", "np", ".", "random", ".", "choice", "(", "N", ",", "N", ",", "replace", "=", "False", ")", "\n", "# divide into new X, Y", "\n", "ind_X", "=", "ind", "[", ":", "N1", "]", "\n", "ind_Y", "=", "ind", "[", "N1", ":", "]", "\n", "# print(indx)", "\n", "STAT_vector", "[", "r", "]", "=", "abs", "(", "pred_C2ST", "[", "ind_X", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "mean", "(", ")", "-", "pred_C2ST", "[", "ind_Y", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "mean", "(", ")", ")", "\n", "", "S_vector", "=", "np", ".", "sort", "(", "STAT_vector", ")", "\n", "threshold", "=", "S_vector", "[", "np", ".", "int", "(", "np", ".", "ceil", "(", "N_per", "*", "(", "1", "-", "alpha", ")", ")", ")", "]", "\n", "threshold_lower", "=", "S_vector", "[", "np", ".", "int", "(", "np", ".", "ceil", "(", "N_per", "*", "alpha", ")", ")", "]", "\n", "h", "=", "0", "\n", "if", "STAT", ".", "item", "(", ")", ">", "threshold", ":", "\n", "        ", "h", "=", "1", "\n", "# if STAT.item() < threshold_lower:", "\n", "#     h = 1", "\n", "", "return", "h", ",", "threshold", ",", "STAT", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.None.utils_HD.TST_LCE": [[484, 509], ["numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.nn.Softmax", "torch.nn.Softmax.", "abs", "numpy.zeros", "range", "numpy.sort", "numpy.random.choice", "abs", "abs.item", "model_C2ST().mm", "output[].type().mean", "output[].type().mean", "numpy.int", "numpy.int", "output[].type().mean", "output[].type().mean", "numpy.ceil", "numpy.ceil", "model_C2ST", "output[].type", "output[].type", "output[].type", "output[].type"], "function", ["None"], ["", "def", "TST_LCE", "(", "S", ",", "N1", ",", "N_per", ",", "alpha", ",", "model_C2ST", ",", "w_C2ST", ",", "b_C2ST", ",", "device", ",", "dtype", ")", ":", "\n", "    ", "\"\"\"run C2ST-L on non-image datasets.\"\"\"", "\n", "np", ".", "random", ".", "seed", "(", "seed", "=", "1102", ")", "\n", "torch", ".", "manual_seed", "(", "1102", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "1102", ")", "\n", "N", "=", "S", ".", "shape", "[", "0", "]", "\n", "f", "=", "torch", ".", "nn", ".", "Softmax", "(", ")", "\n", "output", "=", "f", "(", "model_C2ST", "(", "S", ")", ".", "mm", "(", "w_C2ST", ")", "+", "b_C2ST", ")", "\n", "# pred_C2ST = output.max(1, keepdim=True)[1]", "\n", "STAT", "=", "abs", "(", "output", "[", ":", "N1", ",", "0", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "mean", "(", ")", "-", "output", "[", "N1", ":", ",", "0", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "mean", "(", ")", ")", "\n", "STAT_vector", "=", "np", ".", "zeros", "(", "N_per", ")", "\n", "for", "r", "in", "range", "(", "N_per", ")", ":", "\n", "        ", "ind", "=", "np", ".", "random", ".", "choice", "(", "N", ",", "N", ",", "replace", "=", "False", ")", "\n", "# divide into new X, Y", "\n", "ind_X", "=", "ind", "[", ":", "N1", "]", "\n", "ind_Y", "=", "ind", "[", "N1", ":", "]", "\n", "# print(indx)", "\n", "STAT_vector", "[", "r", "]", "=", "abs", "(", "output", "[", "ind_X", ",", "0", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "mean", "(", ")", "-", "output", "[", "ind_Y", ",", "0", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "mean", "(", ")", ")", "\n", "", "S_vector", "=", "np", ".", "sort", "(", "STAT_vector", ")", "\n", "threshold", "=", "S_vector", "[", "np", ".", "int", "(", "np", ".", "ceil", "(", "N_per", "*", "(", "1", "-", "alpha", ")", ")", ")", "]", "\n", "threshold_lower", "=", "S_vector", "[", "np", ".", "int", "(", "np", ".", "ceil", "(", "N_per", "*", "alpha", ")", ")", "]", "\n", "h", "=", "0", "\n", "if", "STAT", ".", "item", "(", ")", ">", "threshold", ":", "\n", "        ", "h", "=", "1", "\n", "", "return", "h", ",", "threshold", ",", "STAT", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.None.utils_HD.TST_ME": [[510, 532], ["utils_HD.get_item", "freqopttest.TSTData", "freqopttest.MeanEmbeddingTest.optimize_locs_width", "freqopttest.MeanEmbeddingTest", "tst.MeanEmbeddingTest.perform_test"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.get_item"], ["", "def", "TST_ME", "(", "Fea", ",", "N1", ",", "alpha", ",", "is_train", ",", "test_locs", ",", "gwidth", ",", "J", "=", "1", ",", "seed", "=", "15", ")", ":", "\n", "    ", "\"\"\"run ME test.\"\"\"", "\n", "Fea", "=", "get_item", "(", "Fea", ",", "is_cuda", ")", "\n", "tst_data", "=", "data", ".", "TSTData", "(", "Fea", "[", "0", ":", "N1", ",", ":", "]", ",", "Fea", "[", "N1", ":", ",", ":", "]", ")", "\n", "h", "=", "0", "\n", "if", "is_train", ":", "\n", "        ", "op", "=", "{", "\n", "'n_test_locs'", ":", "J", ",", "# number of test locations to optimize", "\n", "'max_iter'", ":", "300", ",", "# maximum number of gradient ascent iterations", "\n", "'locs_step_size'", ":", "1.0", ",", "# step size for the test locations (features)", "\n", "'gwidth_step_size'", ":", "0.1", ",", "# step size for the Gaussian width", "\n", "'tol_fun'", ":", "1e-4", ",", "# stop if the objective does not increase more than this.", "\n", "'seed'", ":", "seed", "+", "5", ",", "# random seed", "\n", "}", "\n", "test_locs", ",", "gwidth", ",", "info", "=", "tst", ".", "MeanEmbeddingTest", ".", "optimize_locs_width", "(", "tst_data", ",", "alpha", ",", "**", "op", ")", "\n", "return", "test_locs", ",", "gwidth", "\n", "", "else", ":", "\n", "        ", "met_opt", "=", "tst", ".", "MeanEmbeddingTest", "(", "test_locs", ",", "gwidth", ",", "alpha", ")", "\n", "test_result", "=", "met_opt", ".", "perform_test", "(", "tst_data", ")", "\n", "if", "test_result", "[", "'h0_rejected'", "]", ":", "\n", "            ", "h", "=", "1", "\n", "", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.None.utils_HD.TST_SCF": [[533, 550], ["utils_HD.get_item", "freqopttest.TSTData", "freqopttest.SmoothCFTest.optimize_freqs_width", "freqopttest.SmoothCFTest", "tst.SmoothCFTest.perform_test"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.get_item"], ["", "", "def", "TST_SCF", "(", "Fea", ",", "N1", ",", "alpha", ",", "is_train", ",", "test_freqs", ",", "gwidth", ",", "J", "=", "1", ",", "seed", "=", "15", ")", ":", "\n", "    ", "\"\"\"run SCF test.\"\"\"", "\n", "Fea", "=", "get_item", "(", "Fea", ",", "is_cuda", ")", "\n", "tst_data", "=", "data", ".", "TSTData", "(", "Fea", "[", "0", ":", "N1", ",", ":", "]", ",", "Fea", "[", "N1", ":", ",", ":", "]", ")", "\n", "h", "=", "0", "\n", "if", "is_train", ":", "\n", "        ", "op", "=", "{", "'n_test_freqs'", ":", "J", ",", "'seed'", ":", "seed", ",", "'max_iter'", ":", "300", ",", "\n", "'batch_proportion'", ":", "1.0", ",", "'freqs_step_size'", ":", "0.1", ",", "\n", "'gwidth_step_size'", ":", "0.01", ",", "'tol_fun'", ":", "1e-4", "}", "\n", "test_freqs", ",", "gwidth", ",", "info", "=", "tst", ".", "SmoothCFTest", ".", "optimize_freqs_width", "(", "tst_data", ",", "alpha", ",", "**", "op", ")", "\n", "return", "test_freqs", ",", "gwidth", "\n", "", "else", ":", "\n", "        ", "scf_opt", "=", "tst", ".", "SmoothCFTest", "(", "test_freqs", ",", "gwidth", ",", "alpha", "=", "alpha", ")", "\n", "test_result", "=", "scf_opt", ".", "perform_test", "(", "tst_data", ")", "\n", "if", "test_result", "[", "'h0_rejected'", "]", ":", "\n", "            ", "h", "=", "1", "\n", "", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.None.utils_HD.TST_C2ST_D": [[551, 575], ["numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.nn.Softmax", "discriminator", "abs", "numpy.zeros", "range", "numpy.sort", "discriminator.max", "numpy.random.choice", "abs", "abs.item", "pred_C2ST[].type().mean", "pred_C2ST[].type().mean", "numpy.int", "numpy.int", "pred_C2ST[].type().mean", "pred_C2ST[].type().mean", "numpy.ceil", "numpy.ceil", "pred_C2ST[].type", "pred_C2ST[].type", "pred_C2ST[].type", "pred_C2ST[].type"], "function", ["None"], ["", "", "def", "TST_C2ST_D", "(", "S", ",", "N1", ",", "N_per", ",", "alpha", ",", "discriminator", ",", "device", ",", "dtype", ")", ":", "\n", "    ", "\"\"\"run C2ST-S on MNIST and CIFAR datasets.\"\"\"", "\n", "np", ".", "random", ".", "seed", "(", "seed", "=", "1102", ")", "\n", "torch", ".", "manual_seed", "(", "1102", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "1102", ")", "\n", "N", "=", "S", ".", "shape", "[", "0", "]", "\n", "f", "=", "torch", ".", "nn", ".", "Softmax", "(", ")", "\n", "output", "=", "discriminator", "(", "S", ")", "\n", "pred_C2ST", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "STAT", "=", "abs", "(", "pred_C2ST", "[", ":", "N1", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "mean", "(", ")", "-", "pred_C2ST", "[", "N1", ":", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "mean", "(", ")", ")", "\n", "STAT_vector", "=", "np", ".", "zeros", "(", "N_per", ")", "\n", "for", "r", "in", "range", "(", "N_per", ")", ":", "\n", "        ", "ind", "=", "np", ".", "random", ".", "choice", "(", "N", ",", "N", ",", "replace", "=", "False", ")", "\n", "# divide into new X, Y", "\n", "ind_X", "=", "ind", "[", ":", "N1", "]", "\n", "ind_Y", "=", "ind", "[", "N1", ":", "]", "\n", "STAT_vector", "[", "r", "]", "=", "abs", "(", "pred_C2ST", "[", "ind_X", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "mean", "(", ")", "-", "pred_C2ST", "[", "ind_Y", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "mean", "(", ")", ")", "\n", "", "S_vector", "=", "np", ".", "sort", "(", "STAT_vector", ")", "\n", "threshold", "=", "S_vector", "[", "np", ".", "int", "(", "np", ".", "ceil", "(", "N_per", "*", "(", "1", "-", "alpha", ")", ")", ")", "]", "\n", "threshold_lower", "=", "S_vector", "[", "np", ".", "int", "(", "np", ".", "ceil", "(", "N_per", "*", "alpha", ")", ")", "]", "\n", "h", "=", "0", "\n", "if", "STAT", ".", "item", "(", ")", ">", "threshold", ":", "\n", "        ", "h", "=", "1", "\n", "", "return", "h", ",", "threshold", ",", "STAT", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.None.utils_HD.TST_LCE_D": [[576, 599], ["numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.nn.Softmax", "discriminator", "abs", "numpy.zeros", "range", "numpy.sort", "numpy.random.choice", "abs", "abs.item", "output[].type().mean", "output[].type().mean", "numpy.int", "output[].type().mean", "output[].type().mean", "numpy.ceil", "output[].type", "output[].type", "output[].type", "output[].type"], "function", ["None"], ["", "def", "TST_LCE_D", "(", "S", ",", "N1", ",", "N_per", ",", "alpha", ",", "discriminator", ",", "device", ",", "dtype", ")", ":", "\n", "    ", "\"\"\"run C2ST-L on MNIST and CIFAR datasets.\"\"\"", "\n", "np", ".", "random", ".", "seed", "(", "seed", "=", "1102", ")", "\n", "torch", ".", "manual_seed", "(", "1102", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "1102", ")", "\n", "N", "=", "S", ".", "shape", "[", "0", "]", "\n", "f", "=", "torch", ".", "nn", ".", "Softmax", "(", ")", "\n", "output", "=", "discriminator", "(", "S", ")", "\n", "STAT", "=", "abs", "(", "output", "[", ":", "N1", ",", "0", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "mean", "(", ")", "-", "output", "[", "N1", ":", ",", "0", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "mean", "(", ")", ")", "\n", "STAT_vector", "=", "np", ".", "zeros", "(", "N_per", ")", "\n", "for", "r", "in", "range", "(", "N_per", ")", ":", "\n", "        ", "ind", "=", "np", ".", "random", ".", "choice", "(", "N", ",", "N", ",", "replace", "=", "False", ")", "\n", "# divide into new X, Y", "\n", "ind_X", "=", "ind", "[", ":", "N1", "]", "\n", "ind_Y", "=", "ind", "[", "N1", ":", "]", "\n", "# print(indx)", "\n", "STAT_vector", "[", "r", "]", "=", "abs", "(", "output", "[", "ind_X", ",", "0", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "mean", "(", ")", "-", "output", "[", "ind_Y", ",", "0", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "mean", "(", ")", ")", "\n", "", "S_vector", "=", "np", ".", "sort", "(", "STAT_vector", ")", "\n", "threshold", "=", "S_vector", "[", "np", ".", "int", "(", "np", ".", "ceil", "(", "N_per", "*", "(", "1", "-", "alpha", ")", ")", ")", "]", "\n", "h", "=", "0", "\n", "if", "STAT", ".", "item", "(", ")", ">", "threshold", ":", "\n", "        ", "h", "=", "1", "\n", "", "return", "h", ",", "threshold", ",", "STAT", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.None.utils_HD.TST_ME_DK": [[600, 612], ["utils_HD.compute_ME_stat", "scipy.chi2.sf", "compute_ME_stat.item", "pdb.set_trace"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.compute_ME_stat"], ["", "def", "TST_ME_DK", "(", "X", ",", "Y", ",", "T", ",", "X_org", ",", "Y_org", ",", "T_org", ",", "alpha", ",", "sigma", ",", "sigma0", ",", "epsilon", ",", "flag_debug", "=", "False", ")", ":", "\n", "    ", "\"\"\"run deep-kernel ME test (using chi^2 to confirm the threshold) on CIFAR datasets (this code does not work).\"\"\"", "\n", "J", "=", "T", ".", "shape", "[", "0", "]", "\n", "s", "=", "compute_ME_stat", "(", "X", ",", "Y", ",", "T", ",", "X_org", ",", "Y_org", ",", "T_org", ",", "sigma", ",", "sigma0", ",", "epsilon", ")", "\n", "pvalue", "=", "stats", ".", "chi2", ".", "sf", "(", "s", ".", "item", "(", ")", ",", "J", ")", "\n", "if", "pvalue", "<", "alpha", ":", "\n", "        ", "h", "=", "1", "\n", "", "else", ":", "\n", "        ", "h", "=", "0", "\n", "", "if", "flag_debug", ":", "\n", "        ", "pdb", ".", "set_trace", "(", ")", "\n", "", "return", "h", ",", "pvalue", ",", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.None.utils_HD.TST_ME_DK_per": [[613, 636], ["utils_HD.compute_ME_stat", "torch.cat().cuda", "torch.cat().cuda", "numpy.zeros", "range", "numpy.sort", "numpy.random.choice", "utils_HD.compute_ME_stat", "compute_ME_stat.item", "torch.cat", "torch.cat", "numpy.int", "numpy.ceil", "X.cpu", "Y.cpu", "X_org.cpu", "Y_org.cpu"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.compute_ME_stat", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.compute_ME_stat"], ["", "def", "TST_ME_DK_per", "(", "X", ",", "Y", ",", "T", ",", "X_org", ",", "Y_org", ",", "T_org", ",", "alpha", ",", "sigma", ",", "sigma0", ",", "epsilon", ")", ":", "\n", "    ", "\"\"\"run deep-kernel ME test (using permutations to confirm the threshold) on CIFAR datasets.\"\"\"", "\n", "N_per", "=", "100", "\n", "J", "=", "T", ".", "shape", "[", "0", "]", "\n", "s", "=", "compute_ME_stat", "(", "X", ",", "Y", ",", "T", ",", "X_org", ",", "Y_org", ",", "T_org", ",", "sigma", ",", "sigma0", ",", "epsilon", ")", "\n", "Fea", "=", "torch", ".", "cat", "(", "[", "X", ".", "cpu", "(", ")", ",", "Y", ".", "cpu", "(", ")", "]", ",", "0", ")", ".", "cuda", "(", ")", "\n", "Fea_org", "=", "torch", ".", "cat", "(", "[", "X_org", ".", "cpu", "(", ")", ",", "Y_org", ".", "cpu", "(", ")", "]", ",", "0", ")", ".", "cuda", "(", ")", "\n", "N1", "=", "X", ".", "shape", "[", "0", "]", "\n", "N", "=", "Fea", ".", "shape", "[", "0", "]", "\n", "STAT_vector", "=", "np", ".", "zeros", "(", "N_per", ")", "\n", "for", "r", "in", "range", "(", "N_per", ")", ":", "\n", "        ", "ind", "=", "np", ".", "random", ".", "choice", "(", "N", ",", "N", ",", "replace", "=", "False", ")", "\n", "# divide into new X, Y", "\n", "ind_X", "=", "ind", "[", ":", "N1", "]", "\n", "ind_Y", "=", "ind", "[", "N1", ":", "]", "\n", "# print(indx)", "\n", "STAT_vector", "[", "r", "]", "=", "compute_ME_stat", "(", "Fea", "[", "ind_X", ",", ":", "]", ",", "Fea", "[", "ind_Y", ",", ":", "]", ",", "T", ",", "Fea_org", "[", "ind_X", ",", ":", "]", ",", "Fea_org", "[", "ind_Y", ",", ":", "]", ",", "T_org", ",", "sigma", ",", "sigma0", ",", "epsilon", ")", "\n", "", "S_vector", "=", "np", ".", "sort", "(", "STAT_vector", ")", "\n", "threshold", "=", "S_vector", "[", "np", ".", "int", "(", "np", ".", "ceil", "(", "N_per", "*", "(", "1", "-", "alpha", ")", ")", ")", "]", "\n", "h", "=", "0", "\n", "if", "s", ".", "item", "(", ")", ">", "threshold", ":", "\n", "        ", "h", "=", "1", "\n", "", "return", "h", ",", "threshold", ",", "s", "\n", "", ""]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.attack_generator.cwloss": [[7, 18], ["torch.zeros", "torch.zeros", "target_onehot.cuda.cuda", "target_onehot.cuda.scatter_", "torch.autograd.Variable", "torch.sum", "torch.sum", "target.unsqueeze", "torch.clamp", "torch.clamp", "target.size"], "function", ["None"], ["def", "cwloss", "(", "output", ",", "target", ",", "confidence", "=", "50", ",", "num_classes", "=", "10", ")", ":", "\n", "    ", "target", "=", "target", ".", "data", "\n", "target_onehot", "=", "torch", ".", "zeros", "(", "target", ".", "size", "(", ")", "+", "(", "num_classes", ",", ")", ")", "\n", "target_onehot", "=", "target_onehot", ".", "cuda", "(", ")", "\n", "target_onehot", ".", "scatter_", "(", "1", ",", "target", ".", "unsqueeze", "(", "1", ")", ",", "1.", ")", "\n", "target_var", "=", "Variable", "(", "target_onehot", ",", "requires_grad", "=", "False", ")", "\n", "real", "=", "(", "target_var", "*", "output", ")", ".", "sum", "(", "1", ")", "\n", "other", "=", "(", "(", "1.", "-", "target_var", ")", "*", "output", "-", "target_var", "*", "10000.", ")", ".", "max", "(", "1", ")", "[", "0", "]", "\n", "loss", "=", "-", "torch", ".", "clamp", "(", "real", "-", "other", "+", "confidence", ",", "min", "=", "0.", ")", "# equiv to max(..., 0.)", "\n", "loss", "=", "torch", ".", "sum", "(", "loss", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.attack_generator.pgd": [[19, 44], ["model.eval", "range", "torch.clamp", "torch.clamp", "torch.clamp.requires_grad_", "model", "model.zero_grad", "cwloss.backward", "torch.min", "torch.min", "torch.clamp", "torch.clamp", "data.detach", "data.detach", "torch.enable_grad", "torch.enable_grad", "torch.clamp.grad.sign", "torch.clamp.detach", "torch.max", "torch.max", "data.detach", "data.detach", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "attack_generator.cwloss", "torch.randn().cuda().detach", "torch.randn().cuda().detach", "torch.CrossEntropyLoss", "torch.from_numpy().float", "torch.from_numpy().float", "torch.randn().cuda", "torch.randn().cuda", "torch.from_numpy", "torch.from_numpy", "torch.randn", "torch.randn", "numpy.random.uniform"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.adaptive_examples_generator.cwloss"], ["", "def", "pgd", "(", "model", ",", "data", ",", "target", ",", "epsilon", ",", "step_size", ",", "num_steps", ",", "loss_fn", ",", "category", ",", "rand_init", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "if", "category", "==", "\"trades\"", ":", "\n", "        ", "x_adv", "=", "data", ".", "detach", "(", ")", "+", "0.001", "*", "torch", ".", "randn", "(", "data", ".", "shape", ")", ".", "cuda", "(", ")", ".", "detach", "(", ")", "if", "rand_init", "else", "data", ".", "detach", "(", ")", "\n", "\n", "", "if", "category", "==", "\"Madry\"", ":", "\n", "        ", "x_adv", "=", "data", ".", "detach", "(", ")", "+", "torch", ".", "from_numpy", "(", "np", ".", "random", ".", "uniform", "(", "-", "epsilon", ",", "epsilon", ",", "data", ".", "shape", ")", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "if", "rand_init", "else", "data", ".", "detach", "(", ")", "\n", "x_adv", "=", "torch", ".", "clamp", "(", "x_adv", ",", "0.0", ",", "1.0", ")", "\n", "", "for", "k", "in", "range", "(", "num_steps", ")", ":", "\n", "        ", "x_adv", ".", "requires_grad_", "(", ")", "\n", "output", "=", "model", "(", "x_adv", ")", "\n", "\n", "model", ".", "zero_grad", "(", ")", "\n", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "            ", "if", "loss_fn", "==", "\"cent\"", ":", "\n", "                ", "loss_adv", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "output", ",", "target", ")", "\n", "\n", "", "if", "loss_fn", "==", "\"cw\"", ":", "\n", "                ", "loss_adv", "=", "cwloss", "(", "output", ",", "target", ")", "\n", "", "", "loss_adv", ".", "backward", "(", ")", "\n", "eta", "=", "step_size", "*", "x_adv", ".", "grad", ".", "sign", "(", ")", "\n", "x_adv", "=", "x_adv", ".", "detach", "(", ")", "+", "eta", "\n", "x_adv", "=", "torch", ".", "min", "(", "torch", ".", "max", "(", "x_adv", ",", "data", "-", "epsilon", ")", ",", "data", "+", "epsilon", ")", "\n", "x_adv", "=", "torch", ".", "clamp", "(", "x_adv", ",", "0.0", ",", "1.0", ")", "\n", "", "return", "x_adv", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.attack_generator.adv_generate": [[45, 58], ["model.eval", "torch.enable_grad", "torch.enable_grad", "attack_generator.pgd", "data.cuda", "target.cuda", "pgd.clone().cpu", "torch.cat", "torch.cat", "pgd.clone", "pgd.clone().cpu", "pgd.clone"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.attack_generator.pgd"], ["", "def", "adv_generate", "(", "model", ",", "test_loader", ",", "perturb_steps", ",", "epsilon", ",", "step_size", ",", "loss_fn", ",", "category", ",", "rand_init", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "bool_i", "=", "0", "\n", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "x_adv", "=", "pgd", "(", "model", ",", "data", ",", "target", ",", "epsilon", ",", "step_size", ",", "perturb_steps", ",", "loss_fn", ",", "category", ",", "rand_init", "=", "rand_init", ")", "\n", "if", "bool_i", "==", "0", ":", "\n", "                ", "X_adv", "=", "x_adv", ".", "clone", "(", ")", ".", "cpu", "(", ")", "\n", "", "else", ":", "\n", "                ", "X_adv", "=", "torch", ".", "cat", "(", "(", "X_adv", ",", "x_adv", ".", "clone", "(", ")", ".", "cpu", "(", ")", ")", ",", "0", ")", "\n", "", "bool_i", "+=", "1", "\n", "", "", "return", "X_adv", "\n", "", ""]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.train_model.ResidualBlock.__init__": [[12, 26], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.Wide_ResNet_Madry.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inchannel", ",", "outchannel", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "ResidualBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "left", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inchannel", ",", "outchannel", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "outchannel", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "outchannel", ",", "outchannel", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "outchannel", ")", "\n", ")", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "inchannel", "!=", "outchannel", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inchannel", ",", "outchannel", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "outchannel", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.train_model.ResidualBlock.forward": [[28, 33], ["train_model.ResidualBlock.left", "train_model.ResidualBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "left", "(", "x", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.train_model.ResNet.__init__": [[35, 48], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "train_model.ResNet.make_layer", "train_model.ResNet.make_layer", "train_model.ResNet.make_layer", "train_model.ResNet.make_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.Wide_ResNet_Madry.__init__", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.train_model.ResNet.make_layer", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.train_model.ResNet.make_layer", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.train_model.ResNet.make_layer", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.train_model.ResNet.make_layer"], ["    ", "def", "__init__", "(", "self", ",", "ResidualBlock", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inchannel", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "self", ".", "layer1", "=", "self", ".", "make_layer", "(", "ResidualBlock", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "make_layer", "(", "ResidualBlock", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "make_layer", "(", "ResidualBlock", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "make_layer", "(", "ResidualBlock", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", "#512", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.train_model.ResNet.make_layer": [[49, 56], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "make_layer", "(", "self", ",", "block", ",", "channels", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "#strides=[1,1]", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inchannel", ",", "channels", ",", "stride", ")", ")", "\n", "self", ".", "inchannel", "=", "channels", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.train_model.ResNet.forward": [[57, 67], ["train_model.ResNet.conv1", "train_model.ResNet.layer1", "train_model.ResNet.layer2", "train_model.ResNet.layer3", "train_model.ResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "train_model.ResNet.view", "train_model.ResNet.fc", "train_model.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.train_model.ResNet18": [[68, 70], ["train_model.ResNet"], "function", ["None"], ["", "", "def", "ResNet18", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "ResidualBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.train_model.ResNet34": [[71, 73], ["train_model.ResNet"], "function", ["None"], ["", "def", "ResNet34", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "ResidualBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.ModelLatentF.__init__": [[14, 27], ["super().__init__", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Softplus", "torch.nn.Linear", "torch.nn.Softplus", "torch.nn.Linear", "torch.nn.Softplus", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.Wide_ResNet_Madry.__init__"], ["def", "__init__", "(", "self", ",", "x_in", ",", "H", ",", "x_out", ")", ":", "\n", "        ", "\"\"\"Init latent features.\"\"\"", "\n", "super", "(", "ModelLatentF", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "restored", "=", "False", "\n", "\n", "self", ".", "latent", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Linear", "(", "x_in", ",", "H", ",", "bias", "=", "True", ")", ",", "\n", "torch", ".", "nn", ".", "Softplus", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "H", ",", "H", ",", "bias", "=", "True", ")", ",", "\n", "torch", ".", "nn", ".", "Softplus", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "H", ",", "H", ",", "bias", "=", "True", ")", ",", "\n", "torch", ".", "nn", ".", "Softplus", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "H", ",", "x_out", ",", "bias", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.ModelLatentF.forward": [[28, 32], ["N_utils_HD.ModelLatentF.latent"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"Forward the LeNet.\"\"\"", "\n", "fealant", "=", "self", ".", "latent", "(", "input", ")", "\n", "return", "fealant", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.get_item": [[33, 40], ["x.detach().numpy.cpu().detach().numpy", "x.detach().numpy.detach().numpy", "x.detach().numpy.cpu().detach", "x.detach().numpy.detach", "x.detach().numpy.cpu"], "function", ["None"], ["", "", "def", "get_item", "(", "x", ",", "is_cuda", ")", ":", "\n", "    ", "\"\"\"get the numpy value from a torch tensor.\"\"\"", "\n", "if", "is_cuda", ":", "\n", "        ", "x", "=", "x", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "        ", "x", "=", "x", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.MatConvert": [[41, 45], ["torch.from_numpy().to", "torch.from_numpy"], "function", ["None"], ["", "def", "MatConvert", "(", "x", ",", "device", ",", "dtype", ")", ":", "\n", "    ", "\"\"\"convert the numpy to a torch tensor.\"\"\"", "\n", "x", "=", "torch", ".", "from_numpy", "(", "x", ")", ".", "to", "(", "device", ",", "dtype", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2": [[46, 57], ["x_norm.view", "torch.mm", "torch.transpose"], "function", ["None"], ["", "def", "Pdist2", "(", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\"compute the paired distance between x and y.\"\"\"", "\n", "x_norm", "=", "(", "x", "**", "2", ")", ".", "sum", "(", "1", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "if", "y", "is", "not", "None", ":", "\n", "        ", "y_norm", "=", "(", "y", "**", "2", ")", ".", "sum", "(", "1", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "y", "=", "x", "\n", "y_norm", "=", "x_norm", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "", "Pdist", "=", "x_norm", "+", "y_norm", "-", "2.0", "*", "torch", ".", "mm", "(", "x", ",", "torch", ".", "transpose", "(", "y", ",", "0", ",", "1", ")", ")", "\n", "Pdist", "[", "Pdist", "<", "0", "]", "=", "0", "\n", "return", "Pdist", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Wild_bootsrap_process": [[59, 70], ["numpy.exp", "numpy.array", "scipy.signal.lfilter", "numpy.exp", "numpy.sqrt", "numpy.random.randn", "numpy.array"], "function", ["None"], ["", "def", "Wild_bootsrap_process", "(", "data_length", ",", "Num_trails", ")", ":", "\n", "#ln = 20.0", "\n", "#ln = 0.2 \u539f\u53c2\u65700.2", "\n", "    ", "ln", "=", "0.2", "\n", "ar", "=", "np", ".", "exp", "(", "-", "1", "/", "ln", ")", "\n", "variance", "=", "1", "-", "np", ".", "exp", "(", "-", "2", "/", "ln", ")", "\n", "\n", "w", "=", "np", ".", "sqrt", "(", "variance", ")", "*", "np", ".", "random", ".", "randn", "(", "data_length", ",", "Num_trails", ")", "\n", "a", "=", "np", ".", "array", "(", "[", "1", ",", "-", "1", "*", "ar", "]", ")", "\n", "process", "=", "signal", ".", "lfilter", "(", "np", ".", "array", "(", "[", "1", "]", ")", ",", "a", ",", "w", ")", "\n", "return", "process", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.bootsrap_null": [[71, 95], ["N_utils_HD.MatConvert", "testStatMat.mean", "torch.zeros().to", "range", "N_utils_HD.Wild_bootsrap_process", "process[].mean", "numpy.sort", "testStatMat.mean.item", "torch.zeros", "numpy.ceil", "torch.zeros().to.cpu().detach().numpy", "numpy.int", "torch.zeros().to.cpu().detach", "numpy.ceil", "torch.zeros().to.cpu"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.MatConvert", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Wild_bootsrap_process"], ["", "def", "bootsrap_null", "(", "data_length", ",", "Num_trails", ",", "Kx", ",", "Ky", ",", "Kxy", ",", "alpha", ",", "device", ",", "dtype", ")", ":", "\n", "\n", "    ", "process", "=", "MatConvert", "(", "Wild_bootsrap_process", "(", "data_length", ",", "Num_trails", ")", ",", "device", ",", "dtype", ")", "\n", "testStatMat", "=", "Kx", "+", "Ky", "-", "2", "*", "Kxy", "\n", "testStat", "=", "testStatMat", ".", "mean", "(", ")", "\n", "testStat_tem", "=", "torch", ".", "zeros", "(", "Num_trails", ")", ".", "to", "(", "device", ",", "dtype", ")", "\n", "count", "=", "0", "\n", "for", "kk", "in", "range", "(", "Num_trails", ")", ":", "\n", "        ", "mn", "=", "process", "[", ":", ",", "kk", "]", ".", "mean", "(", ")", "\n", "matWB", "=", "(", "process", "[", ":", ",", "kk", "]", "-", "mn", ")", ".", "unsqueeze", "(", "1", ")", ".", "matmul", "(", "(", "process", "[", ":", ",", "kk", "]", "-", "mn", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "testStat_tem", "[", "kk", "]", "=", "(", "testStatMat", "*", "matWB", ")", ".", "mean", "(", ")", "\n", "if", "testStat_tem", "[", "kk", "]", ">", "testStat", ":", "\n", "            ", "count", "=", "count", "+", "1", "\n", "", "if", "count", ">", "np", ".", "ceil", "(", "Num_trails", "*", "alpha", ")", ":", "\n", "            ", "h", "=", "0", "\n", "threshold", "=", "\"NaN\"", "\n", "break", "\n", "", "else", ":", "\n", "            ", "h", "=", "1", "\n", "", "", "if", "h", "==", "1", ":", "\n", "        ", "S_mmd_vector", "=", "np", ".", "sort", "(", "testStat_tem", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "#        print(np.int(np.ceil(N_per*alpha)))", "\n", "threshold", "=", "S_mmd_vector", "[", "np", ".", "int", "(", "np", ".", "ceil", "(", "Num_trails", "*", "(", "1", "-", "alpha", ")", ")", ")", "]", "\n", "", "return", "h", ",", "threshold", ",", "testStat", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.TST_MMD_adaptive_WB": [[99, 114], ["N_utils_HD.Pdist2", "N_utils_HD.Pdist2", "N_utils_HD.Pdist2", "torch.exp", "torch.exp", "torch.exp", "N_utils_HD.bootsrap_null"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.bootsrap_null"], ["", "def", "TST_MMD_adaptive_WB", "(", "Fea", ",", "N_per", ",", "N_te", ",", "sigma", ",", "sigma0", ",", "alpha", ",", "device", ",", "dtype", ")", ":", "\n", "\n", "    ", "X", "=", "Fea", "[", "0", ":", "N_te", ",", ":", "]", "# fetch the sample 1 (features of deep networks)", "\n", "Y", "=", "Fea", "[", "N_te", ":", ",", ":", "]", "# fetch the sample 2 (features of deep networks)", "\n", "\n", "\n", "Dxx", "=", "Pdist2", "(", "X", ",", "X", ")", "\n", "Dyy", "=", "Pdist2", "(", "Y", ",", "Y", ")", "\n", "Dxy", "=", "Pdist2", "(", "X", ",", "Y", ")", "\n", "\n", "Kx", "=", "torch", ".", "exp", "(", "-", "Dxx", "/", "sigma0", ")", "\n", "Ky", "=", "torch", ".", "exp", "(", "-", "Dyy", "/", "sigma0", ")", "\n", "Kxy", "=", "torch", ".", "exp", "(", "-", "Dxy", "/", "sigma0", ")", "\n", "\n", "return", "bootsrap_null", "(", "N_te", ",", "N_per", ",", "Kx", ",", "Ky", ",", "Kxy", ",", "alpha", ",", "device", ",", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.SAMMD_WB": [[117, 143], ["N_utils_HD.Pdist2", "N_utils_HD.Pdist2", "N_utils_HD.Pdist2", "N_utils_HD.Pdist2", "N_utils_HD.Pdist2", "N_utils_HD.Pdist2", "N_utils_HD.bootsrap_null", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.bootsrap_null"], ["", "def", "SAMMD_WB", "(", "Fea", ",", "N_per", ",", "N_te", ",", "Fea_org", ",", "sigma", ",", "sigma0", ",", "epsilon", ",", "alpha", ",", "device", ",", "dtype", ")", ":", "\n", "\n", "    ", "X", "=", "Fea", "[", "0", ":", "N_te", ",", ":", "]", "# fetch the sample 1 (features of deep networks)", "\n", "Y", "=", "Fea", "[", "N_te", ":", ",", ":", "]", "# fetch the sample 2 (features of deep networks)", "\n", "X_org", "=", "Fea_org", "[", "0", ":", "N_te", ",", ":", "]", "# fetch the original sample 1", "\n", "Y_org", "=", "Fea_org", "[", "N_te", ":", ",", ":", "]", "# fetch the original sample 2", "\n", "\n", "\n", "Dxx", "=", "Pdist2", "(", "X", ",", "X", ")", "\n", "Dyy", "=", "Pdist2", "(", "Y", ",", "Y", ")", "\n", "Dxy", "=", "Pdist2", "(", "X", ",", "Y", ")", "\n", "Dxx_org", "=", "Pdist2", "(", "X_org", ",", "X_org", ")", "\n", "Dyy_org", "=", "Pdist2", "(", "Y_org", ",", "Y_org", ")", "\n", "Dxy_org", "=", "Pdist2", "(", "X_org", ",", "Y_org", ")", "\n", "#print(Dxx.shape)", "\n", "#print(Dxx.median())", "\n", "#print(Dxx.mean())", "\n", "#print(Dxx_org.shape)", "\n", "#print(Dxx_org.median())", "\n", "#print(Dxx_org.mean())", "\n", "\n", "Kx", "=", "(", "1", "-", "epsilon", ")", "*", "torch", ".", "exp", "(", "-", "(", "Dxx", "/", "sigma0", ")", "-", "Dxx_org", "/", "sigma", ")", "+", "epsilon", "*", "torch", ".", "exp", "(", "-", "Dxx_org", "/", "sigma", ")", "\n", "Ky", "=", "(", "1", "-", "epsilon", ")", "*", "torch", ".", "exp", "(", "-", "(", "Dyy", "/", "sigma0", ")", "-", "Dyy_org", "/", "sigma", ")", "+", "epsilon", "*", "torch", ".", "exp", "(", "-", "Dyy_org", "/", "sigma", ")", "\n", "Kxy", "=", "(", "1", "-", "epsilon", ")", "*", "torch", ".", "exp", "(", "-", "(", "Dxy", "/", "sigma0", ")", "-", "Dxy_org", "/", "sigma", ")", "+", "epsilon", "*", "torch", ".", "exp", "(", "-", "Dxy_org", "/", "sigma", ")", "\n", "\n", "return", "bootsrap_null", "(", "N_te", ",", "N_per", ",", "Kx", ",", "Ky", ",", "Kxy", ",", "alpha", ",", "device", ",", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.TST_MMDD_WB": [[144, 175], ["torch.device", "N_utils_HD.Pdist2", "N_utils_HD.Pdist2", "N_utils_HD.Pdist2", "N_utils_HD.Pdist2", "N_utils_HD.Pdist2", "N_utils_HD.Pdist2", "N_utils_HD.bootsrap_null", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.bootsrap_null"], ["", "def", "TST_MMDD_WB", "(", "Fea", ",", "N_per", ",", "N_te", ",", "Fea_org", ",", "sigma", ",", "sigma0", "=", "0.1", ",", "epsilon", "=", "10", "**", "(", "-", "10", ")", ",", "alpha", "=", "0.05", ",", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", ")", ",", "dtype", "=", "torch", ".", "float", ",", "is_smooth", "=", "True", ",", "is_var_computed", "=", "True", ",", "use_1sample_U", "=", "True", ")", ":", "\n", "    ", "\"\"\"compute value of deep-kernel MMD and std of deep-kernel MMD using merged data.\"\"\"", "\n", "\n", "X", "=", "Fea", "[", "0", ":", "N_te", ",", ":", "]", "# fetch the sample 1 (features of deep networks)", "\n", "Y", "=", "Fea", "[", "N_te", ":", ",", ":", "]", "# fetch the sample 2 (features of deep networks)", "\n", "X_org", "=", "Fea_org", "[", "0", ":", "N_te", ",", ":", "]", "# fetch the original sample 1", "\n", "Y_org", "=", "Fea_org", "[", "N_te", ":", ",", ":", "]", "# fetch the original sample 2", "\n", "\n", "\n", "L", "=", "1", "# generalized Gaussian (if L>1)", "\n", "Dxx", "=", "Pdist2", "(", "X", ",", "X", ")", "\n", "Dyy", "=", "Pdist2", "(", "Y", ",", "Y", ")", "\n", "Dxy", "=", "Pdist2", "(", "X", ",", "Y", ")", "\n", "Dxx_org", "=", "Pdist2", "(", "X_org", ",", "X_org", ")", "\n", "Dyy_org", "=", "Pdist2", "(", "Y_org", ",", "Y_org", ")", "\n", "Dxy_org", "=", "Pdist2", "(", "X_org", ",", "Y_org", ")", "\n", "\n", "\n", "if", "is_smooth", ":", "\n", "\n", "        ", "Kx", "=", "(", "1", "-", "epsilon", ")", "*", "torch", ".", "exp", "(", "-", "(", "Dxx", "/", "sigma0", ")", "**", "L", "-", "Dxx_org", "/", "sigma", ")", "+", "epsilon", "*", "torch", ".", "exp", "(", "-", "Dxx_org", "/", "sigma", ")", "\n", "Ky", "=", "(", "1", "-", "epsilon", ")", "*", "torch", ".", "exp", "(", "-", "(", "Dyy", "/", "sigma0", ")", "**", "L", "-", "Dyy_org", "/", "sigma", ")", "+", "epsilon", "*", "torch", ".", "exp", "(", "-", "Dyy_org", "/", "sigma", ")", "\n", "Kxy", "=", "(", "1", "-", "epsilon", ")", "*", "torch", ".", "exp", "(", "-", "(", "Dxy", "/", "sigma0", ")", "**", "L", "-", "Dxy_org", "/", "sigma", ")", "+", "epsilon", "*", "torch", ".", "exp", "(", "-", "Dxy_org", "/", "sigma", ")", "\n", "\n", "\n", "", "else", ":", "\n", "        ", "Kx", "=", "torch", ".", "exp", "(", "-", "Dxx", "/", "sigma0", ")", "\n", "Ky", "=", "torch", ".", "exp", "(", "-", "Dyy", "/", "sigma0", ")", "\n", "Kxy", "=", "torch", ".", "exp", "(", "-", "Dxy", "/", "sigma0", ")", "\n", "\n", "", "return", "bootsrap_null", "(", "N_te", ",", "N_per", ",", "Kx", ",", "Ky", ",", "Kxy", ",", "alpha", ",", "device", ",", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.TST_WBMMD_u": [[177, 202], ["N_utils_HD.Pdist2", "N_utils_HD.Pdist2", "N_utils_HD.Pdist2", "N_utils_HD.Pdist2", "N_utils_HD.Pdist2", "N_utils_HD.Pdist2", "N_utils_HD.bootsrap_null", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.bootsrap_null"], ["", "def", "TST_WBMMD_u", "(", "Fea", ",", "N_per", ",", "N1", ",", "Fea_org", ",", "sigma", ",", "sigma0", ",", "epsilon", ",", "alpha", ",", "device", ",", "dtype", ",", "is_smooth", ")", ":", "\n", "    ", "\"\"\"run two-sample test (TST) using deep kernel kernel.\"\"\"", "\n", "X", "=", "Fea", "[", "0", ":", "N1", ",", ":", "]", "# fetch the sample 1 (features of deep networks)", "\n", "Y", "=", "Fea", "[", "N1", ":", ",", ":", "]", "# fetch the sample 2 (features of deep networks)", "\n", "X_org", "=", "Fea_org", "[", "0", ":", "N1", ",", ":", "]", "# fetch the original sample 1", "\n", "Y_org", "=", "Fea_org", "[", "N1", ":", ",", ":", "]", "# fetch the original sample 2", "\n", "\n", "nx", "=", "X", ".", "shape", "[", "0", "]", "\n", "ny", "=", "Y", ".", "shape", "[", "0", "]", "\n", "Dxx", "=", "Pdist2", "(", "X", ",", "X", ")", "\n", "Dyy", "=", "Pdist2", "(", "Y", ",", "Y", ")", "\n", "Dxy", "=", "Pdist2", "(", "X", ",", "Y", ")", "\n", "Dxx_org", "=", "Pdist2", "(", "X_org", ",", "X_org", ")", "\n", "Dyy_org", "=", "Pdist2", "(", "Y_org", ",", "Y_org", ")", "\n", "Dxy_org", "=", "Pdist2", "(", "X_org", ",", "Y_org", ")", "\n", "if", "is_smooth", ":", "\n", "        ", "Kx", "=", "(", "1", "-", "epsilon", ")", "*", "torch", ".", "exp", "(", "-", "(", "Dxx", "/", "sigma0", ")", "-", "Dxx_org", "/", "sigma", ")", "+", "epsilon", "*", "torch", ".", "exp", "(", "-", "Dxx_org", "/", "sigma", ")", "\n", "Ky", "=", "(", "1", "-", "epsilon", ")", "*", "torch", ".", "exp", "(", "-", "(", "Dyy", "/", "sigma0", ")", "-", "Dyy_org", "/", "sigma", ")", "+", "epsilon", "*", "torch", ".", "exp", "(", "-", "Dyy_org", "/", "sigma", ")", "\n", "Kxy", "=", "(", "1", "-", "epsilon", ")", "*", "torch", ".", "exp", "(", "-", "(", "Dxy", "/", "sigma0", ")", "-", "Dxy_org", "/", "sigma", ")", "+", "epsilon", "*", "torch", ".", "exp", "(", "-", "Dxy_org", "/", "sigma", ")", "\n", "", "else", ":", "\n", "        ", "Kx", "=", "torch", ".", "exp", "(", "-", "Dxx", "/", "sigma0", ")", "\n", "Ky", "=", "torch", ".", "exp", "(", "-", "Dyy", "/", "sigma0", ")", "\n", "Kxy", "=", "torch", ".", "exp", "(", "-", "Dxy", "/", "sigma0", ")", "\n", "\n", "", "return", "bootsrap_null", "(", "N1", ",", "N_per", ",", "Kx", ",", "Ky", ",", "Kxy", ",", "alpha", ",", "device", ",", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.h1_mean_var_gram": [[204, 242], ["torch.cat", "torch.cat", "torch.cat", "torch.div", "torch.div", "torch.div", "torch.div", "Kxy.transpose", "torch.dot", "print", "print", "Kxy.transpose", "torch.div", "torch.div", "torch.sum", "torch.sum", "torch.div", "torch.div", "hh.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "hh.sum", "hh.sum", "str", "torch.diag", "torch.diag", "torch.sum", "torch.sum", "torch.diag"], "function", ["None"], ["", "def", "h1_mean_var_gram", "(", "Kx", ",", "Ky", ",", "Kxy", ",", "is_var_computed", ",", "use_1sample_U", "=", "True", ")", ":", "\n", "    ", "\"\"\"compute value of MMD and std of MMD using kernel matrix.\"\"\"", "\n", "Kxxy", "=", "torch", ".", "cat", "(", "(", "Kx", ",", "Kxy", ")", ",", "1", ")", "\n", "Kyxy", "=", "torch", ".", "cat", "(", "(", "Kxy", ".", "transpose", "(", "0", ",", "1", ")", ",", "Ky", ")", ",", "1", ")", "\n", "Kxyxy", "=", "torch", ".", "cat", "(", "(", "Kxxy", ",", "Kyxy", ")", ",", "0", ")", "\n", "nx", "=", "Kx", ".", "shape", "[", "0", "]", "\n", "ny", "=", "Ky", ".", "shape", "[", "0", "]", "\n", "#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!original True", "\n", "is_unbiased", "=", "True", "\n", "#is_unbiased = False", "\n", "if", "is_unbiased", ":", "\n", "        ", "xx", "=", "torch", ".", "div", "(", "(", "torch", ".", "sum", "(", "Kx", ")", "-", "torch", ".", "sum", "(", "torch", ".", "diag", "(", "Kx", ")", ")", ")", ",", "(", "nx", "*", "(", "nx", "-", "1", ")", ")", ")", "\n", "yy", "=", "torch", ".", "div", "(", "(", "torch", ".", "sum", "(", "Ky", ")", "-", "torch", ".", "sum", "(", "torch", ".", "diag", "(", "Ky", ")", ")", ")", ",", "(", "ny", "*", "(", "ny", "-", "1", ")", ")", ")", "\n", "# one-sample U-statistic.", "\n", "if", "use_1sample_U", ":", "\n", "            ", "xy", "=", "torch", ".", "div", "(", "(", "torch", ".", "sum", "(", "Kxy", ")", "-", "torch", ".", "sum", "(", "torch", ".", "diag", "(", "Kxy", ")", ")", ")", ",", "(", "nx", "*", "(", "ny", "-", "1", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "xy", "=", "torch", ".", "div", "(", "torch", ".", "sum", "(", "Kxy", ")", ",", "(", "nx", "*", "ny", ")", ")", "\n", "", "mmd2", "=", "xx", "-", "2", "*", "xy", "+", "yy", "\n", "", "else", ":", "\n", "        ", "xx", "=", "torch", ".", "div", "(", "(", "torch", ".", "sum", "(", "Kx", ")", ")", ",", "(", "nx", "*", "nx", ")", ")", "\n", "yy", "=", "torch", ".", "div", "(", "(", "torch", ".", "sum", "(", "Ky", ")", ")", ",", "(", "ny", "*", "ny", ")", ")", "\n", "# one-sample U-statistic.", "\n", "if", "use_1sample_U", ":", "\n", "            ", "xy", "=", "torch", ".", "div", "(", "(", "torch", ".", "sum", "(", "Kxy", ")", ")", ",", "(", "nx", "*", "ny", ")", ")", "\n", "", "else", ":", "\n", "            ", "xy", "=", "torch", ".", "div", "(", "torch", ".", "sum", "(", "Kxy", ")", ",", "(", "nx", "*", "ny", ")", ")", "\n", "", "mmd2", "=", "xx", "-", "2", "*", "xy", "+", "yy", "\n", "", "if", "not", "is_var_computed", ":", "\n", "        ", "return", "mmd2", ",", "None", ",", "Kxyxy", "\n", "", "hh", "=", "Kx", "+", "Ky", "-", "Kxy", "-", "Kxy", ".", "transpose", "(", "0", ",", "1", ")", "\n", "V1", "=", "torch", ".", "dot", "(", "hh", ".", "sum", "(", "1", ")", "/", "ny", ",", "hh", ".", "sum", "(", "1", ")", "/", "ny", ")", "/", "ny", "\n", "V2", "=", "(", "hh", ")", ".", "sum", "(", ")", "/", "(", "nx", ")", "/", "nx", "\n", "varEst", "=", "4", "*", "(", "V1", "-", "V2", "**", "2", ")", "\n", "if", "varEst", "==", "0.0", ":", "\n", "        ", "print", "(", "'error_var!!'", "+", "str", "(", "V1", ")", ")", "\n", "print", "(", "Kx", ".", "shape", ")", "\n", "", "return", "mmd2", ",", "varEst", ",", "Kxyxy", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.MMDu": [[243, 271], ["N_utils_HD.Pdist2", "N_utils_HD.Pdist2", "N_utils_HD.Pdist2", "N_utils_HD.Pdist2", "N_utils_HD.Pdist2", "N_utils_HD.Pdist2", "torch.eye().cuda", "torch.eye().cuda", "N_utils_HD.h1_mean_var_gram", "torch.exp", "torch.exp", "torch.exp", "torch.eye", "torch.eye", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.h1_mean_var_gram"], ["", "def", "MMDu", "(", "Fea", ",", "len_s", ",", "Fea_org", ",", "sigma", ",", "sigma0", "=", "0.1", ",", "epsilon", "=", "10", "**", "(", "-", "10", ")", ",", "is_smooth", "=", "True", ",", "is_var_computed", "=", "True", ",", "use_1sample_U", "=", "True", ")", ":", "\n", "    ", "\"\"\"compute value of deep-kernel MMD and std of deep-kernel MMD using merged data.\"\"\"", "\n", "X", "=", "Fea", "[", "0", ":", "len_s", ",", ":", "]", "# fetch the sample 1 (features of deep networks)", "\n", "Y", "=", "Fea", "[", "len_s", ":", ",", ":", "]", "# fetch the sample 2 (features of deep networks)", "\n", "X_org", "=", "Fea_org", "[", "0", ":", "len_s", ",", ":", "]", "# fetch the original sample 1", "\n", "Y_org", "=", "Fea_org", "[", "len_s", ":", ",", ":", "]", "# fetch the original sample 2", "\n", "L", "=", "1", "# generalized Gaussian (if L>1)", "\n", "\n", "nx", "=", "X", ".", "shape", "[", "0", "]", "\n", "ny", "=", "Y", ".", "shape", "[", "0", "]", "\n", "Dxx", "=", "Pdist2", "(", "X", ",", "X", ")", "\n", "Dyy", "=", "Pdist2", "(", "Y", ",", "Y", ")", "\n", "Dxy", "=", "Pdist2", "(", "X", ",", "Y", ")", "\n", "Dxx_org", "=", "Pdist2", "(", "X_org", ",", "X_org", ")", "\n", "Dyy_org", "=", "Pdist2", "(", "Y_org", ",", "Y_org", ")", "\n", "Dxy_org", "=", "Pdist2", "(", "X_org", ",", "Y_org", ")", "\n", "K_Ix", "=", "torch", ".", "eye", "(", "nx", ")", ".", "cuda", "(", ")", "\n", "K_Iy", "=", "torch", ".", "eye", "(", "ny", ")", ".", "cuda", "(", ")", "\n", "if", "is_smooth", ":", "\n", "        ", "Kx", "=", "(", "1", "-", "epsilon", ")", "*", "torch", ".", "exp", "(", "-", "(", "Dxx", "/", "sigma0", ")", "**", "L", "-", "Dxx_org", "/", "sigma", ")", "+", "epsilon", "*", "torch", ".", "exp", "(", "-", "Dxx_org", "/", "sigma", ")", "\n", "Ky", "=", "(", "1", "-", "epsilon", ")", "*", "torch", ".", "exp", "(", "-", "(", "Dyy", "/", "sigma0", ")", "**", "L", "-", "Dyy_org", "/", "sigma", ")", "+", "epsilon", "*", "torch", ".", "exp", "(", "-", "Dyy_org", "/", "sigma", ")", "\n", "Kxy", "=", "(", "1", "-", "epsilon", ")", "*", "torch", ".", "exp", "(", "-", "(", "Dxy", "/", "sigma0", ")", "**", "L", "-", "Dxy_org", "/", "sigma", ")", "+", "epsilon", "*", "torch", ".", "exp", "(", "-", "Dxy_org", "/", "sigma", ")", "\n", "", "else", ":", "\n", "        ", "Kx", "=", "torch", ".", "exp", "(", "-", "Dxx", "/", "sigma0", ")", "\n", "Ky", "=", "torch", ".", "exp", "(", "-", "Dyy", "/", "sigma0", ")", "\n", "Kxy", "=", "torch", ".", "exp", "(", "-", "Dxy", "/", "sigma0", ")", "\n", "\n", "", "return", "h1_mean_var_gram", "(", "Kx", ",", "Ky", ",", "Kxy", ",", "is_var_computed", ",", "use_1sample_U", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.adaptive_MMDu": [[273, 287], ["N_utils_HD.Pdist2", "N_utils_HD.Pdist2", "N_utils_HD.Pdist2", "torch.exp", "torch.exp", "torch.exp", "N_utils_HD.h1_mean_var_gram"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.h1_mean_var_gram"], ["", "def", "adaptive_MMDu", "(", "Fea", ",", "len_s", ",", "sigma0", "=", "0.1", ",", "is_var_computed", "=", "True", ",", "use_1sample_U", "=", "True", ")", ":", "\n", "    ", "\"\"\"compute value of deep-kernel MMD and std of deep-kernel MMD using merged data.\"\"\"", "\n", "X", "=", "Fea", "[", "0", ":", "len_s", ",", ":", "]", "# fetch the sample 1 (features of deep networks)", "\n", "Y", "=", "Fea", "[", "len_s", ":", ",", ":", "]", "# fetch the sample 2 (features of deep networks)", "\n", "\n", "Dxx", "=", "Pdist2", "(", "X", ",", "X", ")", "\n", "Dyy", "=", "Pdist2", "(", "Y", ",", "Y", ")", "\n", "Dxy", "=", "Pdist2", "(", "X", ",", "Y", ")", "\n", "\n", "Kx", "=", "torch", ".", "exp", "(", "-", "Dxx", "/", "sigma0", ")", "\n", "Ky", "=", "torch", ".", "exp", "(", "-", "Dyy", "/", "sigma0", ")", "\n", "Kxy", "=", "torch", ".", "exp", "(", "-", "Dxy", "/", "sigma0", ")", "\n", "\n", "return", "h1_mean_var_gram", "(", "Kx", ",", "Ky", ",", "Kxy", ",", "is_var_computed", ",", "use_1sample_U", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.MMDu_linear_kernel": [[288, 302], ["Fea[].unsqueeze.mm", "Fea[].unsqueeze.mm", "Fea[].unsqueeze.mm", "N_utils_HD.h1_mean_var_gram", "Fea[].unsqueeze.transpose", "Fea[].unsqueeze.transpose", "Fea[].unsqueeze.transpose", "Fea[].unsqueeze", "Fea[].unsqueeze"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.h1_mean_var_gram"], ["", "def", "MMDu_linear_kernel", "(", "Fea", ",", "len_s", ",", "is_var_computed", "=", "True", ",", "use_1sample_U", "=", "True", ")", ":", "\n", "    ", "\"\"\"compute value of (deep) lineaer-kernel MMD and std of (deep) lineaer-kernel MMD using merged data.\"\"\"", "\n", "try", ":", "\n", "        ", "X", "=", "Fea", "[", "0", ":", "len_s", ",", ":", "]", "\n", "Y", "=", "Fea", "[", "len_s", ":", ",", ":", "]", "\n", "", "except", ":", "\n", "        ", "X", "=", "Fea", "[", "0", ":", "len_s", "]", ".", "unsqueeze", "(", "1", ")", "\n", "Y", "=", "Fea", "[", "len_s", ":", "]", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "", "Kx", "=", "X", ".", "mm", "(", "X", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "Ky", "=", "Y", ".", "mm", "(", "Y", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "Kxy", "=", "X", ".", "mm", "(", "Y", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "\n", "return", "h1_mean_var_gram", "(", "Kx", ",", "Ky", ",", "Kxy", ",", "is_var_computed", ",", "use_1sample_U", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.C2ST_NN_fit": [[303, 344], ["torch.randn().to", "torch.randn().to", "torch.optim.Adam", "torch.nn.CrossEntropyLoss", "torch.nn.Softmax", "numpy.random.choice", "torch.utils.data.TensorDataset", "torch.utils.data.DataLoader", "len", "range", "torch.nn.Softmax.", "abs", "ModelLatentF().cuda", "N_utils_HD.ModelLatentF", "iter", "f.max", "torch.randn", "torch.randn", "numpy.int", "iter.next", "torch.nn.CrossEntropyLoss.", "torch.optim.Adam.zero_grad", "criterion.backward", "torch.optim.Adam.step", "print", "ModelLatentF.mm", "pred[].type().mean", "pred[].type().mean", "N_utils_HD.ModelLatentF", "list", "numpy.ceil", "ModelLatentF.mm", "torch.nn.CrossEntropyLoss.item", "ModelLatentF.parameters", "ModelLatentF.", "pred[].type", "pred[].type", "ModelLatentF.", "torch.nn.CrossEntropyLoss.", "ModelLatentF.mm", "ModelLatentF."], "function", ["None"], ["", "def", "C2ST_NN_fit", "(", "S", ",", "y", ",", "N1", ",", "x_in", ",", "H", ",", "x_out", ",", "learning_rate_C2ST", ",", "N_epoch", ",", "batch_size", ",", "device", ",", "dtype", ")", ":", "\n", "    ", "\"\"\"Train a deep network for C2STs.\"\"\"", "\n", "N", "=", "S", ".", "shape", "[", "0", "]", "\n", "if", "is_cuda", ":", "\n", "        ", "model_C2ST", "=", "ModelLatentF", "(", "x_in", ",", "H", ",", "x_out", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "model_C2ST", "=", "ModelLatentF", "(", "x_in", ",", "H", ",", "x_out", ")", "\n", "", "w_C2ST", "=", "torch", ".", "randn", "(", "[", "x_out", ",", "2", "]", ")", ".", "to", "(", "device", ",", "dtype", ")", "\n", "b_C2ST", "=", "torch", ".", "randn", "(", "[", "1", ",", "2", "]", ")", ".", "to", "(", "device", ",", "dtype", ")", "\n", "w_C2ST", ".", "requires_grad", "=", "True", "\n", "b_C2ST", ".", "requires_grad", "=", "True", "\n", "optimizer_C2ST", "=", "torch", ".", "optim", ".", "Adam", "(", "list", "(", "model_C2ST", ".", "parameters", "(", ")", ")", "+", "[", "w_C2ST", "]", "+", "[", "b_C2ST", "]", ",", "lr", "=", "learning_rate_C2ST", ")", "\n", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "f", "=", "torch", ".", "nn", ".", "Softmax", "(", ")", "\n", "ind", "=", "np", ".", "random", ".", "choice", "(", "N", ",", "N", ",", "replace", "=", "False", ")", "\n", "tr_ind", "=", "ind", "[", ":", "np", ".", "int", "(", "np", ".", "ceil", "(", "N", "*", "1", ")", ")", "]", "\n", "te_ind", "=", "tr_ind", "\n", "dataset", "=", "torch", ".", "utils", ".", "data", ".", "TensorDataset", "(", "S", "[", "tr_ind", ",", ":", "]", ",", "y", "[", "tr_ind", "]", ")", "\n", "dataloader_C2ST", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "len_dataloader", "=", "len", "(", "dataloader_C2ST", ")", "\n", "for", "epoch", "in", "range", "(", "N_epoch", ")", ":", "\n", "        ", "data_iter", "=", "iter", "(", "dataloader_C2ST", ")", "\n", "tt", "=", "0", "\n", "while", "tt", "<", "len_dataloader", ":", "\n", "# training model using source data", "\n", "            ", "data_source", "=", "data_iter", ".", "next", "(", ")", "\n", "S_b", ",", "y_b", "=", "data_source", "\n", "output_b", "=", "model_C2ST", "(", "S_b", ")", ".", "mm", "(", "w_C2ST", ")", "+", "b_C2ST", "\n", "loss_C2ST", "=", "criterion", "(", "output_b", ",", "y_b", ")", "\n", "optimizer_C2ST", ".", "zero_grad", "(", ")", "\n", "loss_C2ST", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "# Update sigma0 using gradient descent", "\n", "optimizer_C2ST", ".", "step", "(", ")", "\n", "tt", "=", "tt", "+", "1", "\n", "", "if", "epoch", "%", "100", "==", "0", ":", "\n", "            ", "print", "(", "criterion", "(", "model_C2ST", "(", "S", ")", ".", "mm", "(", "w_C2ST", ")", "+", "b_C2ST", ",", "y", ")", ".", "item", "(", ")", ")", "\n", "\n", "", "", "output", "=", "f", "(", "model_C2ST", "(", "S", "[", "te_ind", ",", ":", "]", ")", ".", "mm", "(", "w_C2ST", ")", "+", "b_C2ST", ")", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "STAT_C2ST", "=", "abs", "(", "pred", "[", ":", "N1", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "mean", "(", ")", "-", "pred", "[", "N1", ":", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "mean", "(", ")", ")", "\n", "return", "pred", ",", "STAT_C2ST", ",", "model_C2ST", ",", "w_C2ST", ",", "b_C2ST", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.gauss_kernel": [[345, 352], ["N_utils_HD.Pdist2", "N_utils_HD.Pdist2", "torch.exp", "torch.exp"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.Pdist2"], ["", "def", "gauss_kernel", "(", "X", ",", "test_locs", ",", "X_org", ",", "test_locs_org", ",", "sigma", ",", "sigma0", ",", "epsilon", ")", ":", "\n", "    ", "\"\"\"compute a deep kernel matrix between a set of samples between test locations.\"\"\"", "\n", "DXT", "=", "Pdist2", "(", "X", ",", "test_locs", ")", "\n", "DXT_org", "=", "Pdist2", "(", "X_org", ",", "test_locs_org", ")", "\n", "# Kx = torch.exp(-(DXT / sigma0))", "\n", "Kx", "=", "(", "1", "-", "epsilon", ")", "*", "torch", ".", "exp", "(", "-", "(", "DXT", "/", "sigma0", ")", "-", "DXT_org", "/", "sigma", ")", "+", "epsilon", "*", "torch", ".", "exp", "(", "-", "DXT_org", "/", "sigma", ")", "\n", "return", "Kx", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.compute_ME_stat": [[353, 371], ["N_utils_HD.gauss_kernel", "N_utils_HD.gauss_kernel", "Z.mean", "torch.eye().cuda", "torch.eye", "Z.mean.unsqueeze().mm", "torch.eye", "Z.mean.unsqueeze", "torch.solve", "Z.mean.unsqueeze"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.gauss_kernel", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.gauss_kernel"], ["", "def", "compute_ME_stat", "(", "X", ",", "Y", ",", "T", ",", "X_org", ",", "Y_org", ",", "T_org", ",", "sigma", ",", "sigma0", ",", "epsilon", ")", ":", "\n", "    ", "\"\"\"compute a deep kernel based ME statistic.\"\"\"", "\n", "# if gwidth is None or gwidth <= 0:", "\n", "#     raise ValueError('require gaussian_width > 0. Was %s.' % (str(gwidth)))", "\n", "reg", "=", "0", "#10**(-8)", "\n", "n", "=", "X", ".", "shape", "[", "0", "]", "\n", "J", "=", "T", ".", "shape", "[", "0", "]", "\n", "g", "=", "gauss_kernel", "(", "X", ",", "T", ",", "X_org", ",", "T_org", ",", "sigma", ",", "sigma0", ",", "epsilon", ")", "\n", "h", "=", "gauss_kernel", "(", "Y", ",", "T", ",", "Y_org", ",", "T_org", ",", "sigma", ",", "sigma0", ",", "epsilon", ")", "\n", "Z", "=", "g", "-", "h", "\n", "W", "=", "Z", ".", "mean", "(", "0", ")", "\n", "Sig", "=", "(", "(", "Z", "-", "W", ")", ".", "transpose", "(", "1", ",", "0", ")", ")", ".", "mm", "(", "(", "Z", "-", "W", ")", ")", "\n", "if", "is_cuda", ":", "\n", "        ", "IJ", "=", "torch", ".", "eye", "(", "J", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "IJ", "=", "torch", ".", "eye", "(", "J", ")", "\n", "", "s", "=", "n", "*", "W", ".", "unsqueeze", "(", "0", ")", ".", "mm", "(", "torch", ".", "solve", "(", "W", ".", "unsqueeze", "(", "1", ")", ",", "Sig", "+", "reg", "*", "IJ", ")", "[", "0", "]", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.mmd2_permutations": [[372, 402], ["torch.as_tensor", "torch.full", "range", "torch.einsum", "[].view", "[].view", "torch.as_tensor.take().sum", "est.item", "p_val.item", "torch.as_tensor.take", "[].numpy", "is_X.nonzero", "torch.as_tensor.trace", "torch.randperm"], "function", ["None"], ["", "def", "mmd2_permutations", "(", "K", ",", "n_X", ",", "permutations", "=", "200", ")", ":", "\n", "    ", "\"\"\"\n        Fast implementation of permutations using kernel matrix.\n    \"\"\"", "\n", "K", "=", "torch", ".", "as_tensor", "(", "K", ")", "\n", "n", "=", "K", ".", "shape", "[", "0", "]", "\n", "assert", "K", ".", "shape", "[", "0", "]", "==", "K", ".", "shape", "[", "1", "]", "\n", "n_Y", "=", "n_X", "\n", "assert", "n", "==", "n_X", "+", "n_Y", "\n", "w_X", "=", "1", "\n", "w_Y", "=", "-", "1", "\n", "ws", "=", "torch", ".", "full", "(", "(", "permutations", "+", "1", ",", "n", ")", ",", "w_Y", ",", "dtype", "=", "K", ".", "dtype", ",", "device", "=", "K", ".", "device", ")", "\n", "ws", "[", "-", "1", ",", ":", "n_X", "]", "=", "w_X", "\n", "for", "i", "in", "range", "(", "permutations", ")", ":", "\n", "        ", "ws", "[", "i", ",", "torch", ".", "randperm", "(", "n", ")", "[", ":", "n_X", "]", ".", "numpy", "(", ")", "]", "=", "w_X", "\n", "", "biased_ests", "=", "torch", ".", "einsum", "(", "\"pi,ij,pj->p\"", ",", "ws", ",", "K", ",", "ws", ")", "\n", "if", "True", ":", "# u-stat estimator", "\n", "# need to subtract \\sum_i k(X_i, X_i) + k(Y_i, Y_i) + 2 k(X_i, Y_i)", "\n", "# first two are just trace, but last is harder:", "\n", "        ", "is_X", "=", "ws", ">", "0", "\n", "X_inds", "=", "is_X", ".", "nonzero", "(", ")", "[", ":", ",", "1", "]", ".", "view", "(", "permutations", "+", "1", ",", "n_X", ")", "\n", "Y_inds", "=", "(", "~", "is_X", ")", ".", "nonzero", "(", ")", "[", ":", ",", "1", "]", ".", "view", "(", "permutations", "+", "1", ",", "n_Y", ")", "\n", "del", "is_X", ",", "ws", "\n", "cross_terms", "=", "K", ".", "take", "(", "Y_inds", "*", "n", "+", "X_inds", ")", ".", "sum", "(", "1", ")", "\n", "del", "X_inds", ",", "Y_inds", "\n", "ests", "=", "(", "biased_ests", "-", "K", ".", "trace", "(", ")", "+", "2", "*", "cross_terms", ")", "/", "(", "n_X", "*", "(", "n_X", "-", "1", ")", ")", "\n", "", "est", "=", "ests", "[", "-", "1", "]", "\n", "rest", "=", "ests", "[", ":", "-", "1", "]", "\n", "p_val", "=", "(", "rest", ">", "est", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "return", "est", ".", "item", "(", ")", ",", "p_val", ".", "item", "(", ")", ",", "rest", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.TST_MMD_adaptive_bandwidth": [[403, 438], ["numpy.zeros", "N_utils_HD.MMDu", "N_utils_HD.get_item", "range", "numpy.random.choice", "N_utils_HD.h1_mean_var_gram", "numpy.sort", "get_item.item", "numpy.ceil", "numpy.ix_", "numpy.ix_", "numpy.ix_", "numpy.int", "numpy.ceil"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.MMDu", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.get_item", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.h1_mean_var_gram"], ["", "def", "TST_MMD_adaptive_bandwidth", "(", "Fea", ",", "N_per", ",", "N1", ",", "Fea_org", ",", "sigma", ",", "sigma0", ",", "alpha", ",", "device", ",", "dtype", ")", ":", "\n", "    ", "\"\"\"run two-sample test (TST) using ordinary Gaussian kernel.\"\"\"", "\n", "mmd_vector", "=", "np", ".", "zeros", "(", "N_per", ")", "\n", "TEMP", "=", "MMDu", "(", "Fea", ",", "N1", ",", "Fea_org", ",", "sigma", ",", "sigma0", ",", "is_smooth", "=", "False", ")", "\n", "mmd_value", "=", "get_item", "(", "TEMP", "[", "0", "]", ",", "is_cuda", ")", "\n", "Kxyxy", "=", "TEMP", "[", "2", "]", "\n", "count", "=", "0", "\n", "nxy", "=", "Fea", ".", "shape", "[", "0", "]", "\n", "nx", "=", "N1", "\n", "for", "r", "in", "range", "(", "N_per", ")", ":", "\n", "# print r", "\n", "        ", "ind", "=", "np", ".", "random", ".", "choice", "(", "nxy", ",", "nxy", ",", "replace", "=", "False", ")", "\n", "# divide into new X, Y", "\n", "indx", "=", "ind", "[", ":", "nx", "]", "\n", "# print(indx)", "\n", "indy", "=", "ind", "[", "nx", ":", "]", "\n", "Kx", "=", "Kxyxy", "[", "np", ".", "ix_", "(", "indx", ",", "indx", ")", "]", "\n", "# print(Kx)", "\n", "Ky", "=", "Kxyxy", "[", "np", ".", "ix_", "(", "indy", ",", "indy", ")", "]", "\n", "Kxy", "=", "Kxyxy", "[", "np", ".", "ix_", "(", "indx", ",", "indy", ")", "]", "\n", "TEMP", "=", "h1_mean_var_gram", "(", "Kx", ",", "Ky", ",", "Kxy", ",", "is_var_computed", "=", "False", ")", "\n", "mmd_vector", "[", "r", "]", "=", "TEMP", "[", "0", "]", "\n", "if", "mmd_vector", "[", "r", "]", ">", "mmd_value", ":", "\n", "            ", "count", "=", "count", "+", "1", "\n", "", "if", "count", ">", "np", ".", "ceil", "(", "N_per", "*", "alpha", ")", ":", "\n", "            ", "h", "=", "0", "\n", "threshold", "=", "\"NaN\"", "\n", "break", "\n", "", "else", ":", "\n", "            ", "h", "=", "1", "\n", "", "", "if", "h", "==", "1", ":", "\n", "        ", "S_mmd_vector", "=", "np", ".", "sort", "(", "mmd_vector", ")", "\n", "#        print(np.int(np.ceil(N_per*alpha)))", "\n", "threshold", "=", "S_mmd_vector", "[", "np", ".", "int", "(", "np", ".", "ceil", "(", "N_per", "*", "(", "1", "-", "alpha", ")", ")", ")", "]", "\n", "", "return", "h", ",", "threshold", ",", "mmd_value", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.TST_LBU": [[439, 475], ["numpy.zeros", "MMD_LBU", "N_utils_HD.get_item", "range", "Fea.float", "numpy.random.choice", "N_utils_HD.h1_mean_var_gram", "numpy.sort", "get_item.item", "numpy.ceil", "numpy.ix_", "numpy.ix_", "numpy.ix_", "numpy.int", "numpy.ceil"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.get_item", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.h1_mean_var_gram"], ["", "def", "TST_LBU", "(", "Fea", ",", "N_per", ",", "N1", ",", "Fea_org", ",", "sigma", ",", "sigma0", ",", "ep", ",", "alpha", ",", "device", ",", "dtype", ",", "is_smooth", "=", "True", ")", ":", "\n", "    ", "\"\"\"run two-sample test (TST) using deep kernel kernel.\"\"\"", "\n", "mmd_vector", "=", "np", ".", "zeros", "(", "N_per", ")", "\n", "TEMP", "=", "MMD_LBU", "(", "Fea", ".", "float", "(", ")", ",", "N1", ",", "Fea_org", ",", "sigma", ",", "sigma0", ",", "ep", ",", "is_smooth", ")", "\n", "mmd_value", "=", "get_item", "(", "TEMP", "[", "0", "]", ",", "is_cuda", ")", "\n", "Kxyxy", "=", "TEMP", "[", "2", "]", "\n", "count", "=", "0", "\n", "nxy", "=", "Fea", ".", "shape", "[", "0", "]", "\n", "nx", "=", "N1", "\n", "for", "r", "in", "range", "(", "N_per", ")", ":", "\n", "# print r", "\n", "        ", "ind", "=", "np", ".", "random", ".", "choice", "(", "nxy", ",", "nxy", ",", "replace", "=", "False", ")", "\n", "# divide into new X, Y", "\n", "indx", "=", "ind", "[", ":", "nx", "]", "\n", "# print(indx)", "\n", "indy", "=", "ind", "[", "nx", ":", "]", "\n", "Kx", "=", "Kxyxy", "[", "np", ".", "ix_", "(", "indx", ",", "indx", ")", "]", "\n", "# print(Kx)", "\n", "Ky", "=", "Kxyxy", "[", "np", ".", "ix_", "(", "indy", ",", "indy", ")", "]", "\n", "Kxy", "=", "Kxyxy", "[", "np", ".", "ix_", "(", "indx", ",", "indy", ")", "]", "\n", "\n", "TEMP", "=", "h1_mean_var_gram", "(", "Kx", ",", "Ky", ",", "Kxy", ",", "is_var_computed", "=", "False", ")", "\n", "mmd_vector", "[", "r", "]", "=", "TEMP", "[", "0", "]", "\n", "if", "mmd_vector", "[", "r", "]", ">", "mmd_value", ":", "\n", "            ", "count", "=", "count", "+", "1", "\n", "", "if", "count", ">", "np", ".", "ceil", "(", "N_per", "*", "alpha", ")", ":", "\n", "            ", "h", "=", "0", "\n", "threshold", "=", "\"NaN\"", "\n", "break", "\n", "", "else", ":", "\n", "            ", "h", "=", "1", "\n", "", "", "if", "h", "==", "1", ":", "\n", "        ", "S_mmd_vector", "=", "np", ".", "sort", "(", "mmd_vector", ")", "\n", "#        print(np.int(np.ceil(N_per*alpha)))", "\n", "threshold", "=", "S_mmd_vector", "[", "np", ".", "int", "(", "np", ".", "ceil", "(", "N_per", "*", "(", "1", "-", "alpha", ")", ")", ")", "]", "\n", "", "return", "h", ",", "threshold", ",", "mmd_value", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.TST_MMD_u": [[476, 512], ["numpy.zeros", "N_utils_HD.MMDu", "N_utils_HD.get_item", "range", "numpy.random.choice", "N_utils_HD.h1_mean_var_gram", "numpy.sort", "get_item.item", "numpy.ceil", "numpy.ix_", "numpy.ix_", "numpy.ix_", "numpy.int", "numpy.ceil"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.MMDu", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.get_item", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.h1_mean_var_gram"], ["", "def", "TST_MMD_u", "(", "Fea", ",", "N_per", ",", "N1", ",", "Fea_org", ",", "sigma", ",", "sigma0", ",", "ep", ",", "alpha", ",", "device", ",", "dtype", ",", "is_smooth", "=", "True", ")", ":", "\n", "    ", "\"\"\"run two-sample test (TST) using deep kernel kernel.\"\"\"", "\n", "mmd_vector", "=", "np", ".", "zeros", "(", "N_per", ")", "\n", "TEMP", "=", "MMDu", "(", "Fea", ",", "N1", ",", "Fea_org", ",", "sigma", ",", "sigma0", ",", "ep", ",", "is_smooth", ")", "\n", "mmd_value", "=", "get_item", "(", "TEMP", "[", "0", "]", ",", "is_cuda", ")", "\n", "Kxyxy", "=", "TEMP", "[", "2", "]", "\n", "count", "=", "0", "\n", "nxy", "=", "Fea", ".", "shape", "[", "0", "]", "\n", "nx", "=", "N1", "\n", "for", "r", "in", "range", "(", "N_per", ")", ":", "\n", "# print r", "\n", "        ", "ind", "=", "np", ".", "random", ".", "choice", "(", "nxy", ",", "nxy", ",", "replace", "=", "False", ")", "\n", "# divide into new X, Y", "\n", "indx", "=", "ind", "[", ":", "nx", "]", "\n", "# print(indx)", "\n", "indy", "=", "ind", "[", "nx", ":", "]", "\n", "Kx", "=", "Kxyxy", "[", "np", ".", "ix_", "(", "indx", ",", "indx", ")", "]", "\n", "# print(Kx)", "\n", "Ky", "=", "Kxyxy", "[", "np", ".", "ix_", "(", "indy", ",", "indy", ")", "]", "\n", "Kxy", "=", "Kxyxy", "[", "np", ".", "ix_", "(", "indx", ",", "indy", ")", "]", "\n", "\n", "TEMP", "=", "h1_mean_var_gram", "(", "Kx", ",", "Ky", ",", "Kxy", ",", "is_var_computed", "=", "False", ")", "\n", "mmd_vector", "[", "r", "]", "=", "TEMP", "[", "0", "]", "\n", "if", "mmd_vector", "[", "r", "]", ">", "mmd_value", ":", "\n", "            ", "count", "=", "count", "+", "1", "\n", "", "if", "count", ">", "np", ".", "ceil", "(", "N_per", "*", "alpha", ")", ":", "\n", "            ", "h", "=", "0", "\n", "threshold", "=", "\"NaN\"", "\n", "break", "\n", "", "else", ":", "\n", "            ", "h", "=", "1", "\n", "", "", "if", "h", "==", "1", ":", "\n", "        ", "S_mmd_vector", "=", "np", ".", "sort", "(", "mmd_vector", ")", "\n", "#        print(np.int(np.ceil(N_per*alpha)))", "\n", "threshold", "=", "S_mmd_vector", "[", "np", ".", "int", "(", "np", ".", "ceil", "(", "N_per", "*", "(", "1", "-", "alpha", ")", ")", ")", "]", "\n", "", "return", "h", ",", "threshold", ",", "mmd_value", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.TST_MMD_u_linear_kernel": [[513, 550], ["numpy.zeros", "N_utils_HD.MMDu_linear_kernel", "N_utils_HD.get_item", "range", "numpy.random.choice", "N_utils_HD.h1_mean_var_gram", "numpy.sort", "get_item.item", "numpy.ceil", "numpy.ix_", "numpy.ix_", "numpy.ix_", "numpy.int", "numpy.ceil"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.MMDu_linear_kernel", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.get_item", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.h1_mean_var_gram"], ["", "def", "TST_MMD_u_linear_kernel", "(", "Fea", ",", "N_per", ",", "N1", ",", "alpha", ",", "device", ",", "dtype", ")", ":", "\n", "    ", "\"\"\"run two-sample test (TST) using (deep) lineaer kernel kernel.\"\"\"", "\n", "mmd_vector", "=", "np", ".", "zeros", "(", "N_per", ")", "\n", "TEMP", "=", "MMDu_linear_kernel", "(", "Fea", ",", "N1", ")", "\n", "mmd_value", "=", "get_item", "(", "TEMP", "[", "0", "]", ",", "is_cuda", ")", "\n", "Kxyxy", "=", "TEMP", "[", "2", "]", "\n", "count", "=", "0", "\n", "nxy", "=", "Fea", ".", "shape", "[", "0", "]", "\n", "nx", "=", "N1", "\n", "\n", "for", "r", "in", "range", "(", "N_per", ")", ":", "\n", "# print r", "\n", "        ", "ind", "=", "np", ".", "random", ".", "choice", "(", "nxy", ",", "nxy", ",", "replace", "=", "False", ")", "\n", "# divide into new X, Y", "\n", "indx", "=", "ind", "[", ":", "nx", "]", "\n", "# print(indx)", "\n", "indy", "=", "ind", "[", "nx", ":", "]", "\n", "Kx", "=", "Kxyxy", "[", "np", ".", "ix_", "(", "indx", ",", "indx", ")", "]", "\n", "# print(Kx)", "\n", "Ky", "=", "Kxyxy", "[", "np", ".", "ix_", "(", "indy", ",", "indy", ")", "]", "\n", "Kxy", "=", "Kxyxy", "[", "np", ".", "ix_", "(", "indx", ",", "indy", ")", "]", "\n", "\n", "TEMP", "=", "h1_mean_var_gram", "(", "Kx", ",", "Ky", ",", "Kxy", ",", "is_var_computed", "=", "False", ")", "\n", "mmd_vector", "[", "r", "]", "=", "TEMP", "[", "0", "]", "\n", "if", "mmd_vector", "[", "r", "]", ">", "mmd_value", ":", "\n", "            ", "count", "=", "count", "+", "1", "\n", "", "if", "count", ">", "np", ".", "ceil", "(", "N_per", "*", "alpha", ")", ":", "\n", "            ", "h", "=", "0", "\n", "threshold", "=", "\"NaN\"", "\n", "break", "\n", "", "else", ":", "\n", "            ", "h", "=", "1", "\n", "", "", "if", "h", "==", "1", ":", "\n", "        ", "S_mmd_vector", "=", "np", ".", "sort", "(", "mmd_vector", ")", "\n", "#        print(np.int(np.ceil(N_per*alpha)))", "\n", "threshold", "=", "S_mmd_vector", "[", "np", ".", "int", "(", "np", ".", "ceil", "(", "N_per", "*", "(", "1", "-", "alpha", ")", ")", ")", "]", "\n", "", "return", "h", ",", "threshold", ",", "mmd_value", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.TST_C2ST": [[551, 578], ["numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.nn.Softmax", "torch.nn.Softmax.", "abs", "numpy.zeros", "range", "numpy.sort", "f.max", "numpy.random.choice", "abs", "abs.item", "model_C2ST().mm", "pred_C2ST[].type().mean", "pred_C2ST[].type().mean", "numpy.int", "numpy.int", "pred_C2ST[].type().mean", "pred_C2ST[].type().mean", "numpy.ceil", "numpy.ceil", "model_C2ST", "pred_C2ST[].type", "pred_C2ST[].type", "pred_C2ST[].type", "pred_C2ST[].type"], "function", ["None"], ["", "def", "TST_C2ST", "(", "S", ",", "N1", ",", "N_per", ",", "alpha", ",", "model_C2ST", ",", "w_C2ST", ",", "b_C2ST", ",", "device", ",", "dtype", ")", ":", "\n", "    ", "\"\"\"run C2ST-S on non-image datasets.\"\"\"", "\n", "np", ".", "random", ".", "seed", "(", "seed", "=", "1102", ")", "\n", "torch", ".", "manual_seed", "(", "1102", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "1102", ")", "\n", "N", "=", "S", ".", "shape", "[", "0", "]", "\n", "f", "=", "torch", ".", "nn", ".", "Softmax", "(", ")", "\n", "output", "=", "f", "(", "model_C2ST", "(", "S", ")", ".", "mm", "(", "w_C2ST", ")", "+", "b_C2ST", ")", "\n", "pred_C2ST", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "STAT", "=", "abs", "(", "pred_C2ST", "[", ":", "N1", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "mean", "(", ")", "-", "pred_C2ST", "[", "N1", ":", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "mean", "(", ")", ")", "\n", "STAT_vector", "=", "np", ".", "zeros", "(", "N_per", ")", "\n", "for", "r", "in", "range", "(", "N_per", ")", ":", "\n", "        ", "ind", "=", "np", ".", "random", ".", "choice", "(", "N", ",", "N", ",", "replace", "=", "False", ")", "\n", "# divide into new X, Y", "\n", "ind_X", "=", "ind", "[", ":", "N1", "]", "\n", "ind_Y", "=", "ind", "[", "N1", ":", "]", "\n", "# print(indx)", "\n", "STAT_vector", "[", "r", "]", "=", "abs", "(", "pred_C2ST", "[", "ind_X", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "mean", "(", ")", "-", "pred_C2ST", "[", "ind_Y", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "mean", "(", ")", ")", "\n", "", "S_vector", "=", "np", ".", "sort", "(", "STAT_vector", ")", "\n", "threshold", "=", "S_vector", "[", "np", ".", "int", "(", "np", ".", "ceil", "(", "N_per", "*", "(", "1", "-", "alpha", ")", ")", ")", "]", "\n", "threshold_lower", "=", "S_vector", "[", "np", ".", "int", "(", "np", ".", "ceil", "(", "N_per", "*", "alpha", ")", ")", "]", "\n", "h", "=", "0", "\n", "if", "STAT", ".", "item", "(", ")", ">", "threshold", ":", "\n", "        ", "h", "=", "1", "\n", "# if STAT.item() < threshold_lower:", "\n", "#     h = 1", "\n", "", "return", "h", ",", "threshold", ",", "STAT", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.TST_LCE": [[579, 604], ["numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.nn.Softmax", "torch.nn.Softmax.", "abs", "numpy.zeros", "range", "numpy.sort", "numpy.random.choice", "abs", "abs.item", "model_C2ST().mm", "output[].type().mean", "output[].type().mean", "numpy.int", "numpy.int", "output[].type().mean", "output[].type().mean", "numpy.ceil", "numpy.ceil", "model_C2ST", "output[].type", "output[].type", "output[].type", "output[].type"], "function", ["None"], ["", "def", "TST_LCE", "(", "S", ",", "N1", ",", "N_per", ",", "alpha", ",", "model_C2ST", ",", "w_C2ST", ",", "b_C2ST", ",", "device", ",", "dtype", ")", ":", "\n", "    ", "\"\"\"run C2ST-L on non-image datasets.\"\"\"", "\n", "np", ".", "random", ".", "seed", "(", "seed", "=", "1102", ")", "\n", "torch", ".", "manual_seed", "(", "1102", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "1102", ")", "\n", "N", "=", "S", ".", "shape", "[", "0", "]", "\n", "f", "=", "torch", ".", "nn", ".", "Softmax", "(", ")", "\n", "output", "=", "f", "(", "model_C2ST", "(", "S", ")", ".", "mm", "(", "w_C2ST", ")", "+", "b_C2ST", ")", "\n", "# pred_C2ST = output.max(1, keepdim=True)[1]", "\n", "STAT", "=", "abs", "(", "output", "[", ":", "N1", ",", "0", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "mean", "(", ")", "-", "output", "[", "N1", ":", ",", "0", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "mean", "(", ")", ")", "\n", "STAT_vector", "=", "np", ".", "zeros", "(", "N_per", ")", "\n", "for", "r", "in", "range", "(", "N_per", ")", ":", "\n", "        ", "ind", "=", "np", ".", "random", ".", "choice", "(", "N", ",", "N", ",", "replace", "=", "False", ")", "\n", "# divide into new X, Y", "\n", "ind_X", "=", "ind", "[", ":", "N1", "]", "\n", "ind_Y", "=", "ind", "[", "N1", ":", "]", "\n", "# print(indx)", "\n", "STAT_vector", "[", "r", "]", "=", "abs", "(", "output", "[", "ind_X", ",", "0", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "mean", "(", ")", "-", "output", "[", "ind_Y", ",", "0", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "mean", "(", ")", ")", "\n", "", "S_vector", "=", "np", ".", "sort", "(", "STAT_vector", ")", "\n", "threshold", "=", "S_vector", "[", "np", ".", "int", "(", "np", ".", "ceil", "(", "N_per", "*", "(", "1", "-", "alpha", ")", ")", ")", "]", "\n", "threshold_lower", "=", "S_vector", "[", "np", ".", "int", "(", "np", ".", "ceil", "(", "N_per", "*", "alpha", ")", ")", "]", "\n", "h", "=", "0", "\n", "if", "STAT", ".", "item", "(", ")", ">", "threshold", ":", "\n", "        ", "h", "=", "1", "\n", "", "return", "h", ",", "threshold", ",", "STAT", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.TST_ME": [[605, 627], ["N_utils_HD.get_item", "freqopttest.TSTData", "freqopttest.MeanEmbeddingTest.optimize_locs_width", "freqopttest.MeanEmbeddingTest", "tst.MeanEmbeddingTest.perform_test"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.get_item"], ["", "def", "TST_ME", "(", "Fea", ",", "N1", ",", "alpha", ",", "is_train", ",", "test_locs", ",", "gwidth", ",", "J", "=", "1", ",", "seed", "=", "15", ")", ":", "\n", "    ", "\"\"\"run ME test.\"\"\"", "\n", "Fea", "=", "get_item", "(", "Fea", ",", "is_cuda", ")", "\n", "tst_data", "=", "data", ".", "TSTData", "(", "Fea", "[", "0", ":", "N1", ",", ":", "]", ",", "Fea", "[", "N1", ":", ",", ":", "]", ")", "\n", "h", "=", "0", "\n", "if", "is_train", ":", "\n", "        ", "op", "=", "{", "\n", "'n_test_locs'", ":", "J", ",", "# number of test locations to optimize", "\n", "'max_iter'", ":", "300", ",", "# maximum number of gradient ascent iterations", "\n", "'locs_step_size'", ":", "1.0", ",", "# step size for the test locations (features)", "\n", "'gwidth_step_size'", ":", "0.1", ",", "# step size for the Gaussian width", "\n", "'tol_fun'", ":", "1e-4", ",", "# stop if the objective does not increase more than this.", "\n", "'seed'", ":", "seed", "+", "5", ",", "# random seed", "\n", "}", "\n", "test_locs", ",", "gwidth", ",", "info", "=", "tst", ".", "MeanEmbeddingTest", ".", "optimize_locs_width", "(", "tst_data", ",", "alpha", ",", "**", "op", ")", "\n", "return", "test_locs", ",", "gwidth", "\n", "", "else", ":", "\n", "        ", "met_opt", "=", "tst", ".", "MeanEmbeddingTest", "(", "test_locs", ",", "gwidth", ",", "alpha", ")", "\n", "test_result", "=", "met_opt", ".", "perform_test", "(", "tst_data", ")", "\n", "if", "test_result", "[", "'h0_rejected'", "]", ":", "\n", "            ", "h", "=", "1", "\n", "", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.TST_SCF": [[628, 645], ["N_utils_HD.get_item", "freqopttest.TSTData", "freqopttest.SmoothCFTest.optimize_freqs_width", "freqopttest.SmoothCFTest", "tst.SmoothCFTest.perform_test"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.get_item"], ["", "", "def", "TST_SCF", "(", "Fea", ",", "N1", ",", "alpha", ",", "is_train", ",", "test_freqs", ",", "gwidth", ",", "J", "=", "1", ",", "seed", "=", "15", ")", ":", "\n", "    ", "\"\"\"run SCF test.\"\"\"", "\n", "Fea", "=", "get_item", "(", "Fea", ",", "is_cuda", ")", "\n", "tst_data", "=", "data", ".", "TSTData", "(", "Fea", "[", "0", ":", "N1", ",", ":", "]", ",", "Fea", "[", "N1", ":", ",", ":", "]", ")", "\n", "h", "=", "0", "\n", "if", "is_train", ":", "\n", "        ", "op", "=", "{", "'n_test_freqs'", ":", "J", ",", "'seed'", ":", "seed", ",", "'max_iter'", ":", "300", ",", "\n", "'batch_proportion'", ":", "1.0", ",", "'freqs_step_size'", ":", "0.1", ",", "\n", "'gwidth_step_size'", ":", "0.01", ",", "'tol_fun'", ":", "1e-4", "}", "\n", "test_freqs", ",", "gwidth", ",", "info", "=", "tst", ".", "SmoothCFTest", ".", "optimize_freqs_width", "(", "tst_data", ",", "alpha", ",", "**", "op", ")", "\n", "return", "test_freqs", ",", "gwidth", "\n", "", "else", ":", "\n", "        ", "scf_opt", "=", "tst", ".", "SmoothCFTest", "(", "test_freqs", ",", "gwidth", ",", "alpha", "=", "alpha", ")", "\n", "test_result", "=", "scf_opt", ".", "perform_test", "(", "tst_data", ")", "\n", "if", "test_result", "[", "'h0_rejected'", "]", ":", "\n", "            ", "h", "=", "1", "\n", "", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.TST_C2ST_D": [[646, 670], ["numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.nn.Softmax", "discriminator", "abs", "numpy.zeros", "range", "numpy.sort", "discriminator.max", "numpy.random.choice", "abs", "abs.item", "pred_C2ST[].type().mean", "pred_C2ST[].type().mean", "numpy.int", "numpy.int", "pred_C2ST[].type().mean", "pred_C2ST[].type().mean", "numpy.ceil", "numpy.ceil", "pred_C2ST[].type", "pred_C2ST[].type", "pred_C2ST[].type", "pred_C2ST[].type"], "function", ["None"], ["", "", "def", "TST_C2ST_D", "(", "S", ",", "N1", ",", "N_per", ",", "alpha", ",", "discriminator", ",", "device", ",", "dtype", ")", ":", "\n", "    ", "\"\"\"run C2ST-S on MNIST and CIFAR datasets.\"\"\"", "\n", "np", ".", "random", ".", "seed", "(", "seed", "=", "1102", ")", "\n", "torch", ".", "manual_seed", "(", "1102", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "1102", ")", "\n", "N", "=", "S", ".", "shape", "[", "0", "]", "\n", "f", "=", "torch", ".", "nn", ".", "Softmax", "(", ")", "\n", "output", "=", "discriminator", "(", "S", ")", "\n", "pred_C2ST", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "STAT", "=", "abs", "(", "pred_C2ST", "[", ":", "N1", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "mean", "(", ")", "-", "pred_C2ST", "[", "N1", ":", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "mean", "(", ")", ")", "\n", "STAT_vector", "=", "np", ".", "zeros", "(", "N_per", ")", "\n", "for", "r", "in", "range", "(", "N_per", ")", ":", "\n", "        ", "ind", "=", "np", ".", "random", ".", "choice", "(", "N", ",", "N", ",", "replace", "=", "False", ")", "\n", "# divide into new X, Y", "\n", "ind_X", "=", "ind", "[", ":", "N1", "]", "\n", "ind_Y", "=", "ind", "[", "N1", ":", "]", "\n", "STAT_vector", "[", "r", "]", "=", "abs", "(", "pred_C2ST", "[", "ind_X", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "mean", "(", ")", "-", "pred_C2ST", "[", "ind_Y", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "mean", "(", ")", ")", "\n", "", "S_vector", "=", "np", ".", "sort", "(", "STAT_vector", ")", "\n", "threshold", "=", "S_vector", "[", "np", ".", "int", "(", "np", ".", "ceil", "(", "N_per", "*", "(", "1", "-", "alpha", ")", ")", ")", "]", "\n", "threshold_lower", "=", "S_vector", "[", "np", ".", "int", "(", "np", ".", "ceil", "(", "N_per", "*", "alpha", ")", ")", "]", "\n", "h", "=", "0", "\n", "if", "STAT", ".", "item", "(", ")", ">", "threshold", ":", "\n", "        ", "h", "=", "1", "\n", "", "return", "h", ",", "threshold", ",", "STAT", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.TST_LCE_D": [[671, 694], ["numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.nn.Softmax", "discriminator", "abs", "numpy.zeros", "range", "numpy.sort", "numpy.random.choice", "abs", "abs.item", "output[].type().mean", "output[].type().mean", "numpy.int", "output[].type().mean", "output[].type().mean", "numpy.ceil", "output[].type", "output[].type", "output[].type", "output[].type"], "function", ["None"], ["", "def", "TST_LCE_D", "(", "S", ",", "N1", ",", "N_per", ",", "alpha", ",", "discriminator", ",", "device", ",", "dtype", ")", ":", "\n", "    ", "\"\"\"run C2ST-L on MNIST and CIFAR datasets.\"\"\"", "\n", "np", ".", "random", ".", "seed", "(", "seed", "=", "1102", ")", "\n", "torch", ".", "manual_seed", "(", "1102", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "1102", ")", "\n", "N", "=", "S", ".", "shape", "[", "0", "]", "\n", "f", "=", "torch", ".", "nn", ".", "Softmax", "(", ")", "\n", "output", "=", "discriminator", "(", "S", ")", "\n", "STAT", "=", "abs", "(", "output", "[", ":", "N1", ",", "0", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "mean", "(", ")", "-", "output", "[", "N1", ":", ",", "0", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "mean", "(", ")", ")", "\n", "STAT_vector", "=", "np", ".", "zeros", "(", "N_per", ")", "\n", "for", "r", "in", "range", "(", "N_per", ")", ":", "\n", "        ", "ind", "=", "np", ".", "random", ".", "choice", "(", "N", ",", "N", ",", "replace", "=", "False", ")", "\n", "# divide into new X, Y", "\n", "ind_X", "=", "ind", "[", ":", "N1", "]", "\n", "ind_Y", "=", "ind", "[", "N1", ":", "]", "\n", "# print(indx)", "\n", "STAT_vector", "[", "r", "]", "=", "abs", "(", "output", "[", "ind_X", ",", "0", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "mean", "(", ")", "-", "output", "[", "ind_Y", ",", "0", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "mean", "(", ")", ")", "\n", "", "S_vector", "=", "np", ".", "sort", "(", "STAT_vector", ")", "\n", "threshold", "=", "S_vector", "[", "np", ".", "int", "(", "np", ".", "ceil", "(", "N_per", "*", "(", "1", "-", "alpha", ")", ")", ")", "]", "\n", "h", "=", "0", "\n", "if", "STAT", ".", "item", "(", ")", ">", "threshold", ":", "\n", "        ", "h", "=", "1", "\n", "", "return", "h", ",", "threshold", ",", "STAT", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.TST_ME_DK": [[695, 707], ["N_utils_HD.compute_ME_stat", "scipy.chi2.sf", "compute_ME_stat.item", "pdb.set_trace"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.compute_ME_stat"], ["", "def", "TST_ME_DK", "(", "X", ",", "Y", ",", "T", ",", "X_org", ",", "Y_org", ",", "T_org", ",", "alpha", ",", "sigma", ",", "sigma0", ",", "epsilon", ",", "flag_debug", "=", "False", ")", ":", "\n", "    ", "\"\"\"run deep-kernel ME test (using chi^2 to confirm the threshold) on CIFAR datasets (this code does not work).\"\"\"", "\n", "J", "=", "T", ".", "shape", "[", "0", "]", "\n", "s", "=", "compute_ME_stat", "(", "X", ",", "Y", ",", "T", ",", "X_org", ",", "Y_org", ",", "T_org", ",", "sigma", ",", "sigma0", ",", "epsilon", ")", "\n", "pvalue", "=", "stats", ".", "chi2", ".", "sf", "(", "s", ".", "item", "(", ")", ",", "J", ")", "\n", "if", "pvalue", "<", "alpha", ":", "\n", "        ", "h", "=", "1", "\n", "", "else", ":", "\n", "        ", "h", "=", "0", "\n", "", "if", "flag_debug", ":", "\n", "        ", "pdb", ".", "set_trace", "(", ")", "\n", "", "return", "h", ",", "pvalue", ",", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.TST_ME_DK_per": [[708, 731], ["N_utils_HD.compute_ME_stat", "torch.cat().cuda", "torch.cat().cuda", "numpy.zeros", "range", "numpy.sort", "numpy.random.choice", "N_utils_HD.compute_ME_stat", "compute_ME_stat.item", "torch.cat", "torch.cat", "numpy.int", "numpy.ceil", "X.cpu", "Y.cpu", "X_org.cpu", "Y_org.cpu"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.compute_ME_stat", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.compute_ME_stat"], ["", "def", "TST_ME_DK_per", "(", "X", ",", "Y", ",", "T", ",", "X_org", ",", "Y_org", ",", "T_org", ",", "alpha", ",", "sigma", ",", "sigma0", ",", "epsilon", ")", ":", "\n", "    ", "\"\"\"run deep-kernel ME test (using permutations to confirm the threshold) on CIFAR datasets.\"\"\"", "\n", "N_per", "=", "100", "\n", "J", "=", "T", ".", "shape", "[", "0", "]", "\n", "s", "=", "compute_ME_stat", "(", "X", ",", "Y", ",", "T", ",", "X_org", ",", "Y_org", ",", "T_org", ",", "sigma", ",", "sigma0", ",", "epsilon", ")", "\n", "Fea", "=", "torch", ".", "cat", "(", "[", "X", ".", "cpu", "(", ")", ",", "Y", ".", "cpu", "(", ")", "]", ",", "0", ")", ".", "cuda", "(", ")", "\n", "Fea_org", "=", "torch", ".", "cat", "(", "[", "X_org", ".", "cpu", "(", ")", ",", "Y_org", ".", "cpu", "(", ")", "]", ",", "0", ")", ".", "cuda", "(", ")", "\n", "N1", "=", "X", ".", "shape", "[", "0", "]", "\n", "N", "=", "Fea", ".", "shape", "[", "0", "]", "\n", "STAT_vector", "=", "np", ".", "zeros", "(", "N_per", ")", "\n", "for", "r", "in", "range", "(", "N_per", ")", ":", "\n", "        ", "ind", "=", "np", ".", "random", ".", "choice", "(", "N", ",", "N", ",", "replace", "=", "False", ")", "\n", "# divide into new X, Y", "\n", "ind_X", "=", "ind", "[", ":", "N1", "]", "\n", "ind_Y", "=", "ind", "[", "N1", ":", "]", "\n", "# print(indx)", "\n", "STAT_vector", "[", "r", "]", "=", "compute_ME_stat", "(", "Fea", "[", "ind_X", ",", ":", "]", ",", "Fea", "[", "ind_Y", ",", ":", "]", ",", "T", ",", "Fea_org", "[", "ind_X", ",", ":", "]", ",", "Fea_org", "[", "ind_Y", ",", ":", "]", ",", "T_org", ",", "sigma", ",", "sigma0", ",", "epsilon", ")", "\n", "", "S_vector", "=", "np", ".", "sort", "(", "STAT_vector", ")", "\n", "threshold", "=", "S_vector", "[", "np", ".", "int", "(", "np", ".", "ceil", "(", "N_per", "*", "(", "1", "-", "alpha", ")", ")", ")", "]", "\n", "h", "=", "0", "\n", "if", "s", ".", "item", "(", ")", ">", "threshold", ":", "\n", "        ", "h", "=", "1", "\n", "", "return", "h", ",", "threshold", ",", "s", "", "", ""]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.adaptive_examples_generator.cwloss": [[9, 20], ["torch.zeros", "torch.zeros", "target_onehot.cuda.cuda", "target_onehot.cuda.scatter_", "torch.autograd.Variable", "torch.sum", "torch.sum", "target.unsqueeze", "torch.clamp", "torch.clamp", "target.size"], "function", ["None"], ["def", "cwloss", "(", "output", ",", "target", ",", "confidence", "=", "50", ",", "num_classes", "=", "10", ")", ":", "\n", "    ", "target", "=", "target", ".", "data", "\n", "target_onehot", "=", "torch", ".", "zeros", "(", "target", ".", "size", "(", ")", "+", "(", "num_classes", ",", ")", ")", "\n", "target_onehot", "=", "target_onehot", ".", "cuda", "(", ")", "\n", "target_onehot", ".", "scatter_", "(", "1", ",", "target", ".", "unsqueeze", "(", "1", ")", ",", "1.", ")", "\n", "target_var", "=", "Variable", "(", "target_onehot", ",", "requires_grad", "=", "False", ")", "\n", "real", "=", "(", "target_var", "*", "output", ")", ".", "sum", "(", "1", ")", "\n", "other", "=", "(", "(", "1.", "-", "target_var", ")", "*", "output", "-", "target_var", "*", "10000.", ")", ".", "max", "(", "1", ")", "[", "0", "]", "\n", "loss", "=", "-", "torch", ".", "clamp", "(", "real", "-", "other", "+", "confidence", ",", "min", "=", "0.", ")", "# equiv to max(..., 0.)", "\n", "loss", "=", "torch", ".", "sum", "(", "loss", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.adaptive_examples_generator.MMDG": [[21, 35], ["model_semantic", "model_semantic", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda.view", "N_utils_HD.adaptive_MMDu", "torch.sqrt", "torch.sqrt", "torch.div", "torch.div", "torch.cat", "torch.cat", "model_semantic.cpu", "model_semantic.cpu"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.N_utils_HD.adaptive_MMDu"], ["", "def", "MMDG", "(", "model_semantic", ",", "x_adv", ",", "data", ")", ":", "\n", "    ", "s1", "=", "model_semantic", "(", "data", ")", "\n", "s2", "=", "model_semantic", "(", "x_adv", ")", "\n", "N1", "=", "128", "\n", "\n", "S", "=", "torch", ".", "cat", "(", "[", "s1", ".", "cpu", "(", ")", ",", "s2", ".", "cpu", "(", ")", "]", ",", "0", ")", ".", "cuda", "(", ")", "\n", "Sv", "=", "S", ".", "view", "(", "2", "*", "N1", ",", "-", "1", ")", "\n", "\n", "TEMPa", "=", "adaptive_MMDu", "(", "Sv", ",", "N1", ",", "1000", ")", "\n", "mmd_value_tempa", "=", "-", "1", "*", "(", "TEMPa", "[", "0", "]", "+", "10", "**", "(", "-", "8", ")", ")", "\n", "mmd_std_tempa", "=", "torch", ".", "sqrt", "(", "TEMPa", "[", "1", "]", "+", "10", "**", "(", "-", "8", ")", ")", "\n", "STAT_adaptive", "=", "torch", ".", "div", "(", "mmd_value_tempa", ",", "mmd_std_tempa", ")", "\n", "\n", "return", "STAT_adaptive", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.adaptive_examples_generator.pgd1": [[36, 63], ["model.eval", "range", "torch.clamp", "torch.clamp", "torch.clamp.requires_grad_", "model", "adaptive_examples_generator.MMDG", "model.zero_grad", "loss_adv.backward", "torch.min", "torch.min", "torch.clamp", "torch.clamp", "data.detach", "data.detach", "torch.CrossEntropyLoss", "torch.enable_grad", "torch.enable_grad", "torch.clamp.grad.sign", "torch.clamp.detach", "torch.max", "torch.max", "data.detach", "data.detach", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.randn().cuda().detach", "torch.randn().cuda().detach", "torch.from_numpy().float", "torch.from_numpy().float", "torch.randn().cuda", "torch.randn().cuda", "torch.from_numpy", "torch.from_numpy", "torch.randn", "torch.randn", "numpy.random.uniform"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.adaptive_examples_generator.MMDG"], ["", "def", "pgd1", "(", "model", ",", "model_semantic", ",", "data", ",", "target", ",", "epsilon", ",", "step_size", ",", "num_steps", ",", "loss_fn", ",", "category", ",", "rand_init", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "if", "category", "==", "\"trades\"", ":", "\n", "        ", "x_adv", "=", "data", ".", "detach", "(", ")", "+", "0.001", "*", "torch", ".", "randn", "(", "data", ".", "shape", ")", ".", "cuda", "(", ")", ".", "detach", "(", ")", "if", "rand_init", "else", "data", ".", "detach", "(", ")", "\n", "\n", "", "if", "category", "==", "\"Madry\"", ":", "\n", "        ", "x_adv", "=", "data", ".", "detach", "(", ")", "+", "torch", ".", "from_numpy", "(", "np", ".", "random", ".", "uniform", "(", "-", "epsilon", ",", "epsilon", ",", "data", ".", "shape", ")", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "if", "rand_init", "else", "data", ".", "detach", "(", ")", "\n", "x_adv", "=", "torch", ".", "clamp", "(", "x_adv", ",", "0.0", ",", "1.0", ")", "\n", "", "for", "k", "in", "range", "(", "num_steps", ")", ":", "\n", "        ", "x_adv", ".", "requires_grad_", "(", ")", "\n", "output", "=", "model", "(", "x_adv", ")", "\n", "MMD_output", "=", "MMDG", "(", "model_semantic", ",", "x_adv", ",", "data", ")", "\n", "loss_1", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "output", ",", "target", ")", "\n", "loss_2", "=", "MMD_output", "\n", "\n", "model", ".", "zero_grad", "(", ")", "\n", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "            ", "if", "loss_fn", "==", "\"cent\"", ":", "\n", "                ", "loss_adv", "=", "loss_1", "-", "loss_2", "\n", "\n", "", "", "loss_adv", ".", "backward", "(", ")", "\n", "eta", "=", "step_size", "*", "x_adv", ".", "grad", ".", "sign", "(", ")", "\n", "x_adv", "=", "x_adv", ".", "detach", "(", ")", "+", "eta", "\n", "x_adv", "=", "torch", ".", "min", "(", "torch", ".", "max", "(", "x_adv", ",", "data", "-", "epsilon", ")", ",", "data", "+", "epsilon", ")", "\n", "x_adv", "=", "torch", ".", "clamp", "(", "x_adv", ",", "0.0", ",", "1.0", ")", "\n", "", "return", "x_adv", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.adaptive_examples_generator.pgd2": [[64, 88], ["model.eval", "range", "torch.clamp", "torch.clamp", "torch.clamp.requires_grad_", "adaptive_examples_generator.MMDG", "model.zero_grad", "loss_adv.backward", "torch.min", "torch.min", "torch.clamp", "torch.clamp", "data.detach", "data.detach", "torch.enable_grad", "torch.enable_grad", "torch.clamp.grad.sign", "torch.clamp.detach", "torch.max", "torch.max", "data.detach", "data.detach", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.randn().cuda().detach", "torch.randn().cuda().detach", "torch.from_numpy().float", "torch.from_numpy().float", "torch.randn().cuda", "torch.randn().cuda", "torch.from_numpy", "torch.from_numpy", "torch.randn", "torch.randn", "numpy.random.uniform"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.adaptive_examples_generator.MMDG"], ["", "def", "pgd2", "(", "model", ",", "model_semantic", ",", "data", ",", "target", ",", "epsilon", ",", "step_size", ",", "num_steps", ",", "loss_fn", ",", "category", ",", "rand_init", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "if", "category", "==", "\"trades\"", ":", "\n", "        ", "x_adv", "=", "data", ".", "detach", "(", ")", "+", "0.001", "*", "torch", ".", "randn", "(", "data", ".", "shape", ")", ".", "cuda", "(", ")", ".", "detach", "(", ")", "if", "rand_init", "else", "data", ".", "detach", "(", ")", "\n", "", "if", "category", "==", "\"Madry\"", ":", "\n", "        ", "x_adv", "=", "data", ".", "detach", "(", ")", "+", "torch", ".", "from_numpy", "(", "np", ".", "random", ".", "uniform", "(", "-", "epsilon", ",", "epsilon", ",", "data", ".", "shape", ")", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "if", "rand_init", "else", "data", ".", "detach", "(", ")", "\n", "x_adv", "=", "torch", ".", "clamp", "(", "x_adv", ",", "0.0", ",", "1.0", ")", "\n", "", "for", "k", "in", "range", "(", "num_steps", ")", ":", "\n", "        ", "x_adv", ".", "requires_grad_", "(", ")", "\n", "MMD_output", "=", "MMDG", "(", "model_semantic", ",", "x_adv", ",", "data", ")", "\n", "loss_2", "=", "MMD_output", "\n", "\n", "model", ".", "zero_grad", "(", ")", "\n", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "            ", "if", "loss_fn", "==", "\"cent\"", ":", "\n", "                ", "loss_adv", "=", "-", "loss_2", "\n", "\n", "", "", "loss_adv", ".", "backward", "(", ")", "\n", "eta", "=", "step_size", "*", "x_adv", ".", "grad", ".", "sign", "(", ")", "\n", "x_adv", "=", "x_adv", ".", "detach", "(", ")", "+", "eta", "\n", "x_adv", "=", "torch", ".", "min", "(", "torch", ".", "max", "(", "x_adv", ",", "data", "-", "epsilon", ")", ",", "data", "+", "epsilon", ")", "\n", "x_adv", "=", "torch", ".", "clamp", "(", "x_adv", ",", "0.0", ",", "1.0", ")", "\n", "", "return", "x_adv", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.adaptive_examples_generator.co_adaptive_generate": [[90, 103], ["model.eval", "torch.enable_grad", "torch.enable_grad", "adaptive_examples_generator.pgd1", "data.cuda", "target.cuda", "pgd1.clone().cpu", "torch.cat", "torch.cat", "pgd1.clone", "pgd1.clone().cpu", "pgd1.clone"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.adaptive_examples_generator.pgd1"], ["", "def", "co_adaptive_generate", "(", "model", ",", "model_semantic", ",", "test_loader", ",", "perturb_steps", ",", "epsilon", ",", "step_size", ",", "loss_fn", ",", "category", ",", "rand_init", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "bool_i", "=", "0", "\n", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "x_adv", "=", "pgd1", "(", "model", ",", "model_semantic", ",", "data", ",", "target", ",", "epsilon", ",", "step_size", ",", "perturb_steps", ",", "loss_fn", ",", "category", ",", "rand_init", "=", "rand_init", ")", "\n", "if", "bool_i", "==", "0", ":", "\n", "                ", "X_adv", "=", "x_adv", ".", "clone", "(", ")", ".", "cpu", "(", ")", "\n", "", "else", ":", "\n", "                ", "X_adv", "=", "torch", ".", "cat", "(", "(", "X_adv", ",", "x_adv", ".", "clone", "(", ")", ".", "cpu", "(", ")", ")", ",", "0", ")", "\n", "", "bool_i", "+=", "1", "\n", "", "", "return", "X_adv", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.adaptive_examples_generator.adaptive_generate": [[104, 117], ["model.eval", "torch.enable_grad", "torch.enable_grad", "adaptive_examples_generator.pgd2", "data.cuda", "target.cuda", "pgd2.clone().cpu", "torch.cat", "torch.cat", "pgd2.clone", "pgd2.clone().cpu", "pgd2.clone"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.adv.adaptive_examples_generator.pgd2"], ["", "def", "adaptive_generate", "(", "model", ",", "model_semantic", ",", "test_loader", ",", "perturb_steps", ",", "epsilon", ",", "step_size", ",", "loss_fn", ",", "category", ",", "rand_init", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "bool_i", "=", "0", "\n", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "x_adv", "=", "pgd2", "(", "model", ",", "model_semantic", ",", "data", ",", "target", ",", "epsilon", ",", "step_size", ",", "perturb_steps", ",", "loss_fn", ",", "category", ",", "rand_init", "=", "rand_init", ")", "\n", "if", "bool_i", "==", "0", ":", "\n", "                ", "X_adv", "=", "x_adv", ".", "clone", "(", ")", ".", "cpu", "(", ")", "\n", "", "else", ":", "\n", "                ", "X_adv", "=", "torch", ".", "cat", "(", "(", "X_adv", ",", "x_adv", ".", "clone", "(", ")", ".", "cpu", "(", ")", ")", ",", "0", ")", "\n", "", "bool_i", "+=", "1", "\n", "", "", "return", "X_adv", "\n", "", ""]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.mobilenet.Block.__init__": [[15, 21], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.Wide_ResNet_Madry.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "in_planes", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.mobilenet.Block.forward": [[22, 26], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "mobilenet.Block.bn1", "mobilenet.Block.bn2", "mobilenet.Block.conv1", "mobilenet.Block.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.mobilenet.MobileNet.__init__": [[32, 38], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "mobilenet.MobileNet._make_layers", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.Wide_ResNet_Madry.__init__", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.vgg.VGG._make_layers"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "MobileNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "layers", "=", "self", ".", "_make_layers", "(", "in_planes", "=", "32", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "1024", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.mobilenet.MobileNet._make_layers": [[39, 47], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "isinstance", "isinstance", "mobilenet.Block"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "in_planes", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "x", "in", "self", ".", "cfg", ":", "\n", "            ", "out_planes", "=", "x", "if", "isinstance", "(", "x", ",", "int", ")", "else", "x", "[", "0", "]", "\n", "stride", "=", "1", "if", "isinstance", "(", "x", ",", "int", ")", "else", "x", "[", "1", "]", "\n", "layers", ".", "append", "(", "Block", "(", "in_planes", ",", "out_planes", ",", "stride", ")", ")", "\n", "in_planes", "=", "out_planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.mobilenet.MobileNet.forward": [[48, 55], ["torch.relu", "torch.relu", "torch.relu", "mobilenet.MobileNet.layers", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "mobilenet.MobileNet.view", "mobilenet.MobileNet.linear", "mobilenet.MobileNet.bn1", "mobilenet.MobileNet.size", "mobilenet.MobileNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layers", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "2", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.mobilenet.test": [[57, 62], ["mobilenet.MobileNet", "torch.randn", "torch.randn", "torch.randn", "MobileNet.", "print", "torch.autograd.Variable", "net.size"], "function", ["None"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "MobileNet", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "Variable", "(", "x", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.vgg.VGG.__init__": [[16, 20], ["torch.Module.__init__", "vgg.VGG._make_layers", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.Wide_ResNet_Madry.__init__", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.vgg.VGG._make_layers"], ["    ", "def", "__init__", "(", "self", ",", "vgg_name", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "self", ".", "_make_layers", "(", "cfg", "[", "vgg_name", "]", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "512", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.vgg.VGG.forward": [[21, 26], ["vgg.VGG.features", "vgg.VGG.view", "vgg.VGG.classifier", "vgg.VGG.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "features", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.vgg.VGG._make_layers": [[27, 40], ["torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "x", "in", "cfg", ":", "\n", "            ", "if", "x", "==", "'M'", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "in_channels", ",", "x", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "x", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "in_channels", "=", "x", "\n", "", "", "layers", "+=", "[", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "]", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.lenet.LeNet.__init__": [[6, 13], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.Wide_ResNet_Madry.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "LeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "6", ",", "5", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "6", ",", "16", ",", "5", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "16", "*", "5", "*", "5", ",", "120", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "120", ",", "84", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "84", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.lenet.LeNet.forward": [[14, 24], ["torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "lenet.LeNet.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lenet.LeNet.fc3", "lenet.LeNet.conv1", "lenet.LeNet.conv2", "lenet.LeNet.size", "lenet.LeNet.fc1", "lenet.LeNet.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "out", "=", "F", ".", "max_pool2d", "(", "out", ",", "2", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "max_pool2d", "(", "out", ",", "2", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "fc3", "(", "out", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.dpn.Bottleneck.__init__": [[10, 27], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.Wide_ResNet_Madry.__init__"], ["    ", "def", "__init__", "(", "self", ",", "last_planes", ",", "in_planes", ",", "out_planes", ",", "dense_depth", ",", "stride", ",", "first_layer", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_planes", "=", "out_planes", "\n", "self", ".", "dense_depth", "=", "dense_depth", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "last_planes", ",", "in_planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "32", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", "+", "dense_depth", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", "+", "dense_depth", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "first_layer", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "last_planes", ",", "out_planes", "+", "dense_depth", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", "+", "dense_depth", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.dpn.Bottleneck.forward": [[29, 38], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "dpn.Bottleneck.bn3", "dpn.Bottleneck.shortcut", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "dpn.Bottleneck.bn1", "dpn.Bottleneck.bn2", "dpn.Bottleneck.conv3", "dpn.Bottleneck.conv1", "dpn.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "x", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "d", "=", "self", ".", "out_planes", "\n", "out", "=", "torch", ".", "cat", "(", "[", "x", "[", ":", ",", ":", "d", ",", ":", ",", ":", "]", "+", "out", "[", ":", ",", ":", "d", ",", ":", ",", ":", "]", ",", "x", "[", ":", ",", "d", ":", ",", ":", ",", ":", "]", ",", "out", "[", ":", ",", "d", ":", ",", ":", ",", ":", "]", "]", ",", "1", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.dpn.DPN.__init__": [[41, 54], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "dpn.DPN._make_layer", "dpn.DPN._make_layer", "dpn.DPN._make_layer", "dpn.DPN._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.Wide_ResNet_Madry.__init__", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.NetworkBlock._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "DPN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "in_planes", ",", "out_planes", "=", "cfg", "[", "'in_planes'", "]", ",", "cfg", "[", "'out_planes'", "]", "\n", "num_blocks", ",", "dense_depth", "=", "cfg", "[", "'num_blocks'", "]", ",", "cfg", "[", "'dense_depth'", "]", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "last_planes", "=", "64", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "in_planes", "[", "0", "]", ",", "out_planes", "[", "0", "]", ",", "num_blocks", "[", "0", "]", ",", "dense_depth", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "in_planes", "[", "1", "]", ",", "out_planes", "[", "1", "]", ",", "num_blocks", "[", "1", "]", ",", "dense_depth", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "in_planes", "[", "2", "]", ",", "out_planes", "[", "2", "]", ",", "num_blocks", "[", "2", "]", ",", "dense_depth", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "in_planes", "[", "3", "]", ",", "out_planes", "[", "3", "]", ",", "num_blocks", "[", "3", "]", ",", "dense_depth", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "out_planes", "[", "3", "]", "+", "(", "num_blocks", "[", "3", "]", "+", "1", ")", "*", "dense_depth", "[", "3", "]", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.dpn.DPN._make_layer": [[55, 62], ["enumerate", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "dpn.Bottleneck"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "in_planes", ",", "out_planes", ",", "num_blocks", ",", "dense_depth", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "i", ",", "stride", "in", "enumerate", "(", "strides", ")", ":", "\n", "            ", "layers", ".", "append", "(", "Bottleneck", "(", "self", ".", "last_planes", ",", "in_planes", ",", "out_planes", ",", "dense_depth", ",", "stride", ",", "i", "==", "0", ")", ")", "\n", "self", ".", "last_planes", "=", "out_planes", "+", "(", "i", "+", "2", ")", "*", "dense_depth", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.dpn.DPN.forward": [[63, 73], ["torch.relu", "torch.relu", "torch.relu", "dpn.DPN.layer1", "dpn.DPN.layer2", "dpn.DPN.layer3", "dpn.DPN.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "dpn.DPN.view", "dpn.DPN.linear", "dpn.DPN.bn1", "dpn.DPN.size", "dpn.DPN.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.dpn.DPN26": [[75, 83], ["dpn.DPN"], "function", ["None"], ["", "", "def", "DPN26", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'in_planes'", ":", "(", "96", ",", "192", ",", "384", ",", "768", ")", ",", "\n", "'out_planes'", ":", "(", "256", ",", "512", ",", "1024", ",", "2048", ")", ",", "\n", "'num_blocks'", ":", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "'dense_depth'", ":", "(", "16", ",", "32", ",", "24", ",", "128", ")", "\n", "}", "\n", "return", "DPN", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.dpn.DPN92": [[84, 92], ["dpn.DPN"], "function", ["None"], ["", "def", "DPN92", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'in_planes'", ":", "(", "96", ",", "192", ",", "384", ",", "768", ")", ",", "\n", "'out_planes'", ":", "(", "256", ",", "512", ",", "1024", ",", "2048", ")", ",", "\n", "'num_blocks'", ":", "(", "3", ",", "4", ",", "20", ",", "3", ")", ",", "\n", "'dense_depth'", ":", "(", "16", ",", "32", ",", "24", ",", "128", ")", "\n", "}", "\n", "return", "DPN", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.dpn.test": [[94, 99], ["dpn.DPN92", "torch.autograd.Variable", "DPN92.", "print", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.dpn.DPN92"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "DPN92", "(", ")", "\n", "x", "=", "Variable", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.shufflenet.ShuffleBlock.__init__": [[13, 16], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.Wide_ResNet_Madry.__init__"], ["    ", "def", "__init__", "(", "self", ",", "groups", ")", ":", "\n", "        ", "super", "(", "ShuffleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "groups", "=", "groups", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.shufflenet.ShuffleBlock.forward": [[17, 22], ["x.size", "x.view().permute().contiguous().view", "x.view().permute().contiguous", "x.view().permute", "x.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''Channel shuffle: [N,C,H,W] -> [N,g,C/g,H,W] -> [N,C/g,g,H,w] -> [N,C,H,W]'''", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "g", "=", "self", ".", "groups", "\n", "return", "x", ".", "view", "(", "N", ",", "g", ",", "C", "/", "g", ",", "H", ",", "W", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", ".", "contiguous", "(", ")", ".", "view", "(", "N", ",", "C", ",", "H", ",", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.shufflenet.Bottleneck.__init__": [[25, 42], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "shufflenet.ShuffleBlock", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.Wide_ResNet_Madry.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "groups", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "mid_planes", "=", "out_planes", "/", "4", "\n", "g", "=", "1", "if", "in_planes", "==", "24", "else", "groups", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "mid_planes", ",", "kernel_size", "=", "1", ",", "groups", "=", "g", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "mid_planes", ")", "\n", "self", ".", "shuffle1", "=", "ShuffleBlock", "(", "groups", "=", "g", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "mid_planes", ",", "mid_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "mid_planes", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "mid_planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "mid_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.shufflenet.Bottleneck.forward": [[43, 51], ["torch.relu", "torch.relu", "torch.relu", "shufflenet.Bottleneck.shuffle1", "torch.relu", "torch.relu", "torch.relu", "shufflenet.Bottleneck.bn3", "shufflenet.Bottleneck.shortcut", "shufflenet.Bottleneck.bn1", "shufflenet.Bottleneck.bn2", "shufflenet.Bottleneck.conv3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "shufflenet.Bottleneck.conv1", "shufflenet.Bottleneck.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "shuffle1", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "res", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "torch", ".", "cat", "(", "[", "out", ",", "res", "]", ",", "1", ")", ")", "if", "self", ".", "stride", "==", "2", "else", "F", ".", "relu", "(", "out", "+", "res", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.shufflenet.ShuffleNet.__init__": [[54, 67], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "shufflenet.ShuffleNet._make_layer", "shufflenet.ShuffleNet._make_layer", "shufflenet.ShuffleNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.Wide_ResNet_Madry.__init__", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.NetworkBlock._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "ShuffleNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "out_planes", "=", "cfg", "[", "'out_planes'", "]", "\n", "num_blocks", "=", "cfg", "[", "'num_blocks'", "]", "\n", "groups", "=", "cfg", "[", "'groups'", "]", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "24", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "24", ")", "\n", "self", ".", "in_planes", "=", "24", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "out_planes", "[", "0", "]", ",", "num_blocks", "[", "0", "]", ",", "groups", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "out_planes", "[", "1", "]", ",", "num_blocks", "[", "1", "]", ",", "groups", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "out_planes", "[", "2", "]", ",", "num_blocks", "[", "2", "]", ",", "groups", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "out_planes", "[", "2", "]", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.shufflenet.ShuffleNet._make_layer": [[68, 76], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "shufflenet.Bottleneck"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "out_planes", ",", "num_blocks", ",", "groups", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "stride", "=", "2", "if", "i", "==", "0", "else", "1", "\n", "cat_planes", "=", "self", ".", "in_planes", "if", "i", "==", "0", "else", "0", "\n", "layers", ".", "append", "(", "Bottleneck", "(", "self", ".", "in_planes", ",", "out_planes", "-", "cat_planes", ",", "stride", "=", "stride", ",", "groups", "=", "groups", ")", ")", "\n", "self", ".", "in_planes", "=", "out_planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.shufflenet.ShuffleNet.forward": [[77, 86], ["torch.relu", "torch.relu", "torch.relu", "shufflenet.ShuffleNet.layer1", "shufflenet.ShuffleNet.layer2", "shufflenet.ShuffleNet.layer3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "shufflenet.ShuffleNet.view", "shufflenet.ShuffleNet.linear", "shufflenet.ShuffleNet.bn1", "shufflenet.ShuffleNet.size", "shufflenet.ShuffleNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.shufflenet.ShuffleNetG2": [[88, 95], ["shufflenet.ShuffleNet"], "function", ["None"], ["", "", "def", "ShuffleNetG2", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'out_planes'", ":", "[", "200", ",", "400", ",", "800", "]", ",", "\n", "'num_blocks'", ":", "[", "4", ",", "8", ",", "4", "]", ",", "\n", "'groups'", ":", "2", "\n", "}", "\n", "return", "ShuffleNet", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.shufflenet.ShuffleNetG3": [[96, 103], ["shufflenet.ShuffleNet"], "function", ["None"], ["", "def", "ShuffleNetG3", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'out_planes'", ":", "[", "240", ",", "480", ",", "960", "]", ",", "\n", "'num_blocks'", ":", "[", "4", ",", "8", ",", "4", "]", ",", "\n", "'groups'", ":", "3", "\n", "}", "\n", "return", "ShuffleNet", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.shufflenet.test": [[105, 110], ["shufflenet.ShuffleNetG2", "torch.autograd.Variable", "ShuffleNetG2.", "print", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.shufflenet.ShuffleNetG2"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "ShuffleNetG2", "(", ")", "\n", "x", "=", "Variable", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.small_cnn.SmallCNN.__init__": [[7, 32], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.Wide_ResNet_Madry.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SmallCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "block1_conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "block1_conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "block1_pool1", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", "\n", "self", ".", "batchnorm1_1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "batchnorm1_2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "\n", "self", ".", "block2_conv1", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "block2_conv2", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "block2_pool1", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", "\n", "self", ".", "batchnorm2_1", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "batchnorm2_2", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "\n", "self", ".", "block3_conv1", "=", "nn", ".", "Conv2d", "(", "128", ",", "196", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "block3_conv2", "=", "nn", ".", "Conv2d", "(", "196", ",", "196", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "block3_pool1", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", "\n", "self", ".", "batchnorm3_1", "=", "nn", ".", "BatchNorm2d", "(", "196", ")", "\n", "self", ".", "batchnorm3_2", "=", "nn", ".", "BatchNorm2d", "(", "196", ")", "\n", "\n", "self", ".", "activ", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "196", "*", "4", "*", "4", ",", "256", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "256", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.small_cnn.SmallCNN.forward": [[33, 66], ["small_cnn.SmallCNN.block1_conv1", "small_cnn.SmallCNN.batchnorm1_1", "small_cnn.SmallCNN.activ", "small_cnn.SmallCNN.block1_conv2", "small_cnn.SmallCNN.batchnorm1_2", "small_cnn.SmallCNN.activ", "small_cnn.SmallCNN.block1_pool1", "small_cnn.SmallCNN.block2_conv1", "small_cnn.SmallCNN.batchnorm2_1", "small_cnn.SmallCNN.activ", "small_cnn.SmallCNN.block2_conv2", "small_cnn.SmallCNN.batchnorm2_2", "small_cnn.SmallCNN.activ", "small_cnn.SmallCNN.block2_pool1", "small_cnn.SmallCNN.block3_conv1", "small_cnn.SmallCNN.batchnorm3_1", "small_cnn.SmallCNN.activ", "small_cnn.SmallCNN.block3_conv2", "small_cnn.SmallCNN.batchnorm3_2", "small_cnn.SmallCNN.activ", "small_cnn.SmallCNN.block3_pool1", "small_cnn.SmallCNN.view", "small_cnn.SmallCNN.fc1", "small_cnn.SmallCNN.activ", "small_cnn.SmallCNN.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#block1", "\n", "        ", "x", "=", "self", ".", "block1_conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "batchnorm1_1", "(", "x", ")", "\n", "x", "=", "self", ".", "activ", "(", "x", ")", "\n", "x", "=", "self", ".", "block1_conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "batchnorm1_2", "(", "x", ")", "\n", "x", "=", "self", ".", "activ", "(", "x", ")", "\n", "x", "=", "self", ".", "block1_pool1", "(", "x", ")", "\n", "\n", "#block2", "\n", "x", "=", "self", ".", "block2_conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "batchnorm2_1", "(", "x", ")", "\n", "x", "=", "self", ".", "activ", "(", "x", ")", "\n", "x", "=", "self", ".", "block2_conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "batchnorm2_2", "(", "x", ")", "\n", "x", "=", "self", ".", "activ", "(", "x", ")", "\n", "x", "=", "self", ".", "block2_pool1", "(", "x", ")", "\n", "#block3", "\n", "x", "=", "self", ".", "block3_conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "batchnorm3_1", "(", "x", ")", "\n", "x", "=", "self", ".", "activ", "(", "x", ")", "\n", "x", "=", "self", ".", "block3_conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "batchnorm3_2", "(", "x", ")", "\n", "x", "=", "self", ".", "activ", "(", "x", ")", "\n", "x", "=", "self", ".", "block3_pool1", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "196", "*", "4", "*", "4", ")", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "activ", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.small_cnn.small_cnn": [[67, 69], ["small_cnn.SmallCNN"], "function", ["None"], ["", "", "def", "small_cnn", "(", ")", ":", "\n", "    ", "return", "SmallCNN", "(", ")", "\n", "", "def", "test", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.small_cnn.test": [[69, 74], ["small_cnn.small_cnn", "small_cnn.", "print", "print", "torch.autograd.Variable", "net.size", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.small_cnn.small_cnn"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "small_cnn", "(", ")", "\n", "y", "=", "net", "(", "Variable", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "print", "(", "net", ")", "", "", ""]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wide_resnet.BasicBlock.__init__": [[8, 22], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.Wide_ResNet_Madry.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "droprate", "=", "dropRate", "\n", "self", ".", "equalInOut", "=", "(", "in_planes", "==", "out_planes", ")", "\n", "self", ".", "convShortcut", "=", "(", "not", "self", ".", "equalInOut", ")", "and", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "bias", "=", "False", ")", "or", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wide_resnet.BasicBlock.forward": [[23, 33], ["wide_resnet.BasicBlock.relu2", "wide_resnet.BasicBlock.conv2", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "wide_resnet.BasicBlock.relu1", "wide_resnet.BasicBlock.relu1", "wide_resnet.BasicBlock.bn2", "torch.dropout", "torch.dropout", "torch.dropout", "wide_resnet.BasicBlock.bn1", "wide_resnet.BasicBlock.bn1", "wide_resnet.BasicBlock.conv1", "wide_resnet.BasicBlock.convShortcut"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "equalInOut", ":", "\n", "            ", "x", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "out", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv1", "(", "out", "if", "self", ".", "equalInOut", "else", "x", ")", ")", ")", "\n", "if", "self", ".", "droprate", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "droprate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "return", "torch", ".", "add", "(", "x", "if", "self", ".", "equalInOut", "else", "self", ".", "convShortcut", "(", "x", ")", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wide_resnet.NetworkBlock.__init__": [[36, 39], ["torch.Module.__init__", "wide_resnet.NetworkBlock._make_layer"], "methods", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.Wide_ResNet_Madry.__init__", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.NetworkBlock._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "nb_layers", ",", "in_planes", ",", "out_planes", ",", "block", ",", "stride", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "NetworkBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "self", ".", "_make_layer", "(", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wide_resnet.NetworkBlock._make_layer": [[40, 45], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "int", "(", "nb_layers", ")", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "i", "==", "0", "and", "in_planes", "or", "out_planes", ",", "out_planes", ",", "i", "==", "0", "and", "stride", "or", "1", ",", "dropRate", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wide_resnet.NetworkBlock.forward": [[46, 48], ["wide_resnet.NetworkBlock.layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wide_resnet.Wide_ResNet.__init__": [[51, 83], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "wide_resnet.NetworkBlock", "wide_resnet.NetworkBlock", "wide_resnet.NetworkBlock", "wide_resnet.NetworkBlock", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "wide_resnet.Wide_ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.Wide_ResNet_Madry.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", "=", "34", ",", "num_classes", "=", "10", ",", "widen_factor", "=", "10", ",", "dropRate", "=", "0", ")", ":", "\n", "        ", "super", "(", "Wide_ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nChannels", "=", "[", "16", ",", "16", "*", "widen_factor", ",", "32", "*", "widen_factor", ",", "64", "*", "widen_factor", "]", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", "\n", "n", "=", "(", "depth", "-", "4", ")", "/", "6", "\n", "block", "=", "BasicBlock", "\n", "# 1st conv before any network block", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "nChannels", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "# 1st block", "\n", "self", ".", "block1", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "0", "]", ",", "nChannels", "[", "1", "]", ",", "block", ",", "1", ",", "dropRate", ")", "\n", "# 1st sub-block", "\n", "self", ".", "sub_block1", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "0", "]", ",", "nChannels", "[", "1", "]", ",", "block", ",", "1", ",", "dropRate", ")", "\n", "# 2nd block", "\n", "self", ".", "block2", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "1", "]", ",", "nChannels", "[", "2", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "# 3rd block", "\n", "self", ".", "block3", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "2", "]", ",", "nChannels", "[", "3", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "# global average pooling and classifier", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nChannels", "[", "3", "]", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "nChannels", "[", "3", "]", ",", "num_classes", ")", "\n", "self", ".", "nChannels", "=", "nChannels", "[", "3", "]", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wide_resnet.Wide_ResNet.forward": [[84, 93], ["wide_resnet.Wide_ResNet.conv1", "wide_resnet.Wide_ResNet.block1", "wide_resnet.Wide_ResNet.block2", "wide_resnet.Wide_ResNet.block3", "wide_resnet.Wide_ResNet.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "out.view.view.view", "wide_resnet.Wide_ResNet.fc", "wide_resnet.Wide_ResNet.bn1"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "block1", "(", "out", ")", "\n", "out", "=", "self", ".", "block2", "(", "out", ")", "\n", "out", "=", "self", ".", "block3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "self", ".", "nChannels", ")", "\n", "return", "self", ".", "fc", "(", "out", ")", "\n", "", "", "def", "test", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wide_resnet.test": [[93, 98], ["wide_resnet.Wide_ResNet", "Wide_ResNet.", "print", "torch.autograd.Variable", "torch.randn", "torch.randn", "torch.randn"], "function", ["None"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "Wide_ResNet", "(", ")", "\n", "y", "=", "net", "(", "Variable", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", ")", "\n", "#print(y.size())", "\n", "print", "(", "net", ")", "\n", "# test()", ""]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.resnet.BasicBlock.__init__": [[12, 24], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.Wide_ResNet_Madry.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.resnet.BasicBlock.forward": [[26, 32], ["torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn2", "resnet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn1", "resnet.BasicBlock.conv2", "resnet.BasicBlock.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.resnet.Bottleneck.__init__": [[37, 51], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.Wide_ResNet_Madry.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.resnet.Bottleneck.forward": [[53, 60], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn3", "resnet.Bottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn1", "resnet.Bottleneck.bn2", "resnet.Bottleneck.conv3", "resnet.Bottleneck.conv1", "resnet.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.resnet.ResNet.__init__": [[63, 74], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.Wide_ResNet_Madry.__init__", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.NetworkBlock._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.resnet.ResNet._make_layer": [[75, 82], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.resnet.ResNet.forward": [[83, 93], ["torch.relu", "torch.relu", "torch.relu", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet.ResNet.view", "resnet.ResNet.linear", "resnet.ResNet.bn1", "resnet.ResNet.size", "resnet.ResNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.resnet.ResNet18": [[95, 97], ["resnet.ResNet"], "function", ["None"], ["", "", "def", "ResNet18", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.resnet.ResNet34": [[98, 100], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet34", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.senet.BasicBlock.__init__": [[13, 30], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.Wide_ResNet_Madry.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", ")", "\n", "\n", "# SE layers", "\n", "", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "//", "16", ",", "kernel_size", "=", "1", ")", "# Use nn.Conv2d instead of nn.Linear", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "planes", "//", "16", ",", "planes", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.senet.BasicBlock.forward": [[31, 45], ["torch.relu", "torch.relu", "torch.relu", "senet.BasicBlock.bn2", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "senet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "senet.BasicBlock.bn1", "senet.BasicBlock.conv2", "torch.relu.size", "senet.BasicBlock.fc1", "senet.BasicBlock.fc2", "senet.BasicBlock.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "\n", "# Squeeze", "\n", "w", "=", "F", ".", "avg_pool2d", "(", "out", ",", "out", ".", "size", "(", "2", ")", ")", "\n", "w", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "w", ")", ")", "\n", "w", "=", "F", ".", "sigmoid", "(", "self", ".", "fc2", "(", "w", ")", ")", "\n", "# Excitation", "\n", "out", "=", "out", "*", "w", "# New broadcasting feature from v0.2!", "\n", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.senet.PreActBlock.__init__": [[48, 63], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.Wide_ResNet_Madry.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n", "\n", "# SE layers", "\n", "", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "//", "16", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "planes", "//", "16", ",", "planes", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.senet.PreActBlock.forward": [[64, 79], ["torch.relu", "torch.relu", "torch.relu", "senet.PreActBlock.conv1", "senet.PreActBlock.conv2", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "senet.PreActBlock.bn1", "hasattr", "senet.PreActBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "senet.PreActBlock.size", "senet.PreActBlock.fc1", "senet.PreActBlock.fc2", "senet.PreActBlock.bn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "\n", "# Squeeze", "\n", "w", "=", "F", ".", "avg_pool2d", "(", "out", ",", "out", ".", "size", "(", "2", ")", ")", "\n", "w", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "w", ")", ")", "\n", "w", "=", "F", ".", "sigmoid", "(", "self", ".", "fc2", "(", "w", ")", ")", "\n", "# Excitation", "\n", "out", "=", "out", "*", "w", "\n", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.senet.SENet.__init__": [[82, 93], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "senet.SENet._make_layer", "senet.SENet._make_layer", "senet.SENet._make_layer", "senet.SENet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.Wide_ResNet_Madry.__init__", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.NetworkBlock._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "SENet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.senet.SENet._make_layer": [[94, 101], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.senet.SENet.forward": [[102, 112], ["torch.relu", "torch.relu", "torch.relu", "senet.SENet.layer1", "senet.SENet.layer2", "senet.SENet.layer3", "senet.SENet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "senet.SENet.view", "senet.SENet.linear", "senet.SENet.bn1", "senet.SENet.size", "senet.SENet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.senet.SENet18": [[114, 116], ["senet.SENet"], "function", ["None"], ["", "", "def", "SENet18", "(", ")", ":", "\n", "    ", "return", "SENet", "(", "PreActBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.senet.test": [[118, 123], ["senet.SENet18", "SENet18.", "print", "print", "torch.autograd.Variable", "net.size", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.senet.SENet18"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "SENet18", "(", ")", "\n", "y", "=", "net", "(", "Variable", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "print", "(", "net", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.semantic_resnet.BasicBlock.__init__": [[11, 23], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.Wide_ResNet_Madry.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.semantic_resnet.BasicBlock.forward": [[25, 31], ["torch.relu", "torch.relu", "torch.relu", "semantic_resnet.BasicBlock.bn2", "semantic_resnet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "semantic_resnet.BasicBlock.bn1", "semantic_resnet.BasicBlock.conv2", "semantic_resnet.BasicBlock.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.semantic_resnet.Bottleneck.__init__": [[36, 50], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.Wide_ResNet_Madry.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.semantic_resnet.Bottleneck.forward": [[52, 59], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "semantic_resnet.Bottleneck.bn3", "semantic_resnet.Bottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "semantic_resnet.Bottleneck.bn1", "semantic_resnet.Bottleneck.bn2", "semantic_resnet.Bottleneck.conv3", "semantic_resnet.Bottleneck.conv1", "semantic_resnet.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.semantic_resnet.semantic_ResNet.__init__": [[62, 73], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "semantic_resnet.semantic_ResNet._make_layer", "semantic_resnet.semantic_ResNet._make_layer", "semantic_resnet.semantic_ResNet._make_layer", "semantic_resnet.semantic_ResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.Wide_ResNet_Madry.__init__", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.NetworkBlock._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "semantic_ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.semantic_resnet.semantic_ResNet._make_layer": [[74, 81], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.semantic_resnet.semantic_ResNet.forward": [[82, 91], ["torch.relu", "torch.relu", "torch.relu", "semantic_resnet.semantic_ResNet.layer1", "semantic_resnet.semantic_ResNet.layer2", "semantic_resnet.semantic_ResNet.layer3", "semantic_resnet.semantic_ResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "out.view.view.view", "semantic_resnet.semantic_ResNet.bn1", "out.view.view.size", "semantic_resnet.semantic_ResNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.semantic_resnet.semantic_ResNet18": [[93, 95], ["semantic_resnet.semantic_ResNet"], "function", ["None"], ["", "", "def", "semantic_ResNet18", "(", ")", ":", "\n", "    ", "return", "semantic_ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.densenet.Bottleneck.__init__": [[12, 18], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.Wide_ResNet_Madry.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "growth_rate", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ",", "momentum", "=", "0.2", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "4", "*", "growth_rate", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "4", "*", "growth_rate", ",", "momentum", "=", "0.2", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "4", "*", "growth_rate", ",", "growth_rate", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.densenet.Bottleneck.forward": [[19, 24], ["densenet.Bottleneck.conv1", "densenet.Bottleneck.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "densenet.Bottleneck.bn1", "densenet.Bottleneck.bn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "x", "]", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.densenet.Transition.__init__": [[27, 31], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.Wide_ResNet_Madry.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ")", ":", "\n", "        ", "super", "(", "Transition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ",", "momentum", "=", "0.2", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.densenet.Transition.forward": [[32, 36], ["densenet.Transition.conv", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "densenet.Transition.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "F", ".", "relu", "(", "self", ".", "bn", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "2", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.densenet.DenseNet.__init__": [[39, 69], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "densenet.DenseNet._make_dense_layers", "int", "densenet.Transition", "densenet.DenseNet._make_dense_layers", "int", "densenet.Transition", "densenet.DenseNet._make_dense_layers", "int", "densenet.Transition", "densenet.DenseNet._make_dense_layers", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "math.floor", "math.floor", "math.floor"], "methods", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.Wide_ResNet_Madry.__init__", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.densenet.DenseNet._make_dense_layers", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.densenet.DenseNet._make_dense_layers", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.densenet.DenseNet._make_dense_layers", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.densenet.DenseNet._make_dense_layers"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "nblocks", ",", "growth_rate", "=", "12", ",", "reduction", "=", "0.2", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "DenseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "growth_rate", "=", "growth_rate", "\n", "\n", "num_planes", "=", "2", "*", "growth_rate", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "num_planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "dense1", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "0", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "0", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n", "self", ".", "trans1", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n", "\n", "self", ".", "dense2", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "1", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "1", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n", "self", ".", "trans2", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n", "\n", "self", ".", "dense3", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "2", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "2", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n", "self", ".", "trans3", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n", "\n", "self", ".", "dense4", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "3", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "3", "]", "*", "growth_rate", "\n", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "num_planes", ",", "momentum", "=", "0.2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "num_planes", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.densenet.DenseNet._make_dense_layers": [[70, 76], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_dense_layers", "(", "self", ",", "block", ",", "in_planes", ",", "nblock", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nblock", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "in_planes", ",", "self", ".", "growth_rate", ")", ")", "\n", "in_planes", "+=", "self", ".", "growth_rate", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.densenet.DenseNet.forward": [[77, 87], ["densenet.DenseNet.conv1", "densenet.DenseNet.trans1", "densenet.DenseNet.trans2", "densenet.DenseNet.trans3", "densenet.DenseNet.dense4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "densenet.DenseNet.view", "densenet.DenseNet.linear", "densenet.DenseNet.dense1", "densenet.DenseNet.dense2", "densenet.DenseNet.dense3", "torch.relu", "torch.relu", "torch.relu", "densenet.DenseNet.size", "densenet.DenseNet.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "trans1", "(", "self", ".", "dense1", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "trans2", "(", "self", ".", "dense2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "trans3", "(", "self", ".", "dense3", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "dense4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "F", ".", "relu", "(", "self", ".", "bn", "(", "out", ")", ")", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.densenet.DenseNet121": [[88, 90], ["densenet.DenseNet"], "function", ["None"], ["", "", "def", "DenseNet121", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "24", ",", "16", "]", ",", "growth_rate", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.densenet.DenseNet169": [[91, 93], ["densenet.DenseNet"], "function", ["None"], ["", "def", "DenseNet169", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "32", ",", "32", "]", ",", "growth_rate", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.densenet.DenseNet201": [[94, 96], ["densenet.DenseNet"], "function", ["None"], ["", "def", "DenseNet201", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "48", ",", "32", "]", ",", "growth_rate", "=", "48", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.densenet.DenseNet161": [[97, 99], ["densenet.DenseNet"], "function", ["None"], ["", "def", "DenseNet161", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "36", ",", "24", "]", ",", "growth_rate", "=", "48", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.densenet.densenet_cifar": [[100, 102], ["densenet.DenseNet"], "function", ["None"], ["", "def", "densenet_cifar", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "24", ",", "16", "]", ",", "growth_rate", "=", "12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.densenet.test_densenet": [[103, 109], ["densenet.densenet_cifar", "torch.randn", "torch.randn", "torch.randn", "densenet_cifar.", "print", "print", "torch.autograd.Variable"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.densenet.densenet_cifar"], ["", "def", "test_densenet", "(", ")", ":", "\n", "    ", "net", "=", "densenet_cifar", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "Variable", "(", "x", ")", ")", "\n", "print", "(", "y", ")", "\n", "print", "(", "net", ")", "\n", "#test_densenet()", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.resnext.Block.__init__": [[16, 31], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.Wide_ResNet_Madry.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "cardinality", "=", "32", ",", "bottleneck_width", "=", "4", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "group_width", "=", "cardinality", "*", "bottleneck_width", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "group_width", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "group_width", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "group_width", ",", "group_width", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "cardinality", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "group_width", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "group_width", ",", "self", ".", "expansion", "*", "group_width", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "group_width", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "group_width", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "group_width", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "group_width", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.resnext.Block.forward": [[33, 40], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnext.Block.bn3", "resnext.Block.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnext.Block.bn1", "resnext.Block.bn2", "resnext.Block.conv3", "resnext.Block.conv1", "resnext.Block.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.resnext.ResNeXt.__init__": [[43, 56], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnext.ResNeXt._make_layer", "resnext.ResNeXt._make_layer", "resnext.ResNeXt._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.Wide_ResNet_Madry.__init__", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.NetworkBlock._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "num_blocks", ",", "cardinality", ",", "bottleneck_width", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNeXt", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cardinality", "=", "cardinality", "\n", "self", ".", "bottleneck_width", "=", "bottleneck_width", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "num_blocks", "[", "0", "]", ",", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "num_blocks", "[", "1", "]", ",", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "num_blocks", "[", "2", "]", ",", "2", ")", "\n", "# self.layer4 = self._make_layer(num_blocks[3], 2)", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "cardinality", "*", "bottleneck_width", "*", "8", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.resnext.ResNeXt._make_layer": [[57, 66], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "resnext.Block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "Block", "(", "self", ".", "in_planes", ",", "self", ".", "cardinality", ",", "self", ".", "bottleneck_width", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "Block", ".", "expansion", "*", "self", ".", "cardinality", "*", "self", ".", "bottleneck_width", "\n", "# Increase bottleneck_width by 2 after each stage.", "\n", "", "self", ".", "bottleneck_width", "*=", "2", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.resnext.ResNeXt.forward": [[67, 77], ["torch.relu", "torch.relu", "torch.relu", "resnext.ResNeXt.layer1", "resnext.ResNeXt.layer2", "resnext.ResNeXt.layer3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnext.ResNeXt.view", "resnext.ResNeXt.linear", "resnext.ResNeXt.bn1", "resnext.ResNeXt.size", "resnext.ResNeXt.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "# out = self.layer4(out)", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.resnext.ResNeXt29_2x64d": [[79, 81], ["resnext.ResNeXt"], "function", ["None"], ["", "", "def", "ResNeXt29_2x64d", "(", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "2", ",", "bottleneck_width", "=", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.resnext.ResNeXt29_4x64d": [[82, 84], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "ResNeXt29_4x64d", "(", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "4", ",", "bottleneck_width", "=", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.resnext.ResNeXt29_8x64d": [[85, 87], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "ResNeXt29_8x64d", "(", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "8", ",", "bottleneck_width", "=", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.resnext.ResNeXt29_32x4d": [[88, 90], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "ResNeXt29_32x4d", "(", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "32", ",", "bottleneck_width", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.resnext.test_resnext": [[91, 96], ["resnext.ResNeXt29_2x64d", "torch.randn", "torch.randn", "torch.randn", "ResNeXt29_2x64d.", "print", "torch.autograd.Variable", "net.size"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.resnext.ResNeXt29_2x64d"], ["", "def", "test_resnext", "(", ")", ":", "\n", "    ", "net", "=", "ResNeXt29_2x64d", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "Variable", "(", "x", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.googlenet.Inception.__init__": [[10, 48], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.Wide_ResNet_Madry.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "n1x1", ",", "n3x3red", ",", "n3x3", ",", "n5x5red", ",", "n5x5", ",", "pool_planes", ")", ":", "\n", "        ", "super", "(", "Inception", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# 1x1 conv branch", "\n", "self", ".", "b1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "n1x1", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n1x1", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "# 1x1 conv -> 3x3 conv branch", "\n", "self", ".", "b2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "n3x3red", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n3x3red", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n3x3red", ",", "n3x3", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n3x3", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "# 1x1 conv -> 5x5 conv branch", "\n", "self", ".", "b3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "n5x5red", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n5x5red", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n5x5red", ",", "n5x5", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n5x5", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n5x5", ",", "n5x5", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n5x5", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "# 3x3 pool -> 1x1 conv branch", "\n", "self", ".", "b4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "pool_planes", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "pool_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.googlenet.Inception.forward": [[50, 56], ["googlenet.Inception.b1", "googlenet.Inception.b2", "googlenet.Inception.b3", "googlenet.Inception.b4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y1", "=", "self", ".", "b1", "(", "x", ")", "\n", "y2", "=", "self", ".", "b2", "(", "x", ")", "\n", "y3", "=", "self", ".", "b3", "(", "x", ")", "\n", "y4", "=", "self", ".", "b4", "(", "x", ")", "\n", "return", "torch", ".", "cat", "(", "[", "y1", ",", "y2", ",", "y3", ",", "y4", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.googlenet.GoogLeNet.__init__": [[59, 83], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "googlenet.Inception", "googlenet.Inception", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.Wide_ResNet_Madry.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GoogLeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pre_layers", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "192", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "192", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "a3", "=", "Inception", "(", "192", ",", "64", ",", "96", ",", "128", ",", "16", ",", "32", ",", "32", ")", "\n", "self", ".", "b3", "=", "Inception", "(", "256", ",", "128", ",", "128", ",", "192", ",", "32", ",", "96", ",", "64", ")", "\n", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "a4", "=", "Inception", "(", "480", ",", "192", ",", "96", ",", "208", ",", "16", ",", "48", ",", "64", ")", "\n", "self", ".", "b4", "=", "Inception", "(", "512", ",", "160", ",", "112", ",", "224", ",", "24", ",", "64", ",", "64", ")", "\n", "self", ".", "c4", "=", "Inception", "(", "512", ",", "128", ",", "128", ",", "256", ",", "24", ",", "64", ",", "64", ")", "\n", "self", ".", "d4", "=", "Inception", "(", "512", ",", "112", ",", "144", ",", "288", ",", "32", ",", "64", ",", "64", ")", "\n", "self", ".", "e4", "=", "Inception", "(", "528", ",", "256", ",", "160", ",", "320", ",", "32", ",", "128", ",", "128", ")", "\n", "\n", "self", ".", "a5", "=", "Inception", "(", "832", ",", "256", ",", "160", ",", "320", ",", "32", ",", "128", ",", "128", ")", "\n", "self", ".", "b5", "=", "Inception", "(", "832", ",", "384", ",", "192", ",", "384", ",", "48", ",", "128", ",", "128", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ",", "stride", "=", "1", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "1024", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.googlenet.GoogLeNet.forward": [[84, 101], ["googlenet.GoogLeNet.pre_layers", "googlenet.GoogLeNet.a3", "googlenet.GoogLeNet.b3", "googlenet.GoogLeNet.maxpool", "googlenet.GoogLeNet.a4", "googlenet.GoogLeNet.b4", "googlenet.GoogLeNet.c4", "googlenet.GoogLeNet.d4", "googlenet.GoogLeNet.e4", "googlenet.GoogLeNet.maxpool", "googlenet.GoogLeNet.a5", "googlenet.GoogLeNet.b5", "googlenet.GoogLeNet.avgpool", "googlenet.GoogLeNet.view", "googlenet.GoogLeNet.linear", "googlenet.GoogLeNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "pre_layers", "(", "x", ")", "\n", "out", "=", "self", ".", "a3", "(", "out", ")", "\n", "out", "=", "self", ".", "b3", "(", "out", ")", "\n", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "out", "=", "self", ".", "a4", "(", "out", ")", "\n", "out", "=", "self", ".", "b4", "(", "out", ")", "\n", "out", "=", "self", ".", "c4", "(", "out", ")", "\n", "out", "=", "self", ".", "d4", "(", "out", ")", "\n", "out", "=", "self", ".", "e4", "(", "out", ")", "\n", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "out", "=", "self", ".", "a5", "(", "out", ")", "\n", "out", "=", "self", ".", "b5", "(", "out", ")", "\n", "out", "=", "self", ".", "avgpool", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.preact_resnet.PreActBlock.__init__": [[18, 28], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.Wide_ResNet_Madry.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.preact_resnet.PreActBlock.forward": [[30, 37], ["torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBlock.conv1", "preact_resnet.PreActBlock.conv2", "preact_resnet.PreActBlock.bn1", "hasattr", "preact_resnet.PreActBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBlock.bn2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.preact_resnet.PreActBottleneck.__init__": [[43, 55], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.Wide_ResNet_Madry.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.preact_resnet.PreActBottleneck.forward": [[57, 65], ["torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBottleneck.conv1", "preact_resnet.PreActBottleneck.conv2", "preact_resnet.PreActBottleneck.conv3", "preact_resnet.PreActBottleneck.bn1", "hasattr", "preact_resnet.PreActBottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBottleneck.bn2", "preact_resnet.PreActBottleneck.bn3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "conv3", "(", "F", ".", "relu", "(", "self", ".", "bn3", "(", "out", ")", ")", ")", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.preact_resnet.PreActResNet.__init__": [[68, 78], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "preact_resnet.PreActResNet._make_layer", "preact_resnet.PreActResNet._make_layer", "preact_resnet.PreActResNet._make_layer", "preact_resnet.PreActResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.Wide_ResNet_Madry.__init__", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.NetworkBlock._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "PreActResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.preact_resnet.PreActResNet._make_layer": [[79, 86], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.preact_resnet.PreActResNet.forward": [[87, 97], ["preact_resnet.PreActResNet.conv1", "preact_resnet.PreActResNet.layer1", "preact_resnet.PreActResNet.layer2", "preact_resnet.PreActResNet.layer3", "preact_resnet.PreActResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "preact_resnet.PreActResNet.view", "preact_resnet.PreActResNet.linear", "preact_resnet.PreActResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.preact_resnet.PreActResNet18": [[99, 101], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "", "def", "PreActResNet18", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.preact_resnet.PreActResNet34": [[102, 104], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet34", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.preact_resnet.PreActResNet50": [[105, 107], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet50", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.preact_resnet.PreActResNet101": [[108, 110], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet101", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.preact_resnet.PreActResNet152": [[111, 113], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet152", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.preact_resnet.test": [[115, 119], ["preact_resnet.PreActResNet18", "PreActResNet18.", "print", "torch.autograd.Variable", "net.size", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.preact_resnet.PreActResNet18"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "PreActResNet18", "(", ")", "\n", "y", "=", "net", "(", "Variable", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.BasicBlock.__init__": [[8, 22], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.Wide_ResNet_Madry.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "droprate", "=", "dropRate", "\n", "self", ".", "equalInOut", "=", "(", "in_planes", "==", "out_planes", ")", "\n", "self", ".", "convShortcut", "=", "(", "not", "self", ".", "equalInOut", ")", "and", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "bias", "=", "False", ")", "or", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.BasicBlock.forward": [[23, 33], ["wrn_madry.BasicBlock.relu2", "wrn_madry.BasicBlock.conv2", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "wrn_madry.BasicBlock.relu1", "wrn_madry.BasicBlock.relu1", "wrn_madry.BasicBlock.bn2", "torch.dropout", "torch.dropout", "torch.dropout", "wrn_madry.BasicBlock.bn1", "wrn_madry.BasicBlock.bn1", "wrn_madry.BasicBlock.conv1", "wrn_madry.BasicBlock.convShortcut"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "equalInOut", ":", "\n", "            ", "x", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "out", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv1", "(", "out", "if", "self", ".", "equalInOut", "else", "x", ")", ")", ")", "\n", "if", "self", ".", "droprate", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "droprate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "return", "torch", ".", "add", "(", "x", "if", "self", ".", "equalInOut", "else", "self", ".", "convShortcut", "(", "x", ")", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.NetworkBlock.__init__": [[36, 39], ["torch.Module.__init__", "wrn_madry.NetworkBlock._make_layer"], "methods", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.Wide_ResNet_Madry.__init__", "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.NetworkBlock._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "nb_layers", ",", "in_planes", ",", "out_planes", ",", "block", ",", "stride", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "NetworkBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "self", ".", "_make_layer", "(", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.NetworkBlock._make_layer": [[40, 45], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "int", "(", "nb_layers", ")", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "i", "==", "0", "and", "in_planes", "or", "out_planes", ",", "out_planes", ",", "i", "==", "0", "and", "stride", "or", "1", ",", "dropRate", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.NetworkBlock.forward": [[46, 48], ["wrn_madry.NetworkBlock.layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.Wide_ResNet_Madry.__init__": [[51, 83], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "wrn_madry.NetworkBlock", "wrn_madry.NetworkBlock", "wrn_madry.NetworkBlock", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "wrn_madry.Wide_ResNet_Madry.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.Wide_ResNet_Madry.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", "=", "34", ",", "num_classes", "=", "10", ",", "widen_factor", "=", "10", ",", "dropRate", "=", "0", ")", ":", "\n", "        ", "super", "(", "Wide_ResNet_Madry", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nChannels", "=", "[", "16", ",", "16", "*", "widen_factor", ",", "32", "*", "widen_factor", ",", "64", "*", "widen_factor", "]", "\n", "assert", "(", "(", "depth", "-", "2", ")", "%", "6", "==", "0", ")", "\n", "n", "=", "(", "depth", "-", "2", ")", "/", "6", "\n", "block", "=", "BasicBlock", "\n", "# 1st conv before any network block", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "nChannels", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "# 1st block", "\n", "self", ".", "block1", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "0", "]", ",", "nChannels", "[", "1", "]", ",", "block", ",", "1", ",", "dropRate", ")", "\n", "# 1st sub-block", "\n", "# self.sub_block1 = NetworkBlock(n, nChannels[0], nChannels[1], block, 1, dropRate)", "\n", "# 2nd block", "\n", "self", ".", "block2", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "1", "]", ",", "nChannels", "[", "2", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "# 3rd block", "\n", "self", ".", "block3", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "2", "]", ",", "nChannels", "[", "3", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "# global average pooling and classifier", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nChannels", "[", "3", "]", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "nChannels", "[", "3", "]", ",", "num_classes", ")", "\n", "self", ".", "nChannels", "=", "nChannels", "[", "3", "]", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.Wide_ResNet_Madry.forward": [[84, 93], ["wrn_madry.Wide_ResNet_Madry.conv1", "wrn_madry.Wide_ResNet_Madry.block1", "wrn_madry.Wide_ResNet_Madry.block2", "wrn_madry.Wide_ResNet_Madry.block3", "wrn_madry.Wide_ResNet_Madry.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "out.view.view.view", "wrn_madry.Wide_ResNet_Madry.fc", "wrn_madry.Wide_ResNet_Madry.bn1"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "block1", "(", "out", ")", "\n", "out", "=", "self", ".", "block2", "(", "out", ")", "\n", "out", "=", "self", ".", "block3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "self", ".", "nChannels", ")", "\n", "return", "self", ".", "fc", "(", "out", ")", "\n", "", "", "def", "test", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Sjtubrian_SAMMD.models.wrn_madry.test": [[93, 98], ["wrn_madry.Wide_ResNet_Madry", "Wide_ResNet_Madry.", "print", "torch.autograd.Variable", "torch.randn", "torch.randn", "torch.randn"], "function", ["None"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "Wide_ResNet_Madry", "(", ")", "\n", "y", "=", "net", "(", "Variable", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", ")", "\n", "#print(y.size())", "\n", "print", "(", "net", ")", "\n", "# test()", ""]]}