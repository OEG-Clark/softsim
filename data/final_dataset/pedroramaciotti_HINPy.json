{"home.repos.pwc.inspect_result.pedroramaciotti_HINPy.examples.recommender_systems.likes_func": [[12, 17], ["None"], "function", ["None"], ["def", "likes_func", "(", "x", ")", ":", "\n", "    ", "if", "x", "<", "3", ":", "\n", "        ", "return", "False", ";", "\n", "", "else", ":", "\n", "        ", "return", "True", ";", "\n", "", "", "hin", ".", "CreateLinkGroupFromLinkGroup", "(", "relation_name", "=", "'rates'", ",", "new_relation_name", "=", "'likes'", ",", "condition_method", "=", "likes_func", ")", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.FirstAbsentNumberInList": [[5, 9], ["range", "max"], "function", ["None"], ["def", "FirstAbsentNumberInList", "(", "input_list", ")", ":", "\n", "    ", "for", "id_candidate", "in", "range", "(", "max", "(", "input_list", ")", "+", "2", ")", ":", "\n", "        ", "if", "id_candidate", "not", "in", "input_list", ":", "\n", "            ", "return", "id_candidate", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.VerboseMessage": [[11, 15], ["print"], "function", ["None"], ["", "", "", "def", "VerboseMessage", "(", "verbose", ",", "message", ")", ":", "\n", "    ", "if", "verbose", ":", "\n", "        ", "print", "(", "message", ")", "\n", "", "return", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.ETSec2ETTime": [[16, 22], ["int", "divmod", "divmod", "int", "int", "int"], "function", ["None"], ["", "def", "ETSec2ETTime", "(", "s", ")", ":", "\n", "    ", "s", "=", "int", "(", "s", ")", "\n", "# days, remainder = divmod(s,3600*24)", "\n", "hours", ",", "remainder", "=", "divmod", "(", "s", ",", "3600", ")", "\n", "minutes", ",", "seconds", "=", "divmod", "(", "remainder", ",", "60", ")", "\n", "return", "'{:02}:{:02}:{:02}'", ".", "format", "(", "int", "(", "hours", ")", ",", "int", "(", "minutes", ")", ",", "int", "(", "seconds", ")", ")", ";", "\n", "", ""]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.__init__": [[28, 68], ["time.time.time", "hin_functions.CheckTable", "VerboseMessage", "time.time.time", "hin_class.HIN.ReBuildObjectGroupsFromTable", "VerboseMessage", "time.time.time", "hin_class.HIN.ReBuildLinkGroupsFromTable", "VerboseMessage", "time.time.time", "VerboseMessage", "pandas.read_csv", "VerboseMessage", "hin_class.HIN.table.relation.unique", "ValueError", "ETSec2ETTime", "ETSec2ETTime", "ETSec2ETTime", "hin_class.HIN.CreateInverseLinkGroup", "ETSec2ETTime", "time.time.time", "time.time.time", "time.time.time", "time.time.time"], "methods", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_functions.CheckTable", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.VerboseMessage", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.ReBuildObjectGroupsFromTable", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.VerboseMessage", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.ReBuildLinkGroupsFromTable", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.VerboseMessage", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.VerboseMessage", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.VerboseMessage", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.ETSec2ETTime", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.ETSec2ETTime", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.ETSec2ETTime", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.CreateInverseLinkGroup", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.ETSec2ETTime"], ["def", "__init__", "(", "self", ",", "filename", "=", "None", ",", "table", "=", "None", ",", "name", "=", "None", ",", "inverse_relations", "=", "True", ",", "\n", "verbose", "=", "False", ")", ":", "\n", "\n", "# If there is no table, create from file", "\n", "        ", "if", "table", "is", "None", ":", "\n", "            ", "if", "filename", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "'HIN object has to be created from a table or from a file.'", ")", "\n", "", "columns", "=", "[", "'relation'", ",", "\n", "'start_group'", ",", "'start_object'", ",", "\n", "'end_group'", ",", "'end_object'", ",", "\n", "'value'", ",", "'timestamp'", "]", "\n", "t", "=", "TCounter", "(", ")", "\n", "VerboseMessage", "(", "verbose", ",", "'Reading table from %s ...'", "%", "filename", ")", "\n", "table", "=", "pd", ".", "read_csv", "(", "filename", ",", "sep", "=", "','", ",", "header", "=", "None", ",", "names", "=", "columns", ",", "low_memory", "=", "False", ")", "\n", "VerboseMessage", "(", "verbose", ",", "'Table read in %s.'", "%", "ETSec2ETTime", "(", "TCounter", "(", ")", "-", "t", ")", ")", "\n", "# Cheking the table", "\n", "", "t", "=", "TCounter", "(", ")", "\n", "table", "=", "CheckTable", "(", "table", ")", "\n", "VerboseMessage", "(", "verbose", ",", "'Table checked in %s.'", "%", "ETSec2ETTime", "(", "TCounter", "(", ")", "-", "t", ")", ")", "\n", "\n", "# TODO: Aggregation of multi edges: None, Average, Sum", "\n", "\n", "# Filling the fields", "\n", "self", ".", "table", "=", "table", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "info", "=", "{", "}", "\n", "\n", "# Building Object and Link Groups from Table", "\n", "t", "=", "TCounter", "(", ")", "\n", "self", ".", "ReBuildObjectGroupsFromTable", "(", "verbose", ")", "\n", "VerboseMessage", "(", "verbose", ",", "'Object Groups built in %s.'", "%", "ETSec2ETTime", "(", "TCounter", "(", ")", "-", "t", ")", ")", "\n", "t", "=", "TCounter", "(", ")", "\n", "self", ".", "ReBuildLinkGroupsFromTable", "(", "verbose", ")", "\n", "VerboseMessage", "(", "verbose", ",", "'Link Groups built in %s.'", "%", "ETSec2ETTime", "(", "TCounter", "(", ")", "-", "t", ")", ")", "\n", "\n", "if", "inverse_relations", ":", "\n", "            ", "for", "relation_name", "in", "self", ".", "table", ".", "relation", ".", "unique", "(", ")", ":", "\n", "                ", "self", ".", "CreateInverseLinkGroup", "(", "relation_name", ",", "verbose", "=", "verbose", ")", "\n", "\n", "", "", "return", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.CreateLinkGroup": [[75, 104], ["ValueError", "hin_class.HIN.table[].copy", "hin_class.HIN.table.append().reset_index", "hin_class.HIN.GetNewLinkGroupID", "link_group_class.LinkGroup", "ValueError", "hin_class.HIN.table.append", "hin_class.HIN.GetLinkGroup", "hin_class.HIN.GetLinkGroup", "pandas.Timestamp", "pandas.Timestamp"], "methods", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetNewLinkGroupID", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroup", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroup"], ["", "def", "CreateLinkGroup", "(", "self", ",", "linkgroup", ",", "name", ",", "\n", "datetimes", "=", "None", ",", "\n", "condition", "=", "None", ",", "\n", "verbose", "=", "False", ")", ":", "\n", "        ", "if", "(", "datetimes", "!=", "None", "and", "condition", "!=", "None", ")", "or", "(", "datetimes", "==", "None", "and", "condition", "==", "None", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'To create a link group you have to provide datetime bounds or (XOR) a condition method.'", ")", "\n", "\n", "", "if", "datetimes", "!=", "None", ":", "\n", "# Get the group ids of the Link Group", "\n", "            ", "og_start", "=", "self", ".", "object_group_dic", "[", "self", ".", "GetLinkGroup", "(", "linkgroup", ")", ".", "start_id", "]", "\n", "og_end", "=", "self", ".", "object_group_dic", "[", "self", ".", "GetLinkGroup", "(", "linkgroup", ")", ".", "end_id", "]", "\n", "# Getting subtable of the Link Group", "\n", "subtable", "=", "self", ".", "table", "[", "self", ".", "table", ".", "relation", "==", "linkgroup", "]", ".", "copy", "(", "deep", "=", "True", ")", "\n", "# Applyting the condition", "\n", "subtable", "=", "subtable", "[", "(", "subtable", ".", "timestamp", ">=", "pd", ".", "Timestamp", "(", "datetimes", "[", "'min'", "]", ")", ")", "&", "(", "subtable", ".", "timestamp", "<=", "pd", ".", "Timestamp", "(", "datetimes", "[", "'max'", "]", ")", ")", "]", "\n", "# Changing name", "\n", "subtable", ".", "loc", "[", ":", ",", "'relation'", "]", "=", "name", "\n", "# Saving the new Link Group", "\n", "self", ".", "table", "=", "self", ".", "table", ".", "append", "(", "subtable", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "lg_id", "=", "self", ".", "GetNewLinkGroupID", "(", ")", "\n", "self", ".", "link_group_dic", "[", "lg_id", "]", "=", "LinkGroup", "(", "table", "=", "subtable", ",", "\n", "name", "=", "subtable", ".", "relation", ".", "iloc", "[", "0", "]", ",", "\n", "id", "=", "lg_id", ",", "\n", "start_og", "=", "og_start", ",", "\n", "end_og", "=", "og_end", ",", "\n", "verbose", "=", "verbose", ")", "\n", "return", ";", "\n", "", "if", "condition", "!=", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'Link group creation with '", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.CreateInverseLinkGroup": [[108, 139], ["hin_class.HIN.table[].copy", "pandas.DataFrame", "hin_class.HIN.table.append().reset_index", "hin_class.HIN.GetNewLinkGroupID", "link_group_class.LinkGroup", "hin_class.HIN.table.relation.unique", "ValueError", "hin_class.HIN.table.append", "hin_class.HIN.GetObjectGroup", "hin_class.HIN.GetObjectGroup"], "methods", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetNewLinkGroupID", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetObjectGroup", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetObjectGroup"], ["", "", "def", "CreateInverseLinkGroup", "(", "self", ",", "existing_relation_name", ",", "new_relation_name", "=", "None", ",", "verbose", "=", "False", ")", ":", "\n", "# Checking that the relation exists", "\n", "        ", "if", "existing_relation_name", "not", "in", "self", ".", "table", ".", "relation", ".", "unique", "(", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Relation %s does not exist.'", "%", "existing_relation_name", ")", "\n", "# Selecting the sub table of the relation to inverse", "\n", "", "subtable", "=", "self", ".", "table", "[", "self", ".", "table", ".", "relation", "==", "existing_relation_name", "]", ".", "copy", "(", "deep", "=", "True", ")", "\n", "# Creating the new, appendable, subtable with the inverse relation", "\n", "new_subtable", "=", "pd", ".", "DataFrame", "(", "columns", "=", "subtable", ".", "columns", ")", "\n", "# Filling the entries of the new appendable subtable", "\n", "new_subtable", ".", "start_group", "=", "subtable", ".", "end_group", "\n", "new_subtable", ".", "start_object", "=", "subtable", ".", "end_object", "\n", "new_subtable", ".", "end_group", "=", "subtable", ".", "start_group", "\n", "new_subtable", ".", "end_object", "=", "subtable", ".", "start_object", "\n", "new_subtable", ".", "timestamp", "=", "subtable", ".", "timestamp", "\n", "new_subtable", ".", "value", "=", "subtable", ".", "value", "\n", "# Giving a name to the new relation", "\n", "if", "new_relation_name", "is", "None", ":", "\n", "            ", "new_subtable", ".", "relation", "=", "'inverse_'", "+", "existing_relation_name", "\n", "", "else", ":", "\n", "            ", "new_subtable", ".", "relation", "=", "new_relation_name", "\n", "# Appending the table and changing the HIN", "\n", "", "self", ".", "table", "=", "self", ".", "table", ".", "append", "(", "new_subtable", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "new_link_group_id", "=", "self", ".", "GetNewLinkGroupID", "(", ")", "\n", "sog_name", "=", "new_subtable", ".", "start_group", ".", "iloc", "[", "0", "]", "\n", "eog_name", "=", "new_subtable", ".", "end_group", ".", "iloc", "[", "0", "]", "\n", "self", ".", "link_group_dic", "[", "new_link_group_id", "]", "=", "LinkGroup", "(", "table", "=", "new_subtable", ",", "\n", "name", "=", "new_subtable", ".", "relation", ".", "iloc", "[", "0", "]", ",", "\n", "id", "=", "new_link_group_id", ",", "\n", "start_og", "=", "self", ".", "GetObjectGroup", "(", "sog_name", ")", ",", "\n", "end_og", "=", "self", ".", "GetObjectGroup", "(", "eog_name", ")", ",", "\n", "verbose", "=", "verbose", ")", "\n", "", "def", "CreateSubsampledLinkGroup", "(", "self", ",", "relation_name", ",", "new_relation_name", ",", "fraction", ",", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.CreateSubsampledLinkGroup": [[139, 164], ["hin_class.HIN.table[].copy", "hin_class.HIN.table.append().reset_index", "hin_class.HIN.GetNewLinkGroupID", "link_group_class.LinkGroup", "subtable.sample.sample.groupby", "subtable.sample.groupby.apply", "subtable.sample.sample.sample", "hin_class.HIN.table.append", "hin_class.HIN.GetLinkGroup", "hin_class.HIN.GetLinkGroup", "x.sample"], "methods", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetNewLinkGroupID", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroup", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroup"], ["", "def", "CreateSubsampledLinkGroup", "(", "self", ",", "relation_name", ",", "new_relation_name", ",", "fraction", ",", "\n", "per_start_object", "=", "True", ",", "verbose", "=", "False", ")", ":", "\n", "# Get the group ids of the Link Group", "\n", "        ", "og_start", "=", "self", ".", "object_group_dic", "[", "self", ".", "GetLinkGroup", "(", "relation_name", ")", ".", "start_id", "]", "\n", "og_end", "=", "self", ".", "object_group_dic", "[", "self", ".", "GetLinkGroup", "(", "relation_name", ")", ".", "end_id", "]", "\n", "# Getting subtable of the Link Group", "\n", "subtable", "=", "self", ".", "table", "[", "self", ".", "table", ".", "relation", "==", "relation_name", "]", ".", "copy", "(", "deep", "=", "True", ")", "\n", "# Subsampling", "\n", "if", "per_start_object", ":", "\n", "            ", "grouped", "=", "subtable", ".", "groupby", "(", "'start_object'", ")", "\n", "subtable", "=", "grouped", ".", "apply", "(", "lambda", "x", ":", "x", ".", "sample", "(", "frac", "=", "fraction", ")", ")", "\n", "", "else", ":", "\n", "            ", "subtable", "=", "subtable", ".", "sample", "(", "frac", "=", "fraction", ")", "\n", "# Changing name", "\n", "", "subtable", ".", "loc", "[", ":", ",", "'relation'", "]", "=", "new_relation_name", "\n", "# Saving the new Link Group", "\n", "self", ".", "table", "=", "self", ".", "table", ".", "append", "(", "subtable", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "lg_id", "=", "self", ".", "GetNewLinkGroupID", "(", ")", "\n", "self", ".", "link_group_dic", "[", "lg_id", "]", "=", "LinkGroup", "(", "table", "=", "subtable", ",", "\n", "name", "=", "subtable", ".", "relation", ".", "iloc", "[", "0", "]", ",", "\n", "id", "=", "lg_id", ",", "\n", "start_og", "=", "og_start", ",", "\n", "end_og", "=", "og_end", ",", "\n", "verbose", "=", "verbose", ")", "\n", "return", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.DeleteLinkGroup": [[165, 169], ["hin_class.HIN.link_group_dic.pop", "hin_class.HIN.table[].reset_index", "hin_class.HIN.GetLinkGroupId"], "methods", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroupId"], ["", "def", "DeleteLinkGroup", "(", "self", ",", "relation_name", ")", ":", "\n", "        ", "self", ".", "link_group_dic", ".", "pop", "(", "self", ".", "GetLinkGroupId", "(", "relation_name", ")", ")", "\n", "self", ".", "table", "=", "self", ".", "table", "[", "self", ".", "table", ".", "relation", "!=", "relation_name", "]", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "return", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.MergeLinkGroups": [[170, 204], ["hin_class.HIN.table[].copy", "hin_class.HIN.table[].copy", "hin_class.HIN.append", "hin_class.HIN.table.append().reset_index", "hin_class.HIN.GetLinkGroupId", "link_group_class.LinkGroup", "ValueError", "hin_class.HIN.DeleteLinkGroup", "hin_class.HIN.table.append", "hin_class.HIN.GetLinkGroup", "hin_class.HIN.GetLinkGroup", "hin_class.HIN.GetLinkGroup", "hin_class.HIN.GetLinkGroup"], "methods", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroupId", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.DeleteLinkGroup", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroup", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroup", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroup", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroup"], ["", "def", "MergeLinkGroups", "(", "self", ",", "relation_name", ",", "relation_name_to_merge", ",", "\n", "new_relation_name", "=", "None", ",", "delete_merged_relation", "=", "False", ",", "\n", "verbose", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Merge contents of relation_name_to_merge table into relation_name table.\n\n        \"\"\"", "\n", "# Get the group ids of the involved Link Groups", "\n", "og1_start", "=", "self", ".", "object_group_dic", "[", "self", ".", "GetLinkGroup", "(", "relation_name", ")", ".", "start_id", "]", "\n", "og1_end", "=", "self", ".", "object_group_dic", "[", "self", ".", "GetLinkGroup", "(", "relation_name", ")", ".", "end_id", "]", "\n", "og2_start", "=", "self", ".", "object_group_dic", "[", "self", ".", "GetLinkGroup", "(", "relation_name_to_merge", ")", ".", "start_id", "]", "\n", "og2_end", "=", "self", ".", "object_group_dic", "[", "self", ".", "GetLinkGroup", "(", "relation_name_to_merge", ")", ".", "end_id", "]", "\n", "# Check that relations start and end in the same Object Groups", "\n", "if", "(", "og1_start", ".", "id", "!=", "og2_start", ".", "id", ")", "or", "(", "og1_end", ".", "id", "!=", "og2_end", ".", "id", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Link Groups to be merged do not start and end in the same Object Groups.'", ")", "\n", "# Subtable to be merged into a Link Group", "\n", "", "subtable", "=", "self", ".", "table", "[", "self", ".", "table", ".", "relation", "==", "relation_name", "]", ".", "copy", "(", "deep", "=", "True", ")", "\n", "subtable_to_merge", "=", "self", ".", "table", "[", "self", ".", "table", ".", "relation", "==", "relation_name_to_merge", "]", ".", "copy", "(", "deep", "=", "True", ")", "\n", "subtable_to_merge", ".", "loc", "[", ":", ",", "'relation'", "]", "=", "subtable", ".", "relation", ".", "iloc", "[", "0", "]", "\n", "merged_table", "=", "subtable", ".", "append", "(", "subtable_to_merge", ")", "\n", "self", ".", "table", "=", "self", ".", "table", "[", "self", ".", "table", ".", "relation", "!=", "relation_name", "]", "\n", "if", "new_relation_name", "is", "not", "None", ":", "\n", "            ", "merged_table", ".", "loc", "[", ":", ",", "'relation'", "]", "=", "new_relation_name", "\n", "", "self", ".", "table", "=", "self", ".", "table", ".", "append", "(", "merged_table", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "lg_id", "=", "self", ".", "GetLinkGroupId", "(", "relation_name", ")", "\n", "self", ".", "link_group_dic", "[", "lg_id", "]", "=", "LinkGroup", "(", "table", "=", "merged_table", ",", "\n", "name", "=", "merged_table", ".", "relation", ".", "iloc", "[", "0", "]", ",", "\n", "id", "=", "lg_id", ",", "\n", "start_og", "=", "og1_start", ",", "\n", "end_og", "=", "og1_end", ",", "\n", "verbose", "=", "verbose", ")", "\n", "if", "delete_merged_relation", ":", "\n", "            ", "self", ".", "DeleteLinkGroup", "(", "relation_name_to_merge", ")", "\n", "", "return", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.CreateLinkGroupFromLinkGroup": [[205, 226], ["hin_class.HIN.table[].copy", "hin_class.HIN.table.append().reset_index", "hin_class.HIN.GetNewLinkGroupID", "link_group_class.LinkGroup", "hin_class.HIN.value.apply", "hin_class.HIN.table.append", "hin_class.HIN.GetLinkGroup", "hin_class.HIN.GetLinkGroup"], "methods", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetNewLinkGroupID", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroup", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroup"], ["", "def", "CreateLinkGroupFromLinkGroup", "(", "self", ",", "relation_name", ",", "new_relation_name", ",", "condition_method", ",", "\n", "verbose", "=", "False", ")", ":", "\n", "# Get the group ids of the Link Group", "\n", "        ", "og_start", "=", "self", ".", "object_group_dic", "[", "self", ".", "GetLinkGroup", "(", "relation_name", ")", ".", "start_id", "]", "\n", "og_end", "=", "self", ".", "object_group_dic", "[", "self", ".", "GetLinkGroup", "(", "relation_name", ")", ".", "end_id", "]", "\n", "# Getting subtable of the Link Group", "\n", "subtable", "=", "self", ".", "table", "[", "self", ".", "table", ".", "relation", "==", "relation_name", "]", ".", "copy", "(", "deep", "=", "True", ")", "\n", "# Applyting the condition", "\n", "subtable", "=", "subtable", "[", "subtable", ".", "value", ".", "apply", "(", "condition_method", ")", "]", "\n", "# Changing name", "\n", "subtable", ".", "loc", "[", ":", ",", "'relation'", "]", "=", "new_relation_name", "\n", "# Saving the new Link Group", "\n", "self", ".", "table", "=", "self", ".", "table", ".", "append", "(", "subtable", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "lg_id", "=", "self", ".", "GetNewLinkGroupID", "(", ")", "\n", "self", ".", "link_group_dic", "[", "lg_id", "]", "=", "LinkGroup", "(", "table", "=", "subtable", ",", "\n", "name", "=", "subtable", ".", "relation", ".", "iloc", "[", "0", "]", ",", "\n", "id", "=", "lg_id", ",", "\n", "start_og", "=", "og_start", ",", "\n", "end_og", "=", "og_end", ",", "\n", "verbose", "=", "verbose", ")", "\n", "return", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.CreateLinkGroupFromLinkGroupWithDates": [[227, 248], ["hin_class.HIN.table[].copy", "hin_class.HIN.table.append().reset_index", "hin_class.HIN.GetNewLinkGroupID", "link_group_class.LinkGroup", "hin_class.HIN.table.append", "hin_class.HIN.GetLinkGroup", "hin_class.HIN.GetLinkGroup", "pandas.Timestamp", "pandas.Timestamp"], "methods", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetNewLinkGroupID", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroup", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroup"], ["", "def", "CreateLinkGroupFromLinkGroupWithDates", "(", "self", ",", "relation_name", ",", "new_relation_name", ",", "limit_dates", ",", "\n", "verbose", "=", "False", ")", ":", "\n", "# Get the group ids of the Link Group", "\n", "        ", "og_start", "=", "self", ".", "object_group_dic", "[", "self", ".", "GetLinkGroup", "(", "relation_name", ")", ".", "start_id", "]", "\n", "og_end", "=", "self", ".", "object_group_dic", "[", "self", ".", "GetLinkGroup", "(", "relation_name", ")", ".", "end_id", "]", "\n", "# Getting subtable of the Link Group", "\n", "subtable", "=", "self", ".", "table", "[", "self", ".", "table", ".", "relation", "==", "relation_name", "]", ".", "copy", "(", "deep", "=", "True", ")", "\n", "# Applyting the condition", "\n", "subtable", "=", "subtable", "[", "(", "subtable", ".", "timestamp", ">=", "pd", ".", "Timestamp", "(", "limit_dates", "[", "'min'", "]", ")", ")", "&", "(", "subtable", ".", "timestamp", "<=", "pd", ".", "Timestamp", "(", "limit_dates", "[", "'max'", "]", ")", ")", "]", "\n", "# Changing name", "\n", "subtable", ".", "loc", "[", ":", ",", "'relation'", "]", "=", "new_relation_name", "\n", "# Saving the new Link Group", "\n", "self", ".", "table", "=", "self", ".", "table", ".", "append", "(", "subtable", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "lg_id", "=", "self", ".", "GetNewLinkGroupID", "(", ")", "\n", "self", ".", "link_group_dic", "[", "lg_id", "]", "=", "LinkGroup", "(", "table", "=", "subtable", ",", "\n", "name", "=", "subtable", ".", "relation", ".", "iloc", "[", "0", "]", ",", "\n", "id", "=", "lg_id", ",", "\n", "start_og", "=", "og_start", ",", "\n", "end_og", "=", "og_end", ",", "\n", "verbose", "=", "verbose", ")", "\n", "return", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.CreateLinkGroupFromTable": [[249, 274], ["hin_class.HIN.GetObjectGroup", "hin_class.HIN.GetObjectGroup", "new_table.copy", "hin_class.HIN.table.append().reset_index", "hin_class.HIN.GetNewLinkGroupID", "link_group_class.LinkGroup", "ValueError", "hin_class.HIN.table.append", "new_table.start_group.unique", "new_table.end_group.unique"], "methods", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetObjectGroup", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetObjectGroup", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetNewLinkGroupID"], ["", "def", "CreateLinkGroupFromTable", "(", "self", ",", "new_table", ",", "new_relation_name", "=", "None", ",", "verbose", "=", "False", ")", ":", "\n", "# Check table for start/end group uniqueness and existence, check consistent relation name", "\n", "        ", "if", "new_table", ".", "start_group", ".", "unique", "(", ")", ".", "size", "!=", "1", "or", "new_table", ".", "end_group", ".", "unique", "(", ")", ".", "size", "!=", "1", ":", "\n", "            ", "raise", "ValueError", "(", "'Table has links between more than two object groups.'", ")", "\n", "# Get the group ids of the Link Group", "\n", "", "og_start_name", "=", "new_table", ".", "start_group", ".", "iloc", "[", "0", "]", "\n", "og_end_name", "=", "new_table", ".", "end_group", ".", "iloc", "[", "0", "]", "\n", "og_start", "=", "self", ".", "GetObjectGroup", "(", "og_start_name", ")", "\n", "og_end", "=", "self", ".", "GetObjectGroup", "(", "og_end_name", ")", "\n", "subtable", "=", "new_table", ".", "copy", "(", "deep", "=", "True", ")", "\n", "if", "new_relation_name", "is", "None", ":", "\n", "            ", "relation_name", "=", "new_table", ".", "loc", "[", ":", ",", "'relation'", "]", ".", "iloc", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "relation_name", "=", "new_relation_name", "\n", "subtable", ".", "loc", "[", ":", ",", "'relation'", "]", "=", "new_relation_name", "\n", "# Saving the new Link Group", "\n", "", "self", ".", "table", "=", "self", ".", "table", ".", "append", "(", "subtable", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "lg_id", "=", "self", ".", "GetNewLinkGroupID", "(", ")", "\n", "self", ".", "link_group_dic", "[", "lg_id", "]", "=", "LinkGroup", "(", "table", "=", "subtable", ",", "\n", "name", "=", "relation_name", ",", "\n", "id", "=", "lg_id", ",", "\n", "start_og", "=", "og_start", ",", "\n", "end_og", "=", "og_end", ",", "\n", "verbose", "=", "verbose", ")", "\n", "return", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.CreateLinkGroupFromConfigurationModel": [[275, 296], ["hin_class.HIN.table[].copy", "hin_class.HIN.table.append().reset_index", "hin_class.HIN.GetNewLinkGroupID", "link_group_class.LinkGroup", "hin_class.HIN.loc[].sample", "hin_class.HIN.table.append", "hin_class.HIN.GetLinkGroup", "hin_class.HIN.GetLinkGroup"], "methods", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetNewLinkGroupID", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroup", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroup"], ["", "def", "CreateLinkGroupFromConfigurationModel", "(", "self", ",", "relation_name", ",", "new_relation_name", ",", "\n", "verbose", "=", "False", ")", ":", "\n", "# Get the group ids of the Link Group", "\n", "        ", "og_start", "=", "self", ".", "object_group_dic", "[", "self", ".", "GetLinkGroup", "(", "relation_name", ")", ".", "start_id", "]", "\n", "og_end", "=", "self", ".", "object_group_dic", "[", "self", ".", "GetLinkGroup", "(", "relation_name", ")", ".", "end_id", "]", "\n", "# Getting subtable of the Link Group", "\n", "subtable", "=", "self", ".", "table", "[", "self", ".", "table", ".", "relation", "==", "relation_name", "]", ".", "copy", "(", "deep", "=", "True", ")", "\n", "# Shuffling end objects", "\n", "subtable", ".", "loc", "[", ":", ",", "'end_object'", "]", "=", "subtable", ".", "loc", "[", ":", ",", "'end_object'", "]", ".", "sample", "(", "frac", "=", "1", ")", ".", "values", "\n", "# Changing name", "\n", "subtable", ".", "loc", "[", ":", ",", "'relation'", "]", "=", "new_relation_name", "\n", "# Saving the new Link Group", "\n", "self", ".", "table", "=", "self", ".", "table", ".", "append", "(", "subtable", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "lg_id", "=", "self", ".", "GetNewLinkGroupID", "(", ")", "\n", "self", ".", "link_group_dic", "[", "lg_id", "]", "=", "LinkGroup", "(", "table", "=", "subtable", ",", "\n", "name", "=", "subtable", ".", "relation", ".", "iloc", "[", "0", "]", ",", "\n", "id", "=", "lg_id", ",", "\n", "start_og", "=", "og_start", ",", "\n", "end_og", "=", "og_end", ",", "\n", "verbose", "=", "verbose", ")", "\n", "return", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.CreateLinkGroupFromRS": [[297, 321], ["HINRS", "hin_class.HIN.table.append().reset_index", "hin_class.HIN.GetNewLinkGroupID", "hin_class.HIN.GetLinkGroup", "hin_class.HIN.GetLinkGroupStartObjectGroup", "hin_class.HIN.GetLinkGroupEndObjectGroup", "link_group_class.LinkGroup", "hin_class.HIN.table.append"], "methods", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.rs.hin_rs.HINRS", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetNewLinkGroupID", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroup", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroupStartObjectGroup", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroupEndObjectGroup"], ["", "def", "CreateLinkGroupFromRS", "(", "self", ",", "relation_name", ",", "new_relation_name", ",", "parameters", ",", "\n", "verbose", "=", "False", ")", ":", "\n", "\n", "        ", "\"\"\"\n\n        \"\"\"", "\n", "# Creating the recommendation table", "\n", "predicted_table", ",", "report", "=", "HINRS", "(", "self", ",", "relation_name", ",", "parameters", "=", "parameters", ",", "verbose", "=", "verbose", ")", "\n", "predicted_table", ".", "loc", "[", ":", ",", "'relation'", "]", "=", "new_relation_name", "\n", "# Creating the new Link Group from the recommendation", "\n", "self", ".", "table", "=", "self", ".", "table", ".", "append", "(", "predicted_table", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "new_link_group_id", "=", "self", ".", "GetNewLinkGroupID", "(", ")", "\n", "lg", "=", "self", ".", "GetLinkGroup", "(", "relation_name", ")", "\n", "og_start", "=", "self", ".", "GetLinkGroupStartObjectGroup", "(", "lg", ".", "name", ")", "\n", "og_end", "=", "self", ".", "GetLinkGroupEndObjectGroup", "(", "lg", ".", "name", ")", "\n", "self", ".", "link_group_dic", "[", "new_link_group_id", "]", "=", "LinkGroup", "(", "table", "=", "predicted_table", ",", "\n", "name", "=", "new_relation_name", ",", "\n", "id", "=", "new_link_group_id", ",", "\n", "start_og", "=", "og_start", ",", "\n", "end_og", "=", "og_end", ",", "\n", "verbose", "=", "verbose", ")", "\n", "self", ".", "link_group_dic", "[", "new_link_group_id", "]", ".", "info", "=", "report", "\n", "\n", "return", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.ReBuildObjectGroupsFromTable": [[326, 337], ["list", "hin_functions.GetObjectsFromTableWithGroup", "object_group_class.ObjectGroup", "set", "set", "hin_class.HIN.table.start_group.unique", "hin_class.HIN.table.end_group.unique"], "methods", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_functions.GetObjectsFromTableWithGroup"], ["", "def", "ReBuildObjectGroupsFromTable", "(", "self", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "self", ".", "object_group_dic", "=", "{", "}", "\n", "object_group_id", "=", "0", "\n", "for", "og_name", "in", "list", "(", "set", "(", "self", ".", "table", ".", "start_group", ".", "unique", "(", ")", ")", "|", "set", "(", "self", ".", "table", ".", "end_group", ".", "unique", "(", ")", ")", ")", ":", "\n", "            ", "o_list", "=", "GetObjectsFromTableWithGroup", "(", "self", ".", "table", ",", "og_name", ")", "\n", "self", ".", "object_group_dic", "[", "object_group_id", "]", "=", "ObjectGroup", "(", "object_list", "=", "o_list", ",", "\n", "name", "=", "og_name", ",", "\n", "id", "=", "object_group_id", ",", "\n", "verbose", "=", "verbose", ")", "\n", "object_group_id", "+=", "1", "\n", "", "return", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.ReBuildLinkGroupsFromTable": [[338, 352], ["hin_class.HIN.table.relation.unique", "link_group_class.LinkGroup", "hin_class.HIN.GetObjectGroup", "hin_class.HIN.GetObjectGroup"], "methods", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetObjectGroup", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetObjectGroup"], ["", "def", "ReBuildLinkGroupsFromTable", "(", "self", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "self", ".", "link_group_dic", "=", "{", "}", "\n", "link_group_id", "=", "0", "\n", "for", "lg_name", "in", "self", ".", "table", ".", "relation", ".", "unique", "(", ")", ":", "\n", "            ", "sog_name", "=", "self", ".", "table", "[", "self", ".", "table", ".", "relation", "==", "lg_name", "]", ".", "start_group", ".", "iloc", "[", "0", "]", "\n", "eog_name", "=", "self", ".", "table", "[", "self", ".", "table", ".", "relation", "==", "lg_name", "]", ".", "end_group", ".", "iloc", "[", "0", "]", "\n", "self", ".", "link_group_dic", "[", "link_group_id", "]", "=", "LinkGroup", "(", "table", "=", "self", ".", "table", "[", "self", ".", "table", ".", "relation", "==", "lg_name", "]", ",", "\n", "name", "=", "lg_name", ",", "\n", "id", "=", "link_group_id", ",", "\n", "start_og", "=", "self", ".", "GetObjectGroup", "(", "sog_name", ")", ",", "\n", "end_og", "=", "self", ".", "GetObjectGroup", "(", "eog_name", ")", ",", "\n", "verbose", "=", "verbose", ")", "\n", "link_group_id", "+=", "1", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetObjectGroup": [[361, 366], ["hin_class.HIN.object_group_dic.items", "ValueError"], "methods", ["None"], ["", "def", "GetObjectGroup", "(", "self", ",", "name", ")", ":", "\n", "        ", "for", "og_id", ",", "og", "in", "self", ".", "object_group_dic", ".", "items", "(", ")", ":", "\n", "            ", "if", "og", ".", "name", "==", "name", ":", "\n", "                ", "return", "og", ";", "\n", "", "", "raise", "ValueError", "(", "'Object Group %s not found'", "%", "name", ")", "\n", "# Get ObjectGroup at start of LinkGroup from name", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroupStartObjectGroup": [[367, 369], ["hin_class.HIN.GetObjectGroup", "hin_class.HIN.GetLinkGroup"], "methods", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetObjectGroup", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroup"], ["", "def", "GetLinkGroupStartObjectGroup", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "self", ".", "GetObjectGroup", "(", "self", ".", "object_group_dic", "[", "self", ".", "GetLinkGroup", "(", "name", ")", ".", "start_id", "]", ".", "name", ")", "\n", "# Get ObjectGroup at end of LinkGroup from name", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroupEndObjectGroup": [[370, 372], ["hin_class.HIN.GetObjectGroup", "hin_class.HIN.GetLinkGroup"], "methods", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetObjectGroup", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroup"], ["", "def", "GetLinkGroupEndObjectGroup", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "self", ".", "GetObjectGroup", "(", "self", ".", "object_group_dic", "[", "self", ".", "GetLinkGroup", "(", "name", ")", ".", "end_id", "]", ".", "name", ")", "\n", "# Get LinkGroup from name", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroup": [[373, 378], ["hin_class.HIN.link_group_dic.items", "ValueError"], "methods", ["None"], ["", "def", "GetLinkGroup", "(", "self", ",", "name", ")", ":", "\n", "        ", "for", "lg_id", ",", "lg", "in", "self", ".", "link_group_dic", ".", "items", "(", ")", ":", "\n", "            ", "if", "lg", ".", "name", "==", "name", ":", "\n", "                ", "return", "lg", ";", "\n", "", "", "raise", "ValueError", "(", "'Link Group %s not found'", "%", "name", ")", "\n", "# Get LinkGroup density from name", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroupDensity": [[379, 384], ["hin_class.HIN.GetLinkGroupStartObjectGroup", "hin_class.HIN.GetLinkGroupEndObjectGroup", "hin_class.HIN.GetLinkGroup"], "methods", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroupStartObjectGroup", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroupEndObjectGroup", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroup"], ["", "def", "GetLinkGroupDensity", "(", "self", ",", "name", ")", ":", "\n", "        ", "sogs", "=", "self", ".", "GetLinkGroupStartObjectGroup", "(", "name", ")", ".", "size", "\n", "eogs", "=", "self", ".", "GetLinkGroupEndObjectGroup", "(", "name", ")", ".", "size", "\n", "lgs", "=", "self", ".", "GetLinkGroup", "(", "name", ")", ".", "size", "\n", "return", "lgs", "/", "(", "sogs", "*", "eogs", ")", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetObjectGroupId": [[386, 391], ["hin_class.HIN.object_group_dic.items", "ValueError"], "methods", ["None"], ["", "def", "GetObjectGroupId", "(", "self", ",", "name", ")", ":", "\n", "        ", "for", "og_id", ",", "og", "in", "self", ".", "object_group_dic", ".", "items", "(", ")", ":", "\n", "            ", "if", "og", ".", "name", "==", "name", ":", "\n", "                ", "return", "og_id", ";", "\n", "", "", "raise", "ValueError", "(", "'Object Group %s not found'", "%", "name", ")", "\n", "# Get Ids of LinkGroup from name", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroupId": [[392, 397], ["hin_class.HIN.link_group_dic.items", "ValueError"], "methods", ["None"], ["", "def", "GetLinkGroupId", "(", "self", ",", "name", ")", ":", "\n", "        ", "for", "lg_id", ",", "lg", "in", "self", ".", "link_group_dic", ".", "items", "(", ")", ":", "\n", "            ", "if", "lg", ".", "name", "==", "name", ":", "\n", "                ", "return", "lg_id", ";", "\n", "", "", "raise", "ValueError", "(", "'Link Group %s not found'", "%", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetObjectGroupsNames": [[399, 401], ["hin_class.HIN.object_group_dic.items"], "methods", ["None"], ["", "def", "GetObjectGroupsNames", "(", "self", ")", ":", "\n", "        ", "return", "[", "og", ".", "name", "for", "og_id", ",", "og", "in", "self", ".", "object_group_dic", ".", "items", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroupsNames": [[403, 405], ["hin_class.HIN.link_group_dic.items"], "methods", ["None"], ["", "def", "GetLinkGroupsNames", "(", "self", ")", ":", "\n", "        ", "return", "[", "lg", ".", "name", "for", "lg_id", ",", "lg", "in", "self", ".", "link_group_dic", ".", "items", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetObjectGroupPositionDic": [[407, 409], ["hin_class.HIN.GetObjectGroup().OjectPositionDicFromName", "hin_class.HIN.GetObjectGroup"], "methods", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.object_group_class.ObjectGroup.OjectPositionDicFromName", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetObjectGroup"], ["", "def", "GetObjectGroupPositionDic", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "self", ".", "GetObjectGroup", "(", "name", ")", ".", "OjectPositionDicFromName", "(", ")", ";", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetObjectGroupObjectDic": [[410, 412], ["hin_class.HIN.GetObjectGroup().OjectNameDicFromPosition", "hin_class.HIN.GetObjectGroup"], "methods", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.object_group_class.ObjectGroup.OjectNameDicFromPosition", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetObjectGroup"], ["", "def", "GetObjectGroupObjectDic", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "self", ".", "GetObjectGroup", "(", "name", ")", ".", "OjectNameDicFromPosition", "(", ")", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetNewLinkGroupID": [[414, 416], ["FirstAbsentNumberInList", "hin_class.HIN.link_group_dic.items"], "methods", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.FirstAbsentNumberInList"], ["", "def", "GetNewLinkGroupID", "(", "self", ")", ":", "\n", "        ", "return", "FirstAbsentNumberInList", "(", "[", "k", "for", "k", ",", "v", "in", "self", ".", "link_group_dic", ".", "items", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetNewObjectGroupID": [[417, 419], ["FirstAbsentNumberInList", "hin_class.HIN.object_group_dic.items"], "methods", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.FirstAbsentNumberInList"], ["", "def", "GetNewObjectGroupID", "(", "self", ")", ":", "\n", "        ", "return", "FirstAbsentNumberInList", "(", "[", "k", "for", "k", ",", "v", "in", "self", ".", "object_group_dic", ".", "items", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetPathStartGroupPositionDic": [[423, 425], ["hin_class.HIN.GetLinkGroupStartObjectGroup().OjectPositionDicFromName", "hin_class.HIN.GetLinkGroupStartObjectGroup"], "methods", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.object_group_class.ObjectGroup.OjectPositionDicFromName", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroupStartObjectGroup"], ["", "def", "GetPathStartGroupPositionDic", "(", "self", ",", "path", ")", ":", "\n", "        ", "return", "self", ".", "GetLinkGroupStartObjectGroup", "(", "path", "[", "0", "]", ")", ".", "OjectPositionDicFromName", "(", ")", ";", "\n", "", "def", "GetPathEndGroupPositionDic", "(", "self", ",", "path", ")", ":", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetPathEndGroupPositionDic": [[425, 427], ["hin_class.HIN.GetLinkGroupEndObjectGroup().OjectPositionDicFromName", "hin_class.HIN.GetLinkGroupEndObjectGroup"], "methods", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.object_group_class.ObjectGroup.OjectPositionDicFromName", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroupEndObjectGroup"], ["", "def", "GetPathEndGroupPositionDic", "(", "self", ",", "path", ")", ":", "\n", "        ", "return", "self", ".", "GetLinkGroupEndObjectGroup", "(", "path", "[", "-", "1", "]", ")", ".", "OjectPositionDicFromName", "(", ")", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.stochastic_matrix": [[433, 439], ["hin_functions.CheckPath", "hin_class.HIN.GetLinkGroup", "hin_class.HIN.GetLinkGroup"], "methods", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_functions.CheckPath", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroup", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroup"], ["", "def", "stochastic_matrix", "(", "self", ",", "path", ")", ":", "\n", "        ", "path", "=", "CheckPath", "(", "path", ")", "\n", "matrix", "=", "self", ".", "GetLinkGroup", "(", "path", "[", "0", "]", ")", ".", "stochastic_matrix", "\n", "for", "relation", "in", "path", "[", "1", ":", "]", ":", "\n", "            ", "matrix", "=", "matrix", "*", "self", ".", "GetLinkGroup", "(", "relation", ")", ".", "stochastic_matrix", "\n", "", "return", "matrix", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.proportional_abundance": [[440, 457], ["hin_functions.CheckPath", "hin_class.HIN.stochastic_matrix", "numpy.append", "hin_class.HIN.T.dot", "numpy.ones", "numpy.ones.sum", "pa[].sum", "hin_class.HIN.GetLinkGroup"], "methods", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_functions.CheckPath", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.stochastic_matrix", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroup"], ["", "def", "proportional_abundance", "(", "self", ",", "path", ",", "initial_p", "=", "None", ",", "include_sink", "=", "False", ")", ":", "\n", "        ", "path", "=", "CheckPath", "(", "path", ")", "\n", "# Compute stochastic matrix for the path", "\n", "matrix", "=", "self", ".", "stochastic_matrix", "(", "path", ")", "\n", "# Get size of the start object group", "\n", "start_og", "=", "self", ".", "object_group_dic", "[", "self", ".", "GetLinkGroup", "(", "path", "[", "0", "]", ")", ".", "start_id", "]", "\n", "if", "initial_p", "is", "not", "None", ":", "\n", "            ", "p", "=", "initial_p", "\n", "", "else", ":", "\n", "            ", "p", "=", "np", ".", "ones", "(", "start_og", ".", "size", ")", "\n", "", "p", "=", "p", "/", "p", ".", "sum", "(", ")", "\n", "p", "=", "np", ".", "append", "(", "p", ",", "[", "0", "]", ")", "#<- probability of starting at sink = 0", "\n", "pa", "=", "matrix", ".", "T", ".", "dot", "(", "p", ")", "\n", "if", "include_sink", ":", "\n", "            ", "return", "pa", ";", "\n", "", "else", ":", "\n", "            ", "return", "pa", "[", ":", "-", "1", "]", "/", "pa", "[", ":", "-", "1", "]", ".", "sum", "(", ")", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.proportional_abundances": [[458, 466], ["hin_functions.CheckPath", "hin_class.HIN.stochastic_matrix", "sklearn.preprocessing.normalize"], "methods", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_functions.CheckPath", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.stochastic_matrix"], ["", "", "def", "proportional_abundances", "(", "self", ",", "path", ",", "include_sink", "=", "False", ")", ":", "\n", "        ", "path", "=", "CheckPath", "(", "path", ")", "\n", "matrix", "=", "self", ".", "stochastic_matrix", "(", "path", ")", "\n", "if", "include_sink", ":", "\n", "            ", "return", "matrix", ";", "\n", "", "else", ":", "\n", "            ", "matrix", "=", "matrix", "[", ":", "-", "1", ",", ":", "-", "1", "]", "\n", "return", "normalize", "(", "matrix", ",", "norm", "=", "'l1'", ",", "axis", "=", "1", ")", ";", "#<- if all mass went to sink pa=0", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.individual_diversities": [[467, 477], ["hin_functions.CheckPath", "numpy.array", "hin_class.HIN.proportional_abundances().tolil", "numpy.abs", "diversities.append", "diversities.append", "hin_class.HIN.proportional_abundances", "TrueDiversity", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_functions.CheckPath", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.proportional_abundances", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.truediversity.TrueDiversity"], ["", "", "def", "individual_diversities", "(", "self", ",", "path", ",", "alpha", "=", "1.0", ",", "include_sink", "=", "False", ")", ":", "\n", "        ", "path", "=", "CheckPath", "(", "path", ")", "\n", "pas", "=", "self", ".", "proportional_abundances", "(", "path", ",", "include_sink", "=", "include_sink", ")", ".", "tolil", "(", ")", ".", "data", "\n", "diversities", "=", "[", "]", "\n", "for", "p", "in", "pas", ":", "\n", "            ", "if", "np", ".", "abs", "(", "np", ".", "sum", "(", "p", ")", "-", "1.0", ")", "<", "1e-4", ":", "\n", "                ", "diversities", ".", "append", "(", "TrueDiversity", "(", "p", ",", "alpha", ")", ")", "\n", "", "else", ":", "\n", "                ", "diversities", ".", "append", "(", "np", ".", "nan", ")", "\n", "", "", "return", "np", ".", "array", "(", "diversities", ")", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.mean_diversity": [[478, 488], ["hin_functions.CheckPath", "hin_class.HIN.individual_diversities", "hin_class.HIN.mean", "scipy.stats.mstats.gmean", "ValueError"], "methods", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_functions.CheckPath", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.individual_diversities"], ["", "def", "mean_diversity", "(", "self", ",", "path", ",", "alpha", "=", "1.0", ",", "include_sink", "=", "False", ",", "method", "=", "'arithmetic'", ")", ":", "\n", "        ", "path", "=", "CheckPath", "(", "path", ")", "\n", "diversities", "=", "self", ".", "individual_diversities", "(", "path", ",", "alpha", "=", "alpha", ",", "include_sink", "=", "include_sink", ")", "\n", "# Computing the mean", "\n", "if", "method", "==", "'arithmetic'", ":", "\n", "            ", "return", "diversities", ".", "mean", "(", ")", "\n", "", "elif", "method", "==", "'geo'", ":", "\n", "            ", "return", "gmean", "(", "diversities", ")", "\n", "", "elif", "method", "==", "'wpm'", ":", "\n", "            ", "raise", "ValueError", "(", "'Weighted Power Mean Method not implemented yet.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.collective_diversity": [[489, 495], ["hin_functions.CheckPath", "hin_class.HIN.proportional_abundance", "TrueDiversity", "numpy.abs", "ValueError", "hin_class.HIN.sum"], "methods", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_functions.CheckPath", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.proportional_abundance", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.truediversity.TrueDiversity"], ["", "", "def", "collective_diversity", "(", "self", ",", "path", ",", "alpha", "=", "1.0", ",", "include_sink", "=", "False", ")", ":", "\n", "        ", "path", "=", "CheckPath", "(", "path", ")", "\n", "p", "=", "self", ".", "proportional_abundance", "(", "path", ",", "include_sink", "=", "include_sink", ")", "\n", "if", "np", ".", "abs", "(", "p", ".", "sum", "(", ")", "-", "0.0", ")", "<", "1e-6", ":", "\n", "            ", "raise", "ValueError", "(", "'All mass was in the sink.'", ")", "\n", "", "return", "TrueDiversity", "(", "p", ",", "alpha", ")", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.path_value_aggregation": [[500, 532], ["hin_functions.CheckPath", "hin_class.HIN.GetPathEndGroupPositionDic", "hin_class.HIN.GetLinkGroupEndObjectGroup", "dict", "numpy.array", "hin_class.HIN.proportional_abundances", "hin_class.HIN.dot", "hin_class.HIN.GetPathStartGroupPositionDic", "dict", "dict", "ValueError", "zip", "values_dic.items", "numpy.setdiff1d", "collections.OrderedDict().items", "hin_class.HIN.items", "range", "numpy.ravel", "hin_class.HIN.items", "hin_class.HIN.sum", "collections.OrderedDict", "sorted", "dict.items"], "methods", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_functions.CheckPath", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetPathEndGroupPositionDic", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroupEndObjectGroup", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.proportional_abundances", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetPathStartGroupPositionDic"], ["", "def", "path_value_aggregation", "(", "self", ",", "values_dic", ",", "path", ")", ":", "\n", "        ", "\"\"\"\n        Aggregate values using a meta-path. Values in the ending\n        object group are aggregated into values for the starting \n        object group.\n        \"\"\"", "\n", "path", "=", "CheckPath", "(", "path", ")", "\n", "# Setting the ending object group position", "\n", "eg_pos_dic", "=", "self", ".", "GetPathEndGroupPositionDic", "(", "path", ")", "\n", "eg", "=", "self", ".", "GetLinkGroupEndObjectGroup", "(", "path", "[", "-", "1", "]", ")", "\n", "# Checking that values conforms ending obj. group", "\n", "# (length: dictionary has the same num. of elements)", "\n", "# if eg.size!=len(values_dic):", "\n", "#     raise ValueError", "\n", "# (inclusion: all keys are objects of the group)", "\n", "values_dic_keys", "=", "[", "k", "for", "k", ",", "v", "in", "values_dic", ".", "items", "(", ")", "]", "\n", "if", "np", ".", "setdiff1d", "(", "eg", ".", "object_list", ",", "values_dic_keys", ")", ".", "size", ">", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'Values must be provided for all objects in %s.'", "%", "eg", ".", "name", ")", "\n", "# Inverse ending object group position dictionaries", "\n", "", "inv_eg_pos_dic", "=", "dict", "(", "(", "v", ",", "k", ")", "for", "k", ",", "v", "in", "eg_pos_dic", ".", "items", "(", ")", ")", "\n", "# Put values from values_dic in a vector in order given by eg_pos_dic", "\n", "\n", "e_values_vec", "=", "np", ".", "array", "(", "[", "values_dic", "[", "inv_eg_pos_dic", "[", "i", "]", "]", "for", "i", "in", "range", "(", "eg", ".", "size", ")", "]", ")", "\n", "# proportional abundances matrix is (starting obj. group size)x(ending obj. group size)", "\n", "PAM", "=", "self", ".", "proportional_abundances", "(", "path", ")", "\n", "s_values_vec", "=", "PAM", ".", "dot", "(", "e_values_vec", ")", "\n", "s_values_vec", "[", "np", ".", "ravel", "(", "PAM", ".", "sum", "(", "axis", "=", "1", ")", ")", "==", "0.0", "]", "=", "np", ".", "nan", "\n", "# putting values in a dictionary", "\n", "sg_pos_dic", "=", "self", ".", "GetPathStartGroupPositionDic", "(", "path", ")", "\n", "inv_sg_pos_dic", "=", "dict", "(", "(", "v", ",", "k", ")", "for", "k", ",", "v", "in", "sg_pos_dic", ".", "items", "(", ")", ")", "\n", "ordered_s_objects", "=", "[", "v", "for", "k", ",", "v", "in", "collections", ".", "OrderedDict", "(", "sorted", "(", "inv_sg_pos_dic", ".", "items", "(", ")", ")", ")", ".", "items", "(", ")", "]", "\n", "return", "dict", "(", "zip", "(", "ordered_s_objects", ",", "s_values_vec", ")", ")", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.plot_schema": [[537, 545], ["hin_graphics.plot_hin", "hin_class.HIN.table[].drop_duplicates", "hin_class.HIN.table.relation.apply", "r.startswith"], "methods", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_graphics.plot_hin"], ["", "def", "plot_schema", "(", "self", ",", "filename", "=", "None", ",", "\n", "node_size", "=", "700", ",", "layout", "=", "'spring'", ",", "arrow_size", "=", "10", ",", "\n", "edge_labels", "=", "True", ",", "node_labels", "=", "True", ")", ":", "\n", "        ", "table", "=", "self", ".", "table", "[", "~", "self", ".", "table", ".", "relation", ".", "apply", "(", "lambda", "r", ":", "r", ".", "startswith", "(", "'inverse_'", ")", ")", "]", ".", "drop_duplicates", "(", "subset", "=", "[", "'relation'", ",", "'start_group'", ",", "'end_group'", "]", ")", "[", "[", "'start_group'", ",", "'end_group'", ",", "'relation'", "]", "]", "\n", "plot_hin", "(", "table", ",", "filename", "=", "filename", ",", "\n", "node_size", "=", "node_size", ",", "layout", "=", "layout", ",", "arrowsize", "=", "arrow_size", ",", "\n", "edge_labels", "=", "edge_labels", ",", "node_labels", "=", "node_labels", ")", "\n", "return", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetPathStochasticMatrix": [[555, 561], ["hin_functions.CheckPath", "hin_class.HIN.GetLinkGroup", "hin_class.HIN.GetLinkGroup"], "methods", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_functions.CheckPath", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroup", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroup"], ["", "def", "GetPathStochasticMatrix", "(", "self", ",", "relation_list", ")", ":", "\n", "        ", "path", "=", "CheckPath", "(", "relation_list", ")", "\n", "matrix", "=", "self", ".", "GetLinkGroup", "(", "path", "[", "0", "]", ")", ".", "stochastic_matrix", "\n", "for", "relation", "in", "path", "[", "1", ":", "]", ":", "\n", "            ", "matrix", "=", "matrix", "*", "self", ".", "GetLinkGroup", "(", "relation", ")", ".", "stochastic_matrix", "\n", "", "return", "matrix", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetPathProportionalAbundance": [[562, 581], ["hin_class.HIN.GetPathStochasticMatrix", "hin_class.HIN.T.dot", "numpy.ones", "numpy.append", "numpy.zeros", "numpy.zeros.sum", "start_og.objects_ids_queue.index", "numpy.zeros.sum", "hin_class.HIN.GetLinkGroup"], "methods", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetPathStochasticMatrix", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroup"], ["", "def", "GetPathProportionalAbundance", "(", "self", ",", "relation_list", ",", "\n", "start_object_subset", "=", "None", ",", "\n", "verbose", "=", "False", ")", ":", "\n", "# Compute stochastic matrix for the path", "\n", "        ", "matrix", "=", "self", ".", "GetPathStochasticMatrix", "(", "relation_list", ")", "\n", "# Get size of the start object group", "\n", "start_og", "=", "self", ".", "object_group_dic", "[", "self", ".", "GetLinkGroup", "(", "relation_list", "[", "0", "]", ")", ".", "start_id", "]", "\n", "# If no subset is given, there is a fast way", "\n", "if", "start_object_subset", "==", "None", ":", "\n", "            ", "P", "=", "np", ".", "ones", "(", "start_og", ".", "size", ")", "\n", "P", "=", "P", "/", "P", ".", "sum", "(", ")", "\n", "P", "=", "np", ".", "append", "(", "P", ",", "[", "0", "]", ")", "# This zero is the probability of starting at the sink of the group", "\n", "", "else", ":", "# else, we have to assemble the array p", "\n", "# TODO: check that it is a proper subset", "\n", "            ", "P", "=", "np", ".", "zeros", "(", "start_og", ".", "size", "+", "1", ")", "# The last position is for the sink of the group", "\n", "positions", "=", "[", "start_og", ".", "objects_ids_queue", ".", "index", "(", "start_og", ".", "objects_ids", "[", "name", "]", ")", "for", "name", "in", "start_object_subset", "]", "\n", "P", "[", "positions", "]", "=", "1", "\n", "P", "=", "P", "/", "P", ".", "sum", "(", ")", "\n", "", "return", "matrix", ".", "T", ".", "dot", "(", "P", ")", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetSetCollectiveTrueDiversity": [[582, 594], ["hin_class.HIN.GetPathProportionalAbundance", "TrueDiversity", "hin_class.HIN.sum", "ValueError", "hin_class.HIN.sum"], "methods", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetPathProportionalAbundance", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.truediversity.TrueDiversity"], ["", "def", "GetSetCollectiveTrueDiversity", "(", "self", ",", "relation_list", ",", "alpha", ",", "\n", "start_object_subset", "=", "None", ",", "\n", "renormalize", "=", "True", ",", "\n", "verbose", "=", "False", ")", ":", "\n", "        ", "P", "=", "self", ".", "GetPathProportionalAbundance", "(", "relation_list", ",", "start_object_subset", "=", "start_object_subset", ")", "\n", "# Move mass from the sink node to the rest of the nodes", "\n", "if", "renormalize", ":", "\n", "            ", "P", "=", "P", "[", ":", "-", "1", "]", "\n", "if", "P", ".", "sum", "(", ")", "<", "1e-8", ":", "\n", "                ", "raise", "ValueError", "(", "'Proportional Abundance cannot be renormalized because all mass was in the sink.'", ")", "\n", "", "P", "=", "P", "/", "P", ".", "sum", "(", ")", "\n", "", "return", "TrueDiversity", "(", "P", ",", "alpha", ")", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetSetMeanIndTrueDiversity": [[595, 623], ["time.time.time", "hin_class.HIN.GetPathStochasticMatrix().tolil", "numpy.array", "ValueError", "numpy.array.append", "numpy.array.mean", "hin_class.HIN.GetPathStochasticMatrix", "start_og.objects_ids_queue.index", "TrueDiversity", "scipy.stats.mstats.gmean", "ValueError"], "methods", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetPathStochasticMatrix", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.truediversity.TrueDiversity"], ["", "def", "GetSetMeanIndTrueDiversity", "(", "self", ",", "relation_list", ",", "alpha", ",", "\n", "method", "=", "'geo'", ",", "\n", "start_object_subset", "=", "None", ",", "\n", "verbose", "=", "False", ")", ":", "\n", "        ", "t", "=", "TCounter", "(", ")", "\n", "\n", "if", "method", "not", "in", "[", "'wpm'", ",", "'ar'", ",", "'geo'", "]", ":", "\n", "            ", "raise", "ValueError", "(", "'Invalid mean method. Admitted methods are wpm (weighted power mean), ar (arithmetic), or geo (geometric).'", ")", "\n", "# Compute stochastic matrix for the path", "\n", "", "matrix", "=", "self", ".", "GetPathStochasticMatrix", "(", "relation_list", ")", ".", "tolil", "(", ")", "\n", "# Deleting proportional abundance of the sink start object", "\n", "PAs", "=", "matrix", ".", "data", "[", ":", "-", "1", "]", "\n", "# Selecting the propostional abundaces of the start object subset", "\n", "if", "start_object_subset", "is", "not", "None", ":", "\n", "            ", "positions", "=", "[", "start_og", ".", "objects_ids_queue", ".", "index", "(", "start_og", ".", "objects_ids", "[", "name", "]", ")", "for", "name", "in", "start_object_subset", "]", "\n", "PAs", "=", "PAs", "[", "positions", "]", "\n", "# computing the diversity of each proportional abundance", "\n", "", "diversities", "=", "[", "]", "\n", "for", "P", "in", "PAs", ":", "\n", "            ", "diversities", ".", "append", "(", "TrueDiversity", "(", "P", ",", "alpha", ")", ")", "\n", "", "diversities", "=", "np", ".", "array", "(", "diversities", ")", "\n", "# Computing the mean", "\n", "if", "method", "==", "'ar'", ":", "\n", "            ", "return", "diversities", ".", "mean", "(", ")", "\n", "", "elif", "method", "==", "'geo'", ":", "\n", "            ", "return", "gmean", "(", "diversities", ")", "\n", "", "elif", "method", "==", "'wpm'", ":", "\n", "            ", "raise", "ValueError", "(", "'Weighted Power Mean Method not implemented yet.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetObjectSetTrueDiversities": [[624, 640], ["hin_class.HIN.GetPathStochasticMatrix().tolil", "numpy.array", "diversities.append", "hin_class.HIN.GetPathStochasticMatrix", "start_og.objects_ids_queue.index", "TrueDiversity"], "methods", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetPathStochasticMatrix", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.truediversity.TrueDiversity"], ["", "", "def", "GetObjectSetTrueDiversities", "(", "self", ",", "relation_list", ",", "alpha", ",", "\n", "start_object_subset", "=", "None", ",", "\n", "verbose", "=", "False", ")", ":", "\n", "# Compute stochastic matrix for the path", "\n", "        ", "matrix", "=", "self", ".", "GetPathStochasticMatrix", "(", "relation_list", ")", ".", "tolil", "(", ")", "\n", "# Deleting proportional abundance of the sink start object", "\n", "PAs", "=", "matrix", ".", "data", "[", ":", "-", "1", "]", "\n", "# Selecting the propostional abundaces of the start object subset", "\n", "if", "start_object_subset", "is", "not", "None", ":", "\n", "            ", "positions", "=", "[", "start_og", ".", "objects_ids_queue", ".", "index", "(", "start_og", ".", "objects_ids", "[", "name", "]", ")", "for", "name", "in", "start_object_subset", "]", "\n", "PAs", "=", "PAs", "[", "positions", "]", "\n", "# computing the diversity of each proportional abundance", "\n", "", "diversities", "=", "[", "]", "\n", "for", "P", "in", "PAs", ":", "\n", "            ", "diversities", ".", "append", "(", "TrueDiversity", "(", "P", ",", "alpha", ")", ")", "\n", "", "return", "np", ".", "array", "(", "diversities", ")", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.SurprisalDivMes": [[645, 649], ["hin_class.HIN.table[].copy", "hin_class.HIN.table[].copy", "Surprisal"], "methods", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.other_measures.Surprisal"], ["", "def", "SurprisalDivMes", "(", "self", ",", "relation_name", ",", "popularity_relation_name", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "popularity_table", "=", "self", ".", "table", "[", "self", ".", "table", ".", "relation", "==", "popularity_relation_name", "]", ".", "copy", "(", "deep", "=", "True", ")", "\n", "recommended_table", "=", "self", ".", "table", "[", "self", ".", "table", ".", "relation", "==", "relation_name", "]", ".", "copy", "(", "deep", "=", "True", ")", "\n", "return", "Surprisal", "(", "popularity_table", ",", "recommended_table", ",", "verbose", "=", "verbose", ")", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.NoveltyDivMes": [[650, 655], ["hin_class.HIN.table[].copy", "sklearn.metrics.pairwise.cosine_similarity", "hin_class.HIN.GetLinkGroupStartObjectGroup().OjectPositionDicFromName", "Novelty", "hin_class.HIN.GetLinkGroup", "hin_class.HIN.GetLinkGroupStartObjectGroup"], "methods", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.object_group_class.ObjectGroup.OjectPositionDicFromName", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.other_measures.Novelty", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroup", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroupStartObjectGroup"], ["", "def", "NoveltyDivMes", "(", "self", ",", "relation_name", ",", "similarity_relation", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "table", "=", "self", ".", "table", "[", "self", ".", "table", ".", "relation", "==", "relation_name", "]", ".", "copy", "(", "deep", "=", "True", ")", "\n", "sim_matrix", "=", "cosine_similarity", "(", "self", ".", "GetLinkGroup", "(", "similarity_relation", ")", ".", "stochastic_matrix", ")", "\n", "object_position", "=", "self", ".", "GetLinkGroupStartObjectGroup", "(", "similarity_relation", ")", ".", "OjectPositionDicFromName", "(", ")", "\n", "return", "Novelty", "(", "table", ",", "sim_matrix", ",", "object_position", ",", "verbose", "=", "verbose", ")", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.IntraListSimilarityDivMes": [[656, 661], ["hin_class.HIN.table[].copy", "sklearn.metrics.pairwise.cosine_similarity", "hin_class.HIN.GetLinkGroupStartObjectGroup().OjectPositionDicFromName", "IntraListSimilarity", "hin_class.HIN.GetLinkGroup", "hin_class.HIN.GetLinkGroupStartObjectGroup"], "methods", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.object_group_class.ObjectGroup.OjectPositionDicFromName", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.other_measures.IntraListSimilarity", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroup", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroupStartObjectGroup"], ["", "def", "IntraListSimilarityDivMes", "(", "self", ",", "relation_name", ",", "similarity_relation", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "table", "=", "self", ".", "table", "[", "self", ".", "table", ".", "relation", "==", "relation_name", "]", ".", "copy", "(", "deep", "=", "True", ")", "\n", "sim_matrix", "=", "cosine_similarity", "(", "self", ".", "GetLinkGroup", "(", "similarity_relation", ")", ".", "stochastic_matrix", ")", "\n", "object_position", "=", "self", ".", "GetLinkGroupStartObjectGroup", "(", "similarity_relation", ")", ".", "OjectPositionDicFromName", "(", ")", "\n", "return", "IntraListSimilarity", "(", "table", ",", "sim_matrix", ",", "object_position", ",", "verbose", "=", "verbose", ")", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.PersonalisationDivMes": [[662, 665], ["hin_class.HIN.table[].copy", "Personalisation"], "methods", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.other_measures.Personalisation"], ["", "def", "PersonalisationDivMes", "(", "self", ",", "relation_name", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "table", "=", "self", ".", "table", "[", "self", ".", "table", ".", "relation", "==", "relation_name", "]", ".", "copy", "(", "deep", "=", "True", ")", "\n", "return", "Personalisation", "(", "table", ",", "verbose", "=", "verbose", ")", ";", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.object_group_class.ObjectGroup.__init__": [[24, 40], ["time.time.time", "VerboseMessage", "len", "list", "VerboseMessage", "range", "ETSec2ETTime", "time.time.time"], "methods", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.VerboseMessage", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.VerboseMessage", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.ETSec2ETTime"], ["def", "__init__", "(", "self", ",", "object_list", ",", "name", ",", "id", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "t", "=", "TCounter", "(", ")", "\n", "VerboseMessage", "(", "verbose", ",", "'Building Object Group %s...'", "%", "name", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "info", "=", "{", "}", "\n", "self", ".", "id", "=", "id", "\n", "self", ".", "object_list", "=", "object_list", "\n", "self", ".", "size", "=", "len", "(", "object_list", ")", "\n", "self", ".", "objects_ids_queue", "=", "list", "(", "range", "(", "self", ".", "size", ")", ")", "\n", "self", ".", "objects_names", "=", "{", "}", "# dictionary taking ids and giving object name", "\n", "self", ".", "objects_ids", "=", "{", "}", "# dictionary taking object name and giving idi", "\n", "for", "object_id", "in", "self", ".", "objects_ids_queue", ":", "\n", "            ", "self", ".", "objects_names", "[", "object_id", "]", "=", "object_list", "[", "object_id", "]", "\n", "self", ".", "objects_ids", "[", "object_list", "[", "object_id", "]", "]", "=", "object_id", "\n", "", "VerboseMessage", "(", "verbose", ",", "'Object Group %s built in %s.'", "%", "(", "name", ",", "ETSec2ETTime", "(", "TCounter", "(", ")", "-", "t", ")", ")", ")", "\n", "return", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.object_group_class.ObjectGroup.GetObjectQueuePos": [[45, 47], ["object_group_class.ObjectGroup.objects_ids_queue.index"], "methods", ["None"], ["", "def", "GetObjectQueuePos", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "self", ".", "objects_ids_queue", ".", "index", "(", "self", ".", "objects_ids", "[", "name", "]", ")", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.object_group_class.ObjectGroup.GetNames": [[48, 50], ["object_group_class.ObjectGroup.objects_ids.items"], "methods", ["None"], ["", "def", "GetNames", "(", "self", ")", ":", "\n", "        ", "return", "[", "k", "for", "k", ",", "v", "in", "self", ".", "objects_ids", ".", "items", "(", ")", "]", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.object_group_class.ObjectGroup.OjectPositionDicFromName": [[51, 56], ["object_group_class.ObjectGroup.objects_ids.items", "object_group_class.ObjectGroup.GetObjectQueuePos"], "methods", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.object_group_class.ObjectGroup.GetObjectQueuePos"], ["", "def", "OjectPositionDicFromName", "(", "self", ")", ":", "\n", "        ", "object_position", "=", "{", "}", "\n", "for", "obj", ",", "idx", "in", "self", ".", "objects_ids", ".", "items", "(", ")", ":", "\n", "            ", "object_position", "[", "obj", "]", "=", "self", ".", "GetObjectQueuePos", "(", "obj", ")", "\n", "", "return", "object_position", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.object_group_class.ObjectGroup.OjectNameDicFromPosition": [[57, 62], ["object_group_class.ObjectGroup.objects_ids.items", "object_group_class.ObjectGroup.GetObjectQueuePos"], "methods", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.object_group_class.ObjectGroup.GetObjectQueuePos"], ["", "def", "OjectNameDicFromPosition", "(", "self", ")", ":", "\n", "        ", "object_name", "=", "{", "}", "\n", "for", "obj", ",", "idx", "in", "self", ".", "objects_ids", ".", "items", "(", ")", ":", "\n", "            ", "object_name", "[", "self", ".", "GetObjectQueuePos", "(", "obj", ")", "]", "=", "obj", "\n", "", "return", "object_name", ";", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.link_group_functions.StochasticMatrix": [[13, 39], ["table[].groupby().size().reset_index().rename", "VerboseMessage", "copy.deepcopy", "copy.deepcopy", "edgelist[].map", "edgelist[].map", "numpy.setdiff1d", "pandas.DataFrame", "edgelist.append.append", "edgelist.append.append", "scipy.sparse.coo_matrix", "sklearn.preprocessing.normalize", "edgelist.append.row.unique", "numpy.zeros", "numpy.zeros", "numpy.ones", "scipy.sparse.csr_matrix", "table[].groupby().size().reset_index", "numpy.ones", "table[].groupby().size", "table[].groupby"], "function", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.VerboseMessage"], ["def", "StochasticMatrix", "(", "table", ",", "start_og", ",", "end_og", ",", "verbose", "=", "False", ")", ":", "\n", "# Edge list with multiplicity", "\n", "    ", "edgelist", "=", "table", "[", "[", "'start_object'", ",", "'end_object'", "]", "]", ".", "groupby", "(", "[", "'start_object'", ",", "'end_object'", "]", ")", ".", "size", "(", ")", ".", "reset_index", "(", ")", ".", "rename", "(", "columns", "=", "{", "0", ":", "'multiplicity'", "}", ")", "\n", "# Retrieving dictionaries with objects' position as rows and columns", "\n", "VerboseMessage", "(", "verbose", ",", "'dictionaries'", ")", "\n", "s_dic", "=", "copy", ".", "deepcopy", "(", "start_og", ".", "objects_ids", ")", "\n", "d_dic", "=", "copy", ".", "deepcopy", "(", "end_og", ".", "objects_ids", ")", "\n", "# computing row and columns", "\n", "edgelist", "[", "'row'", "]", "=", "edgelist", "[", "'start_object'", "]", ".", "map", "(", "s_dic", ")", "\n", "edgelist", "[", "'col'", "]", "=", "edgelist", "[", "'end_object'", "]", ".", "map", "(", "d_dic", ")", "\n", "# Connecting unconnected start objects to sink", "\n", "unconnected_object_ids", "=", "np", ".", "setdiff1d", "(", "start_og", ".", "objects_ids_queue", ",", "edgelist", ".", "row", ".", "unique", "(", ")", ")", "\n", "\n", "# Treating connections to sink nodes", "\n", "\n", "# Including sink nodes to group row/col dictionaries", "\n", "appendable_dic", "=", "{", "'start_object'", ":", "np", ".", "zeros", "(", "unconnected_object_ids", ".", "size", ")", ",", "'end_object'", ":", "np", ".", "zeros", "(", "unconnected_object_ids", ".", "size", ")", ",", "'row'", ":", "unconnected_object_ids", ",", "'col'", ":", "end_og", ".", "size", "*", "np", ".", "ones", "(", "unconnected_object_ids", ".", "size", ")", ",", "'multiplicity'", ":", "np", ".", "ones", "(", "unconnected_object_ids", ".", "size", ")", "}", "\n", "appendable_sink_df", "=", "pd", ".", "DataFrame", "(", "appendable_dic", ")", "\n", "edgelist", "=", "edgelist", ".", "append", "(", "appendable_sink_df", ",", "ignore_index", "=", "True", ")", "\n", "# linking the two sinks", "\n", "edgelist", "=", "edgelist", ".", "append", "(", "{", "'start_object'", ":", "''", ",", "'end_object'", ":", "''", ",", "'row'", ":", "start_og", ".", "size", ",", "'col'", ":", "end_og", ".", "size", ",", "'multiplicity'", ":", "1", "}", ",", "ignore_index", "=", "True", ")", "\n", "\n", "# constructing matrix", "\n", "coo", "=", "sparse", ".", "coo_matrix", "(", "(", "edgelist", ".", "multiplicity", ".", "values", ",", "\n", "(", "edgelist", ".", "row", ".", "values", ",", "edgelist", ".", "col", ".", "values", ")", ")", ",", "shape", "=", "(", "start_og", ".", "size", "+", "1", ",", "end_og", ".", "size", "+", "1", ")", ")", "\n", "return", "normalize", "(", "sparse", ".", "csr_matrix", "(", "coo", ")", ",", "norm", "=", "'l1'", ",", "axis", "=", "1", ")", ";", "\n", "", ""]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_functions.CheckTable": [[3, 26], ["table[].astype", "table[].astype", "table[].astype", "table[].astype", "table[].astype", "table[].astype", "table[].astype", "table[].astype().apply", "table.drop_duplicates", "print", "table[].astype", "pandas.Timestamp"], "function", ["None"], ["def", "CheckTable", "(", "table", ")", ":", "\n", "\n", "# Checkingtable.fillna('',inplace=True)", "\n", "    ", "table", "[", "'relation'", "]", "=", "table", "[", "'relation'", "]", ".", "astype", "(", "str", ")", "\n", "table", "[", "'start_group'", "]", "=", "table", "[", "'start_group'", "]", ".", "astype", "(", "str", ")", "\n", "table", "[", "'start_object'", "]", "=", "table", "[", "'start_object'", "]", ".", "astype", "(", "str", ")", "\n", "table", "[", "'start_group'", "]", "=", "table", "[", "'start_group'", "]", ".", "astype", "(", "str", ")", "\n", "table", "[", "'start_object'", "]", "=", "table", "[", "'start_object'", "]", ".", "astype", "(", "str", ")", "\n", "table", "[", "'end_group'", "]", "=", "table", "[", "'end_group'", "]", ".", "astype", "(", "str", ")", "\n", "table", "[", "'end_object'", "]", "=", "table", "[", "'end_object'", "]", ".", "astype", "(", "str", ")", "\n", "table", "[", "'timestamp'", "]", "=", "table", "[", "'timestamp'", "]", ".", "astype", "(", "str", ")", ".", "apply", "(", "lambda", "x", ":", "pd", ".", "Timestamp", "(", "x", ")", ")", "\n", "\n", "# dropping duplicates", "\n", "n_rows", "=", "table", ".", "shape", "[", "0", "]", "\n", "table", ".", "drop_duplicates", "(", "inplace", "=", "True", ")", "\n", "if", "n_rows", "!=", "table", ".", "shape", "[", "0", "]", ":", "\n", "        ", "print", "(", "'WARNING: Dataset had duplicated lines that were eliminated.'", ")", "\n", "\n", "# Things to check (TODO)", "\n", "# - Conformity: that link groups (relations) have all links starting and ending in the same groups of objects", "\n", "# - No multi-link inside a link group (relation)", "\n", "\n", "", "return", "table", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_functions.CheckPath": [[27, 39], ["isinstance", "TypeError", "TypeError", "type"], "function", ["None"], ["", "def", "CheckPath", "(", "relation_list", ")", ":", "\n", "\n", "# Checking that object is list", "\n", "    ", "if", "not", "isinstance", "(", "relation_list", ",", "list", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'Argument is not a list.'", ")", "\n", "# Checking that elements of list are names", "\n", "", "for", "e", "in", "relation_list", ":", "\n", "        ", "if", "not", "type", "(", "e", ")", "==", "str", ":", "\n", "            ", "raise", "TypeError", "(", "'An element of the path list are not string.'", ")", "\n", "# TODO: Check conformity of the path", "\n", "\n", "", "", "return", "relation_list", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_functions.GetObjectListFromTable": [[44, 49], ["list", "list", "list", "set"], "function", ["None"], ["", "def", "GetObjectListFromTable", "(", "table", ")", ":", "\n", "    ", "o_list", "=", "list", "(", "table", ".", "start_object", ")", "\n", "o_list", "+=", "list", "(", "table", ".", "end_object", ")", "\n", "o_list", "=", "list", "(", "set", "(", "o_list", ")", ")", "\n", "return", "o_list", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_functions.GetObjectsFromTableWithGroup": [[50, 55], ["list", "list", "list", "set"], "function", ["None"], ["", "def", "GetObjectsFromTableWithGroup", "(", "table", ",", "object_group_name", ")", ":", "\n", "    ", "o_list", "=", "list", "(", "table", "[", "table", ".", "start_group", "==", "object_group_name", "]", ".", "start_object", ")", "\n", "o_list", "+=", "list", "(", "table", "[", "table", ".", "end_group", "==", "object_group_name", "]", ".", "end_object", ")", "\n", "o_list", "=", "list", "(", "set", "(", "o_list", ")", ")", "\n", "return", "o_list", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_graphics.plot_hin": [[7, 41], ["networkx.MultiDiGraph", "table.iterrows", "networkx.draw_networkx_nodes", "networkx.draw_networkx_edges", "matplotlib.axis", "nx.MultiDiGraph.add_edge", "networkx.spring_layout", "networkx.draw_networkx_labels", "networkx.draw_networkx_edge_labels", "matplotlib.savefig", "matplotlib.show", "networkx.spectral_layout", "nx.MultiDiGraph.edges", "networkx.random_layout", "networkx.shell_layout", "ValueError"], "function", ["None"], ["def", "plot_hin", "(", "table", ",", "filename", "=", "None", ",", "\n", "node_size", "=", "700", ",", "layout", "=", "'spring'", ",", "arrowsize", "=", "10", ",", "\n", "edge_labels", "=", "True", ",", "node_labels", "=", "True", ")", ":", "\n", "\n", "\t", "g", "=", "nx", ".", "MultiDiGraph", "(", ")", "\n", "for", "_", ",", "row", "in", "table", ".", "iterrows", "(", ")", ":", "\n", "\t    ", "g", ".", "add_edge", "(", "row", ".", "start_group", ",", "row", ".", "end_group", ",", "label", "=", "row", ".", "relation", ")", "\n", "\n", "", "if", "layout", "==", "'spring'", ":", "\n", "\t\t", "pos", "=", "nx", ".", "spring_layout", "(", "g", ")", "\n", "", "elif", "layout", "==", "'spectral'", ":", "\n", "\t\t", "pos", "=", "nx", ".", "spectral_layout", "(", "g", ")", "\n", "", "elif", "layout", "==", "'random'", ":", "\n", "\t\t", "pos", "=", "nx", ".", "random_layout", "(", "g", ")", "\n", "", "elif", "layout", "==", "'shell'", ":", "\n", "\t\t", "pos", "=", "nx", ".", "shell_layout", "(", "g", ")", "\n", "", "else", ":", "\n", "\t\t", "raise", "ValueError", "(", "'Layout %s not recognized.'", "%", "layout", ")", "\n", "\n", "", "edge_labels", "=", "{", "(", "u", ",", "v", ")", ":", "d", "[", "'label'", "]", "for", "u", ",", "v", ",", "d", "in", "g", ".", "edges", "(", "data", "=", "True", ")", "}", "\n", "\n", "nx", ".", "draw_networkx_nodes", "(", "g", ",", "pos", ",", "node_size", "=", "node_size", ",", "arrowsize", "=", "arrowsize", ")", "\n", "nx", ".", "draw_networkx_edges", "(", "g", ",", "pos", ")", "\n", "if", "node_labels", ":", "\n", "\t\t", "nx", ".", "draw_networkx_labels", "(", "g", ",", "pos", ")", "\n", "", "if", "edge_labels", ":", "\n", "\t\t", "nx", ".", "draw_networkx_edge_labels", "(", "g", ",", "pos", ",", "edge_labels", "=", "edge_labels", ")", "\n", "", "plt", ".", "axis", "(", "'off'", ")", "\n", "if", "filename", "is", "not", "None", ":", "\n", "\t\t", "plt", ".", "savefig", "(", "filename", ")", "\n", "", "else", ":", "\n", "\t\t", "plt", ".", "show", "(", ")", "\n", "\n", "", "return", ";", "", "", ""]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.link_group_class.LinkGroup.__init__": [[32, 63], ["time.time.time", "VerboseMessage", "VerboseMessage", "link_group_functions.StochasticMatrix", "ETSec2ETTime", "time.time.time"], "methods", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.VerboseMessage", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.VerboseMessage", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.link_group_functions.StochasticMatrix", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.ETSec2ETTime"], ["def", "__init__", "(", "self", ",", "table", ",", "name", ",", "id", ",", "start_og", ",", "end_og", ",", "compute_stochastic_matrix", "=", "True", ",", "\n", "verbose", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        LinkTypeClass\n\n        Parameters:\n        -----------\n        name : str\n            Name of the group of links (relation).\n        id : int\n            Global id of the group of links.\n        start_og : ObjectGroup Class\n\n        end_og : ObjectGroup Class\n\n        table : pd.DataFram\n        \"\"\"", "\n", "t", "=", "TCounter", "(", ")", "\n", "VerboseMessage", "(", "verbose", ",", "'Building Link Group %s...'", "%", "name", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "info", "=", "{", "}", "\n", "self", ".", "id", "=", "id", "\n", "self", ".", "start_id", "=", "start_og", ".", "id", "\n", "self", ".", "end_id", "=", "end_og", ".", "id", "\n", "self", ".", "size", "=", "table", ".", "shape", "[", "0", "]", "\n", "if", "compute_stochastic_matrix", ":", "\n", "            ", "self", ".", "stochastic_matrix", "=", "StochasticMatrix", "(", "table", ",", "start_og", ",", "end_og", ",", "verbose", "=", "verbose", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "stochastic_matrix", "=", "None", "\n", "", "VerboseMessage", "(", "verbose", ",", "'Link Group %s built in %s.'", "%", "(", "name", ",", "ETSec2ETTime", "(", "TCounter", "(", ")", "-", "t", ")", ")", ")", "\n", "return", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.datasets.generators.random_hin_generator": [[5, 54], ["pandas.DataFrame", "enumerate", "object_type_name.append", "object_type_size.append", "link_type_name.append", "link_type_start.append", "link_type_end.append", "link_type_density.append", "object_type_name.index", "object_type_name.index", "int", "print", "print"], "function", ["None"], ["def", "random_hin_generator", "(", "object_data", ",", "link_data", ")", ":", "\n", "# Format:", "\n", "# object_data: list of 2-tuples with name (str) of the object type and", "\n", "# number (int) of objects of that type", "\n", "# object_link: list of 4-tuples with name (str) of link type,", "\n", "# the name of the starting object type (str), the name of the ending object", "\n", "# type (str), and the density (float) of the relation.", "\n", "\n", "# Initial Checks", "\n", "#", "\n", "#", "\n", "#", "\n", "#", "\n", "#", "\n", "#", "\n", "#", "\n", "\n", "\n", "# Retrieving object data", "\n", "    ", "object_type_name", "=", "[", "]", "\n", "object_type_size", "=", "[", "]", "\n", "for", "name", ",", "size", "in", "object_data", ":", "\n", "        ", "object_type_name", ".", "append", "(", "name", ")", "\n", "object_type_size", ".", "append", "(", "size", ")", "\n", "\n", "# Retrieving link data", "\n", "", "link_type_name", "=", "[", "]", "\n", "link_type_start", "=", "[", "]", "\n", "link_type_end", "=", "[", "]", "\n", "link_type_density", "=", "[", "]", "\n", "for", "name", ",", "start", ",", "end", ",", "density", "in", "link_data", ":", "\n", "        ", "link_type_name", ".", "append", "(", "name", ")", "\n", "link_type_start", ".", "append", "(", "start", ")", "\n", "link_type_end", ".", "append", "(", "end", ")", "\n", "link_type_density", ".", "append", "(", "density", ")", "\n", "\n", "", "df", "=", "pd", ".", "DataFrame", "(", "columns", "=", "[", "'link type'", ",", "'start type'", ",", "'start'", ",", "'end type'", ",", "'end'", ",", "'score'", ",", "'timestamp'", "]", ")", "\n", "\n", "\n", "# For each link type, compute the number of links for density and put them ", "\n", "# into the dataframe", "\n", "for", "i", ",", "link_type", "in", "enumerate", "(", "link_type_name", ")", ":", "\n", "        ", "start_index", "=", "object_type_name", ".", "index", "(", "link_type_start", "[", "i", "]", ")", "\n", "end_index", "=", "object_type_name", ".", "index", "(", "link_type_end", "[", "i", "]", ")", "\n", "number_of_links", "=", "int", "(", "object_type_size", "[", "start_index", "]", "*", "object_type_size", "[", "end_index", "]", "*", "link_type_density", "[", "i", "]", ")", "\n", "print", "(", "link_type", ")", "\n", "print", "(", "number_of_links", ")", "\n", "\n", "", "return", "object_type_name", ",", "object_type_size", ";", "\n", "", ""]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.classic_measures.Richeness": [[7, 15], ["numpy.array", "utils.CheckDistribution", "utils.TrimDistribution", "utils.RenormalizeDistribution"], "function", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.utils.CheckDistribution", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.utils.TrimDistribution", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.utils.RenormalizeDistribution"], ["def", "Richeness", "(", "P", ",", "renormalize", "=", "False", ")", ":", "\n", "# Convert, check, trim, and renormalize", "\n", "    ", "P", "=", "np", ".", "array", "(", "P", ")", "\n", "CheckDistribution", "(", "P", ")", "\n", "P", "=", "TrimDistribution", "(", "P", ")", "\n", "if", "renormalize", ":", "\n", "        ", "P", "=", "RenormalizeDistribution", "(", "P", ")", "\n", "", "return", "P", ".", "size", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.classic_measures.ShannonEntropy": [[16, 25], ["numpy.array", "utils.CheckDistribution", "utils.TrimDistribution", "scipy.stats.entropy", "utils.RenormalizeDistribution"], "function", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.utils.CheckDistribution", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.utils.TrimDistribution", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.utils.RenormalizeDistribution"], ["", "def", "ShannonEntropy", "(", "P", ",", "base", "=", "2", ",", "renormalize", "=", "False", ")", ":", "\n", "# Convert, check, trim, and renormalize", "\n", "    ", "P", "=", "np", ".", "array", "(", "P", ")", "\n", "CheckDistribution", "(", "P", ")", "\n", "P", "=", "TrimDistribution", "(", "P", ")", "\n", "if", "renormalize", ":", "\n", "        ", "P", "=", "RenormalizeDistribution", "(", "P", ")", "\n", "# Computing entropy", "\n", "", "return", "entropy", "(", "P", ",", "base", "=", "base", ")", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.classic_measures.ShannonEvenness": [[26, 35], ["numpy.array", "utils.CheckDistribution", "utils.TrimDistribution", "utils.RenormalizeDistribution", "classic_measures.ShannonEntropy"], "function", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.utils.CheckDistribution", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.utils.TrimDistribution", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.utils.RenormalizeDistribution", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.classic_measures.ShannonEntropy"], ["", "def", "ShannonEvenness", "(", "P", ",", "base", "=", "2", ",", "renormalize", "=", "False", ")", ":", "\n", "# Convert, check, trim, and renormalize", "\n", "    ", "P", "=", "np", ".", "array", "(", "P", ")", "\n", "CheckDistribution", "(", "P", ")", "\n", "P", "=", "TrimDistribution", "(", "P", ")", "\n", "if", "renormalize", ":", "\n", "        ", "P", "=", "RenormalizeDistribution", "(", "P", ")", "\n", "# Computing entropy", "\n", "", "return", "ShannonEntropy", "(", "P", ",", "base", "=", "base", ")", "/", "P", ".", "size", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.classic_measures.HHI": [[36, 45], ["numpy.array", "utils.CheckDistribution", "utils.TrimDistribution", "numpy.power().sum", "utils.RenormalizeDistribution", "numpy.power"], "function", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.utils.CheckDistribution", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.utils.TrimDistribution", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.utils.RenormalizeDistribution"], ["", "def", "HHI", "(", "P", ",", "renormalize", "=", "False", ")", ":", "# Herfindahl-Hirschman Index", "\n", "# Convert, check, trim, and renormalize", "\n", "    ", "P", "=", "np", ".", "array", "(", "P", ")", "\n", "CheckDistribution", "(", "P", ")", "\n", "P", "=", "TrimDistribution", "(", "P", ")", "\n", "if", "renormalize", ":", "\n", "        ", "P", "=", "RenormalizeDistribution", "(", "P", ")", "\n", "# Computing entropy", "\n", "", "return", "np", ".", "power", "(", "P", ",", "2", ")", ".", "sum", "(", ")", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.classic_measures.GiniIndex": [[46, 56], ["numpy.array", "utils.CheckDistribution", "utils.RenormalizeDistribution", "numpy.abs().sum", "numpy.abs", "numpy.subtract.outer"], "function", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.utils.CheckDistribution", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.utils.RenormalizeDistribution"], ["", "def", "GiniIndex", "(", "P", ",", "renormalize", "=", "False", ")", ":", "\n", "# (Warning: This is a concise implementation, but it is O(n**2)", "\n", "# in time and memory, where n = len(x).  ", "\n", "# Convert, check.", "\n", "    ", "P", "=", "np", ".", "array", "(", "P", ")", "\n", "CheckDistribution", "(", "P", ")", "\n", "if", "renormalize", ":", "\n", "        ", "P", "=", "RenormalizeDistribution", "(", "P", ")", "\n", "# Computing Gini Index", "\n", "", "return", "np", ".", "abs", "(", "np", ".", "subtract", ".", "outer", "(", "P", ",", "P", ")", ")", ".", "sum", "(", ")", "/", "(", "2.0", "*", "P", ".", "size", ")", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.classic_measures.BPI": [[57, 64], ["numpy.array", "utils.CheckDistribution", "utils.RenormalizeDistribution.max", "utils.RenormalizeDistribution"], "function", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.utils.CheckDistribution", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.utils.RenormalizeDistribution"], ["", "def", "BPI", "(", "P", ",", "renormalize", "=", "False", ")", ":", "# Berger-Parker Index", "\n", "# Convert, check, and renormalize", "\n", "    ", "P", "=", "np", ".", "array", "(", "P", ")", "\n", "CheckDistribution", "(", "P", ")", "\n", "if", "renormalize", ":", "\n", "        ", "P", "=", "RenormalizeDistribution", "(", "P", ")", "\n", "", "return", "P", ".", "max", "(", ")", ";", "", "", ""]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.truediversity.TrueDiversity": [[4, 20], ["numpy.array", "utils.CheckDistribution", "utils.RenormalizeDistribution", "numpy.power().prod", "numpy.power", "utils.RenormalizeDistribution.max", "numpy.power().sum", "numpy.power", "numpy.power"], "function", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.utils.CheckDistribution", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.utils.RenormalizeDistribution"], ["def", "TrueDiversity", "(", "P", ",", "alpha", ",", "renormalize", "=", "False", ")", ":", "\n", "# Convert, check, trim, and renormalize", "\n", "    ", "P", "=", "np", ".", "array", "(", "P", ")", "\n", "CheckDistribution", "(", "P", ")", "\n", "# P=TrimDistribution(P)", "\n", "if", "renormalize", ":", "\n", "        ", "P", "=", "RenormalizeDistribution", "(", "P", ")", "\n", "# Computing the True Diversity", "\n", "", "if", "alpha", "==", "0", ":", "\n", "        ", "return", "P", ".", "size", "\n", "", "elif", "alpha", "==", "1", ":", "\n", "        ", "return", "1.0", "/", "np", ".", "power", "(", "P", ",", "P", ")", ".", "prod", "(", ")", "\n", "", "elif", "alpha", ">", "1e3", ":", "\n", "        ", "return", "1.0", "/", "P", ".", "max", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "power", "(", "np", ".", "power", "(", "P", ",", "alpha", ")", ".", "sum", "(", ")", ",", "1", "/", "(", "1", "-", "alpha", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.utils.CheckDistribution": [[3, 9], ["numpy.abs", "ValueError", "ValueError", "numpy.sum", "P.sum"], "function", ["None"], ["def", "CheckDistribution", "(", "P", ")", ":", "\n", "    ", "if", "np", ".", "abs", "(", "np", ".", "sum", "(", "P", ")", "-", "1", ")", ">", "1e-6", ":", "\n", "        ", "raise", "ValueError", "(", "'P does not sume 1 (sum=%f)'", "%", "P", ".", "sum", "(", ")", ")", "\n", "", "if", "P", "[", "0", ">", "P", "]", ".", "size", "!=", "0", ":", "\n", "        ", "raise", "ValueError", "(", "'Some elements of P are negative.'", ")", "\n", "", "return", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.utils.TrimDistribution": [[10, 16], ["numpy.array", "numpy.abs", "ValueError", "np.array.sum"], "function", ["None"], ["", "def", "TrimDistribution", "(", "P", ",", "tol", "=", "1e-8", ")", ":", "\n", "    ", "P", "=", "np", ".", "array", "(", "P", ")", "\n", "P", "=", "P", "[", "P", ">", "tol", "]", "\n", "if", "np", ".", "abs", "(", "P", ".", "sum", "(", ")", "-", "1", ")", ">", "tol", ":", "\n", "        ", "raise", "ValueError", "(", "'Trimming the probability distribution resulted in it not summing up to zero.'", ")", "\n", "", "return", "P", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.utils.RenormalizeDistribution": [[17, 23], ["numpy.array", "ValueError", "np.array.sum", "numpy.abs", "np.array.sum"], "function", ["None"], ["", "def", "RenormalizeDistribution", "(", "P", ")", ":", "\n", "    ", "P", "=", "np", ".", "array", "(", "P", ")", "\n", "P", "=", "P", "[", ":", "-", "1", "]", "\n", "if", "not", "np", ".", "abs", "(", "P", ".", "sum", "(", ")", ")", ">", "1e-8", ":", "\n", "        ", "raise", "ValueError", "(", "'Cannot renormalize: all the mas was int he sink node.'", ")", "\n", "", "return", "P", "/", "P", ".", "sum", "(", ")", ";", "\n", "", ""]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.other_measures.Surprisal": [[10, 41], ["popularity_table[].groupby().count", "end_object_si.apply.apply", "recommended_table[].copy", "recommended_table[].mean", "time.time", "VerboseMessage", "popularity_table.start_object.unique", "numpy.isin().all", "ValueError", "recommended_table[].copy.end_object.map().copy", "VerboseMessage", "popularity_table[].groupby", "numpy.log2", "numpy.isin", "recommended_table[].copy.end_object.map", "ETSec2ETTime", "recommended_table[].copy.end_object.isin", "recommended_table[].copy.end_object.unique", "popularity_table.end_object.unique", "time.time"], "function", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.VerboseMessage", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.VerboseMessage", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.ETSec2ETTime"], ["def", "Surprisal", "(", "popularity_table", ",", "recommended_table", ",", "verbose", "=", "False", ")", ":", "\n", "\n", "    ", "\"\"\"\n    From:\n    ZHOU, Tao, KUSCSIK, Zolt\u00e1n, LIU, Jian-Guo, et al.\n    Solving the apparent diversity-accuracy dilemma of recommender systems.\n    Proceedings of the National Academy of Sciences,\n    2010, vol. 107, no 10, p. 4511-4515.\n    \"\"\"", "\n", "\n", "if", "verbose", ":", "\n", "        ", "t", "=", "TCounter", "(", ")", "\n", "VerboseMessage", "(", "verbose", ",", "'Computing Surprisal of %s relative to %s...'", "%", "(", "recommended_table", ".", "relation", ".", "iloc", "[", "0", "]", ",", "popularity_table", ".", "relation", ".", "iloc", "[", "0", "]", ")", ")", "\n", "# Computing self-information for each end objects based on previous choices", "\n", "", "popularity_table", ".", "loc", "[", ":", ",", "'degree'", "]", "=", "1", "\n", "end_object_si", "=", "popularity_table", "[", "[", "'end_object'", ",", "'degree'", "]", "]", ".", "groupby", "(", "'end_object'", ")", ".", "count", "(", ")", "\n", "number_of_start_objects", "=", "popularity_table", ".", "start_object", ".", "unique", "(", ")", ".", "size", "\n", "end_object_si", "=", "end_object_si", ".", "apply", "(", "lambda", "x", ":", "np", ".", "log2", "(", "number_of_start_objects", "/", "x", ")", ")", "\n", "recommended_table", "=", "recommended_table", "[", "recommended_table", ".", "end_object", ".", "isin", "(", "end_object_si", ".", "index", ")", "]", ".", "copy", "(", "deep", "=", "True", ")", "\n", "# Checking that all recommended end objects have a self-information value", "\n", "if", "not", "np", ".", "isin", "(", "recommended_table", ".", "end_object", ".", "unique", "(", ")", ",", "popularity_table", ".", "end_object", ".", "unique", "(", ")", ")", ".", "all", "(", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Some recommended end objects do not have self-information value.'", ")", "\n", "# print('WARNING: Some recommended end objects do not have self-information value.')", "\n", "# Computing each list's self-information", "\n", "", "recommended_table", "[", "'end_object_si'", "]", "=", "recommended_table", ".", "end_object", ".", "map", "(", "end_object_si", ".", "iloc", "[", ":", ",", "0", "]", ")", ".", "copy", "(", "deep", "=", "True", ")", ".", "values", "\n", "# Surpisal is then the mean self-information for all users", "\n", "surprisal", "=", "recommended_table", "[", "'end_object_si'", "]", ".", "mean", "(", ")", "\n", "\n", "if", "verbose", ":", "\n", "        ", "VerboseMessage", "(", "verbose", ",", "'Surprisal computed in %s.'", "%", "(", "ETSec2ETTime", "(", "TCounter", "(", ")", "-", "t", ")", ")", ")", "\n", "", "return", "surprisal", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.other_measures.Novelty": [[43, 82], ["pandas.DataFrame", "recommended_table.start_object.unique", "[].apply", "start_object_data[].map", "start_object_data[].apply", "start_object_data[].copy", "start_object_data[].apply", "start_object_data[].copy.apply", "start_object_data[].mean", "time.time", "VerboseMessage", "VerboseMessage", "other_measures.dissimilarity", "recommended_table[].groupby", "ETSec2ETTime", "time.time"], "function", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.VerboseMessage", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.VerboseMessage", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.other_measures.dissimilarity", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.ETSec2ETTime"], ["", "def", "Novelty", "(", "recommended_table", ",", "similarity_matrix", ",", "object_position", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    From:\n    Equation (2) of\n    HURLEY, Neil et ZHANG, Mi.\n    Novelty and diversity in top-n recommendation--analysis and evaluation.\n    ACM Transactions on Internet Technology (TOIT), 2011, vol. 10, no 4, p. 14.\n\n    - The novelty of each item in the list is computed with respect to all other\n    items in the list. This results in a novelty value for each recommended list.\n    - The global novelty is the mean of the novelty of the lists.\n    - The distance d is computed as a dissimilarity, i.e.:\n            d = 1 - similarity\n      where the similarity is the cosine similarity given to the funcion as a\n      similarity matrix.\n    \"\"\"", "\n", "if", "verbose", ":", "\n", "        ", "t", "=", "TCounter", "(", ")", "\n", "VerboseMessage", "(", "verbose", ",", "'Computing Novelty of %s...'", "%", "(", "recommended_table", ".", "relation", ".", "iloc", "[", "0", "]", ")", ")", "\n", "# Create DataFrame with information on each start object needed for the computation", "\n", "", "start_object_data", "=", "pd", ".", "DataFrame", "(", ")", "\n", "# Get names of objects", "\n", "start_object_data", "[", "'object'", "]", "=", "recommended_table", ".", "start_object", ".", "unique", "(", ")", "\n", "# Get the recommendation list made to each object", "\n", "reco_lists", "=", "recommended_table", "[", "[", "'start_object'", ",", "'end_object'", "]", "]", ".", "groupby", "(", "'start_object'", ")", "[", "'end_object'", "]", ".", "apply", "(", "list", ")", "\n", "start_object_data", "[", "'reco_list'", "]", "=", "start_object_data", "[", "'object'", "]", ".", "map", "(", "reco_lists", ")", "\n", "# Get the list size", "\n", "start_object_data", "[", "'list_size'", "]", "=", "start_object_data", "[", "'reco_list'", "]", ".", "apply", "(", "len", ")", "\n", "# Checking list_size", "\n", "start_object_data", "=", "start_object_data", "[", "start_object_data", ".", "list_size", ">", "1", "]", ".", "copy", "(", "deep", "=", "True", ")", "\n", "# Compute de dissimilarity of the list using the similarity matrix", "\n", "start_object_data", "[", "'dissimilarity'", "]", "=", "start_object_data", "[", "'reco_list'", "]", ".", "apply", "(", "lambda", "x", ":", "dissimilarity", "(", "similarity_matrix", ",", "x", ",", "object_position", ")", ")", "\n", "# Compute the novelty", "\n", "start_object_data", "[", "'novelty'", "]", "=", "start_object_data", ".", "apply", "(", "lambda", "x", ":", "x", ".", "dissimilarity", "/", "(", "x", ".", "list_size", "*", "(", "x", ".", "list_size", "-", "1", ")", ")", ",", "axis", "=", "1", ")", "\n", "# Return the mean novelty of all recommendation lists", "\n", "novelty", "=", "start_object_data", "[", "'novelty'", "]", ".", "mean", "(", ")", "\n", "if", "verbose", ":", "\n", "        ", "VerboseMessage", "(", "verbose", ",", "'Novelty computed in %s.'", "%", "(", "ETSec2ETTime", "(", "TCounter", "(", ")", "-", "t", ")", ")", ")", "\n", "", "return", "novelty", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.other_measures.IntraListSimilarity": [[83, 107], ["pandas.DataFrame", "recommended_table.start_object.unique", "[].apply", "start_object_data[].map", "start_object_data[].apply", "start_object_data[].mean", "time.time", "VerboseMessage", "VerboseMessage", "other_measures.similarity", "recommended_table[].groupby", "ETSec2ETTime", "time.time"], "function", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.VerboseMessage", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.VerboseMessage", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.other_measures.similarity", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.ETSec2ETTime"], ["", "def", "IntraListSimilarity", "(", "recommended_table", ",", "similarity_matrix", ",", "object_position", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    ZIEGLER, Cai-Nicolas, MCNEE, Sean M., KONSTAN, Joseph A., et al.\n    Improving recommendation lists through topic diversification.\n    Proceedings of the 14th international conference on World Wide Web.\n    ACM, 2005. p. 22-32.\n    \"\"\"", "\n", "if", "verbose", ":", "\n", "        ", "t", "=", "TCounter", "(", ")", "\n", "VerboseMessage", "(", "verbose", ",", "'Computing Intra-List Similarity of %s...'", "%", "(", "recommended_table", ".", "relation", ".", "iloc", "[", "0", "]", ")", ")", "\n", "# Create DataFrame with information on each start object needed for the computation", "\n", "", "start_object_data", "=", "pd", ".", "DataFrame", "(", ")", "\n", "# Get names of objects", "\n", "start_object_data", "[", "'object'", "]", "=", "recommended_table", ".", "start_object", ".", "unique", "(", ")", "\n", "# Get the recommendation list made to each object", "\n", "reco_lists", "=", "recommended_table", "[", "[", "'start_object'", ",", "'end_object'", "]", "]", ".", "groupby", "(", "'start_object'", ")", "[", "'end_object'", "]", ".", "apply", "(", "list", ")", "\n", "start_object_data", "[", "'reco_list'", "]", "=", "start_object_data", "[", "'object'", "]", ".", "map", "(", "reco_lists", ")", "\n", "# Compute de Intra List Similarity of the list using the similarity matrix", "\n", "start_object_data", "[", "'ILS'", "]", "=", "start_object_data", "[", "'reco_list'", "]", ".", "apply", "(", "lambda", "x", ":", "similarity", "(", "similarity_matrix", ",", "x", ",", "object_position", ")", ")", "\n", "# Return the mean Intra List Similarity of all recommendation lists", "\n", "ILS", "=", "start_object_data", "[", "'ILS'", "]", ".", "mean", "(", ")", "\n", "if", "verbose", ":", "\n", "        ", "VerboseMessage", "(", "verbose", ",", "'Intra-List Similarity computed in %s.'", "%", "(", "ETSec2ETTime", "(", "TCounter", "(", ")", "-", "t", ")", ")", ")", "\n", "", "return", "ILS", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.other_measures.Personalisation": [[108, 140], ["recommended_table[].unique", "recommended_table[].map", "pandas.DataFrame", "recommended_table.start_object.unique", "[].apply", "start_object_data[].map", "list", "range", "time.time", "VerboseMessage", "pandas.Series", "range", "VerboseMessage", "len", "range", "recommended_table[].groupby", "len", "other_measures.jaccard", "ETSec2ETTime", "time.time"], "function", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.VerboseMessage", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.VerboseMessage", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.other_measures.jaccard", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.ETSec2ETTime"], ["", "def", "Personalisation", "(", "recommended_table", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    From:\n    ZHOU, Tao, KUSCSIK, Zolt\u00e1n, LIU, Jian-Guo, et al.\n    Solving the apparent diversity-accuracy dilemma of recommender systems.\n    Proceedings of the National Academy of Sciences,\n    2010, vol. 107, no 10, p. 4511-4515.\n    \"\"\"", "\n", "if", "verbose", ":", "\n", "        ", "t", "=", "TCounter", "(", ")", "\n", "VerboseMessage", "(", "verbose", ",", "'Computing Personalisation of %s...'", "%", "(", "recommended_table", ".", "relation", ".", "iloc", "[", "0", "]", ")", ")", "\n", "# Creating alias for end objects", "\n", "", "end_objects", "=", "recommended_table", "[", "'end_object'", "]", ".", "unique", "(", ")", "\n", "recommended_table", "[", "'alias'", "]", "=", "recommended_table", "[", "'end_object'", "]", ".", "map", "(", "pd", ".", "Series", "(", "index", "=", "end_objects", ",", "data", "=", "range", "(", "end_objects", ".", "size", ")", ")", ")", "\n", "# Create DataFrame with information on each start object needed for the computation", "\n", "start_object_data", "=", "pd", ".", "DataFrame", "(", ")", "\n", "# Get names of objects", "\n", "start_object_data", "[", "'object'", "]", "=", "recommended_table", ".", "start_object", ".", "unique", "(", ")", "\n", "# Get the recommendation list made to each object", "\n", "reco_lists", "=", "recommended_table", "[", "[", "'start_object'", ",", "'alias'", "]", "]", ".", "groupby", "(", "'start_object'", ")", "[", "'alias'", "]", ".", "apply", "(", "list", ")", "\n", "start_object_data", "[", "'reco_list'", "]", "=", "start_object_data", "[", "'object'", "]", ".", "map", "(", "reco_lists", ")", "\n", "L", "=", "list", "(", "start_object_data", "[", "'reco_list'", "]", ")", "\n", "counter", "=", "0", "\n", "personalisation", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "L", ")", "-", "1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "len", "(", "L", ")", "-", "1", ")", ":", "\n", "            ", "personalisation", "+=", "1", "-", "jaccard", "(", "L", "[", "i", "]", ",", "L", "[", "j", "]", ")", "\n", "counter", "+=", "1", "\n", "", "", "personalisation", "=", "personalisation", "/", "counter", "\n", "if", "verbose", ":", "\n", "        ", "VerboseMessage", "(", "verbose", ",", "'Personalisation computed in %s.'", "%", "(", "ETSec2ETTime", "(", "TCounter", "(", ")", "-", "t", ")", ")", ")", "\n", "", "return", "personalisation", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.other_measures.jaccard": [[146, 148], ["len", "len", "set", "set", "set", "set"], "function", ["None"], ["", "def", "jaccard", "(", "Li", ",", "Lj", ")", ":", "\n", "    ", "return", "len", "(", "set", "(", "Li", ")", "&", "set", "(", "Lj", ")", ")", "/", "len", "(", "set", "(", "Li", ")", "|", "set", "(", "Lj", ")", ")", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.other_measures.dissimilarity": [[149, 156], ["None"], "function", ["None"], ["", "def", "dissimilarity", "(", "matrix", ",", "L", ",", "ids", ")", ":", "\n", "    ", "d", "=", "0", "\n", "for", "i", "in", "L", ":", "\n", "        ", "for", "j", "in", "L", ":", "\n", "            ", "if", "i", "!=", "j", ":", "\n", "                ", "d", "+=", "1", "-", "matrix", "[", "ids", "[", "i", "]", ",", "ids", "[", "j", "]", "]", "\n", "", "", "", "return", "d", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.diversity.other_measures.similarity": [[157, 164], ["None"], "function", ["None"], ["", "def", "similarity", "(", "matrix", ",", "L", ",", "ids", ")", ":", "\n", "    ", "s", "=", "0", "\n", "for", "i", "in", "L", ":", "\n", "        ", "for", "j", "in", "L", ":", "\n", "            ", "if", "i", "!=", "j", ":", "\n", "                ", "s", "+=", "0.5", "*", "matrix", "[", "ids", "[", "i", "]", ",", "ids", "[", "j", "]", "]", "\n", "", "", "", "return", "s", ";", "\n", "", ""]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.generators.random_graphs.random_bipartite": [[5, 121], ["int", "int", "int", "name_A.upper", "name_B.upper", "name_A.lower", "name_B.lower", "numpy.min", "numpy.max", "numpy.array", "numpy.concatenate", "pandas.DataFrame", "pd.DataFrame.rename", "pd.DataFrame.rename", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError", "range", "numpy.array", "numpy.random.randint", "numpy.isin", "numpy.extract", "numpy.isin", "numpy.extract", "numpy.random.choice", "numpy.random.choice", "numpy.trunc", "numpy.max", "isinstance", "isinstance", "range", "pow", "numpy.array", "range"], "function", ["None"], ["def", "random_bipartite", "(", "N_A", ",", "N_B", ",", "N_L", ",", "name_A", "=", "None", ",", "name_B", "=", "None", ",", "multigraph", "=", "False", ")", ":", "\n", "\n", "\n", "##################", "\n", "# Initial Checks #", "\n", "##################", "\n", "\n", "    ", "if", "N_A", "<=", "0", "or", "N_B", "<=", "0", ":", "\n", "        ", "raise", "ValueError", "(", "'Number of nodes and edges must be positive.'", ")", "\n", "\n", "", "if", "N_L", "<=", "0", ":", "\n", "        ", "raise", "ValueError", "(", "'Inputs resulted in no edges.'", ")", "\n", "\n", "", "if", "not", "np", ".", "max", "(", "[", "N_A", ",", "N_B", "]", ")", "<=", "N_L", ":", "\n", "        ", "raise", "ValueError", "(", "'Number of nodes on each side must be at least the number of edges.'", ")", "\n", "\n", "", "if", "name_A", "is", "None", ":", "\n", "        ", "name_A", "=", "'Z'", "\n", "", "if", "name_B", "is", "None", ":", "\n", "        ", "name_B", "=", "'B'", "\n", "\n", "", "if", "not", "isinstance", "(", "name_A", ",", "str", ")", "or", "not", "isinstance", "(", "name_A", ",", "str", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'name_A, name_B must be string'", ")", "\n", "", "if", "name_A", "==", "name_B", ":", "\n", "        ", "raise", "ValueError", "(", "'name_A must be different from name_B'", ")", "\n", "\n", "", "if", "N_L", "/", "(", "N_A", "*", "N_B", ")", ">", "1", "and", "multigraph", "==", "False", ":", "\n", "        ", "raise", "ValueError", "(", "'It is not possible to generate unique bipartite graphs with density bigger than 1'", ")", "\n", "\n", "\n", "################################", "\n", "# Pre-processing the variables #", "\n", "################################    ", "\n", "\n", "", "N_A", "=", "int", "(", "N_A", ")", "\n", "N_B", "=", "int", "(", "N_B", ")", "\n", "N_L", "=", "int", "(", "N_L", ")", "\n", "\n", "group_name_A", "=", "name_A", ".", "upper", "(", ")", "\n", "group_name_B", "=", "name_B", ".", "upper", "(", ")", "\n", "node_name_A", "=", "name_A", ".", "lower", "(", ")", "\n", "node_name_B", "=", "name_B", ".", "lower", "(", ")", "\n", "\n", "prefix_min_side", "=", "node_name_A", "if", "N_A", "<", "N_B", "else", "node_name_B", "\n", "prefix_max_side", "=", "node_name_B", "if", "N_A", "<", "N_B", "else", "node_name_A", "\n", "\n", "N_min", "=", "np", ".", "min", "(", "[", "N_A", ",", "N_B", "]", ")", "\n", "N_max", "=", "np", ".", "max", "(", "[", "N_A", ",", "N_B", "]", ")", "\n", "\n", "# Number of possible unique a/b bipartire graphs", "\n", "NM", "=", "N_A", "*", "N_B", "\n", "\n", "# Generate vector of N_L random int  ", "\n", "#table_m = np.random.choice(range(NM),size=N_L-N_max,replace=not multigraph)", "\n", "table_m", "=", "np", ".", "array", "(", "range", "(", "NM", ")", ")", "\n", "#    ################################", "\n", "#    # Filling the edges            #", "\n", "#    ################################   ", "\n", "\n", "# Filling edges in 3 steps:", "\n", "# E1: connecting all nodes from N_min side", "\n", "# E2: connecting N_max-N_min nodes from N_max side", "\n", "# E3: connecting the remaining N_L - N_max", "\n", "\n", "# E1: Fill the first N_min edges ", "\n", "table_m1", "=", "np", ".", "array", "(", "range", "(", "N_min", ")", ")", "*", "(", "N_min", "+", "1", ")", "\n", "\n", "# E2", "\n", "#table_m2 = np.random.choice(list(range(N_min*N_min,N_min*N_max)),size=N_max-N_min,replace=multigraph)", "\n", "table_m2", "=", "np", ".", "array", "(", "range", "(", "N_max", "-", "N_min", ")", ")", "*", "N_min", "+", "pow", "(", "N_min", ",", "2", ")", "+", "np", ".", "random", ".", "randint", "(", "0", ",", "N_min", "-", "1", ",", "N_max", "-", "N_min", ")", "\n", "\n", "# Eliminating used grafs from table_m for case multigraph=False", "\n", "if", "multigraph", "==", "False", ":", "\n", "# Extract values from E1, in table_m", "\n", "        ", "mask1", "=", "np", ".", "isin", "(", "table_m", ",", "table_m1", ")", "\n", "table_m", "=", "np", ".", "extract", "(", "~", "mask1", ",", "table_m", ")", "\n", "\n", "# Extract values from E2, in table_m", "\n", "mask2", "=", "np", ".", "isin", "(", "table_m", ",", "table_m2", ")", "\n", "table_m", "=", "np", ".", "extract", "(", "~", "mask2", ",", "table_m", ")", "\n", "\n", "# E3", "\n", "table_m3", "=", "np", ".", "random", ".", "choice", "(", "table_m", ",", "size", "=", "N_L", "-", "N_max", ",", "replace", "=", "multigraph", ")", "\n", "\n", "", "else", ":", "\n", "        ", "table_m3", "=", "np", ".", "random", ".", "choice", "(", "table_m", ",", "size", "=", "N_L", "-", "N_max", ")", "\n", "\n", "# Concatenate tables from E1,E2 & E3", "\n", "", "table_conc", "=", "np", ".", "concatenate", "(", "(", "table_m1", ",", "table_m2", ",", "table_m3", ")", ",", "axis", "=", "0", ")", "\n", "\n", "# Create DataFrame with 'min' & 'max' columns for graphs", "\n", "d", "=", "{", "'min'", ":", "(", "np", ".", "trunc", "(", "table_conc", "/", "N_min", "+", "1", ")", ")", ",", "'max'", ":", "(", "table_conc", "%", "N_min", "+", "1", ")", "}", "\n", "table", "=", "pd", ".", "DataFrame", "(", "data", "=", "d", ")", "\n", "\n", "################################", "\n", "# Formatting the output table  #", "\n", "################################   ", "\n", "\n", "# Renaming columns", "\n", "if", "N_A", "<", "N_B", ":", "\n", "        ", "rename_dic", "=", "{", "'min'", ":", "group_name_A", ",", "'max'", ":", "group_name_B", "}", "\n", "", "else", ":", "\n", "        ", "rename_dic", "=", "{", "'max'", ":", "group_name_A", ",", "'min'", ":", "group_name_B", "}", "\n", "", "table", ".", "rename", "(", "columns", "=", "rename_dic", ",", "inplace", "=", "True", ")", "\n", "table", "=", "table", "[", "[", "group_name_A", ",", "group_name_B", "]", "]", "\n", "\n", "# Putting in HINPY format", "\n", "table", "[", "'start_group'", "]", "=", "group_name_A", "\n", "table", "[", "'end_group'", "]", "=", "group_name_B", "\n", "table", "[", "'relation'", "]", "=", "group_name_A", "+", "'-'", "+", "group_name_B", "\n", "table", "[", "'value'", "]", "=", "''", "\n", "table", "[", "'timestamp'", "]", "=", "''", "\n", "table", ".", "rename", "(", "columns", "=", "{", "group_name_A", ":", "'start_object'", ",", "group_name_B", ":", "'end_object'", "}", ",", "inplace", "=", "True", ")", "\n", "table", "=", "table", "[", "[", "'relation'", ",", "'start_group'", ",", "'start_object'", ",", "'end_group'", ",", "'end_object'", ",", "'value'", ",", "'timestamp'", "]", "]", "\n", "\n", "return", "table", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.generators.random_graphs.random_concatenated_bipartites": [[122, 162], ["pandas.DataFrame", "range", "list", "ValueError", "len", "len", "ValueError", "len", "len", "ValueError", "len", "random_graphs.random_bipartite", "pandas.concat", "len", "len", "ValueError", "len", "list", "len", "len", "set"], "function", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.generators.random_graphs.random_bipartite"], ["", "def", "random_concatenated_bipartites", "(", "list_N_nodes", ",", "list_N_edges", ",", "list_names", "=", "None", ",", "multigraph", "=", "False", ")", ":", "\n", "\n", "##################", "\n", "# Initial Checks #", "\n", "##################", "\n", "\n", "    ", "if", "list_names", "is", "None", ":", "\n", "        ", "alphabet_list", "=", "list", "(", "stringmod", ".", "ascii_lowercase", ")", "\n", "if", "len", "(", "list_N_nodes", ")", ">", "len", "(", "alphabet_list", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'list_N_nodes has more elements than letters in the alphabet. Naming not yet implemented! Sorry.'", ")", "\n", "", "list_names", "=", "alphabet_list", "[", ":", "len", "(", "list_N_nodes", ")", "]", "\n", "\n", "", "if", "not", "len", "(", "list_N_nodes", ")", "==", "len", "(", "list_N_edges", ")", "+", "1", ":", "\n", "        ", "raise", "ValueError", "(", "'list_N_nodes must have exactly 1 more element than list_N_edges.'", ")", "\n", "\n", "", "if", "len", "(", "list", "(", "set", "(", "list_names", ")", ")", ")", "!=", "len", "(", "list_names", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'list_names contains at least one repeated element.'", ")", "\n", "\n", "", "if", "len", "(", "list_N_nodes", ")", "!=", "len", "(", "list_names", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'list_N_nodes must have the same length as list_names'", ")", "\n", "\n", "\n", "########################", "\n", "# Creating  bipartites #", "\n", "########################", "\n", "\n", "## Creating empty table    ", "\n", "", "table", "=", "pd", ".", "DataFrame", "(", "columns", "=", "[", "'relation'", ",", "'start_group'", ",", "'start_object'", ",", "'end_group'", ",", "'end_object'", ",", "'value'", ",", "'timestamp'", "]", ")", "\n", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "list_N_edges", ")", ")", ":", "\n", "\n", "##  Create bi-partite table for N_L(i) ", "\n", "        ", "table_aux", "=", "random_bipartite", "(", "list_N_nodes", "[", "i", "]", ",", "list_N_nodes", "[", "i", "+", "1", "]", ",", "list_N_edges", "[", "i", "]", ",", "\n", "name_A", "=", "list_names", "[", "i", "]", ",", "name_B", "=", "list_names", "[", "i", "+", "1", "]", ",", "multigraph", "=", "multigraph", ")", "\n", "\n", "## Concatenate to table", "\n", "table", "=", "pd", ".", "concat", "(", "[", "table", ",", "table_aux", "]", ",", "axis", "=", "0", ",", "ignore_index", "=", "True", ")", "\n", "\n", "", "return", "table", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.rs.pure_popularity.ImplicitPurePopularity": [[8, 38], ["pandas.Timestamp", "like_table[].groupby().count().sort_values", "pandas.DataFrame", "time.time", "VerboseMessage", "VerboseMessage", "like_table[].groupby().count", "ETSec2ETTime", "like_table[].groupby", "time.time", "like_table[].groupby().count().sort_values.index.isin"], "function", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.VerboseMessage", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.VerboseMessage", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.ETSec2ETTime"], ["def", "ImplicitPurePopularity", "(", "like_table", ",", "seen_table", ",", "start_objects", ",", "parameters", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Pure Popularity likes:\n    Items with most likes are recommended. This only takes into account how many\n    people liked items, and not the scores.\n    \"\"\"", "\n", "if", "verbose", ":", "\n", "        ", "t", "=", "TCounter", "(", ")", "\n", "VerboseMessage", "(", "verbose", ",", "'Computing (Implicit) Pure Popularity of %s relative to %s...'", "%", "(", "like_table", ".", "relation", ".", "iloc", "[", "0", "]", ",", "seen_table", ".", "relation", ".", "iloc", "[", "0", "]", ")", ")", "\n", "# Retrieving names", "\n", "", "relation_name", "=", "like_table", ".", "relation", ".", "iloc", "[", "0", "]", "\n", "start_group", "=", "like_table", ".", "start_group", ".", "iloc", "[", "0", "]", "\n", "end_group", "=", "like_table", ".", "end_group", ".", "iloc", "[", "0", "]", "\n", "timestamp", "=", "pd", ".", "Timestamp", "(", "''", ")", "\n", "# Retriving counts per object", "\n", "objects_count", "=", "like_table", "[", "[", "'end_object'", ",", "'value'", "]", "]", ".", "groupby", "(", "'end_object'", ")", ".", "count", "(", ")", ".", "sort_values", "(", "by", "=", "'value'", ",", "ascending", "=", "False", ")", "\n", "# Creating the output DataFrame", "\n", "recommended_table", "=", "pd", ".", "DataFrame", "(", "columns", "=", "[", "'relation'", ",", "'start_group'", ",", "'start_object'", ",", "'end_group'", ",", "'end_object'", ",", "\n", "'value'", ",", "'timestamp'", "]", ")", "\n", "# For each start object...", "\n", "counter", "=", "0", "\n", "for", "start_obj", "in", "start_objects", ":", "\n", "# We select best ranking topK end object that he hasn't rated/seen", "\n", "        ", "user_list", "=", "objects_count", "[", "~", "objects_count", ".", "index", ".", "isin", "(", "seen_table", "[", "seen_table", ".", "start_object", "==", "start_obj", "]", ".", "end_object", ")", "]", ".", "iloc", "[", ":", "parameters", "[", "'topK_predictions'", "]", "]", "\n", "for", "end_obj", "in", "user_list", ".", "index", ":", "\n", "            ", "recommended_table", ".", "loc", "[", "counter", "]", "=", "[", "relation_name", ",", "start_group", ",", "start_obj", ",", "end_group", ",", "end_obj", ",", "''", ",", "timestamp", "]", "\n", "counter", "+=", "1", "\n", "", "", "if", "verbose", ":", "\n", "        ", "VerboseMessage", "(", "verbose", ",", "'Pure Popularity computed in %s.'", "%", "(", "ETSec2ETTime", "(", "TCounter", "(", ")", "-", "t", ")", ")", ")", "\n", "", "return", "recommended_table", ",", "{", "}", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.rs.pure_popularity.ExplicitPurePopularity": [[39, 46], ["None"], "function", ["None"], ["", "def", "ExplicitPurePopularity", "(", ")", ":", "\n", "    ", "\"\"\"\n    Pure Popularity based on scores:\n    Items with best scores are recommended. This does not take into account\n    how many people rated an item.\n    \"\"\"", "\n", "return", "None", ";", "\n", "", ""]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.rs.hin_rs.HINRS": [[12, 79], ["ValueError", "hin.table[].copy.copy", "hin.table[].copy", "SurpriseBased", "parameters.items", "ContentBased", "parameters.keys", "ExplicitPurePopularity", "ImplicitUtilityMetrics", "hin.GetLinkGroupStartObjectGroup().GetNames", "ImplicitPurePopularity", "RandomRecommender", "ValueError", "hin.GetLinkGroupStartObjectGroup", "hin.GetLinkGroupStartObjectGroup", "hin.GetLinkGroupEndObjectGroup"], "function", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.rs.surprise_based.SurpriseBased", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.rs.content_based.ContentBased", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.rs.pure_popularity.ExplicitPurePopularity", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.rs.implicit_utility.ImplicitUtilityMetrics", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.object_group_class.ObjectGroup.GetNames", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.rs.pure_popularity.ImplicitPurePopularity", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.rs.random_rs.RandomRecommender", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroupStartObjectGroup", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroupStartObjectGroup", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroupEndObjectGroup"], ["def", "HINRS", "(", "hin", ",", "relation_name", ",", "parameters", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Compute prediction values for links in the Link Group used to produce\n    the recommendations. Predicted values are ratings of number of consumptions\n    depending on the context: explicit or implicit recommendation.\n\n    Parameters\n    ----------\n    table : DataFrame\n        DataFrame containing the information of the bipartite graph\n        representing implicit or explicit user consumption information.\n    parameters : dic\n        Dictionary with the information establishing the different parameters\n        of the recommendation methods.\n    hin : HIN\n        The HIN object that will be used to compute the recommendation if\n        needed.\n    \"\"\"", "\n", "\n", "# Check that parameters has a 'method'key", "\n", "if", "'method'", "not", "in", "[", "k", "for", "k", ",", "v", "in", "parameters", ".", "items", "(", ")", "]", ":", "\n", "        ", "raise", "ValueError", "(", "'No method specified in parameters.'", ")", "\n", "\n", "# Applyting the chosen RS", "\n", "", "if", "parameters", "[", "'method'", "]", "==", "'Copy'", ":", "\n", "        ", "predicted_table", "=", "table", ".", "copy", "(", "deep", "=", "True", ")", "\n", "predicted_table", ".", "loc", "[", ":", ",", "'relation'", "]", "=", "'copied_%s'", "%", "table", ".", "relation", ".", "iloc", "[", "0", "]", "\n", "report_dic", "=", "{", "}", "\n", "# Explicit- SURPRISE-based RS", "\n", "", "elif", "parameters", "[", "'method'", "]", "in", "[", "'UBCF'", ",", "'Z-UBCF'", ",", "'IBCF'", ",", "'SVD'", ",", "'NMF'", ",", "'CClustering'", "]", ":", "\n", "        ", "table", "=", "hin", ".", "table", "[", "hin", ".", "table", ".", "relation", "==", "relation_name", "]", ".", "copy", "(", "deep", "=", "True", ")", "\n", "predicted_table", ",", "report_dic", "=", "SurpriseBased", "(", "table", ",", "relation_name", ",", "parameters", ",", "verbose", "=", "verbose", ")", "\n", "# Content-based", "\n", "", "elif", "parameters", "[", "'method'", "]", "==", "'CB'", ":", "\n", "\n", "# Producing utility metrics: precision, recall, F1", "\n", "        ", "if", "'implicit_metrics'", "in", "parameters", ".", "keys", "(", ")", ":", "\n", "            ", "if", "parameters", "[", "'implicit_metrics'", "]", ":", "\n", "                ", "report_dic", "=", "ImplicitUtilityMetrics", "(", "hin", ",", "relation_name", ",", "parameters", ",", "verbose", "=", "verbose", ")", "\n", "", "else", ":", "\n", "                ", "report_dic", "=", "{", "}", "\n", "", "", "else", ":", "\n", "            ", "report_dic", "=", "{", "}", "\n", "# # Producing the recommendation", "\n", "", "predicted_table", "=", "ContentBased", "(", "hin", ",", "\n", "relation_name", ",", "parameters", "[", "'seen_relation'", "]", ",", "\n", "parameters", "[", "'paths'", "]", ",", "parameters", "[", "'paths_weights'", "]", ",", "\n", "parameters", "[", "'topK_predictions'", "]", ",", "\n", "verbose", "=", "verbose", ")", "\n", "# Pure Popularity", "\n", "", "elif", "parameters", "[", "'method'", "]", "==", "'EPP'", ":", "\n", "        ", "predicted_table", ",", "report_dic", "=", "ExplicitPurePopularity", "(", ")", "\n", "", "elif", "parameters", "[", "'method'", "]", "==", "'IPP'", ":", "\n", "        ", "like_table", "=", "hin", ".", "table", "[", "hin", ".", "table", ".", "relation", "==", "relation_name", "]", "\n", "seen_table", "=", "hin", ".", "table", "[", "hin", ".", "table", ".", "relation", "==", "parameters", "[", "'seen_relation'", "]", "]", "\n", "start_objects", "=", "hin", ".", "GetLinkGroupStartObjectGroup", "(", "relation_name", ")", ".", "GetNames", "(", ")", "\n", "predicted_table", ",", "report_dic", "=", "ImplicitPurePopularity", "(", "like_table", ",", "seen_table", ",", "start_objects", ",", "parameters", ",", "verbose", "=", "verbose", ")", "\n", "# Random", "\n", "", "elif", "parameters", "[", "'method'", "]", "==", "'random'", ":", "\n", "        ", "predicted_table", ",", "report_dic", "=", "RandomRecommender", "(", "start_object_group", "=", "hin", ".", "GetLinkGroupStartObjectGroup", "(", "relation_name", ")", ",", "\n", "end_object_group", "=", "hin", ".", "GetLinkGroupEndObjectGroup", "(", "relation_name", ")", ",", "\n", "parameters", "=", "parameters", ",", "verbose", "=", "verbose", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unrecognized RS method named %s'", "%", "parameters", "[", "'method'", "]", ")", "\n", "\n", "\n", "", "return", "predicted_table", ",", "report_dic", ";", "\n", "", ""]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.rs.implicit_utility.ImplicitUtilityMetrics": [[11, 87], ["subtable.groupby", "subtable.groupby.apply().reset_index", "subtable[].reset_index", "hin.CreateLinkGroupFromTable", "hin.table[].copy", "train_seen_table[].reset_index", "hin.CreateLinkGroupFromTable", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "hin.DeleteLinkGroup", "hin.DeleteLinkGroup", "len", "len", "len", "hin.CreateLinkGroupFromRS", "hin.table[].copy", "pandas.DataFrame", "grouped.apply().reset_index.start_object.unique", "pd.DataFrame.iterrows", "q[].mean", "q[].mean", "hin.DeleteLinkGroup", "subtable.groupby.apply", "set", "set", "len", "len", "x.sample", "len", "len", "len", "len", "subtable[].apply().isin", "train_seen_table[].apply().isin", "test_subtable[].apply", "test_subtable[].apply", "subtable[].apply", "train_seen_table[].apply"], "function", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.CreateLinkGroupFromTable", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.CreateLinkGroupFromTable", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.DeleteLinkGroup", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.DeleteLinkGroup", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.CreateLinkGroupFromRS", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.DeleteLinkGroup"], ["def", "ImplicitUtilityMetrics", "(", "hin", ",", "relation_name", ",", "parameters", ",", "verbose", "=", "False", ")", ":", "\n", "\t", "\"\"\"\n\tCompute precision, recall, an F1 for implicit RS (IPP,CB,random).\n\n\t\"\"\"", "\n", "\n", "# Retrieve the table of relation_name and separate into test and train parts", "\n", "if", "'implicit_metrics_fraction'", "in", "parameters", ":", "\n", "\t\t", "fraction", "=", "parameters", "[", "'implicit_metrics_fraction'", "]", "\n", "", "else", ":", "\n", "\t\t", "fraction", "=", "0.25", "\n", "\n", "", "compare_cols", "=", "[", "'start_object'", ",", "'start_group'", ",", "'end_object'", ",", "'end_group'", "]", "\n", "\n", "subtable", "=", "hin", ".", "table", "[", "hin", ".", "table", ".", "relation", "==", "relation_name", "]", "\n", "grouped", "=", "subtable", ".", "groupby", "(", "'start_object'", ")", "\n", "\n", "test_subtable", "=", "grouped", ".", "apply", "(", "lambda", "x", ":", "x", ".", "sample", "(", "frac", "=", "fraction", ")", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "train_subtable", "=", "subtable", "[", "~", "subtable", "[", "compare_cols", "]", ".", "apply", "(", "tuple", ",", "1", ")", ".", "isin", "(", "test_subtable", "[", "compare_cols", "]", ".", "apply", "(", "tuple", ",", "1", ")", ")", "]", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "\n", "train_subtable", ".", "loc", "[", ":", ",", "'relation'", "]", "=", "'train_like_group'", "\n", "\n", "# Create train Link Group from table", "\n", "hin", ".", "CreateLinkGroupFromTable", "(", "train_subtable", ",", "'train_like_group'", ")", "\n", "\n", "# Create new 'seen' table subtracting elements from test", "\n", "train_seen_table", "=", "hin", ".", "table", "[", "hin", ".", "table", ".", "relation", "==", "parameters", "[", "'seen_relation'", "]", "]", ".", "copy", "(", "deep", "=", "True", ")", "\n", "train_seen_table", ".", "loc", "[", ":", ",", "'relation'", "]", "=", "train_subtable", ".", "relation", ".", "iloc", "[", "0", "]", "\n", "train_seen_table", "=", "train_seen_table", "[", "~", "train_seen_table", "[", "compare_cols", "]", ".", "apply", "(", "tuple", ",", "1", ")", ".", "isin", "(", "test_subtable", "[", "compare_cols", "]", ".", "apply", "(", "tuple", ",", "1", ")", ")", "]", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "# train_seen_table['value'] = np.nan", "\n", "hin", ".", "CreateLinkGroupFromTable", "(", "train_seen_table", ",", "'train_seen_group'", ")", "\n", "\n", "# For n in 'implicit_metrics_N':[1,5,10], compute recos", "\n", "# and compute recall and precision per start object", "\n", "report_dic", "=", "{", "'topK'", ":", "parameters", "[", "'implicit_metrics_N'", "]", "}", "\n", "precision", "=", "np", ".", "zeros", "(", "len", "(", "parameters", "[", "'implicit_metrics_N'", "]", ")", ")", "\n", "recall", "=", "np", ".", "zeros", "(", "len", "(", "parameters", "[", "'implicit_metrics_N'", "]", ")", ")", "\n", "f1", "=", "np", ".", "zeros", "(", "len", "(", "parameters", "[", "'implicit_metrics_N'", "]", ")", ")", "\n", "reco_train_params", "=", "{", "'method'", ":", "parameters", "[", "'method'", "]", ",", "'topK_predictions'", ":", "4", ",", "'seen_relation'", ":", "'train_seen_group'", ",", "\n", "'paths'", ":", "parameters", "[", "'paths'", "]", ",", "\n", "'paths_weights'", ":", "parameters", "[", "'paths_weights'", "]", ",", "\n", "'implicit_metrics'", ":", "False", "}", "\n", "for", "i", ",", "k", "in", "enumerate", "(", "parameters", "[", "'implicit_metrics_N'", "]", ")", ":", "\n", "\t\t", "reco_train_params", "[", "'topK_predictions'", "]", "=", "k", "\n", "hin", ".", "CreateLinkGroupFromRS", "(", "relation_name", "=", "'train_like_group'", ",", "\n", "new_relation_name", "=", "'implicit_metrics_recs_%d'", "%", "k", ",", "\n", "parameters", "=", "reco_train_params", ")", "\n", "# Here, compute precision, recall and f1", "\n", "train_reco_subtable", "=", "hin", ".", "table", "[", "hin", ".", "table", ".", "relation", "==", "'implicit_metrics_recs_%d'", "%", "k", "]", ".", "copy", "(", "deep", "=", "True", ")", "\n", "q", "=", "pd", ".", "DataFrame", "(", "columns", "=", "[", "'object'", ",", "'precision'", ",", "'recall'", ",", "'f1'", "]", ")", "\n", "q", "[", "'object'", "]", "=", "test_subtable", ".", "start_object", ".", "unique", "(", ")", "\n", "for", "idx", ",", "row", "in", "q", ".", "iterrows", "(", ")", ":", "\n", "\t\t\t", "Tu", "=", "set", "(", "test_subtable", "[", "test_subtable", ".", "start_object", "==", "row", ".", "object", "]", ".", "end_object", ")", "\n", "Lu", "=", "set", "(", "train_reco_subtable", "[", "train_reco_subtable", ".", "start_object", "==", "row", ".", "object", "]", ".", "end_object", ")", "\n", "if", "len", "(", "Lu", ")", ">", "0", ":", "\n", "\t\t\t\t", "q", ".", "loc", "[", "idx", ",", "'precision'", "]", "=", "len", "(", "Tu", "&", "Lu", ")", "/", "len", "(", "Lu", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "q", ".", "loc", "[", "idx", ",", "'precision'", "]", "=", "0", "\n", "", "if", "len", "(", "Tu", ")", ">", "0", ":", "\n", "\t\t\t\t", "q", ".", "loc", "[", "idx", ",", "'recall'", "]", "=", "len", "(", "Tu", "&", "Lu", ")", "/", "len", "(", "Tu", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "q", ".", "loc", "[", "idx", ",", "'recall'", "]", "=", "0", "\n", "", "", "precision", "[", "i", "]", "=", "q", "[", "'precision'", "]", ".", "mean", "(", ")", "\n", "recall", "[", "i", "]", "=", "q", "[", "'recall'", "]", ".", "mean", "(", ")", "\n", "f1", "[", "i", "]", "=", "2", "*", "precision", "[", "i", "]", "*", "recall", "[", "i", "]", "/", "(", "precision", "[", "i", "]", "+", "recall", "[", "i", "]", ")", "\n", "# Delete the recommendation", "\n", "hin", ".", "DeleteLinkGroup", "(", "'implicit_metrics_recs_%d'", "%", "k", ")", "\n", "# Delete train Link Group", "\n", "", "hin", ".", "DeleteLinkGroup", "(", "'train_like_group'", ")", "\n", "hin", ".", "DeleteLinkGroup", "(", "'train_seen_group'", ")", "\n", "\n", "report_dic", "[", "'precision'", "]", "=", "precision", "\n", "report_dic", "[", "'recall'", "]", "=", "recall", "\n", "report_dic", "[", "'f1'", "]", "=", "f1", "\n", "\n", "return", "report_dic", ";", "\n", "", ""]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.rs.surprise_based.SurpriseBased": [[10, 110], ["pandas.Timestamp", "surprise.Reader", "surprise.Dataset.load_from_df", "surprise.Dataset.load_from_df.build_full_trainset", "surprise.CoClustering.fit", "time.time", "VerboseMessage", "data.build_full_trainset.build_anti_testset", "VerboseMessage", "time.time", "VerboseMessage", "surprise.CoClustering.test", "VerboseMessage", "time.time", "VerboseMessage", "collections.defaultdict", "collections.defaultdict.items", "VerboseMessage", "pandas.DataFrame", "time.time", "VerboseMessage", "collections.defaultdict.items", "VerboseMessage", "ValueError", "ValueError", "ValueError", "surprise.KNNBasic", "time.time", "VerboseMessage", "VerboseMessage", "top_recs[].append", "user_ratings.sort", "parameters.items", "surprise.KNNWithZScore", "surprise.model_selection.validation.cross_validate", "results[].mean", "ETSec2ETTime", "ETSec2ETTime", "ETSec2ETTime", "ETSec2ETTime", "surprise.KNNBasic", "surprise.SVD", "time.time", "time.time", "len", "ETSec2ETTime", "len", "time.time", "time.time", "surprise.NMF", "surprise.CoClustering", "ValueError", "time.time"], "function", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.VerboseMessage", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.VerboseMessage", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.VerboseMessage", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.VerboseMessage", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.VerboseMessage", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.VerboseMessage", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.VerboseMessage", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.VerboseMessage", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.VerboseMessage", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.VerboseMessage", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.ETSec2ETTime", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.ETSec2ETTime", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.ETSec2ETTime", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.ETSec2ETTime", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.ETSec2ETTime"], ["def", "SurpriseBased", "(", "table", ",", "relation_name", ",", "parameters", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n\n    \"\"\"", "\n", "\n", "report", "=", "{", "}", "\n", "\n", "# Initial checks", "\n", "param_keys", "=", "[", "k", "for", "k", ",", "v", "in", "parameters", ".", "items", "(", ")", "]", "\n", "if", "(", "'max_scale'", "not", "in", "param_keys", ")", "or", "(", "'min_scale'", "not", "in", "param_keys", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'max_scale and min_scale must be specified in parameters for explicit RS.'", ")", "\n", "", "if", "'model_size'", "not", "in", "param_keys", ":", "\n", "        ", "raise", "ValueError", "(", "'model_size must be specified in parameters for SURPRISE-based RS.'", ")", "\n", "", "if", "'topK_predictions'", "not", "in", "param_keys", ":", "\n", "        ", "raise", "ValueError", "(", "'A size (K) must be given for the recommended list size (topK).'", ")", "\n", "\n", "# Retrieving names", "\n", "", "start_group", "=", "table", ".", "start_group", ".", "iloc", "[", "0", "]", "\n", "end_group", "=", "table", ".", "end_group", ".", "iloc", "[", "0", "]", "\n", "timestamp", "=", "pd", ".", "Timestamp", "(", "''", ")", "\n", "\n", "# Retrieving the table of the bipartite graph in SURPRISE format", "\n", "table", "=", "table", "[", "[", "'start_object'", ",", "'end_object'", ",", "'value'", "]", "]", "\n", "reader", "=", "surprise", ".", "Reader", "(", "rating_scale", "=", "(", "parameters", "[", "'min_scale'", "]", ",", "parameters", "[", "'max_scale'", "]", ")", ")", "\n", "data", "=", "surprise", ".", "Dataset", ".", "load_from_df", "(", "table", ",", "reader", ")", "\n", "\n", "# Selecting the method from the SURPRISE module", "\n", "if", "parameters", "[", "'method'", "]", "==", "'UBCF'", ":", "\n", "        ", "method", "=", "surprise", ".", "KNNBasic", "(", "k", "=", "parameters", "[", "'model_size'", "]", ",", "verbose", "=", "verbose", ")", "\n", "", "elif", "parameters", "[", "'method'", "]", "==", "'Z-UBCF'", ":", "\n", "        ", "method", "=", "surprise", ".", "KNNWithZScore", "(", "k", "=", "parameters", "[", "'model_size'", "]", ")", "\n", "", "elif", "parameters", "[", "'method'", "]", "==", "'IBCF'", ":", "\n", "        ", "method", "=", "surprise", ".", "KNNBasic", "(", "k", "=", "parameters", "[", "'model_size'", "]", ",", "sim_options", "=", "{", "'user_based'", ":", "False", "}", ")", "\n", "", "elif", "parameters", "[", "'method'", "]", "==", "'SVD'", ":", "\n", "        ", "method", "=", "surprise", ".", "SVD", "(", "n_factors", "=", "parameters", "[", "'model_size'", "]", ")", "\n", "", "elif", "parameters", "[", "'method'", "]", "==", "'NMF'", ":", "\n", "        ", "method", "=", "surprise", ".", "NMF", "(", "n_factors", "=", "parameters", "[", "'model_size'", "]", ")", "\n", "", "elif", "parameters", "[", "'method'", "]", "==", "'CClustering'", ":", "\n", "        ", "method", "=", "surprise", ".", "CoClustering", "(", "n_cltr_u", "=", "parameters", "[", "'model_size'", "]", ",", "n_cltr_i", "=", "parameters", "[", "'model_size'", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unrecognized SURPRISE-based RS method named %s'", "%", "parameters", "[", "'method'", "]", ")", "\n", "\n", "\n", "# Computing utility metrics if so specified", "\n", "", "if", "'RMSE'", "in", "param_keys", ":", "\n", "        ", "if", "parameters", "[", "'RMSE'", "]", ":", "\n", "            ", "results", "=", "surprise", ".", "model_selection", ".", "validation", ".", "cross_validate", "(", "method", ",", "data", ",", "measures", "=", "[", "'rmse'", "]", ",", "cv", "=", "5", ",", "verbose", "=", "verbose", ")", "\n", "rmse", "=", "results", "[", "'test_rmse'", "]", ".", "mean", "(", ")", "\n", "report", "[", "'RMSE'", "]", "=", "rmse", "\n", "\n", "# Training the prediction method", "\n", "", "", "trainset", "=", "data", ".", "build_full_trainset", "(", ")", "\n", "del", "data", "\n", "method", ".", "fit", "(", "trainset", ")", "\n", "\n", "# Retrieving unobserved pairs", "\n", "t", "=", "TCounter", "(", ")", "\n", "VerboseMessage", "(", "verbose", ",", "'Producing unobserved links...'", ")", "\n", "unobserved_links", "=", "trainset", ".", "build_anti_testset", "(", ")", "\n", "VerboseMessage", "(", "verbose", ",", "'Unobserved links produced in %s.'", "%", "(", "ETSec2ETTime", "(", "TCounter", "(", ")", "-", "t", ")", ")", ")", "\n", "\n", "# Making the predictions", "\n", "t", "=", "TCounter", "(", ")", "\n", "VerboseMessage", "(", "verbose", ",", "'Making predictions for unobserved links...'", ")", "\n", "predictions", "=", "method", ".", "test", "(", "unobserved_links", ")", "\n", "VerboseMessage", "(", "verbose", ",", "'Predictions for Unobserved links produced in %s.'", "%", "(", "ETSec2ETTime", "(", "TCounter", "(", ")", "-", "t", ")", ")", ")", "\n", "\n", "# Prefiltering predictions with lower scores", "\n", "if", "'prefilter_score'", "in", "param_keys", ":", "\n", "        ", "t", "=", "TCounter", "(", ")", "\n", "VerboseMessage", "(", "verbose", ",", "'Prefiltering %d predictions scores lower than %0.1f...'", "%", "(", "len", "(", "predictions", ")", ",", "parameters", "[", "'prefilter_threshold'", "]", ")", ")", "\n", "predictions", "=", "[", "p", "for", "p", "in", "predictions", "if", "p", "[", "3", "]", ">", "parameters", "[", "'prefilter_threshold'", "]", "]", "\n", "VerboseMessage", "(", "verbose", ",", "'Predictions prefiltered in %s, %d remaining.'", "%", "(", "ETSec2ETTime", "(", "TCounter", "(", ")", "-", "t", ")", ",", "len", "(", "predictions", ")", ")", ")", "\n", "\n", "# Selecting only top K predictions", "\n", "", "t", "=", "TCounter", "(", ")", "\n", "VerboseMessage", "(", "verbose", ",", "'Selecting top %d predictions...'", "%", "(", "parameters", "[", "'topK_predictions'", "]", ")", ")", "\n", "top_recs", "=", "defaultdict", "(", "list", ")", "\n", "for", "uid", ",", "iid", ",", "true_r", ",", "est", ",", "_", "in", "predictions", ":", "\n", "        ", "top_recs", "[", "uid", "]", ".", "append", "(", "(", "iid", ",", "est", ")", ")", "\n", "", "for", "uid", ",", "user_ratings", "in", "top_recs", ".", "items", "(", ")", ":", "\n", "        ", "user_ratings", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "top_recs", "[", "uid", "]", "=", "user_ratings", "[", ":", "parameters", "[", "'topK_predictions'", "]", "]", "\n", "", "VerboseMessage", "(", "verbose", ",", "'Predictions selected in %s.'", "%", "(", "ETSec2ETTime", "(", "TCounter", "(", ")", "-", "t", ")", ")", ")", "\n", "\n", "\n", "# Putting the predictions in a DataFrame", "\n", "predictions_table", "=", "pd", ".", "DataFrame", "(", "columns", "=", "[", "'relation'", ",", "'start_group'", ",", "'start_object'", ",", "'end_group'", ",", "'end_object'", ",", "\n", "'value'", ",", "'timestamp'", "]", ")", "\n", "counter", "=", "0", "\n", "t", "=", "TCounter", "(", ")", "\n", "VerboseMessage", "(", "verbose", ",", "'Arranging predictions into a DataFrame table...'", ")", "\n", "for", "k", ",", "v", "in", "top_recs", ".", "items", "(", ")", ":", "\n", "        ", "for", "r", "in", "v", ":", "\n", "            ", "predictions_table", ".", "loc", "[", "counter", "]", "=", "[", "relation_name", ",", "start_group", ",", "k", ",", "end_group", ",", "r", "[", "0", "]", ",", "r", "[", "1", "]", ",", "timestamp", "]", "\n", "counter", "+=", "1", "\n", "\n", "", "", "VerboseMessage", "(", "verbose", ",", "'Predictions arranged into a table in %s.'", "%", "(", "ETSec2ETTime", "(", "TCounter", "(", ")", "-", "t", ")", ")", ")", "\n", "\n", "return", "predictions_table", ",", "report", ";", "\n", "", ""]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.rs.random_rs.RandomRecommender": [[9, 42], ["start_object_group.GetNames", "end_object_group.GetNames", "pandas.Timestamp", "pandas.DataFrame", "time.time", "VerboseMessage", "numpy.random.choice", "VerboseMessage", "ETSec2ETTime", "time.time"], "function", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.object_group_class.ObjectGroup.GetNames", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.object_group_class.ObjectGroup.GetNames", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.VerboseMessage", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.VerboseMessage", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.ETSec2ETTime"], ["def", "RandomRecommender", "(", "start_object_group", ",", "end_object_group", ",", "parameters", ",", "verbose", "=", "False", ")", ":", "\n", "\n", "\n", "\n", "    ", "start_objects", "=", "start_object_group", ".", "GetNames", "(", ")", "\n", "end_objects", "=", "end_object_group", ".", "GetNames", "(", ")", "\n", "\n", "start_group", "=", "start_object_group", ".", "name", "\n", "end_group", "=", "end_object_group", ".", "name", "\n", "\n", "relation_name", "=", "''", "\n", "timestamp", "=", "pd", ".", "Timestamp", "(", "''", ")", "\n", "\n", "if", "verbose", ":", "\n", "        ", "t", "=", "TCounter", "(", ")", "\n", "VerboseMessage", "(", "verbose", ",", "'Computing Random Recommendations of %s for %s...'", "%", "(", "end_group", ",", "start_group", ")", ")", "\n", "\n", "", "recommended_table", "=", "pd", ".", "DataFrame", "(", "columns", "=", "[", "'relation'", ",", "'start_group'", ",", "'start_object'", ",", "'end_group'", ",", "'end_object'", ",", "\n", "'value'", ",", "'timestamp'", "]", ")", "\n", "\n", "# For each start object...", "\n", "counter", "=", "0", "\n", "for", "start_obj", "in", "start_objects", ":", "\n", "# We select random topK_predictions objects to recommend", "\n", "        ", "user_list", "=", "np", ".", "random", ".", "choice", "(", "end_objects", ",", "size", "=", "parameters", "[", "'topK_predictions'", "]", ")", "\n", "for", "end_obj", "in", "user_list", ":", "\n", "            ", "recommended_table", ".", "loc", "[", "counter", "]", "=", "[", "relation_name", ",", "start_group", ",", "start_obj", ",", "end_group", ",", "end_obj", ",", "''", ",", "timestamp", "]", "\n", "counter", "+=", "1", "\n", "\n", "", "", "if", "verbose", ":", "\n", "        ", "VerboseMessage", "(", "verbose", ",", "'Random Recommendations computed in %s.'", "%", "(", "ETSec2ETTime", "(", "TCounter", "(", ")", "-", "t", ")", ")", ")", "\n", "\n", "", "return", "recommended_table", ",", "{", "}", ";", "\n", "", ""]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.rs.content_based.ContentBased": [[8, 65], ["pandas.Timestamp", "range", "matrix.tolil.tolil", "hin.GetLinkGroup().stochastic_matrix.tolil", "hin.GetLinkGroupEndObjectGroup().OjectNameDicFromPosition", "hin.GetLinkGroupStartObjectGroup().OjectNameDicFromPosition", "pandas.DataFrame", "range", "time.time", "VerboseMessage", "len", "numpy.array", "VerboseMessage", "hin.GetLinkGroupEndObjectGroup", "hin.GetLinkGroupStartObjectGroup", "hin.GetLinkGroup", "ETSec2ETTime", "hin.GetPathStochasticMatrix", "numpy.argsort", "numpy.isin", "hin.GetPathStochasticMatrix", "time.time"], "function", ["home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.object_group_class.ObjectGroup.OjectNameDicFromPosition", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.object_group_class.ObjectGroup.OjectNameDicFromPosition", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.VerboseMessage", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.VerboseMessage", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroupEndObjectGroup", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroupStartObjectGroup", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetLinkGroup", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.hinpy.general.ETSec2ETTime", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetPathStochasticMatrix", "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.classes.hin_class.HIN.GetPathStochasticMatrix"], ["def", "ContentBased", "(", "hin", ",", "relation_name", ",", "seen_relation", ",", "paths", ",", "paths_weights", ",", "topK", ",", "verbose", "=", "False", ")", ":", "\n", "\n", "    ", "likes_table", "=", "hin", ".", "table", "[", "hin", ".", "table", ".", "relation", "==", "relation_name", "]", "\n", "seen_table", "=", "hin", ".", "table", "[", "hin", ".", "table", ".", "relation", "==", "seen_relation", "]", "\n", "\n", "if", "verbose", ":", "\n", "        ", "t", "=", "TCounter", "(", ")", "\n", "VerboseMessage", "(", "verbose", ",", "'Computing Content-Based Filtering of %s...'", "%", "(", "likes_table", ".", "relation", ".", "iloc", "[", "0", "]", ")", ")", "\n", "\n", "# Retrieving names", "\n", "", "start_group", "=", "likes_table", ".", "start_group", ".", "iloc", "[", "0", "]", "\n", "end_group", "=", "likes_table", ".", "end_group", ".", "iloc", "[", "0", "]", "\n", "timestamp", "=", "pd", ".", "Timestamp", "(", "''", ")", "\n", "\n", "# Producing the actual recommendations", "\n", "######################################", "\n", "\n", "# Producing the recommendation", "\n", "\n", "# Getting the ponderation of path stochastic matrices", "\n", "for", "p", "in", "range", "(", "len", "(", "paths", ")", ")", ":", "\n", "        ", "if", "p", "==", "0", ":", "\n", "            ", "matrix", "=", "paths_weights", "[", "p", "]", "*", "hin", ".", "GetPathStochasticMatrix", "(", "paths", "[", "p", "]", ")", "[", ":", "-", "1", ",", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "matrix", "=", "matrix", "+", "paths_weights", "[", "p", "]", "*", "hin", ".", "GetPathStochasticMatrix", "(", "paths", "[", "p", "]", ")", "[", ":", "-", "1", ",", ":", "-", "1", "]", "\n", "", "", "matrix", "=", "matrix", ".", "tolil", "(", ")", "\n", "seen_matrix", "=", "hin", ".", "GetLinkGroup", "(", "seen_relation", ")", ".", "stochastic_matrix", ".", "tolil", "(", ")", "\n", "# Getting start and end object group position dictionaries", "\n", "end_objects_dic", "=", "hin", ".", "GetLinkGroupEndObjectGroup", "(", "relation_name", ")", ".", "OjectNameDicFromPosition", "(", ")", "\n", "start_objects_dic", "=", "hin", ".", "GetLinkGroupStartObjectGroup", "(", "relation_name", ")", ".", "OjectNameDicFromPosition", "(", ")", "\n", "\n", "\n", "\n", "# Table to stock recommendations", "\n", "recommended_table", "=", "pd", ".", "DataFrame", "(", "columns", "=", "[", "'relation'", ",", "'start_group'", ",", "'start_object'", ",", "'end_group'", ",", "'end_object'", ",", "'value'", ",", "'timestamp'", "]", ")", "\n", "counter", "=", "0", "\n", "\n", "# For each row of the lil matrix", "\n", "for", "row_id", "in", "range", "(", "matrix", ".", "shape", "[", "0", "]", ")", ":", "\n", "# We retrieve the orderer list of columns of elements in decreasing order", "\n", "        ", "cols", "=", "np", ".", "array", "(", "matrix", ".", "rows", "[", "row_id", "]", ")", "\n", "ordered_cols", "=", "cols", "[", "np", ".", "argsort", "(", "matrix", ".", "data", "[", "row_id", "]", ")", "[", ":", ":", "-", "1", "]", "]", "\n", "# Get end objects already seen by start object", "\n", "seen_columns", "=", "seen_matrix", ".", "rows", "[", "row_id", "]", "\n", "# Delete those already seen by start object", "\n", "ordered_cols", "=", "ordered_cols", "[", "~", "np", ".", "isin", "(", "ordered_cols", ",", "seen_columns", ")", "]", "\n", "# Selecting topK end objects", "\n", "ordered_cols", "=", "ordered_cols", "[", ":", "topK", "]", "\n", "# Get start object", "\n", "start_obj", "=", "start_objects_dic", "[", "row_id", "]", "\n", "for", "pos", "in", "ordered_cols", ":", "\n", "            ", "end_objects_dic", "\n", "recommended_table", ".", "loc", "[", "counter", "]", "=", "[", "relation_name", ",", "start_group", ",", "start_obj", ",", "end_group", ",", "end_objects_dic", "[", "pos", "]", ",", "''", ",", "timestamp", "]", "\n", "counter", "+=", "1", "\n", "", "", "if", "verbose", ":", "\n", "        ", "VerboseMessage", "(", "verbose", ",", "'Content-Based Filtering computed in %s.'", "%", "(", "ETSec2ETTime", "(", "TCounter", "(", ")", "-", "t", ")", ")", ")", "\n", "", "return", "recommended_table", ";", "\n", "", ""]], "home.repos.pwc.inspect_result.pedroramaciotti_HINPy.tests.test.likes": [[9, 14], ["None"], "function", ["None"], ["def", "likes", "(", "x", ")", ":", "\n", "    ", "if", "x", "<", "5", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "return", "True", "\n", "\n"]]}