{"home.repos.pwc.inspect_result.artetxem_vecmap.None.eval_analogy.main": [[26, 114], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "open", "embeddings.read", "embeddings.length_normalize", "open", "len", "range", "numpy.array", "print", "line.startswith", "min", "numpy.argmax().tolist", "numpy.sum", "print", "sys.stdin.fileno", "enumerate", "name.startswith", "categories.append", "print", "src1.append", "trg1.append", "src2.append", "trg2.append", "numpy.argmax", "range", "range", "range", "line.split", "word.lower"], "function", ["home.repos.pwc.inspect_result.artetxem_vecmap.None.embeddings.read", "home.repos.pwc.inspect_result.artetxem_vecmap.None.embeddings.length_normalize"], ["def", "main", "(", ")", ":", "\n", "# Parse command line arguments", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Evaluate embeddings in word analogy'", ")", "\n", "parser", ".", "add_argument", "(", "'embeddings'", ",", "help", "=", "'the word embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'-t'", ",", "'--threshold'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'reduce vocabulary of the model for fast approximate evaluation (0 = off, otherwise typical value is 30,000)'", ")", "\n", "parser", ".", "add_argument", "(", "'-i'", ",", "'--input'", ",", "default", "=", "sys", ".", "stdin", ".", "fileno", "(", ")", ",", "help", "=", "'the test file (defaults to stdin)'", ")", "\n", "parser", ".", "add_argument", "(", "'-v'", ",", "'--verbose'", ",", "action", "=", "'store_true'", ",", "help", "=", "'verbose output (give category specific results)'", ")", "\n", "parser", ".", "add_argument", "(", "'-l'", ",", "'--lowercase'", ",", "action", "=", "'store_true'", ",", "help", "=", "'lowercase the words in the test file'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoding'", ",", "default", "=", "'utf-8'", ",", "help", "=", "'the character encoding for input/output (defaults to utf-8)'", ")", "\n", "parser", ".", "add_argument", "(", "'--precision'", ",", "choices", "=", "[", "'fp16'", ",", "'fp32'", ",", "'fp64'", "]", ",", "default", "=", "'fp32'", ",", "help", "=", "'the floating-point precision (defaults to fp32)'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# Choose the right dtype for the desired precision", "\n", "if", "args", ".", "precision", "==", "'fp16'", ":", "\n", "        ", "dtype", "=", "'float16'", "\n", "", "elif", "args", ".", "precision", "==", "'fp32'", ":", "\n", "        ", "dtype", "=", "'float32'", "\n", "", "elif", "args", ".", "precision", "==", "'fp64'", ":", "\n", "        ", "dtype", "=", "'float64'", "\n", "\n", "# Read input embeddings", "\n", "", "f", "=", "open", "(", "args", ".", "embeddings", ",", "encoding", "=", "args", ".", "encoding", ",", "errors", "=", "'surrogateescape'", ")", "\n", "words", ",", "matrix", "=", "embeddings", ".", "read", "(", "f", ",", "threshold", "=", "args", ".", "threshold", ",", "dtype", "=", "dtype", ")", "\n", "\n", "# Build word to index map", "\n", "word2ind", "=", "{", "word", ":", "i", "for", "i", ",", "word", "in", "enumerate", "(", "words", ")", "}", "\n", "\n", "# Length normalize embeddings", "\n", "embeddings", ".", "length_normalize", "(", "matrix", ")", "\n", "\n", "# Parse test file", "\n", "f", "=", "open", "(", "args", ".", "input", ",", "encoding", "=", "args", ".", "encoding", ",", "errors", "=", "'surrogateescape'", ")", "\n", "categories", "=", "[", "]", "\n", "src1", "=", "[", "]", "\n", "trg1", "=", "[", "]", "\n", "src2", "=", "[", "]", "\n", "trg2", "=", "[", "]", "\n", "for", "line", "in", "f", ":", "\n", "        ", "if", "line", ".", "startswith", "(", "': '", ")", ":", "\n", "            ", "name", "=", "line", "[", "2", ":", "-", "1", "]", "\n", "is_syntactic", "=", "name", ".", "startswith", "(", "'gram'", ")", "\n", "categories", ".", "append", "(", "{", "'name'", ":", "name", ",", "'is_syntactic'", ":", "is_syntactic", ",", "'total'", ":", "0", ",", "'oov'", ":", "0", "}", ")", "\n", "", "else", ":", "\n", "            ", "try", ":", "\n", "                ", "ind", "=", "[", "word2ind", "[", "word", ".", "lower", "(", ")", "if", "args", ".", "lowercase", "else", "word", "]", "for", "word", "in", "line", ".", "split", "(", ")", "]", "\n", "src1", ".", "append", "(", "ind", "[", "0", "]", ")", "\n", "trg1", ".", "append", "(", "ind", "[", "1", "]", ")", "\n", "src2", ".", "append", "(", "ind", "[", "2", "]", ")", "\n", "trg2", ".", "append", "(", "ind", "[", "3", "]", ")", "\n", "categories", "[", "-", "1", "]", "[", "'total'", "]", "+=", "1", "\n", "", "except", "KeyError", ":", "\n", "                ", "categories", "[", "-", "1", "]", "[", "'oov'", "]", "+=", "1", "\n", "", "", "", "total", "=", "len", "(", "src1", ")", "\n", "\n", "# Compute nearest neighbors using efficient matrix multiplication", "\n", "nn", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "total", ",", "BATCH_SIZE", ")", ":", "\n", "        ", "j", "=", "min", "(", "i", "+", "BATCH_SIZE", ",", "total", ")", "\n", "similarities", "=", "(", "matrix", "[", "src2", "[", "i", ":", "j", "]", "]", "-", "matrix", "[", "src1", "[", "i", ":", "j", "]", "]", "+", "matrix", "[", "trg1", "[", "i", ":", "j", "]", "]", ")", ".", "dot", "(", "matrix", ".", "T", ")", "\n", "similarities", "[", "range", "(", "j", "-", "i", ")", ",", "src1", "[", "i", ":", "j", "]", "]", "=", "-", "1", "\n", "similarities", "[", "range", "(", "j", "-", "i", ")", ",", "trg1", "[", "i", ":", "j", "]", "]", "=", "-", "1", "\n", "similarities", "[", "range", "(", "j", "-", "i", ")", ",", "src2", "[", "i", ":", "j", "]", "]", "=", "-", "1", "\n", "nn", "+=", "np", ".", "argmax", "(", "similarities", ",", "axis", "=", "1", ")", ".", "tolist", "(", ")", "\n", "", "nn", "=", "np", ".", "array", "(", "nn", ")", "\n", "\n", "# Compute and print accuracies", "\n", "semantic", "=", "{", "'correct'", ":", "0", ",", "'total'", ":", "0", ",", "'oov'", ":", "0", "}", "\n", "syntactic", "=", "{", "'correct'", ":", "0", ",", "'total'", ":", "0", ",", "'oov'", ":", "0", "}", "\n", "ind", "=", "0", "\n", "for", "category", "in", "categories", ":", "\n", "        ", "current", "=", "syntactic", "if", "category", "[", "'is_syntactic'", "]", "else", "semantic", "\n", "correct", "=", "np", ".", "sum", "(", "nn", "[", "ind", ":", "ind", "+", "category", "[", "'total'", "]", "]", "==", "trg2", "[", "ind", ":", "ind", "+", "category", "[", "'total'", "]", "]", ")", "\n", "current", "[", "'correct'", "]", "+=", "correct", "\n", "current", "[", "'total'", "]", "+=", "category", "[", "'total'", "]", "\n", "current", "[", "'oov'", "]", "+=", "category", "[", "'oov'", "]", "\n", "ind", "+=", "category", "[", "'total'", "]", "\n", "if", "args", ".", "verbose", ":", "\n", "            ", "print", "(", "'Coverage:{0:7.2%}  Accuracy:{1:7.2%} | {2}'", ".", "format", "(", "\n", "category", "[", "'total'", "]", "/", "(", "category", "[", "'total'", "]", "+", "category", "[", "'oov'", "]", ")", ",", "\n", "correct", "/", "category", "[", "'total'", "]", ",", "\n", "category", "[", "'name'", "]", ")", ")", "\n", "", "", "if", "args", ".", "verbose", ":", "\n", "        ", "print", "(", "'-'", "*", "80", ")", "\n", "", "print", "(", "'Coverage:{0:7.2%}  Accuracy:{1:7.2%} (sem:{2:7.2%}, syn:{3:7.2%})'", ".", "format", "(", "\n", "(", "semantic", "[", "'total'", "]", "+", "syntactic", "[", "'total'", "]", ")", "/", "(", "semantic", "[", "'total'", "]", "+", "syntactic", "[", "'total'", "]", "+", "semantic", "[", "'oov'", "]", "+", "syntactic", "[", "'oov'", "]", ")", ",", "\n", "(", "semantic", "[", "'correct'", "]", "+", "syntactic", "[", "'correct'", "]", ")", "/", "(", "semantic", "[", "'total'", "]", "+", "syntactic", "[", "'total'", "]", ")", ",", "\n", "semantic", "[", "'correct'", "]", "/", "semantic", "[", "'total'", "]", ",", "\n", "syntactic", "[", "'correct'", "]", "/", "syntactic", "[", "'total'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.artetxem_vecmap.None.cupy_utils.supports_cupy": [[24, 26], ["None"], "function", ["None"], ["", "def", "supports_cupy", "(", ")", ":", "\n", "    ", "return", "cupy", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.artetxem_vecmap.None.cupy_utils.get_cupy": [[28, 30], ["None"], "function", ["None"], ["", "def", "get_cupy", "(", ")", ":", "\n", "    ", "return", "cupy", "\n", "\n"]], "home.repos.pwc.inspect_result.artetxem_vecmap.None.cupy_utils.get_array_module": [[32, 37], ["cupy.get_array_module"], "function", ["home.repos.pwc.inspect_result.artetxem_vecmap.None.cupy_utils.get_array_module"], ["", "def", "get_array_module", "(", "x", ")", ":", "\n", "    ", "if", "cupy", "is", "not", "None", ":", "\n", "        ", "return", "cupy", ".", "get_array_module", "(", "x", ")", "\n", "", "else", ":", "\n", "        ", "return", "numpy", "\n", "\n"]], "home.repos.pwc.inspect_result.artetxem_vecmap.None.cupy_utils.asnumpy": [[39, 44], ["cupy.asnumpy", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.artetxem_vecmap.None.cupy_utils.asnumpy"], ["", "", "def", "asnumpy", "(", "x", ")", ":", "\n", "    ", "if", "cupy", "is", "not", "None", ":", "\n", "        ", "return", "cupy", ".", "asnumpy", "(", "x", ")", "\n", "", "else", ":", "\n", "        ", "return", "numpy", ".", "asarray", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.artetxem_vecmap.None.normalize_embeddings.main": [[22, 41], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "open", "embeddings.read", "embeddings.normalize", "open", "embeddings.write", "sys.stdin.fileno", "sys.stdout.fileno"], "function", ["home.repos.pwc.inspect_result.artetxem_vecmap.None.embeddings.read", "home.repos.pwc.inspect_result.artetxem_vecmap.None.embeddings.normalize", "home.repos.pwc.inspect_result.artetxem_vecmap.None.embeddings.write"], ["def", "main", "(", ")", ":", "\n", "# Parse command line arguments", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Normalize word embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'actions'", ",", "choices", "=", "[", "'unit'", ",", "'center'", ",", "'unitdim'", ",", "'centeremb'", "]", ",", "nargs", "=", "'*'", ",", "default", "=", "[", "]", ",", "help", "=", "'the actions to perform in order'", ")", "\n", "parser", ".", "add_argument", "(", "'-i'", ",", "'--input'", ",", "default", "=", "sys", ".", "stdin", ".", "fileno", "(", ")", ",", "help", "=", "'the input word embedding file (defaults to stdin)'", ")", "\n", "parser", ".", "add_argument", "(", "'-o'", ",", "'--output'", ",", "default", "=", "sys", ".", "stdout", ".", "fileno", "(", ")", ",", "help", "=", "'the output word embedding file (defaults to stdout)'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoding'", ",", "default", "=", "'utf-8'", ",", "help", "=", "'the character encoding for input/output (defaults to utf-8)'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# Read input embeddings", "\n", "f", "=", "open", "(", "args", ".", "input", ",", "encoding", "=", "args", ".", "encoding", ",", "errors", "=", "'surrogateescape'", ")", "\n", "words", ",", "matrix", "=", "embeddings", ".", "read", "(", "f", ")", "\n", "\n", "# Perform normalization actions", "\n", "embeddings", ".", "normalize", "(", "matrix", ",", "args", ".", "actions", ")", "\n", "\n", "# Write normalized embeddings", "\n", "f", "=", "open", "(", "args", ".", "output", ",", "mode", "=", "'w'", ",", "encoding", "=", "args", ".", "encoding", ",", "errors", "=", "'surrogateescape'", ")", "\n", "embeddings", ".", "write", "(", "words", ",", "matrix", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.artetxem_vecmap.None.embeddings.read": [[21, 36], ["file.readline().split", "int", "range", "int", "min", "numpy.empty", "file.readline().split", "file.readline", "int", "words.append", "numpy.fromstring", "numpy.array", "file.readline", "words.append", "matrix.append", "numpy.fromstring"], "function", ["None"], ["def", "read", "(", "file", ",", "threshold", "=", "0", ",", "vocabulary", "=", "None", ",", "dtype", "=", "'float'", ")", ":", "\n", "    ", "header", "=", "file", ".", "readline", "(", ")", ".", "split", "(", "' '", ")", "\n", "count", "=", "int", "(", "header", "[", "0", "]", ")", "if", "threshold", "<=", "0", "else", "min", "(", "threshold", ",", "int", "(", "header", "[", "0", "]", ")", ")", "\n", "dim", "=", "int", "(", "header", "[", "1", "]", ")", "\n", "words", "=", "[", "]", "\n", "matrix", "=", "np", ".", "empty", "(", "(", "count", ",", "dim", ")", ",", "dtype", "=", "dtype", ")", "if", "vocabulary", "is", "None", "else", "[", "]", "\n", "for", "i", "in", "range", "(", "count", ")", ":", "\n", "        ", "word", ",", "vec", "=", "file", ".", "readline", "(", ")", ".", "split", "(", "' '", ",", "1", ")", "\n", "if", "vocabulary", "is", "None", ":", "\n", "            ", "words", ".", "append", "(", "word", ")", "\n", "matrix", "[", "i", "]", "=", "np", ".", "fromstring", "(", "vec", ",", "sep", "=", "' '", ",", "dtype", "=", "dtype", ")", "\n", "", "elif", "word", "in", "vocabulary", ":", "\n", "            ", "words", ".", "append", "(", "word", ")", "\n", "matrix", ".", "append", "(", "np", ".", "fromstring", "(", "vec", ",", "sep", "=", "' '", ",", "dtype", "=", "dtype", ")", ")", "\n", "", "", "return", "(", "words", ",", "matrix", ")", "if", "vocabulary", "is", "None", "else", "(", "words", ",", "np", ".", "array", "(", "matrix", ",", "dtype", "=", "dtype", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.artetxem_vecmap.None.embeddings.write": [[38, 43], ["cupy_utils.asnumpy", "print", "range", "len", "print"], "function", ["home.repos.pwc.inspect_result.artetxem_vecmap.None.cupy_utils.asnumpy"], ["", "def", "write", "(", "words", ",", "matrix", ",", "file", ")", ":", "\n", "    ", "m", "=", "asnumpy", "(", "matrix", ")", "\n", "print", "(", "'%d %d'", "%", "m", ".", "shape", ",", "file", "=", "file", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "words", ")", ")", ":", "\n", "        ", "print", "(", "words", "[", "i", "]", "+", "' '", "+", "' '", ".", "join", "(", "[", "'%.6g'", "%", "x", "for", "x", "in", "m", "[", "i", "]", "]", ")", ",", "file", "=", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.artetxem_vecmap.None.embeddings.length_normalize": [[45, 50], ["cupy_utils.get_array_module", "cupy_utils.get_array_module.sqrt", "cupy_utils.get_array_module.sum"], "function", ["home.repos.pwc.inspect_result.artetxem_vecmap.None.cupy_utils.get_array_module"], ["", "", "def", "length_normalize", "(", "matrix", ")", ":", "\n", "    ", "xp", "=", "get_array_module", "(", "matrix", ")", "\n", "norms", "=", "xp", ".", "sqrt", "(", "xp", ".", "sum", "(", "matrix", "**", "2", ",", "axis", "=", "1", ")", ")", "\n", "norms", "[", "norms", "==", "0", "]", "=", "1", "\n", "matrix", "/=", "norms", "[", ":", ",", "xp", ".", "newaxis", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.artetxem_vecmap.None.embeddings.mean_center": [[52, 56], ["cupy_utils.get_array_module", "cupy_utils.get_array_module.mean"], "function", ["home.repos.pwc.inspect_result.artetxem_vecmap.None.cupy_utils.get_array_module"], ["", "def", "mean_center", "(", "matrix", ")", ":", "\n", "    ", "xp", "=", "get_array_module", "(", "matrix", ")", "\n", "avg", "=", "xp", ".", "mean", "(", "matrix", ",", "axis", "=", "0", ")", "\n", "matrix", "-=", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.artetxem_vecmap.None.embeddings.length_normalize_dimensionwise": [[58, 63], ["cupy_utils.get_array_module", "cupy_utils.get_array_module.sqrt", "cupy_utils.get_array_module.sum"], "function", ["home.repos.pwc.inspect_result.artetxem_vecmap.None.cupy_utils.get_array_module"], ["", "def", "length_normalize_dimensionwise", "(", "matrix", ")", ":", "\n", "    ", "xp", "=", "get_array_module", "(", "matrix", ")", "\n", "norms", "=", "xp", ".", "sqrt", "(", "xp", ".", "sum", "(", "matrix", "**", "2", ",", "axis", "=", "0", ")", ")", "\n", "norms", "[", "norms", "==", "0", "]", "=", "1", "\n", "matrix", "/=", "norms", "\n", "\n"]], "home.repos.pwc.inspect_result.artetxem_vecmap.None.embeddings.mean_center_embeddingwise": [[65, 69], ["cupy_utils.get_array_module", "cupy_utils.get_array_module.mean"], "function", ["home.repos.pwc.inspect_result.artetxem_vecmap.None.cupy_utils.get_array_module"], ["", "def", "mean_center_embeddingwise", "(", "matrix", ")", ":", "\n", "    ", "xp", "=", "get_array_module", "(", "matrix", ")", "\n", "avg", "=", "xp", ".", "mean", "(", "matrix", ",", "axis", "=", "1", ")", "\n", "matrix", "-=", "avg", "[", ":", ",", "xp", ".", "newaxis", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.artetxem_vecmap.None.embeddings.normalize": [[71, 81], ["embeddings.length_normalize", "embeddings.mean_center", "embeddings.length_normalize_dimensionwise", "embeddings.mean_center_embeddingwise"], "function", ["home.repos.pwc.inspect_result.artetxem_vecmap.None.embeddings.length_normalize", "home.repos.pwc.inspect_result.artetxem_vecmap.None.embeddings.mean_center", "home.repos.pwc.inspect_result.artetxem_vecmap.None.embeddings.length_normalize_dimensionwise", "home.repos.pwc.inspect_result.artetxem_vecmap.None.embeddings.mean_center_embeddingwise"], ["", "def", "normalize", "(", "matrix", ",", "actions", ")", ":", "\n", "    ", "for", "action", "in", "actions", ":", "\n", "        ", "if", "action", "==", "'unit'", ":", "\n", "            ", "length_normalize", "(", "matrix", ")", "\n", "", "elif", "action", "==", "'center'", ":", "\n", "            ", "mean_center", "(", "matrix", ")", "\n", "", "elif", "action", "==", "'unitdim'", ":", "\n", "            ", "length_normalize_dimensionwise", "(", "matrix", ")", "\n", "", "elif", "action", "==", "'centeremb'", ":", "\n", "            ", "mean_center_embeddingwise", "(", "matrix", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.artetxem_vecmap.None.eval_similarity.main": [[25, 117], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "open", "open", "embeddings.read", "embeddings.read", "embeddings.length_normalize", "embeddings.length_normalize", "range", "open", "word_pairs.append", "golds.append", "len", "zip", "list.append", "print", "len", "print", "list", "print", "line.lower.split", "word_pairs[].append", "golds[].append", "enumerate", "enumerate", "os.path.splitext", "len", "scipy.stats.pearsonr", "scipy.stats.spearmanr", "list", "print", "list", "print", "zip", "sys.stdin.fileno", "line.lower.lower", "float", "numpy.dot", "system.append", "gold.append", "os.path.basename", "len", "zip", "zip", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "system.append", "gold.append"], "function", ["home.repos.pwc.inspect_result.artetxem_vecmap.None.embeddings.read", "home.repos.pwc.inspect_result.artetxem_vecmap.None.embeddings.read", "home.repos.pwc.inspect_result.artetxem_vecmap.None.embeddings.length_normalize", "home.repos.pwc.inspect_result.artetxem_vecmap.None.embeddings.length_normalize"], ["def", "main", "(", ")", ":", "\n", "# Parse command line arguments", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Evaluate embeddings in word similarity/relatedness'", ")", "\n", "parser", ".", "add_argument", "(", "'src_embeddings'", ",", "help", "=", "'the source language embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'trg_embeddings'", ",", "nargs", "=", "'?'", ",", "help", "=", "'the target language embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'-i'", ",", "'--input'", ",", "default", "=", "[", "sys", ".", "stdin", ".", "fileno", "(", ")", "]", ",", "nargs", "=", "'+'", ",", "help", "=", "'the input datasets (defaults to stdin)'", ")", "\n", "parser", ".", "add_argument", "(", "'-l'", ",", "'--lowercase'", ",", "action", "=", "'store_true'", ",", "help", "=", "'lowercase the words in the test files'", ")", "\n", "parser", ".", "add_argument", "(", "'--backoff'", ",", "default", "=", "None", ",", "type", "=", "float", ",", "help", "=", "'use a backoff similarity score for OOV entries'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoding'", ",", "default", "=", "'utf-8'", ",", "help", "=", "'the character encoding for input/output (defaults to utf-8)'", ")", "\n", "parser", ".", "add_argument", "(", "'--precision'", ",", "choices", "=", "[", "'fp16'", ",", "'fp32'", ",", "'fp64'", "]", ",", "default", "=", "'fp32'", ",", "help", "=", "'the floating-point precision (defaults to fp32)'", ")", "\n", "parser", ".", "add_argument", "(", "'--sim'", ",", "nargs", "=", "'*'", ",", "help", "=", "'the names of the datasets to include in the similarity results'", ")", "\n", "parser", ".", "add_argument", "(", "'--rel'", ",", "nargs", "=", "'*'", ",", "help", "=", "'the names of the datasets to include in the relatedness results'", ")", "\n", "parser", ".", "add_argument", "(", "'--all'", ",", "nargs", "=", "'*'", ",", "help", "=", "'the names of the datasets to include in the total results'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# Choose the right dtype for the desired precision", "\n", "if", "args", ".", "precision", "==", "'fp16'", ":", "\n", "        ", "dtype", "=", "'float16'", "\n", "", "elif", "args", ".", "precision", "==", "'fp32'", ":", "\n", "        ", "dtype", "=", "'float32'", "\n", "", "elif", "args", ".", "precision", "==", "'fp64'", ":", "\n", "        ", "dtype", "=", "'float64'", "\n", "\n", "# Parse test files", "\n", "", "word_pairs", "=", "[", "]", "\n", "golds", "=", "[", "]", "\n", "for", "filename", "in", "args", ".", "input", ":", "\n", "        ", "f", "=", "open", "(", "filename", ",", "encoding", "=", "args", ".", "encoding", ",", "errors", "=", "'surrogateescape'", ")", "\n", "word_pairs", ".", "append", "(", "[", "]", ")", "\n", "golds", ".", "append", "(", "[", "]", ")", "\n", "for", "line", "in", "f", ":", "\n", "            ", "if", "args", ".", "lowercase", ":", "\n", "                ", "line", "=", "line", ".", "lower", "(", ")", "\n", "", "src", ",", "trg", ",", "score", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "word_pairs", "[", "-", "1", "]", ".", "append", "(", "(", "src", ",", "trg", ")", ")", "\n", "golds", "[", "-", "1", "]", ".", "append", "(", "float", "(", "score", ")", ")", "\n", "\n", "# Build vocabularies", "\n", "", "", "src_vocab", "=", "{", "pair", "[", "0", "]", "for", "pairs", "in", "word_pairs", "for", "pair", "in", "pairs", "}", "\n", "trg_vocab", "=", "{", "pair", "[", "1", "]", "for", "pairs", "in", "word_pairs", "for", "pair", "in", "pairs", "}", "\n", "\n", "# Read embeddings", "\n", "srcfile", "=", "open", "(", "args", ".", "src_embeddings", ",", "encoding", "=", "args", ".", "encoding", ",", "errors", "=", "'surrogateescape'", ")", "\n", "trgfile", "=", "open", "(", "args", ".", "src_embeddings", "if", "args", ".", "trg_embeddings", "is", "None", "else", "args", ".", "trg_embeddings", ",", "encoding", "=", "args", ".", "encoding", ",", "errors", "=", "'surrogateescape'", ")", "\n", "src_words", ",", "src_matrix", "=", "embeddings", ".", "read", "(", "srcfile", ",", "vocabulary", "=", "src_vocab", ",", "dtype", "=", "dtype", ")", "\n", "trg_words", ",", "trg_matrix", "=", "embeddings", ".", "read", "(", "trgfile", ",", "vocabulary", "=", "trg_vocab", ",", "dtype", "=", "dtype", ")", "\n", "\n", "# Length normalize embeddings so their dot product effectively computes the cosine similarity", "\n", "embeddings", ".", "length_normalize", "(", "src_matrix", ")", "\n", "embeddings", ".", "length_normalize", "(", "trg_matrix", ")", "\n", "\n", "# Build word to index map", "\n", "src_word2ind", "=", "{", "word", ":", "i", "for", "i", ",", "word", "in", "enumerate", "(", "src_words", ")", "}", "\n", "trg_word2ind", "=", "{", "word", ":", "i", "for", "i", ",", "word", "in", "enumerate", "(", "trg_words", ")", "}", "\n", "\n", "# Compute system scores and correlations", "\n", "results", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "golds", ")", ")", ":", "\n", "        ", "system", "=", "[", "]", "\n", "gold", "=", "[", "]", "\n", "oov", "=", "0", "\n", "for", "gold_score", ",", "(", "src", ",", "trg", ")", "in", "zip", "(", "golds", "[", "i", "]", ",", "word_pairs", "[", "i", "]", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "cos", "=", "np", ".", "dot", "(", "src_matrix", "[", "src_word2ind", "[", "src", "]", "]", ",", "trg_matrix", "[", "trg_word2ind", "[", "trg", "]", "]", ")", "\n", "system", ".", "append", "(", "cos", ")", "\n", "gold", ".", "append", "(", "gold_score", ")", "\n", "", "except", "KeyError", ":", "\n", "                ", "if", "args", ".", "backoff", "is", "None", ":", "\n", "                    ", "oov", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "system", ".", "append", "(", "args", ".", "backoff", ")", "\n", "gold", ".", "append", "(", "gold_score", ")", "\n", "", "", "", "name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "args", ".", "input", "[", "i", "]", ")", ")", "[", "0", "]", "\n", "coverage", "=", "len", "(", "system", ")", "/", "(", "len", "(", "system", ")", "+", "oov", ")", "\n", "pearson", "=", "scipy", ".", "stats", ".", "pearsonr", "(", "gold", ",", "system", ")", "[", "0", "]", "\n", "spearman", "=", "scipy", ".", "stats", ".", "spearmanr", "(", "gold", ",", "system", ")", "[", "0", "]", "\n", "results", ".", "append", "(", "(", "name", ",", "coverage", ",", "pearson", ",", "spearman", ")", ")", "\n", "print", "(", "'Coverage:{0:7.2%}  Pearson:{1:7.2%}  Spearman:{2:7.2%} | {3}'", ".", "format", "(", "coverage", ",", "pearson", ",", "spearman", ",", "name", ")", ")", "\n", "\n", "# Compute and print total (averaged) results", "\n", "", "if", "len", "(", "results", ")", ">", "1", ":", "\n", "        ", "print", "(", "'-'", "*", "80", ")", "\n", "if", "args", ".", "sim", "is", "not", "None", ":", "\n", "            ", "sim", "=", "list", "(", "zip", "(", "*", "[", "res", "for", "res", "in", "results", "if", "res", "[", "0", "]", "in", "args", ".", "sim", "]", ")", ")", "\n", "print", "(", "'Coverage:{0:7.2%}  Pearson:{1:7.2%}  Spearman:{2:7.2%} | sim.'", ".", "format", "(", "np", ".", "mean", "(", "sim", "[", "1", "]", ")", ",", "np", ".", "mean", "(", "sim", "[", "2", "]", ")", ",", "np", ".", "mean", "(", "sim", "[", "3", "]", ")", ")", ")", "\n", "", "if", "args", ".", "rel", "is", "not", "None", ":", "\n", "            ", "rel", "=", "list", "(", "zip", "(", "*", "[", "res", "for", "res", "in", "results", "if", "res", "[", "0", "]", "in", "args", ".", "rel", "]", ")", ")", "\n", "print", "(", "'Coverage:{0:7.2%}  Pearson:{1:7.2%}  Spearman:{2:7.2%} | rel.'", ".", "format", "(", "np", ".", "mean", "(", "rel", "[", "1", "]", ")", ",", "np", ".", "mean", "(", "rel", "[", "2", "]", ")", ",", "np", ".", "mean", "(", "rel", "[", "3", "]", ")", ")", ")", "\n", "", "if", "args", ".", "all", "is", "not", "None", ":", "\n", "            ", "results", "=", "[", "res", "for", "res", "in", "results", "if", "res", "[", "0", "]", "in", "args", ".", "all", "]", "\n", "", "results", "=", "list", "(", "zip", "(", "*", "results", ")", ")", "\n", "print", "(", "'Coverage:{0:7.2%}  Pearson:{1:7.2%}  Spearman:{2:7.2%} | all'", ".", "format", "(", "np", ".", "mean", "(", "results", "[", "1", "]", ")", ",", "np", ".", "mean", "(", "results", "[", "2", "]", ")", ",", "np", ".", "mean", "(", "results", "[", "3", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.artetxem_vecmap.None.map_embeddings.dropout": [[27, 34], ["cupy_utils.get_array_module", "cupy_utils.get_array_module.random.rand"], "function", ["home.repos.pwc.inspect_result.artetxem_vecmap.None.cupy_utils.get_array_module"], ["def", "dropout", "(", "m", ",", "p", ")", ":", "\n", "    ", "if", "p", "<=", "0.0", ":", "\n", "        ", "return", "m", "\n", "", "else", ":", "\n", "        ", "xp", "=", "get_array_module", "(", "m", ")", "\n", "mask", "=", "xp", ".", "random", ".", "rand", "(", "*", "m", ".", "shape", ")", ">=", "p", "\n", "return", "m", "*", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.artetxem_vecmap.None.map_embeddings.topk_mean": [[36, 52], ["cupy_utils.get_array_module", "cupy_utils.get_array_module.zeros", "cupy_utils.get_array_module.arange", "cupy_utils.get_array_module.empty", "xp.array.min", "range", "cupy_utils.get_array_module.array", "xp.array.argmax"], "function", ["home.repos.pwc.inspect_result.artetxem_vecmap.None.cupy_utils.get_array_module"], ["", "", "def", "topk_mean", "(", "m", ",", "k", ",", "inplace", "=", "False", ")", ":", "# TODO Assuming that axis is 1", "\n", "    ", "xp", "=", "get_array_module", "(", "m", ")", "\n", "n", "=", "m", ".", "shape", "[", "0", "]", "\n", "ans", "=", "xp", ".", "zeros", "(", "n", ",", "dtype", "=", "m", ".", "dtype", ")", "\n", "if", "k", "<=", "0", ":", "\n", "        ", "return", "ans", "\n", "", "if", "not", "inplace", ":", "\n", "        ", "m", "=", "xp", ".", "array", "(", "m", ")", "\n", "", "ind0", "=", "xp", ".", "arange", "(", "n", ")", "\n", "ind1", "=", "xp", ".", "empty", "(", "n", ",", "dtype", "=", "int", ")", "\n", "minimum", "=", "m", ".", "min", "(", ")", "\n", "for", "i", "in", "range", "(", "k", ")", ":", "\n", "        ", "m", ".", "argmax", "(", "axis", "=", "1", ",", "out", "=", "ind1", ")", "\n", "ans", "+=", "m", "[", "ind0", ",", "ind1", "]", "\n", "m", "[", "ind0", ",", "ind1", "]", "=", "minimum", "\n", "", "return", "ans", "/", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.artetxem_vecmap.None.map_embeddings.main": [[54, 419], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_mutually_exclusive_group", "recommended_group.add_mutually_exclusive_group.add_argument", "recommended_group.add_mutually_exclusive_group.add_argument", "recommended_group.add_mutually_exclusive_group.add_argument", "recommended_group.add_mutually_exclusive_group.add_argument", "recommended_group.add_mutually_exclusive_group.add_argument", "recommended_group.add_mutually_exclusive_group.add_argument", "recommended_group.add_mutually_exclusive_group.add_argument", "recommended_group.add_mutually_exclusive_group.add_argument", "recommended_group.add_mutually_exclusive_group.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_mutually_exclusive_group", "init_group.add_mutually_exclusive_group.add_argument", "init_group.add_mutually_exclusive_group.add_argument", "init_group.add_mutually_exclusive_group.add_argument", "init_group.add_mutually_exclusive_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_mutually_exclusive_group", "mapping_group.add_mutually_exclusive_group.add_argument", "mapping_group.add_mutually_exclusive_group.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.parse_args", "argparse.ArgumentParser.parse_args", "open", "open", "embeddings.read", "embeddings.read", "cupy_utils.get_cupy.random.seed", "embeddings.normalize", "embeddings.normalize", "cupy_utils.get_cupy.empty_like", "cupy_utils.get_cupy.empty_like", "cupy_utils.get_cupy.empty", "cupy_utils.get_cupy.empty", "cupy_utils.get_cupy.full", "cupy_utils.get_cupy.arange", "cupy_utils.get_cupy.zeros", "cupy_utils.get_cupy.full", "cupy_utils.get_cupy.zeros", "cupy_utils.get_cupy.arange", "cupy_utils.get_cupy.zeros", "cupy_utils.get_cupy.zeros", "time.time", "open", "open", "embeddings.write", "embeddings.write", "open.close", "open.close", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.set_defaults", "print", "sys.exit", "cupy_utils.get_cupy", "cupy_utils.get_cupy.asarray", "cupy_utils.get_cupy.asarray", "cupy_utils.get_cupy.linalg.svd", "cupy_utils.get_cupy.linalg.svd", "xsim.sort", "zsim.sort", "embeddings.normalize", "embeddings.normalize", "xsim.dot", "open", "collections.defaultdict", "set", "set", "open", "min", "min", "cupy_utils.get_cupy.empty", "time.time", "sys.stdin.fileno", "cupy_utils.supports_cupy", "print", "sys.exit", "enumerate", "enumerate", "min", "min", "map_embeddings.topk_mean", "map_embeddings.topk_mean", "cupy_utils.get_cupy.arange", "xsim.dot.argmax", "re.compile", "src_numerals.intersection", "line.split", "len", "min", "cupy_utils.get_cupy.linalg.svd", "vt.T.dot", "xp.asarray.dot", "xsim.dot.argmax", "cupy_utils.get_cupy.arange", "xp.concatenate.append", "xp.concatenate.append", "set().intersection", "open", "validation[].add", "set.add", "len", "len", "len", "z[].T.dot", "cupy_utils.get_cupy.linalg.inv().dot", "xp.linalg.inv().dot.dot", "xp.asarray.dot", "cupy_utils.get_cupy.linalg.svd", "xw.dot.dot", "zw.dot.dot", "range", "range", "cupy_utils.get_cupy.mean().tolist", "list", "xw[].dot", "cupy_utils.asnumpy", "numpy.mean", "numpy.mean", "time.time", "print", "print", "print", "print", "sys.stderr.flush", "print", "open.flush", "cupy_utils.get_cupy.concatenate", "cupy_utils.get_cupy.concatenate", "set", "xp.concatenate.append", "xp.concatenate.append", "line.split", "set.add", "collections.defaultdict.keys", "cupy_utils.get_cupy.linalg.svd", "vt.T.dot().dot", "map_embeddings.main.whitening_transformation"], "function", ["home.repos.pwc.inspect_result.artetxem_vecmap.None.embeddings.read", "home.repos.pwc.inspect_result.artetxem_vecmap.None.embeddings.read", "home.repos.pwc.inspect_result.artetxem_vecmap.None.embeddings.normalize", "home.repos.pwc.inspect_result.artetxem_vecmap.None.embeddings.normalize", "home.repos.pwc.inspect_result.artetxem_vecmap.None.embeddings.write", "home.repos.pwc.inspect_result.artetxem_vecmap.None.embeddings.write", "home.repos.pwc.inspect_result.artetxem_vecmap.None.cupy_utils.get_cupy", "home.repos.pwc.inspect_result.artetxem_vecmap.None.embeddings.normalize", "home.repos.pwc.inspect_result.artetxem_vecmap.None.embeddings.normalize", "home.repos.pwc.inspect_result.artetxem_vecmap.None.cupy_utils.supports_cupy", "home.repos.pwc.inspect_result.artetxem_vecmap.None.eval_translation.topk_mean", "home.repos.pwc.inspect_result.artetxem_vecmap.None.eval_translation.topk_mean", "home.repos.pwc.inspect_result.artetxem_vecmap.None.cupy_utils.asnumpy"], ["", "def", "main", "(", ")", ":", "\n", "# Parse command line arguments", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Map word embeddings in two languages into a shared space'", ")", "\n", "parser", ".", "add_argument", "(", "'src_input'", ",", "help", "=", "'the input source embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'trg_input'", ",", "help", "=", "'the input target embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'src_output'", ",", "help", "=", "'the output source embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'trg_output'", ",", "help", "=", "'the output target embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoding'", ",", "default", "=", "'utf-8'", ",", "help", "=", "'the character encoding for input/output (defaults to utf-8)'", ")", "\n", "parser", ".", "add_argument", "(", "'--precision'", ",", "choices", "=", "[", "'fp16'", ",", "'fp32'", ",", "'fp64'", "]", ",", "default", "=", "'fp32'", ",", "help", "=", "'the floating-point precision (defaults to fp32)'", ")", "\n", "parser", ".", "add_argument", "(", "'--cuda'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use cuda (requires cupy)'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "default", "=", "10000", ",", "type", "=", "int", ",", "help", "=", "'batch size (defaults to 10000); does not affect results, larger is usually faster but uses more memory'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'the random seed (defaults to 0)'", ")", "\n", "\n", "recommended_group", "=", "parser", ".", "add_argument_group", "(", "'recommended settings'", ",", "'Recommended settings for different scenarios'", ")", "\n", "recommended_type", "=", "recommended_group", ".", "add_mutually_exclusive_group", "(", ")", "\n", "recommended_type", ".", "add_argument", "(", "'--supervised'", ",", "metavar", "=", "'DICTIONARY'", ",", "help", "=", "'recommended if you have a large training dictionary'", ")", "\n", "recommended_type", ".", "add_argument", "(", "'--semi_supervised'", ",", "metavar", "=", "'DICTIONARY'", ",", "help", "=", "'recommended if you have a small seed dictionary'", ")", "\n", "recommended_type", ".", "add_argument", "(", "'--identical'", ",", "action", "=", "'store_true'", ",", "help", "=", "'recommended if you have no seed dictionary but can rely on identical words'", ")", "\n", "recommended_type", ".", "add_argument", "(", "'--unsupervised'", ",", "action", "=", "'store_true'", ",", "help", "=", "'recommended if you have no seed dictionary and do not want to rely on identical words'", ")", "\n", "recommended_type", ".", "add_argument", "(", "'--acl2018'", ",", "action", "=", "'store_true'", ",", "help", "=", "'reproduce our ACL 2018 system'", ")", "\n", "recommended_type", ".", "add_argument", "(", "'--aaai2018'", ",", "metavar", "=", "'DICTIONARY'", ",", "help", "=", "'reproduce our AAAI 2018 system'", ")", "\n", "recommended_type", ".", "add_argument", "(", "'--acl2017'", ",", "action", "=", "'store_true'", ",", "help", "=", "'reproduce our ACL 2017 system with numeral initialization'", ")", "\n", "recommended_type", ".", "add_argument", "(", "'--acl2017_seed'", ",", "metavar", "=", "'DICTIONARY'", ",", "help", "=", "'reproduce our ACL 2017 system with a seed dictionary'", ")", "\n", "recommended_type", ".", "add_argument", "(", "'--emnlp2016'", ",", "metavar", "=", "'DICTIONARY'", ",", "help", "=", "'reproduce our EMNLP 2016 system'", ")", "\n", "\n", "init_group", "=", "parser", ".", "add_argument_group", "(", "'advanced initialization arguments'", ",", "'Advanced initialization arguments'", ")", "\n", "init_type", "=", "init_group", ".", "add_mutually_exclusive_group", "(", ")", "\n", "init_type", ".", "add_argument", "(", "'-d'", ",", "'--init_dictionary'", ",", "default", "=", "sys", ".", "stdin", ".", "fileno", "(", ")", ",", "metavar", "=", "'DICTIONARY'", ",", "help", "=", "'the training dictionary file (defaults to stdin)'", ")", "\n", "init_type", ".", "add_argument", "(", "'--init_identical'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use identical words as the seed dictionary'", ")", "\n", "init_type", ".", "add_argument", "(", "'--init_numerals'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use latin numerals (i.e. words matching [0-9]+) as the seed dictionary'", ")", "\n", "init_type", ".", "add_argument", "(", "'--init_unsupervised'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use unsupervised initialization'", ")", "\n", "init_group", ".", "add_argument", "(", "'--unsupervised_vocab'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'restrict the vocabulary to the top k entries for unsupervised initialization'", ")", "\n", "\n", "mapping_group", "=", "parser", ".", "add_argument_group", "(", "'advanced mapping arguments'", ",", "'Advanced embedding mapping arguments'", ")", "\n", "mapping_group", ".", "add_argument", "(", "'--normalize'", ",", "choices", "=", "[", "'unit'", ",", "'center'", ",", "'unitdim'", ",", "'centeremb'", ",", "'none'", "]", ",", "nargs", "=", "'*'", ",", "default", "=", "[", "]", ",", "help", "=", "'the normalization actions to perform in order'", ")", "\n", "mapping_group", ".", "add_argument", "(", "'--whiten'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whiten the embeddings'", ")", "\n", "mapping_group", ".", "add_argument", "(", "'--src_reweight'", ",", "type", "=", "float", ",", "default", "=", "0", ",", "nargs", "=", "'?'", ",", "const", "=", "1", ",", "help", "=", "'re-weight the source language embeddings'", ")", "\n", "mapping_group", ".", "add_argument", "(", "'--trg_reweight'", ",", "type", "=", "float", ",", "default", "=", "0", ",", "nargs", "=", "'?'", ",", "const", "=", "1", ",", "help", "=", "'re-weight the target language embeddings'", ")", "\n", "mapping_group", ".", "add_argument", "(", "'--src_dewhiten'", ",", "choices", "=", "[", "'src'", ",", "'trg'", "]", ",", "help", "=", "'de-whiten the source language embeddings'", ")", "\n", "mapping_group", ".", "add_argument", "(", "'--trg_dewhiten'", ",", "choices", "=", "[", "'src'", ",", "'trg'", "]", ",", "help", "=", "'de-whiten the target language embeddings'", ")", "\n", "mapping_group", ".", "add_argument", "(", "'--dim_reduction'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'apply dimensionality reduction'", ")", "\n", "mapping_type", "=", "mapping_group", ".", "add_mutually_exclusive_group", "(", ")", "\n", "mapping_type", ".", "add_argument", "(", "'-c'", ",", "'--orthogonal'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use orthogonal constrained mapping'", ")", "\n", "mapping_type", ".", "add_argument", "(", "'-u'", ",", "'--unconstrained'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use unconstrained mapping'", ")", "\n", "\n", "self_learning_group", "=", "parser", ".", "add_argument_group", "(", "'advanced self-learning arguments'", ",", "'Advanced arguments for self-learning'", ")", "\n", "self_learning_group", ".", "add_argument", "(", "'--self_learning'", ",", "action", "=", "'store_true'", ",", "help", "=", "'enable self-learning'", ")", "\n", "self_learning_group", ".", "add_argument", "(", "'--vocabulary_cutoff'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'restrict the vocabulary to the top k entries'", ")", "\n", "self_learning_group", ".", "add_argument", "(", "'--direction'", ",", "choices", "=", "[", "'forward'", ",", "'backward'", ",", "'union'", "]", ",", "default", "=", "'union'", ",", "help", "=", "'the direction for dictionary induction (defaults to union)'", ")", "\n", "self_learning_group", ".", "add_argument", "(", "'--csls'", ",", "type", "=", "int", ",", "nargs", "=", "'?'", ",", "default", "=", "0", ",", "const", "=", "10", ",", "metavar", "=", "'NEIGHBORHOOD_SIZE'", ",", "dest", "=", "'csls_neighborhood'", ",", "help", "=", "'use CSLS for dictionary induction'", ")", "\n", "self_learning_group", ".", "add_argument", "(", "'--threshold'", ",", "default", "=", "0.000001", ",", "type", "=", "float", ",", "help", "=", "'the convergence threshold (defaults to 0.000001)'", ")", "\n", "self_learning_group", ".", "add_argument", "(", "'--validation'", ",", "default", "=", "None", ",", "metavar", "=", "'DICTIONARY'", ",", "help", "=", "'a dictionary file for validation at each iteration'", ")", "\n", "self_learning_group", ".", "add_argument", "(", "'--stochastic_initial'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "help", "=", "'initial keep probability stochastic dictionary induction (defaults to 0.1)'", ")", "\n", "self_learning_group", ".", "add_argument", "(", "'--stochastic_multiplier'", ",", "default", "=", "2.0", ",", "type", "=", "float", ",", "help", "=", "'stochastic dictionary induction multiplier (defaults to 2.0)'", ")", "\n", "self_learning_group", ".", "add_argument", "(", "'--stochastic_interval'", ",", "default", "=", "50", ",", "type", "=", "int", ",", "help", "=", "'stochastic dictionary induction interval (defaults to 50)'", ")", "\n", "self_learning_group", ".", "add_argument", "(", "'--log'", ",", "help", "=", "'write to a log file in tsv format at each iteration'", ")", "\n", "self_learning_group", ".", "add_argument", "(", "'-v'", ",", "'--verbose'", ",", "action", "=", "'store_true'", ",", "help", "=", "'write log information to stderr at each iteration'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "supervised", "is", "not", "None", ":", "\n", "        ", "parser", ".", "set_defaults", "(", "init_dictionary", "=", "args", ".", "supervised", ",", "normalize", "=", "[", "'unit'", ",", "'center'", ",", "'unit'", "]", ",", "whiten", "=", "True", ",", "src_reweight", "=", "0.5", ",", "trg_reweight", "=", "0.5", ",", "src_dewhiten", "=", "'src'", ",", "trg_dewhiten", "=", "'trg'", ",", "batch_size", "=", "1000", ")", "\n", "", "if", "args", ".", "semi_supervised", "is", "not", "None", ":", "\n", "        ", "parser", ".", "set_defaults", "(", "init_dictionary", "=", "args", ".", "semi_supervised", ",", "normalize", "=", "[", "'unit'", ",", "'center'", ",", "'unit'", "]", ",", "whiten", "=", "True", ",", "src_reweight", "=", "0.5", ",", "trg_reweight", "=", "0.5", ",", "src_dewhiten", "=", "'src'", ",", "trg_dewhiten", "=", "'trg'", ",", "self_learning", "=", "True", ",", "vocabulary_cutoff", "=", "20000", ",", "csls_neighborhood", "=", "10", ")", "\n", "", "if", "args", ".", "identical", ":", "\n", "        ", "parser", ".", "set_defaults", "(", "init_identical", "=", "True", ",", "normalize", "=", "[", "'unit'", ",", "'center'", ",", "'unit'", "]", ",", "whiten", "=", "True", ",", "src_reweight", "=", "0.5", ",", "trg_reweight", "=", "0.5", ",", "src_dewhiten", "=", "'src'", ",", "trg_dewhiten", "=", "'trg'", ",", "self_learning", "=", "True", ",", "vocabulary_cutoff", "=", "20000", ",", "csls_neighborhood", "=", "10", ")", "\n", "", "if", "args", ".", "unsupervised", "or", "args", ".", "acl2018", ":", "\n", "        ", "parser", ".", "set_defaults", "(", "init_unsupervised", "=", "True", ",", "unsupervised_vocab", "=", "4000", ",", "normalize", "=", "[", "'unit'", ",", "'center'", ",", "'unit'", "]", ",", "whiten", "=", "True", ",", "src_reweight", "=", "0.5", ",", "trg_reweight", "=", "0.5", ",", "src_dewhiten", "=", "'src'", ",", "trg_dewhiten", "=", "'trg'", ",", "self_learning", "=", "True", ",", "vocabulary_cutoff", "=", "20000", ",", "csls_neighborhood", "=", "10", ")", "\n", "", "if", "args", ".", "aaai2018", ":", "\n", "        ", "parser", ".", "set_defaults", "(", "init_dictionary", "=", "args", ".", "aaai2018", ",", "normalize", "=", "[", "'unit'", ",", "'center'", "]", ",", "whiten", "=", "True", ",", "trg_reweight", "=", "1", ",", "src_dewhiten", "=", "'src'", ",", "trg_dewhiten", "=", "'trg'", ",", "batch_size", "=", "1000", ")", "\n", "", "if", "args", ".", "acl2017", ":", "\n", "        ", "parser", ".", "set_defaults", "(", "init_numerals", "=", "True", ",", "orthogonal", "=", "True", ",", "normalize", "=", "[", "'unit'", ",", "'center'", "]", ",", "self_learning", "=", "True", ",", "direction", "=", "'forward'", ",", "stochastic_initial", "=", "1.0", ",", "stochastic_interval", "=", "1", ",", "batch_size", "=", "1000", ")", "\n", "", "if", "args", ".", "acl2017_seed", ":", "\n", "        ", "parser", ".", "set_defaults", "(", "init_dictionary", "=", "args", ".", "acl2017_seed", ",", "orthogonal", "=", "True", ",", "normalize", "=", "[", "'unit'", ",", "'center'", "]", ",", "self_learning", "=", "True", ",", "direction", "=", "'forward'", ",", "stochastic_initial", "=", "1.0", ",", "stochastic_interval", "=", "1", ",", "batch_size", "=", "1000", ")", "\n", "", "if", "args", ".", "emnlp2016", ":", "\n", "        ", "parser", ".", "set_defaults", "(", "init_dictionary", "=", "args", ".", "emnlp2016", ",", "orthogonal", "=", "True", ",", "normalize", "=", "[", "'unit'", ",", "'center'", "]", ",", "batch_size", "=", "1000", ")", "\n", "", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# Check command line arguments", "\n", "if", "(", "args", ".", "src_dewhiten", "is", "not", "None", "or", "args", ".", "trg_dewhiten", "is", "not", "None", ")", "and", "not", "args", ".", "whiten", ":", "\n", "        ", "print", "(", "'ERROR: De-whitening requires whitening first'", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "sys", ".", "exit", "(", "-", "1", ")", "\n", "\n", "# Choose the right dtype for the desired precision", "\n", "", "if", "args", ".", "precision", "==", "'fp16'", ":", "\n", "        ", "dtype", "=", "'float16'", "\n", "", "elif", "args", ".", "precision", "==", "'fp32'", ":", "\n", "        ", "dtype", "=", "'float32'", "\n", "", "elif", "args", ".", "precision", "==", "'fp64'", ":", "\n", "        ", "dtype", "=", "'float64'", "\n", "\n", "# Read input embeddings", "\n", "", "srcfile", "=", "open", "(", "args", ".", "src_input", ",", "encoding", "=", "args", ".", "encoding", ",", "errors", "=", "'surrogateescape'", ")", "\n", "trgfile", "=", "open", "(", "args", ".", "trg_input", ",", "encoding", "=", "args", ".", "encoding", ",", "errors", "=", "'surrogateescape'", ")", "\n", "src_words", ",", "x", "=", "embeddings", ".", "read", "(", "srcfile", ",", "dtype", "=", "dtype", ")", "\n", "trg_words", ",", "z", "=", "embeddings", ".", "read", "(", "trgfile", ",", "dtype", "=", "dtype", ")", "\n", "\n", "# NumPy/CuPy management", "\n", "if", "args", ".", "cuda", ":", "\n", "        ", "if", "not", "supports_cupy", "(", ")", ":", "\n", "            ", "print", "(", "'ERROR: Install CuPy for CUDA support'", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "sys", ".", "exit", "(", "-", "1", ")", "\n", "", "xp", "=", "get_cupy", "(", ")", "\n", "x", "=", "xp", ".", "asarray", "(", "x", ")", "\n", "z", "=", "xp", ".", "asarray", "(", "z", ")", "\n", "", "else", ":", "\n", "        ", "xp", "=", "np", "\n", "", "xp", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "\n", "# Build word to index map", "\n", "src_word2ind", "=", "{", "word", ":", "i", "for", "i", ",", "word", "in", "enumerate", "(", "src_words", ")", "}", "\n", "trg_word2ind", "=", "{", "word", ":", "i", "for", "i", ",", "word", "in", "enumerate", "(", "trg_words", ")", "}", "\n", "\n", "# STEP 0: Normalization", "\n", "embeddings", ".", "normalize", "(", "x", ",", "args", ".", "normalize", ")", "\n", "embeddings", ".", "normalize", "(", "z", ",", "args", ".", "normalize", ")", "\n", "\n", "# Build the seed dictionary", "\n", "src_indices", "=", "[", "]", "\n", "trg_indices", "=", "[", "]", "\n", "if", "args", ".", "init_unsupervised", ":", "\n", "        ", "sim_size", "=", "min", "(", "x", ".", "shape", "[", "0", "]", ",", "z", ".", "shape", "[", "0", "]", ")", "if", "args", ".", "unsupervised_vocab", "<=", "0", "else", "min", "(", "x", ".", "shape", "[", "0", "]", ",", "z", ".", "shape", "[", "0", "]", ",", "args", ".", "unsupervised_vocab", ")", "\n", "u", ",", "s", ",", "vt", "=", "xp", ".", "linalg", ".", "svd", "(", "x", "[", ":", "sim_size", "]", ",", "full_matrices", "=", "False", ")", "\n", "xsim", "=", "(", "u", "*", "s", ")", ".", "dot", "(", "u", ".", "T", ")", "\n", "u", ",", "s", ",", "vt", "=", "xp", ".", "linalg", ".", "svd", "(", "z", "[", ":", "sim_size", "]", ",", "full_matrices", "=", "False", ")", "\n", "zsim", "=", "(", "u", "*", "s", ")", ".", "dot", "(", "u", ".", "T", ")", "\n", "del", "u", ",", "s", ",", "vt", "\n", "xsim", ".", "sort", "(", "axis", "=", "1", ")", "\n", "zsim", ".", "sort", "(", "axis", "=", "1", ")", "\n", "embeddings", ".", "normalize", "(", "xsim", ",", "args", ".", "normalize", ")", "\n", "embeddings", ".", "normalize", "(", "zsim", ",", "args", ".", "normalize", ")", "\n", "sim", "=", "xsim", ".", "dot", "(", "zsim", ".", "T", ")", "\n", "if", "args", ".", "csls_neighborhood", ">", "0", ":", "\n", "            ", "knn_sim_fwd", "=", "topk_mean", "(", "sim", ",", "k", "=", "args", ".", "csls_neighborhood", ")", "\n", "knn_sim_bwd", "=", "topk_mean", "(", "sim", ".", "T", ",", "k", "=", "args", ".", "csls_neighborhood", ")", "\n", "sim", "-=", "knn_sim_fwd", "[", ":", ",", "xp", ".", "newaxis", "]", "/", "2", "+", "knn_sim_bwd", "/", "2", "\n", "", "if", "args", ".", "direction", "==", "'forward'", ":", "\n", "            ", "src_indices", "=", "xp", ".", "arange", "(", "sim_size", ")", "\n", "trg_indices", "=", "sim", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "", "elif", "args", ".", "direction", "==", "'backward'", ":", "\n", "            ", "src_indices", "=", "sim", ".", "argmax", "(", "axis", "=", "0", ")", "\n", "trg_indices", "=", "xp", ".", "arange", "(", "sim_size", ")", "\n", "", "elif", "args", ".", "direction", "==", "'union'", ":", "\n", "            ", "src_indices", "=", "xp", ".", "concatenate", "(", "(", "xp", ".", "arange", "(", "sim_size", ")", ",", "sim", ".", "argmax", "(", "axis", "=", "0", ")", ")", ")", "\n", "trg_indices", "=", "xp", ".", "concatenate", "(", "(", "sim", ".", "argmax", "(", "axis", "=", "1", ")", ",", "xp", ".", "arange", "(", "sim_size", ")", ")", ")", "\n", "", "del", "xsim", ",", "zsim", ",", "sim", "\n", "", "elif", "args", ".", "init_numerals", ":", "\n", "        ", "numeral_regex", "=", "re", ".", "compile", "(", "'^[0-9]+$'", ")", "\n", "src_numerals", "=", "{", "word", "for", "word", "in", "src_words", "if", "numeral_regex", ".", "match", "(", "word", ")", "is", "not", "None", "}", "\n", "trg_numerals", "=", "{", "word", "for", "word", "in", "trg_words", "if", "numeral_regex", ".", "match", "(", "word", ")", "is", "not", "None", "}", "\n", "numerals", "=", "src_numerals", ".", "intersection", "(", "trg_numerals", ")", "\n", "for", "word", "in", "numerals", ":", "\n", "            ", "src_indices", ".", "append", "(", "src_word2ind", "[", "word", "]", ")", "\n", "trg_indices", ".", "append", "(", "trg_word2ind", "[", "word", "]", ")", "\n", "", "", "elif", "args", ".", "init_identical", ":", "\n", "        ", "identical", "=", "set", "(", "src_words", ")", ".", "intersection", "(", "set", "(", "trg_words", ")", ")", "\n", "for", "word", "in", "identical", ":", "\n", "            ", "src_indices", ".", "append", "(", "src_word2ind", "[", "word", "]", ")", "\n", "trg_indices", ".", "append", "(", "trg_word2ind", "[", "word", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "f", "=", "open", "(", "args", ".", "init_dictionary", ",", "encoding", "=", "args", ".", "encoding", ",", "errors", "=", "'surrogateescape'", ")", "\n", "for", "line", "in", "f", ":", "\n", "            ", "src", ",", "trg", "=", "line", ".", "split", "(", ")", "\n", "try", ":", "\n", "                ", "src_ind", "=", "src_word2ind", "[", "src", "]", "\n", "trg_ind", "=", "trg_word2ind", "[", "trg", "]", "\n", "src_indices", ".", "append", "(", "src_ind", ")", "\n", "trg_indices", ".", "append", "(", "trg_ind", ")", "\n", "", "except", "KeyError", ":", "\n", "                ", "print", "(", "'WARNING: OOV dictionary entry ({0} - {1})'", ".", "format", "(", "src", ",", "trg", ")", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n", "# Read validation dictionary", "\n", "", "", "", "if", "args", ".", "validation", "is", "not", "None", ":", "\n", "        ", "f", "=", "open", "(", "args", ".", "validation", ",", "encoding", "=", "args", ".", "encoding", ",", "errors", "=", "'surrogateescape'", ")", "\n", "validation", "=", "collections", ".", "defaultdict", "(", "set", ")", "\n", "oov", "=", "set", "(", ")", "\n", "vocab", "=", "set", "(", ")", "\n", "for", "line", "in", "f", ":", "\n", "            ", "src", ",", "trg", "=", "line", ".", "split", "(", ")", "\n", "try", ":", "\n", "                ", "src_ind", "=", "src_word2ind", "[", "src", "]", "\n", "trg_ind", "=", "trg_word2ind", "[", "trg", "]", "\n", "validation", "[", "src_ind", "]", ".", "add", "(", "trg_ind", ")", "\n", "vocab", ".", "add", "(", "src", ")", "\n", "", "except", "KeyError", ":", "\n", "                ", "oov", ".", "add", "(", "src", ")", "\n", "", "", "oov", "-=", "vocab", "# If one of the translation options is in the vocabulary, then the entry is not an oov", "\n", "validation_coverage", "=", "len", "(", "validation", ")", "/", "(", "len", "(", "validation", ")", "+", "len", "(", "oov", ")", ")", "\n", "\n", "# Create log file", "\n", "", "if", "args", ".", "log", ":", "\n", "        ", "log", "=", "open", "(", "args", ".", "log", ",", "mode", "=", "'w'", ",", "encoding", "=", "args", ".", "encoding", ",", "errors", "=", "'surrogateescape'", ")", "\n", "\n", "# Allocate memory", "\n", "", "xw", "=", "xp", ".", "empty_like", "(", "x", ")", "\n", "zw", "=", "xp", ".", "empty_like", "(", "z", ")", "\n", "src_size", "=", "x", ".", "shape", "[", "0", "]", "if", "args", ".", "vocabulary_cutoff", "<=", "0", "else", "min", "(", "x", ".", "shape", "[", "0", "]", ",", "args", ".", "vocabulary_cutoff", ")", "\n", "trg_size", "=", "z", ".", "shape", "[", "0", "]", "if", "args", ".", "vocabulary_cutoff", "<=", "0", "else", "min", "(", "z", ".", "shape", "[", "0", "]", ",", "args", ".", "vocabulary_cutoff", ")", "\n", "simfwd", "=", "xp", ".", "empty", "(", "(", "args", ".", "batch_size", ",", "trg_size", ")", ",", "dtype", "=", "dtype", ")", "\n", "simbwd", "=", "xp", ".", "empty", "(", "(", "args", ".", "batch_size", ",", "src_size", ")", ",", "dtype", "=", "dtype", ")", "\n", "if", "args", ".", "validation", "is", "not", "None", ":", "\n", "        ", "simval", "=", "xp", ".", "empty", "(", "(", "len", "(", "validation", ".", "keys", "(", ")", ")", ",", "z", ".", "shape", "[", "0", "]", ")", ",", "dtype", "=", "dtype", ")", "\n", "\n", "", "best_sim_forward", "=", "xp", ".", "full", "(", "src_size", ",", "-", "100", ",", "dtype", "=", "dtype", ")", "\n", "src_indices_forward", "=", "xp", ".", "arange", "(", "src_size", ")", "\n", "trg_indices_forward", "=", "xp", ".", "zeros", "(", "src_size", ",", "dtype", "=", "int", ")", "\n", "best_sim_backward", "=", "xp", ".", "full", "(", "trg_size", ",", "-", "100", ",", "dtype", "=", "dtype", ")", "\n", "src_indices_backward", "=", "xp", ".", "zeros", "(", "trg_size", ",", "dtype", "=", "int", ")", "\n", "trg_indices_backward", "=", "xp", ".", "arange", "(", "trg_size", ")", "\n", "knn_sim_fwd", "=", "xp", ".", "zeros", "(", "src_size", ",", "dtype", "=", "dtype", ")", "\n", "knn_sim_bwd", "=", "xp", ".", "zeros", "(", "trg_size", ",", "dtype", "=", "dtype", ")", "\n", "\n", "# Training loop", "\n", "best_objective", "=", "objective", "=", "-", "100.", "\n", "it", "=", "1", "\n", "last_improvement", "=", "0", "\n", "keep_prob", "=", "args", ".", "stochastic_initial", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "end", "=", "not", "args", ".", "self_learning", "\n", "while", "True", ":", "\n", "\n", "# Increase the keep probability if we have not improve in args.stochastic_interval iterations", "\n", "        ", "if", "it", "-", "last_improvement", ">", "args", ".", "stochastic_interval", ":", "\n", "            ", "if", "keep_prob", ">=", "1.0", ":", "\n", "                ", "end", "=", "True", "\n", "", "keep_prob", "=", "min", "(", "1.0", ",", "args", ".", "stochastic_multiplier", "*", "keep_prob", ")", "\n", "last_improvement", "=", "it", "\n", "\n", "# Update the embedding mapping", "\n", "", "if", "args", ".", "orthogonal", "or", "not", "end", ":", "# orthogonal mapping", "\n", "            ", "u", ",", "s", ",", "vt", "=", "xp", ".", "linalg", ".", "svd", "(", "z", "[", "trg_indices", "]", ".", "T", ".", "dot", "(", "x", "[", "src_indices", "]", ")", ")", "\n", "w", "=", "vt", ".", "T", ".", "dot", "(", "u", ".", "T", ")", "\n", "x", ".", "dot", "(", "w", ",", "out", "=", "xw", ")", "\n", "zw", "[", ":", "]", "=", "z", "\n", "", "elif", "args", ".", "unconstrained", ":", "# unconstrained mapping", "\n", "            ", "x_pseudoinv", "=", "xp", ".", "linalg", ".", "inv", "(", "x", "[", "src_indices", "]", ".", "T", ".", "dot", "(", "x", "[", "src_indices", "]", ")", ")", ".", "dot", "(", "x", "[", "src_indices", "]", ".", "T", ")", "\n", "w", "=", "x_pseudoinv", ".", "dot", "(", "z", "[", "trg_indices", "]", ")", "\n", "x", ".", "dot", "(", "w", ",", "out", "=", "xw", ")", "\n", "zw", "[", ":", "]", "=", "z", "\n", "", "else", ":", "# advanced mapping", "\n", "\n", "# TODO xw.dot(wx2, out=xw) and alike not working", "\n", "            ", "xw", "[", ":", "]", "=", "x", "\n", "zw", "[", ":", "]", "=", "z", "\n", "\n", "# STEP 1: Whitening", "\n", "def", "whitening_transformation", "(", "m", ")", ":", "\n", "                ", "u", ",", "s", ",", "vt", "=", "xp", ".", "linalg", ".", "svd", "(", "m", ",", "full_matrices", "=", "False", ")", "\n", "return", "vt", ".", "T", ".", "dot", "(", "xp", ".", "diag", "(", "1", "/", "s", ")", ")", ".", "dot", "(", "vt", ")", "\n", "", "if", "args", ".", "whiten", ":", "\n", "                ", "wx1", "=", "whitening_transformation", "(", "xw", "[", "src_indices", "]", ")", "\n", "wz1", "=", "whitening_transformation", "(", "zw", "[", "trg_indices", "]", ")", "\n", "xw", "=", "xw", ".", "dot", "(", "wx1", ")", "\n", "zw", "=", "zw", ".", "dot", "(", "wz1", ")", "\n", "\n", "# STEP 2: Orthogonal mapping", "\n", "", "wx2", ",", "s", ",", "wz2_t", "=", "xp", ".", "linalg", ".", "svd", "(", "xw", "[", "src_indices", "]", ".", "T", ".", "dot", "(", "zw", "[", "trg_indices", "]", ")", ")", "\n", "wz2", "=", "wz2_t", ".", "T", "\n", "xw", "=", "xw", ".", "dot", "(", "wx2", ")", "\n", "zw", "=", "zw", ".", "dot", "(", "wz2", ")", "\n", "\n", "# STEP 3: Re-weighting", "\n", "xw", "*=", "s", "**", "args", ".", "src_reweight", "\n", "zw", "*=", "s", "**", "args", ".", "trg_reweight", "\n", "\n", "# STEP 4: De-whitening", "\n", "if", "args", ".", "src_dewhiten", "==", "'src'", ":", "\n", "                ", "xw", "=", "xw", ".", "dot", "(", "wx2", ".", "T", ".", "dot", "(", "xp", ".", "linalg", ".", "inv", "(", "wx1", ")", ")", ".", "dot", "(", "wx2", ")", ")", "\n", "", "elif", "args", ".", "src_dewhiten", "==", "'trg'", ":", "\n", "                ", "xw", "=", "xw", ".", "dot", "(", "wz2", ".", "T", ".", "dot", "(", "xp", ".", "linalg", ".", "inv", "(", "wz1", ")", ")", ".", "dot", "(", "wz2", ")", ")", "\n", "", "if", "args", ".", "trg_dewhiten", "==", "'src'", ":", "\n", "                ", "zw", "=", "zw", ".", "dot", "(", "wx2", ".", "T", ".", "dot", "(", "xp", ".", "linalg", ".", "inv", "(", "wx1", ")", ")", ".", "dot", "(", "wx2", ")", ")", "\n", "", "elif", "args", ".", "trg_dewhiten", "==", "'trg'", ":", "\n", "                ", "zw", "=", "zw", ".", "dot", "(", "wz2", ".", "T", ".", "dot", "(", "xp", ".", "linalg", ".", "inv", "(", "wz1", ")", ")", ".", "dot", "(", "wz2", ")", ")", "\n", "\n", "# STEP 5: Dimensionality reduction", "\n", "", "if", "args", ".", "dim_reduction", ">", "0", ":", "\n", "                ", "xw", "=", "xw", "[", ":", ",", ":", "args", ".", "dim_reduction", "]", "\n", "zw", "=", "zw", "[", ":", ",", ":", "args", ".", "dim_reduction", "]", "\n", "\n", "# Self-learning", "\n", "", "", "if", "end", ":", "\n", "            ", "break", "\n", "", "else", ":", "\n", "# Update the training dictionary", "\n", "            ", "if", "args", ".", "direction", "in", "(", "'forward'", ",", "'union'", ")", ":", "\n", "                ", "if", "args", ".", "csls_neighborhood", ">", "0", ":", "\n", "                    ", "for", "i", "in", "range", "(", "0", ",", "trg_size", ",", "simbwd", ".", "shape", "[", "0", "]", ")", ":", "\n", "                        ", "j", "=", "min", "(", "i", "+", "simbwd", ".", "shape", "[", "0", "]", ",", "trg_size", ")", "\n", "zw", "[", "i", ":", "j", "]", ".", "dot", "(", "xw", "[", ":", "src_size", "]", ".", "T", ",", "out", "=", "simbwd", "[", ":", "j", "-", "i", "]", ")", "\n", "knn_sim_bwd", "[", "i", ":", "j", "]", "=", "topk_mean", "(", "simbwd", "[", ":", "j", "-", "i", "]", ",", "k", "=", "args", ".", "csls_neighborhood", ",", "inplace", "=", "True", ")", "\n", "", "", "for", "i", "in", "range", "(", "0", ",", "src_size", ",", "simfwd", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "j", "=", "min", "(", "i", "+", "simfwd", ".", "shape", "[", "0", "]", ",", "src_size", ")", "\n", "xw", "[", "i", ":", "j", "]", ".", "dot", "(", "zw", "[", ":", "trg_size", "]", ".", "T", ",", "out", "=", "simfwd", "[", ":", "j", "-", "i", "]", ")", "\n", "simfwd", "[", ":", "j", "-", "i", "]", ".", "max", "(", "axis", "=", "1", ",", "out", "=", "best_sim_forward", "[", "i", ":", "j", "]", ")", "\n", "simfwd", "[", ":", "j", "-", "i", "]", "-=", "knn_sim_bwd", "/", "2", "# Equivalent to the real CSLS scores for NN", "\n", "dropout", "(", "simfwd", "[", ":", "j", "-", "i", "]", ",", "1", "-", "keep_prob", ")", ".", "argmax", "(", "axis", "=", "1", ",", "out", "=", "trg_indices_forward", "[", "i", ":", "j", "]", ")", "\n", "", "", "if", "args", ".", "direction", "in", "(", "'backward'", ",", "'union'", ")", ":", "\n", "                ", "if", "args", ".", "csls_neighborhood", ">", "0", ":", "\n", "                    ", "for", "i", "in", "range", "(", "0", ",", "src_size", ",", "simfwd", ".", "shape", "[", "0", "]", ")", ":", "\n", "                        ", "j", "=", "min", "(", "i", "+", "simfwd", ".", "shape", "[", "0", "]", ",", "src_size", ")", "\n", "xw", "[", "i", ":", "j", "]", ".", "dot", "(", "zw", "[", ":", "trg_size", "]", ".", "T", ",", "out", "=", "simfwd", "[", ":", "j", "-", "i", "]", ")", "\n", "knn_sim_fwd", "[", "i", ":", "j", "]", "=", "topk_mean", "(", "simfwd", "[", ":", "j", "-", "i", "]", ",", "k", "=", "args", ".", "csls_neighborhood", ",", "inplace", "=", "True", ")", "\n", "", "", "for", "i", "in", "range", "(", "0", ",", "trg_size", ",", "simbwd", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "j", "=", "min", "(", "i", "+", "simbwd", ".", "shape", "[", "0", "]", ",", "trg_size", ")", "\n", "zw", "[", "i", ":", "j", "]", ".", "dot", "(", "xw", "[", ":", "src_size", "]", ".", "T", ",", "out", "=", "simbwd", "[", ":", "j", "-", "i", "]", ")", "\n", "simbwd", "[", ":", "j", "-", "i", "]", ".", "max", "(", "axis", "=", "1", ",", "out", "=", "best_sim_backward", "[", "i", ":", "j", "]", ")", "\n", "simbwd", "[", ":", "j", "-", "i", "]", "-=", "knn_sim_fwd", "/", "2", "# Equivalent to the real CSLS scores for NN", "\n", "dropout", "(", "simbwd", "[", ":", "j", "-", "i", "]", ",", "1", "-", "keep_prob", ")", ".", "argmax", "(", "axis", "=", "1", ",", "out", "=", "src_indices_backward", "[", "i", ":", "j", "]", ")", "\n", "", "", "if", "args", ".", "direction", "==", "'forward'", ":", "\n", "                ", "src_indices", "=", "src_indices_forward", "\n", "trg_indices", "=", "trg_indices_forward", "\n", "", "elif", "args", ".", "direction", "==", "'backward'", ":", "\n", "                ", "src_indices", "=", "src_indices_backward", "\n", "trg_indices", "=", "trg_indices_backward", "\n", "", "elif", "args", ".", "direction", "==", "'union'", ":", "\n", "                ", "src_indices", "=", "xp", ".", "concatenate", "(", "(", "src_indices_forward", ",", "src_indices_backward", ")", ")", "\n", "trg_indices", "=", "xp", ".", "concatenate", "(", "(", "trg_indices_forward", ",", "trg_indices_backward", ")", ")", "\n", "\n", "# Objective function evaluation", "\n", "", "if", "args", ".", "direction", "==", "'forward'", ":", "\n", "                ", "objective", "=", "xp", ".", "mean", "(", "best_sim_forward", ")", ".", "tolist", "(", ")", "\n", "", "elif", "args", ".", "direction", "==", "'backward'", ":", "\n", "                ", "objective", "=", "xp", ".", "mean", "(", "best_sim_backward", ")", ".", "tolist", "(", ")", "\n", "", "elif", "args", ".", "direction", "==", "'union'", ":", "\n", "                ", "objective", "=", "(", "xp", ".", "mean", "(", "best_sim_forward", ")", "+", "xp", ".", "mean", "(", "best_sim_backward", ")", ")", ".", "tolist", "(", ")", "/", "2", "\n", "", "if", "objective", "-", "best_objective", ">=", "args", ".", "threshold", ":", "\n", "                ", "last_improvement", "=", "it", "\n", "best_objective", "=", "objective", "\n", "\n", "# Accuracy and similarity evaluation in validation", "\n", "", "if", "args", ".", "validation", "is", "not", "None", ":", "\n", "                ", "src", "=", "list", "(", "validation", ".", "keys", "(", ")", ")", "\n", "xw", "[", "src", "]", ".", "dot", "(", "zw", ".", "T", ",", "out", "=", "simval", ")", "\n", "nn", "=", "asnumpy", "(", "simval", ".", "argmax", "(", "axis", "=", "1", ")", ")", "\n", "accuracy", "=", "np", ".", "mean", "(", "[", "1", "if", "nn", "[", "i", "]", "in", "validation", "[", "src", "[", "i", "]", "]", "else", "0", "for", "i", "in", "range", "(", "len", "(", "src", ")", ")", "]", ")", "\n", "similarity", "=", "np", ".", "mean", "(", "[", "max", "(", "[", "simval", "[", "i", ",", "j", "]", ".", "tolist", "(", ")", "for", "j", "in", "validation", "[", "src", "[", "i", "]", "]", "]", ")", "for", "i", "in", "range", "(", "len", "(", "src", ")", ")", "]", ")", "\n", "\n", "# Logging", "\n", "", "duration", "=", "time", ".", "time", "(", ")", "-", "t", "\n", "if", "args", ".", "verbose", ":", "\n", "                ", "print", "(", "file", "=", "sys", ".", "stderr", ")", "\n", "print", "(", "'ITERATION {0} ({1:.2f}s)'", ".", "format", "(", "it", ",", "duration", ")", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "print", "(", "'\\t- Objective:        {0:9.4f}%'", ".", "format", "(", "100", "*", "objective", ")", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "print", "(", "'\\t- Drop probability: {0:9.4f}%'", ".", "format", "(", "100", "-", "100", "*", "keep_prob", ")", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "if", "args", ".", "validation", "is", "not", "None", ":", "\n", "                    ", "print", "(", "'\\t- Val. similarity:  {0:9.4f}%'", ".", "format", "(", "100", "*", "similarity", ")", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "print", "(", "'\\t- Val. accuracy:    {0:9.4f}%'", ".", "format", "(", "100", "*", "accuracy", ")", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "print", "(", "'\\t- Val. coverage:    {0:9.4f}%'", ".", "format", "(", "100", "*", "validation_coverage", ")", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "", "sys", ".", "stderr", ".", "flush", "(", ")", "\n", "", "if", "args", ".", "log", "is", "not", "None", ":", "\n", "                ", "val", "=", "'{0:.6f}\\t{1:.6f}\\t{2:.6f}'", ".", "format", "(", "\n", "100", "*", "similarity", ",", "100", "*", "accuracy", ",", "100", "*", "validation_coverage", ")", "if", "args", ".", "validation", "is", "not", "None", "else", "''", "\n", "print", "(", "'{0}\\t{1:.6f}\\t{2}\\t{3:.6f}'", ".", "format", "(", "it", ",", "100", "*", "objective", ",", "val", ",", "duration", ")", ",", "file", "=", "log", ")", "\n", "log", ".", "flush", "(", ")", "\n", "\n", "", "", "t", "=", "time", ".", "time", "(", ")", "\n", "it", "+=", "1", "\n", "\n", "# Write mapped embeddings", "\n", "", "srcfile", "=", "open", "(", "args", ".", "src_output", ",", "mode", "=", "'w'", ",", "encoding", "=", "args", ".", "encoding", ",", "errors", "=", "'surrogateescape'", ")", "\n", "trgfile", "=", "open", "(", "args", ".", "trg_output", ",", "mode", "=", "'w'", ",", "encoding", "=", "args", ".", "encoding", ",", "errors", "=", "'surrogateescape'", ")", "\n", "embeddings", ".", "write", "(", "src_words", ",", "xw", ",", "srcfile", ")", "\n", "embeddings", ".", "write", "(", "trg_words", ",", "zw", ",", "trgfile", ")", "\n", "srcfile", ".", "close", "(", ")", "\n", "trgfile", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.artetxem_vecmap.None.eval_translation.topk_mean": [[28, 44], ["cupy_utils.get_array_module", "cupy_utils.get_array_module.zeros", "cupy_utils.get_array_module.arange", "cupy_utils.get_array_module.empty", "xp.array.min", "range", "cupy_utils.get_array_module.array", "xp.array.argmax"], "function", ["home.repos.pwc.inspect_result.artetxem_vecmap.None.cupy_utils.get_array_module"], ["def", "topk_mean", "(", "m", ",", "k", ",", "inplace", "=", "False", ")", ":", "# TODO Assuming that axis is 1", "\n", "    ", "xp", "=", "get_array_module", "(", "m", ")", "\n", "n", "=", "m", ".", "shape", "[", "0", "]", "\n", "ans", "=", "xp", ".", "zeros", "(", "n", ",", "dtype", "=", "m", ".", "dtype", ")", "\n", "if", "k", "<=", "0", ":", "\n", "        ", "return", "ans", "\n", "", "if", "not", "inplace", ":", "\n", "        ", "m", "=", "xp", ".", "array", "(", "m", ")", "\n", "", "ind0", "=", "xp", ".", "arange", "(", "n", ")", "\n", "ind1", "=", "xp", ".", "empty", "(", "n", ",", "dtype", "=", "int", ")", "\n", "minimum", "=", "m", ".", "min", "(", ")", "\n", "for", "i", "in", "range", "(", "k", ")", ":", "\n", "        ", "m", ".", "argmax", "(", "axis", "=", "1", ",", "out", "=", "ind1", ")", "\n", "ans", "+=", "m", "[", "ind0", ",", "ind1", "]", "\n", "m", "[", "ind0", ",", "ind1", "]", "=", "minimum", "\n", "", "return", "ans", "/", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.artetxem_vecmap.None.eval_translation.main": [[46, 169], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "open", "open", "embeddings.read", "embeddings.read", "cupy_utils.get_cupy.random.seed", "open", "collections.defaultdict", "set", "set", "list", "collections.defaultdict", "numpy.mean", "print", "cupy_utils.get_cupy", "cupy_utils.get_cupy.asarray", "cupy_utils.get_cupy.asarray", "embeddings.length_normalize", "embeddings.length_normalize", "line.split", "collections.defaultdict.keys", "len", "range", "sys.stdin.fileno", "cupy_utils.supports_cupy", "print", "sys.exit", "enumerate", "enumerate", "src2trg[].add", "set.add", "len", "len", "len", "min", "x[].dot", "z[].dot.argmax().tolist", "range", "numpy.full", "numpy.full", "range", "set.add", "len", "len", "len", "min", "z[].dot", "cupy_utils.asnumpy", "cupy_utils.asnumpy", "range", "cupy_utils.get_cupy.zeros", "range", "range", "z[].dot.argmax", "range", "cupy_utils.get_cupy.arange", "cupy_utils.get_cupy.random.randint", "len", "min", "cupy_utils.get_cupy.exp().sum", "len", "min", "p.argmax().tolist", "range", "cupy_utils.get_cupy.zeros", "range", "range", "ind.argsort", "len", "len", "len", "cupy_utils.get_cupy.exp", "min", "eval_translation.topk_mean", "len", "min", "z[].dot.argmax().tolist", "range", "cupy_utils.get_cupy.exp", "p.argmax", "z[].dot", "len", "x[].dot", "x[].dot", "z[].dot.argmax", "xp.asarray.dot"], "function", ["home.repos.pwc.inspect_result.artetxem_vecmap.None.embeddings.read", "home.repos.pwc.inspect_result.artetxem_vecmap.None.embeddings.read", "home.repos.pwc.inspect_result.artetxem_vecmap.None.cupy_utils.get_cupy", "home.repos.pwc.inspect_result.artetxem_vecmap.None.embeddings.length_normalize", "home.repos.pwc.inspect_result.artetxem_vecmap.None.embeddings.length_normalize", "home.repos.pwc.inspect_result.artetxem_vecmap.None.cupy_utils.supports_cupy", "home.repos.pwc.inspect_result.artetxem_vecmap.None.cupy_utils.asnumpy", "home.repos.pwc.inspect_result.artetxem_vecmap.None.cupy_utils.asnumpy", "home.repos.pwc.inspect_result.artetxem_vecmap.None.eval_translation.topk_mean"], ["", "def", "main", "(", ")", ":", "\n", "# Parse command line arguments", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Evaluate embeddings of two languages in a shared space in word translation induction'", ")", "\n", "parser", ".", "add_argument", "(", "'src_embeddings'", ",", "help", "=", "'the source language embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'trg_embeddings'", ",", "help", "=", "'the target language embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'-d'", ",", "'--dictionary'", ",", "default", "=", "sys", ".", "stdin", ".", "fileno", "(", ")", ",", "help", "=", "'the test dictionary file (defaults to stdin)'", ")", "\n", "parser", ".", "add_argument", "(", "'--retrieval'", ",", "default", "=", "'nn'", ",", "choices", "=", "[", "'nn'", ",", "'invnn'", ",", "'invsoftmax'", ",", "'csls'", "]", ",", "help", "=", "'the retrieval method (nn: standard nearest neighbor; invnn: inverted nearest neighbor; invsoftmax: inverted softmax; csls: cross-domain similarity local scaling)'", ")", "\n", "parser", ".", "add_argument", "(", "'--inv_temperature'", ",", "default", "=", "1", ",", "type", "=", "float", ",", "help", "=", "'the inverse temperature (only compatible with inverted softmax)'", ")", "\n", "parser", ".", "add_argument", "(", "'--inv_sample'", ",", "default", "=", "None", ",", "type", "=", "int", ",", "help", "=", "'use a random subset of the source vocabulary for the inverse computations (only compatible with inverted softmax)'", ")", "\n", "parser", ".", "add_argument", "(", "'-k'", ",", "'--neighborhood'", ",", "default", "=", "10", ",", "type", "=", "int", ",", "help", "=", "'the neighborhood size (only compatible with csls)'", ")", "\n", "parser", ".", "add_argument", "(", "'--dot'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use the dot product in the similarity computations instead of the cosine'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoding'", ",", "default", "=", "'utf-8'", ",", "help", "=", "'the character encoding for input/output (defaults to utf-8)'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'the random seed'", ")", "\n", "parser", ".", "add_argument", "(", "'--precision'", ",", "choices", "=", "[", "'fp16'", ",", "'fp32'", ",", "'fp64'", "]", ",", "default", "=", "'fp32'", ",", "help", "=", "'the floating-point precision (defaults to fp32)'", ")", "\n", "parser", ".", "add_argument", "(", "'--cuda'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use cuda (requires cupy)'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# Choose the right dtype for the desired precision", "\n", "if", "args", ".", "precision", "==", "'fp16'", ":", "\n", "        ", "dtype", "=", "'float16'", "\n", "", "elif", "args", ".", "precision", "==", "'fp32'", ":", "\n", "        ", "dtype", "=", "'float32'", "\n", "", "elif", "args", ".", "precision", "==", "'fp64'", ":", "\n", "        ", "dtype", "=", "'float64'", "\n", "\n", "# Read input embeddings", "\n", "", "srcfile", "=", "open", "(", "args", ".", "src_embeddings", ",", "encoding", "=", "args", ".", "encoding", ",", "errors", "=", "'surrogateescape'", ")", "\n", "trgfile", "=", "open", "(", "args", ".", "trg_embeddings", ",", "encoding", "=", "args", ".", "encoding", ",", "errors", "=", "'surrogateescape'", ")", "\n", "src_words", ",", "x", "=", "embeddings", ".", "read", "(", "srcfile", ",", "dtype", "=", "dtype", ")", "\n", "trg_words", ",", "z", "=", "embeddings", ".", "read", "(", "trgfile", ",", "dtype", "=", "dtype", ")", "\n", "\n", "# NumPy/CuPy management", "\n", "if", "args", ".", "cuda", ":", "\n", "        ", "if", "not", "supports_cupy", "(", ")", ":", "\n", "            ", "print", "(", "'ERROR: Install CuPy for CUDA support'", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "sys", ".", "exit", "(", "-", "1", ")", "\n", "", "xp", "=", "get_cupy", "(", ")", "\n", "x", "=", "xp", ".", "asarray", "(", "x", ")", "\n", "z", "=", "xp", ".", "asarray", "(", "z", ")", "\n", "", "else", ":", "\n", "        ", "xp", "=", "np", "\n", "", "xp", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "\n", "# Length normalize embeddings so their dot product effectively computes the cosine similarity", "\n", "if", "not", "args", ".", "dot", ":", "\n", "        ", "embeddings", ".", "length_normalize", "(", "x", ")", "\n", "embeddings", ".", "length_normalize", "(", "z", ")", "\n", "\n", "# Build word to index map", "\n", "", "src_word2ind", "=", "{", "word", ":", "i", "for", "i", ",", "word", "in", "enumerate", "(", "src_words", ")", "}", "\n", "trg_word2ind", "=", "{", "word", ":", "i", "for", "i", ",", "word", "in", "enumerate", "(", "trg_words", ")", "}", "\n", "\n", "# Read dictionary and compute coverage", "\n", "f", "=", "open", "(", "args", ".", "dictionary", ",", "encoding", "=", "args", ".", "encoding", ",", "errors", "=", "'surrogateescape'", ")", "\n", "src2trg", "=", "collections", ".", "defaultdict", "(", "set", ")", "\n", "oov", "=", "set", "(", ")", "\n", "vocab", "=", "set", "(", ")", "\n", "for", "line", "in", "f", ":", "\n", "        ", "src", ",", "trg", "=", "line", ".", "split", "(", ")", "\n", "try", ":", "\n", "            ", "src_ind", "=", "src_word2ind", "[", "src", "]", "\n", "trg_ind", "=", "trg_word2ind", "[", "trg", "]", "\n", "src2trg", "[", "src_ind", "]", ".", "add", "(", "trg_ind", ")", "\n", "vocab", ".", "add", "(", "src", ")", "\n", "", "except", "KeyError", ":", "\n", "            ", "oov", ".", "add", "(", "src", ")", "\n", "", "", "src", "=", "list", "(", "src2trg", ".", "keys", "(", ")", ")", "\n", "oov", "-=", "vocab", "# If one of the translation options is in the vocabulary, then the entry is not an oov", "\n", "coverage", "=", "len", "(", "src2trg", ")", "/", "(", "len", "(", "src2trg", ")", "+", "len", "(", "oov", ")", ")", "\n", "\n", "# Find translations", "\n", "translation", "=", "collections", ".", "defaultdict", "(", "int", ")", "\n", "if", "args", ".", "retrieval", "==", "'nn'", ":", "# Standard nearest neighbor", "\n", "        ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "src", ")", ",", "BATCH_SIZE", ")", ":", "\n", "            ", "j", "=", "min", "(", "i", "+", "BATCH_SIZE", ",", "len", "(", "src", ")", ")", "\n", "similarities", "=", "x", "[", "src", "[", "i", ":", "j", "]", "]", ".", "dot", "(", "z", ".", "T", ")", "\n", "nn", "=", "similarities", ".", "argmax", "(", "axis", "=", "1", ")", ".", "tolist", "(", ")", "\n", "for", "k", "in", "range", "(", "j", "-", "i", ")", ":", "\n", "                ", "translation", "[", "src", "[", "i", "+", "k", "]", "]", "=", "nn", "[", "k", "]", "\n", "", "", "", "elif", "args", ".", "retrieval", "==", "'invnn'", ":", "# Inverted nearest neighbor", "\n", "        ", "best_rank", "=", "np", ".", "full", "(", "len", "(", "src", ")", ",", "x", ".", "shape", "[", "0", "]", ",", "dtype", "=", "int", ")", "\n", "best_sim", "=", "np", ".", "full", "(", "len", "(", "src", ")", ",", "-", "100", ",", "dtype", "=", "dtype", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "z", ".", "shape", "[", "0", "]", ",", "BATCH_SIZE", ")", ":", "\n", "            ", "j", "=", "min", "(", "i", "+", "BATCH_SIZE", ",", "z", ".", "shape", "[", "0", "]", ")", "\n", "similarities", "=", "z", "[", "i", ":", "j", "]", ".", "dot", "(", "x", ".", "T", ")", "\n", "ind", "=", "(", "-", "similarities", ")", ".", "argsort", "(", "axis", "=", "1", ")", "\n", "ranks", "=", "asnumpy", "(", "ind", ".", "argsort", "(", "axis", "=", "1", ")", "[", ":", ",", "src", "]", ")", "\n", "sims", "=", "asnumpy", "(", "similarities", "[", ":", ",", "src", "]", ")", "\n", "for", "k", "in", "range", "(", "i", ",", "j", ")", ":", "\n", "                ", "for", "l", "in", "range", "(", "len", "(", "src", ")", ")", ":", "\n", "                    ", "rank", "=", "ranks", "[", "k", "-", "i", ",", "l", "]", "\n", "sim", "=", "sims", "[", "k", "-", "i", ",", "l", "]", "\n", "if", "rank", "<", "best_rank", "[", "l", "]", "or", "(", "rank", "==", "best_rank", "[", "l", "]", "and", "sim", ">", "best_sim", "[", "l", "]", ")", ":", "\n", "                        ", "best_rank", "[", "l", "]", "=", "rank", "\n", "best_sim", "[", "l", "]", "=", "sim", "\n", "translation", "[", "src", "[", "l", "]", "]", "=", "k", "\n", "", "", "", "", "", "elif", "args", ".", "retrieval", "==", "'invsoftmax'", ":", "# Inverted softmax", "\n", "        ", "sample", "=", "xp", ".", "arange", "(", "x", ".", "shape", "[", "0", "]", ")", "if", "args", ".", "inv_sample", "is", "None", "else", "xp", ".", "random", ".", "randint", "(", "0", ",", "x", ".", "shape", "[", "0", "]", ",", "args", ".", "inv_sample", ")", "\n", "partition", "=", "xp", ".", "zeros", "(", "z", ".", "shape", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "sample", ")", ",", "BATCH_SIZE", ")", ":", "\n", "            ", "j", "=", "min", "(", "i", "+", "BATCH_SIZE", ",", "len", "(", "sample", ")", ")", "\n", "partition", "+=", "xp", ".", "exp", "(", "args", ".", "inv_temperature", "*", "z", ".", "dot", "(", "x", "[", "sample", "[", "i", ":", "j", "]", "]", ".", "T", ")", ")", ".", "sum", "(", "axis", "=", "1", ")", "\n", "", "for", "i", "in", "range", "(", "0", ",", "len", "(", "src", ")", ",", "BATCH_SIZE", ")", ":", "\n", "            ", "j", "=", "min", "(", "i", "+", "BATCH_SIZE", ",", "len", "(", "src", ")", ")", "\n", "p", "=", "xp", ".", "exp", "(", "args", ".", "inv_temperature", "*", "x", "[", "src", "[", "i", ":", "j", "]", "]", ".", "dot", "(", "z", ".", "T", ")", ")", "/", "partition", "\n", "nn", "=", "p", ".", "argmax", "(", "axis", "=", "1", ")", ".", "tolist", "(", ")", "\n", "for", "k", "in", "range", "(", "j", "-", "i", ")", ":", "\n", "                ", "translation", "[", "src", "[", "i", "+", "k", "]", "]", "=", "nn", "[", "k", "]", "\n", "", "", "", "elif", "args", ".", "retrieval", "==", "'csls'", ":", "# Cross-domain similarity local scaling", "\n", "        ", "knn_sim_bwd", "=", "xp", ".", "zeros", "(", "z", ".", "shape", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "z", ".", "shape", "[", "0", "]", ",", "BATCH_SIZE", ")", ":", "\n", "            ", "j", "=", "min", "(", "i", "+", "BATCH_SIZE", ",", "z", ".", "shape", "[", "0", "]", ")", "\n", "knn_sim_bwd", "[", "i", ":", "j", "]", "=", "topk_mean", "(", "z", "[", "i", ":", "j", "]", ".", "dot", "(", "x", ".", "T", ")", ",", "k", "=", "args", ".", "neighborhood", ",", "inplace", "=", "True", ")", "\n", "", "for", "i", "in", "range", "(", "0", ",", "len", "(", "src", ")", ",", "BATCH_SIZE", ")", ":", "\n", "            ", "j", "=", "min", "(", "i", "+", "BATCH_SIZE", ",", "len", "(", "src", ")", ")", "\n", "similarities", "=", "2", "*", "x", "[", "src", "[", "i", ":", "j", "]", "]", ".", "dot", "(", "z", ".", "T", ")", "-", "knn_sim_bwd", "# Equivalent to the real CSLS scores for NN", "\n", "nn", "=", "similarities", ".", "argmax", "(", "axis", "=", "1", ")", ".", "tolist", "(", ")", "\n", "for", "k", "in", "range", "(", "j", "-", "i", ")", ":", "\n", "                ", "translation", "[", "src", "[", "i", "+", "k", "]", "]", "=", "nn", "[", "k", "]", "\n", "\n", "# Compute accuracy", "\n", "", "", "", "accuracy", "=", "np", ".", "mean", "(", "[", "1", "if", "translation", "[", "i", "]", "in", "src2trg", "[", "i", "]", "else", "0", "for", "i", "in", "src", "]", ")", "\n", "print", "(", "'Coverage:{0:7.2%}  Accuracy:{1:7.2%}'", ".", "format", "(", "coverage", ",", "accuracy", ")", ")", "\n", "\n"]]}