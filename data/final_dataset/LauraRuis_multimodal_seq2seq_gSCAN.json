{"home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.read_gscan.read_gscan.parse_sparse_situation": [[22, 56], ["len", "numpy.zeros", "int", "int", "int", "numpy.zeros", "situation_representation[].values", "numpy.array", "int", "int", "numpy.concatenate", "int", "int", "numpy.zeros"], "function", ["None"], ["def", "parse_sparse_situation", "(", "situation_representation", ":", "dict", ",", "grid_size", ":", "int", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"\n    Each grid cell in a situation is fully specified by a vector:\n    [_ _ _ _ _ _ _   _       _      _       _   _ _ _ _]\n     1 2 3 4 r g b circle square cylinder agent E S W N\n     _______ _____ ______________________ _____ _______\n       size  color        shape           agent agent dir.\n    :param situation_representation: data from dataset.txt at key \"situation\".\n    :param grid_size: int determining row/column number.\n    :return: grid to be parsed by computational models.\n    \"\"\"", "\n", "num_object_attributes", "=", "len", "(", "[", "int", "(", "bit", ")", "for", "bit", "in", "situation_representation", "[", "\"target_object\"", "]", "[", "\"vector\"", "]", "]", ")", "\n", "# Object representation + agent bit + agent direction bits (see docstring).", "\n", "num_grid_channels", "=", "num_object_attributes", "+", "1", "+", "4", "\n", "\n", "# Initialize the grid.", "\n", "grid", "=", "np", ".", "zeros", "(", "[", "grid_size", ",", "grid_size", ",", "num_grid_channels", "]", ",", "dtype", "=", "int", ")", "\n", "\n", "# Place the agent.", "\n", "agent_row", "=", "int", "(", "situation_representation", "[", "\"agent_position\"", "]", "[", "\"row\"", "]", ")", "\n", "agent_column", "=", "int", "(", "situation_representation", "[", "\"agent_position\"", "]", "[", "\"column\"", "]", ")", "\n", "agent_direction", "=", "int", "(", "situation_representation", "[", "\"agent_direction\"", "]", ")", "\n", "agent_representation", "=", "np", ".", "zeros", "(", "[", "num_grid_channels", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "agent_representation", "[", "-", "5", "]", "=", "1", "\n", "agent_representation", "[", "-", "4", "+", "agent_direction", "]", "=", "1", "\n", "grid", "[", "agent_row", ",", "agent_column", ",", ":", "]", "=", "agent_representation", "\n", "\n", "# Loop over the objects in the world and place them.", "\n", "for", "placed_object", "in", "situation_representation", "[", "\"placed_objects\"", "]", ".", "values", "(", ")", ":", "\n", "        ", "object_vector", "=", "np", ".", "array", "(", "[", "int", "(", "bit", ")", "for", "bit", "in", "placed_object", "[", "\"vector\"", "]", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "object_row", "=", "int", "(", "placed_object", "[", "\"position\"", "]", "[", "\"row\"", "]", ")", "\n", "object_column", "=", "int", "(", "placed_object", "[", "\"position\"", "]", "[", "\"column\"", "]", ")", "\n", "grid", "[", "object_row", ",", "object_column", ",", ":", "]", "=", "np", ".", "concatenate", "(", "[", "object_vector", ",", "np", ".", "zeros", "(", "[", "5", "]", ",", "dtype", "=", "np", ".", "int", ")", "]", ")", "\n", "", "return", "grid", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.read_gscan.read_gscan.data_loader": [[58, 83], ["open", "json.load", "int", "list", "logger.info", "all_data[].keys", "logger.info", "logger.info", "data_example[].split", "data_example[].split", "read_gscan.parse_sparse_situation", "loaded_data[].append", "len", "parse_sparse_situation.tolist"], "function", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.load", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.read_gscan.read_gscan.parse_sparse_situation"], ["", "def", "data_loader", "(", "file_path", ":", "str", ")", "->", "Dict", "[", "str", ",", "Union", "[", "List", "[", "str", "]", ",", "np", ".", "ndarray", "]", "]", ":", "\n", "    ", "\"\"\"\n    Loads grounded SCAN dataset from text file and ..\n    :param file_path: Full path to file containing dataset (dataset.txt)\n    :returns: dict with as keys all splits and values list of example dicts with input, target and situation.\n    \"\"\"", "\n", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "infile", ":", "\n", "        ", "all_data", "=", "json", ".", "load", "(", "infile", ")", "\n", "grid_size", "=", "int", "(", "all_data", "[", "\"grid_size\"", "]", ")", "\n", "splits", "=", "list", "(", "all_data", "[", "\"examples\"", "]", ".", "keys", "(", ")", ")", "\n", "logger", ".", "info", "(", "\"Found data splits: {}\"", ".", "format", "(", "splits", ")", ")", "\n", "loaded_data", "=", "{", "}", "\n", "for", "split", "in", "splits", ":", "\n", "            ", "loaded_data", "[", "split", "]", "=", "[", "]", "\n", "logger", ".", "info", "(", "\"Now loading data for split: {}\"", ".", "format", "(", "split", ")", ")", "\n", "for", "data_example", "in", "all_data", "[", "\"examples\"", "]", "[", "split", "]", ":", "\n", "                ", "input_command", "=", "data_example", "[", "\"command\"", "]", ".", "split", "(", "','", ")", "\n", "target_command", "=", "data_example", "[", "\"target_commands\"", "]", ".", "split", "(", "','", ")", "\n", "situation", "=", "parse_sparse_situation", "(", "situation_representation", "=", "data_example", "[", "\"situation\"", "]", ",", "\n", "grid_size", "=", "grid_size", ")", "\n", "loaded_data", "[", "split", "]", ".", "append", "(", "{", "\"input\"", ":", "input_command", ",", "\n", "\"target\"", ":", "target_command", ",", "\n", "\"situation\"", ":", "situation", ".", "tolist", "(", ")", "}", ")", "# .tolist() necessary to be serializable", "\n", "", "logger", ".", "info", "(", "\"Loaded {} examples in split {}.\\n\"", ".", "format", "(", "len", "(", "loaded_data", "[", "split", "]", ")", ",", "split", ")", ")", "\n", "", "", "return", "loaded_data", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.cnn_model.ConvolutionalNet.__init__": [[7, 21], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.__init__"], ["def", "__init__", "(", "self", ",", "num_channels", ":", "int", ",", "cnn_kernel_size", ":", "int", ",", "num_conv_channels", ":", "int", ",", "dropout_probability", ":", "float", ",", "\n", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "ConvolutionalNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "num_channels", ",", "out_channels", "=", "num_conv_channels", ",", "kernel_size", "=", "1", ",", "\n", "padding", "=", "0", ",", "stride", "=", "stride", ")", "\n", "self", ".", "conv_2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "num_channels", ",", "out_channels", "=", "num_conv_channels", ",", "kernel_size", "=", "5", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "2", ")", "\n", "self", ".", "conv_3", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "num_channels", ",", "out_channels", "=", "num_conv_channels", ",", "kernel_size", "=", "cnn_kernel_size", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "cnn_kernel_size", "//", "2", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout_probability", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "layers", "=", "[", "self", ".", "relu", ",", "self", ".", "dropout", "]", "\n", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "self", ".", "output_dimension", "=", "num_conv_channels", "*", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.cnn_model.ConvolutionalNet.forward": [[22, 37], ["input_images.transpose.transpose.size", "input_images.transpose.transpose.transpose", "cnn_model.ConvolutionalNet.conv_1", "cnn_model.ConvolutionalNet.conv_2", "cnn_model.ConvolutionalNet.conv_3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "cnn_model.ConvolutionalNet.size", "cnn_model.ConvolutionalNet.transpose", "cnn_model.ConvolutionalNet.layers", "cnn_model.ConvolutionalNet.reshape"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.size", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.size"], ["", "def", "forward", "(", "self", ",", "input_images", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        :param input_images: [batch_size, image_width, image_width, image_channels]\n        :return: [batch_size, image_width * image_width, num_conv_channels]\n        \"\"\"", "\n", "batch_size", "=", "input_images", ".", "size", "(", "0", ")", "\n", "input_images", "=", "input_images", ".", "transpose", "(", "1", ",", "3", ")", "\n", "conved_1", "=", "self", ".", "conv_1", "(", "input_images", ")", "\n", "conved_2", "=", "self", ".", "conv_2", "(", "input_images", ")", "\n", "conved_3", "=", "self", ".", "conv_3", "(", "input_images", ")", "\n", "images_features", "=", "torch", ".", "cat", "(", "[", "conved_1", ",", "conved_2", ",", "conved_3", "]", ",", "dim", "=", "1", ")", "\n", "_", ",", "num_channels", ",", "_", ",", "image_dimension", "=", "images_features", ".", "size", "(", ")", "\n", "images_features", "=", "images_features", ".", "transpose", "(", "1", ",", "3", ")", "\n", "images_features", "=", "self", ".", "layers", "(", "images_features", ")", "\n", "return", "images_features", ".", "reshape", "(", "batch_size", ",", "image_dimension", "*", "image_dimension", ",", "num_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.cnn_model.DeepConvolutionalNet.__init__": [[41, 55], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.__init__"], ["def", "__init__", "(", "self", ",", "num_channels", ":", "int", ",", "num_conv_channels", ":", "int", ",", "kernel_size", ":", "int", ",", "dropout_probability", ":", "float", ",", "\n", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "DeepConvolutionalNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "num_channels", ",", "out_channels", "=", "num_conv_channels", ",", "kernel_size", "=", "1", ",", "\n", "padding", "=", "0", ",", "stride", "=", "stride", ")", "\n", "self", ".", "conv_2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "num_channels", ",", "out_channels", "=", "num_conv_channels", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_3", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "num_channels", ",", "out_channels", "=", "num_conv_channels", ",", "kernel_size", "=", "5", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "2", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout_probability", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "layers", "=", "[", "self", ".", "relu", ",", "self", ".", "dropout", "]", "\n", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "self", ".", "output_dimension", "=", "num_conv_channels", "*", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.cnn_model.DeepConvolutionalNet.forward": [[56, 70], ["input_images.transpose.transpose.size", "input_images.transpose.transpose.transpose", "cnn_model.DeepConvolutionalNet.conv_1", "cnn_model.DeepConvolutionalNet.conv_2", "cnn_model.DeepConvolutionalNet.conv_3", "cnn_model.DeepConvolutionalNet.layers", "images_features.transpose.transpose.size", "images_features.transpose.transpose.transpose", "images_features.transpose.transpose.reshape", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.size", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.size"], ["", "def", "forward", "(", "self", ",", "input_images", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        :param input_images: [batch_size, image_width, image_width, image_channels]\n        :return: [batch_size, image_width * image_width, num_conv_channels]\n        \"\"\"", "\n", "batch_size", "=", "input_images", ".", "size", "(", "0", ")", "\n", "input_images", "=", "input_images", ".", "transpose", "(", "1", ",", "3", ")", "\n", "conved_1", "=", "self", ".", "conv_1", "(", "input_images", ")", "\n", "conved_2", "=", "self", ".", "conv_2", "(", "input_images", ")", "\n", "conved_3", "=", "self", ".", "conv_3", "(", "input_images", ")", "\n", "images_features", "=", "self", ".", "layers", "(", "torch", ".", "cat", "(", "[", "conved_1", ",", "conved_2", ",", "conved_3", "]", ",", "dim", "=", "1", ")", ")", "\n", "_", ",", "num_channels", ",", "_", ",", "image_dimension", "=", "images_features", ".", "size", "(", ")", "\n", "images_features", "=", "images_features", ".", "transpose", "(", "1", ",", "3", ")", "\n", "return", "images_features", ".", "reshape", "(", "batch_size", ",", "image_dimension", "*", "image_dimension", ",", "num_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.cnn_model.DownSamplingConvolutionalNet.__init__": [[74, 88], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout2d", "torch.Dropout2d", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.__init__"], ["def", "__init__", "(", "self", ",", "num_channels", ":", "int", ",", "num_conv_channels", ":", "int", ",", "dropout_probability", ":", "float", ")", ":", "\n", "        ", "super", "(", "DownSamplingConvolutionalNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "num_channels", ",", "out_channels", "=", "num_conv_channels", ",", "kernel_size", "=", "5", ",", "\n", "stride", "=", "5", ")", "\n", "self", ".", "conv_2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "num_conv_channels", ",", "out_channels", "=", "num_conv_channels", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "3", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv_3", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "num_conv_channels", ",", "out_channels", "=", "num_conv_channels", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout2d", "(", "dropout_probability", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "layers", "=", "[", "self", ".", "conv_1", ",", "self", ".", "relu", ",", "self", ".", "dropout", ",", "self", ".", "conv_2", ",", "self", ".", "relu", ",", "self", ".", "dropout", ",", "self", ".", "conv_3", ",", "\n", "self", ".", "relu", ",", "self", ".", "dropout", "]", "\n", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "self", ".", "output_dimension", "=", "num_conv_channels", "*", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.cnn_model.DownSamplingConvolutionalNet.forward": [[89, 100], ["input_images.transpose.transpose.size", "input_images.transpose.transpose.transpose", "cnn_model.DownSamplingConvolutionalNet.layers", "images_features.transpose.transpose.size", "images_features.transpose.transpose.transpose", "images_features.transpose.transpose.reshape"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.size", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.size"], ["", "def", "forward", "(", "self", ",", "input_images", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        :param input_images: [batch_size, image_width, image_width, image_channels]\n        :return: [batch_size, 6 * 6, output_dim]\n        \"\"\"", "\n", "batch_size", "=", "input_images", ".", "size", "(", "0", ")", "\n", "input_images", "=", "input_images", ".", "transpose", "(", "1", ",", "3", ")", "\n", "images_features", "=", "self", ".", "layers", "(", "input_images", ")", "\n", "_", ",", "num_channels", ",", "_", ",", "image_dimension", "=", "images_features", ".", "size", "(", ")", "\n", "images_features", "=", "images_features", ".", "transpose", "(", "1", ",", "3", ")", "\n", "return", "images_features", ".", "reshape", "(", "batch_size", ",", "image_dimension", ",", "image_dimension", ",", "num_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.predict.predict_and_save": [[16, 55], ["locals().copy", "open", "logger.info", "json.dump", "locals", "torch.no_grad", "torch.no_grad", "torch.no_grad", "predict.predict", "dataset.get_data_iterator", "seq2seq.helpers.sequence_accuracy", "dataset.array_to_sentence", "dataset.array_to_sentence", "dataset.array_to_sentence", "output.append", "input_sequence[].tolist", "target_sequence[].tolist", "target_sequence[].tolist"], "function", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.copy", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.predict.predict", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.GroundedScanDataset.get_data_iterator", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.helpers.sequence_accuracy", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.GroundedScanDataset.array_to_sentence", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.GroundedScanDataset.array_to_sentence", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.GroundedScanDataset.array_to_sentence"], ["def", "predict_and_save", "(", "dataset", ":", "GroundedScanDataset", ",", "model", ":", "nn", ".", "Module", ",", "output_file_path", ":", "str", ",", "max_decoding_steps", ":", "int", ",", "\n", "max_testing_examples", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Predict all data in dataset with a model and write the predictions to output_file_path.\n    :param dataset: a dataset with test examples\n    :param model: a trained model from model.py\n    :param output_file_path: a path where a .json file with predictions will be saved.\n    :param max_decoding_steps: after how many steps to force quit decoding\n    :param max_testing_examples: after how many examples to stop predicting, if None all examples will be evaluated\n    \"\"\"", "\n", "cfg", "=", "locals", "(", ")", ".", "copy", "(", ")", "\n", "\n", "with", "open", "(", "output_file_path", ",", "mode", "=", "'w'", ")", "as", "outfile", ":", "\n", "        ", "output", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "i", "=", "0", "\n", "for", "(", "input_sequence", ",", "derivation_spec", ",", "situation_spec", ",", "output_sequence", ",", "target_sequence", ",", "\n", "attention_weights_commands", ",", "attention_weights_situations", ",", "position_accuracy", ")", "in", "predict", "(", "\n", "dataset", ".", "get_data_iterator", "(", "batch_size", "=", "1", ")", ",", "model", "=", "model", ",", "max_decoding_steps", "=", "max_decoding_steps", ",", "\n", "pad_idx", "=", "dataset", ".", "target_vocabulary", ".", "pad_idx", ",", "sos_idx", "=", "dataset", ".", "target_vocabulary", ".", "sos_idx", ",", "\n", "eos_idx", "=", "dataset", ".", "target_vocabulary", ".", "eos_idx", ")", ":", "\n", "                ", "i", "+=", "1", "\n", "accuracy", "=", "sequence_accuracy", "(", "output_sequence", ",", "target_sequence", "[", "0", "]", ".", "tolist", "(", ")", "[", "1", ":", "-", "1", "]", ")", "\n", "input_str_sequence", "=", "dataset", ".", "array_to_sentence", "(", "input_sequence", "[", "0", "]", ".", "tolist", "(", ")", ",", "vocabulary", "=", "\"input\"", ")", "\n", "input_str_sequence", "=", "input_str_sequence", "[", "1", ":", "-", "1", "]", "# Get rid of <SOS> and <EOS>", "\n", "target_str_sequence", "=", "dataset", ".", "array_to_sentence", "(", "target_sequence", "[", "0", "]", ".", "tolist", "(", ")", ",", "vocabulary", "=", "\"target\"", ")", "\n", "target_str_sequence", "=", "target_str_sequence", "[", "1", ":", "-", "1", "]", "# Get rid of <SOS> and <EOS>", "\n", "output_str_sequence", "=", "dataset", ".", "array_to_sentence", "(", "output_sequence", ",", "vocabulary", "=", "\"target\"", ")", "\n", "output", ".", "append", "(", "{", "\"input\"", ":", "input_str_sequence", ",", "\"prediction\"", ":", "output_str_sequence", ",", "\n", "\"derivation\"", ":", "derivation_spec", ",", "\n", "\"target\"", ":", "target_str_sequence", ",", "\"situation\"", ":", "situation_spec", ",", "\n", "\"attention_weights_input\"", ":", "attention_weights_commands", ",", "\n", "\"attention_weights_situation\"", ":", "attention_weights_situations", ",", "\n", "\"accuracy\"", ":", "accuracy", ",", "\n", "\"exact_match\"", ":", "True", "if", "accuracy", "==", "100", "else", "False", ",", "\n", "\"position_accuracy\"", ":", "position_accuracy", "}", ")", "\n", "", "", "logger", ".", "info", "(", "\"Wrote predictions for {} examples.\"", ".", "format", "(", "i", ")", ")", "\n", "json", ".", "dump", "(", "output", ",", "outfile", ",", "indent", "=", "4", ")", "\n", "", "return", "output_file_path", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.predict.predict": [[57, 129], ["model.eval", "time.time", "logging.info", "logging.info", "model.encode_input", "model.visual_attention.key_layer", "model.textual_attention.key_layer", "model.attention_decoder.initialize_hidden", "torch.tensor", "torch.tensor", "torch.tensor", "time.time", "model.tanh", "model.decode_input", "torch.log_softmax", "output_sequence.append", "attention_weights_commands.append", "attention_weights_situations.append", "contexts_situation.append", "output_sequence.pop", "attention_weights_commands.pop", "attention_weights_situations.pop", "model.auxiliary_task_forward", "model.get_auxiliary_accuracy", "model.enc_hidden_to_dec_hidden", "F.log_softmax.max", "torch.tensor.data[].item", "attention_weights_command.tolist", "attention_weights_situation.tolist", "context_situation.unsqueeze", "torch.cat().sum", "torch.cat().sum", "torch.cat().sum", "torch.cat", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.model.Model.encode_input", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.seq2seq_model.BahdanauAttentionDecoderRNN.initialize_hidden", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.model.Model.decode_input", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.model.Model.auxiliary_task_forward", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.model.Model.get_auxiliary_accuracy"], ["", "def", "predict", "(", "data_iterator", ":", "Iterator", ",", "model", ":", "nn", ".", "Module", ",", "max_decoding_steps", ":", "int", ",", "pad_idx", ":", "int", ",", "sos_idx", ":", "int", ",", "\n", "eos_idx", ":", "int", ",", "max_examples_to_evaluate", "=", "None", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Loop over all data in data_iterator and predict until <EOS> token is reached.\n    :param data_iterator: iterator containing the data to predict\n    :param model: a trained model from model.py\n    :param max_decoding_steps: after how many steps to abort decoding\n    :param pad_idx: the padding idx of the target vocabulary\n    :param sos_idx: the start-of-sequence idx of the target vocabulary\n    :param eos_idx: the end-of-sequence idx of the target vocabulary\n    :param: max_examples_to_evaluate: after how many examples to break prediction, if none all are predicted\n    \"\"\"", "\n", "# Disable dropout and other regularization.", "\n", "model", ".", "eval", "(", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Loop over the data.", "\n", "i", "=", "0", "\n", "for", "(", "input_sequence", ",", "input_lengths", ",", "derivation_spec", ",", "situation", ",", "situation_spec", ",", "target_sequence", ",", "\n", "target_lengths", ",", "agent_positions", ",", "target_positions", ")", "in", "data_iterator", ":", "\n", "        ", "i", "+=", "1", "\n", "if", "max_examples_to_evaluate", ":", "\n", "            ", "if", "i", ">", "max_examples_to_evaluate", ":", "\n", "                ", "break", "\n", "# Encode the input sequence.", "\n", "", "", "encoded_input", "=", "model", ".", "encode_input", "(", "commands_input", "=", "input_sequence", ",", "\n", "commands_lengths", "=", "input_lengths", ",", "\n", "situations_input", "=", "situation", ")", "\n", "\n", "# For efficiency", "\n", "projected_keys_visual", "=", "model", ".", "visual_attention", ".", "key_layer", "(", "\n", "encoded_input", "[", "\"encoded_situations\"", "]", ")", "# [bsz, situation_length, dec_hidden_dim]", "\n", "projected_keys_textual", "=", "model", ".", "textual_attention", ".", "key_layer", "(", "\n", "encoded_input", "[", "\"encoded_commands\"", "]", "[", "\"encoder_outputs\"", "]", ")", "# [max_input_length, bsz, dec_hidden_dim]", "\n", "\n", "# Iteratively decode the output.", "\n", "output_sequence", "=", "[", "]", "\n", "contexts_situation", "=", "[", "]", "\n", "hidden", "=", "model", ".", "attention_decoder", ".", "initialize_hidden", "(", "\n", "model", ".", "tanh", "(", "model", ".", "enc_hidden_to_dec_hidden", "(", "encoded_input", "[", "\"hidden_states\"", "]", ")", ")", ")", "\n", "token", "=", "torch", ".", "tensor", "(", "[", "sos_idx", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "decoding_iteration", "=", "0", "\n", "attention_weights_commands", "=", "[", "]", "\n", "attention_weights_situations", "=", "[", "]", "\n", "while", "token", "!=", "eos_idx", "and", "decoding_iteration", "<=", "max_decoding_steps", ":", "\n", "            ", "(", "output", ",", "hidden", ",", "context_situation", ",", "attention_weights_command", ",", "\n", "attention_weights_situation", ")", "=", "model", ".", "decode_input", "(", "\n", "target_token", "=", "token", ",", "hidden", "=", "hidden", ",", "encoder_outputs", "=", "projected_keys_textual", ",", "\n", "input_lengths", "=", "input_lengths", ",", "encoded_situations", "=", "projected_keys_visual", ")", "\n", "output", "=", "F", ".", "log_softmax", "(", "output", ",", "dim", "=", "-", "1", ")", "\n", "token", "=", "output", ".", "max", "(", "dim", "=", "-", "1", ")", "[", "1", "]", "\n", "output_sequence", ".", "append", "(", "token", ".", "data", "[", "0", "]", ".", "item", "(", ")", ")", "\n", "attention_weights_commands", ".", "append", "(", "attention_weights_command", ".", "tolist", "(", ")", ")", "\n", "attention_weights_situations", ".", "append", "(", "attention_weights_situation", ".", "tolist", "(", ")", ")", "\n", "contexts_situation", ".", "append", "(", "context_situation", ".", "unsqueeze", "(", "1", ")", ")", "\n", "decoding_iteration", "+=", "1", "\n", "\n", "", "if", "output_sequence", "[", "-", "1", "]", "==", "eos_idx", ":", "\n", "            ", "output_sequence", ".", "pop", "(", ")", "\n", "attention_weights_commands", ".", "pop", "(", ")", "\n", "attention_weights_situations", ".", "pop", "(", ")", "\n", "", "if", "model", ".", "auxiliary_task", ":", "\n", "            ", "target_position_scores", "=", "model", ".", "auxiliary_task_forward", "(", "torch", ".", "cat", "(", "contexts_situation", ",", "dim", "=", "1", ")", ".", "sum", "(", "dim", "=", "1", ")", ")", "\n", "auxiliary_accuracy_target", "=", "model", ".", "get_auxiliary_accuracy", "(", "target_position_scores", ",", "target_positions", ")", "\n", "", "else", ":", "\n", "            ", "auxiliary_accuracy_agent", ",", "auxiliary_accuracy_target", "=", "0", ",", "0", "\n", "", "yield", "(", "input_sequence", ",", "derivation_spec", ",", "situation_spec", ",", "output_sequence", ",", "target_sequence", ",", "\n", "attention_weights_commands", ",", "attention_weights_situations", ",", "auxiliary_accuracy_target", ")", "\n", "\n", "", "elapsed_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "logging", ".", "info", "(", "\"Predicted for {} examples.\"", ".", "format", "(", "i", ")", ")", "\n", "logging", ".", "info", "(", "\"Done predicting in {} seconds.\"", ".", "format", "(", "elapsed_time", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.evaluate.evaluate": [[10, 25], ["seq2seq.predict.predict", "seq2seq.helpers.sequence_accuracy", "accuracies.append", "target_accuracies.append", "float", "float", "numpy.mean", "numpy.mean", "target_sequence[].tolist", "numpy.array", "len", "numpy.array"], "function", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.predict.predict", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.helpers.sequence_accuracy"], ["def", "evaluate", "(", "data_iterator", ":", "Iterator", ",", "model", ":", "nn", ".", "Module", ",", "max_decoding_steps", ":", "int", ",", "pad_idx", ":", "int", ",", "sos_idx", ":", "int", ",", "\n", "eos_idx", ":", "int", ",", "max_examples_to_evaluate", "=", "None", ")", "->", "Tuple", "[", "float", ",", "float", ",", "float", "]", ":", "\n", "    ", "accuracies", "=", "[", "]", "\n", "target_accuracies", "=", "[", "]", "\n", "exact_match", "=", "0", "\n", "for", "input_sequence", ",", "_", ",", "_", ",", "output_sequence", ",", "target_sequence", ",", "_", ",", "_", ",", "aux_acc_target", "in", "predict", "(", "\n", "data_iterator", "=", "data_iterator", ",", "model", "=", "model", ",", "max_decoding_steps", "=", "max_decoding_steps", ",", "pad_idx", "=", "pad_idx", ",", "\n", "sos_idx", "=", "sos_idx", ",", "eos_idx", "=", "eos_idx", ",", "max_examples_to_evaluate", "=", "max_examples_to_evaluate", ")", ":", "\n", "        ", "accuracy", "=", "sequence_accuracy", "(", "output_sequence", ",", "target_sequence", "[", "0", "]", ".", "tolist", "(", ")", "[", "1", ":", "-", "1", "]", ")", "\n", "if", "accuracy", "==", "100", ":", "\n", "            ", "exact_match", "+=", "1", "\n", "", "accuracies", ".", "append", "(", "accuracy", ")", "\n", "target_accuracies", ".", "append", "(", "aux_acc_target", ")", "\n", "", "return", "(", "float", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "accuracies", ")", ")", ")", ",", "(", "exact_match", "/", "len", "(", "accuracies", ")", ")", "*", "100", ",", "\n", "float", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "target_accuracies", ")", ")", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.train.train": [[15, 155], ["locals().copy", "torch.manual_seed", "logger.info", "seq2seq.gSCAN_dataset.GroundedScanDataset", "seq2seq.gSCAN_dataset.GroundedScanDataset.read_dataset", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "seq2seq.gSCAN_dataset.GroundedScanDataset", "seq2seq.gSCAN_dataset.GroundedScanDataset.read_dataset", "seq2seq.gSCAN_dataset.GroundedScanDataset.shuffle_data", "logger.info", "seq2seq.model.Model", "seq2seq.helpers.log_parameters", "torch.optim.Adam", "torch.optim.lr_scheduler.LambdaLR", "float", "logger.info", "logger.info", "torch.device", "torch.device", "seq2seq.gSCAN_dataset.GroundedScanDataset.save_vocabularies", "logger.info", "seq2seq.model.Model.cuda", "os.path.isfile", "logger.info", "seq2seq.model.Model.load_model", "torch.optim.Adam.load_state_dict", "logger.info", "seq2seq.gSCAN_dataset.GroundedScanDataset.shuffle_data", "seq2seq.gSCAN_dataset.GroundedScanDataset.get_data_iterator", "locals", "seq2seq.gSCAN_dataset.GroundedScanDataset.input_vocabulary.most_common", "seq2seq.gSCAN_dataset.GroundedScanDataset.target_vocabulary.most_common", "seq2seq.model.Model.parameters", "seq2seq.model.Model.train", "seq2seq.model.Model.", "seq2seq.model.Model.get_loss", "model.get_loss.backward", "torch.optim.Adam.step", "torch.optim.lr_scheduler.LambdaLR.step", "torch.optim.Adam.zero_grad", "seq2seq.model.Model.update_state", "seq2seq.model.Model.get_auxiliary_loss", "seq2seq.model.Model.get_metrics", "logger.info", "seq2seq.model.Model.get_auxiliary_accuracy", "torch.optim.lr_scheduler.LambdaLR.get_lr", "torch.no_grad", "seq2seq.model.Model.eval", "logger.info", "seq2seq.evaluate.evaluate", "logger.info", "seq2seq.gSCAN_dataset.GroundedScanDataset.get_data_iterator", "seq2seq.model.Model.update_state", "str", "seq2seq.model.Model.save_checkpoint", "torch.optim.Adam.state_dict"], "function", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.copy", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.GroundedScanDataset.read_dataset", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.GroundedScanDataset.read_dataset", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.GroundedScanDataset.shuffle_data", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.helpers.log_parameters", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.GroundedScanDataset.save_vocabularies", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.model.Model.load_model", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.GroundedScanDataset.shuffle_data", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.GroundedScanDataset.get_data_iterator", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.most_common", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.most_common", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.train.train", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.model.Model.get_loss", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv.step", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv.step", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.model.Model.update_state", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.model.Model.get_auxiliary_loss", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.model.Model.get_metrics", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.model.Model.get_auxiliary_accuracy", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.evaluate.evaluate", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.GroundedScanDataset.get_data_iterator", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.model.Model.update_state", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.model.Model.save_checkpoint"], ["def", "train", "(", "data_path", ":", "str", ",", "data_directory", ":", "str", ",", "generate_vocabularies", ":", "bool", ",", "input_vocab_path", ":", "str", ",", "\n", "target_vocab_path", ":", "str", ",", "embedding_dimension", ":", "int", ",", "num_encoder_layers", ":", "int", ",", "encoder_dropout_p", ":", "float", ",", "\n", "encoder_bidirectional", ":", "bool", ",", "training_batch_size", ":", "int", ",", "test_batch_size", ":", "int", ",", "max_decoding_steps", ":", "int", ",", "\n", "num_decoder_layers", ":", "int", ",", "decoder_dropout_p", ":", "float", ",", "cnn_kernel_size", ":", "int", ",", "cnn_dropout_p", ":", "float", ",", "\n", "cnn_hidden_num_channels", ":", "int", ",", "simple_situation_representation", ":", "bool", ",", "decoder_hidden_size", ":", "int", ",", "\n", "encoder_hidden_size", ":", "int", ",", "learning_rate", ":", "float", ",", "adam_beta_1", ":", "float", ",", "adam_beta_2", ":", "float", ",", "lr_decay", ":", "float", ",", "\n", "lr_decay_steps", ":", "int", ",", "resume_from_file", ":", "str", ",", "max_training_iterations", ":", "int", ",", "output_directory", ":", "str", ",", "\n", "print_every", ":", "int", ",", "evaluate_every", ":", "int", ",", "conditional_attention", ":", "bool", ",", "auxiliary_task", ":", "bool", ",", "\n", "weight_target_loss", ":", "float", ",", "attention_type", ":", "str", ",", "k", ":", "int", ",", "max_training_examples", "=", "None", ",", "seed", "=", "42", ",", "**", "kwargs", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "type", "=", "'cuda'", ")", "if", "use_cuda", "else", "torch", ".", "device", "(", "type", "=", "'cpu'", ")", "\n", "cfg", "=", "locals", "(", ")", ".", "copy", "(", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "\n", "logger", ".", "info", "(", "\"Loading Training set...\"", ")", "\n", "training_set", "=", "GroundedScanDataset", "(", "data_path", ",", "data_directory", ",", "split", "=", "\"train\"", ",", "\n", "input_vocabulary_file", "=", "input_vocab_path", ",", "\n", "target_vocabulary_file", "=", "target_vocab_path", ",", "\n", "generate_vocabulary", "=", "generate_vocabularies", ",", "k", "=", "k", ")", "\n", "training_set", ".", "read_dataset", "(", "max_examples", "=", "max_training_examples", ",", "\n", "simple_situation_representation", "=", "simple_situation_representation", ")", "\n", "logger", ".", "info", "(", "\"Done Loading Training set.\"", ")", "\n", "logger", ".", "info", "(", "\"  Loaded {} training examples.\"", ".", "format", "(", "training_set", ".", "num_examples", ")", ")", "\n", "logger", ".", "info", "(", "\"  Input vocabulary size training set: {}\"", ".", "format", "(", "training_set", ".", "input_vocabulary_size", ")", ")", "\n", "logger", ".", "info", "(", "\"  Most common input words: {}\"", ".", "format", "(", "training_set", ".", "input_vocabulary", ".", "most_common", "(", "5", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"  Output vocabulary size training set: {}\"", ".", "format", "(", "training_set", ".", "target_vocabulary_size", ")", ")", "\n", "logger", ".", "info", "(", "\"  Most common target words: {}\"", ".", "format", "(", "training_set", ".", "target_vocabulary", ".", "most_common", "(", "5", ")", ")", ")", "\n", "\n", "if", "generate_vocabularies", ":", "\n", "        ", "training_set", ".", "save_vocabularies", "(", "input_vocab_path", ",", "target_vocab_path", ")", "\n", "logger", ".", "info", "(", "\"Saved vocabularies to {} for input and {} for target.\"", ".", "format", "(", "input_vocab_path", ",", "target_vocab_path", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Loading Dev. set...\"", ")", "\n", "test_set", "=", "GroundedScanDataset", "(", "data_path", ",", "data_directory", ",", "split", "=", "\"dev\"", ",", "# TODO: use dev set here", "\n", "input_vocabulary_file", "=", "input_vocab_path", ",", "\n", "target_vocabulary_file", "=", "target_vocab_path", ",", "generate_vocabulary", "=", "False", ",", "k", "=", "0", ")", "\n", "test_set", ".", "read_dataset", "(", "max_examples", "=", "None", ",", "\n", "simple_situation_representation", "=", "simple_situation_representation", ")", "\n", "\n", "# Shuffle the test set to make sure that if we only evaluate max_testing_examples we get a random part of the set.", "\n", "test_set", ".", "shuffle_data", "(", ")", "\n", "logger", ".", "info", "(", "\"Done Loading Dev. set.\"", ")", "\n", "\n", "model", "=", "Model", "(", "input_vocabulary_size", "=", "training_set", ".", "input_vocabulary_size", ",", "\n", "target_vocabulary_size", "=", "training_set", ".", "target_vocabulary_size", ",", "\n", "num_cnn_channels", "=", "training_set", ".", "image_channels", ",", "\n", "input_padding_idx", "=", "training_set", ".", "input_vocabulary", ".", "pad_idx", ",", "\n", "target_pad_idx", "=", "training_set", ".", "target_vocabulary", ".", "pad_idx", ",", "\n", "target_eos_idx", "=", "training_set", ".", "target_vocabulary", ".", "eos_idx", ",", "\n", "**", "cfg", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "if", "use_cuda", "else", "model", "\n", "log_parameters", "(", "model", ")", "\n", "trainable_parameters", "=", "[", "parameter", "for", "parameter", "in", "model", ".", "parameters", "(", ")", "if", "parameter", ".", "requires_grad", "]", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "trainable_parameters", ",", "lr", "=", "learning_rate", ",", "betas", "=", "(", "adam_beta_1", ",", "adam_beta_2", ")", ")", "\n", "scheduler", "=", "LambdaLR", "(", "optimizer", ",", "\n", "lr_lambda", "=", "lambda", "t", ":", "lr_decay", "**", "(", "t", "/", "lr_decay_steps", ")", ")", "\n", "\n", "# Load model and vocabularies if resuming.", "\n", "start_iteration", "=", "1", "\n", "best_iteration", "=", "1", "\n", "best_accuracy", "=", "0", "\n", "best_exact_match", "=", "0", "\n", "best_loss", "=", "float", "(", "'inf'", ")", "\n", "if", "resume_from_file", ":", "\n", "        ", "assert", "os", ".", "path", ".", "isfile", "(", "resume_from_file", ")", ",", "\"No checkpoint found at {}\"", ".", "format", "(", "resume_from_file", ")", "\n", "logger", ".", "info", "(", "\"Loading checkpoint from file at '{}'\"", ".", "format", "(", "resume_from_file", ")", ")", "\n", "optimizer_state_dict", "=", "model", ".", "load_model", "(", "resume_from_file", ")", "\n", "optimizer", ".", "load_state_dict", "(", "optimizer_state_dict", ")", "\n", "start_iteration", "=", "model", ".", "trained_iterations", "\n", "logger", ".", "info", "(", "\"Loaded checkpoint '{}' (iter {})\"", ".", "format", "(", "resume_from_file", ",", "start_iteration", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Training starts..\"", ")", "\n", "training_iteration", "=", "start_iteration", "\n", "while", "training_iteration", "<", "max_training_iterations", ":", "\n", "\n", "# Shuffle the dataset and loop over it.", "\n", "        ", "training_set", ".", "shuffle_data", "(", ")", "\n", "for", "(", "input_batch", ",", "input_lengths", ",", "_", ",", "situation_batch", ",", "_", ",", "target_batch", ",", "\n", "target_lengths", ",", "agent_positions", ",", "target_positions", ")", "in", "training_set", ".", "get_data_iterator", "(", "\n", "batch_size", "=", "training_batch_size", ")", ":", "\n", "            ", "is_best", "=", "False", "\n", "model", ".", "train", "(", ")", "\n", "\n", "# Forward pass.", "\n", "target_scores", ",", "target_position_scores", "=", "model", "(", "commands_input", "=", "input_batch", ",", "commands_lengths", "=", "input_lengths", ",", "\n", "situations_input", "=", "situation_batch", ",", "target_batch", "=", "target_batch", ",", "\n", "target_lengths", "=", "target_lengths", ")", "\n", "loss", "=", "model", ".", "get_loss", "(", "target_scores", ",", "target_batch", ")", "\n", "if", "auxiliary_task", ":", "\n", "                ", "target_loss", "=", "model", ".", "get_auxiliary_loss", "(", "target_position_scores", ",", "target_positions", ")", "\n", "", "else", ":", "\n", "                ", "target_loss", "=", "0", "\n", "", "loss", "+=", "weight_target_loss", "*", "target_loss", "\n", "\n", "# Backward pass and update model parameters.", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "model", ".", "update_state", "(", "is_best", "=", "is_best", ")", "\n", "\n", "# Print current metrics.", "\n", "if", "training_iteration", "%", "print_every", "==", "0", ":", "\n", "                ", "accuracy", ",", "exact_match", "=", "model", ".", "get_metrics", "(", "target_scores", ",", "target_batch", ")", "\n", "if", "auxiliary_task", ":", "\n", "                    ", "auxiliary_accuracy_target", "=", "model", ".", "get_auxiliary_accuracy", "(", "target_position_scores", ",", "target_positions", ")", "\n", "", "else", ":", "\n", "                    ", "auxiliary_accuracy_target", "=", "0.", "\n", "", "learning_rate", "=", "scheduler", ".", "get_lr", "(", ")", "[", "0", "]", "\n", "logger", ".", "info", "(", "\"Iteration %08d, loss %8.4f, accuracy %5.2f, exact match %5.2f, learning_rate %.5f,\"", "\n", "\" aux. accuracy target pos %5.2f\"", "%", "(", "training_iteration", ",", "loss", ",", "accuracy", ",", "exact_match", ",", "\n", "learning_rate", ",", "auxiliary_accuracy_target", ")", ")", "\n", "\n", "# Evaluate on test set.", "\n", "", "if", "training_iteration", "%", "evaluate_every", "==", "0", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "model", ".", "eval", "(", ")", "\n", "logger", ".", "info", "(", "\"Evaluating..\"", ")", "\n", "accuracy", ",", "exact_match", ",", "target_accuracy", "=", "evaluate", "(", "\n", "test_set", ".", "get_data_iterator", "(", "batch_size", "=", "1", ")", ",", "model", "=", "model", ",", "\n", "max_decoding_steps", "=", "max_decoding_steps", ",", "pad_idx", "=", "test_set", ".", "target_vocabulary", ".", "pad_idx", ",", "\n", "sos_idx", "=", "test_set", ".", "target_vocabulary", ".", "sos_idx", ",", "\n", "eos_idx", "=", "test_set", ".", "target_vocabulary", ".", "eos_idx", ",", "\n", "max_examples_to_evaluate", "=", "kwargs", "[", "\"max_testing_examples\"", "]", ")", "\n", "logger", ".", "info", "(", "\"  Evaluation Accuracy: %5.2f Exact Match: %5.2f \"", "\n", "\" Target Accuracy: %5.2f\"", "%", "(", "accuracy", ",", "exact_match", ",", "target_accuracy", ")", ")", "\n", "if", "exact_match", ">", "best_exact_match", ":", "\n", "                        ", "is_best", "=", "True", "\n", "best_accuracy", "=", "accuracy", "\n", "best_exact_match", "=", "exact_match", "\n", "model", ".", "update_state", "(", "accuracy", "=", "accuracy", ",", "exact_match", "=", "exact_match", ",", "is_best", "=", "is_best", ")", "\n", "", "file_name", "=", "\"checkpoint.pth.tar\"", ".", "format", "(", "str", "(", "training_iteration", ")", ")", "\n", "if", "is_best", ":", "\n", "                        ", "model", ".", "save_checkpoint", "(", "file_name", "=", "file_name", ",", "is_best", "=", "is_best", ",", "\n", "optimizer_state_dict", "=", "optimizer", ".", "state_dict", "(", ")", ")", "\n", "\n", "", "", "", "training_iteration", "+=", "1", "\n", "if", "training_iteration", ">", "max_training_iterations", ":", "\n", "                ", "break", "\n", "", "", "", "logger", ".", "info", "(", "\"Finished training.\"", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.__main__.main": [[105, 168], ["flags.items", "os.path.join", "logger.info", "os.path.exists", "os.mkdir", "NotImplementedError", "NotImplementedError", "seq2seq.train.train", "os.path.join", "flags[].split", "os.getcwd", "os.path.exists", "os.path.exists", "logger.info", "seq2seq.gSCAN_dataset.GroundedScanDataset", "seq2seq.gSCAN_dataset.GroundedScanDataset.read_dataset", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "seq2seq.model.Model", "os.path.isfile", "logger.info", "seq2seq.model.Model.load_model", "logger.info", "os.path.join", "seq2seq.predict.predict_and_save", "logger.info", "NotImplementedError", "ValueError", "os.path.join", "os.path.join", "seq2seq.model.Model.cuda", "seq2seq.gSCAN_dataset.GroundedScanDataset.input_vocabulary.most_common", "seq2seq.gSCAN_dataset.GroundedScanDataset.target_vocabulary.most_common"], "function", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.train.train", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.GroundedScanDataset.read_dataset", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.model.Model.load_model", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.predict.predict_and_save", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.most_common", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.most_common"], ["def", "main", "(", "flags", ")", ":", "\n", "    ", "for", "argument", ",", "value", "in", "flags", ".", "items", "(", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"{}: {}\"", ".", "format", "(", "argument", ",", "value", ")", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "flags", "[", "\"output_directory\"", "]", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "flags", "[", "\"output_directory\"", "]", ")", ")", "\n", "\n", "", "if", "not", "flags", "[", "\"simple_situation_representation\"", "]", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Full RGB input image not implemented. Implement or set \"", "\n", "\"--simple_situation_representation\"", ")", "\n", "# Some checks on the flags", "\n", "", "if", "flags", "[", "\"generate_vocabularies\"", "]", ":", "\n", "        ", "assert", "flags", "[", "\"input_vocab_path\"", "]", "and", "flags", "[", "\"target_vocab_path\"", "]", ",", "\"Please specify paths to vocabularies to save.\"", "\n", "\n", "", "if", "flags", "[", "\"test_batch_size\"", "]", ">", "1", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Test batch size larger than 1 not implemented.\"", ")", "\n", "\n", "", "data_path", "=", "os", ".", "path", ".", "join", "(", "flags", "[", "\"data_directory\"", "]", ",", "\"dataset.txt\"", ")", "\n", "if", "flags", "[", "\"mode\"", "]", "==", "\"train\"", ":", "\n", "        ", "train", "(", "data_path", "=", "data_path", ",", "**", "flags", ")", "\n", "", "elif", "flags", "[", "\"mode\"", "]", "==", "\"test\"", ":", "\n", "        ", "assert", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "flags", "[", "\"data_directory\"", "]", ",", "flags", "[", "\"input_vocab_path\"", "]", ")", ")", "and", "os", ".", "path", ".", "exists", "(", "\n", "os", ".", "path", ".", "join", "(", "flags", "[", "\"data_directory\"", "]", ",", "flags", "[", "\"target_vocab_path\"", "]", ")", ")", ",", "\"No vocabs found at {} and {}\"", ".", "format", "(", "flags", "[", "\"input_vocab_path\"", "]", ",", "flags", "[", "\"target_vocab_path\"", "]", ")", "\n", "splits", "=", "flags", "[", "\"splits\"", "]", ".", "split", "(", "\",\"", ")", "\n", "for", "split", "in", "splits", ":", "\n", "            ", "logger", ".", "info", "(", "\"Loading {} dataset split...\"", ".", "format", "(", "split", ")", ")", "\n", "test_set", "=", "GroundedScanDataset", "(", "data_path", ",", "flags", "[", "\"data_directory\"", "]", ",", "split", "=", "split", ",", "\n", "input_vocabulary_file", "=", "flags", "[", "\"input_vocab_path\"", "]", ",", "\n", "target_vocabulary_file", "=", "flags", "[", "\"target_vocab_path\"", "]", ",", "generate_vocabulary", "=", "False", ",", "\n", "k", "=", "flags", "[", "\"k\"", "]", ")", "\n", "test_set", ".", "read_dataset", "(", "max_examples", "=", "None", ",", "\n", "simple_situation_representation", "=", "flags", "[", "\"simple_situation_representation\"", "]", ")", "\n", "logger", ".", "info", "(", "\"Done Loading {} dataset split.\"", ".", "format", "(", "flags", "[", "\"split\"", "]", ")", ")", "\n", "logger", ".", "info", "(", "\"  Loaded {} examples.\"", ".", "format", "(", "test_set", ".", "num_examples", ")", ")", "\n", "logger", ".", "info", "(", "\"  Input vocabulary size: {}\"", ".", "format", "(", "test_set", ".", "input_vocabulary_size", ")", ")", "\n", "logger", ".", "info", "(", "\"  Most common input words: {}\"", ".", "format", "(", "test_set", ".", "input_vocabulary", ".", "most_common", "(", "5", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"  Output vocabulary size: {}\"", ".", "format", "(", "test_set", ".", "target_vocabulary_size", ")", ")", "\n", "logger", ".", "info", "(", "\"  Most common target words: {}\"", ".", "format", "(", "test_set", ".", "target_vocabulary", ".", "most_common", "(", "5", ")", ")", ")", "\n", "\n", "model", "=", "Model", "(", "input_vocabulary_size", "=", "test_set", ".", "input_vocabulary_size", ",", "\n", "target_vocabulary_size", "=", "test_set", ".", "target_vocabulary_size", ",", "\n", "num_cnn_channels", "=", "test_set", ".", "image_channels", ",", "\n", "input_padding_idx", "=", "test_set", ".", "input_vocabulary", ".", "pad_idx", ",", "\n", "target_pad_idx", "=", "test_set", ".", "target_vocabulary", ".", "pad_idx", ",", "\n", "target_eos_idx", "=", "test_set", ".", "target_vocabulary", ".", "eos_idx", ",", "\n", "**", "flags", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "if", "use_cuda", "else", "model", "\n", "\n", "# Load model and vocabularies if resuming.", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "flags", "[", "\"resume_from_file\"", "]", ")", ",", "\"No checkpoint found at {}\"", ".", "format", "(", "flags", "[", "\"resume_from_file\"", "]", ")", "\n", "logger", ".", "info", "(", "\"Loading checkpoint from file at '{}'\"", ".", "format", "(", "flags", "[", "\"resume_from_file\"", "]", ")", ")", "\n", "model", ".", "load_model", "(", "flags", "[", "\"resume_from_file\"", "]", ")", "\n", "start_iteration", "=", "model", ".", "trained_iterations", "\n", "logger", ".", "info", "(", "\"Loaded checkpoint '{}' (iter {})\"", ".", "format", "(", "flags", "[", "\"resume_from_file\"", "]", ",", "start_iteration", ")", ")", "\n", "output_file_name", "=", "\"_\"", ".", "join", "(", "[", "split", ",", "flags", "[", "\"output_file_name\"", "]", "]", ")", "\n", "output_file_path", "=", "os", ".", "path", ".", "join", "(", "flags", "[", "\"output_directory\"", "]", ",", "output_file_name", ")", "\n", "output_file", "=", "predict_and_save", "(", "dataset", "=", "test_set", ",", "model", "=", "model", ",", "output_file_path", "=", "output_file_path", ",", "**", "flags", ")", "\n", "logger", ".", "info", "(", "\"Saved predictions to {}\"", ".", "format", "(", "output_file", ")", ")", "\n", "", "", "elif", "flags", "[", "\"mode\"", "]", "==", "\"predict\"", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Wrong value for parameters --mode ({}).\"", ".", "format", "(", "flags", "[", "\"mode\"", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.model.Model.__init__": [[26, 107], ["torch.Module.__init__", "seq2seq.cnn_model.ConvolutionalNet", "seq2seq.seq2seq_model.Attention", "seq2seq.seq2seq_model.EncoderRNN", "torch.Linear", "torch.Linear", "torch.Linear", "seq2seq.seq2seq_model.Attention", "torch.NLLLoss", "torch.NLLLoss", "torch.NLLLoss", "torch.Tanh", "torch.Tanh", "torch.Tanh", "logger.warning", "seq2seq.cnn_model.DownSamplingConvolutionalNet", "torch.NLLLoss", "torch.NLLLoss", "torch.NLLLoss", "seq2seq.seq2seq_model.BahdanauAttentionDecoderRNN", "logger.warning", "seq2seq.seq2seq_model.LuongAttentionDecoderRNN", "ValueError"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_vocabulary_size", ":", "int", ",", "embedding_dimension", ":", "int", ",", "encoder_hidden_size", ":", "int", ",", "\n", "num_encoder_layers", ":", "int", ",", "target_vocabulary_size", ":", "int", ",", "encoder_dropout_p", ":", "float", ",", "\n", "encoder_bidirectional", ":", "bool", ",", "num_decoder_layers", ":", "int", ",", "decoder_dropout_p", ":", "float", ",", "\n", "decoder_hidden_size", ":", "int", ",", "num_cnn_channels", ":", "int", ",", "cnn_kernel_size", ":", "int", ",", "\n", "cnn_dropout_p", ":", "float", ",", "cnn_hidden_num_channels", ":", "int", ",", "input_padding_idx", ":", "int", ",", "target_pad_idx", ":", "int", ",", "\n", "target_eos_idx", ":", "int", ",", "output_directory", ":", "str", ",", "conditional_attention", ":", "bool", ",", "auxiliary_task", ":", "bool", ",", "\n", "simple_situation_representation", ":", "bool", ",", "attention_type", ":", "str", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "simple_situation_representation", "=", "simple_situation_representation", "\n", "if", "not", "simple_situation_representation", ":", "\n", "            ", "logger", ".", "warning", "(", "\"DownSamplingConvolutionalNet not correctly implemented. Update or set \"", "\n", "\"--simple_situation_representation\"", ")", "\n", "self", ".", "downsample_image", "=", "DownSamplingConvolutionalNet", "(", "num_channels", "=", "num_cnn_channels", ",", "\n", "num_conv_channels", "=", "cnn_hidden_num_channels", ",", "\n", "dropout_probability", "=", "cnn_dropout_p", ")", "\n", "cnn_input_channels", "=", "cnn_hidden_num_channels", "\n", "", "else", ":", "\n", "            ", "cnn_input_channels", "=", "num_cnn_channels", "\n", "# Input: [batch_size, image_width, image_width, num_channels]", "\n", "# Output: [batch_size, image_width * image_width, num_conv_channels * 3]", "\n", "", "self", ".", "situation_encoder", "=", "ConvolutionalNet", "(", "num_channels", "=", "cnn_input_channels", ",", "\n", "cnn_kernel_size", "=", "cnn_kernel_size", ",", "\n", "num_conv_channels", "=", "cnn_hidden_num_channels", ",", "\n", "dropout_probability", "=", "cnn_dropout_p", ")", "\n", "# Attention over the output features of the ConvolutionalNet.", "\n", "# Input: [bsz, 1, decoder_hidden_size], [bsz, image_width * image_width, cnn_hidden_num_channels * 3]", "\n", "# Output: [bsz, 1, decoder_hidden_size], [bsz, 1, image_width * image_width]", "\n", "self", ".", "visual_attention", "=", "Attention", "(", "key_size", "=", "cnn_hidden_num_channels", "*", "3", ",", "query_size", "=", "decoder_hidden_size", ",", "\n", "hidden_size", "=", "decoder_hidden_size", ")", "\n", "\n", "self", ".", "auxiliary_task", "=", "auxiliary_task", "\n", "if", "auxiliary_task", ":", "\n", "            ", "self", ".", "auxiliary_loss_criterion", "=", "nn", ".", "NLLLoss", "(", ")", "\n", "\n", "# Input: [batch_size, max_input_length]", "\n", "# Output: [batch_size, hidden_size], [batch_size, max_input_length, hidden_size]", "\n", "", "self", ".", "encoder", "=", "EncoderRNN", "(", "input_size", "=", "input_vocabulary_size", ",", "\n", "embedding_dim", "=", "embedding_dimension", ",", "\n", "rnn_input_size", "=", "embedding_dimension", ",", "\n", "hidden_size", "=", "encoder_hidden_size", ",", "num_layers", "=", "num_encoder_layers", ",", "\n", "dropout_probability", "=", "encoder_dropout_p", ",", "bidirectional", "=", "encoder_bidirectional", ",", "\n", "padding_idx", "=", "input_padding_idx", ")", "\n", "# Used to project the final encoder state to the decoder hidden state such that it can be initialized with it.", "\n", "self", ".", "enc_hidden_to_dec_hidden", "=", "nn", ".", "Linear", "(", "encoder_hidden_size", ",", "decoder_hidden_size", ")", "\n", "self", ".", "textual_attention", "=", "Attention", "(", "key_size", "=", "encoder_hidden_size", ",", "query_size", "=", "decoder_hidden_size", ",", "\n", "hidden_size", "=", "decoder_hidden_size", ")", "\n", "\n", "# Input: [batch_size, max_target_length], initial hidden: ([batch_size, hidden_size], [batch_size, hidden_size])", "\n", "# Input for attention: [batch_size, max_input_length, hidden_size],", "\n", "#                      [batch_size, image_width * image_width, hidden_size]", "\n", "# Output: [max_target_length, batch_size, target_vocabulary_size]", "\n", "self", ".", "attention_type", "=", "attention_type", "\n", "if", "attention_type", "==", "\"bahdanau\"", ":", "\n", "            ", "self", ".", "attention_decoder", "=", "BahdanauAttentionDecoderRNN", "(", "hidden_size", "=", "decoder_hidden_size", ",", "\n", "output_size", "=", "target_vocabulary_size", ",", "\n", "num_layers", "=", "num_decoder_layers", ",", "\n", "dropout_probability", "=", "decoder_dropout_p", ",", "\n", "padding_idx", "=", "target_pad_idx", ",", "\n", "textual_attention", "=", "self", ".", "textual_attention", ",", "\n", "visual_attention", "=", "self", ".", "visual_attention", ",", "\n", "conditional_attention", "=", "conditional_attention", ")", "\n", "", "elif", "attention_type", "==", "\"luong\"", ":", "\n", "            ", "logger", ".", "warning", "(", "\"Luong attention not correctly implemented.\"", ")", "\n", "self", ".", "attention_decoder", "=", "LuongAttentionDecoderRNN", "(", "hidden_size", "=", "decoder_hidden_size", ",", "\n", "output_size", "=", "target_vocabulary_size", ",", "\n", "num_layers", "=", "num_decoder_layers", ",", "\n", "dropout_probability", "=", "decoder_dropout_p", ",", "\n", "conditional_attention", "=", "conditional_attention", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown attention type {} specified.\"", ".", "format", "(", "attention_type", ")", ")", "\n", "\n", "", "self", ".", "target_eos_idx", "=", "target_eos_idx", "\n", "self", ".", "target_pad_idx", "=", "target_pad_idx", "\n", "self", ".", "loss_criterion", "=", "nn", ".", "NLLLoss", "(", "ignore_index", "=", "target_pad_idx", ")", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "output_directory", "=", "output_directory", "\n", "self", ".", "trained_iterations", "=", "0", "\n", "self", ".", "best_iteration", "=", "0", "\n", "self", ".", "best_exact_match", "=", "0", "\n", "self", ".", "best_accuracy", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.model.Model.remove_start_of_sequence": [[108, 116], ["input_tensor.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().unsqueeze", "torch.zeros().unsqueeze", "torch.zeros().unsqueeze", "torch.zeros().unsqueeze", "torch.zeros().unsqueeze", "torch.zeros().unsqueeze", "torch.zeros().unsqueeze", "torch.zeros().unsqueeze", "torch.zeros().unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.size"], ["", "@", "staticmethod", "\n", "def", "remove_start_of_sequence", "(", "input_tensor", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"Get rid of SOS-tokens in targets batch and append a padding token to each example in the batch.\"\"\"", "\n", "batch_size", ",", "max_time", "=", "input_tensor", ".", "size", "(", ")", "\n", "input_tensor", "=", "input_tensor", "[", ":", ",", "1", ":", "]", "\n", "output_tensor", "=", "torch", ".", "cat", "(", "[", "input_tensor", ",", "torch", ".", "zeros", "(", "batch_size", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "long", ")", ".", "unsqueeze", "(", "\n", "dim", "=", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "return", "output_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.model.Model.get_metrics": [[117, 138], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.Model.remove_start_of_sequence", "mask.sum().data.item", "torch.eq().long", "torch.eq().long", "torch.eq().long", "torch.eq().long", "torch.eq().long", "torch.eq().long", "torch.eq().long", "torch.eq().long", "torch.eq().long", "match_targets.sum", "mask.sum", "mask.sum.size", "match_targets.sum().data.item", "target_scores.max", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "mask.sum", "match_targets.sum"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.model.Model.remove_start_of_sequence", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.size"], ["", "def", "get_metrics", "(", "self", ",", "target_scores", ":", "torch", ".", "Tensor", ",", "targets", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "float", ",", "float", "]", ":", "\n", "        ", "\"\"\"\n        :param target_scores: probabilities over target vocabulary outputted by the model, of size\n                              [batch_size, max_target_length, target_vocab_size]\n        :param targets:  ground-truth targets of size [batch_size, max_target_length]\n        :return: scalar float of accuracy averaged over sequence length and batch size.\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "targets", "=", "self", ".", "remove_start_of_sequence", "(", "targets", ")", "\n", "mask", "=", "(", "targets", "!=", "self", ".", "target_pad_idx", ")", ".", "long", "(", ")", "\n", "total", "=", "mask", ".", "sum", "(", ")", ".", "data", ".", "item", "(", ")", "\n", "predicted_targets", "=", "target_scores", ".", "max", "(", "dim", "=", "2", ")", "[", "1", "]", "\n", "equal_targets", "=", "torch", ".", "eq", "(", "targets", ".", "data", ",", "predicted_targets", ".", "data", ")", ".", "long", "(", ")", "\n", "match_targets", "=", "(", "equal_targets", "*", "mask", ")", "\n", "match_sum_per_example", "=", "match_targets", ".", "sum", "(", "dim", "=", "1", ")", "\n", "expected_sum_per_example", "=", "mask", ".", "sum", "(", "dim", "=", "1", ")", "\n", "batch_size", "=", "expected_sum_per_example", ".", "size", "(", "0", ")", "\n", "exact_match", "=", "100.", "*", "(", "match_sum_per_example", "==", "expected_sum_per_example", ")", ".", "sum", "(", ")", ".", "data", ".", "item", "(", ")", "/", "batch_size", "\n", "match_targets_sum", "=", "match_targets", ".", "sum", "(", ")", ".", "data", ".", "item", "(", ")", "\n", "accuracy", "=", "100.", "*", "match_targets_sum", "/", "total", "\n", "", "return", "accuracy", ",", "exact_match", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.model.Model.get_auxiliary_accuracy": [[139, 146], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.eq().long().sum().data.item", "torch.eq().long().sum().data.item", "torch.eq().long().sum().data.item", "torch.eq().long().sum().data.item", "torch.eq().long().sum().data.item", "torch.eq().long().sum().data.item", "torch.eq().long().sum().data.item", "torch.eq().long().sum().data.item", "torch.eq().long().sum().data.item", "target_scores.max", "len", "torch.eq().long().sum", "torch.eq().long().sum", "torch.eq().long().sum", "torch.eq().long().sum", "torch.eq().long().sum", "torch.eq().long().sum", "torch.eq().long().sum", "torch.eq().long().sum", "torch.eq().long().sum", "torch.eq().long", "torch.eq().long", "torch.eq().long", "torch.eq().long", "torch.eq().long", "torch.eq().long", "torch.eq().long", "torch.eq().long", "torch.eq().long", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_auxiliary_accuracy", "(", "target_scores", ":", "torch", ".", "Tensor", ",", "targets", ":", "torch", ".", "Tensor", ")", "->", "float", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "predicted_targets", "=", "target_scores", ".", "max", "(", "dim", "=", "1", ")", "[", "1", "]", "\n", "equal_targets", "=", "torch", ".", "eq", "(", "targets", ".", "data", ",", "predicted_targets", ".", "data", ")", ".", "long", "(", ")", ".", "sum", "(", ")", ".", "data", ".", "item", "(", ")", "\n", "accuracy", "=", "100.", "*", "equal_targets", "/", "len", "(", "targets", ")", "\n", "", "return", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.model.Model.get_loss": [[147, 161], ["model.Model.remove_start_of_sequence", "target_scores.size", "target_scores.reshape", "model.Model.loss_criterion", "model.Model.view"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.model.Model.remove_start_of_sequence", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.size"], ["", "def", "get_loss", "(", "self", ",", "target_scores", ":", "torch", ".", "Tensor", ",", "targets", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        :param target_scores: probabilities over target vocabulary outputted by the model, of size\n                              [batch_size, max_target_length, target_vocab_size]\n        :param targets: ground-truth targets of size [batch_size, max_target_length]\n        :return: scalar negative log-likelihood loss averaged over the sequence length and batch size.\n        \"\"\"", "\n", "targets", "=", "self", ".", "remove_start_of_sequence", "(", "targets", ")", "\n", "\n", "# Calculate the loss.", "\n", "_", ",", "_", ",", "vocabulary_size", "=", "target_scores", ".", "size", "(", ")", "\n", "target_scores_2d", "=", "target_scores", ".", "reshape", "(", "-", "1", ",", "vocabulary_size", ")", "\n", "loss", "=", "self", ".", "loss_criterion", "(", "target_scores_2d", ",", "targets", ".", "view", "(", "-", "1", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.model.Model.get_auxiliary_loss": [[162, 165], ["model.Model.auxiliary_loss_criterion", "target_target_positions.view"], "methods", ["None"], ["", "def", "get_auxiliary_loss", "(", "self", ",", "auxiliary_scores_target", ":", "torch", ".", "Tensor", ",", "target_target_positions", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "target_loss", "=", "self", ".", "auxiliary_loss_criterion", "(", "auxiliary_scores_target", ",", "target_target_positions", ".", "view", "(", "-", "1", ")", ")", "\n", "return", "target_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.model.Model.auxiliary_task_forward": [[166, 171], ["torch.log_softmax.size", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.size"], ["", "def", "auxiliary_task_forward", "(", "self", ",", "output_scores_target_pos", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "assert", "self", ".", "auxiliary_task", ",", "\"Please set auxiliary_task to True if using it.\"", "\n", "batch_size", ",", "_", "=", "output_scores_target_pos", ".", "size", "(", ")", "\n", "output_scores_target_pos", "=", "F", ".", "log_softmax", "(", "output_scores_target_pos", ",", "-", "1", ")", "\n", "return", "output_scores_target_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.model.Model.encode_input": [[172, 180], ["model.Model.situation_encoder", "model.Model.encoder", "model.Model.downsample_image"], "methods", ["None"], ["", "def", "encode_input", "(", "self", ",", "commands_input", ":", "torch", ".", "LongTensor", ",", "commands_lengths", ":", "List", "[", "int", "]", ",", "\n", "situations_input", ":", "torch", ".", "Tensor", ")", "->", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"Pass the input commands through an RNN encoder and the situation input through a CNN encoder.\"\"\"", "\n", "if", "not", "self", ".", "simple_situation_representation", ":", "\n", "            ", "situations_input", "=", "self", ".", "downsample_image", "(", "situations_input", ")", "\n", "", "encoded_image", "=", "self", ".", "situation_encoder", "(", "situations_input", ")", "\n", "hidden", ",", "encoder_outputs", "=", "self", ".", "encoder", "(", "commands_input", ",", "commands_lengths", ")", "\n", "return", "{", "\"encoded_situations\"", ":", "encoded_image", ",", "\"encoded_commands\"", ":", "encoder_outputs", ",", "\"hidden_states\"", ":", "hidden", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.model.Model.decode_input": [[181, 189], ["model.Model.attention_decoder.forward_step"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.seq2seq_model.BahdanauAttentionDecoderRNN.forward_step"], ["", "def", "decode_input", "(", "self", ",", "target_token", ":", "torch", ".", "LongTensor", ",", "hidden", ":", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ",", "\n", "encoder_outputs", ":", "torch", ".", "Tensor", ",", "input_lengths", ":", "List", "[", "int", "]", ",", "\n", "encoded_situations", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ",", "\n", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"One decoding step based on the previous hidden state of the decoder and the previous target token.\"\"\"", "\n", "return", "self", ".", "attention_decoder", ".", "forward_step", "(", "input_tokens", "=", "target_token", ",", "last_hidden", "=", "hidden", ",", "\n", "encoded_commands", "=", "encoder_outputs", ",", "commands_lengths", "=", "input_lengths", ",", "\n", "encoded_situations", "=", "encoded_situations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.model.Model.decode_input_batched": [[190, 205], ["model.Model.attention_decoder.initialize_hidden", "model.Model.attention_decoder", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "model.Model.tanh", "model.Model.enc_hidden_to_dec_hidden"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.seq2seq_model.BahdanauAttentionDecoderRNN.initialize_hidden"], ["", "def", "decode_input_batched", "(", "self", ",", "target_batch", ":", "torch", ".", "LongTensor", ",", "target_lengths", ":", "List", "[", "int", "]", ",", "\n", "initial_hidden", ":", "torch", ".", "Tensor", ",", "encoded_commands", ":", "torch", ".", "Tensor", ",", "\n", "command_lengths", ":", "List", "[", "int", "]", ",", "encoded_situations", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "\n", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"Decode a batch of input sequences.\"\"\"", "\n", "initial_hidden", "=", "self", ".", "attention_decoder", ".", "initialize_hidden", "(", "\n", "self", ".", "tanh", "(", "self", ".", "enc_hidden_to_dec_hidden", "(", "initial_hidden", ")", ")", ")", "\n", "decoder_output_batched", ",", "_", ",", "context_situation", "=", "self", ".", "attention_decoder", "(", "input_tokens", "=", "target_batch", ",", "\n", "input_lengths", "=", "target_lengths", ",", "\n", "init_hidden", "=", "initial_hidden", ",", "\n", "encoded_commands", "=", "encoded_commands", ",", "\n", "commands_lengths", "=", "command_lengths", ",", "\n", "encoded_situations", "=", "encoded_situations", ")", "\n", "decoder_output_batched", "=", "F", ".", "log_softmax", "(", "decoder_output_batched", ",", "dim", "=", "-", "1", ")", "\n", "return", "decoder_output_batched", ",", "context_situation", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.model.Model.forward": [[206, 220], ["model.Model.encode_input", "model.Model.decode_input_batched", "model.Model.auxiliary_task_forward", "decoder_output.transpose", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.model.Model.encode_input", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.model.Model.decode_input_batched", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.model.Model.auxiliary_task_forward"], ["", "def", "forward", "(", "self", ",", "commands_input", ":", "torch", ".", "LongTensor", ",", "commands_lengths", ":", "List", "[", "int", "]", ",", "situations_input", ":", "torch", ".", "Tensor", ",", "\n", "target_batch", ":", "torch", ".", "LongTensor", ",", "target_lengths", ":", "List", "[", "int", "]", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "encoder_output", "=", "self", ".", "encode_input", "(", "commands_input", "=", "commands_input", ",", "commands_lengths", "=", "commands_lengths", ",", "\n", "situations_input", "=", "situations_input", ")", "\n", "decoder_output", ",", "context_situation", "=", "self", ".", "decode_input_batched", "(", "\n", "target_batch", "=", "target_batch", ",", "target_lengths", "=", "target_lengths", ",", "initial_hidden", "=", "encoder_output", "[", "\"hidden_states\"", "]", ",", "\n", "encoded_commands", "=", "encoder_output", "[", "\"encoded_commands\"", "]", "[", "\"encoder_outputs\"", "]", ",", "command_lengths", "=", "commands_lengths", ",", "\n", "encoded_situations", "=", "encoder_output", "[", "\"encoded_situations\"", "]", ")", "\n", "if", "self", ".", "auxiliary_task", ":", "\n", "            ", "target_position_scores", "=", "self", ".", "auxiliary_task_forward", "(", "context_situation", ")", "\n", "", "else", ":", "\n", "            ", "target_position_scores", "=", "torch", ".", "zeros", "(", "1", ")", ",", "torch", ".", "zeros", "(", "1", ")", "\n", "", "return", "(", "decoder_output", ".", "transpose", "(", "0", ",", "1", ")", ",", "# [batch_size, max_target_seq_length, target_vocabulary_size]", "\n", "target_position_scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.model.Model.update_state": [[221, 227], ["None"], "methods", ["None"], ["", "def", "update_state", "(", "self", ",", "is_best", ":", "bool", ",", "accuracy", "=", "None", ",", "exact_match", "=", "None", ")", "->", "{", "}", ":", "\n", "        ", "self", ".", "trained_iterations", "+=", "1", "\n", "if", "is_best", ":", "\n", "            ", "self", ".", "best_exact_match", "=", "exact_match", "\n", "self", ".", "best_accuracy", "=", "accuracy", "\n", "self", ".", "best_iteration", "=", "self", ".", "trained_iterations", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.model.Model.load_model": [[228, 236], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "model.Model.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.load", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.load", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.load", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.load", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.load", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.load", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.load", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.load", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.load"], ["", "", "def", "load_model", "(", "self", ",", "path_to_checkpoint", ":", "str", ")", "->", "dict", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "path_to_checkpoint", ")", "\n", "self", ".", "trained_iterations", "=", "checkpoint", "[", "\"iteration\"", "]", "\n", "self", ".", "best_iteration", "=", "checkpoint", "[", "\"best_iteration\"", "]", "\n", "self", ".", "load_state_dict", "(", "checkpoint", "[", "\"state_dict\"", "]", ")", "\n", "self", ".", "best_exact_match", "=", "checkpoint", "[", "\"best_exact_match\"", "]", "\n", "self", ".", "best_accuracy", "=", "checkpoint", "[", "\"best_accuracy\"", "]", "\n", "return", "checkpoint", "[", "\"optimizer_state_dict\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.model.Model.get_current_state": [[237, 244], ["model.Model.state_dict"], "methods", ["None"], ["", "def", "get_current_state", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "\"iteration\"", ":", "self", ".", "trained_iterations", ",", "\n", "\"state_dict\"", ":", "self", ".", "state_dict", "(", ")", ",", "\n", "\"best_iteration\"", ":", "self", ".", "best_iteration", ",", "\n", "\"best_accuracy\"", ":", "self", ".", "best_accuracy", ",", "\n", "\"best_exact_match\"", ":", "self", ".", "best_exact_match", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.model.Model.save_checkpoint": [[246, 262], ["os.path.join", "model.Model.get_current_state", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "shutil.copyfile"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.model.Model.get_current_state", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.save", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.save", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.save", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.save", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.save", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.save", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.save", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.save", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.save"], ["", "def", "save_checkpoint", "(", "self", ",", "file_name", ":", "str", ",", "is_best", ":", "bool", ",", "optimizer_state_dict", ":", "dict", ")", "->", "str", ":", "\n", "        ", "\"\"\"\n\n        :param file_name: filename to save checkpoint in.\n        :param is_best: boolean describing whether or not the current state is the best the model has ever been.\n        :param optimizer_state_dict: state of the optimizer.\n        :return: str to path where the model is saved.\n        \"\"\"", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_directory", ",", "file_name", ")", "\n", "state", "=", "self", ".", "get_current_state", "(", ")", "\n", "state", "[", "\"optimizer_state_dict\"", "]", "=", "optimizer_state_dict", "\n", "torch", ".", "save", "(", "state", ",", "path", ")", "\n", "if", "is_best", ":", "\n", "            ", "best_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_directory", ",", "'model_best.pth.tar'", ")", "\n", "shutil", ".", "copyfile", "(", "path", ",", "best_path", ")", "\n", "", "return", "path", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.helpers.sequence_mask": [[11, 33], ["sequence_lengths.size", "torch.arange().long().to", "torch.arange().long().to.unsqueeze().expand", "sequence_lengths.unsqueeze().expand_as", "sequence_lengths.data.max", "torch.arange().long", "torch.arange().long().to.unsqueeze", "sequence_lengths.unsqueeze", "torch.arange"], "function", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.size"], ["def", "sequence_mask", "(", "sequence_lengths", ":", "torch", ".", "LongTensor", ",", "max_len", "=", "None", ")", "->", "torch", ".", "tensor", ":", "\n", "    ", "\"\"\"\n    Create a sequence mask that masks out all indices larger than some sequence length as defined by\n    sequence_lengths entries.\n\n    :param sequence_lengths: [batch_size] sequence lengths per example in batch\n    :param max_len: int defining the maximum sequence length in the batch\n    :return: [batch_size, max_len] boolean mask\n    \"\"\"", "\n", "if", "max_len", "is", "None", ":", "\n", "        ", "max_len", "=", "sequence_lengths", ".", "data", ".", "max", "(", ")", "\n", "", "batch_size", "=", "sequence_lengths", ".", "size", "(", "0", ")", "\n", "sequence_range", "=", "torch", ".", "arange", "(", "0", ",", "max_len", ")", ".", "long", "(", ")", ".", "to", "(", "device", "=", "device", ")", "\n", "\n", "# [batch_size, max_len]", "\n", "sequence_range_expand", "=", "sequence_range", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "batch_size", ",", "max_len", ")", "\n", "\n", "# [batch_size, max_len]", "\n", "seq_length_expand", "=", "(", "sequence_lengths", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "sequence_range_expand", ")", ")", "\n", "\n", "# [batch_size, max_len](boolean array of which elements to include)", "\n", "return", "sequence_range_expand", "<", "seq_length_expand", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.helpers.log_parameters": [[35, 42], ["filter", "sum", "logger.info", "model.named_parameters", "model.parameters", "numpy.prod", "logger.info", "p.size", "list", "p.size"], "function", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.size", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.size"], ["", "def", "log_parameters", "(", "model", ":", "torch", ".", "nn", ".", "Module", ")", "->", "{", "}", ":", "\n", "    ", "model_parameters", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", "\n", "n_params", "=", "sum", "(", "[", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "model_parameters", "]", ")", "\n", "logger", ".", "info", "(", "\"Total parameters: %d\"", "%", "n_params", ")", "\n", "for", "name", ",", "p", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "p", ".", "requires_grad", ":", "\n", "            ", "logger", ".", "info", "(", "\"%s : %s\"", "%", "(", "name", ",", "list", "(", "p", ".", "size", "(", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.helpers.sequence_accuracy": [[44, 65], ["prediction.copy.copy", "target.copy.copy", "enumerate", "len", "len", "prediction.copy.extend", "len", "len", "target.copy.extend", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.copy", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.copy"], ["", "", "", "def", "sequence_accuracy", "(", "prediction", ":", "List", "[", "int", "]", ",", "target", ":", "List", "[", "int", "]", ")", "->", "float", ":", "\n", "    ", "correct", "=", "0", "\n", "total", "=", "0", "\n", "prediction", "=", "prediction", ".", "copy", "(", ")", "\n", "target", "=", "target", ".", "copy", "(", ")", "\n", "if", "len", "(", "prediction", ")", "<", "len", "(", "target", ")", ":", "\n", "        ", "difference", "=", "len", "(", "target", ")", "-", "len", "(", "prediction", ")", "\n", "prediction", ".", "extend", "(", "[", "0", "]", "*", "difference", ")", "\n", "", "if", "len", "(", "target", ")", "<", "len", "(", "prediction", ")", ":", "\n", "        ", "difference", "=", "len", "(", "prediction", ")", "-", "len", "(", "target", ")", "\n", "target", ".", "extend", "(", "[", "-", "1", "]", "*", "difference", ")", "\n", "", "for", "i", ",", "target_int", "in", "enumerate", "(", "target", ")", ":", "\n", "        ", "if", "i", ">=", "len", "(", "prediction", ")", ":", "\n", "            ", "break", "\n", "", "prediction_int", "=", "prediction", "[", "i", "]", "\n", "if", "prediction_int", "==", "target_int", ":", "\n", "            ", "correct", "+=", "1", "\n", "", "total", "+=", "1", "\n", "", "if", "not", "total", ":", "\n", "        ", "return", "0.", "\n", "", "return", "(", "correct", "/", "total", ")", "*", "100", "\n", "", ""]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.seq2seq_model.EncoderRNN.__init__": [[26, 46], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.LSTM", "torch.LSTM", "torch.LSTM"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.__init__"], ["def", "__init__", "(", "self", ",", "input_size", ":", "int", ",", "embedding_dim", ":", "int", ",", "rnn_input_size", ":", "int", ",", "hidden_size", ":", "int", ",", "num_layers", ":", "int", ",", "\n", "dropout_probability", ":", "float", ",", "bidirectional", ":", "bool", ",", "padding_idx", ":", "int", ")", ":", "\n", "        ", "\"\"\"\n        :param input_size: number of input symbols\n        :param embedding_dim: number of hidden units in RNN encoder, and size of all embeddings\n        :param num_layers: number of hidden layers\n        :param dropout_probability: dropout applied to symbol embeddings and RNNs\n        :param bidirectional: use a bidirectional LSTM instead and sum of the resulting embeddings\n        \"\"\"", "\n", "super", "(", "EncoderRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "embedding_dim", "=", "embedding_dim", "\n", "self", ".", "dropout_probability", "=", "dropout_probability", "\n", "self", ".", "bidirectional", "=", "bidirectional", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "input_size", ",", "embedding_dim", ",", "padding_idx", "=", "padding_idx", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout_probability", ")", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "input_size", "=", "rnn_input_size", ",", "hidden_size", "=", "hidden_size", ",", "num_layers", "=", "num_layers", ",", "\n", "dropout", "=", "dropout_probability", ",", "bidirectional", "=", "bidirectional", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.seq2seq_model.EncoderRNN.forward": [[47, 90], ["seq2seq_model.EncoderRNN.embedding", "seq2seq_model.EncoderRNN.dropout", "len", "max", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "input_embeddings.index_select.index_select.index_select", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "seq2seq_model.EncoderRNN.lstm", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "perm_idx.sort", "torch.sum.index_select", "torch.sum.index_select", "torch.sum.index_select", "torch.sum.index_select", "torch.sum.index_select", "torch.sum.index_select", "input_lengths[].tolist", "input_batch.size", "len", "input_lengths[].tolist.cpu", "torch.sum.view", "torch.sum.view", "torch.sum.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum.view", "torch.sum.view", "torch.sum.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "int"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.size"], ["", "def", "forward", "(", "self", ",", "input_batch", ":", "torch", ".", "LongTensor", ",", "input_lengths", ":", "List", "[", "int", "]", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "dict", "]", ":", "\n", "        ", "\"\"\"\n        :param input_batch: [batch_size, max_length]; batched padded input sequences\n        :param input_lengths: length of each padded input sequence.\n        :return: hidden states for last layer of last time step, the output of the last layer per time step and\n        the sequence lengths per example in the batch.\n        NB: The hidden states in the bidirectional case represent the final hidden state of each directional encoder,\n        meaning the whole sequence in both directions, whereas the output per time step represents different parts of\n        the sequences (0:t for the forward LSTM, t:T for the backward LSTM).\n        \"\"\"", "\n", "assert", "input_batch", ".", "size", "(", "0", ")", "==", "len", "(", "input_lengths", ")", ",", "\"Wrong amount of lengths passed to .forward()\"", "\n", "input_embeddings", "=", "self", ".", "embedding", "(", "input_batch", ")", "# [batch_size, max_length, embedding_dim]", "\n", "input_embeddings", "=", "self", ".", "dropout", "(", "input_embeddings", ")", "# [batch_size, max_length, embedding_dim]", "\n", "\n", "# Sort the sequences by length in descending order.", "\n", "batch_size", "=", "len", "(", "input_lengths", ")", "\n", "max_length", "=", "max", "(", "input_lengths", ")", "\n", "input_lengths", "=", "torch", ".", "tensor", "(", "input_lengths", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "input_lengths", ",", "perm_idx", "=", "torch", ".", "sort", "(", "input_lengths", ",", "descending", "=", "True", ")", "\n", "input_embeddings", "=", "input_embeddings", ".", "index_select", "(", "dim", "=", "0", ",", "index", "=", "perm_idx", ")", "\n", "\n", "# RNN embedding.", "\n", "packed_input", "=", "pack_padded_sequence", "(", "input_embeddings", ",", "input_lengths", ".", "cpu", "(", ")", ",", "batch_first", "=", "True", ")", "\n", "packed_output", ",", "(", "hidden", ",", "cell", ")", "=", "self", ".", "lstm", "(", "packed_input", ")", "\n", "# hidden, cell [num_layers * num_directions, batch_size, embedding_dim]", "\n", "# hidden and cell are unpacked, such that they store the last hidden state for each sequence in the batch.", "\n", "output_per_timestep", ",", "_", "=", "pad_packed_sequence", "(", "\n", "packed_output", ")", "# [max_length, batch_size, hidden_size * num_directions]", "\n", "\n", "# If biLSTM, sum the outputs for each direction", "\n", "if", "self", ".", "bidirectional", ":", "\n", "            ", "output_per_timestep", "=", "output_per_timestep", ".", "view", "(", "int", "(", "max_length", ")", ",", "batch_size", ",", "2", ",", "self", ".", "hidden_size", ")", "\n", "output_per_timestep", "=", "torch", ".", "sum", "(", "output_per_timestep", ",", "2", ")", "# [max_length, batch_size, hidden_size]", "\n", "hidden", "=", "hidden", ".", "view", "(", "self", ".", "num_layers", ",", "2", ",", "batch_size", ",", "self", ".", "hidden_size", ")", "\n", "hidden", "=", "torch", ".", "sum", "(", "hidden", ",", "1", ")", "# [num_layers, batch_size, hidden_size]", "\n", "", "hidden", "=", "hidden", "[", "-", "1", ",", ":", ",", ":", "]", "# [batch_size, hidden_size] (get the last layer)", "\n", "\n", "# Reverse the sorting.", "\n", "_", ",", "unperm_idx", "=", "perm_idx", ".", "sort", "(", "0", ")", "\n", "hidden", "=", "hidden", ".", "index_select", "(", "dim", "=", "0", ",", "index", "=", "unperm_idx", ")", "\n", "output_per_timestep", "=", "output_per_timestep", ".", "index_select", "(", "dim", "=", "1", ",", "index", "=", "unperm_idx", ")", "\n", "input_lengths", "=", "input_lengths", "[", "unperm_idx", "]", ".", "tolist", "(", ")", "\n", "return", "hidden", ",", "{", "\"encoder_outputs\"", ":", "output_per_timestep", ",", "\"sequence_lengths\"", ":", "input_lengths", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.seq2seq_model.EncoderRNN.extra_repr": [[91, 95], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "\"EncoderRNN\\n bidirectional={} \\n num_layers={}\\n hidden_size={}\\n dropout={}\\n \"", "\"n_input_symbols={}\\n\"", ".", "format", "(", "self", ".", "bidirectional", ",", "self", ".", "num_lauers", ",", "self", ".", "hidden_size", ",", "\n", "self", ".", "dropout_probability", ",", "self", ".", "input_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.seq2seq_model.Attention.__init__": [[99, 104], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.__init__"], ["    ", "def", "__init__", "(", "self", ",", "key_size", ":", "int", ",", "query_size", ":", "int", ",", "hidden_size", ":", "int", ")", ":", "\n", "        ", "super", "(", "Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "key_layer", "=", "nn", ".", "Linear", "(", "key_size", ",", "hidden_size", ",", "bias", "=", "False", ")", "\n", "self", ".", "query_layer", "=", "nn", ".", "Linear", "(", "query_size", ",", "hidden_size", ",", "bias", "=", "False", ")", "\n", "self", ".", "energy_layer", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.seq2seq_model.Attention.forward": [[105, 140], ["projected_keys.size", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "seq2seq_model.Attention.query_layer", "seq2seq_model.Attention.energy_layer", "scores.masked_fill.masked_fill.squeeze().unsqueeze", "seq2seq.helpers.sequence_mask", "mask.unsqueeze.unsqueeze.unsqueeze", "scores.masked_fill.masked_fill.masked_fill", "torch.softmax", "torch.softmax", "torch.softmax", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "len", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "float", "scores.masked_fill.masked_fill.squeeze"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.size", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.helpers.sequence_mask"], ["", "def", "forward", "(", "self", ",", "queries", ":", "torch", ".", "Tensor", ",", "projected_keys", ":", "torch", ".", "Tensor", ",", "values", ":", "torch", ".", "Tensor", ",", "\n", "memory_lengths", ":", "List", "[", "int", "]", ")", ":", "\n", "        ", "\"\"\"\n        Key-value memory which takes queries and retrieves weighted combinations of values\n          This version masks out certain memories, so that you can differing numbers of memories per batch.\n\n        :param queries: [batch_size, 1, query_dim]\n        :param projected_keys: [batch_size, num_memory, query_dim]\n        :param values: [batch_size, num_memory, value_dim]\n        :param memory_lengths: [batch_size] actual number of keys in each batch\n        :return:\n            soft_values_retrieval : soft-retrieval of values; [batch_size, 1, value_dim]\n            attention_weights : soft-retrieval of values; [batch_size, 1, n_memory]\n        \"\"\"", "\n", "batch_size", "=", "projected_keys", ".", "size", "(", "0", ")", "\n", "assert", "len", "(", "memory_lengths", ")", "==", "batch_size", "\n", "memory_lengths", "=", "torch", ".", "tensor", "(", "memory_lengths", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "\n", "# Project queries down to the correct dimension.", "\n", "# [bsz, 1, query_dimension] X [bsz, query_dimension, hidden_dim] = [bsz, 1, hidden_dim]", "\n", "queries", "=", "self", ".", "query_layer", "(", "queries", ")", "\n", "\n", "# [bsz, 1, query_dim] X [bsz, query_dim, num_memory] = [bsz, num_memory, 1]", "\n", "scores", "=", "self", ".", "energy_layer", "(", "torch", ".", "tanh", "(", "queries", "+", "projected_keys", ")", ")", "\n", "scores", "=", "scores", ".", "squeeze", "(", "2", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "# Mask out keys that are on a padding location.encoded_commands", "\n", "mask", "=", "sequence_mask", "(", "memory_lengths", ")", "# [batch_size, num_memory]", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", "# [batch_size, 1, num_memory]", "\n", "scores", "=", "scores", ".", "masked_fill", "(", "mask", "==", "0", ",", "float", "(", "'-inf'", ")", ")", "# fill with large negative numbers", "\n", "attention_weights", "=", "F", ".", "softmax", "(", "scores", ",", "dim", "=", "2", ")", "# [batch_size, 1, num_memory]", "\n", "\n", "# [bsz, 1, num_memory] X\u00a0[bsz, num_memory, value_dim] = [bsz, 1, value_dim]", "\n", "soft_values_retrieval", "=", "torch", ".", "bmm", "(", "attention_weights", ",", "values", ")", "\n", "return", "soft_values_retrieval", ",", "attention_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.seq2seq_model.LuongAttentionDecoderRNN.__init__": [[145, 168], ["torch.Module.__init__", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.LSTM", "torch.LSTM", "torch.LSTM", "seq2seq_model.Attention", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.__init__"], ["def", "__init__", "(", "self", ",", "hidden_size", ":", "int", ",", "output_size", ":", "int", ",", "num_layers", ":", "int", ",", "dropout_probability", "=", "0.1", ",", "\n", "conditional_attention", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        :param hidden_size: number of hidden units in RNN, and embedding size for output symbols\n        :param output_size: number of output symbols\n        :param num_layers: number of hidden layers\n        :param dropout_probability: dropout applied to symbol embeddings and RNNs\n        \"\"\"", "\n", "super", "(", "LuongAttentionDecoderRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "conditional_attention", "=", "conditional_attention", "\n", "if", "self", ".", "conditional_attention", ":", "\n", "            ", "self", ".", "queries_to_keys", "=", "nn", ".", "Linear", "(", "hidden_size", "*", "2", ",", "hidden_size", ")", "\n", "", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "dropout_probability", "=", "dropout_probability", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "output_size", ",", "hidden_size", ",", "padding_idx", "=", "0", ")", "# TODO: change", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout_probability", ")", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "hidden_size", ",", "hidden_size", ",", "num_layers", "=", "num_layers", ",", "dropout", "=", "dropout_probability", ")", "\n", "self", ".", "attention", "=", "Attention", "(", ")", "\n", "self", ".", "hidden_context_to_hidden", "=", "nn", ".", "Linear", "(", "hidden_size", "*", "3", ",", "hidden_size", ")", "\n", "self", ".", "hidden_to_output", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "output_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.seq2seq_model.LuongAttentionDecoderRNN.forward_step": [[169, 232], ["seq2seq_model.LuongAttentionDecoderRNN.embedding", "seq2seq_model.LuongAttentionDecoderRNN.dropout", "embedded_input.unsqueeze.unsqueeze.unsqueeze", "seq2seq_model.LuongAttentionDecoderRNN.lstm", "seq2seq_model.LuongAttentionDecoderRNN.attention.forward_masked", "encoded_situations.size", "seq2seq_model.LuongAttentionDecoderRNN.attention.forward_masked", "lstm_output.squeeze.squeeze.squeeze", "context_command.squeeze.squeeze.squeeze", "context_situation.squeeze.squeeze.squeeze", "attention_weights_commands.squeeze.squeeze.squeeze", "attention_weights_situations.squeeze.squeeze.squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "seq2seq_model.LuongAttentionDecoderRNN.tanh", "seq2seq_model.LuongAttentionDecoderRNN.hidden_to_output", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "seq2seq_model.LuongAttentionDecoderRNN.queries_to_keys", "seq2seq_model.LuongAttentionDecoderRNN.tanh", "lstm_output.squeeze.squeeze.transpose", "seq2seq_model.LuongAttentionDecoderRNN.hidden_context_to_hidden", "attention_weights_situations.squeeze.squeeze.squeeze", "lstm_output.squeeze.squeeze.transpose", "encoded_commands.transpose", "encoded_commands.transpose", "range", "lstm_output.squeeze.squeeze.transpose"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.size"], ["", "def", "forward_step", "(", "self", ",", "input_tokens", ":", "torch", ".", "LongTensor", ",", "last_hidden", ":", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ",", "\n", "encoded_commands", ":", "torch", ".", "Tensor", ",", "commands_lengths", ":", "List", "[", "int", "]", ",", "\n", "encoded_situations", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ",", "\n", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Run batch decoder forward for a single time step.\n         Each decoder step considers all of the encoder_outputs through attention.\n             Attention retrieval is based on decoder hidden state (not cell state)\n\n        :param input_tokens: one time step inputs tokens of length batch_size\n        :param last_hidden: previous decoder state, which is pair of tensors [num_layers, batch_size, hidden_size]\n        (pair for hidden and cell)\n        :param encoded_commands: all encoder outputs, [max_input_length, batch_size, hidden_size]  # TODO: embedding dim is hidden dim\n        :param commands_lengths: length of each padded input sequence that were passed to the encoder.\n        :param encoded_situations: the situation encoder outputs, [image_dimension * image_dimension, batch_size,\n         hidden_size]\n        :return: output : un-normalized output probabilities, [batch_size, output_size]\n          hidden : current decoder state, which is a pair of tensors [num_layers, batch_size, hidden_size]\n           (pair for hidden and cell)\n          attention_weights : attention weights, [batch_size, 1, max_input_length]\n        \"\"\"", "\n", "\n", "# Embed each input symbol", "\n", "embedded_input", "=", "self", ".", "embedding", "(", "input_tokens", ")", "# [batch_size, hidden_size]", "\n", "embedded_input", "=", "self", ".", "dropout", "(", "embedded_input", ")", "\n", "embedded_input", "=", "embedded_input", ".", "unsqueeze", "(", "0", ")", "# [1, batch_size, hidden_size]", "\n", "\n", "lstm_output", ",", "hidden", "=", "self", ".", "lstm", "(", "embedded_input", ",", "last_hidden", ")", "\n", "# lstm_output: [1, batch_size, hidden_size]", "\n", "# hidden: tuple of each [num_layers, batch_size, hidden_size] (pair for hidden and cell)", "\n", "context_command", ",", "attention_weights_commands", "=", "self", ".", "attention", ".", "forward_masked", "(", "\n", "queries", "=", "lstm_output", ".", "transpose", "(", "0", ",", "1", ")", ",", "keys", "=", "encoded_commands", ".", "transpose", "(", "0", ",", "1", ")", ",", "\n", "values", "=", "encoded_commands", ".", "transpose", "(", "0", ",", "1", ")", ",", "memory_lengths", "=", "commands_lengths", ")", "\n", "batch_size", ",", "image_num_memory", ",", "_", "=", "encoded_situations", ".", "size", "(", ")", "\n", "situation_lengths", "=", "[", "image_num_memory", "for", "_", "in", "range", "(", "batch_size", ")", "]", "\n", "\n", "if", "self", ".", "conditional_attention", ":", "\n", "            ", "queries", "=", "torch", ".", "cat", "(", "[", "lstm_output", ".", "transpose", "(", "0", ",", "1", ")", ",", "context_command", "]", ",", "dim", "=", "-", "1", ")", "\n", "queries", "=", "self", ".", "queries_to_keys", "(", "queries", ")", "\n", "queries", "=", "self", ".", "tanh", "(", "queries", ")", "\n", "", "else", ":", "\n", "            ", "queries", "=", "lstm_output", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "", "context_situation", ",", "attention_weights_situations", "=", "self", ".", "attention", ".", "forward_masked", "(", "\n", "queries", "=", "queries", ",", "keys", "=", "encoded_situations", ",", "\n", "values", "=", "encoded_situations", ",", "memory_lengths", "=", "situation_lengths", ")", "\n", "# context : [batch_size, 1, hidden_size]", "\n", "# attention_weights : [batch_size, 1, max_input_length]", "\n", "\n", "# Concatenate the context vector and RNN hidden state, and map to an output", "\n", "lstm_output", "=", "lstm_output", ".", "squeeze", "(", "0", ")", "# [batch_size, hidden_size]", "\n", "context_command", "=", "context_command", ".", "squeeze", "(", "1", ")", "# [batch_size, hidden_size]", "\n", "context_situation", "=", "context_situation", ".", "squeeze", "(", "1", ")", "# [batch_size, hidden_size]", "\n", "attention_weights_commands", "=", "attention_weights_commands", ".", "squeeze", "(", "1", ")", "# [batch_size, max_input_length]", "\n", "attention_weights_situations", "=", "attention_weights_situations", ".", "squeeze", "(", "1", ")", "# [batch_size, im_dim * im_dim]", "\n", "concat_input", "=", "torch", ".", "cat", "(", "[", "lstm_output", ",", "\n", "context_command", ",", "\n", "context_situation", "]", ",", "dim", "=", "1", ")", "# [batch_size, hidden_size*3]", "\n", "concat_output", "=", "self", ".", "tanh", "(", "self", ".", "hidden_context_to_hidden", "(", "concat_input", ")", ")", "# [batch_size, hidden_size]", "\n", "# concat_output = self.dropout(concat_output)", "\n", "output", "=", "self", ".", "hidden_to_output", "(", "concat_output", ")", "# [batch_size, output_size]", "\n", "return", "(", "output", ",", "hidden", ",", "attention_weights_situations", ".", "squeeze", "(", "dim", "=", "1", ")", ",", "attention_weights_commands", ",", "\n", "attention_weights_situations", ")", "\n", "# output : [un-normalized probabilities] [batch_size, output_size]", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.seq2seq_model.LuongAttentionDecoderRNN.forward": [[236, 309], ["seq2seq_model.LuongAttentionDecoderRNN.embedding", "seq2seq_model.LuongAttentionDecoderRNN.dropout", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "input_embedded.index_select.index_select.index_select", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "seq2seq_model.LuongAttentionDecoderRNN.lstm", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "perm_idx.sort", "lstm_output.index_select.index_select.index_select", "input_lengths[].tolist", "seq2seq_model.LuongAttentionDecoderRNN.attention.forward_masked", "encoded_situations.size", "seq2seq_model.LuongAttentionDecoderRNN.attention.forward_masked", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "seq2seq_model.LuongAttentionDecoderRNN.tanh", "seq2seq_model.LuongAttentionDecoderRNN.hidden_to_output", "initial_h.index_select", "initial_c.index_select", "torch.tensor.cpu", "torch.tensor.cpu", "torch.tensor.cpu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "seq2seq_model.LuongAttentionDecoderRNN.queries_to_keys", "seq2seq_model.LuongAttentionDecoderRNN.tanh", "lstm_output.index_select.index_select.transpose", "seq2seq_model.LuongAttentionDecoderRNN.hidden_context_to_hidden", "attention_weights.sum", "lstm_output.index_select.index_select.transpose", "encoded_commands.transpose", "encoded_commands.transpose", "range", "context_commands.transpose", "context_situation.transpose", "lstm_output.index_select.index_select.transpose"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.size"], ["", "def", "forward", "(", "self", ",", "input_tokens", ":", "torch", ".", "LongTensor", ",", "input_lengths", ":", "List", "[", "int", "]", ",", "\n", "init_hidden", ":", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ",", "encoded_commands", ":", "torch", ".", "Tensor", ",", "\n", "commands_lengths", ":", "List", "[", "int", "]", ",", "encoded_situations", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "List", "[", "int", "]", ",", "\n", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Run batch attention decoder forward for a series of steps\n         Each decoder step considers all of the encoder_outputs through attention.\n         Attention retrieval is based on decoder hidden state (not cell state)\n\n        :param input_tokens: [batch_size, max_length];  padded target sequences\n        :param input_lengths: [batch_size] for sequence length of each padded target sequence\n        :param init_hidden: tuple of tensors [num_layers, batch_size, hidden_size] (for hidden and cell)\n        :param encoded_commands: [max_input_length, batch_size, embedding_dim]\n        :param commands_lengths: [batch_size] sequence length of each encoder sequence (without padding)\n        :param encoded_situations: [] TODO\n        :return: output : unnormalized log-score, [max_length, batch_size, output_size]\n          hidden : current decoder state, tuple with each [num_layers, batch_size, hidden_size] (for hidden and cell)\n        \"\"\"", "\n", "input_embedded", "=", "self", ".", "embedding", "(", "input_tokens", ")", "# [batch_size, max_length, embedding_dim]", "\n", "input_embedded", "=", "self", ".", "dropout", "(", "input_embedded", ")", "# [batch_size, max_length, embedding_dim]", "\n", "\n", "# Sort the sequences by length in descending order", "\n", "input_lengths", "=", "torch", ".", "tensor", "(", "input_lengths", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "input_lengths", ",", "perm_idx", "=", "torch", ".", "sort", "(", "input_lengths", ",", "descending", "=", "True", ")", "\n", "input_embedded", "=", "input_embedded", ".", "index_select", "(", "dim", "=", "0", ",", "index", "=", "perm_idx", ")", "\n", "initial_h", ",", "initial_c", "=", "init_hidden", "\n", "init_hidden", "=", "(", "initial_h", ".", "index_select", "(", "dim", "=", "1", ",", "index", "=", "perm_idx", ")", ",", "\n", "initial_c", ".", "index_select", "(", "dim", "=", "1", ",", "index", "=", "perm_idx", ")", ")", "\n", "\n", "# RNN decoder", "\n", "packed_input", "=", "pack_padded_sequence", "(", "input_embedded", ",", "input_lengths", ".", "cpu", "(", ")", ",", "batch_first", "=", "True", ")", "\n", "packed_output", ",", "(", "hidden", ",", "cell", ")", "=", "self", ".", "lstm", "(", "packed_input", ",", "init_hidden", ")", "\n", "# hidden is [num_layers, batch_size, hidden_size] (pair for hidden and cell)", "\n", "lstm_output", ",", "_", "=", "pad_packed_sequence", "(", "packed_output", ")", "# [max_length, batch_size, hidden_size]", "\n", "\n", "# Reverse the sorting", "\n", "_", ",", "unperm_idx", "=", "perm_idx", ".", "sort", "(", "0", ")", "\n", "lstm_output", "=", "lstm_output", ".", "index_select", "(", "dim", "=", "1", ",", "index", "=", "unperm_idx", ")", "# [max_length, batch_size, hidden_size]", "\n", "seq_len", "=", "input_lengths", "[", "unperm_idx", "]", ".", "tolist", "(", ")", "\n", "\n", "# Compute context vector using attention", "\n", "context_commands", ",", "attention_weights", "=", "self", ".", "attention", ".", "forward_masked", "(", "queries", "=", "lstm_output", ".", "transpose", "(", "0", ",", "1", ")", ",", "\n", "keys", "=", "encoded_commands", ".", "transpose", "(", "0", ",", "1", ")", ",", "\n", "values", "=", "encoded_commands", ".", "transpose", "(", "0", ",", "1", ")", ",", "\n", "memory_lengths", "=", "commands_lengths", ")", "\n", "# context_commands = self.dropout(context_commands)", "\n", "\n", "# Compute context vector using attention", "\n", "if", "self", ".", "conditional_attention", ":", "\n", "            ", "queries", "=", "torch", ".", "cat", "(", "[", "lstm_output", ".", "transpose", "(", "0", ",", "1", ")", ",", "context_commands", "]", ",", "dim", "=", "-", "1", ")", "\n", "queries", "=", "self", ".", "queries_to_keys", "(", "queries", ")", "\n", "queries", "=", "self", ".", "tanh", "(", "queries", ")", "\n", "", "else", ":", "\n", "            ", "queries", "=", "lstm_output", ".", "transpose", "(", "0", ",", "1", ")", "\n", "", "batch_size", ",", "image_num_memory", ",", "_", "=", "encoded_situations", ".", "size", "(", ")", "\n", "situation_lengths", "=", "[", "image_num_memory", "for", "_", "in", "range", "(", "batch_size", ")", "]", "\n", "context_situation", ",", "attention_weights", "=", "self", ".", "attention", ".", "forward_masked", "(", "queries", "=", "queries", ",", "\n", "keys", "=", "encoded_situations", ",", "\n", "values", "=", "encoded_situations", ",", "\n", "memory_lengths", "=", "situation_lengths", ")", "\n", "# context_situation = self.dropout(context_situation)", "\n", "\n", "# context: [batch_size, max_length, hidden_size]", "\n", "# attention_weights: [batch_size, max_length, max_input_length]", "\n", "\n", "# Concatenate the context vector and RNN hidden state, and map to an output", "\n", "concat_input", "=", "torch", ".", "cat", "(", "[", "lstm_output", ",", "\n", "context_commands", ".", "transpose", "(", "0", ",", "1", ")", ",", "\n", "context_situation", ".", "transpose", "(", "0", ",", "1", ")", "]", ",", "2", ")", "# [max_length, batch_size, hidden_size*3]", "\n", "concat_output", "=", "self", ".", "tanh", "(", "self", ".", "hidden_context_to_hidden", "(", "concat_input", ")", ")", "# [max_length, batch_size, hidden_size]", "\n", "# concat_output = self.dropout(concat_output)", "\n", "output", "=", "self", ".", "hidden_to_output", "(", "concat_output", ")", "# [max_length, batch_size, output_size]", "\n", "return", "output", ",", "seq_len", ",", "attention_weights", ".", "sum", "(", "dim", "=", "1", ")", "\n", "# output : [unnormalized log-score] [max_length, batch_size, output_size]", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.seq2seq_model.LuongAttentionDecoderRNN.initialize_hidden": [[312, 323], ["encoder_message.expand().contiguous.expand().contiguous.unsqueeze", "encoder_message.expand().contiguous.expand().contiguous.expand().contiguous", "encoder_message.expand().contiguous.expand().contiguous.clone", "encoder_message.expand().contiguous.expand().contiguous.clone", "encoder_message.expand().contiguous.expand().contiguous.expand"], "methods", ["None"], ["", "def", "initialize_hidden", "(", "self", ",", "encoder_message", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Populate the hidden variables with a message from the encoder.\n        All layers, and both the hidden and cell vectors, are filled with the same message.\n        :param encoder_message:  [batch_size, hidden_size] tensor\n        :return: tuple of Tensors representing the hidden and cell state of shape: [num_layers, batch_size, hidden_dim]\n        \"\"\"", "\n", "encoder_message", "=", "encoder_message", ".", "unsqueeze", "(", "0", ")", "# [1, batch_size, hidden_size]", "\n", "encoder_message", "=", "encoder_message", ".", "expand", "(", "self", ".", "num_layers", ",", "-", "1", ",", "\n", "-", "1", ")", ".", "contiguous", "(", ")", "# [num_layers, batch_size, hidden_size]", "\n", "return", "encoder_message", ".", "clone", "(", ")", ",", "encoder_message", ".", "clone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.seq2seq_model.LuongAttentionDecoderRNN.extra_repr": [[324, 327], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "\"AttentionDecoderRNN\\n num_layers={}\\n hidden_size={}\\n dropout={}\\n num_output_symbols={}\\n\"", ".", "format", "(", "\n", "self", ".", "num_layers", ",", "self", ".", "hidden_size", ",", "self", ".", "dropout_probability", ",", "self", ".", "output_size", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.seq2seq_model.BahdanauAttentionDecoderRNN.__init__": [[333, 358], ["torch.Module.__init__", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.__init__"], ["def", "__init__", "(", "self", ",", "hidden_size", ":", "int", ",", "output_size", ":", "int", ",", "num_layers", ":", "int", ",", "textual_attention", ":", "Attention", ",", "\n", "visual_attention", ":", "Attention", ",", "dropout_probability", "=", "0.1", ",", "padding_idx", "=", "0", ",", "\n", "conditional_attention", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        :param hidden_size: number of hidden units in RNN, and embedding size for output symbols\n        :param output_size: number of output symbols\n        :param num_layers: number of hidden layers\n        :param dropout_probability: dropout applied to symbol embeddings and RNNs\n        \"\"\"", "\n", "super", "(", "BahdanauAttentionDecoderRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "conditional_attention", "=", "conditional_attention", "\n", "if", "self", ".", "conditional_attention", ":", "\n", "            ", "self", ".", "queries_to_keys", "=", "nn", ".", "Linear", "(", "hidden_size", "*", "2", ",", "hidden_size", ")", "\n", "", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "dropout_probability", "=", "dropout_probability", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "output_size", ",", "hidden_size", ",", "padding_idx", "=", "padding_idx", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout_probability", ")", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "hidden_size", "*", "3", ",", "hidden_size", ",", "num_layers", "=", "num_layers", ",", "dropout", "=", "dropout_probability", ")", "\n", "self", ".", "textual_attention", "=", "textual_attention", "\n", "self", ".", "visual_attention", "=", "visual_attention", "\n", "self", ".", "output_to_hidden", "=", "nn", ".", "Linear", "(", "hidden_size", "*", "4", ",", "hidden_size", ",", "bias", "=", "False", ")", "\n", "self", ".", "hidden_to_output", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "output_size", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.seq2seq_model.BahdanauAttentionDecoderRNN.forward_step": [[359, 429], ["seq2seq_model.BahdanauAttentionDecoderRNN.embedding", "seq2seq_model.BahdanauAttentionDecoderRNN.dropout", "embedded_input.unsqueeze.unsqueeze.unsqueeze", "seq2seq_model.BahdanauAttentionDecoderRNN.textual_attention", "encoded_situations.size", "seq2seq_model.BahdanauAttentionDecoderRNN.visual_attention", "attention_weights_commands.squeeze.squeeze.squeeze", "attention_weights_situations.squeeze.squeeze.squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "seq2seq_model.BahdanauAttentionDecoderRNN.lstm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "seq2seq_model.BahdanauAttentionDecoderRNN.output_to_hidden", "seq2seq_model.BahdanauAttentionDecoderRNN.hidden_to_output", "output.squeeze.squeeze.squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "seq2seq_model.BahdanauAttentionDecoderRNN.tanh", "last_hidden.transpose", "attention_weights_situations.squeeze.squeeze.squeeze", "last_hidden.transpose", "encoded_commands.transpose", "encoded_commands.transpose", "range", "seq2seq_model.BahdanauAttentionDecoderRNN.queries_to_keys", "context_command.transpose", "context_situation.transpose", "context_command.transpose", "context_situation.transpose", "last_hidden.transpose"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.size"], ["", "def", "forward_step", "(", "self", ",", "input_tokens", ":", "torch", ".", "LongTensor", ",", "last_hidden", ":", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ",", "\n", "encoded_commands", ":", "torch", ".", "Tensor", ",", "commands_lengths", ":", "torch", ".", "Tensor", ",", "\n", "encoded_situations", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ",", "\n", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Run batch decoder forward for a single time step.\n         Each decoder step considers all of the encoder_outputs through attention.\n         Attention retrieval is based on decoder hidden state (not cell state)\n\n        :param input_tokens: one time step inputs tokens of length batch_size\n        :param last_hidden: previous decoder state, which is pair of tensors [num_layers, batch_size, hidden_size]\n        (pair for hidden and cell)\n        :param encoded_commands: all encoder outputs, [max_input_length, batch_size, hidden_size]\n        :param commands_lengths: length of each padded input seqencoded_commandsuence that were passed to the encoder.\n        :param encoded_situations: the situation encoder outputs, [image_dimension * image_dimension, batch_size,\n         hidden_size]\n        :return: output : un-normalized output probabilities, [batch_size, output_size]\n          hidden : current decoder state, which is a pair of tensors [num_layers, batch_size, hidden_size]\n           (pair for hidden and cell)\n          attention_weights : attention weights, [batch_size, 1, max_input_length]\n        \"\"\"", "\n", "last_hidden", ",", "last_cell", "=", "last_hidden", "\n", "\n", "# Embed each input symbol", "\n", "embedded_input", "=", "self", ".", "embedding", "(", "input_tokens", ")", "# [batch_size, hidden_size]", "\n", "embedded_input", "=", "self", ".", "dropout", "(", "embedded_input", ")", "\n", "embedded_input", "=", "embedded_input", ".", "unsqueeze", "(", "0", ")", "# [1, batch_size, hidden_size]", "\n", "\n", "# Bahdanau attention", "\n", "context_command", ",", "attention_weights_commands", "=", "self", ".", "textual_attention", "(", "\n", "queries", "=", "last_hidden", ".", "transpose", "(", "0", ",", "1", ")", ",", "projected_keys", "=", "encoded_commands", ".", "transpose", "(", "0", ",", "1", ")", ",", "\n", "values", "=", "encoded_commands", ".", "transpose", "(", "0", ",", "1", ")", ",", "memory_lengths", "=", "commands_lengths", ")", "\n", "batch_size", ",", "image_num_memory", ",", "_", "=", "encoded_situations", ".", "size", "(", ")", "\n", "situation_lengths", "=", "[", "image_num_memory", "for", "_", "in", "range", "(", "batch_size", ")", "]", "\n", "\n", "if", "self", ".", "conditional_attention", ":", "\n", "            ", "queries", "=", "torch", ".", "cat", "(", "[", "last_hidden", ".", "transpose", "(", "0", ",", "1", ")", ",", "context_command", "]", ",", "dim", "=", "-", "1", ")", "\n", "queries", "=", "self", ".", "tanh", "(", "self", ".", "queries_to_keys", "(", "queries", ")", ")", "\n", "", "else", ":", "\n", "            ", "queries", "=", "last_hidden", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "", "context_situation", ",", "attention_weights_situations", "=", "self", ".", "visual_attention", "(", "\n", "queries", "=", "queries", ",", "projected_keys", "=", "encoded_situations", ",", "\n", "values", "=", "encoded_situations", ",", "memory_lengths", "=", "situation_lengths", ")", "\n", "# context : [batch_size, 1, hidden_size]", "\n", "# attention_weights : [batch_size, 1, max_input_length]", "\n", "\n", "# Concatenate the context vector and RNN hidden state, and map to an output", "\n", "attention_weights_commands", "=", "attention_weights_commands", ".", "squeeze", "(", "1", ")", "# [batch_size, max_input_length]", "\n", "attention_weights_situations", "=", "attention_weights_situations", ".", "squeeze", "(", "1", ")", "# [batch_size, im_dim * im_dim]", "\n", "concat_input", "=", "torch", ".", "cat", "(", "[", "embedded_input", ",", "\n", "context_command", ".", "transpose", "(", "0", ",", "1", ")", ",", "\n", "context_situation", ".", "transpose", "(", "0", ",", "1", ")", "]", ",", "dim", "=", "2", ")", "# [1, batch_size hidden_size*3]", "\n", "\n", "last_hidden", "=", "(", "last_hidden", ",", "last_cell", ")", "\n", "lstm_output", ",", "hidden", "=", "self", ".", "lstm", "(", "concat_input", ",", "last_hidden", ")", "\n", "# lstm_output: [1, batch_size, hidden_size]", "\n", "# hidden: tuple of each [num_layers, batch_size, hidden_size] (pair for hidden and cell)", "\n", "# output = self.hidden_to_output(lstm_output)  # [batch_size, output_size]", "\n", "# output = output.squeeze(dim=0)", "\n", "\n", "# Concatenate all outputs and project to output size.", "\n", "pre_output", "=", "torch", ".", "cat", "(", "[", "embedded_input", ",", "lstm_output", ",", "\n", "context_command", ".", "transpose", "(", "0", ",", "1", ")", ",", "context_situation", ".", "transpose", "(", "0", ",", "1", ")", "]", ",", "dim", "=", "2", ")", "\n", "pre_output", "=", "self", ".", "output_to_hidden", "(", "pre_output", ")", "# [1, batch_size, hidden_size]", "\n", "output", "=", "self", ".", "hidden_to_output", "(", "pre_output", ")", "# [batch_size, output_size]", "\n", "output", "=", "output", ".", "squeeze", "(", "dim", "=", "0", ")", "# [batch_size, output_size]", "\n", "\n", "return", "(", "output", ",", "hidden", ",", "attention_weights_situations", ".", "squeeze", "(", "dim", "=", "1", ")", ",", "attention_weights_commands", ",", "\n", "attention_weights_situations", ")", "\n", "# output : [un-normalized probabilities] [batch_size, output_size]", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.seq2seq_model.BahdanauAttentionDecoderRNN.forward": [[433, 491], ["input_tokens.size", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "input_tokens.index_select", "encoded_commands.index_select.index_select.index_select", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "commands_lengths.index_select.index_select.index_select", "encoded_situations.index_select.index_select.index_select", "seq2seq_model.BahdanauAttentionDecoderRNN.visual_attention.key_layer", "seq2seq_model.BahdanauAttentionDecoderRNN.textual_attention.key_layer", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "perm_idx.sort", "lstm_output.index_select.index_select.index_select", "input_lengths[].tolist", "attention_weights.index_select.index_select.index_select", "initial_h.index_select", "initial_c.index_select", "seq2seq_model.BahdanauAttentionDecoderRNN.forward_step", "all_attention_weights.append", "lstm_output.index_select.index_select.append", "attention_weights.index_select.index_select.sum", "attention_weights_situations.unsqueeze", "output.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.size", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.seq2seq_model.BahdanauAttentionDecoderRNN.forward_step"], ["", "def", "forward", "(", "self", ",", "input_tokens", ":", "torch", ".", "LongTensor", ",", "input_lengths", ":", "List", "[", "int", "]", ",", "\n", "init_hidden", ":", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ",", "encoded_commands", ":", "torch", ".", "Tensor", ",", "\n", "commands_lengths", ":", "List", "[", "int", "]", ",", "encoded_situations", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "List", "[", "int", "]", ",", "\n", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Run batch attention decoder forward for a series of steps\n         Each decoder step considers all of the encoder_outputs through attention.\n         Attention retrieval is based on decoder hidden state (not cell state)\n\n        :param input_tokens: [batch_size, max_length];  padded target sequences\n        :param input_lengths: [batch_size] for sequence length of each padded target sequence\n        :param init_hidden: tuple of tensors [num_layers, batch_size, hidden_size] (for hidden and cell)\n        :param encoded_commands: [max_input_length, batch_size, embedding_dim]\n        :param commands_lengths: [batch_size] sequence length of each encoder sequence (without padding)\n        :param encoded_situations: [batch_size, image_width * image_width, image_features]; encoded image situations.\n        :return: output : unnormalized log-score, [max_length, batch_size, output_size]\n          hidden : current decoder state, tuple with each [num_layers, batch_size, hidden_size] (for hidden and cell)\n        \"\"\"", "\n", "batch_size", ",", "max_time", "=", "input_tokens", ".", "size", "(", ")", "\n", "\n", "# Sort the sequences by length in descending order", "\n", "input_lengths", "=", "torch", ".", "tensor", "(", "input_lengths", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "input_lengths", ",", "perm_idx", "=", "torch", ".", "sort", "(", "input_lengths", ",", "descending", "=", "True", ")", "\n", "input_tokens_sorted", "=", "input_tokens", ".", "index_select", "(", "dim", "=", "0", ",", "index", "=", "perm_idx", ")", "\n", "initial_h", ",", "initial_c", "=", "init_hidden", "\n", "hidden", "=", "(", "initial_h", ".", "index_select", "(", "dim", "=", "1", ",", "index", "=", "perm_idx", ")", ",", "\n", "initial_c", ".", "index_select", "(", "dim", "=", "1", ",", "index", "=", "perm_idx", ")", ")", "\n", "encoded_commands", "=", "encoded_commands", ".", "index_select", "(", "dim", "=", "1", ",", "index", "=", "perm_idx", ")", "\n", "commands_lengths", "=", "torch", ".", "tensor", "(", "commands_lengths", ",", "device", "=", "device", ")", "\n", "commands_lengths", "=", "commands_lengths", ".", "index_select", "(", "dim", "=", "0", ",", "index", "=", "perm_idx", ")", "\n", "encoded_situations", "=", "encoded_situations", ".", "index_select", "(", "dim", "=", "0", ",", "index", "=", "perm_idx", ")", "\n", "\n", "# For efficiency", "\n", "projected_keys_visual", "=", "self", ".", "visual_attention", ".", "key_layer", "(", "\n", "encoded_situations", ")", "# [batch_size, situation_length, dec_hidden_dim]", "\n", "projected_keys_textual", "=", "self", ".", "textual_attention", ".", "key_layer", "(", "\n", "encoded_commands", ")", "# [max_input_length, batch_size, dec_hidden_dim]", "\n", "\n", "all_attention_weights", "=", "[", "]", "\n", "lstm_output", "=", "[", "]", "\n", "for", "time", "in", "range", "(", "max_time", ")", ":", "\n", "            ", "input_token", "=", "input_tokens_sorted", "[", ":", ",", "time", "]", "\n", "(", "output", ",", "hidden", ",", "context_situation", ",", "attention_weights_commands", ",", "\n", "attention_weights_situations", ")", "=", "self", ".", "forward_step", "(", "input_token", ",", "hidden", ",", "projected_keys_textual", ",", "\n", "commands_lengths", ",", "\n", "projected_keys_visual", ")", "\n", "all_attention_weights", ".", "append", "(", "attention_weights_situations", ".", "unsqueeze", "(", "0", ")", ")", "\n", "lstm_output", ".", "append", "(", "output", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "lstm_output", "=", "torch", ".", "cat", "(", "lstm_output", ",", "dim", "=", "0", ")", "# [max_time, batch_size, output_size]", "\n", "attention_weights", "=", "torch", ".", "cat", "(", "all_attention_weights", ",", "dim", "=", "0", ")", "# [max_time, batch_size, situation_dim**2]", "\n", "\n", "# Reverse the sorting", "\n", "_", ",", "unperm_idx", "=", "perm_idx", ".", "sort", "(", "0", ")", "\n", "lstm_output", "=", "lstm_output", ".", "index_select", "(", "dim", "=", "1", ",", "index", "=", "unperm_idx", ")", "# [max_time, batch_size, output_size]", "\n", "seq_len", "=", "input_lengths", "[", "unperm_idx", "]", ".", "tolist", "(", ")", "\n", "attention_weights", "=", "attention_weights", ".", "index_select", "(", "dim", "=", "1", ",", "index", "=", "unperm_idx", ")", "\n", "\n", "return", "lstm_output", ",", "seq_len", ",", "attention_weights", ".", "sum", "(", "dim", "=", "0", ")", "\n", "# output : [unnormalized log-score] [max_length, batch_size, output_size]", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.seq2seq_model.BahdanauAttentionDecoderRNN.initialize_hidden": [[494, 505], ["encoder_message.expand().contiguous.expand().contiguous.unsqueeze", "encoder_message.expand().contiguous.expand().contiguous.expand().contiguous", "encoder_message.expand().contiguous.expand().contiguous.clone", "encoder_message.expand().contiguous.expand().contiguous.clone", "encoder_message.expand().contiguous.expand().contiguous.expand"], "methods", ["None"], ["", "def", "initialize_hidden", "(", "self", ",", "encoder_message", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Populate the hidden variables with a message from the encoder.\n        All layers, and both the hidden and cell vectors, are filled with the same message.\n        :param encoder_message:  [batch_size, hidden_size] tensor\n        :return: tuple of Tensors representing the hidden and cell state of shape: [num_layers, batch_size, hidden_dim]\n        \"\"\"", "\n", "encoder_message", "=", "encoder_message", ".", "unsqueeze", "(", "0", ")", "# [1, batch_size, hidden_size]", "\n", "encoder_message", "=", "encoder_message", ".", "expand", "(", "self", ".", "num_layers", ",", "-", "1", ",", "\n", "-", "1", ")", ".", "contiguous", "(", ")", "# [num_layers, batch_size, hidden_size]", "\n", "return", "encoder_message", ".", "clone", "(", ")", ",", "encoder_message", ".", "clone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.seq2seq_model.BahdanauAttentionDecoderRNN.extra_repr": [[506, 509], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "\"AttentionDecoderRNN\\n num_layers={}\\n hidden_size={}\\n dropout={}\\n num_output_symbols={}\\n\"", ".", "format", "(", "\n", "self", ".", "num_layers", ",", "self", ".", "hidden_size", ",", "self", ".", "dropout_probability", ",", "self", ".", "output_size", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.seq2seq_model.DecoderRNN.__init__": [[515, 531], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.__init__"], ["def", "__init__", "(", "self", ",", "hidden_size", ":", "int", ",", "output_size", ":", "int", ",", "num_layers", ":", "int", ",", "dropout_probability", "=", "0.1", ")", ":", "\n", "        ", "\"\"\"\n        :param hidden_size: number of hidden units in RNN, and embedding size for output symbols\n        :param output_size: number of output symbols\n        :param num_layers: number of hidden layers\n        :param dropout_probability: dropout applied to symbol embeddings and RNNs\n        \"\"\"", "\n", "super", "(", "DecoderRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "dropout_probability", "=", "dropout_probability", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "output_size", ",", "hidden_size", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout_probability", ")", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "hidden_size", ",", "hidden_size", ",", "num_layers", "=", "num_layers", ",", "dropout", "=", "dropout_probability", ")", "\n", "self", ".", "hidden_to_output", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "output_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.seq2seq_model.DecoderRNN.forward": [[532, 553], ["seq2seq_model.DecoderRNN.embedding", "seq2seq_model.DecoderRNN.dropout", "embedding.unsqueeze.unsqueeze.unsqueeze", "seq2seq_model.DecoderRNN.lstm", "lstm_output.squeeze.squeeze.squeeze", "seq2seq_model.DecoderRNN.hidden_to_output"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_tokens", ":", "torch", ".", "LongTensor", ",", "last_hidden", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "\"\"\"\n        Run batch decoder forward for a single time step.\n\n        :param input_tokens: [batch_size]\n        :param last_hidden: previous decoder state, tuple of [num_layers, batch_size, hidden_size] (for hidden and cell)\n        :return:\n          output : un-normalized output probabilities, [batch_size, output_size]\n          hidden : current decoder state, tuple of [num_layers, batch_size, hidden_size] (for hidden and cell)\n        \"\"\"", "\n", "\n", "# Embed each input symbol", "\n", "embedding", "=", "self", ".", "embedding", "(", "input_tokens", ")", "# [batch_size, hidden_size]", "\n", "embedding", "=", "self", ".", "dropout", "(", "embedding", ")", "\n", "embedding", "=", "embedding", ".", "unsqueeze", "(", "0", ")", "# [1, batch_size, hidden_size]", "\n", "lstm_output", ",", "hidden", "=", "self", ".", "lstm", "(", "embedding", ",", "last_hidden", ")", "\n", "# rnn_output is [1, batch_size, hidden_size]", "\n", "# hidden is [num_layers, batch_size, hidden_size] (pair for hidden and cell)", "\n", "lstm_output", "=", "lstm_output", ".", "squeeze", "(", "0", ")", "# [batch_size, hidden_size]", "\n", "output", "=", "self", ".", "hidden_to_output", "(", "lstm_output", ")", "# [batch_size, output_size]", "\n", "return", "output", ",", "hidden", "\n", "# output : un-normalized probabilities [batch_size, output_size]", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.seq2seq_model.DecoderRNN.init_hidden": [[556, 567], ["encoder_message.expand().contiguous.expand().contiguous.unsqueeze", "encoder_message.expand().contiguous.expand().contiguous.expand().contiguous", "encoder_message.expand().contiguous.expand().contiguous.clone", "encoder_message.expand().contiguous.expand().contiguous.clone", "encoder_message.expand().contiguous.expand().contiguous.expand"], "methods", ["None"], ["", "def", "init_hidden", "(", "self", ",", "encoder_message", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Populate the hidden variables with a message from the decoder.\n        All layers, and both the hidden and cell vectors, are filled with the same message.\n        :param encoder_message: [batch_size, hidden_size]\n        :return:\n        \"\"\"", "\n", "encoder_message", "=", "encoder_message", ".", "unsqueeze", "(", "0", ")", "# 1, batch_size, hidden_size", "\n", "encoder_message", "=", "encoder_message", ".", "expand", "(", "self", ".", "num_layers", ",", "-", "1", ",", "\n", "-", "1", ")", ".", "contiguous", "(", ")", "# nlayers, batch_size, hidden_size tensor", "\n", "return", "encoder_message", ".", "clone", "(", ")", ",", "encoder_message", ".", "clone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.seq2seq_model.DecoderRNN.extra_repr": [[568, 571], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "\"DecoderRNN\\n num_layers={}\\n hidden_size={}\\n dropout={}\\n num_output_symbols={}\\n\"", ".", "format", "(", "\n", "self", ".", "num_layers", ",", "self", ".", "hidden_size", ",", "self", ".", "dropout_probability", ",", "self", ".", "output_size", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.__init__": [[22, 34], ["collections.defaultdict", "collections.Counter", "gSCAN_dataset.Vocabulary._idx_to_word.index"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sos_token", "=", "\"<SOS>\"", ",", "eos_token", "=", "\"<EOS>\"", ",", "pad_token", "=", "\"<PAD>\"", ")", ":", "\n", "        ", "\"\"\"\n        NB: <PAD> token is by construction idx 0.\n        \"\"\"", "\n", "self", ".", "sos_token", "=", "sos_token", "\n", "self", ".", "eos_token", "=", "eos_token", "\n", "self", ".", "pad_token", "=", "pad_token", "\n", "self", ".", "_idx_to_word", "=", "[", "pad_token", ",", "sos_token", ",", "eos_token", "]", "\n", "self", ".", "_word_to_idx", "=", "defaultdict", "(", "lambda", ":", "self", ".", "_idx_to_word", ".", "index", "(", "self", ".", "pad_token", ")", ")", "\n", "self", ".", "_word_to_idx", "[", "sos_token", "]", "=", "1", "\n", "self", ".", "_word_to_idx", "[", "eos_token", "]", "=", "2", "\n", "self", ".", "_word_frequencies", "=", "Counter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.word_to_idx": [[35, 37], ["None"], "methods", ["None"], ["", "def", "word_to_idx", "(", "self", ",", "word", ":", "str", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "_word_to_idx", "[", "word", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.idx_to_word": [[38, 40], ["None"], "methods", ["None"], ["", "def", "idx_to_word", "(", "self", ",", "idx", ":", "int", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "_idx_to_word", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.contains_word": [[41, 46], ["None"], "methods", ["None"], ["", "def", "contains_word", "(", "self", ",", "word", ":", "str", ")", "->", "bool", ":", "\n", "        ", "if", "self", ".", "_word_to_idx", "[", "word", "]", "!=", "0", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.add_sentence": [[47, 53], ["gSCAN_dataset.Vocabulary._idx_to_word.append"], "methods", ["None"], ["", "", "def", "add_sentence", "(", "self", ",", "sentence", ":", "List", "[", "str", "]", ")", ":", "\n", "        ", "for", "word", "in", "sentence", ":", "\n", "            ", "if", "word", "not", "in", "self", ".", "_word_to_idx", ":", "\n", "                ", "self", ".", "_word_to_idx", "[", "word", "]", "=", "self", ".", "size", "\n", "self", ".", "_idx_to_word", ".", "append", "(", "word", ")", "\n", "", "self", ".", "_word_frequencies", "[", "word", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.most_common": [[54, 56], ["gSCAN_dataset.Vocabulary._word_frequencies.most_common"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.most_common"], ["", "", "def", "most_common", "(", "self", ",", "n", "=", "10", ")", ":", "\n", "        ", "return", "self", ".", "_word_frequencies", ".", "most_common", "(", "n", "=", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.pad_idx": [[57, 60], ["gSCAN_dataset.Vocabulary.word_to_idx"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.word_to_idx"], ["", "@", "property", "\n", "def", "pad_idx", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "word_to_idx", "(", "self", ".", "pad_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.sos_idx": [[61, 64], ["gSCAN_dataset.Vocabulary.word_to_idx"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.word_to_idx"], ["", "@", "property", "\n", "def", "sos_idx", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "word_to_idx", "(", "self", ".", "sos_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.eos_idx": [[65, 68], ["gSCAN_dataset.Vocabulary.word_to_idx"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.word_to_idx"], ["", "@", "property", "\n", "def", "eos_idx", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "word_to_idx", "(", "self", ".", "eos_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.size": [[69, 72], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_idx_to_word", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.load": [[73, 88], ["os.path.exists", "open", "json.load", "cls", "collections.defaultdict", "all_data[].items", "collections.Counter"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.load"], ["", "@", "classmethod", "\n", "def", "load", "(", "cls", ",", "path", ":", "str", ")", ":", "\n", "        ", "assert", "os", ".", "path", ".", "exists", "(", "path", ")", ",", "\"Trying to load a vocabulary from a non-existing file {}\"", ".", "format", "(", "path", ")", "\n", "with", "open", "(", "path", ",", "'r'", ")", "as", "infile", ":", "\n", "            ", "all_data", "=", "json", ".", "load", "(", "infile", ")", "\n", "sos_token", "=", "all_data", "[", "\"sos_token\"", "]", "\n", "eos_token", "=", "all_data", "[", "\"eos_token\"", "]", "\n", "pad_token", "=", "all_data", "[", "\"pad_token\"", "]", "\n", "vocab", "=", "cls", "(", "sos_token", "=", "sos_token", ",", "eos_token", "=", "eos_token", ",", "pad_token", "=", "pad_token", ")", "\n", "vocab", ".", "_idx_to_word", "=", "all_data", "[", "\"idx_to_word\"", "]", "\n", "vocab", ".", "_word_to_idx", "=", "defaultdict", "(", "int", ")", "\n", "for", "word", ",", "idx", "in", "all_data", "[", "\"word_to_idx\"", "]", ".", "items", "(", ")", ":", "\n", "                ", "vocab", ".", "_word_to_idx", "[", "word", "]", "=", "idx", "\n", "", "vocab", ".", "_word_frequencies", "=", "Counter", "(", "all_data", "[", "\"word_frequencies\"", "]", ")", "\n", "", "return", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.to_dict": [[89, 97], ["None"], "methods", ["None"], ["", "def", "to_dict", "(", "self", ")", "->", "dict", ":", "\n", "        ", "return", "{", "\n", "\"sos_token\"", ":", "self", ".", "sos_token", ",", "\n", "\"eos_token\"", ":", "self", ".", "eos_token", ",", "\n", "\"pad_token\"", ":", "self", ".", "pad_token", ",", "\n", "\"idx_to_word\"", ":", "self", ".", "_idx_to_word", ",", "\n", "\"word_to_idx\"", ":", "self", ".", "_word_to_idx", ",", "\n", "\"word_frequencies\"", ":", "self", ".", "_word_frequencies", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.save": [[99, 103], ["open", "json.dump", "gSCAN_dataset.Vocabulary.to_dict"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.Situation.to_dict"], ["", "def", "save", "(", "self", ",", "path", ":", "str", ")", "->", "str", ":", "\n", "        ", "with", "open", "(", "path", ",", "'w'", ")", "as", "outfile", ":", "\n", "            ", "json", ".", "dump", "(", "self", ".", "to_dict", "(", ")", ",", "outfile", ",", "indent", "=", "4", ")", "\n", "", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.GroundedScanDataset.__init__": [[110, 152], ["os.path.exists", "GroundedScan.dataset.GroundedScan.dataset.GroundedScan.load_dataset_from_file", "gSCAN_dataset.GroundedScanDataset.dataset._data_statistics.get", "numpy.array", "numpy.array", "numpy.array", "logger.warning", "logger.info", "[].items", "logger.info", "[].items", "logger.info", "gSCAN_dataset.Vocabulary", "gSCAN_dataset.Vocabulary", "gSCAN_dataset.GroundedScanDataset.read_vocabularies", "logger.info", "logger.info", "gSCAN_dataset.Vocabulary.load", "gSCAN_dataset.Vocabulary.load", "logger.info", "os.path.exists", "os.path.exists", "logger.info", "items.items", "logger.info", "items.items", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "logger.info", "logger.info"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.load_dataset_from_file", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.GroundedScanDataset.read_vocabularies", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.load", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.load"], ["def", "__init__", "(", "self", ",", "path_to_data", ":", "str", ",", "save_directory", ":", "str", ",", "k", ":", "int", ",", "split", "=", "\"train\"", ",", "input_vocabulary_file", "=", "\"\"", ",", "\n", "target_vocabulary_file", "=", "\"\"", ",", "generate_vocabulary", "=", "False", ")", ":", "\n", "        ", "assert", "os", ".", "path", ".", "exists", "(", "path_to_data", ")", ",", "\"Trying to read a gSCAN dataset from a non-existing file {}.\"", ".", "format", "(", "\n", "path_to_data", ")", "\n", "if", "not", "generate_vocabulary", ":", "\n", "            ", "assert", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "save_directory", ",", "input_vocabulary_file", ")", ")", "and", "os", ".", "path", ".", "exists", "(", "\n", "os", ".", "path", ".", "join", "(", "save_directory", ",", "target_vocabulary_file", ")", ")", ",", "\"Trying to load vocabularies from non-existing files.\"", "\n", "", "if", "split", "==", "\"test\"", "and", "generate_vocabulary", ":", "\n", "            ", "logger", ".", "warning", "(", "\"WARNING: generating a vocabulary from the test set.\"", ")", "\n", "", "self", ".", "dataset", "=", "GroundedScan", ".", "load_dataset_from_file", "(", "path_to_data", ",", "save_directory", "=", "save_directory", ",", "k", "=", "k", ")", "\n", "if", "self", ".", "dataset", ".", "_data_statistics", ".", "get", "(", "\"adverb_1\"", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"Verb-adverb combinations in training set: \"", ")", "\n", "for", "adverb", ",", "items", "in", "self", ".", "dataset", ".", "_data_statistics", "[", "\"train\"", "]", "[", "\"verb_adverb_combinations\"", "]", ".", "items", "(", ")", ":", "\n", "                ", "logger", ".", "info", "(", "\"Verbs for adverb: {}\"", ".", "format", "(", "adverb", ")", ")", "\n", "for", "key", ",", "count", "in", "items", ".", "items", "(", ")", ":", "\n", "                    ", "logger", ".", "info", "(", "\"   {}: {} occurrences.\"", ".", "format", "(", "key", ",", "count", ")", ")", "\n", "", "", "logger", ".", "info", "(", "\"Verb-adverb combinations in dev set: \"", ")", "\n", "for", "adverb", ",", "items", "in", "self", ".", "dataset", ".", "_data_statistics", "[", "\"dev\"", "]", "[", "\"verb_adverb_combinations\"", "]", ".", "items", "(", ")", ":", "\n", "                ", "logger", ".", "info", "(", "\"Verbs for adverb: {}\"", ".", "format", "(", "adverb", ")", ")", "\n", "for", "key", ",", "count", "in", "items", ".", "items", "(", ")", ":", "\n", "                    ", "logger", ".", "info", "(", "\"   {}: {} occurrences.\"", ".", "format", "(", "key", ",", "count", ")", ")", "\n", "", "", "", "self", ".", "image_dimensions", "=", "None", "\n", "self", ".", "image_channels", "=", "3", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "directory", "=", "save_directory", "\n", "\n", "# Keeping track of data.", "\n", "self", ".", "_examples", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "self", ".", "_input_lengths", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "self", ".", "_target_lengths", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "if", "generate_vocabulary", ":", "\n", "            ", "logger", ".", "info", "(", "\"Generating vocabularies...\"", ")", "\n", "self", ".", "input_vocabulary", "=", "Vocabulary", "(", ")", "\n", "self", ".", "target_vocabulary", "=", "Vocabulary", "(", ")", "\n", "self", ".", "read_vocabularies", "(", ")", "\n", "logger", ".", "info", "(", "\"Done generating vocabularies.\"", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"Loading vocabularies...\"", ")", "\n", "self", ".", "input_vocabulary", "=", "Vocabulary", ".", "load", "(", "os", ".", "path", ".", "join", "(", "save_directory", ",", "input_vocabulary_file", ")", ")", "\n", "self", ".", "target_vocabulary", "=", "Vocabulary", ".", "load", "(", "os", ".", "path", ".", "join", "(", "save_directory", ",", "target_vocabulary_file", ")", ")", "\n", "logger", ".", "info", "(", "\"Done loading vocabularies.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.GroundedScanDataset.read_vocabularies": [[153, 161], ["logger.info", "enumerate", "gSCAN_dataset.GroundedScanDataset.dataset.get_examples_with_image", "gSCAN_dataset.GroundedScanDataset.input_vocabulary.add_sentence", "gSCAN_dataset.GroundedScanDataset.target_vocabulary.add_sentence"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.get_examples_with_image", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.add_sentence", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.add_sentence"], ["", "", "def", "read_vocabularies", "(", "self", ")", "->", "{", "}", ":", "\n", "        ", "\"\"\"\n        Loop over all examples in the dataset and add the words in them to the vocabularies.\n        \"\"\"", "\n", "logger", ".", "info", "(", "\"Populating vocabulary...\"", ")", "\n", "for", "i", ",", "example", "in", "enumerate", "(", "self", ".", "dataset", ".", "get_examples_with_image", "(", "self", ".", "split", ")", ")", ":", "\n", "            ", "self", ".", "input_vocabulary", ".", "add_sentence", "(", "example", "[", "\"input_command\"", "]", ")", "\n", "self", ".", "target_vocabulary", ".", "add_sentence", "(", "example", "[", "\"target_command\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.GroundedScanDataset.save_vocabularies": [[162, 165], ["gSCAN_dataset.GroundedScanDataset.input_vocabulary.save", "gSCAN_dataset.GroundedScanDataset.target_vocabulary.save", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.save", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.save"], ["", "", "def", "save_vocabularies", "(", "self", ",", "input_vocabulary_file", ":", "str", ",", "target_vocabulary_file", ":", "str", ")", ":", "\n", "        ", "self", ".", "input_vocabulary", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "directory", ",", "input_vocabulary_file", ")", ")", "\n", "self", ".", "target_vocabulary", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "directory", ",", "target_vocabulary_file", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.GroundedScanDataset.get_vocabulary": [[166, 174], ["ValueError"], "methods", ["None"], ["", "def", "get_vocabulary", "(", "self", ",", "vocabulary", ":", "str", ")", "->", "Vocabulary", ":", "\n", "        ", "if", "vocabulary", "==", "\"input\"", ":", "\n", "            ", "vocab", "=", "self", ".", "input_vocabulary", "\n", "", "elif", "vocabulary", "==", "\"target\"", ":", "\n", "            ", "vocab", "=", "self", ".", "target_vocabulary", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Specified unknown vocabulary in sentence_to_array: {}\"", ".", "format", "(", "vocabulary", ")", ")", "\n", "", "return", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.GroundedScanDataset.shuffle_data": [[175, 183], ["numpy.random.permutation", "len"], "methods", ["None"], ["", "def", "shuffle_data", "(", "self", ")", "->", "{", "}", ":", "\n", "        ", "\"\"\"\n        Reorder the data examples and reorder the lengths of the input and target commands accordingly.\n        \"\"\"", "\n", "random_permutation", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "self", ".", "_examples", ")", ")", "\n", "self", ".", "_examples", "=", "self", ".", "_examples", "[", "random_permutation", "]", "\n", "self", ".", "_target_lengths", "=", "self", ".", "_target_lengths", "[", "random_permutation", "]", "\n", "self", ".", "_input_lengths", "=", "self", ".", "_input_lengths", "[", "random_permutation", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.GroundedScanDataset.get_data_iterator": [[184, 232], ["range", "len", "numpy.max", "numpy.max", "len", "torch.cat", "torch.cat", "input_batch.append", "target_batch.append", "situation_batch.append", "situation_representation_batch.append", "derivation_representation_batch.append", "agent_positions_batch.append", "target_positions_batch.append", "len", "example[].size", "example[].size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().unsqueeze", "torch.zeros().unsqueeze", "torch.zeros", "torch.zeros", "int", "int"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.size", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.size"], ["", "def", "get_data_iterator", "(", "self", ",", "batch_size", "=", "10", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "List", "[", "int", "]", ",", "torch", ".", "Tensor", ",", "List", "[", "dict", "]", ",", "\n", "torch", ".", "Tensor", ",", "List", "[", "int", "]", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Iterate over batches of example tensors, pad them to the max length in the batch and yield.\n        :param batch_size: how many examples to put in each batch.\n        :param auxiliary_task: if true, also batches agent and target positions (flattened, so\n        agent row * agent columns = agent_position)\n        :return: tuple of input commands batch, corresponding input lengths, situation image batch,\n        list of corresponding situation representations, target commands batch and corresponding target lengths.\n        \"\"\"", "\n", "for", "example_i", "in", "range", "(", "0", ",", "len", "(", "self", ".", "_examples", ")", ",", "batch_size", ")", ":", "\n", "            ", "if", "example_i", "+", "batch_size", ">", "len", "(", "self", ".", "_examples", ")", ":", "\n", "                ", "batch_size", "=", "len", "(", "self", ".", "_examples", ")", "-", "example_i", "\n", "", "examples", "=", "self", ".", "_examples", "[", "example_i", ":", "example_i", "+", "batch_size", "]", "\n", "input_lengths", "=", "self", ".", "_input_lengths", "[", "example_i", ":", "example_i", "+", "batch_size", "]", "\n", "target_lengths", "=", "self", ".", "_target_lengths", "[", "example_i", ":", "example_i", "+", "batch_size", "]", "\n", "max_input_length", "=", "np", ".", "max", "(", "input_lengths", ")", "\n", "max_target_length", "=", "np", ".", "max", "(", "target_lengths", ")", "\n", "input_batch", "=", "[", "]", "\n", "target_batch", "=", "[", "]", "\n", "situation_batch", "=", "[", "]", "\n", "situation_representation_batch", "=", "[", "]", "\n", "derivation_representation_batch", "=", "[", "]", "\n", "agent_positions_batch", "=", "[", "]", "\n", "target_positions_batch", "=", "[", "]", "\n", "for", "example", "in", "examples", ":", "\n", "                ", "to_pad_input", "=", "max_input_length", "-", "example", "[", "\"input_tensor\"", "]", ".", "size", "(", "1", ")", "\n", "to_pad_target", "=", "max_target_length", "-", "example", "[", "\"target_tensor\"", "]", ".", "size", "(", "1", ")", "\n", "padded_input", "=", "torch", ".", "cat", "(", "[", "\n", "example", "[", "\"input_tensor\"", "]", ",", "\n", "torch", ".", "zeros", "(", "int", "(", "to_pad_input", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", ".", "unsqueeze", "(", "0", ")", "]", ",", "dim", "=", "1", ")", "\n", "# padded_input = torch.cat([", "\n", "#     torch.zeros_like(example[\"input_tensor\"], dtype=torch.long, device=device),", "\n", "#     torch.zeros(int(to_pad_input), dtype=torch.long, device=devicedevice).unsqueeze(0)], dim=1) # TODO: change back", "\n", "padded_target", "=", "torch", ".", "cat", "(", "[", "\n", "example", "[", "\"target_tensor\"", "]", ",", "\n", "torch", ".", "zeros", "(", "int", "(", "to_pad_target", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", ".", "unsqueeze", "(", "0", ")", "]", ",", "dim", "=", "1", ")", "\n", "input_batch", ".", "append", "(", "padded_input", ")", "\n", "target_batch", ".", "append", "(", "padded_target", ")", "\n", "situation_batch", ".", "append", "(", "example", "[", "\"situation_tensor\"", "]", ")", "\n", "situation_representation_batch", ".", "append", "(", "example", "[", "\"situation_representation\"", "]", ")", "\n", "derivation_representation_batch", ".", "append", "(", "example", "[", "\"derivation_representation\"", "]", ")", "\n", "agent_positions_batch", ".", "append", "(", "example", "[", "\"agent_position\"", "]", ")", "\n", "target_positions_batch", ".", "append", "(", "example", "[", "\"target_position\"", "]", ")", "\n", "\n", "", "yield", "(", "torch", ".", "cat", "(", "input_batch", ",", "dim", "=", "0", ")", ",", "input_lengths", ",", "derivation_representation_batch", ",", "\n", "torch", ".", "cat", "(", "situation_batch", ",", "dim", "=", "0", ")", ",", "situation_representation_batch", ",", "torch", ".", "cat", "(", "target_batch", ",", "dim", "=", "0", ")", ",", "\n", "target_lengths", ",", "torch", ".", "cat", "(", "agent_positions_batch", ",", "dim", "=", "0", ")", ",", "torch", ".", "cat", "(", "target_positions_batch", ",", "dim", "=", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.GroundedScanDataset.read_dataset": [[233, 279], ["logger.info", "enumerate", "gSCAN_dataset.GroundedScanDataset.dataset.get_examples_with_image", "gSCAN_dataset.GroundedScanDataset.sentence_to_array", "gSCAN_dataset.GroundedScanDataset.sentence_to_array", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "numpy.append", "numpy.append", "numpy.append", "len", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "len", "len", "int", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.get_examples_with_image", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.GroundedScanDataset.sentence_to_array", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.GroundedScanDataset.sentence_to_array"], ["", "", "def", "read_dataset", "(", "self", ",", "max_examples", "=", "None", ",", "simple_situation_representation", "=", "True", ")", "->", "{", "}", ":", "\n", "        ", "\"\"\"\n        Loop over the data examples in GroundedScan and convert them to tensors, also save the lengths\n        for input and target sequences that are needed for padding.\n        :param max_examples: how many examples to read maximally, read all if None.\n        :param simple_situation_representation: whether to read the full situation image in RGB or the simplified\n        smaller representation.\n        \"\"\"", "\n", "logger", ".", "info", "(", "\"Converting dataset to tensors...\"", ")", "\n", "for", "i", ",", "example", "in", "enumerate", "(", "self", ".", "dataset", ".", "get_examples_with_image", "(", "self", ".", "split", ",", "simple_situation_representation", ")", ")", ":", "\n", "            ", "if", "max_examples", ":", "\n", "                ", "if", "len", "(", "self", ".", "_examples", ")", ">", "max_examples", ":", "\n", "                    ", "return", "\n", "", "", "empty_example", "=", "{", "}", "\n", "input_commands", "=", "example", "[", "\"input_command\"", "]", "\n", "target_commands", "=", "example", "[", "\"target_command\"", "]", "\n", "#equivalent_target_commands = example[\"equivalent_target_command\"]", "\n", "situation_image", "=", "example", "[", "\"situation_image\"", "]", "\n", "if", "i", "==", "0", ":", "\n", "                ", "self", ".", "image_dimensions", "=", "situation_image", ".", "shape", "[", "0", "]", "\n", "self", ".", "image_channels", "=", "situation_image", ".", "shape", "[", "-", "1", "]", "\n", "", "situation_repr", "=", "example", "[", "\"situation_representation\"", "]", "\n", "input_array", "=", "self", ".", "sentence_to_array", "(", "input_commands", ",", "vocabulary", "=", "\"input\"", ")", "\n", "target_array", "=", "self", ".", "sentence_to_array", "(", "target_commands", ",", "vocabulary", "=", "\"target\"", ")", "\n", "#equivalent_target_array = self.sentence_to_array(equivalent_target_commands, vocabulary=\"target\")", "\n", "empty_example", "[", "\"input_tensor\"", "]", "=", "torch", ".", "tensor", "(", "input_array", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", ".", "unsqueeze", "(", "\n", "dim", "=", "0", ")", "\n", "empty_example", "[", "\"target_tensor\"", "]", "=", "torch", ".", "tensor", "(", "target_array", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", ".", "unsqueeze", "(", "\n", "dim", "=", "0", ")", "\n", "#empty_example[\"equivalent_target_tensor\"] = torch.tensor(equivalent_target_array, dtype=torch.long,", "\n", "#                                                         device=device).unsqueeze(dim=0)", "\n", "empty_example", "[", "\"situation_tensor\"", "]", "=", "torch", ".", "tensor", "(", "situation_image", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", "\n", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "empty_example", "[", "\"situation_representation\"", "]", "=", "situation_repr", "\n", "empty_example", "[", "\"derivation_representation\"", "]", "=", "example", "[", "\"derivation_representation\"", "]", "\n", "empty_example", "[", "\"agent_position\"", "]", "=", "torch", ".", "tensor", "(", "\n", "(", "int", "(", "situation_repr", "[", "\"agent_position\"", "]", "[", "\"row\"", "]", ")", "*", "int", "(", "situation_repr", "[", "\"grid_size\"", "]", ")", ")", "+", "\n", "int", "(", "situation_repr", "[", "\"agent_position\"", "]", "[", "\"column\"", "]", ")", ",", "dtype", "=", "torch", ".", "long", ",", "\n", "device", "=", "device", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "empty_example", "[", "\"target_position\"", "]", "=", "torch", ".", "tensor", "(", "\n", "(", "int", "(", "situation_repr", "[", "\"target_object\"", "]", "[", "\"position\"", "]", "[", "\"row\"", "]", ")", "*", "int", "(", "situation_repr", "[", "\"grid_size\"", "]", ")", ")", "+", "\n", "int", "(", "situation_repr", "[", "\"target_object\"", "]", "[", "\"position\"", "]", "[", "\"column\"", "]", ")", ",", "\n", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "self", ".", "_input_lengths", "=", "np", ".", "append", "(", "self", ".", "_input_lengths", ",", "[", "len", "(", "input_array", ")", "]", ")", "\n", "self", ".", "_target_lengths", "=", "np", ".", "append", "(", "self", ".", "_target_lengths", ",", "[", "len", "(", "target_array", ")", "]", ")", "\n", "self", ".", "_examples", "=", "np", ".", "append", "(", "self", ".", "_examples", ",", "[", "empty_example", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.GroundedScanDataset.sentence_to_array": [[280, 294], ["gSCAN_dataset.GroundedScanDataset.get_vocabulary", "sentence_array.append", "sentence_array.append", "gSCAN_dataset.GroundedScanDataset.word_to_idx"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.GroundedScanDataset.get_vocabulary", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.word_to_idx"], ["", "", "def", "sentence_to_array", "(", "self", ",", "sentence", ":", "List", "[", "str", "]", ",", "vocabulary", ":", "str", ")", "->", "List", "[", "int", "]", ":", "\n", "        ", "\"\"\"\n        Convert each string word in a sentence to the corresponding integer from the vocabulary and append\n        a start-of-sequence and end-of-sequence token.\n        :param sentence: the sentence in words (strings)\n        :param vocabulary: whether to use the input or target vocabulary.\n        :return: the sentence in integers.\n        \"\"\"", "\n", "vocab", "=", "self", ".", "get_vocabulary", "(", "vocabulary", ")", "\n", "sentence_array", "=", "[", "vocab", ".", "sos_idx", "]", "\n", "for", "word", "in", "sentence", ":", "\n", "            ", "sentence_array", ".", "append", "(", "vocab", ".", "word_to_idx", "(", "word", ")", ")", "\n", "", "sentence_array", ".", "append", "(", "vocab", ".", "eos_idx", ")", "\n", "return", "sentence_array", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.GroundedScanDataset.array_to_sentence": [[295, 304], ["gSCAN_dataset.GroundedScanDataset.get_vocabulary", "gSCAN_dataset.GroundedScanDataset.idx_to_word"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.GroundedScanDataset.get_vocabulary", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.idx_to_word"], ["", "def", "array_to_sentence", "(", "self", ",", "sentence_array", ":", "List", "[", "int", "]", ",", "vocabulary", ":", "str", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "\"\"\"\n        Translate each integer in a sentence array to the corresponding word.\n        :param sentence_array: array with integers representing words from the vocabulary.\n        :param vocabulary: whether to use the input or target vocabulary.\n        :return: the sentence in words.\n        \"\"\"", "\n", "vocab", "=", "self", ".", "get_vocabulary", "(", "vocabulary", ")", "\n", "return", "[", "vocab", ".", "idx_to_word", "(", "word_idx", ")", "for", "word_idx", "in", "sentence_array", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.GroundedScanDataset.num_examples": [[305, 308], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_examples", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_examples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.GroundedScanDataset.input_vocabulary_size": [[309, 312], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "input_vocabulary_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "input_vocabulary", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.GroundedScanDataset.target_vocabulary_size": [[313, 316], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "target_vocabulary_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "target_vocabulary", ".", "size", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.seq2seq_test.TestGroundedScanDataset.test_situation_encoder": [[19, 22], ["torch.zeros", "seq2seq_test.TestGroundedScanDataset.assertEqual"], "methods", ["None"], ["    ", "def", "test_situation_encoder", "(", "self", ")", ":", "\n", "        ", "input_image", "=", "torch", ".", "zeros", "(", ")", "\n", "self", ".", "assertEqual", "(", "'foo'", ".", "upper", "(", ")", ",", "'FOO'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.seq2seq_test.TestGroundedScanDataset.test_isupper": [[23, 26], ["seq2seq_test.TestGroundedScanDataset.assertTrue", "seq2seq_test.TestGroundedScanDataset.assertFalse"], "methods", ["None"], ["", "def", "test_isupper", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertTrue", "(", "'FOO'", ".", "isupper", "(", ")", ")", "\n", "self", ".", "assertFalse", "(", "'Foo'", ".", "isupper", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.seq2seq_test.TestGroundedScanDataset.test_split": [[27, 33], ["seq2seq_test.TestGroundedScanDataset.assertEqual", "s.split", "seq2seq_test.TestGroundedScanDataset.assertRaises", "s.split"], "methods", ["None"], ["", "def", "test_split", "(", "self", ")", ":", "\n", "        ", "s", "=", "'hello world'", "\n", "self", ".", "assertEqual", "(", "s", ".", "split", "(", ")", ",", "[", "'hello'", ",", "'world'", "]", ")", "\n", "# check that s.split fails when the separator is not a string", "\n", "with", "self", ".", "assertRaises", "(", "TypeError", ")", ":", "\n", "            ", "s", ".", "split", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_save_and_load_dataset": [[93, 116], ["time.time", "dataset.get_data_pairs", "dataset.save_dataset", "dataset.save_dataset_statistics", "dataset.save_dataset_statistics", "GroundedScan.dataset.GroundedScan.load_dataset_from_file", "zip", "os.remove", "time.time", "logger.info", "os.path.join", "dataset.get_examples_with_image", "GroundedScan.load_dataset_from_file.get_examples_with_image", "numpy.array_equal", "os.path.join", "dataset.command_repr", "GroundedScan.load_dataset_from_file.command_repr", "dataset.command_repr", "GroundedScan.load_dataset_from_file.command_repr", "dataset.command_repr", "GroundedScan.load_dataset_from_file.command_repr"], "function", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.get_data_pairs", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.save_dataset", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.save_dataset_statistics", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.save_dataset_statistics", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.load_dataset_from_file", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.get_examples_with_image", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.get_examples_with_image", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.command_repr", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.command_repr", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.command_repr", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.command_repr", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.command_repr", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.command_repr"], ["def", "test_save_and_load_dataset", "(", "dataset", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "dataset", ".", "get_data_pairs", "(", "max_examples", "=", "EXAMPLES_TO_TEST", ")", "\n", "dataset", ".", "save_dataset", "(", "\"test.txt\"", ")", "\n", "dataset", ".", "save_dataset_statistics", "(", "split", "=", "\"train\"", ")", "\n", "dataset", ".", "save_dataset_statistics", "(", "split", "=", "\"test\"", ")", "\n", "\n", "test_grounded_scan", "=", "GroundedScan", ".", "load_dataset_from_file", "(", "os", ".", "path", ".", "join", "(", "TEST_DIRECTORY", ",", "\"test.txt\"", ")", ",", "\n", "TEST_DIRECTORY", ")", "\n", "for", "example_one", ",", "example_two", "in", "zip", "(", "dataset", ".", "get_examples_with_image", "(", "\"train\"", ")", ",", "\n", "test_grounded_scan", ".", "get_examples_with_image", "(", "\"train\"", ")", ")", ":", "\n", "        ", "assert", "dataset", ".", "command_repr", "(", "example_one", "[", "\"input_command\"", "]", ")", "==", "test_grounded_scan", ".", "command_repr", "(", "\n", "example_two", "[", "\"input_command\"", "]", ")", ",", "\"test_save_and_load_dataset FAILED\"", "\n", "assert", "dataset", ".", "command_repr", "(", "example_one", "[", "\"target_command\"", "]", ")", "==", "test_grounded_scan", ".", "command_repr", "(", "\n", "example_two", "[", "\"target_command\"", "]", ")", ",", "\"test_save_and_load_dataset FAILED\"", "\n", "assert", "np", ".", "array_equal", "(", "example_one", "[", "\"situation_image\"", "]", ",", "example_two", "[", "\"situation_image\"", "]", ")", ",", "\"test_save_and_load_dataset FAILED\"", "\n", "assert", "dataset", ".", "command_repr", "(", "example_one", "[", "\"input_meaning\"", "]", ")", "==", "test_grounded_scan", ".", "command_repr", "(", "\n", "example_two", "[", "\"input_meaning\"", "]", ")", ",", "\"test_save_and_load_dataset FAILED\"", "\n", "", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "TEST_DIRECTORY", ",", "\"test.txt\"", ")", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_save_and_load_dataset PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_save_and_load_dataset_nonce": [[118, 142], ["time.time", "TEST_DATASET_NONCE.get_data_pairs", "TEST_DATASET_NONCE.save_dataset", "TEST_DATASET_NONCE.save_dataset_statistics", "TEST_DATASET_NONCE.save_dataset_statistics", "GroundedScan.dataset.GroundedScan.load_dataset_from_file", "zip", "os.remove", "time.time", "logger.info", "os.path.join", "TEST_DATASET_NONCE.get_examples_with_image", "GroundedScan.load_dataset_from_file.get_examples_with_image", "numpy.array_equal", "os.path.join", "TEST_DATASET_NONCE.command_repr", "GroundedScan.load_dataset_from_file.command_repr", "TEST_DATASET_NONCE.command_repr", "GroundedScan.load_dataset_from_file.command_repr", "TEST_DATASET_NONCE.command_repr", "GroundedScan.load_dataset_from_file.command_repr"], "function", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.get_data_pairs", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.save_dataset", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.save_dataset_statistics", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.save_dataset_statistics", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.load_dataset_from_file", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.get_examples_with_image", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.get_examples_with_image", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.command_repr", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.command_repr", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.command_repr", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.command_repr", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.command_repr", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.command_repr"], ["", "def", "test_save_and_load_dataset_nonce", "(", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "TEST_DATASET_NONCE", ".", "get_data_pairs", "(", "max_examples", "=", "EXAMPLES_TO_TEST", ")", "\n", "TEST_DATASET_NONCE", ".", "save_dataset", "(", "\"test.txt\"", ")", "\n", "TEST_DATASET_NONCE", ".", "save_dataset_statistics", "(", "split", "=", "\"train\"", ")", "\n", "TEST_DATASET_NONCE", ".", "save_dataset_statistics", "(", "split", "=", "\"test\"", ")", "\n", "\n", "test_grounded_scan", "=", "GroundedScan", ".", "load_dataset_from_file", "(", "os", ".", "path", ".", "join", "(", "TEST_DIRECTORY", ",", "\"test.txt\"", ")", ",", "\n", "TEST_DIRECTORY", ")", "\n", "\n", "for", "example_one", ",", "example_two", "in", "zip", "(", "TEST_DATASET_NONCE", ".", "get_examples_with_image", "(", "\"train\"", ")", ",", "\n", "test_grounded_scan", ".", "get_examples_with_image", "(", "\"train\"", ")", ")", ":", "\n", "        ", "assert", "TEST_DATASET_NONCE", ".", "command_repr", "(", "example_one", "[", "\"input_command\"", "]", ")", "==", "test_grounded_scan", ".", "command_repr", "(", "\n", "example_two", "[", "\"input_command\"", "]", ")", ",", "\"test_save_and_load_dataset FAILED\"", "\n", "assert", "TEST_DATASET_NONCE", ".", "command_repr", "(", "example_one", "[", "\"target_command\"", "]", ")", "==", "test_grounded_scan", ".", "command_repr", "(", "\n", "example_two", "[", "\"target_command\"", "]", ")", ",", "\"test_save_and_load_dataset FAILED\"", "\n", "assert", "np", ".", "array_equal", "(", "example_one", "[", "\"situation_image\"", "]", ",", "example_two", "[", "\"situation_image\"", "]", ")", ",", "\"test_save_and_load_dataset FAILED\"", "\n", "assert", "TEST_DATASET_NONCE", ".", "command_repr", "(", "example_one", "[", "\"input_meaning\"", "]", ")", "==", "test_grounded_scan", ".", "command_repr", "(", "\n", "example_two", "[", "\"input_meaning\"", "]", ")", ",", "\"test_save_and_load_dataset FAILED\"", "\n", "", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "TEST_DIRECTORY", ",", "\"test.txt\"", ")", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_save_and_load_dataset PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_derivation_from_rules": [[144, 154], ["time.time", "dataset.sample_command", "derivation.to_rules", "GroundedScan.grammar.Derivation.from_rules", "time.time", "logger.info", "Derivation.from_rules.words", "derivation.words"], "function", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.sample_command", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.to_rules", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.from_rules", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.words", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.words"], ["", "def", "test_derivation_from_rules", "(", "dataset", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "derivation", ",", "arguments", "=", "dataset", ".", "sample_command", "(", ")", "\n", "rules_list", "=", "[", "]", "\n", "lexicon", "=", "{", "}", "\n", "derivation", ".", "to_rules", "(", "rules_list", ",", "lexicon", ")", "\n", "test", "=", "Derivation", ".", "from_rules", "(", "rules_list", ",", "lexicon", "=", "lexicon", ")", "\n", "assert", "' '", ".", "join", "(", "test", ".", "words", "(", ")", ")", "==", "' '", ".", "join", "(", "derivation", ".", "words", "(", ")", ")", ",", "\"test_derivation_from_rules FAILED\"", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_derivation_from_rules PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_derivation_from_string": [[156, 165], ["time.time", "dataset.sample_command", "derivation.__repr__", "derivation.__repr__.split", "GroundedScan.grammar.Derivation.from_str", "time.time", "logger.info", "Derivation.from_str.words", "derivation.words"], "function", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.sample_command", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.__repr__", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.from_str", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.words", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.words"], ["", "def", "test_derivation_from_string", "(", "dataset", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "derivation", ",", "arguments", "=", "dataset", ".", "sample_command", "(", ")", "\n", "derivation_str", "=", "derivation", ".", "__repr__", "(", ")", "\n", "rules_str", ",", "lexicon_str", "=", "derivation_str", ".", "split", "(", "';'", ")", "\n", "new_derivation", "=", "Derivation", ".", "from_str", "(", "rules_str", ",", "lexicon_str", ",", "dataset", ".", "_grammar", ")", "\n", "assert", "' '", ".", "join", "(", "new_derivation", ".", "words", "(", ")", ")", "==", "' '", ".", "join", "(", "derivation", ".", "words", "(", ")", ")", ",", "\"test_derivation_from_string FAILED\"", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_derivation_from_string PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_demonstrate_target_commands_one": [[167, 185], ["time.time", "GroundedScan.grammar.Derivation.from_str", "dataset.demonstrate_command", "dataset.demonstrate_target_commands", "time.time", "logger.info", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "Derivation.from_str.words"], "function", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.from_str", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.demonstrate_command", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.demonstrate_target_commands", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.words"], ["", "def", "test_demonstrate_target_commands_one", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Test that target commands sequence resulting from demonstrate_command is the same as the one executed by\n     demonstrate_target_commands\"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "rules_str", "=", "\"NP -> NN,NP -> JJ NP,DP -> 'a' NP,VP -> VV_intrans 'to' DP,ROOT -> VP\"", "\n", "translate_fn", "=", "dataset", ".", "_vocabulary", ".", "translate_meaning", "\n", "lexicon_str", "=", "\"T:{},NT:VV_intransitive -> {},T:to,T:a,T:{},NT:JJ -> {},T:{},NT:NN -> {}\"", ".", "format", "(", "\n", "translate_fn", "(", "\"walk\"", ")", ",", "translate_fn", "(", "\"walk\"", ")", ",", "translate_fn", "(", "\"small\"", ")", ",", "translate_fn", "(", "\"small\"", ")", ",", "\n", "translate_fn", "(", "\"circle\"", ")", ",", "translate_fn", "(", "\"circle\"", ")", "\n", ")", "\n", "derivation", "=", "Derivation", ".", "from_str", "(", "rules_str", ",", "lexicon_str", ",", "dataset", ".", "_grammar", ")", "\n", "actual_target_commands", ",", "_", ",", "_", "=", "dataset", ".", "demonstrate_command", "(", "derivation", ",", "TEST_SITUATION_1", ")", "\n", "command", "=", "' '", ".", "join", "(", "derivation", ".", "words", "(", ")", ")", "\n", "target_commands", ",", "_", ",", "_", ",", "_", "=", "dataset", ".", "demonstrate_target_commands", "(", "command", ",", "TEST_SITUATION_1", ",", "actual_target_commands", ")", "\n", "assert", "','", ".", "join", "(", "actual_target_commands", ")", "==", "','", ".", "join", "(", "target_commands", ")", ",", "\"test_demonstrate_target_commands_one FAILED\"", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_demonstrate_target_commands_one PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_demonstrate_target_commands_two": [[187, 204], ["time.time", "GroundedScan.grammar.Derivation.from_str", "dataset.demonstrate_command", "dataset.demonstrate_target_commands", "time.time", "logger.info", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "Derivation.from_str.words"], "function", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.from_str", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.demonstrate_command", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.demonstrate_target_commands", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.words"], ["", "def", "test_demonstrate_target_commands_two", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Test that target commands sequence resulting from demonstrate_command for pushing a heavy objectis the same as\n     the executed one by demonstrate_target_commands\"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "rules_str", "=", "\"NP -> NN,NP -> JJ NP,DP -> 'a' NP,VP -> VV_trans DP,ROOT -> VP\"", "\n", "translate_fn", "=", "dataset", ".", "_vocabulary", ".", "translate_meaning", "\n", "lexicon_str", "=", "\"T:{},NT:VV_transitive -> {},T:a,T:{},NT:JJ -> {},T:{},NT:NN -> {}\"", ".", "format", "(", "\n", "translate_fn", "(", "\"push\"", ")", ",", "translate_fn", "(", "\"push\"", ")", ",", "translate_fn", "(", "\"big\"", ")", ",", "translate_fn", "(", "\"big\"", ")", ",", "translate_fn", "(", "\"circle\"", ")", ",", "\n", "translate_fn", "(", "\"circle\"", ")", "\n", ")", "\n", "derivation", "=", "Derivation", ".", "from_str", "(", "rules_str", ",", "lexicon_str", ",", "dataset", ".", "_grammar", ")", "\n", "actual_target_commands", ",", "_", ",", "_", "=", "dataset", ".", "demonstrate_command", "(", "derivation", ",", "initial_situation", "=", "TEST_SITUATION_2", ")", "\n", "command", "=", "' '", ".", "join", "(", "derivation", ".", "words", "(", ")", ")", "\n", "target_commands", ",", "_", ",", "_", ",", "_", "=", "dataset", ".", "demonstrate_target_commands", "(", "command", ",", "TEST_SITUATION_2", ",", "actual_target_commands", ")", "\n", "assert", "','", ".", "join", "(", "actual_target_commands", ")", "==", "','", ".", "join", "(", "target_commands", ")", ",", "\"test_demonstrate_target_commands_two FAILED\"", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_demonstrate_target_commands_two PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_demonstrate_target_commands_three": [[206, 223], ["time.time", "GroundedScan.grammar.Derivation.from_str", "dataset.demonstrate_command", "dataset.demonstrate_target_commands", "time.time", "logger.info", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "Derivation.from_str.words"], "function", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.from_str", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.demonstrate_command", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.demonstrate_target_commands", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.words"], ["", "def", "test_demonstrate_target_commands_three", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Test that target commands sequence resulting from demonstrate_command for pushing a light object is the same as\n     the executed one by demonstrate_target_commands\"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "rules_str", "=", "\"NP -> NN,NP -> JJ NP,DP -> 'a' NP,VP -> VV_trans DP,ROOT -> VP\"", "\n", "translate_fn", "=", "dataset", ".", "_vocabulary", ".", "translate_meaning", "\n", "lexicon_str", "=", "\"T:{},NT:VV_transitive -> {},T:a,T:{},NT:JJ -> {},T:{},NT:NN -> {}\"", ".", "format", "(", "\n", "translate_fn", "(", "\"push\"", ")", ",", "translate_fn", "(", "\"push\"", ")", ",", "translate_fn", "(", "\"small\"", ")", ",", "translate_fn", "(", "\"small\"", ")", ",", "\n", "translate_fn", "(", "\"circle\"", ")", ",", "translate_fn", "(", "\"circle\"", ")", "\n", ")", "\n", "derivation", "=", "Derivation", ".", "from_str", "(", "rules_str", ",", "lexicon_str", ",", "dataset", ".", "_grammar", ")", "\n", "actual_target_commands", ",", "_", ",", "_", "=", "dataset", ".", "demonstrate_command", "(", "derivation", ",", "initial_situation", "=", "TEST_SITUATION_1", ")", "\n", "command", "=", "' '", ".", "join", "(", "derivation", ".", "words", "(", ")", ")", "\n", "target_commands", ",", "_", ",", "_", ",", "_", "=", "dataset", ".", "demonstrate_target_commands", "(", "command", ",", "TEST_SITUATION_1", ",", "actual_target_commands", ")", "\n", "assert", "','", ".", "join", "(", "actual_target_commands", ")", "==", "','", ".", "join", "(", "target_commands", ")", ",", "\"test_demonstrate_target_commands_three FAILED\"", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_demonstrate_target_commands_three PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_demonstrate_command_one": [[225, 241], ["time.time", "GroundedScan.grammar.Derivation.from_str", "dataset.demonstrate_command", "time.time", "logger.info", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn"], "function", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.from_str", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.demonstrate_command"], ["", "def", "test_demonstrate_command_one", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Test pushing a light object (where one target command of 'push <dir>' results in movement of 1 grid).\"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "rules_str", "=", "\"NP -> NN,NP -> JJ NP,DP -> 'a' NP,VP -> VV_trans DP,ROOT -> VP\"", "\n", "translate_fn", "=", "dataset", ".", "_vocabulary", ".", "translate_meaning", "\n", "lexicon_str", "=", "\"T:{},NT:VV_transitive -> {},T:a,T:{},NT:JJ -> {},T:{},NT:NN -> {}\"", ".", "format", "(", "\n", "translate_fn", "(", "\"push\"", ")", ",", "translate_fn", "(", "\"push\"", ")", ",", "translate_fn", "(", "\"small\"", ")", ",", "translate_fn", "(", "\"small\"", ")", ",", "\n", "translate_fn", "(", "\"circle\"", ")", ",", "translate_fn", "(", "\"circle\"", ")", "\n", ")", "\n", "derivation", "=", "Derivation", ".", "from_str", "(", "rules_str", ",", "lexicon_str", ",", "dataset", ".", "_grammar", ")", "\n", "expected_target_commands", "=", "\"walk,walk,turn right,walk,walk,walk,\"", "\"push,push,push,push\"", "\n", "actual_target_commands", ",", "_", ",", "_", "=", "dataset", ".", "demonstrate_command", "(", "derivation", ",", "initial_situation", "=", "TEST_SITUATION_1", ")", "\n", "assert", "expected_target_commands", "==", "','", ".", "join", "(", "actual_target_commands", ")", ",", "\"test_demonstrate_command_one FAILED\"", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_demonstrate_command_one PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_demonstrate_command_two": [[243, 259], ["time.time", "GroundedScan.grammar.Derivation.from_str", "dataset.demonstrate_command", "time.time", "logger.info", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn"], "function", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.from_str", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.demonstrate_command"], ["", "def", "test_demonstrate_command_two", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Test pushing a heavy object (where one target command of 'push <dir>' results in movement of 1 grid).\"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "rules_str", "=", "\"NP -> NN,NP -> JJ NP,DP -> 'a' NP,VP -> VV_trans DP,ROOT -> VP\"", "\n", "translate_fn", "=", "dataset", ".", "_vocabulary", ".", "translate_meaning", "\n", "lexicon_str", "=", "\"T:{},NT:VV_transitive -> {},T:a,T:{},NT:JJ -> {},T:{},NT:NN -> {}\"", ".", "format", "(", "\n", "translate_fn", "(", "\"push\"", ")", ",", "translate_fn", "(", "\"push\"", ")", ",", "translate_fn", "(", "\"small\"", ")", ",", "translate_fn", "(", "\"small\"", ")", ",", "\n", "translate_fn", "(", "\"circle\"", ")", ",", "translate_fn", "(", "\"circle\"", ")", "\n", ")", "\n", "derivation", "=", "Derivation", ".", "from_str", "(", "rules_str", ",", "lexicon_str", ",", "dataset", ".", "_grammar", ")", "\n", "expected_target_commands", "=", "\"walk,walk,turn right,walk,walk,walk,\"", "\"push,push,push,push,push,push,push,push\"", "\n", "actual_target_commands", ",", "_", ",", "_", "=", "dataset", ".", "demonstrate_command", "(", "derivation", ",", "initial_situation", "=", "TEST_SITUATION_2", ")", "\n", "assert", "expected_target_commands", "==", "','", ".", "join", "(", "actual_target_commands", ")", ",", "\"test_demonstrate_command_two FAILED\"", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_demonstrate_command_two PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_demonstrate_command_three": [[261, 278], ["time.time", "GroundedScan.grammar.Derivation.from_str", "dataset.demonstrate_command", "time.time", "logger.info", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn"], "function", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.from_str", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.demonstrate_command"], ["", "def", "test_demonstrate_command_three", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Test walk to a small circle, tests that the function demonstrate command is able to find the target small circle\n    even if that circle isn't explicitly set as the target object in the situation (which it wouldn't be at test time).\n    \"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "rules_str", "=", "\"NP -> NN,NP -> JJ NP,DP -> 'a' NP,VP -> VV_intrans 'to' DP,ROOT -> VP\"", "\n", "translate_fn", "=", "dataset", ".", "_vocabulary", ".", "translate_meaning", "\n", "lexicon_str", "=", "\"T:{},NT:VV_intransitive -> {},T:to,T:a,T:{},NT:JJ -> {},T:{},NT:NN -> {}\"", ".", "format", "(", "\n", "translate_fn", "(", "\"walk\"", ")", ",", "translate_fn", "(", "\"walk\"", ")", ",", "translate_fn", "(", "\"small\"", ")", ",", "translate_fn", "(", "\"small\"", ")", ",", "translate_fn", "(", "\"circle\"", ")", ",", "\n", "translate_fn", "(", "\"circle\"", ")", "\n", ")", "\n", "derivation", "=", "Derivation", ".", "from_str", "(", "rules_str", ",", "lexicon_str", ",", "dataset", ".", "_grammar", ")", "\n", "expected_target_commands", "=", "\"walk,walk,turn right,walk,walk,walk\"", "\n", "actual_target_commands", ",", "_", ",", "_", "=", "dataset", ".", "demonstrate_command", "(", "derivation", ",", "initial_situation", "=", "TEST_SITUATION_3", ")", "\n", "assert", "expected_target_commands", "==", "','", ".", "join", "(", "actual_target_commands", ")", ",", "\"test_demonstrate_command_three FAILED\"", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_demonstrate_command_three PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_demonstrate_command_four": [[280, 297], ["time.time", "GroundedScan.grammar.Derivation.from_str", "dataset.demonstrate_command", "time.time", "logger.info", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn"], "function", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.from_str", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.demonstrate_command"], ["", "def", "test_demonstrate_command_four", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Test walk to a small circle, tests that the function demonstrate command is able to find the target big circle\n    even if that circle isn't explicitly set as the target object in the situation (which it wouldn't be at test time).\n    \"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "rules_str", "=", "\"NP -> NN,NP -> JJ NP,DP -> 'a' NP,VP -> VV_intrans 'to' DP,ROOT -> VP\"", "\n", "translate_fn", "=", "dataset", ".", "_vocabulary", ".", "translate_meaning", "\n", "lexicon_str", "=", "\"T:{},NT:VV_intransitive -> {},T:to,T:a,T:{},NT:JJ -> {},T:{},NT:NN -> {}\"", ".", "format", "(", "\n", "translate_fn", "(", "\"walk\"", ")", ",", "translate_fn", "(", "\"walk\"", ")", ",", "translate_fn", "(", "\"big\"", ")", ",", "translate_fn", "(", "\"big\"", ")", ",", "translate_fn", "(", "\"circle\"", ")", ",", "\n", "translate_fn", "(", "\"circle\"", ")", "\n", ")", "\n", "derivation", "=", "Derivation", ".", "from_str", "(", "rules_str", ",", "lexicon_str", ",", "dataset", ".", "_grammar", ")", "\n", "expected_target_commands", "=", "\"turn left,turn left,walk,turn right,walk,walk,walk,walk\"", "\n", "actual_target_commands", ",", "_", ",", "_", "=", "dataset", ".", "demonstrate_command", "(", "derivation", ",", "initial_situation", "=", "TEST_SITUATION_3", ")", "\n", "assert", "expected_target_commands", "==", "','", ".", "join", "(", "actual_target_commands", ")", ",", "\"test_demonstrate_command_four FAILED\"", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_demonstrate_command_four PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_demonstrate_command_five": [[299, 314], ["time.time", "GroundedScan.grammar.Derivation.from_str", "dataset.demonstrate_command", "time.time", "logger.info", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn"], "function", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.from_str", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.demonstrate_command"], ["", "def", "test_demonstrate_command_five", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Test that when referring to a small red circle and two present in the world, it finds the correct one.\"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "rules_str", "=", "\"NP -> NN,NP -> JJ NP,NP -> JJ NP,DP -> 'a' NP,VP -> VV_intrans 'to' DP,ROOT -> VP\"", "\n", "translate_fn", "=", "dataset", ".", "_vocabulary", ".", "translate_meaning", "\n", "lexicon_str", "=", "\"T:{},NT:VV_intransitive -> {},T:to,T:a,T:{},NT:JJ -> {}:JJ -> {},T:{},T:{},NT:\"", "\"NN -> {}\"", ".", "format", "(", "translate_fn", "(", "\"walk\"", ")", ",", "translate_fn", "(", "\"walk\"", ")", ",", "translate_fn", "(", "\"red\"", ")", ",", "\n", "translate_fn", "(", "\"small\"", ")", ",", "translate_fn", "(", "\"red\"", ")", ",", "translate_fn", "(", "\"small\"", ")", ",", "\n", "translate_fn", "(", "\"circle\"", ")", ",", "translate_fn", "(", "\"circle\"", ")", ")", "\n", "derivation", "=", "Derivation", ".", "from_str", "(", "rules_str", ",", "lexicon_str", ",", "dataset", ".", "_grammar", ")", "\n", "expected_target_commands", "=", "\"walk,walk,turn right,walk,walk,walk\"", "\n", "actual_target_commands", ",", "_", ",", "_", "=", "dataset", ".", "demonstrate_command", "(", "derivation", ",", "initial_situation", "=", "TEST_SITUATION_4", ")", "\n", "assert", "expected_target_commands", "==", "','", ".", "join", "(", "actual_target_commands", ")", ",", "\"test_demonstrate_command_five FAILED\"", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_demonstrate_command_five PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_demonstrate_command_six": [[316, 334], ["time.time", "GroundedScan.grammar.Derivation.from_str", "time.time", "logger.info", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "dataset.demonstrate_command"], "function", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.from_str", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.demonstrate_command"], ["", "def", "test_demonstrate_command_six", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Test that when referring to a small red circle but only one red circle is present, demonstrate_commands fails.\"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "rules_str", "=", "\"NP -> NN,NP -> JJ NP,NP -> JJ NP,DP -> 'a' NP,VP -> VV_intrans 'to' DP,ROOT -> VP\"", "\n", "translate_fn", "=", "dataset", ".", "_vocabulary", ".", "translate_meaning", "\n", "lexicon_str", "=", "\"T:{},NT:VV_intransitive -> {},T:to,T:a,T:{},NT:JJ -> {}:JJ -> {},T:{},T:{},NT:\"", "\"NN -> {}\"", ".", "format", "(", "translate_fn", "(", "\"walk\"", ")", ",", "translate_fn", "(", "\"walk\"", ")", ",", "translate_fn", "(", "\"red\"", ")", ",", "\n", "translate_fn", "(", "\"small\"", ")", ",", "translate_fn", "(", "\"red\"", ")", ",", "translate_fn", "(", "\"small\"", ")", ",", "\n", "translate_fn", "(", "\"circle\"", ")", ",", "translate_fn", "(", "\"circle\"", ")", ")", "\n", "derivation", "=", "Derivation", ".", "from_str", "(", "rules_str", ",", "lexicon_str", ",", "dataset", ".", "_grammar", ")", "\n", "expected_target_commands", "=", "\"\"", "\n", "try", ":", "\n", "        ", "actual_target_commands", ",", "_", ",", "_", "=", "dataset", ".", "demonstrate_command", "(", "derivation", ",", "initial_situation", "=", "TEST_SITUATION_3", ")", "\n", "", "except", "AssertionError", ":", "\n", "        ", "actual_target_commands", "=", "\"\"", "\n", "", "assert", "expected_target_commands", "==", "','", ".", "join", "(", "actual_target_commands", ")", ",", "\"test_demonstrate_command_six FAILED\"", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_demonstrate_command_six PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_find_referred_target_one": [[336, 358], ["time.time", "GroundedScan.grammar.Derivation.from_str", "Derivation.from_str.meaning", "arguments.pop().to_predicate", "time.time", "logger.info", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "len", "translate_fn", "translate_fn", "translate_fn", "arguments.pop", "translate_fn_word", "target_str.split"], "function", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.from_str", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.meaning", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.LogicalForm.to_predicate", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.pop"], ["", "def", "test_find_referred_target_one", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Test that for particular referred targets, the Derivation class identifies it correctly.\"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "rules_str", "=", "\"NP -> NN,NP -> JJ NP,NP -> JJ NP,DP -> 'a' NP,VP -> VV_intrans 'to' DP,ROOT -> VP\"", "\n", "translate_fn", "=", "dataset", ".", "_vocabulary", ".", "translate_meaning", "\n", "lexicon_str", "=", "\"T:{},NT:VV_intransitive -> {},T:to,T:a,T:{},NT:JJ -> {}:JJ -> {},T:{},T:{},NT:\"", "\"NN -> {}\"", ".", "format", "(", "translate_fn", "(", "\"walk\"", ")", ",", "translate_fn", "(", "\"walk\"", ")", ",", "translate_fn", "(", "\"red\"", ")", ",", "\n", "translate_fn", "(", "\"small\"", ")", ",", "translate_fn", "(", "\"red\"", ")", ",", "translate_fn", "(", "\"small\"", ")", ",", "\n", "translate_fn", "(", "\"circle\"", ")", ",", "translate_fn", "(", "\"circle\"", ")", ")", "\n", "derivation", "=", "Derivation", ".", "from_str", "(", "rules_str", ",", "lexicon_str", ",", "dataset", ".", "_grammar", ")", "\n", "arguments", "=", "[", "]", "\n", "derivation", ".", "meaning", "(", "arguments", ")", "\n", "assert", "len", "(", "arguments", ")", "==", "1", ",", "\"test_find_referred_target_one FAILED.\"", "\n", "target_str", ",", "target_predicate", "=", "arguments", ".", "pop", "(", ")", ".", "to_predicate", "(", ")", "\n", "translate_fn_word", "=", "dataset", ".", "_vocabulary", ".", "translate_word", "\n", "translated_target_str", "=", "' '", ".", "join", "(", "[", "translate_fn_word", "(", "word", ")", "for", "word", "in", "target_str", ".", "split", "(", ")", "]", ")", "\n", "assert", "translated_target_str", "==", "\"red circle\"", ",", "\"test_find_referred_target FAILED.\"", "\n", "assert", "target_predicate", "[", "\"noun\"", "]", "==", "translate_fn", "(", "\"circle\"", ")", ",", "\"test_find_referred_target_one FAILED.\"", "\n", "assert", "target_predicate", "[", "\"size\"", "]", "==", "translate_fn", "(", "\"small\"", ")", ",", "\"test_find_referred_target_one FAILED.\"", "\n", "assert", "target_predicate", "[", "\"color\"", "]", "==", "translate_fn", "(", "\"red\"", ")", ",", "\"test_find_referred_target_one FAILED.\"", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_find_referred_target_one PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_find_referred_target_two": [[360, 382], ["time.time", "GroundedScan.grammar.Derivation.from_str", "Derivation.from_str.meaning", "arguments.pop().to_predicate", "time.time", "logger.info", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "len", "translate_fn", "translate_fn", "translate_fn", "arguments.pop", "translate_fn_word", "target_str.split"], "function", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.from_str", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.meaning", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.LogicalForm.to_predicate", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.pop"], ["", "def", "test_find_referred_target_two", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Test that for particular referred targets, the Derivation class identifies it correctly.\"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "rules_str", "=", "\"NP -> NN,NP -> JJ NP,DP -> 'a' NP,VP -> VV_intrans 'to' DP,ROOT -> VP\"", "\n", "translate_fn", "=", "dataset", ".", "_vocabulary", ".", "translate_meaning", "\n", "lexicon_str", "=", "\"T:{},NT:VV_intransitive -> {},T:to,T:a,T:{},NT:JJ -> {},T:{},NT:NN -> {}\"", ".", "format", "(", "\n", "translate_fn", "(", "\"walk\"", ")", ",", "translate_fn", "(", "\"walk\"", ")", ",", "translate_fn", "(", "\"big\"", ")", ",", "translate_fn", "(", "\"big\"", ")", ",", "translate_fn", "(", "\"circle\"", ")", ",", "\n", "translate_fn", "(", "\"circle\"", ")", "\n", ")", "\n", "derivation", "=", "Derivation", ".", "from_str", "(", "rules_str", ",", "lexicon_str", ",", "dataset", ".", "_grammar", ")", "\n", "arguments", "=", "[", "]", "\n", "derivation", ".", "meaning", "(", "arguments", ")", "\n", "assert", "len", "(", "arguments", ")", "==", "1", ",", "\"test_find_referred_target_two FAILED.\"", "\n", "target_str", ",", "target_predicate", "=", "arguments", ".", "pop", "(", ")", ".", "to_predicate", "(", ")", "\n", "translate_fn_word", "=", "dataset", ".", "_vocabulary", ".", "translate_word", "\n", "translated_target_str", "=", "' '", ".", "join", "(", "[", "translate_fn_word", "(", "word", ")", "for", "word", "in", "target_str", ".", "split", "(", ")", "]", ")", "\n", "assert", "translated_target_str", "==", "\"circle\"", ",", "\"test_find_referred_target_two FAILED.\"", "\n", "assert", "target_predicate", "[", "\"noun\"", "]", "==", "translate_fn", "(", "\"circle\"", ")", ",", "\"test_find_referred_target_two FAILED.\"", "\n", "assert", "target_predicate", "[", "\"size\"", "]", "==", "translate_fn", "(", "\"big\"", ")", ",", "\"test_find_referred_target_two FAILED.\"", "\n", "assert", "target_predicate", "[", "\"color\"", "]", "==", "translate_fn", "(", "\"\"", ")", ",", "\"test_find_referred_target_two FAILED.\"", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_find_referred_target_two PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_generate_possible_targets_one": [[384, 401], ["time.time", "dataset.generate_possible_targets", "time.time", "logger.info", "translate_meaning", "translate_meaning", "translate_meaning", "translate_word", "translate_word", "translate_word"], "function", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.generate_possible_targets", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_meaning", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_meaning", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_meaning", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_word"], ["", "def", "test_generate_possible_targets_one", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Test that for particular referred targets, the right possible target objects get generated.\"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "translate_meaning", "=", "dataset", ".", "_vocabulary", ".", "translate_meaning", "\n", "target_predicate", "=", "{", "\"noun\"", ":", "translate_meaning", "(", "\"circle\"", ")", ",", "\n", "\"color\"", ":", "translate_meaning", "(", "\"red\"", ")", ",", "\n", "\"size\"", ":", "translate_meaning", "(", "\"big\"", ")", "}", "\n", "translate_word", "=", "dataset", ".", "_vocabulary", ".", "translate_word", "\n", "expected_possible_targets", "=", "{", "(", "2", ",", "\"red\"", ",", "\"circle\"", ")", ",", "(", "3", ",", "\"red\"", ",", "\"circle\"", ")", ",", "(", "4", ",", "\"red\"", ",", "\"circle\"", ")", "}", "\n", "actual_possible_targets", "=", "dataset", ".", "generate_possible_targets", "(", "\n", "referred_size", "=", "translate_word", "(", "target_predicate", "[", "\"size\"", "]", ")", ",", "\n", "referred_color", "=", "translate_word", "(", "target_predicate", "[", "\"color\"", "]", ")", ",", "\n", "referred_shape", "=", "translate_word", "(", "target_predicate", "[", "\"noun\"", "]", ")", ")", "\n", "for", "actual_possible_target", "in", "actual_possible_targets", ":", "\n", "        ", "assert", "actual_possible_target", "in", "expected_possible_targets", ",", "\"test_generate_possible_targets_one FAILED.\"", "\n", "", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_generate_possible_targets_one PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_generate_possible_targets_two": [[403, 422], ["time.time", "dataset.generate_possible_targets", "zip", "time.time", "logger.info", "translate_meaning", "translate_meaning", "translate_meaning", "translate_word", "translate_word", "translate_word"], "function", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.generate_possible_targets", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_meaning", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_meaning", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_meaning", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_word"], ["", "def", "test_generate_possible_targets_two", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Test that for particular referred targets, the right possible target objects get generated.\"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "translate_meaning", "=", "dataset", ".", "_vocabulary", ".", "translate_meaning", "\n", "target_predicate", "=", "{", "\"noun\"", ":", "translate_meaning", "(", "\"circle\"", ")", ",", "\n", "\"color\"", ":", "translate_meaning", "(", "\"red\"", ")", ",", "\n", "\"size\"", ":", "translate_meaning", "(", "\"small\"", ")", "}", "\n", "translate_word", "=", "dataset", ".", "_vocabulary", ".", "translate_word", "\n", "expected_possible_targets", "=", "{", "(", "1", ",", "\"red\"", ",", "\"circle\"", ")", ",", "(", "2", ",", "\"red\"", ",", "\"circle\"", ")", ",", "(", "3", ",", "\"red\"", ",", "\"circle\"", ")", ",", "\n", "(", "1", ",", "\"blue\"", ",", "\"circle\"", ")", ",", "(", "2", ",", "\"blue\"", ",", "\"circle\"", ")", ",", "(", "3", ",", "\"blue\"", ",", "\"circle\"", ")", ",", "\n", "(", "1", ",", "\"green\"", ",", "\"circle\"", ")", ",", "(", "2", ",", "\"green\"", ",", "\"circle\"", ")", ",", "(", "3", ",", "\"green\"", ",", "\"circle\"", ")", "}", "\n", "actual_possible_targets", "=", "dataset", ".", "generate_possible_targets", "(", "\n", "referred_size", "=", "translate_word", "(", "target_predicate", "[", "\"size\"", "]", ")", ",", "\n", "referred_color", "=", "translate_word", "(", "target_predicate", "[", "\"color\"", "]", ")", ",", "\n", "referred_shape", "=", "translate_word", "(", "target_predicate", "[", "\"noun\"", "]", ")", ")", "\n", "for", "expected_possible_target", ",", "actual_possible_target", "in", "zip", "(", "expected_possible_targets", ",", "actual_possible_targets", ")", ":", "\n", "        ", "assert", "actual_possible_target", "in", "expected_possible_targets", ",", "\"test_generate_possible_targets_two FAILED.\"", "\n", "", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_generate_possible_targets_two PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_generate_situations_one": [[424, 456], ["time.time", "translate_meaning", "translate_meaning", "translate_meaning", "dataset.generate_situations", "[].pop", "dataset.initialize_world_from_spec", "dataset._world.object_positions().pop", "dataset._world.object_positions", "time.time", "logger.info", "len", "dataset._world.object_positions", "larger_objects.extend"], "function", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_meaning", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_meaning", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_meaning", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.generate_situations", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.initialize_world_from_spec", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.object_positions", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.object_positions"], ["", "def", "test_generate_situations_one", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Test that when a small green circle is referred to there exist no smaller green circles than the target object in\n    the world and at least one larger green circle.\"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "translate_meaning", "=", "dataset", ".", "_vocabulary", ".", "translate_meaning", "\n", "target_shape", "=", "\"circle\"", "\n", "target_color", "=", "\"green\"", "\n", "target_size", "=", "2", "\n", "referred_size", "=", "translate_meaning", "(", "\"small\"", ")", "\n", "referred_color", "=", "translate_meaning", "(", "\"green\"", ")", "\n", "referred_shape", "=", "translate_meaning", "(", "\"circle\"", ")", "\n", "situation_specifications", "=", "dataset", ".", "generate_situations", "(", "num_resampling", "=", "1", ")", "\n", "relevant_situation", "=", "situation_specifications", "[", "target_shape", "]", "[", "target_color", "]", "[", "target_size", "]", ".", "pop", "(", ")", "\n", "dataset", ".", "initialize_world_from_spec", "(", "relevant_situation", ",", "referred_size", "=", "referred_size", ",", "\n", "referred_color", "=", "referred_color", ",", "\n", "referred_shape", "=", "referred_shape", ",", "\n", "actual_size", "=", "target_size", ",", "\n", "sample_percentage", "=", "0.5", "\n", ")", "\n", "smallest_object", "=", "dataset", ".", "_world", ".", "object_positions", "(", "\"green circle\"", ",", "\n", "object_size", "=", "\"small\"", ")", ".", "pop", "(", ")", "\n", "assert", "smallest_object", "==", "relevant_situation", "[", "\"target_position\"", "]", ",", "\"test_generate_situations_one FAILED.\"", "\n", "other_related_objects", "=", "dataset", ".", "_world", ".", "object_positions", "(", "\"green circle\"", ")", "\n", "larger_objects", "=", "[", "]", "\n", "for", "size", ",", "sized_objects", "in", "other_related_objects", ":", "\n", "        ", "if", "size", "<", "target_size", ":", "\n", "            ", "assert", "not", "sized_objects", ",", "\"test_generate_situations_one FAILED.\"", "\n", "", "elif", "size", ">", "target_size", ":", "\n", "            ", "larger_objects", ".", "extend", "(", "sized_objects", ")", "\n", "", "", "assert", "len", "(", "larger_objects", ")", ">=", "1", ",", "\"test_generate_situations_one FAILED.\"", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_generate_situations_one PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_generate_situations_two": [[458, 490], ["time.time", "translate_meaning", "translate_meaning", "translate_meaning", "dataset.generate_situations", "[].pop", "dataset.initialize_world_from_spec", "dataset._world.object_positions().pop", "dataset._world.object_positions", "time.time", "logger.info", "len", "dataset._world.object_positions", "smaller_objects.extend"], "function", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_meaning", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_meaning", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_meaning", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.generate_situations", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.initialize_world_from_spec", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.object_positions", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.object_positions"], ["", "def", "test_generate_situations_two", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Test that when a big green circle is referred to there exists no larger green circles and the exists at least\n    one smaller green circle.\"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "translate_meaning", "=", "dataset", ".", "_vocabulary", ".", "translate_meaning", "\n", "target_shape", "=", "\"circle\"", "\n", "target_color", "=", "\"green\"", "\n", "target_size", "=", "2", "\n", "referred_size", "=", "translate_meaning", "(", "\"big\"", ")", "\n", "referred_color", "=", "translate_meaning", "(", "\"green\"", ")", "\n", "referred_shape", "=", "translate_meaning", "(", "\"circle\"", ")", "\n", "situation_specifications", "=", "dataset", ".", "generate_situations", "(", "num_resampling", "=", "1", ")", "\n", "relevant_situation", "=", "situation_specifications", "[", "target_shape", "]", "[", "target_color", "]", "[", "target_size", "]", ".", "pop", "(", ")", "\n", "dataset", ".", "initialize_world_from_spec", "(", "relevant_situation", ",", "referred_size", "=", "referred_size", ",", "\n", "referred_color", "=", "referred_color", ",", "\n", "referred_shape", "=", "referred_shape", ",", "\n", "actual_size", "=", "target_size", ",", "\n", "sample_percentage", "=", "0.5", "\n", ")", "\n", "largest_object", "=", "dataset", ".", "_world", ".", "object_positions", "(", "\"green circle\"", ",", "\n", "object_size", "=", "\"big\"", ")", ".", "pop", "(", ")", "\n", "assert", "largest_object", "==", "relevant_situation", "[", "\"target_position\"", "]", ",", "\"test_generate_situations_two FAILED.\"", "\n", "other_related_objects", "=", "dataset", ".", "_world", ".", "object_positions", "(", "\"green circle\"", ")", "\n", "smaller_objects", "=", "[", "]", "\n", "for", "size", ",", "sized_objects", "in", "other_related_objects", ":", "\n", "        ", "if", "size", ">", "target_size", ":", "\n", "            ", "assert", "not", "sized_objects", ",", "\"test_generate_situations_two FAILED.\"", "\n", "", "elif", "size", "<", "target_size", ":", "\n", "            ", "smaller_objects", ".", "extend", "(", "sized_objects", ")", "\n", "", "", "assert", "len", "(", "smaller_objects", ")", ">=", "1", ",", "\"test_generate_situations_two FAILED.\"", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_generate_situations_two PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_generate_situations_three": [[492, 522], ["time.time", "translate_meaning", "translate_meaning", "dataset.generate_situations", "[].pop", "dataset.initialize_world_from_spec", "dataset._world.object_positions().pop", "dataset._world.object_positions", "time.time", "logger.info", "len", "dataset._world.object_positions", "smaller_objects.extend"], "function", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_meaning", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_meaning", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.generate_situations", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.initialize_world_from_spec", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.object_positions", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.object_positions"], ["", "def", "test_generate_situations_three", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Test that for particular commands the right situations get matched.\"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "translate_meaning", "=", "dataset", ".", "_vocabulary", ".", "translate_meaning", "\n", "target_shape", "=", "\"circle\"", "\n", "target_color", "=", "\"green\"", "\n", "target_size", "=", "2", "\n", "referred_size", "=", "translate_meaning", "(", "\"big\"", ")", "\n", "referred_shape", "=", "translate_meaning", "(", "\"circle\"", ")", "\n", "situation_specifications", "=", "dataset", ".", "generate_situations", "(", "num_resampling", "=", "1", ")", "\n", "relevant_situation", "=", "situation_specifications", "[", "target_shape", "]", "[", "target_color", "]", "[", "target_size", "]", ".", "pop", "(", ")", "\n", "dataset", ".", "initialize_world_from_spec", "(", "relevant_situation", ",", "referred_size", "=", "referred_size", ",", "\n", "referred_color", "=", "\"\"", ",", "\n", "referred_shape", "=", "referred_shape", ",", "\n", "actual_size", "=", "target_size", ",", "\n", "sample_percentage", "=", "0.5", "\n", ")", "\n", "largest_object", "=", "dataset", ".", "_world", ".", "object_positions", "(", "\"circle\"", ",", "\n", "object_size", "=", "\"big\"", ")", ".", "pop", "(", ")", "\n", "assert", "largest_object", "==", "relevant_situation", "[", "\"target_position\"", "]", ",", "\"test_generate_situations_three FAILED.\"", "\n", "other_related_objects", "=", "dataset", ".", "_world", ".", "object_positions", "(", "\"circle\"", ")", "\n", "smaller_objects", "=", "[", "]", "\n", "for", "size", ",", "sized_objects", "in", "other_related_objects", ":", "\n", "        ", "if", "size", ">", "target_size", ":", "\n", "            ", "assert", "not", "sized_objects", ",", "\"test_generate_situations_three FAILED.\"", "\n", "", "elif", "size", "<", "target_size", ":", "\n", "            ", "smaller_objects", ".", "extend", "(", "sized_objects", ")", "\n", "", "", "assert", "len", "(", "smaller_objects", ")", ">=", "1", ",", "\"test_generate_situations_three FAILED.\"", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_generate_situations_three PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_situation_representation_eq": [[524, 535], ["time.time", "enumerate", "time.time", "logger.info", "enumerate"], "function", ["None"], ["", "def", "test_situation_representation_eq", "(", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "test_situations", "=", "[", "TEST_SITUATION_1", ",", "TEST_SITUATION_2", ",", "TEST_SITUATION_3", ",", "TEST_SITUATION_4", "]", "\n", "for", "i", ",", "test_situation_1", "in", "enumerate", "(", "test_situations", ")", ":", "\n", "        ", "for", "j", ",", "test_situation_2", "in", "enumerate", "(", "test_situations", ")", ":", "\n", "            ", "if", "i", "==", "j", ":", "\n", "                ", "assert", "test_situation_1", "==", "test_situation_2", ",", "\"test_situation_representation_eq FAILED.\"", "\n", "", "else", ":", "\n", "                ", "assert", "test_situation_1", "!=", "test_situation_2", ",", "\"test_situation_representation_eq FAILED.\"", "\n", "", "", "", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_situation_representation_eq PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_example_representation_eq": [[537, 563], ["time.time", "GroundedScan.grammar.Derivation.from_str", "Derivation.from_str.meaning", "arguments.pop().to_predicate", "Derivation.from_str.words", "dataset.demonstrate_command", "TEST_DATASET.fill_example", "TEST_DATASET.get_data_pairs", "dataset._data_pairs.items", "time.time", "logger.info", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "Derivation.from_str.words", "arguments.pop", "dataset._vocabulary.get_adverbs", "dataset.compare_examples"], "function", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.from_str", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.meaning", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.LogicalForm.to_predicate", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.words", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.demonstrate_command", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.fill_example", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.get_data_pairs", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.words", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.get_adverbs", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.compare_examples"], ["", "def", "test_example_representation_eq", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Test that the function for comparing examples returns true when exactly the same example is passed twice.\"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "rules_str", "=", "\"NP -> NN,NP -> JJ NP,DP -> 'a' NP,VP -> VV_intrans 'to' DP,ROOT -> VP\"", "\n", "translate_fn", "=", "dataset", ".", "_vocabulary", ".", "translate_meaning", "\n", "lexicon_str", "=", "\"T:{},NT:VV_intransitive -> {},T:to,T:a,T:{},NT:JJ -> {},T:{},NT:NN -> {}\"", ".", "format", "(", "\n", "translate_fn", "(", "\"walk\"", ")", ",", "translate_fn", "(", "\"walk\"", ")", ",", "translate_fn", "(", "\"big\"", ")", ",", "translate_fn", "(", "\"big\"", ")", ",", "translate_fn", "(", "\"circle\"", ")", ",", "\n", "translate_fn", "(", "\"circle\"", ")", "\n", ")", "\n", "derivation", "=", "Derivation", ".", "from_str", "(", "rules_str", ",", "lexicon_str", ",", "dataset", ".", "_grammar", ")", "\n", "arguments", "=", "[", "]", "\n", "derivation", ".", "meaning", "(", "arguments", ")", "\n", "target_str", ",", "target_predicate", "=", "arguments", ".", "pop", "(", ")", ".", "to_predicate", "(", ")", "\n", "adverb", "=", "\"\"", "\n", "for", "word", "in", "derivation", ".", "words", "(", ")", ":", "\n", "        ", "if", "word", "in", "dataset", ".", "_vocabulary", ".", "get_adverbs", "(", ")", ":", "\n", "            ", "adverb", "=", "word", "\n", "", "", "target_commands", ",", "_", ",", "target_action", "=", "dataset", ".", "demonstrate_command", "(", "derivation", ",", "initial_situation", "=", "TEST_SITUATION_1", ")", "\n", "TEST_DATASET", ".", "fill_example", "(", "derivation", ".", "words", "(", ")", ",", "derivation", ",", "TEST_SITUATION_1", ",", "target_commands", ",", "target_action", ",", "\n", "target_predicate", ",", "visualize", "=", "False", ",", "splits", "=", "[", "\"train\"", "]", ",", "adverb", "=", "adverb", ")", "\n", "TEST_DATASET", ".", "get_data_pairs", "(", "max_examples", "=", "10", ",", "num_resampling", "=", "2", ")", "\n", "for", "split", ",", "examples", "in", "dataset", ".", "_data_pairs", ".", "items", "(", ")", ":", "\n", "        ", "for", "example", "in", "examples", ":", "\n", "            ", "assert", "dataset", ".", "compare_examples", "(", "example", ",", "example", ")", ",", "\"test_example_representation_eq FAILED.\"", "\n", "", "", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_example_representation_eq PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_example_representation": [[565, 606], ["time.time", "GroundedScan.grammar.Derivation.from_str", "Derivation.from_str.meaning", "arguments.pop().to_predicate", "Derivation.from_str.words", "dataset.demonstrate_command", "dataset.fill_example", "dataset._data_pairs[].pop", "dataset.parse_example", "GroundedScan.world.Situation.from_representation", "time.time", "logger.info", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "Derivation.from_str.words", "dataset.command_repr", "dataset.command_repr", "dataset.derivation_repr", "dataset.command_repr", "dataset._vocabulary.translate_word", "arguments.pop", "dataset._vocabulary.get_adverbs", "dataset._vocabulary.translate_word", "dataset._vocabulary.translate_word", "dataset._vocabulary.translate_word"], "function", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.from_str", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.meaning", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.LogicalForm.to_predicate", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.words", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.demonstrate_command", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.fill_example", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.parse_example", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.from_representation", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.words", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.command_repr", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.command_repr", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.derivation_repr", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.command_repr", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.get_adverbs", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_word"], ["", "def", "test_example_representation", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Test that when you save an example in its representation its the same if you parse it again.\"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "rules_str", "=", "\"NP -> NN,NP -> JJ NP,DP -> 'a' NP,VP -> VV_intrans 'to' DP,ROOT -> VP\"", "\n", "translate_fn", "=", "dataset", ".", "_vocabulary", ".", "translate_meaning", "\n", "lexicon_str", "=", "\"T:{},NT:VV_intransitive -> {},T:to,T:a,T:{},NT:JJ -> {},T:{},NT:NN -> {}\"", ".", "format", "(", "\n", "translate_fn", "(", "\"walk\"", ")", ",", "translate_fn", "(", "\"walk\"", ")", ",", "translate_fn", "(", "\"big\"", ")", ",", "translate_fn", "(", "\"big\"", ")", ",", "translate_fn", "(", "\"circle\"", ")", ",", "\n", "translate_fn", "(", "\"circle\"", ")", "\n", ")", "\n", "derivation", "=", "Derivation", ".", "from_str", "(", "rules_str", ",", "lexicon_str", ",", "dataset", ".", "_grammar", ")", "\n", "arguments", "=", "[", "]", "\n", "derivation", ".", "meaning", "(", "arguments", ")", "\n", "target_str", ",", "target_predicate", "=", "arguments", ".", "pop", "(", ")", ".", "to_predicate", "(", ")", "\n", "adverb", "=", "\"\"", "\n", "for", "word", "in", "derivation", ".", "words", "(", ")", ":", "\n", "        ", "if", "word", "in", "dataset", ".", "_vocabulary", ".", "get_adverbs", "(", ")", ":", "\n", "            ", "adverb", "=", "word", "\n", "", "", "target_commands", ",", "_", ",", "target_action", "=", "dataset", ".", "demonstrate_command", "(", "derivation", ",", "initial_situation", "=", "TEST_SITUATION_1", ")", "\n", "dataset", ".", "fill_example", "(", "derivation", ".", "words", "(", ")", ",", "derivation", ",", "TEST_SITUATION_1", ",", "target_commands", ",", "target_action", ",", "\n", "target_predicate", ",", "visualize", "=", "False", ",", "splits", "=", "[", "\"train\"", "]", ",", "adverb", "=", "adverb", ")", "\n", "example", "=", "dataset", ".", "_data_pairs", "[", "\"train\"", "]", ".", "pop", "(", ")", "\n", "(", "parsed_command", ",", "parsed_meaning", ",", "parsed_derivation", ",", "parsed_situation", ",", "\n", "parsed_target_commands", ",", "_", ",", "parsed_action", ")", "=", "dataset", ".", "parse_example", "(", "\n", "example", "\n", ")", "\n", "assert", "example", "[", "\"command\"", "]", "==", "dataset", ".", "command_repr", "(", "parsed_command", ")", ",", "\"test_example_representation FAILED.\"", "\n", "assert", "example", "[", "\"meaning\"", "]", "==", "dataset", ".", "command_repr", "(", "parsed_meaning", ")", ",", "\"test_example_representation FAILED.\"", "\n", "assert", "example", "[", "\"derivation\"", "]", "==", "dataset", ".", "derivation_repr", "(", "parsed_derivation", ")", ",", "\"test_example_representation \"", "\"FAILED.\"", "\n", "situation", "=", "Situation", ".", "from_representation", "(", "example", "[", "\"situation\"", "]", ")", "\n", "assert", "situation", "==", "parsed_situation", ",", "\"test_example_representation FAILED.\"", "\n", "assert", "example", "[", "\"target_commands\"", "]", "==", "dataset", ".", "command_repr", "(", "parsed_target_commands", ")", ",", "\"test_example_representation FAILED.\"", "\n", "assert", "example", "[", "\"verb_in_command\"", "]", "==", "dataset", ".", "_vocabulary", ".", "translate_word", "(", "parsed_action", ")", ",", "\"test_example_representation FAILED.\"", "\n", "assert", "example", "[", "\"referred_target\"", "]", "==", "' '", ".", "join", "(", "[", "dataset", ".", "_vocabulary", ".", "translate_word", "(", "target_predicate", "[", "\"size\"", "]", ")", ",", "\n", "dataset", ".", "_vocabulary", ".", "translate_word", "(", "target_predicate", "[", "\"color\"", "]", ")", ",", "\n", "dataset", ".", "_vocabulary", ".", "translate_word", "(", "target_predicate", "[", "\"noun\"", "]", ")", "]", ")", ",", "\"test_example_representation FAILED.\"", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_example_representation PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_initialize_world": [[608, 629], ["time.time", "dataset._world.get_current_situation", "enumerate", "dataset.initialize_world", "time.time", "logger.info", "enumerate", "dataset._world.clear_situation", "dataset.initialize_world", "dataset._world.get_current_situation", "dataset._world.clear_situation", "dataset.initialize_world", "dataset._world.get_current_situation"], "function", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.get_current_situation", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.initialize_world", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.clear_situation", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.initialize_world", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.get_current_situation", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.clear_situation", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.initialize_world", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.get_current_situation"], ["", "def", "test_initialize_world", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Test that two the same situations get represented in exactly the same image by rendering.py and minigrid.py\"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "test_situations", "=", "[", "TEST_SITUATION_1", ",", "TEST_SITUATION_2", ",", "TEST_SITUATION_3", ",", "TEST_SITUATION_4", "]", "\n", "current_situation", "=", "dataset", ".", "_world", ".", "get_current_situation", "(", ")", "\n", "current_mission", "=", "dataset", ".", "_world", ".", "mission", "\n", "for", "i", ",", "test_situation_1", "in", "enumerate", "(", "test_situations", ")", ":", "\n", "        ", "for", "j", ",", "test_situation_2", "in", "enumerate", "(", "test_situations", ")", ":", "\n", "            ", "dataset", ".", "_world", ".", "clear_situation", "(", ")", "\n", "dataset", ".", "initialize_world", "(", "test_situation_1", ")", "\n", "situation_1", "=", "dataset", ".", "_world", ".", "get_current_situation", "(", ")", "\n", "dataset", ".", "_world", ".", "clear_situation", "(", ")", "\n", "dataset", ".", "initialize_world", "(", "test_situation_2", ")", "\n", "situation_2", "=", "dataset", ".", "_world", ".", "get_current_situation", "(", ")", "\n", "if", "i", "==", "j", ":", "\n", "                ", "assert", "situation_1", "==", "situation_2", ",", "\"test_initialize_world FAILED.\"", "\n", "", "else", ":", "\n", "                ", "assert", "situation_1", "!=", "situation_2", ",", "\"test_initialize_world FAILED.\"", "\n", "", "", "", "dataset", ".", "initialize_world", "(", "current_situation", ",", "mission", "=", "current_mission", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_initialize_world PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_image_representation_situations": [[631, 664], ["time.time", "dataset._world.get_current_situation", "enumerate", "os.remove", "os.remove", "dataset.initialize_world", "time.time", "logger.info", "enumerate", "os.path.join", "os.path.join", "dataset._world.clear_situation", "dataset.initialize_world", "dataset._world.render().getArray", "GroundedScan.helpers.numpy_array_to_image", "GroundedScan.helpers.image_to_numpy_array", "numpy.array_equal", "dataset._world.clear_situation", "dataset.initialize_world", "dataset._world.render().getArray", "GroundedScan.helpers.numpy_array_to_image", "GroundedScan.helpers.image_to_numpy_array", "numpy.array_equal", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "numpy.array_equal", "dataset._world.render", "dataset._world.render", "numpy.array_equal"], "function", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.get_current_situation", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.initialize_world", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.clear_situation", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.initialize_world", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.getArray", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.helpers.numpy_array_to_image", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.helpers.image_to_numpy_array", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.clear_situation", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.initialize_world", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.getArray", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.helpers.numpy_array_to_image", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.helpers.image_to_numpy_array", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv.render", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv.render"], ["", "def", "test_image_representation_situations", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Test that situations are still the same when they need to be in image / numpy RGB array form.\"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "current_situation", "=", "dataset", ".", "_world", ".", "get_current_situation", "(", ")", "\n", "current_mission", "=", "dataset", ".", "_world", ".", "mission", "\n", "test_situations", "=", "[", "TEST_SITUATION_1", ",", "TEST_SITUATION_2", ",", "TEST_SITUATION_3", ",", "TEST_SITUATION_4", "]", "\n", "for", "i", ",", "test_situation_1", "in", "enumerate", "(", "test_situations", ")", ":", "\n", "        ", "for", "j", ",", "test_situation_2", "in", "enumerate", "(", "test_situations", ")", ":", "\n", "            ", "dataset", ".", "_world", ".", "clear_situation", "(", ")", "\n", "dataset", ".", "initialize_world", "(", "test_situation_1", ")", "\n", "np_situation_image_1", "=", "dataset", ".", "_world", ".", "render", "(", "mode", "=", "'human'", ")", ".", "getArray", "(", ")", "\n", "numpy_array_to_image", "(", "np_situation_image_1", ",", "os", ".", "path", ".", "join", "(", "TEST_DIRECTORY", ",", "\"test_im_1.png\"", ")", ")", "\n", "np_situation_image_1_reread", "=", "image_to_numpy_array", "(", "os", ".", "path", ".", "join", "(", "TEST_DIRECTORY", ",", "\"test_im_1.png\"", ")", ")", "\n", "assert", "np", ".", "array_equal", "(", "np_situation_image_1", ",", "\n", "np_situation_image_1_reread", ")", ",", "\"test_image_representation_situations FAILED.\"", "\n", "dataset", ".", "_world", ".", "clear_situation", "(", ")", "\n", "dataset", ".", "initialize_world", "(", "test_situation_2", ")", "\n", "np_situation_image_2", "=", "dataset", ".", "_world", ".", "render", "(", ")", ".", "getArray", "(", ")", "\n", "numpy_array_to_image", "(", "np_situation_image_2", ",", "os", ".", "path", ".", "join", "(", "TEST_DIRECTORY", ",", "\"test_im_2.png\"", ")", ")", "\n", "np_situation_image_2_reread", "=", "image_to_numpy_array", "(", "os", ".", "path", ".", "join", "(", "TEST_DIRECTORY", ",", "\"test_im_2.png\"", ")", ")", "\n", "assert", "np", ".", "array_equal", "(", "np_situation_image_2", ",", "\n", "np_situation_image_2_reread", ")", ",", "\"test_image_representation_situations FAILED.\"", "\n", "if", "i", "==", "j", ":", "\n", "                ", "assert", "np", ".", "array_equal", "(", "np_situation_image_1", ",", "np_situation_image_2", ")", ",", "\"test_image_representation_situations FAILED.\"", "\n", "", "else", ":", "\n", "                ", "assert", "not", "np", ".", "array_equal", "(", "np_situation_image_1", ",", "np_situation_image_2", ")", ",", "\"test_image_representation_situations FAILED.\"", "\n", "", "", "", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "TEST_DIRECTORY", ",", "\"test_im_1.png\"", ")", ")", "\n", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "TEST_DIRECTORY", ",", "\"test_im_2.png\"", ")", ")", "\n", "dataset", ".", "initialize_world", "(", "current_situation", ",", "mission", "=", "current_mission", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_image_representation_situations PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_encode_situation": [[666, 694], ["time.time", "dataset._world.get_current_situation", "GroundedScan.world.Situation", "dataset._world.clear_situation", "dataset.initialize_world", "numpy.zeros", "numpy.array", "dataset._object_vocabulary.get_object_vector", "dataset._object_vocabulary.get_object_vector", "dataset._world.grid.encode", "numpy.array_equal", "dataset.initialize_world", "time.time", "logger.info", "GroundedScan.world.Position", "GroundedScan.world.PositionedObject", "GroundedScan.world.PositionedObject", "GroundedScan.world.PositionedObject", "GroundedScan.world.Object", "GroundedScan.world.Position", "numpy.array", "GroundedScan.world.Object", "GroundedScan.world.Position", "numpy.array", "GroundedScan.world.Object", "GroundedScan.world.Position", "numpy.array"], "function", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.get_current_situation", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.clear_situation", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.initialize_world", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.ObjectVocabulary.get_object_vector", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.ObjectVocabulary.get_object_vector", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.encode", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.initialize_world"], ["", "def", "test_encode_situation", "(", "dataset", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "current_situation", "=", "dataset", ".", "_world", ".", "get_current_situation", "(", ")", "\n", "current_mission", "=", "dataset", ".", "_world", ".", "mission", "\n", "test_situation", "=", "Situation", "(", "grid_size", "=", "15", ",", "agent_position", "=", "Position", "(", "row", "=", "7", ",", "column", "=", "2", ")", ",", "agent_direction", "=", "INT_TO_DIR", "[", "0", "]", ",", "\n", "target_object", "=", "PositionedObject", "(", "object", "=", "Object", "(", "size", "=", "2", ",", "color", "=", "'red'", ",", "shape", "=", "'circle'", ")", ",", "\n", "position", "=", "Position", "(", "row", "=", "7", ",", "column", "=", "2", ")", ",", "\n", "vector", "=", "np", ".", "array", "(", "[", "1", ",", "0", ",", "1", "]", ")", ")", ",", "\n", "placed_objects", "=", "[", "PositionedObject", "(", "object", "=", "Object", "(", "size", "=", "2", ",", "color", "=", "'red'", ",", "shape", "=", "'circle'", ")", ",", "\n", "position", "=", "Position", "(", "row", "=", "7", ",", "column", "=", "2", ")", ",", "\n", "vector", "=", "np", ".", "array", "(", "[", "1", ",", "0", ",", "1", "]", ")", ")", ",", "\n", "PositionedObject", "(", "object", "=", "Object", "(", "size", "=", "4", ",", "color", "=", "'green'", ",", "shape", "=", "'circle'", ")", ",", "\n", "position", "=", "Position", "(", "row", "=", "3", ",", "column", "=", "12", ")", ",", "\n", "vector", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "0", "]", ")", ")", "]", ",", "carrying", "=", "None", ")", "\n", "dataset", ".", "_world", ".", "clear_situation", "(", ")", "\n", "dataset", ".", "initialize_world", "(", "test_situation", ")", "\n", "expected_numpy_array", "=", "np", ".", "zeros", "(", "[", "15", ",", "15", ",", "dataset", ".", "_world", ".", "grid", ".", "_num_attributes_object", "+", "1", "+", "4", "]", ",", "dtype", "=", "'uint8'", ")", "\n", "expected_numpy_array", "[", "7", ",", "2", ",", "-", "5", "]", "=", "1", "\n", "expected_numpy_array", "[", "7", ",", "2", ",", "-", "4", ":", "]", "=", "np", ".", "array", "(", "[", "1", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "expected_numpy_array", "[", "7", ",", "2", ",", ":", "-", "5", "]", "=", "dataset", ".", "_object_vocabulary", ".", "get_object_vector", "(", "shape", "=", "'circle'", ",", "color", "=", "'red'", ",", "\n", "size", "=", "2", ")", "\n", "expected_numpy_array", "[", "3", ",", "12", ",", ":", "-", "5", "]", "=", "dataset", ".", "_object_vocabulary", ".", "get_object_vector", "(", "shape", "=", "'circle'", ",", "color", "=", "'green'", ",", "\n", "size", "=", "4", ")", "\n", "encoded_numpy_array", "=", "dataset", ".", "_world", ".", "grid", ".", "encode", "(", "agent_row", "=", "7", ",", "agent_column", "=", "2", ",", "agent_direction", "=", "0", ")", "\n", "assert", "np", ".", "array_equal", "(", "expected_numpy_array", ",", "encoded_numpy_array", ")", ",", "\"test_encode_situation FAILED.\"", "\n", "dataset", ".", "initialize_world", "(", "current_situation", ",", "mission", "=", "current_mission", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_encode_situation PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_k_shot_generalization": [[696, 755], ["time.time", "dataset._world.get_current_situation", "dataset.get_data_pairs", "examples_per_split.items", "dataset.initialize_world", "time.time", "logger.info", "dataset._vocabulary.translate_meaning", "dataset._vocabulary.get_transitive_verbs", "dataset._vocabulary.translate_meaning", "dataset._vocabulary.get_transitive_verbs"], "function", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.get_current_situation", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.get_data_pairs", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.initialize_world", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_meaning", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.get_transitive_verbs", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_meaning", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.get_transitive_verbs"], ["", "def", "test_k_shot_generalization", "(", "dataset", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "current_situation", "=", "dataset", ".", "_world", ".", "get_current_situation", "(", ")", "\n", "current_mission", "=", "dataset", ".", "_world", ".", "mission", "\n", "k_shot_generalization", "=", "5", "\n", "dataset", ".", "get_data_pairs", "(", "max_examples", "=", "100000", ",", "num_resampling", "=", "1", ",", "other_objects_sample_percentage", "=", "0.5", ",", "\n", "split_type", "=", "\"generalization\"", ",", "k_shot_generalization", "=", "k_shot_generalization", ")", "\n", "# Test that all the splits only contain examples related to their split.", "\n", "visual_split_examples", "=", "dataset", ".", "_data_pairs", "[", "\"visual\"", "]", "\n", "for", "example", "in", "visual_split_examples", ":", "\n", "        ", "target_object", "=", "example", "[", "\"situation\"", "]", "[", "\"target_object\"", "]", "[", "\"object\"", "]", "\n", "assert", "target_object", "[", "\"shape\"", "]", "==", "\"square\"", "and", "target_object", "[", "\"color\"", "]", "==", "\"red\"", ",", "\"test_k_shot_generalization FAILED in split visual.\"", "\n", "", "situational_split_1", "=", "dataset", ".", "_data_pairs", "[", "\"situational_1\"", "]", "\n", "for", "example", "in", "situational_split_1", ":", "\n", "        ", "direction_to_target", "=", "example", "[", "\"situation\"", "]", "[", "\"direction_to_target\"", "]", "\n", "assert", "direction_to_target", "==", "\"sw\"", ",", "\"test_k_shot_generalization FAILED in split situational_1.\"", "\n", "", "situational_split_2", "=", "dataset", ".", "_data_pairs", "[", "\"situational_2\"", "]", "\n", "for", "example", "in", "situational_split_2", ":", "\n", "        ", "referred_target", "=", "example", "[", "\"referred_target\"", "]", "\n", "assert", "\"small\"", "in", "referred_target", ",", "\"test_k_shot_generalization FAILED in split situational_2.\"", "\n", "target_size", "=", "example", "[", "\"situation\"", "]", "[", "\"target_object\"", "]", "[", "\"object\"", "]", "[", "\"size\"", "]", "\n", "assert", "target_size", "==", "'2'", ",", "\"test_k_shot_generalization FAILED in split situational_2.\"", "\n", "", "contextual_split", "=", "dataset", ".", "_data_pairs", "[", "\"contextual\"", "]", "\n", "for", "example", "in", "contextual_split", ":", "\n", "        ", "assert", "(", "dataset", ".", "_vocabulary", ".", "translate_meaning", "(", "example", "[", "\"verb_in_command\"", "]", ")", "\n", "in", "dataset", ".", "_vocabulary", ".", "get_transitive_verbs", "(", ")", ")", ",", "\"test_k_shot_generalization FAILED in split contextual.\"", "\n", "target_object", "=", "example", "[", "\"situation\"", "]", "[", "\"target_object\"", "]", "[", "\"object\"", "]", "\n", "assert", "target_object", "[", "\"shape\"", "]", "==", "\"square\"", "and", "target_object", "[", "\"size\"", "]", "==", "'3'", ",", "\"test_k_shot_generalization FAILED in split contextual.\"", "\n", "\n", "# Test that the training set doesn't contain more than k examples of each of the test splits.", "\n", "", "examples_per_split", "=", "{", "\"visual\"", ":", "0", ",", "\"situational_1\"", ":", "0", ",", "\"situational_2\"", ":", "0", ",", "\"contextual\"", ":", "0", ",", "\"adverb_1\"", ":", "0", "}", "\n", "for", "example", "in", "dataset", ".", "_data_pairs", "[", "\"train\"", "]", ":", "\n", "        ", "target_object", "=", "example", "[", "\"situation\"", "]", "[", "\"target_object\"", "]", "[", "\"object\"", "]", "\n", "target_size", "=", "target_object", "[", "\"size\"", "]", "\n", "direction_to_target", "=", "example", "[", "\"situation\"", "]", "[", "\"direction_to_target\"", "]", "\n", "referred_target", "=", "example", "[", "\"referred_target\"", "]", "\n", "if", "target_object", "[", "\"shape\"", "]", "==", "\"square\"", "and", "target_object", "[", "\"color\"", "]", "==", "\"red\"", ":", "\n", "            ", "examples_per_split", "[", "\"visual\"", "]", "+=", "1", "\n", "", "if", "direction_to_target", "==", "\"sw\"", ":", "\n", "            ", "examples_per_split", "[", "\"situational_1\"", "]", "+=", "1", "\n", "", "if", "\"small\"", "in", "referred_target", "and", "target_size", "==", "2", ":", "\n", "            ", "examples_per_split", "[", "\"situational_2\"", "]", "+=", "1", "\n", "", "if", "(", "dataset", ".", "_vocabulary", ".", "translate_meaning", "(", "example", "[", "\"verb_in_command\"", "]", ")", "in", "\n", "dataset", ".", "_vocabulary", ".", "get_transitive_verbs", "(", ")", "and", "\n", "target_object", "[", "\"shape\"", "]", "==", "\"square\"", "and", "target_object", "[", "\"size\"", "]", "==", "'3'", ")", ":", "\n", "            ", "examples_per_split", "[", "\"contextual\"", "]", "+=", "1", "\n", "", "", "for", "split", ",", "examples_count", "in", "examples_per_split", ".", "items", "(", ")", ":", "\n", "        ", "if", "split", "==", "\"adverb_1\"", ":", "\n", "            ", "assert", "examples_count", "==", "k_shot_generalization", ",", "\"test_k_shot_generalization FAILED in split train for split {}.\"", ".", "format", "(", "split", ")", "\n", "", "else", ":", "\n", "            ", "assert", "examples_count", "==", "0", ",", "\"test_k_shot_generalization FAILED in split train for split {}.\"", ".", "format", "(", "split", ")", "\n", "", "", "dataset", ".", "initialize_world", "(", "current_situation", ",", "mission", "=", "current_mission", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_k_shot_generalization PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.run_all_tests": [[757, 811], ["dataset_test.test_save_and_load_dataset", "dataset_test.test_save_and_load_dataset", "dataset_test.test_save_and_load_dataset_nonce", "dataset_test.test_derivation_from_rules", "dataset_test.test_derivation_from_rules", "dataset_test.test_derivation_from_string", "dataset_test.test_derivation_from_string", "dataset_test.test_demonstrate_target_commands_one", "dataset_test.test_demonstrate_target_commands_one", "dataset_test.test_demonstrate_target_commands_two", "dataset_test.test_demonstrate_target_commands_two", "dataset_test.test_demonstrate_target_commands_three", "dataset_test.test_demonstrate_target_commands_three", "dataset_test.test_demonstrate_command_one", "dataset_test.test_demonstrate_command_one", "dataset_test.test_demonstrate_command_two", "dataset_test.test_demonstrate_command_two", "dataset_test.test_demonstrate_command_three", "dataset_test.test_demonstrate_command_three", "dataset_test.test_demonstrate_command_four", "dataset_test.test_demonstrate_command_four", "dataset_test.test_demonstrate_command_five", "dataset_test.test_demonstrate_command_five", "dataset_test.test_demonstrate_command_six", "dataset_test.test_demonstrate_command_six", "dataset_test.test_find_referred_target_one", "dataset_test.test_find_referred_target_one", "dataset_test.test_find_referred_target_two", "dataset_test.test_find_referred_target_two", "dataset_test.test_generate_possible_targets_one", "dataset_test.test_generate_possible_targets_one", "dataset_test.test_generate_possible_targets_two", "dataset_test.test_generate_possible_targets_two", "dataset_test.test_generate_situations_one", "dataset_test.test_generate_situations_one", "dataset_test.test_generate_situations_two", "dataset_test.test_generate_situations_two", "dataset_test.test_generate_situations_three", "dataset_test.test_generate_situations_three", "dataset_test.test_situation_representation_eq", "dataset_test.test_example_representation_eq", "dataset_test.test_example_representation_eq", "dataset_test.test_example_representation", "dataset_test.test_example_representation", "dataset_test.test_initialize_world", "dataset_test.test_initialize_world", "dataset_test.test_image_representation_situations", "dataset_test.test_image_representation_situations", "dataset_test.test_encode_situation", "dataset_test.test_encode_situation", "shutil.rmtree"], "function", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_save_and_load_dataset", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_save_and_load_dataset", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_save_and_load_dataset_nonce", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_derivation_from_rules", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_derivation_from_rules", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_derivation_from_string", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_derivation_from_string", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_demonstrate_target_commands_one", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_demonstrate_target_commands_one", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_demonstrate_target_commands_two", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_demonstrate_target_commands_two", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_demonstrate_target_commands_three", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_demonstrate_target_commands_three", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_demonstrate_command_one", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_demonstrate_command_one", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_demonstrate_command_two", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_demonstrate_command_two", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_demonstrate_command_three", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_demonstrate_command_three", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_demonstrate_command_four", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_demonstrate_command_four", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_demonstrate_command_five", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_demonstrate_command_five", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_demonstrate_command_six", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_demonstrate_command_six", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_find_referred_target_one", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_find_referred_target_one", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_find_referred_target_two", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_find_referred_target_two", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_generate_possible_targets_one", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_generate_possible_targets_one", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_generate_possible_targets_two", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_generate_possible_targets_two", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_generate_situations_one", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_generate_situations_one", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_generate_situations_two", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_generate_situations_two", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_generate_situations_three", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_generate_situations_three", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_situation_representation_eq", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_example_representation_eq", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_example_representation_eq", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_example_representation", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_example_representation", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_initialize_world", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_initialize_world", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_image_representation_situations", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_image_representation_situations", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_encode_situation", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.test_encode_situation"], ["", "def", "run_all_tests", "(", ")", ":", "\n", "    ", "test_save_and_load_dataset", "(", "TEST_DATASET", ")", "\n", "test_save_and_load_dataset", "(", "TEST_DATASET_NONCE", ")", "\n", "test_save_and_load_dataset_nonce", "(", ")", "\n", "test_derivation_from_rules", "(", "TEST_DATASET", ")", "\n", "test_derivation_from_rules", "(", "TEST_DATASET_NONCE", ")", "\n", "test_derivation_from_string", "(", "TEST_DATASET", ")", "\n", "test_derivation_from_string", "(", "TEST_DATASET_NONCE", ")", "\n", "test_demonstrate_target_commands_one", "(", "TEST_DATASET", ")", "\n", "test_demonstrate_target_commands_one", "(", "TEST_DATASET_NONCE", ")", "\n", "test_demonstrate_target_commands_two", "(", "TEST_DATASET", ")", "\n", "test_demonstrate_target_commands_two", "(", "TEST_DATASET_NONCE", ")", "\n", "test_demonstrate_target_commands_three", "(", "TEST_DATASET", ")", "\n", "test_demonstrate_target_commands_three", "(", "TEST_DATASET_NONCE", ")", "\n", "test_demonstrate_command_one", "(", "TEST_DATASET", ")", "\n", "test_demonstrate_command_one", "(", "TEST_DATASET_NONCE", ")", "\n", "test_demonstrate_command_two", "(", "TEST_DATASET", ")", "\n", "test_demonstrate_command_two", "(", "TEST_DATASET_NONCE", ")", "\n", "test_demonstrate_command_three", "(", "TEST_DATASET", ")", "\n", "test_demonstrate_command_three", "(", "TEST_DATASET_NONCE", ")", "\n", "test_demonstrate_command_four", "(", "TEST_DATASET", ")", "\n", "test_demonstrate_command_four", "(", "TEST_DATASET_NONCE", ")", "\n", "test_demonstrate_command_five", "(", "TEST_DATASET", ")", "\n", "test_demonstrate_command_five", "(", "TEST_DATASET_NONCE", ")", "\n", "test_demonstrate_command_six", "(", "TEST_DATASET", ")", "\n", "test_demonstrate_command_six", "(", "TEST_DATASET_NONCE", ")", "\n", "test_find_referred_target_one", "(", "TEST_DATASET", ")", "\n", "test_find_referred_target_one", "(", "TEST_DATASET_NONCE", ")", "\n", "test_find_referred_target_two", "(", "TEST_DATASET", ")", "\n", "test_find_referred_target_two", "(", "TEST_DATASET_NONCE", ")", "\n", "test_generate_possible_targets_one", "(", "TEST_DATASET", ")", "\n", "test_generate_possible_targets_one", "(", "TEST_DATASET_NONCE", ")", "\n", "test_generate_possible_targets_two", "(", "TEST_DATASET", ")", "\n", "test_generate_possible_targets_two", "(", "TEST_DATASET_NONCE", ")", "\n", "test_generate_situations_one", "(", "TEST_DATASET", ")", "\n", "test_generate_situations_one", "(", "TEST_DATASET_NONCE", ")", "\n", "test_generate_situations_two", "(", "TEST_DATASET", ")", "\n", "test_generate_situations_two", "(", "TEST_DATASET_NONCE", ")", "\n", "test_generate_situations_three", "(", "TEST_DATASET", ")", "\n", "test_generate_situations_three", "(", "TEST_DATASET_NONCE", ")", "\n", "test_situation_representation_eq", "(", ")", "\n", "test_example_representation_eq", "(", "TEST_DATASET", ")", "\n", "test_example_representation_eq", "(", "TEST_DATASET_NONCE", ")", "\n", "test_example_representation", "(", "TEST_DATASET", ")", "\n", "test_example_representation", "(", "TEST_DATASET_NONCE", ")", "\n", "test_initialize_world", "(", "TEST_DATASET", ")", "\n", "test_initialize_world", "(", "TEST_DATASET_NONCE", ")", "\n", "test_image_representation_situations", "(", "TEST_DATASET", ")", "\n", "test_image_representation_situations", "(", "TEST_DATASET_NONCE", ")", "\n", "test_encode_situation", "(", "TEST_DATASET", ")", "\n", "test_encode_situation", "(", "TEST_DATASET_NONCE", ")", "\n", "#test_k_shot_generalization(TEST_DATASET)", "\n", "#test_k_shot_generalization(TEST_DATASET_NONCE)", "\n", "shutil", ".", "rmtree", "(", "TEST_DIRECTORY", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.Term.__init__": [[96, 102], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "function", ":", "str", ",", "args", ":", "tuple", ",", "weights", "=", "None", ",", "meta", "=", "None", ",", "specs", "=", "None", ")", ":", "\n", "        ", "self", ".", "function", "=", "function", "\n", "self", ".", "arguments", "=", "args", "\n", "self", ".", "weights", "=", "weights", "\n", "self", ".", "meta", "=", "meta", "\n", "self", ".", "specs", "=", "specs", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.Term.replace": [[103, 110], ["world.Term", "tuple"], "methods", ["None"], ["", "def", "replace", "(", "self", ",", "var_to_find", ":", "Variable", ",", "replace_by_var", ":", "Variable", ")", ":", "\n", "        ", "\"\"\"Find a variable `var_to_find` the arguments and replace it by `replace_by_var`.\"\"\"", "\n", "return", "Term", "(", "\n", "function", "=", "self", ".", "function", ",", "\n", "args", "=", "tuple", "(", "replace_by_var", "if", "variable", "==", "var_to_find", "else", "variable", "for", "variable", "in", "self", ".", "arguments", ")", ",", "\n", "specs", "=", "self", ".", "specs", ",", "\n", "meta", "=", "self", ".", "meta", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.Term.to_predicate": [[112, 121], ["None"], "methods", ["None"], ["", "def", "to_predicate", "(", "self", ",", "predicate", ":", "dict", ")", ":", "\n", "        ", "assert", "self", ".", "specs", "is", "not", "None", "\n", "output", "=", "self", ".", "function", "\n", "if", "self", ".", "specs", ".", "noun", ":", "\n", "            ", "predicate", "[", "\"noun\"", "]", "=", "output", "\n", "", "elif", "self", ".", "specs", ".", "adjective_type", "==", "SIZE", ":", "\n", "            ", "predicate", "[", "\"size\"", "]", "=", "output", "\n", "", "elif", "self", ".", "specs", ".", "adjective_type", "==", "COLOR", ":", "\n", "            ", "predicate", "[", "\"color\"", "]", "=", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.Term.__repr__": [[122, 127], ["parts.append"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "parts", "=", "[", "self", ".", "function", "]", "\n", "for", "variable", "in", "self", ".", "arguments", ":", "\n", "            ", "parts", ".", "append", "(", "\"{}:{}\"", ".", "format", "(", "variable", ".", "name", ",", "variable", ".", "sem_type", ".", "name", ")", ")", "\n", "", "return", "\"({})\"", ".", "format", "(", "\" \"", ".", "join", "(", "parts", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.LogicalForm.__init__": [[136, 141], ["len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "variables", ":", "Tuple", "[", "Variable", "]", ",", "terms", ":", "Tuple", "[", "Term", "]", ")", ":", "\n", "        ", "self", ".", "variables", "=", "variables", "\n", "self", ".", "terms", "=", "terms", "\n", "if", "len", "(", "variables", ")", ">", "0", ":", "\n", "            ", "self", ".", "head", "=", "variables", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.LogicalForm.bind": [[142, 154], ["world.LogicalForm", "term.replace", "tuple"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.Term.replace"], ["", "", "def", "bind", "(", "self", ",", "bind_var", ":", "Variable", ")", ":", "\n", "        ", "\"\"\"\n        Bind a variable to its head, e.g for 'kick the ball', 'kick' is the head and 'the ball' will be bind to it.\n        Or in the case of NP -> JJ NP, bind the JJ (adjective) to the head of the noun-phrase.\n        E.g. 'the big red square', bind 'big' to 'square'.\n        :param bind_var:\n        :return:\n        \"\"\"", "\n", "sub_var", ",", "variables_out", "=", "self", ".", "variables", "[", "0", "]", ",", "self", ".", "variables", "[", "1", ":", "]", "\n", "# assert sub_var.sem_type == bind_var.sem_type", "\n", "terms_out", "=", "[", "term", ".", "replace", "(", "sub_var", ",", "bind_var", ")", "for", "term", "in", "self", ".", "terms", "]", "\n", "return", "LogicalForm", "(", "variables", "=", "(", "bind_var", ",", ")", "+", "variables_out", ",", "terms", "=", "tuple", "(", "terms_out", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.LogicalForm.select": [[155, 173], ["frozenset", "list", "set", "list", "world.LogicalForm", "len", "list.pop", "set", "tuple", "tuple", "list.append", "set.add", "list.append"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.set"], ["", "def", "select", "(", "self", ",", "variables", ":", "list", ",", "exclude", "=", "frozenset", "(", ")", ")", ":", "\n", "        ", "\"\"\"Select and return the sub-logical form of the variables in the variables list.\"\"\"", "\n", "queue", "=", "list", "(", "variables", ")", "\n", "used_vars", "=", "set", "(", ")", "\n", "terms_out", "=", "[", "]", "\n", "while", "len", "(", "queue", ")", ">", "0", ":", "\n", "            ", "var", "=", "queue", ".", "pop", "(", ")", "\n", "deps", "=", "[", "term", "for", "term", "in", "self", ".", "terms", "if", "term", ".", "function", "not", "in", "exclude", "and", "term", ".", "arguments", "[", "0", "]", "==", "var", "]", "\n", "for", "term", "in", "deps", ":", "\n", "                ", "terms_out", ".", "append", "(", "term", ")", "\n", "used_vars", ".", "add", "(", "var", ")", "\n", "for", "variable", "in", "term", ".", "arguments", "[", "1", ":", "]", ":", "\n", "                    ", "if", "variable", "not", "in", "used_vars", ":", "\n", "                        ", "queue", ".", "append", "(", "variable", ")", "\n", "\n", "", "", "", "", "vars_out", "=", "[", "var", "for", "var", "in", "self", ".", "variables", "if", "var", "in", "used_vars", "]", "\n", "terms_out", "=", "list", "(", "set", "(", "terms_out", ")", ")", "\n", "return", "LogicalForm", "(", "tuple", "(", "vars_out", ")", ",", "tuple", "(", "terms_out", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.LogicalForm.to_predicate": [[174, 184], ["object_str.strip.strip.strip", "len", "term.to_predicate"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.LogicalForm.to_predicate"], ["", "def", "to_predicate", "(", "self", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "variables", ")", "==", "1", "\n", "predicate", "=", "{", "\"noun\"", ":", "\"\"", ",", "\"size\"", ":", "\"\"", ",", "\"color\"", ":", "\"\"", "}", "\n", "[", "term", ".", "to_predicate", "(", "predicate", ")", "for", "term", "in", "self", ".", "terms", "]", "\n", "object_str", "=", "\"\"", "\n", "if", "predicate", "[", "\"color\"", "]", ":", "\n", "            ", "object_str", "+=", "' '", "+", "predicate", "[", "\"color\"", "]", "\n", "", "object_str", "+=", "' '", "+", "predicate", "[", "\"noun\"", "]", "\n", "object_str", "=", "object_str", ".", "strip", "(", ")", "\n", "return", "object_str", ",", "predicate", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.LogicalForm.__repr__": [[185, 187], ["repr"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"LF({})\"", ".", "format", "(", "\" ^ \"", ".", "join", "(", "[", "repr", "(", "term", ")", "for", "term", "in", "self", ".", "terms", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.Situation.__init__": [[234, 242], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "grid_size", ":", "int", ",", "agent_position", ":", "Position", ",", "agent_direction", ":", "Direction", ",", "\n", "target_object", ":", "PositionedObject", ",", "placed_objects", ":", "List", "[", "PositionedObject", "]", ",", "carrying", "=", "None", ")", ":", "\n", "        ", "self", ".", "grid_size", "=", "grid_size", "\n", "self", ".", "agent_pos", "=", "agent_position", "# position is [col, row] (i.e. [x-axis, y-axis])", "\n", "self", ".", "agent_direction", "=", "agent_direction", "\n", "self", ".", "placed_objects", "=", "placed_objects", "\n", "self", ".", "carrying", "=", "carrying", "# The object the agent is carrying", "\n", "self", ".", "target_object", "=", "target_object", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.Situation.distance_to_target": [[243, 248], ["abs", "abs"], "methods", ["None"], ["", "@", "property", "\n", "def", "distance_to_target", "(", "self", ")", ":", "\n", "        ", "\"\"\"Number of grid steps to take to reach the target position from the agent position.\"\"\"", "\n", "return", "abs", "(", "self", ".", "agent_pos", ".", "column", "-", "self", ".", "target_object", ".", "position", ".", "column", ")", "+", "abs", "(", "self", ".", "agent_pos", ".", "row", "-", "self", ".", "target_object", ".", "position", ".", "row", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.Situation.direction_to_target": [[249, 257], ["min", "min", "max", "max"], "methods", ["None"], ["", "@", "property", "\n", "def", "direction_to_target", "(", "self", ")", ":", "\n", "        ", "\"\"\"Direction to the target in terms of north, east, south, north-east, etc. Needed for a grounded scan split.\"\"\"", "\n", "column_distance", "=", "self", ".", "target_object", ".", "position", ".", "column", "-", "self", ".", "agent_pos", ".", "column", "\n", "column_distance", "=", "min", "(", "max", "(", "-", "1", ",", "column_distance", ")", ",", "1", ")", "\n", "row_distance", "=", "self", ".", "agent_pos", ".", "row", "-", "self", ".", "target_object", ".", "position", ".", "row", "\n", "row_distance", "=", "min", "(", "max", "(", "-", "1", ",", "row_distance", ")", ",", "1", ")", "\n", "return", "DIR_VEC_TO_DIR", "[", "(", "column_distance", ",", "row_distance", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.Situation.to_dict": [[258, 267], ["Position"], "methods", ["None"], ["", "def", "to_dict", "(", "self", ")", "->", "dict", ":", "\n", "        ", "\"\"\"Represent this situation in a dictionary.\"\"\"", "\n", "return", "{", "\n", "\"agent_position\"", ":", "Position", "(", "column", "=", "self", ".", "agent_pos", "[", "0", "]", ",", "row", "=", "self", ".", "agent_pos", "[", "1", "]", ")", ",", "\n", "\"agent_direction\"", ":", "self", ".", "agent_direction", ",", "\n", "\"target_object\"", ":", "self", ".", "target_object", ",", "\n", "\"grid_size\"", ":", "self", ".", "grid_size", ",", "\n", "\"objects\"", ":", "self", ".", "placed_objects", ",", "\n", "\"carrying\"", ":", "self", ".", "carrying", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.Situation.to_representation": [[269, 281], ["world.position_to_repr", "world.positioned_object_to_repr", "str", "str", "world.positioned_object_to_repr", "world.object_to_repr", "enumerate"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.position_to_repr", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.positioned_object_to_repr", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.positioned_object_to_repr", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.object_to_repr"], ["", "def", "to_representation", "(", "self", ")", "->", "dict", ":", "\n", "        ", "\"\"\"Represent this situation in serializable dict that can be written to a file.\"\"\"", "\n", "return", "{", "\n", "\"grid_size\"", ":", "self", ".", "grid_size", ",", "\n", "\"agent_position\"", ":", "position_to_repr", "(", "self", ".", "agent_pos", ")", ",", "\n", "\"agent_direction\"", ":", "DIR_TO_INT", "[", "self", ".", "agent_direction", "]", ",", "\n", "\"target_object\"", ":", "positioned_object_to_repr", "(", "self", ".", "target_object", ")", "if", "self", ".", "target_object", "else", "None", ",", "\n", "\"distance_to_target\"", ":", "str", "(", "self", ".", "distance_to_target", ")", "if", "self", ".", "target_object", "else", "None", ",", "\n", "\"direction_to_target\"", ":", "self", ".", "direction_to_target", "if", "self", ".", "target_object", "else", "None", ",", "\n", "\"placed_objects\"", ":", "{", "str", "(", "i", ")", ":", "positioned_object_to_repr", "(", "placed_object", ")", "for", "i", ",", "placed_object", "\n", "in", "enumerate", "(", "self", ".", "placed_objects", ")", "}", ",", "\n", "\"carrying_object\"", ":", "object_to_repr", "(", "self", ".", "carrying", ")", "if", "self", ".", "carrying", "else", "None", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.Situation.from_representation": [[283, 299], ["placed_object_reps.values", "cls", "placed_objects.append", "world.parse_positioned_object_repr", "world.parse_position_repr", "world.parse_positioned_object_repr", "world.parse_object_repr"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.parse_positioned_object_repr", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.parse_position_repr", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.parse_positioned_object_repr", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.parse_object_repr"], ["", "@", "classmethod", "\n", "def", "from_representation", "(", "cls", ",", "situation_representation", ":", "dict", ")", ":", "\n", "        ", "\"\"\"Initialize this class by some situation as represented by .to_representation().\"\"\"", "\n", "target_object", "=", "situation_representation", "[", "\"target_object\"", "]", "\n", "carrying_object", "=", "situation_representation", "[", "\"carrying_object\"", "]", "\n", "placed_object_reps", "=", "situation_representation", "[", "\"placed_objects\"", "]", "\n", "placed_objects", "=", "[", "]", "\n", "for", "placed_object_rep", "in", "placed_object_reps", ".", "values", "(", ")", ":", "\n", "            ", "placed_objects", ".", "append", "(", "parse_positioned_object_repr", "(", "placed_object_rep", ")", ")", "\n", "", "situation", "=", "cls", "(", "grid_size", "=", "situation_representation", "[", "\"grid_size\"", "]", ",", "\n", "agent_position", "=", "parse_position_repr", "(", "situation_representation", "[", "\"agent_position\"", "]", ")", ",", "\n", "agent_direction", "=", "INT_TO_DIR", "[", "situation_representation", "[", "\"agent_direction\"", "]", "]", ",", "\n", "target_object", "=", "parse_positioned_object_repr", "(", "target_object", ")", "if", "target_object", "else", "None", ",", "\n", "placed_objects", "=", "placed_objects", ",", "\n", "carrying", "=", "parse_object_repr", "(", "carrying_object", ")", "if", "carrying_object", "else", "None", ")", "\n", "return", "situation", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.Situation.__eq__": [[300, 321], ["other.to_representation", "world.Situation.to_representation", "world.Situation.__eq__.compare_nested_dict"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.to_representation", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.to_representation"], ["", "def", "__eq__", "(", "self", ",", "other", ")", "->", "bool", ":", "\n", "        ", "\"\"\"Recursive function to compare this situation to another and determine if they are equivalent.\"\"\"", "\n", "representation_other", "=", "other", ".", "to_representation", "(", ")", "\n", "representation_self", "=", "self", ".", "to_representation", "(", ")", "\n", "\n", "def", "compare_nested_dict", "(", "value_1", ",", "value_2", ",", "unequal_values", ")", ":", "\n", "            ", "if", "len", "(", "unequal_values", ")", ">", "0", ":", "\n", "                ", "return", "\n", "", "if", "isinstance", "(", "value_1", ",", "dict", ")", ":", "\n", "                ", "for", "k", ",", "v_1", "in", "value_1", ".", "items", "(", ")", ":", "\n", "                    ", "v_2", "=", "value_2", ".", "get", "(", "k", ")", "\n", "if", "not", "v_2", "and", "v_1", ":", "\n", "                        ", "unequal_values", ".", "append", "(", "False", ")", "\n", "", "compare_nested_dict", "(", "v_1", ",", "v_2", ",", "unequal_values", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "value_1", "!=", "value_2", ":", "\n", "                    ", "unequal_values", ".", "append", "(", "False", ")", "\n", "", "", "return", "\n", "", "result", "=", "[", "]", "\n", "compare_nested_dict", "(", "representation_self", ",", "representation_other", ",", "result", ")", "\n", "return", "not", "len", "(", "result", ")", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.ObjectVocabulary.__init__": [[332, 369], ["set", "len", "set", "len", "list", "len", "world.ObjectVocabulary._object_class.update", "world.ObjectVocabulary.generate_objects", "set", "range", "enumerate", "range", "range", "itertools.product"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.ObjectVocabulary.generate_objects", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.set"], ["def", "__init__", "(", "self", ",", "shapes", ":", "List", "[", "str", "]", ",", "colors", ":", "List", "[", "str", "]", ",", "min_size", ":", "int", ",", "max_size", ":", "int", ")", ":", "\n", "        ", "\"\"\"\n        :param shapes: a list of string names for nouns.\n        :param colors: a list of string names for colors.\n        :param min_size: minimum object size\n        :param max_size: maximum object size\n        \"\"\"", "\n", "assert", "self", ".", "SIZES", "[", "0", "]", "<=", "min_size", "<=", "max_size", "<=", "self", ".", "SIZES", "[", "-", "1", "]", ",", "\"Unsupported object sizes (min: {}, max: {}) specified.\"", ".", "format", "(", "min_size", ",", "max_size", ")", "\n", "self", ".", "_min_size", "=", "min_size", "\n", "self", ".", "_max_size", "=", "max_size", "\n", "\n", "# Translation from shape nouns to shapes.", "\n", "self", ".", "_shapes", "=", "set", "(", "shapes", ")", "\n", "self", ".", "_n_shapes", "=", "len", "(", "self", ".", "_shapes", ")", "\n", "self", ".", "_colors", "=", "set", "(", "colors", ")", "\n", "self", ".", "_n_colors", "=", "len", "(", "self", ".", "_colors", ")", "\n", "self", ".", "_idx_to_shapes_and_colors", "=", "shapes", "+", "colors", "\n", "self", ".", "_shapes_and_colors_to_idx", "=", "{", "token", ":", "i", "for", "i", ",", "token", "in", "enumerate", "(", "self", ".", "_idx_to_shapes_and_colors", ")", "}", "\n", "self", ".", "_sizes", "=", "list", "(", "range", "(", "min_size", ",", "max_size", "+", "1", ")", ")", "\n", "\n", "# Also size specification for 'average' size, e.g. if adjectives are small and big, 3 sizes exist.", "\n", "self", ".", "_n_sizes", "=", "len", "(", "self", ".", "_sizes", ")", "\n", "assert", "(", "self", ".", "_n_sizes", "%", "2", ")", "==", "0", ",", "\"Please specify an even amount of sizes \"", "\" (needs to be split in 2 classes.)\"", "\n", "self", ".", "_middle_size", "=", "(", "max_size", "+", "min_size", ")", "//", "2", "\n", "\n", "# Make object classes.", "\n", "self", ".", "_object_class", "=", "{", "i", ":", "\"light\"", "for", "i", "in", "range", "(", "min_size", ",", "self", ".", "_middle_size", "+", "1", ")", "}", "\n", "self", ".", "_heavy_weights", "=", "{", "i", ":", "\"heavy\"", "for", "i", "in", "range", "(", "self", ".", "_middle_size", "+", "1", ",", "max_size", "+", "1", ")", "}", "\n", "self", ".", "_object_class", ".", "update", "(", "self", ".", "_heavy_weights", ")", "\n", "\n", "# Prepare object vectors.", "\n", "self", ".", "_object_vector_size", "=", "self", ".", "_n_shapes", "+", "self", ".", "_n_colors", "+", "self", ".", "_n_sizes", "\n", "self", ".", "_object_vectors", "=", "self", ".", "generate_objects", "(", ")", "\n", "self", ".", "_possible_colored_objects", "=", "set", "(", "[", "color", "+", "' '", "+", "shape", "for", "color", ",", "shape", "in", "itertools", ".", "product", "(", "self", ".", "_colors", ",", "\n", "self", ".", "_shapes", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.ObjectVocabulary.has_object": [[370, 372], ["None"], "methods", ["None"], ["", "def", "has_object", "(", "self", ",", "shape", ":", "str", ",", "color", ":", "str", ",", "size", ":", "int", ")", ":", "\n", "        ", "return", "shape", "in", "self", ".", "_shapes", "and", "color", "in", "self", ".", "_colors", "and", "size", "in", "self", ".", "_sizes", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.ObjectVocabulary.object_in_class": [[373, 375], ["None"], "methods", ["None"], ["", "def", "object_in_class", "(", "self", ",", "size", ":", "int", ")", ":", "\n", "        ", "return", "self", ".", "_object_class", "[", "size", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.ObjectVocabulary.num_object_attributes": [[376, 380], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_object_attributes", "(", "self", ")", ":", "\n", "        ", "\"\"\"Dimension of object vectors is one hot for shapes and colors + 1 ordinal dimension for size.\"\"\"", "\n", "return", "len", "(", "self", ".", "_idx_to_shapes_and_colors", ")", "+", "self", ".", "_n_sizes", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.ObjectVocabulary.smallest_size": [[381, 384], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "smallest_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_min_size", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.ObjectVocabulary.largest_size": [[385, 388], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "largest_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_max_size", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.ObjectVocabulary.object_shapes": [[389, 392], ["world.ObjectVocabulary._shapes.copy"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.copy"], ["", "@", "property", "\n", "def", "object_shapes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_shapes", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.ObjectVocabulary.object_sizes": [[393, 396], ["world.ObjectVocabulary._sizes.copy"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.copy"], ["", "@", "property", "\n", "def", "object_sizes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_sizes", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.ObjectVocabulary.object_colors": [[397, 400], ["world.ObjectVocabulary._colors.copy"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.copy"], ["", "@", "property", "\n", "def", "object_colors", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_colors", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.ObjectVocabulary.all_objects": [[401, 404], ["itertools.product"], "methods", ["None"], ["", "@", "property", "\n", "def", "all_objects", "(", "self", ")", ":", "\n", "        ", "return", "product", "(", "self", ".", "object_sizes", ",", "self", ".", "object_colors", ",", "self", ".", "object_shapes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.ObjectVocabulary.sample_size": [[405, 407], ["random.choice"], "methods", ["None"], ["", "def", "sample_size", "(", "self", ")", ":", "\n", "        ", "return", "random", ".", "choice", "(", "self", ".", "_sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.ObjectVocabulary.sample_color": [[408, 410], ["random.choice", "list"], "methods", ["None"], ["", "def", "sample_color", "(", "self", ")", ":", "\n", "        ", "return", "random", ".", "choice", "(", "list", "(", "self", ".", "_colors", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.ObjectVocabulary.get_object_vector": [[411, 414], ["world.ObjectVocabulary.has_object"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.has_object"], ["", "def", "get_object_vector", "(", "self", ",", "shape", ":", "str", ",", "color", ":", "str", ",", "size", ":", "int", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "assert", "self", ".", "has_object", "(", "shape", ",", "color", ",", "size", ")", ",", "\"Trying to get an unavailable object vector from the vocabulary/\"", "\n", "return", "self", ".", "_object_vectors", "[", "shape", "]", "[", "color", "]", "[", "size", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.ObjectVocabulary.generate_objects": [[415, 435], ["itertools.product", "GroundedScan.helpers.one_hot", "object_to_object_vector.keys", "object_to_object_vector[].keys", "GroundedScan.helpers.one_hot", "GroundedScan.helpers.one_hot"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.helpers.one_hot", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.helpers.one_hot", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.helpers.one_hot"], ["", "def", "generate_objects", "(", "self", ")", "->", "Dict", "[", "str", ",", "Dict", "[", "str", ",", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", "]", "]", ":", "\n", "        ", "\"\"\"\n        An object vector is built as follows: the first entry is an ordinal entry defining the size (from 1 the smallest\n        to 4 the largest), then 2 entries define a one-hot vector over shape, the last two entries define a one-hot\n        vector over color. A red circle of size 1 could then be: [1 0 1 0 1], meaning a blue square of size 2 would be\n        [2 1 0 1 0].\n        \"\"\"", "\n", "object_to_object_vector", "=", "{", "}", "\n", "for", "size", ",", "color", ",", "shape", "in", "itertools", ".", "product", "(", "self", ".", "_sizes", ",", "self", ".", "_colors", ",", "self", ".", "_shapes", ")", ":", "\n", "            ", "object_vector", "=", "one_hot", "(", "self", ".", "_object_vector_size", ",", "size", "-", "1", ")", "+", "one_hot", "(", "self", ".", "_object_vector_size", ",", "self", ".", "_shapes_and_colors_to_idx", "[", "color", "]", "+", "self", ".", "_n_sizes", ")", "+", "one_hot", "(", "self", ".", "_object_vector_size", ",", "self", ".", "_shapes_and_colors_to_idx", "[", "shape", "]", "+", "self", ".", "_n_sizes", ")", "\n", "# object_vector = np.concatenate(([size], object_vector))", "\n", "if", "shape", "not", "in", "object_to_object_vector", ".", "keys", "(", ")", ":", "\n", "                ", "object_to_object_vector", "[", "shape", "]", "=", "{", "}", "\n", "", "if", "color", "not", "in", "object_to_object_vector", "[", "shape", "]", ".", "keys", "(", ")", ":", "\n", "                ", "object_to_object_vector", "[", "shape", "]", "[", "color", "]", "=", "{", "}", "\n", "", "object_to_object_vector", "[", "shape", "]", "[", "color", "]", "[", "size", "]", "=", "object_vector", "\n", "\n", "", "return", "object_to_object_vector", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.__init__": [[448, 479], ["zip", "len", "set", "set", "GroundedScan.gym_minigrid.minigrid.MiniGridEnv.__init__", "GroundedScan.gym_minigrid.minigrid.IDX_TO_OBJECT.keys", "GroundedScan.gym_minigrid.minigrid.OBJECT_TO_IDX.keys"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.__init__"], ["def", "__init__", "(", "self", ",", "grid_size", ":", "int", ",", "shapes", ":", "List", "[", "str", "]", ",", "colors", ":", "List", "[", "str", "]", ",", "object_vocabulary", ":", "ObjectVocabulary", ",", "\n", "save_directory", ":", "str", ")", ":", "\n", "# Some checks on the input", "\n", "        ", "for", "shape", ",", "color", "in", "zip", "(", "shapes", ",", "colors", ")", ":", "\n", "            ", "assert", "shape", "in", "self", ".", "AVAILABLE_SHAPES", ",", "\"Specified shape {} not implemented in minigrid env.\"", ".", "format", "(", "shape", ")", "\n", "assert", "color", "in", "self", ".", "AVAILABLE_COLORS", ",", "\"Specified color {}, not implemented in minigrid env.\"", ".", "format", "(", "color", ")", "\n", "\n", "# Define the grid world.", "\n", "", "self", ".", "grid_size", "=", "grid_size", "\n", "\n", "# Column, row", "\n", "self", ".", "agent_start_pos", "=", "(", "0", ",", "0", ")", "\n", "self", ".", "agent_start_dir", "=", "DIR_TO_INT", "[", "EAST", "]", "\n", "self", ".", "mission", "=", "None", "\n", "\n", "# Generate the object vocabulary.", "\n", "self", ".", "_object_vocabulary", "=", "object_vocabulary", "\n", "self", ".", "num_available_objects", "=", "len", "(", "IDX_TO_OBJECT", ".", "keys", "(", ")", ")", "\n", "self", ".", "available_objects", "=", "set", "(", "OBJECT_TO_IDX", ".", "keys", "(", ")", ")", "\n", "\n", "# Data structures for keeping track of the current state of the world.", "\n", "self", ".", "_placed_object_list", "=", "[", "]", "\n", "self", ".", "_target_object", "=", "None", "\n", "self", ".", "_observed_commands", "=", "[", "]", "\n", "self", ".", "_observed_situations", "=", "[", "]", "\n", "self", ".", "_occupied_positions", "=", "set", "(", ")", "\n", "# Hash table for looking up locations of objects based on partially formed references (e.g. find the location(s)", "\n", "# of a red cylinder when the grid has both a big red cylinder and a small red cylinder.)", "\n", "self", ".", "_object_lookup_table", "=", "{", "}", "\n", "self", ".", "save_directory", "=", "save_directory", "\n", "super", "(", ")", ".", "__init__", "(", "grid_size", "=", "grid_size", ",", "max_steps", "=", "4", "*", "grid_size", "*", "grid_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World._gen_grid": [[480, 491], ["GroundedScan.gym_minigrid.minigrid.Grid", "world.World.place_agent", "world.World._occupied_positions.add"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.place_agent"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "# Create an empty grid", "\n", "        ", "self", ".", "grid", "=", "Grid", "(", "width", ",", "height", ",", "depth", "=", "self", ".", "_object_vocabulary", ".", "num_object_attributes", ")", "\n", "\n", "# Place the agent", "\n", "if", "self", ".", "agent_start_pos", "is", "not", "None", ":", "\n", "            ", "self", ".", "agent_pos", "=", "self", ".", "agent_start_pos", "\n", "self", ".", "agent_dir", "=", "self", ".", "agent_start_dir", "\n", "", "else", ":", "\n", "            ", "position", "=", "self", ".", "place_agent", "(", ")", "\n", "self", ".", "_occupied_positions", ".", "add", "(", "position", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.initialize": [[492, 516], ["world.World.clear_situation", "world.World.place_agent_at", "world.World.place_object", "world.World.create_object", "numpy.array", "world.World._object_vocabulary.get_object_vector"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.clear_situation", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.place_agent_at", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.place_object", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.create_object", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.ObjectVocabulary.get_object_vector"], ["", "", "def", "initialize", "(", "self", ",", "objects", ":", "List", "[", "Tuple", "[", "Object", ",", "Position", "]", "]", ",", "agent_position", ":", "Position", ",", "agent_direction", ":", "Direction", ",", "\n", "target_object", ":", "PositionedObject", ",", "carrying", ":", "Object", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Create a grid world by placing the objects that are passed as an argument at the specified locations and the\n        agent at the specified location.\n        \"\"\"", "\n", "self", ".", "clear_situation", "(", ")", "\n", "self", ".", "agent_dir", "=", "DIR_TO_INT", "[", "agent_direction", "]", "\n", "self", ".", "place_agent_at", "(", "agent_position", ")", "\n", "self", ".", "_target_object", "=", "target_object", "\n", "for", "current_object", ",", "current_position", "in", "objects", ":", "\n", "            ", "target", "=", "False", "\n", "if", "target_object", ":", "\n", "                ", "if", "target_object", ".", "position", "==", "current_position", ":", "\n", "                    ", "target", "=", "True", "\n", "", "", "self", ".", "place_object", "(", "current_object", ",", "current_position", ",", "target", "=", "target", ")", "\n", "", "if", "carrying", ":", "\n", "            ", "carrying_object", "=", "self", ".", "create_object", "(", "carrying", ",", "\n", "self", ".", "_object_vocabulary", ".", "get_object_vector", "(", "carrying", ".", "shape", ",", "\n", "carrying", ".", "color", ",", "\n", "carrying", ".", "size", ")", ")", "\n", "self", ".", "carrying", "=", "carrying_object", "\n", "self", ".", "carrying", ".", "cur_pos", "=", "np", ".", "array", "(", "[", "-", "1", ",", "-", "1", "]", ")", "\n", "self", ".", "carrying", ".", "cur_pos", "=", "self", ".", "agent_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.create_object": [[517, 532], ["GroundedScan.gym_minigrid.minigrid.Circle", "GroundedScan.gym_minigrid.minigrid.Square", "world.World._object_vocabulary.object_in_class", "GroundedScan.gym_minigrid.minigrid.Cylinder", "ValueError", "world.World._object_vocabulary.object_in_class", "world.World._object_vocabulary.object_in_class"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.ObjectVocabulary.object_in_class", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.ObjectVocabulary.object_in_class", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.ObjectVocabulary.object_in_class"], ["", "", "def", "create_object", "(", "self", ",", "object_spec", ":", "Object", ",", "object_vector", ":", "np", ".", "ndarray", ",", "target", "=", "False", ")", ":", "\n", "        ", "if", "object_spec", ".", "shape", "==", "\"circle\"", ":", "\n", "            ", "return", "Circle", "(", "object_spec", ".", "color", ",", "size", "=", "object_spec", ".", "size", ",", "vector_representation", "=", "object_vector", ",", "\n", "object_representation", "=", "object_spec", ",", "target", "=", "target", ",", "\n", "weight", "=", "self", ".", "_object_vocabulary", ".", "object_in_class", "(", "object_spec", ".", "size", ")", ")", "\n", "", "elif", "object_spec", ".", "shape", "==", "\"square\"", ":", "\n", "            ", "return", "Square", "(", "object_spec", ".", "color", ",", "size", "=", "object_spec", ".", "size", ",", "vector_representation", "=", "object_vector", ",", "\n", "object_representation", "=", "object_spec", ",", "target", "=", "target", ",", "\n", "weight", "=", "self", ".", "_object_vocabulary", ".", "object_in_class", "(", "object_spec", ".", "size", ")", ")", "\n", "", "elif", "object_spec", ".", "shape", "==", "\"cylinder\"", ":", "\n", "            ", "return", "Cylinder", "(", "object_spec", ".", "color", ",", "size", "=", "object_spec", ".", "size", ",", "vector_representation", "=", "object_vector", ",", "\n", "object_representation", "=", "object_spec", ",", "\n", "weight", "=", "self", ".", "_object_vocabulary", ".", "object_in_class", "(", "object_spec", ".", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Trying to create an object shape {} that is not implemented.\"", ".", "format", "(", "object_spec", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.position_taken": [[533, 535], ["world.World.grid.get"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.get"], ["", "", "def", "position_taken", "(", "self", ",", "position", ":", "Position", ")", ":", "\n", "        ", "return", "self", ".", "grid", ".", "get", "(", "position", ".", "column", ",", "position", ".", "row", ")", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.within_grid": [[536, 541], ["None"], "methods", ["None"], ["", "def", "within_grid", "(", "self", ",", "position", ":", "Position", ")", ":", "\n", "        ", "if", "0", "<=", "position", ".", "row", "<", "self", ".", "grid_size", "and", "0", "<=", "position", ".", "column", "<", "self", ".", "grid_size", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.place_agent_at": [[542, 548], ["world.World.position_taken", "world.World.place_agent", "world.World._occupied_positions.add", "ValueError"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.position_taken", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.place_agent"], ["", "", "def", "place_agent_at", "(", "self", ",", "position", ":", "Position", ")", ":", "\n", "        ", "if", "not", "self", ".", "position_taken", "(", "position", ")", ":", "\n", "            ", "self", ".", "place_agent", "(", "top", "=", "(", "position", ".", "column", ",", "position", ".", "row", ")", ",", "size", "=", "(", "1", ",", "1", ")", ",", "rand_dir", "=", "False", ")", "\n", "self", ".", "_occupied_positions", ".", "add", "(", "(", "position", ".", "column", ",", "position", ".", "row", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Trying to place agent on cell that is already taken.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.sample_position": [[549, 555], ["random.sample().pop", "Position", "itertools.product", "random.sample", "list", "list", "range", "range"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Grammar.sample"], ["", "", "def", "sample_position", "(", "self", ")", "->", "Position", ":", "\n", "        ", "available_positions", "=", "[", "(", "row", ",", "col", ")", "for", "row", ",", "col", "in", "itertools", ".", "product", "(", "list", "(", "range", "(", "self", ".", "grid_size", ")", ")", ",", "\n", "list", "(", "range", "(", "self", ".", "grid_size", ")", ")", ")", "\n", "if", "(", "col", ",", "row", ")", "not", "in", "self", ".", "_occupied_positions", "]", "\n", "sampled_position", "=", "random", ".", "sample", "(", "available_positions", ",", "1", ")", ".", "pop", "(", ")", "\n", "return", "Position", "(", "row", "=", "sampled_position", "[", "0", "]", ",", "column", "=", "sampled_position", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.min_distance_from_edge": [[556, 560], ["min", "min", "min"], "methods", ["None"], ["", "def", "min_distance_from_edge", "(", "self", ",", "position", ":", "Position", ")", ":", "\n", "        ", "row_distance", "=", "min", "(", "self", ".", "grid_size", "-", "position", ".", "row", ",", "position", ".", "row", ")", "\n", "column_distance", "=", "min", "(", "self", ".", "grid_size", "-", "position", ".", "column", ",", "position", ".", "column", ")", "\n", "return", "min", "(", "row_distance", ",", "column_distance", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.sample_position_steps_from_edge": [[561, 571], ["random.sample().pop", "Position", "itertools.product", "world.World.min_distance_from_edge", "actual_available_positions.append", "random.sample", "list", "list", "Position", "range", "range"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.min_distance_from_edge", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Grammar.sample"], ["", "def", "sample_position_steps_from_edge", "(", "self", ",", "distance_from_edge", "=", "1", ")", "->", "Position", ":", "\n", "        ", "available_positions", "=", "[", "(", "row", ",", "col", ")", "for", "row", ",", "col", "in", "itertools", ".", "product", "(", "list", "(", "range", "(", "self", ".", "grid_size", ")", ")", ",", "\n", "list", "(", "range", "(", "self", ".", "grid_size", ")", ")", ")", "\n", "if", "(", "row", ",", "col", ")", "not", "in", "self", ".", "_occupied_positions", "]", "\n", "actual_available_positions", "=", "[", "]", "\n", "for", "row", ",", "col", "in", "available_positions", ":", "\n", "            ", "if", "self", ".", "min_distance_from_edge", "(", "Position", "(", "row", "=", "row", ",", "column", "=", "col", ")", ")", "<=", "distance_from_edge", ":", "\n", "                ", "actual_available_positions", ".", "append", "(", "(", "row", ",", "col", ")", ")", "\n", "", "", "sampled_position", "=", "random", ".", "sample", "(", "actual_available_positions", ",", "1", ")", ".", "pop", "(", ")", "\n", "return", "Position", "(", "row", "=", "sampled_position", "[", "0", "]", ",", "column", "=", "sampled_position", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.sample_position_conditioned": [[572, 589], ["range", "random.sample().pop", "Position", "range", "available_positions.append", "random.sample"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Grammar.sample"], ["", "def", "sample_position_conditioned", "(", "self", ",", "north", ",", "east", ",", "south", ",", "west", ")", ":", "\n", "        ", "\"\"\"\n        Specify for each direction how many steps should be free (i.e. before hitting wall) in that direction.\n        \"\"\"", "\n", "assert", "north", "==", "0", "or", "south", "==", "0", ",", "\"Can't take steps in both North and South direction\"", "\n", "assert", "east", "==", "0", "or", "west", "==", "0", ",", "\"Can't take steps in both East and West direction\"", "\n", "\n", "max_col", "=", "self", ".", "grid_size", "-", "east", "if", "east", ">", "0", "else", "self", ".", "grid_size", "-", "1", "\n", "min_col", "=", "west", "-", "1", "if", "west", ">", "0", "else", "0", "\n", "max_row", "=", "self", ".", "grid_size", "-", "south", "if", "south", ">", "0", "else", "self", ".", "grid_size", "-", "1", "\n", "min_row", "=", "north", "-", "1", "if", "north", ">", "0", "else", "0", "\n", "available_positions", "=", "[", "]", "\n", "for", "col", "in", "range", "(", "min_col", ",", "max_col", "+", "1", ")", ":", "\n", "            ", "for", "row", "in", "range", "(", "min_row", ",", "max_row", "+", "1", ")", ":", "\n", "                ", "available_positions", ".", "append", "(", "(", "row", ",", "col", ")", ")", "\n", "", "", "sampled_position", "=", "random", ".", "sample", "(", "available_positions", ",", "1", ")", ".", "pop", "(", ")", "\n", "return", "Position", "(", "row", "=", "sampled_position", "[", "0", "]", ",", "column", "=", "sampled_position", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.place_object": [[590, 616], ["world.World.position_taken", "world.World.within_grid", "IndexError", "print", "world.World._object_vocabulary.get_object_vector", "PositionedObject", "world.World.place_obj", "world.World._placed_object_list.append", "world.World._add_object_to_lookup_table", "world.World._occupied_positions.add", "world.World.create_object"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.position_taken", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.within_grid", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.ObjectVocabulary.get_object_vector", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv.place_obj", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World._add_object_to_lookup_table", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.create_object"], ["", "def", "place_object", "(", "self", ",", "object_spec", ":", "Object", ",", "position", ":", "Position", ",", "target", "=", "False", ")", ":", "\n", "        ", "if", "not", "self", ".", "within_grid", "(", "position", ")", ":", "\n", "            ", "raise", "IndexError", "(", "\"Trying to place object '{}' outside of grid of size {}.\"", ".", "format", "(", "\n", "object_spec", ".", "shape", ",", "self", ".", "grid_size", ")", ")", "\n", "# Object already placed at this location", "\n", "", "if", "self", ".", "position_taken", "(", "position", ")", ":", "\n", "            ", "print", "(", "\"WARNING: attempt to place two objects at location ({}, {}), but overlapping objects not \"", "\n", "\"supported. Skipping object.\"", ".", "format", "(", "position", ".", "row", ",", "position", ".", "column", ")", ")", "\n", "", "else", ":", "\n", "            ", "object_vector", "=", "self", ".", "_object_vocabulary", ".", "get_object_vector", "(", "shape", "=", "object_spec", ".", "shape", ",", "color", "=", "object_spec", ".", "color", ",", "\n", "size", "=", "object_spec", ".", "size", ")", "\n", "positioned_object", "=", "PositionedObject", "(", "object", "=", "object_spec", ",", "position", "=", "position", ",", "vector", "=", "object_vector", ")", "\n", "self", ".", "place_obj", "(", "self", ".", "create_object", "(", "object_spec", ",", "object_vector", ",", "target", "=", "target", ")", ",", "\n", "top", "=", "(", "position", ".", "column", ",", "position", ".", "row", ")", ",", "size", "=", "(", "1", ",", "1", ")", ")", "\n", "\n", "# Add to list that keeps track of all objects currently positioned on the grid.", "\n", "self", ".", "_placed_object_list", ".", "append", "(", "positioned_object", ")", "\n", "\n", "# Adjust the object lookup table accordingly.", "\n", "self", ".", "_add_object_to_lookup_table", "(", "positioned_object", ")", "\n", "\n", "# Add to occupied positions:", "\n", "self", ".", "_occupied_positions", ".", "add", "(", "(", "position", ".", "column", ",", "position", ".", "row", ")", ")", "\n", "\n", "if", "target", ":", "\n", "                ", "self", ".", "_target_object", "=", "positioned_object", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World._add_object_to_lookup_table": [[617, 634], ["GroundedScan.helpers.generate_possible_object_names", "[].append", "world.World._object_lookup_table.keys", "world.World._object_lookup_table[].keys"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.helpers.generate_possible_object_names"], ["", "", "", "def", "_add_object_to_lookup_table", "(", "self", ",", "positioned_object", ":", "PositionedObject", ")", ":", "\n", "        ", "object_size", "=", "positioned_object", ".", "object", ".", "size", "\n", "object_color", "=", "positioned_object", ".", "object", ".", "color", "\n", "object_shape", "=", "positioned_object", ".", "object", ".", "shape", "\n", "\n", "# Generate all possible names", "\n", "object_names", "=", "generate_possible_object_names", "(", "color", "=", "object_color", ",", "shape", "=", "object_shape", ")", "\n", "for", "possible_object_name", "in", "object_names", ":", "\n", "            ", "if", "possible_object_name", "not", "in", "self", ".", "_object_lookup_table", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "_object_lookup_table", "[", "possible_object_name", "]", "=", "{", "}", "\n", "\n", "# This part allows for multiple exactly the same objects (e.g. 2 small red circles) to be on the grid.", "\n", "", "if", "positioned_object", ".", "object", ".", "size", "not", "in", "self", ".", "_object_lookup_table", "[", "possible_object_name", "]", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "_object_lookup_table", "[", "possible_object_name", "]", "=", "{", "\n", "size", ":", "[", "]", "for", "size", "in", "self", ".", "_object_vocabulary", ".", "object_sizes", "}", "\n", "", "self", ".", "_object_lookup_table", "[", "possible_object_name", "]", "[", "object_size", "]", ".", "append", "(", "\n", "positioned_object", ".", "position", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World._remove_object": [[635, 654], ["enumerate", "world.World._remove_object_from_lookup_table", "world.World.grid.get", "world.World.grid.set", "world.World._occupied_positions.remove"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World._remove_object_from_lookup_table", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.set"], ["", "", "def", "_remove_object", "(", "self", ",", "target_position", ":", "Position", ")", "->", "PositionedObject", ":", "\n", "# remove from placed_object_list", "\n", "        ", "target_object", "=", "None", "\n", "for", "i", ",", "positioned_object", "in", "enumerate", "(", "self", ".", "_placed_object_list", ")", ":", "\n", "            ", "if", "positioned_object", ".", "position", "==", "target_position", ":", "\n", "                ", "target_object", "=", "self", ".", "_placed_object_list", "[", "i", "]", "\n", "del", "self", ".", "_placed_object_list", "[", "i", "]", "\n", "break", "\n", "\n", "# remove from object_lookup Table", "\n", "", "", "self", ".", "_remove_object_from_lookup_table", "(", "target_object", ")", "\n", "\n", "# remove from gym grid", "\n", "self", ".", "grid", ".", "get", "(", "target_position", ".", "column", ",", "target_position", ".", "row", ")", "\n", "self", ".", "grid", ".", "set", "(", "target_position", ".", "column", ",", "target_position", ".", "row", ",", "None", ")", "\n", "\n", "self", ".", "_occupied_positions", ".", "remove", "(", "(", "target_position", ".", "column", ",", "target_position", ".", "row", ")", ")", "\n", "\n", "return", "target_object", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World._remove_object_from_lookup_table": [[655, 661], ["GroundedScan.helpers.generate_possible_object_names", "[].remove"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.helpers.generate_possible_object_names"], ["", "def", "_remove_object_from_lookup_table", "(", "self", ",", "positioned_object", ":", "PositionedObject", ")", ":", "\n", "        ", "possible_object_names", "=", "generate_possible_object_names", "(", "positioned_object", ".", "object", ".", "color", ",", "\n", "positioned_object", ".", "object", ".", "shape", ")", "\n", "for", "possible_object_name", "in", "possible_object_names", ":", "\n", "            ", "self", ".", "_object_lookup_table", "[", "possible_object_name", "]", "[", "positioned_object", ".", "object", ".", "size", "]", ".", "remove", "(", "\n", "positioned_object", ".", "position", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.move_object": [[662, 671], ["world.World._remove_object", "world.World.place_object", "ValueError"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World._remove_object", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.place_object"], ["", "", "def", "move_object", "(", "self", ",", "old_position", ":", "Position", ",", "new_position", ":", "Position", ")", ":", "\n", "# Remove object from old position", "\n", "        ", "old_positioned_object", "=", "self", ".", "_remove_object", "(", "old_position", ")", "\n", "if", "not", "old_positioned_object", ":", "\n", "            ", "raise", "ValueError", "(", "\"Trying to move an object from an empty grid location (row {}, col {})\"", ".", "format", "(", "\n", "old_position", ".", "row", ",", "old_position", ".", "column", ")", ")", "\n", "\n", "# Add object at new position", "\n", "", "self", ".", "place_object", "(", "old_positioned_object", ".", "object", ",", "new_position", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.pull": [[672, 676], ["world.World._observed_commands.append", "world.World._observed_situations.append", "world.World.get_current_situation"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.get_current_situation"], ["", "def", "pull", "(", "self", ",", "position", ":", "Position", ")", ":", "\n", "        ", "self", ".", "agent_pos", "=", "(", "position", ".", "column", ",", "position", ".", "row", ")", "\n", "self", ".", "_observed_commands", ".", "append", "(", "\"pull\"", ")", "\n", "self", ".", "_observed_situations", ".", "append", "(", "self", ".", "get_current_situation", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.pick_up_object": [[677, 688], ["world.World.step", "world.World.grid.get", "world.World._remove_object", "world.World._observed_commands.append", "world.World._observed_situations.append", "Position", "world.World.get_current_situation"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv.step", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World._remove_object", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.get_current_situation"], ["", "def", "pick_up_object", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Picking up an object in gym-minigrid means removing it and saying the agent is carrying it.\n        :return:\n        \"\"\"", "\n", "assert", "self", ".", "grid", ".", "get", "(", "*", "self", ".", "agent_pos", ")", "is", "not", "None", ",", "\"Trying to pick up an object at an empty cell.\"", "\n", "self", ".", "step", "(", "self", ".", "actions", ".", "pickup", ")", "\n", "if", "self", ".", "carrying", ":", "\n", "            ", "self", ".", "_remove_object", "(", "Position", "(", "column", "=", "self", ".", "agent_pos", "[", "0", "]", ",", "row", "=", "self", ".", "agent_pos", "[", "1", "]", ")", ")", "\n", "self", ".", "_observed_commands", ".", "append", "(", "\"PICK UP\"", ")", "\n", "self", ".", "_observed_situations", ".", "append", "(", "self", ".", "get_current_situation", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.drop_object": [[689, 696], ["world.World.place_object", "world.World._observed_commands.append", "world.World._observed_situations.append", "Position", "world.World.get_current_situation"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.place_object", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.get_current_situation"], ["", "", "def", "drop_object", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "carrying", "is", "not", "None", ",", "\"Trying to drop something but not carrying anything.\"", "\n", "self", ".", "place_object", "(", "self", ".", "carrying", ".", "object_representation", ",", "Position", "(", "column", "=", "self", ".", "agent_pos", "[", "0", "]", ",", "\n", "row", "=", "self", ".", "agent_pos", "[", "1", "]", ")", ")", "\n", "self", ".", "carrying", "=", "None", "\n", "self", ".", "_observed_commands", ".", "append", "(", "\"DROP\"", ")", "\n", "self", ".", "_observed_situations", ".", "append", "(", "self", ".", "get_current_situation", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.push_or_pull_object": [[697, 720], ["world.World.grid.get", "world.World._observed_commands.append", "world.World._observed_situations.append", "world.World.can_push", "world.World.push", "world.World.get_current_situation", "Position", "world.World.within_grid", "world.World._observed_commands.append", "world.World._observed_situations.append", "world.World.get_current_situation", "world.World.grid.get", "world.World.move_object", "Position", "world.World.take_step_in_direction", "world.World.pull"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Circle.can_push", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Circle.push", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.get_current_situation", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.within_grid", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.get_current_situation", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.move_object", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.take_step_in_direction", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.pull"], ["", "def", "push_or_pull_object", "(", "self", ",", "direction", ":", "Direction", ",", "primitive_command", ":", "str", ")", ":", "\n", "        ", "current_object", "=", "self", ".", "grid", ".", "get", "(", "*", "self", ".", "agent_pos", ")", "\n", "if", "not", "current_object", ":", "\n", "            ", "self", ".", "_observed_commands", ".", "append", "(", "primitive_command", ")", "\n", "self", ".", "_observed_situations", ".", "append", "(", "self", ".", "get_current_situation", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "assert", "current_object", ".", "can_push", "(", ")", ",", "\"Trying to push an object that cannot be pushed\"", "\n", "if", "current_object", ".", "push", "(", ")", ":", "\n", "                ", "new_position", "=", "self", ".", "agent_pos", "+", "DIR_TO_VEC", "[", "DIR_TO_INT", "[", "direction", "]", "]", "\n", "new_position", "=", "Position", "(", "column", "=", "new_position", "[", "0", "]", ",", "row", "=", "new_position", "[", "1", "]", ")", "\n", "# If the new position isn't occupied by another object, push it forward.", "\n", "if", "self", ".", "within_grid", "(", "new_position", ")", ":", "\n", "                    ", "if", "not", "self", ".", "grid", ".", "get", "(", "new_position", "[", "0", "]", ",", "new_position", "[", "1", "]", ")", ":", "\n", "                        ", "self", ".", "move_object", "(", "Position", "(", "column", "=", "self", ".", "agent_pos", "[", "0", "]", ",", "row", "=", "self", ".", "agent_pos", "[", "1", "]", ")", ",", "new_position", ")", "\n", "if", "primitive_command", "==", "\"push\"", ":", "\n", "                            ", "self", ".", "take_step_in_direction", "(", "direction", ",", "primitive_command", ")", "\n", "", "else", ":", "\n", "                            ", "self", ".", "pull", "(", "position", "=", "new_position", ")", "\n", "\n", "", "", "", "", "else", ":", "\n", "# Pushing an object that won't move just yet (because it's heavy).", "\n", "                ", "self", ".", "_observed_commands", ".", "append", "(", "primitive_command", ")", "\n", "self", ".", "_observed_situations", ".", "append", "(", "self", ".", "get_current_situation", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.move_object_to_wall": [[721, 734], ["world.World.empty_cell_in_direction", "world.World.push_or_pull_object", "world.World.spin", "world.World.hesitate", "world.World.look_left_and_right"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.empty_cell_in_direction", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.push_or_pull_object", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.spin", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.hesitate", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.look_left_and_right"], ["", "", "", "def", "move_object_to_wall", "(", "self", ",", "action", ":", "str", ",", "manner", ":", "str", ")", ":", "\n", "        ", "if", "action", "==", "\"push\"", ":", "\n", "            ", "direction", "=", "INT_TO_DIR", "[", "self", ".", "agent_dir", "]", "\n", "", "else", ":", "\n", "            ", "direction", "=", "INT_TO_DIR", "[", "(", "self", ".", "agent_dir", "+", "2", ")", "%", "4", "]", "\n", "", "while", "self", ".", "empty_cell_in_direction", "(", "direction", "=", "direction", ")", ":", "\n", "            ", "if", "manner", "==", "\"while spinning\"", ":", "\n", "                ", "self", ".", "spin", "(", ")", "\n", "", "elif", "manner", "==", "\"cautiously\"", ":", "\n", "                ", "self", ".", "look_left_and_right", "(", ")", "\n", "", "self", ".", "push_or_pull_object", "(", "direction", "=", "direction", ",", "primitive_command", "=", "action", ")", "\n", "if", "manner", "==", "\"hesitantly\"", ":", "\n", "                ", "self", ".", "hesitate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.get_direction": [[735, 738], ["None"], "methods", ["None"], ["", "", "", "@", "staticmethod", "\n", "def", "get_direction", "(", "direction_str", ":", "str", ")", ":", "\n", "        ", "return", "DIR_STR_TO_DIR", "[", "direction_str", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.get_position_at": [[739, 748], ["Position", "len", "numpy.array"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_position_at", "(", "current_position", ":", "Position", ",", "direction_str", ":", "str", ",", "distance", ":", "int", ")", "->", "Position", ":", "\n", "        ", "\"\"\"Returns the column and row of a position on the grid some distance away in a particular direction.\"\"\"", "\n", "assert", "len", "(", "DIR_STR_TO_DIR", "[", "direction_str", "]", ")", "==", "1", ",", "\"getting a position at a distance only implemented for \"", "\"straight directions\"", "\n", "direction", "=", "DIR_STR_TO_DIR", "[", "direction_str", "]", "\n", "direction_vec", "=", "DIR_TO_VEC", "[", "DIR_TO_INT", "[", "direction", "]", "]", "*", "distance", "\n", "position", "=", "np", ".", "array", "(", "[", "current_position", ".", "column", ",", "current_position", ".", "row", "]", ")", "+", "direction_vec", "\n", "return", "Position", "(", "column", "=", "position", "[", "0", "]", ",", "row", "=", "position", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.direction_to_goal": [[749, 762], ["numpy.array"], "methods", ["None"], ["", "def", "direction_to_goal", "(", "self", ",", "goal", ":", "Position", ")", ":", "\n", "        ", "difference_vec", "=", "np", ".", "array", "(", "[", "goal", ".", "column", "-", "self", ".", "agent_pos", "[", "0", "]", ",", "goal", ".", "row", "-", "self", ".", "agent_pos", "[", "1", "]", "]", ")", "\n", "difference_vec", "[", "difference_vec", "<", "0", "]", "=", "0", "\n", "col_difference", "=", "difference_vec", "[", "0", "]", "\n", "row_difference", "=", "difference_vec", "[", "1", "]", "\n", "if", "col_difference", "and", "row_difference", ":", "\n", "            ", "return", "\"SE\"", ",", "self", ".", "actions", ".", "left", "\n", "", "elif", "col_difference", "and", "not", "row_difference", ":", "\n", "            ", "return", "\"NE\"", ",", "self", ".", "actions", ".", "right", "\n", "", "elif", "row_difference", "and", "not", "col_difference", ":", "\n", "            ", "return", "\"SW\"", ",", "self", ".", "actions", ".", "right", "\n", "", "else", ":", "\n", "            ", "return", "\"NW\"", ",", "self", ".", "actions", ".", "left", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.execute_command": [[763, 784], ["command_str.split", "len", "world.World.take_step", "world.World.take_step_in_direction", "world.World.take_step", "ValueError", "world.World.push_or_pull_object", "ValueError"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.take_step", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.take_step_in_direction", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.take_step", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.push_or_pull_object"], ["", "", "def", "execute_command", "(", "self", ",", "command_str", ":", "str", ")", ":", "\n", "        ", "command_list", "=", "command_str", ".", "split", "(", ")", "\n", "verb", "=", "command_list", "[", "0", "]", "\n", "if", "len", "(", "command_list", ")", ">", "1", "and", "verb", "==", "\"turn\"", ":", "\n", "            ", "direction", "=", "command_list", "[", "1", "]", "\n", "if", "direction", "==", "\"left\"", ":", "\n", "                ", "self", ".", "take_step", "(", "self", ".", "actions", ".", "left", ",", "\"turn left\"", ")", "\n", "", "elif", "direction", "==", "\"right\"", ":", "\n", "                ", "self", ".", "take_step", "(", "self", ".", "actions", ".", "right", ",", "\"turn right\"", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Trying to turn in an unknown direction\"", ")", "\n", "", "", "elif", "verb", "==", "\"walk\"", "or", "verb", "==", "\"run\"", "or", "verb", "==", "\"jump\"", ":", "\n", "            ", "self", ".", "take_step_in_direction", "(", "direction", "=", "DIR_STR_TO_DIR", "[", "INT_TO_DIR", "[", "self", ".", "agent_dir", "]", ".", "name", "[", "0", "]", "]", ",", "\n", "primitive_command", "=", "verb", ")", "\n", "", "elif", "verb", "==", "\"push\"", "or", "verb", "==", "\"pull\"", ":", "\n", "            ", "self", ".", "push_or_pull_object", "(", "direction", "=", "DIR_STR_TO_DIR", "[", "INT_TO_DIR", "[", "self", ".", "agent_dir", "]", ".", "name", "[", "0", "]", "]", ",", "\n", "primitive_command", "=", "verb", ")", "\n", "", "elif", "verb", "==", "\"stay\"", ":", "\n", "            ", "return", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Incorrect command {}.\"", ".", "format", "(", "command_str", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.empty_cell_in_direction": [[785, 792], ["world.World.within_grid", "Position", "world.World.grid.get"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.within_grid", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.get"], ["", "", "def", "empty_cell_in_direction", "(", "self", ",", "direction", ":", "Direction", ")", ":", "\n", "        ", "next_cell", "=", "self", ".", "agent_pos", "+", "DIR_TO_VEC", "[", "DIR_TO_INT", "[", "direction", "]", "]", "\n", "if", "self", ".", "within_grid", "(", "Position", "(", "column", "=", "next_cell", "[", "0", "]", ",", "row", "=", "next_cell", "[", "1", "]", ")", ")", ":", "\n", "            ", "next_cell_object", "=", "self", ".", "grid", ".", "get", "(", "*", "next_cell", ")", "\n", "return", "not", "next_cell_object", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.look_left_and_right": [[793, 798], ["world.World.take_step", "world.World.take_step", "world.World.take_step", "world.World.take_step"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.take_step", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.take_step", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.take_step", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.take_step"], ["", "", "def", "look_left_and_right", "(", "self", ")", ":", "\n", "        ", "self", ".", "take_step", "(", "self", ".", "actions", ".", "left", ",", "\"turn left\"", ")", "\n", "self", ".", "take_step", "(", "self", ".", "actions", ".", "right", ",", "\"turn right\"", ")", "\n", "self", ".", "take_step", "(", "self", ".", "actions", ".", "right", ",", "\"turn right\"", ")", "\n", "self", ".", "take_step", "(", "self", ".", "actions", ".", "left", ",", "\"turn left\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.hesitate": [[799, 802], ["world.World._observed_commands.append", "world.World._observed_situations.append", "world.World.get_current_situation"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.get_current_situation"], ["", "def", "hesitate", "(", "self", ")", ":", "\n", "        ", "self", ".", "_observed_commands", ".", "append", "(", "\"stay\"", ")", "\n", "self", ".", "_observed_situations", ".", "append", "(", "self", ".", "get_current_situation", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.spin": [[803, 806], ["range", "world.World.take_step"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.take_step"], ["", "def", "spin", "(", "self", ")", ":", "\n", "        ", "for", "_", "in", "range", "(", "4", ")", ":", "\n", "            ", "self", ".", "take_step", "(", "self", ".", "actions", ".", "left", ",", "\"turn left\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.move_with_manners": [[807, 823], ["world.World.spin", "world.World.take_step_in_direction", "world.World.hesitate", "world.World.turn_to_direction", "world.World.look_left_and_right", "world.World.take_step_in_direction", "world.World.take_step_in_direction"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.spin", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.take_step_in_direction", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.hesitate", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.turn_to_direction", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.look_left_and_right", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.take_step_in_direction", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.take_step_in_direction"], ["", "", "def", "move_with_manners", "(", "self", ",", "direction", ":", "Direction", ",", "manner", ":", "str", ",", "primitive_command", ":", "str", ")", ":", "\n", "# Spin to the left", "\n", "        ", "if", "manner", "==", "\"while spinning\"", ":", "\n", "            ", "self", ".", "spin", "(", ")", "\n", "self", ".", "take_step_in_direction", "(", "direction", "=", "direction", ",", "primitive_command", "=", "primitive_command", ")", "\n", "# Look left and right if cautious", "\n", "", "elif", "manner", "==", "\"cautiously\"", ":", "\n", "            ", "self", ".", "turn_to_direction", "(", "direction", "=", "direction", ")", "\n", "self", ".", "look_left_and_right", "(", ")", "\n", "self", ".", "take_step_in_direction", "(", "direction", "=", "direction", ",", "primitive_command", "=", "primitive_command", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "take_step_in_direction", "(", "direction", "=", "direction", ",", "primitive_command", "=", "primitive_command", ")", "\n", "\n", "# Stop after each step", "\n", "", "if", "manner", "==", "\"hesitantly\"", ":", "\n", "            ", "self", ".", "hesitate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.go_to_position": [[824, 866], ["world.World.direction_to_goal", "world.World.agent_in_line_with_goal", "world.World.take_step_in_direction", "world.World.take_step_in_direction", "world.World.agent_in_line_with_goal", "world.World.take_step", "world.World.take_step_in_direction", "world.World.take_step_in_direction", "world.World.take_step_in_direction", "world.World.take_step_in_direction", "world.World.move_with_manners", "world.World.move_with_manners", "world.World.move_with_manners", "world.World.move_with_manners", "world.World.take_step", "world.World.take_step"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.direction_to_goal", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.agent_in_line_with_goal", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.take_step_in_direction", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.take_step_in_direction", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.agent_in_line_with_goal", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.take_step", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.take_step_in_direction", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.take_step_in_direction", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.take_step_in_direction", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.take_step_in_direction", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.move_with_manners", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.move_with_manners", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.move_with_manners", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.move_with_manners", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.take_step", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.take_step"], ["", "", "def", "go_to_position", "(", "self", ",", "position", ":", "Position", ",", "manner", ":", "str", ",", "primitive_command", ":", "str", ")", ":", "\n", "        ", "\"\"\"Move to the position denoted in the argument. Adds an action for each step to self._observed_commands\n        and self._observed_situations. If a manner is specified, the sequence of actions will be transformed to\n        represent the specified manner.\"\"\"", "\n", "# Zigzag somewhere until in line with the goal, then just go straight for the goal", "\n", "if", "manner", "==", "\"while zigzagging\"", "and", "not", "self", ".", "agent_in_line_with_goal", "(", "position", ")", ":", "\n", "# Find direction of goal.", "\n", "            ", "direction_to_goal", ",", "first_move", "=", "self", ".", "direction_to_goal", "(", "position", ")", "\n", "previous_step", "=", "first_move", "\n", "if", "direction_to_goal", "==", "\"NE\"", "or", "direction_to_goal", "==", "\"SE\"", ":", "\n", "                ", "self", ".", "take_step_in_direction", "(", "direction", "=", "EAST", ",", "primitive_command", "=", "primitive_command", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "take_step_in_direction", "(", "direction", "=", "WEST", ",", "primitive_command", "=", "primitive_command", ")", "\n", "", "while", "not", "self", ".", "agent_in_line_with_goal", "(", "position", ")", ":", "\n", "# turn in opposite direction of previous step and take take step", "\n", "                ", "if", "previous_step", "==", "self", ".", "actions", ".", "left", ":", "\n", "                    ", "self", ".", "take_step", "(", "self", ".", "actions", ".", "right", ",", "\"turn right\"", ")", "\n", "previous_step", "=", "self", ".", "actions", ".", "right", "\n", "", "else", ":", "\n", "                    ", "self", ".", "take_step", "(", "self", ".", "actions", ".", "left", ",", "\"turn left\"", ")", "\n", "previous_step", "=", "self", ".", "actions", ".", "left", "\n", "", "self", ".", "take_step", "(", "self", ".", "actions", ".", "forward", ",", "primitive_command", ")", "\n", "\n", "# Finish the route not zigzagging", "\n", "", "while", "self", ".", "agent_pos", "[", "0", "]", ">", "position", ".", "column", ":", "\n", "                ", "self", ".", "take_step_in_direction", "(", "direction", "=", "WEST", ",", "primitive_command", "=", "primitive_command", ")", "\n", "", "while", "self", ".", "agent_pos", "[", "0", "]", "<", "position", ".", "column", ":", "\n", "                ", "self", ".", "take_step_in_direction", "(", "direction", "=", "EAST", ",", "primitive_command", "=", "primitive_command", ")", "\n", "", "while", "self", ".", "agent_pos", "[", "1", "]", ">", "position", ".", "row", ":", "\n", "                ", "self", ".", "take_step_in_direction", "(", "direction", "=", "NORTH", ",", "primitive_command", "=", "primitive_command", ")", "\n", "", "while", "self", ".", "agent_pos", "[", "1", "]", "<", "position", ".", "row", ":", "\n", "                ", "self", ".", "take_step_in_direction", "(", "direction", "=", "SOUTH", ",", "primitive_command", "=", "primitive_command", ")", "\n", "", "", "else", ":", "\n", "# Calculate the route to the object on the grid.", "\n", "            ", "while", "self", ".", "agent_pos", "[", "0", "]", ">", "position", ".", "column", ":", "\n", "                ", "self", ".", "move_with_manners", "(", "direction", "=", "WEST", ",", "manner", "=", "manner", ",", "primitive_command", "=", "primitive_command", ")", "\n", "", "while", "self", ".", "agent_pos", "[", "0", "]", "<", "position", ".", "column", ":", "\n", "                ", "self", ".", "move_with_manners", "(", "direction", "=", "EAST", ",", "manner", "=", "manner", ",", "primitive_command", "=", "primitive_command", ")", "\n", "", "while", "self", ".", "agent_pos", "[", "1", "]", ">", "position", ".", "row", ":", "\n", "                ", "self", ".", "move_with_manners", "(", "direction", "=", "NORTH", ",", "manner", "=", "manner", ",", "primitive_command", "=", "primitive_command", ")", "\n", "", "while", "self", ".", "agent_pos", "[", "1", "]", "<", "position", ".", "row", ":", "\n", "                ", "self", ".", "move_with_manners", "(", "direction", "=", "SOUTH", ",", "manner", "=", "manner", ",", "primitive_command", "=", "primitive_command", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.has_object": [[867, 872], ["world.World._object_lookup_table.keys"], "methods", ["None"], ["", "", "", "def", "has_object", "(", "self", ",", "object_str", ":", "str", ")", "->", "bool", ":", "\n", "        ", "if", "object_str", "not", "in", "self", ".", "_object_lookup_table", ".", "keys", "(", ")", ":", "\n", "            ", "return", "False", "\n", "", "else", ":", "\n", "            ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.object_positions": [[873, 891], ["world.World.has_object", "present_object_sizes.sort", "object_locations.items.items.items", "len", "object_locations.items.items.items", "ValueError"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.has_object"], ["", "", "def", "object_positions", "(", "self", ",", "object_str", ":", "str", ",", "object_size", "=", "None", ")", "->", "List", "[", "Position", "]", ":", "\n", "        ", "assert", "self", ".", "has_object", "(", "object_str", ")", ",", "\"Trying to get an object's position that is not placed in the world.\"", "\n", "object_locations", "=", "self", ".", "_object_lookup_table", "[", "object_str", "]", "\n", "if", "object_size", ":", "\n", "            ", "present_object_sizes", "=", "[", "size", "for", "size", ",", "objects", "in", "object_locations", ".", "items", "(", ")", "if", "objects", "]", "\n", "present_object_sizes", ".", "sort", "(", ")", "\n", "assert", "len", "(", "present_object_sizes", ")", ">=", "2", ",", "\"referring to a {} object but only one of its size present.\"", ".", "format", "(", "\n", "object_size", ")", "\n", "# Perhaps just keep track of smallest and largest object in world", "\n", "if", "object_size", "==", "\"small\"", ":", "\n", "                ", "object_locations", "=", "object_locations", "[", "present_object_sizes", "[", "0", "]", "]", "\n", "", "elif", "object_size", "==", "\"big\"", ":", "\n", "                ", "object_locations", "=", "object_locations", "[", "present_object_sizes", "[", "-", "1", "]", "]", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Wrong size in term specifications.\"", ")", "\n", "", "", "else", ":", "\n", "            ", "object_locations", "=", "object_locations", ".", "items", "(", ")", "\n", "", "return", "object_locations", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.agent_in_line_with_goal": [[892, 894], ["None"], "methods", ["None"], ["", "def", "agent_in_line_with_goal", "(", "self", ",", "goal", ":", "Position", ")", ":", "\n", "        ", "return", "goal", ".", "column", "==", "self", ".", "agent_pos", "[", "0", "]", "or", "goal", ".", "row", "==", "self", ".", "agent_pos", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.take_step": [[895, 899], ["world.World.step", "world.World._observed_situations.append", "world.World._observed_commands.append", "world.World.get_current_situation"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv.step", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.get_current_situation"], ["", "def", "take_step", "(", "self", ",", "action", ",", "observed_command", ":", "str", ")", ":", "\n", "        ", "self", ".", "step", "(", "action", "=", "action", ")", "\n", "self", ".", "_observed_situations", ".", "append", "(", "self", ".", "get_current_situation", "(", ")", ")", "\n", "self", ".", "_observed_commands", ".", "append", "(", "observed_command", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.turn_to_direction": [[900, 928], ["numpy.linalg.norm", "world.World.take_step", "world.World.take_step", "world.World.take_step", "world.World.take_step", "world.World.take_step", "world.World.take_step", "world.World.take_step", "world.World.take_step"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.take_step", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.take_step", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.take_step", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.take_step", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.take_step", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.take_step", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.take_step", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.take_step"], ["", "def", "turn_to_direction", "(", "self", ",", "direction", ":", "Direction", ")", "->", "{", "}", ":", "\n", "        ", "\"\"\"Turn to some direction.\"\"\"", "\n", "current_direction", "=", "self", ".", "agent_dir", "\n", "target_direction", "=", "DIR_TO_INT", "[", "direction", "]", "\n", "if", "current_direction", "==", "target_direction", ":", "\n", "            ", "return", "\n", "", "assert", "current_direction", "!=", "target_direction", ",", "\"Trying to turn to a direction that is the current direction.\"", "\n", "difference_vector", "=", "DIR_TO_VEC", "[", "target_direction", "]", "-", "DIR_TO_VEC", "[", "self", ".", "agent_dir", "]", "\n", "difference_norm", "=", "np", ".", "linalg", ".", "norm", "(", "difference_vector", ",", "ord", "=", "2", ")", "\n", "if", "difference_norm", ">=", "2", ":", "\n", "            ", "self", ".", "take_step", "(", "self", ".", "actions", ".", "left", ",", "\"turn left\"", ")", "\n", "self", ".", "take_step", "(", "self", ".", "actions", ".", "left", ",", "\"turn left\"", ")", "\n", "", "else", ":", "\n", "            ", "if", "current_direction", "==", "0", ":", "# East", "\n", "                ", "if", "target_direction", "==", "1", ":", "\n", "                    ", "self", ".", "take_step", "(", "self", ".", "actions", ".", "right", ",", "\"turn right\"", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "take_step", "(", "self", ".", "actions", ".", "left", ",", "\"turn left\"", ")", "\n", "", "", "elif", "current_direction", "==", "3", ":", "# North", "\n", "                ", "if", "target_direction", "==", "0", ":", "\n", "                    ", "self", ".", "take_step", "(", "self", ".", "actions", ".", "right", ",", "\"turn right\"", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "take_step", "(", "self", ".", "actions", ".", "left", ",", "\"turn left\"", ")", "\n", "", "", "else", ":", "# South and West", "\n", "                ", "if", "target_direction", ">", "current_direction", ":", "\n", "                    ", "self", ".", "take_step", "(", "self", ".", "actions", ".", "right", ",", "\"turn right\"", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "take_step", "(", "self", ".", "actions", ".", "left", ",", "\"turn left\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.take_step_in_direction": [[929, 939], ["world.World.within_grid", "world.World.turn_to_direction", "Position", "world.World.step", "world.World._observed_commands.append", "world.World._observed_situations.append", "world.World.get_current_situation"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.within_grid", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.turn_to_direction", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv.step", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.get_current_situation"], ["", "", "", "", "def", "take_step_in_direction", "(", "self", ",", "direction", ":", "Direction", ",", "primitive_command", ":", "str", ")", ":", "\n", "        ", "\"\"\"\n        Turn to some direction and take a step forward.\n        \"\"\"", "\n", "if", "DIR_TO_INT", "[", "direction", "]", "!=", "self", ".", "agent_dir", ":", "\n", "            ", "self", ".", "turn_to_direction", "(", "direction", ")", "\n", "", "if", "self", ".", "within_grid", "(", "Position", "(", "column", "=", "self", ".", "front_pos", "[", "0", "]", ",", "row", "=", "self", ".", "front_pos", "[", "1", "]", ")", ")", ":", "\n", "            ", "self", ".", "step", "(", "action", "=", "self", ".", "actions", ".", "forward", ")", "\n", "self", ".", "_observed_commands", ".", "append", "(", "primitive_command", ")", "\n", "self", ".", "_observed_situations", ".", "append", "(", "self", ".", "get_current_situation", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.save_situation": [[940, 949], ["os.path.join", "os.path.join.endswith", "world.World.render().save", "print", "world.World.render"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.save", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv.render"], ["", "", "def", "save_situation", "(", "self", ",", "file_name", ",", "attention_weights", "=", "[", "]", ")", "->", "str", ":", "\n", "        ", "save_location", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_directory", ",", "file_name", ")", "\n", "assert", "save_location", ".", "endswith", "(", "'.png'", ")", ",", "\"Invalid file name passed to save_situation, must end with .png.\"", "\n", "success", "=", "self", ".", "render", "(", "mode", "=", "\"human\"", ",", "attention_weights", "=", "attention_weights", ")", ".", "save", "(", "save_location", ")", "\n", "if", "not", "success", ":", "\n", "            ", "print", "(", "\"WARNING: image with name {} failed to save.\"", ".", "format", "(", "file_name", ")", ")", "\n", "return", "''", "\n", "", "else", ":", "\n", "            ", "return", "save_location", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.get_current_situation_image": [[950, 952], ["world.World.render().getArray", "world.World.render"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.getArray", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv.render"], ["", "", "def", "get_current_situation_image", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "return", "self", ".", "render", "(", ")", ".", "getArray", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.get_current_situation_grid_repr": [[953, 956], ["world.World.grid.encode"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.encode"], ["", "def", "get_current_situation_grid_repr", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "return", "self", ".", "grid", ".", "encode", "(", "agent_row", "=", "self", ".", "agent_pos", "[", "1", "]", ",", "agent_column", "=", "self", ".", "agent_pos", "[", "0", "]", ",", "\n", "agent_direction", "=", "self", ".", "agent_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.save_current_situation_image": [[957, 961], ["os.path.join", "world.World.get_current_situation_image", "GroundedScan.helpers.numpy_array_to_image"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.get_current_situation_image", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.helpers.numpy_array_to_image"], ["", "def", "save_current_situation_image", "(", "self", ",", "image_name", ":", "str", ")", ":", "\n", "        ", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_directory", ",", "image_name", ")", "\n", "current_situation_array", "=", "self", ".", "get_current_situation_image", "(", ")", "\n", "numpy_array_to_image", "(", "current_situation_array", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.get_current_situation": [[962, 972], ["world.Situation", "Position", "world.World._placed_object_list.copy"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.copy"], ["", "def", "get_current_situation", "(", "self", ")", "->", "Situation", ":", "\n", "        ", "if", "self", ".", "carrying", ":", "\n", "            ", "carrying", "=", "self", ".", "carrying", ".", "object_representation", "\n", "", "else", ":", "\n", "            ", "carrying", "=", "None", "\n", "", "return", "Situation", "(", "grid_size", "=", "self", ".", "grid_size", ",", "\n", "agent_position", "=", "Position", "(", "column", "=", "self", ".", "agent_pos", "[", "0", "]", ",", "row", "=", "self", ".", "agent_pos", "[", "1", "]", ")", ",", "\n", "target_object", "=", "self", ".", "_target_object", ",", "\n", "agent_direction", "=", "INT_TO_DIR", "[", "self", ".", "agent_dir", "]", ",", "placed_objects", "=", "self", ".", "_placed_object_list", ".", "copy", "(", ")", ",", "\n", "carrying", "=", "carrying", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.get_current_observations": [[973, 975], ["world.World._observed_commands.copy", "world.World._observed_situations.copy"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.copy", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.copy"], ["", "def", "get_current_observations", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_observed_commands", ".", "copy", "(", ")", ",", "self", ".", "_observed_situations", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.clear_situation": [[976, 983], ["world.World._object_lookup_table.clear", "world.World._placed_object_list.clear", "world.World._observed_commands.clear", "world.World._observed_situations.clear", "world.World._occupied_positions.clear", "world.World.reset"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv.reset"], ["", "def", "clear_situation", "(", "self", ")", ":", "\n", "        ", "self", ".", "_object_lookup_table", ".", "clear", "(", ")", "\n", "self", ".", "_placed_object_list", ".", "clear", "(", ")", "\n", "self", ".", "_observed_commands", ".", "clear", "(", ")", "\n", "self", ".", "_observed_situations", ".", "clear", "(", ")", "\n", "self", ".", "_occupied_positions", ".", "clear", "(", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.set_mission": [[984, 986], ["None"], "methods", ["None"], ["", "def", "set_mission", "(", "self", ",", "mission", ":", "str", ")", ":", "\n", "        ", "self", ".", "mission", "=", "mission", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.object_to_repr": [[189, 194], ["str"], "function", ["None"], ["", "", "def", "object_to_repr", "(", "object", ":", "Object", ")", "->", "dict", ":", "\n", "    ", "return", "{", "\n", "\"shape\"", ":", "object", ".", "shape", ",", "\n", "\"color\"", ":", "object", ".", "color", ",", "\n", "\"size\"", ":", "str", "(", "object", ".", "size", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.position_to_repr": [[197, 201], ["str", "str"], "function", ["None"], ["", "def", "position_to_repr", "(", "position", ":", "Position", ")", "->", "dict", ":", "\n", "    ", "return", "{", "\n", "\"row\"", ":", "str", "(", "position", ".", "row", ")", ",", "\n", "\"column\"", ":", "str", "(", "position", ".", "column", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.positioned_object_to_repr": [[204, 209], ["world.position_to_repr", "world.object_to_repr", "str"], "function", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.position_to_repr", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.object_to_repr"], ["", "def", "positioned_object_to_repr", "(", "positioned_object", ":", "PositionedObject", ")", "->", "dict", ":", "\n", "    ", "return", "{", "\n", "\"vector\"", ":", "''", ".", "join", "(", "[", "str", "(", "idx", ")", "for", "idx", "in", "positioned_object", ".", "vector", "]", ")", ",", "\n", "\"position\"", ":", "position_to_repr", "(", "positioned_object", ".", "position", ")", ",", "\n", "\"object\"", ":", "object_to_repr", "(", "positioned_object", ".", "object", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.parse_object_repr": [[212, 214], ["Object", "int"], "function", ["None"], ["", "def", "parse_object_repr", "(", "object_repr", ":", "dict", ")", "->", "Object", ":", "\n", "    ", "return", "Object", "(", "shape", "=", "object_repr", "[", "\"shape\"", "]", ",", "color", "=", "object_repr", "[", "\"color\"", "]", ",", "size", "=", "int", "(", "object_repr", "[", "\"size\"", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.parse_position_repr": [[216, 218], ["Position", "int", "int"], "function", ["None"], ["", "def", "parse_position_repr", "(", "position_repr", ":", "dict", ")", "->", "Position", ":", "\n", "    ", "return", "Position", "(", "column", "=", "int", "(", "position_repr", "[", "\"column\"", "]", ")", ",", "row", "=", "int", "(", "position_repr", "[", "\"row\"", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.parse_object_vector_repr": [[220, 222], ["numpy.array", "int"], "function", ["None"], ["", "def", "parse_object_vector_repr", "(", "object_vector_repr", ":", "str", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "return", "np", ".", "array", "(", "[", "int", "(", "idx", ")", "for", "idx", "in", "object_vector_repr", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.parse_positioned_object_repr": [[224, 228], ["PositionedObject", "world.parse_object_repr", "world.parse_position_repr", "world.parse_object_vector_repr"], "function", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.parse_object_repr", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.parse_position_repr", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.parse_object_vector_repr"], ["", "def", "parse_positioned_object_repr", "(", "positioned_object_repr", ":", "dict", ")", ":", "\n", "    ", "return", "PositionedObject", "(", "object", "=", "parse_object_repr", "(", "positioned_object_repr", "[", "\"object\"", "]", ")", ",", "\n", "position", "=", "parse_position_repr", "(", "positioned_object_repr", "[", "\"position\"", "]", ")", ",", "\n", "vector", "=", "parse_object_vector_repr", "(", "positioned_object_repr", "[", "\"vector\"", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.__init__": [[17, 43], ["set", "vocabulary.Vocabulary._translation_table.update", "vocabulary.Vocabulary._translation_table.update", "vocabulary.Vocabulary._translation_table.update", "vocabulary.Vocabulary._translation_table.update", "vocabulary.Vocabulary._translation_table.update", "vocabulary.Vocabulary._translation_table.update", "list", "len", "len", "list", "size_adjectives.keys", "len", "len", "list", "list", "len", "list", "list", "vocabulary.Vocabulary._translation_table.items", "list", "color_adjectives.keys", "vocabulary.Vocabulary._color_adjectives.values", "vocabulary.Vocabulary._size_adjectives.values", "vocabulary.Vocabulary._color_adjectives.values", "vocabulary.Vocabulary._size_adjectives.values", "list", "nouns.keys", "list", "list", "adverbs.keys", "intransitive_verbs.keys", "transitive_verbs.keys"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.set"], ["def", "__init__", "(", "self", ",", "intransitive_verbs", ":", "Dict", "[", "str", ",", "str", "]", ",", "transitive_verbs", ":", "Dict", "[", "str", ",", "str", "]", ",", "adverbs", ":", "Dict", "[", "str", ",", "str", "]", ",", "\n", "nouns", ":", "Dict", "[", "str", ",", "str", "]", ",", "color_adjectives", ":", "Dict", "[", "str", ",", "str", "]", ",", "size_adjectives", ":", "Dict", "[", "str", ",", "str", "]", ")", ":", "\n", "        ", "all_words", "=", "list", "(", "intransitive_verbs", ".", "keys", "(", ")", ")", "+", "list", "(", "transitive_verbs", ".", "keys", "(", ")", ")", "+", "list", "(", "adverbs", ".", "keys", "(", ")", ")", "+", "list", "(", "nouns", ".", "keys", "(", ")", ")", "+", "list", "(", "color_adjectives", ".", "keys", "(", ")", ")", "+", "list", "(", "size_adjectives", ".", "keys", "(", ")", ")", "\n", "all_unique_words", "=", "set", "(", "all_words", ")", "\n", "self", ".", "_intransitive_verbs", "=", "intransitive_verbs", "\n", "self", ".", "_transitive_verbs", "=", "transitive_verbs", "\n", "self", ".", "_adverbs", "=", "adverbs", "\n", "self", ".", "_nouns", "=", "nouns", "\n", "self", ".", "_color_adjectives", "=", "color_adjectives", "\n", "self", ".", "_size_adjectives", "=", "size_adjectives", "\n", "assert", "len", "(", "all_words", ")", "==", "len", "(", "all_unique_words", ")", ",", "\"Overlapping vocabulary (the same string used twice).\"", "\n", "if", "len", "(", "color_adjectives", ")", ">", "0", "and", "len", "(", "size_adjectives", ")", ">", "0", ":", "\n", "            ", "self", ".", "_adjectives", "=", "list", "(", "self", ".", "_color_adjectives", ".", "values", "(", ")", ")", "+", "list", "(", "self", ".", "_size_adjectives", ".", "values", "(", ")", ")", "\n", "", "elif", "len", "(", "color_adjectives", ")", ">", "0", ":", "\n", "            ", "self", ".", "_adjectives", "=", "list", "(", "self", ".", "_color_adjectives", ".", "values", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_adjectives", "=", "list", "(", "self", ".", "_size_adjectives", ".", "values", "(", ")", ")", "\n", "", "self", ".", "_translation_table", "=", "{", "'to'", ":", "'to'", ",", "'a'", ":", "'a'", ",", "'and'", ":", "'and'", "}", "\n", "self", ".", "_translation_table", ".", "update", "(", "self", ".", "_intransitive_verbs", ")", "\n", "self", ".", "_translation_table", ".", "update", "(", "self", ".", "_transitive_verbs", ")", "\n", "self", ".", "_translation_table", ".", "update", "(", "self", ".", "_nouns", ")", "\n", "self", ".", "_translation_table", ".", "update", "(", "self", ".", "_color_adjectives", ")", "\n", "self", ".", "_translation_table", ".", "update", "(", "self", ".", "_size_adjectives", ")", "\n", "self", ".", "_translation_table", ".", "update", "(", "self", ".", "_adverbs", ")", "\n", "self", ".", "_translate_to", "=", "{", "semantic_word", ":", "word", "for", "word", ",", "semantic_word", "in", "self", ".", "_translation_table", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.get_intransitive_verbs": [[44, 46], ["list().copy", "list", "vocabulary.Vocabulary._intransitive_verbs.keys"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.copy"], ["", "def", "get_intransitive_verbs", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "_intransitive_verbs", ".", "keys", "(", ")", ")", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.get_transitive_verbs": [[47, 49], ["list().copy", "list", "vocabulary.Vocabulary._transitive_verbs.keys"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.copy"], ["", "def", "get_transitive_verbs", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "_transitive_verbs", ".", "keys", "(", ")", ")", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.get_adverbs": [[50, 52], ["list().copy", "list", "vocabulary.Vocabulary._adverbs.keys"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.copy"], ["", "def", "get_adverbs", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "_adverbs", ".", "keys", "(", ")", ")", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.get_nouns": [[53, 55], ["list().copy", "list", "vocabulary.Vocabulary._nouns.keys"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.copy"], ["", "def", "get_nouns", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "_nouns", ".", "keys", "(", ")", ")", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.get_color_adjectives": [[56, 58], ["list().copy", "list", "vocabulary.Vocabulary._color_adjectives.keys"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.copy"], ["", "def", "get_color_adjectives", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "_color_adjectives", ".", "keys", "(", ")", ")", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.get_size_adjectives": [[59, 61], ["list().copy", "list", "vocabulary.Vocabulary._size_adjectives.keys"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.copy"], ["", "def", "get_size_adjectives", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "_size_adjectives", ".", "keys", "(", ")", ")", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.get_semantic_shapes": [[62, 64], ["list().copy", "list", "vocabulary.Vocabulary._nouns.values"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.copy"], ["", "def", "get_semantic_shapes", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "_nouns", ".", "values", "(", ")", ")", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.get_semantic_colors": [[65, 67], ["list().copy", "list", "vocabulary.Vocabulary._color_adjectives.values"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.copy"], ["", "def", "get_semantic_colors", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "_color_adjectives", ".", "values", "(", ")", ")", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_word": [[68, 73], ["None"], "methods", ["None"], ["", "def", "translate_word", "(", "self", ",", "word", ":", "str", ")", "->", "str", ":", "\n", "        ", "if", "word", "in", "self", ".", "_translation_table", ":", "\n", "            ", "return", "self", ".", "_translation_table", "[", "word", "]", "\n", "", "else", ":", "\n", "            ", "return", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_meaning": [[74, 79], ["None"], "methods", ["None"], ["", "", "def", "translate_meaning", "(", "self", ",", "meaning", ":", "str", ")", "->", "str", ":", "\n", "        ", "if", "meaning", "in", "self", ".", "_translate_to", ":", "\n", "            ", "return", "self", ".", "_translate_to", "[", "meaning", "]", "\n", "", "else", ":", "\n", "            ", "return", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.n_attributes": [[80, 83], ["len", "len"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "n_attributes", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_nouns", ")", "*", "len", "(", "self", ".", "_color_adjectives", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.bind_words_to_meanings": [[84, 97], ["len", "len", "available_semantic_meanings.remove", "available_semantic_meanings.pop"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.pop"], ["", "@", "staticmethod", "\n", "def", "bind_words_to_meanings", "(", "available_words", ":", "List", "[", "str", "]", ",", "available_semantic_meanings", ":", "Set", "[", "str", "]", ")", "->", "Dict", "[", "str", ",", "str", "]", ":", "\n", "        ", "assert", "len", "(", "available_words", ")", "<=", "len", "(", "available_semantic_meanings", ")", ",", "\"Too many words specified for available\"", "\"semantic meanings: {}\"", ".", "format", "(", "\n", "available_semantic_meanings", ")", "\n", "translation_table", "=", "{", "}", "\n", "for", "word", "in", "available_words", ":", "\n", "            ", "if", "word", "in", "available_semantic_meanings", ":", "\n", "                ", "translation_table", "[", "word", "]", "=", "word", "\n", "available_semantic_meanings", ".", "remove", "(", "word", ")", "\n", "", "else", ":", "\n", "                ", "translation_table", "[", "word", "]", "=", "available_semantic_meanings", ".", "pop", "(", ")", "\n", "", "", "return", "translation_table", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.initialize": [[98, 108], ["cls.bind_words_to_meanings", "cls.bind_words_to_meanings", "cls.bind_words_to_meanings", "cls.bind_words_to_meanings", "cls.bind_words_to_meanings", "cls.bind_words_to_meanings", "cls", "cls.INTRANSITIVE_VERBS.copy", "cls.TRANSITIVE_VERBS.copy", "cls.NOUNS.copy", "cls.COLOR_ADJECTIVES.copy", "cls.SIZE_ADJECTIVES.copy", "cls.ADVERBS.copy"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.bind_words_to_meanings", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.bind_words_to_meanings", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.bind_words_to_meanings", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.bind_words_to_meanings", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.bind_words_to_meanings", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.bind_words_to_meanings", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.copy", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.copy", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.copy", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.copy", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.copy", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.copy"], ["", "@", "classmethod", "\n", "def", "initialize", "(", "cls", ",", "intransitive_verbs", ":", "List", "[", "str", "]", ",", "transitive_verbs", ":", "List", "[", "str", "]", ",", "adverbs", ":", "List", "[", "str", "]", ",", "\n", "nouns", ":", "List", "[", "str", "]", ",", "color_adjectives", ":", "List", "[", "str", "]", ",", "size_adjectives", ":", "List", "[", "str", "]", ")", ":", "\n", "        ", "intransitive_verbs", "=", "cls", ".", "bind_words_to_meanings", "(", "intransitive_verbs", ",", "cls", ".", "INTRANSITIVE_VERBS", ".", "copy", "(", ")", ")", "\n", "transitive_verbs", "=", "cls", ".", "bind_words_to_meanings", "(", "transitive_verbs", ",", "cls", ".", "TRANSITIVE_VERBS", ".", "copy", "(", ")", ")", "\n", "nouns", "=", "cls", ".", "bind_words_to_meanings", "(", "nouns", ",", "cls", ".", "NOUNS", ".", "copy", "(", ")", ")", "\n", "color_adjectives", "=", "cls", ".", "bind_words_to_meanings", "(", "color_adjectives", ",", "cls", ".", "COLOR_ADJECTIVES", ".", "copy", "(", ")", ")", "\n", "size_adjectives", "=", "cls", ".", "bind_words_to_meanings", "(", "size_adjectives", ",", "cls", ".", "SIZE_ADJECTIVES", ".", "copy", "(", ")", ")", "\n", "adverbs", "=", "cls", ".", "bind_words_to_meanings", "(", "adverbs", ",", "cls", ".", "ADVERBS", ".", "copy", "(", ")", ")", "\n", "return", "cls", "(", "intransitive_verbs", ",", "transitive_verbs", ",", "adverbs", ",", "nouns", ",", "color_adjectives", ",", "size_adjectives", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.sample": [[109, 129], ["cls.bind_words_to_meanings", "cls.bind_words_to_meanings", "cls.bind_words_to_meanings", "cls.bind_words_to_meanings", "cls.bind_words_to_meanings", "cls.bind_words_to_meanings", "cls", "pronounceable.generate_word", "pronounceable.generate_word", "pronounceable.generate_word", "pronounceable.generate_word", "pronounceable.generate_word", "pronounceable.generate_word", "cls.INTRANSITIVE_VERBS.copy", "cls.TRANSITIVE_VERBS.copy", "cls.NOUNS.copy", "cls.COLOR_ADJECTIVES.copy", "cls.SIZE_ADJECTIVES.copy", "cls.ADVERBS.copy", "range", "range", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.bind_words_to_meanings", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.bind_words_to_meanings", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.bind_words_to_meanings", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.bind_words_to_meanings", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.bind_words_to_meanings", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.bind_words_to_meanings", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.copy", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.copy", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.copy", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.copy", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.copy", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.copy"], ["", "@", "classmethod", "\n", "def", "sample", "(", "cls", ",", "num_intransitive", "=", "1", ",", "num_transitive", "=", "1", ",", "num_adverbs", "=", "6", ",", "num_nouns", "=", "3", ",", "\n", "num_color_adjectives", "=", "3", ",", "num_size_adjectives", "=", "2", ")", ":", "\n", "        ", "\"\"\"\n        Sample random nonce-words and initialize the vocabulary with these.\n        \"\"\"", "\n", "# Generate random nonce-words", "\n", "intransitive_verbs", "=", "[", "pronounceable", ".", "generate_word", "(", ")", "for", "_", "in", "range", "(", "num_intransitive", ")", "]", "\n", "transitive_verbs", "=", "[", "pronounceable", ".", "generate_word", "(", ")", "for", "_", "in", "range", "(", "num_transitive", ")", "]", "\n", "adverbs", "=", "[", "pronounceable", ".", "generate_word", "(", ")", "for", "_", "in", "range", "(", "num_adverbs", ")", "]", "\n", "nouns", "=", "[", "pronounceable", ".", "generate_word", "(", ")", "for", "_", "in", "range", "(", "num_nouns", ")", "]", "\n", "color_adjectives", "=", "[", "pronounceable", ".", "generate_word", "(", ")", "for", "_", "in", "range", "(", "num_color_adjectives", ")", "]", "\n", "size_adjectives", "=", "[", "pronounceable", ".", "generate_word", "(", ")", "for", "_", "in", "range", "(", "num_size_adjectives", ")", "]", "\n", "intransitive_verbs", "=", "cls", ".", "bind_words_to_meanings", "(", "intransitive_verbs", ",", "cls", ".", "INTRANSITIVE_VERBS", ".", "copy", "(", ")", ")", "\n", "transitive_verbs", "=", "cls", ".", "bind_words_to_meanings", "(", "transitive_verbs", ",", "cls", ".", "TRANSITIVE_VERBS", ".", "copy", "(", ")", ")", "\n", "nouns", "=", "cls", ".", "bind_words_to_meanings", "(", "nouns", ",", "cls", ".", "NOUNS", ".", "copy", "(", ")", ")", "\n", "color_adjectives", "=", "cls", ".", "bind_words_to_meanings", "(", "color_adjectives", ",", "cls", ".", "COLOR_ADJECTIVES", ".", "copy", "(", ")", ")", "\n", "size_adjectives", "=", "cls", ".", "bind_words_to_meanings", "(", "size_adjectives", ",", "cls", ".", "SIZE_ADJECTIVES", ".", "copy", "(", ")", ")", "\n", "adverbs", "=", "cls", ".", "bind_words_to_meanings", "(", "adverbs", ",", "cls", ".", "ADVERBS", ".", "copy", "(", ")", ")", "\n", "return", "cls", "(", "intransitive_verbs", ",", "transitive_verbs", ",", "adverbs", ",", "nouns", ",", "color_adjectives", ",", "size_adjectives", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.to_representation": [[130, 138], ["None"], "methods", ["None"], ["", "def", "to_representation", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "\"intransitive_verbs\"", ":", "self", ".", "_intransitive_verbs", ",", "\n", "\"transitive_verbs\"", ":", "self", ".", "_transitive_verbs", ",", "\n", "\"nouns\"", ":", "self", ".", "_nouns", ",", "\n", "\"adverbs\"", ":", "self", ".", "_adverbs", ",", "\n", "\"color_adjectives\"", ":", "self", ".", "_color_adjectives", ",", "\n", "\"size_adjectives\"", ":", "self", ".", "_size_adjectives", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.from_representation": [[140, 145], ["cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_representation", "(", "cls", ",", "representation", ":", "Dict", "[", "str", ",", "Dict", "[", "str", ",", "str", "]", "]", ")", ":", "\n", "        ", "return", "cls", "(", "representation", "[", "\"intransitive_verbs\"", "]", ",", "representation", "[", "\"transitive_verbs\"", "]", ",", "\n", "representation", "[", "\"adverbs\"", "]", ",", "representation", "[", "\"nouns\"", "]", ",", "representation", "[", "\"color_adjectives\"", "]", ",", "\n", "representation", "[", "\"size_adjectives\"", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Rule.__init__": [[46, 51], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "lhs", ":", "Nonterminal", ",", "rhs", ":", "List", ",", "max_recursion", "=", "2", ")", ":", "\n", "        ", "self", ".", "lhs", "=", "lhs", "\n", "self", ".", "rhs", "=", "rhs", "\n", "self", ".", "sem_type", "=", "None", "\n", "self", ".", "max_recursion", "=", "max_recursion", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Rule.instantiate": [[52, 54], ["NotImplementedError"], "methods", ["None"], ["", "def", "instantiate", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.LexicalRule.__init__": [[60, 65], ["grammar.Rule.__init__", "Terminal"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.__init__"], ["def", "__init__", "(", "self", ",", "lhs", ":", "Nonterminal", ",", "word", ":", "str", ",", "specs", ":", "Weights", ",", "sem_type", ":", "SemType", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "lhs", "=", "lhs", ",", "rhs", "=", "[", "Terminal", "(", "word", ")", "]", ",", "max_recursion", "=", "1", ")", "\n", "self", ".", "name", "=", "word", "\n", "self", ".", "sem_type", "=", "sem_type", "\n", "self", ".", "specs", "=", "specs", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.LexicalRule.instantiate": [[66, 72], ["grammar.free_var", "GroundedScan.world.LogicalForm", "GroundedScan.world.Term"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.free_var"], ["", "def", "instantiate", "(", "self", ",", "meta", "=", "None", ",", "**", "kwargs", ")", "->", "LogicalForm", ":", "\n", "# TODO a little fishy to have recursion meta here rather than in wrapper", "\n", "        ", "var", "=", "free_var", "(", "self", ".", "sem_type", ")", "\n", "return", "LogicalForm", "(", "\n", "variables", "=", "(", "var", ",", ")", ",", "\n", "terms", "=", "(", "Term", "(", "self", ".", "name", ",", "(", "var", ",", ")", ",", "specs", "=", "self", ".", "specs", ",", "meta", "=", "meta", ")", ",", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.LexicalRule.__repr__": [[74, 78], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "lhs", "=", "self", ".", "lhs", ".", "name", "\n", "rhs", "=", "self", ".", "rhs", "[", "0", "]", ".", "name", "\n", "return", "\"{} -> {}\"", ".", "format", "(", "lhs", ",", "rhs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Root.__init__": [[81, 83], ["grammar.Rule.__init__"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "lhs", "=", "ROOT", ",", "rhs", "=", "[", "VP", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Root.instantiate": [[84, 86], ["None"], "methods", ["None"], ["", "def", "instantiate", "(", "self", ",", "child", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "child", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Root.__repr__": [[87, 89], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"ROOT -> VP\"", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.RootConj.__init__": [[92, 94], ["grammar.Rule.__init__", "Terminal"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.__init__"], ["    ", "def", "__init__", "(", "self", ",", "max_recursion", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "lhs", "=", "ROOT", ",", "rhs", "=", "[", "VP", ",", "Terminal", "(", "\"and\"", ")", ",", "ROOT", "]", ",", "max_recursion", "=", "max_recursion", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.RootConj.instantiate": [[95, 99], ["GroundedScan.world.LogicalForm", "GroundedScan.world.Term"], "methods", ["None"], ["", "def", "instantiate", "(", "self", ",", "left_child", ",", "right_child", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "LogicalForm", "(", "\n", "variables", "=", "left_child", ".", "variables", "+", "right_child", ".", "variables", ",", "\n", "terms", "=", "left_child", ".", "terms", "+", "right_child", ".", "terms", "+", "(", "Term", "(", "\"seq\"", ",", "(", "left_child", ".", "head", ",", "right_child", ".", "head", ")", ")", ",", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.RootConj.__repr__": [[101, 103], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"ROOT -> VP 'and' ROOT\"", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.VpWrapper.__init__": [[106, 108], ["grammar.Rule.__init__"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.__init__"], ["    ", "def", "__init__", "(", "self", ",", "max_recursion", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "lhs", "=", "VP", ",", "rhs", "=", "[", "VP", ",", "RB", "]", ",", "max_recursion", "=", "max_recursion", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.VpWrapper.instantiate": [[109, 113], ["rb.bind", "GroundedScan.world.LogicalForm"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.LogicalForm.bind"], ["", "def", "instantiate", "(", "self", ",", "rb", ",", "vp", ",", "meta", ",", "**", "kwargs", ")", ":", "\n", "        ", "bound", "=", "rb", ".", "bind", "(", "vp", ".", "head", ")", "\n", "assert", "bound", ".", "variables", "[", "0", "]", "==", "vp", ".", "head", "\n", "return", "LogicalForm", "(", "variables", "=", "vp", ".", "variables", "+", "bound", ".", "variables", "[", "1", ":", "]", ",", "terms", "=", "vp", ".", "terms", "+", "bound", ".", "terms", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.VpWrapper.__repr__": [[114, 116], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"VP -> VP RB\"", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.VpIntransitive.__init__": [[119, 121], ["grammar.Rule.__init__", "Terminal"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "lhs", "=", "VP", ",", "rhs", "=", "[", "VV_intransitive", ",", "Terminal", "(", "\"to\"", ")", ",", "DP", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.VpIntransitive.instantiate": [[122, 126], ["GroundedScan.world.Term", "meta[].append", "GroundedScan.world.LogicalForm"], "methods", ["None"], ["", "def", "instantiate", "(", "self", ",", "vv", ",", "dp", ",", "meta", ",", "**", "kwargs", ")", ":", "\n", "        ", "role", "=", "Term", "(", "\"patient\"", ",", "(", "vv", ".", "head", ",", "dp", ".", "head", ")", ")", "\n", "meta", "[", "\"arguments\"", "]", ".", "append", "(", "dp", ")", "\n", "return", "LogicalForm", "(", "variables", "=", "vv", ".", "variables", "+", "dp", ".", "variables", ",", "terms", "=", "vv", ".", "terms", "+", "dp", ".", "terms", "+", "(", "role", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.VpIntransitive.__repr__": [[127, 129], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"VP -> VV_intrans 'to' DP\"", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.VpTransitive.__init__": [[132, 134], ["grammar.Rule.__init__"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "lhs", "=", "VP", ",", "rhs", "=", "[", "VV_transitive", ",", "DP", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.VpTransitive.instantiate": [[135, 139], ["GroundedScan.world.Term", "meta[].append", "GroundedScan.world.LogicalForm"], "methods", ["None"], ["", "def", "instantiate", "(", "self", ",", "vv", ",", "dp", ",", "meta", ",", "**", "kwargs", ")", ":", "\n", "        ", "role", "=", "Term", "(", "\"patient\"", ",", "(", "vv", ".", "head", ",", "dp", ".", "head", ")", ")", "\n", "meta", "[", "\"arguments\"", "]", ".", "append", "(", "dp", ")", "\n", "return", "LogicalForm", "(", "variables", "=", "vv", ".", "variables", "+", "dp", ".", "variables", ",", "terms", "=", "vv", ".", "terms", "+", "dp", ".", "terms", "+", "(", "role", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.VpTransitive.__repr__": [[140, 142], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"VP -> VV_trans DP\"", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Dp.__init__": [[145, 147], ["grammar.Rule.__init__", "Terminal"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "lhs", "=", "DP", ",", "rhs", "=", "[", "Terminal", "(", "\"a\"", ")", ",", "NP", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Dp.instantiate": [[148, 150], ["None"], "methods", ["None"], ["", "def", "instantiate", "(", "self", ",", "np", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "np", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Dp.__repr__": [[151, 153], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"DP -> 'a' NP\"", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.NpWrapper.__init__": [[156, 158], ["grammar.Rule.__init__"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.__init__"], ["    ", "def", "__init__", "(", "self", ",", "max_recursion", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "lhs", "=", "NP", ",", "rhs", "=", "[", "JJ", ",", "NP", "]", ",", "max_recursion", "=", "max_recursion", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.NpWrapper.instantiate": [[159, 163], ["jj.bind", "GroundedScan.world.LogicalForm"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.LogicalForm.bind"], ["", "def", "instantiate", "(", "self", ",", "jj", ",", "np", ",", "meta", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "bound", "=", "jj", ".", "bind", "(", "np", ".", "head", ")", "\n", "assert", "bound", ".", "variables", "[", "0", "]", "==", "np", ".", "head", "\n", "return", "LogicalForm", "(", "variables", "=", "np", ".", "variables", "+", "bound", ".", "variables", "[", "1", ":", "]", ",", "terms", "=", "np", ".", "terms", "+", "bound", ".", "terms", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.NpWrapper.__repr__": [[164, 166], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"NP -> JJ NP\"", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Np.__init__": [[169, 171], ["grammar.Rule.__init__"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "lhs", "=", "NP", ",", "rhs", "=", "[", "NN", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Np.instantiate": [[172, 174], ["None"], "methods", ["None"], ["", "def", "instantiate", "(", "self", ",", "nn", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "nn", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Np.__repr__": [[175, 177], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"NP -> NN\"", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.__init__": [[185, 190], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "rule", ",", "children", "=", "None", ",", "meta", "=", "{", "}", ")", ":", "\n", "        ", "self", ".", "rule", "=", "rule", "\n", "self", ".", "lhs", "=", "rule", ".", "lhs", "\n", "self", ".", "children", "=", "children", "\n", "self", ".", "meta", "=", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.from_rules": [[191, 206], ["isinstance", "grammar.Derivation", "lexicon.keys", "rules.pop", "lexicon[].pop", "tuple", "cls.from_rules"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.from_rules"], ["", "@", "classmethod", "\n", "def", "from_rules", "(", "cls", ",", "rules", ":", "list", ",", "symbol", "=", "ROOT", ",", "lexicon", "=", "None", ")", ":", "\n", "        ", "\"\"\"Recursively form a derivation from a rule list that has been constructed in a depth-first manner,\n        use the lexicon for the Lexical Rules at the leafs of the constituency tree.\"\"\"", "\n", "# If the current symbol is a Terminal, close current branch and return.", "\n", "if", "isinstance", "(", "symbol", ",", "Terminal", ")", ":", "\n", "            ", "return", "symbol", "\n", "", "if", "symbol", "not", "in", "lexicon", ".", "keys", "(", ")", ":", "\n", "            ", "next_rule", "=", "rules", ".", "pop", "(", ")", "\n", "", "else", ":", "\n", "            ", "next_rule", "=", "lexicon", "[", "symbol", "]", ".", "pop", "(", ")", "\n", "\n", "", "return", "Derivation", "(", "\n", "next_rule", ",", "\n", "tuple", "(", "cls", ".", "from_rules", "(", "rules", ",", "symbol", "=", "next_symbol", ",", "lexicon", "=", "lexicon", ")", "for", "next_symbol", "in", "next_rule", ".", "rhs", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.to_rules": [[208, 222], ["isinstance", "isinstance", "rules.append", "child.to_rules"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.to_rules"], ["", "def", "to_rules", "(", "self", ",", "rules", ":", "list", ",", "lexicon", ":", "dict", ")", ":", "\n", "        ", "for", "child", "in", "self", ".", "children", ":", "\n", "            ", "if", "isinstance", "(", "child", ",", "Derivation", ")", ":", "\n", "                ", "child", ".", "to_rules", "(", "rules", ",", "lexicon", ")", "\n", "", "else", ":", "\n", "                ", "lexicon", "[", "child", "]", "=", "[", "child", "]", "\n", "", "", "if", "isinstance", "(", "self", ".", "rule", ",", "LexicalRule", ")", ":", "\n", "            ", "if", "self", ".", "rule", ".", "lhs", "not", "in", "lexicon", ":", "\n", "                ", "lexicon", "[", "self", ".", "rule", ".", "lhs", "]", "=", "[", "self", ".", "rule", "]", "\n", "", "else", ":", "\n", "                ", "lexicon", "[", "self", ".", "rule", ".", "lhs", "]", "=", "[", "self", ".", "rule", "]", "+", "lexicon", "[", "self", ".", "rule", ".", "lhs", "]", "\n", "", "", "else", ":", "\n", "            ", "rules", ".", "append", "(", "self", ".", "rule", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.words": [[223, 232], ["tuple", "isinstance", "out.append", "child.words"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.words"], ["", "def", "words", "(", "self", ")", "->", "tuple", ":", "\n", "        ", "\"\"\"Obtain all words of a derivation by combining the words of all the children.\"\"\"", "\n", "out", "=", "[", "]", "\n", "for", "child", "in", "self", ".", "children", ":", "\n", "            ", "if", "isinstance", "(", "child", ",", "Terminal", ")", ":", "\n", "                ", "out", ".", "append", "(", "child", ".", "name", ")", "\n", "", "else", ":", "\n", "                ", "out", "+=", "child", ".", "words", "(", ")", "\n", "", "", "return", "tuple", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.meaning": [[234, 246], ["hasattr", "grammar.Derivation.rule.instantiate", "child.meaning", "isinstance"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Np.instantiate", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.meaning"], ["", "def", "meaning", "(", "self", ",", "arguments", ":", "list", ")", "->", "LogicalForm", ":", "\n", "        ", "\"\"\"Recursively define the meaning of the derivation by instantiating the meaning of each child.\"\"\"", "\n", "self", ".", "meta", "[", "\"arguments\"", "]", "=", "arguments", "\n", "if", "not", "hasattr", "(", "self", ",", "\"_cached_logical_form\"", ")", ":", "\n", "            ", "child_meanings", "=", "[", "\n", "child", ".", "meaning", "(", "arguments", ")", "\n", "for", "child", "in", "self", ".", "children", "\n", "if", "isinstance", "(", "child", ",", "Derivation", ")", "\n", "]", "\n", "meaning", "=", "self", ".", "rule", ".", "instantiate", "(", "*", "child_meanings", ",", "meta", "=", "self", ".", "meta", ")", "\n", "self", ".", "_cached_logical_form", "=", "meaning", "\n", "", "return", "self", ".", "_cached_logical_form", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.from_str": [[247, 269], ["rules_str.split", "lexicon_str.split", "cls.from_rules", "rules_list.append", "entry.split", "Terminal", "lexicon[].append"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.from_rules"], ["", "@", "classmethod", "\n", "def", "from_str", "(", "cls", ",", "rules_str", ",", "lexicon_str", ",", "grammar", ")", ":", "\n", "# TODO: method to instantiate derivation from str (see __repr__)", "\n", "        ", "rules_list", "=", "[", "]", "\n", "for", "rule", "in", "rules_str", ".", "split", "(", "','", ")", ":", "\n", "            ", "rules_list", ".", "append", "(", "grammar", ".", "rule_str_to_rules", "[", "rule", "]", ")", "\n", "", "lexicon", "=", "{", "}", "\n", "lexicon_list", "=", "lexicon_str", ".", "split", "(", "','", ")", "\n", "for", "entry", "in", "lexicon_list", ":", "\n", "            ", "items", "=", "entry", ".", "split", "(", "':'", ")", "\n", "symbol_type", "=", "items", "[", "0", "]", "\n", "for", "item", "in", "items", "[", "1", ":", "]", ":", "\n", "                ", "if", "symbol_type", "==", "'T'", ":", "\n", "                    ", "new_terminal", "=", "Terminal", "(", "item", ")", "\n", "lexicon", "[", "new_terminal", "]", "=", "[", "new_terminal", "]", "\n", "", "else", ":", "\n", "                    ", "rule", "=", "grammar", ".", "rule_str_to_rules", "[", "item", "]", "\n", "if", "rule", ".", "lhs", "not", "in", "lexicon", ":", "\n", "                        ", "lexicon", "[", "rule", ".", "lhs", "]", "=", "[", "rule", "]", "\n", "", "else", ":", "\n", "                        ", "lexicon", "[", "rule", ".", "lhs", "]", ".", "append", "(", "rule", ")", "\n", "", "", "", "", "return", "cls", ".", "from_rules", "(", "rules_list", ",", "lexicon", "=", "lexicon", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.__repr__": [[270, 286], ["grammar.Derivation.to_rules", "lexicon.items", "isinstance", "str", "lexicon_list.append", "lexicon_list.append"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.to_rules"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "rules", "=", "[", "]", "\n", "lexicon", "=", "{", "}", "\n", "self", ".", "to_rules", "(", "rules", ",", "lexicon", ")", "\n", "rules_str", "=", "','", ".", "join", "(", "[", "str", "(", "rule", ")", "for", "rule", "in", "rules", "]", ")", "\n", "lexicon_list", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "lexicon", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "key", ",", "Nonterminal", ")", ":", "\n", "                ", "symbol_str", "=", "\"NT\"", "\n", "for", "rhs_symbol", "in", "value", ":", "\n", "                    ", "symbol_str", "+=", "\":{}\"", ".", "format", "(", "rhs_symbol", ")", "\n", "", "lexicon_list", ".", "append", "(", "symbol_str", ")", "\n", "", "else", ":", "\n", "                ", "lexicon_list", ".", "append", "(", "\"T:{}\"", ".", "format", "(", "value", "[", "0", "]", ".", "name", ")", ")", "\n", "", "", "lexicon_str", "=", "','", ".", "join", "(", "lexicon_list", ")", "\n", "return", "rules_str", "+", "';'", "+", "lexicon_str", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Template.__init__": [[294, 299], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_left_values", "=", "[", "]", "\n", "self", ".", "_right_values", "=", "[", "]", "\n", "self", ".", "_leftmost_nonterminal", "=", "None", "\n", "self", ".", "rules", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Template.add_value": [[300, 307], ["grammar.Template._right_values.append", "grammar.Template._left_values.append"], "methods", ["None"], ["", "def", "add_value", "(", "self", ",", "value", ",", "expandable", ")", ":", "\n", "        ", "if", "expandable", "and", "not", "self", ".", "_leftmost_nonterminal", ":", "\n", "            ", "self", ".", "_leftmost_nonterminal", "=", "value", "\n", "", "elif", "self", ".", "_leftmost_nonterminal", ":", "\n", "            ", "self", ".", "_right_values", ".", "append", "(", "value", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_left_values", ".", "append", "(", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Template.has_nonterminal": [[308, 310], ["None"], "methods", ["None"], ["", "", "def", "has_nonterminal", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_leftmost_nonterminal", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Template.get_leftmost_nonterminal": [[311, 314], ["grammar.Template.has_nonterminal"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Template.has_nonterminal"], ["", "def", "get_leftmost_nonterminal", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "has_nonterminal", "(", ")", ",", "\"Trying to get a NT but none present in this derivation.\"", "\n", "return", "self", ".", "_leftmost_nonterminal", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Template.expand_leftmost_nonterminal": [[315, 326], ["grammar.Template", "grammar.Template.rules.copy", "Template.rules.append", "grammar.Template.add_value", "grammar.Template.add_value"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.copy", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Template.add_value", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Template.add_value"], ["", "def", "expand_leftmost_nonterminal", "(", "self", ",", "rule", ",", "expandables", ")", ":", "\n", "        ", "new_derivation", "=", "Template", "(", ")", "\n", "new_derivation_symbols", "=", "self", ".", "_left_values", "+", "rule", ".", "rhs", "+", "self", ".", "_right_values", "\n", "new_derivation", ".", "rules", "=", "self", ".", "rules", ".", "copy", "(", ")", "\n", "new_derivation", ".", "rules", ".", "append", "(", "rule", ")", "\n", "for", "value", "in", "new_derivation_symbols", ":", "\n", "            ", "if", "value", "in", "expandables", ":", "\n", "                ", "new_derivation", ".", "add_value", "(", "value", ",", "expandable", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "new_derivation", ".", "add_value", "(", "value", ",", "expandable", "=", "False", ")", "\n", "", "", "return", "new_derivation", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Template.to_derivation": [[327, 331], ["grammar.Template.rules.reverse", "grammar.Template.has_nonterminal"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Template.has_nonterminal"], ["", "def", "to_derivation", "(", "self", ")", ":", "\n", "        ", "assert", "not", "self", ".", "has_nonterminal", "(", ")", ",", "\"Trying to write a non-terminal to a string.\"", "\n", "self", ".", "rules", ".", "reverse", "(", ")", "\n", "return", "self", ".", "_left_values", ",", "self", ".", "rules", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Grammar.__init__": [[344, 390], ["set", "grammar.Grammar.categories.items", "grammar.Grammar.empty_command_statistics", "grammar.Grammar.lexical_rules", "grammar.Grammar.rules[].append", "set", "set", "set", "len", "vocabulary.get_intransitive_verbs", "vocabulary.get_transitive_verbs", "vocabulary.get_adverbs", "vocabulary.get_nouns", "vocabulary.get_color_adjectives", "vocabulary.get_size_adjectives", "vocabulary.get_adverbs", "vocabulary.get_intransitive_verbs", "len", "str", "vocabulary.get_nouns", "vocabulary.get_transitive_verbs", "isinstance", "vocabulary.get_color_adjectives", "vocabulary.get_size_adjectives"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Grammar.empty_command_statistics", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Grammar.lexical_rules", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.get_intransitive_verbs", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.get_transitive_verbs", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.get_adverbs", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.get_nouns", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.get_color_adjectives", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.get_size_adjectives", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.get_adverbs", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.get_intransitive_verbs", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.get_nouns", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.get_transitive_verbs", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.get_color_adjectives", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.get_size_adjectives"], ["def", "__init__", "(", "self", ",", "vocabulary", ":", "ClassVar", ",", "max_recursion", "=", "1", ",", "type_grammar", "=", "\"normal\"", ")", ":", "\n", "        ", "\"\"\"\n        Defines a grammar of NT -> NT rules and NT -> T rules depending on the vocabulary.\n        :param vocabulary: an instance of class Vocabulary filled with different types of words.\n        :param max_recursion: Maximum recursion to be allowed in generation of examples.\n        :param type_grammar: options are 'full', 'adverb', 'normal' and 'simple'. Determines which set of common rules\n        is chosen.\n        \"\"\"", "\n", "assert", "type_grammar", "in", "self", ".", "RULES", ",", "\"Specified unsupported type grammar {}\"", ".", "format", "(", "type_grammar", ")", "\n", "self", ".", "type_grammar", "=", "type_grammar", "\n", "if", "type_grammar", "==", "\"simple_intrans\"", ":", "\n", "            ", "assert", "len", "(", "vocabulary", ".", "get_intransitive_verbs", "(", ")", ")", ">", "0", ",", "\"Please specify intransitive verbs.\"", "\n", "", "elif", "type_grammar", "==", "\"simple_trans\"", ":", "\n", "            ", "assert", "len", "(", "vocabulary", ".", "get_transitive_verbs", "(", ")", ")", ">", "0", ",", "\"Please specify transitive verbs.\"", "\n", "", "self", ".", "rule_list", "=", "self", ".", "RULES", "[", "type_grammar", "]", "+", "self", ".", "lexical_rules", "(", "vocabulary", ".", "get_intransitive_verbs", "(", ")", ",", "\n", "vocabulary", ".", "get_transitive_verbs", "(", ")", ",", "\n", "vocabulary", ".", "get_adverbs", "(", ")", ",", "\n", "vocabulary", ".", "get_nouns", "(", ")", ",", "\n", "vocabulary", ".", "get_color_adjectives", "(", ")", ",", "\n", "vocabulary", ".", "get_size_adjectives", "(", ")", ")", "\n", "nonterminals", "=", "{", "rule", ".", "lhs", "for", "rule", "in", "self", ".", "rule_list", "}", "\n", "self", ".", "rules", "=", "{", "nonterminal", ":", "[", "]", "for", "nonterminal", "in", "nonterminals", "}", "\n", "self", ".", "nonterminals", "=", "{", "nt", ".", "name", ":", "nt", "for", "nt", "in", "nonterminals", "}", "\n", "self", ".", "terminals", "=", "{", "}", "\n", "\n", "self", ".", "vocabulary", "=", "vocabulary", "\n", "self", ".", "rule_str_to_rules", "=", "{", "}", "\n", "for", "rule", "in", "self", ".", "rule_list", ":", "\n", "            ", "self", ".", "rules", "[", "rule", ".", "lhs", "]", ".", "append", "(", "rule", ")", "\n", "self", ".", "rule_str_to_rules", "[", "str", "(", "rule", ")", "]", "=", "rule", "\n", "", "self", ".", "expandables", "=", "set", "(", "rule", ".", "lhs", "for", "rule", "in", "self", ".", "rule_list", "if", "not", "isinstance", "(", "rule", ",", "LexicalRule", ")", ")", "\n", "self", ".", "categories", "=", "{", "\n", "\"manner\"", ":", "set", "(", "vocabulary", ".", "get_adverbs", "(", ")", ")", ",", "\n", "\"shape\"", ":", "{", "n", "for", "n", "in", "vocabulary", ".", "get_nouns", "(", ")", "}", ",", "\n", "\"color\"", ":", "set", "(", "[", "v", "for", "v", "in", "vocabulary", ".", "get_color_adjectives", "(", ")", "]", ")", ",", "\n", "\"size\"", ":", "set", "(", "[", "v", "for", "v", "in", "vocabulary", ".", "get_size_adjectives", "(", ")", "]", ")", "\n", "}", "\n", "self", ".", "word_to_category", "=", "{", "}", "\n", "for", "category", ",", "words", "in", "self", ".", "categories", ".", "items", "(", ")", ":", "\n", "            ", "for", "word", "in", "words", ":", "\n", "                ", "self", ".", "word_to_category", "[", "word", "]", "=", "category", "\n", "\n", "", "", "self", ".", "max_recursion", "=", "max_recursion", "\n", "self", ".", "all_templates", "=", "[", "]", "\n", "self", ".", "all_derivations", "=", "{", "}", "\n", "self", ".", "command_statistics", "=", "self", ".", "empty_command_statistics", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Grammar.empty_command_statistics": [[391, 399], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "empty_command_statistics", "(", ")", ":", "\n", "        ", "return", "{", "\n", "VV_intransitive", ":", "{", "}", ",", "\n", "VV_transitive", ":", "{", "}", ",", "\n", "NN", ":", "{", "}", ",", "\n", "JJ", ":", "{", "}", ",", "\n", "RB", ":", "{", "}", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Grammar.reset_grammar": [[401, 405], ["grammar.Grammar.empty_command_statistics", "grammar.Grammar.all_templates.clear", "grammar.Grammar.all_derivations.clear"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Grammar.empty_command_statistics"], ["", "def", "reset_grammar", "(", "self", ")", ":", "\n", "        ", "self", ".", "command_statistics", "=", "self", ".", "empty_command_statistics", "(", ")", "\n", "self", ".", "all_templates", ".", "clear", "(", ")", "\n", "self", ".", "all_derivations", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Grammar.lexical_rules": [[406, 439], ["grammar.LexicalRule", "grammar.LexicalRule", "jj_rules.extend", "jj_rules.extend", "grammar.LexicalRule", "grammar.LexicalRule", "GroundedScan.world.Weights", "GroundedScan.world.Weights", "grammar.LexicalRule", "grammar.LexicalRule", "GroundedScan.world.Weights", "GroundedScan.world.Weights", "GroundedScan.world.Weights", "GroundedScan.world.Weights"], "methods", ["None"], ["", "def", "lexical_rules", "(", "self", ",", "verbs_intrans", ":", "List", "[", "str", "]", ",", "verbs_trans", ":", "List", "[", "str", "]", ",", "adverbs", ":", "List", "[", "str", "]", ",", "nouns", ":", "List", "[", "str", "]", ",", "\n", "color_adjectives", ":", "List", "[", "str", "]", ",", "size_adjectives", ":", "List", "[", "str", "]", ")", "->", "list", ":", "\n", "        ", "\"\"\"\n        Instantiate the lexical rules with the sampled words from the vocabulary.\n        \"\"\"", "\n", "assert", "size_adjectives", "or", "color_adjectives", ",", "\"Please specify words for at least one of size_adjectives or \"", "\"color_adjectives.\"", "\n", "all_rules", "=", "[", "]", "\n", "vv_intrans_rules", "=", "[", "\n", "LexicalRule", "(", "lhs", "=", "VV_intransitive", ",", "word", "=", "verb", ",", "sem_type", "=", "EVENT", ",", "specs", "=", "Weights", "(", "action", "=", "verb", ",", "is_transitive", "=", "False", ")", ")", "\n", "for", "verb", "in", "verbs_intrans", "\n", "]", "\n", "all_rules", "+=", "vv_intrans_rules", "\n", "if", "self", ".", "type_grammar", "!=", "\"simple\"", ":", "\n", "            ", "vv_trans_rules", "=", "[", "\n", "LexicalRule", "(", "lhs", "=", "VV_transitive", ",", "word", "=", "verb", ",", "sem_type", "=", "EVENT", ",", "specs", "=", "Weights", "(", "action", "=", "verb", ",", "is_transitive", "=", "True", ")", ")", "\n", "for", "verb", "in", "verbs_trans", "\n", "]", "\n", "all_rules", "+=", "vv_trans_rules", "\n", "", "if", "self", ".", "type_grammar", "==", "\"adverb\"", "or", "self", ".", "type_grammar", "==", "\"full\"", ":", "\n", "            ", "rb_rules", "=", "[", "LexicalRule", "(", "lhs", "=", "RB", ",", "word", "=", "word", ",", "sem_type", "=", "EVENT", ",", "specs", "=", "Weights", "(", "manner", "=", "word", ")", ")", "for", "word", "in", "adverbs", "]", "\n", "all_rules", "+=", "rb_rules", "\n", "", "nn_rules", "=", "[", "LexicalRule", "(", "lhs", "=", "NN", ",", "word", "=", "word", ",", "sem_type", "=", "ENTITY", ",", "specs", "=", "Weights", "(", "noun", "=", "word", ")", ")", "for", "word", "in", "nouns", "]", "\n", "all_rules", "+=", "nn_rules", "\n", "jj_rules", "=", "[", "]", "\n", "if", "color_adjectives", ":", "\n", "            ", "jj_rules", ".", "extend", "(", "[", "LexicalRule", "(", "lhs", "=", "JJ", ",", "word", "=", "word", ",", "sem_type", "=", "ENTITY", ",", "specs", "=", "Weights", "(", "adjective_type", "=", "COLOR", ")", ")", "\n", "for", "word", "in", "color_adjectives", "]", ")", "\n", "", "if", "size_adjectives", ":", "\n", "            ", "jj_rules", ".", "extend", "(", "[", "LexicalRule", "(", "lhs", "=", "JJ", ",", "word", "=", "word", ",", "sem_type", "=", "ENTITY", ",", "specs", "=", "Weights", "(", "adjective_type", "=", "SIZE", ")", ")", "\n", "for", "word", "in", "size_adjectives", "]", ")", "\n", "", "all_rules", "+=", "jj_rules", "\n", "return", "all_rules", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Grammar.sample": [[440, 464], ["isinstance", "grammar.Derivation", "tuple", "numpy.random.randint", "len", "grammar.Grammar.sample"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Grammar.sample"], ["", "def", "sample", "(", "self", ",", "symbol", "=", "ROOT", ",", "last_rule", "=", "None", ",", "recursion", "=", "0", ")", ":", "\n", "        ", "\"\"\"\n        Sample a command from the grammar by recursively sampling rules for each symbol.\n        :param symbol: current node in constituency tree.\n        :param last_rule:  previous rule sampled.\n        :param recursion: recursion depth (increases if sample ruled is applied twice).\n        :return: Derivation\n        \"\"\"", "\n", "# If the current symbol is a Terminal, close current branch and return.", "\n", "if", "isinstance", "(", "symbol", ",", "Terminal", ")", ":", "\n", "            ", "return", "symbol", "\n", "", "nonterminal_rules", "=", "self", ".", "rules", "[", "symbol", "]", "\n", "\n", "# Filter out last rule if max recursion depth is reached.", "\n", "if", "recursion", "==", "self", ".", "max_recursion", "-", "1", ":", "\n", "            ", "nonterminal_rules", "=", "[", "rule", "for", "rule", "in", "nonterminal_rules", "if", "rule", "!=", "last_rule", "]", "\n", "\n", "# Sample a random rule.", "\n", "", "next_rule", "=", "nonterminal_rules", "[", "np", ".", "random", ".", "randint", "(", "len", "(", "nonterminal_rules", ")", ")", "]", "\n", "next_recursion", "=", "recursion", "+", "1", "if", "next_rule", "==", "last_rule", "else", "0", "\n", "return", "Derivation", "(", "\n", "next_rule", ",", "\n", "tuple", "(", "self", ".", "sample", "(", "next_symbol", ",", "next_rule", ",", "next_recursion", ")", "for", "next_symbol", "in", "next_rule", ".", "rhs", ")", ",", "\n", "meta", "=", "{", "\"recursion\"", ":", "recursion", "}", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Grammar.generate_all": [[466, 503], ["current_template.get_leftmost_nonterminal", "current_template.has_nonterminal", "all_templates.append", "isinstance", "rule_use_counter.copy", "current_template.expand_leftmost_nonterminal", "grammar.Grammar.generate_all", "current_template.to_derivation", "rule_use_counter.copy.keys"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Template.get_leftmost_nonterminal", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Template.has_nonterminal", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.copy", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Template.expand_leftmost_nonterminal", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Grammar.generate_all", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Template.to_derivation"], ["", "def", "generate_all", "(", "self", ",", "current_template", ":", "Template", ",", "all_templates", ":", "list", ",", "rule_use_counter", ":", "dict", ")", ":", "\n", "\n", "# If the template contains no non-terminals, we close this branch.", "\n", "        ", "if", "not", "current_template", ".", "has_nonterminal", "(", ")", ":", "\n", "            ", "all_templates", ".", "append", "(", "current_template", ".", "to_derivation", "(", ")", ")", "\n", "return", "\n", "\n", "# Retrieve the leftmost non-terminal to expand.", "\n", "", "leftmost_nonterminal", "=", "current_template", ".", "get_leftmost_nonterminal", "(", ")", "\n", "\n", "# Get all possible RHS replacements and start a new derivation branch for each of them.", "\n", "rules_leftmost_nonterminal", "=", "self", ".", "rules", "[", "leftmost_nonterminal", "]", "\n", "for", "rule_leftmost_nonterminal", "in", "rules_leftmost_nonterminal", ":", "\n", "\n", "# Lexical rules are not expandable", "\n", "            ", "if", "isinstance", "(", "rule_leftmost_nonterminal", ",", "LexicalRule", ")", ":", "\n", "                ", "continue", "\n", "\n", "# Each branch gets its own rule usage counter.", "\n", "", "rule_use_counter_copy", "=", "rule_use_counter", ".", "copy", "(", ")", "\n", "\n", "# If this rule has already been applied in the current branch..", "\n", "if", "rule_leftmost_nonterminal", "in", "rule_use_counter_copy", ".", "keys", "(", ")", ":", "\n", "\n", "# ..do not use it again if it has been applied more than a maximum allowed number of times.", "\n", "                ", "if", "rule_use_counter", "[", "rule_leftmost_nonterminal", "]", ">=", "rule_leftmost_nonterminal", ".", "max_recursion", ":", "\n", "                    ", "continue", "\n", "", "rule_use_counter_copy", "[", "rule_leftmost_nonterminal", "]", "+=", "1", "\n", "", "else", ":", "\n", "                ", "rule_use_counter_copy", "[", "rule_leftmost_nonterminal", "]", "=", "1", "\n", "\n", "# Get the next derivation by replacing the leftmost NT with its RHS.", "\n", "", "next_template", "=", "current_template", ".", "expand_leftmost_nonterminal", "(", "rule_leftmost_nonterminal", ",", "\n", "self", ".", "expandables", ")", "\n", "\n", "# Start a new derivation branch for this RHS.", "\n", "self", ".", "generate_all", "(", "next_template", ",", "all_templates", ",", "rule_use_counter_copy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Grammar.form_commands_from_template": [[504, 556], ["isinstance", "zip", "grammar.Derivation.from_rules", "all_derivations.append", "replaced_template.append", "itertools.product", "isinstance", "derivation_rules.copy", "replaced_template.pop", "grammar.Grammar.split_on_category", "replaced_template.append", "replaced_template.append", "replaced_template.append", "grammar.Derivation.from_rules", "grammar.Grammar.command_statistics[].keys"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.from_rules", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.copy", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Grammar.split_on_category", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.from_rules"], ["", "", "def", "form_commands_from_template", "(", "self", ",", "derivation_template", ":", "list", ",", "derivation_rules", ":", "list", ")", ":", "\n", "        ", "\"\"\"\n        Replaces all NT's in a template with the possible T's and forms all possible commands with those.\n        If multiple the same NT's follow each other, e.g. a JJ JJ JJ NN, for each following JJ the possible words\n        will be halved over the possibilities, meaning no words will repeat themselves (e.g. the red red circle),\n        this does mean that whenever the max. recursion depth for a rule is larger than the log(n) where n is the number\n        of words for that particular rule, this does not have an effect.\n        :param derivation_template: list of NT's, e.g. [VV_intrans, 'to', 'a', JJ, JJ, NN, RB]\n        :param derivation_rules: list of rules that build up the constituency tree for this template\n        :return: all possible combinations where all NT's are replaced by the words from the lexicon.\n        \"\"\"", "\n", "\n", "# In the templates, replace each lexical rule with the possible words from the lexicon", "\n", "replaced_template", "=", "[", "]", "\n", "previous_symbol", "=", "None", "\n", "lexicon", "=", "{", "}", "\n", "for", "symbol", "in", "derivation_template", ":", "\n", "            ", "if", "isinstance", "(", "symbol", ",", "Nonterminal", ")", ":", "\n", "                ", "possible_words", "=", "[", "s", ".", "name", "for", "s", "in", "self", ".", "rules", "[", "symbol", "]", "]", "\n", "for", "rule", "in", "self", ".", "rules", "[", "symbol", "]", ":", "\n", "                    ", "lexicon", "[", "rule", ".", "name", "]", "=", "rule", "\n", "", "if", "previous_symbol", "==", "symbol", ":", "\n", "                    ", "previous_words", "=", "replaced_template", ".", "pop", "(", ")", "\n", "first_words", ",", "second_words", "=", "self", ".", "split_on_category", "(", "previous_words", ")", "\n", "replaced_template", ".", "append", "(", "first_words", ")", "\n", "replaced_template", ".", "append", "(", "second_words", ")", "\n", "", "else", ":", "\n", "                    ", "replaced_template", ".", "append", "(", "possible_words", ")", "\n", "", "", "else", ":", "\n", "                ", "lexicon", "[", "symbol", ".", "name", "]", "=", "symbol", "\n", "replaced_template", ".", "append", "(", "[", "symbol", ".", "name", "]", ")", "\n", "", "previous_symbol", "=", "symbol", "\n", "\n", "# Generate all possible commands from the templates.", "\n", "", "all_commands", "=", "[", "command", "for", "command", "in", "product", "(", "*", "replaced_template", ")", "]", "\n", "all_derivations", "=", "[", "]", "\n", "for", "command", "in", "all_commands", ":", "\n", "            ", "command_lexicon", "=", "{", "}", "\n", "for", "word", ",", "symbol", "in", "zip", "(", "command", ",", "derivation_template", ")", ":", "\n", "                ", "if", "symbol", "not", "in", "command_lexicon", ":", "\n", "                    ", "command_lexicon", "[", "symbol", "]", "=", "[", "lexicon", "[", "word", "]", "]", "\n", "", "else", ":", "\n", "                    ", "command_lexicon", "[", "symbol", "]", "=", "[", "lexicon", "[", "word", "]", "]", "+", "command_lexicon", "[", "symbol", "]", "\n", "", "if", "isinstance", "(", "symbol", ",", "Nonterminal", ")", ":", "\n", "                    ", "if", "word", "not", "in", "self", ".", "command_statistics", "[", "symbol", "]", ".", "keys", "(", ")", ":", "\n", "                        ", "self", ".", "command_statistics", "[", "symbol", "]", "[", "word", "]", "=", "1", "\n", "", "else", ":", "\n", "                        ", "self", ".", "command_statistics", "[", "symbol", "]", "[", "word", "]", "+=", "1", "\n", "", "", "", "derivation", "=", "Derivation", ".", "from_rules", "(", "derivation_rules", ".", "copy", "(", ")", ",", "symbol", "=", "ROOT", ",", "lexicon", "=", "command_lexicon", ")", "\n", "assert", "' '", ".", "join", "(", "derivation", ".", "words", "(", ")", ")", "==", "' '", ".", "join", "(", "command", ")", ",", "\"Derivation and command not the same.\"", "\n", "all_derivations", ".", "append", "(", "derivation", ")", "\n", "", "return", "all_derivations", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Grammar.generate_all_commands": [[557, 569], ["grammar.Template", "grammar.Template.add_value", "grammar.Grammar.generate_all", "enumerate", "grammar.Grammar.form_commands_from_template"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Template.add_value", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Grammar.generate_all", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Grammar.form_commands_from_template"], ["", "def", "generate_all_commands", "(", "self", ")", ":", "\n", "\n", "# Generate all possible templates from the grammar.", "\n", "        ", "initial_template", "=", "Template", "(", ")", "\n", "initial_template", ".", "add_value", "(", "value", "=", "ROOT", ",", "expandable", "=", "True", ")", "\n", "self", ".", "generate_all", "(", "current_template", "=", "initial_template", ",", "all_templates", "=", "self", ".", "all_templates", ",", "\n", "rule_use_counter", "=", "{", "}", ")", "\n", "\n", "# For each template, form all possible commands by combining it with the lexicon.", "\n", "for", "i", ",", "(", "derivation_template", ",", "derivation_rules", ")", "in", "enumerate", "(", "self", ".", "all_templates", ")", ":", "\n", "            ", "derivations", "=", "self", ".", "form_commands_from_template", "(", "derivation_template", ",", "derivation_rules", ")", "\n", "self", ".", "all_derivations", "[", "i", "]", "=", "derivations", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Grammar.split_on_category": [[570, 580], ["grammar.Grammar.category", "grammar.Grammar.category", "first_category_words.append", "second_category_words.append"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Grammar.category", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Grammar.category"], ["", "", "def", "split_on_category", "(", "self", ",", "words_list", ")", ":", "\n", "        ", "first_category_words", "=", "[", "words_list", "[", "0", "]", "]", "\n", "second_category_words", "=", "[", "]", "\n", "first_category", "=", "self", ".", "category", "(", "words_list", "[", "0", "]", ")", "\n", "for", "word", "in", "words_list", "[", "1", ":", "]", ":", "\n", "            ", "if", "self", ".", "category", "(", "word", ")", "==", "first_category", ":", "\n", "                ", "first_category_words", ".", "append", "(", "word", ")", "\n", "", "else", ":", "\n", "                ", "second_category_words", ".", "append", "(", "word", ")", "\n", "", "", "return", "first_category_words", ",", "second_category_words", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Grammar.category": [[581, 583], ["grammar.Grammar.word_to_category.get"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.get"], ["", "def", "category", "(", "self", ",", "function", ")", ":", "\n", "        ", "return", "self", ".", "word_to_category", ".", "get", "(", "function", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Grammar.is_coherent": [[584, 596], ["grammar.Grammar.category", "len", "len", "set"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Grammar.category", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.set"], ["", "def", "is_coherent", "(", "self", ",", "logical_form", ")", ":", "\n", "        ", "\"\"\"\n        Returns true for coherent logical forms, false otherwise. A command's logical form is coherent the\n        arguments of a variable have all unique categories. E.g. in coherent would be: 'the red blue circle'.\n        \"\"\"", "\n", "for", "variable", "in", "logical_form", ".", "variables", ":", "\n", "            ", "functions", "=", "[", "term", ".", "function", "for", "term", "in", "logical_form", ".", "terms", "if", "variable", "in", "term", ".", "arguments", "]", "\n", "categories", "=", "[", "self", ".", "category", "(", "function", ")", "for", "function", "in", "functions", "]", "\n", "categories", "=", "[", "c", "for", "c", "in", "categories", "if", "c", "is", "not", "None", "]", "\n", "if", "len", "(", "categories", ")", "!=", "len", "(", "set", "(", "categories", ")", ")", ":", "\n", "                ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Grammar.__str__": [[597, 602], ["rule.__str__"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv.__str__"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "output_str", "=", "\"\"", "\n", "for", "rule", "in", "self", ".", "rule_list", ":", "\n", "            ", "output_str", "+=", "rule", ".", "__str__", "(", ")", "+", "';'", "\n", "", "return", "output_str", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.free_var": [[36, 40], ["GroundedScan.world.Variable"], "function", ["None"], ["def", "free_var", "(", "sem_type", ")", ":", "\n", "    ", "name", "=", "\"x{}\"", ".", "format", "(", "VAR_COUNTER", "[", "0", "]", ")", "\n", "VAR_COUNTER", "[", "0", "]", "+=", "1", "\n", "return", "Variable", "(", "name", ",", "sem_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.__init__": [[27, 100], ["os.getcwd", "GroundedScan.world.ObjectVocabulary", "GroundedScan.world.World", "GroundedScan.grammar.Grammar", "dataset.GroundedScan.get_empty_split_dict", "dataset.GroundedScan.get_empty_split_dict", "collections.Counter", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "GroundedScan.vocabulary.Vocabulary.initialize", "dataset.GroundedScan.get_empty_data_statistics", "GroundedScan.vocabulary.Vocabulary.sample", "dataset.GroundedScan._vocabulary.get_semantic_shapes", "dataset.GroundedScan._vocabulary.get_semantic_colors", "dataset.GroundedScan._vocabulary.get_semantic_colors", "dataset.GroundedScan._vocabulary.get_semantic_shapes", "ValueError", "GroundedScan.vocabulary.Vocabulary", "ValueError"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.get_empty_split_dict", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.get_empty_split_dict", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.initialize", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.get_empty_data_statistics", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Grammar.sample", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.get_semantic_shapes", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.get_semantic_colors", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.get_semantic_colors", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.get_semantic_shapes"], ["def", "__init__", "(", "self", ",", "intransitive_verbs", ":", "Union", "[", "Dict", "[", "str", ",", "str", "]", ",", "List", "[", "str", "]", ",", "int", "]", ",", "\n", "transitive_verbs", ":", "Union", "[", "Dict", "[", "str", ",", "str", "]", ",", "List", "[", "str", "]", ",", "int", "]", ",", "\n", "adverbs", ":", "Union", "[", "Dict", "[", "str", ",", "str", "]", ",", "List", "[", "str", "]", ",", "int", "]", ",", "nouns", ":", "Union", "[", "Dict", "[", "str", ",", "str", "]", ",", "List", "[", "str", "]", ",", "int", "]", ",", "\n", "color_adjectives", ":", "Union", "[", "Dict", "[", "str", ",", "str", "]", ",", "List", "[", "str", "]", ",", "int", "]", ",", "\n", "size_adjectives", ":", "Union", "[", "Dict", "[", "str", ",", "str", "]", ",", "List", "[", "str", "]", ",", "int", "]", ",", "\n", "grid_size", ":", "int", ",", "min_object_size", ":", "int", ",", "\n", "max_object_size", ":", "int", ",", "type_grammar", ":", "str", ",", "sample_vocabulary", ":", "str", ",", "percentage_train", ":", "float", ",", "\n", "percentage_dev", "=", "0.01", ",", "\n", "save_directory", "=", "os", ".", "getcwd", "(", ")", ",", "max_recursion", "=", "1", ")", ":", "\n", "        ", "if", "sample_vocabulary", "==", "'sample'", ":", "\n", "            ", "needed_type", "=", "int", "\n", "", "elif", "sample_vocabulary", "==", "'load'", ":", "\n", "            ", "needed_type", "=", "dict", "\n", "", "elif", "sample_vocabulary", "==", "'default'", ":", "\n", "            ", "needed_type", "=", "list", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown value specified for sample_vocabulary: {}\"", ".", "format", "(", "sample_vocabulary", ")", ")", "\n", "", "assert", "(", "isinstance", "(", "intransitive_verbs", ",", "needed_type", ")", "and", "isinstance", "(", "transitive_verbs", ",", "needed_type", ")", "and", "\n", "isinstance", "(", "adverbs", ",", "needed_type", ")", "and", "isinstance", "(", "nouns", ",", "needed_type", ")", "and", "\n", "isinstance", "(", "color_adjectives", ",", "needed_type", ")", "and", "isinstance", "(", "size_adjectives", ",", "needed_type", ")", ")", ",", "\"please specify correct flags for words for --sample_vocabulary={}.\"", ".", "format", "(", "sample_vocabulary", ")", "\n", "\n", "# All images, data and data statistics will be saved in this directory.", "\n", "self", ".", "save_directory", "=", "save_directory", "\n", "\n", "# Command vocabulary.", "\n", "if", "sample_vocabulary", "==", "'default'", ":", "\n", "            ", "self", ".", "_vocabulary", "=", "Vocabulary", ".", "initialize", "(", "intransitive_verbs", "=", "intransitive_verbs", ",", "\n", "transitive_verbs", "=", "transitive_verbs", ",", "adverbs", "=", "adverbs", ",", "nouns", "=", "nouns", ",", "\n", "color_adjectives", "=", "color_adjectives", ",", "\n", "size_adjectives", "=", "size_adjectives", ")", "\n", "", "elif", "sample_vocabulary", "==", "'sample'", ":", "\n", "            ", "self", ".", "_vocabulary", "=", "Vocabulary", ".", "sample", "(", "num_intransitive", "=", "intransitive_verbs", ",", "num_transitive", "=", "transitive_verbs", ",", "\n", "num_adverbs", "=", "adverbs", ",", "num_color_adjectives", "=", "color_adjectives", ",", "\n", "num_size_adjectives", "=", "size_adjectives", ")", "\n", "# We need to be able to load the saved vocabulary from file to map nonce words to their original meaning.", "\n", "", "elif", "sample_vocabulary", "==", "'load'", ":", "\n", "            ", "self", ".", "_vocabulary", "=", "Vocabulary", "(", "intransitive_verbs", "=", "intransitive_verbs", ",", "\n", "transitive_verbs", "=", "transitive_verbs", ",", "\n", "adverbs", "=", "adverbs", ",", "nouns", "=", "nouns", ",", "color_adjectives", "=", "color_adjectives", ",", "\n", "size_adjectives", "=", "size_adjectives", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown value for sample_vocabulary.\"", ")", "\n", "\n", "# Object vocabulary.", "\n", "", "self", ".", "_object_vocabulary", "=", "ObjectVocabulary", "(", "shapes", "=", "self", ".", "_vocabulary", ".", "get_semantic_shapes", "(", ")", ",", "\n", "colors", "=", "self", ".", "_vocabulary", ".", "get_semantic_colors", "(", ")", ",", "\n", "min_size", "=", "min_object_size", ",", "max_size", "=", "max_object_size", ")", "\n", "\n", "# Initialize the world.", "\n", "self", ".", "_world", "=", "World", "(", "grid_size", "=", "grid_size", ",", "colors", "=", "self", ".", "_vocabulary", ".", "get_semantic_colors", "(", ")", ",", "\n", "object_vocabulary", "=", "self", ".", "_object_vocabulary", ",", "\n", "shapes", "=", "self", ".", "_vocabulary", ".", "get_semantic_shapes", "(", ")", ",", "\n", "save_directory", "=", "self", ".", "save_directory", ")", "\n", "self", ".", "_relative_directions", "=", "{", "\"n\"", ",", "\"e\"", ",", "\"s\"", ",", "\"w\"", ",", "\"ne\"", ",", "\"se\"", ",", "\"sw\"", ",", "\"nw\"", "}", "\n", "self", ".", "_straight_directions", "=", "{", "\"n\"", ",", "\"e\"", ",", "\"s\"", ",", "\"w\"", "}", "\n", "self", ".", "_combined_directions", "=", "{", "\"ne\"", ",", "\"se\"", ",", "\"sw\"", ",", "\"nw\"", "}", "\n", "\n", "# Generate the grammar.", "\n", "self", ".", "_type_grammar", "=", "type_grammar", "\n", "self", ".", "max_recursion", "=", "max_recursion", "\n", "self", ".", "_grammar", "=", "Grammar", "(", "vocabulary", "=", "self", ".", "_vocabulary", ",", "type_grammar", "=", "type_grammar", ",", "max_recursion", "=", "max_recursion", ")", "\n", "\n", "# Structures for data and statistics.", "\n", "self", ".", "_percentage_train", "=", "percentage_train", "\n", "self", ".", "_percentage_dev", "=", "percentage_dev", "\n", "self", ".", "_possible_splits", "=", "[", "\"train\"", ",", "\"dev\"", ",", "\"test\"", ",", "\"visual\"", ",", "\"situational_1\"", ",", "\"situational_2\"", ",", "\"contextual\"", ",", "\n", "\"adverb_1\"", ",", "\"adverb_2\"", ",", "\"visual_easier\"", ",", "\"target_lengths\"", "]", "\n", "self", ".", "_data_pairs", "=", "self", ".", "get_empty_split_dict", "(", ")", "\n", "self", ".", "_template_identifiers", "=", "self", ".", "get_empty_split_dict", "(", ")", "\n", "self", ".", "_examples_to_visualize", "=", "[", "]", "\n", "self", ".", "_k_shot_examples_in_train", "=", "Counter", "(", ")", "\n", "self", ".", "_data_statistics", "=", "{", "split", ":", "self", ".", "get_empty_data_statistics", "(", ")", "for", "split", "in", "self", ".", "_possible_splits", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.reset_dataset": [[101, 107], ["dataset.GroundedScan._grammar.reset_grammar", "dataset.GroundedScan.get_empty_split_dict", "dataset.GroundedScan.get_empty_split_dict", "dataset.GroundedScan._examples_to_visualize.clear", "dataset.GroundedScan.get_empty_data_statistics"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Grammar.reset_grammar", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.get_empty_split_dict", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.get_empty_split_dict", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.get_empty_data_statistics"], ["", "def", "reset_dataset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_grammar", ".", "reset_grammar", "(", ")", "\n", "self", ".", "_data_pairs", "=", "self", ".", "get_empty_split_dict", "(", ")", "\n", "self", ".", "_template_identifiers", "=", "self", ".", "get_empty_split_dict", "(", ")", "\n", "self", ".", "_examples_to_visualize", ".", "clear", "(", ")", "\n", "self", ".", "_data_statistics", "=", "{", "split", ":", "self", ".", "get_empty_data_statistics", "(", ")", "for", "split", "in", "self", ".", "_possible_splits", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.get_empty_split_dict": [[108, 110], ["None"], "methods", ["None"], ["", "def", "get_empty_split_dict", "(", "self", ")", ":", "\n", "        ", "return", "{", "split", ":", "[", "]", "for", "split", "in", "self", ".", "_possible_splits", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.make_test_set": [[111, 122], ["int", "random.sample", "sorted", "range", "copy.deepcopy", "dataset.GroundedScan._data_pairs[].append", "dataset.GroundedScan._template_identifiers[].append", "len", "len"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Grammar.sample"], ["", "def", "make_test_set", "(", "self", ",", "type_set", ":", "str", ",", "percentage", ":", "float", ")", ":", "\n", "        ", "num_examples", "=", "int", "(", "percentage", "*", "len", "(", "self", ".", "_data_pairs", "[", "\"train\"", "]", ")", ")", "\n", "k_random_indices", "=", "random", ".", "sample", "(", "range", "(", "0", ",", "len", "(", "self", ".", "_data_pairs", "[", "\"train\"", "]", ")", ")", ",", "k", "=", "num_examples", ")", "\n", "for", "example_idx", "in", "k_random_indices", ":", "\n", "            ", "example", "=", "deepcopy", "(", "self", ".", "_data_pairs", "[", "\"train\"", "]", "[", "example_idx", "]", ")", "\n", "template_identifier", "=", "self", ".", "_template_identifiers", "[", "\"train\"", "]", "[", "example_idx", "]", "\n", "self", ".", "_data_pairs", "[", "type_set", "]", ".", "append", "(", "example", ")", "\n", "self", ".", "_template_identifiers", "[", "type_set", "]", ".", "append", "(", "template_identifier", ")", "\n", "", "for", "example_idx", "in", "sorted", "(", "k_random_indices", ",", "reverse", "=", "True", ")", ":", "\n", "            ", "del", "self", ".", "_data_pairs", "[", "\"train\"", "]", "[", "example_idx", "]", "\n", "del", "self", ".", "_template_identifiers", "[", "\"train\"", "]", "[", "example_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.move_k_examples_to_train": [[123, 136], ["random.sample", "sorted", "len", "logger.info", "range", "copy.deepcopy", "dataset.GroundedScan._data_pairs[].append", "dataset.GroundedScan._template_identifiers[].append", "len"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Grammar.sample"], ["", "", "def", "move_k_examples_to_train", "(", "self", ",", "k", ":", "int", ",", "split", ":", "str", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "_data_pairs", "[", "split", "]", ")", "<", "k", "+", "1", ":", "\n", "            ", "logger", ".", "info", "(", "\"Not enough examples in split {} for k(k={})-shot generalization\"", ".", "format", "(", "split", ",", "k", ")", ")", "\n", "", "k_random_indices", "=", "random", ".", "sample", "(", "range", "(", "0", ",", "len", "(", "self", ".", "_data_pairs", "[", "split", "]", ")", ")", ",", "k", "=", "k", ")", "\n", "for", "example_idx", "in", "k_random_indices", ":", "\n", "            ", "example", "=", "deepcopy", "(", "self", ".", "_data_pairs", "[", "split", "]", "[", "example_idx", "]", ")", "\n", "template_identifier", "=", "self", ".", "_template_identifiers", "[", "split", "]", "[", "example_idx", "]", "\n", "self", ".", "_data_pairs", "[", "\"train\"", "]", ".", "append", "(", "example", ")", "\n", "self", ".", "_template_identifiers", "[", "\"train\"", "]", ".", "append", "(", "template_identifier", ")", "\n", "self", ".", "_k_shot_examples_in_train", "[", "split", "]", "+=", "1", "\n", "", "for", "example_idx", "in", "sorted", "(", "k_random_indices", ",", "reverse", "=", "True", ")", ":", "\n", "            ", "del", "self", ".", "_data_pairs", "[", "split", "]", "[", "example_idx", "]", "\n", "del", "self", ".", "_template_identifiers", "[", "split", "]", "[", "example_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.get_examples_with_image": [[137, 164], ["dataset.GroundedScan.parse_command_repr", "example.get", "dataset.GroundedScan.parse_command_repr", "GroundedScan.world.Situation.from_representation", "dataset.GroundedScan._world.clear_situation", "dataset.GroundedScan.initialize_world", "dataset.GroundedScan.parse_command_repr", "dataset.GroundedScan._world.get_current_situation_grid_repr", "dataset.GroundedScan._world.get_current_situation_image", "example.get"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.parse_command_repr", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.parse_command_repr", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.from_representation", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.clear_situation", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.initialize_world", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.parse_command_repr", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.get_current_situation_grid_repr", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.get_current_situation_image", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.get"], ["", "", "def", "get_examples_with_image", "(", "self", ",", "split", "=", "\"train\"", ",", "simple_situation_representation", "=", "False", ")", "->", "dict", ":", "\n", "        ", "\"\"\"\n        Get data pairs with images in the form of np.ndarray's with RGB values or with 1 pixel per grid cell\n        (see encode in class Grid of minigrid.py for details on what such representation looks like).\n        :param split: string specifying which split to load.\n        :param simple_situation_representation:  whether to get the full RGB image or a simple representation.\n        :return: data examples.\n        \"\"\"", "\n", "for", "example", "in", "self", ".", "_data_pairs", "[", "split", "]", ":", "\n", "            ", "command", "=", "self", ".", "parse_command_repr", "(", "example", "[", "\"command\"", "]", ")", "\n", "if", "example", ".", "get", "(", "\"meaning\"", ")", ":", "\n", "                ", "meaning", "=", "example", "[", "\"meaning\"", "]", "\n", "", "else", ":", "\n", "                ", "meaning", "=", "example", "[", "\"command\"", "]", "\n", "", "meaning", "=", "self", ".", "parse_command_repr", "(", "meaning", ")", "\n", "situation", "=", "Situation", ".", "from_representation", "(", "example", "[", "\"situation\"", "]", ")", "\n", "self", ".", "_world", ".", "clear_situation", "(", ")", "\n", "self", ".", "initialize_world", "(", "situation", ")", "\n", "if", "simple_situation_representation", ":", "\n", "                ", "situation_image", "=", "self", ".", "_world", ".", "get_current_situation_grid_repr", "(", ")", "\n", "", "else", ":", "\n", "                ", "situation_image", "=", "self", ".", "_world", ".", "get_current_situation_image", "(", ")", "\n", "", "target_commands", "=", "self", ".", "parse_command_repr", "(", "example", "[", "\"target_commands\"", "]", ")", "\n", "yield", "{", "\"input_command\"", ":", "command", ",", "\"input_meaning\"", ":", "meaning", ",", "\n", "\"derivation_representation\"", ":", "example", ".", "get", "(", "\"derivation\"", ")", ",", "\n", "\"situation_image\"", ":", "situation_image", ",", "\"situation_representation\"", ":", "example", "[", "\"situation\"", "]", ",", "\n", "\"target_command\"", ":", "target_commands", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.situation_image_dimension": [[165, 168], ["dataset.GroundedScan._world.get_current_situation_image"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.get_current_situation_image"], ["", "", "@", "property", "\n", "def", "situation_image_dimension", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_world", ".", "get_current_situation_image", "(", ")", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.num_examples": [[169, 171], ["len"], "methods", ["None"], ["", "def", "num_examples", "(", "self", ",", "split", "=", "\"train\"", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_data_pairs", "[", "split", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.count_equivalent_examples": [[172, 185], ["logger.info", "enumerate", "enumerate", "len", "len", "dataset.GroundedScan.compare_examples"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.compare_examples"], ["", "def", "count_equivalent_examples", "(", "self", ",", "split_1", "=", "\"train\"", ",", "split_2", "=", "\"test\"", ")", ":", "\n", "        ", "\"\"\"Count the number of equivalent examples between two specified splits.\"\"\"", "\n", "logger", ".", "info", "(", "\"WARNING: about to compare a maximum of {} examples.\"", ".", "format", "(", "\n", "len", "(", "self", ".", "_data_pairs", "[", "split_1", "]", ")", "*", "len", "(", "self", ".", "_data_pairs", "[", "split_2", "]", ")", ")", ")", "\n", "equivalent_examples", "=", "0", "\n", "for", "i", ",", "example_1", "in", "enumerate", "(", "self", ".", "_data_pairs", "[", "split_1", "]", ")", ":", "\n", "            ", "template_identifier_1", "=", "self", ".", "_template_identifiers", "[", "split_1", "]", "[", "i", "]", "\n", "for", "j", ",", "example_2", "in", "enumerate", "(", "self", ".", "_data_pairs", "[", "split_2", "]", ")", ":", "\n", "                ", "template_identifier_2", "=", "self", ".", "_template_identifiers", "[", "split_2", "]", "[", "j", "]", "\n", "if", "template_identifier_2", "==", "template_identifier_1", ":", "\n", "                    ", "if", "self", ".", "compare_examples", "(", "example_1", ",", "example_2", ")", ":", "\n", "                        ", "equivalent_examples", "+=", "1", "\n", "", "", "", "", "return", "equivalent_examples", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.discard_equivalent_examples": [[186, 199], ["enumerate", "sorted", "dataset.GroundedScan.has_equivalent_example", "to_delete.append"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.has_equivalent_example"], ["", "def", "discard_equivalent_examples", "(", "self", ",", "split", "=", "\"test\"", ")", "->", "int", ":", "\n", "        ", "\"\"\"Go over the specified split and discard any examples that are already found in the training set.\"\"\"", "\n", "equivalent_examples", "=", "0", "\n", "to_delete", "=", "[", "]", "\n", "for", "i", ",", "example", "in", "enumerate", "(", "self", ".", "_data_pairs", "[", "split", "]", ")", ":", "\n", "            ", "template_identifier", "=", "self", ".", "_template_identifiers", "[", "split", "]", "[", "i", "]", "\n", "if", "self", ".", "has_equivalent_example", "(", "example", ",", "template_identifier", ",", "split", "=", "\"train\"", ")", ":", "\n", "                ", "equivalent_examples", "+=", "1", "\n", "to_delete", ".", "append", "(", "i", ")", "\n", "", "", "for", "i_to_delete", "in", "sorted", "(", "to_delete", ",", "reverse", "=", "True", ")", ":", "\n", "            ", "del", "self", ".", "_data_pairs", "[", "split", "]", "[", "i_to_delete", "]", "\n", "del", "self", ".", "_template_identifiers", "[", "split", "]", "[", "i_to_delete", "]", "\n", "", "return", "equivalent_examples", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.has_equivalent_example": [[200, 208], ["enumerate", "dataset.GroundedScan.compare_examples"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.compare_examples"], ["", "def", "has_equivalent_example", "(", "self", ",", "example", ":", "dict", ",", "template_identifier", ":", "int", ",", "split", "=", "\"train\"", ")", ":", "\n", "        ", "\"\"\"Go over the matching templates in the specified split and compare for equivalent with the passed example.\"\"\"", "\n", "for", "i", ",", "example_1", "in", "enumerate", "(", "self", ".", "_data_pairs", "[", "split", "]", ")", ":", "\n", "            ", "template_identifier_1", "=", "self", ".", "_template_identifiers", "[", "split", "]", "[", "i", "]", "\n", "if", "template_identifier_1", "==", "template_identifier", ":", "\n", "                ", "if", "self", ".", "compare_examples", "(", "example_1", ",", "example", ")", ":", "\n", "                    ", "return", "True", "\n", "", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.meaning_command": [[209, 211], ["dataset.GroundedScan._vocabulary.translate_word"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_word"], ["", "def", "meaning_command", "(", "self", ",", "input_command", ":", "List", "[", "str", "]", ")", ":", "\n", "        ", "return", "[", "self", ".", "_vocabulary", ".", "translate_word", "(", "word", ")", "for", "word", "in", "input_command", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.fill_example": [[212, 232], ["dataset.GroundedScan.command_repr", "dataset.GroundedScan.command_repr", "dataset.GroundedScan.derivation_repr", "situation.to_representation", "dataset.GroundedScan.command_repr", "dataset.GroundedScan._vocabulary.translate_word", "dataset.GroundedScan._vocabulary.translate_word", "dataset.GroundedScan._data_pairs[].append", "dataset.GroundedScan._examples_to_visualize.append", "dataset.GroundedScan.meaning_command", "dataset.GroundedScan._vocabulary.translate_word", "dataset.GroundedScan._vocabulary.translate_word", "dataset.GroundedScan._vocabulary.translate_word"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.command_repr", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.command_repr", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.derivation_repr", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.to_representation", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.command_repr", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.meaning_command", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_word"], ["", "def", "fill_example", "(", "self", ",", "command", ":", "List", "[", "str", "]", ",", "derivation", ":", "Derivation", ",", "situation", ":", "Situation", ",", "target_commands", ":", "List", "[", "str", "]", ",", "\n", "verb_in_command", ":", "str", ",", "target_predicate", ":", "dict", ",", "visualize", ":", "bool", ",", "adverb", ":", "str", ",", "splits", ":", "List", "[", "str", "]", ")", ":", "\n", "        ", "\"\"\"Add an example to the list of examples for the specified split.\"\"\"", "\n", "example", "=", "{", "\n", "\"command\"", ":", "self", ".", "command_repr", "(", "command", ")", ",", "\n", "\"meaning\"", ":", "self", ".", "command_repr", "(", "self", ".", "meaning_command", "(", "command", ")", ")", ",", "\n", "\"derivation\"", ":", "self", ".", "derivation_repr", "(", "derivation", ")", ",", "\n", "\"situation\"", ":", "situation", ".", "to_representation", "(", ")", ",", "\n", "\"target_commands\"", ":", "self", ".", "command_repr", "(", "target_commands", ")", ",", "\n", "\"verb_in_command\"", ":", "self", ".", "_vocabulary", ".", "translate_word", "(", "verb_in_command", ")", ",", "\n", "\"manner\"", ":", "self", ".", "_vocabulary", ".", "translate_word", "(", "adverb", ")", ",", "\n", "\"referred_target\"", ":", "' '", ".", "join", "(", "[", "self", ".", "_vocabulary", ".", "translate_word", "(", "target_predicate", "[", "\"size\"", "]", ")", ",", "\n", "self", ".", "_vocabulary", ".", "translate_word", "(", "target_predicate", "[", "\"color\"", "]", ")", ",", "\n", "self", ".", "_vocabulary", ".", "translate_word", "(", "target_predicate", "[", "\"noun\"", "]", ")", "]", ")", "\n", "}", "\n", "for", "split", "in", "splits", ":", "\n", "            ", "self", ".", "_data_pairs", "[", "split", "]", ".", "append", "(", "example", ")", "\n", "", "if", "visualize", ":", "\n", "            ", "self", ".", "_examples_to_visualize", ".", "append", "(", "example", ")", "\n", "", "return", "example", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.compare_examples": [[233, 246], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "compare_examples", "(", "example_1", ":", "dict", ",", "example_2", ":", "dict", ")", "->", "bool", ":", "\n", "        ", "\"\"\"An example is regarded the same if the command, situation, target commands are the same.\"\"\"", "\n", "if", "example_1", "[", "\"command\"", "]", "!=", "example_2", "[", "\"command\"", "]", ":", "\n", "            ", "return", "False", "\n", "", "if", "example_1", "[", "\"target_commands\"", "]", "!=", "example_2", "[", "\"target_commands\"", "]", ":", "\n", "            ", "return", "False", "\n", "", "target_position_1", "=", "example_1", "[", "'situation'", "]", "[", "'target_object'", "]", "[", "'position'", "]", "\n", "target_position_2", "=", "example_2", "[", "'situation'", "]", "[", "'target_object'", "]", "[", "'position'", "]", "\n", "if", "(", "target_position_1", "[", "'row'", "]", "!=", "target_position_2", "[", "'row'", "]", "or", "\n", "target_position_1", "[", "'column'", "]", "!=", "target_position_2", "[", "'column'", "]", ")", ":", "\n", "            ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.parse_example": [[247, 259], ["dataset.GroundedScan.parse_command_repr", "dataset.GroundedScan.parse_command_repr", "GroundedScan.world.Situation.from_representation", "dataset.GroundedScan.parse_command_repr", "dataset.GroundedScan.parse_derivation_repr", "dataset.GroundedScan.demonstrate_command", "dataset.GroundedScan.derivation_repr", "dataset.GroundedScan.command_repr", "dataset.GroundedScan.command_repr"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.parse_command_repr", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.parse_command_repr", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.from_representation", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.parse_command_repr", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.parse_derivation_repr", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.demonstrate_command", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.derivation_repr", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.command_repr", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.command_repr"], ["", "def", "parse_example", "(", "self", ",", "data_example", ":", "dict", ")", ":", "\n", "        ", "\"\"\"Take an example as written in a file and parse it to its internal representations such that we can interact\n        with it.\"\"\"", "\n", "command", "=", "self", ".", "parse_command_repr", "(", "data_example", "[", "\"command\"", "]", ")", "\n", "meaning", "=", "self", ".", "parse_command_repr", "(", "data_example", "[", "\"meaning\"", "]", ")", "\n", "situation", "=", "Situation", ".", "from_representation", "(", "data_example", "[", "\"situation\"", "]", ")", "\n", "target_commands", "=", "self", ".", "parse_command_repr", "(", "data_example", "[", "\"target_commands\"", "]", ")", "\n", "derivation", "=", "self", ".", "parse_derivation_repr", "(", "data_example", "[", "\"derivation\"", "]", ")", "\n", "assert", "self", ".", "derivation_repr", "(", "derivation", ")", "==", "data_example", "[", "\"derivation\"", "]", "\n", "actual_target_commands", ",", "target_demonstration", ",", "action", "=", "self", ".", "demonstrate_command", "(", "derivation", ",", "situation", ")", "\n", "assert", "self", ".", "command_repr", "(", "actual_target_commands", ")", "==", "self", ".", "command_repr", "(", "target_commands", ")", "\n", "return", "command", ",", "meaning", ",", "derivation", ",", "situation", ",", "actual_target_commands", ",", "target_demonstration", ",", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.get_empty_situation": [[260, 270], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_empty_situation", "(", ")", ":", "\n", "        ", "return", "{", "\n", "\"distance_to_target\"", ":", "None", ",", "\n", "\"direction_to_target\"", ":", "None", ",", "\n", "\"target_shape\"", ":", "None", ",", "\n", "\"target_color\"", ":", "None", ",", "\n", "\"target_size\"", ":", "None", ",", "\n", "\"target_position\"", ":", "None", ",", "\n", "\"agent_position\"", ":", "None", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.get_empty_data_statistics": [[272, 304], ["collections.Counter", "collections.Counter", "collections.Counter", "collections.Counter", "collections.Counter", "collections.Counter", "collections.Counter", "collections.Counter", "collections.Counter", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "empty_dict[].keys", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.Counter", "collections.defaultdict", "collections.Counter", "collections.defaultdict", "collections.Counter", "collections.defaultdict", "collections.Counter", "collections.defaultdict", "collections.Counter", "str"], "methods", ["None"], ["", "def", "get_empty_data_statistics", "(", "self", ")", ":", "\n", "        ", "empty_dict", "=", "{", "\n", "\"distance_to_target\"", ":", "Counter", "(", ")", ",", "\n", "\"direction_to_target\"", ":", "Counter", "(", ")", ",", "\n", "\"input_length\"", ":", "Counter", "(", ")", ",", "\n", "\"target_length\"", ":", "Counter", "(", ")", ",", "\n", "\"target_shape\"", ":", "Counter", "(", ")", ",", "\n", "\"target_color\"", ":", "Counter", "(", ")", ",", "\n", "\"target_size\"", ":", "Counter", "(", ")", ",", "\n", "\"target_position\"", ":", "Counter", "(", ")", ",", "\n", "\"agent_position\"", ":", "Counter", "(", ")", ",", "\n", "\"verbs_in_command\"", ":", "defaultdict", "(", "int", ")", ",", "\n", "\"manners_in_command\"", ":", "defaultdict", "(", "int", ")", ",", "\n", "\"verb_adverb_combinations\"", ":", "defaultdict", "(", "lambda", ":", "defaultdict", "(", "int", ")", ")", ",", "\n", "\"verb_target_combinations\"", ":", "defaultdict", "(", "lambda", ":", "defaultdict", "(", "int", ")", ")", ",", "\n", "\"referred_targets\"", ":", "defaultdict", "(", "lambda", ":", "defaultdict", "(", "int", ")", ")", ",", "\n", "\"placed_targets\"", ":", "defaultdict", "(", "int", ")", ",", "\n", "\"situations\"", ":", "{", "\n", "\"shape\"", ":", "{", "\"objects_in_world\"", ":", "defaultdict", "(", "int", ")", ",", "\"num_objects_placed\"", ":", "Counter", "(", ")", "}", ",", "\n", "\"color,shape\"", ":", "{", "\"objects_in_world\"", ":", "defaultdict", "(", "int", ")", ",", "\"num_objects_placed\"", ":", "Counter", "(", ")", "}", ",", "\n", "\"size,shape\"", ":", "{", "\"objects_in_world\"", ":", "defaultdict", "(", "int", ")", ",", "\"num_objects_placed\"", ":", "Counter", "(", ")", "}", ",", "\n", "\"size,color,shape\"", ":", "{", "\"objects_in_world\"", ":", "defaultdict", "(", "int", ")", ",", "\"num_objects_placed\"", ":", "Counter", "(", ")", "}", ",", "\n", "\"all\"", ":", "{", "\"objects_in_world\"", ":", "defaultdict", "(", "int", ")", ",", "\"num_objects_placed\"", ":", "Counter", "(", ")", "}", ",", "\n", "}", ",", "\n", "\"examples_in_train\"", ":", "0", "\n", "}", "\n", "for", "target_object", "in", "self", ".", "_object_vocabulary", ".", "all_objects", ":", "\n", "            ", "target_object_str", "=", "' '", ".", "join", "(", "[", "str", "(", "target_object", "[", "0", "]", ")", ",", "target_object", "[", "1", "]", ",", "target_object", "[", "2", "]", "]", ")", "\n", "for", "key", "in", "empty_dict", "[", "\"situations\"", "]", ".", "keys", "(", ")", ":", "\n", "                ", "empty_dict", "[", "\"situations\"", "]", "[", "key", "]", "[", "target_object_str", "]", "=", "0", "\n", "", "empty_dict", "[", "\"placed_targets\"", "]", "[", "target_object_str", "]", "=", "0", "\n", "", "return", "empty_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.update_data_statistics": [[305, 357], ["data_example.get", "data_example.get", "len", "[].values", "referred_target.split.split.split", "len", "[].keys", "int", "str", "len", "len", "len", "data_example.get", "data_example[].split", "data_example[].split"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.get"], ["", "def", "update_data_statistics", "(", "self", ",", "data_example", ",", "split", "=", "\"train\"", ")", ":", "\n", "        ", "\"\"\"Keeps track of certain statistics regarding the data pairs generated.\"\"\"", "\n", "\n", "# Update the statistics regarding the situation.", "\n", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"distance_to_target\"", "]", "[", "int", "(", "data_example", "[", "\"situation\"", "]", "[", "\"distance_to_target\"", "]", ")", "]", "+=", "1", "\n", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"direction_to_target\"", "]", "[", "data_example", "[", "\"situation\"", "]", "[", "\"direction_to_target\"", "]", "]", "+=", "1", "\n", "target_size", "=", "data_example", "[", "\"situation\"", "]", "[", "\"target_object\"", "]", "[", "\"object\"", "]", "[", "\"size\"", "]", "\n", "target_color", "=", "data_example", "[", "\"situation\"", "]", "[", "\"target_object\"", "]", "[", "\"object\"", "]", "[", "\"color\"", "]", "\n", "target_shape", "=", "data_example", "[", "\"situation\"", "]", "[", "\"target_object\"", "]", "[", "\"object\"", "]", "[", "\"shape\"", "]", "\n", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"target_shape\"", "]", "[", "target_shape", "]", "+=", "1", "\n", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"target_color\"", "]", "[", "target_color", "]", "+=", "1", "\n", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"target_size\"", "]", "[", "target_size", "]", "+=", "1", "\n", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"target_position\"", "]", "[", "\n", "(", "data_example", "[", "\"situation\"", "]", "[", "\"target_object\"", "]", "[", "\"position\"", "]", "[", "\"column\"", "]", ",", "\n", "data_example", "[", "\"situation\"", "]", "[", "\"target_object\"", "]", "[", "\"position\"", "]", "[", "\"row\"", "]", ")", "]", "+=", "1", "\n", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"agent_position\"", "]", "[", "(", "data_example", "[", "\"situation\"", "]", "[", "\"agent_position\"", "]", "[", "\"column\"", "]", ",", "\n", "data_example", "[", "\"situation\"", "]", "[", "\"agent_position\"", "]", "[", "\"row\"", "]", ")", "]", "+=", "1", "\n", "placed_target", "=", "' '", ".", "join", "(", "[", "str", "(", "target_size", ")", ",", "target_color", ",", "target_shape", "]", ")", "\n", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"placed_targets\"", "]", "[", "placed_target", "]", "+=", "1", "\n", "\n", "# Update the statistics regarding the command.", "\n", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"verbs_in_command\"", "]", "[", "data_example", "[", "\"verb_in_command\"", "]", "]", "+=", "1", "\n", "manner", "=", "data_example", ".", "get", "(", "\"manner\"", ")", "\n", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"manners_in_command\"", "]", "[", "manner", "]", "+=", "1", "\n", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"referred_targets\"", "]", "[", "data_example", ".", "get", "(", "\"referred_target\"", ")", "]", "[", "placed_target", "]", "+=", "1", "\n", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"verb_adverb_combinations\"", "]", "[", "manner", "]", "[", "data_example", "[", "\"verb_in_command\"", "]", "]", "+=", "1", "\n", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"verb_target_combinations\"", "]", "[", "data_example", "[", "\"verb_in_command\"", "]", "]", "[", "placed_target", "]", "+=", "1", "\n", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"input_length\"", "]", "[", "len", "(", "data_example", "[", "\"command\"", "]", ".", "split", "(", "','", ")", ")", "]", "+=", "1", "\n", "\n", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"target_length\"", "]", "[", "len", "(", "data_example", "[", "\"target_commands\"", "]", ".", "split", "(", "','", ")", ")", "]", "+=", "1", "\n", "referred_target", "=", "data_example", ".", "get", "(", "\"referred_target\"", ")", "\n", "if", "referred_target", ":", "\n", "            ", "referred_target", "=", "referred_target", ".", "split", "(", ")", "\n", "", "else", ":", "\n", "            ", "referred_target", "=", "[", "\"\"", "]", "\n", "", "if", "len", "(", "referred_target", ")", "==", "3", ":", "\n", "            ", "referred_categories", "=", "\"size,color,shape\"", "\n", "", "elif", "len", "(", "referred_target", ")", "==", "1", ":", "\n", "            ", "referred_categories", "=", "\"shape\"", "\n", "", "else", ":", "\n", "            ", "if", "referred_target", "[", "0", "]", "in", "self", ".", "_object_vocabulary", ".", "object_colors", ":", "\n", "                ", "referred_categories", "=", "\"color,shape\"", "\n", "", "else", ":", "\n", "                ", "referred_categories", "=", "\"size,shape\"", "\n", "", "", "num_placed_objects", "=", "len", "(", "data_example", "[", "'situation'", "]", "[", "'placed_objects'", "]", ".", "keys", "(", ")", ")", "\n", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"situations\"", "]", "[", "referred_categories", "]", "[", "\"num_objects_placed\"", "]", "[", "num_placed_objects", "]", "+=", "1", "\n", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"situations\"", "]", "[", "\"all\"", "]", "[", "\"num_objects_placed\"", "]", "[", "num_placed_objects", "]", "+=", "1", "\n", "for", "placed_object", "in", "data_example", "[", "'situation'", "]", "[", "'placed_objects'", "]", ".", "values", "(", ")", ":", "\n", "            ", "placed_object", "=", "' '", ".", "join", "(", "[", "placed_object", "[", "'object'", "]", "[", "'size'", "]", ",", "placed_object", "[", "'object'", "]", "[", "'color'", "]", ",", "\n", "placed_object", "[", "'object'", "]", "[", "'shape'", "]", "]", ")", "\n", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"situations\"", "]", "[", "referred_categories", "]", "[", "\"objects_in_world\"", "]", "[", "placed_object", "]", "+=", "1", "\n", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"situations\"", "]", "[", "\"all\"", "]", "[", "\"objects_in_world\"", "]", "[", "placed_object", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.save_position_counts": [[358, 378], ["file.write", "range", "file.write", "file.write", "range", "file.write", "file.write", "file.write", "len", "len", "str", "str", "str", "str"], "methods", ["None"], ["", "", "def", "save_position_counts", "(", "self", ",", "position_counts", ",", "file", ")", "->", "{", "}", ":", "\n", "        ", "\"\"\"\n        Prints a grid with at each position a count of something occurring at that position in the dataset\n        (e.g. the agent or the target object.)\n        \"\"\"", "\n", "file", ".", "write", "(", "\"Columns\\n\"", ")", "\n", "for", "row", "in", "range", "(", "self", ".", "_world", ".", "grid_size", ")", ":", "\n", "            ", "row_print", "=", "\"Row {}\"", ".", "format", "(", "row", ")", "\n", "file", ".", "write", "(", "row_print", ")", "\n", "file", ".", "write", "(", "(", "8", "-", "len", "(", "row_print", ")", ")", "*", "' '", ")", "\n", "for", "column", "in", "range", "(", "self", ".", "_world", ".", "grid_size", ")", ":", "\n", "                ", "if", "(", "str", "(", "column", ")", ",", "str", "(", "row", ")", ")", "in", "position_counts", ":", "\n", "                    ", "count", "=", "position_counts", "[", "(", "str", "(", "column", ")", ",", "str", "(", "row", ")", ")", "]", "\n", "", "else", ":", "\n", "                    ", "count", "=", "0", "\n", "", "count_print", "=", "\"({}, {}): {}\"", ".", "format", "(", "column", ",", "row", ",", "count", ")", "\n", "fill_spaces", "=", "20", "-", "len", "(", "count_print", ")", "\n", "file", ".", "write", "(", "count_print", "+", "fill_spaces", "*", "' '", ")", "\n", "", "file", ".", "write", "(", "\"\\n\"", ")", "\n", "file", ".", "write", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.save_dataset_statistics": [[379, 456], ["[].items", "dataset.GroundedScan.get_empty_situation().keys", "GroundedScan.helpers.bar_plot", "GroundedScan.helpers.bar_plot", "GroundedScan.helpers.bar_plot", "GroundedScan.helpers.bar_plot", "dataset.GroundedScan.update_data_statistics", "open", "len", "infile.write", "infile.write", "[].items", "sum", "infile.write", "infile.write", "dataset.GroundedScan.save_position_counts", "infile.write", "dataset.GroundedScan.save_position_counts", "infile.write", "infile.write", "verb_target_combinations.items", "infile.write", "infile.write", "infile.write", "GroundedScan.helpers.save_counter", "infile.write", "infile.write", "verb_adverb_combinations.items", "infile.write", "infile.write", "referred_targets.items", "infile.write", "GroundedScan.helpers.save_counter", "infile.write", "situation_stats.items", "len", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "logger.info", "[].values", "GroundedScan.helpers.save_counter", "GroundedScan.helpers.save_counter", "GroundedScan.helpers.save_counter", "GroundedScan.helpers.save_counter", "GroundedScan.helpers.save_counter", "GroundedScan.helpers.bar_plot", "dataset.GroundedScan.get_empty_situation", "GroundedScan.helpers.bar_plot", "str", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.helpers.bar_plot", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.helpers.bar_plot", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.helpers.bar_plot", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.helpers.bar_plot", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.update_data_statistics", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.save_position_counts", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.save_position_counts", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.helpers.save_counter", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.helpers.save_counter", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.helpers.save_counter", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.helpers.save_counter", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.helpers.save_counter", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.helpers.save_counter", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.helpers.save_counter", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.helpers.bar_plot", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.get_empty_situation", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.helpers.bar_plot"], ["", "", "def", "save_dataset_statistics", "(", "self", ",", "split", "=", "\"train\"", ")", "->", "{", "}", ":", "\n", "        ", "\"\"\"\n        Summarizes the statistics and saves and prints them.\n        \"\"\"", "\n", "examples", "=", "self", ".", "_data_pairs", "[", "split", "]", "\n", "for", "example", "in", "examples", ":", "\n", "            ", "self", ".", "update_data_statistics", "(", "example", ",", "split", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_directory", ",", "split", "+", "\"_dataset_stats.txt\"", ")", ",", "'w'", ")", "as", "infile", ":", "\n", "# General statistics", "\n", "            ", "number_of_examples", "=", "len", "(", "self", ".", "_data_pairs", "[", "split", "]", ")", "\n", "if", "number_of_examples", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "\"WARNING: trying to save dataset statistics for an empty split {}.\"", ".", "format", "(", "split", ")", ")", "\n", "return", "\n", "", "infile", ".", "write", "(", "\"Number of examples: {}\\n\"", ".", "format", "(", "number_of_examples", ")", ")", "\n", "infile", ".", "write", "(", "\"Number of examples of this split in train: {}\\n\"", ".", "format", "(", "\n", "str", "(", "self", ".", "_k_shot_examples_in_train", "[", "split", "]", ")", ")", ")", "\n", "# Situation statistics.", "\n", "mean_distance_to_target", "=", "0", "\n", "for", "distance_to_target", ",", "count", "in", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"distance_to_target\"", "]", ".", "items", "(", ")", ":", "\n", "                ", "mean_distance_to_target", "+=", "count", "*", "distance_to_target", "\n", "", "mean_distance_to_target", "/=", "sum", "(", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"distance_to_target\"", "]", ".", "values", "(", ")", ")", "\n", "infile", ".", "write", "(", "\"Mean walking distance to target: {}\\n\"", ".", "format", "(", "mean_distance_to_target", ")", ")", "\n", "infile", ".", "write", "(", "\"Agent positions:\\n\"", ")", "\n", "self", ".", "save_position_counts", "(", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"agent_position\"", "]", ",", "infile", ")", "\n", "infile", ".", "write", "(", "\"Target positions:\\n\"", ")", "\n", "self", ".", "save_position_counts", "(", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"target_position\"", "]", ",", "infile", ")", "\n", "\n", "infile", ".", "write", "(", "\"Verbs:\\n\"", ")", "\n", "verb_target_combinations", "=", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"verb_target_combinations\"", "]", "\n", "infile", ".", "write", "(", "\"Verb target combinations:\\n\"", ")", "\n", "for", "key", ",", "values", "in", "verb_target_combinations", ".", "items", "(", ")", ":", "\n", "                ", "save_counter", "(", "\" \"", "+", "key", ",", "values", ",", "infile", ")", "\n", "", "infile", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "infile", ".", "write", "(", "\"Adverbs:\\n\"", ")", "\n", "manners_in_command", "=", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"manners_in_command\"", "]", "\n", "infile", ".", "write", "(", "\"Adverb occurrences:\\n\"", ")", "\n", "save_counter", "(", "\"Adverbs\"", ",", "manners_in_command", ",", "infile", ")", "\n", "infile", ".", "write", "(", "\"\\n\"", ")", "\n", "verb_adverb_combinations", "=", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"verb_adverb_combinations\"", "]", "\n", "infile", ".", "write", "(", "\"Verb adverb combinations:\\n\"", ")", "\n", "for", "key", ",", "values", "in", "verb_adverb_combinations", ".", "items", "(", ")", ":", "\n", "                ", "save_counter", "(", "\" \"", "+", "key", ",", "values", ",", "infile", ")", "\n", "", "infile", ".", "write", "(", "\"\\n\"", ")", "\n", "referred_targets", "=", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"referred_targets\"", "]", "\n", "infile", ".", "write", "(", "\"\\nReferred Targets: \\n\"", ")", "\n", "for", "key", ",", "values", "in", "referred_targets", ".", "items", "(", ")", ":", "\n", "                ", "save_counter", "(", "\"  \"", "+", "key", ",", "values", ",", "infile", ")", "\n", "", "placed_targets", "=", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"placed_targets\"", "]", "\n", "infile", ".", "write", "(", "\"\\n\"", ")", "\n", "save_counter", "(", "\"placed_targets\"", ",", "placed_targets", ",", "infile", ")", "\n", "situation_stats", "=", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"situations\"", "]", "\n", "infile", ".", "write", "(", "\"\\nObjects placed in the world for particular referenced objects: \\n\"", ")", "\n", "for", "key", ",", "values", "in", "situation_stats", ".", "items", "(", ")", ":", "\n", "                ", "save_counter", "(", "\"  \"", "+", "key", ",", "values", "[", "\"num_objects_placed\"", "]", ",", "infile", ")", "\n", "save_counter", "(", "\"  \"", "+", "key", ",", "values", "[", "\"objects_in_world\"", "]", ",", "infile", ")", "\n", "\n", "", "", "for", "key", ",", "values", "in", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"situations\"", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "len", "(", "values", "[", "\"objects_in_world\"", "]", ")", ":", "\n", "                ", "bar_plot", "(", "values", "[", "\"objects_in_world\"", "]", ",", "key", ",", "os", ".", "path", ".", "join", "(", "self", ".", "save_directory", ",", "split", "+", "\"_\"", "+", "key", "+", "\".png\"", ")", ")", "\n", "\n", "", "", "for", "key", "in", "self", ".", "get_empty_situation", "(", ")", ".", "keys", "(", ")", ":", "\n", "            ", "occurrence_counter", "=", "self", ".", "_data_statistics", "[", "split", "]", "[", "key", "]", "\n", "if", "key", "!=", "\"agent_position\"", "and", "key", "!=", "\"target_position\"", "and", "key", "!=", "\"distance_to_target\"", ":", "\n", "                ", "bar_plot", "(", "occurrence_counter", ",", "key", ",", "os", ".", "path", ".", "join", "(", "self", ".", "save_directory", ",", "split", "+", "\"_\"", "+", "key", "+", "\".png\"", ")", ")", "\n", "\n", "# Command statistics.", "\n", "", "", "verbs_in_command", "=", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"verbs_in_command\"", "]", "\n", "bar_plot", "(", "verbs_in_command", ",", "\"verbs_in_command\"", ",", "os", ".", "path", ".", "join", "(", "self", ".", "save_directory", ",", "\n", "split", "+", "\"_\"", "+", "\"verbs_in_command.png\"", ")", ")", "\n", "manners_in_command", "=", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"manners_in_command\"", "]", "\n", "bar_plot", "(", "manners_in_command", ",", "\"manners_in_command\"", ",", "os", ".", "path", ".", "join", "(", "self", ".", "save_directory", ",", "\n", "split", "+", "\"_\"", "+", "\"manners_in_command.png\"", ")", ")", "\n", "bar_plot", "(", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"target_length\"", "]", ",", "\"target_lengths\"", ",", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "save_directory", ",", "split", "+", "\"_\"", "+", "\"target_lengths.png\"", ")", ")", "\n", "bar_plot", "(", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"input_length\"", "]", ",", "\"input_lengths\"", ",", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "save_directory", ",", "split", "+", "\"_\"", "+", "\"input_lengths.png\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.save_dataset": [[457, 485], ["os.path.join", "len", "open", "dataset_representation.update", "json.dump", "dataset.GroundedScan._grammar.__str__", "dataset.GroundedScan._vocabulary.to_representation", "dataset.GroundedScan._data_pairs.items"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv.__str__", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.to_representation"], ["", "def", "save_dataset", "(", "self", ",", "file_name", ":", "str", ")", "->", "str", ":", "\n", "        ", "\"\"\"\n        Saves the current generated data to a file in a particular format that is readable by load_examples_from_file.\n        :param file_name: file name to save the dataset in. Will get saved in self.save_directory\n        :return: path to saved file.\n        \"\"\"", "\n", "assert", "len", "(", "self", ".", "_data_pairs", ")", ">", "0", ",", "\"No data to save, call .get_data_pairs()\"", "\n", "output_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_directory", ",", "file_name", ")", "\n", "with", "open", "(", "output_path", ",", "'w'", ")", "as", "outfile", ":", "\n", "            ", "dataset_representation", "=", "{", "\n", "\"grid_size\"", ":", "self", ".", "_world", ".", "grid_size", ",", "\n", "\"type_grammar\"", ":", "self", ".", "_type_grammar", ",", "\n", "\"grammar\"", ":", "self", ".", "_grammar", ".", "__str__", "(", ")", ",", "\n", "\"min_object_size\"", ":", "self", ".", "_object_vocabulary", ".", "smallest_size", ",", "\n", "\"max_object_size\"", ":", "self", ".", "_object_vocabulary", ".", "largest_size", ",", "\n", "\"max_recursion\"", ":", "self", ".", "max_recursion", ",", "\n", "\"percentage_train\"", ":", "self", ".", "_percentage_train", ",", "\n", "\"examples\"", ":", "{", "key", ":", "values", "for", "key", ",", "values", "in", "self", ".", "_data_pairs", ".", "items", "(", ")", "}", "\n", "}", "\n", "dataset_representation", ".", "update", "(", "self", ".", "_vocabulary", ".", "to_representation", "(", ")", ")", "\n", "if", "self", ".", "_type_grammar", "==", "\"simple_intrans\"", ":", "\n", "                ", "dataset_representation", "[", "\"transitive_verbs\"", "]", "=", "{", "}", "\n", "", "if", "self", ".", "_type_grammar", "==", "\"simple_trans\"", ":", "\n", "                ", "dataset_representation", "[", "\"intransitive_verbs\"", "]", "=", "{", "}", "\n", "", "if", "not", "(", "self", ".", "_type_grammar", "==", "\"adverb\"", "or", "self", ".", "_type_grammar", "==", "\"conjunction\"", ")", ":", "\n", "                ", "dataset_representation", "[", "\"adverbs\"", "]", "=", "{", "}", "\n", "", "json", ".", "dump", "(", "dataset_representation", ",", "outfile", ",", "indent", "=", "4", ")", "\n", "", "return", "output_path", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.load_dataset_from_file": [[486, 515], ["open", "json.load", "json.load.get", "cls", "all_data[].items", "enumerate", "len", "random.sample", "range", "cls._data_pairs[].append", "cls.update_data_statistics", "cls._data_pairs[].append", "cls.update_data_statistics", "cls._data_pairs[].append", "cls.update_data_statistics"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.load", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Grammar.sample", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.update_data_statistics", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.update_data_statistics", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.update_data_statistics"], ["", "@", "classmethod", "\n", "def", "load_dataset_from_file", "(", "cls", ",", "file_path", ":", "str", ",", "save_directory", ":", "str", ",", "k", "=", "0", ")", ":", "\n", "        ", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "infile", ":", "\n", "            ", "all_data", "=", "json", ".", "load", "(", "infile", ")", "\n", "percentage_train", "=", "all_data", ".", "get", "(", "\"percentage_train\"", ")", "\n", "if", "not", "percentage_train", ":", "\n", "                ", "percentage_train", "=", "0.8", "\n", "", "dataset", "=", "cls", "(", "all_data", "[", "\"intransitive_verbs\"", "]", ",", "all_data", "[", "\"transitive_verbs\"", "]", ",", "all_data", "[", "\"adverbs\"", "]", ",", "\n", "all_data", "[", "\"nouns\"", "]", ",", "all_data", "[", "\"color_adjectives\"", "]", ",", "all_data", "[", "\"size_adjectives\"", "]", ",", "\n", "all_data", "[", "\"grid_size\"", "]", ",", "all_data", "[", "\"min_object_size\"", "]", ",", "all_data", "[", "\"max_object_size\"", "]", ",", "\n", "type_grammar", "=", "all_data", "[", "\"type_grammar\"", "]", ",", "save_directory", "=", "save_directory", ",", "\n", "percentage_train", "=", "percentage_train", ",", "\n", "max_recursion", "=", "all_data", "[", "\"max_recursion\"", "]", ",", "sample_vocabulary", "=", "'load'", ")", "\n", "for", "split", ",", "examples", "in", "all_data", "[", "\"examples\"", "]", ".", "items", "(", ")", ":", "\n", "                ", "if", "split", "==", "\"adverb_1\"", ":", "\n", "                    ", "num_examples", "=", "len", "(", "examples", ")", "\n", "k_random_indices", "=", "random", ".", "sample", "(", "range", "(", "0", ",", "num_examples", ")", ",", "k", "=", "k", ")", "\n", "", "else", ":", "\n", "                    ", "k_random_indices", "=", "[", "]", "\n", "", "for", "i", ",", "example", "in", "enumerate", "(", "examples", ")", ":", "\n", "                    ", "if", "i", "in", "k_random_indices", ":", "\n", "                        ", "dataset", ".", "_data_pairs", "[", "\"train\"", "]", ".", "append", "(", "example", ")", "\n", "dataset", ".", "update_data_statistics", "(", "example", ",", "\"train\"", ")", "\n", "dataset", ".", "_data_pairs", "[", "\"dev\"", "]", ".", "append", "(", "example", ")", "\n", "dataset", ".", "update_data_statistics", "(", "example", ",", "\"dev\"", ")", "\n", "", "else", ":", "\n", "                        ", "dataset", ".", "_data_pairs", "[", "split", "]", ".", "append", "(", "example", ")", "\n", "dataset", ".", "update_data_statistics", "(", "example", ",", "split", ")", "\n", "", "", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.generate_all_commands": [[516, 518], ["dataset.GroundedScan._grammar.generate_all_commands"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.generate_all_commands"], ["", "", "def", "generate_all_commands", "(", "self", ")", "->", "{", "}", ":", "\n", "        ", "self", ".", "_grammar", ".", "generate_all_commands", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.sample_command": [[519, 529], ["dataset.GroundedScan._grammar.sample", "dataset.GroundedScan.meaning", "dataset.GroundedScan._grammar.is_coherent"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Grammar.sample", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.meaning", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Grammar.is_coherent"], ["", "def", "sample_command", "(", "self", ")", "->", "Tuple", "[", "Derivation", ",", "list", "]", ":", "\n", "        ", "coherent", "=", "False", "\n", "while", "not", "coherent", ":", "\n", "            ", "command", "=", "self", ".", "_grammar", ".", "sample", "(", ")", "\n", "arguments", "=", "[", "]", "\n", "meaning", "=", "command", ".", "meaning", "(", "arguments", ")", "\n", "if", "not", "self", ".", "_grammar", ".", "is_coherent", "(", "meaning", ")", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "return", "command", ",", "arguments", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.demonstrate_target_commands": [[530, 549], ["dataset.GroundedScan._world.get_current_situation", "dataset.GroundedScan.initialize_world", "dataset.GroundedScan._world.get_current_observations", "dataset.GroundedScan._world.clear_situation", "dataset.GroundedScan.initialize_world", "dataset.GroundedScan._world.execute_command"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.get_current_situation", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.initialize_world", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.get_current_observations", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.clear_situation", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.initialize_world", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.execute_command"], ["", "", "", "def", "demonstrate_target_commands", "(", "self", ",", "command", ":", "str", ",", "initial_situation", ":", "Situation", ",", "\n", "target_commands", ":", "List", "[", "str", "]", ")", "->", "Tuple", "[", "List", "[", "str", "]", ",", "List", "[", "Situation", "]", ",", "int", ",", "int", "]", ":", "\n", "        ", "\"\"\"Executes a sequence of commands starting from initial_situation.\"\"\"", "\n", "current_situation", "=", "self", ".", "_world", ".", "get_current_situation", "(", ")", "\n", "current_mission", "=", "self", ".", "_world", ".", "mission", "\n", "\n", "# Initialize the world based on the initial situation and the command.", "\n", "self", ".", "initialize_world", "(", "initial_situation", ",", "mission", "=", "command", ")", "\n", "\n", "for", "target_command", "in", "target_commands", ":", "\n", "            ", "self", ".", "_world", ".", "execute_command", "(", "target_command", ")", "\n", "\n", "", "target_commands", ",", "target_demonstration", "=", "self", ".", "_world", ".", "get_current_observations", "(", ")", "\n", "end_column", ",", "end_row", "=", "self", ".", "_world", ".", "agent_pos", "\n", "self", ".", "_world", ".", "clear_situation", "(", ")", "\n", "\n", "# Re-initialize the world as before the command", "\n", "self", ".", "initialize_world", "(", "current_situation", ",", "mission", "=", "current_mission", ")", "\n", "return", "target_commands", ",", "target_demonstration", ",", "end_column", ",", "end_row", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.demonstrate_command": [[550, 637], ["derivation.meaning", "dataset.GroundedScan._world.get_current_situation", "dataset.GroundedScan.initialize_world", "GroundedScan.helpers.topo_sort", "dataset.GroundedScan._world.get_current_observations", "dataset.GroundedScan._world.clear_situation", "dataset.GroundedScan.initialize_world", "derivation.words", "derivation.meaning.select", "derivation.meaning.select.select", "manner.pop", "len", "len", "derivation.meaning.select.select", "logical_form.select.select.to_predicate", "random.sample().pop", "dataset.GroundedScan._world.go_to_position", "dataset.GroundedScan._vocabulary.translate_word", "dataset.GroundedScan._world.has_object", "len", "logger.info", "dataset.GroundedScan._vocabulary.translate_word", "dataset.GroundedScan._vocabulary.translate_word", "dataset.GroundedScan._world.move_object_to_wall", "dataset.GroundedScan._world.object_positions", "random.sample", "dataset.GroundedScan._vocabulary.translate_word", "len", "object_str.split"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.meaning", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.get_current_situation", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.initialize_world", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.helpers.topo_sort", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.get_current_observations", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.clear_situation", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.initialize_world", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.words", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.LogicalForm.select", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.LogicalForm.select", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.LogicalForm.select", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.LogicalForm.to_predicate", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.go_to_position", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.has_object", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.move_object_to_wall", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.object_positions", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Grammar.sample", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_word"], ["", "def", "demonstrate_command", "(", "self", ",", "derivation", ":", "Derivation", ",", "initial_situation", ":", "Situation", ")", "->", "Tuple", "[", "List", "[", "str", "]", ",", "\n", "List", "[", "Situation", "]", ",", "str", "]", ":", "\n", "        ", "\"\"\"\n        Demonstrate a command derivation and situation pair. Done by extracting the events from the logical form\n        of the command derivation, extracting the arguments of each event. The argument of the event gets located in the\n        situation of the world and the path to that target gets calculated. Based on whether the verb in the command is\n        transitive or not, the agent interacts with the object.\n        :param derivation:\n        :param initial_situation:\n        :returns\n        \"\"\"", "\n", "command", "=", "' '", ".", "join", "(", "derivation", ".", "words", "(", ")", ")", "\n", "arguments", "=", "[", "]", "\n", "logical_form", "=", "derivation", ".", "meaning", "(", "arguments", ")", "\n", "current_situation", "=", "self", ".", "_world", ".", "get_current_situation", "(", ")", "\n", "current_mission", "=", "self", ".", "_world", ".", "mission", "\n", "\n", "# Initialize the world based on the initial situation and the command.", "\n", "self", ".", "initialize_world", "(", "initial_situation", ",", "mission", "=", "command", ")", "\n", "\n", "# Extract all present events in the current command and order them by constraints.", "\n", "events", "=", "[", "variable", "for", "variable", "in", "logical_form", ".", "variables", "if", "variable", ".", "sem_type", "==", "EVENT", "]", "\n", "seq_constraints", "=", "[", "term", ".", "arguments", "for", "term", "in", "logical_form", ".", "terms", "if", "term", ".", "function", "==", "\"seq\"", "]", "\n", "ordered_events", "=", "topo_sort", "(", "events", ",", "seq_constraints", ")", "\n", "\n", "# Loop over the events to get the demonstrations.", "\n", "action", "=", "None", "\n", "for", "event", "in", "ordered_events", ":", "\n", "\n", "# Get the logical form of the current event", "\n", "            ", "sub_logical_form", "=", "logical_form", ".", "select", "(", "[", "event", "]", ",", "exclude", "=", "{", "\"seq\"", "}", ")", "\n", "event_lf", "=", "sub_logical_form", ".", "select", "(", "[", "event", "]", ",", "exclude", "=", "{", "\"patient\"", "}", ")", "\n", "args", "=", "[", "term", ".", "arguments", "[", "1", "]", "for", "term", "in", "sub_logical_form", ".", "terms", "if", "term", ".", "function", "==", "\"patient\"", "]", "\n", "\n", "# Find the action verb if it exists.", "\n", "is_transitive", "=", "False", "\n", "if", "event_lf", ".", "head", ".", "sem_type", "==", "EVENT", ":", "\n", "                ", "for", "term", "in", "event_lf", ".", "terms", ":", "\n", "                    ", "if", "term", ".", "specs", ".", "action", ":", "\n", "                        ", "action", "=", "term", ".", "specs", ".", "action", "\n", "is_transitive", "=", "term", ".", "specs", ".", "is_transitive", "\n", "\n", "# Find the manner adverb if it exists.", "\n", "", "", "", "manner", "=", "[", "term", ".", "specs", ".", "manner", "for", "term", "in", "event_lf", ".", "terms", "if", "term", ".", "specs", ".", "manner", "]", "\n", "manner", "=", "manner", ".", "pop", "(", ")", "if", "manner", "else", "None", "\n", "assert", "len", "(", "args", ")", "<=", "1", ",", "\"Only one target object supported, but two arguments parsed in a derivation.\"", "\n", "if", "len", "(", "args", ")", ">", "0", ":", "\n", "# Find the logical form of the argument of the verb and find its location.", "\n", "                ", "arg_logical_form", "=", "sub_logical_form", ".", "select", "(", "[", "args", "[", "0", "]", "]", ")", "\n", "object_str", ",", "object_predicate", "=", "arg_logical_form", ".", "to_predicate", "(", ")", "\n", "\n", "# If no location is passed, find the target object there.", "\n", "if", "not", "initial_situation", ".", "target_object", ":", "\n", "                    ", "translated_object_str", "=", "' '", ".", "join", "(", "[", "self", ".", "_vocabulary", ".", "translate_word", "(", "word", ")", "for", "word", "in", "object_str", ".", "split", "(", ")", "]", ")", "\n", "translated_object_size", "=", "self", ".", "_vocabulary", ".", "translate_word", "(", "object_predicate", "[", "\"size\"", "]", ")", "\n", "if", "self", ".", "_world", ".", "has_object", "(", "translated_object_str", ")", ":", "\n", "                        ", "object_locations", "=", "self", ".", "_world", ".", "object_positions", "(", "translated_object_str", ",", "\n", "object_size", "=", "translated_object_size", ")", "\n", "", "else", ":", "\n", "                        ", "object_locations", "=", "{", "}", "\n", "# Else we have saved the target location when we generated the situation.", "\n", "", "", "else", ":", "\n", "                    ", "object_locations", "=", "[", "initial_situation", ".", "target_object", ".", "position", "]", "\n", "\n", "", "if", "len", "(", "object_locations", ")", ">", "1", ":", "\n", "                    ", "logger", ".", "info", "(", "\"WARNING: {} possible target locations.\"", ".", "format", "(", "len", "(", "object_locations", ")", ")", ")", "\n", "", "if", "not", "object_locations", ":", "\n", "                    ", "continue", "\n", "", "goal", "=", "random", ".", "sample", "(", "object_locations", ",", "1", ")", ".", "pop", "(", ")", "\n", "if", "not", "is_transitive", ":", "\n", "                    ", "primitive_command", "=", "self", ".", "_vocabulary", ".", "translate_word", "(", "action", ")", "\n", "", "else", ":", "\n", "                    ", "primitive_command", "=", "\"walk\"", "\n", "\n", "", "self", ".", "_world", ".", "go_to_position", "(", "position", "=", "goal", ",", "manner", "=", "manner", ",", "primitive_command", "=", "primitive_command", ")", "\n", "\n", "# Interact with the object for transitive verbs.", "\n", "if", "is_transitive", ":", "\n", "                    ", "semantic_action", "=", "self", ".", "_vocabulary", ".", "translate_word", "(", "action", ")", "\n", "self", ".", "_world", ".", "move_object_to_wall", "(", "action", "=", "semantic_action", ",", "manner", "=", "manner", ")", "\n", "\n", "", "", "", "target_commands", ",", "target_demonstration", "=", "self", ".", "_world", ".", "get_current_observations", "(", ")", "\n", "self", ".", "_world", ".", "clear_situation", "(", ")", "\n", "\n", "# Re-initialize the world as before the command", "\n", "self", ".", "initialize_world", "(", "current_situation", ",", "mission", "=", "current_mission", ")", "\n", "return", "target_commands", ",", "target_demonstration", ",", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.initialize_world": [[638, 652], ["dataset.GroundedScan._world.initialize", "objects.append", "dataset.GroundedScan._world.set_mission"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.initialize", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.set_mission"], ["", "def", "initialize_world", "(", "self", ",", "situation", ":", "Situation", ",", "mission", "=", "\"\"", ")", "->", "{", "}", ":", "\n", "        ", "\"\"\"\n        Initializes the world with the passed situation.\n        :param situation: class describing the current situation in the world, fully determined by a grid size,\n        agent position, agent direction, list of placed objects, an optional target object and optional carrying object.\n        :param mission: a string defining a command (e.g. \"Walk to a green circle.\")\n        \"\"\"", "\n", "objects", "=", "[", "]", "\n", "for", "positioned_object", "in", "situation", ".", "placed_objects", ":", "\n", "            ", "objects", ".", "append", "(", "(", "positioned_object", ".", "object", ",", "positioned_object", ".", "position", ")", ")", "\n", "", "self", ".", "_world", ".", "initialize", "(", "objects", ",", "agent_position", "=", "situation", ".", "agent_pos", ",", "agent_direction", "=", "situation", ".", "agent_direction", ",", "\n", "target_object", "=", "situation", ".", "target_object", ",", "carrying", "=", "situation", ".", "carrying", ")", "\n", "if", "mission", ":", "\n", "            ", "self", ".", "_world", ".", "set_mission", "(", "mission", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.visualize_attention": [[653, 656], ["NotImplementedError"], "methods", ["None"], ["", "", "def", "visualize_attention", "(", "self", ",", "input_commands", ":", "List", "[", "str", "]", ",", "target_commands", ":", "List", "[", "str", "]", ",", "situation", ":", "Situation", ",", "\n", "attention_weights_commands", ":", "List", "[", "List", "[", "int", "]", "]", ",", "attention_weights_situation", ":", "List", "[", "List", "[", "int", "]", "]", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.error_analysis": [[657, 812], ["os.path.exists", "xlwt.Workbook", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "open", "json.load", "logger.info", "open", "outfile.write", "outfile.write", "outfile.write", "collections.Counter", "outfile.write", "outfile.write", "error_analysis.items", "xlwt.Workbook.save", "all_accuracies.append", "exact_matches.append", "numpy.array.append", "dataset.GroundedScan.parse_derivation_repr", "dataset.GroundedScan.meaning", "arguments.pop().to_predicate", "dataset.GroundedScan.words", "dataset.GroundedScan._vocabulary.translate_word", "len", "GroundedScan.world.Situation.from_representation", "error_analysis.keys", "xlwt.Workbook.add_sheet", "xlwt.Workbook.add_sheet.write", "xlwt.Workbook.add_sheet.write", "xlwt.Workbook.add_sheet.write", "xlwt.Workbook.add_sheet.write", "xlwt.Workbook.add_sheet.write", "xlwt.Workbook.add_sheet.write", "xlwt.Workbook.add_sheet.write", "xlwt.Workbook.add_sheet.write", "outfile.write", "enumerate", "outfile.write", "GroundedScan.helpers.bar_plot", "GroundedScan.helpers.bar_plot", "GroundedScan.helpers.bar_plot", "GroundedScan.helpers.grouped_bar_plot", "len", "len", "dataset.GroundedScan._vocabulary.translate_word", "dataset.GroundedScan._vocabulary.translate_word", "[].append", "[].append", "[].append", "numpy.mean", "numpy.mean", "values.items", "outfile.write", "numpy.array", "numpy.mean", "numpy.array", "numpy.mean", "len", "numpy.std", "numpy.std", "collections.Counter", "outfile.write", "outfile.write", "outfile.write", "outfile.write", "outfile.write", "outfile.write", "outfile.write", "outfile.write", "outfile.write", "outfile.write", "outfile.write", "xlwt.Workbook.add_sheet.write", "xlwt.Workbook.add_sheet.write", "xlwt.Workbook.add_sheet.write", "xlwt.Workbook.add_sheet.write", "xlwt.Workbook.add_sheet.write", "xlwt.Workbook.add_sheet.write", "xlwt.Workbook.add_sheet.write", "xlwt.Workbook.add_sheet.write", "output_file.split", "arguments.pop", "dataset.GroundedScan._vocabulary.get_adverbs", "dataset.GroundedScan._vocabulary.translate_word", "dataset.GroundedScan._vocabulary.translate_word", "dataset.GroundedScan._vocabulary.translate_word", "str", "numpy.array", "numpy.array", "len", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "len", "numpy.min", "numpy.max", "numpy.min", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.load", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.save", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.parse_derivation_repr", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.meaning", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.LogicalForm.to_predicate", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.words", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.from_representation", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.helpers.bar_plot", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.helpers.bar_plot", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.helpers.bar_plot", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.helpers.grouped_bar_plot", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.get_adverbs", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_word"], ["", "def", "error_analysis", "(", "self", ",", "predictions_file", ":", "str", ",", "output_file", ":", "str", ",", "save_directory", ":", "str", ")", ":", "\n", "        ", "assert", "os", ".", "path", ".", "exists", "(", "predictions_file", ")", ",", "\"Trying to open a non-existing predictions file.\"", "\n", "error_analysis", "=", "{", "\n", "\"target_length\"", ":", "defaultdict", "(", "lambda", ":", "{", "\"accuracy\"", ":", "[", "]", ",", "\"exact_match\"", ":", "[", "]", ",", "\"position_accuracy\"", ":", "[", "]", "}", ")", ",", "\n", "\"input_length\"", ":", "defaultdict", "(", "lambda", ":", "{", "\"accuracy\"", ":", "[", "]", ",", "\"exact_match\"", ":", "[", "]", ",", "\"position_accuracy\"", ":", "[", "]", "}", ")", ",", "\n", "\"verb_in_command\"", ":", "defaultdict", "(", "lambda", ":", "{", "\"accuracy\"", ":", "[", "]", ",", "\"exact_match\"", ":", "[", "]", ",", "\"position_accuracy\"", ":", "[", "]", "}", ")", ",", "\n", "\"manner\"", ":", "defaultdict", "(", "lambda", ":", "{", "\"accuracy\"", ":", "[", "]", ",", "\"exact_match\"", ":", "[", "]", ",", "\"position_accuracy\"", ":", "[", "]", "}", ")", ",", "\n", "\"referred_target\"", ":", "defaultdict", "(", "lambda", ":", "{", "\"accuracy\"", ":", "[", "]", ",", "\"exact_match\"", ":", "[", "]", ",", "\"position_accuracy\"", ":", "[", "]", "}", ")", ",", "\n", "\"referred_size\"", ":", "defaultdict", "(", "lambda", ":", "{", "\"accuracy\"", ":", "[", "]", ",", "\"exact_match\"", ":", "[", "]", ",", "\"position_accuracy\"", ":", "[", "]", "}", ")", ",", "\n", "\"distance_to_target\"", ":", "defaultdict", "(", "lambda", ":", "{", "\"accuracy\"", ":", "[", "]", ",", "\"exact_match\"", ":", "[", "]", ",", "\"position_accuracy\"", ":", "[", "]", "}", ")", ",", "\n", "\"direction_to_target\"", ":", "defaultdict", "(", "lambda", ":", "{", "\"accuracy\"", ":", "[", "]", ",", "\"exact_match\"", ":", "[", "]", ",", "\"position_accuracy\"", ":", "[", "]", "}", ")", ",", "\n", "\"actual_target\"", ":", "defaultdict", "(", "lambda", ":", "{", "\"accuracy\"", ":", "[", "]", ",", "\"exact_match\"", ":", "[", "]", ",", "\"position_accuracy\"", ":", "[", "]", "}", ")", ",", "\n", "}", "\n", "all_accuracies", "=", "[", "]", "\n", "exact_matches", "=", "[", "]", "\n", "position_accuracies", "=", "[", "]", "\n", "workbook", "=", "Workbook", "(", ")", "\n", "with", "open", "(", "predictions_file", ",", "'r'", ")", "as", "infile", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "infile", ")", "\n", "logger", ".", "info", "(", "\"Running error analysis on {} examples.\"", ".", "format", "(", "len", "(", "data", ")", ")", ")", "\n", "for", "predicted_example", "in", "data", ":", "\n", "\n", "# Get the scores of the current example.", "\n", "                ", "accuracy", "=", "predicted_example", "[", "\"accuracy\"", "]", "\n", "exact_match", "=", "predicted_example", "[", "\"exact_match\"", "]", "\n", "position_accuracy", "=", "predicted_example", "[", "\"position_accuracy\"", "]", "\n", "\n", "all_accuracies", ".", "append", "(", "accuracy", ")", "\n", "exact_matches", ".", "append", "(", "exact_match", ")", "\n", "position_accuracies", ".", "append", "(", "position_accuracy", ")", "\n", "# Get the information about the current example.", "\n", "example_information", "=", "{", "\n", "\"input_length\"", ":", "len", "(", "predicted_example", "[", "\"input\"", "]", ")", ",", "\n", "\"verb_in_command\"", ":", "self", ".", "_vocabulary", ".", "translate_word", "(", "predicted_example", "[", "\"input\"", "]", "[", "0", "]", ")", "}", "\n", "derivation", "=", "self", ".", "parse_derivation_repr", "(", "predicted_example", "[", "\"derivation\"", "]", "[", "0", "]", ")", "\n", "arguments", "=", "[", "]", "\n", "derivation", ".", "meaning", "(", "arguments", ")", "\n", "target_str", ",", "target_predicate", "=", "arguments", ".", "pop", "(", ")", ".", "to_predicate", "(", ")", "\n", "adverb", "=", "\"\"", "\n", "for", "word", "in", "derivation", ".", "words", "(", ")", ":", "\n", "                    ", "if", "word", "in", "self", ".", "_vocabulary", ".", "get_adverbs", "(", ")", ":", "\n", "                        ", "adverb", "=", "word", "\n", "", "", "manner", "=", "self", ".", "_vocabulary", ".", "translate_word", "(", "adverb", ")", "\n", "example_information", "[", "\"referred_target\"", "]", "=", "' '", ".", "join", "(", "[", "\n", "self", ".", "_vocabulary", ".", "translate_word", "(", "target_predicate", "[", "\"size\"", "]", ")", ",", "\n", "self", ".", "_vocabulary", ".", "translate_word", "(", "target_predicate", "[", "\"color\"", "]", ")", ",", "\n", "self", ".", "_vocabulary", ".", "translate_word", "(", "target_predicate", "[", "\"noun\"", "]", ")", "]", ")", "\n", "if", "target_predicate", "[", "\"size\"", "]", ":", "\n", "                    ", "example_information", "[", "\"referred_size\"", "]", "=", "self", ".", "_vocabulary", ".", "translate_word", "(", "target_predicate", "[", "\"size\"", "]", ")", "\n", "", "else", ":", "\n", "                    ", "example_information", "[", "\"referred_size\"", "]", "=", "\"None\"", "\n", "", "example_information", "[", "\"target_length\"", "]", "=", "len", "(", "predicted_example", "[", "\"target\"", "]", ")", "\n", "situation_repr", "=", "predicted_example", "[", "\"situation\"", "]", "\n", "situation", "=", "Situation", ".", "from_representation", "(", "situation_repr", "[", "0", "]", ")", "\n", "example_information", "[", "\"actual_target\"", "]", "=", "' '", ".", "join", "(", "[", "str", "(", "situation", ".", "target_object", ".", "object", ".", "size", ")", ",", "\n", "situation", ".", "target_object", ".", "object", ".", "color", ",", "\n", "situation", ".", "target_object", ".", "object", ".", "shape", "]", ")", "\n", "example_information", "[", "\"direction_to_target\"", "]", "=", "situation", ".", "direction_to_target", "\n", "example_information", "[", "\"distance_to_target\"", "]", "=", "situation", ".", "distance_to_target", "\n", "example_information", "[", "\"manner\"", "]", "=", "manner", "\n", "# Add that information to the analysis.", "\n", "for", "key", "in", "error_analysis", ".", "keys", "(", ")", ":", "\n", "                    ", "error_analysis", "[", "key", "]", "[", "example_information", "[", "key", "]", "]", "[", "\"accuracy\"", "]", ".", "append", "(", "accuracy", ")", "\n", "error_analysis", "[", "key", "]", "[", "example_information", "[", "key", "]", "]", "[", "\"exact_match\"", "]", ".", "append", "(", "exact_match", ")", "\n", "error_analysis", "[", "key", "]", "[", "example_information", "[", "key", "]", "]", "[", "\"position_accuracy\"", "]", ".", "append", "(", "position_accuracy", ")", "\n", "\n", "# Write the information to a file and make plots", "\n", "", "", "", "with", "open", "(", "output_file", ",", "'w'", ")", "as", "outfile", ":", "\n", "            ", "outfile", ".", "write", "(", "\"Error Analysis\\n\\n\"", ")", "\n", "outfile", ".", "write", "(", "\" Mean accuracy: {}\\n\"", ".", "format", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "all_accuracies", ")", ")", ")", ")", "\n", "outfile", ".", "write", "(", "\" Mean position accuracy: {}\\n\"", ".", "format", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "position_accuracies", ")", ")", ")", ")", "\n", "exact_matches_counter", "=", "Counter", "(", "exact_matches", ")", "\n", "outfile", ".", "write", "(", "\" Num. exact matches: {}\\n\"", ".", "format", "(", "exact_matches_counter", "[", "True", "]", ")", ")", "\n", "outfile", ".", "write", "(", "\" Num not exact matches: {}\\n\\n\"", ".", "format", "(", "exact_matches_counter", "[", "False", "]", ")", ")", "\n", "\n", "for", "key", ",", "values", "in", "error_analysis", ".", "items", "(", ")", ":", "\n", "                ", "sheet", "=", "workbook", ".", "add_sheet", "(", "key", ")", "\n", "sheet", ".", "write", "(", "0", ",", "0", ",", "key", ")", "\n", "sheet", ".", "write", "(", "0", ",", "1", ",", "\"Num examples\"", ")", "\n", "sheet", ".", "write", "(", "0", ",", "2", ",", "\"Mean accuracy\"", ")", "\n", "sheet", ".", "write", "(", "0", ",", "3", ",", "\"Std. accuracy\"", ")", "\n", "\n", "sheet", ".", "write", "(", "0", ",", "5", ",", "\"Mean position accuracy\"", ")", "\n", "\n", "sheet", ".", "write", "(", "0", ",", "6", ",", "\"Exact Match\"", ")", "\n", "sheet", ".", "write", "(", "0", ",", "7", ",", "\"Not Exact Match\"", ")", "\n", "sheet", ".", "write", "(", "0", ",", "8", ",", "\"Exact Match Percentage\"", ")", "\n", "outfile", ".", "write", "(", "\"\\nDimension {}\\n\\n\"", ".", "format", "(", "key", ")", ")", "\n", "means", "=", "{", "}", "\n", "position_means", "=", "{", "}", "\n", "standard_deviations", "=", "{", "}", "\n", "position_standard_deviations", "=", "{", "}", "\n", "num_examples", "=", "{", "}", "\n", "exact_match_distributions", "=", "{", "}", "\n", "exact_match_relative_distributions", "=", "{", "}", "\n", "\n", "for", "i", ",", "(", "item_key", ",", "item_values", ")", "in", "enumerate", "(", "values", ".", "items", "(", ")", ")", ":", "\n", "                    ", "outfile", ".", "write", "(", "\"  {}:{}\\n\\n\"", ".", "format", "(", "key", ",", "item_key", ")", ")", "\n", "accuracies", "=", "np", ".", "array", "(", "item_values", "[", "\"accuracy\"", "]", ")", "\n", "mean_accuracy", "=", "np", ".", "mean", "(", "accuracies", ")", "\n", "means", "[", "item_key", "]", "=", "mean_accuracy", "\n", "\n", "position_accuracies", "=", "np", ".", "array", "(", "item_values", "[", "\"position_accuracy\"", "]", ")", "\n", "mean_position_accuracy", "=", "np", ".", "mean", "(", "position_accuracies", ")", "\n", "position_means", "[", "item_key", "]", "=", "mean_position_accuracy", "\n", "\n", "num_examples", "[", "item_key", "]", "=", "len", "(", "item_values", "[", "\"accuracy\"", "]", ")", "\n", "standard_deviation", "=", "np", ".", "std", "(", "accuracies", ")", "\n", "standard_deviations", "[", "item_key", "]", "=", "standard_deviation", "\n", "\n", "position_standard_deviation", "=", "np", ".", "std", "(", "position_accuracies", ")", "\n", "position_standard_deviations", "[", "item_key", "]", "=", "position_standard_deviation", "\n", "exact_match_distribution", "=", "Counter", "(", "item_values", "[", "\"exact_match\"", "]", ")", "\n", "exact_match_distributions", "[", "item_key", "]", "=", "exact_match_distribution", "\n", "exact_match_relative_distributions", "[", "item_key", "]", "=", "exact_match_distribution", "[", "True", "]", "/", "(", "\n", "exact_match_distribution", "[", "False", "]", "+", "exact_match_distribution", "[", "True", "]", ")", "\n", "outfile", ".", "write", "(", "\"    Num. examples: {}\\n\"", ".", "format", "(", "len", "(", "item_values", "[", "\"accuracy\"", "]", ")", ")", ")", "\n", "outfile", ".", "write", "(", "\"    Mean accuracy: {}\\n\"", ".", "format", "(", "mean_accuracy", ")", ")", "\n", "outfile", ".", "write", "(", "\"    Min. accuracy: {}\\n\"", ".", "format", "(", "np", ".", "min", "(", "accuracies", ")", ")", ")", "\n", "outfile", ".", "write", "(", "\"    Max. accuracy: {}\\n\"", ".", "format", "(", "np", ".", "max", "(", "accuracies", ")", ")", ")", "\n", "outfile", ".", "write", "(", "\"    Std. accuracy: {}\\n\"", ".", "format", "(", "standard_deviation", ")", ")", "\n", "\n", "outfile", ".", "write", "(", "\"    Mean position accuracy: {}\\n\"", ".", "format", "(", "mean_position_accuracy", ")", ")", "\n", "outfile", ".", "write", "(", "\"    Min. accuracy: {}\\n\"", ".", "format", "(", "np", ".", "min", "(", "position_accuracies", ")", ")", ")", "\n", "outfile", ".", "write", "(", "\"    Max. accuracy: {}\\n\"", ".", "format", "(", "np", ".", "max", "(", "position_accuracies", ")", ")", ")", "\n", "outfile", ".", "write", "(", "\"    Std. accuracy: {}\\n\"", ".", "format", "(", "position_standard_deviation", ")", ")", "\n", "\n", "outfile", ".", "write", "(", "\"    Num. exact match: {}\\n\"", ".", "format", "(", "exact_match_distribution", "[", "True", "]", ")", ")", "\n", "outfile", ".", "write", "(", "\"    Num. not exact match: {}\\n\\n\"", ".", "format", "(", "exact_match_distribution", "[", "False", "]", ")", ")", "\n", "sheet", ".", "write", "(", "i", "+", "1", ",", "0", ",", "item_key", ")", "\n", "sheet", ".", "write", "(", "i", "+", "1", ",", "1", ",", "len", "(", "item_values", "[", "\"accuracy\"", "]", ")", ")", "\n", "sheet", ".", "write", "(", "i", "+", "1", ",", "2", ",", "mean_accuracy", ")", "\n", "sheet", ".", "write", "(", "i", "+", "1", ",", "3", ",", "standard_deviation", ")", "\n", "sheet", ".", "write", "(", "i", "+", "1", ",", "4", ",", "exact_match_distribution", "[", "True", "]", ")", "\n", "\n", "sheet", ".", "write", "(", "i", "+", "1", ",", "5", ",", "mean_position_accuracy", ")", "\n", "\n", "sheet", ".", "write", "(", "i", "+", "1", ",", "6", ",", "exact_match_distribution", "[", "False", "]", ")", "\n", "sheet", ".", "write", "(", "i", "+", "1", ",", "7", ",", "exact_match_distribution", "[", "True", "]", "/", "(", "\n", "exact_match_distribution", "[", "False", "]", "+", "exact_match_distribution", "[", "True", "]", ")", ")", "\n", "", "outfile", ".", "write", "(", "\"\\n\\n\\n\"", ")", "\n", "bar_plot", "(", "means", ",", "title", "=", "key", ",", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "key", "+", "'_accuracy'", ")", ",", "\n", "errors", "=", "standard_deviations", ",", "y_axis_label", "=", "\"accuracy\"", ")", "\n", "bar_plot", "(", "position_means", ",", "title", "=", "key", ",", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "key", "+", "'_position_accuracy'", ")", ",", "\n", "errors", "=", "position_standard_deviations", ",", "y_axis_label", "=", "\"position_accuracy\"", ")", "\n", "\n", "bar_plot", "(", "exact_match_relative_distributions", ",", "title", "=", "key", ",", "save_path", "=", "os", ".", "path", ".", "join", "(", "\n", "save_directory", ",", "key", "+", "'_exact_match_rel'", ")", ",", "\n", "errors", "=", "{", "}", ",", "y_axis_label", "=", "\"Exact Match Percentage\"", ")", "\n", "grouped_bar_plot", "(", "values", "=", "exact_match_distributions", ",", "group_one_key", "=", "True", ",", "group_two_key", "=", "False", ",", "\n", "title", "=", "key", "+", "' Exact Matches'", ",", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "\n", "key", "+", "'_exact_match'", ")", ",", "\n", "sort_on_key", "=", "True", ")", "\n", "", "outfile_excel", "=", "output_file", ".", "split", "(", "\".txt\"", ")", "[", "0", "]", "+", "\".xls\"", "\n", "workbook", ".", "save", "(", "outfile_excel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.position_analysis": [[813, 875], ["os.path.exists", "open", "json.load", "workbook.add_sheet", "workbook.add_sheet.write", "workbook.add_sheet.write", "workbook.add_sheet.write", "workbook.add_sheet.write", "workbook.add_sheet.write", "workbook.add_sheet.write", "workbook.add_sheet.write", "workbook.add_sheet.write", "workbook.add_sheet.write", "workbook.add_sheet.write", "workbook.add_sheet.write", "workbook.add_sheet.write", "enumerate", "workbook.add_sheet.write", "workbook.add_sheet.write", "workbook.add_sheet.write", "workbook.add_sheet.write", "GroundedScan.world.Situation.from_representation", "dataset.GroundedScan.demonstrate_target_commands", "dataset.GroundedScan.demonstrate_target_commands", "[].split", "dataset.GroundedScan._vocabulary.translate_word", "workbook.add_sheet.write", "workbook.add_sheet.write", "workbook.add_sheet.write", "workbook.add_sheet.write", "workbook.add_sheet.write", "workbook.add_sheet.write", "workbook.add_sheet.write", "workbook.add_sheet.write", "int", "int", "int", "int", "int", "int", "int", "int", "[].split", "predictions_file.split"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.load", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.from_representation", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.demonstrate_target_commands", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.demonstrate_target_commands", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_word"], ["", "", "def", "position_analysis", "(", "self", ",", "predictions_file", ":", "str", ",", "workbook", "=", "None", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "\"\"\"For each prediction in a file visualizes it in a gif and writes to self.save_directory.\"\"\"", "\n", "assert", "os", ".", "path", ".", "exists", "(", "predictions_file", ")", ",", "\"Trying to open a non-existing predictions file.\"", "\n", "with", "open", "(", "predictions_file", ",", "'r'", ")", "as", "infile", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "infile", ")", "\n", "save_dirs", "=", "[", "]", "\n", "sheet", "=", "workbook", ".", "add_sheet", "(", "predictions_file", ".", "split", "(", "\"/\"", ")", "[", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", ")", "\n", "sheet", ".", "write", "(", "0", ",", "0", ",", "\"Col Matches\"", ")", "\n", "sheet", ".", "write", "(", "0", ",", "1", ",", "\"Row Matches\"", ")", "\n", "sheet", ".", "write", "(", "0", ",", "2", ",", "\"Full Match\"", ")", "\n", "sheet", ".", "write", "(", "0", ",", "3", ",", "\"No Match\"", ")", "\n", "sheet", ".", "write", "(", "2", ",", "0", ",", "\"pred col\"", ")", "\n", "sheet", ".", "write", "(", "2", ",", "1", ",", "\"actual col\"", ")", "\n", "sheet", ".", "write", "(", "2", ",", "2", ",", "\"match\"", ")", "\n", "sheet", ".", "write", "(", "2", ",", "3", ",", "\"pred row\"", ")", "\n", "sheet", ".", "write", "(", "2", ",", "4", ",", "\"actual row\"", ")", "\n", "sheet", ".", "write", "(", "2", ",", "5", ",", "\"match\"", ")", "\n", "sheet", ".", "write", "(", "2", ",", "6", ",", "\"full match\"", ")", "\n", "sheet", ".", "write", "(", "2", ",", "7", ",", "\"no match\"", ")", "\n", "col_matches", "=", "0", "\n", "row_matches", "=", "0", "\n", "full_matches", "=", "0", "\n", "no_matches", "=", "0", "\n", "for", "i", ",", "predicted_example", "in", "enumerate", "(", "data", ")", ":", "\n", "                ", "command", "=", "predicted_example", "[", "\"input\"", "]", "\n", "prediction", "=", "predicted_example", "[", "\"prediction\"", "]", "\n", "target", "=", "predicted_example", "[", "\"target\"", "]", "\n", "meaning", "=", "[", "self", ".", "_vocabulary", ".", "translate_word", "(", "word", ")", "for", "word", "in", "command", "]", "\n", "situation_repr", "=", "predicted_example", "[", "\"situation\"", "]", "\n", "situation", "=", "Situation", ".", "from_representation", "(", "situation_repr", "[", "0", "]", ")", "\n", "(", "predicted_commands", ",", "predicted_demonstration", ",", "\n", "predicted_end_column", ",", "predicted_end_row", ")", "=", "self", ".", "demonstrate_target_commands", "(", "\n", "command", ",", "situation", ",", "target_commands", "=", "prediction", ")", "\n", "(", "target_commands", ",", "target_demonstration", ",", "\n", "actual_end_column", ",", "actual_end_row", ")", "=", "self", ".", "demonstrate_target_commands", "(", "\n", "command", ",", "situation", ",", "target_commands", "=", "target", ")", "\n", "col_match", "=", "predicted_end_column", "==", "actual_end_column", "\n", "row_match", "=", "predicted_end_row", "==", "actual_end_row", "\n", "full_match", "=", "col_match", "and", "row_match", "\n", "no_match", "=", "not", "col_match", "and", "not", "row_match", "\n", "if", "i", "<", "2000", ":", "\n", "                    ", "sheet", ".", "write", "(", "i", "+", "3", ",", "0", ",", "int", "(", "predicted_end_column", ")", ")", "\n", "sheet", ".", "write", "(", "i", "+", "3", ",", "1", ",", "int", "(", "actual_end_column", ")", ")", "\n", "sheet", ".", "write", "(", "i", "+", "3", ",", "2", ",", "int", "(", "col_match", ")", ")", "\n", "sheet", ".", "write", "(", "i", "+", "3", ",", "3", ",", "int", "(", "predicted_end_row", ")", ")", "\n", "sheet", ".", "write", "(", "i", "+", "3", ",", "4", ",", "int", "(", "actual_end_row", ")", ")", "\n", "sheet", ".", "write", "(", "i", "+", "3", ",", "5", ",", "int", "(", "row_match", ")", ")", "\n", "sheet", ".", "write", "(", "i", "+", "3", ",", "6", ",", "int", "(", "full_match", ")", ")", "\n", "sheet", ".", "write", "(", "i", "+", "3", ",", "7", ",", "int", "(", "no_match", ")", ")", "\n", "", "if", "col_match", ":", "\n", "                    ", "col_matches", "+=", "1", "\n", "", "if", "row_match", ":", "\n", "                    ", "row_matches", "+=", "1", "\n", "", "if", "full_match", ":", "\n", "                    ", "full_matches", "+=", "1", "\n", "", "if", "no_match", ":", "\n", "                    ", "no_matches", "+=", "1", "\n", "", "", "sheet", ".", "write", "(", "1", ",", "0", ",", "col_matches", ")", "\n", "sheet", ".", "write", "(", "1", ",", "1", ",", "row_matches", ")", "\n", "sheet", ".", "write", "(", "1", ",", "2", ",", "full_matches", ")", "\n", "sheet", ".", "write", "(", "1", ",", "3", ",", "no_matches", ")", "\n", "", "return", "save_dirs", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.visualize_prediction": [[876, 910], ["os.path.exists", "open", "json.load", "enumerate", "GroundedScan.world.Situation.from_representation", "dataset.GroundedScan.demonstrate_target_commands", "dataset.GroundedScan.demonstrate_target_commands", "dataset.GroundedScan.visualize_command", "save_dirs.append", "dataset.GroundedScan._vocabulary.translate_word"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.load", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.from_representation", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.demonstrate_target_commands", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.demonstrate_target_commands", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.visualize_command", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_word"], ["", "def", "visualize_prediction", "(", "self", ",", "predictions_file", ":", "str", ",", "only_save_errors", "=", "False", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "\"\"\"For each prediction in a file visualizes it in a gif and writes to self.save_directory.\"\"\"", "\n", "assert", "os", ".", "path", ".", "exists", "(", "predictions_file", ")", ",", "\"Trying to open a non-existing predictions file.\"", "\n", "with", "open", "(", "predictions_file", ",", "'r'", ")", "as", "infile", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "infile", ")", "\n", "save_dirs", "=", "[", "]", "\n", "for", "i", ",", "predicted_example", "in", "enumerate", "(", "data", ")", ":", "\n", "                ", "command", "=", "predicted_example", "[", "\"input\"", "]", "\n", "prediction", "=", "predicted_example", "[", "\"prediction\"", "]", "\n", "target", "=", "predicted_example", "[", "\"target\"", "]", "\n", "meaning", "=", "[", "self", ".", "_vocabulary", ".", "translate_word", "(", "word", ")", "for", "word", "in", "command", "]", "\n", "situation_repr", "=", "predicted_example", "[", "\"situation\"", "]", "\n", "situation", "=", "Situation", ".", "from_representation", "(", "situation_repr", "[", "0", "]", ")", "\n", "(", "predicted_commands", ",", "predicted_demonstration", ",", "\n", "predicted_end_column", ",", "predicted_end_row", ")", "=", "self", ".", "demonstrate_target_commands", "(", "\n", "command", ",", "situation", ",", "target_commands", "=", "prediction", ")", "\n", "(", "target_commands", ",", "target_demonstration", ",", "\n", "actual_end_column", ",", "actual_end_row", ")", "=", "self", ".", "demonstrate_target_commands", "(", "\n", "command", ",", "situation", ",", "target_commands", "=", "target", ")", "\n", "str_command", "=", "' '", ".", "join", "(", "command", ")", "\n", "mission", "=", "' '", ".", "join", "(", "[", "\"Command:\"", ",", "str_command", ",", "\"\\nMeaning:\"", "]", "+", "meaning", "\n", "+", "[", "\"\\nPrediction\"", "]", "+", "predicted_example", "[", "\"prediction\"", "]", "\n", "+", "[", "\"\\n      Target:\"", "]", "+", "target_commands", ")", "\n", "if", "predicted_example", "[", "\"exact_match\"", "]", ":", "\n", "                    ", "if", "only_save_errors", ":", "\n", "                        ", "continue", "\n", "", "parent_save_dir", "=", "\"exact_matches\"", "\n", "", "else", ":", "\n", "                    ", "parent_save_dir", "=", "\"errors\"", "\n", "", "save_dir_prediction", "=", "self", ".", "visualize_command", "(", "\n", "situation", ",", "command", ",", "predicted_demonstration", ",", "mission", "=", "mission", ",", "parent_save_dir", "=", "parent_save_dir", ",", "\n", "attention_weights", "=", "predicted_example", "[", "\"attention_weights_situation\"", "]", ")", "\n", "save_dirs", ".", "append", "(", "save_dir_prediction", ")", "\n", "", "", "return", "save_dirs", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.visualize_data_example": [[911, 919], ["dataset.GroundedScan.parse_example", "dataset.GroundedScan.visualize_command"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.parse_example", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.visualize_command"], ["", "def", "visualize_data_example", "(", "self", ",", "data_example", ":", "dict", ")", "->", "str", ":", "\n", "        ", "command", ",", "meaning", ",", "derivation", ",", "situation", ",", "actual_target_commands", ",", "target_demonstration", ",", "_", "=", "self", ".", "parse_example", "(", "\n", "data_example", ")", "\n", "mission", "=", "' '", ".", "join", "(", "[", "\"Command:\"", ",", "' '", ".", "join", "(", "command", ")", ",", "\"\\nMeaning: \"", ",", "' '", ".", "join", "(", "meaning", ")", ",", "\n", "\"\\nTarget:\"", "]", "+", "actual_target_commands", ")", "\n", "save_dir", "=", "self", ".", "visualize_command", "(", "situation", ",", "command", ",", "target_demonstration", ",", "\n", "mission", "=", "mission", ")", "\n", "return", "save_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.visualize_data_examples": [[920, 928], ["len", "logger.info", "dataset.GroundedScan.visualize_data_example", "save_dirs.append"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.visualize_data_example"], ["", "def", "visualize_data_examples", "(", "self", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "if", "len", "(", "self", ".", "_examples_to_visualize", ")", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\"No examples to visualize.\"", ")", "\n", "", "save_dirs", "=", "[", "]", "\n", "for", "data_example", "in", "self", ".", "_examples_to_visualize", ":", "\n", "            ", "save_dir", "=", "self", ".", "visualize_data_example", "(", "data_example", ")", "\n", "save_dirs", ".", "append", "(", "save_dir", ")", "\n", "", "return", "save_dirs", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.visualize_command": [[929, 995], ["dataset.GroundedScan._world.get_current_situation", "os.path.join", "os.path.join", "os.path.join", "dataset.GroundedScan.initialize_world", "dataset.GroundedScan._world.save_situation", "enumerate", "os.path.join", "imageio.mimsave", "dataset.GroundedScan.initialize_world", "os.path.join", "os.path.exists", "os.mkdir", "os.listdir", "len", "os.path.exists", "os.mkdir", "numpy.array", "os.path.join", "dataset.GroundedScan.initialize_world", "dataset.GroundedScan._world.save_situation", "filenames.append", "images.append", "os.path.join", "dataset.GroundedScan._vocabulary.translate_word", "os.path.exists", "os.mkdir", "numpy.array", "os.path.join", "imageio.imread", "os.path.join", "os.path.join", "len", "len", "str"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.get_current_situation", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.initialize_world", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.save_situation", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.initialize_world", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.initialize_world", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.save_situation", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_word"], ["", "def", "visualize_command", "(", "self", ",", "initial_situation", ":", "Situation", ",", "command", ":", "List", "[", "str", "]", ",", "demonstration", ":", "List", "[", "Situation", "]", ",", "\n", "mission", ":", "str", ",", "parent_save_dir", "=", "\"\"", ",", "attention_weights", "=", "[", "]", ")", "->", "str", ":", "\n", "        ", "\"\"\"\n        :param initial_situation: (list of objects with their location, grid size, agent position)\n        :param command: command in natural language\n        :param demonstration: action sequence\n        :param mission: the string you want to display in the text box of the image\n        :param parent_save_dir: directory to save in, can be the instruction text separated by _'s\n        :param attention_weights: if filled, colors grid cells with higher values darker grey\n        :return: path_to_visualization\n        \"\"\"", "\n", "# Save current situation.", "\n", "current_situation", "=", "self", ".", "_world", ".", "get_current_situation", "(", ")", "\n", "current_mission", "=", "self", ".", "_world", ".", "mission", "\n", "\n", "# Initialize directory with current command as its name.", "\n", "mission_folder", "=", "'_'", ".", "join", "(", "[", "self", ".", "_vocabulary", ".", "translate_word", "(", "word", ")", "for", "word", "in", "command", "]", ")", "\n", "if", "parent_save_dir", ":", "\n", "            ", "mission_folder", "=", "os", ".", "path", ".", "join", "(", "parent_save_dir", ",", "mission_folder", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_directory", ",", "parent_save_dir", ")", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_directory", ",", "parent_save_dir", ")", ")", "\n", "", "", "full_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_directory", ",", "mission_folder", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "full_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "full_dir", ")", "\n", "file_count", "=", "0", "\n", "", "else", ":", "\n", "            ", "files_list", "=", "os", ".", "listdir", "(", "full_dir", ")", "\n", "file_count", "=", "len", "(", "files_list", ")", "\n", "", "mission_folder", "=", "os", ".", "path", ".", "join", "(", "mission_folder", ",", "\"situation_{}\"", ".", "format", "(", "file_count", ")", ")", "\n", "final_dir", "=", "os", ".", "path", ".", "join", "(", "full_dir", ",", "\"situation_{}\"", ".", "format", "(", "file_count", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "final_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "final_dir", ")", "\n", "\n", "# Visualize command.", "\n", "", "self", ".", "initialize_world", "(", "initial_situation", ",", "mission", "=", "mission", ")", "\n", "if", "attention_weights", ":", "\n", "            ", "current_attention_weights", "=", "np", ".", "array", "(", "attention_weights", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "current_attention_weights", "=", "[", "]", "\n", "", "save_location", "=", "self", ".", "_world", ".", "save_situation", "(", "os", ".", "path", ".", "join", "(", "mission_folder", ",", "'initial.png'", ")", ",", "\n", "attention_weights", "=", "current_attention_weights", ")", "\n", "filenames", "=", "[", "save_location", "]", "\n", "\n", "for", "i", ",", "situation", "in", "enumerate", "(", "demonstration", ")", ":", "\n", "            ", "if", "attention_weights", ":", "\n", "                ", "assert", "len", "(", "attention_weights", ")", ">=", "len", "(", "demonstration", ")", ",", "\"Unequal number of attention weights and \"", "\"demonstration steps.\"", "\n", "current_attention_weights", "=", "np", ".", "array", "(", "attention_weights", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                ", "current_attention_weights", "=", "[", "]", "\n", "", "self", ".", "initialize_world", "(", "situation", ",", "mission", "=", "mission", ")", "\n", "save_location", "=", "self", ".", "_world", ".", "save_situation", "(", "os", ".", "path", ".", "join", "(", "mission_folder", ",", "'situation_'", "+", "str", "(", "i", ")", "+", "'.png'", ")", ",", "\n", "attention_weights", "=", "current_attention_weights", ")", "\n", "filenames", ".", "append", "(", "save_location", ")", "\n", "\n", "# Make a gif of the action sequence.", "\n", "", "images", "=", "[", "]", "\n", "for", "filename", "in", "filenames", ":", "\n", "            ", "images", ".", "append", "(", "imageio", ".", "imread", "(", "filename", ")", ")", "\n", "", "movie_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_directory", ",", "mission_folder", ")", "\n", "imageio", ".", "mimsave", "(", "os", ".", "path", ".", "join", "(", "movie_dir", ",", "'movie.gif'", ")", ",", "images", ",", "fps", "=", "5", ")", "\n", "\n", "# Restore situation.", "\n", "self", ".", "initialize_world", "(", "current_situation", ",", "mission", "=", "current_mission", ")", "\n", "\n", "return", "movie_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.generate_possible_targets": [[996, 1018], ["list", "itertools.product", "ValueError"], "methods", ["None"], ["", "def", "generate_possible_targets", "(", "self", ",", "referred_size", ":", "str", ",", "referred_color", ":", "str", ",", "referred_shape", ":", "str", ")", ":", "\n", "        ", "\"\"\"\n        Generate a list of possible target objects based on some target referred to in a command, e.g.\n        for small red circle any sized circle but the largest can be a potential target.\n        \"\"\"", "\n", "if", "referred_size", ":", "\n", "            ", "if", "referred_size", "==", "\"small\"", ":", "\n", "                ", "target_sizes", "=", "self", ".", "_object_vocabulary", ".", "object_sizes", "[", ":", "-", "1", "]", "\n", "", "elif", "referred_size", "==", "\"big\"", ":", "\n", "                ", "target_sizes", "=", "self", ".", "_object_vocabulary", ".", "object_sizes", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Unknown size adjective in command.\"", ")", "\n", "", "", "else", ":", "\n", "            ", "target_sizes", "=", "self", ".", "_object_vocabulary", ".", "object_sizes", "\n", "# If no color specified, use all colors.", "\n", "", "if", "not", "referred_color", ":", "\n", "            ", "target_colors", "=", "self", ".", "_object_vocabulary", ".", "object_colors", "\n", "", "else", ":", "\n", "            ", "target_colors", "=", "[", "referred_color", "]", "\n", "\n", "# Return all possible combinations of sizes and colors", "\n", "", "return", "list", "(", "itertools", ".", "product", "(", "target_sizes", ",", "target_colors", ",", "[", "referred_shape", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.all_objects_except_shape": [[1019, 1025], ["all_shapes.remove", "list", "itertools.product"], "methods", ["None"], ["", "def", "all_objects_except_shape", "(", "self", ",", "shape", ":", "str", ")", "->", "List", "[", "tuple", "]", ":", "\n", "        ", "all_sizes", "=", "self", ".", "_object_vocabulary", ".", "object_sizes", "\n", "all_colors", "=", "self", ".", "_object_vocabulary", ".", "object_colors", "\n", "all_shapes", "=", "self", ".", "_object_vocabulary", ".", "object_shapes", "\n", "all_shapes", ".", "remove", "(", "shape", ")", "\n", "return", "list", "(", "itertools", ".", "product", "(", "all_sizes", ",", "all_colors", ",", "all_shapes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.get_larger_sizes": [[1026, 1028], ["list", "range"], "methods", ["None"], ["", "def", "get_larger_sizes", "(", "self", ",", "size", ":", "int", ")", "->", "List", "[", "int", "]", ":", "\n", "        ", "return", "list", "(", "range", "(", "size", "+", "1", ",", "self", ".", "_object_vocabulary", ".", "largest_size", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.get_smaller_sizes": [[1029, 1031], ["list", "range"], "methods", ["None"], ["", "def", "get_smaller_sizes", "(", "self", ",", "size", ":", "int", ")", "->", "List", "[", "int", "]", ":", "\n", "        ", "return", "list", "(", "range", "(", "self", ".", "_object_vocabulary", ".", "smallest_size", ",", "size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.generate_distinct_objects": [[1032, 1104], ["all_shapes.remove", "objects.append", "all_other_shapes.remove", "dataset.GroundedScan.get_larger_sizes", "dataset.GroundedScan.get_smaller_sizes", "ValueError", "dataset.GroundedScan._object_vocabulary.sample_size", "dataset.GroundedScan._object_vocabulary.sample_color", "objects.append", "range", "objects.append", "range", "objects.append", "obligatory_objects.append", "colored_shapes.append", "range", "objects.append", "obligatory_objects.append", "colored_shapes.append", "dataset.GroundedScan._object_vocabulary.sample_size", "colored_shapes.append", "random.choice", "dataset.GroundedScan._object_vocabulary.sample_size", "random.choice", "dataset.GroundedScan._object_vocabulary.sample_size", "random.choice"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.get_larger_sizes", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.get_smaller_sizes", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.ObjectVocabulary.sample_size", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.ObjectVocabulary.sample_color", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.ObjectVocabulary.sample_size", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.ObjectVocabulary.sample_size", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.ObjectVocabulary.sample_size"], ["", "def", "generate_distinct_objects", "(", "self", ",", "referred_size", ":", "str", ",", "referred_color", ":", "str", ",", "referred_shape", ":", "str", ",", "\n", "actual_size", ":", "int", ",", "actual_color", ":", "str", ")", "->", "Tuple", "[", "list", ",", "list", "]", ":", "\n", "        ", "\"\"\"\n        Generate a list of objects that are distinct from some referred target. E.g. if the referred target is a\n        small circle, and the actual color of the target object is red, there cannot also be a blue circle of the same\n        size, since then there will be 2 possible targets.\n        Currently makes sure at least 2 sized objects of each group is placed whenever a size is referred to in the\n        referred_size. E.g. if the command is 'walk to a big circle', make sure there are at least 2 sized circles.\n        This doesn't get done for the color, e.g. if the comment is 'walk to a green circle', there are not\n        necessarily also other colored circles in obligatory_objects.\n        \"\"\"", "\n", "objects", "=", "[", "]", "\n", "# Initialize list that will be filled with objects that need to be present in the situation for it to make sense", "\n", "# E.g. if the referred object is 'small circle' there needs to be at least 1 larger circle.", "\n", "obligatory_objects", "=", "[", "]", "\n", "# E.g. distinct from 'circle' -> no other circles; generate one random object of each other shape.", "\n", "if", "not", "referred_size", "and", "not", "referred_color", ":", "\n", "            ", "all_shapes", "=", "self", ".", "_object_vocabulary", ".", "object_shapes", "\n", "all_shapes", ".", "remove", "(", "referred_shape", ")", "\n", "for", "shape", "in", "all_shapes", ":", "\n", "                ", "objects", ".", "append", "(", "[", "(", "self", ".", "_object_vocabulary", ".", "sample_size", "(", ")", ",", "self", ".", "_object_vocabulary", ".", "sample_color", "(", ")", ",", "shape", ")", "]", ")", "\n", "", "return", "objects", ",", "obligatory_objects", "\n", "# E.g. distinct from 'red circle' -> no other red circles of any size; generate one randomly size object for", "\n", "# each color, shape combination that is not a 'red circle'.", "\n", "", "elif", "not", "referred_size", ":", "\n", "            ", "for", "shape", "in", "self", ".", "_object_vocabulary", ".", "object_shapes", ":", "\n", "                ", "for", "color", "in", "self", ".", "_object_vocabulary", ".", "object_colors", ":", "\n", "                    ", "if", "not", "(", "shape", "==", "referred_shape", "and", "color", "==", "referred_color", ")", ":", "\n", "                        ", "objects", ".", "append", "(", "[", "(", "self", ".", "_object_vocabulary", ".", "sample_size", "(", ")", ",", "color", ",", "shape", ")", "]", ")", "\n", "", "", "", "return", "objects", ",", "obligatory_objects", "\n", "", "else", ":", "\n", "            ", "if", "referred_size", "==", "\"small\"", ":", "\n", "                ", "all_other_sizes", "=", "self", ".", "get_larger_sizes", "(", "actual_size", ")", "\n", "", "elif", "referred_size", "==", "\"big\"", ":", "\n", "                ", "all_other_sizes", "=", "self", ".", "get_smaller_sizes", "(", "actual_size", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Unknown referred size in command\"", ")", "\n", "", "all_other_shapes", "=", "self", ".", "_object_vocabulary", ".", "object_shapes", "\n", "all_other_shapes", ".", "remove", "(", "referred_shape", ")", "\n", "# E.g. distinct from 'small circle' -> no circles of size <= than target in any color; generate two", "\n", "# random sizes for each color-shape pair except for the shape that is referred generate one larger objects", "\n", "# (if referred size is small, else a smaller object)", "\n", "if", "not", "referred_color", ":", "\n", "                ", "for", "shape", "in", "self", ".", "_object_vocabulary", ".", "object_shapes", ":", "\n", "                    ", "for", "color", "in", "self", ".", "_object_vocabulary", ".", "object_colors", ":", "\n", "                        ", "if", "not", "shape", "==", "referred_shape", ":", "\n", "                            ", "colored_shapes", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "2", ")", ":", "\n", "                                ", "colored_shapes", ".", "append", "(", "(", "self", ".", "_object_vocabulary", ".", "sample_size", "(", ")", ",", "color", ",", "shape", ")", ")", "\n", "", "objects", ".", "append", "(", "colored_shapes", ")", "\n", "", "else", ":", "\n", "                            ", "if", "not", "color", "==", "actual_color", ":", "\n", "                                ", "colored_shapes", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "2", ")", ":", "\n", "                                    ", "colored_shapes", ".", "append", "(", "(", "random", ".", "choice", "(", "all_other_sizes", ")", ",", "color", ",", "shape", ")", ")", "\n", "", "objects", ".", "append", "(", "colored_shapes", ")", "\n", "", "else", ":", "\n", "                                ", "obligatory_objects", ".", "append", "(", "(", "random", ".", "choice", "(", "all_other_sizes", ")", ",", "color", ",", "shape", ")", ")", "\n", "", "", "", "", "return", "objects", ",", "obligatory_objects", "\n", "# E.g. distinct from 'small red circle' -> no red circles of size <= as target; generate for each", "\n", "# color-shape pair two random sizes, and when the pair is the referred pair, one larger size.", "\n", "", "else", ":", "\n", "                ", "for", "shape", "in", "self", ".", "_object_vocabulary", ".", "object_shapes", ":", "\n", "                    ", "for", "color", "in", "self", ".", "_object_vocabulary", ".", "object_colors", ":", "\n", "                        ", "if", "not", "(", "shape", "==", "referred_shape", "and", "color", "==", "referred_color", ")", ":", "\n", "                            ", "colored_shapes", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "2", ")", ":", "\n", "                                ", "colored_shapes", ".", "append", "(", "(", "self", ".", "_object_vocabulary", ".", "sample_size", "(", ")", ",", "color", ",", "shape", ")", ")", "\n", "", "objects", ".", "append", "(", "colored_shapes", ")", "\n", "", "else", ":", "\n", "                            ", "obligatory_objects", ".", "append", "(", "(", "random", ".", "choice", "(", "all_other_sizes", ")", ",", "color", ",", "shape", ")", ")", "\n", "", "", "", "return", "objects", ",", "obligatory_objects", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.generate_situations": [[1105, 1204], ["itertools.product", "situation_specifications.keys", "situation_specifications[].keys", "[].keys", "range", "range", "range", "dataset.GroundedScan.get_empty_situation", "GroundedScan.world.Position", "[].append", "range", "dataset.GroundedScan._world.within_grid", "dataset.GroundedScan._world.sample_position_conditioned", "dataset.GroundedScan._world.get_position_at", "dataset.GroundedScan._world.within_grid", "dataset.GroundedScan._world.within_grid", "dataset.GroundedScan.get_empty_situation", "random.randint", "list", "GroundedScan.world.Position", "[].append", "max", "min", "dataset.GroundedScan._world.within_grid", "dataset.GroundedScan._world.sample_position_conditioned", "dataset.GroundedScan._world.get_position_at", "dataset.GroundedScan._world.get_position_at", "dataset.GroundedScan._world.within_grid", "dataset.GroundedScan._world.within_grid", "condition.values", "condition.values"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.get_empty_situation", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.within_grid", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.sample_position_conditioned", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.get_position_at", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.within_grid", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.within_grid", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.get_empty_situation", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.within_grid", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.sample_position_conditioned", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.get_position_at", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.get_position_at", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.within_grid", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.within_grid"], ["", "", "", "def", "generate_situations", "(", "self", ",", "num_resampling", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Generate all semantically distinct situations with an agent and a target object.\n        A semantically distinct situation is based on the target object (shape, color and size), the direction the\n        agent has w.r.t. the target (e.g. North, South-West, etc.) and the number of steps the agent is removed from\n        the target. For each of these possible situations, num_resampling defines how often other objects positions\n        are resampled to create a new situation.\n        :param num_resampling: how often to resample a semantically equivalent situation but with non-target objects at\n        different locations.\n        :return: a dictionary with situations.\n        \"\"\"", "\n", "# All possible target objects", "\n", "all_targets", "=", "itertools", ".", "product", "(", "self", ".", "_object_vocabulary", ".", "object_sizes", ",", "self", ".", "_object_vocabulary", ".", "object_colors", ",", "\n", "self", ".", "_object_vocabulary", ".", "object_shapes", ")", "\n", "\n", "# Loop over all semantically different situation specifications", "\n", "situation_specifications", "=", "{", "}", "\n", "for", "target_size", ",", "target_color", ",", "target_shape", "in", "all_targets", ":", "\n", "            ", "if", "target_shape", "not", "in", "situation_specifications", ".", "keys", "(", ")", ":", "\n", "                ", "situation_specifications", "[", "target_shape", "]", "=", "{", "}", "\n", "", "if", "target_color", "not", "in", "situation_specifications", "[", "target_shape", "]", ".", "keys", "(", ")", ":", "\n", "                ", "situation_specifications", "[", "target_shape", "]", "[", "target_color", "]", "=", "{", "}", "\n", "", "if", "target_size", "not", "in", "situation_specifications", "[", "target_shape", "]", "[", "target_color", "]", ".", "keys", "(", ")", ":", "\n", "                ", "situation_specifications", "[", "target_shape", "]", "[", "target_color", "]", "[", "target_size", "]", "=", "[", "]", "\n", "\n", "# Loop over all possible directions from agent to target (e.g. agent is facing the target from the NW).", "\n", "", "for", "direction_str", "in", "self", ".", "_relative_directions", ":", "\n", "\n", "# For straight directions (e.g. North, East, South and West) loop over 1 to grid size number of steps.", "\n", "                ", "if", "direction_str", "in", "self", ".", "_straight_directions", ":", "\n", "                    ", "for", "num_steps_to_target", "in", "range", "(", "1", ",", "self", ".", "_world", ".", "grid_size", ")", ":", "\n", "\n", "# Don't resample too often on the edges of the grid-world.", "\n", "                        ", "if", "1", "<", "num_steps_to_target", "<", "self", ".", "_world", ".", "grid_size", "-", "1", ":", "\n", "                            ", "num_to_resample", "=", "num_resampling", "\n", "", "else", ":", "\n", "                            ", "num_to_resample", "=", "1", "\n", "\n", "# Resample a semantically equivalent situation based on positions of non-target objects.", "\n", "", "for", "_", "in", "range", "(", "num_to_resample", ")", ":", "\n", "                            ", "empty_situation", "=", "self", ".", "get_empty_situation", "(", ")", "\n", "target_position", "=", "Position", "(", "column", "=", "self", ".", "_world", ".", "grid_size", "+", "1", ",", "row", "=", "self", ".", "_world", ".", "grid_size", "+", "1", ")", "\n", "while", "not", "self", ".", "_world", ".", "within_grid", "(", "target_position", ")", ":", "\n", "                                ", "condition", "=", "{", "\"n\"", ":", "0", ",", "\"e\"", ":", "0", ",", "\"s\"", ":", "0", ",", "\"w\"", ":", "0", "}", "\n", "condition", "[", "direction_str", "]", "=", "num_steps_to_target", "\n", "agent_position", "=", "self", ".", "_world", ".", "sample_position_conditioned", "(", "*", "condition", ".", "values", "(", ")", ")", "\n", "target_position", "=", "self", ".", "_world", ".", "get_position_at", "(", "agent_position", ",", "direction_str", ",", "\n", "num_steps_to_target", ")", "\n", "", "assert", "self", ".", "_world", ".", "within_grid", "(", "target_position", ")", "and", "self", ".", "_world", ".", "within_grid", "(", "agent_position", ")", "\n", "\n", "# Save a situation.", "\n", "empty_situation", "[", "\"agent_position\"", "]", "=", "agent_position", "\n", "empty_situation", "[", "\"target_position\"", "]", "=", "target_position", "\n", "empty_situation", "[", "\"distance_to_target\"", "]", "=", "num_steps_to_target", "\n", "empty_situation", "[", "\"direction_to_target\"", "]", "=", "direction_str", "\n", "empty_situation", "[", "\"target_shape\"", "]", "=", "target_shape", "\n", "empty_situation", "[", "\"target_color\"", "]", "=", "target_color", "\n", "empty_situation", "[", "\"target_size\"", "]", "=", "target_size", "\n", "situation_specifications", "[", "target_shape", "]", "[", "target_color", "]", "[", "target_size", "]", ".", "append", "(", "empty_situation", ")", "\n", "\n", "# For combined dirs (e.g. North-East, South-West, etc.) loop over 1 to 2 * grid size number of steps", "\n", "", "", "", "elif", "direction_str", "in", "self", ".", "_combined_directions", ":", "\n", "                    ", "for", "number_of_steps_in_direction", "in", "range", "(", "2", ",", "2", "*", "(", "self", ".", "_world", ".", "grid_size", "-", "1", ")", "+", "1", ")", ":", "\n", "                        ", "if", "1", "<", "number_of_steps_in_direction", "<", "2", "*", "(", "self", ".", "_world", ".", "grid_size", "-", "1", ")", ":", "\n", "                            ", "num_to_resample", "=", "num_resampling", "\n", "", "else", ":", "\n", "                            ", "num_to_resample", "=", "1", "\n", "", "for", "_", "in", "range", "(", "num_to_resample", ")", ":", "\n", "                            ", "empty_situation", "=", "self", ".", "get_empty_situation", "(", ")", "\n", "\n", "# Randomly divide the number of steps over each direction of the combination", "\n", "random_divide", "=", "random", ".", "randint", "(", "max", "(", "1", ",", "number_of_steps_in_direction", "-", "self", ".", "_world", ".", "grid_size", "+", "1", ")", ",", "\n", "min", "(", "number_of_steps_in_direction", "-", "1", ",", "self", ".", "_world", ".", "grid_size", "-", "1", ")", ")", "\n", "steps_in_first_direction", "=", "random_divide", "\n", "steps_in_second_direction", "=", "number_of_steps_in_direction", "-", "random_divide", "\n", "assert", "(", "steps_in_second_direction", "+", "steps_in_first_direction", ")", "==", "number_of_steps_in_direction", "\n", "assert", "(", "steps_in_first_direction", "and", "steps_in_second_direction", ")", "<=", "self", ".", "_world", ".", "grid_size", "-", "1", "\n", "directions", "=", "list", "(", "direction_str", ")", "\n", "target_position", "=", "Position", "(", "column", "=", "self", ".", "_world", ".", "grid_size", "+", "1", ",", "row", "=", "self", ".", "_world", ".", "grid_size", "+", "1", ")", "\n", "while", "not", "self", ".", "_world", ".", "within_grid", "(", "target_position", ")", ":", "\n", "                                ", "condition", "=", "{", "\"n\"", ":", "0", ",", "\"e\"", ":", "0", ",", "\"s\"", ":", "0", ",", "\"w\"", ":", "0", "}", "\n", "condition", "[", "directions", "[", "0", "]", "]", "=", "steps_in_first_direction", "\n", "condition", "[", "directions", "[", "1", "]", "]", "=", "steps_in_second_direction", "\n", "agent_position", "=", "self", ".", "_world", ".", "sample_position_conditioned", "(", "*", "condition", ".", "values", "(", ")", ")", "\n", "intermediate_target_position", "=", "self", ".", "_world", ".", "get_position_at", "(", "agent_position", ",", "\n", "directions", "[", "0", "]", ",", "\n", "steps_in_first_direction", ")", "\n", "target_position", "=", "self", ".", "_world", ".", "get_position_at", "(", "intermediate_target_position", ",", "\n", "directions", "[", "1", "]", ",", "steps_in_second_direction", ")", "\n", "", "assert", "self", ".", "_world", ".", "within_grid", "(", "target_position", ")", "and", "self", ".", "_world", ".", "within_grid", "(", "agent_position", ")", "\n", "empty_situation", "[", "\"agent_position\"", "]", "=", "agent_position", "\n", "empty_situation", "[", "\"target_position\"", "]", "=", "target_position", "\n", "empty_situation", "[", "\"distance_to_target\"", "]", "=", "number_of_steps_in_direction", "\n", "empty_situation", "[", "\"direction_to_target\"", "]", "=", "direction_str", "\n", "empty_situation", "[", "\"target_shape\"", "]", "=", "target_shape", "\n", "empty_situation", "[", "\"target_color\"", "]", "=", "target_color", "\n", "empty_situation", "[", "\"target_size\"", "]", "=", "target_size", "\n", "situation_specifications", "[", "target_shape", "]", "[", "target_color", "]", "[", "target_size", "]", ".", "append", "(", "empty_situation", ")", "\n", "", "", "", "", "", "return", "situation_specifications", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.initialize_world_from_spec": [[1205, 1229], ["dataset.GroundedScan._world.clear_situation", "dataset.GroundedScan._world.place_agent_at", "dataset.GroundedScan._world.place_object", "dataset.GroundedScan.generate_distinct_objects", "int", "max", "random.sample", "GroundedScan.world.Object", "objects_to_place.extend", "dataset.GroundedScan._world.sample_position", "dataset.GroundedScan._world.place_object", "dataset.GroundedScan._vocabulary.translate_word", "dataset.GroundedScan._vocabulary.translate_word", "dataset.GroundedScan._vocabulary.translate_word", "len", "GroundedScan.world.Object"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.clear_situation", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.place_agent_at", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.place_object", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.generate_distinct_objects", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Grammar.sample", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.sample_position", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.place_object", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_word"], ["", "def", "initialize_world_from_spec", "(", "self", ",", "situation_spec", ",", "referred_size", ":", "str", ",", "referred_color", ":", "str", ",", "referred_shape", ":", "str", ",", "\n", "actual_size", ":", "int", ",", "sample_percentage", "=", "0.5", ",", "min_other_objects", "=", "0", ")", ":", "\n", "        ", "self", ".", "_world", ".", "clear_situation", "(", ")", "\n", "self", ".", "_world", ".", "place_agent_at", "(", "situation_spec", "[", "\"agent_position\"", "]", ")", "\n", "target_shape", "=", "situation_spec", "[", "\"target_shape\"", "]", "\n", "target_color", "=", "situation_spec", "[", "\"target_color\"", "]", "\n", "target_size", "=", "situation_spec", "[", "\"target_size\"", "]", "\n", "self", ".", "_world", ".", "place_object", "(", "Object", "(", "size", "=", "target_size", ",", "color", "=", "target_color", ",", "shape", "=", "target_shape", ")", ",", "\n", "position", "=", "situation_spec", "[", "\"target_position\"", "]", ",", "target", "=", "True", ")", "\n", "distinct_objects", ",", "obligatory_objects", "=", "self", ".", "generate_distinct_objects", "(", "\n", "referred_size", "=", "self", ".", "_vocabulary", ".", "translate_word", "(", "referred_size", ")", ",", "\n", "referred_color", "=", "self", ".", "_vocabulary", ".", "translate_word", "(", "referred_color", ")", ",", "\n", "referred_shape", "=", "self", ".", "_vocabulary", ".", "translate_word", "(", "referred_shape", ")", ",", "\n", "actual_size", "=", "actual_size", ",", "\n", "actual_color", "=", "target_color", ")", "\n", "num_to_sample", "=", "int", "(", "len", "(", "distinct_objects", ")", "*", "sample_percentage", ")", "\n", "num_to_sample", "=", "max", "(", "min_other_objects", ",", "num_to_sample", ")", "\n", "objects_to_place", "=", "obligatory_objects", "\n", "sampled_objects", "=", "random", ".", "sample", "(", "distinct_objects", ",", "k", "=", "num_to_sample", ")", "\n", "for", "sampled_objs", "in", "sampled_objects", ":", "\n", "            ", "objects_to_place", ".", "extend", "(", "sampled_objs", ")", "\n", "", "for", "size", ",", "color", ",", "shape", "in", "objects_to_place", ":", "\n", "            ", "other_position", "=", "self", ".", "_world", ".", "sample_position", "(", ")", "\n", "self", ".", "_world", ".", "place_object", "(", "Object", "(", "size", "=", "size", ",", "color", "=", "color", ",", "shape", "=", "shape", ")", ",", "position", "=", "other_position", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.command_repr": [[1230, 1233], ["None"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "command_repr", "(", "command", ":", "List", "[", "str", "]", ")", "->", "str", ":", "\n", "        ", "return", "','", ".", "join", "(", "command", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.parse_command_repr": [[1234, 1237], ["command_repr.split"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "parse_command_repr", "(", "command_repr", ":", "str", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "return", "command_repr", ".", "split", "(", "','", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.derivation_repr": [[1238, 1241], ["str"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "derivation_repr", "(", "derivation", ":", "Derivation", ")", "->", "str", ":", "\n", "        ", "return", "str", "(", "derivation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.parse_derivation_repr": [[1242, 1245], ["derivation_repr.split", "GroundedScan.grammar.Derivation.from_str"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.from_str"], ["", "def", "parse_derivation_repr", "(", "self", ",", "derivation_repr", ":", "str", ")", "->", "Derivation", ":", "\n", "        ", "command_rules", ",", "command_lexicon", "=", "derivation_repr", ".", "split", "(", "';'", ")", "\n", "return", "Derivation", ".", "from_str", "(", "command_rules", ",", "command_lexicon", ",", "self", ".", "_grammar", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.position_repr": [[1246, 1249], ["str", "str"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "position_repr", "(", "position", ":", "Position", ")", ":", "\n", "        ", "return", "','", ".", "join", "(", "[", "str", "(", "position", ".", "column", ")", ",", "str", "(", "position", ".", "row", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.parse_position_repr": [[1250, 1254], ["position_repr.split", "GroundedScan.world.Position", "int", "int"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "parse_position_repr", "(", "position_repr", ":", "str", ")", "->", "Position", ":", "\n", "        ", "column", ",", "row", "=", "position_repr", ".", "split", "(", "','", ")", "\n", "return", "Position", "(", "column", "=", "int", "(", "column", ")", ",", "row", "=", "int", "(", "row", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.get_data_pairs": [[1255, 1383], ["dataset.GroundedScan._world.get_current_situation", "dataset.GroundedScan.reset_dataset", "dataset.GroundedScan.generate_situations", "dataset.GroundedScan.generate_all_commands", "dataset.GroundedScan._grammar.all_derivations.items", "logger.info", "logger.info", "dataset.GroundedScan.discard_equivalent_examples", "logger.info", "dataset.GroundedScan.initialize_world", "logger.info", "dataset.GroundedScan.make_test_set", "dataset.GroundedScan.make_test_set", "dataset.GroundedScan.move_k_examples_to_train", "derivation.meaning", "derivation.words", "arguments.pop().to_predicate", "dataset.GroundedScan.generate_possible_targets", "len", "len", "random.sample().pop", "enumerate", "dataset.GroundedScan._vocabulary.get_adverbs", "arguments.pop", "dataset.GroundedScan._vocabulary.translate_word", "dataset.GroundedScan._vocabulary.translate_word", "dataset.GroundedScan._vocabulary.translate_word", "random.sample", "set", "dataset.GroundedScan.initialize_world_from_spec", "dataset.GroundedScan._world.get_current_situation", "dataset.GroundedScan.demonstrate_command", "dataset.GroundedScan.fill_example", "dataset.GroundedScan._world.clear_situation", "random.sample", "logger.info", "dataset.GroundedScan._template_identifiers[].append", "int", "dataset.GroundedScan.assign_splits", "derivation.words", "range", "dataset.GroundedScan._vocabulary.translate_word", "len", "ValueError", "range", "len", "dataset.GroundedScan._world.clear_situation", "len"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.get_current_situation", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.reset_dataset", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.generate_situations", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.generate_all_commands", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.discard_equivalent_examples", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.initialize_world", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.make_test_set", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.make_test_set", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.move_k_examples_to_train", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.meaning", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.words", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.LogicalForm.to_predicate", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.generate_possible_targets", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.get_adverbs", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Grammar.sample", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.initialize_world_from_spec", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.get_current_situation", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.demonstrate_command", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.fill_example", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.clear_situation", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Grammar.sample", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.assign_splits", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.grammar.Derivation.words", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.world.World.clear_situation"], ["", "def", "get_data_pairs", "(", "self", ",", "max_examples", "=", "None", ",", "num_resampling", "=", "1", ",", "other_objects_sample_percentage", "=", "0.5", ",", "\n", "split_type", "=", "\"uniform\"", ",", "visualize_per_template", "=", "0", ",", "visualize_per_split", "=", "0", ",", "train_percentage", "=", "0.8", ",", "\n", "min_other_objects", "=", "0", ",", "k_shot_generalization", "=", "0", ",", "make_dev_set", "=", "False", ",", "\n", "cut_off_target_length", "=", "25", ")", "->", "{", "}", ":", "\n", "        ", "\"\"\"\n        Generate a set of situations and generate all possible commands based on the current grammar and lexicon,\n        match commands to situations based on relevance (if a command refers to a target object, it needs to be\n        present in the situation) and save these pairs in a the list of data examples.\n        \"\"\"", "\n", "if", "k_shot_generalization", ">", "0", "and", "split_type", "==", "\"uniform\"", ":", "\n", "            ", "logger", ".", "info", "(", "\"WARNING: k_shot_generalization set to {} but for split_type uniform this is not used.\"", ".", "format", "(", "\n", "k_shot_generalization", ")", ")", "\n", "\n", "# Save current situation of the world for later restoration.", "\n", "", "current_situation", "=", "self", ".", "_world", ".", "get_current_situation", "(", ")", "\n", "current_mission", "=", "self", ".", "_world", ".", "mission", "\n", "self", ".", "reset_dataset", "(", ")", "\n", "\n", "# Generate all situations and commands.", "\n", "situation_specifications", "=", "self", ".", "generate_situations", "(", "num_resampling", "=", "num_resampling", ")", "\n", "self", ".", "generate_all_commands", "(", ")", "\n", "example_count", "=", "0", "\n", "dropped_examples", "=", "0", "\n", "for", "template_num", ",", "template_derivations", "in", "self", ".", "_grammar", ".", "all_derivations", ".", "items", "(", ")", ":", "\n", "            ", "visualized_per_template", "=", "0", "\n", "visualized_per_split", "=", "{", "split", ":", "0", "for", "split", "in", "self", ".", "_possible_splits", "}", "\n", "for", "derivation", "in", "template_derivations", ":", "\n", "                ", "arguments", "=", "[", "]", "\n", "derivation", ".", "meaning", "(", "arguments", ")", "\n", "assert", "len", "(", "arguments", ")", "==", "1", ",", "\"Only one target object currently supported.\"", "\n", "adverb", "=", "\"\"", "\n", "for", "word", "in", "derivation", ".", "words", "(", ")", ":", "\n", "                    ", "if", "word", "in", "self", ".", "_vocabulary", ".", "get_adverbs", "(", ")", ":", "\n", "                        ", "adverb", "=", "word", "\n", "", "", "target_str", ",", "target_predicate", "=", "arguments", ".", "pop", "(", ")", ".", "to_predicate", "(", ")", "\n", "possible_target_objects", "=", "self", ".", "generate_possible_targets", "(", "\n", "referred_size", "=", "self", ".", "_vocabulary", ".", "translate_word", "(", "target_predicate", "[", "\"size\"", "]", ")", ",", "\n", "referred_color", "=", "self", ".", "_vocabulary", ".", "translate_word", "(", "target_predicate", "[", "\"color\"", "]", ")", ",", "\n", "referred_shape", "=", "self", ".", "_vocabulary", ".", "translate_word", "(", "target_predicate", "[", "\"noun\"", "]", ")", ")", "\n", "for", "target_size", ",", "target_color", ",", "target_shape", "in", "possible_target_objects", ":", "\n", "                    ", "relevant_situations", "=", "situation_specifications", "[", "target_shape", "]", "[", "target_color", "]", "[", "target_size", "]", "\n", "num_relevant_situations", "=", "len", "(", "relevant_situations", ")", "\n", "idx_to_visualize", "=", "random", ".", "sample", "(", "[", "i", "for", "i", "in", "range", "(", "num_relevant_situations", ")", "]", ",", "k", "=", "1", ")", ".", "pop", "(", ")", "\n", "\n", "if", "split_type", "==", "\"uniform\"", ":", "\n", "                        ", "idx_for_train", "=", "random", ".", "sample", "(", "[", "i", "for", "i", "in", "range", "(", "num_relevant_situations", ")", "]", ",", "k", "=", "int", "(", "\n", "num_relevant_situations", "*", "train_percentage", ")", ")", "\n", "idx_for_train", "=", "set", "(", "idx_for_train", ")", "\n", "", "for", "i", ",", "relevant_situation", "in", "enumerate", "(", "relevant_situations", ")", ":", "\n", "                        ", "visualize", "=", "False", "\n", "if", "(", "example_count", "+", "1", ")", "%", "10000", "==", "0", ":", "\n", "                            ", "logger", ".", "info", "(", "\"Number of examples: {}\"", ".", "format", "(", "example_count", "+", "1", ")", ")", "\n", "", "if", "max_examples", ":", "\n", "                            ", "if", "example_count", ">=", "max_examples", ":", "\n", "                                ", "break", "\n", "", "", "self", ".", "initialize_world_from_spec", "(", "relevant_situation", ",", "\n", "referred_size", "=", "target_predicate", "[", "\"size\"", "]", ",", "\n", "referred_color", "=", "target_predicate", "[", "\"color\"", "]", ",", "\n", "referred_shape", "=", "target_predicate", "[", "\"noun\"", "]", ",", "\n", "actual_size", "=", "target_size", ",", "\n", "sample_percentage", "=", "other_objects_sample_percentage", ",", "\n", "min_other_objects", "=", "min_other_objects", "\n", ")", "\n", "situation", "=", "self", ".", "_world", ".", "get_current_situation", "(", ")", "\n", "assert", "situation", ".", "direction_to_target", "==", "relevant_situation", "[", "\"direction_to_target\"", "]", "\n", "assert", "situation", ".", "distance_to_target", "==", "relevant_situation", "[", "\"distance_to_target\"", "]", "\n", "target_commands", ",", "target_situations", ",", "target_action", "=", "self", ".", "demonstrate_command", "(", "\n", "derivation", ",", "initial_situation", "=", "situation", ")", "\n", "if", "i", "==", "idx_to_visualize", ":", "\n", "                            ", "visualize", "=", "True", "\n", "", "if", "visualized_per_template", ">=", "visualize_per_template", ":", "\n", "                            ", "visualize", "=", "False", "\n", "", "if", "adverb", "and", "visualized_per_template", "<=", "visualize_per_template", ":", "\n", "                            ", "visualize", "=", "True", "\n", "", "if", "split_type", "==", "\"uniform\"", ":", "\n", "                            ", "if", "i", "in", "idx_for_train", ":", "\n", "                                ", "splits", "=", "[", "\"train\"", "]", "\n", "", "else", ":", "\n", "                                ", "splits", "=", "[", "\"test\"", "]", "\n", "", "", "elif", "split_type", "==", "\"generalization\"", ":", "\n", "                            ", "splits", "=", "self", ".", "assign_splits", "(", "target_size", ",", "target_color", ",", "target_shape", ",", "target_action", ",", "\n", "situation", ".", "direction_to_target", ",", "target_predicate", ",", "\n", "self", ".", "_vocabulary", ".", "translate_word", "(", "adverb", ")", ")", "\n", "if", "len", "(", "splits", ")", "==", "0", ":", "\n", "                                ", "splits", "=", "[", "\"train\"", "]", "\n", "", "elif", "len", "(", "splits", ")", ">", "1", ":", "\n", "                                ", "dropped_examples", "+=", "1", "\n", "self", ".", "_world", ".", "clear_situation", "(", ")", "\n", "continue", "\n", "", "else", ":", "\n", "                                ", "if", "split_type", "==", "\"generalization\"", ":", "\n", "                                    ", "if", "visualized_per_split", "[", "splits", "[", "0", "]", "]", "<=", "visualize_per_split", ":", "\n", "                                        ", "visualized_per_split", "[", "splits", "[", "0", "]", "]", "+=", "1", "\n", "visualize", "=", "True", "\n", "", "", "", "", "elif", "split_type", "==", "\"target_lengths\"", ":", "\n", "                            ", "if", "len", "(", "target_commands", ")", ">", "cut_off_target_length", ":", "\n", "                                ", "splits", "=", "[", "\"test\"", "]", "\n", "", "else", ":", "\n", "                                ", "splits", "=", "[", "\"train\"", "]", "\n", "", "", "else", ":", "\n", "                            ", "raise", "ValueError", "(", "\"Unknown split_type in .get_data_pairs().\"", ")", "\n", "", "self", ".", "fill_example", "(", "command", "=", "derivation", ".", "words", "(", ")", ",", "derivation", "=", "derivation", ",", "\n", "situation", "=", "situation", ",", "target_commands", "=", "target_commands", ",", "\n", "verb_in_command", "=", "target_action", ",", "target_predicate", "=", "target_predicate", ",", "\n", "visualize", "=", "visualize", ",", "adverb", "=", "adverb", ",", "splits", "=", "splits", ")", "\n", "for", "split", "in", "splits", ":", "\n", "                            ", "self", ".", "_template_identifiers", "[", "split", "]", ".", "append", "(", "template_num", ")", "\n", "", "example_count", "+=", "1", "\n", "if", "visualize", ":", "\n", "                            ", "visualized_per_template", "+=", "1", "\n", "", "self", ".", "_world", ".", "clear_situation", "(", ")", "\n", "", "", "", "", "logger", ".", "info", "(", "\"Dropped {} examples due to belonging to multiple splits.\"", ".", "format", "(", "dropped_examples", ")", ")", "\n", "if", "split_type", "==", "\"generalization\"", ":", "\n", "            ", "self", ".", "make_test_set", "(", "percentage", "=", "(", "1", "-", "self", ".", "_percentage_train", ")", ",", "type_set", "=", "\"test\"", ")", "\n", "", "logger", ".", "info", "(", "\"Discarding equivalent examples, may take a while...\"", ")", "\n", "equivalent_examples", "=", "self", ".", "discard_equivalent_examples", "(", ")", "\n", "logger", ".", "info", "(", "\"Discarded {} examples from the test set that were already in the training set.\"", ".", "format", "(", "\n", "equivalent_examples", ")", ")", "\n", "\n", "if", "make_dev_set", ":", "\n", "            ", "self", ".", "make_test_set", "(", "percentage", "=", "self", ".", "_percentage_dev", ",", "type_set", "=", "\"dev\"", ")", "\n", "\n", "", "if", "k_shot_generalization", ">", "0", ":", "\n", "            ", "self", ".", "move_k_examples_to_train", "(", "k_shot_generalization", ",", "split", "=", "\"adverb_1\"", ")", "\n", "\n", "# restore situation", "\n", "", "self", ".", "initialize_world", "(", "current_situation", ",", "mission", "=", "current_mission", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.assign_splits": [[1384, 1414], ["splits.append", "splits.append", "splits.append", "splits.append", "splits.append", "splits.append", "splits.append", "dataset.GroundedScan._vocabulary.translate_word", "dataset.GroundedScan._vocabulary.translate_word", "dataset.GroundedScan._vocabulary.translate_meaning", "dataset.GroundedScan._vocabulary.translate_meaning"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_meaning", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.vocabulary.Vocabulary.translate_meaning"], ["", "def", "assign_splits", "(", "self", ",", "target_size", ":", "str", ",", "target_color", ":", "str", ",", "target_shape", ":", "str", ",", "verb_in_command", ":", "str", ",", "\n", "direction_to_target", ":", "str", ",", "referred_target", ":", "dict", ",", "manner", ":", "str", ")", ":", "\n", "        ", "splits", "=", "[", "]", "\n", "# Experiment 1: visual generalization, hold out all red squares as targets.", "\n", "if", "target_color", "==", "\"red\"", "and", "target_shape", "==", "\"square\"", ":", "\n", "            ", "splits", ".", "append", "(", "\"visual\"", ")", "\n", "# Experiment 2: situational generalization, hold out all directions of agent to target = South-West.", "\n", "", "if", "direction_to_target", "==", "\"sw\"", ":", "\n", "            ", "splits", ".", "append", "(", "\"situational_1\"", ")", "\n", "# Experiment 3: situational generalization, hold out all situations where a circle of size 2 is referred to", "\n", "# as the small circle.", "\n", "", "if", "self", ".", "_vocabulary", ".", "translate_word", "(", "referred_target", "[", "\"size\"", "]", ")", "==", "\"small\"", "and", "target_shape", "==", "\"circle\"", "and", "target_size", "==", "2", ":", "\n", "            ", "splits", ".", "append", "(", "\"situational_2\"", ")", "\n", "# Experiment 4: contextual generalization, hold out all situations where interaction with a red square of", "\n", "# size 3 is required.", "\n", "", "if", "self", ".", "_vocabulary", ".", "translate_word", "(", "verb_in_command", ")", "==", "\"push\"", "and", "target_shape", "==", "\"square\"", "and", "target_size", "==", "3", ":", "\n", "            ", "splits", ".", "append", "(", "\"contextual\"", ")", "\n", "# Experiment 5: generalize adverb to new situations.", "\n", "", "if", "manner", "==", "\"cautiously\"", ":", "\n", "            ", "splits", ".", "append", "(", "\"adverb_1\"", ")", "\n", "# Experiment 6: generalize adverb to new verb 'pull'.", "\n", "", "if", "(", "verb_in_command", "==", "self", ".", "_vocabulary", ".", "translate_meaning", "(", "\"pull\"", ")", "\n", "and", "manner", "==", "\"while spinning\"", ")", ":", "\n", "            ", "splits", ".", "append", "(", "\"adverb_2\"", ")", "\n", "# Experiment 7: visual gen. easier, hold out all yellow squares as targets if also yellow in referred target.", "\n", "", "if", "(", "self", ".", "_vocabulary", ".", "translate_meaning", "(", "\"yellow\"", ")", "==", "referred_target", "[", "\"color\"", "]", "and", "\n", "target_color", "==", "\"yellow\"", "and", "target_shape", "==", "\"square\"", ")", ":", "\n", "            ", "splits", ".", "append", "(", "\"visual_easier\"", ")", "\n", "", "return", "splits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.__main__.main": [[17, 224], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "vars", "argparse.ArgumentParser.parse_args", "NotImplementedError", "os.path.exists", "os.path.join", "GroundedScan.dataset.GroundedScan", "GroundedScan.load_dataset_from_file.get_data_pairs", "logger.info", "GroundedScan.load_dataset_from_file.save_dataset_statistics", "GroundedScan.load_dataset_from_file.save_dataset", "GroundedScan.load_dataset_from_file.visualize_data_examples", "logger.info", "os.getcwd", "os.path.exists", "os.mkdir", "flags[].split", "flags[].split", "flags[].split", "flags[].split", "GroundedScan.load_dataset_from_file.save_dataset_statistics", "flags[].split", "flags[].split", "flags[].split", "GroundedScan.load_dataset_from_file.save_dataset_statistics", "GroundedScan.load_dataset_from_file.save_dataset_statistics", "logger.info", "logger.info", "GroundedScan.dataset.GroundedScan.load_dataset_from_file", "GroundedScan.load_dataset_from_file.visualize_prediction", "logger.info", "flags[].split", "xlwt.Workbook", "os.path.join", "xlwt.Workbook.save", "logger.info", "GroundedScan.load_dataset_from_file.save_dataset_statistics", "ValueError", "os.path.join", "logger.info", "GroundedScan.dataset.GroundedScan.load_dataset_from_file", "GroundedScan.load_dataset_from_file.position_analysis", "logger.info", "logger.info", "GroundedScan.dataset_test.run_all_tests", "GroundedScan.load_dataset_from_file.count_equivalent_examples", "os.path.join", "flags[].split", "ValueError", "logger.info", "GroundedScan.dataset.GroundedScan.load_dataset_from_file", "os.path.join", "GroundedScan.load_dataset_from_file.error_analysis", "logger.info", "logger.info", "file.split", "os.path.exists", "os.mkdir", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.get_data_pairs", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.save_dataset_statistics", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.save_dataset", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.visualize_data_examples", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.save_dataset_statistics", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.save_dataset_statistics", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.save_dataset_statistics", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.load_dataset_from_file", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.visualize_prediction", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.save", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.save_dataset_statistics", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.load_dataset_from_file", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.position_analysis", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset_test.run_all_tests", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.count_equivalent_examples", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.load_dataset_from_file", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.dataset.GroundedScan.error_analysis"], ["if", "use_cuda", ":", "\n", "    ", "logger", ".", "info", "(", "\"Using CUDA.\"", ")", "\n", "logger", ".", "info", "(", "\"Cuda version: {}\"", ".", "format", "(", "torch", ".", "version", ".", "cuda", ")", ")", "\n", "\n", "", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Sequence to sequence models for Grounded SCAN\"", ")", "\n", "\n", "# General arguments", "\n", "parser", ".", "add_argument", "(", "\"--mode\"", ",", "type", "=", "str", ",", "default", "=", "\"run_tests\"", ",", "help", "=", "\"train, test or predict\"", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--output_directory\"", ",", "type", "=", "str", ",", "default", "=", "\"output\"", ",", "help", "=", "\"In this directory the models will be \"", "\n", "\"saved. Will be created if doesn't exist.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--resume_from_file\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "help", "=", "\"Full path to previously saved model to load.\"", ")", "\n", "\n", "# Data arguments", "\n", "parser", ".", "add_argument", "(", "\"--split\"", ",", "type", "=", "str", ",", "default", "=", "\"test\"", ",", "help", "=", "\"Which split to get from Grounded Scan.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data_directory\"", ",", "type", "=", "str", ",", "default", "=", "\"data/uniform_dataset\"", ",", "help", "=", "\"Path to folder with data.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--input_vocab_path\"", ",", "type", "=", "str", ",", "default", "=", "\"training_input_vocab.txt\"", ",", "\n", "help", "=", "\"Path to file with input vocabulary as saved by Vocabulary class in gSCAN_dataset.py\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--target_vocab_path\"", ",", "type", "=", "str", ",", "default", "=", "\"training_target_vocab.txt\"", ",", "\n", "help", "=", "\"Path to file with target vocabulary as saved by Vocabulary class in gSCAN_dataset.py\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--generate_vocabularies\"", ",", "dest", "=", "\"generate_vocabularies\"", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to generate vocabularies based on the data.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--load_vocabularies\"", ",", "dest", "=", "\"generate_vocabularies\"", ",", "default", "=", "True", ",", "action", "=", "\"store_false\"", ",", "\n", "help", "=", "\"Whether to use previously saved vocabularies.\"", ")", "\n", "\n", "# Training and learning arguments", "\n", "parser", ".", "add_argument", "(", "\"--training_batch_size\"", ",", "type", "=", "int", ",", "default", "=", "50", ")", "\n", "parser", ".", "add_argument", "(", "\"--k\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"How many examples from the adverb_1 split to move to train.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--test_batch_size\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"Currently only 1 supported due to decoder.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_training_examples\"", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "\"If None all are used.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--learning_rate\"", ",", "type", "=", "float", ",", "default", "=", "0.001", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay'", ",", "type", "=", "float", ",", "default", "=", "0.9", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_steps'", ",", "type", "=", "float", ",", "default", "=", "20000", ")", "\n", "parser", ".", "add_argument", "(", "\"--adam_beta_1\"", ",", "type", "=", "float", ",", "default", "=", "0.9", ")", "\n", "parser", ".", "add_argument", "(", "\"--adam_beta_2\"", ",", "type", "=", "float", ",", "default", "=", "0.999", ")", "\n", "parser", ".", "add_argument", "(", "\"--print_every\"", ",", "type", "=", "int", ",", "default", "=", "100", ")", "\n", "parser", ".", "add_argument", "(", "\"--evaluate_every\"", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "\"How often to evaluate the model by decoding the \"", "\n", "\"test set (without teacher forcing).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_training_iterations\"", ",", "type", "=", "int", ",", "default", "=", "100000", ")", "\n", "parser", ".", "add_argument", "(", "\"--weight_target_loss\"", ",", "type", "=", "float", ",", "default", "=", "0.3", ",", "help", "=", "\"Only used if --auxiliary_task set.\"", ")", "\n", "\n", "# Testing and predicting arguments", "\n", "parser", ".", "add_argument", "(", "\"--max_testing_examples\"", ",", "type", "=", "int", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\"--splits\"", ",", "type", "=", "str", ",", "default", "=", "\"test\"", ",", "help", "=", "\"comma-separated list of splits to predict for.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_decoding_steps\"", ",", "type", "=", "int", ",", "default", "=", "30", ",", "help", "=", "\"After 30 decoding steps, the decoding process \"", "\n", "\"is stopped regardless of whether an EOS token \"", "\n", "\"was generated.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--output_file_name\"", ",", "type", "=", "str", ",", "default", "=", "\"predict.json\"", ")", "\n", "\n", "# Situation Encoder arguments", "\n", "parser", ".", "add_argument", "(", "\"--simple_situation_representation\"", ",", "dest", "=", "\"simple_situation_representation\"", ",", "default", "=", "True", ",", "\n", "action", "=", "\"store_true\"", ",", "help", "=", "\"Represent the situation with 1 vector per grid cell. \"", "\n", "\"For more information, read grounded SCAN documentation.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--image_situation_representation\"", ",", "dest", "=", "\"simple_situation_representation\"", ",", "default", "=", "False", ",", "\n", "action", "=", "\"store_false\"", ",", "help", "=", "\"Represent the situation with the full gridworld RGB image. \"", "\n", "\"For more information, read grounded SCAN documentation.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--cnn_hidden_num_channels\"", ",", "type", "=", "int", ",", "default", "=", "50", ")", "\n", "parser", ".", "add_argument", "(", "\"--cnn_kernel_size\"", ",", "type", "=", "int", ",", "default", "=", "7", ",", "help", "=", "\"Size of the largest filter in the world state \"", "\n", "\"model.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--cnn_dropout_p\"", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "\"Dropout applied to the output features of the \"", "\n", "\"world state model.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--auxiliary_task\"", ",", "dest", "=", "\"auxiliary_task\"", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"If set to true, the model predicts the target location from the joint attention over the \"", "\n", "\"input instruction and world state.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_auxiliary_task\"", ",", "dest", "=", "\"auxiliary_task\"", ",", "default", "=", "True", ",", "action", "=", "\"store_false\"", ")", "\n", "\n", "# Command Encoder arguments", "\n", "parser", ".", "add_argument", "(", "\"--embedding_dimension\"", ",", "type", "=", "int", ",", "default", "=", "25", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_encoder_layers\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--encoder_hidden_size\"", ",", "type", "=", "int", ",", "default", "=", "100", ")", "\n", "parser", ".", "add_argument", "(", "\"--encoder_dropout_p\"", ",", "type", "=", "float", ",", "default", "=", "0.3", ",", "help", "=", "\"Dropout on instruction embeddings and LSTM.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--encoder_bidirectional\"", ",", "dest", "=", "\"encoder_bidirectional\"", ",", "default", "=", "True", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--encoder_unidirectional\"", ",", "dest", "=", "\"encoder_bidirectional\"", ",", "default", "=", "False", ",", "action", "=", "\"store_false\"", ")", "\n", "\n", "# Decoder arguments", "\n", "parser", ".", "add_argument", "(", "\"--num_decoder_layers\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--attention_type\"", ",", "type", "=", "str", ",", "default", "=", "'bahdanau'", ",", "choices", "=", "[", "'bahdanau'", ",", "'luong'", "]", ",", "\n", "help", "=", "\"Luong not properly implemented.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--decoder_dropout_p\"", ",", "type", "=", "float", ",", "default", "=", "0.3", ",", "help", "=", "\"Dropout on decoder embedding and LSTM.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--decoder_hidden_size\"", ",", "type", "=", "int", ",", "default", "=", "100", ")", "\n", "parser", ".", "add_argument", "(", "\"--conditional_attention\"", ",", "dest", "=", "\"conditional_attention\"", ",", "default", "=", "True", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"If set to true joint attention over the world state conditioned on the input instruction is\"", "\n", "\" used.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_conditional_attention\"", ",", "dest", "=", "\"conditional_attention\"", ",", "default", "=", "False", ",", "action", "=", "\"store_false\"", ")", "\n", "\n", "# Other arguments", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "42", ")", "\n", "\n", "\n", "def", "main", "(", "flags", ")", ":", "\n", "    ", "for", "argument", ",", "value", "in", "flags", ".", "items", "(", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"{}: {}\"", ".", "format", "(", "argument", ",", "value", ")", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "flags", "[", "\"output_directory\"", "]", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "flags", "[", "\"output_directory\"", "]", ")", ")", "\n", "\n", "", "if", "not", "flags", "[", "\"simple_situation_representation\"", "]", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Full RGB input image not implemented. Implement or set \"", "\n", "\"--simple_situation_representation\"", ")", "\n", "# Some checks on the flags", "\n", "", "if", "flags", "[", "\"generate_vocabularies\"", "]", ":", "\n", "        ", "assert", "flags", "[", "\"input_vocab_path\"", "]", "and", "flags", "[", "\"target_vocab_path\"", "]", ",", "\"Please specify paths to vocabularies to save.\"", "\n", "\n", "", "if", "flags", "[", "\"test_batch_size\"", "]", ">", "1", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Test batch size larger than 1 not implemented.\"", ")", "\n", "\n", "", "data_path", "=", "os", ".", "path", ".", "join", "(", "flags", "[", "\"data_directory\"", "]", ",", "\"dataset.txt\"", ")", "\n", "if", "flags", "[", "\"mode\"", "]", "==", "\"train\"", ":", "\n", "        ", "train", "(", "data_path", "=", "data_path", ",", "**", "flags", ")", "\n", "", "elif", "flags", "[", "\"mode\"", "]", "==", "\"test\"", ":", "\n", "        ", "assert", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "flags", "[", "\"data_directory\"", "]", ",", "flags", "[", "\"input_vocab_path\"", "]", ")", ")", "and", "os", ".", "path", ".", "exists", "(", "\n", "os", ".", "path", ".", "join", "(", "flags", "[", "\"data_directory\"", "]", ",", "flags", "[", "\"target_vocab_path\"", "]", ")", ")", ",", "\"No vocabs found at {} and {}\"", ".", "format", "(", "flags", "[", "\"input_vocab_path\"", "]", ",", "flags", "[", "\"target_vocab_path\"", "]", ")", "\n", "splits", "=", "flags", "[", "\"splits\"", "]", ".", "split", "(", "\",\"", ")", "\n", "for", "split", "in", "splits", ":", "\n", "            ", "logger", ".", "info", "(", "\"Loading {} dataset split...\"", ".", "format", "(", "split", ")", ")", "\n", "test_set", "=", "GroundedScanDataset", "(", "data_path", ",", "flags", "[", "\"data_directory\"", "]", ",", "split", "=", "split", ",", "\n", "input_vocabulary_file", "=", "flags", "[", "\"input_vocab_path\"", "]", ",", "\n", "target_vocabulary_file", "=", "flags", "[", "\"target_vocab_path\"", "]", ",", "generate_vocabulary", "=", "False", ",", "\n", "k", "=", "flags", "[", "\"k\"", "]", ")", "\n", "test_set", ".", "read_dataset", "(", "max_examples", "=", "None", ",", "\n", "simple_situation_representation", "=", "flags", "[", "\"simple_situation_representation\"", "]", ")", "\n", "logger", ".", "info", "(", "\"Done Loading {} dataset split.\"", ".", "format", "(", "flags", "[", "\"split\"", "]", ")", ")", "\n", "logger", ".", "info", "(", "\"  Loaded {} examples.\"", ".", "format", "(", "test_set", ".", "num_examples", ")", ")", "\n", "logger", ".", "info", "(", "\"  Input vocabulary size: {}\"", ".", "format", "(", "test_set", ".", "input_vocabulary_size", ")", ")", "\n", "logger", ".", "info", "(", "\"  Most common input words: {}\"", ".", "format", "(", "test_set", ".", "input_vocabulary", ".", "most_common", "(", "5", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"  Output vocabulary size: {}\"", ".", "format", "(", "test_set", ".", "target_vocabulary_size", ")", ")", "\n", "logger", ".", "info", "(", "\"  Most common target words: {}\"", ".", "format", "(", "test_set", ".", "target_vocabulary", ".", "most_common", "(", "5", ")", ")", ")", "\n", "\n", "model", "=", "Model", "(", "input_vocabulary_size", "=", "test_set", ".", "input_vocabulary_size", ",", "\n", "target_vocabulary_size", "=", "test_set", ".", "target_vocabulary_size", ",", "\n", "num_cnn_channels", "=", "test_set", ".", "image_channels", ",", "\n", "input_padding_idx", "=", "test_set", ".", "input_vocabulary", ".", "pad_idx", ",", "\n", "target_pad_idx", "=", "test_set", ".", "target_vocabulary", ".", "pad_idx", ",", "\n", "target_eos_idx", "=", "test_set", ".", "target_vocabulary", ".", "eos_idx", ",", "\n", "**", "flags", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "if", "use_cuda", "else", "model", "\n", "\n", "# Load model and vocabularies if resuming.", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "flags", "[", "\"resume_from_file\"", "]", ")", ",", "\"No checkpoint found at {}\"", ".", "format", "(", "flags", "[", "\"resume_from_file\"", "]", ")", "\n", "logger", ".", "info", "(", "\"Loading checkpoint from file at '{}'\"", ".", "format", "(", "flags", "[", "\"resume_from_file\"", "]", ")", ")", "\n", "model", ".", "load_model", "(", "flags", "[", "\"resume_from_file\"", "]", ")", "\n", "start_iteration", "=", "model", ".", "trained_iterations", "\n", "logger", ".", "info", "(", "\"Loaded checkpoint '{}' (iter {})\"", ".", "format", "(", "flags", "[", "\"resume_from_file\"", "]", ",", "start_iteration", ")", ")", "\n", "output_file_name", "=", "\"_\"", ".", "join", "(", "[", "split", ",", "flags", "[", "\"output_file_name\"", "]", "]", ")", "\n", "output_file_path", "=", "os", ".", "path", ".", "join", "(", "flags", "[", "\"output_directory\"", "]", ",", "output_file_name", ")", "\n", "output_file", "=", "predict_and_save", "(", "dataset", "=", "test_set", ",", "model", "=", "model", ",", "output_file_path", "=", "output_file_path", ",", "**", "flags", ")", "\n", "logger", ".", "info", "(", "\"Saved predictions to {}\"", ".", "format", "(", "output_file", ")", ")", "\n", "", "", "elif", "flags", "[", "\"mode\"", "]", "==", "\"predict\"", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Wrong value for parameters --mode ({}).\"", ".", "format", "(", "flags", "[", "\"mode\"", "]", ")", ")", "\n", "\n", "\n", "", "", "if", "__name__", "==", "\"__main__\"", ":", "\n", "    ", "input_flags", "=", "vars", "(", "parser", ".", "parse_args", "(", ")", ")", "\n", "main", "(", "flags", "=", "input_flags", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.helpers.topo_sort": [[12, 29], ["list", "list", "len", "list.remove", "out.append", "len", "any"], "function", ["None"], ["    ", "\"\"\"\n    Create a sequence mask that masks out all indices larger than some sequence length as defined by\n    sequence_lengths entries.\n\n    :param sequence_lengths: [batch_size] sequence lengths per example in batch\n    :param max_len: int defining the maximum sequence length in the batch\n    :return: [batch_size, max_len] boolean mask\n    \"\"\"", "\n", "if", "max_len", "is", "None", ":", "\n", "        ", "max_len", "=", "sequence_lengths", ".", "data", ".", "max", "(", ")", "\n", "", "batch_size", "=", "sequence_lengths", ".", "size", "(", "0", ")", "\n", "sequence_range", "=", "torch", ".", "arange", "(", "0", ",", "max_len", ")", ".", "long", "(", ")", ".", "to", "(", "device", "=", "device", ")", "\n", "\n", "# [batch_size, max_len]", "\n", "sequence_range_expand", "=", "sequence_range", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "batch_size", ",", "max_len", ")", "\n", "\n", "# [batch_size, max_len]", "\n", "seq_length_expand", "=", "(", "sequence_lengths", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "sequence_range_expand", ")", ")", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.helpers.random_weights": [[31, 33], ["numpy.random.random"], "function", ["None"], ["# [batch_size, max_len](boolean array of which elements to include)", "\n", "return", "sequence_range_expand", "<", "seq_length_expand", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.helpers.accept_weights": [[35, 37], ["numpy.ones"], "function", ["None"], ["", "def", "log_parameters", "(", "model", ":", "torch", ".", "nn", ".", "Module", ")", "->", "{", "}", ":", "\n", "    ", "model_parameters", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", "\n", "n_params", "=", "sum", "(", "[", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "model_parameters", "]", ")", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.helpers.plan_step": [[39, 49], ["None"], "function", ["None"], ["for", "name", ",", "p", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "p", ".", "requires_grad", ":", "\n", "            ", "logger", ".", "info", "(", "\"%s : %s\"", "%", "(", "name", ",", "list", "(", "p", ".", "size", "(", ")", ")", ")", ")", "\n", "\n", "\n", "", "", "", "def", "sequence_accuracy", "(", "prediction", ":", "List", "[", "int", "]", ",", "target", ":", "List", "[", "int", "]", ")", "->", "float", ":", "\n", "    ", "correct", "=", "0", "\n", "total", "=", "0", "\n", "prediction", "=", "prediction", ".", "copy", "(", ")", "\n", "target", "=", "target", ".", "copy", "(", ")", "\n", "if", "len", "(", "prediction", ")", "<", "len", "(", "target", ")", ":", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.helpers.one_hot": [[51, 55], ["numpy.zeros"], "function", ["None"], ["prediction", ".", "extend", "(", "[", "0", "]", "*", "difference", ")", "\n", "", "if", "len", "(", "target", ")", "<", "len", "(", "prediction", ")", ":", "\n", "        ", "difference", "=", "len", "(", "prediction", ")", "-", "len", "(", "target", ")", "\n", "target", ".", "extend", "(", "[", "-", "1", "]", "*", "difference", ")", "\n", "", "for", "i", ",", "target_int", "in", "enumerate", "(", "target", ")", ":", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.helpers.generate_possible_object_names": [[57, 61], ["None"], "function", ["None"], ["            ", "break", "\n", "", "prediction_int", "=", "prediction", "[", "i", "]", "\n", "if", "prediction_int", "==", "target_int", ":", "\n", "            ", "correct", "+=", "1", "\n", "", "total", "+=", "1", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.helpers.save_counter": [[63, 67], ["file.write", "counter.items", "file.write"], "function", ["None"], ["        ", "return", "0.", "\n", "", "return", "(", "correct", "/", "total", ")", "*", "100", "\n", "", ""]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.helpers.bar_plot": [[69, 90], ["list", "list.sort", "numpy.arange", "matplotlib.bar", "matplotlib.gcf().subplots_adjust", "matplotlib.xticks", "matplotlib.ylabel", "matplotlib.title", "matplotlib.savefig", "matplotlib.close", "values.items", "len", "len", "len", "len", "matplotlib.gcf"], "function", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.close"], []], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.helpers.grouped_bar_plot": [[92, 122], ["list", "numpy.arange", "matplotlib.subplots", "ax.bar", "ax.bar", "matplotlib.gcf().subplots_adjust", "matplotlib.xticks", "matplotlib.ylabel", "matplotlib.title", "ax.legend", "matplotlib.savefig", "matplotlib.close", "values.items", "list.sort", "len", "len", "len", "len", "len", "len", "matplotlib.gcf"], "function", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.close"], []], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.helpers.numpy_array_to_image": [[124, 126], ["matplotlib.imsave"], "function", ["None"], []], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.GroundedScan.helpers.image_to_numpy_array": [[128, 131], ["cv2.imread", "numpy.flip"], "function", ["None"], []], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.wrappers.ReseedWrapper.__init__": [[18, 22], ["list", "super().__init__"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.__init__"], ["def", "__init__", "(", "self", ",", "env", ",", "seeds", "=", "[", "0", "]", ",", "seed_idx", "=", "0", ")", ":", "\n", "        ", "self", ".", "seeds", "=", "list", "(", "seeds", ")", "\n", "self", ".", "seed_idx", "=", "seed_idx", "\n", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.wrappers.ReseedWrapper.reset": [[23, 28], ["wrappers.ReseedWrapper.env.seed", "wrappers.ReseedWrapper.env.reset", "len"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv.seed", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "seed", "=", "self", ".", "seeds", "[", "self", ".", "seed_idx", "]", "\n", "self", ".", "seed_idx", "=", "(", "self", ".", "seed_idx", "+", "1", ")", "%", "len", "(", "self", ".", "seeds", ")", "\n", "self", ".", "env", ".", "seed", "(", "seed", ")", "\n", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.wrappers.ReseedWrapper.step": [[29, 32], ["wrappers.ReseedWrapper.env.step"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.wrappers.ActionBonus.__init__": [[40, 43], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.__init__"], ["def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "counts", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.wrappers.ActionBonus.step": [[44, 63], ["wrappers.ActionBonus.env.step", "tuple", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "\n", "env", "=", "self", ".", "unwrapped", "\n", "tup", "=", "(", "tuple", "(", "env", ".", "agent_pos", ")", ",", "env", ".", "agent_dir", ",", "action", ")", "\n", "\n", "# Get the count for this (s,a) pair", "\n", "pre_count", "=", "0", "\n", "if", "tup", "in", "self", ".", "counts", ":", "\n", "            ", "pre_count", "=", "self", ".", "counts", "[", "tup", "]", "\n", "\n", "# Update the count for this (s,a) pair", "\n", "", "new_count", "=", "pre_count", "+", "1", "\n", "self", ".", "counts", "[", "tup", "]", "=", "new_count", "\n", "\n", "bonus", "=", "1", "/", "math", ".", "sqrt", "(", "new_count", ")", "\n", "reward", "+=", "bonus", "\n", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.wrappers.ActionBonus.reset": [[64, 66], ["wrappers.ActionBonus.env.reset"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.wrappers.StateBonus.__init__": [[73, 76], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.__init__"], ["def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "counts", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.wrappers.StateBonus.step": [[77, 98], ["wrappers.StateBonus.env.step", "tuple", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "\n", "# Tuple based on which we index the counts", "\n", "# We use the position after an update", "\n", "env", "=", "self", ".", "unwrapped", "\n", "tup", "=", "(", "tuple", "(", "env", ".", "agent_pos", ")", ")", "\n", "\n", "# Get the count for this key", "\n", "pre_count", "=", "0", "\n", "if", "tup", "in", "self", ".", "counts", ":", "\n", "            ", "pre_count", "=", "self", ".", "counts", "[", "tup", "]", "\n", "\n", "# Update the count for this key", "\n", "", "new_count", "=", "pre_count", "+", "1", "\n", "self", ".", "counts", "[", "tup", "]", "=", "new_count", "\n", "\n", "bonus", "=", "1", "/", "math", ".", "sqrt", "(", "new_count", ")", "\n", "reward", "+=", "bonus", "\n", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.wrappers.StateBonus.reset": [[99, 101], ["wrappers.StateBonus.env.reset"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.wrappers.ImgObsWrapper.__init__": [[107, 111], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.__init__"], ["def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "\n", "self", ".", "observation_space", "=", "env", ".", "observation_space", ".", "spaces", "[", "'image'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.wrappers.ImgObsWrapper.observation": [[112, 114], ["None"], "methods", ["None"], ["", "def", "observation", "(", "self", ",", "obs", ")", ":", "\n", "        ", "return", "obs", "[", "'image'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.wrappers.RGBImgObsWrapper.__init__": [[122, 132], ["super().__init__", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.__init__"], ["def", "__init__", "(", "self", ",", "env", ",", "tile_size", "=", "8", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "\n", "self", ".", "tile_size", "=", "tile_size", "\n", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "\n", "high", "=", "255", ",", "\n", "shape", "=", "(", "self", ".", "env", ".", "width", "*", "tile_size", ",", "self", ".", "env", ".", "height", "*", "tile_size", ",", "3", ")", ",", "\n", "dtype", "=", "'uint8'", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.wrappers.RGBImgObsWrapper.observation": [[134, 140], ["env.render"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv.render"], ["", "def", "observation", "(", "self", ",", "obs", ")", ":", "\n", "        ", "env", "=", "self", ".", "unwrapped", "\n", "return", "env", ".", "render", "(", "\n", "mode", "=", "'rgb_array'", ",", "\n", "highlight", "=", "False", ",", "\n", "tile_size", "=", "self", ".", "tile_size", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.wrappers.FullyObsWrapper.__init__": [[147, 155], ["super().__init__", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.__init__"], ["def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "\n", "high", "=", "255", ",", "\n", "shape", "=", "(", "self", ".", "env", ".", "width", ",", "self", ".", "env", ".", "height", ",", "3", ")", ",", "# number of cells", "\n", "dtype", "=", "'uint8'", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.wrappers.FullyObsWrapper.observation": [[157, 167], ["env.grid.encode", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.encode"], ["", "def", "observation", "(", "self", ",", "obs", ")", ":", "\n", "        ", "env", "=", "self", ".", "unwrapped", "\n", "full_grid", "=", "env", ".", "grid", ".", "encode", "(", ")", "\n", "full_grid", "[", "env", ".", "agent_pos", "[", "0", "]", "]", "[", "env", ".", "agent_pos", "[", "1", "]", "]", "=", "np", ".", "array", "(", "[", "\n", "OBJECT_TO_IDX", "[", "'agent'", "]", ",", "\n", "COLOR_TO_IDX", "[", "'red'", "]", ",", "\n", "env", ".", "agent_dir", "\n", "]", ")", "\n", "\n", "return", "full_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.wrappers.FlatObsWrapper.__init__": [[174, 192], ["super().__init__", "functools.reduce", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.__init__"], ["def", "__init__", "(", "self", ",", "env", ",", "maxStrLen", "=", "96", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "\n", "self", ".", "maxStrLen", "=", "maxStrLen", "\n", "self", ".", "numCharCodes", "=", "27", "\n", "\n", "imgSpace", "=", "env", ".", "observation_space", ".", "spaces", "[", "'image'", "]", "\n", "imgSize", "=", "reduce", "(", "operator", ".", "mul", ",", "imgSpace", ".", "shape", ",", "1", ")", "\n", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "\n", "high", "=", "255", ",", "\n", "shape", "=", "(", "1", ",", "imgSize", "+", "self", ".", "numCharCodes", "*", "self", ".", "maxStrLen", ")", ",", "\n", "dtype", "=", "'uint8'", "\n", ")", "\n", "\n", "self", ".", "cachedStr", "=", "None", "\n", "self", ".", "cachedArray", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.wrappers.FlatObsWrapper.observation": [[193, 218], ["numpy.concatenate", "mission.lower.lower.lower", "numpy.zeros", "enumerate", "len", "len", "image.flatten", "wrappers.FlatObsWrapper.cachedArray.flatten", "ord", "ord", "ord", "ord"], "methods", ["None"], ["", "def", "observation", "(", "self", ",", "obs", ")", ":", "\n", "        ", "image", "=", "obs", "[", "'image'", "]", "\n", "mission", "=", "obs", "[", "'mission'", "]", "\n", "\n", "# Cache the last-encoded mission string", "\n", "if", "mission", "!=", "self", ".", "cachedStr", ":", "\n", "            ", "assert", "len", "(", "mission", ")", "<=", "self", ".", "maxStrLen", ",", "'mission string too long ({} chars)'", ".", "format", "(", "len", "(", "mission", ")", ")", "\n", "mission", "=", "mission", ".", "lower", "(", ")", "\n", "\n", "strArray", "=", "np", ".", "zeros", "(", "shape", "=", "(", "self", ".", "maxStrLen", ",", "self", ".", "numCharCodes", ")", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "for", "idx", ",", "ch", "in", "enumerate", "(", "mission", ")", ":", "\n", "                ", "if", "ch", ">=", "'a'", "and", "ch", "<=", "'z'", ":", "\n", "                    ", "chNo", "=", "ord", "(", "ch", ")", "-", "ord", "(", "'a'", ")", "\n", "", "elif", "ch", "==", "' '", ":", "\n", "                    ", "chNo", "=", "ord", "(", "'z'", ")", "-", "ord", "(", "'a'", ")", "+", "1", "\n", "", "assert", "chNo", "<", "self", ".", "numCharCodes", ",", "'%s : %d'", "%", "(", "ch", ",", "chNo", ")", "\n", "strArray", "[", "idx", ",", "chNo", "]", "=", "1", "\n", "\n", "", "self", ".", "cachedStr", "=", "mission", "\n", "self", ".", "cachedArray", "=", "strArray", "\n", "\n", "", "obs", "=", "np", ".", "concatenate", "(", "(", "image", ".", "flatten", "(", ")", ",", "self", ".", "cachedArray", ".", "flatten", "(", ")", ")", ")", "\n", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.wrappers.AgentViewWrapper.__init__": [[224, 241], ["super().__init__", "gym.spaces.Box", "gym.spaces.Dict"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.__init__"], ["def", "__init__", "(", "self", ",", "env", ",", "agent_view_size", "=", "7", ")", ":", "\n", "        ", "super", "(", "AgentViewWrapper", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "\n", "# Override default view size", "\n", "env", ".", "unwrapped", ".", "agent_view_size", "=", "agent_view_size", "\n", "\n", "# Compute observation space with specified view size", "\n", "observation_space", "=", "gym", ".", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "\n", "high", "=", "255", ",", "\n", "shape", "=", "(", "agent_view_size", ",", "agent_view_size", ",", "3", ")", ",", "\n", "dtype", "=", "'uint8'", "\n", ")", "\n", "\n", "# Override the environment's observation space", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Dict", "(", "{", "\n", "'image'", ":", "observation_space", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.wrappers.AgentViewWrapper.reset": [[243, 245], ["wrappers.AgentViewWrapper.env.reset"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.wrappers.AgentViewWrapper.step": [[246, 248], ["wrappers.AgentViewWrapper.env.step"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Window.__init__": [[14, 52], ["PyQt5.QtWidgets.QMainWindow.__init__", "rendering.Window.setWindowTitle", "PyQt5.QtWidgets.QLabel", "rendering.Window.imgLabel.setFrameStyle", "PyQt5.QtWidgets.QTextEdit", "rendering.Window.missionBox.setReadOnly", "rendering.Window.missionBox.setMinimumSize", "PyQt5.QtWidgets.QHBoxLayout", "PyQt5.QtWidgets.QHBoxLayout.addStretch", "PyQt5.QtWidgets.QHBoxLayout.addWidget", "PyQt5.QtWidgets.QHBoxLayout.addStretch", "PyQt5.QtWidgets.QVBoxLayout", "PyQt5.QtWidgets.QVBoxLayout.addLayout", "PyQt5.QtWidgets.QVBoxLayout.addWidget", "PyQt5.QtWidgets.QWidget", "rendering.Window.setCentralWidget", "rendering.Window.mainWidget.setLayout", "rendering.Window.show", "rendering.Window.setFocus"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "setWindowTitle", "(", "'MiniGrid Gym Environment'", ")", "\n", "\n", "# Image label to display the rendering", "\n", "self", ".", "imgLabel", "=", "QLabel", "(", ")", "\n", "self", ".", "imgLabel", ".", "setFrameStyle", "(", "QFrame", ".", "Panel", "|", "QFrame", ".", "Sunken", ")", "\n", "\n", "# Text box for the mission", "\n", "self", ".", "missionBox", "=", "QTextEdit", "(", ")", "\n", "self", ".", "missionBox", ".", "setReadOnly", "(", "True", ")", "\n", "self", ".", "missionBox", ".", "setMinimumSize", "(", "400", ",", "100", ")", "\n", "\n", "# Center the image", "\n", "hbox", "=", "QHBoxLayout", "(", ")", "\n", "hbox", ".", "addStretch", "(", "1", ")", "\n", "hbox", ".", "addWidget", "(", "self", ".", "imgLabel", ")", "\n", "hbox", ".", "addStretch", "(", "1", ")", "\n", "\n", "# Arrange widgets vertically", "\n", "vbox", "=", "QVBoxLayout", "(", ")", "\n", "vbox", ".", "addLayout", "(", "hbox", ")", "\n", "vbox", ".", "addWidget", "(", "self", ".", "missionBox", ")", "\n", "\n", "# Create a main widget for the window", "\n", "self", ".", "mainWidget", "=", "QWidget", "(", "self", ")", "\n", "self", ".", "setCentralWidget", "(", "self", ".", "mainWidget", ")", "\n", "self", ".", "mainWidget", ".", "setLayout", "(", "vbox", ")", "\n", "\n", "# Show the application window", "\n", "self", ".", "show", "(", ")", "\n", "self", ".", "setFocus", "(", ")", "\n", "\n", "self", ".", "closed", "=", "False", "\n", "\n", "# Callback for keyboard events", "\n", "self", ".", "keyDownCb", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Window.closeEvent": [[53, 55], ["None"], "methods", ["None"], ["", "def", "closeEvent", "(", "self", ",", "event", ")", ":", "\n", "        ", "self", ".", "closed", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Window.setPixmap": [[56, 58], ["rendering.Window.imgLabel.setPixmap"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Window.setPixmap"], ["", "def", "setPixmap", "(", "self", ",", "pixmap", ")", ":", "\n", "        ", "self", ".", "imgLabel", ".", "setPixmap", "(", "pixmap", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Window.setText": [[59, 61], ["rendering.Window.missionBox.setPlainText"], "methods", ["None"], ["", "def", "setText", "(", "self", ",", "text", ")", ":", "\n", "        ", "self", ".", "missionBox", ".", "setPlainText", "(", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Window.setKeyDownCb": [[62, 64], ["None"], "methods", ["None"], ["", "def", "setKeyDownCb", "(", "self", ",", "callback", ")", ":", "\n", "        ", "self", ".", "keyDownCb", "=", "callback", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Window.keyPressEvent": [[65, 98], ["rendering.Window.keyDownCb", "e.key", "e.key", "e.key", "e.key", "e.key", "e.key", "e.key", "e.key", "e.key", "e.key", "e.key", "e.key"], "methods", ["None"], ["", "def", "keyPressEvent", "(", "self", ",", "e", ")", ":", "\n", "        ", "if", "self", ".", "keyDownCb", "==", "None", ":", "\n", "            ", "return", "\n", "\n", "", "keyName", "=", "None", "\n", "if", "e", ".", "key", "(", ")", "==", "Qt", ".", "Key_Left", ":", "\n", "            ", "keyName", "=", "'LEFT'", "\n", "", "elif", "e", ".", "key", "(", ")", "==", "Qt", ".", "Key_Right", ":", "\n", "            ", "keyName", "=", "'RIGHT'", "\n", "", "elif", "e", ".", "key", "(", ")", "==", "Qt", ".", "Key_Up", ":", "\n", "            ", "keyName", "=", "'UP'", "\n", "", "elif", "e", ".", "key", "(", ")", "==", "Qt", ".", "Key_Down", ":", "\n", "            ", "keyName", "=", "'DOWN'", "\n", "", "elif", "e", ".", "key", "(", ")", "==", "Qt", ".", "Key_Space", ":", "\n", "            ", "keyName", "=", "'SPACE'", "\n", "", "elif", "e", ".", "key", "(", ")", "==", "Qt", ".", "Key_Return", ":", "\n", "            ", "keyName", "=", "'RETURN'", "\n", "", "elif", "e", ".", "key", "(", ")", "==", "Qt", ".", "Key_Alt", ":", "\n", "            ", "keyName", "=", "'ALT'", "\n", "", "elif", "e", ".", "key", "(", ")", "==", "Qt", ".", "Key_Control", ":", "\n", "            ", "keyName", "=", "'CTRL'", "\n", "", "elif", "e", ".", "key", "(", ")", "==", "Qt", ".", "Key_PageUp", ":", "\n", "            ", "keyName", "=", "'PAGE_UP'", "\n", "", "elif", "e", ".", "key", "(", ")", "==", "Qt", ".", "Key_PageDown", ":", "\n", "            ", "keyName", "=", "'PAGE_DOWN'", "\n", "", "elif", "e", ".", "key", "(", ")", "==", "Qt", ".", "Key_Backspace", ":", "\n", "            ", "keyName", "=", "'BACKSPACE'", "\n", "", "elif", "e", ".", "key", "(", ")", "==", "Qt", ".", "Key_Escape", ":", "\n", "            ", "keyName", "=", "'ESCAPE'", "\n", "\n", "", "if", "keyName", "==", "None", ":", "\n", "            ", "return", "\n", "", "self", ".", "keyDownCb", "(", "keyName", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.__init__": [[101, 112], ["PyQt5.QtGui.QImage", "PyQt5.QtGui.QPainter", "PyQt5.QtWidgets.QApplication", "rendering.Window"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "width", ",", "height", ",", "ownWindow", "=", "False", ")", ":", "\n", "        ", "self", ".", "width", "=", "width", "\n", "self", ".", "height", "=", "height", "\n", "\n", "self", ".", "img", "=", "QImage", "(", "width", ",", "height", ",", "QImage", ".", "Format_RGB888", ")", "\n", "self", ".", "painter", "=", "QPainter", "(", ")", "\n", "\n", "self", ".", "window", "=", "None", "\n", "if", "ownWindow", ":", "\n", "            ", "self", ".", "app", "=", "QApplication", "(", "[", "]", ")", "\n", "self", ".", "window", "=", "Window", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.close": [[113, 118], ["None"], "methods", ["None"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Deallocate resources used\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.beginFrame": [[119, 126], ["rendering.Renderer.painter.begin", "rendering.Renderer.painter.setRenderHint", "rendering.Renderer.painter.setBrush", "rendering.Renderer.painter.drawRect", "PyQt5.QtGui.QColor"], "methods", ["None"], ["", "def", "beginFrame", "(", "self", ")", ":", "\n", "        ", "self", ".", "painter", ".", "begin", "(", "self", ".", "img", ")", "\n", "self", ".", "painter", ".", "setRenderHint", "(", "QPainter", ".", "Antialiasing", ",", "False", ")", "\n", "\n", "# Clear the background", "\n", "self", ".", "painter", ".", "setBrush", "(", "QColor", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "self", ".", "painter", ".", "drawRect", "(", "0", ",", "0", ",", "self", ".", "width", "-", "1", ",", "self", ".", "height", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.endFrame": [[127, 136], ["rendering.Renderer.painter.end", "rendering.Renderer.window.setPixmap", "rendering.Renderer.app.processEvents", "rendering.Renderer.getPixmap"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Window.setPixmap", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.getPixmap"], ["", "def", "endFrame", "(", "self", ")", ":", "\n", "        ", "self", ".", "painter", ".", "end", "(", ")", "\n", "\n", "if", "self", ".", "window", ":", "\n", "            ", "if", "self", ".", "window", ".", "closed", ":", "\n", "                ", "self", ".", "window", "=", "None", "\n", "", "else", ":", "\n", "                ", "self", ".", "window", ".", "setPixmap", "(", "self", ".", "getPixmap", "(", ")", ")", "\n", "self", ".", "app", ".", "processEvents", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.getPixmap": [[137, 139], ["PyQt5.QtGui.QPixmap.fromImage"], "methods", ["None"], ["", "", "", "def", "getPixmap", "(", "self", ")", ":", "\n", "        ", "return", "QPixmap", ".", "fromImage", "(", "self", ".", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.save": [[140, 147], ["rendering.Renderer.app.processEvents", "rendering.Renderer.window.show", "PyQt5.QtGui.QPixmap", "rendering.Renderer.window.mainWidget.render", "PyQt5.QtGui.QPixmap.save", "rendering.Renderer.window.mainWidget.size"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv.render", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.save", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.size"], ["", "def", "save", "(", "self", ",", "save_location", ")", ":", "\n", "        ", "self", ".", "app", ".", "processEvents", "(", ")", "\n", "self", ".", "window", ".", "show", "(", ")", "\n", "pix", "=", "QPixmap", "(", "self", ".", "window", ".", "mainWidget", ".", "size", "(", ")", ")", "\n", "self", ".", "window", ".", "mainWidget", ".", "render", "(", "pix", ")", "\n", "success", "=", "pix", ".", "save", "(", "save_location", ")", "\n", "return", "success", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.getArray": [[148, 159], ["rendering.Renderer.img.bits().asstring", "numpy.frombuffer", "output.reshape.reshape.reshape", "rendering.Renderer.img.bits"], "methods", ["None"], ["", "def", "getArray", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get a numpy array of RGB pixel values.\n        The array will have shape (height, width, 3)\n        \"\"\"", "\n", "\n", "numBytes", "=", "self", ".", "width", "*", "self", ".", "height", "*", "3", "\n", "buf", "=", "self", ".", "img", ".", "bits", "(", ")", ".", "asstring", "(", "numBytes", ")", "\n", "output", "=", "np", ".", "frombuffer", "(", "buf", ",", "dtype", "=", "'uint8'", ")", "\n", "output", "=", "output", ".", "reshape", "(", "(", "self", ".", "height", ",", "self", ".", "width", ",", "3", ")", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.getFullScreen": [[160, 168], ["PyQt5.QtGui.QPixmap", "rendering.Renderer.window.mainWidget.render", "PyQt5.QtGui.QPixmap.toImage", "PyQt5.QtGui.QPixmap.toImage.bits().asstring", "numpy.fromstring().reshape", "PyQt5.QtGui.QPixmap.save", "rendering.Renderer.window.mainWidget.size", "PyQt5.QtGui.QPixmap.toImage.bits", "numpy.fromstring", "PyQt5.QtGui.QPixmap.toImage.width", "PyQt5.QtGui.QPixmap.toImage.height", "PyQt5.QtGui.QPixmap.toImage.width", "PyQt5.QtGui.QPixmap.toImage.height"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv.render", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.save", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.seq2seq.gSCAN_dataset.Vocabulary.size"], ["", "def", "getFullScreen", "(", "self", ",", "temp", ")", ":", "\n", "        ", "pix", "=", "QPixmap", "(", "self", ".", "window", ".", "mainWidget", ".", "size", "(", ")", ")", "\n", "self", ".", "window", ".", "mainWidget", ".", "render", "(", "pix", ")", "\n", "image", "=", "pix", ".", "toImage", "(", ")", "\n", "s", "=", "image", ".", "bits", "(", ")", ".", "asstring", "(", "image", ".", "width", "(", ")", "*", "image", ".", "height", "(", ")", "*", "3", ")", "\n", "arr", "=", "np", ".", "fromstring", "(", "s", ",", "dtype", "=", "'uint8'", ")", ".", "reshape", "(", "(", "image", ".", "width", "(", ")", ",", "image", ".", "height", "(", ")", ",", "3", ")", ")", "\n", "pix", ".", "save", "(", "temp", ")", "\n", "return", "arr", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.push": [[169, 171], ["rendering.Renderer.painter.save"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.save"], ["", "def", "push", "(", "self", ")", ":", "\n", "        ", "self", ".", "painter", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.pop": [[172, 174], ["rendering.Renderer.painter.restore"], "methods", ["None"], ["", "def", "pop", "(", "self", ")", ":", "\n", "        ", "self", ".", "painter", ".", "restore", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.rotate": [[175, 177], ["rendering.Renderer.painter.rotate"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.rotate"], ["", "def", "rotate", "(", "self", ",", "degrees", ")", ":", "\n", "        ", "self", ".", "painter", ".", "rotate", "(", "degrees", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.translate": [[178, 180], ["rendering.Renderer.painter.translate"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.translate"], ["", "def", "translate", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "self", ".", "painter", ".", "translate", "(", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.scale": [[181, 183], ["rendering.Renderer.painter.scale"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.scale"], ["", "def", "scale", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "self", ".", "painter", ".", "scale", "(", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.setLineColor": [[184, 186], ["rendering.Renderer.painter.setPen", "PyQt5.QtGui.QColor"], "methods", ["None"], ["", "def", "setLineColor", "(", "self", ",", "r", ",", "g", ",", "b", ",", "a", "=", "255", ")", ":", "\n", "        ", "self", ".", "painter", ".", "setPen", "(", "QColor", "(", "r", ",", "g", ",", "b", ",", "a", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.setColor": [[187, 189], ["rendering.Renderer.painter.setBrush", "PyQt5.QtGui.QColor"], "methods", ["None"], ["", "def", "setColor", "(", "self", ",", "r", ",", "g", ",", "b", ",", "a", "=", "255", ")", ":", "\n", "        ", "self", ".", "painter", ".", "setBrush", "(", "QColor", "(", "r", ",", "g", ",", "b", ",", "a", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.setLineWidth": [[190, 194], ["rendering.Renderer.painter.pen", "rendering.Renderer.setWidthF", "rendering.Renderer.painter.setPen"], "methods", ["None"], ["", "def", "setLineWidth", "(", "self", ",", "width", ")", ":", "\n", "        ", "pen", "=", "self", ".", "painter", ".", "pen", "(", ")", "\n", "pen", ".", "setWidthF", "(", "width", ")", "\n", "self", ".", "painter", ".", "setPen", "(", "pen", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.drawLine": [[195, 197], ["rendering.Renderer.painter.drawLine"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.drawLine"], ["", "def", "drawLine", "(", "self", ",", "x0", ",", "y0", ",", "x1", ",", "y1", ")", ":", "\n", "        ", "self", ".", "painter", ".", "drawLine", "(", "x0", ",", "y0", ",", "x1", ",", "y1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.drawCircle": [[198, 201], ["PyQt5.QtCore.QPoint", "rendering.Renderer.painter.drawEllipse"], "methods", ["None"], ["", "def", "drawCircle", "(", "self", ",", "x", ",", "y", ",", "r", ")", ":", "\n", "        ", "center", "=", "QPoint", "(", "x", ",", "y", ")", "\n", "self", ".", "painter", ".", "drawEllipse", "(", "center", ",", "r", ",", "r", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.drawPolygon": [[202, 206], ["map", "rendering.Renderer.painter.drawPolygon", "PyQt5.QtGui.QPolygon", "PyQt5.QtCore.QPoint"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.drawPolygon"], ["", "def", "drawPolygon", "(", "self", ",", "points", ")", ":", "\n", "        ", "\"\"\"Takes a list of points (tuples) as input\"\"\"", "\n", "points", "=", "map", "(", "lambda", "p", ":", "QPoint", "(", "p", "[", "0", "]", ",", "p", "[", "1", "]", ")", ",", "points", ")", "\n", "self", ".", "painter", ".", "drawPolygon", "(", "QPolygon", "(", "points", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.drawPolyline": [[207, 211], ["map", "rendering.Renderer.painter.drawPolyline", "PyQt5.QtGui.QPolygon", "PyQt5.QtCore.QPoint"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.drawPolyline"], ["", "def", "drawPolyline", "(", "self", ",", "points", ")", ":", "\n", "        ", "\"\"\"Takes a list of points (tuples) as input\"\"\"", "\n", "points", "=", "map", "(", "lambda", "p", ":", "QPoint", "(", "p", "[", "0", "]", ",", "p", "[", "1", "]", ")", ",", "points", ")", "\n", "self", ".", "painter", ".", "drawPolyline", "(", "QPolygon", "(", "points", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.fillRect": [[212, 214], ["rendering.Renderer.painter.fillRect", "PyQt5.QtCore.QRect", "PyQt5.QtGui.QColor"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.fillRect"], ["", "def", "fillRect", "(", "self", ",", "x", ",", "y", ",", "width", ",", "height", ",", "r", ",", "g", ",", "b", ",", "a", "=", "255", ")", ":", "\n", "        ", "self", ".", "painter", ".", "fillRect", "(", "QRect", "(", "x", ",", "y", ",", "width", ",", "height", ")", ",", "QColor", "(", "r", ",", "g", ",", "b", ",", "a", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.WorldObj.__init__": [[73, 101], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "type", ",", "color", ",", "size", "=", "1", ",", "vector_representation", "=", "None", ",", "object_representation", "=", "None", ",", "target", "=", "False", ",", "\n", "weight", "=", "\"light\"", ")", ":", "\n", "        ", "assert", "type", "in", "OBJECT_TO_IDX", ",", "type", "\n", "assert", "color", "in", "COLOR_TO_IDX", ",", "color", "\n", "assert", "1", "<=", "size", "<=", "4", ",", "\"Sizes outside of range [1,4] not supported.\"", "\n", "self", ".", "type", "=", "type", "\n", "self", ".", "color", "=", "color", "\n", "self", ".", "border_color", "=", "color", "\n", "self", ".", "contains", "=", "None", "\n", "self", ".", "size", "=", "size", "\n", "\n", "# Initial position of the object", "\n", "self", ".", "init_pos", "=", "None", "\n", "\n", "# Current position of the object", "\n", "self", ".", "cur_pos", "=", "None", "\n", "\n", "# Representations", "\n", "self", ".", "vector_representation", "=", "vector_representation", "\n", "self", ".", "object_representation", "=", "object_representation", "\n", "\n", "# Boolean whether an object is a target", "\n", "self", ".", "target", "=", "target", "\n", "\n", "# Determining whether a heavy object can be moved in the next step or not", "\n", "self", ".", "momentum", "=", "0", "\n", "self", ".", "weight", "=", "weight", "\n", "self", ".", "momentum_threshold", "=", "WEIGHT_TO_MOMENTUM", "[", "self", ".", "weight", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.WorldObj.can_overlap": [[102, 105], ["None"], "methods", ["None"], ["", "def", "can_overlap", "(", "self", ")", ":", "\n", "        ", "\"\"\"Can the agent overlap with this?\"\"\"", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.WorldObj.can_pickup": [[106, 109], ["None"], "methods", ["None"], ["", "def", "can_pickup", "(", "self", ")", ":", "\n", "        ", "\"\"\"Can the agent pick this up?\"\"\"", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.WorldObj.can_push": [[110, 113], ["None"], "methods", ["None"], ["", "def", "can_push", "(", "self", ")", ":", "\n", "        ", "\"\"\"Can the agent push this?\"\"\"", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.WorldObj.render": [[114, 117], ["None"], "methods", ["None"], ["", "def", "render", "(", "self", ",", "r", ")", ":", "\n", "        ", "\"\"\"Draw this object with the given renderer\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.WorldObj._set_color": [[118, 124], ["r.setLineColor", "r.setColor"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.setLineColor", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.setColor"], ["", "def", "_set_color", "(", "self", ",", "r", ")", ":", "\n", "        ", "\"\"\"Set the color of this object as the active drawing color\"\"\"", "\n", "c", "=", "COLORS", "[", "self", ".", "color", "]", "\n", "border_color", "=", "COLORS", "[", "self", ".", "border_color", "]", "\n", "r", ".", "setLineColor", "(", "border_color", "[", "0", "]", ",", "border_color", "[", "1", "]", ",", "border_color", "[", "2", "]", ")", "\n", "r", ".", "setColor", "(", "c", "[", "0", "]", ",", "c", "[", "1", "]", ",", "c", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Square.__init__": [[127, 131], ["minigrid.WorldObj.__init__"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.__init__"], ["    ", "def", "__init__", "(", "self", ",", "color", "=", "'grey'", ",", "size", "=", "1", ",", "vector_representation", "=", "None", ",", "object_representation", "=", "None", ",", "target", "=", "False", ",", "\n", "weight", "=", "\"light\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "'square'", ",", "color", ",", "size", ",", "vector_representation", "=", "vector_representation", ",", "\n", "object_representation", "=", "object_representation", ",", "target", "=", "target", ",", "weight", "=", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Square.render": [[132, 141], ["minigrid.Square._set_color", "r.drawPolygon"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.WorldObj._set_color", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.drawPolygon"], ["", "def", "render", "(", "self", ",", "r", ")", ":", "\n", "        ", "self", ".", "_set_color", "(", "r", ")", "\n", "\n", "# TODO: max_size is 4 here hardcoded", "\n", "r", ".", "drawPolygon", "(", "[", "\n", "(", "0", ",", "CELL_PIXELS", "*", "(", "self", ".", "size", "/", "4", ")", ")", ",", "\n", "(", "CELL_PIXELS", "*", "(", "self", ".", "size", "/", "4", ")", ",", "CELL_PIXELS", "*", "(", "self", ".", "size", "/", "4", ")", ")", ",", "\n", "(", "CELL_PIXELS", "*", "(", "self", ".", "size", "/", "4", ")", ",", "0", ")", ",", "\n", "(", "0", ",", "0", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Square.can_pickup": [[143, 145], ["None"], "methods", ["None"], ["", "def", "can_pickup", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Square.can_push": [[146, 148], ["None"], "methods", ["None"], ["", "def", "can_push", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Square.push": [[149, 156], ["None"], "methods", ["None"], ["", "def", "push", "(", "self", ")", ":", "\n", "        ", "self", ".", "momentum", "+=", "1", "\n", "if", "self", ".", "momentum", ">=", "self", ".", "momentum_threshold", ":", "\n", "            ", "self", ".", "momentum", "=", "0", "\n", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Cylinder.__init__": [[159, 162], ["minigrid.WorldObj.__init__"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.__init__"], ["    ", "def", "__init__", "(", "self", ",", "color", "=", "'blue'", ",", "size", "=", "1", ",", "vector_representation", "=", "None", ",", "object_representation", "=", "None", ",", "weight", "=", "\"light\"", ")", ":", "\n", "        ", "super", "(", "Cylinder", ",", "self", ")", ".", "__init__", "(", "'cylinder'", ",", "color", ",", "size", ",", "vector_representation", ",", "\n", "object_representation", "=", "object_representation", ",", "weight", "=", "weight", ")", "\n", "# TODO: generalize sizes", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Cylinder.can_pickup": [[164, 166], ["None"], "methods", ["None"], ["", "def", "can_pickup", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Cylinder.render": [[167, 178], ["minigrid.Cylinder._set_color", "r.drawPolygon"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.WorldObj._set_color", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.drawPolygon"], ["", "def", "render", "(", "self", ",", "r", ")", ":", "\n", "        ", "self", ".", "_set_color", "(", "r", ")", "\n", "\n", "# Vertical quad", "\n", "parallelogram_width", "=", "(", "CELL_PIXELS", "/", "2", ")", "*", "(", "self", ".", "size", "/", "4", ")", "\n", "parallelogram_height", "=", "CELL_PIXELS", "*", "(", "self", ".", "size", "/", "4", ")", "\n", "r", ".", "drawPolygon", "(", "[", "\n", "(", "CELL_PIXELS", "/", "2", ",", "0", ")", ",", "\n", "(", "CELL_PIXELS", "/", "2", "+", "parallelogram_width", ",", "0", ")", ",", "\n", "(", "CELL_PIXELS", "/", "2", ",", "parallelogram_height", ")", ",", "\n", "(", "CELL_PIXELS", "/", "2", "-", "parallelogram_width", ",", "parallelogram_height", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Cylinder.can_push": [[180, 182], ["None"], "methods", ["None"], ["", "def", "can_push", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Cylinder.push": [[183, 190], ["None"], "methods", ["None"], ["", "def", "push", "(", "self", ")", ":", "\n", "        ", "self", ".", "momentum", "+=", "1", "\n", "if", "self", ".", "momentum", ">=", "self", ".", "momentum_threshold", ":", "\n", "            ", "self", ".", "momentum", "=", "0", "\n", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Circle.__init__": [[193, 197], ["minigrid.WorldObj.__init__"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.__init__"], ["    ", "def", "__init__", "(", "self", ",", "color", "=", "'blue'", ",", "size", "=", "1", ",", "vector_representation", "=", "None", ",", "object_representation", "=", "None", ",", "target", "=", "False", ",", "\n", "weight", "=", "\"light\"", ")", ":", "\n", "        ", "super", "(", "Circle", ",", "self", ")", ".", "__init__", "(", "'circle'", ",", "color", ",", "size", ",", "vector_representation", ",", "\n", "object_representation", "=", "object_representation", ",", "target", "=", "target", ",", "weight", "=", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Circle.can_pickup": [[198, 200], ["None"], "methods", ["None"], ["", "def", "can_pickup", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Circle.can_push": [[201, 203], ["None"], "methods", ["None"], ["", "def", "can_push", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Circle.render": [[204, 207], ["minigrid.Circle._set_color", "r.drawCircle"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.WorldObj._set_color", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.drawCircle"], ["", "def", "render", "(", "self", ",", "r", ")", ":", "\n", "        ", "self", ".", "_set_color", "(", "r", ")", "\n", "r", ".", "drawCircle", "(", "CELL_PIXELS", "*", "0.5", ",", "CELL_PIXELS", "*", "0.5", ",", "CELL_PIXELS", "//", "10", "*", "self", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Circle.push": [[208, 215], ["None"], "methods", ["None"], ["", "def", "push", "(", "self", ")", ":", "\n", "        ", "self", ".", "momentum", "+=", "1", "\n", "if", "self", ".", "momentum", ">=", "self", ".", "momentum_threshold", ":", "\n", "            ", "self", ".", "momentum", "=", "0", "\n", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.__init__": [[222, 230], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "width", ",", "height", ",", "depth", ")", ":", "\n", "        ", "assert", "width", ">=", "3", "\n", "assert", "height", ">=", "3", "\n", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "height", "=", "height", "\n", "self", ".", "_num_attributes_object", "=", "depth", "\n", "self", ".", "grid", "=", "[", "None", "]", "*", "width", "*", "height", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.__contains__": [[231, 245], ["isinstance", "isinstance"], "methods", ["None"], ["", "def", "__contains__", "(", "self", ",", "key", ")", ":", "\n", "        ", "if", "isinstance", "(", "key", ",", "WorldObj", ")", ":", "\n", "            ", "for", "e", "in", "self", ".", "grid", ":", "\n", "                ", "if", "e", "is", "key", ":", "\n", "                    ", "return", "True", "\n", "", "", "", "elif", "isinstance", "(", "key", ",", "tuple", ")", ":", "\n", "            ", "for", "e", "in", "self", ".", "grid", ":", "\n", "                ", "if", "e", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "if", "(", "e", ".", "color", ",", "e", ".", "type", ")", "==", "key", ":", "\n", "                    ", "return", "True", "\n", "", "if", "key", "[", "0", "]", "is", "None", "and", "key", "[", "1", "]", "==", "e", ".", "type", ":", "\n", "                    ", "return", "True", "\n", "", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.__eq__": [[246, 250], ["minigrid.Grid.encode", "other.encode", "numpy.array_equal"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.encode", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.encode"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "grid1", "=", "self", ".", "encode", "(", ")", "\n", "grid2", "=", "other", ".", "encode", "(", ")", "\n", "return", "np", ".", "array_equal", "(", "grid2", ",", "grid1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.__ne__": [[251, 253], ["None"], "methods", ["None"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "not", "self", "==", "other", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.copy": [[254, 257], ["deepcopy"], "methods", ["None"], ["", "def", "copy", "(", "self", ")", ":", "\n", "        ", "from", "copy", "import", "deepcopy", "\n", "return", "deepcopy", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.set": [[258, 262], ["None"], "methods", ["None"], ["", "def", "set", "(", "self", ",", "i", ",", "j", ",", "v", ")", ":", "\n", "        ", "assert", "i", ">=", "0", "and", "i", "<", "self", ".", "width", "\n", "assert", "j", ">=", "0", "and", "j", "<", "self", ".", "height", "\n", "self", ".", "grid", "[", "j", "*", "self", ".", "width", "+", "i", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.get": [[263, 267], ["None"], "methods", ["None"], ["", "def", "get", "(", "self", ",", "i", ",", "j", ")", ":", "\n", "        ", "assert", "i", ">=", "0", "and", "i", "<", "self", ".", "width", "\n", "assert", "j", ">=", "0", "and", "j", "<", "self", ".", "height", "\n", "return", "self", ".", "grid", "[", "j", "*", "self", ".", "width", "+", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.rotate_left": [[268, 281], ["minigrid.Grid", "range", "range", "minigrid.Grid.get", "minigrid.Grid.set"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.set"], ["", "def", "rotate_left", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Rotate the grid to the left (counter-clockwise)\n        \"\"\"", "\n", "\n", "grid", "=", "Grid", "(", "self", ".", "height", ",", "self", ".", "width", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "width", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "self", ".", "height", ")", ":", "\n", "                ", "v", "=", "self", ".", "get", "(", "i", ",", "j", ")", "\n", "grid", ".", "set", "(", "j", ",", "grid", ".", "height", "-", "1", "-", "i", ",", "v", ")", "\n", "\n", "", "", "return", "grid", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.slice": [[282, 303], ["minigrid.Grid", "range", "range", "minigrid.Grid.set", "minigrid.Grid.get", "minigrid.Square"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.get"], ["", "def", "slice", "(", "self", ",", "topX", ",", "topY", ",", "width", ",", "height", ")", ":", "\n", "        ", "\"\"\"\n        Get a subset of the grid\n        \"\"\"", "\n", "\n", "grid", "=", "Grid", "(", "width", ",", "height", ")", "\n", "\n", "for", "j", "in", "range", "(", "0", ",", "height", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "width", ")", ":", "\n", "                ", "x", "=", "topX", "+", "i", "\n", "y", "=", "topY", "+", "j", "\n", "\n", "if", "x", ">=", "0", "and", "x", "<", "self", ".", "width", "and", "y", ">=", "0", "and", "y", "<", "self", ".", "height", ":", "\n", "                    ", "v", "=", "self", ".", "get", "(", "x", ",", "y", ")", "\n", "", "else", ":", "\n", "                    ", "v", "=", "Square", "(", ")", "\n", "\n", "", "grid", ".", "set", "(", "i", ",", "j", ",", "v", ")", "\n", "\n", "", "", "return", "grid", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.render": [[304, 379], ["r.push", "r.scale", "r.setLineColor", "range", "range", "range", "r.pop", "len", "r.fillRect", "range", "r.drawLine", "r.drawLine", "range", "len", "attention_weights.reshape.reshape.reshape", "range", "minigrid.Grid.get", "r.push", "r.translate", "minigrid.Grid.render", "r.pop", "len", "attention_weights.reshape.reshape.reshape", "int", "r.push", "r.fillRect", "r.pop", "int", "r.push", "r.fillRect", "len"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Circle.push", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.scale", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.setLineColor", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.fillRect", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.drawLine", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.drawLine", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Circle.push", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.translate", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv.render", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Circle.push", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.fillRect", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Circle.push", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.fillRect"], ["", "def", "render", "(", "self", ",", "r", ",", "tile_size", ",", "attention_weights", "=", "[", "]", ")", ":", "\n", "        ", "\"\"\"\n        Render this grid at a given scale\n        :param r: target renderer object\n        :param tile_size: tile size in pixels\n        \"\"\"", "\n", "\n", "assert", "r", ".", "width", "==", "self", ".", "width", "*", "tile_size", "\n", "assert", "r", ".", "height", "==", "self", ".", "height", "*", "tile_size", "\n", "\n", "# Total grid size at native scale", "\n", "widthPx", "=", "self", ".", "width", "*", "CELL_PIXELS", "\n", "heightPx", "=", "self", ".", "height", "*", "CELL_PIXELS", "\n", "\n", "r", ".", "push", "(", ")", "\n", "\n", "# Internally, we draw at the \"large\" full-grid resolution, but we", "\n", "# use the renderer to scale back to the desired size", "\n", "r", ".", "scale", "(", "tile_size", "/", "CELL_PIXELS", ",", "tile_size", "/", "CELL_PIXELS", ")", "\n", "\n", "if", "len", "(", "attention_weights", ")", ">", "0", ":", "\n", "            ", "if", "len", "(", "attention_weights", ")", "==", "self", ".", "width", "*", "self", ".", "height", ":", "\n", "                ", "pixel_attention", "=", "False", "\n", "attention_weights", "=", "attention_weights", ".", "reshape", "(", "self", ".", "width", ",", "self", ".", "height", ")", "\n", "", "elif", "len", "(", "attention_weights", ")", "==", "self", ".", "width", "*", "CELL_PIXELS", "*", "self", ".", "height", "*", "CELL_PIXELS", ":", "\n", "                ", "pixel_attention", "=", "True", "\n", "attention_weights", "=", "attention_weights", ".", "reshape", "(", "self", ".", "width", "*", "CELL_PIXELS", ",", "self", ".", "height", "*", "CELL_PIXELS", ")", "\n", "", "start_range", "=", "0", "\n", "end_range", "=", "150", "\n", "", "else", ":", "\n", "            ", "pixel_attention", "=", "False", "\n", "# Draw the background of the in-world cells black", "\n", "", "if", "not", "pixel_attention", ":", "\n", "            ", "r", ".", "fillRect", "(", "\n", "0", ",", "\n", "0", ",", "\n", "widthPx", ",", "\n", "heightPx", ",", "\n", "255", ",", "255", ",", "255", "\n", ")", "\n", "", "else", ":", "\n", "            ", "for", "j", "in", "range", "(", "0", ",", "heightPx", ")", ":", "\n", "                ", "for", "i", "in", "range", "(", "0", ",", "widthPx", ")", ":", "\n", "                    ", "current_weight", "=", "attention_weights", "[", "j", ",", "i", "]", "\n", "color", "=", "int", "(", "(", "end_range", "-", "start_range", ")", "*", "(", "1", "-", "current_weight", ")", ")", "\n", "r", ".", "push", "(", ")", "\n", "r", ".", "fillRect", "(", "i", ",", "j", ",", "1", ",", "1", ",", "r", "=", "color", ",", "g", "=", "color", ",", "b", "=", "color", ")", "\n", "r", ".", "pop", "(", ")", "\n", "\n", "# Draw grid lines", "\n", "", "", "", "r", ".", "setLineColor", "(", "100", ",", "100", ",", "100", ")", "\n", "for", "rowIdx", "in", "range", "(", "0", ",", "self", ".", "height", ")", ":", "\n", "            ", "y", "=", "CELL_PIXELS", "*", "rowIdx", "\n", "r", ".", "drawLine", "(", "0", ",", "y", ",", "widthPx", ",", "y", ")", "\n", "", "for", "colIdx", "in", "range", "(", "0", ",", "self", ".", "width", ")", ":", "\n", "            ", "x", "=", "CELL_PIXELS", "*", "colIdx", "\n", "r", ".", "drawLine", "(", "x", ",", "0", ",", "x", ",", "heightPx", ")", "\n", "\n", "# Render the grid", "\n", "", "for", "j", "in", "range", "(", "0", ",", "self", ".", "height", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "self", ".", "width", ")", ":", "\n", "                ", "cell", "=", "self", ".", "get", "(", "i", ",", "j", ")", "\n", "if", "len", "(", "attention_weights", ")", ">", "0", "and", "not", "pixel_attention", ":", "\n", "                    ", "current_weight", "=", "attention_weights", "[", "j", ",", "i", "]", "\n", "color", "=", "int", "(", "(", "end_range", "-", "start_range", ")", "*", "(", "1", "-", "current_weight", ")", ")", "\n", "r", ".", "push", "(", ")", "\n", "r", ".", "fillRect", "(", "i", "*", "CELL_PIXELS", ",", "j", "*", "CELL_PIXELS", ",", "CELL_PIXELS", ",", "CELL_PIXELS", ",", "r", "=", "color", ",", "g", "=", "color", ",", "b", "=", "color", ")", "\n", "", "if", "cell", "==", "None", ":", "\n", "                    ", "continue", "\n", "", "r", ".", "push", "(", ")", "\n", "r", ".", "translate", "(", "i", "*", "CELL_PIXELS", ",", "j", "*", "CELL_PIXELS", ")", "\n", "cell", ".", "render", "(", "r", ")", "\n", "r", ".", "pop", "(", ")", "\n", "\n", "", "", "r", ".", "pop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.encode": [[380, 400], ["numpy.zeros", "range", "range", "minigrid.Grid.get", "numpy.zeros", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.get"], ["", "def", "encode", "(", "self", ",", "agent_row", ":", "int", ",", "agent_column", ":", "int", ",", "agent_direction", ":", "int", ")", ":", "\n", "        ", "\"\"\"\n        Produce a compact numpy encoding of the grid.\n        \"\"\"", "\n", "array", "=", "np", ".", "zeros", "(", "(", "self", ".", "width", ",", "self", ".", "height", ",", "self", ".", "_num_attributes_object", "+", "1", "+", "4", ")", ",", "dtype", "=", "'uint8'", ")", "\n", "for", "col", "in", "range", "(", "self", ".", "width", ")", ":", "\n", "            ", "for", "row", "in", "range", "(", "self", ".", "height", ")", ":", "\n", "                ", "grid_cell", "=", "self", ".", "get", "(", "col", ",", "row", ")", "\n", "empty_representation", "=", "np", ".", "zeros", "(", "self", ".", "_num_attributes_object", "+", "1", "+", "4", ")", "\n", "if", "grid_cell", ":", "\n", "                    ", "empty_representation", "[", ":", "-", "5", "]", "=", "grid_cell", ".", "vector_representation", "\n", "\n", "# Set agent feature to 1 for the grid cell with the agent and add it's direction in one-hot form.", "\n", "", "if", "col", "==", "agent_column", "and", "row", "==", "agent_row", ":", "\n", "                    ", "empty_representation", "[", "-", "5", "]", "=", "1", "\n", "one_hot_direction", "=", "np", ".", "zeros", "(", "4", ")", "\n", "one_hot_direction", "[", "agent_direction", "]", "=", "1", "\n", "empty_representation", "[", "-", "4", ":", "]", "=", "one_hot_direction", "\n", "", "array", "[", "row", ",", "col", ",", ":", "]", "=", "empty_representation", "\n", "", "", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv.__init__": [[427, 463], ["gym.spaces.Discrete", "minigrid.MiniGridEnv.seed", "minigrid.MiniGridEnv.reset", "len"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv.seed", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv.reset"], ["", "def", "__init__", "(", "self", ",", "grid_size", "=", "None", ",", "width", "=", "None", ",", "height", "=", "None", ",", "max_steps", "=", "100", ",", "seed", "=", "1337", ")", ":", "\n", "# Can't set both grid_size and width/height", "\n", "        ", "if", "grid_size", ":", "\n", "            ", "assert", "width", "==", "None", "and", "height", "==", "None", "\n", "width", "=", "grid_size", "\n", "height", "=", "grid_size", "\n", "\n", "# Action enumeration for this environment", "\n", "", "self", ".", "actions", "=", "MiniGridEnv", ".", "Actions", "\n", "\n", "# Actions are discrete integer values", "\n", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "len", "(", "self", ".", "actions", ")", ")", "\n", "\n", "# Range of possible rewards", "\n", "self", ".", "reward_range", "=", "(", "0", ",", "1", ")", "\n", "\n", "# Renderer object used to render the whole grid (full-scale)", "\n", "self", ".", "grid_render", "=", "None", "\n", "\n", "# Renderer used to render observations (small-scale agent view)", "\n", "self", ".", "obs_render", "=", "None", "\n", "\n", "# Environment configuration", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "height", "=", "height", "\n", "self", ".", "max_steps", "=", "max_steps", "\n", "\n", "# Current position and direction of the agent", "\n", "self", ".", "agent_pos", "=", "None", "\n", "self", ".", "agent_dir", "=", "None", "\n", "\n", "# Initialize the RNG", "\n", "self", ".", "seed", "(", "seed", "=", "seed", ")", "\n", "\n", "# Initialize the state", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv.reset": [[464, 489], ["minigrid.MiniGridEnv._gen_grid", "minigrid.MiniGridEnv.grid.get", "minigrid.MiniGridEnv.can_overlap"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid._gen_grid", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.WorldObj.can_overlap"], ["", "def", "reset", "(", "self", ")", ":", "\n", "# Current position and direction of the agent", "\n", "        ", "self", ".", "agent_pos", "=", "None", "\n", "self", ".", "agent_dir", "=", "None", "\n", "\n", "# Generate a new random grid at the start of each episode", "\n", "# To keep the same grid for each episode, call env.seed() with", "\n", "# the same seed before calling env.reset()", "\n", "self", ".", "_gen_grid", "(", "self", ".", "width", ",", "self", ".", "height", ")", "\n", "\n", "# These fields should be defined by _gen_grid", "\n", "assert", "self", ".", "agent_pos", "is", "not", "None", "\n", "assert", "self", ".", "agent_dir", "is", "not", "None", "\n", "\n", "# Check that the agent doesn't overlap with an object", "\n", "start_cell", "=", "self", ".", "grid", ".", "get", "(", "*", "self", ".", "agent_pos", ")", "\n", "assert", "start_cell", "is", "None", "or", "start_cell", ".", "can_overlap", "(", ")", "\n", "\n", "# Item picked up, being carried, initially nothing", "\n", "self", ".", "carrying", "=", "None", "\n", "\n", "# Step count since episode start", "\n", "self", ".", "step_count", "=", "0", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv.seed": [[490, 494], ["gym.utils.seeding.np_random"], "methods", ["None"], ["", "def", "seed", "(", "self", ",", "seed", "=", "1337", ")", ":", "\n", "# Seed the random number generator", "\n", "        ", "self", ".", "np_random", ",", "_", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv.steps_remaining": [[495, 498], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "steps_remaining", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "max_steps", "-", "self", ".", "step_count", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv.__str__": [[499, 535], ["range", "range", "minigrid.MiniGridEnv.grid.get", "minigrid.MiniGridEnv.color[].upper"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.get"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Produce a pretty string of the environment's grid along with the agent.\n        A grid cell is represented by 2-character string, the first one for\n        the object and the second one for the color.\n        \"\"\"", "\n", "\n", "# Map of object types to short string", "\n", "OBJECT_TO_STR", "=", "{", "\n", "'circle'", ":", "'A'", ",", "\n", "'square'", ":", "'B'", ",", "\n", "'cylinder'", ":", "'C'", ",", "\n", "}", "\n", "\n", "# Map agent's direction to short string", "\n", "AGENT_DIR_TO_STR", "=", "{", "\n", "0", ":", "'>'", ",", "\n", "1", ":", "'V'", ",", "\n", "2", ":", "'<'", ",", "\n", "3", ":", "'^'", "\n", "}", "\n", "\n", "str", "=", "''", "\n", "for", "j", "in", "range", "(", "self", ".", "grid", ".", "height", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "grid", ".", "width", ")", ":", "\n", "                ", "if", "i", "==", "self", ".", "agent_pos", "[", "0", "]", "and", "j", "==", "self", ".", "agent_pos", "[", "1", "]", ":", "\n", "                    ", "str", "+=", "2", "*", "AGENT_DIR_TO_STR", "[", "self", ".", "agent_dir", "]", "\n", "continue", "\n", "", "c", "=", "self", ".", "grid", ".", "get", "(", "i", ",", "j", ")", "\n", "if", "not", "c", ":", "\n", "                    ", "str", "+=", "'  '", "\n", "continue", "\n", "", "str", "+=", "OBJECT_TO_STR", "[", "c", ".", "type", "]", "+", "c", ".", "color", "[", "0", "]", ".", "upper", "(", ")", "\n", "", "if", "j", "<", "self", ".", "grid", ".", "height", "-", "1", ":", "\n", "                ", "str", "+=", "'\\n'", "\n", "", "", "return", "str", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv._gen_grid": [[536, 538], ["None"], "methods", ["None"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "        ", "assert", "False", ",", "\"_gen_grid needs to be implemented by each environment\"", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv._rand_int": [[539, 545], ["minigrid.MiniGridEnv.np_random.randint"], "methods", ["None"], ["", "def", "_rand_int", "(", "self", ",", "low", ",", "high", ")", ":", "\n", "        ", "\"\"\"\n        Generate random integer in [low,high[\n        \"\"\"", "\n", "\n", "return", "self", ".", "np_random", ".", "randint", "(", "low", ",", "high", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv.place_obj": [[546, 597], ["minigrid.MiniGridEnv.grid.set", "numpy.array", "max", "max", "RecursionError", "minigrid.MiniGridEnv.grid.get", "reject_fn", "minigrid.MiniGridEnv._rand_int", "minigrid.MiniGridEnv._rand_int", "min", "min"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv._rand_int"], ["", "def", "place_obj", "(", "self", ",", "obj", ",", "top", "=", "None", ",", "size", "=", "None", ",", "reject_fn", "=", "None", ",", "max_tries", "=", "math", ".", "inf", ")", ":", "\n", "        ", "\"\"\"\n        Place an object at an empty position in the grid\n\n        :param obj:\n        :param top: top-left position of the rectangle where to place\n        :param size: size of the rectangle where to place\n        :param reject_fn: function to filter out potential positions\n        :param max_tries:\n        \"\"\"", "\n", "\n", "if", "top", "is", "None", ":", "\n", "            ", "top", "=", "(", "0", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "top", "=", "(", "max", "(", "top", "[", "0", "]", ",", "0", ")", ",", "max", "(", "top", "[", "1", "]", ",", "0", ")", ")", "\n", "\n", "", "if", "size", "is", "None", ":", "\n", "            ", "size", "=", "(", "self", ".", "grid", ".", "width", ",", "self", ".", "grid", ".", "height", ")", "\n", "\n", "", "num_tries", "=", "0", "\n", "\n", "while", "True", ":", "\n", "# This is to handle with rare cases where rejection sampling", "\n", "# gets stuck in an infinite loop", "\n", "            ", "if", "num_tries", ">", "max_tries", ":", "\n", "                ", "raise", "RecursionError", "(", "'rejection sampling failed in place_obj'", ")", "\n", "\n", "", "num_tries", "+=", "1", "\n", "\n", "pos", "=", "np", ".", "array", "(", "(", "\n", "self", ".", "_rand_int", "(", "top", "[", "0", "]", ",", "min", "(", "top", "[", "0", "]", "+", "size", "[", "0", "]", ",", "self", ".", "grid", ".", "width", ")", ")", ",", "\n", "self", ".", "_rand_int", "(", "top", "[", "1", "]", ",", "min", "(", "top", "[", "1", "]", "+", "size", "[", "1", "]", ",", "self", ".", "grid", ".", "height", ")", ")", "\n", ")", ")", "\n", "\n", "# Don't place the object on top of another object", "\n", "if", "self", ".", "grid", ".", "get", "(", "*", "pos", ")", "!=", "None", ":", "\n", "                ", "continue", "\n", "\n", "# Check if there is a filtering criterion", "\n", "", "if", "reject_fn", "and", "reject_fn", "(", "self", ",", "pos", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "break", "\n", "\n", "", "self", ".", "grid", ".", "set", "(", "*", "pos", ",", "obj", ")", "\n", "\n", "if", "obj", "is", "not", "None", ":", "\n", "            ", "obj", ".", "init_pos", "=", "pos", "\n", "obj", ".", "cur_pos", "=", "pos", "\n", "\n", "", "return", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv.place_agent": [[598, 617], ["minigrid.MiniGridEnv.place_obj", "minigrid.MiniGridEnv._rand_int"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv.place_obj", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv._rand_int"], ["", "def", "place_agent", "(", "\n", "self", ",", "\n", "top", "=", "None", ",", "\n", "size", "=", "None", ",", "\n", "rand_dir", "=", "True", ",", "\n", "max_tries", "=", "math", ".", "inf", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Set the agent's starting point at an empty position in the grid\n        \"\"\"", "\n", "\n", "self", ".", "agent_pos", "=", "None", "\n", "pos", "=", "self", ".", "place_obj", "(", "None", ",", "top", ",", "size", ",", "max_tries", "=", "max_tries", ")", "\n", "self", ".", "agent_pos", "=", "pos", "\n", "\n", "if", "rand_dir", ":", "\n", "            ", "self", ".", "agent_dir", "=", "self", ".", "_rand_int", "(", "0", ",", "4", ")", "\n", "\n", "", "return", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv.dir_vec": [[618, 627], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dir_vec", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get the direction vector for the agent, pointing in the direction\n        of forward movement.\n        \"\"\"", "\n", "\n", "assert", "self", ".", "agent_dir", ">=", "0", "and", "self", ".", "agent_dir", "<", "4", "\n", "return", "DIR_TO_VEC", "[", "self", ".", "agent_dir", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv.right_vec": [[628, 636], ["numpy.array"], "methods", ["None"], ["", "@", "property", "\n", "def", "right_vec", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get the vector pointing to the right of the agent.\n        \"\"\"", "\n", "\n", "dx", ",", "dy", "=", "self", ".", "dir_vec", "\n", "return", "np", ".", "array", "(", "(", "-", "dy", ",", "dx", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv.front_pos": [[637, 644], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "front_pos", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get the position of the cell that is right in front of the agent\n        \"\"\"", "\n", "\n", "return", "self", ".", "agent_pos", "+", "self", ".", "dir_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv.step": [[645, 704], ["minigrid.MiniGridEnv.grid.get", "minigrid.MiniGridEnv.grid.get", "minigrid.MiniGridEnv.can_overlap", "minigrid.MiniGridEnv._reward", "minigrid.MiniGridEnv.can_pickup", "numpy.array", "minigrid.MiniGridEnv.grid.set", "minigrid.MiniGridEnv.grid.set"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.WorldObj.can_overlap", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Circle.can_pickup", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.set"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "self", ".", "step_count", "+=", "1", "\n", "\n", "reward", "=", "0", "\n", "done", "=", "False", "\n", "\n", "current_cell", "=", "self", ".", "grid", ".", "get", "(", "*", "self", ".", "agent_pos", ")", "\n", "\n", "# Rotate left", "\n", "if", "action", "==", "self", ".", "actions", ".", "left", ":", "\n", "            ", "self", ".", "agent_dir", "-=", "1", "\n", "if", "self", ".", "agent_dir", "<", "0", ":", "\n", "                ", "self", ".", "agent_dir", "+=", "4", "\n", "\n", "# Rotate right", "\n", "", "", "elif", "action", "==", "self", ".", "actions", ".", "right", ":", "\n", "            ", "self", ".", "agent_dir", "=", "(", "self", ".", "agent_dir", "+", "1", ")", "%", "4", "\n", "\n", "# Move forward", "\n", "", "elif", "action", "==", "self", ".", "actions", ".", "forward", ":", "\n", "# Get the position in front of the agent", "\n", "            ", "fwd_pos", "=", "self", ".", "front_pos", "\n", "\n", "# Get the contents of the cell in front of the agent", "\n", "fwd_cell", "=", "self", ".", "grid", ".", "get", "(", "*", "fwd_pos", ")", "\n", "if", "fwd_cell", "==", "None", "or", "fwd_cell", ".", "can_overlap", "(", ")", ":", "\n", "                ", "self", ".", "agent_pos", "=", "fwd_pos", "\n", "", "if", "fwd_cell", "!=", "None", "and", "fwd_cell", ".", "type", "==", "'goal'", ":", "\n", "                ", "done", "=", "True", "\n", "reward", "=", "self", ".", "_reward", "(", ")", "\n", "", "if", "fwd_cell", "!=", "None", "and", "fwd_cell", ".", "type", "==", "'lava'", ":", "\n", "                ", "done", "=", "True", "\n", "\n", "# Pick up an object", "\n", "", "", "elif", "action", "==", "self", ".", "actions", ".", "pickup", ":", "\n", "            ", "if", "current_cell", ".", "can_pickup", "(", ")", ":", "\n", "                ", "if", "self", ".", "carrying", "is", "None", ":", "\n", "                    ", "self", ".", "carrying", "=", "current_cell", "\n", "self", ".", "carrying", ".", "cur_pos", "=", "np", ".", "array", "(", "[", "-", "1", ",", "-", "1", "]", ")", "\n", "self", ".", "grid", ".", "set", "(", "*", "self", ".", "agent_pos", ",", "None", ")", "\n", "\n", "# Drop an object", "\n", "", "", "", "elif", "action", "==", "self", ".", "actions", ".", "drop", ":", "\n", "            ", "if", "not", "current_cell", "and", "self", ".", "carrying", ":", "\n", "                ", "self", ".", "grid", ".", "set", "(", "*", "self", ".", "agent_pos", ",", "self", ".", "carrying", ")", "\n", "self", ".", "carrying", ".", "cur_pos", "=", "self", ".", "agent_pos", "\n", "self", ".", "carrying", "=", "None", "\n", "\n", "# Done action (not used by default)", "\n", "", "", "elif", "action", "==", "self", ".", "actions", ".", "done", ":", "\n", "            ", "pass", "\n", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "\"unknown action\"", "\n", "\n", "", "if", "self", ".", "step_count", ">=", "self", ".", "max_steps", ":", "\n", "            ", "done", "=", "True", "\n", "\n", "", "return", "reward", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv.render": [[705, 761], ["r.beginFrame", "minigrid.MiniGridEnv.grid.render", "r.push", "r.scale", "r.translate", "r.rotate", "r.setLineColor", "r.setColor", "r.drawPolygon", "r.pop", "r.endFrame", "Renderer", "r.window.setText", "len", "r.getArray", "minigrid.MiniGridEnv.grid_render.close", "r.getPixmap"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.beginFrame", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv.render", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Circle.push", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.scale", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.translate", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.rotate", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.setLineColor", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.setColor", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.drawPolygon", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.endFrame", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Window.setText", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.getArray", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.close", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.rendering.Renderer.getPixmap"], ["", "def", "render", "(", "self", ",", "mode", "=", "''", ",", "close", "=", "False", ",", "highlight", "=", "True", ",", "tile_size", "=", "CELL_PIXELS", ",", "attention_weights", "=", "[", "]", ")", ":", "\n", "        ", "\"\"\"\n        Render the whole-grid human view\n        \"\"\"", "\n", "\n", "if", "close", ":", "\n", "            ", "if", "self", ".", "grid_render", ":", "\n", "                ", "self", ".", "grid_render", ".", "close", "(", ")", "\n", "", "return", "\n", "\n", "", "if", "self", ".", "grid_render", "is", "None", "or", "self", ".", "grid_render", ".", "window", "is", "None", "or", "(", "self", ".", "grid_render", ".", "width", "!=", "self", ".", "width", "*", "tile_size", ")", ":", "\n", "            ", "from", "GroundedScan", ".", "gym_minigrid", ".", "rendering", "import", "Renderer", "\n", "self", ".", "grid_render", "=", "Renderer", "(", "\n", "self", ".", "width", "*", "tile_size", ",", "\n", "self", ".", "height", "*", "tile_size", ",", "\n", "True", "if", "mode", "==", "'human'", "else", "False", "\n", ")", "\n", "\n", "", "r", "=", "self", ".", "grid_render", "\n", "\n", "if", "r", ".", "window", ":", "\n", "            ", "r", ".", "window", ".", "setText", "(", "self", ".", "mission", ")", "\n", "\n", "", "r", ".", "beginFrame", "(", ")", "\n", "\n", "# Render the whole grid", "\n", "if", "len", "(", "attention_weights", ")", ">", "0", ":", "\n", "            ", "flat_attention_weights", "=", "attention_weights", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "flat_attention_weights", "=", "attention_weights", "\n", "", "self", ".", "grid", ".", "render", "(", "r", ",", "tile_size", ",", "attention_weights", "=", "flat_attention_weights", ")", "\n", "\n", "# Draw the agent", "\n", "ratio", "=", "tile_size", "/", "CELL_PIXELS", "\n", "r", ".", "push", "(", ")", "\n", "r", ".", "scale", "(", "ratio", ",", "ratio", ")", "\n", "r", ".", "translate", "(", "\n", "CELL_PIXELS", "*", "(", "self", ".", "agent_pos", "[", "0", "]", "+", "0.5", ")", ",", "\n", "CELL_PIXELS", "*", "(", "self", ".", "agent_pos", "[", "1", "]", "+", "0.5", ")", "\n", ")", "\n", "r", ".", "rotate", "(", "self", ".", "agent_dir", "*", "90", ")", "\n", "r", ".", "setLineColor", "(", "255", ",", "192", ",", "203", ")", "\n", "r", ".", "setColor", "(", "255", ",", "192", ",", "203", ")", "\n", "r", ".", "drawPolygon", "(", "[", "\n", "(", "-", "12", ",", "10", ")", ",", "\n", "(", "12", ",", "0", ")", ",", "\n", "(", "-", "12", ",", "-", "10", ")", "\n", "]", ")", "\n", "r", ".", "pop", "(", ")", "\n", "r", ".", "endFrame", "(", ")", "\n", "\n", "if", "mode", "==", "'rgb_array'", ":", "\n", "            ", "return", "r", ".", "getArray", "(", ")", "\n", "", "elif", "mode", "==", "'pixmap'", ":", "\n", "            ", "return", "r", ".", "getPixmap", "(", ")", "\n", "", "return", "r", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.Room.__init__": [[15, 38], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "top", ",", "\n", "size", "\n", ")", ":", "\n", "# Top-left corner and size (tuples)", "\n", "        ", "self", ".", "top", "=", "top", "\n", "self", ".", "size", "=", "size", "\n", "\n", "# List of door objects and door positions", "\n", "# Order of the doors is right, down, left, up", "\n", "self", ".", "doors", "=", "[", "None", "]", "*", "4", "\n", "self", ".", "door_pos", "=", "[", "None", "]", "*", "4", "\n", "\n", "# List of rooms adjacent to this one", "\n", "# Order of the neighbors is right, down, left, up", "\n", "self", ".", "neighbors", "=", "[", "None", "]", "*", "4", "\n", "\n", "# Indicates if this room is behind a locked door", "\n", "self", ".", "locked", "=", "False", "\n", "\n", "# List of objects contained", "\n", "self", ".", "objs", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.Room.rand_pos": [[39, 45], ["env._randPos"], "methods", ["None"], ["", "def", "rand_pos", "(", "self", ",", "env", ")", ":", "\n", "        ", "topX", ",", "topY", "=", "self", ".", "top", "\n", "sizeX", ",", "sizeY", "=", "self", ".", "size", "\n", "return", "env", ".", "_randPos", "(", "\n", "topX", "+", "1", ",", "topX", "+", "sizeX", "-", "1", ",", "\n", "topY", "+", "1", ",", "topY", "+", "sizeY", "-", "1", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.Room.pos_inside": [[47, 62], ["None"], "methods", ["None"], ["", "def", "pos_inside", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        Check if a position is within the bounds of this room\n        \"\"\"", "\n", "\n", "topX", ",", "topY", "=", "self", ".", "top", "\n", "sizeX", ",", "sizeY", "=", "self", ".", "size", "\n", "\n", "if", "x", "<", "topX", "or", "y", "<", "topY", ":", "\n", "            ", "return", "False", "\n", "\n", "", "if", "x", ">=", "topX", "+", "sizeX", "or", "y", ">=", "topY", "+", "sizeY", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.__init__": [[69, 97], ["minigrid.MiniGridEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "room_size", "=", "7", ",", "\n", "num_rows", "=", "3", ",", "\n", "num_cols", "=", "3", ",", "\n", "max_steps", "=", "100", ",", "\n", "seed", "=", "0", "\n", ")", ":", "\n", "        ", "assert", "room_size", ">", "0", "\n", "assert", "room_size", ">=", "3", "\n", "assert", "num_rows", ">", "0", "\n", "assert", "num_cols", ">", "0", "\n", "self", ".", "room_size", "=", "room_size", "\n", "self", ".", "num_rows", "=", "num_rows", "\n", "self", ".", "num_cols", "=", "num_cols", "\n", "\n", "height", "=", "(", "room_size", "-", "1", ")", "*", "num_rows", "+", "1", "\n", "width", "=", "(", "room_size", "-", "1", ")", "*", "num_cols", "+", "1", "\n", "\n", "# By default, this environment has no mission", "\n", "self", ".", "mission", "=", "''", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "width", "=", "width", ",", "\n", "height", "=", "height", ",", "\n", "max_steps", "=", "max_steps", ",", "\n", "see_through_walls", "=", "False", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.room_from_pos": [[99, 112], ["None"], "methods", ["None"], ["", "def", "room_from_pos", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\"Get the room a given position maps to\"\"\"", "\n", "\n", "assert", "x", ">=", "0", "\n", "assert", "y", ">=", "0", "\n", "\n", "i", "=", "x", "//", "(", "self", ".", "room_size", "-", "1", ")", "\n", "j", "=", "y", "//", "(", "self", ".", "room_size", "-", "1", ")", "\n", "\n", "assert", "i", "<", "self", ".", "num_cols", "\n", "assert", "j", "<", "self", ".", "num_rows", "\n", "\n", "return", "self", ".", "room_grid", "[", "j", "]", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.get_room": [[113, 117], ["None"], "methods", ["None"], ["", "def", "get_room", "(", "self", ",", "i", ",", "j", ")", ":", "\n", "        ", "assert", "i", "<", "self", ".", "num_cols", "\n", "assert", "j", "<", "self", ".", "num_rows", "\n", "return", "self", ".", "room_grid", "[", "j", "]", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid._gen_grid": [[118, 170], ["minigrid.Grid", "range", "range", "range", "roomgrid.RoomGrid.room_grid.append", "range", "roomgrid.Room", "row.append", "roomgrid.RoomGrid.grid.wall_rect", "roomgrid.RoomGrid._rand_int", "roomgrid.RoomGrid._rand_int"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv._rand_int"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "# Create the grid", "\n", "        ", "self", ".", "grid", "=", "Grid", "(", "width", ",", "height", ")", "\n", "\n", "self", ".", "room_grid", "=", "[", "]", "\n", "\n", "# For each row of rooms", "\n", "for", "j", "in", "range", "(", "0", ",", "self", ".", "num_rows", ")", ":", "\n", "            ", "row", "=", "[", "]", "\n", "\n", "# For each column of rooms", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "num_cols", ")", ":", "\n", "                ", "room", "=", "Room", "(", "\n", "(", "i", "*", "(", "self", ".", "room_size", "-", "1", ")", ",", "j", "*", "(", "self", ".", "room_size", "-", "1", ")", ")", ",", "\n", "(", "self", ".", "room_size", ",", "self", ".", "room_size", ")", "\n", ")", "\n", "row", ".", "append", "(", "room", ")", "\n", "\n", "# Generate the walls for this room", "\n", "self", ".", "grid", ".", "wall_rect", "(", "*", "room", ".", "top", ",", "*", "room", ".", "size", ")", "\n", "\n", "", "self", ".", "room_grid", ".", "append", "(", "row", ")", "\n", "\n", "# For each row of rooms", "\n", "", "for", "j", "in", "range", "(", "0", ",", "self", ".", "num_rows", ")", ":", "\n", "# For each column of rooms", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "self", ".", "num_cols", ")", ":", "\n", "                ", "room", "=", "self", ".", "room_grid", "[", "j", "]", "[", "i", "]", "\n", "\n", "x_l", ",", "y_l", "=", "(", "room", ".", "top", "[", "0", "]", "+", "1", ",", "room", ".", "top", "[", "1", "]", "+", "1", ")", "\n", "x_m", ",", "y_m", "=", "(", "room", ".", "top", "[", "0", "]", "+", "room", ".", "size", "[", "0", "]", "-", "1", ",", "room", ".", "top", "[", "1", "]", "+", "room", ".", "size", "[", "1", "]", "-", "1", ")", "\n", "\n", "# Door positions, order is right, down, left, up", "\n", "if", "i", "<", "self", ".", "num_cols", "-", "1", ":", "\n", "                    ", "room", ".", "neighbors", "[", "0", "]", "=", "self", ".", "room_grid", "[", "j", "]", "[", "i", "+", "1", "]", "\n", "room", ".", "door_pos", "[", "0", "]", "=", "(", "x_m", ",", "self", ".", "_rand_int", "(", "y_l", ",", "y_m", ")", ")", "\n", "", "if", "j", "<", "self", ".", "num_rows", "-", "1", ":", "\n", "                    ", "room", ".", "neighbors", "[", "1", "]", "=", "self", ".", "room_grid", "[", "j", "+", "1", "]", "[", "i", "]", "\n", "room", ".", "door_pos", "[", "1", "]", "=", "(", "self", ".", "_rand_int", "(", "x_l", ",", "x_m", ")", ",", "y_m", ")", "\n", "", "if", "i", ">", "0", ":", "\n", "                    ", "room", ".", "neighbors", "[", "2", "]", "=", "self", ".", "room_grid", "[", "j", "]", "[", "i", "-", "1", "]", "\n", "room", ".", "door_pos", "[", "2", "]", "=", "room", ".", "neighbors", "[", "2", "]", ".", "door_pos", "[", "0", "]", "\n", "", "if", "j", ">", "0", ":", "\n", "                    ", "room", ".", "neighbors", "[", "3", "]", "=", "self", ".", "room_grid", "[", "j", "-", "1", "]", "[", "i", "]", "\n", "room", ".", "door_pos", "[", "3", "]", "=", "room", ".", "neighbors", "[", "3", "]", ".", "door_pos", "[", "1", "]", "\n", "\n", "# The agent starts in the middle, facing right", "\n", "", "", "", "self", ".", "agent_pos", "=", "(", "\n", "(", "self", ".", "num_cols", "//", "2", ")", "*", "(", "self", ".", "room_size", "-", "1", ")", "+", "(", "self", ".", "room_size", "//", "2", ")", ",", "\n", "(", "self", ".", "num_rows", "//", "2", ")", "*", "(", "self", ".", "room_size", "-", "1", ")", "+", "(", "self", ".", "room_size", "//", "2", ")", "\n", ")", "\n", "self", ".", "agent_dir", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.place_in_room": [[171, 189], ["roomgrid.RoomGrid.get_room", "roomgrid.RoomGrid.place_obj", "roomgrid.RoomGrid.objs.append"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.get_room", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv.place_obj"], ["", "def", "place_in_room", "(", "self", ",", "i", ",", "j", ",", "obj", ")", ":", "\n", "        ", "\"\"\"\n        Add an existing object to room (i, j)\n        \"\"\"", "\n", "\n", "room", "=", "self", ".", "get_room", "(", "i", ",", "j", ")", "\n", "\n", "pos", "=", "self", ".", "place_obj", "(", "\n", "obj", ",", "\n", "room", ".", "top", ",", "\n", "room", ".", "size", ",", "\n", "reject_fn", "=", "reject_next_to", ",", "\n", "max_tries", "=", "1000", "\n", ")", "\n", "\n", "room", ".", "objs", ".", "append", "(", "obj", ")", "\n", "\n", "return", "obj", ",", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.add_object": [[190, 211], ["roomgrid.RoomGrid.place_in_room", "roomgrid.RoomGrid._rand_elem", "roomgrid.RoomGrid._rand_color", "Key", "Ball", "Box"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.place_in_room"], ["", "def", "add_object", "(", "self", ",", "i", ",", "j", ",", "kind", "=", "None", ",", "color", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Add a new object to room (i, j)\n        \"\"\"", "\n", "\n", "if", "kind", "==", "None", ":", "\n", "            ", "kind", "=", "self", ".", "_rand_elem", "(", "[", "'key'", ",", "'ball'", ",", "'box'", "]", ")", "\n", "\n", "", "if", "color", "==", "None", ":", "\n", "            ", "color", "=", "self", ".", "_rand_color", "(", ")", "\n", "\n", "# TODO: we probably want to add an Object.make helper function", "\n", "", "assert", "kind", "in", "[", "'key'", ",", "'ball'", ",", "'box'", "]", "\n", "if", "kind", "==", "'key'", ":", "\n", "            ", "obj", "=", "Key", "(", "color", ")", "\n", "", "elif", "kind", "==", "'ball'", ":", "\n", "            ", "obj", "=", "Ball", "(", "color", ")", "\n", "", "elif", "kind", "==", "'box'", ":", "\n", "            ", "obj", "=", "Box", "(", "color", ")", "\n", "\n", "", "return", "self", ".", "place_in_room", "(", "i", ",", "j", ",", "obj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.add_door": [[212, 247], ["roomgrid.RoomGrid.get_room", "Door", "roomgrid.RoomGrid.grid.set", "roomgrid.RoomGrid._rand_color", "roomgrid.RoomGrid._rand_bool", "roomgrid.RoomGrid._rand_int"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.get_room", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv._rand_int"], ["", "def", "add_door", "(", "self", ",", "i", ",", "j", ",", "door_idx", "=", "None", ",", "color", "=", "None", ",", "locked", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Add a door to a room, connecting it to a neighbor\n        \"\"\"", "\n", "\n", "room", "=", "self", ".", "get_room", "(", "i", ",", "j", ")", "\n", "\n", "if", "door_idx", "==", "None", ":", "\n", "# Need to make sure that there is a neighbor along this wall", "\n", "# and that there is not already a door", "\n", "            ", "while", "True", ":", "\n", "                ", "door_idx", "=", "self", ".", "_rand_int", "(", "0", ",", "4", ")", "\n", "if", "room", ".", "neighbors", "[", "door_idx", "]", "and", "room", ".", "doors", "[", "door_idx", "]", "is", "None", ":", "\n", "                    ", "break", "\n", "\n", "", "", "", "if", "color", "==", "None", ":", "\n", "            ", "color", "=", "self", ".", "_rand_color", "(", ")", "\n", "\n", "", "if", "locked", "is", "None", ":", "\n", "            ", "locked", "=", "self", ".", "_rand_bool", "(", ")", "\n", "\n", "", "assert", "room", ".", "doors", "[", "door_idx", "]", "is", "None", ",", "\"door already exists\"", "\n", "\n", "room", ".", "locked", "=", "locked", "\n", "door", "=", "Door", "(", "color", ",", "is_locked", "=", "locked", ")", "\n", "\n", "pos", "=", "room", ".", "door_pos", "[", "door_idx", "]", "\n", "self", ".", "grid", ".", "set", "(", "*", "pos", ",", "door", ")", "\n", "door", ".", "cur_pos", "=", "pos", "\n", "\n", "neighbor", "=", "room", ".", "neighbors", "[", "door_idx", "]", "\n", "room", ".", "doors", "[", "door_idx", "]", "=", "door", "\n", "neighbor", ".", "doors", "[", "(", "door_idx", "+", "2", ")", "%", "4", "]", "=", "door", "\n", "\n", "return", "door", ",", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.remove_wall": [[248, 283], ["roomgrid.RoomGrid.get_room", "range", "roomgrid.RoomGrid.grid.set", "range", "roomgrid.RoomGrid.grid.set", "range", "roomgrid.RoomGrid.grid.set", "range", "roomgrid.RoomGrid.grid.set"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.get_room", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.set"], ["", "def", "remove_wall", "(", "self", ",", "i", ",", "j", ",", "wall_idx", ")", ":", "\n", "        ", "\"\"\"\n        Remove a wall between two rooms\n        \"\"\"", "\n", "\n", "room", "=", "self", ".", "get_room", "(", "i", ",", "j", ")", "\n", "\n", "assert", "wall_idx", ">=", "0", "and", "wall_idx", "<", "4", "\n", "assert", "room", ".", "doors", "[", "wall_idx", "]", "is", "None", ",", "\"door exists on this wall\"", "\n", "assert", "room", ".", "neighbors", "[", "wall_idx", "]", ",", "\"invalid wall\"", "\n", "\n", "neighbor", "=", "room", ".", "neighbors", "[", "wall_idx", "]", "\n", "\n", "tx", ",", "ty", "=", "room", ".", "top", "\n", "w", ",", "h", "=", "room", ".", "size", "\n", "\n", "# Ordering of walls is right, down, left, up", "\n", "if", "wall_idx", "==", "0", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "h", "-", "1", ")", ":", "\n", "                ", "self", ".", "grid", ".", "set", "(", "tx", "+", "w", "-", "1", ",", "ty", "+", "i", ",", "None", ")", "\n", "", "", "elif", "wall_idx", "==", "1", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "w", "-", "1", ")", ":", "\n", "                ", "self", ".", "grid", ".", "set", "(", "tx", "+", "i", ",", "ty", "+", "h", "-", "1", ",", "None", ")", "\n", "", "", "elif", "wall_idx", "==", "2", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "h", "-", "1", ")", ":", "\n", "                ", "self", ".", "grid", ".", "set", "(", "tx", ",", "ty", "+", "i", ",", "None", ")", "\n", "", "", "elif", "wall_idx", "==", "3", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "w", "-", "1", ")", ":", "\n", "                ", "self", ".", "grid", ".", "set", "(", "tx", "+", "i", ",", "ty", ",", "None", ")", "\n", "", "", "else", ":", "\n", "            ", "assert", "False", ",", "\"invalid wall index\"", "\n", "\n", "# Mark the rooms as connected", "\n", "", "room", ".", "doors", "[", "wall_idx", "]", "=", "True", "\n", "neighbor", ".", "doors", "[", "(", "wall_idx", "+", "2", ")", "%", "4", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.place_agent": [[284, 304], ["roomgrid.RoomGrid._rand_int", "roomgrid.RoomGrid._rand_int", "super().place_agent", "roomgrid.RoomGrid.grid.get"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.place_agent", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.get"], ["", "def", "place_agent", "(", "self", ",", "i", "=", "None", ",", "j", "=", "None", ",", "rand_dir", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Place the agent in a room\n        \"\"\"", "\n", "\n", "if", "i", "==", "None", ":", "\n", "            ", "i", "=", "self", ".", "_rand_int", "(", "0", ",", "self", ".", "num_cols", ")", "\n", "", "if", "j", "==", "None", ":", "\n", "            ", "j", "=", "self", ".", "_rand_int", "(", "0", ",", "self", ".", "num_rows", ")", "\n", "\n", "", "room", "=", "self", ".", "room_grid", "[", "j", "]", "[", "i", "]", "\n", "\n", "# Find a position that is not right in front of an object", "\n", "while", "True", ":", "\n", "            ", "super", "(", ")", ".", "place_agent", "(", "room", ".", "top", ",", "room", ".", "size", ",", "rand_dir", ",", "max_tries", "=", "1000", ")", "\n", "front_cell", "=", "self", ".", "grid", ".", "get", "(", "*", "self", ".", "front_pos", ")", "\n", "if", "front_cell", "is", "None", "or", "front_cell", ".", "type", "is", "'wall'", ":", "\n", "                ", "break", "\n", "\n", "", "", "return", "self", ".", "agent_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.connect_all": [[305, 360], ["roomgrid.RoomGrid.room_from_pos", "set", "roomgrid.RoomGrid.connect_all.find_reach"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.room_from_pos", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.Grid.set"], ["", "def", "connect_all", "(", "self", ",", "door_colors", "=", "COLOR_NAMES", ",", "max_itrs", "=", "5000", ")", ":", "\n", "        ", "\"\"\"\n        Make sure that all rooms are reachable by the agent from its\n        starting position\n        \"\"\"", "\n", "\n", "start_room", "=", "self", ".", "room_from_pos", "(", "*", "self", ".", "agent_pos", ")", "\n", "\n", "added_doors", "=", "[", "]", "\n", "\n", "def", "find_reach", "(", ")", ":", "\n", "            ", "reach", "=", "set", "(", ")", "\n", "stack", "=", "[", "start_room", "]", "\n", "while", "len", "(", "stack", ")", ">", "0", ":", "\n", "                ", "room", "=", "stack", ".", "pop", "(", ")", "\n", "if", "room", "in", "reach", ":", "\n", "                    ", "continue", "\n", "", "reach", ".", "add", "(", "room", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "4", ")", ":", "\n", "                    ", "if", "room", ".", "doors", "[", "i", "]", ":", "\n", "                        ", "stack", ".", "append", "(", "room", ".", "neighbors", "[", "i", "]", ")", "\n", "", "", "", "return", "reach", "\n", "\n", "", "num_itrs", "=", "0", "\n", "\n", "while", "True", ":", "\n", "# This is to handle rare situations where random sampling produces", "\n", "# a level that cannot be connected, producing in an infinite loop", "\n", "            ", "if", "num_itrs", ">", "max_itrs", ":", "\n", "                ", "raise", "RecursionError", "(", "'connect_all failed'", ")", "\n", "", "num_itrs", "+=", "1", "\n", "\n", "# If all rooms are reachable, stop", "\n", "reach", "=", "find_reach", "(", ")", "\n", "if", "len", "(", "reach", ")", "==", "self", ".", "num_rows", "*", "self", ".", "num_cols", ":", "\n", "                ", "break", "\n", "\n", "# Pick a random room and door position", "\n", "", "i", "=", "self", ".", "_rand_int", "(", "0", ",", "self", ".", "num_cols", ")", "\n", "j", "=", "self", ".", "_rand_int", "(", "0", ",", "self", ".", "num_rows", ")", "\n", "k", "=", "self", ".", "_rand_int", "(", "0", ",", "4", ")", "\n", "room", "=", "self", ".", "get_room", "(", "i", ",", "j", ")", "\n", "\n", "# If there is already a door there, skip", "\n", "if", "not", "room", ".", "door_pos", "[", "k", "]", "or", "room", ".", "doors", "[", "k", "]", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "room", ".", "locked", "or", "room", ".", "neighbors", "[", "k", "]", ".", "locked", ":", "\n", "                ", "continue", "\n", "\n", "", "color", "=", "self", ".", "_rand_elem", "(", "door_colors", ")", "\n", "door", ",", "_", "=", "self", ".", "add_door", "(", "i", ",", "j", ",", "k", ",", "color", ",", "False", ")", "\n", "added_doors", ".", "append", "(", "door", ")", "\n", "\n", "", "return", "added_doors", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.add_distractors": [[361, 398], ["len", "roomgrid.RoomGrid._rand_elem", "roomgrid.RoomGrid._rand_elem", "roomgrid.RoomGrid.add_object", "objs.append", "dists.append", "roomgrid.RoomGrid._rand_int", "roomgrid.RoomGrid._rand_int", "objs.append"], "methods", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.RoomGrid.add_object", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.minigrid.MiniGridEnv._rand_int"], ["", "def", "add_distractors", "(", "self", ",", "i", "=", "None", ",", "j", "=", "None", ",", "num_distractors", "=", "10", ",", "all_unique", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Add random objects that can potentially distract/confuse the agent.\n        \"\"\"", "\n", "\n", "# Collect a list of existing objects", "\n", "objs", "=", "[", "]", "\n", "for", "row", "in", "self", ".", "room_grid", ":", "\n", "            ", "for", "room", "in", "row", ":", "\n", "                ", "for", "obj", "in", "room", ".", "objs", ":", "\n", "                    ", "objs", ".", "append", "(", "(", "obj", ".", "type", ",", "obj", ".", "color", ")", ")", "\n", "\n", "# List of distractors added", "\n", "", "", "", "dists", "=", "[", "]", "\n", "\n", "while", "len", "(", "dists", ")", "<", "num_distractors", ":", "\n", "            ", "color", "=", "self", ".", "_rand_elem", "(", "COLOR_NAMES", ")", "\n", "type", "=", "self", ".", "_rand_elem", "(", "[", "'key'", ",", "'ball'", ",", "'box'", "]", ")", "\n", "obj", "=", "(", "type", ",", "color", ")", "\n", "\n", "if", "all_unique", "and", "obj", "in", "objs", ":", "\n", "                ", "continue", "\n", "\n", "# Add the object to a random room if no room specified", "\n", "", "room_i", "=", "i", "\n", "room_j", "=", "j", "\n", "if", "room_i", "==", "None", ":", "\n", "                ", "room_i", "=", "self", ".", "_rand_int", "(", "0", ",", "self", ".", "num_cols", ")", "\n", "", "if", "room_j", "==", "None", ":", "\n", "                ", "room_j", "=", "self", ".", "_rand_int", "(", "0", ",", "self", ".", "num_rows", ")", "\n", "\n", "", "dist", ",", "pos", "=", "self", ".", "add_object", "(", "room_i", ",", "room_j", ",", "*", "obj", ")", "\n", "\n", "objs", ".", "append", "(", "obj", ")", "\n", "dists", ".", "append", "(", "dist", ")", "\n", "\n", "", "return", "dists", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.roomgrid.reject_next_to": [[3, 13], ["abs", "abs"], "function", ["None"], ["def", "reject_next_to", "(", "env", ",", "pos", ")", ":", "\n", "    ", "\"\"\"\n    Function to filter out object positions that are right next to\n    the agent's starting point\n    \"\"\"", "\n", "\n", "sx", ",", "sy", "=", "env", ".", "agent_pos", "\n", "x", ",", "y", "=", "pos", "\n", "d", "=", "abs", "(", "sx", "-", "x", ")", "+", "abs", "(", "sy", "-", "y", ")", "\n", "return", "d", "<", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.register.register": [[5, 22], ["id.startswith", "gym.envs.registration.register", "env_list.append"], "function", ["home.repos.pwc.inspect_result.LauraRuis_multimodal_seq2seq_gSCAN.gym_minigrid.register.register"], ["def", "register", "(", "\n", "id", ",", "\n", "entry_point", ",", "\n", "reward_threshold", "=", "0.95", "\n", ")", ":", "\n", "    ", "assert", "id", ".", "startswith", "(", "\"MiniGrid-\"", ")", "\n", "assert", "id", "not", "in", "env_list", "\n", "\n", "# Register the environment with OpenAI gym", "\n", "gym_register", "(", "\n", "id", "=", "id", ",", "\n", "entry_point", "=", "entry_point", ",", "\n", "reward_threshold", "=", "reward_threshold", "\n", ")", "\n", "\n", "# Add the environment to the set", "\n", "env_list", ".", "append", "(", "id", ")", "\n", "", ""]]}