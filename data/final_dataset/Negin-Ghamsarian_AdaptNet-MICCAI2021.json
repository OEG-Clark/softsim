{"home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.None.Train_AdaptNet.train_net": [[42, 160], ["utils_Binary.BasicDataset_binary", "torch.utils.data.DataLoader", "len", "utils_Binary.BasicDataset_binary", "torch.utils.data.DataLoader", "len", "torch.utils.tensorboard.SummaryWriter", "logging.info", "torch.optim.SGD", "torch.optim.lr_scheduler.StepLR", "losses_Binary.DiceBCELoss", "range", "utils_Binary.eval_dice_IoU_binary", "utils_Binary.save_metrics", "torch.utils.tensorboard.SummaryWriter.close", "net.parameters", "net.train", "optim.lr_scheduler.StepLR.step", "tqdm.tqdm", "torch.save", "torch.save", "logging.info", "imgs.to.to", "true_masks.to.to", "net", "losses_Binary.DiceBCELoss.", "loss.item", "torch.utils.tensorboard.SummaryWriter.add_scalar", "pbar.set_postfix", "optim.SGD.zero_grad", "criterion.backward", "torch.utils.clip_grad_value_", "optim.SGD.step", "pbar.update", "os.mkdir", "logging.info", "net.state_dict", "loss.item", "net.parameters", "net.named_parameters", "utils_Binary.eval_dice_IoU_binary", "TESTS.append", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_images", "tag.replace.replace", "torch.utils.tensorboard.SummaryWriter.add_histogram", "torch.utils.tensorboard.SummaryWriter.add_histogram", "print", "logging.info", "logging.info", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "loss.item", "value.data.cpu().numpy", "value.grad.data.cpu().numpy", "value.data.cpu", "value.grad.data.cpu"], "function", ["home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.utils_Binary.save_metrics.save_metrics"], ["def", "train_net", "(", "net", ",", "\n", "device", ",", "\n", "epochs", "=", "30", ",", "\n", "batch_size", "=", "1", ",", "\n", "lr", "=", "0.001", ",", "\n", "val_percent", "=", "0.1", ",", "\n", "save_cp", "=", "True", ",", "\n", "img_size", "=", "512", ")", ":", "\n", "\n", "    ", "TESTS", "=", "[", "]", "\n", "train_dataset", "=", "BasicDataset", "(", "dir_train_img", ",", "dir_train_mask", ",", "img_size", ")", "\n", "train_loader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ")", "\n", "n_train", "=", "len", "(", "train_dataset", ")", "\n", "\n", "\n", "\n", "test_dataset", "=", "BasicDataset", "(", "dir_test_img", ",", "dir_test_mask", ",", "img_size", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ")", "\n", "n_test", "=", "len", "(", "test_dataset", ")", "\n", "\n", "\n", "writer", "=", "SummaryWriter", "(", "comment", "=", "f'_iris_AdaptNet_lr_{lr}_BS_{batch_size}_SIZE_{img_size}'", ")", "\n", "global_step", "=", "0", "\n", "\n", "logging", ".", "info", "(", "f'''Starting training:\n        Epochs:          {epochs}\n        Batch size:      {batch_size}\n        Learning rate:   {lr}\n        Training size:   {n_train}\n        Test size:       {n_test}\n        Checkpoints:     {save_cp}\n        Device:          {device.type}\n        Images size:     {img_size}\n    '''", ")", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "momentum", "=", "0.9", ")", "\n", "scheduler", "=", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "step_size", "=", "2", ",", "gamma", "=", "0.8", ")", "\n", "\n", "criterion", "=", "DiceBCELoss", "(", ")", "\n", "\n", "test_counter", "=", "1", "\n", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "        ", "net", ".", "train", "(", ")", "\n", "\n", "epoch_loss", "=", "0", "\n", "with", "tqdm", "(", "total", "=", "n_train", ",", "desc", "=", "f'Epoch {epoch + 1}/{epochs}'", ",", "unit", "=", "'img'", ")", "as", "pbar", ":", "\n", "            ", "for", "batch", "in", "train_loader", ":", "\n", "\n", "                ", "imgs", "=", "batch", "[", "'image'", "]", "\n", "true_masks", "=", "batch", "[", "'mask'", "]", "\n", "\n", "\n", "assert", "imgs", ".", "shape", "[", "1", "]", "==", "net", ".", "n_channels", ",", "f'Network has been defined with {net.n_channels} input channels, '", "f'but loaded images have {imgs.shape[1]} channels. Please check that '", "'the images are loaded correctly.'", "\n", "\n", "imgs", "=", "imgs", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "mask_type", "=", "torch", ".", "float32", "if", "net", ".", "n_classes", "==", "1", "else", "torch", ".", "long", "\n", "true_masks", "=", "true_masks", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "mask_type", ")", "\n", "\n", "masks_pred", "=", "net", "(", "imgs", ")", "\n", "loss_main", "=", "criterion", "(", "masks_pred", ",", "true_masks", ")", "\n", "loss", "=", "loss_main", "\n", "epoch_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "writer", ".", "add_scalar", "(", "'Loss/train'", ",", "loss", ".", "item", "(", ")", ",", "global_step", ")", "\n", "\n", "pbar", ".", "set_postfix", "(", "**", "{", "'loss (batch)'", ":", "loss", ".", "item", "(", ")", "}", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "(", "loss_main", ")", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_value_", "(", "net", ".", "parameters", "(", ")", ",", "0.1", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "pbar", ".", "update", "(", "imgs", ".", "shape", "[", "0", "]", ")", "\n", "global_step", "+=", "1", "\n", "if", "global_step", "%", "(", "n_train", ")", "==", "0", ":", "\n", "                    ", "for", "tag", ",", "value", "in", "net", ".", "named_parameters", "(", ")", ":", "\n", "                        ", "tag", "=", "tag", ".", "replace", "(", "'.'", ",", "'/'", ")", "\n", "writer", ".", "add_histogram", "(", "'weights/'", "+", "tag", ",", "value", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "global_step", ")", "\n", "writer", ".", "add_histogram", "(", "'grads/'", "+", "tag", ",", "value", ".", "grad", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "global_step", ")", "\n", "\n", "", "val1", ",", "val2", ",", "val3", ",", "val4", ",", "val5", ",", "val6", ",", "val7", ",", "val8", "=", "eval_dice_IoU", "(", "net", ",", "test_loader", ",", "device", ",", "test_counter", ",", "save_test", ",", "save", "=", "False", ")", "\n", "\n", "TESTS", ".", "append", "(", "[", "val1", ",", "val2", ",", "val3", ",", "val4", ",", "val5", ",", "val6", ",", "val7", ",", "val8", ",", "epoch_loss", "]", ")", "\n", "\n", "test_counter", "=", "test_counter", "+", "1", "\n", "writer", ".", "add_scalar", "(", "'learning_rate'", ",", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "global_step", ")", "\n", "\n", "if", "net", ".", "n_classes", ">", "1", ":", "\n", "                         ", "print", "(", "\"NOT IMPLEMENTED\"", ")", "\n", "", "else", ":", "\n", "                        ", "logging", ".", "info", "(", "'Validation Dice Coeff: {}'", ".", "format", "(", "val1", ")", ")", "\n", "logging", ".", "info", "(", "'Validation IoU: {}'", ".", "format", "(", "val3", ")", ")", "\n", "writer", ".", "add_scalar", "(", "'test/Dice'", ",", "val1", ",", "global_step", ")", "\n", "writer", ".", "add_scalar", "(", "'test/IoU'", ",", "val3", ",", "global_step", ")", "\n", "\n", "", "writer", ".", "add_images", "(", "'images'", ",", "imgs", ",", "global_step", ")", "\n", "\n", "\n", "", "", "", "scheduler", ".", "step", "(", ")", "\n", "\n", "if", "save_cp", ":", "\n", "            ", "try", ":", "\n", "                ", "os", ".", "mkdir", "(", "dir_checkpoint", ")", "\n", "logging", ".", "info", "(", "'Created checkpoint directory'", ")", "\n", "", "except", "OSError", ":", "\n", "                ", "pass", "\n", "", "torch", ".", "save", "(", "net", ".", "state_dict", "(", ")", ",", "\n", "dir_checkpoint", "+", "f'CP_epoch{epoch + 1}.pth'", ")", "\n", "logging", ".", "info", "(", "f'Checkpoint {epoch + 1} saved !'", ")", "\n", "\n", "", "", "val1", ",", "val2", ",", "val3", ",", "val4", ",", "val5", ",", "val6", ",", "val17", ",", "val18", "=", "eval_dice_IoU", "(", "net", ",", "test_loader", ",", "device", ",", "test_counter", ",", "save_test", ",", "save", "=", "True", ")", "\n", "save_metrics", "(", "TESTS", ",", "csv_name", ")", "\n", "\n", "\n", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.None.Train_AdaptNet.get_args": [[162, 179], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train the UNet on images and target masks'", ",", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'-e'", ",", "'--epochs'", ",", "metavar", "=", "'E'", ",", "type", "=", "int", ",", "default", "=", "30", ",", "\n", "help", "=", "'Number of epochs'", ",", "dest", "=", "'epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'-b'", ",", "'--batch-size'", ",", "metavar", "=", "'B'", ",", "type", "=", "int", ",", "nargs", "=", "'?'", ",", "default", "=", "1", ",", "\n", "help", "=", "'Batch size'", ",", "dest", "=", "'batchsize'", ")", "\n", "parser", ".", "add_argument", "(", "'-l'", ",", "'--learning-rate'", ",", "metavar", "=", "'LR'", ",", "type", "=", "float", ",", "nargs", "=", "'?'", ",", "default", "=", "0.002", ",", "\n", "help", "=", "'Learning rate'", ",", "dest", "=", "'lr'", ")", "\n", "parser", ".", "add_argument", "(", "'-f'", ",", "'--load'", ",", "dest", "=", "'load'", ",", "type", "=", "str", ",", "default", "=", "False", ",", "\n", "help", "=", "'Load model from a .pth file'", ")", "\n", "parser", ".", "add_argument", "(", "'-s'", ",", "'--size'", ",", "dest", "=", "'size'", ",", "type", "=", "float", ",", "default", "=", "512", ",", "\n", "help", "=", "'Downscaling factor of the images'", ")", "\n", "parser", ".", "add_argument", "(", "'-v'", ",", "'--validation'", ",", "dest", "=", "'val'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "\n", "help", "=", "'Percent of the data that is used as validation (0-100)'", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.utils_Binary.dataset_binary.BasicDataset_OneClass.__init__": [[17, 38], ["logging.info", "albumentations.Compose", "os.path.splitext", "os.listdir", "albumentations.OneOf", "albumentations.RandomBrightnessContrast", "albumentations.ShiftScaleRotate", "albumentations.Resize", "file.startswith", "len", "os.listdir", "albumentations.MotionBlur", "albumentations.MedianBlur", "albumentations.Blur"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "imgs_dir", ",", "masks_dir", ",", "size", "=", "512", ",", "mask_suffix", "=", "''", ")", ":", "\n", "        ", "self", ".", "imgs_dir", "=", "imgs_dir", "\n", "self", ".", "masks_dir", "=", "masks_dir", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "mask_suffix", "=", "mask_suffix", "\n", "\n", "\n", "self", ".", "ids", "=", "[", "splitext", "(", "file", ")", "[", "0", "]", "for", "file", "in", "listdir", "(", "imgs_dir", ")", "\n", "if", "not", "file", ".", "startswith", "(", "'.'", ")", "]", "\n", "\n", "logging", ".", "info", "(", "f'Creating dataset with {len(os.listdir(self.imgs_dir))} examples'", ")", "\n", "\n", "self", ".", "augmentation_pipeline", "=", "A", ".", "Compose", "(", "[", "A", ".", "OneOf", "(", "[", "\n", "A", ".", "MotionBlur", "(", "p", "=", ".2", ")", ",", "\n", "A", ".", "MedianBlur", "(", "blur_limit", "=", "3", ",", "p", "=", "0.1", ")", ",", "\n", "A", ".", "Blur", "(", "blur_limit", "=", "3", ",", "p", "=", "0.1", ")", ",", "\n", "]", ",", "p", "=", "0.2", ")", ",", "\n", "A", ".", "RandomBrightnessContrast", "(", ")", ",", "\n", "A", ".", "ShiftScaleRotate", "(", "shift_limit", "=", "0.1", ",", "scale_limit", "=", "0.1", ",", "rotate_limit", "=", "10", ",", "p", "=", "0.5", ")", ",", "\n", "A", ".", "Resize", "(", "self", ".", "size", ",", "self", ".", "size", ")", "\n", "]", ",", "p", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.utils_Binary.dataset_binary.BasicDataset_OneClass.__len__": [[39, 41], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.utils_Binary.dataset_binary.BasicDataset_OneClass.preprocess_im": [[42, 51], ["len", "numpy.expand_dims", "numpy.expand_dims.max"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "preprocess_im", "(", "cls", ",", "img", ")", ":", "\n", "\n", "        ", "if", "len", "(", "img", ".", "shape", ")", "==", "2", ":", "\n", "            ", "img", "=", "np", ".", "expand_dims", "(", "img", ",", "axis", "=", "2", ")", "\n", "", "if", "img", ".", "max", "(", ")", ">", "1", ":", "\n", "            ", "img", "=", "img", "/", "255", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.utils_Binary.dataset_binary.BasicDataset_OneClass.preprocess_mask": [[53, 60], ["len"], "methods", ["None"], ["", "def", "preprocess_mask", "(", "cls", ",", "mask", ")", ":", "\n", "\n", "        ", "if", "len", "(", "mask", ".", "shape", ")", "==", "3", ":", "\n", "           ", "mask", "=", "mask", "[", ":", ",", ":", ",", "0", "]", "\n", "\n", "\n", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.utils_Binary.dataset_binary.BasicDataset_OneClass.__getitem__": [[63, 80], ["matplotlib.imread", "matplotlib.imread", "dataset_binary.BasicDataset_OneClass.preprocess_mask", "dataset_binary.BasicDataset_OneClass.preprocess_im", "dataset_binary.BasicDataset_OneClass.transform", "torch.from_numpy().type().permute", "torch.from_numpy().type", "str", "torch.from_numpy().type", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.utils_Binary.dataset_binary.BasicDataset_OneClass.preprocess_mask", "home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.utils_Binary.dataset_binary.BasicDataset_OneClass.preprocess_im", "home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.utils_Binary.dataset_binary.BasicDataset_OneClass.transform"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "idx", "=", "self", ".", "ids", "[", "i", "]", "\n", "\n", "\n", "image", "=", "plt", ".", "imread", "(", "self", ".", "imgs_dir", "+", "'/'", "+", "idx", "+", "'.png'", ")", "\n", "mask", "=", "plt", ".", "imread", "(", "self", ".", "masks_dir", "+", "'/'", "+", "idx", "+", "'.png'", ")", "\n", "\n", "mask", "=", "self", ".", "preprocess_mask", "(", "mask", ")", "\n", "image", "=", "self", ".", "preprocess_im", "(", "image", ")", "\n", "image", ",", "mask", "=", "self", ".", "transform", "(", "image", ",", "mask", ")", "\n", "\n", "\n", "\n", "return", "{", "\n", "'image'", ":", "torch", ".", "from_numpy", "(", "image", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ",", "\n", "'mask'", ":", "torch", ".", "from_numpy", "(", "mask", ")", ".", "type", "(", "torch", ".", "long", ")", ",", "\n", "'name'", ":", "str", "(", "self", ".", "ids", "[", "i", "]", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.utils_Binary.dataset_binary.BasicDataset_OneClass.transform": [[83, 90], ["dataset_binary.BasicDataset_OneClass.augmentation_pipeline"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "image", ",", "mask", ")", ":", "\n", "\n", "        ", "transformed", "=", "self", ".", "augmentation_pipeline", "(", "image", "=", "image", ",", "mask", "=", "mask", ")", "\n", "transformed_image", "=", "transformed", "[", "'image'", "]", "\n", "transformed_mask", "=", "transformed", "[", "'mask'", "]", "\n", "\n", "return", "transformed_image", ",", "transformed_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.utils_Binary.save_metrics.save_metrics": [[8, 18], ["open", "csv.writer", "csv.writer.writerow", "csv.writer.writerows"], "function", ["None"], ["def", "save_metrics", "(", "values", ",", "name", ")", ":", "\n", "\n", "    ", "fields", "=", "[", "'ave(dice)'", ",", "'std(dice)'", ",", "'ave(IoU)'", ",", "'std(IoU)'", ",", "'min(dice)'", ",", "'min(IoU)'", ",", "'max(dice)'", ",", "'max(IoU)'", ",", "'epoch_loss'", "]", "\n", "\n", "with", "open", "(", "name", ",", "'w'", ")", "as", "f", ":", "\n", "\n", "# using csv.writer method from CSV package ", "\n", "        ", "write", "=", "csv", ".", "writer", "(", "f", ")", "\n", "write", ".", "writerow", "(", "fields", ")", "\n", "write", ".", "writerows", "(", "values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.utils_Binary.eval_dice_IoU_binary.eval_dice_IoU": [[18, 70], ["net.eval", "len", "losses_Binary.DiceLoss", "losses_Binary.IoULoss", "net.train", "os.mkdir", "tqdm.tqdm", "numpy.std", "numpy.std", "min", "min", "max", "max", "imgs.to.to", "true_masks.to.to", "pbar.update", "sum", "sum", "torch.no_grad", "torch.no_grad", "net", "torch.cross_entropy().item", "torch.sigmoid", "torch.sigmoid", "dice.append", "IoU.append", "torch.sigmoid.squeeze", "torchvision.transforms.Compose", "transforms.Compose.", "PIL.Image.fromarray().convert", "full_mask.save.save", "losses_Binary.DiceLoss.item", "losses_Binary.IoULoss.item", "tf.cpu", "torch.cross_entropy", "torchvision.transforms.ToPILImage", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "PIL.Image.fromarray", "losses_Binary.DiceLoss.", "losses_Binary.IoULoss.", "str", "tf.squeeze().cpu().numpy", "str", "tf.squeeze().cpu", "tf.squeeze"], "function", ["None"], ["def", "eval_dice_IoU", "(", "net", ",", "loader", ",", "device", ",", "test_counter", ",", "save_dir", ",", "save", "=", "True", ")", ":", "\n", "    ", "\"\"\"Evaluation without the densecrf with the dice coefficient\"\"\"", "\n", "net", ".", "eval", "(", ")", "\n", "mask_type", "=", "torch", ".", "float32", "if", "net", ".", "n_classes", "==", "1", "else", "torch", ".", "long", "\n", "n_val", "=", "len", "(", "loader", ")", "# the number of batch", "\n", "dice", "=", "[", "]", "\n", "IoU", "=", "[", "]", "\n", "\n", "dice_coeff", "=", "DiceLoss", "(", ")", "\n", "jaccard_index", "=", "IoULoss", "(", ")", "\n", "\n", "try", ":", "\n", "       ", "os", ".", "mkdir", "(", "save_dir", ")", "\n", "", "except", "OSError", ":", "\n", "       ", "pass", "\n", "\n", "", "with", "tqdm", "(", "total", "=", "n_val", ",", "desc", "=", "'Validation round'", ",", "unit", "=", "'batch'", ",", "leave", "=", "False", ")", "as", "pbar", ":", "\n", "        ", "for", "batch", "in", "loader", ":", "\n", "            ", "imgs", ",", "true_masks", ",", "name", "=", "batch", "[", "'image'", "]", ",", "batch", "[", "'mask'", "]", ",", "batch", "[", "'name'", "]", "\n", "imgs", "=", "imgs", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "true_masks", "=", "true_masks", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "mask_type", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "mask_pred", "=", "net", "(", "imgs", ")", "\n", "\n", "", "if", "net", ".", "n_classes", ">", "1", ":", "\n", "                ", "tot", "+=", "F", ".", "cross_entropy", "(", "mask_pred", ",", "true_masks", ")", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "                ", "pred", "=", "torch", ".", "sigmoid", "(", "mask_pred", ")", "\n", "pred", "=", "(", "pred", ">", "0.5", ")", ".", "float", "(", ")", "\n", "dice", ".", "append", "(", "dice_coeff", "(", "pred", ",", "true_masks", ")", ".", "item", "(", ")", ")", "\n", "IoU", ".", "append", "(", "jaccard_index", "(", "pred", ",", "true_masks", ")", ".", "item", "(", ")", ")", "\n", "\n", "", "if", "save", ":", "#test_counter//10 == test_counter/10:", "\n", "                ", "probs", "=", "pred", ".", "squeeze", "(", "0", ")", "\n", "\n", "tf", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "Resize", "(", "512", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "\n", "]", "\n", ")", "\n", "\n", "probs", "=", "tf", "(", "probs", ".", "cpu", "(", ")", ")", "\n", "full_mask", "=", "Image", ".", "fromarray", "(", "probs", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "*", "255", ")", ".", "convert", "(", "'RGB'", ")", "\n", "full_mask", "=", "full_mask", ".", "save", "(", "save_dir", "+", "str", "(", "name", "[", "0", "]", ")", "+", "'_'", "+", "str", "(", "test_counter", ")", "+", "'.png'", ")", "\n", "\n", "", "pbar", ".", "update", "(", ")", "\n", "\n", "", "", "net", ".", "train", "(", ")", "\n", "return", "sum", "(", "dice", ")", "/", "n_val", ",", "np", ".", "std", "(", "dice", ")", ",", "sum", "(", "IoU", ")", "/", "n_val", ",", "np", ".", "std", "(", "IoU", ")", ",", "min", "(", "dice", ")", ",", "min", "(", "IoU", ")", ",", "max", "(", "dice", ")", ",", "max", "(", "IoU", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.losses_Binary.losses.DiceLoss.__init__": [[15, 17], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.net.AdaptNet.AdaptNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weight", "=", "None", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "DiceLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.losses_Binary.losses.DiceLoss.forward": [[18, 31], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "inputs.view.view.view", "targets.view.view.view", "inputs.view.view.sum", "targets.view.view.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ",", "smooth", "=", "1", ")", ":", "\n", "\n", "#comment out if your model contains a sigmoid or equivalent activation layer", "\n", "        ", "inputs", "=", "torch", ".", "sigmoid", "(", "inputs", ")", "\n", "\n", "#flatten label and prediction tensors", "\n", "inputs", "=", "inputs", ".", "view", "(", "-", "1", ")", "\n", "targets", "=", "targets", ".", "view", "(", "-", "1", ")", "\n", "\n", "intersection", "=", "(", "inputs", "*", "targets", ")", ".", "sum", "(", ")", "\n", "dice", "=", "(", "2.", "*", "intersection", "+", "smooth", ")", "/", "(", "inputs", ".", "sum", "(", ")", "+", "targets", ".", "sum", "(", ")", "+", "smooth", ")", "\n", "\n", "return", "1", "-", "dice", "\n", "\n"]], "home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.losses_Binary.losses.DiceBCELoss.__init__": [[34, 36], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.net.AdaptNet.AdaptNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weight", "=", "None", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "DiceBCELoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.losses_Binary.losses.DiceBCELoss.forward": [[37, 53], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "inputs.view.view.view", "targets.view.view.view", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "inputs.view.view.sum", "targets.view.view.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ",", "smooth", "=", "1", ")", ":", "\n", "\n", "#comment out if your model contains a sigmoid or equivalent activation layer", "\n", "        ", "inputs", "=", "torch", ".", "sigmoid", "(", "inputs", ")", "\n", "\n", "#flatten label and prediction tensors", "\n", "inputs", "=", "inputs", ".", "view", "(", "-", "1", ")", "\n", "targets", "=", "targets", ".", "view", "(", "-", "1", ")", "\n", "\n", "intersection", "=", "(", "inputs", "*", "targets", ")", ".", "sum", "(", ")", "\n", "dice_loss", "=", "(", "2.", "*", "intersection", "+", "smooth", ")", "/", "(", "inputs", ".", "sum", "(", ")", "+", "targets", ".", "sum", "(", ")", "+", "smooth", ")", "\n", "BCE", "=", "F", ".", "binary_cross_entropy", "(", "inputs", ",", "targets", ",", "reduction", "=", "'mean'", ")", "\n", "#Dice_BCE = BCE + dice_loss", "\n", "Dice_BCE", "=", "0.8", "*", "BCE", "-", "0.2", "*", "torch", ".", "log", "(", "dice_loss", ")", "\n", "\n", "return", "Dice_BCE", "\n", "\n"]], "home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.losses_Binary.losses.IoULoss.__init__": [[57, 59], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.net.AdaptNet.AdaptNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weight", "=", "None", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "IoULoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.losses_Binary.losses.IoULoss.forward": [[60, 78], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "inputs.view.view.view", "targets.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ",", "smooth", "=", "1", ")", ":", "\n", "\n", "#comment out if your model contains a sigmoid or equivalent activation layer", "\n", "        ", "inputs", "=", "torch", ".", "sigmoid", "(", "inputs", ")", "\n", "\n", "#flatten label and prediction tensors", "\n", "inputs", "=", "inputs", ".", "view", "(", "-", "1", ")", "\n", "targets", "=", "targets", ".", "view", "(", "-", "1", ")", "\n", "\n", "#intersection is equivalent to True Positive count", "\n", "#union is the mutually inclusive area of all labels & predictions ", "\n", "intersection", "=", "(", "inputs", "*", "targets", ")", ".", "sum", "(", ")", "\n", "total", "=", "(", "inputs", "+", "targets", ")", ".", "sum", "(", ")", "\n", "union", "=", "total", "-", "intersection", "\n", "\n", "IoU", "=", "(", "intersection", "+", "smooth", ")", "/", "(", "union", "+", "smooth", ")", "\n", "\n", "return", "1", "-", "IoU", "\n", "\n"]], "home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.net.AdaptNet.VGG_Separate.__init__": [[20, 29], ["torch.Module.__init__", "torchvision.vgg16", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "list", "list", "list", "list", "list", "torchvision.vgg16.features.children", "torchvision.vgg16.features.children", "torchvision.vgg16.features.children", "torchvision.vgg16.features.children", "torchvision.vgg16.features.children"], "methods", ["home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.net.AdaptNet.AdaptNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "VGG_Separate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "vgg_model", "=", "models", ".", "vgg16", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "Conv1", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "vgg_model", ".", "features", ".", "children", "(", ")", ")", "[", "0", ":", "4", "]", ")", "\n", "self", ".", "Conv2", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "vgg_model", ".", "features", ".", "children", "(", ")", ")", "[", "4", ":", "9", "]", ")", "\n", "self", ".", "Conv3", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "vgg_model", ".", "features", ".", "children", "(", ")", ")", "[", "9", ":", "16", "]", ")", "\n", "self", ".", "Conv4", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "vgg_model", ".", "features", ".", "children", "(", ")", ")", "[", "16", ":", "23", "]", ")", "\n", "self", ".", "Conv5", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "vgg_model", ".", "features", ".", "children", "(", ")", ")", "[", "23", ":", "30", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.net.AdaptNet.VGG_Separate.forward": [[30, 38], ["AdaptNet.VGG_Separate.Conv1", "AdaptNet.VGG_Separate.Conv2", "AdaptNet.VGG_Separate.Conv3", "AdaptNet.VGG_Separate.Conv4", "AdaptNet.VGG_Separate.Conv5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out1", "=", "self", ".", "Conv1", "(", "x", ")", "\n", "out2", "=", "self", ".", "Conv2", "(", "out1", ")", "\n", "out3", "=", "self", ".", "Conv3", "(", "out2", ")", "\n", "out4", "=", "self", ".", "Conv4", "(", "out3", ")", "\n", "out5", "=", "self", ".", "Conv5", "(", "out4", ")", "\n", "\n", "return", "out1", ",", "out2", ",", "out3", ",", "out4", ",", "out5", "\n", "\n"]], "home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.net.AdaptNet.Pool_up.__init__": [[42, 47], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Upsample", "torch.Upsample", "torch.Upsample"], "methods", ["home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.net.AdaptNet.AdaptNet.__init__"], ["      ", "def", "__init__", "(", "self", ",", "pool_kernel_size", ",", "up_size", ")", ":", "\n", "          ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "pool", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "pool_kernel_size", ",", "stride", "=", "pool_kernel_size", ",", "padding", "=", "0", ")", "\n", "self", ".", "up", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "up_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.net.AdaptNet.Pool_up.forward": [[49, 55], ["AdaptNet.Pool_up.pool", "AdaptNet.Pool_up.up"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "          ", "y1", "=", "self", ".", "pool", "(", "x", ")", "\n", "y2", "=", "self", ".", "up", "(", "y1", ")", "\n", "\n", "\n", "return", "y1", ",", "y2", "\n", "\n"]], "home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.net.AdaptNet.Global_Pool_up.__init__": [[58, 63], ["torch.Module.__init__", "torch.AdaptiveMaxPool2d", "torch.AdaptiveMaxPool2d", "torch.AdaptiveMaxPool2d", "torch.Upsample", "torch.Upsample", "torch.Upsample"], "methods", ["home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.net.AdaptNet.AdaptNet.__init__"], ["      ", "def", "__init__", "(", "self", ",", "input_size", ")", ":", "\n", "          ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "pool", "=", "nn", ".", "AdaptiveMaxPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "up", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "input_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.net.AdaptNet.Global_Pool_up.forward": [[65, 71], ["AdaptNet.Global_Pool_up.pool", "AdaptNet.Global_Pool_up.up"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "          ", "y1", "=", "self", ".", "pool", "(", "x", ")", "\n", "y2", "=", "self", ".", "up", "(", "y1", ")", "\n", "\n", "\n", "return", "y2", "\n", "\n"]], "home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.net.AdaptNet.Cascade_Pooling.__init__": [[74, 87], ["torch.Module.__init__", "AdaptNet.Pool_up", "AdaptNet.Pool_up", "AdaptNet.Pool_up", "AdaptNet.Global_Pool_up", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.net.AdaptNet.AdaptNet.__init__"], ["      ", "def", "__init__", "(", "self", ",", "input_channels", ",", "input_size", ")", ":", "\n", "          ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "pool1", "=", "Pool_up", "(", "2", ",", "2", ")", "\n", "self", ".", "pool2", "=", "Pool_up", "(", "2", ",", "4", ")", "\n", "self", ".", "pool3", "=", "Pool_up", "(", "2", ",", "8", ")", "\n", "self", ".", "pool4", "=", "Global_Pool_up", "(", "input_size", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "input_channels", "*", "5", ",", "input_channels", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "groups", "=", "input_channels", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "input_channels", ",", "input_channels", "//", "4", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "2", "*", "input_channels", ",", "input_channels", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "out", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "LayerNorm", "(", "[", "input_size", ",", "input_size", "]", ",", "elementwise_affine", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.net.AdaptNet.Cascade_Pooling.forward": [[88, 116], ["AdaptNet.Cascade_Pooling.pool1", "AdaptNet.Cascade_Pooling.pool2", "AdaptNet.Cascade_Pooling.pool3", "AdaptNet.Cascade_Pooling.pool4", "z1.unsqueeze", "z2.unsqueeze", "z3.unsqueeze", "AdaptNet.Cascade_Pooling.unsqueeze", "x.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "AdaptNet.Cascade_Pooling.fc", "AdaptNet.Cascade_Pooling.conv", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "AdaptNet.Cascade_Pooling.conv1", "AdaptNet.Cascade_Pooling.out"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "          ", "y1", ",", "z1", "=", "self", ".", "pool1", "(", "x", ")", "\n", "y2", ",", "z2", "=", "self", ".", "pool2", "(", "y1", ")", "\n", "y3", ",", "z3", "=", "self", ".", "pool3", "(", "y2", ")", "\n", "z4", "=", "self", ".", "pool4", "(", "y3", ")", "\n", "\n", "z11", "=", "z1", ".", "unsqueeze", "(", "2", ")", "\n", "z21", "=", "z2", ".", "unsqueeze", "(", "2", ")", "\n", "z31", "=", "z3", ".", "unsqueeze", "(", "2", ")", "\n", "z41", "=", "z4", ".", "unsqueeze", "(", "2", ")", "\n", "x1", "=", "x", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "k1", "=", "torch", ".", "cat", "(", "[", "x1", ",", "z11", ",", "z21", ",", "z31", ",", "z41", "]", ",", "dim", "=", "2", ")", "\n", "k1", "=", "torch", ".", "flatten", "(", "k1", ",", "start_dim", "=", "1", ",", "end_dim", "=", "2", ")", "\n", "k1", "=", "self", ".", "fc", "(", "k1", ")", "\n", "\n", "z12", "=", "self", ".", "conv", "(", "z1", ")", "\n", "weights", "=", "self", ".", "conv", ".", "weight", "\n", "z22", "=", "F", ".", "conv2d", "(", "z2", ",", "weights", ",", "padding", "=", "1", ")", "\n", "z32", "=", "F", ".", "conv2d", "(", "z3", ",", "weights", ",", "padding", "=", "1", ")", "\n", "z42", "=", "F", ".", "conv2d", "(", "z4", ",", "weights", ",", "padding", "=", "1", ")", "\n", "\n", "k2", "=", "torch", ".", "cat", "(", "[", "k1", ",", "z12", ",", "z22", ",", "z32", ",", "z42", "]", ",", "dim", "=", "1", ")", "\n", "\n", "k3", "=", "self", ".", "conv1", "(", "k2", ")", "\n", "\n", "return", "self", ".", "out", "(", "k3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.net.AdaptNet.Up.__init__": [[121, 126], ["torch.Module.__init__", "torch.Upsample", "torch.Upsample", "torch.Upsample", "AdaptNet.Cascade_Reception"], "methods", ["home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.net.AdaptNet.AdaptNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "input_size", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "up", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "self", ".", "conv", "=", "Cascade_Reception", "(", "in_channels", ",", "out_channels", ",", "input_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.net.AdaptNet.Up.forward": [[128, 132], ["AdaptNet.Up.up", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "AdaptNet.Up.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "x1", "=", "self", ".", "up", "(", "x1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x2", ",", "x1", "]", ",", "dim", "=", "1", ")", "\n", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.net.AdaptNet.Cascade_Reception.__init__": [[135, 154], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "AdaptNet.DeformConv", "AdaptNet.DeformConv", "AdaptNet.DeformConv", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Softmax2d", "torch.Softmax2d", "torch.Softmax2d", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.net.AdaptNet.AdaptNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "input_size", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv0", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "LNR", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "LayerNorm", "(", "[", "input_size", ",", "input_size", "]", ",", "elementwise_affine", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "conv_d1", "=", "DeformConv", "(", "out_channels", ",", "out_channels", ",", "input_size", ")", "\n", "self", ".", "conv_d2", "=", "DeformConv", "(", "out_channels", ",", "out_channels", ",", "input_size", ")", "\n", "self", ".", "conv_d3", "=", "DeformConv", "(", "out_channels", ",", "out_channels", ",", "input_size", ")", "\n", "\n", "self", ".", "conv_share3", "=", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_share1", "=", "nn", ".", "Conv2d", "(", "out_channels", ",", "1", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "self", ".", "out", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "LayerNorm", "(", "[", "input_size", ",", "input_size", "]", ",", "elementwise_affine", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "soft", "=", "nn", ".", "Softmax2d", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.net.AdaptNet.Cascade_Reception.forward": [[155, 185], ["AdaptNet.Cascade_Reception.LNR", "AdaptNet.Cascade_Reception.conv_d1", "AdaptNet.Cascade_Reception.conv_d2", "AdaptNet.Cascade_Reception.conv_d3", "AdaptNet.Cascade_Reception.conv_share3", "AdaptNet.Cascade_Reception.conv_share1", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "AdaptNet.Cascade_Reception.soft", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "AdaptNet.Cascade_Reception.out", "AdaptNet.Cascade_Reception.conv0", "soft[].unsqueeze", "soft[].unsqueeze", "soft[].unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "LNR", "(", "self", ".", "conv0", "(", "x", ")", ")", "\n", "y1", "=", "self", ".", "conv_d1", "(", "x", ")", "\n", "y2", "=", "self", ".", "conv_d2", "(", "y1", ")", "\n", "y3", "=", "self", ".", "conv_d3", "(", "y2", ")", "\n", "\n", "y11", "=", "self", ".", "conv_share3", "(", "y1", ")", "\n", "y12", "=", "self", ".", "conv_share1", "(", "y11", ")", "\n", "\n", "weight3", "=", "self", ".", "conv_share3", ".", "weight", "\n", "weight1", "=", "self", ".", "conv_share1", ".", "weight", "\n", "\n", "y21", "=", "F", ".", "conv2d", "(", "y2", ",", "weight3", ",", "padding", "=", "1", ")", "\n", "y22", "=", "F", ".", "conv2d", "(", "y21", ",", "weight1", ",", "padding", "=", "0", ")", "\n", "\n", "y31", "=", "F", ".", "conv2d", "(", "y3", ",", "weight3", ",", "padding", "=", "1", ")", "\n", "y32", "=", "F", ".", "conv2d", "(", "y31", ",", "weight1", ",", "padding", "=", "0", ")", "\n", "\n", "\n", "concat", "=", "torch", ".", "cat", "(", "[", "y12", ",", "y22", ",", "y32", "]", ",", "dim", "=", "1", ")", "\n", "soft", "=", "self", ".", "soft", "(", "concat", ")", "\n", "\n", "y11", "=", "torch", ".", "mul", "(", "y11", ",", "soft", "[", ":", ",", "0", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "-", "3", ")", ")", "\n", "y21", "=", "torch", ".", "mul", "(", "y21", ",", "soft", "[", ":", ",", "1", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "-", "3", ")", ")", "\n", "y31", "=", "torch", ".", "mul", "(", "y31", ",", "soft", "[", ":", ",", "2", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "-", "3", ")", ")", "\n", "\n", "y", "=", "y11", "+", "y21", "+", "y31", "\n", "\n", "return", "self", ".", "out", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.net.AdaptNet.Deform.__init__": [[190, 197], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Hardtanh", "torch.Hardtanh", "torch.Hardtanh", "torchvision.ops.DeformConv2d"], "methods", ["home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.net.AdaptNet.AdaptNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "dilate", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "offset", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "2", "*", "kernel_size", "*", "kernel_size", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", "\n", "self", ".", "tan", "=", "nn", ".", "Hardtanh", "(", ")", "\n", "self", ".", "deform", "=", "DeformConv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "dilate", ",", "dilation", "=", "dilate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.net.AdaptNet.Deform.forward": [[199, 207], ["AdaptNet.Deform.offset", "AdaptNet.Deform.tan", "AdaptNet.Deform.deform"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "off", "=", "self", ".", "offset", "(", "x", ")", "\n", "off1", "=", "self", ".", "tan", "(", "off", ")", "\n", "out", "=", "self", ".", "deform", "(", "x", ",", "off1", ")", "\n", "weights", "=", "self", ".", "deform", ".", "weight", "\n", "\n", "return", "out", ",", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.net.AdaptNet.DeformConv.__init__": [[211, 220], ["torch.Module.__init__", "AdaptNet.Deform", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Softmax2d", "torch.Softmax2d", "torch.Softmax2d"], "methods", ["home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.net.AdaptNet.AdaptNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "input_size", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "Deform", "(", "in_channels", ",", "in_channels", ",", "kernel_size", "=", "3", ",", "dilate", "=", "1", ")", "\n", "\n", "self", ".", "conv_share3", "=", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_share1", "=", "nn", ".", "Conv2d", "(", "out_channels", ",", "1", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "self", ".", "soft", "=", "nn", ".", "Softmax2d", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.net.AdaptNet.DeformConv.forward": [[221, 244], ["AdaptNet.DeformConv.conv1", "torch.conv2d", "torch.conv2d", "torch.conv2d", "AdaptNet.DeformConv.conv_share3", "torch.conv2d", "torch.conv2d", "torch.conv2d", "AdaptNet.DeformConv.conv_share1", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "AdaptNet.DeformConv.soft", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "soft[].unsqueeze", "soft[].unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\n", "        ", "x1", ",", "weights", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x0", "=", "F", ".", "conv2d", "(", "x", ",", "weights", ",", "padding", "=", "1", ")", "\n", "\n", "x11", "=", "self", ".", "conv_share3", "(", "x1", ")", "\n", "weight3", "=", "self", ".", "conv_share3", ".", "weight", "\n", "x01", "=", "F", ".", "conv2d", "(", "x0", ",", "weight3", ",", "padding", "=", "1", ")", "\n", "\n", "x12", "=", "self", ".", "conv_share1", "(", "x11", ")", "\n", "weight1", "=", "self", ".", "conv_share1", ".", "weight", "\n", "x02", "=", "F", ".", "conv2d", "(", "x01", ",", "weight1", ",", "padding", "=", "0", ")", "\n", "\n", "concat", "=", "torch", ".", "cat", "(", "[", "x02", ",", "x12", "]", ",", "dim", "=", "1", ")", "\n", "soft", "=", "self", ".", "soft", "(", "concat", ")", "\n", "\n", "y11", "=", "torch", ".", "mul", "(", "x11", ",", "soft", "[", ":", ",", "1", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "-", "3", ")", ")", "\n", "y01", "=", "torch", ".", "mul", "(", "x01", ",", "soft", "[", ":", ",", "0", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "-", "3", ")", ")", "\n", "\n", "y", "=", "y11", "+", "y01", "\n", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.net.AdaptNet.OutConv.__init__": [[248, 251], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.net.AdaptNet.AdaptNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "OutConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.net.AdaptNet.OutConv.forward": [[252, 254], ["AdaptNet.OutConv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.net.AdaptNet.AdaptNet.__init__": [[257, 273], ["torch.Module.__init__", "AdaptNet.VGG_Separate", "AdaptNet.Cascade_Pooling", "AdaptNet.Up", "AdaptNet.Up", "AdaptNet.Up", "AdaptNet.Up", "AdaptNet.OutConv"], "methods", ["home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.net.AdaptNet.AdaptNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channels", ",", "n_classes", ",", "bilinear", "=", "True", ")", ":", "\n", "        ", "super", "(", "AdaptNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_channels", "=", "n_channels", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "bilinear", "=", "bilinear", "\n", "\n", "self", ".", "Backbone", "=", "VGG_Separate", "(", ")", "\n", "\n", "self", ".", "glob1", "=", "Cascade_Pooling", "(", "input_channels", "=", "512", ",", "input_size", "=", "32", ")", "\n", "\n", "self", ".", "up1", "=", "Up", "(", "1024", ",", "256", ",", "64", ")", "\n", "self", ".", "up2", "=", "Up", "(", "512", ",", "128", ",", "128", ")", "\n", "self", ".", "up3", "=", "Up", "(", "256", ",", "64", ",", "256", ")", "\n", "self", ".", "up4", "=", "Up", "(", "128", ",", "32", ",", "512", ")", "\n", "\n", "self", ".", "outc", "=", "OutConv", "(", "32", ",", "n_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Negin-Ghamsarian_AdaptNet-MICCAI2021.net.AdaptNet.AdaptNet.forward": [[275, 288], ["AdaptNet.AdaptNet.Backbone", "AdaptNet.AdaptNet.glob1", "AdaptNet.AdaptNet.up1", "AdaptNet.AdaptNet.up2", "AdaptNet.AdaptNet.up3", "AdaptNet.AdaptNet.up4", "AdaptNet.AdaptNet.outc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "out5", ",", "out4", ",", "out3", ",", "out2", ",", "out1", "=", "self", ".", "Backbone", "(", "x", ")", "\n", "out1", "=", "self", ".", "glob1", "(", "out1", ")", "\n", "\n", "x1", "=", "self", ".", "up1", "(", "out1", ",", "out2", ")", "\n", "x2", "=", "self", ".", "up2", "(", "x1", ",", "out3", ")", "\n", "x3", "=", "self", ".", "up3", "(", "x2", ",", "out4", ")", "\n", "x4", "=", "self", ".", "up4", "(", "x3", ",", "out5", ")", "\n", "logits", "=", "self", ".", "outc", "(", "x4", ")", "\n", "\n", "\n", "return", "logits", "\n", "\n"]]}