{"home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.logging.SmoothedValue.__init__": [[43, 48], ["collections.deque"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "window_size", ")", ":", "\n", "        ", "self", ".", "deque", "=", "deque", "(", "maxlen", "=", "window_size", ")", "\n", "self", ".", "series", "=", "[", "]", "\n", "self", ".", "total", "=", "0.0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.logging.SmoothedValue.AddValue": [[49, 54], ["logging.SmoothedValue.deque.append", "logging.SmoothedValue.series.append"], "methods", ["None"], ["", "def", "AddValue", "(", "self", ",", "value", ",", "size", "=", "1", ")", ":", "\n", "        ", "self", ".", "deque", ".", "append", "(", "value", ")", "\n", "self", ".", "series", ".", "append", "(", "value", ")", "\n", "self", ".", "count", "+=", "size", "\n", "self", ".", "total", "+=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.logging.SmoothedValue.GetMedianValue": [[55, 57], ["numpy.median"], "methods", ["None"], ["", "def", "GetMedianValue", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "median", "(", "self", ".", "deque", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.logging.SmoothedValue.GetAverageValue": [[58, 60], ["numpy.mean"], "methods", ["None"], ["", "def", "GetAverageValue", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "mean", "(", "self", ".", "deque", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.logging.SmoothedValue.GetGlobalAverageValue": [[61, 63], ["None"], "methods", ["None"], ["", "def", "GetGlobalAverageValue", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.logging.SmoothedValue.ClearValue": [[64, 67], ["None"], "methods", ["None"], ["", "def", "ClearValue", "(", "self", ")", ":", "\n", "        ", "self", ".", "count", "=", "0", "\n", "self", ".", "total", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.logging.log_stats": [[16, 37], ["logging.getLogger", "logging.getLogger.info", "stats[].items", "stats[].items", "stats[].items"], "function", ["None"], ["def", "log_stats", "(", "stats", ",", "args", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\"\"\"Log training statistics to terminal\"\"\"", "\n", "lines", "=", "\"[Step %d/%d] [Epoch %d/%d]  [%s]\\n\"", "%", "(", "\n", "stats", "[", "'iter'", "]", ",", "cfg", ".", "TRAIN", ".", "MAX_ITER", ",", "stats", "[", "'epoch'", "]", ",", "args", ".", "epoch", ",", "args", ".", "dataset", ")", "\n", "\n", "lines", "+=", "\"\\t\\tloss: %.3f,    time: %.6f,    eta: %s\\n\"", "%", "(", "\n", "stats", "[", "'total_loss'", "]", ",", "stats", "[", "'time'", "]", ",", "stats", "[", "'eta'", "]", ")", "\n", "\n", "for", "k", "in", "stats", ":", "\n", "        ", "if", "'loss'", "in", "k", "and", "'total_loss'", "not", "in", "k", ":", "\n", "            ", "lines", "+=", "\"\\t\\t\"", "+", "\", \"", ".", "join", "(", "\"%s: %.3f\"", "%", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "stats", "[", "k", "]", ".", "items", "(", ")", ")", "+", "\", \"", "\n", "\n", "# validate criteria", "\n", "", "", "lines", "+=", "\"\\t\\t\"", "+", "\",       \"", ".", "join", "(", "\"%s: %.6f\"", "%", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "stats", "[", "'val_err'", "]", ".", "items", "(", ")", ")", "+", "\", \"", "\n", "lines", "+=", "'\\n'", "\n", "\n", "# lr in different groups", "\n", "lines", "+=", "\"\\t\\t\"", "+", "\",       \"", ".", "join", "(", "\"%s: %.6f\"", "%", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "stats", "[", "'lr'", "]", ".", "items", "(", ")", ")", "+", "\", \"", "\n", "lines", "+=", "'\\n'", "\n", "logger", ".", "info", "(", "lines", "[", ":", "-", "1", "]", ")", "# remove last new linen_pxl", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.logging.setup_logging": [[69, 77], ["logging.basicConfig", "logging.getLogger"], "function", ["None"], ["", "", "def", "setup_logging", "(", "name", ")", ":", "\n", "    ", "FORMAT", "=", "'%(levelname)s %(filename)s:%(lineno)4d: %(message)s'", "\n", "# Manually clear root loggers to prevent any module that may have called", "\n", "# logging.basicConfig() from blocking our logging setup", "\n", "logging", ".", "root", ".", "handlers", "=", "[", "]", "\n", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ",", "format", "=", "FORMAT", ",", "stream", "=", "sys", ".", "stdout", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.logging.setup_distributed_logger": [[79, 97], ["logging.getLogger", "logging.getLogger.setLevel", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.Formatter", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "os.path.join"], "function", ["None"], ["", "def", "setup_distributed_logger", "(", "name", ",", "save_dir", ",", "distributed_rank", ",", "filename", "=", "\"log.txt\"", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "# don't log results for the non-master process", "\n", "if", "distributed_rank", ">", "0", ":", "\n", "        ", "return", "logger", "\n", "", "ch", "=", "logging", ".", "StreamHandler", "(", "stream", "=", "sys", ".", "stdout", ")", "\n", "ch", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\"%(asctime)s %(name)s %(levelname)s: %(message)s\"", ")", "\n", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "ch", ")", "\n", "\n", "if", "save_dir", ":", "\n", "        ", "fh", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "filename", ")", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.comm.get_world_size": [[12, 18], ["torch.get_world_size", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.comm.get_world_size"], ["def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.comm.get_rank": [[20, 26], ["torch.get_rank", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.comm.get_rank"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.comm.is_main_process": [[28, 30], ["comm.get_rank"], "function", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.comm.get_rank"], ["", "def", "is_main_process", "(", ")", ":", "\n", "    ", "return", "get_rank", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.comm.synchronize": [[32, 45], ["torch.get_world_size", "torch.barrier", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.comm.get_world_size"], ["", "def", "synchronize", "(", ")", ":", "\n", "    ", "\"\"\"\n    Helper function to synchronize (barrier) among all processes when\n    using distributed training\n    \"\"\"", "\n", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "\n", "", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.comm.all_gather": [[47, 88], ["comm.get_world_size", "pickle.dumps", "torch.ByteStorage.from_buffer", "torch.ByteStorage.from_buffer", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.IntTensor().to", "torch.IntTensor().to", "torch.all_gather", "max", "torch.all_gather", "zip", "torch.IntTensor().to", "torch.IntTensor().to", "int", "tensor_list.append", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.cat", "torch.cat", "data_list.append", "torch.ByteTensor", "torch.ByteTensor", "torch.IntTensor", "torch.IntTensor", "range", "size.item", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.cat.cpu().numpy().tobytes", "pickle.loads", "torch.IntTensor", "torch.IntTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.cat.numel", "torch.ByteTensor", "torch.ByteTensor", "torch.cat.cpu().numpy", "torch.cat.cpu"], "function", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.comm.get_world_size", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.comm.all_gather", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.comm.all_gather"], ["", "def", "all_gather", "(", "data", ")", ":", "\n", "    ", "\"\"\"\n    Run all_gather on arbitrary picklable data (not necessarily tensors)\n    Args:\n        data: any picklable object\n    Returns:\n        list[data]: list of data gathered from each rank\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "[", "data", "]", "\n", "\n", "# serialized to a Tensor", "\n", "", "buffer", "=", "pickle", ".", "dumps", "(", "data", ")", "\n", "storage", "=", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "buffer", ")", "\n", "tensor", "=", "torch", ".", "ByteTensor", "(", "storage", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "\n", "# obtain Tensor size of each rank", "\n", "local_size", "=", "torch", ".", "IntTensor", "(", "[", "tensor", ".", "numel", "(", ")", "]", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "size_list", "=", "[", "torch", ".", "IntTensor", "(", "[", "0", "]", ")", ".", "to", "(", "\"cuda\"", ")", "for", "_", "in", "range", "(", "world_size", ")", "]", "\n", "dist", ".", "all_gather", "(", "size_list", ",", "local_size", ")", "\n", "size_list", "=", "[", "int", "(", "size", ".", "item", "(", ")", ")", "for", "size", "in", "size_list", "]", "\n", "max_size", "=", "max", "(", "size_list", ")", "\n", "\n", "# receiving Tensor from all ranks", "\n", "# we pad the tensor because torch all_gather does not support", "\n", "# gathering tensors of different shapes", "\n", "tensor_list", "=", "[", "]", "\n", "for", "_", "in", "size_list", ":", "\n", "        ", "tensor_list", ".", "append", "(", "torch", ".", "ByteTensor", "(", "size", "=", "(", "max_size", ",", ")", ")", ".", "to", "(", "\"cuda\"", ")", ")", "\n", "", "if", "local_size", "!=", "max_size", ":", "\n", "        ", "padding", "=", "torch", ".", "ByteTensor", "(", "size", "=", "(", "max_size", "-", "local_size", ",", ")", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "tensor", "=", "torch", ".", "cat", "(", "(", "tensor", ",", "padding", ")", ",", "dim", "=", "0", ")", "\n", "", "dist", ".", "all_gather", "(", "tensor_list", ",", "tensor", ")", "\n", "\n", "data_list", "=", "[", "]", "\n", "for", "size", ",", "tensor", "in", "zip", "(", "size_list", ",", "tensor_list", ")", ":", "\n", "        ", "buffer", "=", "tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", "[", ":", "size", "]", "\n", "data_list", ".", "append", "(", "pickle", ".", "loads", "(", "buffer", ")", ")", "\n", "\n", "", "return", "data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.comm.reduce_dict": [[90, 117], ["comm.get_world_size", "torch.no_grad", "torch.no_grad", "sorted", "torch.stack", "torch.stack", "torch.reduce", "input_dict.keys", "names.append", "torch.stack.append", "torch.get_rank", "zip"], "function", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.comm.get_world_size", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.comm.get_rank"], ["", "def", "reduce_dict", "(", "input_dict", ",", "average", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        input_dict (dict): all the values will be reduced\n        average (bool): whether to do average or sum\n    Reduce the values in the dictionary from all processes so that process with rank\n    0 has the averaged results. Returns a dict with the same fields as\n    input_dict, after reduction.\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "input_dict", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "names", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "# sort the keys so that they are consistent across processes", "\n", "for", "k", "in", "sorted", "(", "input_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "names", ".", "append", "(", "k", ")", "\n", "values", ".", "append", "(", "input_dict", "[", "k", "]", ")", "\n", "", "values", "=", "torch", ".", "stack", "(", "values", ",", "dim", "=", "0", ")", "\n", "dist", ".", "reduce", "(", "values", ",", "dst", "=", "0", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", "and", "average", ":", "\n", "# only main process gets accumulated, so only divide by", "\n", "# world_size in this case", "\n", "            ", "values", "/=", "world_size", "\n", "", "reduced_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "names", ",", "values", ")", "}", "\n", "", "return", "reduced_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.comm.is_pytorch_1_1_0_or_later": [[119, 121], ["int", "[].split", "torch.__version__.split", "torch.__version__.split"], "function", ["None"], ["", "def", "is_pytorch_1_1_0_or_later", "(", ")", ":", "\n", "    ", "return", "[", "int", "(", "_", ")", "for", "_", "in", "torch", ".", "__version__", ".", "split", "(", "\"+\"", ")", "[", "0", "]", ".", "split", "(", "\".\"", ")", "[", ":", "3", "]", "]", ">=", "[", "1", ",", "1", ",", "0", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.timer.Timer.__init__": [[12, 14], ["timer.Timer.reset"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.timer.Timer.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.timer.Timer.tic": [[15, 19], ["time.time"], "methods", ["None"], ["", "def", "tic", "(", "self", ")", ":", "\n", "# using time.time instead of time.clock because time time.clock", "\n", "# does not normalize for multithreading", "\n", "    ", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.timer.Timer.toc": [[20, 29], ["time.time"], "methods", ["None"], ["", "def", "toc", "(", "self", ",", "average", "=", "True", ")", ":", "\n", "    ", "self", ".", "diff", "=", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "\n", "self", ".", "total_time", "+=", "self", ".", "diff", "\n", "self", ".", "calls", "+=", "1", "\n", "self", ".", "average_time", "=", "self", ".", "total_time", "/", "self", ".", "calls", "\n", "if", "average", ":", "\n", "      ", "return", "self", ".", "average_time", "\n", "", "else", ":", "\n", "      ", "return", "self", ".", "diff", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.timer.Timer.reset": [[30, 36], ["None"], "methods", ["None"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "    ", "self", ".", "total_time", "=", "0.", "\n", "self", ".", "calls", "=", "0", "\n", "self", ".", "start_time", "=", "0.", "\n", "self", ".", "diff", "=", "0.", "\n", "self", ".", "average_time", "=", "0.", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.evaluate_depth_error.recover_metric_depth": [[7, 31], ["gt.cpu().numpy.squeeze", "pred.cpu().numpy.squeeze", "numpy.polyfit", "pred.cpu().numpy.cpu().numpy", "gt.cpu().numpy.cpu().numpy", "mask0.cpu().numpy.squeeze", "numpy.mean", "numpy.mean", "type", "type", "mask0.cpu().numpy.sum", "mask0.cpu().numpy.cpu().numpy", "pred.cpu().numpy.cpu", "gt.cpu().numpy.cpu", "type", "mask0.cpu().numpy.cpu"], "function", ["None"], ["def", "recover_metric_depth", "(", "pred", ",", "gt", ",", "mask0", "=", "None", ")", ":", "\n", "    ", "if", "type", "(", "pred", ")", ".", "__module__", "==", "torch", ".", "__name__", ":", "\n", "        ", "pred", "=", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "type", "(", "gt", ")", ".", "__module__", "==", "torch", ".", "__name__", ":", "\n", "        ", "gt", "=", "gt", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "gt", "=", "gt", ".", "squeeze", "(", ")", "\n", "pred", "=", "pred", ".", "squeeze", "(", ")", "\n", "mask", "=", "(", "gt", ">", "1e-8", ")", "#& (pred > 1e-8)", "\n", "if", "mask0", "is", "not", "None", "and", "mask0", ".", "sum", "(", ")", ">", "0", ":", "\n", "        ", "if", "type", "(", "mask0", ")", ".", "__module__", "==", "torch", ".", "__name__", ":", "\n", "            ", "mask0", "=", "mask0", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "mask0", "=", "mask0", ".", "squeeze", "(", ")", "\n", "mask0", "=", "mask0", ">", "0", "\n", "mask", "=", "mask", "&", "mask0", "\n", "", "gt_mask", "=", "gt", "[", "mask", "]", "\n", "pred_mask", "=", "pred", "[", "mask", "]", "\n", "a", ",", "b", "=", "np", ".", "polyfit", "(", "pred_mask", ",", "gt_mask", ",", "deg", "=", "1", ")", "\n", "if", "a", ">", "0", ":", "\n", "        ", "pred_metric", "=", "a", "*", "pred", "+", "b", "\n", "", "else", ":", "\n", "        ", "pred_mean", "=", "np", ".", "mean", "(", "pred_mask", ")", "\n", "gt_mean", "=", "np", ".", "mean", "(", "gt_mask", ")", "\n", "pred_metric", "=", "pred", "*", "(", "gt_mean", "/", "pred_mean", ")", "\n", "", "return", "pred_metric", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.evaluate_depth_error.validate_rel_depth_err": [[33, 70], ["numpy.squeeze", "numpy.squeeze", "numpy.sum", "smoothed_criteria[].AddValue", "evaluate_depth_error.weighted_human_disagreement_rate", "smoothed_criteria[].AddValue", "pred.cpu().numpy.cpu().numpy", "gt.cpu().numpy.cpu().numpy", "logger.info", "numpy.abs", "numpy.float64", "numpy.float64", "type", "type", "pred.cpu().numpy.cpu", "gt.cpu().numpy.cpu"], "function", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.logging.SmoothedValue.AddValue", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.evaluate_depth_error.weighted_human_disagreement_rate", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.logging.SmoothedValue.AddValue"], ["", "def", "validate_rel_depth_err", "(", "pred", ",", "gt", ",", "smoothed_criteria", ",", "mask", "=", "None", ",", "scale", "=", "10.", ")", ":", "\n", "    ", "if", "type", "(", "pred", ")", ".", "__module__", "==", "torch", ".", "__name__", ":", "\n", "        ", "pred", "=", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "type", "(", "gt", ")", ".", "__module__", "==", "torch", ".", "__name__", ":", "\n", "        ", "gt", "=", "gt", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "gt", "=", "np", ".", "squeeze", "(", "gt", ")", "\n", "pred", "=", "np", ".", "squeeze", "(", "pred", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "gt", "=", "gt", "[", "mask", "[", "0", "]", ":", "mask", "[", "1", "]", ",", "mask", "[", "2", "]", ":", "mask", "[", "3", "]", "]", "\n", "pred", "=", "pred", "[", "mask", "[", "0", "]", ":", "mask", "[", "1", "]", ",", "mask", "[", "2", "]", ":", "mask", "[", "3", "]", "]", "\n", "", "if", "pred", ".", "shape", "!=", "gt", ".", "shape", ":", "\n", "        ", "logger", ".", "info", "(", "'The shapes of dt and gt are not same!'", ")", "\n", "return", "-", "1", "\n", "", "mask2", "=", "gt", ">", "0", "\n", "gt", "=", "gt", "[", "mask2", "]", "\n", "pred", "=", "pred", "[", "mask2", "]", "\n", "\n", "# invalid evaluation image", "\n", "if", "gt", ".", "size", "<", "10", ":", "\n", "        ", "return", "smoothed_criteria", "\n", "\n", "# Scale matching", "\n", "#pred = recover_metric_depth(pred, gt)", "\n", "\n", "", "n_pxl", "=", "gt", ".", "size", "\n", "gt_scale", "=", "gt", "*", "scale", "\n", "pred_scale", "=", "pred", "*", "scale", "\n", "\n", "# Mean Absolute Relative Error", "\n", "rel", "=", "np", ".", "abs", "(", "gt_scale", "-", "pred_scale", ")", "/", "gt_scale", "# compute errors", "\n", "abs_rel_sum", "=", "np", ".", "sum", "(", "rel", ")", "\n", "smoothed_criteria", "[", "'err_absRel'", "]", ".", "AddValue", "(", "np", ".", "float64", "(", "abs_rel_sum", ")", ",", "n_pxl", ")", "\n", "\n", "# WHDR error", "\n", "whdr_err_sum", ",", "eval_num", "=", "weighted_human_disagreement_rate", "(", "gt_scale", ",", "pred_scale", ")", "\n", "smoothed_criteria", "[", "'err_whdr'", "]", ".", "AddValue", "(", "np", ".", "float64", "(", "whdr_err_sum", ")", ",", "eval_num", ")", "\n", "return", "smoothed_criteria", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.evaluate_depth_error.evaluate_rel_err": [[73, 152], ["numpy.squeeze", "numpy.squeeze", "numpy.sum", "smoothed_criteria[].AddValue", "numpy.sum", "smoothed_criteria[].AddValue", "numpy.sum", "smoothed_criteria[].AddValue", "numpy.sum", "smoothed_criteria[].AddValue", "numpy.sum", "smoothed_criteria[].AddValue", "numpy.sum", "smoothed_criteria[].AddValue", "numpy.sum", "smoothed_criteria[].AddValue", "numpy.reshape", "numpy.reshape", "numpy.concatenate", "numpy.amax", "numpy.sum", "smoothed_criteria[].AddValue", "numpy.sum", "smoothed_criteria[].AddValue", "numpy.sum", "smoothed_criteria[].AddValue", "evaluate_depth_error.weighted_human_disagreement_rate", "smoothed_criteria[].AddValue", "pred.cpu().numpy.cpu().numpy", "gt.cpu().numpy.cpu().numpy", "logger.info", "print", "numpy.abs", "numpy.float64", "numpy.float64", "numpy.float64", "numpy.float64", "numpy.log", "numpy.log", "numpy.float64", "numpy.float64", "numpy.abs", "numpy.float64", "numpy.float64", "numpy.float64", "numpy.float64", "numpy.float64", "type", "type", "numpy.log", "numpy.log", "pred.cpu().numpy.cpu", "gt.cpu().numpy.cpu", "numpy.log10", "numpy.log10"], "function", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.logging.SmoothedValue.AddValue", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.logging.SmoothedValue.AddValue", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.logging.SmoothedValue.AddValue", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.logging.SmoothedValue.AddValue", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.logging.SmoothedValue.AddValue", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.logging.SmoothedValue.AddValue", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.logging.SmoothedValue.AddValue", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.logging.SmoothedValue.AddValue", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.logging.SmoothedValue.AddValue", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.logging.SmoothedValue.AddValue", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.evaluate_depth_error.weighted_human_disagreement_rate", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.logging.SmoothedValue.AddValue"], ["", "def", "evaluate_rel_err", "(", "pred", ",", "gt", ",", "smoothed_criteria", ",", "mask_invalid", "=", "None", ",", "scale", "=", "10.0", ")", ":", "\n", "    ", "if", "type", "(", "pred", ")", ".", "__module__", "!=", "np", ".", "__name__", ":", "\n", "        ", "pred", "=", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "type", "(", "gt", ")", ".", "__module__", "!=", "np", ".", "__name__", ":", "\n", "        ", "gt", "=", "gt", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "pred", "=", "np", ".", "squeeze", "(", "pred", ")", "\n", "gt", "=", "np", ".", "squeeze", "(", "gt", ")", "\n", "if", "pred", ".", "shape", "!=", "gt", ".", "shape", ":", "\n", "        ", "logger", ".", "info", "(", "'The shapes of dt and gt are not same!'", ")", "\n", "return", "-", "1", "\n", "", "if", "mask_invalid", "is", "not", "None", ":", "\n", "        ", "gt", "=", "gt", "[", "~", "mask_invalid", "]", "\n", "pred", "=", "pred", "[", "~", "mask_invalid", "]", "\n", "\n", "", "mask", "=", "(", "gt", ">", "1e-9", ")", "&", "(", "pred", ">", "1e-9", ")", "\n", "gt", "=", "gt", "[", "mask", "]", "\n", "pred", "=", "pred", "[", "mask", "]", "\n", "n_pxl", "=", "gt", ".", "size", "\n", "gt_scale", "=", "gt", "*", "scale", "\n", "pred_scale", "=", "pred", "*", "scale", "\n", "\n", "# invalid evaluation image", "\n", "if", "gt_scale", ".", "size", "<", "10", ":", "\n", "        ", "print", "(", "'Valid pixel size:'", ",", "gt_scale", ".", "size", ",", "'Invalid evaluation!!!!'", ")", "\n", "return", "smoothed_criteria", "\n", "\n", "#Mean Absolute Relative Error", "\n", "", "rel", "=", "np", ".", "abs", "(", "gt", "-", "pred", ")", "/", "gt", "# compute errors", "\n", "abs_rel_sum", "=", "np", ".", "sum", "(", "rel", ")", "\n", "smoothed_criteria", "[", "'err_absRel'", "]", ".", "AddValue", "(", "np", ".", "float64", "(", "abs_rel_sum", ")", ",", "n_pxl", ")", "\n", "\n", "#Square Mean Relative Error", "\n", "s_rel", "=", "(", "(", "gt_scale", "-", "pred_scale", ")", "*", "(", "gt_scale", "-", "pred_scale", ")", ")", "/", "(", "gt_scale", "*", "gt_scale", ")", "# compute errors", "\n", "squa_rel_sum", "=", "np", ".", "sum", "(", "s_rel", ")", "\n", "smoothed_criteria", "[", "'err_squaRel'", "]", ".", "AddValue", "(", "np", ".", "float64", "(", "squa_rel_sum", ")", ",", "n_pxl", ")", "\n", "\n", "#Root Mean Square error", "\n", "square", "=", "(", "gt_scale", "-", "pred_scale", ")", "**", "2", "\n", "rms_squa_sum", "=", "np", ".", "sum", "(", "square", ")", "\n", "smoothed_criteria", "[", "'err_rms'", "]", ".", "AddValue", "(", "np", ".", "float64", "(", "rms_squa_sum", ")", ",", "n_pxl", ")", "\n", "\n", "#Log Root Mean Square error", "\n", "log_square", "=", "(", "np", ".", "log", "(", "gt_scale", ")", "-", "np", ".", "log", "(", "pred_scale", ")", ")", "**", "2", "\n", "log_rms_sum", "=", "np", ".", "sum", "(", "log_square", ")", "\n", "smoothed_criteria", "[", "'err_logRms'", "]", ".", "AddValue", "(", "np", ".", "float64", "(", "log_rms_sum", ")", ",", "n_pxl", ")", "\n", "\n", "# Scale invariant error", "\n", "diff_log", "=", "np", ".", "log", "(", "pred_scale", ")", "-", "np", ".", "log", "(", "gt_scale", ")", "\n", "diff_log_sum", "=", "np", ".", "sum", "(", "diff_log", ")", "\n", "smoothed_criteria", "[", "'err_silog'", "]", ".", "AddValue", "(", "np", ".", "float64", "(", "diff_log_sum", ")", ",", "n_pxl", ")", "\n", "diff_log_2", "=", "diff_log", "**", "2", "\n", "diff_log_2_sum", "=", "np", ".", "sum", "(", "diff_log_2", ")", "\n", "smoothed_criteria", "[", "'err_silog2'", "]", ".", "AddValue", "(", "np", ".", "float64", "(", "diff_log_2_sum", ")", ",", "n_pxl", ")", "\n", "\n", "# Mean log10 error", "\n", "log10_sum", "=", "np", ".", "sum", "(", "np", ".", "abs", "(", "np", ".", "log10", "(", "gt", ")", "-", "np", ".", "log10", "(", "pred", ")", ")", ")", "\n", "smoothed_criteria", "[", "'err_log10'", "]", ".", "AddValue", "(", "np", ".", "float64", "(", "log10_sum", ")", ",", "n_pxl", ")", "\n", "\n", "#Delta", "\n", "gt_pred", "=", "gt_scale", "/", "pred_scale", "\n", "pred_gt", "=", "pred_scale", "/", "gt_scale", "\n", "gt_pred", "=", "np", ".", "reshape", "(", "gt_pred", ",", "(", "1", ",", "-", "1", ")", ")", "\n", "pred_gt", "=", "np", ".", "reshape", "(", "pred_gt", ",", "(", "1", ",", "-", "1", ")", ")", "\n", "gt_pred_gt", "=", "np", ".", "concatenate", "(", "(", "gt_pred", ",", "pred_gt", ")", ",", "axis", "=", "0", ")", "\n", "ratio_max", "=", "np", ".", "amax", "(", "gt_pred_gt", ",", "axis", "=", "0", ")", "\n", "\n", "delta_1_sum", "=", "np", ".", "sum", "(", "ratio_max", "<", "1.25", ")", "\n", "smoothed_criteria", "[", "'err_delta1'", "]", ".", "AddValue", "(", "np", ".", "float64", "(", "delta_1_sum", ")", ",", "n_pxl", ")", "\n", "delta_2_sum", "=", "np", ".", "sum", "(", "ratio_max", "<", "1.25", "**", "2", ")", "\n", "smoothed_criteria", "[", "'err_delta2'", "]", ".", "AddValue", "(", "np", ".", "float64", "(", "delta_2_sum", ")", ",", "n_pxl", ")", "\n", "delta_3_sum", "=", "np", ".", "sum", "(", "ratio_max", "<", "1.25", "**", "3", ")", "\n", "smoothed_criteria", "[", "'err_delta3'", "]", ".", "AddValue", "(", "np", ".", "float64", "(", "delta_3_sum", ")", ",", "n_pxl", ")", "\n", "\n", "# WHDR error", "\n", "whdr_err_sum", ",", "eval_num", "=", "weighted_human_disagreement_rate", "(", "gt_scale", ",", "pred_scale", ")", "\n", "smoothed_criteria", "[", "'err_whdr'", "]", ".", "AddValue", "(", "np", ".", "float64", "(", "whdr_err_sum", ")", ",", "eval_num", ")", "\n", "\n", "return", "smoothed_criteria", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.evaluate_depth_error.weighted_human_disagreement_rate": [[154, 175], ["evaluate_depth_error.select_index", "numpy.reshape", "numpy.reshape", "numpy.zeros_like", "numpy.zeros_like", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.PWN_planes.PWNPlanesLoss.select_index"], ["", "def", "weighted_human_disagreement_rate", "(", "gt", ",", "pred", ")", ":", "\n", "    ", "p12_index", "=", "select_index", "(", "gt", ")", "\n", "gt_reshape", "=", "np", ".", "reshape", "(", "gt", ",", "gt", ".", "size", ")", "\n", "pred_reshape", "=", "np", ".", "reshape", "(", "pred", ",", "pred", ".", "size", ")", "\n", "mask", "=", "gt", ">", "0", "\n", "gt_p1", "=", "gt_reshape", "[", "mask", "]", "[", "p12_index", "[", "'p1'", "]", "]", "\n", "gt_p2", "=", "gt_reshape", "[", "mask", "]", "[", "p12_index", "[", "'p2'", "]", "]", "\n", "pred_p1", "=", "pred_reshape", "[", "mask", "]", "[", "p12_index", "[", "'p1'", "]", "]", "\n", "pred_p2", "=", "pred_reshape", "[", "mask", "]", "[", "p12_index", "[", "'p2'", "]", "]", "\n", "\n", "p12_rank_gt", "=", "np", ".", "zeros_like", "(", "gt_p1", ")", "\n", "p12_rank_gt", "[", "gt_p1", ">", "gt_p2", "]", "=", "1", "\n", "p12_rank_gt", "[", "gt_p1", "<", "gt_p2", "]", "=", "-", "1", "\n", "\n", "p12_rank_pred", "=", "np", ".", "zeros_like", "(", "gt_p1", ")", "\n", "p12_rank_pred", "[", "pred_p1", ">", "pred_p2", "]", "=", "1", "\n", "p12_rank_pred", "[", "pred_p1", "<", "pred_p2", "]", "=", "-", "1", "\n", "\n", "err", "=", "np", ".", "sum", "(", "p12_rank_gt", "!=", "p12_rank_pred", ")", "\n", "valid_pixels", "=", "gt_p1", ".", "size", "\n", "return", "err", ",", "valid_pixels", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.evaluate_depth_error.select_index": [[177, 189], ["numpy.sum", "numpy.random.shuffle", "numpy.random.choice", "numpy.random.choice"], "function", ["None"], ["", "def", "select_index", "(", "gt_depth", ",", "select_size", "=", "10000", ")", ":", "\n", "    ", "valid_size", "=", "np", ".", "sum", "(", "gt_depth", ">", "0", ")", "\n", "try", ":", "\n", "        ", "p", "=", "np", ".", "random", ".", "choice", "(", "valid_size", ",", "select_size", "*", "2", ",", "replace", "=", "False", ")", "\n", "", "except", ":", "\n", "        ", "p", "=", "np", ".", "random", ".", "choice", "(", "valid_size", ",", "select_size", "*", "2", "*", "2", ",", "replace", "=", "True", ")", "\n", "", "np", ".", "random", ".", "shuffle", "(", "p", ")", "\n", "p1", "=", "p", "[", "0", ":", "select_size", "*", "2", ":", "2", "]", "\n", "p2", "=", "p", "[", "1", ":", "select_size", "*", "2", ":", "2", "]", "\n", "\n", "p12_index", "=", "{", "'p1'", ":", "p1", ",", "'p2'", ":", "p2", "}", "\n", "return", "p12_index", "\n", "", ""]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.collections.AttrDict.__init__": [[13, 16], ["dict.__init__"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AttrDict", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "__dict__", "[", "AttrDict", ".", "IMMUTABLE", "]", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.collections.AttrDict.__getattr__": [[17, 24], ["AttributeError"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "in", "self", ".", "__dict__", ":", "\n", "            ", "return", "self", ".", "__dict__", "[", "name", "]", "\n", "", "elif", "name", "in", "self", ":", "\n", "            ", "return", "self", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "raise", "AttributeError", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.collections.AttrDict.__setattr__": [[25, 35], ["AttributeError"], "methods", ["None"], ["", "", "def", "__setattr__", "(", "self", ",", "name", ",", "value", ")", ":", "\n", "        ", "if", "not", "self", ".", "__dict__", "[", "AttrDict", ".", "IMMUTABLE", "]", ":", "\n", "            ", "if", "name", "in", "self", ".", "__dict__", ":", "\n", "                ", "self", ".", "__dict__", "[", "name", "]", "=", "value", "\n", "", "else", ":", "\n", "                ", "self", "[", "name", "]", "=", "value", "\n", "", "", "else", ":", "\n", "            ", "raise", "AttributeError", "(", "\n", "'Attempted to set \"{}\" to \"{}\", but AttrDict is immutable'", ".", "\n", "format", "(", "name", ",", "value", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.collections.AttrDict.immutable": [[37, 49], ["collections.AttrDict.__dict__.values", "collections.AttrDict.values", "isinstance", "isinstance", "v.immutable", "v.immutable"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.collections.AttrDict.immutable", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.collections.AttrDict.immutable"], ["", "", "def", "immutable", "(", "self", ",", "is_immutable", ")", ":", "\n", "        ", "\"\"\"Set immutability to is_immutable and recursively apply the setting\n        to all nested AttrDicts.\n        \"\"\"", "\n", "self", ".", "__dict__", "[", "AttrDict", ".", "IMMUTABLE", "]", "=", "is_immutable", "\n", "# Recursively set immutable state", "\n", "for", "v", "in", "self", ".", "__dict__", ".", "values", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "AttrDict", ")", ":", "\n", "                ", "v", ".", "immutable", "(", "is_immutable", ")", "\n", "", "", "for", "v", "in", "self", ".", "values", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "AttrDict", ")", ":", "\n", "                ", "v", ".", "immutable", "(", "is_immutable", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.collections.AttrDict.is_immutable": [[50, 52], ["None"], "methods", ["None"], ["", "", "", "def", "is_immutable", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__dict__", "[", "AttrDict", ".", "IMMUTABLE", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.net_tools.get_func": [[16, 35], ["func_name.split", "importlib.import_module", "getattr", "len", "logger.error", "globals"], "function", ["None"], ["def", "get_func", "(", "func_name", ")", ":", "\n", "    ", "\"\"\"Helper to return a function object by name. func_name must identify a\n    function in this module or the path to a function relative to the base\n    'modeling' module.\n    \"\"\"", "\n", "if", "func_name", "==", "''", ":", "\n", "        ", "return", "None", "\n", "", "try", ":", "\n", "        ", "parts", "=", "func_name", ".", "split", "(", "'.'", ")", "\n", "# Refers to a function in this module", "\n", "if", "len", "(", "parts", ")", "==", "1", ":", "\n", "            ", "return", "globals", "(", ")", "[", "parts", "[", "0", "]", "]", "\n", "# Otherwise, assume we're referencing a module under modeling", "\n", "", "module_name", "=", "'lib.models.'", "+", "'.'", ".", "join", "(", "parts", "[", ":", "-", "1", "]", ")", "\n", "module", "=", "importlib", ".", "import_module", "(", "module_name", ")", "\n", "return", "getattr", "(", "module", ",", "parts", "[", "-", "1", "]", ")", "\n", "", "except", "Exception", ":", "\n", "        ", "logger", ".", "error", "(", "'Failed to f1ind function: %s'", ",", "func_name", ")", "\n", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.net_tools.load_ckpt": [[36, 61], ["os.path.isfile", "logger.info", "torch.load", "torch.load", "model.state_dict().keys", "net_tools.strip_prefix_if_present", "all", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "model.module.load_state_dict", "model.load_state_dict", "optimizer.load_state_dict", "scheduler.load_state_dict", "scheduler.__setattr__", "model.state_dict", "key.startswith"], "function", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.net_tools.strip_prefix_if_present", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.collections.AttrDict.__setattr__"], ["", "", "def", "load_ckpt", "(", "args", ",", "model", ",", "optimizer", "=", "None", ",", "scheduler", "=", "None", ",", "val_err", "=", "[", "]", ")", ":", "\n", "    ", "\"\"\"\n    Load checkpoint.\n    \"\"\"", "\n", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "load_ckpt", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"loading checkpoint %s\"", ",", "args", ".", "load_ckpt", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "load_ckpt", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ",", "pickle_module", "=", "dill", ")", "\n", "model_state_dict_keys", "=", "model", ".", "state_dict", "(", ")", ".", "keys", "(", ")", "\n", "checkpoint_state_dict_noprefix", "=", "strip_prefix_if_present", "(", "checkpoint", "[", "'model_state_dict'", "]", ",", "\"module.\"", ")", "\n", "\n", "if", "all", "(", "key", ".", "startswith", "(", "'module.'", ")", "for", "key", "in", "model_state_dict_keys", ")", ":", "\n", "            ", "model", ".", "module", ".", "load_state_dict", "(", "checkpoint_state_dict_noprefix", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "load_state_dict", "(", "checkpoint_state_dict_noprefix", ")", "\n", "", "if", "args", ".", "resume", ":", "\n", "#args.batchsize = checkpoint['batch_size']", "\n", "            ", "args", ".", "start_step", "=", "checkpoint", "[", "'step'", "]", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "'scheduler'", "]", ")", "\n", "scheduler", ".", "__setattr__", "(", "'last_epoch'", ",", "checkpoint", "[", "'step'", "]", ")", "\n", "if", "'val_err'", "in", "checkpoint", ":", "# For backward compatibility", "\n", "                ", "val_err", "[", "0", "]", "=", "checkpoint", "[", "'val_err'", "]", "\n", "", "", "del", "checkpoint", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.net_tools.strip_prefix_if_present": [[63, 71], ["sorted", "collections.OrderedDict", "state_dict.items", "state_dict.keys", "all", "key.startswith", "key.replace"], "function", ["None"], ["", "", "def", "strip_prefix_if_present", "(", "state_dict", ",", "prefix", ")", ":", "\n", "    ", "keys", "=", "sorted", "(", "state_dict", ".", "keys", "(", ")", ")", "\n", "if", "not", "all", "(", "key", ".", "startswith", "(", "prefix", ")", "for", "key", "in", "keys", ")", ":", "\n", "        ", "return", "state_dict", "\n", "", "stripped_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "key", ",", "value", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "stripped_state_dict", "[", "key", ".", "replace", "(", "prefix", ",", "\"\"", ")", "]", "=", "value", "\n", "", "return", "stripped_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.net_tools.save_ckpt": [[73, 91], ["os.path.join", "os.path.join", "isinstance", "torch.save", "torch.save", "logger.info", "os.path.exists", "os.makedirs", "scheduler.state_dict", "model.state_dict", "optimizer.state_dict"], "function", ["None"], ["", "def", "save_ckpt", "(", "args", ",", "step", ",", "epoch", ",", "model", ",", "optimizer", ",", "scheduler", ",", "val_err", "=", "{", "}", ")", ":", "\n", "    ", "\"\"\"Save checkpoint\"\"\"", "\n", "ckpt_dir", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "TRAIN", ".", "LOG_DIR", ",", "'ckpt'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "ckpt_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "ckpt_dir", ")", "\n", "", "save_name", "=", "os", ".", "path", ".", "join", "(", "ckpt_dir", ",", "'epoch%d_step%d.pth'", "%", "(", "epoch", ",", "step", ")", ")", "\n", "if", "isinstance", "(", "model", ",", "nn", ".", "DataParallel", ")", ":", "\n", "        ", "model", "=", "model", ".", "module", "\n", "", "torch", ".", "save", "(", "{", "\n", "'step'", ":", "step", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'batch_size'", ":", "args", ".", "batchsize", ",", "\n", "'scheduler'", ":", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "'val_err'", ":", "val_err", ",", "\n", "'model_state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", "}", ",", "\n", "save_name", ",", "pickle_module", "=", "dill", ")", "\n", "logger", ".", "info", "(", "'save model: %s'", ",", "save_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.net_tools.save_images": [[94, 133], ["os.path.join", "matplotlib.imsave", "matplotlib.imsave", "pred_raw.astype.astype", "cv2.imwrite", "np.squeeze.cpu().numpy", "numpy.squeeze", "np.squeeze.cpu().numpy", "numpy.squeeze", "np.squeeze.cpu().numpy", "numpy.squeeze", "[].split", "os.path.exists", "os.makedirs", "os.path.join", "len", "matplotlib.imsave", "gt_scale.astype.astype", "cv2.imwrite", "os.path.join", "os.path.join", "type", "type", "type", "[].split", "os.path.join", "os.path.join", "np.squeeze.cpu", "np.squeeze.cpu", "np.squeeze.cpu", "[].split", "lib.configs.config.cfg.DATA.LOAD_MODEL_NAME.split", "[].split", "[].split", "[].split"], "function", ["None"], ["", "def", "save_images", "(", "data", ",", "pred", ",", "scale", "=", "60000.", ")", ":", "\n", "    ", "rgb", "=", "data", "[", "'A_raw'", "]", "\n", "gt", "=", "data", "[", "'B_raw'", "]", "\n", "if", "type", "(", "rgb", ")", ".", "__module__", "!=", "np", ".", "__name__", ":", "\n", "        ", "rgb", "=", "rgb", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "rgb", "=", "np", ".", "squeeze", "(", "rgb", ")", "\n", "rgb", "=", "rgb", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "", "if", "type", "(", "gt", ")", ".", "__module__", "!=", "np", ".", "__name__", ":", "\n", "        ", "gt", "=", "gt", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "gt", "=", "np", ".", "squeeze", "(", "gt", ")", "\n", "", "if", "type", "(", "pred", ")", ".", "__module__", "!=", "np", ".", "__name__", ":", "\n", "        ", "pred", "=", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred", "=", "np", ".", "squeeze", "(", "pred", ")", "\n", "", "model_name", "=", "(", "cfg", ".", "DATA", ".", "LOAD_MODEL_NAME", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "image_dir", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "TRAIN", ".", "OUTPUT_ROOT_DIR", ",", "'../evaluation'", ",", "model_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "image_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "image_dir", ")", "\n", "\n", "\n", "", "if", "'kitti'", "in", "cfg", ".", "DATASET", ":", "\n", "        ", "name", "=", "data", "[", "'A_paths'", "]", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "4", "]", "+", "'-'", "+", "data", "[", "'A_paths'", "]", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "name", "=", "data", "[", "'A_paths'", "]", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "", "rgb_name", "=", "'%s_%s.png'", "%", "(", "name", ",", "'rgb'", ")", "\n", "gt_name", "=", "'%s_%s.png'", "%", "(", "name", ",", "'gt'", ")", "\n", "gt_raw_name", "=", "'%s_%s.png'", "%", "(", "name", ",", "'gt-raw'", ")", "\n", "pred_name", "=", "'%s_%s.png'", "%", "(", "name", ",", "'pred'", ")", "\n", "pred_raw_name", "=", "'%s_%s.png'", "%", "(", "name", ",", "'pred-raw'", ")", "\n", "\n", "plt", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "image_dir", ",", "rgb_name", ")", ",", "rgb", ")", "\n", "if", "len", "(", "data", "[", "'B_raw'", "]", ".", "shape", ")", "!=", "2", ":", "\n", "        ", "plt", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "image_dir", ",", "gt_name", ")", ",", "gt", ",", "cmap", "=", "'rainbow'", ")", "\n", "gt_scale", "=", "gt", "*", "scale", "\n", "gt_scale", "=", "gt_scale", ".", "astype", "(", "'uint16'", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "image_dir", ",", "gt_raw_name", ")", ",", "gt_scale", ")", "\n", "", "plt", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "image_dir", ",", "pred_name", ")", ",", "pred", ",", "cmap", "=", "'rainbow'", ")", "\n", "pred_raw", "=", "pred", "*", "scale", "\n", "pred_raw", "=", "pred_raw", ".", "astype", "(", "'uint16'", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "image_dir", ",", "pred_raw_name", ")", ",", "pred_raw", ")", "", "", ""]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.lr_scheduler_custom.WarmupMultiStepLR.__init__": [[15, 42], ["super().__init__", "ValueError", "ValueError", "list", "sorted"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "optimizer", ",", "\n", "milestones", ",", "\n", "gamma", "=", "0.1", ",", "\n", "warmup_factor", "=", "1.0", "/", "3", ",", "\n", "warmup_iters", "=", "500", ",", "\n", "warmup_method", "=", "\"linear\"", ",", "\n", "last_epoch", "=", "-", "1", ",", "\n", ")", ":", "\n", "        ", "if", "not", "list", "(", "milestones", ")", "==", "sorted", "(", "milestones", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Milestones should be a list of\"", "\" increasing integers. Got {}\"", ",", "\n", "milestones", ",", "\n", ")", "\n", "\n", "", "if", "warmup_method", "not", "in", "(", "\"constant\"", ",", "\"linear\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Only 'constant' or 'linear' warmup_method accepted\"", "\n", "\"got {}\"", ".", "format", "(", "warmup_method", ")", "\n", ")", "\n", "", "self", ".", "milestones", "=", "milestones", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "warmup_factor", "=", "warmup_factor", "\n", "self", ".", "warmup_iters", "=", "warmup_iters", "\n", "self", ".", "warmup_method", "=", "warmup_method", "\n", "super", "(", "WarmupMultiStepLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.lr_scheduler_custom.WarmupMultiStepLR.get_lr": [[43, 56], ["bisect.bisect_right", "float"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "warmup_factor", "=", "1", "\n", "if", "self", ".", "last_epoch", "<", "self", ".", "warmup_iters", ":", "\n", "            ", "if", "self", ".", "warmup_method", "==", "\"constant\"", ":", "\n", "                ", "warmup_factor", "=", "self", ".", "warmup_factor", "\n", "", "elif", "self", ".", "warmup_method", "==", "\"linear\"", ":", "\n", "                ", "alpha", "=", "float", "(", "self", ".", "last_epoch", ")", "/", "self", ".", "warmup_iters", "\n", "warmup_factor", "=", "self", ".", "warmup_factor", "*", "(", "1", "-", "alpha", ")", "+", "alpha", "\n", "", "", "return", "[", "\n", "base_lr", "\n", "*", "warmup_factor", "\n", "*", "self", ".", "gamma", "**", "bisect_right", "(", "self", ".", "milestones", ",", "self", ".", "last_epoch", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "\n", "]", ""]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.lr_scheduler_custom.make_lr_scheduler": [[4, 12], ["lr_scheduler_custom.WarmupMultiStepLR"], "function", ["None"], ["def", "make_lr_scheduler", "(", "cfg", ",", "optimizer", ")", ":", "\n", "    ", "return", "WarmupMultiStepLR", "(", "\n", "optimizer", ",", "\n", "cfg", ".", "TRAIN", ".", "LR_SCHEDULER_MULTISTEPS", ",", "\n", "cfg", ".", "TRAIN", ".", "LR_SCHEDULER_GAMMA", ",", "\n", "warmup_factor", "=", "cfg", ".", "TRAIN", ".", "WARMUP_FACTOR", ",", "\n", "warmup_iters", "=", "cfg", ".", "TRAIN", ".", "WARMUP_ITERS", ",", "\n", "warmup_method", "=", "cfg", ".", "TRAIN", ".", "WARMUP_METHOD", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.misc.get_run_name": [[6, 10], ["socket.gethostname", "datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["def", "get_run_name", "(", ")", ":", "\n", "    ", "\"\"\" A unique name for each run \"\"\"", "\n", "return", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\n", "'%b%d-%H-%M-%S'", ")", "+", "'_'", "+", "socket", ".", "gethostname", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.misc.is_image_file": [[15, 24], ["filename.lower", "any", "filename.lower.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "\"\"\"Checks if a file is an image.\n      Args:\n          filename (string): path to a file\n      Returns:\n          bool: True if the filename ends with a known image extension\n    \"\"\"", "\n", "filename_lower", "=", "filename", ".", "lower", "(", ")", "\n", "return", "any", "(", "filename_lower", ".", "endswith", "(", "ext", ")", "for", "ext", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.misc.get_imagelist_from_dir": [[26, 32], ["os.listdir", "misc.is_image_file", "images.append", "os.path.join"], "function", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.misc.is_image_file"], ["", "def", "get_imagelist_from_dir", "(", "dirpath", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "for", "f", "in", "os", ".", "listdir", "(", "dirpath", ")", ":", "\n", "        ", "if", "is_image_file", "(", "f", ")", ":", "\n", "            ", "images", ".", "append", "(", "os", ".", "path", ".", "join", "(", "dirpath", ",", "f", ")", ")", "\n", "", "", "return", "images", "\n", "", ""]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.training_stats.TrainingStats.__init__": [[21, 35], ["lib.utils.timer.Timer", "collections.defaultdict", "collections.defaultdict", "lib.utils.logging.SmoothedValue", "lib.utils.logging.SmoothedValue"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "args", ",", "log_period", "=", "20", ",", "tensorboard_logger", "=", "None", ")", ":", "\n", "# Output logging period in SGD iterations", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "log_period", "=", "log_period", "\n", "self", ".", "tblogger", "=", "tensorboard_logger", "\n", "self", ".", "tb_ignored_keys", "=", "[", "'iter'", ",", "'eta'", ",", "'epoch'", ",", "'time'", "]", "\n", "self", ".", "iter_timer", "=", "Timer", "(", ")", "\n", "# Window size for smoothing tracked values (with median filtering)", "\n", "self", ".", "filter_size", "=", "log_period", "\n", "def", "create_smoothed_value", "(", ")", ":", "\n", "            ", "return", "SmoothedValue", "(", "self", ".", "filter_size", ")", "\n", "", "self", ".", "smoothed_losses", "=", "defaultdict", "(", "create_smoothed_value", ")", "\n", "self", ".", "smoothed_metrics", "=", "defaultdict", "(", "create_smoothed_value", ")", "\n", "self", ".", "smoothed_total_loss", "=", "SmoothedValue", "(", "self", ".", "filter_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.training_stats.TrainingStats.IterTic": [[37, 39], ["training_stats.TrainingStats.iter_timer.tic"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.timer.Timer.tic"], ["", "def", "IterTic", "(", "self", ")", ":", "\n", "        ", "self", ".", "iter_timer", ".", "tic", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.training_stats.TrainingStats.IterToc": [[40, 42], ["training_stats.TrainingStats.iter_timer.toc"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.timer.Timer.toc"], ["", "def", "IterToc", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "iter_timer", ".", "toc", "(", "average", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.training_stats.TrainingStats.ResetIterTimer": [[43, 45], ["training_stats.TrainingStats.iter_timer.reset"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.timer.Timer.reset"], ["", "def", "ResetIterTimer", "(", "self", ")", ":", "\n", "        ", "self", ".", "iter_timer", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.training_stats.TrainingStats.UpdateIterStats": [[46, 56], ["training_stats.TrainingStats.smoothed_total_loss.AddValue", "float", "training_stats.TrainingStats.smoothed_losses[].AddValue", "float"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.logging.SmoothedValue.AddValue", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.logging.SmoothedValue.AddValue"], ["", "def", "UpdateIterStats", "(", "self", ",", "loss", ")", ":", "\n", "        ", "\"\"\"Update tracked iteration statistics.\"\"\"", "\n", "total_loss", "=", "0", "\n", "for", "k", "in", "loss", ":", "\n", "# all losses except the total loss: loss['all']", "\n", "            ", "if", "k", "!=", "'total_loss'", ":", "\n", "                ", "self", ".", "smoothed_losses", "[", "k", "]", ".", "AddValue", "(", "float", "(", "loss", "[", "k", "]", ")", ")", "\n", "\n", "", "", "total_loss", "+=", "loss", "[", "'total_loss'", "]", "\n", "self", ".", "smoothed_total_loss", ".", "AddValue", "(", "float", "(", "total_loss", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.training_stats.TrainingStats.LogIterStats": [[57, 64], ["training_stats.TrainingStats.GetStats", "lib.utils.logging.log_stats", "training_stats.TrainingStats.tb_log_stats"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.training_stats.TrainingStats.GetStats", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.logging.log_stats", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.training_stats.TrainingStats.tb_log_stats"], ["", "def", "LogIterStats", "(", "self", ",", "cur_iter", ",", "cur_epoch", ",", "optimizer", ",", "val_err", "=", "{", "}", ")", ":", "\n", "        ", "\"\"\"Log the tracked statistics.\"\"\"", "\n", "if", "(", "cur_iter", "%", "self", ".", "log_period", "==", "0", ")", ":", "\n", "            ", "stats", "=", "self", ".", "GetStats", "(", "cur_iter", ",", "cur_epoch", ",", "optimizer", ",", "val_err", ")", "\n", "log_stats", "(", "stats", ",", "self", ".", "args", ")", "\n", "if", "self", ".", "tblogger", ":", "\n", "                ", "self", ".", "tb_log_stats", "(", "stats", ",", "cur_iter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.training_stats.TrainingStats.tb_log_stats": [[65, 74], ["isinstance", "training_stats.TrainingStats.tb_log_stats", "training_stats.TrainingStats.tblogger.add_scalar"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.training_stats.TrainingStats.tb_log_stats"], ["", "", "", "def", "tb_log_stats", "(", "self", ",", "stats", ",", "cur_iter", ")", ":", "\n", "        ", "\"\"\"Log the tracked statistics to tensorboard\"\"\"", "\n", "for", "k", "in", "stats", ":", "\n", "            ", "if", "k", "not", "in", "self", ".", "tb_ignored_keys", ":", "\n", "                ", "v", "=", "stats", "[", "k", "]", "\n", "if", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "                    ", "self", ".", "tb_log_stats", "(", "v", ",", "cur_iter", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "tblogger", ".", "add_scalar", "(", "k", ",", "v", ",", "cur_iter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.training_stats.TrainingStats.GetStats": [[76, 100], ["str", "collections.OrderedDict", "optimizer.state_dict", "range", "collections.OrderedDict", "training_stats.TrainingStats.smoothed_losses.items", "collections.OrderedDict", "datetime.timedelta", "len", "collections.OrderedDict", "training_stats.TrainingStats.smoothed_total_loss.GetMedianValue", "int", "v.GetMedianValue"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.logging.SmoothedValue.GetMedianValue", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.logging.SmoothedValue.GetMedianValue"], ["", "", "", "", "def", "GetStats", "(", "self", ",", "cur_iter", ",", "cur_epoch", ",", "optimizer", ",", "val_err", "=", "{", "}", ")", ":", "\n", "        ", "eta_seconds", "=", "self", ".", "iter_timer", ".", "average_time", "*", "(", "\n", "cfg", ".", "TRAIN", ".", "MAX_ITER", "-", "cur_iter", "\n", ")", "\n", "eta", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "eta_seconds", ")", ")", ")", "\n", "stats", "=", "OrderedDict", "(", "\n", "iter", "=", "cur_iter", ",", "# 1-indexed", "\n", "time", "=", "self", ".", "iter_timer", ".", "average_time", ",", "\n", "eta", "=", "eta", ",", "\n", "total_loss", "=", "self", ".", "smoothed_total_loss", ".", "GetMedianValue", "(", ")", ",", "\n", "epoch", "=", "cur_epoch", ",", "\n", ")", "\n", "optimizer_state_dict", "=", "optimizer", ".", "state_dict", "(", ")", "\n", "lr", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "optimizer_state_dict", "[", "'param_groups'", "]", ")", ")", ":", "\n", "            ", "lr_name", "=", "'group%d_lr'", "%", "i", "\n", "lr", "[", "lr_name", "]", "=", "optimizer_state_dict", "[", "'param_groups'", "]", "[", "i", "]", "[", "'lr'", "]", "\n", "\n", "", "stats", "[", "'lr'", "]", "=", "OrderedDict", "(", "lr", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "smoothed_losses", ".", "items", "(", ")", ":", "\n", "            ", "stats", "[", "k", "]", "=", "OrderedDict", "(", "[", "(", "k", ",", "v", ".", "GetMedianValue", "(", ")", ")", "]", ")", "\n", "\n", "", "stats", "[", "'val_err'", "]", "=", "OrderedDict", "(", "val_err", ")", "\n", "return", "stats", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.PWN_edges.EdgeguidedNormalRegressionLoss.__init__": [[103, 113], ["torch.nn.Module.__init__", "[].cuda", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "point_pairs", "=", "10000", ",", "cos_theta1", "=", "0.3", ",", "cos_theta2", "=", "0.95", ",", "cos_theta3", "=", "0.5", ",", "cos_theta4", "=", "0.86", ",", "mask_value", "=", "-", "1e-8", ",", "max_threshold", "=", "10.1", ")", ":", "\n", "        ", "super", "(", "EdgeguidedNormalRegressionLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "point_pairs", "=", "point_pairs", "# number of point pairs", "\n", "self", ".", "mask_value", "=", "mask_value", "\n", "self", ".", "max_threshold", "=", "max_threshold", "\n", "self", ".", "cos_theta1", "=", "cos_theta1", "# 75 degree", "\n", "self", ".", "cos_theta2", "=", "cos_theta2", "# 10 degree", "\n", "self", ".", "cos_theta3", "=", "cos_theta3", "# 60 degree", "\n", "self", ".", "cos_theta4", "=", "cos_theta4", "# 30 degree", "\n", "self", ".", "kernel", "=", "torch", ".", "tensor", "(", "np", ".", "array", "(", "[", "[", "1", ",", "1", ",", "1", "]", ",", "[", "1", ",", "1", ",", "1", "]", ",", "[", "1", ",", "1", ",", "1", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "requires_grad", "=", "False", ")", "[", "None", ",", "None", ",", ":", ",", ":", "]", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.PWN_edges.EdgeguidedNormalRegressionLoss.scale_shift_pred_depth": [[114, 138], ["torch.ones", "torch.ones", "torch.ones", "torch.ones", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "pred_scale_shift.permute().reshape.permute().reshape.permute().reshape", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.stack.append", "torch.stack.append", "torch.cat.permute().reshape", "torch.cat.permute().reshape", "torch.stack.permute", "torch.stack.permute", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "pred_scale_shift.permute().reshape.permute().reshape.permute", "torch.cat.permute", "torch.cat.permute"], "methods", ["None"], ["", "def", "scale_shift_pred_depth", "(", "self", ",", "pred", ",", "gt", ")", ":", "\n", "        ", "b", ",", "c", ",", "h", ",", "w", "=", "pred", ".", "shape", "\n", "mask", "=", "(", "gt", ">", "self", ".", "mask_value", ")", "&", "(", "gt", "<", "self", ".", "max_threshold", ")", "# [b, c, h, w]", "\n", "EPS", "=", "1e-6", "*", "torch", ".", "eye", "(", "2", ",", "dtype", "=", "pred", ".", "dtype", ",", "device", "=", "pred", ".", "device", ")", "\n", "scale_shift_batch", "=", "[", "]", "\n", "ones_img", "=", "torch", ".", "ones", "(", "(", "1", ",", "h", ",", "w", ")", ",", "dtype", "=", "pred", ".", "dtype", ",", "device", "=", "pred", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "b", ")", ":", "\n", "            ", "mask_i", "=", "mask", "[", "i", ",", "...", "]", "\n", "pred_valid_i", "=", "pred", "[", "i", ",", "...", "]", "[", "mask_i", "]", "\n", "ones_i", "=", "ones_img", "[", "mask_i", "]", "\n", "pred_valid_ones_i", "=", "torch", ".", "stack", "(", "(", "pred_valid_i", ",", "ones_i", ")", ",", "dim", "=", "0", ")", "# [c+1, n]", "\n", "A_i", "=", "torch", ".", "matmul", "(", "pred_valid_ones_i", ",", "pred_valid_ones_i", ".", "permute", "(", "1", ",", "0", ")", ")", "# [2, 2]", "\n", "A_inverse", "=", "torch", ".", "inverse", "(", "A_i", "+", "EPS", ")", "\n", "\n", "gt_i", "=", "gt", "[", "i", ",", "...", "]", "[", "mask_i", "]", "\n", "B_i", "=", "torch", ".", "matmul", "(", "pred_valid_ones_i", ",", "gt_i", ")", "[", ":", ",", "None", "]", "# [2, 1]", "\n", "scale_shift_i", "=", "torch", ".", "matmul", "(", "A_inverse", ",", "B_i", ")", "# [2, 1]", "\n", "scale_shift_batch", ".", "append", "(", "scale_shift_i", ")", "\n", "", "scale_shift_batch", "=", "torch", ".", "stack", "(", "scale_shift_batch", ",", "dim", "=", "0", ")", "# [b, 2, 1]", "\n", "ones", "=", "torch", ".", "ones_like", "(", "pred", ")", "\n", "pred_ones", "=", "torch", ".", "cat", "(", "(", "pred", ",", "ones", ")", ",", "dim", "=", "1", ")", "# [b, 2, h, w]", "\n", "pred_scale_shift", "=", "torch", ".", "matmul", "(", "pred_ones", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "b", ",", "h", "*", "w", ",", "2", ")", ",", "scale_shift_batch", ")", "# [b, h*w, 1]", "\n", "pred_scale_shift", "=", "pred_scale_shift", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "reshape", "(", "(", "b", ",", "c", ",", "h", ",", "w", ")", ")", "\n", "return", "pred_scale_shift", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.PWN_edges.EdgeguidedNormalRegressionLoss.getEdge": [[139, 154], ["images.size", "torch.Tensor().cuda().view().repeat", "torch.Tensor().cuda().view().repeat", "torch.Tensor().cuda().view().repeat", "torch.Tensor().cuda().view().repeat", "torch.Tensor().cuda().view().repeat", "torch.Tensor().cuda().view().repeat", "torch.Tensor().cuda().view().repeat", "torch.Tensor().cuda().view().repeat", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.pad", "torch.pad", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.pad", "torch.pad", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "images[].unsqueeze", "images[].unsqueeze", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "def", "getEdge", "(", "self", ",", "images", ")", ":", "\n", "        ", "n", ",", "c", ",", "h", ",", "w", "=", "images", ".", "size", "(", ")", "\n", "a", "=", "torch", ".", "Tensor", "(", "[", "[", "-", "1", ",", "0", ",", "1", "]", ",", "[", "-", "2", ",", "0", ",", "2", "]", ",", "[", "-", "1", ",", "0", ",", "1", "]", "]", ")", ".", "cuda", "(", ")", ".", "view", "(", "(", "1", ",", "1", ",", "3", ",", "3", ")", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "b", "=", "torch", ".", "Tensor", "(", "[", "[", "1", ",", "2", ",", "1", "]", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "2", ",", "-", "1", "]", "]", ")", ".", "cuda", "(", ")", ".", "view", "(", "(", "1", ",", "1", ",", "3", ",", "3", ")", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "if", "c", "==", "3", ":", "\n", "            ", "gradient_x", "=", "F", ".", "conv2d", "(", "images", "[", ":", ",", "0", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "1", ")", ",", "a", ")", "\n", "gradient_y", "=", "F", ".", "conv2d", "(", "images", "[", ":", ",", "0", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "1", ")", ",", "b", ")", "\n", "", "else", ":", "\n", "            ", "gradient_x", "=", "F", ".", "conv2d", "(", "images", ",", "a", ")", "\n", "gradient_y", "=", "F", ".", "conv2d", "(", "images", ",", "b", ")", "\n", "", "edges", "=", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "gradient_x", ",", "2", ")", "+", "torch", ".", "pow", "(", "gradient_y", ",", "2", ")", ")", "\n", "edges", "=", "F", ".", "pad", "(", "edges", ",", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\"constant\"", ",", "0", ")", "\n", "thetas", "=", "torch", ".", "atan2", "(", "gradient_y", ",", "gradient_x", ")", "\n", "thetas", "=", "F", ".", "pad", "(", "thetas", ",", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\"constant\"", ",", "0", ")", "\n", "return", "edges", ",", "thetas", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.PWN_edges.EdgeguidedNormalRegressionLoss.getNormalEdge": [[155, 168], ["normals.size", "torch.Tensor().cuda().view().repeat", "torch.Tensor().cuda().view().repeat", "torch.Tensor().cuda().view().repeat", "torch.Tensor().cuda().view().repeat", "torch.Tensor().cuda().view().repeat", "torch.Tensor().cuda().view().repeat", "torch.Tensor().cuda().view().repeat", "torch.Tensor().cuda().view().repeat", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "gradient_x.mean.mean.mean", "gradient_y.mean.mean.mean", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.pad", "torch.pad", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.pad", "torch.pad", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "def", "getNormalEdge", "(", "self", ",", "normals", ")", ":", "\n", "        ", "n", ",", "c", ",", "h", ",", "w", "=", "normals", ".", "size", "(", ")", "\n", "a", "=", "torch", ".", "Tensor", "(", "[", "[", "-", "1", ",", "0", ",", "1", "]", ",", "[", "-", "2", ",", "0", ",", "2", "]", ",", "[", "-", "1", ",", "0", ",", "1", "]", "]", ")", ".", "cuda", "(", ")", ".", "view", "(", "(", "1", ",", "1", ",", "3", ",", "3", ")", ")", ".", "repeat", "(", "3", ",", "1", ",", "1", ",", "1", ")", "\n", "b", "=", "torch", ".", "Tensor", "(", "[", "[", "1", ",", "2", ",", "1", "]", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "2", ",", "-", "1", "]", "]", ")", ".", "cuda", "(", ")", ".", "view", "(", "(", "1", ",", "1", ",", "3", ",", "3", ")", ")", ".", "repeat", "(", "3", ",", "1", ",", "1", ",", "1", ")", "\n", "gradient_x", "=", "torch", ".", "abs", "(", "F", ".", "conv2d", "(", "normals", ",", "a", ",", "groups", "=", "c", ")", ")", "\n", "gradient_y", "=", "torch", ".", "abs", "(", "F", ".", "conv2d", "(", "normals", ",", "b", ",", "groups", "=", "c", ")", ")", "\n", "gradient_x", "=", "gradient_x", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "gradient_y", "=", "gradient_y", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "edges", "=", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "gradient_x", ",", "2", ")", "+", "torch", ".", "pow", "(", "gradient_y", ",", "2", ")", ")", "\n", "edges", "=", "F", ".", "pad", "(", "edges", ",", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\"constant\"", ",", "0", ")", "\n", "thetas", "=", "torch", ".", "atan2", "(", "gradient_y", ",", "gradient_x", ")", "\n", "thetas", "=", "F", ".", "pad", "(", "thetas", ",", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\"constant\"", ",", "0", ")", "\n", "return", "edges", ",", "thetas", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.PWN_edges.EdgeguidedNormalRegressionLoss.forward": [[169, 245], ["lib.models.Surface_normal.surface_normal_from_depth", "lib.models.Surface_normal.surface_normal_from_depth", "PWN_edges.EdgeguidedNormalRegressionLoss.getEdge", "PWN_edges.EdgeguidedNormalRegressionLoss.getNormalEdge", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "PWN_edges.EdgeguidedNormalRegressionLoss.getEdge", "edges_depth.ge", "torch.clamp().bool", "torch.clamp().bool", "torch.clamp().bool", "torch.clamp().bool", "targets.contiguous().view().double.contiguous().view().double.size", "inputs.contiguous().view().double.contiguous().view().double.contiguous().view().double", "targets.contiguous().view().double.contiguous().view().double.contiguous().view().double", "masks.contiguous().view.contiguous().view.contiguous().view", "edges_img.contiguous().view().double.contiguous().view().double.contiguous().view().double", "thetas_img.contiguous().view().double.contiguous().view().double.contiguous().view().double", "edges_normal.view().double.view().double.view().double", "thetas_normal.view().double.view().double.view().double", "torch.DoubleTensor().cuda", "torch.DoubleTensor().cuda", "torch.DoubleTensor().cuda", "torch.DoubleTensor().cuda", "range", "PWN_edges.edgeGuidedSampling", "PWN_edges.edgeGuidedSampling", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "PWN_edges.randomSamplingNormal", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "loss[].float", "torch.ones_like.bool", "torch.ones_like.bool", "edges_depth.max", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "inputs.contiguous().view().double.contiguous().view().double.contiguous().view", "targets.contiguous().view().double.contiguous().view().double.contiguous().view", "masks.contiguous().view.contiguous().view.contiguous", "edges_img.contiguous().view().double.contiguous().view().double.contiguous().view", "thetas_img.contiguous().view().double.contiguous().view().double.contiguous().view", "edges_normal.view().double.view().double.view", "thetas_normal.view().double.view().double.view", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "edges_depth.ge.float", "inputs.contiguous().view().double.contiguous().view().double.contiguous", "targets.contiguous().view().double.contiguous().view().double.contiguous", "edges_img.contiguous().view().double.contiguous().view().double.contiguous", "thetas_img.contiguous().view().double.contiguous().view().double.contiguous"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.Surface_normal.surface_normal_from_depth", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.Surface_normal.surface_normal_from_depth", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.ranking_loss.EdgeguidedRankingLoss.getEdge", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.PWN_edges.EdgeguidedNormalRegressionLoss.getNormalEdge", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.ranking_loss.EdgeguidedRankingLoss.getEdge", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.ranking_loss.edgeGuidedSampling", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.ranking_loss.edgeGuidedSampling", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.PWN_edges.randomSamplingNormal"], ["", "def", "forward", "(", "self", ",", "pred_depths", ",", "gt_depths", ",", "images", ",", "focal_length", ")", ":", "\n", "        ", "\"\"\"\n        inputs and targets: surface normal image\n        images: rgb images\n        \"\"\"", "\n", "masks", "=", "gt_depths", ">", "self", ".", "mask_value", "\n", "#pred_depths_ss = self.scale_shift_pred_depth(pred_depths, gt_depths)", "\n", "inputs", "=", "surface_normal_from_depth", "(", "pred_depths", ",", "focal_length", ",", "valid_mask", "=", "masks", ")", "\n", "targets", "=", "surface_normal_from_depth", "(", "gt_depths", ",", "focal_length", ",", "valid_mask", "=", "masks", ")", "\n", "# find edges from RGB", "\n", "edges_img", ",", "thetas_img", "=", "self", ".", "getEdge", "(", "images", ")", "\n", "# find edges from normals", "\n", "edges_normal", ",", "thetas_normal", "=", "self", ".", "getNormalEdge", "(", "targets", ")", "\n", "mask_img_border", "=", "torch", ".", "ones_like", "(", "edges_normal", ")", "# normals on the borders", "\n", "mask_img_border", "[", ":", ",", ":", ",", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "=", "0", "\n", "edges_normal", "[", "mask_img_border", ".", "bool", "(", ")", "]", "=", "0", "\n", "# find edges from depth", "\n", "edges_depth", ",", "_", "=", "self", ".", "getEdge", "(", "gt_depths", ")", "\n", "edges_depth_mask", "=", "edges_depth", ".", "ge", "(", "edges_depth", ".", "max", "(", ")", "*", "0.1", ")", "\n", "edges_mask_dilate", "=", "torch", ".", "clamp", "(", "torch", ".", "nn", ".", "functional", ".", "conv2d", "(", "edges_depth_mask", ".", "float", "(", ")", ",", "self", ".", "kernel", ",", "padding", "=", "(", "1", ",", "1", ")", ")", ",", "0", ",", "\n", "1", ")", ".", "bool", "(", ")", "\n", "edges_normal", "[", "edges_mask_dilate", "]", "=", "0", "\n", "edges_img", "[", "edges_mask_dilate", "]", "=", "0", "\n", "#=============================", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "targets", ".", "size", "(", ")", "\n", "\n", "inputs", "=", "inputs", ".", "contiguous", "(", ")", ".", "view", "(", "n", ",", "c", ",", "-", "1", ")", ".", "double", "(", ")", "\n", "targets", "=", "targets", ".", "contiguous", "(", ")", ".", "view", "(", "n", ",", "c", ",", "-", "1", ")", ".", "double", "(", ")", "\n", "masks", "=", "masks", ".", "contiguous", "(", ")", ".", "view", "(", "n", ",", "-", "1", ")", "\n", "edges_img", "=", "edges_img", ".", "contiguous", "(", ")", ".", "view", "(", "n", ",", "-", "1", ")", ".", "double", "(", ")", "\n", "thetas_img", "=", "thetas_img", ".", "contiguous", "(", ")", ".", "view", "(", "n", ",", "-", "1", ")", ".", "double", "(", ")", "\n", "edges_normal", "=", "edges_normal", ".", "view", "(", "n", ",", "-", "1", ")", ".", "double", "(", ")", "\n", "thetas_normal", "=", "thetas_normal", ".", "view", "(", "n", ",", "-", "1", ")", ".", "double", "(", ")", "\n", "\n", "# initialization", "\n", "loss", "=", "torch", ".", "DoubleTensor", "(", "[", "0.0", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "# Edge-Guided sampling", "\n", "            ", "inputs_A", ",", "inputs_B", ",", "targets_A", ",", "targets_B", ",", "masks_A", ",", "masks_B", ",", "sample_num", ",", "row_img", ",", "col_img", "=", "edgeGuidedSampling", "(", "inputs", "[", "i", ",", ":", "]", ",", "targets", "[", "i", ",", ":", "]", ",", "edges_img", "[", "i", "]", ",", "thetas_img", "[", "i", "]", ",", "masks", "[", "i", ",", ":", "]", ",", "h", ",", "w", ")", "\n", "normal_inputs_A", ",", "normal_inputs_B", ",", "normal_targets_A", ",", "normal_targets_B", ",", "normal_masks_A", ",", "normal_masks_B", ",", "normal_sample_num", ",", "row_normal", ",", "col_normal", "=", "edgeGuidedSampling", "(", "inputs", "[", "i", ",", ":", "]", ",", "targets", "[", "i", ",", ":", "]", ",", "edges_normal", "[", "i", "]", ",", "thetas_normal", "[", "i", "]", ",", "masks", "[", "i", ",", ":", "]", ",", "h", ",", "w", ")", "\n", "\n", "\n", "# Combine EGS + EGNS", "\n", "inputs_A", "=", "torch", ".", "cat", "(", "(", "inputs_A", ",", "normal_inputs_A", ")", ",", "1", ")", "\n", "inputs_B", "=", "torch", ".", "cat", "(", "(", "inputs_B", ",", "normal_inputs_B", ")", ",", "1", ")", "\n", "targets_A", "=", "torch", ".", "cat", "(", "(", "targets_A", ",", "normal_targets_A", ")", ",", "1", ")", "\n", "targets_B", "=", "torch", ".", "cat", "(", "(", "targets_B", ",", "normal_targets_B", ")", ",", "1", ")", "\n", "masks_A", "=", "torch", ".", "cat", "(", "(", "masks_A", ",", "normal_masks_A", ")", ",", "0", ")", "\n", "masks_B", "=", "torch", ".", "cat", "(", "(", "masks_B", ",", "normal_masks_B", ")", ",", "0", ")", "\n", "\n", "# consider forward-backward consistency checking, i.e, only compute losses of point pairs with valid GT", "\n", "consistency_mask", "=", "masks_A", "&", "masks_B", "\n", "\n", "#GT ordinal relationship", "\n", "target_cos", "=", "torch", ".", "abs", "(", "torch", ".", "sum", "(", "targets_A", "*", "targets_B", ",", "dim", "=", "0", ")", ")", "\n", "input_cos", "=", "torch", ".", "abs", "(", "torch", ".", "sum", "(", "inputs_A", "*", "inputs_B", ",", "dim", "=", "0", ")", ")", "\n", "# ranking regression", "\n", "#loss += torch.mean(torch.abs(target_cos[consistency_mask] - input_cos[consistency_mask]))", "\n", "\n", "# Ranking for samples", "\n", "mask_cos75", "=", "target_cos", "<", "self", ".", "cos_theta1", "\n", "mask_cos10", "=", "target_cos", ">", "self", ".", "cos_theta2", "\n", "# Regression for samples", "\n", "loss", "+=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "target_cos", "[", "mask_cos75", "&", "consistency_mask", "]", "-", "input_cos", "[", "mask_cos75", "&", "consistency_mask", "]", ")", ")", "/", "(", "torch", ".", "sum", "(", "mask_cos75", "&", "consistency_mask", ")", "+", "1e-8", ")", "\n", "loss", "+=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "target_cos", "[", "mask_cos10", "&", "consistency_mask", "]", "-", "input_cos", "[", "mask_cos10", "&", "consistency_mask", "]", ")", ")", "/", "(", "torch", ".", "sum", "(", "mask_cos10", "&", "consistency_mask", ")", "+", "1e-8", ")", "\n", "\n", "# Random Sampling regression", "\n", "random_sample_num", "=", "torch", ".", "sum", "(", "mask_cos10", "&", "consistency_mask", ")", "+", "torch", ".", "sum", "(", "torch", ".", "sum", "(", "mask_cos75", "&", "consistency_mask", ")", ")", "\n", "random_inputs_A", ",", "random_inputs_B", ",", "random_targets_A", ",", "random_targets_B", "=", "randomSamplingNormal", "(", "inputs", "[", "i", ",", ":", "]", ",", "targets", "[", "i", ",", ":", "]", ",", "masks", "[", "i", ",", ":", "]", ",", "random_sample_num", ")", "\n", "#GT ordinal relationship", "\n", "random_target_cos", "=", "torch", ".", "abs", "(", "torch", ".", "sum", "(", "random_targets_A", "*", "random_targets_B", ",", "dim", "=", "0", ")", ")", "\n", "random_input_cos", "=", "torch", ".", "abs", "(", "torch", ".", "sum", "(", "random_inputs_A", "*", "random_inputs_B", ",", "dim", "=", "0", ")", ")", "\n", "loss", "+=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "random_target_cos", "-", "random_input_cos", ")", ")", "/", "(", "random_target_cos", ".", "shape", "[", "0", "]", "+", "1e-8", ")", "\n", "\n", "", "return", "loss", "[", "0", "]", ".", "float", "(", ")", "/", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.PWN_edges.randomSamplingNormal": [[18, 37], ["torch.sum", "torch.sum", "torch.randperm().cuda", "torch.randperm().cuda", "min", "torch.randperm", "torch.randperm"], "function", ["None"], ["def", "randomSamplingNormal", "(", "inputs", ",", "targets", ",", "masks", ",", "sample_num", ")", ":", "\n", "\n", "# find A-B point pairs from predictions", "\n", "    ", "num_effect_pixels", "=", "torch", ".", "sum", "(", "masks", ")", "\n", "shuffle_effect_pixels", "=", "torch", ".", "randperm", "(", "num_effect_pixels", ")", ".", "cuda", "(", ")", "\n", "valid_inputs", "=", "inputs", "[", ":", ",", "masks", "]", "\n", "valid_targes", "=", "targets", "[", ":", ",", "masks", "]", "\n", "inputs_A", "=", "valid_inputs", "[", ":", ",", "shuffle_effect_pixels", "[", "0", ":", "sample_num", "*", "2", ":", "2", "]", "]", "\n", "inputs_B", "=", "valid_inputs", "[", ":", ",", "shuffle_effect_pixels", "[", "1", ":", "sample_num", "*", "2", ":", "2", "]", "]", "\n", "# find corresponding pairs from GT", "\n", "targets_A", "=", "valid_targes", "[", ":", ",", "shuffle_effect_pixels", "[", "0", ":", "sample_num", "*", "2", ":", "2", "]", "]", "\n", "targets_B", "=", "valid_targes", "[", ":", ",", "shuffle_effect_pixels", "[", "1", ":", "sample_num", "*", "2", ":", "2", "]", "]", "\n", "if", "inputs_A", ".", "shape", "[", "1", "]", "!=", "inputs_B", ".", "shape", "[", "1", "]", ":", "\n", "        ", "num_min", "=", "min", "(", "targets_A", ".", "shape", "[", "1", "]", ",", "targets_B", ".", "shape", "[", "1", "]", ")", "\n", "inputs_A", "=", "inputs_A", "[", ":", ",", ":", "num_min", "]", "\n", "inputs_B", "=", "inputs_B", "[", ":", ",", ":", "num_min", "]", "\n", "targets_A", "=", "targets_A", "[", ":", ",", ":", "num_min", "]", "\n", "targets_B", "=", "targets_B", "[", ":", ",", ":", "num_min", "]", "\n", "", "return", "inputs_A", ",", "inputs_B", ",", "targets_A", ",", "targets_B", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.PWN_edges.ind2sub": [[45, 49], ["None"], "function", ["None"], ["", "def", "ind2sub", "(", "idx", ",", "cols", ")", ":", "\n", "    ", "r", "=", "idx", "/", "cols", "\n", "c", "=", "idx", "-", "r", "*", "cols", "\n", "return", "r", ",", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.PWN_edges.sub2ind": [[50, 53], ["None"], "function", ["None"], ["", "def", "sub2ind", "(", "r", ",", "c", ",", "cols", ")", ":", "\n", "    ", "idx", "=", "r", "*", "cols", "+", "c", "\n", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.PWN_edges.edgeGuidedSampling": [[55, 100], ["edges_img.max", "edges_img.min", "edges_img.ge", "edges_img.ge.nonzero", "torch.masked_select", "torch.masked_select", "torch.randint().cuda", "torch.randint().cuda", "torch.gather", "torch.gather", "PWN_edges.ind2sub", "torch.randint().cuda", "torch.randint().cuda", "torch.ones().cuda", "torch.ones().cuda", "PWN_edges.sub2ind", "PWN_edges.sub2ind", "PWN_edges.sub2ind", "PWN_edges.sub2ind", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.masked_select.size", "edges_loc[].squeeze", "torch.randint().cuda.float", "col_anchors.unsqueeze().expand().long", "torch.round().long", "torch.round().long", "row_anchors.unsqueeze().expand().long", "torch.round().long", "torch.round().long", "torch.cat.long", "torch.cat.long", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.ones", "torch.ones", "col_anchors.unsqueeze().expand", "torch.round", "torch.round", "row_anchors.unsqueeze().expand", "torch.round", "torch.round", "col_anchors.unsqueeze", "torch.randint().cuda.double", "torch.abs().unsqueeze", "torch.abs().unsqueeze", "row_anchors.unsqueeze", "torch.randint().cuda.double", "torch.abs().unsqueeze", "torch.abs().unsqueeze", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.cos", "torch.cos", "torch.sin", "torch.sin"], "function", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.ranking_loss.ind2sub", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.ranking_loss.sub2ind", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.ranking_loss.sub2ind", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.ranking_loss.sub2ind", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.ranking_loss.sub2ind"], ["", "def", "edgeGuidedSampling", "(", "inputs", ",", "targets", ",", "edges_img", ",", "thetas_img", ",", "masks", ",", "h", ",", "w", ")", ":", "\n", "# find edges", "\n", "    ", "edges_max", "=", "edges_img", ".", "max", "(", ")", "\n", "edges_min", "=", "edges_img", ".", "min", "(", ")", "\n", "edges_mask", "=", "edges_img", ".", "ge", "(", "edges_max", "*", "0.1", ")", "\n", "edges_loc", "=", "edges_mask", ".", "nonzero", "(", ")", "\n", "\n", "thetas_edge", "=", "torch", ".", "masked_select", "(", "thetas_img", ",", "edges_mask", ")", "\n", "minlen", "=", "thetas_edge", ".", "size", "(", ")", "[", "0", "]", "\n", "\n", "# find anchor points (i.e, edge points)", "\n", "sample_num", "=", "minlen", "\n", "index_anchors", "=", "torch", ".", "randint", "(", "0", ",", "minlen", ",", "(", "sample_num", ",", ")", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "theta_anchors", "=", "torch", ".", "gather", "(", "thetas_edge", ",", "0", ",", "index_anchors", ")", "\n", "row_anchors", ",", "col_anchors", "=", "ind2sub", "(", "edges_loc", "[", "index_anchors", "]", ".", "squeeze", "(", "1", ")", ",", "w", ")", "\n", "## compute the coordinates of 4-points,  distances are from [2, 30]", "\n", "distance_matrix", "=", "torch", ".", "randint", "(", "3", ",", "20", ",", "(", "4", ",", "sample_num", ")", ")", ".", "cuda", "(", ")", "\n", "pos_or_neg", "=", "torch", ".", "ones", "(", "4", ",", "sample_num", ")", ".", "cuda", "(", ")", "\n", "pos_or_neg", "[", ":", "2", ",", ":", "]", "=", "-", "pos_or_neg", "[", ":", "2", ",", ":", "]", "\n", "distance_matrix", "=", "distance_matrix", ".", "float", "(", ")", "*", "pos_or_neg", "\n", "col", "=", "col_anchors", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "4", ",", "sample_num", ")", ".", "long", "(", ")", "+", "torch", ".", "round", "(", "distance_matrix", ".", "double", "(", ")", "*", "torch", ".", "abs", "(", "torch", ".", "cos", "(", "theta_anchors", ")", ")", ".", "unsqueeze", "(", "0", ")", ")", ".", "long", "(", ")", "\n", "row", "=", "row_anchors", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "4", ",", "sample_num", ")", ".", "long", "(", ")", "+", "torch", ".", "round", "(", "distance_matrix", ".", "double", "(", ")", "*", "torch", ".", "abs", "(", "torch", ".", "sin", "(", "theta_anchors", ")", ")", ".", "unsqueeze", "(", "0", ")", ")", ".", "long", "(", ")", "\n", "\n", "# constrain 0=<c<=w, 0<=r<=h", "\n", "# Note: index should minus 1", "\n", "col", "[", "col", "<", "0", "]", "=", "0", "\n", "col", "[", "col", ">", "w", "-", "1", "]", "=", "w", "-", "1", "\n", "row", "[", "row", "<", "0", "]", "=", "0", "\n", "row", "[", "row", ">", "h", "-", "1", "]", "=", "h", "-", "1", "\n", "\n", "# a-b, b-c, c-d", "\n", "a", "=", "sub2ind", "(", "row", "[", "0", ",", ":", "]", ",", "col", "[", "0", ",", ":", "]", ",", "w", ")", "\n", "b", "=", "sub2ind", "(", "row", "[", "1", ",", ":", "]", ",", "col", "[", "1", ",", ":", "]", ",", "w", ")", "\n", "c", "=", "sub2ind", "(", "row", "[", "2", ",", ":", "]", ",", "col", "[", "2", ",", ":", "]", ",", "w", ")", "\n", "d", "=", "sub2ind", "(", "row", "[", "3", ",", ":", "]", ",", "col", "[", "3", ",", ":", "]", ",", "w", ")", "\n", "A", "=", "torch", ".", "cat", "(", "(", "a", ",", "b", ",", "c", ")", ",", "0", ")", "\n", "B", "=", "torch", ".", "cat", "(", "(", "b", ",", "c", ",", "d", ")", ",", "0", ")", "\n", "\n", "inputs_A", "=", "inputs", "[", ":", ",", "A", "]", "\n", "inputs_B", "=", "inputs", "[", ":", ",", "B", "]", "\n", "targets_A", "=", "targets", "[", ":", ",", "A", "]", "\n", "targets_B", "=", "targets", "[", ":", ",", "B", "]", "\n", "masks_A", "=", "torch", ".", "gather", "(", "masks", ",", "0", ",", "A", ".", "long", "(", ")", ")", "\n", "masks_B", "=", "torch", ".", "gather", "(", "masks", ",", "0", ",", "B", ".", "long", "(", ")", ")", "\n", "return", "inputs_A", ",", "inputs_B", ",", "targets_A", ",", "targets_B", ",", "masks_A", ",", "masks_B", ",", "sample_num", ",", "row", ",", "col", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.Resnext_torch.BasicBlock.__init__": [[46, 63], ["torch.Module.__init__", "Resnext_torch.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "Resnext_torch.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.conv3x3", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.Resnext_torch.BasicBlock.forward": [[64, 81], ["Resnext_torch.BasicBlock.conv1", "Resnext_torch.BasicBlock.bn1", "Resnext_torch.BasicBlock.relu", "Resnext_torch.BasicBlock.conv2", "Resnext_torch.BasicBlock.bn2", "Resnext_torch.BasicBlock.relu", "Resnext_torch.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.Resnext_torch.Bottleneck.__init__": [[92, 108], ["torch.Module.__init__", "Resnext_torch.conv1x1", "norm_layer", "Resnext_torch.conv3x3", "norm_layer", "Resnext_torch.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnext_torch.conv1x1", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.conv3x3", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnext_torch.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.Resnext_torch.Bottleneck.forward": [[109, 130], ["Resnext_torch.Bottleneck.conv1", "Resnext_torch.Bottleneck.bn1", "Resnext_torch.Bottleneck.relu", "Resnext_torch.Bottleneck.conv2", "Resnext_torch.Bottleneck.bn2", "Resnext_torch.Bottleneck.relu", "Resnext_torch.Bottleneck.conv3", "Resnext_torch.Bottleneck.bn3", "Resnext_torch.Bottleneck.relu", "Resnext_torch.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.Resnext_torch.ResNet.__init__": [[134, 184], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "Resnext_torch.ResNet._make_layer", "Resnext_torch.ResNet._make_layer", "Resnext_torch.ResNet._make_layer", "Resnext_torch.ResNet._make_layer", "Resnext_torch.ResNet.modules", "len", "ValueError", "isinstance", "Resnext_torch.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "#self.avgpool = nn.AdaptiveAvgPool2d((1, 1))", "\n", "#self.fc = nn.Linear(512 * block.expansion, num_classes)", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.Resnext_torch.ResNet._make_layer": [[185, 208], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "Resnext_torch.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnext_torch.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.Resnext_torch.ResNet._forward_impl": [[209, 234], ["Resnext_torch.ResNet.conv1", "Resnext_torch.ResNet.bn1", "Resnext_torch.ResNet.relu", "Resnext_torch.ResNet.maxpool", "Resnext_torch.ResNet.layer1", "features.append", "Resnext_torch.ResNet.layer2", "features.append", "Resnext_torch.ResNet.layer3", "features.append", "Resnext_torch.ResNet.layer4", "features.append"], "methods", ["None"], ["", "def", "_forward_impl", "(", "self", ",", "x", ")", ":", "\n", "# See note [TorchScript super()]", "\n", "        ", "features", "=", "[", "]", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "features", ".", "append", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "features", ".", "append", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "features", ".", "append", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "features", ".", "append", "(", "x", ")", "\n", "\n", "#x = self.avgpool(x)", "\n", "#x = torch.flatten(x, 1)", "\n", "#x = self.fc(x)", "\n", "\n", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.Resnext_torch.ResNet.forward": [[235, 237], ["Resnext_torch.ResNet._forward_impl"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnext_torch.ResNet._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.Resnext_torch.conv3x3": [[32, 36], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.Resnext_torch.conv1x1": [[38, 41], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.Resnext_torch.resnext101_32x8d": [[240, 259], ["Resnext_torch.ResNet", "torch.load_url", "ResNet.state_dict", "model.state_dict.update", "ResNet.load_state_dict", "model_zoo.load_url.items"], "function", ["None"], ["", "", "def", "resnext101_32x8d", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "8", "\n", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "pretrained_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnext101_32x8d'", "]", ",", "cfg", ".", "ROOT_DIR", "+", "'/'", "+", "cfg", ".", "MODEL", ".", "MODEL_REPOSITORY", ")", "\n", "#pretrained_model = torchvision.models.resnet152(pretrained=True)", "\n", "#pretrained_model = gcv.models.resnet152(pretrained=True)", "\n", "#pretrained_dict = pretrained_model.state_dict()", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.MSGIL_loss.MSGIL_NORM_Loss.__init__": [[10, 16], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "scale", "=", "4", ",", "valid_threshold", "=", "-", "1e-8", ",", "max_threshold", "=", "1e8", ")", ":", "\n", "        ", "super", "(", "MSGIL_NORM_Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scales_num", "=", "scale", "\n", "self", ".", "valid_threshold", "=", "valid_threshold", "\n", "self", ".", "max_threshold", "=", "max_threshold", "\n", "self", ".", "EPSILON", "=", "1e-6", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.MSGIL_loss.MSGIL_NORM_Loss.one_scale_gradient_loss": [[17, 36], ["mask.to", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "one_scale_gradient_loss", "(", "self", ",", "pred_scale", ",", "gt", ",", "mask", ")", ":", "\n", "        ", "mask_float", "=", "mask", ".", "to", "(", "dtype", "=", "pred_scale", ".", "dtype", ",", "device", "=", "pred_scale", ".", "device", ")", "\n", "\n", "d_diff", "=", "pred_scale", "-", "gt", "\n", "\n", "v_mask", "=", "torch", ".", "mul", "(", "mask_float", "[", ":", ",", ":", ",", ":", "-", "2", ",", ":", "]", ",", "mask_float", "[", ":", ",", ":", ",", "2", ":", ",", ":", "]", ")", "\n", "v_gradient", "=", "torch", ".", "abs", "(", "d_diff", "[", ":", ",", ":", ",", ":", "-", "2", ",", ":", "]", "-", "d_diff", "[", ":", ",", ":", ",", "2", ":", ",", ":", "]", ")", "\n", "v_gradient", "=", "torch", ".", "mul", "(", "v_gradient", ",", "v_mask", ")", "\n", "\n", "h_gradient", "=", "torch", ".", "abs", "(", "d_diff", "[", ":", ",", ":", ",", ":", ",", ":", "-", "2", "]", "-", "d_diff", "[", ":", ",", ":", ",", ":", ",", "2", ":", "]", ")", "\n", "h_mask", "=", "torch", ".", "mul", "(", "mask_float", "[", ":", ",", ":", ",", ":", ",", ":", "-", "2", "]", ",", "mask_float", "[", ":", ",", ":", ",", ":", ",", "2", ":", "]", ")", "\n", "h_gradient", "=", "torch", ".", "mul", "(", "h_gradient", ",", "h_mask", ")", "\n", "\n", "valid_num", "=", "torch", ".", "sum", "(", "h_mask", ")", "+", "torch", ".", "sum", "(", "v_mask", ")", "\n", "\n", "gradient_loss", "=", "torch", ".", "sum", "(", "h_gradient", ")", "+", "torch", ".", "sum", "(", "v_gradient", ")", "\n", "gradient_loss", "=", "gradient_loss", "/", "(", "valid_num", "+", "1e-8", ")", "\n", "\n", "return", "gradient_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.MSGIL_loss.MSGIL_NORM_Loss.transform": [[37, 59], ["range", "torch.stack().cuda", "torch.stack().cuda", "torch.stack().cuda", "torch.stack().cuda", "torch.stack().cuda", "torch.stack().cuda", "torch.stack().cuda", "torch.stack().cuda", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.stack().cuda.append", "torch.stack().cuda.append", "torch.stack().cuda.append", "torch.stack().cuda.append", "torch.stack().cuda.append", "torch.stack().cuda.append", "torch.stack().cuda.append", "torch.stack().cuda.append", "depth_valid_mask.mean", "depth_valid_mask.std", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "int", "int", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "gt", ")", ":", "\n", "# Get mean and standard deviation", "\n", "        ", "data_mean", "=", "[", "]", "\n", "data_std_dev", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "gt", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "gt_i", "=", "gt", "[", "i", "]", "\n", "mask", "=", "gt_i", ">", "0", "\n", "depth_valid", "=", "gt_i", "[", "mask", "]", "\n", "depth_valid", "=", "depth_valid", "[", ":", "5", "]", "\n", "if", "depth_valid", ".", "shape", "[", "0", "]", "<", "10", ":", "\n", "                ", "data_mean", ".", "append", "(", "torch", ".", "tensor", "(", "0", ")", ".", "cuda", "(", ")", ")", "\n", "data_std_dev", ".", "append", "(", "torch", ".", "tensor", "(", "1", ")", ".", "cuda", "(", ")", ")", "\n", "continue", "\n", "", "size", "=", "depth_valid", ".", "shape", "[", "0", "]", "\n", "depth_valid_sort", ",", "_", "=", "torch", ".", "sort", "(", "depth_valid", ",", "0", ")", "\n", "depth_valid_mask", "=", "depth_valid_sort", "[", "int", "(", "size", "*", "0.1", ")", ":", "-", "int", "(", "size", "*", "0.1", ")", "]", "\n", "data_mean", ".", "append", "(", "depth_valid_mask", ".", "mean", "(", ")", ")", "\n", "data_std_dev", ".", "append", "(", "depth_valid_mask", ".", "std", "(", ")", ")", "\n", "", "data_mean", "=", "torch", ".", "stack", "(", "data_mean", ",", "dim", "=", "0", ")", ".", "cuda", "(", ")", "\n", "data_std_dev", "=", "torch", ".", "stack", "(", "data_std_dev", ",", "dim", "=", "0", ")", ".", "cuda", "(", ")", "\n", "\n", "return", "data_mean", ",", "data_std_dev", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.MSGIL_loss.MSGIL_NORM_Loss.forward": [[60, 71], ["MSGIL_loss.MSGIL_NORM_Loss.transform", "range", "MSGIL_loss.MSGIL_NORM_Loss.one_scale_gradient_loss"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.ILNR_loss.MEADSTD_TANH_NORM_Loss.transform", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.MSGIL_loss.MSGIL_NORM_Loss.one_scale_gradient_loss"], ["", "def", "forward", "(", "self", ",", "pred", ",", "gt", ")", ":", "\n", "        ", "mask", "=", "gt", ">", "self", ".", "valid_threshold", "\n", "grad_term", "=", "0.0", "\n", "gt_mean", ",", "gt_std", "=", "self", ".", "transform", "(", "gt", ")", "\n", "gt_trans", "=", "(", "gt", "-", "gt_mean", "[", ":", ",", "None", ",", "None", ",", "None", "]", ")", "/", "(", "gt_std", "[", ":", ",", "None", ",", "None", ",", "None", "]", "+", "1e-8", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "scales_num", ")", ":", "\n", "            ", "d_gt", "=", "gt_trans", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", "\n", "d_pred", "=", "pred", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", "\n", "d_mask", "=", "mask", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", "\n", "grad_term", "+=", "self", ".", "one_scale_gradient_loss", "(", "d_pred", ",", "d_gt", ",", "d_mask", ")", "\n", "", "return", "grad_term", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.network_auxi.AuxiBlock.__init__": [[34, 43], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_in", ",", "dim_out", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim_in", "=", "dim_in", "\n", "self", ".", "dim_out", "=", "dim_out", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "self", ".", "dim_in", ",", "self", ".", "dim_out", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "self", ".", "dim_out", ",", "self", ".", "dim_out", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "dim_out", ",", "momentum", "=", "0.5", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "dim_out", ",", "momentum", "=", "0.5", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "def", "forward", "(", "self", ",", "top", ",", "lateral", ")", ":", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.network_auxi.AuxiBlock.forward": [[43, 51], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "network_auxi.AuxiBlock.relu", "network_auxi.AuxiBlock.relu", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "network_auxi.AuxiBlock.bn1", "network_auxi.AuxiBlock.bn2", "lateral.size", "lateral.size", "network_auxi.AuxiBlock.conv1", "network_auxi.AuxiBlock.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "top", ",", "lateral", ")", ":", "\n", "        ", "if", "lateral", ".", "shape", "[", "2", "]", "!=", "top", ".", "shape", "[", "2", "]", ":", "\n", "            ", "h", ",", "w", "=", "lateral", ".", "size", "(", "2", ")", ",", "lateral", ".", "size", "(", "3", ")", "\n", "top", "=", "F", ".", "interpolate", "(", "input", "=", "top", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "", "out", "=", "torch", ".", "cat", "(", "(", "lateral", ",", "top", ")", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.network_auxi.AuxiNetV2.__init__": [[53, 65], ["torch.Module.__init__", "network_auxi.AuxiBlock", "network_auxi.AuxiBlock", "network_auxi.AuxiBlock", "network_auxi.AuxiBlock", "network_auxi.AuxiBlock", "network_auxi.AO", "network_auxi.AuxiNetV2._init_weights"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.network_auxi.AuxiNet._init_weights"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inchannels", "=", "cfg", ".", "MODEL", ".", "RESNET_BOTTLENECK_DIM", "[", "1", ":", "]", "# [256, 512, 1024, 2048]", "\n", "self", ".", "midchannels", "=", "cfg", ".", "MODEL", ".", "LATERAL_OUT", "[", ":", ":", "-", "1", "]", "# [256, 256, 256, 512]", "\n", "\n", "self", ".", "auxi_block1", "=", "AuxiBlock", "(", "self", ".", "midchannels", "[", "2", "]", "+", "self", ".", "midchannels", "[", "3", "]", ",", "128", ")", "\n", "self", ".", "auxi_block2", "=", "AuxiBlock", "(", "128", "+", "self", ".", "midchannels", "[", "2", "]", ",", "128", ")", "\n", "self", ".", "auxi_block3", "=", "AuxiBlock", "(", "128", "+", "self", ".", "midchannels", "[", "2", "]", ",", "128", ")", "\n", "self", ".", "auxi_block4", "=", "AuxiBlock", "(", "128", "+", "self", ".", "midchannels", "[", "1", "]", ",", "128", ")", "\n", "self", ".", "auxi_block5", "=", "AuxiBlock", "(", "128", "+", "self", ".", "midchannels", "[", "0", "]", ",", "128", ")", "\n", "self", ".", "out_conv", "=", "AO", "(", "128", ",", "1", ",", "2", ")", "\n", "self", ".", "_init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.network_auxi.AuxiNetV2._init_weights": [[66, 90], ["network_auxi.AuxiNetV2._init_weights.init_model_weight"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ")", ":", "\n", "        ", "def", "init_func", "(", "m", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "# NN.BatchNorm2d", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "", "def", "init_model_weight", "(", "m", ")", ":", "\n", "            ", "for", "child_m", "in", "m", ".", "children", "(", ")", ":", "\n", "                ", "if", "not", "isinstance", "(", "child_m", ",", "nn", ".", "ModuleList", ")", ":", "\n", "                    ", "child_m", ".", "apply", "(", "init_func", ")", "\n", "\n", "", "", "", "init_model_weight", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.network_auxi.AuxiNetV2.forward": [[91, 99], ["network_auxi.AuxiNetV2.auxi_block1", "network_auxi.AuxiNetV2.auxi_block2", "network_auxi.AuxiNetV2.auxi_block3", "network_auxi.AuxiNetV2.auxi_block4", "network_auxi.AuxiNetV2.auxi_block5", "network_auxi.AuxiNetV2.out_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "auxi_in", ")", ":", "\n", "        ", "out", "=", "self", ".", "auxi_block1", "(", "auxi_in", "[", "0", "]", ",", "auxi_in", "[", "1", "]", ")", "# 1/32", "\n", "out", "=", "self", ".", "auxi_block2", "(", "out", ",", "auxi_in", "[", "2", "]", ")", "# 1/16", "\n", "out", "=", "self", ".", "auxi_block3", "(", "out", ",", "auxi_in", "[", "3", "]", ")", "# 1/8", "\n", "out", "=", "self", ".", "auxi_block4", "(", "out", ",", "auxi_in", "[", "4", "]", ")", "# 1/4", "\n", "out", "=", "self", ".", "auxi_block5", "(", "out", ",", "auxi_in", "[", "5", "]", ")", "# 1/2", "\n", "out", "=", "self", ".", "out_conv", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.network_auxi.AuxiNet.__init__": [[101, 113], ["torch.Module.__init__", "network_auxi.AuxiBlock", "network_auxi.AuxiBlock", "network_auxi.AuxiBlock", "network_auxi.AuxiBlock", "network_auxi.AuxiBlock", "network_auxi.AO", "network_auxi.AuxiNet._init_weights"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.network_auxi.AuxiNet._init_weights"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inchannels", "=", "cfg", ".", "MODEL", ".", "RESNET_BOTTLENECK_DIM", "[", "1", ":", "]", "# [256, 512, 1024, 2048]", "\n", "self", ".", "midchannels", "=", "cfg", ".", "MODEL", ".", "LATERAL_OUT", "[", ":", ":", "-", "1", "]", "# [256, 256, 256, 512]", "\n", "\n", "self", ".", "auxi_block1", "=", "AuxiBlock", "(", "self", ".", "midchannels", "[", "2", "]", "+", "self", ".", "midchannels", "[", "3", "]", ",", "256", ")", "\n", "self", ".", "auxi_block2", "=", "AuxiBlock", "(", "256", "+", "self", ".", "midchannels", "[", "2", "]", ",", "256", ")", "\n", "self", ".", "auxi_block3", "=", "AuxiBlock", "(", "256", "+", "self", ".", "midchannels", "[", "2", "]", ",", "256", ")", "\n", "self", ".", "auxi_block4", "=", "AuxiBlock", "(", "256", "+", "self", ".", "midchannels", "[", "1", "]", ",", "256", ")", "\n", "self", ".", "auxi_block5", "=", "AuxiBlock", "(", "256", "+", "self", ".", "midchannels", "[", "0", "]", ",", "256", ")", "\n", "self", ".", "out_conv", "=", "AO", "(", "256", ",", "1", ",", "2", ")", "\n", "self", ".", "_init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.network_auxi.AuxiNet._init_weights": [[114, 138], ["network_auxi.AuxiNet._init_weights.init_model_weight"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ")", ":", "\n", "        ", "def", "init_func", "(", "m", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "# NN.BatchNorm2d", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "", "def", "init_model_weight", "(", "m", ")", ":", "\n", "            ", "for", "child_m", "in", "m", ".", "children", "(", ")", ":", "\n", "                ", "if", "not", "isinstance", "(", "child_m", ",", "nn", ".", "ModuleList", ")", ":", "\n", "                    ", "child_m", ".", "apply", "(", "init_func", ")", "\n", "\n", "", "", "", "init_model_weight", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.network_auxi.AuxiNet.forward": [[139, 147], ["network_auxi.AuxiNet.auxi_block1", "network_auxi.AuxiNet.auxi_block2", "network_auxi.AuxiNet.auxi_block3", "network_auxi.AuxiNet.auxi_block4", "network_auxi.AuxiNet.auxi_block5", "network_auxi.AuxiNet.out_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "auxi_in", ")", ":", "\n", "        ", "out", "=", "self", ".", "auxi_block1", "(", "auxi_in", "[", "0", "]", ",", "auxi_in", "[", "1", "]", ")", "# 1/32", "\n", "out", "=", "self", ".", "auxi_block2", "(", "out", ",", "auxi_in", "[", "2", "]", ")", "# 1/16", "\n", "out", "=", "self", ".", "auxi_block3", "(", "out", ",", "auxi_in", "[", "3", "]", ")", "# 1/8", "\n", "out", "=", "self", ".", "auxi_block4", "(", "out", ",", "auxi_in", "[", "4", "]", ")", "# 1/4", "\n", "out", "=", "self", ".", "auxi_block5", "(", "out", ",", "auxi_in", "[", "5", "]", ")", "# 1/2", "\n", "out", "=", "self", ".", "out_conv", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.network_auxi.Decoder.__init__": [[149, 167], ["torch.Module.__init__", "network_auxi.FTB", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "network_auxi.FFM", "network_auxi.FFM", "network_auxi.FFM", "network_auxi.AO", "network_auxi.Decoder._init_params"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.network_auxi.Decoder._init_params"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inchannels", "=", "cfg", ".", "MODEL", ".", "RESNET_BOTTLENECK_DIM", "[", "1", ":", "]", "# [256, 512, 1024, 2048]", "\n", "self", ".", "midchannels", "=", "cfg", ".", "MODEL", ".", "LATERAL_OUT", "[", ":", ":", "-", "1", "]", "# [256, 256, 256, 512]", "\n", "self", ".", "upfactors", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", "\n", "self", ".", "outchannels", "=", "cfg", ".", "MODEL", ".", "DECODER_OUTPUT_C", "# 1", "\n", "\n", "self", ".", "conv", "=", "FTB", "(", "inchannels", "=", "self", ".", "inchannels", "[", "3", "]", ",", "midchannels", "=", "self", ".", "midchannels", "[", "3", "]", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "midchannels", "[", "3", "]", ",", "out_channels", "=", "self", ".", "midchannels", "[", "2", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "self", ".", "upfactors", "[", "3", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "self", ".", "ffm2", "=", "FFM", "(", "inchannels", "=", "self", ".", "inchannels", "[", "2", "]", ",", "midchannels", "=", "self", ".", "midchannels", "[", "2", "]", ",", "outchannels", "=", "self", ".", "midchannels", "[", "2", "]", ",", "upfactor", "=", "self", ".", "upfactors", "[", "2", "]", ")", "\n", "self", ".", "ffm1", "=", "FFM", "(", "inchannels", "=", "self", ".", "inchannels", "[", "1", "]", ",", "midchannels", "=", "self", ".", "midchannels", "[", "1", "]", ",", "outchannels", "=", "self", ".", "midchannels", "[", "1", "]", ",", "upfactor", "=", "self", ".", "upfactors", "[", "1", "]", ")", "\n", "self", ".", "ffm0", "=", "FFM", "(", "inchannels", "=", "self", ".", "inchannels", "[", "0", "]", ",", "midchannels", "=", "self", ".", "midchannels", "[", "0", "]", ",", "outchannels", "=", "self", ".", "midchannels", "[", "0", "]", ",", "upfactor", "=", "self", ".", "upfactors", "[", "0", "]", ")", "\n", "\n", "#self.outconv = nn.Conv2d(in_channels=self.inchannels[0], out_channels=self.outchannels, kernel_size=3, padding=1, stride=1, bias=True)", "\n", "self", ".", "outconv", "=", "AO", "(", "inchannels", "=", "self", ".", "midchannels", "[", "0", "]", ",", "outchannels", "=", "self", ".", "outchannels", ",", "upfactor", "=", "2", ")", "\n", "self", ".", "_init_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.network_auxi.Decoder._init_params": [[168, 185], ["network_auxi.Decoder.modules", "isinstance", "torch.normal_", "torch.normal_", "torch.normal_", "torch.normal_", "isinstance", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.normal_", "torch.normal_", "torch.normal_", "torch.normal_", "isinstance", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "isinstance", "torch.normal_", "torch.normal_", "torch.normal_", "torch.normal_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_"], "methods", ["None"], ["", "def", "_init_params", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "#NN.BatchNorm2d", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.network_auxi.Decoder.forward": [[186, 203], ["network_auxi.Decoder.conv", "network_auxi.Decoder.conv1", "network_auxi.Decoder.upsample", "network_auxi.Decoder.ffm2", "network_auxi.Decoder.ffm1", "network_auxi.Decoder.ffm0", "network_auxi.Decoder.outconv"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "features", ")", ":", "\n", "# features' shape: # 1/32, 1/16, 1/8, 1/4", "\n", "# _,_,h,w = features[3].size()", "\n", "        ", "x_32x", "=", "self", ".", "conv", "(", "features", "[", "3", "]", ")", "# 1/32", "\n", "x_32", "=", "self", ".", "conv1", "(", "x_32x", ")", "\n", "x_16", "=", "self", ".", "upsample", "(", "x_32", ")", "# 1/16", "\n", "\n", "x_8", "=", "self", ".", "ffm2", "(", "features", "[", "2", "]", ",", "x_16", ")", "# 1/8", "\n", "#print('ffm2:', x.size())", "\n", "x_4", "=", "self", ".", "ffm1", "(", "features", "[", "1", "]", ",", "x_8", ")", "# 1/4", "\n", "#print('ffm1:', x.size())", "\n", "x_2", "=", "self", ".", "ffm0", "(", "features", "[", "0", "]", ",", "x_4", ")", "# 1/2", "\n", "#print('ffm0:', x.size())", "\n", "#-----------------------------------------", "\n", "x", "=", "self", ".", "outconv", "(", "x_2", ")", "# original size", "\n", "auxi_input", "=", "[", "x_32x", ",", "x_32", ",", "x_16", ",", "x_8", ",", "x_4", ",", "x_2", "]", "\n", "return", "x", ",", "auxi_input", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.network_auxi.DepthNet.__init__": [[212, 236], ["torch.Module.__init__", "KeyError", "lib.models.Resnext_torch.resnext101_32x8d", "MobileNet_torch.mobilenet_v2", "lib.models.Resnext_torch.resnext101"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnext_torch.resnext101_32x8d"], ["def", "__init__", "(", "self", ",", "\n", "backbone", "=", "'resnet'", ",", "\n", "depth", "=", "50", ",", "\n", "upfactors", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", ":", "\n", "        ", "super", "(", "DepthNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "pretrained", "=", "cfg", ".", "MODEL", ".", "LOAD_IMAGENET_PRETRAINED_WEIGHTS", "# True", "\n", "self", ".", "inchannels", "=", "cfg", ".", "MODEL", ".", "RESNET_BOTTLENECK_DIM", "[", "1", ":", "]", "# [256, 512, 1024, 2048]", "\n", "self", ".", "midchannels", "=", "cfg", ".", "MODEL", ".", "LATERAL_OUT", "[", ":", ":", "-", "1", "]", "# [256, 256, 256, 512]", "\n", "self", ".", "upfactors", "=", "upfactors", "\n", "self", ".", "outchannels", "=", "cfg", ".", "MODEL", ".", "DECODER_OUTPUT_C", "# 1", "\n", "\n", "# Build model", "\n", "if", "self", ".", "backbone", "==", "'resnet'", ":", "\n", "            ", "if", "self", ".", "depth", "not", "in", "DepthNet", ".", "__factory", ":", "\n", "                ", "raise", "KeyError", "(", "\"Unsupported depth:\"", ",", "self", ".", "depth", ")", "\n", "", "self", ".", "encoder", "=", "DepthNet", ".", "__factory", "[", "depth", "]", "(", "pretrained", "=", "self", ".", "pretrained", ")", "\n", "", "elif", "self", ".", "backbone", "==", "'resnext101_32x8d'", ":", "\n", "            ", "self", ".", "encoder", "=", "Resnext_torch", ".", "resnext101_32x8d", "(", "pretrained", "=", "self", ".", "pretrained", ")", "\n", "", "elif", "self", ".", "backbone", "==", "'mobilenetv2'", ":", "\n", "            ", "self", ".", "encoder", "=", "MobileNet_torch", ".", "mobilenet_v2", "(", "pretrained", "=", "self", ".", "pretrained", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "encoder", "=", "Resnext_torch", ".", "resnext101", "(", "pretrained", "=", "self", ".", "pretrained", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.network_auxi.DepthNet.forward": [[237, 240], ["network_auxi.DepthNet.encoder"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "encoder", "(", "x", ")", "# 1/32, 1/16, 1/8, 1/4", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.network_auxi.FTB.__init__": [[243, 264], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "network_auxi.FTB.init_params", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.network_auxi.FeatureFusion.init_params"], ["    ", "def", "__init__", "(", "self", ",", "inchannels", ",", "midchannels", "=", "512", ")", ":", "\n", "        ", "super", "(", "FTB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in1", "=", "inchannels", "\n", "self", ".", "mid", "=", "midchannels", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "in1", ",", "out_channels", "=", "self", ".", "mid", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "\n", "bias", "=", "True", ")", "\n", "# NN.BatchNorm2d", "\n", "# self.sample_conv = nn.Sequential(nn.Conv2d(in_channels=self.mid, out_channels=self.mid, kernel_size=3, padding=1, stride=1, bias=True),", "\n", "#                                 nn.ReLU(inplace=True),", "\n", "#                                 nn.BatchNorm2d(num_features=self.mid),", "\n", "#                                 nn.Conv2d(in_channels=self.mid, out_channels= self.mid, kernel_size=3, padding=1, stride=1, bias=True))", "\n", "self", ".", "conv_branch", "=", "nn", ".", "Sequential", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "mid", ",", "out_channels", "=", "self", ".", "mid", ",", "kernel_size", "=", "3", ",", "\n", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "True", ")", ",", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "self", ".", "mid", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "mid", ",", "out_channels", "=", "self", ".", "mid", ",", "kernel_size", "=", "3", ",", "\n", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "True", ")", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "init_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.network_auxi.FTB.forward": [[265, 271], ["network_auxi.FTB.conv1", "network_auxi.FTB.relu", "network_auxi.FTB.conv_branch"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "x", "+", "self", ".", "conv_branch", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.network_auxi.FTB.init_params": [[272, 291], ["network_auxi.FTB.modules", "isinstance", "torch.normal_", "torch.normal_", "torch.normal_", "torch.normal_", "isinstance", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.normal_", "torch.normal_", "torch.normal_", "torch.normal_", "isinstance", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "isinstance", "torch.normal_", "torch.normal_", "torch.normal_", "torch.normal_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_"], "methods", ["None"], ["", "def", "init_params", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "# init.kaiming_normal_(m.weight, mode='fan_out')", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "# init.xavier_normal_(m.weight)", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "# NN.BatchNorm2d", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.network_auxi.ATA.__init__": [[294, 303], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "network_auxi.ATA.init_params", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.network_auxi.FeatureFusion.init_params"], ["    ", "def", "__init__", "(", "self", ",", "inchannels", ",", "reduction", "=", "8", ")", ":", "\n", "        ", "super", "(", "ATA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inchannels", "=", "inchannels", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "inchannels", "*", "2", ",", "self", ".", "inchannels", "//", "reduction", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "inchannels", "//", "reduction", ",", "self", ".", "inchannels", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "self", ".", "init_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.network_auxi.ATA.forward": [[304, 313], ["low_x.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "network_auxi.ATA.avg_pool", "network_auxi.ATA.view", "network_auxi.ATA.fc().view", "network_auxi.ATA.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "low_x", ",", "high_x", ")", ":", "\n", "        ", "n", ",", "c", ",", "_", ",", "_", "=", "low_x", ".", "size", "(", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "low_x", ",", "high_x", "]", ",", "1", ")", "\n", "x", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "n", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", ".", "view", "(", "n", ",", "c", ",", "1", ",", "1", ")", "\n", "x", "=", "low_x", "*", "x", "+", "high_x", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.network_auxi.ATA.init_params": [[314, 335], ["network_auxi.ATA.modules", "isinstance", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "isinstance", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "isinstance", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "isinstance", "torch.normal_", "torch.normal_", "torch.normal_", "torch.normal_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_"], "methods", ["None"], ["", "def", "init_params", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "# init.kaiming_normal_(m.weight, mode='fan_out')", "\n", "# init.normal(m.weight, std=0.01)", "\n", "                ", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "# init.kaiming_normal_(m.weight, mode='fan_out')", "\n", "# init.normal_(m.weight, std=0.01)", "\n", "                ", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "# NN.BatchNorm2d", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.network_auxi.FFM.__init__": [[338, 352], ["torch.Module.__init__", "network_auxi.FTB", "network_auxi.FTB", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "network_auxi.FFM.init_params"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.network_auxi.FeatureFusion.init_params"], ["    ", "def", "__init__", "(", "self", ",", "inchannels", ",", "midchannels", ",", "outchannels", ",", "upfactor", "=", "2", ")", ":", "\n", "        ", "super", "(", "FFM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inchannels", "=", "inchannels", "\n", "self", ".", "midchannels", "=", "midchannels", "\n", "self", ".", "outchannels", "=", "outchannels", "\n", "self", ".", "upfactor", "=", "upfactor", "\n", "\n", "self", ".", "ftb1", "=", "FTB", "(", "inchannels", "=", "self", ".", "inchannels", ",", "midchannels", "=", "self", ".", "midchannels", ")", "\n", "# self.ata = ATA(inchannels = self.midchannels)", "\n", "self", ".", "ftb2", "=", "FTB", "(", "inchannels", "=", "self", ".", "midchannels", ",", "midchannels", "=", "self", ".", "outchannels", ")", "\n", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "self", ".", "upfactor", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "self", ".", "init_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.network_auxi.FFM.forward": [[353, 360], ["network_auxi.FFM.ftb1", "network_auxi.FFM.ftb2", "network_auxi.FFM.upsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "low_x", ",", "high_x", ")", ":", "\n", "        ", "x", "=", "self", ".", "ftb1", "(", "low_x", ")", "\n", "x", "=", "x", "+", "high_x", "\n", "x", "=", "self", ".", "ftb2", "(", "x", ")", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.network_auxi.FFM.init_params": [[361, 382], ["network_auxi.FFM.modules", "isinstance", "torch.normal_", "torch.normal_", "torch.normal_", "torch.normal_", "isinstance", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.normal_", "torch.normal_", "torch.normal_", "torch.normal_", "isinstance", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "isinstance", "torch.normal_", "torch.normal_", "torch.normal_", "torch.normal_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_"], "methods", ["None"], ["", "def", "init_params", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "# init.kaiming_normal_(m.weight, mode='fan_out')", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "# init.xavier_normal_(m.weight)", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "# init.kaiming_normal_(m.weight, mode='fan_out')", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "# init.xavier_normal_(m.weight)", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "# NN.Batchnorm2d", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.network_auxi.AO.__init__": [[386, 402], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "network_auxi.AO.init_params", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.network_auxi.FeatureFusion.init_params"], ["    ", "def", "__init__", "(", "self", ",", "inchannels", ",", "outchannels", ",", "upfactor", "=", "2", ")", ":", "\n", "        ", "super", "(", "AO", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inchannels", "=", "inchannels", "\n", "self", ".", "outchannels", "=", "outchannels", "\n", "self", ".", "upfactor", "=", "upfactor", "\n", "\n", "self", ".", "adapt_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "inchannels", ",", "out_channels", "=", "self", ".", "inchannels", "//", "2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "\n", "stride", "=", "1", ",", "bias", "=", "True", ")", ",", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "self", ".", "inchannels", "//", "2", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "inchannels", "//", "2", ",", "out_channels", "=", "self", ".", "outchannels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "\n", "stride", "=", "1", ",", "bias", "=", "True", ")", ",", "nn", ".", "Upsample", "(", "scale_factor", "=", "self", ".", "upfactor", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ")", "\n", "\n", "self", ".", "init_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.network_auxi.AO.forward": [[403, 406], ["network_auxi.AO.adapt_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "adapt_conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.network_auxi.AO.init_params": [[407, 428], ["network_auxi.AO.modules", "isinstance", "torch.normal_", "torch.normal_", "torch.normal_", "torch.normal_", "isinstance", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.normal_", "torch.normal_", "torch.normal_", "torch.normal_", "isinstance", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "isinstance", "torch.normal_", "torch.normal_", "torch.normal_", "torch.normal_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_"], "methods", ["None"], ["", "def", "init_params", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "# init.kaiming_normal_(m.weight, mode='fan_out')", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "# init.xavier_normal_(m.weight)", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "# init.kaiming_normal_(m.weight, mode='fan_out')", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "# init.xavier_normal_(m.weight)", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "# NN.Batchnorm2d", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.network_auxi.ASPP.__init__": [[431, 468], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "network_auxi.ASPP.kernel_sizes.append", "network_auxi.ASPP.paddings.append", "network_auxi.ASPP.kernel_sizes.append", "network_auxi.ASPP.paddings.append"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inchannels", "=", "256", ",", "planes", "=", "128", ",", "rates", "=", "[", "1", ",", "6", ",", "12", ",", "18", "]", ")", ":", "\n", "        ", "super", "(", "ASPP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inchannels", "=", "inchannels", "\n", "self", ".", "planes", "=", "planes", "\n", "self", ".", "rates", "=", "rates", "\n", "self", ".", "kernel_sizes", "=", "[", "]", "\n", "self", ".", "paddings", "=", "[", "]", "\n", "for", "rate", "in", "self", ".", "rates", ":", "\n", "            ", "if", "rate", "==", "1", ":", "\n", "                ", "self", ".", "kernel_sizes", ".", "append", "(", "1", ")", "\n", "self", ".", "paddings", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "kernel_sizes", ".", "append", "(", "3", ")", "\n", "self", ".", "paddings", ".", "append", "(", "rate", ")", "\n", "", "", "self", ".", "atrous_0", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "inchannels", ",", "out_channels", "=", "self", ".", "planes", ",", "kernel_size", "=", "self", ".", "kernel_sizes", "[", "0", "]", ",", "\n", "stride", "=", "1", ",", "padding", "=", "self", ".", "paddings", "[", "0", "]", ",", "dilation", "=", "self", ".", "rates", "[", "0", "]", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "self", ".", "planes", ")", "\n", ")", "\n", "self", ".", "atrous_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "inchannels", ",", "out_channels", "=", "self", ".", "planes", ",", "kernel_size", "=", "self", ".", "kernel_sizes", "[", "1", "]", ",", "\n", "stride", "=", "1", ",", "padding", "=", "self", ".", "paddings", "[", "1", "]", ",", "dilation", "=", "self", ".", "rates", "[", "1", "]", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "self", ".", "planes", ")", ",", "\n", ")", "\n", "self", ".", "atrous_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "inchannels", ",", "out_channels", "=", "self", ".", "planes", ",", "kernel_size", "=", "self", ".", "kernel_sizes", "[", "2", "]", ",", "\n", "stride", "=", "1", ",", "padding", "=", "self", ".", "paddings", "[", "2", "]", ",", "dilation", "=", "self", ".", "rates", "[", "2", "]", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "self", ".", "planes", ")", ",", "\n", ")", "\n", "self", ".", "atrous_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "inchannels", ",", "out_channels", "=", "self", ".", "planes", ",", "kernel_size", "=", "self", ".", "kernel_sizes", "[", "3", "]", ",", "\n", "stride", "=", "1", ",", "padding", "=", "self", ".", "paddings", "[", "3", "]", ",", "dilation", "=", "self", ".", "rates", "[", "3", "]", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "self", ".", "planes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.network_auxi.ASPP.forward": [[472, 477], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "network_auxi.ASPP.atrous_0", "network_auxi.ASPP.atrous_1", "network_auxi.ASPP.atrous_2", "network_auxi.ASPP.atrous_3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "torch", ".", "cat", "(", "[", "self", ".", "atrous_0", "(", "x", ")", ",", "self", ".", "atrous_1", "(", "x", ")", ",", "self", ".", "atrous_2", "(", "x", ")", ",", "self", ".", "atrous_3", "(", "x", ")", "]", ",", "1", ")", "\n", "# x = self.conv(x)", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.network_auxi.ResidualConv.__init__": [[483, 499], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "network_auxi.ResidualConv.init_params", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.network_auxi.FeatureFusion.init_params"], ["    ", "def", "__init__", "(", "self", ",", "inchannels", ")", ":", "\n", "        ", "super", "(", "ResidualConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# NN.BatchNorm2d", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "# nn.BatchNorm2d(num_features=inchannels),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "# nn.Conv2d(in_channels=inchannels, out_channels=inchannels, kernel_size=3, padding=1, stride=1, groups=inchannels,bias=True),", "\n", "# nn.Conv2d(in_channels=inchannels, out_channels=inchannels, kernel_size=1, padding=0, stride=1, groups=1,bias=True)", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "inchannels", ",", "out_channels", "=", "inchannels", "/", "2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "\n", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "inchannels", "/", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "inchannels", "/", "2", ",", "out_channels", "=", "inchannels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", ")", "\n", "self", ".", "init_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.network_auxi.ResidualConv.forward": [[500, 503], ["network_auxi.ResidualConv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "+", "x", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.network_auxi.ResidualConv.init_params": [[504, 525], ["network_auxi.ResidualConv.modules", "isinstance", "torch.normal_", "torch.normal_", "torch.normal_", "torch.normal_", "isinstance", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.normal_", "torch.normal_", "torch.normal_", "torch.normal_", "isinstance", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "isinstance", "torch.normal_", "torch.normal_", "torch.normal_", "torch.normal_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_"], "methods", ["None"], ["", "def", "init_params", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "# init.kaiming_normal_(m.weight, mode='fan_out')", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "# init.xavier_normal_(m.weight)", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "# init.kaiming_normal_(m.weight, mode='fan_out')", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "# init.xavier_normal_(m.weight)", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "# NN.BatchNorm2d", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.network_auxi.FeatureFusion.__init__": [[528, 537], ["torch.Module.__init__", "network_auxi.ResidualConv", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "network_auxi.ResidualConv", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inchannels", ",", "outchannels", ")", ":", "\n", "        ", "super", "(", "FeatureFusion", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "ResidualConv", "(", "inchannels", "=", "inchannels", ")", "\n", "# NN.BatchNorm2d", "\n", "self", ".", "up", "=", "nn", ".", "Sequential", "(", "ResidualConv", "(", "inchannels", "=", "inchannels", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "inchannels", ",", "out_channels", "=", "outchannels", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "outchannels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.network_auxi.FeatureFusion.forward": [[538, 540], ["network_auxi.FeatureFusion.up", "network_auxi.FeatureFusion.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "lowfeat", ",", "highfeat", ")", ":", "\n", "        ", "return", "self", ".", "up", "(", "highfeat", "+", "self", ".", "conv", "(", "lowfeat", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.network_auxi.FeatureFusion.init_params": [[541, 562], ["network_auxi.FeatureFusion.modules", "isinstance", "torch.normal_", "torch.normal_", "torch.normal_", "torch.normal_", "isinstance", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.normal_", "torch.normal_", "torch.normal_", "torch.normal_", "isinstance", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "isinstance", "torch.normal_", "torch.normal_", "torch.normal_", "torch.normal_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_"], "methods", ["None"], ["", "def", "init_params", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "# init.kaiming_normal_(m.weight, mode='fan_out')", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "# init.xavier_normal_(m.weight)", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "# init.kaiming_normal_(m.weight, mode='fan_out')", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "# init.xavier_normal_(m.weight)", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "# NN.BatchNorm2d", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.network_auxi.SenceUnderstand.__init__": [[565, 577], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "network_auxi.SenceUnderstand.initial_params", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.network_auxi.SenceUnderstand.initial_params"], ["    ", "def", "__init__", "(", "self", ",", "channels", ")", ":", "\n", "        ", "super", "(", "SenceUnderstand", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "8", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "512", "*", "8", "*", "8", ",", "self", ".", "channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "channels", ",", "out_channels", "=", "self", ".", "channels", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "initial_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.network_auxi.SenceUnderstand.forward": [[578, 588], ["x.repeat.repeat.size", "network_auxi.SenceUnderstand.conv1", "network_auxi.SenceUnderstand.pool", "x.repeat.repeat.view", "network_auxi.SenceUnderstand.fc", "x.repeat.repeat.view", "network_auxi.SenceUnderstand.conv2", "x.repeat.repeat.repeat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "n", ",", "c", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "pool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "n", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "n", ",", "self", ".", "channels", ",", "1", ",", "1", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "x", ".", "repeat", "(", "1", ",", "1", ",", "h", ",", "w", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.network_auxi.SenceUnderstand.initial_params": [[589, 603], ["network_auxi.SenceUnderstand.modules", "isinstance", "m.weight.data.normal_", "isinstance", "m.bias.data.fill_", "m.weight.data.normal_", "isinstance", "m.bias.data.fill_", "m.weight.data.normal_"], "methods", ["None"], ["", "def", "initial_params", "(", "self", ",", "dev", "=", "0.01", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "# print torch.sum(m.weight)", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "dev", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "# print torch.sum(m.weight)", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "dev", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "dev", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.network_auxi.resnet18_stride32": [[16, 18], ["network_auxi.DepthNet"], "function", ["None"], ["def", "resnet18_stride32", "(", ")", ":", "\n", "    ", "return", "DepthNet", "(", "backbone", "=", "'resnet'", ",", "depth", "=", "18", ",", "upfactors", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "", "def", "resnet34_stride32", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.network_auxi.resnet34_stride32": [[18, 20], ["network_auxi.DepthNet"], "function", ["None"], ["", "def", "resnet34_stride32", "(", ")", ":", "\n", "    ", "return", "DepthNet", "(", "backbone", "=", "'resnet'", ",", "depth", "=", "34", ",", "upfactors", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "", "def", "resnet50_stride32", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.network_auxi.resnet50_stride32": [[20, 22], ["network_auxi.DepthNet"], "function", ["None"], ["", "def", "resnet50_stride32", "(", ")", ":", "\n", "    ", "return", "DepthNet", "(", "backbone", "=", "'resnet'", ",", "depth", "=", "50", ",", "upfactors", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "", "def", "resnet101_stride32", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.network_auxi.resnet101_stride32": [[22, 24], ["network_auxi.DepthNet"], "function", ["None"], ["", "def", "resnet101_stride32", "(", ")", ":", "\n", "    ", "return", "DepthNet", "(", "backbone", "=", "'resnet'", ",", "depth", "=", "101", ",", "upfactors", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "", "def", "resnet152_stride32", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.network_auxi.resnet152_stride32": [[24, 26], ["network_auxi.DepthNet"], "function", ["None"], ["", "def", "resnet152_stride32", "(", ")", ":", "\n", "    ", "return", "DepthNet", "(", "backbone", "=", "'resnet'", ",", "depth", "=", "152", ",", "upfactors", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.network_auxi.resnext101_stride32x8d": [[27, 29], ["network_auxi.DepthNet"], "function", ["None"], ["", "def", "resnext101_stride32x8d", "(", ")", ":", "\n", "    ", "return", "DepthNet", "(", "backbone", "=", "'resnext101_32x8d'", ",", "depth", "=", "101", ",", "upfactors", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.network_auxi.mobilenetv2": [[30, 32], ["network_auxi.DepthNet"], "function", ["None"], ["", "def", "mobilenetv2", "(", ")", ":", "\n", "    ", "return", "DepthNet", "(", "backbone", "=", "'mobilenetv2'", ",", "depth", "=", "00", ",", "upfactors", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.PWN_planes.PWNPlanesLoss.__init__": [[10, 36], ["torch.Module.__init__", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "PWN_planes.PWNPlanesLoss.init_image_coor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.test_utils.init_image_coor"], ["def", "__init__", "(", "self", ",", "focal_x", ",", "focal_y", ",", "input_size", ",", "\n", "delta_cos", "=", "0.867", ",", "delta_diff_x", "=", "0.007", ",", "\n", "delta_diff_y", "=", "0.007", ",", "sample_groups", "=", "5000", ",", "xyz_mode", "=", "'uvd'", ")", ":", "\n", "        ", "\"\"\"\n        Virtual normal planes loss, which constrain points to be on the same 3D plane.\n        :para focal_x: folcal length fx\n        :para focal_y: folcal length fy\n        :para input_size: input image size\n        :para delta_cos: a threshold for the angle among three point, three points should not be on the same plane\n        :para  delta_diff_x: a threshold for the distance among three points along the x axis\n        :para delta_diff_y: a threshold for the distance among three points along the y axis\n        :para sample_groups: sample groups number, each group with 3 points can construct a plane\n        :para xyz_mode: using (u, v, d) or (x, y, z) to construct the virtual planes\n        \"\"\"", "\n", "super", "(", "PWNPlanesLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fx", "=", "torch", ".", "tensor", "(", "[", "focal_x", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "self", ".", "fy", "=", "torch", ".", "tensor", "(", "[", "focal_y", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "u0", "=", "torch", ".", "tensor", "(", "input_size", "[", "1", "]", "//", "2", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "self", ".", "v0", "=", "torch", ".", "tensor", "(", "input_size", "[", "0", "]", "//", "2", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "self", ".", "init_image_coor", "(", ")", "\n", "self", ".", "delta_cos", "=", "delta_cos", "\n", "self", ".", "delta_diff_x", "=", "delta_diff_x", "\n", "self", ".", "delta_diff_y", "=", "delta_diff_y", "\n", "self", ".", "sample_groups", "=", "sample_groups", "\n", "self", ".", "xyz_mode", "=", "xyz_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.PWN_planes.PWNPlanesLoss.init_image_coor": [[37, 51], ["numpy.arange", "numpy.tile", "torch.from_numpy().cuda.astype", "torch.from_numpy().cuda.astype", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "numpy.arange", "torch.from_numpy().cuda.astype", "torch.from_numpy().cuda.astype", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "numpy.tile", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().cuda.copy", "torch.from_numpy().cuda.copy", "torch.from_numpy().cuda.copy", "torch.from_numpy().cuda.copy"], "methods", ["None"], ["", "def", "init_image_coor", "(", "self", ")", ":", "\n", "        ", "x_row", "=", "np", ".", "arange", "(", "0", ",", "self", ".", "input_size", "[", "1", "]", ")", "\n", "x", "=", "np", ".", "tile", "(", "x_row", ",", "(", "self", ".", "input_size", "[", "0", "]", ",", "1", ")", ")", "\n", "x", "=", "x", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", "\n", "x", "=", "x", ".", "astype", "(", "np", ".", "float32", ")", "\n", "x", "=", "torch", ".", "from_numpy", "(", "x", ".", "copy", "(", ")", ")", ".", "cuda", "(", ")", "\n", "self", ".", "u_u0", "=", "x", "-", "self", ".", "u0", "\n", "\n", "y_col", "=", "np", ".", "arange", "(", "0", ",", "self", ".", "input_size", "[", "0", "]", ")", "# y_col = np.arange(0, height)", "\n", "y", "=", "np", ".", "tile", "(", "y_col", ",", "(", "self", ".", "input_size", "[", "1", "]", ",", "1", ")", ")", ".", "T", "\n", "y", "=", "y", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", "\n", "y", "=", "y", ".", "astype", "(", "np", ".", "float32", ")", "\n", "y", "=", "torch", ".", "from_numpy", "(", "y", ".", "copy", "(", ")", ")", ".", "cuda", "(", ")", "\n", "self", ".", "v_v0", "=", "y", "-", "self", ".", "v0", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.PWN_planes.PWNPlanesLoss.transfer_uvz": [[52, 59], ["PWN_planes.PWNPlanesLoss.u_u0.max", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "PWN_planes.PWNPlanesLoss.u_u0.repeat", "PWN_planes.PWNPlanesLoss.v_v0.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "transfer_uvz", "(", "self", ",", "depth", ")", ":", "\n", "        ", "max_uv", "=", "self", ".", "u_u0", ".", "max", "(", ")", "\n", "u", "=", "self", ".", "u_u0", ".", "repeat", "(", "(", "depth", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", ")", ")", "/", "max_uv", "\n", "v", "=", "self", ".", "v_v0", ".", "repeat", "(", "(", "depth", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", ")", ")", "/", "max_uv", "\n", "z", "=", "depth", "\n", "pw", "=", "torch", ".", "cat", "(", "[", "u", ",", "v", ",", "z", "]", ",", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "# [b, h, w, c]", "\n", "return", "pw", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.PWN_planes.PWNPlanesLoss.transfer_xyz": [[60, 66], ["torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "transfer_xyz", "(", "self", ",", "depth", ")", ":", "\n", "        ", "x", "=", "self", ".", "u_u0", "*", "torch", ".", "abs", "(", "depth", ")", "/", "self", ".", "fx", "\n", "y", "=", "self", ".", "v_v0", "*", "torch", ".", "abs", "(", "depth", ")", "/", "self", ".", "fy", "\n", "z", "=", "depth", "\n", "pw", "=", "torch", ".", "cat", "(", "[", "x", ",", "y", ",", "z", "]", ",", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "# [b, h, w, c]", "\n", "return", "pw", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.PWN_planes.PWNPlanesLoss.select_index": [[67, 116], ["int", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "range", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "p1_x.append", "p1_y.append", "p2_x.append", "p2_y.append", "p3_x.append", "p3_y.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.cat.size", "torch.cat.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mask_kp_i.to", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm"], "methods", ["None"], ["", "def", "select_index", "(", "self", ",", "mask_kp", ")", ":", "\n", "        ", "x", ",", "_", ",", "h", ",", "w", "=", "mask_kp", ".", "shape", "\n", "\n", "select_size", "=", "int", "(", "3", "*", "self", ".", "sample_groups", ")", "\n", "p1_x", "=", "[", "]", "\n", "p1_y", "=", "[", "]", "\n", "p2_x", "=", "[", "]", "\n", "p2_y", "=", "[", "]", "\n", "p3_x", "=", "[", "]", "\n", "p3_y", "=", "[", "]", "\n", "valid_batch", "=", "torch", ".", "ones", "(", "(", "x", ",", "1", ")", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "for", "i", "in", "range", "(", "x", ")", ":", "\n", "            ", "mask_kp_i", "=", "mask_kp", "[", "i", ",", "0", ",", ":", ",", ":", "]", "\n", "valid_points", "=", "torch", ".", "nonzero", "(", "mask_kp_i", ")", "\n", "\n", "if", "valid_points", ".", "shape", "[", "0", "]", "<", "select_size", "*", "0.6", ":", "\n", "                ", "valid_points", "=", "torch", ".", "nonzero", "(", "~", "mask_kp_i", ".", "to", "(", "torch", ".", "uint8", ")", ")", "\n", "valid_batch", "[", "i", ",", ":", "]", "=", "False", "\n", "", "elif", "valid_points", ".", "shape", "[", "0", "]", "<", "select_size", ":", "\n", "                ", "repeat_idx", "=", "torch", ".", "randperm", "(", "valid_points", ".", "shape", "[", "0", "]", ")", "[", ":", "select_size", "-", "valid_points", ".", "shape", "[", "0", "]", "]", "\n", "valid_repeat", "=", "valid_points", "[", "repeat_idx", "]", "\n", "valid_points", "=", "torch", ".", "cat", "(", "(", "valid_points", ",", "valid_repeat", ")", ",", "0", ")", "\n", "", "else", ":", "\n", "                ", "valid_points", "=", "valid_points", "\n", "", "\"\"\"\n            \n            if valid_points.shape[0] <= select_size:\n                valid_points = torch.nonzero(~mask_kp_i.to(torch.uint8))\n                valid_batch[i, :] = False\n            \"\"\"", "\n", "select_indx", "=", "torch", ".", "randperm", "(", "valid_points", ".", "size", "(", "0", ")", ")", "\n", "\n", "p1", "=", "valid_points", "[", "select_indx", "[", "0", ":", "select_size", ":", "3", "]", "]", "\n", "p2", "=", "valid_points", "[", "select_indx", "[", "1", ":", "select_size", ":", "3", "]", "]", "\n", "p3", "=", "valid_points", "[", "select_indx", "[", "2", ":", "select_size", ":", "3", "]", "]", "\n", "\n", "p1_x", ".", "append", "(", "p1", "[", ":", ",", "1", "]", ")", "\n", "p1_y", ".", "append", "(", "p1", "[", ":", ",", "0", "]", ")", "\n", "\n", "p2_x", ".", "append", "(", "p2", "[", ":", ",", "1", "]", ")", "\n", "p2_y", ".", "append", "(", "p2", "[", ":", ",", "0", "]", ")", "\n", "\n", "p3_x", ".", "append", "(", "p3", "[", ":", ",", "1", "]", ")", "\n", "p3_y", ".", "append", "(", "p3", "[", ":", ",", "0", "]", ")", "\n", "", "p123", "=", "{", "'p1_x'", ":", "torch", ".", "stack", "(", "p1_x", ")", ",", "'p1_y'", ":", "torch", ".", "stack", "(", "p1_y", ")", ",", "\n", "'p2_x'", ":", "torch", ".", "stack", "(", "p2_x", ")", ",", "'p2_y'", ":", "torch", ".", "stack", "(", "p2_y", ")", ",", "\n", "'p3_x'", ":", "torch", ".", "stack", "(", "p3_x", ")", ",", "'p3_y'", ":", "torch", ".", "stack", "(", "p3_y", ")", ",", "\n", "'valid_batch'", ":", "valid_batch", "}", "\n", "return", "p123", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.PWN_planes.PWNPlanesLoss.form_pw_groups": [[117, 139], ["pw.repeat.repeat.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "numpy.arange"], "methods", ["None"], ["", "def", "form_pw_groups", "(", "self", ",", "p123", ",", "pw", ")", ":", "\n", "        ", "\"\"\"\n        Form 3D points groups, with 3 points in each grouup.\n        :param p123: points index\n        :param pw: 3D points, # [1, h, w, c]\n        :return:\n        \"\"\"", "\n", "p1_x", "=", "p123", "[", "'p1_x'", "]", "\n", "p1_y", "=", "p123", "[", "'p1_y'", "]", "\n", "p2_x", "=", "p123", "[", "'p2_x'", "]", "\n", "p2_y", "=", "p123", "[", "'p2_y'", "]", "\n", "p3_x", "=", "p123", "[", "'p3_x'", "]", "\n", "p3_y", "=", "p123", "[", "'p3_y'", "]", "\n", "batch_list", "=", "np", ".", "arange", "(", "0", ",", "p1_x", ".", "shape", "[", "0", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "pw", "=", "pw", ".", "repeat", "(", "(", "p1_x", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "pw1", "=", "pw", "[", "batch_list", ",", "p1_y", ",", "p1_x", ",", ":", "]", "\n", "pw2", "=", "pw", "[", "batch_list", ",", "p2_y", ",", "p2_x", ",", ":", "]", "\n", "pw3", "=", "pw", "[", "batch_list", ",", "p3_y", ",", "p3_x", ",", ":", "]", "\n", "\n", "# [B, N, 3(x,y,z), 3(p1,p2,p3)]", "\n", "pw_groups", "=", "torch", ".", "cat", "(", "[", "pw1", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "pw2", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "pw3", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "]", ",", "3", ")", "\n", "return", "pw_groups", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.PWN_planes.PWNPlanesLoss.filter_mask": [[140, 167], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.view().permute", "torch.cat.view().permute", "torch.cat.view", "torch.cat.view", "torch.cat.view().permute.norm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "norm_energy.view.view.view", "mask_cos.view.view.view", "xy_diff.view().permute.norm.view", "xy_diff.view().permute.norm.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cat.view", "torch.cat.view", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], ["", "def", "filter_mask", "(", "self", ",", "pw_pred", ")", ":", "\n", "        ", "\"\"\"\n        :param pw_pred: constructed 3d vector (x, y, disp), [B, N, 3(x,y,z), 3(p1,p2,p3)]\n        \"\"\"", "\n", "xy12", "=", "pw_pred", "[", ":", ",", ":", ",", "0", ":", "2", ",", "1", "]", "-", "pw_pred", "[", ":", ",", ":", ",", "0", ":", "2", ",", "0", "]", "\n", "xy13", "=", "pw_pred", "[", ":", ",", ":", ",", "0", ":", "2", ",", "2", "]", "-", "pw_pred", "[", ":", ",", ":", ",", "0", ":", "2", ",", "0", "]", "\n", "xy23", "=", "pw_pred", "[", ":", ",", ":", ",", "0", ":", "2", ",", "2", "]", "-", "pw_pred", "[", ":", ",", ":", ",", "0", ":", "2", ",", "1", "]", "\n", "# Ignore linear", "\n", "xy_diff", "=", "torch", ".", "cat", "(", "[", "xy12", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "xy13", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "xy23", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "]", ",", "\n", "3", ")", "# [b, n, 2(xy), 3]", "\n", "m_batchsize", ",", "groups", ",", "coords", ",", "index", "=", "xy_diff", ".", "shape", "\n", "proj_query", "=", "xy_diff", ".", "view", "(", "m_batchsize", "*", "groups", ",", "-", "1", ",", "index", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# [bn, 3(p123), 2(xy)]", "\n", "proj_key", "=", "xy_diff", ".", "view", "(", "m_batchsize", "*", "groups", ",", "-", "1", ",", "index", ")", "# [bn, 2(xy), 3(p123)]", "\n", "q_norm", "=", "proj_query", ".", "norm", "(", "2", ",", "dim", "=", "2", ")", "# [bn, 3(p123)]", "\n", "nm", "=", "torch", ".", "bmm", "(", "q_norm", ".", "view", "(", "m_batchsize", "*", "groups", ",", "index", ",", "1", ")", ",", "q_norm", ".", "view", "(", "m_batchsize", "*", "groups", ",", "1", ",", "index", ")", ")", "# []", "\n", "energy", "=", "torch", ".", "bmm", "(", "proj_query", ",", "proj_key", ")", "# transpose check [bn, 3(p123), 3(p123)]", "\n", "norm_energy", "=", "energy", "/", "(", "nm", "+", "1e-8", ")", "\n", "norm_energy", "=", "norm_energy", ".", "view", "(", "m_batchsize", "*", "groups", ",", "-", "1", ")", "# [bn, 9(p123)]", "\n", "mask_cos", "=", "torch", ".", "sum", "(", "(", "norm_energy", ">", "self", ".", "delta_cos", ")", "+", "(", "norm_energy", "<", "-", "self", ".", "delta_cos", ")", ",", "1", ")", ">", "3", "# igonre", "\n", "mask_cos", "=", "mask_cos", ".", "view", "(", "m_batchsize", ",", "groups", ")", "# [b, n]  # igonre", "\n", "\n", "#ignore near", "\n", "mask_x", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "xy_diff", "[", ":", ",", ":", ",", "0", ",", ":", "]", ")", "<", "self", ".", "delta_diff_x", ",", "2", ")", ">", "0", "\n", "mask_y", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "xy_diff", "[", ":", ",", ":", ",", "1", ",", ":", "]", ")", "<", "self", ".", "delta_diff_y", ",", "2", ")", ">", "0", "\n", "mask_near", "=", "mask_x", "&", "mask_y", "\n", "mask_valid_pts", "=", "~", "(", "mask_cos", "|", "mask_near", ")", "\n", "return", "mask_valid_pts", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.PWN_planes.PWNPlanesLoss.select_points_groups": [[168, 184], ["PWN_planes.PWNPlanesLoss.select_index", "PWN_planes.PWNPlanesLoss.transfer_uvz", "PWN_planes.PWNPlanesLoss.form_pw_groups", "PWN_planes.PWNPlanesLoss.filter_mask().to", "p123[].repeat", "p123[].repeat.cuda", "PWN_planes.PWNPlanesLoss.transfer_xyz", "PWN_planes.PWNPlanesLoss.form_pw_groups", "PWN_planes.PWNPlanesLoss.filter_mask"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.PWN_planes.PWNPlanesLoss.select_index", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.PWN_planes.PWNPlanesLoss.transfer_uvz", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.PWN_planes.PWNPlanesLoss.form_pw_groups", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.PWN_planes.PWNPlanesLoss.transfer_xyz", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.PWN_planes.PWNPlanesLoss.form_pw_groups", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.PWN_planes.PWNPlanesLoss.filter_mask"], ["", "def", "select_points_groups", "(", "self", ",", "pred_depth", ",", "mask_kp", ")", ":", "\n", "        ", "p123", "=", "self", ".", "select_index", "(", "mask_kp", ")", "# p1_x: [x, N]", "\n", "\n", "uvz_pred", "=", "self", ".", "transfer_uvz", "(", "pred_depth", ")", "#[1, h, w, 3(xyz)]", "\n", "uvz_groups_pred", "=", "self", ".", "form_pw_groups", "(", "p123", ",", "uvz_pred", ")", "# [x, N, 3(x,y,z), 3(p1,p2,p3)]", "\n", "# mask:[b, n]", "\n", "mask_valid_pts", "=", "(", "self", ".", "filter_mask", "(", "uvz_groups_pred", ")", ")", ".", "to", "(", "torch", ".", "bool", ")", "# [x, n]", "\n", "mask_valid_batch", "=", "p123", "[", "'valid_batch'", "]", ".", "repeat", "(", "1", ",", "mask_valid_pts", ".", "shape", "[", "1", "]", ")", "# [x, n]", "\n", "mask_valid", "=", "mask_valid_pts", "&", "mask_valid_batch", ".", "cuda", "(", ")", "# [x, n]", "\n", "\n", "if", "self", ".", "xyz_mode", "==", "'uvd'", ":", "\n", "            ", "pw_groups_pred", "=", "uvz_groups_pred", "\n", "", "else", ":", "\n", "            ", "xyz_pred", "=", "self", ".", "transfer_xyz", "(", "pred_depth", ")", "# [1, h, w, 3(xyz)]", "\n", "pw_groups_pred", "=", "self", ".", "form_pw_groups", "(", "p123", ",", "xyz_pred", ")", "# [x, N, 3(x,y,z), 3(p1,p2,p3)]", "\n", "", "return", "pw_groups_pred", ",", "mask_valid", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.PWN_planes.PWNPlanesLoss.constrain_a_plane_loss": [[185, 212], ["torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "cos_diff.numel", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze"], "methods", ["None"], ["", "def", "constrain_a_plane_loss", "(", "self", ",", "pw_groups_pre_i", ",", "mask_valid_i", ")", ":", "\n", "        ", "\"\"\"\n        pw_groups_pre: selected points groups for the i-th plane,\n        \"\"\"", "\n", "if", "torch", ".", "sum", "(", "mask_valid_i", ")", "<", "2", ":", "\n", "            ", "return", "[", "0.0", ",", "0", "]", "\n", "", "pw_groups_pred_i", "=", "pw_groups_pre_i", "[", "mask_valid_i", "]", "# [n, 3, 3]", "\n", "p12", "=", "pw_groups_pred_i", "[", ":", ",", ":", ",", "1", "]", "-", "pw_groups_pred_i", "[", ":", ",", ":", ",", "0", "]", "\n", "p13", "=", "pw_groups_pred_i", "[", ":", ",", ":", ",", "2", "]", "-", "pw_groups_pred_i", "[", ":", ",", ":", ",", "0", "]", "\n", "virtual_normal", "=", "torch", ".", "cross", "(", "p12", ",", "p13", ",", "dim", "=", "1", ")", "# [n, 3]", "\n", "norm", "=", "torch", ".", "norm", "(", "virtual_normal", ",", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "virtual_normal", "=", "virtual_normal", "/", "(", "norm", "+", "1e-8", ")", "\n", "\n", "# re-orient normals consistently", "\n", "orient_mask", "=", "torch", ".", "sum", "(", "torch", ".", "squeeze", "(", "virtual_normal", ")", "*", "torch", ".", "squeeze", "(", "pw_groups_pred_i", "[", ":", ",", ":", ",", "0", "]", ")", ",", "dim", "=", "1", ")", ">", "0", "\n", "virtual_normal", "[", "orient_mask", "]", "*=", "-", "1", "\n", "#direct = virtual_normal[:, 2] / torch.abs(virtual_normal[:, 2])", "\n", "#virtual_normal = virtual_normal / direct[:, None]  # [n, 3]", "\n", "\n", "aver_normal", "=", "torch", ".", "sum", "(", "virtual_normal", ",", "dim", "=", "0", ")", "\n", "aver_norm", "=", "torch", ".", "norm", "(", "aver_normal", ",", "2", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "aver_normal", "=", "aver_normal", "/", "(", "aver_norm", "+", "1e-5", ")", "# [3]", "\n", "\n", "cos_diff", "=", "1.0", "-", "torch", ".", "sum", "(", "virtual_normal", "*", "aver_normal", ",", "dim", "=", "1", ")", "\n", "loss", "=", "torch", ".", "sum", "(", "cos_diff", ",", "dim", "=", "0", ")", "\n", "valid_num", "=", "cos_diff", ".", "numel", "(", ")", "\n", "return", "loss", ",", "valid_num", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.PWN_planes.PWNPlanesLoss.forward": [[213, 243], ["torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "range", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "PWN_planes.PWNPlanesLoss.select_points_groups", "range", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "len", "PWN_planes.PWNPlanesLoss.constrain_a_plane_loss", "torch.unique.numel", "torch.unique.numel"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.PWN_planes.PWNPlanesLoss.select_points_groups", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.PWN_planes.PWNPlanesLoss.constrain_a_plane_loss"], ["", "def", "forward", "(", "self", ",", "gt_depth", ",", "pred_depth", ",", "mask", ",", "focal_length", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Virtual normal loss.\n        :param pred_depth: predicted depth map, [B,C,H,W]\n        :param mask: mask for planes, each plane is noted with a value, [B, C, H, W]\n        :param focal_length: focal length\n        \"\"\"", "\n", "B", ",", "_", ",", "_", ",", "_", "=", "pred_depth", ".", "shape", "\n", "loss", "=", "torch", ".", "tensor", "(", "0.0", ")", ".", "cuda", "(", ")", "\n", "valid_planes_num", "=", "0", "\n", "for", "i", "in", "range", "(", "B", ")", ":", "\n", "            ", "self", ".", "fx", "=", "focal_length", "[", "i", "]", "if", "focal_length", "is", "not", "None", "else", "256.0", "\n", "self", ".", "fy", "=", "focal_length", "[", "i", "]", "if", "focal_length", "is", "not", "None", "else", "256.0", "\n", "\n", "pred_depth_i", "=", "pred_depth", "[", "i", ",", ":", "]", "\n", "mask_i", "=", "mask", "[", "i", ",", ":", "]", "[", "None", ",", ":", ",", ":", "]", "\n", "unique_planes", "=", "torch", ".", "unique", "(", "mask_i", ")", "\n", "planes", "=", "[", "mask_i", "==", "m", "for", "m", "in", "unique_planes", "if", "m", "!=", "0", "]", "#[x, 1, h, w] x is the planes number", "\n", "if", "len", "(", "planes", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "mask_planes", "=", "torch", ".", "stack", "(", "planes", ",", "dim", "=", "0", ")", "#torch.cat(planes, dim=0) #", "\n", "pw_groups_pred", ",", "mask_valid", "=", "self", ".", "select_points_groups", "(", "pred_depth_i", "[", "None", ",", ":", ",", ":", ",", ":", "]", ",", "mask_planes", ")", "# [x, N, 3(x,y,z), 3(p1,p2,p3)]", "\n", "for", "j", "in", "range", "(", "unique_planes", ".", "numel", "(", ")", "-", "1", ")", ":", "\n", "                ", "mask_valid_j", "=", "mask_valid", "[", "j", ",", ":", "]", "\n", "pw_groups_pred_j", "=", "pw_groups_pred", "[", "j", ",", ":", "]", "\n", "loss_tmp", ",", "valid_angles", "=", "self", ".", "constrain_a_plane_loss", "(", "pw_groups_pred_j", ",", "mask_valid_j", ")", "\n", "valid_planes_num", "+=", "valid_angles", "\n", "loss", "+=", "loss_tmp", "\n", "", "", "loss", "/=", "(", "valid_planes_num", "+", "1e-8", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.Surface_normal.init_image_coor": [[6, 21], ["numpy.arange", "numpy.tile", "torch.from_numpy().cuda.astype", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "numpy.arange", "torch.from_numpy().cuda.astype", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "numpy.tile", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().cuda.copy", "torch.from_numpy().cuda.copy"], "function", ["None"], ["def", "init_image_coor", "(", "height", ",", "width", ")", ":", "\n", "    ", "x_row", "=", "np", ".", "arange", "(", "0", ",", "width", ")", "\n", "x", "=", "np", ".", "tile", "(", "x_row", ",", "(", "height", ",", "1", ")", ")", "\n", "x", "=", "x", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", "\n", "x", "=", "x", ".", "astype", "(", "np", ".", "float32", ")", "\n", "x", "=", "torch", ".", "from_numpy", "(", "x", ".", "copy", "(", ")", ")", ".", "cuda", "(", ")", "\n", "u_u0", "=", "x", "-", "width", "/", "2.0", "\n", "\n", "y_col", "=", "np", ".", "arange", "(", "0", ",", "height", ")", "# y_col = np.arange(0, height)", "\n", "y", "=", "np", ".", "tile", "(", "y_col", ",", "(", "width", ",", "1", ")", ")", ".", "T", "\n", "y", "=", "y", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", "\n", "y", "=", "y", ".", "astype", "(", "np", ".", "float32", ")", "\n", "y", "=", "torch", ".", "from_numpy", "(", "y", ".", "copy", "(", ")", ")", ".", "cuda", "(", ")", "\n", "v_v0", "=", "y", "-", "height", "/", "2.0", "\n", "return", "u_u0", ",", "v_v0", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.Surface_normal.depth_to_xyz": [[23, 31], ["Surface_normal.init_image_coor", "torch.cat().permute", "torch.cat().permute", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.test_utils.init_image_coor"], ["", "def", "depth_to_xyz", "(", "depth", ",", "focal_length", ")", ":", "\n", "    ", "b", ",", "c", ",", "h", ",", "w", "=", "depth", ".", "shape", "\n", "u_u0", ",", "v_v0", "=", "init_image_coor", "(", "h", ",", "w", ")", "\n", "x", "=", "u_u0", "*", "depth", "/", "focal_length", "\n", "y", "=", "v_v0", "*", "depth", "/", "focal_length", "\n", "z", "=", "depth", "\n", "pw", "=", "torch", ".", "cat", "(", "[", "x", ",", "y", ",", "z", "]", ",", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "# [b, h, w, c]", "\n", "return", "pw", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.Surface_normal.get_surface_normal": [[33, 93], ["torch.unbind", "torch.unbind", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.ones().cuda", "torch.ones().cuda", "torch.functional.conv2d", "torch.functional.conv2d", "torch.functional.conv2d", "torch.functional.conv2d", "torch.functional.conv2d", "torch.functional.conv2d", "torch.stack", "torch.stack", "torch.squeeze", "torch.squeeze", "torch.reshape", "torch.reshape", "torch.functional.conv2d", "torch.functional.conv2d", "torch.functional.conv2d", "torch.stack", "torch.stack", "torch.squeeze", "torch.squeeze", "torch.unsqueeze", "torch.unsqueeze", "int", "int", "torch.randn().cuda", "torch.randn().cuda", "range", "torch.sqrt", "torch.sqrt", "[].repeat", "int", "range", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.ones", "torch.ones", "int", "int", "int", "int", "int", "int", "torch.reshape.size", "torch.reshape.size", "int", "int", "int", "torch.unsqueeze.size", "torch.unsqueeze.size", "torch.randn", "torch.randn", "int", "torch.solve", "torch.solve", "torch.reshape.size", "torch.reshape.size", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.eye", "torch.eye"], "function", ["None"], ["", "def", "get_surface_normal", "(", "xyz", ",", "patch_size", "=", "5", ")", ":", "\n", "# xyz: [1, h, w, 3]", "\n", "    ", "x", ",", "y", ",", "z", "=", "torch", ".", "unbind", "(", "xyz", ",", "dim", "=", "3", ")", "\n", "x", "=", "torch", ".", "unsqueeze", "(", "x", ",", "0", ")", "\n", "y", "=", "torch", ".", "unsqueeze", "(", "y", ",", "0", ")", "\n", "z", "=", "torch", ".", "unsqueeze", "(", "z", ",", "0", ")", "\n", "\n", "xx", "=", "x", "*", "x", "\n", "yy", "=", "y", "*", "y", "\n", "zz", "=", "z", "*", "z", "\n", "xy", "=", "x", "*", "y", "\n", "xz", "=", "x", "*", "z", "\n", "yz", "=", "y", "*", "z", "\n", "patch_weight", "=", "torch", ".", "ones", "(", "(", "1", ",", "1", ",", "patch_size", ",", "patch_size", ")", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "xx_patch", "=", "nn", ".", "functional", ".", "conv2d", "(", "xx", ",", "weight", "=", "patch_weight", ",", "padding", "=", "int", "(", "patch_size", "/", "2", ")", ")", "\n", "yy_patch", "=", "nn", ".", "functional", ".", "conv2d", "(", "yy", ",", "weight", "=", "patch_weight", ",", "padding", "=", "int", "(", "patch_size", "/", "2", ")", ")", "\n", "zz_patch", "=", "nn", ".", "functional", ".", "conv2d", "(", "zz", ",", "weight", "=", "patch_weight", ",", "padding", "=", "int", "(", "patch_size", "/", "2", ")", ")", "\n", "xy_patch", "=", "nn", ".", "functional", ".", "conv2d", "(", "xy", ",", "weight", "=", "patch_weight", ",", "padding", "=", "int", "(", "patch_size", "/", "2", ")", ")", "\n", "xz_patch", "=", "nn", ".", "functional", ".", "conv2d", "(", "xz", ",", "weight", "=", "patch_weight", ",", "padding", "=", "int", "(", "patch_size", "/", "2", ")", ")", "\n", "yz_patch", "=", "nn", ".", "functional", ".", "conv2d", "(", "yz", ",", "weight", "=", "patch_weight", ",", "padding", "=", "int", "(", "patch_size", "/", "2", ")", ")", "\n", "ATA", "=", "torch", ".", "stack", "(", "[", "xx_patch", ",", "xy_patch", ",", "xz_patch", ",", "xy_patch", ",", "yy_patch", ",", "yz_patch", ",", "xz_patch", ",", "yz_patch", ",", "zz_patch", "]", ",", "\n", "dim", "=", "4", ")", "\n", "ATA", "=", "torch", ".", "squeeze", "(", "ATA", ")", "\n", "ATA", "=", "torch", ".", "reshape", "(", "ATA", ",", "(", "ATA", ".", "size", "(", "0", ")", ",", "ATA", ".", "size", "(", "1", ")", ",", "3", ",", "3", ")", ")", "\n", "eps_identity", "=", "1e-6", "*", "torch", ".", "eye", "(", "3", ",", "device", "=", "ATA", ".", "device", ",", "dtype", "=", "ATA", ".", "dtype", ")", "[", "None", ",", "None", ",", ":", ",", ":", "]", ".", "repeat", "(", "[", "ATA", ".", "size", "(", "0", ")", ",", "ATA", ".", "size", "(", "1", ")", ",", "1", ",", "1", "]", ")", "\n", "ATA", "=", "ATA", "+", "eps_identity", "\n", "x_patch", "=", "nn", ".", "functional", ".", "conv2d", "(", "x", ",", "weight", "=", "patch_weight", ",", "padding", "=", "int", "(", "patch_size", "/", "2", ")", ")", "\n", "y_patch", "=", "nn", ".", "functional", ".", "conv2d", "(", "y", ",", "weight", "=", "patch_weight", ",", "padding", "=", "int", "(", "patch_size", "/", "2", ")", ")", "\n", "z_patch", "=", "nn", ".", "functional", ".", "conv2d", "(", "z", ",", "weight", "=", "patch_weight", ",", "padding", "=", "int", "(", "patch_size", "/", "2", ")", ")", "\n", "AT1", "=", "torch", ".", "stack", "(", "[", "x_patch", ",", "y_patch", ",", "z_patch", "]", ",", "dim", "=", "4", ")", "\n", "AT1", "=", "torch", ".", "squeeze", "(", "AT1", ")", "\n", "AT1", "=", "torch", ".", "unsqueeze", "(", "AT1", ",", "3", ")", "\n", "\n", "patch_num", "=", "4", "\n", "patch_x", "=", "int", "(", "AT1", ".", "size", "(", "1", ")", "/", "patch_num", ")", "\n", "patch_y", "=", "int", "(", "AT1", ".", "size", "(", "0", ")", "/", "patch_num", ")", "\n", "n_img", "=", "torch", ".", "randn", "(", "AT1", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "overlap", "=", "patch_size", "//", "2", "+", "1", "\n", "for", "x", "in", "range", "(", "int", "(", "patch_num", ")", ")", ":", "\n", "        ", "for", "y", "in", "range", "(", "int", "(", "patch_num", ")", ")", ":", "\n", "            ", "left_flg", "=", "0", "if", "x", "==", "0", "else", "1", "\n", "right_flg", "=", "0", "if", "x", "==", "patch_num", "-", "1", "else", "1", "\n", "top_flg", "=", "0", "if", "y", "==", "0", "else", "1", "\n", "btm_flg", "=", "0", "if", "y", "==", "patch_num", "-", "1", "else", "1", "\n", "at1", "=", "AT1", "[", "y", "*", "patch_y", "-", "top_flg", "*", "overlap", ":", "(", "y", "+", "1", ")", "*", "patch_y", "+", "btm_flg", "*", "overlap", ",", "\n", "x", "*", "patch_x", "-", "left_flg", "*", "overlap", ":", "(", "x", "+", "1", ")", "*", "patch_x", "+", "right_flg", "*", "overlap", "]", "\n", "ata", "=", "ATA", "[", "y", "*", "patch_y", "-", "top_flg", "*", "overlap", ":", "(", "y", "+", "1", ")", "*", "patch_y", "+", "btm_flg", "*", "overlap", ",", "\n", "x", "*", "patch_x", "-", "left_flg", "*", "overlap", ":", "(", "x", "+", "1", ")", "*", "patch_x", "+", "right_flg", "*", "overlap", "]", "\n", "n_img_tmp", ",", "_", "=", "torch", ".", "solve", "(", "at1", ",", "ata", ")", "\n", "\n", "n_img_tmp_select", "=", "n_img_tmp", "[", "top_flg", "*", "overlap", ":", "patch_y", "+", "top_flg", "*", "overlap", ",", "left_flg", "*", "overlap", ":", "patch_x", "+", "left_flg", "*", "overlap", ",", ":", ",", ":", "]", "\n", "n_img", "[", "y", "*", "patch_y", ":", "y", "*", "patch_y", "+", "patch_y", ",", "x", "*", "patch_x", ":", "x", "*", "patch_x", "+", "patch_x", ",", ":", ",", ":", "]", "=", "n_img_tmp_select", "\n", "\n", "", "", "n_img_L2", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "n_img", "**", "2", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", ")", "\n", "n_img_norm", "=", "n_img", "/", "n_img_L2", "\n", "\n", "# re-orient normals consistently", "\n", "orient_mask", "=", "torch", ".", "sum", "(", "torch", ".", "squeeze", "(", "n_img_norm", ")", "*", "torch", ".", "squeeze", "(", "xyz", ")", ",", "dim", "=", "2", ")", ">", "0", "\n", "n_img_norm", "[", "orient_mask", "]", "*=", "-", "1", "\n", "return", "n_img_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.Surface_normal.get_surface_normalv2": [[94, 157], ["torch.zeros", "torch.zeros", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "n_img_aver_norm.permute", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "get_surface_normalv2", "(", "xyz", ",", "patch_size", "=", "5", ")", ":", "\n", "    ", "\"\"\"\n    xyz: xyz coordinates\n    patch: [p1, p2, p3,\n            p4, p5, p6,\n            p7, p8, p9]\n    surface_normal = [(p9-p1) x (p3-p7)] + [(p6-p4) - (p8-p2)]\n    return: normal [h, w, 3, b]\n    \"\"\"", "\n", "b", ",", "h", ",", "w", ",", "c", "=", "xyz", ".", "shape", "\n", "half_patch", "=", "patch_size", "//", "2", "\n", "xyz_pad", "=", "torch", ".", "zeros", "(", "(", "b", ",", "h", "+", "patch_size", "-", "1", ",", "w", "+", "patch_size", "-", "1", ",", "c", ")", ",", "dtype", "=", "xyz", ".", "dtype", ",", "device", "=", "xyz", ".", "device", ")", "\n", "xyz_pad", "[", ":", ",", "half_patch", ":", "-", "half_patch", ",", "half_patch", ":", "-", "half_patch", ",", ":", "]", "=", "xyz", "\n", "\n", "# xyz_left_top = xyz_pad[:, :h, :w, :]  # p1", "\n", "# xyz_right_bottom = xyz_pad[:, -h:, -w:, :]# p9", "\n", "# xyz_left_bottom = xyz_pad[:, -h:, :w, :]   # p7", "\n", "# xyz_right_top = xyz_pad[:, :h, -w:, :]  # p3", "\n", "# xyz_cross1 = xyz_left_top - xyz_right_bottom  # p1p9", "\n", "# xyz_cross2 = xyz_left_bottom - xyz_right_top  # p7p3", "\n", "\n", "xyz_left", "=", "xyz_pad", "[", ":", ",", "half_patch", ":", "half_patch", "+", "h", ",", ":", "w", ",", ":", "]", "# p4", "\n", "xyz_right", "=", "xyz_pad", "[", ":", ",", "half_patch", ":", "half_patch", "+", "h", ",", "-", "w", ":", ",", ":", "]", "# p6", "\n", "xyz_top", "=", "xyz_pad", "[", ":", ",", ":", "h", ",", "half_patch", ":", "half_patch", "+", "w", ",", ":", "]", "# p2", "\n", "xyz_bottom", "=", "xyz_pad", "[", ":", ",", "-", "h", ":", ",", "half_patch", ":", "half_patch", "+", "w", ",", ":", "]", "# p8", "\n", "xyz_horizon", "=", "xyz_left", "-", "xyz_right", "# p4p6", "\n", "xyz_vertical", "=", "xyz_top", "-", "xyz_bottom", "# p2p8", "\n", "\n", "xyz_left_in", "=", "xyz_pad", "[", ":", ",", "half_patch", ":", "half_patch", "+", "h", ",", "1", ":", "w", "+", "1", ",", ":", "]", "# p4", "\n", "xyz_right_in", "=", "xyz_pad", "[", ":", ",", "half_patch", ":", "half_patch", "+", "h", ",", "patch_size", "-", "1", ":", "patch_size", "-", "1", "+", "w", ",", ":", "]", "# p6", "\n", "xyz_top_in", "=", "xyz_pad", "[", ":", ",", "1", ":", "h", "+", "1", ",", "half_patch", ":", "half_patch", "+", "w", ",", ":", "]", "# p2", "\n", "xyz_bottom_in", "=", "xyz_pad", "[", ":", ",", "patch_size", "-", "1", ":", "patch_size", "-", "1", "+", "h", ",", "half_patch", ":", "half_patch", "+", "w", ",", ":", "]", "# p8", "\n", "xyz_horizon_in", "=", "xyz_left_in", "-", "xyz_right_in", "# p4p6", "\n", "xyz_vertical_in", "=", "xyz_top_in", "-", "xyz_bottom_in", "# p2p8", "\n", "\n", "n_img_1", "=", "torch", ".", "cross", "(", "xyz_horizon_in", ",", "xyz_vertical_in", ",", "dim", "=", "3", ")", "\n", "n_img_2", "=", "torch", ".", "cross", "(", "xyz_horizon", ",", "xyz_vertical", ",", "dim", "=", "3", ")", "\n", "\n", "# re-orient normals consistently", "\n", "orient_mask", "=", "torch", ".", "sum", "(", "n_img_1", "*", "xyz", ",", "dim", "=", "3", ")", ">", "0", "\n", "n_img_1", "[", "orient_mask", "]", "*=", "-", "1", "\n", "orient_mask", "=", "torch", ".", "sum", "(", "n_img_2", "*", "xyz", ",", "dim", "=", "3", ")", ">", "0", "\n", "n_img_2", "[", "orient_mask", "]", "*=", "-", "1", "\n", "\n", "n_img1_L2", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "n_img_1", "**", "2", ",", "dim", "=", "3", ",", "keepdim", "=", "True", ")", ")", "\n", "n_img1_norm", "=", "n_img_1", "/", "(", "n_img1_L2", "+", "1e-8", ")", "\n", "\n", "n_img2_L2", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "n_img_2", "**", "2", ",", "dim", "=", "3", ",", "keepdim", "=", "True", ")", ")", "\n", "n_img2_norm", "=", "n_img_2", "/", "(", "n_img2_L2", "+", "1e-8", ")", "\n", "\n", "# average 2 norms", "\n", "n_img_aver", "=", "n_img1_norm", "+", "n_img2_norm", "\n", "n_img_aver_L2", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "n_img_aver", "**", "2", ",", "dim", "=", "3", ",", "keepdim", "=", "True", ")", ")", "\n", "n_img_aver_norm", "=", "n_img_aver", "/", "(", "n_img_aver_L2", "+", "1e-8", ")", "\n", "# re-orient normals consistently", "\n", "orient_mask", "=", "torch", ".", "sum", "(", "n_img_aver_norm", "*", "xyz", ",", "dim", "=", "3", ")", ">", "0", "\n", "n_img_aver_norm", "[", "orient_mask", "]", "*=", "-", "1", "\n", "n_img_aver_norm_out", "=", "n_img_aver_norm", ".", "permute", "(", "(", "1", ",", "2", ",", "3", ",", "0", ")", ")", "# [h, w, c, b]", "\n", "\n", "# a = torch.sum(n_img1_norm_out*n_img2_norm_out, dim=2).cpu().numpy().squeeze()", "\n", "# plt.imshow(np.abs(a), cmap='rainbow')", "\n", "# plt.show()", "\n", "return", "n_img_aver_norm_out", "#n_img1_norm.permute((1, 2, 3, 0))", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.Surface_normal.surface_normal_from_depth": [[158, 175], ["torch.functional.avg_pool2d", "torch.functional.avg_pool2d", "Surface_normal.depth_to_xyz", "range", "torch.cat().permute", "torch.cat().permute", "Surface_normal.get_surface_normalv2", "torch.cat().permute.append", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.Surface_normal.depth_to_xyz", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.Surface_normal.get_surface_normalv2"], ["", "def", "surface_normal_from_depth", "(", "depth", ",", "focal_length", ",", "valid_mask", "=", "None", ")", ":", "\n", "# para depth: depth map, [b, c, h, w]", "\n", "    ", "b", ",", "c", ",", "h", ",", "w", "=", "depth", ".", "shape", "\n", "focal_length", "=", "focal_length", "[", ":", ",", "None", ",", "None", ",", "None", "]", "\n", "depth_filter", "=", "nn", ".", "functional", ".", "avg_pool2d", "(", "depth", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "depth_filter", "=", "nn", ".", "functional", ".", "avg_pool2d", "(", "depth_filter", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "xyz", "=", "depth_to_xyz", "(", "depth_filter", ",", "focal_length", ")", "\n", "sn_batch", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "b", ")", ":", "\n", "        ", "xyz_i", "=", "xyz", "[", "i", ",", ":", "]", "[", "None", ",", ":", ",", ":", ",", ":", "]", "\n", "normal", "=", "get_surface_normalv2", "(", "xyz_i", ")", "\n", "sn_batch", ".", "append", "(", "normal", ")", "\n", "", "sn_batch", "=", "torch", ".", "cat", "(", "sn_batch", ",", "dim", "=", "3", ")", ".", "permute", "(", "(", "3", ",", "2", ",", "0", ",", "1", ")", ")", "# [b, c, h, w]", "\n", "mask_invalid", "=", "(", "~", "valid_mask", ")", ".", "repeat", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "sn_batch", "[", "mask_invalid", "]", "=", "0.0", "\n", "\n", "return", "sn_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.Surface_normal.vis_normal": [[177, 188], ["numpy.sqrt", "normal_vis.astype.astype", "numpy.sum"], "function", ["None"], ["", "def", "vis_normal", "(", "normal", ")", ":", "\n", "    ", "\"\"\"\n    Visualize surface normal. Transfer surface normal value from [-1, 1] to [0, 255]\n    @para normal: surface normal, [h, w, 3], numpy.array\n    \"\"\"", "\n", "n_img_L2", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "normal", "**", "2", ",", "axis", "=", "2", ",", "keepdims", "=", "True", ")", ")", "\n", "n_img_norm", "=", "normal", "/", "(", "n_img_L2", "+", "1e-8", ")", "\n", "normal_vis", "=", "n_img_norm", "*", "127", "\n", "normal_vis", "+=", "128", "\n", "normal_vis", "=", "normal_vis", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "return", "normal_vis", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.Surface_normal.vis_normal2": [[190, 210], ["numpy.sqrt", "numpy.abs", "numpy.sum"], "function", ["None"], ["", "def", "vis_normal2", "(", "normals", ")", ":", "\n", "    ", "'''\n    Montage of normal maps. Vectors are unit length and backfaces thresholded.\n    '''", "\n", "x", "=", "normals", "[", ":", ",", ":", ",", "0", "]", "# horizontal; pos right", "\n", "y", "=", "normals", "[", ":", ",", ":", ",", "1", "]", "# depth; pos far", "\n", "z", "=", "normals", "[", ":", ",", ":", ",", "2", "]", "# vertical; pos up", "\n", "backfacing", "=", "(", "z", ">", "0", ")", "\n", "norm", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "normals", "**", "2", ",", "axis", "=", "2", ")", ")", "\n", "zero", "=", "(", "norm", "<", "1e-5", ")", "\n", "x", "+=", "1.0", ";", "x", "*=", "0.5", "\n", "y", "+=", "1.0", ";", "y", "*=", "0.5", "\n", "z", "=", "np", ".", "abs", "(", "z", ")", "\n", "x", "[", "zero", "]", "=", "0.0", "\n", "y", "[", "zero", "]", "=", "0.0", "\n", "z", "[", "zero", "]", "=", "0.0", "\n", "normals", "[", ":", ",", ":", ",", "0", "]", "=", "x", "# horizontal; pos right", "\n", "normals", "[", ":", ",", ":", ",", "1", "]", "=", "y", "# depth; pos far", "\n", "normals", "[", ":", ",", ":", ",", "2", "]", "=", "z", "# vertical; pos up", "\n", "return", "normals", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.ranking_loss.EdgeguidedRankingLoss.__init__": [[113, 119], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "point_pairs", "=", "10000", ",", "sigma", "=", "0.03", ",", "alpha", "=", "1.0", ",", "mask_value", "=", "-", "1e-8", ")", ":", "\n", "        ", "super", "(", "EdgeguidedRankingLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "point_pairs", "=", "point_pairs", "# number of point pairs", "\n", "self", ".", "sigma", "=", "sigma", "# used for determining the ordinal relationship between a selected pair", "\n", "self", ".", "alpha", "=", "alpha", "# used for balancing the effect of = and (<,>)", "\n", "self", ".", "mask_value", "=", "mask_value", "\n", "#self.regularization_loss = GradientLoss(scales=4)", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.ranking_loss.EdgeguidedRankingLoss.getEdge": [[121, 137], ["images.size", "torch.Tensor().cuda().view().repeat", "torch.Tensor().cuda().view().repeat", "torch.Tensor().cuda().view().repeat", "torch.Tensor().cuda().view().repeat", "torch.Tensor().cuda().view().repeat", "torch.Tensor().cuda().view().repeat", "torch.Tensor().cuda().view().repeat", "torch.Tensor().cuda().view().repeat", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.pad", "torch.pad", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.pad", "torch.pad", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "images[].unsqueeze", "images[].unsqueeze", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "def", "getEdge", "(", "self", ",", "images", ")", ":", "\n", "        ", "n", ",", "c", ",", "h", ",", "w", "=", "images", ".", "size", "(", ")", "\n", "a", "=", "torch", ".", "Tensor", "(", "[", "[", "-", "1", ",", "0", ",", "1", "]", ",", "[", "-", "2", ",", "0", ",", "2", "]", ",", "[", "-", "1", ",", "0", ",", "1", "]", "]", ")", ".", "cuda", "(", ")", ".", "view", "(", "(", "1", ",", "1", ",", "3", ",", "3", ")", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "b", "=", "torch", ".", "Tensor", "(", "[", "[", "1", ",", "2", ",", "1", "]", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "2", ",", "-", "1", "]", "]", ")", ".", "cuda", "(", ")", ".", "view", "(", "(", "1", ",", "1", ",", "3", ",", "3", ")", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "if", "c", "==", "3", ":", "\n", "            ", "gradient_x", "=", "F", ".", "conv2d", "(", "images", "[", ":", ",", "0", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "1", ")", ",", "a", ")", "\n", "gradient_y", "=", "F", ".", "conv2d", "(", "images", "[", ":", ",", "0", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "1", ")", ",", "b", ")", "\n", "", "else", ":", "\n", "            ", "gradient_x", "=", "F", ".", "conv2d", "(", "images", ",", "a", ")", "\n", "gradient_y", "=", "F", ".", "conv2d", "(", "images", ",", "b", ")", "\n", "", "edges", "=", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "gradient_x", ",", "2", ")", "+", "torch", ".", "pow", "(", "gradient_y", ",", "2", ")", ")", "\n", "edges", "=", "F", ".", "pad", "(", "edges", ",", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\"constant\"", ",", "0", ")", "\n", "thetas", "=", "torch", ".", "atan2", "(", "gradient_y", ",", "gradient_x", ")", "\n", "thetas", "=", "F", ".", "pad", "(", "thetas", ",", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\"constant\"", ",", "0", ")", "\n", "\n", "return", "edges", ",", "thetas", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.ranking_loss.EdgeguidedRankingLoss.forward": [[138, 198], ["ranking_loss.EdgeguidedRankingLoss.getEdge", "targets.contiguous().view().double.contiguous().view().double.size", "torch.DoubleTensor().cuda", "torch.DoubleTensor().cuda", "torch.DoubleTensor().cuda", "torch.DoubleTensor().cuda", "range", "inputs.contiguous().view().double.contiguous().view().double.view().double", "targets.contiguous().view().double.contiguous().view().double.view().double", "masks.contiguous().view().double.contiguous().view().double.view().double", "edges_img.contiguous().view().double.contiguous().view().double.view().double", "thetas_img.contiguous().view().double.contiguous().view().double.view().double", "inputs.contiguous().view().double.contiguous().view().double.contiguous().view().double", "targets.contiguous().view().double.contiguous().view().double.contiguous().view().double", "masks.contiguous().view().double.contiguous().view().double.contiguous().view().double", "edges_img.contiguous().view().double.contiguous().view().double.contiguous().view().double", "thetas_img.contiguous().view().double.contiguous().view().double.contiguous().view().double", "ranking_loss.edgeGuidedSampling", "ranking_loss.randomSampling", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.div", "torch.div", "torch.div", "torch.div", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "loss[].float", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.div.lt", "torch.div.lt", "torch.div.gt", "torch.div.gt", "inputs.contiguous().view().double.contiguous().view().double.view", "targets.contiguous().view().double.contiguous().view().double.view", "masks.contiguous().view().double.contiguous().view().double.view", "edges_img.contiguous().view().double.contiguous().view().double.view", "thetas_img.contiguous().view().double.contiguous().view().double.view", "inputs.contiguous().view().double.contiguous().view().double.contiguous().view", "targets.contiguous().view().double.contiguous().view().double.contiguous().view", "masks.contiguous().view().double.contiguous().view().double.contiguous().view", "edges_img.contiguous().view().double.contiguous().view().double.contiguous().view", "thetas_img.contiguous().view().double.contiguous().view().double.contiguous().view", "torch.div.ge", "torch.div.ge", "torch.div.le", "torch.div.le", "mask_eq.double", "torch.log", "torch.log", "torch.log", "torch.log", "unequal_loss.mean", "equal_loss.mean", "inputs.contiguous().view().double.contiguous().view().double.contiguous", "targets.contiguous().view().double.contiguous().view().double.contiguous", "masks.contiguous().view().double.contiguous().view().double.contiguous", "edges_img.contiguous().view().double.contiguous().view().double.contiguous", "thetas_img.contiguous().view().double.contiguous().view().double.contiguous", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.ranking_loss.EdgeguidedRankingLoss.getEdge", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.ranking_loss.edgeGuidedSampling", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.ranking_loss.randomSampling"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ",", "images", ",", "masks", "=", "None", ")", ":", "\n", "        ", "if", "masks", "==", "None", ":", "\n", "            ", "masks", "=", "targets", ">", "self", ".", "mask_value", "\n", "# Comment this line if you don't want to use the multi-scale gradient matching term !!!", "\n", "# regularization_loss = self.regularization_loss(inputs.squeeze(1), targets.squeeze(1), masks.squeeze(1))", "\n", "# find edges from RGB", "\n", "", "edges_img", ",", "thetas_img", "=", "self", ".", "getEdge", "(", "images", ")", "\n", "\n", "#=============================", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "targets", ".", "size", "(", ")", "\n", "if", "n", "!=", "1", ":", "\n", "            ", "inputs", "=", "inputs", ".", "view", "(", "n", ",", "-", "1", ")", ".", "double", "(", ")", "\n", "targets", "=", "targets", ".", "view", "(", "n", ",", "-", "1", ")", ".", "double", "(", ")", "\n", "masks", "=", "masks", ".", "view", "(", "n", ",", "-", "1", ")", ".", "double", "(", ")", "\n", "edges_img", "=", "edges_img", ".", "view", "(", "n", ",", "-", "1", ")", ".", "double", "(", ")", "\n", "thetas_img", "=", "thetas_img", ".", "view", "(", "n", ",", "-", "1", ")", ".", "double", "(", ")", "\n", "\n", "", "else", ":", "\n", "            ", "inputs", "=", "inputs", ".", "contiguous", "(", ")", ".", "view", "(", "1", ",", "-", "1", ")", ".", "double", "(", ")", "\n", "targets", "=", "targets", ".", "contiguous", "(", ")", ".", "view", "(", "1", ",", "-", "1", ")", ".", "double", "(", ")", "\n", "masks", "=", "masks", ".", "contiguous", "(", ")", ".", "view", "(", "1", ",", "-", "1", ")", ".", "double", "(", ")", "\n", "edges_img", "=", "edges_img", ".", "contiguous", "(", ")", ".", "view", "(", "1", ",", "-", "1", ")", ".", "double", "(", ")", "\n", "thetas_img", "=", "thetas_img", ".", "contiguous", "(", ")", ".", "view", "(", "1", ",", "-", "1", ")", ".", "double", "(", ")", "\n", "\n", "# initialization", "\n", "", "loss", "=", "torch", ".", "DoubleTensor", "(", "[", "0.0", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "# Edge-Guided sampling", "\n", "            ", "inputs_A", ",", "inputs_B", ",", "targets_A", ",", "targets_B", ",", "masks_A", ",", "masks_B", ",", "sample_num", "=", "edgeGuidedSampling", "(", "inputs", "[", "i", ",", ":", "]", ",", "targets", "[", "i", ",", ":", "]", ",", "edges_img", "[", "i", "]", ",", "thetas_img", "[", "i", "]", ",", "masks", "[", "i", ",", ":", "]", ",", "h", ",", "w", ")", "\n", "# Random Sampling", "\n", "random_sample_num", "=", "sample_num", "\n", "random_inputs_A", ",", "random_inputs_B", ",", "random_targets_A", ",", "random_targets_B", ",", "random_masks_A", ",", "random_masks_B", "=", "randomSampling", "(", "inputs", "[", "i", ",", ":", "]", ",", "targets", "[", "i", ",", ":", "]", ",", "masks", "[", "i", ",", ":", "]", ",", "self", ".", "mask_value", ",", "random_sample_num", ")", "\n", "\n", "# Combine EGS + RS", "\n", "inputs_A", "=", "torch", ".", "cat", "(", "(", "inputs_A", ",", "random_inputs_A", ")", ",", "0", ")", "\n", "inputs_B", "=", "torch", ".", "cat", "(", "(", "inputs_B", ",", "random_inputs_B", ")", ",", "0", ")", "\n", "targets_A", "=", "torch", ".", "cat", "(", "(", "targets_A", ",", "random_targets_A", ")", ",", "0", ")", "\n", "targets_B", "=", "torch", ".", "cat", "(", "(", "targets_B", ",", "random_targets_B", ")", ",", "0", ")", "\n", "masks_A", "=", "torch", ".", "cat", "(", "(", "masks_A", ",", "random_masks_A", ")", ",", "0", ")", "\n", "masks_B", "=", "torch", ".", "cat", "(", "(", "masks_B", ",", "random_masks_B", ")", ",", "0", ")", "\n", "\n", "#GT ordinal relationship", "\n", "target_ratio", "=", "torch", ".", "div", "(", "targets_A", "+", "1e-6", ",", "targets_B", "+", "1e-6", ")", "\n", "mask_eq", "=", "target_ratio", ".", "lt", "(", "1.0", "+", "self", ".", "sigma", ")", "*", "target_ratio", ".", "gt", "(", "1.0", "/", "(", "1.0", "+", "self", ".", "sigma", ")", ")", "\n", "labels", "=", "torch", ".", "zeros_like", "(", "target_ratio", ")", "\n", "labels", "[", "target_ratio", ".", "ge", "(", "1.0", "+", "self", ".", "sigma", ")", "]", "=", "1", "\n", "labels", "[", "target_ratio", ".", "le", "(", "1.0", "/", "(", "1.0", "+", "self", ".", "sigma", ")", ")", "]", "=", "-", "1", "\n", "\n", "# consider forward-backward consistency checking, i.e, only compute losses of point pairs with valid GT", "\n", "consistency_mask", "=", "masks_A", "*", "masks_B", "\n", "\n", "equal_loss", "=", "(", "inputs_A", "-", "inputs_B", ")", ".", "pow", "(", "2", ")", "*", "mask_eq", ".", "double", "(", ")", "*", "consistency_mask", "\n", "unequal_loss", "=", "torch", ".", "log", "(", "1", "+", "torch", ".", "exp", "(", "(", "-", "inputs_A", "+", "inputs_B", ")", "*", "labels", ")", ")", "*", "(", "~", "mask_eq", ")", ".", "double", "(", ")", "*", "consistency_mask", "\n", "\n", "# Please comment the regularization term if you don't want to use the multi-scale gradient matching loss !!!", "\n", "loss", "=", "loss", "+", "self", ".", "alpha", "*", "equal_loss", ".", "mean", "(", ")", "+", "1.0", "*", "unequal_loss", ".", "mean", "(", ")", "#+ 0.2 * regularization_loss.double()", "\n", "\n", "", "return", "loss", "[", "0", "]", ".", "float", "(", ")", "/", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.ranking_loss.randomSampling": [[17, 41], ["torch.masked_select", "torch.masked_select", "len", "torch.randperm().cuda", "torch.randperm().cuda", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "targets.gt", "targets.gt", "targets.gt", "len", "len", "torch.randperm", "torch.randperm"], "function", ["None"], ["def", "randomSampling", "(", "inputs", ",", "targets", ",", "masks", ",", "threshold", ",", "sample_num", ")", ":", "\n", "\n", "# find A-B point pairs from predictions", "\n", "    ", "inputs_index", "=", "torch", ".", "masked_select", "(", "inputs", ",", "targets", ".", "gt", "(", "threshold", ")", ")", "\n", "num_effect_pixels", "=", "len", "(", "inputs_index", ")", "\n", "shuffle_effect_pixels", "=", "torch", ".", "randperm", "(", "num_effect_pixels", ")", ".", "cuda", "(", ")", "\n", "inputs_A", "=", "inputs_index", "[", "shuffle_effect_pixels", "[", "0", ":", "sample_num", "*", "2", ":", "2", "]", "]", "\n", "inputs_B", "=", "inputs_index", "[", "shuffle_effect_pixels", "[", "1", ":", "sample_num", "*", "2", ":", "2", "]", "]", "\n", "# find corresponding pairs from GT", "\n", "target_index", "=", "torch", ".", "masked_select", "(", "targets", ",", "targets", ".", "gt", "(", "threshold", ")", ")", "\n", "targets_A", "=", "target_index", "[", "shuffle_effect_pixels", "[", "0", ":", "sample_num", "*", "2", ":", "2", "]", "]", "\n", "targets_B", "=", "target_index", "[", "shuffle_effect_pixels", "[", "1", ":", "sample_num", "*", "2", ":", "2", "]", "]", "\n", "# only compute the losses of point pairs with valid GT", "\n", "consistent_masks_index", "=", "torch", ".", "masked_select", "(", "masks", ",", "targets", ".", "gt", "(", "threshold", ")", ")", "\n", "consistent_masks_A", "=", "consistent_masks_index", "[", "shuffle_effect_pixels", "[", "0", ":", "sample_num", "*", "2", ":", "2", "]", "]", "\n", "consistent_masks_B", "=", "consistent_masks_index", "[", "shuffle_effect_pixels", "[", "1", ":", "sample_num", "*", "2", ":", "2", "]", "]", "\n", "\n", "# The amount of A and B should be the same!!", "\n", "if", "len", "(", "targets_A", ")", ">", "len", "(", "targets_B", ")", ":", "\n", "        ", "targets_A", "=", "targets_A", "[", ":", "-", "1", "]", "\n", "inputs_A", "=", "inputs_A", "[", ":", "-", "1", "]", "\n", "consistent_masks_A", "=", "consistent_masks_A", "[", ":", "-", "1", "]", "\n", "\n", "", "return", "inputs_A", ",", "inputs_B", ",", "targets_A", ",", "targets_B", ",", "consistent_masks_A", ",", "consistent_masks_B", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.ranking_loss.ind2sub": [[49, 53], ["None"], "function", ["None"], ["", "def", "ind2sub", "(", "idx", ",", "cols", ")", ":", "\n", "    ", "r", "=", "idx", "/", "cols", "\n", "c", "=", "idx", "-", "r", "*", "cols", "\n", "return", "r", ",", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.ranking_loss.sub2ind": [[54, 57], ["None"], "function", ["None"], ["", "def", "sub2ind", "(", "r", ",", "c", ",", "cols", ")", ":", "\n", "    ", "idx", "=", "r", "*", "cols", "+", "c", "\n", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.ranking_loss.edgeGuidedSampling": [[58, 107], ["edges_img.max", "edges_img.ge", "edges_img.ge.nonzero", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.randint().cuda", "torch.randint().cuda", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "ranking_loss.ind2sub", "torch.randint().cuda", "torch.randint().cuda", "torch.ones().cuda", "torch.ones().cuda", "ranking_loss.sub2ind", "ranking_loss.sub2ind", "ranking_loss.sub2ind", "ranking_loss.sub2ind", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.masked_select.size", "edges_loc[].squeeze", "torch.randint().cuda.float", "col_anchors.unsqueeze().expand().long", "torch.round().long", "torch.round().long", "row_anchors.unsqueeze().expand().long", "torch.round().long", "torch.round().long", "torch.cat.long", "torch.cat.long", "torch.cat.long", "torch.cat.long", "torch.cat.long", "torch.cat.long", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.ones", "torch.ones", "col_anchors.unsqueeze().expand", "torch.round", "torch.round", "row_anchors.unsqueeze().expand", "torch.round", "torch.round", "col_anchors.unsqueeze", "torch.randint().cuda.double", "torch.abs().unsqueeze", "torch.abs().unsqueeze", "row_anchors.unsqueeze", "torch.randint().cuda.double", "torch.abs().unsqueeze", "torch.abs().unsqueeze", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.cos", "torch.cos", "torch.sin", "torch.sin"], "function", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.ranking_loss.ind2sub", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.ranking_loss.sub2ind", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.ranking_loss.sub2ind", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.ranking_loss.sub2ind", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.ranking_loss.sub2ind"], ["", "def", "edgeGuidedSampling", "(", "inputs", ",", "targets", ",", "edges_img", ",", "thetas_img", ",", "masks", ",", "h", ",", "w", ")", ":", "\n", "\n", "# find edges", "\n", "    ", "edges_max", "=", "edges_img", ".", "max", "(", ")", "\n", "edges_mask", "=", "edges_img", ".", "ge", "(", "edges_max", "*", "0.1", ")", "\n", "edges_loc", "=", "edges_mask", ".", "nonzero", "(", ")", "\n", "\n", "inputs_edge", "=", "torch", ".", "masked_select", "(", "inputs", ",", "edges_mask", ")", "\n", "targets_edge", "=", "torch", ".", "masked_select", "(", "targets", ",", "edges_mask", ")", "\n", "thetas_edge", "=", "torch", ".", "masked_select", "(", "thetas_img", ",", "edges_mask", ")", "\n", "minlen", "=", "inputs_edge", ".", "size", "(", ")", "[", "0", "]", "\n", "\n", "# find anchor points (i.e, edge points)", "\n", "sample_num", "=", "minlen", "\n", "index_anchors", "=", "torch", ".", "randint", "(", "0", ",", "minlen", ",", "(", "sample_num", ",", ")", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "anchors", "=", "torch", ".", "gather", "(", "inputs_edge", ",", "0", ",", "index_anchors", ")", "\n", "theta_anchors", "=", "torch", ".", "gather", "(", "thetas_edge", ",", "0", ",", "index_anchors", ")", "\n", "row_anchors", ",", "col_anchors", "=", "ind2sub", "(", "edges_loc", "[", "index_anchors", "]", ".", "squeeze", "(", "1", ")", ",", "w", ")", "\n", "## compute the coordinates of 4-points,  distances are from [2, 30]", "\n", "distance_matrix", "=", "torch", ".", "randint", "(", "2", ",", "31", ",", "(", "4", ",", "sample_num", ")", ")", ".", "cuda", "(", ")", "\n", "pos_or_neg", "=", "torch", ".", "ones", "(", "4", ",", "sample_num", ")", ".", "cuda", "(", ")", "\n", "pos_or_neg", "[", ":", "2", ",", ":", "]", "=", "-", "pos_or_neg", "[", ":", "2", ",", ":", "]", "\n", "distance_matrix", "=", "distance_matrix", ".", "float", "(", ")", "*", "pos_or_neg", "\n", "col", "=", "col_anchors", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "4", ",", "sample_num", ")", ".", "long", "(", ")", "+", "torch", ".", "round", "(", "distance_matrix", ".", "double", "(", ")", "*", "torch", ".", "abs", "(", "torch", ".", "cos", "(", "theta_anchors", ")", ")", ".", "unsqueeze", "(", "0", ")", ")", ".", "long", "(", ")", "\n", "row", "=", "row_anchors", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "4", ",", "sample_num", ")", ".", "long", "(", ")", "+", "torch", ".", "round", "(", "distance_matrix", ".", "double", "(", ")", "*", "torch", ".", "abs", "(", "torch", ".", "sin", "(", "theta_anchors", ")", ")", ".", "unsqueeze", "(", "0", ")", ")", ".", "long", "(", ")", "\n", "\n", "# constrain 0=<c<=w, 0<=r<=h", "\n", "# Note: index should minus 1", "\n", "col", "[", "col", "<", "0", "]", "=", "0", "\n", "col", "[", "col", ">", "w", "-", "1", "]", "=", "w", "-", "1", "\n", "row", "[", "row", "<", "0", "]", "=", "0", "\n", "row", "[", "row", ">", "h", "-", "1", "]", "=", "h", "-", "1", "\n", "\n", "# a-b, b-c, c-d", "\n", "a", "=", "sub2ind", "(", "row", "[", "0", ",", ":", "]", ",", "col", "[", "0", ",", ":", "]", ",", "w", ")", "\n", "b", "=", "sub2ind", "(", "row", "[", "1", ",", ":", "]", ",", "col", "[", "1", ",", ":", "]", ",", "w", ")", "\n", "c", "=", "sub2ind", "(", "row", "[", "2", ",", ":", "]", ",", "col", "[", "2", ",", ":", "]", ",", "w", ")", "\n", "d", "=", "sub2ind", "(", "row", "[", "3", ",", ":", "]", ",", "col", "[", "3", ",", ":", "]", ",", "w", ")", "\n", "A", "=", "torch", ".", "cat", "(", "(", "a", ",", "b", ",", "c", ")", ",", "0", ")", "\n", "B", "=", "torch", ".", "cat", "(", "(", "b", ",", "c", ",", "d", ")", ",", "0", ")", "\n", "\n", "inputs_A", "=", "torch", ".", "gather", "(", "inputs", ",", "0", ",", "A", ".", "long", "(", ")", ")", "\n", "inputs_B", "=", "torch", ".", "gather", "(", "inputs", ",", "0", ",", "B", ".", "long", "(", ")", ")", "\n", "targets_A", "=", "torch", ".", "gather", "(", "targets", ",", "0", ",", "A", ".", "long", "(", ")", ")", "\n", "targets_B", "=", "torch", ".", "gather", "(", "targets", ",", "0", ",", "B", ".", "long", "(", ")", ")", "\n", "masks_A", "=", "torch", ".", "gather", "(", "masks", ",", "0", ",", "A", ".", "long", "(", ")", ")", "\n", "masks_B", "=", "torch", ".", "gather", "(", "masks", ",", "0", ",", "B", ".", "long", "(", ")", ")", "\n", "\n", "return", "inputs_A", ",", "inputs_B", ",", "targets_A", ",", "targets_B", ",", "masks_A", ",", "masks_B", ",", "sample_num", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.ILNR_loss.MEADSTD_TANH_NORM_Loss.__init__": [[9, 13], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "valid_threshold", "=", "-", "1e-8", ",", "max_threshold", "=", "1e8", ")", ":", "\n", "        ", "super", "(", "MEADSTD_TANH_NORM_Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "valid_threshold", "=", "valid_threshold", "\n", "self", ".", "max_threshold", "=", "max_threshold", "\n", "#self.thres1 = 0.9", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.ILNR_loss.MEADSTD_TANH_NORM_Loss.transform": [[15, 37], ["range", "torch.stack().cuda", "torch.stack().cuda", "torch.stack().cuda", "torch.stack().cuda", "torch.stack().cuda", "torch.stack().cuda", "torch.stack().cuda", "torch.stack().cuda", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.stack().cuda.append", "torch.stack().cuda.append", "torch.stack().cuda.append", "torch.stack().cuda.append", "torch.stack().cuda.append", "torch.stack().cuda.append", "torch.stack().cuda.append", "torch.stack().cuda.append", "depth_valid_mask.mean", "depth_valid_mask.std", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "int", "int", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "gt", ")", ":", "\n", "# Get mean and standard deviation", "\n", "        ", "data_mean", "=", "[", "]", "\n", "data_std_dev", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "gt", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "gt_i", "=", "gt", "[", "i", "]", "\n", "mask", "=", "gt_i", ">", "0", "\n", "depth_valid", "=", "gt_i", "[", "mask", "]", "\n", "depth_valid", "=", "depth_valid", "[", ":", "5", "]", "\n", "if", "depth_valid", ".", "shape", "[", "0", "]", "<", "10", ":", "\n", "                ", "data_mean", ".", "append", "(", "torch", ".", "tensor", "(", "0", ")", ".", "cuda", "(", ")", ")", "\n", "data_std_dev", ".", "append", "(", "torch", ".", "tensor", "(", "1", ")", ".", "cuda", "(", ")", ")", "\n", "continue", "\n", "", "size", "=", "depth_valid", ".", "shape", "[", "0", "]", "\n", "depth_valid_sort", ",", "_", "=", "torch", ".", "sort", "(", "depth_valid", ",", "0", ")", "\n", "depth_valid_mask", "=", "depth_valid_sort", "[", "int", "(", "size", "*", "0.1", ")", ":", "-", "int", "(", "size", "*", "0.1", ")", "]", "\n", "data_mean", ".", "append", "(", "depth_valid_mask", ".", "mean", "(", ")", ")", "\n", "data_std_dev", ".", "append", "(", "depth_valid_mask", ".", "std", "(", ")", ")", "\n", "", "data_mean", "=", "torch", ".", "stack", "(", "data_mean", ",", "dim", "=", "0", ")", ".", "cuda", "(", ")", "\n", "data_std_dev", "=", "torch", ".", "stack", "(", "data_std_dev", ",", "dim", "=", "0", ")", ".", "cuda", "(", ")", "\n", "\n", "return", "data_mean", ",", "data_std_dev", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.ILNR_loss.MEADSTD_TANH_NORM_Loss.forward": [[38, 71], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "ILNR_loss.MEADSTD_TANH_NORM_Loss.transform", "range", "loss_out.float", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.ILNR_loss.MEADSTD_TANH_NORM_Loss.transform"], ["", "def", "forward", "(", "self", ",", "pred", ",", "gt", ")", ":", "\n", "        ", "\"\"\"\n        Calculate loss.\n        \"\"\"", "\n", "mask", "=", "(", "gt", ">", "self", ".", "valid_threshold", ")", "&", "(", "gt", "<", "self", ".", "max_threshold", ")", "# [b, c, h, w]", "\n", "mask_sum", "=", "torch", ".", "sum", "(", "mask", ",", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "# mask invalid batches", "\n", "mask_batch", "=", "mask_sum", ">", "100", "\n", "if", "True", "not", "in", "mask_batch", ":", "\n", "            ", "return", "torch", ".", "tensor", "(", "0.0", ",", "dtype", "=", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "", "mask_maskbatch", "=", "mask", "[", "mask_batch", "]", "\n", "pred_maskbatch", "=", "pred", "[", "mask_batch", "]", "\n", "gt_maskbatch", "=", "gt", "[", "mask_batch", "]", "\n", "\n", "gt_mean", ",", "gt_std", "=", "self", ".", "transform", "(", "gt", ")", "\n", "gt_trans", "=", "(", "gt_maskbatch", "-", "gt_mean", "[", ":", ",", "None", ",", "None", ",", "None", "]", ")", "/", "(", "gt_std", "[", ":", ",", "None", ",", "None", ",", "None", "]", "+", "1e-8", ")", "\n", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "gt_maskbatch", ".", "shape", "\n", "loss", "=", "0", "\n", "loss_tanh", "=", "0", "\n", "for", "i", "in", "range", "(", "B", ")", ":", "\n", "            ", "mask_i", "=", "mask_maskbatch", "[", "i", ",", "...", "]", "\n", "pred_depth_i", "=", "pred_maskbatch", "[", "i", ",", "...", "]", "[", "mask_i", "]", "\n", "gt_trans_i", "=", "gt_trans", "[", "i", ",", "...", "]", "[", "mask_i", "]", "\n", "\n", "depth_diff", "=", "torch", ".", "abs", "(", "gt_trans_i", "-", "pred_depth_i", ")", "\n", "loss", "+=", "torch", ".", "mean", "(", "depth_diff", ")", "\n", "\n", "tanh_norm_gt", "=", "torch", ".", "tanh", "(", "0.01", "*", "gt_trans_i", ")", "\n", "tanh_norm_pred", "=", "torch", ".", "tanh", "(", "0.01", "*", "pred_depth_i", ")", "\n", "loss_tanh", "+=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "tanh_norm_gt", "-", "tanh_norm_pred", ")", ")", "\n", "", "loss_out", "=", "loss", "/", "B", "+", "loss_tanh", "/", "B", "\n", "return", "loss_out", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.multi_depth_model_auxiv2.RelDepthModel.__init__": [[15, 19], ["nn.Module.__init__", "multi_depth_model_auxiv2.DepthModel", "multi_depth_model_auxiv2.ModelLoss"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "RelDepthModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "depth_model", "=", "DepthModel", "(", ")", "\n", "self", ".", "losses", "=", "ModelLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.multi_depth_model_auxiv2.RelDepthModel.forward": [[20, 29], ["data[].cuda", "multi_depth_model_auxiv2.RelDepthModel.depth_model", "multi_depth_model_auxiv2.RelDepthModel.losses.criterion", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.multi_depth_model_auxiv2.ModelLoss.criterion"], ["", "def", "forward", "(", "self", ",", "data", ",", "is_train", "=", "True", ")", ":", "\n", "# Input data is a_real, predicted data is b_fake, groundtruth is b_real", "\n", "        ", "self", ".", "inputs", "=", "data", "[", "'rgb'", "]", ".", "cuda", "(", ")", "\n", "self", ".", "logit", ",", "self", ".", "auxi", "=", "self", ".", "depth_model", "(", "self", ".", "inputs", ")", "\n", "if", "is_train", ":", "\n", "            ", "self", ".", "losses_dict", "=", "self", ".", "losses", ".", "criterion", "(", "self", ".", "logit", ",", "self", ".", "auxi", ",", "data", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "losses_dict", "=", "{", "'total_loss'", ":", "torch", ".", "tensor", "(", "0.0", ",", "dtype", "=", "torch", ".", "float", ")", ".", "cuda", "(", ")", "}", "\n", "", "return", "{", "'decoder'", ":", "self", ".", "logit", ",", "'auxi'", ":", "self", ".", "auxi", ",", "'losses'", ":", "self", ".", "losses_dict", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.multi_depth_model_auxiv2.RelDepthModel.inference": [[30, 40], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "multi_depth_model_auxiv2.RelDepthModel.forward", "pred_depth.max", "pred_depth.min", "pred_disp.max", "pred_disp.min", "pred_depth.min", "pred_disp.min"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.forward"], ["", "def", "inference", "(", "self", ",", "data", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "out", "=", "self", ".", "forward", "(", "data", ",", "is_train", "=", "False", ")", "\n", "pred_depth", "=", "out", "[", "'decoder'", "]", "\n", "pred_disp", "=", "out", "[", "'auxi'", "]", "\n", "pred_depth_normalize", "=", "(", "pred_depth", "-", "pred_depth", ".", "min", "(", ")", "+", "1", ")", "/", "(", "pred_depth", ".", "max", "(", ")", "-", "pred_depth", ".", "min", "(", ")", ")", "#pred_depth - pred_depth.min() #- pred_depth.max()", "\n", "pred_depth_out", "=", "pred_depth", "\n", "pred_disp_normalize", "=", "(", "pred_disp", "-", "pred_disp", ".", "min", "(", ")", "+", "1", ")", "/", "(", "pred_disp", ".", "max", "(", ")", "-", "pred_disp", ".", "min", "(", ")", ")", "\n", "return", "{", "'pred_depth'", ":", "pred_depth_out", ",", "'pred_depth_normalize'", ":", "pred_depth_normalize", ",", "\n", "'pred_disp'", ":", "pred_disp", ",", "'pred_disp_normalize'", ":", "pred_disp_normalize", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.multi_depth_model_auxiv2.ModelLoss.__init__": [[44, 71], ["nn.Module.__init__", "lib.models.PWN_planes.PWNPlanesLoss", "lib.models.PWN_edges.EdgeguidedNormalRegressionLoss", "lib.models.MSGIL_loss.MSGIL_NORM_Loss", "lib.models.ILNR_loss.MEADSTD_TANH_NORM_Loss", "lib.models.ranking_loss.EdgeguidedRankingLoss", "lib.models.MSGIL_loss.MSGIL_NORM_Loss", "lib.models.ILNR_loss.MEADSTD_TANH_NORM_Loss", "lib.models.ranking_loss.EdgeguidedRankingLoss"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ModelLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "################Loss for the main branch, i.e. on the depth map#################", "\n", "# Geometry Loss", "\n", "self", ".", "pn_plane", "=", "PWNPlanesLoss", "(", "focal_x", "=", "cfg", ".", "DATASET", ".", "FOCAL_X", ",", "focal_y", "=", "cfg", ".", "DATASET", ".", "FOCAL_Y", ",", "\n", "input_size", "=", "cfg", ".", "DATASET", ".", "CROP_SIZE", ",", "sample_groups", "=", "5000", ",", "xyz_mode", "=", "'xyz'", ")", "\n", "self", ".", "pn_edge", "=", "EdgeguidedNormalRegressionLoss", "(", "mask_value", "=", "-", "1e-8", ",", "max_threshold", "=", "10.1", ")", "\n", "# self.surface_normal_loss = SurfaceNormalLoss()", "\n", "\n", "# the scale can be adjusted", "\n", "self", ".", "msg_normal_loss", "=", "MSGIL_NORM_Loss", "(", "scale", "=", "4", ",", "valid_threshold", "=", "-", "1e-8", ")", "\n", "\n", "# Scale shift invariant. SSIMAEL_Loss is MIDAS loss. MEADSTD_TANH_NORM_Loss is our normalization loss.", "\n", "self", ".", "meanstd_tanh_loss", "=", "MEADSTD_TANH_NORM_Loss", "(", "valid_threshold", "=", "-", "1e-8", ")", "\n", "\n", "self", ".", "ranking_edge_loss", "=", "EdgeguidedRankingLoss", "(", "mask_value", "=", "-", "1e-8", ")", "\n", "\n", "\n", "################Loss for the auxi branch, i.e. on the disp map#################", "\n", "# the scale can be adjusted", "\n", "self", ".", "msg_normal_auxiloss", "=", "MSGIL_NORM_Loss", "(", "scale", "=", "4", ",", "valid_threshold", "=", "-", "1e-8", ")", "\n", "\n", "# Scale shift invariant. SSIMAEL_Loss is MIDAS loss. MEADSTD_TANH_NORM_Loss is our normalization loss.", "\n", "self", ".", "meanstd_tanh_auxiloss", "=", "MEADSTD_TANH_NORM_Loss", "(", "valid_threshold", "=", "-", "1e-8", ")", "\n", "\n", "self", ".", "ranking_edge_auxiloss", "=", "EdgeguidedRankingLoss", "(", "mask_value", "=", "-", "1e-8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.multi_depth_model_auxiv2.ModelLoss.criterion": [[72, 80], ["multi_depth_model_auxiv2.ModelLoss.decoder_loss", "multi_depth_model_auxiv2.ModelLoss.auxi_loss", "loss.update", "loss.update"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.multi_depth_model_auxiv2.ModelLoss.decoder_loss", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.multi_depth_model_auxiv2.ModelLoss.auxi_loss"], ["", "def", "criterion", "(", "self", ",", "pred_logit", ",", "auxi", ",", "data", ")", ":", "\n", "        ", "loss1", "=", "self", ".", "decoder_loss", "(", "pred_logit", ",", "data", ")", "\n", "loss2", "=", "self", ".", "auxi_loss", "(", "auxi", ",", "data", ")", "\n", "loss", "=", "{", "}", "\n", "loss", ".", "update", "(", "loss1", ")", "\n", "loss", ".", "update", "(", "loss2", ")", "\n", "loss", "[", "'total_loss'", "]", "=", "loss1", "[", "'total_loss'", "]", "+", "loss2", "[", "'total_loss'", "]", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.multi_depth_model_auxiv2.ModelLoss.auxi_loss": [[81, 100], ["data[].to", "sum", "lib.configs.config.cfg.TRAIN.LOSS_MODE.lower", "multi_depth_model_auxiv2.ModelLoss.ranking_edge_auxiloss", "lib.configs.config.cfg.TRAIN.LOSS_MODE.lower", "lib.configs.config.cfg.TRAIN.LOSS_MODE.lower", "multi_depth_model_auxiv2.ModelLoss.meanstd_tanh_auxiloss", "loss.values", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "multi_depth_model_auxiv2.ModelLoss.msg_normal_auxiloss"], "methods", ["None"], ["", "def", "auxi_loss", "(", "self", ",", "auxi", ",", "data", ")", ":", "\n", "        ", "loss", "=", "{", "}", "\n", "if", "'disp'", "not", "in", "data", ":", "\n", "            ", "return", "{", "'total_loss'", ":", "torch", ".", "tensor", "(", "0.0", ")", ".", "cuda", "(", ")", "}", "\n", "\n", "", "gt", "=", "data", "[", "'disp'", "]", ".", "to", "(", "device", "=", "auxi", ".", "device", ")", "\n", "\n", "if", "'_ranking-edge-auxi_'", "in", "cfg", ".", "TRAIN", ".", "LOSS_MODE", ".", "lower", "(", ")", ":", "\n", "            ", "loss", "[", "'ranking-edge_auxiloss'", "]", "=", "self", ".", "ranking_edge_auxiloss", "(", "auxi", ",", "gt", ",", "data", "[", "'rgb'", "]", ")", "\n", "\n", "", "if", "'_msgil-normal-auxi_'", "in", "cfg", ".", "TRAIN", ".", "LOSS_MODE", ".", "lower", "(", ")", ":", "\n", "            ", "loss", "[", "'msg_normal_auxiloss'", "]", "=", "(", "self", ".", "msg_normal_auxiloss", "(", "auxi", ",", "gt", ")", "*", "0.5", ")", ".", "float", "(", ")", "\n", "\n", "", "if", "'_meanstd-tanh-auxi_'", "in", "cfg", ".", "TRAIN", ".", "LOSS_MODE", ".", "lower", "(", ")", ":", "\n", "            ", "loss", "[", "'meanstd-tanh_auxiloss'", "]", "=", "self", ".", "meanstd_tanh_auxiloss", "(", "auxi", ",", "gt", ")", "\n", "\n", "", "total_loss", "=", "sum", "(", "loss", ".", "values", "(", ")", ")", "\n", "loss", "[", "'total_loss'", "]", "=", "total_loss", "*", "cfg", ".", "TRAIN", ".", "LOSS_AUXI_WEIGHT", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.multi_depth_model_auxiv2.ModelLoss.decoder_loss": [[101, 165], ["data[].to", "sum", "multi_depth_model_auxiv2.recover_scale_shift_depth", "lib.configs.config.cfg.TRAIN.LOSS_MODE.lower", "multi_depth_model_auxiv2.ModelLoss.pn_plane", "lib.configs.config.cfg.TRAIN.LOSS_MODE.lower", "mask_high_quality.sum", "lib.configs.config.cfg.TRAIN.LOSS_MODE.lower", "multi_depth_model_auxiv2.ModelLoss.meanstd_tanh_loss", "lib.configs.config.cfg.TRAIN.LOSS_MODE.lower", "multi_depth_model_auxiv2.ModelLoss.ranking_edge_loss", "lib.configs.config.cfg.TRAIN.LOSS_MODE.lower", "loss.values", "lib.configs.config.cfg.TRAIN.LOSS_MODE.lower", "lib.configs.config.cfg.TRAIN.LOSS_MODE.lower", "multi_depth_model_auxiv2.ModelLoss.pn_edge", "recover_scale_shift_depth.sum", "multi_depth_model_auxiv2.ModelLoss.msg_normal_loss"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.multi_depth_model_auxiv2.recover_scale_shift_depth"], ["", "def", "decoder_loss", "(", "self", ",", "pred_logit", ",", "data", ")", ":", "\n", "        ", "pred_depth", "=", "pred_logit", "\n", "\n", "gt_depth", "=", "data", "[", "'depth'", "]", ".", "to", "(", "device", "=", "pred_depth", ".", "device", ")", "\n", "\n", "# High-quality data, except webstereo data", "\n", "mask_high_quality", "=", "data", "[", "'quality_flg'", "]", "==", "3", "\n", "mask_mid_quality", "=", "data", "[", "'quality_flg'", "]", ">=", "2", "\n", "# gt_depth_high = gt_depth[mask_high_quality]", "\n", "# pred_depth_high = pred_depth[mask_high_quality]", "\n", "\n", "gt_depth_mid", "=", "gt_depth", "[", "mask_mid_quality", "]", "\n", "pred_depth_mid", "=", "pred_depth", "[", "mask_mid_quality", "]", "\n", "\n", "\n", "#gt_depth_filter = data['mask_highquality']]", "\n", "#pred_depth_filter = pred_depth[data['mask_highquality']]", "\n", "#focal_length_filter = data['focal_length'][data['mask_highquality']]", "\n", "\n", "# if gt_depth_high.ndim == 3:", "\n", "#     gt_depth_high = gt_depth_high[None, :, :, :]", "\n", "#     pred_depth_high = pred_depth_high[None, :, :, :]", "\n", "if", "gt_depth_mid", ".", "ndim", "==", "3", ":", "\n", "            ", "gt_depth_mid", "=", "gt_depth_mid", "[", "None", ",", ":", ",", ":", ",", ":", "]", "\n", "pred_depth_mid", "=", "pred_depth_mid", "[", "None", ",", ":", ",", ":", ",", ":", "]", "\n", "", "loss", "=", "{", "}", "\n", "\n", "if", "'_pairwise-normal-regress-edge_'", "in", "cfg", ".", "TRAIN", ".", "LOSS_MODE", ".", "lower", "(", ")", "or", "'_pairwise-normal-regress-plane_'", "in", "cfg", ".", "TRAIN", ".", "LOSS_MODE", ".", "lower", "(", ")", ":", "\n", "            ", "pred_ssinv", "=", "recover_scale_shift_depth", "(", "pred_depth", ",", "gt_depth", ",", "min_threshold", "=", "-", "1e-8", ",", "max_threshold", "=", "10.1", ")", "\n", "", "else", ":", "\n", "            ", "pred_ssinv", "=", "None", "\n", "\n", "# Geometry Loss", "\n", "", "if", "'_pairwise-normal-regress-plane_'", "in", "cfg", ".", "TRAIN", ".", "LOSS_MODE", ".", "lower", "(", ")", ":", "\n", "            ", "focal_length", "=", "data", "[", "'focal_length'", "]", "if", "'focal_length'", "in", "data", "else", "None", "\n", "loss", "[", "'pairwise-normal-regress-plane_loss'", "]", "=", "self", ".", "pn_plane", "(", "gt_depth", ",", "\n", "pred_ssinv", ",", "\n", "data", "[", "'planes'", "]", ",", "\n", "focal_length", ")", "\n", "", "if", "'_pairwise-normal-regress-edge_'", "in", "cfg", ".", "TRAIN", ".", "LOSS_MODE", ".", "lower", "(", ")", ":", "\n", "            ", "if", "mask_high_quality", ".", "sum", "(", ")", ":", "\n", "                ", "loss", "[", "'pairwise-normal-regress-edge_loss'", "]", "=", "self", ".", "pn_edge", "(", "pred_ssinv", "[", "mask_high_quality", "]", ",", "\n", "gt_depth", "[", "mask_high_quality", "]", ",", "\n", "data", "[", "'rgb'", "]", "[", "mask_high_quality", "]", ",", "\n", "focal_length", "=", "data", "[", "'focal_length'", "]", "[", "mask_high_quality", "]", ")", "\n", "", "else", ":", "\n", "                ", "loss", "[", "'pairwise-normal-regress-edge_loss'", "]", "=", "pred_ssinv", ".", "sum", "(", ")", "*", "0.", "\n", "\n", "# Scale-shift Invariant Loss", "\n", "", "", "if", "'_meanstd-tanh_'", "in", "cfg", ".", "TRAIN", ".", "LOSS_MODE", ".", "lower", "(", ")", ":", "\n", "            ", "loss_ssi", "=", "self", ".", "meanstd_tanh_loss", "(", "pred_depth_mid", ",", "gt_depth_mid", ")", "\n", "loss", "[", "'meanstd-tanh_loss'", "]", "=", "loss_ssi", "\n", "\n", "", "if", "'_ranking-edge_'", "in", "cfg", ".", "TRAIN", ".", "LOSS_MODE", ".", "lower", "(", ")", ":", "\n", "            ", "loss", "[", "'ranking-edge_loss'", "]", "=", "self", ".", "ranking_edge_loss", "(", "pred_depth", ",", "gt_depth", ",", "data", "[", "'rgb'", "]", ")", "\n", "\n", "# Multi-scale Gradient Loss", "\n", "", "if", "'_msgil-normal_'", "in", "cfg", ".", "TRAIN", ".", "LOSS_MODE", ".", "lower", "(", ")", ":", "\n", "            ", "loss", "[", "'msg_normal_loss'", "]", "=", "(", "self", ".", "msg_normal_loss", "(", "pred_depth", ",", "gt_depth", ")", "*", "0.1", ")", ".", "float", "(", ")", "\n", "\n", "", "total_loss", "=", "sum", "(", "loss", ".", "values", "(", ")", ")", "\n", "loss", "[", "'total_loss'", "]", "=", "total_loss", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.multi_depth_model_auxiv2.ModelOptimizer.__init__": [[168, 201], ["object.__init__", "model.named_parameters", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "nograd_param_names.append", "encoder_params.append", "encoder_params_names.append", "decoder_params.append", "decoder_params_names.append"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "        ", "super", "(", "ModelOptimizer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "encoder_params", "=", "[", "]", "\n", "encoder_params_names", "=", "[", "]", "\n", "decoder_params", "=", "[", "]", "\n", "decoder_params_names", "=", "[", "]", "\n", "nograd_param_names", "=", "[", "]", "\n", "\n", "for", "key", ",", "value", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "value", ".", "requires_grad", ":", "\n", "                ", "if", "'res'", "in", "key", ":", "\n", "                    ", "encoder_params", ".", "append", "(", "value", ")", "\n", "encoder_params_names", ".", "append", "(", "key", ")", "\n", "", "else", ":", "\n", "                    ", "decoder_params", ".", "append", "(", "value", ")", "\n", "decoder_params_names", ".", "append", "(", "key", ")", "\n", "", "", "else", ":", "\n", "                ", "nograd_param_names", ".", "append", "(", "key", ")", "\n", "\n", "", "", "lr_encoder", "=", "cfg", ".", "TRAIN", ".", "BASE_LR", "\n", "lr_decoder", "=", "cfg", ".", "TRAIN", ".", "BASE_LR", "*", "cfg", ".", "TRAIN", ".", "SCALE_DECODER_LR", "\n", "weight_decay", "=", "0.0005", "\n", "\n", "net_params", "=", "[", "\n", "{", "'params'", ":", "encoder_params", ",", "\n", "'lr'", ":", "lr_encoder", ",", "\n", "'weight_decay'", ":", "weight_decay", "}", ",", "\n", "{", "'params'", ":", "decoder_params", ",", "\n", "'lr'", ":", "lr_decoder", ",", "\n", "'weight_decay'", ":", "weight_decay", "}", ",", "\n", "]", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "net_params", ",", "momentum", "=", "0.9", ")", "\n", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.multi_depth_model_auxiv2.ModelOptimizer.optim": [[202, 208], ["multi_depth_model_auxiv2.ModelOptimizer.optimizer.zero_grad", "loss_all.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "multi_depth_model_auxiv2.ModelOptimizer.optimizer.step", "multi_depth_model_auxiv2.ModelOptimizer.model.parameters"], "methods", ["None"], ["", "def", "optim", "(", "self", ",", "loss", ")", ":", "\n", "        ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss_all", "=", "loss", "[", "'total_loss'", "]", "\n", "loss_all", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "10", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.multi_depth_model_auxiv2.DepthModel.__init__": [[211, 217], ["nn.Module.__init__", "network_auxi.Decoder", "network_auxi.AuxiNetV2", "get_func", "network_auxi.__name__.split"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.net_tools.get_func"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "DepthModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "backbone", "=", "network", ".", "__name__", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "+", "'.'", "+", "cfg", ".", "MODEL", ".", "ENCODER", "\n", "self", ".", "encoder_modules", "=", "get_func", "(", "backbone", ")", "(", ")", "\n", "self", ".", "decoder_modules", "=", "network", ".", "Decoder", "(", ")", "\n", "self", ".", "auxi_modules", "=", "network", ".", "AuxiNetV2", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.multi_depth_model_auxiv2.DepthModel.forward": [[218, 223], ["multi_depth_model_auxiv2.DepthModel.encoder_modules", "multi_depth_model_auxiv2.DepthModel.decoder_modules", "multi_depth_model_auxiv2.DepthModel.auxi_modules"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "lateral_out", "=", "self", ".", "encoder_modules", "(", "x", ")", "\n", "out_logit", ",", "auxi_input", "=", "self", ".", "decoder_modules", "(", "lateral_out", ")", "\n", "out_auxi", "=", "self", ".", "auxi_modules", "(", "auxi_input", ")", "\n", "return", "out_logit", ",", "out_auxi", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.multi_depth_model_auxiv2.recover_scale_shift_depth": [[225, 249], ["torch.ones", "torch.ones", "range", "torch.stack", "torch.stack", "torch.ones_like", "torch.ones_like", "torch.cat", "torch.cat", "torch.matmul", "torch.matmul", "pred_scale_shift.permute().reshape.permute().reshape", "torch.eye", "torch.eye", "torch.stack", "torch.stack", "torch.matmul", "torch.matmul", "torch.inverse", "torch.inverse", "torch.matmul", "torch.matmul", "torch.stack.append", "torch.cat.permute().reshape", "torch.stack.permute", "torch.matmul", "torch.matmul", "pred_scale_shift.permute().reshape.permute", "torch.cat.permute"], "function", ["None"], ["", "", "def", "recover_scale_shift_depth", "(", "pred", ",", "gt", ",", "min_threshold", "=", "1e-8", ",", "max_threshold", "=", "1e8", ")", ":", "\n", "    ", "b", ",", "c", ",", "h", ",", "w", "=", "pred", ".", "shape", "\n", "mask", "=", "(", "gt", ">", "min_threshold", ")", "&", "(", "gt", "<", "max_threshold", ")", "# [b, c, h, w]", "\n", "EPS", "=", "1e-6", "*", "torch", ".", "eye", "(", "2", ",", "dtype", "=", "pred", ".", "dtype", ",", "device", "=", "pred", ".", "device", ")", "\n", "scale_shift_batch", "=", "[", "]", "\n", "ones_img", "=", "torch", ".", "ones", "(", "(", "1", ",", "h", ",", "w", ")", ",", "dtype", "=", "pred", ".", "dtype", ",", "device", "=", "pred", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "b", ")", ":", "\n", "        ", "mask_i", "=", "mask", "[", "i", ",", "...", "]", "\n", "pred_valid_i", "=", "pred", "[", "i", ",", "...", "]", "[", "mask_i", "]", "\n", "ones_i", "=", "ones_img", "[", "mask_i", "]", "\n", "pred_valid_ones_i", "=", "torch", ".", "stack", "(", "(", "pred_valid_i", ",", "ones_i", ")", ",", "dim", "=", "0", ")", "# [c+1, n]", "\n", "A_i", "=", "torch", ".", "matmul", "(", "pred_valid_ones_i", ",", "pred_valid_ones_i", ".", "permute", "(", "1", ",", "0", ")", ")", "# [2, 2]", "\n", "A_inverse", "=", "torch", ".", "inverse", "(", "A_i", "+", "EPS", ")", "\n", "\n", "gt_i", "=", "gt", "[", "i", ",", "...", "]", "[", "mask_i", "]", "\n", "B_i", "=", "torch", ".", "matmul", "(", "pred_valid_ones_i", ",", "gt_i", ")", "[", ":", ",", "None", "]", "# [2, 1]", "\n", "scale_shift_i", "=", "torch", ".", "matmul", "(", "A_inverse", ",", "B_i", ")", "# [2, 1]", "\n", "scale_shift_batch", ".", "append", "(", "scale_shift_i", ")", "\n", "", "scale_shift_batch", "=", "torch", ".", "stack", "(", "scale_shift_batch", ",", "dim", "=", "0", ")", "# [b, 2, 1]", "\n", "ones", "=", "torch", ".", "ones_like", "(", "pred", ")", "\n", "pred_ones", "=", "torch", ".", "cat", "(", "(", "pred", ",", "ones", ")", ",", "dim", "=", "1", ")", "# [b, 2, h, w]", "\n", "pred_scale_shift", "=", "torch", ".", "matmul", "(", "pred_ones", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "b", ",", "h", "*", "w", ",", "2", ")", ",", "scale_shift_batch", ")", "# [b, h*w, 1]", "\n", "pred_scale_shift", "=", "pred_scale_shift", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "reshape", "(", "(", "b", ",", "c", ",", "h", ",", "w", ")", ")", "\n", "return", "pred_scale_shift", "\n", "", ""]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.Resnet.BasicBlock.__init__": [[30, 39], ["torch.Module.__init__", "Resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "Resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.conv3x3", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "NN", ".", "BatchNorm2d", "(", "planes", ")", "#NN.BatchNorm2d", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "NN", ".", "BatchNorm2d", "(", "planes", ")", "#NN.BatchNorm2d", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.Resnet.BasicBlock.forward": [[40, 57], ["Resnet.BasicBlock.conv1", "Resnet.BasicBlock.bn1", "Resnet.BasicBlock.relu", "Resnet.BasicBlock.conv2", "Resnet.BasicBlock.bn2", "Resnet.BasicBlock.relu", "Resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.Resnet.Bottleneck.__init__": [[62, 74], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "NN", ".", "BatchNorm2d", "(", "planes", ")", "#NN.BatchNorm2d", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "NN", ".", "BatchNorm2d", "(", "planes", ")", "#NN.BatchNorm2d", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "NN", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "#NN.BatchNorm2d", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.Resnet.Bottleneck.forward": [[75, 96], ["Resnet.Bottleneck.conv1", "Resnet.Bottleneck.bn1", "Resnet.Bottleneck.relu", "Resnet.Bottleneck.conv2", "Resnet.Bottleneck.bn2", "Resnet.Bottleneck.relu", "Resnet.Bottleneck.conv3", "Resnet.Bottleneck.bn3", "Resnet.Bottleneck.relu", "Resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.Resnet.ResNet.__init__": [[100, 121], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "Resnet.ResNet._make_layer", "Resnet.ResNet._make_layer", "Resnet.ResNet._make_layer", "Resnet.ResNet._make_layer", "Resnet.ResNet.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "NN", ".", "BatchNorm2d", "(", "64", ")", "#NN.BatchNorm2d", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "#self.avgpool = nn.AvgPool2d(7, stride=1)", "\n", "#self.fc = nn.Linear(512 * block.expansion, num_classes)", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.Resnet.ResNet._make_layer": [[122, 138], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "NN", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "#NN.BatchNorm2d", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.Resnet.ResNet.forward": [[139, 157], ["Resnet.ResNet.conv1", "Resnet.ResNet.bn1", "Resnet.ResNet.relu", "Resnet.ResNet.maxpool", "Resnet.ResNet.layer1", "features.append", "Resnet.ResNet.layer2", "features.append", "Resnet.ResNet.layer3", "features.append", "Resnet.ResNet.layer4", "features.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "features", "=", "[", "]", "\n", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "features", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "features", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "features", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "features", ".", "append", "(", "x", ")", "\n", "\n", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.Resnet.conv3x3": [[21, 25], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.Resnet.resnet18": [[159, 175], ["Resnet.ResNet", "torch.load_url", "ResNet.state_dict", "model.state_dict.update", "ResNet.load_state_dict", "model_zoo.load_url.items"], "function", ["None"], ["", "", "def", "resnet18", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "pretrained_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ",", "cfg", ".", "ROOT_DIR", "+", "'/'", "+", "cfg", ".", "MODEL", ".", "MODEL_REPOSITORY", ")", "\n", "#pretrained_model = torchvision.models.resnet18(pretrained=True)", "\n", "#pretrained_dict = pretrained_model.state_dict()", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.Resnet.resnet34": [[177, 193], ["Resnet.ResNet", "torch.load_url", "ResNet.state_dict", "model.state_dict.update", "ResNet.load_state_dict", "model_zoo.load_url.items"], "function", ["None"], ["", "def", "resnet34", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "pretrained_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ",", "cfg", ".", "ROOT_DIR", "+", "'/'", "+", "cfg", ".", "MODEL", ".", "MODEL_REPOSITORY", ")", "\n", "#pretrained_model = torchvision.models.resnet34(pretrained=True)", "\n", "#pretrained_dict = pretrained_model.state_dict()", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.Resnet.resnet50": [[195, 212], ["Resnet.ResNet", "torch.load_url", "ResNet.state_dict", "model.state_dict.update", "ResNet.load_state_dict", "model_zoo.load_url.items"], "function", ["None"], ["", "def", "resnet50", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "pretrained_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ",", "cfg", ".", "ROOT_DIR", "+", "'/'", "+", "cfg", ".", "MODEL", ".", "MODEL_REPOSITORY", ")", "\n", "#pretrained_model = torchvision.models.resnet50(pretrained=True)", "\n", "#pretrained_model = gcv.models.resnet50(pretrained=True)", "\n", "#pretrained_dict = pretrained_model.state_dict()", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.Resnet.resnet101": [[214, 231], ["Resnet.ResNet", "torch.load_url", "ResNet.state_dict", "model.state_dict.update", "ResNet.load_state_dict", "model_zoo.load_url.items"], "function", ["None"], ["", "def", "resnet101", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "pretrained_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ",", "cfg", ".", "ROOT_DIR", "+", "'/'", "+", "cfg", ".", "MODEL", ".", "MODEL_REPOSITORY", ")", "\n", "#pretrained_model = torchvision.models.resnet101(pretrained=True)", "\n", "#pretrained_model = gcv.models.resnet101(pretrained=True)", "\n", "#pretrained_dict = pretrained_model.state_dict()", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.Resnet.resnet152": [[233, 250], ["Resnet.ResNet", "torch.load_url", "ResNet.state_dict", "model.state_dict.update", "ResNet.load_state_dict", "model_zoo.load_url.items"], "function", ["None"], ["", "def", "resnet152", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "pretrained_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ",", "cfg", ".", "ROOT_DIR", "+", "'/'", "+", "cfg", ".", "MODEL", ".", "MODEL_REPOSITORY", ")", "\n", "#pretrained_model = torchvision.models.resnet152(pretrained=True)", "\n", "#pretrained_model = gcv.models.resnet152(pretrained=True)", "\n", "#pretrained_dict = pretrained_model.state_dict()", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.configs.config.print_configs": [[103, 121], ["logging.getLogger", "cfg.items", "logging.getLogger.info", "isinstance", "kv.items", "str", "str"], "function", ["None"], ["def", "print_configs", "(", "cfg", ")", ":", "\n", "    ", "import", "logging", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "message", "=", "''", "\n", "message", "+=", "'----------------- Configs ---------------\\n'", "\n", "for", "k", ",", "kv", "in", "cfg", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "kv", ",", "AttrDict", ")", ":", "\n", "            ", "name1", "=", "'.'", ".", "join", "(", "[", "'cfg'", ",", "k", "]", ")", "\n", "message", "+=", "'{:>50}: \\n'", ".", "format", "(", "name1", ")", "\n", "for", "k_", ",", "v_", "in", "kv", ".", "items", "(", ")", ":", "\n", "                ", "name2", "=", "'.'", ".", "join", "(", "[", "name1", ",", "k_", "]", ")", "\n", "message", "+=", "'{:>50}: {:<30}\\n'", ".", "format", "(", "str", "(", "name2", ")", ",", "str", "(", "v_", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "message", "+=", "'{:>50}: {:<30}\\n'", ".", "format", "(", "k", ",", "kv", ")", "\n", "\n", "", "", "message", "+=", "'----------------- End -------------------'", "\n", "logger", ".", "info", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.configs.config.merge_cfg_from_file": [[123, 155], ["vars().items", "os.path.join", "vars", "k.upper", "__C.TRAIN.keys", "getattr", "k.upper"], "function", ["None"], ["", "def", "merge_cfg_from_file", "(", "train_args", ")", ":", "\n", "    ", "\"\"\"Load a yaml config file and merge it into the global config.\"\"\"", "\n", "# cfg_filename = train_args.cfg_file", "\n", "# cfg_file = os.path.join(__C.ROOT_DIR, cfg_filename + '.yaml')", "\n", "# with open(cfg_file, 'r') as f:", "\n", "#     yaml_cfg = AttrDict(yaml.safe_load(f))", "\n", "# _merge_a_into_b(yaml_cfg, __C)", "\n", "# __C.DATASET.DEPTH_MIN_LOG = np.log10(__C.DATASET.DEPTH_MIN)", "\n", "# # Modify some configs", "\n", "# __C.DATASET.DEPTH_BIN_INTERVAL = (np.log10(__C.DATASET.DEPTH_MAX) - np.log10(", "\n", "#     __C.DATASET.DEPTH_MIN)) / __C.MODEL.DECODER_OUTPUT_C", "\n", "\n", "# # The boundary of each bin", "\n", "# __C.DATASET.DEPTH_BIN_BORDER = np.array([__C.DATASET.DEPTH_MIN_LOG + __C.DATASET.DEPTH_BIN_INTERVAL * (i + 0.5)", "\n", "#                                          for i in range(__C.MODEL.DECODER_OUTPUT_C)])", "\n", "# __C.DATASET.WCE_LOSS_WEIGHT = [[np.exp(-0.2 * (i - j) ** 2) for i in range(__C.MODEL.DECODER_OUTPUT_C)]", "\n", "#                                for j in np.arange(__C.MODEL.DECODER_OUTPUT_C)]", "\n", "\n", "if", "train_args", ".", "backbone", "==", "'resnet50'", ":", "\n", "        ", "__C", ".", "MODEL", ".", "ENCODER", "=", "'resnet50_stride32'", "\n", "__C", ".", "MODEL", ".", "PRETRAINED_WEIGHTS", "=", "'resnext50_32x4d.pth'", "\n", "", "elif", "train_args", ".", "backbone", "==", "'resnext101'", ":", "\n", "        ", "__C", ".", "MODEL", ".", "ENCODER", "=", "'resnext101_stride32x8d'", "\n", "__C", ".", "MODEL", ".", "PRETRAINED_WEIGHTS", "=", "'resnext101_stride32x8d.pth'", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "\n", "\n", "", "for", "k", ",", "v", "in", "vars", "(", "train_args", ")", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", ".", "upper", "(", ")", "in", "__C", ".", "TRAIN", ".", "keys", "(", ")", ":", "\n", "            ", "__C", ".", "TRAIN", "[", "k", ".", "upper", "(", ")", "]", "=", "getattr", "(", "train_args", ",", "k", ")", "\n", "\n", "", "", "__C", ".", "TRAIN", ".", "LOG_DIR", "=", "os", ".", "path", ".", "join", "(", "__C", ".", "TRAIN", ".", "OUTPUT_DIR", ",", "cfg", ".", "TRAIN", ".", "RUN_NAME", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.configs.config._merge_a_into_b": [[157, 188], ["isinstance", "isinstance", "a.items", "copy.deepcopy", "config._decode_cfg_value", "config._check_and_coerce_cfg_value_type", "isinstance", "KeyError", "config._merge_a_into_b"], "function", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.configs.config._decode_cfg_value", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.configs.config._check_and_coerce_cfg_value_type", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.configs.config._merge_a_into_b"], ["", "def", "_merge_a_into_b", "(", "a", ",", "b", ",", "stack", "=", "None", ")", ":", "\n", "    ", "\"\"\"Merge config dictionary a into config dictionary b, clobbering the\n    options in b whenever they are also specified in a.\n    \"\"\"", "\n", "assert", "isinstance", "(", "a", ",", "AttrDict", ")", ",", "'Argument `a` must be an AttrDict'", "\n", "assert", "isinstance", "(", "b", ",", "AttrDict", ")", ",", "'Argument `b` must be an AttrDict'", "\n", "\n", "for", "k", ",", "v_", "in", "a", ".", "items", "(", ")", ":", "\n", "        ", "full_key", "=", "'.'", ".", "join", "(", "stack", ")", "+", "'.'", "+", "k", "if", "stack", "is", "not", "None", "else", "k", "\n", "# a must specify keys that are in b", "\n", "if", "k", "not", "in", "b", ":", "\n", "# if _key_is_deprecated(full_key):", "\n", "#     continue", "\n", "# elif _key_is_renamed(full_key):", "\n", "#     _raise_key_rename_error(full_key)", "\n", "# else:", "\n", "            ", "raise", "KeyError", "(", "'Non-existent config key: {}'", ".", "format", "(", "full_key", ")", ")", "\n", "\n", "", "v", "=", "copy", ".", "deepcopy", "(", "v_", ")", "\n", "v", "=", "_decode_cfg_value", "(", "v", ")", "\n", "v", "=", "_check_and_coerce_cfg_value_type", "(", "v", ",", "b", "[", "k", "]", ",", "k", ",", "full_key", ")", "\n", "\n", "# Recursively merge dicts", "\n", "if", "isinstance", "(", "v", ",", "AttrDict", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "stack_push", "=", "[", "k", "]", "if", "stack", "is", "None", "else", "stack", "+", "[", "k", "]", "\n", "_merge_a_into_b", "(", "v", ",", "b", "[", "k", "]", ",", "stack", "=", "stack_push", ")", "\n", "", "except", "BaseException", ":", "\n", "                ", "raise", "\n", "", "", "else", ":", "\n", "            ", "b", "[", "k", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.configs.config._decode_cfg_value": [[190, 221], ["isinstance", "lib.utils.collections.AttrDict", "isinstance", "ast.literal_eval"], "function", ["None"], ["", "", "", "def", "_decode_cfg_value", "(", "v", ")", ":", "\n", "    ", "\"\"\"Decodes a raw config value (e.g., from a yaml config files or command\n    line argument) into a Python object.\n    \"\"\"", "\n", "# Configs parsed from raw yaml will contain dictionary keys that need to be", "\n", "# converted to AttrDict objects", "\n", "if", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "        ", "return", "AttrDict", "(", "v", ")", "\n", "# All remaining processing is only applied to strings", "\n", "", "if", "not", "isinstance", "(", "v", ",", "six", ".", "string_types", ")", ":", "\n", "        ", "return", "v", "\n", "# Try to interpret `v` as a:", "\n", "#   string, number, tuple, list, dict, boolean, or None", "\n", "", "try", ":", "\n", "        ", "v", "=", "literal_eval", "(", "v", ")", "\n", "# The following two excepts allow v to pass through when it represents a", "\n", "# string.", "\n", "#", "\n", "# Longer explanation:", "\n", "# The type of v is always a string (before calling literal_eval), but", "\n", "# sometimes it *represents* a string and other times a data structure, like", "\n", "# a list. In the case that v represents a string, what we got back from the", "\n", "# yaml parser is 'foo' *without quotes* (so, not '\"foo\"'). literal_eval is", "\n", "# ok with '\"foo\"', but will raise a ValueError if given 'foo'. In other", "\n", "# cases, like paths (v = 'foo/bar' and not v = '\"foo/bar\"'), literal_eval", "\n", "# will raise a SyntaxError.", "\n", "", "except", "ValueError", ":", "\n", "        ", "pass", "\n", "", "except", "SyntaxError", ":", "\n", "        ", "pass", "\n", "", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.configs.config._check_and_coerce_cfg_value_type": [[223, 249], ["type", "type", "isinstance", "numpy.array", "isinstance", "str", "isinstance", "isinstance", "list", "isinstance", "isinstance", "tuple", "ValueError"], "function", ["None"], ["", "def", "_check_and_coerce_cfg_value_type", "(", "value_a", ",", "value_b", ",", "key", ",", "full_key", ")", ":", "\n", "    ", "\"\"\"Checks that `value_a`, which is intended to replace `value_b` is of the\n    right type. The type is correct if it matches exactly or is one of a few\n    cases in which the type can be easily coerced.\n    \"\"\"", "\n", "# The types must match (with some exceptions)", "\n", "type_b", "=", "type", "(", "value_b", ")", "\n", "type_a", "=", "type", "(", "value_a", ")", "\n", "if", "type_a", "is", "type_b", ":", "\n", "        ", "return", "value_a", "\n", "\n", "# Exceptions: numpy arrays, strings, tuple<->list", "\n", "", "if", "isinstance", "(", "value_b", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "value_a", "=", "np", ".", "array", "(", "value_a", ",", "dtype", "=", "value_b", ".", "dtype", ")", "\n", "", "elif", "isinstance", "(", "value_b", ",", "six", ".", "string_types", ")", ":", "\n", "        ", "value_a", "=", "str", "(", "value_a", ")", "\n", "", "elif", "isinstance", "(", "value_a", ",", "tuple", ")", "and", "isinstance", "(", "value_b", ",", "list", ")", ":", "\n", "        ", "value_a", "=", "list", "(", "value_a", ")", "\n", "", "elif", "isinstance", "(", "value_a", ",", "list", ")", "and", "isinstance", "(", "value_b", ",", "tuple", ")", ":", "\n", "        ", "value_a", "=", "tuple", "(", "value_a", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "'Type mismatch ({} vs. {}) with values ({} vs. {}) for config '", "\n", "'key: {}'", ".", "format", "(", "type_b", ",", "type_a", ",", "value_b", ",", "value_a", ",", "full_key", ")", "\n", ")", "\n", "", "return", "value_a", "\n", "", ""]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.tools.test_multiauxiv2_nyu.scale_torch": [[20, 33], ["numpy.transpose", "torch.from_numpy.astype", "torch.from_numpy", "torch.from_numpy.copy", "torchvision.transforms.transforms.Normalize"], "function", ["None"], ["def", "scale_torch", "(", "img", ",", "scale", ")", ":", "\n", "    ", "\"\"\"\n    Scale the image and output it in torch.tensor.\n    :param img: input image. [C, H, W]\n    :param scale: the scale factor. float\n    :return: img. [C, H, W]\n    \"\"\"", "\n", "img", "=", "np", ".", "transpose", "(", "img", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img", "/=", "scale", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ".", "copy", "(", ")", ")", "\n", "img", "=", "transforms", ".", "Normalize", "(", "cfg", ".", "DATASET", ".", "RGB_PIXEL_MEANS", ",", "cfg", ".", "DATASET", ".", "RGB_PIXEL_VARS", ")", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.tools.parse_arg_test.TestOptions.initialize": [[4, 9], ["tools.parse_arg_base.BaseOptions.initialize", "tools.parse_arg_base.BaseOptions.initialize.add_argument", "tools.parse_arg_base.BaseOptions.initialize.add_argument"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.tools.parse_arg_val.ValOptions.initialize"], ["    ", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "        ", "parser", "=", "BaseOptions", ".", "initialize", "(", "self", ",", "parser", ")", "\n", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'test'", ",", "help", "=", "'test flag'", ")", "\n", "parser", ".", "add_argument", "(", "'--phase_anno'", ",", "type", "=", "str", ",", "default", "=", "'test'", ",", "help", "=", "'eigen/eigen_test, Annotations file name'", ")", "\n", "return", "parser", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.tools.train.main_process": [[23, 25], ["None"], "function", ["None"], ["def", "main_process", "(", "dist", ",", "rank", ")", "->", "bool", ":", "\n", "    ", "return", "not", "dist", "or", "(", "dist", "and", "rank", "==", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.tools.train.increase_sample_ratio_steps": [[26, 29], ["min", "int"], "function", ["None"], ["", "def", "increase_sample_ratio_steps", "(", "step", ",", "base_ratio", "=", "0.1", ",", "step_size", "=", "10000", ")", ":", "\n", "    ", "ratio", "=", "min", "(", "base_ratio", "*", "(", "int", "(", "step", "/", "step_size", ")", "+", "1", ")", ",", "1.0", ")", "\n", "return", "ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.tools.train.reduce_loss_dict": [[30, 53], ["lib.utils.comm.get_world_size", "torch.no_grad", "torch.no_grad", "sorted", "torch.stack", "torch.stack", "torch.distributed.reduce", "torch.distributed.reduce", "loss_dict.keys", "loss_names.append", "torch.stack.append", "torch.distributed.get_rank", "torch.distributed.get_rank", "zip"], "function", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.comm.get_world_size", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.comm.get_rank", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.comm.get_rank"], ["", "def", "reduce_loss_dict", "(", "loss_dict", ")", ":", "\n", "    ", "\"\"\"\n    Reduce the loss dictionary from all processes so that process with rank\n    0 has the averaged results. Returns a dict with the same fields as\n    loss_dict, after reduction.\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "loss_dict", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "loss_names", "=", "[", "]", "\n", "all_losses", "=", "[", "]", "\n", "for", "k", "in", "sorted", "(", "loss_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "loss_names", ".", "append", "(", "k", ")", "\n", "all_losses", ".", "append", "(", "loss_dict", "[", "k", "]", ")", "\n", "", "all_losses", "=", "torch", ".", "stack", "(", "all_losses", ",", "dim", "=", "0", ")", "\n", "torch", ".", "distributed", ".", "reduce", "(", "all_losses", ",", "dst", "=", "0", ")", "\n", "if", "torch", ".", "distributed", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "# only main process gets accumulated, so only divide by", "\n", "# world_size in this case", "\n", "            ", "all_losses", "/=", "world_size", "\n", "", "reduced_losses", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "loss_names", ",", "all_losses", ")", "}", "\n", "", "return", "reduced_losses", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.tools.train.val": [[55, 72], ["print", "lib.utils.logging.SmoothedValue", "lib.utils.logging.SmoothedValue", "enumerate", "len", "len", "model.module.inference", "torch.squeeze", "torch.squeeze", "cv2.resize", "lib.utils.evaluate_depth_error.recover_metric_depth", "lib.utils.evaluate_depth_error.validate_rel_depth_err", "smoothed_criteria[].GetGlobalAverageValue", "smoothed_criteria[].GetGlobalAverageValue", "torch.squeeze.cpu().numpy", "torch.squeeze.cpu", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze"], "function", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.multi_depth_model_woauxi.RelDepthModel.inference", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.test_utils.recover_metric_depth", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.evaluate_depth_error.validate_rel_depth_err", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.logging.SmoothedValue.GetGlobalAverageValue", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.logging.SmoothedValue.GetGlobalAverageValue"], ["", "def", "val", "(", "val_dataloader", ",", "model", ")", ":", "\n", "    ", "\"\"\"\n    Validate the model.\n    \"\"\"", "\n", "print", "(", "'validating...'", ")", "\n", "smoothed_absRel", "=", "SmoothedValue", "(", "len", "(", "val_dataloader", ")", ")", "\n", "smoothed_whdr", "=", "SmoothedValue", "(", "len", "(", "val_dataloader", ")", ")", "\n", "smoothed_criteria", "=", "{", "'err_absRel'", ":", "smoothed_absRel", ",", "'err_whdr'", ":", "smoothed_whdr", "}", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "val_dataloader", ")", ":", "\n", "        ", "out", "=", "model", ".", "module", ".", "inference", "(", "data", ")", "\n", "pred_depth", "=", "torch", ".", "squeeze", "(", "out", "[", "'pred_depth'", "]", ")", "\n", "\n", "pred_depth_resize", "=", "cv2", ".", "resize", "(", "pred_depth", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "(", "torch", ".", "squeeze", "(", "data", "[", "'gt_depth'", "]", ")", ".", "shape", "[", "1", "]", ",", "torch", ".", "squeeze", "(", "data", "[", "'gt_depth'", "]", ")", ".", "shape", "[", "0", "]", ")", ")", "\n", "pred_depth_metric", "=", "recover_metric_depth", "(", "pred_depth_resize", ",", "data", "[", "'gt_depth'", "]", ")", "\n", "smoothed_criteria", "=", "validate_rel_depth_err", "(", "pred_depth_metric", ",", "data", "[", "'gt_depth'", "]", ",", "smoothed_criteria", ",", "scale", "=", "1.0", ")", "\n", "", "return", "{", "'abs_rel'", ":", "smoothed_criteria", "[", "'err_absRel'", "]", ".", "GetGlobalAverageValue", "(", ")", ",", "\n", "'whdr'", ":", "smoothed_criteria", "[", "'err_whdr'", "]", ".", "GetGlobalAverageValue", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.tools.train.do_train": [[74, 152], ["iter", "lib.utils.comm.is_pytorch_1_1_0_or_later", "lib.utils.training_stats.TrainingStats", "range", "int", "model", "optimizer.optim", "train.reduce_loss_dict", "scheduler.step", "traceback.format_exc", "print", "train.main_process", "tblogger.close", "train.increase_sample_ratio_steps", "data.load_dataset_distributed.MultipleDataLoaderDistributed", "iter", "logger.info", "lib.utils.training_stats.TrainingStats.IterTic", "next", "lib.utils.training_stats.TrainingStats.UpdateIterStats", "lib.utils.training_stats.TrainingStats.IterToc", "lib.utils.training_stats.TrainingStats.LogIterStats", "model.eval", "train.val", "model.train", "lib.utils.net_tools.save_ckpt", "iter", "next", "np.sum"], "function", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.comm.is_pytorch_1_1_0_or_later", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.models.multi_depth_model_auxiv2.ModelOptimizer.optim", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.tools.train.reduce_loss_dict", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.tools.train.main_process", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.tools.train.increase_sample_ratio_steps", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.load_dataset_distributed.MultipleDataLoaderDistributed", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.training_stats.TrainingStats.IterTic", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.training_stats.TrainingStats.UpdateIterStats", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.training_stats.TrainingStats.IterToc", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.training_stats.TrainingStats.LogIterStats", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.tools.train.val", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.net_tools.save_ckpt"], ["", "def", "do_train", "(", "train_dataloader", ",", "val_dataloader", ",", "train_args", ",", "\n", "model", ",", "save_to_disk", ",", "\n", "scheduler", ",", "optimizer", ",", "val_err", ",", "\n", "logger", ",", "tblogger", "=", "None", ")", ":", "\n", "# training status for logging", "\n", "    ", "if", "save_to_disk", ":", "\n", "        ", "training_stats", "=", "TrainingStats", "(", "train_args", ",", "cfg", ".", "TRAIN", ".", "LOG_INTERVAL", ",", "tblogger", "if", "train_args", ".", "use_tfboard", "else", "None", ")", "\n", "\n", "", "dataloader_iterator", "=", "iter", "(", "train_dataloader", ")", "\n", "start_step", "=", "train_args", ".", "start_step", "\n", "total_iters", "=", "cfg", ".", "TRAIN", ".", "MAX_ITER", "\n", "train_datasize", "=", "train_dataloader", ".", "batch_sampler", ".", "sampler", ".", "total_sampled_size", "\n", "\n", "pytorch_1_1_0_or_later", "=", "is_pytorch_1_1_0_or_later", "(", ")", "\n", "tmp_i", "=", "0", "\n", "try", ":", "\n", "        ", "for", "step", "in", "range", "(", "start_step", ",", "total_iters", ")", ":", "\n", "\n", "            ", "if", "step", "%", "train_args", ".", "sample_ratio_steps", "==", "0", "and", "step", "!=", "0", ":", "\n", "                ", "sample_ratio", "=", "increase_sample_ratio_steps", "(", "step", ",", "base_ratio", "=", "train_args", ".", "sample_start_ratio", ",", "step_size", "=", "train_args", ".", "sample_ratio_steps", ")", "\n", "train_dataloader", ",", "curr_sample_size", "=", "MultipleDataLoaderDistributed", "(", "train_args", ",", "sample_ratio", "=", "sample_ratio", ")", "\n", "dataloader_iterator", "=", "iter", "(", "train_dataloader", ")", "\n", "logger", ".", "info", "(", "'Sample ratio: %02f, current sampled datasize: %d'", "%", "(", "sample_ratio", ",", "np", ".", "sum", "(", "curr_sample_size", ")", ")", ")", "\n", "\n", "", "epoch", "=", "int", "(", "step", "*", "train_args", ".", "batchsize", "*", "train_args", ".", "world_size", "/", "train_datasize", ")", "\n", "if", "save_to_disk", ":", "\n", "                ", "training_stats", ".", "IterTic", "(", ")", "\n", "\n", "# get the next data batch", "\n", "", "try", ":", "\n", "                ", "data", "=", "next", "(", "dataloader_iterator", ")", "\n", "", "except", ":", "\n", "                ", "dataloader_iterator", "=", "iter", "(", "train_dataloader", ")", "\n", "data", "=", "next", "(", "dataloader_iterator", ")", "\n", "\n", "", "out", "=", "model", "(", "data", ")", "\n", "losses_dict", "=", "out", "[", "'losses'", "]", "\n", "optimizer", ".", "optim", "(", "losses_dict", ")", "\n", "\n", "#################Check data loading######################", "\n", "# tmp_path_base = '/home/yvan/DeepLearning/Depth/DiverseDepth-github/DiverseDepth/datasets/x/'", "\n", "# rgb = data['A'][1, ...].permute(1, 2, 0).squeeze()", "\n", "# rgb =rgb * torch.tensor(cfg.DATASET.RGB_PIXEL_VARS)[None, None, :] + torch.tensor(cfg.DATASET.RGB_PIXEL_MEANS)[None, None, :]", "\n", "# rgb = rgb * 255", "\n", "# rgb = rgb.cpu().numpy().astype(np.uint8)", "\n", "# depth = (data['B'][1, ...].squeeze().cpu().numpy()*1000)", "\n", "# depth[depth<0] = 0", "\n", "# depth = depth.astype(np.uint16)", "\n", "# plt.imsave(tmp_path_base+'%04d_r.jpg' % tmp_i, rgb)", "\n", "# plt.imsave(tmp_path_base+'%04d_d.png' % tmp_i, depth, cmap='rainbow')", "\n", "# tmp_i +=1", "\n", "#########################################################", "\n", "\n", "# reduce losses over all GPUs for logging purposes", "\n", "loss_dict_reduced", "=", "reduce_loss_dict", "(", "losses_dict", ")", "\n", "\n", "scheduler", ".", "step", "(", ")", "\n", "if", "save_to_disk", ":", "\n", "                ", "training_stats", ".", "UpdateIterStats", "(", "loss_dict_reduced", ")", "\n", "training_stats", ".", "IterToc", "(", ")", "\n", "training_stats", ".", "LogIterStats", "(", "step", ",", "epoch", ",", "optimizer", ".", "optimizer", ",", "val_err", "[", "0", "]", ")", "\n", "\n", "# validate the model", "\n", "", "if", "step", "%", "cfg", ".", "TRAIN", ".", "VAL_STEP", "==", "0", "and", "val_dataloader", "is", "not", "None", "and", "step", "!=", "0", ":", "\n", "                ", "model", ".", "eval", "(", ")", "\n", "val_err", "[", "0", "]", "=", "val", "(", "val_dataloader", ",", "model", ")", "\n", "# training mode", "\n", "model", ".", "train", "(", ")", "\n", "# save checkpoint", "\n", "", "if", "step", "%", "cfg", ".", "TRAIN", ".", "SNAPSHOT_ITERS", "==", "0", "and", "step", "!=", "0", "and", "save_to_disk", ":", "\n", "                ", "save_ckpt", "(", "train_args", ",", "step", ",", "epoch", ",", "model", ",", "optimizer", ".", "optimizer", ",", "scheduler", ",", "val_err", "[", "0", "]", ")", "\n", "\n", "", "", "", "except", "(", "RuntimeError", ",", "KeyboardInterrupt", ")", ":", "\n", "        ", "stack_trace", "=", "traceback", ".", "format_exc", "(", ")", "\n", "print", "(", "stack_trace", ")", "\n", "", "finally", ":", "\n", "        ", "if", "train_args", ".", "use_tfboard", "and", "main_process", "(", "dist", "=", "train_args", ".", "distributed", ",", "rank", "=", "train_args", ".", "global_rank", ")", ":", "\n", "            ", "tblogger", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.tools.train.main_worker": [[154, 244], ["lib.configs.config.merge_cfg_from_file", "lib.utils.logging.setup_distributed_logger", "RelDepthModel", "tools.parse_arg_base.print_options", "data.load_dataset_distributed.MultipleDataLoaderDistributed", "data.load_dataset_distributed.MultipleDataLoaderDistributed", "ModelOptimizer", "lib.utils.lr_scheduler_custom.make_lr_scheduler", "lib.configs.config.print_configs", "train.main_process", "train.do_train", "SummaryWriter", "torch.cuda.set_device", "torch.cuda.set_device", "torch.init_process_group", "lib.utils.comm.is_pytorch_1_1_0_or_later", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "lib.utils.logging.setup_distributed_logger.info", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "np.array", "math.ceil", "lib.utils.net_tools.load_ckpt", "train.increase_sample_ratio_steps", "data.load_dataset_distributed.MultipleDataLoaderDistributed", "math.ceil", "os.makedirs", "torch.nn.DataParallel.cuda", "torch.nn.DataParallel.cuda", "np.sum", "np.sum"], "function", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.configs.config.merge_cfg_from_file", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.logging.setup_distributed_logger", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.tools.parse_arg_base.print_options", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.load_dataset_distributed.MultipleDataLoaderDistributed", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.load_dataset_distributed.MultipleDataLoaderDistributed", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.lr_scheduler_custom.make_lr_scheduler", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.configs.config.print_configs", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.tools.train.main_process", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.tools.train.do_train", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.comm.is_pytorch_1_1_0_or_later", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.net_tools.load_ckpt", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.tools.train.increase_sample_ratio_steps", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.load_dataset_distributed.MultipleDataLoaderDistributed"], ["", "", "", "def", "main_worker", "(", "local_rank", ":", "int", ",", "ngpus_per_node", ":", "int", ",", "train_args", ",", "val_args", ")", ":", "\n", "    ", "train_args", ".", "global_rank", "=", "train_args", ".", "node_rank", "*", "ngpus_per_node", "+", "local_rank", "\n", "train_args", ".", "local_rank", "=", "local_rank", "\n", "val_args", ".", "global_rank", "=", "train_args", ".", "global_rank", "\n", "val_args", ".", "local_rank", "=", "local_rank", "\n", "merge_cfg_from_file", "(", "train_args", ")", "\n", "\n", "global", "logger", "\n", "# Set logger", "\n", "log_output_dir", "=", "cfg", ".", "TRAIN", ".", "LOG_DIR", "\n", "if", "log_output_dir", ":", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "makedirs", "(", "log_output_dir", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "            ", "if", "e", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "                ", "raise", "\n", "", "", "", "logger", "=", "setup_distributed_logger", "(", "\"lib\"", ",", "log_output_dir", ",", "local_rank", ",", "cfg", ".", "TRAIN", ".", "RUN_NAME", "+", "'.txt'", ")", "\n", "tblogger", "=", "None", "\n", "if", "train_args", ".", "use_tfboard", "and", "local_rank", "==", "0", ":", "\n", "        ", "from", "tensorboardX", "import", "SummaryWriter", "\n", "tblogger", "=", "SummaryWriter", "(", "cfg", ".", "TRAIN", ".", "LOG_DIR", ")", "\n", "\n", "# init", "\n", "", "if", "train_args", ".", "distributed", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "local_rank", ")", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "'nccl'", ",", "\n", "init_method", "=", "train_args", ".", "dist_url", ",", "\n", "world_size", "=", "train_args", ".", "world_size", ",", "\n", "rank", "=", "train_args", ".", "global_rank", ")", "\n", "\n", "\n", "# load model", "\n", "", "model", "=", "RelDepthModel", "(", ")", "\n", "if", "train_args", ".", "world_size", ">", "1", ":", "\n", "        ", "assert", "is_pytorch_1_1_0_or_later", "(", ")", ",", "\"SyncBatchNorm is only available in pytorch >= 1.1.0\"", "\n", "model", "=", "torch", ".", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "model", ")", "\n", "logger", ".", "info", "(", "'Using SyncBN!'", ")", "\n", "\n", "\n", "", "if", "train_args", ".", "distributed", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "\n", "model", ".", "cuda", "(", ")", ",", "device_ids", "=", "[", "local_rank", "]", ",", "output_device", "=", "local_rank", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ".", "cuda", "(", ")", ")", "\n", "\n", "", "val_err", "=", "[", "{", "'abs_rel'", ":", "0", ",", "'whdr'", ":", "0", "}", "]", "\n", "\n", "# Print configs and logs", "\n", "print_options", "(", "train_args", ",", "logger", ")", "\n", "\n", "# training and validation dataloader", "\n", "train_dataloader", ",", "train_sample_size", "=", "MultipleDataLoaderDistributed", "(", "train_args", ")", "\n", "val_dataloader", ",", "val_sample_size", "=", "MultipleDataLoaderDistributed", "(", "val_args", ")", "\n", "cfg", ".", "TRAIN", ".", "LR_SCHEDULER_MULTISTEPS", "=", "np", ".", "array", "(", "train_args", ".", "lr_scheduler_multiepochs", ")", "*", "math", ".", "ceil", "(", "np", ".", "sum", "(", "train_sample_size", ")", "/", "(", "train_args", ".", "world_size", "*", "train_args", ".", "batchsize", ")", ")", "\n", "\n", "# Optimizer", "\n", "optimizer", "=", "ModelOptimizer", "(", "model", ")", "\n", "# lr_optim_lambda = lambda iter: (1.0 - iter / (float(total_iters))) ** 0.9", "\n", "# scheduler = torch.optim.lr_scheduler.LambdaLR(optimizer.optimizer, lr_lambda=lr_optim_lambda)", "\n", "# lr_scheduler_step = 15000", "\n", "# scheduler = torch.optim.lr_scheduler.StepLR(optimizer.optimizer, step_size=lr_scheduler_step, gamma=0.9)", "\n", "scheduler", "=", "make_lr_scheduler", "(", "cfg", "=", "cfg", ",", "optimizer", "=", "optimizer", ".", "optimizer", ")", "\n", "\n", "if", "train_args", ".", "load_ckpt", ":", "\n", "        ", "load_ckpt", "(", "train_args", ",", "model", ",", "optimizer", ".", "optimizer", ",", "scheduler", ",", "val_err", ")", "\n", "# obtain the current sample ratio", "\n", "sample_ratio", "=", "increase_sample_ratio_steps", "(", "train_args", ".", "start_step", ",", "base_ratio", "=", "train_args", ".", "sample_start_ratio", ",", "\n", "step_size", "=", "train_args", ".", "sample_ratio_steps", ")", "\n", "# reconstruct the train_dataloader with the new sample_ratio", "\n", "train_dataloader", ",", "train_sample_size", "=", "MultipleDataLoaderDistributed", "(", "train_args", ",", "sample_ratio", "=", "sample_ratio", ")", "\n", "\n", "\n", "", "total_iters", "=", "math", ".", "ceil", "(", "np", ".", "sum", "(", "train_sample_size", ")", "/", "(", "train_args", ".", "world_size", "*", "train_args", ".", "batchsize", ")", ")", "*", "train_args", ".", "epoch", "\n", "cfg", ".", "TRAIN", ".", "MAX_ITER", "=", "total_iters", "\n", "cfg", ".", "TRAIN", ".", "GPU_NUM", "=", "train_args", ".", "world_size", "\n", "print_configs", "(", "cfg", ")", "\n", "\n", "save_to_disk", "=", "main_process", "(", "train_args", ".", "distributed", ",", "local_rank", ")", "\n", "\n", "do_train", "(", "train_dataloader", ",", "\n", "val_dataloader", ",", "\n", "train_args", ",", "\n", "model", ",", "\n", "save_to_disk", ",", "\n", "scheduler", ",", "\n", "optimizer", ",", "\n", "val_err", ",", "\n", "logger", ",", "\n", "tblogger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.tools.train.main": [[245, 272], ["tools.parse_arg_train.TrainOptions", "tools.parse_arg_train.TrainOptions.parse", "tools.parse_arg_val.ValOptions", "tools.parse_arg_val.ValOptions.parse", "print", "torch.cuda.device_count", "torch.cuda.device_count", "val_opt.parse.dataset_list.remove", "str().zfill", "torch.spawn", "train.main_worker", "str", "os.getpid"], "function", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.tools.parse_arg_base.BaseOptions.parse", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.tools.parse_arg_base.BaseOptions.parse", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.tools.train.main_worker"], ["", "def", "main", "(", ")", ":", "\n", "# Train args", "\n", "    ", "train_opt", "=", "TrainOptions", "(", ")", "\n", "train_args", "=", "train_opt", ".", "parse", "(", ")", "\n", "\n", "# Validation args", "\n", "val_opt", "=", "ValOptions", "(", ")", "\n", "val_args", "=", "val_opt", ".", "parse", "(", ")", "\n", "val_args", ".", "batchsize", "=", "1", "\n", "val_args", ".", "thread", "=", "0", "\n", "\n", "if", "'Holopix50k'", "in", "val_args", ".", "dataset_list", ":", "\n", "        ", "val_args", ".", "dataset_list", ".", "remove", "(", "'Holopix50k'", ")", "\n", "\n", "", "print", "(", "'Using PyTorch version: '", ",", "torch", ".", "__version__", ",", "torch", ".", "version", ".", "cuda", ")", "\n", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "train_args", ".", "world_size", "=", "ngpus_per_node", "*", "train_args", ".", "nnodes", "\n", "val_args", ".", "world_size", "=", "ngpus_per_node", "*", "train_args", ".", "nnodes", "\n", "train_args", ".", "distributed", "=", "ngpus_per_node", ">", "1", "\n", "\n", "# Randomize args.dist_url to avoid conflicts on same machine", "\n", "train_args", ".", "dist_url", "=", "train_args", ".", "dist_url", "+", "str", "(", "os", ".", "getpid", "(", ")", "%", "100", ")", ".", "zfill", "(", "2", ")", "\n", "\n", "if", "train_args", ".", "distributed", ":", "\n", "        ", "mp", ".", "spawn", "(", "main_worker", ",", "nprocs", "=", "ngpus_per_node", ",", "args", "=", "(", "ngpus_per_node", ",", "train_args", ",", "val_args", ")", ")", "\n", "", "else", ":", "\n", "        ", "main_worker", "(", "0", ",", "ngpus_per_node", ",", "train_args", ",", "val_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.tools.parse_arg_train.TrainOptions.initialize": [[5, 11], ["tools.parse_arg_base.BaseOptions.initialize", "tools.parse_arg_base.BaseOptions.initialize.add_argument", "tools.parse_arg_base.BaseOptions.initialize.add_argument"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.tools.parse_arg_val.ValOptions.initialize"], ["    ", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "        ", "parser", "=", "BaseOptions", ".", "initialize", "(", "self", ",", "parser", ")", "\n", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'train'", ",", "help", "=", "'Training flag'", ")", "\n", "parser", ".", "add_argument", "(", "'--phase_anno'", ",", "type", "=", "str", ",", "default", "=", "'train'", ",", "help", "=", "'Annotations file name'", ")", "\n", "self", ".", "isTrain", "=", "True", "\n", "return", "parser", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.tools.parse_arg_base.BaseOptions.__init__": [[4, 6], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "initialized", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.tools.parse_arg_base.BaseOptions.initialize": [[7, 43], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "        ", "parser", ".", "add_argument", "(", "'--backbone'", ",", "type", "=", "str", ",", "default", "=", "'resnet50'", ",", "help", "=", "'Select backbone type, resnet50 or resnext101'", ")", "\n", "parser", ".", "add_argument", "(", "'--batchsize'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'Batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--base_lr'", ",", "type", "=", "float", ",", "default", "=", "0.001", ",", "help", "=", "'Initial learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--load_ckpt'", ",", "help", "=", "'Checkpoint path to load'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Resume to train'", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch'", ",", "default", "=", "50", ",", "type", "=", "int", ",", "help", "=", "'Total training epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset_list'", ",", "default", "=", "None", ",", "nargs", "=", "'+'", ",", "help", "=", "'The names of multiple datasets'", ")", "\n", "parser", ".", "add_argument", "(", "'--loss_mode'", ",", "default", "=", "'_vnl_ssil_ranking_'", ",", "help", "=", "'Select loss to supervise, joint or ranking'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_scheduler_multiepochs'", ",", "default", "=", "[", "10", ",", "25", ",", "40", "]", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "help", "=", "'Learning rate scheduler step'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--val_step'", ",", "default", "=", "5000", ",", "type", "=", "int", ",", "help", "=", "'Validation steps'", ")", "\n", "parser", ".", "add_argument", "(", "'--snapshot_iters'", ",", "default", "=", "5000", ",", "type", "=", "int", ",", "help", "=", "'Checkpoint save iters'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_interval'", ",", "default", "=", "10", ",", "type", "=", "int", ",", "help", "=", "'Log print iters'", ")", "\n", "parser", ".", "add_argument", "(", "'--output_dir'", ",", "type", "=", "str", ",", "default", "=", "'./output'", ",", "help", "=", "'Output dir'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_tfboard'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Tensorboard to log training info'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--dataroot'", ",", "default", "=", "'./datasets'", ",", "required", "=", "True", ",", "help", "=", "'Path to images'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "default", "=", "'multi'", ",", "help", "=", "'Dataset loader name'", ")", "\n", "parser", ".", "add_argument", "(", "'--scale_decoder_lr'", ",", "type", "=", "float", ",", "default", "=", "1", ",", "help", "=", "'Scale learning rate for the decoder'", ")", "\n", "parser", ".", "add_argument", "(", "'--thread'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "'Thread for loading data'", ")", "\n", "parser", ".", "add_argument", "(", "'--start_step'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "'Set start training steps'", ")", "\n", "parser", ".", "add_argument", "(", "'--sample_ratio_steps'", ",", "default", "=", "10000", ",", "type", "=", "int", ",", "help", "=", "'Step for increasing sample ratio'", ")", "\n", "parser", ".", "add_argument", "(", "'--sample_start_ratio'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "help", "=", "'Start sample ratio'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'Rank ID for processes'", ")", "\n", "parser", ".", "add_argument", "(", "'--nnodes'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'Amount of nodes'", ")", "\n", "parser", ".", "add_argument", "(", "'--node_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'Rank of current node'", ")", "\n", "parser", ".", "add_argument", "(", "'--dist_url'", ",", "type", "=", "str", ",", "default", "=", "'tcp://127.0.0.1:22'", ",", "help", "=", "'URL specifying how to initialize the process group'", ")", "\n", "\n", "# parser.add_argument('--optim', default='SGD', help='Select optimizer, SGD or Adam')", "\n", "# parser.add_argument('--start_epoch', default=0, type=int, help='Set training epochs')", "\n", "# parser.add_argument('--results_dir', type=str, default='./evaluation', help='Output dir')", "\n", "# parser.add_argument('--diff_loss_weight', default=1, type=int, help='Step for increasing sample ratio')", "\n", "\n", "self", ".", "initialized", "=", "True", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.tools.parse_arg_base.BaseOptions.parse": [[44, 50], ["argparse.ArgumentParser", "parse_arg_base.BaseOptions.initialize", "argparse.ArgumentParser.parse_args"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.tools.parse_arg_val.ValOptions.initialize", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.tools.test_depth.parse_args"], ["", "def", "parse", "(", "self", ")", ":", "\n", "        ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "self", ".", "parser", "=", "self", ".", "initialize", "(", "parser", ")", "\n", "self", ".", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "self", ".", "opt", "\n", "", "", "def", "print_options", "(", "opt", ",", "logger", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.tools.parse_arg_base.print_options": [[50, 57], ["sorted", "logger.info", "vars().items", "str", "str", "vars"], "function", ["None"], ["", "", "def", "print_options", "(", "opt", ",", "logger", "=", "None", ")", ":", "\n", "    ", "message", "=", "''", "\n", "message", "+=", "'----------------- Options ---------------\\n'", "\n", "for", "k", ",", "v", "in", "sorted", "(", "vars", "(", "opt", ")", ".", "items", "(", ")", ")", ":", "\n", "        ", "message", "+=", "'{:>25}: {}\\n'", ".", "format", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ")", "\n", "", "message", "+=", "'----------------- End -------------------'", "\n", "logger", ".", "info", "(", "message", ")", "", "", ""]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.tools.parse_arg_val.ValOptions.initialize": [[4, 9], ["tools.parse_arg_base.BaseOptions.initialize", "tools.parse_arg_base.BaseOptions.initialize.add_argument", "tools.parse_arg_base.BaseOptions.initialize.add_argument"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.tools.parse_arg_val.ValOptions.initialize"], ["    ", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "        ", "parser", "=", "BaseOptions", ".", "initialize", "(", "self", ",", "parser", ")", "\n", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'val'", ",", "help", "=", "'Validation flag'", ")", "\n", "parser", ".", "add_argument", "(", "'--phase_anno'", ",", "type", "=", "str", ",", "default", "=", "'val'", ",", "help", "=", "'Annotations file name'", ")", "\n", "return", "parser", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.tools.test_shape.parse_args": [[15, 23], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.tools.test_depth.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'Configs for LeReS'", ")", "\n", "parser", ".", "add_argument", "(", "'--load_ckpt'", ",", "default", "=", "'./res50.pth'", ",", "help", "=", "'Checkpoint path to load'", ")", "\n", "parser", ".", "add_argument", "(", "'--backbone'", ",", "default", "=", "'resnext101'", ",", "help", "=", "'Checkpoint path to load'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.tools.test_shape.scale_torch": [[24, 41], ["len", "torchvision.Compose", "transforms.Compose.", "torch.from_numpy.astype", "torch.from_numpy", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "def", "scale_torch", "(", "img", ")", ":", "\n", "    ", "\"\"\"\n    Scale the image and output it in torch.tensor.\n    :param img: input rgb is in shape [H, W, C], input depth/disp is in shape [H, W]\n    :param scale: the scale factor. float\n    :return: img. [C, H, W]\n    \"\"\"", "\n", "if", "len", "(", "img", ".", "shape", ")", "==", "2", ":", "\n", "        ", "img", "=", "img", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", "\n", "", "if", "img", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "        ", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", "]", ")", "\n", "img", "=", "transform", "(", "img", ")", "\n", "", "else", ":", "\n", "        ", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.tools.test_shape.make_shift_focallength_models": [[42, 58], ["lib.spvcnn_classsification.SPVCNN_CLASSIFICATION", "lib.spvcnn_classsification.SPVCNN_CLASSIFICATION", "lib.spvcnn_classsification.SPVCNN_CLASSIFICATION.eval", "lib.spvcnn_classsification.SPVCNN_CLASSIFICATION.eval"], "function", ["None"], ["", "def", "make_shift_focallength_models", "(", ")", ":", "\n", "    ", "shift_model", "=", "SPVCNN_CLASSIFICATION", "(", "input_channel", "=", "3", ",", "\n", "num_classes", "=", "1", ",", "\n", "cr", "=", "1.0", ",", "\n", "pres", "=", "0.01", ",", "\n", "vres", "=", "0.01", "\n", ")", "\n", "focal_model", "=", "SPVCNN_CLASSIFICATION", "(", "input_channel", "=", "5", ",", "\n", "num_classes", "=", "1", ",", "\n", "cr", "=", "1.0", ",", "\n", "pres", "=", "0.01", ",", "\n", "vres", "=", "0.01", "\n", ")", "\n", "shift_model", ".", "eval", "(", ")", "\n", "focal_model", ".", "eval", "(", ")", "\n", "return", "shift_model", ",", "focal_model", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.tools.test_shape.reconstruct3D_from_depth": [[59, 84], ["numpy.percentile", "lib.test_utils.refine_focal", "lib.test_utils.refine_shift", "lib.test_utils.refine_focal", "numpy.tan", "lib.test_utils.refine_focal.item", "torch.tensor", "lib.test_utils.refine_shift.item", "lib.test_utils.refine_focal.item", "pred_depth.min", "lib.test_utils.refine_shift.item"], "function", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.test_utils.refine_focal", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.test_utils.refine_shift", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.test_utils.refine_focal"], ["", "def", "reconstruct3D_from_depth", "(", "rgb", ",", "pred_depth", ",", "shift_model", ",", "focal_model", ")", ":", "\n", "    ", "cam_u0", "=", "rgb", ".", "shape", "[", "1", "]", "/", "2.0", "\n", "cam_v0", "=", "rgb", ".", "shape", "[", "0", "]", "/", "2.0", "\n", "pred_depth_norm", "=", "pred_depth", "-", "pred_depth", ".", "min", "(", ")", "+", "0.5", "\n", "\n", "dmax", "=", "np", ".", "percentile", "(", "pred_depth_norm", ",", "98", ")", "\n", "pred_depth_norm", "=", "pred_depth_norm", "/", "dmax", "\n", "\n", "# proposed focal length, FOV is 60', Note that 60~80' are acceptable.", "\n", "proposed_scaled_focal", "=", "(", "rgb", ".", "shape", "[", "0", "]", "//", "2", "/", "np", ".", "tan", "(", "(", "60", "/", "2.0", ")", "*", "np", ".", "pi", "/", "180", ")", ")", "\n", "\n", "# recover focal", "\n", "focal_scale_1", "=", "refine_focal", "(", "pred_depth_norm", ",", "proposed_scaled_focal", ",", "focal_model", ",", "u0", "=", "cam_u0", ",", "v0", "=", "cam_v0", ")", "\n", "predicted_focal_1", "=", "proposed_scaled_focal", "/", "focal_scale_1", ".", "item", "(", ")", "\n", "\n", "# recover shift", "\n", "shift_1", "=", "refine_shift", "(", "pred_depth_norm", ",", "shift_model", ",", "predicted_focal_1", ",", "cam_u0", ",", "cam_v0", ")", "\n", "shift_1", "=", "shift_1", "if", "shift_1", ".", "item", "(", ")", "<", "0.6", "else", "torch", ".", "tensor", "(", "[", "0.6", "]", ")", "\n", "depth_scale_1", "=", "pred_depth_norm", "-", "shift_1", ".", "item", "(", ")", "\n", "\n", "# recover focal", "\n", "focal_scale_2", "=", "refine_focal", "(", "depth_scale_1", ",", "predicted_focal_1", ",", "focal_model", ",", "u0", "=", "cam_u0", ",", "v0", "=", "cam_v0", ")", "\n", "predicted_focal_2", "=", "predicted_focal_1", "/", "focal_scale_2", ".", "item", "(", ")", "\n", "\n", "return", "shift_1", ",", "predicted_focal_2", ",", "depth_scale_1", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.tools.test_depth.parse_args": [[12, 20], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.tools.test_depth.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'Configs for LeReS'", ")", "\n", "parser", ".", "add_argument", "(", "'--load_ckpt'", ",", "default", "=", "'./res50.pth'", ",", "help", "=", "'Checkpoint path to load'", ")", "\n", "parser", ".", "add_argument", "(", "'--backbone'", ",", "default", "=", "'resnext101'", ",", "help", "=", "'Checkpoint path to load'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.tools.test_depth.scale_torch": [[21, 38], ["len", "torchvision.Compose", "transforms.Compose.", "torch.from_numpy.astype", "torch.from_numpy", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "def", "scale_torch", "(", "img", ")", ":", "\n", "    ", "\"\"\"\n    Scale the image and output it in torch.tensor.\n    :param img: input rgb is in shape [H, W, C], input depth/disp is in shape [H, W]\n    :param scale: the scale factor. float\n    :return: img. [C, H, W]\n    \"\"\"", "\n", "if", "len", "(", "img", ".", "shape", ")", "==", "2", ":", "\n", "        ", "img", "=", "img", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", "\n", "", "if", "img", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "        ", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", "]", ")", "\n", "img", "=", "transform", "(", "img", ")", "\n", "", "else", ":", "\n", "        ", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.load_dataset_distributed.CustomerMultiDataSampler.__init__": [[64, 88], ["load_dataset_distributed.CustomerMultiDataSampler.create_samplers", "numpy.array", "numpy.array", "numpy.sum", "int", "logger.info", "math.ceil", "len", "max", "range"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.load_dataset_distributed.CustomerMultiDataSampler.create_samplers"], ["def", "__init__", "(", "self", ",", "args", ",", "multi_dataset", ",", "num_replicas", ",", "split", ",", "sample_ratio", "=", "1.0", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "num_replicas", "=", "num_replicas", "\n", "self", ".", "phase", "=", "split", "\n", "self", ".", "rank", "=", "args", ".", "global_rank", "\n", "#self.logger = logger", "\n", "\n", "self", ".", "multi_dataset", "=", "multi_dataset", "\n", "self", ".", "create_samplers", "(", ")", "\n", "\n", "self", ".", "num_indices", "=", "np", ".", "array", "(", "[", "len", "(", "i", ")", "for", "i", "in", "self", ".", "extended_indices_list", "]", ")", "\n", "#self.num_samples = self.num_indices.astype(np.uint32)", "\n", "self", ".", "num_samples", "=", "(", "self", ".", "num_indices", "*", "sample_ratio", ")", ".", "astype", "(", "np", ".", "uint32", ")", "\n", "self", ".", "max_indices", "=", "np", ".", "array", "(", "[", "max", "(", "i", ")", "for", "i", "in", "self", ".", "extended_indices_list", "]", ")", "\n", "self", ".", "total_sampled_size", "=", "np", ".", "sum", "(", "self", ".", "num_samples", ")", "\n", "self", ".", "num_dist_samples", "=", "int", "(", "\n", "math", ".", "ceil", "(", "self", ".", "total_sampled_size", "*", "1.0", "/", "self", ".", "num_replicas", ")", "\n", ")", "\n", "self", ".", "total_dist_size", "=", "self", ".", "num_dist_samples", "*", "self", ".", "num_replicas", "\n", "\n", "logstr", "=", "\",\"", ".", "join", "(", "[", "\"%s sampled data size: %d\"", "%", "(", "args", ".", "dataset_list", "[", "i", "]", ",", "self", ".", "num_samples", "[", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_indices", ".", "size", ")", "]", "\n", ")", "\n", "logger", ".", "info", "(", "logstr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.load_dataset_distributed.CustomerMultiDataSampler.__iter__": [[89, 115], ["load_dataset_distributed.CustomerMultiDataSampler.create_samplers", "numpy.cumsum", "int", "numpy.append", "numpy.array().transpose().reshape", "numpy.concatenate", "numpy.append", "enumerate", "range", "numpy.array().transpose", "int", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.load_dataset_distributed.CustomerMultiDataSampler.create_samplers"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "create_samplers", "(", ")", "\n", "cum_sum", "=", "np", ".", "cumsum", "(", "np", ".", "append", "(", "[", "0", "]", ",", "self", ".", "max_indices", ")", ")", "\n", "indices_array", "=", "[", "[", "self", ".", "extended_indices_list", "[", "data_i", "]", "[", "i", "]", "+", "cum_sum", "[", "data_i", "]", "\n", "for", "i", "in", "range", "(", "int", "(", "num", ")", ")", "]", "for", "data_i", ",", "num", "in", "enumerate", "(", "self", ".", "num_samples", ")", "]", "\n", "\n", "if", "\"train\"", "in", "self", ".", "phase", ":", "\n", "# data list is mapped to the order [A, B, C, A, B, C....]", "\n", "            ", "indices_array", "=", "np", ".", "array", "(", "indices_array", ")", ".", "transpose", "(", "1", ",", "0", ")", ".", "reshape", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "indices_array", "=", "np", ".", "concatenate", "(", "indices_array", "[", ":", "]", ")", "\n", "\n", "# add extra samples to make it evenly divisible", "\n", "", "diff_size", "=", "int", "(", "self", ".", "total_dist_size", "-", "self", ".", "total_sampled_size", ")", "\n", "if", "diff_size", ">", "0", ":", "\n", "            ", "extended_indices_dist", "=", "np", ".", "append", "(", "indices_array", ",", "indices_array", "[", ":", "diff_size", "]", ")", "\n", "", "else", ":", "\n", "            ", "extended_indices_dist", "=", "indices_array", "\n", "", "assert", "extended_indices_dist", ".", "size", "==", "self", ".", "total_dist_size", "\n", "\n", "# subsample", "\n", "offset", "=", "self", ".", "num_dist_samples", "*", "self", ".", "rank", "\n", "rank_indices", "=", "extended_indices_dist", "[", "offset", ":", "offset", "+", "self", ".", "num_dist_samples", "]", "\n", "assert", "rank_indices", ".", "size", "==", "self", ".", "num_dist_samples", "\n", "for", "id", "in", "rank_indices", ":", "\n", "            ", "yield", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.load_dataset_distributed.CustomerMultiDataSampler.__len__": [[116, 118], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total_sampled_size", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.load_dataset_distributed.CustomerMultiDataSampler.create_samplers": [[119, 150], ["len", "numpy.max", "logger.info", "dataset_indices_lists.append", "indices_len.append", "numpy.random.permutation", "len", "range", "numpy.concatenate", "load_dataset_distributed.CustomerMultiDataSampler.extended_indices_list.append", "numpy.arange", "numpy.concatenate", "list", "range", "len", "numpy.random.choice", "len", "len", "numpy.random.permutation"], "methods", ["None"], ["", "def", "create_samplers", "(", "self", ")", ":", "\n", "        ", "self", ".", "extended_indices_list", "=", "[", "]", "\n", "\n", "dataset_indices_lists", "=", "[", "]", "\n", "indices_len", "=", "[", "]", "\n", "datasets_num", "=", "len", "(", "self", ".", "multi_dataset", ".", "datasets", ")", "\n", "for", "dataset_i", "in", "self", ".", "multi_dataset", ".", "datasets", ":", "\n", "# The list of indices of each dataset", "\n", "            ", "dataset_indices_lists", ".", "append", "(", "np", ".", "random", ".", "permutation", "(", "np", ".", "arange", "(", "len", "(", "dataset_i", ".", "curriculum_list", ")", ")", ")", ")", "\n", "indices_len", ".", "append", "(", "len", "(", "dataset_i", ".", "curriculum_list", ")", ")", "\n", "\n", "# the max size of all datasets", "\n", "", "max_len", "=", "np", ".", "max", "(", "indices_len", ")", "\n", "\n", "if", "\"train\"", "==", "self", ".", "phase", ":", "\n", "            ", "for", "data_list", "in", "dataset_indices_lists", ":", "\n", "                ", "cp", "=", "max_len", "//", "data_list", ".", "size", "\n", "size_i", "=", "data_list", ".", "size", "\n", "tmp", "=", "data_list", "\n", "for", "i", "in", "range", "(", "cp", "-", "1", ")", ":", "\n", "                    ", "tmp", "=", "np", ".", "concatenate", "(", "(", "tmp", ",", "np", ".", "random", ".", "permutation", "(", "data_list", ")", ")", ",", "axis", "=", "None", ")", "\n", "", "tmp", "=", "np", ".", "concatenate", "(", "(", "tmp", ",", "np", ".", "random", ".", "choice", "(", "data_list", ",", "max_len", "%", "size_i", ",", "replace", "=", "False", ")", ")", ",", "axis", "=", "None", ")", "\n", "self", ".", "extended_indices_list", ".", "append", "(", "list", "(", "tmp", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "extended_indices_list", "=", "dataset_indices_lists", "\n", "", "logstr", "=", "\"\\n\"", ".", "join", "(", "[", "\"Split %s, %s: %d -(extend to)-> %d\"", "%", "\n", "(", "self", ".", "phase", ",", "self", ".", "args", ".", "dataset_list", "[", "i", "]", ",", "len", "(", "dataset_indices_lists", "[", "i", "]", ")", ",", "\n", "len", "(", "self", ".", "extended_indices_list", "[", "i", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "datasets_num", ")", "]", "\n", ")", "\n", "logger", ".", "info", "(", "logstr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.load_dataset_distributed.CustomerMultiDataSamples.__init__": [[157, 179], ["logging.getLogger", "numpy.array", "numpy.array", "numpy.sum", "int", "logging.getLogger.info", "torch.get_world_size", "torch.get_world_size", "torch.get_rank", "torch.get_rank", "math.ceil", "len", "max", "torch.is_available", "torch.is_available", "RuntimeError", "torch.is_available", "torch.is_available", "RuntimeError", "map"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.comm.get_world_size", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.comm.get_world_size", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.comm.get_rank", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.utils.comm.get_rank"], ["def", "__init__", "(", "self", ",", "multi_data_indices", ",", "ratio_samples", ",", "opt", ",", "rank", "=", "None", ",", "num_replicas", "=", "None", ")", ":", "\n", "        ", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "self", ".", "multi_data_indices", "=", "multi_data_indices", "\n", "self", ".", "num_indices", "=", "np", ".", "array", "(", "[", "len", "(", "i", ")", "for", "i", "in", "self", ".", "multi_data_indices", "]", ")", "\n", "self", ".", "num_samples", "=", "(", "self", ".", "num_indices", "*", "ratio_samples", ")", ".", "astype", "(", "np", ".", "uint32", ")", "\n", "self", ".", "max_indices", "=", "np", ".", "array", "(", "[", "max", "(", "i", ")", "for", "i", "in", "self", ".", "multi_data_indices", "]", ")", "\n", "self", ".", "total_sampled_size", "=", "np", ".", "sum", "(", "self", ".", "num_samples", ")", "\n", "self", ".", "phase", "=", "opt", ".", "phase", "\n", "if", "num_replicas", "is", "None", ":", "\n", "            ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Requires distributed package to be available\"", ")", "\n", "", "num_replicas", "=", "dist", ".", "get_world_size", "(", ")", "\n", "", "self", ".", "num_replicas", "=", "num_replicas", "\n", "if", "rank", "is", "None", ":", "\n", "            ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Requires distributed package to be available\"", ")", "\n", "", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "", "self", ".", "rank", "=", "rank", "\n", "self", ".", "num_dist_samples", "=", "int", "(", "math", ".", "ceil", "(", "self", ".", "total_sampled_size", "*", "1.0", "/", "self", ".", "num_replicas", ")", ")", "\n", "self", ".", "total_dist_size", "=", "self", ".", "num_dist_samples", "*", "self", ".", "num_replicas", "\n", "logger", ".", "info", "(", "'Sample %02f, sampled dataset sizes are %s'", "%", "(", "ratio_samples", ",", "','", ".", "join", "(", "map", "(", "str", ",", "self", ".", "num_samples", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.load_dataset_distributed.CustomerMultiDataSamples.__iter__": [[180, 209], ["numpy.cumsum", "int", "iter", "numpy.append", "numpy.array().transpose().reshape", "numpy.concatenate", "numpy.append", "enumerate", "enumerate", "numpy.array().transpose", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "range", "int", "int", "numpy.array"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "cum_sum", "=", "np", ".", "cumsum", "(", "np", ".", "append", "(", "[", "0", "]", ",", "self", ".", "max_indices", ")", ")", "\n", "if", "'train'", "in", "self", ".", "phase", ":", "\n", "            ", "indices_array", "=", "[", "[", "self", ".", "multi_data_indices", "[", "idx", "]", "[", "i", "]", "+", "cum_sum", "[", "idx", "]", "for", "i", "in", "torch", ".", "randperm", "(", "int", "(", "num", ")", ")", "]", "for", "\n", "idx", ",", "num", "in", "\n", "enumerate", "(", "self", ".", "num_samples", ")", "]", "\n", "", "else", ":", "\n", "            ", "indices_array", "=", "[", "[", "self", ".", "multi_data_indices", "[", "idx", "]", "[", "i", "]", "+", "cum_sum", "[", "idx", "]", "for", "i", "in", "range", "(", "int", "(", "num", ")", ")", "]", "for", "\n", "idx", ",", "num", "in", "enumerate", "(", "self", ".", "num_samples", ")", "]", "\n", "", "if", "'train'", "in", "self", ".", "phase", ":", "\n", "# data list is reshaped in [A, B, C, A, B, C....]", "\n", "            ", "indices_array", "=", "np", ".", "array", "(", "indices_array", ")", ".", "transpose", "(", "1", ",", "0", ")", ".", "reshape", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "indices_array", "=", "np", ".", "concatenate", "(", "indices_array", "[", ":", "]", ")", "\n", "\n", "# add extra samples to make it evenly divisible", "\n", "", "diff_size", "=", "int", "(", "self", ".", "total_dist_size", "-", "self", ".", "total_sampled_size", ")", "\n", "if", "diff_size", ">", "0", ":", "\n", "            ", "extended_indices_dist", "=", "np", ".", "append", "(", "indices_array", ",", "indices_array", "[", ":", "diff_size", "]", ")", "\n", "", "else", ":", "\n", "            ", "extended_indices_dist", "=", "indices_array", "\n", "", "assert", "extended_indices_dist", ".", "size", "==", "self", ".", "total_dist_size", "\n", "\n", "# subsample", "\n", "offset", "=", "self", ".", "num_dist_samples", "*", "self", ".", "rank", "\n", "rank_indices", "=", "extended_indices_dist", "[", "offset", ":", "offset", "+", "self", ".", "num_dist_samples", "]", "\n", "assert", "rank_indices", ".", "size", "==", "self", ".", "num_dist_samples", "\n", "\n", "return", "iter", "(", "rank_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.load_dataset_distributed.MultipleDataLoaderDistributed": [[40, 58], ["load_dataset_distributed.create_multiple_dataset", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "load_dataset_distributed.CustomerMultiDataSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.load_dataset_distributed.create_multiple_dataset"], ["def", "MultipleDataLoaderDistributed", "(", "opt", ",", "sample_ratio", "=", "1", ")", ":", "\n", "        ", "opt", "=", "opt", "\n", "#multi_datasets, dataset_indices_list = create_multiple_dataset(opt)", "\n", "multi_datasets", "=", "create_multiple_dataset", "(", "opt", ")", "\n", "#multi_datasizes = [len(dataset) for dataset in multi_datasets]", "\n", "merged_dataset", "=", "torch", ".", "utils", ".", "data", ".", "ConcatDataset", "(", "multi_datasets", ")", "\n", "#custom_multi_sampler_dist = CustomerMultiDataSamples(dataset_indices_list, sample_ratio, opt)", "\n", "custom_multi_sampler_dist", "=", "CustomerMultiDataSampler", "(", "opt", ",", "merged_dataset", ",", "opt", ".", "world_size", ",", "opt", ".", "phase", ")", "\n", "curr_sample_size", "=", "custom_multi_sampler_dist", ".", "num_samples", "\n", "dist_sample_size", "=", "custom_multi_sampler_dist", ".", "num_dist_samples", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", "=", "merged_dataset", ",", "\n", "batch_size", "=", "opt", ".", "batchsize", ",", "\n", "num_workers", "=", "opt", ".", "thread", ",", "\n", "sampler", "=", "custom_multi_sampler_dist", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "return", "dataloader", ",", "curr_sample_size", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.load_dataset_distributed.create_dataset": [[211, 218], ["logging.getLogger", "dataset.initialize", "logging.getLogger.info", "load_dataset_distributed.find_dataset_lib"], "function", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.tools.parse_arg_val.ValOptions.initialize", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.load_dataset_distributed.find_dataset_lib"], ["", "", "def", "create_dataset", "(", "opt", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "dataset", "=", "find_dataset_lib", "(", "opt", ".", "dataset", ")", "(", ")", "\n", "dataset", ".", "initialize", "(", "opt", ")", "\n", "logger", ".", "info", "(", "\"%s is created.\"", "%", "opt", ".", "dataset", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.load_dataset_distributed.create_multiple_dataset": [[220, 241], ["numpy.max", "logger.info", "logger.info", "all_datasets.append", "dataset_indices_lists.append", "indices_len.append", "load_dataset_distributed.find_dataset_lib", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.load_dataset_distributed.find_dataset_lib"], ["", "def", "create_multiple_dataset", "(", "opt", ")", ":", "\n", "    ", "all_datasets", "=", "[", "]", "\n", "dataset_indices_lists", "=", "[", "]", "\n", "indices_len", "=", "[", "]", "\n", "for", "name", "in", "opt", ".", "dataset_list", ":", "\n", "        ", "dataset", "=", "find_dataset_lib", "(", "opt", ".", "dataset", ")", "(", "opt", ",", "name", ")", "\n", "#dataset.initialize(opt, name)", "\n", "logger", ".", "info", "(", "\"%s : %s is loaded, the data size is %d\"", "%", "(", "opt", ".", "phase", ",", "name", ",", "len", "(", "dataset", ")", ")", ")", "\n", "all_datasets", ".", "append", "(", "dataset", ")", "\n", "assert", "dataset", ".", "curriculum_list", "is", "not", "None", ",", "\"Curriculum is None!!!\"", "\n", "dataset_indices_lists", ".", "append", "(", "dataset", ".", "curriculum_list", ")", "\n", "indices_len", ".", "append", "(", "len", "(", "dataset", ".", "curriculum_list", ")", ")", "\n", "assert", "len", "(", "dataset", ".", "curriculum_list", ")", "==", "dataset", ".", "data_size", ",", "\"Curriculum list size not equal the data size!!!\"", "\n", "", "max_len", "=", "np", ".", "max", "(", "indices_len", ")", "\n", "# if 'train' in opt.phase:", "\n", "#     extended_indices_list = [i * (max_len // len(i)) + list(np.random.choice(i, max_len % len(i), replace=False)) for i in dataset_indices_lists]", "\n", "#     #extended_indices_list = [i + list(np.random.choice(i, max_len-len(i))) for i in dataset_indices_lists]", "\n", "# else:", "\n", "#     extended_indices_list = dataset_indices_lists", "\n", "logger", ".", "info", "(", "\"%s are merged!\"", "%", "opt", ".", "dataset_list", ")", "\n", "return", "all_datasets", "#, extended_indices_list", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.load_dataset_distributed.find_dataset_lib": [[243, 263], ["logging.getLogger", "importlib.import_module", "importlib.import_module.__dict__.items", "dataset_name.replace", "logging.getLogger.info", "exit", "name.lower", "target_dataset_name.lower"], "function", ["None"], ["", "def", "find_dataset_lib", "(", "dataset_name", ")", ":", "\n", "    ", "\"\"\"\n    Give the option --dataset [datasetname], import \"data/datasetname_dataset.py\"\n    :param dataset_name: --dataset\n    :return: \"data/datasetname_dataset.py\"\n    \"\"\"", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "dataset_filename", "=", "\"data.\"", "+", "dataset_name", "+", "\"_dataset\"", "\n", "datasetlib", "=", "importlib", ".", "import_module", "(", "dataset_filename", ")", "\n", "\n", "dataset", "=", "None", "\n", "target_dataset_name", "=", "dataset_name", ".", "replace", "(", "'_'", ",", "''", ")", "+", "'dataset'", "\n", "for", "name", ",", "cls", "in", "datasetlib", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "        ", "if", "name", ".", "lower", "(", ")", "==", "target_dataset_name", ".", "lower", "(", ")", ":", "\n", "            ", "dataset", "=", "cls", "\n", "", "", "if", "dataset", "is", "None", ":", "\n", "        ", "logger", ".", "info", "(", "\"In %s.py, there should be a class name that matches %s in lowercase.\"", "%", "(", "\n", "dataset_filename", ",", "target_dataset_name", ")", ")", "\n", "exit", "(", "0", ")", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.multi_dataset.MultiDataset.__init__": [[16, 31], ["torch.utils.data.Dataset.__init__", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "multi_dataset.MultiDataset.getData", "len"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.multi_dataset.MultiDataset.getData"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "dataset_name", "=", "None", ")", ":", "\n", "        ", "super", "(", "MultiDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "root", "=", "opt", ".", "dataroot", "\n", "self", ".", "dataset_name", "=", "dataset_name", "\n", "self", ".", "dir_anno", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "ROOT_DIR", ",", "\n", "opt", ".", "dataroot", ",", "\n", "dataset_name", ",", "\n", "'annotations'", ",", "\n", "opt", ".", "phase_anno", "+", "'_annotations.json'", ")", "\n", "self", ".", "dir_teacher_list", "=", "None", "\n", "self", ".", "rgb_paths", ",", "self", ".", "depth_paths", ",", "self", ".", "disp_paths", ",", "self", ".", "sem_masks", ",", "self", ".", "ins_paths", ",", "self", ".", "all_annos", ",", "self", ".", "curriculum_list", "=", "self", ".", "getData", "(", ")", "\n", "self", ".", "data_size", "=", "len", "(", "self", ".", "all_annos", ")", "\n", "self", ".", "focal_length_dict", "=", "{", "'diml_ganet'", ":", "1380.0", "/", "2.0", ",", "'taskonomy'", ":", "512.0", ",", "'online'", ":", "256.0", ",", "\n", "'apolloscape2'", ":", "2304.0", "/", "2.0", ",", "'3d-ken-burns'", ":", "512.0", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.multi_dataset.MultiDataset.getData": [[32, 76], ["list", "open", "json.load", "numpy.random.choice", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "len", "len", "range", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "range", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "range", "range", "range", "len", "len", "len", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "len", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "len"], "methods", ["None"], ["", "def", "getData", "(", "self", ")", ":", "\n", "        ", "with", "open", "(", "self", ".", "dir_anno", ",", "'r'", ")", "as", "load_f", ":", "\n", "            ", "all_annos", "=", "json", ".", "load", "(", "load_f", ")", "\n", "\n", "", "curriculum_list", "=", "list", "(", "np", ".", "random", ".", "choice", "(", "len", "(", "all_annos", ")", ",", "len", "(", "all_annos", ")", ",", "replace", "=", "False", ")", ")", "\n", "\n", "rgb_paths", "=", "[", "\n", "os", ".", "path", ".", "join", "(", "cfg", ".", "ROOT_DIR", ",", "self", ".", "root", ",", "all_annos", "[", "i", "]", "[", "'rgb_path'", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "all_annos", ")", ")", "\n", "]", "\n", "depth_paths", "=", "[", "\n", "os", ".", "path", ".", "join", "(", "cfg", ".", "ROOT_DIR", ",", "self", ".", "root", ",", "all_annos", "[", "i", "]", "[", "'depth_path'", "]", ")", "\n", "if", "'depth_path'", "in", "all_annos", "[", "i", "]", "\n", "else", "None", "\n", "for", "i", "in", "range", "(", "len", "(", "all_annos", ")", ")", "\n", "]", "\n", "disp_paths", "=", "[", "\n", "os", ".", "path", ".", "join", "(", "cfg", ".", "ROOT_DIR", ",", "self", ".", "root", ",", "all_annos", "[", "i", "]", "[", "'disp_path'", "]", ")", "\n", "if", "'disp_path'", "in", "all_annos", "[", "i", "]", "\n", "else", "None", "\n", "for", "i", "in", "range", "(", "len", "(", "all_annos", ")", ")", "\n", "]", "\n", "mask_paths", "=", "[", "\n", "(", "\n", "os", ".", "path", ".", "join", "(", "cfg", ".", "ROOT_DIR", ",", "self", ".", "root", ",", "all_annos", "[", "i", "]", "[", "'mask_path'", "]", ")", "\n", "if", "all_annos", "[", "i", "]", "[", "'mask_path'", "]", "is", "not", "None", "\n", "else", "None", "\n", ")", "\n", "if", "'mask_path'", "in", "all_annos", "[", "i", "]", "\n", "else", "None", "\n", "for", "i", "in", "range", "(", "len", "(", "all_annos", ")", ")", "\n", "]", "\n", "ins_paths", "=", "[", "\n", "(", "\n", "os", ".", "path", ".", "join", "(", "cfg", ".", "ROOT_DIR", ",", "self", ".", "root", ",", "all_annos", "[", "i", "]", "[", "'ins_planes_path'", "]", ")", "\n", "if", "all_annos", "[", "i", "]", "[", "'ins_planes_path'", "]", "is", "not", "None", "\n", "else", "None", "\n", ")", "\n", "if", "'ins_planes_path'", "in", "all_annos", "[", "i", "]", "\n", "else", "None", "\n", "for", "i", "in", "range", "(", "len", "(", "all_annos", ")", ")", "\n", "]", "\n", "\n", "return", "rgb_paths", ",", "depth_paths", ",", "disp_paths", ",", "mask_paths", ",", "ins_paths", ",", "all_annos", ",", "curriculum_list", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.multi_dataset.MultiDataset.__getitem__": [[77, 83], ["multi_dataset.MultiDataset.online_aug", "multi_dataset.MultiDataset.load_test_data"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.multi_dataset.MultiDataset.online_aug", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.multi_dataset.MultiDataset.load_test_data"], ["", "def", "__getitem__", "(", "self", ",", "anno_index", ")", ":", "\n", "        ", "if", "'train'", "in", "self", ".", "opt", ".", "phase", ":", "\n", "            ", "data", "=", "self", ".", "online_aug", "(", "anno_index", ")", "\n", "", "else", ":", "\n", "            ", "data", "=", "self", ".", "load_test_data", "(", "anno_index", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.multi_dataset.MultiDataset.load_test_data": [[84, 106], ["multi_dataset.MultiDataset.load_depth", "cv2.resize", "multi_dataset.MultiDataset.scale_torch", "cv2.imread", "cv2.resize.copy", "depth.max", "mask_valid.astype"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.multi_dataset.MultiDataset.load_depth", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.multi_dataset.MultiDataset.scale_torch"], ["", "def", "load_test_data", "(", "self", ",", "anno_index", ")", ":", "\n", "        ", "\"\"\"\n        Augment data for training online randomly. The invalid parts in the depth map are set to -1.0, while the parts\n        in depth bins are set to cfg.MODEL.DECODER_OUTPUT_C + 1.\n        :param anno_index: data index.\n        \"\"\"", "\n", "rgb_path", "=", "self", ".", "rgb_paths", "[", "anno_index", "]", "\n", "depth_path", "=", "self", ".", "depth_paths", "[", "anno_index", "]", "\n", "\n", "rgb", "=", "cv2", ".", "imread", "(", "rgb_path", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# bgr, H*W*C", "\n", "depth", ",", "sky_mask", ",", "mask_valid", "=", "self", ".", "load_depth", "(", "anno_index", ",", "rgb", ")", "\n", "\n", "rgb_resize", "=", "cv2", ".", "resize", "(", "rgb", ",", "(", "cfg", ".", "DATASET", ".", "CROP_SIZE", "[", "1", "]", ",", "cfg", ".", "DATASET", ".", "CROP_SIZE", "[", "0", "]", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "# to torch, normalize", "\n", "rgb_torch", "=", "self", ".", "scale_torch", "(", "rgb_resize", ".", "copy", "(", ")", ")", "\n", "# normalize disp and depth", "\n", "depth_normal", "=", "depth", "/", "(", "depth", ".", "max", "(", ")", "+", "1e-8", ")", "\n", "depth_normal", "[", "~", "mask_valid", ".", "astype", "(", "np", ".", "bool", ")", "]", "=", "0", "\n", "\n", "data", "=", "{", "'rgb'", ":", "rgb_torch", ",", "'gt_depth'", ":", "depth_normal", "}", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.multi_dataset.MultiDataset.online_aug": [[107, 192], ["multi_dataset.MultiDataset.load_training_data", "multi_dataset.MultiDataset.rgb_aug", "multi_dataset.MultiDataset.set_flip_resize_crop_pad", "multi_dataset.MultiDataset.flip_reshape_crop_pad", "multi_dataset.MultiDataset.flip_reshape_crop_pad", "multi_dataset.MultiDataset.flip_reshape_crop_pad", "multi_dataset.MultiDataset.flip_reshape_crop_pad", "multi_dataset.MultiDataset.flip_reshape_crop_pad", "multi_dataset.MultiDataset.flip_reshape_crop_pad", "int", "multi_dataset.MultiDataset.flip_reshape_crop_pad", "multi_dataset.MultiDataset.scale_torch", "multi_dataset.MultiDataset.scale_torch", "multi_dataset.MultiDataset.scale_torch", "torch.from_numpy", "torch.tensor", "cv2.imread", "sky_mask.astype", "invalid_disp.astype", "invalid_depth.astype", "ins_planes_mask.astype", "multi_dataset.MultiDataset.copy", "numpy.array", "multi_dataset.MultiDataset.dataset_name.lower", "numpy.unique().max", "multi_dataset.MultiDataset.astype", "multi_dataset.MultiDataset.astype", "multi_dataset.MultiDataset.dataset_name.lower", "multi_dataset.MultiDataset.dataset_name.lower", "multi_dataset.MultiDataset.dataset_name.lower", "numpy.array", "numpy.array", "multi_dataset.MultiDataset.dataset_name.lower", "multi_dataset.MultiDataset.max", "multi_dataset.MultiDataset.max", "numpy.unique", "multi_dataset.MultiDataset.astype", "multi_dataset.MultiDataset.astype"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.multi_dataset.MultiDataset.load_training_data", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.multi_dataset.MultiDataset.rgb_aug", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.multi_dataset.MultiDataset.set_flip_resize_crop_pad", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.multi_dataset.MultiDataset.flip_reshape_crop_pad", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.multi_dataset.MultiDataset.flip_reshape_crop_pad", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.multi_dataset.MultiDataset.flip_reshape_crop_pad", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.multi_dataset.MultiDataset.flip_reshape_crop_pad", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.multi_dataset.MultiDataset.flip_reshape_crop_pad", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.multi_dataset.MultiDataset.flip_reshape_crop_pad", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.multi_dataset.MultiDataset.flip_reshape_crop_pad", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.multi_dataset.MultiDataset.scale_torch", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.multi_dataset.MultiDataset.scale_torch", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.multi_dataset.MultiDataset.scale_torch"], ["", "def", "online_aug", "(", "self", ",", "anno_index", ")", ":", "\n", "        ", "\"\"\"\n        Augment data for training online randomly.\n        :param anno_index: data index.\n        \"\"\"", "\n", "rgb_path", "=", "self", ".", "rgb_paths", "[", "anno_index", "]", "\n", "depth_path", "=", "self", ".", "depth_paths", "[", "anno_index", "]", "\n", "rgb", "=", "cv2", ".", "imread", "(", "rgb_path", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# rgb, H*W*C", "\n", "\n", "focal_length", "=", "self", ".", "focal_length_dict", "[", "\n", "self", ".", "dataset_name", ".", "lower", "(", ")", "]", "if", "self", ".", "dataset_name", ".", "lower", "(", ")", "in", "self", ".", "focal_length_dict", "else", "256.0", "\n", "\n", "disp", ",", "depth", ",", "invalid_disp", ",", "invalid_depth", ",", "ins_planes_mask", ",", "sky_mask", ",", "ground_mask", ",", "depth_path", "=", "self", ".", "load_training_data", "(", "anno_index", ",", "rgb", ")", "\n", "rgb_aug", "=", "self", ".", "rgb_aug", "(", "rgb", ")", "\n", "\n", "# resize rgb, depth, disp", "\n", "flip_flg", ",", "resize_size", ",", "crop_size", ",", "pad", ",", "resize_ratio", "=", "self", ".", "set_flip_resize_crop_pad", "(", "rgb_aug", ")", "\n", "\n", "rgb_resize", "=", "self", ".", "flip_reshape_crop_pad", "(", "rgb_aug", ",", "flip_flg", ",", "resize_size", ",", "crop_size", ",", "pad", ",", "0", ")", "\n", "depth_resize", "=", "self", ".", "flip_reshape_crop_pad", "(", "depth", ",", "flip_flg", ",", "resize_size", ",", "crop_size", ",", "pad", ",", "-", "1", ",", "resize_method", "=", "'nearest'", ")", "\n", "disp_resize", "=", "self", ".", "flip_reshape_crop_pad", "(", "disp", ",", "flip_flg", ",", "resize_size", ",", "crop_size", ",", "pad", ",", "-", "1", ",", "resize_method", "=", "'nearest'", ")", "\n", "\n", "# resize sky_mask, and invalid_regions", "\n", "sky_mask_resize", "=", "self", ".", "flip_reshape_crop_pad", "(", "sky_mask", ".", "astype", "(", "np", ".", "uint8", ")", ",", "\n", "flip_flg", ",", "\n", "resize_size", ",", "\n", "crop_size", ",", "\n", "pad", ",", "\n", "0", ",", "\n", "resize_method", "=", "'nearest'", ")", "\n", "invalid_disp_resize", "=", "self", ".", "flip_reshape_crop_pad", "(", "invalid_disp", ".", "astype", "(", "np", ".", "uint8", ")", ",", "\n", "flip_flg", ",", "\n", "resize_size", ",", "\n", "crop_size", ",", "\n", "pad", ",", "\n", "0", ",", "\n", "resize_method", "=", "'nearest'", ")", "\n", "invalid_depth_resize", "=", "self", ".", "flip_reshape_crop_pad", "(", "invalid_depth", ".", "astype", "(", "np", ".", "uint8", ")", ",", "\n", "flip_flg", ",", "\n", "resize_size", ",", "\n", "crop_size", ",", "\n", "pad", ",", "\n", "0", ",", "\n", "resize_method", "=", "'nearest'", ")", "\n", "# resize ins planes", "\n", "ins_planes_mask", "[", "ground_mask", "]", "=", "int", "(", "np", ".", "unique", "(", "ins_planes_mask", ")", ".", "max", "(", ")", "+", "1", ")", "\n", "ins_planes_mask_resize", "=", "self", ".", "flip_reshape_crop_pad", "(", "ins_planes_mask", ".", "astype", "(", "np", ".", "uint8", ")", ",", "\n", "flip_flg", ",", "\n", "resize_size", ",", "\n", "crop_size", ",", "\n", "pad", ",", "\n", "0", ",", "\n", "resize_method", "=", "'nearest'", ")", "\n", "\n", "# normalize disp and depth", "\n", "depth_resize", "=", "depth_resize", "/", "(", "depth_resize", ".", "max", "(", ")", "+", "1e-8", ")", "*", "10", "\n", "disp_resize", "=", "disp_resize", "/", "(", "disp_resize", ".", "max", "(", ")", "+", "1e-8", ")", "*", "10", "\n", "\n", "# invalid regions are set to -1, sky regions are set to 0 in disp and 10 in depth", "\n", "disp_resize", "[", "invalid_disp_resize", ".", "astype", "(", "np", ".", "bool", ")", "|", "(", "disp_resize", ">", "1e7", ")", "|", "(", "disp_resize", "<", "0", ")", "]", "=", "-", "1", "\n", "depth_resize", "[", "invalid_depth_resize", ".", "astype", "(", "np", ".", "bool", ")", "|", "(", "depth_resize", ">", "1e7", ")", "|", "(", "depth_resize", "<", "0", ")", "]", "=", "-", "1", "\n", "disp_resize", "[", "sky_mask_resize", ".", "astype", "(", "np", ".", "bool", ")", "]", "=", "0", "# 0", "\n", "depth_resize", "[", "sky_mask_resize", ".", "astype", "(", "np", ".", "bool", ")", "]", "=", "20", "\n", "\n", "# to torch, normalize", "\n", "rgb_torch", "=", "self", ".", "scale_torch", "(", "rgb_resize", ".", "copy", "(", ")", ")", "\n", "depth_torch", "=", "self", ".", "scale_torch", "(", "depth_resize", ")", "\n", "disp_torch", "=", "self", ".", "scale_torch", "(", "disp_resize", ")", "\n", "ins_planes", "=", "torch", ".", "from_numpy", "(", "ins_planes_mask_resize", ")", "\n", "focal_length", "=", "torch", ".", "tensor", "(", "focal_length", ")", "\n", "\n", "if", "(", "'taskonomy'", "in", "self", ".", "dataset_name", ".", "lower", "(", ")", ")", "or", "(", "'3d-ken-burns'", "in", "self", ".", "dataset_name", ".", "lower", "(", ")", ")", ":", "\n", "            ", "quality_flg", "=", "np", ".", "array", "(", "3", ")", "\n", "", "elif", "(", "'diml'", "in", "self", ".", "dataset_name", ".", "lower", "(", ")", ")", ":", "\n", "            ", "quality_flg", "=", "np", ".", "array", "(", "2", ")", "\n", "", "else", ":", "\n", "            ", "quality_flg", "=", "np", ".", "array", "(", "1", ")", "\n", "\n", "", "data", "=", "{", "'rgb'", ":", "rgb_torch", ",", "'depth'", ":", "depth_torch", ",", "'disp'", ":", "disp_torch", ",", "\n", "'A_paths'", ":", "rgb_path", ",", "'B_paths'", ":", "depth_path", ",", "'quality_flg'", ":", "quality_flg", ",", "\n", "'planes'", ":", "ins_planes", ",", "'focal_length'", ":", "focal_length", "}", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.multi_dataset.MultiDataset.rgb_aug": [[193, 208], ["imgaug.augmenters.Sequential", "imgaug.augmenters.AverageBlur", "imgaug.augmenters.MotionBlur", "imgaug.augmenters.Sequential.", "numpy.random.uniform", "numpy.array", "torchvision.ColorJitter", "PIL.Image.fromarray", "imgaug.augmenters.AverageBlur.", "imgaug.augmenters.MotionBlur.", "imgaug.augmenters.MultiplyAndAddToBrightness", "imgaug.augmenters.Grayscale", "imgaug.augmenters.JpegCompression", "numpy.array"], "methods", ["None"], ["", "def", "rgb_aug", "(", "self", ",", "rgb", ")", ":", "\n", "# data augmentation for rgb", "\n", "        ", "img_aug", "=", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.0", ",", "contrast", "=", "0.3", ",", "saturation", "=", "0.1", ",", "hue", "=", "0", ")", "(", "Image", ".", "fromarray", "(", "rgb", ")", ")", "\n", "rgb_aug_gray_compress", "=", "iaa", ".", "Sequential", "(", "[", "iaa", ".", "MultiplyAndAddToBrightness", "(", "mul", "=", "(", "0.6", ",", "1.25", ")", ",", "add", "=", "(", "-", "20", ",", "20", ")", ")", ",", "\n", "iaa", ".", "Grayscale", "(", "alpha", "=", "(", "0.0", ",", "1.0", ")", ")", ",", "\n", "iaa", ".", "JpegCompression", "(", "compression", "=", "(", "0", ",", "70", ")", ")", ",", "\n", "]", ",", "random_order", "=", "True", ")", "\n", "rgb_aug_blur1", "=", "iaa", ".", "AverageBlur", "(", "k", "=", "(", "(", "0", ",", "5", ")", ",", "(", "0", ",", "6", ")", ")", ")", "\n", "rgb_aug_blur2", "=", "iaa", ".", "MotionBlur", "(", "k", "=", "9", ",", "angle", "=", "[", "-", "45", ",", "45", "]", ")", "\n", "img_aug", "=", "rgb_aug_gray_compress", "(", "image", "=", "np", ".", "array", "(", "img_aug", ")", ")", "\n", "blur_flg", "=", "np", ".", "random", ".", "uniform", "(", "0.0", ",", "1.0", ")", "\n", "img_aug", "=", "rgb_aug_blur1", "(", "image", "=", "img_aug", ")", "if", "blur_flg", ">", "0.7", "else", "img_aug", "\n", "img_aug", "=", "rgb_aug_blur2", "(", "image", "=", "img_aug", ")", "if", "blur_flg", "<", "0.3", "else", "img_aug", "\n", "rgb_colorjitter", "=", "np", ".", "array", "(", "img_aug", ")", "\n", "return", "rgb_colorjitter", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.multi_dataset.MultiDataset.set_flip_resize_crop_pad": [[209, 241], ["numpy.random.uniform", "int", "int", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "len"], "methods", ["None"], ["", "def", "set_flip_resize_crop_pad", "(", "self", ",", "A", ")", ":", "\n", "        ", "\"\"\"\n        Set flip, padding, reshaping and cropping flags.\n        :param A: Input image, [H, W, C]\n        :return: Data augamentation parameters\n        \"\"\"", "\n", "# flip", "\n", "flip_prob", "=", "np", ".", "random", ".", "uniform", "(", "0.0", ",", "1.0", ")", "\n", "flip_flg", "=", "True", "if", "flip_prob", ">", "0.5", "and", "'train'", "in", "self", ".", "opt", ".", "phase", "else", "False", "\n", "\n", "# reshape", "\n", "ratio_list", "=", "[", "0.5", ",", "0.6", ",", "0.7", ",", "0.8", ",", "0.9", ",", "1.0", ",", "1.1", ",", "1.2", ",", "1.3", ",", "1.4", ",", "1.5", "]", "#", "\n", "if", "'train'", "in", "self", ".", "opt", ".", "phase", ":", "\n", "            ", "resize_ratio", "=", "ratio_list", "[", "np", ".", "random", ".", "randint", "(", "len", "(", "ratio_list", ")", ")", "]", "\n", "", "else", ":", "\n", "            ", "resize_ratio", "=", "0.5", "\n", "\n", "", "resize_size", "=", "[", "int", "(", "A", ".", "shape", "[", "0", "]", "*", "resize_ratio", "+", "0.5", ")", ",", "\n", "int", "(", "A", ".", "shape", "[", "1", "]", "*", "resize_ratio", "+", "0.5", ")", "]", "# [height, width]", "\n", "# crop", "\n", "start_y", "=", "0", "if", "resize_size", "[", "0", "]", "<=", "cfg", ".", "DATASET", ".", "CROP_SIZE", "[", "0", "]", "else", "np", ".", "random", ".", "randint", "(", "0", ",", "resize_size", "[", "0", "]", "-", "cfg", ".", "DATASET", ".", "CROP_SIZE", "[", "0", "]", ")", "\n", "start_x", "=", "0", "if", "resize_size", "[", "1", "]", "<=", "cfg", ".", "DATASET", ".", "CROP_SIZE", "[", "1", "]", "else", "np", ".", "random", ".", "randint", "(", "0", ",", "resize_size", "[", "1", "]", "-", "cfg", ".", "DATASET", ".", "CROP_SIZE", "[", "1", "]", ")", "\n", "crop_height", "=", "resize_size", "[", "0", "]", "if", "resize_size", "[", "0", "]", "<=", "cfg", ".", "DATASET", ".", "CROP_SIZE", "[", "0", "]", "else", "cfg", ".", "DATASET", ".", "CROP_SIZE", "[", "0", "]", "\n", "crop_width", "=", "resize_size", "[", "1", "]", "if", "resize_size", "[", "1", "]", "<=", "cfg", ".", "DATASET", ".", "CROP_SIZE", "[", "1", "]", "else", "cfg", ".", "DATASET", ".", "CROP_SIZE", "[", "1", "]", "\n", "crop_size", "=", "[", "start_x", ",", "start_y", ",", "crop_width", ",", "crop_height", "]", "if", "'train'", "in", "self", ".", "opt", ".", "phase", "else", "[", "0", ",", "0", ",", "resize_size", "[", "1", "]", ",", "resize_size", "[", "0", "]", "]", "\n", "\n", "# pad", "\n", "pad_height", "=", "0", "if", "resize_size", "[", "0", "]", ">", "cfg", ".", "DATASET", ".", "CROP_SIZE", "[", "0", "]", "else", "cfg", ".", "DATASET", ".", "CROP_SIZE", "[", "0", "]", "-", "resize_size", "[", "0", "]", "\n", "pad_width", "=", "0", "if", "resize_size", "[", "1", "]", ">", "cfg", ".", "DATASET", ".", "CROP_SIZE", "[", "1", "]", "else", "cfg", ".", "DATASET", ".", "CROP_SIZE", "[", "1", "]", "-", "resize_size", "[", "1", "]", "\n", "# [up, down, left, right]", "\n", "pad", "=", "[", "pad_height", ",", "0", ",", "pad_width", ",", "0", "]", "if", "'train'", "in", "self", ".", "opt", ".", "phase", "else", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "return", "flip_flg", ",", "resize_size", ",", "crop_size", ",", "pad", ",", "resize_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.multi_dataset.MultiDataset.flip_reshape_crop_pad": [[242, 275], ["numpy.flip", "cv2.resize", "len", "numpy.pad", "numpy.pad", "cv2.resize"], "methods", ["None"], ["", "def", "flip_reshape_crop_pad", "(", "self", ",", "img", ",", "flip", ",", "resize_size", ",", "crop_size", ",", "pad", ",", "pad_value", "=", "0", ",", "resize_method", "=", "'bilinear'", ")", ":", "\n", "        ", "\"\"\"\n        Flip, pad, reshape, and crop the image.\n        :param img: input image, [C, H, W]\n        :param flip: flip flag\n        :param crop_size: crop size for the image, [x, y, width, height]\n        :param pad: pad the image, [up, down, left, right]\n        :param pad_value: padding value\n        :return:\n        \"\"\"", "\n", "# Flip", "\n", "if", "flip", ":", "\n", "            ", "img", "=", "np", ".", "flip", "(", "img", ",", "axis", "=", "1", ")", "\n", "\n", "# Resize the raw image", "\n", "", "if", "resize_method", "==", "'bilinear'", ":", "\n", "            ", "img_resize", "=", "cv2", ".", "resize", "(", "img", ",", "(", "resize_size", "[", "1", "]", ",", "resize_size", "[", "0", "]", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "", "elif", "resize_method", "==", "'nearest'", ":", "\n", "            ", "img_resize", "=", "cv2", ".", "resize", "(", "img", ",", "(", "resize_size", "[", "1", "]", ",", "resize_size", "[", "0", "]", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "\n", "\n", "# Crop the resized image", "\n", "", "img_crop", "=", "img_resize", "[", "crop_size", "[", "1", "]", ":", "crop_size", "[", "1", "]", "+", "crop_size", "[", "3", "]", ",", "crop_size", "[", "0", "]", ":", "crop_size", "[", "0", "]", "+", "crop_size", "[", "2", "]", "]", "\n", "\n", "# Pad the raw image", "\n", "if", "len", "(", "img", ".", "shape", ")", "==", "3", ":", "\n", "            ", "img_pad", "=", "np", ".", "pad", "(", "img_crop", ",", "(", "(", "pad", "[", "0", "]", ",", "pad", "[", "1", "]", ")", ",", "(", "pad", "[", "2", "]", ",", "pad", "[", "3", "]", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'constant'", ",", "\n", "constant_values", "=", "(", "pad_value", ",", "pad_value", ")", ")", "\n", "", "else", ":", "\n", "            ", "img_pad", "=", "np", ".", "pad", "(", "img_crop", ",", "(", "(", "pad", "[", "0", "]", ",", "pad", "[", "1", "]", ")", ",", "(", "pad", "[", "2", "]", ",", "pad", "[", "3", "]", ")", ")", ",", "'constant'", ",", "\n", "constant_values", "=", "(", "pad_value", ",", "pad_value", ")", ")", "\n", "", "return", "img_pad", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.multi_dataset.MultiDataset.depth_to_bins": [[276, 291], ["torch.log10"], "methods", ["None"], ["", "def", "depth_to_bins", "(", "self", ",", "depth", ")", ":", "\n", "        ", "\"\"\"\n        Discretize depth into depth bins\n        Mark invalid padding area as cfg.MODEL.DECODER_OUTPUT_C + 1\n        :param depth: 1-channel depth, [1, h, w]\n        :return: depth bins [1, h, w]\n        \"\"\"", "\n", "invalid_mask", "=", "depth", "<", "1e-8", "\n", "depth", "[", "depth", "<", "cfg", ".", "DATASET", ".", "DEPTH_MIN", "]", "=", "cfg", ".", "DATASET", ".", "DEPTH_MIN", "\n", "depth", "[", "depth", ">", "cfg", ".", "DATASET", ".", "DEPTH_MAX", "]", "=", "cfg", ".", "DATASET", ".", "DEPTH_MAX", "\n", "bins", "=", "(", "(", "torch", ".", "log10", "(", "depth", ")", "-", "cfg", ".", "DATASET", ".", "DEPTH_MIN_LOG", ")", "/", "cfg", ".", "DATASET", ".", "DEPTH_BIN_INTERVAL", ")", ".", "to", "(", "torch", ".", "int", ")", "\n", "bins", "[", "invalid_mask", "]", "=", "cfg", ".", "MODEL", ".", "DECODER_OUTPUT_C", "+", "1", "\n", "bins", "[", "bins", "==", "cfg", ".", "MODEL", ".", "DECODER_OUTPUT_C", "]", "=", "cfg", ".", "MODEL", ".", "DECODER_OUTPUT_C", "-", "1", "\n", "depth", "[", "invalid_mask", "]", "=", "-", "1.0", "\n", "return", "bins", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.multi_dataset.MultiDataset.scale_torch": [[292, 309], ["len", "torchvision.Compose", "torchvision.Compose.", "torch.from_numpy.astype", "torch.from_numpy", "torchvision.ToTensor", "torchvision.Normalize"], "methods", ["None"], ["", "def", "scale_torch", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Scale the image and output it in torch.tensor.\n        :param img: input rgb is in shape [H, W, C], input depth/disp is in shape [H, W]\n        :param scale: the scale factor. float\n        :return: img. [C, H, W]\n        \"\"\"", "\n", "if", "len", "(", "img", ".", "shape", ")", "==", "2", ":", "\n", "            ", "img", "=", "img", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", "\n", "", "if", "img", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "            ", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "cfg", ".", "DATASET", ".", "RGB_PIXEL_MEANS", ",", "cfg", ".", "DATASET", ".", "RGB_PIXEL_VARS", ")", "]", ")", "\n", "img", "=", "transform", "(", "img", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.multi_dataset.MultiDataset.load_depth": [[310, 331], ["cv2.imread", "multi_dataset.MultiDataset.preprocess_depth", "cv2.imread().astype", "numpy.zeros", "len", "len", "cv2.imread"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.multi_dataset.MultiDataset.preprocess_depth"], ["", "def", "load_depth", "(", "self", ",", "anno_index", ",", "rgb", ")", ":", "\n", "        ", "\"\"\"\n        Load disparity, depth, and mask maps\n        :return\n            disp: disparity map,  np.float\n            depth: depth map, np.float\n            sem_mask: semantic masks, including sky, road, np.uint8\n            ins_mask: plane instance masks, np.uint8\n        \"\"\"", "\n", "# load depth", "\n", "depth", "=", "cv2", ".", "imread", "(", "self", ".", "depth_paths", "[", "anno_index", "]", ",", "-", "1", ")", "\n", "depth", ",", "mask_valid", "=", "self", ".", "preprocess_depth", "(", "depth", ",", "self", ".", "depth_paths", "[", "anno_index", "]", ")", "\n", "\n", "# load semantic mask, such as road, sky", "\n", "if", "len", "(", "self", ".", "rgb_paths", ")", "==", "len", "(", "self", ".", "sem_masks", ")", "and", "self", ".", "sem_masks", "[", "anno_index", "]", "is", "not", "None", ":", "\n", "            ", "sem_mask", "=", "cv2", ".", "imread", "(", "self", ".", "sem_masks", "[", "anno_index", "]", ",", "-", "1", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "            ", "sem_mask", "=", "np", ".", "zeros", "(", "depth", ".", "shape", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "sky_mask", "=", "sem_mask", "==", "17", "\n", "\n", "return", "depth", ",", "sky_mask", ",", "mask_valid", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.multi_dataset.MultiDataset.load_training_data": [[332, 389], ["cv2.imread", "cv2.imread", "cv2.imread().astype", "numpy.zeros", "cv2.imread().astype", "numpy.zeros", "cv2.imread", "len", "len", "len", "len", "cv2.imread", "multi_dataset.MultiDataset.loading_check().astype", "numpy.full", "numpy.full", "cv2.imread", "cv2.imread", "numpy.full.max", "numpy.full.max", "multi_dataset.MultiDataset.loading_check", "numpy.full.max", "numpy.full.max"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.multi_dataset.MultiDataset.loading_check"], ["", "def", "load_training_data", "(", "self", ",", "anno_index", ",", "rgb", ")", ":", "\n", "        ", "\"\"\"\n        Load disparity, depth, and mask maps\n        :return\n            disp: disparity map,  np.float\n            depth: depth map, np.float\n            sem_mask: semantic masks, including sky, road, np.uint8\n            ins_mask: plane instance masks, np.uint8\n        \"\"\"", "\n", "# load depth, rgb, disp", "\n", "if", "(", "self", ".", "depth_paths", "[", "anno_index", "]", "!=", "None", ")", "and", "(", "self", ".", "disp_paths", "[", "anno_index", "]", "!=", "None", ")", ":", "\n", "# dataset has both depth and disp", "\n", "            ", "disp", "=", "cv2", ".", "imread", "(", "self", ".", "disp_paths", "[", "anno_index", "]", ",", "-", "1", ")", "\n", "disp", "=", "(", "disp", "/", "disp", ".", "max", "(", ")", "*", "60000", ")", ".", "astype", "(", "np", ".", "uint16", ")", "\n", "depth", "=", "cv2", ".", "imread", "(", "self", ".", "depth_paths", "[", "anno_index", "]", ",", "-", "1", ")", "\n", "depth", "=", "(", "depth", "/", "depth", ".", "max", "(", ")", "*", "60000", ")", ".", "astype", "(", "np", ".", "uint16", ")", "\n", "depth_path", "=", "self", ".", "depth_paths", "[", "anno_index", "]", "\n", "", "elif", "self", ".", "disp_paths", "[", "anno_index", "]", "!=", "None", ":", "\n", "# dataset only has disparity", "\n", "            ", "disp", "=", "cv2", ".", "imread", "(", "self", ".", "disp_paths", "[", "anno_index", "]", ",", "-", "1", ")", "\n", "disp_mask", "=", "disp", "<", "1e-8", "\n", "depth", "=", "1", "/", "(", "disp", "+", "1e-8", ")", "\n", "depth", "[", "disp_mask", "]", "=", "0", "\n", "depth", "=", "(", "depth", "/", "depth", ".", "max", "(", ")", "*", "60000", ")", ".", "astype", "(", "np", ".", "uint16", ")", "\n", "depth_path", "=", "self", ".", "disp_paths", "[", "anno_index", "]", "\n", "", "elif", "self", ".", "depth_paths", "[", "anno_index", "]", "!=", "None", ":", "\n", "# dataset only has depth", "\n", "            ", "depth_path", "=", "self", ".", "depth_paths", "[", "anno_index", "]", "\n", "depth", "=", "cv2", ".", "imread", "(", "self", ".", "depth_paths", "[", "anno_index", "]", ",", "-", "1", ")", "\n", "depth", "=", "(", "self", ".", "loading_check", "(", "depth", ",", "depth_path", ")", ")", ".", "astype", "(", "np", ".", "uint16", ")", "\n", "depth_mask", "=", "depth", "<", "1e-8", "\n", "disp", "=", "1", "/", "(", "depth", "+", "1e-8", ")", "\n", "disp", "[", "depth_mask", "]", "=", "0", "\n", "disp", "=", "(", "disp", "/", "disp", ".", "max", "(", ")", "*", "60000", ")", ".", "astype", "(", "np", ".", "uint16", ")", "\n", "", "else", ":", "\n", "            ", "depth", "=", "np", ".", "full", "(", "(", "rgb", ".", "shape", "[", "0", "]", ",", "rgb", ".", "shape", "[", "1", "]", ")", ",", "0", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "disp", "=", "np", ".", "full", "(", "(", "rgb", ".", "shape", "[", "0", "]", ",", "rgb", ".", "shape", "[", "1", "]", ")", ",", "0", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "depth_path", "=", "'None'", "\n", "\n", "# load semantic mask, such as road, sky", "\n", "", "if", "len", "(", "self", ".", "rgb_paths", ")", "==", "len", "(", "self", ".", "sem_masks", ")", "and", "self", ".", "sem_masks", "[", "anno_index", "]", "is", "not", "None", ":", "\n", "            ", "sem_mask", "=", "cv2", ".", "imread", "(", "self", ".", "sem_masks", "[", "anno_index", "]", ",", "-", "1", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "            ", "sem_mask", "=", "np", ".", "zeros", "(", "disp", ".", "shape", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "# load planes mask", "\n", "", "if", "len", "(", "self", ".", "rgb_paths", ")", "==", "len", "(", "self", ".", "ins_paths", ")", "and", "self", ".", "ins_paths", "[", "anno_index", "]", "is", "not", "None", ":", "\n", "            ", "ins_planes_mask", "=", "cv2", ".", "imread", "(", "self", ".", "ins_paths", "[", "anno_index", "]", ",", "-", "1", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "            ", "ins_planes_mask", "=", "np", ".", "zeros", "(", "disp", ".", "shape", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "", "sky_mask", "=", "sem_mask", "==", "17", "\n", "road_mask", "=", "sem_mask", "==", "49", "\n", "\n", "invalid_disp", "=", "disp", "<", "1e-8", "\n", "invalid_depth", "=", "depth", "<", "1e-8", "\n", "return", "disp", ",", "depth", ",", "invalid_disp", ",", "invalid_depth", ",", "ins_planes_mask", ",", "sky_mask", ",", "road_mask", ",", "depth_path", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.multi_dataset.MultiDataset.preprocess_depth": [[392, 405], ["img_path.lower", "img_path.lower", "depth.max"], "methods", ["None"], ["", "def", "preprocess_depth", "(", "self", ",", "depth", ",", "img_path", ")", ":", "\n", "        ", "if", "'diml'", "in", "img_path", ".", "lower", "(", ")", ":", "\n", "            ", "drange", "=", "65535.0", "\n", "", "elif", "'taskonomy'", "in", "img_path", ".", "lower", "(", ")", ":", "\n", "            ", "depth", "[", "depth", ">", "23000", "]", "=", "0", "\n", "drange", "=", "23000.0", "\n", "", "else", ":", "\n", "#depth_filter1 = depth[depth > 1e-8]", "\n", "#drange = (depth_filter1.max() - depth_filter1.min())", "\n", "            ", "drange", "=", "depth", ".", "max", "(", ")", "\n", "", "depth_norm", "=", "depth", "/", "drange", "\n", "mask_valid", "=", "(", "depth_norm", ">", "1e-8", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "return", "depth_norm", ",", "mask_valid", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.multi_dataset.MultiDataset.loading_check": [[406, 414], ["None"], "methods", ["None"], ["", "def", "loading_check", "(", "self", ",", "depth", ",", "depth_path", ")", ":", "\n", "        ", "if", "'taskonomy'", "in", "depth_path", ":", "\n", "# invalid regions in taskonomy are set to 65535 originally", "\n", "            ", "depth", "[", "depth", ">=", "28000", "]", "=", "0", "\n", "", "if", "'3d-ken-burns'", "in", "depth_path", ":", "\n", "# maybe sky regions", "\n", "            ", "depth", "[", "depth", ">=", "47000", "]", "=", "0", "\n", "", "return", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.data.multi_dataset.MultiDataset.__len__": [[415, 417], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data_size", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.multi_depth_model_woauxi.RelDepthModel.__init__": [[8, 15], ["torch.Module.__init__", "multi_depth_model_woauxi.DepthModel"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "backbone", "=", "'resnet50'", ")", ":", "\n", "        ", "super", "(", "RelDepthModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "backbone", "==", "'resnet50'", ":", "\n", "            ", "encoder", "=", "'resnet50_stride32'", "\n", "", "elif", "backbone", "==", "'resnext101'", ":", "\n", "            ", "encoder", "=", "'resnext101_stride32x8d'", "\n", "", "self", ".", "depth_model", "=", "DepthModel", "(", "encoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.multi_depth_model_woauxi.RelDepthModel.inference": [[16, 22], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "rgb.cuda", "multi_depth_model_woauxi.RelDepthModel.depth_model", "multi_depth_model_woauxi.RelDepthModel.min"], "methods", ["None"], ["", "def", "inference", "(", "self", ",", "rgb", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "input", "=", "rgb", ".", "cuda", "(", ")", "\n", "depth", "=", "self", ".", "depth_model", "(", "input", ")", "\n", "pred_depth_out", "=", "depth", "-", "depth", ".", "min", "(", ")", "+", "0.01", "\n", "return", "pred_depth_out", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.multi_depth_model_woauxi.DepthModel.__init__": [[25, 30], ["torch.Module.__init__", "lib.network_auxi.Decoder", "lib.net_tools.get_func", "lib.network_auxi.__name__.split"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.net_tools.get_func"], ["    ", "def", "__init__", "(", "self", ",", "encoder", ")", ":", "\n", "        ", "super", "(", "DepthModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "backbone", "=", "network", ".", "__name__", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "+", "'.'", "+", "encoder", "\n", "self", ".", "encoder_modules", "=", "get_func", "(", "backbone", ")", "(", ")", "\n", "self", ".", "decoder_modules", "=", "network", ".", "Decoder", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.multi_depth_model_woauxi.DepthModel.forward": [[31, 35], ["multi_depth_model_woauxi.DepthModel.encoder_modules", "multi_depth_model_woauxi.DepthModel.decoder_modules"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "lateral_out", "=", "self", ".", "encoder_modules", "(", "x", ")", "\n", "out_logit", "=", "self", ".", "decoder_modules", "(", "lateral_out", ")", "\n", "return", "out_logit", "", "", "", ""]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnext_torch.BasicBlock.__init__": [[33, 50], ["torch.Module.__init__", "Resnext_torch.conv3x3", "norm_layer", "torch.ReLU", "Resnext_torch.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.conv3x3", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.conv3x3"], ["    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n", "\n", "", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n", "\n", "", "class", "BasicBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "1", "\n", "\n", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnext_torch.BasicBlock.forward": [[51, 68], ["Resnext_torch.BasicBlock.conv1", "Resnext_torch.BasicBlock.bn1", "Resnext_torch.BasicBlock.relu", "Resnext_torch.BasicBlock.conv2", "Resnext_torch.BasicBlock.bn2", "Resnext_torch.BasicBlock.relu", "Resnext_torch.BasicBlock.downsample"], "methods", ["None"], ["", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnext_torch.Bottleneck.__init__": [[79, 95], ["torch.Module.__init__", "Resnext_torch.conv1x1", "norm_layer", "Resnext_torch.conv3x3", "norm_layer", "Resnext_torch.conv1x1", "norm_layer", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnext_torch.conv1x1", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.conv3x3", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnext_torch.conv1x1"], ["\n", "return", "out", "\n", "\n", "\n", "", "", "class", "Bottleneck", "(", "nn", ".", "Module", ")", ":", "\n", "# Bottleneck in torchvision places the stride for downsampling at 3x3 convolution(self.conv2)", "\n", "# while original implementation places the stride at the first 1x1 convolution(self.conv1)", "\n", "# according to \"Deep residual learning for image recognition\"https://arxiv.org/abs/1512.03385.", "\n", "# This variant is also known as ResNet V1.5 and improves accuracy according to", "\n", "# https://ngc.nvidia.com/catalog/model-scripts/nvidia:resnet_50_v1_5_for_pytorch.", "\n", "\n", "    ", "expansion", "=", "4", "\n", "\n", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnext_torch.Bottleneck.forward": [[96, 117], ["Resnext_torch.Bottleneck.conv1", "Resnext_torch.Bottleneck.bn1", "Resnext_torch.Bottleneck.relu", "Resnext_torch.Bottleneck.conv2", "Resnext_torch.Bottleneck.bn2", "Resnext_torch.Bottleneck.relu", "Resnext_torch.Bottleneck.conv3", "Resnext_torch.Bottleneck.bn3", "Resnext_torch.Bottleneck.relu", "Resnext_torch.Bottleneck.downsample"], "methods", ["None"], ["            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnext_torch.ResNet.__init__": [[121, 171], ["torch.Module.__init__", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.MaxPool2d", "Resnext_torch.ResNet._make_layer", "Resnext_torch.ResNet._make_layer", "Resnext_torch.ResNet._make_layer", "Resnext_torch.ResNet._make_layer", "Resnext_torch.ResNet.modules", "len", "ValueError", "isinstance", "Resnext_torch.ResNet.modules", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet._make_layer"], ["out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "ResNet", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "#self.avgpool = nn.AdaptiveAvgPool2d((1, 1))", "\n", "#self.fc = nn.Linear(512 * block.expansion, num_classes)", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnext_torch.ResNet._make_layer": [[172, 195], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "Resnext_torch.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnext_torch.conv1x1"], ["                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n", "", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnext_torch.ResNet._forward_impl": [[196, 221], ["Resnext_torch.ResNet.conv1", "Resnext_torch.ResNet.bn1", "Resnext_torch.ResNet.relu", "Resnext_torch.ResNet.maxpool", "Resnext_torch.ResNet.layer1", "features.append", "Resnext_torch.ResNet.layer2", "features.append", "Resnext_torch.ResNet.layer3", "features.append", "Resnext_torch.ResNet.layer4", "features.append"], "methods", ["None"], [")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "_forward_impl", "(", "self", ",", "x", ")", ":", "\n", "# See note [TorchScript super()]", "\n", "        ", "features", "=", "[", "]", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "features", ".", "append", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "features", ".", "append", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnext_torch.ResNet.forward": [[222, 224], ["Resnext_torch.ResNet._forward_impl"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnext_torch.ResNet._forward_impl"], ["\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "features", ".", "append", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnext_torch.conv3x3": [[19, 23], ["torch.Conv2d"], "function", ["None"], ["", "except", "ImportError", ":", "\n", "    ", "from", "urllib", ".", "request", "import", "urlretrieve", "\n", "\n", "", "__all__", "=", "[", "'resnext101_32x8d'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnext_torch.conv1x1": [[25, 28], ["torch.Conv2d"], "function", ["None"], ["model_urls", "=", "{", "\n", "'resnext50_32x4d'", ":", "'https://download.pytorch.org/models/resnext50_32x4d-7cdf4587.pth'", ",", "\n", "'resnext101_32x8d'", ":", "'https://download.pytorch.org/models/resnext101_32x8d-8ba56ff5.pth'", ",", "\n", "#'resnext101': 'http://sceneparsing.csail.mit.edu/model/pretrained_resnet/resnext101-imagenet.pth'", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnext_torch.resnext101_32x8d": [[227, 237], ["Resnext_torch.ResNet"], "function", ["None"], ["features", ".", "append", "(", "x", ")", "\n", "\n", "#x = self.avgpool(x)", "\n", "#x = torch.flatten(x, 1)", "\n", "#x = self.fc(x)", "\n", "\n", "return", "features", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.spvcnn_classsification.BasicConvolutionBlock.__init__": [[11, 21], ["torch.Module.__init__", "torch.Sequential", "torchsparse.Conv3d", "torchsparse.BatchNorm", "torchsparse.ReLU"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inc", ",", "outc", ",", "ks", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "spnn", ".", "Conv3d", "(", "inc", ",", "\n", "outc", ",", "\n", "kernel_size", "=", "ks", ",", "\n", "dilation", "=", "dilation", ",", "\n", "stride", "=", "stride", ")", ",", "\n", "spnn", ".", "BatchNorm", "(", "outc", ")", ",", "\n", "spnn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.spvcnn_classsification.BasicConvolutionBlock.forward": [[22, 25], ["spvcnn_classsification.BasicConvolutionBlock.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "net", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.spvcnn_classsification.BasicDeconvolutionBlock.__init__": [[28, 38], ["torch.Module.__init__", "torch.Sequential", "torchsparse.Conv3d", "torchsparse.BatchNorm", "torchsparse.ReLU"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inc", ",", "outc", ",", "ks", "=", "3", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "spnn", ".", "Conv3d", "(", "inc", ",", "\n", "outc", ",", "\n", "kernel_size", "=", "ks", ",", "\n", "stride", "=", "stride", ",", "\n", "transpose", "=", "True", ")", ",", "\n", "spnn", ".", "BatchNorm", "(", "outc", ")", ",", "\n", "spnn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.spvcnn_classsification.BasicDeconvolutionBlock.forward": [[39, 41], ["spvcnn_classsification.BasicDeconvolutionBlock.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.spvcnn_classsification.ResidualBlock.__init__": [[44, 68], ["torch.Module.__init__", "torch.Sequential", "torchsparse.ReLU", "torchsparse.Conv3d", "torchsparse.BatchNorm", "torchsparse.ReLU", "torchsparse.Conv3d", "torchsparse.BatchNorm", "torch.Sequential", "torch.Sequential", "torchsparse.Conv3d", "torchsparse.BatchNorm"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inc", ",", "outc", ",", "ks", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "spnn", ".", "Conv3d", "(", "inc", ",", "\n", "outc", ",", "\n", "kernel_size", "=", "ks", ",", "\n", "dilation", "=", "dilation", ",", "\n", "stride", "=", "stride", ")", ",", "spnn", ".", "BatchNorm", "(", "outc", ")", ",", "\n", "spnn", ".", "ReLU", "(", "True", ")", ",", "\n", "spnn", ".", "Conv3d", "(", "outc", ",", "\n", "outc", ",", "\n", "kernel_size", "=", "ks", ",", "\n", "dilation", "=", "dilation", ",", "\n", "stride", "=", "1", ")", ",", "\n", "spnn", ".", "BatchNorm", "(", "outc", ")", "\n", ")", "\n", "\n", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", ")", "if", "(", "inc", "==", "outc", "and", "stride", "==", "1", ")", "else", "nn", ".", "Sequential", "(", "\n", "spnn", ".", "Conv3d", "(", "inc", ",", "outc", ",", "kernel_size", "=", "1", ",", "dilation", "=", "1", ",", "stride", "=", "stride", ")", ",", "\n", "spnn", ".", "BatchNorm", "(", "outc", ")", "\n", ")", "\n", "\n", "self", ".", "relu", "=", "spnn", ".", "ReLU", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.spvcnn_classsification.ResidualBlock.forward": [[69, 72], ["spvcnn_classsification.ResidualBlock.relu", "spvcnn_classsification.ResidualBlock.net", "spvcnn_classsification.ResidualBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "relu", "(", "self", ".", "net", "(", "x", ")", "+", "self", ".", "downsample", "(", "x", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.spvcnn_classsification.SPVCNN_CLASSIFICATION.__init__": [[75, 129], ["torch.Module.__init__", "kwargs.get", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torchsparse.GlobalAveragePooling", "torch.Sequential", "torch.ModuleList", "spvcnn_classsification.SPVCNN_CLASSIFICATION.weight_initialization", "torch.Dropout", "int", "torchsparse.Conv3d", "torchsparse.BatchNorm", "torchsparse.ReLU", "torchsparse.Conv3d", "torchsparse.BatchNorm", "torchsparse.ReLU", "spvcnn_classsification.BasicConvolutionBlock", "spvcnn_classsification.ResidualBlock", "spvcnn_classsification.ResidualBlock", "spvcnn_classsification.BasicConvolutionBlock", "spvcnn_classsification.ResidualBlock", "spvcnn_classsification.ResidualBlock", "spvcnn_classsification.BasicConvolutionBlock", "spvcnn_classsification.ResidualBlock", "spvcnn_classsification.ResidualBlock", "spvcnn_classsification.BasicConvolutionBlock", "spvcnn_classsification.ResidualBlock", "spvcnn_classsification.ResidualBlock", "torch.Linear", "torch.Sequential", "torch.Linear", "torch.BatchNorm1d", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.spvcnn_classsification.SPVCNN_CLASSIFICATION.weight_initialization"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "cr", "=", "kwargs", ".", "get", "(", "'cr'", ",", "1.0", ")", "\n", "cs", "=", "[", "32", ",", "32", ",", "64", ",", "128", ",", "256", ",", "256", ",", "128", ",", "96", ",", "96", "]", "\n", "cs", "=", "[", "int", "(", "cr", "*", "x", ")", "for", "x", "in", "cs", "]", "\n", "\n", "if", "'pres'", "in", "kwargs", "and", "'vres'", "in", "kwargs", ":", "\n", "            ", "self", ".", "pres", "=", "kwargs", "[", "'pres'", "]", "\n", "self", ".", "vres", "=", "kwargs", "[", "'vres'", "]", "\n", "\n", "", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "spnn", ".", "Conv3d", "(", "kwargs", "[", "'input_channel'", "]", ",", "cs", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", ",", "\n", "spnn", ".", "BatchNorm", "(", "cs", "[", "0", "]", ")", ",", "\n", "spnn", ".", "ReLU", "(", "True", ")", ",", "\n", "spnn", ".", "Conv3d", "(", "cs", "[", "0", "]", ",", "cs", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", ",", "\n", "spnn", ".", "BatchNorm", "(", "cs", "[", "0", "]", ")", ",", "\n", "spnn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "self", ".", "stage1", "=", "nn", ".", "Sequential", "(", "\n", "BasicConvolutionBlock", "(", "cs", "[", "0", "]", ",", "cs", "[", "0", "]", ",", "ks", "=", "2", ",", "stride", "=", "2", ",", "dilation", "=", "1", ")", ",", "\n", "ResidualBlock", "(", "cs", "[", "0", "]", ",", "cs", "[", "1", "]", ",", "ks", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "ResidualBlock", "(", "cs", "[", "1", "]", ",", "cs", "[", "1", "]", ",", "ks", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "stage2", "=", "nn", ".", "Sequential", "(", "\n", "BasicConvolutionBlock", "(", "cs", "[", "1", "]", ",", "cs", "[", "1", "]", ",", "ks", "=", "2", ",", "stride", "=", "2", ",", "dilation", "=", "1", ")", ",", "\n", "ResidualBlock", "(", "cs", "[", "1", "]", ",", "cs", "[", "2", "]", ",", "ks", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "ResidualBlock", "(", "cs", "[", "2", "]", ",", "cs", "[", "2", "]", ",", "ks", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "stage3", "=", "nn", ".", "Sequential", "(", "\n", "BasicConvolutionBlock", "(", "cs", "[", "2", "]", ",", "cs", "[", "2", "]", ",", "ks", "=", "2", ",", "stride", "=", "2", ",", "dilation", "=", "1", ")", ",", "\n", "ResidualBlock", "(", "cs", "[", "2", "]", ",", "cs", "[", "3", "]", ",", "ks", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "ResidualBlock", "(", "cs", "[", "3", "]", ",", "cs", "[", "3", "]", ",", "ks", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "stage4", "=", "nn", ".", "Sequential", "(", "\n", "BasicConvolutionBlock", "(", "cs", "[", "3", "]", ",", "cs", "[", "3", "]", ",", "ks", "=", "2", ",", "stride", "=", "2", ",", "dilation", "=", "1", ")", ",", "\n", "ResidualBlock", "(", "cs", "[", "3", "]", ",", "cs", "[", "4", "]", ",", "ks", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "ResidualBlock", "(", "cs", "[", "4", "]", ",", "cs", "[", "4", "]", ",", "ks", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", ")", "\n", "self", ".", "avg_pool", "=", "spnn", ".", "GlobalAveragePooling", "(", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "cs", "[", "4", "]", ",", "kwargs", "[", "'num_classes'", "]", ")", ")", "\n", "self", ".", "point_transforms", "=", "nn", ".", "ModuleList", "(", "[", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "cs", "[", "0", "]", ",", "cs", "[", "4", "]", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "cs", "[", "4", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", ",", "\n", "]", ")", "\n", "\n", "self", ".", "weight_initialization", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0.3", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.spvcnn_classsification.SPVCNN_CLASSIFICATION.weight_initialization": [[130, 135], ["spvcnn_classsification.SPVCNN_CLASSIFICATION.modules", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "weight_initialization", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.spvcnn_classsification.SPVCNN_CLASSIFICATION.forward": [[136, 159], ["torchsparse.point_tensor.PointTensor", "initial_voxelize", "spvcnn_classsification.SPVCNN_CLASSIFICATION.stem", "voxel_to_point", "point_to_voxel", "spvcnn_classsification.SPVCNN_CLASSIFICATION.stage1", "spvcnn_classsification.SPVCNN_CLASSIFICATION.stage2", "spvcnn_classsification.SPVCNN_CLASSIFICATION.stage3", "spvcnn_classsification.SPVCNN_CLASSIFICATION.stage4", "voxel_to_point", "point_to_voxel", "spvcnn_classsification.SPVCNN_CLASSIFICATION.avg_pool", "spvcnn_classsification.SPVCNN_CLASSIFICATION.classifier", "x.C.float"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.spvcnn_utils.initial_voxelize", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.spvcnn_utils.voxel_to_point", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.spvcnn_utils.point_to_voxel", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.spvcnn_utils.voxel_to_point", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.spvcnn_utils.point_to_voxel"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# x: SparseTensor z: PointTensor", "\n", "        ", "z", "=", "PointTensor", "(", "x", ".", "F", ",", "x", ".", "C", ".", "float", "(", ")", ")", "\n", "\n", "x0", "=", "initial_voxelize", "(", "z", ",", "self", ".", "pres", ",", "self", ".", "vres", ")", "\n", "\n", "x0", "=", "self", ".", "stem", "(", "x0", ")", "\n", "z0", "=", "voxel_to_point", "(", "x0", ",", "z", ",", "nearest", "=", "False", ")", "\n", "z0", ".", "F", "=", "z0", ".", "F", "\n", "\n", "x1", "=", "point_to_voxel", "(", "x0", ",", "z0", ")", "\n", "x1", "=", "self", ".", "stage1", "(", "x1", ")", "\n", "x2", "=", "self", ".", "stage2", "(", "x1", ")", "\n", "x3", "=", "self", ".", "stage3", "(", "x2", ")", "\n", "x4", "=", "self", ".", "stage4", "(", "x3", ")", "\n", "z1", "=", "voxel_to_point", "(", "x4", ",", "z0", ")", "\n", "z1", ".", "F", "=", "z1", ".", "F", "+", "self", ".", "point_transforms", "[", "0", "]", "(", "z0", ".", "F", ")", "\n", "y1", "=", "point_to_voxel", "(", "x4", ",", "z1", ")", "\n", "pool", "=", "self", ".", "avg_pool", "(", "y1", ")", "\n", "out", "=", "self", ".", "classifier", "(", "pool", ")", "\n", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.network_auxi.Decoder.__init__": [[16, 33], ["torch.Module.__init__", "network_auxi.FTB", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "network_auxi.FFM", "network_auxi.FFM", "network_auxi.FFM", "network_auxi.AO", "network_auxi.Decoder._init_params"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.network_auxi.Decoder._init_params"], ["def", "resnet18_stride32", "(", ")", ":", "\n", "    ", "return", "DepthNet", "(", "backbone", "=", "'resnet'", ",", "depth", "=", "18", ",", "upfactors", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "", "def", "resnet34_stride32", "(", ")", ":", "\n", "    ", "return", "DepthNet", "(", "backbone", "=", "'resnet'", ",", "depth", "=", "34", ",", "upfactors", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "", "def", "resnet50_stride32", "(", ")", ":", "\n", "    ", "return", "DepthNet", "(", "backbone", "=", "'resnet'", ",", "depth", "=", "50", ",", "upfactors", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "", "def", "resnet101_stride32", "(", ")", ":", "\n", "    ", "return", "DepthNet", "(", "backbone", "=", "'resnet'", ",", "depth", "=", "101", ",", "upfactors", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "", "def", "resnet152_stride32", "(", ")", ":", "\n", "    ", "return", "DepthNet", "(", "backbone", "=", "'resnet'", ",", "depth", "=", "152", ",", "upfactors", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n", "", "def", "resnext101_stride32x8d", "(", ")", ":", "\n", "    ", "return", "DepthNet", "(", "backbone", "=", "'resnext101_32x8d'", ",", "depth", "=", "101", ",", "upfactors", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n", "", "def", "mobilenetv2", "(", ")", ":", "\n", "    ", "return", "DepthNet", "(", "backbone", "=", "'mobilenetv2'", ",", "depth", "=", "00", ",", "upfactors", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n", "", "class", "AuxiBlock", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.network_auxi.Decoder._init_params": [[34, 51], ["network_auxi.Decoder.modules", "isinstance", "torch.normal_", "torch.normal_", "torch.normal_", "isinstance", "torch.constant_", "torch.constant_", "torch.constant_", "torch.normal_", "torch.normal_", "torch.normal_", "isinstance", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "isinstance", "torch.normal_", "torch.normal_", "torch.normal_", "torch.constant_", "torch.constant_", "torch.constant_"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dim_in", ",", "dim_out", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim_in", "=", "dim_in", "\n", "self", ".", "dim_out", "=", "dim_out", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "self", ".", "dim_in", ",", "self", ".", "dim_out", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "self", ".", "dim_out", ",", "self", ".", "dim_out", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "dim_out", ",", "momentum", "=", "0.5", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "dim_out", ",", "momentum", "=", "0.5", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "def", "forward", "(", "self", ",", "top", ",", "lateral", ")", ":", "\n", "        ", "if", "lateral", ".", "shape", "[", "2", "]", "!=", "top", ".", "shape", "[", "2", "]", ":", "\n", "            ", "h", ",", "w", "=", "lateral", ".", "size", "(", "2", ")", ",", "lateral", ".", "size", "(", "3", ")", "\n", "top", "=", "F", ".", "interpolate", "(", "input", "=", "top", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "", "out", "=", "torch", ".", "cat", "(", "(", "lateral", ",", "top", ")", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.network_auxi.Decoder.forward": [[52, 63], ["network_auxi.Decoder.conv", "network_auxi.Decoder.conv1", "network_auxi.Decoder.upsample", "network_auxi.Decoder.ffm2", "network_auxi.Decoder.ffm1", "network_auxi.Decoder.ffm0", "network_auxi.Decoder.outconv"], "methods", ["None"], ["", "", "class", "AuxiNetV2", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inchannels", "=", "cfg", ".", "MODEL", ".", "RESNET_BOTTLENECK_DIM", "[", "1", ":", "]", "# [256, 512, 1024, 2048]", "\n", "self", ".", "midchannels", "=", "cfg", ".", "MODEL", ".", "LATERAL_OUT", "[", ":", ":", "-", "1", "]", "# [256, 256, 256, 512]", "\n", "\n", "self", ".", "auxi_block1", "=", "AuxiBlock", "(", "self", ".", "midchannels", "[", "2", "]", "+", "self", ".", "midchannels", "[", "3", "]", ",", "128", ")", "\n", "self", ".", "auxi_block2", "=", "AuxiBlock", "(", "128", "+", "self", ".", "midchannels", "[", "2", "]", ",", "128", ")", "\n", "self", ".", "auxi_block3", "=", "AuxiBlock", "(", "128", "+", "self", ".", "midchannels", "[", "2", "]", ",", "128", ")", "\n", "self", ".", "auxi_block4", "=", "AuxiBlock", "(", "128", "+", "self", ".", "midchannels", "[", "1", "]", ",", "128", ")", "\n", "self", ".", "auxi_block5", "=", "AuxiBlock", "(", "128", "+", "self", ".", "midchannels", "[", "0", "]", ",", "128", ")", "\n", "self", ".", "out_conv", "=", "AO", "(", "128", ",", "1", ",", "2", ")", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.network_auxi.DepthNet.__init__": [[72, 94], ["torch.Module.__init__", "KeyError", "lib.Resnext_torch.resnext101_32x8d", "lib.Resnext_torch.resnext101"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnext_torch.resnext101_32x8d"], ["", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "# NN.BatchNorm2d", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "", "def", "init_model_weight", "(", "m", ")", ":", "\n", "            ", "for", "child_m", "in", "m", ".", "children", "(", ")", ":", "\n", "                ", "if", "not", "isinstance", "(", "child_m", ",", "nn", ".", "ModuleList", ")", ":", "\n", "                    ", "child_m", ".", "apply", "(", "init_func", ")", "\n", "\n", "", "", "", "init_model_weight", "(", "self", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "auxi_in", ")", ":", "\n", "        ", "out", "=", "self", ".", "auxi_block1", "(", "auxi_in", "[", "0", "]", ",", "auxi_in", "[", "1", "]", ")", "# 1/32", "\n", "out", "=", "self", ".", "auxi_block2", "(", "out", ",", "auxi_in", "[", "2", "]", ")", "# 1/16", "\n", "out", "=", "self", ".", "auxi_block3", "(", "out", ",", "auxi_in", "[", "3", "]", ")", "# 1/8", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.network_auxi.DepthNet.forward": [[95, 98], ["network_auxi.DepthNet.encoder"], "methods", ["None"], ["out", "=", "self", ".", "auxi_block4", "(", "out", ",", "auxi_in", "[", "4", "]", ")", "# 1/4", "\n", "out", "=", "self", ".", "auxi_block5", "(", "out", ",", "auxi_in", "[", "5", "]", ")", "# 1/2", "\n", "out", "=", "self", ".", "out_conv", "(", "out", ")", "\n", "return", "out", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.network_auxi.FTB.__init__": [[101, 118], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.ReLU", "network_auxi.FTB.init_params", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.network_auxi.FeatureFusion.init_params"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inchannels", "=", "cfg", ".", "MODEL", ".", "RESNET_BOTTLENECK_DIM", "[", "1", ":", "]", "# [256, 512, 1024, 2048]", "\n", "self", ".", "midchannels", "=", "cfg", ".", "MODEL", ".", "LATERAL_OUT", "[", ":", ":", "-", "1", "]", "# [256, 256, 256, 512]", "\n", "\n", "self", ".", "auxi_block1", "=", "AuxiBlock", "(", "self", ".", "midchannels", "[", "2", "]", "+", "self", ".", "midchannels", "[", "3", "]", ",", "256", ")", "\n", "self", ".", "auxi_block2", "=", "AuxiBlock", "(", "256", "+", "self", ".", "midchannels", "[", "2", "]", ",", "256", ")", "\n", "self", ".", "auxi_block3", "=", "AuxiBlock", "(", "256", "+", "self", ".", "midchannels", "[", "2", "]", ",", "256", ")", "\n", "self", ".", "auxi_block4", "=", "AuxiBlock", "(", "256", "+", "self", ".", "midchannels", "[", "1", "]", ",", "256", ")", "\n", "self", ".", "auxi_block5", "=", "AuxiBlock", "(", "256", "+", "self", ".", "midchannels", "[", "0", "]", ",", "256", ")", "\n", "self", ".", "out_conv", "=", "AO", "(", "256", ",", "1", ",", "2", ")", "\n", "self", ".", "_init_weights", "(", ")", "\n", "\n", "", "def", "_init_weights", "(", "self", ")", ":", "\n", "        ", "def", "init_func", "(", "m", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.network_auxi.FTB.forward": [[119, 125], ["network_auxi.FTB.conv1", "network_auxi.FTB.relu", "network_auxi.FTB.conv_branch"], "methods", ["None"], ["                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "# NN.BatchNorm2d", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.network_auxi.FTB.init_params": [[126, 145], ["network_auxi.FTB.modules", "isinstance", "torch.normal_", "torch.normal_", "torch.normal_", "isinstance", "torch.constant_", "torch.constant_", "torch.constant_", "torch.normal_", "torch.normal_", "torch.normal_", "isinstance", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "isinstance", "torch.normal_", "torch.normal_", "torch.normal_", "torch.constant_", "torch.constant_", "torch.constant_"], "methods", ["None"], ["init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "", "def", "init_model_weight", "(", "m", ")", ":", "\n", "            ", "for", "child_m", "in", "m", ".", "children", "(", ")", ":", "\n", "                ", "if", "not", "isinstance", "(", "child_m", ",", "nn", ".", "ModuleList", ")", ":", "\n", "                    ", "child_m", ".", "apply", "(", "init_func", ")", "\n", "\n", "", "", "", "init_model_weight", "(", "self", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "auxi_in", ")", ":", "\n", "        ", "out", "=", "self", ".", "auxi_block1", "(", "auxi_in", "[", "0", "]", ",", "auxi_in", "[", "1", "]", ")", "# 1/32", "\n", "out", "=", "self", ".", "auxi_block2", "(", "out", ",", "auxi_in", "[", "2", "]", ")", "# 1/16", "\n", "out", "=", "self", ".", "auxi_block3", "(", "out", ",", "auxi_in", "[", "3", "]", ")", "# 1/8", "\n", "out", "=", "self", ".", "auxi_block4", "(", "out", ",", "auxi_in", "[", "4", "]", ")", "# 1/4", "\n", "out", "=", "self", ".", "auxi_block5", "(", "out", ",", "auxi_in", "[", "5", "]", ")", "# 1/2", "\n", "out", "=", "self", ".", "out_conv", "(", "out", ")", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.network_auxi.ATA.__init__": [[148, 157], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "network_auxi.ATA.init_params", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.network_auxi.FeatureFusion.init_params"], ["", "", "class", "Decoder", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inchannels", "=", "cfg", ".", "MODEL", ".", "RESNET_BOTTLENECK_DIM", "[", "1", ":", "]", "# [256, 512, 1024, 2048]", "\n", "self", ".", "midchannels", "=", "cfg", ".", "MODEL", ".", "LATERAL_OUT", "[", ":", ":", "-", "1", "]", "# [256, 256, 256, 512]", "\n", "self", ".", "upfactors", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", "\n", "self", ".", "outchannels", "=", "cfg", ".", "MODEL", ".", "DECODER_OUTPUT_C", "# 1", "\n", "\n", "self", ".", "conv", "=", "FTB", "(", "inchannels", "=", "self", ".", "inchannels", "[", "3", "]", ",", "midchannels", "=", "self", ".", "midchannels", "[", "3", "]", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "midchannels", "[", "3", "]", ",", "out_channels", "=", "self", ".", "midchannels", "[", "2", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.network_auxi.ATA.forward": [[158, 167], ["low_x.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "network_auxi.ATA.avg_pool", "network_auxi.ATA.view", "network_auxi.ATA.fc().view", "network_auxi.ATA.fc"], "methods", ["None"], ["self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "self", ".", "upfactors", "[", "3", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "self", ".", "ffm2", "=", "FFM", "(", "inchannels", "=", "self", ".", "inchannels", "[", "2", "]", ",", "midchannels", "=", "self", ".", "midchannels", "[", "2", "]", ",", "outchannels", "=", "self", ".", "midchannels", "[", "2", "]", ",", "upfactor", "=", "self", ".", "upfactors", "[", "2", "]", ")", "\n", "self", ".", "ffm1", "=", "FFM", "(", "inchannels", "=", "self", ".", "inchannels", "[", "1", "]", ",", "midchannels", "=", "self", ".", "midchannels", "[", "1", "]", ",", "outchannels", "=", "self", ".", "midchannels", "[", "1", "]", ",", "upfactor", "=", "self", ".", "upfactors", "[", "1", "]", ")", "\n", "self", ".", "ffm0", "=", "FFM", "(", "inchannels", "=", "self", ".", "inchannels", "[", "0", "]", ",", "midchannels", "=", "self", ".", "midchannels", "[", "0", "]", ",", "outchannels", "=", "self", ".", "midchannels", "[", "0", "]", ",", "upfactor", "=", "self", ".", "upfactors", "[", "0", "]", ")", "\n", "\n", "#self.outconv = nn.Conv2d(in_channels=self.inchannels[0], out_channels=self.outchannels, kernel_size=3, padding=1, stride=1, bias=True)", "\n", "self", ".", "outconv", "=", "AO", "(", "inchannels", "=", "self", ".", "midchannels", "[", "0", "]", ",", "outchannels", "=", "self", ".", "outchannels", ",", "upfactor", "=", "2", ")", "\n", "self", ".", "_init_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.network_auxi.ATA.init_params": [[168, 189], ["network_auxi.ATA.modules", "isinstance", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "isinstance", "torch.constant_", "torch.constant_", "torch.constant_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "isinstance", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "isinstance", "torch.normal_", "torch.normal_", "torch.normal_", "torch.constant_", "torch.constant_", "torch.constant_"], "methods", ["None"], ["", "def", "_init_params", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "#NN.BatchNorm2d", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "", "", "def", "forward", "(", "self", ",", "features", ")", ":", "\n", "# features' shape: # 1/32, 1/16, 1/8, 1/4", "\n", "# _,_,h,w = features[3].size()", "\n", "        ", "x_32x", "=", "self", ".", "conv", "(", "features", "[", "3", "]", ")", "# 1/32", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.network_auxi.FFM.__init__": [[192, 206], ["torch.Module.__init__", "network_auxi.FTB", "network_auxi.FTB", "torch.Upsample", "torch.Upsample", "torch.Upsample", "network_auxi.FFM.init_params"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.network_auxi.FeatureFusion.init_params"], ["\n", "x_8", "=", "self", ".", "ffm2", "(", "features", "[", "2", "]", ",", "x_16", ")", "# 1/8", "\n", "#print('ffm2:', x.size())", "\n", "x_4", "=", "self", ".", "ffm1", "(", "features", "[", "1", "]", ",", "x_8", ")", "# 1/4", "\n", "#print('ffm1:', x.size())", "\n", "x_2", "=", "self", ".", "ffm0", "(", "features", "[", "0", "]", ",", "x_4", ")", "# 1/2", "\n", "#print('ffm0:', x.size())", "\n", "#-----------------------------------------", "\n", "x", "=", "self", ".", "outconv", "(", "x_2", ")", "# original size", "\n", "auxi_input", "=", "[", "x_32x", ",", "x_32", ",", "x_16", ",", "x_8", ",", "x_4", ",", "x_2", "]", "\n", "return", "x", ",", "auxi_input", "\n", "\n", "", "", "class", "DepthNet", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "__factory", "=", "{", "\n", "18", ":", "Resnet", ".", "resnet18", ",", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.network_auxi.FFM.forward": [[207, 214], ["network_auxi.FFM.ftb1", "network_auxi.FFM.ftb2", "network_auxi.FFM.upsample"], "methods", ["None"], ["34", ":", "Resnet", ".", "resnet34", ",", "\n", "50", ":", "Resnet", ".", "resnet50", ",", "\n", "101", ":", "Resnet", ".", "resnet101", ",", "\n", "152", ":", "Resnet", ".", "resnet152", "\n", "}", "\n", "def", "__init__", "(", "self", ",", "\n", "backbone", "=", "'resnet'", ",", "\n", "depth", "=", "50", ",", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.network_auxi.FFM.init_params": [[215, 236], ["network_auxi.FFM.modules", "isinstance", "torch.normal_", "torch.normal_", "torch.normal_", "isinstance", "torch.constant_", "torch.constant_", "torch.constant_", "torch.normal_", "torch.normal_", "torch.normal_", "isinstance", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "isinstance", "torch.normal_", "torch.normal_", "torch.normal_", "torch.constant_", "torch.constant_", "torch.constant_"], "methods", ["None"], ["upfactors", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", ":", "\n", "        ", "super", "(", "DepthNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "pretrained", "=", "cfg", ".", "MODEL", ".", "LOAD_IMAGENET_PRETRAINED_WEIGHTS", "# True", "\n", "self", ".", "inchannels", "=", "cfg", ".", "MODEL", ".", "RESNET_BOTTLENECK_DIM", "[", "1", ":", "]", "# [256, 512, 1024, 2048]", "\n", "self", ".", "midchannels", "=", "cfg", ".", "MODEL", ".", "LATERAL_OUT", "[", ":", ":", "-", "1", "]", "# [256, 256, 256, 512]", "\n", "self", ".", "upfactors", "=", "upfactors", "\n", "self", ".", "outchannels", "=", "cfg", ".", "MODEL", ".", "DECODER_OUTPUT_C", "# 1", "\n", "\n", "# Build model", "\n", "if", "self", ".", "backbone", "==", "'resnet'", ":", "\n", "            ", "if", "self", ".", "depth", "not", "in", "DepthNet", ".", "__factory", ":", "\n", "                ", "raise", "KeyError", "(", "\"Unsupported depth:\"", ",", "self", ".", "depth", ")", "\n", "", "self", ".", "encoder", "=", "DepthNet", ".", "__factory", "[", "depth", "]", "(", "pretrained", "=", "self", ".", "pretrained", ")", "\n", "", "elif", "self", ".", "backbone", "==", "'resnext101_32x8d'", ":", "\n", "            ", "self", ".", "encoder", "=", "Resnext_torch", ".", "resnext101_32x8d", "(", "pretrained", "=", "self", ".", "pretrained", ")", "\n", "", "elif", "self", ".", "backbone", "==", "'mobilenetv2'", ":", "\n", "            ", "self", ".", "encoder", "=", "MobileNet_torch", ".", "mobilenet_v2", "(", "pretrained", "=", "self", ".", "pretrained", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "encoder", "=", "Resnext_torch", ".", "resnext101", "(", "pretrained", "=", "self", ".", "pretrained", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.network_auxi.AO.__init__": [[240, 256], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "network_auxi.AO.init_params", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Upsample", "torch.Upsample", "torch.Upsample"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.network_auxi.FeatureFusion.init_params"], ["\n", "\n", "", "", "class", "FTB", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "inchannels", ",", "midchannels", "=", "512", ")", ":", "\n", "        ", "super", "(", "FTB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in1", "=", "inchannels", "\n", "self", ".", "mid", "=", "midchannels", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "in1", ",", "out_channels", "=", "self", ".", "mid", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "\n", "bias", "=", "True", ")", "\n", "# NN.BatchNorm2d", "\n", "# self.sample_conv = nn.Sequential(nn.Conv2d(in_channels=self.mid, out_channels=self.mid, kernel_size=3, padding=1, stride=1, bias=True),", "\n", "#                                 nn.ReLU(inplace=True),", "\n", "#                                 nn.BatchNorm2d(num_features=self.mid),", "\n", "#                                 nn.Conv2d(in_channels=self.mid, out_channels= self.mid, kernel_size=3, padding=1, stride=1, bias=True))", "\n", "self", ".", "conv_branch", "=", "nn", ".", "Sequential", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "mid", ",", "out_channels", "=", "self", ".", "mid", ",", "kernel_size", "=", "3", ",", "\n", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "True", ")", ","]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.network_auxi.AO.forward": [[257, 260], ["network_auxi.AO.adapt_conv"], "methods", ["None"], ["nn", ".", "BatchNorm2d", "(", "num_features", "=", "self", ".", "mid", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "mid", ",", "out_channels", "=", "self", ".", "mid", ",", "kernel_size", "=", "3", ",", "\n", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "True", ")", ")", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.network_auxi.AO.init_params": [[261, 282], ["network_auxi.AO.modules", "isinstance", "torch.normal_", "torch.normal_", "torch.normal_", "isinstance", "torch.constant_", "torch.constant_", "torch.constant_", "torch.normal_", "torch.normal_", "torch.normal_", "isinstance", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "isinstance", "torch.normal_", "torch.normal_", "torch.normal_", "torch.constant_", "torch.constant_", "torch.constant_"], "methods", ["None"], ["self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "init_params", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "x", "+", "self", ".", "conv_branch", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n", "", "def", "init_params", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "# init.kaiming_normal_(m.weight, mode='fan_out')", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "# init.xavier_normal_(m.weight)", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.network_auxi.ResidualConv.__init__": [[289, 305], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "network_auxi.ResidualConv.init_params", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.network_auxi.FeatureFusion.init_params"], ["if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "\n", "", "", "", "", "", "class", "ATA", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "inchannels", ",", "reduction", "=", "8", ")", ":", "\n", "        ", "super", "(", "ATA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inchannels", "=", "inchannels", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "inchannels", "*", "2", ",", "self", ".", "inchannels", "//", "reduction", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "inchannels", "//", "reduction", ",", "self", ".", "inchannels", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "self", ".", "init_params", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "low_x", ",", "high_x", ")", ":", "\n", "        ", "n", ",", "c", ",", "_", ",", "_", "=", "low_x", ".", "size", "(", ")", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.network_auxi.ResidualConv.forward": [[306, 309], ["network_auxi.ResidualConv.conv"], "methods", ["None"], ["x", "=", "torch", ".", "cat", "(", "[", "low_x", ",", "high_x", "]", ",", "1", ")", "\n", "x", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "n", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", ".", "view", "(", "n", ",", "c", ",", "1", ",", "1", ")", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.network_auxi.ResidualConv.init_params": [[310, 331], ["network_auxi.ResidualConv.modules", "isinstance", "torch.normal_", "torch.normal_", "torch.normal_", "isinstance", "torch.constant_", "torch.constant_", "torch.constant_", "torch.normal_", "torch.normal_", "torch.normal_", "isinstance", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "isinstance", "torch.normal_", "torch.normal_", "torch.normal_", "torch.constant_", "torch.constant_", "torch.constant_"], "methods", ["None"], ["x", "=", "low_x", "*", "x", "+", "high_x", "\n", "\n", "return", "x", "\n", "\n", "", "def", "init_params", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "# init.kaiming_normal_(m.weight, mode='fan_out')", "\n", "# init.normal(m.weight, std=0.01)", "\n", "                ", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "# init.kaiming_normal_(m.weight, mode='fan_out')", "\n", "# init.normal_(m.weight, std=0.01)", "\n", "                ", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "# NN.BatchNorm2d", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.network_auxi.FeatureFusion.__init__": [[334, 343], ["torch.Module.__init__", "network_auxi.ResidualConv", "torch.Sequential", "torch.Sequential", "torch.Sequential", "network_auxi.ResidualConv", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__"], ["                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "\n", "", "", "", "", "", "class", "FFM", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "inchannels", ",", "midchannels", ",", "outchannels", ",", "upfactor", "=", "2", ")", ":", "\n", "        ", "super", "(", "FFM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inchannels", "=", "inchannels", "\n", "self", ".", "midchannels", "=", "midchannels", "\n", "self", ".", "outchannels", "=", "outchannels", "\n", "self", ".", "upfactor", "=", "upfactor", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.network_auxi.FeatureFusion.forward": [[344, 346], ["network_auxi.FeatureFusion.up", "network_auxi.FeatureFusion.conv"], "methods", ["None"], ["\n", "self", ".", "ftb1", "=", "FTB", "(", "inchannels", "=", "self", ".", "inchannels", ",", "midchannels", "=", "self", ".", "midchannels", ")", "\n", "# self.ata = ATA(inchannels = self.midchannels)", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.network_auxi.FeatureFusion.init_params": [[347, 368], ["network_auxi.FeatureFusion.modules", "isinstance", "torch.normal_", "torch.normal_", "torch.normal_", "isinstance", "torch.constant_", "torch.constant_", "torch.constant_", "torch.normal_", "torch.normal_", "torch.normal_", "isinstance", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "isinstance", "torch.normal_", "torch.normal_", "torch.normal_", "torch.constant_", "torch.constant_", "torch.constant_"], "methods", ["None"], ["self", ".", "ftb2", "=", "FTB", "(", "inchannels", "=", "self", ".", "midchannels", ",", "midchannels", "=", "self", ".", "outchannels", ")", "\n", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "self", ".", "upfactor", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "self", ".", "init_params", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "low_x", ",", "high_x", ")", ":", "\n", "        ", "x", "=", "self", ".", "ftb1", "(", "low_x", ")", "\n", "x", "=", "x", "+", "high_x", "\n", "x", "=", "self", ".", "ftb2", "(", "x", ")", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n", "", "def", "init_params", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "# init.kaiming_normal_(m.weight, mode='fan_out')", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "# init.xavier_normal_(m.weight)", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.network_auxi.SenceUnderstand.__init__": [[371, 383], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "network_auxi.SenceUnderstand.initial_params", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.network_auxi.SenceUnderstand.initial_params"], ["                ", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "# init.xavier_normal_(m.weight)", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "# NN.Batchnorm2d", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.network_auxi.SenceUnderstand.forward": [[384, 394], ["x.repeat.repeat.size", "network_auxi.SenceUnderstand.conv1", "network_auxi.SenceUnderstand.pool", "x.repeat.repeat.view", "network_auxi.SenceUnderstand.fc", "x.repeat.repeat.view", "network_auxi.SenceUnderstand.conv2", "x.repeat.repeat.repeat"], "methods", ["None"], ["", "", "", "", "", "class", "AO", "(", "nn", ".", "Module", ")", ":", "\n", "# Adaptive output module", "\n", "    ", "def", "__init__", "(", "self", ",", "inchannels", ",", "outchannels", ",", "upfactor", "=", "2", ")", ":", "\n", "        ", "super", "(", "AO", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inchannels", "=", "inchannels", "\n", "self", ".", "outchannels", "=", "outchannels", "\n", "self", ".", "upfactor", "=", "upfactor", "\n", "\n", "self", ".", "adapt_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "inchannels", ",", "out_channels", "=", "self", ".", "inchannels", "//", "2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "\n", "stride", "=", "1", ",", "bias", "=", "True", ")", ","]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.network_auxi.SenceUnderstand.initial_params": [[395, 409], ["network_auxi.SenceUnderstand.modules", "isinstance", "m.weight.data.normal_", "isinstance", "m.bias.data.fill_", "m.weight.data.normal_", "isinstance", "m.bias.data.fill_", "m.weight.data.normal_"], "methods", ["None"], ["nn", ".", "BatchNorm2d", "(", "num_features", "=", "self", ".", "inchannels", "//", "2", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "inchannels", "//", "2", ",", "out_channels", "=", "self", ".", "outchannels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "\n", "stride", "=", "1", ",", "bias", "=", "True", ")", ",", "nn", ".", "Upsample", "(", "scale_factor", "=", "self", ".", "upfactor", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ")", "\n", "\n", "self", ".", "init_params", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "adapt_conv", "(", "x", ")", "\n", "return", "x", "\n", "\n", "", "def", "init_params", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.network_auxi.resnet50_stride32": [[8, 10], ["network_auxi.DepthNet"], "function", ["None"], ["import", "torch", ".", "nn", "as", "nn", "\n", "import", "torch", ".", "nn", ".", "init", "as", "init", "\n", "import", "torch", ".", "nn", ".", "functional", "as", "F", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.network_auxi.resnext101_stride32x8d": [[11, 13], ["network_auxi.DepthNet"], "function", ["None"], ["\n", "from", "lib", ".", "configs", ".", "config", "import", "cfg", "\n", "from", "lib", ".", "models", "import", "Resnet", ",", "Resnext_torch", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.test_utils.init_image_coor": [[9, 23], ["numpy.arange", "numpy.tile", "x.astype.astype", "numpy.arange", "y.astype.astype", "numpy.tile"], "function", ["None"], ["def", "init_image_coor", "(", "height", ",", "width", ",", "u0", "=", "None", ",", "v0", "=", "None", ")", ":", "\n", "    ", "u0", "=", "width", "/", "2.0", "if", "u0", "is", "None", "else", "u0", "\n", "v0", "=", "height", "/", "2.0", "if", "v0", "is", "None", "else", "v0", "\n", "\n", "x_row", "=", "np", ".", "arange", "(", "0", ",", "width", ")", "\n", "x", "=", "np", ".", "tile", "(", "x_row", ",", "(", "height", ",", "1", ")", ")", "\n", "x", "=", "x", ".", "astype", "(", "np", ".", "float32", ")", "\n", "u_u0", "=", "x", "-", "u0", "\n", "\n", "y_col", "=", "np", ".", "arange", "(", "0", ",", "height", ")", "\n", "y", "=", "np", ".", "tile", "(", "y_col", ",", "(", "width", ",", "1", ")", ")", ".", "T", "\n", "y", "=", "y", ".", "astype", "(", "np", ".", "float32", ")", "\n", "v_v0", "=", "y", "-", "v0", "\n", "return", "u_u0", ",", "v_v0", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.test_utils.depth_to_pcd": [[24, 32], ["numpy.stack"], "function", ["None"], ["", "def", "depth_to_pcd", "(", "depth", ",", "u_u0", ",", "v_v0", ",", "f", ",", "invalid_value", "=", "0", ")", ":", "\n", "    ", "mask_invalid", "=", "depth", "<=", "invalid_value", "\n", "depth", "[", "mask_invalid", "]", "=", "0.0", "\n", "x", "=", "u_u0", "/", "f", "*", "depth", "\n", "y", "=", "v_v0", "/", "f", "*", "depth", "\n", "z", "=", "depth", "\n", "pcd", "=", "np", ".", "stack", "(", "[", "x", ",", "y", ",", "z", "]", ",", "axis", "=", "2", ")", "\n", "return", "pcd", ",", "~", "mask_invalid", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.test_utils.pcd_to_sparsetensor": [[33, 57], ["numpy.zeros_like", "numpy.round", "np.round.min", "torchsparse.utils.sparse_quantize", "torchsparse.SparseTensor", "torchsparse.utils.sparse_collate_fn", "len", "numpy.random.choice"], "function", ["None"], ["", "def", "pcd_to_sparsetensor", "(", "pcd", ",", "mask_valid", ",", "voxel_size", "=", "0.01", ",", "num_points", "=", "100000", ")", ":", "\n", "    ", "pcd_valid", "=", "pcd", "[", "mask_valid", "]", "\n", "block_", "=", "pcd_valid", "\n", "block", "=", "np", ".", "zeros_like", "(", "block_", ")", "\n", "block", "[", ":", ",", ":", "3", "]", "=", "block_", "[", ":", ",", ":", "3", "]", "\n", "\n", "pc_", "=", "np", ".", "round", "(", "block_", "[", ":", ",", ":", "3", "]", "/", "voxel_size", ")", "\n", "pc_", "-=", "pc_", ".", "min", "(", "0", ",", "keepdims", "=", "1", ")", "\n", "feat_", "=", "block", "\n", "\n", "# transfer point cloud to voxels", "\n", "inds", "=", "sparse_quantize", "(", "pc_", ",", "\n", "feat_", ",", "\n", "return_index", "=", "True", ",", "\n", "return_invs", "=", "False", ")", "\n", "if", "len", "(", "inds", ")", ">", "num_points", ":", "\n", "        ", "inds", "=", "np", ".", "random", ".", "choice", "(", "inds", ",", "num_points", ",", "replace", "=", "False", ")", "\n", "\n", "", "pc", "=", "pc_", "[", "inds", "]", "\n", "feat", "=", "feat_", "[", "inds", "]", "\n", "lidar", "=", "SparseTensor", "(", "feat", ",", "pc", ")", "\n", "feed_dict", "=", "[", "{", "'lidar'", ":", "lidar", "}", "]", "\n", "inputs", "=", "sparse_collate_fn", "(", "feed_dict", ")", "\n", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.test_utils.pcd_uv_to_sparsetensor": [[58, 88], ["numpy.concatenate", "numpy.zeros_like", "numpy.round", "np.round.min", "torchsparse.utils.sparse_quantize", "torchsparse.SparseTensor", "torchsparse.utils.sparse_collate_fn", "len", "numpy.random.choice"], "function", ["None"], ["", "def", "pcd_uv_to_sparsetensor", "(", "pcd", ",", "u_u0", ",", "v_v0", ",", "mask_valid", ",", "f", "=", "500.0", ",", "voxel_size", "=", "0.01", ",", "mask_side", "=", "None", ",", "num_points", "=", "100000", ")", ":", "\n", "    ", "if", "mask_side", "is", "not", "None", ":", "\n", "        ", "mask_valid", "=", "mask_valid", "&", "mask_side", "\n", "", "pcd_valid", "=", "pcd", "[", "mask_valid", "]", "\n", "u_u0_valid", "=", "u_u0", "[", "mask_valid", "]", "[", ":", ",", "np", ".", "newaxis", "]", "/", "f", "\n", "v_v0_valid", "=", "v_v0", "[", "mask_valid", "]", "[", ":", ",", "np", ".", "newaxis", "]", "/", "f", "\n", "\n", "block_", "=", "np", ".", "concatenate", "(", "[", "pcd_valid", ",", "u_u0_valid", ",", "v_v0_valid", "]", ",", "axis", "=", "1", ")", "\n", "block", "=", "np", ".", "zeros_like", "(", "block_", ")", "\n", "block", "[", ":", ",", ":", "]", "=", "block_", "[", ":", ",", ":", "]", "\n", "\n", "\n", "pc_", "=", "np", ".", "round", "(", "block_", "[", ":", ",", ":", "3", "]", "/", "voxel_size", ")", "\n", "pc_", "-=", "pc_", ".", "min", "(", "0", ",", "keepdims", "=", "1", ")", "\n", "feat_", "=", "block", "\n", "\n", "# transfer point cloud to voxels", "\n", "inds", "=", "sparse_quantize", "(", "pc_", ",", "\n", "feat_", ",", "\n", "return_index", "=", "True", ",", "\n", "return_invs", "=", "False", ")", "\n", "if", "len", "(", "inds", ")", ">", "num_points", ":", "\n", "        ", "inds", "=", "np", ".", "random", ".", "choice", "(", "inds", ",", "num_points", ",", "replace", "=", "False", ")", "\n", "\n", "", "pc", "=", "pc_", "[", "inds", "]", "\n", "feat", "=", "feat_", "[", "inds", "]", "\n", "lidar", "=", "SparseTensor", "(", "feat", ",", "pc", ")", "\n", "feed_dict", "=", "[", "{", "'lidar'", ":", "lidar", "}", "]", "\n", "inputs", "=", "sparse_collate_fn", "(", "feed_dict", ")", "\n", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.test_utils.refine_focal_one_step": [[90, 100], ["test_utils.init_image_coor", "test_utils.depth_to_pcd", "test_utils.pcd_uv_to_sparsetensor", "feed_dict[].cuda", "model"], "function", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.test_utils.init_image_coor", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.test_utils.depth_to_pcd", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.test_utils.pcd_uv_to_sparsetensor"], ["", "def", "refine_focal_one_step", "(", "depth", ",", "focal", ",", "model", ",", "u0", ",", "v0", ")", ":", "\n", "# reconstruct PCD from depth", "\n", "    ", "u_u0", ",", "v_v0", "=", "init_image_coor", "(", "depth", ".", "shape", "[", "0", "]", ",", "depth", ".", "shape", "[", "1", "]", ",", "u0", "=", "u0", ",", "v0", "=", "v0", ")", "\n", "pcd", ",", "mask_valid", "=", "depth_to_pcd", "(", "depth", ",", "u_u0", ",", "v_v0", ",", "f", "=", "focal", ",", "invalid_value", "=", "0", ")", "\n", "# input for the voxelnet", "\n", "feed_dict", "=", "pcd_uv_to_sparsetensor", "(", "pcd", ",", "u_u0", ",", "v_v0", ",", "mask_valid", ",", "f", "=", "focal", ",", "voxel_size", "=", "0.005", ",", "mask_side", "=", "None", ")", "\n", "inputs", "=", "feed_dict", "[", "'lidar'", "]", ".", "cuda", "(", ")", "\n", "\n", "outputs", "=", "model", "(", "inputs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.test_utils.refine_shift_one_step": [[101, 111], ["test_utils.init_image_coor", "test_utils.depth_to_pcd", "test_utils.pcd_to_sparsetensor", "feed_dict[].cuda", "model"], "function", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.test_utils.init_image_coor", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.test_utils.depth_to_pcd", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.test_utils.pcd_to_sparsetensor"], ["", "def", "refine_shift_one_step", "(", "depth_wshift", ",", "model", ",", "focal", ",", "u0", ",", "v0", ")", ":", "\n", "# reconstruct PCD from depth", "\n", "    ", "u_u0", ",", "v_v0", "=", "init_image_coor", "(", "depth_wshift", ".", "shape", "[", "0", "]", ",", "depth_wshift", ".", "shape", "[", "1", "]", ",", "u0", "=", "u0", ",", "v0", "=", "v0", ")", "\n", "pcd_wshift", ",", "mask_valid", "=", "depth_to_pcd", "(", "depth_wshift", ",", "u_u0", ",", "v_v0", ",", "f", "=", "focal", ",", "invalid_value", "=", "0", ")", "\n", "# input for the voxelnet", "\n", "feed_dict", "=", "pcd_to_sparsetensor", "(", "pcd_wshift", ",", "mask_valid", ",", "voxel_size", "=", "0.01", ")", "\n", "inputs", "=", "feed_dict", "[", "'lidar'", "]", ".", "cuda", "(", ")", "\n", "\n", "outputs", "=", "model", "(", "inputs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.test_utils.refine_focal": [[112, 120], ["numpy.copy", "range", "torch.tensor", "test_utils.refine_focal_one_step", "refine_focal_one_step.item"], "function", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.test_utils.refine_focal_one_step"], ["", "def", "refine_focal", "(", "depth", ",", "focal", ",", "model", ",", "u0", ",", "v0", ")", ":", "\n", "    ", "last_scale", "=", "1", "\n", "focal_tmp", "=", "np", ".", "copy", "(", "focal", ")", "\n", "for", "i", "in", "range", "(", "1", ")", ":", "\n", "        ", "scale", "=", "refine_focal_one_step", "(", "depth", ",", "focal_tmp", ",", "model", ",", "u0", ",", "v0", ")", "\n", "focal_tmp", "=", "focal_tmp", "/", "scale", ".", "item", "(", ")", "\n", "last_scale", "=", "last_scale", "*", "scale", "\n", "", "return", "torch", ".", "tensor", "(", "[", "[", "last_scale", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.test_utils.refine_shift": [[121, 130], ["numpy.copy", "range", "torch.tensor", "test_utils.refine_shift_one_step", "refine_shift_one_step.item", "refine_shift_one_step.item", "torch.tensor", "refine_shift_one_step.item"], "function", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.test_utils.refine_shift_one_step"], ["", "def", "refine_shift", "(", "depth_wshift", ",", "model", ",", "focal", ",", "u0", ",", "v0", ")", ":", "\n", "    ", "depth_wshift_tmp", "=", "np", ".", "copy", "(", "depth_wshift", ")", "\n", "last_shift", "=", "0", "\n", "for", "i", "in", "range", "(", "1", ")", ":", "\n", "        ", "shift", "=", "refine_shift_one_step", "(", "depth_wshift_tmp", ",", "model", ",", "focal", ",", "u0", ",", "v0", ")", "\n", "shift", "=", "shift", "if", "shift", ".", "item", "(", ")", "<", "0.7", "else", "torch", ".", "tensor", "(", "[", "[", "0.7", "]", "]", ")", "\n", "depth_wshift_tmp", "-=", "shift", ".", "item", "(", ")", "\n", "last_shift", "+=", "shift", ".", "item", "(", ")", "\n", "", "return", "torch", ".", "tensor", "(", "[", "[", "last_shift", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.test_utils.reconstruct_3D": [[131, 163], ["numpy.arange", "numpy.array", "numpy.arange", "numpy.array", "v.transpose.transpose", "numpy.reshape().astype", "numpy.reshape().astype", "numpy.reshape().astype", "numpy.concatenate", "pcd.astype.astype", "print", "np.reshape().astype.max", "numpy.reshape", "numpy.reshape", "numpy.reshape", "numpy.arange", "numpy.arange", "depth.max"], "function", ["None"], ["", "def", "reconstruct_3D", "(", "depth", ",", "f", ")", ":", "\n", "    ", "\"\"\"\n    Reconstruct depth to 3D pointcloud with the provided focal length.\n    Return:\n        pcd: N X 3 array, point cloud\n    \"\"\"", "\n", "cu", "=", "depth", ".", "shape", "[", "1", "]", "/", "2", "\n", "cv", "=", "depth", ".", "shape", "[", "0", "]", "/", "2", "\n", "width", "=", "depth", ".", "shape", "[", "1", "]", "\n", "height", "=", "depth", ".", "shape", "[", "0", "]", "\n", "row", "=", "np", ".", "arange", "(", "0", ",", "width", ",", "1", ")", "\n", "u", "=", "np", ".", "array", "(", "[", "row", "for", "i", "in", "np", ".", "arange", "(", "height", ")", "]", ")", "\n", "col", "=", "np", ".", "arange", "(", "0", ",", "height", ",", "1", ")", "\n", "v", "=", "np", ".", "array", "(", "[", "col", "for", "i", "in", "np", ".", "arange", "(", "width", ")", "]", ")", "\n", "v", "=", "v", ".", "transpose", "(", "1", ",", "0", ")", "\n", "\n", "if", "f", ">", "1e5", ":", "\n", "        ", "print", "(", "'Infinit focal length!!!'", ")", "\n", "x", "=", "u", "-", "cu", "\n", "y", "=", "v", "-", "cv", "\n", "z", "=", "depth", "/", "depth", ".", "max", "(", ")", "*", "x", ".", "max", "(", ")", "\n", "", "else", ":", "\n", "        ", "x", "=", "(", "u", "-", "cu", ")", "*", "depth", "/", "f", "\n", "y", "=", "(", "v", "-", "cv", ")", "*", "depth", "/", "f", "\n", "z", "=", "depth", "\n", "\n", "", "x", "=", "np", ".", "reshape", "(", "x", ",", "(", "width", "*", "height", ",", "1", ")", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "y", "=", "np", ".", "reshape", "(", "y", ",", "(", "width", "*", "height", ",", "1", ")", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "z", "=", "np", ".", "reshape", "(", "z", ",", "(", "width", "*", "height", ",", "1", ")", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "pcd", "=", "np", ".", "concatenate", "(", "(", "x", ",", "y", ",", "z", ")", ",", "axis", "=", "1", ")", "\n", "pcd", "=", "pcd", ".", "astype", "(", "np", ".", "int", ")", "\n", "return", "pcd", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.test_utils.save_point_cloud": [[164, 212], ["numpy.tile", "numpy.hstack", "numpy.hstack", "range", "numpy.array", "plyfile.PlyElement.describe", "plyfile.PlyData().write", "numpy.squeeze", "numpy.squeeze", "numpy.squeeze", "numpy.squeeze", "numpy.squeeze", "numpy.squeeze", "numpy.savetxt", "numpy.array", "vertices.append", "numpy.column_stack", "tuple", "plyfile.PlyData", "dtype", "zip"], "function", ["None"], ["", "def", "save_point_cloud", "(", "pcd", ",", "rgb", ",", "filename", ",", "binary", "=", "True", ")", ":", "\n", "    ", "\"\"\"Save an RGB point cloud as a PLY file.\n\n    :paras\n      @pcd: Nx3 matrix, the XYZ coordinates\n      @rgb: NX3 matrix, the rgb colors for each 3D point\n    \"\"\"", "\n", "assert", "pcd", ".", "shape", "[", "0", "]", "==", "rgb", ".", "shape", "[", "0", "]", "\n", "\n", "if", "rgb", "is", "None", ":", "\n", "        ", "gray_concat", "=", "np", ".", "tile", "(", "np", ".", "array", "(", "[", "128", "]", ",", "dtype", "=", "np", ".", "uint8", ")", ",", "(", "pcd", ".", "shape", "[", "0", "]", ",", "3", ")", ")", "\n", "points_3d", "=", "np", ".", "hstack", "(", "(", "pcd", ",", "gray_concat", ")", ")", "\n", "", "else", ":", "\n", "        ", "points_3d", "=", "np", ".", "hstack", "(", "(", "pcd", ",", "rgb", ")", ")", "\n", "", "python_types", "=", "(", "float", ",", "float", ",", "float", ",", "int", ",", "int", ",", "int", ")", "\n", "npy_types", "=", "[", "(", "'x'", ",", "'f4'", ")", ",", "(", "'y'", ",", "'f4'", ")", ",", "(", "'z'", ",", "'f4'", ")", ",", "(", "'red'", ",", "'u1'", ")", ",", "(", "'green'", ",", "'u1'", ")", ",", "\n", "(", "'blue'", ",", "'u1'", ")", "]", "\n", "if", "binary", "is", "True", ":", "\n", "# Format into NumPy structured array", "\n", "        ", "vertices", "=", "[", "]", "\n", "for", "row_idx", "in", "range", "(", "points_3d", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "cur_point", "=", "points_3d", "[", "row_idx", "]", "\n", "vertices", ".", "append", "(", "tuple", "(", "dtype", "(", "point", ")", "for", "dtype", ",", "point", "in", "zip", "(", "python_types", ",", "cur_point", ")", ")", ")", "\n", "", "vertices_array", "=", "np", ".", "array", "(", "vertices", ",", "dtype", "=", "npy_types", ")", "\n", "el", "=", "PlyElement", ".", "describe", "(", "vertices_array", ",", "'vertex'", ")", "\n", "\n", "# Write", "\n", "PlyData", "(", "[", "el", "]", ")", ".", "write", "(", "filename", ")", "\n", "", "else", ":", "\n", "        ", "x", "=", "np", ".", "squeeze", "(", "points_3d", "[", ":", ",", "0", "]", ")", "\n", "y", "=", "np", ".", "squeeze", "(", "points_3d", "[", ":", ",", "1", "]", ")", "\n", "z", "=", "np", ".", "squeeze", "(", "points_3d", "[", ":", ",", "2", "]", ")", "\n", "r", "=", "np", ".", "squeeze", "(", "points_3d", "[", ":", ",", "3", "]", ")", "\n", "g", "=", "np", ".", "squeeze", "(", "points_3d", "[", ":", ",", "4", "]", ")", "\n", "b", "=", "np", ".", "squeeze", "(", "points_3d", "[", ":", ",", "5", "]", ")", "\n", "\n", "ply_head", "=", "'ply\\n'", "'format ascii 1.0\\n'", "'element vertex %d\\n'", "'property float x\\n'", "'property float y\\n'", "'property float z\\n'", "'property uchar red\\n'", "'property uchar green\\n'", "'property uchar blue\\n'", "'end_header'", "%", "r", ".", "shape", "[", "0", "]", "\n", "# ---- Save ply data to disk", "\n", "np", ".", "savetxt", "(", "filename", ",", "np", ".", "column_stack", "(", "(", "x", ",", "y", ",", "z", ",", "r", ",", "g", ",", "b", ")", ")", ",", "fmt", "=", "\"%d %d %d %d %d %d\"", ",", "header", "=", "ply_head", ",", "comments", "=", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.test_utils.reconstruct_depth": [[213, 228], ["numpy.squeeze", "numpy.squeeze", "test_utils.reconstruct_3D", "numpy.reshape", "test_utils.save_point_cloud", "os.path.join", "np.squeeze.max"], "function", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.test_utils.reconstruct_3D", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.test_utils.save_point_cloud"], ["", "", "def", "reconstruct_depth", "(", "depth", ",", "rgb", ",", "dir", ",", "pcd_name", ",", "focal", ")", ":", "\n", "    ", "\"\"\"\n    para disp: disparity, [h, w]\n    para rgb: rgb image, [h, w, 3], in rgb format\n    \"\"\"", "\n", "rgb", "=", "np", ".", "squeeze", "(", "rgb", ")", "\n", "depth", "=", "np", ".", "squeeze", "(", "depth", ")", "\n", "\n", "mask", "=", "depth", "<", "1e-8", "\n", "depth", "[", "mask", "]", "=", "0", "\n", "depth", "=", "depth", "/", "depth", ".", "max", "(", ")", "*", "10000", "\n", "\n", "pcd", "=", "reconstruct_3D", "(", "depth", ",", "f", "=", "focal", ")", "\n", "rgb_n", "=", "np", ".", "reshape", "(", "rgb", ",", "(", "-", "1", ",", "3", ")", ")", "\n", "save_point_cloud", "(", "pcd", ",", "rgb_n", ",", "os", ".", "path", ".", "join", "(", "dir", ",", "pcd_name", "+", "'.ply'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.test_utils.recover_metric_depth": [[230, 244], ["gt.cpu().numpy.squeeze", "pred.cpu().numpy.squeeze", "numpy.polyfit", "pred.cpu().numpy.cpu().numpy", "gt.cpu().numpy.cpu().numpy", "type", "type", "pred.cpu().numpy.cpu", "gt.cpu().numpy.cpu"], "function", ["None"], ["", "def", "recover_metric_depth", "(", "pred", ",", "gt", ")", ":", "\n", "    ", "if", "type", "(", "pred", ")", ".", "__module__", "==", "torch", ".", "__name__", ":", "\n", "        ", "pred", "=", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "type", "(", "gt", ")", ".", "__module__", "==", "torch", ".", "__name__", ":", "\n", "        ", "gt", "=", "gt", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "gt", "=", "gt", ".", "squeeze", "(", ")", "\n", "pred", "=", "pred", ".", "squeeze", "(", ")", "\n", "mask", "=", "(", "gt", ">", "1e-8", ")", "&", "(", "pred", ">", "1e-8", ")", "\n", "\n", "gt_mask", "=", "gt", "[", "mask", "]", "\n", "pred_mask", "=", "pred", "[", "mask", "]", "\n", "a", ",", "b", "=", "np", ".", "polyfit", "(", "pred_mask", ",", "gt_mask", ",", "deg", "=", "1", ")", "\n", "pred_metric", "=", "a", "*", "pred", "+", "b", "\n", "return", "pred_metric", "\n", "", ""]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.net_tools.get_func": [[7, 26], ["func_name.split", "importlib.import_module", "getattr", "len", "print", "globals"], "function", ["None"], ["import", "torch", "\n", "import", "torch", ".", "nn", "as", "nn", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "from", "collections", "import", "OrderedDict", "\n", "\n", "from", "lib", ".", "configs", ".", "config", "import", "cfg", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "def", "get_func", "(", "func_name", ")", ":", "\n", "    ", "\"\"\"Helper to return a function object by name. func_name must identify a\n    function in this module or the path to a function relative to the base\n    'modeling' module.\n    \"\"\"", "\n", "if", "func_name", "==", "''", ":", "\n", "        ", "return", "None", "\n", "", "try", ":", "\n", "        ", "parts", "=", "func_name", ".", "split", "(", "'.'", ")", "\n", "# Refers to a function in this module", "\n", "if", "len", "(", "parts", ")", "==", "1", ":", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.net_tools.load_ckpt": [[27, 44], ["os.path.isfile", "print", "torch.load", "depth_model.load_state_dict", "torch.cuda.empty_cache", "shift_model.load_state_dict", "focal_model.load_state_dict", "net_tools.strip_prefix_if_present", "net_tools.strip_prefix_if_present", "net_tools.strip_prefix_if_present"], "function", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.net_tools.strip_prefix_if_present", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.net_tools.strip_prefix_if_present", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.net_tools.strip_prefix_if_present"], ["            ", "return", "globals", "(", ")", "[", "parts", "[", "0", "]", "]", "\n", "# Otherwise, assume we're referencing a module under modeling", "\n", "", "module_name", "=", "'lib.models.'", "+", "'.'", ".", "join", "(", "parts", "[", ":", "-", "1", "]", ")", "\n", "module", "=", "importlib", ".", "import_module", "(", "module_name", ")", "\n", "return", "getattr", "(", "module", ",", "parts", "[", "-", "1", "]", ")", "\n", "", "except", "Exception", ":", "\n", "        ", "logger", ".", "error", "(", "'Failed to f1ind function: %s'", ",", "func_name", ")", "\n", "raise", "\n", "\n", "", "", "def", "load_ckpt", "(", "args", ",", "model", ",", "optimizer", "=", "None", ",", "scheduler", "=", "None", ",", "val_err", "=", "[", "]", ")", ":", "\n", "    ", "\"\"\"\n    Load checkpoint.\n    \"\"\"", "\n", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "load_ckpt", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"loading checkpoint %s\"", ",", "args", ".", "load_ckpt", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "load_ckpt", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ",", "pickle_module", "=", "dill", ")", "\n", "model_state_dict_keys", "=", "model", ".", "state_dict", "(", ")", ".", "keys", "(", ")", "\n", "checkpoint_state_dict_noprefix", "=", "strip_prefix_if_present", "(", "checkpoint", "[", "'model_state_dict'", "]", ",", "\"module.\"", ")", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.net_tools.strip_prefix_if_present": [[46, 54], ["sorted", "collections.OrderedDict", "state_dict.items", "state_dict.keys", "all", "key.startswith", "key.replace"], "function", ["None"], ["if", "all", "(", "key", ".", "startswith", "(", "'module.'", ")", "for", "key", "in", "model_state_dict_keys", ")", ":", "\n", "            ", "model", ".", "module", ".", "load_state_dict", "(", "checkpoint_state_dict_noprefix", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "load_state_dict", "(", "checkpoint_state_dict_noprefix", ")", "\n", "", "if", "args", ".", "resume", ":", "\n", "#args.batchsize = checkpoint['batch_size']", "\n", "            ", "args", ".", "start_step", "=", "checkpoint", "[", "'step'", "]", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.BasicBlock.__init__": [[26, 35], ["torch.Module.__init__", "Resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "Resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.conv3x3", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.conv3x3"], ["\n", "", "class", "BasicBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "1", "\n", "\n", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "NN", ".", "BatchNorm2d", "(", "planes", ")", "#NN.BatchNorm2d", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.BasicBlock.forward": [[36, 53], ["Resnet.BasicBlock.conv1", "Resnet.BasicBlock.bn1", "Resnet.BasicBlock.relu", "Resnet.BasicBlock.conv2", "Resnet.BasicBlock.bn2", "Resnet.BasicBlock.relu", "Resnet.BasicBlock.downsample"], "methods", ["None"], ["self", ".", "bn2", "=", "NN", ".", "BatchNorm2d", "(", "planes", ")", "#NN.BatchNorm2d", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.Bottleneck.__init__": [[58, 70], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__"], ["\n", "", "", "class", "Bottleneck", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "4", "\n", "\n", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "NN", ".", "BatchNorm2d", "(", "planes", ")", "#NN.BatchNorm2d", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "NN", ".", "BatchNorm2d", "(", "planes", ")", "#NN.BatchNorm2d", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "NN", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "#NN.BatchNorm2d", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.Bottleneck.forward": [[71, 92], ["Resnet.Bottleneck.conv1", "Resnet.Bottleneck.bn1", "Resnet.Bottleneck.relu", "Resnet.Bottleneck.conv2", "Resnet.Bottleneck.bn2", "Resnet.Bottleneck.relu", "Resnet.Bottleneck.conv3", "Resnet.Bottleneck.bn3", "Resnet.Bottleneck.relu", "Resnet.Bottleneck.downsample"], "methods", ["None"], ["self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__": [[96, 117], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "Resnet.ResNet._make_layer", "Resnet.ResNet._make_layer", "Resnet.ResNet._make_layer", "Resnet.ResNet._make_layer", "Resnet.ResNet.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.__init__", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet._make_layer"], ["\n", "\n", "", "", "class", "ResNet", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "NN", ".", "BatchNorm2d", "(", "64", ")", "#NN.BatchNorm2d", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "#self.avgpool = nn.AvgPool2d(7, stride=1)", "\n", "#self.fc = nn.Linear(512 * block.expansion, num_classes)", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet._make_layer": [[118, 134], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "NN", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "#NN.BatchNorm2d", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.ResNet.forward": [[135, 153], ["Resnet.ResNet.conv1", "Resnet.ResNet.bn1", "Resnet.ResNet.relu", "Resnet.ResNet.maxpool", "Resnet.ResNet.layer1", "features.append", "Resnet.ResNet.layer2", "features.append", "Resnet.ResNet.layer3", "features.append", "Resnet.ResNet.layer4", "features.append"], "methods", ["None"], ["            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "features", "=", "[", "]", "\n", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "features", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "features", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "features", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.conv3x3": [[17, 21], ["torch.Conv2d"], "function", ["None"], ["'resnet152'", ":", "'https://download.pytorch.org/models/resnet152-b121ed2d.pth'", ",", "\n", "}", "\n", "\n", "\n", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.resnet18": [[155, 162], ["Resnet.ResNet"], "function", ["None"], ["\n", "return", "features", "\n", "\n", "\n", "", "", "def", "resnet18", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.resnet34": [[164, 171], ["Resnet.ResNet"], "function", ["None"], ["model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "pretrained_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ",", "cfg", ".", "ROOT_DIR", "+", "'/'", "+", "cfg", ".", "MODEL", ".", "MODEL_REPOSITORY", ")", "\n", "#pretrained_model = torchvision.models.resnet18(pretrained=True)", "\n", "#pretrained_dict = pretrained_model.state_dict()", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.resnet50": [[173, 181], ["Resnet.ResNet"], "function", ["None"], ["\n", "", "return", "model", "\n", "\n", "\n", "", "def", "resnet34", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.resnet101": [[183, 191], ["Resnet.ResNet"], "function", ["None"], ["if", "pretrained", ":", "\n", "        ", "pretrained_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ",", "cfg", ".", "ROOT_DIR", "+", "'/'", "+", "cfg", ".", "MODEL", ".", "MODEL_REPOSITORY", ")", "\n", "#pretrained_model = torchvision.models.resnet34(pretrained=True)", "\n", "#pretrained_dict = pretrained_model.state_dict()", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.Resnet.resnet152": [[193, 200], ["Resnet.ResNet"], "function", ["None"], ["\n", "\n", "", "def", "resnet50", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.spvcnn_utils.initial_voxelize": [[12, 33], ["torch.cat", "torchsparse.sphash", "torch.unique", "torchsparse.sphashquery", "torchsparse.spcount", "torchsparse.spvoxelize", "torch.round().int", "torchsparse.spvoxelize", "SparseTensor", "SparseTensor.check", "torch.floor().int", "spf.sphashquery.int", "len", "torch.floor", "z.C[].view", "torch.round", "torch.floor"], "function", ["None"], ["def", "initial_voxelize", "(", "z", ",", "init_res", ",", "after_res", ")", ":", "\n", "    ", "new_float_coord", "=", "torch", ".", "cat", "(", "\n", "[", "(", "z", ".", "C", "[", ":", ",", ":", "3", "]", "*", "init_res", ")", "/", "after_res", ",", "z", ".", "C", "[", ":", ",", "-", "1", "]", ".", "view", "(", "-", "1", ",", "1", ")", "]", ",", "1", ")", "\n", "\n", "pc_hash", "=", "spf", ".", "sphash", "(", "torch", ".", "floor", "(", "new_float_coord", ")", ".", "int", "(", ")", ")", "\n", "sparse_hash", "=", "torch", ".", "unique", "(", "pc_hash", ")", "\n", "idx_query", "=", "spf", ".", "sphashquery", "(", "pc_hash", ",", "sparse_hash", ")", "\n", "counts", "=", "spf", ".", "spcount", "(", "idx_query", ".", "int", "(", ")", ",", "len", "(", "sparse_hash", ")", ")", "\n", "\n", "inserted_coords", "=", "spf", ".", "spvoxelize", "(", "torch", ".", "floor", "(", "new_float_coord", ")", ",", "idx_query", ",", "\n", "counts", ")", "\n", "inserted_coords", "=", "torch", ".", "round", "(", "inserted_coords", ")", ".", "int", "(", ")", "\n", "inserted_feat", "=", "spf", ".", "spvoxelize", "(", "z", ".", "F", ",", "idx_query", ",", "counts", ")", "\n", "\n", "new_tensor", "=", "SparseTensor", "(", "inserted_feat", ",", "inserted_coords", ",", "1", ")", "\n", "new_tensor", ".", "check", "(", ")", "\n", "z", ".", "additional_features", "[", "'idx_query'", "]", "[", "1", "]", "=", "idx_query", "\n", "z", ".", "additional_features", "[", "'counts'", "]", "[", "1", "]", "=", "counts", "\n", "z", ".", "C", "=", "new_float_coord", "\n", "\n", "return", "new_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.spvcnn_utils.point_to_voxel": [[37, 61], ["torchsparse.spvoxelize", "SparseTensor", "torchsparse.sphash", "torchsparse.sphash", "torchsparse.sphashquery", "torchsparse.spcount", "z.additional_features.get", "z.additional_features[].get", "torch.cat", "spf.sphashquery.int", "z.C[].int().view", "torch.floor().int", "z.C[].int", "torch.floor"], "function", ["None"], ["", "def", "point_to_voxel", "(", "x", ",", "z", ")", ":", "\n", "    ", "if", "z", ".", "additional_features", "is", "None", "or", "z", ".", "additional_features", ".", "get", "(", "'idx_query'", ")", "is", "None", "or", "z", ".", "additional_features", "[", "'idx_query'", "]", ".", "get", "(", "x", ".", "s", ")", "is", "None", ":", "\n", "#pc_hash = hash_gpu(torch.floor(z.C).int())", "\n", "        ", "pc_hash", "=", "spf", ".", "sphash", "(", "\n", "torch", ".", "cat", "(", "[", "\n", "torch", ".", "floor", "(", "z", ".", "C", "[", ":", ",", ":", "3", "]", "/", "x", ".", "s", ")", ".", "int", "(", ")", "*", "x", ".", "s", ",", "\n", "z", ".", "C", "[", ":", ",", "-", "1", "]", ".", "int", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "]", ",", "1", ")", ")", "\n", "sparse_hash", "=", "spf", ".", "sphash", "(", "x", ".", "C", ")", "\n", "idx_query", "=", "spf", ".", "sphashquery", "(", "pc_hash", ",", "sparse_hash", ")", "\n", "counts", "=", "spf", ".", "spcount", "(", "idx_query", ".", "int", "(", ")", ",", "x", ".", "C", ".", "shape", "[", "0", "]", ")", "\n", "z", ".", "additional_features", "[", "'idx_query'", "]", "[", "x", ".", "s", "]", "=", "idx_query", "\n", "z", ".", "additional_features", "[", "'counts'", "]", "[", "x", ".", "s", "]", "=", "counts", "\n", "", "else", ":", "\n", "        ", "idx_query", "=", "z", ".", "additional_features", "[", "'idx_query'", "]", "[", "x", ".", "s", "]", "\n", "counts", "=", "z", ".", "additional_features", "[", "'counts'", "]", "[", "x", ".", "s", "]", "\n", "\n", "", "inserted_feat", "=", "spf", ".", "spvoxelize", "(", "z", ".", "F", ",", "idx_query", ",", "counts", ")", "\n", "new_tensor", "=", "SparseTensor", "(", "inserted_feat", ",", "x", ".", "C", ",", "x", ".", "s", ")", "\n", "new_tensor", ".", "coord_maps", "=", "x", ".", "coord_maps", "\n", "new_tensor", ".", "kernel_maps", "=", "x", ".", "kernel_maps", "\n", "\n", "return", "new_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.aim-uofa_AdelaiDepth.lib.spvcnn_utils.voxel_to_point": [[65, 104], ["KernelRegion", "KernelRegion.get_kernel_offset().to", "torchsparse.sphash", "torchsparse.sphash", "torchsparse.sphashquery", "torchsparse.calc_ti_weights().transpose().contiguous", "idx_query.transpose().contiguous.transpose().contiguous", "torchsparse.spdevoxelize", "torchsparse.point_tensor.PointTensor", "torchsparse.spdevoxelize", "torchsparse.point_tensor.PointTensor", "z.idx_query.get", "z.weights.get", "torch.cat", "x.C.to", "z.idx_query.get", "z.weights.get", "KernelRegion.get_kernel_offset", "torchsparse.calc_ti_weights().transpose", "idx_query.transpose().contiguous.transpose", "z.C[].int().view", "torch.floor().int", "torchsparse.calc_ti_weights", "z.C[].int", "torch.floor"], "function", ["None"], ["", "def", "voxel_to_point", "(", "x", ",", "z", ",", "nearest", "=", "False", ")", ":", "\n", "    ", "if", "z", ".", "idx_query", "is", "None", "or", "z", ".", "weights", "is", "None", "or", "z", ".", "idx_query", ".", "get", "(", "\n", "x", ".", "s", ")", "is", "None", "or", "z", ".", "weights", ".", "get", "(", "x", ".", "s", ")", "is", "None", ":", "\n", "        ", "kr", "=", "KernelRegion", "(", "2", ",", "x", ".", "s", ",", "1", ")", "\n", "off", "=", "kr", ".", "get_kernel_offset", "(", ")", ".", "to", "(", "z", ".", "F", ".", "device", ")", "\n", "#old_hash = kernel_hash_gpu(torch.floor(z.C).int(), off)", "\n", "old_hash", "=", "spf", ".", "sphash", "(", "\n", "torch", ".", "cat", "(", "[", "\n", "torch", ".", "floor", "(", "z", ".", "C", "[", ":", ",", ":", "3", "]", "/", "x", ".", "s", ")", ".", "int", "(", ")", "*", "x", ".", "s", ",", "\n", "z", ".", "C", "[", ":", ",", "-", "1", "]", ".", "int", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "]", ",", "1", ")", ",", "off", ")", "\n", "pc_hash", "=", "spf", ".", "sphash", "(", "x", ".", "C", ".", "to", "(", "z", ".", "F", ".", "device", ")", ")", "\n", "idx_query", "=", "spf", ".", "sphashquery", "(", "old_hash", ",", "pc_hash", ")", "\n", "weights", "=", "spf", ".", "calc_ti_weights", "(", "z", ".", "C", ",", "idx_query", ",", "\n", "scale", "=", "x", ".", "s", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "idx_query", "=", "idx_query", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "if", "nearest", ":", "\n", "            ", "weights", "[", ":", ",", "1", ":", "]", "=", "0.", "\n", "idx_query", "[", ":", ",", "1", ":", "]", "=", "-", "1", "\n", "", "new_feat", "=", "spf", ".", "spdevoxelize", "(", "x", ".", "F", ",", "idx_query", ",", "weights", ")", "\n", "new_tensor", "=", "PointTensor", "(", "new_feat", ",", "\n", "z", ".", "C", ",", "\n", "idx_query", "=", "z", ".", "idx_query", ",", "\n", "weights", "=", "z", ".", "weights", ")", "\n", "new_tensor", ".", "additional_features", "=", "z", ".", "additional_features", "\n", "new_tensor", ".", "idx_query", "[", "x", ".", "s", "]", "=", "idx_query", "\n", "new_tensor", ".", "weights", "[", "x", ".", "s", "]", "=", "weights", "\n", "z", ".", "idx_query", "[", "x", ".", "s", "]", "=", "idx_query", "\n", "z", ".", "weights", "[", "x", ".", "s", "]", "=", "weights", "\n", "\n", "", "else", ":", "\n", "        ", "new_feat", "=", "spf", ".", "spdevoxelize", "(", "x", ".", "F", ",", "z", ".", "idx_query", ".", "get", "(", "x", ".", "s", ")", ",", "z", ".", "weights", ".", "get", "(", "x", ".", "s", ")", ")", "\n", "new_tensor", "=", "PointTensor", "(", "new_feat", ",", "\n", "z", ".", "C", ",", "\n", "idx_query", "=", "z", ".", "idx_query", ",", "\n", "weights", "=", "z", ".", "weights", ")", "\n", "new_tensor", ".", "additional_features", "=", "z", ".", "additional_features", "\n", "\n", "", "return", "new_tensor", "\n", "\n"]]}