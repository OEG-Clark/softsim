{"home.repos.pwc.inspect_result.whuir_mgnm.code.DataInputWSE_es.DataInput.__init__": [[25, 41], ["elasticUtil.ESClient", "len", "DataInputWSE_es.gen_se_pool", "DataInputWSE_es.DataInput.seclient.add_data", "len"], "methods", ["home.repos.pwc.inspect_result.whuir_mgnm.code.DataInputWSE_es.gen_se_pool", "home.repos.pwc.inspect_result.whuir_mgnm.code.elasticUtil.ESClient.add_data"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "batch_size", ",", "max_len", ",", "neg_num", ",", "item_num", ",", "train_pool", ",", "se_num", "=", "5", ",", "init_es", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "data", "=", "data", "# shuffle\u6570\u636e", "\n", "self", ".", "neg_num", "=", "neg_num", "\n", "self", ".", "max_len", "=", "max_len", "\n", "self", ".", "item_num", "=", "item_num", "\n", "self", ".", "epoch_size", "=", "len", "(", "self", ".", "data", ")", "//", "self", ".", "batch_size", "-", "1", "\n", "if", "self", ".", "epoch_size", "*", "self", ".", "batch_size", "<", "len", "(", "self", ".", "data", ")", ":", "\n", "            ", "self", ".", "epoch_size", "+=", "1", "\n", "", "self", ".", "i", "=", "0", "\n", "self", ".", "se_num", "=", "se_num", "\n", "self", ".", "seclient", "=", "ESClient", "(", ")", "\n", "if", "init_es", ":", "\n", "            ", "se_user", ",", "se_pool", "=", "gen_se_pool", "(", "train_pool", ")", "\n", "self", ".", "seclient", ".", "add_data", "(", "se_pool", ",", "se_user", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.DataInputWSE_es.DataInput.__iter__": [[42, 44], ["None"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.DataInputWSE_es.DataInput.__next__": [[45, 108], ["list", "list", "len", "print", "ts.extend", "u.append", "i.append", "y.append", "numpy.zeros", "numpy.zeros", "range", "len", "range", "min", "int", "len", "len", "len", "len", "list", "range", "random.randint", "u.append", "i.append", "y.append", "list.append", "list.append", "len", "min", "DataInputWSE_es.DataInput.seclient.search", "set", "len"], "methods", ["home.repos.pwc.inspect_result.whuir_mgnm.code.elasticUtil.ESClient.search"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "i", "==", "self", ".", "epoch_size", ":", "\n", "            ", "raise", "StopIteration", "\n", "\n", "", "ts", "=", "self", ".", "data", "[", "self", ".", "i", "*", "self", ".", "batch_size", ":", "min", "(", "(", "self", ".", "i", "+", "1", ")", "*", "self", ".", "batch_size", ",", "\n", "len", "(", "self", ".", "data", ")", ")", "]", "\n", "\n", "while", "len", "(", "ts", ")", "<", "self", ".", "batch_size", ":", "\n", "            ", "print", "(", "'__next__ padding...'", ")", "\n", "tmp", "=", "ts", "[", ":", "self", ".", "batch_size", "-", "len", "(", "ts", ")", "]", "\n", "ts", ".", "extend", "(", "tmp", ")", "\n", "\n", "", "self", ".", "i", "+=", "1", "\n", "\n", "u", ",", "i", ",", "y", ",", "sl", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "t", "in", "ts", ":", "\n", "            ", "u", ".", "append", "(", "t", "[", "0", "]", ")", "\n", "i", ".", "append", "(", "t", "[", "2", "]", ")", "\n", "y", ".", "append", "(", "int", "(", "t", "[", "3", "]", ")", ")", "\n", "", "max_sl", "=", "self", ".", "max_len", "\n", "\n", "hist_i", "=", "list", "(", "np", ".", "zeros", "(", "[", "len", "(", "ts", ")", ",", "max_sl", "+", "self", ".", "se_num", "]", ",", "np", ".", "int32", ")", ")", "\n", "mask_i", "=", "list", "(", "np", ".", "zeros", "(", "[", "len", "(", "ts", ")", ",", "max_sl", "+", "self", ".", "se_num", "]", ",", "np", ".", "float32", ")", ")", "\n", "k", "=", "0", "\n", "for", "t", "in", "ts", ":", "\n", "            ", "for", "l", "in", "range", "(", "len", "(", "t", "[", "1", "]", "[", "-", "max_sl", ":", "]", ")", ")", ":", "\n", "                ", "l", "+=", "1", "\n", "hist_i", "[", "k", "]", "[", "-", "l", "]", "=", "t", "[", "1", "]", "[", "-", "l", "]", "\n", "mask_i", "[", "k", "]", "[", "-", "l", "]", "=", "1.", "\n", "# query", "\n", "if", "self", ".", "se_num", "!=", "0", ":", "\n", "                    ", "se_item_list", "=", "list", "(", "self", ".", "seclient", ".", "search", "(", "t", "[", "1", "]", "[", "-", "max_sl", ":", "]", ")", "-", "set", "(", "t", "[", "1", "]", ")", ")", "\n", "for", "idx", "in", "range", "(", "min", "(", "self", ".", "se_num", ",", "len", "(", "se_item_list", ")", ")", ")", ":", "\n", "                        ", "hist_i", "[", "k", "]", "[", "idx", "]", "=", "se_item_list", "[", "idx", "]", "\n", "mask_i", "[", "k", "]", "[", "idx", "]", "=", "1.", "\n", "# query = t[1]", "\n", "# self.se.top1(t[1], 5)", "\n", "# rel_his = self.se.list", "\n", "# tmp_se_set = set()", "\n", "# for lis in rel_his:", "\n", "#     tmp_se_set.update(self.se_pool[lis])", "\n", "# tmp_se_set = list(tmp_se_set - set(t[1]))", "\n", "# for idx in range(min(self.se_num, len(tmp_se_set))):", "\n", "#     se_items[k][idx] = tmp_se_set[idx]", "\n", "#     se_mask[k][idx] = 1.", "\n", "", "", "", "k", "+=", "1", "\n", "\n", "", "if", "self", ".", "neg_num", ":", "\n", "            ", "length", "=", "len", "(", "u", ")", "\n", "for", "idx", "in", "range", "(", "length", ")", ":", "\n", "                ", "tmp", "=", "self", ".", "neg_num", "\n", "# \"\"\"", "\n", "while", "tmp", ">", "0", ":", "\n", "                    ", "neg_item", "=", "random", ".", "randint", "(", "1", ",", "self", ".", "item_num", "-", "2", ")", "\n", "if", "neg_item", "in", "hist_i", "[", "idx", "]", "or", "neg_item", "==", "i", "[", "idx", "]", ":", "\n", "                        ", "continue", "\n", "", "u", ".", "append", "(", "u", "[", "idx", "]", ")", "\n", "i", ".", "append", "(", "neg_item", ")", "\n", "y", ".", "append", "(", "0", ")", "\n", "hist_i", ".", "append", "(", "hist_i", "[", "idx", "]", ")", "\n", "mask_i", ".", "append", "(", "mask_i", "[", "idx", "]", ")", "\n", "tmp", "-=", "1", "\n", "", "", "", "return", "u", ",", "i", ",", "y", ",", "hist_i", ",", "mask_i", "\n", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.DataInputWSE_es.gen_se_pool": [[9, 22], ["tqdm.tqdm", "print", "print", "list", "list", "list", "enumerate", "len", "len", "list", "u2i.values", "len", "u2i.keys", "list", "len", "u2i.values"], "function", ["None"], ["def", "gen_se_pool", "(", "data", ")", ":", "\n", "    ", "u2i", "=", "{", "}", "\n", "for", "t", "in", "tqdm", "(", "data", ")", ":", "\n", "        ", "if", "t", "[", "0", "]", "in", "u2i", ":", "\n", "            ", "if", "len", "(", "u2i", "[", "t", "[", "0", "]", "]", ")", "<", "len", "(", "t", "[", "1", "]", ")", ":", "\n", "                ", "u2i", "[", "t", "[", "0", "]", "]", "=", "list", "(", "t", "[", "1", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "u2i", "[", "t", "[", "0", "]", "]", "=", "list", "(", "t", "[", "1", "]", ")", "\n", "", "", "print", "(", "'filtering...'", ")", "\n", "tmp", "=", "[", "li", "for", "li", "in", "list", "(", "u2i", ".", "values", "(", ")", ")", "if", "len", "(", "li", ")", ">", "1", "]", "\n", "tmp_u", "=", "[", "list", "(", "u2i", ".", "keys", "(", ")", ")", "[", "idx", "]", "for", "idx", ",", "ii", "in", "enumerate", "(", "list", "(", "u2i", ".", "values", "(", ")", ")", ")", "if", "len", "(", "ii", ")", ">", "1", "]", "\n", "print", "(", "'filter finished...'", ")", "\n", "return", "tmp_u", ",", "tmp", "\n", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.elasticUtil.ESClient.__init__": [[6, 16], ["elasticsearch.Elasticsearch"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "es", "=", "Elasticsearch", "(", "'172.28.6.8:9200'", ")", "\n", "self", ".", "index_name", "=", "'se1'", "\n", "self", ".", "doc_type", "=", "'politics'", "\n", "self", ".", "mapping", "=", "{", "\n", "'properties'", ":", "{", "\n", "'title'", ":", "{", "\n", "'type'", ":", "'text'", ",", "\n", "'analyzer'", ":", "'whitespace'", ",", "\n", "'search_analyzer'", ":", "'whitespace'", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.elasticUtil.ESClient.add_data": [[20, 30], ["elasticUtil.ESClient.es.indices.create", "elasticUtil.ESClient.es.indices.put_mapping", "tqdm.tqdm.tqdm", "enumerate", "elasticUtil.ESClient.es.index", "map"], "methods", ["None"], ["", "def", "add_data", "(", "self", ",", "se_pool", ",", "se_user", ")", ":", "\n", "# only run at the first time", "\n", "        ", "self", ".", "es", ".", "indices", ".", "create", "(", "index", "=", "self", ".", "index_name", ",", "ignore", "=", "400", ")", "\n", "self", ".", "es", ".", "indices", ".", "put_mapping", "(", "index", "=", "self", ".", "index_name", ",", "doc_type", "=", "self", ".", "doc_type", ",", "body", "=", "self", ".", "mapping", ")", "\n", "## ************************* ##", "\n", "\n", "for", "idx", ",", "d", "in", "tqdm", "(", "enumerate", "(", "se_pool", ")", ")", ":", "\n", "            ", "body_tmp", "=", "{", "'user'", ":", "se_user", "[", "idx", "]", ",", "'hist'", ":", "' '", ".", "join", "(", "map", "(", "str", ",", "d", ")", ")", "}", "\n", "self", ".", "es", ".", "index", "(", "index", "=", "self", ".", "index_name", ",", "doc_type", "=", "self", ".", "doc_type", ",", "body", "=", "body_tmp", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.elasticUtil.ESClient.delete_index": [[31, 34], ["elasticUtil.ESClient.es.indices.delete"], "methods", ["None"], ["", "def", "delete_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "self", ".", "es", ".", "indices", ".", "delete", "(", "index", "=", "index", ",", "ignore", "=", "[", "400", ",", "404", "]", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.elasticUtil.ESClient.search": [[35, 51], ["elasticUtil.ESClient.es.search", "set", "print", "set.update", "list", "list", "map", "map", "map", "[].split", "[].split"], "methods", ["home.repos.pwc.inspect_result.whuir_mgnm.code.elasticUtil.ESClient.search"], ["", "def", "search", "(", "self", ",", "query", ")", ":", "\n", "## query(list)", "\n", "        ", "dsl", "=", "{", "\n", "'query'", ":", "{", "\n", "'multi_match'", ":", "{", "\n", "'query'", ":", "' '", ".", "join", "(", "map", "(", "str", ",", "query", ")", ")", ",", "\n", "'fields'", ":", "[", "'hist'", "]", "\n", "}", "\n", "}", "\n", "}", "\n", "result", "=", "self", ".", "es", ".", "search", "(", "index", "=", "self", ".", "index_name", ",", "doc_type", "=", "self", ".", "doc_type", ",", "body", "=", "dsl", ")", "\n", "se_item_set", "=", "set", "(", ")", "\n", "for", "id", "in", "result", "[", "'hits'", "]", "[", "'hits'", "]", ":", "\n", "            ", "print", "(", "list", "(", "map", "(", "int", ",", "id", "[", "'_source'", "]", "[", "'hist'", "]", ".", "split", "(", "' '", ")", ")", ")", ")", "\n", "se_item_set", ".", "update", "(", "list", "(", "map", "(", "int", ",", "id", "[", "'_source'", "]", "[", "'hist'", "]", ".", "split", "(", "' '", ")", ")", ")", ")", "\n", "", "return", "se_item_set", "\n", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.train.get_exp_name": [[31, 37], ["str", "str", "str", "str"], "function", ["None"], ["def", "get_exp_name", "(", "dataset", ",", "model_type", ",", "batch_size", ",", "lr", ",", "maxlen", ",", "save", "=", "True", ")", ":", "\n", "    ", "extr_name", "=", "'exp'", "#input('Please input the experiment name: ')", "\n", "para_name", "=", "'_'", ".", "join", "(", "[", "dataset", ",", "model_type", ",", "'b'", "+", "str", "(", "batch_size", ")", ",", "'lr'", "+", "str", "(", "lr", ")", ",", "'d'", "+", "str", "(", "DIMENSION", ")", ",", "'len'", "+", "str", "(", "maxlen", ")", "]", ")", "\n", "exp_name", "=", "para_name", "+", "'_'", "+", "extr_name", "\n", "\n", "return", "exp_name", "\n", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.train.main": [[39, 142], ["random.seed", "numpy.random.seed", "pickle.load", "tqdm.tqdm", "len", "print", "math.floor", "pickle.load", "pickle.load", "print", "train.get_exp_name", "tf.GPUOptions", "open", "new_train_set.append", "open", "open", "len", "len", "tf.Session", "range", "pickle.load.keys", "pickle.load.keys", "model.modelTy", "model.modelTy.restore", "DataInputWSE_es.DataInput", "tqdm.tqdm", "util_se.calculate_group_metric", "model.modelTy", "sess.run", "sess.run", "str", "os.path.exists", "os.mkdir", "random.shuffle", "DataInputWSE_es.DataInput", "DataInputWSE_es.DataInput", "tqdm.tqdm", "print", "print", "tf.ConfigProto", "enumerate", "model.modelTy.test", "eval_user.extend", "eval_preds.extend", "eval_labels.extend", "print", "tf.global_variables_initializer", "tf.local_variables_initializer", "enumerate", "int", "model.modelTy.train", "int", "tqdm.tqdm", "util_se.calculate_group_metric", "str", "time.time", "time.time", "enumerate", "model.modelTy.test", "eval_user.extend", "eval_preds.extend", "eval_labels.extend", "print", "model.modelTy.save", "len", "len", "str", "len", "len", "str", "str"], "function", ["home.repos.pwc.inspect_result.whuir_mgnm.code.train.get_exp_name", "home.repos.pwc.inspect_result.whuir_mgnm.code.model.myModel.restore", "home.repos.pwc.inspect_result.whuir_mgnm.code.util_se.calculate_group_metric", "home.repos.pwc.inspect_result.whuir_mgnm.code.model.myModel.test", "home.repos.pwc.inspect_result.whuir_mgnm.code.model.myModel.train", "home.repos.pwc.inspect_result.whuir_mgnm.code.util_se.calculate_group_metric", "home.repos.pwc.inspect_result.whuir_mgnm.code.model.myModel.test", "home.repos.pwc.inspect_result.whuir_mgnm.code.model.myModel.save"], ["", "def", "main", "(", ")", ":", "\n", "    ", "random", ".", "seed", "(", "1234", ")", "\n", "np", ".", "random", ".", "seed", "(", "1234", ")", "\n", "\n", "# Hyper parameter", "\n", "USE_CKPT", "=", "False", "\n", "\n", "train_data", "=", "'../clear_data/{}_train_set.pkl'", ".", "format", "(", "DATASET", ")", "\n", "\n", "train_set", "=", "pickle", ".", "load", "(", "open", "(", "train_data", ",", "'rb'", ")", ")", "\n", "new_train_set", "=", "[", "]", "\n", "last_time", "=", "0", "\n", "for", "item", "in", "tqdm", "(", "train_set", ")", ":", "\n", "        ", "assert", "last_time", "<=", "item", "[", "4", "]", "\n", "assert", "'1'", "==", "item", "[", "3", "]", "\n", "last_time", "=", "item", "[", "4", "]", "\n", "new_train_set", ".", "append", "(", "item", ")", "\n", "\n", "", "train_set_", "=", "new_train_set", "\n", "del", "new_train_set", "\n", "\n", "all_records_len", "=", "len", "(", "train_set_", ")", "\n", "print", "(", "'all records: {}'", ".", "format", "(", "all_records_len", ")", ")", "\n", "len_1_5", "=", "all_records_len", "//", "5", "\n", "\n", "train_count", "=", "math", ".", "floor", "(", "all_records_len", "*", "0.7", ")", "\n", "\n", "test_set", "=", "train_set", "[", "-", "len_1_5", ":", "]", "\n", "train_set", "=", "train_set", "[", ":", "train_count", "]", "\n", "\n", "user2id", "=", "pickle", ".", "load", "(", "open", "(", "'../clear_data/{}_user2id.pkl'", ".", "format", "(", "DATASET", ")", ",", "'rb'", ")", ")", "\n", "item2id", "=", "pickle", ".", "load", "(", "open", "(", "'../clear_data/{}_item2id.pkl'", ".", "format", "(", "DATASET", ")", ",", "'rb'", ")", ")", "\n", "\n", "user_count", "=", "len", "(", "user2id", ".", "keys", "(", ")", ")", "+", "1", "\n", "item_count", "=", "len", "(", "item2id", ".", "keys", "(", ")", ")", "+", "1", "\n", "print", "(", "'user_count: {}, item_count: {}'", ".", "format", "(", "user_count", ",", "item_count", ")", ")", "\n", "\n", "best_auc", "=", "0.", "\n", "\n", "exp_name", "=", "get_exp_name", "(", "DATASET", ",", "\"user2graph\"", ",", "BATCH_SIZE", ",", "LEARNING_RATE", ",", "SEQ_LEN", ")", "\n", "best_model_path", "=", "'best_model/'", "+", "exp_name", "+", "'/'", "\n", "gpu_options", "=", "tf", ".", "GPUOptions", "(", "allow_growth", "=", "True", ")", "\n", "\n", "with", "tf", ".", "Session", "(", "config", "=", "tf", ".", "ConfigProto", "(", "gpu_options", "=", "gpu_options", ")", ")", "as", "sess", ":", "\n", "        ", "if", "USE_CKPT", ":", "\n", "            ", "model", "=", "modelTy", "(", "item_count", ",", "user_count", ",", "DIMENSION", ",", "2002", ",", "SEQ_LEN", ",", "NEG_NUM", ",", "HIDDEN_SIZE", ",", "NUM_PREFERENCE", ",", "NUM_LAYER", ",", "SE_NUM", ")", "\n", "model", ".", "restore", "(", "sess", ",", "'./best_model/CKPT_NAME/ckpt'", ")", "\n", "test_iter", "=", "DataInput", "(", "test_set", ",", "2", ",", "SEQ_LEN", ",", "1000", ",", "item_count", "-", "2", ",", "train_set", ",", "SE_NUM", ",", "init_es", "=", "False", ")", "\n", "eval_user", ",", "eval_preds", ",", "eval_labels", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "bid", ",", "uij", "in", "tqdm", "(", "enumerate", "(", "test_iter", ")", ",", "total", "=", "len", "(", "test_set", ")", "//", "2", ")", ":", "\n", "                ", "user", ",", "tgt", ",", "label", ",", "hist", ",", "mask", "=", "uij", "\n", "logits", "=", "model", ".", "test", "(", "sess", ",", "[", "user", ",", "tgt", ",", "hist", ",", "mask", "]", ")", "\n", "eval_user", ".", "extend", "(", "user", ")", "\n", "eval_preds", ".", "extend", "(", "logits", ")", "\n", "eval_labels", ".", "extend", "(", "label", ")", "\n", "", "metrics", "=", "calculate_group_metric", "(", "eval_labels", ",", "eval_preds", ",", "eval_user", ")", "\n", "for", "k", "in", "metrics", ":", "\n", "                ", "print", "(", "\"{}: {}\"", ".", "format", "(", "k", ",", "metrics", "[", "k", "]", ")", ")", "\n", "", "return", "\n", "", "else", ":", "\n", "            ", "model", "=", "modelTy", "(", "item_count", ",", "user_count", ",", "DIMENSION", ",", "BATCH_SIZE", ",", "SEQ_LEN", ",", "NEG_NUM", ",", "HIDDEN_SIZE", ",", "NUM_PREFERENCE", ",", "NUM_LAYER", ",", "SE_NUM", ")", "\n", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "sess", ".", "run", "(", "tf", ".", "local_variables_initializer", "(", ")", ")", "\n", "\n", "", "exp_name", "=", "EXP_NAME", "+", "'_'", "+", "str", "(", "DATASET", ")", "+", "'_seq'", "+", "str", "(", "SEQ_LEN", ")", "+", "'_se'", "+", "str", "(", "SE_NUM", ")", "+", "'_lr'", "+", "str", "(", "LEARNING_RATE", ")", "+", "'_BATCH'", "+", "str", "(", "BATCH_SIZE", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "'./best_model/'", "+", "exp_name", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "'./best_model/'", "+", "exp_name", ")", "\n", "\n", "", "for", "e", "in", "range", "(", "50", ")", ":", "\n", "            ", "random", ".", "shuffle", "(", "train_set", ")", "\n", "train_iter", "=", "DataInput", "(", "train_set", ",", "BATCH_SIZE", "//", "(", "NEG_NUM", "+", "1", ")", ",", "SEQ_LEN", ",", "NEG_NUM", ",", "item_count", "-", "2", ",", "train_set", ",", "SE_NUM", ",", "init_es", "=", "False", ")", "\n", "test_iter", "=", "DataInput", "(", "test_set", ",", "BATCH_SIZE", "//", "(", "NEG_NUM", "+", "1", ")", ",", "SEQ_LEN", ",", "NEG_NUM", ",", "item_count", "-", "2", ",", "train_set", ",", "SE_NUM", ",", "init_es", "=", "False", ")", "\n", "loss_sum", "=", "0.", "\n", "epoch_time", "=", "0.", "\n", "batch_num", "=", "0", "\n", "for", "batch_idx", ",", "uij", "in", "tqdm", "(", "enumerate", "(", "train_iter", ")", ",", "total", "=", "len", "(", "train_set", ")", "//", "REAL_BATCH_SIZE", ")", ":", "\n", "                ", "user", ",", "tgt", ",", "label", ",", "hist", ",", "mask", "=", "uij", "\n", "\n", "start_time", "=", "int", "(", "time", ".", "time", "(", ")", ")", "\n", "loss", "=", "model", ".", "train", "(", "sess", ",", "[", "user", ",", "tgt", ",", "hist", ",", "mask", ",", "label", ",", "LEARNING_RATE", "]", ")", "\n", "end_time", "=", "int", "(", "time", ".", "time", "(", ")", ")", "\n", "epoch_time", "+=", "(", "end_time", "-", "start_time", ")", "\n", "batch_num", "+=", "1", "\n", "\n", "loss_sum", "+=", "loss", "\n", "", "print", "(", "\"E Time: {}, AVG Batch Time: {}\"", ".", "format", "(", "epoch_time", ",", "epoch_time", "/", "batch_num", ")", ")", "\n", "print", "(", "\"Epoch{}, loss: {}\"", ".", "format", "(", "e", ",", "loss_sum", "/", "(", "len", "(", "train_set", ")", "//", "REAL_BATCH_SIZE", ")", ")", ")", "\n", "\n", "## eval", "\n", "if", "1", ":", "\n", "                ", "eval_user", ",", "eval_preds", ",", "eval_labels", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "bid", ",", "uij", "in", "tqdm", "(", "enumerate", "(", "test_iter", ")", ",", "total", "=", "len", "(", "test_set", ")", "//", "REAL_BATCH_SIZE", ")", ":", "\n", "                    ", "user", ",", "tgt", ",", "label", ",", "hist", ",", "mask", "=", "uij", "\n", "logits", "=", "model", ".", "test", "(", "sess", ",", "[", "user", ",", "tgt", ",", "hist", ",", "mask", "]", ")", "\n", "eval_user", ".", "extend", "(", "user", ")", "\n", "eval_preds", ".", "extend", "(", "logits", ")", "\n", "eval_labels", ".", "extend", "(", "label", ")", "\n", "", "metrics", "=", "calculate_group_metric", "(", "eval_labels", ",", "eval_preds", ",", "eval_user", ")", "\n", "for", "k", "in", "metrics", ":", "\n", "                    ", "print", "(", "\"{}: {}\"", ".", "format", "(", "k", ",", "metrics", "[", "k", "]", ")", ")", "\n", "", "if", "metrics", "[", "'gauc'", "]", ">", "best_auc", ":", "\n", "                    ", "model", ".", "save", "(", "sess", ",", "'./best_model/'", "+", "exp_name", "+", "'/'", "+", "'ckpt'", ")", "\n", "best_auc", "=", "metrics", "[", "'gauc'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.model.myModel.__init__": [[9, 43], ["tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.name_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.reshape", "tensorflow.random_normal_initializer"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "n_mid", ",", "\n", "n_user", ",", "\n", "embedding_dim", ",", "\n", "batch_size", ",", "\n", "seq_len", ",", "\n", "neg_num", "\n", ")", ":", "\n", "        ", "self", ".", "n_mid", "=", "n_mid", "\n", "self", ".", "n_user", "=", "n_user", "\n", "self", ".", "neg_num", "=", "neg_num", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "seq_len", "=", "seq_len", "\n", "\n", "with", "tf", ".", "name_scope", "(", "'inputs'", ")", ":", "\n", "            ", "self", ".", "mid_his_batch_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "None", "]", ",", "name", "=", "'mid_his_batch_ph'", ")", "\n", "self", ".", "uid_batch_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "]", ",", "name", "=", "'uid_batch_ph'", ")", "\n", "self", ".", "mid_batch_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "]", ",", "name", "=", "'mid_batch_ph'", ")", "\n", "self", ".", "mask", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "None", "]", ",", "name", "=", "'mask_batch_ph'", ")", "\n", "self", ".", "label", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "]", ",", "name", "=", "'label_batch_ph'", ")", "\n", "self", ".", "lr", "=", "tf", ".", "placeholder", "(", "tf", ".", "float64", ",", "[", "]", ",", "name", "=", "'lr'", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "'Embedding_layer'", ")", ":", "\n", "            ", "self", ".", "mid_embeddings_var", "=", "tf", ".", "get_variable", "(", "'mid_embedding_var'", ",", "[", "n_mid", ",", "embedding_dim", "]", ",", "trainable", "=", "True", ")", "\n", "self", ".", "user_embeddings_var", "=", "tf", ".", "get_variable", "(", "'uid_embedding_var'", ",", "[", "n_user", ",", "embedding_dim", "]", ",", "trainable", "=", "True", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "0", ",", "0.1", ")", ")", "\n", "\n", "self", ".", "mid_batch_embedded", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "mid_embeddings_var", ",", "self", ".", "mid_batch_ph", ")", "\n", "self", ".", "mid_his_batch_embedded", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "mid_embeddings_var", ",", "self", ".", "mid_his_batch_ph", ")", "\n", "self", ".", "uid_batch_embedded", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "user_embeddings_var", ",", "self", ".", "uid_batch_ph", ")", "\n", "\n", "", "self", ".", "item_eb", "=", "self", ".", "mid_batch_embedded", "\n", "self", ".", "user_eb", "=", "self", ".", "uid_batch_embedded", "\n", "self", ".", "item_his_eb", "=", "self", ".", "mid_his_batch_embedded", "*", "tf", ".", "reshape", "(", "self", ".", "mask", ",", "(", "-", "1", ",", "seq_len", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.model.myModel.build_multi_ce_loss": [[44, 61], ["range", "tensorflow.concat", "tensorflow.reduce_sum", "tensorflow.reduce_max", "range", "tensorflow.train.AdamOptimizer().minimize", "util_se.attn", "res.append", "tensorflow.reduce_sum", "loss.append", "tensorflow.add_n", "tensorflow.expand_dims", "tensorflow.reduce_sum", "tensorflow.expand_dims", "tensorflow.train.AdamOptimizer", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.l2_loss", "tensorflow.cast", "tensorflow.trainable_variables", "tensorflow.reshape", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.whuir_mgnm.code.util_se.attn"], ["", "def", "build_multi_ce_loss", "(", "self", ",", "item_emb", ",", "user_emb_list", ")", ":", "\n", "        ", "res", "=", "[", "]", "\n", "loss", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layer", ")", ":", "\n", "            ", "tmp", "=", "attn", "(", "item_emb", ",", "user_emb_list", "[", "i", "]", ")", "\n", "res", ".", "append", "(", "tf", ".", "expand_dims", "(", "tmp", ",", "axis", "=", "1", ")", ")", "\n", "logits_tmp", "=", "tf", ".", "reduce_sum", "(", "item_emb", "*", "tmp", ",", "axis", "=", "-", "1", ")", "\n", "loss", ".", "append", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "labels", "=", "tf", ".", "reshape", "(", "self", ".", "label", ",", "(", "-", "1", ",", ")", ")", ",", "logits", "=", "tf", ".", "reshape", "(", "logits_tmp", ",", "(", "-", "1", ",", ")", ")", ")", ")", ")", "\n", "", "res_concated", "=", "tf", ".", "concat", "(", "res", ",", "axis", "=", "1", ")", "\n", "logits_", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "expand_dims", "(", "item_emb", ",", "axis", "=", "1", ")", "*", "res_concated", ",", "axis", "=", "-", "1", ")", "\n", "self", ".", "logits", "=", "tf", ".", "reduce_max", "(", "logits_", ",", "axis", "=", "-", "1", ")", "\n", "l2_loss", "=", "1e-5", "*", "tf", ".", "add_n", "(", "[", "tf", ".", "nn", ".", "l2_loss", "(", "tf", ".", "cast", "(", "v", ",", "tf", ".", "float32", ")", ")", "for", "v", "in", "tf", ".", "trainable_variables", "(", ")", "]", ")", "\n", "self", ".", "loss", "=", "l2_loss", "+", "1e-5", "*", "self", ".", "adj_l1", "#loss[0] + loss[1] + loss[2] + loss[3] + l2_loss + 1e-5*self.adj_l1", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layer", ")", ":", "\n", "            ", "self", ".", "loss", "+=", "loss", "[", "i", "]", "\n", "#self.loss = tf.reduce_sum(tf.nn.sigmoid_cross_entropy_with_logits(labels=tf.reshape(self.label, (-1, )), logits=tf.reshape(self.logits, (-1, )))) + l2_loss", "\n", "", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.model.myModel.build_ce_loss": [[62, 69], ["util_se.attn", "tensorflow.reduce_sum", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.add_n", "tensorflow.reduce_sum", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.train.AdamOptimizer", "tensorflow.nn.l2_loss", "tensorflow.cast", "tensorflow.trainable_variables", "tensorflow.reshape", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.whuir_mgnm.code.util_se.attn"], ["", "def", "build_ce_loss", "(", "self", ",", "item_emb", ",", "user_emb", ")", ":", "\n", "        ", "res", "=", "attn", "(", "item_emb", ",", "user_emb", ")", "\n", "weight_decay", "=", "1e-5", "\n", "l2_loss", "=", "weight_decay", "*", "tf", ".", "add_n", "(", "[", "tf", ".", "nn", ".", "l2_loss", "(", "tf", ".", "cast", "(", "v", ",", "tf", ".", "float32", ")", ")", "for", "v", "in", "tf", ".", "trainable_variables", "(", ")", "]", ")", "\n", "self", ".", "logits", "=", "tf", ".", "reduce_sum", "(", "item_emb", "*", "res", ",", "axis", "=", "-", "1", ")", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "labels", "=", "tf", ".", "reshape", "(", "self", ".", "label", ",", "(", "-", "1", ",", ")", ")", ",", "logits", "=", "tf", ".", "reshape", "(", "self", ".", "logits", ",", "(", "-", "1", ",", ")", ")", ")", ")", "+", "l2_loss", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.model.myModel.train": [[70, 81], ["sess.run"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "sess", ",", "inps", ")", ":", "\n", "        ", "feed_dict", "=", "{", "\n", "self", ".", "uid_batch_ph", ":", "inps", "[", "0", "]", ",", "\n", "self", ".", "mid_batch_ph", ":", "inps", "[", "1", "]", ",", "\n", "self", ".", "mid_his_batch_ph", ":", "inps", "[", "2", "]", ",", "\n", "self", ".", "mask", ":", "inps", "[", "3", "]", ",", "\n", "self", ".", "label", ":", "inps", "[", "4", "]", ",", "\n", "self", ".", "lr", ":", "inps", "[", "5", "]", ",", "\n", "}", "\n", "loss", ",", "_", "=", "sess", ".", "run", "(", "[", "self", ".", "loss", ",", "self", ".", "optimizer", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.model.myModel.test": [[82, 91], ["sess.run"], "methods", ["None"], ["", "def", "test", "(", "self", ",", "sess", ",", "inps", ")", ":", "\n", "        ", "feed_dict", "=", "{", "\n", "self", ".", "uid_batch_ph", ":", "inps", "[", "0", "]", ",", "\n", "self", ".", "mid_batch_ph", ":", "inps", "[", "1", "]", ",", "\n", "self", ".", "mid_his_batch_ph", ":", "inps", "[", "2", "]", ",", "\n", "self", ".", "mask", ":", "inps", "[", "3", "]", ",", "\n", "}", "\n", "logits", "=", "sess", ".", "run", "(", "self", ".", "logits", ",", "feed_dict", "=", "feed_dict", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.model.myModel.save": [[92, 97], ["tensorflow.train.Saver", "tensorflow.train.Saver.save", "os.path.exists", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.whuir_mgnm.code.model.myModel.save"], ["", "def", "save", "(", "self", ",", "sess", ",", "path", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "saver", ".", "save", "(", "sess", ",", "path", "+", "'model.ckpt'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.model.myModel.restore": [[98, 102], ["tensorflow.train.Saver", "tensorflow.train.Saver.restore", "print"], "methods", ["home.repos.pwc.inspect_result.whuir_mgnm.code.model.myModel.restore"], ["", "def", "restore", "(", "self", ",", "sess", ",", "path", ")", ":", "\n", "        ", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "saver", ".", "restore", "(", "sess", ",", "path", "+", "'model.ckpt'", ")", "\n", "print", "(", "'model restored from %s'", "%", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.model.CapsuleNetwork.__init__": [[115, 125], ["super().__init__", "print"], "methods", ["home.repos.pwc.inspect_result.whuir_mgnm.code.util_se.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "seq_len", ",", "bilinear_type", "=", "2", ",", "num_interest", "=", "4", ",", "hard_readout", "=", "True", ",", "relu_layer", "=", "False", ")", ":", "\n", "        ", "super", "(", "CapsuleNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "seq_len", "=", "seq_len", "\n", "self", ".", "bilinear_type", "=", "bilinear_type", "\n", "self", ".", "num_interest", "=", "num_interest", "\n", "self", ".", "hard_readout", "=", "hard_readout", "\n", "self", ".", "relu_layer", "=", "relu_layer", "\n", "self", ".", "stop_grad", "=", "True", "\n", "print", "(", "'bilinear_type:'", ",", "bilinear_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.model.CapsuleNetwork._birnn": [[126, 137], ["tensorflow.unstack", "tensorflow.variable_scope", "tensorflow.contrib.rnn.BasicLSTMCell", "tensorflow.contrib.rnn.BasicLSTMCell", "tensorflow.contrib.rnn.static_bidirectional_rnn", "tensorflow.concat", "tensorflow.reshape", "tensorflow.layers.dense"], "methods", ["None"], ["", "def", "_birnn", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "tf", ".", "unstack", "(", "x", ",", "self", ".", "seq_len", ",", "1", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"bilstm\"", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "            ", "lstm_fw_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "BasicLSTMCell", "(", "self", ".", "dim", ")", "\n", "lstm_bw_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "BasicLSTMCell", "(", "self", ".", "dim", ")", "\n", "outputs", ",", "_", ",", "_", "=", "tf", ".", "contrib", ".", "rnn", ".", "static_bidirectional_rnn", "(", "lstm_fw_cell", ",", "lstm_bw_cell", ",", "x", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "output", "=", "tf", ".", "concat", "(", "outputs", ",", "axis", "=", "0", ")", "\n", "output", "=", "tf", ".", "reshape", "(", "output", ",", "(", "-", "1", ",", "self", ".", "seq_len", ",", "self", ".", "dim", "*", "2", ")", ")", "\n", "output", "=", "tf", ".", "layers", ".", "dense", "(", "output", ",", "self", ".", "dim", "*", "self", ".", "num_interest", ",", "activation", "=", "None", ",", "use_bias", "=", "False", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.model.CapsuleNetwork._rnn": [[138, 147], ["tensorflow.nn.dynamic_rnn", "tensorflow.concat", "tensorflow.reshape", "tensorflow.layers.dense", "tensorflow.variable_scope", "tensorflow.contrib.rnn.BasicLSTMCell"], "methods", ["None"], ["", "def", "_rnn", "(", "self", ",", "x", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "\"lstm\"", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "            ", "lstm_fw_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "BasicLSTMCell", "(", "self", ".", "dim", "*", "2", ",", "forget_bias", "=", "1.0", ")", "\n", "", "outputs", ",", "_", ",", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "lstm_fw_cell", ",", "x", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "output", "=", "tf", ".", "concat", "(", "outputs", ",", "axis", "=", "0", ")", "\n", "output", "=", "tf", ".", "reshape", "(", "output", ",", "(", "-", "1", ",", "self", ".", "seq_len", ",", "self", ".", "dim", "*", "2", ")", ")", "\n", "output", "=", "tf", ".", "layers", ".", "dense", "(", "output", ",", "self", ".", "dim", "*", "self", ".", "num_interest", ",", "activation", "=", "None", ",", "use_bias", "=", "False", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.model.CapsuleNetwork.call": [[149, 223], ["tensorflow.reshape", "tensorflow.transpose", "tensorflow.stop_gradient", "range", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.nn.softmax", "tensorflow.variable_scope", "tensorflow.stop_gradient", "tensorflow.truncated_normal", "tensorflow.tile", "tensorflow.zeros_like", "tensorflow.nn.softmax", "tensorflow.where", "tensorflow.expand_dims", "tensorflow.layers.dense", "tensorflow.reshape", "tensorflow.pow", "tensorflow.gather", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.layers.dense", "tensorflow.tile", "tensorflow.expand_dims", "tensorflow.equal", "tensorflow.matmul", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.reduce_sum", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "model.CapsuleNetwork._rnn", "tensorflow.get_variable", "tensorflow.expand_dims", "tensorflow.reduce_sum", "tensorflow.square", "tensorflow.sqrt", "tensorflow.transpose", "model.CapsuleNetwork._birnn", "tensorflow.stop_gradient", "tensorflow.square", "tensorflow.sqrt", "tensorflow.argmax", "tensorflow.reverse", "model.get_shape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.stop_gradient", "tensorflow.range", "model.get_shape", "tensorflow.random_normal_initializer", "tensorflow.stop_gradient", "model.get_shape", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.whuir_mgnm.code.model.CapsuleNetwork._rnn", "home.repos.pwc.inspect_result.whuir_mgnm.code.model.CapsuleNetwork._birnn", "home.repos.pwc.inspect_result.whuir_mgnm.code.model.get_shape", "home.repos.pwc.inspect_result.whuir_mgnm.code.model.get_shape", "home.repos.pwc.inspect_result.whuir_mgnm.code.model.get_shape"], ["", "def", "call", "(", "self", ",", "item_his_emb", ",", "item_eb", ",", "mask", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'bilinear'", ")", ":", "\n", "            ", "if", "self", ".", "bilinear_type", "==", "0", ":", "\n", "                ", "item_emb_hat", "=", "tf", ".", "layers", ".", "dense", "(", "item_his_emb", ",", "self", ".", "dim", ",", "activation", "=", "None", ",", "bias_initializer", "=", "None", ")", "\n", "item_emb_hat", "=", "tf", ".", "tile", "(", "item_emb_hat", ",", "[", "1", ",", "1", ",", "self", ".", "num_interest", "]", ")", "\n", "", "elif", "self", ".", "bilinear_type", "==", "1", ":", "\n", "#item_emb_hat = tf.layers.dense(item_his_emb, self.dim * self.num_interest, activation=None, bias_initializer=None)", "\n", "                ", "item_emb_hat", "=", "self", ".", "_rnn", "(", "tf", ".", "reverse", "(", "item_his_emb", ",", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "w", "=", "tf", ".", "get_variable", "(", "\n", "'weights'", ",", "shape", "=", "[", "1", ",", "self", ".", "seq_len", ",", "self", ".", "num_interest", "*", "self", ".", "dim", ",", "self", ".", "dim", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", ")", ")", "\n", "# [N, T, 1, C]", "\n", "u", "=", "tf", ".", "expand_dims", "(", "item_his_emb", ",", "axis", "=", "2", ")", "\n", "# [N, T, num_caps * dim_caps]", "\n", "item_emb_hat", "=", "tf", ".", "reduce_sum", "(", "w", "[", ":", ",", ":", "self", ".", "seq_len", ",", ":", ",", ":", "]", "*", "u", ",", "axis", "=", "3", ")", "\n", "#item_emb_hat_t = self._birnn(item_his_emb)", "\n", "", "", "item_emb_hat", "=", "tf", ".", "reshape", "(", "item_emb_hat", ",", "[", "-", "1", ",", "self", ".", "seq_len", ",", "self", ".", "num_interest", ",", "self", ".", "dim", "]", ")", "\n", "item_emb_hat", "=", "tf", ".", "transpose", "(", "item_emb_hat", ",", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "#item_emb_hat_t = tf.reshape(item_emb_hat_t, [-1, self.num_interest, self.seq_len, self.dim])", "\n", "\n", "if", "self", ".", "stop_grad", ":", "\n", "            ", "item_emb_hat_iter", "=", "tf", ".", "stop_gradient", "(", "item_emb_hat", ",", "name", "=", "'item_emb_hat_iter'", ")", "\n", "", "else", ":", "\n", "            ", "item_emb_hat_iter", "=", "item_emb_hat", "\n", "\n", "", "capsule_weight", "=", "tf", ".", "stop_gradient", "(", "tf", ".", "truncated_normal", "(", "[", "get_shape", "(", "item_his_emb", ")", "[", "0", "]", ",", "self", ".", "num_interest", ",", "self", ".", "seq_len", "]", ",", "stddev", "=", "1.0", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "atten_mask", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "mask", ",", "axis", "=", "1", ")", ",", "[", "1", ",", "self", ".", "num_interest", ",", "1", "]", ")", "\n", "paddings", "=", "tf", ".", "zeros_like", "(", "atten_mask", ")", "\n", "\n", "capsule_softmax_weight", "=", "tf", ".", "nn", ".", "softmax", "(", "capsule_weight", ",", "axis", "=", "1", ")", "\n", "capsule_softmax_weight", "=", "tf", ".", "where", "(", "tf", ".", "equal", "(", "atten_mask", ",", "0", ")", ",", "paddings", ",", "capsule_softmax_weight", ")", "\n", "capsule_softmax_weight", "=", "tf", ".", "expand_dims", "(", "capsule_softmax_weight", ",", "2", ")", "\n", "\n", "if", "i", "<", "2", ":", "\n", "                ", "interest_capsule", "=", "tf", ".", "matmul", "(", "capsule_softmax_weight", ",", "item_emb_hat_iter", ")", "\n", "cap_norm", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "interest_capsule", ")", ",", "-", "1", ",", "True", ")", "\n", "scalar_factor", "=", "cap_norm", "/", "(", "1", "+", "cap_norm", ")", "/", "tf", ".", "sqrt", "(", "cap_norm", "+", "1e-9", ")", "\n", "interest_capsule", "=", "scalar_factor", "*", "interest_capsule", "\n", "\n", "delta_weight", "=", "tf", ".", "matmul", "(", "item_emb_hat_iter", ",", "tf", ".", "transpose", "(", "interest_capsule", ",", "[", "0", ",", "1", ",", "3", ",", "2", "]", ")", ")", "\n", "delta_weight", "=", "tf", ".", "reshape", "(", "delta_weight", ",", "[", "-", "1", ",", "self", ".", "num_interest", ",", "self", ".", "seq_len", "]", ")", "\n", "\n", "#delta_weight_t = tf.matmul(item_emb_hat_iter_t, tf.transpose(interest_capsule, [0, 1, 3, 2]))", "\n", "#delta_weight_t = tf.reshape(delta_weight_t, [-1, self.num_interest, self.seq_len])", "\n", "capsule_weight", "=", "capsule_weight", "+", "delta_weight", "\n", "if", "i", "==", "0", ":", "\n", "                    ", "item_emb_hat_iter", "=", "self", ".", "_birnn", "(", "tf", ".", "reshape", "(", "tf", ".", "stop_gradient", "(", "item_emb_hat_iter", ")", ",", "[", "-", "1", ",", "self", ".", "seq_len", ",", "self", ".", "num_interest", "*", "self", ".", "dim", "]", ")", ")", "\n", "item_emb_hat_iter", "=", "tf", ".", "reshape", "(", "item_emb_hat_iter", ",", "[", "-", "1", ",", "self", ".", "num_interest", ",", "self", ".", "seq_len", ",", "self", ".", "dim", "]", ")", "+", "tf", ".", "stop_gradient", "(", "item_emb_hat", ")", "\n", "", "else", ":", "\n", "                    ", "item_emb_hat_iter", "=", "tf", ".", "stop_gradient", "(", "item_emb_hat", ")", "\n", "", "", "else", ":", "\n", "                ", "interest_capsule", "=", "tf", ".", "matmul", "(", "capsule_softmax_weight", ",", "item_emb_hat", ")", "\n", "cap_norm", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "interest_capsule", ")", ",", "-", "1", ",", "True", ")", "\n", "scalar_factor", "=", "cap_norm", "/", "(", "1", "+", "cap_norm", ")", "/", "tf", ".", "sqrt", "(", "cap_norm", "+", "1e-9", ")", "\n", "interest_capsule", "=", "scalar_factor", "*", "interest_capsule", "\n", "\n", "", "", "interest_capsule", "=", "tf", ".", "reshape", "(", "interest_capsule", ",", "[", "-", "1", ",", "self", ".", "num_interest", ",", "self", ".", "dim", "]", ")", "\n", "\n", "if", "self", ".", "relu_layer", ":", "\n", "            ", "interest_capsule", "=", "tf", ".", "layers", ".", "dense", "(", "interest_capsule", ",", "self", ".", "dim", ",", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "name", "=", "'proj'", ")", "\n", "\n", "", "atten", "=", "tf", ".", "matmul", "(", "interest_capsule", ",", "tf", ".", "reshape", "(", "item_eb", ",", "[", "-", "1", ",", "self", ".", "dim", ",", "1", "]", ")", ")", "\n", "atten", "=", "tf", ".", "nn", ".", "softmax", "(", "tf", ".", "pow", "(", "tf", ".", "reshape", "(", "atten", ",", "[", "-", "1", ",", "self", ".", "num_interest", "]", ")", ",", "1", ")", ")", "\n", "\n", "if", "self", ".", "hard_readout", ":", "\n", "            ", "readout", "=", "tf", ".", "gather", "(", "tf", ".", "reshape", "(", "interest_capsule", ",", "[", "-", "1", ",", "self", ".", "dim", "]", ")", ",", "tf", ".", "argmax", "(", "atten", ",", "axis", "=", "1", ",", "output_type", "=", "tf", ".", "int32", ")", "+", "tf", ".", "range", "(", "tf", ".", "shape", "(", "item_his_emb", ")", "[", "0", "]", ")", "*", "self", ".", "num_interest", ")", "\n", "", "else", ":", "\n", "            ", "readout", "=", "tf", ".", "matmul", "(", "tf", ".", "reshape", "(", "atten", ",", "[", "get_shape", "(", "item_his_emb", ")", "[", "0", "]", ",", "1", ",", "self", ".", "num_interest", "]", ")", ",", "interest_capsule", ")", "\n", "readout", "=", "tf", ".", "reshape", "(", "readout", ",", "[", "get_shape", "(", "item_his_emb", ")", "[", "0", "]", ",", "self", ".", "dim", "]", ")", "\n", "\n", "", "return", "interest_capsule", ",", "readout", "\n", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.model.modelTy.__init__": [[237, 298], ["model.myModel.__init__", "tensorflow.tile", "tensorflow.tile", "tensorflow.norm", "util_se._create_gcn_emb", "model.CapsuleNetwork", "tensorflow.slice", "range", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.nn.sigmoid", "tensorflow.multiply", "tensorflow.expand_dims", "tensorflow.nn.sigmoid", "model.normalize_adj_tensor", "CapsuleNetwork.", "user_eb_list.append", "len", "model.modelTy.build_ce_loss", "model.modelTy.build_multi_ce_loss", "tensorflow.reduce_sum", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.reduce_sum", "tensorflow.expand_dims", "tensorflow.expand_dims"], "methods", ["home.repos.pwc.inspect_result.whuir_mgnm.code.util_se.Transformer.__init__", "home.repos.pwc.inspect_result.whuir_mgnm.code.util_se._create_gcn_emb", "home.repos.pwc.inspect_result.whuir_mgnm.code.model.normalize_adj_tensor", "home.repos.pwc.inspect_result.whuir_mgnm.code.model.myModel.build_ce_loss", "home.repos.pwc.inspect_result.whuir_mgnm.code.model.myModel.build_multi_ce_loss"], ["    ", "def", "__init__", "(", "self", ",", "\n", "n_mid", ",", "\n", "n_user", ",", "\n", "embedding_dim", ",", "\n", "batch_size", ",", "\n", "seq_len", ",", "\n", "neg_num", ",", "\n", "hidden_size", ",", "\n", "num_interest", ",", "\n", "num_layer", ",", "\n", "se_num", ",", "\n", "norm_adj", "=", "False", ",", "\n", "hard_readout", "=", "True", ",", "\n", "relu_layer", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", "modelTy", ",", "self", ")", ".", "__init__", "(", "n_mid", ",", "\n", "n_user", ",", "\n", "embedding_dim", ",", "\n", "batch_size", ",", "\n", "seq_len", "+", "se_num", ",", "\n", "neg_num", ")", "\n", "self", ".", "num_layer", "=", "num_layer", "\n", "adj_l", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "self", ".", "item_his_eb", ",", "axis", "=", "2", ")", ",", "[", "1", ",", "1", ",", "seq_len", "+", "se_num", ",", "1", "]", ")", "\n", "adj_r", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "self", ".", "item_his_eb", ",", "axis", "=", "1", ")", ",", "[", "1", ",", "seq_len", "+", "se_num", ",", "1", ",", "1", "]", ")", "\n", "\n", "# whether apply user_emb", "\n", "if", "1", ":", "\n", "            ", "adj", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "reduce_sum", "(", "adj_l", "*", "adj_r", ",", "axis", "=", "-", "1", ")", ")", "#tf.concat([adj_l, adj_r], axis=3)", "\n", "adj", "=", "adj", "*", "tf", ".", "expand_dims", "(", "self", ".", "mask", ",", "axis", "=", "1", ")", "\n", "adj", "=", "adj", "*", "tf", ".", "expand_dims", "(", "self", ".", "mask", ",", "axis", "=", "2", ")", "\n", "\n", "", "else", ":", "\n", "\t        ", "adj_node", "=", "tf", ".", "multiply", "(", "adj_l", ",", "adj_r", ")", "\n", "adj_user", "=", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "self", ".", "user_eb", ",", "axis", "=", "1", ")", ",", "axis", "=", "2", ")", "\n", "adj", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "reduce_sum", "(", "adj_node", "*", "adj_user", ",", "axis", "=", "-", "1", ")", ")", "\n", "adj", "=", "adj", "*", "tf", ".", "expand_dims", "(", "self", ".", "mask", ",", "axis", "=", "1", ")", "\n", "adj", "=", "adj", "*", "tf", ".", "expand_dims", "(", "self", ".", "mask", ",", "axis", "=", "2", ")", "\n", "\n", "", "self", ".", "adj_l1", "=", "tf", ".", "norm", "(", "adj", ",", "ord", "=", "1", ")", "\n", "\n", "if", "norm_adj", ":", "\n", "            ", "adj", "=", "normalize_adj_tensor", "(", "adj", ",", "seq_len", ")", "\n", "#all_embedding = [_create_gat_emb(self.mid_his_batch_embedded, [4, 1], [seq_len, embedding_dim], 0.2, 0.2, adj)]", "\n", "", "all_embedding", "=", "_create_gcn_emb", "(", "adj", ",", "self", ".", "mid_his_batch_embedded", ",", "num_layer", "-", "1", ",", "embedding_dim", ",", "se_num", ",", "batch_size", ",", "seq_len", ",", "layer_size", "=", "[", "embedding_dim", ",", "embedding_dim", ",", "embedding_dim", "]", ")", "\n", "#self.item_his_eb = all_embedding[-1] * tf.reshape(self.mask, (-1, seq_len, 1))", "\n", "\n", "capsule_network", "=", "CapsuleNetwork", "(", "hidden_size", ",", "seq_len", ",", "bilinear_type", "=", "2", ",", "num_interest", "=", "num_interest", ",", "hard_readout", "=", "hard_readout", ",", "relu_layer", "=", "relu_layer", ")", "\n", "user_eb_list", "=", "[", "]", "\n", "mask_new", "=", "tf", ".", "slice", "(", "self", ".", "mask", ",", "[", "0", ",", "se_num", "]", ",", "[", "batch_size", ",", "seq_len", "]", ")", "\n", "for", "l", "in", "range", "(", "num_layer", ")", ":", "\n", "            ", "user_eb", ",", "_", "=", "capsule_network", "(", "all_embedding", "[", "l", "]", ",", "self", ".", "item_eb", ",", "mask_new", ")", "\n", "user_eb_list", ".", "append", "(", "user_eb", ")", "\n", "\n", "\n", "#self.build_ce_loss(self.item_eb, tf.concat(user_eb_list, axis=1))", "\n", "\n", "\n", "", "if", "len", "(", "user_eb_list", ")", "==", "1", ":", "\n", "            ", "self", ".", "build_ce_loss", "(", "self", ".", "item_eb", ",", "user_eb_list", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "build_multi_ce_loss", "(", "self", ".", "item_eb", ",", "user_eb_list", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.whuir_mgnm.code.model.get_shape": [[104, 112], ["tensorflow.shape", "inputs.get_shape().as_list", "enumerate", "shape.append", "inputs.get_shape"], "function", ["home.repos.pwc.inspect_result.whuir_mgnm.code.model.get_shape"], ["", "", "def", "get_shape", "(", "inputs", ")", ":", "\n", "    ", "dynamic_shape", "=", "tf", ".", "shape", "(", "inputs", ")", "\n", "static_shape", "=", "inputs", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "shape", "=", "[", "]", "\n", "for", "i", ",", "dim", "in", "enumerate", "(", "static_shape", ")", ":", "\n", "        ", "shape", ".", "append", "(", "dim", "if", "dim", "is", "not", "None", "else", "dynamic_shape", "[", "i", "]", ")", "\n", "\n", "", "return", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.model.normalize_adj_tensor": [[225, 234], ["tensorflow.reduce_sum", "tensorflow.pow", "tensorflow.zeros_like", "tensorflow.where", "tensorflow.matrix_diag", "tensorflow.matmul", "tensorflow.expand_dims", "tensorflow.math.is_inf", "tensorflow.eye"], "function", ["None"], ["", "", "def", "normalize_adj_tensor", "(", "adj", ",", "seq_len", ")", ":", "\n", "    ", "adj", "=", "adj", "+", "tf", ".", "expand_dims", "(", "tf", ".", "eye", "(", "seq_len", ")", ",", "axis", "=", "0", ")", "\n", "rowsum", "=", "tf", ".", "reduce_sum", "(", "adj", ",", "axis", "=", "1", ")", "\n", "d_inv_sqrt", "=", "tf", ".", "pow", "(", "rowsum", ",", "-", "0.5", ")", "\n", "candidate_a", "=", "tf", ".", "zeros_like", "(", "d_inv_sqrt", ")", "\n", "d_inv_sqrt", "=", "tf", ".", "where", "(", "tf", ".", "math", ".", "is_inf", "(", "d_inv_sqrt", ")", ",", "candidate_a", ",", "d_inv_sqrt", ")", "\n", "d_mat_inv_sqrt", "=", "tf", ".", "matrix_diag", "(", "d_inv_sqrt", ")", "\n", "norm_adg", "=", "tf", ".", "matmul", "(", "d_mat_inv_sqrt", ",", "adj", ")", "\n", "return", "norm_adg", "\n", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.util_se.InvLinear.__init__": [[472, 487], ["super().__init__", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.glorot_uniform_initializer", "tensorflow.glorot_uniform_initializer", "tensorflow.random_uniform_initializer", "tensorflow.random_uniform_initializer"], "methods", ["home.repos.pwc.inspect_result.whuir_mgnm.code.util_se.Transformer.__init__"], ["def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "False", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "super", "(", "InvLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "assert", "reduction", "in", "[", "'mean'", ",", "'sum'", ",", "'max'", ",", "'min'", "]", ",", "'\\'reduction\\' should be \\'mean\\'/\\'sum\\'\\'max\\'/\\'min\\', got {}'", ".", "format", "(", "reduction", ")", "\n", "self", ".", "reduction", "=", "reduction", "\n", "\n", "self", ".", "beta", "=", "tf", ".", "get_variable", "(", "name", "=", "'beta'", ",", "shape", "=", "(", "self", ".", "in_features", ",", "self", ".", "out_features", ")", ",", "\n", "initializer", "=", "tf", ".", "glorot_uniform_initializer", "(", ")", ")", "\n", "# self.beta = nn.Parameter(torch.Tensor(self.in_features,", "\n", "#                                       self.out_features))", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "tf", ".", "get_variable", "(", "name", "=", "'bias'", ",", "shape", "=", "(", "1", ",", "self", ".", "out_features", ")", ",", "initializer", "=", "tf", ".", "random_uniform_initializer", "(", ")", ")", "\n", "# self.bias = nn.Parameter(torch.Tensor(1, self.out_features))", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.util_se.InvLinear.forward": [[498, 540], ["tensorflow.zeros", "tensorflow.zeros", "tensorflow.ones", "tensorflow.ones", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.reduce_sum", "tensorflow.reduce_sum"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "X", ",", "N", ",", "M", ",", "mask", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        Maps the input set X = {x_1, ..., x_M} to a vector y of dimension out_features,\n        through a permutation invariant linear transformation of the form:\n            $y = \\beta reduction(X) + bias$\n        Inputs:\n        X: N sets of size at most M where each element has dimension in_features\n           (tensor with shape (N, M, in_features))\n        mask: binary mask to indicate which elements in X are valid (byte tensor\n            with shape (N, M) or None); if None, all sets have the maximum size M.\n            Default: ``None``.\n        Outputs:\n        Y: N vectors of dimension out_features (tensor with shape (N, out_features))\n        \"\"\"", "\n", "\n", "y", "=", "tf", ".", "zeros", "(", "(", "N", ",", "self", ".", "out_features", ")", ")", "\n", "if", "mask", "is", "None", ":", "\n", "            ", "mask", "=", "tf", ".", "ones", "(", "(", "N", ",", "M", ")", ")", "\n", "\n", "", "if", "self", ".", "reduction", "==", "'mean'", ":", "\n", "            ", "sizes", "=", "tf", ".", "expand_dims", "(", "tf", ".", "reduce_sum", "(", "mask", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", "\n", "Z", "=", "X", "*", "tf", ".", "expand_dims", "(", "mask", ",", "axis", "=", "2", ")", "\n", "y", "=", "tf", ".", "matmul", "(", "tf", ".", "reduce_sum", "(", "Z", ",", "axis", "=", "1", ")", ",", "self", ".", "beta", ")", "/", "sizes", "\n", "\n", "", "elif", "self", ".", "reduction", "==", "'sum'", ":", "\n", "            ", "Z", "=", "X", "*", "tf", ".", "expand_dims", "(", "mask", ",", "axis", "=", "2", ")", "\n", "y", "=", "tf", ".", "matmul", "(", "tf", ".", "reduce_sum", "(", "Z", ",", "axis", "=", "1", ")", ",", "self", ".", "beta", ")", "\n", "\n", "#elif self.reduction == 'max':", "\n", "#    Z = X", "\n", "#    Z[~mask] = float('-Inf')", "\n", "#    y = Z.max(dim=1)[0] @ self.beta", "\n", "#", "\n", "# else:  # min", "\n", "#     Z = X.clone()", "\n", "#     Z[~mask] = float('Inf')", "\n", "#     y = Z.min(dim=1)[0] @ self.beta", "\n", "\n", "#if self.bias is not None:", "\n", "#    y += self.bias", "\n", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.util_se.InvLinear.extra_repr": [[541, 545], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'in_features={}, out_features={}, bias={}, reduction={}'", ".", "format", "(", "\n", "self", ".", "in_features", ",", "self", ".", "out_features", ",", "\n", "self", ".", "bias", "is", "not", "None", ",", "self", ".", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.util_se.BM25.__init__": [[547, 557], ["len", "util_se.BM25.init", "sum", "len"], "methods", ["home.repos.pwc.inspect_result.whuir_mgnm.code.util_se.BM25.init"], ["    ", "def", "__init__", "(", "self", ",", "docs", ")", ":", "\n", "        ", "self", ".", "D", "=", "len", "(", "docs", ")", "\n", "self", ".", "avgdl", "=", "sum", "(", "[", "len", "(", "doc", ")", "+", "0.0", "for", "doc", "in", "docs", "]", ")", "/", "self", ".", "D", "\n", "self", ".", "docs", "=", "docs", "\n", "self", ".", "f", "=", "[", "]", "# \u5217\u8868\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u662f\u4e00\u4e2adict\uff0cdict\u5b58\u50a8\u7740\u4e00\u4e2a\u6587\u6863\u4e2d\u6bcf\u4e2a\u8bcd\u7684\u51fa\u73b0\u6b21\u6570", "\n", "self", ".", "df", "=", "{", "}", "# \u5b58\u50a8\u6bcf\u4e2a\u8bcd\u53ca\u51fa\u73b0\u4e86\u8be5\u8bcd\u7684\u6587\u6863\u6570\u91cf", "\n", "self", ".", "idf", "=", "{", "}", "# \u5b58\u50a8\u6bcf\u4e2a\u8bcd\u7684idf\u503c", "\n", "self", ".", "k1", "=", "1.5", "\n", "self", ".", "b", "=", "0.75", "\n", "self", ".", "init", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.util_se.BM25.init": [[558, 568], ["util_se.BM25.df.items", "util_se.BM25.f.append", "tmp.keys", "math.log", "math.log", "tmp.get", "util_se.BM25.df.get"], "methods", ["None"], ["", "def", "init", "(", "self", ")", ":", "\n", "        ", "for", "doc", "in", "self", ".", "docs", ":", "\n", "            ", "tmp", "=", "{", "}", "\n", "for", "word", "in", "doc", ":", "\n", "                ", "tmp", "[", "word", "]", "=", "tmp", ".", "get", "(", "word", ",", "0", ")", "+", "1", "# \u5b58\u50a8\u6bcf\u4e2a\u6587\u6863\u4e2d\u6bcf\u4e2a\u8bcd\u7684\u51fa\u73b0\u6b21\u6570", "\n", "", "self", ".", "f", ".", "append", "(", "tmp", ")", "\n", "for", "k", "in", "tmp", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "df", "[", "k", "]", "=", "self", ".", "df", ".", "get", "(", "k", ",", "0", ")", "+", "1", "\n", "", "", "for", "k", ",", "v", "in", "self", ".", "df", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "idf", "[", "k", "]", "=", "math", ".", "log", "(", "self", ".", "D", "-", "v", "+", "0.5", ")", "-", "math", ".", "log", "(", "v", "+", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.util_se.BM25.sim": [[569, 579], ["len"], "methods", ["None"], ["", "", "def", "sim", "(", "self", ",", "doc", ",", "index", ")", ":", "\n", "        ", "score", "=", "0", "\n", "for", "word", "in", "doc", ":", "\n", "            ", "if", "word", "not", "in", "self", ".", "f", "[", "index", "]", ":", "\n", "                ", "continue", "\n", "", "d", "=", "len", "(", "self", ".", "docs", "[", "index", "]", ")", "\n", "score", "+=", "(", "self", ".", "idf", "[", "word", "]", "*", "self", ".", "f", "[", "index", "]", "[", "word", "]", "*", "(", "self", ".", "k1", "+", "1", ")", "\n", "/", "(", "self", ".", "f", "[", "index", "]", "[", "word", "]", "+", "self", ".", "k1", "*", "(", "1", "-", "self", ".", "b", "+", "self", ".", "b", "*", "d", "\n", "/", "self", ".", "avgdl", ")", ")", ")", "\n", "", "return", "score", "\n", "", "def", "simall", "(", "self", ",", "doc", ")", ":", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.util_se.BM25.simall": [[579, 585], ["range", "util_se.BM25.sim", "scores.append"], "methods", ["home.repos.pwc.inspect_result.whuir_mgnm.code.util_se.BM25.sim"], ["", "def", "simall", "(", "self", ",", "doc", ")", ":", "\n", "        ", "scores", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "self", ".", "D", ")", ":", "\n", "            ", "score", "=", "self", ".", "sim", "(", "doc", ",", "index", ")", "\n", "scores", ".", "append", "(", "score", ")", "\n", "", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.util_se.Sortnovel.__init__": [[587, 590], ["util_se.BM25"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "docs", ")", ":", "\n", "        ", "self", ".", "docs", "=", "docs", "#\u6240\u6709\u6587\u6863\u5217\u8868,\u8bcd\u8868\u793a", "\n", "self", ".", "bm25", "=", "BM25", "(", "docs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.util_se.Sortnovel.top": [[591, 602], ["list", "sorted", "list", "enumerate", "map", "util_se.Sortnovel.bm25.simall"], "methods", ["home.repos.pwc.inspect_result.whuir_mgnm.code.util_se.BM25.simall"], ["", "def", "top", "(", "self", ",", "query", ")", ":", "\n", "# [i1, i2, i3, ...]", "\n", "        ", "self", ".", "top", "=", "list", "(", "enumerate", "(", "self", ".", "bm25", ".", "simall", "(", "query", ")", ")", ")", "\n", "self", ".", "sorttop", "=", "sorted", "(", "self", ".", "top", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "#\u6392\u5e8f,\u533f\u540d\u51fd\u6570", "\n", "i", "=", "0", "\n", "self", ".", "list", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", "[", "0", "]", ",", "self", ".", "sorttop", ")", ")", "\n", "# print(self.list)    #\u8f93\u51fa\u5e8f\u53f7", "\n", "# for index in self.list:     #\u8f93\u51faid\uff0c\u4e66\u540d\uff0c\u5f97\u5206", "\n", "#     print(self.docs[index].novelid, self.novels[index].novelname, self.sorttop[i][1])", "\n", "#     i += 1", "\n", "return", "self", ".", "list", "\n", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.util_se.Sortnovel.top1": [[603, 613], ["list", "sorted", "enumerate", "list", "util_se.Sortnovel.bm25.simall", "map"], "methods", ["home.repos.pwc.inspect_result.whuir_mgnm.code.util_se.BM25.simall"], ["", "def", "top1", "(", "self", ",", "query", ",", "limit", "=", "10", ")", ":", "\n", "        ", "self", ".", "top", "=", "list", "(", "enumerate", "(", "self", ".", "bm25", ".", "simall", "(", "query", ")", ")", ")", "\n", "self", ".", "sorttop", "=", "sorted", "(", "self", ".", "top", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "#\u6392\u5e8f,\u533f\u540d\u51fd\u6570", "\n", "i", "=", "0", "\n", "self", ".", "list", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", "[", "0", "]", ",", "self", ".", "sorttop", ")", ")", "[", ":", "limit", "]", "\n", "# print(self.list)", "\n", "# for index in self.list[:limit]:", "\n", "#     print(self.novels[index].novelid, self.novels[index].novelname, self.sorttop[i][1])", "\n", "#     i += 1", "\n", "return", "self", ".", "list", "\n", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.util_se.Transformer.__init__": [[616, 622], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_heads", ",", "dimension", ",", "seq_len", ",", "dropout_rate", "=", "0.2", ",", "num_blocks", "=", "1", ")", ":", "\n", "        ", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "dropout_rate", "=", "dropout_rate", "\n", "self", ".", "num_blocks", "=", "num_blocks", "\n", "self", ".", "dimension", "=", "dimension", "\n", "self", ".", "seq_len", "=", "seq_len", "\n", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.util_se.Transformer.encode": [[623, 649], ["tensorflow.variable_scope", "tensorflow.variable_scope", "util_se.positional_encoding", "tensorflow.layers.dropout", "tensorflow.layers.dropout", "range", "tensorflow.variable_scope", "tensorflow.variable_scope", "util_se.multihead_attention", "util_se.ff"], "methods", ["home.repos.pwc.inspect_result.whuir_mgnm.code.util_se.positional_encoding", "home.repos.pwc.inspect_result.whuir_mgnm.code.util_se.multihead_attention", "home.repos.pwc.inspect_result.whuir_mgnm.code.util_se.ff"], ["", "def", "encode", "(", "self", ",", "xs", ",", "mask", ",", "training", "=", "True", ")", ":", "\n", "        ", "'''\n        xs: [B, seq_len, D]\n        Returns\n        memory: encoder outputs. (N, T1, d)\n        '''", "\n", "with", "tf", ".", "variable_scope", "(", "\"encoder\"", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "            ", "xs", "+=", "positional_encoding", "(", "xs", ",", "self", ".", "seq_len", ")", "\n", "xs", "=", "tf", ".", "layers", ".", "dropout", "(", "xs", ",", "self", ".", "dropout_rate", ",", "training", "=", "training", ")", "\n", "\n", "## Blocks", "\n", "for", "i", "in", "range", "(", "self", ".", "num_blocks", ")", ":", "\n", "                ", "with", "tf", ".", "variable_scope", "(", "\"num_blocks_{}\"", ".", "format", "(", "i", ")", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "# self-attention", "\n", "                    ", "xs", "=", "multihead_attention", "(", "queries", "=", "xs", ",", "\n", "keys", "=", "xs", ",", "\n", "values", "=", "xs", ",", "\n", "key_masks", "=", "mask", ",", "\n", "num_heads", "=", "self", ".", "num_heads", ",", "\n", "dropout_rate", "=", "self", ".", "dropout_rate", ",", "\n", "training", "=", "training", ",", "\n", "causality", "=", "False", ")", "\n", "# feed forward", "\n", "xs", "=", "ff", "(", "xs", ",", "num_units", "=", "[", "self", ".", "dimension", "*", "4", ",", "self", ".", "dimension", "*", "4", "]", ")", "\n", "", "", "", "memory", "=", "xs", "\n", "return", "memory", ",", "mask", "\n", "", "", ""]], "home.repos.pwc.inspect_result.whuir_mgnm.code.util_se.ln": [[9, 29], ["tensorflow.variable_scope", "inputs.get_shape", "tensorflow.nn.moments", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.zeros_initializer", "tensorflow.ones_initializer"], "function", ["home.repos.pwc.inspect_result.whuir_mgnm.code.model.get_shape"], ["def", "ln", "(", "inputs", ",", "epsilon", "=", "1e-8", ",", "scope", "=", "\"ln\"", ")", ":", "\n", "    ", "'''Applies layer normalization. See https://arxiv.org/abs/1607.06450.\n    inputs: A tensor with 2 or more dimensions, where the first dimension has `batch_size`.\n    epsilon: A floating number. A very small number for preventing ZeroDivision Error.\n    scope: Optional scope for `variable_scope`.\n\n    Returns:\n      A tensor with the same shape and data dtype as `inputs`.\n    '''", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "        ", "inputs_shape", "=", "inputs", ".", "get_shape", "(", ")", "\n", "params_shape", "=", "inputs_shape", "[", "-", "1", ":", "]", "\n", "\n", "mean", ",", "variance", "=", "tf", ".", "nn", ".", "moments", "(", "inputs", ",", "[", "-", "1", "]", ",", "keep_dims", "=", "True", ")", "\n", "beta", "=", "tf", ".", "get_variable", "(", "\"beta\"", ",", "params_shape", ",", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "gamma", "=", "tf", ".", "get_variable", "(", "\"gamma\"", ",", "params_shape", ",", "initializer", "=", "tf", ".", "ones_initializer", "(", ")", ")", "\n", "normalized", "=", "(", "inputs", "-", "mean", ")", "/", "(", "(", "variance", "+", "epsilon", ")", "**", "(", ".5", ")", ")", "\n", "outputs", "=", "gamma", "*", "normalized", "+", "beta", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.util_se.scaled_dot_product_attention": [[30, 75], ["tensorflow.variable_scope", "tensorflow.matmul", "tensorflow.nn.softmax", "tensorflow.transpose", "tensorflow.summary.image", "tensorflow.layers.dropout", "tensorflow.matmul", "Q.get_shape().as_list", "tensorflow.transpose", "tensorflow.expand_dims", "Q.get_shape"], "function", ["home.repos.pwc.inspect_result.whuir_mgnm.code.model.get_shape"], ["", "def", "scaled_dot_product_attention", "(", "Q", ",", "K", ",", "V", ",", "key_masks", ",", "\n", "causality", "=", "False", ",", "dropout_rate", "=", "0.", ",", "\n", "training", "=", "True", ",", "\n", "scope", "=", "\"scaled_dot_product_attention\"", ")", ":", "\n", "    ", "'''See 3.2.1.\n    Q: Packed queries. 3d tensor. [N, T_q, d_k].\n    K: Packed keys. 3d tensor. [N, T_k, d_k].\n    V: Packed values. 3d tensor. [N, T_k, d_v].\n    key_masks: A 2d tensor with shape of [N, key_seqlen]\n    causality: If True, applies masking for future blinding\n    dropout_rate: A floating point number of [0, 1].\n    training: boolean for controlling droput\n    scope: Optional scope for `variable_scope`.\n    '''", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "        ", "d_k", "=", "Q", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "\n", "# dot product", "\n", "outputs", "=", "tf", ".", "matmul", "(", "Q", ",", "tf", ".", "transpose", "(", "K", ",", "[", "0", ",", "2", ",", "1", "]", ")", ")", "# (N, T_q, T_k)", "\n", "\n", "# scale", "\n", "outputs", "/=", "d_k", "**", "0.5", "\n", "\n", "# # key masking", "\n", "# outputs = mask(outputs, key_masks=key_masks, type=\"key\")", "\n", "#", "\n", "# # causality or future blinding masking", "\n", "# if causality:", "\n", "#     outputs = mask(outputs, type=\"future\")", "\n", "\n", "# softmax", "\n", "outputs", "=", "tf", ".", "nn", ".", "softmax", "(", "outputs", ")", "\n", "attention", "=", "tf", ".", "transpose", "(", "outputs", ",", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "tf", ".", "summary", ".", "image", "(", "\"attention\"", ",", "tf", ".", "expand_dims", "(", "attention", "[", ":", "1", "]", ",", "-", "1", ")", ")", "\n", "\n", "# # query masking", "\n", "# outputs = mask(outputs, Q, K, type=\"query\")", "\n", "\n", "# dropout", "\n", "outputs", "=", "tf", ".", "layers", ".", "dropout", "(", "outputs", ",", "rate", "=", "dropout_rate", ",", "training", "=", "training", ")", "\n", "\n", "# weighted sum (context vectors)", "\n", "outputs", "=", "tf", ".", "matmul", "(", "outputs", ",", "V", ")", "# (N, T_q, d_v)", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.util_se.multihead_attention": [[76, 121], ["queries.get_shape().as_list", "tensorflow.variable_scope", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "util_se.scaled_dot_product_attention", "tensorflow.concat", "util_se.ln", "tensorflow.split", "tensorflow.split", "tensorflow.split", "tensorflow.split", "queries.get_shape"], "function", ["home.repos.pwc.inspect_result.whuir_mgnm.code.util_se.scaled_dot_product_attention", "home.repos.pwc.inspect_result.whuir_mgnm.code.util_se.ln", "home.repos.pwc.inspect_result.whuir_mgnm.code.model.get_shape"], ["", "def", "multihead_attention", "(", "queries", ",", "keys", ",", "values", ",", "key_masks", ",", "\n", "num_heads", "=", "8", ",", "\n", "dropout_rate", "=", "0", ",", "\n", "training", "=", "True", ",", "\n", "causality", "=", "False", ",", "\n", "scope", "=", "\"multihead_attention\"", ")", ":", "\n", "    ", "'''Applies multihead attention. See 3.2.2\n    queries: A 3d tensor with shape of [N, T_q, d_model].\n    keys: A 3d tensor with shape of [N, T_k, d_model].\n    values: A 3d tensor with shape of [N, T_k, d_model].\n    key_masks: A 2d tensor with shape of [N, key_seqlen]\n    num_heads: An int. Number of heads.\n    dropout_rate: A floating point number.\n    training: Boolean. Controller of mechanism for dropout.\n    causality: Boolean. If true, units that reference the future are masked.\n    scope: Optional scope for `variable_scope`.\n\n    Returns\n      A 3d tensor with shape of (N, T_q, C)\n    '''", "\n", "d_model", "=", "queries", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "# Linear projections", "\n", "        ", "Q", "=", "tf", ".", "layers", ".", "dense", "(", "queries", ",", "d_model", ",", "use_bias", "=", "True", ")", "# (N, T_q, d_model)", "\n", "K", "=", "tf", ".", "layers", ".", "dense", "(", "keys", ",", "d_model", ",", "use_bias", "=", "True", ")", "# (N, T_k, d_model)", "\n", "V", "=", "tf", ".", "layers", ".", "dense", "(", "values", ",", "d_model", ",", "use_bias", "=", "True", ")", "# (N, T_k, d_model)", "\n", "\n", "# Split and concat", "\n", "Q_", "=", "tf", ".", "concat", "(", "tf", ".", "split", "(", "Q", ",", "num_heads", ",", "axis", "=", "2", ")", ",", "axis", "=", "0", ")", "# (h*N, T_q, d_model/h)", "\n", "K_", "=", "tf", ".", "concat", "(", "tf", ".", "split", "(", "K", ",", "num_heads", ",", "axis", "=", "2", ")", ",", "axis", "=", "0", ")", "# (h*N, T_k, d_model/h)", "\n", "V_", "=", "tf", ".", "concat", "(", "tf", ".", "split", "(", "V", ",", "num_heads", ",", "axis", "=", "2", ")", ",", "axis", "=", "0", ")", "# (h*N, T_k, d_model/h)", "\n", "\n", "# Attention", "\n", "outputs", "=", "scaled_dot_product_attention", "(", "Q_", ",", "K_", ",", "V_", ",", "key_masks", ",", "causality", ",", "dropout_rate", ",", "training", ")", "\n", "\n", "# Restore shape", "\n", "outputs", "=", "tf", ".", "concat", "(", "tf", ".", "split", "(", "outputs", ",", "num_heads", ",", "axis", "=", "0", ")", ",", "axis", "=", "2", ")", "# (N, T_q, d_model)", "\n", "\n", "# Residual connection", "\n", "outputs", "+=", "queries", "\n", "\n", "# Normalize", "\n", "outputs", "=", "ln", "(", "outputs", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.util_se.ff": [[123, 146], ["tensorflow.variable_scope", "tensorflow.layers.dense", "tensorflow.layers.dense", "util_se.ln"], "function", ["home.repos.pwc.inspect_result.whuir_mgnm.code.util_se.ln"], ["", "def", "ff", "(", "inputs", ",", "num_units", ",", "scope", "=", "\"positionwise_feedforward\"", ")", ":", "\n", "    ", "'''position-wise feed forward net. See 3.3\n\n    inputs: A 3d tensor with shape of [N, T, C].\n    num_units: A list of two integers.\n    scope: Optional scope for `variable_scope`.\n    Returns:\n      A 3d tensor with the same shape and dtype as inputs\n    '''", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "# Inner layer", "\n", "        ", "outputs", "=", "tf", ".", "layers", ".", "dense", "(", "inputs", ",", "num_units", "[", "0", "]", ",", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "\n", "# Outer layer", "\n", "outputs", "=", "tf", ".", "layers", ".", "dense", "(", "outputs", ",", "num_units", "[", "1", "]", ")", "\n", "\n", "# Residual connection", "\n", "outputs", "+=", "inputs", "\n", "\n", "# Normalize", "\n", "outputs", "=", "ln", "(", "outputs", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.util_se.label_smoothing": [[148, 180], ["inputs.get_shape().as_list", "inputs.get_shape"], "function", ["home.repos.pwc.inspect_result.whuir_mgnm.code.model.get_shape"], ["", "def", "label_smoothing", "(", "inputs", ",", "epsilon", "=", "0.1", ")", ":", "\n", "    ", "'''Applies label smoothing. See 5.4 and https://arxiv.org/abs/1512.00567.\n    inputs: 3d tensor. [N, T, V], where V is the number of vocabulary.\n    epsilon: Smoothing rate.\n\n    For example,\n\n    ```\n    import tensorflow as tf\n    inputs = tf.convert_to_tensor([[[0, 0, 1],\n       [0, 1, 0],\n       [1, 0, 0]],\n      [[1, 0, 0],\n       [1, 0, 0],\n       [0, 1, 0]]], tf.float32)\n\n    outputs = label_smoothing(inputs)\n\n    with tf.Session() as sess:\n        print(sess.run([outputs]))\n\n    >>\n    [array([[[ 0.03333334,  0.03333334,  0.93333334],\n        [ 0.03333334,  0.93333334,  0.03333334],\n        [ 0.93333334,  0.03333334,  0.03333334]],\n       [[ 0.93333334,  0.03333334,  0.03333334],\n        [ 0.93333334,  0.03333334,  0.03333334],\n        [ 0.03333334,  0.93333334,  0.03333334]]], dtype=float32)]\n    ```\n    '''", "\n", "V", "=", "inputs", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "# number of channels", "\n", "return", "(", "(", "1", "-", "epsilon", ")", "*", "inputs", ")", "+", "(", "epsilon", "/", "V", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.util_se.positional_encoding": [[182, 219], ["inputs.get_shape().as_list", "tensorflow.variable_scope", "tensorflow.tile", "numpy.array", "numpy.sin", "numpy.cos", "tensorflow.convert_to_tensor", "tensorflow.nn.embedding_lookup", "tensorflow.to_float", "tensorflow.shape", "tensorflow.shape", "tensorflow.expand_dims", "tensorflow.where", "inputs.get_shape", "tensorflow.range", "tensorflow.equal", "range", "numpy.power", "range"], "function", ["home.repos.pwc.inspect_result.whuir_mgnm.code.model.get_shape"], ["", "def", "positional_encoding", "(", "inputs", ",", "\n", "maxlen", ",", "\n", "masking", "=", "False", ",", "\n", "scope", "=", "\"positional_encoding\"", ")", ":", "\n", "    ", "'''Sinusoidal Positional_Encoding. See 3.5\n    inputs: 3d tensor. (N, T, E)\n    maxlen: scalar. Must be >= T\n    masking: Boolean. If True, padding positions are set to zeros.\n    scope: Optional scope for `variable_scope`.\n    returns\n    3d tensor that has the same shape as inputs.\n    '''", "\n", "\n", "E", "=", "inputs", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "# static", "\n", "N", ",", "T", "=", "tf", ".", "shape", "(", "inputs", ")", "[", "0", "]", ",", "tf", ".", "shape", "(", "inputs", ")", "[", "1", "]", "# dynamic", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "# position indices", "\n", "        ", "position_ind", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "T", ")", ",", "0", ")", ",", "[", "N", ",", "1", "]", ")", "# (N, T)", "\n", "\n", "# First part of the PE function: sin and cos argument", "\n", "position_enc", "=", "np", ".", "array", "(", "[", "\n", "[", "pos", "/", "np", ".", "power", "(", "10000", ",", "(", "i", "-", "i", "%", "2", ")", "/", "E", ")", "for", "i", "in", "range", "(", "E", ")", "]", "\n", "for", "pos", "in", "range", "(", "maxlen", ")", "]", ")", "\n", "\n", "# Second part, apply the cosine to even columns and sin to odds.", "\n", "position_enc", "[", ":", ",", "0", ":", ":", "2", "]", "=", "np", ".", "sin", "(", "position_enc", "[", ":", ",", "0", ":", ":", "2", "]", ")", "# dim 2i", "\n", "position_enc", "[", ":", ",", "1", ":", ":", "2", "]", "=", "np", ".", "cos", "(", "position_enc", "[", ":", ",", "1", ":", ":", "2", "]", ")", "# dim 2i+1", "\n", "position_enc", "=", "tf", ".", "convert_to_tensor", "(", "position_enc", ",", "tf", ".", "float32", ")", "# (maxlen, E)", "\n", "\n", "# lookup", "\n", "outputs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "position_enc", ",", "position_ind", ")", "\n", "\n", "# masks", "\n", "if", "masking", ":", "\n", "            ", "outputs", "=", "tf", ".", "where", "(", "tf", ".", "equal", "(", "inputs", ",", "0", ")", ",", "inputs", ",", "outputs", ")", "\n", "\n", "", "return", "tf", ".", "to_float", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.util_se.noam_scheme": [[221, 230], ["tensorflow.cast", "tensorflow.minimum"], "function", ["None"], ["", "", "def", "noam_scheme", "(", "init_lr", ",", "global_step", ",", "warmup_steps", "=", "4000.", ")", ":", "\n", "    ", "'''Noam scheme learning rate decay\n    init_lr: initial learning rate. scalar.\n    global_step: scalar.\n    warmup_steps: scalar. During warmup_steps, learning rate increases\n        until it reaches init_lr.\n    '''", "\n", "step", "=", "tf", ".", "cast", "(", "global_step", "+", "1", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "init_lr", "*", "warmup_steps", "**", "0.5", "*", "tf", ".", "minimum", "(", "step", "*", "warmup_steps", "**", "-", "1.5", ",", "step", "**", "-", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.util_se.calculate_group_metric": [[232, 297], ["range", "time.time", "len", "time.time", "user_pred_dict.items", "numpy.zeros", "numpy.zeros", "numpy.zeros", "[].append", "[].append", "len", "len", "len", "sum", "print", "len", "len", "len", "print", "user_aucs.append", "numpy.argsort", "numpy.array", "numpy.array", "enumerate", "len", "len", "sklearn.metrics.roc_auc_score", "time.time", "numpy.nonzero", "time.time", "numpy.log2"], "function", ["None"], ["", "def", "calculate_group_metric", "(", "labels", ",", "preds", ",", "users", ",", "calc_gauc", "=", "True", ",", "calc_ndcg", "=", "True", ",", "calc_hit", "=", "True", ",", "calc_mrr", "=", "True", ",", "\n", "at_Ns", "=", "None", ")", ":", "\n", "    ", "if", "at_Ns", "is", "None", ":", "\n", "        ", "at_Ns", "=", "[", "5", "]", "\n", "", "metrics", "=", "{", "}", "\n", "\n", "user_pred_dict", "=", "{", "}", "\n", "\n", "print_time_cost", "=", "False", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "users", ")", ")", ":", "\n", "        ", "if", "users", "[", "i", "]", "in", "user_pred_dict", ":", "\n", "            ", "user_pred_dict", "[", "users", "[", "i", "]", "]", "[", "0", "]", ".", "append", "(", "preds", "[", "i", "]", ")", "\n", "user_pred_dict", "[", "users", "[", "i", "]", "]", "[", "1", "]", ".", "append", "(", "labels", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "            ", "user_pred_dict", "[", "users", "[", "i", "]", "]", "=", "[", "[", "preds", "[", "i", "]", "]", ",", "[", "labels", "[", "i", "]", "]", "]", "\n", "\n", "", "", "if", "calc_gauc", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "user_aucs", "=", "[", "]", "\n", "valid_sample_num", "=", "0", "\n", "for", "u", "in", "user_pred_dict", ":", "\n", "            ", "if", "1", "in", "user_pred_dict", "[", "u", "]", "[", "1", "]", "and", "0", "in", "user_pred_dict", "[", "u", "]", "[", "1", "]", ":", "# contains both labels", "\n", "                ", "user_aucs", ".", "append", "(", "len", "(", "user_pred_dict", "[", "u", "]", "[", "1", "]", ")", "*", "roc_auc_score", "(", "user_pred_dict", "[", "u", "]", "[", "1", "]", ",", "user_pred_dict", "[", "u", "]", "[", "0", "]", ")", ")", "\n", "valid_sample_num", "=", "len", "(", "user_pred_dict", "[", "u", "]", "[", "1", "]", ")", "+", "valid_sample_num", "\n", "", "", "valid_group_num", "=", "len", "(", "user_aucs", ")", "+", "1", "\n", "total_group_num", "=", "len", "(", "user_pred_dict", ")", "+", "1", "\n", "total_sample_num", "=", "len", "(", "labels", ")", "+", "1", "\n", "metrics", "[", "'gauc'", "]", "=", "(", "\n", "sum", "(", "user_aucs", ")", "/", "valid_sample_num", ")", "\n", "if", "print_time_cost", ":", "\n", "            ", "print", "(", "\"GAUC TIME: %.4fs\"", "%", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "\n", "", "", "t", "=", "time", ".", "time", "(", ")", "\n", "if", "calc_ndcg", "or", "calc_hit", "or", "calc_mrr", ":", "\n", "        ", "for", "user", ",", "val", "in", "user_pred_dict", ".", "items", "(", ")", ":", "\n", "            ", "idx", "=", "np", ".", "argsort", "(", "val", "[", "0", "]", ")", "[", ":", ":", "-", "1", "]", "\n", "user_pred_dict", "[", "user", "]", "[", "0", "]", "=", "np", ".", "array", "(", "val", "[", "0", "]", ")", "[", "idx", "]", "\n", "user_pred_dict", "[", "user", "]", "[", "1", "]", "=", "np", ".", "array", "(", "val", "[", "1", "]", ")", "[", "idx", "]", "\n", "\n", "", "", "if", "calc_ndcg", "or", "calc_hit", "or", "calc_mrr", ":", "\n", "        ", "ndcg", "=", "np", ".", "zeros", "(", "len", "(", "at_Ns", ")", ")", "\n", "hit", "=", "np", ".", "zeros", "(", "len", "(", "at_Ns", ")", ")", "\n", "mrr", "=", "np", ".", "zeros", "(", "len", "(", "at_Ns", ")", ")", "\n", "valid_user", "=", "0", "\n", "for", "u", "in", "user_pred_dict", ":", "\n", "            ", "if", "1", "in", "user_pred_dict", "[", "u", "]", "[", "1", "]", "and", "0", "in", "user_pred_dict", "[", "u", "]", "[", "1", "]", ":", "# contains both labels", "\n", "                ", "valid_user", "+=", "1", "\n", "pred", "=", "user_pred_dict", "[", "u", "]", "[", "1", "]", "\n", "rank", "=", "np", ".", "nonzero", "(", "pred", ")", "[", "0", "]", "[", "0", "]", "\n", "# print(pred, rank)", "\n", "for", "idx", ",", "n", "in", "enumerate", "(", "at_Ns", ")", ":", "\n", "                    ", "if", "rank", "<", "n", ":", "\n", "                        ", "ndcg", "[", "idx", "]", "+=", "1", "/", "np", ".", "log2", "(", "rank", "+", "2", ")", "\n", "hit", "[", "idx", "]", "+=", "1", "\n", "mrr", "[", "idx", "]", "+=", "1", "/", "(", "rank", "+", "1", ")", "\n", "", "", "", "", "ndcg", "=", "ndcg", "/", "valid_user", "\n", "hit", "=", "hit", "/", "valid_user", "\n", "mrr", "=", "mrr", "/", "valid_user", "\n", "metrics", "[", "'ndcg'", "]", "=", "ndcg", "\n", "metrics", "[", "'hit'", "]", "=", "hit", "\n", "metrics", "[", "'mrr'", "]", "=", "mrr", "\n", "if", "print_time_cost", ":", "\n", "            ", "print", "(", "\"NDCG TIME: %.4fs\"", "%", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "", "", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.util_se._create_gcn_emb": [[299, 320], ["tensorflow.random_normal_initializer", "range", "tensorflow.variable_scope", "range", "tensorflow.slice", "tensorflow.matmul", "tensorflow.nn.leaky_relu", "all_embeddings.append", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.slice", "tf.random_normal_initializer.", "tf.random_normal_initializer.", "tensorflow.matmul"], "function", ["None"], ["", "def", "_create_gcn_emb", "(", "A", ",", "x", ",", "num_layer", ",", "embedding_dim", ",", "se_num", ",", "batch_size", ",", "seq_len", ",", "layer_size", "=", "[", "64", ",", "64", ",", "64", "]", ")", ":", "\n", "    ", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "0.01", ")", "\n", "weights_size_list", "=", "[", "embedding_dim", "]", "+", "layer_size", "\n", "all_weights", "=", "{", "}", "\n", "with", "tf", ".", "variable_scope", "(", "\"weights\"", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "        ", "for", "lay", "in", "range", "(", "1", ")", ":", "\n", "            ", "all_weights", "[", "'W_gc%d'", "%", "lay", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "weights_size_list", "[", "lay", "]", ",", "weights_size_list", "[", "lay", "+", "1", "]", "]", ")", ",", "name", "=", "'W_gc%d'", "%", "lay", "\n", ")", "\n", "all_weights", "[", "'B_gc%d'", "%", "lay", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "1", ",", "weights_size_list", "[", "lay", "+", "1", "]", "]", ")", ",", "name", "=", "'b_gc%d'", "%", "lay", "\n", ")", "\n", "\n", "# gcn has three layers", "\n", "", "", "all_embeddings", "=", "[", "tf", ".", "slice", "(", "x", ",", "[", "0", ",", "se_num", ",", "0", "]", ",", "[", "batch_size", ",", "seq_len", ",", "embedding_dim", "]", ")", "]", "\n", "for", "k", "in", "range", "(", "num_layer", ")", ":", "\n", "        ", "embeddings", "=", "tf", ".", "matmul", "(", "A", ",", "x", ")", "\n", "embeddings", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "tf", ".", "matmul", "(", "embeddings", ",", "all_weights", "[", "'W_gc%d'", "%", "0", "]", ")", "+", "all_weights", "[", "'B_gc%d'", "%", "0", "]", ")", "\n", "all_embeddings", ".", "append", "(", "tf", ".", "slice", "(", "embeddings", ",", "[", "0", ",", "se_num", ",", "0", "]", ",", "[", "batch_size", ",", "seq_len", ",", "embedding_dim", "]", ")", ")", "\n", "\n", "", "return", "all_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.util_se._create_gat_emb": [[322, 344], ["range", "tensorflow.concat", "range", "range", "attns.append", "len", "range", "tensorflow.concat", "outs.append", "util_se.attn_head", "attns.append", "util_se.attn_head", "tensorflow.add_n", "util_se.attn_head"], "function", ["home.repos.pwc.inspect_result.whuir_mgnm.code.util_se.attn_head", "home.repos.pwc.inspect_result.whuir_mgnm.code.util_se.attn_head", "home.repos.pwc.inspect_result.whuir_mgnm.code.util_se.attn_head"], ["", "def", "_create_gat_emb", "(", "inputs", ",", "n_heads", ",", "hid_units", ",", "attn_drop", ",", "ffd_drop", ",", "bias_mat", ",", "activation", "=", "tf", ".", "nn", ".", "elu", ",", "residual", "=", "False", ")", ":", "\n", "    ", "attns", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "n_heads", "[", "0", "]", ")", ":", "\n", "        ", "attns", ".", "append", "(", "attn_head", "(", "inputs", ",", "bias_mat", "=", "bias_mat", ",", "\n", "out_sz", "=", "hid_units", "[", "0", "]", ",", "activation", "=", "activation", ",", "\n", "in_drop", "=", "ffd_drop", ",", "\n", "coef_drop", "=", "attn_drop", ",", "residual", "=", "False", ")", ")", "\n", "", "h1", "=", "tf", ".", "concat", "(", "attns", ",", "axis", "=", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "hid_units", ")", ")", ":", "\n", "        ", "attns", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "n_heads", "[", "i", "]", ")", ":", "\n", "            ", "attns", ".", "append", "(", "attn_head", "(", "h1", ",", "bias_mat", "=", "bias_mat", ",", "\n", "out_sz", "=", "hid_units", "[", "i", "]", ",", "activation", "=", "activation", ",", "\n", "in_drop", "=", "ffd_drop", ",", "coef_drop", "=", "attn_drop", ",", "residual", "=", "residual", ")", ")", "\n", "", "h1", "=", "tf", ".", "concat", "(", "attns", ",", "axis", "=", "-", "1", ")", "\n", "", "outs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_heads", "[", "-", "1", "]", ")", ":", "\n", "        ", "outs", ".", "append", "(", "attn_head", "(", "h1", ",", "bias_mat", "=", "bias_mat", ",", "\n", "out_sz", "=", "hid_units", "[", "-", "1", "]", ",", "activation", "=", "activation", ",", "\n", "in_drop", "=", "ffd_drop", ",", "coef_drop", "=", "attn_drop", ",", "residual", "=", "residual", ")", ")", "\n", "logits", "=", "tf", ".", "add_n", "(", "outs", ")", "/", "n_heads", "[", "-", "1", "]", "\n", "", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.util_se.attn_head": [[351, 380], ["tensorflow.name_scope", "tensorflow.layers.conv1d", "tensorflow.layers.conv1d", "tensorflow.layers.conv1d", "tensorflow.nn.softmax", "tensorflow.matmul", "tensorflow.contrib.layers.bias_add", "activation", "tensorflow.nn.dropout", "tensorflow.transpose", "tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.nn.leaky_relu", "conv1d"], "function", ["None"], ["def", "attn_head", "(", "seq", ",", "out_sz", ",", "bias_mat", ",", "activation", ",", "in_drop", "=", "0.0", ",", "coef_drop", "=", "0.0", ",", "residual", "=", "False", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "'my_attn'", ")", ":", "\n", "        ", "if", "in_drop", "!=", "0.0", ":", "\n", "            ", "seq", "=", "tf", ".", "nn", ".", "dropout", "(", "seq", ",", "1.0", "-", "in_drop", ")", "\n", "\n", "", "seq_fts", "=", "tf", ".", "layers", ".", "conv1d", "(", "seq", ",", "out_sz", ",", "1", ",", "use_bias", "=", "False", ")", "\n", "\n", "# simplest self-attention possible", "\n", "f_1", "=", "tf", ".", "layers", ".", "conv1d", "(", "seq_fts", ",", "1", ",", "1", ")", "\n", "f_2", "=", "tf", ".", "layers", ".", "conv1d", "(", "seq_fts", ",", "1", ",", "1", ")", "\n", "logits", "=", "f_1", "+", "tf", ".", "transpose", "(", "f_2", ",", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "coefs", "=", "tf", ".", "nn", ".", "softmax", "(", "tf", ".", "nn", ".", "leaky_relu", "(", "logits", ")", "+", "bias_mat", ")", "\n", "\n", "if", "coef_drop", "!=", "0.0", ":", "\n", "            ", "coefs", "=", "tf", ".", "nn", ".", "dropout", "(", "coefs", ",", "1.0", "-", "coef_drop", ")", "\n", "", "if", "in_drop", "!=", "0.0", ":", "\n", "            ", "seq_fts", "=", "tf", ".", "nn", ".", "dropout", "(", "seq_fts", ",", "1.0", "-", "in_drop", ")", "\n", "\n", "", "vals", "=", "tf", ".", "matmul", "(", "coefs", ",", "seq_fts", ")", "\n", "ret", "=", "tf", ".", "contrib", ".", "layers", ".", "bias_add", "(", "vals", ")", "\n", "\n", "# residual connection", "\n", "if", "residual", ":", "\n", "            ", "if", "seq", ".", "shape", "[", "-", "1", "]", "!=", "ret", ".", "shape", "[", "-", "1", "]", ":", "\n", "                ", "ret", "=", "ret", "+", "conv1d", "(", "seq", ",", "ret", ".", "shape", "[", "-", "1", "]", ",", "1", ")", "# activation", "\n", "", "else", ":", "\n", "                ", "ret", "=", "ret", "+", "seq", "\n", "\n", "", "", "return", "activation", "(", "ret", ")", "# activation", "\n", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.util_se.sp_attn_head": [[384, 432], ["tensorflow.name_scope", "tensorflow.layers.conv1d", "tensorflow.layers.conv1d", "tensorflow.layers.conv1d", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.sparse_add", "tensorflow.SparseTensor", "tensorflow.sparse_softmax", "tensorflow.sparse_reshape", "tensorflow.squeeze", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.expand_dims", "tf.expand_dims.set_shape", "tensorflow.contrib.layers.bias_add", "activation", "tensorflow.nn.dropout", "tensorflow.transpose", "tensorflow.SparseTensor", "tensorflow.nn.dropout", "tensorflow.nn.leaky_relu", "tensorflow.nn.dropout", "conv1d"], "function", ["None"], ["", "", "def", "sp_attn_head", "(", "seq", ",", "out_sz", ",", "adj_mat", ",", "activation", ",", "nb_nodes", ",", "in_drop", "=", "0.0", ",", "coef_drop", "=", "0.0", ",", "residual", "=", "False", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "'sp_attn'", ")", ":", "\n", "        ", "if", "in_drop", "!=", "0.0", ":", "\n", "            ", "seq", "=", "tf", ".", "nn", ".", "dropout", "(", "seq", ",", "1.0", "-", "in_drop", ")", "\n", "\n", "", "seq_fts", "=", "tf", ".", "layers", ".", "conv1d", "(", "seq", ",", "out_sz", ",", "1", ",", "use_bias", "=", "False", ")", "\n", "\n", "# simplest self-attention possible", "\n", "f_1", "=", "tf", ".", "layers", ".", "conv1d", "(", "seq_fts", ",", "1", ",", "1", ")", "\n", "f_2", "=", "tf", ".", "layers", ".", "conv1d", "(", "seq_fts", ",", "1", ",", "1", ")", "\n", "\n", "f_1", "=", "tf", ".", "reshape", "(", "f_1", ",", "(", "nb_nodes", ",", "1", ")", ")", "\n", "f_2", "=", "tf", ".", "reshape", "(", "f_2", ",", "(", "nb_nodes", ",", "1", ")", ")", "\n", "\n", "f_1", "=", "adj_mat", "*", "f_1", "\n", "f_2", "=", "adj_mat", "*", "tf", ".", "transpose", "(", "f_2", ",", "[", "1", ",", "0", "]", ")", "\n", "\n", "logits", "=", "tf", ".", "sparse_add", "(", "f_1", ",", "f_2", ")", "\n", "lrelu", "=", "tf", ".", "SparseTensor", "(", "indices", "=", "logits", ".", "indices", ",", "\n", "values", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "logits", ".", "values", ")", ",", "\n", "dense_shape", "=", "logits", ".", "dense_shape", ")", "\n", "coefs", "=", "tf", ".", "sparse_softmax", "(", "lrelu", ")", "\n", "\n", "if", "coef_drop", "!=", "0.0", ":", "\n", "            ", "coefs", "=", "tf", ".", "SparseTensor", "(", "indices", "=", "coefs", ".", "indices", ",", "\n", "values", "=", "tf", ".", "nn", ".", "dropout", "(", "coefs", ".", "values", ",", "1.0", "-", "coef_drop", ")", ",", "\n", "dense_shape", "=", "coefs", ".", "dense_shape", ")", "\n", "", "if", "in_drop", "!=", "0.0", ":", "\n", "            ", "seq_fts", "=", "tf", ".", "nn", ".", "dropout", "(", "seq_fts", ",", "1.0", "-", "in_drop", ")", "\n", "\n", "# As tf.sparse_tensor_dense_matmul expects its arguments to have rank-2,", "\n", "# here we make an assumption that our input is of batch size 1, and reshape appropriately.", "\n", "# The method will fail in all other cases!", "\n", "", "coefs", "=", "tf", ".", "sparse_reshape", "(", "coefs", ",", "[", "nb_nodes", ",", "nb_nodes", "]", ")", "\n", "seq_fts", "=", "tf", ".", "squeeze", "(", "seq_fts", ")", "\n", "vals", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "coefs", ",", "seq_fts", ")", "\n", "vals", "=", "tf", ".", "expand_dims", "(", "vals", ",", "axis", "=", "0", ")", "\n", "vals", ".", "set_shape", "(", "[", "1", ",", "nb_nodes", ",", "out_sz", "]", ")", "\n", "ret", "=", "tf", ".", "contrib", ".", "layers", ".", "bias_add", "(", "vals", ")", "\n", "\n", "# residual connection", "\n", "if", "residual", ":", "\n", "            ", "if", "seq", ".", "shape", "[", "-", "1", "]", "!=", "ret", ".", "shape", "[", "-", "1", "]", ":", "\n", "                ", "ret", "=", "ret", "+", "conv1d", "(", "seq", ",", "ret", ".", "shape", "[", "-", "1", "]", ",", "1", ")", "# activation", "\n", "", "else", ":", "\n", "                ", "ret", "=", "ret", "+", "seq", "\n", "\n", "", "", "return", "activation", "(", "ret", ")", "# activation", "\n", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.util_se.adj_to_bias_tensor": [[441, 453], ["tensorflow.zeros_like", "range", "tensorflow.eye", "range", "range", "tensorflow.matmul", "range", "tensorflow.eye"], "function", ["None"], ["def", "adj_to_bias_tensor", "(", "adj", ",", "batch_size", ",", "row_size", "=", "20", ",", "nhood", "=", "1", ")", ":", "\n", "    ", "nb_graphs", "=", "batch_size", "\n", "mt", "=", "tf", ".", "zeros_like", "(", "adj", ")", "\n", "for", "g", "in", "range", "(", "nb_graphs", ")", ":", "\n", "        ", "mt", "[", "g", "]", "=", "tf", ".", "eye", "(", "row_size", ")", "\n", "for", "_", "in", "range", "(", "nhood", ")", ":", "\n", "            ", "mt", "[", "g", "]", "=", "tf", ".", "matmul", "(", "mt", "[", "g", "]", ",", "(", "adj", "[", "g", "]", "+", "tf", ".", "eye", "(", "row_size", ")", ")", ")", "\n", "", "for", "i", "in", "range", "(", "row_size", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "row_size", ")", ":", "\n", "                ", "if", "mt", "[", "g", "]", "[", "i", "]", "[", "j", "]", ">", "0.0", ":", "\n", "                    ", "mt", "[", "g", "]", "[", "i", "]", "[", "j", "]", "=", "1.0", "\n", "", "", "", "", "return", "-", "1e9", "*", "(", "1.0", "-", "mt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuir_mgnm.code.util_se.attn": [[455, 461], ["tensorflow.expand_dims", "tensorflow.reduce_sum", "tensorflow.nn.softmax", "tensorflow.reduce_sum", "tensorflow.expand_dims"], "function", ["None"], ["", "def", "attn", "(", "query", ",", "key", ")", ":", "\n", "# key [batch_size, short_seq_length, units]", "\n", "# query [batch_size, units]", "\n", "    ", "alpha", "=", "tf", ".", "expand_dims", "(", "tf", ".", "nn", ".", "softmax", "(", "tf", ".", "reduce_sum", "(", "key", "*", "tf", ".", "expand_dims", "(", "query", ",", "axis", "=", "1", ")", ",", "axis", "=", "-", "1", ")", ",", "axis", "=", "-", "1", ")", ",", "axis", "=", "-", "1", ")", "# [b_s, shrot_seq_length, 1]", "\n", "res", "=", "tf", ".", "reduce_sum", "(", "key", "*", "alpha", ",", "axis", "=", "1", ")", "\n", "return", "res", "\n", "\n"]]}