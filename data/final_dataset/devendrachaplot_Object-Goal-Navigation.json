{"home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.None.main.main": [[20, 692], ["arguments.get_args", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "logging.basicConfig", "print", "print", "logging.info", "int", "torch.device", "torch.device", "torch.ones().float().to", "torch.ones().float().to", "numpy.zeros", "numpy.zeros", "collections.deque", "collections.deque", "collections.deque", "collections.deque", "collections.deque", "numpy.zeros", "torch.set_num_threads", "torch.set_num_threads", "envs.make_vec_envs", "envs.make_vec_envs.reset", "torch.set_grad_enabled", "torch.set_grad_enabled", "int", "int", "torch.zeros().float().to", "torch.zeros().float().to", "torch.zeros().float().to", "torch.zeros().float().to", "torch.zeros().float().to", "torch.zeros().float().to", "torch.zeros().float().to", "torch.zeros().float().to", "numpy.zeros", "numpy.zeros().astype", "numpy.zeros", "main.main.init_map_and_pose"], "function", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.None.arguments.get_args", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.envs.__init__.make_vec_envs", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.objectgoal_env.ObjectGoal_Env.reset", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "get_args", "(", ")", "\n", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "if", "args", ".", "cuda", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "# Setup Logging", "\n", "", "log_dir", "=", "\"{}/models/{}/\"", ".", "format", "(", "args", ".", "dump_location", ",", "args", ".", "exp_name", ")", "\n", "dump_dir", "=", "\"{}/dump/{}/\"", ".", "format", "(", "args", ".", "dump_location", ",", "args", ".", "exp_name", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "log_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "log_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "dump_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dump_dir", ")", "\n", "\n", "", "logging", ".", "basicConfig", "(", "\n", "filename", "=", "log_dir", "+", "'train.log'", ",", "\n", "level", "=", "logging", ".", "INFO", ")", "\n", "print", "(", "\"Dumping at {}\"", ".", "format", "(", "log_dir", ")", ")", "\n", "print", "(", "args", ")", "\n", "logging", ".", "info", "(", "args", ")", "\n", "\n", "# Logging and loss variables", "\n", "num_scenes", "=", "args", ".", "num_processes", "\n", "num_episodes", "=", "int", "(", "args", ".", "num_eval_episodes", ")", "\n", "device", "=", "args", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "args", ".", "cuda", "else", "\"cpu\"", ")", "\n", "\n", "g_masks", "=", "torch", ".", "ones", "(", "num_scenes", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "best_g_reward", "=", "-", "np", ".", "inf", "\n", "\n", "if", "args", ".", "eval", ":", "\n", "        ", "episode_success", "=", "[", "]", "\n", "episode_spl", "=", "[", "]", "\n", "episode_dist", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "args", ".", "num_processes", ")", ":", "\n", "            ", "episode_success", ".", "append", "(", "deque", "(", "maxlen", "=", "num_episodes", ")", ")", "\n", "episode_spl", ".", "append", "(", "deque", "(", "maxlen", "=", "num_episodes", ")", ")", "\n", "episode_dist", ".", "append", "(", "deque", "(", "maxlen", "=", "num_episodes", ")", ")", "\n", "\n", "", "", "else", ":", "\n", "        ", "episode_success", "=", "deque", "(", "maxlen", "=", "1000", ")", "\n", "episode_spl", "=", "deque", "(", "maxlen", "=", "1000", ")", "\n", "episode_dist", "=", "deque", "(", "maxlen", "=", "1000", ")", "\n", "\n", "", "finished", "=", "np", ".", "zeros", "(", "(", "args", ".", "num_processes", ")", ")", "\n", "wait_env", "=", "np", ".", "zeros", "(", "(", "args", ".", "num_processes", ")", ")", "\n", "\n", "g_episode_rewards", "=", "deque", "(", "maxlen", "=", "1000", ")", "\n", "\n", "g_value_losses", "=", "deque", "(", "maxlen", "=", "1000", ")", "\n", "g_action_losses", "=", "deque", "(", "maxlen", "=", "1000", ")", "\n", "g_dist_entropies", "=", "deque", "(", "maxlen", "=", "1000", ")", "\n", "\n", "per_step_g_rewards", "=", "deque", "(", "maxlen", "=", "1000", ")", "\n", "\n", "g_process_rewards", "=", "np", ".", "zeros", "(", "(", "num_scenes", ")", ")", "\n", "\n", "# Starting environments", "\n", "torch", ".", "set_num_threads", "(", "1", ")", "\n", "envs", "=", "make_vec_envs", "(", "args", ")", "\n", "obs", ",", "infos", "=", "envs", ".", "reset", "(", ")", "\n", "\n", "torch", ".", "set_grad_enabled", "(", "False", ")", "\n", "\n", "# Initialize map variables:", "\n", "# Full map consists of multiple channels containing the following:", "\n", "# 1. Obstacle Map", "\n", "# 2. Exploread Area", "\n", "# 3. Current Agent Location", "\n", "# 4. Past Agent Locations", "\n", "# 5,6,7,.. : Semantic Categories", "\n", "nc", "=", "args", ".", "num_sem_categories", "+", "4", "# num channels", "\n", "\n", "# Calculating full and local map sizes", "\n", "map_size", "=", "args", ".", "map_size_cm", "//", "args", ".", "map_resolution", "\n", "full_w", ",", "full_h", "=", "map_size", ",", "map_size", "\n", "local_w", "=", "int", "(", "full_w", "/", "args", ".", "global_downscaling", ")", "\n", "local_h", "=", "int", "(", "full_h", "/", "args", ".", "global_downscaling", ")", "\n", "\n", "# Initializing full and local map", "\n", "full_map", "=", "torch", ".", "zeros", "(", "num_scenes", ",", "nc", ",", "full_w", ",", "full_h", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "local_map", "=", "torch", ".", "zeros", "(", "num_scenes", ",", "nc", ",", "local_w", ",", "\n", "local_h", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "# Initial full and local pose", "\n", "full_pose", "=", "torch", ".", "zeros", "(", "num_scenes", ",", "3", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "local_pose", "=", "torch", ".", "zeros", "(", "num_scenes", ",", "3", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "# Origin of local map", "\n", "origins", "=", "np", ".", "zeros", "(", "(", "num_scenes", ",", "3", ")", ")", "\n", "\n", "# Local Map Boundaries", "\n", "lmb", "=", "np", ".", "zeros", "(", "(", "num_scenes", ",", "4", ")", ")", ".", "astype", "(", "int", ")", "\n", "\n", "# Planner pose inputs has 7 dimensions", "\n", "# 1-3 store continuous global agent location", "\n", "# 4-7 store local map boundaries", "\n", "planner_pose_inputs", "=", "np", ".", "zeros", "(", "(", "num_scenes", ",", "7", ")", ")", "\n", "\n", "def", "get_local_map_boundaries", "(", "agent_loc", ",", "local_sizes", ",", "full_sizes", ")", ":", "\n", "        ", "loc_r", ",", "loc_c", "=", "agent_loc", "\n", "local_w", ",", "local_h", "=", "local_sizes", "\n", "full_w", ",", "full_h", "=", "full_sizes", "\n", "\n", "if", "args", ".", "global_downscaling", ">", "1", ":", "\n", "            ", "gx1", ",", "gy1", "=", "loc_r", "-", "local_w", "//", "2", ",", "loc_c", "-", "local_h", "//", "2", "\n", "gx2", ",", "gy2", "=", "gx1", "+", "local_w", ",", "gy1", "+", "local_h", "\n", "if", "gx1", "<", "0", ":", "\n", "                ", "gx1", ",", "gx2", "=", "0", ",", "local_w", "\n", "", "if", "gx2", ">", "full_w", ":", "\n", "                ", "gx1", ",", "gx2", "=", "full_w", "-", "local_w", ",", "full_w", "\n", "\n", "", "if", "gy1", "<", "0", ":", "\n", "                ", "gy1", ",", "gy2", "=", "0", ",", "local_h", "\n", "", "if", "gy2", ">", "full_h", ":", "\n", "                ", "gy1", ",", "gy2", "=", "full_h", "-", "local_h", ",", "full_h", "\n", "", "", "else", ":", "\n", "            ", "gx1", ",", "gx2", ",", "gy1", ",", "gy2", "=", "0", ",", "full_w", ",", "0", ",", "full_h", "\n", "\n", "", "return", "[", "gx1", ",", "gx2", ",", "gy1", ",", "gy2", "]", "\n", "\n", "", "def", "init_map_and_pose", "(", ")", ":", "\n", "        ", "full_map", ".", "fill_", "(", "0.", ")", "\n", "full_pose", ".", "fill_", "(", "0.", ")", "\n", "full_pose", "[", ":", ",", ":", "2", "]", "=", "args", ".", "map_size_cm", "/", "100.0", "/", "2.0", "\n", "\n", "locs", "=", "full_pose", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "planner_pose_inputs", "[", ":", ",", ":", "3", "]", "=", "locs", "\n", "for", "e", "in", "range", "(", "num_scenes", ")", ":", "\n", "            ", "r", ",", "c", "=", "locs", "[", "e", ",", "1", "]", ",", "locs", "[", "e", ",", "0", "]", "\n", "loc_r", ",", "loc_c", "=", "[", "int", "(", "r", "*", "100.0", "/", "args", ".", "map_resolution", ")", ",", "\n", "int", "(", "c", "*", "100.0", "/", "args", ".", "map_resolution", ")", "]", "\n", "\n", "full_map", "[", "e", ",", "2", ":", "4", ",", "loc_r", "-", "1", ":", "loc_r", "+", "2", ",", "loc_c", "-", "1", ":", "loc_c", "+", "2", "]", "=", "1.0", "\n", "\n", "lmb", "[", "e", "]", "=", "get_local_map_boundaries", "(", "(", "loc_r", ",", "loc_c", ")", ",", "\n", "(", "local_w", ",", "local_h", ")", ",", "\n", "(", "full_w", ",", "full_h", ")", ")", "\n", "\n", "planner_pose_inputs", "[", "e", ",", "3", ":", "]", "=", "lmb", "[", "e", "]", "\n", "origins", "[", "e", "]", "=", "[", "lmb", "[", "e", "]", "[", "2", "]", "*", "args", ".", "map_resolution", "/", "100.0", ",", "\n", "lmb", "[", "e", "]", "[", "0", "]", "*", "args", ".", "map_resolution", "/", "100.0", ",", "0.", "]", "\n", "\n", "", "for", "e", "in", "range", "(", "num_scenes", ")", ":", "\n", "            ", "local_map", "[", "e", "]", "=", "full_map", "[", "e", ",", ":", ",", "\n", "lmb", "[", "e", ",", "0", "]", ":", "lmb", "[", "e", ",", "1", "]", ",", "\n", "lmb", "[", "e", ",", "2", "]", ":", "lmb", "[", "e", ",", "3", "]", "]", "\n", "local_pose", "[", "e", "]", "=", "full_pose", "[", "e", "]", "-", "torch", ".", "from_numpy", "(", "origins", "[", "e", "]", ")", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "\n", "", "", "def", "init_map_and_pose_for_env", "(", "e", ")", ":", "\n", "        ", "full_map", "[", "e", "]", ".", "fill_", "(", "0.", ")", "\n", "full_pose", "[", "e", "]", ".", "fill_", "(", "0.", ")", "\n", "full_pose", "[", "e", ",", ":", "2", "]", "=", "args", ".", "map_size_cm", "/", "100.0", "/", "2.0", "\n", "\n", "locs", "=", "full_pose", "[", "e", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "planner_pose_inputs", "[", "e", ",", ":", "3", "]", "=", "locs", "\n", "r", ",", "c", "=", "locs", "[", "1", "]", ",", "locs", "[", "0", "]", "\n", "loc_r", ",", "loc_c", "=", "[", "int", "(", "r", "*", "100.0", "/", "args", ".", "map_resolution", ")", ",", "\n", "int", "(", "c", "*", "100.0", "/", "args", ".", "map_resolution", ")", "]", "\n", "\n", "full_map", "[", "e", ",", "2", ":", "4", ",", "loc_r", "-", "1", ":", "loc_r", "+", "2", ",", "loc_c", "-", "1", ":", "loc_c", "+", "2", "]", "=", "1.0", "\n", "\n", "lmb", "[", "e", "]", "=", "get_local_map_boundaries", "(", "(", "loc_r", ",", "loc_c", ")", ",", "\n", "(", "local_w", ",", "local_h", ")", ",", "\n", "(", "full_w", ",", "full_h", ")", ")", "\n", "\n", "planner_pose_inputs", "[", "e", ",", "3", ":", "]", "=", "lmb", "[", "e", "]", "\n", "origins", "[", "e", "]", "=", "[", "lmb", "[", "e", "]", "[", "2", "]", "*", "args", ".", "map_resolution", "/", "100.0", ",", "\n", "lmb", "[", "e", "]", "[", "0", "]", "*", "args", ".", "map_resolution", "/", "100.0", ",", "0.", "]", "\n", "\n", "local_map", "[", "e", "]", "=", "full_map", "[", "e", ",", ":", ",", "lmb", "[", "e", ",", "0", "]", ":", "lmb", "[", "e", ",", "1", "]", ",", "lmb", "[", "e", ",", "2", "]", ":", "lmb", "[", "e", ",", "3", "]", "]", "\n", "local_pose", "[", "e", "]", "=", "full_pose", "[", "e", "]", "-", "torch", ".", "from_numpy", "(", "origins", "[", "e", "]", ")", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "\n", "", "def", "update_intrinsic_rew", "(", "e", ")", ":", "\n", "        ", "prev_explored_area", "=", "full_map", "[", "e", ",", "1", "]", ".", "sum", "(", "1", ")", ".", "sum", "(", "0", ")", "\n", "full_map", "[", "e", ",", ":", ",", "lmb", "[", "e", ",", "0", "]", ":", "lmb", "[", "e", ",", "1", "]", ",", "lmb", "[", "e", ",", "2", "]", ":", "lmb", "[", "e", ",", "3", "]", "]", "=", "local_map", "[", "e", "]", "\n", "curr_explored_area", "=", "full_map", "[", "e", ",", "1", "]", ".", "sum", "(", "1", ")", ".", "sum", "(", "0", ")", "\n", "intrinsic_rews", "[", "e", "]", "=", "curr_explored_area", "-", "prev_explored_area", "\n", "intrinsic_rews", "[", "e", "]", "*=", "(", "args", ".", "map_resolution", "/", "100.", ")", "**", "2", "# to m^2", "\n", "\n", "", "init_map_and_pose", "(", ")", "\n", "\n", "# Global policy observation space", "\n", "ngc", "=", "8", "+", "args", ".", "num_sem_categories", "\n", "es", "=", "2", "\n", "g_observation_space", "=", "gym", ".", "spaces", ".", "Box", "(", "0", ",", "1", ",", "\n", "(", "ngc", ",", "\n", "local_w", ",", "\n", "local_h", ")", ",", "dtype", "=", "'uint8'", ")", "\n", "\n", "# Global policy action space", "\n", "g_action_space", "=", "gym", ".", "spaces", ".", "Box", "(", "low", "=", "0.0", ",", "high", "=", "0.99", ",", "\n", "shape", "=", "(", "2", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# Global policy recurrent layer size", "\n", "g_hidden_size", "=", "args", ".", "global_hidden_size", "\n", "\n", "# Semantic Mapping", "\n", "sem_map_module", "=", "Semantic_Mapping", "(", "args", ")", ".", "to", "(", "device", ")", "\n", "sem_map_module", ".", "eval", "(", ")", "\n", "\n", "# Global policy", "\n", "g_policy", "=", "RL_Policy", "(", "g_observation_space", ".", "shape", ",", "g_action_space", ",", "\n", "model_type", "=", "1", ",", "\n", "base_kwargs", "=", "{", "'recurrent'", ":", "args", ".", "use_recurrent_global", ",", "\n", "'hidden_size'", ":", "g_hidden_size", ",", "\n", "'num_sem_categories'", ":", "ngc", "-", "8", "\n", "}", ")", ".", "to", "(", "device", ")", "\n", "g_agent", "=", "algo", ".", "PPO", "(", "g_policy", ",", "args", ".", "clip_param", ",", "args", ".", "ppo_epoch", ",", "\n", "args", ".", "num_mini_batch", ",", "args", ".", "value_loss_coef", ",", "\n", "args", ".", "entropy_coef", ",", "lr", "=", "args", ".", "lr", ",", "eps", "=", "args", ".", "eps", ",", "\n", "max_grad_norm", "=", "args", ".", "max_grad_norm", ")", "\n", "\n", "global_input", "=", "torch", ".", "zeros", "(", "num_scenes", ",", "ngc", ",", "local_w", ",", "local_h", ")", "\n", "global_orientation", "=", "torch", ".", "zeros", "(", "num_scenes", ",", "1", ")", ".", "long", "(", ")", "\n", "intrinsic_rews", "=", "torch", ".", "zeros", "(", "num_scenes", ")", ".", "to", "(", "device", ")", "\n", "extras", "=", "torch", ".", "zeros", "(", "num_scenes", ",", "2", ")", "\n", "\n", "# Storage", "\n", "g_rollouts", "=", "GlobalRolloutStorage", "(", "args", ".", "num_global_steps", ",", "\n", "num_scenes", ",", "g_observation_space", ".", "shape", ",", "\n", "g_action_space", ",", "g_policy", ".", "rec_state_size", ",", "\n", "es", ")", ".", "to", "(", "device", ")", "\n", "\n", "if", "args", ".", "load", "!=", "\"0\"", ":", "\n", "        ", "print", "(", "\"Loading model {}\"", ".", "format", "(", "args", ".", "load", ")", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "args", ".", "load", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "g_policy", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "", "if", "args", ".", "eval", ":", "\n", "        ", "g_policy", ".", "eval", "(", ")", "\n", "\n", "# Predict semantic map from frame 1", "\n", "", "poses", "=", "torch", ".", "from_numpy", "(", "np", ".", "asarray", "(", "\n", "[", "infos", "[", "env_idx", "]", "[", "'sensor_pose'", "]", "for", "env_idx", "in", "range", "(", "num_scenes", ")", "]", ")", "\n", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "_", ",", "local_map", ",", "_", ",", "local_pose", "=", "sem_map_module", "(", "obs", ",", "poses", ",", "local_map", ",", "local_pose", ")", "\n", "\n", "# Compute Global policy input", "\n", "locs", "=", "local_pose", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "global_input", "=", "torch", ".", "zeros", "(", "num_scenes", ",", "ngc", ",", "local_w", ",", "local_h", ")", "\n", "global_orientation", "=", "torch", ".", "zeros", "(", "num_scenes", ",", "1", ")", ".", "long", "(", ")", "\n", "\n", "for", "e", "in", "range", "(", "num_scenes", ")", ":", "\n", "        ", "r", ",", "c", "=", "locs", "[", "e", ",", "1", "]", ",", "locs", "[", "e", ",", "0", "]", "\n", "loc_r", ",", "loc_c", "=", "[", "int", "(", "r", "*", "100.0", "/", "args", ".", "map_resolution", ")", ",", "\n", "int", "(", "c", "*", "100.0", "/", "args", ".", "map_resolution", ")", "]", "\n", "\n", "local_map", "[", "e", ",", "2", ":", "4", ",", "loc_r", "-", "1", ":", "loc_r", "+", "2", ",", "loc_c", "-", "1", ":", "loc_c", "+", "2", "]", "=", "1.", "\n", "global_orientation", "[", "e", "]", "=", "int", "(", "(", "locs", "[", "e", ",", "2", "]", "+", "180.0", ")", "/", "5.", ")", "\n", "\n", "", "global_input", "[", ":", ",", "0", ":", "4", ",", ":", ",", ":", "]", "=", "local_map", "[", ":", ",", "0", ":", "4", ",", ":", ",", ":", "]", ".", "detach", "(", ")", "\n", "global_input", "[", ":", ",", "4", ":", "8", ",", ":", ",", ":", "]", "=", "nn", ".", "MaxPool2d", "(", "args", ".", "global_downscaling", ")", "(", "\n", "full_map", "[", ":", ",", "0", ":", "4", ",", ":", ",", ":", "]", ")", "\n", "global_input", "[", ":", ",", "8", ":", ",", ":", ",", ":", "]", "=", "local_map", "[", ":", ",", "4", ":", ",", ":", ",", ":", "]", ".", "detach", "(", ")", "\n", "goal_cat_id", "=", "torch", ".", "from_numpy", "(", "np", ".", "asarray", "(", "\n", "[", "infos", "[", "env_idx", "]", "[", "'goal_cat_id'", "]", "for", "env_idx", "\n", "in", "range", "(", "num_scenes", ")", "]", ")", ")", "\n", "\n", "extras", "=", "torch", ".", "zeros", "(", "num_scenes", ",", "2", ")", "\n", "extras", "[", ":", ",", "0", "]", "=", "global_orientation", "[", ":", ",", "0", "]", "\n", "extras", "[", ":", ",", "1", "]", "=", "goal_cat_id", "\n", "\n", "g_rollouts", ".", "obs", "[", "0", "]", ".", "copy_", "(", "global_input", ")", "\n", "g_rollouts", ".", "extras", "[", "0", "]", ".", "copy_", "(", "extras", ")", "\n", "\n", "# Run Global Policy (global_goals = Long-Term Goal)", "\n", "g_value", ",", "g_action", ",", "g_action_log_prob", ",", "g_rec_states", "=", "g_policy", ".", "act", "(", "\n", "g_rollouts", ".", "obs", "[", "0", "]", ",", "\n", "g_rollouts", ".", "rec_states", "[", "0", "]", ",", "\n", "g_rollouts", ".", "masks", "[", "0", "]", ",", "\n", "extras", "=", "g_rollouts", ".", "extras", "[", "0", "]", ",", "\n", "deterministic", "=", "False", "\n", ")", "\n", "\n", "cpu_actions", "=", "nn", ".", "Sigmoid", "(", ")", "(", "g_action", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "global_goals", "=", "[", "[", "int", "(", "action", "[", "0", "]", "*", "local_w", ")", ",", "int", "(", "action", "[", "1", "]", "*", "local_h", ")", "]", "\n", "for", "action", "in", "cpu_actions", "]", "\n", "global_goals", "=", "[", "[", "min", "(", "x", ",", "int", "(", "local_w", "-", "1", ")", ")", ",", "min", "(", "y", ",", "int", "(", "local_h", "-", "1", ")", ")", "]", "\n", "for", "x", ",", "y", "in", "global_goals", "]", "\n", "\n", "goal_maps", "=", "[", "np", ".", "zeros", "(", "(", "local_w", ",", "local_h", ")", ")", "for", "_", "in", "range", "(", "num_scenes", ")", "]", "\n", "\n", "for", "e", "in", "range", "(", "num_scenes", ")", ":", "\n", "        ", "goal_maps", "[", "e", "]", "[", "global_goals", "[", "e", "]", "[", "0", "]", ",", "global_goals", "[", "e", "]", "[", "1", "]", "]", "=", "1", "\n", "\n", "", "planner_inputs", "=", "[", "{", "}", "for", "e", "in", "range", "(", "num_scenes", ")", "]", "\n", "for", "e", ",", "p_input", "in", "enumerate", "(", "planner_inputs", ")", ":", "\n", "        ", "p_input", "[", "'map_pred'", "]", "=", "local_map", "[", "e", ",", "0", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "p_input", "[", "'exp_pred'", "]", "=", "local_map", "[", "e", ",", "1", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "p_input", "[", "'pose_pred'", "]", "=", "planner_pose_inputs", "[", "e", "]", "\n", "p_input", "[", "'goal'", "]", "=", "goal_maps", "[", "e", "]", "# global_goals[e]", "\n", "p_input", "[", "'new_goal'", "]", "=", "1", "\n", "p_input", "[", "'found_goal'", "]", "=", "0", "\n", "p_input", "[", "'wait'", "]", "=", "wait_env", "[", "e", "]", "or", "finished", "[", "e", "]", "\n", "if", "args", ".", "visualize", "or", "args", ".", "print_images", ":", "\n", "            ", "local_map", "[", "e", ",", "-", "1", ",", ":", ",", ":", "]", "=", "1e-5", "\n", "p_input", "[", "'sem_map_pred'", "]", "=", "local_map", "[", "e", ",", "4", ":", ",", ":", ",", ":", "\n", "]", ".", "argmax", "(", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "", "obs", ",", "_", ",", "done", ",", "infos", "=", "envs", ".", "plan_act_and_preprocess", "(", "planner_inputs", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "g_reward", "=", "0", "\n", "\n", "torch", ".", "set_grad_enabled", "(", "False", ")", "\n", "spl_per_category", "=", "defaultdict", "(", "list", ")", "\n", "success_per_category", "=", "defaultdict", "(", "list", ")", "\n", "\n", "for", "step", "in", "range", "(", "args", ".", "num_training_frames", "//", "args", ".", "num_processes", "+", "1", ")", ":", "\n", "        ", "if", "finished", ".", "sum", "(", ")", "==", "args", ".", "num_processes", ":", "\n", "            ", "break", "\n", "\n", "", "g_step", "=", "(", "step", "//", "args", ".", "num_local_steps", ")", "%", "args", ".", "num_global_steps", "\n", "l_step", "=", "step", "%", "args", ".", "num_local_steps", "\n", "\n", "# ------------------------------------------------------------------", "\n", "# Reinitialize variables when episode ends", "\n", "l_masks", "=", "torch", ".", "FloatTensor", "(", "[", "0", "if", "x", "else", "1", "\n", "for", "x", "in", "done", "]", ")", ".", "to", "(", "device", ")", "\n", "g_masks", "*=", "l_masks", "\n", "\n", "for", "e", ",", "x", "in", "enumerate", "(", "done", ")", ":", "\n", "            ", "if", "x", ":", "\n", "                ", "spl", "=", "infos", "[", "e", "]", "[", "'spl'", "]", "\n", "success", "=", "infos", "[", "e", "]", "[", "'success'", "]", "\n", "dist", "=", "infos", "[", "e", "]", "[", "'distance_to_goal'", "]", "\n", "spl_per_category", "[", "infos", "[", "e", "]", "[", "'goal_name'", "]", "]", ".", "append", "(", "spl", ")", "\n", "success_per_category", "[", "infos", "[", "e", "]", "[", "'goal_name'", "]", "]", ".", "append", "(", "success", ")", "\n", "if", "args", ".", "eval", ":", "\n", "                    ", "episode_success", "[", "e", "]", ".", "append", "(", "success", ")", "\n", "episode_spl", "[", "e", "]", ".", "append", "(", "spl", ")", "\n", "episode_dist", "[", "e", "]", ".", "append", "(", "dist", ")", "\n", "if", "len", "(", "episode_success", "[", "e", "]", ")", "==", "num_episodes", ":", "\n", "                        ", "finished", "[", "e", "]", "=", "1", "\n", "", "", "else", ":", "\n", "                    ", "episode_success", ".", "append", "(", "success", ")", "\n", "episode_spl", ".", "append", "(", "spl", ")", "\n", "episode_dist", ".", "append", "(", "dist", ")", "\n", "", "wait_env", "[", "e", "]", "=", "1.", "\n", "update_intrinsic_rew", "(", "e", ")", "\n", "init_map_and_pose_for_env", "(", "e", ")", "\n", "# ------------------------------------------------------------------", "\n", "\n", "# ------------------------------------------------------------------", "\n", "# Semantic Mapping Module", "\n", "", "", "poses", "=", "torch", ".", "from_numpy", "(", "np", ".", "asarray", "(", "\n", "[", "infos", "[", "env_idx", "]", "[", "'sensor_pose'", "]", "for", "env_idx", "\n", "in", "range", "(", "num_scenes", ")", "]", ")", "\n", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "_", ",", "local_map", ",", "_", ",", "local_pose", "=", "sem_map_module", "(", "obs", ",", "poses", ",", "local_map", ",", "local_pose", ")", "\n", "\n", "locs", "=", "local_pose", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "planner_pose_inputs", "[", ":", ",", ":", "3", "]", "=", "locs", "+", "origins", "\n", "local_map", "[", ":", ",", "2", ",", ":", ",", ":", "]", ".", "fill_", "(", "0.", ")", "# Resetting current location channel", "\n", "for", "e", "in", "range", "(", "num_scenes", ")", ":", "\n", "            ", "r", ",", "c", "=", "locs", "[", "e", ",", "1", "]", ",", "locs", "[", "e", ",", "0", "]", "\n", "loc_r", ",", "loc_c", "=", "[", "int", "(", "r", "*", "100.0", "/", "args", ".", "map_resolution", ")", ",", "\n", "int", "(", "c", "*", "100.0", "/", "args", ".", "map_resolution", ")", "]", "\n", "local_map", "[", "e", ",", "2", ":", "4", ",", "loc_r", "-", "2", ":", "loc_r", "+", "3", ",", "loc_c", "-", "2", ":", "loc_c", "+", "3", "]", "=", "1.", "\n", "\n", "# ------------------------------------------------------------------", "\n", "\n", "# ------------------------------------------------------------------", "\n", "# Global Policy", "\n", "", "if", "l_step", "==", "args", ".", "num_local_steps", "-", "1", ":", "\n", "# For every global step, update the full and local maps", "\n", "            ", "for", "e", "in", "range", "(", "num_scenes", ")", ":", "\n", "                ", "if", "wait_env", "[", "e", "]", "==", "1", ":", "# New episode", "\n", "                    ", "wait_env", "[", "e", "]", "=", "0.", "\n", "", "else", ":", "\n", "                    ", "update_intrinsic_rew", "(", "e", ")", "\n", "\n", "", "full_map", "[", "e", ",", ":", ",", "lmb", "[", "e", ",", "0", "]", ":", "lmb", "[", "e", ",", "1", "]", ",", "lmb", "[", "e", ",", "2", "]", ":", "lmb", "[", "e", ",", "3", "]", "]", "=", "local_map", "[", "e", "]", "\n", "full_pose", "[", "e", "]", "=", "local_pose", "[", "e", "]", "+", "torch", ".", "from_numpy", "(", "origins", "[", "e", "]", ")", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "\n", "locs", "=", "full_pose", "[", "e", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "r", ",", "c", "=", "locs", "[", "1", "]", ",", "locs", "[", "0", "]", "\n", "loc_r", ",", "loc_c", "=", "[", "int", "(", "r", "*", "100.0", "/", "args", ".", "map_resolution", ")", ",", "\n", "int", "(", "c", "*", "100.0", "/", "args", ".", "map_resolution", ")", "]", "\n", "\n", "lmb", "[", "e", "]", "=", "get_local_map_boundaries", "(", "(", "loc_r", ",", "loc_c", ")", ",", "\n", "(", "local_w", ",", "local_h", ")", ",", "\n", "(", "full_w", ",", "full_h", ")", ")", "\n", "\n", "planner_pose_inputs", "[", "e", ",", "3", ":", "]", "=", "lmb", "[", "e", "]", "\n", "origins", "[", "e", "]", "=", "[", "lmb", "[", "e", "]", "[", "2", "]", "*", "args", ".", "map_resolution", "/", "100.0", ",", "\n", "lmb", "[", "e", "]", "[", "0", "]", "*", "args", ".", "map_resolution", "/", "100.0", ",", "0.", "]", "\n", "\n", "local_map", "[", "e", "]", "=", "full_map", "[", "e", ",", ":", ",", "\n", "lmb", "[", "e", ",", "0", "]", ":", "lmb", "[", "e", ",", "1", "]", ",", "\n", "lmb", "[", "e", ",", "2", "]", ":", "lmb", "[", "e", ",", "3", "]", "]", "\n", "local_pose", "[", "e", "]", "=", "full_pose", "[", "e", "]", "-", "torch", ".", "from_numpy", "(", "origins", "[", "e", "]", ")", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "\n", "", "locs", "=", "local_pose", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "e", "in", "range", "(", "num_scenes", ")", ":", "\n", "                ", "global_orientation", "[", "e", "]", "=", "int", "(", "(", "locs", "[", "e", ",", "2", "]", "+", "180.0", ")", "/", "5.", ")", "\n", "", "global_input", "[", ":", ",", "0", ":", "4", ",", ":", ",", ":", "]", "=", "local_map", "[", ":", ",", "0", ":", "4", ",", ":", ",", ":", "]", "\n", "global_input", "[", ":", ",", "4", ":", "8", ",", ":", ",", ":", "]", "=", "nn", ".", "MaxPool2d", "(", "args", ".", "global_downscaling", ")", "(", "\n", "full_map", "[", ":", ",", "0", ":", "4", ",", ":", ",", ":", "]", ")", "\n", "global_input", "[", ":", ",", "8", ":", ",", ":", ",", ":", "]", "=", "local_map", "[", ":", ",", "4", ":", ",", ":", ",", ":", "]", ".", "detach", "(", ")", "\n", "goal_cat_id", "=", "torch", ".", "from_numpy", "(", "np", ".", "asarray", "(", "\n", "[", "infos", "[", "env_idx", "]", "[", "'goal_cat_id'", "]", "for", "env_idx", "\n", "in", "range", "(", "num_scenes", ")", "]", ")", ")", "\n", "extras", "[", ":", ",", "0", "]", "=", "global_orientation", "[", ":", ",", "0", "]", "\n", "extras", "[", ":", ",", "1", "]", "=", "goal_cat_id", "\n", "\n", "# Get exploration reward and metrics", "\n", "g_reward", "=", "torch", ".", "from_numpy", "(", "np", ".", "asarray", "(", "\n", "[", "infos", "[", "env_idx", "]", "[", "'g_reward'", "]", "for", "env_idx", "in", "range", "(", "num_scenes", ")", "]", ")", "\n", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "g_reward", "+=", "args", ".", "intrinsic_rew_coeff", "*", "intrinsic_rews", ".", "detach", "(", ")", "\n", "\n", "g_process_rewards", "+=", "g_reward", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "g_total_rewards", "=", "g_process_rewards", "*", "(", "1", "-", "g_masks", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "g_process_rewards", "*=", "g_masks", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "per_step_g_rewards", ".", "append", "(", "np", ".", "mean", "(", "g_reward", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "\n", "if", "np", ".", "sum", "(", "g_total_rewards", ")", "!=", "0", ":", "\n", "                ", "for", "total_rew", "in", "g_total_rewards", ":", "\n", "                    ", "if", "total_rew", "!=", "0", ":", "\n", "                        ", "g_episode_rewards", ".", "append", "(", "total_rew", ")", "\n", "\n", "# Add samples to global policy storage", "\n", "", "", "", "if", "step", "==", "0", ":", "\n", "                ", "g_rollouts", ".", "obs", "[", "0", "]", ".", "copy_", "(", "global_input", ")", "\n", "g_rollouts", ".", "extras", "[", "0", "]", ".", "copy_", "(", "extras", ")", "\n", "", "else", ":", "\n", "                ", "g_rollouts", ".", "insert", "(", "\n", "global_input", ",", "g_rec_states", ",", "\n", "g_action", ",", "g_action_log_prob", ",", "g_value", ",", "\n", "g_reward", ",", "g_masks", ",", "extras", "\n", ")", "\n", "\n", "# Sample long-term goal from global policy", "\n", "", "g_value", ",", "g_action", ",", "g_action_log_prob", ",", "g_rec_states", "=", "g_policy", ".", "act", "(", "\n", "g_rollouts", ".", "obs", "[", "g_step", "+", "1", "]", ",", "\n", "g_rollouts", ".", "rec_states", "[", "g_step", "+", "1", "]", ",", "\n", "g_rollouts", ".", "masks", "[", "g_step", "+", "1", "]", ",", "\n", "extras", "=", "g_rollouts", ".", "extras", "[", "g_step", "+", "1", "]", ",", "\n", "deterministic", "=", "False", "\n", ")", "\n", "cpu_actions", "=", "nn", ".", "Sigmoid", "(", ")", "(", "g_action", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "global_goals", "=", "[", "[", "int", "(", "action", "[", "0", "]", "*", "local_w", ")", ",", "\n", "int", "(", "action", "[", "1", "]", "*", "local_h", ")", "]", "\n", "for", "action", "in", "cpu_actions", "]", "\n", "global_goals", "=", "[", "[", "min", "(", "x", ",", "int", "(", "local_w", "-", "1", ")", ")", ",", "\n", "min", "(", "y", ",", "int", "(", "local_h", "-", "1", ")", ")", "]", "\n", "for", "x", ",", "y", "in", "global_goals", "]", "\n", "\n", "g_reward", "=", "0", "\n", "g_masks", "=", "torch", ".", "ones", "(", "num_scenes", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "# ------------------------------------------------------------------", "\n", "\n", "# ------------------------------------------------------------------", "\n", "# Update long-term goal if target object is found", "\n", "", "found_goal", "=", "[", "0", "for", "_", "in", "range", "(", "num_scenes", ")", "]", "\n", "goal_maps", "=", "[", "np", ".", "zeros", "(", "(", "local_w", ",", "local_h", ")", ")", "for", "_", "in", "range", "(", "num_scenes", ")", "]", "\n", "\n", "for", "e", "in", "range", "(", "num_scenes", ")", ":", "\n", "            ", "goal_maps", "[", "e", "]", "[", "global_goals", "[", "e", "]", "[", "0", "]", ",", "global_goals", "[", "e", "]", "[", "1", "]", "]", "=", "1", "\n", "\n", "", "for", "e", "in", "range", "(", "num_scenes", ")", ":", "\n", "            ", "cn", "=", "infos", "[", "e", "]", "[", "'goal_cat_id'", "]", "+", "4", "\n", "if", "local_map", "[", "e", ",", "cn", ",", ":", ",", ":", "]", ".", "sum", "(", ")", "!=", "0.", ":", "\n", "                ", "cat_semantic_map", "=", "local_map", "[", "e", ",", "cn", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "cat_semantic_scores", "=", "cat_semantic_map", "\n", "cat_semantic_scores", "[", "cat_semantic_scores", ">", "0", "]", "=", "1.", "\n", "goal_maps", "[", "e", "]", "=", "cat_semantic_scores", "\n", "found_goal", "[", "e", "]", "=", "1", "\n", "# ------------------------------------------------------------------", "\n", "\n", "# ------------------------------------------------------------------", "\n", "# Take action and get next observation", "\n", "", "", "planner_inputs", "=", "[", "{", "}", "for", "e", "in", "range", "(", "num_scenes", ")", "]", "\n", "for", "e", ",", "p_input", "in", "enumerate", "(", "planner_inputs", ")", ":", "\n", "            ", "p_input", "[", "'map_pred'", "]", "=", "local_map", "[", "e", ",", "0", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "p_input", "[", "'exp_pred'", "]", "=", "local_map", "[", "e", ",", "1", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "p_input", "[", "'pose_pred'", "]", "=", "planner_pose_inputs", "[", "e", "]", "\n", "p_input", "[", "'goal'", "]", "=", "goal_maps", "[", "e", "]", "# global_goals[e]", "\n", "p_input", "[", "'new_goal'", "]", "=", "l_step", "==", "args", ".", "num_local_steps", "-", "1", "\n", "p_input", "[", "'found_goal'", "]", "=", "found_goal", "[", "e", "]", "\n", "p_input", "[", "'wait'", "]", "=", "wait_env", "[", "e", "]", "or", "finished", "[", "e", "]", "\n", "if", "args", ".", "visualize", "or", "args", ".", "print_images", ":", "\n", "                ", "local_map", "[", "e", ",", "-", "1", ",", ":", ",", ":", "]", "=", "1e-5", "\n", "p_input", "[", "'sem_map_pred'", "]", "=", "local_map", "[", "e", ",", "4", ":", ",", ":", ",", "\n", ":", "]", ".", "argmax", "(", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "", "obs", ",", "_", ",", "done", ",", "infos", "=", "envs", ".", "plan_act_and_preprocess", "(", "planner_inputs", ")", "\n", "# ------------------------------------------------------------------", "\n", "\n", "# ------------------------------------------------------------------", "\n", "# Training", "\n", "torch", ".", "set_grad_enabled", "(", "True", ")", "\n", "if", "g_step", "%", "args", ".", "num_global_steps", "==", "args", ".", "num_global_steps", "-", "1", "and", "l_step", "==", "args", ".", "num_local_steps", "-", "1", ":", "\n", "            ", "if", "not", "args", ".", "eval", ":", "\n", "                ", "g_next_value", "=", "g_policy", ".", "get_value", "(", "\n", "g_rollouts", ".", "obs", "[", "-", "1", "]", ",", "\n", "g_rollouts", ".", "rec_states", "[", "-", "1", "]", ",", "\n", "g_rollouts", ".", "masks", "[", "-", "1", "]", ",", "\n", "extras", "=", "g_rollouts", ".", "extras", "[", "-", "1", "]", "\n", ")", ".", "detach", "(", ")", "\n", "\n", "g_rollouts", ".", "compute_returns", "(", "g_next_value", ",", "args", ".", "use_gae", ",", "\n", "args", ".", "gamma", ",", "args", ".", "tau", ")", "\n", "g_value_loss", ",", "g_action_loss", ",", "g_dist_entropy", "=", "g_agent", ".", "update", "(", "g_rollouts", ")", "\n", "g_value_losses", ".", "append", "(", "g_value_loss", ")", "\n", "g_action_losses", ".", "append", "(", "g_action_loss", ")", "\n", "g_dist_entropies", ".", "append", "(", "g_dist_entropy", ")", "\n", "", "g_rollouts", ".", "after_update", "(", ")", "\n", "\n", "", "torch", ".", "set_grad_enabled", "(", "False", ")", "\n", "# ------------------------------------------------------------------", "\n", "\n", "# ------------------------------------------------------------------", "\n", "# Logging", "\n", "if", "step", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "            ", "end", "=", "time", ".", "time", "(", ")", "\n", "time_elapsed", "=", "time", ".", "gmtime", "(", "end", "-", "start", ")", "\n", "log", "=", "\" \"", ".", "join", "(", "[", "\n", "\"Time: {0:0=2d}d\"", ".", "format", "(", "time_elapsed", ".", "tm_mday", "-", "1", ")", ",", "\n", "\"{},\"", ".", "format", "(", "time", ".", "strftime", "(", "\"%Hh %Mm %Ss\"", ",", "time_elapsed", ")", ")", ",", "\n", "\"num timesteps {},\"", ".", "format", "(", "step", "*", "num_scenes", ")", ",", "\n", "\"FPS {},\"", ".", "format", "(", "int", "(", "step", "*", "num_scenes", "/", "(", "end", "-", "start", ")", ")", ")", "\n", "]", ")", "\n", "\n", "log", "+=", "\"\\n\\tRewards:\"", "\n", "\n", "if", "len", "(", "g_episode_rewards", ")", ">", "0", ":", "\n", "                ", "log", "+=", "\" \"", ".", "join", "(", "[", "\n", "\" Global step mean/med rew:\"", ",", "\n", "\"{:.4f}/{:.4f},\"", ".", "format", "(", "\n", "np", ".", "mean", "(", "per_step_g_rewards", ")", ",", "\n", "np", ".", "median", "(", "per_step_g_rewards", ")", ")", ",", "\n", "\" Global eps mean/med/min/max eps rew:\"", ",", "\n", "\"{:.3f}/{:.3f}/{:.3f}/{:.3f},\"", ".", "format", "(", "\n", "np", ".", "mean", "(", "g_episode_rewards", ")", ",", "\n", "np", ".", "median", "(", "g_episode_rewards", ")", ",", "\n", "np", ".", "min", "(", "g_episode_rewards", ")", ",", "\n", "np", ".", "max", "(", "g_episode_rewards", ")", ")", "\n", "]", ")", "\n", "\n", "", "if", "args", ".", "eval", ":", "\n", "                ", "total_success", "=", "[", "]", "\n", "total_spl", "=", "[", "]", "\n", "total_dist", "=", "[", "]", "\n", "for", "e", "in", "range", "(", "args", ".", "num_processes", ")", ":", "\n", "                    ", "for", "acc", "in", "episode_success", "[", "e", "]", ":", "\n", "                        ", "total_success", ".", "append", "(", "acc", ")", "\n", "", "for", "dist", "in", "episode_dist", "[", "e", "]", ":", "\n", "                        ", "total_dist", ".", "append", "(", "dist", ")", "\n", "", "for", "spl", "in", "episode_spl", "[", "e", "]", ":", "\n", "                        ", "total_spl", ".", "append", "(", "spl", ")", "\n", "\n", "", "", "if", "len", "(", "total_spl", ")", ">", "0", ":", "\n", "                    ", "log", "+=", "\" ObjectNav succ/spl/dtg:\"", "\n", "log", "+=", "\" {:.3f}/{:.3f}/{:.3f}({:.0f}),\"", ".", "format", "(", "\n", "np", ".", "mean", "(", "total_success", ")", ",", "\n", "np", ".", "mean", "(", "total_spl", ")", ",", "\n", "np", ".", "mean", "(", "total_dist", ")", ",", "\n", "len", "(", "total_spl", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "len", "(", "episode_success", ")", ">", "100", ":", "\n", "                    ", "log", "+=", "\" ObjectNav succ/spl/dtg:\"", "\n", "log", "+=", "\" {:.3f}/{:.3f}/{:.3f}({:.0f}),\"", ".", "format", "(", "\n", "np", ".", "mean", "(", "episode_success", ")", ",", "\n", "np", ".", "mean", "(", "episode_spl", ")", ",", "\n", "np", ".", "mean", "(", "episode_dist", ")", ",", "\n", "len", "(", "episode_spl", ")", ")", "\n", "\n", "", "", "log", "+=", "\"\\n\\tLosses:\"", "\n", "if", "len", "(", "g_value_losses", ")", ">", "0", "and", "not", "args", ".", "eval", ":", "\n", "                ", "log", "+=", "\" \"", ".", "join", "(", "[", "\n", "\" Policy Loss value/action/dist:\"", ",", "\n", "\"{:.3f}/{:.3f}/{:.3f},\"", ".", "format", "(", "\n", "np", ".", "mean", "(", "g_value_losses", ")", ",", "\n", "np", ".", "mean", "(", "g_action_losses", ")", ",", "\n", "np", ".", "mean", "(", "g_dist_entropies", ")", ")", "\n", "]", ")", "\n", "\n", "", "print", "(", "log", ")", "\n", "logging", ".", "info", "(", "log", ")", "\n", "# ------------------------------------------------------------------", "\n", "\n", "# ------------------------------------------------------------------", "\n", "# Save best models", "\n", "", "if", "(", "step", "*", "num_scenes", ")", "%", "args", ".", "save_interval", "<", "num_scenes", ":", "\n", "            ", "if", "len", "(", "g_episode_rewards", ")", ">=", "1000", "and", "(", "np", ".", "mean", "(", "g_episode_rewards", ")", ">=", "best_g_reward", ")", "and", "not", "args", ".", "eval", ":", "\n", "                ", "torch", ".", "save", "(", "g_policy", ".", "state_dict", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "log_dir", ",", "\"model_best.pth\"", ")", ")", "\n", "best_g_reward", "=", "np", ".", "mean", "(", "g_episode_rewards", ")", "\n", "\n", "# Save periodic models", "\n", "", "", "if", "(", "step", "*", "num_scenes", ")", "%", "args", ".", "save_periodic", "<", "num_scenes", ":", "\n", "            ", "total_steps", "=", "step", "*", "num_scenes", "\n", "if", "not", "args", ".", "eval", ":", "\n", "                ", "torch", ".", "save", "(", "g_policy", ".", "state_dict", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "dump_dir", ",", "\n", "\"periodic_{}.pth\"", ".", "format", "(", "total_steps", ")", ")", ")", "\n", "# ------------------------------------------------------------------", "\n", "\n", "# Print and save model performance numbers during evaluation", "\n", "", "", "", "if", "args", ".", "eval", ":", "\n", "        ", "print", "(", "\"Dumping eval details...\"", ")", "\n", "\n", "total_success", "=", "[", "]", "\n", "total_spl", "=", "[", "]", "\n", "total_dist", "=", "[", "]", "\n", "for", "e", "in", "range", "(", "args", ".", "num_processes", ")", ":", "\n", "            ", "for", "acc", "in", "episode_success", "[", "e", "]", ":", "\n", "                ", "total_success", ".", "append", "(", "acc", ")", "\n", "", "for", "dist", "in", "episode_dist", "[", "e", "]", ":", "\n", "                ", "total_dist", ".", "append", "(", "dist", ")", "\n", "", "for", "spl", "in", "episode_spl", "[", "e", "]", ":", "\n", "                ", "total_spl", ".", "append", "(", "spl", ")", "\n", "\n", "", "", "if", "len", "(", "total_spl", ")", ">", "0", ":", "\n", "            ", "log", "=", "\"Final ObjectNav succ/spl/dtg:\"", "\n", "log", "+=", "\" {:.3f}/{:.3f}/{:.3f}({:.0f}),\"", ".", "format", "(", "\n", "np", ".", "mean", "(", "total_success", ")", ",", "\n", "np", ".", "mean", "(", "total_spl", ")", ",", "\n", "np", ".", "mean", "(", "total_dist", ")", ",", "\n", "len", "(", "total_spl", ")", ")", "\n", "\n", "", "print", "(", "log", ")", "\n", "logging", ".", "info", "(", "log", ")", "\n", "\n", "# Save the spl per category", "\n", "log", "=", "\"Success | SPL per category\\n\"", "\n", "for", "key", "in", "success_per_category", ":", "\n", "            ", "log", "+=", "\"{}: {} | {}\\n\"", ".", "format", "(", "key", ",", "\n", "sum", "(", "success_per_category", "[", "key", "]", ")", "/", "\n", "len", "(", "success_per_category", "[", "key", "]", ")", ",", "\n", "sum", "(", "spl_per_category", "[", "key", "]", ")", "/", "\n", "len", "(", "spl_per_category", "[", "key", "]", ")", ")", "\n", "\n", "", "print", "(", "log", ")", "\n", "logging", ".", "info", "(", "log", ")", "\n", "\n", "with", "open", "(", "'{}/{}_spl_per_cat_pred_thr.json'", ".", "format", "(", "\n", "dump_dir", ",", "args", ".", "split", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "spl_per_category", ",", "f", ")", "\n", "\n", "", "with", "open", "(", "'{}/{}_success_per_cat_pred_thr.json'", ".", "format", "(", "\n", "dump_dir", ",", "args", ".", "split", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "success_per_category", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.None.arguments.get_args": [[5, 231], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.cuda.is_available", "max", "int", "torch.cuda.device_count", "max", "range", "int", "int", "print", "print", "print", "print", "int", "min", "min", "max", "torch.cuda.get_device_properties"], "function", ["None"], ["def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'Goal-Oriented-Semantic-Exploration'", ")", "\n", "\n", "# General Arguments", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'random seed (default: 1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--auto_gpu_config'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--total_num_scenes'", ",", "type", "=", "str", ",", "default", "=", "\"auto\"", ")", "\n", "parser", ".", "add_argument", "(", "'-n'", ",", "'--num_processes'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "\n", "help", "=", "\"\"\"how many training processes to use (default:5)\n                                Overridden when auto_gpu_config=1\n                                and training on gpus\"\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--num_processes_per_gpu'", ",", "type", "=", "int", ",", "default", "=", "6", ")", "\n", "parser", ".", "add_argument", "(", "'--num_processes_on_first_gpu'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--eval'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'0: Train, 1: Evaluate (default: 0)'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_training_frames'", ",", "type", "=", "int", ",", "default", "=", "10000000", ",", "\n", "help", "=", "'total number of training frames'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_eval_episodes'", ",", "type", "=", "int", ",", "default", "=", "200", ",", "\n", "help", "=", "\"number of test episodes per scene\"", ")", "\n", "parser", ".", "add_argument", "(", "'--num_train_episodes'", ",", "type", "=", "int", ",", "default", "=", "10000", ",", "\n", "help", "=", "\"\"\"number of train episodes per scene\n                                before loading the next scene\"\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--no_cuda'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'disables CUDA training'", ")", "\n", "parser", ".", "add_argument", "(", "\"--sim_gpu_id\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "\"gpu id on which scenes are loaded\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--sem_gpu_id\"", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "\"\"\"gpu id for semantic model,\n                                -1: same as sim gpu, -2: cpu\"\"\"", ")", "\n", "\n", "# Logging, loading models, visualization", "\n", "parser", ".", "add_argument", "(", "'--log_interval'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "\"\"\"log interval, one log per n updates\n                                (default: 10) \"\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--save_interval'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "\"\"\"save interval\"\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'-d'", ",", "'--dump_location'", ",", "type", "=", "str", ",", "default", "=", "\"./tmp/\"", ",", "\n", "help", "=", "'path to dump models and log (default: ./tmp/)'", ")", "\n", "parser", ".", "add_argument", "(", "'--exp_name'", ",", "type", "=", "str", ",", "default", "=", "\"exp1\"", ",", "\n", "help", "=", "'experiment name (default: exp1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_periodic'", ",", "type", "=", "int", ",", "default", "=", "500000", ",", "\n", "help", "=", "'Model save frequency in number of updates'", ")", "\n", "parser", ".", "add_argument", "(", "'--load'", ",", "type", "=", "str", ",", "default", "=", "\"0\"", ",", "\n", "help", "=", "\"\"\"model path to load,\n                                0 to not reload (default: 0)\"\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'-v'", ",", "'--visualize'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "\"\"\"1: Render the observation and\n                                   the predicted semantic map,\n                                2: Render the observation with semantic\n                                   predictions and the predicted semantic map\n                                (default: 0)\"\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--print_images'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'1: save visualization as images'", ")", "\n", "\n", "# Environment, dataset and episode specifications", "\n", "parser", ".", "add_argument", "(", "'-efw'", ",", "'--env_frame_width'", ",", "type", "=", "int", ",", "default", "=", "640", ",", "\n", "help", "=", "'Frame width (default:640)'", ")", "\n", "parser", ".", "add_argument", "(", "'-efh'", ",", "'--env_frame_height'", ",", "type", "=", "int", ",", "default", "=", "480", ",", "\n", "help", "=", "'Frame height (default:480)'", ")", "\n", "parser", ".", "add_argument", "(", "'-fw'", ",", "'--frame_width'", ",", "type", "=", "int", ",", "default", "=", "160", ",", "\n", "help", "=", "'Frame width (default:160)'", ")", "\n", "parser", ".", "add_argument", "(", "'-fh'", ",", "'--frame_height'", ",", "type", "=", "int", ",", "default", "=", "120", ",", "\n", "help", "=", "'Frame height (default:120)'", ")", "\n", "parser", ".", "add_argument", "(", "'-el'", ",", "'--max_episode_length'", ",", "type", "=", "int", ",", "default", "=", "500", ",", "\n", "help", "=", "\"\"\"Maximum episode length\"\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--task_config\"", ",", "type", "=", "str", ",", "\n", "default", "=", "\"tasks/objectnav_gibson.yaml\"", ",", "\n", "help", "=", "\"path to config yaml containing task information\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--split\"", ",", "type", "=", "str", ",", "default", "=", "\"train\"", ",", "\n", "help", "=", "\"dataset split (train | val | val_mini) \"", ")", "\n", "parser", ".", "add_argument", "(", "'--camera_height'", ",", "type", "=", "float", ",", "default", "=", "0.88", ",", "\n", "help", "=", "\"agent camera height in metres\"", ")", "\n", "parser", ".", "add_argument", "(", "'--hfov'", ",", "type", "=", "float", ",", "default", "=", "79.0", ",", "\n", "help", "=", "\"horizontal field of view in degrees\"", ")", "\n", "parser", ".", "add_argument", "(", "'--turn_angle'", ",", "type", "=", "float", ",", "default", "=", "30", ",", "\n", "help", "=", "\"Agent turn angle in degrees\"", ")", "\n", "parser", ".", "add_argument", "(", "'--min_depth'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "\n", "help", "=", "\"Minimum depth for depth sensor in meters\"", ")", "\n", "parser", ".", "add_argument", "(", "'--max_depth'", ",", "type", "=", "float", ",", "default", "=", "5.0", ",", "\n", "help", "=", "\"Maximum depth for depth sensor in meters\"", ")", "\n", "parser", ".", "add_argument", "(", "'--success_dist'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "\n", "help", "=", "\"success distance threshold in meters\"", ")", "\n", "parser", ".", "add_argument", "(", "'--floor_thr'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "\n", "help", "=", "\"floor threshold in cm\"", ")", "\n", "parser", ".", "add_argument", "(", "'--min_d'", ",", "type", "=", "float", ",", "default", "=", "1.5", ",", "\n", "help", "=", "\"min distance to goal during training in meters\"", ")", "\n", "parser", ".", "add_argument", "(", "'--max_d'", ",", "type", "=", "float", ",", "default", "=", "100.0", ",", "\n", "help", "=", "\"max distance to goal during training in meters\"", ")", "\n", "parser", ".", "add_argument", "(", "'--version'", ",", "type", "=", "str", ",", "default", "=", "\"v1.1\"", ",", "\n", "help", "=", "\"dataset version\"", ")", "\n", "\n", "# Model Hyperparameters", "\n", "parser", ".", "add_argument", "(", "'--agent'", ",", "type", "=", "str", ",", "default", "=", "\"sem_exp\"", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "2.5e-5", ",", "\n", "help", "=", "'learning rate (default: 2.5e-5)'", ")", "\n", "parser", ".", "add_argument", "(", "'--global_hidden_size'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "\n", "help", "=", "'global_hidden_size'", ")", "\n", "parser", ".", "add_argument", "(", "'--eps'", ",", "type", "=", "float", ",", "default", "=", "1e-5", ",", "\n", "help", "=", "'RL Optimizer epsilon (default: 1e-5)'", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha'", ",", "type", "=", "float", ",", "default", "=", "0.99", ",", "\n", "help", "=", "'RL Optimizer alpha (default: 0.99)'", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma'", ",", "type", "=", "float", ",", "default", "=", "0.99", ",", "\n", "help", "=", "'discount factor for rewards (default: 0.99)'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_gae'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'use generalized advantage estimation'", ")", "\n", "parser", ".", "add_argument", "(", "'--tau'", ",", "type", "=", "float", ",", "default", "=", "0.95", ",", "\n", "help", "=", "'gae parameter (default: 0.95)'", ")", "\n", "parser", ".", "add_argument", "(", "'--entropy_coef'", ",", "type", "=", "float", ",", "default", "=", "0.001", ",", "\n", "help", "=", "'entropy term coefficient (default: 0.01)'", ")", "\n", "parser", ".", "add_argument", "(", "'--value_loss_coef'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "\n", "help", "=", "'value loss coefficient (default: 0.5)'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_grad_norm'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "\n", "help", "=", "'max norm of gradients (default: 0.5)'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_global_steps'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "\n", "help", "=", "'number of forward steps in A2C (default: 5)'", ")", "\n", "parser", ".", "add_argument", "(", "'--ppo_epoch'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "'number of ppo epochs (default: 4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_mini_batch'", ",", "type", "=", "str", ",", "default", "=", "\"auto\"", ",", "\n", "help", "=", "'number of batches for ppo (default: 32)'", ")", "\n", "parser", ".", "add_argument", "(", "'--clip_param'", ",", "type", "=", "float", ",", "default", "=", "0.2", ",", "\n", "help", "=", "'ppo clip parameter (default: 0.2)'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_recurrent_global'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'use a recurrent global policy'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_local_steps'", ",", "type", "=", "int", ",", "default", "=", "25", ",", "\n", "help", "=", "\"\"\"Number of steps the local policy\n                                between each global step\"\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--reward_coeff'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "\n", "help", "=", "\"Object goal reward coefficient\"", ")", "\n", "parser", ".", "add_argument", "(", "'--intrinsic_rew_coeff'", ",", "type", "=", "float", ",", "default", "=", "0.02", ",", "\n", "help", "=", "\"intrinsic exploration reward coefficient\"", ")", "\n", "parser", ".", "add_argument", "(", "'--num_sem_categories'", ",", "type", "=", "float", ",", "default", "=", "16", ")", "\n", "parser", ".", "add_argument", "(", "'--sem_pred_prob_thr'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "\n", "help", "=", "\"Semantic prediction confidence threshold\"", ")", "\n", "\n", "# Mapping", "\n", "parser", ".", "add_argument", "(", "'--global_downscaling'", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "parser", ".", "add_argument", "(", "'--vision_range'", ",", "type", "=", "int", ",", "default", "=", "100", ")", "\n", "parser", ".", "add_argument", "(", "'--map_resolution'", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "'--du_scale'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--map_size_cm'", ",", "type", "=", "int", ",", "default", "=", "2400", ")", "\n", "parser", ".", "add_argument", "(", "'--cat_pred_threshold'", ",", "type", "=", "float", ",", "default", "=", "5.0", ")", "\n", "parser", ".", "add_argument", "(", "'--map_pred_threshold'", ",", "type", "=", "float", ",", "default", "=", "1.0", ")", "\n", "parser", ".", "add_argument", "(", "'--exp_pred_threshold'", ",", "type", "=", "float", ",", "default", "=", "1.0", ")", "\n", "parser", ".", "add_argument", "(", "'--collision_threshold'", ",", "type", "=", "float", ",", "default", "=", "0.20", ")", "\n", "\n", "# parse arguments", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "args", ".", "cuda", "=", "not", "args", ".", "no_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "if", "args", ".", "cuda", ":", "\n", "        ", "if", "args", ".", "auto_gpu_config", ":", "\n", "            ", "num_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "if", "args", ".", "total_num_scenes", "!=", "\"auto\"", ":", "\n", "                ", "args", ".", "total_num_scenes", "=", "int", "(", "args", ".", "total_num_scenes", ")", "\n", "", "elif", "\"objectnav_gibson\"", "in", "args", ".", "task_config", "and", "\"train\"", "in", "args", ".", "split", ":", "\n", "                ", "args", ".", "total_num_scenes", "=", "25", "\n", "", "elif", "\"objectnav_gibson\"", "in", "args", ".", "task_config", "and", "\"val\"", "in", "args", ".", "split", ":", "\n", "                ", "args", ".", "total_num_scenes", "=", "5", "\n", "", "else", ":", "\n", "                ", "assert", "False", ",", "\"Unknown task config, please specify\"", "+", "\" total_num_scenes\"", "\n", "\n", "# GPU Memory required for the SemExp model:", "\n", "#       0.8 + 0.4 * args.total_num_scenes (GB)", "\n", "# GPU Memory required per thread: 2.6 (GB)", "\n", "", "min_memory_required", "=", "max", "(", "0.8", "+", "0.4", "*", "args", ".", "total_num_scenes", ",", "2.6", ")", "\n", "# Automatically configure number of training threads based on", "\n", "# number of GPUs available and GPU memory size", "\n", "gpu_memory", "=", "1000", "\n", "for", "i", "in", "range", "(", "num_gpus", ")", ":", "\n", "                ", "gpu_memory", "=", "min", "(", "gpu_memory", ",", "\n", "torch", ".", "cuda", ".", "get_device_properties", "(", "\n", "i", ")", ".", "total_memory", "\n", "/", "1024", "/", "1024", "/", "1024", ")", "\n", "assert", "gpu_memory", ">", "min_memory_required", ",", "\"\"\"Insufficient GPU memory for GPU {}, gpu memory ({}GB)\n                    needs to be greater than {}GB\"\"\"", ".", "format", "(", "\n", "i", ",", "gpu_memory", ",", "min_memory_required", ")", "\n", "\n", "", "num_processes_per_gpu", "=", "int", "(", "gpu_memory", "/", "2.6", ")", "\n", "num_processes_on_first_gpu", "=", "int", "(", "(", "gpu_memory", "-", "min_memory_required", ")", "/", "2.6", ")", "\n", "\n", "if", "args", ".", "eval", ":", "\n", "                ", "max_threads", "=", "num_processes_per_gpu", "*", "(", "num_gpus", "-", "1", ")", "+", "num_processes_on_first_gpu", "\n", "assert", "max_threads", ">=", "args", ".", "total_num_scenes", ",", "\"\"\"Insufficient GPU memory for evaluation\"\"\"", "\n", "\n", "", "if", "num_gpus", "==", "1", ":", "\n", "                ", "args", ".", "num_processes_on_first_gpu", "=", "num_processes_on_first_gpu", "\n", "args", ".", "num_processes_per_gpu", "=", "0", "\n", "args", ".", "num_processes", "=", "num_processes_on_first_gpu", "\n", "assert", "args", ".", "num_processes", ">", "0", ",", "\"Insufficient GPU memory\"", "\n", "", "else", ":", "\n", "                ", "num_threads", "=", "num_processes_per_gpu", "*", "(", "num_gpus", "-", "1", ")", "+", "num_processes_on_first_gpu", "\n", "num_threads", "=", "min", "(", "num_threads", ",", "args", ".", "total_num_scenes", ")", "\n", "args", ".", "num_processes_per_gpu", "=", "num_processes_per_gpu", "\n", "args", ".", "num_processes_on_first_gpu", "=", "max", "(", "\n", "0", ",", "\n", "num_threads", "-", "args", ".", "num_processes_per_gpu", "*", "(", "num_gpus", "-", "1", ")", ")", "\n", "args", ".", "num_processes", "=", "num_threads", "\n", "\n", "", "args", ".", "sim_gpu_id", "=", "1", "\n", "\n", "print", "(", "\"Auto GPU config:\"", ")", "\n", "print", "(", "\"Number of processes: {}\"", ".", "format", "(", "args", ".", "num_processes", ")", ")", "\n", "print", "(", "\"Number of processes on GPU 0: {}\"", ".", "format", "(", "\n", "args", ".", "num_processes_on_first_gpu", ")", ")", "\n", "print", "(", "\"Number of processes per GPU: {}\"", ".", "format", "(", "\n", "args", ".", "num_processes_per_gpu", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "args", ".", "sem_gpu_id", "=", "-", "2", "\n", "\n", "", "if", "args", ".", "num_mini_batch", "==", "\"auto\"", ":", "\n", "        ", "args", ".", "num_mini_batch", "=", "max", "(", "args", ".", "num_processes", "//", "2", ",", "1", ")", "\n", "", "else", ":", "\n", "        ", "args", ".", "num_mini_batch", "=", "int", "(", "args", ".", "num_mini_batch", ")", "\n", "\n", "", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.None.test.main": [[19, 36], ["int", "torch.device", "torch.set_num_threads", "envs.make_vec_envs", "envs.make_vec_envs.reset", "range", "print", "range", "torch.randint", "envs.make_vec_envs.step"], "function", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.envs.__init__.make_vec_envs", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.objectgoal_env.ObjectGoal_Env.reset", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.objectgoal_env.ObjectGoal_Env.step"], ["", "def", "main", "(", ")", ":", "\n", "    ", "num_episodes", "=", "int", "(", "args", ".", "num_eval_episodes", ")", "\n", "args", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "args", ".", "cuda", "else", "\"cpu\"", ")", "\n", "\n", "torch", ".", "set_num_threads", "(", "1", ")", "\n", "envs", "=", "make_vec_envs", "(", "args", ")", "\n", "obs", ",", "infos", "=", "envs", ".", "reset", "(", ")", "\n", "\n", "for", "ep_num", "in", "range", "(", "num_episodes", ")", ":", "\n", "        ", "for", "step", "in", "range", "(", "args", ".", "max_episode_length", ")", ":", "\n", "            ", "action", "=", "torch", ".", "randint", "(", "0", ",", "3", ",", "(", "args", ".", "num_processes", ",", ")", ")", "\n", "obs", ",", "rew", ",", "done", ",", "infos", "=", "envs", ".", "step", "(", "action", ")", "\n", "\n", "if", "done", ":", "\n", "                ", "break", "\n", "\n", "", "", "", "print", "(", "\"Test successfully completed\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.None.model.Goal_Oriented_Semantic_Policy.__init__": [[13, 44], ["utils.model.NNBase.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "model.Goal_Oriented_Semantic_Policy.train", "int", "int", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "utils.model.Flatten"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_shape", ",", "recurrent", "=", "False", ",", "hidden_size", "=", "512", ",", "\n", "num_sem_categories", "=", "16", ")", ":", "\n", "        ", "super", "(", "Goal_Oriented_Semantic_Policy", ",", "self", ")", ".", "__init__", "(", "\n", "recurrent", ",", "hidden_size", ",", "hidden_size", ")", "\n", "\n", "out_size", "=", "int", "(", "input_shape", "[", "1", "]", "/", "16.", ")", "*", "int", "(", "input_shape", "[", "2", "]", "/", "16.", ")", "\n", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "num_sem_categories", "+", "8", ",", "32", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "32", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "Flatten", "(", ")", "\n", ")", "\n", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "out_size", "*", "32", "+", "8", "*", "2", ",", "hidden_size", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "256", ")", "\n", "self", ".", "critic_linear", "=", "nn", ".", "Linear", "(", "256", ",", "1", ")", "\n", "self", ".", "orientation_emb", "=", "nn", ".", "Embedding", "(", "72", ",", "8", ")", "\n", "self", ".", "goal_emb", "=", "nn", ".", "Embedding", "(", "num_sem_categories", ",", "8", ")", "\n", "self", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.None.model.Goal_Oriented_Semantic_Policy.forward": [[45, 59], ["model.Goal_Oriented_Semantic_Policy.main", "model.Goal_Oriented_Semantic_Policy.orientation_emb", "model.Goal_Oriented_Semantic_Policy.goal_emb", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ReLU", "torch.ReLU", "model.Goal_Oriented_Semantic_Policy.linear1", "model.Goal_Oriented_Semantic_Policy._forward_gru", "torch.ReLU", "torch.ReLU", "model.Goal_Oriented_Semantic_Policy.linear2", "model.Goal_Oriented_Semantic_Policy.critic_linear().squeeze", "model.Goal_Oriented_Semantic_Policy.critic_linear"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.None.test.main", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.model.NNBase._forward_gru"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "rnn_hxs", ",", "masks", ",", "extras", ")", ":", "\n", "        ", "x", "=", "self", ".", "main", "(", "inputs", ")", "\n", "orientation_emb", "=", "self", ".", "orientation_emb", "(", "extras", "[", ":", ",", "0", "]", ")", "\n", "goal_emb", "=", "self", ".", "goal_emb", "(", "extras", "[", ":", ",", "1", "]", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "orientation_emb", ",", "goal_emb", ")", ",", "1", ")", "\n", "\n", "x", "=", "nn", ".", "ReLU", "(", ")", "(", "self", ".", "linear1", "(", "x", ")", ")", "\n", "if", "self", ".", "is_recurrent", ":", "\n", "            ", "x", ",", "rnn_hxs", "=", "self", ".", "_forward_gru", "(", "x", ",", "rnn_hxs", ",", "masks", ")", "\n", "\n", "", "x", "=", "nn", ".", "ReLU", "(", ")", "(", "self", ".", "linear2", "(", "x", ")", ")", "\n", "\n", "return", "self", ".", "critic_linear", "(", "x", ")", ".", "squeeze", "(", "-", "1", ")", ",", "x", ",", "rnn_hxs", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.None.model.RL_Policy.__init__": [[64, 87], ["torch.Module.__init__", "model.Goal_Oriented_Semantic_Policy", "utils.distributions.Categorical", "utils.distributions.DiagGaussian"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "obs_shape", ",", "action_space", ",", "model_type", "=", "0", ",", "\n", "base_kwargs", "=", "None", ")", ":", "\n", "\n", "        ", "super", "(", "RL_Policy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "base_kwargs", "is", "None", ":", "\n", "            ", "base_kwargs", "=", "{", "}", "\n", "\n", "", "if", "model_type", "==", "1", ":", "\n", "            ", "self", ".", "network", "=", "Goal_Oriented_Semantic_Policy", "(", "\n", "obs_shape", ",", "**", "base_kwargs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "if", "action_space", ".", "__class__", ".", "__name__", "==", "\"Discrete\"", ":", "\n", "            ", "num_outputs", "=", "action_space", ".", "n", "\n", "self", ".", "dist", "=", "Categorical", "(", "self", ".", "network", ".", "output_size", ",", "num_outputs", ")", "\n", "", "elif", "action_space", ".", "__class__", ".", "__name__", "==", "\"Box\"", ":", "\n", "            ", "num_outputs", "=", "action_space", ".", "shape", "[", "0", "]", "\n", "self", ".", "dist", "=", "DiagGaussian", "(", "self", ".", "network", ".", "output_size", ",", "num_outputs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "model_type", "=", "model_type", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.None.model.RL_Policy.is_recurrent": [[88, 91], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_recurrent", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "network", ".", "is_recurrent", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.None.model.RL_Policy.rec_state_size": [[92, 96], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "rec_state_size", "(", "self", ")", ":", "\n", "        ", "\"\"\"Size of rnn_hx.\"\"\"", "\n", "return", "self", ".", "network", ".", "rec_state_size", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.None.model.RL_Policy.forward": [[97, 102], ["model.RL_Policy.network", "model.RL_Policy.network"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "rnn_hxs", ",", "masks", ",", "extras", ")", ":", "\n", "        ", "if", "extras", "is", "None", ":", "\n", "            ", "return", "self", ".", "network", "(", "inputs", ",", "rnn_hxs", ",", "masks", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "network", "(", "inputs", ",", "rnn_hxs", ",", "masks", ",", "extras", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.None.model.RL_Policy.act": [[103, 116], ["model.RL_Policy.", "model.RL_Policy.dist", "model.RL_Policy.log_probs", "model.RL_Policy.mode", "model.RL_Policy.sample"], "methods", ["None"], ["", "", "def", "act", "(", "self", ",", "inputs", ",", "rnn_hxs", ",", "masks", ",", "extras", "=", "None", ",", "deterministic", "=", "False", ")", ":", "\n", "\n", "        ", "value", ",", "actor_features", ",", "rnn_hxs", "=", "self", "(", "inputs", ",", "rnn_hxs", ",", "masks", ",", "extras", ")", "\n", "dist", "=", "self", ".", "dist", "(", "actor_features", ")", "\n", "\n", "if", "deterministic", ":", "\n", "            ", "action", "=", "dist", ".", "mode", "(", ")", "\n", "", "else", ":", "\n", "            ", "action", "=", "dist", ".", "sample", "(", ")", "\n", "\n", "", "action_log_probs", "=", "dist", ".", "log_probs", "(", "action", ")", "\n", "\n", "return", "value", ",", "action", ",", "action_log_probs", ",", "rnn_hxs", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.None.model.RL_Policy.get_value": [[117, 120], ["model.RL_Policy."], "methods", ["None"], ["", "def", "get_value", "(", "self", ",", "inputs", ",", "rnn_hxs", ",", "masks", ",", "extras", "=", "None", ")", ":", "\n", "        ", "value", ",", "_", ",", "_", "=", "self", "(", "inputs", ",", "rnn_hxs", ",", "masks", ",", "extras", ")", "\n", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.None.model.RL_Policy.evaluate_actions": [[121, 130], ["model.RL_Policy.", "model.RL_Policy.dist", "model.RL_Policy.log_probs", "model.RL_Policy.entropy().mean", "model.RL_Policy.entropy"], "methods", ["None"], ["", "def", "evaluate_actions", "(", "self", ",", "inputs", ",", "rnn_hxs", ",", "masks", ",", "action", ",", "extras", "=", "None", ")", ":", "\n", "\n", "        ", "value", ",", "actor_features", ",", "rnn_hxs", "=", "self", "(", "inputs", ",", "rnn_hxs", ",", "masks", ",", "extras", ")", "\n", "dist", "=", "self", ".", "dist", "(", "actor_features", ")", "\n", "\n", "action_log_probs", "=", "dist", ".", "log_probs", "(", "action", ")", "\n", "dist_entropy", "=", "dist", ".", "entropy", "(", ")", ".", "mean", "(", ")", "\n", "\n", "return", "value", ",", "action_log_probs", ",", "dist_entropy", ",", "rnn_hxs", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.None.model.Semantic_Mapping.__init__": [[138, 177], ["torch.Module.__init__", "int", "int", "envs.get_camera_matrix", "utils.model.ChannelPool", "torch.zeros().float().to", "torch.zeros().float().to", "torch.zeros().float().to", "torch.zeros().float().to", "torch.ones().float().to", "torch.ones().float().to", "torch.ones().float().to", "torch.ones().float().to", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.algo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.depth_utils.get_camera_matrix", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to"], ["def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "Semantic_Mapping", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "device", "=", "args", ".", "device", "\n", "self", ".", "screen_h", "=", "args", ".", "frame_height", "\n", "self", ".", "screen_w", "=", "args", ".", "frame_width", "\n", "self", ".", "resolution", "=", "args", ".", "map_resolution", "\n", "self", ".", "z_resolution", "=", "args", ".", "map_resolution", "\n", "self", ".", "map_size_cm", "=", "args", ".", "map_size_cm", "//", "args", ".", "global_downscaling", "\n", "self", ".", "n_channels", "=", "3", "\n", "self", ".", "vision_range", "=", "args", ".", "vision_range", "\n", "self", ".", "dropout", "=", "0.5", "\n", "self", ".", "fov", "=", "args", ".", "hfov", "\n", "self", ".", "du_scale", "=", "args", ".", "du_scale", "\n", "self", ".", "cat_pred_threshold", "=", "args", ".", "cat_pred_threshold", "\n", "self", ".", "exp_pred_threshold", "=", "args", ".", "exp_pred_threshold", "\n", "self", ".", "map_pred_threshold", "=", "args", ".", "map_pred_threshold", "\n", "self", ".", "num_sem_categories", "=", "args", ".", "num_sem_categories", "\n", "\n", "self", ".", "max_height", "=", "int", "(", "360", "/", "self", ".", "z_resolution", ")", "\n", "self", ".", "min_height", "=", "int", "(", "-", "40", "/", "self", ".", "z_resolution", ")", "\n", "self", ".", "agent_height", "=", "args", ".", "camera_height", "*", "100.", "\n", "self", ".", "shift_loc", "=", "[", "self", ".", "vision_range", "*", "\n", "self", ".", "resolution", "//", "2", ",", "0", ",", "np", ".", "pi", "/", "2.0", "]", "\n", "self", ".", "camera_matrix", "=", "du", ".", "get_camera_matrix", "(", "\n", "self", ".", "screen_w", ",", "self", ".", "screen_h", ",", "self", ".", "fov", ")", "\n", "\n", "self", ".", "pool", "=", "ChannelPool", "(", "1", ")", "\n", "\n", "vr", "=", "self", ".", "vision_range", "\n", "\n", "self", ".", "init_grid", "=", "torch", ".", "zeros", "(", "\n", "args", ".", "num_processes", ",", "1", "+", "self", ".", "num_sem_categories", ",", "vr", ",", "vr", ",", "\n", "self", ".", "max_height", "-", "self", ".", "min_height", "\n", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "feat", "=", "torch", ".", "ones", "(", "\n", "args", ".", "num_processes", ",", "1", "+", "self", ".", "num_sem_categories", ",", "\n", "self", ".", "screen_h", "//", "self", ".", "du_scale", "*", "self", ".", "screen_w", "//", "self", ".", "du_scale", "\n", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.None.model.Semantic_Mapping.forward": [[178, 284], ["obs.size", "envs.get_point_cloud_from_z_t", "envs.transform_camera_view_t", "envs.transform_pose_t", "envs.transform_pose_t.float", "XYZ_cm_std.view.view.permute", "XYZ_cm_std.view.view.view", "envs.splat_feat_nd().transpose", "int", "int", "voxels[].sum", "envs.splat_feat_nd().transpose.sum", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "model.Semantic_Mapping.forward.get_new_pose_batch"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.depth_utils.get_point_cloud_from_z_t", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.depth_utils.transform_camera_view_t", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.depth_utils.transform_pose_t", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to"], ["", "def", "forward", "(", "self", ",", "obs", ",", "pose_obs", ",", "maps_last", ",", "poses_last", ")", ":", "\n", "        ", "bs", ",", "c", ",", "h", ",", "w", "=", "obs", ".", "size", "(", ")", "\n", "depth", "=", "obs", "[", ":", ",", "3", ",", ":", ",", ":", "]", "\n", "\n", "point_cloud_t", "=", "du", ".", "get_point_cloud_from_z_t", "(", "\n", "depth", ",", "self", ".", "camera_matrix", ",", "self", ".", "device", ",", "scale", "=", "self", ".", "du_scale", ")", "\n", "\n", "agent_view_t", "=", "du", ".", "transform_camera_view_t", "(", "\n", "point_cloud_t", ",", "self", ".", "agent_height", ",", "0", ",", "self", ".", "device", ")", "\n", "\n", "agent_view_centered_t", "=", "du", ".", "transform_pose_t", "(", "\n", "agent_view_t", ",", "self", ".", "shift_loc", ",", "self", ".", "device", ")", "\n", "\n", "max_h", "=", "self", ".", "max_height", "\n", "min_h", "=", "self", ".", "min_height", "\n", "xy_resolution", "=", "self", ".", "resolution", "\n", "z_resolution", "=", "self", ".", "z_resolution", "\n", "vision_range", "=", "self", ".", "vision_range", "\n", "XYZ_cm_std", "=", "agent_view_centered_t", ".", "float", "(", ")", "\n", "XYZ_cm_std", "[", "...", ",", ":", "2", "]", "=", "(", "XYZ_cm_std", "[", "...", ",", ":", "2", "]", "/", "xy_resolution", ")", "\n", "XYZ_cm_std", "[", "...", ",", ":", "2", "]", "=", "(", "XYZ_cm_std", "[", "...", ",", ":", "2", "]", "-", "\n", "vision_range", "//", "2.", ")", "/", "vision_range", "*", "2.", "\n", "XYZ_cm_std", "[", "...", ",", "2", "]", "=", "XYZ_cm_std", "[", "...", ",", "2", "]", "/", "z_resolution", "\n", "XYZ_cm_std", "[", "...", ",", "2", "]", "=", "(", "XYZ_cm_std", "[", "...", ",", "2", "]", "-", "\n", "(", "max_h", "+", "min_h", ")", "//", "2.", ")", "/", "(", "max_h", "-", "min_h", ")", "*", "2.", "\n", "self", ".", "feat", "[", ":", ",", "1", ":", ",", ":", "]", "=", "nn", ".", "AvgPool2d", "(", "self", ".", "du_scale", ")", "(", "\n", "obs", "[", ":", ",", "4", ":", ",", ":", ",", ":", "]", "\n", ")", ".", "view", "(", "bs", ",", "c", "-", "4", ",", "h", "//", "self", ".", "du_scale", "*", "w", "//", "self", ".", "du_scale", ")", "\n", "\n", "XYZ_cm_std", "=", "XYZ_cm_std", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "XYZ_cm_std", "=", "XYZ_cm_std", ".", "view", "(", "XYZ_cm_std", ".", "shape", "[", "0", "]", ",", "\n", "XYZ_cm_std", ".", "shape", "[", "1", "]", ",", "\n", "XYZ_cm_std", ".", "shape", "[", "2", "]", "*", "XYZ_cm_std", ".", "shape", "[", "3", "]", ")", "\n", "\n", "voxels", "=", "du", ".", "splat_feat_nd", "(", "\n", "self", ".", "init_grid", "*", "0.", ",", "self", ".", "feat", ",", "XYZ_cm_std", ")", ".", "transpose", "(", "2", ",", "3", ")", "\n", "\n", "min_z", "=", "int", "(", "25", "/", "z_resolution", "-", "min_h", ")", "\n", "max_z", "=", "int", "(", "(", "self", ".", "agent_height", "+", "1", ")", "/", "z_resolution", "-", "min_h", ")", "\n", "\n", "agent_height_proj", "=", "voxels", "[", "...", ",", "min_z", ":", "max_z", "]", ".", "sum", "(", "4", ")", "\n", "all_height_proj", "=", "voxels", ".", "sum", "(", "4", ")", "\n", "\n", "fp_map_pred", "=", "agent_height_proj", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", "\n", "fp_exp_pred", "=", "all_height_proj", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", "\n", "fp_map_pred", "=", "fp_map_pred", "/", "self", ".", "map_pred_threshold", "\n", "fp_exp_pred", "=", "fp_exp_pred", "/", "self", ".", "exp_pred_threshold", "\n", "fp_map_pred", "=", "torch", ".", "clamp", "(", "fp_map_pred", ",", "min", "=", "0.0", ",", "max", "=", "1.0", ")", "\n", "fp_exp_pred", "=", "torch", ".", "clamp", "(", "fp_exp_pred", ",", "min", "=", "0.0", ",", "max", "=", "1.0", ")", "\n", "\n", "pose_pred", "=", "poses_last", "\n", "\n", "agent_view", "=", "torch", ".", "zeros", "(", "bs", ",", "c", ",", "\n", "self", ".", "map_size_cm", "//", "self", ".", "resolution", ",", "\n", "self", ".", "map_size_cm", "//", "self", ".", "resolution", "\n", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "x1", "=", "self", ".", "map_size_cm", "//", "(", "self", ".", "resolution", "*", "2", ")", "-", "self", ".", "vision_range", "//", "2", "\n", "x2", "=", "x1", "+", "self", ".", "vision_range", "\n", "y1", "=", "self", ".", "map_size_cm", "//", "(", "self", ".", "resolution", "*", "2", ")", "\n", "y2", "=", "y1", "+", "self", ".", "vision_range", "\n", "agent_view", "[", ":", ",", "0", ":", "1", ",", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "fp_map_pred", "\n", "agent_view", "[", ":", ",", "1", ":", "2", ",", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "fp_exp_pred", "\n", "agent_view", "[", ":", ",", "4", ":", ",", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "torch", ".", "clamp", "(", "\n", "agent_height_proj", "[", ":", ",", "1", ":", ",", ":", ",", ":", "]", "/", "self", ".", "cat_pred_threshold", ",", "\n", "min", "=", "0.0", ",", "max", "=", "1.0", ")", "\n", "\n", "corrected_pose", "=", "pose_obs", "\n", "\n", "def", "get_new_pose_batch", "(", "pose", ",", "rel_pose_change", ")", ":", "\n", "\n", "            ", "pose", "[", ":", ",", "1", "]", "+=", "rel_pose_change", "[", ":", ",", "0", "]", "*", "torch", ".", "sin", "(", "pose", "[", ":", ",", "2", "]", "/", "57.29577951308232", ")", "+", "rel_pose_change", "[", ":", ",", "1", "]", "*", "torch", ".", "cos", "(", "pose", "[", ":", ",", "2", "]", "/", "57.29577951308232", ")", "\n", "pose", "[", ":", ",", "0", "]", "+=", "rel_pose_change", "[", ":", ",", "0", "]", "*", "torch", ".", "cos", "(", "pose", "[", ":", ",", "2", "]", "/", "57.29577951308232", ")", "-", "rel_pose_change", "[", ":", ",", "1", "]", "*", "torch", ".", "sin", "(", "pose", "[", ":", ",", "2", "]", "/", "57.29577951308232", ")", "\n", "pose", "[", ":", ",", "2", "]", "+=", "rel_pose_change", "[", ":", ",", "2", "]", "*", "57.29577951308232", "\n", "\n", "pose", "[", ":", ",", "2", "]", "=", "torch", ".", "fmod", "(", "pose", "[", ":", ",", "2", "]", "-", "180.0", ",", "360.0", ")", "+", "180.0", "\n", "pose", "[", ":", ",", "2", "]", "=", "torch", ".", "fmod", "(", "pose", "[", ":", ",", "2", "]", "+", "180.0", ",", "360.0", ")", "-", "180.0", "\n", "\n", "return", "pose", "\n", "\n", "", "current_poses", "=", "get_new_pose_batch", "(", "poses_last", ",", "corrected_pose", ")", "\n", "st_pose", "=", "current_poses", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "st_pose", "[", ":", ",", ":", "2", "]", "=", "-", "(", "st_pose", "[", ":", ",", ":", "2", "]", "\n", "*", "100.0", "/", "self", ".", "resolution", "\n", "-", "self", ".", "map_size_cm", "//", "(", "self", ".", "resolution", "*", "2", ")", ")", "/", "(", "self", ".", "map_size_cm", "//", "(", "self", ".", "resolution", "*", "2", ")", ")", "\n", "st_pose", "[", ":", ",", "2", "]", "=", "90.", "-", "(", "st_pose", "[", ":", ",", "2", "]", ")", "\n", "\n", "rot_mat", ",", "trans_mat", "=", "get_grid", "(", "st_pose", ",", "agent_view", ".", "size", "(", ")", ",", "\n", "self", ".", "device", ")", "\n", "\n", "rotated", "=", "F", ".", "grid_sample", "(", "agent_view", ",", "rot_mat", ",", "align_corners", "=", "True", ")", "\n", "translated", "=", "F", ".", "grid_sample", "(", "rotated", ",", "trans_mat", ",", "align_corners", "=", "True", ")", "\n", "\n", "maps2", "=", "torch", ".", "cat", "(", "(", "maps_last", ".", "unsqueeze", "(", "1", ")", ",", "translated", ".", "unsqueeze", "(", "1", ")", ")", ",", "1", ")", "\n", "\n", "map_pred", ",", "_", "=", "torch", ".", "max", "(", "maps2", ",", "1", ")", "\n", "\n", "return", "fp_map_pred", ",", "map_pred", ",", "pose_pred", ",", "current_poses", "\n", "", "", ""]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.optimization.get_optimizer": [[7, 60], ["optim_fn", "s[].split", "inspect.getargspec", "all", "Exception", "x.split", "float", "s.find", "len", "re.match", "optim_params.pop", "optim_params.pop", "optim_params.get", "optim_params.get", "optim_params.keys", "str", "str", "optim_params.keys", "s.find", "Exception"], "function", ["None"], ["def", "get_optimizer", "(", "parameters", ",", "s", ")", ":", "\n", "    ", "\"\"\"\n    Parse optimizer parameters.\n    Input should be of the form:\n        - \"sgd,lr=0.01\"\n        - \"adagrad,lr=0.1,lr_decay=0.05\"\n    \"\"\"", "\n", "if", "\",\"", "in", "s", ":", "\n", "        ", "method", "=", "s", "[", ":", "s", ".", "find", "(", "','", ")", "]", "\n", "optim_params", "=", "{", "}", "\n", "for", "x", "in", "s", "[", "s", ".", "find", "(", "','", ")", "+", "1", ":", "]", ".", "split", "(", "','", ")", ":", "\n", "            ", "split", "=", "x", ".", "split", "(", "'='", ")", "\n", "assert", "len", "(", "split", ")", "==", "2", "\n", "assert", "re", ".", "match", "(", "\n", "r\"^[+-]?(\\d+(\\.\\d*)?|\\.\\d+)$\"", ",", "\n", "split", "[", "1", "]", ")", "is", "not", "None", "\n", "optim_params", "[", "split", "[", "0", "]", "]", "=", "float", "(", "split", "[", "1", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "method", "=", "s", "\n", "optim_params", "=", "{", "}", "\n", "\n", "", "if", "method", "==", "'adadelta'", ":", "\n", "        ", "optim_fn", "=", "optim", ".", "Adadelta", "\n", "", "elif", "method", "==", "'adagrad'", ":", "\n", "        ", "optim_fn", "=", "optim", ".", "Adagrad", "\n", "", "elif", "method", "==", "'adam'", ":", "\n", "        ", "optim_fn", "=", "optim", ".", "Adam", "\n", "optim_params", "[", "'betas'", "]", "=", "(", "optim_params", ".", "get", "(", "'beta1'", ",", "0.5", ")", ",", "\n", "optim_params", ".", "get", "(", "'beta2'", ",", "0.999", ")", ")", "\n", "optim_params", ".", "pop", "(", "'beta1'", ",", "None", ")", "\n", "optim_params", ".", "pop", "(", "'beta2'", ",", "None", ")", "\n", "", "elif", "method", "==", "'adamax'", ":", "\n", "        ", "optim_fn", "=", "optim", ".", "Adamax", "\n", "", "elif", "method", "==", "'asgd'", ":", "\n", "        ", "optim_fn", "=", "optim", ".", "ASGD", "\n", "", "elif", "method", "==", "'rmsprop'", ":", "\n", "        ", "optim_fn", "=", "optim", ".", "RMSprop", "\n", "", "elif", "method", "==", "'rprop'", ":", "\n", "        ", "optim_fn", "=", "optim", ".", "Rprop", "\n", "", "elif", "method", "==", "'sgd'", ":", "\n", "        ", "optim_fn", "=", "optim", ".", "SGD", "\n", "assert", "'lr'", "in", "optim_params", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Unknown optimization method: \"%s\"'", "%", "method", ")", "\n", "\n", "# check that we give good parameters to the optimizer", "\n", "", "expected_args", "=", "inspect", ".", "getargspec", "(", "optim_fn", ".", "__init__", ")", "[", "0", "]", "\n", "assert", "expected_args", "[", ":", "2", "]", "==", "[", "'self'", ",", "'params'", "]", "\n", "if", "not", "all", "(", "k", "in", "expected_args", "[", "2", ":", "]", "for", "k", "in", "optim_params", ".", "keys", "(", ")", ")", ":", "\n", "        ", "raise", "Exception", "(", "'Unexpected parameters: expected \"%s\", got \"%s\"'", "%", "(", "\n", "str", "(", "expected_args", "[", "2", ":", "]", ")", ",", "str", "(", "optim_params", ".", "keys", "(", ")", ")", ")", ")", "\n", "\n", "", "return", "optim_fn", "(", "parameters", ",", "**", "optim_params", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.model.ChannelPool.forward": [[47, 55], ["x.contiguous.contiguous.size", "x.contiguous.contiguous.view().permute", "x.contiguous.contiguous.contiguous", "torch.nn.functional.max_pool1d", "pooled.permute.permute.size", "pooled.permute.permute.permute", "pooled.permute.permute.view", "x.contiguous.contiguous.view"], "methods", ["None"], ["orientation_emb", "=", "self", ".", "orientation_emb", "(", "extras", "[", ":", ",", "0", "]", ")", "\n", "goal_emb", "=", "self", ".", "goal_emb", "(", "extras", "[", ":", ",", "1", "]", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "orientation_emb", ",", "goal_emb", ")", ",", "1", ")", "\n", "\n", "x", "=", "nn", ".", "ReLU", "(", ")", "(", "self", ".", "linear1", "(", "x", ")", ")", "\n", "if", "self", ".", "is_recurrent", ":", "\n", "            ", "x", ",", "rnn_hxs", "=", "self", ".", "_forward_gru", "(", "x", ",", "rnn_hxs", ",", "masks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.model.AddBias.__init__": [[59, 62], ["torch.nn.Module.__init__", "torch.nn.Parameter", "bias.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.algo.ppo.PPO.__init__"], ["\n", "\n", "# https://github.com/ikostrikov/pytorch-a2c-ppo-acktr-gail/blob/master/a2c_ppo_acktr/model.py#L15", "\n", "", "", "class", "RL_Policy", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.model.AddBias.forward": [[63, 70], ["x.dim", "model.AddBias._bias.t().view", "model.AddBias._bias.t().view", "model.AddBias._bias.t", "model.AddBias._bias.t"], "methods", ["None"], ["\n", "    ", "def", "__init__", "(", "self", ",", "obs_shape", ",", "action_space", ",", "model_type", "=", "0", ",", "\n", "base_kwargs", "=", "None", ")", ":", "\n", "\n", "        ", "super", "(", "RL_Policy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "base_kwargs", "is", "None", ":", "\n", "            ", "base_kwargs", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.model.Flatten.forward": [[74, 76], ["x.view", "x.size"], "methods", ["None"], ["", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.model.NNBase.__init__": [[81, 93], ["torch.nn.Module.__init__", "torch.nn.GRUCell", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "model.NNBase.gru.bias_ih.data.fill_", "model.NNBase.gru.bias_hh.data.fill_"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.algo.ppo.PPO.__init__"], ["            ", "num_outputs", "=", "action_space", ".", "shape", "[", "0", "]", "\n", "self", ".", "dist", "=", "DiagGaussian", "(", "self", ".", "network", ".", "output_size", ",", "num_outputs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "model_type", "=", "model_type", "\n", "\n", "", "@", "property", "\n", "def", "is_recurrent", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "network", ".", "is_recurrent", "\n", "\n", "", "@", "property", "\n", "def", "rec_state_size", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.model.NNBase.is_recurrent": [[94, 97], ["None"], "methods", ["None"], ["        ", "\"\"\"Size of rnn_hx.\"\"\"", "\n", "return", "self", ".", "network", ".", "rec_state_size", "\n", "\n", "", "def", "forward", "(", "self", ",", "inputs", ",", "rnn_hxs", ",", "masks", ",", "extras", ")", ":", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.model.NNBase.rec_state_size": [[98, 103], ["None"], "methods", ["None"], ["        ", "if", "extras", "is", "None", ":", "\n", "            ", "return", "self", ".", "network", "(", "inputs", ",", "rnn_hxs", ",", "masks", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "network", "(", "inputs", ",", "rnn_hxs", ",", "masks", ",", "extras", ")", "\n", "\n", "", "", "def", "act", "(", "self", ",", "inputs", ",", "rnn_hxs", ",", "masks", ",", "extras", "=", "None", ",", "deterministic", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.model.NNBase.output_size": [[104, 107], ["None"], "methods", ["None"], ["\n", "        ", "value", ",", "actor_features", ",", "rnn_hxs", "=", "self", "(", "inputs", ",", "rnn_hxs", ",", "masks", ",", "extras", ")", "\n", "dist", "=", "self", ".", "dist", "(", "actor_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.model.NNBase._forward_gru": [[108, 133], ["x.view.view.size", "model.NNBase.size", "model.NNBase.gru", "model.NNBase.size", "int", "x.view.view.view", "masks.view.view.view", "range", "torch.stack", "x.view.view.view", "x.view.view.size", "model.NNBase.gru", "outputs.append", "x.view.view.size"], "methods", ["None"], ["if", "deterministic", ":", "\n", "            ", "action", "=", "dist", ".", "mode", "(", ")", "\n", "", "else", ":", "\n", "            ", "action", "=", "dist", ".", "sample", "(", ")", "\n", "\n", "", "action_log_probs", "=", "dist", ".", "log_probs", "(", "action", ")", "\n", "\n", "return", "value", ",", "action", ",", "action_log_probs", ",", "rnn_hxs", "\n", "\n", "", "def", "get_value", "(", "self", ",", "inputs", ",", "rnn_hxs", ",", "masks", ",", "extras", "=", "None", ")", ":", "\n", "        ", "value", ",", "_", ",", "_", "=", "self", "(", "inputs", ",", "rnn_hxs", ",", "masks", ",", "extras", ")", "\n", "return", "value", "\n", "\n", "", "def", "evaluate_actions", "(", "self", ",", "inputs", ",", "rnn_hxs", ",", "masks", ",", "action", ",", "extras", "=", "None", ")", ":", "\n", "\n", "        ", "value", ",", "actor_features", ",", "rnn_hxs", "=", "self", "(", "inputs", ",", "rnn_hxs", ",", "masks", ",", "extras", ")", "\n", "dist", "=", "self", ".", "dist", "(", "actor_features", ")", "\n", "\n", "action_log_probs", "=", "dist", ".", "log_probs", "(", "action", ")", "\n", "dist_entropy", "=", "dist", ".", "entropy", "(", ")", ".", "mean", "(", ")", "\n", "\n", "return", "value", ",", "action_log_probs", ",", "dist_entropy", ",", "rnn_hxs", "\n", "\n", "\n", "", "", "class", "Semantic_Mapping", "(", "nn", ".", "Module", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.model.get_grid": [[7, 44], ["pose.float.float", "x.size", "t.cos", "t.sin", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.nn.functional.affine_grid", "torch.nn.functional.affine_grid", "torch.Size", "torch.Size", "torch.zeros().float().to", "torch.zeros().float().to", "torch.ones().to", "torch.zeros().to", "torch.ones().to", "torch.zeros().to", "torch.zeros().float", "torch.zeros().float", "torch.ones", "torch.zeros", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to"], ["from", "utils", ".", "model", "import", "get_grid", ",", "ChannelPool", ",", "Flatten", ",", "NNBase", "\n", "import", "envs", ".", "utils", ".", "depth_utils", "as", "du", "\n", "\n", "\n", "class", "Goal_Oriented_Semantic_Policy", "(", "NNBase", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "input_shape", ",", "recurrent", "=", "False", ",", "hidden_size", "=", "512", ",", "\n", "num_sem_categories", "=", "16", ")", ":", "\n", "        ", "super", "(", "Goal_Oriented_Semantic_Policy", ",", "self", ")", ".", "__init__", "(", "\n", "recurrent", ",", "hidden_size", ",", "hidden_size", ")", "\n", "\n", "out_size", "=", "int", "(", "input_shape", "[", "1", "]", "/", "16.", ")", "*", "int", "(", "input_shape", "[", "2", "]", "/", "16.", ")", "\n", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "num_sem_categories", "+", "8", ",", "32", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "32", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "Flatten", "(", ")", "\n", ")", "\n", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "out_size", "*", "32", "+", "8", "*", "2", ",", "hidden_size", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "256", ")", "\n", "self", ".", "critic_linear", "=", "nn", ".", "Linear", "(", "256", ",", "1", ")", "\n", "self", ".", "orientation_emb", "=", "nn", ".", "Embedding", "(", "72", ",", "8", ")", "\n", "self", ".", "goal_emb", "=", "nn", ".", "Embedding", "(", "num_sem_categories", ",", "8", ")", "\n", "self", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.distributions.Categorical.__init__": [[36, 39], ["torch.Module.__init__", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_inputs", ",", "num_outputs", ")", ":", "\n", "        ", "super", "(", "Categorical", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "num_inputs", ",", "num_outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.distributions.Categorical.forward": [[40, 43], ["distributions.Categorical.linear", "FixedCategorical"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "return", "FixedCategorical", "(", "logits", "=", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.distributions.DiagGaussian.__init__": [[47, 52], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "utils.model.AddBias", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_inputs", ",", "num_outputs", ")", ":", "\n", "        ", "super", "(", "DiagGaussian", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "fc_mean", "=", "nn", ".", "Linear", "(", "num_inputs", ",", "num_outputs", ")", "\n", "self", ".", "logstd", "=", "AddBias", "(", "torch", ".", "zeros", "(", "num_outputs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.distributions.DiagGaussian.forward": [[53, 62], ["distributions.DiagGaussian.fc_mean", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "distributions.DiagGaussian.logstd", "FixedNormal", "distributions.DiagGaussian.size", "zeros.cuda.cuda.cuda", "distributions.DiagGaussian.exp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "action_mean", "=", "self", ".", "fc_mean", "(", "x", ")", "\n", "\n", "zeros", "=", "torch", ".", "zeros", "(", "action_mean", ".", "size", "(", ")", ")", "\n", "if", "x", ".", "is_cuda", ":", "\n", "            ", "zeros", "=", "zeros", ".", "cuda", "(", ")", "\n", "\n", "", "action_logstd", "=", "self", ".", "logstd", "(", "zeros", ")", "\n", "return", "FixedNormal", "(", "action_mean", ",", "action_logstd", ".", "exp", "(", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.__init__": [[17, 42], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_steps", ",", "num_processes", ",", "obs_shape", ",", "action_space", ",", "\n", "rec_state_size", ")", ":", "\n", "\n", "        ", "if", "action_space", ".", "__class__", ".", "__name__", "==", "'Discrete'", ":", "\n", "            ", "self", ".", "n_actions", "=", "1", "\n", "action_type", "=", "torch", ".", "long", "\n", "", "else", ":", "\n", "            ", "self", ".", "n_actions", "=", "action_space", ".", "shape", "[", "0", "]", "\n", "action_type", "=", "torch", ".", "float32", "\n", "\n", "", "self", ".", "obs", "=", "torch", ".", "zeros", "(", "num_steps", "+", "1", ",", "num_processes", ",", "*", "obs_shape", ")", "\n", "self", ".", "rec_states", "=", "torch", ".", "zeros", "(", "num_steps", "+", "1", ",", "num_processes", ",", "\n", "rec_state_size", ")", "\n", "self", ".", "rewards", "=", "torch", ".", "zeros", "(", "num_steps", ",", "num_processes", ")", "\n", "self", ".", "value_preds", "=", "torch", ".", "zeros", "(", "num_steps", "+", "1", ",", "num_processes", ")", "\n", "self", ".", "returns", "=", "torch", ".", "zeros", "(", "num_steps", "+", "1", ",", "num_processes", ")", "\n", "self", ".", "action_log_probs", "=", "torch", ".", "zeros", "(", "num_steps", ",", "num_processes", ")", "\n", "self", ".", "actions", "=", "torch", ".", "zeros", "(", "(", "num_steps", ",", "num_processes", ",", "self", ".", "n_actions", ")", ",", "\n", "dtype", "=", "action_type", ")", "\n", "self", ".", "masks", "=", "torch", ".", "ones", "(", "num_steps", "+", "1", ",", "num_processes", ")", "\n", "\n", "self", ".", "num_steps", "=", "num_steps", "\n", "self", ".", "step", "=", "0", "\n", "self", ".", "has_extras", "=", "False", "\n", "self", ".", "extras_size", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to": [[43, 55], ["storage.RolloutStorage.obs.to", "storage.RolloutStorage.rec_states.to", "storage.RolloutStorage.rewards.to", "storage.RolloutStorage.value_preds.to", "storage.RolloutStorage.returns.to", "storage.RolloutStorage.action_log_probs.to", "storage.RolloutStorage.actions.to", "storage.RolloutStorage.masks.to", "storage.RolloutStorage.extras.to"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "self", ".", "obs", "=", "self", ".", "obs", ".", "to", "(", "device", ")", "\n", "self", ".", "rec_states", "=", "self", ".", "rec_states", ".", "to", "(", "device", ")", "\n", "self", ".", "rewards", "=", "self", ".", "rewards", ".", "to", "(", "device", ")", "\n", "self", ".", "value_preds", "=", "self", ".", "value_preds", ".", "to", "(", "device", ")", "\n", "self", ".", "returns", "=", "self", ".", "returns", ".", "to", "(", "device", ")", "\n", "self", ".", "action_log_probs", "=", "self", ".", "action_log_probs", ".", "to", "(", "device", ")", "\n", "self", ".", "actions", "=", "self", ".", "actions", ".", "to", "(", "device", ")", "\n", "self", ".", "masks", "=", "self", ".", "masks", ".", "to", "(", "device", ")", "\n", "if", "self", ".", "has_extras", ":", "\n", "            ", "self", ".", "extras", "=", "self", ".", "extras", ".", "to", "(", "device", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.insert": [[56, 67], ["storage.RolloutStorage.obs[].copy_", "storage.RolloutStorage.rec_states[].copy_", "storage.RolloutStorage.actions[].copy_", "storage.RolloutStorage.action_log_probs[].copy_", "storage.RolloutStorage.value_preds[].copy_", "storage.RolloutStorage.rewards[].copy_", "storage.RolloutStorage.masks[].copy_", "actions.view"], "methods", ["None"], ["", "def", "insert", "(", "self", ",", "obs", ",", "rec_states", ",", "actions", ",", "action_log_probs", ",", "value_preds", ",", "\n", "rewards", ",", "masks", ")", ":", "\n", "        ", "self", ".", "obs", "[", "self", ".", "step", "+", "1", "]", ".", "copy_", "(", "obs", ")", "\n", "self", ".", "rec_states", "[", "self", ".", "step", "+", "1", "]", ".", "copy_", "(", "rec_states", ")", "\n", "self", ".", "actions", "[", "self", ".", "step", "]", ".", "copy_", "(", "actions", ".", "view", "(", "-", "1", ",", "self", ".", "n_actions", ")", ")", "\n", "self", ".", "action_log_probs", "[", "self", ".", "step", "]", ".", "copy_", "(", "action_log_probs", ")", "\n", "self", ".", "value_preds", "[", "self", ".", "step", "]", ".", "copy_", "(", "value_preds", ")", "\n", "self", ".", "rewards", "[", "self", ".", "step", "]", ".", "copy_", "(", "rewards", ")", "\n", "self", ".", "masks", "[", "self", ".", "step", "+", "1", "]", ".", "copy_", "(", "masks", ")", "\n", "\n", "self", ".", "step", "=", "(", "self", ".", "step", "+", "1", ")", "%", "self", ".", "num_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.after_update": [[68, 74], ["storage.RolloutStorage.obs[].copy_", "storage.RolloutStorage.rec_states[].copy_", "storage.RolloutStorage.masks[].copy_", "storage.RolloutStorage.extras[].copy_"], "methods", ["None"], ["", "def", "after_update", "(", "self", ")", ":", "\n", "        ", "self", ".", "obs", "[", "0", "]", ".", "copy_", "(", "self", ".", "obs", "[", "-", "1", "]", ")", "\n", "self", ".", "rec_states", "[", "0", "]", ".", "copy_", "(", "self", ".", "rec_states", "[", "-", "1", "]", ")", "\n", "self", ".", "masks", "[", "0", "]", ".", "copy_", "(", "self", ".", "masks", "[", "-", "1", "]", ")", "\n", "if", "self", ".", "has_extras", ":", "\n", "            ", "self", ".", "extras", "[", "0", "]", ".", "copy_", "(", "self", ".", "extras", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.compute_returns": [[75, 90], ["reversed", "reversed", "range", "range", "storage.RolloutStorage.rewards.size", "storage.RolloutStorage.rewards.size"], "methods", ["None"], ["", "", "def", "compute_returns", "(", "self", ",", "next_value", ",", "use_gae", ",", "gamma", ",", "tau", ")", ":", "\n", "        ", "if", "use_gae", ":", "\n", "            ", "self", ".", "value_preds", "[", "-", "1", "]", "=", "next_value", "\n", "gae", "=", "0", "\n", "for", "step", "in", "reversed", "(", "range", "(", "self", ".", "rewards", ".", "size", "(", "0", ")", ")", ")", ":", "\n", "                ", "delta", "=", "self", ".", "rewards", "[", "step", "]", "+", "gamma", "*", "self", ".", "value_preds", "[", "step", "+", "1", "]", "*", "self", ".", "masks", "[", "step", "+", "1", "]", "-", "self", ".", "value_preds", "[", "step", "]", "\n", "gae", "=", "delta", "+", "gamma", "*", "tau", "*", "self", ".", "masks", "[", "step", "+", "1", "]", "*", "gae", "\n", "self", ".", "returns", "[", "step", "]", "=", "gae", "+", "self", ".", "value_preds", "[", "step", "]", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "returns", "[", "-", "1", "]", "=", "next_value", "\n", "for", "step", "in", "reversed", "(", "range", "(", "self", ".", "rewards", ".", "size", "(", "0", ")", ")", ")", ":", "\n", "                ", "self", ".", "returns", "[", "step", "]", "=", "self", ".", "returns", "[", "step", "+", "1", "]", "*", "gamma", "*", "self", ".", "masks", "[", "step", "+", "1", "]", "+", "self", ".", "rewards", "[", "step", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.feed_forward_generator": [[91, 121], ["torch.utils.data.sampler.BatchSampler", "storage.RolloutStorage.rewards.size", "torch.utils.data.sampler.SubsetRandomSampler", "range", "storage.RolloutStorage.obs[].view", "storage.RolloutStorage.rec_states[].view", "storage.RolloutStorage.actions.view", "storage.RolloutStorage.value_preds[].view", "storage.RolloutStorage.returns[].view", "storage.RolloutStorage.masks[].view", "storage.RolloutStorage.action_log_probs.view", "advantages.view", "storage.RolloutStorage.rec_states.size", "storage.RolloutStorage.extras[].view", "storage.RolloutStorage.obs.size"], "methods", ["None"], ["", "", "", "def", "feed_forward_generator", "(", "self", ",", "advantages", ",", "num_mini_batch", ")", ":", "\n", "\n", "        ", "num_steps", ",", "num_processes", "=", "self", ".", "rewards", ".", "size", "(", ")", "[", "0", ":", "2", "]", "\n", "batch_size", "=", "num_processes", "*", "num_steps", "\n", "mini_batch_size", "=", "batch_size", "//", "num_mini_batch", "\n", "assert", "batch_size", ">=", "num_mini_batch", ",", "(", "\n", "\"PPO requires the number of processes ({}) \"", "\n", "\"* number of steps ({}) = {} \"", "\n", "\"to be greater than or equal to \"", "\n", "\"the number of PPO mini batches ({}).\"", "\n", "\"\"", ".", "format", "(", "num_processes", ",", "num_steps", ",", "num_processes", "*", "num_steps", ",", "\n", "num_mini_batch", ")", ")", "\n", "\n", "sampler", "=", "BatchSampler", "(", "SubsetRandomSampler", "(", "range", "(", "batch_size", ")", ")", ",", "\n", "mini_batch_size", ",", "drop_last", "=", "False", ")", "\n", "\n", "for", "indices", "in", "sampler", ":", "\n", "            ", "yield", "{", "\n", "'obs'", ":", "self", ".", "obs", "[", ":", "-", "1", "]", ".", "view", "(", "-", "1", ",", "*", "self", ".", "obs", ".", "size", "(", ")", "[", "2", ":", "]", ")", "[", "indices", "]", ",", "\n", "'rec_states'", ":", "self", ".", "rec_states", "[", ":", "-", "1", "]", ".", "view", "(", "\n", "-", "1", ",", "self", ".", "rec_states", ".", "size", "(", "-", "1", ")", ")", "[", "indices", "]", ",", "\n", "'actions'", ":", "self", ".", "actions", ".", "view", "(", "-", "1", ",", "self", ".", "n_actions", ")", "[", "indices", "]", ",", "\n", "'value_preds'", ":", "self", ".", "value_preds", "[", ":", "-", "1", "]", ".", "view", "(", "-", "1", ")", "[", "indices", "]", ",", "\n", "'returns'", ":", "self", ".", "returns", "[", ":", "-", "1", "]", ".", "view", "(", "-", "1", ")", "[", "indices", "]", ",", "\n", "'masks'", ":", "self", ".", "masks", "[", ":", "-", "1", "]", ".", "view", "(", "-", "1", ")", "[", "indices", "]", ",", "\n", "'old_action_log_probs'", ":", "self", ".", "action_log_probs", ".", "view", "(", "-", "1", ")", "[", "indices", "]", ",", "\n", "'adv_targ'", ":", "advantages", ".", "view", "(", "-", "1", ")", "[", "indices", "]", ",", "\n", "'extras'", ":", "self", ".", "extras", "[", ":", "-", "1", "]", ".", "view", "(", "\n", "-", "1", ",", "self", ".", "extras_size", ")", "[", "indices", "]", "\n", "if", "self", ".", "has_extras", "else", "None", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.recurrent_generator": [[123, 184], ["storage.RolloutStorage.rewards.size", "torch.randperm", "range", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack.append", "rec_states.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack", "torch.stack.append", "storage._flatten_helper", "storage._flatten_helper", "storage._flatten_helper", "storage._flatten_helper", "storage._flatten_helper", "storage._flatten_helper", "storage._flatten_helper", "torch.stack().view", "storage._flatten_helper", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage._flatten_helper", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage._flatten_helper", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage._flatten_helper", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage._flatten_helper", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage._flatten_helper", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage._flatten_helper", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage._flatten_helper", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage._flatten_helper"], ["", "", "def", "recurrent_generator", "(", "self", ",", "advantages", ",", "num_mini_batch", ")", ":", "\n", "\n", "        ", "num_processes", "=", "self", ".", "rewards", ".", "size", "(", "1", ")", "\n", "assert", "num_processes", ">=", "num_mini_batch", ",", "(", "\n", "\"PPO requires the number of processes ({}) \"", "\n", "\"to be greater than or equal to the number of \"", "\n", "\"PPO mini batches ({}).\"", ".", "format", "(", "num_processes", ",", "num_mini_batch", ")", ")", "\n", "num_envs_per_batch", "=", "num_processes", "//", "num_mini_batch", "\n", "perm", "=", "torch", ".", "randperm", "(", "num_processes", ")", "\n", "T", ",", "N", "=", "self", ".", "num_steps", ",", "num_envs_per_batch", "\n", "\n", "for", "start_ind", "in", "range", "(", "0", ",", "num_processes", ",", "num_envs_per_batch", ")", ":", "\n", "\n", "            ", "obs", "=", "[", "]", "\n", "rec_states", "=", "[", "]", "\n", "actions", "=", "[", "]", "\n", "value_preds", "=", "[", "]", "\n", "returns", "=", "[", "]", "\n", "masks", "=", "[", "]", "\n", "old_action_log_probs", "=", "[", "]", "\n", "adv_targ", "=", "[", "]", "\n", "if", "self", ".", "has_extras", ":", "\n", "                ", "extras", "=", "[", "]", "\n", "\n", "", "for", "offset", "in", "range", "(", "num_envs_per_batch", ")", ":", "\n", "\n", "                ", "ind", "=", "perm", "[", "start_ind", "+", "offset", "]", "\n", "obs", ".", "append", "(", "self", ".", "obs", "[", ":", "-", "1", ",", "ind", "]", ")", "\n", "rec_states", ".", "append", "(", "self", ".", "rec_states", "[", "0", ":", "1", ",", "ind", "]", ")", "\n", "actions", ".", "append", "(", "self", ".", "actions", "[", ":", ",", "ind", "]", ")", "\n", "value_preds", ".", "append", "(", "self", ".", "value_preds", "[", ":", "-", "1", ",", "ind", "]", ")", "\n", "returns", ".", "append", "(", "self", ".", "returns", "[", ":", "-", "1", ",", "ind", "]", ")", "\n", "masks", ".", "append", "(", "self", ".", "masks", "[", ":", "-", "1", ",", "ind", "]", ")", "\n", "old_action_log_probs", ".", "append", "(", "self", ".", "action_log_probs", "[", ":", ",", "ind", "]", ")", "\n", "adv_targ", ".", "append", "(", "advantages", "[", ":", ",", "ind", "]", ")", "\n", "if", "self", ".", "has_extras", ":", "\n", "                    ", "extras", ".", "append", "(", "self", ".", "extras", "[", ":", "-", "1", ",", "ind", "]", ")", "\n", "\n", "# These are all tensors of size (T, N, ...)", "\n", "", "", "obs", "=", "torch", ".", "stack", "(", "obs", ",", "1", ")", "\n", "actions", "=", "torch", ".", "stack", "(", "actions", ",", "1", ")", "\n", "value_preds", "=", "torch", ".", "stack", "(", "value_preds", ",", "1", ")", "\n", "returns", "=", "torch", ".", "stack", "(", "returns", ",", "1", ")", "\n", "masks", "=", "torch", ".", "stack", "(", "masks", ",", "1", ")", "\n", "old_action_log_probs", "=", "torch", ".", "stack", "(", "old_action_log_probs", ",", "1", ")", "\n", "adv_targ", "=", "torch", ".", "stack", "(", "adv_targ", ",", "1", ")", "\n", "if", "self", ".", "has_extras", ":", "\n", "                ", "extras", "=", "torch", ".", "stack", "(", "extras", ",", "1", ")", "\n", "\n", "", "yield", "{", "\n", "'obs'", ":", "_flatten_helper", "(", "T", ",", "N", ",", "obs", ")", ",", "\n", "'actions'", ":", "_flatten_helper", "(", "T", ",", "N", ",", "actions", ")", ",", "\n", "'value_preds'", ":", "_flatten_helper", "(", "T", ",", "N", ",", "value_preds", ")", ",", "\n", "'returns'", ":", "_flatten_helper", "(", "T", ",", "N", ",", "returns", ")", ",", "\n", "'masks'", ":", "_flatten_helper", "(", "T", ",", "N", ",", "masks", ")", ",", "\n", "'old_action_log_probs'", ":", "_flatten_helper", "(", "\n", "T", ",", "N", ",", "old_action_log_probs", ")", ",", "\n", "'adv_targ'", ":", "_flatten_helper", "(", "T", ",", "N", ",", "adv_targ", ")", ",", "\n", "'extras'", ":", "_flatten_helper", "(", "\n", "T", ",", "N", ",", "extras", ")", "if", "self", ".", "has_extras", "else", "None", ",", "\n", "'rec_states'", ":", "torch", ".", "stack", "(", "rec_states", ",", "1", ")", ".", "view", "(", "N", ",", "-", "1", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.GlobalRolloutStorage.__init__": [[189, 197], ["storage.RolloutStorage.__init__", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.algo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_steps", ",", "num_processes", ",", "obs_shape", ",", "action_space", ",", "\n", "rec_state_size", ",", "extras_size", ")", ":", "\n", "        ", "super", "(", "GlobalRolloutStorage", ",", "self", ")", ".", "__init__", "(", "\n", "num_steps", ",", "num_processes", ",", "obs_shape", ",", "action_space", ",", "rec_state_size", ")", "\n", "self", ".", "extras", "=", "torch", ".", "zeros", "(", "(", "num_steps", "+", "1", ",", "num_processes", ",", "extras_size", ")", ",", "\n", "dtype", "=", "torch", ".", "long", ")", "\n", "self", ".", "has_extras", "=", "True", "\n", "self", ".", "extras_size", "=", "extras_size", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.GlobalRolloutStorage.insert": [[198, 204], ["storage.GlobalRolloutStorage.extras[].copy_", "storage.RolloutStorage.insert"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.GlobalRolloutStorage.insert"], ["", "def", "insert", "(", "self", ",", "obs", ",", "rec_states", ",", "actions", ",", "action_log_probs", ",", "value_preds", ",", "\n", "rewards", ",", "masks", ",", "extras", ")", ":", "\n", "        ", "self", ".", "extras", "[", "self", ".", "step", "+", "1", "]", ".", "copy_", "(", "extras", ")", "\n", "super", "(", "GlobalRolloutStorage", ",", "self", ")", ".", "insert", "(", "\n", "obs", ",", "rec_states", ",", "actions", ",", "\n", "action_log_probs", ",", "value_preds", ",", "rewards", ",", "masks", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage._flatten_helper": [[11, 13], ["_tensor.view", "_tensor.size"], "function", ["None"], ["def", "_flatten_helper", "(", "T", ",", "N", ",", "_tensor", ")", ":", "\n", "    ", "return", "_tensor", ".", "view", "(", "T", "*", "N", ",", "*", "_tensor", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.semantic_prediction.SemanticPredMaskRCNN.__init__": [[24, 27], ["semantic_prediction.ImageSegmentation"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "segmentation_model", "=", "ImageSegmentation", "(", "args", ")", "\n", "self", ".", "args", "=", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.semantic_prediction.SemanticPredMaskRCNN.get_prediction": [[28, 49], ["image_list.append", "semantic_prediction.SemanticPredMaskRCNN.segmentation_model.get_predictions", "numpy.zeros", "enumerate", "vis_output.get_image", "[].pred_classes.cpu().numpy", "list", "obj_mask.cpu().numpy", "[].pred_classes.cpu", "constants.coco_categories_mapping.keys", "obj_mask.cpu"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.semantic_prediction.ImageSegmentation.get_predictions"], ["", "def", "get_prediction", "(", "self", ",", "img", ")", ":", "\n", "        ", "args", "=", "self", ".", "args", "\n", "image_list", "=", "[", "]", "\n", "img", "=", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "image_list", ".", "append", "(", "img", ")", "\n", "seg_predictions", ",", "vis_output", "=", "self", ".", "segmentation_model", ".", "get_predictions", "(", "\n", "image_list", ",", "visualize", "=", "args", ".", "visualize", "==", "2", ")", "\n", "\n", "if", "args", ".", "visualize", "==", "2", ":", "\n", "            ", "img", "=", "vis_output", ".", "get_image", "(", ")", "\n", "\n", "", "semantic_input", "=", "np", ".", "zeros", "(", "(", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ",", "15", "+", "1", ")", ")", "\n", "\n", "for", "j", ",", "class_idx", "in", "enumerate", "(", "\n", "seg_predictions", "[", "0", "]", "[", "'instances'", "]", ".", "pred_classes", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ":", "\n", "            ", "if", "class_idx", "in", "list", "(", "coco_categories_mapping", ".", "keys", "(", ")", ")", ":", "\n", "                ", "idx", "=", "coco_categories_mapping", "[", "class_idx", "]", "\n", "obj_mask", "=", "seg_predictions", "[", "0", "]", "[", "'instances'", "]", ".", "pred_masks", "[", "j", "]", "*", "1.", "\n", "semantic_input", "[", ":", ",", ":", ",", "idx", "]", "+=", "obj_mask", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "", "return", "semantic_input", ",", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.semantic_prediction.ImageSegmentation.__init__": [[59, 81], ["string_args.split.split.split", "get_seg_parser().parse_args", "detectron2.utils.logger.setup_logger", "detectron2.utils.logger.setup_logger.info", "semantic_prediction.setup_cfg", "semantic_prediction.VisualizationDemo", "semantic_prediction.get_seg_parser", "str"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.semantic_prediction.setup_cfg", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.semantic_prediction.get_seg_parser"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "string_args", "=", "\"\"\"\n            --config-file configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml\n            --input input1.jpeg\n            --confidence-threshold {}\n            --opts MODEL.WEIGHTS\n            detectron2://COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x/137849600/model_final_f10217.pkl\n            \"\"\"", ".", "format", "(", "args", ".", "sem_pred_prob_thr", ")", "\n", "\n", "if", "args", ".", "sem_gpu_id", "==", "-", "2", ":", "\n", "            ", "string_args", "+=", "\"\"\" MODEL.DEVICE cpu\"\"\"", "\n", "", "else", ":", "\n", "            ", "string_args", "+=", "\"\"\" MODEL.DEVICE cuda:{}\"\"\"", ".", "format", "(", "args", ".", "sem_gpu_id", ")", "\n", "\n", "", "string_args", "=", "string_args", ".", "split", "(", ")", "\n", "\n", "args", "=", "get_seg_parser", "(", ")", ".", "parse_args", "(", "string_args", ")", "\n", "logger", "=", "setup_logger", "(", ")", "\n", "logger", ".", "info", "(", "\"Arguments: \"", "+", "str", "(", "args", ")", ")", "\n", "\n", "cfg", "=", "setup_cfg", "(", "args", ")", "\n", "self", ".", "demo", "=", "VisualizationDemo", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.semantic_prediction.ImageSegmentation.get_predictions": [[82, 84], ["semantic_prediction.ImageSegmentation.demo.run_on_image"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.semantic_prediction.VisualizationDemo.run_on_image"], ["", "def", "get_predictions", "(", "self", ",", "img", ",", "visualize", "=", "0", ")", ":", "\n", "        ", "return", "self", ".", "demo", ".", "run_on_image", "(", "img", ",", "visualize", "=", "visualize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.semantic_prediction.VisualizationDemo.__init__": [[140, 153], ["detectron2.data.catalog.MetadataCatalog.get", "torch.device", "semantic_prediction.BatchPredictor", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "instance_mode", "=", "ColorMode", ".", "IMAGE", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            cfg (CfgNode):\n            instance_mode (ColorMode):\n        \"\"\"", "\n", "self", ".", "metadata", "=", "MetadataCatalog", ".", "get", "(", "\n", "cfg", ".", "DATASETS", ".", "TEST", "[", "0", "]", "if", "len", "(", "cfg", ".", "DATASETS", ".", "TEST", ")", "else", "\"__unused\"", "\n", ")", "\n", "self", ".", "cpu_device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "self", ".", "instance_mode", "=", "instance_mode", "\n", "\n", "self", ".", "predictor", "=", "BatchPredictor", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.semantic_prediction.VisualizationDemo.run_on_image": [[154, 190], ["semantic_prediction.VisualizationDemo.predictor", "detectron2.utils.visualizer.Visualizer", "detectron2.utils.visualizer.Visualizer.draw_panoptic_seg_predictions", "panoptic_seg.to", "detectron2.utils.visualizer.Visualizer.draw_sem_seg", "predictions[].to", "detectron2.utils.visualizer.Visualizer.draw_instance_predictions", "predictions[].argmax().to", "predictions[].argmax"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to"], ["", "def", "run_on_image", "(", "self", ",", "image_list", ",", "visualize", "=", "0", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            image (np.ndarray): an image of shape (H, W, C) (in BGR order).\n                This is the format used by OpenCV.\n\n        Returns:\n            predictions (dict): the output of the model.\n            vis_output (VisImage): the visualized image output.\n        \"\"\"", "\n", "vis_output", "=", "None", "\n", "all_predictions", "=", "self", ".", "predictor", "(", "image_list", ")", "\n", "# Convert image from OpenCV BGR format to Matplotlib RGB format.", "\n", "\n", "if", "visualize", ":", "\n", "            ", "predictions", "=", "all_predictions", "[", "0", "]", "\n", "image", "=", "image_list", "[", "0", "]", "\n", "visualizer", "=", "Visualizer", "(", "\n", "image", ",", "self", ".", "metadata", ",", "instance_mode", "=", "self", ".", "instance_mode", ")", "\n", "if", "\"panoptic_seg\"", "in", "predictions", ":", "\n", "                ", "panoptic_seg", ",", "segments_info", "=", "predictions", "[", "\"panoptic_seg\"", "]", "\n", "vis_output", "=", "visualizer", ".", "draw_panoptic_seg_predictions", "(", "\n", "panoptic_seg", ".", "to", "(", "self", ".", "cpu_device", ")", ",", "segments_info", "\n", ")", "\n", "", "else", ":", "\n", "                ", "if", "\"sem_seg\"", "in", "predictions", ":", "\n", "                    ", "vis_output", "=", "visualizer", ".", "draw_sem_seg", "(", "\n", "predictions", "[", "\"sem_seg\"", "]", ".", "argmax", "(", "\n", "dim", "=", "0", ")", ".", "to", "(", "self", ".", "cpu_device", ")", "\n", ")", "\n", "", "if", "\"instances\"", "in", "predictions", ":", "\n", "                    ", "instances", "=", "predictions", "[", "\"instances\"", "]", ".", "to", "(", "self", ".", "cpu_device", ")", "\n", "vis_output", "=", "visualizer", ".", "draw_instance_predictions", "(", "\n", "predictions", "=", "instances", ")", "\n", "\n", "", "", "", "return", "all_predictions", ",", "vis_output", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.semantic_prediction.BatchPredictor.__init__": [[212, 223], ["cfg.clone", "detectron2.modeling.build_model", "semantic_prediction.BatchPredictor.model.eval", "detectron2.data.catalog.MetadataCatalog.get", "detectron2.checkpoint.DetectionCheckpointer", "detectron2.checkpoint.DetectionCheckpointer.load"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "self", ".", "cfg", "=", "cfg", ".", "clone", "(", ")", "# cfg can be modified by model", "\n", "self", ".", "model", "=", "build_model", "(", "self", ".", "cfg", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "metadata", "=", "MetadataCatalog", ".", "get", "(", "cfg", ".", "DATASETS", ".", "TEST", "[", "0", "]", ")", "\n", "\n", "checkpointer", "=", "DetectionCheckpointer", "(", "self", ".", "model", ")", "\n", "checkpointer", ".", "load", "(", "cfg", ".", "MODEL", ".", "WEIGHTS", ")", "\n", "\n", "self", ".", "input_format", "=", "cfg", ".", "INPUT", ".", "FORMAT", "\n", "assert", "self", ".", "input_format", "in", "[", "\"RGB\"", ",", "\"BGR\"", "]", ",", "self", ".", "input_format", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.semantic_prediction.BatchPredictor.__call__": [[224, 253], ["torch.as_tensor", "inputs.append", "torch.no_grad", "semantic_prediction.BatchPredictor.model", "torch.as_tensor.astype().transpose", "torch.as_tensor.astype"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image_list", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            image_list (list of np.ndarray): a list of images of\n                                             shape (H, W, C) (in BGR order).\n\n        Returns:\n            predictions (dict):\n                the output of the model for all images.\n                See :doc:`/tutorials/models` for details about the format.\n        \"\"\"", "\n", "inputs", "=", "[", "]", "\n", "for", "original_image", "in", "image_list", ":", "\n", "# https://github.com/sphinx-doc/sphinx/issues/4258", "\n", "# Apply pre-processing to image.", "\n", "            ", "if", "self", ".", "input_format", "==", "\"RGB\"", ":", "\n", "# whether the model expects BGR inputs or RGB", "\n", "                ", "original_image", "=", "original_image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "", "height", ",", "width", "=", "original_image", ".", "shape", "[", ":", "2", "]", "\n", "image", "=", "original_image", "\n", "image", "=", "torch", ".", "as_tensor", "(", "image", ".", "astype", "(", "\"float32\"", ")", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "instance", "=", "{", "\"image\"", ":", "image", ",", "\"height\"", ":", "height", ",", "\"width\"", ":", "width", "}", "\n", "\n", "inputs", ".", "append", "(", "instance", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "predictions", "=", "self", ".", "model", "(", "inputs", ")", "\n", "return", "predictions", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.semantic_prediction.compress_sem_map": [[51, 56], ["numpy.zeros", "range"], "function", ["None"], ["", "", "def", "compress_sem_map", "(", "sem_map", ")", ":", "\n", "    ", "c_map", "=", "np", ".", "zeros", "(", "(", "sem_map", ".", "shape", "[", "1", "]", ",", "sem_map", ".", "shape", "[", "2", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "sem_map", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "c_map", "[", "sem_map", "[", "i", "]", ">", "0.", "]", "=", "i", "+", "1", "\n", "", "return", "c_map", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.semantic_prediction.setup_cfg": [[86, 98], ["detectron2.config.get_cfg", "detectron2.config.get_cfg.merge_from_file", "detectron2.config.get_cfg.merge_from_list", "detectron2.config.get_cfg.freeze"], "function", ["None"], ["", "", "def", "setup_cfg", "(", "args", ")", ":", "\n", "# load config from file and command-line arguments", "\n", "    ", "cfg", "=", "get_cfg", "(", ")", "\n", "cfg", ".", "merge_from_file", "(", "args", ".", "config_file", ")", "\n", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "# Set score_threshold for builtin models", "\n", "cfg", ".", "MODEL", ".", "RETINANET", ".", "SCORE_THRESH_TEST", "=", "args", ".", "confidence_threshold", "\n", "cfg", ".", "MODEL", ".", "ROI_HEADS", ".", "SCORE_THRESH_TEST", "=", "args", ".", "confidence_threshold", "\n", "cfg", ".", "MODEL", ".", "PANOPTIC_FPN", ".", "COMBINE", ".", "INSTANCES_CONFIDENCE_THRESH", "=", "args", ".", "confidence_threshold", "\n", "cfg", ".", "freeze", "(", ")", "\n", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.semantic_prediction.get_seg_parser": [[100, 137], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "def", "get_seg_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "\"Detectron2 demo for builtin models\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--config-file\"", ",", "\n", "default", "=", "\"configs/quick_schedules/mask_rcnn_R_50_FPN_inference_acc_test.yaml\"", ",", "\n", "metavar", "=", "\"FILE\"", ",", "\n", "help", "=", "\"path to config file\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--webcam\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Take inputs from webcam.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--video-input\"", ",", "help", "=", "\"Path to video file.\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--input\"", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "help", "=", "\"A list of space separated input images\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--output\"", ",", "\n", "help", "=", "\"A file or directory to save output visualizations. \"", "\n", "\"If not given, will show output in an OpenCV window.\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--confidence-threshold\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.5", ",", "\n", "help", "=", "\"Minimum score for instance predictions to be shown\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--opts\"", ",", "\n", "help", "=", "\"Modify config options using the command-line 'KEY VALUE' pairs\"", ",", "\n", "default", "=", "[", "]", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ",", "\n", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.visualization.get_contour_points": [[5, 17], ["numpy.array", "int", "int", "int", "int", "int", "int", "int", "int", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "function", ["None"], ["def", "get_contour_points", "(", "pos", ",", "origin", ",", "size", "=", "20", ")", ":", "\n", "    ", "x", ",", "y", ",", "o", "=", "pos", "\n", "pt1", "=", "(", "int", "(", "x", ")", "+", "origin", "[", "0", "]", ",", "\n", "int", "(", "y", ")", "+", "origin", "[", "1", "]", ")", "\n", "pt2", "=", "(", "int", "(", "x", "+", "size", "/", "1.5", "*", "np", ".", "cos", "(", "o", "+", "np", ".", "pi", "*", "4", "/", "3", ")", ")", "+", "origin", "[", "0", "]", ",", "\n", "int", "(", "y", "+", "size", "/", "1.5", "*", "np", ".", "sin", "(", "o", "+", "np", ".", "pi", "*", "4", "/", "3", ")", ")", "+", "origin", "[", "1", "]", ")", "\n", "pt3", "=", "(", "int", "(", "x", "+", "size", "*", "np", ".", "cos", "(", "o", ")", ")", "+", "origin", "[", "0", "]", ",", "\n", "int", "(", "y", "+", "size", "*", "np", ".", "sin", "(", "o", ")", ")", "+", "origin", "[", "1", "]", ")", "\n", "pt4", "=", "(", "int", "(", "x", "+", "size", "/", "1.5", "*", "np", ".", "cos", "(", "o", "-", "np", ".", "pi", "*", "4", "/", "3", ")", ")", "+", "origin", "[", "0", "]", ",", "\n", "int", "(", "y", "+", "size", "/", "1.5", "*", "np", ".", "sin", "(", "o", "-", "np", ".", "pi", "*", "4", "/", "3", ")", ")", "+", "origin", "[", "1", "]", ")", "\n", "\n", "return", "np", ".", "array", "(", "[", "pt1", ",", "pt2", ",", "pt3", ",", "pt4", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.visualization.draw_line": [[19, 25], ["range", "int", "int", "numpy.rint", "numpy.rint"], "function", ["None"], ["", "def", "draw_line", "(", "start", ",", "end", ",", "mat", ",", "steps", "=", "25", ",", "w", "=", "1", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "steps", "+", "1", ")", ":", "\n", "        ", "x", "=", "int", "(", "np", ".", "rint", "(", "start", "[", "0", "]", "+", "(", "end", "[", "0", "]", "-", "start", "[", "0", "]", ")", "*", "i", "/", "steps", ")", ")", "\n", "y", "=", "int", "(", "np", ".", "rint", "(", "start", "[", "1", "]", "+", "(", "end", "[", "1", "]", "-", "start", "[", "1", "]", ")", "*", "i", "/", "steps", ")", ")", "\n", "mat", "[", "x", "-", "w", ":", "x", "+", "w", ",", "y", "-", "w", ":", "y", "+", "w", "]", "=", "1", "\n", "", "return", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.visualization.init_vis_image": [[27, 66], ["cv2.putText", "cv2.putText", "numpy.ones().astype", "cv2.getTextSize", "cv2.getTextSize", "numpy.ones"], "function", ["None"], ["", "def", "init_vis_image", "(", "goal_name", ",", "legend", ")", ":", "\n", "    ", "vis_image", "=", "np", ".", "ones", "(", "(", "655", ",", "1165", ",", "3", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "*", "255", "\n", "font", "=", "cv2", ".", "FONT_HERSHEY_SIMPLEX", "\n", "fontScale", "=", "1", "\n", "color", "=", "(", "20", ",", "20", ",", "20", ")", "# BGR", "\n", "thickness", "=", "2", "\n", "\n", "text", "=", "\"Observations (Goal: {})\"", ".", "format", "(", "goal_name", ")", "\n", "textsize", "=", "cv2", ".", "getTextSize", "(", "text", ",", "font", ",", "fontScale", ",", "thickness", ")", "[", "0", "]", "\n", "textX", "=", "(", "640", "-", "textsize", "[", "0", "]", ")", "//", "2", "+", "15", "\n", "textY", "=", "(", "50", "+", "textsize", "[", "1", "]", ")", "//", "2", "\n", "vis_image", "=", "cv2", ".", "putText", "(", "vis_image", ",", "text", ",", "(", "textX", ",", "textY", ")", ",", "\n", "font", ",", "fontScale", ",", "color", ",", "thickness", ",", "\n", "cv2", ".", "LINE_AA", ")", "\n", "\n", "text", "=", "\"Predicted Semantic Map\"", "\n", "textsize", "=", "cv2", ".", "getTextSize", "(", "text", ",", "font", ",", "fontScale", ",", "thickness", ")", "[", "0", "]", "\n", "textX", "=", "640", "+", "(", "480", "-", "textsize", "[", "0", "]", ")", "//", "2", "+", "30", "\n", "textY", "=", "(", "50", "+", "textsize", "[", "1", "]", ")", "//", "2", "\n", "vis_image", "=", "cv2", ".", "putText", "(", "vis_image", ",", "text", ",", "(", "textX", ",", "textY", ")", ",", "\n", "font", ",", "fontScale", ",", "color", ",", "thickness", ",", "\n", "cv2", ".", "LINE_AA", ")", "\n", "\n", "# draw outlines", "\n", "color", "=", "[", "100", ",", "100", ",", "100", "]", "\n", "vis_image", "[", "49", ",", "15", ":", "655", "]", "=", "color", "\n", "vis_image", "[", "49", ",", "670", ":", "1150", "]", "=", "color", "\n", "vis_image", "[", "50", ":", "530", ",", "14", "]", "=", "color", "\n", "vis_image", "[", "50", ":", "530", ",", "655", "]", "=", "color", "\n", "vis_image", "[", "50", ":", "530", ",", "669", "]", "=", "color", "\n", "vis_image", "[", "50", ":", "530", ",", "1150", "]", "=", "color", "\n", "vis_image", "[", "530", ",", "15", ":", "655", "]", "=", "color", "\n", "vis_image", "[", "530", ",", "670", ":", "1150", "]", "=", "color", "\n", "\n", "# draw legend", "\n", "lx", ",", "ly", ",", "_", "=", "legend", ".", "shape", "\n", "vis_image", "[", "537", ":", "537", "+", "lx", ",", "155", ":", "155", "+", "ly", ",", ":", "]", "=", "legend", "\n", "\n", "return", "vis_image", "\n", "", ""]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.map_builder.MapBuilder.__init__": [[6, 33], ["envs.get_camera_matrix", "numpy.zeros", "len"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.depth_utils.get_camera_matrix"], ["    ", "def", "__init__", "(", "self", ",", "params", ")", ":", "\n", "        ", "self", ".", "params", "=", "params", "\n", "frame_width", "=", "params", "[", "'frame_width'", "]", "\n", "frame_height", "=", "params", "[", "'frame_height'", "]", "\n", "fov", "=", "params", "[", "'fov'", "]", "\n", "self", ".", "camera_matrix", "=", "du", ".", "get_camera_matrix", "(", "\n", "frame_width", ",", "\n", "frame_height", ",", "\n", "fov", ")", "\n", "self", ".", "vision_range", "=", "params", "[", "'vision_range'", "]", "\n", "\n", "self", ".", "map_size_cm", "=", "params", "[", "'map_size_cm'", "]", "\n", "self", ".", "resolution", "=", "params", "[", "'resolution'", "]", "\n", "agent_min_z", "=", "params", "[", "'agent_min_z'", "]", "\n", "agent_max_z", "=", "params", "[", "'agent_max_z'", "]", "\n", "self", ".", "z_bins", "=", "[", "agent_min_z", ",", "agent_max_z", "]", "\n", "self", ".", "du_scale", "=", "params", "[", "'du_scale'", "]", "\n", "self", ".", "visualize", "=", "params", "[", "'visualize'", "]", "\n", "self", ".", "obs_threshold", "=", "params", "[", "'obs_threshold'", "]", "\n", "\n", "self", ".", "map", "=", "np", ".", "zeros", "(", "(", "self", ".", "map_size_cm", "//", "self", ".", "resolution", ",", "\n", "self", ".", "map_size_cm", "//", "self", ".", "resolution", ",", "\n", "len", "(", "self", ".", "z_bins", ")", "+", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "self", ".", "agent_height", "=", "params", "[", "'agent_height'", "]", "\n", "self", ".", "agent_view_angle", "=", "params", "[", "'agent_view_angle'", "]", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.map_builder.MapBuilder.update_map": [[34, 79], ["envs.get_point_cloud_from_z", "envs.transform_camera_view", "envs.transform_pose", "envs.bin_points", "envs.bin_points.sum", "envs.transform_pose", "envs.bin_points", "map_builder.MapBuilder.map.sum", "numpy.errstate"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.depth_utils.get_point_cloud_from_z", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.depth_utils.transform_camera_view", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.depth_utils.transform_pose", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.depth_utils.bin_points", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.depth_utils.transform_pose", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.depth_utils.bin_points"], ["", "def", "update_map", "(", "self", ",", "depth", ",", "current_pose", ")", ":", "\n", "        ", "with", "np", ".", "errstate", "(", "invalid", "=", "\"ignore\"", ")", ":", "\n", "            ", "depth", "[", "depth", ">", "self", ".", "vision_range", "*", "self", ".", "resolution", "]", "=", "np", ".", "NaN", "\n", "", "point_cloud", "=", "du", ".", "get_point_cloud_from_z", "(", "depth", ",", "self", ".", "camera_matrix", ",", "\n", "scale", "=", "self", ".", "du_scale", ")", "\n", "\n", "agent_view", "=", "du", ".", "transform_camera_view", "(", "point_cloud", ",", "\n", "self", ".", "agent_height", ",", "\n", "self", ".", "agent_view_angle", ")", "\n", "\n", "shift_loc", "=", "[", "self", ".", "vision_range", "*", "self", ".", "resolution", "//", "2", ",", "0", ",", "np", ".", "pi", "/", "2.0", "]", "\n", "agent_view_centered", "=", "du", ".", "transform_pose", "(", "agent_view", ",", "shift_loc", ")", "\n", "\n", "agent_view_flat", "=", "du", ".", "bin_points", "(", "\n", "agent_view_centered", ",", "\n", "self", ".", "vision_range", ",", "\n", "self", ".", "z_bins", ",", "\n", "self", ".", "resolution", ")", "\n", "\n", "agent_view_cropped", "=", "agent_view_flat", "[", ":", ",", ":", ",", "1", "]", "\n", "agent_view_cropped", "=", "agent_view_cropped", "/", "self", ".", "obs_threshold", "\n", "agent_view_cropped", "[", "agent_view_cropped", ">=", "0.5", "]", "=", "1.0", "\n", "agent_view_cropped", "[", "agent_view_cropped", "<", "0.5", "]", "=", "0.0", "\n", "\n", "agent_view_explored", "=", "agent_view_flat", ".", "sum", "(", "2", ")", "\n", "agent_view_explored", "[", "agent_view_explored", ">", "0", "]", "=", "1.0", "\n", "\n", "geocentric_pc", "=", "du", ".", "transform_pose", "(", "agent_view", ",", "current_pose", ")", "\n", "\n", "geocentric_flat", "=", "du", ".", "bin_points", "(", "\n", "geocentric_pc", ",", "\n", "self", ".", "map", ".", "shape", "[", "0", "]", ",", "\n", "self", ".", "z_bins", ",", "\n", "self", ".", "resolution", ")", "\n", "\n", "self", ".", "map", "=", "self", ".", "map", "+", "geocentric_flat", "\n", "\n", "map_gt", "=", "self", ".", "map", "[", ":", ",", ":", ",", "1", "]", "/", "self", ".", "obs_threshold", "\n", "map_gt", "[", "map_gt", ">=", "0.5", "]", "=", "1.0", "\n", "map_gt", "[", "map_gt", "<", "0.5", "]", "=", "0.0", "\n", "\n", "explored_gt", "=", "self", ".", "map", ".", "sum", "(", "2", ")", "\n", "explored_gt", "[", "explored_gt", ">", "1", "]", "=", "1.0", "\n", "\n", "return", "agent_view_cropped", ",", "map_gt", ",", "agent_view_explored", ",", "explored_gt", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.map_builder.MapBuilder.get_st_pose": [[80, 89], ["numpy.rad2deg"], "methods", ["None"], ["", "def", "get_st_pose", "(", "self", ",", "current_loc", ")", ":", "\n", "        ", "loc", "=", "[", "-", "(", "current_loc", "[", "0", "]", "/", "self", ".", "resolution", "\n", "-", "self", ".", "map_size_cm", "//", "(", "self", ".", "resolution", "*", "2", ")", ")", "/", "\n", "(", "self", ".", "map_size_cm", "//", "(", "self", ".", "resolution", "*", "2", ")", ")", ",", "\n", "-", "(", "current_loc", "[", "1", "]", "/", "self", ".", "resolution", "\n", "-", "self", ".", "map_size_cm", "//", "(", "self", ".", "resolution", "*", "2", ")", ")", "/", "\n", "(", "self", ".", "map_size_cm", "//", "(", "self", ".", "resolution", "*", "2", ")", ")", ",", "\n", "90", "-", "np", ".", "rad2deg", "(", "current_loc", "[", "2", "]", ")", "]", "\n", "return", "loc", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.map_builder.MapBuilder.reset_map": [[90, 96], ["numpy.zeros", "len"], "methods", ["None"], ["", "def", "reset_map", "(", "self", ",", "map_size", ")", ":", "\n", "        ", "self", ".", "map_size_cm", "=", "map_size", "\n", "\n", "self", ".", "map", "=", "np", ".", "zeros", "(", "(", "self", ".", "map_size_cm", "//", "self", ".", "resolution", ",", "\n", "self", ".", "map_size_cm", "//", "self", ".", "resolution", ",", "\n", "len", "(", "self", ".", "z_bins", ")", "+", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.map_builder.MapBuilder.get_map": [[97, 99], ["None"], "methods", ["None"], ["", "def", "get_map", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "map", "\n", "", "", ""]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.rotation_utils.normalize": [[23, 25], ["numpy.linalg.norm"], "function", ["None"], ["def", "normalize", "(", "v", ")", ":", "\n", "    ", "return", "v", "/", "np", ".", "linalg", ".", "norm", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.rotation_utils.get_r_matrix": [[27, 38], ["rotation_utils.normalize", "numpy.abs", "numpy.array", "numpy.eye", "numpy.eye", "numpy.linalg.matrix_power", "numpy.sin", "numpy.cos"], "function", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.rotation_utils.normalize"], ["", "def", "get_r_matrix", "(", "ax_", ",", "angle", ")", ":", "\n", "    ", "ax", "=", "normalize", "(", "ax_", ")", "\n", "if", "np", ".", "abs", "(", "angle", ")", ">", "ANGLE_EPS", ":", "\n", "        ", "S_hat", "=", "np", ".", "array", "(", "\n", "[", "[", "0.0", ",", "-", "ax", "[", "2", "]", ",", "ax", "[", "1", "]", "]", ",", "[", "ax", "[", "2", "]", ",", "0.0", ",", "-", "ax", "[", "0", "]", "]", ",", "[", "-", "ax", "[", "1", "]", ",", "ax", "[", "0", "]", ",", "0.0", "]", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "R", "=", "np", ".", "eye", "(", "3", ")", "+", "np", ".", "sin", "(", "angle", ")", "*", "S_hat", "+", "(", "1", "-", "np", ".", "cos", "(", "angle", ")", ")", "*", "(", "np", ".", "linalg", ".", "matrix_power", "(", "S_hat", ",", "2", ")", ")", "\n", "", "else", ":", "\n", "        ", "R", "=", "np", ".", "eye", "(", "3", ")", "\n", "", "return", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.rotation_utils.r_between": [[40, 46], ["rotation_utils.normalize", "rotation_utils.normalize", "rotation_utils.normalize", "numpy.arccos", "rotation_utils.get_r_matrix", "numpy.cross", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.rotation_utils.normalize", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.rotation_utils.normalize", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.rotation_utils.normalize", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.rotation_utils.get_r_matrix"], ["", "def", "r_between", "(", "v_from_", ",", "v_to_", ")", ":", "\n", "    ", "v_from", "=", "normalize", "(", "v_from_", ")", "\n", "v_to", "=", "normalize", "(", "v_to_", ")", "\n", "ax", "=", "normalize", "(", "np", ".", "cross", "(", "v_from", ",", "v_to", ")", ")", "\n", "angle", "=", "np", ".", "arccos", "(", "np", ".", "dot", "(", "v_from", ",", "v_to", ")", ")", "\n", "return", "get_r_matrix", "(", "ax", ",", "angle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.rotation_utils.rotate_camera_to_point_at": [[48, 73], ["range", "rotation_utils.r_between", "numpy.dot().reshape", "rotation_utils.normalize", "numpy.arccos", "numpy.dot", "rotation_utils.normalize", "numpy.cross", "numpy.dot", "numpy.eye", "numpy.array().reshape", "numpy.dot", "rotation_utils.normalize", "numpy.dot", "rotation_utils.get_r_matrix", "numpy.array().reshape", "numpy.cross", "rotation_utils.get_r_matrix", "numpy.array", "rotation_utils.get_r_matrix", "numpy.array"], "function", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.rotation_utils.r_between", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.rotation_utils.normalize", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.rotation_utils.normalize", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.rotation_utils.normalize", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.rotation_utils.get_r_matrix", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.rotation_utils.get_r_matrix", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.rotation_utils.get_r_matrix"], ["", "def", "rotate_camera_to_point_at", "(", "up_from", ",", "lookat_from", ",", "up_to", ",", "lookat_to", ")", ":", "\n", "    ", "inputs", "=", "[", "up_from", ",", "lookat_from", ",", "up_to", ",", "lookat_to", "]", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "inputs", "[", "i", "]", "=", "normalize", "(", "np", ".", "array", "(", "inputs", "[", "i", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", ")", ")", ")", "\n", "", "up_from", ",", "lookat_from", ",", "up_to", ",", "lookat_to", "=", "inputs", "\n", "r1", "=", "r_between", "(", "lookat_from", ",", "lookat_to", ")", "\n", "\n", "new_x", "=", "np", ".", "dot", "(", "r1", ",", "np", ".", "array", "(", "[", "1", ",", "0", ",", "0", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", ")", ".", "reshape", "(", "(", "-", "1", ")", ")", "\n", "to_x", "=", "normalize", "(", "np", ".", "cross", "(", "lookat_to", ",", "up_to", ")", ")", "\n", "angle", "=", "np", ".", "arccos", "(", "np", ".", "dot", "(", "new_x", ",", "to_x", ")", ")", "\n", "if", "angle", ">", "ANGLE_EPS", ":", "\n", "        ", "if", "angle", "<", "np", ".", "pi", "-", "ANGLE_EPS", ":", "\n", "            ", "ax", "=", "normalize", "(", "np", ".", "cross", "(", "new_x", ",", "to_x", ")", ")", "\n", "flip", "=", "np", ".", "dot", "(", "lookat_to", ",", "ax", ")", "\n", "if", "flip", ">", "0", ":", "\n", "                ", "r2", "=", "get_r_matrix", "(", "lookat_to", ",", "angle", ")", "\n", "", "elif", "flip", "<", "0", ":", "\n", "                ", "r2", "=", "get_r_matrix", "(", "lookat_to", ",", "-", "1.", "*", "angle", ")", "\n", "", "", "else", ":", "\n", "# Angle of rotation is too close to 180 degrees, direction of", "\n", "# rotation does not matter.", "\n", "            ", "r2", "=", "get_r_matrix", "(", "lookat_to", ",", "angle", ")", "\n", "", "", "else", ":", "\n", "        ", "r2", "=", "np", ".", "eye", "(", "3", ")", "\n", "", "return", "np", ".", "dot", "(", "r2", ",", "r1", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.depth_utils.get_camera_matrix": [[27, 35], ["argparse.Namespace", "numpy.tan", "numpy.deg2rad"], "function", ["None"], ["def", "get_camera_matrix", "(", "width", ",", "height", ",", "fov", ")", ":", "\n", "    ", "\"\"\"Returns a camera matrix from image size and fov.\"\"\"", "\n", "xc", "=", "(", "width", "-", "1.", ")", "/", "2.", "\n", "zc", "=", "(", "height", "-", "1.", ")", "/", "2.", "\n", "f", "=", "(", "width", "/", "2.", ")", "/", "np", ".", "tan", "(", "np", ".", "deg2rad", "(", "fov", "/", "2.", ")", ")", "\n", "camera_matrix", "=", "{", "'xc'", ":", "xc", ",", "'zc'", ":", "zc", ",", "'f'", ":", "f", "}", "\n", "camera_matrix", "=", "Namespace", "(", "**", "camera_matrix", ")", "\n", "return", "camera_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.depth_utils.get_point_cloud_from_z": [[37, 61], ["numpy.meshgrid", "range", "numpy.concatenate", "numpy.arange", "numpy.arange", "numpy.expand_dims", "numpy.expand_dims"], "function", ["None"], ["", "def", "get_point_cloud_from_z", "(", "Y", ",", "camera_matrix", ",", "scale", "=", "1", ")", ":", "\n", "    ", "\"\"\"Projects the depth image Y into a 3D point cloud.\n    Inputs:\n        Y is ...xHxW\n        camera_matrix\n    Outputs:\n        X is positive going right\n        Y is positive into the image\n        Z is positive up in the image\n        XYZ is ...xHxWx3\n    \"\"\"", "\n", "x", ",", "z", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "Y", ".", "shape", "[", "-", "1", "]", ")", ",", "\n", "np", ".", "arange", "(", "Y", ".", "shape", "[", "-", "2", "]", "-", "1", ",", "-", "1", ",", "-", "1", ")", ")", "\n", "for", "_", "in", "range", "(", "Y", ".", "ndim", "-", "2", ")", ":", "\n", "        ", "x", "=", "np", ".", "expand_dims", "(", "x", ",", "axis", "=", "0", ")", "\n", "z", "=", "np", ".", "expand_dims", "(", "z", ",", "axis", "=", "0", ")", "\n", "", "X", "=", "(", "x", "[", ":", ":", "scale", ",", ":", ":", "scale", "]", "-", "camera_matrix", ".", "xc", ")", "*", "Y", "[", ":", ":", "scale", ",", ":", ":", "scale", "]", "/", "camera_matrix", ".", "f", "\n", "Z", "=", "(", "z", "[", ":", ":", "scale", ",", ":", ":", "scale", "]", "-", "camera_matrix", ".", "zc", ")", "*", "Y", "[", ":", ":", "scale", ",", ":", ":", "scale", "]", "/", "camera_matrix", ".", "f", "\n", "XYZ", "=", "np", ".", "concatenate", "(", "(", "X", "[", "...", ",", "np", ".", "newaxis", "]", ",", "\n", "Y", "[", ":", ":", "scale", ",", ":", ":", "scale", "]", "[", "...", ",", "np", ".", "newaxis", "]", ",", "\n", "Z", "[", "...", ",", "np", ".", "newaxis", "]", ")", ",", "axis", "=", "X", ".", "ndim", ")", "\n", "return", "XYZ", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.depth_utils.transform_camera_view": [[63, 79], ["envs.get_r_matrix", "numpy.matmul().reshape", "numpy.deg2rad", "numpy.matmul", "np.matmul().reshape.reshape"], "function", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.rotation_utils.get_r_matrix"], ["", "def", "transform_camera_view", "(", "XYZ", ",", "sensor_height", ",", "camera_elevation_degree", ")", ":", "\n", "    ", "\"\"\"\n    Transforms the point cloud into geocentric frame to account for\n    camera elevation and angle\n    Input:\n        XYZ                     : ...x3\n        sensor_height           : height of the sensor\n        camera_elevation_degree : camera elevation to rectify.\n    Output:\n        XYZ : ...x3\n    \"\"\"", "\n", "R", "=", "ru", ".", "get_r_matrix", "(", "\n", "[", "1.", ",", "0.", ",", "0.", "]", ",", "angle", "=", "np", ".", "deg2rad", "(", "camera_elevation_degree", ")", ")", "\n", "XYZ", "=", "np", ".", "matmul", "(", "XYZ", ".", "reshape", "(", "-", "1", ",", "3", ")", ",", "R", ".", "T", ")", ".", "reshape", "(", "XYZ", ".", "shape", ")", "\n", "XYZ", "[", "...", ",", "2", "]", "=", "XYZ", "[", "...", ",", "2", "]", "+", "sensor_height", "\n", "return", "XYZ", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.depth_utils.transform_pose": [[81, 96], ["envs.get_r_matrix", "numpy.matmul().reshape", "numpy.matmul", "np.matmul().reshape.reshape"], "function", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.rotation_utils.get_r_matrix"], ["", "def", "transform_pose", "(", "XYZ", ",", "current_pose", ")", ":", "\n", "    ", "\"\"\"\n    Transforms the point cloud into geocentric frame to account for\n    camera position\n    Input:\n        XYZ                     : ...x3\n        current_pose            : camera position (x, y, theta (radians))\n    Output:\n        XYZ : ...x3\n    \"\"\"", "\n", "R", "=", "ru", ".", "get_r_matrix", "(", "[", "0.", ",", "0.", ",", "1.", "]", ",", "angle", "=", "current_pose", "[", "2", "]", "-", "np", ".", "pi", "/", "2.", ")", "\n", "XYZ", "=", "np", ".", "matmul", "(", "XYZ", ".", "reshape", "(", "-", "1", ",", "3", ")", ",", "R", ".", "T", ")", ".", "reshape", "(", "XYZ", ".", "shape", ")", "\n", "XYZ", "[", ":", ",", ":", ",", "0", "]", "=", "XYZ", "[", ":", ",", ":", ",", "0", "]", "+", "current_pose", "[", "0", "]", "\n", "XYZ", "[", ":", ",", ":", ",", "1", "]", "=", "XYZ", "[", ":", ",", ":", ",", "1", "]", "+", "current_pose", "[", "1", "]", "\n", "return", "XYZ", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.depth_utils.bin_points": [[98, 127], ["XYZ_cms.reshape.reshape", "np.reshape.reshape", "len", "numpy.logical_not", "numpy.round().astype", "numpy.round().astype", "numpy.digitize().astype", "numpy.array", "numpy.all", "numpy.bincount", "numpy.reshape", "numpy.isnan", "ind.ravel", "np.all.ravel().astype", "list", "numpy.round", "numpy.round", "numpy.digitize", "numpy.logical_not", "np.all.ravel"], "function", ["None"], ["", "def", "bin_points", "(", "XYZ_cms", ",", "map_size", ",", "z_bins", ",", "xy_resolution", ")", ":", "\n", "    ", "\"\"\"Bins points into xy-z bins\n    XYZ_cms is ... x H x W x3\n    Outputs is ... x map_size x map_size x (len(z_bins)+1)\n    \"\"\"", "\n", "sh", "=", "XYZ_cms", ".", "shape", "\n", "XYZ_cms", "=", "XYZ_cms", ".", "reshape", "(", "[", "-", "1", ",", "sh", "[", "-", "3", "]", ",", "sh", "[", "-", "2", "]", ",", "sh", "[", "-", "1", "]", "]", ")", "\n", "n_z_bins", "=", "len", "(", "z_bins", ")", "+", "1", "\n", "counts", "=", "[", "]", "\n", "for", "XYZ_cm", "in", "XYZ_cms", ":", "\n", "        ", "isnotnan", "=", "np", ".", "logical_not", "(", "np", ".", "isnan", "(", "XYZ_cm", "[", ":", ",", ":", ",", "0", "]", ")", ")", "\n", "X_bin", "=", "np", ".", "round", "(", "XYZ_cm", "[", ":", ",", ":", ",", "0", "]", "/", "xy_resolution", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "Y_bin", "=", "np", ".", "round", "(", "XYZ_cm", "[", ":", ",", ":", ",", "1", "]", "/", "xy_resolution", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "Z_bin", "=", "np", ".", "digitize", "(", "XYZ_cm", "[", ":", ",", ":", ",", "2", "]", ",", "bins", "=", "z_bins", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "isvalid", "=", "np", ".", "array", "(", "[", "X_bin", ">=", "0", ",", "X_bin", "<", "map_size", ",", "Y_bin", ">=", "0", ",", "\n", "Y_bin", "<", "map_size", ",", "\n", "Z_bin", ">=", "0", ",", "Z_bin", "<", "n_z_bins", ",", "isnotnan", "]", ")", "\n", "isvalid", "=", "np", ".", "all", "(", "isvalid", ",", "axis", "=", "0", ")", "\n", "\n", "ind", "=", "(", "Y_bin", "*", "map_size", "+", "X_bin", ")", "*", "n_z_bins", "+", "Z_bin", "\n", "ind", "[", "np", ".", "logical_not", "(", "isvalid", ")", "]", "=", "0", "\n", "count", "=", "np", ".", "bincount", "(", "ind", ".", "ravel", "(", ")", ",", "isvalid", ".", "ravel", "(", ")", ".", "astype", "(", "np", ".", "int32", ")", ",", "\n", "minlength", "=", "map_size", "*", "map_size", "*", "n_z_bins", ")", "\n", "counts", "=", "np", ".", "reshape", "(", "count", ",", "[", "map_size", ",", "map_size", ",", "n_z_bins", "]", ")", "\n", "\n", "", "counts", "=", "counts", ".", "reshape", "(", "list", "(", "sh", "[", ":", "-", "3", "]", ")", "+", "[", "map_size", ",", "map_size", ",", "n_z_bins", "]", ")", "\n", "\n", "return", "counts", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.depth_utils.get_point_cloud_from_z_t": [[129, 156], ["torch.meshgrid", "grid_x.unsqueeze().expand.transpose().to", "grid_z.unsqueeze().expand.transpose().to", "grid_x.unsqueeze().expand.unsqueeze().expand", "grid_z.unsqueeze().expand.unsqueeze().expand", "torch.stack", "torch.arange", "torch.arange", "Y_t.size", "Y_t.size", "grid_x.unsqueeze().expand.transpose", "grid_z.unsqueeze().expand.transpose", "grid_x.unsqueeze().expand.unsqueeze", "grid_z.unsqueeze().expand.unsqueeze", "len", "Y_t.size"], "function", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to"], ["", "def", "get_point_cloud_from_z_t", "(", "Y_t", ",", "camera_matrix", ",", "device", ",", "scale", "=", "1", ")", ":", "\n", "    ", "\"\"\"Projects the depth image Y into a 3D point cloud.\n    Inputs:\n        Y is ...xHxW\n        camera_matrix\n    Outputs:\n        X is positive going right\n        Y is positive into the image\n        Z is positive up in the image\n        XYZ is ...xHxWx3\n    \"\"\"", "\n", "grid_x", ",", "grid_z", "=", "torch", ".", "meshgrid", "(", "torch", ".", "arange", "(", "Y_t", ".", "shape", "[", "-", "1", "]", ")", ",", "\n", "torch", ".", "arange", "(", "Y_t", ".", "shape", "[", "-", "2", "]", "-", "1", ",", "-", "1", ",", "-", "1", ")", ")", "\n", "grid_x", "=", "grid_x", ".", "transpose", "(", "1", ",", "0", ")", ".", "to", "(", "device", ")", "\n", "grid_z", "=", "grid_z", ".", "transpose", "(", "1", ",", "0", ")", ".", "to", "(", "device", ")", "\n", "grid_x", "=", "grid_x", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "Y_t", ".", "size", "(", ")", ")", "\n", "grid_z", "=", "grid_z", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "Y_t", ".", "size", "(", ")", ")", "\n", "\n", "X_t", "=", "(", "grid_x", "[", ":", ",", ":", ":", "scale", ",", ":", ":", "scale", "]", "-", "camera_matrix", ".", "xc", ")", "*", "Y_t", "[", ":", ",", ":", ":", "scale", ",", ":", ":", "scale", "]", "/", "camera_matrix", ".", "f", "\n", "Z_t", "=", "(", "grid_z", "[", ":", ",", ":", ":", "scale", ",", ":", ":", "scale", "]", "-", "camera_matrix", ".", "zc", ")", "*", "Y_t", "[", ":", ",", ":", ":", "scale", ",", ":", ":", "scale", "]", "/", "camera_matrix", ".", "f", "\n", "\n", "XYZ", "=", "torch", ".", "stack", "(", "\n", "(", "X_t", ",", "Y_t", "[", ":", ",", ":", ":", "scale", ",", ":", ":", "scale", "]", ",", "Z_t", ")", ",", "dim", "=", "len", "(", "Y_t", ".", "size", "(", ")", ")", ")", "\n", "\n", "return", "XYZ", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.depth_utils.transform_camera_view_t": [[158, 177], ["envs.get_r_matrix", "torch.matmul().reshape", "numpy.deg2rad", "torch.matmul", "torch.matmul().reshape.reshape", "torch.from_numpy().float().transpose().to", "torch.from_numpy().float().transpose", "torch.from_numpy().float", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.rotation_utils.get_r_matrix", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to"], ["", "def", "transform_camera_view_t", "(", "\n", "XYZ", ",", "sensor_height", ",", "camera_elevation_degree", ",", "device", ")", ":", "\n", "    ", "\"\"\"\n    Transforms the point cloud into geocentric frame to account for\n    camera elevation and angle\n    Input:\n        XYZ                     : ...x3\n        sensor_height           : height of the sensor\n        camera_elevation_degree : camera elevation to rectify.\n    Output:\n        XYZ : ...x3\n    \"\"\"", "\n", "R", "=", "ru", ".", "get_r_matrix", "(", "\n", "[", "1.", ",", "0.", ",", "0.", "]", ",", "angle", "=", "np", ".", "deg2rad", "(", "camera_elevation_degree", ")", ")", "\n", "XYZ", "=", "torch", ".", "matmul", "(", "XYZ", ".", "reshape", "(", "-", "1", ",", "3", ")", ",", "\n", "torch", ".", "from_numpy", "(", "R", ")", ".", "float", "(", ")", ".", "transpose", "(", "1", ",", "0", ")", ".", "to", "(", "device", ")", "\n", ")", ".", "reshape", "(", "XYZ", ".", "shape", ")", "\n", "XYZ", "[", "...", ",", "2", "]", "=", "XYZ", "[", "...", ",", "2", "]", "+", "sensor_height", "\n", "return", "XYZ", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.depth_utils.transform_pose_t": [[179, 196], ["envs.get_r_matrix", "torch.matmul().reshape", "torch.matmul", "torch.matmul().reshape.reshape", "torch.from_numpy().float().transpose().to", "torch.from_numpy().float().transpose", "torch.from_numpy().float", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.rotation_utils.get_r_matrix", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to"], ["", "def", "transform_pose_t", "(", "XYZ", ",", "current_pose", ",", "device", ")", ":", "\n", "    ", "\"\"\"\n    Transforms the point cloud into geocentric frame to account for\n    camera position\n    Input:\n        XYZ                     : ...x3\n        current_pose            : camera position (x, y, theta (radians))\n    Output:\n        XYZ : ...x3\n    \"\"\"", "\n", "R", "=", "ru", ".", "get_r_matrix", "(", "[", "0.", ",", "0.", ",", "1.", "]", ",", "angle", "=", "current_pose", "[", "2", "]", "-", "np", ".", "pi", "/", "2.", ")", "\n", "XYZ", "=", "torch", ".", "matmul", "(", "XYZ", ".", "reshape", "(", "-", "1", ",", "3", ")", ",", "\n", "torch", ".", "from_numpy", "(", "R", ")", ".", "float", "(", ")", ".", "transpose", "(", "1", ",", "0", ")", ".", "to", "(", "device", ")", "\n", ")", ".", "reshape", "(", "XYZ", ".", "shape", ")", "\n", "XYZ", "[", "...", ",", "0", "]", "+=", "current_pose", "[", "0", "]", "\n", "XYZ", "[", "...", ",", "1", "]", "+=", "current_pose", "[", "1", "]", "\n", "return", "XYZ", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.depth_utils.splat_feat_nd": [[198, 253], ["len", "init_grid.view", "range", "itertools.product", "torch.round.view", "pos_dim.append", "wts_dim.append", "torch.ones_like", "torch.zeros_like", "range", "index.long.long", "torch.round.scatter_add_", "torch.round", "safe_ix.type.type", "pos_d.append", "wts_d.append", "range", "index.long.expand", "torch.floor", "torch.abs"], "function", ["None"], ["", "def", "splat_feat_nd", "(", "init_grid", ",", "feat", ",", "coords", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        init_grid: B X nF X W X H X D X ..\n        feat: B X nF X nPt\n        coords: B X nDims X nPt in [-1, 1]\n    Returns:\n        grid: B X nF X W X H X D X ..\n    \"\"\"", "\n", "wts_dim", "=", "[", "]", "\n", "pos_dim", "=", "[", "]", "\n", "grid_dims", "=", "init_grid", ".", "shape", "[", "2", ":", "]", "\n", "\n", "B", "=", "init_grid", ".", "shape", "[", "0", "]", "\n", "F", "=", "init_grid", ".", "shape", "[", "1", "]", "\n", "\n", "n_dims", "=", "len", "(", "grid_dims", ")", "\n", "\n", "grid_flat", "=", "init_grid", ".", "view", "(", "B", ",", "F", ",", "-", "1", ")", "\n", "\n", "for", "d", "in", "range", "(", "n_dims", ")", ":", "\n", "        ", "pos", "=", "coords", "[", ":", ",", "[", "d", "]", ",", ":", "]", "*", "grid_dims", "[", "d", "]", "/", "2", "+", "grid_dims", "[", "d", "]", "/", "2", "\n", "pos_d", "=", "[", "]", "\n", "wts_d", "=", "[", "]", "\n", "\n", "for", "ix", "in", "[", "0", ",", "1", "]", ":", "\n", "            ", "pos_ix", "=", "torch", ".", "floor", "(", "pos", ")", "+", "ix", "\n", "safe_ix", "=", "(", "pos_ix", ">", "0", ")", "&", "(", "pos_ix", "<", "grid_dims", "[", "d", "]", ")", "\n", "safe_ix", "=", "safe_ix", ".", "type", "(", "pos", ".", "dtype", ")", "\n", "\n", "wts_ix", "=", "1", "-", "torch", ".", "abs", "(", "pos", "-", "pos_ix", ")", "\n", "\n", "wts_ix", "=", "wts_ix", "*", "safe_ix", "\n", "pos_ix", "=", "pos_ix", "*", "safe_ix", "\n", "\n", "pos_d", ".", "append", "(", "pos_ix", ")", "\n", "wts_d", ".", "append", "(", "wts_ix", ")", "\n", "\n", "", "pos_dim", ".", "append", "(", "pos_d", ")", "\n", "wts_dim", ".", "append", "(", "wts_d", ")", "\n", "\n", "", "l_ix", "=", "[", "[", "0", ",", "1", "]", "for", "d", "in", "range", "(", "n_dims", ")", "]", "\n", "\n", "for", "ix_d", "in", "itertools", ".", "product", "(", "*", "l_ix", ")", ":", "\n", "        ", "wts", "=", "torch", ".", "ones_like", "(", "wts_dim", "[", "0", "]", "[", "0", "]", ")", "\n", "index", "=", "torch", ".", "zeros_like", "(", "wts_dim", "[", "0", "]", "[", "0", "]", ")", "\n", "for", "d", "in", "range", "(", "n_dims", ")", ":", "\n", "            ", "index", "=", "index", "*", "grid_dims", "[", "d", "]", "+", "pos_dim", "[", "d", "]", "[", "ix_d", "[", "d", "]", "]", "\n", "wts", "=", "wts", "*", "wts_dim", "[", "d", "]", "[", "ix_d", "[", "d", "]", "]", "\n", "\n", "", "index", "=", "index", ".", "long", "(", ")", "\n", "grid_flat", ".", "scatter_add_", "(", "2", ",", "index", ".", "expand", "(", "-", "1", ",", "F", ",", "-", "1", ")", ",", "feat", "*", "wts", ")", "\n", "grid_flat", "=", "torch", ".", "round", "(", "grid_flat", ")", "\n", "\n", "", "return", "grid_flat", ".", "view", "(", "init_grid", ".", "shape", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.fmm_planner.FMMPlanner.__init__": [[40, 54], ["int", "cv2.resize", "numpy.rint"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "traversible", ",", "scale", "=", "1", ",", "step_size", "=", "5", ")", ":", "\n", "        ", "self", ".", "scale", "=", "scale", "\n", "self", ".", "step_size", "=", "step_size", "\n", "if", "scale", "!=", "1.", ":", "\n", "            ", "self", ".", "traversible", "=", "cv2", ".", "resize", "(", "traversible", ",", "\n", "(", "traversible", ".", "shape", "[", "1", "]", "//", "scale", ",", "\n", "traversible", ".", "shape", "[", "0", "]", "//", "scale", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "self", ".", "traversible", "=", "np", ".", "rint", "(", "self", ".", "traversible", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "traversible", "=", "traversible", "\n", "\n", "", "self", ".", "du", "=", "int", "(", "self", ".", "step_size", "/", "(", "self", ".", "scale", "*", "1.", ")", ")", "\n", "self", ".", "fmm_dist", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.fmm_planner.FMMPlanner.set_goal": [[55, 68], ["numpy.ma.masked_values", "skfmm.distance", "numpy.ma.filled", "int", "int", "fmm_planner.FMMPlanner._find_nearest_goal", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.fmm_planner.FMMPlanner._find_nearest_goal"], ["", "def", "set_goal", "(", "self", ",", "goal", ",", "auto_improve", "=", "False", ")", ":", "\n", "        ", "traversible_ma", "=", "ma", ".", "masked_values", "(", "self", ".", "traversible", "*", "1", ",", "0", ")", "\n", "goal_x", ",", "goal_y", "=", "int", "(", "goal", "[", "0", "]", "/", "(", "self", ".", "scale", "*", "1.", ")", ")", ",", "int", "(", "goal", "[", "1", "]", "/", "(", "self", ".", "scale", "*", "1.", ")", ")", "\n", "\n", "if", "self", ".", "traversible", "[", "goal_x", ",", "goal_y", "]", "==", "0.", "and", "auto_improve", ":", "\n", "            ", "goal_x", ",", "goal_y", "=", "self", ".", "_find_nearest_goal", "(", "[", "goal_x", ",", "goal_y", "]", ")", "\n", "\n", "", "traversible_ma", "[", "goal_x", ",", "goal_y", "]", "=", "0", "\n", "dd", "=", "skfmm", ".", "distance", "(", "traversible_ma", ",", "dx", "=", "1", ")", "\n", "dd", "=", "ma", ".", "filled", "(", "dd", ",", "np", ".", "max", "(", "dd", ")", "+", "1", ")", "\n", "self", ".", "fmm_dist", "=", "dd", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.fmm_planner.FMMPlanner.set_multi_goal": [[69, 76], ["numpy.ma.masked_values", "skfmm.distance", "numpy.ma.filled", "numpy.max"], "methods", ["None"], ["", "def", "set_multi_goal", "(", "self", ",", "goal_map", ")", ":", "\n", "        ", "traversible_ma", "=", "ma", ".", "masked_values", "(", "self", ".", "traversible", "*", "1", ",", "0", ")", "\n", "traversible_ma", "[", "goal_map", "==", "1", "]", "=", "0", "\n", "dd", "=", "skfmm", ".", "distance", "(", "traversible_ma", ",", "dx", "=", "1", ")", "\n", "dd", "=", "ma", ".", "filled", "(", "dd", ",", "np", ".", "max", "(", "dd", ")", "+", "1", ")", "\n", "self", ".", "fmm_dist", "=", "dd", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.fmm_planner.FMMPlanner.get_short_term_goal": [[77, 116], ["fmm_planner.get_mask", "fmm_planner.get_dist", "numpy.pad", "numpy.unravel_index", "int", "numpy.argmin", "int", "int"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.fmm_planner.get_mask", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.fmm_planner.get_dist"], ["", "def", "get_short_term_goal", "(", "self", ",", "state", ")", ":", "\n", "        ", "scale", "=", "self", ".", "scale", "*", "1.", "\n", "state", "=", "[", "x", "/", "scale", "for", "x", "in", "state", "]", "\n", "dx", ",", "dy", "=", "state", "[", "0", "]", "-", "int", "(", "state", "[", "0", "]", ")", ",", "state", "[", "1", "]", "-", "int", "(", "state", "[", "1", "]", ")", "\n", "mask", "=", "get_mask", "(", "dx", ",", "dy", ",", "scale", ",", "self", ".", "step_size", ")", "\n", "dist_mask", "=", "get_dist", "(", "dx", ",", "dy", ",", "scale", ",", "self", ".", "step_size", ")", "\n", "\n", "state", "=", "[", "int", "(", "x", ")", "for", "x", "in", "state", "]", "\n", "\n", "dist", "=", "np", ".", "pad", "(", "self", ".", "fmm_dist", ",", "self", ".", "du", ",", "\n", "'constant'", ",", "constant_values", "=", "self", ".", "fmm_dist", ".", "shape", "[", "0", "]", "**", "2", ")", "\n", "subset", "=", "dist", "[", "state", "[", "0", "]", ":", "state", "[", "0", "]", "+", "2", "*", "self", ".", "du", "+", "1", ",", "\n", "state", "[", "1", "]", ":", "state", "[", "1", "]", "+", "2", "*", "self", ".", "du", "+", "1", "]", "\n", "\n", "assert", "subset", ".", "shape", "[", "0", "]", "==", "2", "*", "self", ".", "du", "+", "1", "and", "subset", ".", "shape", "[", "1", "]", "==", "2", "*", "self", ".", "du", "+", "1", ",", "\"Planning error: unexpected subset shape {}\"", ".", "format", "(", "subset", ".", "shape", ")", "\n", "\n", "subset", "*=", "mask", "\n", "subset", "+=", "(", "1", "-", "mask", ")", "*", "self", ".", "fmm_dist", ".", "shape", "[", "0", "]", "**", "2", "\n", "\n", "if", "subset", "[", "self", ".", "du", ",", "self", ".", "du", "]", "<", "0.25", "*", "100", "/", "5.", ":", "# 25cm", "\n", "            ", "stop", "=", "True", "\n", "", "else", ":", "\n", "            ", "stop", "=", "False", "\n", "\n", "", "subset", "-=", "subset", "[", "self", ".", "du", ",", "self", ".", "du", "]", "\n", "ratio1", "=", "subset", "/", "dist_mask", "\n", "subset", "[", "ratio1", "<", "-", "1.5", "]", "=", "1", "\n", "\n", "(", "stg_x", ",", "stg_y", ")", "=", "np", ".", "unravel_index", "(", "np", ".", "argmin", "(", "subset", ")", ",", "subset", ".", "shape", ")", "\n", "\n", "if", "subset", "[", "stg_x", ",", "stg_y", "]", ">", "-", "0.0001", ":", "\n", "            ", "replan", "=", "True", "\n", "", "else", ":", "\n", "            ", "replan", "=", "False", "\n", "\n", "", "return", "(", "stg_x", "+", "state", "[", "0", "]", "-", "self", ".", "du", ")", "*", "scale", ",", "(", "stg_y", "+", "state", "[", "1", "]", "-", "self", ".", "du", ")", "*", "scale", ",", "replan", ",", "stop", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.fmm_planner.FMMPlanner._find_nearest_goal": [[117, 133], ["fmm_planner.FMMPlanner", "fmm_planner.FMMPlanner.set_goal", "dist_map.max", "numpy.unravel_index", "skimage.morphology.binary_dilation", "dist_map.argmin", "numpy.zeros", "skimage.morphology.disk"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.fmm_planner.FMMPlanner.set_goal"], ["", "def", "_find_nearest_goal", "(", "self", ",", "goal", ")", ":", "\n", "        ", "traversible", "=", "skimage", ".", "morphology", ".", "binary_dilation", "(", "\n", "np", ".", "zeros", "(", "self", ".", "traversible", ".", "shape", ")", ",", "\n", "skimage", ".", "morphology", ".", "disk", "(", "2", ")", ")", "!=", "True", "\n", "traversible", "=", "traversible", "*", "1.", "\n", "planner", "=", "FMMPlanner", "(", "traversible", ")", "\n", "planner", ".", "set_goal", "(", "goal", ")", "\n", "\n", "mask", "=", "self", ".", "traversible", "\n", "\n", "dist_map", "=", "planner", ".", "fmm_dist", "*", "mask", "\n", "dist_map", "[", "dist_map", "==", "0", "]", "=", "dist_map", ".", "max", "(", ")", "\n", "\n", "goal", "=", "np", ".", "unravel_index", "(", "dist_map", ".", "argmin", "(", ")", ",", "dist_map", ".", "shape", ")", "\n", "\n", "return", "goal", "\n", "", "", ""]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.fmm_planner.get_mask": [[8, 23], ["numpy.zeros", "range", "range", "int"], "function", ["None"], ["def", "get_mask", "(", "sx", ",", "sy", ",", "scale", ",", "step_size", ")", ":", "\n", "    ", "size", "=", "int", "(", "step_size", "//", "scale", ")", "*", "2", "+", "1", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "size", ",", "size", ")", ")", "\n", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "size", ")", ":", "\n", "            ", "if", "(", "(", "i", "+", "0.5", ")", "-", "(", "size", "//", "2", "+", "sx", ")", ")", "**", "2", "+", "(", "(", "j", "+", "0.5", ")", "-", "(", "size", "//", "2", "+", "sy", ")", ")", "**", "2", "<=", "step_size", "**", "2", "and", "(", "(", "i", "+", "0.5", ")", "-", "(", "size", "//", "2", "+", "sx", ")", ")", "**", "2", "+", "(", "(", "j", "+", "0.5", ")", "-", "(", "size", "//", "2", "+", "sy", ")", ")", "**", "2", ">", "(", "step_size", "-", "1", ")", "**", "2", ":", "\n", "                ", "mask", "[", "i", ",", "j", "]", "=", "1", "\n", "\n", "", "", "", "mask", "[", "size", "//", "2", ",", "size", "//", "2", "]", "=", "1", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.fmm_planner.get_dist": [[25, 37], ["range", "numpy.zeros", "range", "int", "max"], "function", ["None"], ["", "def", "get_dist", "(", "sx", ",", "sy", ",", "scale", ",", "step_size", ")", ":", "\n", "    ", "size", "=", "int", "(", "step_size", "//", "scale", ")", "*", "2", "+", "1", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "size", ",", "size", ")", ")", "+", "1e-10", "\n", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "size", ")", ":", "\n", "            ", "if", "(", "(", "i", "+", "0.5", ")", "-", "(", "size", "//", "2", "+", "sx", ")", ")", "**", "2", "+", "(", "(", "j", "+", "0.5", ")", "-", "(", "size", "//", "2", "+", "sy", ")", ")", "**", "2", "<=", "step_size", "**", "2", ":", "\n", "                ", "mask", "[", "i", ",", "j", "]", "=", "max", "(", "5", ",", "\n", "(", "(", "(", "i", "+", "0.5", ")", "-", "(", "size", "//", "2", "+", "sx", ")", ")", "**", "2", "+", "\n", "(", "(", "j", "+", "0.5", ")", "-", "(", "size", "//", "2", "+", "sy", ")", ")", "**", "2", ")", "**", "0.5", ")", "\n", "", "", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.pose.get_l2_distance": [[4, 9], ["None"], "function", ["None"], ["def", "get_l2_distance", "(", "x1", ",", "x2", ",", "y1", ",", "y2", ")", ":", "\n", "    ", "\"\"\"\n    Computes the L2 distance between two points.\n    \"\"\"", "\n", "return", "(", "(", "x1", "-", "x2", ")", "**", "2", "+", "(", "y1", "-", "y2", ")", "**", "2", ")", "**", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.pose.get_rel_pose_change": [[11, 22], ["pose.get_l2_distance", "numpy.arctan2", "numpy.cos", "numpy.sin"], "function", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.pose.get_l2_distance"], ["", "def", "get_rel_pose_change", "(", "pos2", ",", "pos1", ")", ":", "\n", "    ", "x1", ",", "y1", ",", "o1", "=", "pos1", "\n", "x2", ",", "y2", ",", "o2", "=", "pos2", "\n", "\n", "theta", "=", "np", ".", "arctan2", "(", "y2", "-", "y1", ",", "x2", "-", "x1", ")", "-", "o1", "\n", "dist", "=", "get_l2_distance", "(", "x1", ",", "x2", ",", "y1", ",", "y2", ")", "\n", "dx", "=", "dist", "*", "np", ".", "cos", "(", "theta", ")", "\n", "dy", "=", "dist", "*", "np", ".", "sin", "(", "theta", ")", "\n", "do", "=", "o2", "-", "o1", "\n", "\n", "return", "dx", ",", "dy", ",", "do", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.pose.get_new_pose": [[24, 37], ["numpy.rad2deg", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.deg2rad", "numpy.deg2rad", "numpy.deg2rad", "numpy.deg2rad"], "function", ["None"], ["", "def", "get_new_pose", "(", "pose", ",", "rel_pose_change", ")", ":", "\n", "    ", "x", ",", "y", ",", "o", "=", "pose", "\n", "dx", ",", "dy", ",", "do", "=", "rel_pose_change", "\n", "\n", "global_dx", "=", "dx", "*", "np", ".", "sin", "(", "np", ".", "deg2rad", "(", "o", ")", ")", "+", "dy", "*", "np", ".", "cos", "(", "np", ".", "deg2rad", "(", "o", ")", ")", "\n", "global_dy", "=", "dx", "*", "np", ".", "cos", "(", "np", ".", "deg2rad", "(", "o", ")", ")", "-", "dy", "*", "np", ".", "sin", "(", "np", ".", "deg2rad", "(", "o", ")", ")", "\n", "x", "+=", "global_dy", "\n", "y", "+=", "global_dx", "\n", "o", "+=", "np", ".", "rad2deg", "(", "do", ")", "\n", "if", "o", ">", "180.", ":", "\n", "        ", "o", "-=", "360.", "\n", "\n", "", "return", "x", ",", "y", ",", "o", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.pose.threshold_poses": [[39, 43], ["min", "min", "max", "max"], "function", ["None"], ["", "def", "threshold_poses", "(", "coords", ",", "shape", ")", ":", "\n", "    ", "coords", "[", "0", "]", "=", "min", "(", "max", "(", "0", ",", "coords", "[", "0", "]", ")", ",", "shape", "[", "0", "]", "-", "1", ")", "\n", "coords", "[", "1", "]", "=", "min", "(", "max", "(", "0", ",", "coords", "[", "1", "]", ")", ",", "shape", "[", "1", "]", "-", "1", ")", "\n", "return", "coords", "\n", "", ""]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.vector_env.VectorEnv.__init__": [[90, 149], ["len", "mp.get_context", "vector_env.VectorEnv._spawn_workers", "write_fn", "read_fn", "write_fn", "read_fn", "len"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.vector_env.ThreadedVectorEnv._spawn_workers"], ["def", "__init__", "(", "\n", "self", ",", "\n", "make_env_fn", ":", "Callable", "[", "...", ",", "Union", "[", "Env", ",", "RLEnv", "]", "]", "=", "_make_env_fn", ",", "\n", "env_fn_args", ":", "Sequence", "[", "Tuple", "]", "=", "None", ",", "\n", "auto_reset_done", ":", "bool", "=", "True", ",", "\n", "multiprocessing_start_method", ":", "str", "=", "\"forkserver\"", ",", "\n", ")", "->", "None", ":", "\n", "        ", "\"\"\"..\n\n        :param make_env_fn: function which creates a single environment. An\n            environment can be of type `env.Env` or `env.RLEnv`\n        :param env_fn_args: tuple of tuple of args to pass to the\n            `_make_env_fn`.\n        :param auto_reset_done: automatically reset the environment when\n            done. This functionality is provided for seamless training\n            of vectorized environments.\n        :param multiprocessing_start_method: the multiprocessing method used to\n            spawn worker processes. Valid methods are\n            :py:`{'spawn', 'forkserver', 'fork'}`; :py:`'forkserver'` is the\n            recommended method as it works well with CUDA. If :py:`'fork'` is\n            used, the subproccess  must be started before any other GPU useage.\n        \"\"\"", "\n", "self", ".", "_is_waiting", "=", "False", "\n", "self", ".", "_is_closed", "=", "True", "\n", "\n", "assert", "(", "\n", "env_fn_args", "is", "not", "None", "and", "len", "(", "env_fn_args", ")", ">", "0", "\n", ")", ",", "\"number of environments to be created should be greater than 0\"", "\n", "\n", "self", ".", "_num_envs", "=", "len", "(", "env_fn_args", ")", "\n", "\n", "assert", "multiprocessing_start_method", "in", "self", ".", "_valid_start_methods", ",", "(", "\n", "\"multiprocessing_start_method must be one of {}. Got '{}'\"", "\n", ")", ".", "format", "(", "self", ".", "_valid_start_methods", ",", "multiprocessing_start_method", ")", "\n", "self", ".", "_auto_reset_done", "=", "auto_reset_done", "\n", "self", ".", "_mp_ctx", "=", "mp", ".", "get_context", "(", "multiprocessing_start_method", ")", "\n", "self", ".", "_workers", "=", "[", "]", "\n", "(", "\n", "self", ".", "_connection_read_fns", ",", "\n", "self", ".", "_connection_write_fns", ",", "\n", ")", "=", "self", ".", "_spawn_workers", "(", "# noqa", "\n", "env_fn_args", ",", "make_env_fn", "\n", ")", "\n", "\n", "self", ".", "_is_closed", "=", "False", "\n", "\n", "for", "write_fn", "in", "self", ".", "_connection_write_fns", ":", "\n", "            ", "write_fn", "(", "(", "OBSERVATION_SPACE_COMMAND", ",", "None", ")", ")", "\n", "", "self", ".", "observation_spaces", "=", "[", "\n", "read_fn", "(", ")", "for", "read_fn", "in", "self", ".", "_connection_read_fns", "\n", "]", "\n", "for", "write_fn", "in", "self", ".", "_connection_write_fns", ":", "\n", "            ", "write_fn", "(", "(", "ACTION_SPACE_COMMAND", ",", "None", ")", ")", "\n", "", "self", ".", "action_spaces", "=", "[", "\n", "read_fn", "(", ")", "for", "read_fn", "in", "self", ".", "_connection_read_fns", "\n", "]", "\n", "self", ".", "observation_space", "=", "self", ".", "observation_spaces", "[", "0", "]", "\n", "self", ".", "action_space", "=", "self", ".", "action_spaces", "[", "0", "]", "\n", "self", ".", "_paused", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.vector_env.VectorEnv.num_envs": [[150, 155], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_envs", "(", "self", ")", ":", "\n", "        ", "r\"\"\"number of individual environments.\n        \"\"\"", "\n", "return", "self", ".", "_num_envs", "-", "len", "(", "self", ".", "_paused", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.vector_env.VectorEnv._worker_env": [[156, 247], ["env_fn", "parent_pipe.close", "connection_read_fn", "env_fn.close", "connection_read_fn", "child_pipe.close", "habitat.core.logging.logger.info", "isinstance", "isinstance", "env_fn.step", "connection_write_fn", "isinstance", "env_fn.reset", "connection_write_fn", "env_fn.reset", "env_fn.step", "connection_write_fn", "connection_write_fn", "env_fn.reset", "env_fn.render", "isinstance", "connection_write_fn", "connection_write_fn", "getattr", "connection_write_fn", "len", "getattr", "getattr", "env_fn.plan_act_and_preprocess", "connection_write_fn", "env_fn.reset", "connection_write_fn", "len", "connection_write_fn", "env_fn.get_metrics", "connection_write_fn"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.envs.__init__.VecPyTorch.close", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.envs.__init__.VecPyTorch.close", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.envs.__init__.VecPyTorch.close", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.objectgoal_env.ObjectGoal_Env.step", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.objectgoal_env.ObjectGoal_Env.reset", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.objectgoal_env.ObjectGoal_Env.reset", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.objectgoal_env.ObjectGoal_Env.step", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.objectgoal_env.ObjectGoal_Env.reset", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.vector_env.VectorEnv.render", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.envs.__init__.VecPyTorch.plan_act_and_preprocess", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.objectgoal_env.ObjectGoal_Env.reset", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.objectgoal_env.ObjectGoal_Env.get_metrics"], ["", "@", "staticmethod", "\n", "def", "_worker_env", "(", "\n", "connection_read_fn", ":", "Callable", ",", "\n", "connection_write_fn", ":", "Callable", ",", "\n", "env_fn", ":", "Callable", ",", "\n", "env_fn_args", ":", "Tuple", "[", "Any", "]", ",", "\n", "auto_reset_done", ":", "bool", ",", "\n", "child_pipe", ":", "Optional", "[", "Connection", "]", "=", "None", ",", "\n", "parent_pipe", ":", "Optional", "[", "Connection", "]", "=", "None", ",", "\n", ")", "->", "None", ":", "\n", "        ", "r\"\"\"process worker for creating and interacting with the environment.\n        \"\"\"", "\n", "env", "=", "env_fn", "(", "*", "env_fn_args", ")", "\n", "if", "parent_pipe", "is", "not", "None", ":", "\n", "            ", "parent_pipe", ".", "close", "(", ")", "\n", "", "try", ":", "\n", "            ", "command", ",", "data", "=", "connection_read_fn", "(", ")", "\n", "while", "command", "!=", "CLOSE_COMMAND", ":", "\n", "                ", "if", "command", "==", "STEP_COMMAND", ":", "\n", "# different step methods for habitat.RLEnv and habitat.Env", "\n", "                    ", "if", "isinstance", "(", "env", ",", "habitat", ".", "RLEnv", ")", "or", "isinstance", "(", "\n", "env", ",", "gym", ".", "Env", "\n", ")", ":", "\n", "# habitat.RLEnv", "\n", "                        ", "observations", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "**", "data", ")", "\n", "if", "auto_reset_done", "and", "done", ":", "\n", "                            ", "observations", ",", "info", "=", "env", ".", "reset", "(", ")", "\n", "", "connection_write_fn", "(", "(", "observations", ",", "reward", ",", "done", ",", "info", ")", ")", "\n", "", "elif", "isinstance", "(", "env", ",", "habitat", ".", "Env", ")", ":", "\n", "# habitat.Env", "\n", "                        ", "observations", "=", "env", ".", "step", "(", "**", "data", ")", "\n", "if", "auto_reset_done", "and", "env", ".", "episode_over", ":", "\n", "                            ", "observations", "=", "env", ".", "reset", "(", ")", "\n", "", "connection_write_fn", "(", "observations", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "NotImplementedError", "\n", "\n", "", "", "elif", "command", "==", "RESET_COMMAND", ":", "\n", "                    ", "observations", "=", "env", ".", "reset", "(", ")", "\n", "connection_write_fn", "(", "observations", ")", "\n", "\n", "", "elif", "command", "==", "RENDER_COMMAND", ":", "\n", "                    ", "connection_write_fn", "(", "env", ".", "render", "(", "*", "data", "[", "0", "]", ",", "**", "data", "[", "1", "]", ")", ")", "\n", "\n", "", "elif", "(", "\n", "command", "==", "OBSERVATION_SPACE_COMMAND", "\n", "or", "command", "==", "ACTION_SPACE_COMMAND", "\n", ")", ":", "\n", "                    ", "if", "isinstance", "(", "command", ",", "str", ")", ":", "\n", "                        ", "connection_write_fn", "(", "getattr", "(", "env", ",", "command", ")", ")", "\n", "\n", "", "", "elif", "command", "==", "CALL_COMMAND", ":", "\n", "                    ", "function_name", ",", "function_args", "=", "data", "\n", "if", "function_args", "is", "None", "or", "len", "(", "function_args", ")", "==", "0", ":", "\n", "                        ", "result", "=", "getattr", "(", "env", ",", "function_name", ")", "(", ")", "\n", "", "else", ":", "\n", "                        ", "result", "=", "getattr", "(", "env", ",", "function_name", ")", "(", "**", "function_args", ")", "\n", "", "connection_write_fn", "(", "result", ")", "\n", "\n", "# TODO: update CALL_COMMAND for getting attribute like this", "\n", "", "elif", "command", "==", "EPISODE_COMMAND", ":", "\n", "                    ", "connection_write_fn", "(", "env", ".", "current_episode", ")", "\n", "\n", "", "elif", "command", "==", "PLAN_ACT_AND_PREPROCESS", ":", "\n", "                    ", "observations", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "plan_act_and_preprocess", "(", "data", ")", "\n", "if", "auto_reset_done", "and", "done", ":", "\n", "                        ", "observations", ",", "info", "=", "env", ".", "reset", "(", ")", "\n", "", "connection_write_fn", "(", "(", "observations", ",", "reward", ",", "done", ",", "info", ")", ")", "\n", "\n", "", "elif", "command", "==", "COUNT_EPISODES_COMMAND", ":", "\n", "                    ", "connection_write_fn", "(", "len", "(", "env", ".", "episodes", ")", ")", "\n", "\n", "", "elif", "command", "==", "EPISODE_OVER", ":", "\n", "                    ", "connection_write_fn", "(", "env", ".", "episode_over", ")", "\n", "\n", "", "elif", "command", "==", "GET_METRICS", ":", "\n", "                    ", "result", "=", "env", ".", "get_metrics", "(", ")", "\n", "connection_write_fn", "(", "result", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "\n", "", "command", ",", "data", "=", "connection_read_fn", "(", ")", "\n", "\n", "", "if", "child_pipe", "is", "not", "None", ":", "\n", "                ", "child_pipe", ".", "close", "(", ")", "\n", "", "", "except", "KeyboardInterrupt", ":", "\n", "            ", "logger", ".", "info", "(", "\"Worker KeyboardInterrupt\"", ")", "\n", "", "finally", ":", "\n", "            ", "env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.vector_env.VectorEnv._spawn_workers": [[248, 279], ["zip", "zip", "vector_env.VectorEnv._mp_ctx.Process", "vector_env.VectorEnv._workers.append", "vector_env.VectorEnv.start", "worker_conn.close", "vector_env.VectorEnv._mp_ctx.Pipe", "range"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.envs.__init__.VecPyTorch.close"], ["", "", "def", "_spawn_workers", "(", "\n", "self", ",", "\n", "env_fn_args", ":", "Sequence", "[", "Tuple", "]", ",", "\n", "make_env_fn", ":", "Callable", "[", "...", ",", "Union", "[", "Env", ",", "RLEnv", "]", "]", "=", "_make_env_fn", ",", "\n", ")", "->", "Tuple", "[", "List", "[", "Callable", "[", "[", "]", ",", "Any", "]", "]", ",", "List", "[", "Callable", "[", "[", "Any", "]", ",", "None", "]", "]", "]", ":", "\n", "        ", "parent_connections", ",", "worker_connections", "=", "zip", "(", "\n", "*", "[", "self", ".", "_mp_ctx", ".", "Pipe", "(", "duplex", "=", "True", ")", "for", "_", "in", "range", "(", "self", ".", "_num_envs", ")", "]", "\n", ")", "\n", "self", ".", "_workers", "=", "[", "]", "\n", "for", "worker_conn", ",", "parent_conn", ",", "env_args", "in", "zip", "(", "\n", "worker_connections", ",", "parent_connections", ",", "env_fn_args", "\n", ")", ":", "\n", "            ", "ps", "=", "self", ".", "_mp_ctx", ".", "Process", "(", "\n", "target", "=", "self", ".", "_worker_env", ",", "\n", "args", "=", "(", "\n", "worker_conn", ".", "recv", ",", "\n", "worker_conn", ".", "send", ",", "\n", "make_env_fn", ",", "\n", "env_args", ",", "\n", "self", ".", "_auto_reset_done", ",", "\n", "worker_conn", ",", "\n", "parent_conn", ",", "\n", ")", ",", "\n", ")", "\n", "self", ".", "_workers", ".", "append", "(", "ps", ")", "\n", "ps", ".", "daemon", "=", "True", "\n", "ps", ".", "start", "(", ")", "\n", "worker_conn", ".", "close", "(", ")", "\n", "", "return", "(", "\n", "[", "p", ".", "recv", "for", "p", "in", "parent_connections", "]", ",", "\n", "[", "p", ".", "send", "for", "p", "in", "parent_connections", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.vector_env.VectorEnv.current_episodes": [[281, 290], ["write_fn", "results.append", "read_fn"], "methods", ["None"], ["", "def", "current_episodes", "(", "self", ")", ":", "\n", "        ", "self", ".", "_is_waiting", "=", "True", "\n", "for", "write_fn", "in", "self", ".", "_connection_write_fns", ":", "\n", "            ", "write_fn", "(", "(", "EPISODE_COMMAND", ",", "None", ")", ")", "\n", "", "results", "=", "[", "]", "\n", "for", "read_fn", "in", "self", ".", "_connection_read_fns", ":", "\n", "            ", "results", ".", "append", "(", "read_fn", "(", ")", ")", "\n", "", "self", ".", "_is_waiting", "=", "False", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.vector_env.VectorEnv.count_episodes": [[291, 300], ["write_fn", "results.append", "read_fn"], "methods", ["None"], ["", "def", "count_episodes", "(", "self", ")", ":", "\n", "        ", "self", ".", "_is_waiting", "=", "True", "\n", "for", "write_fn", "in", "self", ".", "_connection_write_fns", ":", "\n", "            ", "write_fn", "(", "(", "COUNT_EPISODES_COMMAND", ",", "None", ")", ")", "\n", "", "results", "=", "[", "]", "\n", "for", "read_fn", "in", "self", ".", "_connection_read_fns", ":", "\n", "            ", "results", ".", "append", "(", "read_fn", "(", ")", ")", "\n", "", "self", ".", "_is_waiting", "=", "False", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.vector_env.VectorEnv.episode_over": [[301, 310], ["write_fn", "results.append", "read_fn"], "methods", ["None"], ["", "def", "episode_over", "(", "self", ")", ":", "\n", "        ", "self", ".", "_is_waiting", "=", "True", "\n", "for", "write_fn", "in", "self", ".", "_connection_write_fns", ":", "\n", "            ", "write_fn", "(", "(", "EPISODE_OVER", ",", "None", ")", ")", "\n", "", "results", "=", "[", "]", "\n", "for", "read_fn", "in", "self", ".", "_connection_read_fns", ":", "\n", "            ", "results", ".", "append", "(", "read_fn", "(", ")", ")", "\n", "", "self", ".", "_is_waiting", "=", "False", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.vector_env.VectorEnv.get_metrics": [[311, 320], ["write_fn", "results.append", "read_fn"], "methods", ["None"], ["", "def", "get_metrics", "(", "self", ")", ":", "\n", "        ", "self", ".", "_is_waiting", "=", "True", "\n", "for", "write_fn", "in", "self", ".", "_connection_write_fns", ":", "\n", "            ", "write_fn", "(", "(", "GET_METRICS", ",", "None", ")", ")", "\n", "", "results", "=", "[", "]", "\n", "for", "read_fn", "in", "self", ".", "_connection_read_fns", ":", "\n", "            ", "results", ".", "append", "(", "read_fn", "(", ")", ")", "\n", "", "self", ".", "_is_waiting", "=", "False", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.vector_env.VectorEnv.reset": [[321, 336], ["zip", "write_fn", "results.append", "numpy.stack", "read_fn"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Reset all the vectorized environments\n\n        :return: list of outputs from the reset method of envs.\n        \"\"\"", "\n", "self", ".", "_is_waiting", "=", "True", "\n", "for", "write_fn", "in", "self", ".", "_connection_write_fns", ":", "\n", "            ", "write_fn", "(", "(", "RESET_COMMAND", ",", "None", ")", ")", "\n", "", "results", "=", "[", "]", "\n", "for", "read_fn", "in", "self", ".", "_connection_read_fns", ":", "\n", "            ", "results", ".", "append", "(", "read_fn", "(", ")", ")", "\n", "", "obs", ",", "infos", "=", "zip", "(", "*", "results", ")", "\n", "\n", "self", ".", "_is_waiting", "=", "False", "\n", "return", "np", ".", "stack", "(", "obs", ")", ",", "infos", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.vector_env.VectorEnv.reset_at": [[337, 348], ["None"], "methods", ["None"], ["", "def", "reset_at", "(", "self", ",", "index_env", ":", "int", ")", ":", "\n", "        ", "r\"\"\"Reset in the index_env environment in the vector.\n\n        :param index_env: index of the environment to be reset\n        :return: list containing the output of reset method of indexed env.\n        \"\"\"", "\n", "self", ".", "_is_waiting", "=", "True", "\n", "self", ".", "_connection_write_fns", "[", "index_env", "]", "(", "(", "RESET_COMMAND", ",", "None", ")", ")", "\n", "results", "=", "[", "self", ".", "_connection_read_fns", "[", "index_env", "]", "(", ")", "]", "\n", "self", ".", "_is_waiting", "=", "False", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.vector_env.VectorEnv.step_at": [[349, 361], ["None"], "methods", ["None"], ["", "def", "step_at", "(", "self", ",", "index_env", ":", "int", ",", "action", ":", "Dict", "[", "str", ",", "Any", "]", ")", ":", "\n", "        ", "r\"\"\"Step in the index_env environment in the vector.\n\n        :param index_env: index of the environment to be stepped into\n        :param action: action to be taken\n        :return: list containing the output of step method of indexed env.\n        \"\"\"", "\n", "self", ".", "_is_waiting", "=", "True", "\n", "self", ".", "_connection_write_fns", "[", "index_env", "]", "(", "(", "STEP_COMMAND", ",", "action", ")", ")", "\n", "results", "=", "[", "self", ".", "_connection_read_fns", "[", "index_env", "]", "(", ")", "]", "\n", "self", ".", "_is_waiting", "=", "False", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.vector_env.VectorEnv.step_async": [[362, 376], ["isinstance", "zip", "write_fn"], "methods", ["None"], ["", "def", "step_async", "(", "self", ",", "data", ":", "List", "[", "Union", "[", "int", ",", "str", ",", "Dict", "[", "str", ",", "Any", "]", "]", "]", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Asynchronously step in the environments.\n\n        :param data: list of size _num_envs containing keyword arguments to\n            pass to `step` method for each Environment. For example,\n            :py:`[{\"action\": \"TURN_LEFT\", \"action_args\": {...}}, ...]`.\n        \"\"\"", "\n", "# Backward compatibility", "\n", "if", "isinstance", "(", "data", "[", "0", "]", ",", "(", "int", ",", "np", ".", "integer", ",", "str", ")", ")", ":", "\n", "            ", "data", "=", "[", "{", "\"action\"", ":", "{", "\"action\"", ":", "action", "}", "}", "for", "action", "in", "data", "]", "\n", "\n", "", "self", ".", "_is_waiting", "=", "True", "\n", "for", "write_fn", ",", "args", "in", "zip", "(", "self", ".", "_connection_write_fns", ",", "data", ")", ":", "\n", "            ", "write_fn", "(", "(", "STEP_COMMAND", ",", "args", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.vector_env.VectorEnv.step_wait": [[377, 386], ["zip", "results.append", "numpy.stack", "numpy.stack", "numpy.stack", "read_fn"], "methods", ["None"], ["", "", "def", "step_wait", "(", "self", ")", "->", "List", "[", "Observations", "]", ":", "\n", "        ", "r\"\"\"Wait until all the asynchronized environments have synchronized.\n        \"\"\"", "\n", "results", "=", "[", "]", "\n", "for", "read_fn", "in", "self", ".", "_connection_read_fns", ":", "\n", "            ", "results", ".", "append", "(", "read_fn", "(", ")", ")", "\n", "", "self", ".", "_is_waiting", "=", "False", "\n", "obs", ",", "rews", ",", "dones", ",", "infos", "=", "zip", "(", "*", "results", ")", "\n", "return", "np", ".", "stack", "(", "obs", ")", ",", "np", ".", "stack", "(", "rews", ")", ",", "np", ".", "stack", "(", "dones", ")", ",", "infos", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.vector_env.VectorEnv.step": [[387, 397], ["vector_env.VectorEnv.step_async", "vector_env.VectorEnv.step_wait"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.envs.__init__.VecPyTorch.step_async", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.envs.__init__.VecPyTorch.step_wait"], ["", "def", "step", "(", "self", ",", "data", ":", "List", "[", "Union", "[", "int", ",", "str", ",", "Dict", "[", "str", ",", "Any", "]", "]", "]", ")", "->", "List", "[", "Any", "]", ":", "\n", "        ", "r\"\"\"Perform actions in the vectorized environments.\n\n        :param data: list of size _num_envs containing keyword arguments to\n            pass to `step` method for each Environment. For example,\n            :py:`[{\"action\": \"TURN_LEFT\", \"action_args\": {...}}, ...]`.\n        :return: list of outputs from the step method of envs.\n        \"\"\"", "\n", "self", ".", "step_async", "(", "data", ")", "\n", "return", "self", ".", "step_wait", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.vector_env.VectorEnv.close": [[398, 419], ["write_fn", "write_fn", "process.join", "process.join", "read_fn"], "methods", ["None"], ["", "def", "close", "(", "self", ")", "->", "None", ":", "\n", "        ", "if", "self", ".", "_is_closed", ":", "\n", "            ", "return", "\n", "\n", "", "if", "self", ".", "_is_waiting", ":", "\n", "            ", "for", "read_fn", "in", "self", ".", "_connection_read_fns", ":", "\n", "                ", "read_fn", "(", ")", "\n", "\n", "", "", "for", "write_fn", "in", "self", ".", "_connection_write_fns", ":", "\n", "            ", "write_fn", "(", "(", "CLOSE_COMMAND", ",", "None", ")", ")", "\n", "\n", "", "for", "_", ",", "_", ",", "write_fn", ",", "_", "in", "self", ".", "_paused", ":", "\n", "            ", "write_fn", "(", "(", "CLOSE_COMMAND", ",", "None", ")", ")", "\n", "\n", "", "for", "process", "in", "self", ".", "_workers", ":", "\n", "            ", "process", ".", "join", "(", ")", "\n", "\n", "", "for", "_", ",", "_", ",", "_", ",", "process", "in", "self", ".", "_paused", ":", "\n", "            ", "process", ".", "join", "(", ")", "\n", "\n", "", "self", ".", "_is_closed", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.vector_env.VectorEnv.pause_at": [[420, 437], ["vector_env.VectorEnv._connection_read_fns.pop", "vector_env.VectorEnv._connection_write_fns.pop", "vector_env.VectorEnv._workers.pop", "vector_env.VectorEnv._paused.append", "vector_env.VectorEnv."], "methods", ["None"], ["", "def", "pause_at", "(", "self", ",", "index", ":", "int", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Pauses computation on this env without destroying the env.\n\n        :param index: which env to pause. All indexes after this one will be\n            shifted down by one.\n\n        This is useful for not needing to call steps on all environments when\n        only some are active (for example during the last episodes of running\n        eval episodes).\n        \"\"\"", "\n", "if", "self", ".", "_is_waiting", ":", "\n", "            ", "for", "read_fn", "in", "self", ".", "_connection_read_fns", ":", "\n", "                ", "read_fn", "(", ")", "\n", "", "", "read_fn", "=", "self", ".", "_connection_read_fns", ".", "pop", "(", "index", ")", "\n", "write_fn", "=", "self", ".", "_connection_write_fns", ".", "pop", "(", "index", ")", "\n", "worker", "=", "self", ".", "_workers", ".", "pop", "(", "index", ")", "\n", "self", ".", "_paused", ".", "append", "(", "(", "index", ",", "read_fn", ",", "write_fn", ",", "worker", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.vector_env.VectorEnv.resume_all": [[438, 446], ["reversed", "vector_env.VectorEnv._connection_read_fns.insert", "vector_env.VectorEnv._connection_write_fns.insert", "vector_env.VectorEnv._workers.insert"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.GlobalRolloutStorage.insert", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.GlobalRolloutStorage.insert", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.GlobalRolloutStorage.insert"], ["", "def", "resume_all", "(", "self", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Resumes any paused envs.\n        \"\"\"", "\n", "for", "index", ",", "read_fn", ",", "write_fn", ",", "worker", "in", "reversed", "(", "self", ".", "_paused", ")", ":", "\n", "            ", "self", ".", "_connection_read_fns", ".", "insert", "(", "index", ",", "read_fn", ")", "\n", "self", ".", "_connection_write_fns", ".", "insert", "(", "index", ",", "write_fn", ")", "\n", "self", ".", "_workers", ".", "insert", "(", "index", ",", "worker", ")", "\n", "", "self", ".", "_paused", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.vector_env.VectorEnv.call_at": [[447, 468], ["None"], "methods", ["None"], ["", "def", "call_at", "(", "\n", "self", ",", "\n", "index", ":", "int", ",", "\n", "function_name", ":", "str", ",", "\n", "function_args", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", ",", "\n", ")", "->", "Any", ":", "\n", "        ", "r\"\"\"Calls a function (which is passed by name) on the selected env and\n        returns the result.\n\n        :param index: which env to call the function on.\n        :param function_name: the name of the function to call on the env.\n        :param function_args: optional function args.\n        :return: result of calling the function.\n        \"\"\"", "\n", "self", ".", "_is_waiting", "=", "True", "\n", "self", ".", "_connection_write_fns", "[", "index", "]", "(", "\n", "(", "CALL_COMMAND", ",", "(", "function_name", ",", "function_args", ")", ")", "\n", ")", "\n", "result", "=", "self", ".", "_connection_read_fns", "[", "index", "]", "(", ")", "\n", "self", ".", "_is_waiting", "=", "False", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.vector_env.VectorEnv.call": [[469, 497], ["zip", "zip", "len", "len", "write_fn", "results.append", "len", "read_fn"], "methods", ["None"], ["", "def", "call", "(", "\n", "self", ",", "\n", "function_names", ":", "List", "[", "str", "]", ",", "\n", "function_args_list", ":", "Optional", "[", "List", "[", "Any", "]", "]", "=", "None", ",", "\n", ")", "->", "List", "[", "Any", "]", ":", "\n", "        ", "r\"\"\"Calls a list of functions (which are passed by name) on the\n        corresponding env (by index).\n\n        :param function_names: the name of the functions to call on the envs.\n        :param function_args_list: list of function args for each function. If\n            provided, :py:`len(function_args_list)` should be as long as\n            :py:`len(function_names)`.\n        :return: result of calling the function.\n        \"\"\"", "\n", "self", ".", "_is_waiting", "=", "True", "\n", "if", "function_args_list", "is", "None", ":", "\n", "            ", "function_args_list", "=", "[", "None", "]", "*", "len", "(", "function_names", ")", "\n", "", "assert", "len", "(", "function_names", ")", "==", "len", "(", "function_args_list", ")", "\n", "func_args", "=", "zip", "(", "function_names", ",", "function_args_list", ")", "\n", "for", "write_fn", ",", "func_args_on", "in", "zip", "(", "\n", "self", ".", "_connection_write_fns", ",", "func_args", "\n", ")", ":", "\n", "            ", "write_fn", "(", "(", "CALL_COMMAND", ",", "func_args_on", ")", ")", "\n", "", "results", "=", "[", "]", "\n", "for", "read_fn", "in", "self", ".", "_connection_read_fns", ":", "\n", "            ", "results", ".", "append", "(", "read_fn", "(", ")", ")", "\n", "", "self", ".", "_is_waiting", "=", "False", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.vector_env.VectorEnv.render": [[498, 519], ["habitat.core.utils.tile_images", "write_fn", "read_fn", "try_cv2_import", "try_cv2_import.imshow", "try_cv2_import.waitKey"], "methods", ["None"], ["", "def", "render", "(", "\n", "self", ",", "mode", ":", "str", "=", "\"human\"", ",", "*", "args", ",", "**", "kwargs", "\n", ")", "->", "Union", "[", "np", ".", "ndarray", ",", "None", "]", ":", "\n", "        ", "r\"\"\"Render observations from all environments in a tiled image.\n        \"\"\"", "\n", "for", "write_fn", "in", "self", ".", "_connection_write_fns", ":", "\n", "            ", "write_fn", "(", "(", "RENDER_COMMAND", ",", "(", "args", ",", "{", "\"mode\"", ":", "\"rgb\"", ",", "**", "kwargs", "}", ")", ")", ")", "\n", "", "images", "=", "[", "read_fn", "(", ")", "for", "read_fn", "in", "self", ".", "_connection_read_fns", "]", "\n", "tile", "=", "tile_images", "(", "images", ")", "\n", "if", "mode", "==", "\"human\"", ":", "\n", "            ", "from", "habitat", ".", "core", ".", "utils", "import", "try_cv2_import", "\n", "\n", "cv2", "=", "try_cv2_import", "(", ")", "\n", "\n", "cv2", ".", "imshow", "(", "\"vecenv\"", ",", "tile", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "cv2", ".", "waitKey", "(", "1", ")", "\n", "return", "None", "\n", "", "elif", "mode", "==", "\"rgb_array\"", ":", "\n", "            ", "return", "tile", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.vector_env.VectorEnv.plan_act_and_preprocess": [[520, 531], ["vector_env.VectorEnv._assert_not_closed", "enumerate", "zip", "write_fn", "results.append", "numpy.stack", "numpy.stack", "numpy.stack", "read_fn"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.vector_env.VectorEnv._assert_not_closed"], ["", "", "def", "plan_act_and_preprocess", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "self", ".", "_assert_not_closed", "(", ")", "\n", "self", ".", "_is_waiting", "=", "True", "\n", "for", "e", ",", "write_fn", "in", "enumerate", "(", "self", ".", "_connection_write_fns", ")", ":", "\n", "            ", "write_fn", "(", "(", "PLAN_ACT_AND_PREPROCESS", ",", "inputs", "[", "e", "]", ")", ")", "\n", "", "results", "=", "[", "]", "\n", "for", "read_fn", "in", "self", ".", "_connection_read_fns", ":", "\n", "            ", "results", ".", "append", "(", "read_fn", "(", ")", ")", "\n", "", "obs", ",", "rews", ",", "dones", ",", "infos", "=", "zip", "(", "*", "results", ")", "\n", "self", ".", "_is_waiting", "=", "False", "\n", "return", "np", ".", "stack", "(", "obs", ")", ",", "np", ".", "stack", "(", "rews", ")", ",", "np", ".", "stack", "(", "dones", ")", ",", "infos", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.vector_env.VectorEnv._assert_not_closed": [[532, 534], ["None"], "methods", ["None"], ["", "def", "_assert_not_closed", "(", "self", ")", ":", "\n", "        ", "assert", "not", "self", ".", "_is_closed", ",", "\"Trying to operate on a SubprocVecEnv after calling close()\"", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.vector_env.VectorEnv._valid_start_methods": [[535, 538], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_valid_start_methods", "(", "self", ")", "->", "Set", "[", "str", "]", ":", "\n", "        ", "return", "{", "\"forkserver\"", ",", "\"spawn\"", ",", "\"fork\"", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.vector_env.VectorEnv.__del__": [[539, 541], ["vector_env.VectorEnv.close"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.envs.__init__.VecPyTorch.close"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.vector_env.VectorEnv.__enter__": [[542, 544], ["None"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.vector_env.VectorEnv.__exit__": [[545, 547], ["vector_env.VectorEnv.close"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.envs.__init__.VecPyTorch.close"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_val", ",", "exc_tb", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.vector_env.ThreadedVectorEnv._spawn_workers": [[558, 586], ["zip", "zip", "threading.Thread", "vector_env.ThreadedVectorEnv._workers.append", "threading.Thread.start", "queue.Queue", "queue.Queue", "range"], "methods", ["None"], ["def", "_spawn_workers", "(", "\n", "self", ",", "\n", "env_fn_args", ":", "Sequence", "[", "Tuple", "]", ",", "\n", "make_env_fn", ":", "Callable", "[", "...", ",", "Env", "]", "=", "_make_env_fn", ",", "\n", ")", "->", "Tuple", "[", "List", "[", "Callable", "[", "[", "]", ",", "Any", "]", "]", ",", "List", "[", "Callable", "[", "[", "Any", "]", ",", "None", "]", "]", "]", ":", "\n", "        ", "parent_read_queues", ",", "parent_write_queues", "=", "zip", "(", "\n", "*", "[", "(", "Queue", "(", ")", ",", "Queue", "(", ")", ")", "for", "_", "in", "range", "(", "self", ".", "_num_envs", ")", "]", "\n", ")", "\n", "self", ".", "_workers", "=", "[", "]", "\n", "for", "parent_read_queue", ",", "parent_write_queue", ",", "env_args", "in", "zip", "(", "\n", "parent_read_queues", ",", "parent_write_queues", ",", "env_fn_args", "\n", ")", ":", "\n", "            ", "thread", "=", "Thread", "(", "\n", "target", "=", "self", ".", "_worker_env", ",", "\n", "args", "=", "(", "\n", "parent_write_queue", ".", "get", ",", "\n", "parent_read_queue", ".", "put", ",", "\n", "make_env_fn", ",", "\n", "env_args", ",", "\n", "self", ".", "_auto_reset_done", ",", "\n", ")", ",", "\n", ")", "\n", "self", ".", "_workers", ".", "append", "(", "thread", ")", "\n", "thread", ".", "daemon", "=", "True", "\n", "thread", ".", "start", "(", ")", "\n", "", "return", "(", "\n", "[", "q", ".", "get", "for", "q", "in", "parent_read_queues", "]", ",", "\n", "[", "q", ".", "put", "for", "q", "in", "parent_write_queues", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.vector_env._make_env_fn": [[56, 69], ["habitat.core.env.Env", "habitat.core.env.Env.seed"], "function", ["None"], ["def", "_make_env_fn", "(", "\n", "config", ":", "Config", ",", "dataset", ":", "Optional", "[", "habitat", ".", "Dataset", "]", "=", "None", ",", "rank", ":", "int", "=", "0", "\n", ")", "->", "Env", ":", "\n", "    ", "\"\"\"Constructor for default habitat `env.Env`.\n\n    :param config: configuration for environment.\n    :param dataset: dataset for environment.\n    :param rank: rank for setting seed of environment\n    :return: `env.Env` / `env.RLEnv` object\n    \"\"\"", "\n", "habitat_env", "=", "Env", "(", "config", "=", "config", ",", "dataset", "=", "dataset", ")", "\n", "habitat_env", ".", "seed", "(", "config", ".", "SEED", "+", "rank", ")", "\n", "return", "habitat_env", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.agents.sem_exp.Sem_Exp_Env_Agent.__init__": [[23, 58], ["envs.habitat.objectgoal_env.ObjectGoal_Env.__init__", "torchvision.transforms.Compose", "agents.utils.semantic_prediction.SemanticPredMaskRCNN", "skimage.morphology.disk", "cv2.imread", "torchvision.transforms.ToPILImage", "torchvision.transforms.Resize"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.algo.ppo.PPO.__init__"], ["def", "__init__", "(", "self", ",", "args", ",", "rank", ",", "config_env", ",", "dataset", ")", ":", "\n", "\n", "        ", "self", ".", "args", "=", "args", "\n", "super", "(", ")", ".", "__init__", "(", "args", ",", "rank", ",", "config_env", ",", "dataset", ")", "\n", "\n", "# initialize transform for RGB observations", "\n", "self", ".", "res", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "Resize", "(", "(", "args", ".", "frame_height", ",", "args", ".", "frame_width", ")", ",", "\n", "interpolation", "=", "Image", ".", "NEAREST", ")", "]", ")", "\n", "\n", "# initialize semantic segmentation prediction model", "\n", "if", "args", ".", "sem_gpu_id", "==", "-", "1", ":", "\n", "            ", "args", ".", "sem_gpu_id", "=", "config_env", ".", "SIMULATOR", ".", "HABITAT_SIM_V0", ".", "GPU_DEVICE_ID", "\n", "\n", "", "self", ".", "sem_pred", "=", "SemanticPredMaskRCNN", "(", "args", ")", "\n", "\n", "# initializations for planning:", "\n", "self", ".", "selem", "=", "skimage", ".", "morphology", ".", "disk", "(", "3", ")", "\n", "\n", "self", ".", "obs", "=", "None", "\n", "self", ".", "obs_shape", "=", "None", "\n", "self", ".", "collision_map", "=", "None", "\n", "self", ".", "visited", "=", "None", "\n", "self", ".", "visited_vis", "=", "None", "\n", "self", ".", "col_width", "=", "None", "\n", "self", ".", "curr_loc", "=", "None", "\n", "self", ".", "last_loc", "=", "None", "\n", "self", ".", "last_action", "=", "None", "\n", "self", ".", "count_forward_actions", "=", "None", "\n", "\n", "if", "args", ".", "visualize", "or", "args", ".", "print_images", ":", "\n", "            ", "self", ".", "legend", "=", "cv2", ".", "imread", "(", "'docs/legend.png'", ")", "\n", "self", ".", "vis_image", "=", "None", "\n", "self", ".", "rgb_vis", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.agents.sem_exp.Sem_Exp_Env_Agent.reset": [[59, 83], ["super().reset", "sem_exp.Sem_Exp_Env_Agent._preprocess_obs", "numpy.zeros", "numpy.zeros", "numpy.zeros", "agents.init_vis_image"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.objectgoal_env.ObjectGoal_Env.reset", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.agents.sem_exp.Sem_Exp_Env_Agent._preprocess_obs", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.visualization.init_vis_image"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "args", "=", "self", ".", "args", "\n", "\n", "obs", ",", "info", "=", "super", "(", ")", ".", "reset", "(", ")", "\n", "obs", "=", "self", ".", "_preprocess_obs", "(", "obs", ")", "\n", "\n", "self", ".", "obs_shape", "=", "obs", ".", "shape", "\n", "\n", "# Episode initializations", "\n", "map_shape", "=", "(", "args", ".", "map_size_cm", "//", "args", ".", "map_resolution", ",", "\n", "args", ".", "map_size_cm", "//", "args", ".", "map_resolution", ")", "\n", "self", ".", "collision_map", "=", "np", ".", "zeros", "(", "map_shape", ")", "\n", "self", ".", "visited", "=", "np", ".", "zeros", "(", "map_shape", ")", "\n", "self", ".", "visited_vis", "=", "np", ".", "zeros", "(", "map_shape", ")", "\n", "self", ".", "col_width", "=", "1", "\n", "self", ".", "count_forward_actions", "=", "0", "\n", "self", ".", "curr_loc", "=", "[", "args", ".", "map_size_cm", "/", "100.0", "/", "2.0", ",", "\n", "args", ".", "map_size_cm", "/", "100.0", "/", "2.0", ",", "0.", "]", "\n", "self", ".", "last_action", "=", "None", "\n", "\n", "if", "args", ".", "visualize", "or", "args", ".", "print_images", ":", "\n", "            ", "self", ".", "vis_image", "=", "vu", ".", "init_vis_image", "(", "self", ".", "goal_name", ",", "self", ".", "legend", ")", "\n", "\n", "", "return", "obs", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.agents.sem_exp.Sem_Exp_Env_Agent.plan_act_and_preprocess": [[84, 140], ["sem_exp.Sem_Exp_Env_Agent._plan", "sem_exp.Sem_Exp_Env_Agent._visualize", "super().step", "sem_exp.Sem_Exp_Env_Agent._preprocess_obs", "numpy.zeros", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.agents.sem_exp.Sem_Exp_Env_Agent._plan", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.agents.sem_exp.Sem_Exp_Env_Agent._visualize", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.objectgoal_env.ObjectGoal_Env.step", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.agents.sem_exp.Sem_Exp_Env_Agent._preprocess_obs"], ["", "def", "plan_act_and_preprocess", "(", "self", ",", "planner_inputs", ")", ":", "\n", "        ", "\"\"\"Function responsible for planning, taking the action and\n        preprocessing observations\n\n        Args:\n            planner_inputs (dict):\n                dict with following keys:\n                    'map_pred'  (ndarray): (M, M) map prediction\n                    'goal'      (ndarray): (M, M) mat denoting goal locations\n                    'pose_pred' (ndarray): (7,) array denoting pose (x,y,o)\n                                 and planning window (gx1, gx2, gy1, gy2)\n                     'found_goal' (bool): whether the goal object is found\n\n        Returns:\n            obs (ndarray): preprocessed observations ((4+C) x H x W)\n            reward (float): amount of reward returned after previous action\n            done (bool): whether the episode has ended\n            info (dict): contains timestep, pose, goal category and\n                         evaluation metric info\n        \"\"\"", "\n", "\n", "# plan", "\n", "if", "planner_inputs", "[", "\"wait\"", "]", ":", "\n", "            ", "self", ".", "last_action", "=", "None", "\n", "self", ".", "info", "[", "\"sensor_pose\"", "]", "=", "[", "0.", ",", "0.", ",", "0.", "]", "\n", "return", "np", ".", "zeros", "(", "self", ".", "obs", ".", "shape", ")", ",", "0.", ",", "False", ",", "self", ".", "info", "\n", "\n", "# Reset reward if new long-term goal", "\n", "", "if", "planner_inputs", "[", "\"new_goal\"", "]", ":", "\n", "            ", "self", ".", "info", "[", "\"g_reward\"", "]", "=", "0", "\n", "\n", "", "action", "=", "self", ".", "_plan", "(", "planner_inputs", ")", "\n", "\n", "if", "self", ".", "args", ".", "visualize", "or", "self", ".", "args", ".", "print_images", ":", "\n", "            ", "self", ".", "_visualize", "(", "planner_inputs", ")", "\n", "\n", "", "if", "action", ">=", "0", ":", "\n", "\n", "# act", "\n", "            ", "action", "=", "{", "'action'", ":", "action", "}", "\n", "obs", ",", "rew", ",", "done", ",", "info", "=", "super", "(", ")", ".", "step", "(", "action", ")", "\n", "\n", "# preprocess obs", "\n", "obs", "=", "self", ".", "_preprocess_obs", "(", "obs", ")", "\n", "self", ".", "last_action", "=", "action", "[", "'action'", "]", "\n", "self", ".", "obs", "=", "obs", "\n", "self", ".", "info", "=", "info", "\n", "\n", "info", "[", "'g_reward'", "]", "+=", "rew", "\n", "\n", "return", "obs", ",", "rew", ",", "done", ",", "info", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "last_action", "=", "None", "\n", "self", ".", "info", "[", "\"sensor_pose\"", "]", "=", "[", "0.", ",", "0.", ",", "0.", "]", "\n", "return", "np", ".", "zeros", "(", "self", ".", "obs_shape", ")", ",", "0.", ",", "False", ",", "self", ".", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.agents.sem_exp.Sem_Exp_Env_Agent._plan": [[141, 251], ["numpy.rint", "envs.threshold_poses", "sem_exp.Sem_Exp_Env_Agent._get_stg", "int", "int", "int", "int", "int", "int", "envs.threshold_poses", "agents.draw_line", "envs.get_l2_distance", "numpy.copy", "math.degrees", "int", "int", "min", "range", "math.atan2", "abs", "abs", "range", "envs.threshold_poses", "int", "int", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.cos", "numpy.deg2rad", "numpy.deg2rad", "numpy.deg2rad", "numpy.deg2rad"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.pose.threshold_poses", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.agents.sem_exp.Sem_Exp_Env_Agent._get_stg", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.pose.threshold_poses", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.visualization.draw_line", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.pose.get_l2_distance", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.pose.threshold_poses"], ["", "", "def", "_plan", "(", "self", ",", "planner_inputs", ")", ":", "\n", "        ", "\"\"\"Function responsible for planning\n\n        Args:\n            planner_inputs (dict):\n                dict with following keys:\n                    'map_pred'  (ndarray): (M, M) map prediction\n                    'goal'      (ndarray): (M, M) goal locations\n                    'pose_pred' (ndarray): (7,) array  denoting pose (x,y,o)\n                                 and planning window (gx1, gx2, gy1, gy2)\n                    'found_goal' (bool): whether the goal object is found\n\n        Returns:\n            action (int): action id\n        \"\"\"", "\n", "args", "=", "self", ".", "args", "\n", "\n", "self", ".", "last_loc", "=", "self", ".", "curr_loc", "\n", "\n", "# Get Map prediction", "\n", "map_pred", "=", "np", ".", "rint", "(", "planner_inputs", "[", "'map_pred'", "]", ")", "\n", "goal", "=", "planner_inputs", "[", "'goal'", "]", "\n", "\n", "# Get pose prediction and global policy planning window", "\n", "start_x", ",", "start_y", ",", "start_o", ",", "gx1", ",", "gx2", ",", "gy1", ",", "gy2", "=", "planner_inputs", "[", "'pose_pred'", "]", "\n", "gx1", ",", "gx2", ",", "gy1", ",", "gy2", "=", "int", "(", "gx1", ")", ",", "int", "(", "gx2", ")", ",", "int", "(", "gy1", ")", ",", "int", "(", "gy2", ")", "\n", "planning_window", "=", "[", "gx1", ",", "gx2", ",", "gy1", ",", "gy2", "]", "\n", "\n", "# Get curr loc", "\n", "self", ".", "curr_loc", "=", "[", "start_x", ",", "start_y", ",", "start_o", "]", "\n", "r", ",", "c", "=", "start_y", ",", "start_x", "\n", "start", "=", "[", "int", "(", "r", "*", "100.0", "/", "args", ".", "map_resolution", "-", "gx1", ")", ",", "\n", "int", "(", "c", "*", "100.0", "/", "args", ".", "map_resolution", "-", "gy1", ")", "]", "\n", "start", "=", "pu", ".", "threshold_poses", "(", "start", ",", "map_pred", ".", "shape", ")", "\n", "\n", "self", ".", "visited", "[", "gx1", ":", "gx2", ",", "gy1", ":", "gy2", "]", "[", "start", "[", "0", "]", "-", "0", ":", "start", "[", "0", "]", "+", "1", ",", "\n", "start", "[", "1", "]", "-", "0", ":", "start", "[", "1", "]", "+", "1", "]", "=", "1", "\n", "\n", "if", "args", ".", "visualize", "or", "args", ".", "print_images", ":", "\n", "# Get last loc", "\n", "            ", "last_start_x", ",", "last_start_y", "=", "self", ".", "last_loc", "[", "0", "]", ",", "self", ".", "last_loc", "[", "1", "]", "\n", "r", ",", "c", "=", "last_start_y", ",", "last_start_x", "\n", "last_start", "=", "[", "int", "(", "r", "*", "100.0", "/", "args", ".", "map_resolution", "-", "gx1", ")", ",", "\n", "int", "(", "c", "*", "100.0", "/", "args", ".", "map_resolution", "-", "gy1", ")", "]", "\n", "last_start", "=", "pu", ".", "threshold_poses", "(", "last_start", ",", "map_pred", ".", "shape", ")", "\n", "self", ".", "visited_vis", "[", "gx1", ":", "gx2", ",", "gy1", ":", "gy2", "]", "=", "vu", ".", "draw_line", "(", "last_start", ",", "start", ",", "\n", "self", ".", "visited_vis", "[", "gx1", ":", "gx2", ",", "gy1", ":", "gy2", "]", ")", "\n", "\n", "# Collision check", "\n", "", "if", "self", ".", "last_action", "==", "1", ":", "\n", "            ", "x1", ",", "y1", ",", "t1", "=", "self", ".", "last_loc", "\n", "x2", ",", "y2", ",", "_", "=", "self", ".", "curr_loc", "\n", "buf", "=", "4", "\n", "length", "=", "2", "\n", "\n", "if", "abs", "(", "x1", "-", "x2", ")", "<", "0.05", "and", "abs", "(", "y1", "-", "y2", ")", "<", "0.05", ":", "\n", "                ", "self", ".", "col_width", "+=", "2", "\n", "if", "self", ".", "col_width", "==", "7", ":", "\n", "                    ", "length", "=", "4", "\n", "buf", "=", "3", "\n", "", "self", ".", "col_width", "=", "min", "(", "self", ".", "col_width", ",", "5", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "col_width", "=", "1", "\n", "\n", "", "dist", "=", "pu", ".", "get_l2_distance", "(", "x1", ",", "x2", ",", "y1", ",", "y2", ")", "\n", "if", "dist", "<", "args", ".", "collision_threshold", ":", "# Collision", "\n", "                ", "width", "=", "self", ".", "col_width", "\n", "for", "i", "in", "range", "(", "length", ")", ":", "\n", "                    ", "for", "j", "in", "range", "(", "width", ")", ":", "\n", "                        ", "wx", "=", "x1", "+", "0.05", "*", "(", "(", "i", "+", "buf", ")", "*", "np", ".", "cos", "(", "np", ".", "deg2rad", "(", "t1", ")", ")", "\n", "+", "(", "j", "-", "width", "//", "2", ")", "*", "np", ".", "sin", "(", "np", ".", "deg2rad", "(", "t1", ")", ")", ")", "\n", "wy", "=", "y1", "+", "0.05", "*", "(", "(", "i", "+", "buf", ")", "*", "np", ".", "sin", "(", "np", ".", "deg2rad", "(", "t1", ")", ")", "\n", "-", "(", "j", "-", "width", "//", "2", ")", "*", "np", ".", "cos", "(", "np", ".", "deg2rad", "(", "t1", ")", ")", ")", "\n", "r", ",", "c", "=", "wy", ",", "wx", "\n", "r", ",", "c", "=", "int", "(", "r", "*", "100", "/", "args", ".", "map_resolution", ")", ",", "int", "(", "c", "*", "100", "/", "args", ".", "map_resolution", ")", "\n", "[", "r", ",", "c", "]", "=", "pu", ".", "threshold_poses", "(", "[", "r", ",", "c", "]", ",", "\n", "self", ".", "collision_map", ".", "shape", ")", "\n", "self", ".", "collision_map", "[", "r", ",", "c", "]", "=", "1", "\n", "\n", "", "", "", "", "stg", ",", "stop", "=", "self", ".", "_get_stg", "(", "map_pred", ",", "start", ",", "np", ".", "copy", "(", "goal", ")", ",", "\n", "planning_window", ")", "\n", "\n", "# Deterministic Local Policy", "\n", "if", "stop", "and", "planner_inputs", "[", "'found_goal'", "]", "==", "1", ":", "\n", "            ", "action", "=", "0", "# Stop", "\n", "", "else", ":", "\n", "            ", "(", "stg_x", ",", "stg_y", ")", "=", "stg", "\n", "angle_st_goal", "=", "math", ".", "degrees", "(", "math", ".", "atan2", "(", "stg_x", "-", "start", "[", "0", "]", ",", "\n", "stg_y", "-", "start", "[", "1", "]", ")", ")", "\n", "angle_agent", "=", "(", "start_o", ")", "%", "360.0", "\n", "if", "angle_agent", ">", "180", ":", "\n", "                ", "angle_agent", "-=", "360", "\n", "\n", "", "relative_angle", "=", "(", "angle_agent", "-", "angle_st_goal", ")", "%", "360.0", "\n", "if", "relative_angle", ">", "180", ":", "\n", "                ", "relative_angle", "-=", "360", "\n", "\n", "", "if", "relative_angle", ">", "self", ".", "args", ".", "turn_angle", "/", "2.", ":", "\n", "                ", "action", "=", "3", "# Right", "\n", "", "elif", "relative_angle", "<", "-", "self", ".", "args", ".", "turn_angle", "/", "2.", ":", "\n", "                ", "action", "=", "2", "# Left", "\n", "", "else", ":", "\n", "                ", "action", "=", "1", "# Forward", "\n", "\n", "", "", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.agents.sem_exp.Sem_Exp_Env_Agent._get_stg": [[252, 292], ["sem_exp.Sem_Exp_Env_Agent._get_stg.add_boundary"], "methods", ["None"], ["", "def", "_get_stg", "(", "self", ",", "grid", ",", "start", ",", "goal", ",", "planning_window", ")", ":", "\n", "        ", "\"\"\"Get short-term goal\"\"\"", "\n", "\n", "[", "gx1", ",", "gx2", ",", "gy1", ",", "gy2", "]", "=", "planning_window", "\n", "\n", "x1", ",", "y1", ",", "=", "0", ",", "0", "\n", "x2", ",", "y2", "=", "grid", ".", "shape", "\n", "\n", "def", "add_boundary", "(", "mat", ",", "value", "=", "1", ")", ":", "\n", "            ", "h", ",", "w", "=", "mat", ".", "shape", "\n", "new_mat", "=", "np", ".", "zeros", "(", "(", "h", "+", "2", ",", "w", "+", "2", ")", ")", "+", "value", "\n", "new_mat", "[", "1", ":", "h", "+", "1", ",", "1", ":", "w", "+", "1", "]", "=", "mat", "\n", "return", "new_mat", "\n", "\n", "", "traversible", "=", "skimage", ".", "morphology", ".", "binary_dilation", "(", "\n", "grid", "[", "x1", ":", "x2", ",", "y1", ":", "y2", "]", ",", "\n", "self", ".", "selem", ")", "!=", "True", "\n", "traversible", "[", "self", ".", "collision_map", "[", "gx1", ":", "gx2", ",", "gy1", ":", "gy2", "]", "\n", "[", "x1", ":", "x2", ",", "y1", ":", "y2", "]", "==", "1", "]", "=", "0", "\n", "traversible", "[", "self", ".", "visited", "[", "gx1", ":", "gx2", ",", "gy1", ":", "gy2", "]", "[", "x1", ":", "x2", ",", "y1", ":", "y2", "]", "==", "1", "]", "=", "1", "\n", "\n", "traversible", "[", "int", "(", "start", "[", "0", "]", "-", "x1", ")", "-", "1", ":", "int", "(", "start", "[", "0", "]", "-", "x1", ")", "+", "2", ",", "\n", "int", "(", "start", "[", "1", "]", "-", "y1", ")", "-", "1", ":", "int", "(", "start", "[", "1", "]", "-", "y1", ")", "+", "2", "]", "=", "1", "\n", "\n", "traversible", "=", "add_boundary", "(", "traversible", ")", "\n", "goal", "=", "add_boundary", "(", "goal", ",", "value", "=", "0", ")", "\n", "\n", "planner", "=", "FMMPlanner", "(", "traversible", ")", "\n", "selem", "=", "skimage", ".", "morphology", ".", "disk", "(", "10", ")", "\n", "goal", "=", "skimage", ".", "morphology", ".", "binary_dilation", "(", "\n", "goal", ",", "selem", ")", "!=", "True", "\n", "goal", "=", "1", "-", "goal", "*", "1.", "\n", "planner", ".", "set_multi_goal", "(", "goal", ")", "\n", "\n", "state", "=", "[", "start", "[", "0", "]", "-", "x1", "+", "1", ",", "start", "[", "1", "]", "-", "y1", "+", "1", "]", "\n", "stg_x", ",", "stg_y", ",", "_", ",", "stop", "=", "planner", ".", "get_short_term_goal", "(", "state", ")", "\n", "\n", "stg_x", ",", "stg_y", "=", "stg_x", "+", "x1", "-", "1", ",", "stg_y", "+", "y1", "-", "1", "\n", "\n", "return", "(", "stg_x", ",", "stg_y", ")", ",", "stop", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.agents.sem_exp.Sem_Exp_Env_Agent._preprocess_obs": [[293, 314], ["obs.transpose.transpose.transpose", "sem_exp.Sem_Exp_Env_Agent._get_sem_pred", "sem_exp.Sem_Exp_Env_Agent._preprocess_depth", "numpy.expand_dims", "numpy.concatenate().transpose", "numpy.asarray.astype", "numpy.asarray", "sem_exp.Sem_Exp_Env_Agent.res", "numpy.concatenate", "numpy.asarray.astype"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.agents.sem_exp.Sem_Exp_Env_Agent._get_sem_pred", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.agents.sem_exp.Sem_Exp_Env_Agent._preprocess_depth"], ["", "def", "_preprocess_obs", "(", "self", ",", "obs", ",", "use_seg", "=", "True", ")", ":", "\n", "        ", "args", "=", "self", ".", "args", "\n", "obs", "=", "obs", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "rgb", "=", "obs", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "depth", "=", "obs", "[", ":", ",", ":", ",", "3", ":", "4", "]", "\n", "\n", "sem_seg_pred", "=", "self", ".", "_get_sem_pred", "(", "\n", "rgb", ".", "astype", "(", "np", ".", "uint8", ")", ",", "use_seg", "=", "use_seg", ")", "\n", "depth", "=", "self", ".", "_preprocess_depth", "(", "depth", ",", "args", ".", "min_depth", ",", "args", ".", "max_depth", ")", "\n", "\n", "ds", "=", "args", ".", "env_frame_width", "//", "args", ".", "frame_width", "# Downscaling factor", "\n", "if", "ds", "!=", "1", ":", "\n", "            ", "rgb", "=", "np", ".", "asarray", "(", "self", ".", "res", "(", "rgb", ".", "astype", "(", "np", ".", "uint8", ")", ")", ")", "\n", "depth", "=", "depth", "[", "ds", "//", "2", ":", ":", "ds", ",", "ds", "//", "2", ":", ":", "ds", "]", "\n", "sem_seg_pred", "=", "sem_seg_pred", "[", "ds", "//", "2", ":", ":", "ds", ",", "ds", "//", "2", ":", ":", "ds", "]", "\n", "\n", "", "depth", "=", "np", ".", "expand_dims", "(", "depth", ",", "axis", "=", "2", ")", "\n", "state", "=", "np", ".", "concatenate", "(", "(", "rgb", ",", "depth", ",", "sem_seg_pred", ")", ",", "\n", "axis", "=", "2", ")", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.agents.sem_exp.Sem_Exp_Env_Agent._preprocess_depth": [[315, 328], ["range", "depth[].max"], "methods", ["None"], ["", "def", "_preprocess_depth", "(", "self", ",", "depth", ",", "min_d", ",", "max_d", ")", ":", "\n", "        ", "depth", "=", "depth", "[", ":", ",", ":", ",", "0", "]", "*", "1", "\n", "\n", "for", "i", "in", "range", "(", "depth", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "depth", "[", ":", ",", "i", "]", "[", "depth", "[", ":", ",", "i", "]", "==", "0.", "]", "=", "depth", "[", ":", ",", "i", "]", ".", "max", "(", ")", "\n", "\n", "", "mask2", "=", "depth", ">", "0.99", "\n", "depth", "[", "mask2", "]", "=", "0.", "\n", "\n", "mask1", "=", "depth", "==", "0", "\n", "depth", "[", "mask1", "]", "=", "100.0", "\n", "depth", "=", "min_d", "*", "100.0", "+", "depth", "*", "max_d", "*", "100.0", "\n", "return", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.agents.sem_exp.Sem_Exp_Env_Agent._get_sem_pred": [[329, 337], ["sem_exp.Sem_Exp_Env_Agent.sem_pred.get_prediction", "numpy.zeros.astype", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.semantic_prediction.SemanticPredMaskRCNN.get_prediction"], ["", "def", "_get_sem_pred", "(", "self", ",", "rgb", ",", "use_seg", "=", "True", ")", ":", "\n", "        ", "if", "use_seg", ":", "\n", "            ", "semantic_pred", ",", "self", ".", "rgb_vis", "=", "self", ".", "sem_pred", ".", "get_prediction", "(", "rgb", ")", "\n", "semantic_pred", "=", "semantic_pred", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "            ", "semantic_pred", "=", "np", ".", "zeros", "(", "(", "rgb", ".", "shape", "[", "0", "]", ",", "rgb", ".", "shape", "[", "1", "]", ",", "16", ")", ")", "\n", "self", ".", "rgb_vis", "=", "rgb", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "", "return", "semantic_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.agents.sem_exp.Sem_Exp_Env_Agent._visualize": [[338, 417], ["numpy.logical_and", "numpy.logical_and", "skimage.morphology.disk", "PIL.Image.new", "cv2.resize.putpalette", "cv2.resize.putdata", "cv2.resize.convert", "numpy.flipud", "cv2.resize", "agents.get_contour_points", "cv2.drawContours", "os.path.exists", "os.makedirs", "int", "int", "int", "int", "numpy.rint", "numpy.rint", "int", "sem_map.flatten().astype", "numpy.deg2rad", "int", "int", "int", "cv2.imshow", "cv2.waitKey", "cv2.imwrite", "skimage.morphology.binary_dilation", "sem_map.flatten"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.visualization.get_contour_points"], ["", "def", "_visualize", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "args", "=", "self", ".", "args", "\n", "dump_dir", "=", "\"{}/dump/{}/\"", ".", "format", "(", "args", ".", "dump_location", ",", "\n", "args", ".", "exp_name", ")", "\n", "ep_dir", "=", "'{}/episodes/thread_{}/eps_{}/'", ".", "format", "(", "\n", "dump_dir", ",", "self", ".", "rank", ",", "self", ".", "episode_no", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "ep_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "ep_dir", ")", "\n", "\n", "", "map_pred", "=", "inputs", "[", "'map_pred'", "]", "\n", "exp_pred", "=", "inputs", "[", "'exp_pred'", "]", "\n", "start_x", ",", "start_y", ",", "start_o", ",", "gx1", ",", "gx2", ",", "gy1", ",", "gy2", "=", "inputs", "[", "'pose_pred'", "]", "\n", "\n", "goal", "=", "inputs", "[", "'goal'", "]", "\n", "sem_map", "=", "inputs", "[", "'sem_map_pred'", "]", "\n", "\n", "gx1", ",", "gx2", ",", "gy1", ",", "gy2", "=", "int", "(", "gx1", ")", ",", "int", "(", "gx2", ")", ",", "int", "(", "gy1", ")", ",", "int", "(", "gy2", ")", "\n", "\n", "sem_map", "+=", "5", "\n", "\n", "no_cat_mask", "=", "sem_map", "==", "20", "\n", "map_mask", "=", "np", ".", "rint", "(", "map_pred", ")", "==", "1", "\n", "exp_mask", "=", "np", ".", "rint", "(", "exp_pred", ")", "==", "1", "\n", "vis_mask", "=", "self", ".", "visited_vis", "[", "gx1", ":", "gx2", ",", "gy1", ":", "gy2", "]", "==", "1", "\n", "\n", "sem_map", "[", "no_cat_mask", "]", "=", "0", "\n", "m1", "=", "np", ".", "logical_and", "(", "no_cat_mask", ",", "exp_mask", ")", "\n", "sem_map", "[", "m1", "]", "=", "2", "\n", "\n", "m2", "=", "np", ".", "logical_and", "(", "no_cat_mask", ",", "map_mask", ")", "\n", "sem_map", "[", "m2", "]", "=", "1", "\n", "\n", "sem_map", "[", "vis_mask", "]", "=", "3", "\n", "\n", "selem", "=", "skimage", ".", "morphology", ".", "disk", "(", "4", ")", "\n", "goal_mat", "=", "1", "-", "skimage", ".", "morphology", ".", "binary_dilation", "(", "\n", "goal", ",", "selem", ")", "!=", "True", "\n", "\n", "goal_mask", "=", "goal_mat", "==", "1", "\n", "sem_map", "[", "goal_mask", "]", "=", "4", "\n", "\n", "color_pal", "=", "[", "int", "(", "x", "*", "255.", ")", "for", "x", "in", "color_palette", "]", "\n", "sem_map_vis", "=", "Image", ".", "new", "(", "\"P\"", ",", "(", "sem_map", ".", "shape", "[", "1", "]", ",", "\n", "sem_map", ".", "shape", "[", "0", "]", ")", ")", "\n", "sem_map_vis", ".", "putpalette", "(", "color_pal", ")", "\n", "sem_map_vis", ".", "putdata", "(", "sem_map", ".", "flatten", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "sem_map_vis", "=", "sem_map_vis", ".", "convert", "(", "\"RGB\"", ")", "\n", "sem_map_vis", "=", "np", ".", "flipud", "(", "sem_map_vis", ")", "\n", "\n", "sem_map_vis", "=", "sem_map_vis", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "sem_map_vis", "=", "cv2", ".", "resize", "(", "sem_map_vis", ",", "(", "480", ",", "480", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "self", ".", "vis_image", "[", "50", ":", "530", ",", "15", ":", "655", "]", "=", "self", ".", "rgb_vis", "\n", "self", ".", "vis_image", "[", "50", ":", "530", ",", "670", ":", "1150", "]", "=", "sem_map_vis", "\n", "\n", "pos", "=", "(", "\n", "(", "start_x", "*", "100.", "/", "args", ".", "map_resolution", "-", "gy1", ")", "\n", "*", "480", "/", "map_pred", ".", "shape", "[", "0", "]", ",", "\n", "(", "map_pred", ".", "shape", "[", "1", "]", "-", "start_y", "*", "100.", "/", "args", ".", "map_resolution", "+", "gx1", ")", "\n", "*", "480", "/", "map_pred", ".", "shape", "[", "1", "]", ",", "\n", "np", ".", "deg2rad", "(", "-", "start_o", ")", "\n", ")", "\n", "\n", "agent_arrow", "=", "vu", ".", "get_contour_points", "(", "pos", ",", "origin", "=", "(", "670", ",", "50", ")", ")", "\n", "color", "=", "(", "int", "(", "color_palette", "[", "11", "]", "*", "255", ")", ",", "\n", "int", "(", "color_palette", "[", "10", "]", "*", "255", ")", ",", "\n", "int", "(", "color_palette", "[", "9", "]", "*", "255", ")", ")", "\n", "cv2", ".", "drawContours", "(", "self", ".", "vis_image", ",", "[", "agent_arrow", "]", ",", "0", ",", "color", ",", "-", "1", ")", "\n", "\n", "if", "args", ".", "visualize", ":", "\n", "# Displaying the image", "\n", "            ", "cv2", ".", "imshow", "(", "\"Thread {}\"", ".", "format", "(", "self", ".", "rank", ")", ",", "self", ".", "vis_image", ")", "\n", "cv2", ".", "waitKey", "(", "1", ")", "\n", "\n", "", "if", "args", ".", "print_images", ":", "\n", "            ", "fn", "=", "'{}/episodes/thread_{}/eps_{}/{}-{}-Vis-{}.png'", ".", "format", "(", "\n", "dump_dir", ",", "self", ".", "rank", ",", "self", ".", "episode_no", ",", "\n", "self", ".", "rank", ",", "self", ".", "episode_no", ",", "self", ".", "timestep", ")", "\n", "cv2", ".", "imwrite", "(", "fn", ",", "self", ".", "vis_image", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.envs.__init__.VecPyTorch.__init__": [[16, 22], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "venv", ",", "device", ")", ":", "\n", "        ", "self", ".", "venv", "=", "venv", "\n", "self", ".", "num_envs", "=", "venv", ".", "num_envs", "\n", "self", ".", "observation_space", "=", "venv", ".", "observation_space", "\n", "self", ".", "action_space", "=", "venv", ".", "action_space", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.envs.__init__.VecPyTorch.reset": [[23, 27], ["__init__.VecPyTorch.venv.reset", "torch.from_numpy().float().to", "torch.from_numpy().float", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.objectgoal_env.ObjectGoal_Env.reset", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "obs", ",", "info", "=", "self", ".", "venv", ".", "reset", "(", ")", "\n", "obs", "=", "torch", ".", "from_numpy", "(", "obs", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "return", "obs", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.envs.__init__.VecPyTorch.step_async": [[28, 31], ["actions.cpu().numpy.cpu().numpy.cpu().numpy", "__init__.VecPyTorch.venv.step_async", "actions.cpu().numpy.cpu().numpy.cpu"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.envs.__init__.VecPyTorch.step_async"], ["", "def", "step_async", "(", "self", ",", "actions", ")", ":", "\n", "        ", "actions", "=", "actions", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "self", ".", "venv", ".", "step_async", "(", "actions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.envs.__init__.VecPyTorch.step_wait": [[32, 37], ["__init__.VecPyTorch.venv.step_wait", "torch.from_numpy().float().to", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.envs.__init__.VecPyTorch.step_wait", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to"], ["", "def", "step_wait", "(", "self", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "venv", ".", "step_wait", "(", ")", "\n", "obs", "=", "torch", ".", "from_numpy", "(", "obs", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "reward", "=", "torch", ".", "from_numpy", "(", "reward", ")", ".", "float", "(", ")", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.envs.__init__.VecPyTorch.step": [[38, 44], ["actions.cpu().numpy.cpu().numpy.cpu().numpy", "__init__.VecPyTorch.venv.step", "torch.from_numpy().float().to", "torch.from_numpy().float", "actions.cpu().numpy.cpu().numpy.cpu", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.objectgoal_env.ObjectGoal_Env.step", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to"], ["", "def", "step", "(", "self", ",", "actions", ")", ":", "\n", "        ", "actions", "=", "actions", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "venv", ".", "step", "(", "actions", ")", "\n", "obs", "=", "torch", ".", "from_numpy", "(", "obs", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "reward", "=", "torch", ".", "from_numpy", "(", "reward", ")", ".", "float", "(", ")", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.envs.__init__.VecPyTorch.get_rewards": [[45, 49], ["__init__.VecPyTorch.venv.get_rewards", "torch.from_numpy().float", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.envs.__init__.VecPyTorch.get_rewards"], ["", "def", "get_rewards", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "reward", "=", "self", ".", "venv", ".", "get_rewards", "(", "inputs", ")", "\n", "reward", "=", "torch", ".", "from_numpy", "(", "reward", ")", ".", "float", "(", ")", "\n", "return", "reward", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.envs.__init__.VecPyTorch.plan_act_and_preprocess": [[50, 55], ["__init__.VecPyTorch.venv.plan_act_and_preprocess", "torch.from_numpy().float().to", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.envs.__init__.VecPyTorch.plan_act_and_preprocess", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.to"], ["", "def", "plan_act_and_preprocess", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "venv", ".", "plan_act_and_preprocess", "(", "inputs", ")", "\n", "obs", "=", "torch", ".", "from_numpy", "(", "obs", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "reward", "=", "torch", ".", "from_numpy", "(", "reward", ")", ".", "float", "(", ")", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.envs.__init__.VecPyTorch.close": [[56, 58], ["__init__.VecPyTorch.venv.close"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.envs.__init__.VecPyTorch.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "venv", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.envs.__init__.make_vec_envs": [[6, 10], ["habitat.construct_envs", "__init__.VecPyTorch"], "function", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.__init__.construct_envs"], ["def", "make_vec_envs", "(", "args", ")", ":", "\n", "    ", "envs", "=", "construct_envs", "(", "args", ")", "\n", "envs", "=", "VecPyTorch", "(", "envs", ",", "args", ".", "device", ")", "\n", "return", "envs", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.__init__.make_env_fn": [[16, 35], ["habitat.make_dataset", "config_env.defrost", "config_env.freeze", "objectgoal_env.ObjectGoal_Env.seed", "agents.sem_exp.Sem_Exp_Env_Agent", "objectgoal_env.ObjectGoal_Env"], "function", ["None"], ["    ", "def", "__init__", "(", "self", ",", "venv", ",", "device", ")", ":", "\n", "        ", "self", ".", "venv", "=", "venv", "\n", "self", ".", "num_envs", "=", "venv", ".", "num_envs", "\n", "self", ".", "observation_space", "=", "venv", ".", "observation_space", "\n", "self", ".", "action_space", "=", "venv", ".", "action_space", "\n", "self", ".", "device", "=", "device", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "obs", ",", "info", "=", "self", ".", "venv", ".", "reset", "(", ")", "\n", "obs", "=", "torch", ".", "from_numpy", "(", "obs", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "return", "obs", ",", "info", "\n", "\n", "", "def", "step_async", "(", "self", ",", "actions", ")", ":", "\n", "        ", "actions", "=", "actions", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "self", ".", "venv", ".", "step_async", "(", "actions", ")", "\n", "\n", "", "def", "step_wait", "(", "self", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "venv", ".", "step_wait", "(", ")", "\n", "obs", "=", "torch", ".", "from_numpy", "(", "obs", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "reward", "=", "torch", ".", "from_numpy", "(", "reward", ")", ".", "float", "(", ")", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.__init__._get_scenes_from_folder": [[37, 46], ["os.listdir", "scenes.sort", "filename.endswith", "scenes.append", "len"], "function", ["None"], ["\n", "", "def", "step", "(", "self", ",", "actions", ")", ":", "\n", "        ", "actions", "=", "actions", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "venv", ".", "step", "(", "actions", ")", "\n", "obs", "=", "torch", ".", "from_numpy", "(", "obs", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "reward", "=", "torch", ".", "from_numpy", "(", "reward", ")", ".", "float", "(", ")", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n", "", "def", "get_rewards", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "reward", "=", "self", ".", "venv", ".", "get_rewards", "(", "inputs", ")", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.__init__.construct_envs": [[48, 151], ["habitat.config.default.get_config", "habitat.config.default.get_config.defrost", "habitat.config.default.get_config.DATASET.DATA_PATH.replace", "habitat.config.default.get_config.DATASET.EPISODES_DIR.replace", "habitat.config.default.get_config.freeze", "print", "range", "habitat.VectorEnv", "os.path.join", "__init__._get_scenes_from_folder", "len", "range", "habitat.config.default.get_config", "habitat.config.default.get_config.defrost", "min", "agent_sensors.append", "agent_sensors.append", "habitat.config.default.get_config.DATASET.DATA_PATH.replace", "habitat.config.default.get_config.DATASET.EPISODES_DIR.replace", "habitat.config.default.get_config.freeze", "env_configs.append", "args_list.append", "habitat.config.default.get_config.DATASET.EPISODES_DIR.format", "len", "int", "len", "print", "tuple", "numpy.floor", "range", "len", "int", "torch.cuda.device_count", "tuple", "sum", "sum", "zip", "len", "range"], "function", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.__init__._get_scenes_from_folder"], ["return", "reward", "\n", "\n", "", "def", "plan_act_and_preprocess", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "venv", ".", "plan_act_and_preprocess", "(", "inputs", ")", "\n", "obs", "=", "torch", ".", "from_numpy", "(", "obs", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "reward", "=", "torch", ".", "from_numpy", "(", "reward", ")", ".", "float", "(", ")", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "venv", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.objectgoal_env.ObjectGoal_Env.__init__": [[22, 77], ["habitat.RLEnv.__init__", "config_env.DATASET.EPISODES_DIR.format", "gym.spaces.Discrete", "gym.spaces.Box", "bz2.BZ2File", "_pickle.load"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.algo.ppo.PPO.__init__"], ["def", "__init__", "(", "self", ",", "args", ",", "rank", ",", "config_env", ",", "dataset", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "rank", "=", "rank", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "config_env", ",", "dataset", ")", "\n", "\n", "# Loading dataset info file", "\n", "self", ".", "split", "=", "config_env", ".", "DATASET", ".", "SPLIT", "\n", "self", ".", "episodes_dir", "=", "config_env", ".", "DATASET", ".", "EPISODES_DIR", ".", "format", "(", "\n", "split", "=", "self", ".", "split", ")", "\n", "\n", "dataset_info_file", "=", "self", ".", "episodes_dir", "+", "\"{split}_info.pbz2\"", ".", "format", "(", "split", "=", "self", ".", "split", ")", "\n", "with", "bz2", ".", "BZ2File", "(", "dataset_info_file", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "self", ".", "dataset_info", "=", "cPickle", ".", "load", "(", "f", ")", "\n", "\n", "# Specifying action and observation space", "\n", "", "self", ".", "action_space", "=", "gym", ".", "spaces", ".", "Discrete", "(", "3", ")", "\n", "\n", "self", ".", "observation_space", "=", "gym", ".", "spaces", ".", "Box", "(", "0", ",", "255", ",", "\n", "(", "3", ",", "args", ".", "frame_height", ",", "\n", "args", ".", "frame_width", ")", ",", "\n", "dtype", "=", "'uint8'", ")", "\n", "\n", "# Initializations", "\n", "self", ".", "episode_no", "=", "0", "\n", "\n", "# Scene info", "\n", "self", ".", "last_scene_path", "=", "None", "\n", "self", ".", "scene_path", "=", "None", "\n", "self", ".", "scene_name", "=", "None", "\n", "\n", "# Episode Dataset info", "\n", "self", ".", "eps_data", "=", "None", "\n", "self", ".", "eps_data_idx", "=", "None", "\n", "self", ".", "gt_planner", "=", "None", "\n", "self", ".", "object_boundary", "=", "None", "\n", "self", ".", "goal_idx", "=", "None", "\n", "self", ".", "goal_name", "=", "None", "\n", "self", ".", "map_obj_origin", "=", "None", "\n", "self", ".", "starting_loc", "=", "None", "\n", "self", ".", "starting_distance", "=", "None", "\n", "\n", "# Episode tracking info", "\n", "self", ".", "curr_distance", "=", "None", "\n", "self", ".", "prev_distance", "=", "None", "\n", "self", ".", "timestep", "=", "None", "\n", "self", ".", "stopped", "=", "None", "\n", "self", ".", "path_length", "=", "None", "\n", "self", ".", "last_sim_location", "=", "None", "\n", "self", ".", "trajectory_states", "=", "[", "]", "\n", "self", ".", "info", "=", "{", "}", "\n", "self", ".", "info", "[", "'distance_to_goal'", "]", "=", "None", "\n", "self", ".", "info", "[", "'spl'", "]", "=", "None", "\n", "self", ".", "info", "[", "'success'", "]", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.objectgoal_env.ObjectGoal_Env.load_new_episode": [[78, 155], ["quaternion.from_float_array", "skimage.morphology.disk", "envs.utils.fmm_planner.FMMPlanner", "skimage.morphology.disk", "envs.utils.fmm_planner.FMMPlanner.set_multi_goal", "objectgoal_env.ObjectGoal_Env._env.sim.set_agent_state", "objectgoal_env.ObjectGoal_Env._env.sim.get_observations_at", "[].split", "print", "len", "skimage.morphology.binary_dilation", "int", "skimage.morphology.binary_dilation", "int", "int", "gzip.open", "json.loads", "objectgoal_env.ObjectGoal_Env.scene_path.split", "f.read().decode", "f.read"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.fmm_planner.FMMPlanner.set_multi_goal"], ["", "def", "load_new_episode", "(", "self", ")", ":", "\n", "        ", "\"\"\"The function loads a fixed episode from the episode dataset. This\n        function is used for evaluating a trained model on the val split.\n        \"\"\"", "\n", "\n", "args", "=", "self", ".", "args", "\n", "self", ".", "scene_path", "=", "self", ".", "habitat_env", ".", "sim", ".", "config", ".", "SCENE", "\n", "scene_name", "=", "self", ".", "scene_path", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "\n", "if", "self", ".", "scene_path", "!=", "self", ".", "last_scene_path", ":", "\n", "            ", "episodes_file", "=", "self", ".", "episodes_dir", "+", "\"content/{}_episodes.json.gz\"", ".", "format", "(", "scene_name", ")", "\n", "\n", "print", "(", "\"Loading episodes from: {}\"", ".", "format", "(", "episodes_file", ")", ")", "\n", "with", "gzip", ".", "open", "(", "episodes_file", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "self", ".", "eps_data", "=", "json", ".", "loads", "(", "\n", "f", ".", "read", "(", ")", ".", "decode", "(", "'utf-8'", ")", ")", "[", "\"episodes\"", "]", "\n", "\n", "", "self", ".", "eps_data_idx", "=", "0", "\n", "self", ".", "last_scene_path", "=", "self", ".", "scene_path", "\n", "\n", "# Load episode info", "\n", "", "episode", "=", "self", ".", "eps_data", "[", "self", ".", "eps_data_idx", "]", "\n", "self", ".", "eps_data_idx", "+=", "1", "\n", "self", ".", "eps_data_idx", "=", "self", ".", "eps_data_idx", "%", "len", "(", "self", ".", "eps_data", ")", "\n", "pos", "=", "episode", "[", "\"start_position\"", "]", "\n", "rot", "=", "quaternion", ".", "from_float_array", "(", "episode", "[", "\"start_rotation\"", "]", ")", "\n", "\n", "goal_name", "=", "episode", "[", "\"object_category\"", "]", "\n", "goal_idx", "=", "episode", "[", "\"object_id\"", "]", "\n", "floor_idx", "=", "episode", "[", "\"floor_id\"", "]", "\n", "\n", "# Load scene info", "\n", "scene_info", "=", "self", ".", "dataset_info", "[", "scene_name", "]", "\n", "sem_map", "=", "scene_info", "[", "floor_idx", "]", "[", "'sem_map'", "]", "\n", "map_obj_origin", "=", "scene_info", "[", "floor_idx", "]", "[", "'origin'", "]", "\n", "\n", "# Setup ground truth planner", "\n", "object_boundary", "=", "args", ".", "success_dist", "\n", "map_resolution", "=", "args", ".", "map_resolution", "\n", "selem", "=", "skimage", ".", "morphology", ".", "disk", "(", "2", ")", "\n", "traversible", "=", "skimage", ".", "morphology", ".", "binary_dilation", "(", "\n", "sem_map", "[", "0", "]", ",", "selem", ")", "!=", "True", "\n", "traversible", "=", "1", "-", "traversible", "\n", "planner", "=", "FMMPlanner", "(", "traversible", ")", "\n", "selem", "=", "skimage", ".", "morphology", ".", "disk", "(", "\n", "int", "(", "object_boundary", "*", "100.", "/", "map_resolution", ")", ")", "\n", "goal_map", "=", "skimage", ".", "morphology", ".", "binary_dilation", "(", "\n", "sem_map", "[", "goal_idx", "+", "1", "]", ",", "selem", ")", "!=", "True", "\n", "goal_map", "=", "1", "-", "goal_map", "\n", "planner", ".", "set_multi_goal", "(", "goal_map", ")", "\n", "\n", "# Get starting loc in GT map coordinates", "\n", "x", "=", "-", "pos", "[", "2", "]", "\n", "y", "=", "-", "pos", "[", "0", "]", "\n", "min_x", ",", "min_y", "=", "map_obj_origin", "/", "100.0", "\n", "map_loc", "=", "int", "(", "(", "-", "y", "-", "min_y", ")", "*", "20.", ")", ",", "int", "(", "(", "-", "x", "-", "min_x", ")", "*", "20.", ")", "\n", "\n", "self", ".", "gt_planner", "=", "planner", "\n", "self", ".", "starting_loc", "=", "map_loc", "\n", "self", ".", "object_boundary", "=", "object_boundary", "\n", "self", ".", "goal_idx", "=", "goal_idx", "\n", "self", ".", "goal_name", "=", "goal_name", "\n", "self", ".", "map_obj_origin", "=", "map_obj_origin", "\n", "\n", "self", ".", "starting_distance", "=", "self", ".", "gt_planner", ".", "fmm_dist", "[", "self", ".", "starting_loc", "]", "/", "20.0", "+", "self", ".", "object_boundary", "\n", "self", ".", "prev_distance", "=", "self", ".", "starting_distance", "\n", "self", ".", "_env", ".", "sim", ".", "set_agent_state", "(", "pos", ",", "rot", ")", "\n", "\n", "# The following two should match approximately", "\n", "# print(starting_loc)", "\n", "# print(self.sim_continuous_to_sim_map(self.get_sim_location()))", "\n", "\n", "obs", "=", "self", ".", "_env", ".", "sim", ".", "get_observations_at", "(", "pos", ",", "rot", ")", "\n", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.objectgoal_env.ObjectGoal_Env.generate_new_episode": [[156, 265], ["numpy.random.randint", "sem_map.sum().sum", "list", "range", "objectgoal_env.ObjectGoal_Env._env.sim.get_agent_state", "quaternion.as_rotation_vector", "quaternion.from_rotation_vector", "objectgoal_env.ObjectGoal_Env._env.sim.set_agent_state", "objectgoal_env.ObjectGoal_Env._env.sim.get_observations_at", "[].split", "len", "numpy.arange", "numpy.random.choice", "constants.coco_categories.items", "skimage.morphology.disk", "envs.utils.fmm_planner.FMMPlanner", "skimage.morphology.disk", "envs.utils.fmm_planner.FMMPlanner.set_multi_goal", "numpy.logical_and", "objectgoal_env.ObjectGoal_Env._env.sim.sample_navigable_point", "scene_info.keys", "sem_map.sum", "list.remove", "len", "print", "skimage.morphology.binary_dilation", "int", "skimage.morphology.binary_dilation", "numpy.logical_and", "numpy.logical_and.sum", "print", "list.remove", "int", "int", "numpy.random.rand", "abs", "objectgoal_env.ObjectGoal_Env.scene_path.split"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.fmm_planner.FMMPlanner.set_multi_goal"], ["", "def", "generate_new_episode", "(", "self", ")", ":", "\n", "        ", "\"\"\"The function generates a random valid episode. This function is used\n        for training a model on the train split.\n        \"\"\"", "\n", "\n", "args", "=", "self", ".", "args", "\n", "\n", "self", ".", "scene_path", "=", "self", ".", "habitat_env", ".", "sim", ".", "config", ".", "SCENE", "\n", "scene_name", "=", "self", ".", "scene_path", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "\n", "scene_info", "=", "self", ".", "dataset_info", "[", "scene_name", "]", "\n", "map_resolution", "=", "args", ".", "map_resolution", "\n", "\n", "floor_idx", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "scene_info", ".", "keys", "(", ")", ")", ")", "\n", "floor_height", "=", "scene_info", "[", "floor_idx", "]", "[", "'floor_height'", "]", "\n", "sem_map", "=", "scene_info", "[", "floor_idx", "]", "[", "'sem_map'", "]", "\n", "map_obj_origin", "=", "scene_info", "[", "floor_idx", "]", "[", "'origin'", "]", "\n", "\n", "cat_counts", "=", "sem_map", ".", "sum", "(", "2", ")", ".", "sum", "(", "1", ")", "\n", "possible_cats", "=", "list", "(", "np", ".", "arange", "(", "6", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "6", ")", ":", "\n", "            ", "if", "cat_counts", "[", "i", "+", "1", "]", "==", "0", ":", "\n", "                ", "possible_cats", ".", "remove", "(", "i", ")", "\n", "\n", "", "", "object_boundary", "=", "args", ".", "success_dist", "\n", "\n", "loc_found", "=", "False", "\n", "while", "not", "loc_found", ":", "\n", "            ", "if", "len", "(", "possible_cats", ")", "==", "0", ":", "\n", "                ", "print", "(", "\"No valid objects for {}\"", ".", "format", "(", "floor_height", ")", ")", "\n", "eps", "=", "eps", "-", "1", "\n", "continue", "\n", "\n", "", "goal_idx", "=", "np", ".", "random", ".", "choice", "(", "possible_cats", ")", "\n", "\n", "for", "key", ",", "value", "in", "coco_categories", ".", "items", "(", ")", ":", "\n", "                ", "if", "value", "==", "goal_idx", ":", "\n", "                    ", "goal_name", "=", "key", "\n", "\n", "", "", "selem", "=", "skimage", ".", "morphology", ".", "disk", "(", "2", ")", "\n", "traversible", "=", "skimage", ".", "morphology", ".", "binary_dilation", "(", "\n", "sem_map", "[", "0", "]", ",", "selem", ")", "!=", "True", "\n", "traversible", "=", "1", "-", "traversible", "\n", "\n", "planner", "=", "FMMPlanner", "(", "traversible", ")", "\n", "\n", "selem", "=", "skimage", ".", "morphology", ".", "disk", "(", "\n", "int", "(", "object_boundary", "*", "100.", "/", "map_resolution", ")", ")", "\n", "goal_map", "=", "skimage", ".", "morphology", ".", "binary_dilation", "(", "\n", "sem_map", "[", "goal_idx", "+", "1", "]", ",", "selem", ")", "!=", "True", "\n", "goal_map", "=", "1", "-", "goal_map", "\n", "\n", "planner", ".", "set_multi_goal", "(", "goal_map", ")", "\n", "\n", "m1", "=", "sem_map", "[", "0", "]", ">", "0", "\n", "m2", "=", "planner", ".", "fmm_dist", ">", "(", "args", ".", "min_d", "-", "object_boundary", ")", "*", "20.0", "\n", "m3", "=", "planner", ".", "fmm_dist", "<", "(", "args", ".", "max_d", "-", "object_boundary", ")", "*", "20.0", "\n", "\n", "possible_starting_locs", "=", "np", ".", "logical_and", "(", "m1", ",", "m2", ")", "\n", "possible_starting_locs", "=", "np", ".", "logical_and", "(", "\n", "possible_starting_locs", ",", "m3", ")", "*", "1.", "\n", "if", "possible_starting_locs", ".", "sum", "(", ")", "!=", "0", ":", "\n", "                ", "loc_found", "=", "True", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"Invalid object: {} / {} / {}\"", ".", "format", "(", "\n", "scene_name", ",", "floor_height", ",", "goal_name", ")", ")", "\n", "possible_cats", ".", "remove", "(", "goal_idx", ")", "\n", "scene_info", "[", "floor_idx", "]", "[", "\"sem_map\"", "]", "[", "goal_idx", "+", "1", ",", ":", ",", ":", "]", "=", "0.", "\n", "self", ".", "dataset_info", "[", "scene_name", "]", "[", "floor_idx", "]", "[", "\n", "\"sem_map\"", "]", "[", "goal_idx", "+", "1", ",", ":", ",", ":", "]", "=", "0.", "\n", "\n", "", "", "loc_found", "=", "False", "\n", "while", "not", "loc_found", ":", "\n", "            ", "pos", "=", "self", ".", "_env", ".", "sim", ".", "sample_navigable_point", "(", ")", "\n", "x", "=", "-", "pos", "[", "2", "]", "\n", "y", "=", "-", "pos", "[", "0", "]", "\n", "min_x", ",", "min_y", "=", "map_obj_origin", "/", "100.0", "\n", "map_loc", "=", "int", "(", "(", "-", "y", "-", "min_y", ")", "*", "20.", ")", ",", "int", "(", "(", "-", "x", "-", "min_x", ")", "*", "20.", ")", "\n", "if", "abs", "(", "pos", "[", "1", "]", "-", "floor_height", ")", "<", "args", ".", "floor_thr", "/", "100.0", "and", "possible_starting_locs", "[", "map_loc", "[", "0", "]", ",", "map_loc", "[", "1", "]", "]", "==", "1", ":", "\n", "                ", "loc_found", "=", "True", "\n", "\n", "", "", "agent_state", "=", "self", ".", "_env", ".", "sim", ".", "get_agent_state", "(", "0", ")", "\n", "rotation", "=", "agent_state", ".", "rotation", "\n", "rvec", "=", "quaternion", ".", "as_rotation_vector", "(", "rotation", ")", "\n", "rvec", "[", "1", "]", "=", "np", ".", "random", ".", "rand", "(", ")", "*", "2", "*", "np", ".", "pi", "\n", "rot", "=", "quaternion", ".", "from_rotation_vector", "(", "rvec", ")", "\n", "\n", "self", ".", "gt_planner", "=", "planner", "\n", "self", ".", "starting_loc", "=", "map_loc", "\n", "self", ".", "object_boundary", "=", "object_boundary", "\n", "self", ".", "goal_idx", "=", "goal_idx", "\n", "self", ".", "goal_name", "=", "goal_name", "\n", "self", ".", "map_obj_origin", "=", "map_obj_origin", "\n", "\n", "self", ".", "starting_distance", "=", "self", ".", "gt_planner", ".", "fmm_dist", "[", "self", ".", "starting_loc", "]", "/", "20.0", "+", "self", ".", "object_boundary", "\n", "self", ".", "prev_distance", "=", "self", ".", "starting_distance", "\n", "\n", "self", ".", "_env", ".", "sim", ".", "set_agent_state", "(", "pos", ",", "rot", ")", "\n", "\n", "# The following two should match approximately", "\n", "# print(starting_loc)", "\n", "# print(self.sim_continuous_to_sim_map(self.get_sim_location()))", "\n", "\n", "obs", "=", "self", ".", "_env", ".", "sim", ".", "get_observations_at", "(", "pos", ",", "rot", ")", "\n", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.objectgoal_env.ObjectGoal_Env.sim_map_to_sim_continuous": [[266, 289], ["objectgoal_env.ObjectGoal_Env._env.sim.get_agent_state", "quaternion.as_rotation_vector", "quaternion.from_rotation_vector", "numpy.random.rand"], "methods", ["None"], ["", "def", "sim_map_to_sim_continuous", "(", "self", ",", "coords", ")", ":", "\n", "        ", "\"\"\"Converts ground-truth 2D Map coordinates to absolute Habitat\n        simulator position and rotation.\n        \"\"\"", "\n", "agent_state", "=", "self", ".", "_env", ".", "sim", ".", "get_agent_state", "(", "0", ")", "\n", "y", ",", "x", "=", "coords", "\n", "min_x", ",", "min_y", "=", "self", ".", "map_obj_origin", "/", "100.0", "\n", "\n", "cont_x", "=", "x", "/", "20.", "+", "min_x", "\n", "cont_y", "=", "y", "/", "20.", "+", "min_y", "\n", "agent_state", ".", "position", "[", "0", "]", "=", "cont_y", "\n", "agent_state", ".", "position", "[", "2", "]", "=", "cont_x", "\n", "\n", "rotation", "=", "agent_state", ".", "rotation", "\n", "rvec", "=", "quaternion", ".", "as_rotation_vector", "(", "rotation", ")", "\n", "\n", "if", "self", ".", "args", ".", "train_single_eps", ":", "\n", "            ", "rvec", "[", "1", "]", "=", "0.0", "\n", "", "else", ":", "\n", "            ", "rvec", "[", "1", "]", "=", "np", ".", "random", ".", "rand", "(", ")", "*", "2", "*", "np", ".", "pi", "\n", "", "rot", "=", "quaternion", ".", "from_rotation_vector", "(", "rvec", ")", "\n", "\n", "return", "agent_state", ".", "position", ",", "rot", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.objectgoal_env.ObjectGoal_Env.sim_continuous_to_sim_map": [[290, 300], ["int", "int", "numpy.rad2deg"], "methods", ["None"], ["", "def", "sim_continuous_to_sim_map", "(", "self", ",", "sim_loc", ")", ":", "\n", "        ", "\"\"\"Converts absolute Habitat simulator pose to ground-truth 2D Map\n        coordinates.\n        \"\"\"", "\n", "x", ",", "y", ",", "o", "=", "sim_loc", "\n", "min_x", ",", "min_y", "=", "self", ".", "map_obj_origin", "/", "100.0", "\n", "x", ",", "y", "=", "int", "(", "(", "-", "x", "-", "min_x", ")", "*", "20.", ")", ",", "int", "(", "(", "-", "y", "-", "min_y", ")", "*", "20.", ")", "\n", "\n", "o", "=", "np", ".", "rad2deg", "(", "o", ")", "+", "180.0", "\n", "return", "y", ",", "x", ",", "o", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.objectgoal_env.ObjectGoal_Env.reset": [[301, 344], ["obs[].astype", "numpy.concatenate().transpose", "objectgoal_env.ObjectGoal_Env.get_sim_location", "super().reset", "print", "objectgoal_env.ObjectGoal_Env.load_new_episode", "objectgoal_env.ObjectGoal_Env.generate_new_episode", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.objectgoal_env.ObjectGoal_Env.get_sim_location", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.objectgoal_env.ObjectGoal_Env.reset", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.objectgoal_env.ObjectGoal_Env.load_new_episode", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.objectgoal_env.ObjectGoal_Env.generate_new_episode"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Resets the environment to a new episode.\n\n        Returns:\n            obs (ndarray): RGBD observations (4 x H x W)\n            info (dict): contains timestep, pose, goal category and\n                         evaluation metric info\n        \"\"\"", "\n", "args", "=", "self", ".", "args", "\n", "new_scene", "=", "self", ".", "episode_no", "%", "args", ".", "num_train_episodes", "==", "0", "\n", "\n", "self", ".", "episode_no", "+=", "1", "\n", "\n", "# Initializations", "\n", "self", ".", "timestep", "=", "0", "\n", "self", ".", "stopped", "=", "False", "\n", "self", ".", "path_length", "=", "1e-5", "\n", "self", ".", "trajectory_states", "=", "[", "]", "\n", "\n", "if", "new_scene", ":", "\n", "            ", "obs", "=", "super", "(", ")", ".", "reset", "(", ")", "\n", "self", ".", "scene_name", "=", "self", ".", "habitat_env", ".", "sim", ".", "config", ".", "SCENE", "\n", "print", "(", "\"Changing scene: {}/{}\"", ".", "format", "(", "self", ".", "rank", ",", "self", ".", "scene_name", ")", ")", "\n", "\n", "", "self", ".", "scene_path", "=", "self", ".", "habitat_env", ".", "sim", ".", "config", ".", "SCENE", "\n", "\n", "if", "self", ".", "split", "==", "\"val\"", ":", "\n", "            ", "obs", "=", "self", ".", "load_new_episode", "(", ")", "\n", "", "else", ":", "\n", "            ", "obs", "=", "self", ".", "generate_new_episode", "(", ")", "\n", "\n", "", "rgb", "=", "obs", "[", "'rgb'", "]", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "depth", "=", "obs", "[", "'depth'", "]", "\n", "state", "=", "np", ".", "concatenate", "(", "(", "rgb", ",", "depth", ")", ",", "axis", "=", "2", ")", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "self", ".", "last_sim_location", "=", "self", ".", "get_sim_location", "(", ")", "\n", "\n", "# Set info", "\n", "self", ".", "info", "[", "'time'", "]", "=", "self", ".", "timestep", "\n", "self", ".", "info", "[", "'sensor_pose'", "]", "=", "[", "0.", ",", "0.", ",", "0.", "]", "\n", "self", ".", "info", "[", "'goal_cat_id'", "]", "=", "self", ".", "goal_idx", "\n", "self", ".", "info", "[", "'goal_name'", "]", "=", "self", ".", "goal_name", "\n", "\n", "return", "state", ",", "self", ".", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.objectgoal_env.ObjectGoal_Env.step": [[345, 388], ["super().step", "objectgoal_env.ObjectGoal_Env.get_pose_change", "envs.get_l2_distance", "obs[].astype", "numpy.concatenate().transpose", "objectgoal_env.ObjectGoal_Env.get_metrics", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.objectgoal_env.ObjectGoal_Env.step", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.objectgoal_env.ObjectGoal_Env.get_pose_change", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.pose.get_l2_distance", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.objectgoal_env.ObjectGoal_Env.get_metrics"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "\"\"\"Function to take an action in the environment.\n\n        Args:\n            action (dict):\n                dict with following keys:\n                    'action' (int): 0: stop, 1: forward, 2: left, 3: right\n\n        Returns:\n            obs (ndarray): RGBD observations (4 x H x W)\n            reward (float): amount of reward returned after previous action\n            done (bool): whether the episode has ended\n            info (dict): contains timestep, pose, goal category and\n                         evaluation metric info\n        \"\"\"", "\n", "action", "=", "action", "[", "\"action\"", "]", "\n", "if", "action", "==", "0", ":", "\n", "            ", "self", ".", "stopped", "=", "True", "\n", "# Not sending stop to simulator, resetting manually", "\n", "action", "=", "3", "\n", "\n", "", "obs", ",", "rew", ",", "done", ",", "_", "=", "super", "(", ")", ".", "step", "(", "action", ")", "\n", "\n", "# Get pose change", "\n", "dx", ",", "dy", ",", "do", "=", "self", ".", "get_pose_change", "(", ")", "\n", "self", ".", "info", "[", "'sensor_pose'", "]", "=", "[", "dx", ",", "dy", ",", "do", "]", "\n", "self", ".", "path_length", "+=", "pu", ".", "get_l2_distance", "(", "0", ",", "dx", ",", "0", ",", "dy", ")", "\n", "\n", "spl", ",", "success", ",", "dist", "=", "0.", ",", "0.", ",", "0.", "\n", "if", "done", ":", "\n", "            ", "spl", ",", "success", ",", "dist", "=", "self", ".", "get_metrics", "(", ")", "\n", "self", ".", "info", "[", "'distance_to_goal'", "]", "=", "dist", "\n", "self", ".", "info", "[", "'spl'", "]", "=", "spl", "\n", "self", ".", "info", "[", "'success'", "]", "=", "success", "\n", "\n", "", "rgb", "=", "obs", "[", "'rgb'", "]", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "depth", "=", "obs", "[", "'depth'", "]", "\n", "state", "=", "np", ".", "concatenate", "(", "(", "rgb", ",", "depth", ")", ",", "axis", "=", "2", ")", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "self", ".", "timestep", "+=", "1", "\n", "self", ".", "info", "[", "'time'", "]", "=", "self", ".", "timestep", "\n", "\n", "return", "state", ",", "rew", ",", "done", ",", "self", ".", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.objectgoal_env.ObjectGoal_Env.get_reward_range": [[389, 392], ["None"], "methods", ["None"], ["", "def", "get_reward_range", "(", "self", ")", ":", "\n", "        ", "\"\"\"This function is not used, Habitat-RLEnv requires this function\"\"\"", "\n", "return", "(", "0.", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.objectgoal_env.ObjectGoal_Env.get_reward": [[393, 403], ["objectgoal_env.ObjectGoal_Env.sim_continuous_to_sim_map", "objectgoal_env.ObjectGoal_Env.get_sim_location"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.objectgoal_env.ObjectGoal_Env.sim_continuous_to_sim_map", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.objectgoal_env.ObjectGoal_Env.get_sim_location"], ["", "def", "get_reward", "(", "self", ",", "observations", ")", ":", "\n", "        ", "curr_loc", "=", "self", ".", "sim_continuous_to_sim_map", "(", "self", ".", "get_sim_location", "(", ")", ")", "\n", "self", ".", "curr_distance", "=", "self", ".", "gt_planner", ".", "fmm_dist", "[", "curr_loc", "[", "0", "]", ",", "\n", "curr_loc", "[", "1", "]", "]", "/", "20.0", "\n", "\n", "reward", "=", "(", "self", ".", "prev_distance", "-", "self", ".", "curr_distance", ")", "*", "self", ".", "args", ".", "reward_coeff", "\n", "\n", "self", ".", "prev_distance", "=", "self", ".", "curr_distance", "\n", "return", "reward", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.objectgoal_env.ObjectGoal_Env.get_metrics": [[404, 423], ["objectgoal_env.ObjectGoal_Env.sim_continuous_to_sim_map", "min", "objectgoal_env.ObjectGoal_Env.get_sim_location"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.objectgoal_env.ObjectGoal_Env.sim_continuous_to_sim_map", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.objectgoal_env.ObjectGoal_Env.get_sim_location"], ["", "def", "get_metrics", "(", "self", ")", ":", "\n", "        ", "\"\"\"This function computes evaluation metrics for the Object Goal task\n\n        Returns:\n            spl (float): Success weighted by Path Length\n                        (See https://arxiv.org/pdf/1807.06757.pdf)\n            success (int): 0: Failure, 1: Successful\n            dist (float): Distance to Success (DTS),  distance of the agent\n                        from the success threshold boundary in meters.\n                        (See https://arxiv.org/pdf/2007.00643.pdf)\n        \"\"\"", "\n", "curr_loc", "=", "self", ".", "sim_continuous_to_sim_map", "(", "self", ".", "get_sim_location", "(", ")", ")", "\n", "dist", "=", "self", ".", "gt_planner", ".", "fmm_dist", "[", "curr_loc", "[", "0", "]", ",", "curr_loc", "[", "1", "]", "]", "/", "20.0", "\n", "if", "dist", "==", "0.0", ":", "\n", "            ", "success", "=", "1", "\n", "", "else", ":", "\n", "            ", "success", "=", "0", "\n", "", "spl", "=", "min", "(", "success", "*", "self", ".", "starting_distance", "/", "self", ".", "path_length", ",", "1", ")", "\n", "return", "spl", ",", "success", ",", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.objectgoal_env.ObjectGoal_Env.get_done": [[424, 432], ["None"], "methods", ["None"], ["", "def", "get_done", "(", "self", ",", "observations", ")", ":", "\n", "        ", "if", "self", ".", "info", "[", "'time'", "]", ">=", "self", ".", "args", ".", "max_episode_length", "-", "1", ":", "\n", "            ", "done", "=", "True", "\n", "", "elif", "self", ".", "stopped", ":", "\n", "            ", "done", "=", "True", "\n", "", "else", ":", "\n", "            ", "done", "=", "False", "\n", "", "return", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.objectgoal_env.ObjectGoal_Env.get_info": [[433, 437], ["None"], "methods", ["None"], ["", "def", "get_info", "(", "self", ",", "observations", ")", ":", "\n", "        ", "\"\"\"This function is not used, Habitat-RLEnv requires this function\"\"\"", "\n", "info", "=", "{", "}", "\n", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.objectgoal_env.ObjectGoal_Env.get_spaces": [[438, 441], ["None"], "methods", ["None"], ["", "def", "get_spaces", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns observation and action spaces for the ObjectGoal task.\"\"\"", "\n", "return", "self", ".", "observation_space", ",", "self", ".", "action_space", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.objectgoal_env.ObjectGoal_Env.get_sim_location": [[442, 457], ["super().habitat_env.sim.get_agent_state", "quaternion.as_euler_angles", "quaternion.as_euler_angles", "quaternion.as_euler_angles"], "methods", ["None"], ["", "def", "get_sim_location", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns x, y, o pose of the agent in the Habitat simulator.\"\"\"", "\n", "\n", "agent_state", "=", "super", "(", ")", ".", "habitat_env", ".", "sim", ".", "get_agent_state", "(", "0", ")", "\n", "x", "=", "-", "agent_state", ".", "position", "[", "2", "]", "\n", "y", "=", "-", "agent_state", ".", "position", "[", "0", "]", "\n", "axis", "=", "quaternion", ".", "as_euler_angles", "(", "agent_state", ".", "rotation", ")", "[", "0", "]", "\n", "if", "(", "axis", "%", "(", "2", "*", "np", ".", "pi", ")", ")", "<", "0.1", "or", "(", "axis", "%", "\n", "(", "2", "*", "np", ".", "pi", ")", ")", ">", "2", "*", "np", ".", "pi", "-", "0.1", ":", "\n", "            ", "o", "=", "quaternion", ".", "as_euler_angles", "(", "agent_state", ".", "rotation", ")", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "o", "=", "2", "*", "np", ".", "pi", "-", "quaternion", ".", "as_euler_angles", "(", "agent_state", ".", "rotation", ")", "[", "1", "]", "\n", "", "if", "o", ">", "np", ".", "pi", ":", "\n", "            ", "o", "-=", "2", "*", "np", ".", "pi", "\n", "", "return", "x", ",", "y", ",", "o", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.objectgoal_env.ObjectGoal_Env.get_pose_change": [[458, 466], ["objectgoal_env.ObjectGoal_Env.get_sim_location", "envs.get_rel_pose_change"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.objectgoal_env.ObjectGoal_Env.get_sim_location", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.pose.get_rel_pose_change"], ["", "def", "get_pose_change", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns dx, dy, do pose change of the agent relative to the last\n        timestep.\"\"\"", "\n", "curr_sim_pose", "=", "self", ".", "get_sim_location", "(", ")", "\n", "dx", ",", "dy", ",", "do", "=", "pu", ".", "get_rel_pose_change", "(", "\n", "curr_sim_pose", ",", "self", ".", "last_sim_location", ")", "\n", "self", ".", "last_sim_location", "=", "curr_sim_pose", "\n", "return", "dx", ",", "dy", ",", "do", "\n", "", "", ""]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.algo.ppo.PPO.__init__": [[11, 39], ["torch.Adam", "torch.Adam", "torch.Adam", "filter", "actor_critic.parameters"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "actor_critic", ",", "\n", "clip_param", ",", "\n", "ppo_epoch", ",", "\n", "num_mini_batch", ",", "\n", "value_loss_coef", ",", "\n", "entropy_coef", ",", "\n", "lr", "=", "None", ",", "\n", "eps", "=", "None", ",", "\n", "max_grad_norm", "=", "None", ",", "\n", "use_clipped_value_loss", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "actor_critic", "=", "actor_critic", "\n", "\n", "self", ".", "clip_param", "=", "clip_param", "\n", "self", ".", "ppo_epoch", "=", "ppo_epoch", "\n", "self", ".", "num_mini_batch", "=", "num_mini_batch", "\n", "\n", "self", ".", "value_loss_coef", "=", "value_loss_coef", "\n", "self", ".", "entropy_coef", "=", "entropy_coef", "\n", "\n", "self", ".", "max_grad_norm", "=", "max_grad_norm", "\n", "self", ".", "use_clipped_value_loss", "=", "use_clipped_value_loss", "\n", "\n", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "\n", "actor_critic", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "lr", ",", "eps", "=", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.algo.ppo.PPO.update": [[40, 109], ["range", "advantages.mean", "advantages.std", "rollouts.recurrent_generator", "rollouts.feed_forward_generator", "ppo.PPO.actor_critic.evaluate_actions", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "ppo.PPO.optimizer.zero_grad", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "ppo.PPO.optimizer.step", "value_loss.item", "action_loss.item", "dist_entropy.item", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "ppo.PPO.actor_critic.parameters", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.recurrent_generator", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.utils.storage.RolloutStorage.feed_forward_generator", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.None.model.RL_Policy.evaluate_actions", "home.repos.pwc.inspect_result.devendrachaplot_Object-Goal-Navigation.habitat.objectgoal_env.ObjectGoal_Env.step"], ["", "def", "update", "(", "self", ",", "rollouts", ")", ":", "\n", "        ", "advantages", "=", "rollouts", ".", "returns", "[", ":", "-", "1", "]", "-", "rollouts", ".", "value_preds", "[", ":", "-", "1", "]", "\n", "advantages", "=", "(", "advantages", "-", "advantages", ".", "mean", "(", ")", ")", "/", "(", "\n", "advantages", ".", "std", "(", ")", "+", "1e-5", ")", "\n", "\n", "value_loss_epoch", "=", "0", "\n", "action_loss_epoch", "=", "0", "\n", "dist_entropy_epoch", "=", "0", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "ppo_epoch", ")", ":", "\n", "\n", "            ", "if", "self", ".", "actor_critic", ".", "is_recurrent", ":", "\n", "                ", "data_generator", "=", "rollouts", ".", "recurrent_generator", "(", "\n", "advantages", ",", "self", ".", "num_mini_batch", ")", "\n", "", "else", ":", "\n", "                ", "data_generator", "=", "rollouts", ".", "feed_forward_generator", "(", "\n", "advantages", ",", "self", ".", "num_mini_batch", ")", "\n", "\n", "", "for", "sample", "in", "data_generator", ":", "\n", "\n", "                ", "value_preds", "=", "sample", "[", "'value_preds'", "]", "\n", "returns", "=", "sample", "[", "'returns'", "]", "\n", "adv_targ", "=", "sample", "[", "'adv_targ'", "]", "\n", "\n", "# Reshape to do in a single forward pass for all steps", "\n", "values", ",", "action_log_probs", ",", "dist_entropy", ",", "_", "=", "self", ".", "actor_critic", ".", "evaluate_actions", "(", "\n", "sample", "[", "'obs'", "]", ",", "sample", "[", "'rec_states'", "]", ",", "\n", "sample", "[", "'masks'", "]", ",", "sample", "[", "'actions'", "]", ",", "\n", "extras", "=", "sample", "[", "'extras'", "]", "\n", ")", "\n", "\n", "ratio", "=", "torch", ".", "exp", "(", "action_log_probs", "-", "\n", "sample", "[", "'old_action_log_probs'", "]", ")", "\n", "surr1", "=", "ratio", "*", "adv_targ", "\n", "surr2", "=", "torch", ".", "clamp", "(", "ratio", ",", "1.0", "-", "self", ".", "clip_param", ",", "\n", "1.0", "+", "self", ".", "clip_param", ")", "*", "adv_targ", "\n", "action_loss", "=", "-", "torch", ".", "min", "(", "surr1", ",", "surr2", ")", ".", "mean", "(", ")", "\n", "\n", "if", "self", ".", "use_clipped_value_loss", ":", "\n", "                    ", "value_pred_clipped", "=", "value_preds", "+", "(", "values", "-", "value_preds", ")", ".", "clamp", "(", "\n", "-", "self", ".", "clip_param", ",", "self", ".", "clip_param", ")", "\n", "value_losses", "=", "(", "values", "-", "returns", ")", ".", "pow", "(", "2", ")", "\n", "value_losses_clipped", "=", "(", "value_pred_clipped", "\n", "-", "returns", ")", ".", "pow", "(", "2", ")", "\n", "value_loss", "=", ".5", "*", "torch", ".", "max", "(", "value_losses", ",", "\n", "value_losses_clipped", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "                    ", "value_loss", "=", "0.5", "*", "(", "returns", "-", "values", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "(", "value_loss", "*", "self", ".", "value_loss_coef", "+", "action_loss", "-", "\n", "dist_entropy", "*", "self", ".", "entropy_coef", ")", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "actor_critic", ".", "parameters", "(", ")", ",", "\n", "self", ".", "max_grad_norm", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "value_loss_epoch", "+=", "value_loss", ".", "item", "(", ")", "\n", "action_loss_epoch", "+=", "action_loss", ".", "item", "(", ")", "\n", "dist_entropy_epoch", "+=", "dist_entropy", ".", "item", "(", ")", "\n", "\n", "", "", "num_updates", "=", "self", ".", "ppo_epoch", "*", "self", ".", "num_mini_batch", "\n", "\n", "value_loss_epoch", "/=", "num_updates", "\n", "action_loss_epoch", "/=", "num_updates", "\n", "dist_entropy_epoch", "/=", "num_updates", "\n", "\n", "return", "value_loss_epoch", ",", "action_loss_epoch", ",", "dist_entropy_epoch", "\n", "", "", ""]]}