{"home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.None.main_std.AddGaussianNoise.__init__": [[20, 23], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", "=", "0.", ",", "std", "=", "1.", ")", ":", "\n", "        ", "self", ".", "std", "=", "std", "\n", "self", ".", "mean", "=", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.None.main_std.AddGaussianNoise.__call__": [[24, 26], ["torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "tensor.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "return", "tensor", "+", "torch", ".", "randn", "(", "tensor", ".", "size", "(", ")", ")", "*", "self", ".", "std", "+", "self", ".", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.None.main_std.AddGaussianNoise.__repr__": [[27, 29], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'(mean={0}, std={1})'", ".", "format", "(", "self", ".", "mean", ",", "self", ".", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.None.main_std.Trainer.__init__": [[32, 36], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "logger", ",", "attack", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "attack", "=", "attack", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.None.main_std.Trainer.train": [[37, 147], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "time.time.time", "range", "model.parameters", "torch.optim.lr_scheduler.MultiStepLR.step", "torch.optim.lr_scheduler.MultiStepLR.step", "torch.optim.lr_scheduler.MultiStepLR.step", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.binary_cross_entropy.backward", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "time.time.time", "main_std.Trainer.test", "time.time.time", "logger.info", "logger.info", "logger.info", "logger.info", "utils.tensor2cuda", "utils.tensor2cuda", "main_std.Trainer.attack.perturb", "model.train", "model", "model.train", "model", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "time.time.time", "time.time.time", "print", "logger.info", "time.time.time", "os.path.join", "utils.save_model", "os.path.join", "utils.save_model", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "utils.evaluate_", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "utils.evaluate_", "main_std.Trainer.attack.perturb", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "utils.evaluate_", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "utils.evaluate_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.eval", "model", "out.cpu().numpy", "label.cpu().numpy", "out.cpu().numpy", "label.cpu().numpy", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.eval", "model", "out.cpu().numpy", "label.cpu().numpy", "out.cpu().numpy", "label.cpu().numpy", "torch.binary_cross_entropy.item", "out.cpu", "label.cpu", "out.cpu", "label.cpu", "out.cpu", "label.cpu", "out.cpu", "label.cpu", "time.time.time"], "methods", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.None.test.Trainer.test", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.tensor2cuda", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.tensor2cuda", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.attack.fast_gradient_sign_untargeted.FastGradientSignUntargeted.perturb", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.None.main_bn.Trainer.train", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.None.main_bn.Trainer.train", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.save_model", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.save_model", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.evaluate_", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.evaluate_", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.attack.fast_gradient_sign_untargeted.FastGradientSignUntargeted.perturb", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.evaluate_", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.evaluate_"], ["", "def", "train", "(", "self", ",", "model", ",", "tr_loader", ",", "va_loader", "=", "None", ",", "adv_train", "=", "False", ")", ":", "\n", "        ", "args", "=", "self", ".", "args", "\n", "logger", "=", "self", ".", "logger", "\n", "opt", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "learning_rate", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "opt", ",", "milestones", "=", "[", "100", ",", "200", "]", ",", "gamma", "=", "0.1", ")", "\n", "_iter", "=", "0", "\n", "begin_time", "=", "time", "(", ")", "\n", "best_loss", "=", "999", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "max_epoch", "+", "1", ")", ":", "\n", "            ", "for", "data", ",", "label", "in", "tr_loader", ":", "\n", "# for sample in tr_loader:", "\n", "# data, label = sample['buffers'], sample['labels']", "\n", "# print('data shape is ', data.shape)", "\n", "# print('label shape is ', label.shape)", "\n", "                ", "data", ",", "label", "=", "tensor2cuda", "(", "data", ")", ",", "tensor2cuda", "(", "label", ")", "\n", "if", "adv_train", ":", "\n", "# When training, the adversarial example is created from a random ", "\n", "# close point to the original data point. If in evaluation mode, ", "\n", "# just start from the original data point.", "\n", "                    ", "adv_data", "=", "self", ".", "attack", ".", "perturb", "(", "data", ",", "label", ",", "'mean'", ",", "True", ")", "\n", "model", ".", "train", "(", ")", "\n", "output", "=", "model", "(", "adv_data", ")", "\n", "", "else", ":", "\n", "                    ", "model", ".", "train", "(", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "", "loss", "=", "F", ".", "binary_cross_entropy", "(", "torch", ".", "sigmoid", "(", "output", ")", ",", "label", ")", "\n", "opt", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "opt", ".", "step", "(", ")", "\n", "t", "=", "Variable", "(", "torch", ".", "Tensor", "(", "[", "0.5", "]", ")", ".", "cuda", "(", ")", ")", "# threshold to compute accuracy", "\n", "\n", "if", "_iter", "%", "args", ".", "n_eval_step", "==", "0", ":", "\n", "                    ", "t1", "=", "time", "(", ")", "\n", "if", "adv_train", ":", "\n", "                        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                            ", "model", ".", "eval", "(", ")", "\n", "stand_output", "=", "model", "(", "data", ")", "\n", "# pred = torch.max(stand_output, dim=1)[1] # this give us the indices tensor", "\n", "", "pred", "=", "torch", ".", "sigmoid", "(", "stand_output", ")", "\n", "out", "=", "(", "pred", ">", "t", ")", ".", "float", "(", ")", "\n", "# print(pred.shape)", "\n", "# print(out.shape)", "\n", "# std_acc = evaluate(pred.cpu().numpy(), label.cpu().numpy()) * 100", "\n", "stdacc_list", "=", "evaluate_", "(", "out", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "# print('std accuracy list shape: ', np.array(stdacc_list).shape)", "\n", "\n", "# pred = torch.max(output, dim=1)[1]", "\n", "pred", "=", "torch", ".", "sigmoid", "(", "output", ")", "\n", "out", "=", "(", "pred", ">", "t", ")", ".", "float", "(", ")", "\n", "# print(pred)", "\n", "# adv_acc = evaluate(pred.cpu().numpy(), label.cpu().numpy()) * 100", "\n", "advacc_list", "=", "evaluate_", "(", "out", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "# print('adv accuracy list shape: ', np.array(stdacc_list).shape)", "\n", "\n", "", "else", ":", "\n", "\n", "                        ", "adv_data", "=", "self", ".", "attack", ".", "perturb", "(", "data", ",", "label", ",", "'mean'", ",", "False", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                            ", "model", ".", "eval", "(", ")", "\n", "adv_output", "=", "model", "(", "adv_data", ")", "\n", "# adv_output = model(adv_data, _eval=True)", "\n", "# pred = torch.max(adv_output, dim=1)[1]", "\n", "", "pred", "=", "torch", ".", "sigmoid", "(", "adv_output", ")", "\n", "out", "=", "(", "pred", ">", "t", ")", ".", "float", "(", ")", "\n", "# print(label)", "\n", "# print(pred)", "\n", "# adv_acc = evaluate(pred.cpu().numpy(), label.cpu().numpy()) * 100", "\n", "advacc_list", "=", "evaluate_", "(", "out", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "# pred = torch.max(output, dim=1)[1]", "\n", "pred", "=", "torch", ".", "sigmoid", "(", "output", ")", "\n", "out", "=", "(", "pred", ">", "t", ")", ".", "float", "(", ")", "\n", "# print(pred)", "\n", "# std_acc = evaluate(pred.cpu().numpy(), label.cpu().numpy()) * 100", "\n", "stdacc_list", "=", "evaluate_", "(", "out", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "t2", "=", "time", "(", ")", "\n", "\n", "print", "(", "'%.3f'", "%", "(", "t2", "-", "t1", ")", ")", "\n", "\n", "logger", ".", "info", "(", "'epoch: %d, iter: %d, spent %.2f s, tr_loss: %.3f'", "%", "(", "\n", "epoch", ",", "_iter", ",", "time", "(", ")", "-", "begin_time", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "\n", "begin_time", "=", "time", "(", ")", "\n", "\n", "", "if", "_iter", "%", "args", ".", "n_checkpoint_step", "==", "0", ":", "\n", "                    ", "file_name", "=", "os", ".", "path", ".", "join", "(", "args", ".", "model_folder", ",", "'checkpoint_%d.pth'", "%", "_iter", ")", "\n", "save_model", "(", "model", ",", "file_name", ")", "\n", "\n", "", "_iter", "+=", "1", "\n", "", "scheduler", ".", "step", "(", ")", "\n", "if", "va_loader", "is", "not", "None", ":", "\n", "                ", "t1", "=", "time", "(", ")", "\n", "va_acc", ",", "va_adv_acc", ",", "va_stdloss", ",", "va_advloss", "=", "self", ".", "test", "(", "model", ",", "va_loader", ",", "True", ",", "False", ")", "\n", "va_acc", ",", "va_adv_acc", "=", "va_acc", "*", "100.0", ",", "va_adv_acc", "*", "100.0", "\n", "if", "va_stdloss", "<", "best_loss", ":", "\n", "                    ", "best_loss", "=", "va_stdloss", "\n", "file_name", "=", "os", ".", "path", ".", "join", "(", "args", ".", "model_folder", ",", "'checkpoint_best.pth'", ")", "\n", "save_model", "(", "model", ",", "file_name", ")", "\n", "\n", "", "t2", "=", "time", "(", ")", "\n", "logger", ".", "info", "(", "'\\n'", "+", "'='", "*", "20", "+", "' evaluation at epoch: %d iteration: %d '", "%", "(", "epoch", ",", "_iter", ")", "+", "'='", "*", "20", ")", "\n", "logger", ".", "info", "(", "'test acc: %.3f %%, test adv acc: %.3f %%, spent: %.3f'", "%", "(", "\n", "va_acc", ",", "va_adv_acc", ",", "t2", "-", "t1", ")", ")", "\n", "logger", ".", "info", "(", "'test loss: %.3f , test adv loss: %.3f , spent: %.3f'", "%", "(", "\n", "va_stdloss", ",", "va_advloss", ",", "t2", "-", "t1", ")", ")", "\n", "logger", ".", "info", "(", "'='", "*", "28", "+", "' end of evaluation '", "+", "'='", "*", "28", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.None.main_std.Trainer.test": [[149, 220], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "numpy.squeeze", "numpy.squeeze", "numpy.squeeze", "numpy.save", "numpy.save", "model.eval", "model", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "numpy.mean", "numpy.array", "numpy.array", "numpy.array", "os.path.join", "os.path.join", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "utils.tensor2cuda", "utils.tensor2cuda", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "utils.evaluate_", "label_list.append", "pred_list.append", "model.eval", "model", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "numpy.mean", "out.cpu().numpy", "numpy.squeeze.cpu().numpy", "numpy.squeeze.cpu().numpy", "torch.sigmoid.cpu().numpy", "torch.sigmoid.cpu().numpy", "torch.sigmoid.cpu().numpy", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "main_std.Trainer.attack.perturb", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "predadv_list.append", "utils.evaluate_", "torch.sigmoid.cpu().numpy", "torch.sigmoid.cpu().numpy", "torch.sigmoid.cpu().numpy", "adv_out.cpu().numpy", "numpy.squeeze.cpu().numpy", "out.cpu", "numpy.squeeze.cpu", "numpy.squeeze.cpu", "torch.sigmoid.cpu", "torch.sigmoid.cpu", "torch.sigmoid.cpu", "torch.sigmoid.cpu", "torch.sigmoid.cpu", "torch.sigmoid.cpu", "adv_out.cpu", "numpy.squeeze.cpu"], "methods", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.tensor2cuda", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.tensor2cuda", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.evaluate_", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.attack.fast_gradient_sign_untargeted.FastGradientSignUntargeted.perturb", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.evaluate_"], ["", "", "", "def", "test", "(", "self", ",", "model", ",", "loader", ",", "adv_test", "=", "False", ",", "\n", "use_pseudo_label", "=", "False", ",", "if_AUC", "=", "False", ")", ":", "\n", "# adv_test is False, return adv_acc as -1 ", "\n", "\n", "        ", "total_acc", "=", "0.0", "\n", "num", "=", "0", "\n", "total_adv_acc", "=", "0.0", "\n", "total_stdloss", "=", "0.0", "\n", "total_advloss", "=", "0.0", "\n", "t", "=", "Variable", "(", "torch", ".", "Tensor", "(", "[", "0.5", "]", ")", ".", "cuda", "(", ")", ")", "# threshold to compute accuracy", "\n", "label_list", "=", "[", "]", "\n", "pred_list", "=", "[", "]", "\n", "predadv_list", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "data", ",", "label", "in", "loader", ":", "\n", "# for sample in loader:", "\n", "# data, label = sample['buffers'], sample['labels']", "\n", "                ", "data", ",", "label", "=", "tensor2cuda", "(", "data", ")", ",", "tensor2cuda", "(", "label", ")", "\n", "model", ".", "eval", "(", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "std_loss", "=", "F", ".", "binary_cross_entropy", "(", "torch", ".", "sigmoid", "(", "output", ")", ",", "label", ")", "\n", "pred", "=", "torch", ".", "sigmoid", "(", "output", ")", "\n", "out", "=", "(", "pred", ">", "t", ")", ".", "float", "(", ")", "\n", "te_acc", "=", "np", ".", "mean", "(", "evaluate_", "(", "out", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "total_acc", "+=", "te_acc", "\n", "total_stdloss", "+=", "std_loss", "\n", "if", "if_AUC", ":", "\n", "                    ", "label_list", ".", "append", "(", "label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "pred_list", ".", "append", "(", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "# num += output.shape[0]", "\n", "", "num", "+=", "1", "\n", "\n", "if", "adv_test", ":", "\n", "# use predicted label as target label", "\n", "                    ", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "                        ", "adv_data", "=", "self", ".", "attack", ".", "perturb", "(", "data", ",", "\n", "pred", "if", "use_pseudo_label", "else", "label", ",", "\n", "'mean'", ",", "False", ")", "\n", "", "model", ".", "eval", "(", ")", "\n", "adv_output", "=", "model", "(", "adv_data", ")", "\n", "adv_loss", "=", "F", ".", "binary_cross_entropy", "(", "torch", ".", "sigmoid", "(", "adv_output", ")", ",", "label", ")", "\n", "adv_pred", "=", "torch", ".", "sigmoid", "(", "adv_output", ")", "\n", "if", "if_AUC", ":", "\n", "                        ", "predadv_list", ".", "append", "(", "adv_pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "adv_out", "=", "(", "adv_pred", ">", "t", ")", ".", "float", "(", ")", "\n", "adv_acc", "=", "np", ".", "mean", "(", "evaluate_", "(", "adv_out", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "total_adv_acc", "+=", "adv_acc", "\n", "total_advloss", "+=", "adv_loss", "\n", "", "else", ":", "\n", "                    ", "total_adv_acc", "=", "-", "num", "\n", "", "", "", "if", "if_AUC", ":", "\n", "            ", "pred", "=", "np", ".", "squeeze", "(", "np", ".", "array", "(", "pred_list", ")", ")", "\n", "predadv", "=", "np", ".", "squeeze", "(", "np", ".", "array", "(", "predadv_list", ")", ")", "\n", "label", "=", "np", ".", "squeeze", "(", "np", ".", "array", "(", "label_list", ")", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "log_folder", ",", "'y_pred.npy'", ")", ",", "pred", ")", "\n", "# np.save(os.path.join(self.args.log_folder, 'y_predadv_'+str(args.epsilon)+'.npy'), predadv)", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "log_folder", ",", "'y_true.npy'", ")", ",", "label", ")", "\n", "\n", "# PRED_label = ['No Finding', 'Cardiomegaly', 'Edema', ", "\n", "#                 'Consolidation', 'Pneumonia', 'Atelectasis',", "\n", "#                 'Pneumothorax', 'Pleural Effusion']", "\n", "# PRED_label = ['healthy', 'partially injured', 'completely ruptured']", "\n", "# PRED_label = ['malignancy']", "\n", "# plot_AUC(pred, label, self.args.log_folder, 'auc.png', PRED_label)", "\n", "# plot_AUC(predadv, label, self.args.log_folder, 'auc_'+str(args.epsilon)+'.png', PRED_label)", "\n", "# np.save('predstd_'+str(args.epsilon)+'.npy', pred)", "\n", "# np.save('predstdadv_'+str(args.epsilon)+'.npy', predadv)", "\n", "# np.save('labelstd_'+str(args.epsilon)+'.npy', label)", "\n", "", "else", ":", "\n", "            ", "return", "total_acc", "/", "num", ",", "total_adv_acc", "/", "num", ",", "total_stdloss", "/", "num", ",", "total_advloss", "/", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.None.main_std.main": [[221, 305], ["os.path.join", "os.path.join", "utils.makedirs", "utils.makedirs", "setattr", "setattr", "utils.create_logger", "argument.print_args", "torchvision.models.resnet50", "torch.Linear", "attack.FastGradientSignUntargeted", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "main_std.Trainer", "models.resnet50.cuda", "torchvision.transforms.Compose", "patch_dataset.PatchDataset", "torch.utils.data.DataLoader", "torchvision.transforms.Compose", "patch_dataset.PatchDataset", "torch.utils.data.DataLoader", "main_std.Trainer.train", "patch_dataset.PatchDataset", "torch.utils.data.DataLoader", "torch.load", "torch.load", "torch.load", "models.resnet50.load_state_dict", "main_std.Trainer.test", "print", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Lambda", "torchvision.transforms.ToPILImage", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ColorJitter", "torchvision.transforms.RandomAffine", "torchvision.transforms.RandomCrop", "torchvision.transforms.ToTensor", "main_std.AddGaussianNoise", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Compose", "torch.pad().squeeze", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torch.pad", "x.unsqueeze"], "function", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.makedirs", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.makedirs", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.create_logger", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.None.argument.print_args", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.None.main_bn.Trainer.train", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.None.test.Trainer.test"], ["", "", "", "def", "main", "(", "args", ")", ":", "\n", "\n", "    ", "save_folder", "=", "'%s_%s'", "%", "(", "args", ".", "dataset", ",", "args", ".", "affix", ")", "\n", "log_folder", "=", "os", ".", "path", ".", "join", "(", "args", ".", "log_root", ",", "save_folder", ")", "\n", "model_folder", "=", "os", ".", "path", ".", "join", "(", "args", ".", "model_root", ",", "save_folder", ")", "\n", "makedirs", "(", "log_folder", ")", "\n", "makedirs", "(", "model_folder", ")", "\n", "setattr", "(", "args", ",", "'log_folder'", ",", "log_folder", ")", "\n", "setattr", "(", "args", ",", "'model_folder'", ",", "model_folder", ")", "\n", "logger", "=", "create_logger", "(", "log_folder", ",", "args", ".", "todo", ",", "'info'", ")", "\n", "print_args", "(", "args", ",", "logger", ")", "\n", "\n", "# model = WideResNet(depth=34, num_classes=10, widen_factor=10, dropRate=0.0)", "\n", "model", "=", "models", ".", "resnet50", "(", "pretrained", "=", "args", ".", "pretrain", ")", "\n", "num_classes", "=", "8", "\n", "# model.classifier = nn.Linear(model.classifier.in_features, num_classes)", "\n", "model", ".", "fc", "=", "nn", ".", "Linear", "(", "model", ".", "fc", ".", "in_features", ",", "num_classes", ")", "\n", "\n", "attack", "=", "FastGradientSignUntargeted", "(", "model", ",", "\n", "args", ".", "epsilon", ",", "\n", "args", ".", "alpha", ",", "\n", "min_val", "=", "0", ",", "\n", "max_val", "=", "1", ",", "\n", "max_iters", "=", "args", ".", "k", ",", "\n", "_type", "=", "args", ".", "perturbation_type", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "# model = nn.DataParallel(model).cuda()", "\n", "\n", "", "trainer", "=", "Trainer", "(", "args", ",", "logger", ",", "attack", ")", "\n", "\n", "if", "args", ".", "todo", "==", "'train'", ":", "\n", "\n", "        ", "transform_train", "=", "tv", ".", "transforms", ".", "Compose", "(", "[", "\n", "tv", ".", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "tv", ".", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "tv", ".", "transforms", ".", "Lambda", "(", "lambda", "x", ":", "F", ".", "pad", "(", "x", ".", "unsqueeze", "(", "0", ")", ",", "\n", "(", "4", "*", "6", ",", "4", "*", "6", ",", "4", "*", "6", ",", "4", "*", "6", ")", ",", "mode", "=", "'constant'", ",", "value", "=", "0", ")", ".", "squeeze", "(", ")", ")", ",", "\n", "tv", ".", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "tv", ".", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "tv", ".", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.3", ",", "contrast", "=", "0.3", ",", "\n", "saturation", "=", "0.3", ",", "hue", "=", "0.3", ")", ",", "\n", "# tv.transforms.RandomRotation(25),", "\n", "tv", ".", "transforms", ".", "RandomAffine", "(", "25", ",", "translate", "=", "(", "0.2", ",", "0.2", ")", ",", "\n", "scale", "=", "(", "0.8", ",", "1.2", ")", ",", "shear", "=", "10", ")", ",", "\n", "tv", ".", "transforms", ".", "RandomCrop", "(", "256", ")", ",", "\n", "tv", ".", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "AddGaussianNoise", "(", "0.5", ",", "args", ".", "epsilon", ")", "\n", "]", ")", "\n", "tr_dataset", "=", "patd", ".", "PatchDataset", "(", "path_to_images", "=", "args", ".", "data_root", ",", "\n", "fold", "=", "'train'", ",", "\n", "sample", "=", "args", ".", "subsample", ",", "\n", "transform", "=", "transform_train", ")", "\n", "tr_loader", "=", "DataLoader", "(", "tr_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "24", ")", "\n", "# evaluation during training", "\n", "transform_test", "=", "tv", ".", "transforms", ".", "Compose", "(", "[", "\n", "tv", ".", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "# tv.transforms.CenterCrop(224),", "\n", "tv", ".", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "# tv.transforms.Normalize(mean, std)", "\n", "]", ")", "\n", "te_dataset", "=", "patd", ".", "PatchDataset", "(", "path_to_images", "=", "args", ".", "data_root", ",", "\n", "fold", "=", "'valid'", ",", "\n", "transform", "=", "transform_test", ")", "\n", "te_loader", "=", "DataLoader", "(", "te_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "24", ")", "\n", "\n", "trainer", ".", "train", "(", "model", ",", "tr_loader", ",", "te_loader", ",", "args", ".", "adv_train", ")", "\n", "\n", "", "elif", "args", ".", "todo", "==", "'test'", ":", "\n", "        ", "te_dataset", "=", "patd", ".", "PatchDataset", "(", "path_to_images", "=", "args", ".", "data_root", ",", "\n", "fold", "=", "'test'", ",", "\n", "transform", "=", "tv", ".", "transforms", ".", "Compose", "(", "[", "\n", "tv", ".", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "tv", ".", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", ")", "\n", "te_loader", "=", "DataLoader", "(", "te_dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "1", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "load_checkpoint", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "std_acc", ",", "adv_acc", "=", "trainer", ".", "test", "(", "model", ",", "te_loader", ",", "adv_test", "=", "True", ",", "use_pseudo_label", "=", "False", ",", "if_AUC", "=", "True", ")", "\n", "print", "(", "\"std acc: %.4f, adv_acc: %.4f\"", "%", "(", "std_acc", "*", "100", ",", "adv_acc", "*", "100", ")", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.None.argument.parser": [[3, 50], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Video Summarization'", ")", "\n", "parser", ".", "add_argument", "(", "'--todo'", ",", "choices", "=", "[", "'train'", ",", "'valid'", ",", "'test'", ",", "'visualize'", "]", ",", "default", "=", "'train'", ",", "\n", "help", "=", "'what behavior want to do: train | valid | test | visualize'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "default", "=", "'chexpert'", ",", "help", "=", "'use what dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--subsample'", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--data_root'", ",", "default", "=", "'../CheXpert_Dataset/images_256/images/'", ",", "\n", "help", "=", "'the directory to save the dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_root'", ",", "default", "=", "'log'", ",", "\n", "help", "=", "'the directory to save the logs or other imformations (e.g. images)'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_root'", ",", "default", "=", "'checkpoint'", ",", "help", "=", "'the directory to save the models'", ")", "\n", "parser", ".", "add_argument", "(", "'--load_checkpoint'", ",", "default", "=", "'./oldmodel/'", ")", "\n", "parser", ".", "add_argument", "(", "'--affix'", ",", "default", "=", "'default'", ",", "help", "=", "'the affix for the save folder'", ")", "\n", "\n", "# parameters for generating adversarial examples", "\n", "parser", ".", "add_argument", "(", "'--epsilon'", ",", "'-e'", ",", "type", "=", "float", ",", "default", "=", "0.005", ",", "\n", "help", "=", "'maximum perturbation of adversaries (4/255=0.0157)'", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha'", ",", "'-a'", ",", "type", "=", "float", ",", "default", "=", "0.0025", ",", "\n", "help", "=", "'movement multiplier per iteration when generating adversarial examples (2/255=0.00784)'", ")", "\n", "parser", ".", "add_argument", "(", "'--k'", ",", "'-k'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "'maximum iteration when generating adversarial examples'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--widefactor'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'Factors for expanding the bottleneck layers of ResNet'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrain'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "'Use ImageNet pretraining or not'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "'-b'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_epoch'", ",", "'-m_e'", ",", "type", "=", "int", ",", "default", "=", "300", ",", "\n", "help", "=", "'the maximum numbers of the model see a sample'", ")", "\n", "parser", ".", "add_argument", "(", "'--learning_rate'", ",", "'-lr'", ",", "type", "=", "float", ",", "default", "=", "1e-2", ",", "help", "=", "'learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "'-w'", ",", "type", "=", "float", ",", "default", "=", "0", ",", "\n", "help", "=", "'the parameter of l2 restriction for weights'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "'-g'", ",", "default", "=", "'0'", ",", "help", "=", "'which gpu to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_eval_step'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "\n", "help", "=", "'number of iteration per one evaluation'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_checkpoint_step'", ",", "type", "=", "int", ",", "default", "=", "5000", ",", "\n", "help", "=", "'number of iteration to save a checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_store_image_step'", ",", "type", "=", "int", ",", "default", "=", "5000", ",", "\n", "help", "=", "'number of iteration to save adversaries'", ")", "\n", "parser", ".", "add_argument", "(", "'--perturbation_type'", ",", "'-p'", ",", "choices", "=", "[", "'linf'", ",", "'l2'", "]", ",", "default", "=", "'linf'", ",", "\n", "help", "=", "'the type of the perturbation (linf or l2)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--adv_train'", ",", "action", "=", "'store_true'", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.None.argument.print_args": [[51, 57], ["vars().items", "vars", "logger.info", "print"], "function", ["None"], ["", "def", "print_args", "(", "args", ",", "logger", "=", "None", ")", ":", "\n", "    ", "for", "k", ",", "v", "in", "vars", "(", "args", ")", ".", "items", "(", ")", ":", "\n", "        ", "if", "logger", "is", "not", "None", ":", "\n", "            ", "logger", ".", "info", "(", "'{:<16} : {}'", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'{:<16} : {}'", ".", "format", "(", "k", ",", "v", ")", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.None.main_bn.Trainer.__init__": [[23, 27], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "logger", ",", "attack", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "attack", "=", "attack", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.None.main_bn.Trainer.train": [[28, 128], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "time.time.time", "range", "model.parameters", "torch.optim.lr_scheduler.MultiStepLR.step", "torch.optim.lr_scheduler.MultiStepLR.step", "torch.optim.lr_scheduler.MultiStepLR.step", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "loss_t.backward", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "time.time.time", "main_bn.Trainer.test", "time.time.time", "logger.info", "logger.info", "logger.info", "logger.info", "utils.tensor2cuda", "utils.tensor2cuda", "main_bn.Trainer.attack.perturb", "model.train", "model", "model", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "time.time.time", "time.time.time", "print", "logger.info", "time.time.time", "os.path.join", "utils.save_model", "os.path.join", "utils.save_model", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "utils.evaluate_", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "utils.evaluate_", "main_bn.Trainer.attack.perturb", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "utils.evaluate_", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "utils.evaluate_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.eval", "model", "out.cpu().numpy", "label.cpu().numpy", "out.cpu().numpy", "label.cpu().numpy", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.eval", "model", "out.cpu().numpy", "label.cpu().numpy", "out.cpu().numpy", "label.cpu().numpy", "torch.binary_cross_entropy.item", "out.cpu", "label.cpu", "out.cpu", "label.cpu", "out.cpu", "label.cpu", "out.cpu", "label.cpu", "time.time.time"], "methods", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.None.test.Trainer.test", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.tensor2cuda", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.tensor2cuda", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.attack.fast_gradient_sign_untargeted.FastGradientSignUntargeted.perturb", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.None.main_bn.Trainer.train", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.save_model", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.save_model", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.evaluate_", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.evaluate_", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.attack.fast_gradient_sign_untargeted.FastGradientSignUntargeted.perturb", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.evaluate_", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.evaluate_"], ["", "def", "train", "(", "self", ",", "model", ",", "tr_loader", ",", "va_loader", "=", "None", ",", "adv_train", "=", "False", ")", ":", "\n", "        ", "args", "=", "self", ".", "args", "\n", "logger", "=", "self", ".", "logger", "\n", "opt", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "learning_rate", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "opt", ",", "milestones", "=", "[", "100", ",", "200", "]", ",", "gamma", "=", "0.1", ")", "\n", "# scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(opt, 'min', min_lr=1e-6)", "\n", "_iter", "=", "0", "\n", "begin_time", "=", "time", "(", ")", "\n", "best_loss", "=", "999", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "max_epoch", "+", "1", ")", ":", "\n", "            ", "for", "data", ",", "label", "in", "tr_loader", ":", "\n", "# print('data shape is ', data.shape)", "\n", "# print('label shape is ', label.shape)", "\n", "                ", "data", ",", "label", "=", "tensor2cuda", "(", "data", ")", ",", "tensor2cuda", "(", "label", ")", "\n", "if", "adv_train", ":", "\n", "# When training, the adversarial example is created from a random ", "\n", "# close point to the original data point. If in evaluation mode, ", "\n", "# just start from the original data point.", "\n", "                    ", "adv_data", "=", "self", ".", "attack", ".", "perturb", "(", "data", ",", "label", ",", "'mean'", ",", "True", ",", "True", ")", "\n", "model", ".", "train", "(", ")", "\n", "output_", "=", "model", "(", "adv_data", ",", "[", "1", "]", ")", "\n", "output", "=", "model", "(", "data", ",", "[", "0", "]", ")", "\n", "", "loss", "=", "F", ".", "binary_cross_entropy", "(", "torch", ".", "sigmoid", "(", "output", ")", ",", "label", ")", "\n", "loss_", "=", "F", ".", "binary_cross_entropy", "(", "torch", ".", "sigmoid", "(", "output_", ")", ",", "label", ")", "\n", "loss_t", "=", "loss", "+", "loss_", "\n", "opt", ".", "zero_grad", "(", ")", "\n", "loss_t", ".", "backward", "(", ")", "\n", "opt", ".", "step", "(", ")", "\n", "\n", "\n", "t", "=", "Variable", "(", "torch", ".", "Tensor", "(", "[", "0.5", "]", ")", ".", "cuda", "(", ")", ")", "# threshold to compute accuracy", "\n", "\n", "if", "_iter", "%", "args", ".", "n_eval_step", "==", "0", ":", "\n", "                    ", "t1", "=", "time", "(", ")", "\n", "if", "adv_train", ":", "\n", "                        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                            ", "model", ".", "eval", "(", ")", "\n", "stand_output", "=", "model", "(", "data", ",", "[", "0", "]", ")", "\n", "", "pred", "=", "torch", ".", "sigmoid", "(", "stand_output", ")", "\n", "out", "=", "(", "pred", ">", "t", ")", ".", "float", "(", ")", "\n", "# print(pred.shape)", "\n", "# print(out.shape)", "\n", "stdacc_list", "=", "evaluate_", "(", "out", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "pred", "=", "torch", ".", "sigmoid", "(", "output", ")", "\n", "out", "=", "(", "pred", ">", "t", ")", ".", "float", "(", ")", "\n", "advacc_list", "=", "evaluate_", "(", "out", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "else", ":", "\n", "                        ", "adv_data", "=", "self", ".", "attack", ".", "perturb", "(", "data", ",", "label", ",", "'mean'", ",", "False", ",", "True", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                            ", "model", ".", "eval", "(", ")", "\n", "adv_output", "=", "model", "(", "adv_data", ",", "[", "1", "]", ")", "\n", "", "pred", "=", "torch", ".", "sigmoid", "(", "adv_output", ")", "\n", "out", "=", "(", "pred", ">", "t", ")", ".", "float", "(", ")", "\n", "# print(label)", "\n", "# print(pred)", "\n", "# adv_acc = evaluate(pred.cpu().numpy(), label.cpu().numpy()) * 100", "\n", "advacc_list", "=", "evaluate_", "(", "out", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "# pred = torch.max(output, dim=1)[1]", "\n", "pred", "=", "torch", ".", "sigmoid", "(", "output", ")", "\n", "out", "=", "(", "pred", ">", "t", ")", ".", "float", "(", ")", "\n", "# print(pred)", "\n", "# std_acc = evaluate(pred.cpu().numpy(), label.cpu().numpy()) * 100", "\n", "stdacc_list", "=", "evaluate_", "(", "out", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "t2", "=", "time", "(", ")", "\n", "\n", "print", "(", "'%.3f'", "%", "(", "t2", "-", "t1", ")", ")", "\n", "\n", "logger", ".", "info", "(", "'epoch: %d, iter: %d, spent %.2f s, tr_loss: %.3f'", "%", "(", "\n", "epoch", ",", "_iter", ",", "time", "(", ")", "-", "begin_time", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "\n", "begin_time", "=", "time", "(", ")", "\n", "\n", "", "if", "_iter", "%", "args", ".", "n_checkpoint_step", "==", "0", ":", "\n", "                    ", "file_name", "=", "os", ".", "path", ".", "join", "(", "args", ".", "model_folder", ",", "'checkpoint_%d.pth'", "%", "_iter", ")", "\n", "save_model", "(", "model", ",", "file_name", ")", "\n", "\n", "", "_iter", "+=", "1", "\n", "", "scheduler", ".", "step", "(", ")", "\n", "if", "va_loader", "is", "not", "None", ":", "\n", "                ", "t1", "=", "time", "(", ")", "\n", "va_acc", ",", "va_adv_acc", ",", "va_stdloss", ",", "va_advloss", "=", "self", ".", "test", "(", "model", ",", "va_loader", ",", "True", ",", "False", ")", "\n", "va_acc", ",", "va_adv_acc", "=", "va_acc", "*", "100.0", ",", "va_adv_acc", "*", "100.0", "\n", "# scheduler.step(va_stdloss)", "\n", "if", "va_stdloss", "<", "best_loss", ":", "\n", "                    ", "best_loss", "=", "va_stdloss", "\n", "file_name", "=", "os", ".", "path", ".", "join", "(", "args", ".", "model_folder", ",", "'checkpoint_best.pth'", ")", "\n", "save_model", "(", "model", ",", "file_name", ")", "\n", "\n", "", "t2", "=", "time", "(", ")", "\n", "logger", ".", "info", "(", "'\\n'", "+", "'='", "*", "20", "+", "' evaluation at epoch: %d iteration: %d '", "%", "(", "epoch", ",", "_iter", ")", "+", "'='", "*", "20", ")", "\n", "logger", ".", "info", "(", "'test acc: %.3f %%, test adv acc: %.3f %%, spent: %.3f'", "%", "(", "\n", "va_acc", ",", "va_adv_acc", ",", "t2", "-", "t1", ")", ")", "\n", "logger", ".", "info", "(", "'test loss: %.3f , test adv loss: %.3f , spent: %.3f'", "%", "(", "\n", "va_stdloss", ",", "va_advloss", ",", "t2", "-", "t1", ")", ")", "\n", "logger", ".", "info", "(", "'='", "*", "28", "+", "' end of evaluation '", "+", "'='", "*", "28", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.None.main_bn.Trainer.test": [[130, 193], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "numpy.squeeze", "numpy.squeeze", "numpy.squeeze", "numpy.save", "numpy.save", "model.eval", "model", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "numpy.mean", "numpy.array", "numpy.array", "numpy.array", "os.path.join", "os.path.join", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "utils.tensor2cuda", "utils.tensor2cuda", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "utils.evaluate_", "label_list.append", "pred_list.append", "model.eval", "model", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "numpy.mean", "out.cpu().numpy", "numpy.squeeze.cpu().numpy", "numpy.squeeze.cpu().numpy", "torch.sigmoid.cpu().numpy", "torch.sigmoid.cpu().numpy", "torch.sigmoid.cpu().numpy", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "main_bn.Trainer.attack.perturb", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "predadv_list.append", "utils.evaluate_", "torch.sigmoid.cpu().numpy", "torch.sigmoid.cpu().numpy", "torch.sigmoid.cpu().numpy", "adv_out.cpu().numpy", "numpy.squeeze.cpu().numpy", "out.cpu", "numpy.squeeze.cpu", "numpy.squeeze.cpu", "torch.sigmoid.cpu", "torch.sigmoid.cpu", "torch.sigmoid.cpu", "torch.sigmoid.cpu", "torch.sigmoid.cpu", "torch.sigmoid.cpu", "adv_out.cpu", "numpy.squeeze.cpu"], "methods", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.tensor2cuda", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.tensor2cuda", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.evaluate_", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.attack.fast_gradient_sign_untargeted.FastGradientSignUntargeted.perturb", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.evaluate_"], ["", "", "", "def", "test", "(", "self", ",", "model", ",", "loader", ",", "adv_test", "=", "False", ",", "\n", "use_pseudo_label", "=", "False", ",", "if_AUC", "=", "False", ")", ":", "\n", "# adv_test is False, return adv_acc as -1 ", "\n", "        ", "total_acc", "=", "0.0", "\n", "num", "=", "0", "\n", "total_adv_acc", "=", "0.0", "\n", "total_stdloss", "=", "0.0", "\n", "total_advloss", "=", "0.0", "\n", "t", "=", "Variable", "(", "torch", ".", "Tensor", "(", "[", "0.5", "]", ")", ".", "cuda", "(", ")", ")", "# threshold to compute accuracy", "\n", "label_list", "=", "[", "]", "\n", "pred_list", "=", "[", "]", "\n", "predadv_list", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "data", ",", "label", "in", "loader", ":", "\n", "                ", "data", ",", "label", "=", "tensor2cuda", "(", "data", ")", ",", "tensor2cuda", "(", "label", ")", "\n", "model", ".", "eval", "(", ")", "\n", "output", "=", "model", "(", "data", ",", "[", "0", "]", ")", "\n", "std_loss", "=", "F", ".", "binary_cross_entropy", "(", "torch", ".", "sigmoid", "(", "output", ")", ",", "label", ")", "\n", "pred", "=", "torch", ".", "sigmoid", "(", "output", ")", "\n", "out", "=", "(", "pred", ">", "t", ")", ".", "float", "(", ")", "\n", "te_acc", "=", "np", ".", "mean", "(", "evaluate_", "(", "out", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "total_acc", "+=", "te_acc", "\n", "total_stdloss", "+=", "std_loss", "\n", "if", "if_AUC", ":", "\n", "                    ", "label_list", ".", "append", "(", "label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "pred_list", ".", "append", "(", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "# num += output.shape[0]", "\n", "", "num", "+=", "1", "\n", "\n", "if", "adv_test", ":", "\n", "# use predicted label as target label", "\n", "                    ", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "                        ", "adv_data", "=", "self", ".", "attack", ".", "perturb", "(", "data", ",", "\n", "pred", "if", "use_pseudo_label", "else", "label", ",", "\n", "'mean'", ",", "False", ",", "True", ")", "\n", "", "model", ".", "eval", "(", ")", "\n", "adv_output", "=", "model", "(", "adv_data", ",", "[", "1", "]", ")", "\n", "adv_loss", "=", "F", ".", "binary_cross_entropy", "(", "torch", ".", "sigmoid", "(", "adv_output", ")", ",", "label", ")", "\n", "adv_pred", "=", "torch", ".", "sigmoid", "(", "adv_output", ")", "\n", "if", "if_AUC", ":", "\n", "                        ", "predadv_list", ".", "append", "(", "adv_pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "adv_out", "=", "(", "adv_pred", ">", "t", ")", ".", "float", "(", ")", "\n", "adv_acc", "=", "np", ".", "mean", "(", "evaluate_", "(", "adv_out", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "total_adv_acc", "+=", "adv_acc", "\n", "total_advloss", "+=", "adv_loss", "\n", "", "else", ":", "\n", "                    ", "total_adv_acc", "=", "-", "num", "\n", "", "", "", "if", "if_AUC", ":", "\n", "            ", "pred", "=", "np", ".", "squeeze", "(", "np", ".", "array", "(", "pred_list", ")", ")", "\n", "predadv", "=", "np", ".", "squeeze", "(", "np", ".", "array", "(", "predadv_list", ")", ")", "\n", "label", "=", "np", ".", "squeeze", "(", "np", ".", "array", "(", "label_list", ")", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "log_folder", ",", "'y_pred.npy'", ")", ",", "pred", ")", "\n", "# np.save(os.path.join(self.args.log_folder, 'y_predadv_'+str(args.epsilon)+'.npy'), predadv)", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "log_folder", ",", "'y_true.npy'", ")", ",", "label", ")", "\n", "# PRED_label = ['No Finding', 'Cardiomegaly', 'Edema', ", "\n", "#                 'Consolidation', 'Pneumonia', 'Atelectasis',", "\n", "#                 'Pneumothorax', 'Pleural Effusion']", "\n", "# PRED_label = ['healthy', 'partially injured', 'completely ruptured']", "\n", "# PRED_label = ['malignancy']", "\n", "# plot_AUC(pred, label, self.args.log_folder, 'auc.png', PRED_label)", "\n", "", "else", ":", "\n", "            ", "return", "total_acc", "/", "num", ",", "total_adv_acc", "/", "num", ",", "total_stdloss", "/", "num", ",", "total_advloss", "/", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.None.main_bn.main": [[194, 273], ["os.path.join", "os.path.join", "utils.makedirs", "utils.makedirs", "setattr", "setattr", "utils.create_logger", "argument.print_args", "model.resnetdsbn.resnet50dsbn", "torch.Linear", "attack.FastGradientSignUntargeted", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "main_bn.Trainer", "model.cuda.cuda", "torchvision.transforms.Compose", "patch_dataset.PatchDataset", "torch.utils.data.DataLoader", "torchvision.transforms.Compose", "patch_dataset.PatchDataset", "torch.utils.data.DataLoader", "main_bn.Trainer.train", "patch_dataset.PatchDataset", "torch.utils.data.DataLoader", "torch.load", "torch.load", "torch.load", "model.cuda.load_state_dict", "main_bn.Trainer.test", "print", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Lambda", "torchvision.transforms.ToPILImage", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ColorJitter", "torchvision.transforms.RandomAffine", "torchvision.transforms.RandomCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Compose", "torch.pad().squeeze", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torch.pad", "x.unsqueeze"], "function", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.makedirs", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.makedirs", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.create_logger", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.None.argument.print_args", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.resnetdsbn.resnet50dsbn", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.None.main_bn.Trainer.train", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.None.test.Trainer.test"], ["", "", "", "def", "main", "(", "args", ")", ":", "\n", "\n", "    ", "save_folder", "=", "'%s_%s'", "%", "(", "args", ".", "dataset", ",", "args", ".", "affix", ")", "\n", "log_folder", "=", "os", ".", "path", ".", "join", "(", "args", ".", "log_root", ",", "save_folder", ")", "\n", "model_folder", "=", "os", ".", "path", ".", "join", "(", "args", ".", "model_root", ",", "save_folder", ")", "\n", "makedirs", "(", "log_folder", ")", "\n", "makedirs", "(", "model_folder", ")", "\n", "setattr", "(", "args", ",", "'log_folder'", ",", "log_folder", ")", "\n", "setattr", "(", "args", ",", "'model_folder'", ",", "model_folder", ")", "\n", "logger", "=", "create_logger", "(", "log_folder", ",", "args", ".", "todo", ",", "'info'", ")", "\n", "print_args", "(", "args", ",", "logger", ")", "\n", "\n", "model", "=", "resnet50dsbn", "(", "pretrained", "=", "args", ".", "pretrain", ",", "widefactor", "=", "args", ".", "widefactor", ")", "\n", "num_classes", "=", "8", "\n", "model", ".", "fc", "=", "nn", ".", "Linear", "(", "model", ".", "fc", ".", "in_features", ",", "num_classes", ")", "\n", "\n", "attack", "=", "FastGradientSignUntargeted", "(", "model", ",", "\n", "args", ".", "epsilon", ",", "\n", "args", ".", "alpha", ",", "\n", "min_val", "=", "0", ",", "\n", "max_val", "=", "1", ",", "\n", "max_iters", "=", "args", ".", "k", ",", "\n", "_type", "=", "args", ".", "perturbation_type", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "# model = nn.DataParallel(model).cuda()", "\n", "        ", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "", "trainer", "=", "Trainer", "(", "args", ",", "logger", ",", "attack", ")", "\n", "if", "args", ".", "todo", "==", "'train'", ":", "\n", "        ", "transform_train", "=", "tv", ".", "transforms", ".", "Compose", "(", "[", "\n", "tv", ".", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "tv", ".", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "tv", ".", "transforms", ".", "Lambda", "(", "lambda", "x", ":", "F", ".", "pad", "(", "x", ".", "unsqueeze", "(", "0", ")", ",", "\n", "(", "4", "*", "6", ",", "4", "*", "6", ",", "4", "*", "6", ",", "4", "*", "6", ")", ",", "mode", "=", "'constant'", ",", "value", "=", "0", ")", ".", "squeeze", "(", ")", ")", ",", "\n", "tv", ".", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "tv", ".", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "tv", ".", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.3", ",", "contrast", "=", "0.3", ",", "\n", "saturation", "=", "0.3", ",", "hue", "=", "0.3", ")", ",", "\n", "# tv.transforms.RandomRotation(25),", "\n", "tv", ".", "transforms", ".", "RandomAffine", "(", "25", ",", "translate", "=", "(", "0.2", ",", "0.2", ")", ",", "\n", "scale", "=", "(", "0.8", ",", "1.2", ")", ",", "\n", "shear", "=", "10", ")", ",", "\n", "tv", ".", "transforms", ".", "RandomCrop", "(", "256", ")", ",", "\n", "tv", ".", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "tr_dataset", "=", "patd", ".", "PatchDataset", "(", "path_to_images", "=", "args", ".", "data_root", ",", "\n", "fold", "=", "'train'", ",", "\n", "sample", "=", "args", ".", "subsample", ",", "\n", "transform", "=", "transform_train", ")", "\n", "tr_loader", "=", "DataLoader", "(", "tr_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "12", ")", "\n", "\n", "# evaluation during training", "\n", "transform_test", "=", "tv", ".", "transforms", ".", "Compose", "(", "[", "\n", "tv", ".", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "tv", ".", "transforms", ".", "ToTensor", "(", ")", "\n", "]", ")", "\n", "va_dataset", "=", "patd", ".", "PatchDataset", "(", "path_to_images", "=", "args", ".", "data_root", ",", "\n", "fold", "=", "'valid'", ",", "\n", "transform", "=", "transform_test", ")", "\n", "te_loader", "=", "DataLoader", "(", "va_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "12", ")", "\n", "\n", "trainer", ".", "train", "(", "model", ",", "tr_loader", ",", "te_loader", ",", "args", ".", "adv_train", ")", "\n", "\n", "", "elif", "args", ".", "todo", "==", "'test'", ":", "# set 'valid' fold for knee and luna dataset and set 'test' fold for CXR dataset", "\n", "        ", "te_dataset", "=", "patd", ".", "PatchDataset", "(", "path_to_images", "=", "args", ".", "data_root", ",", "\n", "fold", "=", "'test'", ",", "\n", "transform", "=", "tv", ".", "transforms", ".", "Compose", "(", "[", "\n", "tv", ".", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "tv", ".", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", ")", "\n", "te_loader", "=", "DataLoader", "(", "te_dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "1", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "load_checkpoint", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "std_acc", ",", "adv_acc", "=", "trainer", ".", "test", "(", "model", ",", "te_loader", ",", "adv_test", "=", "False", ",", "use_pseudo_label", "=", "False", ",", "if_AUC", "=", "True", ")", "\n", "print", "(", "\"std acc: %.4f, adv_acc: %.4f\"", "%", "(", "std_acc", "*", "100", ",", "adv_acc", "*", "100", ")", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.None.patch_dataset.PatchDataset.__init__": [[10, 30], ["pandas.read_csv", "patch_dataset.PatchDataset.df.set_index", "patch_dataset.PatchDataset.df.sample", "print", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path_to_images", ",", "fold", ",", "sample", "=", "0", ",", "transform", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "transform", "=", "transform", "\n", "self", ".", "path_to_images", "=", "path_to_images", "\n", "self", ".", "df", "=", "pd", ".", "read_csv", "(", "\"./label/cheXPert_label_.csv\"", ")", "\n", "self", ".", "fold", "=", "fold", "\n", "# the 'fold' column says something regarding the train/valid/test seperation", "\n", "self", ".", "df", "=", "self", ".", "df", "[", "self", ".", "df", "[", "'fold'", "]", "==", "fold", "]", "\n", "if", "(", "sample", ">", "0", "and", "sample", "<", "len", "(", "self", ".", "df", ")", ")", ":", "\n", "            ", "self", ".", "df", "=", "self", ".", "df", ".", "sample", "(", "frac", "=", "sample", ",", "random_state", "=", "42", ")", "\n", "print", "(", "'subsample the training set with ratio %f'", "%", "sample", ")", "\n", "\n", "# self.df = self.df.set_index('scan index')", "\n", "", "self", ".", "df", "=", "self", ".", "df", ".", "set_index", "(", "'Image Index'", ")", "\n", "# df.set_index: set the dataframe index using existing columns. ", "\n", "# self.PRED_LABEL = ['malignancy']", "\n", "# self.PRED_LABEL = ['healthy', 'partially injured', 'completely ruptured']", "\n", "self", ".", "PRED_LABEL", "=", "[", "'No Finding'", ",", "'Cardiomegaly'", ",", "'Edema'", ",", "\n", "'Consolidation'", ",", "'Pneumonia'", ",", "'Atelectasis'", ",", "\n", "'Pneumothorax'", ",", "'Pleural Effusion'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.None.patch_dataset.PatchDataset.__len__": [[31, 33], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "df", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.None.patch_dataset.PatchDataset.__getitem__": [[34, 53], ["PIL.Image.open", "patch_dataset.PatchDataset.convert", "numpy.zeros", "range", "os.path.join", "len", "len", "patch_dataset.PatchDataset.transform", "patch_dataset.PatchDataset.df[].iloc[].astype", "patch_dataset.PatchDataset.df[].iloc[].astype", "patch_dataset.PatchDataset.PRED_LABEL[].strip", "patch_dataset.PatchDataset.PRED_LABEL[].strip"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "filename", "=", "'{0:06d}'", ".", "format", "(", "self", ".", "df", ".", "index", "[", "idx", "]", ")", "\n", "image", "=", "Image", ".", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "path_to_images", ",", "filename", "+", "'.png'", ")", "# chexpert", "\n", "# os.path.join(self.path_to_images, self.fold, self.df.index[idx])      # knee  ", "\n", "# os.path.join(self.path_to_images, self.df.index[idx])                 # Luna nih", "\n", ")", "\n", "image", "=", "image", ".", "convert", "(", "'RGB'", ")", "\n", "label", "=", "np", ".", "zeros", "(", "len", "(", "self", ".", "PRED_LABEL", ")", ",", "dtype", "=", "int", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "self", ".", "PRED_LABEL", ")", ")", ":", "\n", "# can leave zero if zero, else make one", "\n", "            ", "if", "(", "self", ".", "df", "[", "self", ".", "PRED_LABEL", "[", "i", "]", ".", "strip", "(", ")", "]", ".", "iloc", "[", "idx", "]", ".", "astype", "(", "'int'", ")", ">", "0", ")", ":", "\n", "# df.series.str.strip: remove leading and traling characters", "\n", "                ", "label", "[", "i", "]", "=", "self", ".", "df", "[", "self", ".", "PRED_LABEL", "[", "i", "]", ".", "strip", "(", ")", "]", ".", "iloc", "[", "idx", "]", ".", "astype", "(", "'int'", ")", "\n", "# Becareful with the 'int' type here !!!", "\n", "", "", "if", "self", ".", "transform", ":", "\n", "            ", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "\n", "", "return", "(", "image", ",", "label", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.None.test.Trainer.__init__": [[21, 24], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "attack", ",", "log_folder", ")", ":", "\n", "        ", "self", ".", "attack", "=", "attack", "\n", "self", ".", "log_folder", "=", "log_folder", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.None.test.Trainer.test": [[25, 82], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "numpy.squeeze", "numpy.squeeze", "numpy.squeeze", "numpy.save", "numpy.save", "numpy.save", "model.eval", "model", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "numpy.mean", "numpy.array", "numpy.array", "numpy.array", "os.path.join", "os.path.join", "os.path.join", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "utils.tensor2cuda", "utils.tensor2cuda", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "utils.evaluate_", "label_list.append", "pred_list.append", "model.eval", "model", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "numpy.mean", "out.cpu().numpy", "numpy.squeeze.cpu().numpy", "numpy.squeeze.cpu().numpy", "torch.sigmoid.cpu().numpy", "torch.sigmoid.cpu().numpy", "torch.sigmoid.cpu().numpy", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "test.Trainer.attack.perturb", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "predadv_list.append", "utils.evaluate_", "torch.sigmoid.cpu().numpy", "torch.sigmoid.cpu().numpy", "torch.sigmoid.cpu().numpy", "adv_out.cpu().numpy", "numpy.squeeze.cpu().numpy", "str", "out.cpu", "numpy.squeeze.cpu", "numpy.squeeze.cpu", "torch.sigmoid.cpu", "torch.sigmoid.cpu", "torch.sigmoid.cpu", "torch.sigmoid.cpu", "torch.sigmoid.cpu", "torch.sigmoid.cpu", "adv_out.cpu", "numpy.squeeze.cpu"], "methods", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.tensor2cuda", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.tensor2cuda", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.evaluate_", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.attack.fast_gradient_sign_untargeted.FastGradientSignUntargeted.perturb", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.evaluate_"], ["", "def", "test", "(", "self", ",", "model", ",", "loader", ",", "epsilon", ",", "adv_test", "=", "False", ",", "\n", "use_pseudo_label", "=", "False", ",", "if_AUC", "=", "False", ")", ":", "\n", "# adv_test is False, return adv_acc as -1 ", "\n", "        ", "total_acc", "=", "0.0", "\n", "num", "=", "0", "\n", "total_adv_acc", "=", "0.0", "\n", "total_stdloss", "=", "0.0", "\n", "total_advloss", "=", "0.0", "\n", "t", "=", "Variable", "(", "torch", ".", "Tensor", "(", "[", "0.5", "]", ")", ".", "cuda", "(", ")", ")", "# threshold to compute accuracy", "\n", "label_list", "=", "[", "]", "\n", "pred_list", "=", "[", "]", "\n", "predadv_list", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "data", ",", "label", "in", "loader", ":", "\n", "                ", "data", ",", "label", "=", "tensor2cuda", "(", "data", ")", ",", "tensor2cuda", "(", "label", ")", "\n", "model", ".", "eval", "(", ")", "\n", "output", "=", "model", "(", "data", ",", "[", "0", "]", ")", "\n", "std_loss", "=", "F", ".", "binary_cross_entropy", "(", "torch", ".", "sigmoid", "(", "output", ")", ",", "label", ")", "\n", "pred", "=", "torch", ".", "sigmoid", "(", "output", ")", "\n", "out", "=", "(", "pred", ">", "t", ")", ".", "float", "(", ")", "\n", "te_acc", "=", "np", ".", "mean", "(", "evaluate_", "(", "out", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "total_acc", "+=", "te_acc", "\n", "total_stdloss", "+=", "std_loss", "\n", "if", "if_AUC", ":", "\n", "                    ", "label_list", ".", "append", "(", "label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "pred_list", ".", "append", "(", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "# num += output.shape[0]", "\n", "", "num", "+=", "1", "\n", "\n", "if", "adv_test", ":", "\n", "# use predicted label as target label", "\n", "                    ", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "                        ", "adv_data", "=", "self", ".", "attack", ".", "perturb", "(", "data", ",", "\n", "pred", "if", "use_pseudo_label", "else", "label", ",", "\n", "'mean'", ",", "False", ",", "True", ")", "\n", "", "model", ".", "eval", "(", ")", "\n", "adv_output", "=", "model", "(", "adv_data", ",", "[", "1", "]", ")", "\n", "adv_loss", "=", "F", ".", "binary_cross_entropy", "(", "torch", ".", "sigmoid", "(", "adv_output", ")", ",", "label", ")", "\n", "adv_pred", "=", "torch", ".", "sigmoid", "(", "adv_output", ")", "\n", "if", "if_AUC", ":", "\n", "                        ", "predadv_list", ".", "append", "(", "adv_pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "adv_out", "=", "(", "adv_pred", ">", "t", ")", ".", "float", "(", ")", "\n", "adv_acc", "=", "np", ".", "mean", "(", "evaluate_", "(", "adv_out", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "total_adv_acc", "+=", "adv_acc", "\n", "total_advloss", "+=", "adv_loss", "\n", "", "else", ":", "\n", "                    ", "total_adv_acc", "=", "-", "num", "\n", "", "", "", "if", "if_AUC", ":", "\n", "            ", "pred", "=", "np", ".", "squeeze", "(", "np", ".", "array", "(", "pred_list", ")", ")", "\n", "predadv", "=", "np", ".", "squeeze", "(", "np", ".", "array", "(", "predadv_list", ")", ")", "\n", "label", "=", "np", ".", "squeeze", "(", "np", ".", "array", "(", "label_list", ")", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "log_folder", ",", "'y_pred.npy'", ")", ",", "pred", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "log_folder", ",", "'y_true.npy'", ")", ",", "label", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "log_folder", ",", "'y_predadv_'", "+", "str", "(", "epsilon", ")", "+", "'.npy'", ")", ",", "predadv", ")", "\n", "", "else", ":", "\n", "            ", "return", "total_acc", "/", "num", ",", "total_adv_acc", "/", "num", ",", "total_stdloss", "/", "num", ",", "total_advloss", "/", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.None.test.main": [[83, 121], ["utils.makedirs", "model.resnetdsbn.resnet50dsbn", "torch.Linear", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "model.cuda.cuda", "numpy.linspace", "range", "len", "attack.FastGradientSignUntargeted", "test.Trainer", "patch_dataset.PatchDataset", "torch.utils.data.DataLoader", "torch.load", "torch.load", "torch.load", "model.cuda.load_state_dict", "Trainer.test", "torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor"], "function", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.makedirs", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.resnetdsbn.resnet50dsbn", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.None.test.Trainer.test"], ["", "", "", "def", "main", "(", ")", ":", "\n", "    ", "log_folder", "=", "'./results/plots/robustness/revision/luna/bn_adv/'", "\n", "makedirs", "(", "log_folder", ")", "\n", "# model = models.resnet50(pretrained=False)", "\n", "model", "=", "resnet50dsbn", "(", ")", "\n", "num_classes", "=", "1", "\n", "model", ".", "fc", "=", "nn", ".", "Linear", "(", "model", ".", "fc", ".", "in_features", ",", "num_classes", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "", "todo", "=", "'test'", "\n", "if", "todo", "==", "'test'", ":", "# set 'valid' fold for knee and luna dataset and set 'test' fold for CXR dataset", "\n", "        ", "eps", "=", "np", ".", "linspace", "(", "0", ",", "0.01", ",", "num", "=", "21", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "eps", ")", ")", ":", "\n", "            ", "epsilon", "=", "eps", "[", "i", "]", "\n", "alpha", "=", "epsilon", "/", "2", "\n", "attack", "=", "FastGradientSignUntargeted", "(", "model", ",", "\n", "epsilon", ",", "\n", "alpha", ",", "\n", "min_val", "=", "0", ",", "\n", "max_val", "=", "1", ",", "\n", "max_iters", "=", "10", ",", "\n", "_type", "=", "'linf'", ")", "\n", "trainer", "=", "Trainer", "(", "attack", ",", "log_folder", ")", "\n", "te_dataset", "=", "patd", ".", "PatchDataset", "(", "path_to_images", "=", "'../luna16/IMGs/'", ",", "\n", "fold", "=", "'test'", ",", "\n", "transform", "=", "tv", ".", "transforms", ".", "Compose", "(", "[", "\n", "tv", ".", "transforms", ".", "Resize", "(", "64", ")", ",", "\n", "tv", ".", "transforms", ".", "ToTensor", "(", ")", "\n", "]", ")", ")", "\n", "te_loader", "=", "DataLoader", "(", "te_dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "1", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "'./checkpoint/luna/luna_linf_/checkpoint_best.pth'", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "trainer", ".", "test", "(", "model", ",", "te_loader", ",", "i", ",", "adv_test", "=", "True", ",", "\n", "use_pseudo_label", "=", "False", ",", "if_AUC", "=", "True", ")", "\n", "# print(\"std acc: %.4f, adv_acc: %.4f\" % (std_acc * 100, adv_acc * 100))", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.None.loss_lipschitz.draw_loss": [[17, 67], ["numpy.meshgrid", "loss_lipschitz.draw_loss.grad_at_delta"], "function", ["None"], ["def", "draw_loss", "(", "model", ",", "X", ",", "epsilon", ",", "bn", ",", "name", ",", "dsbn", "=", "True", ",", "save", "=", "False", ",", "plot", "=", "False", ")", ":", "\n", "    ", "Xi", ",", "Yi", "=", "np", ".", "meshgrid", "(", "np", ".", "linspace", "(", "-", "epsilon", ",", "epsilon", ",", "14", ")", ",", "np", ".", "linspace", "(", "-", "epsilon", ",", "epsilon", ",", "14", ")", ")", "\n", "\n", "def", "grad_at_delta", "(", "delta", ")", ":", "\n", "        ", "delta", ".", "requires_grad_", "(", "True", ")", "\n", "if", "dsbn", ":", "\n", "            ", "nn", ".", "BCELoss", "(", ")", "(", "torch", ".", "sigmoid", "(", "model", "(", "X", "+", "delta", ",", "bn", ")", ")", ",", "y", ")", ".", "backward", "(", ")", "\n", "", "else", ":", "\n", "            ", "nn", ".", "BCELoss", "(", ")", "(", "torch", ".", "sigmoid", "(", "model", "(", "X", "+", "delta", ")", ")", ",", "y", ")", ".", "backward", "(", ")", "\n", "", "return", "delta", ".", "grad", ".", "detach", "(", ")", ".", "sign", "(", ")", ".", "view", "(", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "dir1", "=", "grad_at_delta", "(", "torch", ".", "zeros_like", "(", "X", ",", "requires_grad", "=", "True", ")", ")", "\n", "delta2", "=", "torch", ".", "zeros_like", "(", "X", ",", "requires_grad", "=", "True", ")", "\n", "delta2", ".", "data", "=", "torch", ".", "tensor", "(", "dir1", ")", ".", "view_as", "(", "X", ")", ".", "cuda", "(", ")", "\n", "dir2", "=", "grad_at_delta", "(", "delta2", ")", "\n", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "dir2", "=", "np", ".", "sign", "(", "np", ".", "random", ".", "randn", "(", "dir1", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "all_deltas", "=", "torch", ".", "tensor", "(", "(", "np", ".", "array", "(", "[", "Xi", ".", "flatten", "(", ")", ",", "Yi", ".", "flatten", "(", ")", "]", ")", ".", "T", "@", "\n", "np", ".", "array", "(", "[", "dir2", ",", "dir1", "]", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "cuda", "(", ")", "\n", "all_deltas", "=", "all_deltas", ".", "view", "(", "-", "1", ",", "3", ",", "256", ",", "256", ")", "\n", "Zi", "=", "torch", ".", "zeros", "(", "14", "*", "14", ")", "\n", "for", "n", ",", "delta", "in", "enumerate", "(", "all_deltas", ")", ":", "\n", "        ", "if", "dsbn", ":", "\n", "            ", "yp", "=", "torch", ".", "sigmoid", "(", "model", "(", "delta", "+", "X", ",", "bn", ")", ")", "\n", "", "else", ":", "\n", "            ", "yp", "=", "torch", ".", "sigmoid", "(", "model", "(", "delta", "+", "X", ")", ")", "\n", "", "zi", "=", "nn", ".", "BCELoss", "(", "reduction", "=", "\"mean\"", ")", "(", "yp", ",", "y", ")", "\n", "Zi", "[", "n", "]", "=", "zi", "\n", "", "Zi", "=", "Zi", ".", "reshape", "(", "*", "Xi", ".", "shape", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "#Zi = (Zi-Zi.min())/(Zi.max() - Zi.min())", "\n", "if", "plot", ":", "\n", "        ", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "10", ",", "10", ")", ")", "\n", "ax", "=", "fig", ".", "gca", "(", "projection", "=", "'3d'", ")", "\n", "ls", "=", "LightSource", "(", "azdeg", "=", "0", ",", "altdeg", "=", "200", ")", "\n", "rgb", "=", "ls", ".", "shade", "(", "Zi", ",", "plt", ".", "cm", ".", "coolwarm", ")", "\n", "ax", ".", "set_zlim", "(", "0", ",", "1.0", ")", "\n", "surf", "=", "ax", ".", "plot_surface", "(", "Xi", ",", "Yi", ",", "Zi", ",", "rstride", "=", "1", ",", "cstride", "=", "1", ",", "lw", "=", "0.5", ",", "\n", "antialiased", "=", "True", ",", "facecolors", "=", "rgb", ",", "alpha", "=", "0.7", ")", "\n", "surf", "=", "ax", ".", "contourf", "(", "Xi", ",", "Yi", ",", "Zi", ",", "zdir", "=", "'z'", ",", "offset", "=", "0", ",", "cmap", "=", "plt", ".", "cm", ".", "coolwarm", ")", "\n", "ax", ".", "set_xlabel", "(", "r'$\\epsilon_{Rad.}$'", ",", "fontsize", "=", "20", ")", "\n", "ax", ".", "set_ylabel", "(", "r'$\\epsilon_{\\nabla_x \\mathcal{L}}$'", ",", "fontsize", "=", "20", ")", "\n", "surf", ".", "set_clim", "(", "0.2", ",", "0.8", ")", "\n", "\n", "# plt.show()", "\n", "", "if", "save", ":", "\n", "        ", "plt", ".", "savefig", "(", "name", ",", "format", "=", "'png'", ",", "dpi", "=", "500", ",", "bbox_inches", "=", "'tight'", ",", "pad_inches", "=", "0", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "", "return", "Zi", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.None.loss_surf.draw_loss": [[18, 68], ["numpy.meshgrid", "loss_surf.draw_loss.grad_at_delta"], "function", ["None"], ["def", "draw_loss", "(", "model", ",", "X", ",", "epsilon", ",", "bn", ",", "name", "=", "None", ",", "dsbn", "=", "True", ",", "save", "=", "False", ",", "num", "=", "14", ")", ":", "\n", "    ", "Xi", ",", "Yi", "=", "np", ".", "meshgrid", "(", "np", ".", "linspace", "(", "-", "epsilon", ",", "epsilon", ",", "num", ")", ",", "np", ".", "linspace", "(", "-", "epsilon", ",", "epsilon", ",", "num", ")", ")", "\n", "\n", "def", "grad_at_delta", "(", "delta", ")", ":", "\n", "        ", "delta", ".", "requires_grad_", "(", "True", ")", "\n", "if", "dsbn", ":", "\n", "            ", "nn", ".", "BCELoss", "(", ")", "(", "torch", ".", "sigmoid", "(", "model", "(", "X", "+", "delta", ",", "bn", ")", ")", ",", "y", ")", ".", "backward", "(", ")", "\n", "", "else", ":", "\n", "            ", "nn", ".", "BCELoss", "(", ")", "(", "torch", ".", "sigmoid", "(", "model", "(", "X", "+", "delta", ")", ")", ",", "y", ")", ".", "backward", "(", ")", "\n", "", "return", "delta", ".", "grad", ".", "detach", "(", ")", ".", "sign", "(", ")", ".", "view", "(", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "dir1", "=", "grad_at_delta", "(", "torch", ".", "zeros_like", "(", "X", ",", "requires_grad", "=", "True", ")", ")", "\n", "delta2", "=", "torch", ".", "zeros_like", "(", "X", ",", "requires_grad", "=", "True", ")", "\n", "delta2", ".", "data", "=", "torch", ".", "tensor", "(", "dir1", ")", ".", "view_as", "(", "X", ")", ".", "cpu", "(", ")", "\n", "dir2", "=", "grad_at_delta", "(", "delta2", ")", "\n", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "dir2", "=", "np", ".", "sign", "(", "np", ".", "random", ".", "randn", "(", "dir1", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "all_deltas", "=", "torch", ".", "tensor", "(", "(", "np", ".", "array", "(", "[", "Xi", ".", "flatten", "(", ")", ",", "Yi", ".", "flatten", "(", ")", "]", ")", ".", "T", "@", "\n", "np", ".", "array", "(", "[", "dir2", ",", "dir1", "]", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "cpu", "(", ")", "\n", "all_deltas", "=", "all_deltas", ".", "view", "(", "-", "1", ",", "3", ",", "256", ",", "256", ")", "\n", "Zi", "=", "torch", ".", "zeros", "(", "num", "**", "2", ")", "\n", "for", "n", ",", "delta", "in", "enumerate", "(", "all_deltas", ")", ":", "\n", "        ", "if", "dsbn", ":", "\n", "            ", "yp", "=", "torch", ".", "sigmoid", "(", "model", "(", "delta", "+", "X", ",", "bn", ")", ")", "\n", "", "else", ":", "\n", "            ", "yp", "=", "torch", ".", "sigmoid", "(", "model", "(", "delta", "+", "X", ")", ")", "\n", "", "zi", "=", "nn", ".", "BCELoss", "(", "reduction", "=", "\"mean\"", ")", "(", "yp", ",", "y", ")", "\n", "Zi", "[", "n", "]", "=", "zi", "\n", "", "Zi", "=", "Zi", ".", "reshape", "(", "*", "Xi", ".", "shape", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "#Zi = (Zi-Zi.min())/(Zi.max() - Zi.min())", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "10", ",", "10", ")", ")", "\n", "ax", "=", "fig", ".", "gca", "(", "projection", "=", "'3d'", ")", "\n", "ls", "=", "LightSource", "(", "azdeg", "=", "0", ",", "altdeg", "=", "200", ")", "\n", "rgb", "=", "ls", ".", "shade", "(", "Zi", ",", "plt", ".", "cm", ".", "coolwarm", ")", "\n", "ax", ".", "set_zlim", "(", "0", ",", "1.0", ")", "\n", "surf", "=", "ax", ".", "plot_surface", "(", "Xi", ",", "Yi", ",", "Zi", ",", "rstride", "=", "1", ",", "cstride", "=", "1", ",", "lw", "=", "0.5", ",", "\n", "antialiased", "=", "True", ",", "facecolors", "=", "rgb", ",", "alpha", "=", "0.7", ")", "\n", "surf", "=", "ax", ".", "contourf", "(", "Xi", ",", "Yi", ",", "Zi", ",", "zdir", "=", "'z'", ",", "offset", "=", "0", ",", "cmap", "=", "plt", ".", "cm", ".", "coolwarm", ")", "\n", "ax", ".", "set_xlabel", "(", "r'$\\epsilon_{Rad.}$'", ",", "fontsize", "=", "20", ")", "\n", "ax", ".", "set_ylabel", "(", "r'$\\epsilon_{\\nabla_x \\mathcal{L}}$'", ",", "fontsize", "=", "20", ")", "\n", "surf", ".", "set_clim", "(", "0.2", ",", "0.8", ")", "\n", "\n", "# plt.show()", "\n", "if", "save", ":", "\n", "        ", "plt", ".", "savefig", "(", "name", ",", "format", "=", "'png'", ",", "dpi", "=", "500", ",", "bbox_inches", "=", "'tight'", ",", "pad_inches", "=", "0", ")", "\n", "", "plt", ".", "close", "(", ")", "\n", "\n", "return", "Zi", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.LabelDict.__init__": [[10, 20], ["utils.LabelDict.label_dict.items"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", "=", "'cifar-10'", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "if", "dataset", "==", "'cifar-10'", ":", "\n", "            ", "self", ".", "label_dict", "=", "{", "0", ":", "'airplane'", ",", "1", ":", "'automobile'", ",", "2", ":", "'bird'", ",", "3", ":", "'cat'", ",", "\n", "4", ":", "'deer'", ",", "5", ":", "'dog'", ",", "6", ":", "'frog'", ",", "7", ":", "'horse'", ",", "\n", "8", ":", "'ship'", ",", "9", ":", "'truck'", "}", "\n", "", "if", "dataset", "==", "'luna'", ":", "\n", "            ", "self", ".", "label_dict", "=", "{", "0", ":", "'benign'", ",", "1", ":", "'malignant'", "}", "\n", "\n", "", "self", ".", "class_dict", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "label_dict", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.LabelDict.label2class": [[21, 24], ["None"], "methods", ["None"], ["", "def", "label2class", "(", "self", ",", "label", ")", ":", "\n", "        ", "assert", "label", "in", "self", ".", "label_dict", ",", "'the label %d is not in %s'", "%", "(", "label", ",", "self", ".", "dataset", ")", "\n", "return", "self", ".", "label_dict", "[", "label", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.LabelDict.class2label": [[25, 29], ["isinstance"], "methods", ["None"], ["", "def", "class2label", "(", "self", ",", "_class", ")", ":", "\n", "        ", "assert", "isinstance", "(", "_class", ",", "str", ")", "\n", "assert", "_class", "in", "self", ".", "class_dict", ",", "'the class %s is not in %s'", "%", "(", "_class", ",", "self", ".", "dataset", ")", "\n", "return", "self", ".", "class_dict", "[", "_class", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.list2cuda": [[30, 33], ["numpy.array", "utils.numpy2cuda"], "function", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.numpy2cuda"], ["", "", "def", "list2cuda", "(", "_list", ")", ":", "\n", "    ", "array", "=", "np", ".", "array", "(", "_list", ")", "\n", "return", "numpy2cuda", "(", "array", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.numpy2cuda": [[34, 38], ["torch.from_numpy", "utils.tensor2cuda"], "function", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.tensor2cuda"], ["", "def", "numpy2cuda", "(", "array", ")", ":", "\n", "    ", "tensor", "=", "torch", ".", "from_numpy", "(", "array", ")", "\n", "\n", "return", "tensor2cuda", "(", "tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.tensor2cuda": [[39, 44], ["torch.cuda.is_available", "tensor.cuda().float.cuda().float", "tensor.cuda().float.cuda"], "function", ["None"], ["", "def", "tensor2cuda", "(", "tensor", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "tensor", "=", "tensor", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.one_hot": [[45, 63], ["torch.zeros", "torch.zeros.scatter_", "len", "len", "ids.cpu().unsqueeze", "ids.cpu"], "function", ["None"], ["", "def", "one_hot", "(", "ids", ",", "n_class", ")", ":", "\n", "# --------------------- ", "\n", "# author\uff1ake1th ", "\n", "# source\uff1aCSDN ", "\n", "# artical\uff1ahttps://blog.csdn.net/u012436149/article/details/77017832 ", "\n", "    ", "b\"\"\"\n    ids: (list, ndarray) shape:[batch_size]\n    out_tensor:FloatTensor shape:[batch_size, depth]\n    \"\"\"", "\n", "\n", "assert", "len", "(", "ids", ".", "shape", ")", "==", "1", ",", "'the ids should be 1-D'", "\n", "# ids = torch.LongTensor(ids).view(-1,1) ", "\n", "\n", "out_tensor", "=", "torch", ".", "zeros", "(", "len", "(", "ids", ")", ",", "n_class", ")", "\n", "\n", "out_tensor", ".", "scatter_", "(", "1", ",", "ids", ".", "cpu", "(", ")", ".", "unsqueeze", "(", "1", ")", ",", "1.", ")", "\n", "\n", "return", "out_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.evaluate": [[64, 70], ["correct.mean", "correct.sum"], "function", ["None"], ["", "def", "evaluate", "(", "_input", ",", "_target", ",", "method", "=", "'mean'", ")", ":", "\n", "    ", "correct", "=", "(", "_input", "==", "_target", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "method", "==", "'mean'", ":", "\n", "        ", "return", "correct", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "correct", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.evaluate_": [[71, 78], ["range", "results.append", "sklearn.metrics.accuracy_score"], "function", ["None"], ["", "", "def", "evaluate_", "(", "_input", ",", "_target", ")", ":", "\n", "    ", "results", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "_input", ".", "shape", "[", "-", "1", "]", ")", ":", "\n", "        ", "input_vec", "=", "_input", "[", ":", ",", "n", "]", "\n", "target_vec", "=", "_target", "[", ":", ",", "n", "]", "\n", "results", ".", "append", "(", "accuracy_score", "(", "target_vec", ",", "input_vec", ")", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.create_logger": [[79, 101], ["logging.getLogger", "logging.getLogger.setLevel", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.getLogger.addHandler", "os.path.join", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.getLogger.addHandler"], "function", ["None"], ["", "def", "create_logger", "(", "save_path", "=", "''", ",", "file_type", "=", "''", ",", "level", "=", "'debug'", ")", ":", "\n", "\n", "    ", "if", "level", "==", "'debug'", ":", "\n", "        ", "_level", "=", "logging", ".", "DEBUG", "\n", "", "elif", "level", "==", "'info'", ":", "\n", "        ", "_level", "=", "logging", ".", "INFO", "\n", "\n", "", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "setLevel", "(", "_level", ")", "\n", "\n", "cs", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "cs", ".", "setLevel", "(", "_level", ")", "\n", "logger", ".", "addHandler", "(", "cs", ")", "\n", "\n", "if", "save_path", "!=", "''", ":", "\n", "        ", "file_name", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "file_type", "+", "'_log.txt'", ")", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "file_name", ",", "mode", "=", "'w'", ")", "\n", "fh", ".", "setLevel", "(", "_level", ")", "\n", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "\n", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.makedirs": [[102, 106], ["os.path.exists", "print", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.makedirs"], ["", "def", "makedirs", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "print", "(", "path", ")", "\n", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.load_model": [[107, 110], ["model.load_state_dict", "torch.load"], "function", ["None"], ["", "", "def", "load_model", "(", "model", ",", "file_name", ")", ":", "\n", "    ", "model", ".", "load_state_dict", "(", "\n", "torch", ".", "load", "(", "file_name", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.save_model": [[111, 113], ["torch.save", "model.state_dict"], "function", ["None"], ["", "def", "save_model", "(", "model", ",", "file_name", ")", ":", "\n", "    ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "file_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.count_parameters": [[114, 118], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["", "def", "count_parameters", "(", "model", ")", ":", "\n", "# copy from https://discuss.pytorch.org/t/how-do-i-check-the-number-of-parameters-of-a-model/4325/8", "\n", "# baldassarre.fe's reply", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.gram_linear": [[122, 134], ["x.dot"], "function", ["None"], ["", "def", "gram_linear", "(", "x", ")", ":", "\n", "  ", "\"\"\"Compute Gram (kernel) matrix for a linear kernel.\n    Gram (correlation) matrix is defined as correlation between \n    actvtivations across test samples.\n\n  Args:\n    x: A num_examples x num_features matrix of features.\n\n  Returns:\n    A num_examples x num_examples Gram matrix of examples.\n  \"\"\"", "\n", "return", "x", ".", "dot", "(", "x", ".", "T", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.gram_rbf": [[136, 153], ["x.dot", "numpy.diag", "numpy.median", "numpy.exp"], "function", ["None"], ["", "def", "gram_rbf", "(", "x", ",", "threshold", "=", "1.0", ")", ":", "\n", "  ", "\"\"\"Compute Gram (kernel) matrix for an RBF kernel.\n\n  Args:\n    x: A num_examples x num_features matrix of features.\n    threshold: Fraction of median Euclidean distance to use as RBF kernel\n      bandwidth. (This is the heuristic we use in the paper. There are other\n      possible ways to set the bandwidth; we didn't try them.)\n\n  Returns:\n    A num_examples x num_examples Gram matrix of examples.\n  \"\"\"", "\n", "dot_products", "=", "x", ".", "dot", "(", "x", ".", "T", ")", "\n", "sq_norms", "=", "np", ".", "diag", "(", "dot_products", ")", "\n", "sq_distances", "=", "-", "2", "*", "dot_products", "+", "sq_norms", "[", ":", ",", "None", "]", "+", "sq_norms", "[", "None", ",", ":", "]", "\n", "sq_median_distance", "=", "np", ".", "median", "(", "sq_distances", ")", "\n", "return", "np", ".", "exp", "(", "-", "sq_distances", "/", "(", "2", "*", "threshold", "**", "2", "*", "sq_median_distance", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.center_gram": [[155, 192], ["gram.copy.copy", "numpy.allclose", "ValueError", "numpy.fill_diagonal", "numpy.fill_diagonal", "numpy.mean", "numpy.sum", "numpy.sum", "numpy.mean"], "function", ["None"], ["", "def", "center_gram", "(", "gram", ",", "unbiased", "=", "False", ")", ":", "\n", "  ", "\"\"\"Center a symmetric Gram matrix.\n\n  This is equvialent to centering the (possibly infinite-dimensional) features\n  induced by the kernel before computing the Gram matrix.\n\n  Args:\n    gram: A num_examples x num_examples symmetric matrix.\n    unbiased: Whether to adjust the Gram matrix in order to compute an unbiased\n      estimate of HSIC. Note that this estimator may be negative.\n\n  Returns:\n    A symmetric matrix with centered columns and rows.\n  \"\"\"", "\n", "if", "not", "np", ".", "allclose", "(", "gram", ",", "gram", ".", "T", ")", ":", "\n", "    ", "raise", "ValueError", "(", "'Input must be a symmetric matrix.'", ")", "\n", "", "gram", "=", "gram", ".", "copy", "(", ")", "\n", "\n", "if", "unbiased", ":", "\n", "# This formulation of the U-statistic, from Szekely, G. J., & Rizzo, M.", "\n", "# L. (2014). Partial distance correlation with methods for dissimilarities.", "\n", "# The Annals of Statistics, 42(6), 2382-2412, seems to be more numerically", "\n", "# stable than the alternative from Song et al. (2007).", "\n", "    ", "n", "=", "gram", ".", "shape", "[", "0", "]", "\n", "np", ".", "fill_diagonal", "(", "gram", ",", "0", ")", "\n", "means", "=", "np", ".", "sum", "(", "gram", ",", "0", ",", "dtype", "=", "np", ".", "float64", ")", "/", "(", "n", "-", "2", ")", "\n", "means", "-=", "np", ".", "sum", "(", "means", ")", "/", "(", "2", "*", "(", "n", "-", "1", ")", ")", "\n", "gram", "-=", "means", "[", ":", ",", "None", "]", "\n", "gram", "-=", "means", "[", "None", ",", ":", "]", "\n", "np", ".", "fill_diagonal", "(", "gram", ",", "0", ")", "\n", "", "else", ":", "\n", "    ", "means", "=", "np", ".", "mean", "(", "gram", ",", "0", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "means", "-=", "np", ".", "mean", "(", "means", ")", "/", "2", "\n", "gram", "-=", "means", "[", ":", ",", "None", "]", "\n", "gram", "-=", "means", "[", "None", ",", ":", "]", "\n", "\n", "", "return", "gram", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.cka": [[194, 215], ["utils.center_gram", "utils.center_gram", "center_gram.ravel().dot", "numpy.linalg.norm", "numpy.linalg.norm", "center_gram.ravel", "center_gram.ravel"], "function", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.center_gram", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.center_gram"], ["", "def", "cka", "(", "gram_x", ",", "gram_y", ",", "debiased", "=", "False", ")", ":", "\n", "  ", "\"\"\"Compute CKA.\n\n  Args:\n    gram_x: A num_examples x num_examples Gram matrix.\n    gram_y: A num_examples x num_examples Gram matrix.\n    debiased: Use unbiased estimator of HSIC. CKA may still be biased.\n\n  Returns:\n    The value of CKA between X and Y.\n  \"\"\"", "\n", "gram_x", "=", "center_gram", "(", "gram_x", ",", "unbiased", "=", "debiased", ")", "\n", "gram_y", "=", "center_gram", "(", "gram_y", ",", "unbiased", "=", "debiased", ")", "\n", "\n", "# Note: To obtain HSIC, this should be divided by (n-1)**2 (biased variant) or", "\n", "# n*(n-3) (unbiased variant), but this cancels for CKA.", "\n", "scaled_hsic", "=", "gram_x", ".", "ravel", "(", ")", ".", "dot", "(", "gram_y", ".", "ravel", "(", ")", ")", "\n", "\n", "normalization_x", "=", "np", ".", "linalg", ".", "norm", "(", "gram_x", ")", "\n", "normalization_y", "=", "np", ".", "linalg", ".", "norm", "(", "gram_y", ")", "\n", "return", "scaled_hsic", "/", "(", "normalization_x", "*", "normalization_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils._debiased_dot_product_similarity_helper": [[217, 226], ["sum_squared_rows_x.dot"], "function", ["None"], ["", "def", "_debiased_dot_product_similarity_helper", "(", "\n", "xty", ",", "sum_squared_rows_x", ",", "sum_squared_rows_y", ",", "squared_norm_x", ",", "squared_norm_y", ",", "\n", "n", ")", ":", "\n", "  ", "\"\"\"Helper for computing debiased dot product similarity (i.e. linear HSIC).\"\"\"", "\n", "# This formula can be derived by manipulating the unbiased estimator from", "\n", "# Song et al. (2007).", "\n", "return", "(", "\n", "xty", "-", "n", "/", "(", "n", "-", "2.", ")", "*", "sum_squared_rows_x", ".", "dot", "(", "sum_squared_rows_y", ")", "\n", "+", "squared_norm_x", "*", "squared_norm_y", "/", "(", "(", "n", "-", "1", ")", "*", "(", "n", "-", "2", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.feature_space_linear_cka": [[228, 269], ["numpy.linalg.norm", "numpy.linalg.norm", "numpy.mean", "numpy.mean", "numpy.linalg.norm", "features_x.T.dot", "features_y.T.dot", "numpy.einsum", "numpy.einsum", "numpy.sum", "numpy.sum", "utils._debiased_dot_product_similarity_helper", "numpy.sqrt", "numpy.sqrt", "features_x.T.dot", "utils._debiased_dot_product_similarity_helper", "utils._debiased_dot_product_similarity_helper"], "function", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils._debiased_dot_product_similarity_helper", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils._debiased_dot_product_similarity_helper", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils._debiased_dot_product_similarity_helper"], ["", "def", "feature_space_linear_cka", "(", "features_x", ",", "features_y", ",", "debiased", "=", "False", ")", ":", "\n", "  ", "\"\"\"Compute CKA with a linear kernel, in feature space.\n\n  This is typically faster than computing the Gram matrix when there are fewer\n  features than examples.\n\n  Args:\n    features_x: A num_examples x num_features matrix of features.\n    features_y: A num_examples x num_features matrix of features.\n    debiased: Use unbiased estimator of dot product similarity. CKA may still be\n      biased. Note that this estimator may be negative.\n\n  Returns:\n    The value of CKA between X and Y.\n  \"\"\"", "\n", "features_x", "=", "features_x", "-", "np", ".", "mean", "(", "features_x", ",", "0", ",", "keepdims", "=", "True", ")", "\n", "features_y", "=", "features_y", "-", "np", ".", "mean", "(", "features_y", ",", "0", ",", "keepdims", "=", "True", ")", "\n", "\n", "dot_product_similarity", "=", "np", ".", "linalg", ".", "norm", "(", "features_x", ".", "T", ".", "dot", "(", "features_y", ")", ")", "**", "2", "\n", "normalization_x", "=", "np", ".", "linalg", ".", "norm", "(", "features_x", ".", "T", ".", "dot", "(", "features_x", ")", ")", "\n", "normalization_y", "=", "np", ".", "linalg", ".", "norm", "(", "features_y", ".", "T", ".", "dot", "(", "features_y", ")", ")", "\n", "\n", "if", "debiased", ":", "\n", "    ", "n", "=", "features_x", ".", "shape", "[", "0", "]", "\n", "# Equivalent to np.sum(features_x ** 2, 1) but avoids an intermediate array.", "\n", "sum_squared_rows_x", "=", "np", ".", "einsum", "(", "'ij,ij->i'", ",", "features_x", ",", "features_x", ")", "\n", "sum_squared_rows_y", "=", "np", ".", "einsum", "(", "'ij,ij->i'", ",", "features_y", ",", "features_y", ")", "\n", "squared_norm_x", "=", "np", ".", "sum", "(", "sum_squared_rows_x", ")", "\n", "squared_norm_y", "=", "np", ".", "sum", "(", "sum_squared_rows_y", ")", "\n", "\n", "dot_product_similarity", "=", "_debiased_dot_product_similarity_helper", "(", "\n", "dot_product_similarity", ",", "sum_squared_rows_x", ",", "sum_squared_rows_y", ",", "\n", "squared_norm_x", ",", "squared_norm_y", ",", "n", ")", "\n", "normalization_x", "=", "np", ".", "sqrt", "(", "_debiased_dot_product_similarity_helper", "(", "\n", "normalization_x", "**", "2", ",", "sum_squared_rows_x", ",", "sum_squared_rows_x", ",", "\n", "squared_norm_x", ",", "squared_norm_x", ",", "n", ")", ")", "\n", "normalization_y", "=", "np", ".", "sqrt", "(", "_debiased_dot_product_similarity_helper", "(", "\n", "normalization_y", "**", "2", ",", "sum_squared_rows_y", ",", "sum_squared_rows_y", ",", "\n", "squared_norm_y", ",", "squared_norm_y", ",", "n", ")", ")", "\n", "\n", "", "return", "dot_product_similarity", "/", "(", "normalization_x", "*", "normalization_y", ")", "", "", ""]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.cka.cka.hook_fn": [[8, 13], ["o.cpu().numpy", "o[].cpu().numpy", "o.cpu", "o[].cpu"], "function", ["None"], ["def", "hook_fn", "(", "m", ",", "i", ",", "o", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "visualisation", "[", "m", "]", "=", "o", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "except", "AttributeError", ":", "\n", "        ", "visualisation", "[", "m", "]", "=", "o", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.cka.act.hook_fn": [[45, 50], ["o.cpu().numpy", "o[].cpu().numpy", "o.cpu", "o[].cpu"], "function", ["None"], ["def", "hook_fn", "(", "m", ",", "i", ",", "o", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "visualisation", "[", "m", "]", "=", "o", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "except", "AttributeError", ":", "\n", "        ", "visualisation", "[", "m", "]", "=", "o", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.cka.act.get_all_layers": [[51, 62], ["net.modules", "isinstance", "isinstance", "layer.register_forward_hook"], "function", ["None"], ["", "", "def", "get_all_layers", "(", "net", ")", ":", "\n", "# for name, layer in net._modules.items():", "\n", "#     if isinstance(layer, nn.Sequential):", "\n", "#         get_all_layers(layer)", "\n", "#     elif isinstance(layer, TwoInputSequential):", "\n", "#         get_all_layers(layer)", "\n", "#     else:", "\n", "#         layer.register_forward_hook(hook_fn)", "\n", "    ", "for", "layer", "in", "net", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "layer", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "layer", ",", "Conv2d", ")", ":", "\n", "            ", "layer", ".", "register_forward_hook", "(", "hook_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.attack.fast_gradient_sign_untargeted.FastGradientSignUntargeted.__init__": [[41, 56], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "model", ",", "epsilon", ",", "alpha", ",", "min_val", ",", "max_val", ",", "max_iters", ",", "_type", "=", "'linf'", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "# self.model.eval()", "\n", "# Maximum perturbation", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "# Movement multiplier per iteration", "\n", "self", ".", "alpha", "=", "alpha", "\n", "# Minimum value of the pixels", "\n", "self", ".", "min_val", "=", "min_val", "\n", "# Maximum value of the pixels", "\n", "self", ".", "max_val", "=", "max_val", "\n", "# Maximum numbers of iteration to generated adversaries", "\n", "self", ".", "max_iters", "=", "max_iters", "\n", "# The perturbation of epsilon", "\n", "self", ".", "_type", "=", "_type", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.attack.fast_gradient_sign_untargeted.FastGradientSignUntargeted.perturb": [[57, 111], ["fast_gradient_sign_untargeted.FastGradientSignUntargeted.model.eval", "fast_gradient_sign_untargeted.FastGradientSignUntargeted.model.train", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "utils.tensor2cuda", "project.clamp_", "original_images.clone", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "range", "fast_gradient_sign_untargeted.project", "project.clamp_", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "fast_gradient_sign_untargeted.FastGradientSignUntargeted.model", "fast_gradient_sign_untargeted.FastGradientSignUntargeted.model", "torch.cross_entropy", "torch.cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "utils.tensor2cuda", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.None.main_bn.Trainer.train", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.tensor2cuda", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.attack.fast_gradient_sign_untargeted.project", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.utils.utils.tensor2cuda"], ["", "def", "perturb", "(", "self", ",", "original_images", ",", "labels", ",", "\n", "reduction4loss", "=", "'mean'", ",", "random_start", "=", "False", ",", "\n", "bns", "=", "False", ",", "exclusive", "=", "False", ")", ":", "\n", "# original_images: values are within self.min_val and self.max_val", "\n", "\n", "# The adversaries created from random close points to the original data", "\n", "        ", "if", "random_start", ":", "\n", "            ", "rand_perturb", "=", "torch", ".", "FloatTensor", "(", "original_images", ".", "shape", ")", ".", "uniform_", "(", "\n", "-", "self", ".", "epsilon", ",", "self", ".", "epsilon", ")", "\n", "rand_perturb", "=", "tensor2cuda", "(", "rand_perturb", ")", "\n", "x", "=", "original_images", "+", "rand_perturb", "\n", "x", ".", "clamp_", "(", "self", ".", "min_val", ",", "self", ".", "max_val", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "original_images", ".", "clone", "(", ")", "\n", "\n", "", "x", ".", "requires_grad", "=", "True", "\n", "\n", "# max_x = original_images + self.epsilon", "\n", "# min_x = original_images - self.epsilon", "\n", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "            ", "for", "_iter", "in", "range", "(", "self", ".", "max_iters", ")", ":", "\n", "# outputs = self.model(x, _eval=True)", "\n", "                ", "if", "bns", ":", "\n", "                    ", "outputs", "=", "self", ".", "model", "(", "x", ",", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                    ", "outputs", "=", "self", ".", "model", "(", "x", ")", "\n", "\n", "", "if", "exclusive", ":", "\n", "                    ", "loss", "=", "F", ".", "cross_entropy", "(", "outputs", ",", "labels", ",", "reduction", "=", "reduction4loss", ")", "\n", "", "else", ":", "\n", "                    ", "loss", "=", "F", ".", "binary_cross_entropy", "(", "torch", ".", "sigmoid", "(", "outputs", ")", ",", "labels", ",", "reduction", "=", "reduction4loss", ")", "\n", "\n", "", "if", "reduction4loss", "==", "'none'", ":", "\n", "                    ", "grad_outputs", "=", "tensor2cuda", "(", "torch", ".", "ones", "(", "loss", ".", "shape", ")", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "grad_outputs", "=", "None", "\n", "\n", "", "grads", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "x", ",", "grad_outputs", "=", "grad_outputs", ",", "\n", "only_inputs", "=", "True", ")", "[", "0", "]", "\n", "\n", "x", ".", "data", "+=", "self", ".", "alpha", "*", "torch", ".", "sign", "(", "grads", ".", "data", ")", "\n", "# the adversaries' pixel value should within max_x and min_x due ", "\n", "# to the l_infinity / l2 restriction", "\n", "x", "=", "project", "(", "x", ",", "original_images", ",", "self", ".", "epsilon", ",", "self", ".", "_type", ")", "\n", "# the adversaries' value should be valid pixel value", "\n", "x", ".", "clamp_", "(", "self", ".", "min_val", ",", "self", ".", "max_val", ")", "\n", "\n", "", "", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.attack.fast_gradient_sign_untargeted.project": [[15, 35], ["torch.max", "torch.max", "torch.min", "torch.min", "dist.view.view", "torch.norm", "torch.norm", "dist.view.view", "mask.float", "mask.float"], "function", ["None"], ["def", "project", "(", "x", ",", "original_x", ",", "epsilon", ",", "_type", "=", "'linf'", ")", ":", "\n", "    ", "if", "_type", "==", "'linf'", ":", "\n", "        ", "max_x", "=", "original_x", "+", "epsilon", "\n", "min_x", "=", "original_x", "-", "epsilon", "\n", "x", "=", "torch", ".", "max", "(", "torch", ".", "min", "(", "x", ",", "max_x", ")", ",", "min_x", ")", "\n", "\n", "", "elif", "_type", "==", "'l2'", ":", "\n", "        ", "dist", "=", "(", "x", "-", "original_x", ")", "\n", "dist", "=", "dist", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "dist_norm", "=", "torch", ".", "norm", "(", "dist", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "mask", "=", "(", "dist_norm", ">", "epsilon", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", "\n", "# dist = F.normalize(dist, p=2, dim=1)", "\n", "dist", "=", "dist", "/", "dist_norm", "\n", "dist", "*=", "epsilon", "\n", "dist", "=", "dist", ".", "view", "(", "x", ".", "shape", ")", "\n", "x", "=", "(", "original_x", "+", "dist", ")", "*", "mask", ".", "float", "(", ")", "+", "x", "*", "(", "1", "-", "mask", ".", "float", "(", ")", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.visualization.vanilla_backprop.VanillaBackprop.__init__": [[8, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.visualization.vanilla_backprop.VanillaBackprop.generate_gradients": [[11, 27], ["vanilla_backprop.VanillaBackprop.model.eval", "input_image.clone", "torch.enable_grad", "vanilla_backprop.VanillaBackprop.model.zero_grad", "vanilla_backprop.VanillaBackprop.model.train", "vanilla_backprop.VanillaBackprop.model", "vanilla_backprop.VanillaBackprop.model", "torch.autograd.grad"], "methods", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.None.main_bn.Trainer.train"], ["", "def", "generate_gradients", "(", "self", ",", "input_image", ",", "target_class", ",", "bnid", "=", "None", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "x", "=", "input_image", ".", "clone", "(", ")", "\n", "x", ".", "requires_grad", "=", "True", "\n", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "            ", "if", "bnid", ":", "\n", "                ", "model_output", "=", "self", ".", "model", "(", "x", ",", "bnid", ")", "\n", "", "else", ":", "\n", "                ", "model_output", "=", "self", ".", "model", "(", "x", ")", "\n", "", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "# grad_outputs = one_hot(target_class, model_output.shape[1])", "\n", "# grad_outputs = tensor2cuda(grad_outputs)", "\n", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "model_output", ",", "x", ",", "grad_outputs", "=", "target_class", ",", "\n", "only_inputs", "=", "True", ")", "[", "0", "]", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "", "return", "grad", "\n", "", "", ""]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.visualization.plot.plot_AUC": [[17, 48], ["matplotlib.subplots", "print", "print", "enumerate", "fig.savefig", "len", "print", "print", "sklearn.metrics.roc_curve", "axs[].plot", "axs[].legend", "axs[].set_xlabel", "axs[].set_ylabel", "os.path.join", "list", "list", "len", "sklearn.metrics.roc_auc_score"], "function", ["None"], ["def", "plot_AUC", "(", "pred", ",", "label", ",", "saveDir", ",", "savename", ",", "PRED_label", ")", ":", "\n", "\n", "    ", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "len", "(", "PRED_label", ")", ",", "\n", "figsize", "=", "(", "5", ",", "5", "*", "len", "(", "PRED_label", ")", ")", ")", "\n", "print", "(", "'pred list shape '", ",", "pred", ".", "shape", ")", "\n", "print", "(", "'label list shape '", ",", "label", ".", "shape", ")", "\n", "\n", "for", "n", ",", "pred_label", "in", "enumerate", "(", "PRED_label", ")", ":", "\n", "\n", "        ", "name", "=", "PRED_label", "[", "n", "]", "\n", "y_true", "=", "label", "[", ":", ",", "n", "]", "\n", "y_pred", "=", "pred", "[", ":", ",", "n", "]", "\n", "# y_true = label[:]", "\n", "# y_pred = pred[:]", "\n", "print", "(", "y_true", ".", "shape", ")", "\n", "print", "(", "y_pred", ".", "shape", ")", "\n", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "list", "(", "y_true", ")", ",", "list", "(", "y_pred", ")", ")", "\n", "\n", "axs", "[", "n", "]", ".", "plot", "(", "fpr", ",", "tpr", ",", "'b-'", ",", "alpha", "=", "1", ",", "\n", "label", "=", "name", "+", "'(AUC:%2.2f)'", "%", "roc_auc_score", "(", "y_true", ",", "y_pred", ")", ")", "\n", "axs", "[", "n", "]", ".", "legend", "(", "loc", "=", "4", ",", "prop", "=", "{", "'size'", ":", "8", "}", ")", "\n", "axs", "[", "n", "]", ".", "set_xlabel", "(", "'False Positive Rate'", ")", "\n", "axs", "[", "n", "]", ".", "set_ylabel", "(", "'True Positive Rate'", ")", "\n", "\n", "# axs.plot(fpr, tpr, 'b-', alpha = 1, ", "\n", "#                label = name+'(AUC:%2.2f)' % roc_auc_score(y_true, y_pred))", "\n", "# axs.legend(loc = 4, prop={'size': 8})", "\n", "# axs.set_xlabel('False Positive Rate')", "\n", "# axs.set_ylabel('True Positive Rate')", "\n", "\n", "", "fig", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "saveDir", ",", "savename", ")", ",", "dpi", "=", "300", ",", "bbox_inches", "=", "'tight'", ")", "", "", ""]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.visualization.gradcam.FeatureExtractor.__init__": [[21, 25], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "model", ",", "target_layers", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "target_layers", "=", "target_layers", "\n", "self", ".", "gradients", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.visualization.gradcam.FeatureExtractor.save_gradient": [[26, 28], ["gradcam.FeatureExtractor.gradients.append"], "methods", ["None"], ["", "def", "save_gradient", "(", "self", ",", "grad", ")", ":", "\n", "        ", "self", ".", "gradients", ".", "append", "(", "grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.visualization.gradcam.FeatureExtractor.__call__": [[29, 38], ["gradcam.FeatureExtractor.model._modules.items", "module", "module.register_hook"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "outputs", "=", "[", "]", "\n", "self", ".", "gradients", "=", "[", "]", "\n", "for", "name", ",", "module", "in", "self", ".", "model", ".", "_modules", ".", "items", "(", ")", ":", "\n", "            ", "x", "=", "module", "(", "x", ")", "\n", "if", "name", "in", "self", ".", "target_layers", ":", "\n", "                ", "x", ".", "register_hook", "(", "self", ".", "save_gradient", ")", "\n", "outputs", "+=", "[", "x", "]", "\n", "", "", "return", "outputs", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.visualization.gradcam.ModelOutputs.__init__": [[45, 49], ["gradcam.FeatureExtractor"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "model", ",", "feature_module", ",", "target_layers", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "feature_module", "=", "feature_module", "\n", "self", ".", "feature_extractor", "=", "FeatureExtractor", "(", "self", ".", "feature_module", ",", "target_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.visualization.gradcam.ModelOutputs.get_gradients": [[50, 52], ["None"], "methods", ["None"], ["", "def", "get_gradients", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "feature_extractor", ".", "gradients", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.visualization.gradcam.ModelOutputs.__call__": [[53, 65], ["gradcam.ModelOutputs.model._modules.items", "gradcam.ModelOutputs.feature_extractor", "name.lower", "module", "module.view", "module", "module.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "target_activations", "=", "[", "]", "\n", "for", "name", ",", "module", "in", "self", ".", "model", ".", "_modules", ".", "items", "(", ")", ":", "\n", "            ", "if", "module", "==", "self", ".", "feature_module", ":", "\n", "                ", "target_activations", ",", "x", "=", "self", ".", "feature_extractor", "(", "x", ")", "\n", "", "elif", "\"avgpool\"", "in", "name", ".", "lower", "(", ")", ":", "\n", "                ", "x", "=", "module", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "module", "(", "x", ")", "\n", "\n", "", "", "return", "target_activations", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.visualization.gradcam.GradCam.__init__": [[76, 85], ["gradcam.GradCam.model.eval", "gradcam.ModelOutputs", "model.cuda"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "feature_module", ",", "target_layer_names", ",", "use_cuda", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "feature_module", "=", "feature_module", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "cuda", "=", "use_cuda", "\n", "if", "self", ".", "cuda", ":", "\n", "            ", "self", ".", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "extractor", "=", "ModelOutputs", "(", "self", ".", "model", ",", "self", ".", "feature_module", ",", "target_layer_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.visualization.gradcam.GradCam.forward": [[86, 88], ["gradcam.GradCam.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_img", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "input_img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.visualization.gradcam.GradCam.__call__": [[89, 126], ["gradcam.GradCam.extractor", "numpy.zeros", "torch.from_numpy().requires_grad_", "torch.from_numpy().requires_grad_", "torch.from_numpy().requires_grad_", "torch.from_numpy().requires_grad_", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "gradcam.GradCam.feature_module.zero_grad", "gradcam.GradCam.model.zero_grad", "one_hot.cuda.cuda.backward", "[].cpu().data.numpy", "numpy.zeros", "enumerate", "numpy.maximum", "cv2.resize", "input_img.cuda.cuda.cuda", "numpy.argmax", "one_hot.cuda.cuda.cuda", "target.cpu().data.numpy", "numpy.mean", "numpy.min", "numpy.max", "output.cpu().data.numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "output.size", "[].cpu", "target.cpu", "output.cpu", "gradcam.GradCam.extractor.get_gradients"], "methods", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.visualization.gradcam.ModelOutputs.get_gradients"], ["", "def", "__call__", "(", "self", ",", "input_img", ",", "target_category", "=", "None", ",", "categories", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "cuda", ":", "\n", "            ", "input_img", "=", "input_img", ".", "cuda", "(", ")", "\n", "\n", "", "features", ",", "output", "=", "self", ".", "extractor", "(", "input_img", ")", "\n", "\n", "if", "target_category", "==", "None", ":", "\n", "            ", "target_category", "=", "np", ".", "argmax", "(", "output", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", "\n", "\n", "", "one_hot", "=", "np", ".", "zeros", "(", "(", "1", ",", "output", ".", "size", "(", ")", "[", "-", "1", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "one_hot", "[", "0", "]", "[", "target_category", "]", "=", "1", "\n", "one_hot", "=", "torch", ".", "from_numpy", "(", "one_hot", ")", ".", "requires_grad_", "(", "True", ")", "\n", "if", "self", ".", "cuda", ":", "\n", "            ", "one_hot", "=", "one_hot", ".", "cuda", "(", ")", "\n", "\n", "", "one_hot", "=", "torch", ".", "sum", "(", "one_hot", "*", "output", ")", "\n", "\n", "self", ".", "feature_module", ".", "zero_grad", "(", ")", "\n", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "one_hot", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "\n", "grads_val", "=", "self", ".", "extractor", ".", "get_gradients", "(", ")", "[", "-", "1", "]", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "target", "=", "features", "[", "-", "1", "]", "\n", "target", "=", "target", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "[", "0", ",", ":", "]", "\n", "\n", "weights", "=", "np", ".", "mean", "(", "grads_val", ",", "axis", "=", "(", "2", ",", "3", ")", ")", "[", "0", ",", ":", "]", "\n", "cam", "=", "np", ".", "zeros", "(", "target", ".", "shape", "[", "1", ":", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "i", ",", "w", "in", "enumerate", "(", "weights", ")", ":", "\n", "            ", "cam", "+=", "w", "*", "target", "[", "i", ",", ":", ",", ":", "]", "\n", "\n", "", "cam", "=", "np", ".", "maximum", "(", "cam", ",", "0", ")", "\n", "cam", "=", "cv2", ".", "resize", "(", "cam", ",", "input_img", ".", "shape", "[", "2", ":", "]", ")", "\n", "cam", "=", "cam", "-", "np", ".", "min", "(", "cam", ")", "\n", "cam", "=", "cam", "/", "np", ".", "max", "(", "cam", ")", "\n", "return", "cam", ",", "categories", "[", "target_category", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.visualization.gradcam.preprocess_image": [[66, 74], ["torchvision.transforms.Normalize", "torchvision.transforms.Compose", "transforms.Compose.unsqueeze", "torchvision.transforms.ToTensor", "transforms.Compose.", "img.copy"], "function", ["None"], ["", "", "def", "preprocess_image", "(", "img", ")", ":", "\n", "    ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "preprocessing", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "return", "preprocessing", "(", "img", ".", "copy", "(", ")", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.visualization.gradcam.get_args": [[128, 155], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.cuda.is_available", "torch.cuda.is_available", "print", "print"], "function", ["None"], ["", "", "def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--use-cuda'", ",", "action", "=", "'store_true'", ",", "default", "=", "True", ",", "\n", "help", "=", "'Use NVIDIA GPU acceleration'", ")", "\n", "parser", ".", "add_argument", "(", "'--image_path'", ",", "type", "=", "str", ",", "default", "=", "'./examples/both.png'", ",", "\n", "help", "=", "'Input image path'", ")", "\n", "parser", ".", "add_argument", "(", "'--nclass'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "\n", "help", "=", "'Number of classes'", ")", "\n", "parser", ".", "add_argument", "(", "'--resolution'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "\n", "help", "=", "'Resolution of images'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_path'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "\n", "help", "=", "'Checkpoint path'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_path_'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "\n", "help", "=", "'Checkpoint (adv.) path'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_path'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "\n", "help", "=", "'Checkpoint path'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'cxr'", ",", "\n", "help", "=", "'Dataset to use'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "args", ".", "use_cuda", "=", "args", ".", "use_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "if", "args", ".", "use_cuda", ":", "\n", "        ", "print", "(", "\"Using GPU for acceleration\"", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Using CPU for computation\"", ")", "\n", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.visualization.gradcam.show_cam_on_image": [[157, 163], ["cv2.applyColorMap", "numpy.uint8", "numpy.uint8", "numpy.float32", "numpy.moveaxis", "numpy.max", "numpy.float32", "img.cpu().squeeze", "img.cpu"], "function", ["None"], ["", "def", "show_cam_on_image", "(", "img", ",", "mask", ")", ":", "\n", "    ", "heatmap", "=", "cv2", ".", "applyColorMap", "(", "np", ".", "uint8", "(", "255", "*", "mask", ")", ",", "cv2", ".", "COLORMAP_MAGMA", ")", "\n", "heatmap", "=", "np", ".", "float32", "(", "heatmap", ")", "/", "255", "\n", "cam", "=", "heatmap", "+", "np", ".", "moveaxis", "(", "np", ".", "float32", "(", "img", ".", "cpu", "(", ")", ".", "squeeze", "(", ")", ")", ",", "0", ",", "-", "1", ")", "\n", "cam", "=", "cam", "/", "np", ".", "max", "(", "cam", ")", "\n", "return", "np", ".", "uint8", "(", "255", "*", "cam", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.dsbn._DomainSpecificBatchNorm.__init__": [[6, 14], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.BatchNorm2d", "range"], "methods", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.madry_model.WideResNet.__init__"], ["def", "__init__", "(", "self", ",", "num_features", ",", "num_classes", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.01", ",", "affine", "=", "True", ",", "\n", "track_running_stats", "=", "True", ")", ":", "\n", "        ", "super", "(", "_DomainSpecificBatchNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# ModuleList can be indexed like a regular Python list, ", "\n", "# but modules it contains are properly registered, ", "\n", "# and will be visible by all Module methods.", "\n", "self", ".", "bns", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "BatchNorm2d", "(", "num_features", ",", "eps", ",", "momentum", ",", "affine", ",", "track_running_stats", ")", "for", "_", "in", "range", "(", "num_classes", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.dsbn._DomainSpecificBatchNorm.reset_running_stats": [[15, 18], ["bn.reset_running_stats"], "methods", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.dsbn._DomainSpecificBatchNorm_.reset_running_stats"], ["", "def", "reset_running_stats", "(", "self", ")", ":", "\n", "        ", "for", "bn", "in", "self", ".", "bns", ":", "\n", "            ", "bn", ".", "reset_running_stats", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.dsbn._DomainSpecificBatchNorm.reset_parameters": [[19, 22], ["bn.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.dsbn._DomainSpecificBatchNorm_.reset_parameters"], ["", "", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "bn", "in", "self", ".", "bns", ":", "\n", "            ", "bn", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.dsbn._DomainSpecificBatchNorm._check_input_dim": [[23, 25], ["None"], "methods", ["None"], ["", "", "def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.dsbn._DomainSpecificBatchNorm.forward": [[26, 30], ["dsbn._DomainSpecificBatchNorm._check_input_dim", "bn"], "methods", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.dsbn.DomainSpecificBatchNorm1d._check_input_dim"], ["", "def", "forward", "(", "self", ",", "x", ",", "domain_label", ")", ":", "\n", "        ", "self", ".", "_check_input_dim", "(", "x", ")", "\n", "bn", "=", "self", ".", "bns", "[", "domain_label", "[", "0", "]", "]", "# might means the domain label should be [0, 1]", "\n", "return", "bn", "(", "x", ")", ",", "domain_label", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.dsbn.DomainSpecificBatchNorm2d._check_input_dim": [[33, 37], ["input.dim", "ValueError", "input.dim"], "methods", ["None"], ["    ", "def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 4D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.dsbn._DomainSpecificBatchNorm_.__init__": [[43, 51], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.BatchNorm1d", "range"], "methods", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.madry_model.WideResNet.__init__"], ["def", "__init__", "(", "self", ",", "num_features", ",", "num_classes", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.01", ",", "affine", "=", "True", ",", "\n", "track_running_stats", "=", "True", ")", ":", "\n", "        ", "super", "(", "_DomainSpecificBatchNorm_", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# ModuleList can be indexed like a regular Python list, ", "\n", "# but modules it contains are properly registered, ", "\n", "# and will be visible by all Module methods.", "\n", "self", ".", "bns", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "BatchNorm1d", "(", "num_features", ",", "eps", ",", "momentum", ",", "affine", ",", "track_running_stats", ")", "for", "_", "in", "range", "(", "num_classes", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.dsbn._DomainSpecificBatchNorm_.reset_running_stats": [[52, 55], ["bn.reset_running_stats"], "methods", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.dsbn._DomainSpecificBatchNorm_.reset_running_stats"], ["", "def", "reset_running_stats", "(", "self", ")", ":", "\n", "        ", "for", "bn", "in", "self", ".", "bns", ":", "\n", "            ", "bn", ".", "reset_running_stats", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.dsbn._DomainSpecificBatchNorm_.reset_parameters": [[56, 59], ["bn.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.dsbn._DomainSpecificBatchNorm_.reset_parameters"], ["", "", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "bn", "in", "self", ".", "bns", ":", "\n", "            ", "bn", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.dsbn._DomainSpecificBatchNorm_._check_input_dim": [[60, 62], ["None"], "methods", ["None"], ["", "", "def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.dsbn._DomainSpecificBatchNorm_.forward": [[63, 67], ["dsbn._DomainSpecificBatchNorm_._check_input_dim", "bn"], "methods", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.dsbn.DomainSpecificBatchNorm1d._check_input_dim"], ["", "def", "forward", "(", "self", ",", "x", ",", "domain_label", ")", ":", "\n", "        ", "self", ".", "_check_input_dim", "(", "x", ")", "\n", "bn", "=", "self", ".", "bns", "[", "domain_label", "[", "0", "]", "]", "# might means the domain label should be [0, 1]", "\n", "return", "bn", "(", "x", ")", ",", "domain_label", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.dsbn.DomainSpecificBatchNorm1d._check_input_dim": [[69, 73], ["input.dim", "ValueError", "input.dim"], "methods", ["None"], ["    ", "def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "2", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 4D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.model.Expression.__init__": [[13, 16], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.madry_model.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "func", ")", ":", "\n", "        ", "super", "(", "Expression", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "func", "=", "func", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.model.Expression.forward": [[17, 19], ["model.Expression.func"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "func", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.model.LogisticRegression.__init__": [[21, 24], ["super().__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.madry_model.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ")", ":", "\n", "        ", "super", "(", "LogisticRegression", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear", "=", "torch", ".", "nn", ".", "Linear", "(", "input_dim", ",", "output_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.model.LogisticRegression.forward": [[25, 28], ["model.LogisticRegression.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "linear", "(", "x", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.model.MLP_bns.__init__": [[30, 41], ["super().__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "DomainSpecificBatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.madry_model.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "hidden_dim", "=", "256", ")", ":", "\n", "        ", "super", "(", "MLP_bns", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "num_domains", "=", "2", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "self", ".", "hidden_dim", ",", "bias", "=", "True", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "bn", "=", "DomainSpecificBatchNorm1d", "(", "self", ".", "hidden_dim", ",", "self", ".", "num_domains", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "output_dim", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.model.MLP_bns.forward": [[42, 47], ["model.MLP_bns.bn", "model.MLP_bns.relu", "model.MLP_bns.fc2", "model.MLP_bns.fc1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "domain_label", ")", ":", "\n", "        ", "x", ",", "_", "=", "self", ".", "bn", "(", "self", ".", "fc1", "(", "x", ")", ",", "domain_label", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "out", "=", "self", ".", "fc2", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.model.MLP.__init__": [[49, 59], ["super().__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.madry_model.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "hidden_dim", "=", "256", ")", ":", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "self", ".", "hidden_dim", ",", "bias", "=", "True", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "hidden_dim", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "output_dim", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.model.MLP.forward": [[60, 65], ["model.MLP.bn", "model.MLP.relu", "model.MLP.fc2", "model.MLP.fc1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "bn", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "out", "=", "self", ".", "fc2", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.model.Model.__init__": [[67, 79], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "model.Expression", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "tensor.view"], "methods", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.madry_model.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "i_c", "=", "1", ",", "n_c", "=", "10", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "i_c", ",", "32", ",", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ",", "bias", "=", "True", ")", "\n", "self", ".", "pool1", "=", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "0", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ",", "bias", "=", "True", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "0", ")", "\n", "\n", "self", ".", "flatten", "=", "Expression", "(", "lambda", "tensor", ":", "tensor", ".", "view", "(", "tensor", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "7", "*", "7", "*", "64", ",", "1024", ",", "bias", "=", "True", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "1024", ",", "n_c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.model.Model.forward": [[80, 103], ["model.Model.conv1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "model.Model.pool1", "model.Model.conv2", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "model.Model.pool2", "model.Model.flatten", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "model.Model.train", "model.Model.fc2", "model.Model.eval", "model.Model.train", "model.Model.fc1"], "methods", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.None.main_bn.Trainer.train", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.None.main_bn.Trainer.train"], ["", "def", "forward", "(", "self", ",", "x_i", ",", "_eval", "=", "False", ")", ":", "\n", "\n", "        ", "if", "_eval", ":", "\n", "# switch to eval mode", "\n", "            ", "self", ".", "eval", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "train", "(", ")", "\n", "\n", "", "x_o", "=", "self", ".", "conv1", "(", "x_i", ")", "\n", "x_o", "=", "torch", ".", "relu", "(", "x_o", ")", "\n", "x_o", "=", "self", ".", "pool1", "(", "x_o", ")", "\n", "\n", "x_o", "=", "self", ".", "conv2", "(", "x_o", ")", "\n", "x_o", "=", "torch", ".", "relu", "(", "x_o", ")", "\n", "x_o", "=", "self", ".", "pool2", "(", "x_o", ")", "\n", "\n", "x_o", "=", "self", ".", "flatten", "(", "x_o", ")", "\n", "\n", "x_o", "=", "torch", ".", "relu", "(", "self", ".", "fc1", "(", "x_o", ")", ")", "\n", "\n", "self", ".", "train", "(", ")", "\n", "\n", "return", "self", ".", "fc2", "(", "x_o", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.model.BasicBlock.__init__": [[109, 123], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.madry_model.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "droprate", "=", "dropRate", "\n", "self", ".", "equalInOut", "=", "(", "in_planes", "==", "out_planes", ")", "\n", "self", ".", "convShortcut", "=", "(", "not", "self", ".", "equalInOut", ")", "and", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "bias", "=", "False", ")", "or", "None", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.model.BasicBlock.forward": [[123, 133], ["model.BasicBlock.relu2", "model.BasicBlock.conv2", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "model.BasicBlock.relu1", "model.BasicBlock.relu1", "model.BasicBlock.bn2", "torch.dropout", "torch.dropout", "torch.dropout", "model.BasicBlock.bn1", "model.BasicBlock.bn1", "model.BasicBlock.conv1", "model.BasicBlock.convShortcut"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "equalInOut", ":", "\n", "            ", "x", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "out", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv1", "(", "out", "if", "self", ".", "equalInOut", "else", "x", ")", ")", ")", "\n", "if", "self", ".", "droprate", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "droprate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "return", "torch", ".", "add", "(", "x", "if", "self", ".", "equalInOut", "else", "self", ".", "convShortcut", "(", "x", ")", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.model.NetworkBlock.__init__": [[135, 138], ["torch.Module.__init__", "model.NetworkBlock._make_layer"], "methods", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.madry_model.WideResNet.__init__", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.madry_model.NetworkBlock._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "nb_layers", ",", "in_planes", ",", "out_planes", ",", "block", ",", "stride", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "NetworkBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "self", ".", "_make_layer", "(", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", "\n", "", "def", "_make_layer", "(", "self", ",", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", ":", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.model.NetworkBlock._make_layer": [[138, 143], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "int", "(", "nb_layers", ")", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "i", "==", "0", "and", "in_planes", "or", "out_planes", ",", "out_planes", ",", "i", "==", "0", "and", "stride", "or", "1", ",", "dropRate", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.model.NetworkBlock.forward": [[143, 145], ["model.NetworkBlock.layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.model.WideResNet.__init__": [[147, 177], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "model.NetworkBlock", "model.NetworkBlock", "model.NetworkBlock", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "model.WideResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.madry_model.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "num_classes", ",", "widen_factor", "=", "1", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "WideResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nChannels", "=", "[", "16", ",", "16", "*", "widen_factor", ",", "32", "*", "widen_factor", ",", "64", "*", "widen_factor", "]", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", "\n", "n", "=", "(", "depth", "-", "4", ")", "/", "6", "\n", "block", "=", "BasicBlock", "\n", "# 1st conv before any network block", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "nChannels", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "# 1st block", "\n", "self", ".", "block1", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "0", "]", ",", "nChannels", "[", "1", "]", ",", "block", ",", "1", ",", "dropRate", ")", "\n", "# 2nd block", "\n", "self", ".", "block2", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "1", "]", ",", "nChannels", "[", "2", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "# 3rd block", "\n", "self", ".", "block3", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "2", "]", ",", "nChannels", "[", "3", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "# global average pooling and classifier", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nChannels", "[", "3", "]", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "nChannels", "[", "3", "]", ",", "num_classes", ")", "\n", "self", ".", "nChannels", "=", "nChannels", "[", "3", "]", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.model.WideResNet.forward": [[178, 196], ["model.WideResNet.conv1", "model.WideResNet.block1", "model.WideResNet.block2", "model.WideResNet.block3", "model.WideResNet.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "out.view.view.view", "model.WideResNet.train", "model.WideResNet.fc", "model.WideResNet.eval", "model.WideResNet.train", "model.WideResNet.bn1"], "methods", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.None.main_bn.Trainer.train", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.None.main_bn.Trainer.train"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "_eval", "=", "False", ")", ":", "\n", "        ", "if", "_eval", ":", "\n", "# switch to eval mode", "\n", "            ", "self", ".", "eval", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "train", "(", ")", "\n", "\n", "", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "block1", "(", "out", ")", "\n", "out", "=", "self", ".", "block2", "(", "out", ")", "\n", "out", "=", "self", ".", "block3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "self", ".", "nChannels", ")", "\n", "\n", "self", ".", "train", "(", ")", "\n", "\n", "return", "self", ".", "fc", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.resnetdsbn.Conv2d.__init__": [[42, 51], ["_pair", "_pair", "_pair", "_pair", "torch.nn.modules.conv._ConvNd.__init__", "_pair"], "methods", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.madry_model.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ")", ":", "\n", "        ", "kernel_size", "=", "_pair", "(", "kernel_size", ")", "\n", "stride", "=", "_pair", "(", "stride", ")", "\n", "padding", "=", "_pair", "(", "padding", ")", "\n", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "super", "(", "Conv2d", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "\n", "False", ",", "_pair", "(", "0", ")", ",", "groups", ",", "bias", ",", "padding_mode", "=", "'zeros'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.resnetdsbn.Conv2d.forward": [[52, 55], ["torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "domain_label", ")", ":", "\n", "        ", "return", "F", ".", "conv2d", "(", "input", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", ",", "domain_label", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.resnetdsbn.TwoInputSequential.__init__": [[61, 69], ["torch.Module.__init__", "isinstance", "args[].items", "enumerate", "len", "resnetdsbn.TwoInputSequential.add_module", "resnetdsbn.TwoInputSequential.add_module", "str"], "methods", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.madry_model.WideResNet.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "super", "(", "TwoInputSequential", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "len", "(", "args", ")", "==", "1", "and", "isinstance", "(", "args", "[", "0", "]", ",", "OrderedDict", ")", ":", "\n", "            ", "for", "key", ",", "module", "in", "args", "[", "0", "]", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "add_module", "(", "key", ",", "module", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "idx", ",", "module", "in", "enumerate", "(", "args", ")", ":", "\n", "                ", "self", ".", "add_module", "(", "str", "(", "idx", ")", ",", "module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.resnetdsbn.TwoInputSequential._get_item_by_idx": [[70, 78], ["len", "operator.index", "next", "IndexError", "itertools.islice"], "methods", ["None"], ["", "", "", "def", "_get_item_by_idx", "(", "self", ",", "iterator", ",", "idx", ")", ":", "\n", "        ", "\"\"\"Get the idx-th item of the iterator\"\"\"", "\n", "size", "=", "len", "(", "self", ")", "\n", "idx", "=", "operator", ".", "index", "(", "idx", ")", "\n", "if", "not", "-", "size", "<=", "idx", "<", "size", ":", "\n", "            ", "raise", "IndexError", "(", "'index {} is out of range'", ".", "format", "(", "idx", ")", ")", "\n", "", "idx", "%=", "size", "\n", "return", "next", "(", "islice", "(", "iterator", ",", "idx", ",", "None", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.resnetdsbn.TwoInputSequential.__getitem__": [[79, 84], ["isinstance", "resnetdsbn.TwoInputSequential", "resnetdsbn.TwoInputSequential._get_item_by_idx", "collections.OrderedDict", "resnetdsbn.TwoInputSequential._modules.values", "list", "resnetdsbn.TwoInputSequential._modules.items"], "methods", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.resnetdsbn.TwoInputSequential._get_item_by_idx"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "isinstance", "(", "idx", ",", "slice", ")", ":", "\n", "            ", "return", "TwoInputSequential", "(", "OrderedDict", "(", "list", "(", "self", ".", "_modules", ".", "items", "(", ")", ")", "[", "idx", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_get_item_by_idx", "(", "self", ".", "_modules", ".", "values", "(", ")", ",", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.resnetdsbn.TwoInputSequential.__setitem__": [[85, 88], ["resnetdsbn.TwoInputSequential._get_item_by_idx", "setattr", "resnetdsbn.TwoInputSequential._modules.keys"], "methods", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.resnetdsbn.TwoInputSequential._get_item_by_idx"], ["", "", "def", "__setitem__", "(", "self", ",", "idx", ",", "module", ")", ":", "\n", "        ", "key", "=", "self", ".", "_get_item_by_idx", "(", "self", ".", "_modules", ".", "keys", "(", ")", ",", "idx", ")", "\n", "return", "setattr", "(", "self", ",", "key", ",", "module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.resnetdsbn.TwoInputSequential.__delitem__": [[89, 96], ["isinstance", "resnetdsbn.TwoInputSequential._get_item_by_idx", "delattr", "list", "delattr", "resnetdsbn.TwoInputSequential._modules.keys", "resnetdsbn.TwoInputSequential._modules.keys"], "methods", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.resnetdsbn.TwoInputSequential._get_item_by_idx"], ["", "def", "__delitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "isinstance", "(", "idx", ",", "slice", ")", ":", "\n", "            ", "for", "key", "in", "list", "(", "self", ".", "_modules", ".", "keys", "(", ")", ")", "[", "idx", "]", ":", "\n", "                ", "delattr", "(", "self", ",", "key", ")", "\n", "", "", "else", ":", "\n", "            ", "key", "=", "self", ".", "_get_item_by_idx", "(", "self", ".", "_modules", ".", "keys", "(", ")", ",", "idx", ")", "\n", "delattr", "(", "self", ",", "key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.resnetdsbn.TwoInputSequential.__len__": [[97, 99], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.resnetdsbn.TwoInputSequential.__dir__": [[100, 104], ["torch.Module.__dir__", "key.isdigit"], "methods", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.resnetdsbn.TwoInputSequential.__dir__"], ["", "def", "__dir__", "(", "self", ")", ":", "\n", "        ", "keys", "=", "super", "(", "TwoInputSequential", ",", "self", ")", ".", "__dir__", "(", ")", "\n", "keys", "=", "[", "key", "for", "key", "in", "keys", "if", "not", "key", ".", "isdigit", "(", ")", "]", "\n", "return", "keys", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.resnetdsbn.TwoInputSequential.forward": [[105, 109], ["resnetdsbn.TwoInputSequential._modules.values", "module"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input1", ",", "input2", ")", ":", "\n", "        ", "for", "module", "in", "self", ".", "_modules", ".", "values", "(", ")", ":", "\n", "            ", "input1", ",", "input2", "=", "module", "(", "input1", ",", "input2", ")", "\n", "", "return", "input1", ",", "input2", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.resnetdsbn.DSBNResNet.__init__": [[227, 261], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "model.dsbn.DomainSpecificBatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnetdsbn.DSBNResNet._make_layer", "resnetdsbn.DSBNResNet._make_layer", "resnetdsbn.DSBNResNet._make_layer", "resnetdsbn.DSBNResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "resnetdsbn.DSBNResNet.modules", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "isinstance", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.normal_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.madry_model.WideResNet.__init__", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.madry_model.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.madry_model.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.madry_model.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.madry_model.NetworkBlock._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "widefactor", "=", "1", ",", "in_features", "=", "0", ",", "num_classes", "=", "1000", ",", "num_domains", "=", "2", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "widefactor", "=", "widefactor", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "num_domains", "=", "num_domains", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "super", "(", "DSBNResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "DomainSpecificBatchNorm2d", "(", "64", ",", "self", ".", "num_domains", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "num_domains", "=", "self", ".", "num_domains", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "num_domains", "=", "self", ".", "num_domains", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "num_domains", "=", "self", ".", "num_domains", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "num_domains", "=", "self", ".", "num_domains", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n", "if", "self", ".", "in_features", "!=", "0", ":", "\n", "            ", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "self", ".", "in_features", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "self", ".", "in_features", ",", "num_classes", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.resnetdsbn.DSBNResNet._make_layer": [[262, 280], ["layers.append", "range", "resnetdsbn.TwoInputSequential", "resnetdsbn.TwoInputSequential", "block", "layers.append", "resnetdsbn.Conv2d", "model.dsbn.DomainSpecificBatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "num_domains", "=", "2", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "TwoInputSequential", "(", "\n", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "DomainSpecificBatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "num_domains", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "self", ".", "widefactor", ",", "\n", "stride", ",", "downsample", ",", "num_domains", "=", "num_domains", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "self", ".", "widefactor", ",", "num_domains", "=", "num_domains", ")", ")", "\n", "\n", "", "return", "TwoInputSequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.resnetdsbn.DSBNResNet.forward": [[281, 306], ["resnetdsbn.DSBNResNet.conv1", "resnetdsbn.DSBNResNet.bn1", "resnetdsbn.DSBNResNet.relu", "resnetdsbn.DSBNResNet.maxpool", "resnetdsbn.DSBNResNet.layer1", "resnetdsbn.DSBNResNet.layer2", "resnetdsbn.DSBNResNet.layer3", "resnetdsbn.DSBNResNet.layer4", "resnetdsbn.DSBNResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "resnetdsbn.DSBNResNet.fc1", "resnetdsbn.DSBNResNet.fc2", "resnetdsbn.DSBNResNet.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "domain_label", ",", "with_ft", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", ",", "_", "=", "self", ".", "bn1", "(", "x", ",", "domain_label", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", ",", "_", "=", "self", ".", "layer1", "(", "x", ",", "domain_label", ")", "\n", "x", ",", "_", "=", "self", ".", "layer2", "(", "x", ",", "domain_label", ")", "\n", "x", ",", "_", "=", "self", ".", "layer3", "(", "x", ",", "domain_label", ")", "\n", "x", ",", "_", "=", "self", ".", "layer4", "(", "x", ",", "domain_label", ")", "\n", "\n", "# x = x.mean(3).mean(2)  # global average pooling", "\n", "# x = x.view(x.size(0), -1)", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "if", "self", ".", "in_features", "!=", "0", ":", "\n", "            ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "feat", "=", "x", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "feat", "=", "x", "\n", "", "if", "with_ft", ":", "\n", "            ", "return", "x", ",", "feat", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.resnetdsbn.BasicBlock.__init__": [[311, 320], ["torch.Module.__init__", "resnetdsbn.conv3x3", "model.dsbn.DomainSpecificBatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnetdsbn.conv3x3", "model.dsbn.DomainSpecificBatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.madry_model.WideResNet.__init__", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.resnetdsbn.conv3x3", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.resnetdsbn.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "num_domains", "=", "2", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "DomainSpecificBatchNorm2d", "(", "planes", ",", "num_domains", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "DomainSpecificBatchNorm2d", "(", "planes", ",", "num_domains", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.resnetdsbn.BasicBlock.forward": [[321, 338], ["resnetdsbn.BasicBlock.conv1", "resnetdsbn.BasicBlock.bn1", "resnetdsbn.BasicBlock.relu", "resnetdsbn.BasicBlock.conv2", "resnetdsbn.BasicBlock.bn2", "resnetdsbn.BasicBlock.relu", "resnetdsbn.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "domain_label", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", ",", "_", "=", "self", ".", "bn1", "(", "out", ",", "domain_label", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", ",", "_", "=", "self", ".", "bn2", "(", "out", ",", "domain_label", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", ",", "_", "=", "self", ".", "downsample", "(", "x", ",", "domain_label", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", ",", "domain_label", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.resnetdsbn.Bottleneck.__init__": [[343, 355], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "model.dsbn.DomainSpecificBatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "model.dsbn.DomainSpecificBatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "model.dsbn.DomainSpecificBatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.madry_model.WideResNet.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "widefactor", "=", "1", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "num_domains", "=", "2", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "DomainSpecificBatchNorm2d", "(", "planes", ",", "num_domains", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "widefactor", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "DomainSpecificBatchNorm2d", "(", "planes", "*", "widefactor", ",", "num_domains", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", "*", "widefactor", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "DomainSpecificBatchNorm2d", "(", "planes", "*", "4", ",", "num_domains", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.resnetdsbn.Bottleneck.forward": [[356, 377], ["resnetdsbn.Bottleneck.conv1", "resnetdsbn.Bottleneck.bn1", "resnetdsbn.Bottleneck.relu", "resnetdsbn.Bottleneck.conv2", "resnetdsbn.Bottleneck.bn2", "resnetdsbn.Bottleneck.relu", "resnetdsbn.Bottleneck.conv3", "resnetdsbn.Bottleneck.bn3", "resnetdsbn.Bottleneck.relu", "resnetdsbn.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "domain_label", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", ",", "_", "=", "self", ".", "bn1", "(", "out", ",", "domain_label", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", ",", "_", "=", "self", ".", "bn2", "(", "out", ",", "domain_label", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", ",", "_", "=", "self", ".", "bn3", "(", "out", ",", "domain_label", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", ",", "_", "=", "self", ".", "downsample", "(", "x", ",", "domain_label", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", ",", "domain_label", "", "", "", ""]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.resnetdsbn.conv3x3": [[27, 31], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.resnetdsbn.resnet18dsbn": [[111, 124], ["resnetdsbn.DSBNResNet", "resnetdsbn._update_initial_weights_dsbn", "DSBNResNet.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.resnetdsbn._update_initial_weights_dsbn"], ["", "", "def", "resnet18dsbn", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "DSBNResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "updated_state_dict", "=", "_update_initial_weights_dsbn", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", ",", "\n", "num_classes", "=", "model", ".", "num_classes", ",", "\n", "num_domains", "=", "model", ".", "num_domains", ")", "\n", "model", ".", "load_state_dict", "(", "updated_state_dict", ",", "strict", "=", "False", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.resnetdsbn.resnet34dsbn": [[126, 139], ["resnetdsbn.DSBNResNet", "resnetdsbn._update_initial_weights_dsbn", "DSBNResNet.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.resnetdsbn._update_initial_weights_dsbn"], ["", "def", "resnet34dsbn", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "DSBNResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "updated_state_dict", "=", "_update_initial_weights_dsbn", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ")", ",", "\n", "num_classes", "=", "model", ".", "num_classes", ",", "\n", "num_domains", "=", "model", ".", "num_domains", ")", "\n", "model", ".", "load_state_dict", "(", "updated_state_dict", ",", "strict", "=", "False", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.resnetdsbn.resnet50dsbn": [[140, 153], ["resnetdsbn.DSBNResNet", "resnetdsbn._update_initial_weights_dsbn", "DSBNResNet.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.resnetdsbn._update_initial_weights_dsbn"], ["", "def", "resnet50dsbn", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "DSBNResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "updated_state_dict", "=", "_update_initial_weights_dsbn", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ",", "\n", "num_classes", "=", "model", ".", "num_classes", ",", "\n", "num_domains", "=", "model", ".", "num_domains", ")", "\n", "model", ".", "load_state_dict", "(", "updated_state_dict", ",", "strict", "=", "False", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.resnetdsbn.resnet101dsbn": [[155, 168], ["resnetdsbn.DSBNResNet", "resnetdsbn._update_initial_weights_dsbn", "DSBNResNet.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.resnetdsbn._update_initial_weights_dsbn"], ["", "def", "resnet101dsbn", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "DSBNResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "updated_state_dict", "=", "_update_initial_weights_dsbn", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", ",", "\n", "num_classes", "=", "model", ".", "num_classes", ",", "\n", "num_domains", "=", "model", ".", "num_domains", ")", "\n", "model", ".", "load_state_dict", "(", "updated_state_dict", ",", "strict", "=", "False", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.resnetdsbn.resnet152dsbn": [[170, 183], ["resnetdsbn.DSBNResNet", "resnetdsbn._update_initial_weights_dsbn", "DSBNResNet.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.resnetdsbn._update_initial_weights_dsbn"], ["", "def", "resnet152dsbn", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "DSBNResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "updated_state_dict", "=", "_update_initial_weights_dsbn", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", ",", "\n", "num_classes", "=", "model", ".", "num_classes", ",", "\n", "num_domains", "=", "model", ".", "num_domains", ")", "\n", "model", ".", "load_state_dict", "(", "updated_state_dict", ",", "strict", "=", "False", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.resnetdsbn._update_initial_weights_dsbn": [[185, 224], ["state_dict.copy", "state_dict.items", "list", "len", "state_dict.copy.keys", "range", "range", "range", "range", "print", "val.data.clone", "range", "val.data.clone", "val.data.clone", "val.data.clone", "val.data.clone", "state_dict.copy.keys", "len"], "function", ["None"], ["", "def", "_update_initial_weights_dsbn", "(", "state_dict", ",", "num_classes", "=", "1000", ",", "num_domains", "=", "2", ",", "dsbn_type", "=", "'all'", ")", ":", "\n", "    ", "new_state_dict", "=", "state_dict", ".", "copy", "(", ")", "\n", "\n", "for", "key", ",", "val", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "update_dict", "=", "False", "\n", "if", "(", "(", "(", "'bn'", "in", "key", "or", "'downsample.1'", "in", "key", ")", "and", "dsbn_type", "==", "'all'", ")", "or", "\n", "(", "(", "'bn1'", "in", "key", ")", "and", "dsbn_type", "==", "'partial-bn1'", ")", ")", ":", "\n", "            ", "update_dict", "=", "True", "\n", "\n", "", "if", "(", "update_dict", ")", ":", "\n", "            ", "if", "'weight'", "in", "key", ":", "\n", "                ", "for", "d", "in", "range", "(", "num_domains", ")", ":", "\n", "                    ", "new_state_dict", "[", "key", "[", "0", ":", "-", "6", "]", "+", "'bns.{}.weight'", ".", "format", "(", "d", ")", "]", "=", "val", ".", "data", ".", "clone", "(", ")", "\n", "\n", "", "", "elif", "'bias'", "in", "key", ":", "\n", "                ", "for", "d", "in", "range", "(", "num_domains", ")", ":", "\n", "                    ", "new_state_dict", "[", "key", "[", "0", ":", "-", "4", "]", "+", "'bns.{}.bias'", ".", "format", "(", "d", ")", "]", "=", "val", ".", "data", ".", "clone", "(", ")", "\n", "\n", "", "", "if", "'running_mean'", "in", "key", ":", "\n", "                ", "for", "d", "in", "range", "(", "num_domains", ")", ":", "\n", "                    ", "new_state_dict", "[", "key", "[", "0", ":", "-", "12", "]", "+", "'bns.{}.running_mean'", ".", "format", "(", "d", ")", "]", "=", "val", ".", "data", ".", "clone", "(", ")", "\n", "\n", "", "", "if", "'running_var'", "in", "key", ":", "\n", "                ", "for", "d", "in", "range", "(", "num_domains", ")", ":", "\n", "                    ", "new_state_dict", "[", "key", "[", "0", ":", "-", "11", "]", "+", "'bns.{}.running_var'", ".", "format", "(", "d", ")", "]", "=", "val", ".", "data", ".", "clone", "(", ")", "\n", "\n", "", "", "if", "'num_batches_tracked'", "in", "key", ":", "\n", "                ", "for", "d", "in", "range", "(", "num_domains", ")", ":", "\n", "                    ", "new_state_dict", "[", "\n", "key", "[", "0", ":", "-", "len", "(", "'num_batches_tracked'", ")", "]", "+", "'bns.{}.num_batches_tracked'", ".", "format", "(", "d", ")", "]", "=", "val", ".", "data", ".", "clone", "(", ")", "\n", "\n", "", "", "", "", "if", "num_classes", "!=", "1000", "or", "len", "(", "[", "key", "for", "key", "in", "new_state_dict", ".", "keys", "(", ")", "if", "'fc'", "in", "key", "]", ")", ">", "1", ":", "\n", "        ", "key_list", "=", "list", "(", "new_state_dict", ".", "keys", "(", ")", ")", "\n", "for", "key", "in", "key_list", ":", "\n", "            ", "if", "'fc'", "in", "key", ":", "\n", "                ", "print", "(", "'pretrained {} are not used as initial params.'", ".", "format", "(", "key", ")", ")", "\n", "del", "new_state_dict", "[", "key", "]", "\n", "\n", "", "", "", "return", "new_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.madry_model.Expression.__init__": [[12, 15], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.madry_model.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "func", ")", ":", "\n", "        ", "super", "(", "Expression", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "func", "=", "func", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.madry_model.Expression.forward": [[16, 18], ["madry_model.Expression.func"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "func", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.madry_model.Model.__init__": [[20, 33], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "madry_model.Expression", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "tensor.view"], "methods", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.madry_model.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "i_c", "=", "1", ",", "n_c", "=", "10", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "i_c", ",", "32", ",", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ",", "bias", "=", "True", ")", "\n", "self", ".", "pool1", "=", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "0", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ",", "bias", "=", "True", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "0", ")", "\n", "\n", "\n", "self", ".", "flatten", "=", "Expression", "(", "lambda", "tensor", ":", "tensor", ".", "view", "(", "tensor", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "7", "*", "7", "*", "64", ",", "1024", ",", "bias", "=", "True", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "1024", ",", "n_c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.madry_model.Model.forward": [[35, 58], ["madry_model.Model.conv1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "madry_model.Model.pool1", "madry_model.Model.conv2", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "madry_model.Model.pool2", "madry_model.Model.flatten", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "madry_model.Model.train", "madry_model.Model.fc2", "madry_model.Model.eval", "madry_model.Model.train", "madry_model.Model.fc1"], "methods", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.None.main_bn.Trainer.train", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.None.main_bn.Trainer.train"], ["", "def", "forward", "(", "self", ",", "x_i", ",", "_eval", "=", "False", ")", ":", "\n", "\n", "        ", "if", "_eval", ":", "\n", "# switch to eval mode", "\n", "            ", "self", ".", "eval", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "train", "(", ")", "\n", "\n", "", "x_o", "=", "self", ".", "conv1", "(", "x_i", ")", "\n", "x_o", "=", "torch", ".", "relu", "(", "x_o", ")", "\n", "x_o", "=", "self", ".", "pool1", "(", "x_o", ")", "\n", "\n", "x_o", "=", "self", ".", "conv2", "(", "x_o", ")", "\n", "x_o", "=", "torch", ".", "relu", "(", "x_o", ")", "\n", "x_o", "=", "self", ".", "pool2", "(", "x_o", ")", "\n", "\n", "x_o", "=", "self", ".", "flatten", "(", "x_o", ")", "\n", "\n", "x_o", "=", "torch", ".", "relu", "(", "self", ".", "fc1", "(", "x_o", ")", ")", "\n", "\n", "self", ".", "train", "(", ")", "\n", "\n", "return", "self", ".", "fc2", "(", "x_o", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.madry_model.ChannelPadding.__init__": [[60, 65], ["torch.Module.__init__", "madry_model.ChannelPadding.register_buffer", "torch.zeros().view", "torch.zeros().view", "torch.zeros().view", "torch.zeros().view", "torch.zeros().view", "torch.zeros().view", "torch.zeros().view", "torch.zeros().view", "torch.zeros().view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.madry_model.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ")", ":", "\n", "        ", "super", "(", "ChannelPadding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "register_buffer", "(", "\"padding\"", ",", "\n", "torch", ".", "zeros", "(", "(", "out_planes", "-", "in_planes", ")", "//", "2", ")", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.madry_model.ChannelPadding.forward": [[66, 72], ["madry_model.ChannelPadding.padding.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "input.size", "input.size", "input.size", "input.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "assert", "len", "(", "input", ".", "size", "(", ")", ")", "==", "4", ",", "\"only support for 4-D tensor for now\"", "\n", "\n", "padding", "=", "self", ".", "padding", ".", "expand", "(", "input", ".", "size", "(", "0", ")", ",", "-", "1", ",", "input", ".", "size", "(", "2", ")", ",", "input", ".", "size", "(", "3", ")", ")", "\n", "\n", "return", "torch", ".", "cat", "(", "[", "padding", ",", "input", ",", "padding", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.madry_model.BasicBlock.__init__": [[74, 91], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "madry_model.ChannelPadding"], "methods", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.madry_model.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "droprate", "=", "dropRate", "\n", "self", ".", "equalInOut", "=", "(", "in_planes", "==", "out_planes", ")", "\n", "# self.convShortcut = (not self.equalInOut) and nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride,", "\n", "#                        padding=0, bias=False) or None", "\n", "self", ".", "poolpadShortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "stride", ",", "stride", "=", "stride", ")", ",", "\n", "ChannelPadding", "(", "in_planes", ",", "out_planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.madry_model.BasicBlock.forward": [[92, 105], ["madry_model.BasicBlock.relu2", "madry_model.BasicBlock.conv2", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "madry_model.BasicBlock.relu1", "madry_model.BasicBlock.relu1", "madry_model.BasicBlock.bn2", "torch.dropout", "torch.dropout", "torch.dropout", "madry_model.BasicBlock.bn1", "madry_model.BasicBlock.bn1", "madry_model.BasicBlock.conv1", "madry_model.BasicBlock.poolpadShortcut"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "equalInOut", ":", "\n", "            ", "x", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "out", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv1", "(", "out", "if", "self", ".", "equalInOut", "else", "x", ")", ")", ")", "\n", "if", "self", ".", "droprate", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "droprate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "# return torch.add(x if self.equalInOut else self.convShortcut(x), out)", "\n", "return", "torch", ".", "add", "(", "\n", "x", "if", "self", ".", "equalInOut", "else", "self", ".", "poolpadShortcut", "(", "x", ")", ",", "\n", "out", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.madry_model.NetworkBlock.__init__": [[108, 111], ["torch.Module.__init__", "madry_model.NetworkBlock._make_layer"], "methods", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.madry_model.WideResNet.__init__", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.madry_model.NetworkBlock._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "nb_layers", ",", "in_planes", ",", "out_planes", ",", "block", ",", "stride", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "NetworkBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "self", ".", "_make_layer", "(", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", "\n", "", "def", "_make_layer", "(", "self", ",", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", ":", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.madry_model.NetworkBlock._make_layer": [[111, 116], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "int", "(", "nb_layers", ")", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "i", "==", "0", "and", "in_planes", "or", "out_planes", ",", "out_planes", ",", "i", "==", "0", "and", "stride", "or", "1", ",", "dropRate", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.madry_model.NetworkBlock.forward": [[116, 118], ["madry_model.NetworkBlock.layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.madry_model.WideResNet.__init__": [[120, 150], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "madry_model.NetworkBlock", "madry_model.NetworkBlock", "madry_model.NetworkBlock", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "madry_model.WideResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.madry_model.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "num_classes", ",", "widen_factor", "=", "1", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "WideResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nChannels", "=", "[", "16", ",", "16", "*", "widen_factor", ",", "32", "*", "widen_factor", ",", "64", "*", "widen_factor", "]", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", "\n", "n", "=", "(", "depth", "-", "4", ")", "/", "6", "\n", "block", "=", "BasicBlock", "\n", "# 1st conv before any network block", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "nChannels", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "# 1st block", "\n", "self", ".", "block1", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "0", "]", ",", "nChannels", "[", "1", "]", ",", "block", ",", "1", ",", "dropRate", ")", "\n", "# 2nd block", "\n", "self", ".", "block2", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "1", "]", ",", "nChannels", "[", "2", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "# 3rd block", "\n", "self", ".", "block3", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "2", "]", ",", "nChannels", "[", "3", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "# global average pooling and classifier", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nChannels", "[", "3", "]", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "nChannels", "[", "3", "]", ",", "num_classes", ")", "\n", "self", ".", "nChannels", "=", "nChannels", "[", "3", "]", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.model.madry_model.WideResNet.forward": [[151, 169], ["madry_model.WideResNet.conv1", "madry_model.WideResNet.block1", "madry_model.WideResNet.block2", "madry_model.WideResNet.block3", "madry_model.WideResNet.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "out.view.view.view", "madry_model.WideResNet.train", "madry_model.WideResNet.fc", "madry_model.WideResNet.eval", "madry_model.WideResNet.train", "madry_model.WideResNet.bn1"], "methods", ["home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.None.main_bn.Trainer.train", "home.repos.pwc.inspect_result.peterhan91_Medical-Robust-Training.None.main_bn.Trainer.train"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "_eval", "=", "False", ")", ":", "\n", "        ", "if", "_eval", ":", "\n", "# switch to eval mode", "\n", "            ", "self", ".", "eval", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "train", "(", ")", "\n", "\n", "", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "block1", "(", "out", ")", "\n", "out", "=", "self", ".", "block2", "(", "out", ")", "\n", "out", "=", "self", ".", "block3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "self", ".", "nChannels", ")", "\n", "\n", "self", ".", "train", "(", ")", "\n", "\n", "return", "self", ".", "fc", "(", "out", ")", "\n", "\n"]]}