{"home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flows.train_final_alt_iterative.compute_eval_loss": [[81, 90], ["enumerate", "data[].to", "data[].to", "model.score().sum", "model.score"], "function", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score"], ["def", "compute_eval_loss", "(", "model", ",", "eval_loader", ",", "device", ",", "n_points", ")", ":", "\n", "    ", "loss", "=", "0", "\n", "for", "_", ",", "data", "in", "enumerate", "(", "eval_loader", ")", ":", "\n", "        ", "data", "[", "0", "]", "=", "data", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "data", "[", "1", "]", "=", "data", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "\n", "loss", "+=", "-", "model", ".", "score", "(", "data", ")", ".", "sum", "(", ")", "\n", "\n", "", "return", "loss", "/", "n_points", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flows.train_final_alt_iterative.main": [[92, 218], ["int", "sklearn.utils.shuffle", "sklearn.model_selection.KFold", "numpy.diag", "enumerate", "numpy.load", "numpy.random.multivariate_normal", "sklearn.model_selection.KFold.split", "numpy.repeat", "numpy.repeat", "deconv.gmm.data.DeconvDataset", "torch.utils.data.DataLoader", "deconv.gmm.data.DeconvDataset", "torch.utils.data.DataLoader", "deconv.flow.svi_no_mdn.SVIFlowToy", "logger.info", "torch.optim.Adam", "copy.deepcopy", "train_final_alt_iterative.compute_eval_loss", "model.load_state_dict.train", "model.load_state_dict.load_state_dict", "logger.info", "numpy.load", "numpy.ones", "sum", "model.load_state_dict.state_dict", "len", "enumerate", "model.load_state_dict.eval", "logger.info", "train_final_alt_iterative.compute_eval_loss", "model.load_state_dict.train", "model.load_state_dict.model._prior.log_prob().mean", "numpy.load", "numpy.zeros", "model.load_state_dict.parameters", "data[].to", "data[].to", "model.load_state_dict.model._prior.parameters", "model.load_state_dict.model._approximate_posterior.parameters", "range", "model.load_state_dict.model._prior.parameters", "model.load_state_dict.model._approximate_posterior.parameters", "range", "model.load_state_dict.model._prior.log_prob().mean", "len", "copy.deepcopy", "p.numel", "logger.info", "torch.optim.Adam.zero_grad", "loss.backward", "torch.optim.Adam.step", "logger.info", "torch.optim.Adam.zero_grad", "loss.backward", "torch.optim.Adam.step", "model.load_state_dict.state_dict", "model.load_state_dict.model._prior.log_prob", "model.load_state_dict.parameters", "model.load_state_dict.score().mean", "model.load_state_dict.score().mean", "model.load_state_dict.model._prior.log_prob", "torch.from_numpy().to", "torch.from_numpy().to", "model.load_state_dict.score", "model.load_state_dict.score", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flows.train_toy.compute_eval_loss", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flows.train_toy.compute_eval_loss", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score"], ["", "def", "main", "(", ")", ":", "\n", "    ", "if", "args", ".", "data", "==", "'boston'", ":", "\n", "        ", "data", "=", "np", ".", "load", "(", "'data_small/boston_no_discrete.npy'", ")", "\n", "", "elif", "args", ".", "data", "==", "'white_wine'", ":", "\n", "        ", "data", "=", "np", ".", "load", "(", "'data_small/white_no_discrete_no_corr_0.98.npy'", ")", "\n", "", "elif", "args", ".", "data", "==", "'red_wine'", ":", "\n", "        ", "data", "=", "np", ".", "load", "(", "'data_small/red_no_discrete_no_corr_0.98.npy'", ")", "\n", "", "n_features", "=", "data", ".", "shape", "[", "1", "]", "\n", "n_train", "=", "int", "(", "data", ".", "shape", "[", "0", "]", "*", "0.9", ")", "\n", "train_data_clean", "=", "util_shuffle", "(", "data", "[", ":", "n_train", "]", ")", "\n", "test_data", "=", "data", "[", ":", "n_train", "]", "\n", "kf", "=", "KFold", "(", "n_splits", "=", "10", ")", "\n", "\n", "covar", "=", "np", ".", "diag", "(", "args", ".", "covar", "*", "np", ".", "ones", "(", "(", "n_features", ",", ")", ")", ")", "\n", "\n", "train_data", "=", "train_data_clean", "+", "np", ".", "random", ".", "multivariate_normal", "(", "mean", "=", "np", ".", "zeros", "(", "\n", "(", "n_features", ",", ")", ")", ",", "cov", "=", "covar", ",", "size", "=", "n_train", ")", "\n", "\n", "# train_covars = np.repeat(", "\n", "#     covar[np.newaxis, :, :], n_train, axis=0)", "\n", "\n", "# train_dataset = DeconvDataset(train_data, train_covars)", "\n", "for", "i", ",", "(", "train_index", ",", "eval_index", ")", "in", "enumerate", "(", "kf", ".", "split", "(", "train_data", ")", ")", ":", "\n", "        ", "X_train", ",", "X_eval", "=", "train_data", "[", "train_index", "]", ",", "train_data", "[", "eval_index", "]", "\n", "train_covars", "=", "np", ".", "repeat", "(", "\n", "covar", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ",", "X_train", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "eval_covars", "=", "np", ".", "repeat", "(", "\n", "covar", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ",", "X_eval", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "\n", "train_dataset", "=", "DeconvDataset", "(", "X_train", ",", "train_covars", ")", "\n", "train_loader", "=", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "\n", "eval_dataset", "=", "DeconvDataset", "(", "X_eval", ",", "eval_covars", ")", "\n", "eval_loader", "=", "DataLoader", "(", "\n", "eval_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ")", "\n", "\n", "model", "=", "SVIFlowToy", "(", "dimensions", "=", "n_features", ",", "\n", "objective", "=", "args", ".", "objective", ",", "\n", "posterior_context_size", "=", "n_features", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "device", "=", "device", ",", "\n", "maf_steps_prior", "=", "args", ".", "flow_steps_prior", ",", "\n", "maf_steps_posterior", "=", "args", ".", "flow_steps_posterior", ",", "\n", "maf_features", "=", "args", ".", "maf_features", ",", "\n", "maf_hidden_blocks", "=", "args", ".", "maf_hidden_blocks", ",", "\n", "K", "=", "args", ".", "K", ")", "\n", "\n", "message", "=", "'Total number of parameters: %s'", "%", "(", "\n", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "message", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params", "=", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "\n", "# training", "\n", "scheduler", "=", "[", "30", "]", "\n", "epoch", "=", "0", "\n", "best_model", "=", "copy", ".", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "\n", "best_eval_loss", "=", "compute_eval_loss", "(", "\n", "model", ",", "eval_loader", ",", "device", ",", "len", "(", "eval_index", ")", ")", "\n", "n_epochs_not_improved", "=", "0", "\n", "\n", "model", ".", "train", "(", ")", "\n", "while", "n_epochs_not_improved", "<", "scheduler", "[", "-", "1", "]", "and", "epoch", "<", "args", ".", "n_epochs", ":", "\n", "            ", "for", "batch_idx", ",", "data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "                ", "data", "[", "0", "]", "=", "data", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "data", "[", "1", "]", "=", "data", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "\n", "for", "prior_params", "in", "model", ".", "model", ".", "_prior", ".", "parameters", "(", ")", ":", "\n", "                    ", "prior_params", ".", "requires_grad", "=", "True", "\n", "\n", "", "for", "post_params", "in", "model", ".", "model", ".", "_approximate_posterior", ".", "parameters", "(", ")", ":", "\n", "                    ", "post_params", ".", "requires_grad", "=", "False", "\n", "\n", "", "for", "i", "in", "range", "(", "args", ".", "prior_iter", ")", ":", "\n", "\n", "                    ", "loss", "=", "-", "model", ".", "score", "(", "data", ")", ".", "mean", "(", ")", "\n", "message", "=", "'Loss prior %s: %f'", "%", "(", "i", ",", "loss", ")", "\n", "logger", ".", "info", "(", "message", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "for", "prior_params", "in", "model", ".", "model", ".", "_prior", ".", "parameters", "(", ")", ":", "\n", "                    ", "prior_params", ".", "requires_grad", "=", "False", "\n", "\n", "", "for", "post_params", "in", "model", ".", "model", ".", "_approximate_posterior", ".", "parameters", "(", ")", ":", "\n", "                    ", "post_params", ".", "requires_grad", "=", "True", "\n", "\n", "", "for", "i", "in", "range", "(", "args", ".", "posterior_iter", ")", ":", "\n", "                    ", "loss", "=", "-", "model", ".", "score", "(", "data", ")", ".", "mean", "(", ")", "\n", "message", "=", "'Loss posterior %s: %f'", "%", "(", "i", ",", "loss", ")", "\n", "logger", ".", "info", "(", "message", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "", "model", ".", "eval", "(", ")", "\n", "test_loss_clean", "=", "-", "model", ".", "model", ".", "_prior", ".", "log_prob", "(", "\n", "torch", ".", "from_numpy", "(", "test_data", ")", ".", "to", "(", "device", ")", ")", ".", "mean", "(", ")", "\n", "message", "=", "'Test loss (clean) = %.5f'", "%", "test_loss_clean", "\n", "logger", ".", "info", "(", "message", ")", "\n", "eval_loss", "=", "compute_eval_loss", "(", "\n", "model", ",", "eval_loader", ",", "device", ",", "len", "(", "eval_index", ")", ")", "\n", "\n", "if", "eval_loss", "<", "best_eval_loss", ":", "\n", "                ", "best_model", "=", "copy", ".", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "best_eval_loss", "=", "eval_loss", "\n", "n_epochs_not_improved", "=", "0", "\n", "\n", "", "else", ":", "\n", "                ", "n_epochs_not_improved", "+=", "1", "\n", "\n", "", "model", ".", "train", "(", ")", "\n", "epoch", "+=", "1", "\n", "", "break", "\n", "\n", "model", "=", "model", ".", "load_state_dict", "(", "best_model", ")", "\n", "test_loss_clean", "=", "-", "model", ".", "model", ".", "_prior", ".", "log_prob", "(", "\n", "torch", ".", "from_numpy", "(", "test_data", ")", ".", "to", "(", "device", ")", ")", ".", "mean", "(", ")", "\n", "message", "=", "'Final test loss (clean) = %.5f'", "%", "test_loss_clean", "\n", "logger", ".", "info", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flows.train_final_alt_iterative_v2.compute_eval_loss": [[80, 89], ["enumerate", "data[].to", "data[].to", "model.score().sum", "model.score"], "function", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score"], ["def", "compute_eval_loss", "(", "model", ",", "eval_loader", ",", "device", ",", "n_points", ")", ":", "\n", "    ", "loss", "=", "0", "\n", "for", "_", ",", "data", "in", "enumerate", "(", "eval_loader", ")", ":", "\n", "        ", "data", "[", "0", "]", "=", "data", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "data", "[", "1", "]", "=", "data", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "\n", "loss", "+=", "-", "model", ".", "score", "(", "data", ")", ".", "sum", "(", ")", "\n", "\n", "", "return", "loss", "/", "n_points", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flows.train_final_alt_iterative_v2.main": [[91, 231], ["int", "sklearn.utils.shuffle", "sklearn.model_selection.KFold", "numpy.diag", "enumerate", "numpy.load", "numpy.random.multivariate_normal", "sklearn.model_selection.KFold.split", "numpy.repeat", "numpy.repeat", "deconv.gmm.data.DeconvDataset", "torch.utils.data.DataLoader", "deconv.gmm.data.DeconvDataset", "torch.utils.data.DataLoader", "deconv.flow.svi_no_mdn.SVIFlowToy", "logger.info", "torch.optim.Adam", "copy.deepcopy", "train_final_alt_iterative_v2.compute_eval_loss", "model.load_state_dict.train", "model.load_state_dict.model._prior.parameters", "model.load_state_dict.load_state_dict", "logger.info", "numpy.load", "numpy.ones", "sum", "model.load_state_dict.state_dict", "len", "enumerate", "model.load_state_dict.eval", "logger.info", "train_final_alt_iterative_v2.compute_eval_loss", "model.load_state_dict.train", "model.load_state_dict.model._prior.log_prob().mean", "numpy.load", "numpy.zeros", "model.load_state_dict.parameters", "data[].to", "data[].to", "copy.deepcopy", "range", "model.load_state_dict.model._prior.parameters", "model.load_state_dict.model._approximate_posterior.parameters", "logger.info", "torch.optim.Adam.zero_grad", "loss.backward", "torch.optim.Adam.step", "model.load_state_dict.model._approximate_posterior.load_state_dict", "model.load_state_dict.model._prior.parameters", "model.load_state_dict.model._approximate_posterior.parameters", "logger.info", "torch.optim.Adam.zero_grad", "loss.backward", "torch.optim.Adam.step", "model.load_state_dict.model._prior.log_prob().mean", "len", "copy.deepcopy", "p.numel", "model.load_state_dict.model._approximate_posterior.state_dict", "logger.info", "torch.optim.Adam.zero_grad", "loss.backward", "torch.optim.Adam.step", "model.load_state_dict.score().mean", "model.load_state_dict.score().mean", "model.load_state_dict.state_dict", "model.load_state_dict.model._prior.log_prob", "model.load_state_dict.parameters", "model.load_state_dict.score().mean", "model.load_state_dict.model._prior.log_prob", "torch.from_numpy().to", "model.load_state_dict.score", "model.load_state_dict.score", "torch.from_numpy().to", "model.load_state_dict.score", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flows.train_toy.compute_eval_loss", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flows.train_toy.compute_eval_loss", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score"], ["", "def", "main", "(", ")", ":", "\n", "    ", "if", "args", ".", "data", "==", "'boston'", ":", "\n", "        ", "data", "=", "np", ".", "load", "(", "'data_small/boston_no_discrete.npy'", ")", "\n", "", "elif", "args", ".", "data", "==", "'white_wine'", ":", "\n", "        ", "data", "=", "np", ".", "load", "(", "'data_small/white_no_discrete_no_corr_0.98.npy'", ")", "\n", "", "elif", "args", ".", "data", "==", "'red_wine'", ":", "\n", "        ", "data", "=", "np", ".", "load", "(", "'data_small/red_no_discrete_no_corr_0.98.npy'", ")", "\n", "", "n_features", "=", "data", ".", "shape", "[", "1", "]", "\n", "n_train", "=", "int", "(", "data", ".", "shape", "[", "0", "]", "*", "0.9", ")", "\n", "train_data_clean", "=", "util_shuffle", "(", "data", "[", ":", "n_train", "]", ")", "\n", "test_data", "=", "data", "[", ":", "n_train", "]", "\n", "kf", "=", "KFold", "(", "n_splits", "=", "10", ")", "\n", "\n", "covar", "=", "np", ".", "diag", "(", "args", ".", "covar", "*", "np", ".", "ones", "(", "(", "n_features", ",", ")", ")", ")", "\n", "\n", "train_data", "=", "train_data_clean", "+", "np", ".", "random", ".", "multivariate_normal", "(", "mean", "=", "np", ".", "zeros", "(", "\n", "(", "n_features", ",", ")", ")", ",", "cov", "=", "covar", ",", "size", "=", "n_train", ")", "\n", "\n", "# train_covars = np.repeat(", "\n", "#     covar[np.newaxis, :, :], n_train, axis=0)", "\n", "\n", "# train_dataset = DeconvDataset(train_data, train_covars)", "\n", "for", "i", ",", "(", "train_index", ",", "eval_index", ")", "in", "enumerate", "(", "kf", ".", "split", "(", "train_data", ")", ")", ":", "\n", "        ", "X_train", ",", "X_eval", "=", "train_data", "[", "train_index", "]", ",", "train_data", "[", "eval_index", "]", "\n", "train_covars", "=", "np", ".", "repeat", "(", "\n", "covar", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ",", "X_train", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "eval_covars", "=", "np", ".", "repeat", "(", "\n", "covar", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ",", "X_eval", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "\n", "train_dataset", "=", "DeconvDataset", "(", "X_train", ",", "train_covars", ")", "\n", "train_loader", "=", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "\n", "eval_dataset", "=", "DeconvDataset", "(", "X_eval", ",", "eval_covars", ")", "\n", "eval_loader", "=", "DataLoader", "(", "\n", "eval_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ")", "\n", "\n", "model", "=", "SVIFlowToy", "(", "dimensions", "=", "n_features", ",", "\n", "objective", "=", "args", ".", "objective", ",", "\n", "posterior_context_size", "=", "n_features", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "device", "=", "device", ",", "\n", "maf_steps_prior", "=", "args", ".", "flow_steps_prior", ",", "\n", "maf_steps_posterior", "=", "args", ".", "flow_steps_posterior", ",", "\n", "maf_features", "=", "args", ".", "maf_features", ",", "\n", "maf_hidden_blocks", "=", "args", ".", "maf_hidden_blocks", ",", "\n", "K", "=", "args", ".", "K", ")", "\n", "\n", "message", "=", "'Total number of parameters: %s'", "%", "(", "\n", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "message", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params", "=", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "\n", "# training", "\n", "scheduler", "=", "[", "30", "]", "\n", "epoch", "=", "0", "\n", "best_model", "=", "copy", ".", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "\n", "best_eval_loss", "=", "compute_eval_loss", "(", "\n", "model", ",", "eval_loader", ",", "device", ",", "len", "(", "eval_index", ")", ")", "\n", "n_epochs_not_improved", "=", "0", "\n", "\n", "model", ".", "train", "(", ")", "\n", "for", "prior_params", "in", "model", ".", "model", ".", "_prior", ".", "parameters", "(", ")", ":", "\n", "            ", "prior_params", ".", "requires_grad", "=", "False", "\n", "\n", "", "while", "n_epochs_not_improved", "<", "scheduler", "[", "-", "1", "]", "and", "epoch", "<", "args", ".", "n_epochs", ":", "\n", "            ", "for", "batch_idx", ",", "data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "                ", "data", "[", "0", "]", "=", "data", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "data", "[", "1", "]", "=", "data", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "\n", "ap", "=", "copy", ".", "deepcopy", "(", "\n", "model", ".", "model", ".", "_approximate_posterior", ".", "state_dict", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "M", ")", ":", "\n", "\n", "                    ", "loss", "=", "-", "model", ".", "score", "(", "data", ")", ".", "mean", "(", ")", "\n", "message", "=", "'Loss intermediate %s: %f'", "%", "(", "i", ",", "loss", ")", "\n", "logger", ".", "info", "(", "message", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "for", "prior_params", "in", "model", ".", "model", ".", "_prior", ".", "parameters", "(", ")", ":", "\n", "                    ", "prior_params", ".", "requires_grad", "=", "True", "\n", "\n", "", "for", "post_params", "in", "model", ".", "model", ".", "_approximate_posterior", ".", "parameters", "(", ")", ":", "\n", "                    ", "post_params", ".", "requires_grad", "=", "False", "\n", "\n", "", "loss", "=", "-", "model", ".", "score", "(", "data", ")", ".", "mean", "(", ")", "\n", "message", "=", "'Loss prior %f'", "%", "loss", "\n", "logger", ".", "info", "(", "message", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# replace optimized approximate posterior with old approximate posterior", "\n", "model", ".", "model", ".", "_approximate_posterior", ".", "load_state_dict", "(", "ap", ")", "\n", "\n", "for", "prior_params", "in", "model", ".", "model", ".", "_prior", ".", "parameters", "(", ")", ":", "\n", "                    ", "prior_params", ".", "requires_grad", "=", "False", "\n", "\n", "", "for", "post_params", "in", "model", ".", "model", ".", "_approximate_posterior", ".", "parameters", "(", ")", ":", "\n", "                    ", "post_params", ".", "requires_grad", "=", "True", "\n", "\n", "", "loss", "=", "-", "model", ".", "score", "(", "data", ")", ".", "mean", "(", ")", "\n", "message", "=", "'Loss posterior %f'", "%", "loss", "\n", "logger", ".", "info", "(", "message", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "test_loss_clean", "=", "-", "model", ".", "model", ".", "_prior", ".", "log_prob", "(", "\n", "torch", ".", "from_numpy", "(", "test_data", ")", ".", "to", "(", "device", ")", ")", ".", "mean", "(", ")", "\n", "message", "=", "'Test loss (clean) = %.5f'", "%", "test_loss_clean", "\n", "logger", ".", "info", "(", "message", ")", "\n", "eval_loss", "=", "compute_eval_loss", "(", "\n", "model", ",", "eval_loader", ",", "device", ",", "len", "(", "eval_index", ")", ")", "\n", "\n", "if", "eval_loss", "<", "best_eval_loss", ":", "\n", "                ", "best_model", "=", "copy", ".", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "best_eval_loss", "=", "eval_loss", "\n", "n_epochs_not_improved", "=", "0", "\n", "\n", "", "else", ":", "\n", "                ", "n_epochs_not_improved", "+=", "1", "\n", "\n", "", "model", ".", "train", "(", ")", "\n", "epoch", "+=", "1", "\n", "", "break", "\n", "\n", "model", "=", "model", ".", "load_state_dict", "(", "best_model", ")", "\n", "test_loss_clean", "=", "-", "model", ".", "model", ".", "_prior", ".", "log_prob", "(", "\n", "torch", ".", "from_numpy", "(", "test_data", ")", ".", "to", "(", "device", ")", ")", ".", "mean", "(", ")", "\n", "message", "=", "'Final test loss (clean) = %.5f'", "%", "test_loss_clean", "\n", "logger", ".", "info", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flows.train_hypertuning.compute_eval_loss": [[65, 74], ["enumerate", "data[].to", "data[].to", "model.score().sum", "model.score"], "function", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score"], ["def", "compute_eval_loss", "(", "model", ",", "eval_loader", ",", "device", ",", "n_points", ")", ":", "\n", "    ", "loss", "=", "0", "\n", "for", "_", ",", "data", "in", "enumerate", "(", "eval_loader", ")", ":", "\n", "        ", "data", "[", "0", "]", "=", "data", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "data", "[", "1", "]", "=", "data", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "\n", "loss", "+=", "-", "model", ".", "score", "(", "data", ")", ".", "sum", "(", ")", "\n", "\n", "", "return", "loss", "/", "n_points", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flows.train_hypertuning.main": [[76, 199], ["int", "numpy.diag", "sklearn.model_selection.KFold", "itertools.product", "numpy.zeros", "itertools.product", "numpy.save", "numpy.load", "numpy.random.multivariate_normal", "print", "logger.info", "enumerate", "numpy.load", "numpy.ones", "sklearn.model_selection.KFold.split", "numpy.repeat", "numpy.repeat", "deconv.gmm.data.DeconvDataset", "torch.utils.data.DataLoader", "deconv.gmm.data.DeconvDataset", "torch.utils.data.DataLoader", "deconv.flow.svi_no_mdn.SVIFlowToy", "logger.info", "torch.optim.Adam", "deconv.flow.svi_no_mdn.SVIFlowToy.eval", "deconv.flow.svi_no_mdn.SVIFlowToy.train", "numpy.save", "numpy.load", "numpy.zeros", "sum", "torch.no_grad", "train_hypertuning.compute_eval_loss", "copy.deepcopy", "enumerate", "deconv.flow.svi_no_mdn.SVIFlowToy.eval", "deconv.flow.svi_no_mdn.SVIFlowToy.train", "numpy.load", "deconv.flow.svi_no_mdn.SVIFlowToy.parameters", "deconv.flow.svi_no_mdn.SVIFlowToy.state_dict", "data[].to", "data[].to", "torch.optim.Adam.zero_grad", "loss.backward", "torch.optim.Adam.step", "torch.no_grad", "train_hypertuning.compute_eval_loss", "logger.info", "p.numel", "deconv.flow.svi_no_mdn.SVIFlowToy.score().mean", "copy.deepcopy", "deconv.flow.svi_no_mdn.SVIFlowToy.parameters", "deconv.flow.svi_no_mdn.SVIFlowToy.state_dict", "deconv.flow.svi_no_mdn.SVIFlowToy.score"], "function", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flows.train_toy.compute_eval_loss", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flows.train_toy.compute_eval_loss", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score"], ["", "def", "main", "(", ")", ":", "\n", "    ", "if", "args", ".", "data", "==", "'boston'", ":", "\n", "        ", "data", "=", "np", ".", "load", "(", "'data_small/boston_no_discrete.npy'", ")", "\n", "", "elif", "args", ".", "data", "==", "'white_wine'", ":", "\n", "        ", "data", "=", "np", ".", "load", "(", "'data_small/white_no_discrete_no_corr_0.98.npy'", ")", "\n", "", "elif", "args", ".", "data", "==", "'red_wine'", ":", "\n", "        ", "data", "=", "np", ".", "load", "(", "'data_small/red_no_discrete_no_corr_0.98.npy'", ")", "\n", "", "elif", "args", ".", "data", "==", "'ionosphere'", ":", "\n", "        ", "data", "=", "np", ".", "load", "(", "'data_small/ionosphere_no_discrete_no_corr_0.98.npy'", ")", "\n", "\n", "", "n_features", "=", "data", ".", "shape", "[", "1", "]", "\n", "n_train", "=", "int", "(", "data", ".", "shape", "[", "0", "]", "*", "0.9", ")", "\n", "train_data_clean", "=", "data", "[", ":", "n_train", "]", "\n", "\n", "covar", "=", "np", ".", "diag", "(", "args", ".", "covar", "*", "np", ".", "ones", "(", "(", "n_features", ",", ")", ")", ")", "\n", "\n", "train_data", "=", "train_data_clean", "+", "np", ".", "random", ".", "multivariate_normal", "(", "mean", "=", "np", ".", "zeros", "(", "\n", "(", "n_features", ",", ")", ")", ",", "cov", "=", "covar", ",", "size", "=", "n_train", ")", "\n", "\n", "kf", "=", "KFold", "(", "n_splits", "=", "5", ")", "\n", "\n", "# 54 combinations", "\n", "lr_list", "=", "[", "1e-3", ",", "5e-4", ",", "1e-4", "]", "\n", "flow_steps_prior_list", "=", "[", "3", ",", "4", ",", "5", "]", "\n", "flow_steps_posterior_list", "=", "[", "3", ",", "4", ",", "5", "]", "\n", "maf_features_list", "=", "[", "64", ",", "128", "]", "\n", "maf_hidden_blocks_list", "=", "[", "1", ",", "2", "]", "\n", "\n", "n_combs", "=", "0", "\n", "for", "lr", ",", "fspr", ",", "fspo", ",", "maf_f", ",", "maf_h", "in", "product", "(", "lr_list", ",", "flow_steps_posterior_list", ",", "flow_steps_posterior_list", ",", "maf_features_list", ",", "maf_hidden_blocks_list", ")", ":", "\n", "        ", "n_combs", "+=", "1", "\n", "print", "(", "n_combs", ",", "(", "lr", ",", "fspr", ",", "fspo", ",", "maf_f", ",", "maf_h", ")", ")", "\n", "\n", "", "best_eval", "=", "np", ".", "zeros", "(", "(", "n_combs", ",", "5", ")", ")", "\n", "\n", "counter", "=", "0", "\n", "for", "lr", ",", "fspr", ",", "fspo", ",", "maf_f", ",", "maf_h", "in", "product", "(", "lr_list", ",", "flow_steps_posterior_list", ",", "flow_steps_posterior_list", ",", "maf_features_list", ",", "maf_hidden_blocks_list", ")", ":", "\n", "        ", "logger", ".", "info", "(", "(", "lr", ",", "fspr", ",", "fspo", ",", "maf_f", ",", "maf_h", ")", ")", "\n", "\n", "for", "i", ",", "(", "train_index", ",", "eval_index", ")", "in", "enumerate", "(", "kf", ".", "split", "(", "train_data", ")", ")", ":", "\n", "            ", "X_train", ",", "X_eval", "=", "train_data", "[", "train_index", "]", ",", "train_data", "[", "eval_index", "]", "\n", "train_covars", "=", "np", ".", "repeat", "(", "\n", "covar", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ",", "X_train", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "eval_covars", "=", "np", ".", "repeat", "(", "\n", "covar", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ",", "X_eval", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "\n", "train_dataset", "=", "DeconvDataset", "(", "X_train", ",", "train_covars", ")", "\n", "train_loader", "=", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "\n", "eval_dataset", "=", "DeconvDataset", "(", "X_eval", ",", "eval_covars", ")", "\n", "eval_loader", "=", "DataLoader", "(", "\n", "eval_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ")", "\n", "\n", "model", "=", "SVIFlowToy", "(", "dimensions", "=", "n_features", ",", "\n", "objective", "=", "args", ".", "objective", ",", "\n", "posterior_context_size", "=", "n_features", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "device", "=", "device", ",", "\n", "maf_steps_prior", "=", "fspr", ",", "\n", "maf_steps_posterior", "=", "fspo", ",", "\n", "maf_features", "=", "maf_f", ",", "\n", "maf_hidden_blocks", "=", "maf_h", ",", "\n", "K", "=", "args", ".", "K", ")", "\n", "\n", "message", "=", "'Total number of parameters: %s'", "%", "(", "\n", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "message", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params", "=", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "\n", "# training", "\n", "scheduler", "=", "[", "30", "]", "# stop after 30 epochs of no improvement", "\n", "epoch", "=", "0", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "best_eval_loss", "=", "compute_eval_loss", "(", "\n", "model", ",", "eval_loader", ",", "device", ",", "X_eval", ".", "shape", "[", "0", "]", ")", "\n", "\n", "best_model", "=", "copy", ".", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "\n", "", "n_epochs_not_improved", "=", "0", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n", "while", "n_epochs_not_improved", "<", "scheduler", "[", "-", "1", "]", "and", "epoch", "<", "args", ".", "n_epochs", ":", "\n", "                ", "for", "batch_idx", ",", "data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "                    ", "data", "[", "0", "]", "=", "data", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "data", "[", "1", "]", "=", "data", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "\n", "loss", "=", "-", "model", ".", "score", "(", "data", ")", ".", "mean", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "eval_loss", "=", "compute_eval_loss", "(", "\n", "model", ",", "eval_loader", ",", "device", ",", "X_eval", ".", "shape", "[", "0", "]", ")", "\n", "\n", "if", "eval_loss", "<", "best_eval_loss", ":", "\n", "                        ", "best_model", "=", "copy", ".", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "best_eval_loss", "=", "eval_loss", "\n", "n_epochs_not_improved", "=", "0", "\n", "\n", "", "else", ":", "\n", "                        ", "n_epochs_not_improved", "+=", "1", "\n", "\n", "", "message", "=", "'Epoch %s:'", "%", "(", "\n", "epoch", "+", "1", ")", ",", "'train loss = %.5f'", "%", "loss", ",", "'eval loss = %.5f'", "%", "eval_loss", "\n", "logger", ".", "info", "(", "message", ")", "\n", "\n", "", "model", ".", "train", "(", ")", "\n", "epoch", "+=", "1", "\n", "\n", "", "best_eval", "[", "counter", ",", "i", "]", "=", "best_eval_loss", "\n", "np", ".", "save", "(", "args", ".", "data", "+", "'_hypertuning_results_tmp'", ",", "best_eval", ")", "\n", "\n", "", "counter", "+=", "1", "\n", "\n", "", "np", ".", "save", "(", "args", ".", "data", "+", "'_hypertuning_results'", ",", "best_eval", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flows.train_final.main": [[76, 140], ["numpy.load", "int", "numpy.diag", "numpy.repeat", "deconv.gmm.data.DeconvDataset", "torch.utils.data.DataLoader", "deconv.flow.svi_no_mdn.SVIFlowToy", "logger.info", "torch.optim.Adam", "logger.info", "numpy.random.multivariate_normal", "sum", "enumerate", "logger.info", "deconv.flow.svi_no_mdn.SVIFlowToy.model._prior.log_prob().mean", "numpy.ones", "deconv.flow.svi_no_mdn.SVIFlowToy.parameters", "data[].to", "data[].to", "deconv.flow.svi_no_mdn.SVIFlowToy.score", "torch.optim.Adam.zero_grad", "loss.backward", "torch.optim.Adam.step", "numpy.zeros", "p.numel", "model.score.mean", "torch.sum().item", "deconv.flow.svi_no_mdn.SVIFlowToy.model._prior.log_prob", "deconv.flow.svi_no_mdn.SVIFlowToy.parameters", "torch.from_numpy().to", "torch.sum", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob"], ["def", "main", "(", ")", ":", "\n", "    ", "data", "=", "np", ".", "load", "(", "'data_small/boston_no_discrete.npy'", ")", "\n", "n_features", "=", "data", ".", "shape", "[", "1", "]", "\n", "n_train", "=", "int", "(", "data", ".", "shape", "[", "0", "]", "*", "0.9", ")", "\n", "train_data_clean", "=", "data", "[", ":", "n_train", "]", "\n", "\n", "covar", "=", "np", ".", "diag", "(", "args", ".", "covar", "*", "np", ".", "ones", "(", "(", "11", ",", ")", ")", ")", "\n", "\n", "train_data", "=", "train_data_clean", "+", "np", ".", "random", ".", "multivariate_normal", "(", "mean", "=", "np", ".", "zeros", "(", "\n", "(", "11", ",", ")", ")", ",", "cov", "=", "covar", ",", "size", "=", "n_train", ")", "\n", "\n", "train_covars", "=", "np", ".", "repeat", "(", "\n", "covar", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ",", "n_train", ",", "axis", "=", "0", ")", "\n", "\n", "train_dataset", "=", "DeconvDataset", "(", "train_data", ",", "train_covars", ")", "\n", "train_loader", "=", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "\n", "model", "=", "SVIFlowToy", "(", "dimensions", "=", "n_features", ",", "\n", "objective", "=", "args", ".", "objective", ",", "\n", "posterior_context_size", "=", "n_features", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "device", "=", "device", ",", "\n", "maf_steps_prior", "=", "args", ".", "flow_steps_prior", ",", "\n", "maf_steps_posterior", "=", "args", ".", "flow_steps_posterior", ",", "\n", "maf_features", "=", "args", ".", "maf_features", ",", "\n", "maf_hidden_blocks", "=", "args", ".", "maf_hidden_blocks", ",", "\n", "K", "=", "args", ".", "K", ")", "\n", "\n", "message", "=", "'Total number of parameters: %s'", "%", "(", "\n", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "message", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params", "=", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "\n", "# training", "\n", "epoch", "=", "0", "\n", "while", "epoch", "<", "args", ".", "n_epochs", ":", "\n", "        ", "train_loss", "=", "0", "\n", "for", "batch_idx", ",", "data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "data", "[", "0", "]", "=", "data", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "data", "[", "1", "]", "=", "data", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "\n", "log_prob", "=", "model", ".", "score", "(", "data", ")", "\n", "loss", "=", "-", "log_prob", ".", "mean", "(", ")", "\n", "train_loss", "+=", "-", "torch", ".", "sum", "(", "log_prob", ")", ".", "item", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "train_loss", "/=", "n_train", "\n", "message", "=", "'Train loss %.5f'", "%", "train_loss", "\n", "logger", ".", "info", "(", "message", ")", "\n", "\n", "if", "train_loss", "<", "9.02486", ":", "# boston housing", "\n", "            ", "break", "\n", "\n", "", "", "test_loss_clean", "=", "-", "model", ".", "model", ".", "_prior", ".", "log_prob", "(", "\n", "torch", ".", "from_numpy", "(", "data", "[", "n_train", ":", "]", ")", ".", "to", "(", "device", ")", ")", ".", "mean", "(", ")", "\n", "\n", "message", "=", "'Test loss (clean) = %.5f'", "%", "test_loss_clean", "\n", "logger", ".", "info", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flows.train_toy_no_mdn_double.lr_scheduler": [[98, 110], ["range", "logger.info", "len"], "function", ["None"], ["def", "lr_scheduler", "(", "n_epochs_not_improved", ",", "optimzer", ",", "scheduler", ",", "logger", ")", ":", "\n", "    ", "lr", "=", "args", ".", "lr", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "scheduler", ")", "-", "1", ")", ":", "\n", "        ", "if", "n_epochs_not_improved", ">", "scheduler", "[", "i", "]", ":", "\n", "            ", "lr", "*=", "0.1", "\n", "\n", "", "", "for", "param_group", "in", "optimzer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n", "", "message", "=", "'New learning rate: %f'", "%", "lr", "\n", "logger", ".", "info", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flows.train_toy_no_mdn_double.compute_eval_loss": [[112, 121], ["enumerate", "data[].to", "data[].to", "model.score().sum", "model.score"], "function", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score"], ["", "def", "compute_eval_loss", "(", "model", ",", "eval_loader", ",", "device", ",", "n_points", ")", ":", "\n", "    ", "loss", "=", "0", "\n", "for", "_", ",", "data", "in", "enumerate", "(", "eval_loader", ")", ":", "\n", "        ", "data", "[", "0", "]", "=", "data", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "data", "[", "1", "]", "=", "data", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "\n", "loss", "+=", "-", "model", ".", "score", "(", "data", ")", ".", "sum", "(", ")", "\n", "\n", "", "return", "loss", "/", "n_points", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flows.train_toy_no_mdn_double.main": [[123, 313], ["deconv.utils.make_2d_toy_noise_covar.covar_gen().astype", "[].astype", "corner.hist2d", "matplotlib.show", "numpy.zeros_like", "range", "corner.hist2d", "matplotlib.show", "torch.from_numpy", "torch.from_numpy", "deconv.gmm.data.DeconvDataset", "torch.utils.data.DataLoader", "torch.from_numpy", "deconv.utils.make_2d_toy_noise_covar.covar_gen().astype", "[].astype", "numpy.zeros_like", "range", "torch.from_numpy", "torch.from_numpy", "deconv.gmm.data.DeconvDataset", "torch.utils.data.DataLoader", "logger.info", "torch.optim.Adam", "list", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.eval", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.train", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.load_state_dict", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.eval", "logger.info", "torch.save", "logger.info", "torch.from_numpy.astype", "[].astype", "torch.from_numpy.astype", "deconv.flow.svi_no_mdn.SVIFlowToy", "deconv.flow.svi_no_mdn.SVIFlowToyNoise", "sum", "map", "torch.no_grad", "train_toy_no_mdn_double.compute_eval_loss", "copy.deepcopy", "enumerate", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.eval", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.train", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.state_dict", "[].astype", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.model._prior.log_prob().mean", "deconv.utils.compute_2d_log_likelihood.compute_data_ll().mean", "logger.info", "deconv.utils.make_2d_toy_noise_covar.covar_gen", "numpy.random.multivariate_normal", "deconv.utils.make_2d_toy_noise_covar.covar_gen", "numpy.random.multivariate_normal", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.parameters", "args.eval_based_scheduler.split", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.state_dict", "data[].to", "data[].to", "torch.optim.Adam.zero_grad", "loss.backward", "torch.optim.Adam.step", "torch.no_grad", "train_toy_no_mdn_double.compute_eval_loss", "train_toy_no_mdn_double.lr_scheduler", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.model._prior.log_prob().mean", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.model._likelihood.log_prob().mean", "deconv.utils.make_2d_toy_data.data_gen", "deconv.utils.make_2d_toy_data.data_gen", "list", "p.numel", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.score().mean", "copy.deepcopy", "logger.info", "logger.info", "corner.hist2d", "matplotlib.savefig", "matplotlib.close", "matplotlib.scatter", "matplotlib.savefig", "matplotlib.close", "args.data.split", "args.data.split", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.model._prior.log_prob", "deconv.utils.compute_2d_log_likelihood.compute_data_ll", "numpy.zeros", "deconv.utils.make_2d_toy_data.data_gen", "numpy.zeros", "map", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.parameters", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.state_dict", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.model._prior.sample().detach().cpu().numpy", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.model._likelihood.sample().detach().cpu().numpy", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.model._prior.log_prob", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.model._likelihood.log_prob", "deconv.utils.make_2d_toy_data.data_gen", "torch.from_numpy().to", "args.posterior_mdn.split", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.score", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.model._prior.log_prob().mean", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.model._likelihood.log_prob().mean", "str", "str", "torch.from_numpy.to", "torch.from_numpy.to", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.model._prior.sample().detach().cpu", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.model._likelihood.sample().detach().cpu", "torch.from_numpy", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.model._prior.log_prob", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.model._likelihood.log_prob", "[].astype.astype", "torch.from_numpy.to", "torch.from_numpy.to", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.model._prior.sample().detach", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.model._likelihood.sample().detach", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.model._prior.sample", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.model._likelihood.sample"], "function", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flows.train_toy.compute_eval_loss", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.utils.make_2d_toy_noise_covar.covar_gen", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.utils.make_2d_toy_noise_covar.covar_gen", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flows.train_toy.compute_eval_loss", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flows.train_toy.lr_scheduler", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.utils.make_2d_toy_data.data_gen", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.utils.make_2d_toy_data.data_gen", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.utils.compute_2d_log_likelihood.compute_data_ll", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.utils.make_2d_toy_data.data_gen", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.utils.make_2d_toy_data.data_gen", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample"], ["", "def", "main", "(", ")", ":", "\n", "    ", "train_covar", "=", "covar_gen", "(", "args", ".", "covar", ",", "args", ".", "n_train_points", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "train_data_clean", "=", "data_gen", "(", "args", ".", "data", ",", "args", ".", "n_train_points", ")", "[", "\n", "0", "]", ".", "astype", "(", "np", ".", "float64", ")", "\n", "\n", "corner", ".", "hist2d", "(", "train_data_clean", "[", ":", ",", "0", "]", ",", "train_data_clean", "[", ":", ",", "1", "]", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "train_data", "=", "np", ".", "zeros_like", "(", "train_data_clean", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "n_train_points", ")", ":", "\n", "        ", "train_data", "[", "i", "]", "=", "train_data_clean", "[", "i", "]", "+", "np", ".", "random", ".", "multivariate_normal", "(", "\n", "mean", "=", "np", ".", "zeros", "(", "(", "2", ",", ")", ")", ",", "cov", "=", "train_covar", "[", "i", "]", ")", "\n", "\n", "", "corner", ".", "hist2d", "(", "train_data", "[", ":", ",", "0", "]", ",", "train_data", "[", ":", ",", "1", "]", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "train_covar", "=", "torch", ".", "from_numpy", "(", "train_covar", ")", "\n", "train_data", "=", "torch", ".", "from_numpy", "(", "train_data", ".", "astype", "(", "np", ".", "float64", ")", ")", "\n", "\n", "train_dataset", "=", "DeconvDataset", "(", "train_data", ",", "train_covar", ")", "\n", "train_loader", "=", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "\n", "test_data_clean", "=", "torch", ".", "from_numpy", "(", "\n", "data_gen", "(", "args", ".", "data", ",", "args", ".", "n_test_points", ")", "[", "0", "]", ".", "astype", "(", "np", ".", "float64", ")", ")", "\n", "\n", "eval_covar", "=", "covar_gen", "(", "args", ".", "covar", ",", "args", ".", "n_eval_points", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "eval_data_clean", "=", "data_gen", "(", "args", ".", "data", ",", "args", ".", "n_eval_points", ")", "[", "\n", "0", "]", ".", "astype", "(", "np", ".", "float64", ")", "\n", "\n", "eval_data", "=", "np", ".", "zeros_like", "(", "eval_data_clean", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "n_eval_points", ")", ":", "\n", "        ", "eval_data", "[", "i", "]", "=", "eval_data_clean", "[", "i", "]", "+", "np", ".", "random", ".", "multivariate_normal", "(", "\n", "mean", "=", "np", ".", "zeros", "(", "(", "2", ",", ")", ")", ",", "cov", "=", "eval_covar", "[", "i", "]", ")", "\n", "\n", "", "eval_covar", "=", "torch", ".", "from_numpy", "(", "eval_covar", ")", "\n", "eval_data", "=", "torch", ".", "from_numpy", "(", "eval_data", ".", "astype", "(", "np", ".", "float64", ")", ")", "\n", "\n", "eval_dataset", "=", "DeconvDataset", "(", "eval_data", ",", "eval_covar", ")", "\n", "eval_loader", "=", "DataLoader", "(", "\n", "eval_dataset", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "False", ")", "\n", "\n", "if", "args", ".", "infer", "==", "'true_data'", ":", "\n", "        ", "model", "=", "SVIFlowToy", "(", "dimensions", "=", "2", ",", "\n", "objective", "=", "args", ".", "objective", ",", "\n", "posterior_context_size", "=", "args", ".", "posterior_context_size", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "device", "=", "device", ",", "\n", "maf_steps_prior", "=", "args", ".", "flow_steps_prior", ",", "\n", "maf_steps_posterior", "=", "args", ".", "flow_steps_posterior", ",", "\n", "maf_features", "=", "args", ".", "maf_features", ",", "\n", "maf_hidden_blocks", "=", "args", ".", "maf_hidden_blocks", ",", "\n", "K", "=", "args", ".", "K", ")", "\n", "\n", "", "else", ":", "\n", "        ", "model", "=", "SVIFlowToyNoise", "(", "dimensions", "=", "2", ",", "\n", "objective", "=", "args", ".", "objective", ",", "\n", "flow_steps_prior", "=", "args", ".", "flow_steps_prior", ",", "\n", "flow_steps_posterior", "=", "args", ".", "flow_steps_posterior", ",", "\n", "n_posterior_flows", "=", "args", ".", "n_posterior_flows", ",", "\n", "posterior_mdn", "=", "list", "(", "\n", "map", "(", "int", ",", "args", ".", "posterior_mdn", ".", "split", "(", "','", ")", ")", ")", ",", "\n", "warmup_posterior_flow_diversity", "=", "args", ".", "warmup_posterior_flow_diversity", ",", "\n", "warmup_kl", "=", "args", ".", "warmup_kl", ",", "\n", "kl_init", "=", "args", ".", "kl_init", ",", "\n", "posterior_context_size", "=", "args", ".", "posterior_context_size", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "device", "=", "device", ",", "\n", "maf_features", "=", "args", ".", "maf_features", ",", "\n", "maf_hidden_blocks", "=", "args", ".", "maf_hidden_blocks", ",", "\n", "iwae_points", "=", "args", ".", "iwae_points", ")", "\n", "\n", "", "message", "=", "'Total number of parameters: %s'", "%", "(", "\n", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "message", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params", "=", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "\n", "# training", "\n", "scheduler", "=", "list", "(", "map", "(", "int", ",", "args", ".", "eval_based_scheduler", ".", "split", "(", "','", ")", ")", ")", "\n", "epoch", "=", "0", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "best_eval_loss", "=", "compute_eval_loss", "(", "\n", "model", ",", "eval_loader", ",", "device", ",", "args", ".", "n_eval_points", ")", "\n", "\n", "best_model", "=", "copy", ".", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "\n", "", "n_epochs_not_improved", "=", "0", "\n", "\n", "model", ".", "train", "(", ")", "\n", "while", "n_epochs_not_improved", "<", "scheduler", "[", "-", "1", "]", "and", "epoch", "<", "args", ".", "n_epochs", ":", "\n", "        ", "for", "batch_idx", ",", "data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "data", "[", "0", "]", "=", "data", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "data", "[", "1", "]", "=", "data", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "\n", "loss", "=", "-", "model", ".", "score", "(", "data", ")", ".", "mean", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "eval_loss", "=", "compute_eval_loss", "(", "\n", "model", ",", "eval_loader", ",", "device", ",", "args", ".", "n_eval_points", ")", "\n", "\n", "if", "eval_loss", "<", "best_eval_loss", ":", "\n", "                ", "best_model", "=", "copy", ".", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "best_eval_loss", "=", "eval_loss", "\n", "n_epochs_not_improved", "=", "0", "\n", "\n", "", "else", ":", "\n", "                ", "n_epochs_not_improved", "+=", "1", "\n", "\n", "", "lr_scheduler", "(", "n_epochs_not_improved", ",", "optimizer", ",", "scheduler", ",", "logger", ")", "\n", "\n", "if", "(", "epoch", "+", "1", ")", "%", "args", ".", "test_freq", "==", "0", ":", "\n", "                ", "if", "args", ".", "infer", "==", "'true_data'", ":", "\n", "                    ", "test_loss_clean", "=", "-", "model", ".", "model", ".", "_prior", ".", "log_prob", "(", "\n", "test_data_clean", ".", "to", "(", "device", ")", ")", ".", "mean", "(", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "test_loss_clean", "=", "-", "model", ".", "model", ".", "_likelihood", ".", "log_prob", "(", "\n", "test_data_clean", ".", "to", "(", "device", ")", ")", ".", "mean", "(", ")", "\n", "\n", "", "message", "=", "'Epoch %s:'", "%", "(", "\n", "epoch", "+", "1", ")", ",", "'train loss = %.5f'", "%", "loss", ",", "'eval loss = %.5f'", "%", "eval_loss", ",", "'test loss (clean) = %.5f'", "%", "test_loss_clean", "\n", "logger", ".", "info", "(", "message", ")", "\n", "\n", "", "else", ":", "\n", "                ", "message", "=", "'Epoch %s:'", "%", "(", "\n", "epoch", "+", "1", ")", ",", "'train loss = %.5f'", "%", "loss", ",", "'eval loss = %.5f'", "%", "eval_loss", "\n", "logger", ".", "info", "(", "message", ")", "\n", "\n", "", "if", "(", "epoch", "+", "1", ")", "%", "args", ".", "viz_freq", "==", "0", ":", "\n", "                ", "if", "args", ".", "infer", "==", "'true_data'", ":", "\n", "                    ", "samples", "=", "model", ".", "model", ".", "_prior", ".", "sample", "(", "\n", "1000", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "samples", "=", "model", ".", "model", ".", "_likelihood", ".", "sample", "(", "\n", "1000", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "corner", ".", "hist2d", "(", "samples", "[", ":", ",", "0", "]", ",", "samples", "[", ":", ",", "1", "]", ")", "\n", "fig_filename", "=", "args", ".", "dir", "+", "'out/'", "+", "name", "+", "'_corner_fig_'", "+", "str", "(", "epoch", "+", "1", ")", "+", "'.png'", "\n", "plt", ".", "savefig", "(", "fig_filename", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "plt", ".", "scatter", "(", "samples", "[", ":", ",", "0", "]", ",", "samples", "[", ":", ",", "1", "]", ")", "\n", "fig_filename", "=", "args", ".", "dir", "+", "'out/'", "+", "name", "+", "'_scatter_fig_'", "+", "str", "(", "epoch", "+", "1", ")", "+", "'.png'", "\n", "plt", ".", "savefig", "(", "fig_filename", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "", "", "model", ".", "train", "(", ")", "\n", "epoch", "+=", "1", "\n", "\n", "", "model", ".", "load_state_dict", "(", "best_model", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "if", "args", ".", "infer", "==", "'true_data'", ":", "\n", "        ", "test_loss_clean", "=", "-", "model", ".", "model", ".", "_prior", ".", "log_prob", "(", "test_data_clean", ".", "to", "(", "device", ")", ")", ".", "mean", "(", ")", "\n", "\n", "", "else", ":", "\n", "        ", "test_loss_clean", "=", "-", "model", ".", "model", ".", "_likelihood", ".", "log_prob", "(", "test_data_clean", ".", "to", "(", "device", ")", ")", ".", "mean", "(", ")", "\n", "\n", "", "message", "=", "'Final test loss (clean) = %.5f'", "%", "test_loss_clean", "\n", "logger", ".", "info", "(", "message", ")", "\n", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "args", ".", "dir", "+", "'models/'", "+", "name", "+", "'.model'", ")", "\n", "logger", ".", "info", "(", "'Training has finished.'", ")", "\n", "\n", "if", "args", ".", "data", ".", "split", "(", "'_'", ")", "[", "0", "]", "==", "'mixture'", "or", "args", ".", "data", ".", "split", "(", "'_'", ")", "[", "0", "]", "==", "'gaussian'", ":", "\n", "        ", "kl_points", "=", "data_gen", "(", "args", ".", "data", ",", "args", ".", "n_kl_points", ")", "[", "0", "]", ".", "astype", "(", "np", ".", "float64", ")", "\n", "\n", "model_log_prob", "=", "model", ".", "model", ".", "_prior", ".", "log_prob", "(", "\n", "torch", ".", "from_numpy", "(", "kl_points", ".", "astype", "(", "np", ".", "float64", ")", ")", ".", "to", "(", "device", ")", ")", ".", "mean", "(", ")", "\n", "data_log_prob", "=", "compute_data_ll", "(", "args", ".", "data", ",", "kl_points", ")", ".", "mean", "(", ")", "\n", "\n", "approximate_KL", "=", "data_log_prob", "-", "model_log_prob", "\n", "message", "=", "'KL div %.5f:'", "%", "approximate_KL", "\n", "logger", ".", "info", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flows.train_final_alt.compute_eval_loss": [[78, 87], ["enumerate", "data[].to", "data[].to", "model.score().sum", "model.score"], "function", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score"], ["def", "compute_eval_loss", "(", "model", ",", "eval_loader", ",", "device", ",", "n_points", ")", ":", "\n", "    ", "loss", "=", "0", "\n", "for", "_", ",", "data", "in", "enumerate", "(", "eval_loader", ")", ":", "\n", "        ", "data", "[", "0", "]", "=", "data", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "data", "[", "1", "]", "=", "data", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "\n", "loss", "+=", "-", "model", ".", "score", "(", "data", ")", ".", "sum", "(", ")", "\n", "\n", "", "return", "loss", "/", "n_points", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flows.train_final_alt.main": [[89, 191], ["int", "sklearn.utils.shuffle", "sklearn.model_selection.KFold", "numpy.diag", "enumerate", "numpy.load", "numpy.random.multivariate_normal", "sklearn.model_selection.KFold.split", "numpy.repeat", "numpy.repeat", "deconv.gmm.data.DeconvDataset", "torch.utils.data.DataLoader", "deconv.gmm.data.DeconvDataset", "torch.utils.data.DataLoader", "deconv.flow.svi_no_mdn.SVIFlowToy", "logger.info", "torch.optim.Adam", "copy.deepcopy", "train_final_alt.compute_eval_loss", "model.load_state_dict.train", "model.load_state_dict.load_state_dict", "logger.info", "numpy.load", "numpy.ones", "sum", "model.load_state_dict.state_dict", "len", "enumerate", "model.load_state_dict.eval", "logger.info", "train_final_alt.compute_eval_loss", "model.load_state_dict.train", "model.load_state_dict.model._prior.log_prob().mean", "numpy.load", "numpy.zeros", "model.load_state_dict.parameters", "data[].to", "data[].to", "torch.optim.Adam.zero_grad", "loss.backward", "torch.optim.Adam.step", "model.load_state_dict.model._prior.log_prob().mean", "len", "copy.deepcopy", "p.numel", "model.load_state_dict.score().mean", "model.load_state_dict.state_dict", "model.load_state_dict.model._prior.log_prob", "model.load_state_dict.parameters", "model.load_state_dict.model._prior.log_prob", "torch.from_numpy().to", "model.load_state_dict.score", "torch.from_numpy().to", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flows.train_toy.compute_eval_loss", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flows.train_toy.compute_eval_loss", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score"], ["", "def", "main", "(", ")", ":", "\n", "    ", "if", "args", ".", "data", "==", "'boston'", ":", "\n", "        ", "data", "=", "np", ".", "load", "(", "'data_small/boston_no_discrete.npy'", ")", "\n", "", "elif", "args", ".", "data", "==", "'white_wine'", ":", "\n", "        ", "data", "=", "np", ".", "load", "(", "'data_small/white_no_discrete_no_corr_0.98.npy'", ")", "\n", "", "elif", "args", ".", "data", "==", "'red_wine'", ":", "\n", "        ", "data", "=", "np", ".", "load", "(", "'data_small/red_no_discrete_no_corr_0.98.npy'", ")", "\n", "", "n_features", "=", "data", ".", "shape", "[", "1", "]", "\n", "n_train", "=", "int", "(", "data", ".", "shape", "[", "0", "]", "*", "0.9", ")", "\n", "train_data_clean", "=", "util_shuffle", "(", "data", "[", ":", "n_train", "]", ")", "\n", "test_data", "=", "data", "[", ":", "n_train", "]", "\n", "kf", "=", "KFold", "(", "n_splits", "=", "10", ")", "\n", "\n", "covar", "=", "np", ".", "diag", "(", "args", ".", "covar", "*", "np", ".", "ones", "(", "(", "n_features", ",", ")", ")", ")", "\n", "\n", "train_data", "=", "train_data_clean", "+", "np", ".", "random", ".", "multivariate_normal", "(", "mean", "=", "np", ".", "zeros", "(", "\n", "(", "n_features", ",", ")", ")", ",", "cov", "=", "covar", ",", "size", "=", "n_train", ")", "\n", "\n", "# train_covars = np.repeat(", "\n", "#     covar[np.newaxis, :, :], n_train, axis=0)", "\n", "\n", "# train_dataset = DeconvDataset(train_data, train_covars)", "\n", "for", "i", ",", "(", "train_index", ",", "eval_index", ")", "in", "enumerate", "(", "kf", ".", "split", "(", "train_data", ")", ")", ":", "\n", "        ", "X_train", ",", "X_eval", "=", "train_data", "[", "train_index", "]", ",", "train_data", "[", "eval_index", "]", "\n", "train_covars", "=", "np", ".", "repeat", "(", "\n", "covar", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ",", "X_train", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "eval_covars", "=", "np", ".", "repeat", "(", "\n", "covar", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ",", "X_eval", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "\n", "train_dataset", "=", "DeconvDataset", "(", "X_train", ",", "train_covars", ")", "\n", "train_loader", "=", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "\n", "eval_dataset", "=", "DeconvDataset", "(", "X_eval", ",", "eval_covars", ")", "\n", "eval_loader", "=", "DataLoader", "(", "\n", "eval_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ")", "\n", "\n", "model", "=", "SVIFlowToy", "(", "dimensions", "=", "n_features", ",", "\n", "objective", "=", "args", ".", "objective", ",", "\n", "posterior_context_size", "=", "n_features", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "device", "=", "device", ",", "\n", "maf_steps_prior", "=", "args", ".", "flow_steps_prior", ",", "\n", "maf_steps_posterior", "=", "args", ".", "flow_steps_posterior", ",", "\n", "maf_features", "=", "args", ".", "maf_features", ",", "\n", "maf_hidden_blocks", "=", "args", ".", "maf_hidden_blocks", ",", "\n", "K", "=", "args", ".", "K", ")", "\n", "\n", "message", "=", "'Total number of parameters: %s'", "%", "(", "\n", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "message", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params", "=", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "\n", "# training", "\n", "scheduler", "=", "[", "30", "]", "\n", "epoch", "=", "0", "\n", "best_model", "=", "copy", ".", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "\n", "best_eval_loss", "=", "compute_eval_loss", "(", "\n", "model", ",", "eval_loader", ",", "device", ",", "len", "(", "eval_index", ")", ")", "\n", "n_epochs_not_improved", "=", "0", "\n", "\n", "model", ".", "train", "(", ")", "\n", "while", "n_epochs_not_improved", "<", "scheduler", "[", "-", "1", "]", "and", "epoch", "<", "args", ".", "n_epochs", ":", "\n", "            ", "for", "batch_idx", ",", "data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "                ", "data", "[", "0", "]", "=", "data", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "data", "[", "1", "]", "=", "data", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "\n", "loss", "=", "-", "model", ".", "score", "(", "data", ")", ".", "mean", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "test_loss_clean", "=", "-", "model", ".", "model", ".", "_prior", ".", "log_prob", "(", "\n", "torch", ".", "from_numpy", "(", "test_data", ")", ".", "to", "(", "device", ")", ")", ".", "mean", "(", ")", "\n", "message", "=", "'Test loss (clean) = %.5f'", "%", "test_loss_clean", "\n", "logger", ".", "info", "(", "message", ")", "\n", "eval_loss", "=", "compute_eval_loss", "(", "\n", "model", ",", "eval_loader", ",", "device", ",", "len", "(", "eval_index", ")", ")", "\n", "\n", "if", "eval_loss", "<", "best_eval_loss", ":", "\n", "                ", "best_model", "=", "copy", ".", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "best_eval_loss", "=", "eval_loss", "\n", "n_epochs_not_improved", "=", "0", "\n", "\n", "", "else", ":", "\n", "                ", "n_epochs_not_improved", "+=", "1", "\n", "\n", "", "model", ".", "train", "(", ")", "\n", "epoch", "+=", "1", "\n", "", "break", "\n", "\n", "model", "=", "model", ".", "load_state_dict", "(", "best_model", ")", "\n", "test_loss_clean", "=", "-", "model", ".", "model", ".", "_prior", ".", "log_prob", "(", "\n", "torch", ".", "from_numpy", "(", "test_data", ")", ".", "to", "(", "device", ")", ")", ".", "mean", "(", ")", "\n", "message", "=", "'Final test loss (clean) = %.5f'", "%", "test_loss_clean", "\n", "logger", ".", "info", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flows.fit_gaia_svi.fit_gaia_lim_sgd": [[13, 44], ["numpy.load", "deconv.gmm.data.DeconvDataset", "deconv.gmm.data.DeconvDataset", "deconv.flow.svi.SVIFlow", "deconv.flow.svi.SVIFlow.fit", "deconv.flow.svi.SVIFlow.score_batch", "print", "torch.device", "torch.device", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "len"], "function", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.fit", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score_batch"], ["def", "fit_gaia_lim_sgd", "(", "datafile", ",", "use_cuda", "=", "False", ")", ":", "\n", "    ", "data", "=", "np", ".", "load", "(", "datafile", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "train_data", "=", "DeconvDataset", "(", "\n", "torch", ".", "Tensor", "(", "data", "[", "'X_train'", "]", ")", ",", "\n", "torch", ".", "Tensor", "(", "data", "[", "'L_train'", "]", ")", "\n", ")", "\n", "\n", "val_data", "=", "DeconvDataset", "(", "\n", "torch", ".", "Tensor", "(", "data", "[", "'X_val'", "]", ")", ",", "\n", "torch", ".", "Tensor", "(", "data", "[", "'L_val'", "]", ")", "\n", ")", "\n", "\n", "svi", "=", "SVIFlow", "(", "\n", "7", ",", "\n", "5", ",", "\n", "device", "=", "device", ",", "\n", "batch_size", "=", "512", ",", "\n", "epochs", "=", "40", ",", "\n", "lr", "=", "1e-4", "\n", ")", "\n", "svi", ".", "fit", "(", "train_data", ",", "val_data", "=", "val_data", ")", "\n", "\n", "val_log_prob", "=", "svi", ".", "score_batch", "(", "val_data", ",", "log_prob", "=", "True", ")", "\n", "\n", "print", "(", "'Val log prob: {}'", ".", "format", "(", "val_log_prob", "/", "len", "(", "val_data", ")", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flows.train_dirty.compute_eval_loss": [[78, 87], ["enumerate", "data[].to", "data[].to", "model.score().sum", "model.score"], "function", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score"], ["def", "compute_eval_loss", "(", "model", ",", "eval_loader", ",", "device", ",", "n_points", ")", ":", "\n", "    ", "loss", "=", "0", "\n", "for", "_", ",", "data", "in", "enumerate", "(", "eval_loader", ")", ":", "\n", "        ", "data", "[", "0", "]", "=", "data", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "data", "[", "1", "]", "=", "data", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "\n", "loss", "+=", "-", "model", ".", "score", "(", "data", ")", ".", "sum", "(", ")", "\n", "\n", "", "return", "loss", "/", "n_points", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flows.train_dirty.main": [[89, 192], ["int", "sklearn.utils.shuffle", "sklearn.model_selection.KFold", "numpy.diag", "enumerate", "numpy.load", "numpy.random.multivariate_normal", "sklearn.model_selection.KFold.split", "numpy.repeat", "numpy.repeat", "deconv.gmm.data.DeconvDataset", "torch.utils.data.DataLoader", "deconv.gmm.data.DeconvDataset", "torch.utils.data.DataLoader", "deconv.flow.svi_no_mdn.SVIFlowToy", "logger.info", "torch.optim.Adam", "copy.deepcopy", "train_dirty.compute_eval_loss", "model.load_state_dict.train", "model.load_state_dict.load_state_dict", "logger.info", "numpy.load", "numpy.ones", "sum", "model.load_state_dict.state_dict", "len", "enumerate", "model.load_state_dict.eval", "logger.info", "train_dirty.compute_eval_loss", "model.load_state_dict.train", "model.load_state_dict.model._prior.log_prob().mean", "numpy.load", "numpy.zeros", "model.load_state_dict.parameters", "data[].to", "data[].to", "torch.optim.Adam.zero_grad", "loss.backward", "torch.optim.Adam.step", "model.load_state_dict.model._prior.log_prob().mean", "len", "copy.deepcopy", "p.numel", "model.load_state_dict.model._prior.log_prob().mean", "model.load_state_dict.state_dict", "model.load_state_dict.model._prior.log_prob", "model.load_state_dict.parameters", "model.load_state_dict.model._prior.log_prob", "torch.from_numpy().to", "model.load_state_dict.model._prior.log_prob", "torch.from_numpy().to", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flows.train_toy.compute_eval_loss", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flows.train_toy.compute_eval_loss", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob"], ["", "def", "main", "(", ")", ":", "\n", "    ", "if", "args", ".", "data", "==", "'boston'", ":", "\n", "        ", "data", "=", "np", ".", "load", "(", "'data_small/boston_no_discrete.npy'", ")", "\n", "", "elif", "args", ".", "data", "==", "'white_wine'", ":", "\n", "        ", "data", "=", "np", ".", "load", "(", "'data_small/white_no_discrete_no_corr_0.98.npy'", ")", "\n", "", "elif", "args", ".", "data", "==", "'red_wine'", ":", "\n", "        ", "data", "=", "np", ".", "load", "(", "'data_small/red_no_discrete_no_corr_0.98.npy'", ")", "\n", "", "n_features", "=", "data", ".", "shape", "[", "1", "]", "\n", "n_train", "=", "int", "(", "data", ".", "shape", "[", "0", "]", "*", "0.9", ")", "\n", "train_data_clean", "=", "util_shuffle", "(", "data", "[", ":", "n_train", "]", ")", "\n", "test_data", "=", "data", "[", ":", "n_train", "]", "\n", "kf", "=", "KFold", "(", "n_splits", "=", "10", ")", "\n", "\n", "covar", "=", "np", ".", "diag", "(", "args", ".", "covar", "*", "np", ".", "ones", "(", "(", "n_features", ",", ")", ")", ")", "\n", "\n", "train_data", "=", "train_data_clean", "+", "np", ".", "random", ".", "multivariate_normal", "(", "mean", "=", "np", ".", "zeros", "(", "\n", "(", "n_features", ",", ")", ")", ",", "cov", "=", "covar", ",", "size", "=", "n_train", ")", "\n", "\n", "# train_covars = np.repeat(", "\n", "#     covar[np.newaxis, :, :], n_train, axis=0)", "\n", "\n", "# train_dataset = DeconvDataset(train_data, train_covars)", "\n", "for", "i", ",", "(", "train_index", ",", "eval_index", ")", "in", "enumerate", "(", "kf", ".", "split", "(", "train_data", ")", ")", ":", "\n", "        ", "X_train", ",", "X_eval", "=", "train_data", "[", "train_index", "]", ",", "train_data", "[", "eval_index", "]", "\n", "train_covars", "=", "np", ".", "repeat", "(", "\n", "covar", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ",", "X_train", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "eval_covars", "=", "np", ".", "repeat", "(", "\n", "covar", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ",", "X_eval", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "\n", "train_dataset", "=", "DeconvDataset", "(", "X_train", ",", "train_covars", ")", "\n", "train_loader", "=", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "\n", "eval_dataset", "=", "DeconvDataset", "(", "X_eval", ",", "eval_covars", ")", "\n", "eval_loader", "=", "DataLoader", "(", "\n", "eval_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ")", "\n", "\n", "model", "=", "SVIFlowToy", "(", "dimensions", "=", "n_features", ",", "\n", "objective", "=", "args", ".", "objective", ",", "\n", "posterior_context_size", "=", "n_features", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "device", "=", "device", ",", "\n", "maf_steps_prior", "=", "args", ".", "flow_steps_prior", ",", "\n", "maf_steps_posterior", "=", "args", ".", "flow_steps_posterior", ",", "\n", "maf_features", "=", "args", ".", "maf_features", ",", "\n", "maf_hidden_blocks", "=", "args", ".", "maf_hidden_blocks", ",", "\n", "K", "=", "args", ".", "K", ")", "\n", "\n", "message", "=", "'Total number of parameters: %s'", "%", "(", "\n", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "message", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params", "=", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "\n", "# training", "\n", "scheduler", "=", "[", "30", "]", "\n", "epoch", "=", "0", "\n", "best_model", "=", "copy", ".", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "\n", "best_eval_loss", "=", "compute_eval_loss", "(", "\n", "model", ",", "eval_loader", ",", "device", ",", "len", "(", "eval_index", ")", ")", "\n", "n_epochs_not_improved", "=", "0", "\n", "\n", "model", ".", "train", "(", ")", "\n", "while", "n_epochs_not_improved", "<", "scheduler", "[", "-", "1", "]", "and", "epoch", "<", "args", ".", "n_epochs", ":", "\n", "            ", "for", "batch_idx", ",", "data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "                ", "data", "[", "0", "]", "=", "data", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "data", "[", "1", "]", "=", "data", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "\n", "# loss = -model.score(data).mean()", "\n", "loss", "=", "-", "model", ".", "model", ".", "_prior", ".", "log_prob", "(", "data", "[", "0", "]", ")", ".", "mean", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "test_loss_clean", "=", "-", "model", ".", "model", ".", "_prior", ".", "log_prob", "(", "\n", "torch", ".", "from_numpy", "(", "test_data", ")", ".", "to", "(", "device", ")", ")", ".", "mean", "(", ")", "\n", "message", "=", "'Test loss (clean) = %.5f'", "%", "test_loss_clean", "\n", "logger", ".", "info", "(", "message", ")", "\n", "eval_loss", "=", "compute_eval_loss", "(", "\n", "model", ",", "eval_loader", ",", "device", ",", "len", "(", "eval_index", ")", ")", "\n", "\n", "if", "eval_loss", "<", "best_eval_loss", ":", "\n", "                ", "best_model", "=", "copy", ".", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "best_eval_loss", "=", "eval_loss", "\n", "n_epochs_not_improved", "=", "0", "\n", "\n", "", "else", ":", "\n", "                ", "n_epochs_not_improved", "+=", "1", "\n", "\n", "", "model", ".", "train", "(", ")", "\n", "epoch", "+=", "1", "\n", "", "break", "\n", "\n", "model", "=", "model", ".", "load_state_dict", "(", "best_model", ")", "\n", "test_loss_clean", "=", "-", "model", ".", "model", ".", "_prior", ".", "log_prob", "(", "\n", "torch", ".", "from_numpy", "(", "test_data", ")", ".", "to", "(", "device", ")", ")", ".", "mean", "(", ")", "\n", "message", "=", "'Final test loss (clean) = %.5f'", "%", "test_loss_clean", "\n", "logger", ".", "info", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flows.train_hypertuning_M.compute_eval_loss": [[65, 74], ["enumerate", "data[].to", "data[].to", "model.score().sum", "model.score"], "function", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score"], ["def", "compute_eval_loss", "(", "model", ",", "eval_loader", ",", "device", ",", "n_points", ")", ":", "\n", "    ", "loss", "=", "0", "\n", "for", "_", ",", "data", "in", "enumerate", "(", "eval_loader", ")", ":", "\n", "        ", "data", "[", "0", "]", "=", "data", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "data", "[", "1", "]", "=", "data", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "\n", "loss", "+=", "-", "model", ".", "score", "(", "data", ")", ".", "sum", "(", ")", "\n", "\n", "", "return", "loss", "/", "n_points", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flows.train_hypertuning_M.main": [[76, 236], ["int", "numpy.diag", "sklearn.model_selection.KFold", "itertools.product", "numpy.zeros", "itertools.product", "numpy.save", "numpy.load", "numpy.random.multivariate_normal", "print", "logger.info", "enumerate", "numpy.load", "numpy.ones", "sklearn.model_selection.KFold.split", "numpy.repeat", "numpy.repeat", "deconv.gmm.data.DeconvDataset", "torch.utils.data.DataLoader", "deconv.gmm.data.DeconvDataset", "torch.utils.data.DataLoader", "deconv.flow.svi_no_mdn.SVIFlowToy", "logger.info", "torch.optim.Adam", "deconv.flow.svi_no_mdn.SVIFlowToy.eval", "deconv.flow.svi_no_mdn.SVIFlowToy.train", "deconv.flow.svi_no_mdn.SVIFlowToy.model._prior.parameters", "numpy.save", "numpy.load", "numpy.zeros", "sum", "torch.no_grad", "train_hypertuning_M.compute_eval_loss", "copy.deepcopy", "enumerate", "deconv.flow.svi_no_mdn.SVIFlowToy.eval", "deconv.flow.svi_no_mdn.SVIFlowToy.train", "numpy.load", "deconv.flow.svi_no_mdn.SVIFlowToy.parameters", "deconv.flow.svi_no_mdn.SVIFlowToy.state_dict", "data[].to", "data[].to", "copy.deepcopy", "range", "deconv.flow.svi_no_mdn.SVIFlowToy.model._prior.parameters", "deconv.flow.svi_no_mdn.SVIFlowToy.model._approximate_posterior.parameters", "logger.info", "torch.optim.Adam.zero_grad", "loss.backward", "torch.optim.Adam.step", "deconv.flow.svi_no_mdn.SVIFlowToy.model._approximate_posterior.load_state_dict", "deconv.flow.svi_no_mdn.SVIFlowToy.model._prior.parameters", "deconv.flow.svi_no_mdn.SVIFlowToy.model._approximate_posterior.parameters", "logger.info", "torch.optim.Adam.zero_grad", "loss.backward", "torch.optim.Adam.step", "torch.no_grad", "train_hypertuning_M.compute_eval_loss", "logger.info", "p.numel", "deconv.flow.svi_no_mdn.SVIFlowToy.model._approximate_posterior.state_dict", "logger.info", "torch.optim.Adam.zero_grad", "loss.backward", "torch.optim.Adam.step", "deconv.flow.svi_no_mdn.SVIFlowToy.score().mean", "deconv.flow.svi_no_mdn.SVIFlowToy.score().mean", "copy.deepcopy", "deconv.flow.svi_no_mdn.SVIFlowToy.parameters", "deconv.flow.svi_no_mdn.SVIFlowToy.score().mean", "deconv.flow.svi_no_mdn.SVIFlowToy.state_dict", "deconv.flow.svi_no_mdn.SVIFlowToy.score", "deconv.flow.svi_no_mdn.SVIFlowToy.score", "deconv.flow.svi_no_mdn.SVIFlowToy.score"], "function", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flows.train_toy.compute_eval_loss", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flows.train_toy.compute_eval_loss", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score"], ["", "def", "main", "(", ")", ":", "\n", "    ", "if", "args", ".", "data", "==", "'boston'", ":", "\n", "        ", "data", "=", "np", ".", "load", "(", "'data_small/boston_no_discrete.npy'", ")", "\n", "", "elif", "args", ".", "data", "==", "'white_wine'", ":", "\n", "        ", "data", "=", "np", ".", "load", "(", "'data_small/white_no_discrete_no_corr_0.98.npy'", ")", "\n", "", "elif", "args", ".", "data", "==", "'red_wine'", ":", "\n", "        ", "data", "=", "np", ".", "load", "(", "'data_small/red_no_discrete_no_corr_0.98.npy'", ")", "\n", "", "elif", "args", ".", "data", "==", "'ionosphere'", ":", "\n", "        ", "data", "=", "np", ".", "load", "(", "'data_small/ionosphere_no_discrete_no_corr_0.98.npy'", ")", "\n", "\n", "", "n_features", "=", "data", ".", "shape", "[", "1", "]", "\n", "n_train", "=", "int", "(", "data", ".", "shape", "[", "0", "]", "*", "0.9", ")", "\n", "train_data_clean", "=", "data", "[", ":", "n_train", "]", "\n", "\n", "covar", "=", "np", ".", "diag", "(", "args", ".", "covar", "*", "np", ".", "ones", "(", "(", "n_features", ",", ")", ")", ")", "\n", "\n", "train_data", "=", "train_data_clean", "+", "np", ".", "random", ".", "multivariate_normal", "(", "mean", "=", "np", ".", "zeros", "(", "\n", "(", "n_features", ",", ")", ")", ",", "cov", "=", "covar", ",", "size", "=", "n_train", ")", "\n", "\n", "kf", "=", "KFold", "(", "n_splits", "=", "5", ")", "\n", "\n", "lr_list", "=", "[", "1e-3", ",", "5e-4", ",", "1e-4", "]", "\n", "flow_steps_prior_list", "=", "[", "3", ",", "4", ",", "5", "]", "\n", "flow_steps_posterior_list", "=", "[", "4", ",", "5", "]", "\n", "maf_features_list", "=", "[", "128", "]", "\n", "maf_hidden_blocks_list", "=", "[", "1", ",", "2", "]", "\n", "M_list", "=", "[", "5", ",", "10", ",", "20", "]", "\n", "\n", "n_combs", "=", "0", "\n", "for", "lr", ",", "fspr", ",", "fspo", ",", "maf_f", ",", "maf_h", ",", "M", "in", "product", "(", "lr_list", ",", "flow_steps_prior_list", ",", "flow_steps_posterior_list", ",", "maf_features_list", ",", "maf_hidden_blocks_list", ",", "M_list", ")", ":", "\n", "        ", "print", "(", "n_combs", ",", "(", "lr", ",", "fspr", ",", "fspo", ",", "maf_f", ",", "maf_h", ",", "M", ")", ")", "\n", "n_combs", "+=", "1", "\n", "\n", "", "best_eval", "=", "np", ".", "zeros", "(", "(", "n_combs", ",", "5", ")", ")", "\n", "\n", "counter", "=", "0", "\n", "for", "lr", ",", "fspr", ",", "fspo", ",", "maf_f", ",", "maf_h", ",", "M", "in", "product", "(", "lr_list", ",", "flow_steps_prior_list", ",", "flow_steps_posterior_list", ",", "maf_features_list", ",", "maf_hidden_blocks_list", ",", "M_list", ")", ":", "\n", "        ", "logger", ".", "info", "(", "(", "lr", ",", "fspr", ",", "fspo", ",", "maf_f", ",", "maf_h", ",", "M", ")", ")", "\n", "\n", "for", "i", ",", "(", "train_index", ",", "eval_index", ")", "in", "enumerate", "(", "kf", ".", "split", "(", "train_data", ")", ")", ":", "\n", "            ", "X_train", ",", "X_eval", "=", "train_data", "[", "train_index", "]", ",", "train_data", "[", "eval_index", "]", "\n", "train_covars", "=", "np", ".", "repeat", "(", "\n", "covar", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ",", "X_train", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "eval_covars", "=", "np", ".", "repeat", "(", "\n", "covar", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ",", "X_eval", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "\n", "train_dataset", "=", "DeconvDataset", "(", "X_train", ",", "train_covars", ")", "\n", "train_loader", "=", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "\n", "eval_dataset", "=", "DeconvDataset", "(", "X_eval", ",", "eval_covars", ")", "\n", "eval_loader", "=", "DataLoader", "(", "\n", "eval_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ")", "\n", "\n", "model", "=", "SVIFlowToy", "(", "dimensions", "=", "n_features", ",", "\n", "objective", "=", "args", ".", "objective", ",", "\n", "posterior_context_size", "=", "n_features", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "device", "=", "device", ",", "\n", "maf_steps_prior", "=", "fspr", ",", "\n", "maf_steps_posterior", "=", "fspo", ",", "\n", "maf_features", "=", "maf_f", ",", "\n", "maf_hidden_blocks", "=", "maf_h", ",", "\n", "K", "=", "args", ".", "K", ")", "\n", "\n", "message", "=", "'Total number of parameters: %s'", "%", "(", "\n", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "message", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params", "=", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "\n", "# training", "\n", "scheduler", "=", "[", "30", "]", "# stop after 30 epochs of no improvement", "\n", "epoch", "=", "0", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "best_eval_loss", "=", "compute_eval_loss", "(", "\n", "model", ",", "eval_loader", ",", "device", ",", "X_eval", ".", "shape", "[", "0", "]", ")", "\n", "\n", "best_model", "=", "copy", ".", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "\n", "", "n_epochs_not_improved", "=", "0", "\n", "\n", "model", ".", "train", "(", ")", "\n", "for", "prior_params", "in", "model", ".", "model", ".", "_prior", ".", "parameters", "(", ")", ":", "\n", "                ", "prior_params", ".", "requires_grad", "=", "False", "\n", "\n", "", "while", "n_epochs_not_improved", "<", "scheduler", "[", "-", "1", "]", "and", "epoch", "<", "args", ".", "n_epochs", ":", "\n", "                ", "for", "batch_idx", ",", "data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "                    ", "data", "[", "0", "]", "=", "data", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "data", "[", "1", "]", "=", "data", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "\n", "ap", "=", "copy", ".", "deepcopy", "(", "\n", "model", ".", "model", ".", "_approximate_posterior", ".", "state_dict", "(", ")", ")", "\n", "for", "_", "in", "range", "(", "M", ")", ":", "\n", "\n", "                        ", "loss", "=", "-", "model", ".", "score", "(", "data", ")", ".", "mean", "(", ")", "\n", "message", "=", "'Loss intermediate %s: %f'", "%", "(", "i", ",", "loss", ")", "\n", "logger", ".", "info", "(", "message", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "for", "prior_params", "in", "model", ".", "model", ".", "_prior", ".", "parameters", "(", ")", ":", "\n", "                        ", "prior_params", ".", "requires_grad", "=", "True", "\n", "\n", "", "for", "post_params", "in", "model", ".", "model", ".", "_approximate_posterior", ".", "parameters", "(", ")", ":", "\n", "                        ", "post_params", ".", "requires_grad", "=", "False", "\n", "\n", "", "loss", "=", "-", "model", ".", "score", "(", "data", ")", ".", "mean", "(", ")", "\n", "message", "=", "'Loss prior %f'", "%", "loss", "\n", "logger", ".", "info", "(", "message", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# replace optimized approximate posterior with old approximate posterior", "\n", "model", ".", "model", ".", "_approximate_posterior", ".", "load_state_dict", "(", "ap", ")", "\n", "\n", "for", "prior_params", "in", "model", ".", "model", ".", "_prior", ".", "parameters", "(", ")", ":", "\n", "                        ", "prior_params", ".", "requires_grad", "=", "False", "\n", "\n", "", "for", "post_params", "in", "model", ".", "model", ".", "_approximate_posterior", ".", "parameters", "(", ")", ":", "\n", "                        ", "post_params", ".", "requires_grad", "=", "True", "\n", "\n", "", "loss", "=", "-", "model", ".", "score", "(", "data", ")", ".", "mean", "(", ")", "\n", "message", "=", "'Loss posterior %f'", "%", "loss", "\n", "logger", ".", "info", "(", "message", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "eval_loss", "=", "compute_eval_loss", "(", "\n", "model", ",", "eval_loader", ",", "device", ",", "X_eval", ".", "shape", "[", "0", "]", ")", "\n", "\n", "if", "eval_loss", "<", "best_eval_loss", ":", "\n", "                        ", "best_model", "=", "copy", ".", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "best_eval_loss", "=", "eval_loss", "\n", "n_epochs_not_improved", "=", "0", "\n", "\n", "", "else", ":", "\n", "                        ", "n_epochs_not_improved", "+=", "1", "\n", "\n", "", "message", "=", "'Epoch %s:'", "%", "(", "\n", "epoch", "+", "1", ")", ",", "'train loss = %.5f'", "%", "loss", ",", "'eval loss = %.5f'", "%", "eval_loss", "\n", "logger", ".", "info", "(", "message", ")", "\n", "\n", "", "model", ".", "train", "(", ")", "\n", "epoch", "+=", "1", "\n", "\n", "", "best_eval", "[", "counter", ",", "i", "]", "=", "best_eval_loss", "\n", "np", ".", "save", "(", "args", ".", "data", "+", "'_hypertuning_M_results_tmp'", ",", "best_eval", ")", "\n", "\n", "", "counter", "+=", "1", "\n", "\n", "", "np", ".", "save", "(", "args", ".", "data", "+", "'_hypertuning_M_results'", ",", "best_eval", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flows.train_toy_no_mdn.lr_scheduler": [[86, 98], ["range", "logger.info", "len"], "function", ["None"], ["def", "lr_scheduler", "(", "n_epochs_not_improved", ",", "optimzer", ",", "scheduler", ",", "logger", ")", ":", "\n", "\t", "lr", "=", "args", ".", "lr", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "scheduler", ")", "-", "1", ")", ":", "\n", "\t\t", "if", "n_epochs_not_improved", ">", "scheduler", "[", "i", "]", ":", "\n", "\t\t\t", "lr", "*=", "0.1", "\n", "\n", "", "", "for", "param_group", "in", "optimzer", ".", "param_groups", ":", "\n", "\t\t", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n", "", "message", "=", "'New learning rate: %f'", "%", "lr", "\n", "logger", ".", "info", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flows.train_toy_no_mdn.compute_eval_loss": [[99, 108], ["enumerate", "data[].to", "data[].to", "model.score().sum", "model.score"], "function", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score"], ["", "def", "compute_eval_loss", "(", "model", ",", "eval_loader", ",", "device", ",", "n_points", ")", ":", "\n", "\t", "loss", "=", "0", "\n", "for", "_", ",", "data", "in", "enumerate", "(", "eval_loader", ")", ":", "\n", "\t\t", "data", "[", "0", "]", "=", "data", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "data", "[", "1", "]", "=", "data", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "\n", "loss", "+=", "-", "model", ".", "score", "(", "data", ")", ".", "sum", "(", ")", "\n", "\n", "", "return", "loss", "/", "n_points", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flows.train_toy_no_mdn.main": [[109, 270], ["deconv.utils.make_2d_toy_noise_covar.covar_gen().astype", "[].astype", "numpy.zeros_like", "range", "torch.from_numpy", "torch.from_numpy", "deconv.gmm.data.DeconvDataset", "torch.utils.data.DataLoader", "torch.from_numpy", "deconv.utils.make_2d_toy_noise_covar.covar_gen().astype", "[].astype", "numpy.zeros_like", "range", "torch.from_numpy", "torch.from_numpy", "deconv.gmm.data.DeconvDataset", "torch.utils.data.DataLoader", "logger.info", "torch.optim.Adam", "list", "copy.deepcopy", "train_toy_no_mdn.compute_eval_loss", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.train", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.load_state_dict", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.eval", "logger.info", "torch.save", "logger.info", "torch.from_numpy.astype", "[].astype", "torch.from_numpy.astype", "deconv.flow.svi_no_mdn.SVIFlowToy", "deconv.flow.svi_no_mdn.SVIFlowToyNoise", "sum", "map", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.state_dict", "enumerate", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.eval", "train_toy_no_mdn.compute_eval_loss", "train_toy_no_mdn.lr_scheduler", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.train", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.state_dict", "[].astype", "deconv.utils.compute_2d_log_likelihood.compute_data_ll().mean", "logger.info", "deconv.utils.make_2d_toy_noise_covar.covar_gen", "numpy.random.multivariate_normal", "deconv.utils.make_2d_toy_noise_covar.covar_gen", "numpy.random.multivariate_normal", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.parameters", "args.eval_based_scheduler.split", "data[].to", "data[].to", "torch.optim.Adam.zero_grad", "loss.backward", "torch.optim.Adam.step", "copy.deepcopy", "logger.info", "logger.info", "corner.hist2d", "matplotlib.savefig", "matplotlib.close", "matplotlib.scatter", "matplotlib.savefig", "matplotlib.close", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.model._prior.log_prob().mean", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.model._likelihood.log_prob().mean", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.model._prior.log_prob().mean", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.model._likelihood.log_prob().mean", "deconv.utils.make_2d_toy_data.data_gen", "deconv.utils.make_2d_toy_data.data_gen", "p.numel", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.score().mean", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.state_dict", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.model._prior.sample().detach().cpu().numpy", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.model._likelihood.sample().detach().cpu().numpy", "args.data.split", "args.data.split", "deconv.utils.compute_2d_log_likelihood.compute_data_ll", "numpy.zeros", "deconv.utils.make_2d_toy_data.data_gen", "numpy.zeros", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.parameters", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.model._prior.log_prob().mean", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.model._likelihood.log_prob().mean", "str", "str", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.model._prior.log_prob", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.model._likelihood.log_prob", "deconv.utils.make_2d_toy_data.data_gen", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.model._prior.log_prob", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.model._likelihood.log_prob", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.score", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.model._prior.sample().detach().cpu", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.model._likelihood.sample().detach().cpu", "torch.from_numpy.to", "torch.from_numpy.to", "torch.from_numpy().to", "torch.from_numpy().to", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.model._prior.log_prob", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.model._likelihood.log_prob", "torch.from_numpy.to", "torch.from_numpy.to", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.model._prior.sample().detach", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.model._likelihood.sample().detach", "torch.from_numpy", "torch.from_numpy", "[].astype.astype", "[].astype.astype", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.model._prior.sample", "deconv.flow.svi_no_mdn.SVIFlowToyNoise.model._likelihood.sample"], "function", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flows.train_toy.compute_eval_loss", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flows.train_toy.compute_eval_loss", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flows.train_toy.lr_scheduler", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.utils.make_2d_toy_noise_covar.covar_gen", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.utils.make_2d_toy_noise_covar.covar_gen", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.utils.make_2d_toy_data.data_gen", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.utils.make_2d_toy_data.data_gen", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.utils.compute_2d_log_likelihood.compute_data_ll", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.utils.make_2d_toy_data.data_gen", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.utils.make_2d_toy_data.data_gen", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample"], ["", "def", "main", "(", ")", ":", "\n", "\t", "train_covar", "=", "covar_gen", "(", "args", ".", "covar", ",", "args", ".", "n_train_points", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "train_data_clean", "=", "data_gen", "(", "args", ".", "data", ",", "args", ".", "n_train_points", ")", "[", "0", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# plt.scatter(train_data_clean[:, 0], train_data_clean[:, 1])", "\n", "\n", "train_data", "=", "np", ".", "zeros_like", "(", "train_data_clean", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "n_train_points", ")", ":", "\n", "\t\t", "train_data", "[", "i", "]", "=", "train_data_clean", "[", "i", "]", "+", "np", ".", "random", ".", "multivariate_normal", "(", "mean", "=", "np", ".", "zeros", "(", "(", "2", ",", ")", ")", ",", "cov", "=", "train_covar", "[", "i", "]", ")", "\n", "\n", "# plt.scatter(train_data[:, 0], train_data[:, 1])", "\n", "# plt.show()", "\n", "\n", "", "train_covar", "=", "torch", ".", "from_numpy", "(", "train_covar", ")", "\n", "train_data", "=", "torch", ".", "from_numpy", "(", "train_data", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "train_dataset", "=", "DeconvDataset", "(", "train_data", ",", "train_covar", ")", "\n", "train_loader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "\n", "test_data_clean", "=", "torch", ".", "from_numpy", "(", "data_gen", "(", "args", ".", "data", ",", "args", ".", "n_test_points", ")", "[", "0", "]", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "eval_covar", "=", "covar_gen", "(", "args", ".", "covar", ",", "args", ".", "n_eval_points", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "eval_data_clean", "=", "data_gen", "(", "args", ".", "data", ",", "args", ".", "n_eval_points", ")", "[", "0", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "eval_data", "=", "np", ".", "zeros_like", "(", "eval_data_clean", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "n_eval_points", ")", ":", "\n", "\t\t", "eval_data", "[", "i", "]", "=", "eval_data_clean", "[", "i", "]", "+", "np", ".", "random", ".", "multivariate_normal", "(", "mean", "=", "np", ".", "zeros", "(", "(", "2", ",", ")", ")", ",", "cov", "=", "eval_covar", "[", "i", "]", ")", "\n", "\n", "", "eval_covar", "=", "torch", ".", "from_numpy", "(", "eval_covar", ")", "\n", "eval_data", "=", "torch", ".", "from_numpy", "(", "eval_data", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "eval_dataset", "=", "DeconvDataset", "(", "eval_data", ",", "eval_covar", ")", "\n", "eval_loader", "=", "DataLoader", "(", "eval_dataset", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "False", ")", "\n", "\n", "if", "args", ".", "infer", "==", "'true_data'", ":", "\n", "\t\t", "model", "=", "SVIFlowToy", "(", "dimensions", "=", "2", ",", "\n", "objective", "=", "args", ".", "objective", ",", "\n", "posterior_context_size", "=", "args", ".", "posterior_context_size", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "device", "=", "device", ",", "\n", "maf_steps_prior", "=", "args", ".", "flow_steps_prior", ",", "\n", "maf_steps_posterior", "=", "args", ".", "flow_steps_posterior", ",", "\n", "maf_features", "=", "args", ".", "maf_features", ",", "\n", "maf_hidden_blocks", "=", "args", ".", "maf_hidden_blocks", ",", "\n", "K", "=", "args", ".", "K", ")", "\n", "\n", "", "else", ":", "\n", "\t\t", "model", "=", "SVIFlowToyNoise", "(", "dimensions", "=", "2", ",", "\n", "objective", "=", "args", ".", "objective", ",", "\n", "posterior_context_size", "=", "args", ".", "posterior_context_size", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "device", "=", "device", ",", "\n", "maf_steps_prior", "=", "args", ".", "flow_steps_prior", ",", "\n", "maf_steps_posterior", "=", "args", ".", "flow_steps_posterior", ",", "\n", "maf_features", "=", "args", ".", "maf_features", ",", "\n", "maf_hidden_blocks", "=", "args", ".", "maf_hidden_blocks", ",", "\n", "K", "=", "args", ".", "K", ")", "\n", "\n", "\n", "", "message", "=", "'Total number of parameters: %s'", "%", "(", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "message", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params", "=", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "\n", "\n", "#training", "\n", "scheduler", "=", "list", "(", "map", "(", "int", ",", "args", ".", "eval_based_scheduler", ".", "split", "(", "','", ")", ")", ")", "\n", "epoch", "=", "0", "\n", "best_model", "=", "copy", ".", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "\n", "best_eval_loss", "=", "compute_eval_loss", "(", "model", ",", "eval_loader", ",", "device", ",", "args", ".", "n_eval_points", ")", "\n", "n_epochs_not_improved", "=", "0", "\n", "\n", "model", ".", "train", "(", ")", "\n", "while", "n_epochs_not_improved", "<", "scheduler", "[", "-", "1", "]", "and", "epoch", "<", "args", ".", "n_epochs", ":", "\n", "\t\t", "for", "batch_idx", ",", "data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\t\t\t", "data", "[", "0", "]", "=", "data", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "data", "[", "1", "]", "=", "data", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "\n", "loss", "=", "-", "model", ".", "score", "(", "data", ")", ".", "mean", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "eval_loss", "=", "compute_eval_loss", "(", "model", ",", "eval_loader", ",", "device", ",", "args", ".", "n_eval_points", ")", "\n", "\n", "if", "eval_loss", "<", "best_eval_loss", ":", "\n", "\t\t    ", "best_model", "=", "copy", ".", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "best_eval_loss", "=", "eval_loss", "\n", "n_epochs_not_improved", "=", "0", "\n", "\n", "", "else", ":", "\n", "\t\t    ", "n_epochs_not_improved", "+=", "1", "\n", "\n", "", "lr_scheduler", "(", "n_epochs_not_improved", ",", "optimizer", ",", "scheduler", ",", "logger", ")", "\n", "\n", "if", "(", "epoch", "+", "1", ")", "%", "args", ".", "test_freq", "==", "0", ":", "\n", "\t\t\t", "if", "args", ".", "infer", "==", "'true_data'", ":", "\n", "\t\t\t\t", "test_loss_clean", "=", "-", "model", ".", "model", ".", "_prior", ".", "log_prob", "(", "test_data_clean", ".", "to", "(", "device", ")", ")", ".", "mean", "(", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t\t", "test_loss_clean", "=", "-", "model", ".", "model", ".", "_likelihood", ".", "log_prob", "(", "test_data_clean", ".", "to", "(", "device", ")", ")", ".", "mean", "(", ")", "\n", "\n", "", "message", "=", "'Epoch %s:'", "%", "(", "epoch", "+", "1", ")", ",", "'train loss = %.5f'", "%", "loss", ",", "'eval loss = %.5f'", "%", "eval_loss", ",", "'test loss (clean) = %.5f'", "%", "test_loss_clean", "\n", "logger", ".", "info", "(", "message", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t", "message", "=", "'Epoch %s:'", "%", "(", "epoch", "+", "1", ")", ",", "'train loss = %.5f'", "%", "loss", ",", "'eval loss = %.5f'", "%", "eval_loss", "\n", "logger", ".", "info", "(", "message", ")", "\n", "\n", "", "if", "(", "epoch", "+", "1", ")", "%", "args", ".", "viz_freq", "==", "0", ":", "\n", "\t\t\t", "if", "args", ".", "infer", "==", "'true_data'", ":", "\n", "\t\t\t\t", "samples", "=", "model", ".", "model", ".", "_prior", ".", "sample", "(", "1000", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t\t", "samples", "=", "model", ".", "model", ".", "_likelihood", ".", "sample", "(", "1000", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "corner", ".", "hist2d", "(", "samples", "[", ":", ",", "0", "]", ",", "samples", "[", ":", ",", "1", "]", ")", "\n", "fig_filename", "=", "args", ".", "dir", "+", "'out/'", "+", "name", "+", "'_corner_fig_'", "+", "str", "(", "epoch", "+", "1", ")", "+", "'.png'", "\n", "plt", ".", "savefig", "(", "fig_filename", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "plt", ".", "scatter", "(", "samples", "[", ":", ",", "0", "]", ",", "samples", "[", ":", ",", "1", "]", ")", "\n", "fig_filename", "=", "args", ".", "dir", "+", "'out/'", "+", "name", "+", "'_scatter_fig_'", "+", "str", "(", "epoch", "+", "1", ")", "+", "'.png'", "\n", "plt", ".", "savefig", "(", "fig_filename", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "", "model", ".", "train", "(", ")", "\n", "epoch", "+=", "1", "\n", "\n", "\n", "", "model", ".", "load_state_dict", "(", "best_model", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "if", "args", ".", "infer", "==", "'true_data'", ":", "\n", "\t\t", "test_loss_clean", "=", "-", "model", ".", "model", ".", "_prior", ".", "log_prob", "(", "test_data_clean", ".", "to", "(", "device", ")", ")", ".", "mean", "(", ")", "\n", "\n", "", "else", ":", "\n", "\t\t", "test_loss_clean", "=", "-", "model", ".", "model", ".", "_likelihood", ".", "log_prob", "(", "test_data_clean", ".", "to", "(", "device", ")", ")", ".", "mean", "(", ")", "\n", "\n", "", "message", "=", "'Final test loss (clean) = %.5f'", "%", "test_loss_clean", "\n", "logger", ".", "info", "(", "message", ")", "\n", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "args", ".", "dir", "+", "'models/'", "+", "name", "+", "'.model'", ")", "\n", "logger", ".", "info", "(", "'Training has finished.'", ")", "\n", "\n", "if", "args", ".", "data", ".", "split", "(", "'_'", ")", "[", "0", "]", "==", "'mixture'", "or", "args", ".", "data", ".", "split", "(", "'_'", ")", "[", "0", "]", "==", "'gaussian'", ":", "\n", "\t\t", "kl_points", "=", "data_gen", "(", "args", ".", "data", ",", "args", ".", "n_kl_points", ")", "[", "0", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "if", "args", ".", "infer", "==", "'true_data'", ":", "\n", "\t\t\t", "model_log_prob", "=", "model", ".", "model", ".", "_prior", ".", "log_prob", "(", "torch", ".", "from_numpy", "(", "kl_points", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "to", "(", "device", ")", ")", ".", "mean", "(", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t", "model_log_prob", "=", "model", ".", "model", ".", "_likelihood", ".", "log_prob", "(", "torch", ".", "from_numpy", "(", "kl_points", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "to", "(", "device", ")", ")", ".", "mean", "(", ")", "\n", "\n", "", "data_log_prob", "=", "compute_data_ll", "(", "args", ".", "data", ",", "kl_points", ")", ".", "mean", "(", ")", "\n", "\n", "approximate_KL", "=", "data_log_prob", "-", "model_log_prob", "\n", "message", "=", "'KL div %.5f:'", "%", "approximate_KL", "\n", "logger", ".", "info", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flows.train_toy.lr_scheduler": [[92, 102], ["range", "logger.info", "len"], "function", ["None"], ["def", "lr_scheduler", "(", "n_epochs_not_improved", ",", "optimzer", ",", "scheduler", ",", "logger", ")", ":", "\n", "\t", "for", "i", "in", "range", "(", "len", "(", "scheduler", ")", "-", "1", ")", ":", "\n", "\t\t", "if", "n_epochs_not_improved", "<", "scheduler", "[", "i", "]", ":", "\n", "\t\t\t", "lr", "=", "args", ".", "lr", "*", "0.1", "\n", "\n", "", "", "for", "param_group", "in", "optimzer", ".", "param_groups", ":", "\n", "\t\t", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n", "", "message", "=", "'New learning rate: %f'", "%", "lr", "\n", "logger", ".", "info", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flows.train_toy.compute_eval_loss": [[103, 112], ["enumerate", "data[].to", "data[].to", "model.score().sum", "model.score"], "function", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score"], ["", "def", "compute_eval_loss", "(", "model", ",", "eval_loader", ",", "device", ",", "n_points", ")", ":", "\n", "\t", "loss", "=", "0", "\n", "for", "_", ",", "data", "in", "enumerate", "(", "eval_loader", ")", ":", "\n", "\t\t", "data", "[", "0", "]", "=", "data", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "data", "[", "1", "]", "=", "data", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "\n", "loss", "+=", "-", "model", ".", "score", "(", "data", ")", ".", "sum", "(", ")", "\n", "\n", "", "return", "loss", "/", "n_points", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flows.train_toy.main": [[113, 265], ["deconv.utils.make_2d_toy_noise_covar.covar_gen().astype", "[].astype", "numpy.zeros_like", "range", "torch.from_numpy", "torch.from_numpy", "deconv.gmm.data.DeconvDataset", "torch.utils.data.DataLoader", "torch.from_numpy", "deconv.utils.make_2d_toy_noise_covar.covar_gen().astype", "[].astype", "numpy.zeros_like", "range", "torch.from_numpy", "torch.from_numpy", "deconv.gmm.data.DeconvDataset", "torch.utils.data.DataLoader", "logger.info", "torch.optim.Adam", "list", "copy.deepcopy", "train_toy.compute_eval_loss", "deconv.flow.svi.SVIFlowToyNoise.train", "torch.save", "logger.info", "torch.from_numpy.astype", "[].astype", "torch.from_numpy.astype", "deconv.flow.svi.SVIFlowToy", "deconv.flow.svi.SVIFlowToyNoise", "sum", "map", "deconv.flow.svi.SVIFlowToyNoise.state_dict", "enumerate", "deconv.flow.svi.SVIFlowToyNoise.eval", "train_toy.compute_eval_loss", "train_toy.lr_scheduler", "deconv.flow.svi.SVIFlowToyNoise.train", "deconv.flow.svi.SVIFlowToyNoise.state_dict", "[].astype", "deconv.utils.compute_2d_log_likelihood.compute_data_ll().mean", "logger.info", "deconv.utils.make_2d_toy_noise_covar.covar_gen", "numpy.random.multivariate_normal", "deconv.utils.make_2d_toy_noise_covar.covar_gen", "numpy.random.multivariate_normal", "deconv.flow.svi.SVIFlowToyNoise.parameters", "args.eval_based_scheduler.split", "data[].to", "data[].to", "torch.optim.Adam.zero_grad", "loss.backward", "torch.optim.Adam.step", "copy.deepcopy", "logger.info", "logger.info", "corner.hist2d", "matplotlib.savefig", "matplotlib.close", "matplotlib.scatter", "matplotlib.savefig", "matplotlib.close", "deconv.flow.svi.SVIFlowToyNoise.model._prior.log_prob().mean", "deconv.flow.svi.SVIFlowToyNoise.model._likelihood.log_prob().mean", "deconv.utils.make_2d_toy_data.data_gen", "deconv.utils.make_2d_toy_data.data_gen", "list", "list", "p.numel", "deconv.flow.svi.SVIFlowToyNoise.score().mean", "deconv.flow.svi.SVIFlowToyNoise.state_dict", "deconv.flow.svi.SVIFlowToyNoise.model._prior.sample().detach().cpu().numpy", "deconv.flow.svi.SVIFlowToyNoise.model._likelihood.sample().detach().cpu().numpy", "args.data.split", "args.data.split", "deconv.utils.compute_2d_log_likelihood.compute_data_ll", "numpy.zeros", "deconv.utils.make_2d_toy_data.data_gen", "numpy.zeros", "map", "map", "deconv.flow.svi.SVIFlowToyNoise.parameters", "deconv.flow.svi.SVIFlowToyNoise.model._prior.log_prob().mean", "deconv.flow.svi.SVIFlowToyNoise.model._likelihood.log_prob().mean", "str", "str", "deconv.utils.make_2d_toy_data.data_gen", "deconv.flow.svi.SVIFlowToyNoise.model._prior.log_prob", "deconv.flow.svi.SVIFlowToyNoise.model._likelihood.log_prob", "args.posterior_mdn_net.split", "args.posterior_mdn_net.split", "deconv.flow.svi.SVIFlowToyNoise.score", "deconv.flow.svi.SVIFlowToyNoise.model._prior.sample().detach().cpu", "deconv.flow.svi.SVIFlowToyNoise.model._likelihood.sample().detach().cpu", "torch.from_numpy().to", "torch.from_numpy().to", "deconv.flow.svi.SVIFlowToyNoise.model._prior.log_prob", "deconv.flow.svi.SVIFlowToyNoise.model._likelihood.log_prob", "torch.from_numpy.to", "torch.from_numpy.to", "deconv.flow.svi.SVIFlowToyNoise.model._prior.sample().detach", "deconv.flow.svi.SVIFlowToyNoise.model._likelihood.sample().detach", "torch.from_numpy", "torch.from_numpy", "[].astype.astype", "[].astype.astype", "deconv.flow.svi.SVIFlowToyNoise.model._prior.sample", "deconv.flow.svi.SVIFlowToyNoise.model._likelihood.sample"], "function", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flows.train_toy.compute_eval_loss", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flows.train_toy.compute_eval_loss", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flows.train_toy.lr_scheduler", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.utils.make_2d_toy_noise_covar.covar_gen", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.utils.make_2d_toy_noise_covar.covar_gen", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.utils.make_2d_toy_data.data_gen", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.utils.make_2d_toy_data.data_gen", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.utils.compute_2d_log_likelihood.compute_data_ll", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.utils.make_2d_toy_data.data_gen", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.utils.make_2d_toy_data.data_gen", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample"], ["", "def", "main", "(", ")", ":", "\n", "\t", "train_covar", "=", "covar_gen", "(", "args", ".", "covar", ",", "args", ".", "n_train_points", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "train_data_clean", "=", "data_gen", "(", "args", ".", "data", ",", "args", ".", "n_train_points", ")", "[", "0", "]", ".", "astype", "(", "np", ".", "float64", ")", "\n", "\n", "# plt.scatter(train_data_clean[:, 0], train_data_clean[:, 1])", "\n", "\n", "train_data", "=", "np", ".", "zeros_like", "(", "train_data_clean", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "n_train_points", ")", ":", "\n", "\t\t", "train_data", "[", "i", "]", "=", "train_data_clean", "[", "i", "]", "+", "np", ".", "random", ".", "multivariate_normal", "(", "mean", "=", "np", ".", "zeros", "(", "(", "2", ",", ")", ")", ",", "cov", "=", "train_covar", "[", "i", "]", ")", "\n", "\n", "# plt.scatter(train_data[:, 0], train_data[:, 1])", "\n", "# plt.show()", "\n", "\n", "", "train_covar", "=", "torch", ".", "from_numpy", "(", "train_covar", ")", "\n", "train_data", "=", "torch", ".", "from_numpy", "(", "train_data", ".", "astype", "(", "np", ".", "float64", ")", ")", "\n", "\n", "train_dataset", "=", "DeconvDataset", "(", "train_data", ",", "train_covar", ")", "\n", "train_loader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "\n", "test_data_clean", "=", "torch", ".", "from_numpy", "(", "data_gen", "(", "args", ".", "data", ",", "args", ".", "n_test_points", ")", "[", "0", "]", ".", "astype", "(", "np", ".", "float64", ")", ")", "\n", "\n", "eval_covar", "=", "covar_gen", "(", "args", ".", "covar", ",", "args", ".", "n_eval_points", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "eval_data_clean", "=", "data_gen", "(", "args", ".", "data", ",", "args", ".", "n_eval_points", ")", "[", "0", "]", ".", "astype", "(", "np", ".", "float64", ")", "\n", "\n", "eval_data", "=", "np", ".", "zeros_like", "(", "eval_data_clean", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "n_eval_points", ")", ":", "\n", "\t\t", "eval_data", "[", "i", "]", "=", "eval_data_clean", "[", "i", "]", "+", "np", ".", "random", ".", "multivariate_normal", "(", "mean", "=", "np", ".", "zeros", "(", "(", "2", ",", ")", ")", ",", "cov", "=", "eval_covar", "[", "i", "]", ")", "\n", "\n", "", "eval_covar", "=", "torch", ".", "from_numpy", "(", "eval_covar", ")", "\n", "eval_data", "=", "torch", ".", "from_numpy", "(", "eval_data", ".", "astype", "(", "np", ".", "float64", ")", ")", "\n", "\n", "eval_dataset", "=", "DeconvDataset", "(", "eval_data", ",", "eval_covar", ")", "\n", "eval_loader", "=", "DataLoader", "(", "eval_dataset", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "False", ")", "\n", "\n", "if", "args", ".", "infer", "==", "'true_data'", ":", "\n", "\t\t", "model", "=", "SVIFlowToy", "(", "dimensions", "=", "2", ",", "\n", "objective", "=", "args", ".", "objective", ",", "\n", "posterior_context_size", "=", "args", ".", "posterior_context_size", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "device", "=", "device", ",", "\n", "maf_steps_prior", "=", "args", ".", "flow_steps_prior", ",", "\n", "maf_steps_posterior", "=", "args", ".", "flow_steps_posterior", ",", "\n", "maf_features", "=", "args", ".", "maf_features", ",", "\n", "maf_hidden_blocks", "=", "args", ".", "maf_hidden_blocks", ",", "\n", "K", "=", "args", ".", "K", ",", "\n", "posterior_mdn_net", "=", "list", "(", "map", "(", "int", ",", "args", ".", "posterior_mdn_net", ".", "split", "(", "','", ")", ")", ")", ",", "\n", "posterior_mdn_components", "=", "args", ".", "posterior_mdn_components", ")", "\n", "\n", "", "else", ":", "\n", "\t\t", "model", "=", "SVIFlowToyNoise", "(", "dimensions", "=", "2", ",", "\n", "objective", "=", "args", ".", "objective", ",", "\n", "posterior_context_size", "=", "args", ".", "posterior_context_size", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "device", "=", "device", ",", "\n", "maf_steps_prior", "=", "args", ".", "flow_steps_prior", ",", "\n", "maf_steps_posterior", "=", "args", ".", "flow_steps_posterior", ",", "\n", "maf_features", "=", "args", ".", "maf_features", ",", "\n", "maf_hidden_blocks", "=", "args", ".", "maf_hidden_blocks", ",", "\n", "K", "=", "args", ".", "K", ",", "\n", "posterior_mdn_net", "=", "list", "(", "map", "(", "int", ",", "args", ".", "posterior_mdn_net", ".", "split", "(", "','", ")", ")", ")", ",", "\n", "posterior_mdn_components", "=", "args", ".", "posterior_mdn_components", ")", "\n", "\n", "\n", "", "message", "=", "'Total number of parameters: %s'", "%", "(", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "message", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params", "=", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "\n", "\n", "#training", "\n", "scheduler", "=", "list", "(", "map", "(", "int", ",", "args", ".", "eval_based_scheduler", ".", "split", "(", "','", ")", ")", ")", "\n", "epoch", "=", "0", "\n", "best_model", "=", "copy", ".", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "\n", "best_eval_loss", "=", "compute_eval_loss", "(", "model", ",", "eval_loader", ",", "device", ",", "args", ".", "n_eval_points", ")", "\n", "n_epochs_not_improved", "=", "0", "\n", "\n", "model", ".", "train", "(", ")", "\n", "while", "n_epochs_not_improved", "<", "scheduler", "[", "-", "1", "]", "and", "epoch", "<", "args", ".", "n_epochs", ":", "\n", "\t\t", "for", "batch_idx", ",", "data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\t\t\t", "data", "[", "0", "]", "=", "data", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "data", "[", "1", "]", "=", "data", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "\n", "loss", "=", "-", "model", ".", "score", "(", "data", ")", ".", "mean", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "eval_loss", "=", "compute_eval_loss", "(", "model", ",", "eval_loader", ",", "device", ",", "args", ".", "n_eval_points", ")", "\n", "\n", "if", "eval_loss", "<", "best_eval_loss", ":", "\n", "\t\t    ", "best_model", "=", "copy", ".", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "best_eval_loss", "=", "eval_loss", "\n", "n_epochs_not_improved", "=", "0", "\n", "\n", "", "else", ":", "\n", "\t\t    ", "n_epochs_not_improved", "+=", "1", "\n", "\n", "", "lr_scheduler", "(", "n_epochs_not_improved", ",", "optimizer", ",", "scheduler", ",", "logger", ")", "\n", "\n", "if", "(", "epoch", "+", "1", ")", "%", "args", ".", "test_freq", "==", "0", ":", "\n", "\t\t\t", "if", "args", ".", "infer", "==", "'true_data'", ":", "\n", "\t\t\t\t", "test_loss_clean", "=", "-", "model", ".", "model", ".", "_prior", ".", "log_prob", "(", "test_data_clean", ".", "to", "(", "device", ")", ")", ".", "mean", "(", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t\t", "test_loss_clean", "=", "-", "model", ".", "model", ".", "_likelihood", ".", "log_prob", "(", "test_data_clean", ".", "to", "(", "device", ")", ")", ".", "mean", "(", ")", "\n", "\n", "", "message", "=", "'Epoch %s:'", "%", "(", "epoch", "+", "1", ")", ",", "'train loss = %.5f'", "%", "loss", ",", "'eval loss = %.5f'", "%", "eval_loss", ",", "'train loss (clean) = %.5f'", "%", "test_loss_clean", "\n", "logger", ".", "info", "(", "message", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t", "message", "=", "'Epoch %s:'", "%", "(", "epoch", "+", "1", ")", ",", "'train loss = %.5f'", "%", "loss", ",", "'eval loss = %.5f'", "%", "eval_loss", "\n", "logger", ".", "info", "(", "message", ")", "\n", "\n", "", "if", "(", "epoch", "+", "1", ")", "%", "args", ".", "viz_freq", "==", "0", ":", "\n", "\t\t\t", "if", "args", ".", "infer", "==", "'true_data'", ":", "\n", "\t\t\t\t", "samples", "=", "model", ".", "model", ".", "_prior", ".", "sample", "(", "1000", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t\t", "samples", "=", "model", ".", "model", ".", "_likelihood", ".", "sample", "(", "1000", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "corner", ".", "hist2d", "(", "samples", "[", ":", ",", "0", "]", ",", "samples", "[", ":", ",", "1", "]", ")", "\n", "fig_filename", "=", "args", ".", "dir", "+", "'out/'", "+", "name", "+", "'_corner_fig_'", "+", "str", "(", "epoch", "+", "1", ")", "+", "'.png'", "\n", "plt", ".", "savefig", "(", "fig_filename", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "plt", ".", "scatter", "(", "samples", "[", ":", ",", "0", "]", ",", "samples", "[", ":", ",", "1", "]", ")", "\n", "fig_filename", "=", "args", ".", "dir", "+", "'out/'", "+", "name", "+", "'_scatter_fig_'", "+", "str", "(", "epoch", "+", "1", ")", "+", "'.png'", "\n", "plt", ".", "savefig", "(", "fig_filename", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "", "model", ".", "train", "(", ")", "\n", "epoch", "+=", "1", "\n", "\n", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "args", ".", "dir", "+", "'models/'", "+", "name", "+", "'.model'", ")", "\n", "logger", ".", "info", "(", "'Training has finished.'", ")", "\n", "\n", "if", "args", ".", "data", ".", "split", "(", "'_'", ")", "[", "0", "]", "==", "'mixture'", "or", "args", ".", "data", ".", "split", "(", "'_'", ")", "[", "0", "]", "==", "'gaussian'", ":", "\n", "\t\t", "kl_points", "=", "data_gen", "(", "args", ".", "data", ",", "args", ".", "n_kl_points", ")", "[", "0", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "if", "args", ".", "infer", "==", "'true_data'", ":", "\n", "\t\t\t", "model_log_prob", "=", "model", ".", "model", ".", "_prior", ".", "log_prob", "(", "torch", ".", "from_numpy", "(", "kl_points", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "to", "(", "device", ")", ")", ".", "mean", "(", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t", "model_log_prob", "=", "model", ".", "model", ".", "_likelihood", ".", "log_prob", "(", "torch", ".", "from_numpy", "(", "kl_points", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "to", "(", "device", ")", ")", ".", "mean", "(", ")", "\n", "\n", "", "data_log_prob", "=", "compute_data_ll", "(", "args", ".", "data", ",", "kl_points", ")", ".", "mean", "(", ")", "\n", "\n", "approximate_KL", "=", "data_log_prob", "-", "model_log_prob", "\n", "message", "=", "'KL div %.5f:'", "%", "approximate_KL", "\n", "logger", ".", "info", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.train_hypertuning.main": [[64, 136], ["int", "numpy.diag", "sklearn.model_selection.KFold", "itertools.product", "numpy.zeros", "itertools.product", "numpy.save", "numpy.load", "numpy.random.multivariate_normal", "logger.info", "enumerate", "numpy.load", "numpy.ones", "sklearn.model_selection.KFold.split", "numpy.repeat", "numpy.repeat", "deconv.gmm.data.DeconvDataset", "torch.utils.data.DataLoader", "deconv.gmm.data.DeconvDataset", "torch.utils.data.DataLoader", "deconv.gmm.sgd_deconv_gmm_tim.SGDDeconvGMM", "logger.info", "deconv.gmm.sgd_deconv_gmm_tim.SGDDeconvGMM.fit", "numpy.save", "numpy.load", "numpy.zeros", "sum", "numpy.load", "p.numel", "deconv.gmm.sgd_deconv_gmm_tim.SGDDeconvGMM.module.parameters"], "function", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.fit"], ["\n", "def", "compute_eval_loss", "(", "model", ",", "eval_loader", ",", "device", ",", "n_points", ")", ":", "\n", "    ", "loss", "=", "0", "\n", "for", "_", ",", "data", "in", "enumerate", "(", "eval_loader", ")", ":", "\n", "        ", "data", "[", "0", "]", "=", "data", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "data", "[", "1", "]", "=", "data", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "\n", "loss", "+=", "-", "model", ".", "score", "(", "data", ")", ".", "sum", "(", ")", "\n", "\n", "", "return", "loss", "/", "n_points", "\n", "\n", "\n", "", "def", "main", "(", ")", ":", "\n", "    ", "if", "args", ".", "data", "==", "'boston'", ":", "\n", "        ", "data", "=", "np", ".", "load", "(", "'data_small/boston_no_discrete.npy'", ")", "\n", "", "elif", "args", ".", "data", "==", "'white_wine'", ":", "\n", "        ", "data", "=", "np", ".", "load", "(", "'data_small/white_no_discrete_no_corr_0.98.npy'", ")", "\n", "", "elif", "args", ".", "data", "==", "'red_wine'", ":", "\n", "        ", "data", "=", "np", ".", "load", "(", "'data_small/red_no_discrete_no_corr_0.98.npy'", ")", "\n", "", "elif", "args", ".", "data", "==", "'ionosphere'", ":", "\n", "        ", "data", "=", "np", ".", "load", "(", "'data_small/ionosphere_no_discrete_no_corr_0.98.npy'", ")", "\n", "\n", "", "n_features", "=", "data", ".", "shape", "[", "1", "]", "\n", "n_train", "=", "int", "(", "data", ".", "shape", "[", "0", "]", "*", "0.9", ")", "\n", "train_data_clean", "=", "data", "[", ":", "n_train", "]", "\n", "\n", "covar", "=", "np", ".", "diag", "(", "args", ".", "covar", "*", "np", ".", "ones", "(", "(", "n_features", ",", ")", ")", ")", "\n", "\n", "train_data", "=", "train_data_clean", "+", "np", ".", "random", ".", "multivariate_normal", "(", "mean", "=", "np", ".", "zeros", "(", "\n", "(", "n_features", ",", ")", ")", ",", "cov", "=", "covar", ",", "size", "=", "n_train", ")", "\n", "\n", "kf", "=", "KFold", "(", "n_splits", "=", "5", ")", "\n", "\n", "# 54 combinations", "\n", "lr_list", "=", "[", "1e-3", ",", "5e-4", ",", "1e-4", "]", "\n", "flow_steps_prior_list", "=", "[", "3", ",", "4", ",", "5", "]", "\n", "flow_steps_posterior_list", "=", "[", "3", ",", "4", ",", "5", "]", "\n", "maf_features_list", "=", "[", "64", ",", "128", "]", "\n", "maf_hidden_blocks_list", "=", "[", "1", ",", "2", "]", "\n", "\n", "n_combs", "=", "0", "\n", "for", "lr", ",", "fspr", ",", "fspo", ",", "maf_f", ",", "maf_h", "in", "product", "(", "lr_list", ",", "flow_steps_posterior_list", ",", "flow_steps_posterior_list", ",", "maf_features_list", ",", "maf_hidden_blocks_list", ")", ":", "\n", "        ", "n_combs", "+=", "1", "\n", "print", "(", "n_combs", ",", "(", "lr", ",", "fspr", ",", "fspo", ",", "maf_f", ",", "maf_h", ")", ")", "\n", "\n", "", "best_eval", "=", "np", ".", "zeros", "(", "(", "n_combs", ",", "5", ")", ")", "\n", "\n", "counter", "=", "0", "\n", "for", "lr", ",", "fspr", ",", "fspo", ",", "maf_f", ",", "maf_h", "in", "product", "(", "lr_list", ",", "flow_steps_posterior_list", ",", "flow_steps_posterior_list", ",", "maf_features_list", ",", "maf_hidden_blocks_list", ")", ":", "\n", "        ", "logger", ".", "info", "(", "(", "lr", ",", "fspr", ",", "fspo", ",", "maf_f", ",", "maf_h", ")", ")", "\n", "\n", "for", "i", ",", "(", "train_index", ",", "eval_index", ")", "in", "enumerate", "(", "kf", ".", "split", "(", "train_data", ")", ")", ":", "\n", "            ", "X_train", ",", "X_eval", "=", "train_data", "[", "train_index", "]", ",", "train_data", "[", "eval_index", "]", "\n", "train_covars", "=", "np", ".", "repeat", "(", "\n", "covar", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ",", "X_train", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "eval_covars", "=", "np", ".", "repeat", "(", "\n", "covar", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ",", "X_eval", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "\n", "train_dataset", "=", "DeconvDataset", "(", "X_train", ",", "train_covars", ")", "\n", "train_loader", "=", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "\n", "eval_dataset", "=", "DeconvDataset", "(", "X_eval", ",", "eval_covars", ")", "\n", "eval_loader", "=", "DataLoader", "(", "\n", "eval_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ")", "\n", "\n", "model", "=", "SVIFlowToy", "(", "dimensions", "=", "n_features", ",", "\n", "objective", "=", "args", ".", "objective", ",", "\n", "posterior_context_size", "=", "n_features", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "device", "=", "device", ",", "\n", "maf_steps_prior", "=", "fspr", ",", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.base.BaseGMM.__init__": [[14, 32], ["torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.device", "torch.device", "torch.device", "torch.device"], "methods", ["None"], ["self", ".", "flow_steps", "=", "flow_steps", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "lr", "=", "lr", "\n", "transform", "=", "self", ".", "_create_transform", "(", ")", "\n", "\n", "self", ".", "flow", "=", "flows", ".", "Flow", "(", "\n", "transform", ",", "\n", "distributions", ".", "StandardNormal", "(", "(", "self", ".", "dimensions", ",", ")", ")", "\n", ")", "\n", "\n", "self", ".", "flow", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "def", "_create_linear_transform", "(", "self", ")", ":", "\n", "        ", "return", "transforms", ".", "CompositeTransform", "(", "[", "\n", "transforms", ".", "RandomPermutation", "(", "features", "=", "self", ".", "dimensions", ")", ",", "\n", "transforms", ".", "LULinear", "(", "self", ".", "dimensions", ",", "identity_init", "=", "True", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.base.BaseGMM._kmeans_init": [[34, 36], ["util.k_means"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.util.k_means"], ["", "@", "abstractmethod", "\n", "def", "_create_transform", "(", "context_features", "=", "None", ")", ":", "\n", "        ", "pass", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.base.BaseGMM.fit": [[37, 56], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "base.BaseGMM._init_expectations", "base.BaseGMM._m_step", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "range", "float", "float", "base.BaseGMM._e_step", "base.BaseGMM._m_step", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.gmm.GMM._init_expectations", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.online_deconv_gmm.OnlineDeconvGMM._m_step", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.gmm.GMM._e_step", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.online_deconv_gmm.OnlineDeconvGMM._m_step"], ["\n", "", "def", "fit", "(", "self", ",", "data", ",", "val_data", "=", "None", ")", ":", "\n", "\n", "        ", "optimiser", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "params", "=", "self", ".", "flow", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "lr", "\n", ")", "\n", "\n", "loader", "=", "data_utils", ".", "DataLoader", "(", "\n", "data", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "# num_workers=8,", "\n", "shuffle", "=", "True", ",", "\n", "# pin_memory=True", "\n", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "epochs", ")", ":", "\n", "\n", "            ", "self", ".", "flow", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.base.BaseGMM.predict": [[57, 59], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "base.BaseGMM._e_step"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.gmm.GMM._e_step"], ["train_loss", "=", "0.0", "\n", "\n", "for", "j", ",", "d", "in", "enumerate", "(", "loader", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.base.BaseGMM._init_expectations": [[60, 63], ["None"], "methods", ["None"], ["                ", "d", "=", "[", "a", ".", "to", "(", "self", ".", "device", ")", "for", "a", "in", "d", "]", "\n", "optimiser", ".", "zero_grad", "(", ")", "\n", "log_prob", "=", "self", ".", "flow", ".", "log_prob", "(", "d", "[", "0", "]", ")", "\n", "loss", "=", "-", "1", "*", "torch", ".", "mean", "(", "log_prob", ")", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.base.BaseGMM._e_step": [[64, 67], ["None"], "methods", ["None"], ["train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimiser", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.base.BaseGMM._m_step": [[68, 71], ["None"], "methods", ["None"], ["", "train_loss", "/=", "len", "(", "loader", ")", "\n", "\n", "if", "val_data", ":", "\n", "                ", "val_loss", "=", "self", ".", "score_batch", "(", "val_data", ")", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.plotting.plot_covariance": [[5, 28], ["numpy.linalg.eigh", "matplotlib.patches.Ellipse", "mpl.patches.Ellipse.set_clip_box", "ax.add_artist", "numpy.linalg.norm", "numpy.sqrt", "numpy.arctan2", "numpy.sqrt"], "function", ["None"], ["def", "plot_covariance", "(", "mean", ",", "cov", ",", "ax", ",", "alpha", "=", "0.5", ",", "color", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Plot a Gaussian convariance on a Matplotlib axis.\n\n    Adapted from https://scikit-learn.org/stable/auto_examples/\n    mixture/plot_gmm_covariances.html\n    \"\"\"", "\n", "v", ",", "w", "=", "np", ".", "linalg", ".", "eigh", "(", "cov", ")", "\n", "u", "=", "w", "[", "0", "]", "/", "np", ".", "linalg", ".", "norm", "(", "w", "[", "0", "]", ")", "\n", "angle", "=", "np", ".", "arctan2", "(", "u", "[", "1", "]", ",", "u", "[", "0", "]", ")", "*", "180", "/", "np", ".", "pi", "\n", "v", "=", "2.", "*", "np", ".", "sqrt", "(", "2.", ")", "*", "np", ".", "sqrt", "(", "v", ")", "\n", "ell", "=", "mpl", ".", "patches", ".", "Ellipse", "(", "\n", "mean", ",", "\n", "v", "[", "0", "]", ",", "\n", "v", "[", "1", "]", ",", "\n", "180", "+", "angle", ",", "\n", "facecolor", "=", "'none'", ",", "\n", "edgecolor", "=", "color", ",", "\n", "linestyle", "=", "'--'", "\n", ")", "\n", "ell", ".", "set_clip_box", "(", "ax", ".", "bbox", ")", "\n", "#ell.set_alpha(alpha)", "\n", "ax", ".", "add_artist", "(", "ell", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.batch_deconv_gmm.BatchDeconvGMM.fit": [[10, 94], ["torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "len", "float", "batch_deconv_gmm.BatchDeconvGMM._init_sum_stats", "float", "float", "range", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "batch_deconv_gmm.BatchDeconvGMM.train_ll_curve.append", "batch_deconv_gmm.BatchDeconvGMM._step_1", "log_prob.item", "batch_deconv_gmm.BatchDeconvGMM.score_batch", "batch_deconv_gmm.BatchDeconvGMM.val_ll_curve.append", "batch_deconv_gmm.BatchDeconvGMM._step_2", "abs", "print", "a.to", "a.to", "print", "print"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.online_deconv_gmm.OnlineDeconvGMM._init_sum_stats", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.batch_deconv_gmm.BatchDeconvGMM._step_1", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score_batch", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.batch_deconv_gmm.BatchDeconvGMM._step_2"], ["    ", "def", "fit", "(", "self", ",", "data", ",", "val_data", "=", "None", ",", "verbose", "=", "False", ",", "interval", "=", "1", ")", ":", "\n", "        ", "loader", "=", "data_utils", ".", "DataLoader", "(", "\n", "data", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "num_workers", "=", "4", ",", "\n", "shuffle", "=", "False", ",", "\n", "pin_memory", "=", "True", "\n", ")", "\n", "\n", "init_loader", "=", "data_utils", ".", "DataLoader", "(", "\n", "data", ",", "\n", "batch_size", "=", "self", ".", "k_means_factor", "*", "self", ".", "batch_size", ",", "\n", "num_workers", "=", "4", ",", "\n", "shuffle", "=", "True", ",", "\n", "pin_memory", "=", "True", "\n", ")", "\n", "\n", "n", "=", "len", "(", "data", ")", "\n", "\n", "n_inf", "=", "float", "(", "'-inf'", ")", "\n", "\n", "self", ".", "train_ll_curve", "=", "[", "]", "\n", "if", "val_data", ":", "\n", "            ", "self", ".", "val_ll_curve", "=", "[", "]", "\n", "\n", "", "self", ".", "_init_sum_stats", "(", "init_loader", ",", "n", ")", "\n", "\n", "prev_ll", "=", "float", "(", "'-inf'", ")", "\n", "max_val_ll", "=", "float", "(", "'-inf'", ")", "\n", "no_improvements", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "epochs", ")", ":", "\n", "            ", "train_ll", "=", "0", "\n", "\n", "sum_resps", "=", "torch", ".", "zeros", "(", "self", ".", "k", ",", "1", ")", "\n", "sum_cond_means", "=", "torch", ".", "zeros", "(", "self", ".", "k", ",", "self", ".", "d", ")", "\n", "sum_cond_covars", "=", "torch", ".", "zeros", "(", "self", ".", "k", ",", "self", ".", "d", ",", "self", ".", "d", ")", "\n", "\n", "\n", "# First pass for weights and means", "\n", "for", "d", "in", "loader", ":", "\n", "                ", "d", "=", "[", "a", ".", "to", "(", "self", ".", "device", ")", "for", "a", "in", "d", "]", "\n", "log_prob", ",", "(", "sum_r", ",", "sum_m", ")", "=", "self", ".", "_step_1", "(", "d", ")", "\n", "\n", "train_ll", "+=", "log_prob", ".", "item", "(", ")", "\n", "\n", "sum_resps", "+=", "sum_r", "\n", "sum_cond_means", "+=", "sum_m", "\n", "\n", "", "self", ".", "train_ll_curve", ".", "append", "(", "train_ll", ")", "\n", "\n", "if", "val_data", ":", "\n", "                ", "val_ll", "=", "self", ".", "score_batch", "(", "val_data", ")", "\n", "self", ".", "val_ll_curve", ".", "append", "(", "val_ll", ")", "\n", "\n", "", "new_weights", "=", "sum_resps", "/", "n", "\n", "new_means", "=", "sum_cond_means", "/", "sum_resps", "\n", "\n", "# Second pass for covariances", "\n", "for", "d", "in", "loader", ":", "\n", "                ", "d", "=", "[", "a", ".", "to", "(", "self", ".", "device", ")", "for", "a", "in", "d", "]", "\n", "sum_cond_covars", "+=", "self", ".", "_step_2", "(", "d", ",", "new_means", ")", "\n", "\n", "", "self", ".", "weights", "=", "new_weights", "\n", "self", ".", "means", "=", "new_means", "\n", "self", ".", "covars", "=", "(", "sum_cond_covars", "+", "2", "*", "self", ".", "w", ")", "/", "sum_resps", "[", ":", ",", ":", ",", "None", "]", "\n", "\n", "if", "verbose", "and", "i", "%", "interval", "==", "0", ":", "\n", "                    ", "if", "val_data", ":", "\n", "                        ", "print", "(", "'Epoch {}, Train LL: {}, Val LL: {}'", ".", "format", "(", "\n", "i", ",", "\n", "train_ll", ",", "\n", "val_ll", "\n", ")", ")", "\n", "", "else", ":", "\n", "                        ", "print", "(", "'Epoch {}, Train LL: {}'", ".", "format", "(", "\n", "i", ",", "train_ll", "\n", ")", ")", "\n", "\n", "", "", "if", "abs", "(", "train_ll", "-", "prev_ll", ")", "<", "self", ".", "tol", ":", "\n", "                ", "print", "(", "'Train LL converged within tolerance at {}'", ".", "format", "(", "\n", "train_ll", "\n", ")", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.batch_deconv_gmm.BatchDeconvGMM._step_1": [[95, 105], ["batch_deconv_gmm.BatchDeconvGMM._e_step", "resps.sum", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.gmm.GMM._e_step"], ["", "", "", "def", "_step_1", "(", "self", ",", "data", ")", ":", "\n", "        ", "log_prob", ",", "expectations", "=", "self", ".", "_e_step", "(", "data", ")", "\n", "log_resps", ",", "cond_means", ",", "_", "=", "expectations", "\n", "\n", "resps", "=", "torch", ".", "exp", "(", "log_resps", ")", "[", ":", ",", ":", ",", "None", "]", "\n", "\n", "sum_r", "=", "resps", ".", "sum", "(", "dim", "=", "0", ")", "\n", "sum_m", "=", "(", "resps", "*", "cond_means", ")", ".", "sum", "(", "dim", "=", "0", ")", "\n", "\n", "return", "log_prob", ",", "(", "sum_r", ",", "sum_m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.batch_deconv_gmm.BatchDeconvGMM._step_2": [[106, 120], ["batch_deconv_gmm.BatchDeconvGMM._e_step", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.gmm.GMM._e_step"], ["", "def", "_step_2", "(", "self", ",", "data", ",", "new_means", ")", ":", "\n", "        ", "_", ",", "expectations", "=", "self", ".", "_e_step", "(", "data", ")", "\n", "log_resps", ",", "cond_means", ",", "cond_covars", "=", "expectations", "\n", "\n", "resps", "=", "torch", ".", "exp", "(", "log_resps", ")", "[", ":", ",", ":", ",", "None", "]", "\n", "\n", "diffs", "=", "cond_means", "-", "new_means", "\n", "\n", "outer_p", "=", "diffs", "[", ":", ",", ":", ",", ":", ",", "None", "]", "*", "diffs", "[", ":", ",", ":", ",", "None", ",", ":", "]", "\n", "outer_p", "+=", "cond_covars", "\n", "\n", "return", "torch", ".", "sum", "(", "\n", "resps", "[", ":", ",", ":", ",", ":", ",", "None", "]", "*", "outer_p", ",", "\n", "dim", "=", "0", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.deconv_gmm.DeconvGMM.__init__": [[14, 20], ["base.BaseGMM.__init__", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.__init__"], ["def", "__init__", "(", "self", ",", "components", ",", "dimensions", ",", "epochs", "=", "1000", ",", "\n", "w", "=", "1e-6", ",", "tol", "=", "1e-6", ",", "device", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "components", ",", "dimensions", ",", "epochs", "=", "epochs", ",", "tol", "=", "tol", ",", "\n", "device", "=", "device", ")", "\n", "\n", "self", ".", "w", "=", "w", "*", "torch", ".", "eye", "(", "self", ".", "d", ",", "device", "=", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.deconv_gmm.DeconvGMM._init_expectations": [[21, 35], ["deconv_gmm.DeconvGMM._kmeans_init", "torch.log", "torch.log", "torch.log", "torch.log", "X[].repeat", "torch.eye().repeat", "torch.eye().repeat", "torch.eye().repeat", "torch.eye().repeat", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.base.BaseGMM._kmeans_init"], ["", "def", "_init_expectations", "(", "self", ",", "data", ")", ":", "\n", "\n", "        ", "X", "=", "data", "[", "0", "]", "\n", "n", "=", "X", ".", "shape", "[", "0", "]", "\n", "\n", "resps", "=", "self", ".", "_kmeans_init", "(", "X", ")", "\n", "log_resps", "=", "torch", ".", "log", "(", "resps", ")", "\n", "\n", "cond_means", "=", "X", "[", ":", ",", "None", ",", ":", "]", ".", "repeat", "(", "1", ",", "self", ".", "k", ",", "1", ")", "\n", "cond_covars", "=", "torch", ".", "eye", "(", "self", ".", "d", ",", "device", "=", "self", ".", "device", ")", ".", "repeat", "(", "\n", "n", ",", "self", ".", "k", ",", "1", ",", "1", "\n", ")", "\n", "\n", "return", "(", "log_resps", ",", "cond_means", ",", "cond_covars", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.deconv_gmm.DeconvGMM.predict": [[36, 38], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "deconv_gmm.DeconvGMM._e_step"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.gmm.GMM._e_step"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "return", "torch", ".", "exp", "(", "self", ".", "_e_step", "(", "X", ")", "[", "1", "]", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.deconv_gmm.DeconvGMM._e_step": [[39, 80], ["torch.cholesky_solve", "torch.cholesky_solve", "torch.cholesky_solve", "torch.cholesky_solve", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.cholesky.diagonal().log().sum", "torch.cholesky.diagonal().log().sum", "torch.log", "torch.log", "torch.log", "torch.log", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.cholesky", "torch.cholesky", "torch.cholesky", "torch.cholesky", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cholesky.diagonal().log", "torch.cholesky.diagonal().log", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "float", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.cholesky.diagonal", "torch.cholesky.diagonal", "math.log"], "methods", ["None"], ["", "def", "_e_step", "(", "self", ",", "data", ")", ":", "\n", "\n", "        ", "X", ",", "noise_covars", "=", "data", "\n", "\n", "T", "=", "self", ".", "covars", "[", "None", ",", ":", ",", ":", ",", ":", "]", "+", "noise_covars", "[", ":", ",", "None", ",", ":", ",", ":", "]", "\n", "try", ":", "\n", "            ", "T_chol", "=", "torch", ".", "cholesky", "(", "T", ")", "\n", "", "except", "RuntimeError", ":", "\n", "            ", "return", "torch", ".", "tensor", "(", "float", "(", "'-inf'", ")", ")", ",", "None", "\n", "", "T_inv", "=", "torch", ".", "cholesky_solve", "(", "\n", "torch", ".", "eye", "(", "self", ".", "d", ",", "device", "=", "self", ".", "device", ")", ",", "T_chol", "\n", ")", "\n", "\n", "diff", "=", "X", "[", ":", ",", "None", ",", ":", "]", "-", "self", ".", "means", "\n", "T_inv_diff", "=", "torch", ".", "matmul", "(", "T_inv", ",", "diff", "[", ":", ",", ":", ",", ":", ",", "None", "]", ")", "\n", "log_resps", "=", "-", "0.5", "*", "(", "\n", "torch", ".", "matmul", "(", "\n", "diff", "[", ":", ",", ":", ",", "None", ",", ":", "]", ",", "\n", "T_inv_diff", "\n", ")", "+", "self", ".", "d", "*", "math", ".", "log", "(", "2", "*", "math", ".", "pi", ")", "\n", ")", ".", "squeeze", "(", ")", "\n", "log_resps", "-=", "T_chol", ".", "diagonal", "(", "dim1", "=", "-", "2", ",", "dim2", "=", "-", "1", ")", ".", "log", "(", ")", ".", "sum", "(", "-", "1", ")", "\n", "\n", "log_resps", "+=", "torch", ".", "log", "(", "self", ".", "weights", "[", "None", ",", ":", ",", "0", "]", ")", "\n", "\n", "cond_means", "=", "self", ".", "means", "+", "torch", ".", "matmul", "(", "# n, j, d", "\n", "self", ".", "covars", "[", "None", ",", ":", ",", ":", ",", ":", "]", ",", "# 1, j, d, d", "\n", "T_inv_diff", "\n", ")", "[", ":", ",", ":", ",", ":", ",", "0", "]", "\n", "\n", "cond_covars", "=", "self", ".", "covars", "-", "torch", ".", "matmul", "(", "# n, j, d, d", "\n", "self", ".", "covars", ",", "# j, d, d", "\n", "torch", ".", "matmul", "(", "# n, j, d, d", "\n", "T_inv", ",", "# n, j, d, d", "\n", "self", ".", "covars", "# j, d, d", "\n", ")", "\n", ")", "\n", "\n", "log_prob", "=", "torch", ".", "logsumexp", "(", "log_resps", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "log_resps", "-=", "log_prob", "\n", "return", "torch", ".", "sum", "(", "log_prob", ")", ",", "(", "log_resps", ",", "cond_means", ",", "cond_covars", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.deconv_gmm.DeconvGMM._m_step": [[81, 110], ["resps.sum", "range", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose"], "methods", ["None"], ["", "def", "_m_step", "(", "self", ",", "data", ",", "expectations", ")", ":", "\n", "        ", "log_resps", ",", "cond_means", ",", "cond_covars", "=", "expectations", "\n", "n", "=", "cond_means", ".", "shape", "[", "0", "]", "\n", "resps", "=", "torch", ".", "exp", "(", "log_resps", ")", "[", ":", ",", ":", ",", "None", "]", "# n, j, 1", "\n", "weights", "=", "resps", ".", "sum", "(", "dim", "=", "0", ")", "# j, 1", "\n", "\n", "self", ".", "means", "=", "(", "\n", "(", "resps", "*", "cond_means", ")", ".", "sum", "(", "dim", "=", "0", ")", "\n", ")", "/", "(", "weights", ")", "# j, d", "\n", "\n", "for", "j", "in", "range", "(", "self", ".", "k", ")", ":", "\n", "            ", "diffs", "=", "self", ".", "means", "-", "cond_means", "# n, j, d", "\n", "outer_p", "=", "torch", ".", "matmul", "(", "# n, d, d", "\n", "torch", ".", "transpose", "(", "diffs", "[", ":", ",", "j", ",", "None", ",", ":", "]", ",", "1", ",", "2", ")", ",", "# n, d, 1", "\n", "diffs", "[", ":", ",", "j", ",", "None", ",", ":", "]", "# n, 1, d", "\n", ")", "\n", "self", ".", "covars", "[", "j", ",", ":", ",", ":", "]", "=", "(", "\n", "torch", ".", "sum", "(", "# d, d", "\n", "resps", "[", ":", ",", "j", ",", ":", ",", "None", "]", "*", "(", "# n, 1, 1", "\n", "cond_covars", "[", ":", ",", "j", ",", ":", ",", ":", "]", "+", "# n, d, d", "\n", "outer_p", "# n, d, d", "\n", ")", ",", "\n", "dim", "=", "0", "\n", ")", "\n", ")", "\n", "self", ".", "covars", "[", "j", ",", ":", ",", ":", "]", "+=", "2", "*", "self", ".", "w", "\n", "self", ".", "covars", "[", "j", ",", ":", ",", ":", "]", "/=", "weights", "[", "j", "]", "\n", "\n", "", "self", ".", "weights", "=", "weights", "/", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.deconv_gmm.DeconvGMM.score": [[111, 114], ["None"], "methods", ["None"], ["", "def", "score", "(", "self", ",", "data", ")", ":", "\n", "        ", "log_prob", ",", "_", "=", "self", ".", "_e_step", "\n", "return", "log_prob", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_deconv_gmm_tim.SGDDeconvGMMModule.forward": [[14, 29], ["sgd_deconv_gmm_tim.SGDDeconvGMMModule.soft_max", "mvn().log_prob", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "mvn"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob"], ["    ", "def", "forward", "(", "self", ",", "data", ")", ":", "\n", "        ", "x", ",", "noise_covars", "=", "data", "\n", "\n", "weights", "=", "self", ".", "soft_max", "(", "self", ".", "soft_weights", ")", "\n", "\n", "T", "=", "self", ".", "covars", "[", "None", ",", ":", ",", ":", ",", ":", "]", "+", "noise_covars", "[", ":", ",", "None", ",", ":", ",", ":", "]", "\n", "\n", "log_resp", "=", "mvn", "(", "loc", "=", "self", ".", "means", ",", "covariance_matrix", "=", "T", ")", ".", "log_prob", "(", "\n", "x", "[", ":", ",", "None", ",", ":", "]", "\n", ")", "\n", "log_resp", "+=", "torch", ".", "log", "(", "weights", ")", "\n", "\n", "log_prob", "=", "torch", ".", "logsumexp", "(", "log_resp", ",", "dim", "=", "1", ")", "\n", "\n", "return", "log_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_deconv_gmm_tim.SGDDeconvDataset.__init__": [[33, 36], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "X", ",", "noise_covars", ")", ":", "\n", "        ", "self", ".", "X", "=", "X", "\n", "self", ".", "noise_covars", "=", "noise_covars", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_deconv_gmm_tim.SGDDeconvDataset.__len__": [[37, 39], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "X", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_deconv_gmm_tim.SGDDeconvDataset.__getitem__": [[40, 42], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "(", "self", ".", "X", "[", "i", ",", ":", "]", ",", "self", ".", "noise_covars", "[", "i", ",", ":", ",", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_deconv_gmm_tim.SGDDeconvGMM.__init__": [[46, 56], ["sgd_deconv_gmm_tim.SGDDeconvGMMModule", "sgd_gmm_tim.BaseSGDGMM.__init__"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "components", ",", "dimensions", ",", "epochs", "=", "10000", ",", "lr", "=", "1e-3", ",", "\n", "batch_size", "=", "64", ",", "tol", "=", "1e-6", ",", "w", "=", "1e-3", ",", "\n", "k_means_factor", "=", "100", ",", "k_means_iters", "=", "10", ",", "lr_step", "=", "5", ",", "\n", "lr_gamma", "=", "0.1", ",", "device", "=", "None", ")", ":", "\n", "        ", "self", ".", "module", "=", "SGDDeconvGMMModule", "(", "components", ",", "dimensions", ",", "w", ",", "device", ")", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "components", ",", "dimensions", ",", "epochs", "=", "epochs", ",", "lr", "=", "lr", ",", "\n", "batch_size", "=", "batch_size", ",", "w", "=", "w", ",", "tol", "=", "tol", ",", "\n", "k_means_factor", "=", "k_means_factor", ",", "k_means_iters", "=", "k_means_iters", ",", "\n", "lr_step", "=", "lr_step", ",", "lr_gamma", "=", "lr_gamma", ",", "device", "=", "device", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_deconv_gmm_tim.SGDDeconvGMM._sample_prior": [[58, 68], ["sgd_deconv_gmm_tim.SGDDeconvGMM.module.soft_max", "torch.Categorical().sample", "torch.Categorical().sample", "torch.Categorical().sample", "torch.MultivariateNormal().sample", "torch.MultivariateNormal().sample", "torch.MultivariateNormal().sample", "torch.Categorical", "torch.Categorical", "torch.Categorical", "torch.MultivariateNormal", "torch.MultivariateNormal", "torch.MultivariateNormal", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample"], ["", "def", "_sample_prior", "(", "self", ",", "num_samples", ",", "context", "=", "None", ")", ":", "\n", "\n", "        ", "weights", "=", "self", ".", "module", ".", "soft_max", "(", "self", ".", "module", ".", "soft_weights", ")", "\n", "idx", "=", "dist", ".", "Categorical", "(", "probs", "=", "weights", ")", ".", "sample", "(", "[", "num_samples", "]", ")", "\n", "X", "=", "dist", ".", "MultivariateNormal", "(", "\n", "loc", "=", "self", ".", "module", ".", "means", ",", "scale_tril", "=", "self", ".", "module", ".", "L", ")", ".", "sample", "(", "[", "num_samples", "]", ")", "\n", "\n", "return", "X", "[", "\n", "torch", ".", "arange", "(", "num_samples", ",", "device", "=", "self", ".", "device", ")", ",", "\n", "idx", ",", "\n", ":", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_deconv_gmm_tim.SGDDeconvGMM.sample_prior": [[71, 79], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.sampling.minibatch_sample"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.utils.sampling.minibatch_sample"], ["", "def", "sample_prior", "(", "self", ",", "num_samples", ",", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "return", "minibatch_sample", "(", "\n", "self", ".", "_sample_prior", ",", "\n", "num_samples", ",", "\n", "self", ".", "d", ",", "\n", "self", ".", "batch_size", ",", "\n", "device", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_deconv_gmm_tim.SGDDeconvGMM.log_prob_prior": [[81, 97], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "sgd_deconv_gmm_tim.SGDDeconvGMM.module.soft_max", "print", "print", "print", "print", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "mvn", "mvn.log_prob", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob"], ["", "", "def", "log_prob_prior", "(", "self", ",", "x", ",", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "weights", "=", "self", ".", "module", ".", "soft_max", "(", "self", ".", "module", ".", "soft_weights", ")", "\n", "means", "=", "self", ".", "module", ".", "means", "\n", "scale_tril", "=", "self", ".", "module", ".", "L", "\n", "print", "(", "weights", ".", "shape", ")", "\n", "print", "(", "means", ".", "shape", ")", "\n", "print", "(", "scale_tril", ".", "shape", ")", "\n", "print", "(", "x", ".", "shape", ")", "\n", "\n", "logpdfs", "=", "torch", ".", "zeros", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "self", ".", "k", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "k", ")", ":", "\n", "                ", "disti", "=", "mvn", "(", "loc", "=", "means", "[", "i", "]", ",", "scale_tril", "=", "scale_tril", "[", "i", "]", ")", "\n", "logpdfs", "[", ":", ",", "i", "]", "=", "disti", ".", "log_prob", "(", "x", ")", "+", "torch", ".", "log", "(", "weights", "[", "i", "]", ")", "\n", "\n", "", "return", "torch", ".", "logsumexp", "(", "logpdfs", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_deconv_gmm_tim.SGDDeconvGMM._sample_posterior": [[98, 132], ["torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.cholesky", "torch.cholesky", "torch.cholesky", "torch.cholesky", "torch.cholesky", "torch.cholesky", "torch.cholesky", "torch.cholesky", "torch.cholesky", "torch.cholesky_solve", "torch.cholesky_solve", "torch.cholesky_solve", "torch.cholesky_solve", "torch.cholesky_solve", "torch.cholesky_solve", "torch.cholesky_solve", "torch.cholesky_solve", "torch.cholesky_solve", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.Categorical().sample", "torch.Categorical().sample", "torch.Categorical().sample", "torch.MultivariateNormal().sample", "torch.MultivariateNormal().sample", "torch.MultivariateNormal().sample", "[].squeeze", "sgd_deconv_gmm_tim.SGDDeconvGMM.module.soft_max", "torch.MultivariateNormal().log_prob", "torch.MultivariateNormal().log_prob", "torch.MultivariateNormal().log_prob", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.Categorical", "torch.Categorical", "torch.Categorical", "torch.MultivariateNormal", "torch.MultivariateNormal", "torch.MultivariateNormal", "torch.MultivariateNormal", "torch.MultivariateNormal", "torch.MultivariateNormal", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.MultivariateNormal().sample.transpose", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "len"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob"], ["", "", "def", "_sample_posterior", "(", "self", ",", "x", ",", "num_samples", ",", "context", "=", "None", ")", ":", "\n", "        ", "log_weights", "=", "torch", ".", "log", "(", "self", ".", "module", ".", "soft_max", "(", "self", ".", "module", ".", "soft_weights", ")", ")", "\n", "T", "=", "self", ".", "module", ".", "covars", "[", "None", ",", ":", ",", ":", ",", ":", "]", "+", "x", "[", "1", "]", "[", ":", ",", "None", ",", ":", ",", ":", "]", "\n", "\n", "p_weights", "=", "log_weights", "+", "dist", ".", "MultivariateNormal", "(", "\n", "loc", "=", "self", ".", "module", ".", "means", ",", "covariance_matrix", "=", "T", "\n", ")", ".", "log_prob", "(", "x", "[", "0", "]", "[", ":", ",", "None", ",", ":", "]", ")", "\n", "p_weights", "-=", "torch", ".", "logsumexp", "(", "p_weights", ",", "axis", "=", "1", ")", "[", ":", ",", "None", "]", "\n", "\n", "L_t", "=", "torch", ".", "cholesky", "(", "T", ")", "\n", "T_inv", "=", "torch", ".", "cholesky_solve", "(", "\n", "torch", ".", "eye", "(", "self", ".", "d", ",", "device", "=", "self", ".", "device", ")", ",", "L_t", ")", "\n", "\n", "diff", "=", "x", "[", "0", "]", "[", ":", ",", "None", ",", ":", "]", "-", "self", ".", "module", ".", "means", "\n", "T_prod", "=", "torch", ".", "matmul", "(", "T_inv", ",", "diff", "[", ":", ",", ":", ",", ":", ",", "None", "]", ")", "\n", "p_means", "=", "self", ".", "module", ".", "means", "+", "torch", ".", "matmul", "(", "\n", "self", ".", "module", ".", "covars", ",", "\n", "T_prod", "\n", ")", ".", "squeeze", "(", ")", "\n", "\n", "p_covars", "=", "self", ".", "module", ".", "covars", "-", "torch", ".", "matmul", "(", "\n", "self", ".", "module", ".", "covars", ",", "\n", "torch", ".", "matmul", "(", "T_inv", ",", "self", ".", "module", ".", "covars", ")", "\n", ")", "\n", "\n", "idx", "=", "dist", ".", "Categorical", "(", "logits", "=", "p_weights", ")", ".", "sample", "(", "[", "num_samples", "]", ")", "\n", "samples", "=", "dist", ".", "MultivariateNormal", "(", "\n", "loc", "=", "p_means", ",", "covariance_matrix", "=", "p_covars", ")", ".", "sample", "(", "[", "num_samples", "]", ")", "\n", "\n", "return", "samples", ".", "transpose", "(", "0", ",", "1", ")", "[", "\n", "torch", ".", "arange", "(", "len", "(", "x", ")", ",", "device", "=", "self", ".", "device", ")", "[", ":", ",", "None", ",", "None", ",", "None", "]", ",", "\n", "torch", ".", "arange", "(", "num_samples", ",", "device", "=", "self", ".", "device", ")", "[", "None", ",", ":", ",", "None", ",", "None", "]", ",", "\n", "idx", ".", "T", "[", ":", ",", ":", ",", "None", ",", "None", "]", ",", "\n", "torch", ".", "arange", "(", "self", ".", "d", ",", "device", "=", "self", ".", "device", ")", "[", "None", ",", "None", ",", "None", ",", ":", "]", "\n", "]", ".", "squeeze", "(", ")", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_deconv_gmm_tim.SGDDeconvGMM.sample_posterior": [[134, 143], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.sampling.minibatch_sample"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.utils.sampling.minibatch_sample"], ["", "def", "sample_posterior", "(", "self", ",", "x", ",", "num_samples", ",", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "return", "minibatch_sample", "(", "\n", "self", ".", "_sample_posterior", ",", "\n", "num_samples", ",", "\n", "self", ".", "d", ",", "\n", "self", ".", "batch_size", ",", "\n", "device", ",", "\n", "x", "=", "x", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_gmm.SGDGMMModule.__init__": [[16, 37], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.tril_indices", "torch.tril_indices", "torch.tril_indices", "torch.tril_indices", "torch.tril_indices", "torch.tril_indices", "torch.tril_indices", "torch.tril_indices", "torch.tril_indices", "torch.tril_indices", "torch.tril_indices", "torch.tril_indices", "torch.tril_indices", "torch.tril_indices", "torch.tril_indices", "torch.tril_indices", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "components", ",", "dimensions", ",", "w", ",", "device", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "k", "=", "components", "\n", "self", ".", "d", "=", "dimensions", "\n", "self", ".", "device", "=", "device", "\n", "\n", "self", ".", "soft_weights", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "self", ".", "k", ")", ")", "\n", "self", ".", "soft_max", "=", "torch", ".", "nn", ".", "Softmax", "(", "dim", "=", "0", ")", "\n", "\n", "self", ".", "means", "=", "nn", ".", "Parameter", "(", "torch", ".", "rand", "(", "self", ".", "k", ",", "self", ".", "d", ")", ")", "\n", "self", ".", "l_diag", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "self", ".", "k", ",", "self", ".", "d", ")", ")", "\n", "\n", "self", ".", "l_lower", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "self", ".", "k", ",", "self", ".", "d", "*", "(", "self", ".", "d", "-", "1", ")", "//", "2", ")", "\n", ")", "\n", "\n", "self", ".", "d_idx", "=", "torch", ".", "eye", "(", "self", ".", "d", ",", "device", "=", "self", ".", "device", ")", ".", "to", "(", "torch", ".", "bool", ")", "\n", "self", ".", "l_idx", "=", "torch", ".", "tril_indices", "(", "self", ".", "d", ",", "self", ".", "d", ",", "-", "1", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "self", ".", "w", "=", "w", "*", "torch", ".", "eye", "(", "self", ".", "d", ",", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_gmm.SGDGMMModule.L": [[38, 44], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "@", "property", "\n", "def", "L", "(", "self", ")", ":", "\n", "        ", "L", "=", "torch", ".", "zeros", "(", "self", ".", "k", ",", "self", ".", "d", ",", "self", ".", "d", ",", "device", "=", "self", ".", "device", ")", "\n", "L", "[", ":", ",", "self", ".", "d_idx", "]", "=", "torch", ".", "exp", "(", "self", ".", "l_diag", ")", "\n", "L", "[", ":", ",", "self", ".", "l_idx", "[", "0", "]", ",", "self", ".", "l_idx", "[", "1", "]", "]", "=", "self", ".", "l_lower", "\n", "return", "L", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_gmm.SGDGMMModule.covars": [[45, 48], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose"], "methods", ["None"], ["", "@", "property", "\n", "def", "covars", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "matmul", "(", "self", ".", "L", ",", "torch", ".", "transpose", "(", "self", ".", "L", ",", "-", "2", ",", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_gmm.SGDGMMModule.forward": [[49, 63], ["sgd_gmm.SGDGMMModule.soft_max", "mvn().log_prob", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "mvn"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob"], ["", "def", "forward", "(", "self", ",", "data", ")", ":", "\n", "\n", "        ", "x", "=", "data", "[", "0", "]", "\n", "\n", "weights", "=", "self", ".", "soft_max", "(", "self", ".", "soft_weights", ")", "\n", "\n", "log_resp", "=", "mvn", "(", "loc", "=", "self", ".", "means", ",", "scale_tril", "=", "self", ".", "L", ")", ".", "log_prob", "(", "\n", "x", "[", ":", ",", "None", ",", ":", "]", "\n", ")", "\n", "log_resp", "+=", "torch", ".", "log", "(", "weights", ")", "\n", "\n", "log_prob", "=", "torch", ".", "logsumexp", "(", "log_resp", ",", "dim", "=", "1", ")", "\n", "\n", "return", "log_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_gmm.SGDGMMModule.log_prob": [[64, 66], ["sgd_gmm.SGDGMMModule.forward"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.vae.VariationalAutoencoderToyNoise.forward"], ["", "def", "log_prob", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "self", ".", "forward", "(", "[", "data", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_gmm.BaseSGDGMM.__init__": [[70, 100], ["sgd_gmm.BaseSGDGMM.module.to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "sgd_gmm.BaseSGDGMM.module.parameters"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "components", ",", "dimensions", ",", "epochs", "=", "10000", ",", "lr", "=", "1e-3", ",", "\n", "batch_size", "=", "64", ",", "tol", "=", "1e-6", ",", "max_no_improvement", "=", "20", ",", "\n", "k_means_factor", "=", "100", ",", "w", "=", "1e-6", ",", "k_means_iters", "=", "10", ",", "lr_step", "=", "5", ",", "\n", "lr_gamma", "=", "0.1", ",", "device", "=", "None", ")", ":", "\n", "        ", "self", ".", "k", "=", "components", "\n", "self", ".", "d", "=", "dimensions", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "tol", "=", "1e-6", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "w", "=", "w", "\n", "self", ".", "k_means_factor", "=", "k_means_factor", "\n", "self", ".", "k_means_iters", "=", "k_means_iters", "\n", "self", ".", "max_no_improvement", "=", "max_no_improvement", "\n", "\n", "if", "not", "device", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "device", "=", "device", "\n", "\n", "", "self", ".", "module", ".", "to", "(", "device", ")", "\n", "\n", "self", ".", "optimiser", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "params", "=", "self", ".", "module", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "lr", "\n", ")", "\n", "self", ".", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "\n", "self", ".", "optimiser", ",", "\n", "milestones", "=", "[", "lr_step", ",", "lr_step", "+", "5", "]", ",", "\n", "gamma", "=", "lr_gamma", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_gmm.BaseSGDGMM.means": [[102, 105], ["sgd_gmm.BaseSGDGMM.module.means.detach"], "methods", ["None"], ["", "@", "property", "\n", "def", "means", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "module", ".", "means", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_gmm.BaseSGDGMM.covars": [[106, 109], ["sgd_gmm.BaseSGDGMM.module.covars.detach"], "methods", ["None"], ["", "@", "property", "\n", "def", "covars", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "module", ".", "covars", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_gmm.BaseSGDGMM.reg_loss": [[110, 113], ["l.sum", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal"], "methods", ["None"], ["", "def", "reg_loss", "(", "self", ",", "n", ",", "n_total", ")", ":", "\n", "        ", "l", "=", "(", "n", "/", "n_total", ")", "*", "self", ".", "w", "/", "torch", ".", "diagonal", "(", "self", ".", "module", ".", "covars", ",", "dim1", "=", "-", "1", ",", "dim2", "=", "-", "2", ")", "\n", "return", "l", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_gmm.BaseSGDGMM.fit": [[114, 224], ["len", "sgd_gmm.BaseSGDGMM.init_params", "float", "range", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "copy.deepcopy", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "float", "enumerate", "len", "sgd_gmm.BaseSGDGMM.train_loss_curve.append", "sgd_gmm.BaseSGDGMM.scheduler.step", "sgd_gmm.BaseSGDGMM.optimiser.zero_grad", "sgd_gmm.BaseSGDGMM.module", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "sgd_gmm.BaseSGDGMM.reg_loss", "loss.backward", "sgd_gmm.BaseSGDGMM.optimiser.step", "sgd_gmm.BaseSGDGMM.val_loss_curve.append", "abs", "print", "torch.RandomSampler", "torch.RandomSampler", "torch.RandomSampler", "torch.RandomSampler", "torch.RandomSampler", "torch.RandomSampler", "torch.RandomSampler", "torch.RandomSampler", "a.to", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "sgd_gmm.BaseSGDGMM.score_batch", "len", "print", "print", "print", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_gmm_tim.BaseSGDGMM.init_params", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_gmm_tim.BaseSGDGMM.reg_loss", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score_batch"], ["", "def", "fit", "(", "self", ",", "data", ",", "val_data", "=", "None", ",", "verbose", "=", "False", ",", "interval", "=", "1", ")", ":", "\n", "\n", "        ", "n_total", "=", "len", "(", "data", ")", "\n", "\n", "if", "self", ".", "batch_size", "is", "None", ":", "\n", "            ", "loader", "=", "data_utils", ".", "DataLoader", "(", "\n", "data", ",", "\n", "batch_size", "=", "None", ",", "\n", "# num_workers=8,", "\n", "sampler", "=", "data_utils", ".", "RandomSampler", "(", "data", ")", ",", "\n", "# pin_memory=True", "\n", ")", "\n", "init_data", "=", "copy", ".", "deepcopy", "(", "data", ")", "\n", "init_data", ".", "batch_size", "*=", "16", "\n", "\n", "init_loader", "=", "data_utils", ".", "DataLoader", "(", "\n", "init_data", ",", "\n", "batch_size", "=", "None", ",", "\n", "# num_workers=8,", "\n", "sampler", "=", "data_utils", ".", "RandomSampler", "(", "init_data", ")", ",", "\n", "# pin_memory=True", "\n", ")", "\n", "", "else", ":", "\n", "            ", "loader", "=", "data_utils", ".", "DataLoader", "(", "\n", "data", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "# num_workers=8,", "\n", "shuffle", "=", "True", ",", "\n", "# pin_memory=True", "\n", ")", "\n", "\n", "init_loader", "=", "data_utils", ".", "DataLoader", "(", "\n", "data", ",", "\n", "batch_size", "=", "16", "*", "self", ".", "batch_size", ",", "\n", "# num_workers=8,", "\n", "shuffle", "=", "True", ",", "\n", "# pin_memory=True", "\n", ")", "\n", "\n", "", "self", ".", "init_params", "(", "loader", ")", "\n", "\n", "self", ".", "train_loss_curve", "=", "[", "]", "\n", "\n", "if", "val_data", ":", "\n", "            ", "self", ".", "val_loss_curve", "=", "[", "]", "\n", "\n", "", "prev_loss", "=", "float", "(", "'-inf'", ")", "\n", "if", "val_data", ":", "\n", "            ", "best_val_loss", "=", "float", "(", "'-inf'", ")", "\n", "no_improvement_epochs", "=", "0", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "epochs", ")", ":", "\n", "            ", "train_loss", "=", "0.0", "\n", "for", "j", ",", "d", "in", "enumerate", "(", "loader", ")", ":", "\n", "\n", "                ", "d", "=", "[", "a", ".", "to", "(", "self", ".", "device", ")", "for", "a", "in", "d", "]", "\n", "\n", "self", ".", "optimiser", ".", "zero_grad", "(", ")", "\n", "\n", "log_prob", "=", "self", ".", "module", "(", "d", ")", "\n", "loss", "=", "-", "1", "*", "torch", ".", "mean", "(", "log_prob", ")", "\n", "\n", "train_loss", "+=", "torch", ".", "sum", "(", "log_prob", ")", ".", "item", "(", ")", "\n", "\n", "n", "=", "d", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "loss", "+=", "self", ".", "reg_loss", "(", "n", ",", "n_total", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimiser", ".", "step", "(", ")", "\n", "", "train_loss", "/=", "len", "(", "data", ")", "\n", "\n", "self", ".", "train_loss_curve", ".", "append", "(", "train_loss", ")", "\n", "\n", "if", "val_data", ":", "\n", "                ", "val_loss", "=", "self", ".", "score_batch", "(", "val_data", ")", "/", "len", "(", "val_data", ")", "\n", "self", ".", "val_loss_curve", ".", "append", "(", "val_loss", ")", "\n", "\n", "", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "\n", "if", "verbose", "and", "i", "%", "interval", "==", "0", ":", "\n", "                ", "if", "val_data", ":", "\n", "                    ", "print", "(", "'Epoch {}, Train Loss: {}, Val Loss :{}'", ".", "format", "(", "\n", "i", ",", "\n", "train_loss", ",", "\n", "val_loss", "\n", ")", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "'Epoch {}, Loss: {}'", ".", "format", "(", "i", ",", "train_loss", ")", ")", "\n", "\n", "", "", "if", "val_data", ":", "\n", "                ", "if", "val_loss", ">", "best_val_loss", ":", "\n", "                    ", "no_improvement_epochs", "=", "0", "\n", "best_val_loss", "=", "val_loss", "\n", "", "else", ":", "\n", "                    ", "no_improvement_epochs", "+=", "1", "\n", "\n", "", "if", "no_improvement_epochs", ">", "self", ".", "max_no_improvement", ":", "\n", "                    ", "print", "(", "'No improvement in val loss for {} epochs. Early Stopping at {}'", ".", "format", "(", "\n", "self", ".", "max_no_improvement", ",", "\n", "val_loss", "\n", ")", ")", "\n", "break", "\n", "\n", "", "", "if", "abs", "(", "train_loss", "-", "prev_loss", ")", "<", "self", ".", "tol", ":", "\n", "                ", "print", "(", "'Training loss converged within tolerance at {}'", ".", "format", "(", "\n", "train_loss", "\n", ")", ")", "\n", "break", "\n", "\n", "", "prev_loss", "=", "train_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_gmm.BaseSGDGMM.score": [[225, 227], ["sgd_gmm.BaseSGDGMM.module"], "methods", ["None"], ["", "", "def", "score", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "self", ".", "module", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_gmm.BaseSGDGMM.score_batch": [[228, 243], ["torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "a.to", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "sgd_gmm.BaseSGDGMM.score"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score"], ["", "def", "score_batch", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "loader", "=", "data_utils", ".", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "# num_workers=4,", "\n", "# pin_memory=True", "\n", ")", "\n", "\n", "log_prob", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "j", ",", "d", "in", "enumerate", "(", "loader", ")", ":", "\n", "                ", "d", "=", "[", "a", ".", "to", "(", "self", ".", "device", ")", "for", "a", "in", "d", "]", "\n", "log_prob", "+=", "torch", ".", "sum", "(", "self", ".", "score", "(", "d", ")", ")", ".", "item", "(", ")", "\n", "\n", "", "", "return", "log_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_gmm.BaseSGDGMM._sample": [[244, 253], ["sgd_gmm.BaseSGDGMM.module.soft_max", "torch.Categorical().sample", "torch.Categorical().sample", "torch.Categorical().sample", "torch.Categorical().sample", "torch.MultivariateNormal().sample", "torch.MultivariateNormal().sample", "torch.MultivariateNormal().sample", "torch.MultivariateNormal().sample", "torch.Categorical", "torch.Categorical", "torch.Categorical", "torch.Categorical", "torch.MultivariateNormal", "torch.MultivariateNormal", "torch.MultivariateNormal", "torch.MultivariateNormal", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample"], ["", "def", "_sample", "(", "self", ",", "num_samples", ")", ":", "\n", "\n", "        ", "weights", "=", "self", ".", "module", ".", "soft_max", "(", "self", ".", "module", ".", "soft_weights", ")", "\n", "idx", "=", "dist", ".", "Categorical", "(", "probs", "=", "weights", ")", ".", "sample", "(", "[", "num_samples", "]", ")", "\n", "X", "=", "dist", ".", "MultivariateNormal", "(", "loc", "=", "self", ".", "module", ".", "means", ",", "scale_tril", "=", "self", ".", "module", ".", "L", ")", ".", "sample", "(", "[", "num_samples", "]", ")", "\n", "\n", "return", "X", "[", "\n", "torch", ".", "arange", "(", "num_samples", ",", "device", "=", "self", ".", "device", ")", ",", "\n", "idx", ",", "\n", ":", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_gmm.BaseSGDGMM.init_params": [[256, 262], ["util.minibatch_k_means", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "counts.sum"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.util.minibatch_k_means"], ["", "def", "init_params", "(", "self", ",", "loader", ")", ":", "\n", "        ", "counts", ",", "centroids", "=", "minibatch_k_means", "(", "loader", ",", "self", ".", "k", ",", "max_iters", "=", "self", ".", "k_means_iters", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "module", ".", "soft_weights", ".", "data", "=", "torch", ".", "log", "(", "counts", "/", "counts", ".", "sum", "(", ")", ")", "\n", "self", ".", "module", ".", "means", ".", "data", "=", "centroids", "\n", "self", ".", "module", ".", "l_diag", ".", "data", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "self", ".", "k", ",", "self", ".", "d", ",", "device", "=", "self", ".", "device", ")", ")", "\n", "self", ".", "module", ".", "l_lower", ".", "data", "=", "torch", ".", "zeros", "(", "self", ".", "k", ",", "self", ".", "d", "*", "(", "self", ".", "d", "-", "1", ")", "//", "2", ",", "device", "=", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_gmm.SGDGMM.__init__": [[266, 272], ["sgd_gmm.SGDGMMModule", "sgd_gmm.BaseSGDGMM.__init__"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "components", ",", "dimensions", ",", "epochs", "=", "10000", ",", "lr", "=", "1e-3", ",", "\n", "batch_size", "=", "64", ",", "tol", "=", "1e-6", ",", "w", "=", "1e-3", ",", "device", "=", "None", ")", ":", "\n", "        ", "self", ".", "module", "=", "SGDGMMModule", "(", "components", ",", "dimensions", ",", "w", ",", "device", ")", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "components", ",", "dimensions", ",", "epochs", "=", "epochs", ",", "lr", "=", "lr", ",", "\n", "batch_size", "=", "batch_size", ",", "w", "=", "w", ",", "tol", "=", "tol", ",", "device", "=", "device", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.data.DeconvDataset.__init__": [[9, 12], ["None"], "methods", ["None"], ["qn", "=", "(", "0.5", "*", "np", ".", "random", ".", "randn", "(", "2", "*", "N", ",", "K", ",", "D", ",", "D", ")", ")", "\n", "noise_covars", "=", "np", ".", "matmul", "(", "qn", ".", "swapaxes", "(", "2", ",", "3", ")", ",", "qn", ")", "+", "1e-3", "*", "np", ".", "eye", "(", "D", ")", "\n", "\n", "X", "=", "np", ".", "empty", "(", "(", "2", "*", "N", ",", "K", ",", "D", ")", ")", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.data.DeconvDataset.__len__": [[13, 15], ["None"], "methods", ["None"], ["\n", "for", "i", "in", "range", "(", "K", ")", ":", "\n", "        ", "X", "[", ":", ",", "i", ",", ":", "]", "=", "np", ".", "random", ".", "multivariate_normal", "(", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.data.DeconvDataset.__getitem__": [[16, 18], ["None"], "methods", ["None"], ["mean", "=", "means", "[", "i", ",", ":", "]", ",", "\n", "cov", "=", "covars", "[", "i", ",", ":", ",", ":", "]", ",", "\n", "size", "=", "2", "*", "N", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.data.H5DeconvDataset.__init__": [[22, 29], ["None"], "methods", ["None"], ["mean", "=", "np", ".", "zeros", "(", "D", ")", ",", "\n", "cov", "=", "noise_covars", "[", "j", ",", "i", ",", ":", ",", ":", "]", "\n", ")", "\n", "\n", "", "", "p", "=", "np", ".", "random", ".", "permutation", "(", "2", "*", "N", ")", "\n", "\n", "X_train", "=", "X", "[", "p", ",", ":", "]", "[", ":", "N", "]", "\n", "X_test", "=", "X", "[", "p", ",", ":", "]", "[", "N", ":", "]", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.data.H5DeconvDataset.__len__": [[30, 36], ["h5py.File"], "methods", ["None"], ["\n", "nc_train", "=", "noise_covars", "[", "p", ",", ":", ",", ":", "]", "[", ":", "N", "]", "\n", "nc_test", "=", "noise_covars", "[", "p", ",", ":", ",", ":", "]", "[", "N", ":", "]", "\n", "\n", "data", "=", "(", "X_train", ",", "nc_train", ",", "X_test", ",", "nc_test", ")", "\n", "params", "=", "(", "means", ",", "covars", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.data.H5DeconvDataset.__getitem__": [[37, 47], ["h5py.File"], "methods", ["None"], ["return", "data", ",", "params", "\n", "", ""]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_deconv_gmm.SGDDeconvGMMModule.forward": [[14, 29], ["sgd_deconv_gmm.SGDDeconvGMMModule.soft_max", "mvn().log_prob", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "mvn"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob"], ["    ", "def", "forward", "(", "self", ",", "data", ")", ":", "\n", "        ", "x", ",", "noise_covars", "=", "data", "\n", "\n", "weights", "=", "self", ".", "soft_max", "(", "self", ".", "soft_weights", ")", "\n", "\n", "T", "=", "self", ".", "covars", "[", "None", ",", ":", ",", ":", ",", ":", "]", "+", "noise_covars", "[", ":", ",", "None", ",", ":", ",", ":", "]", "\n", "\n", "log_resp", "=", "mvn", "(", "loc", "=", "self", ".", "means", ",", "covariance_matrix", "=", "T", ")", ".", "log_prob", "(", "\n", "x", "[", ":", ",", "None", ",", ":", "]", "\n", ")", "\n", "log_resp", "+=", "torch", ".", "log", "(", "weights", ")", "\n", "\n", "log_prob", "=", "torch", ".", "logsumexp", "(", "log_resp", ",", "dim", "=", "1", ")", "\n", "\n", "return", "log_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_deconv_gmm.SGDDeconvDataset.__init__": [[33, 36], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "X", ",", "noise_covars", ")", ":", "\n", "        ", "self", ".", "X", "=", "X", "\n", "self", ".", "noise_covars", "=", "noise_covars", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_deconv_gmm.SGDDeconvDataset.__len__": [[37, 39], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "X", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_deconv_gmm.SGDDeconvDataset.__getitem__": [[40, 42], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "(", "self", ".", "X", "[", "i", ",", ":", "]", ",", "self", ".", "noise_covars", "[", "i", ",", ":", ",", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_deconv_gmm.SGDDeconvGMM.__init__": [[46, 56], ["sgd_deconv_gmm.SGDDeconvGMMModule", "sgd_gmm.BaseSGDGMM.__init__"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "components", ",", "dimensions", ",", "epochs", "=", "10000", ",", "lr", "=", "1e-3", ",", "\n", "batch_size", "=", "64", ",", "tol", "=", "1e-6", ",", "w", "=", "1e-3", ",", "\n", "k_means_factor", "=", "100", ",", "k_means_iters", "=", "10", ",", "lr_step", "=", "5", ",", "\n", "lr_gamma", "=", "0.1", ",", "device", "=", "None", ")", ":", "\n", "        ", "self", ".", "module", "=", "SGDDeconvGMMModule", "(", "components", ",", "dimensions", ",", "w", ",", "device", ")", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "components", ",", "dimensions", ",", "epochs", "=", "epochs", ",", "lr", "=", "lr", ",", "\n", "batch_size", "=", "batch_size", ",", "w", "=", "w", ",", "tol", "=", "tol", ",", "\n", "k_means_factor", "=", "k_means_factor", ",", "k_means_iters", "=", "k_means_iters", ",", "\n", "lr_step", "=", "lr_step", ",", "lr_gamma", "=", "lr_gamma", ",", "device", "=", "device", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_deconv_gmm.SGDDeconvGMM._sample_prior": [[58, 60], ["sgd_deconv_gmm.SGDDeconvGMM._sample"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_gmm.BaseSGDGMM._sample"], ["", "def", "_sample_prior", "(", "self", ",", "num_samples", ",", "context", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "_sample", "(", "num_samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_deconv_gmm.SGDDeconvGMM.sample_prior": [[61, 69], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.sampling.minibatch_sample"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.utils.sampling.minibatch_sample"], ["", "def", "sample_prior", "(", "self", ",", "num_samples", ",", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "             ", "return", "minibatch_sample", "(", "\n", "self", ".", "_sample_prior", ",", "\n", "num_samples", ",", "\n", "self", ".", "d", ",", "\n", "self", ".", "batch_size", ",", "\n", "device", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_deconv_gmm.SGDDeconvGMM.posterior_params": [[71, 95], ["torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.cholesky", "torch.cholesky", "torch.cholesky", "torch.cholesky", "torch.cholesky", "torch.cholesky", "torch.cholesky", "torch.cholesky", "torch.cholesky", "torch.cholesky_solve", "torch.cholesky_solve", "torch.cholesky_solve", "torch.cholesky_solve", "torch.cholesky_solve", "torch.cholesky_solve", "torch.cholesky_solve", "torch.cholesky_solve", "torch.cholesky_solve", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "sgd_deconv_gmm.SGDDeconvGMM.module.soft_max", "torch.MultivariateNormal().log_prob", "torch.MultivariateNormal().log_prob", "torch.MultivariateNormal().log_prob", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.MultivariateNormal", "torch.MultivariateNormal", "torch.MultivariateNormal", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob"], ["", "", "def", "posterior_params", "(", "self", ",", "x", ")", ":", "\n", "        ", "log_weights", "=", "torch", ".", "log", "(", "self", ".", "module", ".", "soft_max", "(", "self", ".", "module", ".", "soft_weights", ")", ")", "\n", "T", "=", "self", ".", "module", ".", "covars", "[", "None", ",", ":", ",", ":", ",", ":", "]", "+", "x", "[", "1", "]", "[", ":", ",", "None", ",", ":", ",", ":", "]", "\n", "\n", "w", "=", "log_weights", "+", "dist", ".", "MultivariateNormal", "(", "\n", "loc", "=", "self", ".", "module", ".", "means", ",", "covariance_matrix", "=", "T", "\n", ")", ".", "log_prob", "(", "x", "[", "0", "]", "[", ":", ",", "None", ",", ":", "]", ")", "\n", "p_weights", "=", "w", "-", "torch", ".", "logsumexp", "(", "w", ",", "axis", "=", "1", ")", "[", ":", ",", "None", "]", "\n", "\n", "L_t", "=", "torch", ".", "cholesky", "(", "T", ")", "\n", "T_inv", "=", "torch", ".", "cholesky_solve", "(", "torch", ".", "eye", "(", "self", ".", "d", ",", "device", "=", "self", ".", "device", ")", ",", "L_t", ")", "\n", "\n", "diff", "=", "x", "[", "0", "]", "[", ":", ",", "None", ",", ":", "]", "-", "self", ".", "module", ".", "means", "\n", "T_prod", "=", "torch", ".", "matmul", "(", "T_inv", ",", "diff", "[", ":", ",", ":", ",", ":", ",", "None", "]", ")", "\n", "p_means", "=", "self", ".", "module", ".", "means", "+", "torch", ".", "matmul", "(", "\n", "self", ".", "module", ".", "covars", ",", "\n", "T_prod", "\n", ")", ".", "squeeze", "(", ")", "\n", "\n", "p_covars", "=", "self", ".", "module", ".", "covars", "-", "torch", ".", "matmul", "(", "\n", "self", ".", "module", ".", "covars", ",", "\n", "torch", ".", "matmul", "(", "T_inv", ",", "self", ".", "module", ".", "covars", ")", "\n", ")", "\n", "return", "p_weights", ",", "p_means", ",", "p_covars", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_deconv_gmm.SGDDeconvGMM.posterior_log_prob": [[96, 106], ["sgd_deconv_gmm.SGDDeconvGMM.posterior_params", "len", "torch.MultivariateNormal().log_prob", "torch.MultivariateNormal().log_prob", "torch.MultivariateNormal().log_prob", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.MultivariateNormal().log_prob", "torch.MultivariateNormal().log_prob", "torch.MultivariateNormal().log_prob", "torch.logsumexp().transpose", "torch.logsumexp().transpose", "torch.logsumexp().transpose", "torch.logsumexp().transpose", "torch.logsumexp().transpose", "torch.logsumexp().transpose", "torch.logsumexp().transpose", "torch.logsumexp().transpose", "torch.logsumexp().transpose", "torch.MultivariateNormal", "torch.MultivariateNormal", "torch.MultivariateNormal", "torch.MultivariateNormal", "torch.MultivariateNormal", "torch.MultivariateNormal", "x.transpose", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_deconv_gmm.SGDDeconvGMM.posterior_params", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob"], ["", "def", "posterior_log_prob", "(", "self", ",", "x", ",", "context", ")", ":", "\n", "        ", "p_weights", ",", "p_means", ",", "p_covars", "=", "self", ".", "posterior_params", "(", "context", ")", "\n", "if", "len", "(", "x", ".", "shape", ")", "==", "2", ":", "\n", "            ", "log_p", "=", "dist", ".", "MultivariateNormal", "(", "loc", "=", "p_means", ",", "covariance_matrix", "=", "p_covars", ")", ".", "log_prob", "(", "x", "[", ":", ",", "None", ",", "None", ",", ":", "]", ")", "\n", "return", "torch", ".", "logsumexp", "(", "log_p", "+", "p_weights", ",", "dim", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "log_p", "=", "dist", ".", "MultivariateNormal", "(", "\n", "loc", "=", "p_means", ",", "covariance_matrix", "=", "p_covars", "\n", ")", ".", "log_prob", "(", "x", ".", "transpose", "(", "0", ",", "1", ")", "[", ":", ",", ":", ",", "None", ",", ":", "]", ")", "\n", "return", "torch", ".", "logsumexp", "(", "log_p", "+", "p_weights", ",", "dim", "=", "2", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_deconv_gmm.SGDDeconvGMM._sample_posterior": [[107, 119], ["sgd_deconv_gmm.SGDDeconvGMM.posterior_params", "torch.Categorical().sample", "torch.Categorical().sample", "torch.Categorical().sample", "torch.MultivariateNormal().sample", "torch.MultivariateNormal().sample", "torch.MultivariateNormal().sample", "[].squeeze", "torch.Categorical", "torch.Categorical", "torch.Categorical", "torch.MultivariateNormal", "torch.MultivariateNormal", "torch.MultivariateNormal", "torch.MultivariateNormal().sample.transpose", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "len"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_deconv_gmm.SGDDeconvGMM.posterior_params", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample"], ["", "", "def", "_sample_posterior", "(", "self", ",", "x", ",", "num_samples", ",", "context", "=", "None", ")", ":", "\n", "\n", "        ", "p_weights", ",", "p_means", ",", "p_covars", "=", "self", ".", "posterior_params", "(", "x", ")", "\n", "\n", "idx", "=", "dist", ".", "Categorical", "(", "logits", "=", "p_weights", ")", ".", "sample", "(", "[", "num_samples", "]", ")", "\n", "samples", "=", "dist", ".", "MultivariateNormal", "(", "loc", "=", "p_means", ",", "covariance_matrix", "=", "p_covars", ")", ".", "sample", "(", "[", "num_samples", "]", ")", "\n", "\n", "return", "samples", ".", "transpose", "(", "0", ",", "1", ")", "[", "\n", "torch", ".", "arange", "(", "len", "(", "x", "[", "0", "]", ")", ",", "device", "=", "self", ".", "device", ")", "[", ":", ",", "None", ",", "None", ",", "None", "]", ",", "\n", "torch", ".", "arange", "(", "num_samples", ",", "device", "=", "self", ".", "device", ")", "[", "None", ",", ":", ",", "None", ",", "None", "]", ",", "\n", "idx", ".", "T", "[", ":", ",", ":", ",", "None", ",", "None", "]", ",", "\n", "torch", ".", "arange", "(", "self", ".", "d", ",", "device", "=", "self", ".", "device", ")", "[", "None", ",", "None", ",", "None", ",", ":", "]", "\n", "]", ".", "squeeze", "(", ")", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_deconv_gmm.SGDDeconvGMM.sample_posterior": [[121, 130], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.sampling.minibatch_sample"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.utils.sampling.minibatch_sample"], ["", "def", "sample_posterior", "(", "self", ",", "x", ",", "num_samples", ",", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "return", "minibatch_sample", "(", "\n", "self", ".", "_sample_posterior", ",", "\n", "num_samples", ",", "\n", "self", ".", "d", ",", "\n", "self", ".", "batch_size", ",", "\n", "device", ",", "\n", "x", "=", "x", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_gmm_tim.SGDGMMModule.__init__": [[16, 37], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.tril_indices", "torch.tril_indices", "torch.tril_indices", "torch.tril_indices", "torch.tril_indices", "torch.tril_indices", "torch.tril_indices", "torch.tril_indices", "torch.tril_indices", "torch.tril_indices", "torch.tril_indices", "torch.tril_indices", "torch.tril_indices", "torch.tril_indices", "torch.tril_indices", "torch.tril_indices", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "components", ",", "dimensions", ",", "w", ",", "device", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "k", "=", "components", "\n", "self", ".", "d", "=", "dimensions", "\n", "self", ".", "device", "=", "device", "\n", "\n", "self", ".", "soft_weights", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "self", ".", "k", ")", ")", "\n", "self", ".", "soft_max", "=", "torch", ".", "nn", ".", "Softmax", "(", "dim", "=", "0", ")", "\n", "\n", "self", ".", "means", "=", "nn", ".", "Parameter", "(", "torch", ".", "rand", "(", "self", ".", "k", ",", "self", ".", "d", ")", ")", "\n", "self", ".", "l_diag", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "self", ".", "k", ",", "self", ".", "d", ")", ")", "\n", "\n", "self", ".", "l_lower", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "self", ".", "k", ",", "self", ".", "d", "*", "(", "self", ".", "d", "-", "1", ")", "//", "2", ")", "\n", ")", "\n", "\n", "self", ".", "d_idx", "=", "torch", ".", "eye", "(", "self", ".", "d", ",", "device", "=", "self", ".", "device", ")", ".", "to", "(", "torch", ".", "bool", ")", "\n", "self", ".", "l_idx", "=", "torch", ".", "tril_indices", "(", "self", ".", "d", ",", "self", ".", "d", ",", "-", "1", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "self", ".", "w", "=", "w", "*", "torch", ".", "eye", "(", "self", ".", "d", ",", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_gmm_tim.SGDGMMModule.L": [[38, 44], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "@", "property", "\n", "def", "L", "(", "self", ")", ":", "\n", "        ", "L", "=", "torch", ".", "zeros", "(", "self", ".", "k", ",", "self", ".", "d", ",", "self", ".", "d", ",", "device", "=", "self", ".", "device", ")", "\n", "L", "[", ":", ",", "self", ".", "d_idx", "]", "=", "torch", ".", "exp", "(", "self", ".", "l_diag", ")", "\n", "L", "[", ":", ",", "self", ".", "l_idx", "[", "0", "]", ",", "self", ".", "l_idx", "[", "1", "]", "]", "=", "self", ".", "l_lower", "\n", "return", "L", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_gmm_tim.SGDGMMModule.covars": [[45, 48], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose"], "methods", ["None"], ["", "@", "property", "\n", "def", "covars", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "matmul", "(", "self", ".", "L", ",", "torch", ".", "transpose", "(", "self", ".", "L", ",", "-", "2", ",", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_gmm_tim.SGDGMMModule.forward": [[49, 63], ["sgd_gmm_tim.SGDGMMModule.soft_max", "mvn().log_prob", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "mvn"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob"], ["", "def", "forward", "(", "self", ",", "data", ")", ":", "\n", "\n", "        ", "x", "=", "data", "[", "0", "]", "\n", "\n", "weights", "=", "self", ".", "soft_max", "(", "self", ".", "soft_weights", ")", "\n", "\n", "log_resp", "=", "mvn", "(", "loc", "=", "self", ".", "means", ",", "scale_tril", "=", "self", ".", "L", ")", ".", "log_prob", "(", "\n", "x", "[", ":", ",", "None", ",", ":", "]", "\n", ")", "\n", "log_resp", "+=", "torch", ".", "log", "(", "weights", ")", "\n", "\n", "log_prob", "=", "torch", ".", "logsumexp", "(", "log_resp", ",", "dim", "=", "1", ")", "\n", "\n", "return", "log_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_gmm_tim.BaseSGDGMM.__init__": [[67, 97], ["sgd_gmm_tim.BaseSGDGMM.module.to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "sgd_gmm_tim.BaseSGDGMM.module.parameters"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "components", ",", "dimensions", ",", "epochs", "=", "10000", ",", "lr", "=", "1e-3", ",", "\n", "batch_size", "=", "64", ",", "tol", "=", "1e-6", ",", "max_no_improvement", "=", "30", ",", "\n", "k_means_factor", "=", "100", ",", "w", "=", "1e-6", ",", "k_means_iters", "=", "10", ",", "lr_step", "=", "5", ",", "\n", "lr_gamma", "=", "0.1", ",", "device", "=", "None", ")", ":", "\n", "        ", "self", ".", "k", "=", "components", "\n", "self", ".", "d", "=", "dimensions", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "tol", "=", "1e-6", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "w", "=", "w", "\n", "self", ".", "k_means_factor", "=", "k_means_factor", "\n", "self", ".", "k_means_iters", "=", "k_means_iters", "\n", "self", ".", "max_no_improvement", "=", "max_no_improvement", "\n", "\n", "if", "not", "device", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "device", "=", "device", "\n", "\n", "", "self", ".", "module", ".", "to", "(", "device", ")", "\n", "\n", "self", ".", "optimiser", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "params", "=", "self", ".", "module", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "lr", "\n", ")", "\n", "self", ".", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "\n", "self", ".", "optimiser", ",", "\n", "milestones", "=", "[", "lr_step", ",", "lr_step", "+", "5", "]", ",", "\n", "gamma", "=", "lr_gamma", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_gmm_tim.BaseSGDGMM.means": [[99, 102], ["sgd_gmm_tim.BaseSGDGMM.module.means.detach"], "methods", ["None"], ["", "@", "property", "\n", "def", "means", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "module", ".", "means", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_gmm_tim.BaseSGDGMM.covars": [[103, 106], ["sgd_gmm_tim.BaseSGDGMM.module.covars.detach"], "methods", ["None"], ["", "@", "property", "\n", "def", "covars", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "module", ".", "covars", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_gmm_tim.BaseSGDGMM.reg_loss": [[107, 111], ["l.sum", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal"], "methods", ["None"], ["", "def", "reg_loss", "(", "self", ",", "n", ",", "n_total", ")", ":", "\n", "        ", "l", "=", "(", "n", "/", "n_total", ")", "*", "self", ".", "w", "/", "torch", ".", "diagonal", "(", "self", ".", "module", ".", "covars", ",", "dim1", "=", "-", "1", ",", "dim2", "=", "-", "2", ")", "\n", "return", "l", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_gmm_tim.BaseSGDGMM.fit": [[112, 230], ["len", "sgd_gmm_tim.BaseSGDGMM.init_params", "float", "range", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "copy.deepcopy", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "float", "enumerate", "len", "sgd_gmm_tim.BaseSGDGMM.train_loss_curve.append", "sgd_gmm_tim.BaseSGDGMM.optimiser.zero_grad", "sgd_gmm_tim.BaseSGDGMM.module", "sgd_gmm_tim.BaseSGDGMM.reg_loss", "loss.backward", "sgd_gmm_tim.BaseSGDGMM.optimiser.step", "sgd_gmm_tim.BaseSGDGMM.val_loss_curve.append", "torch.RandomSampler", "torch.RandomSampler", "torch.RandomSampler", "torch.RandomSampler", "torch.RandomSampler", "torch.RandomSampler", "torch.RandomSampler", "torch.RandomSampler", "a.to", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "len", "logger.info", "logger.info", "print", "sgd_gmm_tim.BaseSGDGMM.score_batch", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_gmm_tim.BaseSGDGMM.init_params", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_gmm_tim.BaseSGDGMM.reg_loss", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score_batch"], ["", "def", "fit", "(", "self", ",", "data", ",", "logger", ",", "val_data", "=", "None", ",", "verbose", "=", "False", ",", "interval", "=", "1", ",", "es_tl", "=", "None", ")", ":", "\n", "\n", "        ", "n_total", "=", "len", "(", "data", ")", "\n", "\n", "if", "self", ".", "batch_size", "is", "None", ":", "\n", "            ", "loader", "=", "data_utils", ".", "DataLoader", "(", "\n", "data", ",", "\n", "batch_size", "=", "None", ",", "\n", "# num_workers=8,", "\n", "sampler", "=", "data_utils", ".", "RandomSampler", "(", "data", ")", ",", "\n", "# pin_memory=True", "\n", ")", "\n", "init_data", "=", "copy", ".", "deepcopy", "(", "data", ")", "\n", "init_data", ".", "batch_size", "*=", "16", "\n", "\n", "init_loader", "=", "data_utils", ".", "DataLoader", "(", "\n", "init_data", ",", "\n", "batch_size", "=", "None", ",", "\n", "# num_workers=8,", "\n", "sampler", "=", "data_utils", ".", "RandomSampler", "(", "init_data", ")", ",", "\n", "# pin_memory=True", "\n", ")", "\n", "", "else", ":", "\n", "            ", "loader", "=", "data_utils", ".", "DataLoader", "(", "\n", "data", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "# num_workers=8,", "\n", "shuffle", "=", "True", ",", "\n", "# pin_memory=True", "\n", ")", "\n", "\n", "init_loader", "=", "data_utils", ".", "DataLoader", "(", "\n", "data", ",", "\n", "batch_size", "=", "16", "*", "self", ".", "batch_size", ",", "\n", "# num_workers=8,", "\n", "shuffle", "=", "True", ",", "\n", "# pin_memory=True", "\n", ")", "\n", "\n", "# self.init_params(loader)", "\n", "", "self", ".", "init_params", "(", "data_utils", ".", "DataLoader", "(", "\n", "data", ",", "batch_size", "=", "n_total", ",", "shuffle", "=", "True", ")", ")", "\n", "\n", "self", ".", "train_loss_curve", "=", "[", "]", "\n", "\n", "if", "val_data", ":", "\n", "            ", "self", ".", "val_loss_curve", "=", "[", "]", "\n", "\n", "", "prev_loss", "=", "float", "(", "'inf'", ")", "\n", "if", "val_data", ":", "\n", "            ", "best_val_loss", "=", "float", "(", "'inf'", ")", "\n", "no_improvement_epochs", "=", "0", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "epochs", ")", ":", "\n", "            ", "train_loss", "=", "0.0", "\n", "for", "j", ",", "d", "in", "enumerate", "(", "loader", ")", ":", "\n", "\n", "                ", "d", "=", "[", "a", ".", "to", "(", "self", ".", "device", ")", "for", "a", "in", "d", "]", "\n", "\n", "self", ".", "optimiser", ".", "zero_grad", "(", ")", "\n", "\n", "log_prob", "=", "self", ".", "module", "(", "d", ")", "\n", "loss", "=", "-", "1", "*", "torch", ".", "mean", "(", "log_prob", ")", "\n", "\n", "train_loss", "+=", "-", "torch", ".", "sum", "(", "log_prob", ")", ".", "item", "(", ")", "\n", "\n", "n", "=", "d", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "loss", "+=", "self", ".", "reg_loss", "(", "n", ",", "n_total", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimiser", ".", "step", "(", ")", "\n", "", "train_loss", "/=", "len", "(", "data", ")", "\n", "\n", "self", ".", "train_loss_curve", ".", "append", "(", "train_loss", ")", "\n", "\n", "if", "es_tl", "is", "not", "None", ":", "\n", "                ", "if", "train_loss", "<", "es_tl", ":", "\n", "                    ", "break", "\n", "\n", "", "", "if", "val_data", ":", "\n", "                ", "val_loss", "=", "-", "self", ".", "score_batch", "(", "val_data", ")", "/", "len", "(", "val_data", ")", "\n", "self", ".", "val_loss_curve", ".", "append", "(", "val_loss", ")", "\n", "\n", "# self.scheduler.step()", "\n", "\n", "", "if", "verbose", "and", "i", "%", "interval", "==", "0", ":", "\n", "                ", "if", "val_data", ":", "\n", "                    ", "message", "=", "(", "'Epoch {}, Train Loss: {}, Val Loss :{}'", ".", "format", "(", "\n", "i", ",", "\n", "train_loss", ",", "\n", "val_loss", "\n", ")", ")", "\n", "logger", ".", "info", "(", "message", ")", "\n", "", "else", ":", "\n", "                    ", "message", "=", "(", "'Epoch {}, Loss: {}'", ".", "format", "(", "i", ",", "train_loss", ")", ")", "\n", "logger", ".", "info", "(", "message", ")", "\n", "\n", "", "", "if", "val_data", ":", "\n", "                ", "if", "val_loss", "<", "best_val_loss", ":", "\n", "                    ", "no_improvement_epochs", "=", "0", "\n", "best_val_loss", "=", "val_loss", "\n", "", "else", ":", "\n", "                    ", "no_improvement_epochs", "+=", "1", "\n", "\n", "", "if", "no_improvement_epochs", ">", "self", ".", "max_no_improvement", ":", "\n", "                    ", "print", "(", "'No improvement in val loss for {} epochs. Early Stopping at {}'", ".", "format", "(", "\n", "self", ".", "max_no_improvement", ",", "\n", "val_loss", "\n", ")", ")", "\n", "return", "best_val_loss", "\n", "\n", "# if abs(train_loss - prev_loss) < self.tol:", "\n", "#     print('Training loss converged within tolerance at {}'.format(", "\n", "#         train_loss", "\n", "#     ))", "\n", "#     break", "\n", "\n", "", "", "prev_loss", "=", "train_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_gmm_tim.BaseSGDGMM.score": [[231, 234], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "sgd_gmm_tim.BaseSGDGMM.module"], "methods", ["None"], ["", "", "def", "score", "(", "self", ",", "data", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "return", "self", ".", "module", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_gmm_tim.BaseSGDGMM.score_batch": [[235, 250], ["torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "enumerate", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "a.to", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "sgd_gmm_tim.BaseSGDGMM.score"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score"], ["", "", "def", "score_batch", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "loader", "=", "data_utils", ".", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "# num_workers=4,", "\n", "# pin_memory=True", "\n", ")", "\n", "\n", "log_prob", "=", "0", "\n", "\n", "for", "j", ",", "d", "in", "enumerate", "(", "loader", ")", ":", "\n", "            ", "d", "=", "[", "a", ".", "to", "(", "self", ".", "device", ")", "for", "a", "in", "d", "]", "\n", "log_prob", "+=", "torch", ".", "sum", "(", "self", ".", "score", "(", "d", ")", ")", ".", "item", "(", ")", "\n", "\n", "", "return", "log_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_gmm_tim.BaseSGDGMM.init_params": [[251, 260], ["util.minibatch_k_means", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "counts.sum"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.util.minibatch_k_means"], ["", "def", "init_params", "(", "self", ",", "loader", ")", ":", "\n", "        ", "counts", ",", "centroids", "=", "minibatch_k_means", "(", "\n", "loader", ",", "self", ".", "k", ",", "max_iters", "=", "self", ".", "k_means_iters", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "module", ".", "soft_weights", ".", "data", "=", "torch", ".", "log", "(", "counts", "/", "counts", ".", "sum", "(", ")", ")", "\n", "self", ".", "module", ".", "means", ".", "data", "=", "centroids", "\n", "self", ".", "module", ".", "l_diag", ".", "data", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "self", ".", "k", ",", "self", ".", "d", ",", "device", "=", "self", ".", "device", ")", ")", "\n", "self", ".", "module", ".", "l_lower", ".", "data", "=", "torch", ".", "zeros", "(", "\n", "self", ".", "k", ",", "self", ".", "d", "*", "(", "self", ".", "d", "-", "1", ")", "//", "2", ",", "device", "=", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_gmm_tim.SGDGMM.__init__": [[264, 270], ["sgd_gmm_tim.SGDGMMModule", "sgd_gmm_tim.BaseSGDGMM.__init__"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "components", ",", "dimensions", ",", "epochs", "=", "10000", ",", "lr", "=", "1e-3", ",", "\n", "batch_size", "=", "64", ",", "tol", "=", "1e-6", ",", "w", "=", "1e-3", ",", "device", "=", "None", ")", ":", "\n", "        ", "self", ".", "module", "=", "SGDGMMModule", "(", "components", ",", "dimensions", ",", "w", ",", "device", ")", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "components", ",", "dimensions", ",", "epochs", "=", "epochs", ",", "lr", "=", "lr", ",", "\n", "batch_size", "=", "batch_size", ",", "w", "=", "w", ",", "tol", "=", "tol", ",", "device", "=", "device", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.gmm.GMM._init_expectations": [[12, 16], ["gmm.GMM._kmeans_init", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.base.BaseGMM._kmeans_init"], ["def", "_init_expectations", "(", "self", ",", "data", ")", ":", "\n", "        ", "X", "=", "data", "[", "0", "]", "\n", "resps", "=", "self", ".", "_kmeans_init", "(", "X", ")", "\n", "return", "(", "torch", ".", "log", "(", "resps", ")", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.gmm.GMM.predict": [[17, 19], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "gmm.GMM._e_step"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.gmm.GMM._e_step"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "return", "torch", ".", "exp", "(", "self", ".", "_e_step", "(", "X", ")", "[", "1", "]", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.gmm.GMM._e_step": [[20, 43], ["torch.empty", "torch.empty", "torch.empty", "torch.empty", "range", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.cholesky", "torch.cholesky", "torch.cholesky", "torch.cholesky", "mvn().log_prob", "torch.log", "torch.log", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "mvn", "float"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob"], ["", "def", "_e_step", "(", "self", ",", "data", ")", ":", "\n", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "chol_covars", "=", "torch", ".", "cholesky", "(", "self", ".", "covars", ")", "\n", "", "except", "RuntimeError", ":", "\n", "            ", "return", "torch", ".", "tensor", "(", "float", "(", "'-inf'", ")", ")", ",", "None", "\n", "\n", "", "X", "=", "data", "[", "0", "]", "\n", "\n", "n", "=", "X", ".", "shape", "[", "0", "]", "\n", "log_resps", "=", "torch", ".", "empty", "(", "n", ",", "self", ".", "k", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "for", "j", "in", "range", "(", "self", ".", "k", ")", ":", "\n", "            ", "log_resps", "[", ":", ",", "j", "]", "=", "mvn", "(", "\n", "loc", "=", "self", ".", "means", "[", "j", ",", ":", "]", ",", "\n", "scale_tril", "=", "self", ".", "chol_covars", "[", "j", ",", ":", ",", ":", "]", "\n", ")", ".", "log_prob", "(", "X", ")", "\n", "log_resps", "+=", "torch", ".", "log", "(", "self", ".", "weights", "[", ":", ",", "j", "]", ")", "\n", "\n", "", "log_prob", "=", "torch", ".", "logsumexp", "(", "log_resps", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "log_resps", "-=", "log_prob", "\n", "\n", "return", "torch", ".", "sum", "(", "log_prob", ")", ",", "(", "log_resps", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.gmm.GMM._m_step": [[44, 62], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "range", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.t", "torch.t", "torch.t", "torch.t", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.t", "torch.t", "torch.t", "torch.t", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.t", "torch.t", "torch.t", "torch.t"], "methods", ["None"], ["", "def", "_m_step", "(", "self", ",", "data", ",", "expectations", ")", ":", "\n", "        ", "X", "=", "data", "[", "0", "]", "\n", "n", "=", "X", ".", "shape", "[", "0", "]", "\n", "resps", "=", "torch", ".", "exp", "(", "expectations", "[", "0", "]", ")", "\n", "weights", "=", "torch", ".", "sum", "(", "resps", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "self", ".", "means", "=", "torch", ".", "mm", "(", "torch", ".", "t", "(", "resps", ")", ",", "X", ")", "/", "torch", ".", "t", "(", "weights", ")", "\n", "\n", "for", "j", "in", "range", "(", "self", ".", "k", ")", ":", "\n", "            ", "diff", "=", "X", "-", "self", ".", "means", "[", "j", ",", ":", "]", "\n", "self", ".", "covars", "[", "j", ",", ":", ",", ":", "]", "=", "torch", ".", "mm", "(", "\n", "resps", "[", ":", ",", "j", "]", "*", "torch", ".", "t", "(", "diff", ")", ",", "\n", "diff", "\n", ")", "/", "weights", "[", ":", ",", "j", "]", "\n", "self", ".", "covars", "[", "j", ",", ":", ",", ":", "]", "+=", "torch", ".", "diag", "(", "\n", "self", ".", "w", "*", "torch", ".", "ones", "(", "self", ".", "d", ",", "device", "=", "self", ".", "device", ")", "\n", ")", "\n", "\n", "", "self", ".", "weights", "=", "weights", "/", "n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.online_deconv_gmm.OnlineDeconvGMM.__init__": [[11, 25], ["deconv_gmm.DeconvGMM.__init__"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.__init__"], ["def", "__init__", "(", "self", ",", "components", ",", "dimensions", ",", "epochs", "=", "1000", ",", "w", "=", "1e-6", ",", "\n", "tol", "=", "1e-6", ",", "step_size", "=", "0.1", ",", "batch_size", "=", "100", ",", "\n", "max_no_improvement", "=", "20", ",", "k_means_factor", "=", "100", ",", "\n", "k_means_iters", "=", "10", ",", "lr_step", "=", "10", ",", "lr_gamma", "=", "0.1", ",", "\n", "device", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "components", ",", "dimensions", ",", "epochs", "=", "epochs", ",", "w", "=", "w", ",", "tol", "=", "tol", ",", "\n", "device", "=", "device", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "step_size", "=", "step_size", "\n", "self", ".", "max_no_improvement", "=", "max_no_improvement", "\n", "self", ".", "k_means_factor", "=", "k_means_factor", "\n", "self", ".", "k_means_iters", "=", "k_means_iters", "\n", "self", ".", "lr_step", "=", "lr_step", "\n", "self", ".", "lr_gamma", "=", "lr_gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.online_deconv_gmm.OnlineDeconvGMM._init_sum_stats": [[26, 41], ["util.minibatch_k_means", "torch.eye().repeat", "torch.eye().repeat", "torch.eye().repeat", "torch.eye().repeat", "counts.sum", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.util.minibatch_k_means"], ["", "def", "_init_sum_stats", "(", "self", ",", "loader", ",", "n", ")", ":", "\n", "\n", "        ", "counts", ",", "centroids", "=", "minibatch_k_means", "(", "\n", "loader", ",", "self", ".", "k", ",", "max_iters", "=", "self", ".", "k_means_iters", ",", "device", "=", "self", ".", "device", "\n", ")", "\n", "\n", "self", ".", "weights", "=", "counts", "[", ":", ",", "None", "]", "/", "counts", ".", "sum", "(", ")", "\n", "self", ".", "means", "=", "centroids", "\n", "self", ".", "covars", "=", "torch", ".", "eye", "(", "\n", "self", ".", "d", ",", "device", "=", "self", ".", "device", "\n", ")", ".", "repeat", "(", "self", ".", "k", ",", "1", ",", "1", ")", "\n", "\n", "self", ".", "sum_resps", "=", "self", ".", "weights", "*", "self", ".", "batch_size", "\n", "\n", "self", ".", "sum_cond_means", "=", "self", ".", "means", "*", "self", ".", "sum_resps", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.online_deconv_gmm.OnlineDeconvGMM.fit": [[42, 133], ["torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "len", "float", "online_deconv_gmm.OnlineDeconvGMM._init_sum_stats", "float", "float", "range", "enumerate", "online_deconv_gmm.OnlineDeconvGMM.score_batch", "online_deconv_gmm.OnlineDeconvGMM.train_ll_curve.append", "online_deconv_gmm.OnlineDeconvGMM._e_step", "log_prob.item", "online_deconv_gmm.OnlineDeconvGMM._m_step", "print", "online_deconv_gmm.OnlineDeconvGMM.score_batch", "online_deconv_gmm.OnlineDeconvGMM.val_ll_curve.append", "abs", "print", "a.to", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.online_deconv_gmm.OnlineDeconvGMM._init_sum_stats", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score_batch", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.gmm.GMM._e_step", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.online_deconv_gmm.OnlineDeconvGMM._m_step", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score_batch"], ["", "def", "fit", "(", "self", ",", "data", ",", "val_data", "=", "None", ",", "verbose", "=", "False", ",", "interval", "=", "1", ")", ":", "\n", "        ", "loader", "=", "data_utils", ".", "DataLoader", "(", "\n", "data", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "num_workers", "=", "4", ",", "\n", "shuffle", "=", "True", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "True", "\n", ")", "\n", "\n", "init_loader", "=", "data_utils", ".", "DataLoader", "(", "\n", "data", ",", "\n", "batch_size", "=", "self", ".", "k_means_factor", "*", "self", ".", "batch_size", ",", "\n", "num_workers", "=", "4", ",", "\n", "shuffle", "=", "True", ",", "\n", "pin_memory", "=", "True", "\n", ")", "\n", "\n", "n", "=", "len", "(", "data", ")", "\n", "\n", "n_inf", "=", "float", "(", "'-inf'", ")", "\n", "\n", "self", ".", "train_ll_curve", "=", "[", "]", "\n", "if", "val_data", ":", "\n", "            ", "self", ".", "val_ll_curve", "=", "[", "]", "\n", "\n", "", "self", ".", "_init_sum_stats", "(", "init_loader", ",", "n", ")", "\n", "\n", "prev_ll", "=", "float", "(", "'-inf'", ")", "\n", "max_val_ll", "=", "float", "(", "'-inf'", ")", "\n", "no_improvements", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "epochs", ")", ":", "\n", "            ", "train_ll", "=", "0.0", "\n", "for", "_", ",", "d", "in", "enumerate", "(", "loader", ")", ":", "\n", "                ", "d", "=", "[", "a", ".", "to", "(", "self", ".", "device", ")", "for", "a", "in", "d", "]", "\n", "log_prob", ",", "expectations", "=", "self", ".", "_e_step", "(", "d", ")", "\n", "if", "log_prob", "==", "n_inf", ":", "\n", "                    ", "break", "\n", "", "train_ll", "+=", "log_prob", ".", "item", "(", ")", "\n", "self", ".", "_m_step", "(", "expectations", ",", "n", ",", "self", ".", "step_size", ")", "\n", "\n", "", "if", "train_ll", "==", "0.0", ":", "\n", "                ", "print", "(", "'Log prob 0, crashed.'", ")", "\n", "train_ll", "=", "0.0", "\n", "val_ll", "=", "0.0", "\n", "break", "\n", "\n", "", "train_ll", "=", "self", ".", "score_batch", "(", "data", ")", "\n", "self", ".", "train_ll_curve", ".", "append", "(", "train_ll", ")", "\n", "\n", "if", "val_data", ":", "\n", "                ", "val_ll", "=", "self", ".", "score_batch", "(", "val_data", ")", "\n", "self", ".", "val_ll_curve", ".", "append", "(", "val_ll", ")", "\n", "\n", "", "if", "(", "i", "+", "1", ")", "%", "self", ".", "lr_step", "==", "0", ":", "\n", "                ", "self", ".", "step_size", "*=", "self", ".", "lr_gamma", "\n", "\n", "", "if", "verbose", "and", "i", "%", "interval", "==", "0", ":", "\n", "                ", "if", "val_data", ":", "\n", "                    ", "print", "(", "'Epoch {}, Train LL: {}, Val LL: {}'", ".", "format", "(", "\n", "i", ",", "\n", "train_ll", ",", "\n", "val_ll", "\n", ")", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "'Epoch {}, Train LL: {}'", ".", "format", "(", "\n", "i", ",", "train_ll", "\n", ")", ")", "\n", "\n", "", "", "if", "abs", "(", "train_ll", "-", "prev_ll", ")", "<", "self", ".", "tol", ":", "\n", "                ", "print", "(", "'Train LL converged within tolerance at {}'", ".", "format", "(", "\n", "train_ll", "\n", ")", ")", "\n", "break", "\n", "\n", "", "if", "val_data", ":", "\n", "                ", "if", "val_ll", ">", "max_val_ll", ":", "\n", "                    ", "no_improvements", "=", "0", "\n", "max_val_ll", "=", "val_ll", "\n", "", "else", ":", "\n", "                    ", "no_improvements", "+=", "1", "\n", "\n", "", "if", "no_improvements", ">", "self", ".", "max_no_improvement", ":", "\n", "                    ", "print", "(", "'No improvement in val LL for {} epochs. Early Stopping at {}'", ".", "format", "(", "\n", "self", ".", "max_no_improvement", ",", "\n", "val_ll", "\n", ")", ")", "\n", "break", "\n", "\n", "", "", "prev_ll", "=", "train_ll", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.online_deconv_gmm.OnlineDeconvGMM._adjust": [[134, 145], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["", "", "def", "_adjust", "(", "self", ",", "covar", ",", "scale", ",", "b", ",", "c", ")", ":", "\n", "        ", "result", "=", "scale", "[", ":", ",", ":", ",", "None", "]", "*", "covar", "\n", "scale_sqrt", "=", "torch", ".", "sqrt", "(", "scale", ")", "\n", "\n", "diffs", "=", "(", "scale_sqrt", "*", "b", "-", "c", ")", "\n", "sums", "=", "(", "scale_sqrt", "*", "b", "+", "c", ")", "\n", "\n", "result", "+=", "0.5", "*", "diffs", "[", ":", ",", ":", ",", "None", "]", "*", "sums", "[", ":", ",", "None", ",", ":", "]", "\n", "result", "+=", "0.5", "*", "sums", "[", ":", ",", ":", ",", "None", "]", "*", "diffs", "[", ":", ",", "None", ",", ":", "]", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.online_deconv_gmm.OnlineDeconvGMM._m_step": [[146, 189], ["resps.sum", "online_deconv_gmm.OnlineDeconvGMM.means.clone", "online_deconv_gmm.OnlineDeconvGMM.sum_resps.clone", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.finfo", "torch.finfo", "torch.finfo", "torch.finfo", "torch.finfo", "torch.finfo", "torch.finfo", "torch.finfo", "online_deconv_gmm.OnlineDeconvGMM._adjust", "online_deconv_gmm.OnlineDeconvGMM._adjust"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.online_deconv_gmm.OnlineDeconvGMM._adjust", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.online_deconv_gmm.OnlineDeconvGMM._adjust"], ["", "def", "_m_step", "(", "self", ",", "expectations", ",", "n", ",", "step_size", ")", ":", "\n", "        ", "log_resps", ",", "cond_means", ",", "cond_covars", "=", "expectations", "\n", "resps", "=", "torch", ".", "exp", "(", "log_resps", ")", "[", ":", ",", ":", ",", "None", "]", "# n, j, 1", "\n", "\n", "resps", "+=", "10", "*", "torch", ".", "finfo", "(", "resps", ".", "dtype", ")", ".", "eps", "\n", "\n", "sum_resps", "=", "resps", ".", "sum", "(", "dim", "=", "0", ")", "\n", "\n", "sum_resps", "+=", "10", "*", "torch", ".", "finfo", "(", "sum_resps", ".", "dtype", ")", ".", "eps", "\n", "\n", "sum_cond_means", "=", "(", "resps", "*", "cond_means", ")", ".", "sum", "(", "dim", "=", "0", ")", "\n", "batch_means", "=", "sum_cond_means", "/", "sum_resps", "\n", "\n", "diffs", "=", "(", "cond_means", "-", "batch_means", ")", "\n", "outer_p", "=", "diffs", "[", ":", ",", ":", ",", ":", ",", "None", "]", "*", "diffs", "[", ":", ",", ":", ",", "None", ",", ":", "]", "\n", "outer_p", "+=", "cond_covars", "\n", "\n", "batch_covars", "=", "torch", ".", "sum", "(", "\n", "resps", "[", ":", ",", ":", ",", ":", ",", "None", "]", "*", "outer_p", ",", "\n", "dim", "=", "0", "\n", ")", "/", "sum_resps", "[", ":", ",", ":", ",", "None", "]", "\n", "\n", "m_old", "=", "self", ".", "means", ".", "clone", "(", ")", "\n", "sum_resps_old", "=", "self", ".", "sum_resps", ".", "clone", "(", ")", "\n", "\n", "self", ".", "sum_resps", "=", "(", "1", "-", "step_size", ")", "*", "self", ".", "sum_resps", "+", "step_size", "*", "sum_resps", "\n", "\n", "self", ".", "sum_cond_means", "=", "(", "1", "-", "step_size", ")", "*", "self", ".", "sum_cond_means", "+", "step_size", "*", "sum_cond_means", "\n", "self", ".", "means", "=", "self", ".", "sum_cond_means", "/", "self", ".", "sum_resps", "\n", "\n", "self", ".", "covars", "=", "(", "1", "-", "step_size", ")", "*", "self", ".", "_adjust", "(", "\n", "self", ".", "covars", "-", "self", ".", "w", ",", "\n", "sum_resps_old", "/", "self", ".", "sum_resps", ",", "\n", "m_old", ",", "\n", "self", ".", "means", "\n", ")", "+", "step_size", "*", "self", ".", "_adjust", "(", "\n", "batch_covars", ",", "\n", "sum_resps", "/", "self", ".", "sum_resps", ",", "\n", "batch_means", ",", "\n", "self", ".", "means", "\n", ")", "+", "self", ".", "w", "\n", "\n", "self", ".", "weights", "=", "self", ".", "sum_resps", "/", "self", ".", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.online_deconv_gmm.OnlineDeconvGMM.score_batch": [[190, 206], ["torch.DataLoader", "torch.DataLoader", "enumerate", "online_deconv_gmm.OnlineDeconvGMM._e_step", "lp.item", "a.to"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.gmm.GMM._e_step"], ["", "def", "score_batch", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "log_prob", "=", "0.0", "\n", "\n", "loader", "=", "data_utils", ".", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "num_workers", "=", "4", ",", "\n", "pin_memory", "=", "True", "\n", ")", "\n", "\n", "for", "_", ",", "d", "in", "enumerate", "(", "loader", ")", ":", "\n", "            ", "d", "=", "[", "a", ".", "to", "(", "self", ".", "device", ")", "for", "a", "in", "d", "]", "\n", "lp", ",", "_", "=", "self", ".", "_e_step", "(", "d", ")", "\n", "log_prob", "+=", "lp", ".", "item", "(", ")", "\n", "\n", "", "return", "log_prob", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.util.k_means": [[4, 34], ["torch.zeros", "torch.arange", "torch.tensor", "range", "torch.min", "torch.max", "float", "range", "distances[].sum", "torch.zeros.float", "torch.rand", "distances.min", "X[].mean", "torch.abs"], "function", ["None"], ["def", "k_means", "(", "X", ",", "k", ",", "max_iters", "=", "50", ",", "tol", "=", "1e-9", ",", "device", "=", "None", ")", ":", "\n", "        ", "\"\"\"Do standard k-means clustering.\"\"\"", "\n", "n", ",", "d", "=", "X", ".", "shape", "\n", "\n", "x_min", "=", "torch", ".", "min", "(", "X", ",", "dim", "=", "0", ")", "[", "0", "]", "\n", "x_max", "=", "torch", ".", "max", "(", "X", ",", "dim", "=", "0", ")", "[", "0", "]", "\n", "\n", "resp", "=", "torch", ".", "zeros", "(", "n", ",", "k", ",", "dtype", "=", "torch", ".", "bool", ",", "device", "=", "device", ")", "\n", "idx", "=", "torch", ".", "arange", "(", "n", ")", "\n", "\n", "centroids", "=", "torch", ".", "rand", "(", "\n", "k", ",", "d", ",", "device", "=", "device", "\n", ")", "*", "(", "x_max", "-", "x_min", ")", "+", "x_min", "\n", "\n", "prev_distance", "=", "torch", ".", "tensor", "(", "float", "(", "'inf'", ")", ",", "device", "=", "device", ")", "\n", "\n", "for", "i", "in", "range", "(", "max_iters", ")", ":", "\n", "            ", "distances", "=", "(", "X", "[", ":", ",", "None", ",", ":", "]", "-", "centroids", "[", "None", ",", ":", ",", ":", "]", ")", ".", "norm", "(", "dim", "=", "2", ")", "\n", "labels", "=", "distances", ".", "min", "(", "dim", "=", "1", ")", "[", "1", "]", "\n", "for", "j", "in", "range", "(", "k", ")", ":", "\n", "                ", "centroids", "[", "j", ",", ":", "]", "=", "X", "[", "labels", "==", "j", ",", ":", "]", ".", "mean", "(", "dim", "=", "0", ")", "\n", "", "resp", "[", ":", "]", "=", "False", "\n", "resp", "[", "idx", ",", "labels", "]", "=", "True", "\n", "total_distance", "=", "distances", "[", "resp", "]", ".", "sum", "(", ")", "\n", "\n", "if", "torch", ".", "abs", "(", "total_distance", "-", "prev_distance", ")", "<", "tol", ":", "\n", "                ", "break", "\n", "", "prev_distance", "=", "total_distance", "\n", "\n", "", "return", "resp", ".", "float", "(", ")", ",", "centroids", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.util.minibatch_k_means": [[36, 76], ["[].to", "torch.ones", "torch.tensor", "print", "range", "print", "print", "torch.norm().sum", "d[].to", "torch.bincount().float", "torch.zeros_like", "torch.abs", "print", "diffs.norm().min", "torch.norm", "next", "torch.bincount", "iter", "diffs.norm", "torch.arange"], "function", ["None"], ["", "def", "minibatch_k_means", "(", "loader", ",", "k", ",", "max_iters", "=", "50", ",", "tol", "=", "1e-3", ",", "device", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Do minibatch version of k-means\n\n    Based on https://www.eecs.tufts.edu/~dsculley/papers/fastkmeans.pdf\n    \"\"\"", "\n", "centroids", "=", "next", "(", "iter", "(", "loader", ")", ")", "[", "0", "]", "[", ":", "k", "]", ".", "to", "(", "device", ")", "\n", "counts", "=", "torch", ".", "ones", "(", "k", ",", "device", "=", "device", ")", "\n", "\n", "prev_norm", "=", "torch", ".", "tensor", "(", "0.0", ",", "device", "=", "device", ")", "\n", "\n", "print", "(", "'Stating minibatch_k_means'", ")", "\n", "for", "j", "in", "range", "(", "max_iters", ")", ":", "\n", "        ", "print", "(", "'Iter: {}'", ".", "format", "(", "j", ")", ")", "\n", "for", "d", "in", "loader", ":", "\n", "            ", "X", "=", "d", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "diffs", "=", "X", "[", ":", ",", "None", ",", ":", "]", "-", "centroids", "[", "None", ",", ":", ",", ":", "]", "\n", "labels", "=", "diffs", ".", "norm", "(", "dim", "=", "2", ")", ".", "min", "(", "dim", "=", "1", ")", "[", "1", "]", "\n", "\n", "counts", "+=", "torch", ".", "bincount", "(", "labels", ",", "minlength", "=", "k", ")", ".", "float", "(", ")", "\n", "eta", "=", "1", "/", "counts", "\n", "\n", "mask", "=", "torch", ".", "zeros_like", "(", "diffs", ")", "\n", "mask", "[", "torch", ".", "arange", "(", "mask", ".", "shape", "[", "0", "]", ")", ",", "labels", ",", ":", "]", "=", "1", "\n", "\n", "centroids", "+=", "(", "\n", "eta", "[", ":", ",", "None", "]", "*", "(", "mask", "*", "diffs", ")", "\n", ")", ".", "sum", "(", "dim", "=", "0", ")", "\n", "\n", "\n", "", "norm", "=", "torch", ".", "norm", "(", "centroids", ",", "dim", "=", "0", ")", ".", "sum", "(", ")", "\n", "\n", "if", "torch", ".", "abs", "(", "norm", "-", "prev_norm", ")", "<", "tol", ":", "\n", "            ", "print", "(", "'Converged'", ")", "\n", "return", "counts", ",", "centroids", "\n", "", "prev_norm", "=", "norm", "\n", "\n", "\n", "", "print", "(", "'Finished minibatch_k_means'", ")", "\n", "return", "counts", ",", "centroids", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.checks.check_minibatch_k_means.check_minibatch_k_means": [[15, 47], ["numpy.random.randn", "numpy.array", "numpy.array", "numpy.zeros", "deconv.gmm.data.DeconvDataset", "torch.DataLoader", "deconv.gmm.util.minibatch_k_means", "print", "print", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "matplotlib.subplots", "ax.scatter", "matplotlib.show", "np.random.randn.astype", "np.zeros.astype"], "function", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.util.minibatch_k_means"], ["def", "check_minibatch_k_means", "(", "plot", "=", "True", ")", ":", "\n", "\n", "    ", "x", "=", "np", ".", "random", ".", "randn", "(", "200", ",", "2", ")", "\n", "x", "[", ":", "100", ",", ":", "]", "+=", "np", ".", "array", "(", "[", "-", "200", ",", "0", "]", ")", "\n", "x", "[", "100", ":", ",", ":", "]", "+=", "np", ".", "array", "(", "[", "200", ",", "0", "]", ")", "\n", "\n", "noise_covars", "=", "np", ".", "zeros", "(", "(", "200", ",", "2", ",", "2", ")", ")", "\n", "\n", "data", "=", "DeconvDataset", "(", "\n", "torch", ".", "Tensor", "(", "x", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "\n", "torch", ".", "Tensor", "(", "\n", "noise_covars", ".", "astype", "(", "np", ".", "float32", ")", "\n", ")", "\n", ")", "\n", "\n", "loader", "=", "data_utils", ".", "DataLoader", "(", "\n", "data", ",", "\n", "batch_size", "=", "20", ",", "\n", "num_workers", "=", "4", ",", "\n", "shuffle", "=", "True", "\n", ")", "\n", "\n", "counts", ",", "centroids", "=", "minibatch_k_means", "(", "loader", ",", "2", ")", "\n", "\n", "print", "(", "centroids", ")", "\n", "print", "(", "counts", ")", "\n", "\n", "if", "plot", ":", "\n", "        ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "ax", ".", "scatter", "(", "x", "[", ":", ",", "0", "]", ",", "x", "[", ":", ",", "1", "]", ")", "\n", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.checks.check_batch_deconv_gmm.check_batch_deconv_gmm": [[14, 99], ["data.generate_data", "deconv.gmm.data.DeconvDataset", "deconv.gmm.data.DeconvDataset", "deconv.gmm.batch_deconv_gmm.BatchDeconvGMM", "deconv.gmm.batch_deconv_gmm.BatchDeconvGMM.fit", "deconv.gmm.batch_deconv_gmm.BatchDeconvGMM.score_batch", "deconv.gmm.batch_deconv_gmm.BatchDeconvGMM.score_batch", "print", "print", "torch.device", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "matplotlib.subplots", "ax.plot", "ax.plot", "ax.legend", "matplotlib.show", "matplotlib.subplots", "range", "ax.scatter", "range", "ax.legend", "matplotlib.show", "X_train.reshape().astype", "nc_train.reshape().astype", "X_test.reshape().astype", "nc_test.reshape().astype", "ax.scatter", "deconv.gmm.plotting.plot_covariance", "deconv.gmm.plotting.plot_covariance", "X_train.reshape", "nc_train.reshape", "X_test.reshape", "nc_test.reshape", "ax.scatter.get_facecolor", "ax.scatter.get_facecolor"], "function", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.checks.data.generate_data", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.fit", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score_batch", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score_batch", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.plotting.plot_covariance", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.plotting.plot_covariance"], ["def", "check_batch_deconv_gmm", "(", "D", ",", "K", ",", "N", ",", "plot", "=", "False", ",", "device", "=", "None", ",", "verbose", "=", "False", ")", ":", "\n", "\n", "    ", "if", "not", "device", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "data", ",", "params", "=", "generate_data", "(", "D", ",", "K", ",", "N", ")", "\n", "X_train", ",", "nc_train", ",", "X_test", ",", "nc_test", "=", "data", "\n", "means", ",", "covars", "=", "params", "\n", "\n", "train_data", "=", "DeconvDataset", "(", "\n", "torch", ".", "Tensor", "(", "X_train", ".", "reshape", "(", "-", "1", ",", "D", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "\n", "torch", ".", "Tensor", "(", "\n", "nc_train", ".", "reshape", "(", "-", "1", ",", "D", ",", "D", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", ")", "\n", ")", "\n", "\n", "test_data", "=", "DeconvDataset", "(", "\n", "torch", ".", "Tensor", "(", "X_test", ".", "reshape", "(", "-", "1", ",", "D", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "\n", "torch", ".", "Tensor", "(", "\n", "nc_test", ".", "reshape", "(", "-", "1", ",", "D", ",", "D", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", ")", "\n", ")", "\n", "\n", "gmm", "=", "BatchDeconvGMM", "(", "\n", "K", ",", "\n", "D", ",", "\n", "device", "=", "device", ",", "\n", "batch_size", "=", "500", ",", "\n", "step_size", "=", "1e-1", ",", "\n", "epochs", "=", "20", ",", "\n", "k_means_iters", "=", "20", ",", "\n", "lr_step", "=", "10", ",", "\n", "w", "=", "1e-3", "\n", ")", "\n", "gmm", ".", "fit", "(", "train_data", ",", "val_data", "=", "test_data", ",", "verbose", "=", "verbose", ")", "\n", "\n", "train_score", "=", "gmm", ".", "score_batch", "(", "train_data", ")", "\n", "test_score", "=", "gmm", ".", "score_batch", "(", "test_data", ")", "\n", "\n", "print", "(", "'Training score: {}'", ".", "format", "(", "train_score", ")", ")", "\n", "print", "(", "'Test score: {}'", ".", "format", "(", "test_score", ")", ")", "\n", "\n", "if", "plot", ":", "\n", "        ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "\n", "ax", ".", "plot", "(", "gmm", ".", "train_ll_curve", ",", "label", "=", "'Training LL'", ")", "\n", "ax", ".", "plot", "(", "gmm", ".", "val_ll_curve", ",", "label", "=", "'Validation LL'", ")", "\n", "ax", ".", "legend", "(", ")", "\n", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "K", ")", ":", "\n", "            ", "sc", "=", "ax", ".", "scatter", "(", "\n", "X_train", "[", ":", ",", "i", ",", "0", "]", ",", "\n", "X_train", "[", ":", ",", "i", ",", "1", "]", ",", "\n", "alpha", "=", "0.2", ",", "\n", "marker", "=", "'x'", ",", "\n", "label", "=", "'Cluster {}'", ".", "format", "(", "i", ")", "\n", ")", "\n", "plot_covariance", "(", "\n", "means", "[", "i", ",", ":", "]", ",", "\n", "covars", "[", "i", ",", ":", ",", ":", "]", ",", "\n", "ax", ",", "\n", "color", "=", "sc", ".", "get_facecolor", "(", ")", "[", "0", "]", "\n", ")", "\n", "\n", "", "sc", "=", "ax", ".", "scatter", "(", "\n", "gmm", ".", "means", "[", ":", ",", "0", "]", ",", "\n", "gmm", ".", "means", "[", ":", ",", "1", "]", ",", "\n", "marker", "=", "'+'", ",", "\n", "label", "=", "'Fitted Gaussians'", "\n", ")", "\n", "\n", "for", "i", "in", "range", "(", "K", ")", ":", "\n", "            ", "plot_covariance", "(", "\n", "gmm", ".", "means", "[", "i", ",", ":", "]", ",", "\n", "gmm", ".", "covars", "[", "i", ",", ":", ",", ":", "]", ",", "\n", "ax", ",", "\n", "color", "=", "sc", ".", "get_facecolor", "(", ")", "[", "0", "]", "\n", ")", "\n", "\n", "", "ax", ".", "legend", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.checks.check_sgd_deconv_gmm.check_sgd_deconv_gmm": [[13, 91], ["data.generate_data", "deconv.gmm.data.DeconvDataset", "deconv.gmm.data.DeconvDataset", "deconv.gmm.sgd_deconv_gmm.SGDDeconvGMM", "deconv.gmm.sgd_deconv_gmm.SGDDeconvGMM.fit", "deconv.gmm.sgd_deconv_gmm.SGDDeconvGMM.score_batch", "deconv.gmm.sgd_deconv_gmm.SGDDeconvGMM.score_batch", "print", "print", "torch.device", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "matplotlib.subplots", "ax.plot", "ax.plot", "matplotlib.subplots", "range", "ax.scatter", "range", "ax.legend", "matplotlib.show", "X_train.reshape().astype", "nc_train.reshape().astype", "X_test.reshape().astype", "nc_test.reshape().astype", "ax.scatter", "deconv.gmm.plotting.plot_covariance", "deconv.gmm.plotting.plot_covariance", "X_train.reshape", "nc_train.reshape", "X_test.reshape", "nc_test.reshape", "ax.scatter.get_facecolor", "ax.scatter.get_facecolor"], "function", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.checks.data.generate_data", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.fit", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score_batch", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score_batch", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.plotting.plot_covariance", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.plotting.plot_covariance"], ["def", "check_sgd_deconv_gmm", "(", "D", ",", "K", ",", "N", ",", "plot", "=", "False", ",", "verbose", "=", "False", ",", "device", "=", "None", ")", ":", "\n", "\n", "    ", "if", "not", "device", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "data", ",", "params", "=", "generate_data", "(", "D", ",", "K", ",", "N", ")", "\n", "X_train", ",", "nc_train", ",", "X_test", ",", "nc_test", "=", "data", "\n", "means", ",", "covars", "=", "params", "\n", "\n", "train_data", "=", "DeconvDataset", "(", "\n", "torch", ".", "Tensor", "(", "X_train", ".", "reshape", "(", "-", "1", ",", "D", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "\n", "torch", ".", "Tensor", "(", "\n", "nc_train", ".", "reshape", "(", "-", "1", ",", "D", ",", "D", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", ")", "\n", ")", "\n", "\n", "test_data", "=", "DeconvDataset", "(", "\n", "torch", ".", "Tensor", "(", "X_test", ".", "reshape", "(", "-", "1", ",", "D", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "\n", "torch", ".", "Tensor", "(", "\n", "nc_test", ".", "reshape", "(", "-", "1", ",", "D", ",", "D", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", ")", "\n", ")", "\n", "\n", "gmm", "=", "SGDDeconvGMM", "(", "\n", "K", ",", "\n", "D", ",", "\n", "device", "=", "device", ",", "\n", "batch_size", "=", "250", ",", "\n", "epochs", "=", "200", ",", "\n", "lr", "=", "1e-1", "\n", ")", "\n", "gmm", ".", "fit", "(", "train_data", ",", "val_data", "=", "test_data", ",", "verbose", "=", "verbose", ")", "\n", "train_score", "=", "gmm", ".", "score_batch", "(", "train_data", ")", "\n", "test_score", "=", "gmm", ".", "score_batch", "(", "test_data", ")", "\n", "\n", "print", "(", "'Training score: {}'", ".", "format", "(", "train_score", ")", ")", "\n", "print", "(", "'Test score: {}'", ".", "format", "(", "test_score", ")", ")", "\n", "\n", "if", "plot", ":", "\n", "        ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "\n", "ax", ".", "plot", "(", "gmm", ".", "train_loss_curve", ",", "label", "=", "'Training Loss'", ")", "\n", "ax", ".", "plot", "(", "gmm", ".", "val_loss_curve", ",", "label", "=", "'Validation Loss'", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "K", ")", ":", "\n", "            ", "sc", "=", "ax", ".", "scatter", "(", "\n", "X_train", "[", ":", ",", "i", ",", "0", "]", ",", "\n", "X_train", "[", ":", ",", "i", ",", "1", "]", ",", "\n", "alpha", "=", "0.2", ",", "\n", "marker", "=", "'x'", ",", "\n", "label", "=", "'Cluster {}'", ".", "format", "(", "i", ")", "\n", ")", "\n", "plot_covariance", "(", "\n", "means", "[", "i", ",", ":", "]", ",", "\n", "covars", "[", "i", ",", ":", ",", ":", "]", ",", "\n", "ax", ",", "\n", "color", "=", "sc", ".", "get_facecolor", "(", ")", "[", "0", "]", "\n", ")", "\n", "\n", "", "sc", "=", "ax", ".", "scatter", "(", "\n", "gmm", ".", "means", "[", ":", ",", "0", "]", ",", "\n", "gmm", ".", "means", "[", ":", ",", "1", "]", ",", "\n", "marker", "=", "'+'", ",", "\n", "label", "=", "'Fitted Gaussians'", "\n", ")", "\n", "\n", "for", "i", "in", "range", "(", "K", ")", ":", "\n", "            ", "plot_covariance", "(", "\n", "gmm", ".", "means", "[", "i", ",", ":", "]", ",", "\n", "gmm", ".", "covars", "[", "i", ",", ":", ",", ":", "]", ",", "\n", "ax", ",", "\n", "color", "=", "sc", ".", "get_facecolor", "(", ")", "[", "0", "]", "\n", ")", "\n", "\n", "", "ax", ".", "legend", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.checks.data.generate_data": [[4, 38], ["numpy.matmul", "numpy.empty", "range", "numpy.random.permutation", "numpy.random.randn", "q.swapaxes", "numpy.random.randn", "numpy.matmul", "numpy.random.multivariate_normal", "range", "numpy.random.rand", "qn.swapaxes", "numpy.eye", "numpy.random.multivariate_normal", "numpy.zeros"], "function", ["None"], ["def", "generate_data", "(", "D", ",", "K", ",", "N", ")", ":", "\n", "    ", "means", "=", "(", "np", ".", "random", ".", "rand", "(", "K", ",", "D", ")", "*", "20", ")", "-", "10", "\n", "q", "=", "(", "2", "*", "np", ".", "random", ".", "randn", "(", "K", ",", "D", ",", "D", ")", ")", "\n", "covars", "=", "np", ".", "matmul", "(", "q", ".", "swapaxes", "(", "1", ",", "2", ")", ",", "q", ")", "\n", "\n", "qn", "=", "(", "0.5", "*", "np", ".", "random", ".", "randn", "(", "2", "*", "N", ",", "K", ",", "D", ",", "D", ")", ")", "\n", "noise_covars", "=", "np", ".", "matmul", "(", "qn", ".", "swapaxes", "(", "2", ",", "3", ")", ",", "qn", ")", "+", "1e-3", "*", "np", ".", "eye", "(", "D", ")", "\n", "\n", "X", "=", "np", ".", "empty", "(", "(", "2", "*", "N", ",", "K", ",", "D", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "K", ")", ":", "\n", "        ", "X", "[", ":", ",", "i", ",", ":", "]", "=", "np", ".", "random", ".", "multivariate_normal", "(", "\n", "mean", "=", "means", "[", "i", ",", ":", "]", ",", "\n", "cov", "=", "covars", "[", "i", ",", ":", ",", ":", "]", ",", "\n", "size", "=", "2", "*", "N", "\n", ")", "\n", "for", "j", "in", "range", "(", "2", "*", "N", ")", ":", "\n", "            ", "X", "[", "j", ",", "i", ",", ":", "]", "+=", "np", ".", "random", ".", "multivariate_normal", "(", "\n", "mean", "=", "np", ".", "zeros", "(", "D", ")", ",", "\n", "cov", "=", "noise_covars", "[", "j", ",", "i", ",", ":", ",", ":", "]", "\n", ")", "\n", "\n", "", "", "p", "=", "np", ".", "random", ".", "permutation", "(", "2", "*", "N", ")", "\n", "\n", "X_train", "=", "X", "[", "p", ",", ":", "]", "[", ":", "N", "]", "\n", "X_test", "=", "X", "[", "p", ",", ":", "]", "[", "N", ":", "]", "\n", "\n", "nc_train", "=", "noise_covars", "[", "p", ",", ":", ",", ":", "]", "[", ":", "N", "]", "\n", "nc_test", "=", "noise_covars", "[", "p", ",", ":", ",", ":", "]", "[", "N", ":", "]", "\n", "\n", "data", "=", "(", "X_train", ",", "nc_train", ",", "X_test", ",", "nc_test", ")", "\n", "params", "=", "(", "means", ",", "covars", ")", "\n", "\n", "return", "data", ",", "params", "\n", "", ""]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.checks.check_online_deconv_gmm.check_online_deconv_gmm": [[14, 99], ["data.generate_data", "deconv.gmm.data.DeconvDataset", "deconv.gmm.data.DeconvDataset", "deconv.gmm.online_deconv_gmm.OnlineDeconvGMM", "deconv.gmm.online_deconv_gmm.OnlineDeconvGMM.fit", "deconv.gmm.online_deconv_gmm.OnlineDeconvGMM.score_batch", "deconv.gmm.online_deconv_gmm.OnlineDeconvGMM.score_batch", "print", "print", "torch.device", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "matplotlib.subplots", "ax.plot", "ax.plot", "ax.legend", "matplotlib.show", "matplotlib.subplots", "range", "ax.scatter", "range", "ax.legend", "matplotlib.show", "X_train.reshape().astype", "nc_train.reshape().astype", "X_test.reshape().astype", "nc_test.reshape().astype", "ax.scatter", "deconv.gmm.plotting.plot_covariance", "deconv.gmm.plotting.plot_covariance", "X_train.reshape", "nc_train.reshape", "X_test.reshape", "nc_test.reshape", "ax.scatter.get_facecolor", "ax.scatter.get_facecolor"], "function", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.checks.data.generate_data", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.fit", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score_batch", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score_batch", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.plotting.plot_covariance", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.plotting.plot_covariance"], ["def", "check_online_deconv_gmm", "(", "D", ",", "K", ",", "N", ",", "plot", "=", "False", ",", "device", "=", "None", ",", "verbose", "=", "False", ")", ":", "\n", "\n", "    ", "if", "not", "device", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "data", ",", "params", "=", "generate_data", "(", "D", ",", "K", ",", "N", ")", "\n", "X_train", ",", "nc_train", ",", "X_test", ",", "nc_test", "=", "data", "\n", "means", ",", "covars", "=", "params", "\n", "\n", "train_data", "=", "DeconvDataset", "(", "\n", "torch", ".", "Tensor", "(", "X_train", ".", "reshape", "(", "-", "1", ",", "D", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "\n", "torch", ".", "Tensor", "(", "\n", "nc_train", ".", "reshape", "(", "-", "1", ",", "D", ",", "D", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", ")", "\n", ")", "\n", "\n", "test_data", "=", "DeconvDataset", "(", "\n", "torch", ".", "Tensor", "(", "X_test", ".", "reshape", "(", "-", "1", ",", "D", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "\n", "torch", ".", "Tensor", "(", "\n", "nc_test", ".", "reshape", "(", "-", "1", ",", "D", ",", "D", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", ")", "\n", ")", "\n", "\n", "gmm", "=", "OnlineDeconvGMM", "(", "\n", "K", ",", "\n", "D", ",", "\n", "device", "=", "device", ",", "\n", "batch_size", "=", "500", ",", "\n", "step_size", "=", "1e-1", ",", "\n", "epochs", "=", "20", ",", "\n", "k_means_iters", "=", "20", ",", "\n", "lr_step", "=", "10", ",", "\n", "w", "=", "1e-3", "\n", ")", "\n", "gmm", ".", "fit", "(", "train_data", ",", "val_data", "=", "test_data", ",", "verbose", "=", "verbose", ")", "\n", "\n", "train_score", "=", "gmm", ".", "score_batch", "(", "train_data", ")", "\n", "test_score", "=", "gmm", ".", "score_batch", "(", "test_data", ")", "\n", "\n", "print", "(", "'Training score: {}'", ".", "format", "(", "train_score", ")", ")", "\n", "print", "(", "'Test score: {}'", ".", "format", "(", "test_score", ")", ")", "\n", "\n", "if", "plot", ":", "\n", "        ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "\n", "ax", ".", "plot", "(", "gmm", ".", "train_ll_curve", ",", "label", "=", "'Training LL'", ")", "\n", "ax", ".", "plot", "(", "gmm", ".", "val_ll_curve", ",", "label", "=", "'Validation LL'", ")", "\n", "ax", ".", "legend", "(", ")", "\n", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "K", ")", ":", "\n", "            ", "sc", "=", "ax", ".", "scatter", "(", "\n", "X_train", "[", ":", ",", "i", ",", "0", "]", ",", "\n", "X_train", "[", ":", ",", "i", ",", "1", "]", ",", "\n", "alpha", "=", "0.2", ",", "\n", "marker", "=", "'x'", ",", "\n", "label", "=", "'Cluster {}'", ".", "format", "(", "i", ")", "\n", ")", "\n", "plot_covariance", "(", "\n", "means", "[", "i", ",", ":", "]", ",", "\n", "covars", "[", "i", ",", ":", ",", ":", "]", ",", "\n", "ax", ",", "\n", "color", "=", "sc", ".", "get_facecolor", "(", ")", "[", "0", "]", "\n", ")", "\n", "\n", "", "sc", "=", "ax", ".", "scatter", "(", "\n", "gmm", ".", "means", "[", ":", ",", "0", "]", ",", "\n", "gmm", ".", "means", "[", ":", ",", "1", "]", ",", "\n", "marker", "=", "'+'", ",", "\n", "label", "=", "'Fitted Gaussians'", "\n", ")", "\n", "\n", "for", "i", "in", "range", "(", "K", ")", ":", "\n", "            ", "plot_covariance", "(", "\n", "gmm", ".", "means", "[", "i", ",", ":", "]", ",", "\n", "gmm", ".", "covars", "[", "i", ",", ":", ",", ":", "]", ",", "\n", "ax", ",", "\n", "color", "=", "sc", ".", "get_facecolor", "(", ")", "[", "0", "]", "\n", ")", "\n", "\n", "", "ax", ".", "legend", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.checks.check_gmm.check_gmm": [[11, 70], ["numpy.matmul", "numpy.empty", "range", "torch.Tensor().to", "deconv.gmm.gmm.GMM", "deconv.gmm.gmm.GMM.fit", "torch.device", "numpy.random.randn", "q.swapaxes", "numpy.random.multivariate_normal", "matplotlib.subplots", "range", "ax.scatter", "range", "ax.legend", "matplotlib.show", "numpy.random.rand", "torch.Tensor", "ax.scatter", "deconv.gmm.plotting.plot_covariance", "deconv.gmm.plotting.plot_covariance", "np.empty.reshape().astype", "np.empty.reshape", "ax.scatter.get_facecolor", "ax.scatter.get_facecolor"], "function", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.fit", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.plotting.plot_covariance", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.plotting.plot_covariance"], ["def", "check_gmm", "(", "D", ",", "K", ",", "N", ",", "plot", "=", "False", ",", "device", "=", "None", ")", ":", "\n", "\n", "    ", "if", "not", "device", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "means", "=", "(", "np", ".", "random", ".", "rand", "(", "K", ",", "D", ")", "*", "20", ")", "-", "10", "\n", "q", "=", "(", "2", "*", "np", ".", "random", ".", "randn", "(", "K", ",", "D", ",", "D", ")", ")", "\n", "covars", "=", "np", ".", "matmul", "(", "q", ".", "swapaxes", "(", "1", ",", "2", ")", ",", "q", ")", "\n", "\n", "X", "=", "np", ".", "empty", "(", "(", "N", ",", "K", ",", "D", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "K", ")", ":", "\n", "        ", "X", "[", ":", ",", "i", ",", ":", "]", "=", "np", ".", "random", ".", "multivariate_normal", "(", "\n", "mean", "=", "means", "[", "i", ",", ":", "]", ",", "\n", "cov", "=", "covars", "[", "i", ",", ":", ",", ":", "]", ",", "\n", "size", "=", "N", "\n", ")", "\n", "\n", "", "X_data", "=", "torch", ".", "Tensor", "(", "X", ".", "reshape", "(", "-", "1", ",", "D", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "to", "(", "device", ")", "\n", "\n", "gmm", "=", "GMM", "(", "K", ",", "D", ",", "epochs", "=", "1000", ",", "device", "=", "device", ")", "\n", "gmm", ".", "fit", "(", "(", "X_data", ",", ")", ")", "\n", "\n", "if", "plot", ":", "\n", "        ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "K", ")", ":", "\n", "            ", "sc", "=", "ax", ".", "scatter", "(", "\n", "X", "[", ":", ",", "i", ",", "0", "]", ",", "\n", "X", "[", ":", ",", "i", ",", "1", "]", ",", "\n", "alpha", "=", "0.2", ",", "\n", "marker", "=", "'x'", ",", "\n", "label", "=", "'Cluster {}'", ".", "format", "(", "i", ")", "\n", ")", "\n", "plot_covariance", "(", "\n", "means", "[", "i", ",", ":", "]", ",", "\n", "covars", "[", "i", ",", ":", ",", ":", "]", ",", "\n", "ax", ",", "\n", "color", "=", "sc", ".", "get_facecolor", "(", ")", "[", "0", "]", "\n", ")", "\n", "\n", "", "sc", "=", "ax", ".", "scatter", "(", "\n", "gmm", ".", "means", "[", ":", ",", "0", "]", ",", "\n", "gmm", ".", "means", "[", ":", ",", "1", "]", ",", "\n", "marker", "=", "'+'", ",", "\n", "label", "=", "'Fitted Gaussians'", "\n", ")", "\n", "\n", "for", "i", "in", "range", "(", "K", ")", ":", "\n", "\n", "            ", "plot_covariance", "(", "\n", "gmm", ".", "means", "[", "i", ",", ":", "]", ",", "\n", "gmm", ".", "covars", "[", "i", ",", ":", ",", ":", "]", ",", "\n", "ax", ",", "\n", "color", "=", "sc", ".", "get_facecolor", "(", ")", "[", "0", "]", "\n", ")", "\n", "\n", "", "ax", ".", "legend", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.checks.check_sgd_gmm.check_sgd_gmm": [[11, 70], ["numpy.matmul", "numpy.empty", "range", "deconv.gmm.sgd_gmm.SGDGMM", "deconv.gmm.sgd_gmm.SGDGMM.fit", "torch.device", "numpy.random.randn", "q.swapaxes", "numpy.random.multivariate_normal", "torch.Tensor", "matplotlib.subplots", "range", "ax.scatter", "range", "ax.legend", "matplotlib.show", "numpy.random.rand", "np.empty.reshape().astype", "ax.scatter", "deconv.gmm.plotting.plot_covariance", "deconv.gmm.plotting.plot_covariance", "np.empty.reshape", "ax.scatter.get_facecolor", "ax.scatter.get_facecolor"], "function", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.fit", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.plotting.plot_covariance", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.plotting.plot_covariance"], ["def", "check_sgd_gmm", "(", "D", ",", "K", ",", "N", ",", "plot", "=", "False", ",", "device", "=", "None", ")", ":", "\n", "\n", "    ", "if", "not", "device", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "means", "=", "(", "np", ".", "random", ".", "rand", "(", "K", ",", "D", ")", "*", "20", ")", "-", "10", "\n", "q", "=", "(", "2", "*", "np", ".", "random", ".", "randn", "(", "K", ",", "D", ",", "D", ")", ")", "\n", "covars", "=", "np", ".", "matmul", "(", "q", ".", "swapaxes", "(", "1", ",", "2", ")", ",", "q", ")", "\n", "\n", "X", "=", "np", ".", "empty", "(", "(", "N", ",", "K", ",", "D", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "K", ")", ":", "\n", "        ", "X", "[", ":", ",", "i", ",", ":", "]", "=", "np", ".", "random", ".", "multivariate_normal", "(", "\n", "mean", "=", "means", "[", "i", ",", ":", "]", ",", "\n", "cov", "=", "covars", "[", "i", ",", ":", ",", ":", "]", ",", "\n", "size", "=", "N", "\n", ")", "\n", "\n", "", "X_data", "=", "[", "torch", ".", "Tensor", "(", "X", ".", "reshape", "(", "-", "1", ",", "D", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", "]", "\n", "\n", "gmm", "=", "SGDGMM", "(", "K", ",", "D", ",", "device", "=", "device", ",", "epochs", "=", "200", ")", "\n", "gmm", ".", "fit", "(", "X_data", ")", "\n", "\n", "if", "plot", ":", "\n", "        ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "K", ")", ":", "\n", "            ", "sc", "=", "ax", ".", "scatter", "(", "\n", "X", "[", ":", ",", "i", ",", "0", "]", ",", "\n", "X", "[", ":", ",", "i", ",", "1", "]", ",", "\n", "alpha", "=", "0.2", ",", "\n", "marker", "=", "'x'", ",", "\n", "label", "=", "'Cluster {}'", ".", "format", "(", "i", ")", "\n", ")", "\n", "plot_covariance", "(", "\n", "means", "[", "i", ",", ":", "]", ",", "\n", "covars", "[", "i", ",", ":", ",", ":", "]", ",", "\n", "ax", ",", "\n", "color", "=", "sc", ".", "get_facecolor", "(", ")", "[", "0", "]", "\n", ")", "\n", "\n", "", "sc", "=", "ax", ".", "scatter", "(", "\n", "gmm", ".", "means", "[", ":", ",", "0", "]", ",", "\n", "gmm", ".", "means", "[", ":", ",", "1", "]", ",", "\n", "marker", "=", "'+'", ",", "\n", "label", "=", "'Fitted Gaussians'", "\n", ")", "\n", "\n", "for", "i", "in", "range", "(", "K", ")", ":", "\n", "\n", "            ", "plot_covariance", "(", "\n", "gmm", ".", "means", "[", "i", ",", ":", "]", ",", "\n", "gmm", ".", "covars", "[", "i", ",", ":", ",", ":", "]", ",", "\n", "ax", ",", "\n", "color", "=", "sc", ".", "get_facecolor", "(", ")", "[", "0", "]", "\n", ")", "\n", "\n", "", "ax", ".", "legend", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.checks.check_deconv_gmm.check_deconv_gmm": [[11, 82], ["numpy.matmul", "numpy.matmul", "numpy.empty", "range", "deconv.gmm.deconv_gmm.DeconvGMM", "deconv.gmm.deconv_gmm.DeconvGMM.fit", "torch.device", "numpy.random.randn", "q.swapaxes", "numpy.random.randn", "qn.swapaxes", "numpy.random.multivariate_normal", "range", "torch.Tensor().to", "torch.Tensor().to", "matplotlib.subplots", "range", "ax.scatter", "range", "ax.legend", "matplotlib.show", "numpy.random.rand", "numpy.random.multivariate_normal", "ax.scatter", "deconv.gmm.plotting.plot_covariance", "deconv.gmm.plotting.plot_covariance", "torch.Tensor", "torch.Tensor", "numpy.zeros", "np.empty.reshape().astype", "np.matmul.reshape().astype", "ax.scatter.get_facecolor", "ax.scatter.get_facecolor", "np.empty.reshape", "np.matmul.reshape"], "function", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.fit", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.plotting.plot_covariance", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.plotting.plot_covariance"], ["def", "check_deconv_gmm", "(", "D", ",", "K", ",", "N", ",", "plot", "=", "False", ",", "device", "=", "None", ")", ":", "\n", "\n", "    ", "if", "not", "device", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "means", "=", "(", "np", ".", "random", ".", "rand", "(", "K", ",", "D", ")", "*", "20", ")", "-", "10", "\n", "q", "=", "(", "2", "*", "np", ".", "random", ".", "randn", "(", "K", ",", "D", ",", "D", ")", ")", "\n", "covars", "=", "np", ".", "matmul", "(", "q", ".", "swapaxes", "(", "1", ",", "2", ")", ",", "q", ")", "\n", "\n", "qn", "=", "(", "0.5", "*", "np", ".", "random", ".", "randn", "(", "N", ",", "K", ",", "D", ",", "D", ")", ")", "\n", "noise_covars", "=", "np", ".", "matmul", "(", "qn", ".", "swapaxes", "(", "2", ",", "3", ")", ",", "qn", ")", "\n", "\n", "X", "=", "np", ".", "empty", "(", "(", "N", ",", "K", ",", "D", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "K", ")", ":", "\n", "        ", "X", "[", ":", ",", "i", ",", ":", "]", "=", "np", ".", "random", ".", "multivariate_normal", "(", "\n", "mean", "=", "means", "[", "i", ",", ":", "]", ",", "\n", "cov", "=", "covars", "[", "i", ",", ":", ",", ":", "]", ",", "\n", "size", "=", "N", "\n", ")", "\n", "for", "j", "in", "range", "(", "N", ")", ":", "\n", "            ", "X", "[", "j", ",", "i", ",", ":", "]", "+=", "np", ".", "random", ".", "multivariate_normal", "(", "\n", "mean", "=", "np", ".", "zeros", "(", "D", ")", ",", "\n", "cov", "=", "noise_covars", "[", "j", ",", "i", ",", ":", ",", ":", "]", "\n", ")", "\n", "\n", "", "", "data", "=", "(", "\n", "torch", ".", "Tensor", "(", "X", ".", "reshape", "(", "-", "1", ",", "D", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "to", "(", "device", ")", ",", "\n", "torch", ".", "Tensor", "(", "\n", "noise_covars", ".", "reshape", "(", "-", "1", ",", "D", ",", "D", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", ")", ".", "to", "(", "device", ")", "\n", ")", "\n", "\n", "gmm", "=", "DeconvGMM", "(", "K", ",", "D", ",", "epochs", "=", "1000", ",", "device", "=", "device", ")", "\n", "gmm", ".", "fit", "(", "data", ")", "\n", "\n", "if", "plot", ":", "\n", "        ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "K", ")", ":", "\n", "            ", "sc", "=", "ax", ".", "scatter", "(", "\n", "X", "[", ":", ",", "i", ",", "0", "]", ",", "\n", "X", "[", ":", ",", "i", ",", "1", "]", ",", "\n", "alpha", "=", "0.2", ",", "\n", "marker", "=", "'x'", ",", "\n", "label", "=", "'Cluster {}'", ".", "format", "(", "i", ")", "\n", ")", "\n", "plot_covariance", "(", "\n", "means", "[", "i", ",", ":", "]", ",", "\n", "covars", "[", "i", ",", ":", ",", ":", "]", ",", "\n", "ax", ",", "\n", "color", "=", "sc", ".", "get_facecolor", "(", ")", "[", "0", "]", "\n", ")", "\n", "\n", "", "sc", "=", "ax", ".", "scatter", "(", "\n", "gmm", ".", "means", "[", ":", ",", "0", "]", ",", "\n", "gmm", ".", "means", "[", ":", ",", "1", "]", ",", "\n", "marker", "=", "'+'", ",", "\n", "label", "=", "'Fitted Gaussians'", "\n", ")", "\n", "\n", "for", "i", "in", "range", "(", "K", ")", ":", "\n", "            ", "plot_covariance", "(", "\n", "gmm", ".", "means", "[", "i", ",", ":", "]", ",", "\n", "gmm", ".", "covars", "[", "i", ",", ":", ",", ":", "]", ",", "\n", "ax", ",", "\n", "color", "=", "sc", ".", "get_facecolor", "(", ")", "[", "0", "]", "\n", ")", "\n", "\n", "", "ax", ".", "legend", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.variable_k.fit_gaia_lim_sgd.fit_gaia_lim_sgd": [[13, 65], ["numpy.load", "deconv.gmm.data.DeconvDataset", "deconv.gmm.data.DeconvDataset", "deconv.gmm.sgd_deconv_gmm.SGDDeconvGMM", "time.time", "deconv.gmm.sgd_deconv_gmm.SGDDeconvGMM.fit", "time.time", "deconv.gmm.sgd_deconv_gmm.SGDDeconvGMM.score_batch", "deconv.gmm.sgd_deconv_gmm.SGDDeconvGMM.score_batch", "print", "print", "json.dump", "torch.save", "torch.device", "torch.device", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "open", "deconv.gmm.sgd_deconv_gmm.SGDDeconvGMM.module.state_dict", "str"], "function", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.fit", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score_batch", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score_batch"], ["def", "fit_gaia_lim_sgd", "(", "datafile", ",", "output_prefix", ",", "K", ",", "batch_size", ",", "epochs", ",", "lr", ",", "\n", "w_reg", ",", "k_means_iters", ",", "lr_step", ",", "lr_gamma", ",", "\n", "use_cuda", ")", ":", "\n", "    ", "data", "=", "np", ".", "load", "(", "datafile", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "train_data", "=", "DeconvDataset", "(", "\n", "torch", ".", "Tensor", "(", "data", "[", "'X_train'", "]", ")", ",", "\n", "torch", ".", "Tensor", "(", "data", "[", "'C_train'", "]", ")", "\n", ")", "\n", "\n", "val_data", "=", "DeconvDataset", "(", "\n", "torch", ".", "Tensor", "(", "data", "[", "'X_val'", "]", ")", ",", "\n", "torch", ".", "Tensor", "(", "data", "[", "'C_val'", "]", ")", "\n", ")", "\n", "\n", "gmm", "=", "SGDDeconvGMM", "(", "\n", "K", ",", "\n", "7", ",", "\n", "device", "=", "device", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "epochs", "=", "epochs", ",", "\n", "w", "=", "w_reg", ",", "\n", "k_means_iters", "=", "k_means_iters", ",", "\n", "lr", "=", "lr", ",", "\n", "lr_step", "=", "lr_step", ",", "\n", "lr_gamma", "=", "lr_gamma", "\n", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "gmm", ".", "fit", "(", "train_data", ",", "val_data", "=", "val_data", ",", "verbose", "=", "True", ")", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "train_score", "=", "gmm", ".", "score_batch", "(", "train_data", ")", "\n", "val_score", "=", "gmm", ".", "score_batch", "(", "val_data", ")", "\n", "\n", "print", "(", "'Training score: {}'", ".", "format", "(", "train_score", ")", ")", "\n", "print", "(", "'Val score: {}'", ".", "format", "(", "val_score", ")", ")", "\n", "\n", "results", "=", "{", "\n", "'start_time'", ":", "start_time", ",", "\n", "'end_time'", ":", "end_time", ",", "\n", "'train_score'", ":", "train_score", ",", "\n", "'val_score'", ":", "val_score", ",", "\n", "'train_curve'", ":", "gmm", ".", "train_loss_curve", ",", "\n", "'val_curve'", ":", "gmm", ".", "val_loss_curve", "\n", "}", "\n", "json", ".", "dump", "(", "results", ",", "open", "(", "str", "(", "output_prefix", ")", "+", "'_results.json'", ",", "mode", "=", "'w'", ")", ")", "\n", "torch", ".", "save", "(", "gmm", ".", "module", ".", "state_dict", "(", ")", ",", "output_prefix", "+", "'_params.pkl'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.variable_k.score_test_baseline.score_baseline": [[10, 45], ["numpy.load", "os.listdir", "print", "json.dump", "numpy.load", "extreme_deconvolution.extreme_deconvolution", "print", "scores.append", "open", "numpy.mean", "numpy.std", "f.startswith", "f.endswith"], "function", ["None"], ["def", "score_baseline", "(", "datafile", ",", "results_dir", ",", "output_file", ")", ":", "\n", "    ", "data", "=", "np", ".", "load", "(", "datafile", ")", "\n", "\n", "rf", "=", "os", ".", "listdir", "(", "results_dir", ")", "\n", "\n", "param_files", "=", "[", "\n", "f", "for", "f", "in", "rf", "if", "f", ".", "startswith", "(", "'baseline_512'", ")", "and", "f", ".", "endswith", "(", "'.npz'", ")", "\n", "]", "\n", "\n", "scores", "=", "[", "]", "\n", "\n", "for", "p", "in", "param_files", ":", "\n", "        ", "params", "=", "np", ".", "load", "(", "results_dir", "+", "p", ")", "\n", "weights", "=", "params", "[", "'weights'", "]", "\n", "means", "=", "params", "[", "'means'", "]", "\n", "covars", "=", "params", "[", "'covar'", "]", "\n", "\n", "test_score", "=", "extreme_deconvolution", "(", "\n", "data", "[", "'X_test'", "]", ",", "\n", "data", "[", "'C_test'", "]", ",", "\n", "weights", ",", "\n", "means", ",", "\n", "covars", ",", "\n", "likeonly", "=", "True", "\n", ")", "\n", "print", "(", "test_score", ")", "\n", "\n", "scores", ".", "append", "(", "test_score", ")", "\n", "\n", "", "print", "(", "'Test Score: {} +- {}'", ".", "format", "(", "\n", "np", ".", "mean", "(", "scores", ")", ",", "\n", "np", ".", "std", "(", "scores", ")", "\n", ")", ")", "\n", "\n", "json", ".", "dump", "(", "scores", ",", "open", "(", "output_file", ",", "'w'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.variable_k.fit_gaia_baseline.fit_gaia_baseline": [[16, 81], ["numpy.load", "deconv.gmm.sgd_deconv_gmm.SGDDeconvDataset", "torch.DataLoader", "time.time", "deconv.gmm.util.minibatch_k_means", "centroids.numpy", "numpy.array", "extreme_deconvolution.extreme_deconvolution", "time.time", "extreme_deconvolution.extreme_deconvolution", "print", "print", "json.dump", "numpy.savez", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "open", "counts.sum", "numpy.eye", "str", "str"], "function", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.util.minibatch_k_means"], ["def", "fit_gaia_baseline", "(", "datafile", ",", "output_prefix", ",", "K", ",", "epochs", ",", "w_reg", ",", "\n", "k_means_iters", ")", ":", "\n", "    ", "data", "=", "np", ".", "load", "(", "datafile", ")", "\n", "\n", "train_data", "=", "SGDDeconvDataset", "(", "\n", "torch", ".", "Tensor", "(", "data", "[", "'X_train'", "]", ")", ",", "\n", "torch", ".", "Tensor", "(", "data", "[", "'C_train'", "]", ")", "\n", ")", "\n", "\n", "loader", "=", "data_utils", ".", "DataLoader", "(", "\n", "train_data", ",", "\n", "batch_size", "=", "5000", ",", "\n", "num_workers", "=", "4", ",", "\n", "shuffle", "=", "True", "\n", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "counts", ",", "centroids", "=", "minibatch_k_means", "(", "loader", ",", "k", "=", "K", ",", "max_iters", "=", "10", ")", "\n", "\n", "weights", "=", "(", "counts", "/", "counts", ".", "sum", "(", ")", ")", ".", "numpy", "(", ")", "\n", "means", "=", "centroids", ".", "numpy", "(", ")", "\n", "covars", "=", "np", ".", "array", "(", "K", "*", "[", "np", ".", "eye", "(", "7", ")", "]", ")", "\n", "\n", "ll", "=", "extreme_deconvolution", "(", "\n", "data", "[", "'X_train'", "]", ",", "\n", "data", "[", "'C_train'", "]", ",", "\n", "weights", ",", "\n", "means", ",", "\n", "covars", ",", "\n", "w", "=", "w_reg", ",", "\n", "logfile", "=", "str", "(", "output_prefix", ")", "+", "'_log'", ",", "\n", "maxiter", "=", "epochs", "\n", ")", "\n", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "train_score", "=", "ll", "*", "data", "[", "'X_train'", "]", ".", "shape", "[", "0", "]", "\n", "\n", "val_ll", "=", "extreme_deconvolution", "(", "\n", "data", "[", "'X_val'", "]", ",", "\n", "data", "[", "'C_val'", "]", ",", "\n", "weights", ",", "\n", "means", ",", "\n", "covars", ",", "\n", "w", "=", "w_reg", ",", "\n", "likeonly", "=", "True", "\n", ")", "\n", "val_score", "=", "val_ll", "*", "data", "[", "'X_val'", "]", ".", "shape", "[", "0", "]", "\n", "\n", "print", "(", "'Training score: {}'", ".", "format", "(", "train_score", ")", ")", "\n", "print", "(", "'Val score: {}'", ".", "format", "(", "val_score", ")", ")", "\n", "\n", "results", "=", "{", "\n", "'start_time'", ":", "start_time", ",", "\n", "'end_time'", ":", "end_time", ",", "\n", "'train_score'", ":", "train_score", ",", "\n", "'val_score'", ":", "val_score", ",", "\n", "}", "\n", "\n", "json", ".", "dump", "(", "results", ",", "open", "(", "str", "(", "output_prefix", ")", "+", "'_results.json'", ",", "mode", "=", "'w'", ")", ")", "\n", "np", ".", "savez", "(", "\n", "output_prefix", "+", "'_params.npz'", ",", "\n", "weights", "=", "weights", ",", "\n", "means", "=", "means", ",", "\n", "covar", "=", "covars", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.variable_k.score_test_sgd.score_sgd": [[12, 52], ["numpy.load", "SGDDeconvDataset", "os.listdir", "deconv.gmm.sgd_deconv_gmm.SGDDeconvGMM", "print", "json.dump", "torch.Tensor", "torch.Tensor", "torch.load", "deconv.gmm.sgd_deconv_gmm.SGDDeconvGMM.module.load_state_dict", "deconv.gmm.sgd_deconv_gmm.SGDDeconvGMM.score_batch", "print", "scores.append", "open", "numpy.mean", "numpy.std", "f.startswith", "f.endswith", "torch.device"], "function", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score_batch"], ["def", "score_sgd", "(", "datafile", ",", "results_dir", ",", "output_file", ")", ":", "\n", "    ", "data", "=", "np", ".", "load", "(", "datafile", ")", "\n", "\n", "test_data", "=", "SGDDeconvDataset", "(", "\n", "torch", ".", "Tensor", "(", "data", "[", "'X_test'", "]", ")", ",", "\n", "torch", ".", "Tensor", "(", "data", "[", "'C_test'", "]", ")", "\n", ")", "\n", "\n", "rf", "=", "os", ".", "listdir", "(", "results_dir", ")", "\n", "\n", "param_files", "=", "[", "\n", "f", "for", "f", "in", "rf", "if", "f", ".", "startswith", "(", "'sgd_512'", ")", "and", "f", ".", "endswith", "(", "'.pkl'", ")", "\n", "]", "\n", "\n", "gmm", "=", "SGDDeconvGMM", "(", "\n", "512", ",", "\n", "7", ",", "\n", "batch_size", "=", "500", "\n", ")", "\n", "\n", "scores", "=", "[", "]", "\n", "\n", "for", "p", "in", "param_files", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "\n", "results_dir", "+", "p", ",", "\n", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", ")", "\n", "gmm", ".", "module", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "test_score", "=", "gmm", ".", "score_batch", "(", "test_data", ")", "\n", "print", "(", "test_score", ")", "\n", "\n", "scores", ".", "append", "(", "test_score", ")", "\n", "\n", "", "print", "(", "'Test Score: {} +- {}'", ".", "format", "(", "\n", "np", ".", "mean", "(", "scores", ")", ",", "\n", "np", ".", "std", "(", "scores", ")", "\n", ")", ")", "\n", "\n", "json", ".", "dump", "(", "scores", ",", "open", "(", "output_file", ",", "'w'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.variable_k.score_test_em.score_em": [[12, 54], ["numpy.load", "SGDDeconvDataset", "os.listdir", "deconv.gmm.online_deconv_gmm.OnlineDeconvGMM", "print", "json.dump", "torch.Tensor", "torch.Tensor", "torch.load", "deconv.gmm.online_deconv_gmm.OnlineDeconvGMM.score_batch", "print", "scores.append", "open", "numpy.mean", "numpy.std", "f.startswith", "f.endswith", "torch.device"], "function", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score_batch"], ["def", "score_em", "(", "datafile", ",", "results_dir", ",", "output_file", ")", ":", "\n", "    ", "data", "=", "np", ".", "load", "(", "datafile", ")", "\n", "\n", "test_data", "=", "SGDDeconvDataset", "(", "\n", "torch", ".", "Tensor", "(", "data", "[", "'X_test'", "]", ")", ",", "\n", "torch", ".", "Tensor", "(", "data", "[", "'C_test'", "]", ")", "\n", ")", "\n", "\n", "rf", "=", "os", ".", "listdir", "(", "results_dir", ")", "\n", "\n", "param_files", "=", "[", "\n", "f", "for", "f", "in", "rf", "if", "f", ".", "startswith", "(", "'em_512'", ")", "and", "f", ".", "endswith", "(", "'.pkl'", ")", "\n", "]", "\n", "\n", "gmm", "=", "OnlineDeconvGMM", "(", "\n", "512", ",", "\n", "7", ",", "\n", "batch_size", "=", "500", "\n", ")", "\n", "\n", "scores", "=", "[", "]", "\n", "\n", "for", "p", "in", "param_files", ":", "\n", "        ", "weights", ",", "means", ",", "covars", "=", "torch", ".", "load", "(", "\n", "results_dir", "+", "p", ",", "\n", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", ")", "\n", "gmm", ".", "weights", "=", "weights", "\n", "gmm", ".", "means", "=", "means", "\n", "gmm", ".", "covars", "=", "covars", "\n", "\n", "test_score", "=", "gmm", ".", "score_batch", "(", "test_data", ")", "\n", "print", "(", "test_score", ")", "\n", "\n", "scores", ".", "append", "(", "test_score", ")", "\n", "\n", "", "print", "(", "'Test Score: {} +- {}'", ".", "format", "(", "\n", "np", ".", "mean", "(", "scores", ")", ",", "\n", "np", ".", "std", "(", "scores", ")", "\n", ")", ")", "\n", "\n", "json", ".", "dump", "(", "scores", ",", "open", "(", "output_file", ",", "'w'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.variable_k.fit_gaia_lim_em.fit_gaia_lim_em": [[13, 69], ["numpy.load", "deconv.gmm.data.DeconvDataset", "deconv.gmm.data.DeconvDataset", "deconv.gmm.online_deconv_gmm.OnlineDeconvGMM", "time.time", "deconv.gmm.online_deconv_gmm.OnlineDeconvGMM.fit", "time.time", "deconv.gmm.online_deconv_gmm.OnlineDeconvGMM.score_batch", "deconv.gmm.online_deconv_gmm.OnlineDeconvGMM.score_batch", "print", "print", "json.dump", "torch.save", "torch.device", "torch.device", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "open", "str"], "function", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.fit", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score_batch", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score_batch"], ["def", "fit_gaia_lim_em", "(", "datafile", ",", "output_prefix", ",", "K", ",", "batch_size", ",", "epochs", ",", "step_size", ",", "w_reg", ",", "\n", "k_means_iters", ",", "lr_step", ",", "lr_gamma", ",", "use_cuda", ")", ":", "\n", "    ", "data", "=", "np", ".", "load", "(", "datafile", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "train_data", "=", "DeconvDataset", "(", "\n", "torch", ".", "Tensor", "(", "data", "[", "'X_train'", "]", ")", ",", "\n", "torch", ".", "Tensor", "(", "data", "[", "'C_train'", "]", ")", "\n", ")", "\n", "\n", "val_data", "=", "DeconvDataset", "(", "\n", "torch", ".", "Tensor", "(", "data", "[", "'X_val'", "]", ")", ",", "\n", "torch", ".", "Tensor", "(", "data", "[", "'C_val'", "]", ")", "\n", ")", "\n", "\n", "gmm", "=", "OnlineDeconvGMM", "(", "\n", "K", ",", "\n", "7", ",", "\n", "device", "=", "device", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "restarts", "=", "1", ",", "\n", "w", "=", "w_reg", ",", "\n", "step_size", "=", "step_size", ",", "\n", "epochs", "=", "epochs", ",", "\n", "k_means_iters", "=", "k_means_iters", ",", "\n", "lr_step", "=", "lr_step", ",", "\n", "lr_gamma", "=", "lr_gamma", "\n", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "gmm", ".", "fit", "(", "train_data", ",", "val_data", "=", "val_data", ",", "verbose", "=", "True", ")", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "train_score", "=", "gmm", ".", "score_batch", "(", "train_data", ")", "\n", "val_score", "=", "gmm", ".", "score_batch", "(", "val_data", ")", "\n", "\n", "print", "(", "'Training score: {}'", ".", "format", "(", "train_score", ")", ")", "\n", "print", "(", "'Val score: {}'", ".", "format", "(", "val_score", ")", ")", "\n", "\n", "results", "=", "{", "\n", "'start_time'", ":", "start_time", ",", "\n", "'end_time'", ":", "end_time", ",", "\n", "'train_score'", ":", "train_score", ",", "\n", "'val_score'", ":", "val_score", ",", "\n", "'train_curve'", ":", "gmm", ".", "train_ll_curve", ",", "\n", "'val_curve'", ":", "gmm", ".", "val_ll_curve", "\n", "}", "\n", "\n", "json", ".", "dump", "(", "results", ",", "open", "(", "str", "(", "output_prefix", ")", "+", "'_results.json'", ",", "mode", "=", "'w'", ")", ")", "\n", "torch", ".", "save", "(", "\n", "(", "gmm", ".", "weights", ",", "gmm", ".", "means", ",", "gmm", ".", "covars", ")", ",", "\n", "output_prefix", "+", "'_params.pkl'", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.variable_k.preproccesing.get_covar": [[48, 50], ["numpy.diag", "row[].fillna().to_numpy", "row[].fillna"], "function", ["None"], ["def", "get_covar", "(", "row", ")", ":", "\n", "    ", "return", "np", ".", "diag", "(", "row", "[", "error_columns", "]", ".", "fillna", "(", "1e12", ")", ".", "to_numpy", "(", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.variable_k.preproccesing.vot_to_pandas": [[52, 58], ["astropy.table.Table.read", "tb[].to_pandas", "list", "corr_map.keys"], "function", ["None"], ["", "def", "vot_to_pandas", "(", "vot_file", ")", ":", "\n", "\n", "    ", "tb", "=", "Table", ".", "read", "(", "vot_file", ")", "\n", "\n", "df", "=", "tb", "[", "columns", "+", "error_columns", "+", "list", "(", "corr_map", ".", "keys", "(", ")", ")", "]", ".", "to_pandas", "(", ")", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.variable_k.preproccesing.pandas_to_numpy": [[60, 95], ["df.insert", "df.insert", "error_columns.insert", "error_columns.insert", "df[].fillna().to_numpy", "numpy.zeros", "numpy.arange", "df[].fillna().to_numpy", "corr_map.items", "sklearn.model_selection.train_test_split", "sklearn.model_selection.train_test_split", "numpy.savez", "df[].fillna().to_numpy", "df[].fillna", "len", "df[].fillna", "df[].fillna"], "function", ["None"], ["", "def", "pandas_to_numpy", "(", "df", ",", "output_file", ")", ":", "\n", "    ", "df", ".", "insert", "(", "12", ",", "column", "=", "'phot_g_mean_mag_error'", ",", "value", "=", "0.01", ")", "\n", "df", ".", "insert", "(", "12", ",", "column", "=", "'bp_rp_error'", ",", "value", "=", "0.01", ")", "\n", "error_columns", ".", "insert", "(", "5", ",", "'phot_g_mean_mag_error'", ")", "\n", "error_columns", ".", "insert", "(", "5", ",", "'bp_rp_error'", ")", "\n", "\n", "X", "=", "df", "[", "columns", "]", ".", "fillna", "(", "0.0", ")", ".", "to_numpy", "(", "dtype", "=", "np", ".", "float32", ")", "\n", "C", "=", "np", ".", "zeros", "(", "(", "len", "(", "df", ")", ",", "7", ",", "7", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "diag", "=", "np", ".", "arange", "(", "7", ")", "\n", "C", "[", ":", ",", "diag", ",", "diag", "]", "=", "df", "[", "error_columns", "]", ".", "fillna", "(", "1e6", ")", ".", "to_numpy", "(", "\n", "dtype", "=", "np", ".", "float32", "\n", ")", "\n", "\n", "for", "column", ",", "(", "i", ",", "j", ")", "in", "corr_map", ".", "items", "(", ")", ":", "\n", "        ", "C", "[", ":", ",", "i", ",", "j", "]", "=", "df", "[", "column", "]", ".", "fillna", "(", "0", ")", ".", "to_numpy", "(", "dtype", "=", "np", ".", "float32", ")", "\n", "C", "[", ":", ",", "i", ",", "j", "]", "*=", "(", "C", "[", ":", ",", "i", ",", "i", "]", "*", "C", "[", ":", ",", "j", ",", "j", "]", ")", "\n", "C", "[", ":", ",", "j", ",", "i", "]", "=", "C", "[", ":", ",", "i", ",", "j", "]", "\n", "\n", "", "C", "[", ":", ",", "diag", ",", "diag", "]", "=", "C", "[", ":", ",", "diag", ",", "diag", "]", "**", "2", "\n", "\n", "X_train", ",", "X_test", ",", "C_train", ",", "C_test", "=", "train_test_split", "(", "\n", "X", ",", "C", ",", "test_size", "=", "0.2", ",", "random_state", "=", "90115", "\n", ")", "\n", "X_val", ",", "X_test", ",", "C_val", ",", "C_test", "=", "train_test_split", "(", "\n", "X_test", ",", "C_test", ",", "test_size", "=", "0.5", ",", "random_state", "=", "84253", "\n", ")", "\n", "\n", "np", ".", "savez", "(", "\n", "output_file", ",", "\n", "X_train", "=", "X_train", ",", "\n", "C_train", "=", "C_train", ",", "\n", "X_val", "=", "X_val", ",", "\n", "C_val", "=", "C_val", ",", "\n", "X_test", "=", "X_test", ",", "\n", "C_test", "=", "C_test", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.variable_n.shuffle.shuffle_store": [[14, 51], ["h5py.File", "h5py.File", "print", "h5py.File.create_group", "print", "print", "numpy.random.permutation", "store_out.create_group.create_dataset", "store_out.create_group.create_dataset"], "function", ["None"], ["def", "shuffle_store", "(", "hdf5_in", ",", "hdf5_out", ")", ":", "\n", "    ", "\"\"\"Create a shuffled copy of dataset.\"\"\"", "\n", "store_in", "=", "h5py", ".", "File", "(", "hdf5_in", ",", "'r'", ")", "\n", "store_out", "=", "h5py", ".", "File", "(", "hdf5_out", ")", "\n", "\n", "for", "d", "in", "(", "'train'", ",", "'val'", ",", "'test'", ")", ":", "\n", "\n", "        ", "print", "(", "'Shuffling {}'", ".", "format", "(", "d", ")", ")", "\n", "\n", "group", "=", "store_out", ".", "create_group", "(", "d", ")", "\n", "X", "=", "store_in", "[", "d", "]", "[", "'X'", "]", "[", "(", ")", "]", "\n", "C", "=", "store_in", "[", "d", "]", "[", "'C'", "]", "[", "(", ")", "]", "\n", "\n", "print", "(", "'X shape: {}'", ".", "format", "(", "X", ".", "shape", ")", ")", "\n", "print", "(", "'C shape: {}'", ".", "format", "(", "C", ".", "shape", ")", ")", "\n", "\n", "idx", "=", "np", ".", "random", ".", "permutation", "(", "X", ".", "shape", "[", "0", "]", ")", "\n", "\n", "group", ".", "create_dataset", "(", "\n", "'X'", ",", "\n", "X", ".", "shape", ",", "\n", "maxshape", "=", "X", ".", "shape", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", "chunks", "=", "(", "512", ",", "7", ")", ",", "\n", "compression", "=", "'lzf'", "\n", ")", "\n", "group", "[", "'X'", "]", "[", ":", ",", ":", "]", "=", "X", "[", "idx", ",", ":", "]", "\n", "\n", "group", ".", "create_dataset", "(", "\n", "'C'", ",", "\n", "C", ".", "shape", ",", "\n", "maxshape", "=", "C", ".", "shape", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", "chunks", "=", "(", "512", ",", "7", ",", "7", ")", ",", "\n", "compression", "=", "'lzf'", "\n", ")", "\n", "group", "[", "'C'", "]", "[", ":", ",", ":", ",", ":", "]", "=", "C", "[", "idx", ",", ":", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.variable_n.fit_gaia_sgd.fit_gaia_lim_sgd": [[12, 55], ["deconv.gmm.data.H5DeconvDataset", "deconv.gmm.data.H5DeconvDataset", "deconv.gmm.sgd_deconv_gmm.SGDDeconvGMM", "time.time", "deconv.gmm.sgd_deconv_gmm.SGDDeconvGMM.fit", "time.time", "deconv.gmm.sgd_deconv_gmm.SGDDeconvGMM.score_batch", "deconv.gmm.sgd_deconv_gmm.SGDDeconvGMM.score_batch", "print", "print", "json.dump", "torch.save", "torch.device", "torch.device", "open", "deconv.gmm.sgd_deconv_gmm.SGDDeconvGMM.module.state_dict", "int", "str"], "function", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.fit", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score_batch", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score_batch"], ["def", "fit_gaia_lim_sgd", "(", "datafile", ",", "output_prefix", ",", "K", ",", "batch_size", ",", "epochs", ",", "lr", ",", "\n", "w_reg", ",", "k_means_iters", ",", "lr_step", ",", "lr_gamma", ",", "train_limit", ",", "\n", "use_cuda", ")", ":", "\n", "    ", "if", "use_cuda", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "train_data", "=", "H5DeconvDataset", "(", "datafile", ",", "'train'", ",", "limit", "=", "train_limit", ",", "batch_size", "=", "batch_size", ")", "\n", "val_data", "=", "H5DeconvDataset", "(", "datafile", ",", "'val'", ",", "limit", "=", "int", "(", "25e6", ")", ",", "batch_size", "=", "batch_size", ")", "\n", "\n", "gmm", "=", "SGDDeconvGMM", "(", "\n", "K", ",", "\n", "7", ",", "\n", "device", "=", "device", ",", "\n", "batch_size", "=", "None", ",", "\n", "epochs", "=", "epochs", ",", "\n", "w", "=", "w_reg", ",", "\n", "k_means_iters", "=", "k_means_iters", ",", "\n", "lr", "=", "lr", ",", "\n", "lr_step", "=", "lr_step", ",", "\n", "lr_gamma", "=", "lr_gamma", "\n", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "gmm", ".", "fit", "(", "train_data", ",", "val_data", "=", "val_data", ",", "verbose", "=", "True", ")", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "train_score", "=", "gmm", ".", "score_batch", "(", "train_data", ")", "\n", "val_score", "=", "gmm", ".", "score_batch", "(", "val_data", ")", "\n", "\n", "print", "(", "'Training score: {}'", ".", "format", "(", "train_score", ")", ")", "\n", "print", "(", "'Val score: {}'", ".", "format", "(", "val_score", ")", ")", "\n", "\n", "results", "=", "{", "\n", "'start_time'", ":", "start_time", ",", "\n", "'end_time'", ":", "end_time", ",", "\n", "'train_score'", ":", "train_score", ",", "\n", "'val_score'", ":", "val_score", ",", "\n", "'train_curve'", ":", "gmm", ".", "train_loss_curve", ",", "\n", "'val_curve'", ":", "gmm", ".", "val_loss_curve", "\n", "}", "\n", "json", ".", "dump", "(", "results", ",", "open", "(", "str", "(", "output_prefix", ")", "+", "'_results.json'", ",", "mode", "=", "'w'", ")", ")", "\n", "torch", ".", "save", "(", "gmm", ".", "module", ".", "state_dict", "(", ")", ",", "output_prefix", "+", "'_params.pkl'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.variable_n.preproccesing.get_covar": [[46, 48], ["numpy.diag", "row[].fillna().to_numpy", "row[].fillna"], "function", ["None"], ["\n", "\n", "def", "get_covar", "(", "row", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.variable_n.preproccesing.vot_to_pandas": [[50, 56], ["astropy.table.Table.read", "tb[].to_pandas", "list", "corr_map.keys"], "function", ["None"], ["\n", "\n", "", "def", "vot_to_pandas", "(", "vot_file", ")", ":", "\n", "\n", "    ", "tb", "=", "Table", ".", "read", "(", "vot_file", ")", "\n", "\n", "df", "=", "tb", "[", "columns", "+", "error_columns", "+", "list", "(", "corr_map", ".", "keys", "(", ")", ")", "]", ".", "to_pandas", "(", ")", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.variable_n.preproccesing.pandas_to_numpy": [[58, 91], ["df.insert", "df.insert", "error_columns.copy", "error_columns.copy.insert", "error_columns.copy.insert", "df[].fillna().to_numpy", "numpy.zeros", "numpy.arange", "df[].fillna().to_numpy", "corr_map.items", "sklearn.model_selection.train_test_split", "sklearn.model_selection.train_test_split", "df[].fillna().to_numpy", "df[].fillna", "len", "df[].fillna", "df[].fillna"], "function", ["None"], ["\n", "\n", "", "def", "pandas_to_numpy", "(", "df", ",", "output_file", ")", ":", "\n", "    ", "df", ".", "insert", "(", "12", ",", "column", "=", "'phot_g_mean_mag_error'", ",", "value", "=", "0.01", ")", "\n", "df", ".", "insert", "(", "12", ",", "column", "=", "'bp_rp_error'", ",", "value", "=", "0.01", ")", "\n", "error_columns", ".", "insert", "(", "5", ",", "'phot_g_mean_mag_error'", ")", "\n", "error_columns", ".", "insert", "(", "5", ",", "'bp_rp_error'", ")", "\n", "\n", "X", "=", "df", "[", "columns", "]", ".", "fillna", "(", "0.0", ")", ".", "to_numpy", "(", "dtype", "=", "np", ".", "float32", ")", "\n", "C", "=", "np", ".", "zeros", "(", "(", "len", "(", "df", ")", ",", "7", ",", "7", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "diag", "=", "np", ".", "arange", "(", "7", ")", "\n", "C", "[", ":", ",", "diag", ",", "diag", "]", "=", "df", "[", "error_columns", "]", ".", "fillna", "(", "1e6", ")", ".", "to_numpy", "(", "\n", "dtype", "=", "np", ".", "float32", "\n", ")", "\n", "\n", "for", "column", ",", "(", "i", ",", "j", ")", "in", "corr_map", ".", "items", "(", ")", ":", "\n", "        ", "C", "[", ":", ",", "i", ",", "j", "]", "=", "df", "[", "column", "]", ".", "fillna", "(", "0", ")", ".", "to_numpy", "(", "dtype", "=", "np", ".", "float32", ")", "\n", "C", "[", ":", ",", "i", ",", "j", "]", "*=", "(", "C", "[", ":", ",", "i", ",", "i", "]", "*", "C", "[", ":", ",", "j", ",", "j", "]", ")", "\n", "C", "[", ":", ",", "j", ",", "i", "]", "=", "C", "[", ":", ",", "i", ",", "j", "]", "\n", "\n", "", "C", "[", ":", ",", "diag", ",", "diag", "]", "=", "C", "[", ":", ",", "diag", ",", "diag", "]", "**", "2", "\n", "\n", "X_train", ",", "X_test", ",", "C_train", ",", "C_test", "=", "train_test_split", "(", "\n", "X", ",", "C", ",", "test_size", "=", "0.2", ",", "random_state", "=", "90115", "\n", ")", "\n", "X_val", ",", "X_test", ",", "C_val", ",", "C_test", "=", "train_test_split", "(", "\n", "X_test", ",", "C_test", ",", "test_size", "=", "0.5", ",", "random_state", "=", "84253", "\n", ")", "\n", "\n", "np", ".", "savez", "(", "\n", "output_file", ",", "\n", "X_train", "=", "X_train", ",", "\n", "C_train", "=", "C_train", ",", "\n", "X_val", "=", "X_val", ",", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.variable_n.preproccesing.numpy_to_file": [[94, 104], ["numpy.savez"], "function", ["None"], ["C_test", "=", "C_test", "\n", ")", "\n", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'input_file'", ")", "\n", "parser", ".", "add_argument", "(", "'output_file'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.variable_n.preproccesing.process_csv": [[107, 145], ["os.listdir", "h5py.File", "h5py.File.create_group", "h5py.File.create_group", "h5py.File.create_group", "tqdm.tqdm", "g.create_dataset", "g.create_dataset", "pandas.read_csv", "preproccesing.pandas_to_numpy", "zip", "g[].resize", "g[].resize"], "function", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.variable_n.preproccesing.pandas_to_numpy"], ["pandas_to_numpy", "(", "df", ",", "args", ".", "output_file", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.utils.make_2d_toy_data.data_gen": [[6, 271], ["sklearn.datasets.make_swiss_roll", "data.astype.astype", "numpy.random.multivariate_normal", "numpy.random.multivariate_normal", "numpy.random.multivariate_normal", "numpy.random.choice", "numpy.bincount", "numpy.zeros", "range", "numpy.random.multivariate_normal", "sklearn.utils.shuffle", "numpy.random.choice", "numpy.bincount", "numpy.zeros", "range", "numpy.random.multivariate_normal", "sklearn.utils.shuffle", "numpy.random.choice", "numpy.bincount", "numpy.zeros", "range", "numpy.random.multivariate_normal", "sklearn.utils.shuffle", "numpy.random.choice", "numpy.bincount", "numpy.zeros", "range", "numpy.random.multivariate_normal", "sklearn.utils.shuffle", "data.astype.astype", "sklearn.datasets.make_circles", "data.astype.astype", "sklearn.datasets.make_circles", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.cos", "numpy.sin", "sklearn.utils.shuffle", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "rng.normal", "sklearn.utils.shuffle.astype", "data.astype.astype", "numpy.vstack", "sklearn.datasets.make_moons", "range", "numpy.array", "rng.randint", "np.array.append", "range", "numpy.array", "numpy.hstack", "numpy.hstack", "rng.randn", "rng.randint", "np.array.append", "numpy.linspace", "numpy.repeat", "numpy.stack", "numpy.reshape", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "rng.randn", "rng.randn", "numpy.array", "numpy.arange", "numpy.exp", "numpy.cos", "numpy.sin", "numpy.cos", "rng.permutation", "numpy.vstack", "numpy.random.randn", "numpy.sin", "numpy.einsum", "numpy.random.rand", "numpy.sin", "numpy.random.rand", "numpy.random.rand", "numpy.sqrt", "numpy.cos", "numpy.hstack", "numpy.hstack", "numpy.random.rand", "numpy.random.randint", "numpy.floor", "numpy.concatenate", "numpy.stack", "ValueError", "numpy.random.rand", "rng.rand", "numpy.stack", "rng.randn", "numpy.sin", "rng.randn", "rng.rand"], "function", ["None"], ["def", "data_gen", "(", "data", ",", "n_samples", ",", "noise", "=", "None", ",", "rng", "=", "np", ".", "random", ")", ":", "\n", "    ", "if", "data", "==", "'swissroll'", ":", "\n", "        ", "if", "noise", "is", "None", ":", "\n", "            ", "noise", "=", "1.0", "\n", "\n", "", "data", "=", "sklearn", ".", "datasets", ".", "make_swiss_roll", "(", "\n", "n_samples", "=", "n_samples", ",", "noise", "=", "noise", ")", "[", "0", "]", "\n", "data", "=", "data", ".", "astype", "(", "np", ".", "float32", ")", "[", ":", ",", "[", "0", ",", "2", "]", "]", "\n", "data", "/=", "5", "\n", "\n", "return", "data", ",", "noise", "\n", "\n", "", "elif", "data", "==", "'gaussian_1'", ":", "\n", "        ", "return", "np", ".", "random", ".", "multivariate_normal", "(", "[", "1.0", ",", "1.0", "]", ",", "[", "[", "0.09", ",", "0.0", "]", ",", "[", "0.0", ",", "0.09", "]", "]", ",", "n_samples", ")", ",", "None", "\n", "\n", "", "elif", "data", "==", "'gaussian_2'", ":", "\n", "        ", "return", "np", ".", "random", ".", "multivariate_normal", "(", "[", "1.0", ",", "1.0", "]", ",", "[", "[", "0.25", ",", "0.0", "]", ",", "[", "0.0", ",", "0.25", "]", "]", ",", "n_samples", ")", ",", "None", "\n", "\n", "", "elif", "data", "==", "'gaussian_3'", ":", "\n", "        ", "return", "np", ".", "random", ".", "multivariate_normal", "(", "[", "1.0", ",", "1.0", "]", ",", "[", "[", "1.0", ",", "0.0", "]", ",", "[", "0.0", ",", "1.0", "]", "]", ",", "n_samples", ")", ",", "None", "\n", "\n", "", "elif", "data", "==", "'mixture_1'", ":", "\n", "        ", "coins", "=", "np", ".", "random", ".", "choice", "(", "3", ",", "n_samples", ",", "p", "=", "[", "1.", "/", "3", ",", "1.", "/", "3", ",", "1.", "/", "3", "]", ")", "\n", "bincounts", "=", "np", ".", "bincount", "(", "coins", ")", "\n", "\n", "means", "=", "[", "[", "0.0", ",", "0.0", "]", ",", "[", "2.0", ",", "3.0", "]", ",", "[", "2.0", ",", "-", "3.0", "]", "]", "\n", "covars", "=", "[", "[", "[", "0.1", ",", "0.0", "]", ",", "[", "0.0", ",", "1.5", "]", "]", ",", "\n", "[", "[", "1.0", ",", "0.0", "]", ",", "[", "0.0", ",", "0.1", "]", "]", ",", "\n", "[", "[", "1.0", ",", "0.0", "]", ",", "[", "0.0", ",", "0.1", "]", "]", "]", "\n", "\n", "samples", "=", "np", ".", "zeros", "(", "(", "n_samples", ",", "2", ")", ")", "\n", "\n", "offset", "=", "0", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "samples", "[", "offset", ":", "(", "offset", "+", "bincounts", "[", "i", "]", ")", "\n", "]", "=", "np", ".", "random", ".", "multivariate_normal", "(", "means", "[", "i", "]", ",", "covars", "[", "i", "]", ",", "bincounts", "[", "i", "]", ")", "\n", "\n", "offset", "+=", "bincounts", "[", "i", "]", "\n", "\n", "", "return", "util_shuffle", "(", "samples", ")", ",", "None", "\n", "\n", "", "elif", "data", "==", "'mixture_final'", ":", "\n", "        ", "coins", "=", "np", ".", "random", ".", "choice", "(", "\n", "4", ",", "n_samples", ",", "p", "=", "[", "1.", "/", "4", ",", "1.", "/", "4", ",", "1.", "/", "4", ",", "1.", "/", "4", "]", ")", "\n", "bincounts", "=", "np", ".", "bincount", "(", "coins", ")", "\n", "\n", "means", "=", "[", "[", "-", "2.0", ",", "0.0", "]", ",", "[", "2.0", ",", "0.0", "]", ",", "[", "0.0", ",", "-", "2.0", "]", ",", "[", "0.0", ",", "2.0", "]", "]", "\n", "covars", "=", "[", "[", "[", "0.09", ",", "0.0", "]", ",", "[", "0.0", ",", "1.0", "]", "]", ",", "\n", "[", "[", "0.09", ",", "0.0", "]", ",", "[", "0.0", ",", "1.0", "]", "]", ",", "\n", "[", "[", "1.0", ",", "0.0", "]", ",", "[", "0.0", ",", "0.09", "]", "]", ",", "\n", "[", "[", "1.0", ",", "0.0", "]", ",", "[", "0.0", ",", "0.09", "]", "]", "]", "\n", "\n", "samples", "=", "np", ".", "zeros", "(", "(", "n_samples", ",", "2", ")", ")", "\n", "\n", "offset", "=", "0", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "samples", "[", "offset", ":", "(", "offset", "+", "bincounts", "[", "i", "]", ")", "\n", "]", "=", "np", ".", "random", ".", "multivariate_normal", "(", "means", "[", "i", "]", ",", "covars", "[", "i", "]", ",", "bincounts", "[", "i", "]", ")", "\n", "\n", "offset", "+=", "bincounts", "[", "i", "]", "\n", "\n", "", "return", "util_shuffle", "(", "samples", ")", ",", "None", "\n", "\n", "", "elif", "data", "==", "'mixture_2'", ":", "\n", "        ", "coins", "=", "np", ".", "random", ".", "choice", "(", "2", ",", "n_samples", ",", "p", "=", "[", "1.", "/", "2", ",", "1.", "/", "2", "]", ")", "\n", "bincounts", "=", "np", ".", "bincount", "(", "coins", ")", "\n", "\n", "means", "=", "[", "[", "-", "3.0", ",", "-", "3.0", "]", ",", "[", "3.0", ",", "3.0", "]", "]", "\n", "covars", "=", "[", "[", "[", "0.09", ",", "0.0", "]", ",", "[", "0.0", ",", "0.09", "]", "]", ",", "\n", "[", "[", "0.09", ",", "0.0", "]", ",", "[", "0.0", ",", "0.09", "]", "]", "]", "\n", "\n", "samples", "=", "np", ".", "zeros", "(", "(", "n_samples", ",", "2", ")", ")", "\n", "\n", "offset", "=", "0", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "samples", "[", "offset", ":", "(", "offset", "+", "bincounts", "[", "i", "]", ")", "\n", "]", "=", "np", ".", "random", ".", "multivariate_normal", "(", "means", "[", "i", "]", ",", "covars", "[", "i", "]", ",", "bincounts", "[", "i", "]", ")", "\n", "\n", "offset", "+=", "bincounts", "[", "i", "]", "\n", "\n", "", "return", "util_shuffle", "(", "samples", ")", ",", "None", "\n", "\n", "", "elif", "data", "==", "'mixture_3'", ":", "\n", "        ", "coins", "=", "np", ".", "random", ".", "choice", "(", "2", ",", "n_samples", ",", "p", "=", "[", "1.", "/", "2", ",", "1.", "/", "2", "]", ")", "\n", "bincounts", "=", "np", ".", "bincount", "(", "coins", ")", "\n", "\n", "means", "=", "[", "[", "-", "1.0", ",", "-", "1.0", "]", ",", "[", "1.0", ",", "1.0", "]", "]", "\n", "covars", "=", "[", "[", "[", "0.25", ",", "0.0", "]", ",", "[", "0.0", ",", "0.25", "]", "]", ",", "\n", "[", "[", "0.09", ",", "0.0", "]", ",", "[", "0.0", ",", "0.09", "]", "]", "]", "\n", "\n", "samples", "=", "np", ".", "zeros", "(", "(", "n_samples", ",", "2", ")", ")", "\n", "\n", "offset", "=", "0", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "samples", "[", "offset", ":", "(", "offset", "+", "bincounts", "[", "i", "]", ")", "\n", "]", "=", "np", ".", "random", ".", "multivariate_normal", "(", "means", "[", "i", "]", ",", "covars", "[", "i", "]", ",", "bincounts", "[", "i", "]", ")", "\n", "\n", "offset", "+=", "bincounts", "[", "i", "]", "\n", "\n", "", "return", "util_shuffle", "(", "samples", ")", ",", "None", "\n", "\n", "", "elif", "data", "==", "'circles'", ":", "\n", "        ", "if", "noise", "is", "None", ":", "\n", "            ", "noise", "=", "0.08", "\n", "\n", "", "data", "=", "sklearn", ".", "datasets", ".", "make_circles", "(", "\n", "n_samples", "=", "n_samples", ",", "factor", "=", ".5", ",", "noise", "=", "noise", ")", "[", "0", "]", "\n", "data", "=", "data", ".", "astype", "(", "np", ".", "float32", ")", "\n", "# data *= 3", "\n", "data", "*=", "5", "\n", "\n", "return", "data", ",", "noise", "\n", "\n", "", "elif", "data", "==", "'circles_easy'", ":", "\n", "        ", "if", "noise", "is", "None", ":", "\n", "            ", "noise", "=", "0.02", "\n", "\n", "", "data", "=", "sklearn", ".", "datasets", ".", "make_circles", "(", "\n", "n_samples", "=", "n_samples", ",", "factor", "=", "0.4", ",", "noise", "=", "noise", ")", "[", "0", "]", "\n", "data", "=", "data", ".", "astype", "(", "np", ".", "float32", ")", "\n", "data", "*=", "3", "\n", "# data *= 5", "\n", "\n", "return", "data", ",", "noise", "\n", "\n", "", "elif", "data", "==", "'rings'", ":", "\n", "        ", "if", "noise", "is", "None", ":", "\n", "            ", "noise", "=", "0.08", "\n", "\n", "", "n_samples4", "=", "n_samples3", "=", "n_samples2", "=", "n_samples", "//", "4", "\n", "n_samples1", "=", "n_samples", "-", "n_samples4", "-", "n_samples3", "-", "n_samples2", "\n", "\n", "# so as not to have the first point = last point, we set endpoint=False", "\n", "linspace4", "=", "np", ".", "linspace", "(", "0", ",", "2", "*", "np", ".", "pi", ",", "n_samples4", ",", "endpoint", "=", "False", ")", "\n", "linspace3", "=", "np", ".", "linspace", "(", "0", ",", "2", "*", "np", ".", "pi", ",", "n_samples3", ",", "endpoint", "=", "False", ")", "\n", "linspace2", "=", "np", ".", "linspace", "(", "0", ",", "2", "*", "np", ".", "pi", ",", "n_samples2", ",", "endpoint", "=", "False", ")", "\n", "linspace1", "=", "np", ".", "linspace", "(", "0", ",", "2", "*", "np", ".", "pi", ",", "n_samples1", ",", "endpoint", "=", "False", ")", "\n", "\n", "circ4_x", "=", "np", ".", "cos", "(", "linspace4", ")", "\n", "circ4_y", "=", "np", ".", "sin", "(", "linspace4", ")", "\n", "circ3_x", "=", "np", ".", "cos", "(", "linspace4", ")", "*", "0.75", "\n", "circ3_y", "=", "np", ".", "sin", "(", "linspace3", ")", "*", "0.75", "\n", "circ2_x", "=", "np", ".", "cos", "(", "linspace2", ")", "*", "0.5", "\n", "circ2_y", "=", "np", ".", "sin", "(", "linspace2", ")", "*", "0.5", "\n", "circ1_x", "=", "np", ".", "cos", "(", "linspace1", ")", "*", "0.25", "\n", "circ1_y", "=", "np", ".", "sin", "(", "linspace1", ")", "*", "0.25", "\n", "\n", "X", "=", "np", ".", "vstack", "(", "[", "\n", "np", ".", "hstack", "(", "[", "circ4_x", ",", "circ3_x", ",", "circ2_x", ",", "circ1_x", "]", ")", ",", "\n", "np", ".", "hstack", "(", "[", "circ4_y", ",", "circ3_y", ",", "circ2_y", ",", "circ1_y", "]", ")", "\n", "]", ")", ".", "T", "*", "3.0", "\n", "X", "=", "util_shuffle", "(", "X", ",", "random_state", "=", "rng", ")", "\n", "\n", "# Add noise", "\n", "X", "=", "X", "+", "rng", ".", "normal", "(", "scale", "=", "noise", ",", "size", "=", "X", ".", "shape", ")", "\n", "\n", "return", "X", ".", "astype", "(", "np", ".", "float32", ")", ",", "noise", "\n", "\n", "", "elif", "data", "==", "'moons'", ":", "\n", "        ", "if", "noise", "is", "None", ":", "\n", "            ", "noise", "=", "0.03", "\n", "\n", "", "data", "=", "sklearn", ".", "datasets", ".", "make_moons", "(", "n_samples", "=", "n_samples", ",", "noise", "=", "noise", ")", "[", "0", "]", "\n", "data", "=", "data", ".", "astype", "(", "np", ".", "float32", ")", "\n", "data", "=", "data", "*", "3", "\n", "# data = data * 2 + np.array([-1, -0.2])", "\n", "\n", "return", "data", ",", "noise", "\n", "\n", "", "elif", "data", "==", "'8gaussians'", ":", "\n", "        ", "scale", "=", "4.", "\n", "centers", "=", "[", "(", "1", ",", "0", ")", ",", "(", "-", "1", ",", "0", ")", ",", "(", "0", ",", "1", ")", ",", "(", "0", ",", "-", "1", ")", ",", "(", "1.", "/", "np", ".", "sqrt", "(", "2", ")", ",", "1.", "/", "np", ".", "sqrt", "(", "2", ")", ")", ",", "\n", "(", "1.", "/", "np", ".", "sqrt", "(", "2", ")", ",", "-", "1.", "/", "np", ".", "sqrt", "(", "2", ")", ")", ",", "(", "-", "1.", "/", "np", ".", "sqrt", "(", "2", ")", ",", "\n", "1.", "/", "np", ".", "sqrt", "(", "2", ")", ")", ",", "(", "-", "1.", "/", "np", ".", "sqrt", "(", "2", ")", ",", "-", "1.", "/", "np", ".", "sqrt", "(", "2", ")", ")", "]", "\n", "centers", "=", "[", "(", "scale", "*", "x", ",", "scale", "*", "y", ")", "for", "x", ",", "y", "in", "centers", "]", "\n", "\n", "dataset", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_samples", ")", ":", "\n", "            ", "point", "=", "rng", ".", "randn", "(", "2", ")", "*", "0.5", "\n", "idx", "=", "rng", ".", "randint", "(", "8", ")", "\n", "center", "=", "centers", "[", "idx", "]", "\n", "point", "[", "0", "]", "+=", "center", "[", "0", "]", "\n", "point", "[", "1", "]", "+=", "center", "[", "1", "]", "\n", "dataset", ".", "append", "(", "point", ")", "\n", "", "dataset", "=", "np", ".", "array", "(", "dataset", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "dataset", "/=", "1.414", "\n", "\n", "return", "dataset", ",", "None", "\n", "\n", "", "elif", "data", "==", "'4gaussians'", ":", "\n", "        ", "scale", "=", "4.", "\n", "centers", "=", "[", "(", "1", ",", "0", ")", ",", "(", "-", "1", ",", "0", ")", ",", "(", "0", ",", "1", ")", ",", "(", "0", ",", "-", "1", ")", "]", "\n", "centers", "=", "[", "(", "scale", "*", "x", ",", "scale", "*", "y", ")", "for", "x", ",", "y", "in", "centers", "]", "\n", "\n", "dataset", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_samples", ")", ":", "\n", "            ", "point", "=", "rng", ".", "randn", "(", "2", ")", "*", "0.5", "\n", "idx", "=", "rng", ".", "randint", "(", "4", ")", "\n", "center", "=", "centers", "[", "idx", "]", "\n", "point", "[", "0", "]", "+=", "center", "[", "0", "]", "\n", "point", "[", "1", "]", "+=", "center", "[", "1", "]", "\n", "dataset", ".", "append", "(", "point", ")", "\n", "", "dataset", "=", "np", ".", "array", "(", "dataset", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "dataset", "/=", "1.414", "\n", "\n", "return", "dataset", ",", "None", "\n", "\n", "", "elif", "data", "==", "'pinwheel'", ":", "\n", "        ", "radial_std", "=", "0.3", "\n", "tangential_std", "=", "0.1", "\n", "num_classes", "=", "3", "\n", "num_per_class", "=", "n_samples", "//", "num_classes", "\n", "rate", "=", "0.25", "\n", "rads", "=", "np", ".", "linspace", "(", "0", ",", "2", "*", "np", ".", "pi", ",", "num_classes", ",", "endpoint", "=", "False", ")", "\n", "\n", "features", "=", "rng", ".", "randn", "(", "num_classes", "*", "num_per_class", ",", "2", ")", "*", "np", ".", "array", "(", "[", "radial_std", ",", "tangential_std", "]", ")", "\n", "features", "[", ":", ",", "0", "]", "+=", "1.", "\n", "labels", "=", "np", ".", "repeat", "(", "np", ".", "arange", "(", "num_classes", ")", ",", "num_per_class", ")", "\n", "\n", "angles", "=", "rads", "[", "labels", "]", "+", "rate", "*", "np", ".", "exp", "(", "features", "[", ":", ",", "0", "]", ")", "\n", "rotations", "=", "np", ".", "stack", "(", "\n", "[", "np", ".", "cos", "(", "angles", ")", ",", "-", "np", ".", "sin", "(", "angles", ")", ",", "np", ".", "sin", "(", "angles", ")", ",", "np", ".", "cos", "(", "angles", ")", "]", ")", "\n", "rotations", "=", "np", ".", "reshape", "(", "rotations", ".", "T", ",", "(", "-", "1", ",", "2", ",", "2", ")", ")", "\n", "\n", "return", "2", "*", "rng", ".", "permutation", "(", "np", ".", "einsum", "(", "'ti, tij -> tj'", ",", "features", ",", "rotations", ")", ")", ",", "None", "\n", "\n", "", "elif", "data", "==", "'2spirals'", ":", "\n", "        ", "if", "noise", "is", "None", ":", "\n", "            ", "noise", "=", "0.1", "\n", "\n", "", "n", "=", "np", ".", "sqrt", "(", "np", ".", "random", ".", "rand", "(", "n_samples", "//", "2", ",", "1", ")", ")", "*", "540", "*", "(", "2", "*", "np", ".", "pi", ")", "/", "360", "\n", "d1x", "=", "-", "np", ".", "cos", "(", "n", ")", "*", "n", "+", "np", ".", "random", ".", "rand", "(", "n_samples", "//", "2", ",", "1", ")", "*", "0.5", "\n", "d1y", "=", "np", ".", "sin", "(", "n", ")", "*", "n", "+", "np", ".", "random", ".", "rand", "(", "n_samples", "//", "2", ",", "1", ")", "*", "0.5", "\n", "x", "=", "np", ".", "vstack", "(", "(", "np", ".", "hstack", "(", "(", "d1x", ",", "d1y", ")", ")", ",", "np", ".", "hstack", "(", "(", "-", "d1x", ",", "-", "d1y", ")", ")", ")", ")", "/", "3", "\n", "x", "+=", "np", ".", "random", ".", "randn", "(", "*", "x", ".", "shape", ")", "*", "noise", "\n", "\n", "return", "x", ",", "noise", "\n", "\n", "", "elif", "data", "==", "'checkerboard'", ":", "\n", "        ", "x1", "=", "np", ".", "random", ".", "rand", "(", "n_samples", ")", "*", "4", "-", "2", "\n", "x2_", "=", "np", ".", "random", ".", "rand", "(", "n_samples", ")", "-", "np", ".", "random", ".", "randint", "(", "0", ",", "2", ",", "n_samples", ")", "*", "2", "\n", "x2", "=", "x2_", "+", "(", "np", ".", "floor", "(", "x1", ")", "%", "2", ")", "\n", "\n", "return", "np", ".", "concatenate", "(", "[", "x1", "[", ":", ",", "None", "]", ",", "x2", "[", ":", ",", "None", "]", "]", ",", "1", ")", "*", "2", ",", "None", "\n", "\n", "", "elif", "data", "==", "'line'", ":", "\n", "        ", "x", "=", "rng", ".", "rand", "(", "n_samples", ")", "*", "5", "-", "2.5", "\n", "y", "=", "x", "\n", "\n", "return", "np", ".", "stack", "(", "(", "x", ",", "y", ")", ",", "1", ")", ",", "None", "\n", "\n", "", "elif", "data", "==", "'cos'", ":", "\n", "        ", "if", "noise", "is", "None", ":", "\n", "            ", "noise", "=", "0.1", "\n", "\n", "", "x", "=", "rng", ".", "rand", "(", "n_samples", ")", "*", "5", "-", "2.5", "+", "noise", "*", "rng", ".", "randn", "(", "n_samples", ")", "\n", "y", "=", "np", ".", "sin", "(", "x", ")", "*", "2.5", "+", "noise", "*", "rng", ".", "randn", "(", "n_samples", ")", "\n", "\n", "return", "np", ".", "stack", "(", "(", "x", ",", "y", ")", ",", "1", ")", ",", "noise", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Choose one of the available data options.'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.utils.compute_2d_log_likelihood.compute_data_ll": [[4, 55], ["scipy.stats.multivariate_normal.logpdf", "print", "scipy.stats.multivariate_normal.logpdf", "scipy.stats.multivariate_normal.logpdf", "numpy.log", "scipy.stats.multivariate_normal.pdf", "scipy.stats.multivariate_normal.pdf", "scipy.stats.multivariate_normal.pdf", "numpy.log", "scipy.stats.multivariate_normal.pdf", "scipy.stats.multivariate_normal.pdf", "numpy.log", "scipy.stats.multivariate_normal.pdf", "scipy.stats.multivariate_normal.pdf"], "function", ["None"], ["def", "compute_data_ll", "(", "data", ",", "samples", ")", ":", "\n", "    ", "if", "data", "==", "'gaussian_1'", ":", "\n", "        ", "mean", "=", "[", "1.0", ",", "1.0", "]", "\n", "covar", "=", "[", "[", "0.09", ",", "0.0", "]", ",", "[", "0.0", ",", "0.09", "]", "]", "\n", "\n", "return", "mn", ".", "logpdf", "(", "samples", ",", "mean", ",", "covar", ")", "\n", "\n", "", "elif", "data", "==", "'gaussian_2'", ":", "\n", "        ", "mean", "=", "[", "1.0", ",", "1.0", "]", "\n", "covar", "=", "[", "[", "0.25", ",", "0.0", "]", ",", "[", "0.0", ",", "0.25", "]", "]", "\n", "print", "(", "mean", ")", "\n", "\n", "return", "mn", ".", "logpdf", "(", "samples", ",", "mean", ",", "covar", ")", "\n", "\n", "", "elif", "data", "==", "'gaussian_3'", ":", "\n", "        ", "mean", "=", "[", "1.0", ",", "1.0", "]", "\n", "covar", "=", "[", "[", "1.0", ",", "0.0", "]", ",", "[", "0.0", ",", "1.0", "]", "]", "\n", "\n", "return", "mn", ".", "logpdf", "(", "samples", ",", "mean", ",", "covar", ")", "\n", "\n", "", "elif", "data", "==", "'mixture_1'", ":", "\n", "        ", "means", "=", "[", "[", "0.0", ",", "0.0", "]", ",", "[", "2.0", ",", "3.0", "]", ",", "[", "2.0", ",", "-", "3.0", "]", "]", "\n", "covars", "=", "[", "[", "[", "0.1", ",", "0.0", "]", ",", "[", "0.0", ",", "1.5", "]", "]", ",", "\n", "[", "[", "1.0", ",", "0.0", "]", ",", "[", "0.0", ",", "0.1", "]", "]", ",", "\n", "[", "[", "1.0", ",", "0.0", "]", ",", "[", "0.0", ",", "0.1", "]", "]", "]", "\n", "\n", "pdf1", "=", "mn", ".", "pdf", "(", "samples", ",", "means", "[", "0", "]", ",", "covars", "[", "0", "]", ")", "/", "3", "\n", "pdf2", "=", "mn", ".", "pdf", "(", "samples", ",", "means", "[", "1", "]", ",", "covars", "[", "1", "]", ")", "/", "3", "\n", "pdf3", "=", "mn", ".", "pdf", "(", "samples", ",", "means", "[", "2", "]", ",", "covars", "[", "2", "]", ")", "/", "3", "\n", "\n", "return", "np", ".", "log", "(", "pdf1", "+", "pdf2", "+", "pdf3", ")", "\n", "\n", "", "elif", "data", "==", "'mixture_2'", ":", "\n", "        ", "means", "=", "[", "[", "-", "3.0", ",", "-", "3.0", "]", ",", "[", "3.0", ",", "3.0", "]", "]", "\n", "covars", "=", "[", "[", "[", "0.09", ",", "0.0", "]", ",", "[", "0.0", ",", "0.09", "]", "]", ",", "\n", "[", "[", "0.09", ",", "0.0", "]", ",", "[", "0.0", ",", "0.09", "]", "]", "]", "\n", "\n", "pdf1", "=", "mn", ".", "pdf", "(", "samples", ",", "means", "[", "0", "]", ",", "covars", "[", "0", "]", ")", "/", "2", "\n", "pdf2", "=", "mn", ".", "pdf", "(", "samples", ",", "means", "[", "1", "]", ",", "covars", "[", "1", "]", ")", "/", "2", "\n", "\n", "return", "np", ".", "log", "(", "pdf1", "+", "pdf2", ")", "\n", "\n", "", "elif", "data", "==", "'mixture_3'", ":", "\n", "        ", "means", "=", "[", "[", "-", "1.0", ",", "-", "1.0", "]", ",", "[", "1.0", ",", "1.0", "]", "]", "\n", "covars", "=", "[", "[", "[", "0.25", ",", "0.0", "]", ",", "[", "0.0", ",", "0.25", "]", "]", ",", "\n", "[", "[", "0.09", ",", "0.0", "]", ",", "[", "0.0", ",", "0.09", "]", "]", "]", "\n", "\n", "pdf1", "=", "mn", ".", "pdf", "(", "samples", ",", "means", "[", "0", "]", ",", "covars", "[", "0", "]", ")", "/", "2", "\n", "pdf2", "=", "mn", ".", "pdf", "(", "samples", ",", "means", "[", "1", "]", ",", "covars", "[", "1", "]", ")", "/", "2", "\n", "\n", "return", "np", ".", "log", "(", "pdf1", "+", "pdf2", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.utils.data_gen.generate_mixture_data": [[6, 76], ["int", "torch.set_default_tensor_type", "deconv.gmm.sgd_deconv_gmm.SGDDeconvGMM", "torch.zeros", "torch.Tensor", "torch.Tensor", "torch.log", "torch.get_rng_state", "torch.manual_seed", "deconv.gmm.sgd_deconv_gmm.SGDDeconvGMM.sample_prior", "deconv.gmm.sgd_deconv_gmm.SGDDeconvGMM.sample_prior", "torch.Tensor", "torch.distributions.MultivariateNormal", "torch.manual_seed", "deconv.gmm.sgd_deconv_gmm.SGDDeconvGMM.sample_prior", "torch.set_rng_state", "torch.distributions.MultivariateNormal.sample", "torch.distributions.MultivariateNormal.sample", "torch.distributions.MultivariateNormal.sample", "torch.device", "torch.Tensor"], "function", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.sample_prior", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.sample_prior", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.sample_prior", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample"], ["def", "generate_mixture_data", "(", ")", ":", "\n", "    ", "K", "=", "3", "\n", "D", "=", "2", "\n", "N", "=", "50000", "\n", "N_val", "=", "int", "(", "0.25", "*", "N", ")", "\n", "\n", "torch", ".", "set_default_tensor_type", "(", "torch", ".", "FloatTensor", ")", "\n", "\n", "ref_gmm", "=", "SGDDeconvGMM", "(", "\n", "K", ",", "\n", "D", ",", "\n", "batch_size", "=", "512", ",", "\n", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", ")", "\n", "\n", "ref_gmm", ".", "module", ".", "soft_weights", ".", "data", "=", "torch", ".", "zeros", "(", "K", ")", "\n", "scale", "=", "2", "\n", "\n", "ref_gmm", ".", "module", ".", "means", ".", "data", "=", "torch", ".", "Tensor", "(", "[", "\n", "[", "-", "scale", ",", "0", "]", ",", "\n", "[", "0", ",", "-", "scale", "]", ",", "\n", "[", "0", ",", "scale", "]", "\n", "]", ")", "\n", "\n", "short_std", "=", "0.3", "\n", "long_std", "=", "1", "\n", "\n", "stds", "=", "torch", ".", "Tensor", "(", "[", "\n", "[", "short_std", ",", "long_std", "]", ",", "\n", "[", "long_std", ",", "short_std", "]", ",", "\n", "[", "long_std", ",", "short_std", "]", "\n", "]", ")", "\n", "\n", "ref_gmm", ".", "module", ".", "l_diag", ".", "data", "=", "torch", ".", "log", "(", "stds", ")", "\n", "\n", "state", "=", "torch", ".", "get_rng_state", "(", ")", "\n", "torch", ".", "manual_seed", "(", "432988", ")", "\n", "\n", "z_train", "=", "ref_gmm", ".", "sample_prior", "(", "N", ")", "\n", "z_val", "=", "ref_gmm", ".", "sample_prior", "(", "N_val", ")", "\n", "\n", "noise_short", "=", "0.1", "\n", "noise_long", "=", "1.0", "\n", "\n", "S", "=", "torch", ".", "Tensor", "(", "[", "\n", "[", "noise_short", ",", "0", "]", ",", "\n", "[", "0", ",", "noise_long", "]", "\n", "]", ")", "\n", "\n", "noise_distribution", "=", "torch", ".", "distributions", ".", "MultivariateNormal", "(", "\n", "loc", "=", "torch", ".", "Tensor", "(", "[", "0", ",", "0", "]", ")", ",", "\n", "covariance_matrix", "=", "S", "\n", ")", "\n", "\n", "x_train", "=", "z_train", "+", "noise_distribution", ".", "sample", "(", "[", "N", "]", ")", "\n", "x_val", "=", "z_val", "+", "noise_distribution", ".", "sample", "(", "[", "N_val", "]", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "263568", ")", "\n", "\n", "z_test", "=", "ref_gmm", ".", "sample_prior", "(", "N", ")", "\n", "x_test", "=", "z_test", "+", "noise_distribution", ".", "sample", "(", "[", "N", "]", ")", "\n", "\n", "torch", ".", "set_rng_state", "(", "state", ")", "\n", "\n", "return", "(", "\n", "ref_gmm", ",", "\n", "S", ",", "\n", "(", "z_train", ",", "x_train", ")", ",", "\n", "(", "z_val", ",", "x_val", ")", ",", "\n", "(", "z_test", ",", "x_test", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.utils.misc.get_logger": [[3, 31], ["logging.getLogger", "logging.getLogger.setLevel", "logging.getLogger.info", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.getLogger.addHandler", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.getLogger.addHandler", "open", "logging.getLogger.info", "logging.getLogger.info", "f.read", "open", "logging.getLogger.info", "package_f.read"], "function", ["None"], ["def", "get_logger", "(", "logpath", ",", "filepath", ",", "package_files", "=", "[", "]", ",", "displaying", "=", "True", ",", "saving", "=", "True", ",", "debug", "=", "False", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "if", "debug", ":", "\n", "        ", "level", "=", "logging", ".", "DEBUG", "\n", "", "else", ":", "\n", "        ", "level", "=", "logging", ".", "INFO", "\n", "\n", "", "logger", ".", "setLevel", "(", "level", ")", "\n", "if", "saving", ":", "\n", "        ", "info_file_handler", "=", "logging", ".", "FileHandler", "(", "logpath", ",", "mode", "=", "\"a\"", ")", "\n", "info_file_handler", ".", "setLevel", "(", "level", ")", "\n", "logger", ".", "addHandler", "(", "info_file_handler", ")", "\n", "\n", "", "if", "displaying", ":", "\n", "        ", "console_handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "console_handler", ".", "setLevel", "(", "level", ")", "\n", "logger", ".", "addHandler", "(", "console_handler", ")", "\n", "\n", "", "logger", ".", "info", "(", "filepath", ")", "\n", "with", "open", "(", "filepath", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "logger", ".", "info", "(", "f", ".", "read", "(", ")", ")", "\n", "\n", "", "for", "f", "in", "package_files", ":", "\n", "        ", "logger", ".", "info", "(", "f", ")", "\n", "with", "open", "(", "f", ",", "\"r\"", ")", "as", "package_f", ":", "\n", "            ", "logger", ".", "info", "(", "package_f", ".", "read", "(", ")", ")", "\n", "\n", "", "", "return", "logger", "", "", ""]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.utils.make_2d_toy_noise_covar.covar_gen": [[5, 82], ["numpy.zeros", "numpy.array", "numpy.zeros", "numpy.array", "numpy.zeros", "numpy.array", "numpy.zeros", "numpy.array", "numpy.zeros", "numpy.array", "numpy.zeros", "numpy.array", "numpy.zeros", "numpy.array", "numpy.zeros", "numpy.array", "numpy.zeros", "numpy.array", "numpy.zeros", "range", "ValueError", "rng.normal", "rng.normal", "numpy.array"], "function", ["None"], ["def", "covar_gen", "(", "covar", ",", "n_samples", ",", "rng", "=", "np", ".", "random", ")", ":", "\n", "    ", "if", "covar", "==", "'gmm'", ":", "\n", "        ", "covar", "=", "np", ".", "zeros", "(", "(", "n_samples", ",", "2", ",", "2", ")", ")", "\n", "covar", "[", ":", "]", "=", "np", ".", "array", "(", "[", "[", "0.1", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "1.0", "]", "]", ")", "\n", "\n", "return", "covar", "\n", "\n", "", "elif", "covar", "==", "'fixed_diagonal_covar1'", ":", "\n", "        ", "covar", "=", "np", ".", "zeros", "(", "(", "n_samples", ",", "2", ",", "2", ")", ")", "\n", "covar", "[", ":", "]", "=", "np", ".", "array", "(", "[", "[", "0.1", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "3.0", "]", "]", ")", "\n", "\n", "return", "covar", "\n", "\n", "", "elif", "covar", "==", "'fixed_diagonal_covar2'", ":", "\n", "        ", "covar", "=", "np", ".", "zeros", "(", "(", "n_samples", ",", "2", ",", "2", ")", ")", "\n", "covar", "[", ":", "]", "=", "np", ".", "array", "(", "[", "[", "0.3", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "0.3", "]", "]", ")", "\n", "\n", "return", "covar", "\n", "\n", "", "elif", "covar", "==", "'fixed_diagonal_covar3'", ":", "\n", "        ", "covar", "=", "np", ".", "zeros", "(", "(", "n_samples", ",", "2", ",", "2", ")", ")", "\n", "covar", "[", ":", "]", "=", "np", ".", "array", "(", "[", "[", "0.2", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "0.2", "]", "]", ")", "\n", "\n", "return", "covar", "\n", "\n", "", "elif", "covar", "==", "'fixed_diagonal_covar4'", ":", "\n", "        ", "covar", "=", "np", ".", "zeros", "(", "(", "n_samples", ",", "2", ",", "2", ")", ")", "\n", "covar", "[", ":", "]", "=", "np", ".", "array", "(", "[", "[", "0.05", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "1.0", "]", "]", ")", "\n", "\n", "return", "covar", "\n", "\n", "", "elif", "covar", "==", "'fixed_diagonal_covar5'", ":", "\n", "        ", "covar", "=", "np", ".", "zeros", "(", "(", "n_samples", ",", "2", ",", "2", ")", ")", "\n", "covar", "[", ":", "]", "=", "np", ".", "array", "(", "[", "[", "0.05", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "0.8", "]", "]", ")", "\n", "\n", "return", "covar", "\n", "\n", "", "elif", "covar", "==", "'fixed_diagonal_covar6'", ":", "\n", "        ", "covar", "=", "np", ".", "zeros", "(", "(", "n_samples", ",", "2", ",", "2", ")", ")", "\n", "covar", "[", ":", "]", "=", "np", ".", "array", "(", "[", "[", "0.5", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "0.01", "]", "]", ")", "\n", "\n", "return", "covar", "\n", "\n", "", "elif", "covar", "==", "'fixed_diagonal_covar9'", ":", "\n", "        ", "covar", "=", "np", ".", "zeros", "(", "(", "n_samples", ",", "2", ",", "2", ")", ")", "\n", "covar", "[", ":", "]", "=", "np", ".", "array", "(", "[", "[", "2.0", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "0.01", "]", "]", ")", "\n", "\n", "return", "covar", "\n", "\n", "", "elif", "covar", "==", "'fixed_diagonal_covar8'", ":", "\n", "        ", "covar", "=", "np", ".", "zeros", "(", "(", "n_samples", ",", "2", ",", "2", ")", ")", "\n", "covar", "[", ":", "]", "=", "np", ".", "array", "(", "[", "[", "0.1", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "1.0", "]", "]", ")", "\n", "\n", "return", "covar", "\n", "\n", "", "elif", "covar", "==", "'random_diagonal_covar1'", ":", "\n", "        ", "sigma_x", "=", "rng", ".", "normal", "(", "0.0", ",", "0.1", ",", "n_samples", ")", "**", "2", "\n", "sigma_y", "=", "rng", ".", "normal", "(", "0.0", ",", "1.0", ",", "n_samples", ")", "**", "2", "\n", "\n", "covar", "=", "np", ".", "zeros", "(", "(", "n_samples", ",", "2", ",", "2", ")", ")", "\n", "for", "i", "in", "range", "(", "n_samples", ")", ":", "\n", "            ", "covar", "[", "i", "]", "=", "np", ".", "array", "(", "[", "[", "sigma_x", "[", "i", "]", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "sigma_y", "[", "i", "]", "]", "]", ")", "\n", "\n", "", "return", "covar", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Choose one of the available covariance options.'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.utils.sampling.minibatch_sample": [[5, 26], ["torch.device", "torch.zeros", "range", "len", "min", "sample_f().to", "sample_f().to", "sample_f", "sample_f"], "function", ["None"], ["def", "minibatch_sample", "(", "sample_f", ",", "num_samples", ",", "dimensions", ",", "batch_size", ",", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ",", "context", "=", "None", ",", "x", "=", "None", ")", ":", "\n", "\n", "    ", "if", "x", "is", "not", "None", ":", "\n", "        ", "ld", "=", "len", "(", "x", ")", "\n", "", "elif", "context", "is", "not", "None", ":", "\n", "        ", "ld", "=", "context", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "ld", "=", "1", "\n", "\n", "", "samples", "=", "torch", ".", "zeros", "(", "(", "ld", ",", "num_samples", ",", "dimensions", ")", ",", "device", "=", "device", ")", "\n", "\n", "for", "i", "in", "range", "(", "-", "(", "-", "num_samples", "//", "batch_size", ")", ")", ":", "\n", "        ", "start", "=", "i", "*", "batch_size", "\n", "stop", "=", "(", "i", "+", "1", ")", "*", "batch_size", "\n", "n", "=", "min", "(", "batch_size", ",", "num_samples", "-", "start", ")", "\n", "if", "x", "is", "None", ":", "\n", "            ", "samples", "[", ":", ",", "start", ":", "stop", ",", ":", "]", "=", "sample_f", "(", "n", ",", "context", "=", "context", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "samples", "[", ":", ",", "start", ":", "stop", ",", ":", "]", "=", "sample_f", "(", "x", ",", "n", ",", "context", "=", "context", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "", "return", "samples", "", "", ""]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.base.BaseFlow.__init__": [[11, 27], ["base.BaseFlow._create_transform", "nflows.flows.Flow", "base.BaseFlow.flow.to", "nflows.distributions.StandardNormal"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.coupling.AffineCouplingFlow._create_transform"], ["def", "__init__", "(", "self", ",", "dimensions", ",", "flow_steps", "=", "5", ",", "lr", "=", "1e-3", ",", "epochs", "=", "100", ",", "batch_size", "=", "256", ",", "device", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "dimensions", "=", "dimensions", "\n", "self", ".", "flow_steps", "=", "flow_steps", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "lr", "=", "lr", "\n", "transform", "=", "self", ".", "_create_transform", "(", ")", "\n", "\n", "self", ".", "flow", "=", "flows", ".", "Flow", "(", "\n", "transform", ",", "\n", "distributions", ".", "StandardNormal", "(", "(", "self", ".", "dimensions", ",", ")", ")", "\n", ")", "\n", "\n", "self", ".", "flow", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.base.BaseFlow._create_linear_transform": [[28, 32], ["nflows.transforms.CompositeTransform", "nflows.transforms.RandomPermutation", "nflows.transforms.LULinear"], "methods", ["None"], ["", "def", "_create_linear_transform", "(", "self", ")", ":", "\n", "        ", "return", "transforms", ".", "CompositeTransform", "(", "[", "\n", "transforms", ".", "RandomPermutation", "(", "features", "=", "self", ".", "dimensions", ")", ",", "\n", "transforms", ".", "LULinear", "(", "self", ".", "dimensions", ",", "identity_init", "=", "True", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.base.BaseFlow._create_transform": [[34, 37], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "_create_transform", "(", "context_features", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.base.BaseFlow.fit": [[38, 77], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.DataLoader", "torch.DataLoader", "range", "base.BaseFlow.flow.train", "enumerate", "len", "base.BaseFlow.flow.parameters", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "base.BaseFlow.flow.log_prob", "loss.item", "loss.backward", "torch.optim.Adam.step", "torch.optim.Adam.step", "base.BaseFlow.score_batch", "print", "a.to", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score_batch"], ["", "def", "fit", "(", "self", ",", "data", ",", "val_data", "=", "None", ")", ":", "\n", "\n", "        ", "optimiser", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "params", "=", "self", ".", "flow", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "lr", "\n", ")", "\n", "\n", "loader", "=", "data_utils", ".", "DataLoader", "(", "\n", "data", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "# num_workers=8,", "\n", "shuffle", "=", "True", ",", "\n", "# pin_memory=True", "\n", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "epochs", ")", ":", "\n", "\n", "            ", "self", ".", "flow", ".", "train", "(", ")", "\n", "\n", "train_loss", "=", "0.0", "\n", "\n", "for", "j", ",", "d", "in", "enumerate", "(", "loader", ")", ":", "\n", "                ", "d", "=", "[", "a", ".", "to", "(", "self", ".", "device", ")", "for", "a", "in", "d", "]", "\n", "optimiser", ".", "zero_grad", "(", ")", "\n", "log_prob", "=", "self", ".", "flow", ".", "log_prob", "(", "d", "[", "0", "]", ")", "\n", "loss", "=", "-", "1", "*", "torch", ".", "mean", "(", "log_prob", ")", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimiser", ".", "step", "(", ")", "\n", "\n", "", "train_loss", "/=", "len", "(", "loader", ")", "\n", "\n", "if", "val_data", ":", "\n", "                ", "val_loss", "=", "self", ".", "score_batch", "(", "val_data", ")", "\n", "\n", "print", "(", "'Epoch {}, Train Loss: {}, Val Loss :{}'", ".", "format", "(", "\n", "i", ",", "\n", "train_loss", ",", "\n", "val_loss", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.base.BaseFlow.score": [[79, 83], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "base.BaseFlow.flow.eval", "base.BaseFlow.flow.log_prob"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob"], ["", "", "", "def", "score", "(", "self", ",", "data", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "flow", ".", "eval", "(", ")", "\n", "return", "self", ".", "flow", ".", "log_prob", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.base.BaseFlow.score_batch": [[84, 98], ["torch.DataLoader", "torch.DataLoader", "enumerate", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "len", "a.to", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "base.BaseFlow.score"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score"], ["", "", "def", "score_batch", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "loader", "=", "data_utils", ".", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "# num_workers=4,", "\n", "# pin_memory=True", "\n", ")", "\n", "log_prob", "=", "0.0", "\n", "\n", "for", "j", ",", "d", "in", "enumerate", "(", "loader", ")", ":", "\n", "            ", "d", "=", "[", "a", ".", "to", "(", "self", ".", "device", ")", "for", "a", "in", "d", "]", "\n", "log_prob", "+=", "torch", ".", "mean", "(", "self", ".", "score", "(", "d", "[", "0", "]", ")", ")", ".", "item", "(", ")", "\n", "\n", "", "return", "log_prob", "/", "len", "(", "loader", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.maf.MAFlow._create_maf_transform": [[9, 20], ["nflows.transforms.MaskedAffineAutoregressiveTransform"], "methods", ["None"], ["    ", "def", "_create_maf_transform", "(", "self", ",", "context_features", "=", "None", ",", "hidden_features", "=", "128", ")", ":", "\n", "        ", "return", "transforms", ".", "MaskedAffineAutoregressiveTransform", "(", "\n", "features", "=", "self", ".", "dimensions", ",", "\n", "hidden_features", "=", "hidden_features", ",", "\n", "context_features", "=", "context_features", ",", "\n", "num_blocks", "=", "2", ",", "\n", "use_residual_blocks", "=", "True", ",", "\n", "random_mask", "=", "False", ",", "\n", "activation", "=", "torch", ".", "nn", ".", "functional", ".", "relu", ",", "\n", "dropout_probability", "=", "0.2", ",", "\n", "use_batch_norm", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.maf.MAFlow._create_transform": [[22, 32], ["nflows.transforms.CompositeTransform", "nflows.transforms.CompositeTransform", "maf.MAFlow._create_linear_transform", "range", "maf.MAFlow._create_linear_transform", "maf.MAFlow._create_maf_transform"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_no_mdn.SVIFlowToy._create_linear_transform", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_no_mdn.SVIFlowToy._create_linear_transform", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_no_mdn.SVIFlowToy._create_maf_transform"], ["", "def", "_create_transform", "(", "self", ",", "context_features", "=", "None", ",", "hidden_features", "=", "128", ")", ":", "\n", "\n", "        ", "return", "transforms", ".", "CompositeTransform", "(", "[", "\n", "\n", "transforms", ".", "CompositeTransform", "(", "[", "\n", "self", ".", "_create_linear_transform", "(", ")", ",", "\n", "self", ".", "_create_maf_transform", "(", "context_features", ",", "hidden_features", ")", "\n", "]", ")", "for", "i", "in", "range", "(", "self", ".", "flow_steps", ")", "\n", "]", "+", "[", "\n", "self", ".", "_create_linear_transform", "(", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_no_mdn.SVIFlowToyNoise.__init__": [[19, 50], ["torch.Module.__init__", "vae.VariationalAutoencoderToyNoise().to", "vae.VariationalAutoencoderToyNoise", "svi_no_mdn.SVIFlowToyNoise._create_prior", "svi_no_mdn.SVIFlowToyNoise._create_approximate_posterior", "svi_no_mdn.SVIFlowToyNoise._create_likelihood", "svi_no_mdn.SVIFlowToyNoise._create_input_encoder"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.__init__", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow._create_prior", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_mdn.SVIMDNFlow._create_approximate_posterior", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow._create_likelihood", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow._create_input_encoder"], ["    ", "def", "__init__", "(", "self", ",", "\n", "dimensions", ",", "\n", "objective", ",", "\n", "posterior_context_size", ",", "\n", "batch_size", ",", "\n", "device", ",", "\n", "maf_steps_prior", ",", "\n", "maf_steps_posterior", ",", "\n", "maf_features", ",", "\n", "maf_hidden_blocks", ",", "\n", "K", "=", "1", ",", "\n", "act_fun", "=", "nn", ".", "functional", ".", "relu", ")", ":", "\n", "\n", "        ", "super", "(", "SVIFlowToyNoise", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dimensions", "=", "dimensions", "\n", "self", ".", "objective", "=", "objective", "\n", "self", ".", "posterior_context_size", "=", "posterior_context_size", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "maf_steps_prior", "=", "maf_steps_prior", "\n", "self", ".", "maf_steps_posterior", "=", "maf_steps_posterior", "\n", "self", ".", "maf_features", "=", "maf_features", "\n", "self", ".", "maf_hidden_blocks", "=", "maf_hidden_blocks", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "act_fun", "=", "act_fun", "\n", "\n", "self", ".", "model", "=", "VariationalAutoencoderToyNoise", "(", "prior", "=", "self", ".", "_create_prior", "(", ")", ",", "\n", "approximate_posterior", "=", "self", ".", "_create_approximate_posterior", "(", ")", ",", "\n", "likelihood", "=", "self", ".", "_create_likelihood", "(", ")", ",", "\n", "inputs_encoder", "=", "self", ".", "_create_input_encoder", "(", ")", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_no_mdn.SVIFlowToyNoise._create_approximate_posterior": [[51, 57], ["svi_no_mdn.SVIFlowToyNoise._create_transform", "nflows.distributions.StandardNormal", "nflows.flows.Flow", "nflows.transforms.InverseTransform"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.coupling.AffineCouplingFlow._create_transform"], ["", "def", "_create_approximate_posterior", "(", "self", ")", ":", "\n", "        ", "posterior_transform", "=", "self", ".", "_create_transform", "(", "self", ".", "maf_steps_posterior", ",", "self", ".", "posterior_context_size", ")", "\n", "distribution", "=", "StandardNormal", "(", "(", "self", ".", "dimensions", ",", ")", ")", "\n", "\n", "return", "flows", ".", "Flow", "(", "transforms", ".", "InverseTransform", "(", "posterior_transform", ")", ",", "\n", "distribution", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_no_mdn.SVIFlowToyNoise._create_prior": [[58, 60], ["distributions.DeconvGaussianToyNoise"], "methods", ["None"], ["", "def", "_create_prior", "(", "self", ")", ":", "\n", "        ", "return", "DeconvGaussianToyNoise", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_no_mdn.SVIFlowToyNoise._create_likelihood": [[61, 67], ["svi_no_mdn.SVIFlowToyNoise._create_transform", "nflows.distributions.StandardNormal", "nflows.flows.Flow"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.coupling.AffineCouplingFlow._create_transform"], ["", "def", "_create_likelihood", "(", "self", ")", ":", "\n", "        ", "self", ".", "transform", "=", "self", ".", "_create_transform", "(", "self", ".", "maf_steps_prior", ")", "\n", "distribution", "=", "StandardNormal", "(", "(", "self", ".", "dimensions", ",", ")", ")", "\n", "\n", "return", "flows", ".", "Flow", "(", "self", ".", "transform", ",", "\n", "distribution", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_no_mdn.SVIFlowToyNoise._create_input_encoder": [[68, 77], ["None"], "methods", ["None"], ["", "def", "_create_input_encoder", "(", "self", ")", ":", "\n", "        ", "def", "input_encoder", "(", "data", ")", ":", "\n", "# w, noise_covar = data", "\n", "# x = torch.cat((w, noise_covar[:, self.idx[0], self.idx[1]]), dim=1)", "\n", "# return self.diagonal_mdn.get_context(x)", "\n", "            ", "w", ",", "_", "=", "data", "\n", "return", "w", "\n", "\n", "", "return", "input_encoder", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_no_mdn.SVIFlowToyNoise._create_linear_transform": [[78, 81], ["nflows.transforms.CompositeTransform", "nflows.transforms.RandomPermutation", "nflows.transforms.LULinear"], "methods", ["None"], ["", "def", "_create_linear_transform", "(", "self", ")", ":", "\n", "        ", "return", "transforms", ".", "CompositeTransform", "(", "[", "transforms", ".", "RandomPermutation", "(", "features", "=", "self", ".", "dimensions", ")", ",", "\n", "transforms", ".", "LULinear", "(", "self", ".", "dimensions", ",", "identity_init", "=", "True", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_no_mdn.SVIFlowToyNoise._create_transform": [[82, 86], ["nflows.transforms.CompositeTransform", "nflows.transforms.CompositeTransform", "svi_no_mdn.SVIFlowToyNoise._create_linear_transform", "range", "svi_no_mdn.SVIFlowToyNoise._create_linear_transform", "svi_no_mdn.SVIFlowToyNoise._create_maf_transform"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_no_mdn.SVIFlowToy._create_linear_transform", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_no_mdn.SVIFlowToy._create_linear_transform", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_no_mdn.SVIFlowToy._create_maf_transform"], ["", "def", "_create_transform", "(", "self", ",", "flow_steps", ",", "context_features", "=", "None", ")", ":", "\n", "        ", "return", "transforms", ".", "CompositeTransform", "(", "[", "transforms", ".", "CompositeTransform", "(", "[", "self", ".", "_create_linear_transform", "(", ")", ",", "\n", "self", ".", "_create_maf_transform", "(", "context_features", ")", "]", ")", "for", "i", "in", "range", "(", "flow_steps", ")", "]", "+", "\n", "[", "self", ".", "_create_linear_transform", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_no_mdn.SVIFlowToyNoise._create_maf_transform": [[87, 97], ["nflows.transforms.MaskedAffineAutoregressiveTransform"], "methods", ["None"], ["", "def", "_create_maf_transform", "(", "self", ",", "context_features", "=", "None", ")", ":", "\n", "        ", "return", "transforms", ".", "MaskedAffineAutoregressiveTransform", "(", "features", "=", "self", ".", "dimensions", ",", "\n", "hidden_features", "=", "self", ".", "maf_features", ",", "\n", "context_features", "=", "context_features", ",", "\n", "num_blocks", "=", "self", ".", "maf_hidden_blocks", ",", "\n", "use_residual_blocks", "=", "False", ",", "\n", "random_mask", "=", "False", ",", "\n", "activation", "=", "torch", ".", "nn", ".", "functional", ".", "relu", ",", "\n", "dropout_probability", "=", "0.0", ",", "\n", "use_batch_norm", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_no_mdn.SVIFlowToyNoise.score": [[98, 105], ["svi_no_mdn.SVIFlowToyNoise.model.eval", "svi_no_mdn.SVIFlowToyNoise.model.log_prob_lower_bound", "svi_no_mdn.SVIFlowToyNoise.model.stochastic_elbo"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.vae.VariationalAutoencoderToyNoise.log_prob_lower_bound", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.vae.VariationalAutoencoderToyNoise.stochastic_elbo"], ["", "def", "score", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "if", "self", ".", "objective", "==", "'iwae'", ":", "\n", "            ", "return", "self", ".", "model", ".", "log_prob_lower_bound", "(", "data", ",", "num_samples", "=", "self", ".", "K", ")", "\n", "\n", "", "elif", "self", ".", "objective", "==", "'elbo'", ":", "\n", "            ", "return", "self", ".", "model", ".", "stochastic_elbo", "(", "data", ",", "num_samples", "=", "self", ".", "K", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_no_mdn.SVIFlowToy.__init__": [[107, 138], ["torch.Module.__init__", "vae.VariationalAutoencoder().to", "vae.VariationalAutoencoder", "svi_no_mdn.SVIFlowToy._create_prior", "svi_no_mdn.SVIFlowToy._create_approximate_posterior", "svi_no_mdn.SVIFlowToy._create_likelihood", "svi_no_mdn.SVIFlowToy._create_input_encoder"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.__init__", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow._create_prior", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_mdn.SVIMDNFlow._create_approximate_posterior", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow._create_likelihood", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow._create_input_encoder"], ["    ", "def", "__init__", "(", "self", ",", "\n", "dimensions", ",", "\n", "objective", ",", "\n", "posterior_context_size", ",", "\n", "batch_size", ",", "\n", "device", ",", "\n", "maf_steps_prior", ",", "\n", "maf_steps_posterior", ",", "\n", "maf_features", ",", "\n", "maf_hidden_blocks", ",", "\n", "K", "=", "1", ",", "\n", "act_fun", "=", "nn", ".", "functional", ".", "relu", ")", ":", "\n", "\n", "        ", "super", "(", "SVIFlowToy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dimensions", "=", "dimensions", "\n", "self", ".", "objective", "=", "objective", "\n", "self", ".", "posterior_context_size", "=", "posterior_context_size", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "maf_steps_prior", "=", "maf_steps_prior", "\n", "self", ".", "maf_steps_posterior", "=", "maf_steps_posterior", "\n", "self", ".", "maf_features", "=", "maf_features", "\n", "self", ".", "maf_hidden_blocks", "=", "maf_hidden_blocks", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "act_fun", "=", "act_fun", "\n", "\n", "self", ".", "model", "=", "VariationalAutoencoder", "(", "prior", "=", "self", ".", "_create_prior", "(", ")", ",", "\n", "approximate_posterior", "=", "self", ".", "_create_approximate_posterior", "(", ")", ",", "\n", "likelihood", "=", "self", ".", "_create_likelihood", "(", ")", ",", "\n", "inputs_encoder", "=", "self", ".", "_create_input_encoder", "(", ")", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_no_mdn.SVIFlowToy._create_approximate_posterior": [[139, 147], ["svi_no_mdn.SVIFlowToy._create_transform", "nflows.distributions.StandardNormal", "nflows.flows.Flow", "nflows.transforms.InverseTransform"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.coupling.AffineCouplingFlow._create_transform"], ["", "def", "_create_approximate_posterior", "(", "self", ")", ":", "\n", "\n", "        ", "posterior_transform", "=", "self", ".", "_create_transform", "(", "self", ".", "maf_steps_posterior", ",", "self", ".", "posterior_context_size", ")", "\n", "# distribution = ConditionalDiagonalNormal((self.dimensions,))", "\n", "distribution", "=", "StandardNormal", "(", "(", "self", ".", "dimensions", ",", ")", ")", "\n", "\n", "return", "flows", ".", "Flow", "(", "transforms", ".", "InverseTransform", "(", "posterior_transform", ")", ",", "\n", "distribution", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_no_mdn.SVIFlowToy._create_prior": [[148, 154], ["svi_no_mdn.SVIFlowToy._create_transform", "nflows.distributions.StandardNormal", "nflows.flows.Flow"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.coupling.AffineCouplingFlow._create_transform"], ["", "def", "_create_prior", "(", "self", ")", ":", "\n", "        ", "self", ".", "transform", "=", "self", ".", "_create_transform", "(", "self", ".", "maf_steps_prior", ")", "\n", "distribution", "=", "StandardNormal", "(", "(", "self", ".", "dimensions", ",", ")", ")", "\n", "\n", "return", "flows", ".", "Flow", "(", "self", ".", "transform", ",", "\n", "distribution", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_no_mdn.SVIFlowToy._create_likelihood": [[155, 157], ["distributions.DeconvGaussianToy"], "methods", ["None"], ["", "def", "_create_likelihood", "(", "self", ")", ":", "\n", "        ", "return", "DeconvGaussianToy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_no_mdn.SVIFlowToy._create_input_encoder": [[158, 167], ["None"], "methods", ["None"], ["", "def", "_create_input_encoder", "(", "self", ")", ":", "\n", "        ", "def", "input_encoder", "(", "data", ")", ":", "\n", "# w, noise_covar = data", "\n", "# x = torch.cat((w, noise_covar[:, self.idx[0], self.idx[1]]), dim=1)", "\n", "# return self.diagonal_mdn.get_context(x)", "\n", "            ", "w", ",", "_", "=", "data", "\n", "return", "w", "\n", "\n", "", "return", "input_encoder", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_no_mdn.SVIFlowToy._create_linear_transform": [[168, 171], ["nflows.transforms.CompositeTransform", "nflows.transforms.RandomPermutation", "nflows.transforms.LULinear"], "methods", ["None"], ["", "def", "_create_linear_transform", "(", "self", ")", ":", "\n", "        ", "return", "transforms", ".", "CompositeTransform", "(", "[", "transforms", ".", "RandomPermutation", "(", "features", "=", "self", ".", "dimensions", ")", ",", "\n", "transforms", ".", "LULinear", "(", "self", ".", "dimensions", ",", "identity_init", "=", "True", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_no_mdn.SVIFlowToy._create_transform": [[172, 176], ["nflows.transforms.CompositeTransform", "nflows.transforms.CompositeTransform", "svi_no_mdn.SVIFlowToy._create_linear_transform", "range", "svi_no_mdn.SVIFlowToy._create_linear_transform", "svi_no_mdn.SVIFlowToy._create_maf_transform"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_no_mdn.SVIFlowToy._create_linear_transform", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_no_mdn.SVIFlowToy._create_linear_transform", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_no_mdn.SVIFlowToy._create_maf_transform"], ["", "def", "_create_transform", "(", "self", ",", "flow_steps", ",", "context_features", "=", "None", ")", ":", "\n", "        ", "return", "transforms", ".", "CompositeTransform", "(", "[", "transforms", ".", "CompositeTransform", "(", "[", "self", ".", "_create_linear_transform", "(", ")", ",", "\n", "self", ".", "_create_maf_transform", "(", "context_features", ")", "]", ")", "for", "i", "in", "range", "(", "flow_steps", ")", "]", "+", "\n", "[", "self", ".", "_create_linear_transform", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_no_mdn.SVIFlowToy._create_maf_transform": [[177, 187], ["nflows.transforms.MaskedAffineAutoregressiveTransform"], "methods", ["None"], ["", "def", "_create_maf_transform", "(", "self", ",", "context_features", "=", "None", ")", ":", "\n", "        ", "return", "transforms", ".", "MaskedAffineAutoregressiveTransform", "(", "features", "=", "self", ".", "dimensions", ",", "\n", "hidden_features", "=", "self", ".", "maf_features", ",", "\n", "context_features", "=", "context_features", ",", "\n", "num_blocks", "=", "self", ".", "maf_hidden_blocks", ",", "\n", "use_residual_blocks", "=", "False", ",", "\n", "random_mask", "=", "False", ",", "\n", "activation", "=", "torch", ".", "nn", ".", "functional", ".", "relu", ",", "\n", "dropout_probability", "=", "0.0", ",", "\n", "use_batch_norm", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_no_mdn.SVIFlowToy.score": [[188, 195], ["svi_no_mdn.SVIFlowToy.model.eval", "svi_no_mdn.SVIFlowToy.model.log_prob_lower_bound", "svi_no_mdn.SVIFlowToy.model.stochastic_elbo"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.vae.VariationalAutoencoderToyNoise.log_prob_lower_bound", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.vae.VariationalAutoencoderToyNoise.stochastic_elbo"], ["", "def", "score", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "if", "self", ".", "objective", "==", "'iwae'", ":", "\n", "            ", "return", "self", ".", "model", ".", "log_prob_lower_bound", "(", "data", ",", "num_samples", "=", "self", ".", "K", ")", "\n", "\n", "", "elif", "self", ".", "objective", "==", "'elbo'", ":", "\n", "            ", "return", "self", ".", "model", ".", "stochastic_elbo", "(", "data", ",", "num_samples", "=", "self", ".", "K", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_no_mdn.SVIFlow.__init__": [[200, 218], ["maf.MAFlow.__init__", "vae.VariationalAutoencoder", "svi_no_mdn.SVIFlow.model.to", "svi_no_mdn.SVIFlow._create_prior", "svi_no_mdn.SVIFlow._create_approximate_posterior", "svi_no_mdn.SVIFlow._create_likelihood", "svi_no_mdn.SVIFlow._create_input_encoder"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.__init__", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow._create_prior", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_mdn.SVIMDNFlow._create_approximate_posterior", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow._create_likelihood", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow._create_input_encoder"], ["    ", "def", "__init__", "(", "self", ",", "dimensions", ",", "flow_steps", ",", "lr", ",", "epochs", ",", "context_size", "=", "64", ",", "\n", "batch_size", "=", "256", ",", "kl_warmup", "=", "0.2", ",", "kl_init_factor", "=", "0.5", ",", "\n", "device", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "dimensions", ",", "flow_steps", ",", "lr", ",", "epochs", ",", "batch_size", ",", "device", "\n", ")", "\n", "self", ".", "context_size", "=", "context_size", "\n", "self", ".", "kl_warmup", "=", "kl_warmup", "\n", "self", ".", "kl_init_factor", "=", "kl_init_factor", "\n", "\n", "self", ".", "model", "=", "VariationalAutoencoder", "(", "\n", "prior", "=", "self", ".", "_create_prior", "(", ")", ",", "\n", "approximate_posterior", "=", "self", ".", "_create_approximate_posterior", "(", ")", ",", "\n", "likelihood", "=", "self", ".", "_create_likelihood", "(", ")", ",", "\n", "inputs_encoder", "=", "self", ".", "_create_input_encoder", "(", ")", "\n", ")", "\n", "\n", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_no_mdn.SVIFlow._create_prior": [[219, 225], ["svi_no_mdn.SVIFlow._create_transform", "nflows.distributions.StandardNormal", "nflows.flows.Flow"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.coupling.AffineCouplingFlow._create_transform"], ["", "def", "_create_prior", "(", "self", ")", ":", "\n", "        ", "self", ".", "transform", "=", "self", ".", "_create_transform", "(", ")", "\n", "distribution", "=", "StandardNormal", "(", "(", "self", ".", "dimensions", ",", ")", ")", "\n", "return", "flows", ".", "Flow", "(", "\n", "self", ".", "transform", ",", "\n", "distribution", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_no_mdn.SVIFlow._create_likelihood": [[227, 229], ["distributions.DeconvGaussian"], "methods", ["None"], ["", "def", "_create_likelihood", "(", "self", ")", ":", "\n", "        ", "return", "DeconvGaussian", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_no_mdn.SVIFlow._create_input_encoder": [[230, 232], ["torch.DeconvInputEncoder"], "methods", ["None"], ["", "def", "_create_input_encoder", "(", "self", ")", ":", "\n", "        ", "return", "DeconvInputEncoder", "(", "self", ".", "dimensions", ",", "self", ".", "context_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_no_mdn.SVIFlow._create_approximate_posterior": [[233, 254], ["nflows.distributions.StandardNormal", "svi_no_mdn.SVIFlow._create_transform", "nflows.flows.Flow", "nflows.transforms.InverseTransform"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.coupling.AffineCouplingFlow._create_transform"], ["", "def", "_create_approximate_posterior", "(", "self", ")", ":", "\n", "\n", "# context_encoder = torch.nn.Linear(", "\n", "#     self.context_size,", "\n", "#     2 * self.dimensions", "\n", "# )", "\n", "\n", "# distribution = ConditionalDiagonalNormal(", "\n", "#     shape=(self.dimensions,),", "\n", "#     context_encoder=context_encoder", "\n", "# )", "\n", "\n", "        ", "distribution", "=", "StandardNormal", "(", "(", "self", ".", "dimensions", ",", ")", ")", "\n", "\n", "posterior_transform", "=", "self", ".", "_create_transform", "(", "self", ".", "context_size", ")", "\n", "\n", "return", "flows", ".", "Flow", "(", "\n", "transforms", ".", "InverseTransform", "(", "\n", "posterior_transform", "\n", ")", ",", "\n", "distribution", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_no_mdn.SVIFlow._kl_factor": [[256, 267], ["min"], "methods", ["None"], ["", "def", "_kl_factor", "(", "self", ",", "step", ",", "max_steps", ")", ":", "\n", "\n", "        ", "f", "=", "min", "(", "\n", "1.0", ",", "\n", "self", ".", "kl_init_factor", "+", "(", "\n", "(", "1", "-", "self", ".", "kl_init_factor", ")", "*", "step", "/", "(", "\n", "self", ".", "kl_warmup", "*", "max_steps", "\n", ")", "\n", ")", "\n", ")", "\n", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_no_mdn.SVIFlow.fit": [[269, 336], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "len", "range", "svi_no_mdn.SVIFlow.model.train", "enumerate", "len", "svi_no_mdn.SVIFlow.model.parameters", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "svi_no_mdn.SVIFlow.model.log_prob_lower_bound", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "loss.backward", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.optim.Adam.step", "print", "print", "a.to", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "scheduler.step", "svi_no_mdn.SVIFlow.score_batch", "len", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.vae.VariationalAutoencoderToyNoise.log_prob_lower_bound", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score_batch"], ["", "def", "fit", "(", "self", ",", "data", ",", "val_data", "=", "None", ")", ":", "\n", "\n", "        ", "optimiser", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "params", "=", "self", ".", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "lr", "\n", ")", "\n", "\n", "loader", "=", "data_utils", ".", "DataLoader", "(", "\n", "data", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "4", ",", "\n", "pin_memory", "=", "True", "\n", ")", "\n", "\n", "batches", "=", "len", "(", "loader", ")", "\n", "\n", "max_steps", "=", "self", ".", "epochs", "*", "batches", "\n", "\n", "# scheduler = torch.optim.lr_scheduler.CosineAnnealingLR(", "\n", "#    optimiser,", "\n", "#    max_steps", "\n", "# )", "\n", "scheduler", "=", "None", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "epochs", ")", ":", "\n", "\n", "            ", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "train_loss", "=", "0.0", "\n", "\n", "for", "j", ",", "d", "in", "enumerate", "(", "loader", ")", ":", "\n", "\n", "                ", "d", "=", "[", "a", ".", "to", "(", "self", ".", "device", ")", "for", "a", "in", "d", "]", "\n", "\n", "optimiser", ".", "zero_grad", "(", ")", "\n", "\n", "step", "=", "i", "*", "batches", "+", "j", "\n", "\n", "# d[1] = torch.cholesky(d[1])", "\n", "\n", "torch", ".", "set_default_tensor_type", "(", "'torch.cuda.FloatTensor'", ")", "\n", "elbo", "=", "self", ".", "model", ".", "log_prob_lower_bound", "(", "\n", "d", ",", "\n", "num_samples", "=", "50", "\n", ")", "\n", "torch", ".", "set_default_tensor_type", "(", "torch", ".", "FloatTensor", ")", "\n", "\n", "train_loss", "+=", "torch", ".", "sum", "(", "elbo", ")", ".", "item", "(", ")", "\n", "loss", "=", "-", "1", "*", "torch", ".", "mean", "(", "elbo", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimiser", ".", "step", "(", ")", "\n", "\n", "if", "scheduler", ":", "\n", "                    ", "scheduler", ".", "step", "(", ")", "\n", "\n", "", "", "train_loss", "/=", "len", "(", "data", ")", "\n", "\n", "if", "val_data", ":", "\n", "                ", "val_loss", "=", "self", ".", "score_batch", "(", "val_data", ")", "/", "len", "(", "val_data", ")", "\n", "print", "(", "'Epoch {}, Train Loss: {}, Val Loss: {}'", ".", "format", "(", "\n", "i", ",", "\n", "train_loss", ",", "\n", "val_loss", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'Epoch {}, Train Loss: {}'", ".", "format", "(", "i", ",", "train_loss", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_no_mdn.SVIFlow.score": [[338, 348], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "svi_no_mdn.SVIFlow.model.eval", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "svi_no_mdn.SVIFlow.model.log_prob_lower_bound", "svi_no_mdn.SVIFlow.model.stochastic_elbo"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.vae.VariationalAutoencoderToyNoise.log_prob_lower_bound", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.vae.VariationalAutoencoderToyNoise.stochastic_elbo"], ["", "", "", "def", "score", "(", "self", ",", "data", ",", "log_prob", "=", "False", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "model", ".", "eval", "(", ")", "\n", "# data[1] = torch.cholesky(data[1])", "\n", "torch", ".", "set_default_tensor_type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", "\n", "if", "log_prob", ":", "\n", "                ", "return", "self", ".", "model", ".", "log_prob_lower_bound", "(", "data", ",", "num_samples", "=", "100", ")", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "model", ".", "stochastic_elbo", "(", "data", ")", "\n", "", "torch", ".", "set_default_tensor_type", "(", "torch", ".", "FloatTensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_no_mdn.SVIFlow.score_batch": [[349, 363], ["torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "enumerate", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "a.to", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "svi_no_mdn.SVIFlow.score"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score"], ["", "", "def", "score_batch", "(", "self", ",", "dataset", ",", "log_prob", "=", "False", ")", ":", "\n", "        ", "loader", "=", "data_utils", ".", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "num_workers", "=", "4", ",", "\n", "pin_memory", "=", "True", "\n", ")", "\n", "score", "=", "0.0", "\n", "\n", "for", "j", ",", "d", "in", "enumerate", "(", "loader", ")", ":", "\n", "            ", "d", "=", "[", "a", ".", "to", "(", "self", ".", "device", ")", "for", "a", "in", "d", "]", "\n", "score", "+=", "torch", ".", "sum", "(", "self", ".", "score", "(", "d", ",", "log_prob", ")", ")", ".", "item", "(", ")", "\n", "\n", "", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_no_mdn.SVIFlow.sample_prior": [[364, 370], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "utils.sampling.minibatch_sample"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.utils.sampling.minibatch_sample"], ["", "def", "sample_prior", "(", "self", ",", "num_samples", ",", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", ":", "\n", "        ", "return", "minibatch_sample", "(", "\n", "self", ".", "model", ".", "_prior", ".", "sample", ",", "\n", "num_samples", ",", "\n", "self", ".", "batch_size", ",", "\n", "device", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.coupling.AffineCouplingFlow._create_acf_transform": [[11, 26], ["nflows.transforms.AffineCouplingTransform", "nflows.utils.create_alternating_binary_mask", "nflows.nn.nets.ResidualNet"], "methods", ["None"], ["    ", "def", "_create_acf_transform", "(", "self", ",", "step", ",", "context_features", ")", ":", "\n", "        ", "return", "transforms", ".", "AffineCouplingTransform", "(", "\n", "mask", "=", "nf", ".", "utils", ".", "create_alternating_binary_mask", "(", "\n", "features", "=", "self", ".", "dimensions", ",", "\n", "even", "=", "(", "step", "%", "2", "==", "0", ")", "\n", ")", ",", "\n", "transform_net_create_fn", "=", "lambda", "i", ",", "o", ":", "nf", ".", "nn", ".", "nets", ".", "ResidualNet", "(", "\n", "in_features", "=", "i", ",", "\n", "out_features", "=", "o", ",", "\n", "hidden_features", "=", "256", ",", "\n", "context_features", "=", "context_features", ",", "\n", "num_blocks", "=", "2", ",", "\n", "activation", "=", "F", ".", "relu", ",", "\n", "dropout_probability", "=", "0.2", ",", "\n", "use_batch_norm", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.coupling.AffineCouplingFlow._create_transform": [[29, 39], ["nflows.transforms.CompositeTransform", "nflows.transforms.CompositeTransform", "coupling.AffineCouplingFlow._create_linear_transform", "range", "coupling.AffineCouplingFlow._create_linear_transform", "coupling.AffineCouplingFlow._create_acf_transform"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_no_mdn.SVIFlowToy._create_linear_transform", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_no_mdn.SVIFlowToy._create_linear_transform", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.coupling.AffineCouplingFlow._create_acf_transform"], ["", "def", "_create_transform", "(", "self", ",", "context_features", "=", "None", ")", ":", "\n", "\n", "        ", "return", "transforms", ".", "CompositeTransform", "(", "[", "\n", "\n", "transforms", ".", "CompositeTransform", "(", "[", "\n", "self", ".", "_create_linear_transform", "(", ")", ",", "\n", "self", ".", "_create_acf_transform", "(", "i", ",", "context_features", ")", "\n", "]", ")", "for", "i", "in", "range", "(", "self", ".", "flow_steps", ")", "\n", "]", "+", "[", "\n", "self", ".", "_create_linear_transform", "(", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.nn.DeconvInputEncoder.__init__": [[10, 28], ["torch.Module.__init__", "torch.tril_indices", "torch.tril_indices", "torch.tril_indices", "torch.tril_indices", "torch.tril_indices", "torch.tril_indices", "torch.tril_indices", "torch.tril_indices", "torch.tril_indices", "int", "nflows.nn.nets.ResidualNet"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d", ",", "context_size", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "idx", "=", "torch", ".", "tril_indices", "(", "d", ",", "d", ")", "\n", "self", ".", "idx", "=", "(", "idx", "[", "0", "]", ",", "idx", "[", "1", "]", ")", "\n", "\n", "input_size", "=", "int", "(", "d", "+", "d", "*", "(", "d", "+", "1", ")", "/", "2", ")", "\n", "\n", "self", ".", "resnet", "=", "ResidualNet", "(", "\n", "in_features", "=", "input_size", ",", "\n", "out_features", "=", "context_size", ",", "\n", "hidden_features", "=", "256", ",", "\n", "context_features", "=", "None", ",", "\n", "num_blocks", "=", "3", ",", "\n", "activation", "=", "F", ".", "relu", ",", "\n", "dropout_probability", "=", "0.2", ",", "\n", "use_batch_norm", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.nn.DeconvInputEncoder.forward": [[30, 36], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.DeconvInputEncoder.resnet"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "x", ",", "noise_l", "=", "inputs", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "noise_l", "[", ":", ",", "self", ".", "idx", "[", "0", "]", ",", "self", ".", "idx", "[", "1", "]", "]", ")", ",", "dim", "=", "1", ")", "\n", "\n", "return", "self", ".", "resnet", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.vae.VariationalAutoencoder.__init__": [[16, 28], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.__init__"], ["def", "__init__", "(", "self", ",", "prior", ",", "approximate_posterior", ",", "likelihood", ",", "inputs_encoder", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            prior: a distribution object, the prior.\n            approximate_posterior: a distribution object, the encoder.\n            likelihood: a distribution object, the decoder.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_prior", "=", "prior", "\n", "self", ".", "_approximate_posterior", "=", "approximate_posterior", "\n", "self", ".", "_likelihood", "=", "likelihood", "\n", "self", ".", "_inputs_encoder", "=", "inputs_encoder", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.vae.VariationalAutoencoder.forward": [[29, 31], ["RuntimeError"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "'Forward method cannot be called for a VAE object.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.vae.VariationalAutoencoder.stochastic_elbo": [[32, 68], ["vae.VariationalAutoencoder._approximate_posterior.sample_and_log_prob", "nflows.utils.merge_leading_dims", "nflows.utils.merge_leading_dims", "vae.VariationalAutoencoder._prior.log_prob", "nflows.utils.repeat_rows", "vae.VariationalAutoencoder._likelihood.log_prob", "nflows.utils.split_leading_dim", "vae.VariationalAutoencoder._inputs_encoder", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample_and_log_prob", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob"], ["", "def", "stochastic_elbo", "(", "self", ",", "inputs", ",", "num_samples", "=", "1", ",", "kl_multiplier", "=", "1", ",", "keepdim", "=", "False", ")", ":", "\n", "        ", "\"\"\"Calculates an unbiased Monte-Carlo estimate of the evidence lower bound.\n        Note: the KL term is also estimated via Monte Carlo.\n        Args:\n            inputs: Tensor of shape [batch_size, ...], the inputs.\n            num_samples: int, number of samples to use for the Monte-Carlo estimate.\n        Returns:\n            A Tensor of shape [batch_size], an ELBO estimate for each input.\n        \"\"\"", "\n", "# Sample latents and calculate their log prob under the encoder.", "\n", "if", "self", ".", "_inputs_encoder", "is", "None", ":", "\n", "            ", "posterior_context", "=", "inputs", "\n", "", "else", ":", "\n", "            ", "posterior_context", "=", "self", ".", "_inputs_encoder", "(", "inputs", ")", "\n", "", "latents", ",", "log_q_z", "=", "self", ".", "_approximate_posterior", ".", "sample_and_log_prob", "(", "\n", "num_samples", ",", "\n", "context", "=", "posterior_context", "\n", ")", "\n", "latents", "=", "utils", ".", "merge_leading_dims", "(", "latents", ",", "num_dims", "=", "2", ")", "\n", "log_q_z", "=", "utils", ".", "merge_leading_dims", "(", "log_q_z", ",", "num_dims", "=", "2", ")", "\n", "\n", "# Compute log prob of latents under the prior.", "\n", "log_p_z", "=", "self", ".", "_prior", ".", "log_prob", "(", "latents", ")", "\n", "\n", "# Compute log prob of inputs under the decoder,", "\n", "inputs", "=", "utils", ".", "repeat_rows", "(", "inputs", ",", "num_reps", "=", "num_samples", ")", "\n", "log_p_x", "=", "self", ".", "_likelihood", ".", "log_prob", "(", "inputs", ",", "context", "=", "latents", ")", "\n", "\n", "# Compute ELBO.", "\n", "# TODO: maybe compute KL analytically when possible?", "\n", "elbo", "=", "log_p_x", "+", "kl_multiplier", "*", "(", "log_p_z", "-", "log_q_z", ")", "\n", "elbo", "=", "utils", ".", "split_leading_dim", "(", "elbo", ",", "[", "-", "1", ",", "num_samples", "]", ")", "\n", "if", "keepdim", ":", "\n", "            ", "return", "elbo", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "sum", "(", "elbo", ",", "dim", "=", "1", ")", "/", "num_samples", "# Average ELBO across samples.", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.vae.VariationalAutoencoder.log_prob_lower_bound": [[69, 73], ["vae.VariationalAutoencoder.stochastic_elbo", "torch.logsumexp", "torch.log", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.vae.VariationalAutoencoderToyNoise.stochastic_elbo"], ["", "", "def", "log_prob_lower_bound", "(", "self", ",", "inputs", ",", "num_samples", "=", "100", ")", ":", "\n", "        ", "elbo", "=", "self", ".", "stochastic_elbo", "(", "inputs", ",", "num_samples", "=", "num_samples", ",", "keepdim", "=", "True", ")", "\n", "log_prob_lower_bound", "=", "torch", ".", "logsumexp", "(", "elbo", ",", "dim", "=", "1", ")", "-", "torch", ".", "log", "(", "torch", ".", "Tensor", "(", "[", "num_samples", "]", ")", ")", "\n", "return", "log_prob_lower_bound", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.vae.VariationalAutoencoder._decode": [[74, 80], ["vae.VariationalAutoencoder._likelihood.mean", "vae.VariationalAutoencoder._likelihood.sample", "nflows.utils.merge_leading_dims"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample"], ["", "def", "_decode", "(", "self", ",", "latents", ",", "mean", ")", ":", "\n", "        ", "if", "mean", ":", "\n", "            ", "return", "self", ".", "_likelihood", ".", "mean", "(", "context", "=", "latents", ")", "\n", "", "else", ":", "\n", "            ", "samples", "=", "self", ".", "_likelihood", ".", "sample", "(", "num_samples", "=", "1", ",", "context", "=", "latents", ")", "\n", "return", "utils", ".", "merge_leading_dims", "(", "samples", ",", "num_dims", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.vae.VariationalAutoencoder.sample": [[81, 91], ["vae.VariationalAutoencoder._prior.sample", "vae.VariationalAutoencoder._decode"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.vae.VariationalAutoencoderToyNoise._decode"], ["", "", "def", "sample", "(", "self", ",", "num_samples", ",", "mean", "=", "False", ")", ":", "\n", "        ", "\"\"\"Generates samples from the VAE.\n        Args:\n            num_samples: int, number of samples to generate.\n            mean: bool, if True it uses the mean of the decoder instead of sampling from it.\n        Returns:\n            A tensor of shape [num_samples, ...], the samples.\n        \"\"\"", "\n", "latents", "=", "self", ".", "_prior", ".", "sample", "(", "num_samples", ")", "\n", "return", "self", ".", "_decode", "(", "latents", ",", "mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.vae.VariationalAutoencoder.encode": [[92, 108], ["vae.VariationalAutoencoder._approximate_posterior.sample", "nflows.utils.merge_leading_dims", "vae.VariationalAutoencoder._approximate_posterior.sample"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample"], ["", "def", "encode", "(", "self", ",", "inputs", ",", "num_samples", "=", "None", ")", ":", "\n", "        ", "\"\"\"Encodes inputs into the latent space.\n        Args:\n            inputs: Tensor of shape [batch_size, ...], the inputs to encode.\n            num_samples: int or None, the number of latent samples to generate per input. If None,\n                only one latent sample is generated per input.\n        Returns:\n            A Tensor of shape [batch_size, num_samples, ...] or [batch_size, ...] if num_samples\n            is None, the latent samples for each input.\n        \"\"\"", "\n", "if", "num_samples", "is", "None", ":", "\n", "            ", "latents", "=", "self", ".", "_approximate_posterior", ".", "sample", "(", "num_samples", "=", "1", ",", "context", "=", "inputs", ")", "\n", "latents", "=", "utils", ".", "merge_leading_dims", "(", "latents", ",", "num_dims", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "latents", "=", "self", ".", "_approximate_posterior", ".", "sample", "(", "num_samples", "=", "num_samples", ",", "context", "=", "inputs", ")", "\n", "", "return", "latents", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.vae.VariationalAutoencoder.reconstruct": [[109, 127], ["vae.VariationalAutoencoder.encode", "vae.VariationalAutoencoder._decode", "nflows.utils.merge_leading_dims", "nflows.utils.split_leading_dim"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.vae.VariationalAutoencoderToyNoise.encode", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.vae.VariationalAutoencoderToyNoise._decode"], ["", "def", "reconstruct", "(", "self", ",", "inputs", ",", "num_samples", "=", "None", ",", "mean", "=", "False", ")", ":", "\n", "        ", "\"\"\"Reconstruct given inputs.\n        Args:\n            inputs: Tensor of shape [batch_size, ...], the inputs to reconstruct.\n            num_samples: int or None, the number of reconstructions to generate per input. If None,\n                only one reconstruction is generated per input.\n            mean: bool, if True it uses the mean of the decoder instead of sampling from it.\n        Returns:\n            A Tensor of shape [batch_size, num_samples, ...] or [batch_size, ...] if num_samples\n            is None, the reconstructions for each input.\n        \"\"\"", "\n", "latents", "=", "self", ".", "encode", "(", "inputs", ",", "num_samples", ")", "\n", "if", "num_samples", "is", "not", "None", ":", "\n", "            ", "latents", "=", "utils", ".", "merge_leading_dims", "(", "latents", ",", "num_dims", "=", "2", ")", "\n", "", "recons", "=", "self", ".", "_decode", "(", "latents", ",", "mean", ")", "\n", "if", "num_samples", "is", "not", "None", ":", "\n", "            ", "recons", "=", "utils", ".", "split_leading_dim", "(", "recons", ",", "[", "-", "1", ",", "num_samples", "]", ")", "\n", "", "return", "recons", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.vae.VariationalAutoencoderToyNoise.__init__": [[132, 144], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.__init__"], ["def", "__init__", "(", "self", ",", "prior", ",", "approximate_posterior", ",", "likelihood", ",", "inputs_encoder", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            prior: a distribution object, the prior.\n            approximate_posterior: a distribution object, the encoder.\n            likelihood: a distribution object, the decoder.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_prior", "=", "prior", "\n", "self", ".", "_approximate_posterior", "=", "approximate_posterior", "\n", "self", ".", "_likelihood", "=", "likelihood", "\n", "self", ".", "_inputs_encoder", "=", "inputs_encoder", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.vae.VariationalAutoencoderToyNoise.forward": [[145, 147], ["RuntimeError"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "'Forward method cannot be called for a VAE object.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.vae.VariationalAutoencoderToyNoise.stochastic_elbo": [[148, 185], ["vae.VariationalAutoencoderToyNoise._approximate_posterior.sample_and_log_prob", "nflows.utils.merge_leading_dims", "nflows.utils.merge_leading_dims", "nflows.utils.repeat_rows", "vae.VariationalAutoencoderToyNoise._prior.log_prob", "vae.VariationalAutoencoderToyNoise._likelihood.log_prob", "nflows.utils.split_leading_dim", "vae.VariationalAutoencoderToyNoise._inputs_encoder", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample_and_log_prob", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob"], ["", "def", "stochastic_elbo", "(", "self", ",", "inputs", ",", "num_samples", "=", "1", ",", "kl_multiplier", "=", "1", ",", "keepdim", "=", "False", ")", ":", "\n", "        ", "\"\"\"Calculates an unbiased Monte-Carlo estimate of the evidence lower bound.\n        Note: the KL term is also estimated via Monte Carlo.\n        Args:\n            inputs: Tensor of shape [batch_size, ...], the inputs.\n            num_samples: int, number of samples to use for the Monte-Carlo estimate.\n        Returns:\n            A Tensor of shape [batch_size], an ELBO estimate for each input.\n        \"\"\"", "\n", "# Sample latents and calculate their log prob under the encoder.", "\n", "if", "self", ".", "_inputs_encoder", "is", "None", ":", "\n", "            ", "posterior_context", "=", "inputs", "\n", "", "else", ":", "\n", "            ", "posterior_context", "=", "self", ".", "_inputs_encoder", "(", "inputs", ")", "\n", "\n", "", "latents", ",", "log_q_z", "=", "self", ".", "_approximate_posterior", ".", "sample_and_log_prob", "(", "\n", "num_samples", ",", "\n", "context", "=", "posterior_context", "\n", ")", "\n", "latents", "=", "utils", ".", "merge_leading_dims", "(", "latents", ",", "num_dims", "=", "2", ")", "\n", "log_q_z", "=", "utils", ".", "merge_leading_dims", "(", "log_q_z", ",", "num_dims", "=", "2", ")", "\n", "\n", "# Compute log prob of latents under the prior.", "\n", "inputs", "=", "utils", ".", "repeat_rows", "(", "inputs", ",", "num_reps", "=", "num_samples", ")", "\n", "log_p_z", "=", "self", ".", "_prior", ".", "log_prob", "(", "inputs", ",", "context", "=", "latents", ")", "\n", "\n", "# Compute log prob of inputs under the decoder,", "\n", "log_p_x", "=", "self", ".", "_likelihood", ".", "log_prob", "(", "inputs", "[", "0", "]", "-", "latents", ")", "\n", "\n", "# Compute ELBO.", "\n", "# TODO: maybe compute KL analytically when possible?", "\n", "elbo", "=", "log_p_x", "+", "kl_multiplier", "*", "(", "log_p_z", "-", "log_q_z", ")", "\n", "elbo", "=", "utils", ".", "split_leading_dim", "(", "elbo", ",", "[", "-", "1", ",", "num_samples", "]", ")", "\n", "if", "keepdim", ":", "\n", "            ", "return", "elbo", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "sum", "(", "elbo", ",", "dim", "=", "1", ")", "/", "num_samples", "# Average ELBO across samples.", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.vae.VariationalAutoencoderToyNoise.log_prob_lower_bound": [[186, 190], ["vae.VariationalAutoencoderToyNoise.stochastic_elbo", "torch.logsumexp", "torch.log", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.vae.VariationalAutoencoderToyNoise.stochastic_elbo"], ["", "", "def", "log_prob_lower_bound", "(", "self", ",", "inputs", ",", "num_samples", "=", "100", ")", ":", "\n", "        ", "elbo", "=", "self", ".", "stochastic_elbo", "(", "inputs", ",", "num_samples", "=", "num_samples", ",", "keepdim", "=", "True", ")", "\n", "log_prob_lower_bound", "=", "torch", ".", "logsumexp", "(", "elbo", ",", "dim", "=", "1", ")", "-", "torch", ".", "log", "(", "torch", ".", "Tensor", "(", "[", "num_samples", "]", ")", ")", "\n", "return", "log_prob_lower_bound", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.vae.VariationalAutoencoderToyNoise._decode": [[191, 197], ["vae.VariationalAutoencoderToyNoise._likelihood.mean", "vae.VariationalAutoencoderToyNoise._likelihood.sample", "nflows.utils.merge_leading_dims"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample"], ["", "def", "_decode", "(", "self", ",", "latents", ",", "mean", ")", ":", "\n", "        ", "if", "mean", ":", "\n", "            ", "return", "self", ".", "_likelihood", ".", "mean", "(", "context", "=", "latents", ")", "\n", "", "else", ":", "\n", "            ", "samples", "=", "self", ".", "_likelihood", ".", "sample", "(", "num_samples", "=", "1", ",", "context", "=", "latents", ")", "\n", "return", "utils", ".", "merge_leading_dims", "(", "samples", ",", "num_dims", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.vae.VariationalAutoencoderToyNoise.sample": [[198, 208], ["vae.VariationalAutoencoderToyNoise._prior.sample", "vae.VariationalAutoencoderToyNoise._decode"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.vae.VariationalAutoencoderToyNoise._decode"], ["", "", "def", "sample", "(", "self", ",", "num_samples", ",", "mean", "=", "False", ")", ":", "\n", "        ", "\"\"\"Generates samples from the VAE.\n        Args:\n            num_samples: int, number of samples to generate.\n            mean: bool, if True it uses the mean of the decoder instead of sampling from it.\n        Returns:\n            A tensor of shape [num_samples, ...], the samples.\n        \"\"\"", "\n", "latents", "=", "self", ".", "_prior", ".", "sample", "(", "num_samples", ")", "\n", "return", "self", ".", "_decode", "(", "latents", ",", "mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.vae.VariationalAutoencoderToyNoise.encode": [[209, 225], ["vae.VariationalAutoencoderToyNoise._approximate_posterior.sample", "nflows.utils.merge_leading_dims", "vae.VariationalAutoencoderToyNoise._approximate_posterior.sample"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample"], ["", "def", "encode", "(", "self", ",", "inputs", ",", "num_samples", "=", "None", ")", ":", "\n", "        ", "\"\"\"Encodes inputs into the latent space.\n        Args:\n            inputs: Tensor of shape [batch_size, ...], the inputs to encode.\n            num_samples: int or None, the number of latent samples to generate per input. If None,\n                only one latent sample is generated per input.\n        Returns:\n            A Tensor of shape [batch_size, num_samples, ...] or [batch_size, ...] if num_samples\n            is None, the latent samples for each input.\n        \"\"\"", "\n", "if", "num_samples", "is", "None", ":", "\n", "            ", "latents", "=", "self", ".", "_approximate_posterior", ".", "sample", "(", "num_samples", "=", "1", ",", "context", "=", "inputs", ")", "\n", "latents", "=", "utils", ".", "merge_leading_dims", "(", "latents", ",", "num_dims", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "latents", "=", "self", ".", "_approximate_posterior", ".", "sample", "(", "num_samples", "=", "num_samples", ",", "context", "=", "inputs", ")", "\n", "", "return", "latents", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.vae.VariationalAutoencoderToyNoise.reconstruct": [[226, 244], ["vae.VariationalAutoencoderToyNoise.encode", "vae.VariationalAutoencoderToyNoise._decode", "nflows.utils.merge_leading_dims", "nflows.utils.split_leading_dim"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.vae.VariationalAutoencoderToyNoise.encode", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.vae.VariationalAutoencoderToyNoise._decode"], ["", "def", "reconstruct", "(", "self", ",", "inputs", ",", "num_samples", "=", "None", ",", "mean", "=", "False", ")", ":", "\n", "        ", "\"\"\"Reconstruct given inputs.\n        Args:\n            inputs: Tensor of shape [batch_size, ...], the inputs to reconstruct.\n            num_samples: int or None, the number of reconstructions to generate per input. If None,\n                only one reconstruction is generated per input.\n            mean: bool, if True it uses the mean of the decoder instead of sampling from it.\n        Returns:\n            A Tensor of shape [batch_size, num_samples, ...] or [batch_size, ...] if num_samples\n            is None, the reconstructions for each input.\n        \"\"\"", "\n", "latents", "=", "self", ".", "encode", "(", "inputs", ",", "num_samples", ")", "\n", "if", "num_samples", "is", "not", "None", ":", "\n", "            ", "latents", "=", "utils", ".", "merge_leading_dims", "(", "latents", ",", "num_dims", "=", "2", ")", "\n", "", "recons", "=", "self", ".", "_decode", "(", "latents", ",", "mean", ")", "\n", "if", "num_samples", "is", "not", "None", ":", "\n", "            ", "recons", "=", "utils", ".", "split_leading_dim", "(", "recons", ",", "[", "-", "1", ",", "num_samples", "]", ")", "\n", "", "return", "recons", "", "", "", ""]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_gmm.SVIGMMFlow._create_prior": [[13, 19], ["deconv.gmm.sgd_gmm.SGDGMMModule"], "methods", ["None"], ["    ", "def", "_create_prior", "(", "self", ")", ":", "\n", "        ", "return", "SGDGMMModule", "(", "\n", "3", ",", "\n", "self", ".", "dimensions", ",", "\n", "w", "=", "0", ",", "\n", "device", "=", "self", ".", "device", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_gmm.GMMPosterior.__init__": [[23, 26], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "gmm", ")", ":", "\n", "        ", "self", ".", "gmm", "=", "gmm", "\n", "self", ".", "module", "=", "gmm", ".", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_gmm.GMMPosterior.sample_and_log_prob": [[27, 33], ["torch.matmul", "svi_gmm.GMMPosterior.gmm._sample_posterior", "svi_gmm.GMMPosterior.gmm.posterior_log_prob", "L.transpose"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_deconv_gmm.SGDDeconvGMM._sample_posterior", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.gmm.sgd_deconv_gmm.SGDDeconvGMM.posterior_log_prob"], ["", "def", "sample_and_log_prob", "(", "self", ",", "num_samples", ",", "context", ")", ":", "\n", "        ", "x", ",", "L", "=", "context", "\n", "cov", "=", "torch", ".", "matmul", "(", "L", ",", "L", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "samples", "=", "self", ".", "gmm", ".", "_sample_posterior", "(", "(", "x", ",", "cov", ")", ",", "num_samples", ")", "\n", "log_prob", "=", "self", ".", "gmm", ".", "posterior_log_prob", "(", "samples", ",", "(", "x", ",", "cov", ")", ")", "\n", "return", "samples", ",", "log_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_gmm.SVIGMMExact._create_prior": [[37, 53], ["deconv.gmm.sgd_deconv_gmm.SGDDeconvGMM", "deconv.gmm.sgd_gmm.SGDGMMModule"], "methods", ["None"], ["    ", "def", "_create_prior", "(", "self", ")", ":", "\n", "        ", "self", ".", "gmm", "=", "SGDDeconvGMM", "(", "\n", "3", ",", "\n", "self", ".", "dimensions", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "epochs", "=", "self", ".", "epochs", ",", "\n", "lr", "=", "self", ".", "lr", ",", "\n", "device", "=", "self", ".", "device", "\n", ")", "\n", "self", ".", "gmm", ".", "module", "=", "SGDGMMModule", "(", "\n", "3", ",", "\n", "self", ".", "dimensions", ",", "\n", "w", "=", "0", ",", "\n", "device", "=", "self", ".", "device", "\n", ")", "\n", "return", "self", ".", "gmm", ".", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_gmm.SVIGMMExact._create_input_encoder": [[54, 56], ["None"], "methods", ["None"], ["", "def", "_create_input_encoder", "(", "self", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_gmm.SVIGMMExact._create_approximate_posterior": [[57, 59], ["svi_gmm.GMMPosterior"], "methods", ["None"], ["", "def", "_create_approximate_posterior", "(", "self", ")", ":", "\n", "        ", "return", "GMMPosterior", "(", "self", ".", "gmm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.distributions.DeconvGaussianToyNoise.log_prob": [[8, 13], ["torch.distributions.MultivariateNormal().log_prob", "torch.distributions.MultivariateNormal", "torch.zeros_like"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob"], ["    ", "def", "log_prob", "(", "self", ",", "inputs", ",", "context", ")", ":", "\n", "\n", "        ", "_", ",", "noise", "=", "inputs", "\n", "\n", "return", "MultivariateNormal", "(", "loc", "=", "torch", ".", "zeros_like", "(", "context", ")", ",", "covariance_matrix", "=", "noise", ")", ".", "log_prob", "(", "context", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.distributions.DeconvGaussianToy.log_prob": [[16, 21], ["torch.distributions.MultivariateNormal().log_prob", "torch.distributions.MultivariateNormal"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob"], ["    ", "def", "log_prob", "(", "self", ",", "inputs", ",", "context", ")", ":", "\n", "\n", "        ", "X", ",", "noise", "=", "inputs", "\n", "\n", "return", "MultivariateNormal", "(", "loc", "=", "context", ",", "covariance_matrix", "=", "noise", ")", ".", "log_prob", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.distributions.DeconvGaussian.log_prob": [[25, 30], ["torch.distributions.MultivariateNormal().log_prob", "torch.distributions.MultivariateNormal"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob"], ["    ", "def", "log_prob", "(", "self", ",", "inputs", ",", "context", ")", ":", "\n", "\n", "        ", "X", ",", "noise_l", "=", "inputs", "\n", "\n", "return", "MultivariateNormal", "(", "loc", "=", "context", ",", "scale_tril", "=", "noise_l", ")", ".", "log_prob", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.__init__": [[18, 41], ["maf.MAFlow.__init__", "vae.VariationalAutoencoder", "svi.SVIFlow.model.to", "svi.SVIFlow._create_prior", "svi.SVIFlow._create_approximate_posterior", "svi.SVIFlow._create_likelihood", "svi.SVIFlow._create_input_encoder"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.__init__", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow._create_prior", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_mdn.SVIMDNFlow._create_approximate_posterior", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow._create_likelihood", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow._create_input_encoder"], ["    ", "def", "__init__", "(", "self", ",", "dimensions", ",", "flow_steps", ",", "lr", ",", "epochs", ",", "context_size", "=", "64", ",", "hidden_features", "=", "128", ",", "\n", "batch_size", "=", "256", ",", "kl_warmup", "=", "0.2", ",", "kl_init_factor", "=", "0.5", ",", "\n", "n_samples", "=", "50", ",", "grad_clip_norm", "=", "None", ",", "use_iwae", "=", "False", ",", "device", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "dimensions", ",", "flow_steps", ",", "lr", ",", "epochs", ",", "batch_size", ",", "device", "\n", ")", "\n", "self", ".", "context_size", "=", "context_size", "\n", "self", ".", "hidden_features", "=", "hidden_features", "\n", "self", ".", "kl_warmup", "=", "kl_warmup", "\n", "self", ".", "kl_init_factor", "=", "kl_init_factor", "\n", "\n", "self", ".", "n_samples", "=", "n_samples", "\n", "self", ".", "grad_clip_norm", "=", "grad_clip_norm", "\n", "self", ".", "use_iwae", "=", "use_iwae", "\n", "\n", "self", ".", "model", "=", "VariationalAutoencoder", "(", "\n", "prior", "=", "self", ".", "_create_prior", "(", ")", ",", "\n", "approximate_posterior", "=", "self", ".", "_create_approximate_posterior", "(", ")", ",", "\n", "likelihood", "=", "self", ".", "_create_likelihood", "(", ")", ",", "\n", "inputs_encoder", "=", "self", ".", "_create_input_encoder", "(", ")", "\n", ")", "\n", "\n", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow._create_prior": [[42, 48], ["svi.SVIFlow._create_transform", "nflows.distributions.StandardNormal", "nflows.flows.Flow"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.coupling.AffineCouplingFlow._create_transform"], ["", "def", "_create_prior", "(", "self", ")", ":", "\n", "        ", "self", ".", "transform", "=", "self", ".", "_create_transform", "(", "context_features", "=", "None", ",", "hidden_features", "=", "self", ".", "hidden_features", ")", "\n", "distribution", "=", "StandardNormal", "(", "(", "self", ".", "dimensions", ",", ")", ")", "\n", "return", "flows", ".", "Flow", "(", "\n", "self", ".", "transform", ",", "\n", "distribution", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow._create_likelihood": [[50, 52], ["distributions.DeconvGaussian"], "methods", ["None"], ["", "def", "_create_likelihood", "(", "self", ")", ":", "\n", "        ", "return", "DeconvGaussian", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow._create_input_encoder": [[53, 55], ["nn.DeconvInputEncoder"], "methods", ["None"], ["", "def", "_create_input_encoder", "(", "self", ")", ":", "\n", "        ", "return", "DeconvInputEncoder", "(", "self", ".", "dimensions", ",", "self", ".", "context_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow._create_approximate_posterior": [[56, 67], ["nflows.distributions.StandardNormal", "svi.SVIFlow._create_transform", "nflows.flows.Flow", "nflows.transforms.InverseTransform"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.coupling.AffineCouplingFlow._create_transform"], ["", "def", "_create_approximate_posterior", "(", "self", ")", ":", "\n", "\n", "        ", "distribution", "=", "StandardNormal", "(", "(", "self", ".", "dimensions", ",", ")", ")", "\n", "\n", "posterior_transform", "=", "self", ".", "_create_transform", "(", "self", ".", "context_size", ",", "hidden_features", "=", "self", ".", "hidden_features", ")", "\n", "\n", "return", "flows", ".", "Flow", "(", "\n", "transforms", ".", "InverseTransform", "(", "\n", "posterior_transform", "\n", ")", ",", "\n", "distribution", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow._kl_factor": [[69, 80], ["min"], "methods", ["None"], ["", "def", "_kl_factor", "(", "self", ",", "step", ",", "max_steps", ")", ":", "\n", "\n", "        ", "f", "=", "min", "(", "\n", "1.0", ",", "\n", "self", ".", "kl_init_factor", "+", "(", "\n", "(", "1", "-", "self", ".", "kl_init_factor", ")", "*", "step", "/", "(", "\n", "self", ".", "kl_warmup", "*", "max_steps", "\n", ")", "\n", ")", "\n", ")", "\n", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.fit": [[82, 159], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.DataLoader", "torch.DataLoader", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "range", "svi.SVIFlow.model.train", "enumerate", "len", "svi.SVIFlow.model.parameters", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "loss.backward", "torch.optim.Adam.step", "torch.optim.Adam.step", "print", "torch.optim.lr_scheduler.ReduceLROnPlateau.step", "torch.optim.lr_scheduler.ReduceLROnPlateau.step", "print", "torch.optim.lr_scheduler.ReduceLROnPlateau.step", "torch.optim.lr_scheduler.ReduceLROnPlateau.step", "a.to", "svi.SVIFlow.model.log_prob_lower_bound", "svi.SVIFlow.model.stochastic_elbo", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "svi.SVIFlow.score_batch", "len", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "svi.SVIFlow.model.parameters"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.vae.VariationalAutoencoderToyNoise.log_prob_lower_bound", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.vae.VariationalAutoencoderToyNoise.stochastic_elbo", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score_batch"], ["", "def", "fit", "(", "self", ",", "data", ",", "val_data", "=", "None", ")", ":", "\n", "\n", "        ", "optimiser", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "params", "=", "self", ".", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "lr", "\n", ")", "\n", "\n", "loader", "=", "data_utils", ".", "DataLoader", "(", "\n", "data", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "4", ",", "\n", "pin_memory", "=", "True", "\n", ")", "\n", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "\n", "optimiser", ",", "\n", "mode", "=", "'max'", ",", "\n", "factor", "=", "0.8", ",", "\n", "patience", "=", "20", ",", "\n", "verbose", "=", "True", ",", "\n", "threshold", "=", "1e-6", "\n", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "epochs", ")", ":", "\n", "\n", "            ", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "train_loss", "=", "0.0", "\n", "\n", "for", "j", ",", "d", "in", "enumerate", "(", "loader", ")", ":", "\n", "\n", "                ", "d", "=", "[", "a", ".", "to", "(", "self", ".", "device", ")", "for", "a", "in", "d", "]", "\n", "\n", "optimiser", ".", "zero_grad", "(", ")", "\n", "\n", "torch", ".", "set_default_tensor_type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", "\n", "\n", "if", "self", ".", "use_iwae", ":", "\n", "                    ", "objective", "=", "self", ".", "model", ".", "log_prob_lower_bound", "(", "\n", "d", ",", "\n", "num_samples", "=", "self", ".", "n_samples", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "objective", "=", "self", ".", "model", ".", "stochastic_elbo", "(", "\n", "d", ",", "\n", "num_samples", "=", "self", ".", "n_samples", "\n", ")", "\n", "", "torch", ".", "set_default_tensor_type", "(", "torch", ".", "FloatTensor", ")", "\n", "\n", "train_loss", "+=", "torch", ".", "sum", "(", "objective", ")", ".", "item", "(", ")", "\n", "loss", "=", "-", "1", "*", "torch", ".", "mean", "(", "objective", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "self", ".", "grad_clip_norm", "is", "not", "None", ":", "\n", "                    ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "\n", "self", ".", "model", ".", "parameters", "(", ")", ",", "\n", "self", ".", "grad_clip_norm", "\n", ")", "\n", "", "optimiser", ".", "step", "(", ")", "\n", "\n", "", "train_loss", "/=", "len", "(", "data", ")", "\n", "\n", "if", "val_data", ":", "\n", "                ", "val_loss", "=", "self", ".", "score_batch", "(", "\n", "val_data", ",", "\n", "log_prob", "=", "self", ".", "use_iwae", ",", "\n", "num_samples", "=", "self", ".", "n_samples", "\n", ")", "/", "len", "(", "val_data", ")", "\n", "print", "(", "'Epoch {}, Train Loss: {}, Val Loss: {}'", ".", "format", "(", "\n", "i", ",", "\n", "train_loss", ",", "\n", "val_loss", "\n", ")", ")", "\n", "scheduler", ".", "step", "(", "val_loss", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'Epoch {}, Train Loss: {}'", ".", "format", "(", "i", ",", "train_loss", ")", ")", "\n", "scheduler", ".", "step", "(", "train_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score": [[160, 174], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "svi.SVIFlow.model.eval", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "svi.SVIFlow.model.log_prob_lower_bound", "svi.SVIFlow.model.stochastic_elbo"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.vae.VariationalAutoencoderToyNoise.log_prob_lower_bound", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.vae.VariationalAutoencoderToyNoise.stochastic_elbo"], ["", "", "", "def", "score", "(", "self", ",", "data", ",", "log_prob", "=", "False", ",", "num_samples", "=", "None", ")", ":", "\n", "\n", "        ", "if", "not", "num_samples", ":", "\n", "            ", "num_samples", "=", "self", ".", "n_samples", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "torch", ".", "set_default_tensor_type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", "\n", "if", "log_prob", ":", "\n", "                ", "return", "self", ".", "model", ".", "log_prob_lower_bound", "(", "data", ",", "num_samples", "=", "num_samples", ")", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "model", ".", "stochastic_elbo", "(", "data", ",", "num_samples", "=", "num_samples", ")", "\n", "", "torch", ".", "set_default_tensor_type", "(", "torch", ".", "FloatTensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score_batch": [[175, 189], ["torch.DataLoader", "torch.DataLoader", "enumerate", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "a.to", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "svi.SVIFlow.score"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.score"], ["", "", "def", "score_batch", "(", "self", ",", "dataset", ",", "log_prob", "=", "False", ",", "num_samples", "=", "None", ")", ":", "\n", "        ", "loader", "=", "data_utils", ".", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "num_workers", "=", "4", ",", "\n", "pin_memory", "=", "True", "\n", ")", "\n", "score", "=", "0.0", "\n", "\n", "for", "j", ",", "d", "in", "enumerate", "(", "loader", ")", ":", "\n", "            ", "d", "=", "[", "a", ".", "to", "(", "self", ".", "device", ")", "for", "a", "in", "d", "]", "\n", "score", "+=", "torch", ".", "sum", "(", "self", ".", "score", "(", "d", ",", "log_prob", ",", "num_samples", ")", ")", ".", "item", "(", ")", "\n", "\n", "", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.sample_prior": [[190, 199], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "svi.SVIFlow.model.eval", "nflows.utils.sampling.minibatch_sample"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.utils.sampling.minibatch_sample"], ["", "def", "sample_prior", "(", "self", ",", "num_samples", ",", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "model", ".", "eval", "(", ")", "\n", "return", "minibatch_sample", "(", "\n", "self", ".", "model", ".", "_prior", ".", "sample", ",", "\n", "num_samples", ",", "\n", "self", ".", "dimensions", ",", "\n", "self", ".", "batch_size", ",", "\n", "device", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.sample_posterior": [[201, 212], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "svi.SVIFlow.model.eval", "svi.SVIFlow.model._inputs_encoder", "nflows.utils.sampling.minibatch_sample"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.utils.sampling.minibatch_sample"], ["", "", "def", "sample_posterior", "(", "self", ",", "x", ",", "num_samples", ",", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "model", ".", "eval", "(", ")", "\n", "context", "=", "self", ".", "model", ".", "_inputs_encoder", "(", "x", ")", "\n", "return", "minibatch_sample", "(", "\n", "self", ".", "model", ".", "_approximate_posterior", ".", "sample", ",", "\n", "num_samples", ",", "\n", "self", ".", "dimensions", ",", "\n", "self", ".", "batch_size", ",", "\n", "device", ",", "\n", "context", "=", "context", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow._resample_posterior": [[214, 242], ["svi.SVIFlow.model._approximate_posterior.sample_and_log_prob", "nflows.utils.merge_leading_dims", "nflows.utils.merge_leading_dims", "svi.SVIFlow.model._prior.log_prob", "nflows.utils.repeat_rows", "svi.SVIFlow.model._likelihood.log_prob", "nflows.utils.split_leading_dim", "nflows.utils.split_leading_dim", "torch.distributions.Categorical().sample", "torch.distributions.Categorical().sample", "torch.distributions.Categorical().sample", "torch.distributions.Categorical().sample", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "len"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample_and_log_prob", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample"], ["", "", "def", "_resample_posterior", "(", "self", ",", "x", ",", "num_samples", ",", "context", ")", ":", "\n", "\n", "        ", "samples", ",", "log_q_z", "=", "self", ".", "model", ".", "_approximate_posterior", ".", "sample_and_log_prob", "(", "\n", "num_samples", ",", "\n", "context", "=", "context", "\n", ")", "\n", "samples", "=", "utils", ".", "merge_leading_dims", "(", "samples", ",", "num_dims", "=", "2", ")", "\n", "log_q_z", "=", "utils", ".", "merge_leading_dims", "(", "log_q_z", ",", "num_dims", "=", "2", ")", "\n", "\n", "# Compute log prob of latents under the prior.", "\n", "log_p_z", "=", "self", ".", "model", ".", "_prior", ".", "log_prob", "(", "samples", ")", "\n", "\n", "# Compute log prob of inputs under the decoder,", "\n", "x", "=", "utils", ".", "repeat_rows", "(", "x", ",", "num_reps", "=", "num_samples", ")", "\n", "log_p_x", "=", "self", ".", "model", ".", "_likelihood", ".", "log_prob", "(", "x", ",", "context", "=", "samples", ")", "\n", "\n", "# Compute ELBO.", "\n", "log_w", "=", "log_p_x", "+", "log_p_z", "-", "log_q_z", "\n", "log_w", "=", "utils", ".", "split_leading_dim", "(", "log_w", ",", "[", "-", "1", ",", "num_samples", "]", ")", "\n", "log_w", "-=", "torch", ".", "logsumexp", "(", "log_w", ",", "dim", "=", "-", "1", ")", "[", ":", ",", "None", "]", "\n", "\n", "samples", "=", "utils", ".", "split_leading_dim", "(", "samples", ",", "[", "-", "1", ",", "num_samples", "]", ")", "\n", "idx", "=", "torch", ".", "distributions", ".", "Categorical", "(", "logits", "=", "log_w", ")", ".", "sample", "(", "[", "num_samples", "]", ")", "\n", "\n", "return", "samples", "[", "\n", "torch", ".", "arange", "(", "len", "(", "x", ")", ",", "device", "=", "self", ".", "device", ")", "[", ":", ",", "None", ",", "None", "]", ",", "\n", "idx", ".", "T", "[", ":", ",", ":", ",", "None", "]", ",", "\n", "torch", ".", "arange", "(", "self", ".", "dimensions", ",", "device", "=", "self", ".", "device", ")", "[", "None", ",", "None", ",", ":", "]", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi.SVIFlow.resample_posterior": [[244, 257], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "svi.SVIFlow.model.eval", "svi.SVIFlow.model._inputs_encoder", "nflows.utils.sampling.minibatch_sample"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.utils.sampling.minibatch_sample"], ["", "def", "resample_posterior", "(", "self", ",", "x", ",", "num_samples", ",", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "model", ".", "eval", "(", ")", "\n", "context", "=", "self", ".", "model", ".", "_inputs_encoder", "(", "x", ")", "\n", "\n", "return", "minibatch_sample", "(", "\n", "self", ".", "_resample_posterior", ",", "\n", "num_samples", ",", "\n", "self", ".", "dimensions", ",", "\n", "self", ".", "batch_size", ",", "\n", "device", ",", "\n", "context", "=", "context", ",", "\n", "x", "=", "x", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.svi_mdn.SVIMDNFlow._create_approximate_posterior": [[8, 16], ["mdn.MultivariateGaussianMDN", "torch.nn.Linear"], "methods", ["None"], ["    ", "def", "_create_approximate_posterior", "(", "self", ")", ":", "\n", "        ", "return", "MultivariateGaussianMDN", "(", "\n", "features", "=", "self", ".", "dimensions", ",", "\n", "context_features", "=", "self", ".", "context_size", ",", "\n", "hidden_features", "=", "self", ".", "context_size", ",", "\n", "hidden_net", "=", "nn", ".", "Linear", "(", "self", ".", "context_size", ",", "self", ".", "context_size", ")", ",", "\n", "num_components", "=", "10", ",", "\n", "custom_initialization", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianDiagonalMDN.__init__": [[16, 36], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "features", ",", "\n", "context_features", ",", "\n", "hidden_features", ",", "\n", "hidden_net_list", ",", "\n", "num_components", ",", "\n", "act_fun", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_features", "=", "features", "\n", "self", ".", "_context_features", "=", "context_features", "\n", "self", ".", "_hidden_features", "=", "hidden_features", "\n", "self", ".", "_num_components", "=", "num_components", "\n", "self", ".", "act_fun", "=", "act_fun", "\n", "\n", "self", ".", "_hidden_net_list", "=", "hidden_net_list", "\n", "self", ".", "_logits_layer", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "num_components", ")", "\n", "self", ".", "_means_layer", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "num_components", "*", "features", ")", "\n", "self", ".", "_logvars_layer", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "num_components", "*", "features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianDiagonalMDN._hidden_net": [[37, 43], ["mdn.MultivariateGaussianDiagonalMDN.act_fun", "hidden"], "methods", ["None"], ["", "def", "_hidden_net", "(", "self", ",", "context", ")", ":", "\n", "        ", "h", "=", "context", "\n", "for", "hidden", "in", "self", ".", "_hidden_net_list", ":", "\n", "            ", "h", "=", "self", ".", "act_fun", "(", "hidden", "(", "h", ")", ")", "\n", "\n", "", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianDiagonalMDN.get_context": [[44, 46], ["mdn.MultivariateGaussianDiagonalMDN._hidden_net"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianDiagonalMDN._hidden_net"], ["", "def", "get_context", "(", "self", ",", "context", ")", ":", "\n", "        ", "return", "self", ".", "_hidden_net", "(", "context", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianDiagonalMDN.get_mixture_components": [[47, 53], ["mdn.MultivariateGaussianDiagonalMDN._logits_layer", "mdn.MultivariateGaussianDiagonalMDN._means_layer().view", "mdn.MultivariateGaussianDiagonalMDN._logvars_layer().view", "mdn.MultivariateGaussianDiagonalMDN._means_layer", "mdn.MultivariateGaussianDiagonalMDN._logvars_layer"], "methods", ["None"], ["", "def", "get_mixture_components", "(", "self", ",", "context", ")", ":", "\n", "        ", "logits", "=", "self", ".", "_logits_layer", "(", "context", ")", "\n", "means", "=", "self", ".", "_means_layer", "(", "context", ")", ".", "view", "(", "-", "1", ",", "self", ".", "_num_components", ",", "self", ".", "_features", ")", "\n", "logvars", "=", "self", ".", "_logvars_layer", "(", "context", ")", ".", "view", "(", "-", "1", ",", "self", ".", "_num_components", ",", "self", ".", "_features", ")", "\n", "\n", "return", "logits", ",", "means", ",", "logvars", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianDiagonalMDN.log_prob": [[54, 63], ["mdn.MultivariateGaussianDiagonalMDN.get_mixture_components", "torch.zeros", "range", "torch.logsumexp", "torch.log", "torch.sum", "torch.nn.functional.softmax", "numpy.log", "logvars[].exp"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.get_mixture_components"], ["", "def", "log_prob", "(", "self", ",", "inputs", ",", "context", ")", ":", "\n", "        ", "logits", ",", "means", ",", "logvars", "=", "self", ".", "get_mixture_components", "(", "context", ")", "\n", "\n", "tmp", "=", "torch", ".", "zeros", "(", "inputs", ".", "shape", "[", "0", "]", ",", "self", ".", "_num_components", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "_num_components", ")", ":", "\n", "            ", "tmp", "[", ":", ",", "i", "]", "=", "torch", ".", "log", "(", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "[", "i", "]", ")", "-", "0.5", "*", "torch", ".", "sum", "(", "np", ".", "log", "(", "2", "*", "math", ".", "pi", ")", "+", "logvars", "[", ":", ",", "i", ",", ":", "]", "+", "(", "inputs", "-", "means", "[", ":", ",", "i", ",", ":", "]", ")", "**", "2", "/", "logvars", "[", ":", ",", "i", ",", ":", "]", ".", "exp", "(", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "return", "torch", ".", "logsumexp", "(", "tmp", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianDiagonalMDN.sample": [[64, 78], ["mdn.MultivariateGaussianDiagonalMDN.get_mixture_components", "torch.distributions.categorical.Categorical().sample().view", "nflows.utils.repeat_rows", "samples.reshape", "torch.arange", "torch.distributions.categorical.Categorical().sample", "torch.exp", "torch.randn_like", "torch.distributions.categorical.Categorical", "torch.nn.functional.softmax"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.get_mixture_components", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample"], ["", "def", "sample", "(", "self", ",", "num_samples", ",", "context", ")", ":", "\n", "        ", "batch_size", "=", "context", ".", "shape", "[", "0", "]", "\n", "\n", "logits", ",", "means", ",", "logvars", "=", "self", ".", "get_mixture_components", "(", "context", ")", "\n", "\n", "choices", "=", "torch", ".", "distributions", ".", "categorical", ".", "Categorical", "(", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", ")", ".", "sample", "(", "(", "num_samples", ",", ")", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "ix", "=", "utils", ".", "repeat_rows", "(", "torch", ".", "arange", "(", "batch_size", ")", ",", "num_samples", ")", "\n", "\n", "chosen_means", "=", "means", "[", "ix", ",", "choices", ",", ":", "]", "\n", "chosen_logvars", "=", "logvars", "[", "ix", ",", "choices", ",", ":", "]", "\n", "\n", "samples", "=", "chosen_means", "+", "torch", ".", "exp", "(", "0.5", "*", "chosen_logvars", ")", "*", "torch", ".", "randn_like", "(", "chosen_logvars", ")", "\n", "return", "samples", ".", "reshape", "(", "batch_size", ",", "num_samples", ",", "self", ".", "_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianDiagonalMDN.sample_and_log_prob": [[79, 94], ["mdn.MultivariateGaussianDiagonalMDN.sample", "mdn.MultivariateGaussianDiagonalMDN.log_prob", "nflows.utils.merge_leading_dims", "nflows.utils.repeat_rows", "nflows.utils.split_leading_dim", "nflows.utils.split_leading_dim"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob"], ["", "def", "sample_and_log_prob", "(", "self", ",", "num_samples", ",", "context", ")", ":", "\n", "        ", "samples", "=", "self", ".", "sample", "(", "num_samples", ",", "context", ")", "\n", "\n", "if", "context", "is", "not", "None", ":", "\n", "            ", "samples", "=", "utils", ".", "merge_leading_dims", "(", "samples", ",", "num_dims", "=", "2", ")", "\n", "context", "=", "utils", ".", "repeat_rows", "(", "context", ",", "num_reps", "=", "num_samples", ")", "\n", "\n", "", "log_prob", "=", "self", ".", "log_prob", "(", "samples", ",", "context", ")", "\n", "\n", "if", "context", "is", "not", "None", ":", "\n", "# Split the context dimension from sample dimension.", "\n", "            ", "samples", "=", "utils", ".", "split_leading_dim", "(", "samples", ",", "shape", "=", "[", "-", "1", ",", "num_samples", "]", ")", "\n", "log_prob", "=", "utils", ".", "split_leading_dim", "(", "log_prob", ",", "shape", "=", "[", "-", "1", ",", "num_samples", "]", ")", "\n", "\n", "", "return", "samples", ",", "log_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.__init__": [[107, 163], ["torch.nn.Module.__init__", "numpy.triu_indices", "range", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "mdn.MultivariateGaussianMDN._initialize"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.__init__", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN._initialize"], ["def", "__init__", "(", "\n", "self", ",", "\n", "features", ",", "\n", "context_features", ",", "\n", "hidden_features", ",", "\n", "hidden_net", ",", "\n", "num_components", ",", "\n", "custom_initialization", "=", "False", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        :param input_dim: int\n            Dimension of inputs.\n        :param hidden_dim: int\n            Dimension of final layer of hidden net.\n        :param hidden_net:\n            nets.ModuleNetwork which outputs final hidden representation before\n            paramterization layers (i.e logits, means, and log precisions).\n        :param num_components: int\n            Number of mixture components.\n        :param output_dim: int\n            Dimension of output density.\n        \"\"\"", "\n", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_features", "=", "features", "\n", "self", ".", "_context_features", "=", "context_features", "\n", "self", ".", "_hidden_features", "=", "hidden_features", "\n", "self", ".", "_num_components", "=", "num_components", "\n", "self", ".", "_num_upper_params", "=", "(", "features", "*", "(", "features", "-", "1", ")", ")", "//", "2", "\n", "\n", "self", ".", "_row_ix", ",", "self", ".", "_column_ix", "=", "np", ".", "triu_indices", "(", "features", ",", "k", "=", "1", ")", "\n", "self", ".", "_diag_ix", "=", "range", "(", "features", ")", "\n", "\n", "# Modules", "\n", "self", ".", "_hidden_net", "=", "hidden_net", "\n", "\n", "self", ".", "_logits_layer", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "num_components", ")", "\n", "\n", "self", ".", "_means_layer", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "num_components", "*", "features", ")", "\n", "\n", "self", ".", "_unconstrained_diagonal_layer", "=", "nn", ".", "Linear", "(", "\n", "hidden_features", ",", "num_components", "*", "features", "\n", ")", "\n", "self", ".", "_upper_layer", "=", "nn", ".", "Linear", "(", "\n", "hidden_features", ",", "num_components", "*", "self", ".", "_num_upper_params", "\n", ")", "\n", "\n", "# Constant for numerical stability.", "\n", "self", ".", "_epsilon", "=", "1e-2", "\n", "\n", "# Initialize mixture coefficients and precision factors sensibly.", "\n", "if", "custom_initialization", ":", "\n", "            ", "self", ".", "_initialize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.get_mixture_components": [[164, 215], ["mdn.MultivariateGaussianMDN._hidden_net", "mdn.MultivariateGaussianMDN._logits_layer", "mdn.MultivariateGaussianMDN._means_layer().view", "mdn.MultivariateGaussianMDN._unconstrained_diagonal_layer().view", "mdn.MultivariateGaussianMDN._upper_layer().view", "torch.zeros", "torch.matmul", "torch.sum", "torch.nn.functional.softplus", "torch.transpose", "torch.log", "mdn.MultivariateGaussianMDN._means_layer", "mdn.MultivariateGaussianMDN._unconstrained_diagonal_layer", "mdn.MultivariateGaussianMDN._upper_layer"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianDiagonalMDN._hidden_net"], ["", "", "def", "get_mixture_components", "(", "self", ",", "context", ")", ":", "\n", "        ", "\"\"\"\n        :param context: torch.Tensor [batch_size, input_dim]\n            The input to the MDN.\n        :return: tuple(\n            torch Tensor [batch_size, n_mixtures],\n            torch.Tensor [batch_size, n_mixtures, output_dim],\n            torch.Tensor [batch_size, n_mixtures, output_dim, output_dim],\n            torch.Tensor [1],\n            torch.Tensor [batch_size, n_mixtures, output_dim, output_dim]\n            )\n            Tuple containing logits, means, precisions,\n            sum of log diagonal of precision factors, and precision factors themselves.\n            Recall upper triangular precision factor A such that SIGMA^-1 = A^T A.\n        \"\"\"", "\n", "\n", "h", "=", "self", ".", "_hidden_net", "(", "context", ")", "\n", "\n", "# Logits and Means are unconstrained and are obtained directly from the", "\n", "# output of a linear layer.", "\n", "logits", "=", "self", ".", "_logits_layer", "(", "h", ")", "\n", "means", "=", "self", ".", "_means_layer", "(", "h", ")", ".", "view", "(", "-", "1", ",", "self", ".", "_num_components", ",", "self", ".", "_features", ")", "\n", "\n", "# Unconstrained diagonal and upper triangular quantities are unconstrained.", "\n", "unconstrained_diagonal", "=", "self", ".", "_unconstrained_diagonal_layer", "(", "h", ")", ".", "view", "(", "\n", "-", "1", ",", "self", ".", "_num_components", ",", "self", ".", "_features", "\n", ")", "\n", "upper", "=", "self", ".", "_upper_layer", "(", "h", ")", ".", "view", "(", "\n", "-", "1", ",", "self", ".", "_num_components", ",", "self", ".", "_num_upper_params", "\n", ")", "\n", "\n", "# Elements of diagonal of precision factor must be positive", "\n", "# (recall precision factor A such that SIGMA^-1 = A^T A).", "\n", "diagonal", "=", "F", ".", "softplus", "(", "unconstrained_diagonal", ")", "+", "self", ".", "_epsilon", "\n", "\n", "# Create empty precision factor matrix, and fill with appropriate quantities.", "\n", "precision_factors", "=", "torch", ".", "zeros", "(", "\n", "means", ".", "shape", "[", "0", "]", ",", "self", ".", "_num_components", ",", "self", ".", "_features", ",", "self", ".", "_features", "\n", ")", "\n", "precision_factors", "[", "...", ",", "self", ".", "_diag_ix", ",", "self", ".", "_diag_ix", "]", "=", "diagonal", "\n", "precision_factors", "[", "...", ",", "self", ".", "_row_ix", ",", "self", ".", "_column_ix", "]", "=", "upper", "\n", "\n", "# Precisions are given by SIGMA^-1 = A^T A.", "\n", "precisions", "=", "torch", ".", "matmul", "(", "\n", "torch", ".", "transpose", "(", "precision_factors", ",", "2", ",", "3", ")", ",", "precision_factors", "\n", ")", "\n", "\n", "# The sum of the log diagonal of A is used in the likelihood calculation.", "\n", "sumlogdiag", "=", "torch", ".", "sum", "(", "torch", ".", "log", "(", "diagonal", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "return", "logits", ",", "means", ",", "precisions", ",", "sumlogdiag", ",", "precision_factors", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob": [[216, 247], ["mdn.MultivariateGaussianMDN.get_mixture_components", "means.size", "inputs.view.view.view", "torch.matmul", "torch.logsumexp", "torch.logsumexp", "numpy.log", "torch.matmul().view", "inputs.view.view.expand_as", "torch.matmul", "torch.transpose"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.get_mixture_components"], ["", "def", "log_prob", "(", "self", ",", "inputs", ",", "context", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Evaluates log p(inputs | context), where p is a multivariate mixture of Gaussians\n        with mixture coefficients, means, and precisions given as a neural network function.\n        :param inputs: torch.Tensor [batch_size, input_dim]\n            Input variable.\n        :param context: torch.Tensor [batch_size, context_dim]\n            Conditioning variable.\n        :return: torch.Tensor [1]\n            Log probability of inputs given context under model.\n        \"\"\"", "\n", "\n", "# Get necessary quantities.", "\n", "logits", ",", "means", ",", "precisions", ",", "sumlogdiag", ",", "_", "=", "self", ".", "get_mixture_components", "(", "context", ")", "\n", "\n", "batch_size", ",", "n_mixtures", ",", "output_dim", "=", "means", ".", "size", "(", ")", "\n", "inputs", "=", "inputs", ".", "view", "(", "-", "1", ",", "1", ",", "output_dim", ")", "\n", "\n", "# Split up evaluation into parts.", "\n", "a", "=", "logits", "-", "torch", ".", "logsumexp", "(", "logits", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "b", "=", "-", "(", "output_dim", "/", "2.0", ")", "*", "np", ".", "log", "(", "2", "*", "np", ".", "pi", ")", "\n", "c", "=", "sumlogdiag", "\n", "d1", "=", "(", "inputs", ".", "expand_as", "(", "means", ")", "-", "means", ")", ".", "view", "(", "\n", "batch_size", ",", "n_mixtures", ",", "output_dim", ",", "1", "\n", ")", "\n", "d2", "=", "torch", ".", "matmul", "(", "precisions", ",", "d1", ")", "\n", "d", "=", "-", "0.5", "*", "torch", ".", "matmul", "(", "torch", ".", "transpose", "(", "d1", ",", "2", ",", "3", ")", ",", "d2", ")", ".", "view", "(", "\n", "batch_size", ",", "n_mixtures", "\n", ")", "\n", "\n", "return", "torch", ".", "logsumexp", "(", "a", "+", "b", "+", "c", "+", "d", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample": [[248, 302], ["mdn.MultivariateGaussianMDN.get_mixture_components", "torch.nn.functional.softmax", "torch.multinomial().view", "nflows.utils.repeat_rows", "torch.triangular_solve", "samples.reshape", "nflows.utils.repeat_rows", "nflows.utils.repeat_rows", "torch.arange", "torch.randn", "zero_mean_samples.squeeze", "torch.multinomial"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.get_mixture_components"], ["", "def", "sample", "(", "self", ",", "num_samples", ",", "context", ")", ":", "\n", "        ", "\"\"\"\n        Generated num_samples independent samples from p(inputs | context).\n        NB: Generates num_samples samples for EACH item in context batch i.e. returns\n        (num_samples * batch_size) samples in total.\n        :param num_samples: int\n            Number of samples to generate.\n        :param context: torch.Tensor [batch_size, context_dim]\n            Conditioning variable.\n        :return: torch.Tensor [batch_size, num_samples, output_dim]\n            Batch of generated samples.\n        \"\"\"", "\n", "\n", "# Get necessary quantities.", "\n", "logits", ",", "means", ",", "_", ",", "_", ",", "precision_factors", "=", "self", ".", "get_mixture_components", "(", "context", ")", "\n", "batch_size", ",", "n_mixtures", ",", "output_dim", "=", "means", ".", "shape", "\n", "\n", "# We need (batch_size * num_samples) samples in total.", "\n", "means", ",", "precision_factors", "=", "(", "\n", "utils", ".", "repeat_rows", "(", "means", ",", "num_samples", ")", ",", "\n", "utils", ".", "repeat_rows", "(", "precision_factors", ",", "num_samples", ")", ",", "\n", ")", "\n", "\n", "# Normalize the logits for the coefficients.", "\n", "coefficients", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "# [batch_size, num_components]", "\n", "\n", "# Choose num_samples mixture components per example in the batch.", "\n", "choices", "=", "torch", ".", "multinomial", "(", "\n", "coefficients", ",", "num_samples", "=", "num_samples", ",", "replacement", "=", "True", "\n", ")", ".", "view", "(", "\n", "-", "1", "\n", ")", "# [batch_size, num_samples]", "\n", "\n", "# Create dummy index for indexing means and precision factors.", "\n", "ix", "=", "utils", ".", "repeat_rows", "(", "torch", ".", "arange", "(", "batch_size", ")", ",", "num_samples", ")", "\n", "\n", "# Select means and precision factors.", "\n", "chosen_means", "=", "means", "[", "ix", ",", "choices", ",", ":", "]", "\n", "chosen_precision_factors", "=", "precision_factors", "[", "ix", ",", "choices", ",", ":", ",", ":", "]", "\n", "\n", "# Batch triangular solve to multiply standard normal samples by inverse", "\n", "# of upper triangular precision factor.", "\n", "zero_mean_samples", ",", "_", "=", "torch", ".", "triangular_solve", "(", "\n", "torch", ".", "randn", "(", "\n", "batch_size", "*", "num_samples", ",", "output_dim", ",", "1", "\n", ")", ",", "# Need dummy final dimension.", "\n", "chosen_precision_factors", ",", "\n", ")", "\n", "\n", "# Mow center samples at chosen means, removing dummy final dimension", "\n", "# from triangular solve.", "\n", "samples", "=", "chosen_means", "+", "zero_mean_samples", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "return", "samples", ".", "reshape", "(", "batch_size", ",", "num_samples", ",", "output_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample_and_log_prob": [[303, 319], ["mdn.MultivariateGaussianMDN.sample", "mdn.MultivariateGaussianMDN.log_prob", "nflows.utils.merge_leading_dims", "nflows.utils.repeat_rows", "nflows.utils.split_leading_dim", "nflows.utils.split_leading_dim"], "methods", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample", "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.log_prob"], ["", "def", "sample_and_log_prob", "(", "self", ",", "num_samples", ",", "context", "=", "None", ")", ":", "\n", "\n", "        ", "samples", "=", "self", ".", "sample", "(", "num_samples", ",", "context", ")", "\n", "\n", "if", "context", "is", "not", "None", ":", "\n", "            ", "samples", "=", "utils", ".", "merge_leading_dims", "(", "samples", ",", "num_dims", "=", "2", ")", "\n", "context", "=", "utils", ".", "repeat_rows", "(", "context", ",", "num_reps", "=", "num_samples", ")", "\n", "\n", "", "log_prob", "=", "self", ".", "log_prob", "(", "samples", ",", "context", ")", "\n", "\n", "if", "context", "is", "not", "None", ":", "\n", "# Split the context dimension from sample dimension.", "\n", "            ", "samples", "=", "utils", ".", "split_leading_dim", "(", "samples", ",", "shape", "=", "[", "-", "1", ",", "num_samples", "]", ")", "\n", "log_prob", "=", "utils", ".", "split_leading_dim", "(", "log_prob", ",", "shape", "=", "[", "-", "1", ",", "num_samples", "]", ")", "\n", "\n", "", "return", "samples", ",", "log_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN._initialize": [[320, 350], ["torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.log", "torch.ones", "torch.randn", "torch.exp", "torch.Tensor"], "methods", ["None"], ["", "def", "_initialize", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Initializes MDN so that mixture coefficients are approximately uniform,\n        and covariances are approximately the identity.\n        :return: None\n        \"\"\"", "\n", "# Initialize mixture coefficients to near uniform.", "\n", "self", ".", "_logits_layer", ".", "weight", ".", "data", "=", "self", ".", "_epsilon", "*", "torch", ".", "randn", "(", "\n", "self", ".", "_num_components", ",", "self", ".", "_hidden_features", "\n", ")", "\n", "self", ".", "_logits_layer", ".", "bias", ".", "data", "=", "self", ".", "_epsilon", "*", "torch", ".", "randn", "(", "self", ".", "_num_components", ")", "\n", "\n", "# Initialize diagonal of precision factors to inverse of softplus at 1.", "\n", "self", ".", "_unconstrained_diagonal_layer", ".", "weight", ".", "data", "=", "self", ".", "_epsilon", "*", "torch", ".", "randn", "(", "\n", "self", ".", "_num_components", "*", "self", ".", "_features", ",", "self", ".", "_hidden_features", "\n", ")", "\n", "self", ".", "_unconstrained_diagonal_layer", ".", "bias", ".", "data", "=", "torch", ".", "log", "(", "\n", "torch", ".", "exp", "(", "torch", ".", "Tensor", "(", "[", "1", "-", "self", ".", "_epsilon", "]", ")", ")", "-", "1", "\n", ")", "*", "torch", ".", "ones", "(", "\n", "self", ".", "_num_components", "*", "self", ".", "_features", "\n", ")", "+", "self", ".", "_epsilon", "*", "torch", ".", "randn", "(", "\n", "self", ".", "_num_components", "*", "self", ".", "_features", "\n", ")", "\n", "\n", "# Initialize off-diagonal of precision factors to zero.", "\n", "self", ".", "_upper_layer", ".", "weight", ".", "data", "=", "self", ".", "_epsilon", "*", "torch", ".", "randn", "(", "\n", "self", ".", "_num_components", "*", "self", ".", "_num_upper_params", ",", "self", ".", "_hidden_features", "\n", ")", "\n", "self", ".", "_upper_layer", ".", "bias", ".", "data", "=", "self", ".", "_epsilon", "*", "torch", ".", "randn", "(", "\n", "self", ".", "_num_components", "*", "self", ".", "_num_upper_params", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.main": [[353, 368], ["mdn.MultivariateGaussianMDN", "torch.randn", "mdn.MultivariateGaussianMDN.sample", "print", "torch.nn.Linear"], "function", ["home.repos.pwc.inspect_result.bayesiains_density-deconvolution.flow.mdn.MultivariateGaussianMDN.sample"], ["", "", "def", "main", "(", ")", ":", "\n", "# probs = torch.Tensor([[1, 0], [0, 1]])", "\n", "# samples = torch.multinomial(probs, num_samples=5, replacement=True)", "\n", "# print(samples)", "\n", "# quit()", "\n", "    ", "mdn", "=", "MultivariateGaussianMDN", "(", "\n", "features", "=", "2", ",", "\n", "context_features", "=", "3", ",", "\n", "hidden_features", "=", "16", ",", "\n", "hidden_net", "=", "nn", ".", "Linear", "(", "3", ",", "16", ")", ",", "\n", "num_components", "=", "4", ",", "\n", ")", "\n", "inputs", "=", "torch", ".", "randn", "(", "1", ",", "3", ")", "\n", "samples", "=", "mdn", ".", "sample", "(", "9", ",", "inputs", ")", "\n", "print", "(", "samples", ".", "shape", ")", "\n", "\n"]]}