{"home.repos.pwc.inspect_result.doc-doc_hqga.None.eval_oe.classified_metric": [[10, 67], ["pd.read_csv", "len", "pd.read_csv.iterrows", "utils.load_file", "len", "utils.load_file.items", "qns_type_right.items", "print", "qns_type_right.items", "print", "print", "print", "what_type_right.items", "print", "what_type_right.items", "print", "qns.split", "print", "print", "print", "print", "print", "str", "str"], "function", ["home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.util.load_file"], ["def", "classified_metric", "(", "gt_file", ",", "pred_file", ")", ":", "\n", "    ", "samples", "=", "pd", ".", "read_csv", "(", "gt_file", ")", "\n", "sp_num", "=", "len", "(", "samples", ")", "\n", "qid2type", "=", "{", "}", "\n", "qid2tag", "=", "{", "}", "\n", "for", "idx", ",", "row", "in", "samples", ".", "iterrows", "(", ")", ":", "\n", "        ", "qid", ",", "qns", "=", "str", "(", "row", "[", "'qid'", "]", ")", ",", "str", "(", "row", "[", "'question'", "]", ")", "\n", "s_qns", "=", "qns", ".", "split", "(", "' '", ")", "\n", "qtype", "=", "s_qns", "[", "0", "]", "\n", "qid2type", "[", "qid", "]", "=", "qtype", "\n", "qns_type_total", "[", "qtype", "]", "+=", "1", "\n", "#############################################", "\n", "if", "qtype", "==", "'what'", ":", "\n", "            ", "tag", "=", "'o'", "\n", "if", "'doing'", "in", "s_qns", ":", "tag", "=", "'a'", "\n", "qid2tag", "[", "qid", "]", "=", "tag", "\n", "what_type_total", "[", "tag", "]", "+=", "1", "\n", "#############################################", "\n", "\n", "", "", "res", "=", "load_file", "(", "pred_file", ")", "\n", "total_res", "=", "len", "(", "res", ")", "\n", "assert", "sp_num", "==", "total_res", ",", "'incomplete prediction'", "\n", "cnt", "=", "0", "\n", "for", "qid", ",", "value", "in", "res", ".", "items", "(", ")", ":", "\n", "# qid = str(int(qid)+170859) #map to hcrn id", "\n", "#skip unknown", "\n", "        ", "if", "value", "[", "'prediction'", "]", "==", "0", ":", "\n", "            ", "continue", "\n", "", "if", "value", "[", "'prediction'", "]", "==", "value", "[", "'answer'", "]", ":", "\n", "            ", "cnt", "+=", "1", "\n", "qns_type_right", "[", "qid2type", "[", "qid", "]", "]", "+=", "1", "\n", "#############################################", "\n", "if", "qid2type", "[", "qid", "]", "==", "'what'", ":", "\n", "                ", "what_type_right", "[", "qid2tag", "[", "qid", "]", "]", "+=", "1", "\n", "#############################################", "\n", "\n", "\n", "", "", "", "for", "qtype", ",", "value", "in", "qns_type_right", ".", "items", "(", ")", ":", "\n", "        ", "qns_type_right", "[", "qtype", "]", "=", "value", "*", "100", "/", "qns_type_total", "[", "qtype", "]", "\n", "print", "(", "qtype", ",", "end", "=", "'\\t'", ")", "\n", "", "print", "(", "'All'", ")", "\n", "for", "qtype", ",", "value", "in", "qns_type_right", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "'{:.2f}'", ".", "format", "(", "value", ")", ",", "end", "=", "'\\t'", ")", "\n", "\n", "", "print", "(", "'{:.2f}'", ".", "format", "(", "cnt", "*", "100", "/", "sp_num", ")", ")", "\n", "\n", "###################################", "\n", "print", "(", "what_type_total", ")", "\n", "for", "tag", "in", "what_type_right", ":", "\n", "        ", "print", "(", "'what_'", "+", "tag", ",", "end", "=", "'\\t'", ")", "\n", "", "print", "(", "''", ")", "\n", "for", "tag", ",", "cnt", "in", "what_type_right", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "'{:.2f}'", ".", "format", "(", "cnt", "*", "100.0", "/", "what_type_total", "[", "tag", "]", ")", ",", "end", "=", "'\\t'", ")", "\n", "", "print", "(", "''", ")", "\n", "for", "tag", ",", "cnt", "in", "what_type_right", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "'{:.2f}'", ".", "format", "(", "what_type_total", "[", "tag", "]", "/", "qns_type_total", "[", "'what'", "]", ")", ",", "end", "=", "'\\t'", ")", "\n", "", "print", "(", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.None.eval_oe.overall_acc": [[69, 81], ["utils.load_file", "list", "len", "utils.load_file", "print", "print", "len"], "function", ["home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.util.load_file", "home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.util.load_file"], ["", "def", "overall_acc", "(", "sample_list_file", ",", "result_file", ")", ":", "\n", "    ", "samples", "=", "load_file", "(", "sample_list_file", ")", "\n", "qids", "=", "list", "(", "samples", "[", "'qid'", "]", ")", "\n", "total_num", "=", "len", "(", "qids", ")", "\n", "predictions", "=", "load_file", "(", "result_file", ")", "\n", "acc_num", "=", "0", "\n", "print", "(", "total_num", ",", "len", "(", "predictions", ")", ")", "\n", "for", "qid", "in", "qids", ":", "\n", "        ", "if", "qid", "not", "in", "predictions", ":", "continue", "\n", "if", "predictions", "[", "qid", "]", "[", "'prediction'", "]", "==", "predictions", "[", "qid", "]", "[", "'answer'", "]", ":", "\n", "            ", "acc_num", "+=", "1", "\n", "", "", "print", "(", "'{:.2f}'", ".", "format", "(", "acc_num", "*", "100.0", "/", "total_num", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.None.eval_oe.main": [[84, 93], ["osp.join", "print", "eval_oe.classified_metric", "eval_oe.overall_acc", "dataset_dir.split", "dataset_dir.split"], "function", ["home.repos.pwc.inspect_result.doc-doc_hqga.None.eval_oe.classified_metric", "home.repos.pwc.inspect_result.doc-doc_hqga.None.eval_oe.overall_acc"], ["", "def", "main", "(", "result_file", ",", "dataset_dir", ",", "mode", "=", "'val'", ")", ":", "\n", "\n", "    ", "data_set", "=", "mode", "\n", "sample_list_file", "=", "osp", ".", "join", "(", "dataset_dir", ",", "data_set", "+", "'.csv'", ")", "\n", "print", "(", "'Evaluating {}'", ".", "format", "(", "result_file", ")", ")", "\n", "if", "'msrvtt'", "in", "dataset_dir", ".", "split", "(", "'/'", ")", "or", "'msvd'", "in", "dataset_dir", ".", "split", "(", "'/'", ")", ":", "\n", "        ", "classified_metric", "(", "sample_list_file", ",", "result_file", ")", "\n", "", "else", ":", "\n", "        ", "overall_acc", "(", "sample_list_file", ",", "result_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.None.word2vec.word2vec": [[7, 44], ["utils.load_file", "word2vec.items", "numpy.asarray", "numpy.mean", "numpy.mean", "numpy.mean", "sorted", "numpy.zeros", "enumerate", "print", "numpy.save", "print", "line.split.split", "numpy.array().astype", "np.asarray.append", "vocab.idx2word.items", "len", "print", "bad_words.append", "numpy.array", "int", "int", "numpy.random.randn"], "function", ["home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.util.load_file"], ["def", "word2vec", "(", "vocab", ",", "glove_file", ",", "save_filename", ")", ":", "\n", "    ", "glove", "=", "load_file", "(", "glove_file", ")", "\n", "word2vec", "=", "{", "}", "\n", "for", "line", "in", "glove", ":", "\n", "        ", "line", "=", "line", ".", "split", "(", "' '", ")", "\n", "word2vec", "[", "line", "[", "0", "]", "]", "=", "np", ".", "array", "(", "line", "[", "1", ":", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "", "temp", "=", "[", "]", "\n", "for", "word", ",", "vec", "in", "word2vec", ".", "items", "(", ")", ":", "\n", "        ", "temp", ".", "append", "(", "vec", ")", "\n", "", "temp", "=", "np", ".", "asarray", "(", "temp", ")", "\n", "row", ",", "col", "=", "temp", ".", "shape", "\n", "# print(row, col)", "\n", "pad", "=", "np", ".", "mean", "(", "temp", ",", "axis", "=", "0", ")", "\n", "start", "=", "np", ".", "mean", "(", "temp", "[", ":", "int", "(", "row", "//", "2", ")", ",", ":", "]", ",", "axis", "=", "0", ")", "\n", "end", "=", "np", ".", "mean", "(", "temp", "[", "int", "(", "row", "//", "2", ")", ":", ",", ":", "]", ",", "axis", "=", "0", ")", "\n", "special_tokens", "=", "[", "pad", ",", "start", ",", "end", "]", "\n", "count", "=", "0", "\n", "bad_words", "=", "[", "]", "\n", "sort_idx_word", "=", "sorted", "(", "vocab", ".", "idx2word", ".", "items", "(", ")", ",", "key", "=", "lambda", "k", ":", "k", "[", "0", "]", ")", "\n", "glove_embed", "=", "np", ".", "zeros", "(", "(", "len", "(", "vocab", ")", ",", "300", ")", ")", "\n", "for", "row", ",", "item", "in", "enumerate", "(", "sort_idx_word", ")", ":", "\n", "        ", "idx", ",", "word", "=", "item", "[", "0", "]", ",", "item", "[", "1", "]", "\n", "if", "word", "in", "word2vec", ":", "\n", "            ", "glove_embed", "[", "row", "]", "=", "word2vec", "[", "word", "]", "\n", "", "else", ":", "\n", "            ", "if", "row", "<", "3", ":", "\n", "                ", "glove_embed", "[", "row", "]", "=", "special_tokens", "[", "row", "]", "\n", "", "else", ":", "\n", "                ", "glove_embed", "[", "row", "]", "=", "np", ".", "random", ".", "randn", "(", "300", ")", "*", "0.4", "\n", "", "print", "(", "word", ")", "\n", "bad_words", ".", "append", "(", "word", ")", "\n", "count", "+=", "1", "\n", "", "", "print", "(", "glove_embed", ".", "shape", ")", "\n", "# save_file(bad_words, 'bad_words.json')", "\n", "np", ".", "save", "(", "save_filename", ",", "glove_embed", ")", "\n", "print", "(", "count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.None.word2vec.main": [[45, 53], ["osp.join", "utils.pkload", "word2vec.word2vec"], "function", ["home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.util.pkload", "home.repos.pwc.inspect_result.doc-doc_hqga.None.word2vec.word2vec"], ["", "def", "main", "(", ")", ":", "\n", "    ", "dataset", ",", "task", "=", "'msvd'", ",", "''", "\n", "data_dir", "=", "f'dataset/{dataset}/{task}/'", "\n", "vocab_file", "=", "osp", ".", "join", "(", "data_dir", ",", "'vocab.pkl'", ")", "\n", "vocab", "=", "pkload", "(", "vocab_file", ")", "\n", "glove_file", "=", "'../data/glove.840B.300d.txt'", "\n", "save_filename", "=", "f'dataset/{dataset}/{task}/glove_embed.npy'", "\n", "word2vec", "(", "vocab", ",", "glove_file", ",", "save_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.None.videoqa.VideoQA.__init__": [[11, 29], ["torch.device", "torch.cuda.is_available"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "vocab", ",", "train_loader", ",", "val_loader", ",", "glove_embed", ",", "checkpoint_path", ",", "model_type", ",", "\n", "model_prefix", ",", "vis_step", ",", "lr_rate", ",", "batch_size", ",", "epoch_num", ",", "grad_accu_steps", ",", "use_bert", "=", "True", ",", "multi_choice", "=", "True", ")", ":", "\n", "        ", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "train_loader", "=", "train_loader", "\n", "self", ".", "val_loader", "=", "val_loader", "\n", "self", ".", "glove_embed", "=", "glove_embed", "\n", "self", ".", "model_dir", "=", "checkpoint_path", "\n", "self", ".", "model_type", "=", "model_type", "\n", "self", ".", "model_prefix", "=", "model_prefix", "\n", "self", ".", "vis_step", "=", "vis_step", "\n", "self", ".", "lr_rate", "=", "lr_rate", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "epoch_num", "=", "epoch_num", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "self", ".", "model", "=", "None", "\n", "self", ".", "use_bert", "=", "use_bert", "\n", "self", ".", "multi_choice", "=", "multi_choice", "\n", "self", ".", "accu_grad_step", "=", "grad_accu_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.None.videoqa.VideoQA.build_model": [[30, 61], ["torch.optim.Adam", "torch.optim.lr_scheduler.ReduceLROnPlateau", "videoqa.VideoQA.model.to", "len", "networks.Encoder.EncoderVid.EncoderVid", "networks.Encoder.EncoderQns.EncoderQns", "networks.VQAModel.HQGA.HQGA", "networks.embed_loss.MultipleChoiceLoss().to", "torch.CrossEntropyLoss().to", "videoqa.VideoQA.model.parameters", "networks.embed_loss.MultipleChoiceLoss", "torch.CrossEntropyLoss"], "methods", ["None"], ["", "def", "build_model", "(", "self", ")", ":", "\n", "\n", "        ", "feat_dim", "=", "2048", "\n", "bbox_dim", "=", "5", "\n", "num_clip", ",", "num_frame", ",", "num_bbox", "=", "8", ",", "8", "*", "4", ",", "10", "\n", "feat_hidden", ",", "pos_hidden", "=", "256", ",", "128", "\n", "word_dim", "=", "300", "\n", "vocab_size", "=", "None", "if", "self", ".", "use_bert", "else", "len", "(", "self", ".", "vocab", ")", "\n", "\n", "num_class", "=", "1", "if", "self", ".", "multi_choice", "else", "1853", "#4001 for msrvtt, 1853 for msvd, 1541 for frameQA in TGIF-QA", "\n", "\n", "if", "self", ".", "model_type", "==", "'HQGA'", ":", "\n", "\n", "            ", "vid_encoder", "=", "EncoderVid", ".", "EncoderVid", "(", "feat_dim", ",", "bbox_dim", ",", "num_clip", ",", "num_frame", ",", "num_bbox", ",", "\n", "feat_hidden", ",", "pos_hidden", ",", "input_dropout_p", "=", "0.3", ")", "\n", "\n", "qns_encoder", "=", "EncoderQns", ".", "EncoderQns", "(", "word_dim", ",", "feat_hidden", ",", "vocab_size", ",", "self", ".", "glove_embed", ",", "use_bert", "=", "self", ".", "use_bert", ",", "\n", "n_layers", "=", "1", ",", "rnn_dropout_p", "=", "0", ",", "input_dropout_p", "=", "0.3", ",", "bidirectional", "=", "True", ",", "\n", "rnn_cell", "=", "'gru'", ")", "\n", "\n", "self", ".", "model", "=", "HQGA", ".", "HQGA", "(", "vid_encoder", ",", "qns_encoder", ",", "self", ".", "device", ",", "num_class", ")", "\n", "\n", "", "params", "=", "[", "{", "'params'", ":", "self", ".", "model", ".", "parameters", "(", ")", "}", "]", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params", "=", "params", ",", "lr", "=", "self", ".", "lr_rate", ")", "\n", "self", ".", "scheduler", "=", "ReduceLROnPlateau", "(", "self", ".", "optimizer", ",", "'max'", ",", "factor", "=", "0.5", ",", "patience", "=", "5", ",", "verbose", "=", "True", ")", "\n", "\n", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "self", ".", "multi_choice", ":", "\n", "            ", "self", ".", "criterion", "=", "embed_loss", ".", "MultipleChoiceLoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.None.videoqa.VideoQA.save_model": [[63, 66], ["torch.save", "videoqa.VideoQA.model.state_dict", "osp.join"], "methods", ["None"], ["", "", "def", "save_model", "(", "self", ",", "epoch", ",", "acc", ")", ":", "\n", "        ", "torch", ".", "save", "(", "self", ".", "model", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "self", ".", "model_dir", ",", "'{}-{}-{}-{:.2f}.ckpt'", "\n", ".", "format", "(", "self", ".", "model_type", ",", "self", ".", "model_prefix", ",", "epoch", ",", "acc", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.None.videoqa.VideoQA.resume": [[67, 84], ["osp.join", "print", "torch.load", "videoqa.VideoQA.model.state_dict().items", "videoqa.VideoQA.model.load_state_dict", "videoqa.VideoQA.model.state_dict"], "methods", ["None"], ["", "def", "resume", "(", "self", ",", "model_file", ")", ":", "\n", "        ", "\"\"\"\n        initialize model with pretrained weights\n        :return:\n        \"\"\"", "\n", "model_path", "=", "osp", ".", "join", "(", "self", ".", "model_dir", ",", "model_file", ")", "\n", "print", "(", "f'Warm-starting from model {model_path}'", ")", "\n", "model_dict", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "new_model_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "self", ".", "model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "in", "model_dict", ":", "\n", "                ", "v", "=", "model_dict", "[", "k", "]", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "# print(k)", "\n", "", "new_model_dict", "[", "k", "]", "=", "v", "\n", "", "self", ".", "model", ".", "load_state_dict", "(", "new_model_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.None.videoqa.VideoQA.run": [[86, 104], ["videoqa.VideoQA.build_model", "range", "videoqa.VideoQA.resume", "videoqa.VideoQA.eval", "print", "videoqa.VideoQA.train", "videoqa.VideoQA.eval", "print", "videoqa.VideoQA.scheduler.step", "videoqa.VideoQA.save_model"], "methods", ["home.repos.pwc.inspect_result.doc-doc_hqga.None.videoqa.VideoQA.build_model", "home.repos.pwc.inspect_result.doc-doc_hqga.None.videoqa.VideoQA.resume", "home.repos.pwc.inspect_result.doc-doc_hqga.None.videoqa.VideoQA.eval", "home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.sample_loader.QALoader.train", "home.repos.pwc.inspect_result.doc-doc_hqga.None.videoqa.VideoQA.eval", "home.repos.pwc.inspect_result.doc-doc_hqga.None.videoqa.VideoQA.save_model"], ["", "def", "run", "(", "self", ",", "model_file", ",", "pre_trained", "=", "False", ")", ":", "\n", "        ", "self", ".", "build_model", "(", ")", "\n", "best_eval_score", "=", "0.0", "\n", "if", "pre_trained", ":", "\n", "            ", "self", ".", "resume", "(", "model_file", ")", "\n", "best_eval_score", "=", "self", ".", "eval", "(", "0", ")", "\n", "print", "(", "'Initial Acc {:.2f}'", ".", "format", "(", "best_eval_score", ")", ")", "\n", "\n", "", "for", "epoch", "in", "range", "(", "1", ",", "self", ".", "epoch_num", ")", ":", "\n", "            ", "train_loss", ",", "train_acc", "=", "self", ".", "train", "(", "epoch", ")", "\n", "eval_score", "=", "self", ".", "eval", "(", "epoch", ")", "\n", "print", "(", "\"==>Epoch:[{}/{}][Train Loss: {:.4f} Train acc: {:.2f} Val acc: {:.2f}]\"", ".", "\n", "format", "(", "epoch", ",", "self", ".", "epoch_num", ",", "train_loss", ",", "train_acc", ",", "eval_score", ")", ")", "\n", "self", ".", "scheduler", ".", "step", "(", "eval_score", ")", "\n", "if", "eval_score", ">=", "best_eval_score", ":", "\n", "                ", "best_eval_score", "=", "eval_score", "\n", "if", "epoch", ">=", "3", "or", "pre_trained", ":", "\n", "                    ", "self", ".", "save_model", "(", "epoch", ",", "best_eval_score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.None.videoqa.VideoQA.train": [[105, 142], ["print", "videoqa.VideoQA.model.train", "len", "enumerate", "torch.cat().long().cpu", "torch.cat().long", "torch.sum().numpy", "utils.to_device", "qas.to", "answers.to", "videoqa.VideoQA.model", "videoqa.VideoQA.criterion", "torch.utils.clip_grad_norm_", "videoqa.VideoQA.backward", "time.strftime", "prediction_list.append", "answer_list.append", "videoqa.unk_num", "videoqa.VideoQA.model.parameters", "videoqa.VideoQA.optimizer.step", "videoqa.VideoQA.model.zero_grad", "time.localtime", "print", "videoqa.VideoQA.item", "torch.cat().long", "torch.cat", "torch.sum", "len", "torch.cat", "videoqa.VideoQA.item"], "methods", ["home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.sample_loader.QALoader.train", "home.repos.pwc.inspect_result.doc-doc_hqga.None.utils.to_device", "home.repos.pwc.inspect_result.doc-doc_hqga.None.videoqa.unk_num"], ["", "", "", "", "def", "train", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "print", "(", "'==>Epoch:[{}/{}][lr_rate: {}]'", ".", "format", "(", "epoch", ",", "self", ".", "epoch_num", ",", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", ")", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "total_step", "=", "len", "(", "self", ".", "train_loader", ")", "\n", "epoch_loss", "=", "0.0", "\n", "prediction_list", "=", "[", "]", "\n", "answer_list", "=", "[", "]", "\n", "\n", "for", "iter", ",", "inputs", "in", "enumerate", "(", "self", ".", "train_loader", ")", ":", "\n", "            ", "videos", ",", "qas", ",", "qas_lengths", ",", "answers", ",", "qns_keys", "=", "inputs", "\n", "video_inputs", "=", "to_device", "(", "videos", ",", "self", ".", "device", ")", "\n", "qas_inputs", "=", "qas", ".", "to", "(", "self", ".", "device", ")", "\n", "ans_targets", "=", "answers", ".", "to", "(", "self", ".", "device", ")", "\n", "out", ",", "prediction", ",", "_", "=", "self", ".", "model", "(", "video_inputs", ",", "qas_inputs", ",", "qas_lengths", ")", "\n", "\n", "loss", "=", "self", ".", "criterion", "(", "out", ",", "ans_targets", ")", "\n", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "max_norm", "=", "12", ")", "\n", "loss", "/=", "self", ".", "accu_grad_step", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "(", "iter", "+", "1", ")", "%", "self", ".", "accu_grad_step", "==", "0", "or", "(", "iter", "==", "total_step", ")", ":", "\n", "                ", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "", "cur_time", "=", "time", ".", "strftime", "(", "\"%Y-%m-%d %H:%M:%S\"", ",", "time", ".", "localtime", "(", ")", ")", "\n", "if", "iter", "%", "(", "self", ".", "vis_step", "*", "self", ".", "accu_grad_step", ")", "==", "0", ":", "\n", "                ", "print", "(", "'\\t[{}/{}]-{}-{:.4f}'", ".", "format", "(", "iter", ",", "total_step", ",", "cur_time", ",", "loss", ".", "item", "(", ")", "*", "self", ".", "accu_grad_step", ")", ")", "\n", "", "epoch_loss", "+=", "loss", ".", "item", "(", ")", "*", "self", ".", "accu_grad_step", "\n", "\n", "prediction_list", ".", "append", "(", "prediction", ")", "\n", "answer_list", ".", "append", "(", "answers", ")", "\n", "\n", "", "predict_answers", "=", "torch", ".", "cat", "(", "prediction_list", ",", "dim", "=", "0", ")", ".", "long", "(", ")", ".", "cpu", "(", ")", "\n", "ref_answers", "=", "torch", ".", "cat", "(", "answer_list", ",", "dim", "=", "0", ")", ".", "long", "(", ")", "\n", "acc_num", "=", "torch", ".", "sum", "(", "predict_answers", "==", "ref_answers", ")", ".", "numpy", "(", ")", "\n", "if", "not", "self", ".", "multi_choice", ":", "\n", "            ", "acc_num", "-=", "unk_num", "(", "predict_answers", ",", "ref_answers", ")", "\n", "", "return", "epoch_loss", "/", "total_step", ",", "acc_num", "*", "100.0", "/", "len", "(", "ref_answers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.None.videoqa.VideoQA.eval": [[143, 165], ["print", "videoqa.VideoQA.model.eval", "torch.cat().long().cpu", "torch.cat().long", "torch.sum().numpy", "torch.no_grad", "enumerate", "videoqa.unk_num", "len", "utils.to_device", "qas.to", "videoqa.VideoQA.model", "prediction_list.append", "answer_list.append", "torch.cat().long", "torch.cat", "torch.sum", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.doc-doc_hqga.None.videoqa.VideoQA.eval", "home.repos.pwc.inspect_result.doc-doc_hqga.None.videoqa.unk_num", "home.repos.pwc.inspect_result.doc-doc_hqga.None.utils.to_device"], ["", "def", "eval", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "print", "(", "'==>Epoch:[{}/{}][validation stage]'", ".", "format", "(", "epoch", ",", "self", ".", "epoch_num", ")", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "prediction_list", "=", "[", "]", "\n", "answer_list", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "iter", ",", "inputs", "in", "enumerate", "(", "self", ".", "val_loader", ")", ":", "\n", "                ", "videos", ",", "qas", ",", "qas_lengths", ",", "answers", ",", "qns_keys", "=", "inputs", "\n", "video_inputs", "=", "to_device", "(", "videos", ",", "self", ".", "device", ")", "\n", "qas_inputs", "=", "qas", ".", "to", "(", "self", ".", "device", ")", "\n", "out", ",", "prediction", ",", "_", "=", "self", ".", "model", "(", "video_inputs", ",", "qas_inputs", ",", "qas_lengths", ")", "\n", "\n", "prediction_list", ".", "append", "(", "prediction", ")", "\n", "answer_list", ".", "append", "(", "answers", ")", "\n", "\n", "", "", "predict_answers", "=", "torch", ".", "cat", "(", "prediction_list", ",", "dim", "=", "0", ")", ".", "long", "(", ")", ".", "cpu", "(", ")", "\n", "ref_answers", "=", "torch", ".", "cat", "(", "answer_list", ",", "dim", "=", "0", ")", ".", "long", "(", ")", "\n", "acc_num", "=", "torch", ".", "sum", "(", "predict_answers", "==", "ref_answers", ")", ".", "numpy", "(", ")", "\n", "if", "not", "self", ".", "multi_choice", ":", "\n", "            ", "acc_num", "-=", "unk_num", "(", "predict_answers", ",", "ref_answers", ")", "\n", "\n", "", "return", "acc_num", "*", "100.0", "/", "len", "(", "ref_answers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.None.videoqa.VideoQA.predict": [[167, 207], ["osp.join", "videoqa.VideoQA.build_model", "videoqa.VideoQA.model.eval", "print", "utils.save_file", "videoqa.VideoQA.resume", "torch.load", "videoqa.VideoQA.model.load_state_dict", "torch.no_grad", "enumerate", "len", "utils.to_device", "qas.to", "videoqa.VideoQA.model", "prediction.data.cpu().numpy.data.cpu().numpy.data.cpu().numpy", "answers.numpy.numpy.numpy", "zip", "prediction.data.cpu().numpy.data.cpu().numpy.data.cpu", "int", "int"], "methods", ["home.repos.pwc.inspect_result.doc-doc_hqga.None.videoqa.VideoQA.build_model", "home.repos.pwc.inspect_result.doc-doc_hqga.None.videoqa.VideoQA.eval", "home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.util.save_file", "home.repos.pwc.inspect_result.doc-doc_hqga.None.videoqa.VideoQA.resume", "home.repos.pwc.inspect_result.doc-doc_hqga.None.utils.to_device"], ["", "def", "predict", "(", "self", ",", "model_file", ",", "result_file", ")", ":", "\n", "        ", "\"\"\"\n        predict the answer with the trained model\n        :param model_file:\n        :return:\n        \"\"\"", "\n", "model_path", "=", "osp", ".", "join", "(", "self", ".", "model_dir", ",", "model_file", ")", "\n", "self", ".", "build_model", "(", ")", "\n", "if", "self", ".", "model_type", "in", "[", "'msrvtt'", "]", ":", "\n", "            ", "self", ".", "resume", "(", "model_file", ")", "\n", "", "else", ":", "\n", "            ", "old_state_dict", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "old_state_dict", ")", "\n", "\n", "", "self", ".", "model", ".", "eval", "(", ")", "\n", "results", "=", "{", "}", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "it", ",", "inputs", "in", "enumerate", "(", "self", ".", "val_loader", ")", ":", "\n", "\n", "                ", "videos", ",", "qas", ",", "qas_lengths", ",", "answers", ",", "qns_keys", "=", "inputs", "\n", "\n", "video_inputs", "=", "to_device", "(", "videos", ",", "self", ".", "device", ")", "\n", "qas_inputs", "=", "qas", ".", "to", "(", "self", ".", "device", ")", "\n", "out", ",", "prediction", ",", "vis_graph", "=", "self", ".", "model", "(", "video_inputs", ",", "qas_inputs", ",", "qas_lengths", ")", "\n", "prediction", "=", "prediction", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "answers", "=", "answers", ".", "numpy", "(", ")", "\n", "# with open('vis/nextqa/{}.pkl'.format(str(qns_keys[0])), 'wb') as fp:", "\n", "#         gdata = {}", "\n", "#         for k, dic in vis_graph.items():", "\n", "#             gdata[k] = {}", "\n", "#             for sk, v in dic.items():", "\n", "#                 gdata[k][sk] = v.data.cpu().numpy()", "\n", "#         pkl.dump(gdata, fp)", "\n", "\n", "for", "qid", ",", "pred", ",", "ans", "in", "zip", "(", "qns_keys", ",", "prediction", ",", "answers", ")", ":", "\n", "                    ", "results", "[", "qid", "]", "=", "{", "'prediction'", ":", "int", "(", "pred", ")", ",", "'answer'", ":", "int", "(", "ans", ")", "}", "\n", "\n", "\n", "", "", "", "print", "(", "len", "(", "results", ")", ")", "\n", "save_file", "(", "results", ",", "result_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.None.videoqa.unk_num": [[208, 215], ["range"], "function", ["None"], ["", "", "def", "unk_num", "(", "predictions", ",", "references", ")", ":", "\n", "    ", "num", "=", "predictions", ".", "shape", "[", "0", "]", "\n", "uk_num", "=", "0", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "        ", "if", "predictions", "[", "i", "]", "==", "references", "[", "i", "]", "and", "references", "[", "i", "]", "==", "0", ":", "\n", "            ", "uk_num", "+=", "1", "\n", "", "", "return", "uk_num", "\n", "", ""]], "home.repos.pwc.inspect_result.doc-doc_hqga.None.eval_mc.accuracy_metric": [[6, 55], ["utils.load_file", "utils.load_file.iterrows", "utils.load_file", "group.items", "overall_acc.items", "print", "group_acc.items", "print", "print", "str", "group[].append", "print", "print", "str", "str"], "function", ["home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.util.load_file", "home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.util.load_file"], ["def", "accuracy_metric", "(", "sample_list_file", ",", "result_file", ")", ":", "\n", "\n", "    ", "sample_list", "=", "load_file", "(", "sample_list_file", ")", "\n", "group", "=", "{", "'CW'", ":", "[", "]", ",", "'CH'", ":", "[", "]", ",", "'TN'", ":", "[", "]", ",", "'TC'", ":", "[", "]", ",", "'DC'", ":", "[", "]", ",", "'DL'", ":", "[", "]", ",", "'DO'", ":", "[", "]", "}", "\n", "for", "id", ",", "row", "in", "sample_list", ".", "iterrows", "(", ")", ":", "\n", "        ", "qns_id", "=", "str", "(", "row", "[", "'video'", "]", ")", "+", "'_'", "+", "str", "(", "row", "[", "'qid'", "]", ")", "\n", "qtype", "=", "str", "(", "row", "[", "'type'", "]", ")", "\n", "#(combine temporal qns of previous and next as 'TN')", "\n", "if", "qtype", "==", "'TP'", ":", "qtype", "=", "'TN'", "\n", "group", "[", "qtype", "]", ".", "append", "(", "qns_id", ")", "\n", "\n", "", "preds", "=", "load_file", "(", "result_file", ")", "\n", "group_acc", "=", "{", "'CW'", ":", "0", ",", "'CH'", ":", "0", ",", "'TN'", ":", "0", ",", "'TC'", ":", "0", ",", "'DC'", ":", "0", ",", "'DL'", ":", "0", ",", "'DO'", ":", "0", "}", "\n", "group_cnt", "=", "{", "'CW'", ":", "0", ",", "'CH'", ":", "0", ",", "'TN'", ":", "0", ",", "'TC'", ":", "0", ",", "'DC'", ":", "0", ",", "'DL'", ":", "0", ",", "'DO'", ":", "0", "}", "\n", "overall_acc", "=", "{", "'C'", ":", "0", ",", "'T'", ":", "0", ",", "'D'", ":", "0", "}", "\n", "overall_cnt", "=", "{", "'C'", ":", "0", ",", "'T'", ":", "0", ",", "'D'", ":", "0", "}", "\n", "all_acc", "=", "0", "\n", "all_cnt", "=", "0", "\n", "for", "qtype", ",", "qns_ids", "in", "group", ".", "items", "(", ")", ":", "\n", "        ", "cnt", "=", "0", "\n", "acc", "=", "0", "\n", "for", "qid", "in", "qns_ids", ":", "\n", "\n", "            ", "cnt", "+=", "1", "\n", "answer", "=", "preds", "[", "qid", "]", "[", "'answer'", "]", "\n", "pred", "=", "preds", "[", "qid", "]", "[", "'prediction'", "]", "\n", "\n", "if", "answer", "==", "pred", ":", "\n", "                ", "acc", "+=", "1", "\n", "\n", "", "", "group_cnt", "[", "qtype", "]", "=", "cnt", "\n", "group_acc", "[", "qtype", "]", "+=", "acc", "\n", "overall_acc", "[", "qtype", "[", "0", "]", "]", "+=", "acc", "\n", "overall_cnt", "[", "qtype", "[", "0", "]", "]", "+=", "cnt", "\n", "all_acc", "+=", "acc", "\n", "all_cnt", "+=", "cnt", "\n", "\n", "\n", "", "for", "qtype", ",", "value", "in", "overall_acc", ".", "items", "(", ")", ":", "\n", "        ", "group_acc", "[", "qtype", "]", "=", "value", "\n", "group_cnt", "[", "qtype", "]", "=", "overall_cnt", "[", "qtype", "]", "\n", "\n", "", "for", "qtype", "in", "group_acc", ":", "\n", "        ", "print", "(", "map_name", "[", "qtype", "]", ",", "end", "=", "'\\t'", ")", "\n", "", "print", "(", "''", ")", "\n", "for", "qtype", ",", "acc", "in", "group_acc", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "'{:.2f}'", ".", "format", "(", "acc", "*", "100.0", "/", "group_cnt", "[", "qtype", "]", ")", ",", "end", "=", "'\\t'", ")", "\n", "", "print", "(", "''", ")", "\n", "print", "(", "'Acc: {:.2f}'", ".", "format", "(", "all_acc", "*", "100.0", "/", "all_cnt", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.None.eval_mc.main": [[57, 64], ["os.join", "print", "eval_mc.accuracy_metric"], "function", ["home.repos.pwc.inspect_result.doc-doc_hqga.None.eval_mc.accuracy_metric"], ["", "def", "main", "(", "result_file", ",", "dataset_dir", ",", "mode", "=", "'val'", ")", ":", "\n", "# dataset_dir = 'dataset/nextqa/'", "\n", "    ", "data_set", "=", "mode", "\n", "sample_list_file", "=", "osp", ".", "join", "(", "dataset_dir", ",", "data_set", "+", "'.csv'", ")", "\n", "print", "(", "'Evaluating {}'", ".", "format", "(", "result_file", ")", ")", "\n", "\n", "accuracy_metric", "(", "sample_list_file", ",", "result_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.None.build_vocab.Vocabulary.__init__": [[11, 15], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "word2idx", "=", "{", "}", "\n", "self", ".", "idx2word", "=", "{", "}", "\n", "self", ".", "idx", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.None.build_vocab.Vocabulary.add_word": [[16, 21], ["None"], "methods", ["None"], ["", "def", "add_word", "(", "self", ",", "word", ")", ":", "\n", "        ", "if", "not", "word", "in", "self", ".", "word2idx", ":", "\n", "            ", "self", ".", "word2idx", "[", "word", "]", "=", "self", ".", "idx", "\n", "self", ".", "idx2word", "[", "self", ".", "idx", "]", "=", "word", "\n", "self", ".", "idx", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.None.build_vocab.Vocabulary.__call__": [[22, 26], ["None"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "word", ")", ":", "\n", "        ", "if", "not", "word", "in", "self", ".", "word2idx", ":", "\n", "            ", "return", "self", ".", "word2idx", "[", "'<unk>'", "]", "\n", "", "return", "self", ".", "word2idx", "[", "word", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.None.build_vocab.Vocabulary.__len__": [[27, 29], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "word2idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.None.build_vocab.build_vocab": [[31, 63], ["utils.load_file", "print", "collections.Counter", "zip", "sorted", "utils.save_file", "print", "build_vocab.Vocabulary", "build_vocab.Vocabulary.add_word", "build_vocab.Vocabulary.add_word", "build_vocab.Vocabulary.add_word", "build_vocab.Vocabulary.add_word", "enumerate", "len", "ans.translate.translate", "nltk.tokenize.word_tokenize", "sorted.update", "sorted.items", "dict", "len", "build_vocab.Vocabulary.add_word", "str", "str", "ans.translate.maketrans", "ans.translate.lower"], "function", ["home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.util.load_file", "home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.util.save_file", "home.repos.pwc.inspect_result.doc-doc_hqga.None.build_vocab.Vocabulary.add_word", "home.repos.pwc.inspect_result.doc-doc_hqga.None.build_vocab.Vocabulary.add_word", "home.repos.pwc.inspect_result.doc-doc_hqga.None.build_vocab.Vocabulary.add_word", "home.repos.pwc.inspect_result.doc-doc_hqga.None.build_vocab.Vocabulary.add_word", "home.repos.pwc.inspect_result.doc-doc_hqga.None.build_vocab.Vocabulary.add_word"], ["", "", "def", "build_vocab", "(", "anno_file", ",", "threshold", ")", ":", "\n", "    ", "\"\"\"Build a simple vocabulary wrapper.\"\"\"", "\n", "\n", "annos", "=", "load_file", "(", "anno_file", ")", "\n", "print", "(", "'total QA pairs'", ",", "len", "(", "annos", ")", ")", "\n", "counter", "=", "Counter", "(", ")", "\n", "\n", "for", "(", "qns", ",", "ans", ")", "in", "zip", "(", "annos", "[", "'question'", "]", ",", "annos", "[", "'answer'", "]", ")", ":", "\n", "        ", "qns", ",", "ans", "=", "str", "(", "qns", ")", ",", "str", "(", "ans", ")", "\n", "# text = qns # qns +' ' +ans", "\n", "# qns = qns.translate(qns.maketrans('', '', string.punctuation))", "\n", "ans", "=", "ans", ".", "translate", "(", "ans", ".", "maketrans", "(", "''", ",", "''", ",", "string", ".", "punctuation", ")", ")", "\n", "# text = qns + ' ' + ans", "\n", "\n", "tokens", "=", "nltk", ".", "tokenize", ".", "word_tokenize", "(", "ans", ".", "lower", "(", ")", ")", "\n", "counter", ".", "update", "(", "tokens", ")", "\n", "\n", "", "counter", "=", "sorted", "(", "counter", ".", "items", "(", ")", ",", "key", "=", "lambda", "item", ":", "item", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "save_file", "(", "dict", "(", "counter", ")", ",", "'dataset/msvd/ans_count_train.json'", ")", "\n", "# If the word frequency is less than 'threshold', then the word is discarded.", "\n", "words", "=", "[", "item", "[", "0", "]", "for", "item", "in", "counter", "if", "item", "[", "1", "]", ">=", "threshold", "]", "\n", "print", "(", "len", "(", "words", ")", ")", "\n", "# Create a vocab wrapper and add some special tokens.", "\n", "vocab", "=", "Vocabulary", "(", ")", "\n", "vocab", ".", "add_word", "(", "'<pad>'", ")", "\n", "vocab", ".", "add_word", "(", "'<start>'", ")", "\n", "vocab", ".", "add_word", "(", "'<end>'", ")", "\n", "vocab", ".", "add_word", "(", "'<unk>'", ")", "\n", "# Add the words to the vocabulary.", "\n", "for", "i", ",", "word", "in", "enumerate", "(", "words", ")", ":", "\n", "        ", "vocab", ".", "add_word", "(", "word", ")", "\n", "", "return", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.None.build_vocab.main": [[65, 72], ["build_vocab.build_vocab", "print", "print", "open", "pickle.dump", "len"], "function", ["home.repos.pwc.inspect_result.doc-doc_hqga.None.build_vocab.build_vocab"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "vocab", "=", "build_vocab", "(", "args", ".", "caption_path", ",", "args", ".", "threshold", ")", "\n", "vocab_path", "=", "args", ".", "vocab_path", "\n", "with", "open", "(", "vocab_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "vocab", ",", "f", ")", "\n", "", "print", "(", "\"Total vocabulary size: {}\"", ".", "format", "(", "len", "(", "vocab", ")", ")", ")", "\n", "print", "(", "\"Saved the vocabulary wrapper to '{}'\"", ".", "format", "(", "vocab_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.None.main_qa.main": [[9, 63], ["utils.pkload", "dataloader.QALoader", "dataloader.QALoader.run", "videoqa.VideoQA", "videoqa.VideoQA.predict", "videoqa.VideoQA.run", "eval_oe.main", "eval_mc.main"], "function", ["home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.util.pkload", "home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.sample_loader.QALoader.run", "home.repos.pwc.inspect_result.doc-doc_hqga.None.videoqa.VideoQA.predict", "home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.sample_loader.QALoader.run", "home.repos.pwc.inspect_result.doc-doc_hqga.None.main_qa.main", "home.repos.pwc.inspect_result.doc-doc_hqga.None.main_qa.main"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "mode", "=", "args", ".", "mode", "\n", "if", "mode", "==", "'train'", ":", "\n", "        ", "batch_size", "=", "64", "\n", "num_worker", "=", "4", "\n", "", "else", ":", "\n", "        ", "batch_size", "=", "64", "\n", "num_worker", "=", "4", "\n", "", "dataset", "=", "'msvd'", "#nextqa, msrvtt,tgifqa", "\n", "task", "=", "''", "#if tgifqa, set task to 'action', 'transition', 'frameqa'", "\n", "multi_choice", "=", "False", "# True for nextqa and tgifqa-action(transition)", "\n", "use_bert", "=", "True", "\n", "spatial", "=", "True", "\n", "if", "spatial", ":", "\n", "        ", "video_feature_path", "=", "'../data/{}/{}/'", ".", "format", "(", "dataset", ",", "task", ")", "\n", "video_feature_cache", "=", "'../data/{}/{}/'", ".", "format", "(", "dataset", ",", "task", ")", "\n", "", "else", ":", "\n", "        ", "video_feature_path", "=", "'../data/{}/'", ".", "format", "(", "dataset", ")", "\n", "video_feature_cache", "=", "'../data/{}/cache_resnetnext32/'", ".", "format", "(", "dataset", ")", "\n", "\n", "", "sample_list_path", "=", "'dataset/{}/{}/'", ".", "format", "(", "dataset", ",", "task", ")", "\n", "vocab", "=", "pkload", "(", "'dataset/{}/{}/vocab.pkl'", ".", "format", "(", "dataset", ",", "task", ")", ")", "\n", "\n", "glove_embed", "=", "'dataset/{}/{}/glove_embed.npy'", ".", "format", "(", "dataset", ",", "task", ")", "\n", "checkpoint_path", "=", "'models/{}/{}'", ".", "format", "(", "dataset", ",", "task", ")", "\n", "model_type", "=", "'HQGA'", "\n", "model_prefix", "=", "'bert-8c10b-2L05GCN-FCV-AC-VM'", "\n", "\n", "vis_step", "=", "200", "\n", "lr_rate", "=", "1e-4", "\n", "epoch_num", "=", "50", "\n", "grad_accu_steps", "=", "1", "\n", "\n", "data_loader", "=", "dataloader", ".", "QALoader", "(", "batch_size", ",", "num_worker", ",", "video_feature_path", ",", "video_feature_cache", ",", "\n", "sample_list_path", ",", "vocab", ",", "multi_choice", ",", "use_bert", ",", "True", ",", "False", ")", "\n", "\n", "train_loader", ",", "val_loader", "=", "data_loader", ".", "run", "(", "mode", "=", "mode", ")", "\n", "vqa", "=", "VideoQA", "(", "vocab", ",", "train_loader", ",", "val_loader", ",", "glove_embed", ",", "checkpoint_path", ",", "model_type", ",", "model_prefix", ",", "\n", "vis_step", ",", "lr_rate", ",", "batch_size", ",", "epoch_num", ",", "grad_accu_steps", ",", "use_bert", ",", "multi_choice", ")", "\n", "\n", "ep", "=", "2", "\n", "acc", "=", "39.59", "\n", "model_file", "=", "f'{model_type}-{model_prefix}-{ep}-{acc:.2f}.ckpt'", "\n", "\n", "if", "mode", "!=", "'train'", ":", "\n", "        ", "result_file", "=", "f'results/{dataset}/{task}/{model_type}-{model_prefix}-{mode}.json'", "\n", "vqa", ".", "predict", "(", "model_file", ",", "result_file", ")", "\n", "if", "multi_choice", "==", "False", ":", "\n", "            ", "eval_oe", ".", "main", "(", "result_file", ",", "sample_list_path", ",", "mode", ")", "\n", "", "else", ":", "\n", "            ", "eval_mc", ".", "main", "(", "result_file", ",", "sample_list_path", ",", "mode", ")", "\n", "", "", "else", ":", "\n", "        ", "model_file", "=", "f'{model_type}-{model_prefix}-6-39.28.ckpt'", "\n", "vqa", ".", "run", "(", "model_file", ",", "pre_trained", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.None.utils.set_gpu_devices": [[13, 18], ["str"], "function", ["None"], ["def", "set_gpu_devices", "(", "gpu_id", ")", ":", "\n", "    ", "gpu", "=", "''", "\n", "if", "gpu_id", "!=", "-", "1", ":", "\n", "        ", "gpu", "=", "str", "(", "gpu_id", ")", "\n", "", "os", ".", "environ", "[", "'CUDA_VOSIBLE_DEVICES'", "]", "=", "gpu", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.None.utils.load_file": [[25, 45], ["os.exists", "print", "pandas.read_csv", "open", "os.splitext", "fp.readlines", "os.splitext", "c.rstrip", "json.load", "os.splitext"], "function", ["None"], ["def", "load_file", "(", "filename", ")", ":", "\n", "    ", "\"\"\"\n    load obj from filename\n    :param filename:\n    :return:\n    \"\"\"", "\n", "cont", "=", "None", "\n", "if", "not", "osp", ".", "exists", "(", "filename", ")", ":", "\n", "        ", "print", "(", "'{} not exist'", ".", "format", "(", "filename", ")", ")", "\n", "return", "cont", "\n", "", "if", "osp", ".", "splitext", "(", "filename", ")", "[", "-", "1", "]", "==", "'.csv'", ":", "\n", "# return pd.read_csv(filename, delimiter= '\\t', index_col=0)", "\n", "        ", "return", "pd", ".", "read_csv", "(", "filename", ",", "delimiter", "=", "','", ")", "\n", "", "with", "open", "(", "filename", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "if", "osp", ".", "splitext", "(", "filename", ")", "[", "1", "]", "==", "'.txt'", ":", "\n", "            ", "cont", "=", "fp", ".", "readlines", "(", ")", "\n", "cont", "=", "[", "c", ".", "rstrip", "(", "'\\n'", ")", "for", "c", "in", "cont", "]", "\n", "", "elif", "osp", ".", "splitext", "(", "filename", ")", "[", "1", "]", "==", "'.json'", ":", "\n", "            ", "cont", "=", "json", ".", "load", "(", "fp", ")", "\n", "", "", "return", "cont", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.None.utils.save_file": [[46, 59], ["os.dirname", "os.makedirs", "os.makedirs", "os.exists", "open", "json.dump"], "function", ["None"], ["", "def", "save_file", "(", "obj", ",", "filename", ")", ":", "\n", "    ", "\"\"\"\n    save obj to filename\n    :param obj:\n    :param filename:\n    :return:\n    \"\"\"", "\n", "filepath", "=", "osp", ".", "dirname", "(", "filename", ")", "\n", "if", "filepath", "!=", "''", "and", "not", "osp", ".", "exists", "(", "filepath", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "filepath", ")", "\n", "", "else", ":", "\n", "        ", "with", "open", "(", "filename", ",", "'w'", ")", "as", "fp", ":", "\n", "            ", "json", ".", "dump", "(", "obj", ",", "fp", ",", "indent", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.None.utils.pkload": [[60, 67], ["os.exists", "os.getsize", "open", "pickle.load"], "function", ["None"], ["", "", "", "def", "pkload", "(", "file", ")", ":", "\n", "    ", "data", "=", "None", "\n", "if", "osp", ".", "exists", "(", "file", ")", "and", "osp", ".", "getsize", "(", "file", ")", ">", "0", ":", "\n", "        ", "with", "open", "(", "file", ",", "'rb'", ")", "as", "fp", ":", "\n", "            ", "data", "=", "pkl", ".", "load", "(", "fp", ")", "\n", "# print('{} does not exist'.format(file))", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.None.utils.pkdump": [[69, 75], ["os.dirname", "os.exists", "os.makedirs", "os.makedirs", "open", "pickle.dump"], "function", ["None"], ["", "def", "pkdump", "(", "data", ",", "file", ")", ":", "\n", "    ", "dirname", "=", "osp", ".", "dirname", "(", "file", ")", "\n", "if", "not", "osp", ".", "exists", "(", "dirname", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dirname", ")", "\n", "", "with", "open", "(", "file", ",", "'wb'", ")", "as", "fp", ":", "\n", "        ", "pkl", ".", "dump", "(", "data", ",", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.None.utils.to_device": [[77, 82], ["isinstance", "videos.to", "v.to"], "function", ["None"], ["", "", "def", "to_device", "(", "videos", ",", "device", ")", ":", "\n", "    ", "if", "isinstance", "(", "videos", ",", "list", ")", ":", "\n", "        ", "return", "[", "v", ".", "to", "(", "device", ")", "for", "v", "in", "videos", "]", "\n", "", "else", ":", "\n", "        ", "return", "videos", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.sample_loader.VideoQADataset.__init__": [[15, 75], ["os.join", "util.load_file", "os.join", "util.load_file", "print", "os.join", "os.join", "os.join", "print", "os.join", "print", "os.join", "print", "h5py.File", "print", "enumerate", "h5py.File", "print", "enumerate", "h5py.File", "print", "enumerate", "len", "zip", "zip", "zip", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.util.load_file", "home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.util.load_file"], ["def", "__init__", "(", "self", ",", "video_feature_path", ",", "video_feature_cache", ",", "sample_list_path", ",", "\n", "vocab", ",", "multi_choice", ",", "use_bert", ",", "mode", ")", ":", "\n", "        ", "self", ".", "video_feature_path", "=", "video_feature_path", "\n", "self", ".", "vocab", "=", "vocab", "\n", "\n", "sample_list_file", "=", "osp", ".", "join", "(", "sample_list_path", ",", "'{}.csv'", ".", "format", "(", "mode", ")", ")", "\n", "self", ".", "sample_list", "=", "load_file", "(", "sample_list_file", ")", "\n", "self", ".", "video_feature_cache", "=", "video_feature_cache", "\n", "self", ".", "max_qa_length", "=", "20", "#20 for MSRVTT, MSVD, TGIF-QA Trans & Action, 37 for nextqa", "\n", "self", ".", "use_bbox", "=", "True", "\n", "self", ".", "bbox_num", "=", "10", "#20 for NExT-QA, 10 for others", "\n", "self", ".", "use_bert", "=", "use_bert", "\n", "self", ".", "use_frame", "=", "True", "\n", "self", ".", "use_mot", "=", "True", "\n", "self", ".", "multi_choice", "=", "multi_choice", "\n", "if", "not", "self", ".", "multi_choice", ":", "\n", "            ", "ans_path", "=", "osp", ".", "join", "(", "sample_list_path", ",", "'ans_word.json'", ")", "\n", "ans_set", "=", "load_file", "(", "ans_path", ")", "\n", "self", ".", "ans_set", "=", "[", "'<unk>'", "]", "+", "ans_set", "#index 0 is reserved for out-of-vocab answer", "\n", "print", "(", "'ans size: {}'", ".", "format", "(", "len", "(", "self", ".", "ans_set", ")", ")", ")", "\n", "\n", "", "if", "self", ".", "use_bert", ":", "\n", "            ", "bert_path", "=", "osp", ".", "join", "(", "self", ".", "video_feature_path", ",", "'qas_bert'", ")", "\n", "self", ".", "bert_file", "=", "osp", ".", "join", "(", "bert_path", ",", "'bert_ft_{}.h5'", ".", "format", "(", "mode", ")", ")", "\n", "\n", "", "if", "self", ".", "use_bbox", ":", "\n", "            ", "bbox_feat_file", "=", "osp", ".", "join", "(", "self", ".", "video_feature_path", ",", "'region_feat_n/region_8c10b_{}.h5'", ".", "format", "(", "mode", ")", ")", "\n", "print", "(", "'Load {}...'", ".", "format", "(", "bbox_feat_file", ")", ")", "\n", "\n", "self", ".", "bbox_feats", "=", "{", "}", "\n", "with", "h5py", ".", "File", "(", "bbox_feat_file", ",", "'r'", ")", "as", "fp", ":", "\n", "                ", "vids", "=", "fp", "[", "'ids'", "]", "\n", "feats", "=", "fp", "[", "'feat'", "]", "\n", "print", "(", "feats", ".", "shape", ")", "#v_num, clip_num, frame_per_clip, region_per_frame, feat_dim", "\n", "bboxes", "=", "fp", "[", "'bbox'", "]", "\n", "for", "id", ",", "(", "vid", ",", "feat", ",", "bbox", ")", "in", "enumerate", "(", "zip", "(", "vids", ",", "feats", ",", "bboxes", ")", ")", ":", "\n", "                    ", "self", ".", "bbox_feats", "[", "str", "(", "vid", ")", "]", "=", "(", "feat", "[", ":", ",", ":", ",", ":", "self", ".", "bbox_num", ",", ":", "]", ",", "bbox", "[", ":", ",", ":", ",", ":", "self", ".", "bbox_num", ",", ":", "]", ")", "#(clip, frame, bbox, feat), (clip, frame, bbox, coord)", "\n", "\n", "", "", "", "if", "self", ".", "use_frame", ":", "\n", "            ", "app_feat_file", "=", "osp", ".", "join", "(", "video_feature_path", ",", "'frame_feat/app_feat_{}.h5'", ".", "format", "(", "mode", ")", ")", "\n", "print", "(", "'Load {}...'", ".", "format", "(", "app_feat_file", ")", ")", "\n", "self", ".", "frame_feats", "=", "{", "}", "\n", "with", "h5py", ".", "File", "(", "app_feat_file", ",", "'r'", ")", "as", "fp", ":", "\n", "                ", "vids", "=", "fp", "[", "'ids'", "]", "\n", "feats", "=", "fp", "[", "'resnet_features'", "]", "\n", "print", "(", "feats", ".", "shape", ")", "#v_num, clip_num, frame_per_clip, feat_dim", "\n", "for", "id", ",", "(", "vid", ",", "feat", ")", "in", "enumerate", "(", "zip", "(", "vids", ",", "feats", ")", ")", ":", "\n", "#self.frame_feats[str(vid)] = feat[::2]", "\n", "                    ", "self", ".", "frame_feats", "[", "str", "(", "vid", ")", "]", "=", "feat", "\n", "\n", "", "", "", "if", "self", ".", "use_mot", ":", "\n", "            ", "mot_feat_file", "=", "osp", ".", "join", "(", "video_feature_path", ",", "'mot_feat/mot_feat_{}.h5'", ".", "format", "(", "mode", ")", ")", "\n", "print", "(", "'Load {}...'", ".", "format", "(", "mot_feat_file", ")", ")", "\n", "self", ".", "mot_feats", "=", "{", "}", "\n", "with", "h5py", ".", "File", "(", "mot_feat_file", ",", "'r'", ")", "as", "fp", ":", "\n", "                ", "vids", "=", "fp", "[", "'ids'", "]", "\n", "feats", "=", "fp", "[", "'resnext_features'", "]", "\n", "print", "(", "feats", ".", "shape", ")", "#v_num, clip_num, feat_dim", "\n", "for", "id", ",", "(", "vid", ",", "feat", ")", "in", "enumerate", "(", "zip", "(", "vids", ",", "feats", ")", ")", ":", "\n", "                    ", "self", ".", "mot_feats", "[", "str", "(", "vid", ")", "]", "=", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.sample_loader.VideoQADataset.__len__": [[76, 78], ["len"], "methods", ["None"], ["", "", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sample_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.sample_loader.VideoQADataset.get_video_feature": [[79, 111], ["torch.from_numpy().type", "util.transform_bb", "torch.from_numpy().type", "torch.cat", "video_feature.append", "torch.from_numpy().type", "video_feature.append", "torch.from_numpy().type", "video_feature.append", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.util.transform_bb"], ["", "def", "get_video_feature", "(", "self", ",", "video_name", ",", "width", "=", "1", ",", "height", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        :param video_name:\n        :param width:\n        :param height:\n        :return:\n        \"\"\"", "\n", "video_feature", "=", "[", "]", "\n", "if", "self", ".", "use_bbox", ":", "\n", "            ", "roi_feat", "=", "self", ".", "bbox_feats", "[", "video_name", "]", "[", "0", "]", "\n", "roi_feat", "=", "torch", ".", "from_numpy", "(", "roi_feat", ")", ".", "type", "(", "torch", ".", "float32", ")", "\n", "roi_bbox", "=", "self", ".", "bbox_feats", "[", "video_name", "]", "[", "1", "]", "\n", "\n", "bbox_feat", "=", "transform_bb", "(", "roi_bbox", ",", "width", ",", "height", ")", "\n", "bbox_feat", "=", "torch", ".", "from_numpy", "(", "bbox_feat", ")", ".", "type", "(", "torch", ".", "float32", ")", "\n", "\n", "region_feat", "=", "torch", ".", "cat", "(", "(", "roi_feat", ",", "bbox_feat", ")", ",", "dim", "=", "-", "1", ")", "\n", "video_feature", ".", "append", "(", "region_feat", ")", "\n", "\n", "", "if", "self", ".", "use_frame", ":", "\n", "\n", "            ", "temp_feat", "=", "self", ".", "frame_feats", "[", "video_name", "]", "\n", "app_feat", "=", "torch", ".", "from_numpy", "(", "temp_feat", ")", ".", "type", "(", "torch", ".", "float32", ")", "\n", "video_feature", ".", "append", "(", "app_feat", ")", "\n", "\n", "\n", "", "if", "self", ".", "use_mot", ":", "\n", "            ", "temp_feat", "=", "self", ".", "mot_feats", "[", "video_name", "]", "\n", "mot_feat", "=", "torch", ".", "from_numpy", "(", "temp_feat", ")", ".", "type", "(", "torch", ".", "float32", ")", "\n", "video_feature", ".", "append", "(", "mot_feat", ")", "\n", "\n", "", "return", "video_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.sample_loader.VideoQADataset.get_word_idx": [[112, 124], ["nltk.tokenize.word_tokenize", "str().lower", "sample_loader.VideoQADataset.vocab", "enumerate", "str"], "methods", ["None"], ["", "def", "get_word_idx", "(", "self", ",", "text", ",", "mode", "=", "'q'", ")", ":", "\n", "        ", "\"\"\"\n        convert relation to index sequence\n        :param relation:\n        :return:\n        \"\"\"", "\n", "thd", "=", "25", "#13 ", "\n", "#thd = 13 if mode=='q' else 4 #20 for frameqa #25", "\n", "tokens", "=", "nltk", ".", "tokenize", ".", "word_tokenize", "(", "str", "(", "text", ")", ".", "lower", "(", ")", ")", "\n", "token_ids", "=", "[", "self", ".", "vocab", "(", "token", ")", "for", "i", ",", "token", "in", "enumerate", "(", "tokens", ")", "if", "i", "<", "thd", "]", "\n", "\n", "return", "token_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.sample_loader.VideoQADataset.get_Trans_matrix": [[125, 133], ["torch.zeros().long", "range", "len", "torch.Tensor", "torch.zeros"], "methods", ["None"], ["", "def", "get_Trans_matrix", "(", "self", ",", "candidates", ")", ":", "\n", "        ", "qa_lengths", "=", "[", "len", "(", "qa", ")", "for", "qa", "in", "candidates", "]", "\n", "candidates_matrix", "=", "torch", ".", "zeros", "(", "[", "5", ",", "self", ".", "max_qa_length", "]", ")", ".", "long", "(", ")", "\n", "for", "k", "in", "range", "(", "5", ")", ":", "\n", "            ", "sentence", "=", "candidates", "[", "k", "]", "\n", "candidates_matrix", "[", "k", ",", ":", "qa_lengths", "[", "k", "]", "]", "=", "torch", ".", "Tensor", "(", "sentence", ")", "\n", "\n", "", "return", "candidates_matrix", ",", "qa_lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.sample_loader.VideoQADataset.get_multi_choice_sample": [[134, 161], ["range", "sample_loader.VideoQADataset.get_Trans_matrix", "str", "str", "int", "str", "int", "int", "torch.from_numpy().type.append", "range", "sample_loader.VideoQADataset.get_word_idx", "sample_loader.VideoQADataset.vocab", "sample_loader.VideoQADataset.get_word_idx", "h5py.File", "torch.from_numpy().type", "sample_loader.nozero_row", "qa_lengths.append", "sample_loader.VideoQADataset.vocab", "sample_loader.VideoQADataset.vocab", "str", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.sample_loader.VideoQADataset.get_Trans_matrix", "home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.sample_loader.VideoQADataset.get_word_idx", "home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.sample_loader.VideoQADataset.get_word_idx", "home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.sample_loader.nozero_row"], ["", "def", "get_multi_choice_sample", "(", "self", ",", "idx", ")", ":", "\n", "        ", "cur_sample", "=", "self", ".", "sample_list", ".", "loc", "[", "idx", "]", "\n", "vid", ",", "qid", "=", "'video'", ",", "'qid'", "\n", "\n", "video_name", ",", "qns", ",", "ans", ",", "qid", "=", "str", "(", "cur_sample", "[", "vid", "]", ")", ",", "str", "(", "cur_sample", "[", "'question'", "]", ")", ",", "int", "(", "cur_sample", "[", "'answer'", "]", ")", ",", "str", "(", "cur_sample", "[", "qid", "]", ")", "\n", "width", ",", "height", "=", "int", "(", "cur_sample", "[", "'width'", "]", ")", ",", "int", "(", "cur_sample", "[", "'height'", "]", ")", "\n", "candidate_qas", "=", "[", "]", "\n", "qns2ids", "=", "[", "self", ".", "vocab", "(", "'<start>'", ")", "]", "+", "self", ".", "get_word_idx", "(", "qns", ")", "+", "[", "self", ".", "vocab", "(", "'<end>'", ")", "]", "\n", "for", "id", "in", "range", "(", "5", ")", ":", "\n", "            ", "cand_ans", "=", "cur_sample", "[", "'a'", "+", "str", "(", "id", ")", "]", "\n", "ans2id", "=", "self", ".", "get_word_idx", "(", "cand_ans", ",", "'a'", ")", "+", "[", "self", ".", "vocab", "(", "'<end>'", ")", "]", "\n", "candidate_qas", ".", "append", "(", "qns2ids", "+", "ans2id", ")", "\n", "\n", "", "candidate_qas", ",", "qa_lengths", "=", "self", ".", "get_Trans_matrix", "(", "candidate_qas", ")", "\n", "if", "self", ".", "use_bert", ":", "\n", "            ", "with", "h5py", ".", "File", "(", "self", ".", "bert_file", ",", "'r'", ")", "as", "fp", ":", "\n", "                ", "temp_feat", "=", "fp", "[", "'feat'", "]", "[", "idx", "]", "\n", "candidate_qas", "=", "torch", ".", "from_numpy", "(", "temp_feat", ")", ".", "type", "(", "torch", ".", "float32", ")", "\n", "", "qa_lengths", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "                ", "valid_row", "=", "nozero_row", "(", "candidate_qas", "[", "i", "]", ")", "\n", "assert", "valid_row", "!=", "0", ",", "f'{video_name}, {qid}'", "\n", "# if valid_row != qa_lengths[i]:", "\n", "qa_lengths", ".", "append", "(", "valid_row", ")", "\n", "", "", "qns_key", "=", "video_name", "+", "'_'", "+", "qid", "\n", "return", "video_name", ",", "candidate_qas", ",", "qa_lengths", ",", "ans", ",", "qns_key", ",", "width", ",", "height", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.sample_loader.VideoQADataset.__getitem__": [[163, 193], ["sample_loader.VideoQADataset.get_video_feature", "torch.tensor", "sample_loader.VideoQADataset.get_multi_choice_sample", "sample_loader.VideoQADataset.get_word_idx", "len", "str", "str", "str", "str", "str", "sample_loader.nozero_row", "sample_loader.VideoQADataset.ans_set.index", "h5py.File", "torch.from_numpy().type", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.sample_loader.VideoQADataset.get_video_feature", "home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.sample_loader.VideoQADataset.get_multi_choice_sample", "home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.sample_loader.VideoQADataset.get_word_idx", "home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.sample_loader.nozero_row"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        return an item from data list as tuple (video, relation)\n        :param idx:\n        :return:\n                -video: torch tensor (nframe, nbbox, feat)\n                -relation: torch tensor of variable length\n        \"\"\"", "\n", "if", "self", ".", "multi_choice", ":", "\n", "            ", "video_name", ",", "candidate_qas", ",", "qa_lengths", ",", "ans_idx", ",", "qns_key", ",", "width", ",", "height", "=", "self", ".", "get_multi_choice_sample", "(", "idx", ")", "\n", "", "else", ":", "\n", "            ", "cur_sample", "=", "self", ".", "sample_list", ".", "loc", "[", "idx", "]", "\n", "video_name", ",", "qns", ",", "ans", ",", "qid", "=", "str", "(", "cur_sample", "[", "'video'", "]", ")", ",", "str", "(", "cur_sample", "[", "'question'", "]", ")", ",", "str", "(", "cur_sample", "[", "'answer'", "]", ")", ",", "str", "(", "cur_sample", "[", "'qid'", "]", ")", "\n", "# width, height = 320, 240 #msrvtt", "\n", "width", ",", "height", "=", "cur_sample", "[", "'width'", "]", ",", "cur_sample", "[", "'height'", "]", "\n", "candidate_qas", "=", "self", ".", "get_word_idx", "(", "qns", ")", "\n", "qa_lengths", "=", "len", "(", "candidate_qas", ")", "\n", "if", "self", ".", "use_bert", ":", "\n", "                ", "with", "h5py", ".", "File", "(", "self", ".", "bert_file", ",", "'r'", ")", "as", "fp", ":", "\n", "                    ", "temp_feat", "=", "fp", "[", "'feat'", "]", "[", "idx", "]", "\n", "candidate_qas", "=", "torch", ".", "from_numpy", "(", "temp_feat", ")", ".", "type", "(", "torch", ".", "float32", ")", "\n", "", "qa_lengths", "=", "nozero_row", "(", "candidate_qas", ")", "\n", "", "ans_idx", "=", "self", ".", "ans_set", ".", "index", "(", "ans", ")", "if", "ans", "in", "self", ".", "ans_set", "else", "0", "\n", "qns_key", "=", "str", "(", "qid", ")", "\n", "\n", "", "video_feature", "=", "self", ".", "get_video_feature", "(", "video_name", ",", "width", ",", "height", ")", "\n", "qa_lengths", "=", "torch", ".", "tensor", "(", "qa_lengths", ")", "\n", "\n", "return", "video_feature", ",", "candidate_qas", ",", "qa_lengths", ",", "ans_idx", ",", "qns_key", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.sample_loader.QALoader.__init__": [[205, 217], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "num_worker", ",", "video_feature_path", ",", "video_feature_cache", ",", "\n", "sample_list_path", ",", "vocab", ",", "multi_choice", ",", "use_bert", ",", "train_shuffle", "=", "True", ",", "val_shuffle", "=", "False", ")", ":", "\n", "        ", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "num_worker", "=", "num_worker", "\n", "self", ".", "video_feature_path", "=", "video_feature_path", "\n", "self", ".", "video_feature_cache", "=", "video_feature_cache", "\n", "self", ".", "sample_list_path", "=", "sample_list_path", "\n", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "use_bert", "=", "use_bert", "\n", "self", ".", "multi_choice", "=", "multi_choice", "\n", "self", ".", "train_shuffle", "=", "train_shuffle", "\n", "self", ".", "val_shuffle", "=", "val_shuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.sample_loader.QALoader.run": [[218, 226], ["sample_loader.QALoader.validate", "sample_loader.QALoader.train", "sample_loader.QALoader.validate"], "methods", ["home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.sample_loader.QALoader.validate", "home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.sample_loader.QALoader.train", "home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.sample_loader.QALoader.validate"], ["", "def", "run", "(", "self", ",", "mode", "=", "''", ")", ":", "\n", "        ", "if", "mode", "!=", "'train'", ":", "\n", "            ", "train_loader", "=", "''", "\n", "val_loader", "=", "self", ".", "validate", "(", "mode", ")", "\n", "", "else", ":", "\n", "            ", "train_loader", "=", "self", ".", "train", "(", "'train'", ")", "\n", "val_loader", "=", "self", ".", "validate", "(", "'val'", ")", "\n", "", "return", "train_loader", ",", "val_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.sample_loader.QALoader.train": [[227, 250], ["sample_loader.VideoQADataset", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "mode", ")", ":", "\n", "# print(\"Now in train\")", "\n", "        ", "training_set", "=", "VideoQADataset", "(", "self", ".", "video_feature_path", ",", "self", ".", "video_feature_cache", ",", "self", ".", "sample_list_path", ",", "\n", "self", ".", "vocab", ",", "self", ".", "multi_choice", ",", "self", ".", "use_bert", ",", "mode", ")", "\n", "\n", "print", "(", "'Eligible video-qa pairs for training : {}'", ".", "format", "(", "len", "(", "training_set", ")", ")", ")", "\n", "if", "not", "self", ".", "multi_choice", "and", "not", "self", ".", "use_bert", ":", "\n", "            ", "train_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "training_set", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "self", ".", "train_shuffle", ",", "\n", "num_workers", "=", "self", ".", "num_worker", ",", "\n", "collate_fn", "=", "collate_fn", "\n", ")", "\n", "", "else", ":", "\n", "            ", "train_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "training_set", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "self", ".", "train_shuffle", ",", "\n", "num_workers", "=", "self", ".", "num_worker", ",", "\n", ")", "\n", "\n", "", "return", "train_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.sample_loader.QALoader.validate": [[251, 274], ["sample_loader.VideoQADataset", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len"], "methods", ["None"], ["", "def", "validate", "(", "self", ",", "mode", ")", ":", "\n", "# print(\"Now in Validate\")", "\n", "# for validation videos", "\n", "        ", "validation_set", "=", "VideoQADataset", "(", "self", ".", "video_feature_path", ",", "self", ".", "video_feature_cache", ",", "self", ".", "sample_list_path", ",", "\n", "self", ".", "vocab", ",", "self", ".", "multi_choice", ",", "self", ".", "use_bert", ",", "mode", ")", "\n", "\n", "print", "(", "'Eligible video-qa pairs for validation/test : {}'", ".", "format", "(", "len", "(", "validation_set", ")", ")", ")", "\n", "if", "not", "self", ".", "multi_choice", "and", "not", "self", ".", "use_bert", ":", "\n", "            ", "val_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "validation_set", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "self", ".", "val_shuffle", ",", "\n", "num_workers", "=", "self", ".", "num_worker", ",", "\n", "collate_fn", "=", "collate_fn", "\n", ")", "\n", "", "else", ":", "\n", "            ", "val_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "validation_set", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "self", ".", "val_shuffle", ",", "\n", "num_workers", "=", "self", ".", "num_worker", ",", "\n", ")", "\n", "", "return", "val_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.sample_loader.nozero_row": [[194, 202], ["row.sum"], "function", ["None"], ["", "", "def", "nozero_row", "(", "A", ")", ":", "\n", "    ", "i", "=", "0", "\n", "for", "row", "in", "A", ":", "\n", "        ", "if", "row", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "break", "\n", "", "i", "+=", "1", "\n", "\n", "", "return", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.sample_loader.collate_fn": [[275, 296], ["data.sort", "zip", "len", "range", "torch.LongTensor", "torch.LongTensor", "torch.zeros().long", "enumerate", "torch.stack", "temp_videos.append", "torch.LongTensor", "torch.zeros", "len", "len", "max", "range", "len"], "function", ["None"], ["", "", "def", "collate_fn", "(", "data", ")", ":", "\n", "    ", "\"\"\"\n    Create mini-batch tensors from the list of tuples (video, qns, qns_len, ans, qid)\n    \"\"\"", "\n", "data", ".", "sort", "(", "key", "=", "lambda", "x", ":", "len", "(", "x", "[", "1", "]", ")", ",", "reverse", "=", "True", ")", "\n", "videos", ",", "qnss_ori", ",", "qns_lens", ",", "anss", ",", "qids", "=", "zip", "(", "*", "data", ")", "\n", "temp_videos", "=", "[", "]", "\n", "feat_num", "=", "len", "(", "videos", "[", "0", "]", ")", "#([a,b],[a,b],[a,b],[a,b])", "\n", "for", "fid", "in", "range", "(", "feat_num", ")", ":", "\n", "        ", "temp", "=", "torch", ".", "stack", "(", "[", "videos", "[", "i", "]", "[", "fid", "]", "for", "i", "in", "range", "(", "len", "(", "videos", ")", ")", "]", ",", "0", ")", "\n", "temp_videos", ".", "append", "(", "temp", ")", "\n", "", "videos", "=", "temp_videos", "\n", "\n", "anss", "=", "torch", ".", "LongTensor", "(", "anss", ")", "\n", "qns_lens", "=", "torch", ".", "LongTensor", "(", "qns_lens", ")", "\n", "qnss", "=", "torch", ".", "zeros", "(", "len", "(", "qnss_ori", ")", ",", "max", "(", "qns_lens", ")", ")", ".", "long", "(", ")", "\n", "for", "i", ",", "qns", "in", "enumerate", "(", "qnss_ori", ")", ":", "\n", "        ", "end", "=", "qns_lens", "[", "i", "]", "\n", "qnss", "[", "i", ",", ":", "end", "]", "=", "torch", ".", "LongTensor", "(", "qns", "[", ":", "end", "]", ")", "\n", "\n", "", "return", "videos", ",", "qnss", ",", "qns_lens", ",", "anss", ",", "qids", "\n", "", ""]], "home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.util.load_file": [[8, 20], ["pandas.read_csv", "open", "os.splitext", "fp.readlines", "json.load", "os.splitext", "line.rstrip", "os.splitext"], "function", ["None"], ["def", "load_file", "(", "file_name", ")", ":", "\n", "    ", "annos", "=", "None", "\n", "if", "osp", ".", "splitext", "(", "file_name", ")", "[", "-", "1", "]", "==", "'.csv'", ":", "\n", "        ", "return", "pd", ".", "read_csv", "(", "file_name", ")", "\n", "", "with", "open", "(", "file_name", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "if", "osp", ".", "splitext", "(", "file_name", ")", "[", "1", "]", "==", "'.txt'", ":", "\n", "            ", "annos", "=", "fp", ".", "readlines", "(", ")", "\n", "annos", "=", "[", "line", ".", "rstrip", "(", ")", "for", "line", "in", "annos", "]", "\n", "", "if", "osp", ".", "splitext", "(", "file_name", ")", "[", "1", "]", "==", "'.json'", ":", "\n", "            ", "annos", "=", "json", ".", "load", "(", "fp", ")", "\n", "\n", "", "", "return", "annos", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.util.save_file": [[21, 34], ["os.dirname", "os.makedirs", "os.makedirs", "os.exists", "open", "json.dump"], "function", ["None"], ["", "def", "save_file", "(", "obj", ",", "filename", ")", ":", "\n", "    ", "\"\"\"\n    save obj to filename\n    :param obj:\n    :param filename:\n    :return:\n    \"\"\"", "\n", "filepath", "=", "osp", ".", "dirname", "(", "filename", ")", "\n", "if", "filepath", "!=", "''", "and", "not", "osp", ".", "exists", "(", "filepath", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "filepath", ")", "\n", "", "else", ":", "\n", "        ", "with", "open", "(", "filename", ",", "'w'", ")", "as", "fp", ":", "\n", "            ", "json", ".", "dump", "(", "obj", ",", "fp", ",", "indent", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.util.pkload": [[35, 42], ["os.exists", "os.getsize", "open", "pickle.load"], "function", ["None"], ["", "", "", "def", "pkload", "(", "file", ")", ":", "\n", "    ", "data", "=", "None", "\n", "if", "osp", ".", "exists", "(", "file", ")", "and", "osp", ".", "getsize", "(", "file", ")", ">", "0", ":", "\n", "        ", "with", "open", "(", "file", ",", "'rb'", ")", "as", "fp", ":", "\n", "            ", "data", "=", "pkl", ".", "load", "(", "fp", ")", "\n", "# print('{} does not exist'.format(file))", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.util.pkdump": [[44, 50], ["os.dirname", "os.exists", "os.makedirs", "os.makedirs", "open", "pickle.dump"], "function", ["None"], ["", "def", "pkdump", "(", "data", ",", "file", ")", ":", "\n", "    ", "dirname", "=", "osp", ".", "dirname", "(", "file", ")", "\n", "if", "not", "osp", ".", "exists", "(", "dirname", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dirname", ")", "\n", "", "with", "open", "(", "file", ",", "'wb'", ")", "as", "fp", ":", "\n", "        ", "pkl", ".", "dump", "(", "data", ",", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.util.transform_bb": [[52, 64], ["list", "roi_bbox.reshape", "relative_area.reshape.reshape", "numpy.hstack", "bbox_feat.reshape.reshape", "numpy.asarray"], "function", ["None"], ["", "", "def", "transform_bb", "(", "roi_bbox", ",", "width", ",", "height", ")", ":", "\n", "    ", "dshape", "=", "list", "(", "roi_bbox", ".", "shape", ")", "\n", "tmp_bbox", "=", "roi_bbox", ".", "reshape", "(", "[", "-", "1", ",", "4", "]", ")", "\n", "relative_bbox", "=", "tmp_bbox", "/", "np", ".", "asarray", "(", "[", "width", ",", "height", ",", "width", ",", "height", "]", ")", "\n", "relative_area", "=", "(", "tmp_bbox", "[", ":", ",", "2", "]", "-", "tmp_bbox", "[", ":", ",", "0", "]", "+", "1", ")", "*", "(", "tmp_bbox", "[", ":", ",", "3", "]", "-", "tmp_bbox", "[", ":", ",", "1", "]", "+", "1", ")", "/", "(", "width", "*", "height", ")", "\n", "relative_area", "=", "relative_area", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "bbox_feat", "=", "np", ".", "hstack", "(", "(", "relative_bbox", ",", "relative_area", ")", ")", "\n", "dshape", "[", "-", "1", "]", "+=", "1", "\n", "bbox_feat", "=", "bbox_feat", ".", "reshape", "(", "dshape", ")", "\n", "\n", "return", "bbox_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.util.select_feature": [[66, 115], ["len", "util.sample_clips", "os.join", "sorted", "numpy.asarray", "numpy.asarray", "os.join", "numpy.savez_compressed", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "np.asarray.append", "np.asarray.append", "os.join", "numpy.load", "frame_feat_file.split", "range", "numpy.asarray", "numpy.asarray", "numpy.concatenate", "numpy.concatenate", "clip_feat.append", "clip_bbox.append", "os.join", "np.asarray.append", "np.asarray.append", "frame_feat_file.split"], "function", ["home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.util.sample_clips"], ["", "def", "select_feature", "(", "video_feature_path", ",", "video_name", ",", "video_feature_cache", ",", "\n", "frame_path", ",", "num_clip", "=", "16", ",", "frame_pclip", "=", "16", ",", "bbox_num", "=", "10", ")", ":", "\n", "\n", "    ", "nframe_ds", "=", "len", "(", "os", ".", "listdir", "(", "osp", ".", "join", "(", "frame_path", ",", "video_name", ")", ")", ")", "\n", "clips", "=", "sample_clips", "(", "nframe_ds", ",", "num_clip", ",", "frame_pclip", ")", "\n", "video_feat_dir", "=", "osp", ".", "join", "(", "video_feature_path", ",", "video_name", ")", "\n", "frame_feat_files", "=", "sorted", "(", "os", ".", "listdir", "(", "video_feat_dir", ")", ")", "\n", "frame_dict", "=", "{", "}", "\n", "\n", "for", "frame_feat_file", "in", "frame_feat_files", ":", "\n", "        ", "try", ":", "\n", "            ", "RoIInfo", "=", "np", ".", "load", "(", "osp", ".", "join", "(", "video_feat_dir", ",", "frame_feat_file", ")", ")", "\n", "", "except", ":", "\n", "            ", "return", "video_name", "+", "' '", "+", "frame_feat_file", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "", "fid", "=", "frame_feat_file", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "bbox_feat", ",", "bbox_coord", "=", "RoIInfo", "[", "'x'", "]", ",", "RoIInfo", "[", "'bbox'", "]", "\n", "bnum", "=", "bbox_feat", ".", "shape", "[", "0", "]", "\n", "if", "bnum", "<", "bbox_num", ":", "\n", "            ", "add_num", "=", "bbox_num", "-", "bnum", "\n", "# print(add_num)", "\n", "add_feat", ",", "add_bbox", "=", "[", "]", ",", "[", "]", "\n", "for", "_", "in", "range", "(", "add_num", ")", ":", "\n", "                ", "add_feat", ".", "append", "(", "bbox_feat", "[", "-", "1", "]", ")", "\n", "add_bbox", ".", "append", "(", "bbox_coord", "[", "-", "1", "]", ")", "\n", "", "add_feat", "=", "np", ".", "asarray", "(", "add_feat", ")", "\n", "add_bbox", "=", "np", ".", "asarray", "(", "add_bbox", ")", "\n", "# print(add_feat.shape, add_bbox.shape)", "\n", "bbox_feat", "=", "np", ".", "concatenate", "(", "(", "bbox_feat", ",", "add_feat", ")", ",", "axis", "=", "0", ")", "\n", "bbox_coord", "=", "np", ".", "concatenate", "(", "(", "bbox_coord", ",", "add_bbox", ")", ",", "axis", "=", "0", ")", "\n", "", "frame_dict", "[", "fid", "]", "=", "{", "'bbox'", ":", "bbox_coord", "[", ":", "bbox_num", "]", ",", "'feat'", ":", "bbox_feat", "[", ":", "bbox_num", "]", "}", "# (top 20 bbox & feat)", "\n", "", "video_feat", "=", "[", "]", "\n", "video_bbox", "=", "[", "]", "\n", "for", "clip", "in", "clips", ":", "\n", "        ", "clip_feat", "=", "[", "]", "\n", "clip_bbox", "=", "[", "]", "\n", "for", "fid", "in", "clip", ":", "\n", "            ", "if", "fid", "not", "in", "frame_dict", ":", "\n", "                ", "feedback", "=", "video_name", "+", "' '", "+", "fid", "\n", "return", "feedback", "\n", "", "clip_feat", ".", "append", "(", "frame_dict", "[", "fid", "]", "[", "'feat'", "]", ")", "\n", "clip_bbox", ".", "append", "(", "frame_dict", "[", "fid", "]", "[", "'bbox'", "]", ")", "\n", "", "video_feat", ".", "append", "(", "clip_feat", ")", "\n", "video_bbox", ".", "append", "(", "clip_bbox", ")", "\n", "", "video_feat", "=", "np", ".", "asarray", "(", "video_feat", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "video_bbox", "=", "np", ".", "asarray", "(", "video_bbox", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# print(video_feat.shape, video_bbox.shape) #(16,4,20,2048), (16,4,20,4)", "\n", "cache_file", "=", "osp", ".", "join", "(", "video_feature_cache", ",", "video_name", ")", "\n", "np", ".", "savez_compressed", "(", "cache_file", ",", "feat", "=", "video_feat", ",", "bbox", "=", "video_bbox", ")", "\n", "return", "video_feat", ",", "video_bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.dataloader.util.sample_clips": [[116, 144], ["str().zfill", "numpy.linspace", "clips.append", "range", "int", "int", "int", "int", "range", "range", "str", "len", "added_fids.append", "len", "len", "added_fids.append", "len"], "function", ["None"], ["", "def", "sample_clips", "(", "total_frames", ",", "num_clips", ",", "num_frames_per_clip", ")", ":", "\n", "    ", "clips", "=", "[", "]", "\n", "frames", "=", "[", "str", "(", "f", "+", "1", ")", ".", "zfill", "(", "6", ")", "for", "f", "in", "range", "(", "total_frames", ")", "]", "\n", "vis", "=", "0", "\n", "for", "i", "in", "np", ".", "linspace", "(", "0", ",", "total_frames", ",", "num_clips", "+", "2", ",", "dtype", "=", "np", ".", "int32", ")", "[", "1", ":", "num_clips", "+", "1", "]", ":", "\n", "        ", "clip_start", "=", "int", "(", "i", ")", "-", "int", "(", "num_frames_per_clip", "/", "2", ")", "\n", "clip_end", "=", "int", "(", "i", ")", "+", "int", "(", "num_frames_per_clip", "/", "2", ")", "\n", "clip_start", "=", "0", "if", "clip_start", "<", "0", "else", "clip_start", "\n", "clip_end", "=", "total_frames", "if", "clip_end", ">", "total_frames", "else", "clip_end", "\n", "clip", "=", "frames", "[", "clip_start", ":", "clip_end", "]", "# evenly sample 4 frames from clip of size 16", "\n", "if", "clip_start", "==", "0", "and", "len", "(", "clip", ")", "<", "num_frames_per_clip", ":", "\n", "            ", "shortage", "=", "num_frames_per_clip", "-", "(", "clip_end", "-", "clip_start", ")", "\n", "added_fids", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "shortage", ")", ":", "\n", "                ", "added_fids", ".", "append", "(", "frames", "[", "clip_start", "]", ")", "\n", "", "if", "len", "(", "added_fids", ")", ">", "0", ":", "\n", "                ", "clip", "=", "added_fids", "+", "clip", "\n", "", "", "if", "clip_end", "==", "total_frames", "and", "len", "(", "clip", ")", "<", "num_frames_per_clip", ":", "\n", "            ", "shortage", "=", "num_frames_per_clip", "-", "(", "clip_end", "-", "clip_start", ")", "\n", "added_fids", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "shortage", ")", ":", "\n", "                ", "added_fids", ".", "append", "(", "frames", "[", "clip_end", "-", "1", "]", ")", "\n", "", "if", "len", "(", "added_fids", ")", ">", "0", ":", "\n", "                ", "clip", "+=", "added_fids", "\n", "", "", "clip", "=", "clip", "[", ":", ":", "4", "]", "\n", "clips", ".", "append", "(", "clip", ")", "\n", "\n", "", "return", "clips", "\n", "", ""]], "home.repos.pwc.inspect_result.doc-doc_hqga.networks.embed_loss.MultipleChoiceLoss.__init__": [[10, 15], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.doc-doc_hqga.Encoder.EncoderQns.EncoderQns.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_option", "=", "5", ",", "margin", "=", "1", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "MultipleChoiceLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "margin", "=", "margin", "\n", "self", ".", "num_option", "=", "num_option", "\n", "self", ".", "size_average", "=", "size_average", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.networks.embed_loss.MultipleChoiceLoss.forward": [[18, 44], ["score.size", "score.size", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "range", "range", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "score", ",", "target", ")", ":", "\n", "        ", "N", "=", "score", ".", "size", "(", "0", ")", "\n", "C", "=", "score", ".", "size", "(", "1", ")", "\n", "assert", "self", ".", "num_option", "==", "C", "\n", "\n", "loss", "=", "torch", ".", "tensor", "(", "0.0", ")", ".", "cuda", "(", ")", "\n", "zero", "=", "torch", ".", "tensor", "(", "0.0", ")", ".", "cuda", "(", ")", "\n", "\n", "cnt", "=", "0", "\n", "#print(N,C)", "\n", "for", "b", "in", "range", "(", "N", ")", ":", "\n", "# loop over incorrect answer, check if correct answer's score larger than a margin", "\n", "            ", "c0", "=", "target", "[", "b", "]", "\n", "for", "c", "in", "range", "(", "C", ")", ":", "\n", "                ", "if", "c", "==", "c0", ":", "\n", "                    ", "continue", "\n", "\n", "# right class and wrong class should have score difference larger than a margin", "\n", "# see formula under paper Eq(4)", "\n", "", "loss", "+=", "torch", ".", "max", "(", "zero", ",", "1.0", "+", "score", "[", "b", ",", "c", "]", "-", "score", "[", "b", ",", "c0", "]", ")", "\n", "cnt", "+=", "1", "\n", "\n", "", "", "if", "cnt", "==", "0", ":", "\n", "            ", "return", "loss", "\n", "\n", "", "return", "loss", "/", "cnt", "if", "self", ".", "size_average", "else", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.doc-doc_hqga.networks.graph.GraphConvolution.__init__": [[15, 26], ["torch.nn.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "graph.GraphConvolution.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "graph.GraphConvolution.register_parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.doc-doc_hqga.Encoder.EncoderQns.EncoderQns.__init__", "home.repos.pwc.inspect_result.doc-doc_hqga.networks.graph.GraphConvolution.reset_parameters"], ["def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ",", "skip", "=", "True", ")", ":", "\n", "        ", "super", "(", "GraphConvolution", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "skip", "=", "skip", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "in_features", ",", "out_features", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.networks.graph.GraphConvolution.reset_parameters": [[27, 32], ["graph.GraphConvolution.weight.data.uniform_", "math.sqrt", "graph.GraphConvolution.bias.data.uniform_", "graph.GraphConvolution.weight.size"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "weight", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.networks.graph.GraphConvolution.forward": [[33, 46], ["torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "graph.GraphConvolution.weight.unsqueeze().expand", "graph.GraphConvolution.bias.unsqueeze().expand", "graph.GraphConvolution.weight.unsqueeze", "graph.GraphConvolution.bias.unsqueeze"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "adj", ")", ":", "\n", "# TODO make fc more efficient via \"pack_padded_sequence\"", "\n", "# import ipdb; ipdb.set_trace()", "\n", "        ", "support", "=", "torch", ".", "bmm", "(", "input", ",", "self", ".", "weight", ".", "unsqueeze", "(", "\n", "0", ")", ".", "expand", "(", "input", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "-", "1", ")", ")", "\n", "output", "=", "torch", ".", "bmm", "(", "adj", ",", "support", ")", "\n", "#output = SparseMM(adj)(support)", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "output", "+=", "self", ".", "bias", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "input", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "-", "1", ")", "\n", "", "if", "self", ".", "skip", ":", "\n", "            ", "output", "+=", "support", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.networks.graph.GraphConvolution.__repr__": [[47, 51], ["str", "str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "str", "(", "self", ".", "in_features", ")", "+", "' -> '", "+", "str", "(", "self", ".", "out_features", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.networks.graph.GCN_sim.__init__": [[57, 73], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "graph.GCN_sim.gcs.append", "graph.GraphConvolution", "graph.GraphConvolution"], "methods", ["home.repos.pwc.inspect_result.doc-doc_hqga.Encoder.EncoderQns.EncoderQns.__init__"], ["def", "__init__", "(", "self", ",", "dim_in", ",", "dim_hidden", ",", "dim_out", ",", "dropout", ",", "num_layers", ")", ":", "\n", "        ", "super", "(", "GCN_sim", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "num_layers", ">=", "1", "\n", "self", ".", "fc_k", "=", "nn", ".", "Linear", "(", "dim_in", ",", "dim_hidden", ")", "\n", "self", ".", "fc_q", "=", "nn", ".", "Linear", "(", "dim_in", ",", "dim_hidden", ")", "\n", "\n", "dim_hidden", "=", "dim_out", "if", "num_layers", "==", "1", "else", "dim_hidden", "\n", "self", ".", "gcs", "=", "nn", ".", "ModuleList", "(", "[", "\n", "GraphConvolution", "(", "dim_in", ",", "dim_hidden", ")", "\n", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_layers", "-", "1", ")", ":", "\n", "            ", "dim_tmp", "=", "dim_out", "if", "i", "==", "num_layers", "-", "2", "else", "dim_hidden", "\n", "self", ".", "gcs", ".", "append", "(", "GraphConvolution", "(", "dim_hidden", ",", "dim_tmp", ")", ")", "\n", "\n", "", "self", ".", "dropout", "=", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.networks.graph.GCN_sim.construct_graph": [[74, 93], ["graph.GCN_sim.fc_k", "graph.GCN_sim.fc_q", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm.data.new().fill_().bool", "torch.bmm.data.new().fill_().bool", "enumerate", "torch.autograd.Variable", "torch.autograd.Variable", "torch.bmm.data.masked_fill_", "torch.bmm.data.masked_fill_", "torch.softmax", "torch.softmax", "torch.softmax.data.masked_fill_", "graph.GCN_sim.transpose", "zip", "torch.bmm.data.new().fill_", "torch.bmm.data.new().fill_", "float", "torch.bmm.data.new", "torch.bmm.data.new", "torch.bmm.size", "torch.bmm.size"], "methods", ["None"], ["", "def", "construct_graph", "(", "self", ",", "x", ",", "length", ")", ":", "\n", "# TODO make fc more efficient via \"pack_padded_sequence\"", "\n", "        ", "emb_k", "=", "self", ".", "fc_k", "(", "x", ")", "\n", "emb_q", "=", "self", ".", "fc_q", "(", "x", ")", "\n", "\n", "s", "=", "torch", ".", "bmm", "(", "emb_k", ",", "emb_q", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "\n", "s_mask", "=", "s", ".", "data", ".", "new", "(", "*", "s", ".", "size", "(", ")", ")", ".", "fill_", "(", "1", ")", ".", "bool", "(", ")", "# [B, T1, T2]", "\n", "# Init similarity mask using lengths", "\n", "for", "i", ",", "(", "l_1", ",", "l_2", ")", "in", "enumerate", "(", "zip", "(", "length", ",", "length", ")", ")", ":", "\n", "            ", "s_mask", "[", "i", "]", "[", ":", "l_1", ",", ":", "l_2", "]", "=", "0", "\n", "", "s_mask", "=", "Variable", "(", "s_mask", ")", "\n", "s", ".", "data", ".", "masked_fill_", "(", "s_mask", ".", "data", ",", "-", "float", "(", "\"inf\"", ")", ")", "\n", "\n", "a_weight", "=", "F", ".", "softmax", "(", "s", ",", "dim", "=", "2", ")", "# [B, t1, t2]", "\n", "# remove nan from softmax on -inf", "\n", "a_weight", ".", "data", ".", "masked_fill_", "(", "a_weight", ".", "data", "!=", "a_weight", ".", "data", ",", "0", ")", "\n", "\n", "return", "a_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.networks.graph.GCN_sim.forward": [[95, 103], ["graph.GCN_sim.construct_graph", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "gc"], "methods", ["home.repos.pwc.inspect_result.doc-doc_hqga.networks.graph.GCN_sim.construct_graph"], ["", "def", "forward", "(", "self", ",", "x", ",", "length", ")", ":", "\n", "        ", "adj_sim", "=", "self", ".", "construct_graph", "(", "x", ",", "length", ")", "\n", "\n", "for", "gc", "in", "self", ".", "gcs", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "gc", "(", "x", ",", "adj_sim", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "", "return", "x", ",", "adj_sim", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.networks.graph.GCN.__init__": [[106, 111], ["torch.nn.Module.__init__", "graph.GCN_sim"], "methods", ["home.repos.pwc.inspect_result.doc-doc_hqga.Encoder.EncoderQns.EncoderQns.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_in", ",", "dim_hidden", ",", "dim_out", ",", "dropout", ",", "skip", ",", "num_layers", ")", ":", "\n", "        ", "super", "(", "GCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "skip", "=", "skip", "\n", "self", ".", "GCN_sim", "=", "GCN_sim", "(", "dim_in", ",", "dim_hidden", ",", "dim_out", ",", "dropout", ",", "num_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.networks.graph.GCN.forward": [[112, 119], ["graph.GCN.GCN_sim"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "length", ",", "bboxes", "=", "None", ")", ":", "\n", "\n", "        ", "out", ",", "adj_sim", "=", "self", ".", "GCN_sim", "(", "x", ",", "length", ")", "\n", "if", "self", ".", "skip", ":", "\n", "            ", "out", "+=", "x", "\n", "\n", "", "return", "out", ",", "adj_sim", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.networks.PosEmbed.positionalencoding1d": [[6, 23], ["torch.zeros", "torch.arange().unsqueeze", "torch.exp", "torch.sin", "torch.cos", "ValueError", "torch.arange", "torch.arange", "torch.arange().unsqueeze.float", "torch.arange().unsqueeze.float", "math.log"], "function", ["None"], ["def", "positionalencoding1d", "(", "d_model", ",", "length", ")", ":", "\n", "    ", "\"\"\"\n    :param d_model: dimension of the model\n    :param length: length of positions\n    :return: length*d_model position matrix\n    \"\"\"", "\n", "if", "d_model", "%", "2", "!=", "0", ":", "\n", "        ", "raise", "ValueError", "(", "\"Cannot use sin/cos positional encoding with \"", "\n", "\"odd dim (got dim={:d})\"", ".", "format", "(", "d_model", ")", ")", "\n", "", "pe", "=", "torch", ".", "zeros", "(", "length", ",", "d_model", ")", "\n", "position", "=", "torch", ".", "arange", "(", "0", ",", "length", ")", ".", "unsqueeze", "(", "1", ")", "\n", "div_term", "=", "torch", ".", "exp", "(", "(", "torch", ".", "arange", "(", "0", ",", "d_model", ",", "2", ",", "dtype", "=", "torch", ".", "float", ")", "*", "\n", "-", "(", "math", ".", "log", "(", "10000.0", ")", "/", "d_model", ")", ")", ")", "\n", "pe", "[", ":", ",", "0", ":", ":", "2", "]", "=", "torch", ".", "sin", "(", "position", ".", "float", "(", ")", "*", "div_term", ")", "\n", "pe", "[", ":", ",", "1", ":", ":", "2", "]", "=", "torch", ".", "cos", "(", "position", ".", "float", "(", ")", "*", "div_term", ")", "\n", "\n", "return", "pe", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.networks.PosEmbed.positionalencoding2d": [[25, 48], ["torch.zeros", "int", "torch.exp", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.sin().transpose().unsqueeze().repeat", "torch.cos().transpose().unsqueeze().repeat", "torch.sin().transpose().unsqueeze().repeat", "torch.cos().transpose().unsqueeze().repeat", "ValueError", "torch.arange", "torch.arange", "torch.arange", "torch.sin().transpose().unsqueeze", "torch.cos().transpose().unsqueeze", "torch.sin().transpose().unsqueeze", "torch.cos().transpose().unsqueeze", "math.log", "torch.sin().transpose", "torch.cos().transpose", "torch.sin().transpose", "torch.cos().transpose", "torch.sin", "torch.cos", "torch.sin", "torch.cos"], "function", ["None"], ["", "def", "positionalencoding2d", "(", "d_model", ",", "height", ",", "width", ")", ":", "\n", "    ", "\"\"\"\n    :param d_model: dimension of the model\n    :param height: height of the positions\n    :param width: width of the positions\n    :return: d_model*height*width position matrix\n    \"\"\"", "\n", "if", "d_model", "%", "4", "!=", "0", ":", "\n", "        ", "raise", "ValueError", "(", "\"Cannot use sin/cos positional encoding with \"", "\n", "\"odd dimension (got dim={:d})\"", ".", "format", "(", "d_model", ")", ")", "\n", "", "pe", "=", "torch", ".", "zeros", "(", "d_model", ",", "height", ",", "width", ")", "\n", "# Each dimension use half of d_model", "\n", "d_model", "=", "int", "(", "d_model", "/", "2", ")", "\n", "div_term", "=", "torch", ".", "exp", "(", "torch", ".", "arange", "(", "0.", ",", "d_model", ",", "2", ")", "*", "\n", "-", "(", "math", ".", "log", "(", "10000.0", ")", "/", "d_model", ")", ")", "\n", "pos_w", "=", "torch", ".", "arange", "(", "0.", ",", "width", ")", ".", "unsqueeze", "(", "1", ")", "\n", "pos_h", "=", "torch", ".", "arange", "(", "0.", ",", "height", ")", ".", "unsqueeze", "(", "1", ")", "\n", "pe", "[", "0", ":", "d_model", ":", "2", ",", ":", ",", ":", "]", "=", "torch", ".", "sin", "(", "pos_w", "*", "div_term", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "height", ",", "1", ")", "\n", "pe", "[", "1", ":", "d_model", ":", "2", ",", ":", ",", ":", "]", "=", "torch", ".", "cos", "(", "pos_w", "*", "div_term", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "height", ",", "1", ")", "\n", "pe", "[", "d_model", ":", ":", "2", ",", ":", ",", ":", "]", "=", "torch", ".", "sin", "(", "pos_h", "*", "div_term", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "width", ")", "\n", "pe", "[", "d_model", "+", "1", ":", ":", "2", ",", ":", ",", ":", "]", "=", "torch", ".", "cos", "(", "pos_h", "*", "div_term", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "width", ")", "\n", "\n", "return", "pe", "\n", "", ""]], "home.repos.pwc.inspect_result.doc-doc_hqga.networks.cmatt.CMAtten.__init__": [[9, 11], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.doc-doc_hqga.Encoder.EncoderQns.EncoderQns.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CMAtten", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.networks.cmatt.CMAtten.similarity": [[13, 32], ["torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm.data.new().fill_().bool", "torch.bmm.data.new().fill_().bool", "torch.bmm.data.new().fill_().bool", "enumerate", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.bmm.data.masked_fill_", "torch.bmm.data.masked_fill_", "torch.bmm.data.masked_fill_", "s2.transpose", "zip", "torch.bmm.data.new().fill_", "torch.bmm.data.new().fill_", "torch.bmm.data.new().fill_", "float", "torch.bmm.data.new", "torch.bmm.data.new", "torch.bmm.data.new", "torch.bmm.size", "torch.bmm.size", "torch.bmm.size"], "methods", ["None"], ["", "def", "similarity", "(", "self", ",", "s1", ",", "l1", ",", "s2", ",", "l2", ")", ":", "\n", "        ", "\"\"\"\n        :param s1: [B, t1, D]\n        :param l1: [B]\n        :param s2: [B, t2, D]\n        :param l2: [B]\n        :return:\n        \"\"\"", "\n", "s", "=", "torch", ".", "bmm", "(", "s1", ",", "s2", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "\n", "# import ipdb; ipdb.set_trace()", "\n", "s_mask", "=", "s", ".", "data", ".", "new", "(", "*", "s", ".", "size", "(", ")", ")", ".", "fill_", "(", "1", ")", ".", "bool", "(", ")", "# [B, T1, T2]", "\n", "# Init similarity mask using lengths", "\n", "for", "i", ",", "(", "l_1", ",", "l_2", ")", "in", "enumerate", "(", "zip", "(", "l1", ",", "l2", ")", ")", ":", "\n", "            ", "s_mask", "[", "i", "]", "[", ":", "l_1", ",", ":", "l_2", "]", "=", "0", "\n", "\n", "", "s_mask", "=", "Variable", "(", "s_mask", ")", "\n", "s", ".", "data", ".", "masked_fill_", "(", "s_mask", ".", "data", ",", "-", "float", "(", "\"inf\"", ")", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.networks.cmatt.CMAtten.get_u_tile": [[33, 45], ["torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax.data.masked_fill_", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_u_tile", "(", "cls", ",", "s", ",", "s2", ")", ":", "\n", "        ", "\"\"\"\n        attended vectors of s2 for each word in s1,\n        signify which words in s2 are most relevant to words in s1\n        \"\"\"", "\n", "a_weight", "=", "F", ".", "softmax", "(", "s", ",", "dim", "=", "2", ")", "# [B, l1, l2]", "\n", "\n", "a_weight", ".", "data", ".", "masked_fill_", "(", "a_weight", ".", "data", "!=", "a_weight", ".", "data", ",", "0", ")", "\n", "# [B, l1, l2] * [B, l2, D] -> [B, l1, D]", "\n", "u_tile", "=", "torch", ".", "bmm", "(", "a_weight", ",", "s2", ")", "\n", "return", "u_tile", ",", "a_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.networks.cmatt.CMAtten.forward": [[47, 52], ["cmatt.CMAtten.similarity", "cmatt.CMAtten.get_u_tile"], "methods", ["home.repos.pwc.inspect_result.doc-doc_hqga.networks.cmatt.CMAtten.similarity", "home.repos.pwc.inspect_result.doc-doc_hqga.networks.cmatt.CMAtten.get_u_tile"], ["", "def", "forward", "(", "self", ",", "s1", ",", "l1", ",", "s2", ",", "l2", ")", ":", "\n", "        ", "s", "=", "self", ".", "similarity", "(", "s1", ",", "l1", ",", "s2", ",", "l2", ")", "\n", "u_tile", ",", "a_weight", "=", "self", ".", "get_u_tile", "(", "s", ",", "s2", ")", "\n", "\n", "return", "u_tile", ",", "a_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.VQAModel.HQGA.HQGA.__init__": [[11, 93], ["torch.Module.__init__", "cmatt.CMAtten", "graph.GCN", "torch.Sequential", "torch.Sequential", "graph.GCN", "torch.Sequential", "torch.Sequential", "graph.GCN", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ELU", "torch.ELU", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ELU", "torch.ELU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Softmax", "torch.Softmax", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Softmax", "torch.Softmax", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Softmax", "torch.Softmax", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.ELU", "torch.ELU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.doc-doc_hqga.Encoder.EncoderQns.EncoderQns.__init__"], ["    ", "def", "__init__", "(", "self", ",", "vid_encoder", ",", "qns_encoder", ",", "device", ",", "num_class", ")", ":", "\n", "        ", "\"\"\"\n        Video as Conditional Graph Hierarchy for Multi-Granular Question Answering\n        \"\"\"", "\n", "super", "(", "HQGA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vid_encoder", "=", "vid_encoder", "\n", "self", ".", "qns_encoder", "=", "qns_encoder", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "device", "=", "device", "\n", "hidden_size", "=", "vid_encoder", ".", "dim_hidden", "\n", "input_dropout_p", "=", "vid_encoder", ".", "input_dropout_p", "\n", "layer_num", "=", "2", "\n", "half", "=", "2", "\n", "\n", "self", ".", "bidirec_att", "=", "CMAtten", "(", ")", "#BiAttn(None, 'dot', get_h=False)", "\n", "self", ".", "gcn_region", "=", "GCN", "(", "\n", "hidden_size", ",", "\n", "hidden_size", "//", "half", ",", "\n", "hidden_size", ",", "\n", "dropout", "=", "input_dropout_p", ",", "\n", "skip", "=", "True", ",", "\n", "num_layers", "=", "layer_num", "\n", ")", "\n", "if", "num_class", ">=", "1", ":", "\n", "            ", "self", ".", "gcn_atten_pool_region", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", "//", "2", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_size", "//", "2", ",", "1", ")", ",", "\n", "nn", ".", "Softmax", "(", "dim", "=", "-", "2", ")", ")", "\n", "\n", "", "self", ".", "merge_rf", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "hidden_size", "*", "2", ",", "hidden_size", ")", ",", "\n", "nn", ".", "ELU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "gcn_frame", "=", "GCN", "(", "\n", "hidden_size", ",", "\n", "hidden_size", "//", "half", ",", "\n", "hidden_size", ",", "\n", "dropout", "=", "input_dropout_p", ",", "\n", "skip", "=", "True", ",", "\n", "num_layers", "=", "layer_num", "\n", ")", "\n", "\n", "if", "num_class", ">=", "1", ":", "\n", "            ", "self", ".", "gcn_atten_pool_frame", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", "//", "2", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_size", "//", "2", ",", "1", ")", ",", "\n", "nn", ".", "Softmax", "(", "dim", "=", "-", "2", ")", ")", "\n", "\n", "", "self", ".", "merge_cm", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "hidden_size", "*", "2", ",", "hidden_size", ")", ",", "\n", "nn", ".", "ELU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "gcn_clip", "=", "GCN", "(", "\n", "hidden_size", ",", "\n", "hidden_size", "//", "half", ",", "\n", "hidden_size", ",", "\n", "dropout", "=", "input_dropout_p", ",", "\n", "skip", "=", "True", ",", "\n", "num_layers", "=", "layer_num", "\n", ")", "\n", "if", "num_class", ">=", "1", ":", "\n", "            ", "self", ".", "gcn_atten_pool_clip", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", "//", "2", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_size", "//", "2", ",", "1", ")", ",", "\n", "nn", ".", "Softmax", "(", "dim", "=", "-", "2", ")", ")", "\n", "\n", "", "if", "num_class", "==", "1", ":", "\n", "            ", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "num_class", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "nn", ".", "Dropout", "(", "0.15", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_size", "*", "2", ",", "hidden_size", ")", ",", "\n", "nn", ".", "ELU", "(", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "hidden_size", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.15", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "num_class", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.VQAModel.HQGA.HQGA.forward": [[94, 128], ["HQGA.HQGA.vid_encoder", "HQGA.HQGA.qns_encoder", "s_hidden.permute().contiguous().view", "HQGA.HQGA.vq_encoder", "torch.max", "torch.max", "torch.max", "torch.max", "qas.size", "qas.view", "qas_lengths.view", "qas.size", "qas.view", "qas_lengths.view", "s_hidden.permute().contiguous", "s_hidden.permute"], "methods", ["home.repos.pwc.inspect_result.doc-doc_hqga.VQAModel.HQGA.HQGA.vq_encoder"], ["", "", "def", "forward", "(", "self", ",", "vid_feats", ",", "qas", ",", "qas_lengths", ")", ":", "\n", "        ", "\"\"\"\n        :param vid_feats:\n        :param qns:\n        :param qns_lengths:\n        :param mode:\n        :return:\n        \"\"\"", "\n", "vid_feats", "=", "self", ".", "vid_encoder", "(", "vid_feats", ")", "\n", "out", "=", "[", "]", "\n", "\n", "if", "self", ".", "num_class", "==", "1", ":", "\n", "# for multi-choice", "\n", "            ", "if", "self", ".", "qns_encoder", ".", "use_bert", ":", "\n", "                ", "batch_size", ",", "choice_size", ",", "max_len", ",", "feat_dim", "=", "qas", ".", "size", "(", ")", "\n", "cand_qas", "=", "qas", ".", "view", "(", "batch_size", "*", "choice_size", ",", "max_len", ",", "feat_dim", ")", "\n", "cand_len", "=", "qas_lengths", ".", "view", "(", "batch_size", "*", "choice_size", ")", "\n", "", "else", ":", "\n", "                ", "batch_size", ",", "choice_size", ",", "max_len", "=", "qas", ".", "size", "(", ")", "\n", "cand_qas", "=", "qas", ".", "view", "(", "batch_size", "*", "choice_size", ",", "max_len", ")", "\n", "cand_len", "=", "qas_lengths", ".", "view", "(", "batch_size", "*", "choice_size", ")", "\n", "", "", "else", ":", "\n", "#for open-ended", "\n", "            ", "batch_size", ",", "choice_size", "=", "qas", ".", "shape", "[", "0", "]", ",", "1", "\n", "cand_qas", "=", "qas", "\n", "cand_len", "=", "qas_lengths", "\n", "\n", "", "q_output", ",", "s_hidden", "=", "self", ".", "qns_encoder", "(", "cand_qas", ",", "cand_len", ")", "\n", "qns_global", "=", "s_hidden", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "q_output", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "# print(q_output.shape, qns_global.shape)", "\n", "out", ",", "vis_graph", "=", "self", ".", "vq_encoder", "(", "vid_feats", ",", "q_output", ",", "cand_len", ",", "qns_global", ")", "\n", "\n", "_", ",", "predict_idx", "=", "torch", ".", "max", "(", "out", ",", "1", ")", "\n", "return", "out", ",", "predict_idx", ",", "vis_graph", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.VQAModel.HQGA.HQGA.vq_encoder": [[130, 149], ["HQGA.HQGA.hierarchy", "HQGA.HQGA.classifier().squeeze", "out.squeeze.squeeze.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "HQGA.HQGA.classifier", "out.squeeze.squeeze.squeeze", "HQGA.HQGA.classifier"], "methods", ["home.repos.pwc.inspect_result.doc-doc_hqga.VQAModel.HQGA.HQGA.hierarchy"], ["", "def", "vq_encoder", "(", "self", ",", "vid_feats", ",", "q_output", ",", "cand_len", ",", "qns_global", ")", ":", "\n", "        ", "\"\"\"\n        :param vid_feats:\n        :param qas:\n        :param qas_lengths:\n        :return:\n        \"\"\"", "\n", "hierarchy_out", ",", "hierarchy_out_att_pool", ",", "num_clips", ",", "vis_graph", "=", "self", ".", "hierarchy", "(", "vid_feats", ",", "q_output", ",", "cand_len", ")", "\n", "if", "self", ".", "num_class", "==", "1", ":", "\n", "#for multi-choice QA", "\n", "            ", "out", "=", "self", ".", "classifier", "(", "qns_global", "*", "hierarchy_out_att_pool", ")", ".", "squeeze", "(", ")", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "5", ")", "\n", "", "else", ":", "\n", "            ", "cb_feat", "=", "torch", ".", "cat", "(", "[", "hierarchy_out_att_pool", ",", "qns_global", "]", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "classifier", "(", "cb_feat", ")", "\n", "if", "cb_feat", ".", "shape", "[", "0", "]", ">", "1", ":", "\n", "                ", "out", "=", "out", ".", "squeeze", "(", ")", "\n", "\n", "", "", "return", "out", ",", "vis_graph", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.VQAModel.HQGA.HQGA.hierarchy": [[151, 227], ["bbox_feats.size", "bbox_feats.view", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "HQGA.HQGA.bidirec_att", "v_output.view.view.view", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "HQGA.HQGA.gcn_region", "torch.sum.view", "torch.sum.view", "app_feats.reshape", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "HQGA.HQGA.merge_rf", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "HQGA.HQGA.bidirec_att", "v_output.view.view.view", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "HQGA.HQGA.gcn_frame", "torch.sum.view", "torch.sum.view", "mot_feats.size", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "HQGA.HQGA.merge_cm", "HQGA.HQGA.bidirec_att", "HQGA.HQGA.gcn_clip", "numpy.reshape", "HQGA.HQGA.gcn_atten_pool_region", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "HQGA.HQGA.gcn_atten_pool_frame", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "HQGA.HQGA.gcn_atten_pool_clip", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "numpy.tile", "numpy.expand_dims", "numpy.arange"], "methods", ["None"], ["", "def", "hierarchy", "(", "self", ",", "vid_feats", ",", "qas_feat", ",", "qas_lengths", ")", ":", "\n", "\n", "#############Go########################", "\n", "        ", "bbox_feats", ",", "app_feats", ",", "mot_feats", "=", "vid_feats", "\n", "if", "self", ".", "num_class", "==", "1", ":", "\n", "            ", "batch_size", "=", "bbox_feats", ".", "shape", "[", "0", "]", "\n", "batch_repeat", "=", "np", ".", "reshape", "(", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "batch_size", ")", ",", "\n", "axis", "=", "1", ")", ",", "[", "1", ",", "5", "]", ")", ",", "[", "-", "1", "]", ")", "\n", "bbox_feats", ",", "app_feats", ",", "mot_feats", "=", "bbox_feats", "[", "batch_repeat", "]", ",", "app_feats", "[", "batch_repeat", "]", ",", "mot_feats", "[", "batch_repeat", "]", "\n", "\n", "", "batch_size", ",", "num_clip", ",", "frame_pclip", ",", "region_pframe", ",", "feat_dim", "=", "bbox_feats", ".", "size", "(", ")", "\n", "\n", "xlen", "=", "num_clip", "*", "frame_pclip", "*", "region_pframe", "\n", "X", "=", "bbox_feats", ".", "view", "(", "batch_size", ",", "xlen", ",", "feat_dim", ")", "\n", "X_len", "=", "torch", ".", "tensor", "(", "[", "xlen", "]", "*", "batch_size", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "v_output", ",", "QO", "=", "self", ".", "bidirec_att", "(", "X", ",", "X_len", ",", "qas_feat", ",", "qas_lengths", ")", "\n", "v_output", "+=", "X", "\n", "\n", "v_output", "=", "v_output", ".", "view", "(", "-", "1", ",", "region_pframe", ",", "feat_dim", ")", "\n", "num_rpframe", "=", "torch", ".", "tensor", "(", "[", "region_pframe", "]", "*", "v_output", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "\n", "gcn_output_region", ",", "GO", "=", "self", ".", "gcn_region", "(", "v_output", ",", "num_rpframe", ")", "\n", "if", "self", ".", "num_class", ">=", "1", ":", "\n", "            ", "att_region", "=", "self", ".", "gcn_atten_pool_region", "(", "gcn_output_region", ")", "\n", "gcn_att_pool_region", "=", "torch", ".", "sum", "(", "gcn_output_region", "*", "att_region", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "gcn_att_pool_region", "=", "torch", ".", "sum", "(", "gcn_output_region", ",", "dim", "=", "1", ")", "\n", "\n", "#############GF########################", "\n", "", "gcn_region_output", "=", "gcn_att_pool_region", ".", "view", "(", "batch_size", ",", "num_clip", "*", "frame_pclip", ",", "-", "1", ")", "\n", "app_feats_f", "=", "app_feats", ".", "reshape", "(", "batch_size", ",", "num_clip", "*", "frame_pclip", ",", "-", "1", ")", "\n", "tmp", "=", "torch", ".", "cat", "(", "(", "app_feats_f", ",", "gcn_region_output", ")", ",", "-", "1", ")", "\n", "gcn_frame_input", "=", "self", ".", "merge_rf", "(", "tmp", ")", "\n", "\n", "xlen", "=", "num_clip", "*", "frame_pclip", "\n", "X", "=", "gcn_frame_input", "\n", "X_len", "=", "torch", ".", "tensor", "(", "[", "xlen", "]", "*", "batch_size", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "v_output", ",", "QF", "=", "self", ".", "bidirec_att", "(", "X", ",", "X_len", ",", "qas_feat", ",", "qas_lengths", ")", "\n", "v_output", "+=", "X", "\n", "\n", "v_output", "=", "v_output", ".", "view", "(", "-", "1", ",", "frame_pclip", ",", "feat_dim", ")", "\n", "num_fpclip", "=", "torch", ".", "tensor", "(", "[", "frame_pclip", "]", "*", "v_output", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "gcn_output_frame", ",", "GF", "=", "self", ".", "gcn_frame", "(", "v_output", ",", "num_fpclip", ")", "\n", "\n", "if", "self", ".", "num_class", ">=", "1", ":", "\n", "            ", "att_frame", "=", "self", ".", "gcn_atten_pool_frame", "(", "gcn_output_frame", ")", "\n", "gcn_att_pool_frame", "=", "torch", ".", "sum", "(", "gcn_output_frame", "*", "att_frame", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "gcn_att_pool_frame", "=", "torch", ".", "sum", "(", "gcn_output_frame", ",", "dim", "=", "1", ")", "\n", "\n", "#############GC########################", "\n", "", "gcn_frame_output", "=", "gcn_att_pool_frame", ".", "view", "(", "batch_size", ",", "num_clip", ",", "-", "1", ")", "\n", "\n", "batch_size", ",", "num_clip", ",", "_", "=", "mot_feats", ".", "size", "(", ")", "\n", "num_clips", "=", "torch", ".", "tensor", "(", "[", "num_clip", "]", "*", "batch_size", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "tmp", "=", "torch", ".", "cat", "(", "(", "gcn_frame_output", ",", "mot_feats", ")", ",", "-", "1", ")", "\n", "gcn_clip_input", "=", "self", ".", "merge_cm", "(", "tmp", ")", "\n", "\n", "\n", "v_output", ",", "QC", "=", "self", ".", "bidirec_att", "(", "gcn_clip_input", ",", "num_clips", ",", "qas_feat", ",", "qas_lengths", ")", "\n", "v_output", "+=", "gcn_clip_input", "\n", "\n", "gcn_output_clip", ",", "GC", "=", "self", ".", "gcn_clip", "(", "v_output", ",", "num_clips", ")", "\n", "\n", "if", "self", ".", "num_class", ">=", "1", ":", "\n", "            ", "att_clip", "=", "self", ".", "gcn_atten_pool_clip", "(", "gcn_output_clip", ")", "\n", "gcn_att_pool_clip", "=", "torch", ".", "sum", "(", "gcn_output_clip", "*", "att_clip", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "gcn_att_pool_clip", "=", "torch", ".", "sum", "(", "gcn_output_clip", ",", "dim", "=", "1", ")", "\n", "\n", "", "vis_graph", "=", "None", "\n", "\n", "return", "gcn_output_clip", ",", "gcn_att_pool_clip", ",", "num_clips", ",", "vis_graph", "\n", "", "", ""]], "home.repos.pwc.inspect_result.doc-doc_hqga.Encoder.EncoderVid.EncoderVid.__init__": [[8, 57], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "PosEmbed.positionalencoding1d().cuda", "EncoderVid.EncoderVid.framePos.unsqueeze().expand", "torch.Linear", "torch.Linear", "torch.ELU", "torch.ELU", "torch.Conv1d", "torch.Conv1d", "torch.ELU", "torch.ELU", "torch.Conv1d", "torch.Conv1d", "torch.ELU", "torch.ELU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "PosEmbed.positionalencoding1d", "EncoderVid.EncoderVid.framePos.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.doc-doc_hqga.Encoder.EncoderQns.EncoderQns.__init__", "home.repos.pwc.inspect_result.doc-doc_hqga.networks.PosEmbed.positionalencoding1d"], ["    ", "def", "__init__", "(", "self", ",", "feat_dim", ",", "bbox_dim", ",", "num_clip", ",", "num_frame", ",", "num_bbox", ",", "feat_hidden", ",", "pos_hidden", ",", "input_dropout_p", "=", "0.3", ")", ":", "\n", "\n", "        ", "super", "(", "EncoderVid", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim_feat", "=", "feat_dim", "\n", "self", ".", "dim_bbox", "=", "bbox_dim", "\n", "self", ".", "num_clip", "=", "num_clip", "\n", "self", ".", "num_bbox", "=", "num_bbox", "\n", "self", ".", "num_frame", "=", "num_frame", "\n", "self", ".", "dim_hidden", "=", "feat_hidden", "*", "2", "\n", "self", ".", "input_dropout_p", "=", "input_dropout_p", "\n", "\n", "self", ".", "use_bboxPos", "=", "True", "\n", "self", ".", "use_framePos", "=", "True", "\n", "input_dim", "=", "feat_dim", "\n", "\n", "if", "self", ".", "use_bboxPos", ":", "\n", "            ", "input_dim", "+=", "pos_hidden", "\n", "self", ".", "bbox_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "dim_bbox", ",", "pos_hidden", "//", "2", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "pos_hidden", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "# nn.Dropout(0.5),", "\n", "nn", ".", "Conv2d", "(", "pos_hidden", "//", "2", ",", "pos_hidden", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "pos_hidden", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "# nn.Dropout(0.5)", "\n", ")", "\n", "\n", "", "if", "self", ".", "use_framePos", ":", "\n", "            ", "input_dim", "+=", "pos_hidden", "\n", "self", ".", "framePos", "=", "positionalencoding1d", "(", "pos_hidden", ",", "self", ".", "num_frame", ")", ".", "cuda", "(", ")", "#(fnum, pos_dim)", "\n", "self", ".", "framePos", "=", "self", ".", "framePos", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "self", ".", "num_bbox", ",", "-", "1", ")", "#(fnum, num_bbox_perf, pos_dim)", "\n", "\n", "", "self", ".", "tohid", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "input_dim", ",", "self", ".", "dim_hidden", ")", ",", "\n", "nn", ".", "ELU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "# self.merge_fr = nn.Sequential(", "\n", "#      nn.Linear(self.dim_hidden*2, self.dim_hidden),", "\n", "#      nn.ELU(inplace=True))", "\n", "\n", "self", ".", "app_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "feat_dim", ",", "self", ".", "dim_hidden", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ELU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "mot_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "feat_dim", ",", "self", ".", "dim_hidden", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ELU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.Encoder.EncoderVid.EncoderVid.forward": [[59, 91], ["roi_feat.size", "[].view", "EncoderVid.EncoderVid.tohid", "app_feat.view.view.reshape", "EncoderVid.EncoderVid.app_conv().transpose", "app_feat.view.view.view", "EncoderVid.EncoderVid.mot_conv().transpose", "EncoderVid.EncoderVid.bbox_conv().permute", "bbox_pos.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "EncoderVid.EncoderVid.framePos.unsqueeze().expand", "framePos.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "EncoderVid.EncoderVid.app_conv", "EncoderVid.EncoderVid.mot_conv", "EncoderVid.EncoderVid.bbox_conv", "EncoderVid.EncoderVid.framePos.unsqueeze", "app_feat.view.view.transpose", "EncoderVid.EncoderVid.transpose", "[].view.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "vid_feats", ")", ":", "\n", "\n", "        ", "roi_feat", "=", "vid_feats", "[", "0", "]", "[", ":", ",", ":", ",", ":", ",", ":", ",", ":", "self", ".", "dim_feat", "]", "\n", "batch_size", ",", "num_clip", ",", "frame_pclip", ",", "region_pframe", ",", "dim_feat", "=", "roi_feat", ".", "size", "(", ")", "\n", "roi_bbox", "=", "vid_feats", "[", "0", "]", "[", ":", ",", ":", ",", ":", ",", ":", ",", "dim_feat", ":", "(", "dim_feat", "+", "self", ".", "dim_bbox", ")", "]", ".", "view", "(", "[", "batch_size", ",", "num_clip", "*", "frame_pclip", ",", "region_pframe", ",", "-", "1", "]", ")", "\n", "bbox_features", "=", "roi_feat", "\n", "\n", "if", "self", ".", "use_bboxPos", ":", "\n", "            ", "bbox_pos", "=", "self", ".", "bbox_conv", "(", "roi_bbox", ".", "permute", "(", "\n", "0", ",", "3", ",", "1", ",", "2", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "bbox_pos", "=", "bbox_pos", ".", "view", "(", "[", "batch_size", ",", "num_clip", ",", "frame_pclip", ",", "region_pframe", ",", "-", "1", "]", ")", "\n", "bbox_features", "=", "torch", ".", "cat", "(", "[", "roi_feat", ",", "bbox_pos", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "if", "self", ".", "use_framePos", ":", "\n", "            ", "framePos", "=", "self", ".", "framePos", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "framePos", "=", "framePos", ".", "view", "(", "batch_size", ",", "num_clip", ",", "frame_pclip", ",", "region_pframe", ",", "-", "1", ")", "\n", "bbox_features", "=", "torch", ".", "cat", "(", "[", "bbox_features", ",", "framePos", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "bbox_features", "=", "self", ".", "tohid", "(", "bbox_features", ")", "\n", "bbox_feat", "=", "bbox_features", "\n", "\n", "app_feat", "=", "vid_feats", "[", "-", "2", "]", "\n", "batch_size", ",", "num_clip", ",", "frame_pclip", ",", "dim", "=", "app_feat", ".", "shape", "\n", "app_feat", "=", "app_feat", ".", "reshape", "(", "batch_size", ",", "-", "1", ",", "dim", ")", "\n", "app_feat", "=", "self", ".", "app_conv", "(", "app_feat", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "app_feat", "=", "app_feat", ".", "view", "(", "batch_size", ",", "num_clip", ",", "frame_pclip", ",", "-", "1", ")", "\n", "\n", "mot_feat", "=", "vid_feats", "[", "-", "1", "]", "\n", "mot_feat", "=", "self", ".", "mot_conv", "(", "mot_feat", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "return", "(", "bbox_feat", ",", "app_feat", ",", "mot_feat", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.doc-doc_hqga.Encoder.EncoderQns.EncoderQns.__init__": [[7, 48], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "EncoderQns.EncoderQns.rnn_cell", "rnn_cell.lower", "torch.Linear", "torch.Linear", "torch.Embedding", "torch.Embedding", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.Embedding.from_pretrained", "torch.Embedding.from_pretrained", "rnn_cell.lower", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.doc-doc_hqga.Encoder.EncoderQns.EncoderQns.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_embed", ",", "dim_hidden", ",", "vocab_size", ",", "glove_embed", ",", "use_bert", "=", "True", ",", "\n", "input_dropout_p", "=", "0.2", ",", "rnn_dropout_p", "=", "0", ",", "\n", "n_layers", "=", "1", ",", "bidirectional", "=", "False", ",", "rnn_cell", "=", "'gru'", ")", ":", "\n", "        ", "\"\"\"\n        :param dim_embed:\n        :param dim_hidden:\n        :param vocab_size:\n        :param input_dropout_p:\n        :param rnn_dropout_p:\n        :param n_layers:\n        :param bidirectional:\n        :param rnn_cell:\n        \"\"\"", "\n", "super", "(", "EncoderQns", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim_hidden", "=", "dim_hidden", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "glove_embed", "=", "glove_embed", "\n", "self", ".", "input_dropout_p", "=", "input_dropout_p", "\n", "self", ".", "rnn_dropout_p", "=", "rnn_dropout_p", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "bidirectional", "=", "bidirectional", "\n", "self", ".", "rnn_cell", "=", "rnn_cell", "\n", "\n", "self", ".", "input_dropout", "=", "nn", ".", "Dropout", "(", "input_dropout_p", ")", "\n", "\n", "if", "rnn_cell", ".", "lower", "(", ")", "==", "'lstm'", ":", "\n", "            ", "self", ".", "rnn_cell", "=", "nn", ".", "LSTM", "\n", "", "elif", "rnn_cell", ".", "lower", "(", ")", "==", "'gru'", ":", "\n", "            ", "self", ".", "rnn_cell", "=", "nn", ".", "GRU", "\n", "\n", "", "self", ".", "use_bert", "=", "use_bert", "\n", "if", "self", ".", "use_bert", ":", "\n", "            ", "input_dim", "=", "768", "\n", "self", ".", "embedding", "=", "nn", ".", "Linear", "(", "input_dim", ",", "dim_embed", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "vocab_size", ",", "dim_embed", ")", "\n", "word_mat", "=", "torch", ".", "FloatTensor", "(", "np", ".", "load", "(", "self", ".", "glove_embed", ")", ")", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", ".", "from_pretrained", "(", "word_mat", ",", "freeze", "=", "False", ")", "\n", "\n", "", "self", ".", "rnn", "=", "self", ".", "rnn_cell", "(", "dim_embed", ",", "dim_hidden", ",", "n_layers", ",", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "bidirectional", ",", "dropout", "=", "self", ".", "rnn_dropout_p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.doc-doc_hqga.Encoder.EncoderQns.EncoderQns.forward": [[50, 64], ["EncoderQns.EncoderQns.embedding", "EncoderQns.EncoderQns.input_dropout", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "EncoderQns.EncoderQns.rnn", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "qns", ",", "qns_lengths", ",", "hidden", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n         encode question\n        :param qns:\n        :param qns_lengths:\n        :return:\n        \"\"\"", "\n", "\n", "qns_embed", "=", "self", ".", "embedding", "(", "qns", ")", "\n", "qns_embed", "=", "self", ".", "input_dropout", "(", "qns_embed", ")", "\n", "packed", "=", "pack_padded_sequence", "(", "qns_embed", ",", "qns_lengths", ",", "batch_first", "=", "True", ",", "enforce_sorted", "=", "False", ")", "\n", "packed_output", ",", "hidden", "=", "self", ".", "rnn", "(", "packed", ",", "hidden", ")", "\n", "output", ",", "_", "=", "pad_packed_sequence", "(", "packed_output", ",", "batch_first", "=", "True", ")", "\n", "return", "output", ",", "hidden", "\n", "", "", ""]]}