{"home.repos.pwc.inspect_result.purushottamkar_macer.None.testRepair.error_args": [[3, 9], ["print", "print", "print", "print", "sys.exit"], "function", ["None"], ["def", "error_args", "(", ")", ":", "\n", "    ", "print", "(", "\"Usage: python testRepair.py <dataset/path-to-test-file> <PredK>\"", ")", "\n", "print", "(", "\"Eg1: python data/input/fig_1a.c 5\"", ")", "\n", "print", "(", "\"Eg2: python testRepair.py tracer_single 5\"", ")", "\n", "print", "(", "\"Eg3: python testRepair.py deepfix 5\"", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.None.testRepair.checkRelevant": [[35, 50], ["line.split", "trgtErrAbsLines.splitlines", "predLL.append", "line.split", "line.split", "trgtText.splitlines", "predText.splitlines"], "function", ["None"], ["def", "checkRelevant", "(", "predText", ",", "predErrAbsLines", ",", "trgtText", ",", "trgtErrAbsLines", ")", ":", "\n", "    ", "trgtLL", "=", "[", "line", ".", "split", "(", ")", "for", "line", "in", "trgtErrAbsLines", ".", "splitlines", "(", ")", "]", "\n", "predLL", "=", "[", "]", "\n", "for", "line", "in", "predErrAbsLines", ":", "\n", "        ", "if", "line", "!=", "[", "]", ":", "\n", "            ", "predLL", ".", "append", "(", "line", ")", "\n", "", "", "isRelevant", "=", "trgtLL", "==", "predLL", "\n", "\n", "if", "isRelevant", "==", "False", ":", "\n", "        ", "tgt_text", "=", "[", "line", ".", "split", "(", ")", "for", "line", "in", "trgtText", ".", "splitlines", "(", ")", "]", "\n", "pred_text", "=", "[", "line", ".", "split", "(", ")", "for", "line", "in", "predText", ".", "splitlines", "(", ")", "]", "\n", "if", "tgt_text", "==", "pred_text", ":", "\n", "            ", "isRelevant", "=", "True", "\n", "\n", "", "", "return", "isRelevant", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.None.testRepair.checkRelevant2": [[51, 53], ["None"], "function", ["None"], ["", "def", "checkRelevant2", "(", "predAbsLine", ",", "trgtAbsLine", ")", ":", "\n", "    ", "return", "predAbsLine", "==", "trgtAbsLine", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.None.testRepair.calcAccuracy": [[54, 73], ["testRepair.checkRelevant", "srcT.DataStruct.Code.Code", "actLinesStr.splitlines", "srcT.DataStruct.Code.Code.getNumErrors", "int"], "function", ["home.repos.pwc.inspect_result.purushottamkar_macer.None.testRepair.checkRelevant", "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.getNumErrors"], ["", "def", "calcAccuracy", "(", "actLinesStr", ",", "predLineNums", ",", "trgtText", ",", "trgtErrAbsLines", ",", "predErrAbsLines", ",", "predErrLines", ",", "predText", ")", ":", "\n", "# isLocated", "\n", "    ", "isLocated", "=", "True", "\n", "\n", "try", ":", "\n", "        ", "for", "actLineNum", "in", "actLinesStr", ".", "splitlines", "(", ")", ":", "\n", "            ", "if", "int", "(", "actLineNum", ")", "not", "in", "predLineNums", ":", "\n", "                ", "isLocated", "=", "False", "\n", "", "", "", "except", "ValueError", "as", "e", ":", "\n", "        ", "isLocated", "=", "False", "\n", "\n", "# isRelevant", "\n", "", "isRelevant", "=", "checkRelevant", "(", "predText", ",", "predErrAbsLines", ",", "trgtText", ",", "trgtErrAbsLines", ")", "\n", "\n", "# isCompiled ", "\n", "predCodeObj", "=", "Code", "(", "predText", ")", "\n", "isCompiled", "=", "predCodeObj", ".", "getNumErrors", "(", ")", "==", "0", "\n", "\n", "return", "isLocated", ",", "isRelevant", ",", "isCompiled", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.None.testRepair.errLoc": [[77, 91], ["actLinesStr.split", "srcCodeObj.getCE_lines"], "function", ["home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.getCE_lines"], ["", "def", "errLoc", "(", "activeLocalization", ",", "srcCodeObj", ",", "actLinesStr", ",", "useTracers_errLoc", "=", "False", ")", ":", "\n", "    ", "'''If errorLocalization is active, return compiler reported line.\nElse, return the ideal (source-target text diff) lines'''", "\n", "if", "activeLocalization", ":", "\n", "        ", "predLines", "=", "srcCodeObj", ".", "getCE_lines", "(", ")", "\n", "\n", "if", "useTracers_errLoc", ":", "\n", "            ", "prevLines", "=", "[", "line", "-", "1", "for", "line", "in", "predLines", "]", "\n", "nextLines", "=", "[", "line", "+", "1", "for", "line", "in", "predLines", "]", "\n", "return", "predLines", "+", "prevLines", "+", "nextLines", "\n", "\n", "", "return", "predLines", "\n", "\n", "", "return", "actLinesStr", ".", "split", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.None.testRepair.repairErrLine": [[92, 123], ["srcT.DataStruct.Code.Code", "srcT.DataStruct.Code.Code.getNumErrors", "srcT.Prediction.Predict.predictAbs", "srcT.Common.Helper.joinList", "srcT.Common.Helper.joinList", "srcT.Symbolic.ConcreteWrapper.attemptConcretization", "srcT.Common.Helper.joinList", "srcT.Common.Helper.NoneAnd", "testRepair.checkRelevant2", "srcT.Common.Helper.NoneOr", "srcT.DataStruct.Code.Code", "copy.deepcopy", "copy.deepcopy", "srcT.Common.Helper.joinList", "srcT.DataStruct.Code.Code.getNumErrors", "srcT.DataStruct.Code.Code.getNumErrors"], "function", ["home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.getNumErrors", "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.predictAbs", "home.repos.pwc.inspect_result.purushottamkar_macer.Common.Helper.joinList", "home.repos.pwc.inspect_result.purushottamkar_macer.Common.Helper.joinList", "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.ConcreteWrapper.attemptConcretization", "home.repos.pwc.inspect_result.purushottamkar_macer.Common.Helper.joinList", "home.repos.pwc.inspect_result.purushottamkar_macer.Common.Helper.NoneAnd", "home.repos.pwc.inspect_result.purushottamkar_macer.None.testRepair.checkRelevant2", "home.repos.pwc.inspect_result.purushottamkar_macer.Common.Helper.NoneOr", "home.repos.pwc.inspect_result.purushottamkar_macer.Common.Helper.joinList", "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.getNumErrors", "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.getNumErrors"], ["", "def", "repairErrLine", "(", "srcCodeObj", ",", "repairLines", ",", "repairAbsLines", ",", "srcAbsLine", ",", "trgtLine", ",", "trgtAbsLine", ",", "errSetLine", ",", "lineNum", ",", "predErrAbsLines", ",", "predErrLines", ",", "predAtK", ")", ":", "\n", "    ", "'''Pred@K and concretize the best line (with least errors)'''", "\n", "isConcretized", ",", "isExactMatch", "=", "None", ",", "None", "\n", "bestPredAbsLine", ",", "bestPredLine", "=", "None", ",", "None", "\n", "bestPredAbsLines", ",", "bestPredLines", "=", "repairAbsLines", ",", "repairLines", "\n", "\n", "prePredCodeObj", "=", "Code", "(", "H", ".", "joinList", "(", "repairLines", ")", ")", "\n", "minNumErrs", "=", "prePredCodeObj", ".", "getNumErrors", "(", ")", "\n", "\n", "for", "predAbsLine", "in", "Predict", ".", "predictAbs", "(", "srcAbsLine", ",", "errSetLine", ",", "trgtAbsLine", ",", "predAtK", ")", ":", "\n", "# Create copy of previous obtained repairLines, and replace with predictedLines", "\n", "        ", "predLines", ",", "predAbsLines", "=", "copy", ".", "deepcopy", "(", "repairLines", ")", ",", "copy", ".", "deepcopy", "(", "repairAbsLines", ")", "\n", "predAbsLines", "[", "lineNum", "-", "1", "]", "=", "H", ".", "joinList", "(", "predAbsLine", ",", "joinStr", "=", "' '", ")", "\n", "\n", "# Concretize the predicted abstract fix", "\n", "predLine", ",", "tempIsConcretized", "=", "ConcreteWrapper", ".", "attemptConcretization", "(", "srcCodeObj", ",", "lineNum", ",", "predAbsLine", ")", "\n", "predLines", "[", "lineNum", "-", "1", "]", "=", "H", ".", "joinList", "(", "predLine", ",", "joinStr", "=", "' '", ")", "\n", "\n", "# Concretization success?", "\n", "isConcretized", "=", "H", ".", "NoneAnd", "(", "isConcretized", ",", "tempIsConcretized", ")", "\n", "tempIsExactMatch", "=", "checkRelevant2", "(", "predAbsLine", ",", "trgtAbsLine", ")", "\n", "isExactMatch", "=", "H", ".", "NoneOr", "(", "isExactMatch", ",", "tempIsExactMatch", ")", "\n", "\n", "# Find best prediction", "\n", "predCodeObj", "=", "Code", "(", "H", ".", "joinList", "(", "predLines", ")", ")", "\n", "if", "minNumErrs", "is", "None", "or", "predCodeObj", ".", "getNumErrors", "(", ")", "<", "minNumErrs", ":", "\n", "            ", "minNumErrs", "=", "predCodeObj", ".", "getNumErrors", "(", ")", "\n", "bestPredAbsLines", ",", "bestPredLines", "=", "predAbsLines", ",", "predLines", "\n", "bestPredAbsLine", ",", "bestPredLine", "=", "predAbsLine", ",", "predLine", "\n", "\n", "", "", "return", "bestPredAbsLine", ",", "bestPredLine", ",", "bestPredAbsLines", ",", "bestPredLines", ",", "isConcretized", ",", "isExactMatch", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.None.testRepair.runPerLine": [[125, 164], ["srcT.Common.Helper.joinList", "copy.deepcopy", "copy.deepcopy", "int", "min", "testRepair.repairErrLine", "srcT.Common.Helper.NoneAnd", "srcT.Common.Helper.NoneAnd", "srcErrLines.append", "srcErrAbsLines.append", "srcT.DataStruct.ClusterError.getErrSetStr", "predErrAbsLines.append", "predErrLines.append", "len", "len", "min", "len", "len"], "function", ["home.repos.pwc.inspect_result.purushottamkar_macer.Common.Helper.joinList", "home.repos.pwc.inspect_result.purushottamkar_macer.None.testRepair.repairErrLine", "home.repos.pwc.inspect_result.purushottamkar_macer.Common.Helper.NoneAnd", "home.repos.pwc.inspect_result.purushottamkar_macer.Common.Helper.NoneAnd", "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.ClusterError.getErrSetStr"], ["", "def", "runPerLine", "(", "srcCodeObj", ",", "srcLines", ",", "trgtLines", ",", "srcAbsLines", ",", "trgtAbsLines", ",", "errSet", ",", "lineNums", ",", "predAtK", ")", ":", "\n", "    ", "'''For each compiler error line, call predErrLine'''", "\n", "srcErrLines", ",", "srcErrAbsLines", "=", "[", "]", ",", "[", "]", "\n", "predErrLines", ",", "predErrAbsLines", "=", "[", "]", ",", "[", "]", "\n", "repairLines", ",", "repairAbsLines", "=", "copy", ".", "deepcopy", "(", "srcLines", ")", ",", "copy", ".", "deepcopy", "(", "srcAbsLines", ")", "\n", "isConcretized", ",", "isExactMatch", "=", "None", ",", "None", "\n", "\n", "# For each compiler flagged lineNums            ", "\n", "for", "lineNum", "in", "lineNums", ":", "\n", "        ", "lineNum", "=", "int", "(", "lineNum", ")", "\n", "\n", "if", "lineNum", "<=", "min", "(", "[", "len", "(", "srcLines", ")", ",", "len", "(", "srcAbsLines", ")", "]", ")", ":", "# If compiler returned valid line-num", "\n", "            ", "srcLine", ",", "srcAbsLine", "=", "srcLines", "[", "lineNum", "-", "1", "]", ",", "srcAbsLines", "[", "lineNum", "-", "1", "]", "# lineNum-1 since off-by-one                ", "\n", "trgtLine", ",", "trgtAbsLine", "=", "None", ",", "None", "\n", "if", "lineNum", "<=", "min", "(", "[", "len", "(", "trgtLines", ")", ",", "len", "(", "trgtAbsLines", ")", "]", ")", "and", "lineNum", ">", "0", ":", "\n", "                ", "trgtLine", ",", "trgtAbsLine", "=", "trgtLines", "[", "lineNum", "-", "1", "]", ",", "trgtAbsLines", "[", "lineNum", "-", "1", "]", "\n", "", "srcErrLines", ".", "append", "(", "srcLine", ")", ",", "srcErrAbsLines", ".", "append", "(", "srcAbsLine", ")", "\n", "\n", "# Use ErrSet at line=lineNum? Or at program-level", "\n", "errSetLine", "=", "errSet", "\n", "if", "flagErrSet_Line", ":", "\n", "                ", "errSetLine", "=", "ClusterError", ".", "getErrSetStr", "(", "AllErrs", ",", "srcCodeObj", ",", "lineNum", "=", "lineNum", ")", "\n", "\n", "# Predict@K the concrete repair line ", "\n", "", "predAbsLine", ",", "predLine", ",", "repairAbsLines", ",", "repairLines", ",", "tempIsConcretized", ",", "tempIsExactMatch", "=", "repairErrLine", "(", "srcCodeObj", ",", "repairLines", ",", "repairAbsLines", ",", "srcAbsLine", ",", "trgtLine", ",", "trgtAbsLine", ",", "errSetLine", ",", "lineNum", ",", "predErrAbsLines", ",", "predErrLines", ",", "predAtK", ")", "\n", "\n", "# Concretization success?", "\n", "isConcretized", "=", "H", ".", "NoneAnd", "(", "isConcretized", ",", "tempIsConcretized", ")", "\n", "isExactMatch", "=", "H", ".", "NoneAnd", "(", "isExactMatch", ",", "tempIsExactMatch", ")", "\n", "\n", "# Record the predicted abstract and concrete line", "\n", "if", "predAbsLine", "is", "not", "None", ":", "\n", "                ", "predErrAbsLines", ".", "append", "(", "predAbsLine", ")", "\n", "predErrLines", ".", "append", "(", "predLine", ")", "\n", "\n", "", "", "", "predText", "=", "H", ".", "joinList", "(", "repairLines", ")", "\n", "return", "predText", ",", "srcErrLines", ",", "predErrLines", ",", "srcErrAbsLines", ",", "predErrAbsLines", ",", "isConcretized", ",", "isExactMatch", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.None.testRepair.run": [[169, 218], ["timeit.default_timer", "df.iterrows", "timeit.default_timer", "print", "pandas.DataFrame", "str", "srcT.DataStruct.ClusterError.getErrSetStr", "srcT.Symbolic.AbstractWrapper.getProgAbstraction", "srcT.Symbolic.AbstractWrapper.getProgAbstraction", "testRepair.errLoc", "len", "round", "str", "str", "str().strip", "str().strip", "srcT.DataStruct.Code.Code", "srcT.DataStruct.Code.Code", "srcText.splitlines", "trgtText.splitlines", "srcCodeObj.getNumErrors", "testRepair.runPerLine", "testRepair.calcAccuracy", "results.append", "print", "str", "str", "len", "str", "str", "srcT.Common.Helper.joinList", "srcT.Common.Helper.joinList", "srcT.Common.Helper.joinLL", "srcT.Common.Helper.joinLL", "srcT.Common.Helper.joinLL", "srcT.Common.Helper.toInt", "srcT.Common.Helper.toInt", "srcT.Common.Helper.toInt", "srcT.Common.Helper.toInt", "srcT.Common.Helper.toInt"], "function", ["home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.ClusterError.getErrSetStr", "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractWrapper.getProgAbstraction", "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractWrapper.getProgAbstraction", "home.repos.pwc.inspect_result.purushottamkar_macer.None.testRepair.errLoc", "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.getNumErrors", "home.repos.pwc.inspect_result.purushottamkar_macer.None.testRepair.runPerLine", "home.repos.pwc.inspect_result.purushottamkar_macer.None.testRepair.calcAccuracy", "home.repos.pwc.inspect_result.purushottamkar_macer.Common.Helper.joinList", "home.repos.pwc.inspect_result.purushottamkar_macer.Common.Helper.joinList", "home.repos.pwc.inspect_result.purushottamkar_macer.Common.Helper.joinLL", "home.repos.pwc.inspect_result.purushottamkar_macer.Common.Helper.joinLL", "home.repos.pwc.inspect_result.purushottamkar_macer.Common.Helper.joinLL", "home.repos.pwc.inspect_result.purushottamkar_macer.Common.Helper.toInt", "home.repos.pwc.inspect_result.purushottamkar_macer.Common.Helper.toInt", "home.repos.pwc.inspect_result.purushottamkar_macer.Common.Helper.toInt", "home.repos.pwc.inspect_result.purushottamkar_macer.Common.Helper.toInt", "home.repos.pwc.inspect_result.purushottamkar_macer.Common.Helper.toInt"], ["", "def", "run", "(", "df", ",", "predAtK", ")", ":", "\n", "    ", "startTime", "=", "timer", "(", ")", "\n", "columns", "=", "[", "'id'", ",", "'sourceText'", ",", "'targetText'", ",", "'predText'", ",", "'actLineNums'", ",", "'predLineNums'", ",", "'actSourceLine'", ",", "'localSourceLine'", ",", "'targetLine'", ",", "'predLine'", ",", "'actSourceAbsLine'", ",", "'localSourceAbsLine'", ",", "'targetAbsLine'", ",", "'predAbsLine'", ",", "'errSet'", ",", "'isLocated'", ",", "'isRelevant'", ",", "'isConcretized'", ",", "'isExactMatch'", ",", "'isCompiled'", "]", "\n", "results", "=", "[", "]", "#True to turn on localization Module, False to turn off", "\n", "#allErrors = ClusterError.getAllErrs()", "\n", "\n", "# For each erroneous code", "\n", "for", "i", ",", "row", "in", "df", ".", "iterrows", "(", ")", ":", "\n", "        ", "srcID", ",", "trgtID", "=", "str", "(", "row", "[", "'id'", "]", ")", "+", "'_source'", ",", "str", "(", "row", "[", "'id'", "]", ")", "+", "'_target'", "\n", "srcText", ",", "trgtText", "=", "str", "(", "row", "[", "'sourceText'", "]", ")", ",", "str", "(", "row", "[", "'targetText'", "]", ")", "\n", "trgtErrLines", ",", "trgtErrAbsLines", "=", "str", "(", "row", "[", "'targetLineText'", "]", ")", ".", "strip", "(", ")", ",", "str", "(", "row", "[", "'targetLineAbs'", "]", ")", ".", "strip", "(", ")", "\n", "actLinesStr", "=", "str", "(", "row", "[", "'lineNums_Text'", "]", ")", "\n", "\n", "# Parse the source/erroneous code", "\n", "srcCodeObj", ",", "trgtCodeObj", "=", "Code", "(", "srcText", ",", "codeID", "=", "srcID", ")", ",", "Code", "(", "trgtText", ",", "codeID", "=", "trgtID", ")", "\n", "srcLines", ",", "trgtLines", "=", "srcText", ".", "splitlines", "(", ")", ",", "trgtText", ".", "splitlines", "(", ")", "\n", "errSet", "=", "ClusterError", ".", "getErrSetStr", "(", "AllErrs", ",", "srcCodeObj", ")", "\n", "\n", "# Fetch its abstraction", "\n", "srcAbsLines", "=", "AbstractWrapper", ".", "getProgAbstraction", "(", "srcCodeObj", ")", "\n", "trgtAbsLines", "=", "AbstractWrapper", ".", "getProgAbstraction", "(", "trgtCodeObj", ")", "\n", "\n", "#Fetch Line numbers", "\n", "lineNums", "=", "errLoc", "(", "activeLocalization", ",", "srcCodeObj", ",", "actLinesStr", ",", "useTracers_errLoc", ")", "\n", "\n", "if", "srcCodeObj", ".", "getNumErrors", "(", ")", ">", "0", ":", "# If there are errors", "\n", "# Run prediction on all erroneous lines", "\n", "            ", "predText", ",", "srcErrLines", ",", "predErrLines", ",", "srcErrAbsLines", ",", "predErrAbsLines", ",", "isConcretized", ",", "isExactMatch", "=", "runPerLine", "(", "srcCodeObj", ",", "srcLines", ",", "trgtLines", ",", "srcAbsLines", ",", "trgtAbsLines", ",", "errSet", ",", "lineNums", ",", "predAtK", ")", "\n", "\n", "# Calculate accuracy and log it                    ", "\n", "isLocated", ",", "isRelevant", ",", "isCompiled", "=", "calcAccuracy", "(", "actLinesStr", ",", "lineNums", ",", "trgtText", ",", "trgtErrAbsLines", ",", "predErrAbsLines", ",", "predErrLines", ",", "predText", ")", "\n", "\n", "results", ".", "append", "(", "(", "row", "[", "'id'", "]", ",", "srcText", ",", "trgtText", ",", "predText", ",", "actLinesStr", ",", "H", ".", "joinList", "(", "lineNums", ")", ",", "row", "[", "'sourceLineText'", "]", ",", "H", ".", "joinList", "(", "srcErrLines", ")", ",", "trgtErrLines", ",", "H", ".", "joinLL", "(", "predErrLines", ")", ",", "row", "[", "'sourceLineAbs'", "]", ",", "H", ".", "joinLL", "(", "srcErrAbsLines", ")", ",", "trgtErrAbsLines", ",", "H", ".", "joinLL", "(", "predErrAbsLines", ")", ",", "errSet", ",", "H", ".", "toInt", "(", "isLocated", ")", ",", "H", ".", "toInt", "(", "isRelevant", ")", ",", "H", ".", "toInt", "(", "isConcretized", ")", ",", "H", ".", "toInt", "(", "isExactMatch", ")", ",", "H", ".", "toInt", "(", "isCompiled", ")", ")", ")", "\n", "\n", "", "if", "i", "!=", "0", "and", "i", "%", "100", "==", "0", ":", "\n", "            ", "print", "(", "'\\t...'", ",", "i", ",", "'/'", ",", "len", "(", "df", ")", ",", "'Completed'", ")", "\n", "# break", "\n", "\n", "", "", "endTime", "=", "timer", "(", ")", "\n", "print", "(", "'\\n#Programs='", ",", "len", "(", "df", ")", ",", "'Time Taken='", ",", "round", "(", "endTime", "-", "startTime", ",", "2", ")", ",", "'(s)'", ")", "\n", "return", "pd", ".", "DataFrame", "(", "results", ",", "columns", "=", "columns", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.None.testRepair.runTest": [[219, 227], ["pandas.read_csv", "testRepair.run", "run.to_csv", "print", "print", "round", "df_results[].mean", "str", "str"], "function", ["home.repos.pwc.inspect_result.purushottamkar_macer.None.testRepair.run"], ["", "def", "runTest", "(", "fname", ",", "predAtK", ")", ":", "\n", "    ", "df_data", "=", "pd", ".", "read_csv", "(", "fname", ",", "encoding", "=", "\"ISO-8859-1\"", ")", "\n", "\n", "df_results", "=", "run", "(", "df_data", ",", "predAtK", ")", "\n", "df_results", ".", "to_csv", "(", "CF", ".", "pathOut", "+", "'results_PredAt_'", "+", "str", "(", "predAtK", ")", "+", "'.csv'", ")", "\n", "\n", "print", "(", "'-'", "*", "20", ",", "'\\n'", ",", "'Pred@'", ",", "str", "(", "predAtK", ")", "+", "'\\n'", "+", "'-'", "*", "20", ",", "'\\n'", ")", "\n", "print", "(", "'Repair accuracy:'", ",", "round", "(", "df_results", "[", "'isCompiled'", "]", ".", "mean", "(", ")", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.None.testRepair.repairProgram": [[228, 241], ["open().read", "srcT.DataStruct.Code.Code", "srcT.Symbolic.AbstractWrapper.getProgAbstraction", "srcT.DataStruct.ClusterError.getErrSetStr", "testRepair.errLoc", "testRepair.runPerLine", "print", "print", "print", "open().read.splitlines", "open", "srcT.DataStruct.Code.Code().getNumErrors", "srcT.DataStruct.Code.Code"], "function", ["home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractWrapper.getProgAbstraction", "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.ClusterError.getErrSetStr", "home.repos.pwc.inspect_result.purushottamkar_macer.None.testRepair.errLoc", "home.repos.pwc.inspect_result.purushottamkar_macer.None.testRepair.runPerLine", "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.getNumErrors"], ["", "def", "repairProgram", "(", "fname", ",", "predAtK", ")", ":", "\n", "    ", "srcText", "=", "open", "(", "fname", ")", ".", "read", "(", ")", "\n", "srcCodeObj", "=", "Code", "(", "srcText", ")", "\n", "srcAbsLines", "=", "AbstractWrapper", ".", "getProgAbstraction", "(", "srcCodeObj", ")", "\n", "errSet", "=", "ClusterError", ".", "getErrSetStr", "(", "AllErrs", ",", "srcCodeObj", ")", "\n", "lineNums", "=", "errLoc", "(", "True", ",", "srcCodeObj", ",", "''", ",", "useTracers_errLoc", ")", "\n", "\n", "predText", ",", "srcErrLines", ",", "predErrLines", ",", "srcErrAbsLines", ",", "predErrAbsLines", ",", "isConcretized", ",", "isExactMatch", "=", "runPerLine", "(", "srcCodeObj", ",", "srcText", ".", "splitlines", "(", ")", ",", "[", "]", ",", "srcAbsLines", ",", "[", "]", ",", "errSet", ",", "lineNums", ",", "predAtK", ")", "\n", "\n", "print", "(", "'-'", "*", "20", "+", "'\\nOriginal Code\\n'", "+", "'-'", "*", "20", "+", "'\\n'", "+", "srcText", ")", "\n", "print", "(", "'-'", "*", "20", "+", "'\\nMACER\\'s Repair\\n'", "+", "'-'", "*", "20", "+", "'\\n'", "+", "predText", ")", "\n", "print", "(", "'\\nCompiled Successfully? '", ",", "Code", "(", "predText", ")", ".", "getNumErrors", "(", ")", "==", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.None.train.train_lin_classifier": [[140, 144], ["sklearn.svm.LinearSVC", "sklearn.svm.LinearSVC.fit"], "function", ["None"], ["def", "train_lin_classifier", "(", "X", ",", "Y", ")", ":", "\n", "    ", "lin_svm", "=", "LinearSVC", "(", ")", "\n", "lin_svm", ".", "fit", "(", "X", ",", "Y", ")", "\n", "return", "lin_svm", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.None.train.train_logreg": [[145, 149], ["sklearn.linear_model.LogisticRegression", "sklearn.linear_model.LogisticRegression.fit"], "function", ["None"], ["", "def", "train_logreg", "(", "X", ",", "Y", ")", ":", "\n", "    ", "logreg", "=", "LogisticRegression", "(", ")", "\n", "logreg", ".", "fit", "(", "X", ",", "Y", ")", "\n", "return", "logreg", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.None.train.train_non_lin_classifier": [[160, 170], ["keras.models.Sequential", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.compile", "keras.models.Sequential.fit", "keras.layers.Dense", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.Dropout", "keras.layers.Dense"], "function", ["None"], ["def", "train_non_lin_classifier", "(", "X", ",", "Y", ")", ":", "\n", "    ", "model", "=", "Sequential", "(", ")", "\n", "model", ".", "add", "(", "Dense", "(", "128", ",", "input_shape", "=", "(", "X", ".", "shape", "[", "1", "]", ",", ")", ",", "activation", "=", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.2", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "128", ",", "input_shape", "=", "(", "X", ".", "shape", "[", "1", "]", ",", ")", ",", "activation", "=", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.2", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "1", ",", "activation", "=", "'sigmoid'", ")", ")", "\n", "model", ".", "compile", "(", "optimizer", "=", "'Adam'", ",", "loss", "=", "'binary_crossentropy'", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "model", ".", "fit", "(", "X", ",", "Y", ",", "epochs", "=", "10", ",", "batch_size", "=", "10", ",", "verbose", "=", "False", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.None.train.predict_repl": [[173, 178], ["repl_or_not.predict", "X.reshape"], "function", ["None"], ["def", "predict_repl", "(", "repl_or_not", ",", "X", ")", ":", "\n", "    ", "p", "=", "repl_or_not", ".", "predict", "(", "X", ".", "reshape", "(", "1", ",", "X", ".", "shape", "[", "0", "]", ")", ")", "[", "0", "]", "[", "0", "]", "\n", "if", "p", ">", "0.5", ":", "\n", "        ", "return", "1", "\n", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.None.train.train_insdel": [[196, 206], ["keras.models.Sequential", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.compile", "keras.models.Sequential.fit", "keras.layers.Dense", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.Dropout", "keras.layers.Dense"], "function", ["None"], ["def", "train_insdel", "(", "X", ",", "Y", ")", ":", "\n", "    ", "model", "=", "Sequential", "(", ")", "\n", "model", ".", "add", "(", "Dense", "(", "128", ",", "input_shape", "=", "(", "X", ".", "shape", "[", "1", "]", ",", ")", ",", "activation", "=", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.2", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "128", ",", "input_shape", "=", "(", "X", ".", "shape", "[", "1", "]", ",", ")", ",", "activation", "=", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.2", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "Y", ".", "shape", "[", "1", "]", ",", "activation", "=", "'softmax'", ")", ")", "\n", "model", ".", "compile", "(", "optimizer", "=", "'Adam'", ",", "loss", "=", "'categorical_crossentropy'", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "model", ".", "fit", "(", "X", ",", "Y", ",", "epochs", "=", "10", ",", "batch_size", "=", "10", ",", "verbose", "=", "False", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.None.train.predict_insdel": [[211, 214], ["numpy.argmax", "ins_del_model.predict", "X.reshape"], "function", ["None"], ["def", "predict_insdel", "(", "ins_del_model", ",", "X", ")", ":", "\n", "    ", "p", "=", "ins_del_model", ".", "predict", "(", "X", ".", "reshape", "(", "1", ",", "X", ".", "shape", "[", "0", "]", ")", ")", "[", "0", "]", "\n", "return", "np", ".", "argmax", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.None.train.train_repl_class": [[224, 234], ["keras.models.Sequential", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.compile", "keras.models.Sequential.fit", "keras.layers.Dense", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.Dropout", "keras.layers.Dense"], "function", ["None"], ["def", "train_repl_class", "(", "X", ",", "Y", ")", ":", "\n", "    ", "model", "=", "Sequential", "(", ")", "\n", "model", ".", "add", "(", "Dense", "(", "256", ",", "input_shape", "=", "(", "X", ".", "shape", "[", "1", "]", ",", ")", ",", "activation", "=", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.2", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "256", ",", "input_shape", "=", "(", "X", ".", "shape", "[", "1", "]", ",", ")", ",", "activation", "=", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.2", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "Y", ".", "shape", "[", "1", "]", ",", "activation", "=", "'softmax'", ")", ")", "\n", "model", ".", "compile", "(", "optimizer", "=", "'Adam'", ",", "loss", "=", "'categorical_crossentropy'", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "model", ".", "fit", "(", "X", ",", "Y", ",", "epochs", "=", "15", ",", "batch_size", "=", "10", ",", "verbose", "=", "False", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.None.train.predict_repl_class": [[237, 240], ["numpy.argmax", "qwe.predict", "X.reshape"], "function", ["None"], ["def", "predict_repl_class", "(", "X", ")", ":", "\n", "    ", "p", "=", "qwe", ".", "predict", "(", "X", ".", "reshape", "(", "1", ",", "X", ".", "shape", "[", "0", "]", ")", ")", "[", "0", "]", "\n", "return", "np", ".", "argmax", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.None.train.train_multiple_rankers": [[353, 365], ["range", "sklearn.multiclass.OneVsRestClassifier", "models[].fit", "sklearn.tree.DecisionTreeClassifier", "numpy.where", "numpy.where"], "function", ["None"], ["", "", "", "def", "train_multiple_rankers", "(", "oh_labels", ",", "int_labels", ",", "bigram", ",", "edit_pos", ")", ":", "\n", "    ", "models", "=", "[", "0", "]", "*", "oh_labels", ".", "shape", "[", "1", "]", "\n", "accuracies", "=", "[", "]", "\n", "glb_cnt", "=", "0", "\n", "test_cnt", "=", "0", "\n", "for", "i", "in", "range", "(", "oh_labels", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "models", "[", "i", "]", "=", "OneVsRestClassifier", "(", "DecisionTreeClassifier", "(", ")", ")", "\n", "train_X", "=", "bigram", "[", "np", ".", "where", "(", "int_labels", "==", "i", ")", "]", "\n", "train_Y", "=", "edit_pos", "[", "np", ".", "where", "(", "int_labels", "==", "i", ")", "]", "\n", "models", "[", "i", "]", ".", "fit", "(", "train_X", ",", "train_Y", ")", "\n", "#        print(i)", "\n", "", "return", "models", ",", "accuracies", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.None.testPredAtK.test": [[73, 464], ["testPredAtK.create_bigram", "edit_tkn.texts_to_matrix", "testPredAtK.create_feat_vector", "tkn.texts_to_matrix", "timeit.default_timer", "repl_class_model.predict", "ins_class_model.predict_proba", "del_class_model.predict_proba", "rest_class_model.predict_proba", "timeit.default_timer", "timeit.default_timer", "testPredAtK.get_dist", "testPredAtK.get_dist", "testPredAtK.get_ins_mask", "numpy.delete", "testPredAtK.get_dist", "testPredAtK.get_del_mask", "numpy.delete", "testPredAtK.get_dist", "testPredAtK.get_rest_mask", "numpy.delete", "sorted", "sorted", "sorted", "sorted", "timeit.default_timer", "range", "ins_del_model.predict", "timeit.default_timer", "new_encoder.transform", "numpy.zeros", "numpy.where", "timeit.default_timer", "testPredAtK.get_predicted_bigrams", "testPredAtK.get_predicted_edit_pos", "timeit.default_timer", "sorted", "timeit.default_timer", "repl_or_not.predict", "numpy.where", "repl_encoder.inverse_transform", "flat_rankers[].estimators_[].predict", "what_to_edit[].split", "token.startswith", "src_line.split", "sorted", "range", "range", "numpy.where", "ins_encoder.inverse_transform", "dl.append", "token.startswith", "len", "src_line.split", "range", "range", "range", "len", "src_line.split", "range", "range", "range", "len", "len", "len", "src_line.split", "src_line.split", "range", "numpy.where", "del_encoder.inverse_transform", "rest_encoder.inverse_transform", "add.append", "len", "sorted.remove", "sorted.remove", "len", "len", "sorted.remove", "len", "len", "len", "split_line[].replace", "len", "len", "len", "zip", "src_line.split", "range", "range", "len", "len", "range", "numpy.where", "len", "len", "len", "split_line[].replace", "len", "range", "range", "range", "len", "len", "range", "testPredAtK.ins_bigram_to_line", "range", "len", "len", "range", "len", "len", "split_line[].replace", "testPredAtK.ins_bigram_to_line", "testPredAtK.ins_bigram_to_line", "len", "split_line[].replace", "len", "split_line[].replace", "split_line[].replace", "sorted.remove", "split_line[].replace", "[].split", "len", "split_line[].replace", "len", "split_line[].replace", "sorted.remove", "split_line[].replace", "testPredAtK.make_target_line", "testPredAtK.make_target_line", "sorted.remove", "sorted.remove", "split_line[].replace", "sorted.remove", "split_line[].replace", "sorted.remove", "sorted.remove", "sorted.remove", "[].split"], "function", ["home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.create_bigram", "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.create_feat_vector", "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.get_dist", "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.get_dist", "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.get_ins_mask", "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.get_dist", "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.get_del_mask", "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.get_dist", "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.get_rest_mask", "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.get_predicted_bigrams", "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.get_predicted_edit_pos", "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.ins_bigram_to_line", "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.ins_bigram_to_line", "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.ins_bigram_to_line", "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.make_target_line", "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.make_target_line"], ["", "def", "test", "(", "src_line", ",", "errs", ",", "predAtK", ",", "tgt_line", ")", ":", "\n", "    ", "'''Compare with ideal predicted target line'''", "\n", "global", "crrct", "\n", "tmp_bigram", "=", "create_bigram", "(", "src_line", ")", "\n", "\n", "enc_tmp_bigram", "=", "edit_tkn", ".", "texts_to_matrix", "(", "tmp_bigram", ")", "\n", "\n", "tmp_feat_vector", "=", "create_feat_vector", "(", "errs", ",", "src_line", ")", "\n", "\n", "enc_tmp_feat_vector", "=", "tkn", ".", "texts_to_matrix", "(", "tmp_feat_vector", ")", "\n", "\n", "repl_p", "=", "repl_or_not", ".", "predict", "(", "enc_tmp_feat_vector", ")", "[", "0", "]", "[", "0", "]", "\n", "\n", "noRepl", "=", "ins_del_model", ".", "predict", "(", "enc_tmp_feat_vector", ")", "[", "0", "]", "\n", "\n", "start", "=", "timer", "(", ")", "\n", "\n", "repl_pred", "=", "repl_class_model", ".", "predict", "(", "enc_tmp_feat_vector", ")", "\n", "ins_pred", "=", "ins_class_model", ".", "predict_proba", "(", "enc_tmp_feat_vector", ")", "\n", "del_pred", "=", "del_class_model", ".", "predict_proba", "(", "enc_tmp_feat_vector", ")", "\n", "rest_pred", "=", "rest_class_model", ".", "predict_proba", "(", "enc_tmp_feat_vector", ")", "\n", "\n", "end", "=", "timer", "(", ")", "\n", "\n", "#     Globals.corr_cls+=end - start", "\n", "\n", "# msk=get_repl_mask()", "\n", "# repl_dist=np.delete(repl_dist,msk,1)", "\n", "\n", "start", "=", "timer", "(", ")", "\n", "\n", "repl_dist", "=", "get_dist", "(", "repl_clusters", ",", "enc_tmp_feat_vector", ")", "\n", "repl_pred", "=", "0.2", "*", "repl_dist", "+", "0.8", "*", "repl_pred", "\n", "repl_pred", "=", "repl_pred", "*", "repl_p", "\n", "\n", "ins_dist", "=", "get_dist", "(", "ins_clusters", ",", "enc_tmp_feat_vector", ")", "\n", "msk", "=", "get_ins_mask", "(", ")", "\n", "ins_dist", "=", "np", ".", "delete", "(", "ins_dist", ",", "msk", ",", "1", ")", "\n", "ins_pred", "=", "0.2", "*", "ins_dist", "+", "0.8", "*", "ins_pred", "\n", "ins_pred", "=", "ins_pred", "*", "(", "1", "-", "repl_p", ")", "*", "noRepl", "[", "1", "]", "\n", "\n", "del_dist", "=", "get_dist", "(", "del_clusters", ",", "enc_tmp_feat_vector", ")", "\n", "msk", "=", "get_del_mask", "(", ")", "\n", "del_dist", "=", "np", ".", "delete", "(", "del_dist", ",", "msk", ",", "1", ")", "\n", "del_pred", "=", "0.2", "*", "del_dist", "+", "0.8", "*", "del_pred", "\n", "del_pred", "=", "del_pred", "*", "(", "1", "-", "repl_p", ")", "*", "noRepl", "[", "2", "]", "\n", "\n", "rest_dist", "=", "get_dist", "(", "rest_clusters", ",", "enc_tmp_feat_vector", ")", "\n", "msk", "=", "get_rest_mask", "(", ")", "\n", "rest_dist", "=", "np", ".", "delete", "(", "rest_dist", ",", "msk", ",", "1", ")", "\n", "rest_pred", "=", "0.2", "*", "rest_dist", "+", "0.8", "*", "rest_pred", "\n", "rest_pred", "=", "rest_pred", "*", "(", "1", "-", "repl_p", ")", "*", "noRepl", "[", "0", "]", "\n", "\n", "\n", "rp", "=", "re", "=", "ins", "=", "de", "=", "0", "\n", "\n", "sorted_repl_pred", "=", "sorted", "(", "repl_pred", "[", "0", "]", ",", "reverse", "=", "True", ")", "\n", "sorted_ins_pred", "=", "sorted", "(", "ins_pred", "[", "0", "]", ",", "reverse", "=", "True", ")", "\n", "sorted_del_pred", "=", "sorted", "(", "del_pred", "[", "0", "]", ",", "reverse", "=", "True", ")", "\n", "sorted_rest_pred", "=", "sorted", "(", "rest_pred", "[", "0", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "end", "=", "timer", "(", ")", "\n", "\n", "#     Globals.rerank+= end - start", "\n", "\n", "targetLines", "=", "[", "]", "\n", "\n", "for", "i1", "in", "range", "(", "predAtK", ")", ":", "\n", "        ", "if", "sorted_repl_pred", "[", "rp", "]", ">=", "sorted_del_pred", "[", "de", "]", "and", "sorted_repl_pred", "[", "rp", "]", ">=", "sorted_ins_pred", "[", "ins", "]", "and", "sorted_repl_pred", "[", "rp", "]", ">=", "sorted_rest_pred", "[", "re", "]", ":", "\n", "            ", "repl_p", "=", "1", "\n", "edit", "=", "np", ".", "where", "(", "repl_pred", "[", "0", "]", "==", "sorted_repl_pred", "[", "rp", "]", ")", "\n", "rp", "+=", "1", "\n", "", "elif", "sorted_ins_pred", "[", "ins", "]", ">=", "sorted_del_pred", "[", "de", "]", "and", "sorted_ins_pred", "[", "ins", "]", ">=", "sorted_repl_pred", "[", "rp", "]", "and", "sorted_ins_pred", "[", "ins", "]", ">=", "sorted_rest_pred", "[", "re", "]", ":", "\n", "            ", "repl_p", "=", "0", "\n", "noRepl", "=", "1", "\n", "edit", "=", "np", ".", "where", "(", "ins_pred", "[", "0", "]", "==", "sorted_ins_pred", "[", "ins", "]", ")", "\n", "ins", "+=", "1", "\n", "", "elif", "sorted_del_pred", "[", "de", "]", ">=", "sorted_ins_pred", "[", "ins", "]", "and", "sorted_del_pred", "[", "de", "]", ">=", "sorted_repl_pred", "[", "rp", "]", "and", "sorted_del_pred", "[", "de", "]", ">=", "sorted_rest_pred", "[", "re", "]", ":", "\n", "            ", "repl_p", "=", "0", "\n", "noRepl", "=", "2", "\n", "edit", "=", "np", ".", "where", "(", "del_pred", "[", "0", "]", "==", "sorted_del_pred", "[", "de", "]", ")", "\n", "de", "+=", "1", "\n", "", "elif", "sorted_rest_pred", "[", "re", "]", ">=", "sorted_del_pred", "[", "de", "]", "and", "sorted_rest_pred", "[", "re", "]", ">=", "sorted_ins_pred", "[", "ins", "]", "and", "sorted_rest_pred", "[", "re", "]", ">=", "sorted_repl_pred", "[", "rp", "]", ":", "\n", "            ", "repl_p", "=", "0", "\n", "noRepl", "=", "0", "\n", "edit", "=", "np", ".", "where", "(", "rest_pred", "[", "0", "]", "==", "sorted_rest_pred", "[", "re", "]", ")", "\n", "re", "+=", "1", "\n", "\n", "\n", "", "start", "=", "timer", "(", ")", "\n", "if", "repl_p", "==", "1", ":", "\n", "            ", "what_to_edit", "=", "repl_encoder", ".", "inverse_transform", "(", "edit", "[", "0", "]", "[", ":", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "if", "noRepl", "==", "1", ":", "\n", "                ", "what_to_edit", "=", "ins_encoder", ".", "inverse_transform", "(", "edit", "[", "0", "]", "[", ":", "1", "]", ")", "\n", "", "elif", "noRepl", "==", "2", ":", "\n", "                ", "what_to_edit", "=", "del_encoder", ".", "inverse_transform", "(", "edit", "[", "0", "]", "[", ":", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "what_to_edit", "=", "rest_encoder", ".", "inverse_transform", "(", "edit", "[", "0", "]", "[", ":", "1", "]", ")", "\n", "\n", "", "", "edit", "=", "new_encoder", ".", "transform", "(", "what_to_edit", ")", "\n", "edit_pos", "=", "np", ".", "zeros", "(", "shape", "=", "enc_tmp_bigram", ".", "shape", ")", "\n", "ones", "=", "np", ".", "where", "(", "enc_tmp_bigram", "[", "0", "]", "==", "1", ")", "\n", "for", "one", "in", "ones", "[", "0", "]", ":", "\n", "            ", "edit_pos", "[", "0", "]", "[", "one", "]", "=", "flat_rankers", "[", "edit", "[", "0", "]", "]", ".", "estimators_", "[", "one", "]", ".", "predict", "(", "enc_tmp_bigram", ")", "\n", "# edit_pos=flat_rankers[edit[0]].predict(enc_tmp_bigram)", "\n", "\n", "", "end", "=", "timer", "(", ")", "\n", "#         Globals.bigram_rank+= end - start", "\n", "tmp_diff", "=", "what_to_edit", "[", "0", "]", ".", "split", "(", "'\\n'", ")", "[", "1", ":", "]", "\n", "pred_bigrams", "=", "get_predicted_bigrams", "(", "edit_pos", ",", "idx_to_bigram", ")", "\n", "where_to_edit", "=", "get_predicted_edit_pos", "(", "pred_bigrams", ",", "tmp_bigram", ")", "\n", "\n", "start", "=", "timer", "(", ")", "\n", "where_to_edit", "=", "sorted", "(", "where_to_edit", ")", "\n", "add", "=", "[", "]", "\n", "dl", "=", "[", "]", "\n", "for", "token", "in", "tmp_diff", ":", "\n", "            ", "if", "token", ".", "startswith", "(", "'-'", ")", ":", "\n", "                ", "dl", ".", "append", "(", "token", "[", "2", ":", "]", ")", "\n", "", "elif", "token", ".", "startswith", "(", "'+'", ")", ":", "\n", "                ", "add", ".", "append", "(", "token", "[", "2", ":", "]", ")", "\n", "", "", "spcl_flg", "=", "0", "\n", "if", "'17;\\n+ (\\n+ )'", "in", "what_to_edit", "[", "0", "]", ":", "\n", "            ", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "where_to_edit", ")", "-", "1", ":", "\n", "                ", "if", "where_to_edit", "[", "i", "]", "!=", "where_to_edit", "[", "i", "+", "1", "]", "-", "1", ":", "\n", "                    ", "where_to_edit", ".", "remove", "(", "where_to_edit", "[", "i", "]", ")", "\n", "i", "-=", "1", "\n", "", "else", ":", "\n", "                    ", "where_to_edit", ".", "remove", "(", "where_to_edit", "[", "i", "+", "1", "]", ")", "\n", "", "i", "+=", "1", "\n", "", "if", "len", "(", "where_to_edit", ")", ">", "1", ":", "\n", "                ", "split_line", "=", "src_line", ".", "split", "(", "' '", ")", "\n", "for", "l", "in", "range", "(", "len", "(", "split_line", ")", "-", "1", ")", ":", "\n", "                    ", "tmp_str", "=", "split_line", "[", "l", "]", "+", "' '", "+", "split_line", "[", "l", "+", "1", "]", "\n", "if", "tmp_str", "==", "tmp_bigram", "[", "0", "]", "[", "where_to_edit", "[", "-", "1", "]", "]", ":", "\n", "                        ", "split_line", "[", "l", "]", "=", "split_line", "[", "l", "]", "+", "' )'", "\n", "break", "\n", "", "", "for", "l", "in", "range", "(", "len", "(", "split_line", ")", "-", "1", ")", ":", "\n", "                    ", "tmp_str", "=", "split_line", "[", "l", "]", "+", "' '", "+", "split_line", "[", "l", "+", "1", "]", "\n", "if", "tmp_str", "==", "tmp_bigram", "[", "0", "]", "[", "where_to_edit", "[", "-", "2", "]", "]", ":", "\n", "                        ", "split_line", "[", "l", "]", "=", "split_line", "[", "l", "]", "+", "' ('", "\n", "spcl_flg", "=", "1", "\n", "break", "\n", "", "", "target_line", "=", "''", "\n", "for", "l", "in", "range", "(", "len", "(", "split_line", ")", ")", ":", "\n", "                    ", "target_line", "+=", "split_line", "[", "l", "]", "+", "' '", "\n", "", "target_line", "=", "target_line", "[", ":", "-", "1", "]", "\n", "#                 targetLines.append(target_line.split(' ')[:-1])", "\n", "if", "target_line", "==", "tgt_line", ":", "\n", "                    ", "crrct", "+=", "1", "\n", "return", "\n", "", "", "", "if", "'15;\\n- )\\n+ )'", "in", "what_to_edit", "[", "0", "]", ":", "\n", "            ", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "where_to_edit", ")", "-", "1", ":", "\n", "                ", "if", "where_to_edit", "[", "i", "]", "==", "where_to_edit", "[", "i", "+", "1", "]", "-", "1", ":", "\n", "                    ", "where_to_edit", ".", "remove", "(", "where_to_edit", "[", "i", "+", "1", "]", ")", "\n", "", "i", "+=", "1", "\n", "", "if", "len", "(", "where_to_edit", ")", ">", "1", ":", "\n", "                ", "split_line", "=", "src_line", ".", "split", "(", "' '", ")", "\n", "mask", "=", "[", "0", "]", "*", "len", "(", "split_line", ")", "\n", "for", "l", "in", "range", "(", "len", "(", "split_line", ")", "-", "1", ")", ":", "\n", "                    ", "tmp_str", "=", "split_line", "[", "l", "]", "+", "' '", "+", "split_line", "[", "l", "+", "1", "]", "\n", "if", "tmp_str", "==", "tmp_bigram", "[", "0", "]", "[", "where_to_edit", "[", "-", "1", "]", "]", ":", "\n", "                        ", "s", "=", "split_line", "[", "l", "]", ".", "replace", "(", "')'", ",", "''", ")", "\n", "mask", "[", "l", "]", "=", "1", "\n", "break", "\n", "", "", "for", "l", "in", "range", "(", "len", "(", "split_line", ")", "-", "1", ")", ":", "\n", "                    ", "tmp_str", "=", "split_line", "[", "l", "]", "+", "' '", "+", "split_line", "[", "l", "+", "1", "]", "\n", "if", "tmp_str", "==", "tmp_bigram", "[", "0", "]", "[", "where_to_edit", "[", "-", "2", "]", "]", ":", "\n", "                        ", "split_line", "[", "l", "]", "=", "split_line", "[", "l", "]", "+", "' )'", "\n", "spcl_flg", "=", "1", "\n", "break", "\n", "", "", "target_line", "=", "''", "\n", "for", "l", "in", "range", "(", "len", "(", "split_line", ")", ")", ":", "\n", "                    ", "if", "mask", "[", "l", "]", "==", "0", ":", "\n", "                        ", "target_line", "+=", "split_line", "[", "l", "]", "+", "' '", "\n", "", "", "target_line", "=", "target_line", "[", ":", "-", "1", "]", "\n", "#                 targetLines.append(target_line.split(' ')[:-1])", "\n", "if", "target_line", "==", "tgt_line", ":", "\n", "                    ", "crrct", "+=", "1", "\n", "return", "\n", "", "", "", "if", "spcl_flg", "==", "1", ":", "\n", "            ", "continue", "\n", "", "if", "add", "==", "[", "]", ":", "\n", "            ", "split_line", "=", "src_line", ".", "split", "(", "' '", ")", "\n", "where_to_edit", "=", "sorted", "(", "where_to_edit", ",", "reverse", "=", "True", ")", "\n", "mask", "=", "[", "0", "]", "*", "len", "(", "split_line", ")", "\n", "for", "k", "in", "range", "(", "len", "(", "dl", ")", ")", ":", "\n", "                ", "flg", "=", "0", "\n", "if", "len", "(", "split_line", ")", "==", "1", ":", "\n", "                        ", "s", "=", "split_line", "[", "0", "]", ".", "replace", "(", "dl", "[", "k", "]", ",", "''", ")", "\n", "if", "s", "==", "''", ":", "\n", "                            ", "mask", "[", "0", "]", "=", "1", "\n", "", "", "else", ":", "\n", "                    ", "for", "j", "in", "where_to_edit", ":", "\n", "                        ", "for", "l", "in", "range", "(", "len", "(", "split_line", ")", "-", "1", ")", ":", "\n", "                            ", "tmp_str", "=", "split_line", "[", "l", "]", "+", "' '", "+", "split_line", "[", "l", "+", "1", "]", "\n", "if", "tmp_str", "==", "tmp_bigram", "[", "0", "]", "[", "j", "]", ":", "\n", "                                ", "s", "=", "split_line", "[", "l", "]", ".", "replace", "(", "dl", "[", "k", "]", ",", "''", ")", "\n", "if", "s", "==", "''", ":", "\n", "                                    ", "mask", "[", "l", "]", "=", "1", "\n", "flg", "=", "1", "\n", "where_to_edit", ".", "remove", "(", "j", ")", "\n", "", "else", ":", "\n", "                                    ", "s", "=", "split_line", "[", "l", "+", "1", "]", ".", "replace", "(", "dl", "[", "k", "]", ",", "''", ")", "\n", "if", "s", "==", "''", ":", "\n", "                                        ", "mask", "[", "l", "+", "1", "]", "=", "1", "\n", "flg", "=", "1", "\n", "where_to_edit", ".", "remove", "(", "j", ")", "\n", "", "", "break", "\n", "", "", "if", "flg", "==", "1", ":", "\n", "                            ", "break", "\n", "", "", "", "", "target_line", "=", "''", "\n", "for", "l", "in", "range", "(", "len", "(", "split_line", ")", ")", ":", "\n", "                ", "if", "mask", "[", "l", "]", "!=", "1", ":", "\n", "                    ", "target_line", "+=", "split_line", "[", "l", "]", "+", "' '", "\n", "", "", "target_line", "=", "target_line", "[", ":", "-", "1", "]", "\n", "#             targetLines.append(target_line.split(' ')[:-1])", "\n", "if", "target_line", "==", "tgt_line", ":", "\n", "                ", "crrct", "+=", "1", "\n", "return", "\n", "", "", "elif", "dl", "==", "[", "]", ":", "\n", "            ", "target", "=", "[", "]", "\n", "add_all", "=", "''", "\n", "for", "x", "in", "add", ":", "\n", "                ", "add_all", "+=", "x", "+", "' '", "\n", "", "add_all", "=", "add_all", "[", ":", "-", "1", "]", "\n", "if", "tmp_bigram", "[", "0", "]", "==", "[", "]", ":", "\n", "                ", "target_line", "=", "add_all", "+", "' '", "+", "src_line", "\n", "#                 targetLines.append(target_line.split(' ')[:-1])", "\n", "if", "target_line", "==", "tgt_line", ":", "\n", "                    ", "crrct", "+=", "1", "\n", "return", "\n", "", "target_line", "=", "src_line", "+", "' '", "+", "add_all", "\n", "#                 targetLines.append(target_line.split(' ')[:-1])", "\n", "if", "target_line", "==", "tgt_line", ":", "\n", "                    ", "crrct", "+=", "1", "\n", "return", "\n", "", "", "else", ":", "\n", "                ", "for", "j", "in", "where_to_edit", ":", "\n", "                    ", "if", "j", "==", "0", ":", "\n", "                        ", "edited_bigram", "=", "add_all", "+", "' '", "+", "tmp_bigram", "[", "0", "]", "[", "j", "]", "\n", "#                         targetLines.append(ins_bigram_to_line(tmp_bigram,edited_bigram,j).split(' ')[:-1])", "\n", "if", "ins_bigram_to_line", "(", "tmp_bigram", ",", "edited_bigram", ",", "j", ")", "==", "tgt_line", ":", "\n", "                            ", "crrct", "+=", "1", "\n", "return", "\n", "", "", "if", "j", "-", "1", "not", "in", "where_to_edit", ":", "\n", "                        ", "edited_bigram", "=", "tmp_bigram", "[", "0", "]", "[", "j", "]", ".", "split", "(", "' '", ")", "[", "0", "]", "+", "' '", "+", "add_all", "+", "' '", "+", "tmp_bigram", "[", "0", "]", "[", "j", "]", ".", "split", "(", "' '", ")", "[", "1", "]", "\n", "#                         targetLines.append(ins_bigram_to_line(tmp_bigram,edited_bigram,j).split(' ')[:-1])", "\n", "if", "ins_bigram_to_line", "(", "tmp_bigram", ",", "edited_bigram", ",", "j", ")", "==", "tgt_line", ":", "\n", "                            ", "crrct", "+=", "1", "\n", "return", "\n", "", "", "edited_bigram", "=", "tmp_bigram", "[", "0", "]", "[", "j", "]", "+", "' '", "+", "add_all", "\n", "#                     targetLines.append(ins_bigram_to_line(tmp_bigram,edited_bigram,j).split(' ')[:-1])", "\n", "if", "ins_bigram_to_line", "(", "tmp_bigram", ",", "edited_bigram", ",", "j", ")", "==", "tgt_line", ":", "\n", "                        ", "crrct", "+=", "1", "\n", "return", "\n", "", "", "", "", "else", ":", "\n", "            ", "split_line", "=", "src_line", ".", "split", "(", "' '", ")", "\n", "\n", "mask", "=", "[", "0", "]", "*", "len", "(", "split_line", ")", "\n", "if", "len", "(", "add", ")", "==", "len", "(", "dl", ")", ":", "\n", "                ", "for", "x", ",", "y", "in", "zip", "(", "add", ",", "dl", ")", ":", "\n", "                    ", "flg", "=", "0", "\n", "for", "j", "in", "where_to_edit", ":", "\n", "                        ", "for", "l", "in", "range", "(", "len", "(", "split_line", ")", "-", "1", ")", ":", "\n", "                            ", "tmp_str", "=", "split_line", "[", "l", "]", "+", "' '", "+", "split_line", "[", "l", "+", "1", "]", "\n", "if", "tmp_str", "==", "tmp_bigram", "[", "0", "]", "[", "j", "]", "and", "mask", "[", "l", "]", "==", "0", "and", "mask", "[", "l", "+", "1", "]", "==", "0", ":", "\n", "                                ", "s", "=", "split_line", "[", "l", "]", ".", "replace", "(", "y", ",", "x", ")", "\n", "if", "s", "!=", "split_line", "[", "l", "]", ":", "\n", "                                    ", "mask", "[", "l", "]", "=", "s", "\n", "flg", "=", "1", "\n", "where_to_edit", ".", "remove", "(", "j", ")", "\n", "", "else", ":", "\n", "                                    ", "s", "=", "split_line", "[", "l", "+", "1", "]", ".", "replace", "(", "y", ",", "x", ")", "\n", "if", "s", "!=", "split_line", "[", "l", "+", "1", "]", ":", "\n", "                                        ", "mask", "[", "l", "+", "1", "]", "=", "s", "\n", "flg", "=", "1", "\n", "where_to_edit", ".", "remove", "(", "j", ")", "\n", "", "", "break", "\n", "", "", "if", "flg", "==", "1", ":", "\n", "                            ", "break", "\n", "", "", "", "target_line", "=", "''", "\n", "if", "tmp_bigram", "[", "0", "]", "!=", "[", "]", ":", "\n", "                    ", "for", "l", "in", "range", "(", "len", "(", "split_line", ")", ")", ":", "\n", "                        ", "if", "mask", "[", "l", "]", "!=", "0", ":", "\n", "                            ", "target_line", "+=", "mask", "[", "l", "]", "+", "' '", "\n", "", "else", ":", "\n", "                            ", "target_line", "+=", "split_line", "[", "l", "]", "+", "' '", "\n", "", "", "target_line", "=", "target_line", "[", ":", "-", "1", "]", "\n", "", "", "else", ":", "\n", "                ", "add_all", "=", "''", "\n", "for", "x", "in", "add", ":", "\n", "                    ", "add_all", "+=", "x", "+", "' '", "\n", "", "add_all", "=", "add_all", "[", ":", "-", "1", "]", "\n", "split_line", "=", "src_line", ".", "split", "(", "' '", ")", "\n", "for", "k", "in", "range", "(", "len", "(", "dl", ")", "-", "1", ")", ":", "\n", "                    ", "flg", "=", "0", "\n", "for", "j", "in", "where_to_edit", ":", "\n", "                        ", "for", "l", "in", "range", "(", "len", "(", "split_line", ")", "-", "1", ")", ":", "\n", "                            ", "tmp_str", "=", "split_line", "[", "l", "]", "+", "' '", "+", "split_line", "[", "l", "+", "1", "]", "\n", "if", "tmp_str", "==", "tmp_bigram", "[", "0", "]", "[", "j", "]", ":", "\n", "                                ", "s", "=", "split_line", "[", "l", "]", ".", "replace", "(", "dl", "[", "k", "]", ",", "''", ")", "\n", "if", "s", "==", "''", ":", "\n", "                                    ", "mask", "[", "l", "]", "=", "1", "\n", "flg", "=", "1", "\n", "where_to_edit", ".", "remove", "(", "j", ")", "\n", "", "else", ":", "\n", "                                    ", "s", "=", "split_line", "[", "l", "+", "1", "]", ".", "replace", "(", "dl", "[", "k", "]", ",", "''", ")", "\n", "if", "s", "==", "''", ":", "\n", "                                        ", "mask", "[", "l", "+", "1", "]", "=", "1", "\n", "flg", "=", "1", "\n", "where_to_edit", ".", "remove", "(", "j", ")", "\n", "", "", "break", "\n", "", "", "if", "flg", "==", "1", ":", "\n", "                            ", "break", "\n", "", "", "", "flg", "=", "0", "\n", "for", "j", "in", "where_to_edit", ":", "\n", "                    ", "for", "l", "in", "range", "(", "len", "(", "split_line", ")", "-", "1", ")", ":", "\n", "                        ", "tmp_str", "=", "split_line", "[", "l", "]", "+", "' '", "+", "split_line", "[", "l", "+", "1", "]", "\n", "if", "tmp_str", "==", "tmp_bigram", "[", "0", "]", "[", "j", "]", ":", "\n", "                            ", "s", "=", "split_line", "[", "l", "]", ".", "replace", "(", "dl", "[", "-", "1", "]", ",", "add_all", ")", "\n", "if", "s", "!=", "split_line", "[", "l", "]", "and", "mask", "[", "l", "]", "!=", "1", ":", "\n", "                                ", "mask", "[", "l", "]", "=", "s", "\n", "flg", "=", "1", "\n", "where_to_edit", ".", "remove", "(", "j", ")", "\n", "", "else", ":", "\n", "                                ", "s", "=", "split_line", "[", "l", "+", "1", "]", ".", "replace", "(", "dl", "[", "-", "1", "]", ",", "add_all", ")", "\n", "if", "s", "!=", "split_line", "[", "l", "+", "1", "]", ":", "\n", "                                    ", "mask", "[", "l", "+", "1", "]", "=", "s", "\n", "flg", "=", "1", "\n", "where_to_edit", ".", "remove", "(", "j", ")", "\n", "", "", "break", "\n", "", "", "if", "flg", "==", "1", ":", "\n", "                        ", "break", "\n", "", "", "target_line", "=", "''", "\n", "for", "l", "in", "range", "(", "len", "(", "split_line", ")", ")", ":", "\n", "                    ", "if", "mask", "[", "l", "]", "!=", "0", "and", "mask", "[", "l", "]", "!=", "1", ":", "\n", "                        ", "target_line", "+=", "mask", "[", "l", "]", "+", "' '", "\n", "", "elif", "mask", "[", "l", "]", "!=", "1", ":", "\n", "                        ", "target_line", "+=", "split_line", "[", "l", "]", "+", "' '", "\n", "", "", "target_line", "=", "target_line", "[", ":", "-", "1", "]", "\n", "#             targetLines.append(target_line.split(' ')[:-1])", "\n", "", "if", "target_line", "==", "tgt_line", ":", "\n", "                ", "crrct", "+=", "1", "\n", "return", "\n", "", "add_all", "=", "''", "\n", "for", "x", "in", "add", ":", "\n", "                ", "add_all", "+=", "x", "+", "' '", "\n", "", "add_all", "=", "add_all", "[", ":", "-", "1", "]", "\n", "split_line", "=", "src_line", ".", "split", "(", "' '", ")", "\n", "mask", "=", "[", "0", "]", "*", "len", "(", "split_line", ")", "\n", "for", "k", "in", "range", "(", "len", "(", "dl", ")", ")", ":", "\n", "                ", "flg", "=", "0", "\n", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "where_to_edit", ")", ":", "\n", "                    ", "for", "l", "in", "range", "(", "len", "(", "split_line", ")", "-", "1", ")", ":", "\n", "                        ", "tmp_str", "=", "split_line", "[", "l", "]", "+", "' '", "+", "split_line", "[", "l", "+", "1", "]", "\n", "if", "tmp_str", "==", "tmp_bigram", "[", "0", "]", "[", "where_to_edit", "[", "i", "]", "]", ":", "\n", "                            ", "s", "=", "split_line", "[", "l", "]", ".", "replace", "(", "dl", "[", "k", "]", ",", "''", ")", "\n", "if", "s", "==", "''", ":", "\n", "                                ", "mask", "[", "l", "]", "=", "1", "\n", "flg", "=", "1", "\n", "", "s", "=", "split_line", "[", "l", "+", "1", "]", ".", "replace", "(", "dl", "[", "k", "]", ",", "''", ")", "\n", "if", "s", "==", "''", ":", "\n", "                                ", "mask", "[", "l", "+", "1", "]", "=", "1", "\n", "flg", "=", "1", "\n", "", "break", "\n", "", "", "if", "flg", "==", "1", ":", "\n", "                        ", "break", "\n", "", "i", "+=", "1", "\n", "", "", "for", "j", "in", "where_to_edit", ":", "\n", "                ", "for", "l", "in", "range", "(", "len", "(", "split_line", ")", "-", "1", ")", ":", "\n", "                    ", "tmp_str", "=", "tmp_bigram", "[", "0", "]", "[", "j", "]", "\n", "if", "tmp_str", "==", "split_line", "[", "l", "]", "+", "' '", "+", "split_line", "[", "l", "+", "1", "]", ":", "\n", "                        ", "if", "mask", "[", "l", "]", "!=", "1", ":", "\n", "                            ", "split_line", "[", "l", "]", "=", "split_line", "[", "l", "]", "+", "' '", "+", "add_all", "\n", "#                             targetLines.append(make_target_line(split_line,mask).split(' ')[:-1])", "\n", "if", "make_target_line", "(", "split_line", ",", "mask", ")", "==", "tgt_line", ":", "\n", "                                ", "crrct", "+=", "1", "\n", "return", "\n", "", "", "if", "mask", "[", "l", "+", "1", "]", "!=", "1", ":", "\n", "                            ", "split_line", "[", "l", "+", "1", "]", "=", "split_line", "[", "l", "+", "1", "]", "+", "' '", "+", "add_all", "\n", "#                             targetLines.append(make_target_line(split_line,mask).split(' ')[:-1])", "\n", "if", "make_target_line", "(", "split_line", ",", "mask", ")", "==", "tgt_line", ":", "\n", "                                ", "crrct", "+=", "1", "\n", "return", "\n", "\n", "", "", "", "", "", "", "end", "=", "timer", "(", ")", "\n", "#         Globals.fixer+= end - start", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.None.testPredAtK.make_target_line": [[467, 474], ["range", "len"], "function", ["None"], ["", "", "def", "make_target_line", "(", "split_line", ",", "mask", ")", ":", "\n", "    ", "target_line", "=", "''", "\n", "for", "l", "in", "range", "(", "len", "(", "split_line", ")", ")", ":", "\n", "        ", "if", "mask", "[", "l", "]", "==", "0", ":", "\n", "            ", "target_line", "+=", "split_line", "[", "l", "]", "+", "' '", "\n", "", "", "target_line", "=", "target_line", "[", ":", "-", "1", "]", "\n", "return", "target_line", "\n", "", "def", "create_bigram", "(", "src_line", ")", ":", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.None.testPredAtK.create_bigram": [[474, 484], ["src_line.split", "range", "tmp_bigram.append", "tmp_lst.append", "len"], "function", ["None"], ["", "def", "create_bigram", "(", "src_line", ")", ":", "\n", "    ", "tmp_bigram", "=", "[", "]", "\n", "tmp_lst", "=", "[", "]", "\n", "tmp_line", "=", "src_line", ".", "split", "(", "' '", ")", "\n", "for", "ind", "in", "range", "(", "len", "(", "tmp_line", ")", "-", "1", ")", ":", "\n", "        ", "tmp_str", "=", "''", "\n", "tmp_str", "+=", "tmp_line", "[", "ind", "]", "+", "' '", "+", "tmp_line", "[", "ind", "+", "1", "]", "\n", "tmp_lst", ".", "append", "(", "tmp_str", ")", "\n", "", "tmp_bigram", ".", "append", "(", "tmp_lst", ")", "\n", "return", "tmp_bigram", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.None.testPredAtK.create_feat_vector": [[485, 497], ["errs.split", "src_line.split", "range", "tmp_feat_vector.append", "tmp_lst.append", "tmp_lst.append", "tmp_lst.append", "len", "err.split"], "function", ["None"], ["", "def", "create_feat_vector", "(", "errs", ",", "src_line", ")", ":", "\n", "    ", "tmp_feat_vector", "=", "[", "]", "\n", "tmp_lst", "=", "[", "]", "\n", "for", "err", "in", "errs", ".", "split", "(", "' '", ")", ":", "\n", "        ", "tmp_lst", ".", "append", "(", "err", ".", "split", "(", "';'", ")", "[", "0", "]", ")", "\n", "", "tmp_line", "=", "src_line", ".", "split", "(", "' '", ")", "\n", "for", "abst", "in", "tmp_line", ":", "\n", "        ", "tmp_lst", ".", "append", "(", "abst", ")", "\n", "", "for", "ind", "in", "range", "(", "len", "(", "tmp_line", ")", "-", "1", ")", ":", "\n", "        ", "tmp_lst", ".", "append", "(", "tmp_line", "[", "ind", "]", "+", "' '", "+", "tmp_line", "[", "ind", "+", "1", "]", ")", "\n", "", "tmp_feat_vector", ".", "append", "(", "tmp_lst", ")", "\n", "return", "tmp_feat_vector", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.None.testPredAtK.get_predicted_bigrams": [[498, 506], ["numpy.where", "idx_to_bigram.get", "predicted_bigrams.append", "predicted_bigrams.append"], "function", ["None"], ["", "def", "get_predicted_bigrams", "(", "specific_prediction", ",", "idx_to_bigram", ")", ":", "\n", "    ", "predicted_bigrams", "=", "[", "]", "\n", "for", "x", "in", "np", ".", "where", "(", "specific_prediction", "[", "0", "]", "==", "1", ")", "[", "0", "]", ":", "\n", "        ", "if", "idx_to_bigram", ".", "get", "(", "x", ")", "!=", "None", ":", "\n", "            ", "predicted_bigrams", ".", "append", "(", "idx_to_bigram", "[", "x", "]", ")", "\n", "", "else", ":", "\n", "            ", "predicted_bigrams", ".", "append", "(", "-", "1", ")", "\n", "", "", "return", "predicted_bigrams", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.None.testPredAtK.get_predicted_edit_pos": [[507, 517], ["range", "len", "range", "pred_edit_pos.append", "len", "[].lower", "pred_edit_pos.append"], "function", ["None"], ["", "def", "get_predicted_edit_pos", "(", "predicted_bigrams", ",", "act_bigram", ")", ":", "\n", "    ", "pred_edit_pos", "=", "[", "]", "\n", "for", "x", "in", "range", "(", "len", "(", "predicted_bigrams", ")", ")", ":", "\n", "        ", "if", "predicted_bigrams", "[", "x", "]", "==", "-", "1", ":", "\n", "            ", "pred_edit_pos", ".", "append", "(", "-", "1", ")", "\n", "continue", "\n", "", "for", "y", "in", "range", "(", "len", "(", "act_bigram", "[", "0", "]", ")", ")", ":", "\n", "            ", "if", "predicted_bigrams", "[", "x", "]", "==", "act_bigram", "[", "0", "]", "[", "y", "]", ".", "lower", "(", ")", ":", "\n", "                ", "pred_edit_pos", ".", "append", "(", "y", ")", "\n", "", "", "", "return", "pred_edit_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.None.testPredAtK.ins_bigram_to_line": [[518, 531], ["range", "len", "edited_bigram.split", "[].split"], "function", ["None"], ["", "def", "ins_bigram_to_line", "(", "tmp_bigram", ",", "edited_bigram", ",", "j", ")", ":", "\n", "    ", "target_line", "=", "''", "\n", "if", "j", "==", "0", ":", "\n", "        ", "target_line", "+=", "edited_bigram", "+", "' '", "\n", "", "else", ":", "\n", "        ", "target_line", "+=", "tmp_bigram", "[", "0", "]", "[", "0", "]", "+", "' '", "\n", "", "for", "x", "in", "range", "(", "1", ",", "len", "(", "tmp_bigram", "[", "0", "]", ")", ")", ":", "\n", "        ", "if", "x", "==", "j", ":", "\n", "            ", "target_line", "+=", "edited_bigram", ".", "split", "(", "' '", ",", "maxsplit", "=", "1", ")", "[", "-", "1", "]", "+", "' '", "\n", "", "else", ":", "\n", "            ", "target_line", "+=", "tmp_bigram", "[", "0", "]", "[", "x", "]", ".", "split", "(", "' '", ",", "maxsplit", "=", "1", ")", "[", "-", "1", "]", "+", "' '", "\n", "", "", "target_line", "=", "target_line", "[", ":", "-", "1", "]", "\n", "return", "target_line", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.None.testPredAtK.filter_bigrams": [[532, 548], ["keras.preprocessing.text.Tokenizer", "keras.preprocessing.text.Tokenizer.fit_on_texts", "numpy.zeros", "get_idx_to_bigram", "tkns.startswith", "range", "len", "int", "idx_to_bigram.get", "tkns[].lower", "idx_to_bigram.get", "str", "idxs.append", "str"], "function", ["None"], ["", "def", "filter_bigrams", "(", "tmp_diff", ",", "tmp_enc_src_bigram", ",", "idx_to_bigram", ")", ":", "\n", "    ", "idxs", "=", "[", "]", "\n", "for", "tkns", "in", "tmp_diff", ":", "\n", "        ", "if", "tkns", ".", "startswith", "(", "'-'", ")", ":", "\n", "            ", "for", "k", "in", "range", "(", "1", ",", "tmp_enc_src_bigram", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "if", "idx_to_bigram", ".", "get", "(", "k", ")", "!=", "None", ":", "\n", "                    ", "if", "tkns", "[", "2", ":", "]", ".", "lower", "(", ")", "in", "idx_to_bigram", ".", "get", "(", "k", ")", ":", "\n", "                        ", "if", "str", "(", "k", ")", "not", "in", "idxs", ":", "\n", "                            ", "idxs", ".", "append", "(", "str", "(", "k", ")", ")", "\n", "", "", "", "", "", "", "tmp_tkn", "=", "keras", ".", "preprocessing", ".", "text", ".", "Tokenizer", "(", "filters", "=", "''", ")", "\n", "tmp_tkn", ".", "fit_on_texts", "(", "idxs", ")", "\n", "filt_repl_enc_src_bigram", "=", "np", ".", "zeros", "(", "(", "1", ",", "len", "(", "tmp_tkn", ".", "word_index", ")", "+", "1", ")", ")", "\n", "for", "idx", "in", "idxs", ":", "\n", "        ", "filt_repl_enc_src_bigram", "[", "0", "]", "[", "tmp_tkn", ".", "word_index", "[", "idx", "]", "]", "=", "tmp_enc_src_bigram", "[", "0", "]", "[", "int", "(", "idx", ")", "]", "\n", "", "tmp_idx_to_bigram", "=", "get_idx_to_bigram", "(", "idx_to_bigram", ",", "tmp_tkn", ".", "word_index", ")", "\n", "return", "tmp_idx_to_bigram", ",", "filt_repl_enc_src_bigram", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.None.testPredAtK.get_repl_mask": [[549, 556], ["range", "numpy.array", "len", "np.array.append"], "function", ["None"], ["", "def", "get_repl_mask", "(", ")", ":", "\n", "    ", "msk", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "repl_clusters", ")", ")", ":", "\n", "        ", "if", "i", "not", "in", "repl_class_model", ".", "classes_", ":", "\n", "            ", "msk", ".", "append", "(", "i", ")", "\n", "", "", "msk", "=", "np", ".", "array", "(", "msk", ")", "\n", "return", "msk", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.None.testPredAtK.get_ins_mask": [[557, 564], ["range", "numpy.array", "len", "np.array.append"], "function", ["None"], ["", "def", "get_ins_mask", "(", ")", ":", "\n", "    ", "msk", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "ins_clusters", ")", ")", ":", "\n", "        ", "if", "i", "not", "in", "ins_class_model", ".", "classes_", ":", "\n", "            ", "msk", ".", "append", "(", "i", ")", "\n", "", "", "msk", "=", "np", ".", "array", "(", "msk", ")", "\n", "return", "msk", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.None.testPredAtK.get_del_mask": [[565, 572], ["range", "numpy.array", "len", "np.array.append"], "function", ["None"], ["", "def", "get_del_mask", "(", ")", ":", "\n", "    ", "msk", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "del_clusters", ")", ")", ":", "\n", "        ", "if", "i", "not", "in", "del_class_model", ".", "classes_", ":", "\n", "            ", "msk", ".", "append", "(", "i", ")", "\n", "", "", "msk", "=", "np", ".", "array", "(", "msk", ")", "\n", "return", "msk", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.None.testPredAtK.get_rest_mask": [[573, 580], ["range", "numpy.array", "len", "np.array.append"], "function", ["None"], ["", "def", "get_rest_mask", "(", ")", ":", "\n", "    ", "msk", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "rest_clusters", ")", ")", ":", "\n", "        ", "if", "i", "not", "in", "rest_class_model", ".", "classes_", ":", "\n", "            ", "msk", ".", "append", "(", "i", ")", "\n", "", "", "msk", "=", "np", ".", "array", "(", "msk", ")", "\n", "return", "msk", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.None.testPredAtK.get_dist": [[581, 594], ["range", "numpy.array", "sklearn.metrics.pairwise.euclidean_distances", "numpy.exp", "len", "np.array.append", "np.array.append", "sklearn.metrics.pairwise.euclidean_distances", "numpy.where", "min"], "function", ["None"], ["", "def", "get_dist", "(", "clusters", ",", "enc_tmp_feat_vector", ")", ":", "\n", "    ", "clst", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "clusters", ")", ")", ":", "\n", "        ", "if", "clusters", "[", "i", "]", ".", "cluster_centers_", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "            ", "clst", ".", "append", "(", "clusters", "[", "i", "]", ".", "cluster_centers_", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "clst_dist", "=", "euclidean_distances", "(", "enc_tmp_feat_vector", ",", "clusters", "[", "i", "]", ".", "cluster_centers_", ")", "[", "0", "]", "\n", "ind", "=", "np", ".", "where", "(", "clst_dist", "==", "min", "(", "clst_dist", ")", ")", "[", "0", "]", "[", ":", "1", "]", "\n", "clst", ".", "append", "(", "clusters", "[", "i", "]", ".", "cluster_centers_", "[", "ind", "]", "[", "0", "]", ")", "\n", "", "", "clst", "=", "np", ".", "array", "(", "clst", ")", "\n", "dist", "=", "euclidean_distances", "(", "enc_tmp_feat_vector", ",", "clst", ")", "\n", "dist", "=", "np", ".", "exp", "(", "(", "-", "1", "/", "2", ")", "*", "(", "dist", "**", "2", ")", ")", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.None.testPredAtK.predict_repl": [[595, 600], ["repl_or_not.predict"], "function", ["None"], ["", "def", "predict_repl", "(", "repl_or_not", ",", "X", ")", ":", "\n", "    ", "p", "=", "repl_or_not", ".", "predict", "(", "X", ")", "[", "0", "]", "[", "0", "]", "\n", "if", "p", ">", "0.5", ":", "\n", "        ", "return", "1", "\n", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.None.testPredAtK.predict_insdel": [[601, 604], ["numpy.argmax", "ins_del_model.predict"], "function", ["None"], ["", "def", "predict_insdel", "(", "ins_del_model", ",", "X", ")", ":", "\n", "    ", "p", "=", "ins_del_model", ".", "predict", "(", "X", ")", "[", "0", "]", "\n", "return", "np", ".", "argmax", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.CigarSrcTrgt.CST_Indices.__init__": [[11, 16], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "srcTrgtCigar", ")", ":", "\n", "        ", "self", ".", "iSrcAbs", ",", "self", ".", "iTrgtAbs", "=", "0", ",", "0", "\n", "self", ".", "freq", ",", "self", ".", "compareOp", "=", "0", ",", "None", "\n", "\n", "self", ".", "srcTrgtCigar", "=", "srcTrgtCigar", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.CigarSrcTrgt.CST_Indices.incSrc": [[17, 25], ["CigarSrcTrgt.CST_Indices.srcTrgtCigar.alignAppendSrc", "CigarSrcTrgt.CST_Indices.srcTrgtCigar.alignAppendTrgtAbs", "CigarSrcTrgt.CST_Indices.srcTrgtCigar.alignAppendTrgtLine"], "methods", ["home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.CigarSrcTrgt.CST_Params.alignAppendSrc", "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.CigarSrcTrgt.CST_Params.alignAppendTrgtAbs", "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.CigarSrcTrgt.CST_Params.alignAppendTrgtLine"], ["", "def", "incSrc", "(", "self", ",", "trgtSpell", ",", "appendOther", "=", "True", ")", ":", "\n", "        ", "''' . srcAbs is incremented by number of abstractions per cToken'''", "\n", "self", ".", "srcTrgtCigar", ".", "alignAppendSrc", "(", "self", ")", "\n", "if", "appendOther", ":", "\n", "            ", "self", ".", "srcTrgtCigar", ".", "alignAppendTrgtAbs", "(", "self", ",", "appendBlank", "=", "True", ")", "\n", "self", ".", "srcTrgtCigar", ".", "alignAppendTrgtLine", "(", "trgtSpell", ")", "\n", "\n", "", "self", ".", "iSrcAbs", "+=", "1", "# ", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.CigarSrcTrgt.CST_Indices.incTrgt": [[26, 34], ["CigarSrcTrgt.CST_Indices.srcTrgtCigar.alignAppendTrgtAbs", "CigarSrcTrgt.CST_Indices.srcTrgtCigar.alignAppendTrgtLine", "CigarSrcTrgt.CST_Indices.srcTrgtCigar.alignAppendSrc"], "methods", ["home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.CigarSrcTrgt.CST_Params.alignAppendTrgtAbs", "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.CigarSrcTrgt.CST_Params.alignAppendTrgtLine", "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.CigarSrcTrgt.CST_Params.alignAppendSrc"], ["", "def", "incTrgt", "(", "self", ",", "trgtSpell", ",", "appendOther", "=", "True", ")", ":", "\n", "        ", "'''Increment target Abs counter by numAbs. Could be 1, or = num of absTokens per cToken'''", "\n", "self", ".", "srcTrgtCigar", ".", "alignAppendTrgtAbs", "(", "self", ")", "\n", "self", ".", "srcTrgtCigar", ".", "alignAppendTrgtLine", "(", "trgtSpell", ")", "\n", "if", "appendOther", ":", "\n", "            ", "self", ".", "srcTrgtCigar", ".", "alignAppendSrc", "(", "self", ",", "appendBlank", "=", "True", ")", "\n", "\n", "", "self", ".", "iTrgtAbs", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.CigarSrcTrgt.CST_Indices.decFreq": [[35, 42], ["CigarSrcTrgt.CST_Indices.srcTrgtCigar.align_Cigar.append", "Exception"], "methods", ["None"], ["", "def", "decFreq", "(", "self", ")", ":", "\n", "# Handles how many times to loop", "\n", "        ", "if", "self", ".", "freq", "<=", "0", ":", "\n", "            ", "raise", "Exception", "(", "'No clue on how to handle freq = 0: {} '", ".", "format", "(", "self", ".", "freq", ")", ")", "\n", "\n", "", "self", ".", "srcTrgtCigar", ".", "align_Cigar", ".", "append", "(", "self", ".", "compareOp", ")", "\n", "self", ".", "freq", "-=", "1", "# Since we are handling the currCToken (and hence all its currAbsTokens)", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.CigarSrcTrgt.CST_Indices.getCurr_SrcLine": [[43, 45], ["None"], "methods", ["None"], ["", "def", "getCurr_SrcLine", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "srcTrgtCigar", ".", "srcLine", "[", "self", ".", "iSrcAbs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.CigarSrcTrgt.CST_Indices.getCurr_SrcAbs": [[46, 48], ["None"], "methods", ["None"], ["", "def", "getCurr_SrcAbs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "srcTrgtCigar", ".", "srcAbs", "[", "self", ".", "iSrcAbs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.CigarSrcTrgt.CST_Indices.getCurr_TrgtAbs": [[49, 51], ["None"], "methods", ["None"], ["", "def", "getCurr_TrgtAbs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "srcTrgtCigar", ".", "trgtAbs", "[", "self", ".", "iTrgtAbs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.CigarSrcTrgt.CST_Params.__init__": [[56, 69], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "currID", ",", "srcLine", ",", "srcAbs", ",", "trgtAbs", ",", "cigar", ",", "symbTable", ")", ":", "\n", "        ", "self", ".", "currID", "=", "currID", "\n", "self", ".", "srcLine", "=", "srcLine", "\n", "self", ".", "srcAbs", "=", "srcAbs", "\n", "self", ".", "trgtAbs", "=", "trgtAbs", "\n", "self", ".", "cigar", "=", "cigar", "\n", "self", ".", "symbTable", "=", "symbTable", "\n", "\n", "self", ".", "align_Cigar", "=", "[", "]", "\n", "self", ".", "align_SrcAbs", ",", "self", ".", "align_TrgtAbs", "=", "[", "]", ",", "[", "]", "\n", "self", ".", "align_SrcLine", ",", "self", ".", "align_TrgtLine", "=", "[", "]", ",", "[", "]", "\n", "\n", "self", ".", "trgtLine", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.CigarSrcTrgt.CST_Params.alignAppendSrc": [[70, 76], ["CigarSrcTrgt.CST_Params.align_SrcAbs.append", "CigarSrcTrgt.CST_Params.align_SrcLine.append", "cst_indices.getCurr_SrcAbs", "cst_indices.getCurr_SrcLine"], "methods", ["home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.CigarSrcTrgt.CST_Indices.getCurr_SrcAbs", "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.CigarSrcTrgt.CST_Indices.getCurr_SrcLine"], ["", "def", "alignAppendSrc", "(", "self", ",", "cst_indices", ",", "appendBlank", "=", "False", ")", ":", "\n", "        ", "srcAbs", ",", "srcLine", "=", "''", ",", "''", "\n", "if", "not", "appendBlank", ":", "\n", "            ", "srcAbs", ",", "srcLine", "=", "cst_indices", ".", "getCurr_SrcAbs", "(", ")", ",", "cst_indices", ".", "getCurr_SrcLine", "(", ")", "\n", "", "self", ".", "align_SrcAbs", ".", "append", "(", "srcAbs", ")", "\n", "self", ".", "align_SrcLine", ".", "append", "(", "srcLine", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.CigarSrcTrgt.CST_Params.alignAppendTrgtAbs": [[77, 82], ["CigarSrcTrgt.CST_Params.align_TrgtAbs.append", "cst_indices.getCurr_TrgtAbs"], "methods", ["home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.CigarSrcTrgt.CST_Indices.getCurr_TrgtAbs"], ["", "def", "alignAppendTrgtAbs", "(", "self", ",", "cst_indices", ",", "appendBlank", "=", "False", ")", ":", "\n", "        ", "trgtAbs", "=", "''", "\n", "if", "not", "appendBlank", ":", "\n", "            ", "trgtAbs", "=", "cst_indices", ".", "getCurr_TrgtAbs", "(", ")", "\n", "", "self", ".", "align_TrgtAbs", ".", "append", "(", "trgtAbs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.CigarSrcTrgt.CST_Params.alignAppendTrgtLine": [[83, 85], ["CigarSrcTrgt.CST_Params.align_TrgtLine.append"], "methods", ["None"], ["", "def", "alignAppendTrgtLine", "(", "self", ",", "trgtSpell", ")", ":", "\n", "        ", "self", ".", "align_TrgtLine", ".", "append", "(", "trgtSpell", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.CigarSrcTrgt.CST_Params.__str__": [[86, 98], ["prettytable.PrettyTable", "zip", "prettytable.PrettyTable.add_row", "prettytable.PrettyTable.get_string"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "stri", "=", "''", "\n", "stri", "+=", "'\\n  CurrID : {}'", ".", "format", "(", "self", ".", "currID", ")", "\n", "stri", "+=", "'\\n   Cigar : {}'", ".", "format", "(", "self", ".", "cigar", ")", "\n", "\n", "p", "=", "PrettyTable", "(", ")", "\n", "for", "name", ",", "var", "in", "zip", "(", "[", "'Cigar_i:'", ",", "'SrcAbs :'", ",", "'TrgtAbs:'", ",", "'SrcLine:'", ",", "'TrgtLine:'", "]", ",", "\n", "[", "self", ".", "align_Cigar", ",", "self", ".", "align_SrcAbs", ",", "self", ".", "align_TrgtAbs", ",", "self", ".", "align_SrcLine", ",", "self", ".", "align_TrgtLine", "]", ")", ":", "\n", "            ", "p", ".", "add_row", "(", "[", "name", "]", "+", "var", ")", "\n", "\n", "# Use encode:utf-8 to handle non-ascii srcLines", "\n", "", "return", "stri", "+", "'\\n'", "+", "p", ".", "get_string", "(", "header", "=", "False", ",", "border", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.CigarSrcTrgt.addToDict": [[102, 107], ["str", "chr", "str", "len"], "function", ["None"], ["", "", "def", "addToDict", "(", "dictAbs_Unicode", ",", "absTokens", ")", ":", "\n", "    ", "for", "absT", "in", "absTokens", ":", "\n", "        ", "absT_str", "=", "str", "(", "absT", ")", "\n", "if", "absT_str", "not", "in", "dictAbs_Unicode", ":", "\n", "            ", "dictAbs_Unicode", "[", "str", "(", "absT_str", ")", "]", "=", "chr", "(", "len", "(", "dictAbs_Unicode", ")", "+", "START_ORD", ")", "# Skip START_ORD num of unicodes", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.CigarSrcTrgt.getUnicodeDicts": [[108, 115], ["CigarSrcTrgt.addToDict", "CigarSrcTrgt.addToDict", "dictAbs_Unicode.items"], "function", ["home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.CigarSrcTrgt.addToDict", "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.CigarSrcTrgt.addToDict"], ["", "", "", "def", "getUnicodeDicts", "(", "srcAbs", ",", "trgtAbs", ")", ":", "\n", "    ", "dictAbs_Unicode", "=", "{", "}", "\n", "addToDict", "(", "dictAbs_Unicode", ",", "srcAbs", ")", "\n", "addToDict", "(", "dictAbs_Unicode", ",", "trgtAbs", ")", "\n", "dictUnicode_Abs", "=", "{", "value", ":", "key", "for", "(", "key", ",", "value", ")", "in", "dictAbs_Unicode", ".", "items", "(", ")", "}", "\n", "\n", "return", "dictAbs_Unicode", ",", "dictUnicode_Abs", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.CigarSrcTrgt.getUnicodeStrs": [[116, 118], ["None"], "function", ["None"], ["", "def", "getUnicodeStrs", "(", "dictAbs_Unicode", ",", "absTokens", ")", ":", "\n", "    ", "return", "''", ".", "join", "(", "[", "dictAbs_Unicode", "[", "absT", "]", "for", "absT", "in", "absTokens", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.CigarSrcTrgt.lineUp_SrcTrgAbs": [[121, 136], ["CigarSrcTrgt.getUnicodeDicts", "CigarSrcTrgt.getUnicodeStrs", "CigarSrcTrgt.getUnicodeStrs", "len", "len", "edlib.align", "str", "len"], "function", ["home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.CigarSrcTrgt.getUnicodeDicts", "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.CigarSrcTrgt.getUnicodeStrs", "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.CigarSrcTrgt.getUnicodeStrs"], ["", "def", "lineUp_SrcTrgAbs", "(", "srcAbs", ",", "trgtAbs", ")", ":", "\n", "    ", "dictAbs_Unicode", ",", "dictUnicode_Abs", "=", "getUnicodeDicts", "(", "srcAbs", ",", "trgtAbs", ")", "\n", "srcAbsUni", "=", "getUnicodeStrs", "(", "dictAbs_Unicode", ",", "srcAbs", ")", "\n", "trgtAbsUni", "=", "getUnicodeStrs", "(", "dictAbs_Unicode", ",", "trgtAbs", ")", "\n", "\n", "if", "len", "(", "trgtAbsUni", ")", "==", "0", ":", "# If the target Abs is empty (edlib crashes, hence handle separately)", "\n", "        ", "if", "len", "(", "srcAbsUni", ")", "==", "0", ":", "# And if the source Abs is empty as well", "\n", "            ", "cigar", "=", "''", "# Nothing to do", "\n", "", "else", ":", "\n", "            ", "cigar", "=", "str", "(", "len", "(", "srcAbsUni", ")", ")", "+", "'D'", "# Else, delete all source Abs", "\n", "", "", "else", ":", "\n", "        ", "cigar", "=", "edlib", ".", "align", "(", "trgtAbsUni", ",", "srcAbsUni", ",", "task", "=", "'path'", ")", "[", "'cigar'", "]", "\n", "\n", "# print joinLL([(absT, ord(uni)) for absT, uni in dictAbs_Unicode.items()])   ", "\n", "", "return", "cigar", "\n", "", ""]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractToken.AbstractToken.__init__": [[8, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "spell", ",", "cToken", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "spell", "=", "spell", "\n", "self", ".", "cToken", "=", "cToken", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractToken.AbstractToken.__str__": [[13, 15], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractToken.CToken.__init__": [[18, 32], ["Cursor.from_location", "codeObj.getTU"], "methods", ["home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.getTU"], ["def", "__init__", "(", "self", ",", "clangToken", ",", "codeObj", ",", "flagIsDirective", "=", "False", ")", ":", "\n", "        ", "self", ".", "codeID", "=", "codeObj", ".", "codeID", "\n", "self", ".", "clangToken", "=", "clangToken", "\n", "self", ".", "cursor", "=", "Cursor", ".", "from_location", "(", "codeObj", ".", "getTU", "(", ")", ",", "clangToken", ".", "location", ")", "\n", "self", ".", "spell", "=", "clangToken", ".", "spelling", "\n", "self", ".", "lineNum", "=", "clangToken", ".", "location", ".", "line", "\n", "self", ".", "kind", "=", "clangToken", ".", "kind", "\n", "self", ".", "cursorType", "=", "self", ".", "cursor", ".", "type", ".", "kind", "\n", "\n", "self", ".", "flagIsDirective", "=", "False", "\n", "if", "flagIsDirective", "or", "self", ".", "spell", "==", "'#'", ":", "# Set to true if '#' token found now, or previously in the same line", "\n", "            ", "self", ".", "flagIsDirective", "=", "True", "# indicating directive decl in the line (#include<>)", "\n", "\n", "", "self", ".", "abstractTokens", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractToken.CToken.__str__": [[33, 35], ["srcT.Common.Helper.joinList"], "methods", ["home.repos.pwc.inspect_result.purushottamkar_macer.Common.Helper.joinList"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "H", ".", "joinList", "(", "self", ".", "abstractTokens", ",", "' '", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractToken.CToken.addAbstract": [[36, 38], ["AbstractToken.CToken.abstractTokens.append", "AbstractToken.AbstractToken", "str"], "methods", ["None"], ["", "def", "addAbstract", "(", "self", ",", "name", ",", "spell", ")", ":", "\n", "        ", "self", ".", "abstractTokens", ".", "append", "(", "AbstractToken", "(", "str", "(", "name", ")", ",", "spell", ",", "self", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractToken.CToken.extractFormatSpec": [[39, 44], ["re.findall"], "methods", ["None"], ["", "def", "extractFormatSpec", "(", "self", ",", "strLit", ")", ":", "\n", "        ", "patternFormat", "=", "r'\\%[-+]?[\\d]*(?:\\.[\\d]*)?(?:lli|lld|llu|ld|li|lf|Lf|lu|hi|hu|d|c|e|E|f|g|G|i|l|o|p|s|u|x|X|n)'", "\n", "patternPunct", "=", "r'\\\\(?:a|b|f|n|r|t|v|\\\\|\\'|\\\"|\\?)'", "\n", "patternSplit", "=", "'('", "+", "patternFormat", "+", "'|'", "+", "patternPunct", "+", "')'", "\n", "return", "re", ".", "findall", "(", "patternSplit", ",", "self", ".", "spell", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractToken.CToken.getAbstractIdentifier": [[45, 69], ["AbstractToken.CToken.addAbstract", "AbstractToken.CToken.addAbstract", "symbTable.insertToken", "symbTable.lookup", "len", "list", "AbstractToken.CToken.addAbstract", "map", "len", "srcT.Common.Helper.errorLog", "len", "str", "str"], "methods", ["home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractToken.CToken.addAbstract", "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractToken.CToken.addAbstract", "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractWrapper.SymbTable.insertToken", "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractWrapper.SymbTable.lookup", "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractToken.CToken.addAbstract", "home.repos.pwc.inspect_result.purushottamkar_macer.Common.Helper.errorLog"], ["", "def", "getAbstractIdentifier", "(", "self", ",", "symbTable", ")", ":", "\n", "        ", "'''If Identifier, then add the type of identifier as Abstract token (except for special cases)'''", "\n", "if", "self", ".", "flagIsDirective", ":", "# If directive declaration (#include<>), add actual spellings to abstraction (and not invalid-types)", "\n", "            ", "self", ".", "addAbstract", "(", "self", ".", "spell", ",", "self", ".", "spell", ")", "\n", "", "elif", "self", ".", "spell", "in", "CF", ".", "IncludeIdentifiers", ":", "# Handle specials like printf", "\n", "            ", "self", ".", "addAbstract", "(", "self", ".", "spell", ",", "self", ".", "spell", ")", "\n", "", "else", ":", "# All other cursorTypes", "\n", "#print '-getAbstractIdentifier-\\n', self.spell, self.cursorType", "\n", "\n", "            ", "symbTable", ".", "insertToken", "(", "self", ".", "spell", ",", "self", ".", "cursor", ")", "# Check & Add unknown variable/func declaration to Symbol-Table", "\n", "symbTypes", "=", "symbTable", ".", "lookup", "(", "self", ".", "spell", ")", "# try to fetch type from sybmTable", "\n", "\n", "if", "len", "(", "symbTypes", ")", ">", "0", ":", "# If lookup success, add the symbType as the abstraction", "\n", "                ", "list", "(", "map", "(", "self", ".", "addAbstract", ",", "symbTypes", ",", "[", "self", ".", "spell", "]", "*", "len", "(", "symbTypes", ")", ")", ")", "\n", "# Add self.spell as Concretization of all AbstractTypes", "\n", "\n", "# Log error in case SymbTable and Clang differ in claimed Type", "\n", "if", "len", "(", "symbTypes", ")", "==", "1", "and", "self", ".", "cursorType", "!=", "TypeKind", ".", "INVALID", "and", "self", ".", "cursorType", "!=", "TypeKind", ".", "FUNCTIONPROTO", ":", "\n", "# Unless the type is INVALID or FUNCTION", "\n", "                    ", "if", "symbTypes", "[", "0", "]", "!=", "self", ".", "cursorType", ":", "\n", "                        ", "H", ".", "errorLog", "(", "[", "[", "'CodeID'", ",", "self", ".", "codeID", "]", ",", "[", "'AbstractToken SymbTab & Clang mismatch type'", ",", "str", "(", "symbTypes", "[", "0", "]", ")", "+", "' and '", "+", "str", "(", "self", ".", "cursorType", ")", "]", ",", "[", "'lineNum'", ",", "self", ".", "lineNum", "]", ",", "[", "'spell'", ",", "self", ".", "spell", "]", "]", ")", "\n", "\n", "", "", "", "else", ":", "# Otherwise, If symbTable doesn't have the type, insert the cursorType (probably INVALID type)", "\n", "                ", "self", ".", "addAbstract", "(", "self", ".", "cursorType", ",", "self", ".", "spell", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractToken.CToken.getAbstractLiteral": [[71, 106], ["AbstractToken.CToken.addAbstract", "AbstractToken.CToken.addAbstract", "AbstractToken.isInt", "len", "AbstractToken.CToken.extractFormatSpec", "AbstractToken.CToken.addAbstract", "AbstractToken.isFloat", "len", "len", "list", "AbstractToken.CToken.addAbstract", "AbstractToken.CToken.addAbstract", "map", "len", "AbstractToken.CToken.addAbstract", "AbstractToken.CToken.addAbstract", "str", "srcT.Common.Helper.errorLog", "str", "str", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractToken.CToken.addAbstract", "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractToken.CToken.addAbstract", "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractToken.isInt", "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractToken.CToken.extractFormatSpec", "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractToken.CToken.addAbstract", "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractToken.isFloat", "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractToken.CToken.addAbstract", "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractToken.CToken.addAbstract", "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractToken.CToken.addAbstract", "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractToken.CToken.addAbstract", "home.repos.pwc.inspect_result.purushottamkar_macer.Common.Helper.errorLog"], ["", "", "", "def", "getAbstractLiteral", "(", "self", ")", ":", "\n", "        ", "flagIsString", "=", "False", "\n", "quotes", "=", "[", "'\\''", ",", "'\"'", "]", "\n", "\n", "if", "self", ".", "cursorType", "==", "TypeKind", ".", "CONSTANTARRAY", ":", "\n", "            ", "flagIsString", "=", "True", "\n", "\n", "", "elif", "len", "(", "self", ".", "spell", ")", ">=", "2", "and", "self", ".", "spell", "[", "0", "]", "in", "quotes", "and", "self", ".", "spell", "[", "-", "1", "]", "in", "quotes", ":", "\n", "            ", "flagIsString", "=", "True", "\n", "\n", "", "if", "flagIsString", ":", "# TypeKind.CONSTANTARRAY or TypeKind.INT with single quotes - char or Invalids with double quotes", "\n", "            ", "self", ".", "addAbstract", "(", "self", ".", "spell", "[", "0", "]", ",", "self", ".", "spell", "[", "0", "]", ")", "# Add First Quote", "\n", "\n", "intermediateStr", "=", "self", ".", "spell", "[", "1", ":", "-", "1", "]", "\n", "if", "len", "(", "intermediateStr", ")", ">", "0", ":", "# Ignore 0 length LITERAL, to differentiate those cases when nothing exists inside quotes", "\n", "                ", "formatSpecs", "=", "self", ".", "extractFormatSpec", "(", "intermediateStr", ")", "# If String, abstract format spec (%d), special chars,... ", "\n", "\n", "if", "len", "(", "formatSpecs", ")", ">", "0", ":", "# If format specifiers present, add them instead of Char/String", "\n", "                    ", "list", "(", "map", "(", "self", ".", "addAbstract", ",", "formatSpecs", ",", "formatSpecs", ")", ")", "\n", "", "elif", "len", "(", "intermediateStr", ")", "==", "1", ":", "# Character: Otherwise, if no formatSpecs", "\n", "                    ", "self", ".", "addAbstract", "(", "str", "(", "self", ".", "kind", ")", "+", "'_CHAR'", ",", "intermediateStr", ")", "#Add a placeholder Literal_Char", "\n", "", "else", ":", "# String - if len(intermediateStr) >= 1", "\n", "                    ", "self", ".", "addAbstract", "(", "str", "(", "self", ".", "kind", ")", "+", "'_STRING'", ",", "intermediateStr", ")", "# Else, add a placeholder Literal_String", "\n", "\n", "", "", "self", ".", "addAbstract", "(", "self", ".", "spell", "[", "-", "1", "]", ",", "self", ".", "spell", "[", "-", "1", "]", ")", "# Add Last Quote", "\n", "\n", "", "elif", "isInt", "(", "self", ".", "spell", ")", ":", "# If actually an integer literal", "\n", "            ", "self", ".", "addAbstract", "(", "str", "(", "self", ".", "kind", ")", "+", "'_INT'", ",", "self", ".", "spell", ")", "# Add a placeholder Literal_Int", "\n", "", "elif", "isFloat", "(", "self", ".", "spell", ")", ":", "# If actually a float literal", "\n", "            ", "self", ".", "addAbstract", "(", "str", "(", "self", ".", "kind", ")", "+", "\"_DOUBLE\"", ",", "self", ".", "spell", ")", "# Add a placeholder Literal_Int", "\n", "", "else", ":", "# If neither String, nor int/float: add cursorType (can't abstract - mostly Invalid)", "\n", "            ", "self", ".", "addAbstract", "(", "str", "(", "self", ".", "kind", ")", "+", "'_'", "+", "str", "(", "self", ".", "cursorType", ")", ",", "self", ".", "spell", ")", "\n", "if", "self", ".", "cursorType", "!=", "TypeKind", ".", "INVALID", ":", "# Log the \"special\" type of Literal (unless its INVALID)", "\n", "                ", "H", ".", "errorLog", "(", "[", "[", "'CodeID'", ",", "self", ".", "codeID", "]", ",", "[", "'AbstractToken new literal-type'", ",", "str", "(", "self", ".", "kind", ")", "+", "'_'", "+", "str", "(", "self", ".", "cursorType", ")", "]", ",", "\n", "[", "'lineNum'", ",", "self", ".", "lineNum", "]", ",", "[", "'spell'", ",", "self", ".", "spell", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractToken.CToken.getAbstractPunct": [[107, 117], ["symbTable.checkBlockLevel", "AbstractToken.CToken.addAbstract", "AbstractToken.CToken.addAbstract", "AbstractToken.CToken.addAbstract"], "methods", ["home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractWrapper.SymbTable.checkBlockLevel", "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractToken.CToken.addAbstract", "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractToken.CToken.addAbstract", "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractToken.CToken.addAbstract"], ["", "", "", "def", "getAbstractPunct", "(", "self", ",", "symbTable", ")", ":", "\n", "        ", "if", "self", ".", "spell", "==", "'{'", ":", "\n", "            ", "self", ".", "addAbstract", "(", "'{'", ",", "self", ".", "spell", ")", "\n", "#self.addAbstract('<start>', self.spell) ", "\n", "", "elif", "self", ".", "spell", "==", "'}'", ":", "\n", "            ", "self", ".", "addAbstract", "(", "'}'", ",", "self", ".", "spell", ")", "\n", "#self.addAbstract('<stop>', self.spell)   ", "\n", "", "else", ":", "\n", "            ", "self", ".", "addAbstract", "(", "self", ".", "spell", ",", "self", ".", "spell", ")", "# Punctuation => Add the spelling as it is", "\n", "", "symbTable", ".", "checkBlockLevel", "(", "self", ".", "spell", ",", "self", ".", "cursor", ")", "# Check if '{' or '}'", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractToken.CToken.getAbstractTokens": [[118, 131], ["AbstractToken.CToken.getAbstractPunct", "AbstractToken.CToken.addAbstract", "AbstractToken.CToken.getAbstractIdentifier", "AbstractToken.CToken.getAbstractLiteral"], "methods", ["home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractToken.CToken.getAbstractPunct", "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractToken.CToken.addAbstract", "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractToken.CToken.getAbstractIdentifier", "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractToken.CToken.getAbstractLiteral"], ["", "def", "getAbstractTokens", "(", "self", ",", "symbTable", ")", ":", "\n", "        ", "if", "self", ".", "kind", "==", "TokenKind", ".", "COMMENT", ":", "\n", "            ", "pass", "# Don't add any abstract tokens for comments", "\n", "", "elif", "self", ".", "kind", "==", "TokenKind", ".", "PUNCTUATION", ":", "\n", "            ", "self", ".", "getAbstractPunct", "(", "symbTable", ")", "\n", "", "elif", "self", ".", "kind", "==", "TokenKind", ".", "KEYWORD", ":", "\n", "            ", "self", ".", "addAbstract", "(", "self", ".", "spell", ",", "self", ".", "spell", ")", "# Keyword => Retain as it is", "\n", "", "elif", "self", ".", "kind", "==", "TokenKind", ".", "IDENTIFIER", ":", "\n", "            ", "self", ".", "getAbstractIdentifier", "(", "symbTable", ")", "# Lookup symbTable, or add the cursorType", "\n", "", "elif", "self", ".", "kind", "==", "TokenKind", ".", "LITERAL", ":", "\n", "            ", "self", ".", "getAbstractLiteral", "(", ")", "# Figure out what kind of Literal, and format specs", "\n", "\n", "", "return", "self", ".", "abstractTokens", ",", "self", ".", "flagIsDirective", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractToken.isInt": [[132, 138], ["int"], "function", ["None"], ["", "", "def", "isInt", "(", "stri", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "int", "(", "stri", ")", "\n", "return", "True", "\n", "", "except", "ValueError", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractToken.isFloat": [[139, 145], ["float"], "function", ["None"], ["", "", "def", "isFloat", "(", "stri", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "float", "(", "stri", ")", "\n", "return", "True", "\n", "", "except", "ValueError", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractWrapper.SymbTable.__init__": [[9, 14], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "dictBlockVarType", "=", "{", "}", "# Spelling -> Type mapping (for user-defined vars/funcs): In case Clang-goofUps", "\n", "self", ".", "blockLevel", "=", "0", "# Current block level for maintaining symbol-table (each func/block statement inc/dec it)", "\n", "\n", "self", ".", "dictBlockVarType", "[", "0", "]", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractWrapper.SymbTable.checkBlockLevel": [[15, 20], ["AbstractWrapper.SymbTable.incBlock", "AbstractWrapper.SymbTable.decBlock"], "methods", ["home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractWrapper.SymbTable.incBlock", "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractWrapper.SymbTable.decBlock"], ["", "def", "checkBlockLevel", "(", "self", ",", "spell", ",", "cursor", ")", ":", "\n", "        ", "if", "spell", "==", "'{'", ":", "\n", "            ", "self", ".", "incBlock", "(", ")", "\n", "", "elif", "spell", "==", "'}'", ":", "\n", "            ", "self", ".", "decBlock", "(", ")", "\n", "#elif cursor.kind == CursorKind.FUNCTION_DECL and cursor.type.kind == TypeKind.FUNCTIONPROTO:", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractWrapper.SymbTable.insertToken": [[23, 36], ["len", "AbstractWrapper.SymbTable.lookup"], "methods", ["home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractWrapper.SymbTable.lookup"], ["", "", "def", "insertToken", "(", "self", ",", "spell", ",", "cursor", ")", ":", "\n", "        ", "myType", "=", "cursor", ".", "type", ".", "kind", "\n", "if", "myType", "==", "TypeKind", ".", "INVALID", "or", "len", "(", "self", ".", "lookup", "(", "spell", ")", ")", ">", "0", ":", "# Ignore INVALID types and those spell already in table", "\n", "            ", "return", "# don't add them to Symb Table!", "\n", "", "elif", "myType", "==", "TypeKind", ".", "FUNCTIONPROTO", ":", "# If function, add the return/argument types as well to Abstraction", "\n", "            ", "returnTypes", ",", "argTypes", "=", "[", "]", ",", "[", "]", "\n", "#returnTypes = [cursor.result_type.kind]", "\n", "#returnTypes = ['<RETURN_TYPE>'] + returnTypes + ['</RETURN_TYPE>']", "\n", "#argTypes = [arg.type.kind for arg in cursor.get_arguments()]", "\n", "#argTypes = ['<'+str(CursorKind.PARM_DECL)+'>'] + argTypes + ['</'+str(CursorKind.PARM_DECL)+'>']", "\n", "self", ".", "dictBlockVarType", "[", "self", ".", "blockLevel", "]", "[", "spell", "]", "=", "[", "'TypeKind.FUNCTIONCALL'", "]", "+", "returnTypes", "+", "argTypes", "\n", "", "else", ":", "\n", "            ", "self", ".", "dictBlockVarType", "[", "self", ".", "blockLevel", "]", "[", "spell", "]", "=", "[", "myType", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractWrapper.SymbTable.lookup": [[39, 47], ["range"], "methods", ["None"], ["", "", "def", "lookup", "(", "self", ",", "spell", ")", ":", "\n", "#print '--Symb Table: Lookup--\\n',spell, self.dictBlockVarType", "\n", "\n", "        ", "for", "level", "in", "range", "(", "self", ".", "blockLevel", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "if", "spell", "in", "self", ".", "dictBlockVarType", "[", "level", "]", ":", "\n", "                ", "return", "self", ".", "dictBlockVarType", "[", "level", "]", "[", "spell", "]", "\n", "\n", "", "", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractWrapper.SymbTable.getVar_MatchingType": [[48, 57], ["range", "AbstractWrapper.SymbTable.dictBlockVarType[].items", "str"], "methods", ["None"], ["", "def", "getVar_MatchingType", "(", "self", ",", "typeKind", ")", ":", "\n", "        ", "'''Fetch the first variable of matching typeKind'''", "\n", "\n", "for", "level", "in", "range", "(", "self", ".", "blockLevel", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "for", "spell", ",", "types", "in", "self", ".", "dictBlockVarType", "[", "level", "]", ".", "items", "(", ")", ":", "\n", "                ", "if", "str", "(", "types", "[", "0", "]", ")", "==", "typeKind", ":", "# If the first typeKind (in list of abstractions) is the same", "\n", "                    ", "return", "spell", "\n", "\n", "", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractWrapper.SymbTable.incBlock": [[58, 61], ["None"], "methods", ["None"], ["", "def", "incBlock", "(", "self", ")", ":", "\n", "        ", "self", ".", "blockLevel", "+=", "1", "\n", "self", ".", "dictBlockVarType", "[", "self", ".", "blockLevel", "]", "=", "{", "}", "# Create empty mapping for new BlockLevel", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractWrapper.SymbTable.decBlock": [[62, 67], ["None"], "methods", ["None"], ["", "def", "decBlock", "(", "self", ")", ":", "\n", "        ", "self", ".", "dictBlockVarType", "[", "self", ".", "blockLevel", "]", "=", "{", "}", "# Delete the mapping from old BlockLevel", "\n", "#self.blockLevel -= 1", "\n", "if", "self", ".", "blockLevel", "!=", "0", ":", "# If already at min (block-0), don't dec - probably incorrect brace closing } ", "\n", "            ", "self", ".", "blockLevel", "-=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractWrapper.getLineAbstraction": [[69, 85], ["srcT.Symbolic.AbstractToken.CToken", "AbstractToken.CToken.getAbstractTokens", "lineAbs.extend", "lineCTokens.append", "len"], "function", ["home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractToken.CToken.getAbstractTokens"], ["", "", "", "def", "getLineAbstraction", "(", "codeObj", ",", "codeClangTokens", ",", "tokenNum", ",", "lineNum", ",", "symbTable", ")", ":", "\n", "    ", "''' Abstract all clangTokens present in the curr lineNum'''", "\n", "flagIsDirective", "=", "False", "\n", "lineAbs", ",", "lineCTokens", "=", "[", "]", ",", "[", "]", "\n", "\n", "while", "tokenNum", "<", "len", "(", "codeClangTokens", ")", "and", "codeClangTokens", "[", "tokenNum", "]", ".", "location", ".", "line", "==", "lineNum", ":", "\n", "# continue until all tokens of this line are exhaused", "\n", "        ", "cToken", "=", "AbstractToken", ".", "CToken", "(", "codeClangTokens", "[", "tokenNum", "]", ",", "codeObj", ",", "flagIsDirective", ")", "\n", "abstractTokens", ",", "flagIsDirective", "=", "cToken", ".", "getAbstractTokens", "(", "symbTable", ")", "\n", "\n", "lineAbs", ".", "extend", "(", "abstractTokens", ")", "\n", "lineCTokens", ".", "append", "(", "cToken", ")", "\n", "\n", "tokenNum", "+=", "1", "\n", "\n", "", "return", "lineAbs", ",", "lineCTokens", ",", "tokenNum", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractWrapper.getProgAbstractTokenSymbTab": [[86, 111], ["AbstractWrapper.SymbTable", "codeObj.getTokens", "len", "AbstractWrapper.getLineAbstraction", "absLines.append", "cTokenLines.append", "str"], "function", ["home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.getTokens", "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractWrapper.getLineAbstraction"], ["", "def", "getProgAbstractTokenSymbTab", "(", "codeObj", ",", "lineNumBreak", "=", "None", ")", ":", "\n", "    ", "''' Abstract all clangTokens line by line.\nIf breakLineNum is provided, run abstraction until lineNumBreak, and return the abstract tokens at that lineNum, along with the Symbol Table until that line '''", "\n", "absLines", ",", "cTokenLines", "=", "[", "]", ",", "[", "]", "\n", "symbTable", "=", "SymbTable", "(", ")", "\n", "codeClangTokens", "=", "codeObj", ".", "getTokens", "(", ")", "\n", "\n", "tokenNum", "=", "0", "# Current token number being abstracted", "\n", "lineNum", "=", "1", "# Current line number being abstracted", "\n", "\n", "while", "tokenNum", "<", "len", "(", "codeClangTokens", ")", ":", "\n", "        ", "lineAbs", ",", "lineCTokens", ",", "tokenNum", "=", "getLineAbstraction", "(", "codeObj", ",", "codeClangTokens", ",", "tokenNum", ",", "lineNum", ",", "symbTable", ")", "\n", "absLines", ".", "append", "(", "lineAbs", ")", "\n", "cTokenLines", ".", "append", "(", "lineCTokens", ")", "\n", "\n", "if", "lineNumBreak", "!=", "None", "and", "lineNum", "==", "lineNumBreak", ":", "\n", "            ", "return", "lineAbs", ",", "lineCTokens", ",", "symbTable", "\n", "", "lineNum", "+=", "1", "\n", "\n", "# Handle the case lineNum = empty-line at end of code (Eg, forgot a closing brace)", "\n", "", "if", "lineNumBreak", "!=", "None", "and", "lineNumBreak", ">=", "lineNum", ":", "# If the lineNumber to break on is beyond the lineNums encountered", "\n", "        ", "return", "[", "]", ",", "[", "]", ",", "symbTable", "# in program, return empty abstract/C-Tokens ", "\n", "\n", "", "absLinesStr", "=", "[", "[", "str", "(", "absToken", ")", "for", "absToken", "in", "line", "]", "for", "line", "in", "absLines", "]", "\n", "return", "absLinesStr", ",", "cTokenLines", ",", "symbTable", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractWrapper.getProgAbstraction": [[112, 115], ["AbstractWrapper.getProgAbstractTokenSymbTab"], "function", ["home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractWrapper.getProgAbstractTokenSymbTab"], ["", "def", "getProgAbstraction", "(", "codeObj", ")", ":", "\n", "    ", "absLines", ",", "cTokenLines", ",", "symbTable", "=", "getProgAbstractTokenSymbTab", "(", "codeObj", ")", "\n", "return", "absLines", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractWrapper.getAbstractAtLine": [[116, 122], ["AbstractWrapper.getProgAbstractTokenSymbTab", "srcT.Common.Helper.stringifyL"], "function", ["home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractWrapper.getProgAbstractTokenSymbTab", "home.repos.pwc.inspect_result.purushottamkar_macer.Common.Helper.stringifyL"], ["", "def", "getAbstractAtLine", "(", "codeObj", ",", "lineNum", ")", ":", "\n", "    ", "srcAbsObjs", ",", "srcCTokens", ",", "symbTable", "=", "getProgAbstractTokenSymbTab", "(", "codeObj", ",", "lineNum", ")", "\n", "\n", "srcAbs", "=", "H", ".", "stringifyL", "(", "srcAbsObjs", ")", "\n", "srcLine", "=", "[", "absObj", ".", "spell", "for", "cTok", "in", "srcCTokens", "for", "absObj", "in", "cTok", ".", "abstractTokens", "]", "\n", "return", "srcLine", ",", "srcAbs", ",", "symbTable", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractWrapper.getCTokenLines": [[123, 127], ["Code", "AbstractWrapper.getProgAbstractTokenSymbTab"], "function", ["home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractWrapper.getProgAbstractTokenSymbTab"], ["", "def", "getCTokenLines", "(", "codeText", ")", ":", "\n", "    ", "codeObj", "=", "Code", "(", "codeText", ")", "\n", "absLines", ",", "cTokenLines", ",", "symbTable", "=", "getProgAbstractTokenSymbTab", "(", "codeObj", ")", "\n", "return", "cTokenLines", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractWrapper.printProgAbstraction": [[128, 134], ["open().read", "Code", "AbstractWrapper.getProgAbstraction", "print", "open", "srcT.Common.Helper.joinList"], "function", ["home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractWrapper.getProgAbstraction", "home.repos.pwc.inspect_result.purushottamkar_macer.Common.Helper.joinList"], ["", "def", "printProgAbstraction", "(", ")", ":", "\n", "    ", "codeText", "=", "open", "(", "CF", ".", "inputPath", "+", "'temp.c'", ")", ".", "read", "(", ")", "\n", "codeObj", "=", "Code", "(", "codeText", ")", "\n", "absLines", "=", "getProgAbstraction", "(", "codeObj", ")", "\n", "for", "line", "in", "absLines", ":", "\n", "        ", "print", "(", "H", ".", "joinList", "(", "line", ",", "' '", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractWrapper.writeTypeKind": [[135, 158], ["srcT.Common.Helper.readCSV", "collections.defaultdict", "srcT.Common.Helper.writeCSV", "Code", "Code.getTokens", "print", "CToken", "headers.index", "kindType.split", "kindType.split", "headers.index", "str", "str"], "function", ["home.repos.pwc.inspect_result.purushottamkar_macer.Common.Helper.readCSV", "home.repos.pwc.inspect_result.purushottamkar_macer.Common.Helper.writeCSV", "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.getTokens"], ["", "", "def", "writeTypeKind", "(", ")", ":", "\n", "    ", "path", "=", "'./final_all_noindent_singleL/'", "\n", "nameRead", "=", "path", "+", "'subset-srcTrgtPairs.csv'", "\n", "nameWrite", "=", "path", "+", "'TokenKind.csv'", "\n", "headers", ",", "lines", "=", "H", ".", "readCSV", "(", "nameRead", ")", "\n", "writeH", "=", "[", "'spell'", ",", "'kind'", ",", "'cursorTypeKind'", "]", "\n", "dictSpell", "=", "collections", ".", "defaultdict", "(", "lambda", ":", "{", "}", ")", "\n", "\n", "count", "=", "0", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "srcText", "=", "line", "[", "headers", ".", "index", "(", "'sourceText'", ")", "]", "\n", "codeObj", "=", "Code", "(", "srcText", ")", "\n", "for", "token", "in", "codeObj", ".", "getTokens", "(", ")", ":", "\n", "            ", "cToken", "=", "CToken", "(", "token", ",", "codeObj", ")", "\n", "\n", "dictSpell", "[", "cToken", ".", "spell", "]", "[", "str", "(", "cToken", ".", "kind", ")", "+", "'!@#$%'", "+", "str", "(", "cToken", ".", "cursorType", ")", "]", "=", "0", "\n", "\n", "", "count", "+=", "1", "\n", "print", "(", "count", ",", "line", "[", "headers", ".", "index", "(", "'sourceID'", ")", "]", ")", "\n", "\n", "", "writeL", "=", "[", "[", "spell", ",", "kindType", ".", "split", "(", "'!@#$%'", ")", "[", "0", "]", ",", "kindType", ".", "split", "(", "'!@#$%'", ")", "[", "1", "]", "]", "\n", "for", "spell", "in", "dictSpell", "for", "kindType", "in", "dictSpell", "[", "spell", "]", "]", "\n", "H", ".", "writeCSV", "(", "nameWrite", ",", "writeH", ",", "writeL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractWrapper.writeAbstractions": [[159, 184], ["srcT.Common.Helper.readCSV", "srcT.Common.Helper.writeCSV", "zip", "print", "writeLines.append", "Code", "AbstractWrapper.getProgAbstraction", "writeLine.append", "headers.index", "headers.index", "srcT.Common.Helper.joinLL", "headers.index"], "function", ["home.repos.pwc.inspect_result.purushottamkar_macer.Common.Helper.readCSV", "home.repos.pwc.inspect_result.purushottamkar_macer.Common.Helper.writeCSV", "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractWrapper.getProgAbstraction", "home.repos.pwc.inspect_result.purushottamkar_macer.Common.Helper.joinLL"], ["", "def", "writeAbstractions", "(", ")", ":", "\n", "    ", "path", "=", "'./final_all_noindent_singleL/'", "\n", "nameRead", "=", "path", "+", "'subset-srcTrgtPairs'", "\n", "nameWrite", "=", "nameRead", "+", "'_newAbs'", "\n", "\n", "headers", ",", "lines", "=", "H", ".", "readCSV", "(", "nameRead", "+", "'.csv'", ")", "\n", "headers", "+=", "[", "'NEW_SrcAbs'", ",", "'NEW_TrgtAbs'", "]", "\n", "writeLines", "=", "[", "]", "\n", "\n", "count", "=", "0", "\n", "for", "line", "in", "lines", "[", ":", "10", "]", ":", "\n", "        ", "writeLine", "=", "line", "\n", "srcText", "=", "line", "[", "headers", ".", "index", "(", "'sourceText'", ")", "]", "\n", "trgtText", "=", "line", "[", "headers", ".", "index", "(", "'targetText'", ")", "]", "\n", "\n", "for", "text", ",", "hname", "in", "zip", "(", "[", "srcText", ",", "trgtText", "]", ",", "[", "''", ",", "''", "]", ")", ":", "\n", "            ", "codeObj", "=", "Code", "(", "text", ")", "\n", "absLines", "=", "getProgAbstraction", "(", "codeObj", ")", "\n", "writeLine", ".", "append", "(", "H", ".", "joinLL", "(", "absLines", ")", ")", "\n", "\n", "", "count", "+=", "1", "\n", "print", "(", "count", ",", "line", "[", "headers", ".", "index", "(", "'sourceID'", ")", "]", ")", "\n", "writeLines", ".", "append", "(", "writeLine", ")", "\n", "\n", "", "H", ".", "writeCSV", "(", "nameWrite", "+", "'.csv'", ",", "headers", ",", "writeLines", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.ConcreteWrapper.printIndicesSpell": [[10, 13], ["print", "print"], "function", ["None"], ["def", "printIndicesSpell", "(", "cst_indices", ",", "trgtSpells", ")", ":", "\n", "    ", "print", "(", "'trgtToken ='", ",", "trgtSpells", ")", "\n", "print", "(", "cst_indices", ",", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.ConcreteWrapper.printSrcTokenAbs": [[14, 18], ["len", "print", "len", "print", "len", "print"], "function", ["None"], ["", "def", "printSrcTokenAbs", "(", "cst_indices", ",", "srcTrgtCigar", ")", ":", "\n", "    ", "if", "cst_indices", ".", "iTrgtAbs", "<", "len", "(", "srcTrgtCigar", ".", "trgtAbs", ")", ":", "print", "(", "'trgtAbs  ='", ",", "srcTrgtCigar", ".", "trgtAbs", "[", "cst_indices", ".", "iTrgtAbs", "]", ")", "\n", "if", "cst_indices", ".", "iSrcAbs", "<", "len", "(", "srcTrgtCigar", ".", "srcLine", ")", ":", "print", "(", "'srcTokenSpell ='", ",", "srcTrgtCigar", ".", "srcLine", "[", "cst_indices", ".", "iSrcAbs", "]", ")", "\n", "if", "cst_indices", ".", "iSrcAbs", "<", "len", "(", "srcTrgtCigar", ".", "srcAbs", ")", ":", "print", "(", "'srcTokenAbs ='", ",", "srcTrgtCigar", ".", "srcAbs", "[", "cst_indices", ".", "iSrcAbs", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.ConcreteWrapper.handleEquality": [[20, 27], ["cst_indices.getCurr_SrcLine", "cst_indices.incSrc", "cst_indices.incTrgt"], "function", ["home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.CigarSrcTrgt.CST_Indices.getCurr_SrcLine", "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.CigarSrcTrgt.CST_Indices.incSrc", "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.CigarSrcTrgt.CST_Indices.incTrgt"], ["", "def", "handleEquality", "(", "cst_indices", ")", ":", "\n", "    ", "'''If equal, add currToken spell. And increment both source & target abs counters by numAbs'''", "\n", "trgtToken", "=", "cst_indices", ".", "getCurr_SrcLine", "(", ")", "\n", "cst_indices", ".", "incSrc", "(", "trgtToken", ",", "appendOther", "=", "False", ")", "# Since both source and target consumed", "\n", "cst_indices", ".", "incTrgt", "(", "trgtToken", ",", "appendOther", "=", "False", ")", "# Don't append source or target with blanks", "\n", "\n", "return", "[", "trgtToken", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.ConcreteWrapper.handleDeletion": [[28, 34], ["cst_indices.getCurr_SrcLine", "cst_indices.incSrc"], "function", ["home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.CigarSrcTrgt.CST_Indices.getCurr_SrcLine", "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.CigarSrcTrgt.CST_Indices.incSrc"], ["", "def", "handleDeletion", "(", "cst_indices", ",", "appendOther", "=", "True", ")", ":", "\n", "    ", "'''If deletion, don't add any target spell. Just increment source abs counters by numAbs'''", "\n", "trgtToken", "=", "cst_indices", ".", "getCurr_SrcLine", "(", ")", "\n", "cst_indices", ".", "incSrc", "(", "''", ",", "appendOther", ")", "# Target spell is empty (deletion), but append Source (deletion consumes source)", "\n", "\n", "return", "[", "]", "# Ignore trgtTokens, since Deletion. But consume that many numAbs", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.ConcreteWrapper.handleInsertion": [[35, 41], ["srcT.Symbolic.ConcreteToken.guessConcreteSpell", "cst_indices.incTrgt", "cst_indices.getCurr_TrgtAbs"], "function", ["home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.ConcreteToken.guessConcreteSpell", "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.CigarSrcTrgt.CST_Indices.incTrgt", "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.CigarSrcTrgt.CST_Indices.getCurr_TrgtAbs"], ["", "def", "handleInsertion", "(", "cst_indices", ",", "appendOther", "=", "True", ")", ":", "\n", "    ", "'''If insert, guess and append the spelling of predicted Abs. Inc only target-abs counter by 1'''", "\n", "trgtToken", "=", "ConcreteToken", ".", "guessConcreteSpell", "(", "cst_indices", ".", "getCurr_TrgtAbs", "(", ")", ",", "cst_indices", ".", "srcTrgtCigar", ".", "symbTable", ")", "\n", "cst_indices", ".", "incTrgt", "(", "trgtToken", ",", "appendOther", ")", "# Consume one target Abs (hence appendOther with blank)", "\n", "\n", "return", "[", "trgtToken", "]", "# Consumed 1 target abstract token", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.ConcreteWrapper.handleReplacement": [[42, 50], ["ConcreteWrapper.handleDeletion", "ConcreteWrapper.handleInsertion"], "function", ["home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.ConcreteWrapper.handleDeletion", "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.ConcreteWrapper.handleInsertion"], ["", "def", "handleReplacement", "(", "cst_indices", ")", ":", "\n", "    ", "'''If Replace, perform Delete + Insert'''", "\n", "delTrgtTokens", "=", "handleDeletion", "(", "cst_indices", ",", "appendOther", "=", "False", ")", "# Since both source and target consumed", "\n", "insTrgtTokens", "=", "handleInsertion", "(", "cst_indices", ",", "appendOther", "=", "False", ")", "# Don't append source or target with blanks", "\n", "\n", "# Return \"inserted\" target tokens (since deleted ones are useless)", "\n", "# And the number of abstract tokens deleted, to inc freq count (since just one token inserted anyways)", "\n", "return", "insTrgtTokens", "# Consume 1 target abstract token", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.ConcreteWrapper.concretizeCToken": [[52, 80], ["callFunc", "cst_indices.decFreq", "cst_indices.srcTrgtCigar.trgtLine.extend", "Exception"], "function", ["home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.CigarSrcTrgt.CST_Indices.decFreq"], ["", "def", "concretizeCToken", "(", "cst_indices", ")", ":", "\n", "    ", "callFunc", "=", "None", "\n", "#printSrcTokenAbs(cst_indices)", "\n", "\n", "if", "cst_indices", ".", "compareOp", "==", "'='", ":", "\n", "        ", "callFunc", "=", "handleEquality", "\n", "\n", "", "elif", "cst_indices", ".", "compareOp", "==", "'D'", ":", "\n", "        ", "callFunc", "=", "handleDeletion", "\n", "\n", "", "elif", "cst_indices", ".", "compareOp", "==", "'I'", ":", "\n", "        ", "callFunc", "=", "handleInsertion", "\n", "\n", "", "elif", "cst_indices", ".", "compareOp", "==", "'X'", ":", "\n", "        ", "callFunc", "=", "handleReplacement", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'No clue on how to handle this compareOp: {}'", ".", "format", "(", "cst_indices", ".", "compareOp", ")", ")", "\n", "\n", "", "trgtTokens", "=", "callFunc", "(", "cst_indices", ")", "\n", "cst_indices", ".", "decFreq", "(", ")", "# Consumed currNumAbs (matched) abstract tokens", "\n", "cst_indices", ".", "srcTrgtCigar", ".", "trgtLine", ".", "extend", "(", "trgtTokens", ")", "\n", "\n", "isConcretized", "=", "True", "\n", "for", "trgtToken", "in", "trgtTokens", ":", "\n", "        ", "if", "trgtToken", "is", "None", "or", "ConcreteToken", ".", "STR_LITERAL", "in", "trgtToken", "or", "ConcreteToken", ".", "STR_TYPE", "in", "trgtToken", ":", "\n", "            ", "isConcretized", "=", "False", "\n", "", "", "return", "isConcretized", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.ConcreteWrapper.concretizeLine": [[81, 101], ["srcT.Symbolic.CigarSrcTrgt.CST_Indices", "re.findall", "int", "ConcreteWrapper.concretizeCToken", "Exception"], "function", ["home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.ConcreteWrapper.concretizeCToken"], ["", "def", "concretizeLine", "(", "srcTrgtCigar", ")", ":", "\n", "    ", "isConcretized", "=", "True", "\n", "cst_indices", "=", "CigarSrcTrgt", ".", "CST_Indices", "(", "srcTrgtCigar", ")", "# For every CToken, there can be one or more AbsTokens", "\n", "\n", "for", "freq", ",", "compareOp", "in", "re", ".", "findall", "(", "'(\\d+)(.)'", ",", "srcTrgtCigar", ".", "cigar", ")", ":", "# Cigar eg: 13=1I2=1X5=", "\n", "# Alternating Frequency and Compare-Operator (=, I, D)", "\n", "        ", "cst_indices", ".", "freq", ",", "cst_indices", ".", "compareOp", "=", "int", "(", "freq", ")", ",", "compareOp", "\n", "\n", "while", "cst_indices", ".", "freq", ">", "0", ":", "# 'freq' number of times, do what the compareOp says", "\n", "# Handle the conversion of currCToken to spell", "\n", "            ", "tempIsConcretized", "=", "concretizeCToken", "(", "cst_indices", ")", "\n", "isConcretized", "=", "isConcretized", "and", "tempIsConcretized", "# Don't use \"and concretizeCToken(cst_indices)\" - shortHand issue!", "\n", "\n", "if", "cst_indices", ".", "freq", "==", "freq", ":", "\n", "                ", "raise", "Exception", "(", "'Cigar not consumed. Freq is the same. Infinite loop!'", ")", "\n", "", "else", ":", "\n", "                ", "freq", "=", "cst_indices", ".", "freq", "\n", "#printIndicesSpell(cst_indices, trgtTokens)        ", "\n", "\n", "", "", "", "return", "isConcretized", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.ConcreteWrapper.attemptConcretization": [[102, 117], ["srcT.Symbolic.AbstractWrapper.getAbstractAtLine", "srcT.Symbolic.CigarSrcTrgt.lineUp_SrcTrgAbs", "srcT.Symbolic.CigarSrcTrgt.CST_Params", "ConcreteWrapper.concretizeLine", "repr", "traceback.print_exc", "traceback.print_exc"], "function", ["home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractWrapper.getAbstractAtLine", "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.CigarSrcTrgt.lineUp_SrcTrgAbs", "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.ConcreteWrapper.concretizeLine"], ["", "def", "attemptConcretization", "(", "srcCodeObj", ",", "lineNum", ",", "predAbsLine", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "srcLine", ",", "srcAbsLine", ",", "symbTable", "=", "AbstractWrapper", ".", "getAbstractAtLine", "(", "srcCodeObj", ",", "lineNum", ")", "\n", "cigar", "=", "CigarSrcTrgt", ".", "lineUp_SrcTrgAbs", "(", "srcAbsLine", ",", "predAbsLine", ")", "\n", "srcTrgtCigar", "=", "CigarSrcTrgt", ".", "CST_Params", "(", "-", "1", ",", "srcLine", ",", "srcAbsLine", ",", "predAbsLine", ",", "cigar", ",", "symbTable", ")", "\n", "\n", "# Try to concretize the Target Abstraction", "\n", "isConcretized", "=", "concretizeLine", "(", "srcTrgtCigar", ")", "\n", "return", "srcTrgtCigar", ".", "trgtLine", ",", "isConcretized", "\n", "\n", "# If not possible, note down the failure cases", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "exception", "=", "repr", "(", "e", ")", "\n", "traceback", ".", "print_exc", "(", ")", "\n", "return", "exception", ",", "False", "", "", "", ""]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.ConcreteToken.guessLiteral": [[10, 22], ["None"], "function", ["None"], ["def", "guessLiteral", "(", "literalType", ")", ":", "\n", "    ", "'''Return a hard-code literal of matching type'''", "\n", "if", "literalType", "==", "'INT'", ":", "\n", "        ", "return", "'0'", "\n", "", "elif", "literalType", "==", "'DOUBLE'", ":", "\n", "        ", "return", "'0.0'", "\n", "", "elif", "literalType", "==", "'CHAR'", ":", "\n", "        ", "return", "'c'", "\n", "", "elif", "literalType", "==", "'STRING'", ":", "\n", "        ", "return", "'str'", "\n", "", "else", ":", "\n", "        ", "return", "STR_LITERAL", "+", "literalType", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.ConcreteToken.guessTypeKind": [[23, 26], ["symbTable.getVar_MatchingType"], "function", ["home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.AbstractWrapper.SymbTable.getVar_MatchingType"], ["", "", "def", "guessTypeKind", "(", "typeKind", ",", "symbTable", ")", ":", "\n", "    ", "'''Check SymbTable, and return a variable having typeKind'''", "\n", "return", "symbTable", ".", "getVar_MatchingType", "(", "typeKind", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.ConcreteToken.checkRnnPreProcess": [[27, 33], ["None"], "function", ["None"], ["", "def", "checkRnnPreProcess", "(", "trgtAbs", ")", ":", "\n", "    ", "if", "trgtAbs", "==", "'<start>'", ":", "\n", "        ", "return", "'{'", "\n", "", "elif", "trgtAbs", "==", "'<stop>'", ":", "\n", "        ", "return", "'}'", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.ConcreteToken.guessConcreteSpell": [[34, 53], ["trgtAbs.startswith", "ConcreteToken.guessLiteral", "trgtAbs.startswith", "ConcreteToken.guessTypeKind", "ConcreteToken.checkRnnPreProcess", "len"], "function", ["home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.ConcreteToken.guessLiteral", "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.ConcreteToken.guessTypeKind", "home.repos.pwc.inspect_result.purushottamkar_macer.Symbolic.ConcreteToken.checkRnnPreProcess"], ["", "def", "guessConcreteSpell", "(", "trgtAbs", ",", "symbTable", ")", ":", "\n", "    ", "'''Mainly, handle LITERAL or TypeKind abstractions. \n    For rest, simply returns the trgtAbs (as is) - assume its probably punctuation/keyword'''", "\n", "\n", "spell", "=", "None", "\n", "if", "trgtAbs", ".", "startswith", "(", "STR_LITERAL", ")", ":", "\n", "        ", "spell", "=", "guessLiteral", "(", "trgtAbs", "[", "len", "(", "STR_LITERAL", ")", ":", "]", ")", "\n", "\n", "", "elif", "trgtAbs", ".", "startswith", "(", "STR_TYPE", ")", ":", "\n", "        ", "spell", "=", "guessTypeKind", "(", "trgtAbs", ",", "symbTable", ")", "\n", "\n", "", "else", ":", "\n", "        ", "rnnPreProcess", "=", "checkRnnPreProcess", "(", "trgtAbs", ")", "\n", "\n", "if", "rnnPreProcess", "!=", "None", ":", "\n", "            ", "spell", "=", "rnnPreProcess", "\n", "", "else", ":", "spell", "=", "trgtAbs", "# If neither Literal, nor a type, return the abstract itself (probably punctuation/keyword)", "\n", "\n", "", "return", "spell", "", "", ""]], "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.__init__": [[19, 27], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "codeText", ",", "codeID", "=", "None", ",", "indent", "=", "False", ")", ":", "\n", "        ", "'''Needs a codeText (plain text code)'''", "\n", "self", ".", "codeText", "=", "codeText", "\n", "self", ".", "codeID", "=", "codeID", "\n", "self", ".", "notIndented", "=", "indent", "# True => trigger self.codeIndent() on calling clangParse", "\n", "\n", "self", ".", "tu", "=", "None", "\n", "self", ".", "ces", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.codeIndent": [[28, 35], ["subprocess.Popen", "subprocess.Popen.communicate", "Code.Code.codeText.replace"], "methods", ["None"], ["", "def", "codeIndent", "(", "self", ")", ":", "\n", "        ", "'''Pretty format the student's codeText (multi statements into multi lines)'''", "\n", "p", "=", "Popen", "(", "[", "'indent'", ",", "'-linux'", "]", ",", "stdout", "=", "PIPE", ",", "stdin", "=", "PIPE", ",", "stderr", "=", "PIPE", ")", "\n", "self", ".", "codeText", ",", "err", "=", "p", ".", "communicate", "(", "input", "=", "self", ".", "codeText", ".", "replace", "(", "'\\r'", ",", "'\\n'", ")", ")", "\n", "\n", "if", "err", "!=", "''", "and", "err", "!=", "None", ":", "\n", "            ", "pass", "\n", "#print err", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.clangParse": [[37, 49], ["Code.Code.codeIndent", "Code.index.parse", "traceback.print_exc", "print"], "methods", ["home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.codeIndent"], ["", "", "def", "clangParse", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "notIndented", ":", "\n", "            ", "self", ".", "codeIndent", "(", ")", "\n", "self", ".", "notIndented", "=", "False", "\n", "\n", "", "try", ":", "\n", "            ", "filename", "=", "'temp.c'", "\n", "self", ".", "tu", "=", "Code", ".", "index", ".", "parse", "(", "filename", ",", "\n", "args", "=", "CF", ".", "ClangArgs", ",", "unsaved_files", "=", "[", "(", "filename", ",", "self", ".", "codeText", ")", "]", ")", "\n", "", "except", "Exception", ":", "\n", "            ", "traceback", ".", "print_exc", "(", ")", "\n", "print", "(", "self", ".", "codeText", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.getTU": [[50, 57], ["Code.Code.clangParse", "Code.Code.addCEsTU", "Exception"], "methods", ["home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.clangParse", "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.addCEsTU"], ["", "", "def", "getTU", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "tu", "==", "None", ":", "\n", "            ", "self", ".", "clangParse", "(", ")", "\n", "self", ".", "addCEsTU", "(", ")", "\n", "\n", "", "if", "self", ".", "tu", "is", "None", ":", "raise", "Exception", "(", "'tu is None!'", ")", "\n", "return", "self", ".", "tu", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.delTU_CEs": [[58, 61], ["None"], "methods", ["None"], ["", "def", "delTU_CEs", "(", "self", ")", ":", "\n", "        ", "self", ".", "tu", "=", "None", "\n", "self", ".", "ces", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.getTokens": [[62, 67], ["Code.Code.getTU", "list", "Code.Code.getTU().cursor.get_tokens", "Code.Code.getTU"], "methods", ["home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.getTU", "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.getTU"], ["", "def", "getTokens", "(", "self", ")", ":", "\n", "        ", "tu", "=", "self", ".", "getTU", "(", ")", "\n", "if", "tu", "!=", "None", ":", "\n", "            ", "return", "list", "(", "self", ".", "getTU", "(", ")", ".", "cursor", ".", "get_tokens", "(", ")", ")", "\n", "", "else", ":", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.getTokenLines": [[68, 87], ["Code.Code.getTokens", "len", "len", "tokenLines.append", "tempLine.append", "tokenLines.append"], "methods", ["home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.getTokens"], ["", "def", "getTokenLines", "(", "self", ")", ":", "\n", "        ", "allTokens", "=", "self", ".", "getTokens", "(", ")", "\n", "lineNum", ",", "index", "=", "1", ",", "0", "\n", "tempLine", ",", "tokenLines", "=", "[", "]", ",", "[", "]", "\n", "\n", "while", "index", "<", "len", "(", "allTokens", ")", ":", "\n", "            ", "token", "=", "allTokens", "[", "index", "]", "\n", "if", "token", ".", "location", ".", "line", "==", "lineNum", ":", "\n", "                ", "tempLine", ".", "append", "(", "token", ")", "\n", "index", "+=", "1", "\n", "", "else", ":", "\n", "                ", "tokenLines", ".", "append", "(", "tempLine", ")", "\n", "tempLine", "=", "[", "]", "\n", "lineNum", "+=", "1", "\n", "\n", "", "", "if", "len", "(", "tempLine", ")", "!=", "0", ":", "# Add the leftover tokens", "\n", "            ", "tokenLines", ".", "append", "(", "tempLine", ")", "\n", "\n", "", "return", "tokenLines", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.getTokenSpellLines": [[88, 91], ["Code.Code.getTokenLines"], "methods", ["home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.getTokenLines"], ["", "def", "getTokenSpellLines", "(", "self", ")", ":", "\n", "        ", "tokenLines", "=", "self", ".", "getTokenLines", "(", ")", "\n", "return", "[", "[", "token", ".", "spelling", "for", "token", "in", "line", "]", "for", "line", "in", "tokenLines", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.getTokensAtLine": [[92, 97], ["Code.Code.getTokens"], "methods", ["home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.getTokens"], ["", "def", "getTokensAtLine", "(", "self", ",", "lineNum", ")", ":", "\n", "        ", "fileTokens", "=", "self", ".", "getTokens", "(", ")", "\n", "if", "fileTokens", "!=", "None", ":", "\n", "            ", "return", "[", "t", "for", "t", "in", "fileTokens", "if", "t", ".", "location", ".", "line", "==", "lineNum", "]", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.getCEs": [[98, 104], ["len", "Code.Code.getTU"], "methods", ["home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.getTU"], ["", "def", "getCEs", "(", "self", ")", ":", "\n", "        ", "'''Get all compilation errors'''", "\n", "if", "len", "(", "self", ".", "ces", ")", "==", "0", ":", "\n", "            ", "tu", "=", "self", ".", "getTU", "(", ")", "\n", "\n", "", "return", "self", ".", "ces", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.getCE_lines": [[105, 108], ["list", "set", "Code.Code.getSevereErrors"], "methods", ["home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.getSevereErrors"], ["", "def", "getCE_lines", "(", "self", ")", ":", "\n", "        ", "'''Get all line numbers, where compilation error occurred'''", "\n", "return", "list", "(", "set", "(", "[", "ce", ".", "line", "for", "ce", "in", "self", ".", "getSevereErrors", "(", ")", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.getCEsAtLine": [[110, 114], ["Code.Code.getCEs"], "methods", ["home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.getCEs"], ["", "def", "getCEsAtLine", "(", "self", ",", "lineNum", ")", ":", "\n", "        ", "if", "self", ".", "getCEs", "(", ")", "!=", "None", ":", "\n", "            ", "return", "[", "ce", "for", "ce", "in", "self", ".", "ces", "if", "ce", ".", "line", "==", "lineNum", "]", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.addCEsTU": [[115, 123], ["len", "srcT.DataStruct.CompError.CompError", "srcT.DataStruct.CompError.CompError.initDiagnostics", "srcT.DataStruct.CompError.CompError.findTokens", "Code.Code.ces.append"], "methods", ["home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.CompError.CompError.initDiagnostics", "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.CompError.CompError.findTokens"], ["", "def", "addCEsTU", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "ces", ")", "==", "0", "and", "self", ".", "tu", "!=", "None", ":", "\n", "            ", "for", "diag", "in", "self", ".", "tu", ".", "diagnostics", ":", "\n", "                ", "ce", "=", "CompError", ".", "CompError", "(", ")", "\n", "ce", ".", "initDiagnostics", "(", "diag", ")", "\n", "ce", ".", "findTokens", "(", "self", ".", "tu", ")", "\n", "\n", "self", ".", "ces", ".", "append", "(", "ce", ")", "\n", "#print ce", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.getSevereErrors": [[125, 128], ["Code.Code.getCEs"], "methods", ["home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.getCEs"], ["", "", "", "def", "getSevereErrors", "(", "self", ")", ":", "\n", "        ", "return", "[", "ce", "for", "ce", "in", "self", ".", "getCEs", "(", ")", "\n", "if", "ce", ".", "severity", "==", "Diagnostic", ".", "Error", "or", "ce", ".", "severity", "==", "Diagnostic", ".", "Fatal", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.getWarnings": [[130, 132], ["Code.Code.getCEs"], "methods", ["home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.getCEs"], ["", "def", "getWarnings", "(", "self", ")", ":", "\n", "        ", "return", "[", "ce", "for", "ce", "in", "self", ".", "getCEs", "(", ")", "if", "ce", ".", "severity", "==", "Diagnostic", ".", "Warning", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.getNumErrors": [[133, 135], ["len", "Code.Code.getSevereErrors"], "methods", ["home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.getSevereErrors"], ["", "def", "getNumErrors", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "getSevereErrors", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.getNumWarnings": [[136, 138], ["len", "Code.Code.getWarnings"], "methods", ["home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.getWarnings"], ["", "def", "getNumWarnings", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "getWarnings", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.cesToString": [[139, 141], ["str", "Code.Code.getCEs"], "methods", ["home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.getCEs"], ["", "def", "cesToString", "(", "self", ")", ":", "\n", "        ", "return", "'\\n'", ".", "join", "(", "[", "str", "(", "ce", ")", "for", "ce", "in", "self", ".", "getCEs", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.checkErrLineExists": [[143, 149], ["Code.Code.getCEs", "ce.compareErrLine"], "methods", ["home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.getCEs", "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.CompError.CompError.compareErrLine"], ["", "def", "checkErrLineExists", "(", "self", ",", "givenCE", ")", ":", "\n", "        ", "'''Check if the givenCE exists in this particular, at the level of line (ignore pos, just check for line and msg equivalence)'''", "\n", "for", "ce", "in", "self", ".", "getCEs", "(", ")", ":", "\n", "            ", "if", "ce", ".", "compareErrLine", "(", "givenCE", ")", ":", "\n", "                ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.compareErrsDiffLine": [[150, 166], ["collections.defaultdict", "collections.defaultdict", "Code.Code.getCEs", "codeObj.getCEs", "lineSelfCEs[].append", "lineObjCEs[].append", "len", "len"], "methods", ["home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.getCEs", "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.getCEs"], ["", "def", "compareErrsDiffLine", "(", "self", ",", "codeObj", ",", "lineNum", ")", ":", "\n", "        ", "'''Given a lineNum, return #errsDiff btw self and codeObj at that lineNum'''", "\n", "ces1", ",", "ces2", "=", "self", ".", "getCEs", "(", ")", ",", "codeObj", ".", "getCEs", "(", ")", "\n", "numErrSelf", ",", "numErrObj", "=", "0", ",", "0", "\n", "if", "ces1", "==", "None", "or", "ces2", "==", "None", ":", "return", "None", "\n", "\n", "lineSelfCEs", "=", "collections", ".", "defaultdict", "(", "lambda", ":", "[", "]", ")", "\n", "for", "ce", "in", "self", ".", "ces", ":", "lineSelfCEs", "[", "ce", ".", "line", "]", ".", "append", "(", "ce", ")", "\n", "\n", "lineObjCEs", "=", "collections", ".", "defaultdict", "(", "lambda", ":", "[", "]", ")", "\n", "for", "ce", "in", "codeObj", ".", "ces", ":", "lineObjCEs", "[", "ce", ".", "line", "]", ".", "append", "(", "ce", ")", "\n", "\n", "if", "lineNum", "in", "lineSelfCEs", ":", "numErrSelf", "=", "len", "(", "lineSelfCEs", "[", "lineNum", "]", ")", "\n", "if", "lineNum", "in", "lineObjCEs", ":", "numErrObj", "=", "len", "(", "lineObjCEs", "[", "lineNum", "]", ")", "\n", "\n", "return", "numErrSelf", "-", "numErrObj", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.compareErrs": [[168, 209], ["Code.Code.getCEs", "codeObj.getCEs", "len", "len", "len", "len", "Code.Code.ces[].compareErr"], "methods", ["home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.getCEs", "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.getCEs", "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.CompError.CompError.compareErr"], ["", "def", "compareErrs", "(", "self", ",", "codeObj", ")", ":", "\n", "        ", "ces1", ",", "ces2", "=", "self", ".", "getCEs", "(", ")", ",", "codeObj", ".", "getCEs", "(", ")", "\n", "numErr1", ",", "numErr2", "=", "0", ",", "0", "\n", "index1", ",", "index2", "=", "0", ",", "0", "\n", "flag", "=", "True", "\n", "if", "ces1", "==", "None", "or", "ces2", "==", "None", ":", "return", "None", "\n", "\n", "while", "index1", "<", "len", "(", "self", ".", "ces", ")", "or", "index2", "<", "len", "(", "codeObj", ".", "ces", ")", ":", "\n", "# Ignore note type of errors (present only in command line compile mode)        ", "\n", "            ", "'''\n            if  index1 < len(self.ces) and self.ces[index1].typeErr == 'note': \n                index1 += 1 \n                continue             \n            \n            if index2 < len(codeObj.ces) and codeObj.ces[index2].typeErr == 'note':\n                index2 += 1 \n                continue\n            '''", "\n", "\n", "# No point in continuing compare if codeObj (or self) ran out of ces. Inc num errs & index (ordering imp - typeErr check needs to be above)", "\n", "if", "index1", ">=", "len", "(", "self", ".", "ces", ")", ":", "\n", "                ", "index2", "+=", "1", "\n", "numErr2", "+=", "1", "\n", "flag", "=", "False", "\n", "continue", "\n", "\n", "", "if", "index2", ">=", "len", "(", "codeObj", ".", "ces", ")", ":", "\n", "                ", "index1", "+=", "1", "\n", "numErr1", "+=", "1", "\n", "flag", "=", "False", "\n", "continue", "\n", "\n", "", "if", "not", "self", ".", "ces", "[", "index1", "]", ".", "compareErr", "(", "codeObj", ".", "ces", "[", "index2", "]", ")", ":", "\n", "                ", "flag", "=", "False", "\n", "\n", "", "index1", "+=", "1", "\n", "index2", "+=", "1", "\n", "numErr1", "+=", "1", "\n", "numErr2", "+=", "1", "\n", "\n", "", "return", "flag", ",", "numErr1", "-", "numErr2", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.ClusterError.getAllErrs": [[9, 19], ["pandas.read_csv", "pd.read_csv.iterrows", "os.path.exists", "ClusterError.saveAllErrs", "srcT.Common.ConfigFile"], "function", ["home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.ClusterError.saveAllErrs"], ["def", "getAllErrs", "(", "fname", ")", ":", "\n", "    ", "allErrs", "=", "{", "}", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "fname", ")", ":", "\n", "        ", "saveAllErrs", "(", "allErrs", ")", "\n", "\n", "", "df", "=", "pd", ".", "read_csv", "(", "fname", ",", "index_col", "=", "False", ")", "\n", "for", "i", ",", "row", "in", "df", ".", "iterrows", "(", ")", ":", "\n", "        ", "allErrs", "[", "row", "[", "'msg'", "]", "]", "=", "row", "[", "'id'", "]", "\n", "\n", "", "return", "allErrs", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.ClusterError.saveAllErrs": [[20, 28], ["pandas.DataFrame", "pd.DataFrame.to_csv", "data.append"], "function", ["None"], ["", "def", "saveAllErrs", "(", "allErrs", ")", ":", "\n", "    ", "data", "=", "[", "]", "\n", "for", "msg", "in", "allErrs", ":", "\n", "        ", "iden", "=", "allErrs", "[", "msg", "]", "\n", "data", ".", "append", "(", "(", "iden", ",", "msg", ")", ")", "\n", "\n", "", "df", "=", "pd", ".", "DataFrame", "(", "data", "=", "data", ",", "columns", "=", "[", "'id'", ",", "'msg'", "]", ")", "\n", "df", ".", "to_csv", "(", "CF", ".", "fname_newErrIDs", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.ClusterError.replIDs": [[29, 34], ["re.sub", "re.sub"], "function", ["None"], ["", "def", "replIDs", "(", "msg", ")", ":", "\n", "    ", "msg", "=", "re", ".", "sub", "(", "r'\\'(.*?)\\''", ",", "'ID'", ",", "msg", ")", "\n", "msg", "=", "re", ".", "sub", "(", "'\\d+'", ",", "'NUM'", ",", "msg", ")", "\n", "\n", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.ClusterError.getErrIDs": [[35, 48], ["codeObj.getSevereErrors", "sorted", "ClusterError.replIDs", "eids.append", "ClusterError.saveAllErrs", "len"], "function", ["home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.Code.Code.getSevereErrors", "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.ClusterError.replIDs", "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.ClusterError.saveAllErrs"], ["", "def", "getErrIDs", "(", "allErrs", ",", "codeObj", ",", "lineNum", "=", "None", ")", ":", "\n", "    ", "eids", "=", "[", "]", "\n", "\n", "for", "ce", "in", "codeObj", ".", "getSevereErrors", "(", ")", ":", "\n", "        ", "if", "lineNum", "is", "None", "or", "ce", ".", "line", "==", "lineNum", ":", "# If filter by lineNum", "\n", "            ", "msg", "=", "replIDs", "(", "ce", ".", "msg", ")", "\n", "\n", "if", "msg", "not", "in", "allErrs", ":", "\n", "                ", "allErrs", "[", "msg", "]", "=", "len", "(", "allErrs", ")", "+", "1", "\n", "saveAllErrs", "(", "allErrs", ")", "\n", "", "eids", ".", "append", "(", "allErrs", "[", "msg", "]", ")", "\n", "\n", "", "", "return", "sorted", "(", "eids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.ClusterError.getErrSet": [[49, 52], ["ClusterError.getErrIDs", "set"], "function", ["home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.ClusterError.getErrIDs"], ["", "def", "getErrSet", "(", "allErrs", ",", "codeObj", ",", "lineNum", "=", "None", ")", ":", "\n", "    ", "eids", "=", "getErrIDs", "(", "allErrs", ",", "codeObj", ",", "lineNum", ")", "\n", "return", "set", "(", "eids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.ClusterError.getErrSetStr": [[53, 56], ["ClusterError.getErrSet", "srcT.Common.Helper.joinList"], "function", ["home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.ClusterError.getErrSet", "home.repos.pwc.inspect_result.purushottamkar_macer.Common.Helper.joinList"], ["", "def", "getErrSetStr", "(", "allErrs", ",", "codeObj", ",", "lineNum", "=", "None", ")", ":", "\n", "    ", "errSet", "=", "getErrSet", "(", "allErrs", ",", "codeObj", ",", "lineNum", ")", "\n", "return", "H", ".", "joinList", "(", "errSet", ",", "';'", ")", "+", "';'", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.ClusterError.createClass": [[61, 85], ["pandas.read_csv", "ClusterError.getAllErrs", "pd.read_csv.iterrows", "pd.read_csv.to_csv", "srcT.DataStruct.Code.Code", "ClusterError.getErrSetStr", "newErrSets.append", "classes.append", "srcT.Common.Helper.joinList", "print", "oldClass.splitlines", "len", "str"], "function", ["home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.ClusterError.getAllErrs", "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.ClusterError.getErrSetStr", "home.repos.pwc.inspect_result.purushottamkar_macer.Common.Helper.joinList"], ["", "def", "createClass", "(", "fnameDataset", ")", ":", "\n", "    ", "'''Given a dataset (CSV) file, replace old error-IDs (obtained using regex) with new ones (obtained using Clang LLVM)'''", "\n", "df", "=", "pd", ".", "read_csv", "(", "fnameDataset", ",", "encoding", "=", "\"ISO-8859-1\"", ")", "\n", "allErrs", "=", "getAllErrs", "(", "CF", ".", "fname_newErrIDs", ")", "\n", "classes", ",", "classesRepeat", ",", "newErrSets", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "mult", "=", "10", "\n", "\n", "for", "i", ",", "row", "in", "df", ".", "iterrows", "(", ")", ":", "\n", "        ", "oldClass", "=", "row", "[", "'errSet_diffs'", "]", "\n", "codeObj", "=", "Code", "(", "row", "[", "'sourceText'", "]", ")", "\n", "\n", "newErrsetStr", "=", "getErrSetStr", "(", "allErrs", ",", "codeObj", ")", "\n", "newClass", "=", "newErrsetStr", "+", "'\\n'", "+", "H", ".", "joinList", "(", "oldClass", ".", "splitlines", "(", ")", "[", "1", ":", "]", ")", "\n", "\n", "newErrSets", ".", "append", "(", "newErrsetStr", ")", "\n", "classes", ".", "append", "(", "newClass", ")", "\n", "\n", "if", "i", ">=", "len", "(", "df", ")", "*", "mult", "/", "100", ":", "\n", "            ", "print", "(", "str", "(", "mult", ")", "+", "'%'", ",", "end", "=", "' '", ",", "flush", "=", "True", ")", "\n", "mult", "+=", "10", "\n", "\n", "", "", "df", "[", "'class'", "]", "=", "classes", "\n", "df", "[", "'newErrSet'", "]", "=", "newErrSets", "\n", "df", ".", "to_csv", "(", "fnameDataset", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.PrepDeepFix.addDummyCols": [[4, 26], ["pandas.read_csv", "pd.read_csv.to_csv"], "function", ["None"], ["def", "addDummyCols", "(", "cols", ")", ":", "\n", "    ", "df", "=", "pd", ".", "read_csv", "(", "CF", ".", "fnameDeepFix_Test", ",", "encoding", "=", "\"ISO-8859-1\"", ")", "\n", "\n", "if", "'id'", "not", "in", "df", ".", "columns", ":", "\n", "        ", "df", "[", "'id'", "]", "=", "df", "[", "'code_id'", "]", "\n", "del", "df", "[", "'code_id'", "]", "\n", "\n", "", "if", "'sourceText'", "not", "in", "df", ".", "columns", ":", "\n", "        ", "df", "[", "'sourceText'", "]", "=", "df", "[", "'code'", "]", "\n", "del", "df", "[", "'code'", "]", "\n", "\n", "", "df", "[", "'targetText'", "]", "=", "\"\"", "\n", "\n", "df", "[", "'sourceLineText'", "]", "=", "\"\"", "\n", "df", "[", "'targetLineText'", "]", "=", "\"\"", "\n", "\n", "df", "[", "'sourceLineAbs'", "]", "=", "\"\"", "\n", "df", "[", "'targetLineAbs'", "]", "=", "\"\"", "\n", "\n", "df", "[", "'lineNums_Text'", "]", "=", "\"\"", "\n", "\n", "df", ".", "to_csv", "(", "CF", ".", "fnameDeepFix_Test", ",", "index", "=", "False", ")", "\n", "# sourceAbs\ttargetAbs\tsourceLineText\ttargetLineText\tsourceLineAbs\ttargetLineAbs\tlineNums_Text\tlineNums_Abs\tdiffText_ins\tdiffText_del\tdiffText_repl\tdiffAbs_ins\tdiffAbs_del\terrSet_diffs\tsourceErrorPrutor\tsourceErrorClangParse\tErrSet\tclass\tnewErrSet", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.SrcTarget.SrcTarget.__init__": [[7, 31], ["int", "base64.b64decode", "Code.Code.Code", "targetData.split", "int", "base64.b64decode", "Code.Code.Code"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "row", ")", ":", "\n", "        ", "self", ".", "row", "=", "row", "\n", "indent", "=", "False", "\n", "\n", "self", ".", "event_name", "=", "row", "[", "0", "]", "\n", "self", ".", "assignID", "=", "row", "[", "1", "]", "\n", "self", ".", "srcCodeID", "=", "int", "(", "row", "[", "2", "]", ")", "\n", "\n", "self", ".", "srcCodeText", "=", "base64", ".", "b64decode", "(", "row", "[", "3", "]", ")", "\n", "self", ".", "sourceCodeObj", "=", "Code", "(", "self", ".", "srcCodeText", ",", "indent", "=", "indent", ",", "codeID", "=", "self", ".", "srcCodeID", ")", "\n", "\n", "self", ".", "sourceTime", "=", "row", "[", "4", "]", "\n", "self", ".", "sourceErrors", "=", "row", "[", "5", "]", "\n", "\n", "\n", "targetData", "=", "row", "[", "6", "]", "\n", "self", ".", "targetCodeID", "=", "None", "\n", "self", ".", "targetCodeObj", "=", "None", "\n", "\n", "if", "targetData", "!=", "None", ":", "\n", "            ", "self", ".", "targetCodeID", ",", "self", ".", "targetTime", ",", "targetContents", "=", "targetData", ".", "split", "(", "','", ")", "\n", "self", ".", "targetCodeID", "=", "int", "(", "self", ".", "targetCodeID", ")", "\n", "self", ".", "targetCodeText", "=", "base64", ".", "b64decode", "(", "targetContents", ")", "\n", "self", ".", "targetCodeObj", "=", "Code", "(", "self", ".", "targetCodeText", ",", "indent", "=", "indent", ",", "codeID", "=", "self", ".", "targetCodeID", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.CompError.CompError.__init__": [[10, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "ids", "=", "[", "]", "\n", "self", ".", "tokens", "=", "[", "]", "\n", "self", ".", "tokenSpellings", "=", "[", "]", "\n", "\n", "self", ".", "severity", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.CompError.CompError.initDiagnostics": [[17, 23], ["None"], "methods", ["None"], ["", "def", "initDiagnostics", "(", "self", ",", "diag", ")", ":", "\n", "        ", "self", ".", "line", "=", "diag", ".", "location", ".", "line", "\n", "self", ".", "pos", "=", "diag", ".", "location", ".", "column", "\n", "self", ".", "typeErr", "=", "diag", ".", "category_name", "\n", "self", ".", "msg", "=", "diag", ".", "spelling", "\n", "self", ".", "severity", "=", "diag", ".", "severity", "\n", "#self.findIDs()", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.CompError.CompError.__str__": [[25, 27], ["str", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "line", ")", "+", "\"-\"", "+", "str", "(", "self", ".", "pos", ")", "+", "\" \"", "+", "self", ".", "typeErr", "+", "\": \"", "+", "self", ".", "msg", "\n", "#+ \"\\ne-\" + str(self.id) + \"->cc-\" + str(self.compID) + \"->co-\" + str(self.codeID) ", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.CompError.CompError.findIDs": [[29, 34], ["re.findall", "CompError.CompError.ids.append"], "methods", ["None"], ["", "def", "findIDs", "(", "self", ")", ":", "\n", "        ", "patternStr", "=", "r'([^\\']*?)\\'(.*?)\\'([^\\']*?)'", "\n", "matches", "=", "re", ".", "findall", "(", "patternStr", ",", "self", ".", "msg", ")", "\n", "for", "match", "in", "matches", ":", "\n", "            ", "self", ".", "ids", ".", "append", "(", "match", "[", "1", "]", ")", "# Pick the string between quotes (2nd group), for all matches", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.CompError.CompError.findTokens": [[36, 42], ["tu.cursor.get_tokens", "CompError.CompError.tokens.append"], "methods", ["None"], ["", "", "def", "findTokens", "(", "self", ",", "tu", ")", ":", "\n", "        ", "for", "token", "in", "tu", ".", "cursor", ".", "get_tokens", "(", ")", ":", "\n", "            ", "if", "token", ".", "location", ".", "line", "==", "self", ".", "line", ":", "\n", "                ", "self", ".", "tokens", ".", "append", "(", "token", ")", "\n", "\n", "", "", "self", ".", "tokenSpellings", "=", "[", "t", ".", "spelling", "for", "t", "in", "self", ".", "tokens", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.CompError.CompError.getTokenStr": [[44, 46], ["None"], "methods", ["None"], ["", "def", "getTokenStr", "(", "self", ")", ":", "\n", "        ", "return", "' '", ".", "join", "(", "self", ".", "tokenSpellings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.CompError.CompError.compareErr": [[47, 49], ["None"], "methods", ["None"], ["", "def", "compareErr", "(", "self", ",", "ce", ")", ":", "\n", "        ", "return", "self", ".", "line", "==", "ce", ".", "line", "and", "self", ".", "pos", "==", "ce", ".", "pos", "and", "self", ".", "msg", "==", "ce", ".", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.DataStruct.CompError.CompError.compareErrLine": [[50, 52], ["None"], "methods", ["None"], ["", "def", "compareErrLine", "(", "self", ",", "ce", ")", ":", "# Don't check position'", "\n", "        ", "return", "self", ".", "line", "==", "ce", ".", "line", "and", "self", ".", "msg", "==", "ce", ".", "msg", "\n", "", "", ""]], "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.predictAbs": [[24, 39], ["Predict.test"], "function", ["home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.test"], ["def", "predictAbs", "(", "srcAbsLine", ",", "errSet", ",", "trgtAbsLine", ",", "predAtK", ")", ":", "\n", "    ", "'''Give the source abstract line (list of tokens/strings), \n    errSet and predAtK,\nreturns the predicted abstract line (list of tokens/strings)'''", "\n", "\n", "src_line", "=", "''", "\n", "for", "token", "in", "srcAbsLine", ":", "\n", "        ", "src_line", "+=", "token", "+", "' '", "\n", "", "src_line", "+=", "'\\n'", "\n", "targetLines", "=", "test", "(", "src_line", ",", "errSet", ",", "predAtK", ")", "\n", "if", "targetLines", "!=", "[", "]", ":", "\n", "        ", "repairedLines", "=", "targetLines", "\n", "", "else", ":", "\n", "        ", "repairedLines", "=", "[", "srcAbsLine", "]", "\n", "", "return", "repairedLines", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.test": [[41, 399], ["Predict.create_bigram", "srcT.Prediction.Globals.edit_tkn.texts_to_matrix", "Predict.create_feat_vector", "srcT.Prediction.Globals.tkn.texts_to_matrix", "timeit.default_timer", "srcT.Prediction.Globals.repl_class_model.predict", "srcT.Prediction.Globals.ins_class_model.predict_proba", "srcT.Prediction.Globals.del_class_model.predict_proba", "srcT.Prediction.Globals.rest_class_model.predict_proba", "timeit.default_timer", "timeit.default_timer", "Predict.get_dist", "Predict.get_dist", "Predict.get_ins_mask", "numpy.delete", "Predict.get_dist", "Predict.get_del_mask", "numpy.delete", "Predict.get_dist", "Predict.get_rest_mask", "numpy.delete", "sorted", "sorted", "sorted", "sorted", "timeit.default_timer", "range", "srcT.Prediction.Globals.ins_del_model.predict", "timeit.default_timer", "srcT.Prediction.Globals.new_encoder.transform", "numpy.zeros", "numpy.where", "timeit.default_timer", "Predict.get_predicted_bigrams", "Predict.get_predicted_edit_pos", "timeit.default_timer", "sorted", "timeit.default_timer", "srcT.Prediction.Globals.repl_or_not.predict", "numpy.where", "srcT.Prediction.Globals.repl_encoder.inverse_transform", "flat_rankers[].estimators_[].predict", "what_to_edit[].split", "token.startswith", "src_line.split", "sorted", "range", "range", "targetLines.append", "numpy.where", "srcT.Prediction.Globals.ins_encoder.inverse_transform", "dl.append", "token.startswith", "len", "src_line.split", "range", "range", "range", "targetLines.append", "len", "src_line.split", "range", "range", "range", "targetLines.append", "len", "len", "len", "src_line.split", "targetLines.append", "src_line.split", "range", "numpy.where", "srcT.Prediction.Globals.del_encoder.inverse_transform", "srcT.Prediction.Globals.rest_encoder.inverse_transform", "add.append", "len", "sorted.remove", "sorted.remove", "len", "len", "sorted.remove", "len", "len", "len", "split_line[].replace", "target_line.split", "targetLines.append", "targetLines.append", "len", "len", "len", "zip", "src_line.split", "range", "range", "len", "len", "range", "numpy.where", "len", "len", "target_line.split", "len", "split_line[].replace", "len", "target_line.split", "range", "targetLines.append", "range", "range", "len", "target_line.split", "len", "range", "target_line.split", "target_line.split", "targetLines.append", "targetLines.append", "range", "len", "len", "range", "len", "len", "split_line[].replace", "ins_bigram_to_line().split", "len", "split_line[].replace", "len", "split_line[].replace", "split_line[].replace", "targetLines.append", "targetLines.append", "sorted.remove", "split_line[].replace", "ins_bigram_to_line().split", "[].split", "ins_bigram_to_line().split", "len", "split_line[].replace", "len", "split_line[].replace", "sorted.remove", "split_line[].replace", "sorted.remove", "Predict.ins_bigram_to_line", "sorted.remove", "split_line[].replace", "sorted.remove", "split_line[].replace", "sorted.remove", "make_target_line().split", "make_target_line().split", "Predict.ins_bigram_to_line", "Predict.ins_bigram_to_line", "sorted.remove", "sorted.remove", "[].split", "Predict.make_target_line", "Predict.make_target_line"], "function", ["home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.create_bigram", "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.create_feat_vector", "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.get_dist", "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.get_dist", "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.get_ins_mask", "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.get_dist", "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.get_del_mask", "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.get_dist", "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.get_rest_mask", "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.get_predicted_bigrams", "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.get_predicted_edit_pos", "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.ins_bigram_to_line", "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.ins_bigram_to_line", "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.ins_bigram_to_line", "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.make_target_line", "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.make_target_line"], ["", "def", "test", "(", "src_line", ",", "errs", ",", "predAtK", ")", ":", "\n", "    ", "'''Compare with ideal predicted target line'''", "\n", "tmp_bigram", "=", "create_bigram", "(", "src_line", ")", "\n", "\n", "enc_tmp_bigram", "=", "edit_tkn", ".", "texts_to_matrix", "(", "tmp_bigram", ")", "\n", "\n", "tmp_feat_vector", "=", "create_feat_vector", "(", "errs", ",", "src_line", ")", "\n", "\n", "enc_tmp_feat_vector", "=", "tkn", ".", "texts_to_matrix", "(", "tmp_feat_vector", ")", "\n", "\n", "repl_p", "=", "repl_or_not", ".", "predict", "(", "enc_tmp_feat_vector", ")", "[", "0", "]", "[", "0", "]", "\n", "\n", "noRepl", "=", "ins_del_model", ".", "predict", "(", "enc_tmp_feat_vector", ")", "[", "0", "]", "\n", "\n", "start", "=", "timer", "(", ")", "\n", "\n", "repl_pred", "=", "repl_class_model", ".", "predict", "(", "enc_tmp_feat_vector", ")", "\n", "ins_pred", "=", "ins_class_model", ".", "predict_proba", "(", "enc_tmp_feat_vector", ")", "\n", "del_pred", "=", "del_class_model", ".", "predict_proba", "(", "enc_tmp_feat_vector", ")", "\n", "rest_pred", "=", "rest_class_model", ".", "predict_proba", "(", "enc_tmp_feat_vector", ")", "\n", "\n", "end", "=", "timer", "(", ")", "\n", "\n", "Globals", ".", "corr_cls", "+=", "end", "-", "start", "\n", "\n", "# msk=get_repl_mask()", "\n", "# repl_dist=np.delete(repl_dist,msk,1)", "\n", "\n", "start", "=", "timer", "(", ")", "\n", "\n", "repl_dist", "=", "get_dist", "(", "repl_clusters", ",", "enc_tmp_feat_vector", ")", "\n", "repl_pred", "=", "0.2", "*", "repl_dist", "+", "0.8", "*", "repl_pred", "\n", "repl_pred", "=", "repl_pred", "*", "repl_p", "\n", "\n", "ins_dist", "=", "get_dist", "(", "ins_clusters", ",", "enc_tmp_feat_vector", ")", "\n", "msk", "=", "get_ins_mask", "(", ")", "\n", "ins_dist", "=", "np", ".", "delete", "(", "ins_dist", ",", "msk", ",", "1", ")", "\n", "ins_pred", "=", "0.2", "*", "ins_dist", "+", "0.8", "*", "ins_pred", "\n", "ins_pred", "=", "ins_pred", "*", "(", "1", "-", "repl_p", ")", "*", "noRepl", "[", "1", "]", "\n", "\n", "del_dist", "=", "get_dist", "(", "del_clusters", ",", "enc_tmp_feat_vector", ")", "\n", "msk", "=", "get_del_mask", "(", ")", "\n", "del_dist", "=", "np", ".", "delete", "(", "del_dist", ",", "msk", ",", "1", ")", "\n", "del_pred", "=", "0.2", "*", "del_dist", "+", "0.8", "*", "del_pred", "\n", "del_pred", "=", "del_pred", "*", "(", "1", "-", "repl_p", ")", "*", "noRepl", "[", "2", "]", "\n", "\n", "rest_dist", "=", "get_dist", "(", "rest_clusters", ",", "enc_tmp_feat_vector", ")", "\n", "msk", "=", "get_rest_mask", "(", ")", "\n", "rest_dist", "=", "np", ".", "delete", "(", "rest_dist", ",", "msk", ",", "1", ")", "\n", "rest_pred", "=", "0.2", "*", "rest_dist", "+", "0.8", "*", "rest_pred", "\n", "rest_pred", "=", "rest_pred", "*", "(", "1", "-", "repl_p", ")", "*", "noRepl", "[", "0", "]", "\n", "\n", "\n", "rp", "=", "re", "=", "ins", "=", "de", "=", "0", "\n", "\n", "sorted_repl_pred", "=", "sorted", "(", "repl_pred", "[", "0", "]", ",", "reverse", "=", "True", ")", "\n", "sorted_ins_pred", "=", "sorted", "(", "ins_pred", "[", "0", "]", ",", "reverse", "=", "True", ")", "\n", "sorted_del_pred", "=", "sorted", "(", "del_pred", "[", "0", "]", ",", "reverse", "=", "True", ")", "\n", "sorted_rest_pred", "=", "sorted", "(", "rest_pred", "[", "0", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "end", "=", "timer", "(", ")", "\n", "\n", "Globals", ".", "rerank", "+=", "end", "-", "start", "\n", "\n", "targetLines", "=", "[", "]", "\n", "\n", "for", "i1", "in", "range", "(", "predAtK", ")", ":", "\n", "        ", "if", "sorted_repl_pred", "[", "rp", "]", ">=", "sorted_del_pred", "[", "de", "]", "and", "sorted_repl_pred", "[", "rp", "]", ">=", "sorted_ins_pred", "[", "ins", "]", "and", "sorted_repl_pred", "[", "rp", "]", ">=", "sorted_rest_pred", "[", "re", "]", ":", "\n", "            ", "repl_p", "=", "1", "\n", "edit", "=", "np", ".", "where", "(", "repl_pred", "[", "0", "]", "==", "sorted_repl_pred", "[", "rp", "]", ")", "\n", "rp", "+=", "1", "\n", "", "elif", "sorted_ins_pred", "[", "ins", "]", ">=", "sorted_del_pred", "[", "de", "]", "and", "sorted_ins_pred", "[", "ins", "]", ">=", "sorted_repl_pred", "[", "rp", "]", "and", "sorted_ins_pred", "[", "ins", "]", ">=", "sorted_rest_pred", "[", "re", "]", ":", "\n", "            ", "repl_p", "=", "0", "\n", "noRepl", "=", "1", "\n", "edit", "=", "np", ".", "where", "(", "ins_pred", "[", "0", "]", "==", "sorted_ins_pred", "[", "ins", "]", ")", "\n", "ins", "+=", "1", "\n", "", "elif", "sorted_del_pred", "[", "de", "]", ">=", "sorted_ins_pred", "[", "ins", "]", "and", "sorted_del_pred", "[", "de", "]", ">=", "sorted_repl_pred", "[", "rp", "]", "and", "sorted_del_pred", "[", "de", "]", ">=", "sorted_rest_pred", "[", "re", "]", ":", "\n", "            ", "repl_p", "=", "0", "\n", "noRepl", "=", "2", "\n", "edit", "=", "np", ".", "where", "(", "del_pred", "[", "0", "]", "==", "sorted_del_pred", "[", "de", "]", ")", "\n", "de", "+=", "1", "\n", "", "elif", "sorted_rest_pred", "[", "re", "]", ">=", "sorted_del_pred", "[", "de", "]", "and", "sorted_rest_pred", "[", "re", "]", ">=", "sorted_ins_pred", "[", "ins", "]", "and", "sorted_rest_pred", "[", "re", "]", ">=", "sorted_repl_pred", "[", "rp", "]", ":", "\n", "            ", "repl_p", "=", "0", "\n", "noRepl", "=", "0", "\n", "edit", "=", "np", ".", "where", "(", "rest_pred", "[", "0", "]", "==", "sorted_rest_pred", "[", "re", "]", ")", "\n", "re", "+=", "1", "\n", "\n", "\n", "", "start", "=", "timer", "(", ")", "\n", "if", "repl_p", "==", "1", ":", "\n", "            ", "what_to_edit", "=", "repl_encoder", ".", "inverse_transform", "(", "edit", "[", "0", "]", "[", ":", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "if", "noRepl", "==", "1", ":", "\n", "                ", "what_to_edit", "=", "ins_encoder", ".", "inverse_transform", "(", "edit", "[", "0", "]", "[", ":", "1", "]", ")", "\n", "", "elif", "noRepl", "==", "2", ":", "\n", "                ", "what_to_edit", "=", "del_encoder", ".", "inverse_transform", "(", "edit", "[", "0", "]", "[", ":", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "what_to_edit", "=", "rest_encoder", ".", "inverse_transform", "(", "edit", "[", "0", "]", "[", ":", "1", "]", ")", "\n", "\n", "", "", "edit", "=", "new_encoder", ".", "transform", "(", "what_to_edit", ")", "\n", "edit_pos", "=", "np", ".", "zeros", "(", "shape", "=", "enc_tmp_bigram", ".", "shape", ")", "\n", "ones", "=", "np", ".", "where", "(", "enc_tmp_bigram", "[", "0", "]", "==", "1", ")", "\n", "for", "one", "in", "ones", "[", "0", "]", ":", "\n", "            ", "edit_pos", "[", "0", "]", "[", "one", "]", "=", "flat_rankers", "[", "edit", "[", "0", "]", "]", ".", "estimators_", "[", "one", "]", ".", "predict", "(", "enc_tmp_bigram", ")", "\n", "# edit_pos=flat_rankers[edit[0]].predict(enc_tmp_bigram)", "\n", "\n", "", "end", "=", "timer", "(", ")", "\n", "Globals", ".", "bigram_rank", "+=", "end", "-", "start", "\n", "tmp_diff", "=", "what_to_edit", "[", "0", "]", ".", "split", "(", "'\\n'", ")", "[", "1", ":", "]", "\n", "pred_bigrams", "=", "get_predicted_bigrams", "(", "edit_pos", ",", "idx_to_bigram", ")", "\n", "where_to_edit", "=", "get_predicted_edit_pos", "(", "pred_bigrams", ",", "tmp_bigram", ")", "\n", "\n", "start", "=", "timer", "(", ")", "\n", "where_to_edit", "=", "sorted", "(", "where_to_edit", ")", "\n", "add", "=", "[", "]", "\n", "dl", "=", "[", "]", "\n", "for", "token", "in", "tmp_diff", ":", "\n", "            ", "if", "token", ".", "startswith", "(", "'-'", ")", ":", "\n", "                ", "dl", ".", "append", "(", "token", "[", "2", ":", "]", ")", "\n", "", "elif", "token", ".", "startswith", "(", "'+'", ")", ":", "\n", "                ", "add", ".", "append", "(", "token", "[", "2", ":", "]", ")", "\n", "", "", "spcl_flg", "=", "0", "\n", "if", "'+ (\\n+ )'", "in", "what_to_edit", "[", "0", "]", ":", "\n", "            ", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "where_to_edit", ")", "-", "1", ":", "\n", "                ", "if", "where_to_edit", "[", "i", "]", "!=", "where_to_edit", "[", "i", "+", "1", "]", "-", "1", ":", "\n", "                    ", "where_to_edit", ".", "remove", "(", "where_to_edit", "[", "i", "]", ")", "\n", "i", "-=", "1", "\n", "", "else", ":", "\n", "                    ", "where_to_edit", ".", "remove", "(", "where_to_edit", "[", "i", "+", "1", "]", ")", "\n", "", "i", "+=", "1", "\n", "", "if", "len", "(", "where_to_edit", ")", ">", "1", ":", "\n", "                ", "split_line", "=", "src_line", ".", "split", "(", "' '", ")", "\n", "for", "l", "in", "range", "(", "len", "(", "split_line", ")", "-", "1", ")", ":", "\n", "                    ", "tmp_str", "=", "split_line", "[", "l", "]", "+", "' '", "+", "split_line", "[", "l", "+", "1", "]", "\n", "if", "tmp_str", "==", "tmp_bigram", "[", "0", "]", "[", "where_to_edit", "[", "-", "1", "]", "]", ":", "\n", "                        ", "split_line", "[", "l", "]", "=", "split_line", "[", "l", "]", "+", "' )'", "\n", "break", "\n", "", "", "for", "l", "in", "range", "(", "len", "(", "split_line", ")", "-", "1", ")", ":", "\n", "                    ", "tmp_str", "=", "split_line", "[", "l", "]", "+", "' '", "+", "split_line", "[", "l", "+", "1", "]", "\n", "if", "tmp_str", "==", "tmp_bigram", "[", "0", "]", "[", "where_to_edit", "[", "-", "2", "]", "]", ":", "\n", "                        ", "split_line", "[", "l", "]", "=", "split_line", "[", "l", "]", "+", "' ('", "\n", "spcl_flg", "=", "1", "\n", "break", "\n", "", "", "target_line", "=", "''", "\n", "for", "l", "in", "range", "(", "len", "(", "split_line", ")", ")", ":", "\n", "                    ", "target_line", "+=", "split_line", "[", "l", "]", "+", "' '", "\n", "", "target_line", "=", "target_line", "[", ":", "-", "1", "]", "\n", "targetLines", ".", "append", "(", "target_line", ".", "split", "(", "' '", ")", "[", ":", "-", "1", "]", ")", "\n", "", "", "if", "'- )\\n+ )'", "in", "what_to_edit", "[", "0", "]", ":", "\n", "            ", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "where_to_edit", ")", "-", "1", ":", "\n", "                ", "if", "where_to_edit", "[", "i", "]", "==", "where_to_edit", "[", "i", "+", "1", "]", "-", "1", ":", "\n", "                    ", "where_to_edit", ".", "remove", "(", "where_to_edit", "[", "i", "+", "1", "]", ")", "\n", "", "i", "+=", "1", "\n", "", "if", "len", "(", "where_to_edit", ")", ">", "1", ":", "\n", "                ", "split_line", "=", "src_line", ".", "split", "(", "' '", ")", "\n", "mask", "=", "[", "0", "]", "*", "len", "(", "split_line", ")", "\n", "for", "l", "in", "range", "(", "len", "(", "split_line", ")", "-", "1", ")", ":", "\n", "                    ", "tmp_str", "=", "split_line", "[", "l", "]", "+", "' '", "+", "split_line", "[", "l", "+", "1", "]", "\n", "if", "tmp_str", "==", "tmp_bigram", "[", "0", "]", "[", "where_to_edit", "[", "-", "1", "]", "]", ":", "\n", "                        ", "s", "=", "split_line", "[", "l", "]", ".", "replace", "(", "')'", ",", "''", ")", "\n", "mask", "[", "l", "]", "=", "1", "\n", "break", "\n", "", "", "for", "l", "in", "range", "(", "len", "(", "split_line", ")", "-", "1", ")", ":", "\n", "                    ", "tmp_str", "=", "split_line", "[", "l", "]", "+", "' '", "+", "split_line", "[", "l", "+", "1", "]", "\n", "if", "tmp_str", "==", "tmp_bigram", "[", "0", "]", "[", "where_to_edit", "[", "-", "2", "]", "]", ":", "\n", "                        ", "split_line", "[", "l", "]", "=", "split_line", "[", "l", "]", "+", "' )'", "\n", "spcl_flg", "=", "1", "\n", "break", "\n", "", "", "target_line", "=", "''", "\n", "for", "l", "in", "range", "(", "len", "(", "split_line", ")", ")", ":", "\n", "                    ", "if", "mask", "[", "l", "]", "==", "0", ":", "\n", "                        ", "target_line", "+=", "split_line", "[", "l", "]", "+", "' '", "\n", "", "", "target_line", "=", "target_line", "[", ":", "-", "1", "]", "\n", "targetLines", ".", "append", "(", "target_line", ".", "split", "(", "' '", ")", "[", ":", "-", "1", "]", ")", "\n", "", "", "if", "spcl_flg", "==", "1", ":", "\n", "            ", "continue", "\n", "", "if", "add", "==", "[", "]", ":", "\n", "            ", "split_line", "=", "src_line", ".", "split", "(", "' '", ")", "\n", "where_to_edit", "=", "sorted", "(", "where_to_edit", ",", "reverse", "=", "True", ")", "\n", "mask", "=", "[", "0", "]", "*", "len", "(", "split_line", ")", "\n", "for", "k", "in", "range", "(", "len", "(", "dl", ")", ")", ":", "\n", "                ", "flg", "=", "0", "\n", "if", "len", "(", "split_line", ")", "==", "1", ":", "\n", "                        ", "s", "=", "split_line", "[", "0", "]", ".", "replace", "(", "dl", "[", "k", "]", ",", "''", ")", "\n", "if", "s", "==", "''", ":", "\n", "                            ", "mask", "[", "0", "]", "=", "1", "\n", "", "", "else", ":", "\n", "                    ", "for", "j", "in", "where_to_edit", ":", "\n", "                        ", "for", "l", "in", "range", "(", "len", "(", "split_line", ")", "-", "1", ")", ":", "\n", "                            ", "tmp_str", "=", "split_line", "[", "l", "]", "+", "' '", "+", "split_line", "[", "l", "+", "1", "]", "\n", "if", "tmp_str", "==", "tmp_bigram", "[", "0", "]", "[", "j", "]", ":", "\n", "                                ", "s", "=", "split_line", "[", "l", "]", ".", "replace", "(", "dl", "[", "k", "]", ",", "''", ")", "\n", "if", "s", "==", "''", ":", "\n", "                                    ", "mask", "[", "l", "]", "=", "1", "\n", "flg", "=", "1", "\n", "where_to_edit", ".", "remove", "(", "j", ")", "\n", "", "else", ":", "\n", "                                    ", "s", "=", "split_line", "[", "l", "+", "1", "]", ".", "replace", "(", "dl", "[", "k", "]", ",", "''", ")", "\n", "if", "s", "==", "''", ":", "\n", "                                        ", "mask", "[", "l", "+", "1", "]", "=", "1", "\n", "flg", "=", "1", "\n", "where_to_edit", ".", "remove", "(", "j", ")", "\n", "", "", "break", "\n", "", "", "if", "flg", "==", "1", ":", "\n", "                            ", "break", "\n", "", "", "", "", "target_line", "=", "''", "\n", "for", "l", "in", "range", "(", "len", "(", "split_line", ")", ")", ":", "\n", "                ", "if", "mask", "[", "l", "]", "!=", "1", ":", "\n", "                    ", "target_line", "+=", "split_line", "[", "l", "]", "+", "' '", "\n", "", "", "target_line", "=", "target_line", "[", ":", "-", "1", "]", "\n", "targetLines", ".", "append", "(", "target_line", ".", "split", "(", "' '", ")", "[", ":", "-", "1", "]", ")", "\n", "", "elif", "dl", "==", "[", "]", ":", "\n", "            ", "target", "=", "[", "]", "\n", "add_all", "=", "''", "\n", "for", "x", "in", "add", ":", "\n", "                ", "add_all", "+=", "x", "+", "' '", "\n", "", "add_all", "=", "add_all", "[", ":", "-", "1", "]", "\n", "if", "tmp_bigram", "[", "0", "]", "==", "[", "]", ":", "\n", "                ", "target_line", "=", "add_all", "+", "' '", "+", "src_line", "\n", "targetLines", ".", "append", "(", "target_line", ".", "split", "(", "' '", ")", "[", ":", "-", "1", "]", ")", "\n", "target_line", "=", "src_line", "+", "' '", "+", "add_all", "\n", "targetLines", ".", "append", "(", "target_line", ".", "split", "(", "' '", ")", "[", ":", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "for", "j", "in", "where_to_edit", ":", "\n", "                    ", "if", "j", "==", "0", ":", "\n", "                        ", "edited_bigram", "=", "add_all", "+", "' '", "+", "tmp_bigram", "[", "0", "]", "[", "j", "]", "\n", "targetLines", ".", "append", "(", "ins_bigram_to_line", "(", "tmp_bigram", ",", "edited_bigram", ",", "j", ")", ".", "split", "(", "' '", ")", "[", ":", "-", "1", "]", ")", "\n", "", "if", "j", "-", "1", "not", "in", "where_to_edit", ":", "\n", "                        ", "edited_bigram", "=", "tmp_bigram", "[", "0", "]", "[", "j", "]", ".", "split", "(", "' '", ")", "[", "0", "]", "+", "' '", "+", "add_all", "+", "' '", "+", "tmp_bigram", "[", "0", "]", "[", "j", "]", ".", "split", "(", "' '", ")", "[", "1", "]", "\n", "targetLines", ".", "append", "(", "ins_bigram_to_line", "(", "tmp_bigram", ",", "edited_bigram", ",", "j", ")", ".", "split", "(", "' '", ")", "[", ":", "-", "1", "]", ")", "\n", "", "edited_bigram", "=", "tmp_bigram", "[", "0", "]", "[", "j", "]", "+", "' '", "+", "add_all", "\n", "targetLines", ".", "append", "(", "ins_bigram_to_line", "(", "tmp_bigram", ",", "edited_bigram", ",", "j", ")", ".", "split", "(", "' '", ")", "[", ":", "-", "1", "]", ")", "\n", "", "", "", "else", ":", "\n", "            ", "split_line", "=", "src_line", ".", "split", "(", "' '", ")", "\n", "\n", "mask", "=", "[", "0", "]", "*", "len", "(", "split_line", ")", "\n", "if", "len", "(", "add", ")", "==", "len", "(", "dl", ")", ":", "\n", "                ", "for", "x", ",", "y", "in", "zip", "(", "add", ",", "dl", ")", ":", "\n", "                    ", "flg", "=", "0", "\n", "for", "j", "in", "where_to_edit", ":", "\n", "                        ", "for", "l", "in", "range", "(", "len", "(", "split_line", ")", "-", "1", ")", ":", "\n", "                            ", "tmp_str", "=", "split_line", "[", "l", "]", "+", "' '", "+", "split_line", "[", "l", "+", "1", "]", "\n", "if", "tmp_str", "==", "tmp_bigram", "[", "0", "]", "[", "j", "]", "and", "mask", "[", "l", "]", "==", "0", "and", "mask", "[", "l", "+", "1", "]", "==", "0", ":", "\n", "                                ", "s", "=", "split_line", "[", "l", "]", ".", "replace", "(", "y", ",", "x", ")", "\n", "if", "s", "!=", "split_line", "[", "l", "]", ":", "\n", "                                    ", "mask", "[", "l", "]", "=", "s", "\n", "flg", "=", "1", "\n", "where_to_edit", ".", "remove", "(", "j", ")", "\n", "", "else", ":", "\n", "                                    ", "s", "=", "split_line", "[", "l", "+", "1", "]", ".", "replace", "(", "y", ",", "x", ")", "\n", "if", "s", "!=", "split_line", "[", "l", "+", "1", "]", ":", "\n", "                                        ", "mask", "[", "l", "+", "1", "]", "=", "s", "\n", "flg", "=", "1", "\n", "where_to_edit", ".", "remove", "(", "j", ")", "\n", "", "", "break", "\n", "", "", "if", "flg", "==", "1", ":", "\n", "                            ", "break", "\n", "", "", "", "target_line", "=", "''", "\n", "if", "tmp_bigram", "[", "0", "]", "!=", "[", "]", ":", "\n", "                    ", "for", "l", "in", "range", "(", "len", "(", "split_line", ")", ")", ":", "\n", "                        ", "if", "mask", "[", "l", "]", "!=", "0", ":", "\n", "                            ", "target_line", "+=", "mask", "[", "l", "]", "+", "' '", "\n", "", "else", ":", "\n", "                            ", "target_line", "+=", "split_line", "[", "l", "]", "+", "' '", "\n", "", "", "target_line", "=", "target_line", "[", ":", "-", "1", "]", "\n", "", "", "else", ":", "\n", "                ", "add_all", "=", "''", "\n", "for", "x", "in", "add", ":", "\n", "                    ", "add_all", "+=", "x", "+", "' '", "\n", "", "add_all", "=", "add_all", "[", ":", "-", "1", "]", "\n", "split_line", "=", "src_line", ".", "split", "(", "' '", ")", "\n", "for", "k", "in", "range", "(", "len", "(", "dl", ")", "-", "1", ")", ":", "\n", "                    ", "flg", "=", "0", "\n", "for", "j", "in", "where_to_edit", ":", "\n", "                        ", "for", "l", "in", "range", "(", "len", "(", "split_line", ")", "-", "1", ")", ":", "\n", "                            ", "tmp_str", "=", "split_line", "[", "l", "]", "+", "' '", "+", "split_line", "[", "l", "+", "1", "]", "\n", "if", "tmp_str", "==", "tmp_bigram", "[", "0", "]", "[", "j", "]", ":", "\n", "                                ", "s", "=", "split_line", "[", "l", "]", ".", "replace", "(", "dl", "[", "k", "]", ",", "''", ")", "\n", "if", "s", "==", "''", ":", "\n", "                                    ", "mask", "[", "l", "]", "=", "1", "\n", "flg", "=", "1", "\n", "where_to_edit", ".", "remove", "(", "j", ")", "\n", "", "else", ":", "\n", "                                    ", "s", "=", "split_line", "[", "l", "+", "1", "]", ".", "replace", "(", "dl", "[", "k", "]", ",", "''", ")", "\n", "if", "s", "==", "''", ":", "\n", "                                        ", "mask", "[", "l", "+", "1", "]", "=", "1", "\n", "flg", "=", "1", "\n", "where_to_edit", ".", "remove", "(", "j", ")", "\n", "", "", "break", "\n", "", "", "if", "flg", "==", "1", ":", "\n", "                            ", "break", "\n", "", "", "", "flg", "=", "0", "\n", "for", "j", "in", "where_to_edit", ":", "\n", "                    ", "for", "l", "in", "range", "(", "len", "(", "split_line", ")", "-", "1", ")", ":", "\n", "                        ", "tmp_str", "=", "split_line", "[", "l", "]", "+", "' '", "+", "split_line", "[", "l", "+", "1", "]", "\n", "if", "tmp_str", "==", "tmp_bigram", "[", "0", "]", "[", "j", "]", ":", "\n", "                            ", "s", "=", "split_line", "[", "l", "]", ".", "replace", "(", "dl", "[", "-", "1", "]", ",", "add_all", ")", "\n", "if", "s", "!=", "split_line", "[", "l", "]", "and", "mask", "[", "l", "]", "!=", "1", ":", "\n", "                                ", "mask", "[", "l", "]", "=", "s", "\n", "flg", "=", "1", "\n", "where_to_edit", ".", "remove", "(", "j", ")", "\n", "", "else", ":", "\n", "                                ", "s", "=", "split_line", "[", "l", "+", "1", "]", ".", "replace", "(", "dl", "[", "-", "1", "]", ",", "add_all", ")", "\n", "if", "s", "!=", "split_line", "[", "l", "+", "1", "]", ":", "\n", "                                    ", "mask", "[", "l", "+", "1", "]", "=", "s", "\n", "flg", "=", "1", "\n", "where_to_edit", ".", "remove", "(", "j", ")", "\n", "", "", "break", "\n", "", "", "if", "flg", "==", "1", ":", "\n", "                        ", "break", "\n", "", "", "target_line", "=", "''", "\n", "for", "l", "in", "range", "(", "len", "(", "split_line", ")", ")", ":", "\n", "                    ", "if", "mask", "[", "l", "]", "!=", "0", "and", "mask", "[", "l", "]", "!=", "1", ":", "\n", "                        ", "target_line", "+=", "mask", "[", "l", "]", "+", "' '", "\n", "", "elif", "mask", "[", "l", "]", "!=", "1", ":", "\n", "                        ", "target_line", "+=", "split_line", "[", "l", "]", "+", "' '", "\n", "", "", "target_line", "=", "target_line", "[", ":", "-", "1", "]", "\n", "", "targetLines", ".", "append", "(", "target_line", ".", "split", "(", "' '", ")", "[", ":", "-", "1", "]", ")", "\n", "add_all", "=", "''", "\n", "for", "x", "in", "add", ":", "\n", "                ", "add_all", "+=", "x", "+", "' '", "\n", "", "add_all", "=", "add_all", "[", ":", "-", "1", "]", "\n", "split_line", "=", "src_line", ".", "split", "(", "' '", ")", "\n", "mask", "=", "[", "0", "]", "*", "len", "(", "split_line", ")", "\n", "for", "k", "in", "range", "(", "len", "(", "dl", ")", ")", ":", "\n", "                ", "flg", "=", "0", "\n", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "where_to_edit", ")", ":", "\n", "                    ", "for", "l", "in", "range", "(", "len", "(", "split_line", ")", "-", "1", ")", ":", "\n", "                        ", "tmp_str", "=", "split_line", "[", "l", "]", "+", "' '", "+", "split_line", "[", "l", "+", "1", "]", "\n", "if", "tmp_str", "==", "tmp_bigram", "[", "0", "]", "[", "where_to_edit", "[", "i", "]", "]", ":", "\n", "                            ", "s", "=", "split_line", "[", "l", "]", ".", "replace", "(", "dl", "[", "k", "]", ",", "''", ")", "\n", "if", "s", "==", "''", ":", "\n", "                                ", "mask", "[", "l", "]", "=", "1", "\n", "flg", "=", "1", "\n", "", "s", "=", "split_line", "[", "l", "+", "1", "]", ".", "replace", "(", "dl", "[", "k", "]", ",", "''", ")", "\n", "if", "s", "==", "''", ":", "\n", "                                ", "mask", "[", "l", "+", "1", "]", "=", "1", "\n", "flg", "=", "1", "\n", "", "break", "\n", "", "", "if", "flg", "==", "1", ":", "\n", "                        ", "break", "\n", "", "i", "+=", "1", "\n", "", "", "for", "j", "in", "where_to_edit", ":", "\n", "                ", "for", "l", "in", "range", "(", "len", "(", "split_line", ")", "-", "1", ")", ":", "\n", "                    ", "tmp_str", "=", "tmp_bigram", "[", "0", "]", "[", "j", "]", "\n", "if", "tmp_str", "==", "split_line", "[", "l", "]", "+", "' '", "+", "split_line", "[", "l", "+", "1", "]", ":", "\n", "                        ", "if", "mask", "[", "l", "]", "!=", "1", ":", "\n", "                            ", "split_line", "[", "l", "]", "=", "split_line", "[", "l", "]", "+", "' '", "+", "add_all", "\n", "targetLines", ".", "append", "(", "make_target_line", "(", "split_line", ",", "mask", ")", ".", "split", "(", "' '", ")", "[", ":", "-", "1", "]", ")", "\n", "", "if", "mask", "[", "l", "+", "1", "]", "!=", "1", ":", "\n", "                            ", "split_line", "[", "l", "+", "1", "]", "=", "split_line", "[", "l", "+", "1", "]", "+", "' '", "+", "add_all", "\n", "targetLines", ".", "append", "(", "make_target_line", "(", "split_line", ",", "mask", ")", ".", "split", "(", "' '", ")", "[", ":", "-", "1", "]", ")", "\n", "", "", "", "", "", "end", "=", "timer", "(", ")", "\n", "Globals", ".", "fixer", "+=", "end", "-", "start", "\n", "", "return", "targetLines", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.make_target_line": [[400, 407], ["range", "len"], "function", ["None"], ["", "def", "make_target_line", "(", "split_line", ",", "mask", ")", ":", "\n", "    ", "target_line", "=", "''", "\n", "for", "l", "in", "range", "(", "len", "(", "split_line", ")", ")", ":", "\n", "        ", "if", "mask", "[", "l", "]", "==", "0", ":", "\n", "            ", "target_line", "+=", "split_line", "[", "l", "]", "+", "' '", "\n", "", "", "target_line", "=", "target_line", "[", ":", "-", "1", "]", "\n", "return", "target_line", "\n", "", "def", "create_bigram", "(", "src_line", ")", ":", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.create_bigram": [[407, 417], ["src_line.split", "range", "tmp_bigram.append", "tmp_lst.append", "len"], "function", ["None"], ["", "def", "create_bigram", "(", "src_line", ")", ":", "\n", "    ", "tmp_bigram", "=", "[", "]", "\n", "tmp_lst", "=", "[", "]", "\n", "tmp_line", "=", "src_line", ".", "split", "(", "' '", ")", "\n", "for", "ind", "in", "range", "(", "len", "(", "tmp_line", ")", "-", "1", ")", ":", "\n", "        ", "tmp_str", "=", "''", "\n", "tmp_str", "+=", "tmp_line", "[", "ind", "]", "+", "' '", "+", "tmp_line", "[", "ind", "+", "1", "]", "\n", "tmp_lst", ".", "append", "(", "tmp_str", ")", "\n", "", "tmp_bigram", ".", "append", "(", "tmp_lst", ")", "\n", "return", "tmp_bigram", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.create_feat_vector": [[418, 430], ["errs.split", "src_line.split", "range", "tmp_feat_vector.append", "tmp_lst.append", "tmp_lst.append", "tmp_lst.append", "len", "err.split"], "function", ["None"], ["", "def", "create_feat_vector", "(", "errs", ",", "src_line", ")", ":", "\n", "    ", "tmp_feat_vector", "=", "[", "]", "\n", "tmp_lst", "=", "[", "]", "\n", "for", "err", "in", "errs", ".", "split", "(", "' '", ")", ":", "\n", "        ", "tmp_lst", ".", "append", "(", "err", ".", "split", "(", "';'", ")", "[", "0", "]", ")", "\n", "", "tmp_line", "=", "src_line", ".", "split", "(", "' '", ")", "\n", "for", "abst", "in", "tmp_line", ":", "\n", "        ", "tmp_lst", ".", "append", "(", "abst", ")", "\n", "", "for", "ind", "in", "range", "(", "len", "(", "tmp_line", ")", "-", "1", ")", ":", "\n", "        ", "tmp_lst", ".", "append", "(", "tmp_line", "[", "ind", "]", "+", "' '", "+", "tmp_line", "[", "ind", "+", "1", "]", ")", "\n", "", "tmp_feat_vector", ".", "append", "(", "tmp_lst", ")", "\n", "return", "tmp_feat_vector", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.get_predicted_bigrams": [[431, 439], ["numpy.where", "srcT.Prediction.Globals.idx_to_bigram.get", "predicted_bigrams.append", "predicted_bigrams.append", "srcT.Prediction.Globals.idx_to_bigram"], "function", ["None"], ["", "def", "get_predicted_bigrams", "(", "specific_prediction", ",", "idx_to_bigram", ")", ":", "\n", "    ", "predicted_bigrams", "=", "[", "]", "\n", "for", "x", "in", "np", ".", "where", "(", "specific_prediction", "[", "0", "]", "==", "1", ")", "[", "0", "]", ":", "\n", "        ", "if", "idx_to_bigram", ".", "get", "(", "x", ")", "!=", "None", ":", "\n", "            ", "predicted_bigrams", ".", "append", "(", "idx_to_bigram", "[", "x", "]", ")", "\n", "", "else", ":", "\n", "            ", "predicted_bigrams", ".", "append", "(", "-", "1", ")", "\n", "", "", "return", "predicted_bigrams", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.get_predicted_edit_pos": [[440, 450], ["range", "len", "range", "pred_edit_pos.append", "len", "[].lower", "pred_edit_pos.append"], "function", ["None"], ["", "def", "get_predicted_edit_pos", "(", "predicted_bigrams", ",", "act_bigram", ")", ":", "\n", "    ", "pred_edit_pos", "=", "[", "]", "\n", "for", "x", "in", "range", "(", "len", "(", "predicted_bigrams", ")", ")", ":", "\n", "        ", "if", "predicted_bigrams", "[", "x", "]", "==", "-", "1", ":", "\n", "            ", "pred_edit_pos", ".", "append", "(", "-", "1", ")", "\n", "continue", "\n", "", "for", "y", "in", "range", "(", "len", "(", "act_bigram", "[", "0", "]", ")", ")", ":", "\n", "            ", "if", "predicted_bigrams", "[", "x", "]", "==", "act_bigram", "[", "0", "]", "[", "y", "]", ".", "lower", "(", ")", ":", "\n", "                ", "pred_edit_pos", ".", "append", "(", "y", ")", "\n", "", "", "", "return", "pred_edit_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.ins_bigram_to_line": [[451, 464], ["range", "len", "edited_bigram.split", "[].split"], "function", ["None"], ["", "def", "ins_bigram_to_line", "(", "tmp_bigram", ",", "edited_bigram", ",", "j", ")", ":", "\n", "    ", "target_line", "=", "''", "\n", "if", "j", "==", "0", ":", "\n", "        ", "target_line", "+=", "edited_bigram", "+", "' '", "\n", "", "else", ":", "\n", "        ", "target_line", "+=", "tmp_bigram", "[", "0", "]", "[", "0", "]", "+", "' '", "\n", "", "for", "x", "in", "range", "(", "1", ",", "len", "(", "tmp_bigram", "[", "0", "]", ")", ")", ":", "\n", "        ", "if", "x", "==", "j", ":", "\n", "            ", "target_line", "+=", "edited_bigram", ".", "split", "(", "' '", ",", "maxsplit", "=", "1", ")", "[", "-", "1", "]", "+", "' '", "\n", "", "else", ":", "\n", "            ", "target_line", "+=", "tmp_bigram", "[", "0", "]", "[", "x", "]", ".", "split", "(", "' '", ",", "maxsplit", "=", "1", ")", "[", "-", "1", "]", "+", "' '", "\n", "", "", "target_line", "=", "target_line", "[", ":", "-", "1", "]", "\n", "return", "target_line", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.filter_bigrams": [[465, 481], ["keras.preprocessing.text.Tokenizer", "keras.preprocessing.text.Tokenizer.fit_on_texts", "numpy.zeros", "get_idx_to_bigram", "tkns.startswith", "range", "len", "int", "srcT.Prediction.Globals.idx_to_bigram.get", "tkns[].lower", "srcT.Prediction.Globals.idx_to_bigram.get", "str", "idxs.append", "str"], "function", ["None"], ["", "def", "filter_bigrams", "(", "tmp_diff", ",", "tmp_enc_src_bigram", ",", "idx_to_bigram", ")", ":", "\n", "    ", "idxs", "=", "[", "]", "\n", "for", "tkns", "in", "tmp_diff", ":", "\n", "        ", "if", "tkns", ".", "startswith", "(", "'-'", ")", ":", "\n", "            ", "for", "k", "in", "range", "(", "1", ",", "tmp_enc_src_bigram", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "if", "idx_to_bigram", ".", "get", "(", "k", ")", "!=", "None", ":", "\n", "                    ", "if", "tkns", "[", "2", ":", "]", ".", "lower", "(", ")", "in", "idx_to_bigram", ".", "get", "(", "k", ")", ":", "\n", "                        ", "if", "str", "(", "k", ")", "not", "in", "idxs", ":", "\n", "                            ", "idxs", ".", "append", "(", "str", "(", "k", ")", ")", "\n", "", "", "", "", "", "", "tmp_tkn", "=", "keras", ".", "preprocessing", ".", "text", ".", "Tokenizer", "(", "filters", "=", "''", ")", "\n", "tmp_tkn", ".", "fit_on_texts", "(", "idxs", ")", "\n", "filt_repl_enc_src_bigram", "=", "np", ".", "zeros", "(", "(", "1", ",", "len", "(", "tmp_tkn", ".", "word_index", ")", "+", "1", ")", ")", "\n", "for", "idx", "in", "idxs", ":", "\n", "        ", "filt_repl_enc_src_bigram", "[", "0", "]", "[", "tmp_tkn", ".", "word_index", "[", "idx", "]", "]", "=", "tmp_enc_src_bigram", "[", "0", "]", "[", "int", "(", "idx", ")", "]", "\n", "", "tmp_idx_to_bigram", "=", "get_idx_to_bigram", "(", "idx_to_bigram", ",", "tmp_tkn", ".", "word_index", ")", "\n", "return", "tmp_idx_to_bigram", ",", "filt_repl_enc_src_bigram", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.get_repl_mask": [[482, 489], ["range", "numpy.array", "len", "np.array.append"], "function", ["None"], ["", "def", "get_repl_mask", "(", ")", ":", "\n", "    ", "msk", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "repl_clusters", ")", ")", ":", "\n", "        ", "if", "i", "not", "in", "repl_class_model", ".", "classes_", ":", "\n", "            ", "msk", ".", "append", "(", "i", ")", "\n", "", "", "msk", "=", "np", ".", "array", "(", "msk", ")", "\n", "return", "msk", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.get_ins_mask": [[490, 497], ["range", "numpy.array", "len", "np.array.append"], "function", ["None"], ["", "def", "get_ins_mask", "(", ")", ":", "\n", "    ", "msk", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "ins_clusters", ")", ")", ":", "\n", "        ", "if", "i", "not", "in", "ins_class_model", ".", "classes_", ":", "\n", "            ", "msk", ".", "append", "(", "i", ")", "\n", "", "", "msk", "=", "np", ".", "array", "(", "msk", ")", "\n", "return", "msk", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.get_del_mask": [[498, 505], ["range", "numpy.array", "len", "np.array.append"], "function", ["None"], ["", "def", "get_del_mask", "(", ")", ":", "\n", "    ", "msk", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "del_clusters", ")", ")", ":", "\n", "        ", "if", "i", "not", "in", "del_class_model", ".", "classes_", ":", "\n", "            ", "msk", ".", "append", "(", "i", ")", "\n", "", "", "msk", "=", "np", ".", "array", "(", "msk", ")", "\n", "return", "msk", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.get_rest_mask": [[506, 513], ["range", "numpy.array", "len", "np.array.append"], "function", ["None"], ["", "def", "get_rest_mask", "(", ")", ":", "\n", "    ", "msk", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "rest_clusters", ")", ")", ":", "\n", "        ", "if", "i", "not", "in", "rest_class_model", ".", "classes_", ":", "\n", "            ", "msk", ".", "append", "(", "i", ")", "\n", "", "", "msk", "=", "np", ".", "array", "(", "msk", ")", "\n", "return", "msk", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.get_dist": [[514, 527], ["range", "numpy.array", "sklearn.metrics.pairwise.euclidean_distances", "numpy.exp", "len", "np.array.append", "np.array.append", "sklearn.metrics.pairwise.euclidean_distances", "numpy.where", "min", "srcT.Prediction.Globals.repl_clusters", "srcT.Prediction.Globals.ins_clusters", "srcT.Prediction.Globals.del_clusters", "srcT.Prediction.Globals.rest_clusters"], "function", ["None"], ["", "def", "get_dist", "(", "clusters", ",", "enc_tmp_feat_vector", ")", ":", "\n", "    ", "clst", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "clusters", ")", ")", ":", "\n", "        ", "if", "clusters", "[", "i", "]", ".", "cluster_centers_", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "            ", "clst", ".", "append", "(", "clusters", "[", "i", "]", ".", "cluster_centers_", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "clst_dist", "=", "euclidean_distances", "(", "enc_tmp_feat_vector", ",", "clusters", "[", "i", "]", ".", "cluster_centers_", ")", "[", "0", "]", "\n", "ind", "=", "np", ".", "where", "(", "clst_dist", "==", "min", "(", "clst_dist", ")", ")", "[", "0", "]", "[", ":", "1", "]", "\n", "clst", ".", "append", "(", "clusters", "[", "i", "]", ".", "cluster_centers_", "[", "ind", "]", "[", "0", "]", ")", "\n", "", "", "clst", "=", "np", ".", "array", "(", "clst", ")", "\n", "dist", "=", "euclidean_distances", "(", "enc_tmp_feat_vector", ",", "clst", ")", "\n", "dist", "=", "np", ".", "exp", "(", "(", "-", "1", "/", "2", ")", "*", "(", "dist", "**", "2", ")", ")", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.predict_repl": [[528, 533], ["srcT.Prediction.Globals.repl_or_not.predict"], "function", ["None"], ["", "def", "predict_repl", "(", "repl_or_not", ",", "X", ")", ":", "\n", "    ", "p", "=", "repl_or_not", ".", "predict", "(", "X", ")", "[", "0", "]", "[", "0", "]", "\n", "if", "p", ">", "0.5", ":", "\n", "        ", "return", "1", "\n", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Prediction.Predict.predict_insdel": [[534, 537], ["numpy.argmax", "srcT.Prediction.Globals.ins_del_model.predict"], "function", ["None"], ["", "def", "predict_insdel", "(", "ins_del_model", ",", "X", ")", ":", "\n", "    ", "p", "=", "ins_del_model", ".", "predict", "(", "X", ")", "[", "0", "]", "\n", "return", "np", ".", "argmax", "(", "p", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.purushottamkar_macer.Common.Helper.errorLog": [[5, 13], ["open", "open.write", "open.write", "open.write", "open.write", "open.close", "time.asctime", "Helper.joinLL", "inspect.stack", "inspect.stack"], "function", ["home.repos.pwc.inspect_result.purushottamkar_macer.Common.Helper.joinLL"], ["def", "errorLog", "(", "listMsgs", ")", ":", "\n", "    ", "return", "\n", "f", "=", "open", "(", "CF", ".", "filenameErrorLog", ",", "'a'", ")", "\n", "f", ".", "write", "(", "time", ".", "asctime", "(", ")", "+", "'\\t'", ")", "\n", "f", ".", "write", "(", "'FileName='", "+", "inspect", ".", "stack", "(", ")", "[", "2", "]", "[", "1", "]", "+", "'\\t'", ")", "\n", "f", ".", "write", "(", "'FuncName='", "+", "inspect", ".", "stack", "(", ")", "[", "2", "]", "[", "3", "]", "+", "'\\t'", ")", "\n", "f", ".", "write", "(", "joinLL", "(", "listMsgs", ",", "'='", ",", "'\\t'", ")", "+", "'\\n'", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Common.Helper.pairwise": [[14, 19], ["itertools.tee", "next", "zip"], "function", ["None"], ["", "def", "pairwise", "(", "iterable", ")", ":", "\n", "    ", "\"s -> (s0,s1), (s1,s2), (s2, s3), ...\"", "\n", "a", ",", "b", "=", "tee", "(", "iterable", ")", "\n", "next", "(", "b", ",", "None", ")", "\n", "return", "zip", "(", "a", ",", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Common.Helper.NoneAnd": [[20, 30], ["None"], "function", ["None"], ["", "def", "NoneAnd", "(", "bool1", ",", "bool2", ")", ":", "\n", "    ", "'''Return and of 2 bools, provided no-one is none'''", "\n", "if", "bool1", "is", "None", "and", "bool2", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "if", "bool1", "is", "None", ":", "\n", "        ", "return", "bool2", "\n", "", "if", "bool2", "is", "None", ":", "\n", "        ", "return", "bool1", "\n", "\n", "", "return", "bool1", "and", "bool2", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Common.Helper.NoneOr": [[31, 41], ["None"], "function", ["None"], ["", "def", "NoneOr", "(", "bool1", ",", "bool2", ")", ":", "\n", "    ", "'''Return and of 2 bools, provided no-one is none'''", "\n", "if", "bool1", "is", "None", "and", "bool2", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "if", "bool1", "is", "None", ":", "\n", "        ", "return", "bool2", "\n", "", "if", "bool2", "is", "None", ":", "\n", "        ", "return", "bool1", "\n", "\n", "", "return", "bool1", "or", "bool2", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Common.Helper.joinList": [[42, 44], ["joinStr.join", "func"], "function", ["None"], ["", "def", "joinList", "(", "li", ",", "joinStr", "=", "'\\n'", ",", "func", "=", "str", ")", ":", "\n", "    ", "return", "joinStr", ".", "join", "(", "[", "func", "(", "i", ")", "for", "i", "in", "li", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Common.Helper.joinLL": [[45, 48], ["Helper.joinList", "Helper.joinList"], "function", ["home.repos.pwc.inspect_result.purushottamkar_macer.Common.Helper.joinList", "home.repos.pwc.inspect_result.purushottamkar_macer.Common.Helper.joinList"], ["", "def", "joinLL", "(", "lists", ",", "joinStrWord", "=", "' '", ",", "joinStrLine", "=", "'\\n'", ",", "func", "=", "str", ")", ":", "\n", "    ", "listStrs", "=", "[", "joinList", "(", "li", ",", "joinStrWord", ",", "func", ")", "for", "li", "in", "lists", "]", "\n", "return", "joinList", "(", "listStrs", ",", "joinStrLine", ",", "func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Common.Helper.toInt": [[49, 53], ["int"], "function", ["None"], ["", "def", "toInt", "(", "stri", ")", ":", "\n", "    ", "if", "stri", "is", "None", ":", "\n", "        ", "return", "0", "\n", "", "return", "int", "(", "stri", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Common.Helper.stringifyL": [[54, 56], ["str"], "function", ["None"], ["", "def", "stringifyL", "(", "li", ")", ":", "\n", "    ", "return", "[", "str", "(", "token", ")", "for", "token", "in", "li", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Common.Helper.stringifyLL": [[57, 59], ["Helper.stringifyL"], "function", ["home.repos.pwc.inspect_result.purushottamkar_macer.Common.Helper.stringifyL"], ["", "def", "stringifyLL", "(", "lists", ")", ":", "\n", "    ", "return", "[", "stringifyL", "(", "li", ")", "for", "li", "in", "lists", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Common.Helper.readCSV": [[60, 68], ["open", "csv.reader", "list", "open.close", "i.strip"], "function", ["None"], ["", "def", "readCSV", "(", "fname", ")", ":", "\n", "    ", "f", "=", "open", "(", "fname", ",", "'rU'", ")", "\n", "freader", "=", "csv", ".", "reader", "(", "f", ",", "delimiter", "=", "','", ",", "quotechar", "=", "'\"'", ",", "quoting", "=", "csv", ".", "QUOTE_MINIMAL", ")", "\n", "lines", "=", "list", "(", "freader", ")", "\n", "f", ".", "close", "(", ")", "\n", "headers", "=", "[", "i", ".", "strip", "(", ")", "for", "i", "in", "lines", "[", "0", "]", "]", "\n", "\n", "return", "headers", ",", "lines", "[", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.purushottamkar_macer.Common.Helper.writeCSV": [[69, 73], ["csv.writer", "csv.writer.writerow", "csv.writer.writerows", "open"], "function", ["None"], ["", "def", "writeCSV", "(", "fname", ",", "headers", ",", "lines", ")", ":", "\n", "    ", "fwriter", "=", "csv", ".", "writer", "(", "open", "(", "fname", ",", "'w'", ")", ",", "delimiter", "=", "','", ",", "quotechar", "=", "'\"'", ",", "quoting", "=", "csv", ".", "QUOTE_MINIMAL", ")", "\n", "fwriter", ".", "writerow", "(", "headers", ")", "\n", "fwriter", ".", "writerows", "(", "lines", ")", "\n", "\n"]]}