{"home.repos.pwc.inspect_result.ryan-feng_graphite.None.transforms.dist2pixels": [[13, 16], ["None"], "function", ["None"], ["def", "dist2pixels", "(", "dist", ",", "width", ",", "obj_width", "=", "30", ")", ":", "\n", "    ", "dist_inches", "=", "dist", "*", "12", "\n", "return", "1.0", "*", "dist_inches", "*", "width", "/", "obj_width", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.None.transforms.convert2Network": [[18, 48], ["cv2.resize", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.clamp", "torch.clamp", "cv2.resize", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.clamp", "torch.clamp", "img.permute().numpy.permute().detach().cpu().numpy", "img.permute().numpy.permute().numpy", "int", "int", "torch.from_numpy", "torch.from_numpy", "torch.max", "torch.max", "torch.min", "torch.min", "torchvision.Normalize", "round", "round", "torch.from_numpy", "torch.from_numpy", "torch.max", "torch.max", "torch.min", "torch.min", "img.permute().numpy.permute().detach().cpu", "torch.max", "torch.max", "torch.min", "torch.min", "img.permute().numpy.permute", "img.permute().numpy.permute().detach", "img.permute().numpy.permute"], "function", ["None"], ["", "def", "convert2Network", "(", "img", ",", "is_torch", "=", "True", ",", "net_size", "=", "32", ",", "model_type", "=", "'GTSRB'", ")", ":", "\n", "    ", "if", "net_size", "==", "32", ":", "# GTSRB", "\n", "        ", "if", "(", "is_torch", ")", ":", "\n", "            ", "img", "=", "img", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "32", ",", "32", ")", ")", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "img", "=", "torch", ".", "clamp", "(", "img", ",", "0.0", ",", "1.0", ")", "\n", "assert", "(", "torch", ".", "max", "(", "img", ")", "<=", "1.0", "and", "torch", ".", "min", "(", "img", ")", ">=", "0.0", ")", "\n", "if", "model_type", "==", "'GTSRB'", ":", "\n", "            ", "img", "=", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "1.0", ",", "1.0", ",", "1.0", ")", ")", "(", "img", ")", "\n", "assert", "(", "torch", ".", "max", "(", "img", ")", "<=", "0.5", "and", "torch", ".", "min", "(", "img", ")", ">=", "-", "0.5", ")", "\n", "\n", "", "", "else", ":", "# ALPR", "\n", "        ", "if", "(", "is_torch", ")", ":", "\n", "            ", "img", "=", "img", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "\n", "", "if", "img", ".", "shape", "[", "0", "]", ">", "img", ".", "shape", "[", "1", "]", ":", "# tall and narrow", "\n", "            ", "net_x", "=", "net_size", "\n", "net_y", "=", "int", "(", "round", "(", "net_size", "/", "img", ".", "shape", "[", "1", "]", "*", "img", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "else", ":", "# wide and short or square ", "\n", "            ", "net_y", "=", "net_size", "\n", "net_x", "=", "int", "(", "round", "(", "net_size", "/", "img", ".", "shape", "[", "0", "]", "*", "img", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "net_x", ",", "net_y", ")", ")", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "img", "=", "torch", ".", "clamp", "(", "img", ",", "0.0", ",", "1.0", ")", "\n", "assert", "(", "torch", ".", "max", "(", "img", ")", "<=", "1.0", "and", "torch", ".", "min", "(", "img", ")", ">=", "0.0", ")", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.None.transforms.apply_transformation": [[50, 78], ["torch.from_numpy().permute.permute().detach().cpu().numpy", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.where", "torch.where", "torch.where.permute().detach().cpu().numpy", "numpy.clip", "transforms.dist2pixels", "transforms.dist2pixels", "perspective_transform.get_perspective_transform", "numpy.empty", "range", "cv2.LUT", "numpy.clip", "transforms.convert2Network", "cv2.GaussianBlur", "numpy.clip", "torch.from_numpy().permute.permute().detach().cpu", "torch.from_numpy", "torch.from_numpy", "torch.where.permute().detach().cpu", "pow", "torch.from_numpy().permute.permute().detach", "torch.where.permute().detach", "torch.from_numpy().permute.permute", "torch.where.permute"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.dist2pixels", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.dist2pixels", "home.repos.pwc.inspect_result.ryan-feng_graphite.None.perspective_transform.get_perspective_transform", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.convert2Network"], ["", "def", "apply_transformation", "(", "img", ",", "mask", ",", "pert", ",", "angle", ",", "dist", ",", "gamma", ",", "blur", ",", "crop_percent", ",", "crop_off_x", ",", "crop_off_y", ",", "pt_file", ",", "net_size", "=", "32", ",", "obj_width", "=", "30", ",", "focal", "=", "3", ",", "nps", "=", "False", ",", "model_type", "=", "'GTSRB'", ")", ":", "\n", "    ", "pert_np", "=", "pert", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "nps", ":", "\n", "        ", "assert", "False", "\n", "\n", "", "if", "blur", "!=", "0", ":", "\n", "        ", "pert_np", "=", "cv2", ".", "GaussianBlur", "(", "pert_np", ",", "(", "blur", ",", "blur", ")", ",", "0", ")", "\n", "\n", "", "pert", "=", "torch", ".", "from_numpy", "(", "pert_np", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "att", "=", "torch", ".", "where", "(", "mask", ">", "0.5", ",", "pert", ",", "img", ")", "\n", "att_np", "=", "att", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "att_np", "=", "np", ".", "clip", "(", "att_np", ",", "0.0", ",", "1.0", ")", "\n", "\n", "dist", "=", "dist2pixels", "(", "dist", ",", "att_np", ".", "shape", "[", "1", "]", ",", "obj_width", ")", "\n", "focal", "=", "dist2pixels", "(", "focal", ",", "att_np", ".", "shape", "[", "1", "]", ",", "obj_width", ")", "\n", "att_np", "=", "get_perspective_transform", "(", "att_np", ",", "angle", ",", "att_np", ".", "shape", "[", "1", "]", ",", "att_np", ".", "shape", "[", "0", "]", ",", "focal", ",", "dist", ",", "crop_percent", ",", "crop_off_x", ",", "crop_off_y", ",", "pt_file", ")", "\n", "\n", "# Gamma", "\n", "att_uint", "=", "(", "att_np", "*", "255.0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "table", "=", "np", ".", "empty", "(", "(", "256", ")", ",", "np", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "256", ")", ":", "\n", "        ", "table", "[", "i", "]", "=", "np", ".", "clip", "(", "pow", "(", "i", "/", "255.0", ",", "gamma", ")", "*", "255.0", ",", "0", ",", "255", ")", "\n", "", "att_uint", "=", "cv2", ".", "LUT", "(", "att_uint", ",", "table", ")", "\n", "att_np", "=", "(", "att_uint", "/", "255.0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "att_np", "=", "np", ".", "clip", "(", "att_np", ",", "0.0", ",", "1.0", ")", "\n", "\n", "return", "convert2Network", "(", "att_np", ",", "False", ",", "net_size", "=", "net_size", ",", "model_type", "=", "model_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.None.transforms.get_transform_params": [[80, 141], ["range", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "torchvision.append", "numpy.random.uniform", "int", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "torchvision.append", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "torchvision.append", "round", "int", "int", "int", "math.floor", "round", "int", "round", "int", "math.floor", "math.floor", "numpy.random.uniform", "len", "numpy.random.uniform", "len", "numpy.random.uniform", "len"], "function", ["None"], ["", "def", "get_transform_params", "(", "num_xforms", ",", "model_type", "=", "'GTSRB'", ",", "nps", "=", "False", ",", "baseline", "=", "False", ",", "patchguard", "=", "False", ")", ":", "\n", "    ", "blur_kernels", "=", "[", "0", ",", "3", ",", "5", ",", "7", "]", "\n", "if", "baseline", ":", "\n", "        ", "blur_kernels", "=", "[", "0", ",", "3", "]", "\n", "", "transforms", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_xforms", ")", ":", "\n", "        ", "if", "model_type", "==", "'GTSRB'", ":", "\n", "            ", "angle", "=", "np", ".", "random", ".", "uniform", "(", "-", "50", ",", "50", ")", "\n", "if", "baseline", ":", "\n", "                ", "angle", "=", "np", ".", "random", ".", "uniform", "(", "-", "40", ",", "40", ")", "\n", "", "max_dist", "=", "15.0", "\n", "if", "baseline", ":", "\n", "                ", "max_dist", "=", "3.0", "\n", "", "dist", "=", "np", ".", "random", ".", "uniform", "(", "3.0", ",", "max_dist", ")", "\n", "gamma", "=", "np", ".", "random", ".", "uniform", "(", "1.0", ",", "3.5", ")", "\n", "flip_flag", "=", "np", ".", "random", ".", "uniform", "(", "0.0", ",", "1.0", ")", "\n", "if", "int", "(", "round", "(", "flip_flag", ")", ")", "==", "1", ":", "\n", "                ", "gamma", "=", "1.0", "/", "gamma", "\n", "\n", "", "crop_percent", "=", "np", ".", "random", ".", "uniform", "(", "-", "0.03125", ",", "0.03125", ")", "\n", "crop_off_x", "=", "np", ".", "random", ".", "uniform", "(", "-", "0.03125", ",", "0.03125", ")", "\n", "crop_off_y", "=", "np", ".", "random", ".", "uniform", "(", "-", "0.03125", ",", "0.03125", ")", "\n", "blur", "=", "blur_kernels", "[", "int", "(", "math", ".", "floor", "(", "np", ".", "random", ".", "uniform", "(", "0.0", ",", "1.0", ")", "*", "len", "(", "blur_kernels", ")", ")", ")", "]", "\n", "xform", "=", "(", "angle", ",", "dist", ",", "gamma", ",", "blur", ",", "crop_percent", ",", "crop_off_x", ",", "crop_off_y", ",", "30", ",", "3", ",", "nps", ")", "\n", "transforms", ".", "append", "(", "xform", ")", "\n", "", "elif", "model_type", "==", "'CIFAR'", ":", "\n", "            ", "blur_kernels", "=", "[", "0", "]", "\n", "angle", "=", "np", ".", "random", ".", "uniform", "(", "-", "30", ",", "30", ")", "\n", "max_dist", "=", "3.0", "\n", "if", "baseline", ":", "\n", "                ", "max_dist", "=", "3.0", "\n", "", "dist", "=", "np", ".", "random", ".", "uniform", "(", "3.0", ",", "max_dist", ")", "\n", "gamma", "=", "np", ".", "random", ".", "uniform", "(", "1.0", ",", "2.0", ")", "\n", "flip_flag", "=", "np", ".", "random", ".", "uniform", "(", "0.0", ",", "1.0", ")", "\n", "if", "int", "(", "round", "(", "flip_flag", ")", ")", "==", "1", ":", "\n", "                ", "gamma", "=", "1.0", "/", "gamma", "\n", "\n", "", "crop_percent", "=", "np", ".", "random", ".", "uniform", "(", "-", "0.03125", ",", "0.03125", ")", "\n", "crop_off_x", "=", "np", ".", "random", ".", "uniform", "(", "-", "0.03125", ",", "0.03125", ")", "\n", "crop_off_y", "=", "np", ".", "random", ".", "uniform", "(", "-", "0.03125", ",", "0.03125", ")", "\n", "blur", "=", "blur_kernels", "[", "int", "(", "math", ".", "floor", "(", "np", ".", "random", ".", "uniform", "(", "0.0", ",", "1.0", ")", "*", "len", "(", "blur_kernels", ")", ")", ")", "]", "\n", "xform", "=", "(", "angle", ",", "dist", ",", "gamma", ",", "blur", ",", "crop_percent", ",", "crop_off_x", ",", "crop_off_y", ",", "30", ",", "3", ",", "nps", ")", "\n", "transforms", ".", "append", "(", "xform", ")", "\n", "", "else", ":", "\n", "            ", "angle", "=", "np", ".", "random", ".", "uniform", "(", "-", "15", ",", "15", ")", "\n", "crop_percent", "=", "np", ".", "random", ".", "uniform", "(", "-", "0.03125", ",", "0.03125", ")", "\n", "crop_off_x", "=", "np", ".", "random", ".", "uniform", "(", "-", "0.03125", ",", "0.03125", ")", "\n", "crop_off_y", "=", "np", ".", "random", ".", "uniform", "(", "-", "0.03125", ",", "0.03125", ")", "\n", "\n", "blur_kernels", "=", "[", "0", ",", "3", ",", "5", "]", "\n", "max_dist", "=", "15.0", "\n", "gamma", "=", "np", ".", "random", ".", "uniform", "(", "1.0", ",", "3.5", ")", "\n", "flip_flag", "=", "np", ".", "random", ".", "uniform", "(", "0.0", ",", "1.0", ")", "\n", "if", "int", "(", "round", "(", "flip_flag", ")", ")", "==", "1", ":", "\n", "                ", "gamma", "=", "1.0", "/", "gamma", "\n", "\n", "", "blur", "=", "blur_kernels", "[", "int", "(", "math", ".", "floor", "(", "np", ".", "random", ".", "uniform", "(", "0.0", ",", "1.0", ")", "*", "len", "(", "blur_kernels", ")", ")", ")", "]", "\n", "dist", "=", "np", ".", "random", ".", "uniform", "(", "10.0", ",", "max_dist", ")", "\n", "xform", "=", "(", "angle", ",", "dist", ",", "gamma", ",", "blur", ",", "crop_percent", ",", "crop_off_x", ",", "crop_off_y", ",", "120", ",", "10", ",", "nps", ")", "\n", "transforms", ".", "append", "(", "xform", ")", "\n", "", "", "return", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.None.transforms.add_noise": [[143, 160], ["mask.permute().cpu().numpy", "image.permute().cpu().numpy", "theta.permute().cpu().numpy", "cv2.resize", "cv2.resize", "numpy.where", "torch.from_numpy().permute", "torch.from_numpy().permute", "numpy.clip", "numpy.where", "mask.permute().cpu", "image.permute().cpu", "theta.permute().cpu", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy", "torch.from_numpy", "image.size", "image.size", "image.size", "image.size", "mask.permute", "image.permute", "theta.permute", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "def", "add_noise", "(", "image", ",", "mask", ",", "lbd", ",", "theta", ",", "return_pert_and_mask", "=", "False", ",", "clip", "=", "True", ")", ":", "\n", "    ", "mask_np", "=", "mask", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "image_np", "=", "image", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "theta_np", "=", "theta", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "theta_large_np", "=", "cv2", ".", "resize", "(", "theta_np", ",", "(", "image", ".", "size", "(", ")", "[", "2", "]", ",", "image", ".", "size", "(", ")", "[", "1", "]", ")", ")", "\n", "comb", "=", "image_np", "+", "lbd", "*", "theta_large_np", "\n", "\n", "mask_large_np", "=", "cv2", ".", "resize", "(", "mask_np", ",", "(", "image", ".", "size", "(", ")", "[", "2", "]", ",", "image", ".", "size", "(", ")", "[", "1", "]", ")", ")", "\n", "mask_large_np", "=", "np", ".", "where", "(", "mask_large_np", ">", "0.5", ",", "1.0", ",", "0.0", ")", "\n", "\n", "if", "clip", "==", "True", ":", "\n", "        ", "comb", "=", "np", ".", "clip", "(", "comb", ",", "0", ",", "1", ")", "\n", "", "if", "return_pert_and_mask", ":", "\n", "        ", "pert", "=", "np", ".", "where", "(", "mask_large_np", ">", "0.5", ",", "comb", ",", "0", ")", "\n", "return", "torch", ".", "from_numpy", "(", "comb", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ",", "torch", ".", "from_numpy", "(", "pert", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ",", "torch", ".", "from_numpy", "(", "mask_large_np", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "", "return", "torch", ".", "from_numpy", "(", "comb", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.None.transforms.get_transformed_images": [[162, 174], ["transforms.add_noise", "len", "images.append", "transforms.convert2Network", "transforms.apply_transformation"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.add_noise", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.convert2Network", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.apply_transformation"], ["", "def", "get_transformed_images", "(", "image", ",", "mask", ",", "transforms", ",", "lbd", ",", "theta", ",", "pt_file", "=", "'inputs/GTSRB/Points/14.csv'", ",", "net_size", "=", "32", ",", "model_type", "=", "'GTSRB'", ")", ":", "\n", "    ", "att", ",", "pert", ",", "mask", "=", "add_noise", "(", "image", ",", "mask", ",", "lbd", ",", "theta", ",", "True", ")", "\n", "\n", "if", "len", "(", "transforms", ")", "==", "0", ":", "\n", "        ", "return", "[", "convert2Network", "(", "att", ",", "net_size", "=", "net_size", ",", "model_type", "=", "model_type", ")", "]", "\n", "\n", "", "images", "=", "[", "]", "\n", "for", "transform", "in", "transforms", ":", "\n", "        ", "angle", ",", "dist", ",", "gamma", ",", "blur", ",", "crop_percent", ",", "crop_off_x", ",", "crop_off_y", ",", "obj_width", ",", "focal", ",", "nps", "=", "transform", "\n", "images", ".", "append", "(", "apply_transformation", "(", "image", ",", "mask", ",", "pert", ",", "angle", ",", "dist", ",", "gamma", ",", "blur", ",", "crop_percent", ",", "crop_off_x", ",", "crop_off_y", ",", "pt_file", ",", "net_size", ",", "obj_width", ",", "focal", ",", "nps", ",", "model_type", "=", "model_type", ")", ")", "\n", "\n", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.None.transforms.transform_wb": [[176, 208], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "transforms.dist2pixels", "transforms.dist2pixels", "perspective_transform.get_perspective_transform", "kornia.enhance.adjust_gamma", "transforms.convert2NetworkWB", "numpy.zeros", "cv2.GaussianBlur", "numpy.repeat", "torch.from_numpy", "torch.from_numpy", "torch.Conv2d", "torch.from_numpy.to", "blur.to.to", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.zeros().to", "torch.zeros().to", "blur.to.", "torch.where.size", "torch.where.size", "torch.where.size", "torch.where.size", "torch.zeros", "torch.zeros", "torch.where.size"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.dist2pixels", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.dist2pixels", "home.repos.pwc.inspect_result.ryan-feng_graphite.None.perspective_transform.get_perspective_transform", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.convert2NetworkWB"], ["", "def", "transform_wb", "(", "orig", ",", "att", ",", "mask", ",", "transform", ",", "pt_file", "=", "'inputs/GTSRB/Points/14.csv'", ",", "net_size", "=", "32", ")", ":", "\n", "    ", "angle", ",", "dist", ",", "gamma", ",", "blur", ",", "crop_percent", ",", "crop_off_x", ",", "crop_off_y", ",", "obj_width", ",", "focal", ",", "_", "=", "transform", "\n", "att", "=", "torch", ".", "clamp", "(", "att", ",", "0.0", ",", "1.0", ")", "\n", "\n", "if", "blur", "!=", "0", ":", "\n", "        ", "kernel", "=", "np", ".", "zeros", "(", "(", "blur", "*", "2", "-", "1", ",", "blur", "*", "2", "-", "1", ")", ")", "\n", "kernel", "[", "blur", "-", "1", ",", "blur", "-", "1", "]", "=", "1", "\n", "kernel", "=", "cv2", ".", "GaussianBlur", "(", "kernel", ",", "(", "blur", ",", "blur", ")", ",", "0", ")", "\n", "kernel", "=", "kernel", "[", "blur", "//", "2", ":", "blur", "//", "2", "+", "blur", ",", "blur", "//", "2", ":", "blur", "//", "2", "+", "blur", "]", "\n", "kernel", "=", "kernel", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", "\n", "kernel", "=", "np", ".", "repeat", "(", "kernel", "[", "np", ".", "newaxis", ",", ":", ",", ":", ",", ":", "]", ",", "3", ",", "axis", "=", "0", ")", "\n", "kernel_torch", "=", "torch", ".", "from_numpy", "(", "kernel", ")", "\n", "blur", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "3", ",", "\n", "kernel_size", "=", "blur", ",", "groups", "=", "3", ",", "bias", "=", "False", ",", "padding", "=", "blur", "//", "2", ")", "\n", "blur", ".", "weight", ".", "data", "=", "kernel_torch", ".", "to", "(", "att", ".", "dtype", ")", "\n", "blur", ".", "weight", ".", "requires_grad", "=", "False", "\n", "blur", "=", "blur", ".", "to", "(", "att", ".", "device", ")", "\n", "# the below is done this way to match the black box implementation", "\n", "pert", "=", "torch", ".", "where", "(", "mask", ">", "0.5", ",", "att", ",", "torch", ".", "zeros", "(", "att", ".", "size", "(", ")", ")", ".", "to", "(", "mask", ".", "device", ")", ")", "\n", "att", "=", "torch", ".", "where", "(", "mask", ">", "0.5", ",", "blur", "(", "pert", ")", ",", "orig", ")", "\n", "", "else", ":", "\n", "        ", "att", "=", "torch", ".", "where", "(", "mask", ">", "0.5", ",", "att", ",", "orig", ")", "\n", "\n", "", "att", "=", "torch", ".", "clamp", "(", "att", ",", "0.0", ",", "1.0", ")", "\n", "dist", "=", "dist2pixels", "(", "dist", ",", "att", ".", "size", "(", ")", "[", "2", "]", ",", "obj_width", ")", "\n", "focal", "=", "dist2pixels", "(", "focal", ",", "att", ".", "size", "(", ")", "[", "2", "]", ",", "obj_width", ")", "\n", "att", "=", "get_perspective_transform", "(", "att", ",", "angle", ",", "att", ".", "size", "(", ")", "[", "3", "]", ",", "att", ".", "size", "(", ")", "[", "2", "]", ",", "focal", ",", "dist", ",", "crop_percent", ",", "crop_off_x", ",", "crop_off_y", ",", "pt_file", ",", "whitebox", "=", "True", ")", "\n", "\n", "# Gamma", "\n", "att", "=", "adjust_gamma", "(", "att", ",", "gamma", ")", "\n", "\n", "return", "convert2NetworkWB", "(", "att", ",", "True", ",", "net_size", "=", "net_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.None.transforms.convert2NetworkWB": [[209, 229], ["torch.clamp.to", "kornia.geometry.transform.resize", "torch.clamp", "torch.clamp", "kornia.geometry.transform.resize", "torch.clamp", "torch.clamp", "int", "int", "torch.max", "torch.max", "torch.min", "torch.min", "torch.clamp.size", "torch.clamp.size", "round", "round", "torch.max", "torch.max", "torch.min", "torch.min", "torch.clamp.size", "torch.clamp.size", "torch.clamp.size", "torch.clamp.size"], "function", ["None"], ["", "def", "convert2NetworkWB", "(", "img", ",", "is_torch", "=", "True", ",", "net_size", "=", "32", ")", ":", "\n", "    ", "orig_device", "=", "img", ".", "device", "\n", "if", "net_size", "==", "32", ":", "# GTSRB", "\n", "        ", "img", "=", "resize", "(", "img", ",", "32", ",", "align_corners", "=", "False", ")", "\n", "img", "=", "torch", ".", "clamp", "(", "img", ",", "0.0", ",", "1.0", ")", "\n", "assert", "(", "torch", ".", "max", "(", "img", ")", "<=", "1.0", "and", "torch", ".", "min", "(", "img", ")", ">=", "0.0", ")", "\n", "\n", "", "else", ":", "# ALPR", "\n", "        ", "if", "img", ".", "size", "(", ")", "[", "1", "]", ">", "img", ".", "size", "(", ")", "[", "2", "]", ":", "# tall and narrow", "\n", "            ", "net_x", "=", "net_size", "\n", "net_y", "=", "int", "(", "round", "(", "net_size", "/", "img", ".", "size", "(", ")", "[", "2", "]", "*", "img", ".", "size", "(", ")", "[", "1", "]", ")", ")", "\n", "", "else", ":", "# wide and short or square ", "\n", "            ", "net_y", "=", "net_size", "\n", "net_x", "=", "int", "(", "round", "(", "net_size", "/", "img", ".", "size", "(", ")", "[", "1", "]", "*", "img", ".", "size", "(", ")", "[", "2", "]", ")", ")", "\n", "\n", "", "img", "=", "resize", "(", "img", ",", "(", "net_y", ",", "net_x", ")", ",", "align_corners", "=", "True", ")", "\n", "img", "=", "torch", ".", "clamp", "(", "img", ",", "0.0", ",", "1.0", ")", "\n", "assert", "(", "torch", ".", "max", "(", "img", ")", "<=", "1.0", "and", "torch", ".", "min", "(", "img", ")", ">=", "0.0", ")", "\n", "\n", "", "return", "img", ".", "to", "(", "orig_device", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ryan-feng_graphite.None.main_alpr.attack_network": [[19, 187], ["getpass.getuser", "parsearguments.getarguments", "cv2.imread", "cv2.cvtColor", "cv2.resize", "torch.from_numpy().permute", "torch.from_numpy().permute", "range", "perturb.permute().numpy", "cv2.cvtColor", "cv2.imwrite", "print", "print", "print", "print", "print", "numpy.array", "min", "int", "int", "cv2.imread", "numpy.where", "cv2.imread", "cv2.resize", "cv2.cvtColor", "torch.from_numpy().permute().float", "cv2.cvtColor", "torch.from_numpy().permute().float", "cv2.imread", "numpy.where", "cv2.imread", "numpy.where", "parsearguments.getarguments", "boost.boost", "adversarial.permute().numpy", "cv2.cvtColor", "cv2.imwrite", "round", "round", "torch.from_numpy", "torch.from_numpy", "cv2.resize", "torch.from_numpy().permute", "cv2.resize", "torch.from_numpy().permute", "cv2.resize", "torch.from_numpy().permute", "torch.where.clone", "torch.where.clone", "torch.where", "cv2.resize.permute().numpy", "cv2.resize", "torch.from_numpy().permute", "torch.where", "torch.zeros().to", "generate_mask.generate_mask", "int", "torch.where.permute().numpy", "cv2.imwrite", "init.permute().numpy", "cv2.cvtColor", "cv2.imwrite", "print", "torch.where.clone", "torch.where", "adversarial.clone", "torch.from_numpy().permute", "perturb.permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "model.predict", "torch.ones", "torch.zeros", "adversarial.permute", "str", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "cv2.resize.permute", "torch.from_numpy", "torch.zeros", "torch.where.permute", "init.permute", "transforms.convert2Network", "torch.where.size", "torch.where.size", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.where.size", "torch.where.size", "cv2.resize.size", "cv2.resize", "str", "str", "adversarial.clone.clone().permute().numpy", "str", "str", "str", "str", "str", "adversarial.clone.clone().permute", "str", "str", "str", "str", "str", "adversarial.clone.clone", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.None.parsearguments.getarguments", "home.repos.pwc.inspect_result.ryan-feng_graphite.None.parsearguments.getarguments", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_boost.boost", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_generate_mask.generate_mask", "home.repos.pwc.inspect_result.ryan-feng_graphite.GTSRB.GTSRBNet.GTSRBNet.predict", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.convert2Network"], ["def", "attack_network", "(", "model", ",", "img_v", ",", "img_t", ",", "mask", ",", "lbl_v", ",", "lbl_t", ",", "pt_file", ",", "scorefile", ",", "heatmap", ",", "coarseerror", ",", "reduceerror", ",", "beta", "=", "1", ",", "num_xforms_mask", "=", "100", ",", "num_xforms_boost", "=", "1000", ",", "net_size", "=", "32", ",", "noise_size", "=", "32", ",", "model_type", "=", "'GTSRB'", ",", "mask_outer", "=", "None", ",", "mask_inner", "=", "None", ")", ":", "\n", "\n", "    ", "eta", "=", "500", "\n", "import", "getpass", "\n", "username", "=", "getpass", ".", "getuser", "(", ")", "\n", "args", "=", "parsearguments", ".", "getarguments", "(", ")", "\n", "coarse_mode", "=", "args", ".", "coarse_mode", "\n", "tag", "=", "args", ".", "tag", "\n", "bt", "=", "args", ".", "bt", "\n", "\n", "\n", "######################### PROCESS AND READ INPUTS #########################################", "\n", "out_str_base", "=", "username", "+", "\"_\"", "+", "str", "(", "lbl_v", ")", "+", "'_'", "+", "str", "(", "lbl_t", ")", "+", "'_'", "+", "str", "(", "reduceerror", ")", "+", "'_'", "+", "str", "(", "coarseerror", ")", "+", "'_'", "+", "str", "(", "coarse_mode", ")", "+", "'_'", "+", "scorefile", "+", "\"_\"", ";", "\n", "output_base", "=", "args", ".", "out_path", "\n", "if", "model_type", "!=", "'GTSRB'", ":", "\n", "        ", "output_base", "+=", "model_type", "+", "'/'", "\n", "", "img", "=", "cv2", ".", "imread", "(", "img_v", ")", "\n", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255.0", "\n", "\n", "### Adjust noise size in case of non-square images", "\n", "if", "noise_size", "==", "-", "1", ":", "\n", "        ", "noise_size", "=", "min", "(", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ")", "\n", "", "if", "img", ".", "shape", "[", "0", "]", ">", "img", ".", "shape", "[", "1", "]", ":", "# tall and narrow", "\n", "        ", "noise_x", "=", "noise_size", "\n", "noise_y", "=", "int", "(", "round", "(", "noise_size", "/", "img", ".", "shape", "[", "1", "]", "*", "img", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "else", ":", "# wide and short or square ", "\n", "        ", "noise_y", "=", "noise_size", "\n", "noise_x", "=", "int", "(", "round", "(", "noise_size", "/", "img", ".", "shape", "[", "0", "]", "*", "img", ".", "shape", "[", "1", "]", ")", ")", "\n", "", "img_small", "=", "cv2", ".", "resize", "(", "img", ",", "(", "noise_x", ",", "noise_y", ")", ")", "\n", "img_torch", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "img_small_torch", "=", "torch", ".", "from_numpy", "(", "img_small", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "mask_file", "=", "None", "\n", "if", "mask", "is", "not", "None", "and", "model_type", "!=", "'OpenALPRBorder'", ":", "\n", "        ", "mask_file", "=", "mask", "\n", "mask_full", "=", "cv2", ".", "imread", "(", "mask", ")", "\n", "if", "mask_full", ".", "shape", "[", "0", "]", "!=", "noise_y", "or", "mask_full", ".", "shape", "[", "1", "]", "!=", "noise_x", ":", "\n", "            ", "mask", "=", "cv2", ".", "resize", "(", "mask_full", ",", "(", "noise_x", ",", "noise_y", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "mask", "=", "mask_full", "\n", "\n", "", "mask", "=", "np", ".", "where", "(", "mask", ">", "128", ",", "255", ",", "0", ")", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "/", "255.0", "\n", "\n", "", "if", "img_t", "is", "not", "None", ":", "\n", "        ", "tar_large", "=", "cv2", ".", "imread", "(", "img_t", ")", "\n", "tar", "=", "cv2", ".", "resize", "(", "tar_large", ",", "(", "noise_x", ",", "noise_y", ")", ")", "\n", "tar", "=", "cv2", ".", "cvtColor", "(", "tar", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "tar", "=", "tar", "/", "255.0", "\n", "tar", "=", "torch", ".", "from_numpy", "(", "tar", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", "\n", "tar_large", "=", "cv2", ".", "cvtColor", "(", "tar_large", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "tar_large", "=", "tar_large", "/", "255.0", "\n", "tar_large", "=", "torch", ".", "from_numpy", "(", "tar_large", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", "\n", "\n", "", "if", "mask_outer", "is", "not", "None", ":", "\n", "        ", "mask_outer_file", "=", "mask_outer", "\n", "mask_outer_full", "=", "cv2", ".", "imread", "(", "mask_outer", ")", "\n", "if", "mask_outer_full", ".", "shape", "[", "0", "]", "!=", "noise_y", "or", "mask_outer_full", ".", "shape", "[", "1", "]", "!=", "noise_x", ":", "\n", "            ", "mask_outer", "=", "cv2", ".", "resize", "(", "mask_outer_full", ",", "(", "noise_x", ",", "noise_y", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "mask_outer", "=", "mask_outer_full", "\n", "\n", "", "mask_outer", "=", "np", ".", "where", "(", "mask_outer", ">", "128", ",", "255", ",", "0", ")", "\n", "mask_outer", "=", "torch", ".", "from_numpy", "(", "mask_outer", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "/", "255.0", "\n", "\n", "", "if", "mask_inner", "is", "not", "None", ":", "\n", "        ", "mask_inner_file", "=", "mask_inner", "\n", "mask_inner_full", "=", "cv2", ".", "imread", "(", "mask_inner", ")", "\n", "if", "mask_inner_full", ".", "shape", "[", "0", "]", "!=", "noise_y", "or", "mask_inner_full", ".", "shape", "[", "1", "]", "!=", "noise_x", ":", "\n", "            ", "mask_inner", "=", "cv2", ".", "resize", "(", "mask_inner_full", ",", "(", "noise_x", ",", "noise_y", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "mask_inner", "=", "mask_inner_full", "\n", "\n", "", "mask_inner", "=", "np", ".", "where", "(", "mask_inner", ">", "128", ",", "255", ",", "0", ")", "\n", "mask_inner", "=", "torch", ".", "from_numpy", "(", "mask_inner", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "/", "255.0", "\n", "\n", "\n", "\n", "##################################### STAGE 1: Generate mask ##################################", "\n", "", "nbits", "=", "1000000", "\n", "total_query_count", "=", "0", "\n", "next_theta", "=", "None", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "tmp", "=", "None", "\n", "tmp_small", "=", "None", "\n", "if", "model_type", "==", "'OpenALPRBorder'", ":", "\n", "            ", "tmp", "=", "img_torch", ".", "clone", "(", ")", "\n", "tmp_small", "=", "img_small_torch", ".", "clone", "(", ")", "\n", "img_small_torch", "=", "torch", ".", "where", "(", "mask_outer", ">", "0.5", ",", "tar", ",", "img_small_torch", ")", "\n", "mask_outer_large", "=", "mask_outer", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "mask_outer_large", "=", "cv2", ".", "resize", "(", "mask_outer_large", ",", "(", "img_torch", ".", "size", "(", ")", "[", "2", "]", ",", "img_torch", ".", "size", "(", ")", "[", "1", "]", ")", ")", "\n", "mask_outer_large", "=", "torch", ".", "from_numpy", "(", "mask_outer_large", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "img_torch", "=", "torch", ".", "where", "(", "mask_outer_large", ">", "0.5", ",", "tar_large", ",", "img_torch", ")", "\n", "mask", "=", "mask_inner", "\n", "\n", "", "if", "i", "<", "1", ":", "\n", "            ", "patch_size", "=", "8", "\n", "", "elif", "i", "<", "2", ":", "\n", "            ", "patch_size", "=", "4", "\n", "", "else", ":", "\n", "            ", "patch_size", "=", "2", "\n", "\n", "", "if", "i", ">=", "2", "or", "nbits", "==", "0", ":", "\n", "            ", "coarseerror", "=", "1.0", "\n", "reduceerror", "=", "1.0", "\n", "mask_out", "=", "torch", ".", "zeros", "(", "mask", ".", "size", "(", ")", ")", ".", "to", "(", "mask", ".", "device", ")", "\n", "nbits", "=", "0", "\n", "", "else", ":", "\n", "\n", "# The regular variant - just generate a mask once and move on", "\n", "            ", "init", ",", "mask_query_count", ",", "mask_out", ",", "nbits", ",", "tr_score", "=", "generate_mask", "(", "model", ",", "img_small_torch", ",", "img_torch", ",", "lbl_v", ",", "mask", ",", "tar", ",", "tar_large", ",", "lbl_t", ",", "pt_file", ",", "scorefile", ",", "\n", "heatmap", ",", "coarseerror", ",", "reduceerror", ",", "num_xforms", "=", "num_xforms_mask", ",", "\n", "net_size", "=", "net_size", ",", "model_type", "=", "model_type", ",", "patch_size", "=", "patch_size", ",", "stride_factor", "=", "2", ")", "#8)#noise_size // 8)", "\n", "nbits", "=", "int", "(", "nbits", ")", "\n", "\n", "mask_out_np", "=", "mask_out", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "cv2", ".", "imwrite", "(", "output_base", "+", "'masks/'", "+", "out_str_base", "+", "'_'", "+", "str", "(", "nbits", ")", "+", "'_bits_'", "+", "str", "(", "tr_score", ")", "+", "'_tr_'", "+", "str", "(", "i", ")", "+", "'_iter_'", "+", "tag", "+", "'.png'", ",", "mask_out_np", "*", "255", ")", "\n", "\n", "init_np", "=", "init", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "init_np", "=", "cv2", ".", "cvtColor", "(", "init_np", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "cv2", ".", "imwrite", "(", "output_base", "+", "'inits/'", "+", "out_str_base", "+", "'_'", "+", "str", "(", "nbits", ")", "+", "'_bits_'", "+", "str", "(", "tr_score", ")", "+", "'_tr_'", "+", "str", "(", "i", ")", "+", "'_iter_'", "+", "tag", "+", "'.png'", ",", "init_np", "*", "255", ")", "\n", "\n", "print", "(", "\"Predicted label for initialized example: \"", ",", "model", ".", "predict", "(", "convert2Network", "(", "init", ",", "net_size", "=", "net_size", ")", ")", ")", "\n", "\n", "total_query_count", "+=", "mask_query_count", "\n", "\n", "", "if", "model_type", "==", "'OpenALPRBorder'", ":", "\n", "            ", "img_torch", "=", "tmp", "\n", "img_small_torch", "=", "tmp_small", "\n", "mask_inner", "=", "mask_out", ".", "clone", "(", ")", "\n", "\n", "##################################### STAGE 2: Boost / optimize noise within mask ##################################", "\n", "", "if", "model_type", "==", "'OpenALPRBorder'", ":", "\n", "            ", "mask_out", "=", "mask_outer", "+", "mask_out", "\n", "mask_out", "=", "torch", ".", "where", "(", "mask_out", ">", "0.5", ",", "torch", ".", "ones", "(", "mask_out", ".", "size", "(", ")", ")", ",", "torch", ".", "zeros", "(", "mask_out", ".", "size", "(", ")", ")", ")", "\n", "\n", "\n", "", "args", "=", "parsearguments", ".", "getarguments", "(", ")", "\n", "num_boost_iters", "=", "5", "\n", "adversarial", ",", "tr_score", ",", "perturb", ",", "boost_query_count", ",", "next_theta", ",", "adv_small", "=", "boost", "(", "model", ",", "img_torch", ",", "lbl_v", ",", "mask_out", ",", "tar", ",", "lbl_t", ",", "beta", "=", "beta", ",", "iterations", "=", "num_boost_iters", ",", "pt_file", "=", "pt_file", ",", "num_xforms", "=", "num_xforms_boost", ",", "net_size", "=", "net_size", ",", "model_type", "=", "model_type", ",", "eta", "=", "eta", ",", "bt", "=", "bt", ",", "budget_factor", "=", "2000", ",", "init_theta", "=", "next_theta", ")", "\n", "\n", "total_query_count", "+=", "boost_query_count", "\n", "\n", "if", "model_type", "==", "'OpenALPRBorder'", ":", "\n", "            ", "tar_large", "=", "adversarial", ".", "clone", "(", ")", "\n", "tar", "=", "torch", ".", "from_numpy", "(", "cv2", ".", "resize", "(", "tar_large", ".", "clone", "(", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", ",", "(", "noise_x", ",", "noise_y", ")", ")", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "", "adversarial_np", "=", "adversarial", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "adversarial_np", "=", "cv2", ".", "cvtColor", "(", "adversarial_np", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "\n", "\n", "cv2", ".", "imwrite", "(", "output_base", "+", "'boosted/'", "+", "out_str_base", "+", "'_'", "+", "str", "(", "nbits", ")", "+", "'_bits_'", "+", "str", "(", "tr_score", ")", "+", "'_tr_'", "+", "str", "(", "i", ")", "+", "'_iter_'", "+", "tag", "+", "'.png'", ",", "adversarial_np", "*", "255", ")", "\n", "\n", "", "perturb_np", "=", "perturb", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "perturb_np", "=", "cv2", ".", "cvtColor", "(", "perturb_np", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "cv2", ".", "imwrite", "(", "output_base", "+", "'perturbations/'", "+", "out_str_base", "+", "'_'", "+", "str", "(", "nbits", ")", "+", "'bits_'", "+", "str", "(", "tr_score", ")", "+", "'_tr_'", "+", "str", "(", "i", ")", "+", "'_iter_'", "+", "tag", "+", "'.png'", ",", "perturb_np", "*", "255", ")", "\n", "\n", "print", "(", "\"--------------------------------\"", ")", "\n", "print", "(", "\"Attack Completed.\"", ")", "\n", "print", "(", "\"Final transform_robustness:\"", ",", "tr_score", ")", "\n", "print", "(", "\"Final number of pixels:\"", ",", "nbits", ")", "\n", "print", "(", "\"Final number of queries:\"", ",", "total_query_count", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.None.main_alpr.attack_GTSRB": [[190, 204], ["GTSRB.GTSRBNet.GTSRBNet", "torch.cuda.is_available", "torch.nn.DataParallel.eval", "torch.device", "torch.load", "model.load_state_dict", "main_alpr.attack_network", "torch.nn.DataParallel.cuda", "torch.nn.DataParallel", "torch.cuda.is_available", "torch.cuda.is_available"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.whitebox.whitebox_attack.eval", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.main_patchguard.attack_network"], ["", "def", "attack_GTSRB", "(", "img_v", ",", "img_t", ",", "mask", ",", "lbl_v", ",", "lbl_t", ",", "pt_file", ",", "scorefile", ",", "heatmap", ",", "coarseerror", ",", "reduceerror", ",", "beta", "=", "1", ",", "num_xforms_mask", "=", "100", ",", "num_xforms_boost", "=", "1000", ",", "net_size", "=", "32", ",", "noise_size", "=", "32", ")", ":", "\n", "    ", "net", "=", "GTSRBNet", "(", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "net", ".", "cuda", "(", ")", "\n", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "net", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "\n", "", "net", ".", "eval", "(", ")", "\n", "\n", "model", "=", "net", ".", "module", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "net", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "'GTSRB/checkpoint_us.tar'", ",", "map_location", "=", "device", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model_state_dict'", "]", ")", "\n", "\n", "attack_network", "(", "model", ",", "img_v", ",", "img_t", ",", "mask", ",", "lbl_v", ",", "lbl_t", ",", "pt_file", ",", "scorefile", ",", "heatmap", ",", "coarseerror", ",", "reduceerror", ",", "beta", ",", "num_xforms_mask", ",", "num_xforms_boost", ",", "net_size", ",", "noise_size", ",", "model_type", "=", "'GTSRB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.None.main_alpr.attack_openalpr_border": [[208, 212], ["OpenALPR.OpenALPRBorderNet.OpenALPRBorderNet", "main_alpr.attack_network"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.main_patchguard.attack_network"], ["", "def", "attack_openalpr_border", "(", "img_v", ",", "img_t", ",", "mask_outer", ",", "mask_inner", ",", "vic_lp", ",", "pt_file", ",", "scorefile", ",", "heatmap", ",", "coarseerror", ",", "reduceerror", ",", "beta", "=", "1", ",", "num_xforms_mask", "=", "100", ",", "num_xforms_boost", "=", "1000", ",", "net_size", "=", "224", ",", "noise_size", "=", "32", ")", ":", "\n", "    ", "model", "=", "OpenALPRBorderNet", "(", "vic_lp", ")", "\n", "\n", "attack_network", "(", "model", ",", "img_v", ",", "img_t", ",", "mask", ",", "0", ",", "1", ",", "pt_file", ",", "scorefile", ",", "heatmap", ",", "coarseerror", ",", "reduceerror", ",", "beta", ",", "num_xforms_mask", ",", "num_xforms_boost", ",", "net_size", ",", "noise_size", ",", "model_type", "=", "'OpenALPRBorder'", ",", "mask_outer", "=", "mask_outer", ",", "mask_inner", "=", "mask_inner", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.None.main_alpr.attack_openalpr": [[215, 222], ["parsearguments.getarguments", "OpenALPRNet", "main_alpr.attack_network"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.None.parsearguments.getarguments", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.main_patchguard.attack_network"], ["", "def", "attack_openalpr", "(", "img_v", ",", "img_t", ",", "mask", ",", "vic_lp", ",", "tar_lp", ",", "pt_file", ",", "scorefile", ",", "heatmap", ",", "coarseerror", ",", "reduceerror", ",", "beta", "=", "1", ",", "num_xforms_mask", "=", "100", ",", "num_xforms_boost", "=", "1000", ",", "net_size", "=", "224", ",", "noise_size", "=", "32", ")", ":", "\n", "    ", "args", "=", "parsearguments", ".", "getarguments", "(", ")", "\n", "\n", "t", "=", "1", "\n", "model", "=", "OpenALPRNet", "(", "vic_lp", ",", "tar_lp", ")", "\n", "\n", "attack_network", "(", "model", ",", "img_v", ",", "img_t", ",", "mask", ",", "0", ",", "t", ",", "pt_file", ",", "scorefile", ",", "heatmap", ",", "coarseerror", ",", "reduceerror", ",", "beta", ",", "num_xforms_mask", ",", "num_xforms_boost", ",", "net_size", ",", "noise_size", ",", "model_type", "=", "'OpenALPR'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.None.main.attack_network": [[20, 137], ["getpass.getuser", "parsearguments.getarguments", "cv2.imread", "cv2.cvtColor", "cv2.resize", "torch.from_numpy().permute", "torch.from_numpy().permute", "cv2.resize.clone", "torch.from_numpy().permute.clone", "torch.from_numpy().permute().float.clone", "range", "print", "print", "print", "print", "print", "str", "numpy.array", "cv2.imread", "numpy.where", "cv2.imread", "cv2.resize", "cv2.cvtColor", "torch.from_numpy().permute", "cv2.cvtColor", "torch.from_numpy().permute().float", "int", "torch.from_numpy().permute().float.permute().numpy", "cv2.imwrite", "transforms.add_noise.permute().numpy", "cv2.cvtColor", "cv2.imwrite", "boost.boost", "torch.from_numpy().permute().float.clone", "adversarial.clone", "torch.from_numpy().permute", "adversarial.permute().numpy", "cv2.cvtColor", "cv2.imwrite", "perturb.permute().numpy", "cv2.cvtColor", "cv2.imwrite", "transforms.get_transform_params", "transforms.get_transformed_images", "utils.run_predictions", "print", "torch.from_numpy", "torch.from_numpy", "cv2.resize", "torch.from_numpy().permute", "numpy.array", "numpy.array", "numpy.zeros", "int", "int", "int", "numpy.ones", "torch.from_numpy().permute().float", "transforms.add_noise", "transforms.get_transform_params", "transforms.get_transformed_images", "utils.run_predictions", "generate_mask.generate_mask", "torch.zeros", "str", "torch.from_numpy", "torch.from_numpy().permute", "torch.from_numpy().permute().float.permute", "transforms.add_noise.permute", "torch.from_numpy", "adversarial.permute", "perturb.permute", "torch.from_numpy().permute().float.size", "torch.from_numpy", "torch.from_numpy().permute", "str", "str", "cv2.resize", "str", "str", "str", "str", "str", "torch.from_numpy", "adversarial.clone.clone().permute().numpy", "torch.from_numpy", "str", "str", "str", "str", "str", "str", "adversarial.clone.clone().permute", "str", "str", "str", "str", "str", "str", "adversarial.clone.clone", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.None.parsearguments.getarguments", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_boost.boost", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.get_transform_params", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.get_transformed_images", "home.repos.pwc.inspect_result.ryan-feng_graphite.None.utils.run_predictions", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.add_noise", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.get_transform_params", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.get_transformed_images", "home.repos.pwc.inspect_result.ryan-feng_graphite.None.utils.run_predictions", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_generate_mask.generate_mask"], ["def", "attack_network", "(", "model", ",", "img_v", ",", "img_t", ",", "mask", ",", "lbl_v", ",", "lbl_t", ",", "pt_file", ",", "scorefile", ",", "heatmap", ",", "coarseerror", ",", "reduceerror", ",", "beta", "=", "1", ",", "num_xforms_mask", "=", "100", ",", "num_xforms_boost", "=", "1000", ",", "net_size", "=", "32", ",", "noise_size", "=", "32", ",", "model_type", "=", "'GTSRB'", ",", "joint_iters", "=", "1", ",", "image_id", "=", "''", ")", ":", "\n", "    ", "import", "getpass", "\n", "username", "=", "getpass", ".", "getuser", "(", ")", "\n", "args", "=", "parsearguments", ".", "getarguments", "(", ")", "\n", "coarse_mode", "=", "args", ".", "coarse_mode", "\n", "\n", "\n", "if", "image_id", "!=", "''", ":", "\n", "        ", "out_str_base", "=", "username", "+", "\"_\"", "+", "image_id", "+", "'_'", "+", "str", "(", "lbl_v", ")", "+", "'_'", "+", "str", "(", "lbl_t", ")", "+", "'_'", "+", "str", "(", "reduceerror", ")", "+", "'_'", "+", "str", "(", "coarseerror", ")", "+", "'_'", "+", "str", "(", "coarse_mode", ")", "+", "'_'", "+", "scorefile", "+", "\"_\"", ";", "\n", "", "else", ":", "\n", "        ", "out_str_base", "=", "username", "+", "\"_\"", "+", "str", "(", "lbl_v", ")", "+", "'_'", "+", "str", "(", "lbl_t", ")", "+", "'_'", "+", "str", "(", "reduceerror", ")", "+", "'_'", "+", "str", "(", "coarseerror", ")", "+", "'_'", "+", "str", "(", "coarse_mode", ")", "+", "'_'", "+", "scorefile", "+", "\"_\"", ";", "\n", "", "out_str_heat", "=", "username", "+", "\"_\"", "+", "str", "(", "lbl_v", ")", "+", "'_'", "+", "str", "(", "lbl_t", ")", ";", "\n", "output_base", "=", "args", ".", "out_path", "\n", "if", "model_type", "!=", "'GTSRB'", ":", "\n", "        ", "output_base", "+=", "model_type", "+", "'/'", "\n", "", "img", "=", "cv2", ".", "imread", "(", "img_v", ")", "\n", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255.0", "\n", "img_small", "=", "cv2", ".", "resize", "(", "img", ",", "(", "noise_size", ",", "noise_size", ")", ")", "\n", "img_torch", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "img_small_torch", "=", "torch", ".", "from_numpy", "(", "img_small", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "assert", "args", ".", "square_x", "is", "None", "and", "args", ".", "square_y", "is", "None", "or", "args", ".", "square_x", "is", "not", "None", "and", "args", ".", "square_y", "is", "not", "None", "\n", "\n", "mask_file", "=", "None", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "mask_file", "=", "mask", "\n", "mask_full", "=", "cv2", ".", "imread", "(", "mask", ")", "\n", "if", "mask_full", ".", "shape", "[", "0", "]", "!=", "noise_size", "or", "mask_full", ".", "shape", "[", "1", "]", "!=", "noise_size", ":", "\n", "            ", "mask", "=", "cv2", ".", "resize", "(", "mask_full", ",", "(", "noise_size", ",", "noise_size", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "mask", "=", "mask_full", "\n", "\n", "", "mask", "=", "np", ".", "where", "(", "mask", ">", "128", ",", "255", ",", "0", ")", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "/", "255.0", "\n", "\n", "", "if", "img_t", "is", "not", "None", ":", "\n", "        ", "tar_large", "=", "cv2", ".", "imread", "(", "img_t", ")", "\n", "tar", "=", "cv2", ".", "resize", "(", "tar_large", ",", "(", "noise_size", ",", "noise_size", ")", ")", "\n", "tar", "=", "cv2", ".", "cvtColor", "(", "tar", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "tar", "=", "np", ".", "array", "(", "tar", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255.0", "\n", "\n", "\n", "tar", "=", "torch", ".", "from_numpy", "(", "tar", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "tar_large", "=", "cv2", ".", "cvtColor", "(", "tar_large", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "tar_large", "=", "np", ".", "array", "(", "tar_large", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255.0", "\n", "tar_large", "=", "torch", ".", "from_numpy", "(", "tar_large", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", "\n", "\n", "", "prior_mask", "=", "mask", ".", "clone", "(", ")", "\n", "next_theta", "=", "None", "\n", "prior_attack", "=", "tar", ".", "clone", "(", ")", "\n", "prior_attack_large", "=", "tar_large", ".", "clone", "(", ")", "\n", "total_mask_query_ct", "=", "0", "\n", "total_boost_query_ct", "=", "0", "\n", "for", "i", "in", "range", "(", "joint_iters", ")", ":", "\n", "        ", "if", "args", ".", "square_x", "is", "not", "None", ":", "\n", "            ", "assert", "joint_iters", "==", "1", "\n", "mask_query_count", "=", "0", "\n", "mask_out", "=", "np", ".", "zeros", "(", "(", "noise_size", ",", "noise_size", ",", "3", ")", ")", "\n", "square_x", "=", "int", "(", "args", ".", "square_x", ")", "\n", "square_y", "=", "int", "(", "args", ".", "square_y", ")", "\n", "square_size", "=", "int", "(", "args", ".", "square_size", ")", "\n", "mask_out", "[", "square_y", ":", "square_y", "+", "square_size", ",", "square_x", ":", "square_x", "+", "square_size", ",", ":", "]", "=", "np", ".", "ones", "(", "(", "square_size", ",", "square_size", ",", "3", ")", ")", "\n", "mask_out", "=", "torch", ".", "from_numpy", "(", "mask_out", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", "\n", "best_theta", "=", "(", "tar", "-", "img_small_torch", ")", "*", "mask_out", "\n", "init", "=", "add_noise", "(", "img_torch", ",", "mask_out", ",", "1.0", ",", "best_theta", ")", "\n", "nbits", "=", "square_size", "**", "2", "\n", "xforms", "=", "get_transform_params", "(", "num_xforms_mask", ",", "model_type", ")", "\n", "xform_imgs", "=", "get_transformed_images", "(", "img_torch", ",", "mask_out", ",", "xforms", ",", "1.0", ",", "best_theta", ",", "pt_file", ",", "net_size", "=", "net_size", ",", "model_type", "=", "model_type", ")", "\n", "success_rate", ",", "query_ct", "=", "run_predictions", "(", "model", ",", "xform_imgs", ",", "lbl_v", ",", "lbl_t", ")", "\n", "tr_score", "=", "1", "-", "success_rate", "\n", "\n", "", "else", ":", "\n", "            ", "init", ",", "this_mask_query_count", ",", "mask_out", ",", "nbits", ",", "tr_score", "=", "generate_mask", "(", "model", ",", "img_small_torch", ",", "img_torch", ",", "lbl_v", ",", "prior_mask", ",", "prior_attack", ",", "prior_attack_large", ",", "lbl_t", ",", "pt_file", ",", "scorefile", ",", "\n", "heatmap", ",", "coarseerror", ",", "reduceerror", ",", "num_xforms", "=", "num_xforms_mask", ",", "\n", "net_size", "=", "net_size", ",", "model_type", "=", "model_type", ",", "patch_size", "=", "noise_size", "//", "8", ",", "heatmap_file", "=", "args", ".", "heatmap_file", ",", "heatmap_out_path", "=", "output_base", "+", "'heatmaps/'", "+", "out_str_heat", "+", "'_heatmap.pkl'", ",", "max_mask_size", "=", "args", ".", "max_mask_size", ",", "init_theta", "=", "next_theta", ")", "\n", "total_mask_query_ct", "+=", "this_mask_query_count", "\n", "", "nbits", "=", "int", "(", "nbits", ")", "\n", "\n", "mask_out_np", "=", "mask_out", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "cv2", ".", "imwrite", "(", "output_base", "+", "'masks/'", "+", "out_str_base", "+", "'_'", "+", "str", "(", "nbits", ")", "+", "'_bits_'", "+", "str", "(", "tr_score", ")", "+", "'_tr_'", "+", "str", "(", "i", ")", "+", "'_joint_iter.png'", ",", "mask_out_np", "*", "255", ")", "\n", "\n", "init_np", "=", "init", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "init_np", "=", "cv2", ".", "cvtColor", "(", "init_np", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "cv2", ".", "imwrite", "(", "output_base", "+", "'inits/'", "+", "out_str_base", "+", "'_'", "+", "str", "(", "nbits", ")", "+", "'_bits_'", "+", "str", "(", "tr_score", ")", "+", "'_tr_'", "+", "str", "(", "i", ")", "+", "'_joint_iter.png'", ",", "init_np", "*", "255", ")", "\n", "\n", "adversarial", ",", "tr_score", ",", "perturb", ",", "this_boost_query_count", ",", "next_theta", ",", "adv_small", "=", "boost", "(", "model", ",", "img_torch", ",", "lbl_v", ",", "mask_out", ",", "prior_attack", ",", "lbl_t", ",", "beta", "=", "beta", ",", "iterations", "=", "1000", ",", "pt_file", "=", "pt_file", ",", "num_xforms", "=", "num_xforms_boost", ",", "net_size", "=", "net_size", ",", "model_type", "=", "model_type", ",", "square_mask", "=", "args", ".", "square_x", "is", "not", "None", ",", "early_boost_exit", "=", "args", ".", "early_boost_exit", ",", "init_theta", "=", "next_theta", ")", "\n", "total_boost_query_ct", "+=", "this_boost_query_count", "\n", "\n", "prior_mask", "=", "mask_out", ".", "clone", "(", ")", "\n", "prior_attack_large", "=", "adversarial", ".", "clone", "(", ")", "\n", "prior_attack", "=", "torch", ".", "from_numpy", "(", "cv2", ".", "resize", "(", "prior_attack_large", ".", "clone", "(", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", ",", "(", "noise_size", ",", "noise_size", ")", ")", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "adversarial_np", "=", "adversarial", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "adversarial_np", "=", "cv2", ".", "cvtColor", "(", "adversarial_np", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "\n", "\n", "cv2", ".", "imwrite", "(", "output_base", "+", "'boosted/'", "+", "out_str_base", "+", "'_'", "+", "str", "(", "nbits", ")", "+", "'_bits_'", "+", "str", "(", "tr_score", ")", "+", "'_tr_'", "+", "str", "(", "i", ")", "+", "'_joint_iter.png'", ",", "adversarial_np", "*", "255", ")", "\n", "\n", "perturb_np", "=", "perturb", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "perturb_np", "=", "cv2", ".", "cvtColor", "(", "perturb_np", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "cv2", ".", "imwrite", "(", "output_base", "+", "'perturbations/'", "+", "out_str_base", "+", "'_'", "+", "str", "(", "nbits", ")", "+", "'bits_'", "+", "str", "(", "tr_score", ")", "+", "'_tr_'", "+", "str", "(", "i", ")", "+", "'_joint_iter.png'", ",", "perturb_np", "*", "255", ")", "\n", "\n", "", "print", "(", "\"--------------------------------\"", ")", "\n", "print", "(", "\"Attack Completed.\"", ")", "\n", "if", "args", ".", "num_test_xforms", ">", "-", "1", ":", "\n", "        ", "xforms", "=", "get_transform_params", "(", "args", ".", "num_test_xforms", ",", "model_type", ")", "\n", "xform_imgs", "=", "get_transformed_images", "(", "adversarial", ",", "mask_out", ",", "xforms", ",", "0.0", ",", "torch", ".", "zeros", "(", "mask_out", ".", "size", "(", ")", ")", ",", "pt_file", ",", "net_size", "=", "net_size", ",", "model_type", "=", "model_type", ")", "\n", "success_rate", ",", "query_ct", "=", "run_predictions", "(", "model", ",", "xform_imgs", ",", "lbl_v", ",", "lbl_t", ")", "\n", "print", "(", "\"Final transform_robustness (\"", "+", "str", "(", "args", ".", "num_test_xforms", ")", "+", "\" transforms):\"", ",", "1.0", "-", "success_rate", ")", "\n", "", "print", "(", "\"Final transform_robustness:\"", ",", "tr_score", ")", "\n", "print", "(", "\"Final number of pixels:\"", ",", "nbits", ")", "\n", "print", "(", "\"Final number of queries:\"", ",", "total_mask_query_ct", "+", "total_boost_query_ct", ")", "\n", "#print(\"Final number of queries:\", mask_query_count + boost_query_count)", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.None.main.attack_GTSRB": [[139, 153], ["GTSRB.GTSRBNet.GTSRBNet", "torch.cuda.is_available", "torch.nn.DataParallel.eval", "torch.device", "torch.load", "model.load_state_dict", "main.attack_network", "torch.nn.DataParallel.cuda", "torch.nn.DataParallel", "torch.cuda.is_available", "torch.cuda.is_available"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.whitebox.whitebox_attack.eval", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.main_patchguard.attack_network"], ["", "def", "attack_GTSRB", "(", "img_v", ",", "img_t", ",", "mask", ",", "lbl_v", ",", "lbl_t", ",", "pt_file", ",", "scorefile", ",", "heatmap", ",", "coarseerror", ",", "reduceerror", ",", "beta", "=", "1", ",", "num_xforms_mask", "=", "100", ",", "num_xforms_boost", "=", "1000", ",", "net_size", "=", "32", ",", "noise_size", "=", "32", ",", "joint_iters", "=", "1", ")", ":", "\n", "    ", "net", "=", "GTSRBNet", "(", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "net", ".", "cuda", "(", ")", "\n", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "net", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "\n", "", "net", ".", "eval", "(", ")", "\n", "\n", "model", "=", "net", ".", "module", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "net", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "'GTSRB/checkpoint_us.tar'", ",", "map_location", "=", "device", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model_state_dict'", "]", ")", "\n", "\n", "attack_network", "(", "model", ",", "img_v", ",", "img_t", ",", "mask", ",", "lbl_v", ",", "lbl_t", ",", "pt_file", ",", "scorefile", ",", "heatmap", ",", "coarseerror", ",", "reduceerror", ",", "beta", ",", "num_xforms_mask", ",", "num_xforms_boost", ",", "net_size", ",", "noise_size", ",", "model_type", "=", "'GTSRB'", ",", "joint_iters", "=", "joint_iters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.None.main.attack_CIFAR": [[155, 169], ["cifar.wideresnet.WideResNet", "torch.cuda.is_available", "torch.nn.DataParallel.eval", "torch.device", "torch.load", "model.load_state_dict", "main.attack_network", "torch.nn.DataParallel.cuda", "torch.nn.DataParallel", "torch.cuda.is_available", "torch.cuda.is_available"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.whitebox.whitebox_attack.eval", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.main_patchguard.attack_network"], ["", "def", "attack_CIFAR", "(", "img_v", ",", "img_t", ",", "mask", ",", "lbl_v", ",", "lbl_t", ",", "pt_file", ",", "scorefile", ",", "heatmap", ",", "coarseerror", ",", "reduceerror", ",", "beta", "=", "1", ",", "num_xforms_mask", "=", "100", ",", "num_xforms_boost", "=", "1000", ",", "net_size", "=", "32", ",", "noise_size", "=", "32", ",", "joint_iters", "=", "1", ",", "image_id", "=", "''", ")", ":", "\n", "    ", "net", "=", "WideResNet", "(", "num_classes", "=", "10", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "net", ".", "cuda", "(", ")", "\n", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "net", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "\n", "", "net", ".", "eval", "(", ")", "\n", "\n", "model", "=", "net", ".", "module", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "net", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "'cifar/epoch-39.ckpt'", ",", "map_location", "=", "device", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "\n", "attack_network", "(", "model", ",", "img_v", ",", "img_t", ",", "mask", ",", "lbl_v", ",", "lbl_t", ",", "pt_file", ",", "scorefile", ",", "heatmap", ",", "coarseerror", ",", "reduceerror", ",", "beta", ",", "num_xforms_mask", ",", "num_xforms_boost", ",", "net_size", ",", "noise_size", ",", "model_type", "=", "'CIFAR'", ",", "joint_iters", "=", "joint_iters", ",", "image_id", "=", "image_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.None.coarse_reduction.get_coarse_reduced_mask": [[12, 73], ["img_v.permute().numpy", "cv2.resize", "torch.from_numpy().permute", "transforms.get_transformed_images", "utils.run_predictions", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "img_t.permute().numpy", "cv2.resize", "torch.from_numpy().permute", "coarse_reduction.perform_linear_coarse_reduction", "coarse_reduction.perform_binary_coarse_reduction", "img_v.permute", "torch.from_numpy", "start_mask.sum", "start_mask.size", "start_mask.size", "img_t.size", "torch.from_numpy().permute.size", "img_t.size", "torch.from_numpy().permute.size", "img_t.permute", "torch.from_numpy", "best_mask.sum", "start_mask.size", "start_mask.size", "best_mask.sum"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.get_transformed_images", "home.repos.pwc.inspect_result.ryan-feng_graphite.None.utils.run_predictions", "home.repos.pwc.inspect_result.ryan-feng_graphite.None.coarse_reduction.perform_linear_coarse_reduction", "home.repos.pwc.inspect_result.ryan-feng_graphite.None.coarse_reduction.perform_binary_coarse_reduction"], ["def", "get_coarse_reduced_mask", "(", "start_mask", ",", "object_size", ",", "patches", ",", "indices", ",", "img_v", ",", "img_t", ",", "lbl_v", ",", "lbl_t", ",", "model", ",", "xforms", ",", "pt_file", ",", "net_size", ",", "num_xforms", "=", "1000", ",", "patch_size", "=", "4", ",", "err_threshold", "=", "0.5", ",", "coarse_red_mode", "=", "'binary'", ",", "direction", "=", "\"forward\"", ",", "args", "=", "None", ",", "debug", "=", "False", ",", "model_type", "=", "'GTSRB'", ",", "init_theta", "=", "None", ")", ":", "\n", "    ", "if", "args", "is", "not", "None", ":", "\n", "        ", "coarse_red_mode", "=", "args", ".", "coarse_mode", "# binary or linear", "\n", "\n", "", "coarse_reduction_query_ct", "=", "0", "\n", "\n", "# Format images", "\n", "img_v_np", "=", "img_v", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "img_v_np", "=", "cv2", ".", "resize", "(", "img_v_np", ",", "(", "start_mask", ".", "size", "(", ")", "[", "2", "]", ",", "start_mask", ".", "size", "(", ")", "[", "1", "]", ")", ")", "\n", "img_v_small", "=", "torch", ".", "from_numpy", "(", "img_v_np", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "if", "img_t", ".", "size", "(", ")", "[", "1", "]", "!=", "img_v_small", ".", "size", "(", ")", "[", "1", "]", "or", "img_t", ".", "size", "(", ")", "[", "2", "]", "!=", "img_v_small", ".", "size", "(", ")", "[", "2", "]", ":", "\n", "        ", "img_t_np", "=", "img_t", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "img_t_np", "=", "cv2", ".", "resize", "(", "img_t_np", ",", "(", "start_mask", ".", "size", "(", ")", "[", "2", "]", ",", "start_mask", ".", "size", "(", ")", "[", "1", "]", ")", ")", "\n", "img_t_small", "=", "torch", ".", "from_numpy", "(", "img_t_np", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "", "else", ":", "\n", "        ", "img_t_small", "=", "img_t", "\n", "\n", "# get initial transform_robustness", "\n", "", "if", "init_theta", "is", "None", ":", "\n", "        ", "theta", "=", "(", "img_t_small", "-", "img_v_small", ")", "*", "start_mask", "\n", "", "else", ":", "\n", "        ", "theta", "=", "init_theta", "*", "start_mask", "\n", "", "xform_imgs", "=", "get_transformed_images", "(", "img_v", ",", "start_mask", ",", "xforms", ",", "1.0", ",", "theta", ",", "pt_file", ",", "net_size", "=", "net_size", ",", "model_type", "=", "model_type", ")", "\n", "success_rate", ",", "query_ct", "=", "run_predictions", "(", "model", ",", "xform_imgs", ",", "lbl_v", ",", "lbl_t", ")", "\n", "coarse_reduction_query_ct", "+=", "query_ct", "\n", "\n", "print", "(", "\"init_tr\"", ",", "1", "-", "success_rate", ")", "\n", "print", "(", "\"init bits\"", ",", "start_mask", ".", "sum", "(", ")", "/", "3", ")", "\n", "\n", "if", "\"binary\"", "not", "in", "coarse_red_mode", ":", "\n", "# linear-based coarse_reduction of the start mask", "\n", "        ", "pivot", ",", "best_mask", ",", "best_tr", ",", "query_ct", "=", "perform_linear_coarse_reduction", "(", "patches", ",", "err_threshold", ",", "lbl_v", ",", "lbl_t", ",", "img_t_small", ",", "img_v_small", ",", "img_v", ",", "model", ",", "\n", "xforms", ",", "start_mask", ",", "pt_file", ",", "net_size", ",", "model_type", "=", "model_type", ",", "init_theta", "=", "init_theta", ")", "\n", "\n", "", "else", ":", "\n", "# binary-search-based coarse_reduction of the start mask", "\n", "        ", "pivot", ",", "best_mask", ",", "best_tr", ",", "query_ct", "=", "perform_binary_coarse_reduction", "(", "patches", ",", "err_threshold", ",", "lbl_v", ",", "lbl_t", ",", "img_t_small", ",", "img_v_small", ",", "img_v", ",", "model", ",", "\n", "xforms", ",", "start_mask", ",", "pt_file", ",", "net_size", ",", "direction", ",", "model_type", "=", "model_type", ",", "init_theta", "=", "init_theta", ")", "\n", "\n", "", "patches", "=", "patches", "[", ":", "]", "# reduce will examine all patches", "\n", "indices", "=", "indices", "[", ":", "]", "\n", "\n", "coarse_reduction_query_ct", "+=", "query_ct", "\n", "\n", "print", "(", "\"mask coarse_reduction completed...\"", ")", "\n", "print", "(", "'-'", "*", "32", ")", "\n", "print", "(", "\"COARSE_REDUCTION: mode \"", ",", "coarse_red_mode", ")", "\n", "print", "(", "\"COARSE_REDUCTION: direction\"", ",", "direction", ")", "\n", "print", "(", "\"COARSE_REDUCTION: num. patches incorporated\"", ",", "pivot", ")", "\n", "print", "(", "\"COARSE_REDUCTION: final bits in mask\"", ",", "(", "(", "best_mask", ".", "sum", "(", ")", "/", "3", ")", ".", "item", "(", ")", ")", ")", "\n", "print", "(", "\"COARSE_REDUCTION: final tr of mask\"", ",", "best_tr", ")", "\n", "print", "(", "\"COARSE_REDUCTION: final area ratio\"", ",", "(", "(", "best_mask", ".", "sum", "(", ")", "/", "3", ")", "/", "object_size", ")", ")", "\n", "print", "(", "\"COARSE_REDUCTION: queries used\"", ",", "coarse_reduction_query_ct", ")", "\n", "print", "(", "'-'", "*", "32", ")", "\n", "\n", "best_score", "=", "9999999", "# large value, unused", "\n", "\n", "return", "best_score", ",", "best_tr", ",", "best_mask", ",", "coarse_reduction_query_ct", ",", "pivot", ",", "patches", ",", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.None.coarse_reduction.perform_linear_coarse_reduction": [[75, 105], ["time.time", "range", "torch.zeros", "range", "new_patches.copy", "start_mask.size", "len", "torch.where", "transforms.get_transformed_images", "utils.run_predictions", "print", "torch.ones", "torch.zeros", "best_mask.sum", "print", "new_patches.append", "torch.zeros", "best_mask.size", "best_mask.size", "nbits.item", "time.time", "best_mask.size"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.get_transformed_images", "home.repos.pwc.inspect_result.ryan-feng_graphite.None.utils.run_predictions"], ["", "def", "perform_linear_coarse_reduction", "(", "patches", ",", "err_threshold", ",", "lbl_v", ",", "lbl_t", ",", "img_t_small", ",", "img_v_small", ",", "img_v", ",", "model", ",", "xforms", ",", "start_mask", ",", "pt_file", ",", "net_size", ",", "model_type", "=", "'GTSRB'", ",", "init_theta", "=", "None", ")", ":", "\n", "    ", "linstart", "=", "time", ".", "time", "(", ")", "\n", "best_mask", ",", "best_tr", "=", "torch", ".", "zeros", "(", "start_mask", ".", "size", "(", ")", ")", ",", "0", "\n", "tot_queries", "=", "0", "\n", "for", "i", "in", "range", "(", "1", ")", ":", "\n", "        ", "new_patches", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "patches", ")", ")", ":", "\n", "            ", "next_patch", "=", "patches", "[", "j", "]", "\n", "next_mask", "=", "best_mask", "+", "(", "torch", ".", "zeros", "(", "best_mask", ".", "size", "(", ")", ")", "+", "next_patch", ")", "\n", "next_mask", "=", "torch", ".", "where", "(", "next_mask", ">", "0", ",", "torch", ".", "ones", "(", "best_mask", ".", "size", "(", ")", ")", ",", "torch", ".", "zeros", "(", "best_mask", ".", "size", "(", ")", ")", ")", "\n", "if", "(", "next_mask", "-", "best_mask", ")", ".", "sum", "(", ")", "==", "0", ":", "continue", "\n", "if", "init_theta", "is", "None", ":", "\n", "                ", "theta", "=", "(", "img_t_small", "-", "img_v_small", ")", "*", "next_mask", "\n", "", "else", ":", "\n", "                ", "theta", "=", "init_theta", "*", "next_mask", "\n", "", "xform_imgs", "=", "get_transformed_images", "(", "img_v", ",", "next_mask", ",", "xforms", ",", "1.0", ",", "theta", ",", "pt_file", ",", "net_size", "=", "net_size", ",", "model_type", "=", "model_type", ")", "\n", "success_rate", ",", "query_ct", "=", "run_predictions", "(", "model", ",", "xform_imgs", ",", "lbl_v", ",", "lbl_t", ")", "\n", "tot_queries", "+=", "query_ct", "\n", "best_mask", "=", "next_mask", "\n", "best_tr", "=", "1", "-", "success_rate", "\n", "nbits", "=", "(", "best_mask", ".", "sum", "(", ")", "/", "3", ")", "\n", "print", "(", "\"Coarse Reduction: tr: %.2f\"", "%", "(", "1", "-", "success_rate", ")", ",", "\"bits: %d\"", "%", "nbits", ".", "item", "(", ")", ",", "'time'", ",", "time", ".", "time", "(", ")", "-", "linstart", ")", "\n", "if", "best_tr", ">=", "(", "1", "-", "err_threshold", ")", ":", "\n", "                ", "print", "(", "\"COARSE_REDUCTION: TR GOAL REACHED\"", ",", "(", "1", "-", "success_rate", ")", ")", "\n", "break", "\n", "", "else", ":", "\n", "                ", "new_patches", ".", "append", "(", "next_patch", ")", "\n", "", "", "patches", "=", "new_patches", ".", "copy", "(", ")", "\n", "pivot", "=", "j", "\n", "", "return", "pivot", ",", "best_mask", ",", "best_tr", ",", "tot_queries", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.None.coarse_reduction.perform_binary_coarse_reduction": [[107, 166], ["time.time", "list", "len", "coarse_reduction.perform_binary_coarse_reduction.evaluate_transform_robustness_at_pivot"], "function", ["None"], ["", "def", "perform_binary_coarse_reduction", "(", "patches", ",", "err_threshold", ",", "lbl_v", ",", "lbl_t", ",", "img_t_small", ",", "img_v_small", ",", "img_v", ",", "model", ",", "\n", "xforms", ",", "start_mask", ",", "pt_file", ",", "net_size", ",", "direction", "=", "\"forward\"", ",", "model_type", "=", "'GTSRB'", ",", "init_theta", "=", "None", ")", ":", "\n", "    ", "tot_queries", "=", "0", "\n", "patch_cache", "=", "{", "}", "\n", "binsearch_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "def", "evaluate_transform_robustness_at_pivot", "(", "pivot", ",", "get_mask", "=", "False", ")", ":", "\n", "        ", "\"\"\" binary search plug-in that evaluates whether functional condition is met at specified pivot \"\"\"", "\n", "nonlocal", "tot_queries", "\n", "best_mask", "=", "get_accumulated_mask_up_to_pivot", "(", "pivot", ",", "start_mask", ",", "patches", ",", "patch_cache", ")", "\n", "\n", "if", "init_theta", "is", "None", ":", "\n", "            ", "theta", "=", "(", "img_t_small", "-", "img_v_small", ")", "*", "best_mask", "\n", "", "else", ":", "\n", "            ", "theta", "=", "init_theta", "*", "best_mask", "\n", "", "xform_imgs", "=", "get_transformed_images", "(", "img_v", ",", "best_mask", ",", "xforms", ",", "1.0", ",", "theta", ",", "pt_file", ",", "net_size", "=", "net_size", ",", "model_type", "=", "model_type", ")", "\n", "success_rate", ",", "query_ct", "=", "run_predictions", "(", "model", ",", "xform_imgs", ",", "lbl_v", ",", "lbl_t", ")", "\n", "\n", "tot_queries", "+=", "query_ct", "\n", "return", "(", "1", "-", "success_rate", ",", "best_mask", ")", "if", "get_mask", "else", "1", "-", "success_rate", "\n", "\n", "", "def", "get_accumulated_mask_up_to_pivot", "(", "pivot", ",", "start_mask", ",", "patches", ",", "patch_cache", "=", "{", "}", ")", ":", "\n", "        ", "best_mask", "=", "torch", ".", "zeros", "(", "start_mask", ".", "size", "(", ")", ")", "\n", "ordering", "=", "patches", "[", ":", "pivot", "]", "\n", "for", "next_patch", "in", "ordering", ":", "\n", "            ", "next_mask", "=", "best_mask", "+", "(", "torch", ".", "zeros", "(", "best_mask", ".", "size", "(", ")", ")", "+", "next_patch", ")", "\n", "next_mask", "=", "torch", ".", "where", "(", "next_mask", ">", "0", ",", "torch", ".", "ones", "(", "best_mask", ".", "size", "(", ")", ")", ",", "torch", ".", "zeros", "(", "best_mask", ".", "size", "(", ")", ")", ")", "\n", "best_mask", "=", "next_mask", "\n", "", "patch_cache", "[", "pivot", "]", "=", "best_mask", ".", "clone", "(", ")", "\n", "return", "best_mask", ".", "clone", "(", ")", "\n", "\n", "# binary search leftmost pivot value for which tr exceeeds specificed threshold if one exists", "\n", "", "nums", "=", "list", "(", "range", "(", "len", "(", "patches", ")", ")", ")", "\n", "pivot", "=", "-", "1", "\n", "threshold", "=", "1", "-", "err_threshold", "\n", "n", "=", "len", "(", "nums", ")", "\n", "mi", "=", "-", "1", "\n", "if", "n", "==", "1", ":", "mi", "=", "0", "\n", "\n", "if", "mi", "<", "0", ":", "\n", "        ", "lo", ",", "hi", "=", "0", ",", "n", "-", "1", "\n", "while", "lo", "<=", "hi", ":", "\n", "            ", "mi", "=", "lo", "+", "(", "hi", "-", "lo", ")", "//", "2", "\n", "score", "=", "evaluate_transform_robustness_at_pivot", "(", "mi", ")", "\n", "if", "score", ">=", "threshold", ":", "\n", "                ", "if", "mi", ">", "0", ":", "\n", "                    ", "lo", ",", "mi", ",", "hi", "=", "lo", ",", "mi", ",", "mi", "-", "1", "\n", "continue", "\n", "", "else", ":", "\n", "                    ", "break", "\n", "", "", "else", ":", "# score < threshold:", "\n", "                ", "lo", ",", "mi", ",", "hi", "=", "mi", "+", "1", ",", "mi", "+", "1", ",", "hi", "\n", "\n", "", "", "", "pivot", "=", "mi", "\n", "assert", "0", "<=", "pivot", "<=", "n", "\n", "\n", "best_tr", ",", "best_mask", "=", "evaluate_transform_robustness_at_pivot", "(", "pivot", ",", "get_mask", "=", "True", ")", "\n", "\n", "return", "pivot", ",", "best_mask", ",", "best_tr", ",", "tot_queries", "\n", "", ""]], "home.repos.pwc.inspect_result.ryan-feng_graphite.None.generate_mask.generate_mask": [[20, 146], ["scorefile.strip", "importlib.invalidate_caches", "importlib.import_module", "parsearguments.getarguments", "print", "transforms.get_transform_params", "time.time", "torch.ones", "print", "parsearguments.getarguments", "print", "print", "print", "print", "print", "print", "print", "print", "print", "transforms.add_noise", "torch.ones", "mask.sum", "range", "print", "generate_mask.survey_heatmap", "numpy.asarray", "np.asarray.argsort", "print", "coarse_reduction.get_coarse_reduced_mask", "generate_mask.get_fine_reduced_mask", "best_mask.sum", "coarse_red_nbits.item", "reducer_nbits.item", "reducer_nbits.item", "mask.size", "range", "len", "open", "pickle.load", "best_mask.sum", "best_mask.sum", "generate_mask.get_fine_reduced_mask", "torch.zeros", "open", "pickle.dump", "best_mask.sum", "mask.size", "mask.size", "torch.sum", "patches.append", "indices.append", "mask.size", "min", "min", "mask.size", "mask.size"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.None.parsearguments.getarguments", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.get_transform_params", "home.repos.pwc.inspect_result.ryan-feng_graphite.None.parsearguments.getarguments", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.add_noise", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_generate_mask.survey_heatmap", "home.repos.pwc.inspect_result.ryan-feng_graphite.None.coarse_reduction.get_coarse_reduced_mask", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_generate_mask.get_fine_reduced_mask", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_generate_mask.get_fine_reduced_mask"], ["def", "generate_mask", "(", "model", ",", "img_v_small", ",", "img_v", ",", "lbl_v", ",", "mask", ",", "img_t_small", ",", "img_t", ",", "lbl_t", ",", "pt_file", ",", "scorefile", ",", "HEATMAP_MODE", ",", "COARSE_ACCEPT_THRESHOLD", ",", "FINE_REJECT_THRESHOLD", ",", "\n", "num_xforms", "=", "100", ",", "net_size", "=", "32", ",", "model_type", "=", "'GTSRB'", ",", "patch_size", "=", "4", ",", "stride_factor", "=", "4", ",", "heatmap_file", "=", "None", ",", "heatmap_out_path", "=", "None", ",", "max_mask_size", "=", "-", "1", ",", "init_theta", "=", "None", ")", ":", "\n", "    ", "\"\"\" Attack the original image and return adversarial example\n        model: (pytorch model)\n        (x0, y0): original image\n        mask must be all 0's and 1's and of the resolution that we want to generate noise in\n    \"\"\"", "\n", "\n", "# Read in arguments", "\n", "global", "scoremod", "\n", "\n", "# Read in arguments continued", "\n", "modulename", "=", "scorefile", ".", "strip", "(", "'.py'", ")", "\n", "importlib", ".", "invalidate_caches", "(", ")", "\n", "scoremod", "=", "importlib", ".", "import_module", "(", "modulename", ")", "\n", "args", "=", "parsearguments", ".", "getarguments", "(", ")", "\n", "\n", "\n", "\n", "print", "(", "\"Calculating Heatmap...\"", ")", "\n", "########################### Stage 1: HEATMAP: Collect all the valid patches and order by computed heatmap ################################", "\n", "xforms", "=", "get_transform_params", "(", "num_xforms", ",", "model_type", ")", "\n", "query_count", "=", "0", "\n", "timestart", "=", "time", ".", "time", "(", ")", "\n", "not_mask", "=", "torch", ".", "ones", "(", "mask", ".", "size", "(", ")", ")", "-", "mask", "\n", "object_size", "=", "mask", ".", "sum", "(", ")", "/", "3", "\n", "\n", "patch", "=", "torch", ".", "ones", "(", "(", "3", ",", "patch_size", ",", "patch_size", ")", ")", "\n", "patches", "=", "[", "]", "\n", "indices", "=", "[", "]", "\n", "\n", "if", "heatmap_file", "is", "None", ":", "\n", "# collect all valid patches", "\n", "        ", "for", "i", "in", "range", "(", "0", ",", "mask", ".", "size", "(", ")", "[", "1", "]", "-", "patch_size", ",", "patch_size", "//", "stride_factor", ")", ":", "# 4", "\n", "            ", "for", "j", "in", "range", "(", "0", ",", "mask", ".", "size", "(", ")", "[", "2", "]", "-", "patch_size", ",", "patch_size", "//", "stride_factor", ")", ":", "# 4", "\n", "                ", "new_mask", "=", "torch", ".", "zeros", "(", "mask", ".", "size", "(", ")", ")", "\n", "new_mask", "[", ":", ",", "i", ":", "min", "(", "i", "+", "patch_size", ",", "mask", ".", "size", "(", ")", "[", "1", "]", ")", ",", "j", ":", "min", "(", "j", "+", "patch_size", ",", "mask", ".", "size", "(", ")", "[", "2", "]", ")", "]", "=", "patch", "\n", "new_mask", "=", "new_mask", "*", "mask", "\n", "if", "torch", ".", "sum", "(", "new_mask", ")", ">", "0", ":", "\n", "                    ", "patches", ".", "append", "(", "new_mask", ")", "\n", "indices", ".", "append", "(", "(", "i", ",", "j", ")", ")", "\n", "", "", "", "print", "(", "\"num patches: \"", ",", "len", "(", "patches", ")", ")", "\n", "\n", "# compute heatmap and order", "\n", "tr_scores", ",", "heatmap_query_ct", "=", "survey_heatmap", "(", "mask", ",", "patches", ",", "indices", ",", "img_v", ",", "img_t", ",", "img_v_small", ",", "img_t_small", ",", "lbl_t", ",", "lbl_v", ",", "model", ",", "xforms", ",", "pt_file", ",", "net_size", ",", "HEATMAP_MODE", ",", "plot", "=", "True", ",", "model_type", "=", "model_type", ",", "init_theta", "=", "init_theta", ")", "\n", "query_count", "+=", "heatmap_query_ct", "\n", "\n", "tr_scores_np", "=", "np", ".", "asarray", "(", "tr_scores", ")", "\n", "order", "=", "tr_scores_np", ".", "argsort", "(", ")", "\n", "patches", "=", "[", "patches", "[", "ind", "]", "for", "ind", "in", "order", "]", "\n", "indices", "=", "[", "indices", "[", "ind", "]", "for", "ind", "in", "order", "]", "\n", "\n", "if", "heatmap_out_path", "is", "not", "None", ":", "\n", "            ", "with", "open", "(", "heatmap_out_path", ",", "'wb'", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "{", "\n", "'heatmap_query_ct'", ":", "heatmap_query_ct", ",", "\n", "'patches'", ":", "patches", ",", "\n", "'indices'", ":", "indices", ",", "\n", "'order'", ":", "order", ",", "\n", "}", ",", "f", ")", "\n", "\n", "", "", "", "else", ":", "\n", "        ", "with", "open", "(", "heatmap_file", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "heatmap", "=", "pickle", ".", "load", "(", "f", ")", "\n", "heatmap_query_ct", "=", "heatmap", "[", "'heatmap_query_ct'", "]", "\n", "patches", "=", "heatmap", "[", "'patches'", "]", "\n", "indices", "=", "heatmap", "[", "'indices'", "]", "\n", "order", "=", "heatmap", "[", "'order'", "]", "\n", "", "query_count", "+=", "heatmap_query_ct", "\n", "patches", "=", "patches", "\n", "indices", "=", "indices", "\n", "order", "=", "order", "\n", "\n", "\n", "", "print", "(", "\"Heatmap completed.\"", ")", "\n", "\n", "\n", "########################### Stage 2: COARSE REDUCTION: coarsely remove patches until the high surivability threshold is reached ################################", "\n", "args", "=", "parsearguments", ".", "getarguments", "(", ")", ";", "\n", "coarse_red_mode", "=", "args", ".", "coarse_mode", "# binary or linear", "\n", "if", "coarse_red_mode", "!=", "'none'", ":", "\n", "        ", "direction", "=", "\"forward\"", "\n", "print", "(", "\"Coarse reduction start mask using\"", ",", "coarse_red_mode", ",", "direction", ")", "\n", "\n", "best_score", ",", "best_tr", ",", "best_mask", ",", "coarse_reduction_query_ct", ",", "pivot", ",", "patches", ",", "indices", "=", "get_coarse_reduced_mask", "(", "mask", ",", "object_size", ",", "patches", ",", "indices", ",", "img_v", ",", "img_t", ",", "lbl_v", ",", "lbl_t", ",", "model", ",", "xforms", ",", "pt_file", ",", "net_size", ",", "\n", "num_xforms", "=", "num_xforms", ",", "patch_size", "=", "patch_size", ",", "err_threshold", "=", "COARSE_ACCEPT_THRESHOLD", ",", "\n", "coarse_red_mode", "=", "coarse_red_mode", ",", "direction", "=", "direction", ",", "args", "=", "args", ",", "model_type", "=", "model_type", ",", "init_theta", "=", "init_theta", ")", "\n", "coarse_red_nbits", "=", "best_mask", ".", "sum", "(", ")", "/", "3", "\n", "query_count", "+=", "coarse_reduction_query_ct", "\n", "\n", "", "else", ":", "\n", "        ", "best_mask", "=", "mask", "\n", "coarse_red_nbits", "=", "best_mask", ".", "sum", "(", ")", "/", "3", "\n", "\n", "########################### Stage 3: FINE REDUCTION: iterate over patches and greedily remove if the mask score improves ################################", "\n", "", "print", "(", "\"Starting fine grained reduction\"", ")", "\n", "if", "max_mask_size", ">", "0", ":", "\n", "        ", "lbd", "=", "5", "\n", "reduction_query_ct", "=", "0", "\n", "while", "best_mask", ".", "sum", "(", ")", "/", "3", ">", "max_mask_size", ":", "\n", "            ", "patches_copy", "=", "[", "x", "for", "x", "in", "patches", "]", "\n", "indices_copy", "=", "[", "x", "for", "x", "in", "indices", "]", "\n", "best_score", ",", "best_tr", ",", "best_mask", ",", "this_red_query_ct", "=", "get_fine_reduced_mask", "(", "best_mask", ",", "object_size", ",", "patches_copy", ",", "indices_copy", ",", "img_v", ",", "img_t_small", ",", "lbl_v", ",", "lbl_t", ",", "model", ",", "xforms", ",", "pt_file", ",", "net_size", ",", "err_threshold", "=", "FINE_REJECT_THRESHOLD", ",", "HEATMAP_MODE", "=", "HEATMAP_MODE", ",", "scoremod", "=", "scoremod", ",", "lbd", "=", "lbd", ",", "max_mask_size", "=", "max_mask_size", ",", "model_type", "=", "model_type", ",", "init_theta", "=", "init_theta", ")", "\n", "lbd", "+=", "5", "\n", "reduction_query_ct", "+=", "this_red_query_ct", "\n", "", "", "else", ":", "\n", "        ", "best_score", ",", "best_tr", ",", "best_mask", ",", "reduction_query_ct", "=", "get_fine_reduced_mask", "(", "best_mask", ",", "object_size", ",", "patches", ",", "indices", ",", "img_v", ",", "img_t_small", ",", "lbl_v", ",", "lbl_t", ",", "model", ",", "xforms", ",", "pt_file", ",", "net_size", ",", "err_threshold", "=", "FINE_REJECT_THRESHOLD", ",", "HEATMAP_MODE", "=", "HEATMAP_MODE", ",", "scoremod", "=", "scoremod", ",", "model_type", "=", "model_type", ",", "init_theta", "=", "init_theta", ")", "\n", "", "reducer_nbits", "=", "best_mask", ".", "sum", "(", ")", "/", "3", "\n", "query_count", "+=", "reduction_query_ct", "\n", "\n", "\n", "############### Print results, save out and returned initialization point found ##############3", "\n", "print", "(", "'-'", "*", "32", ")", "\n", "print", "(", "\"End of Mask Generation summary:\"", ")", "\n", "print", "(", "\"queries\"", ",", "reduction_query_ct", ")", "\n", "print", "(", "\"final (coarse_red to reducer) bits\"", ",", "coarse_red_nbits", ".", "item", "(", ")", ",", "reducer_nbits", ".", "item", "(", ")", ")", "\n", "print", "(", "\"final tr\"", ",", "best_tr", ")", "\n", "print", "(", "\"final area ratio\"", ",", "(", "reducer_nbits", "/", "object_size", ")", ".", "item", "(", ")", ")", "\n", "print", "(", "\"queries used\"", ",", "query_count", ")", "\n", "print", "(", "'-'", "*", "32", ")", "\n", "\n", "best_theta", "=", "(", "img_t_small", "-", "img_v_small", ")", "*", "best_mask", "\n", "attacked", "=", "add_noise", "(", "img_v", ",", "best_mask", ",", "1.0", ",", "best_theta", ")", "\n", "\n", "return", "attacked", ",", "query_count", ",", "best_mask", ",", "reducer_nbits", ".", "item", "(", ")", ",", "best_tr", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.None.generate_mask.get_heatmap": [[148, 179], ["img_v.permute().numpy", "cv2.resize", "torch.from_numpy().permute", "range", "start_mask.sum", "torch.from_numpy().permute.permute().numpy", "cv2.resize", "torch.from_numpy().permute", "len", "transforms.get_transformed_images", "utils.run_predictions", "tr_scores.append", "img_v.permute", "torch.from_numpy", "start_mask.size", "start_mask.size", "torch.from_numpy().permute.size", "start_mask.size", "torch.from_numpy().permute.size", "start_mask.size", "torch.from_numpy().permute.permute", "torch.from_numpy", "torch.ones", "start_mask.size", "start_mask.size", "start_mask.size"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.get_transformed_images", "home.repos.pwc.inspect_result.ryan-feng_graphite.None.utils.run_predictions"], ["", "def", "get_heatmap", "(", "start_mask", ",", "patches", ",", "indices", ",", "img_v", ",", "img_t", ",", "lbl_v", ",", "lbl_t", ",", "model", ",", "xforms", ",", "pt_file", ",", "net_size", ",", "init_tr", "=", "0.5", ",", "plot", "=", "False", ",", "model_type", "=", "'GTSRB'", ",", "init_theta", "=", "None", ")", ":", "\n", "    ", "object_size", "=", "start_mask", ".", "sum", "(", ")", "/", "3", "\n", "\n", "# setup images", "\n", "img_v_np", "=", "img_v", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "img_v_np", "=", "cv2", ".", "resize", "(", "img_v_np", ",", "(", "start_mask", ".", "size", "(", ")", "[", "2", "]", ",", "start_mask", ".", "size", "(", ")", "[", "1", "]", ")", ")", "\n", "img_v_small", "=", "torch", ".", "from_numpy", "(", "img_v_np", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "if", "img_t", ".", "size", "(", ")", "[", "1", "]", "!=", "start_mask", ".", "size", "(", ")", "[", "1", "]", "or", "img_t", ".", "size", "(", ")", "[", "2", "]", "!=", "start_mask", ".", "size", "(", ")", "[", "2", "]", ":", "\n", "        ", "img_t_np", "=", "img_t", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "img_t_np", "=", "cv2", ".", "resize", "(", "img_t_np", ",", "(", "start_mask", ".", "size", "(", ")", "[", "2", "]", ",", "start_mask", ".", "size", "(", ")", "[", "1", "]", ")", ")", "\n", "img_t", "=", "torch", ".", "from_numpy", "(", "img_t_np", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "", "heatmap_query_ct", "=", "0", "\n", "\n", "tr_scores", "=", "[", "]", "\n", "\n", "# iterate over patches and compute transform_robustness without each individual patch", "\n", "for", "i", "in", "range", "(", "len", "(", "patches", ")", ")", ":", "\n", "        ", "patch", "=", "patches", "[", "i", "]", "\n", "next_mask", "=", "start_mask", "*", "(", "torch", ".", "ones", "(", "start_mask", ".", "size", "(", ")", ")", "-", "patch", ")", "\n", "if", "init_theta", "is", "None", ":", "\n", "            ", "theta", "=", "(", "img_t", "-", "img_v_small", ")", "*", "next_mask", "\n", "", "else", ":", "\n", "            ", "theta", "=", "init_theta", "*", "next_mask", "\n", "", "xform_imgs", "=", "get_transformed_images", "(", "img_v", ",", "next_mask", ",", "xforms", ",", "1.0", ",", "theta", ",", "pt_file", ",", "net_size", "=", "net_size", ",", "model_type", "=", "model_type", ")", "\n", "success_rate", ",", "query_ct", "=", "run_predictions", "(", "model", ",", "xform_imgs", ",", "lbl_v", ",", "lbl_t", ")", "\n", "heatmap_query_ct", "+=", "query_ct", "\n", "tr_scores", ".", "append", "(", "1", "-", "success_rate", ")", "\n", "\n", "", "return", "tr_scores", ",", "heatmap_query_ct", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.None.generate_mask.get_fine_reduced_mask": [[181, 251], ["img_v.permute().numpy", "cv2.resize", "torch.from_numpy().permute", "transforms.get_transformed_images", "utils.run_predictions", "print", "print", "scoremod.score_fn", "new_patches.copy", "torch.from_numpy().permute.permute().numpy", "cv2.resize", "torch.from_numpy().permute", "transforms.get_transformed_images", "utils.run_predictions", "scoremod.score_fn", "img_v.permute", "torch.from_numpy", "start_mask.sum", "new_patches.copy.pop", "indices.pop", "torch.max", "new_patches.append", "start_mask.size", "start_mask.size", "torch.from_numpy().permute.size", "torch.from_numpy().permute.size", "torch.from_numpy().permute.size", "torch.from_numpy().permute.size", "torch.from_numpy().permute.permute", "torch.from_numpy", "torch.ones", "best_mask.sum", "start_mask.size", "start_mask.size", "best_mask.size"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.get_transformed_images", "home.repos.pwc.inspect_result.ryan-feng_graphite.None.utils.run_predictions", "home.repos.pwc.inspect_result.ryan-feng_graphite.None.score.score_fn", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.get_transformed_images", "home.repos.pwc.inspect_result.ryan-feng_graphite.None.utils.run_predictions", "home.repos.pwc.inspect_result.ryan-feng_graphite.None.score.score_fn"], ["", "def", "get_fine_reduced_mask", "(", "start_mask", ",", "object_size", ",", "patches", ",", "indices", ",", "img_v", ",", "img_t", ",", "lbl_v", ",", "lbl_t", ",", "model", ",", "xforms", ",", "pt_file", ",", "net_size", ",", "err_threshold", "=", "0.75", ",", "HEATMAP_MODE", "=", "None", ",", "scoremod", "=", "None", ",", "lbd", "=", "5", ",", "max_mask_size", "=", "-", "1", ",", "model_type", "=", "'GTSRB'", ",", "init_theta", "=", "None", ")", ":", "\n", "# STAGE 3: Fine reduction", "\n", "    ", "reduction_query_ct", "=", "0", "\n", "\n", "# set up images", "\n", "img_v_np", "=", "img_v", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "img_v_np", "=", "cv2", ".", "resize", "(", "img_v_np", ",", "(", "start_mask", ".", "size", "(", ")", "[", "2", "]", ",", "start_mask", ".", "size", "(", ")", "[", "1", "]", ")", ")", "\n", "img_v_small", "=", "torch", ".", "from_numpy", "(", "img_v_np", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "if", "img_t", ".", "size", "(", ")", "[", "1", "]", "!=", "img_v_small", ".", "size", "(", ")", "[", "1", "]", "or", "img_t", ".", "size", "(", ")", "[", "2", "]", "!=", "img_v_small", ".", "size", "(", ")", "[", "2", "]", ":", "\n", "        ", "img_t_np", "=", "img_t", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "img_t_np", "=", "cv2", ".", "resize", "(", "img_t_np", ",", "(", "start_mask", ".", "size", "(", ")", "[", "2", "]", ",", "start_mask", ".", "size", "(", ")", "[", "1", "]", ")", ")", "\n", "img_t", "=", "torch", ".", "from_numpy", "(", "img_t_np", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "", "img_t_small", "=", "img_t", "\n", "\n", "if", "init_theta", "is", "None", ":", "\n", "        ", "theta", "=", "(", "img_t", "-", "img_v_small", ")", "*", "start_mask", "\n", "", "else", ":", "\n", "        ", "theta", "=", "init_theta", "*", "start_mask", "\n", "\n", "# get initial transform_robustness", "\n", "", "xform_imgs", "=", "get_transformed_images", "(", "img_v", ",", "start_mask", ",", "xforms", ",", "1.0", ",", "theta", ",", "pt_file", ",", "net_size", "=", "net_size", ",", "model_type", "=", "model_type", ")", "\n", "success_rate", ",", "query_ct", "=", "run_predictions", "(", "model", ",", "xform_imgs", ",", "lbl_v", ",", "lbl_t", ")", "\n", "reduction_query_ct", "+=", "query_ct", "\n", "\n", "init_tr", "=", "(", "1", "-", "success_rate", ")", "\n", "print", "(", "\"init_tr\"", ",", "init_tr", ")", "\n", "print", "(", "\"init bits\"", ",", "start_mask", ".", "sum", "(", ")", "/", "3", ")", "\n", "\n", "best_score", "=", "scoremod", ".", "score_fn", "(", "theta", "+", "img_v_small", ",", "start_mask", ",", "success_rate", ",", "object_size", ",", "None", ",", "threshold", "=", "err_threshold", ",", "lbd", "=", "lbd", ")", "\n", "best_tr", "=", "init_tr", "\n", "best_mask", "=", "start_mask", "\n", "last_heatmap_mask", "=", "best_mask", "\n", "\n", "new_patches", ",", "patches_examined", ",", "peek_cnt", ",", "zero_grad", "=", "[", "]", ",", "0", ",", "8", ",", "0", "\n", "j", "=", "0", "\n", "# iterate over patches, greedily remove if the score improves", "\n", "while", "patches", ":", "\n", "        ", "j", "=", "j", "+", "1", "\n", "\n", "# highest transform_robustness is now always at end, for pop()", "\n", "next_patch", ",", "next_indice", "=", "patches", ".", "pop", "(", ")", ",", "indices", ".", "pop", "(", ")", "\n", "if", "torch", ".", "max", "(", "next_patch", "*", "best_mask", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "patches_examined", "+=", "1", "\n", "next_mask", "=", "best_mask", "*", "(", "torch", ".", "ones", "(", "best_mask", ".", "size", "(", ")", ")", "-", "next_patch", ")", "\n", "if", "init_theta", "is", "None", ":", "\n", "            ", "theta", "=", "(", "img_t", "-", "img_v_small", ")", "*", "next_mask", "\n", "", "else", ":", "\n", "            ", "theta", "=", "init_theta", "*", "next_mask", "\n", "\n", "", "xform_imgs", "=", "get_transformed_images", "(", "img_v", ",", "next_mask", ",", "xforms", ",", "1.0", ",", "theta", ",", "pt_file", ",", "net_size", "=", "net_size", ",", "model_type", "=", "model_type", ")", "\n", "success_rate", ",", "query_ct", "=", "run_predictions", "(", "model", ",", "xform_imgs", ",", "lbl_v", ",", "lbl_t", ")", "\n", "reduction_query_ct", "+=", "query_ct", "\n", "\n", "score", "=", "scoremod", ".", "score_fn", "(", "theta", "+", "img_v_small", ",", "next_mask", ",", "success_rate", ",", "object_size", ",", "next_indice", ",", "\n", "best_score", "=", "best_score", ",", "threshold", "=", "err_threshold", ",", "lbd", "=", "lbd", ")", "\n", "if", "score", "<", "best_score", ":", "\n", "            ", "best_score", "=", "score", "\n", "best_mask", "=", "next_mask", "\n", "best_tr", "=", "1", "-", "success_rate", "\n", "nbits", "=", "best_mask", ".", "sum", "(", ")", "/", "3", "\n", "if", "max_mask_size", ">", "0", "and", "nbits", "<", "max_mask_size", ":", "\n", "                ", "break", "\n", "", "", "else", ":", "\n", "            ", "new_patches", ".", "append", "(", "next_patch", ")", "\n", "\n", "", "", "patches", "=", "new_patches", ".", "copy", "(", ")", "\n", "\n", "return", "best_score", ",", "best_tr", ",", "best_mask", ",", "reduction_query_ct", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.None.generate_mask.survey_heatmap": [[254, 268], ["random.random", "generate_mask.get_heatmap", "generate_mask.get_heatmap", "range", "len"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_generate_mask.get_heatmap", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_generate_mask.get_heatmap"], ["", "def", "survey_heatmap", "(", "mask", ",", "patches", ",", "indices", ",", "img_v", ",", "img_t", ",", "img_v_small", ",", "img_t_small", ",", "lbl_t", ",", "lbl_v", ",", "model", ",", "xforms", ",", "pt_file", ",", "net_size", ",", "HEATMAP_MODE", ",", "plot", "=", "False", ",", "model_type", "=", "'GTSRB'", ",", "init_theta", "=", "None", ")", ":", "\n", "    ", "''' encapsulation of the transform_robustness measurements heatmap to compute\n           random\n           target wrt victim or \n           victim wrt target '''", "\n", "if", "HEATMAP_MODE", "==", "'Random'", ":", "\n", "        ", "tr_scores", "=", "[", "random", ".", "random", "(", ")", "for", "i", "in", "range", "(", "len", "(", "patches", ")", ")", "]", "\n", "heatmap_query_ct", "=", "0", "\n", "", "elif", "HEATMAP_MODE", "==", "'Victim'", ":", "\n", "        ", "tr_scores", ",", "heatmap_query_ct", "=", "get_heatmap", "(", "mask", ",", "patches", ",", "indices", ",", "img_t", ",", "img_v_small", ",", "lbl_t", ",", "lbl_v", ",", "model", ",", "xforms", ",", "pt_file", ",", "net_size", ",", "plot", "=", "plot", ",", "model_type", "=", "model_type", ")", "\n", "", "else", ":", "## Target mode", "\n", "        ", "tr_scores", ",", "heatmap_query_ct", "=", "get_heatmap", "(", "mask", ",", "patches", ",", "indices", ",", "img_v", ",", "img_t_small", ",", "lbl_v", ",", "lbl_t", ",", "model", ",", "xforms", ",", "pt_file", ",", "net_size", ",", "plot", "=", "plot", ",", "model_type", "=", "model_type", ",", "init_theta", "=", "init_theta", ")", "\n", "\n", "", "return", "tr_scores", ",", "heatmap_query_ct", "\n", "", ""]], "home.repos.pwc.inspect_result.ryan-feng_graphite.None.score_border.score_fn": [[5, 10], ["mask.sum"], "function", ["None"], ["def", "score_fn", "(", "theta", ",", "mask", ",", "tr_err", ",", "object_size", ",", "coord", "=", "None", ",", "threshold", "=", "0.75", ",", "*", "args", ",", "**", "kargs", ")", ":", "\n", "    ", "if", "tr_err", ">", "threshold", ":", "\n", "        ", "return", "10000000", "\n", "\n", "", "return", "25", "*", "mask", ".", "sum", "(", ")", "/", "3", "/", "(", "object_size", ")", "+", "tr_err", "\n", "", ""]], "home.repos.pwc.inspect_result.ryan-feng_graphite.None.score.score_fn": [[8, 13], ["mask.sum"], "function", ["None"], ["def", "score_fn", "(", "theta", ",", "mask", ",", "tr_err", ",", "object_size", ",", "coord", "=", "None", ",", "threshold", "=", "0.75", ",", "lbd", "=", "5", ",", "*", "args", ",", "**", "kargs", ")", ":", "\n", "    ", "if", "tr_err", ">", "threshold", ":", "\n", "        ", "return", "10000000", "\n", "\n", "", "return", "lbd", "*", "mask", ".", "sum", "(", ")", "/", "3", "/", "(", "object_size", ")", "+", "tr_err", "\n", "", ""]], "home.repos.pwc.inspect_result.ryan-feng_graphite.None.perspective_transform.get_perspective_transform": [[8, 52], ["math.radians", "numpy.array", "numpy.array", "numpy.matmul", "numpy.array", "perspective_transform.get_offset_and_crop_size", "numpy.array", "numpy.matmul", "int", "int", "cv2.warpPerspective", "kornia.geometry.transform.warp_perspective", "math.sin", "math.cos", "round", "round", "torch.from_numpy().float().to().unsqueeze", "math.cos", "math.sin", "math.cos", "math.sin", "torch.from_numpy().float().to", "torch.from_numpy().float", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.None.perspective_transform.get_offset_and_crop_size"], ["def", "get_perspective_transform", "(", "img", ",", "angle", ",", "w", ",", "h", ",", "f", ",", "d", ",", "crop_percent", ",", "crop_off_x", ",", "crop_off_y", ",", "pt_file", "=", "'inputs/GTSRB/Points/14.csv'", ",", "whitebox", "=", "False", ")", ":", "\n", "# img in numpy / cv2 form", "\n", "\n", "    ", "angle", "=", "math", ".", "radians", "(", "angle", ")", "\n", "x_cam_off", "=", "w", "/", "2", "-", "math", ".", "sin", "(", "angle", ")", "*", "d", "\n", "z_cam_off", "=", "-", "math", ".", "cos", "(", "angle", ")", "*", "d", "\n", "y_cam_off", "=", "h", "/", "2", "\n", "\n", "R", "=", "np", ".", "array", "(", "[", "[", "math", ".", "cos", "(", "angle", ")", ",", "0", ",", "-", "math", ".", "sin", "(", "angle", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "math", ".", "sin", "(", "angle", ")", ",", "0", ",", "math", ".", "cos", "(", "angle", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "C", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", ",", "-", "x_cam_off", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "-", "y_cam_off", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "-", "z_cam_off", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "\n", "RT", "=", "np", ".", "matmul", "(", "R", ",", "C", ")", "\n", "\n", "H", "=", "np", ".", "array", "(", "[", "[", "f", "*", "RT", "[", "0", ",", "0", "]", ",", "f", "*", "RT", "[", "0", ",", "1", "]", ",", "f", "*", "RT", "[", "0", ",", "3", "]", "]", ",", "\n", "[", "f", "*", "RT", "[", "1", ",", "0", "]", ",", "f", "*", "RT", "[", "1", ",", "1", "]", ",", "f", "*", "RT", "[", "1", ",", "3", "]", "]", ",", "\n", "[", "RT", "[", "2", ",", "0", "]", ",", "RT", "[", "2", ",", "1", "]", ",", "RT", "[", "2", ",", "3", "]", "]", "]", ")", "\n", "\n", "\n", "x_off", ",", "y_off", ",", "crop_size", "=", "get_offset_and_crop_size", "(", "w", ",", "h", ",", "H", ",", "crop_percent", ",", "crop_off_x", ",", "crop_off_y", ",", "pt_file", ",", "f", "/", "d", ")", "\n", "\n", "M_aff", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "x_off", "]", ",", "\n", "[", "0", ",", "1", ",", "y_off", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "M", "=", "np", ".", "matmul", "(", "M_aff", ",", "H", ")", "\n", "\n", "if", "h", ">", "w", ":", "# tall and narrow", "\n", "        ", "crop_x", "=", "crop_size", "\n", "crop_y", "=", "int", "(", "round", "(", "crop_size", "/", "w", "*", "h", ")", ")", "\n", "", "else", ":", "# wide and short or square ", "\n", "        ", "crop_y", "=", "crop_size", "\n", "crop_x", "=", "int", "(", "round", "(", "crop_size", "/", "h", "*", "w", ")", ")", "\n", "\n", "", "if", "not", "whitebox", ":", "\n", "        ", "dst", "=", "cv2", ".", "warpPerspective", "(", "img", ",", "M", ",", "(", "crop_x", ",", "crop_y", ")", ",", "borderMode", "=", "cv2", ".", "BORDER_REPLICATE", ")", "\n", "", "else", ":", "\n", "        ", "dst", "=", "warp_perspective", "(", "img", ",", "torch", ".", "from_numpy", "(", "M", ")", ".", "float", "(", ")", ".", "to", "(", "img", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", ",", "(", "crop_y", ",", "crop_x", ")", ",", "align_corners", "=", "True", ",", "padding_mode", "=", "'border'", ")", "\n", "\n", "", "return", "dst", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.None.perspective_transform.get_offset_and_crop_size": [[54, 115], ["range", "numpy.matmul", "int", "open", "csv.reader", "len", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "int", "int", "round", "pts.append", "round", "int", "int", "round", "int", "int", "int", "int", "numpy.array", "round", "round", "round", "round", "round", "round", "min", "float", "float", "float"], "function", ["None"], ["", "def", "get_offset_and_crop_size", "(", "w", ",", "h", ",", "H", ",", "crop_percent", ",", "crop_off_x", ",", "crop_off_y", ",", "pt_file", ",", "ratio", ")", ":", "\n", "    ", "pts", "=", "[", "]", "\n", "if", "pt_file", "is", "not", "None", "and", "pt_file", "!=", "''", ":", "\n", "        ", "with", "open", "(", "pt_file", ")", "as", "csvfile", ":", "\n", "            ", "reader", "=", "csv", ".", "reader", "(", "csvfile", ")", "\n", "for", "row", "in", "reader", ":", "\n", "                ", "pts", ".", "append", "(", "np", ".", "array", "(", "[", "[", "float", "(", "row", "[", "0", "]", ")", "]", ",", "[", "float", "(", "row", "[", "1", "]", ")", "]", ",", "[", "float", "(", "row", "[", "2", "]", ")", "]", "]", ")", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "pts", ")", ")", ":", "\n", "            ", "pts", "[", "i", "]", "[", "0", ",", "0", "]", "*=", "w", "/", "pts", "[", "i", "]", "[", "2", ",", "0", "]", "\n", "pts", "[", "i", "]", "[", "1", ",", "0", "]", "*=", "h", "/", "pts", "[", "i", "]", "[", "2", ",", "0", "]", "\n", "pts", "[", "i", "]", "[", "2", ",", "0", "]", "*=", "1.0", "/", "pts", "[", "i", "]", "[", "2", ",", "0", "]", "\n", "\n", "", "", "else", ":", "\n", "        ", "pts", "=", "[", "np", ".", "array", "(", "[", "[", "0", "]", ",", "[", "0", "]", ",", "[", "1.0", "]", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "[", "0", "]", ",", "[", "h", "]", ",", "[", "1.0", "]", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "[", "w", "]", ",", "[", "0", "]", ",", "[", "1.0", "]", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "[", "w", "]", ",", "[", "h", "]", ",", "[", "1.0", "]", "]", ")", "]", "\n", "\n", "", "min_x", "=", "w", "\n", "min_y", "=", "h", "\n", "max_x", "=", "0", "\n", "max_y", "=", "0", "\n", "\n", "for", "pt", "in", "pts", ":", "\n", "        ", "new_pt", "=", "np", ".", "matmul", "(", "H", ",", "pt", ")", "\n", "new_pt", "/=", "new_pt", "[", "2", ",", "0", "]", "\n", "\n", "if", "new_pt", "[", "0", ",", "0", "]", "<", "min_x", ":", "\n", "            ", "min_x", "=", "new_pt", "[", "0", ",", "0", "]", "\n", "", "if", "new_pt", "[", "0", ",", "0", "]", ">", "max_x", ":", "\n", "            ", "max_x", "=", "new_pt", "[", "0", ",", "0", "]", "\n", "", "if", "new_pt", "[", "1", ",", "0", "]", "<", "min_y", ":", "\n", "            ", "min_y", "=", "new_pt", "[", "1", ",", "0", "]", "\n", "", "if", "new_pt", "[", "1", ",", "0", "]", ">", "max_y", ":", "\n", "            ", "max_y", "=", "new_pt", "[", "1", ",", "0", "]", "\n", "\n", "", "", "if", "pt_file", "is", "not", "None", "and", "pt_file", "!=", "''", ":", "\n", "        ", "if", "(", "max_x", "-", "min_x", ")", "/", "(", "max_y", "-", "min_y", ")", "<", "w", "/", "h", ":", "# result is tall and narrow", "\n", "            ", "diff_in_size", "=", "(", "max_y", "-", "min_y", ")", "/", "h", "*", "w", "-", "(", "max_x", "-", "min_x", ")", "\n", "orig_size", "=", "max_y", "-", "min_y", "if", "w", ">", "h", "else", "(", "max_y", "-", "min_y", ")", "/", "h", "*", "w", "\n", "crop_size", "=", "int", "(", "round", "(", "orig_size", "*", "(", "1.0", "-", "crop_percent", ")", ")", ")", "\n", "y_off", "=", "-", "min_y", "-", "int", "(", "round", "(", "crop_percent", "/", "2", "*", "orig_size", ")", ")", "\n", "x_off", "=", "-", "min_x", "+", "int", "(", "round", "(", "diff_in_size", "/", "2", "-", "crop_percent", "/", "2", "*", "orig_size", ")", ")", "\n", "\n", "", "else", ":", "# result is wide and short", "\n", "            ", "diff_in_size", "=", "(", "max_x", "-", "min_x", ")", "/", "w", "*", "h", "-", "(", "max_y", "-", "min_y", ")", "\n", "orig_size", "=", "max_x", "-", "min_x", "if", "h", ">", "w", "else", "(", "max_x", "-", "min_x", ")", "/", "w", "*", "h", "\n", "crop_size", "=", "int", "(", "round", "(", "orig_size", "*", "(", "1.0", "-", "crop_percent", ")", ")", ")", "\n", "x_off", "=", "-", "min_x", "-", "int", "(", "round", "(", "crop_percent", "/", "2", "*", "orig_size", ")", ")", "\n", "y_off", "=", "-", "min_y", "+", "int", "(", "round", "(", "diff_in_size", "/", "2", "-", "crop_percent", "/", "2", "*", "orig_size", ")", ")", "\n", "\n", "", "return", "x_off", "+", "crop_off_x", "*", "crop_size", ",", "y_off", "+", "crop_off_y", "*", "crop_size", ",", "crop_size", "\n", "\n", "", "else", ":", "\n", "        ", "min_x", "-=", "(", "w", "*", "ratio", "-", "(", "max_x", "-", "min_x", ")", ")", "//", "2", "\n", "min_y", "-=", "(", "h", "*", "ratio", "-", "(", "max_y", "-", "min_y", ")", ")", "//", "2", "\n", "\n", "crop_size", "=", "int", "(", "round", "(", "(", "1.0", "-", "crop_percent", ")", "*", "min", "(", "w", ",", "h", ")", "*", "ratio", ")", ")", "\n", "\n", "return", "-", "min_x", "-", "int", "(", "round", "(", "crop_percent", "/", "2", "*", "w", "*", "ratio", ")", ")", ",", "-", "min_y", "-", "int", "(", "round", "(", "crop_percent", "/", "2", "*", "h", "*", "ratio", ")", ")", ",", "crop_size", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ryan-feng_graphite.None.utils.run_predictions_untargeted": [[6, 27], ["torch.device", "torch.zeros", "enumerate", "len", "torch.cuda.is_available", "model.predict", "imgs[].size", "imgs[].size", "imgs[].size", "len", "len", "torch.ones"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.GTSRB.GTSRBNet.GTSRBNet.predict"], ["def", "run_predictions_untargeted", "(", "model", ",", "imgs", ",", "label", ")", ":", "\n", "    ", "batch_size", "=", "256", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "img_tensor", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "imgs", "[", "0", "]", ".", "size", "(", ")", "[", "0", "]", ",", "imgs", "[", "0", "]", ".", "size", "(", ")", "[", "1", "]", ",", "imgs", "[", "0", "]", ".", "size", "(", ")", "[", "2", "]", ")", ")", "\n", "num_successes", "=", "0", "\n", "lbl_tensor", "=", "(", "torch", ".", "ones", "(", "(", "batch_size", ")", ")", "*", "label", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "count", "=", "0", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "imgs", ")", ":", "\n", "        ", "img_tensor", "[", "count", ",", ":", ",", ":", ",", ":", "]", "=", "img", "\n", "count", "+=", "1", "\n", "if", "count", "==", "batch_size", "or", "i", "==", "len", "(", "imgs", ")", "-", "1", ":", "\n", "            ", "if", "count", "<", "batch_size", ":", "\n", "                ", "img_tensor", "=", "img_tensor", "[", ":", "count", ",", ":", ",", ":", ",", ":", "]", "\n", "lbl_tensor", "=", "lbl_tensor", "[", ":", "count", "]", "\n", "", "preds", "=", "model", ".", "predict", "(", "img_tensor", ")", "\n", "num_successes", "+=", "(", "preds", "!=", "lbl_tensor", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "count", "=", "0", "\n", "\n", "", "", "return", "(", "1.0", "-", "num_successes", "*", "1.0", "/", "len", "(", "imgs", ")", ")", ",", "len", "(", "imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.None.utils.run_predictions_targeted": [[29, 58], ["torch.device", "torch.zeros", "enumerate", "min", "min", "len", "torch.cuda.is_available", "model.predict", "imgs[].size", "imgs[].size", "imgs[].size", "img.size", "torch.zeros.size", "img.size", "torch.zeros.size", "len", "len", "torch.ones", "torch.ones"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.GTSRB.GTSRBNet.GTSRBNet.predict"], ["", "def", "run_predictions_targeted", "(", "model", ",", "imgs", ",", "target", ",", "victim", "=", "None", ")", ":", "\n", "    ", "batch_size", "=", "256", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "img_tensor", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "imgs", "[", "0", "]", ".", "size", "(", ")", "[", "0", "]", ",", "imgs", "[", "0", "]", ".", "size", "(", ")", "[", "1", "]", ",", "imgs", "[", "0", "]", ".", "size", "(", ")", "[", "2", "]", ")", ")", "\n", "num_successes", "=", "0", "\n", "tar_tensor", "=", "(", "torch", ".", "ones", "(", "(", "batch_size", ")", ")", "*", "target", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "if", "victim", "is", "not", "None", ":", "\n", "        ", "vic_tensor", "=", "(", "torch", ".", "ones", "(", "(", "batch_size", ")", ")", "*", "victim", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "vic_successes", "=", "0", "\n", "\n", "", "count", "=", "0", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "imgs", ")", ":", "\n", "        ", "max_y", "=", "min", "(", "img", ".", "size", "(", ")", "[", "1", "]", ",", "img_tensor", ".", "size", "(", ")", "[", "2", "]", ")", "\n", "max_x", "=", "min", "(", "img", ".", "size", "(", ")", "[", "2", "]", ",", "img_tensor", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "img_tensor", "[", "count", ",", ":", ",", ":", "max_y", ",", ":", "max_x", "]", "=", "img", "[", ":", ",", ":", "max_y", ",", ":", "max_x", "]", "\n", "count", "+=", "1", "\n", "if", "count", "==", "batch_size", "or", "i", "==", "len", "(", "imgs", ")", "-", "1", ":", "\n", "            ", "if", "count", "<", "batch_size", ":", "\n", "                ", "img_tensor", "=", "img_tensor", "[", ":", "count", ",", ":", ",", ":", ",", ":", "]", "\n", "tar_tensor", "=", "tar_tensor", "[", ":", "count", "]", "\n", "vic_tensor", "=", "vic_tensor", "[", ":", "count", "]", "\n", "", "preds", "=", "model", ".", "predict", "(", "img_tensor", ")", "\n", "num_successes", "+=", "(", "preds", "==", "tar_tensor", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "if", "victim", "is", "not", "None", ":", "\n", "                ", "vic_successes", "+=", "(", "preds", "==", "vic_tensor", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "count", "=", "0", "\n", "\n", "", "", "return", "(", "1.0", "-", "num_successes", "*", "1.0", "/", "len", "(", "imgs", ")", ")", ",", "len", "(", "imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.None.utils.run_predictions": [[60, 69], ["utils.run_predictions_untargeted", "utils.run_predictions_targeted"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.None.utils.run_predictions_untargeted", "home.repos.pwc.inspect_result.ryan-feng_graphite.None.utils.run_predictions_targeted"], ["", "def", "run_predictions", "(", "model", ",", "imgs", ",", "label", ",", "target", "=", "None", ")", ":", "\n", "    ", "\"\"\" imgs: set of transfomed images\n        label:  is the victim's label\n        target: is the target's label\n    \"\"\"", "\n", "if", "target", "is", "None", ":", "\n", "        ", "return", "run_predictions_untargeted", "(", "model", ",", "imgs", ",", "label", ")", "\n", "", "else", ":", "\n", "        ", "return", "run_predictions_targeted", "(", "model", ",", "imgs", ",", "target", ",", "label", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ryan-feng_graphite.None.boost.boost": [[9, 196], ["transforms.get_transform_params", "time.time", "x0_large.permute().numpy", "cv2.resize", "torch.from_numpy().permute", "theta.permute().numpy", "cv2.resize", "torch.from_numpy().permute", "comb_large.permute().numpy", "cv2.resize", "torch.from_numpy().permute", "transforms.get_transformed_images", "utils.run_predictions", "time.time", "print", "time.time", "range", "best_theta.permute().numpy", "cv2.resize", "torch.from_numpy().permute", "x0_large.permute().numpy", "mask.permute().numpy", "cv2.resize", "torch.from_numpy().permute", "torch.where", "model.predict", "time.time", "print", "best_theta.permute().numpy", "cv2.resize", "torch.from_numpy().permute", "init_attacked.permute().numpy", "cv2.cvtColor", "best_theta.clone", "print", "torch.zeros", "float", "range", "best_theta.permute().numpy", "cv2.resize", "torch.from_numpy().permute", "intermediate2.permute().numpy", "cv2.cvtColor", "transforms.add_noise", "transforms.add_noise", "torch.ones", "transforms.convert2Network", "torch.clamp", "x0_large.permute", "torch.from_numpy", "theta.permute", "torch.from_numpy", "comb_large.permute", "torch.from_numpy", "theta.size", "transforms.get_transformed_images", "utils.run_predictions", "print", "range", "transforms.get_transformed_images", "utils.run_predictions", "new_theta.clone", "best_theta.permute", "torch.from_numpy", "x0_large.permute", "mask.permute", "torch.from_numpy", "transforms.add_noise.size", "mask.size", "mask.size", "x0_large.size", "x0_large.size", "mask.size", "mask.size", "best_theta.permute", "torch.from_numpy", "init_attacked.permute", "torch.randn().type", "torch.norm", "transforms.get_transformed_images", "utils.run_predictions", "range", "transforms.get_transformed_images", "utils.run_predictions", "new_theta.clone", "best_theta.permute", "torch.from_numpy", "intermediate2.permute", "x0_large.size", "x0_large.size", "x0_large.size", "x0_large.size", "x0_large.size", "x0_large.size", "transforms.get_transformed_images", "utils.run_predictions", "x0_large.size", "x0_large.size", "torch.randn", "theta.size"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.get_transform_params", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.get_transformed_images", "home.repos.pwc.inspect_result.ryan-feng_graphite.None.utils.run_predictions", "home.repos.pwc.inspect_result.ryan-feng_graphite.GTSRB.GTSRBNet.GTSRBNet.predict", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.add_noise", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.add_noise", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.convert2Network", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.get_transformed_images", "home.repos.pwc.inspect_result.ryan-feng_graphite.None.utils.run_predictions", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.get_transformed_images", "home.repos.pwc.inspect_result.ryan-feng_graphite.None.utils.run_predictions", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.get_transformed_images", "home.repos.pwc.inspect_result.ryan-feng_graphite.None.utils.run_predictions", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.get_transformed_images", "home.repos.pwc.inspect_result.ryan-feng_graphite.None.utils.run_predictions", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.get_transformed_images", "home.repos.pwc.inspect_result.ryan-feng_graphite.None.utils.run_predictions"], ["def", "boost", "(", "model", ",", "x0_large", ",", "y0", ",", "mask", ",", "target_example", ",", "target", "=", "None", ",", "beta", "=", "1", ",", "iterations", "=", "30", ",", "pt_file", "=", "'images/Points/14.csv'", ",", "num_xforms", "=", "1000", ",", "net_size", "=", "32", ",", "model_type", "=", "'GTSRB'", ",", "goal", "=", "None", ",", "eta", "=", "500", ",", "bt", "=", "False", ",", "budget_factor", "=", "200", ",", "init_theta", "=", "None", ",", "square_mask", "=", "False", ",", "early_boost_exit", "=", "False", ")", ":", "\n", "    ", "\"\"\" Input requirements:\n        x0_large: must be a torch tensor and must be the output size of the final desired result (eg, the larger size)\n        y0: the victim label of x0_large\n        mask: Must consist of ONLY 0's and 1's. If any resizing is done before calling attack(), you must threshold it out so it's only 0's and 1's\n              Must be a torch tensor and must be the size of the noise to be generated (eg, 32 x 32)\n        target_example: The example target image. Must be a torch tensor and must be the size of the noise to be generated (eg, 32 x 32)\n        target: the desired target label\n\n        Attack the original image and return adversarial example\n        model: (pytorch model)\n        (x0, y0): original image\n        mask must be all 0's and 1's and of the resolution that we want to generate noise in\n    \"\"\"", "\n", "xforms", "=", "get_transform_params", "(", "num_xforms", ",", "model_type", ")", "\n", "\n", "query_count", "=", "0", "\n", "\n", "timestart", "=", "time", ".", "time", "(", ")", "\n", "\n", "######### Initialize ##############", "\n", "theta", "=", "None", "\n", "\n", "x0_lg_np", "=", "x0_large", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "x0_np", "=", "cv2", ".", "resize", "(", "x0_lg_np", ",", "(", "mask", ".", "size", "(", ")", "[", "2", "]", ",", "mask", ".", "size", "(", ")", "[", "1", "]", ")", ")", "\n", "x0", "=", "torch", ".", "from_numpy", "(", "x0_np", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "if", "init_theta", "is", "not", "None", ":", "\n", "        ", "theta", "=", "init_theta", "*", "mask", "\n", "", "else", ":", "\n", "        ", "theta", "=", "(", "target_example", "-", "x0", ")", "*", "mask", "\n", "", "theta_np", "=", "theta", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "\n", "theta_np_large", "=", "cv2", ".", "resize", "(", "theta_np", ",", "(", "x0_large", ".", "size", "(", ")", "[", "2", "]", ",", "x0_large", ".", "size", "(", ")", "[", "1", "]", ")", ")", "\n", "theta_np_large_torch", "=", "torch", ".", "from_numpy", "(", "theta_np_large", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "comb_large", "=", "x0_large", "+", "theta_np_large_torch", "\n", "comb_np", "=", "comb_large", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "comb_np", "=", "cv2", ".", "resize", "(", "comb_np", ",", "(", "mask", ".", "size", "(", ")", "[", "2", "]", ",", "mask", ".", "size", "(", ")", "[", "1", "]", ")", ")", "\n", "comb_torch", "=", "torch", ".", "from_numpy", "(", "comb_np", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "xform_imgs", "=", "get_transformed_images", "(", "x0_large", ",", "mask", ",", "xforms", ",", "1.0", ",", "theta", ",", "pt_file", ",", "net_size", "=", "net_size", ",", "model_type", "=", "model_type", ")", "\n", "success_rate", ",", "query_ct", "=", "run_predictions", "(", "model", ",", "xform_imgs", ",", "y0", ",", "target", ")", "\n", "query_count", "+=", "query_ct", "\n", "\n", "best_theta", ",", "best_eps", "=", "theta", ",", "success_rate", "\n", "\n", "timeend", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"==========> Found success rate %.4f in %.4f seconds using %d queries\"", "%", "(", "best_eps", ",", "timeend", "-", "timestart", ",", "query_count", ")", ")", "\n", "\n", "if", "x0_large", "is", "not", "None", ":", "\n", "        ", "init_theta_np", "=", "best_theta", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "init_theta_np", "=", "cv2", ".", "resize", "(", "init_theta_np", ",", "(", "x0_large", ".", "size", "(", ")", "[", "2", "]", ",", "x0_large", ".", "size", "(", ")", "[", "1", "]", ")", ")", "\n", "init_theta_lg_torch", "=", "torch", ".", "from_numpy", "(", "init_theta_np", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "init_attacked", "=", "x0_large", "+", "init_theta_lg_torch", "\n", "\n", "init_np", "=", "init_attacked", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "init_np", "=", "cv2", ".", "cvtColor", "(", "init_np", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "\n", "######### End Initialize ##############", "\n", "\n", "", "timestart", "=", "time", ".", "time", "(", ")", "\n", "\n", "theta", ",", "eps", "=", "best_theta", ".", "clone", "(", ")", ",", "best_eps", "\n", "\n", "opt_count", "=", "0", "\n", "\n", "####### gradient free optimization steps #######", "\n", "iters_taken", "=", "0", "\n", "trivial_iters", "=", "0", "\n", "for", "i", "in", "range", "(", "iterations", ")", ":", "\n", "        ", "iters_taken", "+=", "1", "\n", "print", "(", "'iter: '", ",", "i", ")", "\n", "gradient", "=", "torch", ".", "zeros", "(", "theta", ".", "size", "(", ")", ")", "\n", "q", "=", "10", "\n", "min_g1", "=", "float", "(", "'inf'", ")", "\n", "\n", "# Take q samples of random Gaussian noise to use as new directions, calculate transform_robustness", "\n", "# Used for gradient estimate", "\n", "for", "_", "in", "range", "(", "q", ")", ":", "\n", "            ", "u", "=", "torch", ".", "randn", "(", "theta", ".", "size", "(", ")", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "*", "mask", "\n", "u", "=", "u", "/", "torch", ".", "norm", "(", "u", ")", "\n", "ttt", "=", "theta", "+", "beta", "*", "u", "\n", "\n", "xform_imgs", "=", "get_transformed_images", "(", "x0_large", ",", "mask", ",", "xforms", ",", "1.0", ",", "ttt", ",", "pt_file", ",", "net_size", "=", "net_size", ",", "model_type", "=", "model_type", ")", "\n", "eps_ttt", ",", "opt_ct", "=", "run_predictions", "(", "model", ",", "xform_imgs", ",", "y0", ",", "target", ")", "\n", "opt_count", "+=", "opt_ct", "\n", "\n", "gradient", "+=", "(", "eps_ttt", "-", "eps", ")", "/", "beta", "*", "u", "\n", "print", "(", "\"new eps eps beta\"", ",", "eps_ttt", ",", "eps", ",", "beta", ")", "\n", "\n", "if", "bt", "and", "eps_ttt", "<", "min_g1", ":", "\n", "                ", "min_g1", "=", "eps_ttt", "\n", "min_ttt", "=", "ttt", "\n", "\n", "", "", "gradient", "=", "1.0", "/", "q", "*", "gradient", "\n", "\n", "new_eps", "=", "1.0", "\n", "new_theta", "=", "None", "\n", "\n", "if", "bt", ":", "\n", "            ", "min_theta", "=", "theta", "\n", "min_new_eps", "=", "eps", "\n", "\n", "alpha", "=", "500", "\n", "\n", "for", "_", "in", "range", "(", "5", ")", ":", "\n", "                ", "new_theta", "=", "theta", "-", "alpha", "*", "gradient", "\n", "xform_imgs", "=", "get_transformed_images", "(", "x0_large", ",", "mask", ",", "xforms", ",", "1.0", ",", "new_theta", ",", "pt_file", ",", "net_size", "=", "net_size", ",", "model_type", "=", "model_type", ")", "\n", "new_eps", ",", "opt_ct", "=", "run_predictions", "(", "model", ",", "xform_imgs", ",", "y0", ",", "target", ")", "\n", "opt_count", "+=", "opt_ct", "\n", "alpha", "=", "alpha", "*", "2", "\n", "if", "new_eps", "<", "min_new_eps", ":", "\n", "                    ", "min_theta", "=", "new_theta", "\n", "min_new_eps", "=", "new_eps", "\n", "", "else", ":", "\n", "                    ", "break", "\n", "\n", "", "", "if", "min_new_eps", ">=", "eps", ":", "\n", "                ", "for", "_", "in", "range", "(", "5", ")", ":", "\n", "                    ", "alpha", "=", "alpha", "*", "0.25", "\n", "new_theta", "=", "theta", "-", "alpha", "*", "gradient", "\n", "xform_imgs", "=", "get_transformed_images", "(", "x0_large", ",", "mask", ",", "xforms", ",", "1.0", ",", "new_theta", ",", "pt_file", ",", "net_size", "=", "net_size", ",", "model_type", "=", "model_type", ")", "\n", "new_eps", ",", "opt_ct", "=", "run_predictions", "(", "model", ",", "xform_imgs", ",", "y0", ",", "target", ")", "\n", "opt_count", "+=", "opt_ct", "\n", "if", "new_eps", "<", "eps", ":", "\n", "                        ", "min_theta", "=", "new_theta", "\n", "min_new_eps", "=", "new_eps", "\n", "break", "\n", "\n", "", "", "", "if", "min_new_eps", "==", "eps", ":", "\n", "                ", "min_theta", "=", "theta", "-", "eta", "*", "gradient", "\n", "xform_imgs", "=", "get_transformed_images", "(", "x0_large", ",", "mask", ",", "xforms", ",", "1.0", ",", "min_theta", ",", "pt_file", ",", "net_size", "=", "net_size", ",", "model_type", "=", "model_type", ")", "\n", "min_new_eps", ",", "opt_ct", "=", "run_predictions", "(", "model", ",", "xform_imgs", ",", "y0", ",", "target", ")", "\n", "opt_count", "+=", "opt_ct", "\n", "\n", "", "if", "min_new_eps", "<=", "min_g1", ":", "\n", "                ", "new_theta", ",", "new_eps", "=", "min_theta", ",", "min_new_eps", "\n", "", "else", ":", "\n", "                ", "new_theta", ",", "new_eps", "=", "min_ttt", ",", "min_g1", "\n", "\n", "", "", "else", ":", "\n", "# Take gradient step", "\n", "            ", "new_theta", "=", "theta", "-", "eta", "*", "gradient", "\n", "xform_imgs", "=", "get_transformed_images", "(", "x0_large", ",", "mask", ",", "xforms", ",", "1.0", ",", "new_theta", ",", "pt_file", ",", "net_size", "=", "net_size", ",", "model_type", "=", "model_type", ")", "\n", "new_eps", ",", "opt_ct", "=", "run_predictions", "(", "model", ",", "xform_imgs", ",", "y0", ",", "target", ")", "\n", "opt_count", "+=", "opt_ct", "\n", "\n", "\n", "", "if", "new_eps", "<", "best_eps", ":", "\n", "            ", "best_theta", ",", "best_eps", "=", "new_theta", ".", "clone", "(", ")", ",", "new_eps", "\n", "\n", "", "theta", ",", "eps", "=", "new_theta", ".", "clone", "(", ")", ",", "new_eps", "\n", "\n", "\n", "if", "(", "opt_count", "+", "query_count", "+", "num_xforms", "*", "11", ")", ">", "(", "budget_factor", "*", "num_xforms", ")", ":", "\n", "            ", "break", "\n", "\n", "", "if", "square_mask", "and", "i", "==", "0", "and", "best_eps", ">=", "0.95", "and", "early_boost_exit", ":", "\n", "            ", "break", "\n", "\n", "", "best_theta_inter_full_lg", "=", "best_theta", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "best_theta_inter_full_lg", "=", "cv2", ".", "resize", "(", "best_theta_inter_full_lg", ",", "(", "x0_large", ".", "size", "(", ")", "[", "2", "]", ",", "x0_large", ".", "size", "(", ")", "[", "1", "]", ")", ")", "\n", "best_theta_inter_torch", "=", "torch", ".", "from_numpy", "(", "best_theta_inter_full_lg", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "intermediate2", "=", "x0_large", "+", "1.0", "*", "best_theta_inter_torch", "\n", "\n", "intermediate2_np", "=", "intermediate2", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "intermediate2_np", "=", "cv2", ".", "cvtColor", "(", "intermediate2_np", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "\n", "", "best_theta_np", "=", "best_theta", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "best_theta_np_lg", "=", "cv2", ".", "resize", "(", "best_theta_np", ",", "(", "x0_large", ".", "size", "(", ")", "[", "2", "]", ",", "x0_large", ".", "size", "(", ")", "[", "1", "]", ")", ")", "\n", "best_theta_lg_torch", "=", "torch", ".", "from_numpy", "(", "best_theta_np_lg", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "if", "model_type", "==", "'GTSRB'", ":", "\n", "        ", "adv_example", "=", "add_noise", "(", "x0_large", ",", "mask", ",", "1.0", ",", "best_theta", ")", "\n", "", "else", ":", "\n", "        ", "adv_example", "=", "add_noise", "(", "x0_large", ",", "mask", ",", "1.0", ",", "best_theta", ",", "clip", "=", "False", ")", "\n", "\n", "", "x0_lg_numpy", "=", "x0_large", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "mask_np", "=", "mask", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "mask_np", "=", "cv2", ".", "resize", "(", "mask_np", ",", "(", "x0_large", ".", "size", "(", ")", "[", "2", "]", ",", "x0_large", ".", "size", "(", ")", "[", "1", "]", ")", ")", "\n", "mask_large", "=", "torch", ".", "from_numpy", "(", "mask_np", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "perturb", "=", "torch", ".", "where", "(", "mask_large", ">", "0.0", ",", "adv_example", ",", "torch", ".", "ones", "(", "adv_example", ".", "size", "(", ")", ")", ")", "\n", "\n", "target", "=", "model", ".", "predict", "(", "convert2Network", "(", "adv_example", ",", "net_size", "=", "net_size", ",", "model_type", "=", "model_type", ")", ")", "\n", "timeend", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"final iters_taken: \"", ",", "iters_taken", ")", "\n", "\n", "return", "adv_example", ",", "(", "1", "-", "best_eps", ")", ",", "perturb", ",", "query_count", "+", "opt_count", ",", "best_theta", ",", "torch", ".", "clamp", "(", "x0", "+", "best_theta", ",", "0", ",", "1", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ryan-feng_graphite.None.parsearguments.getarguments": [[4, 77], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "int", "int", "open"], "function", ["None"], ["def", "getarguments", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'GRAPHITE'", ")", "\n", "# Key parameters", "\n", "parser", ".", "add_argument", "(", "'--victim_id'", ",", "'-v'", ",", "default", "=", "'14'", ",", "help", "=", "'The victim class id.'", ")", "\n", "parser", ".", "add_argument", "(", "'--target_id'", ",", "'-t'", ",", "default", "=", "'1'", ",", "help", "=", "'The target class id.'", ")", "\n", "parser", ".", "add_argument", "(", "'--tr_lo'", ",", "type", "=", "float", ",", "default", "=", "0.25", ",", "help", "=", "'The threshold for coarse grained reduction.'", ")", "\n", "parser", ".", "add_argument", "(", "'--tr_hi'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'The threshold for fine grained reduction.'", ")", "\n", "parser", ".", "add_argument", "(", "'--scorefile'", ",", "'-s'", ",", "default", "=", "'score.py'", ",", "help", "=", "'The file for scoring in mask generation.'", ")", "\n", "parser", ".", "add_argument", "(", "'--network'", ",", "'-n'", ",", "default", "=", "'GTSRB'", ",", "help", "=", "'The dataset / type of network to attack.'", ")", "\n", "parser", ".", "add_argument", "(", "'--heatmap'", ",", "default", "=", "'Target'", ",", "help", "=", "'The type of heatmap to use.'", ")", "\n", "parser", ".", "add_argument", "(", "'--boost_transforms'", ",", "'-b'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'The number of transforms to use in boosting.'", ")", "\n", "parser", ".", "add_argument", "(", "'--mask_transforms'", ",", "'-m'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'The number of transforms to use in mask generation.'", ")", "\n", "parser", ".", "add_argument", "(", "'--coarse_mode'", ",", "default", "=", "'binary'", ",", "help", "=", "'The type of mode to perform coarse reduction: binary or linear.'", ")", "\n", "parser", ".", "add_argument", "(", "'--heatmap_file'", ",", "help", "=", "'Start heatmap file, if pre-saved already'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_test_xforms'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "'Set to > 0 if you want to evaluate the result on x transforms, \\\n                                                                         where x != the value of -b.'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_mask_size'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "'Set to > 0 to enable m_max.'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "42", ",", "help", "=", "'Random seed.'", ")", "\n", "parser", ".", "add_argument", "(", "'--joint_iters'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'Number of times to altnerate mask generation and boosting'", ")", "\n", "parser", ".", "add_argument", "(", "'--image_id'", ",", "default", "=", "''", ",", "help", "=", "'An image id to tag to outputs. Useful for CIFAR-10.'", ")", "\n", "parser", ".", "add_argument", "(", "'--img_v'", ",", "help", "=", "'File to the victim image if it is not in the default location.'", ")", "\n", "parser", ".", "add_argument", "(", "'--img_t'", ",", "help", "=", "'File to the target image if it is not in the default location.'", ")", "\n", "parser", ".", "add_argument", "(", "'--hull'", ",", "help", "=", "'File to specify the mask of the object if it is not in default location.'", ")", "\n", "parser", ".", "add_argument", "(", "'--pt_file'", ",", "help", "=", "'File to specify the corners of the object for perspective transform if it is not in default location.'", ")", "\n", "parser", ".", "add_argument", "(", "'--out_path'", ",", "default", "=", "'outputs/'", ",", "help", "=", "'Output directory base.'", ")", "\n", "\n", "# Extra ALPR parameters", "\n", "parser", ".", "add_argument", "(", "'--vic_license_plate'", ",", "help", "=", "'The victim license plate, if ALPR attack.'", ")", "\n", "parser", ".", "add_argument", "(", "'--tar_license_plate'", ",", "help", "=", "'The target license plate, if ALPR attack.'", ")", "\n", "parser", ".", "add_argument", "(", "'--border_outer'", ",", "help", "=", "'Mask for the outer border for ALPR.'", ")", "\n", "parser", ".", "add_argument", "(", "'--border_inner'", ",", "help", "=", "'Mask for the inner border for ALPR.'", ")", "\n", "parser", ".", "add_argument", "(", "'--tag'", ",", "default", "=", "''", ",", "help", "=", "'Tag to optionally add to ALPR outputs.'", ")", "\n", "\n", "# Misc. extra knobs for additional tweaking of settings, if desired. Can mostly be left alone.", "\n", "parser", ".", "add_argument", "(", "'--bt'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Whether or not to apply backtracking line search in RGF.'", ")", "\n", "parser", ".", "add_argument", "(", "'--square_x'", ",", "help", "=", "'x coordinate of square, if specifying a square mask.'", ")", "\n", "parser", ".", "add_argument", "(", "'--square_y'", ",", "help", "=", "'y coordinate of square, if specifying a square mask.'", ")", "\n", "parser", ".", "add_argument", "(", "'--square_size'", ",", "help", "=", "'Size square, if specifying a square mask.'", ")", "\n", "parser", ".", "add_argument", "(", "'--early_boost_exit'", ",", "action", "=", "'store_true'", ",", "help", "=", "'If testing a square mask and you want to exit boosting \\\n                                                                         early if the result is clearly not transform-robust.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "args", ".", "coarse_error", "=", "1", "-", "args", ".", "tr_hi", "\n", "args", ".", "reduce_error", "=", "1", "-", "args", ".", "tr_lo", "\n", "\n", "\n", "assert", "args", ".", "coarse_error", "<=", "args", ".", "reduce_error", "\n", "assert", "args", ".", "coarse_error", ">=", "0", "# upon coarse_reduction, we want transform_robustness to be >= 1-coarseerror", "\n", "assert", "args", ".", "reduce_error", "<=", "1", "# upon reduction, we want transform_robustness to be > 1-reduceerror", "\n", "assert", "args", ".", "heatmap", "in", "[", "'Target'", ",", "'Victim'", ",", "'Random'", "]", "\n", "\n", "baseimagedir", "=", "'inputs/'", "+", "args", ".", "network", "+", "\"/\"", "\n", "if", "args", ".", "img_v", "is", "None", ":", "\n", "        ", "args", ".", "img_v", "=", "baseimagedir", "+", "'images/'", "+", "args", ".", "victim_id", "+", "\".png\"", "\n", "", "if", "args", ".", "img_t", "is", "None", ":", "\n", "        ", "args", ".", "img_t", "=", "baseimagedir", "+", "'images/'", "+", "args", ".", "target_id", "+", "\".png\"", "\n", "", "if", "args", ".", "hull", "is", "None", ":", "\n", "        ", "try", ":", "\n", "            ", "args", ".", "mask", "=", "baseimagedir", "+", "'Hulls/'", "+", "args", ".", "victim_id", "+", "\".png\"", "\n", "", "except", ":", "\n", "            ", "args", ".", "mask", "=", "\"trivial_hull.png\"", "\n", "", "", "else", ":", "\n", "        ", "args", ".", "mask", "=", "args", ".", "hull", "\n", "", "args", ".", "lbl_v", "=", "int", "(", "args", ".", "victim_id", ")", "\n", "args", ".", "lbl_t", "=", "int", "(", "args", ".", "target_id", ")", "\n", "if", "args", ".", "pt_file", "is", "None", ":", "\n", "        ", "try", ":", "\n", "            ", "pt_file", "=", "baseimagedir", "+", "'Points/'", "+", "args", ".", "victim_id", "+", "\".csv\"", "\n", "open", "(", "pt_file", ")", "\n", "args", ".", "pt_file", "=", "pt_file", "\n", "", "except", ":", "\n", "            ", "args", ".", "pt_file", "=", "None", "\n", "", "", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.ryan-feng_graphite.cifar.wideresnet.BasicBlock.__init__": [[10, 24], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.ryan-feng_graphite.GTSRB.GTSRBDataset.GTSRBDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "droprate", "=", "dropRate", "\n", "self", ".", "equalInOut", "=", "(", "in_planes", "==", "out_planes", ")", "\n", "self", ".", "convShortcut", "=", "(", "not", "self", ".", "equalInOut", ")", "and", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "bias", "=", "False", ")", "or", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.cifar.wideresnet.BasicBlock.forward": [[25, 35], ["wideresnet.BasicBlock.relu2", "wideresnet.BasicBlock.conv2", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "wideresnet.BasicBlock.relu1", "wideresnet.BasicBlock.relu1", "wideresnet.BasicBlock.bn2", "torch.dropout", "torch.dropout", "torch.dropout", "wideresnet.BasicBlock.bn1", "wideresnet.BasicBlock.bn1", "wideresnet.BasicBlock.conv1", "wideresnet.BasicBlock.convShortcut"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "equalInOut", ":", "\n", "            ", "x", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "out", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv1", "(", "out", "if", "self", ".", "equalInOut", "else", "x", ")", ")", ")", "\n", "if", "self", ".", "droprate", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "droprate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "return", "torch", ".", "add", "(", "x", "if", "self", ".", "equalInOut", "else", "self", ".", "convShortcut", "(", "x", ")", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.cifar.wideresnet.NetworkBlock.__init__": [[38, 41], ["torch.Module.__init__", "wideresnet.NetworkBlock._make_layer"], "methods", ["home.repos.pwc.inspect_result.ryan-feng_graphite.GTSRB.GTSRBDataset.GTSRBDataset.__init__", "home.repos.pwc.inspect_result.ryan-feng_graphite.cifar.wideresnet.NetworkBlock._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "nb_layers", ",", "in_planes", ",", "out_planes", ",", "block", ",", "stride", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "NetworkBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "self", ".", "_make_layer", "(", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.cifar.wideresnet.NetworkBlock._make_layer": [[42, 47], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "int", "(", "nb_layers", ")", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "i", "==", "0", "and", "in_planes", "or", "out_planes", ",", "out_planes", ",", "i", "==", "0", "and", "stride", "or", "1", ",", "dropRate", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.cifar.wideresnet.NetworkBlock.forward": [[48, 50], ["wideresnet.NetworkBlock.layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.cifar.wideresnet.WideResNet.__init__": [[53, 85], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "wideresnet.NetworkBlock", "wideresnet.NetworkBlock", "wideresnet.NetworkBlock", "wideresnet.NetworkBlock", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "wideresnet.WideResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.ryan-feng_graphite.GTSRB.GTSRBDataset.GTSRBDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", "=", "34", ",", "num_classes", "=", "10", ",", "widen_factor", "=", "10", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "WideResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nChannels", "=", "[", "16", ",", "16", "*", "widen_factor", ",", "32", "*", "widen_factor", ",", "64", "*", "widen_factor", "]", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", "\n", "n", "=", "(", "depth", "-", "4", ")", "/", "6", "\n", "block", "=", "BasicBlock", "\n", "# 1st conv before any network block", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "nChannels", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "# 1st block", "\n", "self", ".", "block1", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "0", "]", ",", "nChannels", "[", "1", "]", ",", "block", ",", "1", ",", "dropRate", ")", "\n", "# 1st sub-block", "\n", "self", ".", "sub_block1", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "0", "]", ",", "nChannels", "[", "1", "]", ",", "block", ",", "1", ",", "dropRate", ")", "\n", "# 2nd block", "\n", "self", ".", "block2", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "1", "]", ",", "nChannels", "[", "2", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "# 3rd block", "\n", "self", ".", "block3", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "2", "]", ",", "nChannels", "[", "3", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "# global average pooling and classifier", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nChannels", "[", "3", "]", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "nChannels", "[", "3", "]", ",", "num_classes", ")", "\n", "self", ".", "nChannels", "=", "nChannels", "[", "3", "]", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.cifar.wideresnet.WideResNet.forward": [[86, 95], ["wideresnet.WideResNet.conv1", "wideresnet.WideResNet.block1", "wideresnet.WideResNet.block2", "wideresnet.WideResNet.block3", "wideresnet.WideResNet.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "out.view.view.view", "wideresnet.WideResNet.fc", "wideresnet.WideResNet.bn1"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "block1", "(", "out", ")", "\n", "out", "=", "self", ".", "block2", "(", "out", ")", "\n", "out", "=", "self", ".", "block3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "self", ".", "nChannels", ")", "\n", "return", "self", ".", "fc", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.cifar.wideresnet.WideResNet.predict": [[96, 112], ["wideresnet.WideResNet.eval", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.clamp.clone", "torch.clamp.clone", "torch.clamp.clone", "image_batch.unsqueeze.unsqueeze.to", "wideresnet.WideResNet.", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "len", "predict[].item", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "len", "image_batch.unsqueeze.unsqueeze.unsqueeze", "torch.clamp.size", "torch.clamp.size", "torch.clamp.size", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.clamp.size", "torch.clamp.size", "torch.clamp.size"], "methods", ["home.repos.pwc.inspect_result.ryan-feng_graphite.whitebox.whitebox_attack.eval"], ["", "def", "predict", "(", "self", ",", "image", ")", ":", "\n", "        ", "if", "torch", ".", "max", "(", "image", ")", ">", "1.0", "or", "torch", ".", "min", "(", "image", ")", "<", "0.0", ":", "\n", "            ", "image", "=", "torch", ".", "clamp", "(", "image", ",", "0.0", ",", "1.0", ")", "\n", "", "self", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "image_batch", "=", "image", ".", "clone", "(", ")", "\n", "if", "len", "(", "image", ".", "size", "(", ")", ")", "<", "4", ":", "\n", "                ", "image_batch", "=", "image_batch", ".", "unsqueeze", "(", "0", ")", "\n", "", "image_batch", "=", "image_batch", ".", "to", "(", "device", ")", "\n", "output", "=", "self", "(", "image_batch", ")", "\n", "_", ",", "predict", "=", "torch", ".", "max", "(", "output", ".", "data", ",", "1", ")", "\n", "\n", "", "if", "len", "(", "image", ".", "size", "(", ")", ")", "<", "4", ":", "\n", "            ", "return", "predict", "[", "0", "]", ".", "item", "(", ")", "\n", "", "return", "predict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.patchguard_predict.PatchGuard.__init__": [[22, 37], ["torch.Module.__init__", "PatchGuard.bagnet17().cuda", "PatchGuard.bagnet17().cuda", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "patchguard_predict.PatchGuard.net.load_state_dict", "torchvision.transforms.Compose", "math.ceil", "PatchGuard.bagnet17", "PatchGuard.bagnet17", "torchvision.transforms.Normalize"], "methods", ["home.repos.pwc.inspect_result.ryan-feng_graphite.GTSRB.GTSRBDataset.GTSRBDataset.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "bagnet", ".", "bagnet17", "(", "pretrained", "=", "True", ",", "clip_range", "=", "None", ",", "aggregation", "=", "'none'", ")", ".", "cuda", "(", ")", "\n", "num_ftrs", "=", "self", ".", "net", ".", "fc", ".", "in_features", "\n", "self", ".", "net", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "10", ")", "\n", "self", ".", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "self", ".", "net", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "'PatchGuard/checkpoints/bagnet17_192_cifar.pth'", ")", "\n", "self", ".", "net", ".", "load_state_dict", "(", "checkpoint", "[", "'net'", "]", ")", "\n", "self", ".", "preprocessing", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", ",", "\n", "]", ")", "\n", "rf_size", "=", "17", "\n", "rf_stride", "=", "8", "\n", "patch_size", "=", "30", "\n", "self", ".", "window_size", "=", "ceil", "(", "(", "patch_size", "+", "rf_size", "-", "1", ")", "/", "rf_stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.patchguard_predict.PatchGuard.forward": [[38, 51], ["patchguard_predict.PatchGuard.net().detach().cpu().numpy", "range", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "type", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "masking_defense", "preds.append", "len", "patchguard_predict.PatchGuard.net().detach().cpu", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "patchguard_predict.PatchGuard.net().detach", "patchguard_predict.PatchGuard.net", "patchguard_predict.PatchGuard.preprocessing"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "x", ")", ":", "\n", "        ", "if", "type", "(", "x", ")", "==", "tuple", ":", "\n", "            ", "assert", "len", "(", "x", ")", "==", "1", "\n", "x", "=", "x", "[", "0", "]", "\n", "", "z", "=", "(", "x", "+", "0.5", ")", "*", "255", "\n", "z", "=", "F", ".", "interpolate", "(", "z", ",", "192", ",", "mode", "=", "'bicubic'", ")", "/", "255", "\n", "z", "=", "self", ".", "net", "(", "self", ".", "preprocessing", "(", "z", ")", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "preds", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "z", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "local_feature", "=", "z", "[", "i", "]", "\n", "pred", "=", "masking_defense", "(", "local_feature", ",", "thres", "=", "0.0", ",", "window_shape", "=", "[", "self", ".", "window_size", ",", "self", ".", "window_size", "]", ")", "\n", "preds", ".", "append", "(", "pred", ")", "\n", "", "return", "torch", ".", "tensor", "(", "preds", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.patchguard_predict.PatchGuard.predict": [[52, 54], ["patchguard_predict.PatchGuard.forward"], "methods", ["home.repos.pwc.inspect_result.ryan-feng_graphite.GTSRB.GTSRBNet.GTSRBNet.forward"], ["", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "forward", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.patchguard_predict.PatchGuardNoDefense.__init__": [[57, 72], ["torch.Module.__init__", "PatchGuard.bagnet17().cuda", "PatchGuard.bagnet17().cuda", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "patchguard_predict.PatchGuardNoDefense.net.load_state_dict", "torchvision.transforms.Compose", "math.ceil", "PatchGuard.bagnet17", "PatchGuard.bagnet17", "torchvision.transforms.Normalize"], "methods", ["home.repos.pwc.inspect_result.ryan-feng_graphite.GTSRB.GTSRBDataset.GTSRBDataset.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "bagnet", ".", "bagnet17", "(", "pretrained", "=", "True", ",", "clip_range", "=", "None", ",", "aggregation", "=", "'mean'", ")", ".", "cuda", "(", ")", "\n", "num_ftrs", "=", "self", ".", "net", ".", "fc", ".", "in_features", "\n", "self", ".", "net", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "10", ")", "\n", "self", ".", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "self", ".", "net", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "'PatchGuard/checkpoints/bagnet17_192_cifar.pth'", ")", "\n", "self", ".", "net", ".", "load_state_dict", "(", "checkpoint", "[", "'net'", "]", ")", "\n", "self", ".", "preprocessing", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", ",", "\n", "]", ")", "\n", "rf_size", "=", "17", "\n", "rf_stride", "=", "8", "\n", "patch_size", "=", "30", "\n", "self", ".", "window_size", "=", "ceil", "(", "(", "patch_size", "+", "rf_size", "-", "1", ")", "/", "rf_stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.patchguard_predict.PatchGuardNoDefense.forward": [[73, 87], ["patchguard_predict.PatchGuardNoDefense.net().detach().cpu().numpy", "range", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "type", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "numpy.argmax", "preds.append", "len", "patchguard_predict.PatchGuardNoDefense.net().detach().cpu", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "patchguard_predict.PatchGuardNoDefense.net().detach", "patchguard_predict.PatchGuardNoDefense.net", "patchguard_predict.PatchGuardNoDefense.preprocessing"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "x", ")", ":", "\n", "        ", "if", "type", "(", "x", ")", "==", "tuple", ":", "\n", "            ", "assert", "len", "(", "x", ")", "==", "1", "\n", "x", "=", "x", "[", "0", "]", "\n", "", "z", "=", "(", "x", "+", "0.5", ")", "*", "255", "\n", "z", "=", "F", ".", "interpolate", "(", "z", ",", "192", ",", "mode", "=", "'bicubic'", ")", "/", "255", "\n", "z", "=", "self", ".", "net", "(", "self", ".", "preprocessing", "(", "z", ")", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "preds", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "z", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "local_feature", "=", "z", "[", "i", "]", "\n", "pred", "=", "np", ".", "argmax", "(", "\n", "local_feature", ")", "\n", "preds", ".", "append", "(", "pred", ")", "\n", "", "return", "torch", ".", "tensor", "(", "preds", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.patchguard_predict.PatchGuardNoDefense.predict": [[88, 90], ["patchguard_predict.PatchGuardNoDefense.forward"], "methods", ["home.repos.pwc.inspect_result.ryan-feng_graphite.GTSRB.GTSRBNet.GTSRBNet.forward"], ["", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "forward", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_generate_mask.generate_mask": [[22, 156], ["scorefile.strip", "importlib.invalidate_caches", "importlib.import_module", "parsearguments.getarguments", "print", "pg_transforms.get_transform_params", "time.time", "torch.ones", "print", "parsearguments.getarguments", "print", "print", "print", "print", "print", "print", "print", "print", "print", "pg_transforms.add_noise", "torch.ones", "mask.sum", "range", "print", "pg_generate_mask.survey_heatmap", "numpy.asarray", "np.asarray.argsort", "print", "coarse_reduction.get_coarse_reduced_mask", "pg_generate_mask.get_fine_reduced_mask", "best_mask.sum", "coarse_red_nbits.item", "reducer_nbits.item", "reducer_nbits.item", "mask.size", "range", "len", "open", "pickle.load", "best_mask.sum", "best_mask.sum", "pg_generate_mask.get_fine_reduced_mask", "torch.zeros", "open", "pickle.dump", "best_mask.sum", "mask.size", "mask.size", "torch.sum", "patches.append", "indices.append", "mask.size", "min", "min", "mask.size", "mask.size"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.None.parsearguments.getarguments", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.get_transform_params", "home.repos.pwc.inspect_result.ryan-feng_graphite.None.parsearguments.getarguments", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.add_noise", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_generate_mask.survey_heatmap", "home.repos.pwc.inspect_result.ryan-feng_graphite.None.coarse_reduction.get_coarse_reduced_mask", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_generate_mask.get_fine_reduced_mask", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_generate_mask.get_fine_reduced_mask"], ["def", "generate_mask", "(", "model", ",", "img_v_small", ",", "img_v", ",", "lbl_v", ",", "mask", ",", "img_t_small", ",", "img_t", ",", "lbl_t", ",", "pt_file", ",", "scorefile", ",", "HEATMAP_MODE", ",", "\n", "COARSE_ACCEPT_THRESHOLD", ",", "FINE_REJECT_THRESHOLD", ",", "\n", "num_xforms", "=", "100", ",", "net_size", "=", "32", ",", "model_type", "=", "'CIFAR'", ",", "patch_size", "=", "4", ",", "stride_factor", "=", "4", ",", "\n", "heatmap_file", "=", "None", ",", "heatmap_out_path", "=", "None", ",", "max_mask_size", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\" Attack the original image and return adversarial example\n        model: (pytorch model)\n        (x0, y0): original image\n        mask must be all 0's and 1's and of the resolution that we want to generate noise in\n    \"\"\"", "\n", "\n", "# Read in arguments", "\n", "global", "scoremod", "\n", "\n", "# Read in arguments continued", "\n", "modulename", "=", "scorefile", ".", "strip", "(", "'.py'", ")", "\n", "importlib", ".", "invalidate_caches", "(", ")", "\n", "scoremod", "=", "importlib", ".", "import_module", "(", "modulename", ")", "\n", "args", "=", "parsearguments", ".", "getarguments", "(", ")", "\n", "\n", "print", "(", "\"Calculating Heatmap...\"", ")", "\n", "########################### Stage 1: HEATMAP: Collect all the valid patches and order by computed heatmap ################################", "\n", "xforms", "=", "get_transform_params", "(", "num_xforms", ",", "model_type", ",", "baseline", "=", "True", ")", "\n", "query_count", "=", "0", "\n", "timestart", "=", "time", ".", "time", "(", ")", "\n", "not_mask", "=", "torch", ".", "ones", "(", "mask", ".", "size", "(", ")", ")", "-", "mask", "\n", "object_size", "=", "mask", ".", "sum", "(", ")", "/", "3", "\n", "\n", "patch", "=", "torch", ".", "ones", "(", "(", "3", ",", "patch_size", ",", "patch_size", ")", ")", "\n", "patches", "=", "[", "]", "\n", "indices", "=", "[", "]", "\n", "\n", "if", "heatmap_file", "is", "None", ":", "\n", "# collect all valid patches", "\n", "        ", "for", "i", "in", "range", "(", "0", ",", "mask", ".", "size", "(", ")", "[", "1", "]", "-", "patch_size", ",", "patch_size", "//", "stride_factor", ")", ":", "# 4", "\n", "            ", "for", "j", "in", "range", "(", "0", ",", "mask", ".", "size", "(", ")", "[", "2", "]", "-", "patch_size", ",", "patch_size", "//", "stride_factor", ")", ":", "# 4", "\n", "                ", "new_mask", "=", "torch", ".", "zeros", "(", "mask", ".", "size", "(", ")", ")", "\n", "new_mask", "[", ":", ",", "i", ":", "min", "(", "i", "+", "patch_size", ",", "mask", ".", "size", "(", ")", "[", "1", "]", ")", ",", "j", ":", "min", "(", "j", "+", "patch_size", ",", "mask", ".", "size", "(", ")", "[", "2", "]", ")", "]", "=", "patch", "\n", "new_mask", "=", "new_mask", "*", "mask", "\n", "if", "torch", ".", "sum", "(", "new_mask", ")", ">", "0", ":", "\n", "                    ", "patches", ".", "append", "(", "new_mask", ")", "\n", "indices", ".", "append", "(", "(", "i", ",", "j", ")", ")", "\n", "", "", "", "print", "(", "\"num patches: \"", ",", "len", "(", "patches", ")", ")", "\n", "\n", "# compute heatmap and order", "\n", "tr_scores", ",", "heatmap_query_ct", "=", "survey_heatmap", "(", "mask", ",", "patches", ",", "indices", ",", "img_v", ",", "img_t", ",", "img_v_small", ",", "img_t_small", ",", "\n", "lbl_t", ",", "lbl_v", ",", "model", ",", "xforms", ",", "pt_file", ",", "net_size", ",", "HEATMAP_MODE", ",", "\n", "plot", "=", "True", ")", "\n", "query_count", "+=", "heatmap_query_ct", "\n", "\n", "tr_scores_np", "=", "np", ".", "asarray", "(", "tr_scores", ")", "\n", "order", "=", "tr_scores_np", ".", "argsort", "(", ")", "\n", "patches", "=", "[", "patches", "[", "ind", "]", "for", "ind", "in", "order", "]", "\n", "indices", "=", "[", "indices", "[", "ind", "]", "for", "ind", "in", "order", "]", "\n", "\n", "if", "heatmap_out_path", "is", "not", "None", ":", "\n", "            ", "with", "open", "(", "heatmap_out_path", ",", "'wb'", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "{", "\n", "'heatmap_query_ct'", ":", "heatmap_query_ct", ",", "\n", "'patches'", ":", "patches", ",", "\n", "'indices'", ":", "indices", ",", "\n", "'order'", ":", "order", ",", "\n", "}", ",", "f", ")", "\n", "\n", "", "", "", "else", ":", "\n", "        ", "with", "open", "(", "heatmap_file", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "heatmap", "=", "pickle", ".", "load", "(", "f", ")", "\n", "heatmap_query_ct", "=", "heatmap", "[", "'heatmap_query_ct'", "]", "\n", "patches", "=", "heatmap", "[", "'patches'", "]", "\n", "indices", "=", "heatmap", "[", "'indices'", "]", "\n", "order", "=", "heatmap", "[", "'order'", "]", "\n", "", "query_count", "+=", "heatmap_query_ct", "\n", "patches", "=", "patches", "\n", "indices", "=", "indices", "\n", "order", "=", "order", "\n", "\n", "", "print", "(", "\"Heatmap completed.\"", ")", "\n", "\n", "########################### Stage 2: COARSE REDUCTION: coarsely remove patches until the high surivability threshold is reached ################################", "\n", "args", "=", "parsearguments", ".", "getarguments", "(", ")", ";", "\n", "coarse_red_mode", "=", "args", ".", "coarse_mode", "# binary or linear", "\n", "if", "coarse_red_mode", "!=", "'none'", ":", "\n", "        ", "direction", "=", "\"forward\"", "\n", "print", "(", "\"Coarse reduction start mask using\"", ",", "coarse_red_mode", ",", "direction", ")", "\n", "\n", "best_score", ",", "best_tr", ",", "best_mask", ",", "coarse_reduction_query_ct", ",", "pivot", ",", "patches", ",", "indices", "=", "get_coarse_reduced_mask", "(", "mask", ",", "object_size", ",", "patches", ",", "indices", ",", "img_v", ",", "img_t", ",", "lbl_v", ",", "lbl_t", ",", "model", ",", "xforms", ",", "pt_file", ",", "\n", "net_size", ",", "\n", "num_xforms", "=", "num_xforms", ",", "patch_size", "=", "patch_size", ",", "err_threshold", "=", "COARSE_ACCEPT_THRESHOLD", ",", "\n", "coarse_red_mode", "=", "coarse_red_mode", ",", "direction", "=", "direction", ",", "args", "=", "args", ")", "\n", "coarse_red_nbits", "=", "best_mask", ".", "sum", "(", ")", "/", "3", "\n", "query_count", "+=", "coarse_reduction_query_ct", "\n", "\n", "", "else", ":", "\n", "        ", "best_mask", "=", "mask", "\n", "coarse_red_nbits", "=", "best_mask", ".", "sum", "(", ")", "/", "3", "\n", "\n", "########################### Stage 3: FINE REDUCTION: iterate over patches and greedily remove if the mask score improves ################################", "\n", "", "print", "(", "\"Starting fine grained reduction\"", ")", "\n", "if", "max_mask_size", ">", "0", ":", "\n", "        ", "lbd", "=", "5", "\n", "while", "best_mask", ".", "sum", "(", ")", "/", "3", ">", "max_mask_size", ":", "\n", "            ", "best_score", ",", "best_tr", ",", "best_mask", ",", "reduction_query_ct", "=", "get_fine_reduced_mask", "(", "best_mask", ",", "object_size", ",", "patches", ",", "\n", "indices", ",", "img_v", ",", "img_t_small", ",", "lbl_v", ",", "\n", "lbl_t", ",", "model", ",", "xforms", ",", "pt_file", ",", "\n", "net_size", ",", "\n", "err_threshold", "=", "FINE_REJECT_THRESHOLD", ",", "\n", "HEATMAP_MODE", "=", "HEATMAP_MODE", ",", "\n", "scoremod", "=", "scoremod", ",", "lbd", "=", "lbd", ",", "\n", "max_mask_size", "=", "max_mask_size", ")", "\n", "lbd", "+=", "2.5", "\n", "", "", "else", ":", "\n", "        ", "best_score", ",", "best_tr", ",", "best_mask", ",", "reduction_query_ct", "=", "get_fine_reduced_mask", "(", "best_mask", ",", "object_size", ",", "patches", ",", "\n", "indices", ",", "img_v", ",", "img_t_small", ",", "lbl_v", ",", "\n", "lbl_t", ",", "model", ",", "xforms", ",", "pt_file", ",", "net_size", ",", "\n", "err_threshold", "=", "FINE_REJECT_THRESHOLD", ",", "\n", "HEATMAP_MODE", "=", "HEATMAP_MODE", ",", "\n", "scoremod", "=", "scoremod", ")", "\n", "", "reducer_nbits", "=", "best_mask", ".", "sum", "(", ")", "/", "3", "\n", "query_count", "+=", "reduction_query_ct", "\n", "\n", "############### Print results, save out and returned initialization point found ##############3", "\n", "print", "(", "'-'", "*", "32", ")", "\n", "print", "(", "\"End of Mask Generation summary:\"", ")", "\n", "print", "(", "\"queries\"", ",", "reduction_query_ct", ")", "\n", "print", "(", "\"final (coarse_red to reducer) bits\"", ",", "coarse_red_nbits", ".", "item", "(", ")", ",", "reducer_nbits", ".", "item", "(", ")", ")", "\n", "print", "(", "\"final tr\"", ",", "best_tr", ")", "\n", "print", "(", "\"final area ratio\"", ",", "(", "reducer_nbits", "/", "object_size", ")", ".", "item", "(", ")", ")", "\n", "print", "(", "\"queries used\"", ",", "query_count", ")", "\n", "print", "(", "'-'", "*", "32", ")", "\n", "\n", "best_theta", "=", "(", "img_t_small", "-", "img_v_small", ")", "*", "best_mask", "\n", "attacked", "=", "add_noise", "(", "img_v", ",", "best_mask", ",", "1.0", ",", "best_theta", ")", "\n", "\n", "return", "attacked", ",", "query_count", ",", "best_mask", ",", "reducer_nbits", ".", "item", "(", ")", ",", "best_tr", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_generate_mask.get_heatmap": [[158, 188], ["img_v.permute().numpy", "cv2.resize", "torch.from_numpy().permute", "range", "start_mask.sum", "torch.from_numpy().permute.permute().numpy", "cv2.resize", "torch.from_numpy().permute", "len", "pg_transforms.get_transformed_images", "utils.run_predictions", "tr_scores.append", "img_v.permute", "torch.from_numpy", "start_mask.size", "start_mask.size", "torch.from_numpy().permute.size", "start_mask.size", "torch.from_numpy().permute.size", "start_mask.size", "torch.from_numpy().permute.permute", "torch.from_numpy", "torch.ones", "start_mask.size", "start_mask.size", "start_mask.size"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.get_transformed_images", "home.repos.pwc.inspect_result.ryan-feng_graphite.None.utils.run_predictions"], ["", "def", "get_heatmap", "(", "start_mask", ",", "patches", ",", "indices", ",", "img_v", ",", "img_t", ",", "lbl_v", ",", "lbl_t", ",", "model", ",", "xforms", ",", "pt_file", ",", "net_size", ",", "\n", "init_tr", "=", "0.5", ",", "plot", "=", "False", ")", ":", "\n", "    ", "object_size", "=", "start_mask", ".", "sum", "(", ")", "/", "3", "\n", "\n", "# setup images", "\n", "img_v_np", "=", "img_v", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "img_v_np", "=", "cv2", ".", "resize", "(", "img_v_np", ",", "(", "start_mask", ".", "size", "(", ")", "[", "2", "]", ",", "start_mask", ".", "size", "(", ")", "[", "1", "]", ")", ")", "\n", "img_v_small", "=", "torch", ".", "from_numpy", "(", "img_v_np", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "if", "img_t", ".", "size", "(", ")", "[", "1", "]", "!=", "start_mask", ".", "size", "(", ")", "[", "1", "]", "or", "img_t", ".", "size", "(", ")", "[", "2", "]", "!=", "start_mask", ".", "size", "(", ")", "[", "2", "]", ":", "\n", "        ", "img_t_np", "=", "img_t", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "img_t_np", "=", "cv2", ".", "resize", "(", "img_t_np", ",", "(", "start_mask", ".", "size", "(", ")", "[", "2", "]", ",", "start_mask", ".", "size", "(", ")", "[", "1", "]", ")", ")", "\n", "img_t", "=", "torch", ".", "from_numpy", "(", "img_t_np", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "", "heatmap_query_ct", "=", "0", "\n", "\n", "tr_scores", "=", "[", "]", "\n", "\n", "# iterate over patches and compute transform_robustness without each individual patch", "\n", "for", "i", "in", "range", "(", "len", "(", "patches", ")", ")", ":", "\n", "        ", "patch", "=", "patches", "[", "i", "]", "\n", "next_mask", "=", "start_mask", "*", "(", "torch", ".", "ones", "(", "start_mask", ".", "size", "(", ")", ")", "-", "patch", ")", "\n", "theta", "=", "(", "img_t", "-", "img_v_small", ")", "*", "next_mask", "\n", "xform_imgs", "=", "get_transformed_images", "(", "img_v", ",", "next_mask", ",", "xforms", ",", "1.0", ",", "theta", ",", "pt_file", ",", "\n", "net_size", "=", "net_size", ")", "\n", "success_rate", ",", "query_ct", "=", "run_predictions", "(", "model", ",", "xform_imgs", ",", "lbl_v", ",", "lbl_t", ")", "\n", "heatmap_query_ct", "+=", "query_ct", "\n", "tr_scores", ".", "append", "(", "1", "-", "success_rate", ")", "\n", "\n", "", "return", "tr_scores", ",", "heatmap_query_ct", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_generate_mask.get_fine_reduced_mask": [[190, 256], ["img_v.permute().numpy", "cv2.resize", "torch.from_numpy().permute", "pg_transforms.get_transformed_images", "utils.run_predictions", "print", "print", "scoremod.score_fn", "new_patches.copy", "torch.from_numpy().permute.permute().numpy", "cv2.resize", "torch.from_numpy().permute", "pg_transforms.get_transformed_images", "utils.run_predictions", "scoremod.score_fn", "img_v.permute", "torch.from_numpy", "start_mask.sum", "new_patches.copy.pop", "indices.pop", "torch.max", "new_patches.append", "start_mask.size", "start_mask.size", "torch.from_numpy().permute.size", "torch.from_numpy().permute.size", "torch.from_numpy().permute.size", "torch.from_numpy().permute.size", "torch.from_numpy().permute.permute", "torch.from_numpy", "torch.ones", "best_mask.sum", "start_mask.size", "start_mask.size", "best_mask.size"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.get_transformed_images", "home.repos.pwc.inspect_result.ryan-feng_graphite.None.utils.run_predictions", "home.repos.pwc.inspect_result.ryan-feng_graphite.None.score.score_fn", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.get_transformed_images", "home.repos.pwc.inspect_result.ryan-feng_graphite.None.utils.run_predictions", "home.repos.pwc.inspect_result.ryan-feng_graphite.None.score.score_fn"], ["", "def", "get_fine_reduced_mask", "(", "start_mask", ",", "object_size", ",", "patches", ",", "indices", ",", "img_v", ",", "img_t", ",", "lbl_v", ",", "lbl_t", ",", "model", ",", "xforms", ",", "pt_file", ",", "\n", "net_size", ",", "err_threshold", "=", "0.75", ",", "HEATMAP_MODE", "=", "None", ",", "scoremod", "=", "None", ",", "lbd", "=", "5", ",", "max_mask_size", "=", "-", "1", ")", ":", "\n", "# STAGE 3: Fine reduction", "\n", "    ", "reduction_query_ct", "=", "0", "\n", "\n", "# set up images", "\n", "img_v_np", "=", "img_v", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "img_v_np", "=", "cv2", ".", "resize", "(", "img_v_np", ",", "(", "start_mask", ".", "size", "(", ")", "[", "2", "]", ",", "start_mask", ".", "size", "(", ")", "[", "1", "]", ")", ")", "\n", "img_v_small", "=", "torch", ".", "from_numpy", "(", "img_v_np", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "if", "img_t", ".", "size", "(", ")", "[", "1", "]", "!=", "img_v_small", ".", "size", "(", ")", "[", "1", "]", "or", "img_t", ".", "size", "(", ")", "[", "2", "]", "!=", "img_v_small", ".", "size", "(", ")", "[", "2", "]", ":", "\n", "        ", "img_t_np", "=", "img_t", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "img_t_np", "=", "cv2", ".", "resize", "(", "img_t_np", ",", "(", "start_mask", ".", "size", "(", ")", "[", "2", "]", ",", "start_mask", ".", "size", "(", ")", "[", "1", "]", ")", ")", "\n", "img_t", "=", "torch", ".", "from_numpy", "(", "img_t_np", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "", "img_t_small", "=", "img_t", "\n", "\n", "theta", "=", "(", "img_t", "-", "img_v_small", ")", "*", "start_mask", "\n", "\n", "# get initial transform_robustness", "\n", "xform_imgs", "=", "get_transformed_images", "(", "img_v", ",", "start_mask", ",", "xforms", ",", "1.0", ",", "theta", ",", "pt_file", ",", "net_size", "=", "net_size", ")", "\n", "success_rate", ",", "query_ct", "=", "run_predictions", "(", "model", ",", "xform_imgs", ",", "lbl_v", ",", "lbl_t", ")", "\n", "reduction_query_ct", "+=", "query_ct", "\n", "\n", "init_tr", "=", "(", "1", "-", "success_rate", ")", "\n", "print", "(", "\"init_tr\"", ",", "init_tr", ")", "\n", "print", "(", "\"init bits\"", ",", "start_mask", ".", "sum", "(", ")", "/", "3", ")", "\n", "\n", "best_score", "=", "scoremod", ".", "score_fn", "(", "theta", "+", "img_v_small", ",", "start_mask", ",", "success_rate", ",", "object_size", ",", "None", ",", "\n", "threshold", "=", "err_threshold", ",", "lbd", "=", "lbd", ")", "\n", "best_tr", "=", "init_tr", "\n", "best_mask", "=", "start_mask", "\n", "last_heatmap_mask", "=", "best_mask", "\n", "\n", "new_patches", ",", "patches_examined", ",", "peek_cnt", ",", "zero_grad", "=", "[", "]", ",", "0", ",", "8", ",", "0", "\n", "j", "=", "0", "\n", "# iterate over patches, greedily remove if the score improves", "\n", "while", "patches", ":", "\n", "        ", "j", "=", "j", "+", "1", "\n", "\n", "# highest tr is now always at end, for pop()", "\n", "next_patch", ",", "next_indice", "=", "patches", ".", "pop", "(", ")", ",", "indices", ".", "pop", "(", ")", "\n", "if", "torch", ".", "max", "(", "next_patch", "*", "best_mask", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "patches_examined", "+=", "1", "\n", "next_mask", "=", "best_mask", "*", "(", "torch", ".", "ones", "(", "best_mask", ".", "size", "(", ")", ")", "-", "next_patch", ")", "\n", "theta", "=", "(", "img_t", "-", "img_v_small", ")", "*", "next_mask", "\n", "\n", "xform_imgs", "=", "get_transformed_images", "(", "img_v", ",", "next_mask", ",", "xforms", ",", "1.0", ",", "theta", ",", "pt_file", ",", "net_size", "=", "net_size", ")", "\n", "success_rate", ",", "query_ct", "=", "run_predictions", "(", "model", ",", "xform_imgs", ",", "lbl_v", ",", "lbl_t", ")", "\n", "reduction_query_ct", "+=", "query_ct", "\n", "\n", "score", "=", "scoremod", ".", "score_fn", "(", "theta", "+", "img_v_small", ",", "next_mask", ",", "success_rate", ",", "object_size", ",", "next_indice", ",", "\n", "best_score", "=", "best_score", ",", "threshold", "=", "err_threshold", ",", "lbd", "=", "lbd", ")", "\n", "if", "score", "<", "best_score", ":", "\n", "            ", "best_score", "=", "score", "\n", "best_mask", "=", "next_mask", "\n", "best_tr", "=", "1", "-", "success_rate", "\n", "nbits", "=", "best_mask", ".", "sum", "(", ")", "/", "3", "\n", "if", "max_mask_size", ">", "0", "and", "nbits", "<", "max_mask_size", ":", "\n", "                ", "break", "\n", "", "", "else", ":", "\n", "            ", "new_patches", ".", "append", "(", "next_patch", ")", "\n", "\n", "", "", "patches", "=", "new_patches", ".", "copy", "(", ")", "\n", "\n", "return", "best_score", ",", "best_tr", ",", "best_mask", ",", "reduction_query_ct", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_generate_mask.survey_heatmap": [[258, 275], ["random.random", "pg_generate_mask.get_heatmap", "pg_generate_mask.get_heatmap", "range", "len"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_generate_mask.get_heatmap", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_generate_mask.get_heatmap"], ["", "def", "survey_heatmap", "(", "mask", ",", "patches", ",", "indices", ",", "img_v", ",", "img_t", ",", "img_v_small", ",", "img_t_small", ",", "lbl_t", ",", "lbl_v", ",", "model", ",", "xforms", ",", "pt_file", ",", "\n", "net_size", ",", "HEATMAP_MODE", ",", "plot", "=", "False", ")", ":", "\n", "    ", "''' encapsulation of the transform_robustness measurements heatmap to compute\n           random\n           target wrt victim or \n           victim wrt target '''", "\n", "if", "HEATMAP_MODE", "==", "'Random'", ":", "\n", "        ", "tr_scores", "=", "[", "random", ".", "random", "(", ")", "for", "i", "in", "range", "(", "len", "(", "patches", ")", ")", "]", "\n", "heatmap_query_ct", "=", "0", "\n", "", "elif", "HEATMAP_MODE", "==", "'Victim'", ":", "\n", "        ", "tr_scores", ",", "heatmap_query_ct", "=", "get_heatmap", "(", "mask", ",", "patches", ",", "indices", ",", "img_t", ",", "img_v_small", ",", "lbl_t", ",", "lbl_v", ",", "model", ",", "\n", "xforms", ",", "pt_file", ",", "net_size", ",", "plot", "=", "plot", ")", "\n", "", "else", ":", "## Target mode", "\n", "        ", "tr_scores", ",", "heatmap_query_ct", "=", "get_heatmap", "(", "mask", ",", "patches", ",", "indices", ",", "img_v", ",", "img_t_small", ",", "lbl_v", ",", "lbl_t", ",", "model", ",", "\n", "xforms", ",", "pt_file", ",", "net_size", ",", "plot", "=", "plot", ")", "\n", "\n", "", "return", "tr_scores", ",", "heatmap_query_ct", "\n", "", ""]], "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.main_patchguard.attack_network": [[20, 102], ["getpass.getuser", "parsearguments.getarguments", "cv2.imread", "cv2.cvtColor", "cv2.resize", "torch.from_numpy().permute", "torch.from_numpy().permute", "pg_generate_mask.generate_mask", "int", "mask_out.permute().numpy", "cv2.imwrite", "init.permute().numpy", "cv2.cvtColor", "cv2.imwrite", "pg_boost.boost", "print", "adversarial.permute().numpy", "cv2.cvtColor", "cv2.imwrite", "perturb.permute().numpy", "cv2.cvtColor", "cv2.imwrite", "print", "print", "print", "print", "print", "numpy.array", "cv2.imread", "numpy.where", "cv2.imread", "cv2.resize", "cv2.cvtColor", "torch.from_numpy().permute", "cv2.cvtColor", "torch.from_numpy().permute().float", "torch.from_numpy", "torch.from_numpy", "cv2.resize", "torch.from_numpy().permute", "numpy.array", "numpy.array", "mask_out.permute", "init.permute", "adversarial.permute", "perturb.permute", "torch.from_numpy", "torch.from_numpy().permute", "str", "str", "str", "str", "str", "torch.from_numpy", "torch.from_numpy", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.None.parsearguments.getarguments", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_generate_mask.generate_mask", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_boost.boost"], ["def", "attack_network", "(", "model", ",", "img_v", ",", "img_t", ",", "mask", ",", "lbl_v", ",", "lbl_t", ",", "pt_file", ",", "scorefile", ",", "heatmap", ",", "coarseerror", ",", "reduceerror", ",", "\n", "beta", "=", "1", ",", "num_xforms_mask", "=", "100", ",", "num_xforms_boost", "=", "1000", ",", "net_size", "=", "32", ",", "noise_size", "=", "32", ",", "model_type", "=", "'CIFAR'", ")", ":", "\n", "    ", "import", "getpass", "\n", "username", "=", "getpass", ".", "getuser", "(", ")", "\n", "args", "=", "parsearguments", ".", "getarguments", "(", ")", "\n", "coarse_mode", "=", "args", ".", "coarse_mode", "\n", "\n", "out_str_base", "=", "username", "+", "\"_\"", "+", "str", "(", "lbl_v", ")", "+", "'_'", "+", "str", "(", "lbl_t", ")", "+", "'_'", "+", "str", "(", "reduceerror", ")", "+", "'_'", "+", "str", "(", "\n", "coarseerror", ")", "+", "'_'", "+", "str", "(", "coarse_mode", ")", "+", "'_'", "+", "scorefile", "+", "\"_\"", ";", "\n", "output_base", "=", "'outputs_reproduce/'", "\n", "if", "model_type", "!=", "'CIFAR'", ":", "\n", "        ", "output_base", "+=", "model_type", "+", "'/'", "\n", "", "img", "=", "cv2", ".", "imread", "(", "img_v", ")", "\n", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255.0", "\n", "img_small", "=", "cv2", ".", "resize", "(", "img", ",", "(", "noise_size", ",", "noise_size", ")", ")", "\n", "img_torch", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "img_small_torch", "=", "torch", ".", "from_numpy", "(", "img_small", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "mask_file", "=", "None", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "mask_file", "=", "mask", "\n", "mask_full", "=", "cv2", ".", "imread", "(", "mask", ")", "\n", "if", "mask_full", ".", "shape", "[", "0", "]", "!=", "noise_size", "or", "mask_full", ".", "shape", "[", "1", "]", "!=", "noise_size", ":", "\n", "            ", "mask", "=", "cv2", ".", "resize", "(", "mask_full", ",", "(", "noise_size", ",", "noise_size", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "mask", "=", "mask_full", "\n", "\n", "", "mask", "=", "np", ".", "where", "(", "mask", ">", "128", ",", "255", ",", "0", ")", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "/", "255.0", "\n", "\n", "", "if", "img_t", "is", "not", "None", ":", "\n", "        ", "tar_large", "=", "cv2", ".", "imread", "(", "img_t", ")", "\n", "tar", "=", "cv2", ".", "resize", "(", "tar_large", ",", "(", "noise_size", ",", "noise_size", ")", ")", "\n", "tar", "=", "cv2", ".", "cvtColor", "(", "tar", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "tar", "=", "np", ".", "array", "(", "tar", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255.0", "\n", "\n", "tar", "=", "torch", ".", "from_numpy", "(", "tar", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "tar_large", "=", "cv2", ".", "cvtColor", "(", "tar_large", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "tar_large", "=", "np", ".", "array", "(", "tar_large", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255.0", "\n", "tar_large", "=", "torch", ".", "from_numpy", "(", "tar_large", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", "\n", "\n", "", "init", ",", "mask_query_count", ",", "mask_out", ",", "nbits", ",", "tr_score", "=", "generate_mask", "(", "model", ",", "img_small_torch", ",", "img_torch", ",", "lbl_v", ",", "mask", ",", "tar", ",", "tar_large", ",", "lbl_t", ",", "pt_file", ",", "scorefile", ",", "\n", "heatmap", ",", "coarseerror", ",", "reduceerror", ",", "num_xforms", "=", "num_xforms_mask", ",", "\n", "net_size", "=", "net_size", ",", "model_type", "=", "model_type", ",", "patch_size", "=", "noise_size", "//", "8", ")", "\n", "nbits", "=", "int", "(", "nbits", ")", "\n", "\n", "mask_out_np", "=", "mask_out", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "cv2", ".", "imwrite", "(", "output_base", "+", "'masks/'", "+", "out_str_base", "+", "'_'", "+", "str", "(", "nbits", ")", "+", "'_bits_'", "+", "str", "(", "tr_score", ")", "+", "'_tr.png'", ",", "\n", "mask_out_np", "*", "255", ")", "\n", "\n", "init_np", "=", "init", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "init_np", "=", "cv2", ".", "cvtColor", "(", "init_np", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "cv2", ".", "imwrite", "(", "output_base", "+", "'inits/'", "+", "out_str_base", "+", "'_'", "+", "str", "(", "nbits", ")", "+", "'_bits_'", "+", "str", "(", "tr_score", ")", "+", "'_tr.png'", ",", "\n", "init_np", "*", "255", ")", "\n", "\n", "adversarial", ",", "tr_score", ",", "perturb", ",", "boost_query_count", ",", "adv_small", "=", "boost", "(", "model", ",", "img_torch", ",", "lbl_v", ",", "mask_out", ",", "tar", ",", "\n", "lbl_t", ",", "beta", "=", "beta", ",", "iterations", "=", "1000", ",", "\n", "pt_file", "=", "pt_file", ",", "num_xforms", "=", "num_xforms_boost", ",", "\n", "net_size", "=", "net_size", ",", "model_type", "=", "model_type", ")", "\n", "\n", "print", "(", "tr_score", ",", "nbits", ")", "\n", "adversarial_np", "=", "adversarial", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "adversarial_np", "=", "cv2", ".", "cvtColor", "(", "adversarial_np", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "\n", "cv2", ".", "imwrite", "(", "output_base", "+", "'boosted/'", "+", "out_str_base", "+", "'_'", "+", "str", "(", "nbits", ")", "+", "'_bits_'", "+", "str", "(", "tr_score", ")", "+", "'_tr.png'", ",", "\n", "adversarial_np", "*", "255", ")", "\n", "\n", "perturb_np", "=", "perturb", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "perturb_np", "=", "cv2", ".", "cvtColor", "(", "perturb_np", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "cv2", ".", "imwrite", "(", "\n", "output_base", "+", "'perturbations/'", "+", "out_str_base", "+", "'_'", "+", "str", "(", "nbits", ")", "+", "'bits_'", "+", "str", "(", "tr_score", ")", "+", "'tr.png'", ",", "\n", "perturb_np", "*", "255", ")", "\n", "\n", "print", "(", "\"--------------------------------\"", ")", "\n", "print", "(", "\"Attack Completed.\"", ")", "\n", "print", "(", "\"Final transform_robustness:\"", ",", "tr_score", ")", "\n", "print", "(", "\"Final number of pixels:\"", ",", "nbits", ")", "\n", "print", "(", "\"Final number of queries:\"", ",", "mask_query_count", "+", "boost_query_count", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.main_patchguard.attack_CIFAR": [[104, 115], ["patchguard_predict.PatchGuard", "torch.cuda.is_available", "patchguard_predict.PatchGuard.eval", "torch.device", "main_patchguard.attack_network", "patchguard_predict.PatchGuard.cuda", "torch.cuda.is_available"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.whitebox.whitebox_attack.eval", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.main_patchguard.attack_network"], ["", "def", "attack_CIFAR", "(", "img_v", ",", "img_t", ",", "mask", ",", "lbl_v", ",", "lbl_t", ",", "pt_file", ",", "scorefile", ",", "heatmap", ",", "coarseerror", ",", "reduceerror", ",", "beta", "=", "1", ",", "\n", "num_xforms_mask", "=", "100", ",", "num_xforms_boost", "=", "1000", ",", "net_size", "=", "32", ",", "noise_size", "=", "32", ")", ":", "\n", "    ", "net", "=", "PatchGuard", "(", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "net", ".", "cuda", "(", ")", "\n", "", "net", ".", "eval", "(", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "attack_network", "(", "net", ",", "img_v", ",", "img_t", ",", "mask", ",", "lbl_v", ",", "lbl_t", ",", "pt_file", ",", "scorefile", ",", "heatmap", ",", "coarseerror", ",", "reduceerror", ",", "\n", "beta", ",", "num_xforms_mask", ",", "num_xforms_boost", ",", "net_size", ",", "noise_size", ",", "model_type", "=", "'CIFAR'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_boost.boost": [[13, 218], ["pg_transforms.get_transform_params", "time.time", "x0_large.permute().numpy", "cv2.resize", "torch.from_numpy().permute", "theta.permute().numpy", "cv2.resize", "torch.from_numpy().permute", "comb_large.permute().numpy", "cv2.resize", "torch.from_numpy().permute", "pg_transforms.get_transformed_images", "utils.run_predictions", "time.time", "print", "time.time", "range", "best_theta.permute().numpy", "cv2.resize", "torch.from_numpy().permute", "x0_large.permute().numpy", "mask.permute().numpy", "cv2.resize", "torch.from_numpy().permute", "torch.where", "print", "open", "pickle.dump", "best_theta.permute().numpy", "cv2.resize", "torch.from_numpy().permute", "init_attacked.permute().numpy", "cv2.cvtColor", "best_theta.clone", "print", "torch.zeros", "float", "range", "best_theta.permute().numpy", "cv2.resize", "torch.from_numpy().permute", "intermediate2.permute().numpy", "cv2.cvtColor", "pg_transforms.add_noise", "pg_transforms.add_noise", "torch.ones", "torch.clamp", "x0_large.permute", "torch.from_numpy", "theta.permute", "torch.from_numpy", "comb_large.permute", "torch.from_numpy", "theta.size", "pg_transforms.get_transformed_images", "utils.run_predictions", "print", "range", "pg_transforms.get_transformed_images", "utils.run_predictions", "new_theta.clone", "best_theta.permute", "torch.from_numpy", "x0_large.permute", "mask.permute", "torch.from_numpy", "pg_transforms.add_noise.size", "torch.clamp", "mask.size", "mask.size", "x0_large.size", "x0_large.size", "mask.size", "mask.size", "best_theta.permute", "torch.from_numpy", "init_attacked.permute", "torch.randn().type", "torch.norm", "pg_transforms.get_transformed_images", "utils.run_predictions", "range", "pg_transforms.get_transformed_images", "utils.run_predictions", "new_theta.clone", "best_theta.permute", "torch.from_numpy", "intermediate2.permute", "x0_large.size", "x0_large.size", "x0_large.size", "x0_large.size", "x0_large.size", "x0_large.size", "pg_transforms.get_transformed_images", "utils.run_predictions", "x0_large.size", "x0_large.size", "torch.randn", "theta.size"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.get_transform_params", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.get_transformed_images", "home.repos.pwc.inspect_result.ryan-feng_graphite.None.utils.run_predictions", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.add_noise", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.add_noise", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.get_transformed_images", "home.repos.pwc.inspect_result.ryan-feng_graphite.None.utils.run_predictions", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.get_transformed_images", "home.repos.pwc.inspect_result.ryan-feng_graphite.None.utils.run_predictions", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.get_transformed_images", "home.repos.pwc.inspect_result.ryan-feng_graphite.None.utils.run_predictions", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.get_transformed_images", "home.repos.pwc.inspect_result.ryan-feng_graphite.None.utils.run_predictions", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.get_transformed_images", "home.repos.pwc.inspect_result.ryan-feng_graphite.None.utils.run_predictions"], ["def", "boost", "(", "model", ",", "x0_large", ",", "y0", ",", "mask", ",", "target_example", ",", "target", "=", "None", ",", "beta", "=", "1", ",", "iterations", "=", "30", ",", "pt_file", "=", "'images/Points/14.csv'", ",", "\n", "num_xforms", "=", "1000", ",", "net_size", "=", "32", ",", "model_type", "=", "'CIFAR'", ",", "goal", "=", "None", ",", "eta", "=", "500", ",", "bt", "=", "False", ",", "budget_factor", "=", "200", ",", "\n", "init_theta", "=", "None", ",", "square_mask", "=", "False", ",", "early_boost_exit", "=", "False", ")", ":", "\n", "    ", "\"\"\" Input requirements:\n        x0_large: must be a torch tensor and must be the output size of the final desired result (eg, the larger size)\n        y0: the victim label of x0_large\n        mask: Must consist of ONLY 0's and 1's. If any resizing is done before calling attack(), you must threshold it out so it's only 0's and 1's\n              Must be a torch tensor and must be the size of the noise to be generated (eg, 32 x 32)\n        target_example: The example target image. Must be a torch tensor and must be the size of the noise to be generated (eg, 32 x 32)\n        target: the desired target label\n\n        Attack the original image and return adversarial example\n        model: (pytorch model)\n        (x0, y0): original image\n        mask must be all 0's and 1's and of the resolution that we want to generate noise in\n    \"\"\"", "\n", "with", "open", "(", "'dumped_data.pkl'", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "{", "\n", "'model'", ":", "model", ",", "\n", "'x0_large'", ":", "x0_large", ",", "\n", "'y0'", ":", "y0", ",", "\n", "'mask'", ":", "mask", ",", "\n", "'target_example'", ":", "target_example", ",", "\n", "'target'", ":", "target", ",", "\n", "'beta'", ":", "beta", ",", "\n", "'iterations'", ":", "iterations", ",", "\n", "'pt_file'", ":", "pt_file", ",", "\n", "'num_xforms'", ":", "num_xforms", ",", "\n", "'net_size'", ":", "net_size", ",", "\n", "'model_type'", ":", "model_type", ",", "\n", "}", ",", "f", ")", "\n", "\n", "", "xforms", "=", "get_transform_params", "(", "num_xforms", ",", "model_type", ",", "baseline", "=", "True", ")", "\n", "\n", "query_count", "=", "0", "\n", "\n", "timestart", "=", "time", ".", "time", "(", ")", "\n", "\n", "######### Initialize ##############", "\n", "theta", "=", "None", "\n", "\n", "x0_lg_np", "=", "x0_large", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "x0_np", "=", "cv2", ".", "resize", "(", "x0_lg_np", ",", "(", "mask", ".", "size", "(", ")", "[", "2", "]", ",", "mask", ".", "size", "(", ")", "[", "1", "]", ")", ")", "\n", "x0", "=", "torch", ".", "from_numpy", "(", "x0_np", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "if", "init_theta", "is", "not", "None", ":", "\n", "        ", "theta", "=", "init_theta", "*", "mask", "\n", "", "else", ":", "\n", "        ", "theta", "=", "(", "target_example", "-", "x0", ")", "*", "mask", "\n", "", "theta_np", "=", "theta", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "\n", "theta_np_large", "=", "cv2", ".", "resize", "(", "theta_np", ",", "(", "x0_large", ".", "size", "(", ")", "[", "2", "]", ",", "x0_large", ".", "size", "(", ")", "[", "1", "]", ")", ")", "\n", "theta_np_large_torch", "=", "torch", ".", "from_numpy", "(", "theta_np_large", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "comb_large", "=", "x0_large", "+", "theta_np_large_torch", "\n", "comb_np", "=", "comb_large", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "comb_np", "=", "cv2", ".", "resize", "(", "comb_np", ",", "(", "mask", ".", "size", "(", ")", "[", "2", "]", ",", "mask", ".", "size", "(", ")", "[", "1", "]", ")", ")", "\n", "comb_torch", "=", "torch", ".", "from_numpy", "(", "comb_np", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "xform_imgs", "=", "get_transformed_images", "(", "x0_large", ",", "mask", ",", "xforms", ",", "1.0", ",", "theta", ",", "pt_file", ",", "net_size", "=", "net_size", ")", "\n", "success_rate", ",", "query_ct", "=", "run_predictions", "(", "model", ",", "xform_imgs", ",", "y0", ",", "target", ")", "\n", "query_count", "+=", "query_ct", "\n", "\n", "best_theta", ",", "best_eps", "=", "theta", ",", "success_rate", "\n", "\n", "timeend", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"==========> Found success rate %.4f in %.4f seconds using %d queries\"", "%", "(", "\n", "best_eps", ",", "timeend", "-", "timestart", ",", "query_count", ")", ")", "\n", "\n", "if", "x0_large", "is", "not", "None", ":", "\n", "        ", "init_theta_np", "=", "best_theta", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "init_theta_np", "=", "cv2", ".", "resize", "(", "init_theta_np", ",", "(", "x0_large", ".", "size", "(", ")", "[", "2", "]", ",", "x0_large", ".", "size", "(", ")", "[", "1", "]", ")", ")", "\n", "init_theta_lg_torch", "=", "torch", ".", "from_numpy", "(", "init_theta_np", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "init_attacked", "=", "x0_large", "+", "init_theta_lg_torch", "\n", "\n", "init_np", "=", "init_attacked", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "init_np", "=", "cv2", ".", "cvtColor", "(", "init_np", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "\n", "######### End Initialize ##############", "\n", "\n", "", "timestart", "=", "time", ".", "time", "(", ")", "\n", "\n", "theta", ",", "eps", "=", "best_theta", ".", "clone", "(", ")", ",", "best_eps", "\n", "\n", "opt_count", "=", "0", "\n", "\n", "####### gradient free optimization steps #######", "\n", "iters_taken", "=", "0", "\n", "trivial_iters", "=", "0", "\n", "for", "i", "in", "range", "(", "iterations", ")", ":", "\n", "        ", "iters_taken", "+=", "1", "\n", "print", "(", "'iter: '", ",", "i", ")", "\n", "gradient", "=", "torch", ".", "zeros", "(", "theta", ".", "size", "(", ")", ")", "\n", "q", "=", "10", "\n", "min_g1", "=", "float", "(", "'inf'", ")", "\n", "\n", "# Take q samples of random Gaussian noise to use as new directions, calculate transform_robustness", "\n", "# Used for gradient estimate", "\n", "for", "_", "in", "range", "(", "q", ")", ":", "\n", "            ", "u", "=", "torch", ".", "randn", "(", "theta", ".", "size", "(", ")", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "*", "mask", "\n", "u", "=", "u", "/", "torch", ".", "norm", "(", "u", ")", "\n", "ttt", "=", "theta", "+", "beta", "*", "u", "\n", "\n", "xform_imgs", "=", "get_transformed_images", "(", "x0_large", ",", "mask", ",", "xforms", ",", "1.0", ",", "ttt", ",", "pt_file", ",", "net_size", "=", "net_size", ")", "\n", "eps_ttt", ",", "opt_ct", "=", "run_predictions", "(", "model", ",", "xform_imgs", ",", "y0", ",", "target", ")", "\n", "opt_count", "+=", "opt_ct", "\n", "\n", "gradient", "+=", "(", "eps_ttt", "-", "eps", ")", "/", "beta", "*", "u", "\n", "print", "(", "\"new eps eps beta\"", ",", "eps_ttt", ",", "eps", ",", "beta", ")", "\n", "\n", "if", "bt", "and", "eps_ttt", "<", "min_g1", ":", "\n", "                ", "min_g1", "=", "eps_ttt", "\n", "min_ttt", "=", "ttt", "\n", "\n", "", "", "gradient", "=", "1.0", "/", "q", "*", "gradient", "\n", "\n", "new_eps", "=", "1.0", "\n", "new_theta", "=", "None", "\n", "\n", "if", "bt", ":", "\n", "            ", "min_theta", "=", "theta", "\n", "min_new_eps", "=", "eps", "\n", "\n", "alpha", "=", "500", "\n", "\n", "for", "_", "in", "range", "(", "5", ")", ":", "\n", "                ", "new_theta", "=", "theta", "-", "alpha", "*", "gradient", "\n", "xform_imgs", "=", "get_transformed_images", "(", "x0_large", ",", "mask", ",", "xforms", ",", "1.0", ",", "new_theta", ",", "pt_file", ",", "net_size", "=", "net_size", ")", "\n", "new_eps", ",", "opt_ct", "=", "run_predictions", "(", "model", ",", "xform_imgs", ",", "y0", ",", "target", ")", "\n", "opt_count", "+=", "opt_ct", "\n", "alpha", "=", "alpha", "*", "2", "\n", "if", "new_eps", "<", "min_new_eps", ":", "\n", "                    ", "min_theta", "=", "new_theta", "\n", "min_new_eps", "=", "new_eps", "\n", "", "else", ":", "\n", "                    ", "break", "\n", "\n", "", "", "if", "min_new_eps", ">=", "eps", ":", "\n", "                ", "for", "_", "in", "range", "(", "5", ")", ":", "\n", "                    ", "alpha", "=", "alpha", "*", "0.25", "\n", "new_theta", "=", "theta", "-", "alpha", "*", "gradient", "\n", "xform_imgs", "=", "get_transformed_images", "(", "x0_large", ",", "mask", ",", "xforms", ",", "1.0", ",", "new_theta", ",", "pt_file", ",", "\n", "net_size", "=", "net_size", ")", "\n", "new_eps", ",", "opt_ct", "=", "run_predictions", "(", "model", ",", "xform_imgs", ",", "y0", ",", "target", ")", "\n", "opt_count", "+=", "opt_ct", "\n", "if", "new_eps", "<", "eps", ":", "\n", "                        ", "min_theta", "=", "new_theta", "\n", "min_new_eps", "=", "new_eps", "\n", "break", "\n", "\n", "", "", "", "if", "min_new_eps", "==", "eps", ":", "\n", "                ", "min_theta", "=", "theta", "-", "eta", "*", "gradient", "\n", "xform_imgs", "=", "get_transformed_images", "(", "x0_large", ",", "mask", ",", "xforms", ",", "1.0", ",", "min_theta", ",", "pt_file", ",", "net_size", "=", "net_size", ")", "\n", "min_new_eps", ",", "opt_ct", "=", "run_predictions", "(", "model", ",", "xform_imgs", ",", "y0", ",", "target", ")", "\n", "opt_count", "+=", "opt_ct", "\n", "\n", "", "if", "min_new_eps", "<=", "min_g1", ":", "\n", "                ", "new_theta", ",", "new_eps", "=", "min_theta", ",", "min_new_eps", "\n", "", "else", ":", "\n", "                ", "new_theta", ",", "new_eps", "=", "min_ttt", ",", "min_g1", "\n", "\n", "", "", "else", ":", "\n", "# Take gradient step", "\n", "            ", "new_theta", "=", "theta", "-", "eta", "*", "gradient", "\n", "xform_imgs", "=", "get_transformed_images", "(", "x0_large", ",", "mask", ",", "xforms", ",", "1.0", ",", "new_theta", ",", "pt_file", ",", "net_size", "=", "net_size", ")", "\n", "new_eps", ",", "opt_ct", "=", "run_predictions", "(", "model", ",", "xform_imgs", ",", "y0", ",", "target", ")", "\n", "opt_count", "+=", "opt_ct", "\n", "\n", "", "if", "new_eps", "<", "best_eps", ":", "\n", "            ", "best_theta", ",", "best_eps", "=", "new_theta", ".", "clone", "(", ")", ",", "new_eps", "\n", "\n", "", "theta", ",", "eps", "=", "new_theta", ".", "clone", "(", ")", ",", "new_eps", "\n", "\n", "if", "(", "opt_count", "+", "query_count", "+", "num_xforms", "*", "11", ")", ">", "(", "budget_factor", "*", "num_xforms", ")", ":", "\n", "            ", "break", "\n", "\n", "", "if", "square_mask", "and", "i", "==", "0", "and", "best_eps", ">=", "0.95", "and", "early_boost_exit", ":", "\n", "            ", "break", "\n", "\n", "", "best_theta_inter_full_lg", "=", "best_theta", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "best_theta_inter_full_lg", "=", "cv2", ".", "resize", "(", "best_theta_inter_full_lg", ",", "(", "x0_large", ".", "size", "(", ")", "[", "2", "]", ",", "x0_large", ".", "size", "(", ")", "[", "1", "]", ")", ")", "\n", "best_theta_inter_torch", "=", "torch", ".", "from_numpy", "(", "best_theta_inter_full_lg", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "intermediate2", "=", "x0_large", "+", "1.0", "*", "best_theta_inter_torch", "\n", "\n", "intermediate2_np", "=", "intermediate2", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "intermediate2_np", "=", "cv2", ".", "cvtColor", "(", "intermediate2_np", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "\n", "", "best_theta_np", "=", "best_theta", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "best_theta_np_lg", "=", "cv2", ".", "resize", "(", "best_theta_np", ",", "(", "x0_large", ".", "size", "(", ")", "[", "2", "]", ",", "x0_large", ".", "size", "(", ")", "[", "1", "]", ")", ")", "\n", "best_theta_lg_torch", "=", "torch", ".", "from_numpy", "(", "best_theta_np_lg", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "if", "model_type", "==", "'CIFAR'", ":", "\n", "        ", "adv_example", "=", "add_noise", "(", "x0_large", ",", "mask", ",", "1.0", ",", "best_theta", ")", "\n", "", "else", ":", "\n", "        ", "adv_example", "=", "add_noise", "(", "x0_large", ",", "mask", ",", "1.0", ",", "best_theta", ",", "clip", "=", "False", ")", "\n", "\n", "", "x0_lg_numpy", "=", "x0_large", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "mask_np", "=", "mask", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "mask_np", "=", "cv2", ".", "resize", "(", "mask_np", ",", "(", "x0_large", ".", "size", "(", ")", "[", "2", "]", ",", "x0_large", ".", "size", "(", ")", "[", "1", "]", ")", ")", "\n", "mask_large", "=", "torch", ".", "from_numpy", "(", "mask_np", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "perturb", "=", "torch", ".", "where", "(", "mask_large", ">", "0.0", ",", "adv_example", ",", "torch", ".", "ones", "(", "adv_example", ".", "size", "(", ")", ")", ")", "\n", "\n", "print", "(", "\"final iters_taken: \"", ",", "iters_taken", ")", "\n", "\n", "if", "model_type", "==", "'CIFAR'", ":", "\n", "        ", "return", "adv_example", ",", "(", "1", "-", "best_eps", ")", ",", "perturb", ",", "query_count", "+", "opt_count", ",", "torch", ".", "clamp", "(", "x0", "+", "best_theta", ",", "0", ",", "1", ")", "\n", "", "return", "adv_example", ",", "(", "1", "-", "best_eps", ")", ",", "perturb", ",", "query_count", "+", "opt_count", ",", "best_theta", ",", "torch", ".", "clamp", "(", "x0", "+", "best_theta", ",", "0", ",", "1", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.dist2pixels": [[15, 18], ["None"], "function", ["None"], ["def", "dist2pixels", "(", "dist", ",", "width", ",", "obj_width", "=", "30", ")", ":", "\n", "    ", "dist_inches", "=", "dist", "*", "12", "\n", "return", "1.0", "*", "dist_inches", "*", "width", "/", "obj_width", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.convert2Network": [[20, 35], ["cv2.resize", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.clamp", "torch.clamp", "img.permute().detach().cpu().numpy.permute().detach().cpu().numpy", "torchvision.Normalize", "torch.from_numpy", "torch.from_numpy", "torch.max", "torch.max", "torch.min", "torch.min", "torch.max", "torch.max", "torch.min", "torch.min", "img.permute().detach().cpu().numpy.permute().detach().cpu", "img.permute().detach().cpu().numpy.permute().detach", "img.permute().detach().cpu().numpy.permute"], "function", ["None"], ["", "def", "convert2Network", "(", "img", ",", "is_torch", "=", "True", ",", "net_size", "=", "32", ")", ":", "\n", "    ", "if", "net_size", "==", "32", ":", "# CIFAR ", "\n", "        ", "if", "(", "is_torch", ")", ":", "\n", "            ", "img", "=", "img", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "32", ",", "32", ")", ")", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "img", "=", "torch", ".", "clamp", "(", "img", ",", "0.0", ",", "1.0", ")", "\n", "assert", "(", "torch", ".", "max", "(", "img", ")", "<=", "1.0", "and", "torch", ".", "min", "(", "img", ")", ">=", "0.0", ")", "\n", "img", "=", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "1.0", ",", "1.0", ",", "1.0", ")", ")", "(", "img", ")", "\n", "assert", "(", "torch", ".", "max", "(", "img", ")", "<=", "0.5", "and", "torch", ".", "min", "(", "img", ")", ">=", "-", "0.5", ")", "\n", "", "else", ":", "\n", "        ", "assert", "False", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.apply_transformation": [[37, 65], ["torch.from_numpy().permute.permute().detach().cpu().numpy", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.where", "torch.where", "torch.where.permute().detach().cpu().numpy", "numpy.clip", "pg_transforms.dist2pixels", "pg_transforms.dist2pixels", "perspective_transform.get_perspective_transform", "numpy.empty", "range", "cv2.LUT", "numpy.clip", "pg_transforms.convert2Network", "cv2.GaussianBlur", "numpy.clip", "torch.from_numpy().permute.permute().detach().cpu", "torch.from_numpy", "torch.from_numpy", "torch.where.permute().detach().cpu", "pow", "torch.from_numpy().permute.permute().detach", "torch.where.permute().detach", "torch.from_numpy().permute.permute", "torch.where.permute"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.dist2pixels", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.dist2pixels", "home.repos.pwc.inspect_result.ryan-feng_graphite.None.perspective_transform.get_perspective_transform", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.convert2Network"], ["", "def", "apply_transformation", "(", "img", ",", "mask", ",", "pert", ",", "angle", ",", "dist", ",", "gamma", ",", "blur", ",", "crop_percent", ",", "crop_off_x", ",", "crop_off_y", ",", "pt_file", ",", "net_size", "=", "32", ",", "obj_width", "=", "30", ",", "focal", "=", "3", ",", "nps", "=", "False", ")", ":", "\n", "    ", "pert_np", "=", "pert", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "nps", ":", "\n", "        ", "assert", "False", "\n", "\n", "", "if", "blur", "!=", "0", ":", "\n", "        ", "pert_np", "=", "cv2", ".", "GaussianBlur", "(", "pert_np", ",", "(", "blur", ",", "blur", ")", ",", "0", ")", "\n", "\n", "", "pert", "=", "torch", ".", "from_numpy", "(", "pert_np", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "att", "=", "torch", ".", "where", "(", "mask", ">", "0.5", ",", "pert", ",", "img", ")", "\n", "att_np", "=", "att", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "att_np", "=", "np", ".", "clip", "(", "att_np", ",", "0.0", ",", "1.0", ")", "\n", "\n", "dist", "=", "dist2pixels", "(", "dist", ",", "att_np", ".", "shape", "[", "1", "]", ",", "obj_width", ")", "\n", "focal", "=", "dist2pixels", "(", "focal", ",", "att_np", ".", "shape", "[", "1", "]", ",", "obj_width", ")", "\n", "att_np", "=", "get_perspective_transform", "(", "att_np", ",", "angle", ",", "att_np", ".", "shape", "[", "1", "]", ",", "att_np", ".", "shape", "[", "0", "]", ",", "focal", ",", "dist", ",", "crop_percent", ",", "crop_off_x", ",", "crop_off_y", ",", "pt_file", ")", "\n", "\n", "# Gamma", "\n", "att_uint", "=", "(", "att_np", "*", "255.0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "table", "=", "np", ".", "empty", "(", "(", "256", ")", ",", "np", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "256", ")", ":", "\n", "        ", "table", "[", "i", "]", "=", "np", ".", "clip", "(", "pow", "(", "i", "/", "255.0", ",", "gamma", ")", "*", "255.0", ",", "0", ",", "255", ")", "\n", "", "att_uint", "=", "cv2", ".", "LUT", "(", "att_uint", ",", "table", ")", "\n", "att_np", "=", "(", "att_uint", "/", "255.0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "att_np", "=", "np", ".", "clip", "(", "att_np", ",", "0.0", ",", "1.0", ")", "\n", "\n", "return", "convert2Network", "(", "att_np", ",", "False", ",", "net_size", "=", "net_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.get_transform_params": [[67, 95], ["range", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "torchvision.append", "numpy.random.uniform", "int", "round", "int", "math.floor", "numpy.random.uniform", "len"], "function", ["None"], ["", "def", "get_transform_params", "(", "num_xforms", ",", "model_type", "=", "'CIFAR'", ",", "nps", "=", "False", ",", "baseline", "=", "False", ")", ":", "\n", "    ", "blur_kernels", "=", "[", "0", ",", "3", ",", "5", ",", "7", "]", "\n", "if", "baseline", ":", "\n", "        ", "blur_kernels", "=", "[", "0", ",", "3", "]", "\n", "", "transforms", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_xforms", ")", ":", "\n", "        ", "if", "model_type", "==", "'CIFAR'", ":", "\n", "            ", "angle", "=", "np", ".", "random", ".", "uniform", "(", "-", "50", ",", "50", ")", "\n", "if", "baseline", ":", "\n", "                ", "angle", "=", "np", ".", "random", ".", "uniform", "(", "-", "10", ",", "10", ")", "\n", "", "max_dist", "=", "15.0", "\n", "if", "baseline", ":", "\n", "                ", "max_dist", "=", "3.0", "\n", "", "dist", "=", "np", ".", "random", ".", "uniform", "(", "3.0", ",", "max_dist", ")", "\n", "gamma", "=", "np", ".", "random", ".", "uniform", "(", "1.0", ",", "1", ")", "\n", "flip_flag", "=", "np", ".", "random", ".", "uniform", "(", "0.0", ",", "1.0", ")", "\n", "if", "int", "(", "round", "(", "flip_flag", ")", ")", "==", "1", ":", "\n", "                ", "gamma", "=", "1.0", "/", "gamma", "\n", "\n", "", "crop_percent", "=", "np", ".", "random", ".", "uniform", "(", "-", "0.03125", ",", "0.03125", ")", "\n", "crop_off_x", "=", "np", ".", "random", ".", "uniform", "(", "-", "0.03125", ",", "0.03125", ")", "\n", "crop_off_y", "=", "np", ".", "random", ".", "uniform", "(", "-", "0.03125", ",", "0.03125", ")", "\n", "blur", "=", "blur_kernels", "[", "int", "(", "math", ".", "floor", "(", "np", ".", "random", ".", "uniform", "(", "0.0", ",", "1.0", ")", "*", "len", "(", "blur_kernels", ")", ")", ")", "]", "\n", "xform", "=", "(", "angle", ",", "dist", ",", "gamma", ",", "blur", ",", "crop_percent", ",", "crop_off_x", ",", "crop_off_y", ",", "30", ",", "3", ",", "nps", ")", "\n", "transforms", ".", "append", "(", "xform", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", "\n", "", "", "return", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.add_noise": [[97, 114], ["mask.permute().cpu().numpy", "image.permute().cpu().numpy", "theta.permute().cpu().numpy", "cv2.resize", "cv2.resize", "numpy.where", "torch.from_numpy().permute", "torch.from_numpy().permute", "numpy.clip", "numpy.where", "mask.permute().cpu", "image.permute().cpu", "theta.permute().cpu", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy", "torch.from_numpy", "image.size", "image.size", "image.size", "image.size", "mask.permute", "image.permute", "theta.permute", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "def", "add_noise", "(", "image", ",", "mask", ",", "lbd", ",", "theta", ",", "return_pert_and_mask", "=", "False", ",", "clip", "=", "True", ")", ":", "\n", "    ", "mask_np", "=", "mask", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "image_np", "=", "image", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "theta_np", "=", "theta", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "theta_large_np", "=", "cv2", ".", "resize", "(", "theta_np", ",", "(", "image", ".", "size", "(", ")", "[", "2", "]", ",", "image", ".", "size", "(", ")", "[", "1", "]", ")", ")", "\n", "comb", "=", "image_np", "+", "lbd", "*", "theta_large_np", "\n", "\n", "mask_large_np", "=", "cv2", ".", "resize", "(", "mask_np", ",", "(", "image", ".", "size", "(", ")", "[", "2", "]", ",", "image", ".", "size", "(", ")", "[", "1", "]", ")", ")", "\n", "mask_large_np", "=", "np", ".", "where", "(", "mask_large_np", ">", "0.5", ",", "1.0", ",", "0.0", ")", "\n", "\n", "if", "clip", "==", "True", ":", "\n", "        ", "comb", "=", "np", ".", "clip", "(", "comb", ",", "0", ",", "1", ")", "\n", "", "if", "return_pert_and_mask", ":", "\n", "        ", "pert", "=", "np", ".", "where", "(", "mask_large_np", ">", "0.5", ",", "comb", ",", "0", ")", "\n", "return", "torch", ".", "from_numpy", "(", "comb", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ",", "torch", ".", "from_numpy", "(", "pert", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ",", "torch", ".", "from_numpy", "(", "mask_large_np", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "", "return", "torch", ".", "from_numpy", "(", "comb", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.get_transformed_images": [[116, 128], ["pg_transforms.add_noise", "len", "images.append", "pg_transforms.convert2Network", "pg_transforms.apply_transformation"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.add_noise", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.convert2Network", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.apply_transformation"], ["", "def", "get_transformed_images", "(", "image", ",", "mask", ",", "transforms", ",", "lbd", ",", "theta", ",", "pt_file", "=", "'../inputs/GTSRB/Points/14.csv'", ",", "net_size", "=", "32", ")", ":", "\n", "    ", "att", ",", "pert", ",", "mask", "=", "add_noise", "(", "image", ",", "mask", ",", "lbd", ",", "theta", ",", "True", ")", "\n", "\n", "if", "len", "(", "transforms", ")", "==", "0", ":", "\n", "        ", "return", "[", "convert2Network", "(", "att", ",", "net_size", "=", "net_size", ")", "]", "\n", "\n", "", "images", "=", "[", "]", "\n", "for", "transform", "in", "transforms", ":", "\n", "        ", "angle", ",", "dist", ",", "gamma", ",", "blur", ",", "crop_percent", ",", "crop_off_x", ",", "crop_off_y", ",", "obj_width", ",", "focal", ",", "nps", "=", "transform", "\n", "images", ".", "append", "(", "apply_transformation", "(", "image", ",", "mask", ",", "pert", ",", "angle", ",", "dist", ",", "gamma", ",", "blur", ",", "crop_percent", ",", "crop_off_x", ",", "crop_off_y", ",", "pt_file", ",", "net_size", ",", "obj_width", ",", "focal", ",", "nps", ")", ")", "\n", "\n", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.transform_wb": [[130, 163], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "pg_transforms.dist2pixels", "pg_transforms.dist2pixels", "perspective_transform.get_perspective_transform", "kornia.enhance.adjust_gamma", "pg_transforms.convert2NetworkWB", "numpy.zeros", "cv2.GaussianBlur", "numpy.repeat", "torch.from_numpy", "torch.from_numpy", "torch.Conv2d", "torch.from_numpy.to", "blur.to.to", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.zeros", "torch.zeros", "blur.to.", "torch.where.size", "torch.where.size", "torch.where.size", "torch.where.size", "torch.where.size"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.dist2pixels", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.dist2pixels", "home.repos.pwc.inspect_result.ryan-feng_graphite.None.perspective_transform.get_perspective_transform", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.convert2NetworkWB"], ["", "def", "transform_wb", "(", "orig", ",", "att", ",", "mask", ",", "transform", ",", "pt_file", "=", "'../inputs/GTSRB/Points/14.csv'", ",", "net_size", "=", "32", ")", ":", "\n", "    ", "angle", ",", "dist", ",", "gamma", ",", "blur", ",", "crop_percent", ",", "crop_off_x", ",", "crop_off_y", ",", "obj_width", ",", "focal", ",", "_", "=", "transform", "\n", "att", "=", "torch", ".", "clamp", "(", "att", ",", "0.0", ",", "1.0", ")", "\n", "\n", "if", "blur", "!=", "0", ":", "\n", "        ", "kernel", "=", "np", ".", "zeros", "(", "(", "blur", "*", "2", "-", "1", ",", "blur", "*", "2", "-", "1", ")", ")", "\n", "kernel", "[", "blur", "-", "1", ",", "blur", "-", "1", "]", "=", "1", "\n", "kernel", "=", "cv2", ".", "GaussianBlur", "(", "kernel", ",", "(", "blur", ",", "blur", ")", ",", "0", ")", "\n", "kernel", "=", "kernel", "[", "blur", "//", "2", ":", "blur", "//", "2", "+", "blur", ",", "blur", "//", "2", ":", "blur", "//", "2", "+", "blur", "]", "\n", "kernel", "=", "kernel", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", "\n", "kernel", "=", "np", ".", "repeat", "(", "kernel", "[", "np", ".", "newaxis", ",", ":", ",", ":", ",", ":", "]", ",", "3", ",", "axis", "=", "0", ")", "\n", "kernel_torch", "=", "torch", ".", "from_numpy", "(", "kernel", ")", "\n", "blur", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "3", ",", "\n", "kernel_size", "=", "blur", ",", "groups", "=", "3", ",", "bias", "=", "False", ",", "padding", "=", "blur", "//", "2", ")", "\n", "blur", ".", "weight", ".", "data", "=", "kernel_torch", ".", "to", "(", "att", ".", "dtype", ")", "\n", "blur", ".", "weight", ".", "requires_grad", "=", "False", "\n", "blur", "=", "blur", ".", "to", "(", "att", ".", "device", ")", "\n", "# the below is done this way to match the black box implementation", "\n", "pert", "=", "torch", ".", "where", "(", "mask", ">", "0.5", ",", "att", ",", "torch", ".", "zeros", "(", "att", ".", "size", "(", ")", ")", ")", "\n", "att", "=", "torch", ".", "where", "(", "mask", ">", "0.5", ",", "blur", "(", "pert", ")", ",", "orig", ")", "\n", "", "else", ":", "\n", "        ", "att", "=", "torch", ".", "where", "(", "mask", ">", "0.5", ",", "att", ",", "orig", ")", "\n", "\n", "", "att", "=", "torch", ".", "clamp", "(", "att", ",", "0.0", ",", "1.0", ")", "\n", "dist", "=", "dist2pixels", "(", "dist", ",", "att", ".", "size", "(", ")", "[", "2", "]", ",", "obj_width", ")", "\n", "focal", "=", "dist2pixels", "(", "focal", ",", "att", ".", "size", "(", ")", "[", "2", "]", ",", "obj_width", ")", "\n", "att", "=", "get_perspective_transform", "(", "att", ",", "angle", ",", "att", ".", "size", "(", ")", "[", "3", "]", ",", "att", ".", "size", "(", ")", "[", "2", "]", ",", "focal", ",", "dist", ",", "crop_percent", ",", "crop_off_x", ",", "crop_off_y", ",", "pt_file", ",", "whitebox", "=", "True", ")", "\n", "\n", "# Gamma", "\n", "att", "=", "adjust_gamma", "(", "att", ",", "gamma", ")", "\n", "\n", "\n", "return", "convert2NetworkWB", "(", "att", ",", "True", ",", "net_size", "=", "net_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.convert2NetworkWB": [[164, 175], ["torch.clamp.to", "kornia.geometry.transform.resize", "torch.clamp", "torch.clamp", "torch.max", "torch.max", "torch.min", "torch.min"], "function", ["None"], ["", "def", "convert2NetworkWB", "(", "img", ",", "is_torch", "=", "True", ",", "net_size", "=", "32", ")", ":", "\n", "    ", "orig_device", "=", "img", ".", "device", "\n", "if", "net_size", "==", "32", ":", "# CIFAR ", "\n", "        ", "img", "=", "resize", "(", "img", ",", "32", ",", "align_corners", "=", "False", ")", "\n", "img", "=", "torch", ".", "clamp", "(", "img", ",", "0.0", ",", "1.0", ")", "\n", "assert", "(", "torch", ".", "max", "(", "img", ")", "<=", "1.0", "and", "torch", ".", "min", "(", "img", ")", ">=", "0.0", ")", "\n", "\n", "", "else", ":", "\n", "        ", "assert", "False", "\n", "\n", "", "return", "img", ".", "to", "(", "orig_device", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ryan-feng_graphite.whitebox.whitebox_patch.eval": [[23, 37], ["len", "torch.no_grad", "transforms.transform_wb", "model", "preds.append", "int", "len", "x.unsqueeze.unsqueeze", "[].item", "model.argmax().detach().cpu().numpy", "torch.nn.functional.softmax", "model.argmax().detach().cpu", "model.argmax().detach", "model.argmax"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.transform_wb"], ["def", "eval", "(", "orig_x", ",", "x", ",", "mask", ",", "target_label", ",", "model", ",", "xforms", ",", "pt_file", ",", "net_size", "=", "32", ")", ":", "\n", "    ", "successes", "=", "0", "\n", "preds", "=", "[", "]", "\n", "for", "xform", "in", "xforms", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "len", "(", "x", ".", "shape", ")", "==", "3", ":", "\n", "                ", "x", "=", "x", ".", "unsqueeze", "(", "0", ")", "\n", "", "transformed_x", "=", "transform_wb", "(", "orig_x", ",", "x", ",", "mask", ",", "xform", ",", "pt_file", ",", "net_size", ")", "\n", "transformed_x", "=", "transformed_x", "-", "0.5", "\n", "logits", "=", "model", "(", "transformed_x", ")", "\n", "preds", ".", "append", "(", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "[", "0", ",", "target_label", "]", ".", "item", "(", ")", ")", "\n", "success", "=", "int", "(", "logits", ".", "argmax", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "==", "target_label", ")", "\n", "successes", "+=", "success", "\n", "", "", "return", "successes", "/", "len", "(", "xforms", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.whitebox.whitebox_attack.eval": [[23, 37], ["len", "torch.no_grad", "transforms.transform_wb", "model", "preds.append", "int", "len", "x.unsqueeze.unsqueeze", "[].item", "model.argmax().detach().cpu().numpy", "torch.nn.functional.softmax", "model.argmax().detach().cpu", "model.argmax().detach", "model.argmax"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.transform_wb"], ["def", "eval", "(", "orig_x", ",", "x", ",", "mask", ",", "target_label", ",", "model", ",", "xforms", ",", "pt_file", ",", "net_size", "=", "32", ")", ":", "\n", "    ", "successes", "=", "0", "\n", "preds", "=", "[", "]", "\n", "for", "xform", "in", "xforms", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "len", "(", "x", ".", "shape", ")", "==", "3", ":", "\n", "                ", "x", "=", "x", ".", "unsqueeze", "(", "0", ")", "\n", "", "transformed_x", "=", "transform_wb", "(", "orig_x", ",", "x", ",", "mask", ",", "xform", ",", "pt_file", ",", "net_size", ")", "\n", "transformed_x", "=", "transformed_x", "-", "0.5", "\n", "logits", "=", "model", "(", "transformed_x", ")", "\n", "preds", ".", "append", "(", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "[", "0", ",", "target_label", "]", ".", "item", "(", ")", ")", "\n", "success", "=", "int", "(", "logits", ".", "argmax", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "==", "target_label", ")", "\n", "successes", "+=", "success", "\n", "", "", "return", "successes", "/", "len", "(", "xforms", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.OpenALPR.OpenALPRBorderNet.OpenALPRBorderNet.__init__": [[11, 13], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "vic_lp", ")", ":", "\n", "        ", "self", ".", "vic_lp", "=", "vic_lp", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.OpenALPR.OpenALPRBorderNet.OpenALPRBorderNet.run_alpr_detect": [[14, 23], ["image.permute().numpy", "cv2.cvtColor", "cv2.imwrite", "subprocess.run", "subprocess.run", "subprocess.run", "subprocess.run.stdout.decode", "image.permute"], "methods", ["None"], ["", "def", "run_alpr_detect", "(", "self", ",", "image", ")", ":", "\n", "        ", "img_np", "=", "image", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "img_np", "=", "cv2", ".", "cvtColor", "(", "img_np", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "img_path", "=", "'temp.jpg'", "\n", "cv2", ".", "imwrite", "(", "img_path", ",", "img_np", "*", "255.0", ")", "\n", "a", "=", "subprocess", ".", "run", "(", "[", "\"alpr\"", ",", "\"-c\"", ",", "\"us\"", ",", "img_path", "]", ",", "stdout", "=", "subprocess", ".", "PIPE", ")", "\n", "b", "=", "subprocess", ".", "run", "(", "[", "\"awk\"", ",", "\"{getline; print $2;}\"", "]", ",", "input", "=", "a", ".", "stdout", ",", "stdout", "=", "subprocess", ".", "PIPE", ")", "\n", "c", "=", "subprocess", ".", "run", "(", "[", "\"head\"", ",", "\"-1\"", "]", ",", "input", "=", "b", ".", "stdout", ",", "stdout", "=", "subprocess", ".", "PIPE", ")", "\n", "return", "c", ".", "stdout", ".", "decode", "(", "'utf-8'", ")", "[", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.OpenALPR.OpenALPRBorderNet.OpenALPRBorderNet.predict": [[25, 44], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.zeros.to", "torch.zeros.to", "torch.zeros.to", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "image.clone", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "len", "predict[].item", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "len", "image_batch.unsqueeze.unsqueeze.unsqueeze", "OpenALPRBorderNet.OpenALPRBorderNet.run_alpr_detect", "image.size", "image.size", "image_batch.unsqueeze.unsqueeze.size", "torch.zeros.size", "torch.zeros.size", "torch.zeros.size"], "methods", ["home.repos.pwc.inspect_result.ryan-feng_graphite.OpenALPR.OpenALPRBorderNet.OpenALPRBorderNet.run_alpr_detect"], ["", "def", "predict", "(", "self", ",", "image", ",", "target", "=", "None", ")", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "image_batch", "=", "image", ".", "clone", "(", ")", "\n", "if", "len", "(", "image", ".", "size", "(", ")", ")", "<", "4", ":", "\n", "                ", "image_batch", "=", "image_batch", ".", "unsqueeze", "(", "0", ")", "\n", "", "predict", "=", "torch", ".", "zeros", "(", "(", "image_batch", ".", "size", "(", ")", "[", "0", "]", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "for", "i", "in", "range", "(", "predict", ".", "size", "(", ")", "[", "0", "]", ")", ":", "\n", "                ", "lp", "=", "self", ".", "run_alpr_detect", "(", "image_batch", "[", "i", "]", ")", "\n", "if", "lp", "!=", "self", ".", "vic_lp", ":", "\n", "                    ", "predict", "[", "i", "]", "=", "1", "\n", "", "else", ":", "\n", "                    ", "predict", "[", "i", "]", "=", "0", "\n", "\n", "", "", "", "predict", "=", "predict", ".", "to", "(", "device", ")", "\n", "\n", "if", "len", "(", "image", ".", "size", "(", ")", ")", "<", "4", ":", "\n", "            ", "return", "predict", "[", "0", "]", ".", "item", "(", ")", "\n", "", "return", "predict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.l0_and_opt_normal.Logger.__init__": [[24, 32], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "\n", "self", ".", "log_dict", "=", "{", "\n", "'victim_label'", ":", "args", ".", "victim_label", ",", "\n", "'target_label'", ":", "args", ".", "target_label", ",", "\n", "'args'", ":", "args", ",", "\n", "'round_results'", ":", "{", "}", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.l0_and_opt_normal.Logger.update": [[34, 40], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "current_round", ",", "transform_robustness", ",", "query_count", ",", "mask", ",", "adv_img", ")", ":", "\n", "        ", "self", ".", "log_dict", "[", "'round_results'", "]", "[", "current_round", "]", "=", "{", "\n", "'query_count'", ":", "query_count", ",", "\n", "'transform_robustness'", ":", "transform_robustness", ",", "\n", "'mask'", ":", "mask", ",", "\n", "'adv_img'", ":", "adv_img", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.l0_and_opt_normal.Logger.save": [[42, 58], ["list", "list.sort", "os.path.exists", "os.makedirs", "open", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "l0_and_opt_normal.Logger.log_dict[].keys", "len", "print", "print", "print", "torchvision.utils.save_image", "torchvision.utils.save_image", "os.path.join", "os.path.join", "os.path.join", "torch.sum().item", "torch.sum"], "methods", ["None"], ["", "def", "save", "(", "self", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "args", ".", "log_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "args", ".", "log_dir", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "log_dir", ",", "'results_victim_label={}_target_label={}.pkl'", ".", "format", "(", "\n", "self", ".", "args", ".", "victim_label", ",", "self", ".", "args", ".", "target_label", ")", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "self", ".", "log_dict", ",", "f", ")", "\n", "\n", "", "rounds", "=", "list", "(", "self", ".", "log_dict", "[", "'round_results'", "]", ".", "keys", "(", ")", ")", "\n", "rounds", ".", "sort", "(", ")", "\n", "if", "len", "(", "rounds", ")", ">", "0", ":", "\n", "            ", "last_round", "=", "rounds", "[", "-", "1", "]", "\n", "print", "(", "\"Final query count:\"", ",", "self", ".", "log_dict", "[", "'round_results'", "]", "[", "last_round", "]", "[", "'query_count'", "]", ")", "\n", "print", "(", "\"Final transform_robustness:\"", ",", "self", ".", "log_dict", "[", "'round_results'", "]", "[", "last_round", "]", "[", "'transform_robustness'", "]", ")", "\n", "print", "(", "\"Final mask_size:\"", ",", "torch", ".", "sum", "(", "self", ".", "log_dict", "[", "'round_results'", "]", "[", "last_round", "]", "[", "'mask'", "]", ")", ".", "item", "(", ")", "/", "3", ")", "\n", "save_image", "(", "self", ".", "log_dict", "[", "'round_results'", "]", "[", "last_round", "]", "[", "'adv_img'", "]", ",", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "log_dir", ",", "'results_victim_label={}_target_label={}.png'", ".", "format", "(", "self", ".", "args", ".", "victim_label", ",", "self", ".", "args", ".", "target_label", ")", ")", ")", "\n", "save_image", "(", "self", ".", "log_dict", "[", "'round_results'", "]", "[", "last_round", "]", "[", "'mask'", "]", ",", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "log_dir", ",", "'results_victim_label={}_target_label={}_mask.png'", ".", "format", "(", "self", ".", "args", ".", "victim_label", ",", "self", ".", "args", ".", "target_label", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.l0_and_opt_normal.compute_transform_robustness": [[60, 66], ["transforms.get_transformed_images", "utils.run_predictions", "img.detach().cpu", "delta.detach().cpu", "img.detach", "delta.detach"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.get_transformed_images", "home.repos.pwc.inspect_result.ryan-feng_graphite.None.utils.run_predictions"], ["", "", "", "def", "compute_transform_robustness", "(", "img", ",", "delta", ",", "mask", ",", "model", ",", "xforms", ",", "xforms_pt_file", ",", "model_input_size", ",", "target_label", ")", ":", "\n", "    ", "xform_imgs", "=", "get_transformed_images", "(", "img", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "mask", ",", "xforms", ",", "1.0", ",", "delta", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "\n", "xforms_pt_file", ",", "\n", "net_size", "=", "model_input_size", ")", "\n", "neg_tr", ",", "qc", "=", "run_predictions", "(", "model", ",", "xform_imgs", ",", "-", "1", ",", "target_label", ")", "\n", "return", "1", "-", "neg_tr", ",", "qc", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.l0_and_opt_normal.main": [[68, 188], ["print", "print", "print", "prettytable.PrettyTable", "vars", "print", "l0_and_opt_normal.Logger", "cv2.imread", "cv2.cvtColor", "torch.from_numpy().cuda().permute().cuda", "cv2.resize", "torch.from_numpy().cuda().permute().cuda", "cv2.imread", "cv2.cvtColor", "cv2.resize", "torch.from_numpy().cuda().permute().cuda", "cv2.imread", "numpy.where", "transforms.get_transform_params", "GTSRB.GTSRBNet.GTSRBNet", "torch.cuda.is_available", "torch.nn.DataParallel.eval", "torch.load", "model.load_state_dict", "print", "range", "l0_and_opt_normal.Logger.save", "prettytable.PrettyTable.add_row", "numpy.array", "numpy.array", "numpy.array", "torch.from_numpy().permute().cuda", "torch.nn.DataParallel.cuda", "torch.nn.DataParallel", "torch.cuda.is_available", "print", "print", "print", "opt_normal.attack_targeted", "adv_img.detach().cuda.detach().cuda", "l0_and_opt_normal.compute_transform_robustness", "print", "cv2.resize", "torch.from_numpy().permute().to", "l0_and_opt_normal.Logger.update", "final_avg_grad.cuda.cuda", "print", "torch.sum", "range", "print", "torch.from_numpy().cuda().permute", "torch.from_numpy().cuda().permute", "torch.from_numpy().cuda().permute", "torch.from_numpy().cuda().permute().cuda.detach().cpu", "np.where.cpu", "print", "torch.zeros_like", "print", "torch.abs", "range", "print", "torch.sum", "__file__.split", "getattr", "torch.from_numpy().permute", "adv_img.detach().cuda.detach", "torch.from_numpy().permute", "torch.isnan", "range", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda().permute().cuda.detach().cpu", "torch.from_numpy().cuda().permute().cuda.detach", "utils.run_predictions", "pixelwise_avg_grads[].sum", "torch.from_numpy", "torch.from_numpy", "mask[].sum", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().cuda().permute().cuda.detach", "mask[].sum", "pixelwise_avg_grads[].sum.item", "pixelwise_avg_grads[].sum.item"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.get_transform_params", "home.repos.pwc.inspect_result.ryan-feng_graphite.whitebox.whitebox_attack.eval", "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.l0_and_opt_eot.Logger.save", "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.opt_normal.attack_targeted", "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.l0_and_opt_eot.compute_transform_robustness", "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.l0_and_opt_eot.Logger.update", "home.repos.pwc.inspect_result.ryan-feng_graphite.None.utils.run_predictions"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "print", "(", "'-----------------------------------------------------------------------------------'", ")", "\n", "print", "(", "'Running baseline: {}'", ".", "format", "(", "__file__", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", ")", "\n", "print", "(", "'-----------------------------------------------------------------------------------'", ")", "\n", "assert", "args", ".", "model", "==", "'GTSRB'", "\n", "args_table", "=", "PrettyTable", "(", "[", "'Argument'", ",", "'Value'", "]", ")", "\n", "for", "arg", "in", "vars", "(", "args", ")", ":", "\n", "        ", "args_table", ".", "add_row", "(", "[", "arg", ",", "getattr", "(", "args", ",", "arg", ")", "]", ")", "\n", "", "print", "(", "args_table", ")", "\n", "logger", "=", "Logger", "(", "args", ")", "\n", "\n", "# Load victim img.", "\n", "img", "=", "cv2", ".", "imread", "(", "args", ".", "victim_img_path", ")", "\n", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "img_large", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255.0", "\n", "img_large", "=", "torch", ".", "from_numpy", "(", "img_large", ")", ".", "cuda", "(", ")", ".", "permute", "(", "(", "2", ",", "0", ",", "1", ")", ")", ".", "cuda", "(", ")", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "32", ",", "32", ")", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255.0", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "cuda", "(", ")", ".", "permute", "(", "(", "2", ",", "0", ",", "1", ")", ")", ".", "cuda", "(", ")", "\n", "img", ".", "requires_grad", "=", "True", "\n", "\n", "# Load target img.", "\n", "tar_img", "=", "cv2", ".", "imread", "(", "args", ".", "target_img_path", ")", "\n", "tar_img", "=", "cv2", ".", "cvtColor", "(", "tar_img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "tar_img", "=", "cv2", ".", "resize", "(", "tar_img", ",", "(", "32", ",", "32", ")", ")", "\n", "tar_img", "=", "np", ".", "array", "(", "tar_img", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255.0", "\n", "tar_img", "=", "torch", ".", "from_numpy", "(", "tar_img", ")", ".", "cuda", "(", ")", ".", "permute", "(", "(", "2", ",", "0", ",", "1", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "# Load starting mask.", "\n", "mask", "=", "cv2", ".", "imread", "(", "args", ".", "initial_mask_path", ")", "\n", "mask", "=", "np", ".", "where", "(", "mask", ">", "128", ",", "255", ",", "0", ")", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "cuda", "(", ")", "/", "255.0", "\n", "\n", "# Load transforms.", "\n", "xforms", "=", "get_transform_params", "(", "args", ".", "num_xforms", ",", "args", ".", "model", ",", "baseline", "=", "True", ")", "\n", "\n", "# Load net.", "\n", "net", "=", "GTSRBNet", "(", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "net", ".", "cuda", "(", ")", "\n", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "net", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "", "net", ".", "eval", "(", ")", "\n", "model", "=", "net", ".", "module", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "net", "\n", "checkpoint", "=", "torch", ".", "load", "(", "'../GTSRB/checkpoint_us.tar'", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model_state_dict'", "]", ")", "\n", "\n", "# Attack.", "\n", "query_count", "=", "0", "\n", "print", "(", "'Initializing...'", ")", "\n", "opt_theta_initializer", "=", "None", "\n", "opt_lbd_initializer", "=", "None", "\n", "for", "rounds", "in", "range", "(", "args", ".", "max_rounds", ")", ":", "\n", "        ", "print", "(", "'Beginning round: {}'", ".", "format", "(", "rounds", ")", ")", "\n", "print", "(", "'Stage 1: Opt-Attack.'", ")", "\n", "\n", "# Gradient estimation.", "\n", "print", "(", "'Searching for adversarial example...'", ")", "\n", "adv_img", ",", "opt_theta_initializer", ",", "qc", ",", "_", ",", "final_avg_grad", ",", "opt_lbd_initializer", "=", "attack_targeted", "(", "model", ",", "\n", "[", "(", "tar_img", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "\n", "args", ".", "target_label", ")", "]", ",", "\n", "img", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "\n", "args", ".", "victim_label", ",", "args", ".", "target_label", ",", "\n", "mask", ".", "cpu", "(", ")", ",", "opt_theta_initializer", ",", "opt_lbd_initializer", ")", "\n", "query_count", "+=", "qc", "\n", "adv_img", "=", "adv_img", ".", "detach", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "if", "opt_lbd_initializer", "<", "0", "or", "run_predictions", "(", "model", ",", "[", "adv_img", "]", ",", "-", "1", ",", "args", ".", "target_label", ")", "[", "0", "]", "!=", "0", ":", "\n", "            ", "print", "(", "'Opt could not find an adversarial example. End.'", ")", "\n", "query_count", "+=", "1", "\n", "break", "\n", "\n", "", "query_count", "+=", "1", "\n", "transform_robustness", ",", "qc", "=", "compute_transform_robustness", "(", "adv_img", ",", "torch", ".", "zeros_like", "(", "adv_img", ")", ",", "mask", ",", "model", ",", "xforms", ",", "\n", "args", ".", "xforms_pt_file", ",", "args", ".", "model_input_size", ",", "args", ".", "target_label", ")", "\n", "query_count", "+=", "qc", "\n", "print", "(", "'Found adversarial example | transform_robustness: {}%'", ".", "format", "(", "transform_robustness", "*", "100", ")", ")", "\n", "\n", "delta_np", "=", "(", "adv_img", "-", "img", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "delta_np_large", "=", "cv2", ".", "resize", "(", "delta_np", ",", "(", "244", ",", "244", ")", ")", "\n", "delta_large_torch", "=", "torch", ".", "from_numpy", "(", "delta_np_large", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "to", "(", "img", ".", "device", ")", "\n", "adv_img_large", "=", "img_large", "+", "delta_large_torch", "\n", "logger", ".", "update", "(", "rounds", ",", "transform_robustness", ",", "query_count", ",", "mask", ",", "adv_img_large", ")", "\n", "\n", "if", "final_avg_grad", "is", "None", ":", "\n", "            ", "print", "(", "\"Opt could not find a gradient direction. End\"", ")", "\n", "break", "\n", "\n", "", "final_avg_grad", "=", "final_avg_grad", ".", "cuda", "(", ")", "\n", "\n", "print", "(", "'Stage 2: Mask reduction.'", ")", "\n", "pert", "=", "adv_img", "-", "img", "\n", "final_avg_grad", "[", "torch", ".", "isnan", "(", "final_avg_grad", ")", "]", "=", "0", "\n", "final_avg_grad", "=", "mask", "*", "final_avg_grad", "*", "pert", "\n", "pixelwise_avg_grads", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "final_avg_grad", ")", ",", "dim", "=", "0", ")", "\n", "\n", "# Find minimum gradient patches and remove them.", "\n", "for", "_", "in", "range", "(", "args", ".", "patches_per_round", ")", ":", "\n", "            ", "patch_removal_size", "=", "args", ".", "patch_removal_size", "\n", "patch_removal_interval", "=", "args", ".", "patch_removal_interval", "\n", "min_patch_grad", "=", "99999999999999999", "\n", "min_patch_grad_idx", "=", "None", "\n", "for", "i", "in", "range", "(", "0", ",", "pixelwise_avg_grads", ".", "shape", "[", "0", "]", "-", "patch_removal_size", "+", "1", ",", "patch_removal_interval", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "0", ",", "pixelwise_avg_grads", ".", "shape", "[", "1", "]", "-", "patch_removal_size", "+", "1", ",", "patch_removal_interval", ")", ":", "\n", "                    ", "patch_grad", "=", "pixelwise_avg_grads", "[", "i", ":", "i", "+", "patch_removal_size", ",", "j", ":", "j", "+", "patch_removal_size", "]", ".", "sum", "(", ")", "\n", "if", "mask", "[", "0", ",", "i", ":", "i", "+", "patch_removal_size", ",", "j", ":", "j", "+", "patch_removal_size", "]", ".", "sum", "(", ")", ">", "0", ":", "\n", "                        ", "patch_grad", "=", "patch_grad", "/", "mask", "[", "0", ",", "i", ":", "i", "+", "patch_removal_size", ",", "j", ":", "j", "+", "patch_removal_size", "]", ".", "sum", "(", ")", "\n", "if", "patch_grad", ".", "item", "(", ")", "<", "min_patch_grad", ":", "\n", "                            ", "min_patch_grad", "=", "patch_grad", ".", "item", "(", ")", "\n", "min_patch_grad_idx", "=", "(", "i", ",", "j", ")", "\n", "", "", "", "", "if", "min_patch_grad_idx", "is", "None", ":", "\n", "                ", "continue", "\n", "", "i", ",", "j", "=", "min_patch_grad_idx", "\n", "mask", "[", "0", ",", "i", ":", "i", "+", "patch_removal_size", ",", "j", ":", "j", "+", "patch_removal_size", "]", "=", "0", "\n", "mask", "[", "1", ",", "i", ":", "i", "+", "patch_removal_size", ",", "j", ":", "j", "+", "patch_removal_size", "]", "=", "0", "\n", "mask", "[", "2", ",", "i", ":", "i", "+", "patch_removal_size", ",", "j", ":", "j", "+", "patch_removal_size", "]", "=", "0", "\n", "print", "(", "\"Removed patch: {}\"", ".", "format", "(", "(", "i", ",", "j", ")", ")", ")", "\n", "", "print", "(", "'-----------------------------------------------------------------------------------'", ")", "\n", "if", "torch", ".", "sum", "(", "mask", ")", "==", "0", ":", "\n", "            ", "break", "\n", "", "", "logger", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.l0_and_boosting_no_tolerance.Logger.__init__": [[24, 32], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "\n", "self", ".", "log_dict", "=", "{", "\n", "'victim_label'", ":", "args", ".", "victim_label", ",", "\n", "'target_label'", ":", "args", ".", "target_label", ",", "\n", "'args'", ":", "args", ",", "\n", "'round_results'", ":", "{", "}", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.l0_and_boosting_no_tolerance.Logger.update": [[34, 40], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "current_round", ",", "transform_robustness", ",", "query_count", ",", "mask", ",", "adv_img", ")", ":", "\n", "        ", "self", ".", "log_dict", "[", "'round_results'", "]", "[", "current_round", "]", "=", "{", "\n", "'query_count'", ":", "query_count", ",", "\n", "'transform_robustness'", ":", "transform_robustness", ",", "\n", "'mask'", ":", "mask", ",", "\n", "'adv_img'", ":", "adv_img", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.l0_and_boosting_no_tolerance.Logger.save": [[42, 57], ["list", "list.sort", "os.path.exists", "os.makedirs", "open", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "l0_and_boosting_no_tolerance.Logger.log_dict[].keys", "len", "print", "print", "print", "torchvision.utils.save_image", "torchvision.utils.save_image", "os.path.join", "os.path.join", "os.path.join", "torch.sum().item", "torch.sum"], "methods", ["None"], ["", "def", "save", "(", "self", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "args", ".", "log_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "args", ".", "log_dir", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "log_dir", ",", "'results_victim_label={}_target_label={}.pkl'", ".", "format", "(", "\n", "self", ".", "args", ".", "victim_label", ",", "self", ".", "args", ".", "target_label", ")", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "self", ".", "log_dict", ",", "f", ")", "\n", "", "rounds", "=", "list", "(", "self", ".", "log_dict", "[", "'round_results'", "]", ".", "keys", "(", ")", ")", "\n", "rounds", ".", "sort", "(", ")", "\n", "if", "len", "(", "rounds", ")", ">", "0", ":", "\n", "            ", "last_round", "=", "rounds", "[", "-", "1", "]", "\n", "print", "(", "\"Final query count:\"", ",", "self", ".", "log_dict", "[", "'round_results'", "]", "[", "last_round", "]", "[", "'query_count'", "]", ")", "\n", "print", "(", "\"Final transform_robustness:\"", ",", "self", ".", "log_dict", "[", "'round_results'", "]", "[", "last_round", "]", "[", "'transform_robustness'", "]", ")", "\n", "print", "(", "\"Final mask_size:\"", ",", "torch", ".", "sum", "(", "self", ".", "log_dict", "[", "'round_results'", "]", "[", "last_round", "]", "[", "'mask'", "]", ")", ".", "item", "(", ")", "/", "3", ")", "\n", "save_image", "(", "self", ".", "log_dict", "[", "'round_results'", "]", "[", "last_round", "]", "[", "'adv_img'", "]", ",", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "log_dir", ",", "'results_victim_label={}_target_label={}.png'", ".", "format", "(", "self", ".", "args", ".", "victim_label", ",", "self", ".", "args", ".", "target_label", ")", ")", ")", "\n", "save_image", "(", "self", ".", "log_dict", "[", "'round_results'", "]", "[", "last_round", "]", "[", "'mask'", "]", ",", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "log_dir", ",", "'results_victim_label={}_target_label={}_mask.png'", ".", "format", "(", "self", ".", "args", ".", "victim_label", ",", "self", ".", "args", ".", "target_label", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.l0_and_boosting_no_tolerance.compute_transform_robustness": [[59, 65], ["transforms.get_transformed_images", "utils.run_predictions", "img.detach().cpu", "delta.detach().cpu", "img.detach", "delta.detach"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.get_transformed_images", "home.repos.pwc.inspect_result.ryan-feng_graphite.None.utils.run_predictions"], ["", "", "", "def", "compute_transform_robustness", "(", "img", ",", "delta", ",", "mask", ",", "model", ",", "xforms", ",", "xforms_pt_file", ",", "model_input_size", ",", "target_label", ")", ":", "\n", "    ", "xform_imgs", "=", "get_transformed_images", "(", "img", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "mask", ",", "xforms", ",", "1.0", ",", "delta", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "\n", "xforms_pt_file", ",", "\n", "net_size", "=", "model_input_size", ")", "\n", "neg_tr", ",", "qc", "=", "run_predictions", "(", "model", ",", "xform_imgs", ",", "-", "1", ",", "target_label", ")", "\n", "return", "1", "-", "neg_tr", ",", "qc", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.l0_and_boosting_no_tolerance.main": [[67, 207], ["print", "print", "print", "prettytable.PrettyTable", "vars", "print", "l0_and_boosting_no_tolerance.Logger", "cv2.imread", "cv2.cvtColor", "cv2.resize", "torch.from_numpy().cuda().permute().cuda", "torch.from_numpy().cuda().permute().cuda", "cv2.imread", "cv2.cvtColor", "cv2.resize", "torch.from_numpy().cuda().permute().cuda", "cv2.imread", "numpy.where", "transforms.get_transform_params", "GTSRB.GTSRBNet.GTSRBNet", "torch.cuda.is_available", "torch.nn.DataParallel.eval", "torch.load", "model.load_state_dict", "print", "range", "l0_and_boosting_no_tolerance.Logger.save", "prettytable.PrettyTable.add_row", "numpy.array", "numpy.array", "numpy.array", "torch.from_numpy().permute().cuda", "torch.nn.DataParallel.cuda", "torch.nn.DataParallel", "torch.cuda.is_available", "print", "print", "range", "print", "delta.permute().detach().cpu().numpy", "cv2.resize", "torch.from_numpy().permute().to", "l0_and_boosting_no_tolerance.Logger.update", "print", "torch.sum", "range", "print", "torch.from_numpy().cuda().permute", "torch.from_numpy().cuda().permute", "torch.from_numpy().cuda().permute", "print", "torch.zeros_like().cuda", "l0_and_boosting_no_tolerance.compute_transform_robustness", "tqdm.tqdm", "l0_and_boosting_no_tolerance.compute_transform_robustness", "print", "torch.sum", "print", "torch.abs", "range", "print", "torch.sum", "__file__.split", "getattr", "torch.from_numpy().permute", "range", "l0_and_boosting_no_tolerance.compute_transform_robustness", "torch.sum", "delta.permute().detach().cpu", "torch.from_numpy().permute", "torch.isnan", "range", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.zeros_like", "torch.randn().type().cuda", "torch.norm", "torch.from_numpy().cuda().permute().cuda.size", "torch.from_numpy().cuda().permute().cuda.size", "pixelwise_avg_grads[].sum", "torch.from_numpy", "delta.permute().detach", "torch.from_numpy", "mask[].sum", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.randn().type", "mask[].sum", "pixelwise_avg_grads[].sum.item", "pixelwise_avg_grads[].sum.item", "delta.permute", "torch.randn", "delta.size"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.get_transform_params", "home.repos.pwc.inspect_result.ryan-feng_graphite.whitebox.whitebox_attack.eval", "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.l0_and_opt_eot.Logger.save", "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.l0_and_opt_eot.Logger.update", "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.l0_and_opt_eot.compute_transform_robustness", "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.l0_and_opt_eot.compute_transform_robustness", "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.l0_and_opt_eot.compute_transform_robustness"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "print", "(", "'-----------------------------------------------------------------------------------'", ")", "\n", "print", "(", "'Running baseline: {}'", ".", "format", "(", "__file__", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", ")", "\n", "print", "(", "'-----------------------------------------------------------------------------------'", ")", "\n", "assert", "args", ".", "model", "==", "'GTSRB'", "\n", "args_table", "=", "PrettyTable", "(", "[", "'Argument'", ",", "'Value'", "]", ")", "\n", "for", "arg", "in", "vars", "(", "args", ")", ":", "\n", "        ", "args_table", ".", "add_row", "(", "[", "arg", ",", "getattr", "(", "args", ",", "arg", ")", "]", ")", "\n", "", "print", "(", "args_table", ")", "\n", "logger", "=", "Logger", "(", "args", ")", "\n", "\n", "# Load victim img.", "\n", "img", "=", "cv2", ".", "imread", "(", "args", ".", "victim_img_path", ")", "\n", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "img_small", "=", "cv2", ".", "resize", "(", "img", ",", "(", "32", ",", "32", ")", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255.0", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "cuda", "(", ")", ".", "permute", "(", "(", "2", ",", "0", ",", "1", ")", ")", ".", "cuda", "(", ")", "\n", "img", ".", "requires_grad", "=", "True", "\n", "img_small", "=", "np", ".", "array", "(", "img_small", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255.0", "\n", "img_small", "=", "torch", ".", "from_numpy", "(", "img_small", ")", ".", "cuda", "(", ")", ".", "permute", "(", "(", "2", ",", "0", ",", "1", ")", ")", ".", "cuda", "(", ")", "\n", "img_small", ".", "requires_grad", "=", "True", "\n", "\n", "# Load target img.", "\n", "tar_img", "=", "cv2", ".", "imread", "(", "args", ".", "target_img_path", ")", "\n", "tar_img", "=", "cv2", ".", "cvtColor", "(", "tar_img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "tar_img", "=", "cv2", ".", "resize", "(", "tar_img", ",", "(", "32", ",", "32", ")", ")", "\n", "tar_img", "=", "np", ".", "array", "(", "tar_img", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255.0", "\n", "tar_img", "=", "torch", ".", "from_numpy", "(", "tar_img", ")", ".", "cuda", "(", ")", ".", "permute", "(", "(", "2", ",", "0", ",", "1", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "# Load starting mask.", "\n", "mask", "=", "cv2", ".", "imread", "(", "args", ".", "initial_mask_path", ")", "\n", "mask", "=", "np", ".", "where", "(", "mask", ">", "128", ",", "255", ",", "0", ")", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "cuda", "(", ")", "/", "255.0", "\n", "\n", "# Load transforms.", "\n", "xforms", "=", "get_transform_params", "(", "args", ".", "num_xforms", ",", "args", ".", "model", ",", "baseline", "=", "True", ")", "\n", "\n", "# Load net.", "\n", "net", "=", "GTSRBNet", "(", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "net", ".", "cuda", "(", ")", "\n", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "net", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "", "net", ".", "eval", "(", ")", "\n", "model", "=", "net", ".", "module", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "net", "\n", "checkpoint", "=", "torch", ".", "load", "(", "'../GTSRB/checkpoint_us.tar'", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model_state_dict'", "]", ")", "\n", "\n", "# Attack.", "\n", "query_count", "=", "0", "\n", "print", "(", "'Initializing...'", ")", "\n", "delta", "=", "mask", "*", "(", "tar_img", "-", "img_small", ")", "\n", "final_avg_grad", "=", "None", "\n", "for", "rounds", "in", "range", "(", "args", ".", "max_rounds", ")", ":", "\n", "        ", "print", "(", "'Beginning round: {}'", ".", "format", "(", "rounds", ")", ")", "\n", "print", "(", "'Stage 1: Boosting.'", ")", "\n", "max_iteration_transform_robustness", "=", "0", "\n", "max_iteration_delta", "=", "None", "\n", "for", "iteration", "in", "range", "(", "args", ".", "max_boosting_iterations", ")", ":", "\n", "            ", "print", "(", "'Boosting iteration: {}'", ".", "format", "(", "iteration", ")", ")", "\n", "# Gradient estimation.", "\n", "gradient", "=", "torch", ".", "zeros_like", "(", "delta", ")", ".", "cuda", "(", ")", "\n", "eps", ",", "qc", "=", "compute_transform_robustness", "(", "img_small", ",", "delta", ",", "mask", ",", "model", ",", "xforms", ",", "args", ".", "xforms_pt_file", ",", "\n", "args", ".", "model_input_size", ",", "args", ".", "target_label", ")", "\n", "\n", "if", "max_iteration_delta", "is", "None", ":", "\n", "                ", "max_iteration_delta", "=", "delta", "\n", "max_iteration_transform_robustness", "=", "eps", "\n", "\n", "", "query_count", "+=", "qc", "\n", "for", "_", "in", "tqdm", "(", "range", "(", "10", ")", ")", ":", "\n", "                ", "u", "=", "torch", ".", "randn", "(", "delta", ".", "size", "(", ")", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "cuda", "(", ")", "*", "mask", "\n", "u", "=", "u", "/", "torch", ".", "norm", "(", "u", ")", "\n", "ttt", "=", "delta", "+", "u", "\n", "eps_ttt", ",", "qc", "=", "compute_transform_robustness", "(", "img_small", ",", "ttt", ",", "mask", ",", "model", ",", "xforms", ",", "args", ".", "xforms_pt_file", ",", "\n", "args", ".", "model_input_size", ",", "args", ".", "target_label", ")", "\n", "query_count", "+=", "qc", "\n", "gradient", "+=", "(", "eps_ttt", "-", "eps", ")", "*", "u", "\n", "", "final_avg_grad", "=", "0.1", "*", "gradient", "\n", "\n", "delta", "=", "delta", "-", "500", "*", "final_avg_grad", "\n", "\n", "transform_robustness", ",", "qc", "=", "compute_transform_robustness", "(", "img_small", ",", "delta", ",", "mask", ",", "model", ",", "xforms", ",", "args", ".", "xforms_pt_file", ",", "\n", "args", ".", "model_input_size", ",", "args", ".", "target_label", ")", "\n", "query_count", "+=", "qc", "\n", "\n", "if", "transform_robustness", ">", "max_iteration_transform_robustness", ":", "\n", "                ", "max_iteration_delta", "=", "delta", "\n", "max_iteration_transform_robustness", "=", "transform_robustness", "\n", "\n", "", "if", "torch", ".", "sum", "(", "final_avg_grad", ")", "==", "0", ":", "\n", "                ", "break", "\n", "\n", "", "", "delta", "=", "max_iteration_delta", "\n", "transform_robustness", "=", "max_iteration_transform_robustness", "\n", "print", "(", "'Found adversarial example | transform_robustness: {}%'", ".", "format", "(", "transform_robustness", "*", "100", ")", ")", "\n", "if", "transform_robustness", "<", "args", ".", "min_transform_robustness", ":", "\n", "            ", "print", "(", "'Transform_Robustness of example is below allowable threshold, so stopping.'", ")", "\n", "break", "\n", "\n", "", "delta_np", "=", "delta", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "delta_np_large", "=", "cv2", ".", "resize", "(", "delta_np", ",", "(", "img", ".", "size", "(", ")", "[", "2", "]", ",", "img", ".", "size", "(", ")", "[", "1", "]", ")", ")", "\n", "delta_large_torch", "=", "torch", ".", "from_numpy", "(", "delta_np_large", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "to", "(", "img", ".", "device", ")", "\n", "adv_img_large", "=", "img", "+", "delta_large_torch", "\n", "logger", ".", "update", "(", "rounds", ",", "transform_robustness", ",", "query_count", ",", "mask", ",", "adv_img_large", ")", "\n", "\n", "if", "torch", ".", "sum", "(", "final_avg_grad", ")", "==", "0", ":", "\n", "            ", "print", "(", "'Gradient is zero, so cannot proceed to stage 2. End.'", ")", "\n", "break", "\n", "\n", "\n", "", "print", "(", "'Stage 2: Mask reduction.'", ")", "\n", "pert", "=", "delta", "\n", "final_avg_grad", "[", "torch", ".", "isnan", "(", "final_avg_grad", ")", "]", "=", "0", "\n", "final_avg_grad", "=", "mask", "*", "final_avg_grad", "*", "pert", "\n", "pixelwise_avg_grads", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "final_avg_grad", ")", ",", "dim", "=", "0", ")", "\n", "\n", "# Find minimum gradient patches and remove them.", "\n", "for", "_", "in", "range", "(", "args", ".", "patches_per_round", ")", ":", "\n", "            ", "patch_removal_size", "=", "args", ".", "patch_removal_size", "\n", "patch_removal_interval", "=", "args", ".", "patch_removal_interval", "\n", "min_patch_grad", "=", "99999999999999999", "\n", "min_patch_grad_idx", "=", "None", "\n", "for", "i", "in", "range", "(", "0", ",", "pixelwise_avg_grads", ".", "shape", "[", "0", "]", "-", "patch_removal_size", ",", "patch_removal_interval", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "0", ",", "pixelwise_avg_grads", ".", "shape", "[", "1", "]", "-", "patch_removal_size", ",", "patch_removal_interval", ")", ":", "\n", "                    ", "patch_grad", "=", "pixelwise_avg_grads", "[", "i", ":", "i", "+", "patch_removal_size", ",", "j", ":", "j", "+", "patch_removal_size", "]", ".", "sum", "(", ")", "\n", "if", "mask", "[", "0", ",", "i", ":", "i", "+", "patch_removal_size", ",", "j", ":", "j", "+", "patch_removal_size", "]", ".", "sum", "(", ")", ">", "0", ":", "\n", "                        ", "patch_grad", "=", "patch_grad", "/", "mask", "[", "0", ",", "i", ":", "i", "+", "patch_removal_size", ",", "j", ":", "j", "+", "patch_removal_size", "]", ".", "sum", "(", ")", "\n", "if", "patch_grad", ".", "item", "(", ")", "<", "min_patch_grad", ":", "\n", "                            ", "min_patch_grad", "=", "patch_grad", ".", "item", "(", ")", "\n", "min_patch_grad_idx", "=", "(", "i", ",", "j", ")", "\n", "", "", "", "", "i", ",", "j", "=", "min_patch_grad_idx", "\n", "mask", "[", "0", ",", "i", ":", "i", "+", "patch_removal_size", ",", "j", ":", "j", "+", "patch_removal_size", "]", "=", "0", "\n", "mask", "[", "1", ",", "i", ":", "i", "+", "patch_removal_size", ",", "j", ":", "j", "+", "patch_removal_size", "]", "=", "0", "\n", "mask", "[", "2", ",", "i", ":", "i", "+", "patch_removal_size", ",", "j", ":", "j", "+", "patch_removal_size", "]", "=", "0", "\n", "print", "(", "\"Removed patch: {}\"", ".", "format", "(", "(", "i", ",", "j", ")", ")", ")", "\n", "", "delta", "=", "delta", "*", "mask", "\n", "print", "(", "'-----------------------------------------------------------------------------------'", ")", "\n", "if", "torch", ".", "sum", "(", "mask", ")", "==", "0", ":", "\n", "            ", "break", "\n", "", "", "logger", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.opt_eot.tr_predict": [[27, 41], ["utils.run_predictions", "len", "transforms.get_transformed_images", "lbd.item", "transforms.get_transformed_images"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.None.utils.run_predictions", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.get_transformed_images", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.get_transformed_images"], ["def", "tr_predict", "(", "model", ",", "image", ",", "mask", ",", "target", ",", "xforms", ",", "xforms_pt_file", ",", "lbd", ",", "theta", ",", "index", "=", "None", ")", ":", "\n", "    ", "global", "query_count", "\n", "if", "index", "is", "not", "None", ":", "\n", "        ", "xforms", "=", "[", "xforms", "[", "index", "]", "]", "\n", "", "try", ":", "\n", "        ", "xform_imgs", "=", "get_transformed_images", "(", "image", ",", "mask", ",", "xforms", ",", "lbd", ".", "item", "(", ")", ",", "theta", ",", "xforms_pt_file", ")", "\n", "", "except", ":", "\n", "        ", "xform_imgs", "=", "get_transformed_images", "(", "image", ",", "mask", ",", "xforms", ",", "lbd", ",", "theta", ",", "xforms_pt_file", ")", "\n", "", "success_rate", ",", "query_ct", "=", "run_predictions", "(", "model", ",", "xform_imgs", ",", "1", ",", "target", ")", "\n", "query_count", "+=", "len", "(", "xforms", ")", "\n", "if", "success_rate", "<=", "0.2", ":", "\n", "        ", "return", "target", "\n", "", "else", ":", "\n", "        ", "return", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.opt_eot.attack_targeted": [[43, 195], ["time.time", "enumerate", "time.time", "time.time", "tqdm.tqdm", "print", "opt_eot.tr_predict", "opt_eot.tr_predict", "print", "time.time", "print", "opt_eot.tr_predict", "print", "float", "opt_eot.fine_grained_binary_search_targeted", "init_theta.clone.clone", "range", "range", "init_theta.clone", "torch.zeros", "torch.zeros", "torch.zeros", "torch.norm", "torch.norm", "torch.norm", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "tqdm.tqdm", "len", "torch.zeros", "torch.zeros", "torch.zeros", "float", "range", "print", "opt_eot.fine_grained_binary_search_local_targeted", "range", "print", "x0.size", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "theta.clone", "fine_grained_binary_search_targeted.clone", "x0.size", "x0.size", "x0.size", "theta.size", "range", "torch.zeros", "torch.zeros", "torch.zeros", "float", "range", "theta.size", "opt_eot.fine_grained_binary_search_local_targeted", "torch.norm", "torch.norm", "torch.norm", "opt_eot.fine_grained_binary_search_local_targeted", "theta.clone", "len", "theta.size", "opt_eot.fine_grained_binary_search_local_targeted", "torch.randn().type", "torch.randn().type", "torch.randn().type", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.randn().type", "torch.randn().type", "torch.randn().type", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "time.time", "theta.size", "theta.size"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.opt_normal.tr_predict", "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.opt_normal.tr_predict", "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.opt_normal.tr_predict", "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.opt_normal.fine_grained_binary_search_targeted", "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.opt_normal.fine_grained_binary_search_local_targeted", "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.opt_normal.fine_grained_binary_search_local_targeted", "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.opt_normal.fine_grained_binary_search_local_targeted", "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.opt_normal.fine_grained_binary_search_local_targeted"], ["", "", "def", "attack_targeted", "(", "model", ",", "train_dataset", ",", "x0", ",", "y0", ",", "target", ",", "mask", ",", "xforms", ",", "xforms_pt_file", ",", "theta_initializer", "=", "None", ",", "lbd_initializer", "=", "None", ",", "alpha", "=", "5", ",", "beta", "=", "0.001", ",", "\n", "iterations", "=", "1000", ")", ":", "\n", "    ", "\"\"\" Attack the original image and return adversarial example of target t\n        model: (pytorch model)\n        train_dataset: set of training data\n        (x0, y0): original image\n        t: target\n    \"\"\"", "\n", "global", "query_count", "\n", "\n", "if", "tr_predict", "(", "model", ",", "x0", ",", "mask", ",", "target", ",", "xforms", ",", "xforms_pt_file", ",", "1.0", ",", "torch", ".", "zeros", "(", "(", "x0", ".", "size", "(", ")", ")", ")", ")", "==", "target", ":", "\n", "        ", "print", "(", "\"Image classified as target. No need to attack.\"", ")", "\n", "return", "x0", ",", "0", ",", "0", "\n", "\n", "# STEP I: find initial direction (theta, g_theta)", "\n", "\n", "", "num_samples", "=", "100", "\n", "best_theta", ",", "g_theta", "=", "None", ",", "float", "(", "'inf'", ")", "\n", "query_count", "=", "0", "\n", "\n", "\n", "timestart", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "xi", ",", "yi", ")", "in", "enumerate", "(", "train_dataset", ")", ":", "\n", "        ", "result", "=", "xi", "\n", "if", "theta_initializer", "is", "not", "None", ":", "\n", "            ", "theta", "=", "theta_initializer", "*", "mask", "\n", "initial_lbd", "=", "lbd_initializer", "*", "torch", ".", "norm", "(", "theta", ")", "\n", "theta", "=", "theta", "/", "torch", ".", "norm", "(", "theta", ")", "\n", "", "else", ":", "\n", "            ", "theta", "=", "(", "xi", "-", "x0", ")", "*", "mask", "\n", "initial_lbd", "=", "torch", ".", "norm", "(", "theta", ")", "\n", "theta", "=", "theta", "/", "torch", ".", "norm", "(", "theta", ")", "\n", "", "lbd", "=", "fine_grained_binary_search_targeted", "(", "model", ",", "x0", ",", "mask", ",", "y0", ",", "target", ",", "theta", ",", "initial_lbd", ",", "g_theta", ",", "\n", "xforms", "=", "xforms", ",", "xforms_pt_file", "=", "xforms_pt_file", ")", "\n", "if", "lbd", "<", "g_theta", ":", "\n", "            ", "best_theta", ",", "g_theta", "=", "theta", ",", "lbd", "\n", "init_theta", ",", "init_g", "=", "theta", ".", "clone", "(", ")", ",", "lbd", ".", "clone", "(", ")", "\n", "", "", "timeend", "=", "time", ".", "time", "(", ")", "\n", "time_init", "=", "timeend", "-", "timestart", "\n", "if", "best_theta", "is", "None", ":", "\n", "        ", "return", "torch", ".", "zeros", "(", "x0", ".", "size", "(", ")", ")", ",", "torch", ".", "zeros", "(", "x0", ".", "size", "(", ")", ")", ",", "query_count", ",", "0", ",", "torch", ".", "zeros", "(", "x0", ".", "size", "(", ")", ")", ",", "-", "1", "\n", "\n", "# STEP II: seach for optimal", "\n", "", "timestart", "=", "time", ".", "time", "(", ")", "\n", "g1", "=", "1.0", "\n", "theta", ",", "g2", "=", "best_theta", ".", "clone", "(", ")", ",", "g_theta", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "iterations", ")", ")", ":", "\n", "        ", "if", "USE_INDEX", ":", "\n", "            ", "avg_gradient", "=", "torch", ".", "zeros", "(", "theta", ".", "size", "(", ")", ")", "\n", "for", "j", "in", "tqdm", "(", "range", "(", "len", "(", "xforms", ")", ")", ")", ":", "\n", "                ", "gradient", "=", "torch", ".", "zeros", "(", "theta", ".", "size", "(", ")", ")", "\n", "q", "=", "10", "\n", "valid_count", "=", "0", "\n", "min_g1", "=", "float", "(", "'inf'", ")", "\n", "for", "_", "in", "range", "(", "q", ")", ":", "\n", "                    ", "u", "=", "torch", ".", "randn", "(", "theta", ".", "size", "(", ")", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "*", "mask", "\n", "u", "=", "u", "/", "torch", ".", "norm", "(", "u", ")", "\n", "ttt", "=", "theta", "+", "beta", "*", "u", "\n", "ttt", "=", "ttt", "/", "torch", ".", "norm", "(", "ttt", ")", "\n", "g1", "=", "fine_grained_binary_search_local_targeted", "(", "model", ",", "x0", ",", "mask", ",", "y0", ",", "target", ",", "ttt", ",", "initial_lbd", "=", "g2", ",", "\n", "tol", "=", "beta", ",", "xforms", "=", "xforms", ",", "xforms_pt_file", "=", "xforms_pt_file", ",", "index", "=", "j", ")", "\n", "if", "g1", ">", "100000", ":", "\n", "                        ", "continue", "\n", "", "valid_count", "+=", "1", "\n", "gradient", "+=", "(", "g1", "-", "g2", ")", "/", "beta", "*", "u", "\n", "if", "g1", "<", "min_g1", ":", "\n", "                        ", "min_g1", "=", "g1", "\n", "min_ttt", "=", "ttt", "\n", "", "", "if", "valid_count", "==", "0", ":", "\n", "                    ", "return", "x0", "+", "g_theta", "*", "best_theta", ",", "best_theta", ",", "query_count", ",", "time_init", "+", "time", ".", "time", "(", ")", "-", "timestart", ",", "None", ",", "g_theta", "\n", "", "gradient", "=", "1.0", "/", "valid_count", "*", "gradient", "\n", "avg_gradient", "+=", "gradient", "\n", "", "avg_gradient", "/=", "len", "(", "xforms", ")", "\n", "gradient", "=", "avg_gradient", "\n", "", "else", ":", "\n", "            ", "gradient", "=", "torch", ".", "zeros", "(", "theta", ".", "size", "(", ")", ")", "\n", "q", "=", "10", "\n", "min_g1", "=", "float", "(", "'inf'", ")", "\n", "for", "_", "in", "range", "(", "q", ")", ":", "\n", "                ", "u", "=", "torch", ".", "randn", "(", "theta", ".", "size", "(", ")", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "*", "mask", "\n", "u", "=", "u", "/", "torch", ".", "norm", "(", "u", ")", "\n", "ttt", "=", "theta", "+", "beta", "*", "u", "\n", "ttt", "=", "ttt", "/", "torch", ".", "norm", "(", "ttt", ")", "\n", "g1", "=", "fine_grained_binary_search_local_targeted", "(", "model", ",", "x0", ",", "mask", ",", "y0", ",", "target", ",", "ttt", ",", "initial_lbd", "=", "g2", ",", "\n", "tol", "=", "beta", ",", "xforms", "=", "xforms", ",", "xforms_pt_file", "=", "xforms_pt_file", ")", "\n", "if", "g1", ">", "100000", ":", "\n", "                    ", "continue", "\n", "", "valid_count", "+=", "1", "\n", "gradient", "+=", "(", "g1", "-", "g2", ")", "/", "beta", "*", "u", "\n", "if", "g1", "<", "min_g1", ":", "\n", "                    ", "min_g1", "=", "g1", "\n", "min_ttt", "=", "ttt", "\n", "", "", "gradient", "=", "1.0", "/", "valid_count", "*", "gradient", "\n", "\n", "", "if", "(", "i", "+", "1", ")", "%", "50", "==", "0", ":", "\n", "            ", "print", "(", "\"Iteration %3d: g(theta + beta*u) = %.4f g(theta) = %.4f distortion %.4f num_queries %d\"", "%", "(", "\n", "i", "+", "1", ",", "g1", ",", "g2", ",", "torch", ".", "norm", "(", "g2", "*", "theta", ")", ",", "query_count", ")", ")", "\n", "\n", "", "min_theta", "=", "theta", "\n", "min_g2", "=", "g2", "\n", "\n", "for", "_", "in", "range", "(", "15", ")", ":", "\n", "            ", "new_theta", "=", "theta", "-", "alpha", "*", "gradient", "\n", "new_theta", "=", "new_theta", "/", "torch", ".", "norm", "(", "new_theta", ")", "\n", "new_g2", "=", "fine_grained_binary_search_local_targeted", "(", "model", ",", "mask", ",", "x0", ",", "y0", ",", "target", ",", "new_theta", ",", "\n", "initial_lbd", "=", "min_g2", ",", "tol", "=", "beta", ",", "xforms", "=", "xforms", ",", "xforms_pt_file", "=", "xforms_pt_file", ")", "\n", "alpha", "=", "alpha", "*", "2", "\n", "if", "new_g2", "<", "min_g2", ":", "\n", "                ", "min_theta", "=", "new_theta", "\n", "min_g2", "=", "new_g2", "\n", "", "else", ":", "\n", "                ", "break", "\n", "\n", "", "", "if", "min_g2", ">=", "g2", ":", "\n", "            ", "for", "_", "in", "range", "(", "15", ")", ":", "\n", "                ", "alpha", "=", "alpha", "*", "0.25", "\n", "new_theta", "=", "theta", "-", "alpha", "*", "gradient", "\n", "new_theta", "=", "new_theta", "/", "torch", ".", "norm", "(", "new_theta", ")", "\n", "new_g2", "=", "fine_grained_binary_search_local_targeted", "(", "model", ",", "mask", ",", "x0", ",", "y0", ",", "target", ",", "new_theta", ",", "\n", "initial_lbd", "=", "min_g2", ",", "tol", "=", "beta", ",", "\n", "xforms", "=", "xforms", ",", "xforms_pt_file", "=", "xforms_pt_file", ")", "\n", "if", "new_g2", "<", "g2", ":", "\n", "                    ", "min_theta", "=", "new_theta", "\n", "min_g2", "=", "new_g2", "\n", "break", "\n", "\n", "", "", "", "if", "min_g2", "<=", "min_g1", ":", "\n", "            ", "theta", ",", "g2", "=", "min_theta", ",", "min_g2", "\n", "", "else", ":", "\n", "            ", "theta", ",", "g2", "=", "min_ttt", ",", "min_g1", "\n", "\n", "", "if", "g2", "<", "g_theta", ":", "\n", "            ", "best_theta", ",", "g_theta", "=", "theta", ".", "clone", "(", ")", ",", "g2", "\n", "\n", "", "if", "alpha", "<", "1e-4", ":", "\n", "            ", "alpha", "=", "1.0", "\n", "print", "(", "\"Warning: not moving, g2 %lf gtheta %lf\"", "%", "(", "g2", ",", "g_theta", ")", ")", "\n", "beta", "=", "beta", "*", "0.1", "\n", "if", "(", "beta", "<", "0.0005", ")", ":", "\n", "                ", "break", "\n", "\n", "", "", "", "print", "(", "\"end\"", ",", "target", ")", "\n", "pred_target", "=", "tr_predict", "(", "model", ",", "x0", ",", "mask", ",", "target", ",", "xforms", ",", "xforms_pt_file", ",", "g_theta", ",", "best_theta", ")", "\n", "if", "pred_target", "==", "-", "1", ":", "\n", "        ", "g_theta", "=", "init_g", "\n", "best_theta", "=", "init_theta", ".", "clone", "(", ")", "\n", "", "pred_target", "=", "tr_predict", "(", "model", ",", "x0", ",", "mask", ",", "target", ",", "xforms", ",", "xforms_pt_file", ",", "g_theta", ",", "best_theta", ")", "\n", "print", "(", "\"end2\"", ",", "pred_target", ")", "\n", "timeend", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"\\nAdversarial Example Found Successfully: distortion %.4f target %d queries %d \\nTime: %.4f seconds\"", "%", "(", "\n", "g_theta", ",", "pred_target", ",", "query_count", ",", "timeend", "-", "timestart", ")", ")", "\n", "return", "x0", "+", "g_theta", "*", "best_theta", ",", "best_theta", ",", "query_count", ",", "time_init", "+", "timeend", "-", "timestart", ",", "gradient", ",", "g_theta", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.opt_eot.fine_grained_binary_search_local_targeted": [[197, 232], ["opt_eot.tr_predict", "opt_eot.tr_predict", "opt_eot.tr_predict", "opt_eot.tr_predict", "opt_eot.tr_predict", "float"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.opt_normal.tr_predict", "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.opt_normal.tr_predict", "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.opt_normal.tr_predict", "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.opt_normal.tr_predict", "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.opt_normal.tr_predict"], ["", "def", "fine_grained_binary_search_local_targeted", "(", "model", ",", "x0", ",", "mask", ",", "y0", ",", "t", ",", "theta", ",", "initial_lbd", "=", "1.0", ",", "tol", "=", "1e-3", ",", "xforms", "=", "None", ",", "xforms_pt_file", "=", "None", ",", "\n", "index", "=", "None", ")", ":", "\n", "    ", "lbd", "=", "initial_lbd", "\n", "\n", "if", "tr_predict", "(", "model", ",", "x0", ",", "mask", ",", "t", ",", "xforms", ",", "xforms_pt_file", ",", "0", ",", "theta", ",", "index", ")", "==", "t", ":", "\n", "        ", "return", "0", "\n", "\n", "", "if", "tr_predict", "(", "model", ",", "x0", ",", "mask", ",", "t", ",", "xforms", ",", "xforms_pt_file", ",", "lbd", ",", "theta", ",", "index", ")", "!=", "t", ":", "\n", "        ", "lbd_lo", "=", "lbd", "\n", "if", "lbd", "==", "0", ":", "## just in case to avoid infinite loop", "\n", "            ", "lbd", "=", "1.0", "\n", "", "lbd_hi", "=", "lbd", "*", "1.10", "\n", "while", "tr_predict", "(", "model", ",", "x0", ",", "mask", ",", "t", ",", "xforms", ",", "xforms_pt_file", ",", "lbd_hi", ",", "theta", ",", "index", ")", "!=", "t", ":", "\n", "            ", "lbd_hi", "=", "lbd_hi", "*", "1.10", "\n", "if", "lbd_hi", ">", "100", ":", "\n", "                ", "return", "float", "(", "'inf'", ")", "\n", "", "", "", "else", ":", "\n", "        ", "lbd_hi", "=", "lbd", "\n", "lbd_lo", "=", "lbd", "*", "0.90", "\n", "while", "tr_predict", "(", "model", ",", "x0", ",", "mask", ",", "t", ",", "xforms", ",", "xforms_pt_file", ",", "lbd_lo", ",", "theta", ",", "index", ")", "==", "t", ":", "\n", "            ", "lbd_lo", "=", "lbd_lo", "*", "0.90", "\n", "\n", "", "", "prev_lbd_mid", "=", "None", "\n", "while", "(", "lbd_hi", "-", "lbd_lo", ")", ">", "tol", ":", "\n", "        ", "lbd_mid", "=", "(", "lbd_lo", "+", "lbd_hi", ")", "/", "2.0", "\n", "if", "prev_lbd_mid", "is", "not", "None", "and", "lbd_mid", "==", "prev_lbd_mid", ":", "\n", "# need to get unstuck from numerical rounding issues", "\n", "            ", "tol", "=", "(", "lbd_hi", "-", "lbd_lo", ")", "+", "0.0001", "\n", "\n", "", "prev_lbd_mid", "=", "lbd_mid", "\n", "if", "tr_predict", "(", "model", ",", "x0", ",", "mask", ",", "t", ",", "xforms", ",", "xforms_pt_file", ",", "lbd_mid", ",", "theta", ",", "index", ")", "==", "t", ":", "\n", "            ", "lbd_hi", "=", "lbd_mid", "\n", "", "else", ":", "\n", "            ", "lbd_lo", "=", "lbd_mid", "\n", "", "", "return", "lbd_hi", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.opt_eot.fine_grained_binary_search_targeted": [[234, 264], ["opt_eot.tr_predict", "opt_eot.tr_predict", "float", "opt_eot.tr_predict", "opt_eot.tr_predict", "float"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.opt_normal.tr_predict", "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.opt_normal.tr_predict", "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.opt_normal.tr_predict", "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.opt_normal.tr_predict"], ["", "def", "fine_grained_binary_search_targeted", "(", "model", ",", "x0", ",", "mask", ",", "y0", ",", "t", ",", "theta", ",", "initial_lbd", ",", "current_best", ",", "xforms", "=", "None", ",", "xforms_pt_file", "=", "None", ")", ":", "\n", "    ", "if", "initial_lbd", ">", "current_best", ":", "\n", "        ", "assert", "False", "\n", "if", "tr_predict", "(", "model", ",", "x0", ",", "mask", ",", "t", ",", "xforms", ",", "xforms_pt_file", ",", "current_best", ",", "theta", ")", "!=", "t", ":", "\n", "            ", "return", "float", "(", "'inf'", ")", "\n", "", "lbd", "=", "current_best", "\n", "", "else", ":", "\n", "        ", "lbd", "=", "initial_lbd", "\n", "\n", "", "if", "tr_predict", "(", "model", ",", "x0", ",", "mask", ",", "t", ",", "xforms", ",", "xforms_pt_file", ",", "lbd", ",", "theta", ")", "!=", "t", ":", "\n", "        ", "lbd_lo", "=", "lbd", "\n", "if", "lbd", "==", "0", ":", "## just in case to avoid infinite loop", "\n", "            ", "lbd", "=", "1.0", "\n", "", "lbd_hi", "=", "lbd", "*", "1.10", "\n", "while", "tr_predict", "(", "model", ",", "x0", ",", "mask", ",", "t", ",", "xforms", ",", "xforms_pt_file", ",", "lbd_hi", ",", "theta", ")", "!=", "t", ":", "\n", "            ", "lbd_hi", "=", "lbd_hi", "*", "1.10", "\n", "if", "lbd_hi", ">", "100", ":", "\n", "                ", "return", "float", "(", "'inf'", ")", "\n", "", "", "", "else", ":", "\n", "        ", "lbd_hi", "=", "lbd", "\n", "lbd_lo", "=", "0.0", "\n", "\n", "", "while", "(", "lbd_hi", "-", "lbd_lo", ")", ">", "1e-3", ":", "\n", "        ", "lbd_mid", "=", "(", "lbd_lo", "+", "lbd_hi", ")", "/", "2.0", "\n", "if", "tr_predict", "(", "model", ",", "x0", ",", "mask", ",", "t", ",", "xforms", ",", "xforms_pt_file", ",", "lbd_mid", ",", "theta", ")", "==", "t", ":", "\n", "            ", "lbd_hi", "=", "lbd_mid", "\n", "", "else", ":", "\n", "            ", "lbd_lo", "=", "lbd_mid", "\n", "\n", "", "", "return", "lbd_hi", "\n", "", ""]], "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.opt_normal.tr_predict": [[27, 31], ["model.predict", "transforms.convert2Network", "image.cuda", "theta.cuda"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.GTSRB.GTSRBNet.GTSRBNet.predict", "home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.convert2Network"], ["def", "tr_predict", "(", "model", ",", "image", ",", "target", ",", "xforms", ",", "lbd", ",", "theta", ",", "index", "=", "None", ")", ":", "\n", "    ", "global", "query_count", "\n", "query_count", "+=", "1", "\n", "return", "model", ".", "predict", "(", "convert2Network", "(", "image", ".", "cuda", "(", ")", "+", "lbd", "*", "theta", ".", "cuda", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.opt_normal.attack_targeted": [[33, 149], ["time.time", "enumerate", "time.time", "time.time", "tqdm.tqdm", "print", "opt_normal.tr_predict", "opt_normal.tr_predict", "print", "time.time", "print", "float", "opt_normal.fine_grained_binary_search_targeted", "init_theta.clone.clone", "init_theta.clone.clone", "range", "torch.zeros", "torch.zeros", "torch.zeros", "float", "range", "range", "init_theta.clone", "torch.norm", "torch.norm", "torch.norm", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "theta.size", "opt_normal.fine_grained_binary_search_local_targeted", "print", "opt_normal.fine_grained_binary_search_local_targeted", "range", "print", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "x0.size", "x0.size", "x0.size", "torch.randn().type", "torch.randn().type", "torch.randn().type", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "opt_normal.fine_grained_binary_search_local_targeted", "theta.clone", "torch.norm", "torch.norm", "torch.norm", "torch.randn", "torch.randn", "torch.randn", "time.time", "torch.norm", "torch.norm", "torch.norm", "theta.size"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.opt_normal.tr_predict", "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.opt_normal.tr_predict", "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.opt_normal.fine_grained_binary_search_targeted", "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.opt_normal.fine_grained_binary_search_local_targeted", "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.opt_normal.fine_grained_binary_search_local_targeted", "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.opt_normal.fine_grained_binary_search_local_targeted"], ["", "def", "attack_targeted", "(", "model", ",", "train_dataset", ",", "x0", ",", "y0", ",", "target", ",", "mask", ",", "theta_initializer", "=", "None", ",", "lbd_initializer", "=", "None", ",", "alpha", "=", "5", ",", "beta", "=", "0.001", ",", "\n", "iterations", "=", "1000", ")", ":", "\n", "    ", "\"\"\" Attack the original image and return adversarial example of target t\n        model: (pytorch model)\n        train_dataset: set of training data\n        (x0, y0): original image\n        t: target\n    \"\"\"", "\n", "global", "query_count", "\n", "# STEP I: find initial direction (theta, g_theta)", "\n", "best_theta", ",", "g_theta", "=", "None", ",", "float", "(", "'inf'", ")", "\n", "query_count", "=", "0", "\n", "\n", "timestart", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "xi", ",", "yi", ")", "in", "enumerate", "(", "train_dataset", ")", ":", "\n", "        ", "if", "theta_initializer", "is", "not", "None", ":", "\n", "            ", "theta", "=", "theta_initializer", "*", "mask", "\n", "initial_lbd", "=", "lbd_initializer", "*", "torch", ".", "norm", "(", "theta", ")", "\n", "theta", "=", "theta", "/", "torch", ".", "norm", "(", "theta", ")", "\n", "", "else", ":", "\n", "            ", "theta", "=", "(", "xi", "-", "x0", ")", "*", "mask", "\n", "initial_lbd", "=", "torch", ".", "norm", "(", "theta", ")", "\n", "theta", "=", "theta", "/", "torch", ".", "norm", "(", "theta", ")", "\n", "", "lbd", "=", "fine_grained_binary_search_targeted", "(", "model", ",", "x0", ",", "y0", ",", "target", ",", "theta", ",", "initial_lbd", ",", "g_theta", ")", "\n", "if", "lbd", "<", "g_theta", ":", "\n", "            ", "best_theta", ",", "g_theta", "=", "theta", ",", "lbd", "\n", "", "", "timeend", "=", "time", ".", "time", "(", ")", "\n", "time_init", "=", "timeend", "-", "timestart", "\n", "if", "best_theta", "is", "None", ":", "\n", "        ", "return", "torch", ".", "zeros", "(", "x0", ".", "size", "(", ")", ")", ",", "torch", ".", "zeros", "(", "x0", ".", "size", "(", ")", ")", ",", "query_count", ",", "0", ",", "torch", ".", "zeros", "(", "x0", ".", "size", "(", ")", ")", ",", "-", "1", "\n", "", "init_theta", ",", "init_g", "=", "best_theta", ".", "clone", "(", ")", ",", "g_theta", "\n", "\n", "# STEP II: seach for optimal", "\n", "timestart", "=", "time", ".", "time", "(", ")", "\n", "g1", "=", "1.0", "\n", "theta", ",", "g2", "=", "best_theta", ".", "clone", "(", ")", ",", "g_theta", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "iterations", ")", ")", ":", "\n", "        ", "gradient", "=", "torch", ".", "zeros", "(", "theta", ".", "size", "(", ")", ")", "\n", "q", "=", "10", "\n", "valid_count", "=", "0", "\n", "min_g1", "=", "float", "(", "'inf'", ")", "\n", "for", "_", "in", "range", "(", "q", ")", ":", "\n", "            ", "u", "=", "torch", ".", "randn", "(", "theta", ".", "size", "(", ")", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "*", "mask", "\n", "u", "=", "u", "/", "torch", ".", "norm", "(", "u", ")", "\n", "ttt", "=", "theta", "+", "beta", "*", "u", "\n", "ttt", "=", "ttt", "/", "torch", ".", "norm", "(", "ttt", ")", "\n", "g1", "=", "fine_grained_binary_search_local_targeted", "(", "model", ",", "x0", ",", "y0", ",", "target", ",", "ttt", ",", "initial_lbd", "=", "g2", ",", "\n", "tol", "=", "beta", "/", "500", ")", "\n", "if", "g1", ">", "100000", ":", "\n", "                ", "continue", "\n", "", "gradient", "+=", "(", "g1", "-", "g2", ")", "/", "beta", "*", "u", "\n", "valid_count", "+=", "1", "\n", "if", "g1", "<", "min_g1", ":", "\n", "                ", "min_g1", "=", "g1", "\n", "min_ttt", "=", "ttt", "\n", "", "", "if", "valid_count", "==", "0", ":", "\n", "            ", "return", "x0", "+", "g_theta", "*", "best_theta", ",", "best_theta", ",", "query_count", ",", "time_init", "+", "time", ".", "time", "(", ")", "-", "timestart", ",", "None", ",", "g_theta", "\n", "", "gradient", "=", "1.0", "/", "valid_count", "*", "gradient", "\n", "\n", "if", "(", "i", "+", "1", ")", "%", "50", "==", "0", ":", "\n", "            ", "print", "(", "\"Iteration %3d: g(theta + beta*u) = %.4f g(theta) = %.4f distortion %.4f num_queries %d\"", "%", "(", "\n", "i", "+", "1", ",", "g1", ",", "g2", ",", "torch", ".", "norm", "(", "g2", "*", "theta", ")", ",", "query_count", ")", ")", "\n", "\n", "", "min_theta", "=", "theta", "\n", "min_g2", "=", "g2", "\n", "\n", "for", "_", "in", "range", "(", "15", ")", ":", "\n", "            ", "new_theta", "=", "theta", "-", "alpha", "*", "gradient", "\n", "new_theta", "=", "new_theta", "/", "torch", ".", "norm", "(", "new_theta", ")", "\n", "new_g2", "=", "fine_grained_binary_search_local_targeted", "(", "model", ",", "x0", ",", "y0", ",", "target", ",", "new_theta", ",", "\n", "initial_lbd", "=", "min_g2", ",", "tol", "=", "beta", "/", "500", ")", "\n", "alpha", "=", "alpha", "*", "2", "\n", "if", "new_g2", "<", "min_g2", ":", "\n", "                ", "min_theta", "=", "new_theta", "\n", "min_g2", "=", "new_g2", "\n", "", "else", ":", "\n", "                ", "break", "\n", "\n", "", "", "if", "min_g2", ">=", "g2", ":", "\n", "            ", "for", "_", "in", "range", "(", "15", ")", ":", "\n", "                ", "alpha", "=", "alpha", "*", "0.25", "\n", "new_theta", "=", "theta", "-", "alpha", "*", "gradient", "\n", "new_theta", "=", "new_theta", "/", "torch", ".", "norm", "(", "new_theta", ")", "\n", "new_g2", "=", "fine_grained_binary_search_local_targeted", "(", "model", ",", "x0", ",", "y0", ",", "target", ",", "new_theta", ",", "\n", "initial_lbd", "=", "min_g2", ",", "tol", "=", "beta", "/", "500", ")", "\n", "if", "new_g2", "<", "g2", ":", "\n", "                    ", "min_theta", "=", "new_theta", "\n", "min_g2", "=", "new_g2", "\n", "break", "\n", "\n", "", "", "", "if", "min_g2", "<=", "min_g1", ":", "\n", "            ", "theta", ",", "g2", "=", "min_theta", ",", "min_g2", "\n", "", "else", ":", "\n", "            ", "theta", ",", "g2", "=", "min_ttt", ",", "min_g1", "\n", "\n", "", "if", "g2", "<", "g_theta", ":", "\n", "            ", "best_theta", ",", "g_theta", "=", "theta", ".", "clone", "(", ")", ",", "g2", "\n", "\n", "", "if", "alpha", "<", "1e-4", ":", "\n", "            ", "alpha", "=", "1.0", "\n", "print", "(", "\"Warning: not moving, g2 %lf gtheta %lf\"", "%", "(", "g2", ",", "g_theta", ")", ")", "\n", "beta", "=", "beta", "*", "0.1", "\n", "if", "(", "beta", "<", "0.0005", ")", ":", "\n", "                ", "break", "\n", "\n", "", "", "", "print", "(", "\"end\"", ",", "target", ")", "\n", "pred_target", "=", "tr_predict", "(", "model", ",", "x0", ",", "target", ",", "None", ",", "g_theta", ",", "best_theta", ")", "\n", "if", "pred_target", "==", "-", "1", ":", "\n", "        ", "g_theta", "=", "init_g", "\n", "best_theta", "=", "init_theta", ".", "clone", "(", ")", "\n", "", "pred_target", "=", "tr_predict", "(", "model", ",", "x0", ",", "target", ",", "None", ",", "g_theta", ",", "best_theta", ")", "\n", "print", "(", "\"end2\"", ",", "pred_target", ")", "\n", "timeend", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"\\nOpt attack completed: distortion %.4f target %d queries %d \\nTime: %.4f seconds\"", "%", "(", "\n", "g_theta", ",", "pred_target", ",", "query_count", ",", "timeend", "-", "timestart", ")", ")", "\n", "return", "x0", "+", "g_theta", "*", "best_theta", ",", "best_theta", ",", "query_count", ",", "time_init", "+", "timeend", "-", "timestart", ",", "gradient", ",", "g_theta", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.opt_normal.fine_grained_binary_search_local_targeted": [[151, 180], ["opt_normal.tr_predict", "opt_normal.tr_predict", "opt_normal.tr_predict", "opt_normal.tr_predict", "float"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.opt_normal.tr_predict", "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.opt_normal.tr_predict", "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.opt_normal.tr_predict", "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.opt_normal.tr_predict"], ["", "def", "fine_grained_binary_search_local_targeted", "(", "model", ",", "x0", ",", "y0", ",", "t", ",", "theta", ",", "initial_lbd", "=", "1.0", ",", "tol", "=", "1e-5", ",", "xforms", "=", "None", ",", "\n", "index", "=", "None", ")", ":", "\n", "    ", "lbd", "=", "initial_lbd", "\n", "if", "tr_predict", "(", "model", ",", "x0", ",", "t", ",", "xforms", ",", "lbd", ",", "theta", ",", "index", ")", "!=", "t", ":", "\n", "        ", "lbd_lo", "=", "lbd", "\n", "lbd_hi", "=", "lbd", "*", "1.01", "\n", "while", "tr_predict", "(", "model", ",", "x0", ",", "t", ",", "xforms", ",", "lbd_hi", ",", "theta", ",", "index", ")", "!=", "t", ":", "\n", "            ", "lbd_hi", "=", "lbd_hi", "*", "1.01", "\n", "if", "lbd_hi", ">", "100", ":", "\n", "                ", "return", "float", "(", "'inf'", ")", "\n", "", "", "", "else", ":", "\n", "        ", "lbd_hi", "=", "lbd", "\n", "lbd_lo", "=", "lbd", "*", "0.99", "\n", "while", "tr_predict", "(", "model", ",", "x0", ",", "t", ",", "xforms", ",", "lbd_lo", ",", "theta", ",", "index", ")", "==", "t", ":", "\n", "            ", "lbd_lo", "=", "lbd_lo", "*", "0.99", "\n", "\n", "", "", "prev_lbd_mid", "=", "None", "\n", "while", "(", "lbd_hi", "-", "lbd_lo", ")", ">", "tol", ":", "\n", "        ", "lbd_mid", "=", "(", "lbd_lo", "+", "lbd_hi", ")", "/", "2.0", "\n", "if", "prev_lbd_mid", "is", "not", "None", "and", "lbd_mid", "==", "prev_lbd_mid", ":", "\n", "# need to get unstuck from numerical rounding issues", "\n", "            ", "tol", "=", "(", "lbd_hi", "-", "lbd_lo", ")", "+", "0.0001", "\n", "\n", "", "prev_lbd_mid", "=", "lbd_mid", "\n", "if", "tr_predict", "(", "model", ",", "x0", ",", "t", ",", "xforms", ",", "lbd_mid", ",", "theta", ",", "index", ")", "==", "t", ":", "\n", "            ", "lbd_hi", "=", "lbd_mid", "\n", "", "else", ":", "\n", "            ", "lbd_lo", "=", "lbd_mid", "\n", "", "", "return", "lbd_hi", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.opt_normal.fine_grained_binary_search_targeted": [[182, 210], ["opt_normal.tr_predict", "opt_normal.tr_predict", "opt_normal.tr_predict", "opt_normal.tr_predict", "float", "float"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.opt_normal.tr_predict", "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.opt_normal.tr_predict", "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.opt_normal.tr_predict", "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.opt_normal.tr_predict"], ["", "def", "fine_grained_binary_search_targeted", "(", "model", ",", "x0", ",", "y0", ",", "t", ",", "theta", ",", "initial_lbd", ",", "current_best", ",", "xforms", "=", "None", ")", ":", "\n", "    ", "if", "initial_lbd", ">", "current_best", ":", "\n", "        ", "assert", "False", "\n", "if", "tr_predict", "(", "model", ",", "x0", ",", "t", ",", "xforms", ",", "current_best", ",", "theta", ")", "!=", "t", ":", "\n", "            ", "return", "float", "(", "'inf'", ")", ",", "nquery", "\n", "", "lbd", "=", "current_best", "\n", "", "else", ":", "\n", "        ", "lbd", "=", "initial_lbd", "\n", "\n", "", "if", "tr_predict", "(", "model", ",", "x0", ",", "t", ",", "xforms", ",", "lbd", ",", "theta", ")", "!=", "t", ":", "\n", "        ", "lbd_lo", "=", "lbd", "\n", "lbd_hi", "=", "lbd", "*", "1.01", "\n", "while", "tr_predict", "(", "model", ",", "x0", ",", "t", ",", "xforms", ",", "lbd_hi", ",", "theta", ")", "!=", "t", ":", "\n", "            ", "lbd_hi", "=", "lbd_hi", "*", "1.01", "\n", "if", "lbd_hi", ">", "100", ":", "\n", "                ", "return", "float", "(", "'inf'", ")", "\n", "", "", "", "else", ":", "\n", "        ", "lbd_hi", "=", "lbd", "\n", "lbd_lo", "=", "0.0", "\n", "\n", "", "while", "(", "lbd_hi", "-", "lbd_lo", ")", ">", "1e-5", ":", "\n", "        ", "lbd_mid", "=", "(", "lbd_lo", "+", "lbd_hi", ")", "/", "2.0", "\n", "if", "tr_predict", "(", "model", ",", "x0", ",", "t", ",", "xforms", ",", "lbd_mid", ",", "theta", ")", "==", "t", ":", "\n", "            ", "lbd_hi", "=", "lbd_mid", "\n", "", "else", ":", "\n", "            ", "lbd_lo", "=", "lbd_mid", "\n", "\n", "", "", "return", "lbd_hi", "\n", "", ""]], "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.l0_and_opt_eot.Logger.__init__": [[24, 32], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "\n", "self", ".", "log_dict", "=", "{", "\n", "'victim_label'", ":", "args", ".", "victim_label", ",", "\n", "'target_label'", ":", "args", ".", "target_label", ",", "\n", "'args'", ":", "args", ",", "\n", "'round_results'", ":", "{", "}", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.l0_and_opt_eot.Logger.update": [[34, 40], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "current_round", ",", "transform_robustness", ",", "query_count", ",", "mask", ",", "adv_img", ")", ":", "\n", "        ", "self", ".", "log_dict", "[", "'round_results'", "]", "[", "current_round", "]", "=", "{", "\n", "'query_count'", ":", "query_count", ",", "\n", "'transform_robustness'", ":", "transform_robustness", ",", "\n", "'mask'", ":", "mask", ",", "\n", "'adv_img'", ":", "adv_img", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.l0_and_opt_eot.Logger.save": [[42, 57], ["list", "list.sort", "os.path.exists", "os.makedirs", "open", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "l0_and_opt_eot.Logger.log_dict[].keys", "len", "print", "print", "print", "torchvision.utils.save_image", "torchvision.utils.save_image", "os.path.join", "os.path.join", "os.path.join", "torch.sum().item", "torch.sum"], "methods", ["None"], ["", "def", "save", "(", "self", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "args", ".", "log_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "args", ".", "log_dir", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "log_dir", ",", "'results_victim_label={}_target_label={}.pkl'", ".", "format", "(", "\n", "self", ".", "args", ".", "victim_label", ",", "self", ".", "args", ".", "target_label", ")", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "self", ".", "log_dict", ",", "f", ")", "\n", "", "rounds", "=", "list", "(", "self", ".", "log_dict", "[", "'round_results'", "]", ".", "keys", "(", ")", ")", "\n", "rounds", ".", "sort", "(", ")", "\n", "if", "len", "(", "rounds", ")", ">", "0", ":", "\n", "            ", "last_round", "=", "rounds", "[", "-", "1", "]", "\n", "print", "(", "\"Final query count:\"", ",", "self", ".", "log_dict", "[", "'round_results'", "]", "[", "last_round", "]", "[", "'query_count'", "]", ")", "\n", "print", "(", "\"Final transform_robustness:\"", ",", "self", ".", "log_dict", "[", "'round_results'", "]", "[", "last_round", "]", "[", "'transform_robustness'", "]", ")", "\n", "print", "(", "\"Final mask_size:\"", ",", "torch", ".", "sum", "(", "self", ".", "log_dict", "[", "'round_results'", "]", "[", "last_round", "]", "[", "'mask'", "]", ")", ".", "item", "(", ")", "/", "3", ")", "\n", "save_image", "(", "self", ".", "log_dict", "[", "'round_results'", "]", "[", "last_round", "]", "[", "'adv_img'", "]", ",", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "log_dir", ",", "'results_victim_label={}_target_label={}.png'", ".", "format", "(", "self", ".", "args", ".", "victim_label", ",", "self", ".", "args", ".", "target_label", ")", ")", ")", "\n", "save_image", "(", "self", ".", "log_dict", "[", "'round_results'", "]", "[", "last_round", "]", "[", "'mask'", "]", ",", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "log_dir", ",", "'results_victim_label={}_target_label={}_mask.png'", ".", "format", "(", "self", ".", "args", ".", "victim_label", ",", "self", ".", "args", ".", "target_label", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.l0_and_opt_eot.compute_transform_robustness": [[59, 65], ["transforms.get_transformed_images", "utils.run_predictions", "img.detach().cpu", "delta.detach().cpu", "img.detach", "delta.detach"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.get_transformed_images", "home.repos.pwc.inspect_result.ryan-feng_graphite.None.utils.run_predictions"], ["", "", "", "def", "compute_transform_robustness", "(", "img", ",", "delta", ",", "mask", ",", "model", ",", "xforms", ",", "xforms_pt_file", ",", "model_input_size", ",", "target_label", ",", "lbd", "=", "1.0", ")", ":", "\n", "    ", "xform_imgs", "=", "get_transformed_images", "(", "img", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "mask", ",", "xforms", ",", "lbd", ",", "delta", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "\n", "xforms_pt_file", ",", "\n", "net_size", "=", "model_input_size", ")", "\n", "neg_tr", ",", "qc", "=", "run_predictions", "(", "model", ",", "xform_imgs", ",", "-", "1", ",", "target_label", ")", "\n", "return", "1", "-", "neg_tr", ",", "qc", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.l0_and_opt_eot.main": [[67, 189], ["print", "print", "print", "prettytable.PrettyTable", "vars", "print", "l0_and_opt_eot.Logger", "cv2.imread", "cv2.cvtColor", "torch.from_numpy().cuda().permute().cuda", "cv2.resize", "torch.from_numpy().cuda().permute().cuda", "cv2.imread", "cv2.cvtColor", "cv2.resize", "torch.from_numpy().cuda().permute().cuda", "cv2.imread", "numpy.where", "transforms.get_transform_params", "GTSRB.GTSRBNet.GTSRBNet", "torch.cuda.is_available", "torch.nn.DataParallel.eval", "torch.load", "model.load_state_dict", "print", "range", "l0_and_opt_eot.Logger.save", "prettytable.PrettyTable.add_row", "print", "quit", "numpy.array", "numpy.array", "numpy.array", "torch.from_numpy().permute().cuda", "torch.nn.DataParallel.cuda", "torch.nn.DataParallel", "torch.cuda.is_available", "print", "print", "print", "opt_eot.attack_targeted", "adv_img.detach().cuda.detach().cuda", "l0_and_opt_eot.compute_transform_robustness", "print", "cv2.resize", "torch.from_numpy().permute().to", "l0_and_opt_eot.Logger.update", "final_avg_grad.cuda.cuda", "print", "torch.sum", "range", "print", "torch.from_numpy().cuda().permute", "torch.from_numpy().cuda().permute", "torch.from_numpy().cuda().permute", "torch.from_numpy().cuda().permute().cuda.detach().cpu", "np.where.cpu", "torch.zeros_like", "print", "torch.sum", "print", "torch.abs", "range", "print", "torch.sum", "__file__.split", "getattr", "torch.from_numpy().permute", "adv_img.detach().cuda.detach", "torch.from_numpy().permute", "torch.isnan", "range", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda().permute().cuda.detach().cpu", "torch.from_numpy().cuda().permute().cuda.detach", "pixelwise_avg_grads[].sum", "torch.from_numpy", "torch.from_numpy", "mask[].sum", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().cuda().permute().cuda.detach", "mask[].sum", "pixelwise_avg_grads[].sum.item", "pixelwise_avg_grads[].sum.item"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.patchguard.pg_transforms.get_transform_params", "home.repos.pwc.inspect_result.ryan-feng_graphite.whitebox.whitebox_attack.eval", "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.l0_and_opt_eot.Logger.save", "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.opt_normal.attack_targeted", "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.l0_and_opt_eot.compute_transform_robustness", "home.repos.pwc.inspect_result.ryan-feng_graphite.baselines.l0_and_opt_eot.Logger.update"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "print", "(", "'-----------------------------------------------------------------------------------'", ")", "\n", "print", "(", "'Running baseline: {}'", ".", "format", "(", "__file__", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", ")", "\n", "print", "(", "'-----------------------------------------------------------------------------------'", ")", "\n", "assert", "args", ".", "model", "==", "'GTSRB'", "\n", "args_table", "=", "PrettyTable", "(", "[", "'Argument'", ",", "'Value'", "]", ")", "\n", "for", "arg", "in", "vars", "(", "args", ")", ":", "\n", "        ", "args_table", ".", "add_row", "(", "[", "arg", ",", "getattr", "(", "args", ",", "arg", ")", "]", ")", "\n", "", "print", "(", "args_table", ")", "\n", "logger", "=", "Logger", "(", "args", ")", "\n", "\n", "if", "args", ".", "victim_label", "==", "args", ".", "target_label", ":", "\n", "        ", "print", "(", "'Victim and target label are same.'", ")", "\n", "quit", "(", ")", "\n", "\n", "# Load victim img.", "\n", "", "img", "=", "cv2", ".", "imread", "(", "args", ".", "victim_img_path", ")", "\n", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "img_large", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255.0", "\n", "img_large", "=", "torch", ".", "from_numpy", "(", "img_large", ")", ".", "cuda", "(", ")", ".", "permute", "(", "(", "2", ",", "0", ",", "1", ")", ")", ".", "cuda", "(", ")", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "32", ",", "32", ")", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255.0", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "cuda", "(", ")", ".", "permute", "(", "(", "2", ",", "0", ",", "1", ")", ")", ".", "cuda", "(", ")", "\n", "img", ".", "requires_grad", "=", "True", "\n", "\n", "# Load target img.", "\n", "tar_img", "=", "cv2", ".", "imread", "(", "args", ".", "target_img_path", ")", "\n", "tar_img", "=", "cv2", ".", "cvtColor", "(", "tar_img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "tar_img", "=", "cv2", ".", "resize", "(", "tar_img", ",", "(", "32", ",", "32", ")", ")", "\n", "tar_img", "=", "np", ".", "array", "(", "tar_img", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255.0", "\n", "tar_img", "=", "torch", ".", "from_numpy", "(", "tar_img", ")", ".", "cuda", "(", ")", ".", "permute", "(", "(", "2", ",", "0", ",", "1", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "# Load starting mask.", "\n", "mask", "=", "cv2", ".", "imread", "(", "args", ".", "initial_mask_path", ")", "\n", "mask", "=", "np", ".", "where", "(", "mask", ">", "128", ",", "255", ",", "0", ")", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "cuda", "(", ")", "/", "255.0", "\n", "\n", "# Load transforms.", "\n", "xforms", "=", "get_transform_params", "(", "args", ".", "num_xforms", ",", "args", ".", "model", ",", "baseline", "=", "True", ")", "\n", "\n", "# Load net.", "\n", "net", "=", "GTSRBNet", "(", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "net", ".", "cuda", "(", ")", "\n", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "net", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "", "net", ".", "eval", "(", ")", "\n", "model", "=", "net", ".", "module", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "net", "\n", "checkpoint", "=", "torch", ".", "load", "(", "'../GTSRB/checkpoint_us.tar'", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model_state_dict'", "]", ")", "\n", "\n", "# Attack.", "\n", "query_count", "=", "0", "\n", "print", "(", "'Initializing...'", ")", "\n", "opt_theta_initializer", "=", "None", "\n", "opt_lbd_initializer", "=", "None", "\n", "for", "rounds", "in", "range", "(", "args", ".", "max_rounds", ")", ":", "\n", "        ", "print", "(", "'Beginning round: {}'", ".", "format", "(", "rounds", ")", ")", "\n", "print", "(", "'Stage 1: Opt-Attack.'", ")", "\n", "\n", "# Gradient estimation.", "\n", "print", "(", "'Searching for adversarial example...'", ")", "\n", "adv_img", ",", "opt_theta_initializer", ",", "qc", ",", "_", ",", "final_avg_grad", ",", "opt_lbd_initializer", "=", "attack_targeted", "(", "model", ",", "\n", "[", "(", "tar_img", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "\n", "args", ".", "target_label", ")", "]", ",", "\n", "img", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "\n", "args", ".", "victim_label", ",", "args", ".", "target_label", ",", "\n", "mask", ".", "cpu", "(", ")", ",", "xforms", ",", "args", ".", "xforms_pt_file", ",", "opt_theta_initializer", ",", "opt_lbd_initializer", ")", "\n", "query_count", "+=", "qc", "\n", "adv_img", "=", "adv_img", ".", "detach", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "transform_robustness", ",", "qc", "=", "compute_transform_robustness", "(", "adv_img", ",", "torch", ".", "zeros_like", "(", "adv_img", ")", ",", "mask", ",", "model", ",", "xforms", ",", "\n", "args", ".", "xforms_pt_file", ",", "args", ".", "model_input_size", ",", "args", ".", "target_label", ")", "\n", "query_count", "+=", "qc", "\n", "if", "transform_robustness", "<", "args", ".", "min_transform_robustness", ":", "\n", "            ", "print", "(", "'Transform_Robustness of example is below allowable threshold, so stopping.'", ")", "\n", "break", "\n", "", "print", "(", "'Found adversarial example | transform_robustness: {}%'", ".", "format", "(", "transform_robustness", "*", "100", ")", ")", "\n", "\n", "delta_np", "=", "(", "adv_img", "-", "img", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "assert", "torch", ".", "sum", "(", "(", "(", "adv_img", "-", "img", ")", "*", "mask", ")", "-", "(", "adv_img", "-", "img", ")", ")", "<", "0.01", "\n", "delta_np_large", "=", "cv2", ".", "resize", "(", "delta_np", ",", "(", "244", ",", "244", ")", ")", "\n", "delta_large_torch", "=", "torch", ".", "from_numpy", "(", "delta_np_large", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "to", "(", "img", ".", "device", ")", "\n", "adv_img_large", "=", "img_large", "+", "delta_large_torch", "\n", "logger", ".", "update", "(", "rounds", ",", "transform_robustness", ",", "query_count", ",", "mask", ",", "adv_img_large", ")", "\n", "\n", "if", "final_avg_grad", "is", "None", ":", "\n", "            ", "print", "(", "'No gradient directions could be found, so stopping.'", ")", "\n", "break", "\n", "\n", "", "final_avg_grad", "=", "final_avg_grad", ".", "cuda", "(", ")", "\n", "\n", "print", "(", "'Stage 2: Mask reduction.'", ")", "\n", "pert", "=", "adv_img", "-", "img", "\n", "final_avg_grad", "[", "torch", ".", "isnan", "(", "final_avg_grad", ")", "]", "=", "0", "\n", "final_avg_grad", "=", "mask", "*", "final_avg_grad", "*", "pert", "\n", "pixelwise_avg_grads", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "final_avg_grad", ")", ",", "dim", "=", "0", ")", "\n", "\n", "# Find minimum gradient patches and remove them.", "\n", "for", "_", "in", "range", "(", "args", ".", "patches_per_round", ")", ":", "\n", "            ", "patch_removal_size", "=", "args", ".", "patch_removal_size", "\n", "patch_removal_interval", "=", "args", ".", "patch_removal_interval", "\n", "min_patch_grad", "=", "99999999999999999", "\n", "min_patch_grad_idx", "=", "None", "\n", "for", "i", "in", "range", "(", "0", ",", "pixelwise_avg_grads", ".", "shape", "[", "0", "]", "-", "patch_removal_size", "+", "1", ",", "patch_removal_interval", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "0", ",", "pixelwise_avg_grads", ".", "shape", "[", "1", "]", "-", "patch_removal_size", "+", "1", ",", "patch_removal_interval", ")", ":", "\n", "                    ", "patch_grad", "=", "pixelwise_avg_grads", "[", "i", ":", "i", "+", "patch_removal_size", ",", "j", ":", "j", "+", "patch_removal_size", "]", ".", "sum", "(", ")", "\n", "if", "mask", "[", "0", ",", "i", ":", "i", "+", "patch_removal_size", ",", "j", ":", "j", "+", "patch_removal_size", "]", ".", "sum", "(", ")", ">", "0", ":", "\n", "                        ", "patch_grad", "=", "patch_grad", "/", "mask", "[", "0", ",", "i", ":", "i", "+", "patch_removal_size", ",", "j", ":", "j", "+", "patch_removal_size", "]", ".", "sum", "(", ")", "\n", "if", "patch_grad", ".", "item", "(", ")", "<", "min_patch_grad", ":", "\n", "                            ", "min_patch_grad", "=", "patch_grad", ".", "item", "(", ")", "\n", "min_patch_grad_idx", "=", "(", "i", ",", "j", ")", "\n", "", "", "", "", "if", "min_patch_grad_idx", "is", "None", ":", "\n", "                ", "continue", "\n", "", "i", ",", "j", "=", "min_patch_grad_idx", "\n", "mask", "[", "0", ",", "i", ":", "i", "+", "patch_removal_size", ",", "j", ":", "j", "+", "patch_removal_size", "]", "=", "0", "\n", "mask", "[", "1", ",", "i", ":", "i", "+", "patch_removal_size", ",", "j", ":", "j", "+", "patch_removal_size", "]", "=", "0", "\n", "mask", "[", "2", ",", "i", ":", "i", "+", "patch_removal_size", ",", "j", ":", "j", "+", "patch_removal_size", "]", "=", "0", "\n", "print", "(", "\"Removed patch: {}\"", ".", "format", "(", "(", "i", ",", "j", ")", ")", ")", "\n", "", "print", "(", "'-----------------------------------------------------------------------------------'", ")", "\n", "if", "torch", ".", "sum", "(", "mask", ")", "==", "0", ":", "\n", "            ", "break", "\n", "", "", "logger", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.GTSRB.GTSRBNet.GTSRBNet.__init__": [[8, 34], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.ryan-feng_graphite.GTSRB.GTSRBDataset.GTSRBDataset.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GTSRBNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1_1", "=", "nn", ".", "Conv2d", "(", "3", ",", "3", ",", "1", ")", "\n", "\n", "self", ".", "conv2_1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "5", ",", "padding", "=", "2", ")", "\n", "self", ".", "conv2_2", "=", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "5", ",", "padding", "=", "2", ")", "\n", "self", ".", "pool2_1", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "self", ".", "drop2_1", "=", "nn", ".", "Dropout2d", "(", "0.5", ")", "\n", "\n", "self", ".", "conv3_1", "=", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "5", ",", "padding", "=", "2", ")", "\n", "self", ".", "conv3_2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "5", ",", "padding", "=", "2", ")", "\n", "self", ".", "pool3_1", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "self", ".", "drop3_1", "=", "nn", ".", "Dropout2d", "(", "0.5", ")", "\n", "\n", "self", ".", "conv4_1", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "5", ",", "padding", "=", "2", ")", "\n", "self", ".", "conv4_2", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "5", ",", "padding", "=", "2", ")", "\n", "self", ".", "pool4_1", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "self", ".", "drop4_1", "=", "nn", ".", "Dropout2d", "(", "0.5", ")", "\n", "\n", "# flatten", "\n", "\n", "self", ".", "fc5_1", "=", "nn", ".", "Linear", "(", "4", "*", "4", "*", "128", ",", "1024", ")", "\n", "self", ".", "drop5_1", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "fc6_1", "=", "nn", ".", "Linear", "(", "1024", ",", "1024", ")", "\n", "self", ".", "drop6_1", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "fc7_1", "=", "nn", ".", "Linear", "(", "1024", ",", "43", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.GTSRB.GTSRBNet.GTSRBNet.forward": [[35, 53], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "GTSRBNet.GTSRBNet.drop2_1", "torch.relu", "torch.relu", "torch.relu", "GTSRBNet.GTSRBNet.drop3_1", "torch.relu", "torch.relu", "torch.relu", "GTSRBNet.GTSRBNet.drop4_1", "GTSRBNet.GTSRBNet.view", "GTSRBNet.GTSRBNet.drop5_1", "GTSRBNet.GTSRBNet.drop6_1", "GTSRBNet.GTSRBNet.fc7_1", "GTSRBNet.GTSRBNet.conv1_1", "GTSRBNet.GTSRBNet.conv2_1", "GTSRBNet.GTSRBNet.pool2_1", "GTSRBNet.GTSRBNet.conv3_1", "GTSRBNet.GTSRBNet.pool3_1", "GTSRBNet.GTSRBNet.conv4_1", "GTSRBNet.GTSRBNet.pool4_1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "GTSRBNet.GTSRBNet.fc5_1", "GTSRBNet.GTSRBNet.fc6_1", "GTSRBNet.GTSRBNet.conv2_2", "GTSRBNet.GTSRBNet.conv3_2", "GTSRBNet.GTSRBNet.conv4_2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1_1", "(", "x", ")", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2_1", "(", "x", ")", ")", "\n", "x2", "=", "self", ".", "drop2_1", "(", "self", ".", "pool2_1", "(", "F", ".", "relu", "(", "self", ".", "conv2_2", "(", "x", ")", ")", ")", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv3_1", "(", "x2", ")", ")", "\n", "x3", "=", "self", ".", "drop3_1", "(", "self", ".", "pool3_1", "(", "F", ".", "relu", "(", "self", ".", "conv3_2", "(", "x", ")", ")", ")", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv4_1", "(", "x3", ")", ")", "\n", "x4", "=", "self", ".", "drop4_1", "(", "self", ".", "pool4_1", "(", "F", ".", "relu", "(", "self", ".", "conv4_2", "(", "x", ")", ")", ")", ")", "\n", "\n", "x", "=", "x4", ".", "view", "(", "-", "1", ",", "4", "*", "4", "*", "128", ")", "\n", "\n", "x", "=", "self", ".", "drop5_1", "(", "F", ".", "relu", "(", "self", ".", "fc5_1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "drop6_1", "(", "F", ".", "relu", "(", "self", ".", "fc6_1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "fc7_1", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.GTSRB.GTSRBNet.GTSRBNet.predict": [[54, 71], ["GTSRBNet.GTSRBNet.eval", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.clamp.clone", "torch.clamp.clone", "torch.clamp.clone", "image_batch.unsqueeze.unsqueeze.to", "GTSRBNet.GTSRBNet.", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "len", "predict[].item", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torchvision.Normalize", "len", "image_batch.unsqueeze.unsqueeze.unsqueeze", "torch.clamp.size", "torch.clamp.size", "torch.clamp.size", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.clamp.size", "torch.clamp.size", "torch.clamp.size"], "methods", ["home.repos.pwc.inspect_result.ryan-feng_graphite.whitebox.whitebox_attack.eval"], ["", "def", "predict", "(", "self", ",", "image", ")", ":", "\n", "        ", "if", "torch", ".", "max", "(", "image", ")", ">", "0.5", "or", "torch", ".", "min", "(", "image", ")", "<", "-", "0.5", ":", "\n", "            ", "image", "=", "torch", ".", "clamp", "(", "image", ",", "0.0", ",", "1.0", ")", "\n", "image", "=", "transforms", ".", "Normalize", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "[", "1.0", ",", "1.0", ",", "1.0", "]", ")", "(", "image", ")", "\n", "", "self", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "image_batch", "=", "image", ".", "clone", "(", ")", "\n", "if", "len", "(", "image", ".", "size", "(", ")", ")", "<", "4", ":", "\n", "                ", "image_batch", "=", "image_batch", ".", "unsqueeze", "(", "0", ")", "\n", "", "image_batch", "=", "image_batch", ".", "to", "(", "device", ")", "\n", "output", "=", "self", "(", "image_batch", ")", "\n", "_", ",", "predict", "=", "torch", ".", "max", "(", "output", ".", "data", ",", "1", ")", "\n", "\n", "", "if", "len", "(", "image", ".", "size", "(", ")", ")", "<", "4", ":", "\n", "            ", "return", "predict", "[", "0", "]", ".", "item", "(", ")", "\n", "", "return", "predict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ryan-feng_graphite.GTSRB.test_GTSRB_single_image.main": [[14, 80], ["cv2.imread", "cv2.cvtColor", "cv2.resize", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.device", "torch.device", "torch.device", "torch.device", "GTSRBNet.GTSRBNet", "GTSRBNet.GTSRBNet.to", "torch.load", "torch.load", "torch.load", "torch.load", "GTSRBNet.GTSRBNet.load_state_dict", "GTSRBNet.GTSRBNet.eval", "print", "torchvision.Normalize", "open", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.zeros.to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "labels.long.long", "GTSRBNet.GTSRBNet.", "torch.max", "torch.max", "torch.max", "torch.max", "labels.long.size", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "print", "print", "print", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "classes.append", "torch.softmax", "int", "int", "[].item", "[].item", "[].item", "[].item", "[].item", "line.strip", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "int", "int", "int", "int", "predicted[].item", "int", "torch.softmax", "predicted[].item", "torch.softmax", "int", "torch.softmax", "int", "torch.softmax", "int", "torch.softmax", "int"], "function", ["home.repos.pwc.inspect_result.ryan-feng_graphite.whitebox.whitebox_attack.eval"], ["def", "main", "(", "argv", ")", ":", "\n", "    ", "img", "=", "argv", "[", "1", "]", "\n", "label", "=", "argv", "[", "2", "]", "\n", "target", "=", "argv", "[", "3", "]", "\n", "\n", "img", "=", "cv2", ".", "imread", "(", "img", ")", "\n", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "32", ",", "32", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "# inter area is more stable for downsizing from extremely high res images", "\n", "img", "=", "img", "/", "255.0", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "img", "=", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "1.0", ",", "1.0", ",", "1.0", ")", ")", "(", "img", ")", "\n", "img_torch", "=", "torch", ".", "zeros", "(", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "img_torch", "[", "0", ",", ":", ",", ":", ",", ":", "]", "=", "img", "\n", "\n", "root", "=", "''", "\n", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "model", "=", "GTSRBNet", "(", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n", "classes", "=", "[", "]", "\n", "with", "open", "(", "root", "+", "'class_semantics.txt'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "classes", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "\n", "", "", "checkpoint", "=", "torch", ".", "load", "(", "'checkpoint_us.tar'", ",", "map_location", "=", "device", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model_state_dict'", "]", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "tar_top1", "=", "0", "\n", "tar_top2", "=", "0", "\n", "tar_top5", "=", "0", "\n", "lbl_top1", "=", "0", "\n", "lbl_top2", "=", "0", "\n", "lbl_top5", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "inputs", "=", "img_torch", ".", "to", "(", "device", ")", "\n", "labels", "=", "torch", ".", "tensor", "(", "[", "int", "(", "label", ")", "]", ")", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", ".", "long", "(", ")", "\n", "outputs", "=", "model", "(", "inputs", ")", "\n", "conf", ",", "predicted", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "\n", "total", "+=", "labels", ".", "size", "(", "0", ")", "\n", "correct", "+=", "(", "predicted", "==", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "conf", ",", "lbls", "=", "torch", ".", "topk", "(", "F", ".", "softmax", "(", "outputs", ".", "data", ",", "1", ")", ",", "5", ",", "1", ")", "\n", "if", "int", "(", "label", ")", "in", "lbls", "[", "0", "]", ":", "\n", "            ", "lbl_top5", "=", "1", "\n", "if", "int", "(", "label", ")", "in", "lbls", "[", "0", "]", "[", ":", "2", "]", ":", "\n", "                ", "lbl_top2", "=", "1", "\n", "", "if", "int", "(", "label", ")", "in", "lbls", "[", "0", "]", "[", "0", "]", ":", "\n", "                ", "lbl_top1", "=", "1", "\n", "", "", "if", "int", "(", "target", ")", "in", "lbls", "[", "0", "]", ":", "\n", "            ", "tar_top5", "=", "1", "\n", "if", "int", "(", "target", ")", "in", "lbls", "[", "0", "]", "[", ":", "2", "]", ":", "\n", "                ", "tar_top2", "=", "1", "\n", "", "if", "int", "(", "target", ")", "in", "lbls", "[", "0", "]", "[", "0", "]", ":", "\n", "                ", "tar_top1", "=", "1", "\n", "", "", "print", "(", "\"Pred class: \"", ",", "classes", "[", "predicted", "[", "0", "]", ".", "item", "(", ")", "]", ",", "\" Pred confidence: \"", ",", "F", ".", "softmax", "(", "outputs", ".", "data", ",", "1", ")", "[", "0", "]", "[", "predicted", "[", "0", "]", ".", "item", "(", ")", "]", ".", "item", "(", ")", ",", "\" Target confidence: \"", ",", "F", ".", "softmax", "(", "outputs", ".", "data", ",", "1", ")", "[", "0", "]", "[", "int", "(", "target", ")", "]", ".", "item", "(", ")", ",", "\" Stop confidence: \"", ",", "F", ".", "softmax", "(", "outputs", ".", "data", ",", "1", ")", "[", "0", "]", "[", "int", "(", "label", ")", "]", ".", "item", "(", ")", ")", "\n", "print", "(", "\"topk:\"", ",", "tar_top1", ",", "tar_top2", ",", "tar_top5", ",", "lbl_top1", ",", "lbl_top2", ",", "lbl_top5", ")", "\n", "print", "(", "\"conf:\"", ",", "F", ".", "softmax", "(", "outputs", ".", "data", ",", "1", ")", "[", "0", "]", "[", "int", "(", "target", ")", "]", ".", "item", "(", ")", ",", "F", ".", "softmax", "(", "outputs", ".", "data", ",", "1", ")", "[", "0", "]", "[", "int", "(", "label", ")", "]", ".", "item", "(", ")", ")", "\n", "\n", "", "val_acc", "=", "100.0", "*", "correct", "/", "total", "\n", "print", "(", "'Val accuracy: %.3f'", "%", "(", "val_acc", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.GTSRB.GTSRBDataset.GTSRBDataset.__init__": [[6, 11], ["numpy.load"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "npz_file", ",", "transform", "=", "None", ")", ":", "\n", "        ", "data", "=", "np", ".", "load", "(", "npz_file", ")", "\n", "self", ".", "images", "=", "data", "[", "'images'", "]", "\n", "self", ".", "labels", "=", "data", "[", "'labels'", "]", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.GTSRB.GTSRBDataset.GTSRBDataset.__len__": [[12, 14], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ryan-feng_graphite.GTSRB.GTSRBDataset.GTSRBDataset.__getitem__": [[15, 24], ["PIL.Image.fromarray", "GTSRBDataset.GTSRBDataset.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", ",", "label", "=", "self", ".", "images", "[", "idx", "]", ",", "self", ".", "labels", "[", "idx", "]", "\n", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "return", "img", ",", "label", "\n", "", "", ""]]}