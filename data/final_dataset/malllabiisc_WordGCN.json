{"home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.models.Model.__init__": [[9, 11], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "input_data", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.models.Model.load_data": [[12, 17], ["NotImplementedError"], "methods", ["None"], ["", "def", "load_data", "(", "self", ")", ":", "\n", "\t\t", "\"\"\"Loads data from disk and stores it in memory.\n\t\tFeel free to add instance variables to Model object that store loaded data.    \n\t\t\"\"\"", "\n", "raise", "NotImplementedError", "(", "\"Each Model must re-implement this method.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.models.Model.add_placeholders": [[18, 28], ["NotImplementedError"], "methods", ["None"], ["", "def", "add_placeholders", "(", "self", ")", ":", "\n", "\t\t", "\"\"\"Adds placeholder variables to tensorflow computational graph.\n\t\tTensorflow uses placeholder variables to represent locations in a\n\t\tcomputational graph where data is inserted.  These placeholders are used as\n\t\tinputs by the rest of the model building code and will be fed data during\n\t\ttraining.\n\t\tSee for more information:\n\t\thttps://www.tensorflow.org/versions/r0.7/api_docs/python/io_ops.html#placeholders\n\t\t\"\"\"", "\n", "raise", "NotImplementedError", "(", "\"Each Model must re-implement this method.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.models.Model.create_feed_dict": [[29, 48], ["NotImplementedError"], "methods", ["None"], ["", "def", "create_feed_dict", "(", "self", ",", "input_batch", ",", "label_batch", ")", ":", "\n", "\t\t", "\"\"\"Creates the feed_dict for training the given step.\n\t\tA feed_dict takes the form of:\n\t\tfeed_dict = {\n\t\t\t\t<placeholder>: <tensor of values to be passed for placeholder>,\n\t\t\t\t....\n\t\t}\n\t\n\t\tIf label_batch is None, then no labels are added to feed_dict.\n\t\tHint: The keys for the feed_dict should be a subset of the placeholder\n\t\t\t\t\ttensors created in add_placeholders.\n\t\t\n\t\tArgs:\n\t\t\tinput_batch: A batch of input data.\n\t\t\tlabel_batch: A batch of label data.\n\t\tReturns:\n\t\t\tfeed_dict: The feed dictionary mapping from placeholders to values.\n\t\t\"\"\"", "\n", "raise", "NotImplementedError", "(", "\"Each Model must re-implement this method.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.models.Model.add_embedding": [[49, 53], ["NotImplementedError"], "methods", ["None"], ["", "def", "add_embedding", "(", "self", ")", ":", "\n", "\t\t", "\"\"\"Add embedding layer. that maps from vocabulary to vectors.\n\t\t\"\"\"", "\n", "raise", "NotImplementedError", "(", "\"Each Model must re-implement this method.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.models.Model.add_model": [[54, 64], ["NotImplementedError"], "methods", ["None"], ["", "def", "add_model", "(", "self", ",", "input_data", ")", ":", "\n", "\t\t", "\"\"\"Implements core of model that transforms input_data into predictions.\n\t\tThe core transformation for this model which transforms a batch of input\n\t\tdata into a batch of predictions.\n\t\tArgs:\n\t\t\tinput_data: A tensor of shape (batch_size, n_features).\n\t\tReturns:\n\t\t\tout: A tensor of shape (batch_size, n_classes)\n\t\t\"\"\"", "\n", "raise", "NotImplementedError", "(", "\"Each Model must re-implement this method.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.models.Model.add_loss_op": [[65, 73], ["NotImplementedError"], "methods", ["None"], ["", "def", "add_loss_op", "(", "self", ",", "pred", ")", ":", "\n", "\t\t", "\"\"\"Adds ops for loss to the computational graph.\n\t\tArgs:\n\t\t\tpred: A tensor of shape (batch_size, n_classes)\n\t\tReturns:\n\t\t\tloss: A 0-d tensor (scalar) output\n\t\t\"\"\"", "\n", "raise", "NotImplementedError", "(", "\"Each Model must re-implement this method.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.models.Model.run_epoch": [[74, 86], ["NotImplementedError"], "methods", ["None"], ["", "def", "run_epoch", "(", "self", ",", "sess", ",", "input_data", ",", "input_labels", ")", ":", "\n", "\t\t", "\"\"\"Runs an epoch of training.\n\t\tTrains the model for one-epoch.\n\t\n\t\tArgs:\n\t\t\tsess: tf.Session() object\n\t\t\tinput_data: np.ndarray of shape (n_samples, n_features)\n\t\t\tinput_labels: np.ndarray of shape (n_samples, n_classes)\n\t\tReturns:\n\t\t\taverage_loss: scalar. Average minibatch loss of model on epoch.\n\t\t\"\"\"", "\n", "raise", "NotImplementedError", "(", "\"Each Model must re-implement this method.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.models.Model.fit": [[87, 97], ["NotImplementedError"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "sess", ",", "input_data", ",", "input_labels", ")", ":", "\n", "\t\t", "\"\"\"Fit model on provided data.\n\t\tArgs:\n\t\t\tsess: tf.Session()\n\t\t\tinput_data: np.ndarray of shape (n_samples, n_features)\n\t\t\tinput_labels: np.ndarray of shape (n_samples, n_classes)\n\t\tReturns:\n\t\t\tlosses: list of loss per epoch\n\t\t\"\"\"", "\n", "raise", "NotImplementedError", "(", "\"Each Model must re-implement this method.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.models.Model.predict": [[98, 110], ["NotImplementedError"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "sess", ",", "input_data", ",", "input_labels", "=", "None", ")", ":", "\n", "\t\t", "\"\"\"Make predictions from the provided model.\n\t\tArgs:\n\t\t\tsess: tf.Session()\n\t\t\tinput_data: np.ndarray of shape (n_samples, n_features)\n\t\t\tinput_labels: np.ndarray of shape (n_samples, n_classes)\n\t\tReturns:\n\t\t\taverage_loss: Average loss of model.\n\t\t\tpredictions: Predictions of model on input_data\n\t\t\"\"\"", "\n", "return", "None", ",", "None", "\n", "raise", "NotImplementedError", "(", "\"Each Model must re-implement this method.\"", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.syngcn.SynGCN.getBatches": [[10, 35], ["syngcn.SynGCN.lib.reset", "syngcn.SynGCN.lib.getBatch", "ctypes.c_float"], "methods", ["None"], ["\t", "def", "getBatches", "(", "self", ",", "shuffle", "=", "True", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tReturns a generator for creating batches\n\n\t\tParameters\n\t\t----------\n\t\tshuffle:\tWhether to shuffle batches or not\n\n\t\tReturns\n\t\t-------\n\t\tA batch in the form of a diciontary\n\t\t\tedges:\tDependency parse edges\n\t\t\twrds:\tWord in the batch\n\t\t\tnegs:\tList of negative samples\n\t\t\tsample: Subsampled words indicator\n\t\t\telen:\tTotal number of edges in each sentence\n\t\t\twlen:\tTotal number of words in each sentence\n\t\t\"\"\"", "\n", "self", ".", "lib", ".", "reset", "(", ")", "\n", "while", "True", ":", "\n", "# max_len = 0; unused variable", "\n", "\t\t\t", "eph_ovr", "=", "self", ".", "lib", ".", "getBatch", "(", "self", ".", "edges_addr", ",", "self", ".", "wrds_addr", ",", "self", ".", "negs_addr", ",", "self", ".", "samp_addr", ",", "self", ".", "elen_addr", ",", "self", ".", "wlen_addr", ",", "\n", "self", ".", "p", ".", "win_size", ",", "self", ".", "p", ".", "num_neg", ",", "self", ".", "p", ".", "batch_size", ",", "ctypes", ".", "c_float", "(", "self", ".", "p", ".", "sample", ")", ")", "\n", "if", "eph_ovr", "==", "1", ":", "break", "\n", "yield", "{", "'edges'", ":", "self", ".", "edges", ",", "'wrds'", ":", "self", ".", "wrds", ",", "'negs'", ":", "self", ".", "negs", ",", "'sample'", ":", "self", ".", "samp", ",", "'elen'", ":", "self", ".", "elen", ",", "'wlen'", ":", "self", ".", "wlen", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.syngcn.SynGCN.load_data": [[36, 93], ["syngcn.SynGCN.logger.info", "helper.read_mappings", "helper.read_mappings", "len", "helper.read_mappings", "len", "np.sum", "ctypes.cdll.LoadLibrary", "syngcn.SynGCN.lib.init", "np.zeros", "np.zeros", "np.zeros", "np.zeros", "np.zeros", "np.zeros", "syngcn.SynGCN.edges.ctypes.data_as", "syngcn.SynGCN.wrds.ctypes.data_as", "syngcn.SynGCN.negs.ctypes.data_as", "syngcn.SynGCN.samp.ctypes.data_as", "syngcn.SynGCN.wlen.ctypes.data_as", "syngcn.SynGCN.elen.ctypes.data_as", "int", "int", "int", "int", "list", "ctypes.POINTER", "ctypes.POINTER", "ctypes.POINTER", "ctypes.POINTER", "ctypes.POINTER", "ctypes.POINTER", "syngcn.SynGCN.voc2id.items", "syngcn.SynGCN.id2freq.items", "syngcn.SynGCN.voc2id.items", "range", "syngcn.SynGCN.de2id.items", "syngcn.SynGCN.id2freq.values", "syngcn.SynGCN.id2freq.items", "np.sqrt", "range", "len"], "methods", ["home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.helper.read_mappings", "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.helper.read_mappings", "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.helper.read_mappings"], ["", "", "def", "load_data", "(", "self", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tLoads the text corpus and C++ batch creation script \n\n\t\tParameters\n\t\t----------\n\t\tvoc2id:\t\tMapping of word to its unique identifier\n\t\tid2voc:\t\tInverse of voc2id\n\t\tid2freq:\tMapping of word id to its frequency in the corpus\n\t\twrd_list:\tList of words for which embedding is required\n\t\tembed_dims:\tDimension of the embedding\n\t\tvoc_size:\tTotal number of words in vocabulary\n\t\twrd_list:\tList of words in the vocabulary\n\t\tde2id:\t\tMapping of edge labels of dependency parse to unique identifier\n\t\tnum_deLabel:\tNumber of edge types in dependency graph\n\t\trej_prob:\tWord rejection probability (frequent words are rejected with higher frequency)\n\n\t\tReturns\n\t\t-------\n\t\t\"\"\"", "\n", "self", ".", "logger", ".", "info", "(", "\"Loading data\"", ")", "\n", "\n", "self", ".", "voc2id", "=", "read_mappings", "(", "'./data/voc2id.txt'", ")", ";", "self", ".", "voc2id", "=", "{", "k", ":", "int", "(", "v", ")", "for", "k", ",", "v", "in", "self", ".", "voc2id", ".", "items", "(", ")", "}", "\n", "self", ".", "id2freq", "=", "read_mappings", "(", "'./data/id2freq.txt'", ")", ";", "self", ".", "id2freq", "=", "{", "int", "(", "k", ")", ":", "int", "(", "v", ")", "for", "k", ",", "v", "in", "self", ".", "id2freq", ".", "items", "(", ")", "}", "\n", "self", ".", "id2voc", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "voc2id", ".", "items", "(", ")", "}", "\n", "self", ".", "vocab_size", "=", "len", "(", "self", ".", "voc2id", ")", "\n", "self", ".", "wrd_list", "=", "[", "self", ".", "id2voc", "[", "i", "]", "for", "i", "in", "range", "(", "self", ".", "vocab_size", ")", "]", "\n", "\n", "self", ".", "de2id", "=", "read_mappings", "(", "'./data/de2id.txt'", ")", ";", "self", ".", "de2id", "=", "{", "k", ":", "int", "(", "v", ")", "for", "k", ",", "v", "in", "self", ".", "de2id", ".", "items", "(", ")", "}", "\n", "self", ".", "num_deLabel", "=", "len", "(", "self", ".", "de2id", ")", "\n", "\n", "# Calculating rejection probability", "\n", "corpus_size", "=", "np", ".", "sum", "(", "list", "(", "self", ".", "id2freq", ".", "values", "(", ")", ")", ")", "\n", "rel_freq", "=", "{", "_id", ":", "freq", "/", "corpus_size", "for", "_id", ",", "freq", "in", "self", ".", "id2freq", ".", "items", "(", ")", "}", "\n", "self", ".", "rej_prob", "=", "{", "_id", ":", "(", "1", "-", "self", ".", "p", ".", "sample", "/", "rel_freq", "[", "_id", "]", ")", "-", "np", ".", "sqrt", "(", "self", ".", "p", ".", "sample", "/", "rel_freq", "[", "_id", "]", ")", "for", "_id", "in", "self", ".", "id2freq", "}", "\n", "self", ".", "voc_freq_l", "=", "[", "self", ".", "id2freq", "[", "_id", "]", "for", "_id", "in", "range", "(", "len", "(", "self", ".", "voc2id", ")", ")", "]", "\n", "\n", "if", "not", "self", ".", "p", ".", "context", ":", "self", ".", "p", ".", "win_size", "=", "0", "\n", "\n", "self", ".", "lib", "=", "ctypes", ".", "cdll", ".", "LoadLibrary", "(", "'./batchGen.so'", ")", "# Loads the C++ code for making batches", "\n", "self", ".", "lib", ".", "init", "(", ")", "\n", "\n", "# Creating pointers required for creating batches", "\n", "self", ".", "edges", "=", "np", ".", "zeros", "(", "self", ".", "p", ".", "max_dep_len", "*", "self", ".", "p", ".", "batch_size", "*", "3", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "self", ".", "wrds", "=", "np", ".", "zeros", "(", "self", ".", "p", ".", "max_sent_len", "*", "self", ".", "p", ".", "batch_size", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "self", ".", "samp", "=", "np", ".", "zeros", "(", "self", ".", "p", ".", "max_sent_len", "*", "self", ".", "p", ".", "batch_size", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "self", ".", "negs", "=", "np", ".", "zeros", "(", "self", ".", "p", ".", "max_sent_len", "*", "self", ".", "p", ".", "num_neg", "*", "self", ".", "p", ".", "batch_size", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "self", ".", "wlen", "=", "np", ".", "zeros", "(", "self", ".", "p", ".", "batch_size", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "self", ".", "elen", "=", "np", ".", "zeros", "(", "self", ".", "p", ".", "batch_size", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "# Pointer address of above arrays", "\n", "self", ".", "edges_addr", "=", "self", ".", "edges", ".", "ctypes", ".", "data_as", "(", "ctypes", ".", "POINTER", "(", "ctypes", ".", "c_int", ")", ")", "\n", "self", ".", "wrds_addr", "=", "self", ".", "wrds", ".", "ctypes", ".", "data_as", "(", "ctypes", ".", "POINTER", "(", "ctypes", ".", "c_int", ")", ")", "\n", "self", ".", "negs_addr", "=", "self", ".", "negs", ".", "ctypes", ".", "data_as", "(", "ctypes", ".", "POINTER", "(", "ctypes", ".", "c_int", ")", ")", "\n", "self", ".", "samp_addr", "=", "self", ".", "samp", ".", "ctypes", ".", "data_as", "(", "ctypes", ".", "POINTER", "(", "ctypes", ".", "c_int", ")", ")", "\n", "self", ".", "wlen_addr", "=", "self", ".", "wlen", ".", "ctypes", ".", "data_as", "(", "ctypes", ".", "POINTER", "(", "ctypes", ".", "c_int", ")", ")", "\n", "self", ".", "elen_addr", "=", "self", ".", "elen", ".", "ctypes", ".", "data_as", "(", "ctypes", ".", "POINTER", "(", "ctypes", ".", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.syngcn.SynGCN.add_placeholders": [[94, 116], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["None"], ["", "def", "add_placeholders", "(", "self", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tPlaceholders for the computational graph\n\n\t\tParameters\n\t\t----------\n\t\tsent_wrds:\tAll words in the batch\n\t\tsent_mask:\tMask for removing padding\n\t\tneg_wrds:\tNegative samples\n\t\tadj_mat:\tAdjacnecy matrix for each sentence in the batch\n\t\tnum_words:\tTotal number of words in each sentence\n\t\tseq_len:\tMaximum length of sentence in the entire batch\n\n\t\tReturns\n\t\t-------\n\t\t\"\"\"", "\n", "self", ".", "sent_wrds", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "self", ".", "p", ".", "batch_size", ",", "None", "]", ",", "name", "=", "'sent_wrds'", ")", "\n", "self", ".", "sent_mask", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "self", ".", "p", ".", "batch_size", ",", "None", "]", ",", "name", "=", "'sent_mask'", ")", "\n", "self", ".", "neg_wrds", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "self", ".", "p", ".", "batch_size", ",", "None", ",", "self", ".", "p", ".", "num_neg", "]", ",", "name", "=", "'neg_wrds'", ")", "\n", "self", ".", "adj_mat", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ",", "shape", "=", "[", "self", ".", "num_deLabel", ",", "self", ".", "p", ".", "batch_size", ",", "None", ",", "None", "]", ",", "name", "=", "'adj_ind'", ")", "\n", "self", ".", "num_words", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "self", ".", "p", ".", "batch_size", "]", ",", "name", "=", "'num_words'", ")", "\n", "self", ".", "seq_len", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", ")", ",", "name", "=", "'seq_len'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.syngcn.SynGCN.get_adj": [[117, 139], ["np.sum", "np.expand_dims", "np.concatenate", "np.ones", "sparse.COO().todense", "np.repeat", "np.reshape", "np.arange", "sparse.COO"], "methods", ["None"], ["", "def", "get_adj", "(", "self", ",", "batch", ",", "seq_len", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tReturns the adjacency matrix required for applying GCN \n\n\t\tParameters\n\t\t----------\n\t\tbatch:\t\tbatch returned by getBatch generator\n\t\tseq_len:\tMaximum length of sentence in the batch\n\n\t\tReturns\n\t\t-------\n\t\tAdjacency matrix shape=[Number of dependency labels, Batch size, seq_len, seq_len]\n\t\t\"\"\"", "\n", "num_edges", "=", "np", ".", "sum", "(", "batch", "[", "'elen'", "]", ")", "\n", "b_ind", "=", "np", ".", "expand_dims", "(", "np", ".", "repeat", "(", "np", ".", "arange", "(", "self", ".", "p", ".", "batch_size", ")", ",", "batch", "[", "'elen'", "]", ")", ",", "axis", "=", "1", ")", "\n", "e_ind", "=", "np", ".", "reshape", "(", "batch", "[", "'edges'", "]", ",", "[", "-", "1", ",", "3", "]", ")", "[", ":", "num_edges", "]", "\n", "\n", "adj_ind", "=", "np", ".", "concatenate", "(", "[", "b_ind", ",", "e_ind", "]", ",", "axis", "=", "1", ")", "\n", "adj_ind", "=", "adj_ind", "[", ":", ",", "[", "3", ",", "0", ",", "1", ",", "2", "]", "]", "\n", "adj_data", "=", "np", ".", "ones", "(", "num_edges", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "return", "COO", "(", "adj_ind", ".", "T", ",", "adj_data", ",", "shape", "=", "(", "self", ".", "num_deLabel", ",", "self", ".", "p", ".", "batch_size", ",", "seq_len", ",", "seq_len", ")", ")", ".", "todense", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.syngcn.SynGCN.pad_data": [[140, 168], ["np.max", "np.zeros", "np.zeros", "range", "len", "len", "len", "len"], "methods", ["None"], ["", "def", "pad_data", "(", "self", ",", "data", ",", "dlen", ",", "sub_sample", "=", "[", "]", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tPads a given batch\n\n\t\tParameters\n\t\t----------\n\t\tdata:\t\tList of tokenized sentences in a batch\n\t\tdlen:\t\tTotal number of words in each sentence in a batch\n\n\t\tReturns\n\t\t-------\n\t\tdata_pad:\tPadded word sequence\n\t\tdata_mask:\tMasking for padded words\n\t\tmax_len:\tMaximum length of sentence in the batch\n\t\t\"\"\"", "\n", "max_len", "=", "np", ".", "max", "(", "dlen", ")", "\n", "data_pad", "=", "np", ".", "zeros", "(", "[", "len", "(", "dlen", ")", ",", "max_len", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "data_mask", "=", "np", ".", "zeros", "(", "[", "len", "(", "dlen", ")", ",", "max_len", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "offset", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "dlen", ")", ")", ":", "\n", "\t\t\t", "data_pad", "[", "i", ",", ":", "dlen", "[", "i", "]", "]", "=", "data", "[", "offset", ":", "offset", "+", "dlen", "[", "i", "]", "]", "\n", "data_mask", "[", "i", ",", ":", "dlen", "[", "i", "]", "]", "=", "1", "\n", "if", "len", "(", "sub_sample", ")", "!=", "0", ":", "\n", "\t\t\t\t", "data_mask", "[", "i", ",", ":", "dlen", "[", "i", "]", "]", "*=", "sub_sample", "[", "offset", ":", "offset", "+", "dlen", "[", "i", "]", "]", "\n", "", "offset", "+=", "dlen", "[", "i", "]", "\n", "\n", "", "return", "data_pad", ",", "data_mask", ",", "max_len", "\n", "\n"]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.syngcn.SynGCN.create_feed_dict": [[170, 189], ["syngcn.SynGCN.pad_data", "syngcn.SynGCN.get_adj"], "methods", ["home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.syngcn.SynGCN.pad_data", "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.get_adj"], ["", "def", "create_feed_dict", "(", "self", ",", "batch", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tCreates the feed dictionary\n\n\t\tParameters\n\t\t----------\n\t\tbatch:\t\tBatch as returned by getBatch generator\n\n\t\tReturns\n\t\t-------\n\t\tfeed_dict:\tFeed dictionary\n\t\t\"\"\"", "\n", "feed_dict", "=", "{", "}", "\n", "wrds_pad", ",", "wrds_mask", ",", "seq_len", "=", "self", ".", "pad_data", "(", "batch", "[", "'wrds'", "]", ",", "batch", "[", "'wlen'", "]", ",", "sub_sample", "=", "batch", "[", "'sample'", "]", ")", "\n", "feed_dict", "[", "self", ".", "sent_wrds", "]", "=", "wrds_pad", "\n", "feed_dict", "[", "self", ".", "sent_mask", "]", "=", "wrds_mask", "\n", "feed_dict", "[", "self", ".", "seq_len", "]", "=", "seq_len", "\n", "feed_dict", "[", "self", ".", "adj_mat", "]", "=", "self", ".", "get_adj", "(", "batch", ",", "seq_len", ")", "\n", "return", "feed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.syngcn.SynGCN.aggregate": [[190, 204], ["tensorflow.matmul", "tensorflow.cast"], "methods", ["None"], ["", "def", "aggregate", "(", "self", ",", "inp", ",", "adj_mat", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tGCN aggregation operation\n\n\t\tParameters\n\t\t----------\n\t\tinp:\t\tAction from neighborhood nodes\n\t\tadj_mat:\tAdjacency matrix\n\n\t\tReturns\n\t\t-------\n\t\tout:\t\tEmbedding obtained after aggregation operation\n\t\t\"\"\"", "\n", "return", "tf", ".", "matmul", "(", "tf", ".", "cast", "(", "adj_mat", ",", "tf", ".", "float32", ")", ",", "inp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.syngcn.SynGCN.gcnLayer": [[205, 308], ["out.append", "range", "len", "tensorflow.name_scope", "range", "out.append", "tensorflow.zeros", "tensorflow.nn.relu", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.tensordot", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.name_scope", "tensorflow.transpose", "tensorflow.name_scope", "tensorflow.nn.dropout", "tensorflow.tensordot", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.tensordot", "tensorflow.expand_dims", "tensorflow.nn.dropout", "syngcn.SynGCN.aggregate", "syngcn.SynGCN.aggregate", "tensorflow.tensordot", "tensorflow.expand_dims", "tensorflow.nn.dropout", "syngcn.SynGCN.aggregate", "syngcn.SynGCN.aggregate", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.sigmoid", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.tensordot", "tensorflow.expand_dims", "tensorflow.sigmoid", "tensorflow.tensordot", "tensorflow.expand_dims", "tensorflow.sigmoid", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.constant_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.constant_initializer"], "methods", ["home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.aggregate", "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.aggregate", "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.aggregate", "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.aggregate"], ["", "def", "gcnLayer", "(", "self", ",", "gcn_in", ",", "in_dim", ",", "gcn_dim", ",", "batch_size", ",", "max_nodes", ",", "max_labels", ",", "adj_mat", ",", "w_gating", "=", "True", ",", "num_layers", "=", "1", ",", "name", "=", "\"GCN\"", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tGCN Layer Implementation\n\n\t\tParameters\n\t\t----------\n\t\tgcn_in:\t\tInput to GCN Layer\n\t\tin_dim:\t\tDimension of input to GCN Layer \n\t\tgcn_dim:\tHidden state dimension of GCN\n\t\tbatch_size:\tBatch size\n\t\tmax_nodes:\tMaximum number of nodes in graph\n\t\tmax_labels:\tMaximum number of edge labels\n\t\tadj_ind:\tAdjacency matrix indices\n\t\tadj_data:\tAdjacency matrix data (all 1's)\n\t\tw_gating:\tWhether to include gating in GCN\n\t\tnum_layers:\tNumber of GCN Layers\n\t\tname \t\tName of the layer (used for creating variables, keep it different for different layers)\n\n\t\tReturns\n\t\t-------\n\t\tout\t\tList of output of different GCN layers with first element as input itself, i.e., [gcn_in, gcn_layer1_out, gcn_layer2_out ...]\n\t\t\"\"\"", "\n", "out", "=", "[", "]", "\n", "out", ".", "append", "(", "gcn_in", ")", "\n", "\n", "for", "layer", "in", "range", "(", "num_layers", ")", ":", "\n", "\t\t\t", "gcn_in", "=", "out", "[", "-", "1", "]", "\n", "if", "len", "(", "out", ")", ">", "1", ":", "in_dim", "=", "gcn_dim", "# After first iteration the in_dim = gcn_dim", "\n", "\n", "with", "tf", ".", "name_scope", "(", "'%s-%d'", "%", "(", "name", ",", "layer", ")", ")", ":", "\n", "\n", "\t\t\t\t", "if", "layer", ">", "0", "and", "self", ".", "p", ".", "loop", ":", "\n", "\t\t\t\t\t", "with", "tf", ".", "variable_scope", "(", "'Loop-name-%s_layer-%d'", "%", "(", "name", ",", "layer", ")", ")", "as", "scope", ":", "\n", "\t\t\t\t\t\t", "w_loop", "=", "tf", ".", "get_variable", "(", "'w_loop'", ",", "[", "in_dim", ",", "gcn_dim", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ",", "regularizer", "=", "self", ".", "regularizer", ")", "\n", "w_gloop", "=", "tf", ".", "get_variable", "(", "'w_gloop'", ",", "[", "in_dim", ",", "1", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ",", "regularizer", "=", "self", ".", "regularizer", ")", "\n", "\n", "inp_loop", "=", "tf", ".", "tensordot", "(", "gcn_in", ",", "w_loop", ",", "axes", "=", "[", "2", ",", "0", "]", ")", "\n", "if", "self", ".", "p", ".", "dropout", "!=", "1.0", ":", "inp_loop", "=", "tf", ".", "nn", ".", "dropout", "(", "inp_loop", ",", "keep_prob", "=", "self", ".", "p", ".", "dropout", ")", "\n", "\n", "if", "w_gating", ":", "\n", "\t\t\t\t\t\t\t", "loop_act", "=", "tf", ".", "tensordot", "(", "gcn_in", ",", "tf", ".", "sigmoid", "(", "w_gloop", ")", ",", "axes", "=", "[", "2", ",", "0", "]", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t\t", "loop_act", "=", "inp_loop", "\n", "\n", "", "", "act_sum", "=", "loop_act", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "act_sum", "=", "tf", ".", "zeros", "(", "[", "batch_size", ",", "max_nodes", ",", "gcn_dim", "]", ")", "\n", "\n", "\n", "", "for", "lbl", "in", "range", "(", "max_labels", ")", ":", "\n", "\n", "\t\t\t\t\t", "with", "tf", ".", "variable_scope", "(", "'label-%d_name-%s_layer-%d'", "%", "(", "lbl", ",", "name", ",", "layer", ")", ")", "as", "scope", ":", "\n", "\n", "\t\t\t\t\t\t", "w_in", "=", "tf", ".", "get_variable", "(", "'w_in'", ",", "[", "in_dim", ",", "gcn_dim", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ",", "regularizer", "=", "self", ".", "regularizer", ")", "\n", "w_out", "=", "tf", ".", "get_variable", "(", "'w_out'", ",", "[", "in_dim", ",", "gcn_dim", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ",", "regularizer", "=", "self", ".", "regularizer", ")", "\n", "b_in", "=", "tf", ".", "get_variable", "(", "'b_in'", ",", "[", "1", ",", "gcn_dim", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "regularizer", "=", "self", ".", "regularizer", ")", "\n", "b_out", "=", "tf", ".", "get_variable", "(", "'b_out'", ",", "[", "1", ",", "gcn_dim", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "regularizer", "=", "self", ".", "regularizer", ")", "\n", "\n", "if", "w_gating", ":", "\n", "\t\t\t\t\t\t\t", "w_gin", "=", "tf", ".", "get_variable", "(", "'w_gin'", ",", "[", "in_dim", ",", "1", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ",", "regularizer", "=", "self", ".", "regularizer", ")", "\n", "b_gin", "=", "tf", ".", "get_variable", "(", "'b_gin'", ",", "[", "1", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "regularizer", "=", "self", ".", "regularizer", ")", "\n", "w_gout", "=", "tf", ".", "get_variable", "(", "'w_gout'", ",", "[", "in_dim", ",", "1", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ",", "regularizer", "=", "self", ".", "regularizer", ")", "\n", "b_gout", "=", "tf", ".", "get_variable", "(", "'b_gout'", ",", "[", "1", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "regularizer", "=", "self", ".", "regularizer", ")", "\n", "\n", "\n", "", "", "with", "tf", ".", "name_scope", "(", "'in_arcs-%s_name-%s_layer-%d'", "%", "(", "lbl", ",", "name", ",", "layer", ")", ")", ":", "\n", "\n", "\t\t\t\t\t\t", "inp_in", "=", "tf", ".", "tensordot", "(", "gcn_in", ",", "w_in", ",", "axes", "=", "[", "2", ",", "0", "]", ")", "+", "tf", ".", "expand_dims", "(", "b_in", ",", "axis", "=", "0", ")", "\n", "adj_matrix", "=", "tf", ".", "transpose", "(", "adj_mat", "[", "lbl", "]", ",", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "\n", "if", "self", ".", "p", ".", "dropout", "!=", "1.0", ":", "\n", "\t\t\t\t\t\t\t", "inp_in", "=", "tf", ".", "nn", ".", "dropout", "(", "inp_in", ",", "keep_prob", "=", "self", ".", "p", ".", "dropout", ")", "\n", "\n", "", "if", "w_gating", ":", "\n", "\t\t\t\t\t\t\t", "inp_gin", "=", "tf", ".", "tensordot", "(", "gcn_in", ",", "w_gin", ",", "axes", "=", "[", "2", ",", "0", "]", ")", "+", "tf", ".", "expand_dims", "(", "b_gin", ",", "axis", "=", "0", ")", "\n", "inp_in", "=", "inp_in", "*", "tf", ".", "sigmoid", "(", "inp_gin", ")", "\n", "in_act", "=", "self", ".", "aggregate", "(", "inp_in", ",", "adj_matrix", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t\t", "in_act", "=", "self", ".", "aggregate", "(", "inp_in", ",", "adj_matrix", ")", "\n", "\n", "\n", "", "", "with", "tf", ".", "name_scope", "(", "'out_arcs-%s_name-%s_layer-%d'", "%", "(", "lbl", ",", "name", ",", "layer", ")", ")", ":", "\n", "\t\t\t\t\t\t", "inp_out", "=", "tf", ".", "tensordot", "(", "gcn_in", ",", "w_out", ",", "axes", "=", "[", "2", ",", "0", "]", ")", "+", "tf", ".", "expand_dims", "(", "b_out", ",", "axis", "=", "0", ")", "\n", "adj_matrix", "=", "adj_mat", "[", "lbl", "]", "\n", "\n", "if", "self", ".", "p", ".", "dropout", "!=", "1.0", ":", "\n", "\t\t\t\t\t\t\t", "inp_out", "=", "tf", ".", "nn", ".", "dropout", "(", "inp_out", ",", "keep_prob", "=", "self", ".", "p", ".", "dropout", ")", "\n", "\n", "", "if", "w_gating", ":", "\n", "\t\t\t\t\t\t\t", "inp_gout", "=", "tf", ".", "tensordot", "(", "gcn_in", ",", "w_gout", ",", "axes", "=", "[", "2", ",", "0", "]", ")", "+", "tf", ".", "expand_dims", "(", "b_gout", ",", "axis", "=", "0", ")", "\n", "inp_out", "=", "inp_out", "*", "tf", ".", "sigmoid", "(", "inp_gout", ")", "\n", "out_act", "=", "self", ".", "aggregate", "(", "inp_out", ",", "adj_matrix", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t\t", "out_act", "=", "self", ".", "aggregate", "(", "inp_out", ",", "adj_matrix", ")", "\n", "\n", "\n", "", "", "act_sum", "+=", "in_act", "+", "out_act", "\n", "\n", "", "gcn_out", "=", "tf", ".", "nn", ".", "relu", "(", "act_sum", ")", "if", "layer", "!=", "num_layers", "-", "1", "else", "act_sum", "\n", "\n", "\n", "out", ".", "append", "(", "gcn_out", ")", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.syngcn.SynGCN.add_model": [[309, 352], ["tensorflow.nn.embedding_lookup", "syngcn.SynGCN.gcnLayer", "tensorflow.variable_scope", "tensorflow.Variable", "tensorflow.concat", "tensorflow.get_variable", "tensorflow.concat", "tensorflow.get_variable", "helper.getEmbeddings", "tensorflow.get_variable", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.get_variable", "tensorflow.zeros", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.constant_initializer", "range", "len"], "methods", ["home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.gcnLayer", "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.helper.getEmbeddings"], ["", "def", "add_model", "(", "self", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tCreates the Computational Graph\n\n\t\tParameters\n\t\t----------\n\n\t\tReturns\n\t\t-------\n\t\tnn_out:\t\tLogits for each bag in the batch\n\t\t\"\"\"", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'Embed_mat'", ")", ":", "\n", "\n", "# when target embeddings for initialization is assigned", "\n", "\t\t\t", "if", "self", ".", "p", ".", "embed_loc", ":", "\n", "\t\t\t\t", "embed_init", "=", "getEmbeddings", "(", "self", ".", "p", ".", "embed_loc", ",", "[", "self", ".", "id2voc", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "self", ".", "voc2id", ")", ")", "]", ",", "self", ".", "p", ".", "embed_dim", ")", "\n", "_wrd_embed", "=", "tf", ".", "get_variable", "(", "'embed_matrix'", ",", "initializer", "=", "embed_init", ",", "regularizer", "=", "self", ".", "regularizer", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "embed_init", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "_wrd_embed", "=", "tf", ".", "get_variable", "(", "'embed_matrix'", ",", "[", "self", ".", "vocab_size", ",", "self", ".", "p", ".", "embed_dim", "]", ",", "initializer", "=", "embed_init", ",", "regularizer", "=", "self", ".", "regularizer", ")", "\n", "\n", "", "wrd_pad", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "[", "1", ",", "self", ".", "p", ".", "embed_dim", "]", ")", ",", "trainable", "=", "False", ")", "\n", "self", ".", "embed_matrix", "=", "tf", ".", "concat", "(", "[", "_wrd_embed", ",", "wrd_pad", "]", ",", "axis", "=", "0", ")", "\n", "\n", "_context_matrix", "=", "tf", ".", "get_variable", "(", "'context_matrix'", ",", "[", "self", ".", "vocab_size", ",", "self", ".", "p", ".", "embed_dim", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ",", "regularizer", "=", "self", ".", "regularizer", ")", "\n", "self", ".", "context_matrix", "=", "tf", ".", "concat", "(", "[", "_context_matrix", ",", "wrd_pad", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "context_bias", "=", "tf", ".", "get_variable", "(", "'context_bias'", ",", "[", "self", ".", "vocab_size", "+", "1", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "regularizer", "=", "self", ".", "regularizer", ")", "\n", "\n", "", "embed", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embed_matrix", ",", "self", ".", "sent_wrds", ")", "\n", "\n", "gcn_in", "=", "embed", "\n", "gcn_in_dim", "=", "self", ".", "p", ".", "embed_dim", "\n", "\n", "gcn_out", "=", "self", ".", "gcnLayer", "(", "gcn_in", "=", "gcn_in", ",", "in_dim", "=", "gcn_in_dim", ",", "gcn_dim", "=", "self", ".", "p", ".", "embed_dim", ",", "\n", "batch_size", "=", "self", ".", "p", ".", "batch_size", ",", "max_nodes", "=", "self", ".", "seq_len", ",", "max_labels", "=", "self", ".", "num_deLabel", ",", "\n", "adj_mat", "=", "self", ".", "adj_mat", ",", "num_layers", "=", "self", ".", "p", ".", "gcn_layer", ",", "name", "=", "\"GCN\"", ")", "\n", "nn_out", "=", "gcn_out", "[", "-", "1", "]", "\n", "return", "nn_out", "\n", "\n"]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.syngcn.SynGCN.add_loss_op": [[353, 403], ["tensorflow.reshape", "tensorflow.nn.fixed_unigram_candidate_sampler", "tensorflow.cast", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.concat", "tensorflow.concat", "tensorflow.nn.embedding_lookup", "tensorflow.reduce_sum", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.softmax_cross_entropy_with_logits_v2", "tensorflow.tile", "tensorflow.reshape", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.contrib.layers.apply_regularization", "tensorflow.cast", "tensorflow.expand_dims", "tensorflow.ones", "tensorflow.zeros", "tensorflow.expand_dims", "tensorflow.get_collection"], "methods", ["None"], ["", "def", "add_loss_op", "(", "self", ",", "nn_out", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tComputes the loss for learning embeddings\n\n\t\tParameters\n\t\t----------\n\t\tnn_out:\t\tLogits for each bag in the batch\n\n\t\tReturns\n\t\t-------\n\t\tloss:\t\tComputes loss\n\t\t\"\"\"", "\n", "\n", "target_words", "=", "tf", ".", "reshape", "(", "self", ".", "sent_wrds", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "\n", "neg_ids", ",", "_", ",", "_", "=", "tf", ".", "nn", ".", "fixed_unigram_candidate_sampler", "(", "\n", "true_classes", "=", "tf", ".", "cast", "(", "target_words", ",", "tf", ".", "int64", ")", ",", "\n", "num_true", "=", "1", ",", "\n", "num_sampled", "=", "self", ".", "p", ".", "num_neg", "*", "self", ".", "p", ".", "batch_size", ",", "\n", "unique", "=", "True", ",", "\n", "distortion", "=", "0.75", ",", "\n", "range_max", "=", "self", ".", "vocab_size", ",", "\n", "unigrams", "=", "self", ".", "voc_freq_l", "\n", ")", "\n", "neg_ids", "=", "tf", ".", "cast", "(", "neg_ids", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "neg_ids", "=", "tf", ".", "reshape", "(", "neg_ids", ",", "[", "self", ".", "p", ".", "batch_size", ",", "self", ".", "p", ".", "num_neg", "]", ")", "\n", "neg_ids", "=", "tf", ".", "reshape", "(", "tf", ".", "tile", "(", "neg_ids", ",", "[", "1", ",", "self", ".", "seq_len", "]", ")", ",", "[", "self", ".", "p", ".", "batch_size", ",", "self", ".", "seq_len", ",", "self", ".", "p", ".", "num_neg", "]", ")", "\n", "\n", "target_ind", "=", "tf", ".", "concat", "(", "[", "\n", "tf", ".", "expand_dims", "(", "self", ".", "sent_wrds", ",", "axis", "=", "2", ")", ",", "\n", "neg_ids", "\n", "]", ",", "axis", "=", "2", ")", "\n", "\n", "target_labels", "=", "tf", ".", "concat", "(", "[", "\n", "tf", ".", "ones", "(", "[", "self", ".", "p", ".", "batch_size", ",", "self", ".", "seq_len", ",", "1", "]", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "tf", ".", "zeros", "(", "[", "self", ".", "p", ".", "batch_size", ",", "self", ".", "seq_len", ",", "self", ".", "p", ".", "num_neg", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "]", ",", "\n", "axis", "=", "2", ")", "\n", "target_embed", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "context_matrix", ",", "target_ind", ")", "\n", "pred", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "expand_dims", "(", "nn_out", ",", "axis", "=", "2", ")", "*", "target_embed", ",", "axis", "=", "3", ")", "\n", "target_labels", "=", "tf", ".", "reshape", "(", "target_labels", ",", "[", "self", ".", "p", ".", "batch_size", "*", "self", ".", "seq_len", ",", "-", "1", "]", ")", "\n", "pred", "=", "tf", ".", "reshape", "(", "pred", ",", "[", "self", ".", "p", ".", "batch_size", "*", "self", ".", "seq_len", ",", "-", "1", "]", ")", "\n", "total_loss", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits_v2", "(", "labels", "=", "target_labels", ",", "logits", "=", "pred", ")", "\n", "\n", "masked_loss", "=", "total_loss", "*", "tf", ".", "reshape", "(", "self", ".", "sent_mask", ",", "[", "-", "1", "]", ")", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "masked_loss", ")", "/", "tf", ".", "reduce_sum", "(", "self", ".", "sent_mask", ")", "\n", "\n", "if", "self", ".", "regularizer", "!=", "None", ":", "\n", "\t\t\t", "loss", "+=", "tf", ".", "contrib", ".", "layers", ".", "apply_regularization", "(", "self", ".", "regularizer", ",", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "REGULARIZATION_LOSSES", ")", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.syngcn.SynGCN.add_optimizer": [[404, 422], ["tensorflow.name_scope", "tensorflow.train.GradientDescentOptimizer.minimize", "tensorflow.train.AdamOptimizer", "tensorflow.train.GradientDescentOptimizer"], "methods", ["None"], ["", "def", "add_optimizer", "(", "self", ",", "loss", ",", "isAdam", "=", "True", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tAdd optimizer for training variables\n\n\t\tParameters\n\t\t----------\n\t\tloss:\t\tComputed loss\n\n\t\tReturns\n\t\t-------\n\t\ttrain_op:\tTraining optimizer\n\t\t\"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "'Optimizer'", ")", ":", "\n", "\t\t\t", "if", "isAdam", ":", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "p", ".", "lr", ")", "\n", "else", ":", "optimizer", "=", "tf", ".", "train", ".", "GradientDescentOptimizer", "(", "self", ".", "p", ".", "lr", ")", "\n", "train_op", "=", "optimizer", ".", "minimize", "(", "loss", ")", "\n", "\n", "", "return", "train_op", "\n", "\n"]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.syngcn.SynGCN.__init__": [[423, 458], ["helper.get_logger", "syngcn.SynGCN.logger.info", "pprint", "syngcn.SynGCN.load_data", "syngcn.SynGCN.add_placeholders", "syngcn.SynGCN.add_model", "syngcn.SynGCN.add_loss_op", "tensorflow.summary.merge_all", "os.path.isdir", "os.system", "os.path.isdir", "os.system", "vars", "vars", "tensorflow.contrib.layers.l2_regularizer", "syngcn.SynGCN.add_optimizer", "syngcn.SynGCN.add_optimizer"], "methods", ["home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.helper.get_logger", "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.load_data", "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.add_placeholders", "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.add_model", "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.add_loss_op", "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.add_optimizer", "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.add_optimizer"], ["", "def", "__init__", "(", "self", ",", "params", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tConstructor for the main function. Loads data and creates computation graph. \n\n\t\tParameters\n\t\t----------\n\t\tparams:\t\tHyperparameters of the model\n\n\t\tReturns\n\t\t-------\n\t\t\"\"\"", "\n", "self", ".", "p", "=", "params", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "p", ".", "log_dir", ")", ":", "os", ".", "system", "(", "'mkdir {}'", ".", "format", "(", "self", ".", "p", ".", "log_dir", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "p", ".", "emb_dir", ")", ":", "os", ".", "system", "(", "'mkdir {}'", ".", "format", "(", "self", ".", "p", ".", "emb_dir", ")", ")", "\n", "\n", "self", ".", "logger", "=", "get_logger", "(", "self", ".", "p", ".", "name", ",", "self", ".", "p", ".", "log_dir", ",", "self", ".", "p", ".", "config_dir", ")", "\n", "\n", "\n", "self", ".", "logger", ".", "info", "(", "vars", "(", "self", ".", "p", ")", ")", ";", "pprint", "(", "vars", "(", "self", ".", "p", ")", ")", "\n", "self", ".", "p", ".", "batch_size", "=", "self", ".", "p", ".", "batch_size", "\n", "\n", "if", "self", ".", "p", ".", "l2", "==", "0.0", ":", "self", ".", "regularizer", "=", "None", "\n", "else", ":", "self", ".", "regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "scale", "=", "self", ".", "p", ".", "l2", ")", "\n", "\n", "self", ".", "load_data", "(", ")", "\n", "self", ".", "add_placeholders", "(", ")", "\n", "\n", "nn_out", "=", "self", ".", "add_model", "(", ")", "\n", "self", ".", "loss", "=", "self", ".", "add_loss_op", "(", "nn_out", ")", "\n", "\n", "if", "self", ".", "p", ".", "opt", "==", "'adam'", ":", "self", ".", "train_op", "=", "self", ".", "add_optimizer", "(", "self", ".", "loss", ")", "\n", "else", ":", "self", ".", "train_op", "=", "self", ".", "add_optimizer", "(", "self", ".", "loss", ",", "isAdam", "=", "False", ")", "\n", "\n", "self", ".", "merged_summ", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.syngcn.SynGCN.checkpoint": [[459, 487], ["sess.run", "web.embedding.Embedding.from_dict", "web.evaluate.evaluate_on_all", "np.mean", "syngcn.SynGCN.logger.info", "round", "list", "syngcn.SynGCN.logger.info", "open", "syngcn.SynGCN.id2voc.items", "syngcn.SynGCN.saver.save", "syngcn.SynGCN.voc2id.items", "web.evaluate.evaluate_on_all.items", "web.evaluate.evaluate_on_all.values", "open.write", "str", "round", "embed_matrix[].tolist"], "methods", ["None"], ["", "def", "checkpoint", "(", "self", ",", "epoch", ",", "sess", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tComputes intrinsic scores for embeddings and dumps the embeddings embeddings\n\n\t\tParameters\n\t\t----------\n\t\tepoch:\t\tCurrent epoch number\n\t\tsess:\t\tTensorflow session object\n\n\t\tReturns\n\t\t-------\n\t\t\"\"\"", "\n", "embed_matrix", ",", "context_matrix", "=", "sess", ".", "run", "(", "[", "self", ".", "embed_matrix", ",", "self", ".", "context_matrix", "]", ")", "\n", "voc2vec", "=", "{", "wrd", ":", "embed_matrix", "[", "wid", "]", "for", "wrd", ",", "wid", "in", "self", ".", "voc2id", ".", "items", "(", ")", "}", "\n", "embedding", "=", "Embedding", ".", "from_dict", "(", "voc2vec", ")", "\n", "results", "=", "evaluate_on_all", "(", "embedding", ")", "\n", "results", "=", "{", "key", ":", "round", "(", "val", "[", "0", "]", ",", "4", ")", "for", "key", ",", "val", "in", "results", ".", "items", "(", ")", "}", "\n", "curr_int", "=", "np", ".", "mean", "(", "list", "(", "results", ".", "values", "(", ")", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Current Score: {}'", ".", "format", "(", "curr_int", ")", ")", "\n", "\n", "if", "curr_int", ">", "self", ".", "best_int_avg", ":", "\n", "\t\t\t", "self", ".", "logger", ".", "info", "(", "\"Saving embedding matrix\"", ")", "\n", "f", "=", "open", "(", "'{}/{}'", ".", "format", "(", "self", ".", "p", ".", "emb_dir", ",", "self", ".", "p", ".", "name", ")", ",", "'w'", ")", "\n", "for", "id", ",", "wrd", "in", "self", ".", "id2voc", ".", "items", "(", ")", ":", "\n", "\t\t\t\t", "f", ".", "write", "(", "'{} {}\\n'", ".", "format", "(", "wrd", ",", "' '", ".", "join", "(", "[", "str", "(", "round", "(", "v", ",", "6", ")", ")", "for", "v", "in", "embed_matrix", "[", "id", "]", ".", "tolist", "(", ")", "]", ")", ")", ")", "\n", "\n", "", "self", ".", "saver", ".", "save", "(", "sess", "=", "sess", ",", "save_path", "=", "self", ".", "save_path", ")", "\n", "self", ".", "best_int_avg", "=", "curr_int", "\n", "\n"]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.syngcn.SynGCN.run_epoch": [[488, 521], ["time.time", "enumerate", "np.mean", "syngcn.SynGCN.getBatches", "syngcn.SynGCN.create_feed_dict", "sess.run", "losses.append", "syngcn.SynGCN.logger.info", "time.time", "syngcn.SynGCN.logger.info", "syngcn.SynGCN.checkpoint", "time.time", "round", "np.mean"], "methods", ["home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.getBatches", "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.create_feed_dict", "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.checkpoint"], ["", "", "def", "run_epoch", "(", "self", ",", "sess", ",", "epoch", ",", "shuffle", "=", "True", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tRuns one epoch of training\n\n\t\tParameters\n\t\t----------\n\t\tsess:\t\tTensorflow session object\n\t\tepoch:\t\tEpoch number\n\t\tshuffle:\tShuffle data while before creates batches\n\n\t\tReturns\n\t\t-------\n\t\tloss:\t\tLoss over the corpus\n\t\t\"\"\"", "\n", "losses", "=", "[", "]", "\n", "cnt", "=", "0", "\n", "\n", "st", "=", "time", ".", "time", "(", ")", "\n", "for", "step", ",", "batch", "in", "enumerate", "(", "self", ".", "getBatches", "(", "shuffle", ")", ")", ":", "\n", "\t\t\t", "feed", "=", "self", ".", "create_feed_dict", "(", "batch", ")", "\n", "loss", ",", "_", "=", "sess", ".", "run", "(", "[", "self", ".", "loss", ",", "self", ".", "train_op", "]", ",", "feed_dict", "=", "feed", ")", "\n", "losses", ".", "append", "(", "loss", ")", "\n", "cnt", "+=", "self", ".", "p", ".", "batch_size", "\n", "\n", "if", "(", "step", "+", "1", ")", "%", "10", "==", "0", ":", "\n", "\t\t\t\t", "self", ".", "logger", ".", "info", "(", "'E:{} (Sents: {}/{} [{}]): Train Loss \\t{:.5}\\t{}\\t{:.5}'", ".", "format", "(", "epoch", ",", "cnt", ",", "self", ".", "p", ".", "total_sents", ",", "round", "(", "cnt", "/", "self", ".", "p", ".", "total_sents", "*", "100", ",", "1", ")", ",", "np", ".", "mean", "(", "losses", ")", ",", "self", ".", "p", ".", "name", ",", "self", ".", "best_int_avg", ")", ")", "\n", "en", "=", "time", ".", "time", "(", ")", "\n", "if", "(", "en", "-", "st", ")", ">=", "(", "3600", ")", ":", "\n", "\t\t\t\t\t", "self", ".", "logger", ".", "info", "(", "\"One more hour is over\"", ")", "\n", "self", ".", "checkpoint", "(", "epoch", ",", "sess", ")", "\n", "st", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "", "", "return", "np", ".", "mean", "(", "losses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.syngcn.SynGCN.fit": [[522, 549], ["tensorflow.train.Saver", "os.path.join", "range", "os.path.exists", "os.makedirs", "syngcn.SynGCN.saver.restore", "syngcn.SynGCN.logger.info", "syngcn.SynGCN.run_epoch", "syngcn.SynGCN.checkpoint", "syngcn.SynGCN.logger.info"], "methods", ["home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.run_epoch", "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.checkpoint"], ["", "def", "fit", "(", "self", ",", "sess", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tTrains the model and finally evaluates on test\n\n\t\tParameters\n\t\t----------\n\t\tsess:\t\tTensorflow session object\n\n\t\tReturns\n\t\t-------\n\t\t\"\"\"", "\n", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "save_dir", "=", "'checkpoints/'", "+", "self", ".", "p", ".", "name", "+", "'/'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "self", ".", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'best_int_avg'", ")", "\n", "\n", "self", ".", "best_int_avg", "=", "0.0", "\n", "\n", "if", "self", ".", "p", ".", "restore", ":", "\n", "\t\t\t", "self", ".", "saver", ".", "restore", "(", "sess", ",", "self", ".", "save_path", ")", "\n", "\n", "", "for", "epoch", "in", "range", "(", "self", ".", "p", ".", "max_epochs", ")", ":", "\n", "\t\t\t", "self", ".", "logger", ".", "info", "(", "'Epoch: {}'", ".", "format", "(", "epoch", ")", ")", "\n", "train_loss", "=", "self", ".", "run_epoch", "(", "sess", ",", "epoch", ")", "\n", "\n", "self", ".", "checkpoint", "(", "epoch", ",", "sess", ")", "\n", "self", ".", "logger", ".", "info", "(", "'[Epoch {}]: Training Loss: {:.5}, Best Loss: {:.5}\\n'", ".", "format", "(", "epoch", ",", "train_loss", ",", "self", ".", "best_int_avg", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.helper.set_gpu": [[11, 24], ["None"], "function", ["None"], ["def", "set_gpu", "(", "gpus", ")", ":", "\n", "\t", "\"\"\"\n\tSets the GPU to be used for the run\n\n\tParameters\n\t----------\n\tgpus:           List of GPUs to be used for the run\n\t\n\tReturns\n\t-------    \n\t\"\"\"", "\n", "os", ".", "environ", "[", "\"CUDA_DEVICE_ORDER\"", "]", "=", "\"PCI_BUS_ID\"", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "gpus", "\n", "\n"]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.helper.debug_nn": [[25, 48], ["tf.ConfigProto", "tf.Session", "tf.Session.run", "tf.summary.FileWriter", "tf.Session.run", "tf.global_variables_initializer"], "function", ["None"], ["", "def", "debug_nn", "(", "res_list", ",", "feed_dict", ")", ":", "\n", "\t", "\"\"\"\n\tFunction for debugging Tensorflow model      \n\n\tParameters\n\t----------\n\tres_list:       List of tensors/variables to view\n\tfeed_dict:\tFeed dict required for getting values\n\t\n\tReturns\n\t-------\n\tReturns the list of values of given tensors/variables after execution\n\n\t\"\"\"", "\n", "import", "tensorflow", "as", "tf", "\n", "\n", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "summ_writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "\"tf_board/debug_nn\"", ",", "sess", ".", "graph", ")", "\n", "res", "=", "sess", ".", "run", "(", "res_list", ",", "feed_dict", "=", "feed_dict", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.helper.get_logger": [[49, 75], ["json.load", "logging.config.dictConfig", "logging.config.dictConfig", "logging.getLogger", "logging.getLogger", "logging.StreamHandler", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "open", "name.replace", "logging.Formatter", "logging.Formatter"], "function", ["None"], ["", "def", "get_logger", "(", "name", ",", "log_dir", ",", "config_dir", ")", ":", "\n", "\t", "\"\"\"\n\tCreates a logger object\n\n\tParameters\n\t----------\n\tname:           Name of the logger file\n\tlog_dir:        Directory where logger file needs to be stored\n\tconfig_dir:     Directory from where log_config.json needs to be read\n\t\n\tReturns\n\t-------\n\tA logger object which writes to both file and stdout\n\t\t\n\t\"\"\"", "\n", "config_dict", "=", "json", ".", "load", "(", "open", "(", "config_dir", "+", "'log_config.json'", ")", ")", "\n", "config_dict", "[", "'handlers'", "]", "[", "'file_handler'", "]", "[", "'filename'", "]", "=", "log_dir", "+", "name", ".", "replace", "(", "'/'", ",", "'-'", ")", "\n", "logging", ".", "config", ".", "dictConfig", "(", "config_dict", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "\n", "std_out_format", "=", "'%(asctime)s - [%(levelname)s] - %(message)s'", "\n", "consoleHandler", "=", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "consoleHandler", ".", "setFormatter", "(", "logging", ".", "Formatter", "(", "std_out_format", ")", ")", "\n", "logger", ".", "addHandler", "(", "consoleHandler", ")", "\n", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.helper.getChunks": [[76, 90], ["range", "len"], "function", ["None"], ["", "def", "getChunks", "(", "inp_list", ",", "chunk_size", ")", ":", "\n", "\t", "\"\"\"\n\tSplits inp_list into lists of size chunk_size\n\n\tParameters\n\t----------\n\tinp_list:       List to be splittted\n\tchunk_size:     Size of each chunk required\n\t\n\tReturns\n\t-------\n\tchunks of the inp_list each of size chunk_size, last one can be smaller (leftout data)\n\t\"\"\"", "\n", "return", "[", "inp_list", "[", "x", ":", "x", "+", "chunk_size", "]", "for", "x", "in", "range", "(", "0", ",", "len", "(", "inp_list", ")", ",", "chunk_size", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.helper.read_mappings": [[91, 109], ["open", "line.strip().split", "len", "line.strip"], "function", ["None"], ["", "def", "read_mappings", "(", "fname", ")", ":", "\n", "\t", "\"\"\"\n\tA helper function for reading an object to identifier mapping\n\n\tParameters\n\t----------\n\tfname:\t\tName of the file containing mapping\n\n\tReturns\n\t-------\n\tmapping:\tDictionary object containing mapping information\n\t\"\"\"", "\n", "mapping", "=", "{", "}", "\n", "for", "line", "in", "open", "(", "fname", ")", ":", "\n", "\t\t", "vals", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "if", "len", "(", "vals", ")", "<", "2", ":", "continue", "\n", "mapping", "[", "vals", "[", "0", "]", "]", "=", "vals", "[", "1", "]", "\n", "", "return", "mapping", "\n", "\n"]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.helper.getEmbeddings": [[110, 147], ["open", "numpy.array", "line.strip().split", "list", "map", "embed_list.append", "print", "embed_list.append", "line.strip", "numpy.random.randn"], "function", ["None"], ["", "def", "getEmbeddings", "(", "embed_loc", ",", "wrd_list", ",", "embed_dims", ")", ":", "\n", "\t", "\"\"\"\n\tGives embedding for each word in wrd_list\n\n\tParameters\n\t----------\n\tmodel:\t\tWord2vec model\n\twrd_list:\tList of words for which embedding is required\n\tembed_dims:\tDimension of the embedding\n\n\tReturns\n\t-------\n\tembed_matrix:\t(len(wrd_list) x embed_dims) matrix containing embedding for each word in wrd_list in the same order\n\t\"\"\"", "\n", "embed_list", "=", "[", "]", "\n", "\n", "wrd2embed", "=", "{", "}", "\n", "for", "line", "in", "open", "(", "embed_loc", ",", "encoding", "=", "'utf-8'", ",", "errors", "=", "'ignore'", ")", ":", "\n", "\t\t", "data", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "\n", "# wrd, embed = data[0], data[1:]", "\n", "\n", "# Some words may be separated by space (telephone numbers, for example).", "\n", "# It's more robust to load data as follows.", "\n", "embed", "=", "data", "[", "-", "1", "*", "embed_dims", ":", "]", "\n", "wrd", "=", "' '", ".", "join", "(", "data", "[", ":", "-", "1", "*", "embed_dims", "]", ")", "\n", "\n", "embed", "=", "list", "(", "map", "(", "float", ",", "embed", ")", ")", "\n", "wrd2embed", "[", "wrd", "]", "=", "embed", "\n", "\n", "", "for", "wrd", "in", "wrd_list", ":", "\n", "\t\t", "if", "wrd", "in", "wrd2embed", ":", "embed_list", ".", "append", "(", "wrd2embed", "[", "wrd", "]", ")", "\n", "else", ":", "\n", "\t\t\t", "print", "(", "'Word not in embeddings dump {}'", ".", "format", "(", "wrd", ")", ")", "\n", "embed_list", ".", "append", "(", "np", ".", "random", ".", "randn", "(", "embed_dims", ")", ")", "\n", "\n", "", "", "return", "np", ".", "array", "(", "embed_list", ",", "dtype", "=", "np", ".", "float32", ")", "", "", ""]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.make_batch": [[11, 51], ["semgcn.SemGCN.batch_queue.put", "open", "random.shuffle", "len", "batch.append", "len", "len", "semgcn.SemGCN.batch_queue.put", "line.strip().split", "itertools.permutations", "random.shuffle", "wrd.lower", "wrd.lower", "range", "line.strip", "len"], "methods", ["None"], ["\t", "def", "make_batch", "(", "self", ",", "shuffle", "=", "True", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tGenerates batches and puts them in the queue\n\n\t\tParameters\n\t\t----------\n\t\tshuffle:\tWhether to shuffle batches or not\n\n\t\tReturns\n\t\t-------\n\t\tA batch in the form of a diciontary\n\t\t\tEdges:\tDependency parse edges\n\t\t\tWords:\tWord in the batch\n\t\t\tCur_len:Total number of words in each sentence\n\t\t\"\"\"", "\n", "batch", "=", "[", "]", "\n", "self", ".", "sent_num", "=", "0", "\n", "num_batch", "=", "0", "\n", "\n", "for", "semantic", "in", "self", ".", "semantic_list", ":", "\n", "\n", "\t\t\t", "for", "line", "in", "open", "(", "'./semantic_info/{}.txt'", ".", "format", "(", "semantic", ")", ",", "encoding", "=", "'utf-8'", ",", "errors", "=", "'ignore'", ")", ":", "\n", "\t\t\t\t", "ele", "=", "{", "}", "\n", "ele", "[", "'Words'", "]", "=", "[", "self", ".", "voc2id", "[", "wrd", ".", "lower", "(", ")", "]", "for", "wrd", "in", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "if", "wrd", ".", "lower", "(", ")", "in", "self", ".", "voc2id", "]", "\n", "random", ".", "shuffle", "(", "ele", "[", "'Words'", "]", ")", "\n", "\n", "if", "len", "(", "ele", "[", "'Words'", "]", ")", "<", "2", ":", "continue", "\n", "\n", "ele", "[", "'Edges'", "]", "=", "[", "[", "i", ",", "j", ",", "self", ".", "lbl2id", "[", "semantic", "]", "]", "for", "i", ",", "j", "in", "itertools", ".", "permutations", "(", "range", "(", "len", "(", "ele", "[", "'Words'", "]", ")", ")", ",", "2", ")", "]", "\n", "ele", "[", "'Cur_len'", "]", "=", "len", "(", "ele", "[", "'Words'", "]", ")", "\n", "ele", "[", "'Edges'", "]", "=", "[", "[", "e", "[", "0", "]", ",", "e", "[", "1", "]", ",", "e", "[", "2", "]", "]", "for", "e", "in", "ele", "[", "'Edges'", "]", "if", "ele", "[", "'Words'", "]", "[", "e", "[", "0", "]", "]", "!=", "0", "and", "ele", "[", "'Words'", "]", "[", "e", "[", "1", "]", "]", "!=", "0", "]", "\n", "batch", ".", "append", "(", "ele", ")", "\n", "\n", "if", "len", "(", "batch", ")", "==", "self", ".", "p", ".", "batch_size", ":", "\n", "\t\t\t\t\t", "if", "shuffle", ":", "random", ".", "shuffle", "(", "batch", ")", "\n", "self", ".", "batch_queue", ".", "put", "(", "batch", ")", "\n", "num_batch", "+=", "1", "\n", "batch", "=", "[", "]", "\n", "\n", "", "", "", "self", ".", "batch_queue", ".", "put", "(", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.getBatches": [[52, 75], ["Thread", "semgcn.SemGCN.read_thread.start", "random.shuffle", "semgcn.SemGCN.batch_queue.get"], "methods", ["None"], ["", "def", "getBatches", "(", "self", ",", "shuffle", "=", "True", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tReturns a generator of batches\n\n\t\tParameters\n\t\t----------\n\t\tshuffle:\tWhether to shuffle batches or not\n\n\t\tReturns\n\t\t-------\n\t\tBatch generator\n\t\t\"\"\"", "\n", "self", ".", "read_thread", "=", "Thread", "(", "target", "=", "self", ".", "make_batch", ")", "\n", "self", ".", "read_thread", ".", "daemon", "=", "True", "\n", "self", ".", "read_thread", ".", "start", "(", ")", "\n", "\n", "random", ".", "shuffle", "(", "self", ".", "semantic_list", ")", "\n", "\n", "while", "True", ":", "\n", "\t\t\t", "batch", "=", "self", ".", "batch_queue", ".", "get", "(", ")", "\n", "self", ".", "sent_num", "+=", "self", ".", "p", ".", "batch_size", "\n", "if", "batch", "==", "None", ":", "break", "\n", "else", ":", "yield", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.load_data": [[76, 119], ["semgcn.SemGCN.logger.info", "helper.read_mappings", "helper.read_mappings", "len", "np.sum", "queue.Queue", "int", "int", "int", "list", "len", "semgcn.SemGCN.voc2id.items", "semgcn.SemGCN.voc2id.items", "semgcn.SemGCN.id2freq.items", "semgcn.SemGCN.id2freq.values", "semgcn.SemGCN.id2freq.items", "np.sqrt", "range", "len"], "methods", ["home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.helper.read_mappings", "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.helper.read_mappings"], ["", "", "def", "load_data", "(", "self", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tLoads the data \n\n\t\tParameters\n\t\t----------\n\t\tvoc2id:\t\tMapping of word to its unique identifier\n\t\tid2voc:\t\tInverse of voc2id\n\t\tid2freq:\tMapping of word id to its frequency in the corpus\n\t\twrd_list:\tList of words for which embedding is required\n\t\tembed_dims:\tDimension of the embedding\n\t\tvoc_size:\tTotal number of words in vocabulary\n\t\twrd_list:\tList of words in the vocabulary\n\t\tde2id:\t\tMapping of edge labels of dependency parse to unique identifier\n\t\tnum_deLabel:\tNumber of edge types in dependency graph\n\t\trej_prob:\tWord rejection probability (frequent words are rejected with higher frequency)\n\n\t\tReturns\n\t\t-------\n\t\t\"\"\"", "\n", "self", ".", "logger", ".", "info", "(", "\"Loading data\"", ")", "\n", "\n", "self", ".", "voc2id", "=", "read_mappings", "(", "'./data/voc2id.txt'", ")", ";", "self", ".", "voc2id", "=", "{", "k", ":", "int", "(", "v", ")", "for", "k", ",", "v", "in", "self", ".", "voc2id", ".", "items", "(", ")", "}", "\n", "self", ".", "id2voc", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "voc2id", ".", "items", "(", ")", "}", "\n", "self", ".", "id2freq", "=", "read_mappings", "(", "'./data/id2freq.txt'", ")", ";", "self", ".", "id2freq", "=", "{", "int", "(", "k", ")", ":", "int", "(", "v", ")", "for", "k", ",", "v", "in", "self", ".", "id2freq", ".", "items", "(", ")", "}", "\n", "self", ".", "vocab_size", "=", "len", "(", "self", ".", "voc2id", ")", "\n", "\n", "corpus_size", "=", "np", ".", "sum", "(", "list", "(", "self", ".", "id2freq", ".", "values", "(", ")", ")", ")", "\n", "rel_freq", "=", "{", "_id", ":", "freq", "/", "corpus_size", "for", "_id", ",", "freq", "in", "self", ".", "id2freq", ".", "items", "(", ")", "}", "\n", "self", ".", "rej_prob", "=", "{", "_id", ":", "(", "1", "-", "self", ".", "p", ".", "subsample", "/", "rel_freq", "[", "_id", "]", ")", "-", "np", ".", "sqrt", "(", "self", ".", "p", ".", "subsample", "/", "rel_freq", "[", "_id", "]", ")", "for", "_id", "in", "self", ".", "id2freq", "}", "\n", "self", ".", "voc_freq_l", "=", "[", "self", ".", "id2freq", "[", "_id", "]", "for", "_id", "in", "range", "(", "len", "(", "self", ".", "voc2id", ")", ")", "]", "\n", "self", ".", "batch_queue", "=", "queue", ".", "Queue", "(", "500", ")", "\n", "\n", "self", ".", "semantic_list", "=", "[", "]", "\n", "if", "self", ".", "p", ".", "semantic", "!=", "'none'", ":", "\n", "\t\t\t", "if", "self", ".", "p", ".", "semantic", "==", "'all'", ":", "self", ".", "semantic_list", "=", "[", "'synonyms'", ",", "'antonyms'", ",", "'hyponyms'", ",", "'hypernyms'", "]", "\n", "else", ":", "self", ".", "semantic_list", "=", "[", "self", ".", "p", ".", "semantic", "]", "\n", "\n", "", "self", ".", "lbl2id", "=", "{", "}", "\n", "self", ".", "num_labels", "=", "0", "\n", "for", "sem", "in", "self", ".", "semantic_list", ":", "\n", "\t\t\t", "self", ".", "lbl2id", "[", "sem", "]", "=", "len", "(", "self", ".", "lbl2id", ")", "\n", "self", ".", "num_labels", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.add_placeholders": [[120, 140], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["None"], ["", "", "def", "add_placeholders", "(", "self", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tPlaceholders for the computational graph\n\n\t\tParameters\n\t\t----------\n\t\tsent_wrds:\tAll words in the batch\n\t\tsent_mask:\tMask for removing padding\n\t\tadj_mat:\tAdjacnecy matrix for each sentence in the batch\n\t\tnum_words:\tTotal number of words in each sentence\n\t\tseq_len:\tMaximum length of sentence in the entire batch\n\n\t\tReturns\n\t\t-------\n\t\t\"\"\"", "\n", "self", ".", "sent_wrds", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "self", ".", "p", ".", "batch_size", ",", "None", "]", ",", "name", "=", "'sent_wrds'", ")", "\n", "self", ".", "sent_mask", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "self", ".", "p", ".", "batch_size", ",", "None", "]", ",", "name", "=", "'sent_mask'", ")", "\n", "self", ".", "adj_mat", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ",", "shape", "=", "[", "self", ".", "num_labels", ",", "self", ".", "p", ".", "batch_size", ",", "None", ",", "None", "]", ",", "name", "=", "'adj_ind'", ")", "\n", "self", ".", "num_words", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "self", ".", "p", ".", "batch_size", "]", ",", "name", "=", "'num_words'", ")", "\n", "self", ".", "seq_len", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", ")", ",", "name", "=", "'seq_len'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.get_adj": [[141, 161], ["np.zeros", "enumerate", "enumerate"], "methods", ["None"], ["", "def", "get_adj", "(", "self", ",", "edgeList", ",", "max_labels", ",", "max_nodes", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tReturns the adjacency matrix required for applying GCN \n\n\t\tParameters\n\t\t----------\n\t\tedgeList:\tList of all edges\n\t\tmax_labels:\tMaximum number of edge labels in dependency parse\n\t\tmax_nodes:\tMaximum number of words in the batch\n\n\t\tReturns\n\t\t-------\n\t\tAdjacency matrix shape=[Number of dependency labels, Batch size, seq_len, seq_len]\n\t\t\"\"\"", "\n", "adj_mat", "=", "np", ".", "zeros", "(", "(", "max_labels", ",", "self", ".", "p", ".", "batch_size", ",", "max_nodes", ",", "max_nodes", ")", ",", "np", ".", "bool", ")", "\n", "for", "i", ",", "edges", "in", "enumerate", "(", "edgeList", ")", ":", "\n", "\t\t\t", "for", "j", ",", "(", "src", ",", "dest", ",", "lbl", ")", "in", "enumerate", "(", "edges", ")", ":", "\n", "\t\t\t\t", "adj_mat", "[", "lbl", ",", "i", ",", "src", ",", "dest", "]", "=", "1", "\n", "\n", "", "", "return", "adj_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.padData": [[162, 185], ["np.full", "np.zeros", "enumerate", "np.ones", "len", "len", "len"], "methods", ["None"], ["", "def", "padData", "(", "self", ",", "data", ",", "seq_len", ",", "cur_lens", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tPads a given batch\n\n\t\tParameters\n\t\t----------\n\t\tdata:\t\tList of tokenized sentences in a batch\n\t\tseq_len:\tMaximum length of sentence in the batch\n\t\tcur_len:\tTotal number of words in each sentence in a batch\n\n\t\tReturns\n\t\t-------\n\t\ttemp:\t\tPadded word sequence\n\t\tmask:\t\tMasking for padded words\n\t\t\"\"\"", "\n", "temp", "=", "np", ".", "full", "(", "(", "len", "(", "data", ")", ",", "seq_len", ")", ",", "self", ".", "vocab_size", ",", "np", ".", "int32", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "len", "(", "data", ")", ",", "seq_len", ")", ",", "np", ".", "float32", ")", "\n", "\n", "for", "i", ",", "ele", "in", "enumerate", "(", "data", ")", ":", "\n", "\t\t\t", "temp", "[", "i", ",", ":", "len", "(", "ele", ")", "]", "=", "ele", "[", ":", "seq_len", "]", "\n", "mask", "[", "i", ",", ":", "cur_lens", "[", "i", "]", "]", "=", "np", ".", "ones", "(", "cur_lens", "[", "i", "]", ",", "np", ".", "float32", ")", "\n", "\n", "", "return", "temp", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.pad_dynamic": [[186, 205], ["max", "semgcn.SemGCN.padData", "len"], "methods", ["home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.padData"], ["", "def", "pad_dynamic", "(", "self", ",", "Words", ",", "cur_lens", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tPads a given batch\n\n\t\tParameters\n\t\t----------\n\t\tWords:\t\tList of tokenized sentences in a batch\n\t\tcur_len:\tTotal number of words in each sentence in a batch\n\n\t\tReturns\n\t\t-------\n\t\tWord_pad:\tPadded word sequence\n\t\tWords_mask:\tMasking for padded words\n\t\tseq_len:\tMaximum length of sentence in the batch\n\t\t\"\"\"", "\n", "seq_len", "=", "max", "(", "[", "len", "(", "wrds", ")", "for", "wrds", "in", "Words", "]", ")", "\n", "Words_pad", ",", "Words_mask", "=", "self", ".", "padData", "(", "Words", ",", "seq_len", ",", "cur_lens", ")", "\n", "\n", "return", "Words_pad", ",", "Words_mask", ",", "seq_len", "\n", "\n"]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.create_feed_dict": [[206, 229], ["semgcn.SemGCN.pad_dynamic", "semgcn.SemGCN.get_adj", "np.float32", "len"], "methods", ["home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.pad_dynamic", "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.get_adj"], ["", "def", "create_feed_dict", "(", "self", ",", "batch", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tCreates the feed dictionary\n\n\t\tParameters\n\t\t----------\n\t\tbatch:\t\tBatch as returned by getBatch generator\n\n\t\tReturns\n\t\t-------\n\t\tfeed_dict:\tFeed dictionary\n\t\t\"\"\"", "\n", "Words", "=", "[", "ele", "[", "'Words'", "]", "for", "ele", "in", "batch", "]", "\n", "Edges", "=", "[", "ele", "[", "'Edges'", "]", "for", "ele", "in", "batch", "]", "\n", "Cur_len", "=", "[", "ele", "[", "'Cur_len'", "]", "for", "ele", "in", "batch", "]", "\n", "\n", "feed_dict", "=", "{", "}", "\n", "feed_dict", "[", "self", ".", "sent_wrds", "]", ",", "feed_dict", "[", "self", ".", "sent_mask", "]", ",", "seq_len", "=", "self", ".", "pad_dynamic", "(", "Words", ",", "Cur_len", ")", "\n", "feed_dict", "[", "self", ".", "adj_mat", "]", "=", "self", ".", "get_adj", "(", "Edges", ",", "self", ".", "num_labels", ",", "seq_len", ")", "\n", "feed_dict", "[", "self", ".", "seq_len", "]", "=", "seq_len", "\n", "feed_dict", "[", "self", ".", "num_words", "]", "=", "np", ".", "float32", "(", "[", "len", "(", "wrds", ")", "-", "1", "for", "wrds", "in", "Words", "]", ")", "\n", "\n", "return", "feed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.aggregate": [[230, 244], ["tensorflow.matmul", "tensorflow.cast"], "methods", ["None"], ["", "def", "aggregate", "(", "self", ",", "inp", ",", "adj_mat", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tGCN aggregation operation\n\n\t\tParameters\n\t\t----------\n\t\tinp:\t\tAction from neighborhood nodes\n\t\tadj_mat:\tAdjacency matrix\n\n\t\tReturns\n\t\t-------\n\t\tout:\t\tEmbedding obtained after aggregation operation\n\t\t\"\"\"", "\n", "return", "tf", ".", "matmul", "(", "tf", ".", "cast", "(", "adj_mat", ",", "tf", ".", "float32", ")", ",", "inp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.gcnLayer": [[246, 341], ["out.append", "range", "len", "tensorflow.name_scope", "range", "out.append", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.tensordot", "tensorflow.reshape", "tensorflow.nn.relu", "tensorflow.nn.dropout", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.name_scope", "tensorflow.transpose", "tensorflow.name_scope", "tensorflow.eye", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.tensordot", "tensorflow.expand_dims", "tensorflow.nn.dropout", "semgcn.SemGCN.aggregate", "tensorflow.tensordot", "tensorflow.expand_dims", "tensorflow.nn.dropout", "semgcn.SemGCN.aggregate", "tensorflow.eye", "tensorflow.eye", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.tensordot", "tensorflow.expand_dims", "tensorflow.sigmoid", "tensorflow.tensordot", "tensorflow.expand_dims", "tensorflow.sigmoid", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.constant_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.constant_initializer"], "methods", ["home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.aggregate", "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.aggregate"], ["", "def", "gcnLayer", "(", "self", ",", "gcn_in", ",", "in_dim", ",", "gcn_dim", ",", "batch_size", ",", "max_nodes", ",", "max_labels", ",", "adj_mat", ",", "w_gating", "=", "True", ",", "num_layers", "=", "1", ",", "name", "=", "\"GCN\"", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tGCN Layer Implementation\n\n\t\tParameters\n\t\t----------\n\t\tgcn_in:\t\tInput to GCN Layer\n\t\tin_dim:\t\tDimension of input to GCN Layer \n\t\tgcn_dim:\tHidden state dimension of GCN\n\t\tbatch_size:\tBatch size\n\t\tmax_nodes:\tMaximum number of nodes in graph\n\t\tmax_labels:\tMaximum number of edge labels\n\t\tadj_ind:\tAdjacency matrix indices\n\t\tadj_data:\tAdjacency matrix data (all 1's)\n\t\tw_gating:\tWhether to include gating in GCN\n\t\tnum_layers:\tNumber of GCN Layers\n\t\tname \t\tName of the layer (used for creating variables, keep it different for different layers)\n\n\t\tReturns\n\t\t-------\n\t\tout\t\tList of output of different GCN layers with first element as input itself, i.e., [gcn_in, gcn_layer1_out, gcn_layer2_out ...]\n\t\t\"\"\"", "\n", "out", "=", "[", "]", "\n", "out", ".", "append", "(", "gcn_in", ")", "\n", "\n", "for", "layer", "in", "range", "(", "num_layers", ")", ":", "\n", "\t\t\t", "gcn_in", "=", "out", "[", "-", "1", "]", "\n", "if", "len", "(", "out", ")", ">", "1", ":", "in_dim", "=", "gcn_dim", "# After first iteration the in_dim = gcn_dim", "\n", "\n", "with", "tf", ".", "name_scope", "(", "'%s-%d'", "%", "(", "name", ",", "layer", ")", ")", ":", "\n", "\n", "\t\t\t\t", "with", "tf", ".", "variable_scope", "(", "'Loop-name-%s_layer-%d'", "%", "(", "name", ",", "layer", ")", ")", "as", "scope", ":", "\n", "\t\t\t\t\t", "w_loop", "=", "tf", ".", "get_variable", "(", "'w_loop'", ",", "initializer", "=", "tf", ".", "eye", "(", "in_dim", ")", ",", "trainable", "=", "False", ",", "regularizer", "=", "self", ".", "regularizer", ")", "\n", "inp_loop", "=", "tf", ".", "tensordot", "(", "gcn_in", ",", "w_loop", ",", "axes", "=", "[", "2", ",", "0", "]", ")", "\n", "if", "self", ".", "p", ".", "dropout", "!=", "1.0", ":", "inp_loop", "=", "tf", ".", "nn", ".", "dropout", "(", "inp_loop", ",", "keep_prob", "=", "self", ".", "p", ".", "dropout", ")", "\n", "loop_act", "=", "inp_loop", "\n", "\n", "", "act_sum", "=", "loop_act", "\n", "\n", "\n", "for", "lbl", "in", "range", "(", "max_labels", ")", ":", "\n", "\n", "\t\t\t\t\t", "with", "tf", ".", "variable_scope", "(", "'label-%d_name-%s_layer-%d'", "%", "(", "lbl", ",", "name", ",", "layer", ")", ")", "as", "scope", ":", "\n", "\t\t\t\t\t\t", "w_in", "=", "tf", ".", "get_variable", "(", "'w_in'", ",", "initializer", "=", "tf", ".", "eye", "(", "in_dim", ")", ",", "trainable", "=", "True", ",", "regularizer", "=", "self", ".", "regularizer", ")", "\n", "w_out", "=", "tf", ".", "get_variable", "(", "'w_out'", ",", "initializer", "=", "tf", ".", "eye", "(", "in_dim", ")", ",", "trainable", "=", "True", ",", "regularizer", "=", "self", ".", "regularizer", ")", "\n", "b_in", "=", "tf", ".", "get_variable", "(", "'b_in'", ",", "[", "1", ",", "gcn_dim", "]", ",", "trainable", "=", "True", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "regularizer", "=", "self", ".", "regularizer", ")", "\n", "b_out", "=", "tf", ".", "get_variable", "(", "'b_out'", ",", "[", "1", ",", "gcn_dim", "]", ",", "trainable", "=", "True", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "regularizer", "=", "self", ".", "regularizer", ")", "\n", "\n", "if", "w_gating", ":", "\n", "\t\t\t\t\t\t\t", "w_gin", "=", "tf", ".", "get_variable", "(", "'w_gin'", ",", "[", "in_dim", ",", "1", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ",", "regularizer", "=", "self", ".", "regularizer", ")", "\n", "b_gin", "=", "tf", ".", "get_variable", "(", "'b_gin'", ",", "[", "1", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "regularizer", "=", "self", ".", "regularizer", ")", "\n", "w_gout", "=", "tf", ".", "get_variable", "(", "'w_gout'", ",", "[", "in_dim", ",", "1", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ",", "regularizer", "=", "self", ".", "regularizer", ")", "\n", "b_gout", "=", "tf", ".", "get_variable", "(", "'b_gout'", ",", "[", "1", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "regularizer", "=", "self", ".", "regularizer", ")", "\n", "\n", "\n", "\n", "", "", "with", "tf", ".", "name_scope", "(", "'in_arcs-%s_name-%s_layer-%d'", "%", "(", "lbl", ",", "name", ",", "layer", ")", ")", ":", "\n", "\n", "\t\t\t\t\t\t", "inp_in", "=", "tf", ".", "tensordot", "(", "gcn_in", ",", "w_in", ",", "axes", "=", "[", "2", ",", "0", "]", ")", "+", "tf", ".", "expand_dims", "(", "b_in", ",", "axis", "=", "0", ")", "\n", "adj_matrix", "=", "tf", ".", "transpose", "(", "adj_mat", "[", "lbl", "]", ",", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "\n", "if", "self", ".", "p", ".", "dropout", "!=", "1.0", ":", "\n", "\t\t\t\t\t\t\t", "inp_in", "=", "tf", ".", "nn", ".", "dropout", "(", "inp_in", ",", "keep_prob", "=", "self", ".", "p", ".", "dropout", ")", "\n", "\n", "", "if", "w_gating", ":", "\n", "\t\t\t\t\t\t\t", "inp_gin", "=", "tf", ".", "tensordot", "(", "gcn_in", ",", "w_gin", ",", "axes", "=", "[", "2", ",", "0", "]", ")", "+", "tf", ".", "expand_dims", "(", "b_gin", ",", "axis", "=", "0", ")", "\n", "inp_in", "=", "inp_in", "*", "tf", ".", "sigmoid", "(", "inp_gin", ")", "\n", "in_act", "=", "self", ".", "aggregate", "(", "inp_in", ",", "adj_matrix", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t\t", "in_act", "=", "in_t", "\n", "\n", "\n", "", "", "act_sum", "+=", "in_act", "\n", "\n", "with", "tf", ".", "name_scope", "(", "'out_arcs-%s_name-%s_layer-%d'", "%", "(", "lbl", ",", "name", ",", "layer", ")", ")", ":", "\n", "\t\t\t\t\t\t", "inp_out", "=", "tf", ".", "tensordot", "(", "gcn_in", ",", "w_out", ",", "axes", "=", "[", "2", ",", "0", "]", ")", "+", "tf", ".", "expand_dims", "(", "b_out", ",", "axis", "=", "0", ")", "\n", "adj_matrix", "=", "adj_mat", "[", "lbl", "]", "\n", "\n", "if", "self", ".", "p", ".", "dropout", "!=", "1.0", ":", "\n", "\t\t\t\t\t\t\t", "inp_out", "=", "tf", ".", "nn", ".", "dropout", "(", "inp_out", ",", "keep_prob", "=", "self", ".", "p", ".", "dropout", ")", "\n", "\n", "", "if", "w_gating", ":", "\n", "\t\t\t\t\t\t\t", "inp_gout", "=", "tf", ".", "tensordot", "(", "gcn_in", ",", "w_gout", ",", "axes", "=", "[", "2", ",", "0", "]", ")", "+", "tf", ".", "expand_dims", "(", "b_gout", ",", "axis", "=", "0", ")", "\n", "inp_out", "=", "inp_out", "*", "tf", ".", "sigmoid", "(", "inp_gout", ")", "\n", "out_act", "=", "self", ".", "aggregate", "(", "inp_gout", ",", "adj_matrix", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t\t", "out_act", "=", "out_t", "\n", "\n", "", "act_sum", "+=", "out_act", "\n", "\n", "", "", "act_sum", "=", "act_sum", "/", "tf", ".", "reshape", "(", "3", "*", "self", ".", "num_words", ",", "[", "self", ".", "p", ".", "batch_size", ",", "1", ",", "1", "]", ")", "\n", "\n", "gcn_out", "=", "tf", ".", "nn", ".", "relu", "(", "act_sum", ")", "if", "layer", "!=", "num_layers", "-", "1", "else", "act_sum", "\n", "out", ".", "append", "(", "gcn_out", ")", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.add_model": [[342, 369], ["tensorflow.nn.embedding_lookup", "semgcn.SemGCN.gcnLayer", "tensorflow.variable_scope", "helper.getEmbeddings", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.concat", "tensorflow.zeros", "range", "len"], "methods", ["home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.gcnLayer", "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.helper.getEmbeddings"], ["", "def", "add_model", "(", "self", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tCreates the Computational Graph\n\n\t\tParameters\n\t\t----------\n\n\t\tReturns\n\t\t-------\n\t\tnn_out:\t\tLogits for each bag in the batch\n\t\t\"\"\"", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'Embed_mat'", ")", ":", "\n", "\t\t\t", "embed_init", "=", "getEmbeddings", "(", "self", ".", "p", ".", "embed_loc", ",", "[", "self", ".", "id2voc", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "self", ".", "voc2id", ")", ")", "]", ",", "self", ".", "p", ".", "embed_dim", ")", "\n", "_wrd_embed", "=", "tf", ".", "get_variable", "(", "'embed_matrix'", ",", "initializer", "=", "embed_init", ",", "trainable", "=", "True", ",", "regularizer", "=", "self", ".", "regularizer", ")", "\n", "wrd_pad", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "[", "1", ",", "self", ".", "p", ".", "embed_dim", "]", ")", ",", "trainable", "=", "False", ")", "\n", "self", ".", "embed_matrix", "=", "tf", ".", "concat", "(", "[", "_wrd_embed", ",", "wrd_pad", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "context_matrix", "=", "self", ".", "embed_matrix", "\n", "\n", "", "embed", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embed_matrix", ",", "self", ".", "sent_wrds", ")", "\n", "\n", "gcn_out", "=", "self", ".", "gcnLayer", "(", "gcn_in", "=", "embed", ",", "in_dim", "=", "self", ".", "p", ".", "embed_dim", ",", "gcn_dim", "=", "self", ".", "p", ".", "embed_dim", ",", "\n", "batch_size", "=", "self", ".", "p", ".", "batch_size", ",", "max_nodes", "=", "self", ".", "seq_len", ",", "max_labels", "=", "self", ".", "num_labels", ",", "\n", "adj_mat", "=", "self", ".", "adj_mat", ",", "w_gating", "=", "self", ".", "p", ".", "wGate", ",", "num_layers", "=", "self", ".", "p", ".", "gcn_layer", ",", "name", "=", "\"GCN\"", ")", "\n", "\n", "nn_out", "=", "gcn_out", "[", "-", "1", "]", "\n", "return", "nn_out", "\n", "\n"]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.add_loss_op": [[370, 423], ["tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.fixed_unigram_candidate_sampler", "tensorflow.cast", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.concat", "tensorflow.nn.embedding_lookup", "tensorflow.concat", "tensorflow.reduce_sum", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.tile", "tensorflow.reshape", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.contrib.layers.apply_regularization", "tensorflow.cast", "tensorflow.expand_dims", "tensorflow.ones", "tensorflow.zeros", "tensorflow.expand_dims", "tensorflow.get_collection"], "methods", ["None"], ["", "def", "add_loss_op", "(", "self", ",", "nn_out", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tComputes the loss for learning embeddings\n\n\t\tParameters\n\t\t----------\n\t\tnn_out:\t\tLogits for each bag in the batch\n\n\t\tReturns\n\t\t-------\n\t\tloss:\t\tComputes loss\n\t\t\"\"\"", "\n", "\n", "target_words", "=", "tf", ".", "reshape", "(", "self", ".", "sent_wrds", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "nn_out_flat", "=", "tf", ".", "reshape", "(", "nn_out", ",", "[", "-", "1", ",", "self", ".", "p", ".", "embed_dim", "]", ")", "\n", "\n", "neg_ids", ",", "_", ",", "_", "=", "tf", ".", "nn", ".", "fixed_unigram_candidate_sampler", "(", "\n", "true_classes", "=", "tf", ".", "cast", "(", "target_words", ",", "tf", ".", "int64", ")", ",", "\n", "num_true", "=", "1", ",", "\n", "num_sampled", "=", "self", ".", "p", ".", "neg_samples", "*", "self", ".", "p", ".", "batch_size", ",", "\n", "unique", "=", "True", ",", "\n", "distortion", "=", "0.75", ",", "\n", "range_max", "=", "self", ".", "vocab_size", ",", "\n", "unigrams", "=", "self", ".", "voc_freq_l", "\n", ")", "\n", "neg_ids", "=", "tf", ".", "cast", "(", "neg_ids", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "\n", "neg_ids", "=", "tf", ".", "reshape", "(", "neg_ids", ",", "[", "self", ".", "p", ".", "batch_size", ",", "self", ".", "p", ".", "neg_samples", "]", ")", "\n", "neg_ids", "=", "tf", ".", "reshape", "(", "tf", ".", "tile", "(", "neg_ids", ",", "[", "1", ",", "self", ".", "seq_len", "]", ")", ",", "[", "self", ".", "p", ".", "batch_size", ",", "self", ".", "seq_len", ",", "self", ".", "p", ".", "neg_samples", "]", ")", "\n", "\n", "target_ind", "=", "tf", ".", "concat", "(", "[", "\n", "tf", ".", "expand_dims", "(", "self", ".", "sent_wrds", ",", "axis", "=", "2", ")", ",", "\n", "neg_ids", "\n", "]", ",", "axis", "=", "2", ")", "\n", "\n", "target_embed", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "context_matrix", ",", "target_ind", ")", "\n", "target_labels", "=", "tf", ".", "concat", "(", "[", "\n", "tf", ".", "ones", "(", "[", "self", ".", "p", ".", "batch_size", ",", "self", ".", "seq_len", ",", "1", "]", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "tf", ".", "zeros", "(", "[", "self", ".", "p", ".", "batch_size", ",", "self", ".", "seq_len", ",", "self", ".", "p", ".", "neg_samples", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "]", ",", "\n", "axis", "=", "2", ")", "\n", "\n", "pred", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "expand_dims", "(", "nn_out", ",", "axis", "=", "2", ")", "*", "target_embed", ",", "axis", "=", "3", ")", "\n", "target_labels", "=", "tf", ".", "reshape", "(", "target_labels", ",", "[", "self", ".", "p", ".", "batch_size", "*", "self", ".", "seq_len", ",", "-", "1", "]", ")", "\n", "pred", "=", "tf", ".", "reshape", "(", "pred", ",", "[", "self", ".", "p", ".", "batch_size", "*", "self", ".", "seq_len", ",", "-", "1", "]", ")", "\n", "total_loss", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "labels", "=", "target_labels", ",", "logits", "=", "pred", ")", "\n", "\n", "masked_loss", "=", "total_loss", "*", "tf", ".", "reshape", "(", "self", ".", "sent_mask", ",", "[", "-", "1", "]", ")", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "masked_loss", ")", "/", "tf", ".", "reduce_sum", "(", "self", ".", "sent_mask", ")", "\n", "\n", "if", "self", ".", "regularizer", "!=", "None", ":", "\n", "\t\t\t", "loss", "+=", "tf", ".", "contrib", ".", "layers", ".", "apply_regularization", "(", "self", ".", "regularizer", ",", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "REGULARIZATION_LOSSES", ")", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.add_optimizer": [[424, 442], ["tensorflow.name_scope", "tensorflow.train.GradientDescentOptimizer.minimize", "tensorflow.train.AdamOptimizer", "tensorflow.train.GradientDescentOptimizer"], "methods", ["None"], ["", "def", "add_optimizer", "(", "self", ",", "loss", ",", "isAdam", "=", "True", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tAdd optimizer for training variables\n\n\t\tParameters\n\t\t----------\n\t\tloss:\t\tComputed loss\n\n\t\tReturns\n\t\t-------\n\t\ttrain_op:\tTraining optimizer\n\t\t\"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "'Optimizer'", ")", ":", "\n", "\t\t\t", "if", "isAdam", ":", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "p", ".", "lr", ")", "\n", "else", ":", "optimizer", "=", "tf", ".", "train", ".", "GradientDescentOptimizer", "(", "self", ".", "p", ".", "lr", ")", "\n", "train_op", "=", "optimizer", ".", "minimize", "(", "loss", ")", "\n", "\n", "", "return", "train_op", "\n", "\n"]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.__init__": [[443, 478], ["helper.get_logger", "semgcn.SemGCN.logger.info", "pprint", "semgcn.SemGCN.load_data", "semgcn.SemGCN.add_placeholders", "semgcn.SemGCN.add_model", "semgcn.SemGCN.add_loss_op", "tensorflow.summary.merge_all", "os.path.isdir", "os.system", "os.path.isdir", "os.system", "vars", "vars", "tensorflow.contrib.layers.l2_regularizer", "semgcn.SemGCN.add_optimizer", "semgcn.SemGCN.add_optimizer"], "methods", ["home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.helper.get_logger", "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.load_data", "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.add_placeholders", "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.add_model", "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.add_loss_op", "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.add_optimizer", "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.add_optimizer"], ["", "def", "__init__", "(", "self", ",", "params", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tConstructor for the main function. Loads data and creates computation graph. \n\n\t\tParameters\n\t\t----------\n\t\tparams:\t\tHyperparameters of the model\n\n\t\tReturns\n\t\t-------\n\t\t\"\"\"", "\n", "self", ".", "p", "=", "params", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "p", ".", "log_dir", ")", ":", "os", ".", "system", "(", "'mkdir {}'", ".", "format", "(", "self", ".", "p", ".", "log_dir", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "p", ".", "emb_dir", ")", ":", "os", ".", "system", "(", "'mkdir {}'", ".", "format", "(", "self", ".", "p", ".", "emb_dir", ")", ")", "\n", "\n", "self", ".", "logger", "=", "get_logger", "(", "self", ".", "p", ".", "name", ",", "self", ".", "p", ".", "log_dir", ",", "self", ".", "p", ".", "config_dir", ")", "\n", "\n", "self", ".", "logger", ".", "info", "(", "vars", "(", "self", ".", "p", ")", ")", ";", "pprint", "(", "vars", "(", "self", ".", "p", ")", ")", "\n", "self", ".", "p", ".", "batch_size", "=", "self", ".", "p", ".", "batch_size", "\n", "\n", "if", "self", ".", "p", ".", "l2", "==", "0.0", ":", "self", ".", "regularizer", "=", "None", "\n", "else", ":", "self", ".", "regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "scale", "=", "self", ".", "p", ".", "l2", ")", "\n", "\n", "self", ".", "load_data", "(", ")", "\n", "self", ".", "add_placeholders", "(", ")", "\n", "\n", "nn_out", "=", "self", ".", "add_model", "(", ")", "\n", "self", ".", "loss", "=", "self", ".", "add_loss_op", "(", "nn_out", ")", "\n", "\n", "if", "self", ".", "p", ".", "opt", "==", "'adam'", ":", "self", ".", "train_op", "=", "self", ".", "add_optimizer", "(", "self", ".", "loss", ")", "\n", "else", ":", "self", ".", "train_op", "=", "self", ".", "add_optimizer", "(", "self", ".", "loss", ",", "isAdam", "=", "False", ")", "\n", "\n", "self", ".", "merged_summ", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "self", ".", "summ_writer", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.checkpoint": [[479, 509], ["sess.run", "web.embedding.Embedding.from_dict", "web.evaluate.evaluate_on_all", "np.mean", "semgcn.SemGCN.logger.info", "round", "list", "semgcn.SemGCN.voc2id.items", "web.evaluate.evaluate_on_all.items", "web.evaluate.evaluate_on_all.values", "semgcn.SemGCN.logger.info", "open", "semgcn.SemGCN.id2voc.items", "open.write", "str", "round", "embed_matrix[].tolist"], "methods", ["None"], ["", "def", "checkpoint", "(", "self", ",", "loss", ",", "epoch", ",", "sess", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tComputes intrinsic scores for embeddings and dumps the embeddings embeddings\n\n\t\tParameters\n\t\t----------\n\t\tepoch:\t\tCurrent epoch number\n\t\tsess:\t\tTensorflow session object\n\n\t\tReturns\n\t\t-------\n\t\t\"\"\"", "\n", "embed_matrix", ",", "context_matrix", "=", "sess", ".", "run", "(", "[", "self", ".", "embed_matrix", ",", "self", ".", "context_matrix", "]", ")", "\n", "voc2vec", "=", "{", "wrd", ":", "embed_matrix", "[", "wid", "]", "for", "wrd", ",", "wid", "in", "self", ".", "voc2id", ".", "items", "(", ")", "}", "\n", "embedding", "=", "Embedding", ".", "from_dict", "(", "voc2vec", ")", "\n", "results", "=", "evaluate_on_all", "(", "embedding", ")", "\n", "results", "=", "{", "key", ":", "round", "(", "val", "[", "0", "]", ",", "4", ")", "for", "key", ",", "val", "in", "results", ".", "items", "(", ")", "}", "\n", "\n", "curr_int", "=", "np", ".", "mean", "(", "list", "(", "results", ".", "values", "(", ")", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Current Score: {}'", ".", "format", "(", "curr_int", ")", ")", "\n", "\n", "if", "curr_int", ">", "self", ".", "best_int_avg", ":", "\n", "\t\t\t", "if", "self", ".", "p", ".", "dump", ":", "\n", "\t\t\t\t", "self", ".", "logger", ".", "info", "(", "\"Saving embedding matrix\"", ")", "\n", "f", "=", "open", "(", "'embeddings/{}'", ".", "format", "(", "self", ".", "p", ".", "name", ")", ",", "'w'", ")", "\n", "for", "id", ",", "wrd", "in", "self", ".", "id2voc", ".", "items", "(", ")", ":", "\n", "\t\t\t\t\t", "f", ".", "write", "(", "'{} {}\\n'", ".", "format", "(", "wrd", ",", "' '", ".", "join", "(", "[", "str", "(", "round", "(", "v", ",", "6", ")", ")", "for", "v", "in", "embed_matrix", "[", "id", "]", ".", "tolist", "(", ")", "]", ")", ")", ")", "\n", "\n", "", "", "self", ".", "best_int_avg", "=", "curr_int", "\n", "\n"]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.run_epoch": [[510, 542], ["time.time", "enumerate", "np.mean", "semgcn.SemGCN.getBatches", "semgcn.SemGCN.create_feed_dict", "sess.run", "losses.append", "semgcn.SemGCN.logger.info", "time.time", "semgcn.SemGCN.logger.info", "semgcn.SemGCN.checkpoint", "time.time", "round", "np.mean", "np.mean"], "methods", ["home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.getBatches", "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.create_feed_dict", "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.checkpoint"], ["", "", "def", "run_epoch", "(", "self", ",", "sess", ",", "epoch", ",", "shuffle", "=", "True", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tRuns one epoch of training\n\n\t\tParameters\n\t\t----------\n\t\tsess:\t\tTensorflow session object\n\t\tepoch:\t\tEpoch number\n\t\tshuffle:\tShuffle data while before creates batches\n\n\t\tReturns\n\t\t-------\n\t\tloss:\t\tLoss over the corpus\n\t\t\"\"\"", "\n", "losses", "=", "[", "]", "\n", "\n", "st", "=", "time", ".", "time", "(", ")", "\n", "for", "step", ",", "batch", "in", "enumerate", "(", "self", ".", "getBatches", "(", "shuffle", ")", ")", ":", "\n", "\n", "\t\t\t", "feed", "=", "self", ".", "create_feed_dict", "(", "batch", ")", "\n", "loss", ",", "_", "=", "sess", ".", "run", "(", "[", "self", ".", "loss", ",", "self", ".", "train_op", "]", ",", "feed_dict", "=", "feed", ")", "\n", "losses", ".", "append", "(", "loss", ")", "\n", "\n", "if", "(", "step", "+", "1", ")", "%", "10", "==", "0", ":", "\n", "\t\t\t\t", "self", ".", "logger", ".", "info", "(", "'E:{} (Sents: {}/{} [{}]): Train Loss \\t{:.5}\\t{}\\t{:.5}'", ".", "format", "(", "epoch", ",", "self", ".", "sent_num", ",", "self", ".", "p", ".", "total_sents", ",", "round", "(", "self", ".", "sent_num", "/", "self", ".", "p", ".", "total_sents", "*", "100", ",", "1", ")", ",", "np", ".", "mean", "(", "losses", ")", ",", "self", ".", "p", ".", "name", ",", "self", ".", "best_int_avg", ")", ")", "\n", "en", "=", "time", ".", "time", "(", ")", "\n", "if", "(", "en", "-", "st", ")", ">=", "3600", ":", "\n", "\t\t\t\t\t", "self", ".", "logger", ".", "info", "(", "\"One more hour is over\"", ")", "\n", "self", ".", "checkpoint", "(", "np", ".", "mean", "(", "losses", ")", ",", "epoch", ",", "sess", ")", "\n", "st", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "", "", "return", "np", ".", "mean", "(", "losses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.fit": [[543, 570], ["tensorflow.train.Saver", "os.path.join", "range", "os.path.exists", "os.makedirs", "semgcn.SemGCN.saver.restore", "semgcn.SemGCN.logger.info", "semgcn.SemGCN.run_epoch", "semgcn.SemGCN.checkpoint", "semgcn.SemGCN.logger.info"], "methods", ["home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.run_epoch", "home.repos.pwc.inspect_result.malllabiisc_WordGCN.None.semgcn.SemGCN.checkpoint"], ["", "def", "fit", "(", "self", ",", "sess", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tTrains the model and finally evaluates on test\n\n\t\tParameters\n\t\t----------\n\t\tsess:\t\tTensorflow session object\n\n\t\tReturns\n\t\t-------\n\t\t\"\"\"", "\n", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "save_dir", "=", "'checkpoints/'", "+", "self", ".", "p", ".", "name", "+", "'/'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "self", ".", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'best_int_avg'", ")", "\n", "\n", "if", "self", ".", "p", ".", "restore", ":", "\n", "\t\t\t", "self", ".", "saver", ".", "restore", "(", "sess", ",", "self", ".", "save_path", ")", "\n", "\n", "", "self", ".", "best_int_avg", "=", "0.0", "\n", "\n", "for", "epoch", "in", "range", "(", "self", ".", "p", ".", "max_epochs", ")", ":", "\n", "\t\t\t", "self", ".", "logger", ".", "info", "(", "'Epoch: {}'", ".", "format", "(", "epoch", ")", ")", "\n", "train_loss", "=", "self", ".", "run_epoch", "(", "sess", ",", "epoch", ")", "\n", "\n", "self", ".", "checkpoint", "(", "train_loss", ",", "epoch", ",", "sess", ")", "\n", "self", ".", "logger", ".", "info", "(", "'[Epoch {}]: Training Loss: {:.5}, Best Loss: {:.5}\\n'", ".", "format", "(", "epoch", ",", "train_loss", ",", "self", ".", "best_int_avg", ")", ")", "\n", "\n"]]}