{"home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.models.LowRankGNNBlock.__init__": [[24, 66], ["super().__init__", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "models.LowRankGNNBlock.register_buffer", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "convs.Transformer", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "vq.VectorQuantizerEMA", "ValueError", "convs.OurGCNConv", "convs.OurGATConv"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.dataloader.OurDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "hidden_channels", ",", "num_M", ",", "num_D", ",", "num_N", ",", "num_branch", ",", "cluster", ",", "kmeans_iter", ",", "\n", "EMA_flag", ",", "kmeans_init", ",", "use_gcn", ",", "commitment_cost", ",", "grad_normalize_scale", ",", "hook_flag", ",", "warm_up_flag", ",", "\n", "momentum", ",", "conv_type", ",", "transformer_flag", ")", ":", "\n", "        ", "super", "(", "LowRankGNNBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_M", ",", "self", ".", "num_D", ",", "self", ".", "num_N", ",", "self", ".", "EMA_flag", "=", "num_M", ",", "num_D", ",", "num_N", ",", "EMA_flag", "\n", "self", ".", "commitment_cost", "=", "commitment_cost", "\n", "self", ".", "hook_flag", "=", "hook_flag", "\n", "self", ".", "grad_normalize_scale", "=", "grad_normalize_scale", "\n", "self", ".", "conv_type", "=", "conv_type", "\n", "self", ".", "transformer_flag", "=", "transformer_flag", "\n", "\n", "# C init", "\n", "# c1 = -torch.ones(num_N, dtype=torch.long)", "\n", "# c = torch.randint(0, self.num_M, (self.num_N,), dtype=torch.long)", "\n", "c", "=", "torch", ".", "randint", "(", "0", ",", "self", ".", "num_M", ",", "(", "self", ".", "num_N", ",", ")", ",", "dtype", "=", "torch", ".", "short", ")", "\n", "self", ".", "register_buffer", "(", "'c_indices'", ",", "c", ")", "\n", "\n", "if", "self", ".", "transformer_flag", ":", "\n", "            ", "self", ".", "conv", "=", "Transformer", "(", "self", ".", "num_D", "+", "1", ")", "\n", "self", ".", "transformer_k", "=", "torch", ".", "nn", ".", "Linear", "(", "num_D", ",", "num_D", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "conv_type", "!=", "'GAT'", ":", "\n", "                ", "self", ".", "conv", "=", "OurGCNConv", "(", "in_channels", ",", "in_channels", ",", "normalize", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "conv", "=", "OurGATConv", "(", "in_channels", "+", "1", ",", "in_channels", "+", "1", ",", "bias", "=", "False", ",", "add_self_loops", "=", "False", ")", "\n", "\n", "", "", "if", "EMA_flag", ":", "\n", "# self.emb = NearestEmbedEMA(self.num_M, self.num_D)", "\n", "            ", "add_flag", "=", "True", "if", "self", ".", "transformer_flag", "or", "self", ".", "conv_type", "==", "'GAT'", "else", "False", "\n", "self", ".", "vq", "=", "VectorQuantizerEMA", "(", "self", ".", "num_M", ",", "self", ".", "num_D", ",", "commitment_cost", "=", "self", ".", "commitment_cost", ",", "\n", "grad_normalize_scale", "=", "grad_normalize_scale", ",", "warm_up_flag", "=", "warm_up_flag", ",", "\n", "momentum", "=", "momentum", ",", "add_flag", "=", "add_flag", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Not EMA vq not studied'", ")", "\n", "# self.vq = VectorQuantizer(self.num_M, self.num_D, commitment_cost=self.commitment_cost)", "\n", "\n", "", "self", ".", "kmeans_init", "=", "kmeans_init", "\n", "self", ".", "grad_kmeans_init", "=", "kmeans_init", "\n", "self", ".", "inited", "=", "False", "\n", "\n", "self", ".", "ln", "=", "torch", ".", "nn", ".", "LayerNorm", "(", "in_channels", ",", "elementwise_affine", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.models.LowRankGNNBlock.reset_parameters": [[68, 70], ["models.LowRankGNNBlock.conv.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_link.LinkPredictor.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.models.LowRankGNNBlock.hook": [[71, 126], ["sklearn.cluster.MiniBatchKMeans().fit", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "models.LowRankGNNBlock.vq.kmeans_init", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "models.LowRankGNNBlock.vq.update", "encoding_indices.squeeze().to", "range", "encoding_indices.squeeze().to", "torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean().item", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.LowRankGNNBlock.vq.update", "sklearn.cluster.MiniBatchKMeans", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "encoding_indices.squeeze", "encoding_indices.squeeze", "models.LowRankGNNBlock.vq.get_grad", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "models.LowRankGNNBlock.vq.get_codebook", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "encoding_indices.squeeze", "encoding_indices.squeeze", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizerEMA.kmeans_init", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizerEMA.update", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizerEMA.update", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizerEMA.get_grad", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizerEMA.get_codebook"], ["", "def", "hook", "(", "self", ",", "grad", ")", ":", "\n", "# grad_use = grad[:, :self.num_D]", "\n", "        ", "grad_use", "=", "grad", "\n", "\n", "if", "self", ".", "grad_kmeans_init", ":", "\n", "            ", "X_B_cpu", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "self", ".", "X_B", ".", "shape", "[", "1", "]", ",", "affine", "=", "False", ",", "track_running_stats", "=", "False", ")", "(", "self", ".", "X_B", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "grad_cpu", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "grad_use", ".", "shape", "[", "1", "]", ",", "affine", "=", "False", ",", "track_running_stats", "=", "False", ",", "eps", "=", "1e-24", ")", "(", "grad_use", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "# reassignment_ratio=0.01", "\n", "k_obj", "=", "MiniBatchKMeans", "(", "n_clusters", "=", "self", ".", "num_M", ",", "init", "=", "'k-means++'", ",", "batch_size", "=", "400", ",", "n_init", "=", "10", ",", "\n", "init_size", "=", "4000", ",", "reassignment_ratio", "=", "0.3", ")", ".", "fit", "(", "\n", "torch", ".", "cat", "(", "[", "X_B_cpu", ",", "grad_cpu", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "k_centroids", "=", "torch", ".", "tensor", "(", "k_obj", ".", "cluster_centers_", ",", "dtype", "=", "torch", ".", "float", ")", ".", "to", "(", "self", ".", "X_B", ".", "device", ")", "\n", "k_counts", "=", "torch", ".", "tensor", "(", "k_obj", ".", "counts_", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "self", ".", "X_B", ".", "device", ")", "\n", "\n", "self", ".", "vq", ".", "kmeans_init", "(", "k_centroids", ",", "k_counts", ")", "\n", "self", ".", "c_indices", "=", "-", "1", "\n", "self", ".", "c_indices", "[", "self", ".", "batch_indices", "]", "=", "torch", ".", "tensor", "(", "k_obj", ".", "labels_", ",", "dtype", "=", "torch", ".", "short", ")", ".", "to", "(", "self", ".", "X_B", ".", "device", ")", "\n", "self", ".", "grad_kmeans_init", "=", "False", "\n", "\n", "# to reset X_output", "\n", "encoding_indices", ",", "encodings", "=", "self", ".", "vq", ".", "update", "(", "self", ".", "X_B", ",", "grad_use", ")", "\n", "self", ".", "c_indices", "[", "self", ".", "batch_indices", "]", "=", "encoding_indices", ".", "squeeze", "(", ")", ".", "to", "(", "torch", ".", "short", ")", "\n", "\n", "", "else", ":", "\n", "# grad_before = self.vq.get_grad()[self.c_indices[self.batch_indices].to(torch.long)]", "\n", "# grad_diff_before = grad_before - grad", "\n", "# self.grad_error_before = torch.norm(grad_diff_before, dim=1).mean().item()", "\n", "\n", "            ", "vq_steps", "=", "1", "\n", "for", "_", "in", "range", "(", "vq_steps", ")", ":", "\n", "                ", "encoding_indices", ",", "encodings", "=", "self", ".", "vq", ".", "update", "(", "self", ".", "X_B", ",", "grad_use", ")", "\n", "\n", "", "self", ".", "c_indices", "[", "self", ".", "batch_indices", "]", "=", "encoding_indices", ".", "squeeze", "(", ")", ".", "to", "(", "torch", ".", "short", ")", "\n", "\n", "grad_diff", "=", "grad_use", "-", "self", ".", "vq", ".", "get_grad", "(", ")", "[", "encoding_indices", ".", "squeeze", "(", ")", "]", "\n", "self", ".", "grad_error_after", "=", "torch", ".", "norm", "(", "grad_diff", ",", "dim", "=", "1", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "grad_norm", "=", "torch", ".", "norm", "(", "grad_use", ",", "dim", "=", "1", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n", "# grad_error_by_cluster = (encodings / (1e-6 + encodings.sum(dim=0, keepdim=True))).t() @ \\", "\n", "#                         (torch.norm(grad_diff,dim=1)/torch.norm(grad,dim=1)).unsqueeze(1)", "\n", "# self.grad_error_by_cluster = grad_error_by_cluster.squeeze()", "\n", "\n", "\n", "X_B_diff", "=", "self", ".", "X_B", "-", "self", ".", "vq", ".", "get_codebook", "(", ")", "[", "encoding_indices", ".", "squeeze", "(", ")", "]", "\n", "self", ".", "vq_backward_error", "=", "torch", ".", "norm", "(", "X_B_diff", ",", "dim", "=", "1", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n", "# feat_error_by_cluster = (encodings / (1e-6 + encodings.sum(dim=0, keepdim=True))).t() @ \\", "\n", "#                         (torch.norm(X_B_diff,dim=1)/torch.norm(self.X_B,dim=1)).unsqueeze(1)", "\n", "# self.feat_error_by_cluster = feat_error_by_cluster.squeeze()", "\n", "\n", "", "return", "grad", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.models.LowRankGNNBlock.M_hook": [[127, 129], ["torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "M_hook", "(", "self", ",", "grad", ")", ":", "\n", "        ", "self", ".", "M_grad_norm", "=", "torch", ".", "norm", "(", "grad", ",", "dim", "=", "1", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.models.LowRankGNNBlock.ln_hook": [[130, 132], ["torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "ln_hook", "(", "self", ",", "grad", ")", ":", "\n", "        ", "self", ".", "ln_grad_norm", "=", "torch", ".", "norm", "(", "grad", ",", "dim", "=", "1", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.models.LowRankGNNBlock.X_B_hook": [[133, 135], ["torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "X_B_hook", "(", "self", ",", "grad", ")", ":", "\n", "        ", "self", ".", "X_B_grad_norm", "=", "torch", ".", "norm", "(", "grad", ",", "dim", "=", "1", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.models.LowRankGNNBlock.X_bar_hook": [[136, 138], ["torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "X_bar_hook", "(", "self", ",", "grad", ")", ":", "\n", "        ", "self", ".", "X_bar_grad_norm", "=", "torch", ".", "norm", "(", "grad", ",", "dim", "=", "1", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.models.LowRankGNNBlock.init": [[139, 142], ["models.LowRankGNNBlock.vq.feature_update", "models.LowRankGNNBlock.squeeze().to", "models.LowRankGNNBlock.squeeze"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizerEMA.feature_update"], ["", "def", "init", "(", "self", ",", "X_B", ",", "batch_indices", ")", ":", "\n", "        ", "encoding_indices", "=", "self", ".", "vq", ".", "feature_update", "(", "X_B", ")", "\n", "self", ".", "c_indices", "[", "batch_indices", "]", "=", "encoding_indices", ".", "squeeze", "(", ")", ".", "to", "(", "torch", ".", "short", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.models.LowRankGNNBlock.forward": [[143, 234], ["X_B.detach", "models.LowRankGNNBlock.vq.get_codebook", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "utils.dataloader.mapper", "models.LowRankGNNBlock.ln", "models.LowRankGNNBlock.transformer_k", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.LowRankGNNBlock.conv", "models.LowRankGNNBlock.conv", "X_output_B.requires_grad_", "X_output_B.register_hook", "torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean().item", "sklearn.cluster.MiniBatchKMeans().fit", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "models.LowRankGNNBlock.vq.feature_kmeans_init", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "models.LowRankGNNBlock.init", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "X_output_B[].unsqueeze", "models.LowRankGNNBlock.vq.get_grad", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "sklearn.cluster.MiniBatchKMeans", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizerEMA.get_codebook", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.dataloader.mapper", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizerEMA.feature_kmeans_init", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_link.init", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizerEMA.get_grad"], ["", "def", "forward", "(", "self", ",", "X_B", ",", "batch_A", ",", "warm_up_rate", ",", "unlabeled", ")", ":", "\n", "        ", "self", ".", "X_B", "=", "X_B", ".", "detach", "(", ")", "\n", "self", ".", "batch_indices", "=", "batch_indices", "=", "batch_A", "[", "-", "1", "]", "\n", "\n", "if", "self", ".", "training", ":", "# init", "\n", "            ", "if", "self", ".", "kmeans_init", ":", "# reassignment_ratio=0.01, batch_size=400, n_init=10,", "\n", "                ", "k_obj", "=", "MiniBatchKMeans", "(", "n_clusters", "=", "self", ".", "num_M", ",", "init", "=", "'k-means++'", ",", "batch_size", "=", "400", ",", "n_init", "=", "10", ",", "\n", "init_size", "=", "4000", ",", "reassignment_ratio", "=", "0.3", ")", ".", "fit", "(", "\n", "torch", ".", "nn", ".", "BatchNorm1d", "(", "X_B", ".", "shape", "[", "1", "]", ",", "affine", "=", "False", ",", "track_running_stats", "=", "False", ")", "(", "X_B", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "k_centroids", "=", "torch", ".", "tensor", "(", "k_obj", ".", "cluster_centers_", ",", "dtype", "=", "torch", ".", "float", ")", ".", "to", "(", "X_B", ".", "device", ")", "\n", "k_counts", "=", "torch", ".", "tensor", "(", "k_obj", ".", "counts_", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "X_B", ".", "device", ")", "\n", "\n", "# print(f'min:{torch.min(k_counts)}')", "\n", "\n", "self", ".", "vq", ".", "feature_kmeans_init", "(", "k_centroids", ",", "k_counts", ")", "\n", "self", ".", "c_indices", "[", "batch_indices", "]", "=", "torch", ".", "tensor", "(", "k_obj", ".", "labels_", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "X_B", ".", "device", ")", "\n", "self", ".", "kmeans_init", "=", "False", "\n", "\n", "", "elif", "not", "self", ".", "inited", "or", "unlabeled", ":", "\n", "                ", "self", ".", "init", "(", "X_B", ",", "batch_indices", ")", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "\n", "", "", "adj_input", "=", "None", "\n", "if", "self", ".", "transformer_flag", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "adj_input", "=", "mapper", "(", "batch_A", ",", "self", ".", "c_indices", ",", "self", ".", "num_M", ",", "self", ".", "conv_type", ",", "X_B", ".", "device", ")", "\n", "\n", "\n", "", "X_bar", "=", "self", ".", "vq", ".", "get_codebook", "(", ")", "\n", "\n", "# X_B.requires_grad_()", "\n", "# X_B.register_hook(self.X_B_hook)", "\n", "# X_bar.requires_grad_()", "\n", "# X_bar.register_hook(self.X_bar_hook)", "\n", "\n", "\n", "X_input", "=", "torch", ".", "cat", "(", "[", "X_B", ",", "X_bar", "*", "warm_up_rate", "]", ",", "dim", "=", "0", ")", "\n", "\n", "# projection before transformer", "\n", "if", "self", ".", "transformer_flag", ":", "\n", "            ", "X_input", "=", "self", ".", "ln", "(", "X_input", ")", "\n", "X_input", "=", "self", ".", "transformer_k", "(", "X_input", ")", "\n", "\n", "", "if", "self", ".", "transformer_flag", "or", "self", ".", "conv_type", "==", "'GAT'", ":", "# X_input cat tensor.ones", "\n", "            ", "X_input", "=", "torch", ".", "cat", "(", "[", "X_input", ",", "torch", ".", "ones", "(", "X_input", ".", "shape", "[", "0", "]", ",", "1", ")", ".", "to", "(", "X_input", ".", "device", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# Conv", "\n", "", "if", "self", ".", "transformer_flag", ":", "\n", "            ", "X_output", "=", "self", ".", "conv", "(", "X_input", "[", ":", "X_B", ".", "shape", "[", "0", "]", "]", ",", "X_input", "[", "X_B", ".", "shape", "[", "0", "]", ":", "]", ")", "\n", "", "else", ":", "\n", "            ", "X_output", "=", "self", ".", "conv", "(", "X_input", ",", "adj_input", ")", "\n", "\n", "", "X_output_B", ",", "X_output_M", "=", "X_output", "[", ":", "X_B", ".", "shape", "[", "0", "]", "]", ",", "X_output", "[", "X_B", ".", "shape", "[", "0", "]", ":", "]", "\n", "\n", "if", "self", ".", "inited", "and", "self", ".", "hook_flag", "and", "self", ".", "training", "and", "not", "unlabeled", ":", "\n", "# X_output.requires_grad_()", "\n", "\n", "            ", "X_output_B", ".", "requires_grad_", "(", ")", "\n", "X_output_B", ".", "register_hook", "(", "self", ".", "hook", ")", "\n", "\n", "# X_output_M.requires_grad_()", "\n", "# X_output_M.register_hook(self.M_hook)", "\n", "\n", "\n", "", "if", "self", ".", "transformer_flag", "or", "self", ".", "conv_type", "==", "'GAT'", ":", "#use the added one dim to normalize X_out_B", "\n", "            ", "X_output_B", "=", "X_output_B", "[", ":", ",", ":", "self", ".", "num_D", "]", "/", "(", "X_output_B", "[", ":", ",", "self", ".", "num_D", "]", ".", "unsqueeze", "(", "1", ")", "+", "1e-16", ")", "\n", "\n", "# X_output_B_ln = self.ln(X_output_B)", "\n", "", "X_output_B_ln", "=", "X_output_B", "\n", "\n", "# if self.inited and self.hook_flag and self.training and not unlabeled:", "\n", "#     X_output_B_ln.register_hook(self.ln_hook)", "\n", "\n", "# quantized = X_bar[self.c_indices[batch_indices].to(torch.long)]", "\n", "# commit_loss = self.commitment_cost*F.mse_loss(X_B, quantized)", "\n", "commit_loss", "=", "0", "\n", "\n", "# info_backward = torch.sum(X_output_M[:, :self.num_D] * self.vq.get_grad())", "\n", "info_backward", "=", "torch", ".", "sum", "(", "X_output_M", "*", "self", ".", "vq", ".", "get_grad", "(", ")", "*", "warm_up_rate", ")", "\n", "\n", "# self.vq_get_grad_norm = torch.norm(self.vq.get_grad(), dim=1).mean().item()", "\n", "# statistics record", "\n", "# error = torch.norm(quantized-X_B, dim=1).mean().item()", "\n", "# quantized_norm = torch.norm(quantized, dim=1).mean().item()", "\n", "error", "=", "quantized_norm", "=", "0", "\n", "\n", "\n", "return", "X_output_B_ln", ",", "error", ",", "torch", ".", "norm", "(", "X_B", ",", "dim", "=", "1", ")", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "quantized_norm", ",", "commit_loss", ",", "info_backward", ",", "X_B", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.models.LowRankGNNLayer.__init__": [[237, 300], ["super().__init__", "range", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "int", "int", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "ValueError", "ValueError", "models.LowRankGNNLayer.transformer_block.append", "models.LowRankGNNLayer.gnn_block.append", "ValueError", "models.LowRankGNNBlock", "models.LowRankGNNBlock"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.dataloader.OurDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "dropout", ",", "\n", "num_M", ",", "num_D", ",", "num_N", ",", "num_branch", ",", "cluster", ",", "ln_para", ",", "no_second_fc", ",", "\n", "kmeans_iter", ",", "EMA_flag", ",", "split", ",", "kmeans_init", ",", "dropbranch", ",", "skip", ",", "use_gcn", ",", "commitment_cost", ",", "\n", "grad_normalize_scale", ",", "hook", ",", "weight_ahead", ",", "warm_up_flag", ",", "momentum", ",", "conv_type", ",", "transformer_flag", ")", ":", "\n", "        ", "super", "(", "LowRankGNNLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# weight ahead disabled", "\n", "self", ".", "weight_ahead", "=", "weight_ahead", "\n", "if", "self", ".", "weight_ahead", ":", "\n", "            ", "if", "out_channels", "%", "num_D", "!=", "0", ":", "raise", "ValueError", "(", "'Cannot fully split'", ")", "\n", "self", ".", "num_branch", "=", "int", "(", "out_channels", "/", "num_D", ")", "\n", "", "else", ":", "\n", "            ", "if", "in_channels", "%", "num_D", "!=", "0", ":", "raise", "ValueError", "(", "'Cannot fully split'", ")", "\n", "self", ".", "num_branch", "=", "int", "(", "in_channels", "/", "num_D", ")", "\n", "\n", "", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "no_second_fc", "=", "no_second_fc", "\n", "self", ".", "EMA_flag", "=", "EMA_flag", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "num_D", "=", "num_D", "\n", "self", ".", "dropbranch", "=", "dropbranch", "\n", "self", ".", "skip", "=", "skip", "\n", "self", ".", "conv_type", "=", "conv_type", "\n", "self", ".", "transformer_flag", "=", "transformer_flag", "\n", "\n", "self", ".", "linear_k", ",", "self", ".", "linear_v", ",", "self", ".", "gnn_block", ",", "self", ".", "transformer_block", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", ",", "torch", ".", "nn", ".", "ModuleList", "(", ")", ",", "torch", ".", "nn", ".", "ModuleList", "(", ")", ",", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_branch", ")", ":", "\n", "# if not self.split :", "\n", "#     self.linear_k.append(torch.nn.Linear(in_channels, num_D))", "\n", "\n", "            ", "if", "transformer_flag", ":", "\n", "                ", "self", ".", "transformer_block", ".", "append", "(", "LowRankGNNBlock", "(", "num_D", ",", "out_channels", ",", "num_M", ",", "num_D", ",", "num_N", ",", "self", ".", "num_branch", ",", "\n", "cluster", ",", "kmeans_iter", ",", "EMA_flag", ",", "kmeans_init", ",", "\n", "False", ",", "commitment_cost", ",", "grad_normalize_scale", ",", "\n", "hook", ",", "warm_up_flag", ",", "momentum", ",", "conv_type", ",", "True", ")", ")", "\n", "\n", "", "if", "no_second_fc", ":", "\n", "                ", "self", ".", "gnn_block", ".", "append", "(", "LowRankGNNBlock", "(", "num_D", ",", "out_channels", ",", "num_M", ",", "num_D", ",", "num_N", ",", "self", ".", "num_branch", ",", "\n", "cluster", ",", "kmeans_iter", ",", "EMA_flag", ",", "kmeans_init", ",", "\n", "use_gcn", ",", "commitment_cost", ",", "grad_normalize_scale", ",", "\n", "hook", ",", "warm_up_flag", ",", "momentum", ",", "conv_type", ",", "False", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'second fc not studied'", ")", "\n", "# self.gnn_block.append(LowRankGNNBlock(num_D, num_D, num_M, num_D, num_N, self.num_branch,", "\n", "#                                       cluster, kmeans_iter, EMA_flag, kmeans_init,", "\n", "#                                       use_gcn, commitment_cost, grad_normalize_scale,", "\n", "#                                       hook, warm_up_flag, momentum, conv_type, False))", "\n", "# self.linear_v.append(torch.nn.Linear(num_D, out_channels))", "\n", "\n", "", "", "if", "self", ".", "skip", ":", "\n", "            ", "self", ".", "linear_skip", "=", "torch", ".", "nn", ".", "Linear", "(", "in_channels", ",", "out_channels", ")", "\n", "\n", "", "self", ".", "gnn_transform", "=", "torch", ".", "nn", ".", "Linear", "(", "in_channels", ",", "out_channels", ")", "\n", "# self.transform = torch.nn.utils.spectral_norm ( torch.nn.Linear(in_channels, out_channels) )", "\n", "self", ".", "batch_norm", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "out_channels", ",", "affine", "=", "False", ")", "\n", "\n", "if", "self", ".", "conv_type", "==", "'SAGE'", ":", "\n", "            ", "self", ".", "fc_sage", "=", "torch", ".", "nn", ".", "Linear", "(", "in_channels", ",", "out_channels", ")", "\n", "\n", "", "if", "self", ".", "transformer_flag", ":", "\n", "            ", "self", ".", "transformer_res", "=", "torch", ".", "nn", ".", "Linear", "(", "in_channels", ",", "out_channels", ")", "\n", "self", ".", "transformer_v", "=", "torch", ".", "nn", ".", "Linear", "(", "in_channels", ",", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.models.LowRankGNNLayer.forward": [[307, 368], ["models.LowRankGNNLayer.gnn_transform", "int", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "x_hiddens.append", "hookeds.append", "errors.append", "X_B_norms.append", "quantized_norms.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.LowRankGNNLayer.transformer_v", "models.LowRankGNNLayer.transformer_res", "models.LowRankGNNLayer.linear_skip", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "models.LowRankGNNLayer.fc_sage", "x_hiddens.append", "hookeds.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "batch_A", ",", "warm_up_rate", ",", "unlabeled", ")", ":", "\n", "\n", "        ", "errors", ",", "X_B_norms", ",", "quantized_norms", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "losses", ",", "info_backwards", "=", "0", ",", "0", "\n", "hookeds", "=", "[", "]", "\n", "\n", "if", "self", ".", "training", "and", "self", ".", "dropbranch", ">", "0", ":", "\n", "            ", "num_branch", "=", "int", "(", "self", ".", "num_branch", "*", "(", "1", "-", "self", ".", "dropbranch", ")", ")", "\n", "branch_idx", "=", "torch", ".", "randperm", "(", "self", ".", "num_branch", ")", "[", ":", "num_branch", "]", "\n", "", "else", ":", "\n", "            ", "num_branch", "=", "self", ".", "num_branch", "\n", "branch_idx", "=", "torch", ".", "arange", "(", "num_branch", ")", "\n", "\n", "", "x_input", ",", "x_output", "=", "x", ",", "0", "\n", "x_hiddens", "=", "[", "]", "\n", "for", "i", "in", "branch_idx", ":", "\n", "            ", "x_hidden", "=", "x_input", "[", ":", ",", "self", ".", "num_D", "*", "i", ":", "self", ".", "num_D", "*", "(", "i", "+", "1", ")", "]", "\n", "x_hidden", ",", "error", ",", "X_B_norm", ",", "quantized_norm", ",", "loss", ",", "info_backward", ",", "hooked", "=", "self", ".", "gnn_block", "[", "i", "]", "(", "x_hidden", ",", "batch_A", ",", "warm_up_rate", ",", "unlabeled", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "                ", "losses", "+=", "loss", "\n", "info_backwards", "+=", "info_backward", "\n", "\n", "", "x_hiddens", ".", "append", "(", "x_hidden", ")", "\n", "hookeds", ".", "append", "(", "hooked", ")", "\n", "errors", ".", "append", "(", "error", ")", "\n", "X_B_norms", ".", "append", "(", "X_B_norm", ")", "\n", "quantized_norms", ".", "append", "(", "quantized_norm", ")", "\n", "\n", "", "x_output_gnn", "=", "self", ".", "gnn_transform", "(", "torch", ".", "cat", "(", "x_hiddens", ",", "dim", "=", "1", ")", ")", "\n", "if", "self", ".", "conv_type", "==", "'SAGE'", ":", "\n", "            ", "x_output_gnn", "=", "x_output_gnn", "+", "self", ".", "fc_sage", "(", "x_input", ")", "\n", "", "x_output", "=", "x_output", "+", "x_output_gnn", "\n", "\n", "if", "self", ".", "transformer_flag", ":", "\n", "            ", "x_hiddens", "=", "[", "]", "\n", "for", "i", "in", "branch_idx", ":", "\n", "                ", "x_hidden", "=", "x_input", "[", ":", ",", "self", ".", "num_D", "*", "i", ":", "self", ".", "num_D", "*", "(", "i", "+", "1", ")", "]", "\n", "x_hidden", ",", "error", ",", "X_B_norm", ",", "quantized_norm", ",", "loss", ",", "info_backward", ",", "hooked", "=", "self", ".", "transformer_block", "[", "i", "]", "(", "x_hidden", ",", "batch_A", ",", "warm_up_rate", ",", "unlabeled", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "                    ", "losses", "+=", "loss", "\n", "info_backwards", "+=", "info_backward", "\n", "\n", "", "x_hiddens", ".", "append", "(", "x_hidden", ")", "\n", "hookeds", ".", "append", "(", "hooked", ")", "\n", "\n", "# errors.append(error)", "\n", "# X_B_norms.append(X_B_norm)", "\n", "# quantized_norms.append(quantized_norm)", "\n", "\n", "", "x_output_trans", "=", "self", ".", "transformer_v", "(", "torch", ".", "cat", "(", "x_hiddens", ",", "dim", "=", "1", ")", ")", "\n", "x_output_trans_res", "=", "self", ".", "transformer_res", "(", "x_input", ")", "\n", "x_output", "=", "x_output", "+", "x_output_trans", "+", "x_output_trans_res", "\n", "\n", "", "if", "self", ".", "skip", ":", "\n", "            ", "x_output", "+=", "self", ".", "linear_skip", "(", "x", ")", "\n", "\n", "", "return", "x_output", ",", "errors", ",", "X_B_norms", ",", "quantized_norms", ",", "losses", ",", "info_backwards", ",", "hookeds", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.models.LowRankGNN.__init__": [[371, 435], ["super().__init__", "models.LowRankGNN.convs.append", "models.LowRankGNN.batch_norms.append", "range", "models.LowRankGNN.convs.append", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.AlphaDropout", "torch.nn.AlphaDropout", "torch.nn.AlphaDropout", "torch.nn.AlphaDropout", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "models.LowRankGNNLayer", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "models.LowRankGNN.convs.append", "models.LowRankGNN.batch_norms.append", "models.LowRankGNNLayer", "models.LowRankGNNLayer", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "ValueError", "torch.gelu", "torch.gelu"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.dataloader.OurDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "hidden_channels", ",", "out_channels", ",", "num_layers", ",", "dropout", ",", "\n", "num_M", ",", "num_D", ",", "num_N", ",", "num_branch", "=", "0", ",", "cluster", "=", "'vq'", ",", "ln_para", "=", "True", ",", "no_second_fc", "=", "False", ",", "\n", "kmeans_iter", "=", "100", ",", "EMA_flag", "=", "True", ",", "split", "=", "True", ",", "kmeans_init", "=", "False", ",", "dropbranch", "=", "0", ",", "skip", "=", "True", ",", "\n", "use_gcn", "=", "False", ",", "commitment_cost", "=", "0.5", ",", "grad_scale", "=", "(", "1", ",", "1", ")", ",", "act", "=", "'relu'", ",", "weight_ahead", "=", "False", ",", "\n", "bn_flag", "=", "False", ",", "warm_up_flag", "=", "False", ",", "momentum", "=", "0.1", ",", "conv_type", "=", "'GCN'", ",", "transformer_flag", "=", "False", ",", "\n", "alpha_dropout_flag", "=", "False", ")", ":", "\n", "        ", "super", "(", "LowRankGNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "skip", "=", "skip", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "bn_flag", "=", "bn_flag", "\n", "self", ".", "alpha_dropout_flag", "=", "alpha_dropout_flag", "\n", "\n", "if", "self", ".", "alpha_dropout_flag", ":", "\n", "            ", "self", ".", "alpha_dropout", "=", "torch", ".", "nn", ".", "AlphaDropout", "(", "p", "=", "self", ".", "dropout", ")", "\n", "\n", "", "self", ".", "convs", ",", "self", ".", "batch_norms", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", ",", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "convs", ".", "append", "(", "\n", "LowRankGNNLayer", "(", "in_channels", ",", "hidden_channels", ",", "dropout", ",", "\n", "num_M", ",", "num_D", ",", "num_N", ",", "num_branch", "=", "num_branch", ",", "\n", "cluster", "=", "cluster", ",", "ln_para", "=", "ln_para", ",", "no_second_fc", "=", "no_second_fc", ",", "\n", "kmeans_iter", "=", "kmeans_iter", ",", "EMA_flag", "=", "EMA_flag", ",", "split", "=", "split", ",", "\n", "kmeans_init", "=", "kmeans_init", ",", "dropbranch", "=", "0", ",", "skip", "=", "skip", ",", "\n", "use_gcn", "=", "use_gcn", ",", "commitment_cost", "=", "commitment_cost", ",", "grad_normalize_scale", "=", "grad_scale", ",", "\n", "hook", "=", "True", ",", "weight_ahead", "=", "weight_ahead", ",", "warm_up_flag", "=", "warm_up_flag", ",", "momentum", "=", "momentum", ",", "\n", "conv_type", "=", "conv_type", ",", "transformer_flag", "=", "transformer_flag", ")", ")", "\n", "self", ".", "batch_norms", ".", "append", "(", "torch", ".", "nn", ".", "BatchNorm1d", "(", "hidden_channels", ",", "affine", "=", "False", ")", ")", "\n", "\n", "for", "_", "in", "range", "(", "num_layers", "-", "2", ")", ":", "\n", "            ", "self", ".", "convs", ".", "append", "(", "\n", "LowRankGNNLayer", "(", "hidden_channels", ",", "hidden_channels", ",", "dropout", ",", "\n", "num_M", ",", "num_D", ",", "num_N", ",", "num_branch", "=", "num_branch", ",", "\n", "cluster", "=", "cluster", ",", "ln_para", "=", "ln_para", ",", "no_second_fc", "=", "no_second_fc", ",", "\n", "kmeans_iter", "=", "kmeans_iter", ",", "EMA_flag", "=", "EMA_flag", ",", "split", "=", "split", ",", "\n", "kmeans_init", "=", "kmeans_init", ",", "dropbranch", "=", "dropbranch", ",", "skip", "=", "skip", ",", "\n", "use_gcn", "=", "use_gcn", ",", "commitment_cost", "=", "commitment_cost", ",", "grad_normalize_scale", "=", "grad_scale", ",", "\n", "hook", "=", "True", ",", "weight_ahead", "=", "weight_ahead", ",", "warm_up_flag", "=", "warm_up_flag", ",", "momentum", "=", "momentum", ",", "\n", "conv_type", "=", "conv_type", ",", "transformer_flag", "=", "transformer_flag", ")", ")", "\n", "self", ".", "batch_norms", ".", "append", "(", "torch", ".", "nn", ".", "BatchNorm1d", "(", "hidden_channels", ",", "affine", "=", "False", ")", ")", "\n", "\n", "", "self", ".", "convs", ".", "append", "(", "\n", "LowRankGNNLayer", "(", "hidden_channels", ",", "out_channels", ",", "dropout", ",", "\n", "num_M", ",", "num_D", ",", "num_N", ",", "num_branch", "=", "num_branch", ",", "\n", "cluster", "=", "cluster", ",", "ln_para", "=", "ln_para", ",", "no_second_fc", "=", "no_second_fc", ",", "\n", "kmeans_iter", "=", "kmeans_iter", ",", "EMA_flag", "=", "EMA_flag", ",", "split", "=", "split", ",", "\n", "kmeans_init", "=", "kmeans_init", ",", "dropbranch", "=", "dropbranch", ",", "skip", "=", "skip", ",", "\n", "use_gcn", "=", "use_gcn", ",", "commitment_cost", "=", "commitment_cost", ",", "grad_normalize_scale", "=", "grad_scale", ",", "\n", "hook", "=", "True", ",", "weight_ahead", "=", "weight_ahead", ",", "warm_up_flag", "=", "warm_up_flag", ",", "momentum", "=", "momentum", ",", "\n", "conv_type", "=", "conv_type", ",", "transformer_flag", "=", "transformer_flag", ")", ")", "\n", "\n", "\n", "self", ".", "transform", "=", "torch", ".", "nn", ".", "Linear", "(", "out_channels", ",", "out_channels", ")", "\n", "\n", "self", ".", "ln", "=", "torch", ".", "nn", ".", "LayerNorm", "(", "hidden_channels", ",", "elementwise_affine", "=", "False", ")", "\n", "\n", "if", "act", "==", "'relu'", ":", "\n", "            ", "self", ".", "act_f", "=", "F", ".", "relu", "\n", "", "elif", "act", "==", "'elu'", ":", "\n", "            ", "self", ".", "act_f", "=", "F", ".", "elu", "\n", "", "elif", "act", "==", "'leaky_gelu'", ":", "\n", "            ", "self", ".", "act_f", "=", "lambda", "x", ":", "0.1", "*", "x", "+", "0.9", "*", "F", ".", "gelu", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Activation not supported!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.models.LowRankGNN.forward": [[444, 485], ["enumerate", "errors_full.append", "X_B_norms_full.append", "quantized_norms_full.append", "conv", "models.LowRankGNN.act_f", "errors_full.append", "X_B_norms_full.append", "quantized_norms_full.append", "models.LowRankGNN.alpha_dropout", "torch.dropout", "torch.dropout"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "batch", ",", "warm_up_rate", "=", "1", ",", "unlabeled", "=", "False", ")", ":", "\n", "        ", "losses_full", ",", "info_backwards_full", "=", "0", ",", "0", "\n", "errors_full", ",", "X_B_norms_full", ",", "quantized_norms_full", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "x", ",", "batch_A", "=", "batch", "\n", "for", "i", ",", "conv", "in", "enumerate", "(", "self", ".", "convs", "[", ":", "-", "1", "]", ")", ":", "\n", "\n", "            ", "x", ",", "errors", ",", "X_B_norms", ",", "quantized_norms", ",", "losses", ",", "info_backwards", ",", "_", "=", "conv", "(", "x", ",", "batch_A", ",", "warm_up_rate", ",", "unlabeled", ")", "\n", "\n", "# x = self.ln(x)", "\n", "if", "self", ".", "bn_flag", ":", "\n", "                ", "x", "=", "self", ".", "batch_norms", "[", "i", "]", "(", "x", ")", "\n", "", "x", "=", "self", ".", "act_f", "(", "x", ")", "\n", "\n", "if", "self", ".", "alpha_dropout_flag", ":", "\n", "                ", "x", "=", "self", ".", "alpha_dropout", "(", "x", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "# if self.skip :", "\n", "#     x = torch.nn.LayerNorm(x.shape[1], elementwise_affine=False)(x)", "\n", "", "losses_full", "+=", "losses", "\n", "info_backwards_full", "+=", "info_backwards", "\n", "\n", "errors_full", ".", "append", "(", "errors", ")", "\n", "X_B_norms_full", ".", "append", "(", "X_B_norms", ")", "\n", "quantized_norms_full", ".", "append", "(", "quantized_norms", ")", "\n", "\n", "\n", "", "x", ",", "errors", ",", "X_B_norms", ",", "quantized_norms", ",", "losses", ",", "info_backwards", ",", "_", "=", "self", ".", "convs", "[", "-", "1", "]", "(", "x", ",", "batch_A", ",", "warm_up_rate", ",", "unlabeled", ")", "\n", "losses_full", "+=", "losses", "\n", "info_backwards_full", "+=", "info_backwards", "\n", "\n", "errors_full", ".", "append", "(", "errors", ")", "\n", "X_B_norms_full", ".", "append", "(", "X_B_norms", ")", "\n", "quantized_norms_full", ".", "append", "(", "quantized_norms", ")", "\n", "\n", "self", ".", "errors", ",", "self", ".", "X_B_norms", ",", "self", ".", "quantized_norms", "=", "errors_full", ",", "X_B_norms_full", ",", "quantized_norms_full", "\n", "\n", "return", "x", ",", "losses_full", ",", "info_backwards_full", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.models.LowRankGNN.inference": [[486, 505], ["enumerate", "models.LowRankGNN.act_f", "conv.gnn_transform", "conv.gnn_transform", "conv.gnn_transform", "conv.linear_skip", "conv.gnn_block[].conv", "conv.gnn_transform", "conv.linear_skip", "conv.gnn_block[].conv", "conv.gnn_block[].conv", "conv.gnn_block[].conv"], "methods", ["None"], ["", "def", "inference", "(", "self", ",", "x", ",", "A", ")", ":", "\n", "\n", "        ", "for", "i", ",", "conv", "in", "enumerate", "(", "self", ".", "convs", "[", ":", "-", "1", "]", ")", ":", "\n", "\n", "            ", "if", "self", ".", "skip", ":", "\n", "                ", "x", "=", "conv", ".", "gnn_transform", "(", "conv", ".", "gnn_block", "[", "0", "]", ".", "conv", "(", "x", ",", "A", ")", ")", "+", "conv", ".", "linear_skip", "(", "x", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "conv", ".", "gnn_transform", "(", "conv", ".", "gnn_block", "[", "0", "]", ".", "conv", "(", "x", ",", "A", ")", ")", "\n", "", "if", "self", ".", "bn_flag", ":", "\n", "                ", "x", "=", "self", ".", "batch_norms", "[", "i", "]", "(", "x", ")", "\n", "", "x", "=", "self", ".", "act_f", "(", "x", ")", "\n", "\n", "", "conv", "=", "self", ".", "convs", "[", "-", "1", "]", "\n", "if", "self", ".", "skip", ":", "\n", "            ", "x", "=", "conv", ".", "gnn_transform", "(", "conv", ".", "gnn_block", "[", "0", "]", ".", "conv", "(", "x", ",", "A", ")", ")", "+", "conv", ".", "linear_skip", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "conv", ".", "gnn_transform", "(", "conv", ".", "gnn_block", "[", "0", "]", ".", "conv", "(", "x", ",", "A", ")", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.models.LowRankGNN.init": [[506, 511], ["enumerate", "conv", "models.LowRankGNN.act_f"], "methods", ["None"], ["", "def", "init", "(", "self", ",", "batch", ",", "layer_idx", ")", ":", "\n", "        ", "x", ",", "batch_A", "=", "batch", "\n", "for", "i", ",", "conv", "in", "enumerate", "(", "self", ".", "convs", "[", ":", "layer_idx", "]", ")", ":", "\n", "            ", "x", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", "=", "conv", "(", "x", ",", "batch_A", ",", "1", ",", "False", ")", "\n", "x", "=", "self", ".", "act_f", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.models.LowRankGNN1Layer.__init__": [[540, 550], ["super().__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "models.LowRankGNN1Layer.convs.append", "models.LowRankGNNLayer"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.dataloader.OurDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "hidden_channels", ",", "out_channels", ",", "num_layers", ",", "dropout", ",", "\n", "num_M", ",", "num_D", ",", "num_N", ",", "num_branch", "=", "0", ",", "cluster", "=", "'vq'", ",", "ln_para", "=", "True", ",", "no_second_fc", "=", "False", ",", "\n", "kmeans_iter", "=", "100", ",", "EMA_flag", "=", "True", ",", "split", "=", "True", ",", "kmeans_init", "=", "False", ",", "dropbranch", "=", "0", ")", ":", "\n", "        ", "super", "(", "LowRankGNN1Layer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "convs", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "convs", ".", "append", "(", "LowRankGNNLayer", "(", "in_channels", ",", "out_channels", ",", "dropout", ",", "\n", "num_M", ",", "num_D", ",", "num_N", ",", "num_branch", "=", "num_branch", ",", "cluster", "=", "cluster", ",", "\n", "ln_para", "=", "ln_para", ",", "no_second_fc", "=", "no_second_fc", ",", "kmeans_iter", "=", "kmeans_iter", ",", "\n", "EMA_flag", "=", "EMA_flag", ",", "split", "=", "split", ",", "kmeans_init", "=", "kmeans_init", ",", "dropbranch", "=", "dropbranch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.models.LowRankGNN1Layer.forward": [[552, 560], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X_B", ",", "A", ",", "batch_indices", ")", ":", "\n", "        ", "x", "=", "X_B", "\n", "x", ",", "errors", ",", "X_B_norms", ",", "quantized_norms", ",", "losses", "=", "self", ".", "convs", "[", "-", "1", "]", "(", "x", ",", "A", ",", "batch_indices", ")", "\n", "self", ".", "errors", "=", "errors", "\n", "self", ".", "X_B_norms", "=", "X_B_norms", "\n", "self", ".", "quantized_norms", "=", "quantized_norms", "\n", "\n", "return", "x", ",", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.main_node.prepare": [[27, 42], ["x.to", "deg_inv.to", "A_BN[].to", "A_BN[].to", "A_BN[].to", "A_NB_v.to", "A_BB[].to", "A_BB[].to", "A_BB[].to"], "function", ["None"], ["def", "prepare", "(", "batch", ",", "device", ")", ":", "\n", "    ", "x", ",", "deg_inv", ",", "A_BN", ",", "A_BB", ",", "A_NB_v", ",", "batch_idx", "=", "batch", "\n", "\n", "x", ",", "deg_inv", "=", "x", ".", "to", "(", "device", ")", ",", "deg_inv", ".", "to", "(", "device", ")", "\n", "row", ",", "col", ",", "value", "=", "A_BN", "[", "0", "]", ".", "to", "(", "device", ")", ",", "A_BN", "[", "1", "]", ".", "to", "(", "device", ")", ",", "A_BN", "[", "2", "]", ".", "to", "(", "device", ")", "\n", "A_BN", "=", "row", ",", "col", ",", "value", "\n", "\n", "if", "A_BB", "is", "not", "None", ":", "\n", "        ", "row", ",", "col", ",", "value", "=", "A_BB", "[", "0", "]", ".", "to", "(", "device", ")", ",", "A_BB", "[", "1", "]", ".", "to", "(", "device", ")", ",", "A_BB", "[", "2", "]", ".", "to", "(", "device", ")", "\n", "A_BB", "=", "row", ",", "col", ",", "value", "\n", "", "A_NB_v", "=", "A_NB_v", ".", "to", "(", "device", ")", "if", "A_NB_v", "is", "not", "None", "else", "None", "\n", "\n", "batch", "=", "x", ",", "(", "deg_inv", ",", "A_BN", ",", "A_BB", ",", "A_NB_v", ",", "batch_idx", ")", "\n", "\n", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.main_node.train": [[43, 135], ["utils.logger.AverageValueMeter", "utils.logger.AverageValueMeter", "utils.logger.AverageValueMeter", "utils.logger.AverageValueMeter", "model.train", "enumerate", "data.y.dim", "enumerate", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "main_node.prepare", "optimizer.zero_grad", "time.time", "model", "utils.logger.AverageValueMeter.add", "main_node.compute_micro_f1", "print", "criterion", "time.time", "loss.backward", "utils.logger.AverageValueMeter.add", "range", "utils.logger.AverageValueMeter.add", "utils.logger.AverageValueMeter.add", "utils.logger.AverageValueMeter.value", "utils.logger.AverageValueMeter.value", "utils.logger.AverageValueMeter.value", "utils.logger.AverageValueMeter.value", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "data.y.squeeze", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.sum().item", "torch.sum().item", "[].to", "[].to", "range", "transform.parameters", "torch.norm().item", "torch.norm().item", "w_grad_norms.append", "exp_log_f", "optimizer.step", "loss.item", "criterion.item", "time.time", "time.time", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.norm().item", "torch.norm().item", "a_grad_norms.append", "w_grads.append", "len", "torch.sum", "torch.sum", "model.convs[].gnn_transform.parameters", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "param.grad.view", "torch.norm", "torch.norm", "model.convs[].gnn_block.parameters", "torch.norm", "torch.norm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gat_conv.att_l.grad.view", "gat_conv.att_r.grad.view"], "function", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_link.train", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.main_node_inductive.prepare", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.add", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.compute_micro_f1", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.add", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.add", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.add", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.value", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.value", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.value", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.value", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.scheduler.GradualWarmupScheduler.step"], ["", "def", "train", "(", "model", ",", "data", ",", "batch_size", ",", "train_bool", ",", "optimizer", ",", "device", ",", "commitment_cost", ",", "use_gcn", ",", "warm_up_rate", ",", "\n", "ce_only", ",", "exp_log_f", ",", "exp_flag", ",", "conv_type", ",", "clip", ",", "num_layers", ",", "loader", ",", "test_f", ",", "experiment", ")", ":", "\n", "    ", "batch_forward_time_meter", "=", "AverageValueMeter", "(", ")", "\n", "batch_backward_time_meter", "=", "AverageValueMeter", "(", ")", "\n", "loss_cls_meter", "=", "AverageValueMeter", "(", ")", "\n", "loss_meter", "=", "AverageValueMeter", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "if", "data", ".", "y", ".", "dim", "(", ")", ">", "1", ":", "\n", "        ", "if", "data", ".", "y", ".", "shape", "[", "-", "1", "]", ">", "1", ":", "\n", "            ", "y", ",", "criterion", "=", "data", ".", "y", ",", "torch", ".", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "", "else", ":", "\n", "            ", "y", ",", "criterion", "=", "data", ".", "y", ".", "squeeze", "(", "1", ")", ",", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "y", ",", "criterion", "=", "data", ".", "y", ",", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "", "for", "i", ",", "batches", "in", "enumerate", "(", "loader", ")", ":", "\n", "\n", "        ", "for", "j", ",", "batch", "in", "enumerate", "(", "batches", ")", ":", "\n", "\n", "            ", "batch_idx", "=", "batch", "[", "-", "1", "]", "\n", "# if current batch has no training sample, continue", "\n", "if", "torch", ".", "sum", "(", "train_bool", "[", "batch_idx", "]", ")", ".", "item", "(", ")", "<=", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "batch", "=", "prepare", "(", "batch", ",", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "out", ",", "vq_losses", ",", "info_backward", "=", "model", "(", "batch", ",", "warm_up_rate", ")", "\n", "\n", "batch_forward_time_meter", ".", "add", "(", "time", ".", "time", "(", ")", "-", "start", ")", "\n", "out", "=", "out", "[", "train_bool", "[", "batch_idx", "]", "]", "\n", "\n", "\n", "score", "=", "compute_micro_f1", "(", "out", ",", "y", "[", "batch_idx", "]", "[", "train_bool", "[", "batch_idx", "]", "]", ".", "to", "(", "device", ")", ")", "\n", "print", "(", "f'Batch {i}, train acc:{score}'", ")", "\n", "loss_cls", "=", "criterion", "(", "out", ",", "y", "[", "batch_idx", "]", "[", "train_bool", "[", "batch_idx", "]", "]", ".", "to", "(", "device", ")", ")", "\n", "\n", "if", "commitment_cost", ">", "0", ":", "\n", "                ", "loss", "=", "loss_cls", "+", "info_backward", "+", "vq_losses", "\n", "", "else", ":", "\n", "                ", "loss", "=", "loss_cls", "+", "info_backward", "\n", "", "if", "ce_only", ":", "\n", "                ", "loss", "=", "loss_cls", "\n", "\n", "# print('Train loss:', loss.item())", "\n", "\n", "", "start", "=", "time", ".", "time", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "batch_backward_time_meter", ".", "add", "(", "time", ".", "time", "(", ")", "-", "start", ")", "\n", "\n", "if", "clip", "is", "not", "None", ":", "\n", "                ", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "                    ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "convs", "[", "i", "]", ".", "gnn_transform", ".", "parameters", "(", ")", ",", "clip", "[", "0", "]", ")", "\n", "if", "conv_type", "==", "'GAT'", ":", "# TODO: transformer case", "\n", "                        ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "convs", "[", "i", "]", ".", "gnn_block", ".", "parameters", "(", ")", ",", "clip", "[", "1", "]", ")", "\n", "\n", "", "", "", "a_grad_norms", ",", "w_grad_norms", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "                ", "if", "conv_type", "==", "'GAT'", ":", "\n", "                    ", "gat_conv", "=", "model", ".", "convs", "[", "i", "]", ".", "gnn_block", "[", "0", "]", ".", "conv", "\n", "a_grad_norm", "=", "torch", ".", "norm", "(", "torch", ".", "cat", "(", "[", "gat_conv", ".", "att_l", ".", "grad", ".", "view", "(", "-", "1", ")", ",", "gat_conv", ".", "att_r", ".", "grad", ".", "view", "(", "-", "1", ")", "]", ")", ")", ".", "item", "(", ")", "\n", "a_grad_norms", ".", "append", "(", "a_grad_norm", ")", "\n", "\n", "", "transform", "=", "model", ".", "convs", "[", "i", "]", ".", "gnn_transform", "\n", "w_grads", "=", "[", "]", "\n", "for", "param", "in", "transform", ".", "parameters", "(", ")", ":", "\n", "                    ", "w_grads", ".", "append", "(", "param", ".", "grad", ".", "view", "(", "-", "1", ")", ")", "\n", "", "w_grad_norm", "=", "torch", ".", "norm", "(", "torch", ".", "cat", "(", "w_grads", ")", ")", ".", "item", "(", ")", "\n", "w_grad_norms", ".", "append", "(", "w_grad_norm", ")", "\n", "\n", "", "model", ".", "a_grad_norms", ",", "model", ".", "w_grad_norms", "=", "a_grad_norms", ",", "w_grad_norms", "\n", "\n", "if", "exp_flag", ":", "\n", "                ", "exp_log_f", "(", ")", "\n", "\n", "", "if", "j", "==", "0", "and", "len", "(", "batches", ")", ">", "1", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "loss_meter", ".", "add", "(", "loss", ".", "item", "(", ")", ")", "\n", "loss_cls_meter", ".", "add", "(", "loss_cls", ".", "item", "(", ")", ")", "\n", "# print(torch.cuda.max_memory_allocated(device=device)/1e+6)", "\n", "\n", "# train_acc, valid_acc, test_acc = test_f()", "\n", "# experiment.log_metric('curve_train_acc', train_acc)", "\n", "# experiment.log_metric('curve_valid_acc', valid_acc)", "\n", "# experiment.log_metric('curve_test_acc', test_acc)", "\n", "\n", "", "", "return", "loss_meter", ".", "value", "(", ")", "[", "0", "]", ",", "loss_cls_meter", ".", "value", "(", ")", "[", "0", "]", ",", "batch_forward_time_meter", ".", "value", "(", ")", "[", "0", "]", ",", "batch_backward_time_meter", ".", "value", "(", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.main_node.init": [[137, 190], ["model.train", "range", "print", "torch.no_grad", "torch.no_grad", "enumerate", "main_node.prepare", "model.init", "print", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated"], "function", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_link.train", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.main_node_inductive.prepare", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_link.init"], ["", "def", "init", "(", "model", ",", "device", ",", "loader", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "\n", "for", "layer_idx", "in", "range", "(", "1", ",", "model", ".", "num_layers", "+", "1", ")", ":", "\n", "        ", "print", "(", "layer_idx", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "batch", "in", "enumerate", "(", "loader", ")", ":", "\n", "                ", "batch", "=", "batch", "[", "0", "]", "\n", "batch", "=", "prepare", "(", "batch", ",", "device", ")", "\n", "model", ".", "init", "(", "batch", ",", "layer_idx", ")", "\n", "\n", "print", "(", "torch", ".", "cuda", ".", "max_memory_allocated", "(", "device", "=", "device", ")", "/", "1e+6", ")", "\n", "\n", "", "", "", "for", "layer", "in", "model", ".", "convs", ":", "\n", "        ", "for", "gnn_block", "in", "layer", ".", "gnn_block", ":", "\n", "            ", "gnn_block", ".", "inited", "=", "True", "\n", "\n", "# for layer_idx in reversed(range(1, model.num_layers+1)) :", "\n", "#     print(layer_idx)", "\n", "#", "\n", "#     rand_idx = torch.randperm(data.num_nodes)", "\n", "#     num_batches = ceil(data.num_nodes / batch_size)", "\n", "#     for i in range(num_batches) :", "\n", "#", "\n", "#         if (i+1)*batch_size > data.num_nodes :", "\n", "#             batch_idx = rand_idx[i * batch_size:data.num_nodes]", "\n", "#         else :", "\n", "#             batch_idx = rand_idx[i*batch_size:(i+1)*batch_size]", "\n", "#", "\n", "#         loss_func = lambda x: F.cross_entropy(x[train_bool[batch_idx]],", "\n", "#                                               data.y.squeeze(1)[batch_idx][train_bool[batch_idx]].to(device))", "\n", "#", "\n", "#         if use_gcn :", "\n", "#             if conv_type.startswith('SAGE'):", "\n", "#                 A = (data.adj_t[batch_idx].to(device), data.adj_t[:, batch_idx].to(device))", "\n", "#             else:", "\n", "#                 A = data.adj_t[batch_idx].to(device)", "\n", "#             model.grad_init(data.x[batch_idx].to(device), A, batch_idx,", "\n", "#                         layer_idx, loss_func, data.deg[batch_idx].to(device))", "\n", "#         else :", "\n", "#             if conv_type.startswith('degree-GAT') :", "\n", "#                 A = (data.adj_t[batch_idx].to(device), data.adj_t[:, batch_idx].to(device))", "\n", "#                 model.grad_init(data.x[batch_idx].to(device), A, batch_idx,", "\n", "#                                 layer_idx, loss_func, data.deg[batch_idx].to(device))", "\n", "#             else :", "\n", "#                 model.grad_init(data.x[batch_idx].to(device), data.adj_t[batch_idx].to(device), batch_idx,", "\n", "#                             layer_idx, loss_func)", "\n", "\n", "", "", "for", "layer", "in", "model", ".", "convs", ":", "\n", "        ", "for", "gnn_block", "in", "layer", ".", "gnn_block", ":", "\n", "            ", "gnn_block", ".", "kmeans_init", "=", "False", "\n", "gnn_block", ".", "grad_kmeans_init", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.main_node.compute_micro_f1": [[191, 211], ["y.dim", "int", "int", "int", "int", "y.size", "logits.argmax().eq().sum", "logits.argmax().eq", "logits.argmax"], "function", ["None"], ["", "", "", "def", "compute_micro_f1", "(", "logits", ",", "y", ",", "mask", "=", "None", ")", "->", "float", ":", "\n", "    ", "if", "mask", "is", "not", "None", ":", "\n", "        ", "logits", ",", "y", "=", "logits", "[", "mask", "]", ",", "y", "[", "mask", "]", "\n", "\n", "", "if", "y", ".", "dim", "(", ")", "==", "1", ":", "\n", "        ", "return", "int", "(", "logits", ".", "argmax", "(", "dim", "=", "-", "1", ")", ".", "eq", "(", "y", ")", ".", "sum", "(", ")", ")", "/", "y", ".", "size", "(", "0", ")", "\n", "", "else", ":", "\n", "        ", "y_pred", "=", "logits", ">", "0", "\n", "y_true", "=", "y", ">", "0.5", "\n", "\n", "tp", "=", "int", "(", "(", "y_true", "&", "y_pred", ")", ".", "sum", "(", ")", ")", "\n", "fp", "=", "int", "(", "(", "~", "y_true", "&", "y_pred", ")", ".", "sum", "(", ")", ")", "\n", "fn", "=", "int", "(", "(", "y_true", "&", "~", "y_pred", ")", ".", "sum", "(", ")", ")", "\n", "\n", "try", ":", "\n", "            ", "precision", "=", "tp", "/", "(", "tp", "+", "fp", ")", "\n", "recall", "=", "tp", "/", "(", "tp", "+", "fn", ")", "\n", "return", "2", "*", "(", "precision", "*", "recall", ")", "/", "(", "precision", "+", "recall", ")", "\n", "", "except", "ZeroDivisionError", ":", "\n", "            ", "return", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.main_node.test": [[212, 245], ["torch.no_grad", "torch.no_grad", "model.eval", "enumerate", "torch.cat", "torch.cat", "main_node.prepare", "model", "torch.cat.append", "torch.cat.argmax", "main_node.compute_micro_f1", "main_node.compute_micro_f1", "main_node.compute_micro_f1", "evaluator.eval", "evaluator.eval", "evaluator.eval", "data.y.to", "data.y.to", "data.y.to", "data.y[].to", "data.y[].to", "data.y[].to"], "function", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.main_node_inductive.prepare", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.compute_micro_f1", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.compute_micro_f1", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.compute_micro_f1"], ["", "", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "test", "(", "model", ",", "data", ",", "device", ",", "loader", ",", "dataset", ",", "split_idx", ",", "evaluator", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "outs", "=", "[", "]", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "batch", "=", "batch", "[", "0", "]", "\n", "batch", "=", "prepare", "(", "batch", ",", "device", ")", "\n", "out", ",", "_", ",", "_", "=", "model", "(", "batch", ")", "\n", "outs", ".", "append", "(", "out", ")", "\n", "\n", "", "outs", "=", "torch", ".", "cat", "(", "outs", ",", "dim", "=", "0", ")", "\n", "\n", "if", "dataset", "in", "{", "'arxiv'", ",", "'products'", "}", ":", "\n", "        ", "y_pred", "=", "outs", ".", "argmax", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "train_acc", "=", "evaluator", ".", "eval", "(", "{", "\n", "'y_true'", ":", "data", ".", "y", "[", "split_idx", "[", "'train'", "]", "]", ".", "to", "(", "device", ")", ",", "\n", "'y_pred'", ":", "y_pred", "[", "split_idx", "[", "'train'", "]", "]", ",", "\n", "}", ")", "[", "'acc'", "]", "\n", "valid_acc", "=", "evaluator", ".", "eval", "(", "{", "\n", "'y_true'", ":", "data", ".", "y", "[", "split_idx", "[", "'valid'", "]", "]", ".", "to", "(", "device", ")", ",", "\n", "'y_pred'", ":", "y_pred", "[", "split_idx", "[", "'valid'", "]", "]", ",", "\n", "}", ")", "[", "'acc'", "]", "\n", "test_acc", "=", "evaluator", ".", "eval", "(", "{", "\n", "'y_true'", ":", "data", ".", "y", "[", "split_idx", "[", "'test'", "]", "]", ".", "to", "(", "device", ")", ",", "\n", "'y_pred'", ":", "y_pred", "[", "split_idx", "[", "'test'", "]", "]", ",", "\n", "}", ")", "[", "'acc'", "]", "\n", "", "else", ":", "\n", "        ", "train_acc", "=", "compute_micro_f1", "(", "outs", ",", "data", ".", "y", ".", "to", "(", "device", ")", ",", "data", ".", "train_mask", ")", "\n", "valid_acc", "=", "compute_micro_f1", "(", "outs", ",", "data", ".", "y", ".", "to", "(", "device", ")", ",", "data", ".", "val_mask", ")", "\n", "test_acc", "=", "compute_micro_f1", "(", "outs", ",", "data", ".", "y", ".", "to", "(", "device", ")", ",", "data", ".", "test_mask", ")", "\n", "\n", "", "return", "train_acc", ",", "valid_acc", ",", "test_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.main_node.test_inference": [[246, 254], ["torch.no_grad", "torch.no_grad", "model.eval", "model.inference", "main_node.compute_micro_f1", "data.x.to", "data.adj_t.to", "data.y.to"], "function", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.models.LowRankGNN.inference", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.compute_micro_f1"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "test_inference", "(", "model", ",", "data", ",", "device", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "outs", "=", "model", ".", "inference", "(", "data", ".", "x", ".", "to", "(", "device", ")", ",", "data", ".", "adj_t", ".", "to", "(", "device", ")", ")", "\n", "result", "=", "compute_micro_f1", "(", "outs", ",", "data", ".", "y", ".", "to", "(", "device", ")", ")", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.main_node.main": [[256, 477], ["utils.parser.parse", "torch.device", "torch.device", "utils.logger.Logger", "utils.dataloader.OurDataLoader", "utils.dataloader.OurDataLoader", "range", "utils.logger.Logger.print_statistics", "torch.cuda.is_available", "torch.cuda.is_available", "ogb.nodeproppred.PygNodePropPredDataset", "Batch.from_data_list.adj_t.to_symmetric", "main_node.main.norm_adj"], "function", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.parser.parse", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.Logger.print_statistics", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.norm_adj"], ["", "def", "main", "(", ")", ":", "\n", "\n", "    ", "args", "=", "parse", "(", ")", "\n", "\n", "# if args.exp :", "\n", "#     experiment = Experiment(", "\n", "#         api_key=\"\",", "\n", "#         project_name=\"\",", "\n", "#         workspace=\"\",", "\n", "#     )", "\n", "#     experiment.set_name(args.exp_name)", "\n", "#     experiment.log_code(folder='.')", "\n", "#     experiment.add_tag(args.exp_tag)", "\n", "\n", "device", "=", "f'cuda:{args.device}'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "device", "=", "torch", ".", "device", "(", "device", ")", "\n", "\n", "if", "args", ".", "dataset", "in", "{", "'arxiv'", ",", "'products'", "}", ":", "\n", "        ", "dataset", "=", "PygNodePropPredDataset", "(", "name", "=", "f'ogbn-{args.dataset}'", ",", "\n", "transform", "=", "T", ".", "ToSparseTensor", "(", ")", ",", "\n", "root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'ogb'", ")", ")", "\n", "", "else", ":", "\n", "        ", "def", "inductive_data", "(", "dataset", ")", ":", "\n", "            ", "data", "=", "Batch", ".", "from_data_list", "(", "dataset", ")", "\n", "data", ".", "batch", ",", "data", ".", "ptr", "=", "None", ",", "None", "\n", "data", "[", "'train_mask'", "]", "=", "torch", ".", "ones", "(", "data", ".", "num_nodes", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "return", "data", "\n", "\n", "", "if", "args", ".", "dataset", "==", "'flickr'", ":", "\n", "            ", "dataset", "=", "Flickr", "(", "root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'graph'", ",", "args", ".", "dataset", ")", ",", "\n", "transform", "=", "T", ".", "ToSparseTensor", "(", ")", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'yelp'", ":", "\n", "            ", "dataset", "=", "Yelp", "(", "root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'graph'", ",", "args", ".", "dataset", ")", ",", "\n", "transform", "=", "T", ".", "ToSparseTensor", "(", ")", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'reddit'", ":", "\n", "            ", "dataset", "=", "Reddit", "(", "root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'graph'", ",", "args", ".", "dataset", ")", ",", "\n", "transform", "=", "T", ".", "ToSparseTensor", "(", ")", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'ppi'", ":", "\n", "            ", "print", "(", "'PPI loaded'", ")", "\n", "dataset", "=", "PPI", "(", "root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'graph'", ",", "args", ".", "dataset", ")", ",", "\n", "transform", "=", "T", ".", "ToSparseTensor", "(", ")", ",", "split", "=", "'train'", ")", "\n", "val_dataset", "=", "PPI", "(", "root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'graph'", ",", "args", ".", "dataset", ")", ",", "\n", "transform", "=", "T", ".", "ToSparseTensor", "(", ")", ",", "split", "=", "'val'", ")", "\n", "test_dataset", "=", "PPI", "(", "root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'graph'", ",", "args", ".", "dataset", ")", ",", "\n", "transform", "=", "T", ".", "ToSparseTensor", "(", ")", ",", "split", "=", "'test'", ")", "\n", "data", ",", "val_data", ",", "test_data", "=", "inductive_data", "(", "dataset", ")", ",", "inductive_data", "(", "val_dataset", ")", ",", "inductive_data", "(", "test_dataset", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'cluster'", ":", "\n", "            ", "print", "(", "'CLUSTER loaded'", ")", "\n", "kwargs", "=", "{", "'root'", ":", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'graph'", ",", "args", ".", "dataset", ")", ",", "'name'", ":", "'CLUSTER'", ",", "\n", "'transform'", ":", "T", ".", "ToSparseTensor", "(", ")", "}", "\n", "dataset", "=", "GNNBenchmarkDataset", "(", "split", "=", "'train'", ",", "**", "kwargs", ")", "\n", "val_dataset", "=", "GNNBenchmarkDataset", "(", "split", "=", "'val'", ",", "**", "kwargs", ")", "\n", "test_dataset", "=", "GNNBenchmarkDataset", "(", "split", "=", "'test'", ",", "**", "kwargs", ")", "\n", "data", ",", "val_data", ",", "test_data", "=", "inductive_data", "(", "dataset", ")", ",", "inductive_data", "(", "val_dataset", ")", ",", "inductive_data", "(", "test_dataset", ")", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Dataset not supported!'", ")", "\n", "\n", "# inference", "\n", "# data_infer = copy.deepcopy(data)", "\n", "# data_infer.adj_t = data_infer.adj_t.set_diag()", "\n", "# deg = data_infer.adj_t.sum(dim=1).to(torch.float)", "\n", "# deg_inv_sqrt = deg.pow(-1 / 2)", "\n", "# deg_inv_sqrt[deg_inv_sqrt == float('inf')] = 0", "\n", "# data_infer.adj_t = deg_inv_sqrt.view(-1, 1) * data_infer.adj_t * deg_inv_sqrt.view(1, -1)", "\n", "# data_infer = data_infer.to(device)", "\n", "\n", "", "", "def", "norm_adj", "(", "data", ")", ":", "\n", "        ", "if", "args", ".", "conv_type", "==", "'GCN'", ":", "\n", "            ", "deg", "=", "data", ".", "adj_t", ".", "sum", "(", "dim", "=", "1", ")", ".", "to", "(", "torch", ".", "float", ")", "+", "1", "\n", "data", ".", "deg", "=", "deg", "\n", "deg_inv_sqrt", "=", "deg", ".", "pow", "(", "-", "1", "/", "2", ")", "\n", "deg_inv_sqrt", "[", "deg_inv_sqrt", "==", "float", "(", "'inf'", ")", "]", "=", "0", "\n", "deg_inv", "=", "deg", ".", "pow", "(", "-", "1", ")", "\n", "data", ".", "deg_inv", "=", "deg_inv", "\n", "data", ".", "adj_t", "=", "deg_inv_sqrt", ".", "view", "(", "-", "1", ",", "1", ")", "*", "data", ".", "adj_t", "*", "deg_inv_sqrt", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "", "elif", "args", ".", "conv_type", "==", "'SAGE'", ":", "\n", "            ", "deg", "=", "data", ".", "adj_t", ".", "sum", "(", "dim", "=", "1", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "data", ".", "deg", "=", "deg", "\n", "deg_inv", "=", "deg", ".", "pow", "(", "-", "1", ")", "\n", "data", ".", "deg_inv", "=", "deg_inv", "\n", "deg_inv", "[", "deg_inv", "==", "float", "(", "'inf'", ")", "]", "=", "0", "\n", "data", ".", "adj_t", "=", "deg_inv", ".", "view", "(", "-", "1", ",", "1", ")", "*", "data", ".", "adj_t", "\n", "", "elif", "args", ".", "conv_type", "==", "'GAT'", ":", "\n", "            ", "deg", "=", "data", ".", "adj_t", ".", "sum", "(", "dim", "=", "1", ")", ".", "to", "(", "torch", ".", "float", ")", "+", "1", "\n", "data", ".", "deg", "=", "deg", "\n", "deg_inv", "=", "deg", ".", "pow", "(", "-", "1", ")", "\n", "data", ".", "deg_inv", "=", "deg_inv", "\n", "deg_inv", "[", "deg_inv", "==", "float", "(", "'inf'", ")", "]", "=", "0", "\n", "data", ".", "adj_t", "=", "deg_inv", ".", "view", "(", "-", "1", ",", "1", ")", "*", "data", ".", "adj_t", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'GNN conv type not supported'", ")", "\n", "\n", "", "return", "data", "\n", "\n", "", "if", "args", ".", "dataset", "not", "in", "{", "'ppi'", ",", "'cluster'", "}", ":", "\n", "        ", "data", "=", "dataset", "[", "0", "]", "\n", "data", ".", "adj_t", "=", "data", ".", "adj_t", ".", "to_symmetric", "(", ")", "\n", "data", "=", "norm_adj", "(", "data", ")", "\n", "", "else", ":", "\n", "        ", "data", ".", "adj_t", ",", "val_data", ".", "adj_t", ",", "test_data", ".", "adj_t", "=", "data", ".", "adj_t", ".", "to_symmetric", "(", ")", ",", "val_data", ".", "adj_t", ".", "to_symmetric", "(", ")", ",", "test_data", ".", "adj_t", ".", "to_symmetric", "(", ")", "\n", "data", ",", "val_data", ",", "test_data", "=", "norm_adj", "(", "data", ")", ",", "norm_adj", "(", "val_data", ")", ",", "norm_adj", "(", "test_data", ")", "\n", "\n", "", "if", "args", ".", "batch_size", "<=", "0", ":", "\n", "        ", "args", ".", "batch_size", "=", "data", ".", "num_nodes", "\n", "", "if", "args", ".", "test_batch_size", "<=", "0", ":", "\n", "        ", "args", ".", "test_batch_size", "=", "data", ".", "num_nodes", "\n", "\n", "", "if", "args", ".", "dataset", "in", "{", "'arxiv'", ",", "'products'", "}", ":", "\n", "        ", "split_idx", "=", "dataset", ".", "get_idx_split", "(", ")", "\n", "evaluator", "=", "Evaluator", "(", "name", "=", "f'ogbn-{args.dataset}'", ")", "\n", "train_bool", "=", "torch", ".", "zeros", "(", "data", ".", "num_nodes", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "train_bool", "[", "split_idx", "[", "'train'", "]", "]", "=", "True", "\n", "", "else", ":", "\n", "        ", "train_bool", "=", "data", ".", "train_mask", "\n", "split_idx", ",", "evaluator", "=", "None", ",", "None", "\n", "\n", "", "logger", "=", "Logger", "(", "args", ".", "runs", ",", "args", ")", "\n", "\n", "num_N", "=", "data", ".", "x", ".", "shape", "[", "0", "]", "\n", "if", "args", ".", "split", ":", "\n", "        ", "if", "data", ".", "num_features", "%", "args", ".", "num_D", "!=", "0", ":", "\n", "            ", "padding_dim", "=", "args", ".", "num_D", "-", "data", ".", "num_features", "%", "args", ".", "num_D", "\n", "data", ".", "x", "=", "torch", ".", "cat", "(", "[", "data", ".", "x", ",", "torch", ".", "zeros", "(", "(", "num_N", ",", "padding_dim", ")", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "if", "args", ".", "dataset", "in", "{", "'ppi'", ",", "'cluster'", "}", ":", "\n", "                ", "val_data", ".", "x", "=", "torch", ".", "cat", "(", "[", "val_data", ".", "x", ",", "torch", ".", "zeros", "(", "(", "val_data", ".", "x", ".", "shape", "[", "0", "]", ",", "padding_dim", ")", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "test_data", ".", "x", "=", "torch", ".", "cat", "(", "[", "test_data", ".", "x", ",", "torch", ".", "zeros", "(", "(", "test_data", ".", "x", ".", "shape", "[", "0", "]", ",", "padding_dim", ")", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "", "if", "args", ".", "hidden_channels", "%", "args", ".", "num_D", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'Cannot fully split hidden features'", ")", "\n", "\n", "", "", "train_loader", "=", "OurDataLoader", "(", "data", ",", "gnn_type", "=", "args", ".", "conv_type", ",", "sampler_type", "=", "args", ".", "sampler_type", ",", "\n", "walk_length", "=", "args", ".", "walk_length", ",", "recovery_flag", "=", "args", ".", "recovery_flag", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "cont_sliding_window", "=", "args", ".", "cont_sliding_window", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "\n", "test_loader", "=", "OurDataLoader", "(", "data", ",", "gnn_type", "=", "args", ".", "conv_type", ",", "sampler_type", "=", "'node'", ",", "train_flag", "=", "False", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "\n", "if", "args", ".", "num_layers", "==", "1", ":", "\n", "        ", "model", "=", "LowRankGNN1Layer", "(", "data", ".", "num_features", ",", "args", ".", "hidden_channels", ",", "dataset", ".", "num_classes", ",", "\n", "args", ".", "num_layers", ",", "args", ".", "dropout", ",", "args", ".", "num_M", ",", "args", ".", "num_D", ",", "num_N", ",", "\n", "args", ".", "num_branch", ",", "args", ".", "cluster", ",", "args", ".", "ln_para", ",", "args", ".", "no_second_fc", ",", "\n", "args", ".", "kmeans_iter", ",", "args", ".", "EMA", ",", "args", ".", "split", ",", "args", ".", "kmeans_init", ",", "\n", "args", ".", "dropbranch", ",", "args", ".", "skip", ",", "args", ".", "use_gcn", ",", "args", ".", "commitment_cost", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "else", ":", "\n", "        ", "model", "=", "LowRankGNN", "(", "data", ".", "num_features", ",", "args", ".", "hidden_channels", ",", "dataset", ".", "num_classes", ",", "\n", "args", ".", "num_layers", ",", "args", ".", "dropout", ",", "args", ".", "num_M", ",", "args", ".", "num_D", ",", "num_N", ",", "\n", "args", ".", "num_branch", ",", "args", ".", "cluster", ",", "args", ".", "ln_para", ",", "args", ".", "no_second_fc", ",", "\n", "args", ".", "kmeans_iter", ",", "args", ".", "EMA", ",", "args", ".", "split", ",", "args", ".", "kmeans_init", ",", "\n", "args", ".", "dropbranch", ",", "args", ".", "skip", ",", "args", ".", "use_gcn", ",", "args", ".", "commitment_cost", ",", "\n", "args", ".", "grad_scale", ",", "args", ".", "act", ",", "args", ".", "weight_ahead", ",", "args", ".", "bn_flag", ",", "\n", "args", ".", "warm_up", ",", "args", ".", "momentum", ",", "args", ".", "conv_type", ",", "args", ".", "transformer_flag", ",", "\n", "args", ".", "alpha_dropout_flag", ")", ".", "to", "(", "device", ")", "\n", "\n", "\n", "", "for", "run", "in", "range", "(", "args", ".", "runs", ")", ":", "\n", "# exp_log_f = lambda x=None : exp_log(experiment, model, args.num_layers, args.num_D, args.num_M,", "\n", "#                                     args.use_gcn, args.conv_type)", "\n", "        ", "test_f", "=", "lambda", "x", "=", "None", ":", "test", "(", "model", ",", "data", ",", "device", ",", "test_loader", ",", "args", ".", "dataset", ",", "split_idx", ",", "evaluator", ")", "\n", "# model.reset_parameters()", "\n", "init", "(", "model", ",", "device", ",", "test_loader", ")", "\n", "print", "(", "'init done'", ")", "\n", "\n", "# optimizer = torch.optim.Adam(model.parameters(), lr=args.lr)", "\n", "# optimizer = torch.optim.Adam(model.parameters(), lr=args.lr, betas=(0.5, 0.999))", "\n", "optimizer", "=", "torch", ".", "optim", ".", "RMSprop", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "alpha", "=", "0.99", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "1", "+", "args", ".", "epochs", ")", ":", "\n", "            ", "if", "args", ".", "sche", ":", "\n", "                ", "for", "g", "in", "optimizer", ".", "param_groups", ":", "\n", "                    ", "g", "[", "'lr'", "]", "=", "args", ".", "lr", "*", "epoch", "/", "200", "if", "epoch", "<", "200", "else", "args", ".", "lr", "\n", "", "", "if", "args", ".", "warm_up", "and", "epoch", "<=", "args", ".", "warm_up_epochs", ":", "\n", "                ", "warm_up_rate", "=", "epoch", "/", "args", ".", "warm_up_epochs", "\n", "", "else", ":", "\n", "                ", "warm_up_rate", "=", "1", "\n", "\n", "", "start", "=", "time", ".", "time", "(", ")", "\n", "loss", ",", "loss_cls", ",", "batch_forward_time", ",", "batch_backward_time", "=", "train", "(", "model", ",", "data", ",", "args", ".", "batch_size", ",", "train_bool", ",", "optimizer", ",", "device", ",", "args", ".", "commitment_cost", ",", "\n", "args", ".", "use_gcn", ",", "warm_up_rate", ",", "args", ".", "ce_only", ",", "None", ",", "args", ".", "exp", ",", "args", ".", "conv_type", ",", "\n", "args", ".", "clip", ",", "args", ".", "num_layers", ",", "train_loader", ",", "test_f", ",", "None", ")", "\n", "\n", "# # loss, loss_cls, batch_forward_time, batch_backward_time = \\", "\n", "# #     separate_train(model, data, args.batch_size, train_bool, optimizer, device, args.commitment_cost,", "\n", "# #           args.use_gcn, warm_up_rate, args.ce_only, exp_log_f, args.exp, args.conv_type,", "\n", "# #           args.clip, args.num_layers, train_idx)", "\n", "\n", "if", "args", ".", "dataset", "not", "in", "{", "'ppi'", ",", "'cluster'", "}", ":", "\n", "                ", "elapsed", "=", "str", "(", "timedelta", "(", "seconds", "=", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "result", "=", "test", "(", "model", ",", "data", ",", "device", ",", "test_loader", ",", "args", ".", "dataset", ",", "split_idx", ",", "evaluator", ")", "\n", "\n", "elapsed_inference", "=", "str", "(", "timedelta", "(", "seconds", "=", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "print", "(", "f'Epoch time:{elapsed}, inference time:{elapsed_inference}, '", "\n", "f'batch_forward_time:{batch_forward_time:.2f}, '", "\n", "f'batch_backward_time:{batch_backward_time:.2f}'", ")", "\n", "", "else", ":", "\n", "                ", "datas", ",", "result", "=", "[", "data", ",", "val_data", ",", "test_data", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "datas", ")", ")", ":", "\n", "                    ", "result", ".", "append", "(", "test_inference", "(", "model", ",", "datas", "[", "i", "]", ",", "device", ")", ")", "\n", "", "logger", ".", "add_result", "(", "run", ",", "result", ")", "\n", "\n", "", "logger", ".", "add_result", "(", "run", ",", "result", ")", "\n", "if", "epoch", "%", "args", ".", "log_steps", "==", "0", ":", "\n", "                ", "train_acc", ",", "valid_acc", ",", "test_acc", "=", "result", "\n", "print", "(", "f'Run: {run + 1}, '", "\n", "f'Epoch: {epoch}, '", "\n", "f'Loss: {loss:.4f}, '", "\n", "f'Loss Cls: {loss_cls:.4f}, '", "\n", "f'Train: {100 * train_acc:.2f}%, '", "\n", "f'Valid: {100 * valid_acc:.2f}%, '", "\n", "f'Test: {100 * test_acc:.2f}%'", ")", "\n", "\n", "# if args.exp:", "\n", "#     experiment.log_metric('train_acc', train_acc)", "\n", "#     experiment.log_metric('valid_acc', valid_acc)", "\n", "#     experiment.log_metric('test_acc', test_acc)", "\n", "#     experiment.log_metric('train_loss', loss_cls)", "\n", "\n", "", "", "logger", ".", "print_statistics", "(", "run", ")", "\n", "", "logger", ".", "print_statistics", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.OurGCNConv.gcn_norm": [[47, 83], ["isinstance", "torch_sparse.sum", "torch_scatter.scatter_add.pow_", "torch_scatter.scatter_add.pow_.masked_fill_", "torch_sparse.mul", "torch_sparse.mul", "torch_geometric.utils.num_nodes.maybe_num_nodes", "torch_scatter.scatter_add", "torch_scatter.scatter_add.pow_", "torch_scatter.scatter_add.pow_.masked_fill_", "torch_sparse.fill_diag.has_value", "torch_sparse.fill_diag.fill_value", "torch_sparse.fill_diag", "torch_scatter.scatter_add.pow_.view", "torch_scatter.scatter_add.pow_.view", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "convs.OurGCNConv.", "float", "float", "edge_index.size"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.num_nodes.maybe_num_nodes"], ["    ", "def", "gcn_norm", "(", "edge_index", ",", "edge_weight", "=", "None", ",", "num_nodes", "=", "None", ",", "improved", "=", "False", ",", "\n", "add_self_loops", "=", "True", ",", "dtype", "=", "None", ")", ":", "\n", "\n", "        ", "fill_value", "=", "2.", "if", "improved", "else", "1.", "\n", "\n", "if", "isinstance", "(", "edge_index", ",", "SparseTensor", ")", ":", "\n", "            ", "adj_t", "=", "edge_index", "\n", "if", "not", "adj_t", ".", "has_value", "(", ")", ":", "\n", "                ", "adj_t", "=", "adj_t", ".", "fill_value", "(", "1.", ",", "dtype", "=", "dtype", ")", "\n", "", "if", "add_self_loops", ":", "\n", "                ", "adj_t", "=", "fill_diag", "(", "adj_t", ",", "fill_value", ")", "\n", "", "deg", "=", "sum", "(", "adj_t", ",", "dim", "=", "1", ")", "\n", "deg_inv_sqrt", "=", "deg", ".", "pow_", "(", "-", "0.5", ")", "\n", "deg_inv_sqrt", ".", "masked_fill_", "(", "deg_inv_sqrt", "==", "float", "(", "'inf'", ")", ",", "0.", ")", "\n", "adj_t", "=", "mul", "(", "adj_t", ",", "deg_inv_sqrt", ".", "view", "(", "-", "1", ",", "1", ")", ")", "\n", "adj_t", "=", "mul", "(", "adj_t", ",", "deg_inv_sqrt", ".", "view", "(", "1", ",", "-", "1", ")", ")", "\n", "return", "adj_t", "\n", "\n", "", "else", ":", "\n", "            ", "num_nodes", "=", "maybe_num_nodes", "(", "edge_index", ",", "num_nodes", ")", "\n", "\n", "if", "edge_weight", "is", "None", ":", "\n", "                ", "edge_weight", "=", "torch", ".", "ones", "(", "(", "edge_index", ".", "size", "(", "1", ")", ",", ")", ",", "dtype", "=", "dtype", ",", "\n", "device", "=", "edge_index", ".", "device", ")", "\n", "\n", "", "if", "add_self_loops", ":", "\n", "                ", "edge_index", ",", "tmp_edge_weight", "=", "add_remaining_self_loops", "(", "\n", "edge_index", ",", "edge_weight", ",", "fill_value", ",", "num_nodes", ")", "\n", "assert", "tmp_edge_weight", "is", "not", "None", "\n", "edge_weight", "=", "tmp_edge_weight", "\n", "\n", "", "row", ",", "col", "=", "edge_index", "[", "0", "]", ",", "edge_index", "[", "1", "]", "\n", "deg", "=", "scatter_add", "(", "edge_weight", ",", "col", ",", "dim", "=", "0", ",", "dim_size", "=", "num_nodes", ")", "\n", "deg_inv_sqrt", "=", "deg", ".", "pow_", "(", "-", "0.5", ")", "\n", "deg_inv_sqrt", ".", "masked_fill_", "(", "deg_inv_sqrt", "==", "float", "(", "'inf'", ")", ",", "0", ")", "\n", "return", "edge_index", ",", "deg_inv_sqrt", "[", "row", "]", "*", "edge_weight", "*", "deg_inv_sqrt", "[", "col", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.OurGCNConv.forward": [[84, 121], ["convs.OurGCNConv.propagate"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ",", "edge_index", ":", "Adj", ",", "\n", "edge_weight", ":", "OptTensor", "=", "None", ")", "->", "Tensor", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "\n", "# if self.normalize:", "\n", "#     if isinstance(edge_index, Tensor):", "\n", "#         cache = self._cached_edge_index", "\n", "#         if cache is None:", "\n", "#             edge_index, edge_weight = gcn_norm(  # yapf: disable", "\n", "#                 edge_index, edge_weight, x.size(self.node_dim),", "\n", "#                 self.improved, self.add_self_loops)", "\n", "#             if self.cached:", "\n", "#                 self._cached_edge_index = (edge_index, edge_weight)", "\n", "#         else:", "\n", "#             edge_index, edge_weight = cache[0], cache[1]", "\n", "#", "\n", "#     elif isinstance(edge_index, SparseTensor):", "\n", "#         cache = self._cached_adj_t", "\n", "#         if cache is None:", "\n", "#             edge_index = gcn_norm(  # yapf: disable", "\n", "#                 edge_index, edge_weight, x.size(self.node_dim),", "\n", "#                 self.improved, self.add_self_loops)", "\n", "#             if self.cached:", "\n", "#                 self._cached_adj_t = edge_index", "\n", "#         else:", "\n", "#             edge_index = cache", "\n", "\n", "# x = x @ self.weight", "\n", "\n", "# propagate_type: (x: Tensor, edge_weight: OptTensor)", "\n", "out", "=", "self", ".", "propagate", "(", "edge_index", ",", "x", "=", "x", ",", "edge_weight", "=", "edge_weight", ",", "\n", "size", "=", "None", ")", "\n", "\n", "# if self.bias is not None:", "\n", "#     out += self.bias", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.OurSAGEConv.forward": [[123, 141], ["isinstance", "convs.OurSAGEConv.propagate", "convs.OurSAGEConv.lin_r", "torch.normalize", "torch.normalize"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ":", "Union", "[", "Tensor", ",", "OptPairTensor", "]", ",", "edge_index", ":", "Adj", ",", "\n", "size", ":", "Size", "=", "None", ")", "->", "Tensor", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "if", "isinstance", "(", "x", ",", "Tensor", ")", ":", "\n", "            ", "x", ":", "OptPairTensor", "=", "(", "x", ",", "x", ")", "\n", "\n", "# propagate_type: (x: OptPairTensor)", "\n", "", "out", "=", "self", ".", "propagate", "(", "edge_index", ",", "x", "=", "x", ",", "size", "=", "size", ")", "\n", "# out = self.lin_l(out)", "\n", "\n", "x_r", "=", "x", "[", "1", "]", "\n", "if", "self", ".", "root_weight", "and", "x_r", "is", "not", "None", ":", "\n", "            ", "out", "+=", "self", ".", "lin_r", "(", "x_r", ")", "\n", "\n", "", "if", "self", ".", "normalize", ":", "\n", "            ", "out", "=", "F", ".", "normalize", "(", "out", ",", "p", "=", "2.", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.OurGATConv.__init__": [[145, 183], ["kwargs.setdefault", "torch_geometric.nn.GATConv.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "convs.OurGATConv.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.nn.Parameter", "torch.nn.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.nn.Parameter", "torch.nn.Parameter", "convs.OurGATConv.register_parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.dataloader.OurDataLoader.__init__", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_link.LinkPredictor.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ":", "Union", "[", "int", ",", "Tuple", "[", "int", ",", "int", "]", "]", ",", "\n", "out_channels", ":", "int", ",", "heads", ":", "int", "=", "1", ",", "concat", ":", "bool", "=", "True", ",", "\n", "negative_slope", ":", "float", "=", "0.2", ",", "dropout", ":", "float", "=", "0.0", ",", "\n", "add_self_loops", ":", "bool", "=", "True", ",", "bias", ":", "bool", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", ".", "setdefault", "(", "'aggr'", ",", "'add'", ")", "\n", "super", "(", "GATConv", ",", "self", ")", ".", "__init__", "(", "node_dim", "=", "0", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "heads", "=", "heads", "\n", "self", ".", "concat", "=", "concat", "\n", "self", ".", "negative_slope", "=", "negative_slope", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "add_self_loops", "=", "add_self_loops", "\n", "\n", "# if isinstance(in_channels, int):", "\n", "#     self.lin_l = Linear(in_channels, heads * out_channels, bias=False)", "\n", "#     self.lin_r = self.lin_l", "\n", "# else:", "\n", "#     self.lin_l = Linear(in_channels[0], heads * out_channels, False)", "\n", "#     self.lin_r = Linear(in_channels[1], heads * out_channels, False)", "\n", "\n", "self", ".", "att_l", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "heads", ",", "out_channels", ")", ")", "\n", "self", ".", "att_r", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "heads", ",", "out_channels", ")", ")", "\n", "\n", "# self.att_l = torch.nn.utils.spectral_norm(self.att_l)", "\n", "# self.att_r = torch.nn.utils.spectral_norm(self.att_r)", "\n", "\n", "if", "bias", "and", "concat", ":", "\n", "            ", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "heads", "*", "out_channels", ")", ")", "\n", "", "elif", "bias", "and", "not", "concat", ":", "\n", "            ", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "\n", "", "self", ".", "_alpha", "=", "None", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.OurGATConv.reset_parameters": [[184, 188], ["convs.glorot", "convs.glorot", "convs.zeros"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.glorot", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.glorot", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "glorot", "(", "self", ".", "att_l", ")", "\n", "glorot", "(", "self", ".", "att_r", ")", "\n", "zeros", "(", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.OurGATConv.forward": [[190, 277], ["isinstance", "convs.OurGATConv.propagate", "isinstance", "x.view", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "isinstance", "out.mean.mean.view", "out.mean.mean.mean", "isinstance", "x.dim", "x.view.size", "convs.OurGATConv.", "convs.OurGATConv.", "isinstance", "isinstance", "min", "min", "torch_sparse.set_diag", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "x.view.size", "torch_sparse.set_diag.set_value"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "Union", "[", "Tensor", ",", "OptPairTensor", "]", ",", "edge_index", ":", "Adj", ",", "\n", "size", ":", "Size", "=", "None", ",", "return_attention_weights", "=", "None", ")", ":", "\n", "# type: (Union[Tensor, OptPairTensor], Tensor, Size, NoneType) -> Tensor  # noqa", "\n", "# type: (Union[Tensor, OptPairTensor], SparseTensor, Size, NoneType) -> Tensor  # noqa", "\n", "# type: (Union[Tensor, OptPairTensor], Tensor, Size, bool) -> Tuple[Tensor, Tuple[Tensor, Tensor]]  # noqa", "\n", "# type: (Union[Tensor, OptPairTensor], SparseTensor, Size, bool) -> Tuple[Tensor, SparseTensor]  # noqa", "\n", "        ", "r\"\"\"\n        Args:\n            return_attention_weights (bool, optional): If set to :obj:`True`,\n                will additionally return the tuple\n                :obj:`(edge_index, attention_weights)`, holding the computed\n                attention weights for each edge. (default: :obj:`None`)\n        \"\"\"", "\n", "H", ",", "C", "=", "self", ".", "heads", ",", "self", ".", "out_channels", "\n", "\n", "x_l", ":", "OptTensor", "=", "None", "\n", "x_r", ":", "OptTensor", "=", "None", "\n", "alpha_l", ":", "OptTensor", "=", "None", "\n", "alpha_r", ":", "OptTensor", "=", "None", "\n", "if", "isinstance", "(", "x", ",", "Tensor", ")", ":", "\n", "            ", "assert", "x", ".", "dim", "(", ")", "==", "2", ",", "'Static graphs not supported in `GATConv`.'", "\n", "# x_l = x_r = self.lin_l(x).view(-1, H, C)", "\n", "\n", "x_l", "=", "x_r", "=", "x", ".", "view", "(", "-", "1", ",", "H", ",", "C", ")", "\n", "alpha_l", "=", "(", "x_l", "*", "self", ".", "att_l", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "alpha_r", "=", "(", "x_r", "*", "self", ".", "att_r", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "\n", "# alpha_l = (x_l[:, :, :-1] * self.att_l[:, :, :-1]).sum(dim=-1)", "\n", "# alpha_r = (x_r[:, :, :-1] * self.att_r[:, :, :-1]).sum(dim=-1)", "\n", "", "else", ":", "\n", "# x_l, x_r = x[0], x[1]", "\n", "# assert x[0].dim() == 2, 'Static graphs not supported in `GATConv`.'", "\n", "#", "\n", "# x_l = self.lin_l(x_l).view(-1, H, C)", "\n", "#", "\n", "# alpha_l = (x_l * self.att_l).sum(dim=-1)", "\n", "# if x_r is not None:", "\n", "#     x_r = self.lin_r(x_r).view(-1, H, C)", "\n", "#     alpha_r = (x_r * self.att_r).sum(dim=-1)", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "assert", "x_l", "is", "not", "None", "\n", "assert", "alpha_l", "is", "not", "None", "\n", "\n", "# Trick 1", "\n", "scale", "=", "torch", ".", "sqrt", "(", "torch", ".", "max", "(", "alpha_l", ")", "**", "2", "+", "1", ")", "*", "torch", ".", "sqrt", "(", "torch", ".", "max", "(", "alpha_r", ")", "**", "2", "+", "1", ")", "\n", "alpha_l", "=", "alpha_l", "/", "scale", "\n", "alpha_r", "=", "alpha_r", "/", "scale", "\n", "\n", "# pdb.set_trace()", "\n", "\n", "\n", "if", "self", ".", "add_self_loops", ":", "\n", "            ", "if", "isinstance", "(", "edge_index", ",", "Tensor", ")", ":", "\n", "                ", "num_nodes", "=", "x_l", ".", "size", "(", "0", ")", "\n", "if", "x_r", "is", "not", "None", ":", "\n", "                    ", "num_nodes", "=", "min", "(", "num_nodes", ",", "x_r", ".", "size", "(", "0", ")", ")", "\n", "", "if", "size", "is", "not", "None", ":", "\n", "                    ", "num_nodes", "=", "min", "(", "size", "[", "0", "]", ",", "size", "[", "1", "]", ")", "\n", "", "edge_index", ",", "_", "=", "remove_self_loops", "(", "edge_index", ")", "\n", "edge_index", ",", "_", "=", "add_self_loops", "(", "edge_index", ",", "num_nodes", "=", "num_nodes", ")", "\n", "", "elif", "isinstance", "(", "edge_index", ",", "SparseTensor", ")", ":", "\n", "                ", "edge_index", "=", "set_diag", "(", "edge_index", ")", "\n", "\n", "# propagate_type: (x: OptPairTensor, alpha: OptPairTensor)", "\n", "", "", "out", "=", "self", ".", "propagate", "(", "edge_index", ",", "x", "=", "(", "x_l", ",", "x_r", ")", ",", "\n", "alpha", "=", "(", "alpha_l", ",", "alpha_r", ")", ",", "size", "=", "size", ")", "\n", "\n", "alpha", "=", "self", ".", "_alpha", "\n", "self", ".", "_alpha", "=", "None", "\n", "\n", "if", "self", ".", "concat", ":", "\n", "            ", "out", "=", "out", ".", "view", "(", "-", "1", ",", "self", ".", "heads", "*", "self", ".", "out_channels", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "out", ".", "mean", "(", "dim", "=", "1", ")", "\n", "\n", "", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "out", "+=", "self", ".", "bias", "\n", "\n", "", "if", "isinstance", "(", "return_attention_weights", ",", "bool", ")", ":", "\n", "            ", "assert", "alpha", "is", "not", "None", "\n", "if", "isinstance", "(", "edge_index", ",", "Tensor", ")", ":", "\n", "                ", "return", "out", ",", "(", "edge_index", ",", "alpha", ")", "\n", "", "elif", "isinstance", "(", "edge_index", ",", "SparseTensor", ")", ":", "\n", "                ", "return", "out", ",", "edge_index", ".", "set_value", "(", "alpha", ",", "layout", "=", "'coo'", ")", "\n", "", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.OurGATConv.message": [[278, 294], ["torch.leaky_relu", "torch.leaky_relu", "utils.vq_softmax.vq_softmax", "torch.dropout", "torch.dropout", "edge_weight.unsqueeze", "torch.dropout.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.vq_softmax.vq_softmax"], ["", "", "def", "message", "(", "self", ",", "x_j", ":", "Tensor", ",", "alpha_j", ":", "Tensor", ",", "alpha_i", ":", "OptTensor", ",", "\n", "index", ":", "Tensor", ",", "ptr", ":", "OptTensor", ",", "size_i", ":", "Optional", "[", "int", "]", ",", "\n", "edge_weight", ":", "OptTensor", ")", "->", "Tensor", ":", "\n", "\n", "\n", "        ", "alpha", "=", "alpha_j", "if", "alpha_i", "is", "None", "else", "alpha_j", "+", "alpha_i", "\n", "alpha", "=", "F", ".", "leaky_relu", "(", "alpha", ",", "self", ".", "negative_slope", ")", "\n", "alpha", "=", "vq_softmax", "(", "alpha", ",", "index", ",", "ptr", ",", "size_i", ")", "\n", "\n", "self", ".", "_alpha", "=", "alpha", "\n", "alpha", "=", "F", ".", "dropout", "(", "alpha", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "# Trick 2", "\n", "alpha", "=", "alpha", "*", "edge_weight", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "return", "x_j", "*", "alpha", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.Transformer.__init__": [[297, 300], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.dataloader.OurDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_D", ")", ":", "\n", "        ", "super", "(", "Transformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_D", "=", "num_D", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.Transformer.forward": [[301, 315], ["torch.max", "torch.max", "torch.max", "torch.max", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "math.sqrt", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "X_bar.t", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.exp.t", "torch.exp.t", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.exp.t", "torch.exp.t"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X_B", ",", "X_bar", ")", ":", "\n", "\n", "        ", "C_BM", "=", "torch", ".", "mm", "(", "X_B", ",", "X_bar", ".", "t", "(", ")", ")", "/", "math", ".", "sqrt", "(", "self", ".", "num_D", ")", "\n", "# c_max = torch.max(C_BM)", "\n", "\n", "c_max", "=", "torch", ".", "max", "(", "torch", ".", "sum", "(", "torch", ".", "cat", "(", "[", "X_B", ",", "X_bar", "]", ",", "dim", "=", "0", ")", "**", "2", ",", "dim", "=", "1", ")", ")", "\n", "C_BM", "=", "C_BM", "/", "c_max", "\n", "C_BM", "=", "torch", ".", "exp", "(", "C_BM", ")", "\n", "\n", "# trick2", "\n", "X_B_output", "=", "torch", ".", "mm", "(", "C_BM", "/", "torch", ".", "sum", "(", "C_BM", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ",", "X_bar", ")", "\n", "X_bar_output", "=", "torch", ".", "mm", "(", "C_BM", ".", "t", "(", ")", "/", "torch", ".", "sum", "(", "C_BM", ".", "t", "(", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ",", "X_B", ")", "\n", "\n", "return", "torch", ".", "cat", "(", "[", "X_B_output", ",", "X_bar_output", "]", ",", "dim", "=", "0", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.constant": [[25, 33], ["isinstance", "value.data.fill_", "hasattr", "value.parameters", "convs.constant", "hasattr", "value.buffers", "convs.constant"], "function", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.constant", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.constant"], ["def", "constant", "(", "value", ":", "Any", ",", "fill_value", ":", "float", ")", ":", "\n", "    ", "if", "isinstance", "(", "value", ",", "Tensor", ")", ":", "\n", "        ", "value", ".", "data", ".", "fill_", "(", "fill_value", ")", "\n", "", "else", ":", "\n", "        ", "for", "v", "in", "value", ".", "parameters", "(", ")", "if", "hasattr", "(", "value", ",", "'parameters'", ")", "else", "[", "]", ":", "\n", "            ", "constant", "(", "v", ",", "fill_value", ")", "\n", "", "for", "v", "in", "value", ".", "buffers", "(", ")", "if", "hasattr", "(", "value", ",", "'buffers'", ")", "else", "[", "]", ":", "\n", "            ", "constant", "(", "v", ",", "fill_value", ")", "\n", "", "", "", "def", "glorot", "(", "value", ":", "Any", ")", ":", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.glorot": [[33, 42], ["isinstance", "math.sqrt", "value.data.uniform_", "hasattr", "value.parameters", "convs.glorot", "hasattr", "value.buffers", "convs.glorot", "value.size", "value.size"], "function", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.glorot", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.glorot"], ["", "", "", "def", "glorot", "(", "value", ":", "Any", ")", ":", "\n", "    ", "if", "isinstance", "(", "value", ",", "Tensor", ")", ":", "\n", "        ", "stdv", "=", "math", ".", "sqrt", "(", "6.0", "/", "(", "value", ".", "size", "(", "-", "2", ")", "+", "value", ".", "size", "(", "-", "1", ")", ")", ")", "\n", "value", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "", "else", ":", "\n", "        ", "for", "v", "in", "value", ".", "parameters", "(", ")", "if", "hasattr", "(", "value", ",", "'parameters'", ")", "else", "[", "]", ":", "\n", "            ", "glorot", "(", "v", ")", "\n", "", "for", "v", "in", "value", ".", "buffers", "(", ")", "if", "hasattr", "(", "value", ",", "'buffers'", ")", "else", "[", "]", ":", "\n", "            ", "glorot", "(", "v", ")", "\n", "", "", "", "def", "zeros", "(", "value", ":", "Any", ")", ":", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros": [[42, 44], ["convs.constant"], "function", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.constant"], ["", "", "", "def", "zeros", "(", "value", ":", "Any", ")", ":", "\n", "    ", "constant", "(", "value", ",", "0.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.models_inductive.LowRankGNNBlock.__init__": [[24, 74], ["super().__init__", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "models_inductive.LowRankGNNBlock.register_buffer", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "models_inductive.LowRankGNNBlock.register_buffer", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "models_inductive.LowRankGNNBlock.register_buffer", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "convs.Transformer", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "vq.VectorQuantizerEMA", "ValueError", "convs.OurGCNConv", "convs.OurGATConv"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.dataloader.OurDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "hidden_channels", ",", "num_M", ",", "num_D", ",", "num_N", ",", "num_branch", ",", "cluster", ",", "kmeans_iter", ",", "\n", "EMA_flag", ",", "kmeans_init", ",", "use_gcn", ",", "commitment_cost", ",", "grad_normalize_scale", ",", "hook_flag", ",", "warm_up_flag", ",", "\n", "momentum", ",", "conv_type", ",", "transformer_flag", ",", "val_num_N", "=", "0", ",", "test_num_N", "=", "0", ")", ":", "\n", "        ", "super", "(", "LowRankGNNBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_M", ",", "self", ".", "num_D", ",", "self", ".", "num_N", ",", "self", ".", "EMA_flag", "=", "num_M", ",", "num_D", ",", "num_N", ",", "EMA_flag", "\n", "self", ".", "commitment_cost", "=", "commitment_cost", "\n", "self", ".", "hook_flag", "=", "hook_flag", "\n", "self", ".", "grad_normalize_scale", "=", "grad_normalize_scale", "\n", "self", ".", "conv_type", "=", "conv_type", "\n", "self", ".", "transformer_flag", "=", "transformer_flag", "\n", "\n", "# C init", "\n", "# c1 = -torch.ones(num_N, dtype=torch.long)", "\n", "# c = torch.randint(0, self.num_M, (self.num_N,), dtype=torch.long)", "\n", "c", "=", "torch", ".", "randint", "(", "0", ",", "self", ".", "num_M", ",", "(", "self", ".", "num_N", ",", ")", ",", "dtype", "=", "torch", ".", "short", ")", "\n", "self", ".", "register_buffer", "(", "'c_indices'", ",", "c", ")", "\n", "\n", "\n", "self", ".", "val_num_N", ",", "self", ".", "test_num_N", "=", "val_num_N", ",", "test_num_N", "\n", "c", "=", "torch", ".", "randint", "(", "0", ",", "self", ".", "num_M", ",", "(", "self", ".", "val_num_N", ",", ")", ",", "dtype", "=", "torch", ".", "short", ")", "\n", "self", ".", "register_buffer", "(", "'c_indices_val'", ",", "c", ")", "\n", "c", "=", "torch", ".", "randint", "(", "0", ",", "self", ".", "num_M", ",", "(", "self", ".", "test_num_N", ",", ")", ",", "dtype", "=", "torch", ".", "short", ")", "\n", "self", ".", "register_buffer", "(", "'c_indices_test'", ",", "c", ")", "\n", "\n", "\n", "if", "self", ".", "transformer_flag", ":", "\n", "            ", "self", ".", "conv", "=", "Transformer", "(", "self", ".", "num_D", "+", "1", ")", "\n", "self", ".", "transformer_k", "=", "torch", ".", "nn", ".", "Linear", "(", "num_D", ",", "num_D", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "conv_type", "!=", "'GAT'", ":", "\n", "                ", "self", ".", "conv", "=", "OurGCNConv", "(", "in_channels", ",", "in_channels", ",", "normalize", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "conv", "=", "OurGATConv", "(", "in_channels", "+", "1", ",", "in_channels", "+", "1", ",", "bias", "=", "False", ",", "add_self_loops", "=", "False", ")", "\n", "\n", "", "", "if", "EMA_flag", ":", "\n", "# self.emb = NearestEmbedEMA(self.num_M, self.num_D)", "\n", "            ", "add_flag", "=", "True", "if", "self", ".", "transformer_flag", "or", "self", ".", "conv_type", "==", "'GAT'", "else", "False", "\n", "self", ".", "vq", "=", "VectorQuantizerEMA", "(", "self", ".", "num_M", ",", "self", ".", "num_D", ",", "commitment_cost", "=", "self", ".", "commitment_cost", ",", "\n", "grad_normalize_scale", "=", "grad_normalize_scale", ",", "warm_up_flag", "=", "warm_up_flag", ",", "\n", "momentum", "=", "momentum", ",", "add_flag", "=", "add_flag", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Not EMA vq not studied'", ")", "\n", "# self.vq = VectorQuantizer(self.num_M, self.num_D, commitment_cost=self.commitment_cost)", "\n", "\n", "", "self", ".", "kmeans_init", "=", "kmeans_init", "\n", "self", ".", "grad_kmeans_init", "=", "kmeans_init", "\n", "self", ".", "inited", "=", "False", "\n", "\n", "self", ".", "ln", "=", "torch", ".", "nn", ".", "LayerNorm", "(", "in_channels", ",", "elementwise_affine", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.models_inductive.LowRankGNNBlock.reset_parameters": [[76, 78], ["models_inductive.LowRankGNNBlock.conv.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_link.LinkPredictor.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.models_inductive.LowRankGNNBlock.hook": [[79, 134], ["sklearn.cluster.MiniBatchKMeans().fit", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "models_inductive.LowRankGNNBlock.vq.kmeans_init", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "models_inductive.LowRankGNNBlock.vq.update", "encoding_indices.squeeze().to", "range", "encoding_indices.squeeze().to", "torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean().item", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models_inductive.LowRankGNNBlock.vq.update", "sklearn.cluster.MiniBatchKMeans", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "encoding_indices.squeeze", "encoding_indices.squeeze", "models_inductive.LowRankGNNBlock.vq.get_grad", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "models_inductive.LowRankGNNBlock.vq.get_codebook", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "encoding_indices.squeeze", "encoding_indices.squeeze", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizerEMA.kmeans_init", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizerEMA.update", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizerEMA.update", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizerEMA.get_grad", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizerEMA.get_codebook"], ["", "def", "hook", "(", "self", ",", "grad", ")", ":", "\n", "# grad_use = grad[:, :self.num_D]", "\n", "        ", "grad_use", "=", "grad", "\n", "\n", "if", "self", ".", "grad_kmeans_init", ":", "\n", "            ", "X_B_cpu", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "self", ".", "X_B", ".", "shape", "[", "1", "]", ",", "affine", "=", "False", ",", "track_running_stats", "=", "False", ")", "(", "self", ".", "X_B", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "grad_cpu", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "grad_use", ".", "shape", "[", "1", "]", ",", "affine", "=", "False", ",", "track_running_stats", "=", "False", ",", "eps", "=", "1e-24", ")", "(", "grad_use", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "# reassignment_ratio=0.01", "\n", "k_obj", "=", "MiniBatchKMeans", "(", "n_clusters", "=", "self", ".", "num_M", ",", "init", "=", "'k-means++'", ",", "batch_size", "=", "400", ",", "n_init", "=", "10", ",", "\n", "init_size", "=", "4000", ",", "reassignment_ratio", "=", "0.3", ")", ".", "fit", "(", "\n", "torch", ".", "cat", "(", "[", "X_B_cpu", ",", "grad_cpu", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "k_centroids", "=", "torch", ".", "tensor", "(", "k_obj", ".", "cluster_centers_", ",", "dtype", "=", "torch", ".", "float", ")", ".", "to", "(", "self", ".", "X_B", ".", "device", ")", "\n", "k_counts", "=", "torch", ".", "tensor", "(", "k_obj", ".", "counts_", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "self", ".", "X_B", ".", "device", ")", "\n", "\n", "self", ".", "vq", ".", "kmeans_init", "(", "k_centroids", ",", "k_counts", ")", "\n", "self", ".", "c_indices", "=", "-", "1", "\n", "self", ".", "c_indices", "[", "self", ".", "batch_indices", "]", "=", "torch", ".", "tensor", "(", "k_obj", ".", "labels_", ",", "dtype", "=", "torch", ".", "short", ")", ".", "to", "(", "self", ".", "X_B", ".", "device", ")", "\n", "self", ".", "grad_kmeans_init", "=", "False", "\n", "\n", "# to reset X_output", "\n", "encoding_indices", ",", "encodings", "=", "self", ".", "vq", ".", "update", "(", "self", ".", "X_B", ",", "grad_use", ")", "\n", "self", ".", "c_indices", "[", "self", ".", "batch_indices", "]", "=", "encoding_indices", ".", "squeeze", "(", ")", ".", "to", "(", "torch", ".", "short", ")", "\n", "\n", "", "else", ":", "\n", "# grad_before = self.vq.get_grad()[self.c_indices[self.batch_indices].to(torch.long)]", "\n", "# grad_diff_before = grad_before - grad", "\n", "# self.grad_error_before = torch.norm(grad_diff_before, dim=1).mean().item()", "\n", "\n", "            ", "vq_steps", "=", "1", "\n", "for", "_", "in", "range", "(", "vq_steps", ")", ":", "\n", "                ", "encoding_indices", ",", "encodings", "=", "self", ".", "vq", ".", "update", "(", "self", ".", "X_B", ",", "grad_use", ")", "\n", "\n", "", "self", ".", "c_indices", "[", "self", ".", "batch_indices", "]", "=", "encoding_indices", ".", "squeeze", "(", ")", ".", "to", "(", "torch", ".", "short", ")", "\n", "\n", "grad_diff", "=", "grad_use", "-", "self", ".", "vq", ".", "get_grad", "(", ")", "[", "encoding_indices", ".", "squeeze", "(", ")", "]", "\n", "self", ".", "grad_error_after", "=", "torch", ".", "norm", "(", "grad_diff", ",", "dim", "=", "1", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "grad_norm", "=", "torch", ".", "norm", "(", "grad_use", ",", "dim", "=", "1", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n", "# grad_error_by_cluster = (encodings / (1e-6 + encodings.sum(dim=0, keepdim=True))).t() @ \\", "\n", "#                         (torch.norm(grad_diff,dim=1)/torch.norm(grad,dim=1)).unsqueeze(1)", "\n", "# self.grad_error_by_cluster = grad_error_by_cluster.squeeze()", "\n", "\n", "\n", "X_B_diff", "=", "self", ".", "X_B", "-", "self", ".", "vq", ".", "get_codebook", "(", ")", "[", "encoding_indices", ".", "squeeze", "(", ")", "]", "\n", "self", ".", "vq_backward_error", "=", "torch", ".", "norm", "(", "X_B_diff", ",", "dim", "=", "1", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n", "# feat_error_by_cluster = (encodings / (1e-6 + encodings.sum(dim=0, keepdim=True))).t() @ \\", "\n", "#                         (torch.norm(X_B_diff,dim=1)/torch.norm(self.X_B,dim=1)).unsqueeze(1)", "\n", "# self.feat_error_by_cluster = feat_error_by_cluster.squeeze()", "\n", "\n", "", "return", "grad", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.models_inductive.LowRankGNNBlock.M_hook": [[135, 137], ["torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "M_hook", "(", "self", ",", "grad", ")", ":", "\n", "        ", "self", ".", "M_grad_norm", "=", "torch", ".", "norm", "(", "grad", ",", "dim", "=", "1", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.models_inductive.LowRankGNNBlock.ln_hook": [[138, 140], ["torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "ln_hook", "(", "self", ",", "grad", ")", ":", "\n", "        ", "self", ".", "ln_grad_norm", "=", "torch", ".", "norm", "(", "grad", ",", "dim", "=", "1", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.models_inductive.LowRankGNNBlock.X_B_hook": [[141, 143], ["torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "X_B_hook", "(", "self", ",", "grad", ")", ":", "\n", "        ", "self", ".", "X_B_grad_norm", "=", "torch", ".", "norm", "(", "grad", ",", "dim", "=", "1", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.models_inductive.LowRankGNNBlock.X_bar_hook": [[144, 146], ["torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "X_bar_hook", "(", "self", ",", "grad", ")", ":", "\n", "        ", "self", ".", "X_bar_grad_norm", "=", "torch", ".", "norm", "(", "grad", ",", "dim", "=", "1", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.models_inductive.LowRankGNNBlock.init": [[147, 150], ["models_inductive.LowRankGNNBlock.vq.feature_update", "models_inductive.LowRankGNNBlock.squeeze().to", "models_inductive.LowRankGNNBlock.squeeze"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizerEMA.feature_update"], ["", "def", "init", "(", "self", ",", "X_B", ",", "batch_indices", ")", ":", "\n", "        ", "encoding_indices", "=", "self", ".", "vq", ".", "feature_update", "(", "X_B", ")", "\n", "self", ".", "c_indices", "[", "batch_indices", "]", "=", "encoding_indices", ".", "squeeze", "(", ")", ".", "to", "(", "torch", ".", "short", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.models_inductive.LowRankGNNBlock.forward": [[151, 241], ["X_B.detach", "models_inductive.LowRankGNNBlock.vq.get_codebook", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "utils.dataloader.mapper", "models_inductive.LowRankGNNBlock.ln", "models_inductive.LowRankGNNBlock.transformer_k", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models_inductive.LowRankGNNBlock.conv", "models_inductive.LowRankGNNBlock.conv", "X_output_B.requires_grad_", "X_output_B.register_hook", "torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean().item", "sklearn.cluster.MiniBatchKMeans().fit", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "models_inductive.LowRankGNNBlock.vq.feature_kmeans_init", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "models_inductive.LowRankGNNBlock.init", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "X_output_B[].unsqueeze", "models_inductive.LowRankGNNBlock.vq.get_grad", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "sklearn.cluster.MiniBatchKMeans", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizerEMA.get_codebook", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.dataloader.mapper", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizerEMA.feature_kmeans_init", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_link.init", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizerEMA.get_grad"], ["", "def", "forward", "(", "self", ",", "X_B", ",", "batch_A", ",", "warm_up_rate", ",", "unlabeled", ")", ":", "\n", "        ", "self", ".", "X_B", "=", "X_B", ".", "detach", "(", ")", "\n", "self", ".", "batch_indices", "=", "batch_indices", "=", "batch_A", "[", "-", "1", "]", "\n", "\n", "if", "self", ".", "training", ":", "# init", "\n", "            ", "if", "self", ".", "kmeans_init", ":", "# reassignment_ratio=0.01, batch_size=400, n_init=10,", "\n", "                ", "k_obj", "=", "MiniBatchKMeans", "(", "n_clusters", "=", "self", ".", "num_M", ",", "init", "=", "'k-means++'", ",", "batch_size", "=", "400", ",", "n_init", "=", "10", ",", "\n", "init_size", "=", "4000", ",", "reassignment_ratio", "=", "0.3", ")", ".", "fit", "(", "\n", "torch", ".", "nn", ".", "BatchNorm1d", "(", "X_B", ".", "shape", "[", "1", "]", ",", "affine", "=", "False", ",", "track_running_stats", "=", "False", ")", "(", "X_B", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "k_centroids", "=", "torch", ".", "tensor", "(", "k_obj", ".", "cluster_centers_", ",", "dtype", "=", "torch", ".", "float", ")", ".", "to", "(", "X_B", ".", "device", ")", "\n", "k_counts", "=", "torch", ".", "tensor", "(", "k_obj", ".", "counts_", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "X_B", ".", "device", ")", "\n", "\n", "# print(f'min:{torch.min(k_counts)}')", "\n", "\n", "self", ".", "vq", ".", "feature_kmeans_init", "(", "k_centroids", ",", "k_counts", ")", "\n", "self", ".", "c_indices", "[", "batch_indices", "]", "=", "torch", ".", "tensor", "(", "k_obj", ".", "labels_", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "X_B", ".", "device", ")", "\n", "self", ".", "kmeans_init", "=", "False", "\n", "\n", "", "elif", "not", "self", ".", "inited", "or", "unlabeled", ":", "\n", "                ", "self", ".", "init", "(", "X_B", ",", "batch_indices", ")", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "\n", "", "", "adj_input", "=", "None", "\n", "if", "self", ".", "transformer_flag", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "adj_input", "=", "mapper", "(", "batch_A", ",", "self", ".", "c_indices", ",", "self", ".", "num_M", ",", "self", ".", "conv_type", ",", "X_B", ".", "device", ")", "\n", "\n", "\n", "", "X_bar", "=", "self", ".", "vq", ".", "get_codebook", "(", ")", "\n", "\n", "# X_B.requires_grad_()", "\n", "# X_B.register_hook(self.X_B_hook)", "\n", "# X_bar.requires_grad_()", "\n", "# X_bar.register_hook(self.X_bar_hook)", "\n", "\n", "\n", "X_input", "=", "torch", ".", "cat", "(", "[", "X_B", ",", "X_bar", "*", "warm_up_rate", "]", ",", "dim", "=", "0", ")", "\n", "\n", "# projection before transformer", "\n", "if", "self", ".", "transformer_flag", ":", "\n", "            ", "X_input", "=", "self", ".", "ln", "(", "X_input", ")", "\n", "X_input", "=", "self", ".", "transformer_k", "(", "X_input", ")", "\n", "\n", "", "if", "self", ".", "transformer_flag", "or", "self", ".", "conv_type", "==", "'GAT'", ":", "# X_input cat tensor.ones", "\n", "            ", "X_input", "=", "torch", ".", "cat", "(", "[", "X_input", ",", "torch", ".", "ones", "(", "X_input", ".", "shape", "[", "0", "]", ",", "1", ")", ".", "to", "(", "X_input", ".", "device", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# Conv", "\n", "", "if", "self", ".", "transformer_flag", ":", "\n", "            ", "X_output", "=", "self", ".", "conv", "(", "X_input", "[", ":", "X_B", ".", "shape", "[", "0", "]", "]", ",", "X_input", "[", "X_B", ".", "shape", "[", "0", "]", ":", "]", ")", "\n", "", "else", ":", "\n", "            ", "X_output", "=", "self", ".", "conv", "(", "X_input", ",", "adj_input", ")", "\n", "\n", "", "X_output_B", ",", "X_output_M", "=", "X_output", "[", ":", "X_B", ".", "shape", "[", "0", "]", "]", ",", "X_output", "[", "X_B", ".", "shape", "[", "0", "]", ":", "]", "\n", "\n", "if", "self", ".", "inited", "and", "self", ".", "hook_flag", "and", "self", ".", "training", "and", "not", "unlabeled", ":", "\n", "# X_output.requires_grad_()", "\n", "\n", "            ", "X_output_B", ".", "requires_grad_", "(", ")", "\n", "X_output_B", ".", "register_hook", "(", "self", ".", "hook", ")", "\n", "\n", "# X_output_M.requires_grad_()", "\n", "# X_output_M.register_hook(self.M_hook)", "\n", "\n", "\n", "", "if", "self", ".", "transformer_flag", "or", "self", ".", "conv_type", "==", "'GAT'", ":", "#use the added one dim to normalize X_out_B", "\n", "            ", "X_output_B", "=", "X_output_B", "[", ":", ",", ":", "self", ".", "num_D", "]", "/", "(", "X_output_B", "[", ":", ",", "self", ".", "num_D", "]", ".", "unsqueeze", "(", "1", ")", "+", "1e-16", ")", "\n", "\n", "# X_output_B_ln = self.ln(X_output_B)", "\n", "", "X_output_B_ln", "=", "X_output_B", "\n", "\n", "# if self.inited and self.hook_flag and self.training and not unlabeled:", "\n", "#     X_output_B_ln.register_hook(self.ln_hook)", "\n", "\n", "# quantized = X_bar[self.c_indices[batch_indices].to(torch.long)]", "\n", "# commit_loss = self.commitment_cost*F.mse_loss(X_B, quantized)", "\n", "commit_loss", "=", "0", "\n", "\n", "# info_backward = torch.sum(X_output_M[:, :self.num_D] * self.vq.get_grad())", "\n", "info_backward", "=", "torch", ".", "sum", "(", "X_output_M", "*", "self", ".", "vq", ".", "get_grad", "(", ")", "*", "warm_up_rate", ")", "\n", "\n", "# self.vq_get_grad_norm = torch.norm(self.vq.get_grad(), dim=1).mean().item()", "\n", "# statistics record", "\n", "# error = torch.norm(quantized-X_B, dim=1).mean().item()", "\n", "# quantized_norm = torch.norm(quantized, dim=1).mean().item()", "\n", "error", "=", "quantized_norm", "=", "0", "\n", "\n", "return", "X_output_B_ln", ",", "error", ",", "torch", ".", "norm", "(", "X_B", ",", "dim", "=", "1", ")", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "quantized_norm", ",", "commit_loss", ",", "info_backward", ",", "X_B", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.models_inductive.LowRankGNNBlock.inference": [[242, 293], ["X_B.detach", "models_inductive.LowRankGNNBlock.vq.feature_update", "models_inductive.LowRankGNNBlock.vq.get_codebook", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "models_inductive.LowRankGNNBlock.squeeze().to", "utils.dataloader.mapper", "models_inductive.LowRankGNNBlock.ln", "models_inductive.LowRankGNNBlock.transformer_k", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models_inductive.LowRankGNNBlock.conv", "models_inductive.LowRankGNNBlock.conv", "X_output_B.requires_grad_", "X_output_B.register_hook", "torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean().item", "models_inductive.LowRankGNNBlock.squeeze().to", "ValueError", "models_inductive.LowRankGNNBlock.squeeze", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "X_output_B[].unsqueeze", "models_inductive.LowRankGNNBlock.vq.get_grad", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "models_inductive.LowRankGNNBlock.squeeze", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizerEMA.feature_update", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizerEMA.get_codebook", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.dataloader.mapper", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizerEMA.get_grad"], ["", "def", "inference", "(", "self", ",", "X_B", ",", "batch_A", ",", "warm_up_rate", ",", "unlabeled", ",", "infer", ")", ":", "\n", "        ", "self", ".", "X_B", "=", "X_B", ".", "detach", "(", ")", "\n", "self", ".", "batch_indices", "=", "batch_indices", "=", "batch_A", "[", "-", "1", "]", "\n", "\n", "encoding_indices", "=", "self", ".", "vq", ".", "feature_update", "(", "self", ".", "X_B", ")", "\n", "if", "infer", "==", "'val'", ":", "\n", "            ", "self", ".", "c_indices_val", "[", "self", ".", "batch_indices", "]", "=", "encoding_indices", ".", "squeeze", "(", ")", ".", "to", "(", "torch", ".", "short", ")", "\n", "c_indices", "=", "self", ".", "c_indices_val", "\n", "", "elif", "infer", "==", "'test'", ":", "\n", "            ", "self", ".", "c_indices_test", "[", "self", ".", "batch_indices", "]", "=", "encoding_indices", ".", "squeeze", "(", ")", ".", "to", "(", "torch", ".", "short", ")", "\n", "c_indices", "=", "self", ".", "c_indices_test", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'val or test'", ")", "\n", "\n", "", "adj_input", "=", "None", "\n", "if", "self", ".", "transformer_flag", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "adj_input", "=", "mapper", "(", "batch_A", ",", "c_indices", ",", "self", ".", "num_M", ",", "self", ".", "conv_type", ",", "X_B", ".", "device", ")", "\n", "", "X_bar", "=", "self", ".", "vq", ".", "get_codebook", "(", ")", "\n", "X_input", "=", "torch", ".", "cat", "(", "[", "X_B", ",", "X_bar", "*", "warm_up_rate", "]", ",", "dim", "=", "0", ")", "\n", "\n", "# projection before transformer", "\n", "if", "self", ".", "transformer_flag", ":", "\n", "            ", "X_input", "=", "self", ".", "ln", "(", "X_input", ")", "\n", "X_input", "=", "self", ".", "transformer_k", "(", "X_input", ")", "\n", "\n", "", "if", "self", ".", "transformer_flag", "or", "self", ".", "conv_type", "==", "'GAT'", ":", "# X_input cat tensor.ones", "\n", "            ", "X_input", "=", "torch", ".", "cat", "(", "[", "X_input", ",", "torch", ".", "ones", "(", "X_input", ".", "shape", "[", "0", "]", ",", "1", ")", ".", "to", "(", "X_input", ".", "device", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# Conv", "\n", "", "if", "self", ".", "transformer_flag", ":", "\n", "            ", "X_output", "=", "self", ".", "conv", "(", "X_input", "[", ":", "X_B", ".", "shape", "[", "0", "]", "]", ",", "X_input", "[", "X_B", ".", "shape", "[", "0", "]", ":", "]", ")", "\n", "", "else", ":", "\n", "            ", "X_output", "=", "self", ".", "conv", "(", "X_input", ",", "adj_input", ")", "\n", "\n", "", "X_output_B", ",", "X_output_M", "=", "X_output", "[", ":", "X_B", ".", "shape", "[", "0", "]", "]", ",", "X_output", "[", "X_B", ".", "shape", "[", "0", "]", ":", "]", "\n", "\n", "if", "self", ".", "inited", "and", "self", ".", "hook_flag", "and", "self", ".", "training", "and", "not", "unlabeled", ":", "\n", "            ", "X_output_B", ".", "requires_grad_", "(", ")", "\n", "X_output_B", ".", "register_hook", "(", "self", ".", "hook", ")", "\n", "\n", "", "if", "self", ".", "transformer_flag", "or", "self", ".", "conv_type", "==", "'GAT'", ":", "#use the added one dim to normalize X_out_B", "\n", "            ", "X_output_B", "=", "X_output_B", "[", ":", ",", ":", "self", ".", "num_D", "]", "/", "(", "X_output_B", "[", ":", ",", "self", ".", "num_D", "]", ".", "unsqueeze", "(", "1", ")", "+", "1e-16", ")", "\n", "", "X_output_B_ln", "=", "X_output_B", "\n", "commit_loss", "=", "0", "\n", "info_backward", "=", "torch", ".", "sum", "(", "X_output_M", "*", "self", ".", "vq", ".", "get_grad", "(", ")", "*", "warm_up_rate", ")", "\n", "error", "=", "quantized_norm", "=", "0", "\n", "\n", "return", "X_output_B_ln", ",", "error", ",", "torch", ".", "norm", "(", "X_B", ",", "dim", "=", "1", ")", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "quantized_norm", ",", "commit_loss", ",", "info_backward", ",", "X_B", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.models_inductive.LowRankGNNLayer.__init__": [[295, 358], ["super().__init__", "range", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "int", "int", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "ValueError", "ValueError", "models_inductive.LowRankGNNLayer.transformer_block.append", "models_inductive.LowRankGNNLayer.gnn_block.append", "ValueError", "models_inductive.LowRankGNNBlock", "models_inductive.LowRankGNNBlock"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.dataloader.OurDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "dropout", ",", "\n", "num_M", ",", "num_D", ",", "num_N", ",", "num_branch", ",", "cluster", ",", "ln_para", ",", "no_second_fc", ",", "\n", "kmeans_iter", ",", "EMA_flag", ",", "split", ",", "kmeans_init", ",", "dropbranch", ",", "skip", ",", "use_gcn", ",", "commitment_cost", ",", "\n", "grad_normalize_scale", ",", "hook", ",", "weight_ahead", ",", "warm_up_flag", ",", "momentum", ",", "conv_type", ",", "transformer_flag", ",", "val_num_N", ",", "test_num_N", ")", ":", "\n", "        ", "super", "(", "LowRankGNNLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# weight ahead disabled", "\n", "self", ".", "weight_ahead", "=", "weight_ahead", "\n", "if", "self", ".", "weight_ahead", ":", "\n", "            ", "if", "out_channels", "%", "num_D", "!=", "0", ":", "raise", "ValueError", "(", "'Cannot fully split'", ")", "\n", "self", ".", "num_branch", "=", "int", "(", "out_channels", "/", "num_D", ")", "\n", "", "else", ":", "\n", "            ", "if", "in_channels", "%", "num_D", "!=", "0", ":", "raise", "ValueError", "(", "'Cannot fully split'", ")", "\n", "self", ".", "num_branch", "=", "int", "(", "in_channels", "/", "num_D", ")", "\n", "\n", "", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "no_second_fc", "=", "no_second_fc", "\n", "self", ".", "EMA_flag", "=", "EMA_flag", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "num_D", "=", "num_D", "\n", "self", ".", "dropbranch", "=", "dropbranch", "\n", "self", ".", "skip", "=", "skip", "\n", "self", ".", "conv_type", "=", "conv_type", "\n", "self", ".", "transformer_flag", "=", "transformer_flag", "\n", "\n", "self", ".", "linear_k", ",", "self", ".", "linear_v", ",", "self", ".", "gnn_block", ",", "self", ".", "transformer_block", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", ",", "torch", ".", "nn", ".", "ModuleList", "(", ")", ",", "torch", ".", "nn", ".", "ModuleList", "(", ")", ",", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_branch", ")", ":", "\n", "# if not self.split :", "\n", "#     self.linear_k.append(torch.nn.Linear(in_channels, num_D))", "\n", "\n", "            ", "if", "transformer_flag", ":", "\n", "                ", "self", ".", "transformer_block", ".", "append", "(", "LowRankGNNBlock", "(", "num_D", ",", "out_channels", ",", "num_M", ",", "num_D", ",", "num_N", ",", "self", ".", "num_branch", ",", "\n", "cluster", ",", "kmeans_iter", ",", "EMA_flag", ",", "kmeans_init", ",", "\n", "False", ",", "commitment_cost", ",", "grad_normalize_scale", ",", "\n", "hook", ",", "warm_up_flag", ",", "momentum", ",", "conv_type", ",", "True", ")", ")", "\n", "\n", "", "if", "no_second_fc", ":", "\n", "                ", "self", ".", "gnn_block", ".", "append", "(", "LowRankGNNBlock", "(", "num_D", ",", "out_channels", ",", "num_M", ",", "num_D", ",", "num_N", ",", "self", ".", "num_branch", ",", "\n", "cluster", ",", "kmeans_iter", ",", "EMA_flag", ",", "kmeans_init", ",", "\n", "use_gcn", ",", "commitment_cost", ",", "grad_normalize_scale", ",", "\n", "hook", ",", "warm_up_flag", ",", "momentum", ",", "conv_type", ",", "False", ",", "val_num_N", ",", "test_num_N", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'second fc not studied'", ")", "\n", "# self.gnn_block.append(LowRankGNNBlock(num_D, num_D, num_M, num_D, num_N, self.num_branch,", "\n", "#                                       cluster, kmeans_iter, EMA_flag, kmeans_init,", "\n", "#                                       use_gcn, commitment_cost, grad_normalize_scale,", "\n", "#                                       hook, warm_up_flag, momentum, conv_type, False))", "\n", "# self.linear_v.append(torch.nn.Linear(num_D, out_channels))", "\n", "\n", "", "", "if", "self", ".", "skip", ":", "\n", "            ", "self", ".", "linear_skip", "=", "torch", ".", "nn", ".", "Linear", "(", "in_channels", ",", "out_channels", ")", "\n", "\n", "", "self", ".", "gnn_transform", "=", "torch", ".", "nn", ".", "Linear", "(", "in_channels", ",", "out_channels", ")", "\n", "# self.transform = torch.nn.utils.spectral_norm ( torch.nn.Linear(in_channels, out_channels) )", "\n", "self", ".", "batch_norm", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "out_channels", ",", "affine", "=", "False", ")", "\n", "\n", "if", "self", ".", "conv_type", "==", "'SAGE'", ":", "\n", "            ", "self", ".", "fc_sage", "=", "torch", ".", "nn", ".", "Linear", "(", "in_channels", ",", "out_channels", ")", "\n", "\n", "", "if", "self", ".", "transformer_flag", ":", "\n", "            ", "self", ".", "transformer_res", "=", "torch", ".", "nn", ".", "Linear", "(", "in_channels", ",", "out_channels", ")", "\n", "self", ".", "transformer_v", "=", "torch", ".", "nn", ".", "Linear", "(", "in_channels", ",", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.models_inductive.LowRankGNNLayer.forward": [[365, 430], ["models_inductive.LowRankGNNLayer.gnn_transform", "int", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "x_hiddens.append", "hookeds.append", "errors.append", "X_B_norms.append", "quantized_norms.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models_inductive.LowRankGNNLayer.transformer_v", "models_inductive.LowRankGNNLayer.transformer_res", "models_inductive.LowRankGNNLayer.linear_skip", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "models_inductive.LowRankGNNLayer.gnn_block[].inference", "models_inductive.LowRankGNNLayer.fc_sage", "x_hiddens.append", "hookeds.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.models.LowRankGNN.inference"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "batch_A", ",", "warm_up_rate", ",", "unlabeled", ",", "infer", "=", "None", ")", ":", "\n", "\n", "        ", "errors", ",", "X_B_norms", ",", "quantized_norms", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "losses", ",", "info_backwards", "=", "0", ",", "0", "\n", "hookeds", "=", "[", "]", "\n", "\n", "if", "self", ".", "training", "and", "self", ".", "dropbranch", ">", "0", ":", "\n", "            ", "num_branch", "=", "int", "(", "self", ".", "num_branch", "*", "(", "1", "-", "self", ".", "dropbranch", ")", ")", "\n", "branch_idx", "=", "torch", ".", "randperm", "(", "self", ".", "num_branch", ")", "[", ":", "num_branch", "]", "\n", "", "else", ":", "\n", "            ", "num_branch", "=", "self", ".", "num_branch", "\n", "branch_idx", "=", "torch", ".", "arange", "(", "num_branch", ")", "\n", "\n", "", "x_input", ",", "x_output", "=", "x", ",", "0", "\n", "x_hiddens", "=", "[", "]", "\n", "for", "i", "in", "branch_idx", ":", "\n", "            ", "x_hidden", "=", "x_input", "[", ":", ",", "self", ".", "num_D", "*", "i", ":", "self", ".", "num_D", "*", "(", "i", "+", "1", ")", "]", "\n", "if", "infer", "is", "None", ":", "\n", "                ", "x_hidden", ",", "error", ",", "X_B_norm", ",", "quantized_norm", ",", "loss", ",", "info_backward", ",", "hooked", "=", "self", ".", "gnn_block", "[", "i", "]", "(", "x_hidden", ",", "batch_A", ",", "warm_up_rate", ",", "unlabeled", ")", "\n", "", "else", ":", "\n", "                ", "x_hidden", ",", "error", ",", "X_B_norm", ",", "quantized_norm", ",", "loss", ",", "info_backward", ",", "hooked", "=", "self", ".", "gnn_block", "[", "i", "]", ".", "inference", "(", "x_hidden", ",", "batch_A", ",", "warm_up_rate", ",", "unlabeled", ",", "infer", ")", "\n", "\n", "", "if", "self", ".", "training", ":", "\n", "                ", "losses", "+=", "loss", "\n", "info_backwards", "+=", "info_backward", "\n", "\n", "", "x_hiddens", ".", "append", "(", "x_hidden", ")", "\n", "hookeds", ".", "append", "(", "hooked", ")", "\n", "errors", ".", "append", "(", "error", ")", "\n", "X_B_norms", ".", "append", "(", "X_B_norm", ")", "\n", "quantized_norms", ".", "append", "(", "quantized_norm", ")", "\n", "\n", "", "x_output_gnn", "=", "self", ".", "gnn_transform", "(", "torch", ".", "cat", "(", "x_hiddens", ",", "dim", "=", "1", ")", ")", "\n", "if", "self", ".", "conv_type", "==", "'SAGE'", ":", "\n", "            ", "x_output_gnn", "=", "x_output_gnn", "+", "self", ".", "fc_sage", "(", "x_input", ")", "\n", "", "x_output", "=", "x_output", "+", "x_output_gnn", "\n", "\n", "if", "self", ".", "transformer_flag", ":", "\n", "            ", "x_hiddens", "=", "[", "]", "\n", "for", "i", "in", "branch_idx", ":", "\n", "                ", "x_hidden", "=", "x_input", "[", ":", ",", "self", ".", "num_D", "*", "i", ":", "self", ".", "num_D", "*", "(", "i", "+", "1", ")", "]", "\n", "x_hidden", ",", "error", ",", "X_B_norm", ",", "quantized_norm", ",", "loss", ",", "info_backward", ",", "hooked", "=", "self", ".", "transformer_block", "[", "i", "]", "(", "x_hidden", ",", "batch_A", ",", "warm_up_rate", ",", "unlabeled", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "                    ", "losses", "+=", "loss", "\n", "info_backwards", "+=", "info_backward", "\n", "\n", "", "x_hiddens", ".", "append", "(", "x_hidden", ")", "\n", "hookeds", ".", "append", "(", "hooked", ")", "\n", "\n", "# errors.append(error)", "\n", "# X_B_norms.append(X_B_norm)", "\n", "# quantized_norms.append(quantized_norm)", "\n", "\n", "", "x_output_trans", "=", "self", ".", "transformer_v", "(", "torch", ".", "cat", "(", "x_hiddens", ",", "dim", "=", "1", ")", ")", "\n", "x_output_trans_res", "=", "self", ".", "transformer_res", "(", "x_input", ")", "\n", "x_output", "=", "x_output", "+", "x_output_trans", "+", "x_output_trans_res", "\n", "\n", "", "if", "self", ".", "skip", ":", "\n", "            ", "x_output", "+=", "self", ".", "linear_skip", "(", "x", ")", "\n", "\n", "", "return", "x_output", ",", "errors", ",", "X_B_norms", ",", "quantized_norms", ",", "losses", ",", "info_backwards", ",", "hookeds", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.models_inductive.LowRankGNN.__init__": [[433, 497], ["super().__init__", "models_inductive.LowRankGNN.convs.append", "models_inductive.LowRankGNN.batch_norms.append", "range", "models_inductive.LowRankGNN.convs.append", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.AlphaDropout", "torch.nn.AlphaDropout", "torch.nn.AlphaDropout", "torch.nn.AlphaDropout", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "models_inductive.LowRankGNNLayer", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "models_inductive.LowRankGNN.convs.append", "models_inductive.LowRankGNN.batch_norms.append", "models_inductive.LowRankGNNLayer", "models_inductive.LowRankGNNLayer", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "ValueError", "torch.gelu", "torch.gelu"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.dataloader.OurDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "hidden_channels", ",", "out_channels", ",", "num_layers", ",", "dropout", ",", "\n", "num_M", ",", "num_D", ",", "num_N", ",", "num_branch", "=", "0", ",", "cluster", "=", "'vq'", ",", "ln_para", "=", "True", ",", "no_second_fc", "=", "False", ",", "\n", "kmeans_iter", "=", "100", ",", "EMA_flag", "=", "True", ",", "split", "=", "True", ",", "kmeans_init", "=", "False", ",", "dropbranch", "=", "0", ",", "skip", "=", "True", ",", "\n", "use_gcn", "=", "False", ",", "commitment_cost", "=", "0.5", ",", "grad_scale", "=", "(", "1", ",", "1", ")", ",", "act", "=", "'relu'", ",", "weight_ahead", "=", "False", ",", "\n", "bn_flag", "=", "False", ",", "warm_up_flag", "=", "False", ",", "momentum", "=", "0.1", ",", "conv_type", "=", "'GCN'", ",", "transformer_flag", "=", "False", ",", "\n", "alpha_dropout_flag", "=", "False", ",", "val_num_N", "=", "0", ",", "test_num_N", "=", "0", ")", ":", "\n", "        ", "super", "(", "LowRankGNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "skip", "=", "skip", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "bn_flag", "=", "bn_flag", "\n", "self", ".", "alpha_dropout_flag", "=", "alpha_dropout_flag", "\n", "\n", "if", "self", ".", "alpha_dropout_flag", ":", "\n", "            ", "self", ".", "alpha_dropout", "=", "torch", ".", "nn", ".", "AlphaDropout", "(", "p", "=", "self", ".", "dropout", ")", "\n", "\n", "", "self", ".", "convs", ",", "self", ".", "batch_norms", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", ",", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "convs", ".", "append", "(", "\n", "LowRankGNNLayer", "(", "in_channels", ",", "hidden_channels", ",", "dropout", ",", "\n", "num_M", ",", "num_D", ",", "num_N", ",", "num_branch", "=", "num_branch", ",", "\n", "cluster", "=", "cluster", ",", "ln_para", "=", "ln_para", ",", "no_second_fc", "=", "no_second_fc", ",", "\n", "kmeans_iter", "=", "kmeans_iter", ",", "EMA_flag", "=", "EMA_flag", ",", "split", "=", "split", ",", "\n", "kmeans_init", "=", "kmeans_init", ",", "dropbranch", "=", "0", ",", "skip", "=", "skip", ",", "\n", "use_gcn", "=", "use_gcn", ",", "commitment_cost", "=", "commitment_cost", ",", "grad_normalize_scale", "=", "grad_scale", ",", "\n", "hook", "=", "True", ",", "weight_ahead", "=", "weight_ahead", ",", "warm_up_flag", "=", "warm_up_flag", ",", "momentum", "=", "momentum", ",", "\n", "conv_type", "=", "conv_type", ",", "transformer_flag", "=", "transformer_flag", ",", "val_num_N", "=", "val_num_N", ",", "test_num_N", "=", "test_num_N", ")", ")", "\n", "self", ".", "batch_norms", ".", "append", "(", "torch", ".", "nn", ".", "BatchNorm1d", "(", "hidden_channels", ",", "affine", "=", "False", ")", ")", "\n", "\n", "for", "_", "in", "range", "(", "num_layers", "-", "2", ")", ":", "\n", "            ", "self", ".", "convs", ".", "append", "(", "\n", "LowRankGNNLayer", "(", "hidden_channels", ",", "hidden_channels", ",", "dropout", ",", "\n", "num_M", ",", "num_D", ",", "num_N", ",", "num_branch", "=", "num_branch", ",", "\n", "cluster", "=", "cluster", ",", "ln_para", "=", "ln_para", ",", "no_second_fc", "=", "no_second_fc", ",", "\n", "kmeans_iter", "=", "kmeans_iter", ",", "EMA_flag", "=", "EMA_flag", ",", "split", "=", "split", ",", "\n", "kmeans_init", "=", "kmeans_init", ",", "dropbranch", "=", "dropbranch", ",", "skip", "=", "skip", ",", "\n", "use_gcn", "=", "use_gcn", ",", "commitment_cost", "=", "commitment_cost", ",", "grad_normalize_scale", "=", "grad_scale", ",", "\n", "hook", "=", "True", ",", "weight_ahead", "=", "weight_ahead", ",", "warm_up_flag", "=", "warm_up_flag", ",", "momentum", "=", "momentum", ",", "\n", "conv_type", "=", "conv_type", ",", "transformer_flag", "=", "transformer_flag", ",", "val_num_N", "=", "val_num_N", ",", "test_num_N", "=", "test_num_N", ")", ")", "\n", "self", ".", "batch_norms", ".", "append", "(", "torch", ".", "nn", ".", "BatchNorm1d", "(", "hidden_channels", ",", "affine", "=", "False", ")", ")", "\n", "\n", "", "self", ".", "convs", ".", "append", "(", "\n", "LowRankGNNLayer", "(", "hidden_channels", ",", "out_channels", ",", "dropout", ",", "\n", "num_M", ",", "num_D", ",", "num_N", ",", "num_branch", "=", "num_branch", ",", "\n", "cluster", "=", "cluster", ",", "ln_para", "=", "ln_para", ",", "no_second_fc", "=", "no_second_fc", ",", "\n", "kmeans_iter", "=", "kmeans_iter", ",", "EMA_flag", "=", "EMA_flag", ",", "split", "=", "split", ",", "\n", "kmeans_init", "=", "kmeans_init", ",", "dropbranch", "=", "dropbranch", ",", "skip", "=", "skip", ",", "\n", "use_gcn", "=", "use_gcn", ",", "commitment_cost", "=", "commitment_cost", ",", "grad_normalize_scale", "=", "grad_scale", ",", "\n", "hook", "=", "True", ",", "weight_ahead", "=", "weight_ahead", ",", "warm_up_flag", "=", "warm_up_flag", ",", "momentum", "=", "momentum", ",", "\n", "conv_type", "=", "conv_type", ",", "transformer_flag", "=", "transformer_flag", ",", "val_num_N", "=", "val_num_N", ",", "test_num_N", "=", "test_num_N", ")", ")", "\n", "\n", "\n", "self", ".", "transform", "=", "torch", ".", "nn", ".", "Linear", "(", "out_channels", ",", "out_channels", ")", "\n", "\n", "self", ".", "ln", "=", "torch", ".", "nn", ".", "LayerNorm", "(", "hidden_channels", ",", "elementwise_affine", "=", "False", ")", "\n", "\n", "if", "act", "==", "'relu'", ":", "\n", "            ", "self", ".", "act_f", "=", "F", ".", "relu", "\n", "", "elif", "act", "==", "'elu'", ":", "\n", "            ", "self", ".", "act_f", "=", "F", ".", "elu", "\n", "", "elif", "act", "==", "'leaky_gelu'", ":", "\n", "            ", "self", ".", "act_f", "=", "lambda", "x", ":", "0.1", "*", "x", "+", "0.9", "*", "F", ".", "gelu", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Activation not supported!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.models_inductive.LowRankGNN.forward": [[506, 547], ["enumerate", "errors_full.append", "X_B_norms_full.append", "quantized_norms_full.append", "conv", "models_inductive.LowRankGNN.act_f", "errors_full.append", "X_B_norms_full.append", "quantized_norms_full.append", "models_inductive.LowRankGNN.alpha_dropout", "torch.dropout", "torch.dropout"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "batch", ",", "warm_up_rate", "=", "1", ",", "unlabeled", "=", "False", ",", "infer", "=", "None", ")", ":", "\n", "        ", "losses_full", ",", "info_backwards_full", "=", "0", ",", "0", "\n", "errors_full", ",", "X_B_norms_full", ",", "quantized_norms_full", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "x", ",", "batch_A", "=", "batch", "\n", "for", "i", ",", "conv", "in", "enumerate", "(", "self", ".", "convs", "[", ":", "-", "1", "]", ")", ":", "\n", "\n", "            ", "x", ",", "errors", ",", "X_B_norms", ",", "quantized_norms", ",", "losses", ",", "info_backwards", ",", "_", "=", "conv", "(", "x", ",", "batch_A", ",", "warm_up_rate", ",", "unlabeled", ",", "infer", ")", "\n", "\n", "# x = self.ln(x)", "\n", "if", "self", ".", "bn_flag", ":", "\n", "                ", "x", "=", "self", ".", "batch_norms", "[", "i", "]", "(", "x", ")", "\n", "", "x", "=", "self", ".", "act_f", "(", "x", ")", "\n", "\n", "if", "self", ".", "alpha_dropout_flag", ":", "\n", "                ", "x", "=", "self", ".", "alpha_dropout", "(", "x", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "# if self.skip :", "\n", "#     x = torch.nn.LayerNorm(x.shape[1], elementwise_affine=False)(x)", "\n", "", "losses_full", "+=", "losses", "\n", "info_backwards_full", "+=", "info_backwards", "\n", "\n", "errors_full", ".", "append", "(", "errors", ")", "\n", "X_B_norms_full", ".", "append", "(", "X_B_norms", ")", "\n", "quantized_norms_full", ".", "append", "(", "quantized_norms", ")", "\n", "\n", "\n", "", "x", ",", "errors", ",", "X_B_norms", ",", "quantized_norms", ",", "losses", ",", "info_backwards", ",", "_", "=", "self", ".", "convs", "[", "-", "1", "]", "(", "x", ",", "batch_A", ",", "warm_up_rate", ",", "unlabeled", ",", "infer", ")", "\n", "losses_full", "+=", "losses", "\n", "info_backwards_full", "+=", "info_backwards", "\n", "\n", "errors_full", ".", "append", "(", "errors", ")", "\n", "X_B_norms_full", ".", "append", "(", "X_B_norms", ")", "\n", "quantized_norms_full", ".", "append", "(", "quantized_norms", ")", "\n", "\n", "self", ".", "errors", ",", "self", ".", "X_B_norms", ",", "self", ".", "quantized_norms", "=", "errors_full", ",", "X_B_norms_full", ",", "quantized_norms_full", "\n", "\n", "return", "x", ",", "losses_full", ",", "info_backwards_full", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.models_inductive.LowRankGNN.inference": [[549, 568], ["enumerate", "models_inductive.LowRankGNN.act_f", "conv.gnn_transform", "conv.gnn_transform", "conv.gnn_transform", "conv.linear_skip", "conv.gnn_block[].conv", "conv.gnn_transform", "conv.linear_skip", "conv.gnn_block[].conv", "conv.gnn_block[].conv", "conv.gnn_block[].conv"], "methods", ["None"], ["", "def", "inference", "(", "self", ",", "x", ",", "A", ")", ":", "\n", "\n", "        ", "for", "i", ",", "conv", "in", "enumerate", "(", "self", ".", "convs", "[", ":", "-", "1", "]", ")", ":", "\n", "\n", "            ", "if", "self", ".", "skip", ":", "\n", "                ", "x", "=", "conv", ".", "gnn_transform", "(", "conv", ".", "gnn_block", "[", "0", "]", ".", "conv", "(", "x", ",", "A", ")", ")", "+", "conv", ".", "linear_skip", "(", "x", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "conv", ".", "gnn_transform", "(", "conv", ".", "gnn_block", "[", "0", "]", ".", "conv", "(", "x", ",", "A", ")", ")", "\n", "", "if", "self", ".", "bn_flag", ":", "\n", "                ", "x", "=", "self", ".", "batch_norms", "[", "i", "]", "(", "x", ")", "\n", "", "x", "=", "self", ".", "act_f", "(", "x", ")", "\n", "\n", "", "conv", "=", "self", ".", "convs", "[", "-", "1", "]", "\n", "if", "self", ".", "skip", ":", "\n", "            ", "x", "=", "conv", ".", "gnn_transform", "(", "conv", ".", "gnn_block", "[", "0", "]", ".", "conv", "(", "x", ",", "A", ")", ")", "+", "conv", ".", "linear_skip", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "conv", ".", "gnn_transform", "(", "conv", ".", "gnn_block", "[", "0", "]", ".", "conv", "(", "x", ",", "A", ")", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.models_inductive.LowRankGNN.init": [[569, 574], ["enumerate", "conv", "models_inductive.LowRankGNN.act_f"], "methods", ["None"], ["", "def", "init", "(", "self", ",", "batch", ",", "layer_idx", ")", ":", "\n", "        ", "x", ",", "batch_A", "=", "batch", "\n", "for", "i", ",", "conv", "in", "enumerate", "(", "self", ".", "convs", "[", ":", "layer_idx", "]", ")", ":", "\n", "            ", "x", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", "=", "conv", "(", "x", ",", "batch_A", ",", "1", ",", "False", ")", "\n", "x", "=", "self", ".", "act_f", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.models_inductive.LowRankGNN1Layer.__init__": [[603, 613], ["super().__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "models_inductive.LowRankGNN1Layer.convs.append", "models_inductive.LowRankGNNLayer"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.dataloader.OurDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "hidden_channels", ",", "out_channels", ",", "num_layers", ",", "dropout", ",", "\n", "num_M", ",", "num_D", ",", "num_N", ",", "num_branch", "=", "0", ",", "cluster", "=", "'vq'", ",", "ln_para", "=", "True", ",", "no_second_fc", "=", "False", ",", "\n", "kmeans_iter", "=", "100", ",", "EMA_flag", "=", "True", ",", "split", "=", "True", ",", "kmeans_init", "=", "False", ",", "dropbranch", "=", "0", ")", ":", "\n", "        ", "super", "(", "LowRankGNN1Layer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "convs", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "convs", ".", "append", "(", "LowRankGNNLayer", "(", "in_channels", ",", "out_channels", ",", "dropout", ",", "\n", "num_M", ",", "num_D", ",", "num_N", ",", "num_branch", "=", "num_branch", ",", "cluster", "=", "cluster", ",", "\n", "ln_para", "=", "ln_para", ",", "no_second_fc", "=", "no_second_fc", ",", "kmeans_iter", "=", "kmeans_iter", ",", "\n", "EMA_flag", "=", "EMA_flag", ",", "split", "=", "split", ",", "kmeans_init", "=", "kmeans_init", ",", "dropbranch", "=", "dropbranch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.models_inductive.LowRankGNN1Layer.forward": [[615, 623], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X_B", ",", "A", ",", "batch_indices", ")", ":", "\n", "        ", "x", "=", "X_B", "\n", "x", ",", "errors", ",", "X_B_norms", ",", "quantized_norms", ",", "losses", "=", "self", ".", "convs", "[", "-", "1", "]", "(", "x", ",", "A", ",", "batch_indices", ")", "\n", "self", ".", "errors", "=", "errors", "\n", "self", ".", "X_B_norms", "=", "X_B_norms", "\n", "self", ".", "quantized_norms", "=", "quantized_norms", "\n", "\n", "return", "x", ",", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.main_link.LinkPredictor.__init__": [[25, 35], ["super().__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "main_link.LinkPredictor.lins.append", "range", "main_link.LinkPredictor.lins.append", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "main_link.LinkPredictor.lins.append", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.dataloader.OurDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "hidden_channels", ",", "out_channels", ",", "num_layers", ",", "\n", "dropout", ")", ":", "\n", "        ", "super", "(", "LinkPredictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "lins", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "lins", ".", "append", "(", "torch", ".", "nn", ".", "Linear", "(", "in_channels", ",", "hidden_channels", ")", ")", "\n", "for", "_", "in", "range", "(", "num_layers", "-", "2", ")", ":", "\n", "            ", "self", ".", "lins", ".", "append", "(", "torch", ".", "nn", ".", "Linear", "(", "hidden_channels", ",", "hidden_channels", ")", ")", "\n", "", "self", ".", "lins", ".", "append", "(", "torch", ".", "nn", ".", "Linear", "(", "hidden_channels", ",", "out_channels", ")", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.main_link.LinkPredictor.reset_parameters": [[36, 39], ["lin.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_link.LinkPredictor.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "lin", "in", "self", ".", "lins", ":", "\n", "            ", "lin", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.main_link.LinkPredictor.forward": [[40, 48], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "lin", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x_i", ",", "x_j", ")", ":", "\n", "        ", "x", "=", "x_i", "*", "x_j", "\n", "for", "lin", "in", "self", ".", "lins", "[", ":", "-", "1", "]", ":", "\n", "            ", "x", "=", "lin", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "", "x", "=", "self", ".", "lins", "[", "-", "1", "]", "(", "x", ")", "\n", "return", "torch", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.main_link.prepare": [[49, 64], ["x.to", "deg_inv.to", "A_BN[].to", "A_BN[].to", "A_BN[].to", "A_NB_v.to", "A_BB[].to", "A_BB[].to", "A_BB[].to"], "function", ["None"], ["", "", "def", "prepare", "(", "batch", ",", "device", ")", ":", "\n", "    ", "x", ",", "deg_inv", ",", "A_BN", ",", "A_BB", ",", "A_NB_v", ",", "batch_idx", "=", "batch", "\n", "\n", "x", ",", "deg_inv", "=", "x", ".", "to", "(", "device", ")", ",", "deg_inv", ".", "to", "(", "device", ")", "\n", "row", ",", "col", ",", "value", "=", "A_BN", "[", "0", "]", ".", "to", "(", "device", ")", ",", "A_BN", "[", "1", "]", ".", "to", "(", "device", ")", ",", "A_BN", "[", "2", "]", ".", "to", "(", "device", ")", "\n", "A_BN", "=", "row", ",", "col", ",", "value", "\n", "\n", "if", "A_BB", "is", "not", "None", ":", "\n", "        ", "row", ",", "col", ",", "value", "=", "A_BB", "[", "0", "]", ".", "to", "(", "device", ")", ",", "A_BB", "[", "1", "]", ".", "to", "(", "device", ")", ",", "A_BB", "[", "2", "]", ".", "to", "(", "device", ")", "\n", "A_BB", "=", "row", ",", "col", ",", "value", "\n", "", "A_NB_v", "=", "A_NB_v", ".", "to", "(", "device", ")", "if", "A_NB_v", "is", "not", "None", "else", "None", "\n", "\n", "batch", "=", "x", ",", "(", "deg_inv", ",", "A_BN", ",", "A_BB", ",", "A_NB_v", ",", "batch_idx", ")", "\n", "\n", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.main_link.train": [[65, 145], ["utils.logger.AverageValueMeter", "utils.logger.AverageValueMeter", "utils.logger.AverageValueMeter", "utils.logger.AverageValueMeter", "model.train", "enumerate", "enumerate", "main_link.prepare", "optimizer.zero_grad", "model", "predictor", "torch.randint", "torch.randint", "predictor", "time.time", "loss.backward", "utils.logger.AverageValueMeter.add", "range", "utils.logger.AverageValueMeter.add", "utils.logger.AverageValueMeter.add", "print", "utils.logger.AverageValueMeter.value", "utils.logger.AverageValueMeter.value", "utils.logger.AverageValueMeter.value", "utils.logger.AverageValueMeter.value", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "range", "transform.parameters", "torch.norm().item", "torch.norm().item", "w_grad_norms.append", "exp_log_f", "optimizer.step", "loss.item", "loss_pre.item", "time.time", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.norm().item", "torch.norm().item", "a_grad_norms.append", "w_grads.append", "len", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.log", "torch.log", "torch.log", "torch.log", "model.convs[].gnn_transform.parameters", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "param.grad.view", "torch.norm", "torch.norm", "model.convs[].gnn_block.parameters", "torch.norm", "torch.norm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gat_conv.att_l.grad.view", "gat_conv.att_r.grad.view"], "function", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_link.train", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.main_node_inductive.prepare", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.add", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.add", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.add", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.value", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.value", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.value", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.value", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.scheduler.GradualWarmupScheduler.step"], ["", "def", "train", "(", "model", ",", "data", ",", "batch_size", ",", "train_bool", ",", "optimizer", ",", "device", ",", "commitment_cost", ",", "use_gcn", ",", "warm_up_rate", ",", "\n", "ce_only", ",", "exp_log_f", ",", "exp_flag", ",", "conv_type", ",", "clip", ",", "num_layers", ",", "loader", ",", "predictor", ")", ":", "\n", "    ", "batch_forward_time_meter", "=", "AverageValueMeter", "(", ")", "\n", "batch_backward_time_meter", "=", "AverageValueMeter", "(", ")", "\n", "loss_cls_meter", "=", "AverageValueMeter", "(", ")", "\n", "loss_meter", "=", "AverageValueMeter", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "for", "i", ",", "batches", "in", "enumerate", "(", "loader", ")", ":", "\n", "\n", "        ", "for", "j", ",", "batch", "in", "enumerate", "(", "batches", ")", ":", "\n", "\n", "            ", "A_BB", "=", "batch", "[", "3", "]", "\n", "assert", "(", "A_BB", "is", "not", "None", ")", "\n", "src", ",", "dst", ",", "_", "=", "A_BB", "\n", "\n", "batch_idx", "=", "batch", "[", "-", "1", "]", "\n", "\n", "batch", "=", "prepare", "(", "batch", ",", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "out", ",", "vq_losses", ",", "info_backward", "=", "model", "(", "batch", ",", "warm_up_rate", ")", "\n", "\n", "pos_out", "=", "predictor", "(", "out", "[", "src", "]", ",", "out", "[", "dst", "]", ")", "\n", "pos_loss", "=", "-", "torch", ".", "log", "(", "pos_out", "+", "1e-15", ")", ".", "mean", "(", ")", "\n", "# Just do some trivial random sampling.", "\n", "dst_neg", "=", "torch", ".", "randint", "(", "0", ",", "batch_idx", ".", "shape", "[", "0", "]", ",", "src", ".", "shape", ",", "\n", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "neg_out", "=", "predictor", "(", "out", "[", "src", "]", ",", "out", "[", "dst_neg", "]", ")", "\n", "neg_loss", "=", "-", "torch", ".", "log", "(", "1", "-", "neg_out", "+", "1e-15", ")", ".", "mean", "(", ")", "\n", "\n", "loss_pre", "=", "pos_loss", "+", "neg_loss", "\n", "\n", "if", "commitment_cost", ">", "0", ":", "\n", "                ", "loss", "=", "loss_pre", "+", "info_backward", "+", "vq_losses", "\n", "", "else", ":", "\n", "                ", "loss", "=", "loss_pre", "+", "info_backward", "\n", "", "if", "ce_only", ":", "\n", "                ", "loss", "=", "loss_pre", "\n", "\n", "", "start", "=", "time", ".", "time", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "batch_backward_time_meter", ".", "add", "(", "time", ".", "time", "(", ")", "-", "start", ")", "\n", "\n", "if", "clip", "is", "not", "None", ":", "\n", "                ", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "                    ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "convs", "[", "i", "]", ".", "gnn_transform", ".", "parameters", "(", ")", ",", "clip", "[", "0", "]", ")", "\n", "if", "conv_type", "==", "'GAT'", ":", "# TODO: transformer case", "\n", "                        ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "convs", "[", "i", "]", ".", "gnn_block", ".", "parameters", "(", ")", ",", "clip", "[", "1", "]", ")", "\n", "\n", "", "", "", "a_grad_norms", ",", "w_grad_norms", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "                ", "if", "conv_type", "==", "'GAT'", ":", "\n", "                    ", "gat_conv", "=", "model", ".", "convs", "[", "i", "]", ".", "gnn_block", "[", "0", "]", ".", "conv", "\n", "a_grad_norm", "=", "torch", ".", "norm", "(", "torch", ".", "cat", "(", "[", "gat_conv", ".", "att_l", ".", "grad", ".", "view", "(", "-", "1", ")", ",", "gat_conv", ".", "att_r", ".", "grad", ".", "view", "(", "-", "1", ")", "]", ")", ")", ".", "item", "(", ")", "\n", "a_grad_norms", ".", "append", "(", "a_grad_norm", ")", "\n", "\n", "", "transform", "=", "model", ".", "convs", "[", "i", "]", ".", "gnn_transform", "\n", "w_grads", "=", "[", "]", "\n", "for", "param", "in", "transform", ".", "parameters", "(", ")", ":", "\n", "                    ", "w_grads", ".", "append", "(", "param", ".", "grad", ".", "view", "(", "-", "1", ")", ")", "\n", "", "w_grad_norm", "=", "torch", ".", "norm", "(", "torch", ".", "cat", "(", "w_grads", ")", ")", ".", "item", "(", ")", "\n", "w_grad_norms", ".", "append", "(", "w_grad_norm", ")", "\n", "\n", "", "model", ".", "a_grad_norms", ",", "model", ".", "w_grad_norms", "=", "a_grad_norms", ",", "w_grad_norms", "\n", "\n", "if", "exp_flag", ":", "\n", "                ", "exp_log_f", "(", ")", "\n", "\n", "", "if", "j", "==", "0", "and", "len", "(", "batches", ")", ">", "1", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "loss_meter", ".", "add", "(", "loss", ".", "item", "(", ")", ")", "\n", "loss_cls_meter", ".", "add", "(", "loss_pre", ".", "item", "(", ")", ")", "\n", "print", "(", "torch", ".", "cuda", ".", "max_memory_allocated", "(", "device", "=", "device", ")", "/", "1e+6", ")", "\n", "\n", "", "", "return", "loss_meter", ".", "value", "(", ")", "[", "0", "]", ",", "loss_cls_meter", ".", "value", "(", ")", "[", "0", "]", ",", "batch_forward_time_meter", ".", "value", "(", ")", "[", "0", "]", ",", "batch_backward_time_meter", ".", "value", "(", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.main_link.init": [[147, 200], ["model.train", "range", "print", "torch.no_grad", "torch.no_grad", "enumerate", "main_link.prepare", "model.init", "print", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated"], "function", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_link.train", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.main_node_inductive.prepare", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_link.init"], ["", "def", "init", "(", "model", ",", "device", ",", "loader", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "\n", "for", "layer_idx", "in", "range", "(", "1", ",", "model", ".", "num_layers", "+", "1", ")", ":", "\n", "        ", "print", "(", "layer_idx", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "batch", "in", "enumerate", "(", "loader", ")", ":", "\n", "                ", "batch", "=", "batch", "[", "0", "]", "\n", "batch", "=", "prepare", "(", "batch", ",", "device", ")", "\n", "model", ".", "init", "(", "batch", ",", "layer_idx", ")", "\n", "\n", "print", "(", "torch", ".", "cuda", ".", "max_memory_allocated", "(", "device", "=", "device", ")", "/", "1e+6", ")", "\n", "\n", "", "", "", "for", "layer", "in", "model", ".", "convs", ":", "\n", "        ", "for", "gnn_block", "in", "layer", ".", "gnn_block", ":", "\n", "            ", "gnn_block", ".", "inited", "=", "True", "\n", "\n", "# for layer_idx in reversed(range(1, model.num_layers+1)) :", "\n", "#     print(layer_idx)", "\n", "#", "\n", "#     rand_idx = torch.randperm(data.num_nodes)", "\n", "#     num_batches = ceil(data.num_nodes / batch_size)", "\n", "#     for i in range(num_batches) :", "\n", "#", "\n", "#         if (i+1)*batch_size > data.num_nodes :", "\n", "#             batch_idx = rand_idx[i * batch_size:data.num_nodes]", "\n", "#         else :", "\n", "#             batch_idx = rand_idx[i*batch_size:(i+1)*batch_size]", "\n", "#", "\n", "#         loss_func = lambda x: F.cross_entropy(x[train_bool[batch_idx]],", "\n", "#                                               data.y.squeeze(1)[batch_idx][train_bool[batch_idx]].to(device))", "\n", "#", "\n", "#         if use_gcn :", "\n", "#             if conv_type.startswith('SAGE'):", "\n", "#                 A = (data.adj_t[batch_idx].to(device), data.adj_t[:, batch_idx].to(device))", "\n", "#             else:", "\n", "#                 A = data.adj_t[batch_idx].to(device)", "\n", "#             model.grad_init(data.x[batch_idx].to(device), A, batch_idx,", "\n", "#                         layer_idx, loss_func, data.deg[batch_idx].to(device))", "\n", "#         else :", "\n", "#             if conv_type.startswith('degree-GAT') :", "\n", "#                 A = (data.adj_t[batch_idx].to(device), data.adj_t[:, batch_idx].to(device))", "\n", "#                 model.grad_init(data.x[batch_idx].to(device), A, batch_idx,", "\n", "#                                 layer_idx, loss_func, data.deg[batch_idx].to(device))", "\n", "#             else :", "\n", "#                 model.grad_init(data.x[batch_idx].to(device), data.adj_t[batch_idx].to(device), batch_idx,", "\n", "#                             layer_idx, loss_func)", "\n", "\n", "", "", "for", "layer", "in", "model", ".", "convs", ":", "\n", "        ", "for", "gnn_block", "in", "layer", ".", "gnn_block", ":", "\n", "            ", "gnn_block", ".", "kmeans_init", "=", "False", "\n", "gnn_block", ".", "grad_kmeans_init", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.main_link.test_citation2": [[203, 247], ["torch.no_grad", "torch.no_grad", "model.eval", "predictor.eval", "enumerate", "torch.cat", "torch.cat", "main_link.test_citation2.test_split"], "function", ["None"], ["", "", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "test_citation2", "(", "model", ",", "data", ",", "split_idx", ",", "evaluator", ",", "batch_size", ",", "device", ",", "use_gcn", ",", "conv_type", ",", "loader", ",", "\n", "split_edge", ",", "predictor", ",", "dataset", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "predictor", ".", "eval", "(", ")", "\n", "\n", "outs", "=", "[", "]", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "batch", "=", "batch", "[", "0", "]", "\n", "batch", "=", "prepare", "(", "batch", ",", "device", ")", "\n", "out", ",", "_", ",", "_", "=", "model", "(", "batch", ")", "\n", "outs", ".", "append", "(", "out", ")", "\n", "\n", "", "outs", "=", "torch", ".", "cat", "(", "outs", ",", "dim", "=", "0", ")", "\n", "\n", "def", "test_split", "(", "split", ")", ":", "\n", "        ", "source", "=", "split_edge", "[", "split", "]", "[", "'source_node'", "]", ".", "to", "(", "device", ")", "\n", "target", "=", "split_edge", "[", "split", "]", "[", "'target_node'", "]", ".", "to", "(", "device", ")", "\n", "target_neg", "=", "split_edge", "[", "split", "]", "[", "'target_node_neg'", "]", ".", "to", "(", "device", ")", "\n", "\n", "pos_preds", "=", "[", "]", "\n", "for", "perm", "in", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "range", "(", "source", ".", "size", "(", "0", ")", ")", ",", "batch_size", ")", ":", "\n", "            ", "src", ",", "dst", "=", "source", "[", "perm", "]", ",", "target", "[", "perm", "]", "\n", "pos_preds", "+=", "[", "predictor", "(", "outs", "[", "src", "]", ",", "outs", "[", "dst", "]", ")", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", "]", "\n", "", "pos_pred", "=", "torch", ".", "cat", "(", "pos_preds", ",", "dim", "=", "0", ")", "\n", "\n", "neg_preds", "=", "[", "]", "\n", "source", "=", "source", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "1000", ")", ".", "view", "(", "-", "1", ")", "\n", "target_neg", "=", "target_neg", ".", "view", "(", "-", "1", ")", "\n", "for", "perm", "in", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "range", "(", "source", ".", "size", "(", "0", ")", ")", ",", "batch_size", ")", ":", "\n", "            ", "src", ",", "dst_neg", "=", "source", "[", "perm", "]", ",", "target_neg", "[", "perm", "]", "\n", "neg_preds", "+=", "[", "predictor", "(", "outs", "[", "src", "]", ",", "outs", "[", "dst_neg", "]", ")", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", "]", "\n", "", "neg_pred", "=", "torch", ".", "cat", "(", "neg_preds", ",", "dim", "=", "0", ")", ".", "view", "(", "-", "1", ",", "1000", ")", "\n", "\n", "return", "evaluator", ".", "eval", "(", "{", "\n", "'y_pred_pos'", ":", "pos_pred", ",", "\n", "'y_pred_neg'", ":", "neg_pred", ",", "\n", "}", ")", "[", "'mrr_list'", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "train_mrr", "=", "test_split", "(", "'eval_train'", ")", "\n", "valid_mrr", "=", "test_split", "(", "'valid'", ")", "\n", "test_mrr", "=", "test_split", "(", "'test'", ")", "\n", "\n", "return", "train_mrr", ",", "valid_mrr", ",", "test_mrr", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.main_link.test_collab": [[248, 322], ["torch.no_grad", "torch.no_grad", "model.eval", "predictor.eval", "enumerate", "torch.cat", "torch.cat", "[].to", "[].to", "[].to", "[].to", "[].to", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.cat", "torch.cat", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.cat", "torch.cat", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.cat", "torch.cat", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.cat", "torch.cat", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.cat", "torch.cat", "main_link.prepare", "model", "torch.cat.append", "range", "pos_train_edge[].t", "range", "pos_valid_edge[].t", "range", "neg_valid_edge[].t", "range", "pos_test_edge[].t", "range", "neg_test_edge[].t", "evaluator.eval", "evaluator.eval", "evaluator.eval", "[].to.size", "predictor().squeeze().cpu", "[].to.size", "predictor().squeeze().cpu", "[].to.size", "predictor().squeeze().cpu", "[].to.size", "predictor().squeeze().cpu", "[].to.size", "predictor().squeeze().cpu", "ValueError", "predictor().squeeze", "predictor().squeeze", "predictor().squeeze", "predictor().squeeze", "predictor().squeeze", "predictor", "predictor", "predictor", "predictor", "predictor"], "function", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.main_node_inductive.prepare"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "test_collab", "(", "model", ",", "data", ",", "split_idx", ",", "evaluator", ",", "batch_size", ",", "device", ",", "use_gcn", ",", "conv_type", ",", "loader", ",", "\n", "split_edge", ",", "predictor", ",", "dataset", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "predictor", ".", "eval", "(", ")", "\n", "\n", "outs", "=", "[", "]", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "batch", "=", "batch", "[", "0", "]", "\n", "batch", "=", "prepare", "(", "batch", ",", "device", ")", "\n", "out", ",", "_", ",", "_", "=", "model", "(", "batch", ")", "\n", "outs", ".", "append", "(", "out", ")", "\n", "\n", "", "h", "=", "outs", "=", "torch", ".", "cat", "(", "outs", ",", "dim", "=", "0", ")", "\n", "\n", "pos_train_edge", "=", "split_edge", "[", "'train'", "]", "[", "'edge'", "]", ".", "to", "(", "h", ".", "device", ")", "\n", "pos_valid_edge", "=", "split_edge", "[", "'valid'", "]", "[", "'edge'", "]", ".", "to", "(", "h", ".", "device", ")", "\n", "neg_valid_edge", "=", "split_edge", "[", "'valid'", "]", "[", "'edge_neg'", "]", ".", "to", "(", "h", ".", "device", ")", "\n", "pos_test_edge", "=", "split_edge", "[", "'test'", "]", "[", "'edge'", "]", ".", "to", "(", "h", ".", "device", ")", "\n", "neg_test_edge", "=", "split_edge", "[", "'test'", "]", "[", "'edge_neg'", "]", ".", "to", "(", "h", ".", "device", ")", "\n", "\n", "pos_train_preds", "=", "[", "]", "\n", "for", "perm", "in", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "range", "(", "pos_train_edge", ".", "size", "(", "0", ")", ")", ",", "batch_size", ")", ":", "\n", "        ", "edge", "=", "pos_train_edge", "[", "perm", "]", ".", "t", "(", ")", "\n", "pos_train_preds", "+=", "[", "predictor", "(", "h", "[", "edge", "[", "0", "]", "]", ",", "h", "[", "edge", "[", "1", "]", "]", ")", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", "]", "\n", "", "pos_train_pred", "=", "torch", ".", "cat", "(", "pos_train_preds", ",", "dim", "=", "0", ")", "\n", "\n", "pos_valid_preds", "=", "[", "]", "\n", "for", "perm", "in", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "range", "(", "pos_valid_edge", ".", "size", "(", "0", ")", ")", ",", "batch_size", ")", ":", "\n", "        ", "edge", "=", "pos_valid_edge", "[", "perm", "]", ".", "t", "(", ")", "\n", "pos_valid_preds", "+=", "[", "predictor", "(", "h", "[", "edge", "[", "0", "]", "]", ",", "h", "[", "edge", "[", "1", "]", "]", ")", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", "]", "\n", "", "pos_valid_pred", "=", "torch", ".", "cat", "(", "pos_valid_preds", ",", "dim", "=", "0", ")", "\n", "\n", "neg_valid_preds", "=", "[", "]", "\n", "for", "perm", "in", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "range", "(", "neg_valid_edge", ".", "size", "(", "0", ")", ")", ",", "batch_size", ")", ":", "\n", "        ", "edge", "=", "neg_valid_edge", "[", "perm", "]", ".", "t", "(", ")", "\n", "neg_valid_preds", "+=", "[", "predictor", "(", "h", "[", "edge", "[", "0", "]", "]", ",", "h", "[", "edge", "[", "1", "]", "]", ")", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", "]", "\n", "", "neg_valid_pred", "=", "torch", ".", "cat", "(", "neg_valid_preds", ",", "dim", "=", "0", ")", "\n", "\n", "# h = model(data.x, data.full_adj_t)", "\n", "\n", "pos_test_preds", "=", "[", "]", "\n", "for", "perm", "in", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "range", "(", "pos_test_edge", ".", "size", "(", "0", ")", ")", ",", "batch_size", ")", ":", "\n", "        ", "edge", "=", "pos_test_edge", "[", "perm", "]", ".", "t", "(", ")", "\n", "pos_test_preds", "+=", "[", "predictor", "(", "h", "[", "edge", "[", "0", "]", "]", ",", "h", "[", "edge", "[", "1", "]", "]", ")", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", "]", "\n", "", "pos_test_pred", "=", "torch", ".", "cat", "(", "pos_test_preds", ",", "dim", "=", "0", ")", "\n", "\n", "neg_test_preds", "=", "[", "]", "\n", "for", "perm", "in", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "range", "(", "neg_test_edge", ".", "size", "(", "0", ")", ")", ",", "batch_size", ")", ":", "\n", "        ", "edge", "=", "neg_test_edge", "[", "perm", "]", ".", "t", "(", ")", "\n", "neg_test_preds", "+=", "[", "predictor", "(", "h", "[", "edge", "[", "0", "]", "]", ",", "h", "[", "edge", "[", "1", "]", "]", ")", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", "]", "\n", "", "neg_test_pred", "=", "torch", ".", "cat", "(", "neg_test_preds", ",", "dim", "=", "0", ")", "\n", "\n", "if", "dataset", "==", "'collab'", ":", "\n", "        ", "evaluator", ".", "K", "=", "K", "=", "50", "\n", "", "elif", "dataset", "==", "'ppa'", ":", "\n", "        ", "evaluator", ".", "K", "=", "K", "=", "100", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'not work'", ")", "\n", "", "train_hits", "=", "evaluator", ".", "eval", "(", "{", "\n", "'y_pred_pos'", ":", "pos_train_pred", ",", "\n", "'y_pred_neg'", ":", "neg_valid_pred", ",", "\n", "}", ")", "[", "f'hits@{K}'", "]", "\n", "valid_hits", "=", "evaluator", ".", "eval", "(", "{", "\n", "'y_pred_pos'", ":", "pos_valid_pred", ",", "\n", "'y_pred_neg'", ":", "neg_valid_pred", ",", "\n", "}", ")", "[", "f'hits@{K}'", "]", "\n", "test_hits", "=", "evaluator", ".", "eval", "(", "{", "\n", "'y_pred_pos'", ":", "pos_test_pred", ",", "\n", "'y_pred_neg'", ":", "neg_test_pred", ",", "\n", "}", ")", "[", "f'hits@{K}'", "]", "\n", "\n", "\n", "return", "train_hits", ",", "valid_hits", ",", "test_hits", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.main_link.main": [[325, 513], ["utils.parser.parse", "torch.device", "torch.device", "utils.dataloader.OurDataLoader", "utils.dataloader.OurDataLoader", "ogb.linkproppred.Evaluator", "utils.logger.Logger", "ogb.linkproppred.PygLinkPropPredDataset.get_edge_split", "range", "utils.logger.Logger.print_statistics", "torch.cuda.is_available", "torch.cuda.is_available", "ogb.linkproppred.PygLinkPropPredDataset", "data.adj_t.to_symmetric", "data.adj_t.sum().to.pow", "data.adj_t.sum().to.pow", "models.LowRankGNN1Layer().to", "models.LowRankGNN().to", "LinkPredictor().to", "torch.manual_seed", "torch.manual_seed", "main_link.init", "print", "torch.optim.RMSprop", "torch.optim.RMSprop", "range", "utils.logger.Logger.print_statistics", "ogb.linkproppred.PygLinkPropPredDataset", "data.edge_weight.view().to", "ValueError", "data.adj_t.sum().to", "deg.pow.view", "data.adj_t.sum().to", "data.adj_t.sum().to.pow", "ValueError", "torch.randperm", "torch.randperm", "time.time", "main_link.train", "str", "time.time", "test", "str", "print", "utils.logger.Logger.add_result", "torch_geometric.ToSparseTensor", "torch_geometric.ToSparseTensor", "deg.pow.view", "deg.pow.view", "data.adj_t.sum().to.pow", "ValueError", "models.LowRankGNN1Layer", "models.LowRankGNN", "main_link.LinkPredictor", "[].numel", "list", "list", "datetime.timedelta", "datetime.timedelta", "print", "data.edge_weight.view", "data.adj_t.sum", "float", "data.adj_t.sum", "data.adj_t.sum().to", "deg.pow.view", "LowRankGNN().to.parameters", "LinkPredictor().to.parameters", "ValueError", "float", "data.adj_t.sum", "float", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.parser.parse", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.Logger.print_statistics", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_link.init", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.Logger.print_statistics", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_link.train", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_node.test", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.Logger.add_result"], ["", "def", "main", "(", ")", ":", "\n", "\n", "    ", "args", "=", "parse", "(", ")", "\n", "# if args.exp :", "\n", "#     experiment = Experiment(", "\n", "#         api_key=\"\",", "\n", "#         project_name=\"\",", "\n", "#         workspace=\"\",", "\n", "#     )", "\n", "#     experiment.set_name(args.exp_name)", "\n", "#     experiment.log_code(folder='.')", "\n", "#     experiment.add_tag(args.exp_tag)", "\n", "\n", "device", "=", "f'cuda:{args.device}'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "device", "=", "torch", ".", "device", "(", "device", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "'citation2'", ":", "\n", "        ", "dataset", "=", "PygLinkPropPredDataset", "(", "name", "=", "f'ogbl-{args.dataset}'", ",", "\n", "transform", "=", "T", ".", "ToSparseTensor", "(", ")", ",", "\n", "root", "=", "'/cmlscratch/kong/datasets/ogb'", ")", "\n", "data", "=", "dataset", "[", "0", "]", "\n", "", "elif", "args", ".", "dataset", "==", "'collab'", ":", "\n", "        ", "dataset", "=", "PygLinkPropPredDataset", "(", "name", "=", "f'ogbl-{args.dataset}'", ",", "\n", "root", "=", "'/cmlscratch/kong/datasets/ogb'", ")", "\n", "data", "=", "dataset", "[", "0", "]", "\n", "data", ".", "edge_weight", "=", "data", ".", "edge_weight", ".", "view", "(", "-", "1", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "data", "=", "T", ".", "ToSparseTensor", "(", ")", "(", "data", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Dataset not supported!'", ")", "\n", "\n", "", "if", "args", ".", "test_batch_size", "<=", "0", ":", "\n", "        ", "args", ".", "test_batch_size", "=", "data", ".", "x", ".", "shape", "[", "0", "]", "\n", "\n", "", "if", "args", ".", "dataset", "==", "'citation2'", ":", "\n", "        ", "data", ".", "adj_t", "=", "data", ".", "adj_t", ".", "to_symmetric", "(", ")", "\n", "\n", "", "if", "args", ".", "conv_type", "==", "'GCN'", ":", "\n", "        ", "deg", "=", "data", ".", "adj_t", ".", "sum", "(", "dim", "=", "1", ")", ".", "to", "(", "torch", ".", "float", ")", "+", "1", "\n", "data", ".", "deg", "=", "deg", "\n", "deg_inv_sqrt", "=", "deg", ".", "pow", "(", "-", "1", "/", "2", ")", "\n", "deg_inv_sqrt", "[", "deg_inv_sqrt", "==", "float", "(", "'inf'", ")", "]", "=", "0", "\n", "deg_inv", "=", "deg", ".", "pow", "(", "-", "1", ")", "\n", "data", ".", "deg_inv", "=", "deg_inv", "\n", "data", ".", "adj_t", "=", "deg_inv_sqrt", ".", "view", "(", "-", "1", ",", "1", ")", "*", "data", ".", "adj_t", "*", "deg_inv_sqrt", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "", "elif", "args", ".", "conv_type", "==", "'SAGE'", ":", "\n", "        ", "deg", "=", "data", ".", "adj_t", ".", "sum", "(", "dim", "=", "1", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "data", ".", "deg", "=", "deg", "\n", "deg_inv", "=", "deg", ".", "pow", "(", "-", "1", ")", "\n", "data", ".", "deg_inv", "=", "deg_inv", "\n", "deg_inv", "[", "deg_inv", "==", "float", "(", "'inf'", ")", "]", "=", "0", "\n", "data", ".", "adj_t", "=", "deg_inv", ".", "view", "(", "-", "1", ",", "1", ")", "*", "data", ".", "adj_t", "\n", "", "elif", "args", ".", "conv_type", "==", "'GAT'", ":", "\n", "        ", "deg", "=", "data", ".", "adj_t", ".", "sum", "(", "dim", "=", "1", ")", ".", "to", "(", "torch", ".", "float", ")", "+", "1", "\n", "data", ".", "deg", "=", "deg", "\n", "deg_inv", "=", "deg", ".", "pow", "(", "-", "1", ")", "\n", "data", ".", "deg_inv", "=", "deg_inv", "\n", "deg_inv", "[", "deg_inv", "==", "float", "(", "'inf'", ")", "]", "=", "0", "\n", "data", ".", "adj_t", "=", "deg_inv", ".", "view", "(", "-", "1", ",", "1", ")", "*", "data", ".", "adj_t", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'GNN conv type not supported'", ")", "\n", "\n", "", "train_loader", "=", "OurDataLoader", "(", "data", ",", "gnn_type", "=", "args", ".", "conv_type", ",", "sampler_type", "=", "args", ".", "sampler_type", ",", "\n", "walk_length", "=", "args", ".", "walk_length", ",", "recovery_flag", "=", "args", ".", "recovery_flag", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "cont_sliding_window", "=", "args", ".", "cont_sliding_window", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "\n", "test_loader", "=", "OurDataLoader", "(", "data", ",", "gnn_type", "=", "args", ".", "conv_type", ",", "sampler_type", "=", "'node'", ",", "train_flag", "=", "False", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "\n", "evaluator", "=", "Evaluator", "(", "name", "=", "f'ogbl-{args.dataset}'", ")", "\n", "logger", "=", "Logger", "(", "args", ".", "runs", ",", "args", ")", "\n", "\n", "num_N", "=", "data", ".", "x", ".", "shape", "[", "0", "]", "\n", "if", "args", ".", "split", ":", "\n", "        ", "if", "data", ".", "num_features", "%", "args", ".", "num_D", "!=", "0", "or", "args", ".", "hidden_channels", "%", "args", ".", "num_D", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'Cannot fully split original features'", ")", "\n", "# args.num_branch = int(data.num_features/args.num_D)", "\n", "\n", "", "", "if", "args", ".", "batch_size", "<=", "0", ":", "\n", "        ", "args", ".", "batch_size", "=", "data", ".", "num_nodes", "\n", "\n", "", "if", "args", ".", "num_layers", "==", "1", ":", "\n", "        ", "model", "=", "LowRankGNN1Layer", "(", "data", ".", "num_features", ",", "args", ".", "hidden_channels", ",", "dataset", ".", "num_classes", ",", "\n", "args", ".", "num_layers", ",", "args", ".", "dropout", ",", "args", ".", "num_M", ",", "args", ".", "num_D", ",", "num_N", ",", "\n", "args", ".", "num_branch", ",", "args", ".", "cluster", ",", "args", ".", "ln_para", ",", "args", ".", "no_second_fc", ",", "\n", "args", ".", "kmeans_iter", ",", "args", ".", "EMA", ",", "args", ".", "split", ",", "args", ".", "kmeans_init", ",", "\n", "args", ".", "dropbranch", ",", "args", ".", "skip", ",", "args", ".", "use_gcn", ",", "args", ".", "commitment_cost", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "else", ":", "\n", "        ", "model", "=", "LowRankGNN", "(", "data", ".", "num_features", ",", "args", ".", "hidden_channels", ",", "args", ".", "hidden_channels", ",", "\n", "args", ".", "num_layers", ",", "args", ".", "dropout", ",", "args", ".", "num_M", ",", "args", ".", "num_D", ",", "num_N", ",", "\n", "args", ".", "num_branch", ",", "args", ".", "cluster", ",", "args", ".", "ln_para", ",", "args", ".", "no_second_fc", ",", "\n", "args", ".", "kmeans_iter", ",", "args", ".", "EMA", ",", "args", ".", "split", ",", "args", ".", "kmeans_init", ",", "\n", "args", ".", "dropbranch", ",", "args", ".", "skip", ",", "args", ".", "use_gcn", ",", "args", ".", "commitment_cost", ",", "\n", "args", ".", "grad_scale", ",", "args", ".", "act", ",", "args", ".", "weight_ahead", ",", "args", ".", "bn_flag", ",", "\n", "args", ".", "warm_up", ",", "args", ".", "momentum", ",", "args", ".", "conv_type", ",", "args", ".", "transformer_flag", ")", ".", "to", "(", "device", ")", "\n", "predictor", "=", "LinkPredictor", "(", "args", ".", "hidden_channels", ",", "args", ".", "hidden_channels", ",", "1", ",", "\n", "args", ".", "num_layers", ",", "args", ".", "dropout", ")", ".", "to", "(", "device", ")", "\n", "\n", "\n", "", "split_edge", "=", "dataset", ".", "get_edge_split", "(", ")", "\n", "if", "args", ".", "dataset", "==", "'citation2'", ":", "\n", "# We randomly pick some training samples that we want to evaluate on:", "\n", "        ", "torch", ".", "manual_seed", "(", "12345", ")", "\n", "idx", "=", "torch", ".", "randperm", "(", "split_edge", "[", "'train'", "]", "[", "'source_node'", "]", ".", "numel", "(", ")", ")", "[", ":", "86596", "]", "\n", "split_edge", "[", "'eval_train'", "]", "=", "{", "\n", "'source_node'", ":", "split_edge", "[", "'train'", "]", "[", "'source_node'", "]", "[", "idx", "]", ",", "\n", "'target_node'", ":", "split_edge", "[", "'train'", "]", "[", "'target_node'", "]", "[", "idx", "]", ",", "\n", "'target_node_neg'", ":", "split_edge", "[", "'valid'", "]", "[", "'target_node_neg'", "]", ",", "\n", "}", "\n", "\n", "\n", "", "for", "run", "in", "range", "(", "args", ".", "runs", ")", ":", "\n", "# exp_log_f = lambda x=None : exp_log(experiment, model, args.num_layers, args.num_D, args.num_M,", "\n", "#                                     args.use_gcn, args.conv_type)", "\n", "\n", "# model.reset_parameters()", "\n", "        ", "init", "(", "model", ",", "device", ",", "test_loader", ")", "\n", "print", "(", "'init done'", ")", "\n", "\n", "# start = time.time()", "\n", "# result = test(model, data, split_idx, evaluator, args.test_batch_size, device, args.use_gcn,", "\n", "#               args.conv_type, test_loader)", "\n", "# elapsed_inference = str(timedelta(seconds=time.time() - start))", "\n", "# print(f'inference time: {elapsed_inference}')", "\n", "\n", "# optimizer = torch.optim.Adam(model.parameters(), lr=args.lr)", "\n", "# optimizer = torch.optim.Adam(model.parameters(), lr=args.lr, betas=(0.5, 0.999))", "\n", "optimizer", "=", "torch", ".", "optim", ".", "RMSprop", "(", "list", "(", "model", ".", "parameters", "(", ")", ")", "+", "list", "(", "predictor", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "args", ".", "lr", ",", "alpha", "=", "0.99", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "1", "+", "args", ".", "epochs", ")", ":", "\n", "            ", "if", "args", ".", "sche", ":", "\n", "                ", "for", "g", "in", "optimizer", ".", "param_groups", ":", "\n", "                    ", "g", "[", "'lr'", "]", "=", "args", ".", "lr", "*", "epoch", "/", "200", "if", "epoch", "<", "200", "else", "args", ".", "lr", "\n", "", "", "start", "=", "time", ".", "time", "(", ")", "\n", "if", "args", ".", "warm_up", "and", "epoch", "<=", "args", ".", "warm_up_epochs", ":", "\n", "                ", "warm_up_rate", "=", "epoch", "/", "args", ".", "warm_up_epochs", "\n", "", "else", ":", "\n", "                ", "warm_up_rate", "=", "1", "\n", "\n", "", "loss", ",", "loss_cls", ",", "batch_forward_time", ",", "batch_backward_time", "=", "train", "(", "model", ",", "data", ",", "args", ".", "batch_size", ",", "None", ",", "optimizer", ",", "device", ",", "args", ".", "commitment_cost", ",", "\n", "args", ".", "use_gcn", ",", "warm_up_rate", ",", "args", ".", "ce_only", ",", "None", ",", "args", ".", "exp", ",", "args", ".", "conv_type", ",", "\n", "args", ".", "clip", ",", "args", ".", "num_layers", ",", "train_loader", ",", "predictor", ")", "\n", "\n", "# loss, loss_cls, batch_forward_time, batch_backward_time = \\", "\n", "#     separate_train(model, data, args.batch_size, train_bool, optimizer, device, args.commitment_cost,", "\n", "#           args.use_gcn, warm_up_rate, args.ce_only, exp_log_f, args.exp, args.conv_type,", "\n", "#           args.clip, args.num_layers, train_idx)", "\n", "\n", "elapsed", "=", "str", "(", "timedelta", "(", "seconds", "=", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "'citation2'", ":", "\n", "                ", "test", "=", "test_citation2", "\n", "", "elif", "args", ".", "dataset", "==", "'collab'", "or", "args", ".", "dataset", "==", "'ppa'", ":", "\n", "                ", "test", "=", "test_collab", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'dataset not supported'", ")", "\n", "\n", "", "result", "=", "test", "(", "model", ",", "data", ",", "None", ",", "evaluator", ",", "args", ".", "test_batch_size", ",", "device", ",", "args", ".", "use_gcn", ",", "\n", "args", ".", "conv_type", ",", "test_loader", ",", "split_edge", ",", "predictor", ",", "args", ".", "dataset", ")", "\n", "elapsed_inference", "=", "str", "(", "timedelta", "(", "seconds", "=", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "print", "(", "f'Epoch time:{elapsed}, inference time:{elapsed_inference}, '", "\n", "f'batch_forward_time:{batch_forward_time:.2f}, '", "\n", "f'batch_backward_time:{batch_backward_time:.2f}'", ")", "\n", "\n", "logger", ".", "add_result", "(", "run", ",", "result", ")", "\n", "\n", "if", "epoch", "%", "args", ".", "log_steps", "==", "0", ":", "\n", "                ", "train_acc", ",", "valid_acc", ",", "test_acc", "=", "result", "\n", "print", "(", "f'Run: {run + 1}, '", "\n", "f'Epoch: {epoch}, '", "\n", "f'Loss: {loss:.4f}, '", "\n", "f'Loss Cls: {loss_cls:.4f}, '", "\n", "f'Train: {100 * train_acc:.2f}%, '", "\n", "f'Valid: {100 * valid_acc:.2f}%, '", "\n", "f'Test: {100 * test_acc:.2f}%'", ")", "\n", "\n", "# if args.exp:", "\n", "#     experiment.log_metric('train_acc', train_acc)", "\n", "#     experiment.log_metric('valid_acc', valid_acc)", "\n", "#     experiment.log_metric('test_acc', test_acc)", "\n", "#     experiment.log_metric('train_loss', loss_cls)", "\n", "\n", "", "", "logger", ".", "print_statistics", "(", "run", ")", "\n", "", "logger", ".", "print_statistics", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.main_node_inductive.prepare": [[27, 42], ["x.to", "deg_inv.to", "A_BN[].to", "A_BN[].to", "A_BN[].to", "A_NB_v.to", "A_BB[].to", "A_BB[].to", "A_BB[].to"], "function", ["None"], ["def", "prepare", "(", "batch", ",", "device", ")", ":", "\n", "    ", "x", ",", "deg_inv", ",", "A_BN", ",", "A_BB", ",", "A_NB_v", ",", "batch_idx", "=", "batch", "\n", "\n", "x", ",", "deg_inv", "=", "x", ".", "to", "(", "device", ")", ",", "deg_inv", ".", "to", "(", "device", ")", "\n", "row", ",", "col", ",", "value", "=", "A_BN", "[", "0", "]", ".", "to", "(", "device", ")", ",", "A_BN", "[", "1", "]", ".", "to", "(", "device", ")", ",", "A_BN", "[", "2", "]", ".", "to", "(", "device", ")", "\n", "A_BN", "=", "row", ",", "col", ",", "value", "\n", "\n", "if", "A_BB", "is", "not", "None", ":", "\n", "        ", "row", ",", "col", ",", "value", "=", "A_BB", "[", "0", "]", ".", "to", "(", "device", ")", ",", "A_BB", "[", "1", "]", ".", "to", "(", "device", ")", ",", "A_BB", "[", "2", "]", ".", "to", "(", "device", ")", "\n", "A_BB", "=", "row", ",", "col", ",", "value", "\n", "", "A_NB_v", "=", "A_NB_v", ".", "to", "(", "device", ")", "if", "A_NB_v", "is", "not", "None", "else", "None", "\n", "\n", "batch", "=", "x", ",", "(", "deg_inv", ",", "A_BN", ",", "A_BB", ",", "A_NB_v", ",", "batch_idx", ")", "\n", "\n", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.main_node_inductive.train": [[43, 135], ["utils.logger.AverageValueMeter", "utils.logger.AverageValueMeter", "utils.logger.AverageValueMeter", "utils.logger.AverageValueMeter", "model.train", "enumerate", "data.y.dim", "enumerate", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "main_node_inductive.prepare", "optimizer.zero_grad", "time.time", "model", "utils.logger.AverageValueMeter.add", "main_node_inductive.compute_micro_f1", "print", "criterion", "time.time", "loss.backward", "utils.logger.AverageValueMeter.add", "range", "utils.logger.AverageValueMeter.add", "utils.logger.AverageValueMeter.add", "utils.logger.AverageValueMeter.value", "utils.logger.AverageValueMeter.value", "utils.logger.AverageValueMeter.value", "utils.logger.AverageValueMeter.value", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "data.y.squeeze", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.sum().item", "torch.sum().item", "[].to", "[].to", "range", "transform.parameters", "torch.norm().item", "torch.norm().item", "w_grad_norms.append", "exp_log_f", "optimizer.step", "loss.item", "criterion.item", "time.time", "time.time", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.norm().item", "torch.norm().item", "a_grad_norms.append", "w_grads.append", "len", "torch.sum", "torch.sum", "model.convs[].gnn_transform.parameters", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "param.grad.view", "torch.norm", "torch.norm", "model.convs[].gnn_block.parameters", "torch.norm", "torch.norm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gat_conv.att_l.grad.view", "gat_conv.att_r.grad.view"], "function", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_link.train", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.main_node_inductive.prepare", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.add", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.compute_micro_f1", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.add", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.add", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.add", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.value", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.value", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.value", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.value", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.scheduler.GradualWarmupScheduler.step"], ["", "def", "train", "(", "model", ",", "data", ",", "batch_size", ",", "train_bool", ",", "optimizer", ",", "device", ",", "commitment_cost", ",", "use_gcn", ",", "warm_up_rate", ",", "\n", "ce_only", ",", "exp_log_f", ",", "exp_flag", ",", "conv_type", ",", "clip", ",", "num_layers", ",", "loader", ",", "test_f", ",", "experiment", ")", ":", "\n", "    ", "batch_forward_time_meter", "=", "AverageValueMeter", "(", ")", "\n", "batch_backward_time_meter", "=", "AverageValueMeter", "(", ")", "\n", "loss_cls_meter", "=", "AverageValueMeter", "(", ")", "\n", "loss_meter", "=", "AverageValueMeter", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "if", "data", ".", "y", ".", "dim", "(", ")", ">", "1", ":", "\n", "        ", "if", "data", ".", "y", ".", "shape", "[", "-", "1", "]", ">", "1", ":", "\n", "            ", "y", ",", "criterion", "=", "data", ".", "y", ",", "torch", ".", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "", "else", ":", "\n", "            ", "y", ",", "criterion", "=", "data", ".", "y", ".", "squeeze", "(", "1", ")", ",", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "y", ",", "criterion", "=", "data", ".", "y", ",", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "", "for", "i", ",", "batches", "in", "enumerate", "(", "loader", ")", ":", "\n", "\n", "        ", "for", "j", ",", "batch", "in", "enumerate", "(", "batches", ")", ":", "\n", "\n", "            ", "batch_idx", "=", "batch", "[", "-", "1", "]", "\n", "# if current batch has no training sample, continue", "\n", "if", "torch", ".", "sum", "(", "train_bool", "[", "batch_idx", "]", ")", ".", "item", "(", ")", "<=", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "batch", "=", "prepare", "(", "batch", ",", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "out", ",", "vq_losses", ",", "info_backward", "=", "model", "(", "batch", ",", "warm_up_rate", ")", "\n", "\n", "batch_forward_time_meter", ".", "add", "(", "time", ".", "time", "(", ")", "-", "start", ")", "\n", "out", "=", "out", "[", "train_bool", "[", "batch_idx", "]", "]", "\n", "\n", "\n", "score", "=", "compute_micro_f1", "(", "out", ",", "y", "[", "batch_idx", "]", "[", "train_bool", "[", "batch_idx", "]", "]", ".", "to", "(", "device", ")", ")", "\n", "print", "(", "f'Batch {i}, train acc:{score}'", ")", "\n", "loss_cls", "=", "criterion", "(", "out", ",", "y", "[", "batch_idx", "]", "[", "train_bool", "[", "batch_idx", "]", "]", ".", "to", "(", "device", ")", ")", "\n", "\n", "if", "commitment_cost", ">", "0", ":", "\n", "                ", "loss", "=", "loss_cls", "+", "info_backward", "+", "vq_losses", "\n", "", "else", ":", "\n", "                ", "loss", "=", "loss_cls", "+", "info_backward", "\n", "", "if", "ce_only", ":", "\n", "                ", "loss", "=", "loss_cls", "\n", "\n", "# print('Train loss:', loss.item())", "\n", "\n", "", "start", "=", "time", ".", "time", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "batch_backward_time_meter", ".", "add", "(", "time", ".", "time", "(", ")", "-", "start", ")", "\n", "\n", "if", "clip", "is", "not", "None", ":", "\n", "                ", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "                    ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "convs", "[", "i", "]", ".", "gnn_transform", ".", "parameters", "(", ")", ",", "clip", "[", "0", "]", ")", "\n", "if", "conv_type", "==", "'GAT'", ":", "# TODO: transformer case", "\n", "                        ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "convs", "[", "i", "]", ".", "gnn_block", ".", "parameters", "(", ")", ",", "clip", "[", "1", "]", ")", "\n", "\n", "", "", "", "a_grad_norms", ",", "w_grad_norms", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "                ", "if", "conv_type", "==", "'GAT'", ":", "\n", "                    ", "gat_conv", "=", "model", ".", "convs", "[", "i", "]", ".", "gnn_block", "[", "0", "]", ".", "conv", "\n", "a_grad_norm", "=", "torch", ".", "norm", "(", "torch", ".", "cat", "(", "[", "gat_conv", ".", "att_l", ".", "grad", ".", "view", "(", "-", "1", ")", ",", "gat_conv", ".", "att_r", ".", "grad", ".", "view", "(", "-", "1", ")", "]", ")", ")", ".", "item", "(", ")", "\n", "a_grad_norms", ".", "append", "(", "a_grad_norm", ")", "\n", "\n", "", "transform", "=", "model", ".", "convs", "[", "i", "]", ".", "gnn_transform", "\n", "w_grads", "=", "[", "]", "\n", "for", "param", "in", "transform", ".", "parameters", "(", ")", ":", "\n", "                    ", "w_grads", ".", "append", "(", "param", ".", "grad", ".", "view", "(", "-", "1", ")", ")", "\n", "", "w_grad_norm", "=", "torch", ".", "norm", "(", "torch", ".", "cat", "(", "w_grads", ")", ")", ".", "item", "(", ")", "\n", "w_grad_norms", ".", "append", "(", "w_grad_norm", ")", "\n", "\n", "", "model", ".", "a_grad_norms", ",", "model", ".", "w_grad_norms", "=", "a_grad_norms", ",", "w_grad_norms", "\n", "\n", "if", "exp_flag", ":", "\n", "                ", "exp_log_f", "(", ")", "\n", "\n", "", "if", "j", "==", "0", "and", "len", "(", "batches", ")", ">", "1", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "loss_meter", ".", "add", "(", "loss", ".", "item", "(", ")", ")", "\n", "loss_cls_meter", ".", "add", "(", "loss_cls", ".", "item", "(", ")", ")", "\n", "# print(torch.cuda.max_memory_allocated(device=device)/1e+6)", "\n", "\n", "# train_acc, valid_acc, test_acc = test_f()", "\n", "# experiment.log_metric('curve_train_acc', train_acc)", "\n", "# experiment.log_metric('curve_valid_acc', valid_acc)", "\n", "# experiment.log_metric('curve_test_acc', test_acc)", "\n", "\n", "", "", "return", "loss_meter", ".", "value", "(", ")", "[", "0", "]", ",", "loss_cls_meter", ".", "value", "(", ")", "[", "0", "]", ",", "batch_forward_time_meter", ".", "value", "(", ")", "[", "0", "]", ",", "batch_backward_time_meter", ".", "value", "(", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.main_node_inductive.init": [[137, 190], ["model.train", "range", "print", "torch.no_grad", "torch.no_grad", "enumerate", "main_node_inductive.prepare", "model.init", "print", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated"], "function", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_link.train", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.main_node_inductive.prepare", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_link.init"], ["", "def", "init", "(", "model", ",", "device", ",", "loader", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "\n", "for", "layer_idx", "in", "range", "(", "1", ",", "model", ".", "num_layers", "+", "1", ")", ":", "\n", "        ", "print", "(", "layer_idx", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "batch", "in", "enumerate", "(", "loader", ")", ":", "\n", "                ", "batch", "=", "batch", "[", "0", "]", "\n", "batch", "=", "prepare", "(", "batch", ",", "device", ")", "\n", "model", ".", "init", "(", "batch", ",", "layer_idx", ")", "\n", "\n", "print", "(", "torch", ".", "cuda", ".", "max_memory_allocated", "(", "device", "=", "device", ")", "/", "1e+6", ")", "\n", "\n", "", "", "", "for", "layer", "in", "model", ".", "convs", ":", "\n", "        ", "for", "gnn_block", "in", "layer", ".", "gnn_block", ":", "\n", "            ", "gnn_block", ".", "inited", "=", "True", "\n", "\n", "# for layer_idx in reversed(range(1, model.num_layers+1)) :", "\n", "#     print(layer_idx)", "\n", "#", "\n", "#     rand_idx = torch.randperm(data.num_nodes)", "\n", "#     num_batches = ceil(data.num_nodes / batch_size)", "\n", "#     for i in range(num_batches) :", "\n", "#", "\n", "#         if (i+1)*batch_size > data.num_nodes :", "\n", "#             batch_idx = rand_idx[i * batch_size:data.num_nodes]", "\n", "#         else :", "\n", "#             batch_idx = rand_idx[i*batch_size:(i+1)*batch_size]", "\n", "#", "\n", "#         loss_func = lambda x: F.cross_entropy(x[train_bool[batch_idx]],", "\n", "#                                               data.y.squeeze(1)[batch_idx][train_bool[batch_idx]].to(device))", "\n", "#", "\n", "#         if use_gcn :", "\n", "#             if conv_type.startswith('SAGE'):", "\n", "#                 A = (data.adj_t[batch_idx].to(device), data.adj_t[:, batch_idx].to(device))", "\n", "#             else:", "\n", "#                 A = data.adj_t[batch_idx].to(device)", "\n", "#             model.grad_init(data.x[batch_idx].to(device), A, batch_idx,", "\n", "#                         layer_idx, loss_func, data.deg[batch_idx].to(device))", "\n", "#         else :", "\n", "#             if conv_type.startswith('degree-GAT') :", "\n", "#                 A = (data.adj_t[batch_idx].to(device), data.adj_t[:, batch_idx].to(device))", "\n", "#                 model.grad_init(data.x[batch_idx].to(device), A, batch_idx,", "\n", "#                                 layer_idx, loss_func, data.deg[batch_idx].to(device))", "\n", "#             else :", "\n", "#                 model.grad_init(data.x[batch_idx].to(device), data.adj_t[batch_idx].to(device), batch_idx,", "\n", "#                             layer_idx, loss_func)", "\n", "\n", "", "", "for", "layer", "in", "model", ".", "convs", ":", "\n", "        ", "for", "gnn_block", "in", "layer", ".", "gnn_block", ":", "\n", "            ", "gnn_block", ".", "kmeans_init", "=", "False", "\n", "gnn_block", ".", "grad_kmeans_init", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.main_node_inductive.compute_micro_f1": [[191, 211], ["y.dim", "int", "int", "int", "int", "y.size", "logits.argmax().eq().sum", "logits.argmax().eq", "logits.argmax"], "function", ["None"], ["", "", "", "def", "compute_micro_f1", "(", "logits", ",", "y", ",", "mask", "=", "None", ")", "->", "float", ":", "\n", "    ", "if", "mask", "is", "not", "None", ":", "\n", "        ", "logits", ",", "y", "=", "logits", "[", "mask", "]", ",", "y", "[", "mask", "]", "\n", "\n", "", "if", "y", ".", "dim", "(", ")", "==", "1", ":", "\n", "        ", "return", "int", "(", "logits", ".", "argmax", "(", "dim", "=", "-", "1", ")", ".", "eq", "(", "y", ")", ".", "sum", "(", ")", ")", "/", "y", ".", "size", "(", "0", ")", "\n", "", "else", ":", "\n", "        ", "y_pred", "=", "logits", ">", "0", "\n", "y_true", "=", "y", ">", "0.5", "\n", "\n", "tp", "=", "int", "(", "(", "y_true", "&", "y_pred", ")", ".", "sum", "(", ")", ")", "\n", "fp", "=", "int", "(", "(", "~", "y_true", "&", "y_pred", ")", ".", "sum", "(", ")", ")", "\n", "fn", "=", "int", "(", "(", "y_true", "&", "~", "y_pred", ")", ".", "sum", "(", ")", ")", "\n", "\n", "try", ":", "\n", "            ", "precision", "=", "tp", "/", "(", "tp", "+", "fp", ")", "\n", "recall", "=", "tp", "/", "(", "tp", "+", "fn", ")", "\n", "return", "2", "*", "(", "precision", "*", "recall", ")", "/", "(", "precision", "+", "recall", ")", "\n", "", "except", "ZeroDivisionError", ":", "\n", "            ", "return", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.main_node_inductive.test": [[212, 245], ["torch.no_grad", "torch.no_grad", "model.eval", "enumerate", "torch.cat", "torch.cat", "main_node_inductive.prepare", "model", "torch.cat.append", "torch.cat.argmax", "main_node_inductive.compute_micro_f1", "main_node_inductive.compute_micro_f1", "main_node_inductive.compute_micro_f1", "evaluator.eval", "evaluator.eval", "evaluator.eval", "data.y.to", "data.y.to", "data.y.to", "data.y[].to", "data.y[].to", "data.y[].to"], "function", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.main_node_inductive.prepare", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.compute_micro_f1", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.compute_micro_f1", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.compute_micro_f1"], ["", "", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "test", "(", "model", ",", "data", ",", "device", ",", "loader", ",", "dataset", ",", "split_idx", ",", "evaluator", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "outs", "=", "[", "]", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "batch", "=", "batch", "[", "0", "]", "\n", "batch", "=", "prepare", "(", "batch", ",", "device", ")", "\n", "out", ",", "_", ",", "_", "=", "model", "(", "batch", ")", "\n", "outs", ".", "append", "(", "out", ")", "\n", "\n", "", "outs", "=", "torch", ".", "cat", "(", "outs", ",", "dim", "=", "0", ")", "\n", "\n", "if", "dataset", "in", "{", "'arxiv'", ",", "'products'", "}", ":", "\n", "        ", "y_pred", "=", "outs", ".", "argmax", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "train_acc", "=", "evaluator", ".", "eval", "(", "{", "\n", "'y_true'", ":", "data", ".", "y", "[", "split_idx", "[", "'train'", "]", "]", ".", "to", "(", "device", ")", ",", "\n", "'y_pred'", ":", "y_pred", "[", "split_idx", "[", "'train'", "]", "]", ",", "\n", "}", ")", "[", "'acc'", "]", "\n", "valid_acc", "=", "evaluator", ".", "eval", "(", "{", "\n", "'y_true'", ":", "data", ".", "y", "[", "split_idx", "[", "'valid'", "]", "]", ".", "to", "(", "device", ")", ",", "\n", "'y_pred'", ":", "y_pred", "[", "split_idx", "[", "'valid'", "]", "]", ",", "\n", "}", ")", "[", "'acc'", "]", "\n", "test_acc", "=", "evaluator", ".", "eval", "(", "{", "\n", "'y_true'", ":", "data", ".", "y", "[", "split_idx", "[", "'test'", "]", "]", ".", "to", "(", "device", ")", ",", "\n", "'y_pred'", ":", "y_pred", "[", "split_idx", "[", "'test'", "]", "]", ",", "\n", "}", ")", "[", "'acc'", "]", "\n", "", "else", ":", "\n", "        ", "train_acc", "=", "compute_micro_f1", "(", "outs", ",", "data", ".", "y", ".", "to", "(", "device", ")", ",", "data", ".", "train_mask", ")", "\n", "valid_acc", "=", "compute_micro_f1", "(", "outs", ",", "data", ".", "y", ".", "to", "(", "device", ")", ",", "data", ".", "val_mask", ")", "\n", "test_acc", "=", "compute_micro_f1", "(", "outs", ",", "data", ".", "y", ".", "to", "(", "device", ")", ",", "data", ".", "test_mask", ")", "\n", "\n", "", "return", "train_acc", ",", "valid_acc", ",", "test_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.main_node_inductive.test_inference": [[246, 261], ["torch.no_grad", "torch.no_grad", "model.eval", "enumerate", "torch.cat", "torch.cat", "main_node_inductive.compute_micro_f1", "main_node_inductive.prepare", "model", "torch.cat.append", "data.y.to"], "function", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.compute_micro_f1", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.main_node_inductive.prepare"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "test_inference", "(", "model", ",", "data", ",", "device", ",", "loader", ",", "infer", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "outs", "=", "[", "]", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "batch", "=", "batch", "[", "0", "]", "\n", "batch", "=", "prepare", "(", "batch", ",", "device", ")", "\n", "out", ",", "_", ",", "_", "=", "model", "(", "batch", ",", "infer", "=", "infer", ")", "\n", "outs", ".", "append", "(", "out", ")", "\n", "\n", "", "outs", "=", "torch", ".", "cat", "(", "outs", ",", "dim", "=", "0", ")", "\n", "\n", "result", "=", "compute_micro_f1", "(", "outs", ",", "data", ".", "y", ".", "to", "(", "device", ")", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.main_node_inductive.main": [[263, 498], ["utils.parser.parse", "torch.device", "torch.device", "utils.logger.Logger", "utils.dataloader.OurDataLoader", "utils.dataloader.OurDataLoader", "range", "utils.logger.Logger.print_statistics", "torch.cuda.is_available", "torch.cuda.is_available", "ogb.nodeproppred.PygNodePropPredDataset", "Batch.from_data_list.adj_t.to_symmetric", "main_node_inductive.main.norm_adj"], "function", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.parser.parse", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.Logger.print_statistics", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.norm_adj"], ["", "def", "main", "(", ")", ":", "\n", "\n", "    ", "args", "=", "parse", "(", ")", "\n", "\n", "# if args.exp :", "\n", "#     experiment = Experiment(", "\n", "#         api_key=\"\",", "\n", "#         project_name=\"\",", "\n", "#         workspace=\"\",", "\n", "#     )", "\n", "#     experiment.set_name(args.exp_name)", "\n", "#     experiment.log_code(folder='.')", "\n", "#     experiment.add_tag(args.exp_tag)", "\n", "\n", "device", "=", "f'cuda:{args.device}'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "device", "=", "torch", ".", "device", "(", "device", ")", "\n", "\n", "if", "args", ".", "dataset", "in", "{", "'arxiv'", ",", "'products'", "}", ":", "\n", "        ", "dataset", "=", "PygNodePropPredDataset", "(", "name", "=", "f'ogbn-{args.dataset}'", ",", "\n", "transform", "=", "T", ".", "ToSparseTensor", "(", ")", ",", "\n", "root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'ogb'", ")", ")", "\n", "", "else", ":", "\n", "        ", "def", "inductive_data", "(", "dataset", ")", ":", "\n", "            ", "data", "=", "Batch", ".", "from_data_list", "(", "dataset", ")", "\n", "data", ".", "batch", ",", "data", ".", "ptr", "=", "None", ",", "None", "\n", "data", "[", "'train_mask'", "]", "=", "torch", ".", "ones", "(", "data", ".", "num_nodes", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "return", "data", "\n", "\n", "", "if", "args", ".", "dataset", "==", "'flickr'", ":", "\n", "            ", "dataset", "=", "Flickr", "(", "root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'graph'", ",", "args", ".", "dataset", ")", ",", "\n", "transform", "=", "T", ".", "ToSparseTensor", "(", ")", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'yelp'", ":", "\n", "            ", "dataset", "=", "Yelp", "(", "root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'graph'", ",", "args", ".", "dataset", ")", ",", "\n", "transform", "=", "T", ".", "ToSparseTensor", "(", ")", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'reddit'", ":", "\n", "            ", "dataset", "=", "Reddit", "(", "root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'graph'", ",", "args", ".", "dataset", ")", ",", "\n", "transform", "=", "T", ".", "ToSparseTensor", "(", ")", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'ppi'", ":", "\n", "            ", "print", "(", "'PPI loaded'", ")", "\n", "dataset", "=", "PPI", "(", "root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'graph'", ",", "args", ".", "dataset", ")", ",", "\n", "transform", "=", "T", ".", "ToSparseTensor", "(", ")", ",", "split", "=", "'train'", ")", "\n", "val_dataset", "=", "PPI", "(", "root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'graph'", ",", "args", ".", "dataset", ")", ",", "\n", "transform", "=", "T", ".", "ToSparseTensor", "(", ")", ",", "split", "=", "'val'", ")", "\n", "test_dataset", "=", "PPI", "(", "root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'graph'", ",", "args", ".", "dataset", ")", ",", "\n", "transform", "=", "T", ".", "ToSparseTensor", "(", ")", ",", "split", "=", "'test'", ")", "\n", "data", ",", "val_data", ",", "test_data", "=", "inductive_data", "(", "dataset", ")", ",", "inductive_data", "(", "val_dataset", ")", ",", "inductive_data", "(", "test_dataset", ")", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'cluster'", ":", "\n", "            ", "print", "(", "'CLUSTER loaded'", ")", "\n", "kwargs", "=", "{", "'root'", ":", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'graph'", ",", "args", ".", "dataset", ")", ",", "'name'", ":", "'CLUSTER'", ",", "\n", "'transform'", ":", "T", ".", "ToSparseTensor", "(", ")", "}", "\n", "dataset", "=", "GNNBenchmarkDataset", "(", "split", "=", "'train'", ",", "**", "kwargs", ")", "\n", "val_dataset", "=", "GNNBenchmarkDataset", "(", "split", "=", "'val'", ",", "**", "kwargs", ")", "\n", "test_dataset", "=", "GNNBenchmarkDataset", "(", "split", "=", "'test'", ",", "**", "kwargs", ")", "\n", "data", ",", "val_data", ",", "test_data", "=", "inductive_data", "(", "dataset", ")", ",", "inductive_data", "(", "val_dataset", ")", ",", "inductive_data", "(", "test_dataset", ")", "\n", "\n", "pdb", ".", "set_trace", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Dataset not supported!'", ")", "\n", "\n", "# inference", "\n", "# data_infer = copy.deepcopy(data)", "\n", "# data_infer.adj_t = data_infer.adj_t.set_diag()", "\n", "# deg = data_infer.adj_t.sum(dim=1).to(torch.float)", "\n", "# deg_inv_sqrt = deg.pow(-1 / 2)", "\n", "# deg_inv_sqrt[deg_inv_sqrt == float('inf')] = 0", "\n", "# data_infer.adj_t = deg_inv_sqrt.view(-1, 1) * data_infer.adj_t * deg_inv_sqrt.view(1, -1)", "\n", "# data_infer = data_infer.to(device)", "\n", "\n", "", "", "def", "norm_adj", "(", "data", ")", ":", "\n", "        ", "if", "args", ".", "conv_type", "==", "'GCN'", ":", "\n", "            ", "deg", "=", "data", ".", "adj_t", ".", "sum", "(", "dim", "=", "1", ")", ".", "to", "(", "torch", ".", "float", ")", "+", "1", "\n", "data", ".", "deg", "=", "deg", "\n", "deg_inv_sqrt", "=", "deg", ".", "pow", "(", "-", "1", "/", "2", ")", "\n", "deg_inv_sqrt", "[", "deg_inv_sqrt", "==", "float", "(", "'inf'", ")", "]", "=", "0", "\n", "deg_inv", "=", "deg", ".", "pow", "(", "-", "1", ")", "\n", "data", ".", "deg_inv", "=", "deg_inv", "\n", "data", ".", "adj_t", "=", "deg_inv_sqrt", ".", "view", "(", "-", "1", ",", "1", ")", "*", "data", ".", "adj_t", "*", "deg_inv_sqrt", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "", "elif", "args", ".", "conv_type", "==", "'SAGE'", ":", "\n", "            ", "deg", "=", "data", ".", "adj_t", ".", "sum", "(", "dim", "=", "1", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "data", ".", "deg", "=", "deg", "\n", "deg_inv", "=", "deg", ".", "pow", "(", "-", "1", ")", "\n", "data", ".", "deg_inv", "=", "deg_inv", "\n", "deg_inv", "[", "deg_inv", "==", "float", "(", "'inf'", ")", "]", "=", "0", "\n", "data", ".", "adj_t", "=", "deg_inv", ".", "view", "(", "-", "1", ",", "1", ")", "*", "data", ".", "adj_t", "\n", "", "elif", "args", ".", "conv_type", "==", "'GAT'", ":", "\n", "            ", "deg", "=", "data", ".", "adj_t", ".", "sum", "(", "dim", "=", "1", ")", ".", "to", "(", "torch", ".", "float", ")", "+", "1", "\n", "data", ".", "deg", "=", "deg", "\n", "deg_inv", "=", "deg", ".", "pow", "(", "-", "1", ")", "\n", "data", ".", "deg_inv", "=", "deg_inv", "\n", "deg_inv", "[", "deg_inv", "==", "float", "(", "'inf'", ")", "]", "=", "0", "\n", "data", ".", "adj_t", "=", "deg_inv", ".", "view", "(", "-", "1", ",", "1", ")", "*", "data", ".", "adj_t", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'GNN conv type not supported'", ")", "\n", "\n", "", "return", "data", "\n", "\n", "", "if", "args", ".", "dataset", "not", "in", "{", "'ppi'", ",", "'cluster'", "}", ":", "\n", "        ", "data", "=", "dataset", "[", "0", "]", "\n", "data", ".", "adj_t", "=", "data", ".", "adj_t", ".", "to_symmetric", "(", ")", "\n", "data", "=", "norm_adj", "(", "data", ")", "\n", "", "else", ":", "\n", "        ", "data", ".", "adj_t", ",", "val_data", ".", "adj_t", ",", "test_data", ".", "adj_t", "=", "data", ".", "adj_t", ".", "to_symmetric", "(", ")", ",", "val_data", ".", "adj_t", ".", "to_symmetric", "(", ")", ",", "test_data", ".", "adj_t", ".", "to_symmetric", "(", ")", "\n", "data", ",", "val_data", ",", "test_data", "=", "norm_adj", "(", "data", ")", ",", "norm_adj", "(", "val_data", ")", ",", "norm_adj", "(", "test_data", ")", "\n", "\n", "\n", "", "if", "args", ".", "batch_size", "<=", "0", ":", "\n", "        ", "args", ".", "batch_size", "=", "data", ".", "num_nodes", "\n", "", "if", "args", ".", "test_batch_size", "<=", "0", ":", "\n", "        ", "raise", "ValueError", "(", "'No!'", ")", "\n", "\n", "", "if", "args", ".", "dataset", "in", "{", "'arxiv'", ",", "'products'", "}", ":", "\n", "        ", "split_idx", "=", "dataset", ".", "get_idx_split", "(", ")", "\n", "evaluator", "=", "Evaluator", "(", "name", "=", "f'ogbn-{args.dataset}'", ")", "\n", "train_bool", "=", "torch", ".", "zeros", "(", "data", ".", "num_nodes", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "train_bool", "[", "split_idx", "[", "'train'", "]", "]", "=", "True", "\n", "", "else", ":", "\n", "        ", "train_bool", "=", "data", ".", "train_mask", "\n", "split_idx", ",", "evaluator", "=", "None", ",", "None", "\n", "\n", "", "logger", "=", "Logger", "(", "args", ".", "runs", ",", "args", ")", "\n", "\n", "num_N", "=", "data", ".", "x", ".", "shape", "[", "0", "]", "\n", "if", "args", ".", "split", ":", "\n", "        ", "if", "data", ".", "num_features", "%", "args", ".", "num_D", "!=", "0", ":", "\n", "            ", "padding_dim", "=", "args", ".", "num_D", "-", "data", ".", "num_features", "%", "args", ".", "num_D", "\n", "data", ".", "x", "=", "torch", ".", "cat", "(", "[", "data", ".", "x", ",", "torch", ".", "zeros", "(", "(", "num_N", ",", "padding_dim", ")", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "if", "args", ".", "dataset", "in", "{", "'ppi'", ",", "'cluster'", "}", ":", "\n", "                ", "val_data", ".", "x", "=", "torch", ".", "cat", "(", "[", "val_data", ".", "x", ",", "torch", ".", "zeros", "(", "(", "val_data", ".", "x", ".", "shape", "[", "0", "]", ",", "padding_dim", ")", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "test_data", ".", "x", "=", "torch", ".", "cat", "(", "[", "test_data", ".", "x", ",", "torch", ".", "zeros", "(", "(", "test_data", ".", "x", ".", "shape", "[", "0", "]", ",", "padding_dim", ")", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "test_loader_val", "=", "OurDataLoader", "(", "val_data", ",", "gnn_type", "=", "args", ".", "conv_type", ",", "sampler_type", "=", "'node'", ",", "\n", "train_flag", "=", "False", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "test_loader_test", "=", "OurDataLoader", "(", "test_data", ",", "gnn_type", "=", "args", ".", "conv_type", ",", "sampler_type", "=", "'node'", ",", "\n", "train_flag", "=", "False", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "", "", "if", "args", ".", "hidden_channels", "%", "args", ".", "num_D", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'Cannot fully split hidden features'", ")", "\n", "\n", "", "", "train_loader", "=", "OurDataLoader", "(", "data", ",", "gnn_type", "=", "args", ".", "conv_type", ",", "sampler_type", "=", "args", ".", "sampler_type", ",", "\n", "walk_length", "=", "args", ".", "walk_length", ",", "recovery_flag", "=", "args", ".", "recovery_flag", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "cont_sliding_window", "=", "args", ".", "cont_sliding_window", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "\n", "test_loader", "=", "OurDataLoader", "(", "data", ",", "gnn_type", "=", "args", ".", "conv_type", ",", "sampler_type", "=", "'node'", ",", "train_flag", "=", "False", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "\n", "if", "args", ".", "num_layers", "==", "1", ":", "\n", "        ", "model", "=", "LowRankGNN1Layer", "(", "data", ".", "num_features", ",", "args", ".", "hidden_channels", ",", "dataset", ".", "num_classes", ",", "\n", "args", ".", "num_layers", ",", "args", ".", "dropout", ",", "args", ".", "num_M", ",", "args", ".", "num_D", ",", "num_N", ",", "\n", "args", ".", "num_branch", ",", "args", ".", "cluster", ",", "args", ".", "ln_para", ",", "args", ".", "no_second_fc", ",", "\n", "args", ".", "kmeans_iter", ",", "args", ".", "EMA", ",", "args", ".", "split", ",", "args", ".", "kmeans_init", ",", "\n", "args", ".", "dropbranch", ",", "args", ".", "skip", ",", "args", ".", "use_gcn", ",", "args", ".", "commitment_cost", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "else", ":", "\n", "        ", "model", "=", "LowRankGNN", "(", "data", ".", "num_features", ",", "args", ".", "hidden_channels", ",", "dataset", ".", "num_classes", ",", "\n", "args", ".", "num_layers", ",", "args", ".", "dropout", ",", "args", ".", "num_M", ",", "args", ".", "num_D", ",", "num_N", ",", "\n", "args", ".", "num_branch", ",", "args", ".", "cluster", ",", "args", ".", "ln_para", ",", "args", ".", "no_second_fc", ",", "\n", "args", ".", "kmeans_iter", ",", "args", ".", "EMA", ",", "args", ".", "split", ",", "args", ".", "kmeans_init", ",", "\n", "args", ".", "dropbranch", ",", "args", ".", "skip", ",", "args", ".", "use_gcn", ",", "args", ".", "commitment_cost", ",", "\n", "args", ".", "grad_scale", ",", "args", ".", "act", ",", "args", ".", "weight_ahead", ",", "args", ".", "bn_flag", ",", "\n", "args", ".", "warm_up", ",", "args", ".", "momentum", ",", "args", ".", "conv_type", ",", "args", ".", "transformer_flag", ",", "\n", "args", ".", "alpha_dropout_flag", ",", "val_data", ".", "num_nodes", ",", "test_data", ".", "num_nodes", ")", ".", "to", "(", "device", ")", "\n", "\n", "\n", "", "for", "run", "in", "range", "(", "args", ".", "runs", ")", ":", "\n", "# exp_log_f = lambda x=None : exp_log(experiment, model, args.num_layers, args.num_D, args.num_M,", "\n", "#                                     args.use_gcn, args.conv_type)", "\n", "        ", "test_f", "=", "lambda", "x", "=", "None", ":", "test", "(", "model", ",", "data", ",", "device", ",", "test_loader", ",", "args", ".", "dataset", ",", "split_idx", ",", "evaluator", ")", "\n", "\n", "# model.reset_parameters()", "\n", "init", "(", "model", ",", "device", ",", "test_loader", ")", "\n", "print", "(", "'init done'", ")", "\n", "\n", "# optimizer = torch.optim.Adam(model.parameters(), lr=args.lr)", "\n", "# optimizer = torch.optim.Adam(model.parameters(), lr=args.lr, betas=(0.5, 0.999))", "\n", "optimizer", "=", "torch", ".", "optim", ".", "RMSprop", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "alpha", "=", "0.99", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "1", "+", "args", ".", "epochs", ")", ":", "\n", "            ", "if", "args", ".", "sche", ":", "\n", "                ", "for", "g", "in", "optimizer", ".", "param_groups", ":", "\n", "                    ", "g", "[", "'lr'", "]", "=", "args", ".", "lr", "*", "epoch", "/", "200", "if", "epoch", "<", "200", "else", "args", ".", "lr", "\n", "", "", "if", "args", ".", "warm_up", "and", "epoch", "<=", "args", ".", "warm_up_epochs", ":", "\n", "                ", "warm_up_rate", "=", "epoch", "/", "args", ".", "warm_up_epochs", "\n", "", "else", ":", "\n", "                ", "warm_up_rate", "=", "1", "\n", "\n", "", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "loss", ",", "loss_cls", ",", "batch_forward_time", ",", "batch_backward_time", "=", "train", "(", "model", ",", "data", ",", "args", ".", "batch_size", ",", "train_bool", ",", "optimizer", ",", "device", ",", "args", ".", "commitment_cost", ",", "\n", "args", ".", "use_gcn", ",", "warm_up_rate", ",", "args", ".", "ce_only", ",", "None", ",", "args", ".", "exp", ",", "args", ".", "conv_type", ",", "\n", "args", ".", "clip", ",", "args", ".", "num_layers", ",", "train_loader", ",", "test_f", ",", "None", ")", "\n", "\n", "# # loss, loss_cls, batch_forward_time, batch_backward_time = \\", "\n", "# #     separate_train(model, data, args.batch_size, train_bool, optimizer, device, args.commitment_cost,", "\n", "# #           args.use_gcn, warm_up_rate, args.ce_only, exp_log_f, args.exp, args.conv_type,", "\n", "# #           args.clip, args.num_layers, train_idx)", "\n", "\n", "if", "args", ".", "dataset", "not", "in", "{", "'ppi'", ",", "'cluster'", "}", ":", "\n", "                ", "elapsed", "=", "str", "(", "timedelta", "(", "seconds", "=", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "result", "=", "test", "(", "model", ",", "data", ",", "device", ",", "test_loader", ",", "args", ".", "dataset", ",", "split_idx", ",", "evaluator", ")", "\n", "\n", "elapsed_inference", "=", "str", "(", "timedelta", "(", "seconds", "=", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "print", "(", "f'Epoch time:{elapsed}, inference time:{elapsed_inference}, '", "\n", "f'batch_forward_time:{batch_forward_time:.2f}, '", "\n", "f'batch_backward_time:{batch_backward_time:.2f}'", ")", "\n", "", "else", ":", "\n", "                ", "train_acc", "=", "test_inference", "(", "model", ",", "data", ",", "device", ",", "test_loader", ",", "None", ")", "\n", "valid_acc", "=", "test_inference", "(", "model", ",", "val_data", ",", "device", ",", "test_loader_val", ",", "'val'", ")", "\n", "test_acc", "=", "test_inference", "(", "model", ",", "test_data", ",", "device", ",", "test_loader_test", ",", "'test'", ")", "\n", "result", "=", "train_acc", ",", "valid_acc", ",", "test_acc", "\n", "logger", ".", "add_result", "(", "run", ",", "result", ")", "\n", "\n", "", "logger", ".", "add_result", "(", "run", ",", "result", ")", "\n", "if", "epoch", "%", "args", ".", "log_steps", "==", "0", ":", "\n", "                ", "train_acc", ",", "valid_acc", ",", "test_acc", "=", "result", "\n", "print", "(", "f'Run: {run + 1}, '", "\n", "f'Epoch: {epoch}, '", "\n", "f'Loss: {loss:.4f}, '", "\n", "f'Loss Cls: {loss_cls:.4f}, '", "\n", "f'Train: {100 * train_acc:.2f}%, '", "\n", "f'Valid: {100 * valid_acc:.2f}%, '", "\n", "f'Test: {100 * test_acc:.2f}%'", ")", "\n", "\n", "# if args.exp:", "\n", "#     experiment.log_metric('train_acc', train_acc)", "\n", "#     experiment.log_metric('valid_acc', valid_acc)", "\n", "#     experiment.log_metric('test_acc', test_acc)", "\n", "#     experiment.log_metric('train_loss', loss_cls)", "\n", "\n", "", "", "logger", ".", "print_statistics", "(", "run", ")", "\n", "", "logger", ".", "print_statistics", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.vq.VectorQuantizer.__init__": [[11, 21], ["torch.nn.Module.__init__", "torch.nn.Embedding", "torch.nn.Embedding", "vq.VectorQuantizer._embedding.weight.data.uniform_"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.dataloader.OurDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_embeddings", ",", "embedding_dim", ",", "commitment_cost", "=", "0.5", ",", "holistic_cost", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "VectorQuantizer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_embedding_dim", "=", "embedding_dim", "\n", "self", ".", "_num_embeddings", "=", "num_embeddings", "\n", "\n", "self", ".", "_embedding", "=", "nn", ".", "Embedding", "(", "self", ".", "_num_embeddings", ",", "self", ".", "_embedding_dim", ")", "\n", "self", ".", "_embedding", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "1", "/", "self", ".", "_num_embeddings", ",", "1", "/", "self", ".", "_num_embeddings", ")", "\n", "self", ".", "_commitment_cost", "=", "commitment_cost", "\n", "self", ".", "_holistic_cost", "=", "holistic_cost", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.vq.VectorQuantizer.kmeans_init": [[22, 24], ["torch.nn.Parameter", "torch.nn.Parameter"], "methods", ["None"], ["", "def", "kmeans_init", "(", "self", ",", "kmeans_centroids", ")", ":", "\n", "        ", "self", ".", "_embedding", ".", "weight", "=", "nn", ".", "Parameter", "(", "kmeans_centroids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.vq.VectorQuantizer.get_codebook": [[25, 27], ["None"], "methods", ["None"], ["", "def", "get_codebook", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_embedding", ".", "weight", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.vq.VectorQuantizer.forward": [[28, 57], ["inputs.view", "torch.argmin().unsqueeze", "torch.argmin().unsqueeze", "torch.argmin().unsqueeze", "torch.argmin().unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros.scatter_", "torch.zeros.scatter_", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.matmul().view.detach", "torch.matmul().view.detach", "inputs.detach", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "vq.VectorQuantizer._embedding.weight.t"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "input_shape", "=", "inputs", ".", "shape", "\n", "\n", "# Flatten input", "\n", "flat_input", "=", "inputs", ".", "view", "(", "-", "1", ",", "self", ".", "_embedding_dim", ")", "\n", "\n", "# Calculate distances", "\n", "distances", "=", "(", "torch", ".", "sum", "(", "flat_input", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "+", "torch", ".", "sum", "(", "self", ".", "_embedding", ".", "weight", "**", "2", ",", "dim", "=", "1", ")", "\n", "-", "2", "*", "torch", ".", "matmul", "(", "flat_input", ",", "self", ".", "_embedding", ".", "weight", ".", "t", "(", ")", ")", ")", "\n", "\n", "# Encoding", "\n", "encoding_indices", "=", "torch", ".", "argmin", "(", "distances", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "encodings", "=", "torch", ".", "zeros", "(", "encoding_indices", ".", "shape", "[", "0", "]", ",", "self", ".", "_num_embeddings", ",", "device", "=", "inputs", ".", "device", ")", "\n", "encodings", ".", "scatter_", "(", "1", ",", "encoding_indices", ",", "1", ")", "\n", "\n", "# Quantize and unflatten", "\n", "quantized", "=", "torch", ".", "matmul", "(", "encodings", ",", "self", ".", "_embedding", ".", "weight", ")", ".", "view", "(", "input_shape", ")", "\n", "\n", "# Loss", "\n", "e_latent_loss", "=", "F", ".", "mse_loss", "(", "quantized", ".", "detach", "(", ")", ",", "inputs", ")", "\n", "q_latent_loss", "=", "F", ".", "mse_loss", "(", "quantized", ",", "inputs", ".", "detach", "(", ")", ")", "\n", "loss", "=", "self", ".", "_holistic_cost", "*", "(", "q_latent_loss", "+", "self", ".", "_commitment_cost", "*", "e_latent_loss", ")", "\n", "\n", "quantized", "=", "inputs", "+", "(", "quantized", "-", "inputs", ")", ".", "detach", "(", ")", "\n", "# avg_probs = torch.mean(encodings, dim=0)", "\n", "# perplexity = torch.exp(-torch.sum(avg_probs * torch.log(avg_probs + 1e-10)))", "\n", "\n", "return", "loss", ",", "quantized", ",", "encodings", ",", "encoding_indices", "\n", "# return loss, quantized.contiguous(), perplexity, encodings, encoding_indices", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.vq.VectorQuantizerEMA.__init__": [[61, 101], ["torch.nn.Module.__init__", "vq.VectorQuantizerEMA.register_buffer", "vq.VectorQuantizerEMA.register_buffer", "vq.VectorQuantizerEMA.register_buffer", "vq.VectorQuantizerEMA.register_buffer", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "vq.VectorQuantizerEMA._ema_w.data.normal_", "type", "ValueError"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.dataloader.OurDataLoader.__init__", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros"], ["    ", "def", "__init__", "(", "self", ",", "num_embeddings", ",", "embedding_dim", ",", "commitment_cost", "=", "0.5", ",", "decay", "=", "0.99", ",", "epsilon", "=", "1e-24", ",", "\n", "grad_normalize_scale", "=", "(", "1", ",", "1", ")", ",", "warm_up_flag", "=", "False", ",", "momentum", "=", "0.1", ",", "add_flag", "=", "False", ")", ":", "\n", "        ", "super", "(", "VectorQuantizerEMA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "add_flag", "=", "add_flag", "\n", "added_dim", "=", "1", "if", "add_flag", "else", "0", "\n", "\n", "self", ".", "_embedding_dim", "=", "embedding_dim", "\n", "self", ".", "_num_embeddings", "=", "num_embeddings", "\n", "self", ".", "_commitment_cost", "=", "commitment_cost", "\n", "self", ".", "_warm_up_flag", "=", "warm_up_flag", "\n", "\n", "self", ".", "register_buffer", "(", "'_embedding'", ",", "torch", ".", "randn", "(", "self", ".", "_num_embeddings", ",", "self", ".", "_embedding_dim", "*", "2", "+", "added_dim", ")", ")", "\n", "self", ".", "register_buffer", "(", "'_embedding_output'", ",", "torch", ".", "zeros", "(", "self", ".", "_num_embeddings", ",", "self", ".", "_embedding_dim", "*", "2", "+", "added_dim", ")", ")", "\n", "\n", "self", ".", "register_buffer", "(", "'_ema_cluster_size'", ",", "torch", ".", "zeros", "(", "num_embeddings", ")", ")", "\n", "self", ".", "register_buffer", "(", "'_ema_w'", ",", "torch", ".", "zeros", "(", "self", ".", "_num_embeddings", ",", "self", ".", "_embedding_dim", "*", "2", "+", "added_dim", ")", ")", "\n", "\n", "if", "self", ".", "_warm_up_flag", ":", "\n", "            ", "self", ".", "_ema_w", ".", "data", ".", "normal_", "(", ")", "\n", "\n", "", "self", ".", "_decay", "=", "decay", "\n", "self", ".", "_epsilon", "=", "epsilon", "\n", "\n", "# variance of gradient is very small, eps needs to be small", "\n", "self", ".", "batch_norm_feat", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "embedding_dim", ",", "affine", "=", "False", ")", "\n", "self", ".", "batch_norm_grad", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "embedding_dim", "+", "added_dim", ",", "eps", "=", "self", ".", "_epsilon", ",", "affine", "=", "False", ",", "\n", "momentum", "=", "momentum", ")", "\n", "\n", "self", ".", "grad_normalize_scale", "=", "grad_normalize_scale", "\n", "if", "type", "(", "self", ".", "grad_normalize_scale", ")", "is", "not", "list", ":", "\n", "            ", "raise", "ValueError", "(", "'grad scale type wrong!'", ")", "\n", "", "self", ".", "_embedding", ".", "data", "[", ":", ",", "self", ".", "_embedding_dim", ":", "self", ".", "_embedding_dim", "*", "2", "]", "*=", "self", ".", "grad_normalize_scale", "[", "0", "]", "\n", "self", ".", "_ema_w", ".", "data", "[", ":", ",", "self", ".", "_embedding_dim", ":", "self", ".", "_embedding_dim", "*", "2", "]", "*=", "self", ".", "grad_normalize_scale", "[", "0", "]", "\n", "\n", "if", "self", ".", "add_flag", ":", "\n", "            ", "self", ".", "_embedding", ".", "data", "[", ":", ",", "self", ".", "_embedding_dim", "*", "2", "]", "*=", "self", ".", "grad_normalize_scale", "[", "1", "]", "\n", "self", ".", "_ema_w", ".", "data", "[", ":", ",", "self", ".", "_embedding_dim", "*", "2", "]", "*=", "self", ".", "grad_normalize_scale", "[", "1", "]", "\n", "\n", "", "self", ".", "bn_inited", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.vq.VectorQuantizerEMA.feature_kmeans_init": [[102, 106], ["kmeans_counts.unsqueeze"], "methods", ["None"], ["", "def", "feature_kmeans_init", "(", "self", ",", "kmeans_centroids", ",", "kmeans_counts", ")", ":", "\n", "        ", "self", ".", "_embedding", ".", "data", "[", ":", ",", ":", "self", ".", "_embedding_dim", "]", "=", "kmeans_centroids", "\n", "self", ".", "_ema_cluster_size", ".", "data", "=", "kmeans_counts", "\n", "self", ".", "_ema_w", ".", "data", "[", ":", ",", ":", "self", ".", "_embedding_dim", "]", "=", "kmeans_centroids", "*", "kmeans_counts", ".", "unsqueeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.vq.VectorQuantizerEMA.kmeans_init": [[108, 119], ["kmeans_counts.unsqueeze"], "methods", ["None"], ["", "def", "kmeans_init", "(", "self", ",", "kmeans_centroids", ",", "kmeans_counts", ")", ":", "\n", "        ", "self", ".", "_embedding", ".", "data", "=", "kmeans_centroids", "\n", "self", ".", "_ema_cluster_size", ".", "data", "=", "kmeans_counts", "\n", "self", ".", "_ema_w", ".", "data", "=", "kmeans_centroids", "*", "kmeans_counts", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "self", ".", "_embedding", ".", "data", "[", ":", ",", "self", ".", "_embedding_dim", ":", "self", ".", "_embedding_dim", "*", "2", "]", "*=", "self", ".", "grad_normalize_scale", "[", "0", "]", "\n", "self", ".", "_ema_w", ".", "data", "[", ":", ",", "self", ".", "_embedding_dim", ":", "self", ".", "_embedding_dim", "*", "2", "]", "*=", "self", ".", "grad_normalize_scale", "[", "0", "]", "\n", "\n", "if", "self", ".", "add_flag", ":", "\n", "            ", "self", ".", "_embedding", ".", "data", "[", ":", ",", "self", ".", "_embedding_dim", "*", "2", "]", "*=", "self", ".", "grad_normalize_scale", "[", "1", "]", "\n", "self", ".", "_ema_w", ".", "data", "[", ":", ",", "self", ".", "_embedding_dim", "*", "2", "]", "*=", "self", ".", "grad_normalize_scale", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.vq.VectorQuantizerEMA.get_codebook": [[120, 122], ["None"], "methods", ["None"], ["", "", "def", "get_codebook", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_embedding_output", "[", ":", ",", ":", "self", ".", "_embedding_dim", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.vq.VectorQuantizerEMA.get_grad": [[123, 125], ["None"], "methods", ["None"], ["", "def", "get_grad", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_embedding_output", "[", ":", ",", "self", ".", "_embedding_dim", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.vq.VectorQuantizerEMA.get_feat_cen_norm": [[126, 129], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.norm().item", "torch.norm().item", "torch.norm().item", "torch.norm().item", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "get_feat_cen_norm", "(", "self", ")", ":", "\n", "        ", "center", "=", "torch", ".", "mean", "(", "self", ".", "_embedding", "[", ":", ",", ":", "self", ".", "_embedding_dim", "]", ",", "dim", "=", "0", ")", "\n", "return", "torch", ".", "norm", "(", "center", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.vq.VectorQuantizerEMA.get_grad_cen_norm": [[130, 133], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.norm().item", "torch.norm().item", "torch.norm().item", "torch.norm().item", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "get_grad_cen_norm", "(", "self", ")", ":", "\n", "        ", "center", "=", "torch", ".", "mean", "(", "self", ".", "_embedding", "[", ":", ",", "self", ".", "_embedding_dim", ":", "]", ",", "dim", "=", "0", ")", "\n", "return", "torch", ".", "norm", "(", "center", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.vq.VectorQuantizerEMA.get_embedding_for_record": [[134, 153], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt.triu().nonzero().t", "torch.sqrt.triu().nonzero().t", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt.triu().nonzero().t", "torch.sqrt.triu().nonzero().t", "torch.sqrt.clamp_", "torch.sqrt.clamp_", "torch.sqrt.clamp_", "torch.sqrt.clamp_", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sqrt.triu().nonzero", "torch.sqrt.triu().nonzero", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sqrt.triu().nonzero", "torch.sqrt.triu().nonzero", "emb.t", "emb.t", "torch.sqrt.triu", "torch.sqrt.triu", "torch.sqrt.triu", "torch.sqrt.triu"], "methods", ["None"], ["", "def", "get_embedding_for_record", "(", "self", ")", ":", "\n", "\n", "        ", "emb", "=", "self", ".", "_embedding", "[", ":", ",", ":", "self", ".", "_embedding_dim", "]", "\n", "feat_distances", "=", "(", "torch", ".", "sum", "(", "emb", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "+", "torch", ".", "sum", "(", "emb", "**", "2", ",", "dim", "=", "1", ")", "\n", "-", "2", "*", "torch", ".", "matmul", "(", "emb", ",", "emb", ".", "t", "(", ")", ")", ")", "\n", "feat_distances", "=", "torch", ".", "sqrt", "(", "feat_distances", ".", "clamp_", "(", "min", "=", "0", ")", ")", "\n", "triu_idx", "=", "feat_distances", ".", "triu", "(", ")", ".", "nonzero", "(", ")", ".", "t", "(", ")", "\n", "feat_distances", "=", "feat_distances", "[", "triu_idx", "[", "0", "]", ",", "triu_idx", "[", "1", "]", "]", "\n", "\n", "emb", "=", "self", ".", "_embedding", "[", ":", ",", "self", ".", "_embedding_dim", ":", "]", "\n", "grad_distances", "=", "(", "torch", ".", "sum", "(", "emb", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "+", "torch", ".", "sum", "(", "emb", "**", "2", ",", "dim", "=", "1", ")", "\n", "-", "2", "*", "torch", ".", "matmul", "(", "emb", ",", "emb", ".", "t", "(", ")", ")", ")", "\n", "grad_distances", "=", "torch", ".", "sqrt", "(", "grad_distances", ".", "clamp_", "(", "min", "=", "0", ")", ")", "\n", "triu_idx", "=", "grad_distances", ".", "triu", "(", ")", ".", "nonzero", "(", ")", ".", "t", "(", ")", "\n", "grad_distances", "=", "grad_distances", "[", "triu_idx", "[", "0", "]", ",", "triu_idx", "[", "1", "]", "]", "\n", "\n", "return", "feat_distances", ",", "grad_distances", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.vq.VectorQuantizerEMA._get_feat_embed": [[154, 156], ["None"], "methods", ["None"], ["", "def", "_get_feat_embed", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_embedding", "[", ":", ",", ":", "self", ".", "_embedding_dim", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.vq.VectorQuantizerEMA.feature_update": [[157, 200], ["vq.VectorQuantizerEMA.batch_norm_feat", "vq.VectorQuantizerEMA._get_feat_embed", "torch.argmin().unsqueeze", "torch.argmin().unsqueeze", "torch.argmin().unsqueeze", "torch.argmin().unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros.scatter_", "torch.zeros.scatter_", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "vq.VectorQuantizerEMA.batch_norm_feat.running_mean.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "ValueError", "torch.zeros.t", "torch.zeros.t", "vq.VectorQuantizerEMA._ema_cluster_size.unsqueeze", "vq.VectorQuantizerEMA.t", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "vq.VectorQuantizerEMA._get_feat_embed"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizerEMA._get_feat_embed", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizerEMA._get_feat_embed"], ["", "def", "feature_update", "(", "self", ",", "X_B", ")", ":", "\n", "        ", "inputs", "=", "X_B", "\n", "inputs_normalized", "=", "self", ".", "batch_norm_feat", "(", "inputs", ")", "\n", "embedding_normalized", "=", "self", ".", "_get_feat_embed", "(", ")", "\n", "\n", "# Calculate distances", "\n", "distances", "=", "(", "torch", ".", "sum", "(", "inputs_normalized", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "+", "torch", ".", "sum", "(", "embedding_normalized", "**", "2", ",", "dim", "=", "1", ")", "\n", "-", "2", "*", "torch", ".", "matmul", "(", "inputs_normalized", ",", "embedding_normalized", ".", "t", "(", ")", ")", ")", "\n", "\n", "# Encoding", "\n", "encoding_indices", "=", "torch", ".", "argmin", "(", "distances", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "encodings", "=", "torch", ".", "zeros", "(", "encoding_indices", ".", "shape", "[", "0", "]", ",", "self", ".", "_num_embeddings", ",", "device", "=", "X_B", ".", "device", ")", "\n", "encodings", ".", "scatter_", "(", "1", ",", "encoding_indices", ",", "1", ")", "\n", "\n", "# Use EMA to update the embedding vectors", "\n", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "_ema_cluster_size", ".", "data", "=", "self", ".", "_ema_cluster_size", "*", "self", ".", "_decay", "+", "(", "1", "-", "self", ".", "_decay", ")", "*", "torch", ".", "sum", "(", "encodings", ",", "0", ")", "\n", "\n", "\n", "# Laplace smoothing of the cluster size", "\n", "if", "self", ".", "_warm_up_flag", ":", "\n", "                ", "n", "=", "torch", ".", "sum", "(", "self", ".", "_ema_cluster_size", ".", "data", ")", "\n", "self", ".", "_ema_cluster_size", ".", "data", "=", "(", "\n", "(", "self", ".", "_ema_cluster_size", "+", "1e-5", ")", "\n", "/", "(", "n", "+", "self", ".", "_num_embeddings", "*", "1e-5", ")", "*", "n", ")", "\n", "\n", "", "if", "torch", ".", "count_nonzero", "(", "self", ".", "_ema_cluster_size", ")", "!=", "self", ".", "_ema_cluster_size", ".", "shape", "[", "0", "]", ":", "\n", "                ", "raise", "ValueError", "(", "'Bad Init!'", ")", "\n", "\n", "", "dw", "=", "torch", ".", "matmul", "(", "encodings", ".", "t", "(", ")", ",", "inputs_normalized", ")", "\n", "\n", "self", ".", "_ema_w", ".", "data", "[", ":", ",", ":", "self", ".", "_embedding_dim", "]", "=", "self", ".", "_ema_w", "[", ":", ",", ":", "self", ".", "_embedding_dim", "]", "*", "self", ".", "_decay", "+", "(", "1", "-", "self", ".", "_decay", ")", "*", "dw", "\n", "self", ".", "_embedding", ".", "data", "[", ":", ",", ":", "self", ".", "_embedding_dim", "]", "=", "self", ".", "_ema_w", "[", ":", ",", ":", "self", ".", "_embedding_dim", "]", "/", "self", ".", "_ema_cluster_size", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "running_std", "=", "torch", ".", "sqrt", "(", "self", ".", "batch_norm_feat", ".", "running_var", "+", "1e-5", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "running_mean", "=", "self", ".", "batch_norm_feat", ".", "running_mean", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "self", ".", "_embedding_output", ".", "data", "[", ":", ",", ":", "self", ".", "_embedding_dim", "]", "=", "self", ".", "_get_feat_embed", "(", ")", "*", "running_std", "+", "running_mean", "\n", "\n", "", "return", "encoding_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.vq.VectorQuantizerEMA.update": [[201, 277], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.sqrt().detach", "torch.sqrt().detach", "torch.sqrt().detach", "torch.sqrt().detach", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.argmin().unsqueeze", "torch.argmin().unsqueeze", "torch.argmin().unsqueeze", "torch.argmin().unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros.scatter_", "torch.zeros.scatter_", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.var().detach", "torch.var().detach", "torch.var().detach", "torch.var().detach", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.var().detach", "torch.var().detach", "torch.var().detach", "torch.var().detach", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "vq.VectorQuantizerEMA._embedding.data.detach().clone", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "running_mean.unsqueeze.unsqueeze.unsqueeze", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "vq.VectorQuantizerEMA.batch_norm_feat", "vq.VectorQuantizerEMA.batch_norm_grad", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "ValueError", "torch.zeros.t", "torch.zeros.t", "vq.VectorQuantizerEMA._ema_cluster_size.unsqueeze", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.var", "torch.var", "torch.var", "torch.var", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.var", "torch.var", "torch.var", "torch.var", "vq.VectorQuantizerEMA._embedding.t", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "vq.VectorQuantizerEMA._embedding.data.detach", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.var", "torch.var", "torch.var", "torch.var"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros"], ["", "def", "update", "(", "self", ",", "X_B", ",", "grad", ")", ":", "\n", "\n", "        ", "inputs", "=", "torch", ".", "cat", "(", "[", "X_B", ",", "grad", "]", ",", "dim", "=", "1", ")", "\n", "\n", "mean", "=", "torch", ".", "mean", "(", "inputs", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", ".", "detach", "(", ")", "\n", "std", "=", "torch", ".", "sqrt", "(", "torch", ".", "var", "(", "inputs", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "+", "self", ".", "_epsilon", ")", ".", "detach", "(", ")", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n", "self", ".", "feat_zero_rate", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "inputs", "[", ":", ",", "0", "]", ")", "<", "std", "[", "0", "]", "[", "0", "]", "*", "1e-5", ")", "/", "X_B", ".", "shape", "[", "0", "]", "\n", "self", ".", "grad_zero_rate", "=", "torch", ".", "sum", "(", "inputs", "[", ":", ",", "self", ".", "_embedding_dim", "]", "<", "std", "[", "0", "]", "[", "self", ".", "_embedding_dim", "]", "*", "1e-5", ")", "/", "X_B", ".", "shape", "[", "0", "]", "\n", "\n", "if", "not", "self", ".", "bn_inited", ":", "\n", "            ", "self", ".", "batch_norm_feat", ".", "running_mean", ".", "data", "=", "torch", ".", "mean", "(", "X_B", ",", "dim", "=", "0", ")", ".", "detach", "(", ")", "\n", "self", ".", "batch_norm_feat", ".", "running_var", ".", "data", "=", "torch", ".", "var", "(", "X_B", ",", "dim", "=", "0", ")", ".", "detach", "(", ")", "\n", "self", ".", "batch_norm_grad", ".", "running_mean", ".", "data", "=", "torch", ".", "mean", "(", "grad", ",", "dim", "=", "0", ")", ".", "detach", "(", ")", "\n", "self", ".", "batch_norm_grad", ".", "running_var", ".", "data", "=", "torch", ".", "var", "(", "grad", ",", "dim", "=", "0", ")", ".", "detach", "(", ")", "\n", "self", ".", "bn_inited", "=", "True", "\n", "\n", "", "inputs_normalized", "=", "torch", ".", "cat", "(", "[", "self", ".", "batch_norm_feat", "(", "X_B", ")", ",", "self", ".", "batch_norm_grad", "(", "grad", ")", "]", ",", "dim", "=", "1", ")", "\n", "inputs_normalized", "[", ":", ",", "self", ".", "_embedding_dim", ":", "self", ".", "_embedding_dim", "*", "2", "]", "*=", "self", ".", "grad_normalize_scale", "[", "0", "]", "\n", "\n", "if", "self", ".", "add_flag", ":", "\n", "            ", "inputs_normalized", "[", ":", ",", "self", ".", "_embedding_dim", "*", "2", "]", "*=", "self", ".", "grad_normalize_scale", "[", "1", "]", "\n", "\n", "# Calculate distances", "\n", "", "distances", "=", "(", "torch", ".", "sum", "(", "inputs_normalized", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "+", "torch", ".", "sum", "(", "self", ".", "_embedding", "**", "2", ",", "dim", "=", "1", ")", "\n", "-", "2", "*", "torch", ".", "matmul", "(", "inputs_normalized", ",", "self", ".", "_embedding", ".", "t", "(", ")", ")", ")", "\n", "# distances = F.cosine_similarity(inputs_normalized, self._embedding)", "\n", "\n", "# Encoding", "\n", "encoding_indices", "=", "torch", ".", "argmin", "(", "distances", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "encodings", "=", "torch", ".", "zeros", "(", "encoding_indices", ".", "shape", "[", "0", "]", ",", "self", ".", "_num_embeddings", ",", "device", "=", "X_B", ".", "device", ")", "\n", "encodings", ".", "scatter_", "(", "1", ",", "encoding_indices", ",", "1", ")", "\n", "\n", "# Use EMA to update the embedding vectors", "\n", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "_ema_cluster_size", ".", "data", "=", "self", ".", "_ema_cluster_size", "*", "self", ".", "_decay", "+", "(", "1", "-", "self", ".", "_decay", ")", "*", "torch", ".", "sum", "(", "encodings", ",", "0", ")", "\n", "\n", "\n", "# Laplace smoothing of the cluster size", "\n", "if", "self", ".", "_warm_up_flag", ":", "\n", "                ", "n", "=", "torch", ".", "sum", "(", "self", ".", "_ema_cluster_size", ".", "data", ")", "\n", "self", ".", "_ema_cluster_size", ".", "data", "=", "(", "\n", "(", "self", ".", "_ema_cluster_size", "+", "1e-5", ")", "\n", "/", "(", "n", "+", "self", ".", "_num_embeddings", "*", "1e-5", ")", "*", "n", ")", "\n", "\n", "", "if", "torch", ".", "count_nonzero", "(", "self", ".", "_ema_cluster_size", ")", "!=", "self", ".", "_ema_cluster_size", ".", "shape", "[", "0", "]", ":", "\n", "                ", "raise", "ValueError", "(", "'Bad Init!'", ")", "\n", "\n", "", "dw", "=", "torch", ".", "matmul", "(", "encodings", ".", "t", "(", ")", ",", "inputs_normalized", ")", "\n", "\n", "self", ".", "_ema_w", ".", "data", "=", "self", ".", "_ema_w", "*", "self", ".", "_decay", "+", "(", "1", "-", "self", ".", "_decay", ")", "*", "dw", "\n", "self", ".", "_embedding", ".", "data", "=", "self", ".", "_ema_w", "/", "self", ".", "_ema_cluster_size", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "output_data", "=", "self", ".", "_embedding", ".", "data", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "\n", "output_data", "[", ":", ",", "self", ".", "_embedding_dim", ":", "self", ".", "_embedding_dim", "*", "2", "]", "/=", "self", ".", "grad_normalize_scale", "[", "0", "]", "+", "self", ".", "_epsilon", "\n", "if", "self", ".", "add_flag", ":", "\n", "                ", "output_data", "[", ":", ",", "self", ".", "_embedding_dim", "*", "2", "]", "/=", "self", ".", "grad_normalize_scale", "[", "1", "]", "+", "self", ".", "_epsilon", "\n", "\n", "", "running_var", "=", "torch", ".", "cat", "(", "[", "self", ".", "batch_norm_feat", ".", "running_var", "+", "1e-5", ",", "self", ".", "batch_norm_grad", ".", "running_var", "+", "self", ".", "_epsilon", "]", ")", "\n", "running_std", "=", "torch", ".", "sqrt", "(", "running_var", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "\n", "running_mean", "=", "torch", ".", "cat", "(", "[", "self", ".", "batch_norm_feat", ".", "running_mean", ",", "self", ".", "batch_norm_grad", ".", "running_mean", "]", ")", "\n", "running_mean", "=", "running_mean", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "self", ".", "_embedding_output", ".", "data", "=", "output_data", "*", "running_std", "+", "running_mean", "\n", "\n", "if", "self", ".", "grad_normalize_scale", "[", "0", "]", "==", "0", ":", "\n", "                ", "self", ".", "_embedding_output", ".", "data", "[", ":", ",", "self", ".", "_embedding_dim", ":", "]", "*=", "0", "\n", "", "self", ".", "running_mean", "=", "running_mean", "\n", "self", ".", "running_std", "=", "running_std", "\n", "\n", "", "return", "encoding_indices", ",", "encodings", "", "", "", ""]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.num_nodes.maybe_num_nodes": [[21, 28], ["isinstance", "max", "int", "edge_index.size", "edge_index.size", "edge_index.max"], "function", ["None"], ["", "def", "maybe_num_nodes", "(", "edge_index", ",", "num_nodes", "=", "None", ")", ":", "\n", "    ", "if", "num_nodes", "is", "not", "None", ":", "\n", "        ", "return", "num_nodes", "\n", "", "elif", "isinstance", "(", "edge_index", ",", "Tensor", ")", ":", "\n", "        ", "return", "int", "(", "edge_index", ".", "max", "(", ")", ")", "+", "1", "\n", "", "else", ":", "\n", "        ", "return", "max", "(", "edge_index", ".", "size", "(", "0", ")", ",", "edge_index", ".", "size", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.num_nodes.maybe_num_nodes_dict": [[30, 48], ["list", "edge_index_dict.items", "copy.copy", "num_nodes_dict.keys", "int", "max", "int", "max", "num_nodes_dict.get", "num_nodes_dict.get", "edge_index[].max", "edge_index[].max"], "function", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizerEMA.get", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizerEMA.get"], ["", "", "def", "maybe_num_nodes_dict", "(", "edge_index_dict", ",", "num_nodes_dict", "=", "None", ")", ":", "\n", "    ", "num_nodes_dict", "=", "{", "}", "if", "num_nodes_dict", "is", "None", "else", "copy", "(", "num_nodes_dict", ")", "\n", "\n", "found_types", "=", "list", "(", "num_nodes_dict", ".", "keys", "(", ")", ")", "\n", "\n", "for", "keys", ",", "edge_index", "in", "edge_index_dict", ".", "items", "(", ")", ":", "\n", "\n", "        ", "key", "=", "keys", "[", "0", "]", "\n", "if", "key", "not", "in", "found_types", ":", "\n", "            ", "N", "=", "int", "(", "edge_index", "[", "0", "]", ".", "max", "(", ")", "+", "1", ")", "\n", "num_nodes_dict", "[", "key", "]", "=", "max", "(", "N", ",", "num_nodes_dict", ".", "get", "(", "key", ",", "N", ")", ")", "\n", "\n", "", "key", "=", "keys", "[", "-", "1", "]", "\n", "if", "key", "not", "in", "found_types", ":", "\n", "            ", "N", "=", "int", "(", "edge_index", "[", "1", "]", ".", "max", "(", ")", "+", "1", ")", "\n", "num_nodes_dict", "[", "key", "]", "=", "max", "(", "N", ",", "num_nodes_dict", ".", "get", "(", "key", ",", "N", ")", ")", "\n", "\n", "", "", "return", "num_nodes_dict", "", "", ""]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.vq_softmax.vq_softmax": [[11, 58], ["ptr.view.view", "src.exp", "src.dim"], "function", ["None"], ["@", "torch", ".", "jit", ".", "script", "\n", "def", "vq_softmax", "(", "src", ":", "Tensor", ",", "index", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "ptr", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "num_nodes", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "dim", ":", "int", "=", "0", ")", "->", "Tensor", ":", "\n", "    ", "r\"\"\"Computes a sparsely evaluated softmax.\n    Given a value tensor :attr:`src`, this function first groups the values\n    along the first dimension based on the indices specified in :attr:`index`,\n    and then proceeds to compute the softmax individually for each group.\n\n    Args:\n        src (Tensor): The source tensor.\n        index (LongTensor, optional): The indices of elements for applying the\n            softmax. (default: :obj:`None`)\n        ptr (LongTensor, optional): If given, computes the softmax based on\n            sorted inputs in CSR representation. (default: :obj:`None`)\n        num_nodes (int, optional): The number of nodes, *i.e.*\n            :obj:`max_val + 1` of :attr:`index`. (default: :obj:`None`)\n        dim (int, optional): The dimension in which to normalize.\n            (default: :obj:`0`)\n\n    :rtype: :class:`Tensor`\n    \"\"\"", "\n", "if", "ptr", "is", "not", "None", ":", "\n", "        ", "dim", "=", "dim", "+", "src", ".", "dim", "(", ")", "if", "dim", "<", "0", "else", "dim", "\n", "size", "=", "(", "[", "1", "]", "*", "dim", ")", "+", "[", "-", "1", "]", "\n", "ptr", "=", "ptr", ".", "view", "(", "size", ")", "\n", "\n", "# src_max = gather_csr(segment_csr(src, ptr, reduce='max'), ptr)", "\n", "# out = (src - src_max).exp()", "\n", "\n", "out", "=", "src", ".", "exp", "(", ")", "\n", "# out_sum = gather_csr(segment_csr(out, ptr, reduce='sum'), ptr)", "\n", "\n", "\n", "# elif index is not None:", "\n", "#     N = maybe_num_nodes(index, num_nodes)", "\n", "#     src_max = scatter(src, index, dim, dim_size=N, reduce='max')", "\n", "#     src_max = src_max.index_select(dim, index)", "\n", "#     out = (src - src_max).exp()", "\n", "#     out_sum = scatter(out, index, dim, dim_size=N, reduce='sum')", "\n", "#     out_sum = out_sum.index_select(dim, index)", "\n", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "return", "out", "\n", "# return out / (out_sum + 1e-16)", ""]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.Logger.__init__": [[7, 10], ["range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "runs", ",", "info", "=", "None", ")", ":", "\n", "        ", "self", ".", "info", "=", "info", "\n", "self", ".", "results", "=", "[", "[", "]", "for", "_", "in", "range", "(", "runs", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.Logger.add_result": [[11, 15], ["logger.Logger.results[].append", "len", "len"], "methods", ["None"], ["", "def", "add_result", "(", "self", ",", "run", ",", "result", ")", ":", "\n", "        ", "assert", "len", "(", "result", ")", "==", "3", "\n", "assert", "run", ">=", "0", "and", "run", "<", "len", "(", "self", ".", "results", ")", "\n", "self", ".", "results", "[", "run", "]", ".", "append", "(", "result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.Logger.print_statistics": [[16, 47], ["result[].argmax().item", "print", "print", "print", "print", "print", "torch.tensor", "print", "print", "print", "print", "print", "torch.tensor", "torch.tensor", "r[].max().item", "r[].max().item", "r[].item", "r[].item", "best_results.append", "result[].argmax", "result[].max", "result[].max", "r[].max", "r[].max", "r.mean", "r.std", "r.mean", "r.std", "r.mean", "r.std", "r.mean", "r.std", "r[].argmax", "r[].argmax"], "methods", ["None"], ["", "def", "print_statistics", "(", "self", ",", "run", "=", "None", ")", ":", "\n", "        ", "if", "run", "is", "not", "None", ":", "\n", "            ", "result", "=", "100", "*", "torch", ".", "tensor", "(", "self", ".", "results", "[", "run", "]", ")", "\n", "argmax", "=", "result", "[", ":", ",", "1", "]", ".", "argmax", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "f'Run {run + 1:02d}:'", ")", "\n", "print", "(", "f'Highest Train: {result[:, 0].max():.2f}'", ")", "\n", "print", "(", "f'Highest Valid: {result[:, 1].max():.2f}'", ")", "\n", "print", "(", "f'  Final Train: {result[argmax, 0]:.2f}'", ")", "\n", "print", "(", "f'   Final Test: {result[argmax, 2]:.2f}'", ")", "\n", "", "else", ":", "\n", "            ", "result", "=", "100", "*", "torch", ".", "tensor", "(", "self", ".", "results", ")", "\n", "\n", "best_results", "=", "[", "]", "\n", "for", "r", "in", "result", ":", "\n", "                ", "train1", "=", "r", "[", ":", ",", "0", "]", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "valid", "=", "r", "[", ":", ",", "1", "]", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "train2", "=", "r", "[", "r", "[", ":", ",", "1", "]", ".", "argmax", "(", ")", ",", "0", "]", ".", "item", "(", ")", "\n", "test", "=", "r", "[", "r", "[", ":", ",", "1", "]", ".", "argmax", "(", ")", ",", "2", "]", ".", "item", "(", ")", "\n", "best_results", ".", "append", "(", "(", "train1", ",", "valid", ",", "train2", ",", "test", ")", ")", "\n", "\n", "", "best_result", "=", "torch", ".", "tensor", "(", "best_results", ")", "\n", "\n", "print", "(", "f'All runs:'", ")", "\n", "r", "=", "best_result", "[", ":", ",", "0", "]", "\n", "print", "(", "f'Highest Train: {r.mean():.2f} \u00b1 {r.std():.2f}'", ")", "\n", "r", "=", "best_result", "[", ":", ",", "1", "]", "\n", "print", "(", "f'Highest Valid: {r.mean():.2f} \u00b1 {r.std():.2f}'", ")", "\n", "r", "=", "best_result", "[", ":", ",", "2", "]", "\n", "print", "(", "f'  Final Train: {r.mean():.2f} \u00b1 {r.std():.2f}'", ")", "\n", "r", "=", "best_result", "[", ":", ",", "3", "]", "\n", "print", "(", "f'   Final Test: {r.mean():.2f} \u00b1 {r.std():.2f}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.__init__": [[50, 54], ["object.__init__", "logger.AverageValueMeter.reset"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.dataloader.OurDataLoader.__init__", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.reset"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "AverageValueMeter", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "reset", "(", ")", "\n", "self", ".", "val", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.add": [[55, 73], ["ValueError", "numpy.sqrt", "float"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "value", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "value", "\n", "self", ".", "sum", "+=", "value", "*", "n", "\n", "if", "n", "<=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Cannot use a non-positive weight for the running stat.\"", ")", "\n", "", "elif", "self", ".", "n", "==", "0", ":", "\n", "            ", "self", ".", "mean", "=", "0.0", "+", "value", "# This is to force a copy in torch/numpy", "\n", "self", ".", "std", "=", "np", ".", "inf", "\n", "self", ".", "mean_old", "=", "self", ".", "mean", "\n", "self", ".", "m_s", "=", "0.0", "\n", "", "else", ":", "\n", "            ", "self", ".", "mean", "=", "self", ".", "mean_old", "+", "n", "*", "(", "value", "-", "self", ".", "mean_old", ")", "/", "float", "(", "self", ".", "n", "+", "n", ")", "\n", "self", ".", "m_s", "+=", "n", "*", "(", "value", "-", "self", ".", "mean_old", ")", "*", "(", "value", "-", "self", ".", "mean", ")", "\n", "self", ".", "mean_old", "=", "self", ".", "mean", "\n", "self", ".", "std", "=", "np", ".", "sqrt", "(", "self", ".", "m_s", "/", "(", "self", ".", "n", "+", "n", "-", "1.0", ")", ")", "\n", "", "self", ".", "var", "=", "self", ".", "std", "**", "2", "\n", "\n", "self", ".", "n", "+=", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.value": [[74, 76], ["None"], "methods", ["None"], ["", "def", "value", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "mean", ",", "self", ".", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.reset": [[77, 86], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "n", "=", "0", "\n", "self", ".", "sum", "=", "0.0", "\n", "self", ".", "var", "=", "0.0", "\n", "self", ".", "val", "=", "0.0", "\n", "self", ".", "mean", "=", "np", ".", "nan", "\n", "self", ".", "mean_old", "=", "0.0", "\n", "self", ".", "m_s", "=", "0.0", "\n", "self", ".", "std", "=", "np", ".", "nan", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.exp_log": [[89, 230], ["range", "experiment.log_metric", "experiment.log_metric", "experiment.log_metric", "experiment.log_metric", "experiment.log_metric", "experiment.log_metric", "experiment.log_metric", "experiment.log_metric", "experiment.log_metric", "range", "experiment.log_metric", "experiment.log_metric", "experiment.log_metric", "experiment.log_metric", "experiment.log_metric", "experiment.log_metric", "experiment.log_metric", "experiment.log_metric", "experiment.log_metric", "experiment.log_metric", "experiment.log_metric", "experiment.log_metric", "experiment.log_metric", "experiment.log_metric", "model.convs[].gnn_block[].vq.mean.squeeze", "model.convs[].gnn_block[].vq.std.squeeze", "model.convs[].gnn_block[].vq.mean.squeeze", "model.convs[].gnn_block[].vq.std.squeeze", "model.convs[].gnn_block[].vq.running_mean.squeeze", "model.convs[].gnn_block[].vq.running_std.squeeze", "model.convs[].gnn_block[].vq.running_mean.squeeze", "model.convs[].gnn_block[].vq.running_std.squeeze", "model.convs[].gnn_block[].vq.mean.squeeze", "model.convs[].gnn_block[].vq.std.squeeze", "model.convs[].gnn_block[].vq.running_mean.squeeze", "model.convs[].gnn_block[].vq.running_std.squeeze"], "function", ["None"], ["", "", "def", "exp_log", "(", "experiment", ",", "model", ",", "num_layers", ",", "num_D", ",", "num_M", ",", "use_gcn", ",", "conv_type", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "        ", "experiment", ".", "log_metric", "(", "f'train_vq_errors_before_l{i}'", ",", "model", ".", "errors", "[", "i", "]", "[", "0", "]", ")", "\n", "experiment", ".", "log_metric", "(", "f'train_quantized_norms_l{i}'", ",", "model", ".", "quantized_norms", "[", "i", "]", "[", "0", "]", ")", "\n", "experiment", ".", "log_metric", "(", "f'train_vq_errors_rate_before_l{i}'", ",", "model", ".", "errors", "[", "i", "]", "[", "0", "]", "/", "(", "model", ".", "X_B_norms", "[", "i", "]", "[", "0", "]", "+", "1e-24", ")", ")", "\n", "experiment", ".", "log_metric", "(", "f'train_X_B_norms_l{i}'", ",", "model", ".", "X_B_norms", "[", "i", "]", "[", "0", "]", ")", "\n", "\n", "# experiment.log_metric(f'train_grad_errors_before_l{i}', model.convs[i].gnn_block[0].grad_error_before)", "\n", "experiment", ".", "log_metric", "(", "f'train_grad_errors_after_l{i}'", ",", "model", ".", "convs", "[", "i", "]", ".", "gnn_block", "[", "0", "]", ".", "grad_error_after", ")", "\n", "experiment", ".", "log_metric", "(", "f'train_grad_norms_l{i}'", ",", "model", ".", "convs", "[", "i", "]", ".", "gnn_block", "[", "0", "]", ".", "grad_norm", ")", "\n", "\n", "# experiment.log_metric(f'train_grad_errors_rate_before_l{i}',", "\n", "#                       model.convs[i].gnn_block[0].grad_error_before /", "\n", "#                       (model.convs[i].gnn_block[0].grad_norm + 1e-24) )", "\n", "experiment", ".", "log_metric", "(", "f'train_grad_errors_rate_after_l{i}'", ",", "\n", "model", ".", "convs", "[", "i", "]", ".", "gnn_block", "[", "0", "]", ".", "grad_error_after", "/", "\n", "(", "model", ".", "convs", "[", "i", "]", ".", "gnn_block", "[", "0", "]", ".", "grad_norm", "+", "1e-24", ")", ")", "\n", "\n", "# experiment.log_metric(f'train_vq_get_grad_norms_l{i}', model.convs[i].gnn_block[0].vq_get_grad_norm)", "\n", "# experiment.log_metric(f'train_M_grad_norms_l{i}', model.convs[i].gnn_block[0].M_grad_norm)", "\n", "# experiment.log_metric(f'train_ln_grad_norms_l{i}', model.convs[i].gnn_block[0].ln_grad_norm)", "\n", "\n", "# if i >=1 :", "\n", "# experiment.log_metric(f'train_X_B_grad_norms_l{i}', model.convs[i].gnn_block[0].X_B_grad_norm)", "\n", "# experiment.log_metric(f'train_X_bar_grad_norms_l{i}', model.convs[i].gnn_block[0].X_bar_grad_norm)", "\n", "\n", "experiment", ".", "log_metric", "(", "f'train_vq_errors_rate_after_l{i}'", ",", "\n", "model", ".", "convs", "[", "i", "]", ".", "gnn_block", "[", "0", "]", ".", "vq_backward_error", "/", "(", "model", ".", "X_B_norms", "[", "i", "]", "[", "0", "]", "+", "1e-24", ")", ")", "\n", "experiment", ".", "log_metric", "(", "f'train_vq_errors_after_l{i}'", ",", "\n", "model", ".", "convs", "[", "i", "]", ".", "gnn_block", "[", "0", "]", ".", "vq_backward_error", ")", "\n", "\n", "\n", "for", "j", "in", "range", "(", "num_D", ")", ":", "\n", "            ", "experiment", ".", "log_metric", "(", "f'train_EMA_feat_mean_l{i}_d{j}'", ",", "\n", "model", ".", "convs", "[", "i", "]", ".", "gnn_block", "[", "0", "]", ".", "vq", ".", "mean", ".", "squeeze", "(", ")", "[", "j", "]", ")", "\n", "experiment", ".", "log_metric", "(", "f'train_EMA_feat_std_l{i}_d{j}'", ",", "\n", "model", ".", "convs", "[", "i", "]", ".", "gnn_block", "[", "0", "]", ".", "vq", ".", "std", ".", "squeeze", "(", ")", "[", "j", "]", ")", "\n", "experiment", ".", "log_metric", "(", "f'train_EMA_grad_mean_l{i}_d{j}'", ",", "\n", "model", ".", "convs", "[", "i", "]", ".", "gnn_block", "[", "0", "]", ".", "vq", ".", "mean", ".", "squeeze", "(", ")", "[", "num_D", "+", "j", "]", ")", "\n", "experiment", ".", "log_metric", "(", "f'train_EMA_grad_std_l{i}_d{j}'", ",", "\n", "model", ".", "convs", "[", "i", "]", ".", "gnn_block", "[", "0", "]", ".", "vq", ".", "std", ".", "squeeze", "(", ")", "[", "num_D", "+", "j", "]", ")", "\n", "\n", "experiment", ".", "log_metric", "(", "f'train_EMA_feat_mean_running_l{i}_d{j}'", ",", "\n", "model", ".", "convs", "[", "i", "]", ".", "gnn_block", "[", "0", "]", ".", "vq", ".", "running_mean", ".", "squeeze", "(", ")", "[", "j", "]", ")", "\n", "experiment", ".", "log_metric", "(", "f'train_EMA_feat_std_running_l{i}_d{j}'", ",", "\n", "model", ".", "convs", "[", "i", "]", ".", "gnn_block", "[", "0", "]", ".", "vq", ".", "running_std", ".", "squeeze", "(", ")", "[", "j", "]", ")", "\n", "experiment", ".", "log_metric", "(", "f'train_EMA_grad_mean_running_l{i}_d{j}'", ",", "\n", "model", ".", "convs", "[", "i", "]", ".", "gnn_block", "[", "0", "]", ".", "vq", ".", "running_mean", ".", "squeeze", "(", ")", "[", "num_D", "+", "j", "]", ")", "\n", "experiment", ".", "log_metric", "(", "f'train_EMA_grad_std_running_l{i}_d{j}'", ",", "\n", "model", ".", "convs", "[", "i", "]", ".", "gnn_block", "[", "0", "]", ".", "vq", ".", "running_std", ".", "squeeze", "(", ")", "[", "num_D", "+", "j", "]", ")", "\n", "\n", "", "if", "conv_type", "==", "'GAT'", ":", "\n", "            ", "experiment", ".", "log_metric", "(", "f'train_EMA_grad_mean_l{i}_extra'", ",", "\n", "model", ".", "convs", "[", "i", "]", ".", "gnn_block", "[", "0", "]", ".", "vq", ".", "mean", ".", "squeeze", "(", ")", "[", "num_D", "*", "2", "]", ")", "\n", "experiment", ".", "log_metric", "(", "f'train_EMA_grad_std_l{i}_extra'", ",", "\n", "model", ".", "convs", "[", "i", "]", ".", "gnn_block", "[", "0", "]", ".", "vq", ".", "std", ".", "squeeze", "(", ")", "[", "num_D", "*", "2", "]", ")", "\n", "experiment", ".", "log_metric", "(", "f'train_EMA_grad_mean_running_l{i}_extra'", ",", "\n", "model", ".", "convs", "[", "i", "]", ".", "gnn_block", "[", "0", "]", ".", "vq", ".", "running_mean", ".", "squeeze", "(", ")", "[", "num_D", "*", "2", "]", ")", "\n", "experiment", ".", "log_metric", "(", "f'train_EMA_grad_std_running_l{i}_extra'", ",", "\n", "model", ".", "convs", "[", "i", "]", ".", "gnn_block", "[", "0", "]", ".", "vq", ".", "running_std", ".", "squeeze", "(", ")", "[", "num_D", "*", "2", "]", ")", "\n", "\n", "# experiment.log_metric(f'train_EMA_feat_zero_rate_l{i}',", "\n", "#                       model.convs[i].gnn_block[0].vq.feat_zero_rate.item())", "\n", "# experiment.log_metric(f'train_EMA_grad_zero_rate_l{i}',", "\n", "#                       model.convs[i].gnn_block[0].vq.grad_zero_rate.item())", "\n", "\n", "# labels, info_counts = torch.unique(model.convs[i].gnn_block[0].c_indices[1], sorted=True,", "\n", "#                                    return_counts=True)", "\n", "# info_counts = torch.cat([info_counts.cpu(), torch.zeros(num_M - labels.shape[0])])", "\n", "#", "\n", "# info_counts = torch.tensor(info_counts, dtype=torch.float)", "\n", "# info_counts_mean = torch.mean(info_counts).item()", "\n", "# info_counts_max = torch.max(info_counts).item()", "\n", "# info_counts_min = torch.min(info_counts).item()", "\n", "# info_counts_median = torch.median(info_counts).item()", "\n", "# info_counts_std = torch.std(info_counts).item()", "\n", "#", "\n", "# experiment.log_metric(f'info_counts_mean_l{i}', info_counts_mean)", "\n", "# experiment.log_metric(f'info_used_num_l{i}', labels.shape[0])", "\n", "# experiment.log_metric(f'info_counts_max_l{i}', info_counts_max)", "\n", "# experiment.log_metric(f'info_counts_min_l{i}', info_counts_min)", "\n", "# experiment.log_metric(f'info_counts_median_l{i}', info_counts_median)", "\n", "# experiment.log_metric(f'info_counts_std_l{i}', info_counts_std)", "\n", "\n", "# grad_error_by_cluster = model.convs[i].gnn_block[0].grad_error_by_cluster", "\n", "# grad_error_by_cluster_mean = torch.mean(grad_error_by_cluster).item()", "\n", "# grad_error_by_cluster_max = torch.max(grad_error_by_cluster).item()", "\n", "# grad_error_by_cluster_min = torch.min(grad_error_by_cluster).item()", "\n", "# grad_error_by_cluster_median = torch.median(grad_error_by_cluster).item()", "\n", "# grad_error_by_cluster_std = torch.std(grad_error_by_cluster).item()", "\n", "#", "\n", "# experiment.log_metric(f'grad_error_by_cluster_mean_l{i}', grad_error_by_cluster_mean)", "\n", "# experiment.log_metric(f'grad_error_by_cluster_max_l{i}', grad_error_by_cluster_max)", "\n", "# experiment.log_metric(f'grad_error_by_cluster_min_l{i}', grad_error_by_cluster_min)", "\n", "# experiment.log_metric(f'grad_error_by_cluster_median_l{i}', grad_error_by_cluster_median)", "\n", "# experiment.log_metric(f'grad_error_by_cluster_std_l{i}', grad_error_by_cluster_std)", "\n", "\n", "# feat_error_by_cluster = model.convs[i].gnn_block[0].feat_error_by_cluster", "\n", "# feat_error_by_cluster_mean = torch.mean(feat_error_by_cluster).item()", "\n", "# feat_error_by_cluster_max = torch.max(feat_error_by_cluster).item()", "\n", "# feat_error_by_cluster_min = torch.min(feat_error_by_cluster).item()", "\n", "# feat_error_by_cluster_median = torch.median(feat_error_by_cluster).item()", "\n", "# feat_error_by_cluster_std = torch.std(feat_error_by_cluster).item()", "\n", "#", "\n", "# experiment.log_metric(f'feat_error_by_cluster_mean_l{i}', feat_error_by_cluster_mean)", "\n", "# experiment.log_metric(f'feat_error_by_cluster_max_l{i}', feat_error_by_cluster_max)", "\n", "# experiment.log_metric(f'feat_error_by_cluster_min_l{i}', feat_error_by_cluster_min)", "\n", "# experiment.log_metric(f'feat_error_by_cluster_median_l{i}', feat_error_by_cluster_median)", "\n", "# experiment.log_metric(f'feat_error_by_cluster_std_l{i}', feat_error_by_cluster_std)", "\n", "\n", "# feat_cen_dists, grad_cen_dists = model.convs[i].gnn_block[0].vq.get_embedding_for_record()", "\n", "#", "\n", "# feat_cen_dists_mean = torch.mean(feat_cen_dists).item()", "\n", "# feat_cen_dists_max = torch.max(feat_cen_dists).item()", "\n", "# feat_cen_dists_min = torch.min(feat_cen_dists).item()", "\n", "# feat_cen_dists_median = torch.median(feat_cen_dists).item()", "\n", "# feat_cen_dists_std = torch.std(feat_cen_dists).item()", "\n", "#", "\n", "# # centroids distances with each other", "\n", "# experiment.log_metric(f'feat_cen_dists_mean_l{i}', feat_cen_dists_mean)", "\n", "# experiment.log_metric(f'feat_cen_dists_max_l{i}', feat_cen_dists_max)", "\n", "# experiment.log_metric(f'feat_cen_dists_min_l{i}', feat_cen_dists_min)", "\n", "# experiment.log_metric(f'feat_cen_dists_median_l{i}', feat_cen_dists_median)", "\n", "# experiment.log_metric(f'feat_cen_dists_std_l{i}', feat_cen_dists_std)", "\n", "\n", "# grad_cen_dists_mean = torch.mean(grad_cen_dists).item()", "\n", "# grad_cen_dists_max = torch.max(grad_cen_dists).item()", "\n", "# grad_cen_dists_min = torch.min(grad_cen_dists).item()", "\n", "# grad_cen_dists_median = torch.median(grad_cen_dists).item()", "\n", "# grad_cen_dists_std = torch.std(grad_cen_dists).item()", "\n", "\n", "# centroids distances with each other", "\n", "# experiment.log_metric(f'grad_cen_dists_mean_l{i}', grad_cen_dists_mean)", "\n", "# experiment.log_metric(f'grad_cen_dists_max_l{i}', grad_cen_dists_max)", "\n", "# experiment.log_metric(f'grad_cen_dists_min_l{i}', grad_cen_dists_min)", "\n", "# experiment.log_metric(f'grad_cen_dists_median_l{i}', grad_cen_dists_median)", "\n", "# experiment.log_metric(f'grad_cen_dists_std_l{i}', grad_cen_dists_std)", "\n", "\n", "", "if", "conv_type", "==", "'GAT'", ":", "\n", "            ", "experiment", ".", "log_metric", "(", "f'a-grad-norm-l{i}'", ",", "model", ".", "a_grad_norms", "[", "i", "]", ")", "\n", "", "experiment", ".", "log_metric", "(", "f'w-grad-norm-l{i}'", ",", "model", ".", "w_grad_norms", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.parser.parse": [[3, 69], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print"], "function", ["None"], ["def", "parse", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'OGBN-Arxiv (GNN)'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-second-fc'", ",", "action", "=", "'store_false'", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--EMA'", ",", "action", "=", "'store_false'", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--split'", ",", "action", "=", "'store_false'", ",", "default", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--log-steps'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--runs'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--cluster'", ",", "type", "=", "str", ",", "default", "=", "'vq'", ")", "\n", "parser", ".", "add_argument", "(", "'--ln-para'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--kmeans-init'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--kmeans-iter'", ",", "type", "=", "int", ",", "default", "=", "100", ")", "\n", "parser", ".", "add_argument", "(", "'--dropbranch'", ",", "type", "=", "float", ",", "default", "=", "0.", ")", "\n", "parser", ".", "add_argument", "(", "'--weight-ahead'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--skip'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--commitment-cost'", ",", "type", "=", "float", ",", "default", "=", "0.", ")", "\n", "parser", ".", "add_argument", "(", "'--num-branch'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--ce-only'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--sche'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--use-gcn'", ",", "action", "=", "'store_true'", ")", "# not used", "\n", "\n", "parser", ".", "add_argument", "(", "'--data-root'", ",", "type", "=", "str", ",", "default", "=", "'/cmlscratch/kong/datasets'", ")", "\n", "parser", ".", "add_argument", "(", "'--device'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--num-layers'", ",", "type", "=", "int", ",", "default", "=", "3", ")", "\n", "parser", ".", "add_argument", "(", "'--hidden-channels'", ",", "type", "=", "int", ",", "default", "=", "128", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.01", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "500", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "10000", ")", "\n", "parser", ".", "add_argument", "(", "'--test-batch-size'", ",", "type", "=", "int", ",", "default", "=", "60000", ")", "\n", "parser", ".", "add_argument", "(", "'--num-M'", ",", "type", "=", "int", ",", "default", "=", "256", ")", "\n", "parser", ".", "add_argument", "(", "'--num-D'", ",", "type", "=", "int", ",", "default", "=", "4", ")", "\n", "parser", ".", "add_argument", "(", "'--grad-scale'", ",", "nargs", "=", "'+'", ",", "type", "=", "float", ",", "default", "=", "[", "1", ",", "1", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--act'", ",", "type", "=", "str", ",", "default", "=", "'leaky_gelu'", ")", "\n", "parser", ".", "add_argument", "(", "'--bn-flag'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--warm-up'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--warm-up-epochs'", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.1", ")", "\n", "parser", ".", "add_argument", "(", "'--conv-type'", ",", "type", "=", "str", ",", "default", "=", "'GCN'", ",", "\n", "choices", "=", "[", "'GCN'", ",", "'SAGE'", ",", "'GAT'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--sampler-type'", ",", "type", "=", "str", ",", "default", "=", "'edge'", ",", "\n", "choices", "=", "[", "'node'", ",", "'edge'", ",", "'rw'", ",", "'cont'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--recovery-flag'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--walk-length'", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "'--cont-sliding-window'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--clip'", ",", "nargs", "=", "'+'", ",", "type", "=", "float", ",", "default", "=", "None", ")", "# w, a", "\n", "parser", ".", "add_argument", "(", "'--transformer-flag'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'arxiv'", ",", "\n", "choices", "=", "[", "'arxiv'", ",", "'products'", ",", "'yelp'", ",", "'reddit'", ",", "'flickr'", ",", "'ppi'", ",", "'cluster'", ",", "'collab'", ",", "'citation2'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--num-workers'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha-dropout-flag'", ",", "action", "=", "'store_true'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--exp-name'", ",", "type", "=", "str", ",", "default", "=", "'test'", ")", "\n", "parser", ".", "add_argument", "(", "'--exp'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--exp-tag'", ",", "type", "=", "str", ",", "default", "=", "'exp'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "print", "(", "args", ")", "\n", "return", "args", "", "", ""]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.scheduler.GradualWarmupScheduler.__init__": [[16, 24], ["torch.optim.lr_scheduler._LRScheduler.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.dataloader.OurDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "multiplier", ",", "total_epoch", ",", "after_scheduler", "=", "None", ")", ":", "\n", "        ", "self", ".", "multiplier", "=", "multiplier", "\n", "if", "self", ".", "multiplier", "<", "1.", ":", "\n", "            ", "raise", "ValueError", "(", "'multiplier should be greater thant or equal to 1.'", ")", "\n", "", "self", ".", "total_epoch", "=", "total_epoch", "\n", "self", ".", "after_scheduler", "=", "after_scheduler", "\n", "self", ".", "finished", "=", "False", "\n", "super", "(", "GradualWarmupScheduler", ",", "self", ")", ".", "__init__", "(", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.scheduler.GradualWarmupScheduler.get_lr": [[25, 38], ["scheduler.GradualWarmupScheduler.after_scheduler.get_last_lr", "float"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "last_epoch", ">", "self", ".", "total_epoch", ":", "\n", "            ", "if", "self", ".", "after_scheduler", ":", "\n", "                ", "if", "not", "self", ".", "finished", ":", "\n", "                    ", "self", ".", "after_scheduler", ".", "base_lrs", "=", "[", "base_lr", "*", "self", ".", "multiplier", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "self", ".", "finished", "=", "True", "\n", "", "return", "self", ".", "after_scheduler", ".", "get_last_lr", "(", ")", "\n", "", "return", "[", "base_lr", "*", "self", ".", "multiplier", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n", "", "if", "self", ".", "multiplier", "==", "1.0", ":", "\n", "            ", "return", "[", "base_lr", "*", "(", "float", "(", "self", ".", "last_epoch", ")", "/", "self", ".", "total_epoch", ")", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "base_lr", "*", "(", "(", "self", ".", "multiplier", "-", "1.", ")", "*", "self", ".", "last_epoch", "/", "self", ".", "total_epoch", "+", "1.", ")", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.scheduler.GradualWarmupScheduler.step_ReduceLROnPlateau": [[39, 52], ["zip", "scheduler.GradualWarmupScheduler.after_scheduler.step", "scheduler.GradualWarmupScheduler.after_scheduler.step"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.scheduler.GradualWarmupScheduler.step"], ["", "", "def", "step_ReduceLROnPlateau", "(", "self", ",", "metrics", ",", "epoch", "=", "None", ")", ":", "\n", "        ", "if", "epoch", "is", "None", ":", "\n", "            ", "epoch", "=", "self", ".", "last_epoch", "+", "1", "\n", "", "self", ".", "last_epoch", "=", "epoch", "if", "epoch", "!=", "0", "else", "1", "# ReduceLROnPlateau is called at the end of epoch, whereas others are called at beginning", "\n", "if", "self", ".", "last_epoch", "<=", "self", ".", "total_epoch", ":", "\n", "            ", "warmup_lr", "=", "[", "base_lr", "*", "(", "(", "self", ".", "multiplier", "-", "1.", ")", "*", "self", ".", "last_epoch", "/", "self", ".", "total_epoch", "+", "1.", ")", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "for", "param_group", ",", "lr", "in", "zip", "(", "self", ".", "optimizer", ".", "param_groups", ",", "warmup_lr", ")", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "", "else", ":", "\n", "            ", "if", "epoch", "is", "None", ":", "\n", "                ", "self", ".", "after_scheduler", ".", "step", "(", "metrics", ",", "None", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "after_scheduler", ".", "step", "(", "metrics", ",", "epoch", "-", "self", ".", "total_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.scheduler.GradualWarmupScheduler.step": [[53, 65], ["type", "scheduler.GradualWarmupScheduler.step_ReduceLROnPlateau", "scheduler.GradualWarmupScheduler.after_scheduler.get_last_lr", "super().step", "scheduler.GradualWarmupScheduler.after_scheduler.step", "scheduler.GradualWarmupScheduler.after_scheduler.step"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.scheduler.GradualWarmupScheduler.step_ReduceLROnPlateau", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.scheduler.GradualWarmupScheduler.step"], ["", "", "", "def", "step", "(", "self", ",", "epoch", "=", "None", ",", "metrics", "=", "None", ")", ":", "\n", "        ", "if", "type", "(", "self", ".", "after_scheduler", ")", "!=", "ReduceLROnPlateau", ":", "\n", "            ", "if", "self", ".", "finished", "and", "self", ".", "after_scheduler", ":", "\n", "                ", "if", "epoch", "is", "None", ":", "\n", "                    ", "self", ".", "after_scheduler", ".", "step", "(", "None", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "after_scheduler", ".", "step", "(", "epoch", "-", "self", ".", "total_epoch", ")", "\n", "", "self", ".", "_last_lr", "=", "self", ".", "after_scheduler", ".", "get_last_lr", "(", ")", "\n", "", "else", ":", "\n", "                ", "return", "super", "(", "GradualWarmupScheduler", ",", "self", ")", ".", "step", "(", "epoch", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "step_ReduceLROnPlateau", "(", "metrics", ",", "epoch", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.dataloader.OurDataLoader.__init__": [[7, 34], ["super().__init__", "range"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.dataloader.OurDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "batch_size", ",", "gnn_type", "=", "'GCN'", ",", "sampler_type", "=", "'edge'", ",", "walk_length", "=", "None", ",", "\n", "recovery_flag", "=", "True", ",", "train_flag", "=", "True", ",", "cont_sliding_window", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "sampler_type", "=", "sampler_type", "\n", "self", ".", "gnn_type", "=", "gnn_type", "\n", "self", ".", "recovery_flag", "=", "recovery_flag", "\n", "self", ".", "walk_length", "=", "walk_length", "\n", "self", ".", "train_flag", "=", "train_flag", "\n", "self", ".", "cont_sliding_window", "=", "cont_sliding_window", "\n", "\n", "self", ".", "x", "=", "data", ".", "x", "\n", "self", ".", "adj_t", "=", "data", ".", "adj_t", "\n", "self", ".", "deg", "=", "data", ".", "deg", "\n", "self", ".", "deg_inv", "=", "data", ".", "deg_inv", "\n", "self", ".", "N", "=", "self", ".", "x", ".", "shape", "[", "0", "]", "\n", "self", ".", "num_batches", "=", "(", "self", ".", "N", "//", "batch_size", ")", "+", "1", "\n", "\n", "if", "sampler_type", "==", "'edge'", ":", "\n", "            ", "self", ".", "batch_size", "=", "batch_size", "//", "2", "\n", "", "elif", "sampler_type", "==", "'rw'", ":", "\n", "            ", "self", ".", "batch_size", "=", "batch_size", "//", "(", "self", ".", "walk_length", "+", "1", ")", "\n", "", "elif", "sampler_type", "==", "'cont'", ":", "\n", "            ", "self", ".", "batch_size", "=", "batch_size", "//", "self", ".", "cont_sliding_window", "\n", "", "else", ":", "\n", "            ", "self", ".", "batch_size", "=", "batch_size", "\n", "\n", "", "super", "(", "OurDataLoader", ",", "self", ")", ".", "__init__", "(", "range", "(", "self", ".", "N", ")", ",", "collate_fn", "=", "self", ".", "__collate__", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.dataloader.OurDataLoader.__collate__": [[35, 89], ["torch.tensor", "node_idx_list.append", "A_BN.coo.coo.coo", "result_list.append", "node_idx_list.append", "[].coo", "dataloader.OurDataLoader.adj_t.random_walk().view().unique", "node_idx_list.append", "dataloader.OurDataLoader.deg_inv.view", "A_NB.coo", "dataloader.OurDataLoader.adj_t.random_walk().view().unique", "node_idx_list.append", "range", "ValueError", "dataloader.OurDataLoader.deg[].view", "dataloader.OurDataLoader.adj_t.random_walk().view", "torch.cat", "node_idx_list.append", "range", "dataloader.OurDataLoader.adj_t.saint_subgraph", "dataloader.OurDataLoader.adj_t.random_walk().view", "[].unique", "node_idx_list_holder.append", "dataloader.OurDataLoader.adj_t.random_walk", "torch.cat().unique", "dataloader.OurDataLoader.adj_t.random_walk", "len", "dataloader.OurDataLoader.adj_t.random_walk", "torch.cat"], "methods", ["None"], ["", "def", "__collate__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "idx", "=", "torch", ".", "tensor", "(", "idx", ")", "\n", "node_idx_list", "=", "[", "]", "\n", "\n", "if", "self", ".", "sampler_type", "==", "'node'", ":", "\n", "            ", "node_idx_list", ".", "append", "(", "idx", ")", "\n", "\n", "", "elif", "self", ".", "sampler_type", "==", "'edge'", ":", "\n", "            ", "node_idx_list", ".", "append", "(", "self", ".", "adj_t", ".", "random_walk", "(", "idx", ",", "1", ")", ".", "view", "(", "-", "1", ")", ".", "unique", "(", ")", ")", "\n", "\n", "", "elif", "self", ".", "sampler_type", "==", "'rw'", ":", "\n", "            ", "node_idx_list", ".", "append", "(", "self", ".", "adj_t", ".", "random_walk", "(", "idx", ",", "self", ".", "walk_length", ")", ".", "view", "(", "-", "1", ")", ".", "unique", "(", ")", ")", "\n", "\n", "", "elif", "self", ".", "sampler_type", "==", "'cont'", ":", "\n", "            ", "node_idx", "=", "idx", "\n", "node_idx_list", ".", "append", "(", "node_idx", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "walk_length", ")", ":", "\n", "                ", "node_idx", "=", "torch", ".", "cat", "(", "[", "node_idx", "]", "*", "3", ",", "0", ")", "\n", "node_idx", "=", "self", ".", "adj_t", ".", "random_walk", "(", "node_idx", ",", "1", ")", "[", ":", ",", "1", "]", ".", "unique", "(", ")", "[", ":", "self", ".", "batch_size", "]", "\n", "node_idx_list", ".", "append", "(", "node_idx", ")", "\n", "\n", "", "if", "self", ".", "cont_sliding_window", ">", "1", ":", "\n", "                ", "node_idx_list_holder", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "node_idx_list", ")", "-", "self", ".", "cont_sliding_window", "+", "1", ")", ":", "\n", "                    ", "node_idx_list_holder", ".", "append", "(", "torch", ".", "cat", "(", "node_idx_list", "[", "i", ":", "i", "+", "self", ".", "cont_sliding_window", "]", ")", ".", "unique", "(", ")", ")", "\n", "", "node_idx_list", "=", "node_idx_list_holder", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Sampler type not supported!'", ")", "\n", "\n", "", "result_list", "=", "[", "]", "\n", "for", "node_idx", "in", "node_idx_list", ":", "\n", "\n", "            ", "x", "=", "self", ".", "x", "[", "node_idx", "]", "\n", "deg_inv", "=", "self", ".", "deg_inv", "[", "node_idx", "]", "\n", "A_BN", "=", "self", ".", "adj_t", "[", "node_idx", "]", "\n", "\n", "if", "self", ".", "recovery_flag", "and", "self", ".", "train_flag", ":", "\n", "                ", "A_BB", "=", "self", ".", "adj_t", ".", "saint_subgraph", "(", "node_idx", ")", "[", "0", "]", ".", "coo", "(", ")", "\n", "", "else", ":", "\n", "                ", "A_BB", "=", "None", "\n", "\n", "", "if", "self", ".", "gnn_type", "!=", "'GCN'", "and", "self", ".", "train_flag", ":", "\n", "# start = time.time()", "\n", "                ", "A_NB", "=", "self", ".", "deg", "[", "node_idx", "]", ".", "view", "(", "-", "1", ",", "1", ")", "*", "A_BN", "*", "self", ".", "deg_inv", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "A_NB_v", "=", "A_NB", ".", "coo", "(", ")", "[", "2", "]", "\n", "# print(time.time()-start)", "\n", "\n", "", "else", ":", "\n", "                ", "A_NB_v", "=", "None", "\n", "", "A_BN", "=", "A_BN", ".", "coo", "(", ")", "\n", "\n", "result_list", ".", "append", "(", "(", "x", ",", "deg_inv", ",", "A_BN", ",", "A_BB", ",", "A_NB_v", ",", "node_idx", ")", ")", "\n", "\n", "", "return", "result_list", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.dataloader.mapper": [[144, 193], ["torch.cat", "torch.cat", "torch.cat", "torch_sparse.coalesce", "torch_sparse.SparseTensor", "c[].to", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.stack", "torch.arange().to", "torch.cat", "adj_input.to_symmetric.to_symmetric", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "c[].to", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat", "torch.cat", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.arange"], "function", ["None"], ["def", "mapper", "(", "batch", ",", "c", ",", "num_M", ",", "gnn_type", ",", "device", ")", ":", "\n", "    ", "deg_inv", ",", "A_BN", ",", "A_BB", ",", "A_NB_v", ",", "batch_idx", "=", "batch", "\n", "num_B", "=", "batch_idx", ".", "shape", "[", "0", "]", "\n", "\n", "rows", ",", "cols", ",", "values", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "A_BN_r", ",", "A_BN_c", ",", "A_BN_v", "=", "A_BN", "\n", "A_BN_c_mapped", "=", "c", "[", "A_BN_c", "]", ".", "to", "(", "torch", ".", "long", ")", "+", "num_B", "\n", "rows", ".", "append", "(", "A_BN_r", ")", ",", "cols", ".", "append", "(", "A_BN_c_mapped", ")", ",", "values", ".", "append", "(", "A_BN_v", ")", "\n", "\n", "if", "A_NB_v", "is", "not", "None", ":", "\n", "        ", "rows", ".", "append", "(", "A_BN_c_mapped", ")", ",", "cols", ".", "append", "(", "A_BN_r", ")", ",", "values", ".", "append", "(", "A_NB_v", ")", "\n", "\n", "", "if", "A_BB", "is", "not", "None", ":", "\n", "        ", "A_BB_r", ",", "A_BB_c", ",", "A_BB_v", "=", "A_BB", "\n", "rows", ".", "append", "(", "A_BB_r", ")", ",", "cols", ".", "append", "(", "A_BB_c", ")", ",", "values", ".", "append", "(", "A_BB_v", ")", "\n", "\n", "A_BB_c_org", "=", "batch_idx", "[", "A_BB_c", "]", "\n", "A_BB_c_mapped", "=", "c", "[", "A_BB_c_org", "]", ".", "to", "(", "torch", ".", "long", ")", "+", "num_B", "\n", "A_BB_v_neg", "=", "-", "1.0", "*", "A_BB_v", "\n", "rows", ".", "append", "(", "A_BB_r", ")", ",", "cols", ".", "append", "(", "A_BB_c_mapped", ")", ",", "values", ".", "append", "(", "A_BB_v_neg", ")", "\n", "\n", "if", "A_NB_v", "is", "not", "None", ":", "\n", "            ", "A_BB_r_org", "=", "batch_idx", "[", "A_BB_r", "]", "\n", "A_BB_r_mapped", "=", "c", "[", "A_BB_r_org", "]", "+", "num_B", "\n", "rows", ".", "append", "(", "A_BB_r_mapped", ")", ",", "cols", ".", "append", "(", "A_BB_c", ")", ",", "values", ".", "append", "(", "A_BB_v_neg", ")", "\n", "\n", "", "", "rows", "=", "torch", ".", "cat", "(", "rows", ")", "\n", "cols", "=", "torch", ".", "cat", "(", "cols", ")", "\n", "values", "=", "torch", ".", "cat", "(", "values", ")", "\n", "\n", "dim", "=", "num_B", "+", "num_M", "\n", "idx_input", ",", "value_input", "=", "coalesce", "(", "torch", ".", "stack", "(", "[", "rows", ",", "cols", "]", ",", "dim", "=", "0", ")", ",", "values", ",", "m", "=", "dim", ",", "n", "=", "dim", ")", "\n", "\n", "slicing", "=", "value_input", ">", "0", "\n", "row_input", "=", "idx_input", "[", "0", "]", "[", "slicing", "]", "\n", "col_input", "=", "idx_input", "[", "1", "]", "[", "slicing", "]", "\n", "value_input", "=", "value_input", "[", "slicing", "]", "\n", "\n", "if", "gnn_type", "!=", "'SAGE'", ":", "\n", "        ", "self_loops", "=", "torch", ".", "arange", "(", "batch_idx", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "device", ")", "\n", "row_input", ",", "col_input", "=", "torch", ".", "cat", "(", "[", "row_input", ",", "self_loops", "]", ")", ",", "torch", ".", "cat", "(", "[", "col_input", ",", "self_loops", "]", ")", "\n", "value_input", "=", "torch", ".", "cat", "(", "[", "value_input", ",", "deg_inv", "]", ")", "\n", "\n", "", "adj_input", "=", "SparseTensor", "(", "row", "=", "row_input", ",", "col", "=", "col_input", ",", "value", "=", "value_input", ",", "sparse_sizes", "=", "(", "dim", ",", "dim", ")", ")", "\n", "\n", "if", "gnn_type", "==", "'GCN'", ":", "\n", "        ", "adj_input", "=", "adj_input", ".", "to_symmetric", "(", ")", "\n", "\n", "", "return", "adj_input", "\n", "", ""]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.norm_adj": [[14, 35], ["data.adj_t.set_diag", "data.adj_t.sum().to", "data.adj_t.sum().to.pow", "deg.pow.view", "data.adj_t.sum().to", "data.adj_t.sum().to.pow", "data.adj_t.sum", "deg.pow.view", "deg.pow.view", "data.adj_t.set_diag", "data.adj_t.sum().to", "data.adj_t.sum().to.pow", "ValueError", "float", "data.adj_t.sum", "deg.pow.view", "float", "data.adj_t.sum", "float"], "function", ["None"], ["def", "norm_adj", "(", "data", ",", "conv_type", ")", ":", "\n", "    ", "if", "conv_type", "==", "'GCN'", ":", "\n", "        ", "data", ".", "adj_t", "=", "data", ".", "adj_t", ".", "set_diag", "(", ")", "# self-loop", "\n", "deg", "=", "data", ".", "adj_t", ".", "sum", "(", "dim", "=", "1", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "deg_inv_sqrt", "=", "deg", ".", "pow", "(", "-", "1", "/", "2", ")", "\n", "deg_inv_sqrt", "[", "deg_inv_sqrt", "==", "float", "(", "'inf'", ")", "]", "=", "0", "\n", "data", ".", "adj_t", "=", "deg_inv_sqrt", ".", "view", "(", "-", "1", ",", "1", ")", "*", "data", ".", "adj_t", "*", "deg_inv_sqrt", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "", "elif", "conv_type", "==", "'SAGE'", ":", "\n", "        ", "deg", "=", "data", ".", "adj_t", ".", "sum", "(", "dim", "=", "1", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "deg_inv", "=", "deg", ".", "pow", "(", "-", "1", ")", "\n", "deg_inv", "[", "deg_inv", "==", "float", "(", "'inf'", ")", "]", "=", "0", "\n", "data", ".", "adj_t", "=", "deg_inv", ".", "view", "(", "-", "1", ",", "1", ")", "*", "data", ".", "adj_t", "\n", "", "elif", "conv_type", "==", "'GAT'", ":", "\n", "        ", "data", ".", "adj_t", "=", "data", ".", "adj_t", ".", "set_diag", "(", ")", "# self-loop", "\n", "deg", "=", "data", ".", "adj_t", ".", "sum", "(", "dim", "=", "1", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "deg_inv", "=", "deg", ".", "pow", "(", "-", "1", ")", "\n", "deg_inv", "[", "deg_inv", "==", "float", "(", "'inf'", ")", "]", "=", "0", "\n", "data", ".", "adj_t", "=", "deg_inv", ".", "view", "(", "-", "1", ",", "1", ")", "*", "data", ".", "adj_t", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'GNN conv type not supported'", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.compute_micro_f1": [[36, 56], ["y.dim", "int", "int", "int", "int", "y.size", "logits.argmax().eq().sum", "logits.argmax().eq", "logits.argmax"], "function", ["None"], ["", "def", "compute_micro_f1", "(", "logits", ",", "y", ",", "mask", "=", "None", ")", "->", "float", ":", "\n", "    ", "if", "mask", "is", "not", "None", ":", "\n", "        ", "logits", ",", "y", "=", "logits", "[", "mask", "]", ",", "y", "[", "mask", "]", "\n", "\n", "", "if", "y", ".", "dim", "(", ")", "==", "1", ":", "\n", "        ", "return", "int", "(", "logits", ".", "argmax", "(", "dim", "=", "-", "1", ")", ".", "eq", "(", "y", ")", ".", "sum", "(", ")", ")", "/", "y", ".", "size", "(", "0", ")", "\n", "", "else", ":", "\n", "        ", "y_pred", "=", "logits", ">", "0", "\n", "y_true", "=", "y", ">", "0.5", "\n", "\n", "tp", "=", "int", "(", "(", "y_true", "&", "y_pred", ")", ".", "sum", "(", ")", ")", "\n", "fp", "=", "int", "(", "(", "~", "y_true", "&", "y_pred", ")", ".", "sum", "(", ")", ")", "\n", "fn", "=", "int", "(", "(", "y_true", "&", "~", "y_pred", ")", ".", "sum", "(", ")", ")", "\n", "\n", "try", ":", "\n", "            ", "precision", "=", "tp", "/", "(", "tp", "+", "fp", ")", "\n", "recall", "=", "tp", "/", "(", "tp", "+", "fn", ")", "\n", "return", "2", "*", "(", "precision", "*", "recall", ")", "/", "(", "precision", "+", "recall", ")", "\n", "", "except", "ZeroDivisionError", ":", "\n", "            ", "return", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.prepare_batch_input": [[57, 76], ["print", "torch_sparse.SparseTensor", "misc..", "x[].to", "torch_sparse.SparseTensor.to"], "function", ["None"], ["", "", "", "def", "prepare_batch_input", "(", "x", ",", "batch", ",", "device", ")", ":", "\n", "    ", "subset", ",", "edge_index", ",", "edge_w", "=", "batch", "[", "0", "]", "\n", "batch_idx", "=", "batch", "[", "-", "1", "]", "\n", "\n", "import", "pdb", "\n", "from", "torch_geometric", ".", "utils", "import", "add_remaining_self_loops", "\n", "\n", "new_edge_index", "=", "add_remaining_self_loops", "(", "edge_index", ")", "[", "0", "]", "\n", "num_newly_added_edges", "=", "new_edge_index", ".", "shape", "[", "1", "]", "-", "edge_index", ".", "shape", "[", "1", "]", "\n", "\n", "num_B", "=", "batch_idx", ".", "shape", "[", "0", "]", "\n", "dim", "=", "subset", ".", "shape", "[", "0", "]", "\n", "num_B_prime", "=", "dim", "-", "num_B", "\n", "\n", "print", "(", "f'num_B_prime:{num_B_prime}, new edges:{num_newly_added_edges}'", ")", "\n", "\n", "adj", "=", "SparseTensor", "(", "row", "=", "edge_index", "[", "0", "]", ",", "col", "=", "edge_index", "[", "1", "]", ",", "value", "=", "edge_w", ",", "sparse_sizes", "=", "(", "dim", ",", "dim", ")", ")", "\n", "batch_input", "=", "x", "[", "batch_idx", "]", ".", "to", "(", "device", ")", ",", "(", "batch_idx", ",", "subset", ",", "adj", ".", "to", "(", "device", ")", ")", "\n", "return", "batch_input", ",", "(", "num_B", ",", "num_B_prime", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.prepare_batch_input_link": [[77, 92], ["torch_sparse.SparseTensor", "x[].to", "torch_sparse.SparseTensor.to"], "function", ["None"], ["", "def", "prepare_batch_input_link", "(", "x", ",", "batch", ",", "device", ")", ":", "\n", "    ", "subset", ",", "edge_index", ",", "edge_w", "=", "batch", "[", "0", "]", "\n", "batch_idx", "=", "batch", "[", "-", "1", "]", "\n", "\n", "num_B", "=", "batch_idx", ".", "shape", "[", "0", "]", "\n", "dim", "=", "subset", ".", "shape", "[", "0", "]", "\n", "num_B_prime", "=", "dim", "-", "num_B", "\n", "\n", "adj", "=", "SparseTensor", "(", "row", "=", "edge_index", "[", "0", "]", ",", "col", "=", "edge_index", "[", "1", "]", ",", "value", "=", "edge_w", ",", "sparse_sizes", "=", "(", "dim", ",", "dim", ")", ")", "\n", "batch_input", "=", "x", "[", "batch_idx", "]", ".", "to", "(", "device", ")", ",", "(", "batch_idx", ",", "subset", ",", "adj", ".", "to", "(", "device", ")", ")", "\n", "\n", "edge_mask", "=", "(", "edge_index", "[", "0", "]", "<", "num_B", ")", "&", "(", "edge_index", "[", "1", "]", "<", "num_B", ")", "\n", "src", ",", "dst", "=", "edge_index", "[", ":", ",", "edge_mask", "]", "\n", "\n", "return", "batch_input", ",", "(", "num_B", ",", "num_B_prime", ")", ",", "(", "src", ",", "dst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.metis": [[93, 113], ["adj_t.size", "time.perf_counter", "print", "adj_t.csr", "torch.ops.torch_sparse.partition", "torch.ops.torch_sparse.partition.sort", "torch.ops.torch_sparse.ind2ptr", "print", "torch.arange", "torch.tensor", "time.perf_counter"], "function", ["None"], ["", "def", "metis", "(", "adj_t", ":", "SparseTensor", ",", "num_parts", ":", "int", ",", "recursive", ":", "bool", "=", "False", ",", "\n", "log", ":", "bool", "=", "True", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", "]", ":", "\n", "    ", "r\"\"\"Computes the METIS partition of a given sparse adjacency matrix\n    :obj:`adj_t`, returning its \"clustered\" permutation :obj:`perm` and\n    corresponding cluster slices :obj:`ptr`.\"\"\"", "\n", "if", "log", ":", "\n", "        ", "t", "=", "time", ".", "perf_counter", "(", ")", "\n", "print", "(", "f'Computing METIS partitioning with {num_parts} parts...'", ",", "\n", "end", "=", "' '", ",", "flush", "=", "True", ")", "\n", "", "num_nodes", "=", "adj_t", ".", "size", "(", "0", ")", "\n", "if", "num_parts", "<=", "1", ":", "\n", "        ", "perm", ",", "ptr", "=", "torch", ".", "arange", "(", "num_nodes", ")", ",", "torch", ".", "tensor", "(", "[", "0", ",", "num_nodes", "]", ")", "\n", "", "else", ":", "\n", "        ", "rowptr", ",", "col", ",", "_", "=", "adj_t", ".", "csr", "(", ")", "\n", "cluster", "=", "torch", ".", "ops", ".", "torch_sparse", ".", "partition", "(", "rowptr", ",", "col", ",", "None", ",", "num_parts", ",", "recursive", ")", "\n", "cluster", ",", "perm", "=", "cluster", ".", "sort", "(", ")", "\n", "ptr", "=", "torch", ".", "ops", ".", "torch_sparse", ".", "ind2ptr", "(", "cluster", ",", "num_parts", ")", "\n", "", "if", "log", ":", "\n", "        ", "print", "(", "f'Done! [{time.perf_counter() - t:.2f}s]'", ")", "\n", "", "return", "perm", ",", "ptr", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.permute": [[114, 131], ["copy.copy", "time.perf_counter", "print", "print", "isinstance", "value.size", "isinstance", "isinstance", "value.size", "value.permute", "time.perf_counter"], "function", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.permute"], ["", "def", "permute", "(", "data", ":", "Data", ",", "perm", ":", "Tensor", ",", "log", ":", "bool", "=", "True", ")", "->", "Data", ":", "\n", "    ", "r\"\"\"Permutes a :obj:`data` object according to a given permutation\n    :obj:`perm`.\"\"\"", "\n", "if", "log", ":", "\n", "        ", "t", "=", "time", ".", "perf_counter", "(", ")", "\n", "print", "(", "'Permuting data...'", ",", "end", "=", "' '", ",", "flush", "=", "True", ")", "\n", "", "data", "=", "copy", ".", "copy", "(", "data", ")", "\n", "for", "key", ",", "value", "in", "data", ":", "\n", "        ", "if", "isinstance", "(", "value", ",", "Tensor", ")", "and", "value", ".", "size", "(", "0", ")", "==", "data", ".", "num_nodes", ":", "\n", "            ", "data", "[", "key", "]", "=", "value", "[", "perm", "]", "\n", "", "elif", "isinstance", "(", "value", ",", "Tensor", ")", "and", "value", ".", "size", "(", "0", ")", "==", "data", ".", "num_edges", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "elif", "isinstance", "(", "value", ",", "SparseTensor", ")", ":", "\n", "            ", "data", "[", "key", "]", "=", "value", ".", "permute", "(", "perm", ")", "\n", "", "", "if", "log", ":", "\n", "        ", "print", "(", "f'Done! [{time.perf_counter() - t:.2f}s]'", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.inductive_data": [[133, 138], ["torch_geometric.data.Batch.from_data_list", "torch.ones"], "function", ["None"], ["", "def", "inductive_data", "(", "dataset", ")", ":", "\n", "    ", "data", "=", "Batch", ".", "from_data_list", "(", "dataset", ")", "\n", "data", ".", "batch", ",", "data", ".", "ptr", "=", "None", ",", "None", "\n", "data", "[", "'train_mask'", "]", "=", "torch", ".", "ones", "(", "data", ".", "num_nodes", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.index2mask": [[139, 143], ["torch.zeros"], "function", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros"], ["", "def", "index2mask", "(", "idx", ",", "size", ")", ":", "\n", "    ", "mask", "=", "torch", ".", "zeros", "(", "size", ",", "dtype", "=", "torch", ".", "bool", ",", "device", "=", "idx", ".", "device", ")", "\n", "mask", "[", "idx", "]", "=", "True", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.get_data": [[144, 225], ["ogb.nodeproppred.PygNodePropPredDataset", "permute.adj_t.to_symmetric", "misc.norm_adj", "torch_geometric.datasets.Flickr", "torch_geometric.datasets.GNNBenchmarkDataset.get_idx_split", "misc.index2mask", "misc.index2mask", "misc.index2mask", "ogb.nodeproppred.Evaluator", "misc.metis", "misc.permute", "torch.arange", "torch.arange.split", "permute.adj_t.to_symmetric", "val_data.adj_t.to_symmetric", "test_data.adj_t.to_symmetric", "misc.norm_adj", "misc.norm_adj", "misc.norm_adj", "torch.cat", "ValueError", "torch_geometric.ToSparseTensor", "os.path.join", "torch_geometric.datasets.Yelp", "torch.cat", "torch.cat", "os.path.join", "torch_geometric.ToSparseTensor", "torch_geometric.datasets.Reddit", "torch.zeros", "os.path.join", "torch_geometric.ToSparseTensor", "print", "torch_geometric.datasets.PPI", "torch_geometric.datasets.PPI", "torch_geometric.datasets.PPI", "torch.zeros", "torch.zeros", "os.path.join", "torch_geometric.ToSparseTensor", "misc.inductive_data", "misc.inductive_data", "misc.inductive_data", "print", "torch_geometric.datasets.GNNBenchmarkDataset", "torch_geometric.datasets.GNNBenchmarkDataset", "torch_geometric.datasets.GNNBenchmarkDataset", "ValueError", "os.path.join", "torch_geometric.ToSparseTensor", "os.path.join", "torch_geometric.ToSparseTensor", "os.path.join", "torch_geometric.ToSparseTensor", "os.path.join", "torch_geometric.ToSparseTensor", "misc.inductive_data", "misc.inductive_data", "misc.inductive_data"], "function", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.norm_adj", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.index2mask", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.index2mask", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.index2mask", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.metis", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.permute", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.norm_adj", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.norm_adj", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.norm_adj", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.inductive_data", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.inductive_data", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.inductive_data", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.inductive_data", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.inductive_data", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.inductive_data"], ["", "def", "get_data", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "dataset", "in", "{", "'arxiv'", ",", "'products'", "}", ":", "\n", "        ", "dataset", "=", "PygNodePropPredDataset", "(", "name", "=", "f'ogbn-{args.dataset}'", ",", "\n", "transform", "=", "T", ".", "ToSparseTensor", "(", ")", ",", "\n", "root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'ogb'", ")", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'flickr'", ":", "\n", "        ", "dataset", "=", "Flickr", "(", "root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'graph'", ",", "args", ".", "dataset", ")", ",", "\n", "transform", "=", "T", ".", "ToSparseTensor", "(", ")", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'yelp'", ":", "\n", "        ", "dataset", "=", "Yelp", "(", "root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'graph'", ",", "args", ".", "dataset", ")", ",", "\n", "transform", "=", "T", ".", "ToSparseTensor", "(", ")", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'reddit'", ":", "\n", "        ", "dataset", "=", "Reddit", "(", "root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'graph'", ",", "args", ".", "dataset", ")", ",", "\n", "transform", "=", "T", ".", "ToSparseTensor", "(", ")", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'ppi'", ":", "\n", "        ", "print", "(", "'PPI loaded'", ")", "\n", "dataset", "=", "PPI", "(", "root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'graph'", ",", "args", ".", "dataset", ")", ",", "\n", "transform", "=", "T", ".", "ToSparseTensor", "(", ")", ",", "split", "=", "'train'", ")", "\n", "val_dataset", "=", "PPI", "(", "root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'graph'", ",", "args", ".", "dataset", ")", ",", "\n", "transform", "=", "T", ".", "ToSparseTensor", "(", ")", ",", "split", "=", "'val'", ")", "\n", "test_dataset", "=", "PPI", "(", "root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'graph'", ",", "args", ".", "dataset", ")", ",", "\n", "transform", "=", "T", ".", "ToSparseTensor", "(", ")", ",", "split", "=", "'test'", ")", "\n", "data", ",", "val_data", ",", "test_data", "=", "inductive_data", "(", "dataset", ")", ",", "inductive_data", "(", "val_dataset", ")", ",", "inductive_data", "(", "\n", "test_dataset", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'cluster'", ":", "\n", "        ", "print", "(", "'CLUSTER loaded'", ")", "\n", "kwargs", "=", "{", "'root'", ":", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'graph'", ",", "args", ".", "dataset", ")", ",", "'name'", ":", "'CLUSTER'", ",", "\n", "'transform'", ":", "T", ".", "ToSparseTensor", "(", ")", "}", "\n", "dataset", "=", "GNNBenchmarkDataset", "(", "split", "=", "'train'", ",", "**", "kwargs", ")", "\n", "val_dataset", "=", "GNNBenchmarkDataset", "(", "split", "=", "'val'", ",", "**", "kwargs", ")", "\n", "test_dataset", "=", "GNNBenchmarkDataset", "(", "split", "=", "'test'", ",", "**", "kwargs", ")", "\n", "data", ",", "val_data", ",", "test_data", "=", "inductive_data", "(", "dataset", ")", ",", "inductive_data", "(", "val_dataset", ")", ",", "inductive_data", "(", "\n", "test_dataset", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Dataset not supported!'", ")", "\n", "\n", "", "evaluator", ",", "cluster_indices", "=", "None", ",", "None", "\n", "\n", "# transductive datasets", "\n", "if", "args", ".", "dataset", "not", "in", "{", "'ppi'", ",", "'cluster'", "}", ":", "\n", "        ", "data", ",", "val_data", ",", "test_data", "=", "dataset", "[", "0", "]", ",", "None", ",", "None", "\n", "data", ".", "adj_t", "=", "data", ".", "adj_t", ".", "to_symmetric", "(", ")", "\n", "\n", "if", "args", ".", "dataset", "in", "{", "'arxiv'", ",", "'products'", "}", ":", "\n", "            ", "split_idx", "=", "dataset", ".", "get_idx_split", "(", ")", "\n", "data", ".", "train_mask", "=", "index2mask", "(", "split_idx", "[", "'train'", "]", ",", "data", ".", "num_nodes", ")", "\n", "data", ".", "val_mask", "=", "index2mask", "(", "split_idx", "[", "'valid'", "]", ",", "data", ".", "num_nodes", ")", "\n", "data", ".", "test_mask", "=", "index2mask", "(", "split_idx", "[", "'test'", "]", ",", "data", ".", "num_nodes", ")", "\n", "evaluator", "=", "Evaluator", "(", "name", "=", "f'ogbn-{args.dataset}'", ")", "\n", "\n", "", "if", "args", ".", "sampler_type", "==", "'cluster'", ":", "\n", "            ", "num_parts", "=", "args", ".", "num_parts", "\n", "perm", ",", "ptr", "=", "metis", "(", "data", ".", "adj_t", ",", "num_parts", "=", "num_parts", ",", "log", "=", "True", ")", "\n", "data", "=", "permute", "(", "data", ",", "perm", ",", "log", "=", "True", ")", "\n", "n_id", "=", "torch", ".", "arange", "(", "data", ".", "num_nodes", ")", "\n", "cluster_indices", "=", "n_id", ".", "split", "(", "(", "ptr", "[", "1", ":", "]", "-", "ptr", "[", ":", "-", "1", "]", ")", ".", "tolist", "(", ")", ")", "\n", "\n", "", "data", "=", "norm_adj", "(", "data", ",", "args", ".", "conv_type", ")", "\n", "\n", "# inductive datasets", "\n", "", "else", ":", "\n", "        ", "if", "args", ".", "sampler_type", "==", "'cluster'", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "data", ".", "adj_t", ",", "val_data", ".", "adj_t", ",", "test_data", ".", "adj_t", "=", "data", ".", "adj_t", ".", "to_symmetric", "(", ")", ",", "val_data", ".", "adj_t", ".", "to_symmetric", "(", ")", ",", "test_data", ".", "adj_t", ".", "to_symmetric", "(", ")", "\n", "data", ",", "val_data", ",", "test_data", "=", "norm_adj", "(", "data", ",", "args", ".", "conv_type", ")", ",", "norm_adj", "(", "val_data", ",", "args", ".", "conv_type", ")", ",", "norm_adj", "(", "\n", "test_data", ",", "args", ".", "conv_type", ")", "\n", "\n", "", "if", "args", ".", "split", ":", "\n", "        ", "if", "data", ".", "num_features", "%", "args", ".", "num_D", "!=", "0", ":", "\n", "            ", "padding_dim", "=", "args", ".", "num_D", "-", "data", ".", "num_features", "%", "args", ".", "num_D", "\n", "data", ".", "x", "=", "torch", ".", "cat", "(", "[", "data", ".", "x", ",", "torch", ".", "zeros", "(", "(", "data", ".", "num_nodes", ",", "padding_dim", ")", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "if", "args", ".", "dataset", "in", "{", "'ppi'", ",", "'cluster'", "}", ":", "\n", "                ", "val_data", ".", "x", "=", "torch", ".", "cat", "(", "[", "val_data", ".", "x", ",", "torch", ".", "zeros", "(", "(", "val_data", ".", "x", ".", "shape", "[", "0", "]", ",", "padding_dim", ")", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "test_data", ".", "x", "=", "torch", ".", "cat", "(", "[", "test_data", ".", "x", ",", "torch", ".", "zeros", "(", "(", "test_data", ".", "x", ".", "shape", "[", "0", "]", ",", "padding_dim", ")", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "", "if", "args", ".", "hidden_channels", "%", "args", ".", "num_D", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'Cannot fully split hidden features'", ")", "\n", "\n", "", "", "return", "data", ",", "val_data", ",", "test_data", ",", "dataset", ",", "evaluator", ",", "cluster_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.models.LowRankGNNBlock.__init__": [[12, 38], ["super().__init__", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "models.LowRankGNNBlock.register_buffer", "vq.VectorQuantizerEMA"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.dataloader.OurDataLoader.__init__"], ["from", "vq", "import", "VectorQuantizer", ",", "VectorQuantizerEMA", "\n", "from", "convs", "import", "OurGCNConv", ",", "OurGATConv", ",", "OurSAGEConv", ",", "Transformer", "\n", "\n", "import", "pdb", "\n", "from", "sklearn", ".", "cluster", "import", "KMeans", ",", "MiniBatchKMeans", "\n", "import", "math", "\n", "\n", "from", "torch_sparse", "import", "coalesce", "\n", "from", "utils", ".", "dataloader", "import", "mapper", "\n", "\n", "\n", "class", "LowRankGNNBlock", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "hidden_channels", ",", "num_M", ",", "num_D", ",", "num_N", ",", "num_branch", ",", "cluster", ",", "kmeans_iter", ",", "\n", "EMA_flag", ",", "kmeans_init", ",", "use_gcn", ",", "commitment_cost", ",", "grad_normalize_scale", ",", "hook_flag", ",", "warm_up_flag", ",", "\n", "momentum", ",", "conv_type", ",", "transformer_flag", ")", ":", "\n", "        ", "super", "(", "LowRankGNNBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_M", ",", "self", ".", "num_D", ",", "self", ".", "num_N", ",", "self", ".", "EMA_flag", "=", "num_M", ",", "num_D", ",", "num_N", ",", "EMA_flag", "\n", "self", ".", "commitment_cost", "=", "commitment_cost", "\n", "self", ".", "hook_flag", "=", "hook_flag", "\n", "self", ".", "grad_normalize_scale", "=", "grad_normalize_scale", "\n", "self", ".", "conv_type", "=", "conv_type", "\n", "self", ".", "transformer_flag", "=", "transformer_flag", "\n", "\n", "# C init", "\n", "# c1 = -torch.ones(num_N, dtype=torch.long)", "\n", "# c = torch.randint(0, self.num_M, (self.num_N,), dtype=torch.long)", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.models.LowRankGNNBlock.hook": [[39, 57], ["range", "encoding_indices.squeeze().to", "torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean().item", "torch.norm().mean().item", "models.LowRankGNNBlock.vq.update", "encoding_indices.squeeze", "models.LowRankGNNBlock.vq.get_codebook", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "encoding_indices.squeeze", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizerEMA.update", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizerEMA.get_codebook"], ["c", "=", "torch", ".", "randint", "(", "0", ",", "self", ".", "num_M", ",", "(", "self", ".", "num_N", ",", ")", ",", "dtype", "=", "torch", ".", "short", ")", "\n", "self", ".", "register_buffer", "(", "'c_indices'", ",", "c", ")", "\n", "\n", "if", "self", ".", "transformer_flag", ":", "\n", "            ", "self", ".", "conv", "=", "Transformer", "(", "self", ".", "num_D", "+", "1", ")", "\n", "self", ".", "transformer_k", "=", "torch", ".", "nn", ".", "Linear", "(", "num_D", ",", "num_D", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "conv_type", "!=", "'GAT'", ":", "\n", "                ", "self", ".", "conv", "=", "OurGCNConv", "(", "in_channels", ",", "in_channels", ",", "normalize", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "conv", "=", "OurGATConv", "(", "in_channels", "+", "1", ",", "in_channels", "+", "1", ",", "bias", "=", "False", ",", "add_self_loops", "=", "False", ")", "\n", "\n", "", "", "if", "EMA_flag", ":", "\n", "# self.emb = NearestEmbedEMA(self.num_M, self.num_D)", "\n", "            ", "add_flag", "=", "True", "if", "self", ".", "transformer_flag", "or", "self", ".", "conv_type", "==", "'GAT'", "else", "False", "\n", "self", ".", "vq", "=", "VectorQuantizerEMA", "(", "self", ".", "num_M", ",", "self", ".", "num_D", ",", "commitment_cost", "=", "self", ".", "commitment_cost", ",", "\n", "grad_normalize_scale", "=", "grad_normalize_scale", ",", "warm_up_flag", "=", "warm_up_flag", ",", "\n", "momentum", "=", "momentum", ",", "add_flag", "=", "add_flag", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.models.LowRankGNNBlock.init": [[61, 64], ["models.LowRankGNNBlock.vq.feature_update", "models.LowRankGNNBlock.squeeze().to", "models.LowRankGNNBlock.squeeze"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizerEMA.feature_update"], ["", "self", ".", "kmeans_init", "=", "kmeans_init", "\n", "self", ".", "grad_kmeans_init", "=", "kmeans_init", "\n", "self", ".", "inited", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.models.LowRankGNNLayer.__init__": [[67, 137], ["super().__init__", "range", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "int", "int", "convs.OurGCNConv", "convs.OurGATConv", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "ValueError", "ValueError", "models.LowRankGNNLayer.transformer_block.append", "models.LowRankGNNLayer.gnn_block.append", "ValueError", "models.LowRankGNNBlock", "models.LowRankGNNBlock"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.dataloader.OurDataLoader.__init__"], ["\n", "", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv", ".", "reset_parameters", "(", ")", "\n", "\n", "", "def", "hook", "(", "self", ",", "grad", ")", ":", "\n", "# grad_use = grad[:, :self.num_D]", "\n", "        ", "grad_use", "=", "grad", "\n", "\n", "if", "self", ".", "grad_kmeans_init", ":", "\n", "            ", "X_B_cpu", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "self", ".", "X_B", ".", "shape", "[", "1", "]", ",", "affine", "=", "False", ",", "track_running_stats", "=", "False", ")", "(", "self", ".", "X_B", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "grad_cpu", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "grad_use", ".", "shape", "[", "1", "]", ",", "affine", "=", "False", ",", "track_running_stats", "=", "False", ",", "eps", "=", "1e-24", ")", "(", "grad_use", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "# reassignment_ratio=0.01", "\n", "k_obj", "=", "MiniBatchKMeans", "(", "n_clusters", "=", "self", ".", "num_M", ",", "init", "=", "'k-means++'", ",", "batch_size", "=", "400", ",", "n_init", "=", "10", ",", "\n", "init_size", "=", "4000", ",", "reassignment_ratio", "=", "0.3", ")", ".", "fit", "(", "\n", "torch", ".", "cat", "(", "[", "X_B_cpu", ",", "grad_cpu", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "k_centroids", "=", "torch", ".", "tensor", "(", "k_obj", ".", "cluster_centers_", ",", "dtype", "=", "torch", ".", "float", ")", ".", "to", "(", "self", ".", "X_B", ".", "device", ")", "\n", "k_counts", "=", "torch", ".", "tensor", "(", "k_obj", ".", "counts_", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "self", ".", "X_B", ".", "device", ")", "\n", "\n", "self", ".", "vq", ".", "kmeans_init", "(", "k_centroids", ",", "k_counts", ")", "\n", "self", ".", "c_indices", "=", "-", "1", "\n", "self", ".", "c_indices", "[", "self", ".", "batch_indices", "]", "=", "torch", ".", "tensor", "(", "k_obj", ".", "labels_", ",", "dtype", "=", "torch", ".", "short", ")", ".", "to", "(", "self", ".", "X_B", ".", "device", ")", "\n", "self", ".", "grad_kmeans_init", "=", "False", "\n", "\n", "# to reset X_output", "\n", "encoding_indices", ",", "encodings", "=", "self", ".", "vq", ".", "update", "(", "self", ".", "X_B", ",", "grad_use", ")", "\n", "self", ".", "c_indices", "[", "self", ".", "batch_indices", "]", "=", "encoding_indices", ".", "squeeze", "(", ")", ".", "to", "(", "torch", ".", "short", ")", "\n", "\n", "", "else", ":", "\n", "# grad_before = self.vq.get_grad()[self.c_indices[self.batch_indices].to(torch.long)]", "\n", "# grad_diff_before = grad_before - grad", "\n", "# self.grad_error_before = torch.norm(grad_diff_before, dim=1).mean().item()", "\n", "\n", "            ", "vq_steps", "=", "1", "\n", "for", "_", "in", "range", "(", "vq_steps", ")", ":", "\n", "                ", "encoding_indices", ",", "encodings", "=", "self", ".", "vq", ".", "update", "(", "self", ".", "X_B", ",", "grad_use", ")", "\n", "\n", "", "self", ".", "c_indices", "[", "self", ".", "batch_indices", "]", "=", "encoding_indices", ".", "squeeze", "(", ")", ".", "to", "(", "torch", ".", "short", ")", "\n", "\n", "grad_diff", "=", "grad_use", "-", "self", ".", "vq", ".", "get_grad", "(", ")", "[", "encoding_indices", ".", "squeeze", "(", ")", "]", "\n", "self", ".", "grad_error_after", "=", "torch", ".", "norm", "(", "grad_diff", ",", "dim", "=", "1", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "grad_norm", "=", "torch", ".", "norm", "(", "grad_use", ",", "dim", "=", "1", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n", "# grad_error_by_cluster = (encodings / (1e-6 + encodings.sum(dim=0, keepdim=True))).t() @ \\", "\n", "#                         (torch.norm(grad_diff,dim=1)/torch.norm(grad,dim=1)).unsqueeze(1)", "\n", "# self.grad_error_by_cluster = grad_error_by_cluster.squeeze()", "\n", "\n", "\n", "X_B_diff", "=", "self", ".", "X_B", "-", "self", ".", "vq", ".", "get_codebook", "(", ")", "[", "encoding_indices", ".", "squeeze", "(", ")", "]", "\n", "self", ".", "vq_backward_error", "=", "torch", ".", "norm", "(", "X_B_diff", ",", "dim", "=", "1", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n", "# feat_error_by_cluster = (encodings / (1e-6 + encodings.sum(dim=0, keepdim=True))).t() @ \\", "\n", "#                         (torch.norm(X_B_diff,dim=1)/torch.norm(self.X_B,dim=1)).unsqueeze(1)", "\n", "# self.feat_error_by_cluster = feat_error_by_cluster.squeeze()", "\n", "\n", "", "return", "grad", "\n", "\n", "", "def", "M_hook", "(", "self", ",", "grad", ")", ":", "\n", "        ", "self", ".", "M_grad_norm", "=", "torch", ".", "norm", "(", "grad", ",", "dim", "=", "1", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "def", "ln_hook", "(", "self", ",", "grad", ")", ":", "\n", "        ", "self", ".", "ln_grad_norm", "=", "torch", ".", "norm", "(", "grad", ",", "dim", "=", "1", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "def", "X_B_hook", "(", "self", ",", "grad", ")", ":", "\n", "        ", "self", ".", "X_B_grad_norm", "=", "torch", ".", "norm", "(", "grad", ",", "dim", "=", "1", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "def", "X_bar_hook", "(", "self", ",", "grad", ")", ":", "\n", "        ", "self", ".", "X_bar_grad_norm", "=", "torch", ".", "norm", "(", "grad", ",", "dim", "=", "1", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.models.LowRankGNNLayer.forward": [[144, 232], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.LowRankGNNLayer.conv", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "models.LowRankGNNLayer.gnn_transform", "int", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "x[].detach", "models.LowRankGNNLayer.gnn_block[].c_indices[].to", "x_first_order.append", "grad_first_order.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "errors.append", "X_B_norms.append", "quantized_norms.append", "models.LowRankGNNLayer.linear_skip", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "len", "models.LowRankGNNLayer.gnn_block[].init", "models.LowRankGNNLayer.gnn_block[].vq.get", "x_output_B.requires_grad_", "x_output_B.register_hook", "x_output[].unsqueeze", "models.LowRankGNNLayer.fc_sage", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_link.init", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizerEMA.get"], ["        ", "self", ".", "X_B", "=", "X_B", ".", "detach", "(", ")", "\n", "self", ".", "batch_indices", "=", "batch_indices", "=", "batch_A", "[", "-", "1", "]", "\n", "\n", "if", "self", ".", "training", ":", "# init", "\n", "            ", "if", "self", ".", "kmeans_init", ":", "# reassignment_ratio=0.01, batch_size=400, n_init=10,", "\n", "                ", "k_obj", "=", "MiniBatchKMeans", "(", "n_clusters", "=", "self", ".", "num_M", ",", "init", "=", "'k-means++'", ",", "batch_size", "=", "400", ",", "n_init", "=", "10", ",", "\n", "init_size", "=", "4000", ",", "reassignment_ratio", "=", "0.3", ")", ".", "fit", "(", "\n", "torch", ".", "nn", ".", "BatchNorm1d", "(", "X_B", ".", "shape", "[", "1", "]", ",", "affine", "=", "False", ",", "track_running_stats", "=", "False", ")", "(", "X_B", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "k_centroids", "=", "torch", ".", "tensor", "(", "k_obj", ".", "cluster_centers_", ",", "dtype", "=", "torch", ".", "float", ")", ".", "to", "(", "X_B", ".", "device", ")", "\n", "k_counts", "=", "torch", ".", "tensor", "(", "k_obj", ".", "counts_", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "X_B", ".", "device", ")", "\n", "\n", "# print(f'min:{torch.min(k_counts)}')", "\n", "\n", "self", ".", "vq", ".", "feature_kmeans_init", "(", "k_centroids", ",", "k_counts", ")", "\n", "self", ".", "c_indices", "[", "batch_indices", "]", "=", "torch", ".", "tensor", "(", "k_obj", ".", "labels_", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "X_B", ".", "device", ")", "\n", "self", ".", "kmeans_init", "=", "False", "\n", "\n", "", "elif", "not", "self", ".", "inited", "or", "unlabeled", ":", "\n", "                ", "self", ".", "init", "(", "X_B", ",", "batch_indices", ")", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "\n", "", "", "adj_input", "=", "None", "\n", "if", "self", ".", "transformer_flag", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "adj_input", "=", "mapper", "(", "batch_A", ",", "self", ".", "c_indices", ",", "self", ".", "num_M", ",", "self", ".", "conv_type", ",", "X_B", ".", "device", ")", "\n", "\n", "\n", "", "X_bar", "=", "self", ".", "vq", ".", "get_codebook", "(", ")", "\n", "\n", "# X_B.requires_grad_()", "\n", "# X_B.register_hook(self.X_B_hook)", "\n", "# X_bar.requires_grad_()", "\n", "# X_bar.register_hook(self.X_bar_hook)", "\n", "\n", "\n", "X_input", "=", "torch", ".", "cat", "(", "[", "X_B", ",", "X_bar", "*", "warm_up_rate", "]", ",", "dim", "=", "0", ")", "\n", "\n", "# projection before transformer", "\n", "if", "self", ".", "transformer_flag", ":", "\n", "            ", "X_input", "=", "self", ".", "ln", "(", "X_input", ")", "\n", "X_input", "=", "self", ".", "transformer_k", "(", "X_input", ")", "\n", "\n", "", "if", "self", ".", "transformer_flag", "or", "self", ".", "conv_type", "==", "'GAT'", ":", "# X_input cat tensor.ones", "\n", "            ", "X_input", "=", "torch", ".", "cat", "(", "[", "X_input", ",", "torch", ".", "ones", "(", "X_input", ".", "shape", "[", "0", "]", ",", "1", ")", ".", "to", "(", "X_input", ".", "device", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# Conv", "\n", "", "if", "self", ".", "transformer_flag", ":", "\n", "            ", "X_output", "=", "self", ".", "conv", "(", "X_input", "[", ":", "X_B", ".", "shape", "[", "0", "]", "]", ",", "X_input", "[", "X_B", ".", "shape", "[", "0", "]", ":", "]", ")", "\n", "", "else", ":", "\n", "            ", "X_output", "=", "self", ".", "conv", "(", "X_input", ",", "adj_input", ")", "\n", "\n", "", "X_output_B", ",", "X_output_M", "=", "X_output", "[", ":", "X_B", ".", "shape", "[", "0", "]", "]", ",", "X_output", "[", "X_B", ".", "shape", "[", "0", "]", ":", "]", "\n", "\n", "if", "self", ".", "inited", "and", "self", ".", "hook_flag", "and", "self", ".", "training", "and", "not", "unlabeled", ":", "\n", "# X_output.requires_grad_()", "\n", "\n", "            ", "X_output_B", ".", "requires_grad_", "(", ")", "\n", "X_output_B", ".", "register_hook", "(", "self", ".", "hook", ")", "\n", "\n", "# X_output_M.requires_grad_()", "\n", "# X_output_M.register_hook(self.M_hook)", "\n", "\n", "\n", "", "if", "self", ".", "transformer_flag", "or", "self", ".", "conv_type", "==", "'GAT'", ":", "#use the added one dim to normalize X_out_B", "\n", "            ", "X_output_B", "=", "X_output_B", "[", ":", ",", ":", "self", ".", "num_D", "]", "/", "(", "X_output_B", "[", ":", ",", "self", ".", "num_D", "]", ".", "unsqueeze", "(", "1", ")", "+", "1e-16", ")", "\n", "\n", "# X_output_B_ln = self.ln(X_output_B)", "\n", "", "X_output_B_ln", "=", "X_output_B", "\n", "\n", "# if self.inited and self.hook_flag and self.training and not unlabeled:", "\n", "#     X_output_B_ln.register_hook(self.ln_hook)", "\n", "\n", "# quantized = X_bar[self.c_indices[batch_indices].to(torch.long)]", "\n", "# commit_loss = self.commitment_cost*F.mse_loss(X_B, quantized)", "\n", "commit_loss", "=", "0", "\n", "\n", "# info_backward = torch.sum(X_output_M[:, :self.num_D] * self.vq.get_grad())", "\n", "info_backward", "=", "torch", ".", "sum", "(", "X_output_M", "*", "self", ".", "vq", ".", "get_grad", "(", ")", "*", "warm_up_rate", ")", "\n", "\n", "# self.vq_get_grad_norm = torch.norm(self.vq.get_grad(), dim=1).mean().item()", "\n", "# statistics record", "\n", "# error = torch.norm(quantized-X_B, dim=1).mean().item()", "\n", "# quantized_norm = torch.norm(quantized, dim=1).mean().item()", "\n", "error", "=", "quantized_norm", "=", "0", "\n", "\n", "\n", "return", "X_output_B_ln", ",", "error", ",", "torch", ".", "norm", "(", "X_B", ",", "dim", "=", "1", ")", ".", "mean", "(", ")", ".", "item", "(", ")", ","]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.models.LowRankGNN.__init__": [[235, 299], ["super().__init__", "models.LowRankGNN.convs.append", "models.LowRankGNN.batch_norms.append", "range", "models.LowRankGNN.convs.append", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.AlphaDropout", "torch.nn.AlphaDropout", "torch.nn.AlphaDropout", "torch.nn.AlphaDropout", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "models.LowRankGNNLayer", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "models.LowRankGNN.convs.append", "models.LowRankGNN.batch_norms.append", "models.LowRankGNNLayer", "models.LowRankGNNLayer", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "ValueError", "torch.gelu", "torch.gelu"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.dataloader.OurDataLoader.__init__"], ["\n", "", "", "class", "LowRankGNNLayer", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "dropout", ",", "\n", "num_M", ",", "num_D", ",", "num_N", ",", "num_branch", ",", "cluster", ",", "ln_para", ",", "no_second_fc", ",", "\n", "kmeans_iter", ",", "EMA_flag", ",", "split", ",", "kmeans_init", ",", "dropbranch", ",", "skip", ",", "use_gcn", ",", "commitment_cost", ",", "\n", "grad_normalize_scale", ",", "hook", ",", "weight_ahead", ",", "warm_up_flag", ",", "momentum", ",", "conv_type", ",", "transformer_flag", ")", ":", "\n", "        ", "super", "(", "LowRankGNNLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# weight ahead disabled", "\n", "self", ".", "weight_ahead", "=", "weight_ahead", "\n", "if", "self", ".", "weight_ahead", ":", "\n", "            ", "if", "out_channels", "%", "num_D", "!=", "0", ":", "raise", "ValueError", "(", "'Cannot fully split'", ")", "\n", "self", ".", "num_branch", "=", "int", "(", "out_channels", "/", "num_D", ")", "\n", "", "else", ":", "\n", "            ", "if", "in_channels", "%", "num_D", "!=", "0", ":", "raise", "ValueError", "(", "'Cannot fully split'", ")", "\n", "self", ".", "num_branch", "=", "int", "(", "in_channels", "/", "num_D", ")", "\n", "\n", "", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "no_second_fc", "=", "no_second_fc", "\n", "self", ".", "EMA_flag", "=", "EMA_flag", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "num_D", "=", "num_D", "\n", "self", ".", "dropbranch", "=", "dropbranch", "\n", "self", ".", "skip", "=", "skip", "\n", "self", ".", "conv_type", "=", "conv_type", "\n", "self", ".", "transformer_flag", "=", "transformer_flag", "\n", "\n", "self", ".", "linear_k", ",", "self", ".", "linear_v", ",", "self", ".", "gnn_block", ",", "self", ".", "transformer_block", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", ",", "torch", ".", "nn", ".", "ModuleList", "(", ")", ",", "torch", ".", "nn", ".", "ModuleList", "(", ")", ",", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_branch", ")", ":", "\n", "# if not self.split :", "\n", "#     self.linear_k.append(torch.nn.Linear(in_channels, num_D))", "\n", "\n", "            ", "if", "transformer_flag", ":", "\n", "                ", "self", ".", "transformer_block", ".", "append", "(", "LowRankGNNBlock", "(", "num_D", ",", "out_channels", ",", "num_M", ",", "num_D", ",", "num_N", ",", "self", ".", "num_branch", ",", "\n", "cluster", ",", "kmeans_iter", ",", "EMA_flag", ",", "kmeans_init", ",", "\n", "False", ",", "commitment_cost", ",", "grad_normalize_scale", ",", "\n", "hook", ",", "warm_up_flag", ",", "momentum", ",", "conv_type", ",", "True", ")", ")", "\n", "\n", "", "if", "no_second_fc", ":", "\n", "                ", "self", ".", "gnn_block", ".", "append", "(", "LowRankGNNBlock", "(", "num_D", ",", "out_channels", ",", "num_M", ",", "num_D", ",", "num_N", ",", "self", ".", "num_branch", ",", "\n", "cluster", ",", "kmeans_iter", ",", "EMA_flag", ",", "kmeans_init", ",", "\n", "use_gcn", ",", "commitment_cost", ",", "grad_normalize_scale", ",", "\n", "hook", ",", "warm_up_flag", ",", "momentum", ",", "conv_type", ",", "False", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'second fc not studied'", ")", "\n", "# self.gnn_block.append(LowRankGNNBlock(num_D, num_D, num_M, num_D, num_N, self.num_branch,", "\n", "#                                       cluster, kmeans_iter, EMA_flag, kmeans_init,", "\n", "#                                       use_gcn, commitment_cost, grad_normalize_scale,", "\n", "#                                       hook, warm_up_flag, momentum, conv_type, False))", "\n", "# self.linear_v.append(torch.nn.Linear(num_D, out_channels))", "\n", "\n", "", "", "if", "self", ".", "skip", ":", "\n", "            ", "self", ".", "linear_skip", "=", "torch", ".", "nn", ".", "Linear", "(", "in_channels", ",", "out_channels", ")", "\n", "\n", "", "self", ".", "gnn_transform", "=", "torch", ".", "nn", ".", "Linear", "(", "in_channels", ",", "out_channels", ")", "\n", "# self.transform = torch.nn.utils.spectral_norm ( torch.nn.Linear(in_channels, out_channels) )", "\n", "self", ".", "batch_norm", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "out_channels", ",", "affine", "=", "False", ")", "\n", "\n", "if", "self", ".", "conv_type", "==", "'SAGE'", ":", "\n", "            ", "self", ".", "fc_sage", "=", "torch", ".", "nn", ".", "Linear", "(", "in_channels", ",", "out_channels", ")", "\n", "\n", "", "if", "self", ".", "transformer_flag", ":", "\n", "            ", "self", ".", "transformer_res", "=", "torch", ".", "nn", ".", "Linear", "(", "in_channels", ",", "out_channels", ")", "\n", "self", ".", "transformer_v", "=", "torch", ".", "nn", ".", "Linear", "(", "in_channels", ",", "out_channels", ")", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.models.LowRankGNN.forward": [[308, 349], ["enumerate", "errors_full.append", "X_B_norms_full.append", "quantized_norms_full.append", "conv", "models.LowRankGNN.act_f", "errors_full.append", "X_B_norms_full.append", "quantized_norms_full.append", "models.LowRankGNN.alpha_dropout", "torch.dropout", "torch.dropout"], "methods", ["None"], ["\n", "        ", "errors", ",", "X_B_norms", ",", "quantized_norms", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "losses", ",", "info_backwards", "=", "0", ",", "0", "\n", "hookeds", "=", "[", "]", "\n", "\n", "if", "self", ".", "training", "and", "self", ".", "dropbranch", ">", "0", ":", "\n", "            ", "num_branch", "=", "int", "(", "self", ".", "num_branch", "*", "(", "1", "-", "self", ".", "dropbranch", ")", ")", "\n", "branch_idx", "=", "torch", ".", "randperm", "(", "self", ".", "num_branch", ")", "[", ":", "num_branch", "]", "\n", "", "else", ":", "\n", "            ", "num_branch", "=", "self", ".", "num_branch", "\n", "branch_idx", "=", "torch", ".", "arange", "(", "num_branch", ")", "\n", "\n", "", "x_input", ",", "x_output", "=", "x", ",", "0", "\n", "x_hiddens", "=", "[", "]", "\n", "for", "i", "in", "branch_idx", ":", "\n", "            ", "x_hidden", "=", "x_input", "[", ":", ",", "self", ".", "num_D", "*", "i", ":", "self", ".", "num_D", "*", "(", "i", "+", "1", ")", "]", "\n", "x_hidden", ",", "error", ",", "X_B_norm", ",", "quantized_norm", ",", "loss", ",", "info_backward", ",", "hooked", "=", "self", ".", "gnn_block", "[", "i", "]", "(", "x_hidden", ",", "batch_A", ",", "warm_up_rate", ",", "unlabeled", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "                ", "losses", "+=", "loss", "\n", "info_backwards", "+=", "info_backward", "\n", "\n", "", "x_hiddens", ".", "append", "(", "x_hidden", ")", "\n", "hookeds", ".", "append", "(", "hooked", ")", "\n", "errors", ".", "append", "(", "error", ")", "\n", "X_B_norms", ".", "append", "(", "X_B_norm", ")", "\n", "quantized_norms", ".", "append", "(", "quantized_norm", ")", "\n", "\n", "", "x_output_gnn", "=", "self", ".", "gnn_transform", "(", "torch", ".", "cat", "(", "x_hiddens", ",", "dim", "=", "1", ")", ")", "\n", "if", "self", ".", "conv_type", "==", "'SAGE'", ":", "\n", "            ", "x_output_gnn", "=", "x_output_gnn", "+", "self", ".", "fc_sage", "(", "x_input", ")", "\n", "", "x_output", "=", "x_output", "+", "x_output_gnn", "\n", "\n", "if", "self", ".", "transformer_flag", ":", "\n", "            ", "x_hiddens", "=", "[", "]", "\n", "for", "i", "in", "branch_idx", ":", "\n", "                ", "x_hidden", "=", "x_input", "[", ":", ",", "self", ".", "num_D", "*", "i", ":", "self", ".", "num_D", "*", "(", "i", "+", "1", ")", "]", "\n", "x_hidden", ",", "error", ",", "X_B_norm", ",", "quantized_norm", ",", "loss", ",", "info_backward", ",", "hooked", "=", "self", ".", "transformer_block", "[", "i", "]", "(", "x_hidden", ",", "batch_A", ",", "warm_up_rate", ",", "unlabeled", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.models.LowRankGNN.inference": [[350, 368], ["enumerate", "models.LowRankGNN.act_f", "conv.gnn_transform", "conv.gnn_transform", "conv.gnn_transform", "conv.linear_skip", "conv.gnn_block[].conv", "conv.gnn_transform", "conv.linear_skip", "conv.gnn_block[].conv", "conv.gnn_block[].conv", "conv.gnn_block[].conv"], "methods", ["None"], ["                    ", "losses", "+=", "loss", "\n", "info_backwards", "+=", "info_backward", "\n", "\n", "", "x_hiddens", ".", "append", "(", "x_hidden", ")", "\n", "hookeds", ".", "append", "(", "hooked", ")", "\n", "\n", "# errors.append(error)", "\n", "# X_B_norms.append(X_B_norm)", "\n", "# quantized_norms.append(quantized_norm)", "\n", "\n", "", "x_output_trans", "=", "self", ".", "transformer_v", "(", "torch", ".", "cat", "(", "x_hiddens", ",", "dim", "=", "1", ")", ")", "\n", "x_output_trans_res", "=", "self", ".", "transformer_res", "(", "x_input", ")", "\n", "x_output", "=", "x_output", "+", "x_output_trans", "+", "x_output_trans_res", "\n", "\n", "", "if", "self", ".", "skip", ":", "\n", "            ", "x_output", "+=", "self", ".", "linear_skip", "(", "x", ")", "\n", "\n", "", "return", "x_output", ",", "errors", ",", "X_B_norms", ",", "quantized_norms", ",", "losses", ",", "info_backwards", ",", "hookeds", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.models.LowRankGNN.init": [[370, 375], ["enumerate", "conv", "models.LowRankGNN.act_f"], "methods", ["None"], ["", "", "class", "LowRankGNN", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "hidden_channels", ",", "out_channels", ",", "num_layers", ",", "dropout", ",", "\n", "num_M", ",", "num_D", ",", "num_N", ",", "num_branch", "=", "0", ",", "cluster", "=", "'vq'", ",", "ln_para", "=", "True", ",", "no_second_fc", "=", "False", ",", "\n", "kmeans_iter", "=", "100", ",", "EMA_flag", "=", "True", ",", "split", "=", "True", ",", "kmeans_init", "=", "False", ",", "dropbranch", "=", "0", ",", "skip", "=", "True", ",", "\n", "use_gcn", "=", "False", ",", "commitment_cost", "=", "0.5", ",", "grad_scale", "=", "(", "1", ",", "1", ")", ",", "act", "=", "'relu'", ",", "weight_ahead", "=", "False", ",", "\n", "bn_flag", "=", "False", ",", "warm_up_flag", "=", "False", ",", "momentum", "=", "0.1", ",", "conv_type", "=", "'GCN'", ",", "transformer_flag", "=", "False", ",", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_node.init": [[17, 38], ["model.train", "range", "print", "torch.no_grad", "enumerate", "utils.misc.prepare_batch_input", "model.init", "print", "torch.cuda.max_memory_allocated"], "function", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_link.train", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.prepare_batch_input", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_link.init"], ["import", "time", "\n", "from", "datetime", "import", "timedelta", "\n", "\n", "from", "torch", ".", "optim", ".", "lr_scheduler", "import", "StepLR", ",", "ExponentialLR", "\n", "from", "utils", ".", "scheduler", "import", "GradualWarmupScheduler", "\n", "# import torch.profiler as profiler", "\n", "import", "pdb", "\n", "import", "copy", "\n", "import", "os", "\n", "\n", "def", "prepare", "(", "batch", ",", "device", ")", ":", "\n", "    ", "x", ",", "deg_inv", ",", "A_BN", ",", "A_BB", ",", "A_NB_v", ",", "batch_idx", "=", "batch", "\n", "\n", "x", ",", "deg_inv", "=", "x", ".", "to", "(", "device", ")", ",", "deg_inv", ".", "to", "(", "device", ")", "\n", "row", ",", "col", ",", "value", "=", "A_BN", "[", "0", "]", ".", "to", "(", "device", ")", ",", "A_BN", "[", "1", "]", ".", "to", "(", "device", ")", ",", "A_BN", "[", "2", "]", ".", "to", "(", "device", ")", "\n", "A_BN", "=", "row", ",", "col", ",", "value", "\n", "\n", "if", "A_BB", "is", "not", "None", ":", "\n", "        ", "row", ",", "col", ",", "value", "=", "A_BB", "[", "0", "]", ".", "to", "(", "device", ")", ",", "A_BB", "[", "1", "]", ".", "to", "(", "device", ")", ",", "A_BB", "[", "2", "]", ".", "to", "(", "device", ")", "\n", "A_BB", "=", "row", ",", "col", ",", "value", "\n", "", "A_NB_v", "=", "A_NB_v", ".", "to", "(", "device", ")", "if", "A_NB_v", "is", "not", "None", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_node.train": [[39, 123], ["utils.logger.AverageValueMeter", "utils.logger.AverageValueMeter", "utils.logger.AverageValueMeter", "utils.logger.AverageValueMeter", "utils.logger.AverageValueMeter", "utils.logger.AverageValueMeter", "model.train", "enumerate", "data.y.dim", "enumerate", "torch.nn.CrossEntropyLoss", "optimizer.zero_grad", "time.time", "utils.misc.prepare_batch_input", "model", "utils.logger.AverageValueMeter.add", "utils.misc.compute_micro_f1", "print", "criterion", "time.time", "loss.backward", "utils.logger.AverageValueMeter.add", "utils.logger.AverageValueMeter.add", "utils.logger.AverageValueMeter.add", "utils.logger.AverageValueMeter.value", "utils.logger.AverageValueMeter.value", "utils.logger.AverageValueMeter.value", "utils.logger.AverageValueMeter.value", "utils.logger.AverageValueMeter.value", "utils.logger.AverageValueMeter.value", "torch.nn.BCEWithLogitsLoss", "data.y.squeeze", "torch.nn.CrossEntropyLoss", "torch.sum().item", "utils.logger.AverageValueMeter.add", "utils.logger.AverageValueMeter.add", "[].to", "[].to", "optimizer.step", "loss.item", "criterion.item", "time.time", "time.time", "len", "torch.sum"], "function", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_link.train", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.prepare_batch_input", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.add", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.compute_micro_f1", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.add", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.add", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.add", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.value", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.value", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.value", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.value", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.value", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.value", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.add", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.add", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.scheduler.GradualWarmupScheduler.step"], ["batch", "=", "x", ",", "(", "deg_inv", ",", "A_BN", ",", "A_BB", ",", "A_NB_v", ",", "batch_idx", ")", "\n", "\n", "return", "batch", "\n", "\n", "", "def", "train", "(", "model", ",", "data", ",", "batch_size", ",", "train_bool", ",", "optimizer", ",", "device", ",", "commitment_cost", ",", "use_gcn", ",", "warm_up_rate", ",", "\n", "ce_only", ",", "exp_log_f", ",", "exp_flag", ",", "conv_type", ",", "clip", ",", "num_layers", ",", "loader", ",", "test_f", ",", "experiment", ")", ":", "\n", "    ", "batch_forward_time_meter", "=", "AverageValueMeter", "(", ")", "\n", "batch_backward_time_meter", "=", "AverageValueMeter", "(", ")", "\n", "loss_cls_meter", "=", "AverageValueMeter", "(", ")", "\n", "loss_meter", "=", "AverageValueMeter", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "if", "data", ".", "y", ".", "dim", "(", ")", ">", "1", ":", "\n", "        ", "if", "data", ".", "y", ".", "shape", "[", "-", "1", "]", ">", "1", ":", "\n", "            ", "y", ",", "criterion", "=", "data", ".", "y", ",", "torch", ".", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "", "else", ":", "\n", "            ", "y", ",", "criterion", "=", "data", ".", "y", ".", "squeeze", "(", "1", ")", ",", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "y", ",", "criterion", "=", "data", ".", "y", ",", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "", "for", "i", ",", "batches", "in", "enumerate", "(", "loader", ")", ":", "\n", "\n", "        ", "for", "j", ",", "batch", "in", "enumerate", "(", "batches", ")", ":", "\n", "\n", "            ", "batch_idx", "=", "batch", "[", "-", "1", "]", "\n", "# if current batch has no training sample, continue", "\n", "if", "torch", ".", "sum", "(", "train_bool", "[", "batch_idx", "]", ")", ".", "item", "(", ")", "<=", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "batch", "=", "prepare", "(", "batch", ",", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "out", ",", "vq_losses", ",", "info_backward", "=", "model", "(", "batch", ",", "warm_up_rate", ")", "\n", "\n", "batch_forward_time_meter", ".", "add", "(", "time", ".", "time", "(", ")", "-", "start", ")", "\n", "out", "=", "out", "[", "train_bool", "[", "batch_idx", "]", "]", "\n", "\n", "\n", "score", "=", "compute_micro_f1", "(", "out", ",", "y", "[", "batch_idx", "]", "[", "train_bool", "[", "batch_idx", "]", "]", ".", "to", "(", "device", ")", ")", "\n", "print", "(", "f'Batch {i}, train acc:{score}'", ")", "\n", "loss_cls", "=", "criterion", "(", "out", ",", "y", "[", "batch_idx", "]", "[", "train_bool", "[", "batch_idx", "]", "]", ".", "to", "(", "device", ")", ")", "\n", "\n", "if", "commitment_cost", ">", "0", ":", "\n", "                ", "loss", "=", "loss_cls", "+", "info_backward", "+", "vq_losses", "\n", "", "else", ":", "\n", "                ", "loss", "=", "loss_cls", "+", "info_backward", "\n", "", "if", "ce_only", ":", "\n", "                ", "loss", "=", "loss_cls", "\n", "\n", "# print('Train loss:', loss.item())", "\n", "\n", "", "start", "=", "time", ".", "time", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "batch_backward_time_meter", ".", "add", "(", "time", ".", "time", "(", ")", "-", "start", ")", "\n", "\n", "if", "clip", "is", "not", "None", ":", "\n", "                ", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "                    ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "convs", "[", "i", "]", ".", "gnn_transform", ".", "parameters", "(", ")", ",", "clip", "[", "0", "]", ")", "\n", "if", "conv_type", "==", "'GAT'", ":", "# TODO: transformer case", "\n", "                        ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "convs", "[", "i", "]", ".", "gnn_block", ".", "parameters", "(", ")", ",", "clip", "[", "1", "]", ")", "\n", "\n", "", "", "", "a_grad_norms", ",", "w_grad_norms", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "                ", "if", "conv_type", "==", "'GAT'", ":", "\n", "                    ", "gat_conv", "=", "model", ".", "convs", "[", "i", "]", ".", "gnn_block", "[", "0", "]", ".", "conv", "\n", "a_grad_norm", "=", "torch", ".", "norm", "(", "torch", ".", "cat", "(", "[", "gat_conv", ".", "att_l", ".", "grad", ".", "view", "(", "-", "1", ")", ",", "gat_conv", ".", "att_r", ".", "grad", ".", "view", "(", "-", "1", ")", "]", ")", ")", ".", "item", "(", ")", "\n", "a_grad_norms", ".", "append", "(", "a_grad_norm", ")", "\n", "\n", "", "transform", "=", "model", ".", "convs", "[", "i", "]", ".", "gnn_transform", "\n", "w_grads", "=", "[", "]", "\n", "for", "param", "in", "transform", ".", "parameters", "(", ")", ":", "\n", "                    ", "w_grads", ".", "append", "(", "param", ".", "grad", ".", "view", "(", "-", "1", ")", ")", "\n", "", "w_grad_norm", "=", "torch", ".", "norm", "(", "torch", ".", "cat", "(", "w_grads", ")", ")", ".", "item", "(", ")", "\n", "w_grad_norms", ".", "append", "(", "w_grad_norm", ")", "\n", "\n", "", "model", ".", "a_grad_norms", ",", "model", ".", "w_grad_norms", "=", "a_grad_norms", ",", "w_grad_norms", "\n", "\n", "if", "exp_flag", ":", "\n", "                ", "exp_log_f", "(", ")", "\n", "\n", "", "if", "j", "==", "0", "and", "len", "(", "batches", ")", ">", "1", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_node.test": [[125, 157], ["torch.no_grad", "model.eval", "enumerate", "torch.cat", "utils.misc.prepare_batch_input", "model", "torch.cat.append", "torch.cat.argmax", "utils.misc.compute_micro_f1", "utils.misc.compute_micro_f1", "utils.misc.compute_micro_f1", "evaluator.eval", "evaluator.eval", "evaluator.eval", "data.y.to", "data.y.to", "data.y.to", "data.y[].to", "data.y[].to", "data.y[].to"], "function", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.prepare_batch_input", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.compute_micro_f1", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.compute_micro_f1", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.compute_micro_f1"], ["loss_cls_meter", ".", "add", "(", "loss_cls", ".", "item", "(", ")", ")", "\n", "# print(torch.cuda.max_memory_allocated(device=device)/1e+6)", "\n", "\n", "# train_acc, valid_acc, test_acc = test_f()", "\n", "# experiment.log_metric('curve_train_acc', train_acc)", "\n", "# experiment.log_metric('curve_valid_acc', valid_acc)", "\n", "# experiment.log_metric('curve_test_acc', test_acc)", "\n", "\n", "", "", "return", "loss_meter", ".", "value", "(", ")", "[", "0", "]", ",", "loss_cls_meter", ".", "value", "(", ")", "[", "0", "]", ",", "batch_forward_time_meter", ".", "value", "(", ")", "[", "0", "]", ",", "batch_backward_time_meter", ".", "value", "(", ")", "[", "0", "]", "\n", "\n", "\n", "", "def", "init", "(", "model", ",", "device", ",", "loader", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "\n", "for", "layer_idx", "in", "range", "(", "1", ",", "model", ".", "num_layers", "+", "1", ")", ":", "\n", "        ", "print", "(", "layer_idx", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "batch", "in", "enumerate", "(", "loader", ")", ":", "\n", "                ", "batch", "=", "batch", "[", "0", "]", "\n", "batch", "=", "prepare", "(", "batch", ",", "device", ")", "\n", "model", ".", "init", "(", "batch", ",", "layer_idx", ")", "\n", "\n", "print", "(", "torch", ".", "cuda", ".", "max_memory_allocated", "(", "device", "=", "device", ")", "/", "1e+6", ")", "\n", "\n", "", "", "", "for", "layer", "in", "model", ".", "convs", ":", "\n", "        ", "for", "gnn_block", "in", "layer", ".", "gnn_block", ":", "\n", "            ", "gnn_block", ".", "inited", "=", "True", "\n", "\n", "# for layer_idx in reversed(range(1, model.num_layers+1)) :", "\n", "#     print(layer_idx)", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_node.test_inference": [[158, 172], ["torch.no_grad", "model.eval", "enumerate", "torch.cat", "utils.misc.compute_micro_f1", "utils.misc.prepare_batch_input", "model", "torch.cat.append", "data.y.to"], "function", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.compute_micro_f1", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.prepare_batch_input"], ["#     rand_idx = torch.randperm(data.num_nodes)", "\n", "#     num_batches = ceil(data.num_nodes / batch_size)", "\n", "#     for i in range(num_batches) :", "\n", "#", "\n", "#         if (i+1)*batch_size > data.num_nodes :", "\n", "#             batch_idx = rand_idx[i * batch_size:data.num_nodes]", "\n", "#         else :", "\n", "#             batch_idx = rand_idx[i*batch_size:(i+1)*batch_size]", "\n", "#", "\n", "#         loss_func = lambda x: F.cross_entropy(x[train_bool[batch_idx]],", "\n", "#                                               data.y.squeeze(1)[batch_idx][train_bool[batch_idx]].to(device))", "\n", "#", "\n", "#         if use_gcn :", "\n", "#             if conv_type.startswith('SAGE'):", "\n", "#                 A = (data.adj_t[batch_idx].to(device), data.adj_t[:, batch_idx].to(device))", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_node.main": [[173, 309], ["utils.parser.parse", "torch.device", "utils.misc.get_data", "dataloader.OurDataLoader", "dataloader.OurDataLoader", "utils.logger.Logger", "models.LowRankGNN().to", "range", "utils.logger.Logger.print_statistics", "torch.cuda.is_available", "dataloader.OurDataLoader", "dataloader.OurDataLoader", "main_node.init", "print", "torch.optim.RMSprop", "range", "utils.logger.Logger.print_statistics", "models.LowRankGNN", "LowRankGNN().to.parameters", "time.time", "main_node.train", "utils.logger.Logger.add_result", "torch.cuda.max_memory_allocated", "main_node.test", "print", "main_node.test_inference", "main_node.test_inference", "main_node.test_inference", "utils.logger.Logger.add_result", "print", "time.time", "time.time", "str", "str", "datetime.timedelta", "datetime.timedelta"], "function", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.parser.parse", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.get_data", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.Logger.print_statistics", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_link.init", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.Logger.print_statistics", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_link.train", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.Logger.add_result", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_node.test", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_node.test_inference", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_node.test_inference", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_node.test_inference", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.Logger.add_result"], ["#             else:", "\n", "#                 A = data.adj_t[batch_idx].to(device)", "\n", "#             model.grad_init(data.x[batch_idx].to(device), A, batch_idx,", "\n", "#                         layer_idx, loss_func, data.deg[batch_idx].to(device))", "\n", "#         else :", "\n", "#             if conv_type.startswith('degree-GAT') :", "\n", "#                 A = (data.adj_t[batch_idx].to(device), data.adj_t[:, batch_idx].to(device))", "\n", "#                 model.grad_init(data.x[batch_idx].to(device), A, batch_idx,", "\n", "#                                 layer_idx, loss_func, data.deg[batch_idx].to(device))", "\n", "#             else :", "\n", "#                 model.grad_init(data.x[batch_idx].to(device), data.adj_t[batch_idx].to(device), batch_idx,", "\n", "#                             layer_idx, loss_func)", "\n", "\n", "", "", "for", "layer", "in", "model", ".", "convs", ":", "\n", "        ", "for", "gnn_block", "in", "layer", ".", "gnn_block", ":", "\n", "            ", "gnn_block", ".", "kmeans_init", "=", "False", "\n", "gnn_block", ".", "grad_kmeans_init", "=", "False", "\n", "\n", "", "", "", "def", "compute_micro_f1", "(", "logits", ",", "y", ",", "mask", "=", "None", ")", "->", "float", ":", "\n", "    ", "if", "mask", "is", "not", "None", ":", "\n", "        ", "logits", ",", "y", "=", "logits", "[", "mask", "]", ",", "y", "[", "mask", "]", "\n", "\n", "", "if", "y", ".", "dim", "(", ")", "==", "1", ":", "\n", "        ", "return", "int", "(", "logits", ".", "argmax", "(", "dim", "=", "-", "1", ")", ".", "eq", "(", "y", ")", ".", "sum", "(", ")", ")", "/", "y", ".", "size", "(", "0", ")", "\n", "", "else", ":", "\n", "        ", "y_pred", "=", "logits", ">", "0", "\n", "y_true", "=", "y", ">", "0.5", "\n", "\n", "tp", "=", "int", "(", "(", "y_true", "&", "y_pred", ")", ".", "sum", "(", ")", ")", "\n", "fp", "=", "int", "(", "(", "~", "y_true", "&", "y_pred", ")", ".", "sum", "(", ")", ")", "\n", "fn", "=", "int", "(", "(", "y_true", "&", "~", "y_pred", ")", ".", "sum", "(", ")", ")", "\n", "\n", "try", ":", "\n", "            ", "precision", "=", "tp", "/", "(", "tp", "+", "fp", ")", "\n", "recall", "=", "tp", "/", "(", "tp", "+", "fn", ")", "\n", "return", "2", "*", "(", "precision", "*", "recall", ")", "/", "(", "precision", "+", "recall", ")", "\n", "", "except", "ZeroDivisionError", ":", "\n", "            ", "return", "0.", "\n", "\n", "", "", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "test", "(", "model", ",", "data", ",", "device", ",", "loader", ",", "dataset", ",", "split_idx", ",", "evaluator", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "outs", "=", "[", "]", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "batch", "=", "batch", "[", "0", "]", "\n", "batch", "=", "prepare", "(", "batch", ",", "device", ")", "\n", "out", ",", "_", ",", "_", "=", "model", "(", "batch", ")", "\n", "outs", ".", "append", "(", "out", ")", "\n", "\n", "", "outs", "=", "torch", ".", "cat", "(", "outs", ",", "dim", "=", "0", ")", "\n", "\n", "if", "dataset", "in", "{", "'arxiv'", ",", "'products'", "}", ":", "\n", "        ", "y_pred", "=", "outs", ".", "argmax", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "train_acc", "=", "evaluator", ".", "eval", "(", "{", "\n", "'y_true'", ":", "data", ".", "y", "[", "split_idx", "[", "'train'", "]", "]", ".", "to", "(", "device", ")", ",", "\n", "'y_pred'", ":", "y_pred", "[", "split_idx", "[", "'train'", "]", "]", ",", "\n", "}", ")", "[", "'acc'", "]", "\n", "valid_acc", "=", "evaluator", ".", "eval", "(", "{", "\n", "'y_true'", ":", "data", ".", "y", "[", "split_idx", "[", "'valid'", "]", "]", ".", "to", "(", "device", ")", ",", "\n", "'y_pred'", ":", "y_pred", "[", "split_idx", "[", "'valid'", "]", "]", ",", "\n", "}", ")", "[", "'acc'", "]", "\n", "test_acc", "=", "evaluator", ".", "eval", "(", "{", "\n", "'y_true'", ":", "data", ".", "y", "[", "split_idx", "[", "'test'", "]", "]", ".", "to", "(", "device", ")", ",", "\n", "'y_pred'", ":", "y_pred", "[", "split_idx", "[", "'test'", "]", "]", ",", "\n", "}", ")", "[", "'acc'", "]", "\n", "", "else", ":", "\n", "        ", "train_acc", "=", "compute_micro_f1", "(", "outs", ",", "data", ".", "y", ".", "to", "(", "device", ")", ",", "data", ".", "train_mask", ")", "\n", "valid_acc", "=", "compute_micro_f1", "(", "outs", ",", "data", ".", "y", ".", "to", "(", "device", ")", ",", "data", ".", "val_mask", ")", "\n", "test_acc", "=", "compute_micro_f1", "(", "outs", ",", "data", ".", "y", ".", "to", "(", "device", ")", ",", "data", ".", "test_mask", ")", "\n", "\n", "", "return", "train_acc", ",", "valid_acc", ",", "test_acc", "\n", "\n", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "test_inference", "(", "model", ",", "data", ",", "device", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "outs", "=", "model", ".", "inference", "(", "data", ".", "x", ".", "to", "(", "device", ")", ",", "data", ".", "adj_t", ".", "to", "(", "device", ")", ")", "\n", "result", "=", "compute_micro_f1", "(", "outs", ",", "data", ".", "y", ".", "to", "(", "device", ")", ")", "\n", "\n", "return", "result", "\n", "\n", "\n", "", "def", "main", "(", ")", ":", "\n", "\n", "    ", "args", "=", "parse", "(", ")", "\n", "\n", "# if args.exp :", "\n", "#     experiment = Experiment(", "\n", "#         api_key=\"\",", "\n", "#         project_name=\"\",", "\n", "#         workspace=\"\",", "\n", "#     )", "\n", "#     experiment.set_name(args.exp_name)", "\n", "#     experiment.log_code(folder='.')", "\n", "#     experiment.add_tag(args.exp_tag)", "\n", "\n", "device", "=", "f'cuda:{args.device}'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "device", "=", "torch", ".", "device", "(", "device", ")", "\n", "\n", "if", "args", ".", "dataset", "in", "{", "'arxiv'", ",", "'products'", "}", ":", "\n", "        ", "dataset", "=", "PygNodePropPredDataset", "(", "name", "=", "f'ogbn-{args.dataset}'", ",", "\n", "transform", "=", "T", ".", "ToSparseTensor", "(", ")", ",", "\n", "root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'ogb'", ")", ")", "\n", "", "else", ":", "\n", "        ", "def", "inductive_data", "(", "dataset", ")", ":", "\n", "            ", "data", "=", "Batch", ".", "from_data_list", "(", "dataset", ")", "\n", "data", ".", "batch", ",", "data", ".", "ptr", "=", "None", ",", "None", "\n", "data", "[", "'train_mask'", "]", "=", "torch", ".", "ones", "(", "data", ".", "num_nodes", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "return", "data", "\n", "\n", "", "if", "args", ".", "dataset", "==", "'flickr'", ":", "\n", "            ", "dataset", "=", "Flickr", "(", "root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'graph'", ",", "args", ".", "dataset", ")", ",", "\n", "transform", "=", "T", ".", "ToSparseTensor", "(", ")", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'yelp'", ":", "\n", "            ", "dataset", "=", "Yelp", "(", "root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'graph'", ",", "args", ".", "dataset", ")", ",", "\n", "transform", "=", "T", ".", "ToSparseTensor", "(", ")", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'reddit'", ":", "\n", "            ", "dataset", "=", "Reddit", "(", "root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'graph'", ",", "args", ".", "dataset", ")", ",", "\n", "transform", "=", "T", ".", "ToSparseTensor", "(", ")", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'ppi'", ":", "\n", "            ", "print", "(", "'PPI loaded'", ")", "\n", "dataset", "=", "PPI", "(", "root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'graph'", ",", "args", ".", "dataset", ")", ",", "\n", "transform", "=", "T", ".", "ToSparseTensor", "(", ")", ",", "split", "=", "'train'", ")", "\n", "val_dataset", "=", "PPI", "(", "root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'graph'", ",", "args", ".", "dataset", ")", ",", "\n", "transform", "=", "T", ".", "ToSparseTensor", "(", ")", ",", "split", "=", "'val'", ")", "\n", "test_dataset", "=", "PPI", "(", "root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'graph'", ",", "args", ".", "dataset", ")", ",", "\n", "transform", "=", "T", ".", "ToSparseTensor", "(", ")", ",", "split", "=", "'test'", ")", "\n", "data", ",", "val_data", ",", "test_data", "=", "inductive_data", "(", "dataset", ")", ",", "inductive_data", "(", "val_dataset", ")", ",", "inductive_data", "(", "test_dataset", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'cluster'", ":", "\n", "            ", "print", "(", "'CLUSTER loaded'", ")", "\n", "kwargs", "=", "{", "'root'", ":", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'graph'", ",", "args", ".", "dataset", ")", ",", "'name'", ":", "'CLUSTER'", ",", "\n", "'transform'", ":", "T", ".", "ToSparseTensor", "(", ")", "}", "\n", "dataset", "=", "GNNBenchmarkDataset", "(", "split", "=", "'train'", ",", "**", "kwargs", ")", "\n", "val_dataset", "=", "GNNBenchmarkDataset", "(", "split", "=", "'val'", ",", "**", "kwargs", ")", "\n", "test_dataset", "=", "GNNBenchmarkDataset", "(", "split", "=", "'test'", ",", "**", "kwargs", ")", "\n", "data", ",", "val_data", ",", "test_data", "=", "inductive_data", "(", "dataset", ")", ",", "inductive_data", "(", "val_dataset", ")", ",", "inductive_data", "(", "test_dataset", ")", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.convs.OurGCNConv.gcn_norm": [[28, 64], ["isinstance", "torch_sparse.sum", "torch_scatter.scatter_add.pow_", "torch_scatter.scatter_add.pow_.masked_fill_", "torch_sparse.mul", "torch_sparse.mul", "torch_geometric.utils.num_nodes.maybe_num_nodes", "torch_scatter.scatter_add", "torch_scatter.scatter_add.pow_", "torch_scatter.scatter_add.pow_.masked_fill_", "torch_sparse.fill_diag.has_value", "torch_sparse.fill_diag.fill_value", "torch_sparse.fill_diag", "torch_scatter.scatter_add.pow_.view", "torch_scatter.scatter_add.pow_.view", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "convs.OurGCNConv.", "float", "float", "edge_index.size"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.num_nodes.maybe_num_nodes"], ["", "else", ":", "\n", "        ", "for", "v", "in", "value", ".", "parameters", "(", ")", "if", "hasattr", "(", "value", ",", "'parameters'", ")", "else", "[", "]", ":", "\n", "            ", "constant", "(", "v", ",", "fill_value", ")", "\n", "", "for", "v", "in", "value", ".", "buffers", "(", ")", "if", "hasattr", "(", "value", ",", "'buffers'", ")", "else", "[", "]", ":", "\n", "            ", "constant", "(", "v", ",", "fill_value", ")", "\n", "", "", "", "def", "glorot", "(", "value", ":", "Any", ")", ":", "\n", "    ", "if", "isinstance", "(", "value", ",", "Tensor", ")", ":", "\n", "        ", "stdv", "=", "math", ".", "sqrt", "(", "6.0", "/", "(", "value", ".", "size", "(", "-", "2", ")", "+", "value", ".", "size", "(", "-", "1", ")", ")", ")", "\n", "value", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "", "else", ":", "\n", "        ", "for", "v", "in", "value", ".", "parameters", "(", ")", "if", "hasattr", "(", "value", ",", "'parameters'", ")", "else", "[", "]", ":", "\n", "            ", "glorot", "(", "v", ")", "\n", "", "for", "v", "in", "value", ".", "buffers", "(", ")", "if", "hasattr", "(", "value", ",", "'buffers'", ")", "else", "[", "]", ":", "\n", "            ", "glorot", "(", "v", ")", "\n", "", "", "", "def", "zeros", "(", "value", ":", "Any", ")", ":", "\n", "    ", "constant", "(", "value", ",", "0.", ")", "\n", "\n", "", "class", "OurGCNConv", "(", "GCNConv", ")", ":", "\n", "\n", "    ", "def", "gcn_norm", "(", "edge_index", ",", "edge_weight", "=", "None", ",", "num_nodes", "=", "None", ",", "improved", "=", "False", ",", "\n", "add_self_loops", "=", "True", ",", "dtype", "=", "None", ")", ":", "\n", "\n", "        ", "fill_value", "=", "2.", "if", "improved", "else", "1.", "\n", "\n", "if", "isinstance", "(", "edge_index", ",", "SparseTensor", ")", ":", "\n", "            ", "adj_t", "=", "edge_index", "\n", "if", "not", "adj_t", ".", "has_value", "(", ")", ":", "\n", "                ", "adj_t", "=", "adj_t", ".", "fill_value", "(", "1.", ",", "dtype", "=", "dtype", ")", "\n", "", "if", "add_self_loops", ":", "\n", "                ", "adj_t", "=", "fill_diag", "(", "adj_t", ",", "fill_value", ")", "\n", "", "deg", "=", "sum", "(", "adj_t", ",", "dim", "=", "1", ")", "\n", "deg_inv_sqrt", "=", "deg", ".", "pow_", "(", "-", "0.5", ")", "\n", "deg_inv_sqrt", ".", "masked_fill_", "(", "deg_inv_sqrt", "==", "float", "(", "'inf'", ")", ",", "0.", ")", "\n", "adj_t", "=", "mul", "(", "adj_t", ",", "deg_inv_sqrt", ".", "view", "(", "-", "1", ",", "1", ")", ")", "\n", "adj_t", "=", "mul", "(", "adj_t", ",", "deg_inv_sqrt", ".", "view", "(", "1", ",", "-", "1", ")", ")", "\n", "return", "adj_t", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.convs.OurGCNConv.forward": [[65, 102], ["convs.OurGCNConv.propagate"], "methods", ["None"], ["", "else", ":", "\n", "            ", "num_nodes", "=", "maybe_num_nodes", "(", "edge_index", ",", "num_nodes", ")", "\n", "\n", "if", "edge_weight", "is", "None", ":", "\n", "                ", "edge_weight", "=", "torch", ".", "ones", "(", "(", "edge_index", ".", "size", "(", "1", ")", ",", ")", ",", "dtype", "=", "dtype", ",", "\n", "device", "=", "edge_index", ".", "device", ")", "\n", "\n", "", "if", "add_self_loops", ":", "\n", "                ", "edge_index", ",", "tmp_edge_weight", "=", "add_remaining_self_loops", "(", "\n", "edge_index", ",", "edge_weight", ",", "fill_value", ",", "num_nodes", ")", "\n", "assert", "tmp_edge_weight", "is", "not", "None", "\n", "edge_weight", "=", "tmp_edge_weight", "\n", "\n", "", "row", ",", "col", "=", "edge_index", "[", "0", "]", ",", "edge_index", "[", "1", "]", "\n", "deg", "=", "scatter_add", "(", "edge_weight", ",", "col", ",", "dim", "=", "0", ",", "dim_size", "=", "num_nodes", ")", "\n", "deg_inv_sqrt", "=", "deg", ".", "pow_", "(", "-", "0.5", ")", "\n", "deg_inv_sqrt", ".", "masked_fill_", "(", "deg_inv_sqrt", "==", "float", "(", "'inf'", ")", ",", "0", ")", "\n", "return", "edge_index", ",", "deg_inv_sqrt", "[", "row", "]", "*", "edge_weight", "*", "deg_inv_sqrt", "[", "col", "]", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ",", "edge_index", ":", "Adj", ",", "\n", "edge_weight", ":", "OptTensor", "=", "None", ")", "->", "Tensor", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "\n", "# if self.normalize:", "\n", "#     if isinstance(edge_index, Tensor):", "\n", "#         cache = self._cached_edge_index", "\n", "#         if cache is None:", "\n", "#             edge_index, edge_weight = gcn_norm(  # yapf: disable", "\n", "#                 edge_index, edge_weight, x.size(self.node_dim),", "\n", "#                 self.improved, self.add_self_loops)", "\n", "#             if self.cached:", "\n", "#                 self._cached_edge_index = (edge_index, edge_weight)", "\n", "#         else:", "\n", "#             edge_index, edge_weight = cache[0], cache[1]", "\n", "#", "\n", "#     elif isinstance(edge_index, SparseTensor):", "\n", "#         cache = self._cached_adj_t", "\n", "#         if cache is None:", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.convs.OurSAGEConv.forward": [[104, 122], ["isinstance", "convs.OurSAGEConv.propagate", "convs.OurSAGEConv.lin_r", "torch.normalize", "torch.normalize"], "methods", ["None"], ["#                 edge_index, edge_weight, x.size(self.node_dim),", "\n", "#                 self.improved, self.add_self_loops)", "\n", "#             if self.cached:", "\n", "#                 self._cached_adj_t = edge_index", "\n", "#         else:", "\n", "#             edge_index = cache", "\n", "\n", "# x = x @ self.weight", "\n", "\n", "# propagate_type: (x: Tensor, edge_weight: OptTensor)", "\n", "out", "=", "self", ".", "propagate", "(", "edge_index", ",", "x", "=", "x", ",", "edge_weight", "=", "edge_weight", ",", "\n", "size", "=", "None", ")", "\n", "\n", "# if self.bias is not None:", "\n", "#     out += self.bias", "\n", "\n", "return", "out", "\n", "\n", "", "", "class", "OurSAGEConv", "(", "SAGEConv", ")", ":", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.convs.OurGATConv.__init__": [[126, 164], ["kwargs.setdefault", "torch_geometric.nn.GATConv.__init__", "isinstance", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "convs.OurGATConv.reset_parameters", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.nn.Parameter", "torch.nn.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.nn.Parameter", "torch.nn.Parameter", "convs.OurGATConv.register_parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.dataloader.OurDataLoader.__init__", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_link.LinkPredictor.reset_parameters"], ["if", "isinstance", "(", "x", ",", "Tensor", ")", ":", "\n", "            ", "x", ":", "OptPairTensor", "=", "(", "x", ",", "x", ")", "\n", "\n", "# propagate_type: (x: OptPairTensor)", "\n", "", "out", "=", "self", ".", "propagate", "(", "edge_index", ",", "x", "=", "x", ",", "size", "=", "size", ")", "\n", "# out = self.lin_l(out)", "\n", "\n", "x_r", "=", "x", "[", "1", "]", "\n", "if", "self", ".", "root_weight", "and", "x_r", "is", "not", "None", ":", "\n", "            ", "out", "+=", "self", ".", "lin_r", "(", "x_r", ")", "\n", "\n", "", "if", "self", ".", "normalize", ":", "\n", "            ", "out", "=", "F", ".", "normalize", "(", "out", ",", "p", "=", "2.", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "return", "out", "\n", "\n", "\n", "", "", "class", "OurGATConv", "(", "GATConv", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "in_channels", ":", "Union", "[", "int", ",", "Tuple", "[", "int", ",", "int", "]", "]", ",", "\n", "out_channels", ":", "int", ",", "heads", ":", "int", "=", "1", ",", "concat", ":", "bool", "=", "True", ",", "\n", "negative_slope", ":", "float", "=", "0.2", ",", "dropout", ":", "float", "=", "0.0", ",", "\n", "add_self_loops", ":", "bool", "=", "True", ",", "bias", ":", "bool", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", ".", "setdefault", "(", "'aggr'", ",", "'add'", ")", "\n", "super", "(", "GATConv", ",", "self", ")", ".", "__init__", "(", "node_dim", "=", "0", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "heads", "=", "heads", "\n", "self", ".", "concat", "=", "concat", "\n", "self", ".", "negative_slope", "=", "negative_slope", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "add_self_loops", "=", "add_self_loops", "\n", "\n", "# if isinstance(in_channels, int):", "\n", "#     self.lin_l = Linear(in_channels, heads * out_channels, bias=False)", "\n", "#     self.lin_r = self.lin_l", "\n", "# else:", "\n", "#     self.lin_l = Linear(in_channels[0], heads * out_channels, False)", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.convs.OurGATConv.forward": [[165, 251], ["isinstance", "convs.OurGATConv.propagate", "isinstance", "x.view", "convs.OurGATConv.lin_l().view", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "isinstance", "out.mean.mean.view", "out.mean.mean.mean", "isinstance", "x.dim", "x[].dim", "convs.OurGATConv.lin_r().view", "convs.OurGATConv.size", "convs.OurGATConv.", "convs.OurGATConv.", "isinstance", "isinstance", "convs.OurGATConv.lin_l", "min", "min", "torch_sparse.set_diag", "convs.OurGATConv.lin_r", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "convs.OurGATConv.size", "torch_sparse.set_diag.set_value"], "methods", ["None"], ["#     self.lin_r = Linear(in_channels[1], heads * out_channels, False)", "\n", "\n", "self", ".", "att_l", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "heads", ",", "out_channels", ")", ")", "\n", "self", ".", "att_r", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "heads", ",", "out_channels", ")", ")", "\n", "\n", "# self.att_l = torch.nn.utils.spectral_norm(self.att_l)", "\n", "# self.att_r = torch.nn.utils.spectral_norm(self.att_r)", "\n", "\n", "if", "bias", "and", "concat", ":", "\n", "            ", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "heads", "*", "out_channels", ")", ")", "\n", "", "elif", "bias", "and", "not", "concat", ":", "\n", "            ", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "\n", "", "self", ".", "_alpha", "=", "None", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n", "", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "glorot", "(", "self", ".", "att_l", ")", "\n", "glorot", "(", "self", ".", "att_r", ")", "\n", "zeros", "(", "self", ".", "bias", ")", "\n", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ":", "Union", "[", "Tensor", ",", "OptPairTensor", "]", ",", "edge_index", ":", "Adj", ",", "\n", "size", ":", "Size", "=", "None", ",", "return_attention_weights", "=", "None", ")", ":", "\n", "# type: (Union[Tensor, OptPairTensor], Tensor, Size, NoneType) -> Tensor  # noqa", "\n", "# type: (Union[Tensor, OptPairTensor], SparseTensor, Size, NoneType) -> Tensor  # noqa", "\n", "# type: (Union[Tensor, OptPairTensor], Tensor, Size, bool) -> Tuple[Tensor, Tuple[Tensor, Tensor]]  # noqa", "\n", "# type: (Union[Tensor, OptPairTensor], SparseTensor, Size, bool) -> Tuple[Tensor, SparseTensor]  # noqa", "\n", "        ", "r\"\"\"\n        Args:\n            return_attention_weights (bool, optional): If set to :obj:`True`,\n                will additionally return the tuple\n                :obj:`(edge_index, attention_weights)`, holding the computed\n                attention weights for each edge. (default: :obj:`None`)\n        \"\"\"", "\n", "H", ",", "C", "=", "self", ".", "heads", ",", "self", ".", "out_channels", "\n", "\n", "x_l", ":", "OptTensor", "=", "None", "\n", "x_r", ":", "OptTensor", "=", "None", "\n", "alpha_l", ":", "OptTensor", "=", "None", "\n", "alpha_r", ":", "OptTensor", "=", "None", "\n", "if", "isinstance", "(", "x", ",", "Tensor", ")", ":", "\n", "            ", "assert", "x", ".", "dim", "(", ")", "==", "2", ",", "'Static graphs not supported in `GATConv`.'", "\n", "# x_l = x_r = self.lin_l(x).view(-1, H, C)", "\n", "\n", "x_l", "=", "x_r", "=", "x", ".", "view", "(", "-", "1", ",", "H", ",", "C", ")", "\n", "alpha_l", "=", "(", "x_l", "*", "self", ".", "att_l", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "alpha_r", "=", "(", "x_r", "*", "self", ".", "att_r", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "\n", "# alpha_l = (x_l[:, :, :-1] * self.att_l[:, :, :-1]).sum(dim=-1)", "\n", "# alpha_r = (x_r[:, :, :-1] * self.att_r[:, :, :-1]).sum(dim=-1)", "\n", "", "else", ":", "\n", "# x_l, x_r = x[0], x[1]", "\n", "# assert x[0].dim() == 2, 'Static graphs not supported in `GATConv`.'", "\n", "#", "\n", "# x_l = self.lin_l(x_l).view(-1, H, C)", "\n", "#", "\n", "# alpha_l = (x_l * self.att_l).sum(dim=-1)", "\n", "# if x_r is not None:", "\n", "#     x_r = self.lin_r(x_r).view(-1, H, C)", "\n", "#     alpha_r = (x_r * self.att_r).sum(dim=-1)", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "assert", "x_l", "is", "not", "None", "\n", "assert", "alpha_l", "is", "not", "None", "\n", "\n", "# Trick 1", "\n", "scale", "=", "torch", ".", "sqrt", "(", "torch", ".", "max", "(", "alpha_l", ")", "**", "2", "+", "1", ")", "*", "torch", ".", "sqrt", "(", "torch", ".", "max", "(", "alpha_r", ")", "**", "2", "+", "1", ")", "\n", "alpha_l", "=", "alpha_l", "/", "scale", "\n", "alpha_r", "=", "alpha_r", "/", "scale", "\n", "\n", "# pdb.set_trace()", "\n", "\n", "\n", "if", "self", ".", "add_self_loops", ":", "\n", "            ", "if", "isinstance", "(", "edge_index", ",", "Tensor", ")", ":", "\n", "                ", "num_nodes", "=", "x_l", ".", "size", "(", "0", ")", "\n", "if", "x_r", "is", "not", "None", ":", "\n", "                    ", "num_nodes", "=", "min", "(", "num_nodes", ",", "x_r", ".", "size", "(", "0", ")", ")", "\n", "", "if", "size", "is", "not", "None", ":", "\n", "                    ", "num_nodes", "=", "min", "(", "size", "[", "0", "]", ",", "size", "[", "1", "]", ")", "\n", "", "edge_index", ",", "_", "=", "remove_self_loops", "(", "edge_index", ")", "\n", "edge_index", ",", "_", "=", "add_self_loops", "(", "edge_index", ",", "num_nodes", "=", "num_nodes", ")", "\n", "", "elif", "isinstance", "(", "edge_index", ",", "SparseTensor", ")", ":", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.convs.OurGATConv.message": [[252, 267], ["torch.leaky_relu", "torch.leaky_relu", "utils.vq_softmax.vq_softmax", "torch.dropout", "torch.dropout", "edge_weight.unsqueeze", "torch.dropout.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.vq_softmax.vq_softmax"], ["                ", "edge_index", "=", "set_diag", "(", "edge_index", ")", "\n", "\n", "# propagate_type: (x: OptPairTensor, alpha: OptPairTensor)", "\n", "", "", "out", "=", "self", ".", "propagate", "(", "edge_index", ",", "x", "=", "(", "x_l", ",", "x_r", ")", ",", "\n", "alpha", "=", "(", "alpha_l", ",", "alpha_r", ")", ",", "size", "=", "size", ")", "\n", "\n", "alpha", "=", "self", ".", "_alpha", "\n", "self", ".", "_alpha", "=", "None", "\n", "\n", "if", "self", ".", "concat", ":", "\n", "            ", "out", "=", "out", ".", "view", "(", "-", "1", ",", "self", ".", "heads", "*", "self", ".", "out_channels", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "out", ".", "mean", "(", "dim", "=", "1", ")", "\n", "\n", "", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "out", "+=", "self", ".", "bias", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.convs.Transformer.__init__": [[270, 273], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.dataloader.OurDataLoader.__init__"], ["            ", "assert", "alpha", "is", "not", "None", "\n", "if", "isinstance", "(", "edge_index", ",", "Tensor", ")", ":", "\n", "                ", "return", "out", ",", "(", "edge_index", ",", "alpha", ")", "\n", "", "elif", "isinstance", "(", "edge_index", ",", "SparseTensor", ")", ":", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.convs.Transformer.forward": [[274, 288], ["torch.max", "torch.max", "torch.max", "torch.max", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "math.sqrt", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "X_bar.t", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.exp.t", "torch.exp.t", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.exp.t", "torch.exp.t"], "methods", ["None"], ["                ", "return", "out", ",", "edge_index", ".", "set_value", "(", "alpha", ",", "layout", "=", "'coo'", ")", "\n", "", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n", "", "", "def", "message", "(", "self", ",", "x_j", ":", "Tensor", ",", "alpha_j", ":", "Tensor", ",", "alpha_i", ":", "OptTensor", ",", "\n", "index", ":", "Tensor", ",", "ptr", ":", "OptTensor", ",", "size_i", ":", "Optional", "[", "int", "]", ",", "\n", "edge_weight", ":", "OptTensor", ")", "->", "Tensor", ":", "\n", "\n", "\n", "        ", "alpha", "=", "alpha_j", "if", "alpha_i", "is", "None", "else", "alpha_j", "+", "alpha_i", "\n", "alpha", "=", "F", ".", "leaky_relu", "(", "alpha", ",", "self", ".", "negative_slope", ")", "\n", "alpha", "=", "vq_softmax", "(", "alpha", ",", "index", ",", "ptr", ",", "size_i", ")", "\n", "\n", "self", ".", "_alpha", "=", "alpha", "\n", "alpha", "=", "F", ".", "dropout", "(", "alpha", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_link.LinkPredictor.__init__": [[19, 29], ["super().__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "main_link.LinkPredictor.lins.append", "range", "main_link.LinkPredictor.lins.append", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "main_link.LinkPredictor.lins.append", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.dataloader.OurDataLoader.__init__"], ["\n", "from", "torch", ".", "optim", ".", "lr_scheduler", "import", "StepLR", ",", "ExponentialLR", "\n", "from", "utils", ".", "scheduler", "import", "GradualWarmupScheduler", "\n", "import", "pdb", "\n", "\n", "class", "LinkPredictor", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "hidden_channels", ",", "out_channels", ",", "num_layers", ",", "\n", "dropout", ")", ":", "\n", "        ", "super", "(", "LinkPredictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "lins", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_link.LinkPredictor.reset_parameters": [[30, 33], ["lin.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_link.LinkPredictor.reset_parameters"], ["self", ".", "lins", ".", "append", "(", "torch", ".", "nn", ".", "Linear", "(", "in_channels", ",", "hidden_channels", ")", ")", "\n", "for", "_", "in", "range", "(", "num_layers", "-", "2", ")", ":", "\n", "            ", "self", ".", "lins", ".", "append", "(", "torch", ".", "nn", ".", "Linear", "(", "hidden_channels", ",", "hidden_channels", ")", ")", "\n", "", "self", ".", "lins", ".", "append", "(", "torch", ".", "nn", ".", "Linear", "(", "hidden_channels", ",", "out_channels", ")", ")", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_link.LinkPredictor.forward": [[34, 42], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "lin", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout"], "methods", ["None"], ["self", ".", "dropout", "=", "dropout", "\n", "\n", "", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "lin", "in", "self", ".", "lins", ":", "\n", "            ", "lin", ".", "reset_parameters", "(", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x_i", ",", "x_j", ")", ":", "\n", "        ", "x", "=", "x_i", "*", "x_j", "\n", "for", "lin", "in", "self", ".", "lins", "[", ":", "-", "1", "]", ":", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_link.train": [[43, 100], ["utils.logger.AverageValueMeter", "utils.logger.AverageValueMeter", "utils.logger.AverageValueMeter", "utils.logger.AverageValueMeter", "utils.logger.AverageValueMeter", "utils.logger.AverageValueMeter", "model.train", "enumerate", "enumerate", "optimizer.zero_grad", "utils.misc.prepare_batch_input_link", "model", "predictor", "torch.randint", "torch.randint", "predictor", "time.time", "loss.backward", "utils.logger.AverageValueMeter.add", "utils.logger.AverageValueMeter.add", "utils.logger.AverageValueMeter.add", "utils.logger.AverageValueMeter.value", "utils.logger.AverageValueMeter.value", "utils.logger.AverageValueMeter.value", "utils.logger.AverageValueMeter.value", "utils.logger.AverageValueMeter.value", "utils.logger.AverageValueMeter.value", "utils.logger.AverageValueMeter.add", "utils.logger.AverageValueMeter.add", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "range", "optimizer.step", "loss.item", "loss_pre.item", "time.time", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "len", "torch.log", "torch.log", "torch.log", "torch.log", "model.convs[].gnn_transform.parameters", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "model.convs[].gnn_block.parameters"], "function", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_link.train", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.prepare_batch_input_link", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.add", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.add", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.add", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.value", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.value", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.value", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.value", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.value", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.value", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.add", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.AverageValueMeter.add", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.scheduler.GradualWarmupScheduler.step"], ["            ", "x", "=", "lin", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "", "x", "=", "self", ".", "lins", "[", "-", "1", "]", "(", "x", ")", "\n", "return", "torch", ".", "sigmoid", "(", "x", ")", "\n", "\n", "", "", "def", "prepare", "(", "batch", ",", "device", ")", ":", "\n", "    ", "x", ",", "deg_inv", ",", "A_BN", ",", "A_BB", ",", "A_NB_v", ",", "batch_idx", "=", "batch", "\n", "\n", "x", ",", "deg_inv", "=", "x", ".", "to", "(", "device", ")", ",", "deg_inv", ".", "to", "(", "device", ")", "\n", "row", ",", "col", ",", "value", "=", "A_BN", "[", "0", "]", ".", "to", "(", "device", ")", ",", "A_BN", "[", "1", "]", ".", "to", "(", "device", ")", ",", "A_BN", "[", "2", "]", ".", "to", "(", "device", ")", "\n", "A_BN", "=", "row", ",", "col", ",", "value", "\n", "\n", "if", "A_BB", "is", "not", "None", ":", "\n", "        ", "row", ",", "col", ",", "value", "=", "A_BB", "[", "0", "]", ".", "to", "(", "device", ")", ",", "A_BB", "[", "1", "]", ".", "to", "(", "device", ")", ",", "A_BB", "[", "2", "]", ".", "to", "(", "device", ")", "\n", "A_BB", "=", "row", ",", "col", ",", "value", "\n", "", "A_NB_v", "=", "A_NB_v", ".", "to", "(", "device", ")", "if", "A_NB_v", "is", "not", "None", "else", "None", "\n", "\n", "batch", "=", "x", ",", "(", "deg_inv", ",", "A_BN", ",", "A_BB", ",", "A_NB_v", ",", "batch_idx", ")", "\n", "\n", "return", "batch", "\n", "\n", "", "def", "train", "(", "model", ",", "data", ",", "batch_size", ",", "train_bool", ",", "optimizer", ",", "device", ",", "commitment_cost", ",", "use_gcn", ",", "warm_up_rate", ",", "\n", "ce_only", ",", "exp_log_f", ",", "exp_flag", ",", "conv_type", ",", "clip", ",", "num_layers", ",", "loader", ",", "predictor", ")", ":", "\n", "    ", "batch_forward_time_meter", "=", "AverageValueMeter", "(", ")", "\n", "batch_backward_time_meter", "=", "AverageValueMeter", "(", ")", "\n", "loss_cls_meter", "=", "AverageValueMeter", "(", ")", "\n", "loss_meter", "=", "AverageValueMeter", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "for", "i", ",", "batches", "in", "enumerate", "(", "loader", ")", ":", "\n", "\n", "        ", "for", "j", ",", "batch", "in", "enumerate", "(", "batches", ")", ":", "\n", "\n", "            ", "A_BB", "=", "batch", "[", "3", "]", "\n", "assert", "(", "A_BB", "is", "not", "None", ")", "\n", "src", ",", "dst", ",", "_", "=", "A_BB", "\n", "\n", "batch_idx", "=", "batch", "[", "-", "1", "]", "\n", "\n", "batch", "=", "prepare", "(", "batch", ",", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "out", ",", "vq_losses", ",", "info_backward", "=", "model", "(", "batch", ",", "warm_up_rate", ")", "\n", "\n", "pos_out", "=", "predictor", "(", "out", "[", "src", "]", ",", "out", "[", "dst", "]", ")", "\n", "pos_loss", "=", "-", "torch", ".", "log", "(", "pos_out", "+", "1e-15", ")", ".", "mean", "(", ")", "\n", "# Just do some trivial random sampling.", "\n", "dst_neg", "=", "torch", ".", "randint", "(", "0", ",", "batch_idx", ".", "shape", "[", "0", "]", ",", "src", ".", "shape", ",", "\n", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "neg_out", "=", "predictor", "(", "out", "[", "src", "]", ",", "out", "[", "dst_neg", "]", ")", "\n", "neg_loss", "=", "-", "torch", ".", "log", "(", "1", "-", "neg_out", "+", "1e-15", ")", ".", "mean", "(", ")", "\n", "\n", "loss_pre", "=", "pos_loss", "+", "neg_loss", "\n", "\n", "if", "commitment_cost", ">", "0", ":", "\n", "                ", "loss", "=", "loss_pre", "+", "info_backward", "+", "vq_losses", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_link.init": [[102, 123], ["model.train", "range", "print", "torch.no_grad", "torch.no_grad", "enumerate", "utils.misc.prepare_batch_input_link", "model.init", "print", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated"], "function", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_link.train", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.prepare_batch_input_link", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_link.init"], ["", "if", "ce_only", ":", "\n", "                ", "loss", "=", "loss_pre", "\n", "\n", "", "start", "=", "time", ".", "time", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "batch_backward_time_meter", ".", "add", "(", "time", ".", "time", "(", ")", "-", "start", ")", "\n", "\n", "if", "clip", "is", "not", "None", ":", "\n", "                ", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "                    ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "convs", "[", "i", "]", ".", "gnn_transform", ".", "parameters", "(", ")", ",", "clip", "[", "0", "]", ")", "\n", "if", "conv_type", "==", "'GAT'", ":", "# TODO: transformer case", "\n", "                        ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "convs", "[", "i", "]", ".", "gnn_block", ".", "parameters", "(", ")", ",", "clip", "[", "1", "]", ")", "\n", "\n", "", "", "", "a_grad_norms", ",", "w_grad_norms", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "                ", "if", "conv_type", "==", "'GAT'", ":", "\n", "                    ", "gat_conv", "=", "model", ".", "convs", "[", "i", "]", ".", "gnn_block", "[", "0", "]", ".", "conv", "\n", "a_grad_norm", "=", "torch", ".", "norm", "(", "torch", ".", "cat", "(", "[", "gat_conv", ".", "att_l", ".", "grad", ".", "view", "(", "-", "1", ")", ",", "gat_conv", ".", "att_r", ".", "grad", ".", "view", "(", "-", "1", ")", "]", ")", ")", ".", "item", "(", ")", "\n", "a_grad_norms", ".", "append", "(", "a_grad_norm", ")", "\n", "\n", "", "transform", "=", "model", ".", "convs", "[", "i", "]", ".", "gnn_transform", "\n", "w_grads", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_link.test_citation2": [[126, 170], ["torch.no_grad", "torch.no_grad", "model.eval", "predictor.eval", "enumerate", "torch.cat", "torch.cat", "main_link.test_citation2.test_split"], "function", ["None"], ["", "w_grad_norm", "=", "torch", ".", "norm", "(", "torch", ".", "cat", "(", "w_grads", ")", ")", ".", "item", "(", ")", "\n", "w_grad_norms", ".", "append", "(", "w_grad_norm", ")", "\n", "\n", "", "model", ".", "a_grad_norms", ",", "model", ".", "w_grad_norms", "=", "a_grad_norms", ",", "w_grad_norms", "\n", "\n", "if", "exp_flag", ":", "\n", "                ", "exp_log_f", "(", ")", "\n", "\n", "", "if", "j", "==", "0", "and", "len", "(", "batches", ")", ">", "1", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "loss_meter", ".", "add", "(", "loss", ".", "item", "(", ")", ")", "\n", "loss_cls_meter", ".", "add", "(", "loss_pre", ".", "item", "(", ")", ")", "\n", "print", "(", "torch", ".", "cuda", ".", "max_memory_allocated", "(", "device", "=", "device", ")", "/", "1e+6", ")", "\n", "\n", "", "", "return", "loss_meter", ".", "value", "(", ")", "[", "0", "]", ",", "loss_cls_meter", ".", "value", "(", ")", "[", "0", "]", ",", "batch_forward_time_meter", ".", "value", "(", ")", "[", "0", "]", ",", "batch_backward_time_meter", ".", "value", "(", ")", "[", "0", "]", "\n", "\n", "\n", "", "def", "init", "(", "model", ",", "device", ",", "loader", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "\n", "for", "layer_idx", "in", "range", "(", "1", ",", "model", ".", "num_layers", "+", "1", ")", ":", "\n", "        ", "print", "(", "layer_idx", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "batch", "in", "enumerate", "(", "loader", ")", ":", "\n", "                ", "batch", "=", "batch", "[", "0", "]", "\n", "batch", "=", "prepare", "(", "batch", ",", "device", ")", "\n", "model", ".", "init", "(", "batch", ",", "layer_idx", ")", "\n", "\n", "print", "(", "torch", ".", "cuda", ".", "max_memory_allocated", "(", "device", "=", "device", ")", "/", "1e+6", ")", "\n", "\n", "", "", "", "for", "layer", "in", "model", ".", "convs", ":", "\n", "        ", "for", "gnn_block", "in", "layer", ".", "gnn_block", ":", "\n", "            ", "gnn_block", ".", "inited", "=", "True", "\n", "\n", "# for layer_idx in reversed(range(1, model.num_layers+1)) :", "\n", "#     print(layer_idx)", "\n", "#", "\n", "#     rand_idx = torch.randperm(data.num_nodes)", "\n", "#     num_batches = ceil(data.num_nodes / batch_size)", "\n", "#     for i in range(num_batches) :", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_link.test_collab": [[171, 245], ["torch.no_grad", "torch.no_grad", "model.eval", "predictor.eval", "enumerate", "torch.cat", "torch.cat", "[].to", "[].to", "[].to", "[].to", "[].to", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.cat", "torch.cat", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.cat", "torch.cat", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.cat", "torch.cat", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.cat", "torch.cat", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.cat", "torch.cat", "utils.misc.prepare_batch_input_link", "model", "torch.cat.append", "range", "pos_train_edge[].t", "range", "pos_valid_edge[].t", "range", "neg_valid_edge[].t", "range", "pos_test_edge[].t", "range", "neg_test_edge[].t", "evaluator.eval", "evaluator.eval", "evaluator.eval", "[].to.size", "predictor().squeeze().cpu", "[].to.size", "predictor().squeeze().cpu", "[].to.size", "predictor().squeeze().cpu", "[].to.size", "predictor().squeeze().cpu", "[].to.size", "predictor().squeeze().cpu", "ValueError", "predictor().squeeze", "predictor().squeeze", "predictor().squeeze", "predictor().squeeze", "predictor().squeeze", "predictor", "predictor", "predictor", "predictor", "predictor"], "function", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.prepare_batch_input_link"], ["#", "\n", "#         if (i+1)*batch_size > data.num_nodes :", "\n", "#             batch_idx = rand_idx[i * batch_size:data.num_nodes]", "\n", "#         else :", "\n", "#             batch_idx = rand_idx[i*batch_size:(i+1)*batch_size]", "\n", "#", "\n", "#         loss_func = lambda x: F.cross_entropy(x[train_bool[batch_idx]],", "\n", "#                                               data.y.squeeze(1)[batch_idx][train_bool[batch_idx]].to(device))", "\n", "#", "\n", "#         if use_gcn :", "\n", "#             if conv_type.startswith('SAGE'):", "\n", "#                 A = (data.adj_t[batch_idx].to(device), data.adj_t[:, batch_idx].to(device))", "\n", "#             else:", "\n", "#                 A = data.adj_t[batch_idx].to(device)", "\n", "#             model.grad_init(data.x[batch_idx].to(device), A, batch_idx,", "\n", "#                         layer_idx, loss_func, data.deg[batch_idx].to(device))", "\n", "#         else :", "\n", "#             if conv_type.startswith('degree-GAT') :", "\n", "#                 A = (data.adj_t[batch_idx].to(device), data.adj_t[:, batch_idx].to(device))", "\n", "#                 model.grad_init(data.x[batch_idx].to(device), A, batch_idx,", "\n", "#                                 layer_idx, loss_func, data.deg[batch_idx].to(device))", "\n", "#             else :", "\n", "#                 model.grad_init(data.x[batch_idx].to(device), data.adj_t[batch_idx].to(device), batch_idx,", "\n", "#                             layer_idx, loss_func)", "\n", "\n", "", "", "for", "layer", "in", "model", ".", "convs", ":", "\n", "        ", "for", "gnn_block", "in", "layer", ".", "gnn_block", ":", "\n", "            ", "gnn_block", ".", "kmeans_init", "=", "False", "\n", "gnn_block", ".", "grad_kmeans_init", "=", "False", "\n", "\n", "\n", "# citation2", "\n", "", "", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "test_citation2", "(", "model", ",", "data", ",", "split_idx", ",", "evaluator", ",", "batch_size", ",", "device", ",", "use_gcn", ",", "conv_type", ",", "loader", ",", "\n", "split_edge", ",", "predictor", ",", "dataset", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "predictor", ".", "eval", "(", ")", "\n", "\n", "outs", "=", "[", "]", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "batch", "=", "batch", "[", "0", "]", "\n", "batch", "=", "prepare", "(", "batch", ",", "device", ")", "\n", "out", ",", "_", ",", "_", "=", "model", "(", "batch", ")", "\n", "outs", ".", "append", "(", "out", ")", "\n", "\n", "", "outs", "=", "torch", ".", "cat", "(", "outs", ",", "dim", "=", "0", ")", "\n", "\n", "def", "test_split", "(", "split", ")", ":", "\n", "        ", "source", "=", "split_edge", "[", "split", "]", "[", "'source_node'", "]", ".", "to", "(", "device", ")", "\n", "target", "=", "split_edge", "[", "split", "]", "[", "'target_node'", "]", ".", "to", "(", "device", ")", "\n", "target_neg", "=", "split_edge", "[", "split", "]", "[", "'target_node_neg'", "]", ".", "to", "(", "device", ")", "\n", "\n", "pos_preds", "=", "[", "]", "\n", "for", "perm", "in", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "range", "(", "source", ".", "size", "(", "0", ")", ")", ",", "batch_size", ")", ":", "\n", "            ", "src", ",", "dst", "=", "source", "[", "perm", "]", ",", "target", "[", "perm", "]", "\n", "pos_preds", "+=", "[", "predictor", "(", "outs", "[", "src", "]", ",", "outs", "[", "dst", "]", ")", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", "]", "\n", "", "pos_pred", "=", "torch", ".", "cat", "(", "pos_preds", ",", "dim", "=", "0", ")", "\n", "\n", "neg_preds", "=", "[", "]", "\n", "source", "=", "source", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "1000", ")", ".", "view", "(", "-", "1", ")", "\n", "target_neg", "=", "target_neg", ".", "view", "(", "-", "1", ")", "\n", "for", "perm", "in", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "range", "(", "source", ".", "size", "(", "0", ")", ")", ",", "batch_size", ")", ":", "\n", "            ", "src", ",", "dst_neg", "=", "source", "[", "perm", "]", ",", "target_neg", "[", "perm", "]", "\n", "neg_preds", "+=", "[", "predictor", "(", "outs", "[", "src", "]", ",", "outs", "[", "dst_neg", "]", ")", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", "]", "\n", "", "neg_pred", "=", "torch", ".", "cat", "(", "neg_preds", ",", "dim", "=", "0", ")", ".", "view", "(", "-", "1", ",", "1000", ")", "\n", "\n", "return", "evaluator", ".", "eval", "(", "{", "\n", "'y_pred_pos'", ":", "pos_pred", ",", "\n", "'y_pred_neg'", ":", "neg_pred", ",", "\n", "}", ")", "[", "'mrr_list'", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "train_mrr", "=", "test_split", "(", "'eval_train'", ")", "\n", "valid_mrr", "=", "test_split", "(", "'valid'", ")", "\n", "test_mrr", "=", "test_split", "(", "'test'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_link.main": [[248, 416], ["utils.parser.parse", "torch.device", "torch.device", "utils.misc.norm_adj", "dataloader.OurDataLoader", "dataloader.OurDataLoader", "ogb.linkproppred.Evaluator", "utils.logger.Logger", "models.LowRankGNN().to", "LinkPredictor().to", "ogb.linkproppred.PygLinkPropPredDataset.get_edge_split", "range", "utils.logger.Logger.print_statistics", "torch.cuda.is_available", "torch.cuda.is_available", "ogb.linkproppred.PygLinkPropPredDataset", "utils.misc.norm_adj.adj_t.to_symmetric", "utils.misc.metis", "utils.misc.permute", "torch.arange", "torch.arange", "torch.arange.split", "utils.misc.norm_adj", "torch.manual_seed", "torch.manual_seed", "main_link.init", "print", "torch.optim.RMSprop", "torch.optim.RMSprop", "range", "utils.logger.Logger.print_statistics", "ogb.linkproppred.PygLinkPropPredDataset", "utils.misc.norm_adj.edge_weight.view().to", "ValueError", "ValueError", "models.LowRankGNN", "main_link.LinkPredictor", "torch.randperm", "torch.randperm", "time.time", "main_link.train", "print", "torch_geometric.ToSparseTensor", "torch_geometric.ToSparseTensor", "[].numel", "list", "list", "str", "time.time", "test", "str", "print", "utils.logger.Logger.add_result", "print", "utils.misc.norm_adj.edge_weight.view", "LowRankGNN().to.parameters", "LinkPredictor().to.parameters", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "datetime.timedelta", "datetime.timedelta", "ValueError", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.parser.parse", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.norm_adj", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.Logger.print_statistics", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.metis", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.permute", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.misc.norm_adj", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_link.init", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.Logger.print_statistics", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_link.train", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.main_node.test", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.utils.logger.Logger.add_result"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "test_collab", "(", "model", ",", "data", ",", "split_idx", ",", "evaluator", ",", "batch_size", ",", "device", ",", "use_gcn", ",", "conv_type", ",", "loader", ",", "\n", "split_edge", ",", "predictor", ",", "dataset", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "predictor", ".", "eval", "(", ")", "\n", "\n", "outs", "=", "[", "]", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "batch", "=", "batch", "[", "0", "]", "\n", "batch", "=", "prepare", "(", "batch", ",", "device", ")", "\n", "out", ",", "_", ",", "_", "=", "model", "(", "batch", ")", "\n", "outs", ".", "append", "(", "out", ")", "\n", "\n", "", "h", "=", "outs", "=", "torch", ".", "cat", "(", "outs", ",", "dim", "=", "0", ")", "\n", "\n", "pos_train_edge", "=", "split_edge", "[", "'train'", "]", "[", "'edge'", "]", ".", "to", "(", "h", ".", "device", ")", "\n", "pos_valid_edge", "=", "split_edge", "[", "'valid'", "]", "[", "'edge'", "]", ".", "to", "(", "h", ".", "device", ")", "\n", "neg_valid_edge", "=", "split_edge", "[", "'valid'", "]", "[", "'edge_neg'", "]", ".", "to", "(", "h", ".", "device", ")", "\n", "pos_test_edge", "=", "split_edge", "[", "'test'", "]", "[", "'edge'", "]", ".", "to", "(", "h", ".", "device", ")", "\n", "neg_test_edge", "=", "split_edge", "[", "'test'", "]", "[", "'edge_neg'", "]", ".", "to", "(", "h", ".", "device", ")", "\n", "\n", "pos_train_preds", "=", "[", "]", "\n", "for", "perm", "in", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "range", "(", "pos_train_edge", ".", "size", "(", "0", ")", ")", ",", "batch_size", ")", ":", "\n", "        ", "edge", "=", "pos_train_edge", "[", "perm", "]", ".", "t", "(", ")", "\n", "pos_train_preds", "+=", "[", "predictor", "(", "h", "[", "edge", "[", "0", "]", "]", ",", "h", "[", "edge", "[", "1", "]", "]", ")", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", "]", "\n", "", "pos_train_pred", "=", "torch", ".", "cat", "(", "pos_train_preds", ",", "dim", "=", "0", ")", "\n", "\n", "pos_valid_preds", "=", "[", "]", "\n", "for", "perm", "in", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "range", "(", "pos_valid_edge", ".", "size", "(", "0", ")", ")", ",", "batch_size", ")", ":", "\n", "        ", "edge", "=", "pos_valid_edge", "[", "perm", "]", ".", "t", "(", ")", "\n", "pos_valid_preds", "+=", "[", "predictor", "(", "h", "[", "edge", "[", "0", "]", "]", ",", "h", "[", "edge", "[", "1", "]", "]", ")", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", "]", "\n", "", "pos_valid_pred", "=", "torch", ".", "cat", "(", "pos_valid_preds", ",", "dim", "=", "0", ")", "\n", "\n", "neg_valid_preds", "=", "[", "]", "\n", "for", "perm", "in", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "range", "(", "neg_valid_edge", ".", "size", "(", "0", ")", ")", ",", "batch_size", ")", ":", "\n", "        ", "edge", "=", "neg_valid_edge", "[", "perm", "]", ".", "t", "(", ")", "\n", "neg_valid_preds", "+=", "[", "predictor", "(", "h", "[", "edge", "[", "0", "]", "]", ",", "h", "[", "edge", "[", "1", "]", "]", ")", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", "]", "\n", "", "neg_valid_pred", "=", "torch", ".", "cat", "(", "neg_valid_preds", ",", "dim", "=", "0", ")", "\n", "\n", "# h = model(data.x, data.full_adj_t)", "\n", "\n", "pos_test_preds", "=", "[", "]", "\n", "for", "perm", "in", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "range", "(", "pos_test_edge", ".", "size", "(", "0", ")", ")", ",", "batch_size", ")", ":", "\n", "        ", "edge", "=", "pos_test_edge", "[", "perm", "]", ".", "t", "(", ")", "\n", "pos_test_preds", "+=", "[", "predictor", "(", "h", "[", "edge", "[", "0", "]", "]", ",", "h", "[", "edge", "[", "1", "]", "]", ")", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", "]", "\n", "", "pos_test_pred", "=", "torch", ".", "cat", "(", "pos_test_preds", ",", "dim", "=", "0", ")", "\n", "\n", "neg_test_preds", "=", "[", "]", "\n", "for", "perm", "in", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "range", "(", "neg_test_edge", ".", "size", "(", "0", ")", ")", ",", "batch_size", ")", ":", "\n", "        ", "edge", "=", "neg_test_edge", "[", "perm", "]", ".", "t", "(", ")", "\n", "neg_test_preds", "+=", "[", "predictor", "(", "h", "[", "edge", "[", "0", "]", "]", ",", "h", "[", "edge", "[", "1", "]", "]", ")", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", "]", "\n", "", "neg_test_pred", "=", "torch", ".", "cat", "(", "neg_test_preds", ",", "dim", "=", "0", ")", "\n", "\n", "if", "dataset", "==", "'collab'", ":", "\n", "        ", "evaluator", ".", "K", "=", "K", "=", "50", "\n", "", "elif", "dataset", "==", "'ppa'", ":", "\n", "        ", "evaluator", ".", "K", "=", "K", "=", "100", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'not work'", ")", "\n", "", "train_hits", "=", "evaluator", ".", "eval", "(", "{", "\n", "'y_pred_pos'", ":", "pos_train_pred", ",", "\n", "'y_pred_neg'", ":", "neg_valid_pred", ",", "\n", "}", ")", "[", "f'hits@{K}'", "]", "\n", "valid_hits", "=", "evaluator", ".", "eval", "(", "{", "\n", "'y_pred_pos'", ":", "pos_valid_pred", ",", "\n", "'y_pred_neg'", ":", "neg_valid_pred", ",", "\n", "}", ")", "[", "f'hits@{K}'", "]", "\n", "test_hits", "=", "evaluator", ".", "eval", "(", "{", "\n", "'y_pred_pos'", ":", "pos_test_pred", ",", "\n", "'y_pred_neg'", ":", "neg_test_pred", ",", "\n", "}", ")", "[", "f'hits@{K}'", "]", "\n", "\n", "\n", "return", "train_hits", ",", "valid_hits", ",", "test_hits", "\n", "\n", "\n", "\n", "", "def", "main", "(", ")", ":", "\n", "\n", "    ", "args", "=", "parse", "(", ")", "\n", "# if args.exp :", "\n", "#     experiment = Experiment(", "\n", "#         api_key=\"\",", "\n", "#         project_name=\"\",", "\n", "#         workspace=\"\",", "\n", "#     )", "\n", "#     experiment.set_name(args.exp_name)", "\n", "#     experiment.log_code(folder='.')", "\n", "#     experiment.add_tag(args.exp_tag)", "\n", "\n", "device", "=", "f'cuda:{args.device}'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "device", "=", "torch", ".", "device", "(", "device", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "'citation2'", ":", "\n", "        ", "dataset", "=", "PygLinkPropPredDataset", "(", "name", "=", "f'ogbl-{args.dataset}'", ",", "\n", "transform", "=", "T", ".", "ToSparseTensor", "(", ")", ",", "\n", "root", "=", "'/cmlscratch/kong/datasets/ogb'", ")", "\n", "data", "=", "dataset", "[", "0", "]", "\n", "", "elif", "args", ".", "dataset", "==", "'collab'", ":", "\n", "        ", "dataset", "=", "PygLinkPropPredDataset", "(", "name", "=", "f'ogbl-{args.dataset}'", ",", "\n", "root", "=", "'/cmlscratch/kong/datasets/ogb'", ")", "\n", "data", "=", "dataset", "[", "0", "]", "\n", "data", ".", "edge_weight", "=", "data", ".", "edge_weight", ".", "view", "(", "-", "1", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "data", "=", "T", ".", "ToSparseTensor", "(", ")", "(", "data", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Dataset not supported!'", ")", "\n", "\n", "", "if", "args", ".", "test_batch_size", "<=", "0", ":", "\n", "        ", "args", ".", "test_batch_size", "=", "data", ".", "x", ".", "shape", "[", "0", "]", "\n", "\n", "", "if", "args", ".", "dataset", "==", "'citation2'", ":", "\n", "        ", "data", ".", "adj_t", "=", "data", ".", "adj_t", ".", "to_symmetric", "(", ")", "\n", "\n", "", "if", "args", ".", "conv_type", "==", "'GCN'", ":", "\n", "        ", "deg", "=", "data", ".", "adj_t", ".", "sum", "(", "dim", "=", "1", ")", ".", "to", "(", "torch", ".", "float", ")", "+", "1", "\n", "data", ".", "deg", "=", "deg", "\n", "deg_inv_sqrt", "=", "deg", ".", "pow", "(", "-", "1", "/", "2", ")", "\n", "deg_inv_sqrt", "[", "deg_inv_sqrt", "==", "float", "(", "'inf'", ")", "]", "=", "0", "\n", "deg_inv", "=", "deg", ".", "pow", "(", "-", "1", ")", "\n", "data", ".", "deg_inv", "=", "deg_inv", "\n", "data", ".", "adj_t", "=", "deg_inv_sqrt", ".", "view", "(", "-", "1", ",", "1", ")", "*", "data", ".", "adj_t", "*", "deg_inv_sqrt", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "", "elif", "args", ".", "conv_type", "==", "'SAGE'", ":", "\n", "        ", "deg", "=", "data", ".", "adj_t", ".", "sum", "(", "dim", "=", "1", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "data", ".", "deg", "=", "deg", "\n", "deg_inv", "=", "deg", ".", "pow", "(", "-", "1", ")", "\n", "data", ".", "deg_inv", "=", "deg_inv", "\n", "deg_inv", "[", "deg_inv", "==", "float", "(", "'inf'", ")", "]", "=", "0", "\n", "data", ".", "adj_t", "=", "deg_inv", ".", "view", "(", "-", "1", ",", "1", ")", "*", "data", ".", "adj_t", "\n", "", "elif", "args", ".", "conv_type", "==", "'GAT'", ":", "\n", "        ", "deg", "=", "data", ".", "adj_t", ".", "sum", "(", "dim", "=", "1", ")", ".", "to", "(", "torch", ".", "float", ")", "+", "1", "\n", "data", ".", "deg", "=", "deg", "\n", "deg_inv", "=", "deg", ".", "pow", "(", "-", "1", ")", "\n", "data", ".", "deg_inv", "=", "deg_inv", "\n", "deg_inv", "[", "deg_inv", "==", "float", "(", "'inf'", ")", "]", "=", "0", "\n", "data", ".", "adj_t", "=", "deg_inv", ".", "view", "(", "-", "1", ",", "1", ")", "*", "data", ".", "adj_t", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'GNN conv type not supported'", ")", "\n", "\n", "", "train_loader", "=", "OurDataLoader", "(", "data", ",", "gnn_type", "=", "args", ".", "conv_type", ",", "sampler_type", "=", "args", ".", "sampler_type", ",", "\n", "walk_length", "=", "args", ".", "walk_length", ",", "recovery_flag", "=", "args", ".", "recovery_flag", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "cont_sliding_window", "=", "args", ".", "cont_sliding_window", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "\n", "test_loader", "=", "OurDataLoader", "(", "data", ",", "gnn_type", "=", "args", ".", "conv_type", ",", "sampler_type", "=", "'node'", ",", "train_flag", "=", "False", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "\n", "evaluator", "=", "Evaluator", "(", "name", "=", "f'ogbl-{args.dataset}'", ")", "\n", "logger", "=", "Logger", "(", "args", ".", "runs", ",", "args", ")", "\n", "\n", "num_N", "=", "data", ".", "x", ".", "shape", "[", "0", "]", "\n", "if", "args", ".", "split", ":", "\n", "        ", "if", "data", ".", "num_features", "%", "args", ".", "num_D", "!=", "0", "or", "args", ".", "hidden_channels", "%", "args", ".", "num_D", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'Cannot fully split original features'", ")", "\n", "# args.num_branch = int(data.num_features/args.num_D)", "\n", "\n", "", "", "if", "args", ".", "batch_size", "<=", "0", ":", "\n", "        ", "args", ".", "batch_size", "=", "data", ".", "num_nodes", "\n", "\n", "", "if", "args", ".", "num_layers", "==", "1", ":", "\n", "        ", "model", "=", "LowRankGNN1Layer", "(", "data", ".", "num_features", ",", "args", ".", "hidden_channels", ",", "dataset", ".", "num_classes", ",", "\n", "args", ".", "num_layers", ",", "args", ".", "dropout", ",", "args", ".", "num_M", ",", "args", ".", "num_D", ",", "num_N", ",", "\n", "args", ".", "num_branch", ",", "args", ".", "cluster", ",", "args", ".", "ln_para", ",", "args", ".", "no_second_fc", ",", "\n", "args", ".", "kmeans_iter", ",", "args", ".", "EMA", ",", "args", ".", "split", ",", "args", ".", "kmeans_init", ",", "\n", "args", ".", "dropbranch", ",", "args", ".", "skip", ",", "args", ".", "use_gcn", ",", "args", ".", "commitment_cost", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "else", ":", "\n", "        ", "model", "=", "LowRankGNN", "(", "data", ".", "num_features", ",", "args", ".", "hidden_channels", ",", "args", ".", "hidden_channels", ",", "\n", "args", ".", "num_layers", ",", "args", ".", "dropout", ",", "args", ".", "num_M", ",", "args", ".", "num_D", ",", "num_N", ",", "\n", "args", ".", "num_branch", ",", "args", ".", "cluster", ",", "args", ".", "ln_para", ",", "args", ".", "no_second_fc", ",", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizer.__init__": [[11, 21], ["torch.nn.Module.__init__", "torch.nn.Embedding", "torch.nn.Embedding", "vq.VectorQuantizer._embedding.weight.data.uniform_"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.dataloader.OurDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_embeddings", ",", "embedding_dim", ",", "commitment_cost", "=", "0.5", ",", "holistic_cost", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "VectorQuantizer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_embedding_dim", "=", "embedding_dim", "\n", "self", ".", "_num_embeddings", "=", "num_embeddings", "\n", "\n", "self", ".", "_embedding", "=", "nn", ".", "Embedding", "(", "self", ".", "_num_embeddings", ",", "self", ".", "_embedding_dim", ")", "\n", "self", ".", "_embedding", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "1", "/", "self", ".", "_num_embeddings", ",", "1", "/", "self", ".", "_num_embeddings", ")", "\n", "self", ".", "_commitment_cost", "=", "commitment_cost", "\n", "self", ".", "_holistic_cost", "=", "holistic_cost", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizer.kmeans_init": [[22, 24], ["torch.nn.Parameter", "torch.nn.Parameter"], "methods", ["None"], ["", "def", "kmeans_init", "(", "self", ",", "kmeans_centroids", ")", ":", "\n", "        ", "self", ".", "_embedding", ".", "weight", "=", "nn", ".", "Parameter", "(", "kmeans_centroids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizer.get_codebook": [[25, 27], ["None"], "methods", ["None"], ["", "def", "get_codebook", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_embedding", ".", "weight", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizer.forward": [[28, 57], ["inputs.view", "torch.argmin().unsqueeze", "torch.argmin().unsqueeze", "torch.argmin().unsqueeze", "torch.argmin().unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros.scatter_", "torch.zeros.scatter_", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.matmul().view.detach", "torch.matmul().view.detach", "inputs.detach", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "vq.VectorQuantizer._embedding.weight.t"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "input_shape", "=", "inputs", ".", "shape", "\n", "\n", "# Flatten input", "\n", "flat_input", "=", "inputs", ".", "view", "(", "-", "1", ",", "self", ".", "_embedding_dim", ")", "\n", "\n", "# Calculate distances", "\n", "distances", "=", "(", "torch", ".", "sum", "(", "flat_input", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "+", "torch", ".", "sum", "(", "self", ".", "_embedding", ".", "weight", "**", "2", ",", "dim", "=", "1", ")", "\n", "-", "2", "*", "torch", ".", "matmul", "(", "flat_input", ",", "self", ".", "_embedding", ".", "weight", ".", "t", "(", ")", ")", ")", "\n", "\n", "# Encoding", "\n", "encoding_indices", "=", "torch", ".", "argmin", "(", "distances", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "encodings", "=", "torch", ".", "zeros", "(", "encoding_indices", ".", "shape", "[", "0", "]", ",", "self", ".", "_num_embeddings", ",", "device", "=", "inputs", ".", "device", ")", "\n", "encodings", ".", "scatter_", "(", "1", ",", "encoding_indices", ",", "1", ")", "\n", "\n", "# Quantize and unflatten", "\n", "quantized", "=", "torch", ".", "matmul", "(", "encodings", ",", "self", ".", "_embedding", ".", "weight", ")", ".", "view", "(", "input_shape", ")", "\n", "\n", "# Loss", "\n", "e_latent_loss", "=", "F", ".", "mse_loss", "(", "quantized", ".", "detach", "(", ")", ",", "inputs", ")", "\n", "q_latent_loss", "=", "F", ".", "mse_loss", "(", "quantized", ",", "inputs", ".", "detach", "(", ")", ")", "\n", "loss", "=", "self", ".", "_holistic_cost", "*", "(", "q_latent_loss", "+", "self", ".", "_commitment_cost", "*", "e_latent_loss", ")", "\n", "\n", "quantized", "=", "inputs", "+", "(", "quantized", "-", "inputs", ")", ".", "detach", "(", ")", "\n", "# avg_probs = torch.mean(encodings, dim=0)", "\n", "# perplexity = torch.exp(-torch.sum(avg_probs * torch.log(avg_probs + 1e-10)))", "\n", "\n", "return", "loss", ",", "quantized", ",", "encodings", ",", "encoding_indices", "\n", "# return loss, quantized.contiguous(), perplexity, encodings, encoding_indices", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizerEMA.__init__": [[61, 101], ["torch.nn.Module.__init__", "vq.VectorQuantizerEMA.register_buffer", "vq.VectorQuantizerEMA.register_buffer", "vq.VectorQuantizerEMA.register_buffer", "vq.VectorQuantizerEMA.register_buffer", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "vq.VectorQuantizerEMA._ema_w.data.normal_", "type", "ValueError"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.dataloader.OurDataLoader.__init__", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros"], ["    ", "def", "__init__", "(", "self", ",", "num_embeddings", ",", "embedding_dim", ",", "commitment_cost", "=", "0.5", ",", "decay", "=", "0.99", ",", "epsilon", "=", "1e-24", ",", "\n", "grad_normalize_scale", "=", "(", "1", ",", "1", ")", ",", "warm_up_flag", "=", "False", ",", "momentum", "=", "0.1", ",", "add_flag", "=", "False", ")", ":", "\n", "        ", "super", "(", "VectorQuantizerEMA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "add_flag", "=", "add_flag", "\n", "added_dim", "=", "1", "if", "add_flag", "else", "0", "\n", "\n", "self", ".", "_embedding_dim", "=", "embedding_dim", "\n", "self", ".", "_num_embeddings", "=", "num_embeddings", "\n", "self", ".", "_commitment_cost", "=", "commitment_cost", "\n", "self", ".", "_warm_up_flag", "=", "warm_up_flag", "\n", "\n", "self", ".", "register_buffer", "(", "'_embedding'", ",", "torch", ".", "randn", "(", "self", ".", "_num_embeddings", ",", "self", ".", "_embedding_dim", "*", "2", "+", "added_dim", ")", ")", "\n", "self", ".", "register_buffer", "(", "'_embedding_output'", ",", "torch", ".", "zeros", "(", "self", ".", "_num_embeddings", ",", "self", ".", "_embedding_dim", "*", "2", "+", "added_dim", ")", ")", "\n", "\n", "self", ".", "register_buffer", "(", "'_ema_cluster_size'", ",", "torch", ".", "zeros", "(", "num_embeddings", ")", ")", "\n", "self", ".", "register_buffer", "(", "'_ema_w'", ",", "torch", ".", "zeros", "(", "self", ".", "_num_embeddings", ",", "self", ".", "_embedding_dim", "*", "2", "+", "added_dim", ")", ")", "\n", "\n", "if", "self", ".", "_warm_up_flag", ":", "\n", "            ", "self", ".", "_ema_w", ".", "data", ".", "normal_", "(", ")", "\n", "\n", "", "self", ".", "_decay", "=", "decay", "\n", "self", ".", "_epsilon", "=", "epsilon", "\n", "\n", "# variance of gradient is very small, eps needs to be small", "\n", "self", ".", "batch_norm_feat", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "embedding_dim", ",", "affine", "=", "False", ")", "\n", "self", ".", "batch_norm_grad", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "embedding_dim", "+", "added_dim", ",", "eps", "=", "self", ".", "_epsilon", ",", "affine", "=", "False", ",", "\n", "momentum", "=", "momentum", ")", "\n", "\n", "self", ".", "grad_normalize_scale", "=", "grad_normalize_scale", "\n", "if", "type", "(", "self", ".", "grad_normalize_scale", ")", "is", "not", "list", ":", "\n", "            ", "raise", "ValueError", "(", "'grad scale type wrong!'", ")", "\n", "", "self", ".", "_embedding", ".", "data", "[", ":", ",", "self", ".", "_embedding_dim", ":", "self", ".", "_embedding_dim", "*", "2", "]", "*=", "self", ".", "grad_normalize_scale", "[", "0", "]", "\n", "self", ".", "_ema_w", ".", "data", "[", ":", ",", "self", ".", "_embedding_dim", ":", "self", ".", "_embedding_dim", "*", "2", "]", "*=", "self", ".", "grad_normalize_scale", "[", "0", "]", "\n", "\n", "if", "self", ".", "add_flag", ":", "\n", "            ", "self", ".", "_embedding", ".", "data", "[", ":", ",", "self", ".", "_embedding_dim", "*", "2", "]", "*=", "self", ".", "grad_normalize_scale", "[", "1", "]", "\n", "self", ".", "_ema_w", ".", "data", "[", ":", ",", "self", ".", "_embedding_dim", "*", "2", "]", "*=", "self", ".", "grad_normalize_scale", "[", "1", "]", "\n", "\n", "", "self", ".", "bn_inited", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizerEMA.feature_kmeans_init": [[102, 106], ["kmeans_counts.unsqueeze"], "methods", ["None"], ["", "def", "feature_kmeans_init", "(", "self", ",", "kmeans_centroids", ",", "kmeans_counts", ")", ":", "\n", "        ", "self", ".", "_embedding", ".", "data", "[", ":", ",", ":", "self", ".", "_embedding_dim", "]", "=", "kmeans_centroids", "\n", "self", ".", "_ema_cluster_size", ".", "data", "=", "kmeans_counts", "\n", "self", ".", "_ema_w", ".", "data", "[", ":", ",", ":", "self", ".", "_embedding_dim", "]", "=", "kmeans_centroids", "*", "kmeans_counts", ".", "unsqueeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizerEMA.kmeans_init": [[108, 119], ["kmeans_counts.unsqueeze"], "methods", ["None"], ["", "def", "kmeans_init", "(", "self", ",", "kmeans_centroids", ",", "kmeans_counts", ")", ":", "\n", "        ", "self", ".", "_embedding", ".", "data", "=", "kmeans_centroids", "\n", "self", ".", "_ema_cluster_size", ".", "data", "=", "kmeans_counts", "\n", "self", ".", "_ema_w", ".", "data", "=", "kmeans_centroids", "*", "kmeans_counts", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "self", ".", "_embedding", ".", "data", "[", ":", ",", "self", ".", "_embedding_dim", ":", "self", ".", "_embedding_dim", "*", "2", "]", "*=", "self", ".", "grad_normalize_scale", "[", "0", "]", "\n", "self", ".", "_ema_w", ".", "data", "[", ":", ",", "self", ".", "_embedding_dim", ":", "self", ".", "_embedding_dim", "*", "2", "]", "*=", "self", ".", "grad_normalize_scale", "[", "0", "]", "\n", "\n", "if", "self", ".", "add_flag", ":", "\n", "            ", "self", ".", "_embedding", ".", "data", "[", ":", ",", "self", ".", "_embedding_dim", "*", "2", "]", "*=", "self", ".", "grad_normalize_scale", "[", "1", "]", "\n", "self", ".", "_ema_w", ".", "data", "[", ":", ",", "self", ".", "_embedding_dim", "*", "2", "]", "*=", "self", ".", "grad_normalize_scale", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizerEMA.get": [[120, 122], ["None"], "methods", ["None"], ["", "", "def", "get_codebook", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_embedding_output", "[", ":", ",", ":", "self", ".", "_embedding_dim", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizerEMA.get_codebook": [[123, 125], ["None"], "methods", ["None"], ["", "def", "get_grad", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_embedding_output", "[", ":", ",", "self", ".", "_embedding_dim", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizerEMA.get_grad": [[126, 128], ["None"], "methods", ["None"], ["", "def", "get_feat_cen_norm", "(", "self", ")", ":", "\n", "        ", "center", "=", "torch", ".", "mean", "(", "self", ".", "_embedding", "[", ":", ",", ":", "self", ".", "_embedding_dim", "]", ",", "dim", "=", "0", ")", "\n", "return", "torch", ".", "norm", "(", "center", ")", ".", "item", "(", ")", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizerEMA.get_feat_cen_norm": [[129, 132], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.norm().item", "torch.norm().item", "torch.norm().item", "torch.norm().item", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["\n", "", "def", "get_grad_cen_norm", "(", "self", ")", ":", "\n", "        ", "center", "=", "torch", ".", "mean", "(", "self", ".", "_embedding", "[", ":", ",", "self", ".", "_embedding_dim", ":", "]", ",", "dim", "=", "0", ")", "\n", "return", "torch", ".", "norm", "(", "center", ")", ".", "item", "(", ")", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizerEMA.get_grad_cen_norm": [[133, 136], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.norm().item", "torch.norm().item", "torch.norm().item", "torch.norm().item", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["\n", "", "def", "get_embedding_for_record", "(", "self", ")", ":", "\n", "\n", "        ", "emb", "=", "self", ".", "_embedding", "[", ":", ",", ":", "self", ".", "_embedding_dim", "]", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizerEMA.get_embedding_for_record": [[137, 156], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt.triu().nonzero().t", "torch.sqrt.triu().nonzero().t", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt.triu().nonzero().t", "torch.sqrt.triu().nonzero().t", "torch.sqrt.clamp_", "torch.sqrt.clamp_", "torch.sqrt.clamp_", "torch.sqrt.clamp_", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sqrt.triu().nonzero", "torch.sqrt.triu().nonzero", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sqrt.triu().nonzero", "torch.sqrt.triu().nonzero", "emb.t", "emb.t", "torch.sqrt.triu", "torch.sqrt.triu", "torch.sqrt.triu", "torch.sqrt.triu"], "methods", ["None"], ["feat_distances", "=", "(", "torch", ".", "sum", "(", "emb", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "+", "torch", ".", "sum", "(", "emb", "**", "2", ",", "dim", "=", "1", ")", "\n", "-", "2", "*", "torch", ".", "matmul", "(", "emb", ",", "emb", ".", "t", "(", ")", ")", ")", "\n", "feat_distances", "=", "torch", ".", "sqrt", "(", "feat_distances", ".", "clamp_", "(", "min", "=", "0", ")", ")", "\n", "triu_idx", "=", "feat_distances", ".", "triu", "(", ")", ".", "nonzero", "(", ")", ".", "t", "(", ")", "\n", "feat_distances", "=", "feat_distances", "[", "triu_idx", "[", "0", "]", ",", "triu_idx", "[", "1", "]", "]", "\n", "\n", "emb", "=", "self", ".", "_embedding", "[", ":", ",", "self", ".", "_embedding_dim", ":", "]", "\n", "grad_distances", "=", "(", "torch", ".", "sum", "(", "emb", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "+", "torch", ".", "sum", "(", "emb", "**", "2", ",", "dim", "=", "1", ")", "\n", "-", "2", "*", "torch", ".", "matmul", "(", "emb", ",", "emb", ".", "t", "(", ")", ")", ")", "\n", "grad_distances", "=", "torch", ".", "sqrt", "(", "grad_distances", ".", "clamp_", "(", "min", "=", "0", ")", ")", "\n", "triu_idx", "=", "grad_distances", ".", "triu", "(", ")", ".", "nonzero", "(", ")", ".", "t", "(", ")", "\n", "grad_distances", "=", "grad_distances", "[", "triu_idx", "[", "0", "]", ",", "triu_idx", "[", "1", "]", "]", "\n", "\n", "return", "feat_distances", ",", "grad_distances", "\n", "\n", "", "def", "_get_feat_embed", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_embedding", "[", ":", ",", ":", "self", ".", "_embedding_dim", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizerEMA._get_feat_embed": [[157, 159], ["None"], "methods", ["None"], ["", "def", "feature_update", "(", "self", ",", "X_B", ")", ":", "\n", "        ", "inputs", "=", "X_B", "\n", "inputs_normalized", "=", "self", ".", "batch_norm_feat", "(", "inputs", ")", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizerEMA.feature_update": [[160, 203], ["vq.VectorQuantizerEMA.batch_norm_feat", "vq.VectorQuantizerEMA._get_feat_embed", "torch.argmin().unsqueeze", "torch.argmin().unsqueeze", "torch.argmin().unsqueeze", "torch.argmin().unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros.scatter_", "torch.zeros.scatter_", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "vq.VectorQuantizerEMA.batch_norm_feat.running_mean.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "ValueError", "torch.zeros.t", "torch.zeros.t", "vq.VectorQuantizerEMA._ema_cluster_size.unsqueeze", "vq.VectorQuantizerEMA.t", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "vq.VectorQuantizerEMA._get_feat_embed"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizerEMA._get_feat_embed", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizerEMA._get_feat_embed"], ["embedding_normalized", "=", "self", ".", "_get_feat_embed", "(", ")", "\n", "\n", "# Calculate distances", "\n", "distances", "=", "(", "torch", ".", "sum", "(", "inputs_normalized", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "+", "torch", ".", "sum", "(", "embedding_normalized", "**", "2", ",", "dim", "=", "1", ")", "\n", "-", "2", "*", "torch", ".", "matmul", "(", "inputs_normalized", ",", "embedding_normalized", ".", "t", "(", ")", ")", ")", "\n", "\n", "# Encoding", "\n", "encoding_indices", "=", "torch", ".", "argmin", "(", "distances", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "encodings", "=", "torch", ".", "zeros", "(", "encoding_indices", ".", "shape", "[", "0", "]", ",", "self", ".", "_num_embeddings", ",", "device", "=", "X_B", ".", "device", ")", "\n", "encodings", ".", "scatter_", "(", "1", ",", "encoding_indices", ",", "1", ")", "\n", "\n", "# Use EMA to update the embedding vectors", "\n", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "_ema_cluster_size", ".", "data", "=", "self", ".", "_ema_cluster_size", "*", "self", ".", "_decay", "+", "(", "1", "-", "self", ".", "_decay", ")", "*", "torch", ".", "sum", "(", "encodings", ",", "0", ")", "\n", "\n", "\n", "# Laplace smoothing of the cluster size", "\n", "if", "self", ".", "_warm_up_flag", ":", "\n", "                ", "n", "=", "torch", ".", "sum", "(", "self", ".", "_ema_cluster_size", ".", "data", ")", "\n", "self", ".", "_ema_cluster_size", ".", "data", "=", "(", "\n", "(", "self", ".", "_ema_cluster_size", "+", "1e-5", ")", "\n", "/", "(", "n", "+", "self", ".", "_num_embeddings", "*", "1e-5", ")", "*", "n", ")", "\n", "\n", "", "if", "torch", ".", "count_nonzero", "(", "self", ".", "_ema_cluster_size", ")", "!=", "self", ".", "_ema_cluster_size", ".", "shape", "[", "0", "]", ":", "\n", "                ", "raise", "ValueError", "(", "'Bad Init!'", ")", "\n", "\n", "", "dw", "=", "torch", ".", "matmul", "(", "encodings", ".", "t", "(", ")", ",", "inputs_normalized", ")", "\n", "\n", "self", ".", "_ema_w", ".", "data", "[", ":", ",", ":", "self", ".", "_embedding_dim", "]", "=", "self", ".", "_ema_w", "[", ":", ",", ":", "self", ".", "_embedding_dim", "]", "*", "self", ".", "_decay", "+", "(", "1", "-", "self", ".", "_decay", ")", "*", "dw", "\n", "self", ".", "_embedding", ".", "data", "[", ":", ",", ":", "self", ".", "_embedding_dim", "]", "=", "self", ".", "_ema_w", "[", ":", ",", ":", "self", ".", "_embedding_dim", "]", "/", "self", ".", "_ema_cluster_size", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "running_std", "=", "torch", ".", "sqrt", "(", "self", ".", "batch_norm_feat", ".", "running_var", "+", "1e-5", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "running_mean", "=", "self", ".", "batch_norm_feat", ".", "running_mean", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "self", ".", "_embedding_output", ".", "data", "[", ":", ",", ":", "self", ".", "_embedding_dim", "]", "=", "self", ".", "_get_feat_embed", "(", ")", "*", "running_std", "+", "running_mean", "\n", "\n", "", "return", "encoding_indices", "\n", "\n", "", "def", "update", "(", "self", ",", "X_B", ",", "grad", ")", ":", "\n", "\n", "        ", "inputs", "=", "torch", ".", "cat", "(", "[", "X_B", ",", "grad", "]", ",", "dim", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.vq.VectorQuantizerEMA.update": [[204, 280], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.sqrt().detach", "torch.sqrt().detach", "torch.sqrt().detach", "torch.sqrt().detach", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.argmin().unsqueeze", "torch.argmin().unsqueeze", "torch.argmin().unsqueeze", "torch.argmin().unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros.scatter_", "torch.zeros.scatter_", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.var().detach", "torch.var().detach", "torch.var().detach", "torch.var().detach", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.var().detach", "torch.var().detach", "torch.var().detach", "torch.var().detach", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "vq.VectorQuantizerEMA._embedding.data.detach().clone", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.sqrt().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "running_mean.unsqueeze.unsqueeze.unsqueeze", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "vq.VectorQuantizerEMA.batch_norm_feat", "vq.VectorQuantizerEMA.batch_norm_grad", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "ValueError", "torch.zeros.t", "torch.zeros.t", "vq.VectorQuantizerEMA._ema_cluster_size.unsqueeze", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.var", "torch.var", "torch.var", "torch.var", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.var", "torch.var", "torch.var", "torch.var", "vq.VectorQuantizerEMA._embedding.t", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "vq.VectorQuantizerEMA._embedding.data.detach", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.var", "torch.var", "torch.var", "torch.var"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v1.convs.zeros"], ["\n", "mean", "=", "torch", ".", "mean", "(", "inputs", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", ".", "detach", "(", ")", "\n", "std", "=", "torch", ".", "sqrt", "(", "torch", ".", "var", "(", "inputs", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "+", "self", ".", "_epsilon", ")", ".", "detach", "(", ")", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n", "self", ".", "feat_zero_rate", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "inputs", "[", ":", ",", "0", "]", ")", "<", "std", "[", "0", "]", "[", "0", "]", "*", "1e-5", ")", "/", "X_B", ".", "shape", "[", "0", "]", "\n", "self", ".", "grad_zero_rate", "=", "torch", ".", "sum", "(", "inputs", "[", ":", ",", "self", ".", "_embedding_dim", "]", "<", "std", "[", "0", "]", "[", "self", ".", "_embedding_dim", "]", "*", "1e-5", ")", "/", "X_B", ".", "shape", "[", "0", "]", "\n", "\n", "if", "not", "self", ".", "bn_inited", ":", "\n", "            ", "self", ".", "batch_norm_feat", ".", "running_mean", ".", "data", "=", "torch", ".", "mean", "(", "X_B", ",", "dim", "=", "0", ")", ".", "detach", "(", ")", "\n", "self", ".", "batch_norm_feat", ".", "running_var", ".", "data", "=", "torch", ".", "var", "(", "X_B", ",", "dim", "=", "0", ")", ".", "detach", "(", ")", "\n", "self", ".", "batch_norm_grad", ".", "running_mean", ".", "data", "=", "torch", ".", "mean", "(", "grad", ",", "dim", "=", "0", ")", ".", "detach", "(", ")", "\n", "self", ".", "batch_norm_grad", ".", "running_var", ".", "data", "=", "torch", ".", "var", "(", "grad", ",", "dim", "=", "0", ")", ".", "detach", "(", ")", "\n", "self", ".", "bn_inited", "=", "True", "\n", "\n", "", "inputs_normalized", "=", "torch", ".", "cat", "(", "[", "self", ".", "batch_norm_feat", "(", "X_B", ")", ",", "self", ".", "batch_norm_grad", "(", "grad", ")", "]", ",", "dim", "=", "1", ")", "\n", "inputs_normalized", "[", ":", ",", "self", ".", "_embedding_dim", ":", "self", ".", "_embedding_dim", "*", "2", "]", "*=", "self", ".", "grad_normalize_scale", "[", "0", "]", "\n", "\n", "if", "self", ".", "add_flag", ":", "\n", "            ", "inputs_normalized", "[", ":", ",", "self", ".", "_embedding_dim", "*", "2", "]", "*=", "self", ".", "grad_normalize_scale", "[", "1", "]", "\n", "\n", "# Calculate distances", "\n", "", "distances", "=", "(", "torch", ".", "sum", "(", "inputs_normalized", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "+", "torch", ".", "sum", "(", "self", ".", "_embedding", "**", "2", ",", "dim", "=", "1", ")", "\n", "-", "2", "*", "torch", ".", "matmul", "(", "inputs_normalized", ",", "self", ".", "_embedding", ".", "t", "(", ")", ")", ")", "\n", "# distances = F.cosine_similarity(inputs_normalized, self._embedding)", "\n", "\n", "# Encoding", "\n", "encoding_indices", "=", "torch", ".", "argmin", "(", "distances", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "encodings", "=", "torch", ".", "zeros", "(", "encoding_indices", ".", "shape", "[", "0", "]", ",", "self", ".", "_num_embeddings", ",", "device", "=", "X_B", ".", "device", ")", "\n", "encodings", ".", "scatter_", "(", "1", ",", "encoding_indices", ",", "1", ")", "\n", "\n", "# Use EMA to update the embedding vectors", "\n", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "_ema_cluster_size", ".", "data", "=", "self", ".", "_ema_cluster_size", "*", "self", ".", "_decay", "+", "(", "1", "-", "self", ".", "_decay", ")", "*", "torch", ".", "sum", "(", "encodings", ",", "0", ")", "\n", "\n", "\n", "# Laplace smoothing of the cluster size", "\n", "if", "self", ".", "_warm_up_flag", ":", "\n", "                ", "n", "=", "torch", ".", "sum", "(", "self", ".", "_ema_cluster_size", ".", "data", ")", "\n", "self", ".", "_ema_cluster_size", ".", "data", "=", "(", "\n", "(", "self", ".", "_ema_cluster_size", "+", "1e-5", ")", "\n", "/", "(", "n", "+", "self", ".", "_num_embeddings", "*", "1e-5", ")", "*", "n", ")", "\n", "\n", "", "if", "torch", ".", "count_nonzero", "(", "self", ".", "_ema_cluster_size", ")", "!=", "self", ".", "_ema_cluster_size", ".", "shape", "[", "0", "]", ":", "\n", "                ", "raise", "ValueError", "(", "'Bad Init!'", ")", "\n", "\n", "", "dw", "=", "torch", ".", "matmul", "(", "encodings", ".", "t", "(", ")", ",", "inputs_normalized", ")", "\n", "\n", "self", ".", "_ema_w", ".", "data", "=", "self", ".", "_ema_w", "*", "self", ".", "_decay", "+", "(", "1", "-", "self", ".", "_decay", ")", "*", "dw", "\n", "self", ".", "_embedding", ".", "data", "=", "self", ".", "_ema_w", "/", "self", ".", "_ema_cluster_size", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "output_data", "=", "self", ".", "_embedding", ".", "data", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "\n", "output_data", "[", ":", ",", "self", ".", "_embedding_dim", ":", "self", ".", "_embedding_dim", "*", "2", "]", "/=", "self", ".", "grad_normalize_scale", "[", "0", "]", "+", "self", ".", "_epsilon", "\n", "if", "self", ".", "add_flag", ":", "\n", "                ", "output_data", "[", ":", ",", "self", ".", "_embedding_dim", "*", "2", "]", "/=", "self", ".", "grad_normalize_scale", "[", "1", "]", "+", "self", ".", "_epsilon", "\n", "\n", "", "running_var", "=", "torch", ".", "cat", "(", "[", "self", ".", "batch_norm_feat", ".", "running_var", "+", "1e-5", ",", "self", ".", "batch_norm_grad", ".", "running_var", "+", "self", ".", "_epsilon", "]", ")", "\n", "running_std", "=", "torch", ".", "sqrt", "(", "running_var", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "\n", "running_mean", "=", "torch", ".", "cat", "(", "[", "self", ".", "batch_norm_feat", ".", "running_mean", ",", "self", ".", "batch_norm_grad", ".", "running_mean", "]", ")", "\n", "running_mean", "=", "running_mean", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "self", ".", "_embedding_output", ".", "data", "=", "output_data", "*", "running_std", "+", "running_mean", "\n", "\n", "if", "self", ".", "grad_normalize_scale", "[", "0", "]", "==", "0", ":", "\n", "                ", "self", ".", "_embedding_output", ".", "data", "[", ":", ",", "self", ".", "_embedding_dim", ":", "]", "*=", "0", "\n", "", "self", ".", "running_mean", "=", "running_mean", "\n", "self", ".", "running_std", "=", "running_std", "\n", "\n", "", "return", "encoding_indices", ",", "encodings", "", "", "", ""]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.dataloader.OurDataLoader.__init__": [[12, 51], ["dataloader.OurDataLoader.adj_t.coo", "torch.stack", "super().__init__", "super().__init__", "range", "print", "range", "len", "torch_geometric", "torch_geometric"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.dataloader.OurDataLoader.__init__", "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.dataloader.OurDataLoader.__init__"], ["self", ".", "walk_length", "=", "walk_length", "\n", "self", ".", "train_flag", "=", "train_flag", "\n", "self", ".", "cont_sliding_window", "=", "cont_sliding_window", "\n", "\n", "self", ".", "x", "=", "data", ".", "x", "\n", "self", ".", "adj_t", "=", "data", ".", "adj_t", "\n", "self", ".", "deg", "=", "data", ".", "deg", "\n", "self", ".", "deg_inv", "=", "data", ".", "deg_inv", "\n", "self", ".", "N", "=", "self", ".", "x", ".", "shape", "[", "0", "]", "\n", "self", ".", "num_batches", "=", "(", "self", ".", "N", "//", "batch_size", ")", "+", "1", "\n", "\n", "if", "sampler_type", "==", "'edge'", ":", "\n", "            ", "self", ".", "batch_size", "=", "batch_size", "//", "2", "\n", "", "elif", "sampler_type", "==", "'rw'", ":", "\n", "            ", "self", ".", "batch_size", "=", "batch_size", "//", "(", "self", ".", "walk_length", "+", "1", ")", "\n", "", "elif", "sampler_type", "==", "'cont'", ":", "\n", "            ", "self", ".", "batch_size", "=", "batch_size", "//", "self", ".", "cont_sliding_window", "\n", "", "else", ":", "\n", "            ", "self", ".", "batch_size", "=", "batch_size", "\n", "\n", "", "super", "(", "OurDataLoader", ",", "self", ")", ".", "__init__", "(", "range", "(", "self", ".", "N", ")", ",", "collate_fn", "=", "self", ".", "__collate__", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "**", "kwargs", ")", "\n", "\n", "", "def", "__collate__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "idx", "=", "torch", ".", "tensor", "(", "idx", ")", "\n", "node_idx_list", "=", "[", "]", "\n", "\n", "if", "self", ".", "sampler_type", "==", "'node'", ":", "\n", "            ", "node_idx_list", ".", "append", "(", "idx", ")", "\n", "\n", "", "elif", "self", ".", "sampler_type", "==", "'edge'", ":", "\n", "            ", "node_idx_list", ".", "append", "(", "self", ".", "adj_t", ".", "random_walk", "(", "idx", ",", "1", ")", ".", "view", "(", "-", "1", ")", ".", "unique", "(", ")", ")", "\n", "\n", "", "elif", "self", ".", "sampler_type", "==", "'rw'", ":", "\n", "            ", "node_idx_list", ".", "append", "(", "self", ".", "adj_t", ".", "random_walk", "(", "idx", ",", "self", ".", "walk_length", ")", ".", "view", "(", "-", "1", ")", ".", "unique", "(", ")", ")", "\n", "\n", "", "elif", "self", ".", "sampler_type", "==", "'cont'", ":", "\n", "            ", "node_idx", "=", "idx", "\n", "node_idx_list", ".", "append", "(", "node_idx", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "walk_length", ")", ":", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.dataloader.OurDataLoader.__collate_cluster__": [[52, 62], ["torch.cat", "torch.tensor", "result_list.append", "dataloader.OurDataLoader._k_hop_subgraph"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.dataloader.OurDataLoader._k_hop_subgraph"], ["                ", "node_idx", "=", "torch", ".", "cat", "(", "[", "node_idx", "]", "*", "3", ",", "0", ")", "\n", "node_idx", "=", "self", ".", "adj_t", ".", "random_walk", "(", "node_idx", ",", "1", ")", "[", ":", ",", "1", "]", ".", "unique", "(", ")", "[", ":", "self", ".", "batch_size", "]", "\n", "node_idx_list", ".", "append", "(", "node_idx", ")", "\n", "\n", "", "if", "self", ".", "cont_sliding_window", ">", "1", ":", "\n", "                ", "node_idx_list_holder", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "node_idx_list", ")", "-", "self", ".", "cont_sliding_window", "+", "1", ")", ":", "\n", "                    ", "node_idx_list_holder", ".", "append", "(", "torch", ".", "cat", "(", "node_idx_list", "[", "i", ":", "i", "+", "self", ".", "cont_sliding_window", "]", ")", ".", "unique", "(", ")", ")", "\n", "", "node_idx_list", "=", "node_idx_list_holder", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Sampler type not supported!'", ")", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.dataloader.OurDataLoader.__collate__": [[63, 97], ["torch.tensor", "node_idx_list.append", "result_list.append", "node_idx_list.append", "dataloader.OurDataLoader.adj_t.random_walk().view().unique", "node_idx_list.append", "dataloader.OurDataLoader._k_hop_subgraph", "dataloader.OurDataLoader.adj_t.random_walk().view().unique", "node_idx_list.append", "range", "ValueError", "dataloader.OurDataLoader.adj_t.random_walk().view", "torch.cat", "node_idx_list.append", "range", "dataloader.OurDataLoader.adj_t.random_walk().view", "[].unique", "node_idx_list_holder.append", "dataloader.OurDataLoader.adj_t.random_walk", "torch.cat().unique", "dataloader.OurDataLoader.adj_t.random_walk", "len", "dataloader.OurDataLoader.adj_t.random_walk", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.dataloader.OurDataLoader._k_hop_subgraph"], ["\n", "", "result_list", "=", "[", "]", "\n", "for", "node_idx", "in", "node_idx_list", ":", "\n", "\n", "            ", "x", "=", "self", ".", "x", "[", "node_idx", "]", "\n", "deg_inv", "=", "self", ".", "deg_inv", "[", "node_idx", "]", "\n", "A_BN", "=", "self", ".", "adj_t", "[", "node_idx", "]", "\n", "\n", "if", "self", ".", "recovery_flag", "and", "self", ".", "train_flag", ":", "\n", "                ", "A_BB", "=", "self", ".", "adj_t", ".", "saint_subgraph", "(", "node_idx", ")", "[", "0", "]", ".", "coo", "(", ")", "\n", "", "else", ":", "\n", "                ", "A_BB", "=", "None", "\n", "\n", "", "if", "self", ".", "gnn_type", "!=", "'GCN'", "and", "self", ".", "train_flag", ":", "\n", "# start = time.time()", "\n", "                ", "A_NB", "=", "self", ".", "deg", "[", "node_idx", "]", ".", "view", "(", "-", "1", ",", "1", ")", "*", "A_BN", "*", "self", ".", "deg_inv", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "A_NB_v", "=", "A_NB", ".", "coo", "(", ")", "[", "2", "]", "\n", "# print(time.time()-start)", "\n", "\n", "", "else", ":", "\n", "                ", "A_NB_v", "=", "None", "\n", "", "A_BN", "=", "A_BN", ".", "coo", "(", ")", "\n", "\n", "result_list", ".", "append", "(", "(", "x", ",", "deg_inv", ",", "A_BN", ",", "A_BB", ",", "A_NB_v", ",", "node_idx", ")", ")", "\n", "\n", "", "return", "result_list", "\n", "\n", "# class OurDataLoader(torch.utils.data.DataLoader):", "\n", "#     def __init__(self, data, gnn_type='GCN', sampler_type='edge', walk_length=None, recovery_flag=True,", "\n", "#                  train_flag=True, **kwargs):", "\n", "#         self.sampler_type = sampler_type", "\n", "#         self.gnn_type = gnn_type", "\n", "#         self.recovery_flag = recovery_flag", "\n", "#         self.walk_length = walk_length", "\n", "#         self.train_flag = train_flag", "\n"]], "home.repos.pwc.inspect_result.devnkong_VQ-GNN.vq_gnn_v2.dataloader.OurDataLoader._k_hop_subgraph": [[98, 149], ["row.new_empty", "row.new_empty", "isinstance", "range", "torch.cat().unique", "row.new_full", "torch.cat", "torch.equal", "row.new_empty.fill_", "row.size", "torch.tensor().flatten", "row.new_full.to", "row.new_empty.fill_", "torch.index_select", "subsets.append", "row.new_full", "torch.arange", "torch.cat", "row.new_full.numel", "torch.cat.size", "torch.cat.size", "torch.tensor", "len"], "methods", ["None"], ["#", "\n", "#         self.x = data.x", "\n", "#         self.adj_t = data.adj_t", "\n", "#         self.deg = data.deg", "\n", "#         self.deg_inv = data.deg_inv", "\n", "#         self.N = self.x.shape[0]", "\n", "#", "\n", "#         super(OurDataLoader, self).__init__(range(self.N), collate_fn=self.__collate__, **kwargs)", "\n", "#", "\n", "#     def __collate__(self, idx):", "\n", "#         idx = torch.tensor(idx)", "\n", "#", "\n", "#         if self.sampler_type == 'node':", "\n", "#             node_idx = idx", "\n", "#", "\n", "#         elif self.sampler_type == 'edge':", "\n", "#             node_idx = self.adj_t.random_walk(idx, 1)", "\n", "#             node_idx = node_idx.view(-1).unique()", "\n", "#", "\n", "#         elif self.sampler_type == 'rw':", "\n", "#             node_idx = self.adj_t.random_walk(idx, self.walk_length)", "\n", "#             node_idx = node_idx.view(-1).unique()", "\n", "#", "\n", "#         else:", "\n", "#             raise ValueError('Sampler type not supported!')", "\n", "#", "\n", "#         x = self.x[node_idx]", "\n", "#         deg_inv = self.deg_inv[node_idx]", "\n", "#         A_BN = self.adj_t[node_idx]", "\n", "#", "\n", "#         if self.recovery_flag and self.train_flag:", "\n", "#             A_BB = self.adj_t.saint_subgraph(node_idx)[0].coo()", "\n", "#         else:", "\n", "#             A_BB = None", "\n", "#", "\n", "#         if self.gnn_type != 'GCN' and self.train_flag :", "\n", "#             A_NB = self.deg[node_idx].view(-1, 1) * A_BN * self.deg_inv.view(1, -1)", "\n", "#             A_NB_v = A_NB.coo()[2]", "\n", "#         else:", "\n", "#             A_NB_v = None", "\n", "#", "\n", "#         A_BN = A_BN.coo()", "\n", "#", "\n", "#         return x, deg_inv, A_BN, A_BB, A_NB_v, node_idx", "\n", "\n", "", "", "import", "pdb", "\n", "def", "mapper", "(", "batch", ",", "c", ",", "num_M", ",", "gnn_type", ",", "device", ")", ":", "\n", "    ", "deg_inv", ",", "A_BN", ",", "A_BB", ",", "A_NB_v", ",", "batch_idx", "=", "batch", "\n", "num_B", "=", "batch_idx", ".", "shape", "[", "0", "]", "\n", "\n", "rows", ",", "cols", ",", "values", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "A_BN_r", ",", "A_BN_c", ",", "A_BN_v", "=", "A_BN", "\n"]]}