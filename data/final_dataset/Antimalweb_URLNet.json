{"home.repos.pwc.inspect_result.Antimalweb_URLNet.None.TextCNN.TextCNN.__init__": [[4, 158], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.constant", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.name_scope", "enumerate", "tensorflow.concat", "tensorflow.reshape", "tensorflow.nn.dropout", "enumerate", "tensorflow.concat", "tensorflow.reshape", "tensorflow.nn.dropout", "tensorflow.name_scope", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.relu", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.relu", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.relu", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.xw_plus_b", "tensorflow.argmax", "tensorflow.name_scope", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.name_scope", "tensorflow.equal", "tensorflow.reduce_mean", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.nn.embedding_lookup", "tensorflow.multiply", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.reduce_sum", "tensorflow.add", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "len", "len", "tensorflow.name_scope", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.xw_plus_b", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.xw_plus_b", "tensorflow.concat", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.reduce_mean", "tensorflow.argmax", "tensorflow.cast", "tensorflow.random_uniform", "tensorflow.random_uniform", "tensorflow.random_uniform", "tensorflow.name_scope", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.nn.conv2d", "tensorflow.nn.relu", "tensorflow.nn.max_pool", "pooled_x.append", "tensorflow.name_scope", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.nn.conv2d", "tensorflow.nn.relu", "tensorflow.nn.max_pool", "pooled_char_x.append", "tensorflow.constant", "tensorflow.constant", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.matmul", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.matmul", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.matmul", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.constant", "tensorflow.truncated_normal", "tensorflow.nn.bias_add", "tensorflow.constant", "tensorflow.truncated_normal", "tensorflow.nn.bias_add", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "char_ngram_vocab_size", ",", "word_ngram_vocab_size", ",", "char_vocab_size", ",", "word_seq_len", ",", "char_seq_len", ",", "embedding_size", ",", "l2_reg_lambda", "=", "0", ",", "filter_sizes", "=", "[", "3", ",", "4", ",", "5", ",", "6", "]", ",", "mode", "=", "0", ")", ":", "\n", "        ", "if", "mode", "==", "4", "or", "mode", "==", "5", ":", "\n", "            ", "self", ".", "input_x_char", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "None", ",", "None", "]", ",", "name", "=", "\"input_x_char\"", ")", "\n", "self", ".", "input_x_char_pad_idx", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "None", ",", "None", ",", "embedding_size", "]", ",", "name", "=", "\"input_x_char_pad_idx\"", ")", "\n", "", "if", "mode", "==", "4", "or", "mode", "==", "5", "or", "mode", "==", "2", "or", "mode", "==", "3", ":", "\n", "            ", "self", ".", "input_x_word", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "None", "]", ",", "name", "=", "\"input_x_word\"", ")", "\n", "", "if", "mode", "==", "1", "or", "mode", "==", "3", "or", "mode", "==", "5", ":", "\n", "            ", "self", ".", "input_x_char_seq", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "None", "]", ",", "name", "=", "\"input_x_char_seq\"", ")", "\n", "\n", "", "self", ".", "input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "2", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "self", ".", "dropout_keep_prob", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "\"dropout_keep_prob\"", ")", "\n", "\n", "l2_loss", "=", "tf", ".", "constant", "(", "0.0", ")", "\n", "with", "tf", ".", "name_scope", "(", "\"embedding\"", ")", ":", "\n", "            ", "if", "mode", "==", "4", "or", "mode", "==", "5", ":", "\n", "                ", "self", ".", "char_w", "=", "tf", ".", "Variable", "(", "tf", ".", "random_uniform", "(", "[", "char_ngram_vocab_size", ",", "embedding_size", "]", ",", "-", "1.0", ",", "1.0", ")", ",", "name", "=", "\"char_emb_w\"", ")", "\n", "", "if", "mode", "==", "2", "or", "mode", "==", "3", "or", "mode", "==", "4", "or", "mode", "==", "5", ":", "\n", "                ", "self", ".", "word_w", "=", "tf", ".", "Variable", "(", "tf", ".", "random_uniform", "(", "[", "word_ngram_vocab_size", ",", "embedding_size", "]", ",", "-", "1.0", ",", "1.0", ")", ",", "name", "=", "\"word_emb_w\"", ")", "\n", "", "if", "mode", "==", "1", "or", "mode", "==", "3", "or", "mode", "==", "5", ":", "\n", "                ", "self", ".", "char_seq_w", "=", "tf", ".", "Variable", "(", "tf", ".", "random_uniform", "(", "[", "char_vocab_size", ",", "embedding_size", "]", ",", "-", "1.0", ",", "1.0", ")", ",", "name", "=", "\"char_seq_emb_w\"", ")", "\n", "\n", "", "if", "mode", "==", "4", "or", "mode", "==", "5", ":", "\n", "                ", "self", ".", "embedded_x_char", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "char_w", ",", "self", ".", "input_x_char", ")", "\n", "self", ".", "embedded_x_char", "=", "tf", ".", "multiply", "(", "self", ".", "embedded_x_char", ",", "self", ".", "input_x_char_pad_idx", ")", "\n", "", "if", "mode", "==", "2", "or", "mode", "==", "3", "or", "mode", "==", "4", "or", "mode", "==", "5", ":", "\n", "                ", "self", ".", "embedded_x_word", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "word_w", ",", "self", ".", "input_x_word", ")", "\n", "", "if", "mode", "==", "1", "or", "mode", "==", "3", "or", "mode", "==", "5", ":", "\n", "                ", "self", ".", "embedded_x_char_seq", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "char_seq_w", ",", "self", ".", "input_x_char_seq", ")", "\n", "\n", "", "if", "mode", "==", "4", "or", "mode", "==", "5", ":", "\n", "                ", "self", ".", "sum_ngram_x_char", "=", "tf", ".", "reduce_sum", "(", "self", ".", "embedded_x_char", ",", "2", ")", "\n", "self", ".", "sum_ngram_x", "=", "tf", ".", "add", "(", "self", ".", "sum_ngram_x_char", ",", "self", ".", "embedded_x_word", ")", "\n", "\n", "", "if", "mode", "==", "4", "or", "mode", "==", "5", ":", "\n", "                ", "self", ".", "sum_ngram_x_expanded", "=", "tf", ".", "expand_dims", "(", "self", ".", "sum_ngram_x", ",", "-", "1", ")", "\n", "", "if", "mode", "==", "2", "or", "mode", "==", "3", ":", "\n", "                ", "self", ".", "sum_ngram_x_expanded", "=", "tf", ".", "expand_dims", "(", "self", ".", "embedded_x_word", ",", "-", "1", ")", "\n", "", "if", "mode", "==", "1", "or", "mode", "==", "3", "or", "mode", "==", "5", ":", "\n", "                ", "self", ".", "char_x_expanded", "=", "tf", ".", "expand_dims", "(", "self", ".", "embedded_x_char_seq", ",", "-", "1", ")", "\n", "\n", "########################### WORD CONVOLUTION LAYER ################################", "\n", "", "", "if", "mode", "==", "2", "or", "mode", "==", "3", "or", "mode", "==", "4", "or", "mode", "==", "5", ":", "\n", "            ", "pooled_x", "=", "[", "]", "\n", "\n", "for", "i", ",", "filter_size", "in", "enumerate", "(", "filter_sizes", ")", ":", "\n", "                ", "with", "tf", ".", "name_scope", "(", "\"conv_maxpool_%s\"", "%", "filter_size", ")", ":", "\n", "                    ", "filter_shape", "=", "[", "filter_size", ",", "embedding_size", ",", "1", ",", "256", "]", "\n", "b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "256", "]", ")", ",", "name", "=", "\"b\"", ")", "\n", "w", "=", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "filter_shape", ",", "stddev", "=", "0.1", ")", ",", "name", "=", "\"w\"", ")", "\n", "conv", "=", "tf", ".", "nn", ".", "conv2d", "(", "\n", "self", ".", "sum_ngram_x_expanded", ",", "\n", "w", ",", "\n", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "padding", "=", "\"VALID\"", ",", "\n", "name", "=", "\"conv\"", ")", "\n", "h", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "nn", ".", "bias_add", "(", "conv", ",", "b", ")", ",", "name", "=", "\"relu\"", ")", "\n", "pooled", "=", "tf", ".", "nn", ".", "max_pool", "(", "\n", "h", ",", "\n", "ksize", "=", "[", "1", ",", "word_seq_len", "-", "filter_size", "+", "1", ",", "1", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "padding", "=", "\"VALID\"", ",", "\n", "name", "=", "\"pool\"", ")", "\n", "pooled_x", ".", "append", "(", "pooled", ")", "\n", "\n", "", "", "num_filters_total", "=", "256", "*", "len", "(", "filter_sizes", ")", "\n", "self", ".", "h_pool", "=", "tf", ".", "concat", "(", "pooled_x", ",", "3", ")", "\n", "self", ".", "x_flat", "=", "tf", ".", "reshape", "(", "self", ".", "h_pool", ",", "[", "-", "1", ",", "num_filters_total", "]", ",", "name", "=", "\"pooled_x\"", ")", "\n", "self", ".", "h_drop", "=", "tf", ".", "nn", ".", "dropout", "(", "self", ".", "x_flat", ",", "self", ".", "dropout_keep_prob", ",", "name", "=", "\"dropout_x\"", ")", "\n", "\n", "########################### CHAR CONVOLUTION LAYER ###########################", "\n", "", "if", "mode", "==", "1", "or", "mode", "==", "3", "or", "mode", "==", "5", ":", "\n", "            ", "pooled_char_x", "=", "[", "]", "\n", "for", "i", ",", "filter_size", "in", "enumerate", "(", "filter_sizes", ")", ":", "\n", "                ", "with", "tf", ".", "name_scope", "(", "\"char_conv_maxpool_%s\"", "%", "filter_size", ")", ":", "\n", "                    ", "filter_shape", "=", "[", "filter_size", ",", "embedding_size", ",", "1", ",", "256", "]", "\n", "b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "256", "]", ")", ",", "name", "=", "\"b\"", ")", "\n", "w", "=", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "filter_shape", ",", "stddev", "=", "0.1", ")", ",", "name", "=", "\"w\"", ")", "\n", "conv", "=", "tf", ".", "nn", ".", "conv2d", "(", "\n", "self", ".", "char_x_expanded", ",", "\n", "w", ",", "\n", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "padding", "=", "\"VALID\"", ",", "\n", "name", "=", "\"conv\"", ")", "\n", "h", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "nn", ".", "bias_add", "(", "conv", ",", "b", ")", ",", "name", "=", "\"relu\"", ")", "\n", "pooled", "=", "tf", ".", "nn", ".", "max_pool", "(", "\n", "h", ",", "\n", "ksize", "=", "[", "1", ",", "char_seq_len", "-", "filter_size", "+", "1", ",", "1", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "padding", "=", "\"VALID\"", ",", "\n", "name", "=", "\"pool\"", ")", "\n", "pooled_char_x", ".", "append", "(", "pooled", ")", "\n", "", "", "num_filters_total", "=", "256", "*", "len", "(", "filter_sizes", ")", "\n", "self", ".", "h_char_pool", "=", "tf", ".", "concat", "(", "pooled_char_x", ",", "3", ")", "\n", "self", ".", "char_x_flat", "=", "tf", ".", "reshape", "(", "self", ".", "h_char_pool", ",", "[", "-", "1", ",", "num_filters_total", "]", ",", "name", "=", "\"pooled_char_x\"", ")", "\n", "self", ".", "char_h_drop", "=", "tf", ".", "nn", ".", "dropout", "(", "self", ".", "char_x_flat", ",", "self", ".", "dropout_keep_prob", ",", "name", "=", "\"dropout_char_x\"", ")", "\n", "\n", "############################### CONCAT WORD AND CHAR BRANCH ############################", "\n", "", "if", "mode", "==", "3", "or", "mode", "==", "5", ":", "\n", "            ", "with", "tf", ".", "name_scope", "(", "\"word_char_concat\"", ")", ":", "\n", "                ", "ww", "=", "tf", ".", "get_variable", "(", "\"ww\"", ",", "shape", "=", "(", "num_filters_total", ",", "512", ")", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "bw", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "512", "]", ")", ",", "name", "=", "\"bw\"", ")", "\n", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "ww", ")", "\n", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "bw", ")", "\n", "word_output", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "self", ".", "h_drop", ",", "ww", ",", "bw", ")", "\n", "\n", "wc", "=", "tf", ".", "get_variable", "(", "\"wc\"", ",", "shape", "=", "(", "num_filters_total", ",", "512", ")", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "bc", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "512", "]", ")", ",", "name", "=", "\"bc\"", ")", "\n", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "wc", ")", "\n", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "bc", ")", "\n", "char_output", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "self", ".", "char_h_drop", ",", "wc", ",", "bc", ")", "\n", "\n", "self", ".", "conv_output", "=", "tf", ".", "concat", "(", "[", "word_output", ",", "char_output", "]", ",", "1", ")", "\n", "", "", "elif", "mode", "==", "2", "or", "mode", "==", "4", ":", "\n", "            ", "self", ".", "conv_output", "=", "self", ".", "h_drop", "\n", "", "elif", "mode", "==", "1", ":", "\n", "            ", "self", ".", "conv_output", "=", "self", ".", "char_h_drop", "\n", "\n", "################################ RELU AND FC ###################################", "\n", "", "with", "tf", ".", "name_scope", "(", "\"output\"", ")", ":", "\n", "            ", "w0", "=", "tf", ".", "get_variable", "(", "\"w0\"", ",", "shape", "=", "[", "1024", ",", "512", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "b0", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "512", "]", ")", ",", "name", "=", "\"b0\"", ")", "\n", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "w0", ")", "\n", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "b0", ")", "\n", "output0", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "matmul", "(", "self", ".", "conv_output", ",", "w0", ")", "+", "b0", ")", "\n", "\n", "w1", "=", "tf", ".", "get_variable", "(", "\"w1\"", ",", "shape", "=", "[", "512", ",", "256", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "b1", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "256", "]", ")", ",", "name", "=", "\"b1\"", ")", "\n", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "w1", ")", "\n", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "b1", ")", "\n", "output1", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "matmul", "(", "output0", ",", "w1", ")", "+", "b1", ")", "\n", "\n", "w2", "=", "tf", ".", "get_variable", "(", "\"w2\"", ",", "shape", "=", "[", "256", ",", "128", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "b2", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "128", "]", ")", ",", "name", "=", "\"b2\"", ")", "\n", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "w2", ")", "\n", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "b2", ")", "\n", "output2", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "matmul", "(", "output1", ",", "w2", ")", "+", "b2", ")", "\n", "\n", "w", "=", "tf", ".", "get_variable", "(", "\"w\"", ",", "shape", "=", "(", "128", ",", "2", ")", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "2", "]", ")", ",", "name", "=", "\"b\"", ")", "\n", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "w", ")", "\n", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "b", ")", "\n", "\n", "self", ".", "scores", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "output2", ",", "w", ",", "b", ",", "name", "=", "\"scores\"", ")", "\n", "self", ".", "predictions", "=", "tf", ".", "argmax", "(", "self", ".", "scores", ",", "1", ",", "name", "=", "\"predictions\"", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"loss\"", ")", ":", "\n", "            ", "losses", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "scores", ",", "labels", "=", "self", ".", "input_y", ")", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "losses", ")", "+", "l2_reg_lambda", "*", "l2_loss", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"accuracy\"", ")", ":", "\n", "            ", "correct_preds", "=", "tf", ".", "equal", "(", "self", ".", "predictions", ",", "tf", ".", "argmax", "(", "self", ".", "input_y", ",", "1", ")", ")", "\n", "self", ".", "accuracy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "cast", "(", "correct_preds", ",", "\"float\"", ")", ",", "name", "=", "\"accuracy\"", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Antimalweb_URLNet.None.train.train_dev_step": [[121, 162], ["sess.run", "sess.run"], "function", ["None"], ["def", "train_dev_step", "(", "x", ",", "y", ",", "emb_mode", ",", "is_train", "=", "True", ")", ":", "\n", "    ", "if", "is_train", ":", "\n", "        ", "p", "=", "0.5", "\n", "", "else", ":", "\n", "        ", "p", "=", "1.0", "\n", "", "if", "emb_mode", "==", "1", ":", "\n", "        ", "feed_dict", "=", "{", "\n", "cnn", ".", "input_x_char_seq", ":", "x", "[", "0", "]", ",", "\n", "cnn", ".", "input_y", ":", "y", ",", "\n", "cnn", ".", "dropout_keep_prob", ":", "p", "}", "\n", "", "elif", "emb_mode", "==", "2", ":", "\n", "        ", "feed_dict", "=", "{", "\n", "cnn", ".", "input_x_word", ":", "x", "[", "0", "]", ",", "\n", "cnn", ".", "input_y", ":", "y", ",", "\n", "cnn", ".", "dropout_keep_prob", ":", "p", "}", "\n", "", "elif", "emb_mode", "==", "3", ":", "\n", "        ", "feed_dict", "=", "{", "\n", "cnn", ".", "input_x_char_seq", ":", "x", "[", "0", "]", ",", "\n", "cnn", ".", "input_x_word", ":", "x", "[", "1", "]", ",", "\n", "cnn", ".", "input_y", ":", "y", ",", "\n", "cnn", ".", "dropout_keep_prob", ":", "p", "}", "\n", "", "elif", "emb_mode", "==", "4", ":", "\n", "        ", "feed_dict", "=", "{", "\n", "cnn", ".", "input_x_word", ":", "x", "[", "0", "]", ",", "\n", "cnn", ".", "input_x_char", ":", "x", "[", "1", "]", ",", "\n", "cnn", ".", "input_x_char_pad_idx", ":", "x", "[", "2", "]", ",", "\n", "cnn", ".", "input_y", ":", "y", ",", "\n", "cnn", ".", "dropout_keep_prob", ":", "p", "}", "\n", "", "elif", "emb_mode", "==", "5", ":", "\n", "        ", "feed_dict", "=", "{", "\n", "cnn", ".", "input_x_char_seq", ":", "x", "[", "0", "]", ",", "\n", "cnn", ".", "input_x_word", ":", "x", "[", "1", "]", ",", "\n", "cnn", ".", "input_x_char", ":", "x", "[", "2", "]", ",", "\n", "cnn", ".", "input_x_char_pad_idx", ":", "x", "[", "3", "]", ",", "\n", "cnn", ".", "input_y", ":", "y", ",", "\n", "cnn", ".", "dropout_keep_prob", ":", "p", "}", "\n", "", "if", "is_train", ":", "\n", "        ", "_", ",", "step", ",", "loss", ",", "acc", "=", "sess", ".", "run", "(", "[", "train_op", ",", "global_step", ",", "cnn", ".", "loss", ",", "cnn", ".", "accuracy", "]", ",", "feed_dict", ")", "\n", "", "else", ":", "\n", "        ", "step", ",", "loss", ",", "acc", "=", "sess", ".", "run", "(", "[", "global_step", ",", "cnn", ".", "loss", ",", "cnn", ".", "accuracy", "]", ",", "feed_dict", ")", "\n", "", "return", "step", ",", "loss", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.Antimalweb_URLNet.None.train.make_batches": [[163, 184], ["utils.batch_iter", "list", "int", "int", "zip", "list", "zip", "list", "len", "len", "zip", "list", "zip", "list", "zip"], "function", ["home.repos.pwc.inspect_result.Antimalweb_URLNet.None.utils.batch_iter"], ["", "def", "make_batches", "(", "x_train_char_seq", ",", "x_train_word", ",", "x_train_char", ",", "y_train", ",", "batch_size", ",", "nb_epochs", ",", "shuffle", "=", "False", ")", ":", "\n", "    ", "if", "FLAGS", "[", "\"model.emb_mode\"", "]", "==", "1", ":", "\n", "        ", "batch_data", "=", "list", "(", "zip", "(", "x_train_char_seq", ",", "y_train", ")", ")", "\n", "", "elif", "FLAGS", "[", "\"model.emb_mode\"", "]", "==", "2", ":", "\n", "        ", "batch_data", "=", "list", "(", "zip", "(", "x_train_word", ",", "y_train", ")", ")", "\n", "", "elif", "FLAGS", "[", "\"model.emb_mode\"", "]", "==", "3", ":", "\n", "        ", "batch_data", "=", "list", "(", "zip", "(", "x_train_char_seq", ",", "x_train_word", ",", "y_train", ")", ")", "\n", "", "elif", "FLAGS", "[", "\"model.emb_mode\"", "]", "==", "4", ":", "\n", "         ", "batch_data", "=", "list", "(", "zip", "(", "x_train_char", ",", "x_train_word", ",", "y_train", ")", ")", "\n", "", "elif", "FLAGS", "[", "\"model.emb_mode\"", "]", "==", "5", ":", "\n", "        ", "batch_data", "=", "list", "(", "zip", "(", "x_train_char", ",", "x_train_word", ",", "x_train_char_seq", ",", "y_train", ")", ")", "\n", "", "batches", "=", "batch_iter", "(", "batch_data", ",", "batch_size", ",", "nb_epochs", ",", "shuffle", ")", "\n", "\n", "if", "nb_epochs", ">", "1", ":", "\n", "        ", "nb_batches_per_epoch", "=", "int", "(", "len", "(", "batch_data", ")", "/", "batch_size", ")", "\n", "if", "len", "(", "batch_data", ")", "%", "batch_size", "!=", "0", ":", "\n", "            ", "nb_batches_per_epoch", "+=", "1", "\n", "", "nb_batches", "=", "int", "(", "nb_batches_per_epoch", "*", "nb_epochs", ")", "\n", "return", "batches", ",", "nb_batches_per_epoch", ",", "nb_batches", "\n", "", "else", ":", "\n", "        ", "return", "batches", "\n", "\n"]], "home.repos.pwc.inspect_result.Antimalweb_URLNet.None.train.prep_batches": [[185, 208], ["zip", "utils.pad_seq_in_word", "x_batch.append", "utils.pad_seq_in_word", "x_batch.append", "utils.pad_seq", "x_batch.extend", "zip", "zip", "zip", "zip"], "function", ["home.repos.pwc.inspect_result.Antimalweb_URLNet.None.utils.pad_seq_in_word", "home.repos.pwc.inspect_result.Antimalweb_URLNet.None.utils.pad_seq_in_word", "home.repos.pwc.inspect_result.Antimalweb_URLNet.None.utils.pad_seq"], ["", "", "def", "prep_batches", "(", "batch", ")", ":", "\n", "    ", "if", "FLAGS", "[", "\"model.emb_mode\"", "]", "==", "1", ":", "\n", "        ", "x_char_seq", ",", "y_batch", "=", "zip", "(", "*", "batch", ")", "\n", "", "elif", "FLAGS", "[", "\"model.emb_mode\"", "]", "==", "2", ":", "\n", "        ", "x_word", ",", "y_batch", "=", "zip", "(", "*", "batch", ")", "\n", "", "elif", "FLAGS", "[", "\"model.emb_mode\"", "]", "==", "3", ":", "\n", "        ", "x_char_seq", ",", "x_word", ",", "y_batch", "=", "zip", "(", "*", "batch", ")", "\n", "", "elif", "FLAGS", "[", "\"model.emb_mode\"", "]", "==", "4", ":", "\n", "        ", "x_char", ",", "x_word", ",", "y_batch", "=", "zip", "(", "*", "batch", ")", "\n", "", "elif", "FLAGS", "[", "\"model.emb_mode\"", "]", "==", "5", ":", "\n", "        ", "x_char", ",", "x_word", ",", "x_char_seq", ",", "y_batch", "=", "zip", "(", "*", "batch", ")", "\n", "\n", "", "x_batch", "=", "[", "]", "\n", "if", "FLAGS", "[", "\"model.emb_mode\"", "]", "in", "[", "1", ",", "3", ",", "5", "]", ":", "\n", "        ", "x_char_seq", "=", "pad_seq_in_word", "(", "x_char_seq", ",", "FLAGS", "[", "\"data.max_len_chars\"", "]", ")", "\n", "x_batch", ".", "append", "(", "x_char_seq", ")", "\n", "", "if", "FLAGS", "[", "\"model.emb_mode\"", "]", "in", "[", "2", ",", "3", ",", "4", ",", "5", "]", ":", "\n", "        ", "x_word", "=", "pad_seq_in_word", "(", "x_word", ",", "FLAGS", "[", "\"data.max_len_words\"", "]", ")", "\n", "x_batch", ".", "append", "(", "x_word", ")", "\n", "", "if", "FLAGS", "[", "\"model.emb_mode\"", "]", "in", "[", "4", ",", "5", "]", ":", "\n", "        ", "x_char", ",", "x_char_pad_idx", "=", "pad_seq", "(", "x_char", ",", "FLAGS", "[", "\"data.max_len_words\"", "]", ",", "FLAGS", "[", "\"data.max_len_subwords\"", "]", ",", "FLAGS", "[", "\"model.emb_dim\"", "]", ")", "\n", "x_batch", ".", "extend", "(", "[", "x_char", ",", "x_char_pad_idx", "]", ")", "\n", "", "return", "x_batch", ",", "y_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.Antimalweb_URLNet.None.test.test_step": [[76, 106], ["sess.run"], "function", ["None"], ["def", "test_step", "(", "x", ",", "emb_mode", ")", ":", "\n", "    ", "p", "=", "1.0", "\n", "if", "emb_mode", "==", "1", ":", "\n", "        ", "feed_dict", "=", "{", "\n", "input_x_char_seq", ":", "x", "[", "0", "]", ",", "\n", "dropout_keep_prob", ":", "p", "}", "\n", "", "elif", "emb_mode", "==", "2", ":", "\n", "        ", "feed_dict", "=", "{", "\n", "input_x_word", ":", "x", "[", "0", "]", ",", "\n", "dropout_keep_prob", ":", "p", "}", "\n", "", "elif", "emb_mode", "==", "3", ":", "\n", "        ", "feed_dict", "=", "{", "\n", "input_x_char_seq", ":", "x", "[", "0", "]", ",", "\n", "input_x_word", ":", "x", "[", "1", "]", ",", "\n", "dropout_keep_prob", ":", "p", "}", "\n", "", "elif", "emb_mode", "==", "4", ":", "\n", "        ", "feed_dict", "=", "{", "\n", "input_x_word", ":", "x", "[", "0", "]", ",", "\n", "input_x_char", ":", "x", "[", "1", "]", ",", "\n", "input_x_char_pad_idx", ":", "x", "[", "2", "]", ",", "\n", "dropout_keep_prob", ":", "p", "}", "\n", "", "elif", "emb_mode", "==", "5", ":", "\n", "        ", "feed_dict", "=", "{", "\n", "input_x_char_seq", ":", "x", "[", "0", "]", ",", "\n", "input_x_word", ":", "x", "[", "1", "]", ",", "\n", "input_x_char", ":", "x", "[", "2", "]", ",", "\n", "input_x_char_pad_idx", ":", "x", "[", "3", "]", ",", "\n", "dropout_keep_prob", ":", "p", "}", "\n", "", "preds", ",", "s", "=", "sess", ".", "run", "(", "[", "predictions", ",", "scores", "]", ",", "feed_dict", ")", "\n", "return", "preds", ",", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.Antimalweb_URLNet.None.utils.read_data": [[10, 24], ["open", "file.readlines", "line.split", "int", "urls.append", "labels.append", "labels.append"], "function", ["None"], ["def", "read_data", "(", "file_dir", ")", ":", "\n", "    ", "with", "open", "(", "file_dir", ")", "as", "file", ":", "\n", "        ", "urls", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "for", "line", "in", "file", ".", "readlines", "(", ")", ":", "\n", "            ", "items", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "label", "=", "int", "(", "items", "[", "0", "]", ")", "\n", "if", "label", "==", "1", ":", "\n", "                ", "labels", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "                ", "labels", ".", "append", "(", "0", ")", "\n", "", "url", "=", "items", "[", "1", "]", "[", ":", "-", "1", "]", "\n", "urls", ".", "append", "(", "url", ")", "\n", "", "", "return", "urls", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.Antimalweb_URLNet.None.utils.split_url": [[25, 100], ["line.startswith", "line.startswith", "line.startswith", "line.startswith", "line.find", "path_argument.split", "last_pathtoken.find", "pathtoken.rfind", "filename.rfind", "len", "len", "len", "len"], "function", ["None"], ["", "def", "split_url", "(", "line", ",", "part", ")", ":", "\n", "    ", "if", "line", ".", "startswith", "(", "\"http://\"", ")", ":", "\n", "        ", "line", "=", "line", "[", "7", ":", "]", "\n", "", "if", "line", ".", "startswith", "(", "\"https://\"", ")", ":", "\n", "        ", "line", "=", "line", "[", "8", ":", "]", "\n", "", "if", "line", ".", "startswith", "(", "\"ftp://\"", ")", ":", "\n", "        ", "line", "=", "line", "[", "6", ":", "]", "\n", "", "if", "line", ".", "startswith", "(", "\"www.\"", ")", ":", "\n", "        ", "line", "=", "line", "[", "4", ":", "]", "\n", "", "slash_pos", "=", "line", ".", "find", "(", "'/'", ")", "\n", "if", "slash_pos", ">", "0", "and", "slash_pos", "<", "len", "(", "line", ")", "-", "1", ":", "# line = \"fsdfsdf/sdfsdfsd\"", "\n", "        ", "primarydomain", "=", "line", "[", ":", "slash_pos", "]", "\n", "path_argument", "=", "line", "[", "slash_pos", "+", "1", ":", "]", "\n", "path_argument_tokens", "=", "path_argument", ".", "split", "(", "'/'", ")", "\n", "pathtoken", "=", "\"/\"", ".", "join", "(", "path_argument_tokens", "[", ":", "-", "1", "]", ")", "\n", "last_pathtoken", "=", "path_argument_tokens", "[", "-", "1", "]", "\n", "if", "len", "(", "path_argument_tokens", ")", ">", "2", "and", "last_pathtoken", "==", "''", ":", "\n", "            ", "pathtoken", "=", "\"/\"", ".", "join", "(", "path_argument_tokens", "[", ":", "-", "2", "]", ")", "\n", "last_pathtoken", "=", "path_argument_tokens", "[", "-", "2", "]", "\n", "", "question_pos", "=", "last_pathtoken", ".", "find", "(", "'?'", ")", "\n", "if", "question_pos", "!=", "-", "1", ":", "\n", "            ", "argument", "=", "last_pathtoken", "[", "question_pos", "+", "1", ":", "]", "\n", "pathtoken", "=", "pathtoken", "+", "\"/\"", "+", "last_pathtoken", "[", ":", "question_pos", "]", "\n", "", "else", ":", "\n", "            ", "argument", "=", "\"\"", "\n", "pathtoken", "=", "pathtoken", "+", "\"/\"", "+", "last_pathtoken", "\n", "", "last_slash_pos", "=", "pathtoken", ".", "rfind", "(", "'/'", ")", "\n", "sub_dir", "=", "pathtoken", "[", ":", "last_slash_pos", "]", "\n", "filename", "=", "pathtoken", "[", "last_slash_pos", "+", "1", ":", "]", "\n", "file_last_dot_pos", "=", "filename", ".", "rfind", "(", "'.'", ")", "\n", "if", "file_last_dot_pos", "!=", "-", "1", ":", "\n", "            ", "file_extension", "=", "filename", "[", "file_last_dot_pos", "+", "1", ":", "]", "\n", "filename", "=", "filename", "[", ":", "file_last_dot_pos", "]", "\n", "", "else", ":", "\n", "            ", "file_extension", "=", "\"\"", "\n", "", "", "elif", "slash_pos", "==", "0", ":", "# line = \"/fsdfsdfsdfsdfsd\"", "\n", "        ", "primarydomain", "=", "line", "[", "1", ":", "]", "\n", "pathtoken", "=", "\"\"", "\n", "argument", "=", "\"\"", "\n", "sub_dir", "=", "\"\"", "\n", "filename", "=", "\"\"", "\n", "file_extension", "=", "\"\"", "\n", "", "elif", "slash_pos", "==", "len", "(", "line", ")", "-", "1", ":", "# line = \"fsdfsdfsdfsdfsd/\"", "\n", "        ", "primarydomain", "=", "line", "[", ":", "-", "1", "]", "\n", "pathtoken", "=", "\"\"", "\n", "argument", "=", "\"\"", "\n", "sub_dir", "=", "\"\"", "\n", "filename", "=", "\"\"", "\n", "file_extension", "=", "\"\"", "\n", "", "else", ":", "# line = \"fsdfsdfsdfsdfsd\"", "\n", "        ", "primarydomain", "=", "line", "\n", "pathtoken", "=", "\"\"", "\n", "argument", "=", "\"\"", "\n", "sub_dir", "=", "\"\"", "\n", "filename", "=", "\"\"", "\n", "file_extension", "=", "\"\"", "\n", "", "if", "part", "==", "'pd'", ":", "\n", "        ", "return", "primarydomain", "\n", "", "elif", "part", "==", "'path'", ":", "\n", "        ", "return", "pathtoken", "\n", "", "elif", "part", "==", "'argument'", ":", "\n", "        ", "return", "argument", "\n", "", "elif", "part", "==", "'sub_dir'", ":", "\n", "        ", "return", "sub_dir", "\n", "", "elif", "part", "==", "'filename'", ":", "\n", "        ", "return", "filename", "\n", "", "elif", "part", "==", "'fe'", ":", "\n", "        ", "return", "file_extension", "\n", "", "elif", "part", "==", "'others'", ":", "\n", "        ", "if", "len", "(", "argument", ")", ">", "0", ":", "\n", "            ", "return", "pathtoken", "+", "'?'", "+", "argument", "\n", "", "else", ":", "\n", "            ", "return", "pathtoken", "\n", "", "", "else", ":", "\n", "        ", "return", "primarydomain", ",", "pathtoken", ",", "argument", ",", "sub_dir", ",", "filename", ",", "file_extension", "\n", "\n"]], "home.repos.pwc.inspect_result.Antimalweb_URLNet.None.utils.get_word_vocab": [[101, 110], ["tensorflow.contrib.learn.preprocessing.VocabularyProcessor", "time.time", "numpy.array", "print", "dict", "print", "list", "zip", "learn.preprocessing.VocabularyProcessor.fit_transform", "vocab_dict.values", "vocab_dict.keys", "len", "time.time"], "function", ["None"], ["", "", "def", "get_word_vocab", "(", "urls", ",", "max_length_words", ",", "min_word_freq", "=", "0", ")", ":", "\n", "    ", "vocab_processor", "=", "learn", ".", "preprocessing", ".", "VocabularyProcessor", "(", "max_length_words", ",", "min_frequency", "=", "min_word_freq", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "x", "=", "np", ".", "array", "(", "list", "(", "vocab_processor", ".", "fit_transform", "(", "urls", ")", ")", ")", "\n", "print", "(", "\"Finished build vocabulary and mapping to x in {}\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "vocab_dict", "=", "vocab_processor", ".", "vocabulary_", ".", "_mapping", "\n", "reverse_dict", "=", "dict", "(", "zip", "(", "vocab_dict", ".", "values", "(", ")", ",", "vocab_dict", ".", "keys", "(", ")", ")", ")", "\n", "print", "(", "\"Size of word vocabulary: {}\"", ".", "format", "(", "len", "(", "reverse_dict", ")", ")", ")", "\n", "return", "x", ",", "reverse_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Antimalweb_URLNet.None.utils.get_words": [[111, 143], ["processed_x.append", "range", "range", "processed_x.append", "words.append", "len", "words.extend", "raw_url.index", "list", "words.extend", "words.append", "list", "words.extend", "len", "list", "len"], "function", ["None"], ["", "def", "get_words", "(", "x", ",", "reverse_dict", ",", "delimit_mode", ",", "urls", "=", "None", ")", ":", "\n", "    ", "processed_x", "=", "[", "]", "\n", "if", "delimit_mode", "==", "0", ":", "\n", "        ", "for", "url", "in", "x", ":", "\n", "            ", "words", "=", "[", "]", "\n", "for", "word_id", "in", "url", ":", "\n", "                ", "if", "word_id", "!=", "0", ":", "\n", "                    ", "words", ".", "append", "(", "reverse_dict", "[", "word_id", "]", ")", "\n", "", "else", ":", "\n", "                    ", "break", "\n", "", "", "processed_x", ".", "append", "(", "words", ")", "\n", "", "", "elif", "delimit_mode", "==", "1", ":", "\n", "        ", "for", "i", "in", "range", "(", "x", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "word_url", "=", "x", "[", "i", "]", "\n", "raw_url", "=", "urls", "[", "i", "]", "\n", "words", "=", "[", "]", "\n", "for", "w", "in", "range", "(", "len", "(", "word_url", ")", ")", ":", "\n", "                ", "word_id", "=", "word_url", "[", "w", "]", "\n", "if", "word_id", "==", "0", ":", "\n", "                    ", "words", ".", "extend", "(", "list", "(", "raw_url", ")", ")", "\n", "break", "\n", "", "else", ":", "\n", "                    ", "word", "=", "reverse_dict", "[", "word_id", "]", "\n", "idx", "=", "raw_url", ".", "index", "(", "word", ")", "\n", "special_chars", "=", "list", "(", "raw_url", "[", "0", ":", "idx", "]", ")", "\n", "words", ".", "extend", "(", "special_chars", ")", "\n", "words", ".", "append", "(", "word", ")", "\n", "raw_url", "=", "raw_url", "[", "idx", "+", "len", "(", "word", ")", ":", "]", "\n", "if", "w", "==", "len", "(", "word_url", ")", "-", "1", ":", "\n", "                        ", "words", ".", "extend", "(", "list", "(", "raw_url", ")", ")", "\n", "", "", "", "processed_x", ".", "append", "(", "words", ")", "\n", "", "", "return", "processed_x", "\n", "\n"]], "home.repos.pwc.inspect_result.Antimalweb_URLNet.None.utils.get_char_ngrams": [[144, 154], ["list", "len", "ngrams.append"], "function", ["None"], ["", "def", "get_char_ngrams", "(", "ngram_len", ",", "word", ")", ":", "\n", "    ", "word", "=", "\"<\"", "+", "word", "+", "\">\"", "\n", "chars", "=", "list", "(", "word", ")", "\n", "begin_idx", "=", "0", "\n", "ngrams", "=", "[", "]", "\n", "while", "(", "begin_idx", "+", "ngram_len", ")", "<=", "len", "(", "chars", ")", ":", "\n", "        ", "end_idx", "=", "begin_idx", "+", "ngram_len", "\n", "ngrams", ".", "append", "(", "\"\"", ".", "join", "(", "chars", "[", "begin_idx", ":", "end_idx", "]", ")", ")", "\n", "begin_idx", "+=", "1", "\n", "", "return", "ngrams", "\n", "\n"]], "home.repos.pwc.inspect_result.Antimalweb_URLNet.None.utils.char_id_x": [[155, 170], ["list", "min", "range", "chared_id_x.append", "len", "url_in_char_id.append"], "function", ["None"], ["", "def", "char_id_x", "(", "urls", ",", "char_dict", ",", "max_len_chars", ")", ":", "\n", "    ", "chared_id_x", "=", "[", "]", "\n", "for", "url", "in", "urls", ":", "\n", "        ", "url", "=", "list", "(", "url", ")", "\n", "url_in_char_id", "=", "[", "]", "\n", "l", "=", "min", "(", "len", "(", "url", ")", ",", "max_len_chars", ")", "\n", "for", "i", "in", "range", "(", "l", ")", ":", "\n", "            ", "c", "=", "url", "[", "i", "]", "\n", "try", ":", "\n", "                ", "c_id", "=", "char_dict", "[", "c", "]", "\n", "", "except", "KeyError", ":", "\n", "                ", "c_id", "=", "0", "\n", "", "url_in_char_id", ".", "append", "(", "c_id", ")", "\n", "", "chared_id_x", ".", "append", "(", "url_in_char_id", ")", "\n", "", "return", "chared_id_x", "\n", "\n"]], "home.repos.pwc.inspect_result.Antimalweb_URLNet.None.utils.ngram_id_x": [[171, 226], ["set", "set", "list", "dict", "range", "print", "list", "dict", "range", "print", "print", "ngramed_x.append", "worded_x.append", "len", "len", "ngramed_id_x.append", "worded_id_x.append", "print", "utils.get_char_ngrams", "len", "len", "url_in_ngrams.append", "list.update", "url_in_ngrams.append", "list.add", "url_in_words.append", "list.update", "url_in_ngrams.append", "list.add", "url_in_words.append", "len", "len", "utils.is_in"], "function", ["home.repos.pwc.inspect_result.Antimalweb_URLNet.None.utils.get_char_ngrams", "home.repos.pwc.inspect_result.Antimalweb_URLNet.None.utils.is_in"], ["", "def", "ngram_id_x", "(", "word_x", ",", "max_len_subwords", ",", "high_freq_words", "=", "None", ")", ":", "\n", "    ", "char_ngram_len", "=", "1", "\n", "all_ngrams", "=", "set", "(", ")", "\n", "ngramed_x", "=", "[", "]", "\n", "all_words", "=", "set", "(", ")", "\n", "worded_x", "=", "[", "]", "\n", "counter", "=", "0", "\n", "for", "url", "in", "word_x", ":", "\n", "        ", "if", "counter", "%", "100000", "==", "0", ":", "\n", "            ", "print", "(", "\"Processing #url {}\"", ".", "format", "(", "counter", ")", ")", "\n", "", "counter", "+=", "1", "\n", "url_in_ngrams", "=", "[", "]", "\n", "url_in_words", "=", "[", "]", "\n", "words", "=", "url", "\n", "for", "word", "in", "words", ":", "\n", "            ", "ngrams", "=", "get_char_ngrams", "(", "char_ngram_len", ",", "word", ")", "\n", "if", "(", "len", "(", "ngrams", ")", ">", "max_len_subwords", ")", "or", "(", "high_freq_words", "is", "not", "None", "and", "len", "(", "word", ")", ">", "1", "and", "not", "is_in", "(", "high_freq_words", ",", "word", ")", ")", ":", "\n", "                ", "all_ngrams", ".", "update", "(", "ngrams", "[", ":", "max_len_subwords", "]", ")", "\n", "url_in_ngrams", ".", "append", "(", "ngrams", "[", ":", "max_len_subwords", "]", ")", "\n", "all_words", ".", "add", "(", "\"<UNKNOWN>\"", ")", "\n", "url_in_words", ".", "append", "(", "\"<UNKNOWN>\"", ")", "\n", "", "else", ":", "\n", "                ", "all_ngrams", ".", "update", "(", "ngrams", ")", "\n", "url_in_ngrams", ".", "append", "(", "ngrams", ")", "\n", "all_words", ".", "add", "(", "word", ")", "\n", "url_in_words", ".", "append", "(", "word", ")", "\n", "", "", "ngramed_x", ".", "append", "(", "url_in_ngrams", ")", "\n", "worded_x", ".", "append", "(", "url_in_words", ")", "\n", "\n", "", "all_ngrams", "=", "list", "(", "all_ngrams", ")", "\n", "ngrams_dict", "=", "dict", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "all_ngrams", ")", ")", ":", "\n", "        ", "ngrams_dict", "[", "all_ngrams", "[", "i", "]", "]", "=", "i", "+", "1", "# ngram id=0 is for padding ngram   ", "\n", "", "print", "(", "\"Size of ngram vocabulary: {}\"", ".", "format", "(", "len", "(", "ngrams_dict", ")", ")", ")", "\n", "all_words", "=", "list", "(", "all_words", ")", "\n", "words_dict", "=", "dict", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "all_words", ")", ")", ":", "\n", "        ", "words_dict", "[", "all_words", "[", "i", "]", "]", "=", "i", "+", "1", "#word id=0 for padding word ", "\n", "", "print", "(", "\"Size of word vocabulary: {}\"", ".", "format", "(", "len", "(", "words_dict", ")", ")", ")", "\n", "print", "(", "\"Index of <UNKNOWN> word: {}\"", ".", "format", "(", "words_dict", "[", "\"<UNKNOWN>\"", "]", ")", ")", "\n", "\n", "ngramed_id_x", "=", "[", "]", "\n", "for", "ngramed_url", "in", "ngramed_x", ":", "\n", "        ", "url_in_ngrams", "=", "[", "]", "\n", "for", "ngramed_word", "in", "ngramed_url", ":", "\n", "            ", "ngram_ids", "=", "[", "ngrams_dict", "[", "x", "]", "for", "x", "in", "ngramed_word", "]", "\n", "url_in_ngrams", ".", "append", "(", "ngram_ids", ")", "\n", "", "ngramed_id_x", ".", "append", "(", "url_in_ngrams", ")", "\n", "", "worded_id_x", "=", "[", "]", "\n", "for", "worded_url", "in", "worded_x", ":", "\n", "        ", "word_ids", "=", "[", "words_dict", "[", "x", "]", "for", "x", "in", "worded_url", "]", "\n", "worded_id_x", ".", "append", "(", "word_ids", ")", "\n", "\n", "", "return", "ngramed_id_x", ",", "ngrams_dict", ",", "worded_id_x", ",", "words_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Antimalweb_URLNet.None.utils.ngram_id_x_from_dict": [[227, 262], ["print", "sorted", "ngramed_id_x.append", "worded_id_x.append", "list", "print", "utils.get_char_ngrams", "url_in_ngrams.append", "utils.is_in", "url_in_words.append", "word_dict.keys", "len", "ngrams_id.append", "ngrams_id.append"], "function", ["home.repos.pwc.inspect_result.Antimalweb_URLNet.None.utils.get_char_ngrams", "home.repos.pwc.inspect_result.Antimalweb_URLNet.None.utils.is_in"], ["", "def", "ngram_id_x_from_dict", "(", "word_x", ",", "max_len_subwords", ",", "ngram_dict", ",", "word_dict", "=", "None", ")", ":", "\n", "    ", "char_ngram_len", "=", "1", "\n", "print", "(", "\"Index of <UNKNOWN> word: {}\"", ".", "format", "(", "word_dict", "[", "\"<UNKNOWN>\"", "]", ")", ")", "\n", "ngramed_id_x", "=", "[", "]", "\n", "worded_id_x", "=", "[", "]", "\n", "counter", "=", "0", "\n", "if", "word_dict", ":", "\n", "        ", "word_vocab", "=", "sorted", "(", "list", "(", "word_dict", ".", "keys", "(", ")", ")", ")", "\n", "", "for", "url", "in", "word_x", ":", "\n", "        ", "if", "counter", "%", "100000", "==", "0", ":", "\n", "            ", "print", "(", "\"Processing url #{}\"", ".", "format", "(", "counter", ")", ")", "\n", "", "counter", "+=", "1", "\n", "url_in_ngrams", "=", "[", "]", "\n", "url_in_words", "=", "[", "]", "\n", "words", "=", "url", "\n", "for", "word", "in", "words", ":", "\n", "            ", "ngrams", "=", "get_char_ngrams", "(", "char_ngram_len", ",", "word", ")", "\n", "if", "len", "(", "ngrams", ")", ">", "max_len_subwords", ":", "\n", "                ", "word", "=", "\"<UNKNOWN>\"", "\n", "", "ngrams_id", "=", "[", "]", "\n", "for", "ngram", "in", "ngrams", ":", "\n", "                ", "if", "ngram", "in", "ngram_dict", ":", "\n", "                    ", "ngrams_id", ".", "append", "(", "ngram_dict", "[", "ngram", "]", ")", "\n", "", "else", ":", "\n", "                    ", "ngrams_id", ".", "append", "(", "0", ")", "\n", "", "", "url_in_ngrams", ".", "append", "(", "ngrams_id", ")", "\n", "if", "is_in", "(", "word_vocab", ",", "word", ")", ":", "\n", "                ", "word_id", "=", "word_dict", "[", "word", "]", "\n", "", "else", ":", "\n", "                ", "word_id", "=", "word_dict", "[", "\"<UNKNOWN>\"", "]", "\n", "", "url_in_words", ".", "append", "(", "word_id", ")", "\n", "", "ngramed_id_x", ".", "append", "(", "url_in_ngrams", ")", "\n", "worded_id_x", ".", "append", "(", "url_in_words", ")", "\n", "\n", "", "return", "ngramed_id_x", ",", "worded_id_x", "\n", "\n"]], "home.repos.pwc.inspect_result.Antimalweb_URLNet.None.utils.bisect_search": [[263, 268], ["bisect.bisect_left", "len"], "function", ["None"], ["", "def", "bisect_search", "(", "a", ",", "x", ")", ":", "\n", "    ", "i", "=", "bisect_left", "(", "a", ",", "x", ")", "\n", "if", "i", "!=", "len", "(", "a", ")", "and", "a", "[", "i", "]", "==", "x", ":", "\n", "        ", "return", "i", "\n", "", "raise", "ValueError", "\n", "\n"]], "home.repos.pwc.inspect_result.Antimalweb_URLNet.None.utils.is_in": [[269, 275], ["bisect.bisect_left", "len"], "function", ["None"], ["", "def", "is_in", "(", "a", ",", "x", ")", ":", "\n", "    ", "i", "=", "bisect_left", "(", "a", ",", "x", ")", "\n", "if", "i", "!=", "len", "(", "a", ")", "and", "a", "[", "i", "]", "==", "x", ":", "\n", "        ", "return", "True", "\n", "", "else", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Antimalweb_URLNet.None.utils.prep_train_test": [[276, 315], ["numpy.random.seed", "numpy.random.permutation", "numpy.random.seed", "numpy.random.permutation", "numpy.array", "numpy.array", "tflearn.data_utils.to_categorical", "tflearn.data_utils.to_categorical", "numpy.random.seed", "numpy.random.permutation", "numpy.random.seed", "numpy.random.permutation", "print", "print", "print", "print", "numpy.arange", "int", "numpy.arange", "int", "numpy.arange", "numpy.arange", "len", "len", "list", "list", "len", "len", "list", "list", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "float", "float", "len", "len"], "function", ["None"], ["", "", "def", "prep_train_test", "(", "pos_x", ",", "neg_x", ",", "dev_pct", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "10", ")", "\n", "shuffle_indices", "=", "np", ".", "random", ".", "permutation", "(", "np", ".", "arange", "(", "len", "(", "pos_x", ")", ")", ")", "\n", "pos_x_shuffled", "=", "pos_x", "[", "shuffle_indices", "]", "\n", "dev_idx", "=", "-", "1", "*", "int", "(", "dev_pct", "*", "float", "(", "len", "(", "pos_x", ")", ")", ")", "\n", "pos_train", "=", "pos_x_shuffled", "[", ":", "dev_idx", "]", "\n", "pos_test", "=", "pos_x_shuffled", "[", "dev_idx", ":", "]", "\n", "\n", "np", ".", "random", ".", "seed", "(", "10", ")", "\n", "shuffle_indices", "=", "np", ".", "random", ".", "permutation", "(", "np", ".", "arange", "(", "len", "(", "neg_x", ")", ")", ")", "\n", "neg_x_shuffled", "=", "neg_x", "[", "shuffle_indices", "]", "\n", "dev_idx", "=", "-", "1", "*", "int", "(", "dev_pct", "*", "float", "(", "len", "(", "neg_x", ")", ")", ")", "\n", "neg_train", "=", "neg_x_shuffled", "[", ":", "dev_idx", "]", "\n", "neg_test", "=", "neg_x_shuffled", "[", "dev_idx", ":", "]", "\n", "\n", "x_train", "=", "np", ".", "array", "(", "list", "(", "pos_train", ")", "+", "list", "(", "neg_train", ")", ")", "\n", "y_train", "=", "len", "(", "pos_train", ")", "*", "[", "1", "]", "+", "len", "(", "neg_train", ")", "*", "[", "0", "]", "\n", "x_test", "=", "np", ".", "array", "(", "list", "(", "pos_test", ")", "+", "list", "(", "neg_test", ")", ")", "\n", "y_test", "=", "len", "(", "pos_test", ")", "*", "[", "1", "]", "+", "len", "(", "neg_test", ")", "*", "[", "0", "]", "\n", "\n", "y_train", "=", "to_categorical", "(", "y_train", ",", "nb_classes", "=", "2", ")", "\n", "y_test", "=", "to_categorical", "(", "y_test", ",", "nb_classes", "=", "2", ")", "\n", "\n", "np", ".", "random", ".", "seed", "(", "10", ")", "\n", "shuffle_indices", "=", "np", ".", "random", ".", "permutation", "(", "np", ".", "arange", "(", "len", "(", "x_train", ")", ")", ")", "\n", "x_train", "=", "x_train", "[", "shuffle_indices", "]", "\n", "y_train", "=", "y_train", "[", "shuffle_indices", "]", "\n", "\n", "np", ".", "random", ".", "seed", "(", "10", ")", "\n", "shuffle_indices", "=", "np", ".", "random", ".", "permutation", "(", "np", ".", "arange", "(", "len", "(", "x_test", ")", ")", ")", "\n", "x_test", "=", "x_test", "[", "shuffle_indices", "]", "\n", "y_test", "=", "y_test", "[", "shuffle_indices", "]", "\n", "\n", "print", "(", "\"Train Mal/Ben split: {}/{}\"", ".", "format", "(", "len", "(", "pos_train", ")", ",", "len", "(", "neg_train", ")", ")", ")", "\n", "print", "(", "\"Test Mal/Ben split: {}/{}\"", ".", "format", "(", "len", "(", "pos_test", ")", ",", "len", "(", "neg_test", ")", ")", ")", "\n", "print", "(", "\"Train/Test split: {}/{}\"", ".", "format", "(", "len", "(", "y_train", ")", ",", "len", "(", "y_test", ")", ")", ")", "\n", "print", "(", "\"Train/Test split: {}/{}\"", ".", "format", "(", "len", "(", "x_train", ")", ",", "len", "(", "x_test", ")", ")", ")", "\n", "\n", "return", "x_train", ",", "y_train", ",", "x_test", ",", "y_test", "\n", "\n"]], "home.repos.pwc.inspect_result.Antimalweb_URLNet.None.utils.get_ngramed_id_x": [[316, 321], ["output_ngramed_id_x.append"], "function", ["None"], ["", "def", "get_ngramed_id_x", "(", "x_idxs", ",", "ngramed_id_x", ")", ":", "\n", "    ", "output_ngramed_id_x", "=", "[", "]", "\n", "for", "idx", "in", "x_idxs", ":", "\n", "        ", "output_ngramed_id_x", ".", "append", "(", "ngramed_id_x", "[", "idx", "]", ")", "\n", "", "return", "output_ngramed_id_x", "\n", "\n"]], "home.repos.pwc.inspect_result.Antimalweb_URLNet.None.utils.pad_seq": [[322, 343], ["numpy.zeros", "numpy.zeros", "range", "len", "range", "len", "len", "range", "len", "len", "len", "range", "len", "len", "len"], "function", ["None"], ["", "def", "pad_seq", "(", "urls", ",", "max_d1", "=", "0", ",", "max_d2", "=", "0", ",", "embedding_size", "=", "128", ")", ":", "\n", "    ", "if", "max_d1", "==", "0", "and", "max_d2", "==", "0", ":", "\n", "        ", "for", "url", "in", "urls", ":", "\n", "            ", "if", "len", "(", "url", ")", ">", "max_d1", ":", "\n", "                ", "max_d1", "=", "len", "(", "url", ")", "\n", "", "for", "word", "in", "url", ":", "\n", "                ", "if", "len", "(", "word", ")", ">", "max_d2", ":", "\n", "                    ", "max_d2", "=", "len", "(", "word", ")", "\n", "", "", "", "", "pad_idx", "=", "np", ".", "zeros", "(", "(", "len", "(", "urls", ")", ",", "max_d1", ",", "max_d2", ",", "embedding_size", ")", ")", "\n", "pad_urls", "=", "np", ".", "zeros", "(", "(", "len", "(", "urls", ")", ",", "max_d1", ",", "max_d2", ")", ")", "\n", "pad_vec", "=", "[", "1", "for", "i", "in", "range", "(", "embedding_size", ")", "]", "\n", "for", "d0", "in", "range", "(", "len", "(", "urls", ")", ")", ":", "\n", "        ", "url", "=", "urls", "[", "d0", "]", "\n", "for", "d1", "in", "range", "(", "len", "(", "url", ")", ")", ":", "\n", "            ", "if", "d1", "<", "max_d1", ":", "\n", "                ", "word", "=", "url", "[", "d1", "]", "\n", "for", "d2", "in", "range", "(", "len", "(", "word", ")", ")", ":", "\n", "                    ", "if", "d2", "<", "max_d2", ":", "\n", "                        ", "pad_urls", "[", "d0", ",", "d1", ",", "d2", "]", "=", "word", "[", "d2", "]", "\n", "pad_idx", "[", "d0", ",", "d1", ",", "d2", "]", "=", "pad_vec", "\n", "", "", "", "", "", "return", "pad_urls", ",", "pad_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.Antimalweb_URLNet.None.utils.pad_seq_in_word": [[344, 358], ["numpy.zeros", "range", "max", "len", "range", "len", "len", "len"], "function", ["None"], ["", "def", "pad_seq_in_word", "(", "urls", ",", "max_d1", "=", "0", ",", "embedding_size", "=", "128", ")", ":", "\n", "    ", "if", "max_d1", "==", "0", ":", "\n", "        ", "url_lens", "=", "[", "len", "(", "url", ")", "for", "url", "in", "urls", "]", "\n", "max_d1", "=", "max", "(", "url_lens", ")", "\n", "", "pad_urls", "=", "np", ".", "zeros", "(", "(", "len", "(", "urls", ")", ",", "max_d1", ")", ")", "\n", "#pad_idx = np.zeros((len(urls), max_d1, embedding_size))", "\n", "#pad_vec = [1 for i in range(embedding_size)]", "\n", "for", "d0", "in", "range", "(", "len", "(", "urls", ")", ")", ":", "\n", "        ", "url", "=", "urls", "[", "d0", "]", "\n", "for", "d1", "in", "range", "(", "len", "(", "url", ")", ")", ":", "\n", "            ", "if", "d1", "<", "max_d1", ":", "\n", "                ", "pad_urls", "[", "d0", ",", "d1", "]", "=", "url", "[", "d1", "]", "\n", "#pad_idx[d0,d1] = pad_vec ", "\n", "", "", "", "return", "pad_urls", "\n", "\n"]], "home.repos.pwc.inspect_result.Antimalweb_URLNet.None.utils.softmax": [[359, 362], ["numpy.exp", "np.exp.sum", "numpy.max"], "function", ["None"], ["", "def", "softmax", "(", "x", ")", ":", "\n", "    ", "e_x", "=", "np", ".", "exp", "(", "x", "-", "np", ".", "max", "(", "x", ")", ")", "\n", "return", "e_x", "/", "e_x", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Antimalweb_URLNet.None.utils.batch_iter": [[363, 377], ["numpy.array", "len", "range", "int", "range", "numpy.random.permutation", "min", "numpy.arange", "len"], "function", ["None"], ["", "def", "batch_iter", "(", "data", ",", "batch_size", ",", "num_epochs", ",", "shuffle", "=", "True", ")", ":", "\n", "    ", "data", "=", "np", ".", "array", "(", "data", ")", "\n", "data_size", "=", "len", "(", "data", ")", "\n", "num_batches_per_epoch", "=", "int", "(", "(", "len", "(", "data", ")", "-", "1", ")", "/", "batch_size", ")", "+", "1", "\n", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "        ", "if", "shuffle", ":", "\n", "            ", "shuffle_indices", "=", "np", ".", "random", ".", "permutation", "(", "np", ".", "arange", "(", "data_size", ")", ")", "\n", "shuffled_data", "=", "data", "[", "shuffle_indices", "]", "\n", "", "else", ":", "\n", "            ", "shuffled_data", "=", "data", "\n", "", "for", "batch_num", "in", "range", "(", "num_batches_per_epoch", ")", ":", "\n", "            ", "start_idx", "=", "batch_num", "*", "batch_size", "\n", "end_idx", "=", "min", "(", "(", "batch_num", "+", "1", ")", "*", "batch_size", ",", "data_size", ")", "\n", "yield", "shuffled_data", "[", "start_idx", ":", "end_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Antimalweb_URLNet.None.utils.save_test_result": [[378, 398], ["utils.softmax", "open", "file.write", "range", "output_labels.append", "output_labels.append", "output_preds.append", "output_preds.append", "len", "file.write", "str", "str", "str", "int", "int"], "function", ["home.repos.pwc.inspect_result.Antimalweb_URLNet.None.utils.softmax"], ["", "", "", "def", "save_test_result", "(", "labels", ",", "all_predictions", ",", "all_scores", ",", "output_dir", ")", ":", "\n", "    ", "output_labels", "=", "[", "]", "\n", "for", "i", "in", "labels", ":", "\n", "        ", "if", "i", "==", "1", ":", "\n", "            ", "output_labels", ".", "append", "(", "i", ")", "\n", "", "else", ":", "\n", "            ", "output_labels", ".", "append", "(", "-", "1", ")", "\n", "", "", "output_preds", "=", "[", "]", "\n", "for", "i", "in", "all_predictions", ":", "\n", "        ", "if", "i", "==", "1", ":", "\n", "            ", "output_preds", ".", "append", "(", "i", ")", "\n", "", "else", ":", "\n", "            ", "output_preds", ".", "append", "(", "-", "1", ")", "\n", "", "", "softmax_scores", "=", "[", "softmax", "(", "i", ")", "for", "i", "in", "all_scores", "]", "\n", "with", "open", "(", "output_dir", ",", "\"w\"", ")", "as", "file", ":", "\n", "        ", "output", "=", "\"label\\tpredict\\tscore\\n\"", "\n", "file", ".", "write", "(", "output", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "output_labels", ")", ")", ":", "\n", "            ", "output", "=", "str", "(", "int", "(", "output_labels", "[", "i", "]", ")", ")", "+", "'\\t'", "+", "str", "(", "int", "(", "output_preds", "[", "i", "]", ")", ")", "+", "'\\t'", "+", "str", "(", "softmax_scores", "[", "i", "]", "[", "1", "]", ")", "+", "'\\n'", "\n", "file", ".", "write", "(", "output", ")", "\n", "", "", "", ""]]}