{"home.repos.pwc.inspect_result.parkseobin_MLSR.None.models.IDNModel.__init__": [[7, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "tensor_input", ",", "gt_output", ",", "scope_name", ")", ":", "\n", "        ", "self", ".", "tensor_input", "=", "tensor_input", "\n", "self", ".", "scope_name", "=", "scope_name", "\n", "self", ".", "gt_output", "=", "gt_output", "\n", "self", ".", "model_name", "=", "'IDN'", "\n", "\n"]], "home.repos.pwc.inspect_result.parkseobin_MLSR.None.models.IDNModel.build_model": [[14, 39], ["tensorflow.get_variable_scope().reuse_variables", "tensorflow.reduce_mean", "tensorflow.clip_by_value", "tensorflow.image.psnr", "tensorflow.image.psnr", "tensorflow.image.ssim_multiscale", "tensorflow.image.ssim", "tensorflow.image.psnr", "IDN_definition.IDN", "tensorflow.get_variable_scope", "tensorflow.variable_scope", "IDN_definition.IDN"], "methods", ["home.repos.pwc.inspect_result.parkseobin_MLSR.None.IDN_definition.IDN", "home.repos.pwc.inspect_result.parkseobin_MLSR.None.IDN_definition.IDN"], ["", "def", "build_model", "(", "self", ")", ":", "\n", "        ", "img_lr", ",", "img_bicubic", "=", "self", ".", "tensor_input", "\n", "\n", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "if", "(", "self", ".", "scope_name", "==", "self", ".", "model_name", ")", ":", "\n", "            ", "output", "=", "IDN", "(", "img_lr", ",", "img_bicubic", ",", "2", ")", "\n", "", "else", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "self", ".", "scope_name", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "                ", "output", "=", "IDN", "(", "img_lr", ",", "img_bicubic", ",", "2", ")", "\n", "\n", "", "", "self", ".", "output", "=", "output", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "(", "output", "-", "self", ".", "gt_output", ")", "**", "2", ")", "\n", "\n", "y_vector", "=", "[", "0.25678824", ",", "0.50412941", ",", "0.09790588", "]", "\n", "output_y", "=", "output", "[", ":", ",", ":", ",", ":", ",", "0", ":", "1", "]", "*", "y_vector", "[", "0", "]", "+", "output", "[", ":", ",", ":", ",", ":", ",", "1", ":", "2", "]", "*", "y_vector", "[", "1", "]", "+", "output", "[", ":", ",", ":", ",", ":", ",", "2", ":", "3", "]", "*", "y_vector", "[", "2", "]", "\n", "gt_output_y", "=", "self", ".", "gt_output", "[", ":", ",", ":", ",", ":", ",", "0", ":", "1", "]", "*", "y_vector", "[", "0", "]", "+", "self", ".", "gt_output", "[", ":", ",", ":", ",", ":", ",", "1", ":", "2", "]", "*", "y_vector", "[", "1", "]", "+", "self", ".", "gt_output", "[", ":", ",", ":", ",", ":", ",", "2", ":", "3", "]", "*", "y_vector", "[", "2", "]", "\n", "self", ".", "output", "=", "tf", ".", "clip_by_value", "(", "output", ",", "0", ",", "255", ")", "\n", "output", "=", "self", ".", "output", "\n", "self", ".", "psnr", "=", "tf", ".", "image", ".", "psnr", "(", "output", ",", "self", ".", "gt_output", ",", "max_val", "=", "255", ")", "\n", "self", ".", "psnr_y", "=", "tf", ".", "image", ".", "psnr", "(", "output_y", "[", ":", ",", "2", ":", "-", "2", ",", "2", ":", "-", "2", ",", ":", "]", ",", "gt_output_y", "[", ":", ",", "2", ":", "-", "2", ",", "2", ":", "-", "2", ",", ":", "]", ",", "max_val", "=", "255", ")", "\n", "#self.psnr_y = tf.image.psnr(output_y, gt_output_y, max_val=255)", "\n", "self", ".", "ssim", "=", "tf", ".", "image", ".", "ssim_multiscale", "(", "output", ",", "self", ".", "gt_output", ",", "max_val", "=", "255", ")", "\n", "self", ".", "ssim_y", "=", "tf", ".", "image", ".", "ssim", "(", "output_y", ",", "gt_output_y", ",", "max_val", "=", "255", ")", "\n", "img_bicubic_y", "=", "img_bicubic", "[", ":", ",", ":", ",", ":", ",", "0", ":", "1", "]", "*", "y_vector", "[", "0", "]", "+", "img_bicubic", "[", ":", ",", ":", ",", ":", ",", "1", ":", "2", "]", "*", "y_vector", "[", "1", "]", "+", "img_bicubic", "[", ":", ",", ":", ",", ":", ",", "2", ":", "3", "]", "*", "y_vector", "[", "2", "]", "\n", "self", ".", "bicubic_psnr", "=", "tf", ".", "image", ".", "psnr", "(", "img_bicubic_y", ",", "gt_output_y", ",", "max_val", "=", "255", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.parkseobin_MLSR.None.train.SRTrainer.__init__": [[10, 23], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "network_model_class", ",", "args", ")", ":", "\n", "        ", "self", ".", "batch_size", "=", "args", ".", "batch_size", "\n", "self", ".", "log_step", "=", "args", ".", "log_step", "\n", "self", ".", "validation_step", "=", "args", ".", "validation_step", "\n", "self", ".", "train_iteration", "=", "args", ".", "train_iteration", "\n", "self", ".", "param_restore_path", "=", "args", ".", "param_restore_path", "\n", "self", ".", "param_save_path", "=", "args", ".", "param_save_path", "\n", "self", ".", "lr_beta", "=", "args", ".", "lr_beta", "# beta", "\n", "self", ".", "lr_alpha", "=", "args", ".", "lr_alpha", "#alpha", "\n", "self", ".", "gradient_number", "=", "args", ".", "gradient_number", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "network_model_class", "=", "network_model_class", "\n", "self", ".", "build_success", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.parkseobin_MLSR.None.train.SRTrainer.set_optimizer": [[25, 47], ["tensorflow.variable_scope", "tensorflow.gradients", "tensorflow.train.GradientDescentOptimizer", "tensorflow.variables_initializer", "train.SRTrainer.update_opt.minimize", "tensorflow.train.AdamOptimizer().apply_gradients", "tensorflow.train.GradientDescentOptimizer", "tensorflow.variables_initializer", "train.SRTrainer.copy_opt.minimize", "tensorflow.Variable", "train.SRTrainer.update_opt.variables", "accum_var.assign", "accum_vars[].assign_add", "zip", "train.SRTrainer.copy_opt.variables", "tensorflow.global_variables", "v.name.startswith", "tensorflow.global_variables", "v.name.startswith", "tensorflow.zeros_like", "tensorflow.zeros_like", "range", "tensorflow.train.AdamOptimizer", "len"], "methods", ["None"], ["", "def", "set_optimizer", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'optimizer'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "# Extract variables", "\n", "            ", "final_vars", "=", "[", "v", "for", "v", "in", "tf", ".", "global_variables", "(", ")", "if", "v", ".", "name", ".", "startswith", "(", "self", ".", "final_network", ".", "model_name", ")", "]", "\n", "update_vars", "=", "[", "v", "for", "v", "in", "tf", ".", "global_variables", "(", ")", "if", "v", ".", "name", ".", "startswith", "(", "'update'", ")", "]", "\n", "update_gradients", "=", "tf", ".", "gradients", "(", "self", ".", "update_network", ".", "loss", ",", "update_vars", ")", "\n", "accum_vars", "=", "[", "tf", ".", "Variable", "(", "tf", ".", "zeros_like", "(", "value", ")", ",", "trainable", "=", "False", ")", "for", "value", "in", "update_gradients", "]", "\n", "\n", "# Inner udpate", "\n", "self", ".", "update_opt", "=", "tf", ".", "train", ".", "GradientDescentOptimizer", "(", "self", ".", "lr_alpha", ",", "name", "=", "'update_opt'", ")", "\n", "#self.update_opt = tf.train.AdamOptimizer(self.lr_alpha, name='update_opt')", "\n", "self", ".", "init_update_opt", "=", "tf", ".", "variables_initializer", "(", "self", ".", "update_opt", ".", "variables", "(", ")", ")", "\n", "self", ".", "update_opt", "=", "self", ".", "update_opt", ".", "minimize", "(", "self", ".", "update_network", ".", "loss", ",", "var_list", "=", "update_vars", ")", "\n", "\n", "# Outer udpate", "\n", "self", ".", "init_accumulator", "=", "[", "accum_var", ".", "assign", "(", "tf", ".", "zeros_like", "(", "accum_var", ")", ")", "for", "accum_var", "in", "accum_vars", "]", "\n", "self", ".", "accumulate_grads", "=", "[", "accum_vars", "[", "i", "]", ".", "assign_add", "(", "update_gradients", "[", "i", "]", "/", "self", ".", "batch_size", ")", "for", "i", "in", "range", "(", "len", "(", "update_gradients", ")", ")", "]", "\n", "self", ".", "fomaml_opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lr_beta", ",", "name", "=", "'fomaml_opt'", ")", ".", "apply_gradients", "(", "zip", "(", "accum_vars", ",", "final_vars", ")", ")", "\n", "\n", "self", ".", "copy_opt", "=", "tf", ".", "train", ".", "GradientDescentOptimizer", "(", "self", ".", "lr_alpha", ",", "name", "=", "'copy_opt'", ")", "\n", "self", ".", "init_copy_opt", "=", "tf", ".", "variables_initializer", "(", "self", ".", "copy_opt", ".", "variables", "(", ")", ")", "\n", "self", ".", "copy_opt", "=", "self", ".", "copy_opt", ".", "minimize", "(", "self", ".", "copied_network", ".", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.parkseobin_MLSR.None.train.SRTrainer.build": [[49, 80], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "train.SRTrainer.network_model_class", "train.SRTrainer.final_network.build_model", "train.SRTrainer.network_model_class", "train.SRTrainer.update_network.build_model", "train.SRTrainer.network_model_class", "train.SRTrainer.copied_network.build_model", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.get_collection", "range", "tensorflow.group", "tensorflow.group", "train.SRTrainer.set_optimizer", "print", "len", "copy_ops.append", "update_ops.append", "copy_vars[].assign", "update_vars[].assign"], "methods", ["home.repos.pwc.inspect_result.parkseobin_MLSR.None.models.IDNModel.build_model", "home.repos.pwc.inspect_result.parkseobin_MLSR.None.models.IDNModel.build_model", "home.repos.pwc.inspect_result.parkseobin_MLSR.None.models.IDNModel.build_model", "home.repos.pwc.inspect_result.parkseobin_MLSR.None.train.SRTrainer.set_optimizer"], ["", "", "def", "build", "(", "self", ")", ":", "\n", "        ", "self", ".", "img_lr", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "None", ",", "None", ",", "None", ",", "3", ")", ")", "\n", "self", ".", "img_bicubic", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "None", ",", "None", ",", "None", ",", "3", ")", ")", "\n", "self", ".", "img_hr", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "None", ",", "None", ",", "None", ",", "3", ")", ")", "\n", "\n", "self", ".", "final_network", "=", "self", ".", "network_model_class", "(", "(", "self", ".", "img_lr", ",", "self", ".", "img_bicubic", ")", ",", "self", ".", "img_hr", ",", "''", ")", "\n", "self", ".", "final_network", ".", "build_model", "(", ")", "\n", "\n", "# Make model for update", "\n", "self", ".", "update_network", "=", "self", ".", "network_model_class", "(", "(", "self", ".", "img_lr", ",", "self", ".", "img_bicubic", ")", ",", "self", ".", "img_hr", ",", "'update'", ")", "\n", "self", ".", "update_network", ".", "build_model", "(", ")", "\n", "\n", "# Make model for test", "\n", "self", ".", "copied_network", "=", "self", ".", "network_model_class", "(", "(", "self", ".", "img_lr", ",", "self", ".", "img_bicubic", ")", ",", "self", ".", "img_hr", ",", "'copy'", ")", "\n", "self", ".", "copied_network", ".", "build_model", "(", ")", "\n", "\n", "# Making sync operation", "\n", "copy_vars", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "'copy'", ")", "\n", "target_vars", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "self", ".", "final_network", ".", "model_name", ")", "\n", "update_vars", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "'update'", ")", "\n", "copy_ops", "=", "[", "]", "\n", "update_ops", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "copy_vars", ")", ")", ":", "\n", "            ", "copy_ops", ".", "append", "(", "copy_vars", "[", "i", "]", ".", "assign", "(", "target_vars", "[", "i", "]", ")", ")", "\n", "update_ops", ".", "append", "(", "update_vars", "[", "i", "]", ".", "assign", "(", "target_vars", "[", "i", "]", ")", ")", "\n", "", "self", ".", "copy_sync_op", "=", "tf", ".", "group", "(", "*", "copy_ops", ")", "\n", "self", ".", "update_sync_op", "=", "tf", ".", "group", "(", "*", "update_ops", ")", "\n", "\n", "self", ".", "set_optimizer", "(", ")", "\n", "self", ".", "build_success", "=", "True", "\n", "print", "(", "'>> build complete!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.parkseobin_MLSR.None.train.SRTrainer.train_one_step": [[82, 113], ["sess.run", "numpy.zeros", "numpy.zeros", "range", "sess.run", "sess.run", "sess.run", "range", "sess.run", "numpy.zeros.mean", "numpy.zeros.mean", "sess.run"], "methods", ["None"], ["", "def", "train_one_step", "(", "self", ",", "sess", ",", "epoch", ")", ":", "\n", "        ", "train_img_lr", ",", "train_img_bicubic", ",", "train_img_hr", ",", "eval_img_lr", ",", "eval_img_bicubic", ",", "eval_img_hr", "=", "sess", ".", "run", "(", "self", ".", "dataset", ".", "dequeue_many", ")", "\n", "loss", "=", "np", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "psnr", "=", "np", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "batch_size", ")", ":", "\n", "#1 copy latest parameter", "\n", "            ", "sess", ".", "run", "(", "[", "self", ".", "update_sync_op", ",", "self", ".", "init_update_opt", "]", ")", "\n", "\n", "#2 update parameter for given iteration number with train data", "\n", "update_iteration", "=", "self", ".", "gradient_number", "\n", "for", "j", "in", "range", "(", "update_iteration", ")", ":", "\n", "                ", "sess", ".", "run", "(", "self", ".", "update_opt", ",", "feed_dict", "=", "{", "\n", "self", ".", "img_lr", ":", "[", "train_img_lr", "[", "i", "]", "]", ",", "\n", "self", ".", "img_bicubic", ":", "[", "train_img_bicubic", "[", "i", "]", "]", ",", "\n", "self", ".", "img_hr", ":", "[", "train_img_hr", "[", "i", "]", "]", "\n", "}", ")", "\n", "\n", "", "_", ",", "loss", "[", "i", "]", ",", "psnr", "[", "i", "]", "=", "sess", ".", "run", "(", "[", "\n", "self", ".", "accumulate_grads", ",", "self", ".", "update_network", ".", "loss", ",", "self", ".", "update_network", ".", "psnr_y", "\n", "]", ",", "feed_dict", "=", "{", "\n", "self", ".", "img_lr", ":", "[", "eval_img_lr", "[", "i", "]", "]", ",", "\n", "self", ".", "img_bicubic", ":", "[", "eval_img_bicubic", "[", "i", "]", "]", ",", "\n", "self", ".", "img_hr", ":", "[", "eval_img_hr", "[", "i", "]", "]", "\n", "}", ")", "\n", "\n", "#3 update the parameter with accumulated gradients", "\n", "", "sess", ".", "run", "(", "self", ".", "fomaml_opt", ")", "\n", "sess", ".", "run", "(", "self", ".", "init_accumulator", ")", "\n", "\n", "return", "loss", ".", "mean", "(", ")", ",", "psnr", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.parkseobin_MLSR.None.train.SRTrainer.validation": [[115, 152], ["len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "train.SRTrainer.dataset.next", "sess.run", "sess.run", "range", "sess.run", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "numpy.zeros.mean", "sess.run"], "methods", ["home.repos.pwc.inspect_result.parkseobin_MLSR.None.dataset.Dataset.next"], ["", "def", "validation", "(", "self", ",", "sess", ")", ":", "\n", "        ", "test_size", "=", "len", "(", "self", ".", "dataset", ".", "test_list", ")", "\n", "updated_psnr", "=", "np", ".", "zeros", "(", "(", "test_size", ",", ")", ")", "\n", "base_psnr", "=", "np", ".", "zeros", "(", "(", "test_size", ",", ")", ")", "\n", "updated_ssim", "=", "np", ".", "zeros", "(", "(", "test_size", ",", ")", ")", "\n", "base_ssim", "=", "np", ".", "zeros", "(", "(", "test_size", ",", ")", ")", "\n", "bicubic_psnr", "=", "np", ".", "zeros", "(", "(", "test_size", ",", ")", ")", "\n", "for", "i", "in", "range", "(", "test_size", ")", ":", "\n", "            ", "img_lr", ",", "img_bicubic", ",", "img_hr", ",", "maml_img_lr", ",", "maml_img_bicubic", ",", "maml_img_hr", "=", "self", ".", "dataset", ".", "next", "(", "test", "=", "True", ")", "\n", "sess", ".", "run", "(", "[", "self", ".", "copy_sync_op", ",", "self", ".", "init_copy_opt", "]", ")", "\n", "\n", "base_psnr", "[", "i", "]", ",", "bicubic_psnr", "[", "i", "]", ",", "base_ssim", "[", "i", "]", "=", "sess", ".", "run", "(", "[", "\n", "self", ".", "copied_network", ".", "psnr_y", ",", "self", ".", "copied_network", ".", "bicubic_psnr", ",", "\n", "self", ".", "copied_network", ".", "ssim_y", "\n", "]", ",", "feed_dict", "=", "{", "\n", "self", ".", "img_lr", ":", "maml_img_lr", ",", "\n", "self", ".", "img_bicubic", ":", "maml_img_bicubic", ",", "\n", "self", ".", "img_hr", ":", "maml_img_hr", "\n", "}", ")", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "gradient_number", ")", ":", "\n", "                ", "sess", ".", "run", "(", "[", "self", ".", "copy_opt", "]", ",", "feed_dict", "=", "{", "\n", "self", ".", "img_lr", ":", "img_lr", ",", "\n", "self", ".", "img_bicubic", ":", "img_bicubic", ",", "\n", "self", ".", "img_hr", ":", "img_hr", ",", "\n", "}", ")", "\n", "\n", "", "updated_psnr", "[", "i", "]", ",", "updated_ssim", "[", "i", "]", "=", "sess", ".", "run", "(", "[", "\n", "self", ".", "copied_network", ".", "psnr_y", ",", "self", ".", "copied_network", ".", "ssim_y", "\n", "]", ",", "feed_dict", "=", "{", "\n", "self", ".", "img_lr", ":", "maml_img_lr", ",", "\n", "self", ".", "img_bicubic", ":", "maml_img_bicubic", ",", "\n", "self", ".", "img_hr", ":", "maml_img_hr", "\n", "}", ")", "\n", "\n", "", "return", "updated_psnr", ".", "mean", "(", ")", ",", "base_psnr", ".", "mean", "(", ")", ",", "bicubic_psnr", ".", "mean", "(", ")", ",", "updated_ssim", ".", "mean", "(", ")", ",", "base_ssim", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.parkseobin_MLSR.None.train.SRTrainer.train": [[154, 198], ["train.SRTrainer.build", "tensorflow.train.Saver", "os.path.exists", "os.makedirs", "tensorflow.get_collection", "tensorflow.Session", "sess.run", "train.SRTrainer.dataset.start_enqueue_daemon", "print", "range", "tensorflow.global_variables_initializer", "os.path.join", "tensorflow.train.Saver.restore", "print", "train.SRTrainer.train_one_step", "datetime.datetime.now", "print", "print", "train.SRTrainer.validation", "print", "print", "tensorflow.train.Saver.save", "tensorflow.train.Saver.save", "os.path.join", "datetime.datetime.now.strftime", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.parkseobin_MLSR.None.train.SRTrainer.build", "home.repos.pwc.inspect_result.parkseobin_MLSR.None.dataset.Dataset.start_enqueue_daemon", "home.repos.pwc.inspect_result.parkseobin_MLSR.None.train.SRTrainer.train_one_step", "home.repos.pwc.inspect_result.parkseobin_MLSR.None.train.SRTrainer.validation"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "param_save_path", "is", "not", "None", ",", "'param_save_path is None'", "\n", "if", "(", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "param_save_path", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "param_save_path", ")", "\n", "", "self", ".", "build", "(", ")", "\n", "detector_saver", "=", "tf", ".", "train", ".", "Saver", "(", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "self", ".", "final_network", ".", "model_name", ")", ")", "\n", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "            ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "self", ".", "dataset", ".", "start_enqueue_daemon", "(", "sess", ")", "\n", "if", "(", "self", ".", "param_restore_path", "!=", "None", ")", ":", "\n", "                ", "restore_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "param_restore_path", ",", "'model.ckpt'", ")", "\n", "detector_saver", ".", "restore", "(", "sess", ",", "restore_path", ")", "\n", "print", "(", "'>> restored parameter from {}'", ".", "format", "(", "restore_path", ")", ",", "flush", "=", "True", ")", "\n", "", "print", "(", "'\\n[*] Start training MLSR\\n\\n'", ")", "\n", "\n", "loss_log", ",", "psnr_log", ",", "best_psnr_test", "=", "0", ",", "0", ",", "0", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "train_iteration", "+", "1", ")", ":", "\n", "                ", "train_loss", ",", "train_psnr", "=", "self", ".", "train_one_step", "(", "sess", ",", "i", ")", "\n", "loss_log", "+=", "train_loss", "\n", "psnr_log", "+=", "train_psnr", "\n", "if", "(", "i", "%", "self", ".", "log_step", "==", "0", ")", ":", "\n", "                    ", "loss_log", "/=", "self", ".", "log_step", "\n", "psnr_log", "/=", "self", ".", "log_step", "\n", "now", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "print", "(", "\"[{}]\"", ".", "format", "(", "now", ".", "strftime", "(", "'%Y-%m-%d %H:%M:%S'", ")", ")", ",", "flush", "=", "True", ")", "\n", "print", "(", "\"Step: [{}/{}]\\t Loss: {:.6f}\\tPSNR: {:.6f}\\n\"", ".", "format", "(", "i", ",", "self", ".", "train_iteration", ",", "loss_log", ",", "train_psnr", ")", ",", "flush", "=", "True", ")", "\n", "loss_log", ",", "psnr_log", "=", "0", ",", "0", "\n", "\n", "", "updated_psnr", "=", "None", "\n", "base_psnr", "=", "None", "\n", "if", "(", "i", "%", "self", ".", "validation_step", "==", "0", ")", ":", "\n", "                    ", "updated_psnr", ",", "base_psnr", ",", "bicubic_psnr", ",", "updated_ssim", ",", "base_ssim", "=", "self", ".", "validation", "(", "sess", ")", "\n", "print", "(", "\">> Test PSNR: (base: {}), (bicubic: {}), (updated: {})\\n\"", ".", "format", "(", "\n", "base_psnr", ",", "bicubic_psnr", ",", "updated_psnr", "\n", ")", ",", "flush", "=", "True", ")", "\n", "print", "(", "\">> Test SSIM: (base: {}), (updated: {})\\n\\n\"", ".", "format", "(", "\n", "base_ssim", ",", "updated_ssim", "\n", ")", ",", "flush", "=", "True", ")", "\n", "\n", "if", "(", "updated_psnr", ">", "best_psnr_test", ")", ":", "\n", "                        ", "best_psnr_test", "=", "updated_psnr", "\n", "detector_saver", ".", "save", "(", "sess", ",", "os", ".", "path", ".", "join", "(", "self", ".", "param_save_path", ",", "'model.ckpt'", ")", ")", "\n", "", "detector_saver", ".", "save", "(", "sess", ",", "os", ".", "path", ".", "join", "(", "self", ".", "param_save_path", ",", "'last.ckpt'", ")", ")", "", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.parkseobin_MLSR.None.dataset.Dataset.__init__": [[11, 22], ["os.listdir", "os.listdir", "dataset.Dataset.make_queue", "len", "len"], "methods", ["home.repos.pwc.inspect_result.parkseobin_MLSR.None.dataset.Dataset.make_queue"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "train_directory", "=", "args", ".", "train_directory", "\n", "self", ".", "validation_directory", "=", "args", ".", "validation_directory", "\n", "self", ".", "batch_size", "=", "args", ".", "batch_size", "\n", "self", ".", "train_list", "=", "os", ".", "listdir", "(", "self", ".", "train_directory", ")", "\n", "self", ".", "test_list", "=", "os", ".", "listdir", "(", "self", ".", "validation_directory", ")", "\n", "assert", "len", "(", "self", ".", "train_list", ")", ">", "0", "and", "len", "(", "self", ".", "test_list", ")", ">", "0", ",", "'Empty dataset'", "\n", "self", ".", "test_i", "=", "0", "\n", "self", ".", "patch_size", "=", "args", ".", "patch_size", "# HR patch size", "\n", "self", ".", "queue_size", "=", "256", "\n", "self", ".", "make_queue", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.parkseobin_MLSR.None.dataset.Dataset.make_queue": [[24, 44], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.RandomShuffleQueue", "tensorflow.RandomShuffleQueue.enqueue_many", "tensorflow.RandomShuffleQueue.dequeue_many"], "methods", ["None"], ["", "def", "make_queue", "(", "self", ")", ":", "\n", "        ", "image_shape_hr", "=", "(", "self", ".", "patch_size", ",", "self", ".", "patch_size", ",", "3", ")", "\n", "image_shape_lr", "=", "(", "self", ".", "patch_size", "//", "2", ",", "self", ".", "patch_size", "//", "2", ",", "3", ")", "\n", "image_shape_lr_", "=", "(", "self", ".", "patch_size", "//", "4", ",", "self", ".", "patch_size", "//", "4", ",", "3", ")", "\n", "\n", "self", ".", "maml_img_lr", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "None", ",", ")", "+", "image_shape_lr", ")", "\n", "self", ".", "maml_img_bicubic", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "None", ",", ")", "+", "image_shape_hr", ")", "\n", "self", ".", "maml_img_hr", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "None", ",", ")", "+", "image_shape_hr", ")", "\n", "self", ".", "img_lr", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "None", ",", ")", "+", "image_shape_lr_", ")", "\n", "self", ".", "img_bicubic", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "None", ",", ")", "+", "image_shape_lr", ")", "\n", "self", ".", "img_hr", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "None", ",", ")", "+", "image_shape_lr", ")", "\n", "# Dequeues element in random order", "\n", "queue", "=", "tf", ".", "RandomShuffleQueue", "(", "self", ".", "queue_size", ",", "self", ".", "batch_size", ",", "\n", "dtypes", "=", "(", "tf", ".", "float32", ",", "tf", ".", "float32", ",", "tf", ".", "float32", ",", "tf", ".", "float32", ",", "tf", ".", "float32", ",", "tf", ".", "float32", ")", ",", "\n", "shapes", "=", "(", "image_shape_lr_", ",", "image_shape_lr", ",", "image_shape_lr", ",", "\n", "image_shape_lr", ",", "image_shape_hr", ",", "image_shape_hr", ")", ")", "\n", "\n", "self", ".", "enqueue_many", "=", "queue", ".", "enqueue_many", "(", "[", "self", ".", "img_lr", ",", "self", ".", "img_bicubic", ",", "self", ".", "img_hr", ",", "\n", "self", ".", "maml_img_lr", ",", "self", ".", "maml_img_bicubic", ",", "self", ".", "maml_img_hr", "]", ")", "\n", "self", ".", "dequeue_many", "=", "queue", ".", "dequeue_many", "(", "self", ".", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.parkseobin_MLSR.None.dataset.Dataset.start_enqueue_daemon": [[46, 69], ["range", "threading.Thread", "threading.Thread.start", "threads.append", "dataset.Dataset.next", "sess.run", "time.sleep"], "methods", ["home.repos.pwc.inspect_result.parkseobin_MLSR.None.dataset.Dataset.next"], ["", "def", "start_enqueue_daemon", "(", "self", ",", "sess", ")", ":", "\n", "        ", "def", "enqueue_thread", "(", "sess", ")", ":", "\n", "            ", "while", "(", "True", ")", ":", "\n", "                ", "img_lr", ",", "img_bicubic", ",", "img_hr", ",", "maml_img_lr", ",", "maml_img_bicubic", ",", "maml_img_hr", "=", "self", ".", "next", "(", "test", "=", "False", ")", "\n", "sess", ".", "run", "(", "[", "self", ".", "enqueue_many", "]", ",", "feed_dict", "=", "{", "\n", "self", ".", "img_lr", ":", "img_lr", ",", "\n", "self", ".", "img_bicubic", ":", "img_bicubic", ",", "\n", "self", ".", "img_hr", ":", "img_hr", ",", "\n", "self", ".", "maml_img_lr", ":", "maml_img_lr", ",", "\n", "self", ".", "maml_img_bicubic", ":", "maml_img_bicubic", ",", "\n", "self", ".", "maml_img_hr", ":", "maml_img_hr", "\n", "}", ")", "\n", "time", ".", "sleep", "(", "0.02", ")", "\n", "\n", "", "", "thread_number", "=", "1", "\n", "threads", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "thread_number", ")", ":", "\n", "            ", "t", "=", "threading", ".", "Thread", "(", "target", "=", "enqueue_thread", ",", "args", "=", "(", "sess", ",", ")", ",", "daemon", "=", "True", ")", "\n", "t", ".", "start", "(", ")", "\n", "threads", ".", "append", "(", "t", ")", "\n", "\n", "", "return", "threads", "\n", "\n"]], "home.repos.pwc.inspect_result.parkseobin_MLSR.None.dataset.Dataset.augmentation": [[71, 87], ["numpy.random.randint", "input_img.transpose", "numpy.random.choice", "len"], "methods", ["None"], ["", "def", "augmentation", "(", "self", ",", "input_img", ")", ":", "\n", "        ", "'''\n        input_img: Pillow Image object\n        returns: Pillow Image object\n        '''", "\n", "aug_methods", "=", "[", "\n", "Image", ".", "FLIP_LEFT_RIGHT", ",", "Image", ".", "FLIP_TOP_BOTTOM", ",", "\n", "Image", ".", "ROTATE_90", ",", "Image", ".", "ROTATE_180", ",", "\n", "Image", ".", "ROTATE_270", ",", "Image", ".", "TRANSPOSE", ",", "\n", "Image", ".", "TRANSVERSE", "\n", "]", "\n", "\n", "if", "(", "np", ".", "random", ".", "randint", "(", "len", "(", "aug_methods", ")", "+", "1", ")", "==", "0", ")", ":", "\n", "            ", "return", "input_img", "\n", "", "else", ":", "\n", "            ", "return", "input_img", ".", "transpose", "(", "np", ".", "random", ".", "choice", "(", "aug_methods", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.parkseobin_MLSR.None.dataset.Dataset.choose_random_image": [[89, 104], ["PIL.Image.open().convert", "os.path.join.crop", "os.path.join", "os.path.join", "len", "numpy.random.choice", "PIL.Image.open"], "methods", ["None"], ["", "", "def", "choose_random_image", "(", "self", ",", "test", ")", ":", "\n", "        ", "if", "(", "test", ")", ":", "\n", "            ", "random_img", "=", "os", ".", "path", ".", "join", "(", "self", ".", "validation_directory", ",", "self", ".", "test_list", "[", "self", ".", "test_i", "]", ")", "\n", "self", ".", "test_i", "+=", "1", "\n", "if", "(", "self", ".", "test_i", ">=", "len", "(", "self", ".", "test_list", ")", ")", ":", "\n", "                ", "self", ".", "test_i", "=", "0", "\n", "", "", "else", ":", "\n", "            ", "random_img", "=", "os", ".", "path", ".", "join", "(", "self", ".", "train_directory", ",", "np", ".", "random", ".", "choice", "(", "self", ".", "train_list", ")", ")", "\n", "\n", "", "random_img", "=", "Image", ".", "open", "(", "random_img", ")", ".", "convert", "(", "'RGB'", ")", "\n", "random_img", "=", "random_img", ".", "crop", "(", "(", "0", ",", "0", ",", "\n", "random_img", ".", "size", "[", "0", "]", "-", "random_img", ".", "size", "[", "0", "]", "%", "8", ",", "random_img", ".", "size", "[", "1", "]", "-", "random_img", ".", "size", "[", "1", "]", "%", "8", "\n", ")", ")", "\n", "\n", "return", "random_img", "\n", "\n"]], "home.repos.pwc.inspect_result.parkseobin_MLSR.None.dataset.Dataset.next": [[106, 140], ["maml_hr_img.crop.crop.resize", "numpy.array.resize", "numpy.array.copy", "numpy.array.resize", "numpy.array.resize", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "dataset.Dataset.choose_random_image", "dataset.Dataset.choose_random_image", "numpy.random.randint", "numpy.random.randint", "maml_hr_img.crop.crop.crop", "dataset.Dataset.next"], "methods", ["home.repos.pwc.inspect_result.parkseobin_MLSR.None.dataset.Dataset.choose_random_image", "home.repos.pwc.inspect_result.parkseobin_MLSR.None.dataset.Dataset.choose_random_image", "home.repos.pwc.inspect_result.parkseobin_MLSR.None.dataset.Dataset.next"], ["", "def", "next", "(", "self", ",", "test", ")", ":", "\n", "        ", "if", "(", "test", ")", ":", "\n", "            ", "maml_hr_img", "=", "self", ".", "choose_random_image", "(", "test", ")", "\n", "", "else", ":", "\n", "#maml_hr_img = self.global_img   ", "\n", "            ", "maml_hr_img", "=", "self", ".", "choose_random_image", "(", "test", ")", "\n", "\n", "# patch size on HR image", "\n", "if", "(", "maml_hr_img", ".", "size", "[", "1", "]", "<=", "self", ".", "patch_size", "or", "maml_hr_img", ".", "size", "[", "0", "]", "<=", "self", ".", "patch_size", ")", ":", "\n", "                ", "return", "self", ".", "next", "(", "test", ")", "\n", "\n", "", "left", "=", "np", ".", "random", ".", "randint", "(", "maml_hr_img", ".", "size", "[", "0", "]", "-", "self", ".", "patch_size", ")", "\n", "upper", "=", "np", ".", "random", ".", "randint", "(", "maml_hr_img", ".", "size", "[", "1", "]", "-", "self", ".", "patch_size", ")", "\n", "maml_hr_img", "=", "maml_hr_img", ".", "crop", "(", "(", "left", ",", "upper", ",", "left", "+", "self", ".", "patch_size", ",", "upper", "+", "self", ".", "patch_size", ")", ")", "\n", "\n", "", "lev2", "=", "maml_hr_img", ".", "size", "\n", "lev1", "=", "(", "lev2", "[", "0", "]", "//", "2", ",", "lev2", "[", "1", "]", "//", "2", ")", "\n", "lev0", "=", "(", "lev1", "[", "0", "]", "//", "2", ",", "lev1", "[", "1", "]", "//", "2", ")", "\n", "\n", "maml_lr_img", "=", "maml_hr_img", ".", "resize", "(", "lev1", ",", "resample", "=", "Image", ".", "BICUBIC", ")", "\n", "maml_bicubic_img", "=", "maml_lr_img", ".", "resize", "(", "lev2", ",", "resample", "=", "Image", ".", "BICUBIC", ")", "\n", "\n", "hr_img", "=", "maml_lr_img", ".", "copy", "(", ")", "\n", "lr_img", "=", "hr_img", ".", "resize", "(", "lev0", ",", "resample", "=", "Image", ".", "BICUBIC", ")", "\n", "bicubic_img", "=", "lr_img", ".", "resize", "(", "lev1", ",", "resample", "=", "Image", ".", "BICUBIC", ")", "\n", "\n", "maml_hr_img", "=", "np", ".", "array", "(", "maml_hr_img", ",", "dtype", "=", "np", ".", "float32", ",", "ndmin", "=", "4", ")", "\n", "maml_lr_img", "=", "np", ".", "array", "(", "maml_lr_img", ",", "dtype", "=", "np", ".", "float32", ",", "ndmin", "=", "4", ")", "\n", "maml_bicubic_img", "=", "np", ".", "array", "(", "maml_bicubic_img", ",", "dtype", "=", "np", ".", "float32", ",", "ndmin", "=", "4", ")", "\n", "hr_img", "=", "np", ".", "array", "(", "hr_img", ",", "dtype", "=", "np", ".", "float32", ",", "ndmin", "=", "4", ")", "\n", "lr_img", "=", "np", ".", "array", "(", "lr_img", ",", "dtype", "=", "np", ".", "float32", ",", "ndmin", "=", "4", ")", "\n", "bicubic_img", "=", "np", ".", "array", "(", "bicubic_img", ",", "dtype", "=", "np", ".", "float32", ",", "ndmin", "=", "4", ")", "\n", "\n", "return", "lr_img", ",", "bicubic_img", ",", "hr_img", ",", "maml_lr_img", ",", "maml_bicubic_img", ",", "maml_hr_img", "", "", "", ""]], "home.repos.pwc.inspect_result.parkseobin_MLSR.None.IDN_definition.IDN": [[4, 14], ["tensorflow.identity", "tensorflow.variable_scope", "tensorflow.layers.conv2d", "tensorflow.layers.conv2d", "range", "IDN_definition.distillation", "IDN_definition.upsample", "str"], "function", ["home.repos.pwc.inspect_result.parkseobin_MLSR.None.IDN_definition.distillation", "home.repos.pwc.inspect_result.parkseobin_MLSR.None.IDN_definition.upsample"], ["def", "IDN", "(", "t_image", ",", "t_image_bicubic", ",", "scale", ",", "reuse", "=", "False", ")", ":", "\n", "    ", "t_image_bicubic", "=", "tf", ".", "identity", "(", "t_image_bicubic", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"IDN\"", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "conv1", "=", "tf", ".", "layers", ".", "conv2d", "(", "t_image", ",", "64", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "padding", "=", "'same'", ",", "activation", "=", "lrelu", ",", "name", "=", "'conv1'", ")", "\n", "conv2", "=", "tf", ".", "layers", ".", "conv2d", "(", "conv1", ",", "64", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "padding", "=", "'same'", ",", "activation", "=", "lrelu", ",", "name", "=", "'conv2'", ")", "\n", "n", "=", "conv2", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "n", "=", "distillation", "(", "n", ",", "name", "=", "'distill/%i'", "%", "i", ")", "\n", "", "output", "=", "upsample", "(", "n", ",", "scale", "=", "scale", ",", "features", "=", "64", ",", "name", "=", "str", "(", "scale", ")", ")", "+", "t_image_bicubic", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.parkseobin_MLSR.None.IDN_definition.distillation": [[15, 26], ["tensorflow.layers.conv2d", "IDN_definition.GroupConv2d", "tensorflow.layers.conv2d", "tensorflow.split", "tensorflow.layers.conv2d", "IDN_definition.GroupConv2d", "tensorflow.layers.conv2d", "tensorflow.layers.conv2d", "tensorflow.concat"], "function", ["home.repos.pwc.inspect_result.parkseobin_MLSR.None.IDN_definition.GroupConv2d", "home.repos.pwc.inspect_result.parkseobin_MLSR.None.IDN_definition.GroupConv2d"], ["", "def", "distillation", "(", "x", ",", "name", "=", "''", ")", ":", "\n", "    ", "tmp", "=", "tf", ".", "layers", ".", "conv2d", "(", "x", ",", "48", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "padding", "=", "'same'", ",", "activation", "=", "lrelu", ",", "name", "=", "name", "+", "'/conv1'", ")", "\n", "tmp", "=", "GroupConv2d", "(", "tmp", ",", "act", "=", "lrelu", ",", "name", "=", "name", "+", "'/conv2'", ")", "\n", "tmp", "=", "tf", ".", "layers", ".", "conv2d", "(", "tmp", ",", "64", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "padding", "=", "'same'", ",", "activation", "=", "lrelu", ",", "name", "=", "name", "+", "'/conv3'", ")", "\n", "tmp1", ",", "tmp2", "=", "tf", ".", "split", "(", "axis", "=", "3", ",", "num_or_size_splits", "=", "[", "16", ",", "48", "]", ",", "value", "=", "tmp", ")", "\n", "tmp2", "=", "tf", ".", "layers", ".", "conv2d", "(", "tmp2", ",", "64", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "padding", "=", "'same'", ",", "activation", "=", "lrelu", ",", "name", "=", "name", "+", "'/conv4'", ")", "\n", "tmp2", "=", "GroupConv2d", "(", "tmp2", ",", "n_filter", "=", "48", ",", "act", "=", "lrelu", ",", "name", "=", "name", "+", "'/conv5'", ")", "\n", "tmp2", "=", "tf", ".", "layers", ".", "conv2d", "(", "tmp2", ",", "80", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "padding", "=", "'same'", ",", "activation", "=", "lrelu", ",", "name", "=", "name", "+", "'/conv6'", ")", "\n", "output", "=", "tf", ".", "concat", "(", "axis", "=", "3", ",", "values", "=", "[", "x", ",", "tmp1", "]", ")", "+", "tmp2", "\n", "output", "=", "tf", ".", "layers", ".", "conv2d", "(", "output", ",", "64", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "padding", "=", "'same'", ",", "activation", "=", "lrelu", ",", "name", "=", "name", "+", "'/conv7'", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.parkseobin_MLSR.None.IDN_definition.lrelu": [[28, 30], ["tensorflow.maximum"], "function", ["None"], ["", "def", "lrelu", "(", "x", ",", "alpha", "=", "0.05", ")", ":", "\n", "    ", "return", "tf", ".", "maximum", "(", "alpha", "*", "x", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.parkseobin_MLSR.None.IDN_definition._phase_shift": [[32, 34], ["tensorflow.depth_to_space"], "function", ["None"], ["", "def", "_phase_shift", "(", "I", ",", "r", ")", ":", "\n", "    ", "return", "tf", ".", "depth_to_space", "(", "I", ",", "r", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.parkseobin_MLSR.None.IDN_definition.PS": [[36, 43], ["tensorflow.split", "tensorflow.concat", "IDN_definition._phase_shift", "IDN_definition._phase_shift"], "function", ["home.repos.pwc.inspect_result.parkseobin_MLSR.None.IDN_definition._phase_shift", "home.repos.pwc.inspect_result.parkseobin_MLSR.None.IDN_definition._phase_shift"], ["", "def", "PS", "(", "X", ",", "r", ",", "color", "=", "False", ")", ":", "\n", "    ", "if", "color", ":", "\n", "        ", "Xc", "=", "tf", ".", "split", "(", "X", ",", "3", ",", "3", ")", "# tf.split(value, num_or_size_splits, axis=0)", "\n", "X", "=", "tf", ".", "concat", "(", "[", "_phase_shift", "(", "x", ",", "r", ")", "for", "x", "in", "Xc", "]", ",", "3", ")", "\n", "", "else", ":", "\n", "        ", "X", "=", "_phase_shift", "(", "X", ",", "r", ")", "\n", "", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.parkseobin_MLSR.None.IDN_definition.upsample": [[44, 51], ["tensorflow.variable_scope", "tensorflow.layers.conv2d", "tensorflow.layers.conv2d", "IDN_definition.PS"], "function", ["home.repos.pwc.inspect_result.parkseobin_MLSR.None.IDN_definition.PS"], ["", "def", "upsample", "(", "x", ",", "scale", "=", "4", ",", "features", "=", "32", ",", "name", "=", "None", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "        ", "x", "=", "tf", ".", "layers", ".", "conv2d", "(", "x", ",", "features", ",", "3", ",", "padding", "=", "'same'", ")", "\n", "ps_features", "=", "3", "*", "(", "scale", "**", "2", ")", "\n", "x", "=", "tf", ".", "layers", ".", "conv2d", "(", "x", ",", "ps_features", ",", "3", ",", "padding", "=", "'same'", ")", "\n", "x", "=", "PS", "(", "x", ",", "scale", ",", "color", "=", "True", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.parkseobin_MLSR.None.IDN_definition.GroupConv2d": [[52, 78], ["int", "tensorflow.nn.conv2d", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.bias_add", "x.get_shape", "groupConv", "tensorflow.split", "tensorflow.split", "tensorflow.concat", "IDN_definition.lrelu", "groupConv", "zip"], "function", ["home.repos.pwc.inspect_result.parkseobin_MLSR.None.IDN_definition.lrelu"], ["", "def", "GroupConv2d", "(", "x", ",", "n_filter", "=", "32", ",", "filter_size", "=", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "n_group", "=", "4", ",", "act", "=", "None", ",", "padding", "=", "'SAME'", ",", "name", "=", "None", ")", ":", "\n", "    ", "groupConv", "=", "lambda", "i", ",", "k", ":", "tf", ".", "nn", ".", "conv2d", "(", "i", ",", "k", ",", "strides", "=", "[", "1", ",", "strides", "[", "0", "]", ",", "strides", "[", "1", "]", ",", "1", "]", ",", "padding", "=", "padding", ")", "\n", "channels", "=", "int", "(", "x", ".", "get_shape", "(", ")", "[", "-", "1", "]", ")", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "        ", "We", "=", "tf", ".", "get_variable", "(", "\n", "name", "=", "'W'", ",", "shape", "=", "[", "filter_size", "[", "0", "]", ",", "filter_size", "[", "1", "]", ",", "channels", "/", "n_group", ",", "n_filter", "]", ",", "trainable", "=", "True", "\n", ")", "\n", "\n", "if", "n_group", "==", "1", ":", "\n", "            ", "outputs", "=", "groupConv", "(", "x", ",", "We", ")", "\n", "", "else", ":", "\n", "            ", "inputGroups", "=", "tf", ".", "split", "(", "axis", "=", "3", ",", "num_or_size_splits", "=", "n_group", ",", "value", "=", "x", ")", "\n", "weightsGroups", "=", "tf", ".", "split", "(", "axis", "=", "3", ",", "num_or_size_splits", "=", "n_group", ",", "value", "=", "We", ")", "\n", "convGroups", "=", "[", "groupConv", "(", "i", ",", "k", ")", "for", "i", ",", "k", "in", "zip", "(", "inputGroups", ",", "weightsGroups", ")", "]", "\n", "\n", "outputs", "=", "tf", ".", "concat", "(", "axis", "=", "3", ",", "values", "=", "convGroups", ")", "\n", "\n", "", "b", "=", "tf", ".", "get_variable", "(", "\n", "name", "=", "'b'", ",", "shape", "=", "n_filter", ",", "trainable", "=", "True", "\n", ")", "\n", "\n", "outputs", "=", "tf", ".", "nn", ".", "bias_add", "(", "outputs", ",", "b", ",", "name", "=", "'bias_add'", ")", "\n", "\n", "if", "act", ":", "\n", "            ", "outputs", "=", "lrelu", "(", "outputs", ")", "\n", "", "", "return", "outputs", "", "", ""]]}