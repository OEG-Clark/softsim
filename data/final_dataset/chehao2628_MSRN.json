{"home.repos.pwc.inspect_result.chehao2628_MSRN.None.LabelEmbedding.GraphAttentionLayer.__init__": [[8, 21], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.voc.Voc2007Classification.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "dropout", "=", "0", ",", "alpha", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "GraphAttentionLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "alpha", "=", "alpha", "\n", "\n", "self", ".", "W", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "size", "=", "(", "in_features", ",", "out_features", ")", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "W", ".", "data", ",", "gain", "=", "1.414", ")", "\n", "self", ".", "a", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "size", "=", "(", "2", "*", "out_features", ",", "1", ")", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "a", ".", "data", ",", "gain", "=", "1.414", ")", "\n", "\n", "self", ".", "leakyrelu", "=", "nn", ".", "LeakyReLU", "(", "self", ".", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.LabelEmbedding.GraphAttentionLayer.forward": [[22, 36], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "LabelEmbedding.GraphAttentionLayer.leakyrelu", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.softmax", "torch.softmax", "torch.softmax", "torch.dropout", "torch.dropout", "torch.dropout", "torch.elu", "torch.elu", "torch.elu", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul.repeat().view", "torch.matmul.repeat().view", "torch.matmul.repeat().view", "torch.matmul.repeat", "torch.matmul.repeat", "torch.matmul.repeat", "torch.matmul.repeat", "torch.matmul.repeat", "torch.matmul.repeat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "adj", ")", ":", "\n", "        ", "h", "=", "torch", ".", "matmul", "(", "input", ",", "self", ".", "W", ")", "# shape [N, out_features]", "\n", "N", "=", "h", ".", "size", "(", ")", "[", "0", "]", "\n", "\n", "a_input", "=", "torch", ".", "cat", "(", "[", "h", ".", "repeat", "(", "1", ",", "N", ")", ".", "view", "(", "N", "*", "N", ",", "-", "1", ")", ",", "h", ".", "repeat", "(", "N", ",", "1", ")", "]", ",", "dim", "=", "1", ")", ".", "view", "(", "N", ",", "-", "1", ",", "\n", "2", "*", "self", ".", "out_features", ")", "# shape[N, N, 2*out_features]", "\n", "e", "=", "self", ".", "leakyrelu", "(", "torch", ".", "matmul", "(", "a_input", ",", "self", ".", "a", ")", ".", "squeeze", "(", "2", ")", ")", "# [N,N,1] -> [N,N]", "\n", "\n", "zero_vec", "=", "-", "1e12", "*", "torch", ".", "ones_like", "(", "e", ")", "\n", "attention", "=", "torch", ".", "where", "(", "adj", ">", "0", ",", "e", ",", "zero_vec", ")", "\n", "attention", "=", "F", ".", "softmax", "(", "attention", ",", "dim", "=", "1", ")", "\n", "attention", "=", "F", ".", "dropout", "(", "attention", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "h_prime", "=", "torch", ".", "matmul", "(", "attention", ",", "h", ")", "+", "h", "# [N,N], [N, out_features] --> [N, out_features]", "\n", "return", "F", ".", "elu", "(", "h_prime", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.LabelEmbedding.BatchedDiffPool.__init__": [[40, 47], ["torch.Module.__init__", "LabelEmbedding.GraphAttentionLayer", "LabelEmbedding.GraphAttentionLayer"], "methods", ["home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.voc.Voc2007Classification.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nfeat", ",", "nnext", ",", "nhid", ",", "is_final", "=", "False", ")", ":", "\n", "        ", "super", "(", "BatchedDiffPool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "is_final", "=", "is_final", "\n", "self", ".", "embed", "=", "GraphAttentionLayer", "(", "nfeat", ",", "nhid", ")", "\n", "self", ".", "assign_mat", "=", "GraphAttentionLayer", "(", "nfeat", ",", "nnext", ")", "\n", "self", ".", "log", "=", "{", "}", "\n", "self", ".", "entropy_loss", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.LabelEmbedding.BatchedDiffPool.forward": [[48, 57], ["LabelEmbedding.BatchedDiffPool.embed", "LabelEmbedding.BatchedDiffPool.assign_mat", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.softmax.transpose().matmul().matmul", "torch.softmax.cpu().numpy", "torch.softmax.transpose", "torch.softmax.transpose().matmul", "torch.softmax.cpu", "torch.softmax.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "adj", ",", "mask", "=", "None", ",", "log", "=", "False", ")", ":", "\n", "        ", "z_l", "=", "self", ".", "embed", "(", "x", ",", "adj", ")", "\n", "assign_mat", "=", "self", ".", "assign_mat", "(", "x", ",", "adj", ")", "\n", "s_l", "=", "F", ".", "softmax", "(", "assign_mat", ",", "dim", "=", "-", "1", ")", "\n", "if", "log", ":", "\n", "            ", "self", ".", "log", "[", "'s'", "]", "=", "s_l", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "xnext", "=", "torch", ".", "matmul", "(", "s_l", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ",", "z_l", ")", "\n", "anext", "=", "(", "s_l", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", ".", "matmul", "(", "adj", ")", ".", "matmul", "(", "s_l", ")", "\n", "return", "xnext", ",", "anext", ",", "s_l", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.LabelEmbedding.LabelEmbed.__init__": [[61, 68], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "LabelEmbedding.GraphAttentionLayer", "LabelEmbedding.GraphAttentionLayer"], "methods", ["home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.voc.Voc2007Classification.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "label_dim", "=", "512", "\n", "self", ".", "input_shape", "=", "input_size", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "\n", "GraphAttentionLayer", "(", "input_size", ",", "300", ")", ",", "\n", "GraphAttentionLayer", "(", "300", ",", "self", ".", "label_dim", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.LabelEmbedding.LabelEmbed.forward": [[70, 74], ["layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "adj", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "x", "=", "layer", "(", "x", ",", "adj", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.LabelEmbedding.GroupEmbed.__init__": [[78, 83], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "LabelEmbedding.BatchedDiffPool"], "methods", ["home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.voc.Voc2007Classification.__init__"], ["    ", "def", "__init__", "(", "self", ",", "pool_size", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "label_dim", "=", "512", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "\n", "BatchedDiffPool", "(", "self", ".", "label_dim", ",", "pool_size", ",", "self", ".", "label_dim", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.LabelEmbedding.GroupEmbed.forward": [[85, 92], ["isinstance", "layer", "isinstance", "layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "adj", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "GraphAttentionLayer", ")", ":", "\n", "                ", "x", "=", "layer", "(", "x", ",", "adj", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "BatchedDiffPool", ")", ":", "\n", "                ", "x", ",", "adj", ",", "assign_mat", "=", "layer", "(", "x", ",", "adj", ")", "\n", "", "", "return", "x", ",", "assign_mat", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.demo_voc2007_gcn.main_voc2007": [[47, 84], ["parser.parse_args", "torch.cuda.is_available", "DataLoader.voc.Voc2007Classification", "DataLoader.voc.Voc2007Classification", "models.MSGDN", "load_pretrain_model.cuda", "nn.MultiLabelSoftMarginLoss", "torch.optim.SGD", "engine.GCNMultiLabelMAPEngine", "engine.GCNMultiLabelMAPEngine.learning", "load_pretrain_model", "load_pretrain_model.get_config_optim"], "function", ["home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine.learning", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.load_pretrain_model", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.models.MSGDN.get_config_optim"], ["def", "main_voc2007", "(", ")", ":", "\n", "    ", "global", "args", ",", "best_prec1", ",", "use_gpu", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "use_gpu", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "# define dataset", "\n", "train_dataset", "=", "Voc2007Classification", "(", "args", ".", "data", ",", "'trainval'", ",", "inp_name", "=", "'data/voc/voc_glove_word2vec.pkl'", ")", "\n", "val_dataset", "=", "Voc2007Classification", "(", "args", ".", "data", ",", "'test'", ",", "inp_name", "=", "'data/voc/voc_glove_word2vec.pkl'", ")", "\n", "num_classes", "=", "20", "\n", "# load model", "\n", "# model = SGDNN(num_classes=num_classes, t=0.4, adj_file='data/voc/voc_adj.pkl')", "\n", "model", "=", "MSGDN", "(", "num_classes", ",", "args", ".", "pool_ratio", ",", "args", ".", "backbone", ",", "args", ".", "graph_file", ")", "\n", "\n", "if", "args", ".", "pretrained", ":", "\n", "        ", "model", "=", "load_pretrain_model", "(", "model", ",", "args", ")", "\n", "", "model", ".", "cuda", "(", ")", "\n", "\n", "# define loss function (criterion)", "\n", "criterion", "=", "nn", ".", "MultiLabelSoftMarginLoss", "(", ")", "\n", "# define optimizer", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "get_config_optim", "(", "args", ".", "lr", ")", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "state", "=", "{", "'batch_size'", ":", "args", ".", "batch_size", ",", "'image_size'", ":", "args", ".", "image_size", ",", "'max_epochs'", ":", "args", ".", "epochs", ",", "\n", "'evaluate'", ":", "args", ".", "evaluate", ",", "'resume'", ":", "args", ".", "resume", ",", "'num_classes'", ":", "num_classes", "}", "\n", "state", "[", "'difficult_examples'", "]", "=", "True", "\n", "state", "[", "'save_model_path'", "]", "=", "'checkpoint/voc2007/'", "\n", "state", "[", "'workers'", "]", "=", "args", ".", "workers", "\n", "state", "[", "'epoch_step'", "]", "=", "args", ".", "epoch_step", "\n", "state", "[", "'lr'", "]", "=", "args", ".", "lr", "\n", "if", "args", ".", "evaluate", ":", "\n", "        ", "state", "[", "'evaluate'", "]", "=", "True", "\n", "", "engine", "=", "GCNMultiLabelMAPEngine", "(", "state", ")", "\n", "engine", ".", "learning", "(", "model", ",", "criterion", ",", "train_dataset", ",", "val_dataset", ",", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.models.MSGDN.__init__": [[10, 40], ["torch.Module.__init__", "ResNet.resnet101", "int", "LabelEmbedding.LabelEmbed", "LabelEmbedding.GroupEmbed", "torch.ModuleList", "models.MSGDN.ProjectM.append", "models.MSGDN.ProjectM.append", "models.MSGDN.ProjectM.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "models.MSGDN.reset_parameters", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.voc.Voc2007Classification.__init__", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.ResNet.resnet101", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.models.MSGDN.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "pool_ratio", ",", "model_name", ",", "adj_file", ")", ":", "\n", "        ", "super", "(", "MSGDN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "resnet_101", "=", "resnet101", "(", ")", "\n", "self", ".", "adj_file", "=", "adj_file", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_node", "=", "int", "(", "pool_ratio", "*", "num_classes", ")", "\n", "\n", "self", ".", "label_dim", "=", "512", "\n", "self", ".", "num_branch", "=", "3", "\n", "\n", "self", ".", "label_embed", "=", "LabelEmbed", "(", "256", ")", "\n", "self", ".", "group_embed", "=", "GroupEmbed", "(", "self", ".", "num_node", ")", "\n", "\n", "# build Projection P", "\n", "self", ".", "ProjectM", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "ProjectM", ".", "append", "(", "nn", ".", "Conv2d", "(", "512", ",", "self", ".", "label_dim", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "ProjectM", ".", "append", "(", "nn", ".", "Conv2d", "(", "1024", ",", "self", ".", "label_dim", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "ProjectM", ".", "append", "(", "nn", ".", "Conv2d", "(", "2048", ",", "self", ".", "label_dim", ",", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "fc_label", "=", "nn", ".", "Linear", "(", "300", ",", "256", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "self", ".", "num_branch", "*", "self", ".", "label_dim", "*", "(", "self", ".", "num_classes", "+", "self", ".", "num_node", ")", ",", "2048", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "2048", ",", "self", ".", "num_classes", ")", "\n", "\n", "self", ".", "W", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "num_classes", ",", "self", ".", "num_branch", "*", "self", ".", "label_dim", "*", "2", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "B", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "num_classes", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n", "self", ".", "image_normalization_mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "self", ".", "image_normalization_std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.models.MSGDN.forward": [[41, 122], ["util.gen_A", "torch.from_numpy().float().cuda", "util.gen_adj().detach", "torch.as_tensor().cuda", "models.MSGDN.resnet_101", "models.MSGDN.label_embed", "models.MSGDN.group_embed", "assign_mat.argmax", "torch.Tensor().cuda", "range", "models.MSGDN.view", "group_embed.view", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "range", "torch.cat", "torch.tanh", "connected.view.view.view", "F.leaky_relu", "models.MSGDN.fc2", "models.MSGDN.fc_label", "F.relu", "torch.dist", "torch.Tensor().cuda.squeeze", "len", "feat.size", "torch.transpose", "torch.transpose.unsqueeze", "sl.contiguous().view.contiguous().view.contiguous().view", "sg.contiguous().view.contiguous().view.contiguous().view", "p_feat.contiguous().view.contiguous().view.contiguous().view", "torch.sum", "torch.sum", "torch.cat", "torch.cat", "models.MSGDN.fc1", "torch.from_numpy().float", "util.gen_adj", "torch.as_tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.transpose", "torch.mul", "torch.mul", "F.softmax", "F.softmax", "torch.mul", "torch.mul", "sl.contiguous().view.contiguous().view.contiguous", "sg.contiguous().view.contiguous().view.contiguous", "p_feat.contiguous().view.contiguous().view.contiguous", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.gen_A", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.gen_adj"], ["", "def", "forward", "(", "self", ",", "img", ",", "inp", ")", ":", "\n", "        ", "t", "=", "0.4", "\n", "_adj", "=", "gen_A", "(", "self", ".", "num_classes", ",", "t", ",", "self", ".", "adj_file", ")", "\n", "self", ".", "A", "=", "torch", ".", "from_numpy", "(", "_adj", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "adj", "=", "gen_adj", "(", "self", ".", "A", ")", ".", "detach", "(", ")", "\n", "inp", "=", "inp", "[", "0", "]", "\n", "inp", "=", "torch", ".", "as_tensor", "(", "inp", ")", ".", "cuda", "(", ")", "\n", "\n", "# img: image feature; X: label embedding; A: adj matrix", "\n", "img_features", "=", "self", ".", "resnet_101", "(", "img", ")", "\n", "# [[8, 256, 56, 56],[8, 1024, 14, 14],[8, 2048, 3, 3]]", "\n", "# f1, f2, f3, fx = img_features", "\n", "label_embed", "=", "self", ".", "label_embed", "(", "self", ".", "fc_label", "(", "inp", ")", ",", "adj", ")", "# [num_classes, label_dim]", "\n", "group_embed", ",", "assign_mat", "=", "self", ".", "group_embed", "(", "F", ".", "relu", "(", "label_embed", ")", ",", "adj", ")", "# [4, embedding_length], [20, 4]", "\n", "\n", "group_predict", "=", "assign_mat", ".", "argmax", "(", "1", ")", "\n", "# group embed loss", "\n", "group_loss", "=", "torch", ".", "Tensor", "(", "[", "0", "]", ")", ".", "cuda", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "            ", "group_loss", "+=", "torch", ".", "dist", "(", "label_embed", "[", "i", "]", ",", "group_embed", "[", "group_predict", "[", "i", "]", "]", ")", "\n", "", "group_loss", "=", "0.0001", "*", "group_loss", ".", "squeeze", "(", ")", "\n", "\n", "trans_label_feat", "=", "label_embed", ".", "view", "(", "1", ",", "1", ",", "1", ",", "self", ".", "num_classes", ",", "self", ".", "label_dim", ")", "\n", "trans_group_feat", "=", "group_embed", ".", "view", "(", "1", ",", "1", ",", "1", ",", "self", ".", "num_node", ",", "self", ".", "label_dim", ")", "\n", "label_dr", "=", "torch", ".", "Tensor", "(", ")", ".", "cuda", "(", ")", "\n", "group_dr", "=", "torch", ".", "Tensor", "(", ")", ".", "cuda", "(", ")", "\n", "label_dr", "=", "Variable", "(", "label_dr", ",", "requires_grad", "=", "True", ")", "\n", "group_dr", "=", "Variable", "(", "group_dr", ",", "requires_grad", "=", "True", ")", "\n", "\n", "for", "s", "in", "range", "(", "len", "(", "img_features", ")", ")", ":", "\n", "            ", "feat", "=", "img_features", "[", "s", "]", "\n", "self", ".", "batch_size", ",", "channel", ",", "w", ",", "h", "=", "feat", ".", "size", "(", ")", "\n", "\n", "feat", "=", "self", ".", "ProjectM", "[", "s", "]", "(", "feat", ")", "# [batch_size, dim, w, h]", "\n", "\n", "# Adjust the dimensions of image feature embedding", "\n", "trans_img_feat", "=", "torch", ".", "transpose", "(", "torch", ".", "transpose", "(", "feat", ",", "1", ",", "2", ")", ",", "2", ",", "3", ")", "# [batch_size, w, h, 256]", "\n", "p_feat", "=", "trans_img_feat", ".", "unsqueeze", "(", "3", ")", "# [batch_size, w, h, 1, 256]", "\n", "\n", "# Cross Modality", "\n", "sl", ",", "sg", "=", "torch", ".", "mul", "(", "p_feat", ",", "trans_label_feat", ")", ",", "torch", ".", "mul", "(", "p_feat", ",", "\n", "trans_group_feat", ")", "# [batch_size, w, h, 20,30], [batch_size, w, h, 4,30]", "\n", "# Normalization", "\n", "sl", "=", "sl", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "batch_size", ",", "w", "*", "h", ",", "self", ".", "num_classes", ",", "self", ".", "label_dim", ")", "\n", "sg", "=", "sg", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "batch_size", ",", "w", "*", "h", ",", "self", ".", "num_node", ",", "self", ".", "label_dim", ")", "\n", "nl", ",", "ng", "=", "F", ".", "softmax", "(", "sl", ",", "dim", "=", "1", ")", ",", "F", ".", "softmax", "(", "sg", ",", "dim", "=", "1", ")", "# [batch_size, w, h, 20,30], [batch_size, w, h, 4,30]", "\n", "\n", "# Weighted Aggregation", "\n", "p_feat", "=", "p_feat", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "batch_size", ",", "w", "*", "h", ",", "1", ",", "self", ".", "label_dim", ")", "\n", "agg_l_feat", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "nl", ",", "p_feat", ")", ",", "1", ")", "# [batch_size, dim, 20,1]", "\n", "agg_g_feat", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "ng", ",", "p_feat", ")", ",", "1", ")", "# [batch_size, dim, node,1]", "\n", "\n", "# concat and predict", "\n", "label_dr", "=", "torch", ".", "cat", "(", "(", "label_dr", ",", "agg_l_feat", ")", ",", "-", "1", ")", "# batch_size x (n*channel) x num_classes", "\n", "group_dr", "=", "torch", ".", "cat", "(", "(", "group_dr", ",", "agg_g_feat", ")", ",", "-", "1", ")", "# batch_size x (n*channel) x num_node", "\n", "\n", "###################################################################################################", "\n", "# comment this block and uncomment the next block if applying element wise predict", "\n", "# concat and predict", "\n", "", "connected", "=", "torch", ".", "cat", "(", "(", "label_dr", ",", "group_dr", ")", ",", "1", ")", "# batch_size x (n*channel) x (num_node+num_classes)", "\n", "connected", "=", "torch", ".", "tanh", "(", "connected", ")", "\n", "connected", "=", "connected", ".", "view", "(", "self", ".", "batch_size", ",", "-", "1", ")", "\n", "\n", "# MLP", "\n", "res", "=", "F", ".", "leaky_relu", "(", "self", ".", "fc1", "(", "connected", ")", ")", "\n", "res", "=", "self", ".", "fc2", "(", "res", ")", "\n", "###################################################################################################", "\n", "\n", "###################################################################################################", "\n", "# group_dr = group_dr.permute(0, 2, 1)", "\n", "# group_dr = torch.matmul(group_dr, assign_mat.permute(1, 0))", "\n", "# group_dr = group_dr.permute(0, 2, 1)", "\n", "#", "\n", "# connected = torch.cat((label_dr, group_dr), 2)  # batch_size x (n) x (num_node+num_classes)", "\n", "# connected = torch.tanh(connected)", "\n", "#", "\n", "# res = torch.sum(self.W * connected, 2)", "\n", "# res = res + self.B", "\n", "###################################################################################################", "\n", "\n", "return", "res", ",", "group_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.models.MSGDN.reset_parameters": [[123, 130], ["range", "math.sqrt", "models.MSGDN.W[].data.uniform_", "range", "models.MSGDN.W.size", "models.MSGDN.B[].data.uniform_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "W", ".", "size", "(", "1", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "            ", "self", ".", "W", "[", "i", "]", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "", "if", "self", ".", "B", "is", "not", "None", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "                ", "self", ".", "B", "[", "i", "]", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.models.MSGDN.get_config_optim": [[131, 140], ["models.MSGDN.resnet_101.parameters", "models.MSGDN.label_embed.parameters", "models.MSGDN.group_embed.parameters", "models.MSGDN.ProjectM.parameters", "models.MSGDN.fc_label.parameters", "models.MSGDN.fc1.parameters", "models.MSGDN.fc2.parameters"], "methods", ["None"], ["", "", "", "def", "get_config_optim", "(", "self", ",", "lr", ")", ":", "\n", "        ", "return", "[", "\n", "{", "'params'", ":", "self", ".", "resnet_101", ".", "parameters", "(", ")", ",", "'lr'", ":", "lr", "*", "0.1", "}", ",", "\n", "{", "'params'", ":", "self", ".", "label_embed", ".", "parameters", "(", ")", ",", "'lr'", ":", "lr", "}", ",", "\n", "{", "'params'", ":", "self", ".", "group_embed", ".", "parameters", "(", ")", ",", "'lr'", ":", "lr", "}", ",", "\n", "{", "'params'", ":", "self", ".", "ProjectM", ".", "parameters", "(", ")", ",", "'lr'", ":", "lr", "}", ",", "\n", "{", "'params'", ":", "self", ".", "fc_label", ".", "parameters", "(", ")", ",", "'lr'", ":", "lr", "}", ",", "\n", "{", "'params'", ":", "self", ".", "fc1", ".", "parameters", "(", ")", ",", "'lr'", ":", "lr", "}", ",", "\n", "{", "'params'", ":", "self", ".", "fc2", ".", "parameters", "(", ")", ",", "'lr'", ":", "lr", "}", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.DataLoaderX.__iter__": [[17, 19], ["prefetch_generator.BackgroundGenerator", "super().__iter__"], "methods", ["home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.DataLoaderX.__iter__"], ["    ", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "BackgroundGenerator", "(", "super", "(", ")", ".", "__iter__", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine.__init__": [[25, 64], ["torchnet.meter.AverageValueMeter", "torchnet.meter.AverageValueMeter", "torchnet.meter.AverageValueMeter", "engine.Engine._state", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "engine.Engine._state", "engine.Engine._state", "engine.Engine._state", "engine.Engine._state", "engine.Engine._state", "engine.Engine._state", "engine.Engine._state", "engine.Engine._state", "engine.Engine._state", "engine.Engine._state"], "methods", ["home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine._state", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine._state", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine._state", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine._state", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine._state", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine._state", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine._state", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine._state", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine._state", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine._state", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine._state"], ["    ", "def", "__init__", "(", "self", ",", "state", "=", "{", "}", ")", ":", "\n", "        ", "self", ".", "state", "=", "state", "\n", "if", "self", ".", "_state", "(", "'use_gpu'", ")", "is", "None", ":", "\n", "            ", "self", ".", "state", "[", "'use_gpu'", "]", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "", "if", "self", ".", "_state", "(", "'image_size'", ")", "is", "None", ":", "\n", "            ", "self", ".", "state", "[", "'image_size'", "]", "=", "224", "\n", "\n", "", "if", "self", ".", "_state", "(", "'batch_size'", ")", "is", "None", ":", "\n", "            ", "self", ".", "state", "[", "'batch_size'", "]", "=", "64", "\n", "\n", "", "if", "self", ".", "_state", "(", "'workers'", ")", "is", "None", ":", "\n", "            ", "self", ".", "state", "[", "'workers'", "]", "=", "25", "\n", "\n", "", "if", "self", ".", "_state", "(", "'device_ids'", ")", "is", "None", ":", "\n", "            ", "self", ".", "state", "[", "'device_ids'", "]", "=", "None", "\n", "\n", "", "if", "self", ".", "_state", "(", "'evaluate'", ")", "is", "None", ":", "\n", "            ", "self", ".", "state", "[", "'evaluate'", "]", "=", "False", "\n", "\n", "", "if", "self", ".", "_state", "(", "'start_epoch'", ")", "is", "None", ":", "\n", "            ", "self", ".", "state", "[", "'start_epoch'", "]", "=", "0", "\n", "\n", "", "if", "self", ".", "_state", "(", "'max_epochs'", ")", "is", "None", ":", "\n", "            ", "self", ".", "state", "[", "'max_epochs'", "]", "=", "90", "\n", "\n", "", "if", "self", ".", "_state", "(", "'epoch_step'", ")", "is", "None", ":", "\n", "            ", "self", ".", "state", "[", "'epoch_step'", "]", "=", "[", "]", "\n", "\n", "# meters", "\n", "", "self", ".", "state", "[", "'meter_loss'", "]", "=", "tnt", ".", "meter", ".", "AverageValueMeter", "(", ")", "\n", "# time measure", "\n", "self", ".", "state", "[", "'batch_time'", "]", "=", "tnt", ".", "meter", ".", "AverageValueMeter", "(", ")", "\n", "self", ".", "state", "[", "'data_time'", "]", "=", "tnt", ".", "meter", ".", "AverageValueMeter", "(", ")", "\n", "# display parameters", "\n", "if", "self", ".", "_state", "(", "'use_pb'", ")", "is", "None", ":", "\n", "            ", "self", ".", "state", "[", "'use_pb'", "]", "=", "True", "\n", "", "if", "self", ".", "_state", "(", "'print_freq'", ")", "is", "None", ":", "\n", "            ", "self", ".", "state", "[", "'print_freq'", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine._state": [[65, 68], ["None"], "methods", ["None"], ["", "", "def", "_state", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "in", "self", ".", "state", ":", "\n", "            ", "return", "self", ".", "state", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine.on_start_epoch": [[69, 73], ["engine.Engine.state[].reset", "engine.Engine.state[].reset", "engine.Engine.state[].reset"], "methods", ["home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.AveragePrecisionMeter.reset", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.AveragePrecisionMeter.reset", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.AveragePrecisionMeter.reset"], ["", "", "def", "on_start_epoch", "(", "self", ",", "training", ",", "model", ",", "criterion", ",", "data_loader", ",", "optimizer", "=", "None", ",", "display", "=", "True", ")", ":", "\n", "        ", "self", ".", "state", "[", "'meter_loss'", "]", ".", "reset", "(", ")", "\n", "self", ".", "state", "[", "'batch_time'", "]", ".", "reset", "(", ")", "\n", "self", ".", "state", "[", "'data_time'", "]", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine.on_end_epoch": [[74, 83], ["engine.Engine.state[].value", "print", "print"], "methods", ["home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.AveragePrecisionMeter.value"], ["", "def", "on_end_epoch", "(", "self", ",", "training", ",", "model", ",", "criterion", ",", "data_loader", ",", "optimizer", "=", "None", ",", "display", "=", "True", ")", ":", "\n", "        ", "loss", "=", "self", ".", "state", "[", "'meter_loss'", "]", ".", "value", "(", ")", "[", "0", "]", "\n", "if", "display", ":", "\n", "            ", "if", "training", ":", "\n", "                ", "print", "(", "'Epoch: [{0}]\\t'", "\n", "'Loss {loss:.4f}'", ".", "format", "(", "self", ".", "state", "[", "'epoch'", "]", ",", "loss", "=", "loss", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'Test: \\t Loss {loss:.4f}'", ".", "format", "(", "loss", "=", "loss", ")", ")", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine.on_start_batch": [[84, 86], ["None"], "methods", ["None"], ["", "def", "on_start_batch", "(", "self", ",", "training", ",", "model", ",", "criterion", ",", "data_loader", ",", "optimizer", "=", "None", ",", "display", "=", "True", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine.on_end_batch": [[87, 114], ["engine.Engine.state[].data.cpu", "engine.Engine.state[].add", "engine.Engine.state[].value", "engine.Engine.state[].value", "engine.Engine.state[].value", "print", "print", "len", "len"], "methods", ["home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.AveragePrecisionMeter.add", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.AveragePrecisionMeter.value", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.AveragePrecisionMeter.value", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.AveragePrecisionMeter.value"], ["", "def", "on_end_batch", "(", "self", ",", "training", ",", "model", ",", "criterion", ",", "data_loader", ",", "optimizer", "=", "None", ",", "display", "=", "True", ")", ":", "\n", "\n", "# record loss", "\n", "        ", "self", ".", "state", "[", "'loss_batch'", "]", "=", "self", ".", "state", "[", "'loss'", "]", ".", "data", ".", "cpu", "(", ")", "\n", "self", ".", "state", "[", "'meter_loss'", "]", ".", "add", "(", "self", ".", "state", "[", "'loss_batch'", "]", ")", "\n", "\n", "if", "display", "and", "self", ".", "state", "[", "'print_freq'", "]", "!=", "0", "and", "self", ".", "state", "[", "'iteration'", "]", "%", "self", ".", "state", "[", "'print_freq'", "]", "==", "0", ":", "\n", "            ", "loss", "=", "self", ".", "state", "[", "'meter_loss'", "]", ".", "value", "(", ")", "[", "0", "]", "\n", "batch_time", "=", "self", ".", "state", "[", "'batch_time'", "]", ".", "value", "(", ")", "[", "0", "]", "\n", "data_time", "=", "self", ".", "state", "[", "'data_time'", "]", ".", "value", "(", ")", "[", "0", "]", "\n", "if", "training", ":", "\n", "                ", "print", "(", "'Epoch: [{0}][{1}/{2}]\\t'", "\n", "'Time {batch_time_current:.3f} ({batch_time:.3f})\\t'", "\n", "'Data {data_time_current:.3f} ({data_time:.3f})\\t'", "\n", "'Loss {loss_current:.4f} ({loss:.4f})'", ".", "format", "(", "\n", "self", ".", "state", "[", "'epoch'", "]", ",", "self", ".", "state", "[", "'iteration'", "]", ",", "len", "(", "data_loader", ")", ",", "\n", "batch_time_current", "=", "self", ".", "state", "[", "'batch_time_current'", "]", ",", "\n", "batch_time", "=", "batch_time", ",", "data_time_current", "=", "self", ".", "state", "[", "'data_time_batch'", "]", ",", "\n", "data_time", "=", "data_time", ",", "loss_current", "=", "self", ".", "state", "[", "'loss_batch'", "]", ",", "loss", "=", "loss", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'Test: [{0}/{1}]\\t'", "\n", "'Time {batch_time_current:.3f} ({batch_time:.3f})\\t'", "\n", "'Data {data_time_current:.3f} ({data_time:.3f})\\t'", "\n", "'Loss {loss_current:.4f} ({loss:.4f})'", ".", "format", "(", "\n", "self", ".", "state", "[", "'iteration'", "]", ",", "len", "(", "data_loader", ")", ",", "batch_time_current", "=", "self", ".", "state", "[", "'batch_time_current'", "]", ",", "\n", "batch_time", "=", "batch_time", ",", "data_time_current", "=", "self", ".", "state", "[", "'data_time_batch'", "]", ",", "\n", "data_time", "=", "data_time", ",", "loss_current", "=", "self", ".", "state", "[", "'loss_batch'", "]", ",", "loss", "=", "loss", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine.on_forward": [[115, 141], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "optimizer.zero_grad", "torch.cuda.amp.GradScaler.scale().backward", "torch.cuda.amp.GradScaler.scale().backward", "torch.cuda.amp.GradScaler.scale().backward", "torch.cuda.amp.GradScaler.scale().backward", "torch.cuda.amp.GradScaler.scale().backward", "torch.cuda.amp.GradScaler.step", "torch.cuda.amp.GradScaler.step", "torch.cuda.amp.GradScaler.step", "torch.cuda.amp.GradScaler.step", "torch.cuda.amp.GradScaler.step", "torch.cuda.amp.GradScaler.update", "torch.cuda.amp.GradScaler.update", "torch.cuda.amp.GradScaler.update", "torch.cuda.amp.GradScaler.update", "torch.cuda.amp.GradScaler.update", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "model", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "model", "criterion", "criterion", "torch.cuda.amp.GradScaler.scale", "torch.cuda.amp.GradScaler.scale", "torch.cuda.amp.GradScaler.scale", "torch.cuda.amp.GradScaler.scale", "torch.cuda.amp.GradScaler.scale"], "methods", ["None"], ["", "", "", "def", "on_forward", "(", "self", ",", "training", ",", "model", ",", "criterion", ",", "data_loader", ",", "optimizer", "=", "None", ",", "display", "=", "True", ")", ":", "\n", "\n", "        ", "input_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "self", ".", "state", "[", "'input'", "]", ")", "\n", "target_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "self", ".", "state", "[", "'target'", "]", ")", "\n", "\n", "scaler", "=", "torch", ".", "cuda", ".", "amp", ".", "GradScaler", "(", ")", "\n", "if", "not", "training", ":", "\n", "            ", "input_var", ".", "volatile", "=", "True", "\n", "target_var", ".", "volatile", "=", "True", "\n", "\n", "# compute output", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "                ", "self", ".", "state", "[", "'output'", "]", "=", "model", "(", "input_var", ")", "\n", "self", ".", "state", "[", "'loss'", "]", "=", "criterion", "(", "self", ".", "state", "[", "'output'", "]", "[", "0", "]", ",", "target_var", ")", "+", "self", ".", "state", "[", "'output'", "]", "[", "1", "]", "\n", "# scaler.scale(self.state['loss']).backward()", "\n", "# scaler.step(optimizer)", "\n", "# scaler.update()", "\n", "\n", "", "", "if", "training", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "                ", "self", ".", "state", "[", "'output'", "]", "=", "model", "(", "input_var", ")", "\n", "self", ".", "state", "[", "'loss'", "]", "=", "criterion", "(", "self", ".", "state", "[", "'output'", "]", "[", "0", "]", ",", "target_var", ")", "+", "self", ".", "state", "[", "'output'", "]", "[", "1", "]", "\n", "", "scaler", ".", "scale", "(", "self", ".", "state", "[", "'loss'", "]", ")", ".", "backward", "(", ")", "\n", "scaler", ".", "step", "(", "optimizer", ")", "\n", "scaler", ".", "update", "(", ")", "\n", "# self.state['loss'].backward()", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine.init_learning": [[144, 166], ["engine.Engine._state", "torchvision.Normalize", "torchvision.Compose", "engine.Engine._state", "torchvision.Normalize", "torchvision.Compose", "util.MultiScaleCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "util.Warp", "torchvision.ToTensor"], "methods", ["home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine._state", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine._state"], ["", "", "def", "init_learning", "(", "self", ",", "model", ",", "criterion", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_state", "(", "'train_transform'", ")", "is", "None", ":", "\n", "            ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "model", ".", "image_normalization_mean", ",", "\n", "std", "=", "model", ".", "image_normalization_std", ")", "\n", "self", ".", "state", "[", "'train_transform'", "]", "=", "transforms", ".", "Compose", "(", "[", "\n", "MultiScaleCrop", "(", "self", ".", "state", "[", "'image_size'", "]", ",", "scales", "=", "(", "1.0", ",", "0.9", ",", "0.8", ",", "0.7", ",", "0.6", ")", ",", "max_distort", "=", "2", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "\n", "", "if", "self", ".", "_state", "(", "'val_transform'", ")", "is", "None", ":", "\n", "            ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "model", ".", "image_normalization_mean", ",", "\n", "std", "=", "model", ".", "image_normalization_std", ")", "\n", "self", ".", "state", "[", "'val_transform'", "]", "=", "transforms", ".", "Compose", "(", "[", "\n", "Warp", "(", "self", ".", "state", "[", "'image_size'", "]", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "\n", "", "self", ".", "state", "[", "'best_score'", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine.learning": [[167, 237], ["engine.Engine.init_learning", "engine.Engine._state", "engine.Engine._state", "engine.DataLoaderX", "engine.DataLoaderX", "range", "engine.Engine._state", "os.path.isfile", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "criterion.cuda.cuda.cuda", "engine.Engine.validate", "engine.Engine.adjust_learning_rate", "print", "engine.Engine.train", "engine.Engine.validate", "max", "engine.Engine.save_checkpoint", "print", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel().cuda.load_state_dict", "torch.nn.DataParallel().cuda.load_state_dict", "torch.nn.DataParallel().cuda.load_state_dict", "torch.nn.DataParallel().cuda.load_state_dict", "torch.nn.DataParallel().cuda.load_state_dict", "print", "print", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "engine.Engine._state", "torch.nn.DataParallel().cuda.module.state_dict", "torch.nn.DataParallel().cuda.module.state_dict", "torch.nn.DataParallel().cuda.module.state_dict", "torch.nn.DataParallel().cuda.module.state_dict", "torch.nn.DataParallel().cuda.module.state_dict", "torch.nn.DataParallel().cuda.state_dict", "torch.nn.DataParallel().cuda.state_dict", "torch.nn.DataParallel().cuda.state_dict", "torch.nn.DataParallel().cuda.state_dict", "torch.nn.DataParallel().cuda.state_dict"], "methods", ["home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine.init_learning", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine._state", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine._state", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine._state", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine.validate", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine.adjust_learning_rate", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine.train", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine.validate", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine.save_checkpoint", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine._state"], ["", "def", "learning", "(", "self", ",", "model", ",", "criterion", ",", "train_dataset", ",", "val_dataset", ",", "optimizer", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "init_learning", "(", "model", ",", "criterion", ")", "\n", "\n", "# define train and val transform", "\n", "train_dataset", ".", "transform", "=", "self", ".", "state", "[", "'train_transform'", "]", "\n", "train_dataset", ".", "target_transform", "=", "self", ".", "_state", "(", "'train_target_transform'", ")", "\n", "val_dataset", ".", "transform", "=", "self", ".", "state", "[", "'val_transform'", "]", "\n", "val_dataset", ".", "target_transform", "=", "self", ".", "_state", "(", "'val_target_transform'", ")", "\n", "\n", "# data loading code", "\n", "train_loader", "=", "DataLoaderX", "(", "train_dataset", ",", "\n", "batch_size", "=", "self", ".", "state", "[", "'batch_size'", "]", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "self", ".", "state", "[", "'workers'", "]", ")", "\n", "\n", "val_loader", "=", "DataLoaderX", "(", "val_dataset", ",", "\n", "batch_size", "=", "self", ".", "state", "[", "'batch_size'", "]", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "self", ".", "state", "[", "'workers'", "]", ")", "\n", "\n", "# optionally resume from a checkpoint", "\n", "if", "self", ".", "_state", "(", "'resume'", ")", "is", "not", "None", ":", "\n", "            ", "if", "os", ".", "path", ".", "isfile", "(", "self", ".", "state", "[", "'resume'", "]", ")", ":", "\n", "                ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "self", ".", "state", "[", "'resume'", "]", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "self", ".", "state", "[", "'resume'", "]", ")", "\n", "self", ".", "state", "[", "'start_epoch'", "]", "=", "checkpoint", "[", "'epoch'", "]", "\n", "self", ".", "state", "[", "'best_score'", "]", "=", "checkpoint", "[", "'best_score'", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ",", "strict", "=", "False", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "self", ".", "state", "[", "'evaluate'", "]", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "self", ".", "state", "[", "'resume'", "]", ")", ")", "\n", "\n", "", "", "if", "self", ".", "state", "[", "'use_gpu'", "]", ":", "\n", "            ", "train_loader", ".", "pin_memory", "=", "True", "\n", "val_loader", ".", "pin_memory", "=", "True", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "self", ".", "state", "[", "'device_ids'", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "criterion", "=", "criterion", ".", "cuda", "(", ")", "\n", "\n", "", "if", "self", ".", "state", "[", "'evaluate'", "]", ":", "\n", "            ", "self", ".", "validate", "(", "val_loader", ",", "model", ",", "criterion", ")", "\n", "return", "\n", "\n", "", "self", ".", "state", "[", "'start_epoch'", "]", "=", "0", "\n", "self", ".", "state", "[", "'max_epochs'", "]", "=", "200", "\n", "\n", "for", "epoch", "in", "range", "(", "self", ".", "state", "[", "'start_epoch'", "]", ",", "self", ".", "state", "[", "'max_epochs'", "]", ")", ":", "\n", "            ", "self", ".", "state", "[", "'epoch'", "]", "=", "epoch", "\n", "lr", "=", "self", ".", "adjust_learning_rate", "(", "optimizer", ")", "\n", "print", "(", "'lr:'", ",", "lr", ")", "\n", "\n", "# train for one epoch", "\n", "self", ".", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ")", "\n", "# evaluate on validation set", "\n", "prec1", "=", "self", ".", "validate", "(", "val_loader", ",", "model", ",", "criterion", ")", "\n", "\n", "# remember best prec@1 and save checkpoint", "\n", "is_best", "=", "prec1", ">", "self", ".", "state", "[", "'best_score'", "]", "\n", "self", ".", "state", "[", "'best_score'", "]", "=", "max", "(", "prec1", ",", "self", ".", "state", "[", "'best_score'", "]", ")", "\n", "self", ".", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "self", ".", "_state", "(", "'arch'", ")", ",", "\n", "'state_dict'", ":", "model", ".", "module", ".", "state_dict", "(", ")", "if", "self", ".", "state", "[", "'use_gpu'", "]", "else", "model", ".", "state_dict", "(", ")", ",", "\n", "'best_score'", ":", "self", ".", "state", "[", "'best_score'", "]", ",", "\n", "}", ",", "is_best", ")", "\n", "\n", "print", "(", "' *** best={best:.3f}'", ".", "format", "(", "best", "=", "self", ".", "state", "[", "'best_score'", "]", ")", ")", "\n", "", "return", "self", ".", "state", "[", "'best_score'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine.train": [[238, 273], ["model.train", "engine.Engine.on_start_epoch", "time.time", "enumerate", "engine.Engine.on_end_epoch", "tqdm", "engine.Engine.state[].add", "engine.Engine.on_start_batch", "engine.Engine.on_forward", "engine.Engine.state[].add", "time.time", "engine.Engine.on_end_batch", "time.time", "engine.Engine.state[].cuda", "time.time"], "methods", ["home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine.train", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.MultiLabelMAPEngine.on_start_epoch", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.MultiLabelMAPEngine.on_end_epoch", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.AveragePrecisionMeter.add", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.GCNMultiLabelMAPEngine.on_start_batch", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.GCNMultiLabelMAPEngine.on_forward", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.AveragePrecisionMeter.add", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.MultiLabelMAPEngine.on_end_batch"], ["", "def", "train", "(", "self", ",", "data_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ")", ":", "\n", "\n", "# switch to train mode", "\n", "        ", "model", ".", "train", "(", ")", "\n", "\n", "self", ".", "on_start_epoch", "(", "True", ",", "model", ",", "criterion", ",", "data_loader", ",", "optimizer", ")", "\n", "\n", "if", "self", ".", "state", "[", "'use_pb'", "]", ":", "\n", "            ", "data_loader", "=", "tqdm", "(", "data_loader", ",", "desc", "=", "'Training'", ")", "\n", "\n", "", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "# measure data loading time", "\n", "            ", "self", ".", "state", "[", "'iteration'", "]", "=", "i", "\n", "self", ".", "state", "[", "'data_time_batch'", "]", "=", "time", ".", "time", "(", ")", "-", "end", "\n", "self", ".", "state", "[", "'data_time'", "]", ".", "add", "(", "self", ".", "state", "[", "'data_time_batch'", "]", ")", "\n", "\n", "self", ".", "state", "[", "'input'", "]", "=", "input", "\n", "self", ".", "state", "[", "'target'", "]", "=", "target", "\n", "\n", "self", ".", "on_start_batch", "(", "True", ",", "model", ",", "criterion", ",", "data_loader", ",", "optimizer", ")", "\n", "\n", "if", "self", ".", "state", "[", "'use_gpu'", "]", ":", "\n", "                ", "self", ".", "state", "[", "'target'", "]", "=", "self", ".", "state", "[", "'target'", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "", "self", ".", "on_forward", "(", "True", ",", "model", ",", "criterion", ",", "data_loader", ",", "optimizer", ")", "\n", "\n", "# measure elapsed time", "\n", "self", ".", "state", "[", "'batch_time_current'", "]", "=", "time", ".", "time", "(", ")", "-", "end", "\n", "self", ".", "state", "[", "'batch_time'", "]", ".", "add", "(", "self", ".", "state", "[", "'batch_time_current'", "]", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "# measure accuracy", "\n", "self", ".", "on_end_batch", "(", "True", ",", "model", ",", "criterion", ",", "data_loader", ",", "optimizer", ")", "\n", "\n", "", "self", ".", "on_end_epoch", "(", "True", ",", "model", ",", "criterion", ",", "data_loader", ",", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine.validate": [[274, 311], ["model.eval", "engine.Engine.on_start_epoch", "time.time", "enumerate", "engine.Engine.on_end_epoch", "tqdm", "engine.Engine.state[].add", "engine.Engine.on_start_batch", "engine.Engine.on_forward", "engine.Engine.state[].add", "time.time", "engine.Engine.on_end_batch", "time.time", "engine.Engine.state[].cuda", "time.time"], "methods", ["home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.MultiLabelMAPEngine.on_start_epoch", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.MultiLabelMAPEngine.on_end_epoch", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.AveragePrecisionMeter.add", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.GCNMultiLabelMAPEngine.on_start_batch", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.GCNMultiLabelMAPEngine.on_forward", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.AveragePrecisionMeter.add", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.MultiLabelMAPEngine.on_end_batch"], ["", "def", "validate", "(", "self", ",", "data_loader", ",", "model", ",", "criterion", ")", ":", "\n", "\n", "# switch to evaluate mode", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "\n", "self", ".", "on_start_epoch", "(", "False", ",", "model", ",", "criterion", ",", "data_loader", ")", "\n", "\n", "if", "self", ".", "state", "[", "'use_pb'", "]", ":", "\n", "            ", "data_loader", "=", "tqdm", "(", "data_loader", ",", "desc", "=", "'Test'", ")", "\n", "\n", "", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "# measure data loading time", "\n", "            ", "self", ".", "state", "[", "'iteration'", "]", "=", "i", "\n", "self", ".", "state", "[", "'data_time_batch'", "]", "=", "time", ".", "time", "(", ")", "-", "end", "\n", "self", ".", "state", "[", "'data_time'", "]", ".", "add", "(", "self", ".", "state", "[", "'data_time_batch'", "]", ")", "\n", "\n", "self", ".", "state", "[", "'input'", "]", "=", "input", "\n", "self", ".", "state", "[", "'target'", "]", "=", "target", "\n", "\n", "self", ".", "on_start_batch", "(", "False", ",", "model", ",", "criterion", ",", "data_loader", ")", "\n", "\n", "if", "self", ".", "state", "[", "'use_gpu'", "]", ":", "\n", "                ", "self", ".", "state", "[", "'target'", "]", "=", "self", ".", "state", "[", "'target'", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "", "self", ".", "on_forward", "(", "False", ",", "model", ",", "criterion", ",", "data_loader", ")", "\n", "\n", "# measure elapsed time", "\n", "self", ".", "state", "[", "'batch_time_current'", "]", "=", "time", ".", "time", "(", ")", "-", "end", "\n", "self", ".", "state", "[", "'batch_time'", "]", ".", "add", "(", "self", ".", "state", "[", "'batch_time_current'", "]", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "# measure accuracy", "\n", "self", ".", "on_end_batch", "(", "False", ",", "model", ",", "criterion", ",", "data_loader", ")", "\n", "\n", "", "score", "=", "self", ".", "on_end_epoch", "(", "False", ",", "model", ",", "criterion", ",", "data_loader", ")", "\n", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine.save_checkpoint": [[312, 332], ["print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "engine.Engine._state", "os.path.join", "shutil.copyfile", "os.path.exists", "os.makedirs", "engine.Engine._state", "os.path.join", "engine.Engine._state", "os.path.join", "shutil.copyfile", "engine.Engine._state", "os.remove", "engine.Engine._state"], "methods", ["home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine._state", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine._state", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine._state", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine._state", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine._state"], ["", "def", "save_checkpoint", "(", "self", ",", "state", ",", "is_best", ",", "filename", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "        ", "if", "self", ".", "_state", "(", "'save_model_path'", ")", "is", "not", "None", ":", "\n", "            ", "filename_", "=", "filename", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "state", "[", "'save_model_path'", "]", ",", "filename_", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "state", "[", "'save_model_path'", "]", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "self", ".", "state", "[", "'save_model_path'", "]", ")", "\n", "", "", "print", "(", "'save model {filename}'", ".", "format", "(", "filename", "=", "filename", ")", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "            ", "filename_best", "=", "'model_best.pth.tar'", "\n", "if", "self", ".", "_state", "(", "'save_model_path'", ")", "is", "not", "None", ":", "\n", "                ", "filename_best", "=", "os", ".", "path", ".", "join", "(", "self", ".", "state", "[", "'save_model_path'", "]", ",", "filename_best", ")", "\n", "", "shutil", ".", "copyfile", "(", "filename", ",", "filename_best", ")", "\n", "if", "self", ".", "_state", "(", "'save_model_path'", ")", "is", "not", "None", ":", "\n", "                ", "if", "self", ".", "_state", "(", "'filename_previous_best'", ")", "is", "not", "None", ":", "\n", "                    ", "os", ".", "remove", "(", "self", ".", "_state", "(", "'filename_previous_best'", ")", ")", "\n", "", "filename_best", "=", "os", ".", "path", ".", "join", "(", "self", ".", "state", "[", "'save_model_path'", "]", ",", "\n", "'model_best_{score:.4f}.pth.tar'", ".", "format", "(", "score", "=", "state", "[", "'best_score'", "]", ")", ")", "\n", "shutil", ".", "copyfile", "(", "filename", ",", "filename_best", ")", "\n", "self", ".", "state", "[", "'filename_previous_best'", "]", "=", "filename_best", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine.adjust_learning_rate": [[333, 341], ["np.unique", "lr_list.append", "sum", "np.array"], "methods", ["None"], ["", "", "", "def", "adjust_learning_rate", "(", "self", ",", "optimizer", ")", ":", "\n", "        ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "lr_list", "=", "[", "]", "\n", "decay", "=", "0.1", "if", "sum", "(", "self", ".", "state", "[", "'epoch'", "]", "==", "np", ".", "array", "(", "self", ".", "state", "[", "'epoch_step'", "]", ")", ")", ">", "0", "else", "1.0", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "param_group", "[", "'lr'", "]", "*", "decay", "\n", "lr_list", ".", "append", "(", "param_group", "[", "'lr'", "]", ")", "\n", "", "return", "np", ".", "unique", "(", "lr_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.MultiLabelMAPEngine.__init__": [[344, 349], ["engine.Engine.__init__", "util.AveragePrecisionMeter", "engine.MultiLabelMAPEngine._state"], "methods", ["home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.voc.Voc2007Classification.__init__", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine._state"], ["    ", "def", "__init__", "(", "self", ",", "state", ")", ":", "\n", "        ", "Engine", ".", "__init__", "(", "self", ",", "state", ")", "\n", "if", "self", ".", "_state", "(", "'difficult_examples'", ")", "is", "None", ":", "\n", "            ", "self", ".", "state", "[", "'difficult_examples'", "]", "=", "False", "\n", "", "self", ".", "state", "[", "'ap_meter'", "]", "=", "AveragePrecisionMeter", "(", "self", ".", "state", "[", "'difficult_examples'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.MultiLabelMAPEngine.on_start_epoch": [[350, 353], ["engine.Engine.on_start_epoch", "engine.MultiLabelMAPEngine.state[].reset"], "methods", ["home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.MultiLabelMAPEngine.on_start_epoch", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.AveragePrecisionMeter.reset"], ["", "def", "on_start_epoch", "(", "self", ",", "training", ",", "model", ",", "criterion", ",", "data_loader", ",", "optimizer", "=", "None", ",", "display", "=", "True", ")", ":", "\n", "        ", "Engine", ".", "on_start_epoch", "(", "self", ",", "training", ",", "model", ",", "criterion", ",", "data_loader", ",", "optimizer", ")", "\n", "self", ".", "state", "[", "'ap_meter'", "]", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.MultiLabelMAPEngine.on_end_epoch": [[354, 397], ["engine.MultiLabelMAPEngine.state[].overall", "engine.MultiLabelMAPEngine.state[].overall_topk", "engine.MultiLabelMAPEngine.state[].value().mean", "engine.MultiLabelMAPEngine.state[].value", "print", "print", "print", "print", "print", "engine.MultiLabelMAPEngine.state[].value"], "methods", ["home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.AveragePrecisionMeter.overall", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.AveragePrecisionMeter.overall_topk", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.AveragePrecisionMeter.value", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.AveragePrecisionMeter.value"], ["", "def", "on_end_epoch", "(", "self", ",", "training", ",", "model", ",", "criterion", ",", "data_loader", ",", "optimizer", "=", "None", ",", "display", "=", "True", ")", ":", "\n", "        ", "map", "=", "100", "*", "self", ".", "state", "[", "'ap_meter'", "]", ".", "value", "(", ")", ".", "mean", "(", ")", "\n", "loss", "=", "self", ".", "state", "[", "'meter_loss'", "]", ".", "value", "(", ")", "[", "0", "]", "\n", "OP", ",", "OR", ",", "OF1", ",", "CP", ",", "CR", ",", "CF1", ",", "ce", ",", "lrap", ",", "lrl", "=", "self", ".", "state", "[", "'ap_meter'", "]", ".", "overall", "(", ")", "\n", "OP_k", ",", "OR_k", ",", "OF1_k", ",", "CP_k", ",", "CR_k", ",", "CF1_k", ",", "ce_k", ",", "lrap_k", ",", "lrl_k", "=", "self", ".", "state", "[", "'ap_meter'", "]", ".", "overall_topk", "(", "3", ")", "\n", "if", "display", ":", "\n", "            ", "if", "training", ":", "\n", "                ", "print", "(", "'Epoch: [{0}]\\t'", "\n", "'Loss {loss:.4f}\\t'", "\n", "'mAP {map:.3f}'", ".", "format", "(", "self", ".", "state", "[", "'epoch'", "]", ",", "loss", "=", "loss", ",", "map", "=", "map", ")", ")", "\n", "print", "(", "'OP: {OP:.4f}\\t'", "\n", "'OR: {OR:.4f}\\t'", "\n", "'OF1: {OF1:.4f}\\t'", "\n", "'CP: {CP:.4f}\\t'", "\n", "'CR: {CR:.4f}\\t'", "\n", "'CF1: {CF1:.4f}'", "\n", "'ce: {ce:.4f}'", "\n", "'lrap: {lrap:.4f}'", "\n", "'lrl: {lrl:.4f}'", ".", "format", "(", "OP", "=", "OP", ",", "OR", "=", "OR", ",", "OF1", "=", "OF1", ",", "CP", "=", "CP", ",", "CR", "=", "CR", ",", "CF1", "=", "CF1", ",", "ce", "=", "ce", ",", "lrap", "=", "lrap", ",", "lrl", "=", "lrl", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'Test: \\t Loss {loss:.4f}\\t mAP {map:.3f}'", ".", "format", "(", "loss", "=", "loss", ",", "map", "=", "map", ")", ")", "\n", "print", "(", "'OP: {OP:.4f}\\t'", "\n", "'OR: {OR:.4f}\\t'", "\n", "'OF1: {OF1:.4f}\\t'", "\n", "'CP: {CP:.4f}\\t'", "\n", "'CR: {CR:.4f}\\t'", "\n", "'CF1: {CF1:.4f}'", "\n", "'ce: {ce:.4f}'", "\n", "'lrap: {lrap:.4f}'", "\n", "'lrl: {lrl:.4f}'", ".", "format", "(", "OP", "=", "OP", ",", "OR", "=", "OR", ",", "OF1", "=", "OF1", ",", "CP", "=", "CP", ",", "CR", "=", "CR", ",", "CF1", "=", "CF1", ",", "ce", "=", "ce", ",", "lrap", "=", "lrap", ",", "lrl", "=", "lrl", ")", ")", "\n", "print", "(", "'OP_3: {OP:.4f}\\t'", "\n", "'OR_3: {OR:.4f}\\t'", "\n", "'OF1_3: {OF1:.4f}\\t'", "\n", "'CP_3: {CP:.4f}\\t'", "\n", "'CR_3: {CR:.4f}\\t'", "\n", "'CF1_3: {CF1:.4f}'", "\n", "'ce_3: {ce_3:.4f}'", "\n", "'lrap_3: {lrap_3:.4f}'", "\n", "'lrl_3: {lrl_3:.4f}'", "\n", ".", "format", "(", "OP", "=", "OP_k", ",", "OR", "=", "OR_k", ",", "OF1", "=", "OF1_k", ",", "CP", "=", "CP_k", ",", "CR", "=", "CR_k", ",", "CF1", "=", "CF1_k", ",", "ce_3", "=", "ce_k", ",", "lrap_3", "=", "lrap_k", ",", "\n", "lrl_3", "=", "lrl_k", ")", ")", "\n", "\n", "", "", "return", "map", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.MultiLabelMAPEngine.on_start_batch": [[398, 407], ["engine.MultiLabelMAPEngine.state[].clone"], "methods", ["None"], ["", "def", "on_start_batch", "(", "self", ",", "training", ",", "model", ",", "criterion", ",", "data_loader", ",", "optimizer", "=", "None", ",", "display", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "state", "[", "'target_gt'", "]", "=", "self", ".", "state", "[", "'target'", "]", ".", "clone", "(", ")", "\n", "self", ".", "state", "[", "'target'", "]", "[", "self", ".", "state", "[", "'target'", "]", "==", "0", "]", "=", "1", "\n", "self", ".", "state", "[", "'target'", "]", "[", "self", ".", "state", "[", "'target'", "]", "==", "-", "1", "]", "=", "0", "\n", "\n", "input", "=", "self", ".", "state", "[", "'input'", "]", "\n", "self", ".", "state", "[", "'input'", "]", "=", "input", "[", "0", "]", "\n", "self", ".", "state", "[", "'name'", "]", "=", "input", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.MultiLabelMAPEngine.on_end_batch": [[408, 436], ["engine.Engine.on_end_batch", "engine.MultiLabelMAPEngine.state[].add", "engine.MultiLabelMAPEngine.state[].value", "engine.MultiLabelMAPEngine.state[].value", "engine.MultiLabelMAPEngine.state[].value", "print", "print", "len", "len"], "methods", ["home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.MultiLabelMAPEngine.on_end_batch", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.AveragePrecisionMeter.add", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.AveragePrecisionMeter.value", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.AveragePrecisionMeter.value", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.AveragePrecisionMeter.value"], ["", "def", "on_end_batch", "(", "self", ",", "training", ",", "model", ",", "criterion", ",", "data_loader", ",", "optimizer", "=", "None", ",", "display", "=", "True", ")", ":", "\n", "\n", "        ", "Engine", ".", "on_end_batch", "(", "self", ",", "training", ",", "model", ",", "criterion", ",", "data_loader", ",", "optimizer", ",", "display", "=", "False", ")", "\n", "\n", "# measure mAP", "\n", "self", ".", "state", "[", "'ap_meter'", "]", ".", "add", "(", "self", ".", "state", "[", "'output'", "]", "[", "0", "]", ".", "data", ",", "self", ".", "state", "[", "'target_gt'", "]", ")", "\n", "\n", "if", "display", "and", "self", ".", "state", "[", "'print_freq'", "]", "!=", "0", "and", "self", ".", "state", "[", "'iteration'", "]", "%", "self", ".", "state", "[", "'print_freq'", "]", "==", "0", ":", "\n", "            ", "loss", "=", "self", ".", "state", "[", "'meter_loss'", "]", ".", "value", "(", ")", "[", "0", "]", "\n", "batch_time", "=", "self", ".", "state", "[", "'batch_time'", "]", ".", "value", "(", ")", "[", "0", "]", "\n", "data_time", "=", "self", ".", "state", "[", "'data_time'", "]", ".", "value", "(", ")", "[", "0", "]", "\n", "if", "training", ":", "\n", "                ", "print", "(", "'Epoch: [{0}][{1}/{2}]\\t'", "\n", "'Time {batch_time_current:.3f} ({batch_time:.3f})\\t'", "\n", "'Data {data_time_current:.3f} ({data_time:.3f})\\t'", "\n", "'Loss {loss_current:.4f} ({loss:.4f})'", ".", "format", "(", "\n", "self", ".", "state", "[", "'epoch'", "]", ",", "self", ".", "state", "[", "'iteration'", "]", ",", "len", "(", "data_loader", ")", ",", "\n", "batch_time_current", "=", "self", ".", "state", "[", "'batch_time_current'", "]", ",", "\n", "batch_time", "=", "batch_time", ",", "data_time_current", "=", "self", ".", "state", "[", "'data_time_batch'", "]", ",", "\n", "data_time", "=", "data_time", ",", "loss_current", "=", "self", ".", "state", "[", "'loss_batch'", "]", ",", "loss", "=", "loss", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'Test: [{0}/{1}]\\t'", "\n", "'Time {batch_time_current:.3f} ({batch_time:.3f})\\t'", "\n", "'Data {data_time_current:.3f} ({data_time:.3f})\\t'", "\n", "'Loss {loss_current:.4f} ({loss:.4f})'", ".", "format", "(", "\n", "self", ".", "state", "[", "'iteration'", "]", ",", "len", "(", "data_loader", ")", ",", "batch_time_current", "=", "self", ".", "state", "[", "'batch_time_current'", "]", ",", "\n", "batch_time", "=", "batch_time", ",", "data_time_current", "=", "self", ".", "state", "[", "'data_time_batch'", "]", ",", "\n", "data_time", "=", "data_time", ",", "loss_current", "=", "self", ".", "state", "[", "'loss_batch'", "]", ",", "loss", "=", "loss", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.GCNMultiLabelMAPEngine.on_forward": [[439, 471], ["torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float().detach", "torch.autograd.Variable().float().detach", "torch.autograd.Variable().float().detach", "torch.autograd.Variable().float().detach", "torch.autograd.Variable().float().detach", "torch.autograd.Variable().float().detach", "torch.autograd.Variable().float().detach", "torch.autograd.Variable().float().detach", "torch.autograd.Variable().float().detach", "torch.autograd.Variable().float().detach", "torch.autograd.Variable().float().detach", "torch.autograd.Variable().float().detach", "torch.autograd.Variable().float().detach", "torch.autograd.Variable().float().detach", "torch.autograd.Variable().float().detach", "torch.autograd.Variable().float().detach", "torch.autograd.Variable().float().detach", "torch.autograd.Variable().float().detach", "torch.autograd.Variable().float().detach", "torch.autograd.Variable().float().detach", "torch.autograd.Variable().float().detach", "torch.autograd.Variable().float().detach", "torch.autograd.Variable().float().detach", "torch.autograd.Variable().float().detach", "torch.autograd.Variable().float().detach", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "optimizer.zero_grad", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "torch.cuda.amp.GradScaler.scale().backward", "torch.cuda.amp.GradScaler.scale().backward", "torch.cuda.amp.GradScaler.scale().backward", "torch.cuda.amp.GradScaler.scale().backward", "torch.cuda.amp.GradScaler.scale().backward", "torch.cuda.amp.GradScaler.step", "torch.cuda.amp.GradScaler.step", "torch.cuda.amp.GradScaler.step", "torch.cuda.amp.GradScaler.step", "torch.cuda.amp.GradScaler.step", "torch.cuda.amp.GradScaler.update", "torch.cuda.amp.GradScaler.update", "torch.cuda.amp.GradScaler.update", "torch.cuda.amp.GradScaler.update", "torch.cuda.amp.GradScaler.update", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "model", "model.parameters", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "model", "criterion", "torch.cuda.amp.GradScaler.scale", "torch.cuda.amp.GradScaler.scale", "torch.cuda.amp.GradScaler.scale", "torch.cuda.amp.GradScaler.scale", "torch.cuda.amp.GradScaler.scale", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "criterion"], "methods", ["None"], ["    ", "def", "on_forward", "(", "self", ",", "training", ",", "model", ",", "criterion", ",", "data_loader", ",", "optimizer", "=", "None", ",", "display", "=", "True", ")", ":", "\n", "        ", "feature_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "self", ".", "state", "[", "'feature'", "]", ")", ".", "float", "(", ")", "\n", "target_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "self", ".", "state", "[", "'target'", "]", ")", ".", "float", "(", ")", "\n", "inp_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "self", ".", "state", "[", "'input'", "]", ")", ".", "float", "(", ")", ".", "detach", "(", ")", "# one hot", "\n", "\n", "scaler", "=", "torch", ".", "cuda", ".", "amp", ".", "GradScaler", "(", ")", "\n", "if", "not", "training", ":", "\n", "            ", "feature_var", "=", "Variable", "(", "feature_var", ",", "requires_grad", "=", "False", ")", "\n", "target_var", "=", "Variable", "(", "target_var", ",", "requires_grad", "=", "False", ")", "\n", "inp_var", "=", "Variable", "(", "inp_var", ",", "requires_grad", "=", "False", ")", "\n", "# compute output", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "                    ", "self", ".", "state", "[", "'output'", "]", "=", "model", "(", "feature_var", ",", "inp_var", ")", "\n", "self", ".", "state", "[", "'loss'", "]", "=", "criterion", "(", "self", ".", "state", "[", "'output'", "]", "[", "0", "]", ",", "target_var", ")", "+", "self", ".", "state", "[", "'output'", "]", "[", "1", "]", "\n", "# scaler.scale(self.state['loss']).backward()", "\n", "# scaler.step(optimizer)", "\n", "# scaler.update()", "\n", "\n", "", "", "", "if", "training", ":", "\n", "# compute output", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "                ", "self", ".", "state", "[", "'output'", "]", "=", "model", "(", "feature_var", ",", "inp_var", ")", "\n", "self", ".", "state", "[", "'loss'", "]", "=", "criterion", "(", "self", ".", "state", "[", "'output'", "]", "[", "0", "]", ",", "target_var", ")", "+", "self", ".", "state", "[", "'output'", "]", "[", "1", "]", "\n", "\n", "# self.state['loss'].backward()", "\n", "", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "max_norm", "=", "10.0", ")", "\n", "# optimizer.step()", "\n", "scaler", ".", "scale", "(", "self", ".", "state", "[", "'loss'", "]", ")", ".", "backward", "(", ")", "\n", "scaler", ".", "step", "(", "optimizer", ")", "\n", "scaler", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.GCNMultiLabelMAPEngine.on_start_batch": [[472, 482], ["engine.GCNMultiLabelMAPEngine.state[].clone"], "methods", ["None"], ["", "", "def", "on_start_batch", "(", "self", ",", "training", ",", "model", ",", "criterion", ",", "data_loader", ",", "optimizer", "=", "None", ",", "display", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "state", "[", "'target_gt'", "]", "=", "self", ".", "state", "[", "'target'", "]", ".", "clone", "(", ")", "\n", "self", ".", "state", "[", "'target'", "]", "[", "self", ".", "state", "[", "'target'", "]", "==", "0", "]", "=", "1", "\n", "self", ".", "state", "[", "'target'", "]", "[", "self", ".", "state", "[", "'target'", "]", "==", "-", "1", "]", "=", "0", "\n", "\n", "input", "=", "self", ".", "state", "[", "'input'", "]", "\n", "self", ".", "state", "[", "'feature'", "]", "=", "input", "[", "0", "]", "\n", "self", ".", "state", "[", "'out'", "]", "=", "input", "[", "1", "]", "\n", "self", ".", "state", "[", "'input'", "]", "=", "input", "[", "2", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.ResNet.BasicBlock.__init__": [[34, 43], ["torch.Module.__init__", "ResNet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "ResNet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.voc.Voc2007Classification.__init__", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.ResNet.conv3x3", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.ResNet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.ResNet.BasicBlock.forward": [[44, 61], ["ResNet.BasicBlock.conv1", "ResNet.BasicBlock.bn1", "ResNet.BasicBlock.relu", "ResNet.BasicBlock.conv2", "ResNet.BasicBlock.bn2", "ResNet.BasicBlock.relu", "ResNet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.ResNet.Bottleneck.__init__": [[66, 78], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.voc.Voc2007Classification.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.ResNet.Bottleneck.forward": [[79, 100], ["ResNet.Bottleneck.conv1", "ResNet.Bottleneck.bn1", "ResNet.Bottleneck.relu", "ResNet.Bottleneck.conv2", "ResNet.Bottleneck.bn2", "ResNet.Bottleneck.relu", "ResNet.Bottleneck.conv3", "ResNet.Bottleneck.bn3", "ResNet.Bottleneck.relu", "ResNet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.ResNet.ResNet.__init__": [[104, 137], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "ResNet.ResNet._make_layer", "ResNet.ResNet._make_layer", "ResNet.ResNet._make_layer", "ResNet.ResNet._make_layer", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "ResNet.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.voc.Voc2007Classification.__init__", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.ResNet.ResNet._make_layer", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.ResNet.ResNet._make_layer", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.ResNet.ResNet._make_layer", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.ResNet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "80", ",", "avg_pool_kernel_size", "=", "7", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "pool1", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "pool3", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ")", "\n", "\n", "# self.avgpool2 = nn.AvgPool2d(avg_pool_kernel_size, stride=1)", "\n", "# self.fc = nn.Linear(8192, num_classes)", "\n", "self", ".", "conv_buffer0", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "conv_buffer1", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "conv_buffer2", "=", "nn", ".", "Conv2d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "# self.conv_buffer3 = nn.Conv2d(2048, 2048, kernel_size=1, stride=1)", "\n", "\n", "# self.fc = nn.Linear(512 * block.expansion, num_classes)", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.ResNet.ResNet._make_layer": [[138, 154], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.ResNet.ResNet.forward": [[155, 185], ["ResNet.ResNet.conv1", "ResNet.ResNet.bn1", "ResNet.ResNet.relu", "ResNet.ResNet.maxpool", "ResNet.ResNet.layer1", "ResNet.ResNet.layer2", "ResNet.ResNet.conv_buffer1", "ResNet.ResNet.pool1", "ResNet.ResNet.layer3", "ResNet.ResNet.conv_buffer2", "ResNet.ResNet.pool2", "ResNet.ResNet.layer4", "ResNet.ResNet.pool3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "\n", "# add branch 1, buffer + 2x2 pool", "\n", "f1", "=", "self", ".", "conv_buffer1", "(", "x", ")", "\n", "f1", "=", "self", ".", "pool1", "(", "f1", ")", "\n", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "# add branch 2, buffer + 2x2 pool", "\n", "f2", "=", "self", ".", "conv_buffer2", "(", "x", ")", "\n", "f2", "=", "self", ".", "pool2", "(", "f2", ")", "\n", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "# add branch 3, 2x2 pool", "\n", "f3", "=", "self", ".", "pool3", "(", "x", ")", "\n", "\n", "# x = x.view(x.size(0), -1)", "\n", "# x = self.fc(x)", "\n", "# f1 = self.batch_buffer1(f1)", "\n", "\n", "# f2 = self.batch_buffer2(f2)", "\n", "\n", "return", "f1", ",", "f2", ",", "f3", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.ResNet.conv1x1": [[19, 23], ["torch.Conv2d"], "function", ["None"], ["def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.ResNet.conv3x3": [[25, 29], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.ResNet.resnet18": [[189, 199], ["ResNet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "resnet18", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.ResNet.resnet34": [[201, 211], ["ResNet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.ResNet.resnet50": [[213, 223], ["ResNet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.ResNet.resnet101": [[225, 235], ["ResNet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.ResNet.resnet152": [[237, 247], ["ResNet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.demo_nuswide_gcn.main_nuswide": [[47, 83], ["parser.parse_args", "torch.cuda.is_available", "DataLoader.nuswide.NusWideClassification", "DataLoader.nuswide.NusWideClassification", "models.MSGDN", "load_pretrain_model.cuda", "nn.MultiLabelSoftMarginLoss", "torch.optim.SGD", "engine.GCNMultiLabelMAPEngine", "engine.GCNMultiLabelMAPEngine.learning", "load_pretrain_model", "load_pretrain_model.get_config_optim"], "function", ["home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine.learning", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.load_pretrain_model", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.models.MSGDN.get_config_optim"], ["def", "main_nuswide", "(", ")", ":", "\n", "    ", "global", "args", ",", "best_prec1", ",", "use_gpu", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "use_gpu", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "# define dataset", "\n", "train_dataset", "=", "NusWideClassification", "(", "args", ".", "data", ",", "'train'", ",", "inp_name", "=", "'data/nuswide/nuswide_glove_word2vec.pkl'", ")", "\n", "val_dataset", "=", "NusWideClassification", "(", "args", ".", "data", ",", "'val'", ",", "inp_name", "=", "'data/nuswide/nuswide_glove_word2vec.pkl'", ")", "\n", "num_classes", "=", "81", "\n", "# load model", "\n", "model", "=", "MSGDN", "(", "num_classes", ",", "args", ".", "pool_ratio", ",", "args", ".", "backbone", ",", "args", ".", "graph_file", ")", "\n", "\n", "if", "args", ".", "pretrained", ":", "\n", "        ", "model", "=", "load_pretrain_model", "(", "model", ",", "args", ")", "\n", "", "model", ".", "cuda", "(", ")", "\n", "\n", "# define loss function (criterion)", "\n", "criterion", "=", "nn", ".", "MultiLabelSoftMarginLoss", "(", ")", "\n", "# define optimizer", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "get_config_optim", "(", "args", ".", "lr", ")", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "state", "=", "{", "'batch_size'", ":", "args", ".", "batch_size", ",", "'image_size'", ":", "args", ".", "image_size", ",", "'max_epochs'", ":", "args", ".", "epochs", ",", "\n", "'evaluate'", ":", "args", ".", "evaluate", ",", "'resume'", ":", "args", ".", "resume", ",", "'num_classes'", ":", "num_classes", "}", "\n", "state", "[", "'difficult_examples'", "]", "=", "True", "\n", "state", "[", "'save_model_path'", "]", "=", "'checkpoint/voc2007/'", "\n", "state", "[", "'workers'", "]", "=", "args", ".", "workers", "\n", "state", "[", "'epoch_step'", "]", "=", "args", ".", "epoch_step", "\n", "state", "[", "'lr'", "]", "=", "args", ".", "lr", "\n", "if", "args", ".", "evaluate", ":", "\n", "        ", "state", "[", "'evaluate'", "]", "=", "True", "\n", "", "engine", "=", "GCNMultiLabelMAPEngine", "(", "state", ")", "\n", "engine", ".", "learning", "(", "model", ",", "criterion", ",", "train_dataset", ",", "val_dataset", ",", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.demo_coco_gcn.main_coco": [[48, 87], ["parser.parse_args", "torch.cuda.is_available", "DataLoader.coco.COCO2014", "DataLoader.coco.COCO2014", "models.MSGDN", "util.load_pretrain_model", "util.load_pretrain_model.cuda", "nn.MultiLabelSoftMarginLoss", "torch.optim.SGD", "engine.GCNMultiLabelMAPEngine", "engine.GCNMultiLabelMAPEngine.learning", "util.load_pretrain_model.get_config_optim"], "function", ["home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.load_pretrain_model", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine.learning", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.models.MSGDN.get_config_optim"], ["def", "main_coco", "(", ")", ":", "\n", "    ", "global", "args", ",", "best_prec1", ",", "use_gpu", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "use_gpu", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "train_dataset", "=", "COCO2014", "(", "args", ".", "data", ",", "phase", "=", "'train'", ",", "inp_name", "=", "'data/coco/coco_glove_word2vec.pkl'", ")", "\n", "val_dataset", "=", "COCO2014", "(", "args", ".", "data", ",", "phase", "=", "'val'", ",", "inp_name", "=", "'data/coco/coco_glove_word2vec.pkl'", ")", "\n", "num_classes", "=", "80", "\n", "\n", "# model = gcn_resnet101(num_classes=num_classes, t=0.4, adj_file='data/coco/coco_adj.pkl')", "\n", "model", "=", "MSGDN", "(", "num_classes", ",", "args", ".", "pool_ratio", ",", "args", ".", "backbone", ",", "args", ".", "graph_file", ")", "\n", "\n", "# config pretrained resnet101", "\n", "#     if args.pretrained:", "\n", "model", "=", "load_pretrain_model", "(", "model", ",", "args", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "\n", "# define loss function (criterion)", "\n", "criterion", "=", "nn", ".", "MultiLabelSoftMarginLoss", "(", ")", "\n", "\n", "# define optimizer", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "get_config_optim", "(", "args", ".", "lr", ")", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "state", "=", "{", "'batch_size'", ":", "args", ".", "batch_size", ",", "'image_size'", ":", "args", ".", "image_size", ",", "'max_epochs'", ":", "args", ".", "epochs", ",", "\n", "'evaluate'", ":", "args", ".", "evaluate", ",", "'resume'", ":", "args", ".", "resume", ",", "'num_classes'", ":", "num_classes", "}", "\n", "state", "[", "'difficult_examples'", "]", "=", "True", "\n", "state", "[", "'save_model_path'", "]", "=", "'checkpoint/coco/'", "\n", "state", "[", "'workers'", "]", "=", "args", ".", "workers", "\n", "state", "[", "'epoch_step'", "]", "=", "args", ".", "epoch_step", "\n", "state", "[", "'lr'", "]", "=", "args", ".", "lr", "\n", "\n", "if", "args", ".", "evaluate", ":", "\n", "        ", "state", "[", "'evaluate'", "]", "=", "True", "\n", "", "engine", "=", "GCNMultiLabelMAPEngine", "(", "state", ")", "\n", "engine", ".", "learning", "(", "model", ",", "criterion", ",", "train_dataset", ",", "val_dataset", ",", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.Warp.__init__": [[14, 17], ["int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "self", ".", "size", "=", "int", "(", "size", ")", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.Warp.__call__": [[18, 20], ["img.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "return", "img", ".", "resize", "(", "(", "self", ".", "size", ",", "self", ".", "size", ")", ",", "self", ".", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.Warp.__str__": [[21, 24], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "' (size={size}, interpolation={interpolation})'", ".", "format", "(", "size", "=", "self", ".", "size", ",", "\n", "interpolation", "=", "self", ".", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.MultiScaleCrop.__init__": [[28, 35], ["isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "scales", "=", "None", ",", "max_distort", "=", "1", ",", "fix_crop", "=", "True", ",", "more_fix_crop", "=", "True", ")", ":", "\n", "        ", "self", ".", "scales", "=", "scales", "if", "scales", "is", "not", "None", "else", "[", "1", ",", "875", ",", ".75", ",", ".66", "]", "\n", "self", ".", "max_distort", "=", "max_distort", "\n", "self", ".", "fix_crop", "=", "fix_crop", "\n", "self", ".", "more_fix_crop", "=", "more_fix_crop", "\n", "self", ".", "input_size", "=", "input_size", "if", "not", "isinstance", "(", "input_size", ",", "int", ")", "else", "[", "input_size", ",", "input_size", "]", "\n", "self", ".", "interpolation", "=", "Image", ".", "BILINEAR", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.MultiScaleCrop.__call__": [[36, 42], ["util.MultiScaleCrop._sample_crop_size", "img.crop", "img.crop.resize"], "methods", ["home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.MultiScaleCrop._sample_crop_size"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "im_size", "=", "img", ".", "size", "\n", "crop_w", ",", "crop_h", ",", "offset_w", ",", "offset_h", "=", "self", ".", "_sample_crop_size", "(", "im_size", ")", "\n", "crop_img_group", "=", "img", ".", "crop", "(", "(", "offset_w", ",", "offset_h", ",", "offset_w", "+", "crop_w", ",", "offset_h", "+", "crop_h", ")", ")", "\n", "ret_img_group", "=", "crop_img_group", ".", "resize", "(", "(", "self", ".", "input_size", "[", "0", "]", ",", "self", ".", "input_size", "[", "1", "]", ")", ",", "self", ".", "interpolation", ")", "\n", "return", "ret_img_group", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.MultiScaleCrop._sample_crop_size": [[43, 66], ["min", "enumerate", "random.choice", "int", "enumerate", "random.randint", "random.randint", "util.MultiScaleCrop._sample_fix_offset", "abs", "abs", "abs", "pairs.append"], "methods", ["home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.MultiScaleCrop._sample_fix_offset"], ["", "def", "_sample_crop_size", "(", "self", ",", "im_size", ")", ":", "\n", "        ", "image_w", ",", "image_h", "=", "im_size", "[", "0", "]", ",", "im_size", "[", "1", "]", "\n", "\n", "# find a crop size", "\n", "base_size", "=", "min", "(", "image_w", ",", "image_h", ")", "\n", "crop_sizes", "=", "[", "int", "(", "base_size", "*", "x", ")", "for", "x", "in", "self", ".", "scales", "]", "\n", "crop_h", "=", "[", "self", ".", "input_size", "[", "1", "]", "if", "abs", "(", "x", "-", "self", ".", "input_size", "[", "1", "]", ")", "<", "3", "else", "x", "for", "x", "in", "crop_sizes", "]", "\n", "crop_w", "=", "[", "self", ".", "input_size", "[", "0", "]", "if", "abs", "(", "x", "-", "self", ".", "input_size", "[", "0", "]", ")", "<", "3", "else", "x", "for", "x", "in", "crop_sizes", "]", "\n", "\n", "pairs", "=", "[", "]", "\n", "for", "i", ",", "h", "in", "enumerate", "(", "crop_h", ")", ":", "\n", "            ", "for", "j", ",", "w", "in", "enumerate", "(", "crop_w", ")", ":", "\n", "                ", "if", "abs", "(", "i", "-", "j", ")", "<=", "self", ".", "max_distort", ":", "\n", "                    ", "pairs", ".", "append", "(", "(", "w", ",", "h", ")", ")", "\n", "\n", "", "", "", "crop_pair", "=", "random", ".", "choice", "(", "pairs", ")", "\n", "if", "not", "self", ".", "fix_crop", ":", "\n", "            ", "w_offset", "=", "random", ".", "randint", "(", "0", ",", "image_w", "-", "crop_pair", "[", "0", "]", ")", "\n", "h_offset", "=", "random", ".", "randint", "(", "0", ",", "image_h", "-", "crop_pair", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "w_offset", ",", "h_offset", "=", "self", ".", "_sample_fix_offset", "(", "image_w", ",", "image_h", ",", "crop_pair", "[", "0", "]", ",", "crop_pair", "[", "1", "]", ")", "\n", "\n", "", "return", "crop_pair", "[", "0", "]", ",", "crop_pair", "[", "1", "]", ",", "w_offset", ",", "h_offset", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.MultiScaleCrop._sample_fix_offset": [[67, 70], ["util.MultiScaleCrop.fill_fix_offset", "random.choice"], "methods", ["home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.MultiScaleCrop.fill_fix_offset"], ["", "def", "_sample_fix_offset", "(", "self", ",", "image_w", ",", "image_h", ",", "crop_w", ",", "crop_h", ")", ":", "\n", "        ", "offsets", "=", "self", ".", "fill_fix_offset", "(", "self", ".", "more_fix_crop", ",", "image_w", ",", "image_h", ",", "crop_w", ",", "crop_h", ")", "\n", "return", "random", ".", "choice", "(", "offsets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.MultiScaleCrop.fill_fix_offset": [[71, 95], ["list", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "fill_fix_offset", "(", "more_fix_crop", ",", "image_w", ",", "image_h", ",", "crop_w", ",", "crop_h", ")", ":", "\n", "        ", "w_step", "=", "(", "image_w", "-", "crop_w", ")", "//", "4", "\n", "h_step", "=", "(", "image_h", "-", "crop_h", ")", "//", "4", "\n", "\n", "ret", "=", "list", "(", ")", "\n", "ret", ".", "append", "(", "(", "0", ",", "0", ")", ")", "# upper left", "\n", "ret", ".", "append", "(", "(", "4", "*", "w_step", ",", "0", ")", ")", "# upper right", "\n", "ret", ".", "append", "(", "(", "0", ",", "4", "*", "h_step", ")", ")", "# lower left", "\n", "ret", ".", "append", "(", "(", "4", "*", "w_step", ",", "4", "*", "h_step", ")", ")", "# lower right", "\n", "ret", ".", "append", "(", "(", "2", "*", "w_step", ",", "2", "*", "h_step", ")", ")", "# center", "\n", "\n", "if", "more_fix_crop", ":", "\n", "            ", "ret", ".", "append", "(", "(", "0", ",", "2", "*", "h_step", ")", ")", "# center left", "\n", "ret", ".", "append", "(", "(", "4", "*", "w_step", ",", "2", "*", "h_step", ")", ")", "# center right", "\n", "ret", ".", "append", "(", "(", "2", "*", "w_step", ",", "4", "*", "h_step", ")", ")", "# lower center", "\n", "ret", ".", "append", "(", "(", "2", "*", "w_step", ",", "0", "*", "h_step", ")", ")", "# upper center", "\n", "\n", "ret", ".", "append", "(", "(", "1", "*", "w_step", ",", "1", "*", "h_step", ")", ")", "# upper left quarter", "\n", "ret", ".", "append", "(", "(", "3", "*", "w_step", ",", "1", "*", "h_step", ")", ")", "# upper right quarter", "\n", "ret", ".", "append", "(", "(", "1", "*", "w_step", ",", "3", "*", "h_step", ")", ")", "# lower left quarter", "\n", "ret", ".", "append", "(", "(", "3", "*", "w_step", ",", "3", "*", "h_step", ")", ")", "# lower righ quarter", "\n", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.MultiScaleCrop.__str__": [[96, 98], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.AveragePrecisionMeter.__init__": [[155, 159], ["object.__init__", "util.AveragePrecisionMeter.reset"], "methods", ["home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.voc.Voc2007Classification.__init__", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.AveragePrecisionMeter.reset"], ["def", "__init__", "(", "self", ",", "difficult_examples", "=", "False", ")", ":", "\n", "        ", "super", "(", "AveragePrecisionMeter", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "reset", "(", ")", "\n", "self", ".", "difficult_examples", "=", "difficult_examples", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.AveragePrecisionMeter.reset": [[160, 164], ["torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatStorage", "torch.FloatStorage", "torch.FloatStorage", "torch.FloatStorage", "torch.LongStorage", "torch.LongStorage", "torch.LongStorage", "torch.LongStorage"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Resets the meter with empty member variables\"\"\"", "\n", "self", ".", "scores", "=", "torch", ".", "FloatTensor", "(", "torch", ".", "FloatStorage", "(", ")", ")", "\n", "self", ".", "targets", "=", "torch", ".", "LongTensor", "(", "torch", ".", "LongStorage", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.AveragePrecisionMeter.add": [[165, 212], ["util.AveragePrecisionMeter.scores.resize_", "util.AveragePrecisionMeter.targets.resize_", "util.AveragePrecisionMeter.scores.narrow().copy_", "util.AveragePrecisionMeter.targets.narrow().copy_", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "output.view.view.dim", "output.view.view.view", "target.view.view.dim", "target.view.view.view", "util.AveragePrecisionMeter.scores.numel", "util.AveragePrecisionMeter.scores.storage().size", "math.ceil", "util.AveragePrecisionMeter.scores.storage().resize_", "util.AveragePrecisionMeter.targets.storage().resize_", "util.AveragePrecisionMeter.scores.size", "output.view.view.size", "target.view.view.size", "output.view.view.dim", "target.view.view.dim", "target.view.view.size", "util.AveragePrecisionMeter.targets.size", "util.AveragePrecisionMeter.scores.numel", "output.view.view.numel", "int", "int", "util.AveragePrecisionMeter.scores.dim", "output.view.view.size", "target.view.view.size", "util.AveragePrecisionMeter.scores.narrow", "util.AveragePrecisionMeter.targets.narrow", "util.AveragePrecisionMeter.scores.storage", "util.AveragePrecisionMeter.scores.storage().size", "util.AveragePrecisionMeter.scores.storage", "util.AveragePrecisionMeter.targets.storage", "output.view.view.size", "target.view.view.size", "output.view.view.numel", "output.view.view.numel", "util.AveragePrecisionMeter.scores.storage"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "output", ",", "target", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            output (Tensor): NxK tensor that for each of the N examples\n                indicates the probability of the example belonging to each of\n                the K classes, according to the model. The probabilities should\n                sum to one over all classes\n            target (Tensor): binary NxK tensort that encodes which of the K\n                classes are associated with the N-th input\n                    (eg: a row [0, 1, 0, 1] indicates that the example is\n                         associated with classes 2 and 4)\n            weight (optional, Tensor): Nx1 tensor representing the weight for\n                each example (each weight > 0)\n        \"\"\"", "\n", "if", "not", "torch", ".", "is_tensor", "(", "output", ")", ":", "\n", "            ", "output", "=", "torch", ".", "from_numpy", "(", "output", ")", "\n", "", "if", "not", "torch", ".", "is_tensor", "(", "target", ")", ":", "\n", "            ", "target", "=", "torch", ".", "from_numpy", "(", "target", ")", "\n", "\n", "", "if", "output", ".", "dim", "(", ")", "==", "1", ":", "\n", "            ", "output", "=", "output", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "assert", "output", ".", "dim", "(", ")", "==", "2", ",", "'wrong output size (should be 1D or 2D with one column \\\n                per class)'", "\n", "", "if", "target", ".", "dim", "(", ")", "==", "1", ":", "\n", "            ", "target", "=", "target", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "assert", "target", ".", "dim", "(", ")", "==", "2", ",", "'wrong target size (should be 1D or 2D with one column \\\n                per class)'", "\n", "", "if", "self", ".", "scores", ".", "numel", "(", ")", ">", "0", ":", "\n", "            ", "assert", "target", ".", "size", "(", "1", ")", "==", "self", ".", "targets", ".", "size", "(", "1", ")", ",", "'dimensions for output should match previously added examples.'", "\n", "\n", "# make sure storage is of sufficient size", "\n", "", "if", "self", ".", "scores", ".", "storage", "(", ")", ".", "size", "(", ")", "<", "self", ".", "scores", ".", "numel", "(", ")", "+", "output", ".", "numel", "(", ")", ":", "\n", "            ", "new_size", "=", "math", ".", "ceil", "(", "self", ".", "scores", ".", "storage", "(", ")", ".", "size", "(", ")", "*", "1.5", ")", "\n", "self", ".", "scores", ".", "storage", "(", ")", ".", "resize_", "(", "int", "(", "new_size", "+", "output", ".", "numel", "(", ")", ")", ")", "\n", "self", ".", "targets", ".", "storage", "(", ")", ".", "resize_", "(", "int", "(", "new_size", "+", "output", ".", "numel", "(", ")", ")", ")", "\n", "\n", "# store scores and targets", "\n", "", "offset", "=", "self", ".", "scores", ".", "size", "(", "0", ")", "if", "self", ".", "scores", ".", "dim", "(", ")", ">", "0", "else", "0", "\n", "self", ".", "scores", ".", "resize_", "(", "offset", "+", "output", ".", "size", "(", "0", ")", ",", "output", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "targets", ".", "resize_", "(", "offset", "+", "target", ".", "size", "(", "0", ")", ",", "target", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "scores", ".", "narrow", "(", "0", ",", "offset", ",", "output", ".", "size", "(", "0", ")", ")", ".", "copy_", "(", "output", ")", "\n", "self", ".", "targets", ".", "narrow", "(", "0", ",", "offset", ",", "target", ".", "size", "(", "0", ")", ")", ".", "copy_", "(", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.AveragePrecisionMeter.value": [[213, 231], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "range", "util.AveragePrecisionMeter.scores.numel", "util.AveragePrecisionMeter.scores.size", "util.AveragePrecisionMeter.scores.size", "util.AveragePrecisionMeter.average_precision", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "util.AveragePrecisionMeter.scores.size"], "methods", ["home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.AveragePrecisionMeter.average_precision"], ["", "def", "value", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model's average precision for each class\n        Return:\n            ap (FloatTensor): 1xK tensor, with avg precision for each class k\n        \"\"\"", "\n", "\n", "if", "self", ".", "scores", ".", "numel", "(", ")", "==", "0", ":", "\n", "            ", "return", "0", "\n", "", "ap", "=", "torch", ".", "zeros", "(", "self", ".", "scores", ".", "size", "(", "1", ")", ")", "\n", "rg", "=", "torch", ".", "arange", "(", "1", ",", "self", ".", "scores", ".", "size", "(", "0", ")", ")", ".", "float", "(", ")", "\n", "# compute average precision for each class", "\n", "for", "k", "in", "range", "(", "self", ".", "scores", ".", "size", "(", "1", ")", ")", ":", "\n", "# sort scores", "\n", "            ", "scores", "=", "self", ".", "scores", "[", ":", ",", "k", "]", "\n", "targets", "=", "self", ".", "targets", "[", ":", ",", "k", "]", "\n", "# compute average precision", "\n", "ap", "[", "k", "]", "=", "AveragePrecisionMeter", ".", "average_precision", "(", "scores", ",", "targets", ",", "self", ".", "difficult_examples", ")", "\n", "", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.AveragePrecisionMeter.average_precision": [[232, 253], ["torch.sort", "torch.sort", "torch.sort", "torch.sort"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "average_precision", "(", "output", ",", "target", ",", "difficult_examples", "=", "True", ")", ":", "\n", "\n", "# sort examples", "\n", "        ", "sorted", ",", "indices", "=", "torch", ".", "sort", "(", "output", ",", "dim", "=", "0", ",", "descending", "=", "True", ")", "\n", "\n", "# Computes prec@i", "\n", "pos_count", "=", "0.", "\n", "total_count", "=", "0.", "\n", "precision_at_i", "=", "0.", "\n", "for", "i", "in", "indices", ":", "\n", "            ", "label", "=", "target", "[", "i", "]", "\n", "if", "difficult_examples", "and", "label", "==", "0", ":", "\n", "                ", "continue", "\n", "", "if", "label", "==", "1", ":", "\n", "                ", "pos_count", "+=", "1", "\n", "", "total_count", "+=", "1", "\n", "if", "label", "==", "1", ":", "\n", "                ", "precision_at_i", "+=", "pos_count", "/", "total_count", "\n", "", "", "precision_at_i", "/=", "pos_count", "\n", "return", "precision_at_i", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.AveragePrecisionMeter.overall": [[254, 261], ["util.AveragePrecisionMeter.scores.cpu().numpy", "util.AveragePrecisionMeter.targets.cpu().numpy", "util.AveragePrecisionMeter.evaluation", "util.AveragePrecisionMeter.scores.numel", "util.AveragePrecisionMeter.scores.cpu", "util.AveragePrecisionMeter.targets.cpu"], "methods", ["home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.AveragePrecisionMeter.evaluation"], ["", "def", "overall", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "scores", ".", "numel", "(", ")", "==", "0", ":", "\n", "            ", "return", "0", "\n", "", "scores", "=", "self", ".", "scores", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "targets", "=", "self", ".", "targets", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "targets", "[", "targets", "==", "-", "1", "]", "=", "0", "\n", "return", "self", ".", "evaluation", "(", "scores", ",", "targets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.AveragePrecisionMeter.overall_topk": [[262, 273], ["util.AveragePrecisionMeter.targets.cpu().numpy", "util.AveragePrecisionMeter.scores.size", "[].cpu().numpy", "util.AveragePrecisionMeter.scores.cpu().numpy", "range", "util.AveragePrecisionMeter.evaluation", "numpy.zeros", "util.AveragePrecisionMeter.targets.cpu", "[].cpu", "util.AveragePrecisionMeter.scores.cpu", "util.AveragePrecisionMeter.scores.topk"], "methods", ["home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.AveragePrecisionMeter.evaluation"], ["", "def", "overall_topk", "(", "self", ",", "k", ")", ":", "\n", "        ", "targets", "=", "self", ".", "targets", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "targets", "[", "targets", "==", "-", "1", "]", "=", "0", "\n", "n", ",", "c", "=", "self", ".", "scores", ".", "size", "(", ")", "\n", "scores", "=", "np", ".", "zeros", "(", "(", "n", ",", "c", ")", ")", "-", "1", "\n", "index", "=", "self", ".", "scores", ".", "topk", "(", "k", ",", "1", ",", "True", ",", "True", ")", "[", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "tmp", "=", "self", ".", "scores", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "for", "ind", "in", "index", "[", "i", "]", ":", "\n", "                ", "scores", "[", "i", ",", "ind", "]", "=", "1", "if", "tmp", "[", "i", ",", "ind", "]", ">=", "0", "else", "-", "1", "\n", "", "", "return", "self", ".", "evaluation", "(", "scores", ",", "targets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.AveragePrecisionMeter.evaluation": [[274, 303], ["sklearn.coverage_error", "sklearn.label_ranking_average_precision_score", "sklearn.label_ranking_loss", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "range", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum"], "methods", ["None"], ["", "def", "evaluation", "(", "self", ",", "scores_", ",", "targets_", ")", ":", "\n", "        ", "n", ",", "n_class", "=", "scores_", ".", "shape", "\n", "Nc", ",", "Np", ",", "Ng", "=", "np", ".", "zeros", "(", "n_class", ")", ",", "np", ".", "zeros", "(", "n_class", ")", ",", "np", ".", "zeros", "(", "n_class", ")", "\n", "threshold", "=", "[", "x", "*", "0.1", "+", "-", "1", "for", "x", "in", "range", "(", "20", ")", "]", "\n", "r_OP", ",", "r_OR", ",", "r_OF1", ",", "r_CP", ",", "r_CR", ",", "r_CF1", "=", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "\n", "for", "t", "in", "threshold", ":", "\n", "            ", "for", "k", "in", "range", "(", "n_class", ")", ":", "\n", "                ", "scores", "=", "scores_", "[", ":", ",", "k", "]", "\n", "targets", "=", "targets_", "[", ":", ",", "k", "]", "\n", "targets", "[", "targets", "==", "-", "1", "]", "=", "0", "\n", "Ng", "[", "k", "]", "=", "np", ".", "sum", "(", "targets", "==", "1", ")", "\n", "Np", "[", "k", "]", "=", "np", ".", "sum", "(", "scores", ">=", "t", ")", "\n", "Nc", "[", "k", "]", "=", "np", ".", "sum", "(", "targets", "*", "(", "scores", ">=", "t", ")", ")", "\n", "", "Np", "[", "Np", "==", "0", "]", "=", "1", "\n", "OP", "=", "np", ".", "sum", "(", "Nc", ")", "/", "np", ".", "sum", "(", "Np", ")", "\n", "OR", "=", "np", ".", "sum", "(", "Nc", ")", "/", "np", ".", "sum", "(", "Ng", ")", "\n", "OF1", "=", "(", "2", "*", "OP", "*", "OR", ")", "/", "(", "OP", "+", "OR", ")", "\n", "\n", "CP", "=", "np", ".", "sum", "(", "Nc", "/", "Np", ")", "/", "n_class", "\n", "CR", "=", "np", ".", "sum", "(", "Nc", "/", "Ng", ")", "/", "n_class", "\n", "CF1", "=", "(", "2", "*", "CP", "*", "CR", ")", "/", "(", "CP", "+", "CR", ")", "\n", "\n", "if", "CF1", "+", "OF1", ">", "r_CF1", "+", "r_OF1", ":", "\n", "                ", "r_OP", ",", "r_OR", ",", "r_OF1", ",", "r_CP", ",", "r_CR", ",", "r_CF1", "=", "OP", ",", "OR", ",", "OF1", ",", "CP", ",", "CR", ",", "CF1", "\n", "\n", "", "", "ce", "=", "metric", ".", "coverage_error", "(", "targets_", ",", "scores_", ")", "\n", "lrap", "=", "metric", ".", "label_ranking_average_precision_score", "(", "targets_", ",", "scores_", ")", "\n", "lrl", "=", "metric", ".", "label_ranking_loss", "(", "targets_", ",", "scores_", ")", "\n", "return", "r_OP", ",", "r_OR", ",", "r_OF1", ",", "r_CP", ",", "r_CR", ",", "r_CF1", ",", "ce", ",", "lrap", ",", "lrl", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.download_url": [[100, 139], ["urllib.request.urlretrieve", "tqdm.tqdm", "urllib.request.urlretrieve", "t.update", "util.download_url.my_hook"], "function", ["None"], ["", "", "def", "download_url", "(", "url", ",", "destination", "=", "None", ",", "progress_bar", "=", "True", ")", ":", "\n", "    ", "\"\"\"Download a URL to a local file.\n\n    Parameters\n    ----------\n    url : str\n        The URL to download.\n    destination : str, None\n        The destination of the file. If None is given the file is saved to a temporary directory.\n    progress_bar : bool\n        Whether to show a command-line progress bar while downloading.\n\n    Returns\n    -------\n    filename : str\n        The location of the downloaded file.\n\n    Notes\n    -----\n    Progress bar use/example adapted from tqdm documentation: https://github.com/tqdm/tqdm\n    \"\"\"", "\n", "\n", "def", "my_hook", "(", "t", ")", ":", "\n", "        ", "last_b", "=", "[", "0", "]", "\n", "\n", "def", "inner", "(", "b", "=", "1", ",", "bsize", "=", "1", ",", "tsize", "=", "None", ")", ":", "\n", "            ", "if", "tsize", "is", "not", "None", ":", "\n", "                ", "t", ".", "total", "=", "tsize", "\n", "", "if", "b", ">", "0", ":", "\n", "                ", "t", ".", "update", "(", "(", "b", "-", "last_b", "[", "0", "]", ")", "*", "bsize", ")", "\n", "", "last_b", "[", "0", "]", "=", "b", "\n", "\n", "", "return", "inner", "\n", "\n", "", "if", "progress_bar", ":", "\n", "        ", "with", "tqdm", "(", "unit", "=", "'B'", ",", "unit_scale", "=", "True", ",", "miniters", "=", "1", ",", "desc", "=", "url", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "as", "t", ":", "\n", "            ", "filename", ",", "_", "=", "urlretrieve", "(", "url", ",", "filename", "=", "destination", ",", "reporthook", "=", "my_hook", "(", "t", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "filename", ",", "_", "=", "urlretrieve", "(", "url", ",", "filename", "=", "destination", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.gen_A": [[305, 317], ["pickle.load", "open", "numpy.identity", "_adj.sum"], "function", ["None"], ["", "", "def", "gen_A", "(", "num_classes", ",", "t", ",", "adj_file", ")", ":", "\n", "    ", "import", "pickle", "\n", "result", "=", "pickle", ".", "load", "(", "open", "(", "adj_file", ",", "'rb'", ")", ")", "\n", "_adj", "=", "result", "[", "'adj'", "]", "\n", "_nums", "=", "result", "[", "'nums'", "]", "\n", "_nums", "=", "_nums", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "_adj", "=", "_adj", "/", "_nums", "\n", "_adj", "[", "_adj", "<", "t", "]", "=", "0", "\n", "_adj", "[", "_adj", ">=", "t", "]", "=", "1", "\n", "_adj", "=", "_adj", "*", "0.25", "/", "(", "_adj", ".", "sum", "(", "0", ",", "keepdims", "=", "True", ")", "+", "1e-6", ")", "\n", "_adj", "=", "_adj", "+", "np", ".", "identity", "(", "num_classes", ",", "np", ".", "int", ")", "\n", "return", "_adj", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.gen_adj": [[319, 324], ["torch.pow", "torch.pow", "torch.diag", "torch.diag", "torch.matmul", "torch.matmul", "A.sum().float", "torch.matmul().t", "torch.matmul().t", "A.sum", "torch.matmul", "torch.matmul"], "function", ["None"], ["", "def", "gen_adj", "(", "A", ")", ":", "\n", "    ", "D", "=", "torch", ".", "pow", "(", "A", ".", "sum", "(", "1", ")", ".", "float", "(", ")", ",", "-", "0.5", ")", "\n", "D", "=", "torch", ".", "diag", "(", "D", ")", "\n", "adj", "=", "torch", ".", "matmul", "(", "torch", ".", "matmul", "(", "A", ",", "D", ")", ".", "t", "(", ")", ",", "D", ")", "\n", "return", "adj", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.load_pretrain_model": [[326, 337], ["model.resnet_101.state_dict", "print", "torch.load", "torch.load", "model.resnet_101.state_dict.update", "model.resnet_101.load_state_dict", "gc.collect", "torch.load.items", "k.startswith"], "function", ["None"], ["", "def", "load_pretrain_model", "(", "model", ",", "args", ")", ":", "\n", "    ", "model_dict", "=", "model", ".", "resnet_101", ".", "state_dict", "(", ")", "\n", "print", "(", "'loading pretrained model from imagenet:'", ")", "\n", "resnet_pretrained", "=", "torch", ".", "load", "(", "'pretrained/resnet101.pth.tar'", ")", "\n", "pretrain_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "resnet_pretrained", ".", "items", "(", ")", "if", "not", "k", ".", "startswith", "(", "'fc'", ")", "}", "\n", "model_dict", ".", "update", "(", "pretrain_dict", ")", "\n", "model", ".", "resnet_101", ".", "load_state_dict", "(", "model_dict", ")", "\n", "del", "resnet_pretrained", "\n", "del", "pretrain_dict", "\n", "gc", ".", "collect", "(", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.chehao2628_MSRN.None.demo_apparel_gcn.main_apparel": [[48, 96], ["parser.parse_args", "torch.cuda.is_available", "DataLoader.apparel.split_dataset", "DataLoader.apparel.ApparelClassification", "DataLoader.apparel.ApparelClassification", "np.loadtxt", "np.delete", "np.load", "models.MSGDN", "load_pretrain_model.cuda", "nn.MultiLabelSoftMarginLoss", "torch.optim.SGD", "engine.GCNMultiLabelMAPEngine", "engine.GCNMultiLabelMAPEngine.learning", "open", "pickle.load", "load_pretrain_model", "load_pretrain_model.get_config_optim"], "function", ["home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.apparel.split_dataset", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.engine.Engine.learning", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.load_pretrain_model", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.models.MSGDN.get_config_optim"], ["def", "main_apparel", "(", ")", ":", "\n", "    ", "global", "args", ",", "best_prec1", ",", "use_gpu", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "with", "open", "(", "'data/apparel/image_label.pkl'", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "image_label", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "use_gpu", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "train_map", ",", "test_map", "=", "split_dataset", "(", "image_label", ")", "\n", "# define dataset", "\n", "train_dataset", "=", "ApparelClassification", "(", "args", ".", "data", ",", "train_map", ",", "inp_name", "=", "'data/apparel/apparel_glove_word2vec.pkl'", ")", "\n", "val_dataset", "=", "ApparelClassification", "(", "args", ".", "data", ",", "test_map", ",", "inp_name", "=", "'data/apparel/apparel_glove_word2vec.pkl'", ")", "\n", "\n", "label_file", "=", "'/content/drive/My Drive/pretrained/ComE/voc07_alpha-0.01_beta-0.01_ws-10_neg-5_lr-0.025_icom-131_ind-131_k-4_ds-0.0.txt'", "\n", "group_means_file", "=", "'/content/drive/My Drive/pretrained/ComE/means_.npy'", "\n", "group_covariances_file", "=", "'/content/drive/My Drive/pretrained/ComE/covariances_.npy'", "\n", "label_embedding", "=", "np", ".", "loadtxt", "(", "label_file", ")", "\n", "label_embedding", "=", "np", ".", "delete", "(", "label_embedding", ",", "0", ",", "1", ")", "\n", "group_embedding", "=", "np", ".", "load", "(", "group_covariances_file", ")", "\n", "\n", "num_classes", "=", "11", "\n", "\n", "# load model", "\n", "# model = SGDNN(num_classes=num_classes, t=0.4, adj_file='data/voc/voc_adj.pkl')", "\n", "model", "=", "MSGDN", "(", "num_classes", ",", "args", ".", "pool_ratio", ",", "args", ".", "backbone", ",", "args", ".", "graph_file", ")", "\n", "# config pretrained resnet101", "\n", "if", "args", ".", "pretrained", ":", "\n", "        ", "model", "=", "load_pretrain_model", "(", "model", ",", "args", ")", "\n", "", "model", ".", "cuda", "(", ")", "\n", "\n", "# define loss function (criterion)", "\n", "criterion", "=", "nn", ".", "MultiLabelSoftMarginLoss", "(", ")", "\n", "# define optimizer", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "get_config_optim", "(", "args", ".", "lr", ")", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "state", "=", "{", "'batch_size'", ":", "args", ".", "batch_size", ",", "'image_size'", ":", "args", ".", "image_size", ",", "'max_epochs'", ":", "args", ".", "epochs", ",", "\n", "'evaluate'", ":", "args", ".", "evaluate", ",", "'resume'", ":", "args", ".", "resume", ",", "'num_classes'", ":", "num_classes", "}", "\n", "state", "[", "'difficult_examples'", "]", "=", "True", "\n", "state", "[", "'save_model_path'", "]", "=", "'checkpoint/apparel/'", "\n", "state", "[", "'workers'", "]", "=", "args", ".", "workers", "\n", "state", "[", "'epoch_step'", "]", "=", "args", ".", "epoch_step", "\n", "state", "[", "'lr'", "]", "=", "args", ".", "lr", "\n", "if", "args", ".", "evaluate", ":", "\n", "        ", "state", "[", "'evaluate'", "]", "=", "True", "\n", "", "engine", "=", "GCNMultiLabelMAPEngine", "(", "state", ")", "\n", "engine", ".", "learning", "(", "model", ",", "criterion", ",", "train_dataset", ",", "val_dataset", ",", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.apparel.make_graph_apparel.make_graph": [[13, 25], ["numpy.zeros"], "function", ["None"], ["def", "make_graph", "(", ")", ":", "\n", "    ", "category_info", "=", "{", "'black'", ":", "0", ",", "'blue'", ":", "1", ",", "'brown'", ":", "2", ",", "'green'", ":", "3", ",", "'red'", ":", "4", ",", "'white'", ":", "5", ",", "'dress'", ":", "6", ",", "'pants'", ":", "7", ",", "\n", "'shirt'", ":", "8", ",", "'shoes'", ":", "9", ",", "'shorts'", ":", "10", "}", "\n", "\n", "# img_dir = './data/VOCdevkit/VOC2007/JPEGImages'", "\n", "# anno_path = './data/VOCdevkit/VOC2007/ImageSets/Main/trainval.txt'", "\n", "# labels_path = './data/VOCdevkit/VOC2007/Annotations'", "\n", "img_dir", "=", "'E:/dataset/VOCdevkit/VOC2012/JPEGImages'", "\n", "anno_path", "=", "'E:/dataset/VOCdevkit/VOC2012/ImageSets/Main/trainval.txt'", "\n", "labels_path", "=", "'E:/dataset/VOCdevkit/VOC2012/Annotations'", "\n", "labels", "=", "[", "]", "\n", "train_graph", "=", "np", ".", "zeros", "(", "(", "11", ",", "11", ")", ")", "# \u5171\u73b0\u77e9\u9635", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.coco.COCO2014.__init__": [[104, 116], ["coco.download_coco2014", "coco.COCO2014.get_anno", "len", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.coco.download_coco2014", "home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.coco.COCO2014.get_anno"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "transform", "=", "None", ",", "phase", "=", "'train'", ",", "inp_name", "=", "None", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "phase", "=", "phase", "\n", "self", ".", "img_list", "=", "[", "]", "\n", "self", ".", "transform", "=", "transform", "\n", "download_coco2014", "(", "root", ",", "phase", ")", "\n", "self", ".", "get_anno", "(", ")", "\n", "self", ".", "num_classes", "=", "len", "(", "self", ".", "cat2idx", ")", "\n", "\n", "with", "open", "(", "inp_name", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "self", ".", "inp", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "self", ".", "inp_name", "=", "inp_name", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.coco.COCO2014.get_anno": [[117, 121], ["os.path.join", "json.load", "json.load", "open", "open", "os.path.join"], "methods", ["None"], ["", "def", "get_anno", "(", "self", ")", ":", "\n", "        ", "list_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'../data'", ",", "'{}_anno.json'", ".", "format", "(", "self", ".", "phase", ")", ")", "\n", "self", ".", "img_list", "=", "json", ".", "load", "(", "open", "(", "list_path", ",", "'r'", ")", ")", "\n", "self", ".", "cat2idx", "=", "json", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'../data'", ",", "'category.json'", ")", ",", "'r'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.coco.COCO2014.__len__": [[122, 124], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.coco.COCO2014.__getitem__": [[125, 128], ["coco.COCO2014.get"], "methods", ["home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.coco.COCO2014.get"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "item", "=", "self", ".", "img_list", "[", "index", "]", "\n", "return", "self", ".", "get", "(", "item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.coco.COCO2014.get": [[129, 138], ["sorted", "PIL.Image.open().convert", "coco.COCO2014.transform", "numpy.zeros", "PIL.Image.open", "os.path.join"], "methods", ["None"], ["", "def", "get", "(", "self", ",", "item", ")", ":", "\n", "        ", "filename", "=", "item", "[", "'file_name'", "]", "\n", "labels", "=", "sorted", "(", "item", "[", "'labels'", "]", ")", "\n", "img", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'../data'", ",", "'{}2014'", ".", "format", "(", "self", ".", "phase", ")", ",", "filename", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "target", "=", "np", ".", "zeros", "(", "self", ".", "num_classes", ",", "np", ".", "float32", ")", "-", "1", "\n", "target", "[", "labels", "]", "=", "1", "\n", "return", "(", "img", ",", "filename", ",", "self", ".", "inp", ")", ",", "target", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.coco.download_coco2014": [[16, 94], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "print", "os.path.join", "os.path.join", "print", "os.path.join", "print", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "print", "os.chdir", "subprocess.call", "os.chdir", "os.path.exists", "print", "os.system", "os.path.exists", "print", "os.chdir", "subprocess.Popen", "os.chdir", "os.path.exists", "print", "os.system", "os.path.exists", "json.load", "coco.categoty_to_idx", "img_id.items", "json.dump", "filename.split", "open", "sorted", "annotations_id[].add", "list", "anno_list.append", "open", "os.path.exists", "json.dump", "os.path.join", "category_id.values", "set", "os.path.join", "open", "os.path.join"], "function", ["home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.coco.categoty_to_idx", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.AveragePrecisionMeter.add"], ["def", "download_coco2014", "(", "root", ",", "phase", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "root", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "root", ")", "\n", "", "tmpdir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'tmp/'", ")", "\n", "data", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'../data/'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "data", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "data", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "tmpdir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "tmpdir", ")", "\n", "", "if", "phase", "==", "'train'", ":", "\n", "        ", "filename", "=", "'train2014.zip'", "\n", "", "elif", "phase", "==", "'val'", ":", "\n", "        ", "filename", "=", "'val2014.zip'", "\n", "", "cached_file", "=", "os", ".", "path", ".", "join", "(", "tmpdir", ",", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cached_file", ")", ":", "\n", "        ", "print", "(", "'Downloading: \"{}\" to {}\\n'", ".", "format", "(", "urls", "[", "phase", "+", "'_img'", "]", ",", "cached_file", ")", ")", "\n", "os", ".", "chdir", "(", "tmpdir", ")", "\n", "subprocess", ".", "call", "(", "'wget '", "+", "urls", "[", "phase", "+", "'_img'", "]", ",", "shell", "=", "True", ")", "\n", "os", ".", "chdir", "(", "root", ")", "\n", "# extract file", "\n", "", "img_data", "=", "os", ".", "path", ".", "join", "(", "data", ",", "filename", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "img_data", ")", ":", "\n", "        ", "print", "(", "'[dataset] Extracting tar file {file} to {path}'", ".", "format", "(", "file", "=", "cached_file", ",", "path", "=", "data", ")", ")", "\n", "command", "=", "'unzip {} -d {}'", ".", "format", "(", "cached_file", ",", "data", ")", "\n", "os", ".", "system", "(", "command", ")", "\n", "", "print", "(", "'[dataset] Done!'", ")", "\n", "\n", "# train/val images/annotations", "\n", "cached_file", "=", "os", ".", "path", ".", "join", "(", "tmpdir", ",", "'annotations_trainval2014.zip'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cached_file", ")", ":", "\n", "        ", "print", "(", "'Downloading: \"{}\" to {}\\n'", ".", "format", "(", "urls", "[", "'annotations'", "]", ",", "cached_file", ")", ")", "\n", "os", ".", "chdir", "(", "tmpdir", ")", "\n", "subprocess", ".", "Popen", "(", "'wget '", "+", "urls", "[", "'annotations'", "]", ",", "shell", "=", "True", ")", "\n", "os", ".", "chdir", "(", "root", ")", "\n", "", "annotations_data", "=", "os", ".", "path", ".", "join", "(", "data", ",", "'annotations'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "annotations_data", ")", ":", "\n", "        ", "print", "(", "'[dataset] Extracting tar file {file} to {path}'", ".", "format", "(", "file", "=", "cached_file", ",", "path", "=", "data", ")", ")", "\n", "command", "=", "'unzip {} -d {}'", ".", "format", "(", "cached_file", ",", "data", ")", "\n", "os", ".", "system", "(", "command", ")", "\n", "", "print", "(", "'[annotation] Done!'", ")", "\n", "\n", "anno", "=", "os", ".", "path", ".", "join", "(", "data", ",", "'{}_anno.json'", ".", "format", "(", "phase", ")", ")", "\n", "img_id", "=", "{", "}", "\n", "annotations_id", "=", "{", "}", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "anno", ")", ":", "\n", "        ", "annotations_file", "=", "json", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "annotations_data", ",", "'instances_{}2014.json'", ".", "format", "(", "phase", ")", ")", ")", ")", "\n", "annotations", "=", "annotations_file", "[", "'annotations'", "]", "\n", "category", "=", "annotations_file", "[", "'categories'", "]", "\n", "category_id", "=", "{", "}", "\n", "for", "cat", "in", "category", ":", "\n", "            ", "category_id", "[", "cat", "[", "'id'", "]", "]", "=", "cat", "[", "'name'", "]", "\n", "", "cat2idx", "=", "categoty_to_idx", "(", "sorted", "(", "category_id", ".", "values", "(", ")", ")", ")", "\n", "images", "=", "annotations_file", "[", "'images'", "]", "\n", "for", "annotation", "in", "annotations", ":", "\n", "            ", "if", "annotation", "[", "'image_id'", "]", "not", "in", "annotations_id", ":", "\n", "                ", "annotations_id", "[", "annotation", "[", "'image_id'", "]", "]", "=", "set", "(", ")", "\n", "", "annotations_id", "[", "annotation", "[", "'image_id'", "]", "]", ".", "add", "(", "cat2idx", "[", "category_id", "[", "annotation", "[", "'category_id'", "]", "]", "]", ")", "\n", "", "for", "img", "in", "images", ":", "\n", "            ", "if", "img", "[", "'id'", "]", "not", "in", "annotations_id", ":", "\n", "                ", "continue", "\n", "", "if", "img", "[", "'id'", "]", "not", "in", "img_id", ":", "\n", "                ", "img_id", "[", "img", "[", "'id'", "]", "]", "=", "{", "}", "\n", "", "img_id", "[", "img", "[", "'id'", "]", "]", "[", "'file_name'", "]", "=", "img", "[", "'file_name'", "]", "\n", "img_id", "[", "img", "[", "'id'", "]", "]", "[", "'labels'", "]", "=", "list", "(", "annotations_id", "[", "img", "[", "'id'", "]", "]", ")", "\n", "", "anno_list", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "img_id", ".", "items", "(", ")", ":", "\n", "            ", "anno_list", ".", "append", "(", "v", ")", "\n", "", "json", ".", "dump", "(", "anno_list", ",", "open", "(", "anno", ",", "'w'", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "data", ",", "'category.json'", ")", ")", ":", "\n", "            ", "json", ".", "dump", "(", "cat2idx", ",", "open", "(", "os", ".", "path", ".", "join", "(", "data", ",", "'category.json'", ")", ",", "'w'", ")", ")", "\n", "", "del", "img_id", "\n", "del", "anno_list", "\n", "del", "images", "\n", "del", "annotations_id", "\n", "del", "annotations", "\n", "del", "category", "\n", "del", "category_id", "\n", "", "print", "(", "'[json] Done!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.coco.categoty_to_idx": [[96, 101], ["len"], "function", ["None"], ["", "def", "categoty_to_idx", "(", "category", ")", ":", "\n", "    ", "cat2idx", "=", "{", "}", "\n", "for", "cat", "in", "category", ":", "\n", "        ", "cat2idx", "[", "cat", "]", "=", "len", "(", "cat2idx", ")", "\n", "", "return", "cat2idx", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.apparel.ApparelClassification.__init__": [[86, 95], ["list", "dataset_map.keys", "open", "numpy.array", "pickle.load", "pickle.load", "pickle.load", "pickle.load"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "dataset_map", ",", "transform", "=", "None", ",", "inp_name", "=", "None", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "img_list", "=", "list", "(", "dataset_map", ".", "keys", "(", ")", ")", "\n", "self", ".", "image_label", "=", "dataset_map", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "num_classes", "=", "11", "\n", "\n", "with", "open", "(", "inp_name", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "self", ".", "inp", "=", "np", ".", "array", "(", "pickle", ".", "load", "(", "f", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.apparel.ApparelClassification.__len__": [[96, 98], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "image_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.apparel.ApparelClassification.__getitem__": [[99, 110], ["PIL.Image.open().convert", "range", "apparel.ApparelClassification.transform", "numpy.zeros", "len", "PIL.Image.open", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "filename", "=", "self", ".", "img_list", "[", "index", "]", "\n", "labels", "=", "self", ".", "image_label", "[", "filename", "]", "# image file name", "\n", "img", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'apparel'", ",", "filename", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "target", "=", "np", ".", "zeros", "(", "self", ".", "num_classes", ",", "np", ".", "float32", ")", "-", "1", "\n", "for", "i", "in", "range", "(", "len", "(", "labels", ")", ")", ":", "\n", "            ", "if", "labels", "[", "i", "]", "==", "0", ":", "\n", "                ", "target", "[", "i", "]", "=", "1", "\n", "", "", "return", "(", "img", ",", "filename", ",", "self", ".", "inp", ")", ",", "target", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.apparel.glove2vec": [[25, 49], ["open", "range", "pickle.dump", "pickle.dump", "open.close", "open", "file_to_read.readlines", "glove_vec.append", "line.split", "str", "object_categories.keys", "vec_float.append", "float"], "function", ["None"], ["def", "glove2vec", "(", ")", ":", "\n", "# capture the  glove label embedding of apparel", "\n", "    ", "path", "=", "'data/glove.6B.300d.txt'", "\n", "# path = 'apparel_vec.txt'", "\n", "\n", "vec_map", "=", "{", "}", "\n", "with", "open", "(", "path", ",", "'rb'", ")", "as", "file_to_read", ":", "\n", "        ", "for", "line", "in", "file_to_read", ".", "readlines", "(", ")", ":", "\n", "# lines = file_to_read.readline()  # \u6574\u884c\u8bfb\u53d6\u6570\u636e", "\n", "            ", "data", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "str", "(", "data", "[", "0", "]", ")", "[", "2", ":", "-", "1", "]", "\n", "vec", "=", "data", "[", "1", ":", "]", "\n", "if", "head", "in", "object_categories", ".", "keys", "(", ")", ":", "\n", "                ", "vec_float", "=", "[", "]", "\n", "for", "v", "in", "vec", ":", "\n", "                    ", "vec_float", ".", "append", "(", "float", "(", "v", ")", ")", "\n", "", "vec_map", "[", "object_categories", "[", "head", "]", "]", "=", "vec_float", "\n", "", "", "", "glove_vec", "=", "[", "]", "\n", "vec_path", "=", "'data/apparel_/apparel_glove_word2vec.pkl'", "\n", "vec_file", "=", "open", "(", "vec_path", ",", "'wb'", ")", "\n", "for", "i", "in", "range", "(", "11", ")", ":", "\n", "        ", "glove_vec", ".", "append", "(", "vec_map", "[", "i", "]", ")", "\n", "", "pickle", ".", "dump", "(", "glove_vec", ",", "vec_file", ")", "\n", "vec_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.apparel.apparel_correspond": [[51, 69], ["numpy.zeros", "open", "pickle.dump", "pickle.dump", "open", "sum", "pickle.dump", "pickle.dump", "folder.split", "os.listdir", "os.listdir"], "function", ["None"], ["", "def", "apparel_correspond", "(", ")", ":", "\n", "    ", "correspond", "=", "{", "}", "\n", "adj", "=", "np", ".", "zeros", "(", "(", "11", ",", "11", ")", ")", "\n", "for", "folder", "in", "folders", ":", "\n", "        ", "name", "=", "folder", ".", "split", "(", "'_'", ")", "\n", "label1", ",", "label2", "=", "object_categories", "[", "name", "[", "0", "]", "]", ",", "object_categories", "[", "name", "[", "1", "]", "]", "\n", "images", "=", "os", ".", "listdir", "(", "image_path", "+", "folder", ")", "\n", "for", "img", "in", "images", ":", "\n", "            ", "labels", "=", "[", "-", "1", "]", "*", "11", "\n", "labels", "[", "label1", "]", "=", "1", "\n", "labels", "[", "label2", "]", "=", "1", "\n", "correspond", "[", "img", "]", "=", "labels", "# image name: label", "\n", "adj", "[", "label1", "]", "[", "label2", "]", "+=", "1", "\n", "", "", "correspond_file", "=", "open", "(", "'data/apparel_/image_label.pkl'", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "correspond", ",", "correspond_file", ")", "\n", "adj_file", "=", "open", "(", "'data/apparel_/apparel_adj.pkl'", ",", "'wb'", ")", "\n", "nums", "=", "sum", "(", "adj", ",", "1", ")", "\n", "pickle", ".", "dump", "(", "{", "'adj'", ":", "adj", ",", "'nums'", ":", "nums", "}", ",", "adj_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.apparel.split_dataset": [[73, 81], ["list", "random.seed", "random.shuffle", "image_label.items", "dict", "dict", "int", "int", "len", "len"], "function", ["None"], ["", "def", "split_dataset", "(", "image_label", ")", ":", "\n", "    ", "img_l", "=", "list", "(", "image_label", ".", "items", "(", ")", ")", "\n", "random", ".", "seed", "(", "10", ")", "\n", "random", ".", "shuffle", "(", "img_l", ")", "\n", "\n", "trainval", ",", "test", "=", "img_l", "[", ":", "int", "(", "len", "(", "img_l", ")", "*", "0.5", ")", "]", ",", "img_l", "[", "int", "(", "len", "(", "img_l", ")", "*", "0.5", ")", ":", "]", "\n", "trainval", ",", "test", "=", "dict", "(", "trainval", ")", ",", "dict", "(", "test", ")", "\n", "return", "trainval", ",", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.nuswide.NusWideClassification.__init__": [[128, 148], ["nuswide.read_object_labels_csv", "print", "open", "pickle.load", "len", "len"], "methods", ["home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.voc.read_object_labels_csv"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "set", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "inp_name", "=", "None", ",", "adj", "=", "None", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "path_images", "=", "root", "\n", "self", ".", "set", "=", "set", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n", "# define path of csv file", "\n", "# define filename of csv file", "\n", "file_csv", "=", "'/content/ML-GCN-SGD/data/nuswide/nus_wid_data.csv'", "\n", "\n", "self", ".", "classes", "=", "object_categories", "\n", "self", ".", "images", "=", "read_object_labels_csv", "(", "file_csv", ",", "set", ")", "\n", "\n", "with", "open", "(", "inp_name", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "self", ".", "inp", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "self", ".", "inp_name", "=", "inp_name", "\n", "\n", "print", "(", "'[dataset] Nus-Wide classification set=%s number of classes=%d  number of images=%d'", "%", "(", "\n", "set", ",", "len", "(", "self", ".", "classes", ")", ",", "len", "(", "self", ".", "images", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.nuswide.NusWideClassification.__getitem__": [[149, 157], ["PIL.Image.open().convert", "nuswide.NusWideClassification.transform", "nuswide.NusWideClassification.target_transform", "PIL.Image.open", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", ",", "target", "=", "self", ".", "images", "[", "index", "]", "\n", "img", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "path_images", ",", "path", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "", "return", "(", "img", ",", "path", ",", "torch", ".", "tensor", "(", "self", ".", "inp", ")", ")", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.nuswide.NusWideClassification.__len__": [[158, 160], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.nuswide.NusWideClassification.get_number_classes": [[161, 163], ["len"], "methods", ["None"], ["", "def", "get_number_classes", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "classes", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.nuswide.glove2vec": [[39, 68], ["open", "range", "pickle.dump", "open.close", "open", "file_to_read.readlines", "print", "len", "glove_vec.append", "line.split", "str", "print", "vec_float.append", "float"], "function", ["None"], ["def", "glove2vec", "(", ")", ":", "\n", "# capture the  glove label embedding of apparel", "\n", "    ", "path", "=", "'data/glove.6B.300d.txt'", "\n", "# path = 'apparel_vec.txt'", "\n", "\n", "vec_map", "=", "{", "}", "\n", "with", "open", "(", "path", ",", "'rb'", ")", "as", "file_to_read", ":", "\n", "        ", "c", "=", "0", "\n", "for", "line", "in", "file_to_read", ".", "readlines", "(", ")", ":", "\n", "# lines = file_to_read.readline()  # \u6574\u884c\u8bfb\u53d6\u6570\u636e", "\n", "            ", "data", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "str", "(", "data", "[", "0", "]", ")", "[", "2", ":", "-", "1", "]", "\n", "vec", "=", "data", "[", "1", ":", "]", "\n", "if", "head", "in", "object_categories", ":", "\n", "                ", "c", "+=", "1", "\n", "print", "(", "'Found the word:'", ",", "head", ")", "\n", "vec_float", "=", "[", "]", "\n", "for", "v", "in", "vec", ":", "\n", "                    ", "vec_float", ".", "append", "(", "float", "(", "v", ")", ")", "\n", "", "vec_map", "[", "object_categories_map", "[", "head", "]", "]", "=", "vec_float", "\n", "", "", "print", "(", "c", ")", "\n", "\n", "", "glove_vec", "=", "[", "]", "\n", "vec_path", "=", "'../data/nuswide/nuswide_glove_word2vec.pkl'", "\n", "vec_file", "=", "open", "(", "vec_path", ",", "'wb'", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "object_categories", ")", ")", ":", "\n", "        ", "glove_vec", ".", "append", "(", "vec_map", "[", "i", "]", ")", "\n", "", "pickle", ".", "dump", "(", "glove_vec", ",", "vec_file", ")", "\n", "vec_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.nuswide.read_image_label": [[70, 82], ["print", "dict", "open", "line.split", "int"], "function", ["None"], ["", "def", "read_image_label", "(", "file", ")", ":", "\n", "    ", "print", "(", "'[dataset] read '", "+", "file", ")", "\n", "data", "=", "dict", "(", ")", "\n", "with", "open", "(", "file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "tmp", "=", "line", ".", "split", "(", "' '", ")", "\n", "name", "=", "tmp", "[", "0", "]", "\n", "label", "=", "int", "(", "tmp", "[", "-", "1", "]", ")", "\n", "data", "[", "name", "]", "=", "label", "\n", "# data.append([name, label])", "\n", "# print('%s  %d' % (name, label))", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.nuswide.read_object_labels_csv": [[84, 125], ["print", "open", "csv.reader", "numpy.zeros", "len", "len", "label_str.split", "numpy.asarray().astype", "torch.tensor", "torch.tensor", "images.append", "label.append", "len", "len", "numpy.asarray", "int"], "function", ["None"], ["", "def", "read_object_labels_csv", "(", "file", ",", "set", ",", "header", "=", "True", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "num_categories", "=", "0", "\n", "print", "(", "'[dataset] read'", ",", "file", ")", "\n", "with", "open", "(", "file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "reader", "=", "csv", ".", "reader", "(", "f", ")", "\n", "rownum", "=", "0", "\n", "adj", "=", "np", ".", "zeros", "(", "(", "len", "(", "object_categories", ")", ",", "len", "(", "object_categories", ")", ")", ")", "\n", "for", "row", "in", "reader", ":", "\n", "            ", "if", "row", "[", "2", "]", "==", "set", ":", "\n", "                ", "if", "header", "and", "rownum", "==", "0", ":", "\n", "                    ", "header", "=", "row", "\n", "", "else", ":", "\n", "                    ", "if", "num_categories", "==", "0", ":", "\n", "                        ", "num_categories", "=", "len", "(", "row", ")", "-", "1", "\n", "", "name", "=", "row", "[", "0", "]", "\n", "label", "=", "[", "]", "\n", "label_str", "=", "row", "[", "1", "]", "[", "1", ":", "-", "1", "]", "\n", "label_str_list", "=", "label_str", ".", "split", "(", "', '", ")", "\n", "for", "l", "in", "label_str_list", ":", "\n", "                        ", "cur", "=", "l", "[", "1", ":", "-", "1", "]", "\n", "label", ".", "append", "(", "object_categories_map", "[", "cur", "]", ")", "\n", "", "labels", "=", "(", "np", ".", "asarray", "(", "label", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "# Create adjcent matrix here", "\n", "# for i in labels:", "\n", "#     for j in labels:", "\n", "#         adj[int(i)][int(j)] += 1", "\n", "targets", "=", "[", "-", "1", "]", "*", "len", "(", "object_categories", ")", "\n", "for", "l", "in", "labels", ":", "\n", "                        ", "targets", "[", "int", "(", "l", ")", "]", "=", "1", "\n", "", "targets", "=", "torch", ".", "tensor", "(", "targets", ")", "\n", "item", "=", "(", "name", ",", "targets", ")", "\n", "images", ".", "append", "(", "item", ")", "\n", "\n", "", "rownum", "+=", "1", "\n", "# adj_file = open('data/nuswide/nuswide_adj.pkl', 'wb')", "\n", "# nums = sum(adj, 1)", "\n", "# pickle.dump({'adj': adj, 'nums': nums}, adj_file)", "\n", "# print(adj)", "\n", "\n", "", "", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.voc.Voc2007Classification.__init__": [[216, 250], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "voc.download_voc2007", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "voc.read_object_labels_csv", "print", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "voc.read_object_labels", "voc.write_object_labels_csv", "open", "pickle.load", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "len", "len"], "methods", ["home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.voc.download_voc2007", "home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.voc.read_object_labels_csv", "home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.voc.read_object_labels", "home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.voc.write_object_labels_csv"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "set", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "inp_name", "=", "None", ",", "adj", "=", "None", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "path_devkit", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'VOCdevkit'", ")", "\n", "self", ".", "path_images", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'VOCdevkit'", ",", "'VOC2007'", ",", "'JPEGImages'", ")", "\n", "self", ".", "set", "=", "set", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n", "# download dataset", "\n", "download_voc2007", "(", "self", ".", "root", ")", "\n", "\n", "# define path of csv file", "\n", "path_csv", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'files'", ",", "'VOC2007'", ")", "\n", "# define filename of csv file", "\n", "file_csv", "=", "os", ".", "path", ".", "join", "(", "path_csv", ",", "'classification_'", "+", "set", "+", "'.csv'", ")", "\n", "\n", "# create the csv file if necessary", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "file_csv", ")", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "path_csv", ")", ":", "# create dir if necessary", "\n", "                ", "os", ".", "makedirs", "(", "path_csv", ")", "\n", "# generate csv file", "\n", "", "labeled_data", "=", "read_object_labels", "(", "self", ".", "root", ",", "'VOC2007'", ",", "self", ".", "set", ")", "\n", "# write csv file", "\n", "write_object_labels_csv", "(", "file_csv", ",", "labeled_data", ")", "\n", "\n", "", "self", ".", "classes", "=", "object_categories", "\n", "self", ".", "images", "=", "read_object_labels_csv", "(", "file_csv", ")", "\n", "\n", "with", "open", "(", "inp_name", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "self", ".", "inp", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "self", ".", "inp_name", "=", "inp_name", "\n", "\n", "print", "(", "'[dataset] VOC 2007 classification set=%s number of classes=%d  number of images=%d'", "%", "(", "\n", "set", ",", "len", "(", "self", ".", "classes", ")", ",", "len", "(", "self", ".", "images", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.voc.Voc2007Classification.__getitem__": [[251, 260], ["PIL.Image.open().convert", "voc.Voc2007Classification.transform", "voc.Voc2007Classification.target_transform", "PIL.Image.open", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", ",", "target", "=", "self", ".", "images", "[", "index", "]", "\n", "img", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "path_images", ",", "path", "+", "'.jpg'", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "(", "img", ",", "path", ",", "self", ".", "inp", ")", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.voc.Voc2007Classification.__len__": [[261, 263], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.voc.Voc2007Classification.get_number_classes": [[264, 266], ["len"], "methods", ["None"], ["", "def", "get_number_classes", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "classes", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.voc.read_image_label": [[29, 41], ["print", "dict", "open", "line.split", "int"], "function", ["None"], ["def", "read_image_label", "(", "file", ")", ":", "\n", "    ", "print", "(", "'[dataset] read '", "+", "file", ")", "\n", "data", "=", "dict", "(", ")", "\n", "with", "open", "(", "file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "tmp", "=", "line", ".", "split", "(", "' '", ")", "\n", "name", "=", "tmp", "[", "0", "]", "\n", "label", "=", "int", "(", "tmp", "[", "-", "1", "]", ")", "\n", "data", "[", "name", "]", "=", "label", "\n", "# data.append([name, label])", "\n", "# print('%s  %d' % (name, label))", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.voc.read_object_labels": [[43, 62], ["os.path.join", "os.path.join", "dict", "len", "range", "os.path.join", "os.path.join", "voc.read_image_label", "read_image_label.items", "read_image_label.items", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.voc.read_image_label"], ["", "def", "read_object_labels", "(", "root", ",", "dataset", ",", "set", ")", ":", "\n", "    ", "path_labels", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'VOCdevkit'", ",", "dataset", ",", "'ImageSets'", ",", "'Main'", ")", "\n", "labeled_data", "=", "dict", "(", ")", "\n", "num_classes", "=", "len", "(", "object_categories", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "        ", "file", "=", "os", ".", "path", ".", "join", "(", "path_labels", ",", "object_categories", "[", "i", "]", "+", "'_'", "+", "set", "+", "'.txt'", ")", "\n", "data", "=", "read_image_label", "(", "file", ")", "\n", "\n", "if", "i", "==", "0", ":", "\n", "            ", "for", "(", "name", ",", "label", ")", "in", "data", ".", "items", "(", ")", ":", "\n", "                ", "labels", "=", "np", ".", "zeros", "(", "num_classes", ")", "\n", "labels", "[", "i", "]", "=", "label", "\n", "labeled_data", "[", "name", "]", "=", "labels", "\n", "", "", "else", ":", "\n", "            ", "for", "(", "name", ",", "label", ")", "in", "data", ".", "items", "(", ")", ":", "\n", "                ", "labeled_data", "[", "name", "]", "[", "i", "]", "=", "label", "\n", "\n", "", "", "", "return", "labeled_data", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.voc.write_object_labels_csv": [[64, 80], ["print", "csvfile.close", "open", "fieldnames.extend", "csv.DictWriter", "csv.DictWriter.writeheader", "labeled_data.items", "range", "csv.DictWriter.writerow", "int"], "function", ["None"], ["", "def", "write_object_labels_csv", "(", "file", ",", "labeled_data", ")", ":", "\n", "# write a csv file", "\n", "    ", "print", "(", "'[dataset] write file %s'", "%", "file", ")", "\n", "with", "open", "(", "file", ",", "'w'", ")", "as", "csvfile", ":", "\n", "        ", "fieldnames", "=", "[", "'name'", "]", "\n", "fieldnames", ".", "extend", "(", "object_categories", ")", "\n", "writer", "=", "csv", ".", "DictWriter", "(", "csvfile", ",", "fieldnames", "=", "fieldnames", ")", "\n", "\n", "writer", ".", "writeheader", "(", ")", "\n", "for", "(", "name", ",", "labels", ")", "in", "labeled_data", ".", "items", "(", ")", ":", "\n", "            ", "example", "=", "{", "'name'", ":", "name", "}", "\n", "for", "i", "in", "range", "(", "20", ")", ":", "\n", "                ", "example", "[", "fieldnames", "[", "i", "+", "1", "]", "]", "=", "int", "(", "labels", "[", "i", "]", ")", "\n", "", "writer", ".", "writerow", "(", "example", ")", "\n", "\n", "", "", "csvfile", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.voc.read_object_labels_csv": [[82, 102], ["print", "open", "csv.reader", "numpy.asarray().astype", "torch.from_numpy", "torch.from_numpy", "images.append", "len", "numpy.asarray"], "function", ["None"], ["", "def", "read_object_labels_csv", "(", "file", ",", "header", "=", "True", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "num_categories", "=", "0", "\n", "print", "(", "'[dataset] read'", ",", "file", ")", "\n", "with", "open", "(", "file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "reader", "=", "csv", ".", "reader", "(", "f", ")", "\n", "rownum", "=", "0", "\n", "for", "row", "in", "reader", ":", "\n", "            ", "if", "header", "and", "rownum", "==", "0", ":", "\n", "                ", "header", "=", "row", "\n", "", "else", ":", "\n", "                ", "if", "num_categories", "==", "0", ":", "\n", "                    ", "num_categories", "=", "len", "(", "row", ")", "-", "1", "\n", "", "name", "=", "row", "[", "0", "]", "\n", "labels", "=", "(", "np", ".", "asarray", "(", "row", "[", "1", ":", "num_categories", "+", "1", "]", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "labels", "=", "torch", ".", "from_numpy", "(", "labels", ")", "\n", "item", "=", "(", "name", ",", "labels", ")", "\n", "images", ".", "append", "(", "item", ")", "\n", "", "rownum", "+=", "1", "\n", "", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.voc.find_images_classification": [[104, 112], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "images.append"], "function", ["None"], ["", "def", "find_images_classification", "(", "root", ",", "dataset", ",", "set", ")", ":", "\n", "    ", "path_labels", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'VOCdevkit'", ",", "dataset", ",", "'ImageSets'", ",", "'Main'", ")", "\n", "images", "=", "[", "]", "\n", "file", "=", "os", ".", "path", ".", "join", "(", "path_labels", ",", "set", "+", "'.txt'", ")", "\n", "with", "open", "(", "file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "images", ".", "append", "(", "line", ")", "\n", "", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.chehao2628_MSRN.DataLoader.voc.download_voc2007": [[114, 213], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "os.path.exists", "os.path.exists", "urllib.parse.urlparse", "os.path.basename", "os.path.basename", "os.path.join", "os.path.join", "print", "os.getcwd", "os.getcwd", "tarfile.open", "os.chdir", "os.chdir", "tarfile.open.extractall", "tarfile.open.close", "os.chdir", "os.chdir", "print", "os.path.exists", "os.path.exists", "urllib.parse.urlparse", "os.path.basename", "os.path.basename", "os.path.join", "os.path.join", "print", "os.getcwd", "os.getcwd", "tarfile.open", "os.chdir", "os.chdir", "tarfile.open.extractall", "tarfile.open.close", "os.chdir", "os.chdir", "print", "os.path.exists", "os.path.exists", "urllib.parse.urlparse", "os.path.basename", "os.path.basename", "os.path.join", "os.path.join", "print", "os.getcwd", "os.getcwd", "tarfile.open", "os.chdir", "os.chdir", "tarfile.open.extractall", "tarfile.open.close", "os.chdir", "os.chdir", "print", "os.path.exists", "os.path.exists", "urllib.parse.urlparse", "os.path.basename", "os.path.basename", "os.path.join", "os.path.join", "print", "os.getcwd", "os.getcwd", "tarfile.open", "os.chdir", "os.chdir", "tarfile.open.extractall", "tarfile.open.close", "os.chdir", "os.chdir", "print", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "os.path.exists", "os.path.exists", "print", "util.download_url", "os.path.exists", "os.path.exists", "print", "util.download_url", "os.path.exists", "os.path.exists", "print", "util.download_url", "os.path.exists", "os.path.exists", "print", "util.download_url"], "function", ["home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.download_url", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.download_url", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.download_url", "home.repos.pwc.inspect_result.chehao2628_MSRN.None.util.download_url"], ["", "def", "download_voc2007", "(", "root", ")", ":", "\n", "    ", "path_devkit", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'VOCdevkit'", ")", "\n", "path_images", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'VOCdevkit'", ",", "'VOC2007'", ",", "'JPEGImages'", ")", "\n", "tmpdir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'tmp'", ")", "\n", "\n", "# create directory", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "root", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "root", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "path_devkit", ")", ":", "\n", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "tmpdir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "tmpdir", ")", "\n", "\n", "", "parts", "=", "urlparse", "(", "urls", "[", "'devkit'", "]", ")", "\n", "filename", "=", "os", ".", "path", ".", "basename", "(", "parts", ".", "path", ")", "\n", "cached_file", "=", "os", ".", "path", ".", "join", "(", "tmpdir", ",", "filename", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cached_file", ")", ":", "\n", "            ", "print", "(", "'Downloading: \"{}\" to {}\\n'", ".", "format", "(", "urls", "[", "'devkit'", "]", ",", "cached_file", ")", ")", "\n", "util", ".", "download_url", "(", "urls", "[", "'devkit'", "]", ",", "cached_file", ")", "\n", "\n", "# extract file", "\n", "", "print", "(", "'[dataset] Extracting tar file {file} to {path}'", ".", "format", "(", "file", "=", "cached_file", ",", "path", "=", "root", ")", ")", "\n", "cwd", "=", "os", ".", "getcwd", "(", ")", "\n", "tar", "=", "tarfile", ".", "open", "(", "cached_file", ",", "\"r\"", ")", "\n", "os", ".", "chdir", "(", "root", ")", "\n", "tar", ".", "extractall", "(", ")", "\n", "tar", ".", "close", "(", ")", "\n", "os", ".", "chdir", "(", "cwd", ")", "\n", "print", "(", "'[dataset] Done!'", ")", "\n", "\n", "# train/val images/annotations", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "path_images", ")", ":", "\n", "\n", "# download train/val images/annotations", "\n", "        ", "parts", "=", "urlparse", "(", "urls", "[", "'trainval_2007'", "]", ")", "\n", "filename", "=", "os", ".", "path", ".", "basename", "(", "parts", ".", "path", ")", "\n", "cached_file", "=", "os", ".", "path", ".", "join", "(", "tmpdir", ",", "filename", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cached_file", ")", ":", "\n", "            ", "print", "(", "'Downloading: \"{}\" to {}\\n'", ".", "format", "(", "urls", "[", "'trainval_2007'", "]", ",", "cached_file", ")", ")", "\n", "util", ".", "download_url", "(", "urls", "[", "'trainval_2007'", "]", ",", "cached_file", ")", "\n", "\n", "# extract file", "\n", "", "print", "(", "'[dataset] Extracting tar file {file} to {path}'", ".", "format", "(", "file", "=", "cached_file", ",", "path", "=", "root", ")", ")", "\n", "cwd", "=", "os", ".", "getcwd", "(", ")", "\n", "tar", "=", "tarfile", ".", "open", "(", "cached_file", ",", "\"r\"", ")", "\n", "os", ".", "chdir", "(", "root", ")", "\n", "tar", ".", "extractall", "(", ")", "\n", "tar", ".", "close", "(", ")", "\n", "os", ".", "chdir", "(", "cwd", ")", "\n", "print", "(", "'[dataset] Done!'", ")", "\n", "\n", "# test annotations", "\n", "", "test_anno", "=", "os", ".", "path", ".", "join", "(", "path_devkit", ",", "'VOC2007/ImageSets/Main/aeroplane_test.txt'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "test_anno", ")", ":", "\n", "\n", "# download test annotations", "\n", "        ", "parts", "=", "urlparse", "(", "urls", "[", "'test_images_2007'", "]", ")", "\n", "filename", "=", "os", ".", "path", ".", "basename", "(", "parts", ".", "path", ")", "\n", "cached_file", "=", "os", ".", "path", ".", "join", "(", "tmpdir", ",", "filename", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cached_file", ")", ":", "\n", "            ", "print", "(", "'Downloading: \"{}\" to {}\\n'", ".", "format", "(", "urls", "[", "'test_images_2007'", "]", ",", "cached_file", ")", ")", "\n", "util", ".", "download_url", "(", "urls", "[", "'test_images_2007'", "]", ",", "cached_file", ")", "\n", "\n", "# extract file", "\n", "", "print", "(", "'[dataset] Extracting tar file {file} to {path}'", ".", "format", "(", "file", "=", "cached_file", ",", "path", "=", "root", ")", ")", "\n", "cwd", "=", "os", ".", "getcwd", "(", ")", "\n", "tar", "=", "tarfile", ".", "open", "(", "cached_file", ",", "\"r\"", ")", "\n", "os", ".", "chdir", "(", "root", ")", "\n", "tar", ".", "extractall", "(", ")", "\n", "tar", ".", "close", "(", ")", "\n", "os", ".", "chdir", "(", "cwd", ")", "\n", "print", "(", "'[dataset] Done!'", ")", "\n", "\n", "# test images", "\n", "", "test_image", "=", "os", ".", "path", ".", "join", "(", "path_devkit", ",", "'VOC2007/JPEGImages/000001.jpg'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "test_image", ")", ":", "\n", "\n", "# download test images", "\n", "        ", "parts", "=", "urlparse", "(", "urls", "[", "'test_anno_2007'", "]", ")", "\n", "filename", "=", "os", ".", "path", ".", "basename", "(", "parts", ".", "path", ")", "\n", "cached_file", "=", "os", ".", "path", ".", "join", "(", "tmpdir", ",", "filename", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cached_file", ")", ":", "\n", "            ", "print", "(", "'Downloading: \"{}\" to {}\\n'", ".", "format", "(", "urls", "[", "'test_anno_2007'", "]", ",", "cached_file", ")", ")", "\n", "util", ".", "download_url", "(", "urls", "[", "'test_anno_2007'", "]", ",", "cached_file", ")", "\n", "\n", "# extract file", "\n", "", "print", "(", "'[dataset] Extracting tar file {file} to {path}'", ".", "format", "(", "file", "=", "cached_file", ",", "path", "=", "root", ")", ")", "\n", "cwd", "=", "os", ".", "getcwd", "(", ")", "\n", "tar", "=", "tarfile", ".", "open", "(", "cached_file", ",", "\"r\"", ")", "\n", "os", ".", "chdir", "(", "root", ")", "\n", "tar", ".", "extractall", "(", ")", "\n", "tar", ".", "close", "(", ")", "\n", "os", ".", "chdir", "(", "cwd", ")", "\n", "print", "(", "'[dataset] Done!'", ")", "\n", "\n"]]}