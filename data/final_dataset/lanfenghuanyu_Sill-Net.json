{"home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.Compose.__init__": [[10, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "augmentations", ")", ":", "\n", "        ", "self", ".", "augmentations", "=", "augmentations", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.Compose.__call__": [[13, 18], ["PIL.Image.fromarray", "PIL.Image.fromarray", "a", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "img", ",", "mask", "=", "Image", ".", "fromarray", "(", "img", ",", "mode", "=", "'RGB'", ")", ",", "Image", ".", "fromarray", "(", "mask", ",", "mode", "=", "'RGB'", ")", "\n", "for", "a", "in", "self", ".", "augmentations", ":", "\n", "            ", "img", ",", "mask", "=", "a", "(", "img", ",", "mask", ")", "\n", "", "return", "np", ".", "array", "(", "img", ")", ",", "np", ".", "array", "(", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.RandomCrop.__init__": [[20, 26], ["isinstance", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "padding", "=", "0", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "", "self", ".", "padding", "=", "padding", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.RandomCrop.__call__": [[27, 42], ["random.randint", "random.randint", "PIL.ImageOps.expand", "PIL.ImageOps.expand", "PIL.ImageOps.expand.crop", "PIL.ImageOps.expand.crop", "PIL.ImageOps.expand.resize", "PIL.ImageOps.expand.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "self", ".", "padding", ">", "0", ":", "\n", "            ", "img", "=", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "self", ".", "padding", ",", "fill", "=", "0", ")", "\n", "mask", "=", "ImageOps", ".", "expand", "(", "mask", ",", "border", "=", "self", ".", "padding", ",", "fill", "=", "0", ")", "\n", "\n", "", "w", ",", "h", "=", "img", ".", "size", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "if", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "            ", "return", "img", ",", "mask", "\n", "", "if", "w", "<", "tw", "or", "h", "<", "th", ":", "\n", "            ", "return", "img", ".", "resize", "(", "(", "tw", ",", "th", ")", ",", "Image", ".", "BILINEAR", ")", ",", "mask", ".", "resize", "(", "(", "tw", ",", "th", ")", ",", "Image", ".", "BILINEAR", ")", "\n", "\n", "", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "return", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.CenterCrop.__init__": [[44, 49], ["isinstance", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.CenterCrop.__call__": [[50, 57], ["int", "int", "round", "round", "img.crop"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "# assert img.size == mask.size", "\n", "        ", "w", ",", "h", "=", "img", ".", "size", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "x1", "=", "int", "(", "round", "(", "(", "w", "-", "tw", ")", "/", "2.", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "(", "h", "-", "th", ")", "/", "2.", ")", ")", "\n", "return", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.MagnifyData.__init__": [[59, 61], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.MagnifyData.__call__": [[62, 71], ["random.uniform", "int", "int", "img.crop.crop.crop", "round", "round", "img.crop.crop.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "ratio", "=", "random", ".", "uniform", "(", "0.6", ",", "1", ")", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "tw", "=", "ratio", "*", "w", "\n", "th", "=", "ratio", "*", "h", "\n", "x1", "=", "int", "(", "round", "(", "(", "w", "-", "tw", ")", "/", "2.", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "(", "h", "-", "th", ")", "/", "2.", ")", ")", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "return", "img", ".", "resize", "(", "(", "self", ".", "size", ",", "self", ".", "size", ")", ",", "Image", ".", "BILINEAR", ")", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.RandomHorizontallyFlip.__call__": [[73, 77], ["random.random", "img.transpose", "mask.transpose"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ",", "mask", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.RandomHorizontallyFlipData.__call__": [[79, 83], ["random.random", "img.transpose"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ",", "mask", "\n", "", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.RandomVerticallyFlip.__call__": [[85, 89], ["random.random", "img.transpose", "mask.transpose"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_TOP_BOTTOM", ")", ",", "mask", ".", "transpose", "(", "Image", ".", "FLIP_TOP_BOTTOM", ")", "\n", "", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.FreeScale.__init__": [[91, 93], ["tuple", "reversed"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "tuple", "(", "reversed", "(", "size", ")", ")", "# size: (h, w)", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.FreeScale.__call__": [[94, 97], ["img.resize", "mask.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "# assert img.size == mask.size", "\n", "        ", "return", "img", ".", "resize", "(", "self", ".", "size", ",", "Image", ".", "BILINEAR", ")", ",", "mask", ".", "resize", "(", "self", ".", "size", ",", "Image", ".", "BILINEAR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.Scale.__init__": [[99, 101], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.Scale.__call__": [[102, 146], ["int", "img.resize.resize.resize", "int", "img.resize.resize.resize", "int", "mask.resize.resize.resize", "int", "mask.resize.resize.resize", "print", "print", "print", "print"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "# longer side of image is scaled to defined size.", "\n", "        ", "warning_size", "=", "5", "\n", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "(", "w", ">=", "h", "and", "w", "==", "self", ".", "size", ")", "or", "(", "h", ">=", "w", "and", "h", "==", "self", ".", "size", ")", ":", "\n", "            ", "pass", "\n", "", "if", "w", ">", "h", ":", "\n", "            ", "ow", "=", "self", ".", "size", "\n", "oh", "=", "int", "(", "self", ".", "size", "*", "h", "/", "w", ")", "\n", "\n", "if", "oh", "<", "warning_size", ":", "\n", "                ", "print", "(", "'warning: resized image height is less than %d'", "%", "warning_size", ")", "\n", "\n", "", "img", "=", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BILINEAR", ")", "\n", "", "else", ":", "\n", "            ", "oh", "=", "self", ".", "size", "\n", "ow", "=", "int", "(", "self", ".", "size", "*", "w", "/", "h", ")", "\n", "\n", "if", "ow", "<", "warning_size", ":", "\n", "                ", "print", "(", "'warning: resized image width is less than %d'", "%", "warning_size", ")", "\n", "\n", "", "img", "=", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BILINEAR", ")", "\n", "\n", "", "w", ",", "h", "=", "mask", ".", "size", "\n", "if", "(", "w", ">=", "h", "and", "w", "==", "self", ".", "size", ")", "or", "(", "h", ">=", "w", "and", "h", "==", "self", ".", "size", ")", ":", "\n", "            ", "pass", "\n", "", "if", "w", ">", "h", ":", "\n", "            ", "ow", "=", "self", ".", "size", "\n", "oh", "=", "int", "(", "self", ".", "size", "*", "h", "/", "w", ")", "\n", "\n", "if", "oh", "<", "warning_size", ":", "\n", "                ", "print", "(", "'warning: resized template height is less than %d'", "%", "warning_size", ")", "\n", "\n", "", "mask", "=", "mask", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BILINEAR", ")", "\n", "", "else", ":", "\n", "            ", "oh", "=", "self", ".", "size", "\n", "ow", "=", "int", "(", "self", ".", "size", "*", "w", "/", "h", ")", "\n", "\n", "if", "ow", "<", "warning_size", ":", "\n", "                ", "print", "(", "'warning: resized template width is less than %d'", "%", "warning_size", ")", "\n", "\n", "", "mask", "=", "mask", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BILINEAR", ")", "\n", "\n", "", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.CenterPadding.__init__": [[148, 150], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.CenterPadding.__call__": [[151, 181], ["int", "int", "PIL.ImageOps.expand", "int", "int", "PIL.ImageOps.expand"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "# longer side of image is scaled to defined size.", "\n", "        ", "w", ",", "h", "=", "img", ".", "size", "\n", "\n", "assert", "self", ".", "size", "[", "0", "]", ">=", "h", "\n", "assert", "self", ".", "size", "[", "1", "]", ">=", "w", "\n", "w_pad", "=", "self", ".", "size", "[", "1", "]", "-", "w", "\n", "w_pad_left", "=", "int", "(", "w_pad", "/", "2", ")", "\n", "w_pad_right", "=", "w_pad", "-", "w_pad_left", "\n", "h_pad", "=", "self", ".", "size", "[", "0", "]", "-", "h", "\n", "h_pad_up", "=", "int", "(", "h_pad", "/", "2", ")", "\n", "h_pad_bottom", "=", "h_pad", "-", "h_pad_up", "\n", "padding", "=", "(", "w_pad_left", ",", "h_pad_up", ",", "w_pad_right", ",", "h_pad_bottom", ")", "\n", "\n", "img", "=", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "padding", ",", "fill", "=", "0", ")", "\n", "\n", "w", ",", "h", "=", "mask", ".", "size", "\n", "\n", "assert", "self", ".", "size", "[", "0", "]", ">=", "h", "\n", "assert", "self", ".", "size", "[", "1", "]", ">=", "w", "\n", "w_pad", "=", "self", ".", "size", "[", "1", "]", "-", "w", "\n", "w_pad_left", "=", "int", "(", "w_pad", "/", "2", ")", "\n", "w_pad_right", "=", "w_pad", "-", "w_pad_left", "\n", "h_pad", "=", "self", ".", "size", "[", "0", "]", "-", "h", "\n", "h_pad_up", "=", "int", "(", "h_pad", "/", "2", ")", "\n", "h_pad_bottom", "=", "h_pad", "-", "h_pad_up", "\n", "padding", "=", "(", "w_pad_left", ",", "h_pad_up", ",", "w_pad_right", ",", "h_pad_bottom", ")", "\n", "\n", "mask", "=", "ImageOps", ".", "expand", "(", "mask", ",", "border", "=", "padding", ",", "fill", "=", "0", ")", "\n", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.ReflectPadding.__init__": [[183, 185], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.ReflectPadding.__call__": [[186, 220], ["numpy.array", "PIL.Image.fromarray", "int", "int", "PIL.ImageOps.expand", "int", "range", "int", "range", "cv2.copyMakeBorder", "cv2.copyMakeBorder"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "# longer side of image is scaled to defined size.", "\n", "        ", "w", ",", "h", "=", "img", ".", "size", "\n", "\n", "assert", "self", ".", "size", "[", "0", "]", ">=", "h", "\n", "assert", "self", ".", "size", "[", "1", "]", ">=", "w", "\n", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "margin", "=", "5", "\n", "if", "self", ".", "size", "[", "1", "]", ">", "w", ":", "\n", "            ", "w_pad", "=", "(", "self", ".", "size", "[", "1", "]", "-", "w", ")", "/", "2.", "\n", "pad_times", "=", "int", "(", "w_pad", "/", "margin", ")", "\n", "for", "i", "in", "range", "(", "pad_times", ")", ":", "\n", "                ", "img", "=", "cv2", ".", "copyMakeBorder", "(", "img", ",", "margin", ",", "0", ",", "margin", ",", "0", ",", "cv2", ".", "BORDER_REFLECT", ")", "\n", "", "", "if", "self", ".", "size", "[", "0", "]", ">", "h", ":", "\n", "            ", "h_pad", "=", "(", "self", ".", "size", "[", "1", "]", "-", "h", ")", "/", "2.", "\n", "pad_times", "=", "int", "(", "h_pad", "/", "margin", ")", "\n", "for", "i", "in", "range", "(", "pad_times", ")", ":", "\n", "                ", "img", "=", "cv2", ".", "copyMakeBorder", "(", "img", ",", "0", ",", "margin", ",", "0", ",", "margin", ",", "cv2", ".", "BORDER_REFLECT", ")", "\n", "", "", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "\n", "w", ",", "h", "=", "mask", ".", "size", "\n", "\n", "assert", "self", ".", "size", "[", "0", "]", ">=", "h", "\n", "assert", "self", ".", "size", "[", "1", "]", ">=", "w", "\n", "w_pad", "=", "self", ".", "size", "[", "1", "]", "-", "w", "\n", "w_pad_left", "=", "int", "(", "w_pad", "/", "2", ")", "\n", "w_pad_right", "=", "w_pad", "-", "w_pad_left", "\n", "h_pad", "=", "self", ".", "size", "[", "0", "]", "-", "h", "\n", "h_pad_up", "=", "int", "(", "h_pad", "/", "2", ")", "\n", "h_pad_bottom", "=", "h_pad", "-", "h_pad_up", "\n", "padding", "=", "(", "w_pad_left", ",", "h_pad_up", ",", "w_pad_right", ",", "h_pad_bottom", ")", "\n", "\n", "mask", "=", "ImageOps", ".", "expand", "(", "mask", ",", "border", "=", "padding", ",", "fill", "=", "0", ")", "\n", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.RandomSizedCrop.__init__": [[222, 224], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.RandomSizedCrop.__call__": [[225, 251], ["range", "augmentations.Scale", "augmentations.CenterCrop", "CenterCrop.", "random.uniform", "int", "int", "random.uniform", "round", "round", "random.random", "random.randint", "random.randint", "img.crop.crop.crop", "mask.crop.crop.crop", "Scale.", "math.sqrt", "math.sqrt", "img.crop.crop.resize", "mask.crop.crop.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "# assert img.size == mask.size", "\n", "        ", "for", "attempt", "in", "range", "(", "10", ")", ":", "\n", "            ", "area", "=", "img", ".", "size", "[", "0", "]", "*", "img", ".", "size", "[", "1", "]", "\n", "target_area", "=", "random", ".", "uniform", "(", "0.45", ",", "1.0", ")", "*", "area", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "0.5", ",", "2", ")", "\n", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "w", ",", "h", "=", "h", ",", "w", "\n", "\n", "", "if", "w", "<=", "img", ".", "size", "[", "0", "]", "and", "h", "<=", "img", ".", "size", "[", "1", "]", ":", "\n", "                ", "x1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "[", "0", "]", "-", "w", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "[", "1", "]", "-", "h", ")", "\n", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "w", ",", "y1", "+", "h", ")", ")", "\n", "mask", "=", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "w", ",", "y1", "+", "h", ")", ")", "\n", "assert", "(", "img", ".", "size", "==", "(", "w", ",", "h", ")", ")", "\n", "\n", "return", "img", ".", "resize", "(", "(", "self", ".", "size", ",", "self", ".", "size", ")", ",", "Image", ".", "BILINEAR", ")", ",", "mask", ".", "resize", "(", "(", "self", ".", "size", ",", "self", ".", "size", ")", ",", "Image", ".", "BILINEAR", ")", "\n", "# Fallback", "\n", "", "", "scale", "=", "Scale", "(", "self", ".", "size", ")", "\n", "crop", "=", "CenterCrop", "(", "self", ".", "size", ")", "\n", "return", "crop", "(", "*", "scale", "(", "img", ",", "mask", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.RandomCropData.__init__": [[253, 255], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.RandomCropData.__call__": [[256, 281], ["range", "augmentations.Scale", "augmentations.CenterCrop", "CenterCrop.", "random.uniform", "int", "int", "random.uniform", "round", "round", "random.random", "random.randint", "random.randint", "img.crop.crop.crop", "Scale.", "math.sqrt", "math.sqrt", "img.crop.crop.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "# assert img.size == mask.size", "\n", "        ", "for", "attempt", "in", "range", "(", "10", ")", ":", "\n", "            ", "area", "=", "img", ".", "size", "[", "0", "]", "*", "img", ".", "size", "[", "1", "]", "\n", "target_area", "=", "random", ".", "uniform", "(", "0.5", ",", "1.0", ")", "*", "area", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "0.5", ",", "2", ")", "\n", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "w", ",", "h", "=", "h", ",", "w", "\n", "\n", "", "if", "w", "<=", "img", ".", "size", "[", "0", "]", "and", "h", "<=", "img", ".", "size", "[", "1", "]", ":", "\n", "                ", "x1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "[", "0", "]", "-", "w", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "[", "1", "]", "-", "h", ")", "\n", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "w", ",", "y1", "+", "h", ")", ")", "\n", "assert", "(", "img", ".", "size", "==", "(", "w", ",", "h", ")", ")", "\n", "\n", "return", "img", ".", "resize", "(", "(", "self", ".", "size", ",", "self", ".", "size", ")", ",", "Image", ".", "BILINEAR", ")", ",", "mask", "\n", "# Fallback", "\n", "", "", "scale", "=", "Scale", "(", "self", ".", "size", ")", "\n", "crop", "=", "CenterCrop", "(", "self", ".", "size", ")", "\n", "return", "crop", "(", "*", "scale", "(", "img", ",", "mask", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.RandomRotate.__init__": [[283, 285], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "degree", ")", ":", "\n", "        ", "self", ".", "degree", "=", "degree", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.RandomRotate.__call__": [[286, 289], ["img.rotate", "mask.rotate", "random.random"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "rotate_degree", "=", "random", ".", "random", "(", ")", "*", "2", "*", "self", ".", "degree", "-", "self", ".", "degree", "\n", "return", "img", ".", "rotate", "(", "rotate_degree", ",", "Image", ".", "BILINEAR", ")", ",", "mask", ".", "rotate", "(", "rotate_degree", ",", "Image", ".", "BILINEAR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.RandomRotateData.__init__": [[291, 293], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "degree", ")", ":", "\n", "        ", "self", ".", "degree", "=", "degree", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.RandomRotateData.__call__": [[294, 297], ["img.rotate", "random.random"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "rotate_degree", "=", "random", ".", "random", "(", ")", "*", "2", "*", "self", ".", "degree", "-", "self", ".", "degree", "\n", "return", "img", ".", "rotate", "(", "rotate_degree", ",", "Image", ".", "BILINEAR", ")", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.FixedRotate.__call__": [[299, 303], ["random.randint", "img.rotate", "mask.rotate"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "idx", "=", "random", ".", "randint", "(", "0", ",", "7", ")", "\n", "rotate_degree", "=", "(", "idx", "-", "3", ")", "*", "45", "\n", "return", "img", ".", "rotate", "(", "rotate_degree", ",", "Image", ".", "BILINEAR", ")", ",", "mask", ".", "rotate", "(", "rotate_degree", ",", "Image", ".", "BILINEAR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.RandomSized.__init__": [[305, 309], ["augmentations.Scale", "augmentations.RandomCrop"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "scale", "=", "Scale", "(", "self", ".", "size", ")", "\n", "self", ".", "crop", "=", "RandomCrop", "(", "self", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.RandomSized.__call__": [[310, 319], ["int", "int", "augmentations.RandomSized.crop", "img.resize", "mask.resize", "random.uniform", "random.uniform", "augmentations.RandomSized.scale"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "\n", "w", "=", "int", "(", "random", ".", "uniform", "(", "0.5", ",", "2", ")", "*", "img", ".", "size", "[", "0", "]", ")", "\n", "h", "=", "int", "(", "random", ".", "uniform", "(", "0.5", ",", "2", ")", "*", "img", ".", "size", "[", "1", "]", ")", "\n", "\n", "img", ",", "mask", "=", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "BILINEAR", ")", ",", "mask", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "BILINEAR", ")", "\n", "\n", "return", "self", ".", "crop", "(", "*", "self", ".", "scale", "(", "img", ",", "mask", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.RandomRotateRefPadding.__init__": [[322, 324], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "degree", ")", ":", "\n", "        ", "self", ".", "degree", "=", "degree", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.RandomRotateRefPadding.__call__": [[325, 339], ["math.radians", "max", "numpy.array", "range", "PIL.Image.fromarray", "abs", "int", "int", "cv2.copyMakeBorder", "cv2.copyMakeBorder.rotate", "mask.rotate", "math.sin", "math.sin", "random.random"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "rotate_degree", "=", "random", ".", "random", "(", ")", "*", "2", "*", "self", ".", "degree", "-", "self", ".", "degree", "\n", "rad_degree", "=", "math", ".", "radians", "(", "abs", "(", "rotate_degree", ")", ")", "\n", "margin", "=", "5", "\n", "h", ",", "w", "=", "img", ".", "size", "[", "0", "]", ",", "img", ".", "size", "[", "1", "]", "\n", "h_padded", "=", "h", "+", "w", "*", "math", ".", "sin", "(", "2", "*", "rad_degree", ")", "\n", "w_padded", "=", "w", "+", "h", "*", "math", ".", "sin", "(", "2", "*", "rad_degree", ")", "\n", "pad_times", "=", "max", "(", "int", "(", "(", "h_padded", "-", "h", ")", "/", "margin", "/", "2.", ")", ",", "int", "(", "(", "w_padded", "-", "w", ")", "/", "margin", "/", "2.", ")", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "for", "i", "in", "range", "(", "pad_times", ")", ":", "\n", "            ", "img", "=", "cv2", ".", "copyMakeBorder", "(", "img", ",", "margin", ",", "margin", ",", "margin", ",", "margin", ",", "cv2", ".", "BORDER_REFLECT", ")", "\n", "", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "\n", "return", "img", ".", "rotate", "(", "rotate_degree", ",", "Image", ".", "BILINEAR", ")", ",", "mask", ".", "rotate", "(", "rotate_degree", ",", "Image", ".", "BILINEAR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.RandomWarpData.__call__": [[341, 363], ["numpy.asarray", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "numpy.array", "cv2.warpAffine", "PIL.Image.fromarray"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "img", "=", "np", ".", "asarray", "(", "img", ")", "\n", "# for gtsrb", "\n", "#a = random.uniform(0.8,1.0)", "\n", "#e = random.uniform(0.8,1.0)", "\n", "#b = random.uniform(-0.2,0.2)", "\n", "#d = random.uniform(-0.2,0.2)", "\n", "#c = random.uniform(-1,1)", "\n", "#f = random.uniform(-1,1)", "\n", "\n", "#for brand", "\n", "a", "=", "random", ".", "uniform", "(", "0.8", ",", "1.0", ")", "\n", "e", "=", "random", ".", "uniform", "(", "0.8", ",", "1.0", ")", "\n", "b", "=", "random", ".", "uniform", "(", "-", "0.2", ",", "0.2", ")", "\n", "d", "=", "random", ".", "uniform", "(", "-", "0.2", ",", "0.2", ")", "\n", "c", "=", "random", ".", "uniform", "(", "-", "1", ",", "1", ")", "\n", "f", "=", "random", ".", "uniform", "(", "-", "1", ",", "1", ")", "\n", "\n", "theta", "=", "np", ".", "array", "(", "[", "[", "a", ",", "b", ",", "c", "]", ",", "[", "d", ",", "e", ",", "f", "]", "]", ")", "\n", "img", "=", "cv2", ".", "warpAffine", "(", "img", ",", "theta", ",", "(", "img", ".", "shape", "[", "1", "]", ",", "img", ".", "shape", "[", "0", "]", ")", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.RandomEnhanceData.__call__": [[365, 379], ["random.uniform", "random.uniform", "random.uniform", "random.uniform", "PIL.ImageEnhance.Brightness", "img.enhance.enhance.enhance", "PIL.ImageEnhance.Color", "img.enhance.enhance.enhance", "PIL.ImageEnhance.Contrast", "img.enhance.enhance.enhance", "PIL.ImageEnhance.Sharpness", "img.enhance.enhance.enhance"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "brightness", "=", "random", ".", "uniform", "(", "0.2", ",", "2", ")", "\n", "color", "=", "random", ".", "uniform", "(", "0.1", ",", "2", ")", "\n", "contrast", "=", "random", ".", "uniform", "(", "0.1", ",", "2", ")", "\n", "sharpness", "=", "random", ".", "uniform", "(", "0.1", ",", "2", ")", "\n", "img", "=", "ImageEnhance", ".", "Brightness", "(", "img", ")", "\n", "img", "=", "img", ".", "enhance", "(", "brightness", ")", "\n", "img", "=", "ImageEnhance", ".", "Color", "(", "img", ")", "\n", "img", "=", "img", ".", "enhance", "(", "color", ")", "\n", "img", "=", "ImageEnhance", ".", "Contrast", "(", "img", ")", "\n", "img", "=", "img", ".", "enhance", "(", "contrast", ")", "\n", "img", "=", "ImageEnhance", ".", "Sharpness", "(", "img", ")", "\n", "img", "=", "img", ".", "enhance", "(", "sharpness", ")", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.RandomDownData.__call__": [[381, 387], ["random.uniform", "img.transform.transform.thumbnail", "img.transform.transform.transform", "min"], "methods", ["home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.transform"], ["    ", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "w", ",", "h", "=", "img", ".", "size", "\n", "new_size", "=", "random", ".", "uniform", "(", "10", ",", "min", "(", "w", ",", "h", ")", ")", "\n", "img", ".", "thumbnail", "(", "[", "new_size", ",", "new_size", "]", ")", "\n", "img", "=", "img", ".", "transform", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "EXTENT", ",", "(", "0", ",", "0", ",", "new_size", ",", "new_size", ")", ")", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.OverExposeData.__call__": [[389, 395], ["numpy.array", "PIL.Image.fromarray"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "         ", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "img", "[", "img", "[", ":", ",", ":", ",", "0", "]", ">", "230", ",", "1", "]", "=", "240", "\n", "img", "[", "img", "[", ":", ",", ":", ",", "0", "]", ">", "230", ",", "2", "]", "=", "240", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.GaussianBlurData.__call__": [[397, 403], ["numpy.array", "random.randint", "cv2.GaussianBlur", "PIL.Image.fromarray"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "s", "=", "random", ".", "randint", "(", "5", ",", "20", ")", "\n", "img", "=", "cv2", ".", "GaussianBlur", "(", "img", ",", "ksize", "=", "(", "2", "*", "s", "+", "1", ",", "2", "*", "s", "+", "1", ")", ",", "sigmaX", "=", "0", ",", "sigmaY", "=", "0", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.MotionBlurData.__call__": [[405, 419], ["random.randint", "random.uniform", "cv2.getRotationMatrix2D", "numpy.diag", "cv2.warpAffine", "numpy.array", "cv2.filter2D", "numpy.array", "PIL.Image.fromarray", "numpy.ones"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "degree", "=", "random", ".", "randint", "(", "2", ",", "20", ")", "\n", "angle", "=", "random", ".", "uniform", "(", "2", ",", "90", ")", "\n", "M", "=", "cv2", ".", "getRotationMatrix2D", "(", "(", "degree", "/", "2", ",", "degree", "/", "2", ")", ",", "angle", ",", "1", ")", "\n", "motion_blur_kernel", "=", "np", ".", "diag", "(", "np", ".", "ones", "(", "degree", ")", ")", "\n", "motion_blur_kernel", "=", "cv2", ".", "warpAffine", "(", "motion_blur_kernel", ",", "M", ",", "(", "degree", ",", "degree", ")", ")", "\n", "motion_blur_kernel", "=", "motion_blur_kernel", "/", "degree", "\n", "\n", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "img", "=", "cv2", ".", "filter2D", "(", "img", ",", "-", "1", ",", "motion_blur_kernel", ")", "\n", "#cv2.normalize(mask, mask, 0, 255, cv2.NORM_MINMAX)", "\n", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.RandomStainData.__call__": [[421, 431], ["numpy.array", "int", "int", "int", "int", "PIL.Image.fromarray", "random.uniform", "random.uniform", "random.uniform", "random.uniform"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "         ", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "s", "=", "img", ".", "shape", "[", "0", "]", "\n", "x_c", "=", "int", "(", "random", ".", "uniform", "(", "0.4", ",", "0.6", ")", "*", "s", ")", "\n", "y_c", "=", "int", "(", "random", ".", "uniform", "(", "0.4", ",", "0.6", ")", "*", "s", ")", "\n", "x", "=", "int", "(", "random", ".", "uniform", "(", "0.05", ",", "0.1", ")", "*", "s", ")", "\n", "y", "=", "int", "(", "random", ".", "uniform", "(", "0.05", ",", "0.1", ")", "*", "s", ")", "\n", "img", "[", "y_c", "-", "y", ":", "y_c", "+", "y", ",", "x_c", "-", "x", ":", "x_c", "+", "x", ",", ":", "]", "=", "255", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.BlurData.__call__": [[433, 442], ["random.uniform", "random.uniform", "random.random", "img.filter.filter.filter", "img.filter.filter.filter", "PIL.ImageFilter.BoxBlur", "PIL.ImageFilter.GaussianBlur"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "box_para", "=", "random", ".", "uniform", "(", "1", ",", "2", ")", "\n", "gauss_para", "=", "random", ".", "uniform", "(", "1", ",", "2", ")", "\n", "#img = img.filter(ImageFilter.BLUR)", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "img", "=", "img", ".", "filter", "(", "ImageFilter", ".", "BoxBlur", "(", "box_para", ")", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "img", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "gauss_para", ")", ")", "\n", "", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.EnhanceTemp.__call__": [[444, 458], ["PIL.ImageEnhance.Brightness", "mask.enhance.enhance.enhance", "PIL.ImageEnhance.Color", "mask.enhance.enhance.enhance", "PIL.ImageEnhance.Contrast", "mask.enhance.enhance.enhance", "PIL.ImageEnhance.Sharpness", "mask.enhance.enhance.enhance"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "brightness", "=", "1", "\n", "color", "=", "3", "\n", "contrast", "=", "1", "\n", "sharpness", "=", "1", "\n", "mask", "=", "ImageEnhance", ".", "Brightness", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "enhance", "(", "brightness", ")", "\n", "mask", "=", "ImageEnhance", ".", "Color", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "enhance", "(", "color", ")", "\n", "mask", "=", "ImageEnhance", ".", "Contrast", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "enhance", "(", "contrast", ")", "\n", "mask", "=", "ImageEnhance", ".", "Sharpness", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "enhance", "(", "sharpness", ")", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.PaddingData.__call__": [[460, 468], ["numpy.array", "range", "PIL.Image.fromarray", "cv2.copyMakeBorder"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "pad_times", "=", "1", "\n", "margin", "=", "5", "\n", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "for", "i", "in", "range", "(", "pad_times", ")", ":", "\n", "            ", "img", "=", "cv2", ".", "copyMakeBorder", "(", "img", ",", "margin", ",", "margin", ",", "margin", ",", "margin", ",", "cv2", ".", "BORDER_CONSTANT", ",", "value", "=", "[", "255", ",", "255", ",", "255", "]", ")", "\n", "", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.PixelEnhanceData.__call__": [[470, 479], ["random.randint", "random.randint", "numpy.array", "numpy.sum", "PIL.Image.fromarray"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "number", "=", "random", ".", "randint", "(", "0", ",", "100", ")", "\n", "channel", "=", "random", ".", "randint", "(", "0", ",", "2", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "img_sum", "=", "np", ".", "sum", "(", "img", ",", "2", ")", "\n", "#img[img_sum<10,:] += number", "\n", "img", "[", ":", ",", ":", ",", "channel", "]", "+=", "number", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.RandomColorData.__call__": [[481, 489], ["numpy.array", "numpy.random.randint", "numpy.array", "PIL.Image.fromarray"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "color", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "150", ",", "img", ".", "shape", ")", "\n", "img", "=", "img", "+", "color", "\n", "img", "[", "img", ">", "255", "]", "=", "255", "\n", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.InverseColorData.__call__": [[491, 497], ["numpy.array", "PIL.Image.fromarray", "random.random"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "img", "=", "255", "-", "img", "\n", "", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.DistortData.__call__": [[499, 515], ["random.random", "PIL.Image.fromarray", "random.randint", "random.random", "numpy.array.rotate", "numpy.array", "numpy.array", "wand.image.Image.from_array", "numpy.array.distort", "numpy.array", "wand.image.Image.from_array", "numpy.array.distort", "numpy.array"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "angle", "=", "random", ".", "randint", "(", "1", ",", "10", ")", "*", "10", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "img", "=", "img", ".", "rotate", "(", "180", ",", "Image", ".", "BILINEAR", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "with", "image", ".", "Image", ".", "from_array", "(", "img", ")", "as", "img", ":", "\n", "                    ", "img", ".", "distort", "(", "'arc'", ",", "(", "angle", ",", "180", ")", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "", "", "else", ":", "\n", "                ", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "with", "image", ".", "Image", ".", "from_array", "(", "img", ")", "as", "img", ":", "\n", "                    ", "img", ".", "distort", "(", "'arc'", ",", "(", "angle", ",", ")", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "", "", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.code.augmentations.RandomBlockData.__call__": [[517, 535], ["numpy.array", "random.randint", "random.randint", "random.randint", "random.randint", "numpy.random.randint", "PIL.Image.fromarray", "int", "int", "int", "int"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "h", "=", "img", ".", "shape", "[", "0", "]", "\n", "w", "=", "img", ".", "shape", "[", "1", "]", "\n", "#y1 = random.randint(0, h)", "\n", "#y2 = random.randint(y1, int(h/2)*(int(h/2)>y1) + h*(int(h/2)<=y1))", "\n", "#x1 = random.randint(0, w)", "\n", "#x2 = random.randint(x1, int(w/2)*(int(w/2)>x1) + w*(int(w/2)<=x1))", "\n", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "int", "(", "h", "/", "2", ")", ")", "\n", "y2", "=", "random", ".", "randint", "(", "int", "(", "h", "/", "2", ")", ",", "h", ")", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "int", "(", "w", "/", "2", ")", ")", "\n", "x2", "=", "random", ".", "randint", "(", "int", "(", "w", "/", "2", ")", ",", "w", ")", "\n", "\n", "block", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "255", ",", "(", "y2", "-", "y1", ",", "x2", "-", "x1", ",", "img", ".", "shape", "[", "2", "]", ")", ")", "\n", "img", "[", "y1", ":", "y2", ",", "x1", ":", "x2", ",", ":", "]", "=", "block", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.models.sillnet.View.__init__": [[9, 11], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "View", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.models.sillnet.View.forward": [[12, 15], ["x.view", "x.numel", "int"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "numel", "=", "x", ".", "numel", "(", ")", "/", "x", ".", "shape", "[", "0", "]", "\n", "return", "x", ".", "view", "(", "-", "1", ",", "int", "(", "numel", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.models.sillnet.stn.__init__": [[26, 66], ["torch.Module.__init__", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "sillnet.convNoutput", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "sillnet.stn.classifier[].weight.data.fill_", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "sillnet.View", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "sillnet.View", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.__init__", "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.models.sillnet_gtsrb.convNoutput"], ["    ", "def", "__init__", "(", "self", ",", "input_channels", ",", "input_size", ",", "params", ")", ":", "\n", "        ", "super", "(", "stn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input_size", "=", "input_size", "\n", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReplicationPad2d", "(", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_channels", ",", "params", "[", "0", "]", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReplicationPad2d", "(", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "params", "[", "0", "]", ",", "params", "[", "1", "]", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReplicationPad2d", "(", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "params", "[", "1", "]", ",", "params", "[", "2", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", ")", "\n", "\n", "out_numel", ",", "out_size", "=", "convNoutput", "(", "[", "self", ".", "conv1", ",", "self", ".", "conv2", ",", "self", ".", "conv3", "]", ",", "input_size", "/", "2", ")", "\n", "# set fc layer based on predicted size", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "View", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "out_numel", ",", "params", "[", "3", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "classifier", "=", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "View", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "params", "[", "3", "]", ",", "6", ")", "# affine transform has 6 parameters", "\n", ")", "\n", "# initialize stn parameters (affine transform)", "\n", "self", ".", "classifier", "[", "1", "]", ".", "weight", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "classifier", "[", "1", "]", ".", "bias", ".", "data", "=", "torch", ".", "FloatTensor", "(", "[", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.models.sillnet.stn.localization_network": [[67, 75], ["sillnet.stn.maxpool", "sillnet.stn.conv1", "sillnet.stn.conv2", "sillnet.stn.conv3", "sillnet.stn.fc", "sillnet.stn.classifier"], "methods", ["None"], ["", "def", "localization_network", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.models.sillnet.stn.forward": [[77, 83], ["sillnet.stn.localization_network", "theta.view.view.view", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample.size"], "methods", ["home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.models.sillnet_gtsrb.stn.localization_network"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "theta", "=", "self", ".", "localization_network", "(", "x", ")", "\n", "theta", "=", "theta", ".", "view", "(", "-", "1", ",", "2", ",", "3", ")", "\n", "grid", "=", "F", ".", "affine_grid", "(", "theta", ",", "x", ".", "size", "(", ")", ")", "\n", "x", "=", "F", ".", "grid_sample", "(", "x", ",", "grid", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.models.sillnet.SillNet.__init__": [[86, 207], ["torch.Module.__init__", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.UpsamplingNearest2d", "torch.UpsamplingNearest2d", "torch.UpsamplingNearest2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "int", "sillnet.stn", "sillnet.stn", "sillnet.stn", "sillnet.stn", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nc", ",", "input_size", ",", "class_train", ",", "class_test", ",", "extract_chn", "=", "None", ",", "classify_chn", "=", "None", ",", "param1", "=", "None", ",", "param2", "=", "None", ",", "param3", "=", "None", ",", "param4", "=", "None", ",", "param_mask", "=", "None", ")", ":", "\n", "        ", "super", "(", "SillNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "extract_chn", "=", "extract_chn", "\n", "self", ".", "classify_chn", "=", "classify_chn", "\n", "self", ".", "param1", "=", "param1", "\n", "self", ".", "param2", "=", "param2", "\n", "self", ".", "param3", "=", "param3", "\n", "self", ".", "param4", "=", "param4", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "nc", "=", "nc", "\n", "self", ".", "class_train", "=", "class_train", "\n", "self", ".", "class_test", "=", "class_test", "\n", "\n", "# extracter", "\n", "self", ".", "ex_pd1", "=", "nn", ".", "ReplicationPad2d", "(", "2", ")", "\n", "self", ".", "ex1", "=", "nn", ".", "Conv2d", "(", "nc", ",", "self", ".", "extract_chn", "[", "0", "]", ",", "5", ",", "1", ")", "# inchn, outchn, kernel, stride, padding, dilation, groups", "\n", "self", ".", "ex_bn1", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "extract_chn", "[", "0", "]", ")", "\n", "\n", "self", ".", "ex_pd2", "=", "nn", ".", "ReplicationPad2d", "(", "2", ")", "\n", "self", ".", "ex2", "=", "nn", ".", "Conv2d", "(", "self", ".", "extract_chn", "[", "0", "]", ",", "self", ".", "extract_chn", "[", "1", "]", ",", "5", ",", "1", ")", "# 1/1", "\n", "self", ".", "ex_bn2", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "extract_chn", "[", "1", "]", ")", "\n", "\n", "self", ".", "ex_pd3", "=", "nn", ".", "ReplicationPad2d", "(", "1", ")", "\n", "self", ".", "ex3", "=", "nn", ".", "Conv2d", "(", "self", ".", "extract_chn", "[", "1", "]", ",", "self", ".", "extract_chn", "[", "2", "]", ",", "3", ",", "1", ")", "# 1/1", "\n", "self", ".", "ex_bn3", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "extract_chn", "[", "2", "]", ")", "\n", "\n", "self", ".", "ex_pd4", "=", "nn", ".", "ReplicationPad2d", "(", "1", ")", "\n", "self", ".", "ex4", "=", "nn", ".", "Conv2d", "(", "self", ".", "extract_chn", "[", "2", "]", ",", "self", ".", "extract_chn", "[", "3", "]", ",", "3", ",", "1", ")", "# 1/1", "\n", "self", ".", "ex_bn4", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "extract_chn", "[", "3", "]", ")", "\n", "\n", "self", ".", "ex_pd5", "=", "nn", ".", "ReplicationPad2d", "(", "1", ")", "\n", "self", ".", "ex5", "=", "nn", ".", "Conv2d", "(", "self", ".", "extract_chn", "[", "3", "]", ",", "self", ".", "extract_chn", "[", "4", "]", ",", "3", ",", "1", ")", "# 1/1", "\n", "self", ".", "ex_bn5", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "extract_chn", "[", "4", "]", ")", "\n", "\n", "\n", "self", ".", "ex_pd6", "=", "nn", ".", "ReplicationPad2d", "(", "1", ")", "\n", "self", ".", "ex6", "=", "nn", ".", "Conv2d", "(", "self", ".", "extract_chn", "[", "4", "]", ",", "self", ".", "extract_chn", "[", "5", "]", ",", "3", ",", "1", ")", "# 1/1", "\n", "self", ".", "ex_bn6", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "extract_chn", "[", "5", "]", ")", "\n", "\n", "self", ".", "leakyrelu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n", "# decoder", "\n", "self", ".", "up1", "=", "nn", ".", "UpsamplingNearest2d", "(", "scale_factor", "=", "2", ")", "\n", "self", ".", "de_pd1", "=", "nn", ".", "ReplicationPad2d", "(", "1", ")", "\n", "self", ".", "de1", "=", "nn", ".", "Conv2d", "(", "int", "(", "self", ".", "extract_chn", "[", "5", "]", "/", "2", ")", ",", "self", ".", "extract_chn", "[", "4", "]", ",", "3", ",", "1", ")", "\n", "self", ".", "de_bn1", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "extract_chn", "[", "4", "]", ",", "1.e-3", ")", "\n", "\n", "self", ".", "de_pd2", "=", "nn", ".", "ReplicationPad2d", "(", "1", ")", "\n", "self", ".", "de2", "=", "nn", ".", "Conv2d", "(", "self", ".", "extract_chn", "[", "4", "]", ",", "self", ".", "extract_chn", "[", "3", "]", ",", "3", ",", "1", ")", "\n", "self", ".", "de_bn2", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "extract_chn", "[", "3", "]", ",", "1.e-3", ")", "\n", "\n", "self", ".", "de_pd3", "=", "nn", ".", "ReplicationPad2d", "(", "1", ")", "\n", "self", ".", "de3", "=", "nn", ".", "Conv2d", "(", "self", ".", "extract_chn", "[", "3", "]", ",", "self", ".", "extract_chn", "[", "2", "]", ",", "3", ",", "1", ")", "\n", "self", ".", "de_bn3", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "extract_chn", "[", "2", "]", ",", "1.e-3", ")", "\n", "\n", "self", ".", "de_pd4", "=", "nn", ".", "ReplicationPad2d", "(", "1", ")", "\n", "self", ".", "de4", "=", "nn", ".", "Conv2d", "(", "self", ".", "extract_chn", "[", "2", "]", ",", "self", ".", "extract_chn", "[", "1", "]", ",", "3", ",", "1", ")", "\n", "self", ".", "de_bn4", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "extract_chn", "[", "1", "]", ",", "1.e-3", ")", "\n", "\n", "self", ".", "de_pd5", "=", "nn", ".", "ReplicationPad2d", "(", "1", ")", "\n", "self", ".", "de5", "=", "nn", ".", "Conv2d", "(", "self", ".", "extract_chn", "[", "1", "]", ",", "nc", ",", "3", ",", "1", ")", "\n", "\n", "# warping", "\n", "if", "param1", "is", "not", "None", ":", "\n", "            ", "self", ".", "stn1", "=", "stn", "(", "nc", ",", "self", ".", "input_size", ",", "param1", ")", "\n", "", "if", "param2", "is", "not", "None", ":", "\n", "            ", "self", ".", "stn2", "=", "stn", "(", "self", ".", "extract_chn", "[", "1", "]", ",", "self", ".", "input_size", ",", "param2", ")", "\n", "", "if", "param3", "is", "not", "None", ":", "\n", "            ", "self", ".", "stn3", "=", "stn", "(", "self", ".", "extract_chn", "[", "3", "]", ",", "self", ".", "input_size", ",", "param3", ")", "\n", "", "if", "param4", "is", "not", "None", ":", "\n", "            ", "self", ".", "stn4", "=", "stn", "(", "int", "(", "self", ".", "extract_chn", "[", "5", "]", "/", "2", ")", ",", "self", ".", "input_size", ",", "param4", ")", "\n", "\n", "# classifier 1", "\n", "", "self", ".", "cls1", "=", "nn", ".", "Conv2d", "(", "int", "(", "self", ".", "extract_chn", "[", "5", "]", ")", ",", "self", ".", "classify_chn", "[", "0", "]", ",", "5", ",", "1", ",", "2", ")", "# inchn, outchn, kernel, stride, padding, dilation, groups                                ", "\n", "self", ".", "cls_bn1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "classify_chn", "[", "0", "]", ")", "\n", "\n", "self", ".", "cls2", "=", "nn", ".", "Conv2d", "(", "self", ".", "classify_chn", "[", "0", "]", ",", "self", ".", "classify_chn", "[", "1", "]", ",", "5", ",", "1", ",", "2", ")", "# 1/2", "\n", "self", ".", "cls_bn2", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "classify_chn", "[", "1", "]", ")", "\n", "\n", "self", ".", "cls3", "=", "nn", ".", "Conv2d", "(", "self", ".", "classify_chn", "[", "1", "]", ",", "self", ".", "classify_chn", "[", "2", "]", ",", "5", ",", "1", ",", "2", ")", "# 1/4", "\n", "self", ".", "cls_bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "classify_chn", "[", "2", "]", ")", "\n", "\n", "\n", "self", ".", "cls4", "=", "nn", ".", "Conv2d", "(", "self", ".", "classify_chn", "[", "2", "]", ",", "self", ".", "classify_chn", "[", "3", "]", ",", "3", ",", "1", ",", "1", ")", "# 1/4", "\n", "self", ".", "cls_bn4", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "classify_chn", "[", "3", "]", ")", "\n", "\n", "self", ".", "cls5", "=", "nn", ".", "Conv2d", "(", "self", ".", "classify_chn", "[", "3", "]", ",", "self", ".", "classify_chn", "[", "4", "]", ",", "3", ",", "1", ",", "1", ")", "# 1/8", "\n", "self", ".", "cls_bn5", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "classify_chn", "[", "4", "]", ")", "\n", "\n", "self", ".", "cls6", "=", "nn", ".", "Conv2d", "(", "self", ".", "classify_chn", "[", "4", "]", ",", "self", ".", "classify_chn", "[", "5", "]", ",", "3", ",", "1", ",", "1", ")", "# 1/8", "\n", "self", ".", "cls_bn6", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "classify_chn", "[", "5", "]", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "int", "(", "self", ".", "input_size", "/", "8", "*", "self", ".", "input_size", "/", "8", ")", "*", "self", ".", "classify_chn", "[", "5", "]", ",", "self", ".", "class_train", ")", "\n", "self", ".", "pool1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "1", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "\n", "# classifier 2", "\n", "self", ".", "cls21", "=", "nn", ".", "Conv2d", "(", "int", "(", "self", ".", "extract_chn", "[", "5", "]", ")", ",", "self", ".", "classify_chn", "[", "0", "]", ",", "5", ",", "1", ",", "2", ")", "# inchn, outchn, kernel, stride, padding, dilation, groups                                ", "\n", "self", ".", "cls2_bn1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "classify_chn", "[", "0", "]", ")", "\n", "\n", "self", ".", "cls22", "=", "nn", ".", "Conv2d", "(", "self", ".", "classify_chn", "[", "0", "]", ",", "self", ".", "classify_chn", "[", "1", "]", ",", "5", ",", "1", ",", "2", ")", "# 1/2", "\n", "self", ".", "cls2_bn2", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "classify_chn", "[", "1", "]", ")", "\n", "\n", "self", ".", "cls23", "=", "nn", ".", "Conv2d", "(", "self", ".", "classify_chn", "[", "1", "]", ",", "self", ".", "classify_chn", "[", "2", "]", ",", "5", ",", "1", ",", "2", ")", "# 1/4", "\n", "self", ".", "cls2_bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "classify_chn", "[", "2", "]", ")", "\n", "\n", "\n", "self", ".", "cls24", "=", "nn", ".", "Conv2d", "(", "self", ".", "classify_chn", "[", "2", "]", ",", "self", ".", "classify_chn", "[", "3", "]", ",", "3", ",", "1", ",", "1", ")", "# 1/4", "\n", "self", ".", "cls2_bn4", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "classify_chn", "[", "3", "]", ")", "\n", "\n", "self", ".", "cls25", "=", "nn", ".", "Conv2d", "(", "self", ".", "classify_chn", "[", "3", "]", ",", "self", ".", "classify_chn", "[", "4", "]", ",", "3", ",", "1", ",", "1", ")", "# 1/8", "\n", "self", ".", "cls2_bn5", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "classify_chn", "[", "4", "]", ")", "\n", "\n", "self", ".", "cls26", "=", "nn", ".", "Conv2d", "(", "self", ".", "classify_chn", "[", "4", "]", ",", "self", ".", "classify_chn", "[", "5", "]", ",", "3", ",", "1", ",", "1", ")", "# 1/8", "\n", "self", ".", "cls2_bn6", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "classify_chn", "[", "5", "]", ")", "\n", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "int", "(", "self", ".", "input_size", "/", "8", "*", "self", ".", "input_size", "/", "8", ")", "*", "self", ".", "classify_chn", "[", "5", "]", ",", "self", ".", "class_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.models.sillnet.SillNet.extract": [[209, 233], ["sillnet.SillNet.leakyrelu", "sillnet.SillNet.leakyrelu", "sillnet.SillNet.leakyrelu", "sillnet.SillNet.leakyrelu", "sillnet.SillNet.leakyrelu", "sillnet.SillNet.sigmoid", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "sillnet.SillNet.stn1", "sillnet.SillNet.ex_bn1", "sillnet.SillNet.ex_bn2", "sillnet.SillNet.stn2", "sillnet.SillNet.ex_bn3", "sillnet.SillNet.ex_bn4", "sillnet.SillNet.stn3", "sillnet.SillNet.ex_bn5", "sillnet.SillNet.ex_bn6", "sillnet.SillNet.stn4", "sillnet.SillNet.ex1", "sillnet.SillNet.ex2", "sillnet.SillNet.ex3", "sillnet.SillNet.ex4", "sillnet.SillNet.ex5", "sillnet.SillNet.ex6", "sillnet.SillNet.ex_pd1", "sillnet.SillNet.ex_pd2", "sillnet.SillNet.ex_pd3", "sillnet.SillNet.ex_pd4", "sillnet.SillNet.ex_pd5", "sillnet.SillNet.ex_pd6"], "methods", ["None"], ["", "def", "extract", "(", "self", ",", "x", ",", "is_warping", ")", ":", "\n", "        ", "if", "is_warping", "and", "self", ".", "param1", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "stn1", "(", "x", ")", "\n", "", "h1", "=", "self", ".", "leakyrelu", "(", "self", ".", "ex_bn1", "(", "self", ".", "ex1", "(", "self", ".", "ex_pd1", "(", "x", ")", ")", ")", ")", "\n", "h2", "=", "self", ".", "leakyrelu", "(", "self", ".", "ex_bn2", "(", "self", ".", "ex2", "(", "self", ".", "ex_pd2", "(", "h1", ")", ")", ")", ")", "\n", "\n", "if", "is_warping", "and", "self", ".", "param2", "is", "not", "None", ":", "\n", "            ", "h2", "=", "self", ".", "stn2", "(", "h2", ")", "\n", "", "h3", "=", "self", ".", "leakyrelu", "(", "self", ".", "ex_bn3", "(", "self", ".", "ex3", "(", "self", ".", "ex_pd3", "(", "h2", ")", ")", ")", ")", "\n", "h4", "=", "self", ".", "leakyrelu", "(", "self", ".", "ex_bn4", "(", "self", ".", "ex4", "(", "self", ".", "ex_pd4", "(", "h3", ")", ")", ")", ")", "\n", "\n", "if", "is_warping", "and", "self", ".", "param3", "is", "not", "None", ":", "\n", "            ", "h4", "=", "self", ".", "stn3", "(", "h4", ")", "\n", "", "h5", "=", "self", ".", "leakyrelu", "(", "self", ".", "ex_bn5", "(", "self", ".", "ex5", "(", "self", ".", "ex_pd5", "(", "h4", ")", ")", ")", ")", "\n", "h6", "=", "self", ".", "sigmoid", "(", "self", ".", "ex_bn6", "(", "self", ".", "ex6", "(", "self", ".", "ex_pd6", "(", "h5", ")", ")", ")", ")", "\n", "\n", "feat_sem", ",", "feat_illu", "=", "torch", ".", "chunk", "(", "h6", ",", "2", ",", "1", ")", "\n", "feat_sem_nowarp", "=", "feat_sem", "\n", "\n", "if", "is_warping", "and", "self", ".", "param4", "is", "not", "None", ":", "\n", "            ", "feat_sem", "=", "self", ".", "stn4", "(", "feat_sem", ")", "\n", "\n", "\n", "", "return", "feat_sem", ",", "feat_illu", ",", "feat_sem_nowarp", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.models.sillnet.SillNet.decode": [[234, 241], ["sillnet.SillNet.leakyrelu", "sillnet.SillNet.leakyrelu", "sillnet.SillNet.leakyrelu", "sillnet.SillNet.leakyrelu", "sillnet.SillNet.sigmoid", "sillnet.SillNet.de_bn1", "sillnet.SillNet.de_bn2", "sillnet.SillNet.de_bn3", "sillnet.SillNet.de_bn4", "sillnet.SillNet.de5", "sillnet.SillNet.de1", "sillnet.SillNet.de2", "sillnet.SillNet.de3", "sillnet.SillNet.de4", "sillnet.SillNet.de_pd5", "sillnet.SillNet.de_pd1", "sillnet.SillNet.de_pd2", "sillnet.SillNet.de_pd3", "sillnet.SillNet.de_pd4"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "x", ")", ":", "\n", "        ", "h1", "=", "self", ".", "leakyrelu", "(", "self", ".", "de_bn1", "(", "self", ".", "de1", "(", "self", ".", "de_pd1", "(", "x", ")", ")", ")", ")", "\n", "h2", "=", "self", ".", "leakyrelu", "(", "self", ".", "de_bn2", "(", "self", ".", "de2", "(", "self", ".", "de_pd2", "(", "h1", ")", ")", ")", ")", "\n", "h3", "=", "self", ".", "leakyrelu", "(", "self", ".", "de_bn3", "(", "self", ".", "de3", "(", "self", ".", "de_pd3", "(", "h2", ")", ")", ")", ")", "\n", "h4", "=", "self", ".", "leakyrelu", "(", "self", ".", "de_bn4", "(", "self", ".", "de4", "(", "self", ".", "de_pd4", "(", "h3", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "sigmoid", "(", "self", ".", "de5", "(", "self", ".", "de_pd5", "(", "h4", ")", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.models.sillnet.SillNet.classify": [[242, 252], ["sillnet.SillNet.pool2", "sillnet.SillNet.leakyrelu", "sillnet.SillNet.pool2", "sillnet.SillNet.leakyrelu", "sillnet.SillNet.pool2", "sillnet.SillNet.leakyrelu", "sillnet.SillNet.view", "sillnet.SillNet.fc1", "sillnet.SillNet.leakyrelu", "sillnet.SillNet.cls_bn2", "sillnet.SillNet.leakyrelu", "sillnet.SillNet.cls_bn4", "sillnet.SillNet.leakyrelu", "sillnet.SillNet.cls_bn6", "int", "sillnet.SillNet.cls_bn1", "sillnet.SillNet.cls2", "sillnet.SillNet.cls_bn3", "sillnet.SillNet.cls4", "sillnet.SillNet.cls_bn5", "sillnet.SillNet.cls6", "sillnet.SillNet.cls1", "sillnet.SillNet.cls3", "sillnet.SillNet.cls5"], "methods", ["None"], ["", "def", "classify", "(", "self", ",", "x", ")", ":", "\n", "        ", "h1", "=", "self", ".", "pool2", "(", "self", ".", "leakyrelu", "(", "self", ".", "cls_bn1", "(", "self", ".", "cls1", "(", "x", ")", ")", ")", ")", "\n", "h2", "=", "self", ".", "leakyrelu", "(", "self", ".", "cls_bn2", "(", "self", ".", "cls2", "(", "h1", ")", ")", ")", "\n", "h3", "=", "self", ".", "pool2", "(", "self", ".", "leakyrelu", "(", "self", ".", "cls_bn3", "(", "self", ".", "cls3", "(", "h2", ")", ")", ")", ")", "\n", "h4", "=", "self", ".", "leakyrelu", "(", "self", ".", "cls_bn4", "(", "self", ".", "cls4", "(", "h3", ")", ")", ")", "\n", "h5", "=", "self", ".", "pool2", "(", "self", ".", "leakyrelu", "(", "self", ".", "cls_bn5", "(", "self", ".", "cls5", "(", "h4", ")", ")", ")", ")", "\n", "h6", "=", "self", ".", "leakyrelu", "(", "self", ".", "cls_bn6", "(", "self", ".", "cls6", "(", "h5", ")", ")", ")", "\n", "h7", "=", "h6", ".", "view", "(", "-", "1", ",", "int", "(", "self", ".", "input_size", "/", "8", "*", "self", ".", "input_size", "/", "8", "*", "self", ".", "classify_chn", "[", "5", "]", ")", ")", "\n", "out", "=", "self", ".", "fc1", "(", "h7", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.models.sillnet.SillNet.classify2": [[253, 263], ["sillnet.SillNet.pool2", "sillnet.SillNet.leakyrelu", "sillnet.SillNet.pool2", "sillnet.SillNet.leakyrelu", "sillnet.SillNet.pool2", "sillnet.SillNet.leakyrelu", "sillnet.SillNet.view", "sillnet.SillNet.fc2", "sillnet.SillNet.leakyrelu", "sillnet.SillNet.cls2_bn2", "sillnet.SillNet.leakyrelu", "sillnet.SillNet.cls2_bn4", "sillnet.SillNet.leakyrelu", "sillnet.SillNet.cls2_bn6", "int", "sillnet.SillNet.cls2_bn1", "sillnet.SillNet.cls22", "sillnet.SillNet.cls2_bn3", "sillnet.SillNet.cls24", "sillnet.SillNet.cls2_bn5", "sillnet.SillNet.cls26", "sillnet.SillNet.cls21", "sillnet.SillNet.cls23", "sillnet.SillNet.cls25"], "methods", ["None"], ["", "def", "classify2", "(", "self", ",", "x", ")", ":", "\n", "        ", "h1", "=", "self", ".", "pool2", "(", "self", ".", "leakyrelu", "(", "self", ".", "cls2_bn1", "(", "self", ".", "cls21", "(", "x", ")", ")", ")", ")", "\n", "h2", "=", "self", ".", "leakyrelu", "(", "self", ".", "cls2_bn2", "(", "self", ".", "cls22", "(", "h1", ")", ")", ")", "\n", "h3", "=", "self", ".", "pool2", "(", "self", ".", "leakyrelu", "(", "self", ".", "cls2_bn3", "(", "self", ".", "cls23", "(", "h2", ")", ")", ")", ")", "\n", "h4", "=", "self", ".", "leakyrelu", "(", "self", ".", "cls2_bn4", "(", "self", ".", "cls24", "(", "h3", ")", ")", ")", "\n", "h5", "=", "self", ".", "pool2", "(", "self", ".", "leakyrelu", "(", "self", ".", "cls2_bn5", "(", "self", ".", "cls25", "(", "h4", ")", ")", ")", ")", "\n", "h6", "=", "self", ".", "leakyrelu", "(", "self", ".", "cls2_bn6", "(", "self", ".", "cls26", "(", "h5", ")", ")", ")", "\n", "h7", "=", "h6", ".", "view", "(", "-", "1", ",", "int", "(", "self", ".", "input_size", "/", "8", "*", "self", ".", "input_size", "/", "8", "*", "self", ".", "classify_chn", "[", "5", "]", ")", ")", "\n", "out", "=", "self", ".", "fc2", "(", "h7", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.models.sillnet.SillNet.init_params": [[264, 276], ["print", "sillnet.SillNet.state_dict", "isinstance", "sillnet.SillNet.update", "sillnet.SillNet.load_state_dict", "net.state_dict", "net.state_dict.items"], "methods", ["None"], ["", "def", "init_params", "(", "self", ",", "net", ")", ":", "\n", "        ", "print", "(", "'Loading the model from the file...'", ")", "\n", "net_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "if", "isinstance", "(", "net", ",", "dict", ")", ":", "\n", "            ", "pre_dict", "=", "net", "\n", "", "else", ":", "\n", "            ", "pre_dict", "=", "net", ".", "state_dict", "(", ")", "\n", "# 1. filter out unnecessary keys", "\n", "", "pre_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pre_dict", ".", "items", "(", ")", "if", "(", "k", "in", "net_dict", ")", "}", "\n", "net_dict", ".", "update", "(", "pre_dict", ")", "\n", "# 3. load the new state dict", "\n", "self", ".", "load_state_dict", "(", "net_dict", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.models.sillnet.convNoutput": [[16, 24], ["int", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.no_grad", "torch.no_grad", "torch.no_grad", "conv.numel", "conv"], "function", ["None"], ["", "", "def", "convNoutput", "(", "convs", ",", "input_size", ")", ":", "# predict output size after conv layers", "\n", "    ", "input_size", "=", "int", "(", "input_size", ")", "\n", "input_channels", "=", "convs", "[", "0", "]", "[", "1", "]", ".", "weight", ".", "shape", "[", "1", "]", "# input channel", "\n", "output", "=", "torch", ".", "Tensor", "(", "1", ",", "input_channels", ",", "input_size", ",", "input_size", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "conv", "in", "convs", ":", "\n", "            ", "output", "=", "conv", "(", "output", ")", "\n", "", "", "return", "output", ".", "numel", "(", ")", ",", "output", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.models.sillnet_gtsrb.View.__init__": [[9, 11], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "View", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.models.sillnet_gtsrb.View.forward": [[12, 15], ["x.view", "x.numel", "int"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "numel", "=", "x", ".", "numel", "(", ")", "/", "x", ".", "shape", "[", "0", "]", "\n", "return", "x", ".", "view", "(", "-", "1", ",", "int", "(", "numel", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.models.sillnet_gtsrb.stn.__init__": [[26, 66], ["torch.Module.__init__", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "sillnet_gtsrb.convNoutput", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "sillnet_gtsrb.stn.classifier[].weight.data.fill_", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "sillnet_gtsrb.View", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "sillnet_gtsrb.View", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.__init__", "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.models.sillnet_gtsrb.convNoutput"], ["    ", "def", "__init__", "(", "self", ",", "input_channels", ",", "input_size", ",", "params", ")", ":", "\n", "        ", "super", "(", "stn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input_size", "=", "input_size", "\n", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReplicationPad2d", "(", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_channels", ",", "params", "[", "0", "]", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReplicationPad2d", "(", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "params", "[", "0", "]", ",", "params", "[", "1", "]", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReplicationPad2d", "(", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "params", "[", "1", "]", ",", "params", "[", "2", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", ")", "\n", "\n", "out_numel", ",", "out_size", "=", "convNoutput", "(", "[", "self", ".", "conv1", ",", "self", ".", "conv2", ",", "self", ".", "conv3", "]", ",", "input_size", "/", "2", ")", "\n", "# set fc layer based on predicted size", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "View", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "out_numel", ",", "params", "[", "3", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "classifier", "=", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "View", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "params", "[", "3", "]", ",", "6", ")", "# affine transform has 6 parameters", "\n", ")", "\n", "# initialize stn parameters (affine transform)", "\n", "self", ".", "classifier", "[", "1", "]", ".", "weight", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "classifier", "[", "1", "]", ".", "bias", ".", "data", "=", "torch", ".", "FloatTensor", "(", "[", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.models.sillnet_gtsrb.stn.localization_network": [[67, 75], ["sillnet_gtsrb.stn.maxpool", "sillnet_gtsrb.stn.conv1", "sillnet_gtsrb.stn.conv2", "sillnet_gtsrb.stn.conv3", "sillnet_gtsrb.stn.fc", "sillnet_gtsrb.stn.classifier"], "methods", ["None"], ["", "def", "localization_network", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.models.sillnet_gtsrb.stn.forward": [[77, 83], ["sillnet_gtsrb.stn.localization_network", "theta.view.view.view", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample.size"], "methods", ["home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.models.sillnet_gtsrb.stn.localization_network"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "theta", "=", "self", ".", "localization_network", "(", "x", ")", "\n", "theta", "=", "theta", ".", "view", "(", "-", "1", ",", "2", ",", "3", ")", "\n", "grid", "=", "F", ".", "affine_grid", "(", "theta", ",", "x", ".", "size", "(", ")", ")", "\n", "x", "=", "F", ".", "grid_sample", "(", "x", ",", "grid", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.models.sillnet_gtsrb.SillNet_gtsrb.__init__": [[86, 209], ["torch.Module.__init__", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.UpsamplingNearest2d", "torch.UpsamplingNearest2d", "torch.UpsamplingNearest2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "int", "sillnet_gtsrb.stn", "sillnet_gtsrb.stn", "sillnet_gtsrb.stn", "sillnet_gtsrb.stn", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nc", ",", "input_size", ",", "class_train", ",", "class_test", ",", "extract_chn", "=", "None", ",", "classify_chn", "=", "None", ",", "param1", "=", "None", ",", "param2", "=", "None", ",", "param3", "=", "None", ",", "param4", "=", "None", ",", "param_mask", "=", "None", ")", ":", "\n", "        ", "super", "(", "SillNet_gtsrb", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "extract_chn", "=", "extract_chn", "\n", "self", ".", "classify_chn", "=", "classify_chn", "\n", "self", ".", "param1", "=", "param1", "\n", "self", ".", "param2", "=", "param2", "\n", "self", ".", "param3", "=", "param3", "\n", "self", ".", "param4", "=", "param4", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "nc", "=", "nc", "\n", "self", ".", "class_train", "=", "class_train", "\n", "self", ".", "class_test", "=", "class_test", "\n", "\n", "# extracter", "\n", "self", ".", "ex_pd1", "=", "nn", ".", "ReplicationPad2d", "(", "2", ")", "\n", "self", ".", "ex1", "=", "nn", ".", "Conv2d", "(", "nc", ",", "self", ".", "extract_chn", "[", "0", "]", ",", "5", ",", "1", ")", "# inchn, outchn, kernel, stride, padding, dilation, groups", "\n", "self", ".", "ex_bn1", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "extract_chn", "[", "0", "]", ")", "\n", "\n", "self", ".", "ex_pd2", "=", "nn", ".", "ReplicationPad2d", "(", "2", ")", "\n", "self", ".", "ex2", "=", "nn", ".", "Conv2d", "(", "self", ".", "extract_chn", "[", "0", "]", ",", "self", ".", "extract_chn", "[", "1", "]", ",", "5", ",", "1", ")", "# 1/1", "\n", "self", ".", "ex_bn2", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "extract_chn", "[", "1", "]", ")", "\n", "\n", "self", ".", "ex_pd3", "=", "nn", ".", "ReplicationPad2d", "(", "1", ")", "\n", "self", ".", "ex3", "=", "nn", ".", "Conv2d", "(", "self", ".", "extract_chn", "[", "1", "]", ",", "self", ".", "extract_chn", "[", "2", "]", ",", "3", ",", "1", ")", "# 1/1", "\n", "self", ".", "ex_bn3", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "extract_chn", "[", "2", "]", ")", "\n", "\n", "self", ".", "ex_pd4", "=", "nn", ".", "ReplicationPad2d", "(", "1", ")", "\n", "self", ".", "ex4", "=", "nn", ".", "Conv2d", "(", "self", ".", "extract_chn", "[", "2", "]", ",", "self", ".", "extract_chn", "[", "3", "]", ",", "3", ",", "1", ")", "# 1/1", "\n", "self", ".", "ex_bn4", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "extract_chn", "[", "3", "]", ")", "\n", "\n", "self", ".", "ex_pd5", "=", "nn", ".", "ReplicationPad2d", "(", "1", ")", "\n", "self", ".", "ex5", "=", "nn", ".", "Conv2d", "(", "self", ".", "extract_chn", "[", "3", "]", ",", "self", ".", "extract_chn", "[", "4", "]", ",", "3", ",", "1", ")", "# 1/1", "\n", "self", ".", "ex_bn5", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "extract_chn", "[", "4", "]", ")", "\n", "\n", "\n", "self", ".", "ex_pd6", "=", "nn", ".", "ReplicationPad2d", "(", "1", ")", "\n", "self", ".", "ex6", "=", "nn", ".", "Conv2d", "(", "self", ".", "extract_chn", "[", "4", "]", ",", "self", ".", "extract_chn", "[", "5", "]", ",", "3", ",", "1", ")", "# 1/1", "\n", "self", ".", "ex_bn6", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "extract_chn", "[", "5", "]", ")", "\n", "\n", "self", ".", "leakyrelu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n", "# decoder", "\n", "self", ".", "up1", "=", "nn", ".", "UpsamplingNearest2d", "(", "scale_factor", "=", "2", ")", "\n", "self", ".", "de_pd1", "=", "nn", ".", "ReplicationPad2d", "(", "1", ")", "\n", "self", ".", "de1", "=", "nn", ".", "Conv2d", "(", "int", "(", "self", ".", "extract_chn", "[", "5", "]", "/", "2", ")", ",", "self", ".", "extract_chn", "[", "4", "]", ",", "3", ",", "1", ")", "\n", "self", ".", "de_bn1", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "extract_chn", "[", "4", "]", ",", "1.e-3", ")", "\n", "\n", "self", ".", "de_pd2", "=", "nn", ".", "ReplicationPad2d", "(", "1", ")", "\n", "self", ".", "de2", "=", "nn", ".", "Conv2d", "(", "self", ".", "extract_chn", "[", "4", "]", ",", "self", ".", "extract_chn", "[", "3", "]", ",", "3", ",", "1", ")", "\n", "self", ".", "de_bn2", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "extract_chn", "[", "3", "]", ",", "1.e-3", ")", "\n", "\n", "self", ".", "de_pd3", "=", "nn", ".", "ReplicationPad2d", "(", "1", ")", "\n", "self", ".", "de3", "=", "nn", ".", "Conv2d", "(", "self", ".", "extract_chn", "[", "3", "]", ",", "self", ".", "extract_chn", "[", "2", "]", ",", "3", ",", "1", ")", "\n", "self", ".", "de_bn3", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "extract_chn", "[", "2", "]", ",", "1.e-3", ")", "\n", "\n", "self", ".", "de_pd4", "=", "nn", ".", "ReplicationPad2d", "(", "1", ")", "\n", "self", ".", "de4", "=", "nn", ".", "Conv2d", "(", "self", ".", "extract_chn", "[", "2", "]", ",", "self", ".", "extract_chn", "[", "1", "]", ",", "3", ",", "1", ")", "\n", "self", ".", "de_bn4", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "extract_chn", "[", "1", "]", ",", "1.e-3", ")", "\n", "\n", "self", ".", "de_pd5", "=", "nn", ".", "ReplicationPad2d", "(", "1", ")", "\n", "self", ".", "de5", "=", "nn", ".", "Conv2d", "(", "self", ".", "extract_chn", "[", "1", "]", ",", "nc", ",", "3", ",", "1", ")", "\n", "\n", "# warping", "\n", "if", "param1", "is", "not", "None", ":", "\n", "            ", "self", ".", "stn1", "=", "stn", "(", "nc", ",", "self", ".", "input_size", ",", "param1", ")", "\n", "", "if", "param2", "is", "not", "None", ":", "\n", "            ", "self", ".", "stn2", "=", "stn", "(", "self", ".", "extract_chn", "[", "1", "]", ",", "self", ".", "input_size", ",", "param2", ")", "\n", "", "if", "param3", "is", "not", "None", ":", "\n", "            ", "self", ".", "stn3", "=", "stn", "(", "self", ".", "extract_chn", "[", "3", "]", ",", "self", ".", "input_size", ",", "param3", ")", "\n", "", "if", "param4", "is", "not", "None", ":", "\n", "            ", "self", ".", "stn4", "=", "stn", "(", "int", "(", "self", ".", "extract_chn", "[", "5", "]", "/", "2", ")", ",", "self", ".", "input_size", ",", "param4", ")", "\n", "#self.rotate = rotate(int(self.extract_chn[5]/2), self.input_size, param4)", "\n", "\n", "# classifier 1", "\n", "", "self", ".", "cls1", "=", "nn", ".", "Conv2d", "(", "int", "(", "0.5", "*", "self", ".", "extract_chn", "[", "5", "]", ")", ",", "self", ".", "classify_chn", "[", "0", "]", ",", "5", ",", "1", ",", "2", ")", "# inchn, outchn, kernel, stride, padding, dilation, groups                                ", "\n", "self", ".", "cls_bn1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "classify_chn", "[", "0", "]", ")", "\n", "\n", "self", ".", "cls2", "=", "nn", ".", "Conv2d", "(", "self", ".", "classify_chn", "[", "0", "]", ",", "self", ".", "classify_chn", "[", "1", "]", ",", "5", ",", "1", ",", "2", ")", "# 1/2", "\n", "self", ".", "cls_bn2", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "classify_chn", "[", "1", "]", ")", "\n", "\n", "self", ".", "cls3", "=", "nn", ".", "Conv2d", "(", "self", ".", "classify_chn", "[", "1", "]", ",", "self", ".", "classify_chn", "[", "2", "]", ",", "5", ",", "1", ",", "2", ")", "# 1/4", "\n", "self", ".", "cls_bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "classify_chn", "[", "2", "]", ")", "\n", "\n", "\n", "self", ".", "cls4", "=", "nn", ".", "Conv2d", "(", "self", ".", "classify_chn", "[", "2", "]", ",", "self", ".", "classify_chn", "[", "3", "]", ",", "3", ",", "1", ",", "1", ")", "# 1/4", "\n", "self", ".", "cls_bn4", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "classify_chn", "[", "3", "]", ")", "\n", "\n", "self", ".", "cls5", "=", "nn", ".", "Conv2d", "(", "self", ".", "classify_chn", "[", "3", "]", ",", "self", ".", "classify_chn", "[", "4", "]", ",", "3", ",", "1", ",", "1", ")", "# 1/8", "\n", "self", ".", "cls_bn5", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "classify_chn", "[", "4", "]", ")", "\n", "\n", "self", ".", "cls6", "=", "nn", ".", "Conv2d", "(", "self", ".", "classify_chn", "[", "4", "]", ",", "self", ".", "classify_chn", "[", "5", "]", ",", "3", ",", "1", ",", "1", ")", "# 1/8", "\n", "self", ".", "cls_bn6", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "classify_chn", "[", "5", "]", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "int", "(", "self", ".", "input_size", "/", "8", "*", "self", ".", "input_size", "/", "8", ")", "*", "self", ".", "classify_chn", "[", "6", "]", ",", "self", ".", "class_train", ")", "\n", "#self.glbpool = nn.MaxPool2d(kernel_size=int(self.input_size/8), stride=1)", "\n", "self", ".", "pool1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "1", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "\n", "# classifier 2", "\n", "self", ".", "cls21", "=", "nn", ".", "Conv2d", "(", "int", "(", "0.5", "*", "self", ".", "extract_chn", "[", "5", "]", ")", ",", "self", ".", "classify_chn", "[", "0", "]", ",", "5", ",", "1", ",", "2", ")", "# inchn, outchn, kernel, stride, padding, dilation, groups                                ", "\n", "self", ".", "cls2_bn1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "classify_chn", "[", "0", "]", ")", "\n", "\n", "self", ".", "cls22", "=", "nn", ".", "Conv2d", "(", "self", ".", "classify_chn", "[", "0", "]", ",", "self", ".", "classify_chn", "[", "1", "]", ",", "5", ",", "1", ",", "2", ")", "# 1/2", "\n", "self", ".", "cls2_bn2", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "classify_chn", "[", "1", "]", ")", "\n", "\n", "self", ".", "cls23", "=", "nn", ".", "Conv2d", "(", "self", ".", "classify_chn", "[", "1", "]", ",", "self", ".", "classify_chn", "[", "2", "]", ",", "5", ",", "1", ",", "2", ")", "# 1/4", "\n", "self", ".", "cls2_bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "classify_chn", "[", "2", "]", ")", "\n", "\n", "\n", "self", ".", "cls24", "=", "nn", ".", "Conv2d", "(", "self", ".", "classify_chn", "[", "2", "]", ",", "self", ".", "classify_chn", "[", "3", "]", ",", "3", ",", "1", ",", "1", ")", "# 1/4", "\n", "self", ".", "cls2_bn4", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "classify_chn", "[", "3", "]", ")", "\n", "\n", "self", ".", "cls25", "=", "nn", ".", "Conv2d", "(", "self", ".", "classify_chn", "[", "3", "]", ",", "self", ".", "classify_chn", "[", "4", "]", ",", "3", ",", "1", ",", "1", ")", "# 1/8", "\n", "self", ".", "cls2_bn5", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "classify_chn", "[", "4", "]", ")", "\n", "\n", "self", ".", "cls26", "=", "nn", ".", "Conv2d", "(", "self", ".", "classify_chn", "[", "4", "]", ",", "self", ".", "classify_chn", "[", "5", "]", ",", "3", ",", "1", ",", "1", ")", "# 1/8", "\n", "self", ".", "cls2_bn6", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "classify_chn", "[", "5", "]", ")", "\n", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "int", "(", "self", ".", "input_size", "/", "8", "*", "self", ".", "input_size", "/", "8", ")", "*", "self", ".", "classify_chn", "[", "6", "]", ",", "self", ".", "class_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.models.sillnet_gtsrb.SillNet_gtsrb.extract": [[211, 237], ["sillnet_gtsrb.SillNet_gtsrb.leakyrelu", "sillnet_gtsrb.SillNet_gtsrb.leakyrelu", "sillnet_gtsrb.SillNet_gtsrb.leakyrelu", "sillnet_gtsrb.SillNet_gtsrb.leakyrelu", "sillnet_gtsrb.SillNet_gtsrb.leakyrelu", "sillnet_gtsrb.SillNet_gtsrb.sigmoid", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "sillnet_gtsrb.SillNet_gtsrb.stn1", "sillnet_gtsrb.SillNet_gtsrb.ex_bn1", "sillnet_gtsrb.SillNet_gtsrb.ex_bn2", "sillnet_gtsrb.SillNet_gtsrb.stn2", "sillnet_gtsrb.SillNet_gtsrb.ex_bn3", "sillnet_gtsrb.SillNet_gtsrb.ex_bn4", "sillnet_gtsrb.SillNet_gtsrb.stn3", "sillnet_gtsrb.SillNet_gtsrb.ex_bn5", "sillnet_gtsrb.SillNet_gtsrb.ex_bn6", "sillnet_gtsrb.SillNet_gtsrb.stn4", "sillnet_gtsrb.SillNet_gtsrb.ex1", "sillnet_gtsrb.SillNet_gtsrb.ex2", "sillnet_gtsrb.SillNet_gtsrb.ex3", "sillnet_gtsrb.SillNet_gtsrb.ex4", "sillnet_gtsrb.SillNet_gtsrb.ex5", "sillnet_gtsrb.SillNet_gtsrb.ex6", "sillnet_gtsrb.SillNet_gtsrb.ex_pd1", "sillnet_gtsrb.SillNet_gtsrb.ex_pd2", "sillnet_gtsrb.SillNet_gtsrb.ex_pd3", "sillnet_gtsrb.SillNet_gtsrb.ex_pd4", "sillnet_gtsrb.SillNet_gtsrb.ex_pd5", "sillnet_gtsrb.SillNet_gtsrb.ex_pd6"], "methods", ["None"], ["", "def", "extract", "(", "self", ",", "x", ",", "is_warping", ")", ":", "\n", "        ", "if", "is_warping", "and", "self", ".", "param1", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "stn1", "(", "x", ")", "\n", "", "h1", "=", "self", ".", "leakyrelu", "(", "self", ".", "ex_bn1", "(", "self", ".", "ex1", "(", "self", ".", "ex_pd1", "(", "x", ")", ")", ")", ")", "\n", "h2", "=", "self", ".", "leakyrelu", "(", "self", ".", "ex_bn2", "(", "self", ".", "ex2", "(", "self", ".", "ex_pd2", "(", "h1", ")", ")", ")", ")", "\n", "\n", "if", "is_warping", "and", "self", ".", "param2", "is", "not", "None", ":", "\n", "            ", "h2", "=", "self", ".", "stn2", "(", "h2", ")", "\n", "", "h3", "=", "self", ".", "leakyrelu", "(", "self", ".", "ex_bn3", "(", "self", ".", "ex3", "(", "self", ".", "ex_pd3", "(", "h2", ")", ")", ")", ")", "\n", "h4", "=", "self", ".", "leakyrelu", "(", "self", ".", "ex_bn4", "(", "self", ".", "ex4", "(", "self", ".", "ex_pd4", "(", "h3", ")", ")", ")", ")", "\n", "\n", "if", "is_warping", "and", "self", ".", "param3", "is", "not", "None", ":", "\n", "            ", "h4", "=", "self", ".", "stn3", "(", "h4", ")", "\n", "", "h5", "=", "self", ".", "leakyrelu", "(", "self", ".", "ex_bn5", "(", "self", ".", "ex5", "(", "self", ".", "ex_pd5", "(", "h4", ")", ")", ")", ")", "\n", "h6", "=", "self", ".", "sigmoid", "(", "self", ".", "ex_bn6", "(", "self", ".", "ex6", "(", "self", ".", "ex_pd6", "(", "h5", ")", ")", ")", ")", "\n", "h6_nowarp", "=", "h6", "\n", "f_nowarp", ",", "noise", "=", "torch", ".", "chunk", "(", "h6_nowarp", ",", "2", ",", "1", ")", "\n", "\n", "feature", ",", "_", "=", "torch", ".", "chunk", "(", "h6", ",", "2", ",", "1", ")", "\n", "\n", "if", "is_warping", "and", "self", ".", "param4", "is", "not", "None", ":", "\n", "#feature = self.rotate(feature)", "\n", "            ", "feature", "=", "self", ".", "stn4", "(", "feature", ")", "\n", "\n", "\n", "", "return", "feature", ",", "noise", ",", "f_nowarp", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.models.sillnet_gtsrb.SillNet_gtsrb.decode": [[238, 245], ["sillnet_gtsrb.SillNet_gtsrb.leakyrelu", "sillnet_gtsrb.SillNet_gtsrb.leakyrelu", "sillnet_gtsrb.SillNet_gtsrb.leakyrelu", "sillnet_gtsrb.SillNet_gtsrb.leakyrelu", "sillnet_gtsrb.SillNet_gtsrb.sigmoid", "sillnet_gtsrb.SillNet_gtsrb.de_bn1", "sillnet_gtsrb.SillNet_gtsrb.de_bn2", "sillnet_gtsrb.SillNet_gtsrb.de_bn3", "sillnet_gtsrb.SillNet_gtsrb.de_bn4", "sillnet_gtsrb.SillNet_gtsrb.de5", "sillnet_gtsrb.SillNet_gtsrb.de1", "sillnet_gtsrb.SillNet_gtsrb.de2", "sillnet_gtsrb.SillNet_gtsrb.de3", "sillnet_gtsrb.SillNet_gtsrb.de4", "sillnet_gtsrb.SillNet_gtsrb.de_pd5", "sillnet_gtsrb.SillNet_gtsrb.de_pd1", "sillnet_gtsrb.SillNet_gtsrb.de_pd2", "sillnet_gtsrb.SillNet_gtsrb.de_pd3", "sillnet_gtsrb.SillNet_gtsrb.de_pd4"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "x", ")", ":", "\n", "        ", "h1", "=", "self", ".", "leakyrelu", "(", "self", ".", "de_bn1", "(", "self", ".", "de1", "(", "self", ".", "de_pd1", "(", "x", ")", ")", ")", ")", "\n", "h2", "=", "self", ".", "leakyrelu", "(", "self", ".", "de_bn2", "(", "self", ".", "de2", "(", "self", ".", "de_pd2", "(", "h1", ")", ")", ")", ")", "\n", "h3", "=", "self", ".", "leakyrelu", "(", "self", ".", "de_bn3", "(", "self", ".", "de3", "(", "self", ".", "de_pd3", "(", "h2", ")", ")", ")", ")", "\n", "h4", "=", "self", ".", "leakyrelu", "(", "self", ".", "de_bn4", "(", "self", ".", "de4", "(", "self", ".", "de_pd4", "(", "h3", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "sigmoid", "(", "self", ".", "de5", "(", "self", ".", "de_pd5", "(", "h4", ")", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.models.sillnet_gtsrb.SillNet_gtsrb.classify": [[246, 257], ["sillnet_gtsrb.SillNet_gtsrb.pool2", "sillnet_gtsrb.SillNet_gtsrb.leakyrelu", "sillnet_gtsrb.SillNet_gtsrb.pool2", "sillnet_gtsrb.SillNet_gtsrb.leakyrelu", "sillnet_gtsrb.SillNet_gtsrb.pool2", "sillnet_gtsrb.SillNet_gtsrb.leakyrelu", "sillnet_gtsrb.SillNet_gtsrb.view", "sillnet_gtsrb.SillNet_gtsrb.fc1", "sillnet_gtsrb.SillNet_gtsrb.leakyrelu", "sillnet_gtsrb.SillNet_gtsrb.cls_bn2", "sillnet_gtsrb.SillNet_gtsrb.leakyrelu", "sillnet_gtsrb.SillNet_gtsrb.cls_bn4", "sillnet_gtsrb.SillNet_gtsrb.leakyrelu", "sillnet_gtsrb.SillNet_gtsrb.cls_bn6", "int", "sillnet_gtsrb.SillNet_gtsrb.cls_bn1", "sillnet_gtsrb.SillNet_gtsrb.cls2", "sillnet_gtsrb.SillNet_gtsrb.cls_bn3", "sillnet_gtsrb.SillNet_gtsrb.cls4", "sillnet_gtsrb.SillNet_gtsrb.cls_bn5", "sillnet_gtsrb.SillNet_gtsrb.cls6", "sillnet_gtsrb.SillNet_gtsrb.cls1", "sillnet_gtsrb.SillNet_gtsrb.cls3", "sillnet_gtsrb.SillNet_gtsrb.cls5"], "methods", ["None"], ["", "def", "classify", "(", "self", ",", "x", ")", ":", "\n", "        ", "h1", "=", "self", ".", "pool2", "(", "self", ".", "leakyrelu", "(", "self", ".", "cls_bn1", "(", "self", ".", "cls1", "(", "x", ")", ")", ")", ")", "\n", "h2", "=", "self", ".", "leakyrelu", "(", "self", ".", "cls_bn2", "(", "self", ".", "cls2", "(", "h1", ")", ")", ")", "\n", "h3", "=", "self", ".", "pool2", "(", "self", ".", "leakyrelu", "(", "self", ".", "cls_bn3", "(", "self", ".", "cls3", "(", "h2", ")", ")", ")", ")", "\n", "h4", "=", "self", ".", "leakyrelu", "(", "self", ".", "cls_bn4", "(", "self", ".", "cls4", "(", "h3", ")", ")", ")", "\n", "h5", "=", "self", ".", "pool2", "(", "self", ".", "leakyrelu", "(", "self", ".", "cls_bn5", "(", "self", ".", "cls5", "(", "h4", ")", ")", ")", ")", "\n", "h6", "=", "self", ".", "leakyrelu", "(", "self", ".", "cls_bn6", "(", "self", ".", "cls6", "(", "h5", ")", ")", ")", "\n", "h7", "=", "h6", ".", "view", "(", "-", "1", ",", "int", "(", "self", ".", "input_size", "/", "8", "*", "self", ".", "input_size", "/", "8", "*", "self", ".", "classify_chn", "[", "6", "]", ")", ")", "\n", "out", "=", "self", ".", "fc1", "(", "h7", ")", "\n", "#out = self.dropout(out)", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.models.sillnet_gtsrb.SillNet_gtsrb.classify2": [[258, 269], ["sillnet_gtsrb.SillNet_gtsrb.pool2", "sillnet_gtsrb.SillNet_gtsrb.leakyrelu", "sillnet_gtsrb.SillNet_gtsrb.pool2", "sillnet_gtsrb.SillNet_gtsrb.leakyrelu", "sillnet_gtsrb.SillNet_gtsrb.pool2", "sillnet_gtsrb.SillNet_gtsrb.leakyrelu", "sillnet_gtsrb.SillNet_gtsrb.view", "sillnet_gtsrb.SillNet_gtsrb.fc2", "sillnet_gtsrb.SillNet_gtsrb.leakyrelu", "sillnet_gtsrb.SillNet_gtsrb.cls2_bn2", "sillnet_gtsrb.SillNet_gtsrb.leakyrelu", "sillnet_gtsrb.SillNet_gtsrb.cls2_bn4", "sillnet_gtsrb.SillNet_gtsrb.leakyrelu", "sillnet_gtsrb.SillNet_gtsrb.cls2_bn6", "int", "sillnet_gtsrb.SillNet_gtsrb.cls2_bn1", "sillnet_gtsrb.SillNet_gtsrb.cls22", "sillnet_gtsrb.SillNet_gtsrb.cls2_bn3", "sillnet_gtsrb.SillNet_gtsrb.cls24", "sillnet_gtsrb.SillNet_gtsrb.cls2_bn5", "sillnet_gtsrb.SillNet_gtsrb.cls26", "sillnet_gtsrb.SillNet_gtsrb.cls21", "sillnet_gtsrb.SillNet_gtsrb.cls23", "sillnet_gtsrb.SillNet_gtsrb.cls25"], "methods", ["None"], ["", "def", "classify2", "(", "self", ",", "x", ")", ":", "\n", "        ", "h1", "=", "self", ".", "pool2", "(", "self", ".", "leakyrelu", "(", "self", ".", "cls2_bn1", "(", "self", ".", "cls21", "(", "x", ")", ")", ")", ")", "\n", "h2", "=", "self", ".", "leakyrelu", "(", "self", ".", "cls2_bn2", "(", "self", ".", "cls22", "(", "h1", ")", ")", ")", "\n", "h3", "=", "self", ".", "pool2", "(", "self", ".", "leakyrelu", "(", "self", ".", "cls2_bn3", "(", "self", ".", "cls23", "(", "h2", ")", ")", ")", ")", "\n", "h4", "=", "self", ".", "leakyrelu", "(", "self", ".", "cls2_bn4", "(", "self", ".", "cls24", "(", "h3", ")", ")", ")", "\n", "h5", "=", "self", ".", "pool2", "(", "self", ".", "leakyrelu", "(", "self", ".", "cls2_bn5", "(", "self", ".", "cls25", "(", "h4", ")", ")", ")", ")", "\n", "h6", "=", "self", ".", "leakyrelu", "(", "self", ".", "cls2_bn6", "(", "self", ".", "cls26", "(", "h5", ")", ")", ")", "\n", "h7", "=", "h6", ".", "view", "(", "-", "1", ",", "int", "(", "self", ".", "input_size", "/", "8", "*", "self", ".", "input_size", "/", "8", "*", "self", ".", "classify_chn", "[", "6", "]", ")", ")", "\n", "out", "=", "self", ".", "fc2", "(", "h7", ")", "\n", "#out = self.dropout(out)", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.models.sillnet_gtsrb.SillNet_gtsrb.init_params": [[270, 282], ["print", "sillnet_gtsrb.SillNet_gtsrb.state_dict", "isinstance", "sillnet_gtsrb.SillNet_gtsrb.update", "sillnet_gtsrb.SillNet_gtsrb.load_state_dict", "net.state_dict", "net.state_dict.items"], "methods", ["None"], ["", "def", "init_params", "(", "self", ",", "net", ")", ":", "\n", "        ", "print", "(", "'Loading the model from the file...'", ")", "\n", "net_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "if", "isinstance", "(", "net", ",", "dict", ")", ":", "\n", "            ", "pre_dict", "=", "net", "\n", "", "else", ":", "\n", "            ", "pre_dict", "=", "net", ".", "state_dict", "(", ")", "\n", "# 1. filter out unnecessary keys", "\n", "", "pre_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pre_dict", ".", "items", "(", ")", "if", "(", "k", "in", "net_dict", ")", "}", "# for fs net", "\n", "net_dict", ".", "update", "(", "pre_dict", ")", "\n", "# 3. load the new state dict", "\n", "self", ".", "load_state_dict", "(", "net_dict", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.models.sillnet_gtsrb.convNoutput": [[16, 24], ["int", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.no_grad", "torch.no_grad", "torch.no_grad", "conv.numel", "conv"], "function", ["None"], ["", "", "def", "convNoutput", "(", "convs", ",", "input_size", ")", ":", "# predict output size after conv layers", "\n", "    ", "input_size", "=", "int", "(", "input_size", ")", "\n", "input_channels", "=", "convs", "[", "0", "]", "[", "1", "]", ".", "weight", ".", "shape", "[", "1", "]", "# input channel", "\n", "output", "=", "torch", ".", "Tensor", "(", "1", ",", "input_channels", ",", "input_size", ",", "input_size", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "conv", "in", "convs", ":", "\n", "            ", "output", "=", "conv", "(", "output", ")", "\n", "", "", "return", "output", ".", "numel", "(", ")", ",", "output", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.models.__init__.get_model": [[4, 16], ["__init__._get_model_instance", "model.", "print", "model.", "print"], "function", ["home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.models.__init__._get_model_instance"], ["def", "get_model", "(", "name", ",", "class_train", ",", "class_test", ",", "feature_channel", ")", ":", "\n", "    ", "model", "=", "_get_model_instance", "(", "name", ")", "\n", "\n", "if", "name", "is", "'sillnet'", ":", "\n", "        ", "model", "=", "model", "(", "nc", "=", "3", ",", "input_size", "=", "64", ",", "class_train", "=", "class_train", ",", "class_test", "=", "class_test", ",", "extract_chn", "=", "[", "100", ",", "150", ",", "200", ",", "150", ",", "100", ",", "feature_channel", "]", ",", "classify_chn", "=", "[", "100", ",", "150", ",", "200", ",", "250", ",", "300", ",", "100", "]", ",", "param1", "=", "None", ",", "param2", "=", "None", ",", "param3", "=", "None", ",", "param4", "=", "[", "150", ",", "150", ",", "150", ",", "150", "]", ")", "\n", "print", "(", "'Use sillnet with random initialization!'", ")", "\n", "\n", "", "if", "name", "is", "'sillnet_gtsrb'", ":", "\n", "        ", "model", "=", "model", "(", "nc", "=", "3", ",", "input_size", "=", "64", ",", "class_train", "=", "class_train", ",", "class_test", "=", "class_test", ",", "extract_chn", "=", "[", "150", ",", "150", ",", "150", ",", "150", ",", "150", ",", "feature_channel", "]", ",", "classify_chn", "=", "[", "100", ",", "150", ",", "200", ",", "150", ",", "100", ",", "100", ",", "100", "]", ",", "param1", "=", "None", ",", "param2", "=", "[", "150", ",", "150", ",", "150", ",", "150", "]", ",", "param3", "=", "[", "150", ",", "150", ",", "150", ",", "150", "]", ",", "param4", "=", "[", "150", ",", "150", ",", "150", ",", "150", "]", ")", "\n", "print", "(", "'Use sillnet_gtsrb with random initialization!'", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.models.__init__._get_model_instance": [[17, 25], ["print"], "function", ["None"], ["", "def", "_get_model_instance", "(", "name", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "return", "{", "\n", "'sillnet'", ":", "SillNet", ",", "\n", "'sillnet_gtsrb'", ":", "SillNet_gtsrb", ",", "\n", "}", "[", "name", "]", "\n", "", "except", ":", "\n", "        ", "print", "(", "'Model {} not available'", ".", "format", "(", "name", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.belga2toplogo.belga2toplogoLoader.__init__": [[12, 82], ["torch.utils.data.Dataset.__init__", "numpy.array", "open", "open", "open.readlines", "open.readlines", "range", "open", "open.readlines", "range", "print", "print", "torch.LongTensor", "len", "len", "belga2toplogo.belga2toplogoLoader.class_names.append", "torch.LongTensor", "torch.LongTensor", "int", "torch.LongTensor", "torch.LongTensor", "belga2toplogo.belga2toplogoLoader.tr_class.tolist", "belga2toplogo.belga2toplogoLoader.inputs.append", "belga2toplogo.belga2toplogoLoader.targets.append", "int", "len", "len", "label_lines[].split", "belga2toplogo.belga2toplogoLoader.te_class.tolist", "belga2toplogo.belga2toplogoLoader.inputs.append", "belga2toplogo.belga2toplogoLoader.targets.append", "int", "label_lines[].split", "belga2toplogo.belga2toplogoLoader.te_class.tolist", "belga2toplogo.belga2toplogoLoader.inputs.append", "belga2toplogo.belga2toplogoLoader.targets.append", "label_lines[].split"], "methods", ["home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.__init__"], ["  ", "def", "__init__", "(", "self", ",", "root", ",", "exp", ",", "split", "=", "'train'", ",", "is_transform", "=", "False", ",", "img_size", "=", "None", ",", "augmentations", "=", "None", ",", "prototype_sampling_rate", "=", "0.005", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "split", "==", "'train'", ":", "\n", "        ", "self", ".", "proto_rate", "=", "prototype_sampling_rate", "\n", "", "else", ":", "\n", "        ", "self", ".", "proto_rate", "=", "0.0", "\n", "", "self", ".", "inputs", "=", "[", "]", "\n", "self", ".", "targets", "=", "[", "]", "\n", "self", ".", "class_names", "=", "[", "]", "\n", "\n", "if", "split", "==", "'train'", ":", "\n", "        ", "self", ".", "split", "=", "'belga'", "\n", "self", ".", "n_classes", "=", "37", "#", "\n", "#self.tr_class = torch.LongTensor([12, 16, 28, 30]) # belga classes", "\n", "self", ".", "tr_class", "=", "torch", ".", "LongTensor", "(", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "16", ",", "17", ",", "18", ",", "19", ",", "20", ",", "21", ",", "22", ",", "23", ",", "24", ",", "25", ",", "26", ",", "27", ",", "28", ",", "29", ",", "30", ",", "31", ",", "32", ",", "33", ",", "34", ",", "35", ",", "36", "]", ")", "# belga classes", "\n", "", "elif", "split", "==", "'test'", ":", "\n", "        ", "self", ".", "split", "=", "'toplogo10'", "\n", "self", ".", "n_classes", "=", "11", "\n", "self", ".", "n_classes", "=", "11", "\n", "self", ".", "tr_class", "=", "torch", ".", "LongTensor", "(", "[", "0", ",", "1", ",", "3", ",", "7", ",", "9", "]", ")", "\n", "self", ".", "te_class", "=", "torch", ".", "LongTensor", "(", "[", "2", ",", "4", ",", "5", ",", "6", ",", "8", ",", "10", "]", ")", "\n", "", "elif", "split", "==", "'val'", ":", "\n", "        ", "self", ".", "split", "=", "'flickr32'", "\n", "self", ".", "n_classes", "=", "32", "\n", "self", ".", "tr_class", "=", "torch", ".", "LongTensor", "(", "[", "7", ",", "13", ",", "25", ",", "28", "]", ")", "#+ 37  # belga classes", "\n", "self", ".", "te_class", "=", "torch", ".", "LongTensor", "(", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "14", ",", "15", ",", "16", ",", "17", ",", "18", ",", "19", ",", "20", ",", "21", ",", "22", ",", "23", ",", "24", ",", "26", ",", "27", ",", "29", ",", "30", ",", "31", "]", ")", "#+ 37  # belga classes", "\n", "#self.te_class = torch.LongTensor([0]) + 37", "\n", "\n", "", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "is_transform", "=", "is_transform", "\n", "self", ".", "augmentations", "=", "augmentations", "\n", "self", ".", "mean", "=", "np", ".", "array", "(", "[", "125.00", ",", "125.00", ",", "125.00", "]", ")", "# average intensity", "\n", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "dataPath", "=", "root", "+", "exp", "+", "'/'", "+", "self", ".", "split", "+", "'_impaths.txt'", "\n", "self", ".", "labelPath", "=", "root", "+", "exp", "+", "'/'", "+", "self", ".", "split", "+", "'_imclasses.txt'", "\n", "\n", "f_data", "=", "open", "(", "self", ".", "dataPath", ",", "'r'", ")", "\n", "f_label", "=", "open", "(", "self", ".", "labelPath", ",", "'r'", ")", "\n", "data_lines", "=", "f_data", ".", "readlines", "(", ")", "\n", "label_lines", "=", "f_label", ".", "readlines", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "data_lines", ")", ")", ":", "\n", "        ", "if", "self", ".", "split", "==", "'belga'", ":", "\n", "            ", "label", "=", "int", "(", "label_lines", "[", "i", "]", ".", "split", "(", ")", "[", "0", "]", ")", "\n", "if", "label", "-", "1", "in", "self", ".", "tr_class", ".", "tolist", "(", ")", ":", "\n", "                ", "self", ".", "inputs", ".", "append", "(", "root", "+", "data_lines", "[", "i", "]", "[", "0", ":", "-", "1", "]", ")", "\n", "self", ".", "targets", ".", "append", "(", "label", ")", "# label: [road class, wet/dry, video index]", "\n", "", "", "elif", "self", ".", "split", "==", "'toplogo10'", ":", "\n", "            ", "label", "=", "int", "(", "label_lines", "[", "i", "]", ".", "split", "(", ")", "[", "0", "]", ")", "#+ 69", "\n", "if", "label", "-", "1", "in", "self", ".", "te_class", ".", "tolist", "(", ")", ":", "\n", "                ", "self", ".", "inputs", ".", "append", "(", "root", "+", "data_lines", "[", "i", "]", "[", "0", ":", "-", "1", "]", ")", "\n", "self", ".", "targets", ".", "append", "(", "label", ")", "# label: [road class, wet/dry, video index]", "\n", "", "", "elif", "self", ".", "split", "==", "'flickr32'", ":", "\n", "            ", "label", "=", "int", "(", "label_lines", "[", "i", "]", ".", "split", "(", ")", "[", "0", "]", ")", "#+ 37", "\n", "if", "label", "-", "1", "in", "self", ".", "te_class", ".", "tolist", "(", ")", ":", "\n", "                ", "self", ".", "inputs", ".", "append", "(", "root", "+", "data_lines", "[", "i", "]", "[", "0", ":", "-", "1", "]", ")", "\n", "self", ".", "targets", ".", "append", "(", "label", ")", "# label: [road class, wet/dry, video index]", "\n", "\n", "", "", "", "classnamesPath", "=", "root", "+", "exp", "+", "'/'", "+", "self", ".", "split", "+", "'_classnames.txt'", "\n", "f_classnames", "=", "open", "(", "classnamesPath", ",", "'r'", ")", "\n", "data_lines", "=", "f_classnames", ".", "readlines", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "data_lines", ")", ")", ":", "\n", "        ", "self", ".", "class_names", ".", "append", "(", "data_lines", "[", "i", "]", "[", "0", ":", "-", "1", "]", ")", "\n", "\n", "#assert(self.n_classes == len(self.class_names))", "\n", "\n", "", "print", "(", "'%s %s %d classes'", "%", "(", "split", ",", "self", ".", "split", ",", "len", "(", "self", ".", "class_names", ")", ")", ")", "\n", "print", "(", "'Load %s: %s: %d samples'", "%", "(", "split", ",", "self", ".", "split", ",", "len", "(", "self", ".", "targets", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.belga2toplogo.belga2toplogoLoader.__len__": [[83, 85], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.belga2toplogo.belga2toplogoLoader.__getitem__": [[86, 113], ["scipy.imread", "numpy.array", "numpy.array", "torch.ones().type", "scipy.imread", "random.random", "numpy.copy", "belga2toplogo.belga2toplogoLoader.augmentations", "belga2toplogo.belga2toplogoLoader.transform", "belga2toplogo.belga2toplogoLoader.transform", "scipy.imread", "scipy.imread", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.transform", "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "    ", "img_path", "=", "self", ".", "inputs", "[", "index", "]", "\n", "gt", "=", "self", ".", "targets", "[", "index", "]", "\n", "gt", "=", "torch", ".", "ones", "(", "1", ")", ".", "type", "(", "torch", ".", "LongTensor", ")", "*", "gt", "\n", "\n", "# Load images and templates. perform augmentations", "\n", "img", "=", "m", ".", "imread", "(", "img_path", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "if", "self", ".", "split", "==", "'belga'", ":", "\n", "        ", "template", "=", "m", ".", "imread", "(", "self", ".", "root", "+", "self", ".", "split", "+", "'/template_ordered/%02d.jpg'", "%", "(", "gt", ")", ")", "\n", "", "elif", "self", ".", "split", "==", "'toplogo10'", ":", "\n", "        ", "template", "=", "m", ".", "imread", "(", "self", ".", "root", "+", "self", ".", "split", "+", "'/template_ordered/%02d.jpg'", "%", "(", "gt", ")", ")", "\n", "", "else", ":", "\n", "        ", "template", "=", "m", ".", "imread", "(", "self", ".", "root", "+", "self", ".", "split", "+", "'/template_ordered/%02d.jpg'", "%", "(", "gt", ")", ")", "\n", "", "template", "=", "np", ".", "array", "(", "template", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "if", "random", ".", "random", "(", ")", "<", "self", ".", "proto_rate", ":", "\n", "        ", "img", "=", "np", ".", "copy", "(", "template", ")", "\n", "", "if", "self", ".", "augmentations", "is", "not", "None", ":", "\n", "        ", "img", ",", "template", "=", "self", ".", "augmentations", "(", "img", ",", "template", ")", "\n", "", "if", "self", ".", "is_transform", ":", "\n", "        ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "template", "=", "self", ".", "transform", "(", "template", ")", "\n", "\n", "", "gt", "=", "gt", "-", "1", "\n", "\n", "return", "img", ",", "gt", ",", "template", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.belga2toplogo.belga2toplogoLoader.transform": [[114, 129], ["cv2.resize.astype", "cv2.resize.transpose", "torch.from_numpy().float", "cv2.resize", "cv2.resize.astype", "torch.from_numpy"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "img", ")", ":", "\n", "    ", "img", "=", "img", ".", "astype", "(", "np", ".", "float64", ")", "\n", "#img -= self.mean", "\n", "if", "self", ".", "img_size", "is", "not", "None", ":", "\n", "      ", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "self", ".", "img_size", "[", "1", "]", ",", "self", ".", "img_size", "[", "0", "]", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "# Resize scales images from 0 to 255, thus we need", "\n", "# to divide by 255.0", "\n", "\n", "\n", "", "img", "=", "img", ".", "astype", "(", "float", ")", "/", "255.0", "\n", "# NHWC -> NCHW", "\n", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "float", "(", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.belga2toplogo.belga2toplogoLoader.load_template": [[130, 162], ["scipy.imread", "numpy.array", "target_img.append", "target_template.append", "torch.stack", "torch.stack", "img_paths.append", "img_paths.append", "augmentations", "belga2toplogo.belga2toplogoLoader.transform", "belga2toplogo.belga2toplogoLoader.transform", "img_paths.append"], "methods", ["home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.transform", "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.transform"], ["", "def", "load_template", "(", "self", ",", "target", ",", "augmentations", "=", "None", ")", ":", "\n", "\n", "# if augmentation is not specified, use self.augmentations. Unless use input augmentation option.", "\n", "    ", "if", "augmentations", "is", "None", ":", "\n", "        ", "augmentations", "=", "self", ".", "augmentations", "\n", "", "img_paths", "=", "[", "]", "\n", "\n", "for", "id", "in", "target", ":", "\n", "        ", "if", "self", ".", "split", "==", "'belga'", ":", "\n", "            ", "img_paths", ".", "append", "(", "self", ".", "root", "+", "self", ".", "split", "+", "'/template_ordered/%02d.jpg'", "%", "(", "id", "+", "1", ")", ")", "\n", "", "if", "self", ".", "split", "==", "'toplogo10'", ":", "\n", "            ", "img_paths", ".", "append", "(", "self", ".", "root", "+", "self", ".", "split", "+", "'/template_ordered/%02d.jpg'", "%", "(", "id", "+", "1", ")", ")", "\n", "", "elif", "self", ".", "split", "==", "'flickr32'", ":", "\n", "            ", "img_paths", ".", "append", "(", "self", ".", "root", "+", "self", ".", "split", "+", "'/template_ordered/%02d.jpg'", "%", "(", "id", "+", "1", ")", ")", "\n", "\n", "\n", "", "", "target_img", "=", "[", "]", "\n", "target_template", "=", "[", "]", "\n", "for", "img_path", "in", "img_paths", ":", "\n", "        ", "img", "=", "m", ".", "imread", "(", "img_path", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "if", "augmentations", "is", "not", "None", ":", "\n", "            ", "img", ",", "template", "=", "augmentations", "(", "img", ",", "img", ")", "\n", "", "if", "self", ".", "transform", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "template", "=", "self", ".", "transform", "(", "template", ")", "\n", "\n", "", "target_img", ".", "append", "(", "img", ")", "\n", "target_template", ".", "append", "(", "template", ")", "\n", "\n", "", "return", "torch", ".", "stack", "(", "target_img", ",", "dim", "=", "0", ")", ",", "torch", ".", "stack", "(", "target_template", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.belga2flickr.belga2flickrLoader.__init__": [[12, 81], ["torch.utils.data.Dataset.__init__", "numpy.array", "open", "open", "open.readlines", "open.readlines", "range", "open", "open.readlines", "range", "print", "print", "torch.LongTensor", "len", "len", "belga2flickr.belga2flickrLoader.class_names.append", "len", "int", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "belga2flickr.belga2flickrLoader.tr_class.tolist", "belga2flickr.belga2flickrLoader.inputs.append", "belga2flickr.belga2flickrLoader.targets.append", "len", "len", "range", "range", "label_lines[].split", "int", "belga2flickr.belga2flickrLoader.te_class.tolist", "belga2flickr.belga2flickrLoader.inputs.append", "belga2flickr.belga2flickrLoader.targets.append", "int", "belga2flickr.belga2flickrLoader.te_class.tolist", "belga2flickr.belga2flickrLoader.inputs.append", "belga2flickr.belga2flickrLoader.targets.append", "label_lines[].split", "label_lines[].split"], "methods", ["home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.__init__"], ["  ", "def", "__init__", "(", "self", ",", "root", ",", "exp", ",", "split", "=", "'train'", ",", "is_transform", "=", "False", ",", "img_size", "=", "None", ",", "augmentations", "=", "None", ",", "prototype_sampling_rate", "=", "0.005", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "split", "==", "'train'", ":", "\n", "        ", "self", ".", "proto_rate", "=", "prototype_sampling_rate", "\n", "", "else", ":", "\n", "        ", "self", ".", "proto_rate", "=", "0.0", "\n", "", "self", ".", "inputs", "=", "[", "]", "\n", "self", ".", "targets", "=", "[", "]", "\n", "self", ".", "class_names", "=", "[", "]", "\n", "\n", "if", "split", "==", "'train'", ":", "\n", "        ", "self", ".", "split", "=", "'belga'", "\n", "self", ".", "n_classes", "=", "37", "#", "\n", "#self.tr_class = torch.LongTensor([12, 16, 28, 30]) # belga classes", "\n", "self", ".", "tr_class", "=", "torch", ".", "LongTensor", "(", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "16", ",", "17", ",", "18", ",", "19", ",", "20", ",", "21", ",", "22", ",", "23", ",", "24", ",", "25", ",", "26", ",", "27", ",", "28", ",", "29", ",", "30", ",", "31", ",", "32", ",", "33", ",", "34", ",", "35", ",", "36", "]", ")", "# belga classes", "\n", "", "elif", "split", "==", "'val'", ":", "\n", "        ", "self", ".", "split", "=", "'toplogo10'", "\n", "self", ".", "n_classes", "=", "11", "\n", "self", ".", "tr_class", "=", "torch", ".", "LongTensor", "(", "range", "(", "0", ",", "11", ")", ")", "+", "69", "\n", "self", ".", "te_class", "=", "torch", ".", "LongTensor", "(", "range", "(", "0", ",", "11", ")", ")", "+", "69", "\n", "", "elif", "split", "==", "'test'", ":", "\n", "        ", "self", ".", "split", "=", "'flickr32'", "\n", "self", ".", "n_classes", "=", "32", "\n", "self", ".", "tr_class", "=", "torch", ".", "LongTensor", "(", "[", "7", ",", "13", ",", "25", ",", "28", "]", ")", "#+ 37  # belga classes", "\n", "self", ".", "te_class", "=", "torch", ".", "LongTensor", "(", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "14", ",", "15", ",", "16", ",", "17", ",", "18", ",", "19", ",", "20", ",", "21", ",", "22", ",", "23", ",", "24", ",", "26", ",", "27", ",", "29", ",", "30", ",", "31", "]", ")", "#+ 37  # belga classes", "\n", "#self.te_class = torch.LongTensor([0]) + 37", "\n", "\n", "", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "is_transform", "=", "is_transform", "\n", "self", ".", "augmentations", "=", "augmentations", "\n", "self", ".", "mean", "=", "np", ".", "array", "(", "[", "125.00", ",", "125.00", ",", "125.00", "]", ")", "# average intensity", "\n", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "dataPath", "=", "root", "+", "exp", "+", "'/'", "+", "self", ".", "split", "+", "'_impaths.txt'", "\n", "self", ".", "labelPath", "=", "root", "+", "exp", "+", "'/'", "+", "self", ".", "split", "+", "'_imclasses.txt'", "\n", "\n", "f_data", "=", "open", "(", "self", ".", "dataPath", ",", "'r'", ")", "\n", "f_label", "=", "open", "(", "self", ".", "labelPath", ",", "'r'", ")", "\n", "data_lines", "=", "f_data", ".", "readlines", "(", ")", "\n", "label_lines", "=", "f_label", ".", "readlines", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "data_lines", ")", ")", ":", "\n", "        ", "if", "self", ".", "split", "==", "'belga'", ":", "\n", "            ", "label", "=", "int", "(", "label_lines", "[", "i", "]", ".", "split", "(", ")", "[", "0", "]", ")", "\n", "if", "label", "-", "1", "in", "self", ".", "tr_class", ".", "tolist", "(", ")", ":", "\n", "                ", "self", ".", "inputs", ".", "append", "(", "root", "+", "data_lines", "[", "i", "]", "[", "0", ":", "-", "1", "]", ")", "\n", "self", ".", "targets", ".", "append", "(", "label", ")", "# label: [road class, wet/dry, video index]", "\n", "", "", "elif", "self", ".", "split", "==", "'toplogo10'", ":", "\n", "            ", "label", "=", "int", "(", "label_lines", "[", "i", "]", ".", "split", "(", ")", "[", "0", "]", ")", "+", "69", "\n", "if", "label", "-", "1", "in", "self", ".", "te_class", ".", "tolist", "(", ")", ":", "\n", "                ", "self", ".", "inputs", ".", "append", "(", "root", "+", "data_lines", "[", "i", "]", "[", "0", ":", "-", "1", "]", ")", "\n", "self", ".", "targets", ".", "append", "(", "label", ")", "# label: [road class, wet/dry, video index]", "\n", "", "", "elif", "self", ".", "split", "==", "'flickr32'", ":", "\n", "            ", "label", "=", "int", "(", "label_lines", "[", "i", "]", ".", "split", "(", ")", "[", "0", "]", ")", "#+ 37", "\n", "if", "label", "-", "1", "in", "self", ".", "te_class", ".", "tolist", "(", ")", ":", "\n", "                ", "self", ".", "inputs", ".", "append", "(", "root", "+", "data_lines", "[", "i", "]", "[", "0", ":", "-", "1", "]", ")", "\n", "self", ".", "targets", ".", "append", "(", "label", ")", "# label: [road class, wet/dry, video index]", "\n", "\n", "", "", "", "classnamesPath", "=", "root", "+", "exp", "+", "'/'", "+", "self", ".", "split", "+", "'_classnames.txt'", "\n", "f_classnames", "=", "open", "(", "classnamesPath", ",", "'r'", ")", "\n", "data_lines", "=", "f_classnames", ".", "readlines", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "data_lines", ")", ")", ":", "\n", "        ", "self", ".", "class_names", ".", "append", "(", "data_lines", "[", "i", "]", "[", "0", ":", "-", "1", "]", ")", "\n", "\n", "", "assert", "(", "self", ".", "n_classes", "==", "len", "(", "self", ".", "class_names", ")", ")", "\n", "\n", "print", "(", "'%s %s %d classes'", "%", "(", "split", ",", "self", ".", "split", ",", "len", "(", "self", ".", "class_names", ")", ")", ")", "\n", "print", "(", "'Load %s: %s: %d samples'", "%", "(", "split", ",", "self", ".", "split", ",", "len", "(", "self", ".", "targets", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.belga2flickr.belga2flickrLoader.__len__": [[82, 84], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.belga2flickr.belga2flickrLoader.__getitem__": [[85, 112], ["scipy.imread", "numpy.array", "numpy.array", "torch.ones().type", "scipy.imread", "random.random", "numpy.copy", "belga2flickr.belga2flickrLoader.augmentations", "belga2flickr.belga2flickrLoader.transform", "belga2flickr.belga2flickrLoader.transform", "scipy.imread", "scipy.imread", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.transform", "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "    ", "img_path", "=", "self", ".", "inputs", "[", "index", "]", "\n", "gt", "=", "self", ".", "targets", "[", "index", "]", "\n", "gt", "=", "torch", ".", "ones", "(", "1", ")", ".", "type", "(", "torch", ".", "LongTensor", ")", "*", "gt", "\n", "\n", "# Load images and templates. perform augmentations", "\n", "img", "=", "m", ".", "imread", "(", "img_path", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "if", "self", ".", "split", "==", "'belga'", ":", "\n", "        ", "template", "=", "m", ".", "imread", "(", "self", ".", "root", "+", "self", ".", "split", "+", "'/template_ordered/%02d.jpg'", "%", "(", "gt", ")", ")", "\n", "", "elif", "self", ".", "split", "==", "'toplogo10'", ":", "\n", "        ", "template", "=", "m", ".", "imread", "(", "self", ".", "root", "+", "self", ".", "split", "+", "'/template_ordered/%02d.jpg'", "%", "(", "gt", "-", "69", ")", ")", "\n", "", "else", ":", "\n", "        ", "template", "=", "m", ".", "imread", "(", "self", ".", "root", "+", "self", ".", "split", "+", "'/template_ordered/%02d.jpg'", "%", "(", "gt", ")", ")", "\n", "", "template", "=", "np", ".", "array", "(", "template", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "if", "random", ".", "random", "(", ")", "<", "self", ".", "proto_rate", ":", "\n", "        ", "img", "=", "np", ".", "copy", "(", "template", ")", "\n", "", "if", "self", ".", "augmentations", "is", "not", "None", ":", "\n", "        ", "img", ",", "template", "=", "self", ".", "augmentations", "(", "img", ",", "template", ")", "\n", "", "if", "self", ".", "is_transform", ":", "\n", "        ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "template", "=", "self", ".", "transform", "(", "template", ")", "\n", "\n", "", "gt", "=", "gt", "-", "1", "\n", "\n", "return", "img", ",", "gt", ",", "template", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.belga2flickr.belga2flickrLoader.transform": [[113, 128], ["cv2.resize.astype", "cv2.resize.transpose", "torch.from_numpy().float", "cv2.resize", "cv2.resize.astype", "torch.from_numpy"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "img", ")", ":", "\n", "    ", "img", "=", "img", ".", "astype", "(", "np", ".", "float64", ")", "\n", "#img -= self.mean", "\n", "if", "self", ".", "img_size", "is", "not", "None", ":", "\n", "      ", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "self", ".", "img_size", "[", "1", "]", ",", "self", ".", "img_size", "[", "0", "]", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "# Resize scales images from 0 to 255, thus we need", "\n", "# to divide by 255.0", "\n", "\n", "\n", "", "img", "=", "img", ".", "astype", "(", "float", ")", "/", "255.0", "\n", "# NHWC -> NCHW", "\n", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "float", "(", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.belga2flickr.belga2flickrLoader.load_template": [[129, 161], ["scipy.imread", "numpy.array", "target_img.append", "target_template.append", "torch.stack", "torch.stack", "img_paths.append", "img_paths.append", "augmentations", "belga2flickr.belga2flickrLoader.transform", "belga2flickr.belga2flickrLoader.transform", "img_paths.append"], "methods", ["home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.transform", "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.transform"], ["", "def", "load_template", "(", "self", ",", "target", ",", "augmentations", "=", "None", ")", ":", "\n", "\n", "# if augmentation is not specified, use self.augmentations. Unless use input augmentation option.", "\n", "    ", "if", "augmentations", "is", "None", ":", "\n", "        ", "augmentations", "=", "self", ".", "augmentations", "\n", "", "img_paths", "=", "[", "]", "\n", "\n", "for", "id", "in", "target", ":", "\n", "        ", "if", "self", ".", "split", "==", "'belga'", ":", "\n", "            ", "img_paths", ".", "append", "(", "self", ".", "root", "+", "self", ".", "split", "+", "'/template_ordered/%02d.jpg'", "%", "(", "id", "+", "1", ")", ")", "\n", "", "if", "self", ".", "split", "==", "'toplogo10'", ":", "\n", "            ", "img_paths", ".", "append", "(", "self", ".", "root", "+", "self", ".", "split", "+", "'/template_ordered/%02d.jpg'", "%", "(", "id", "+", "1", "-", "69", ")", ")", "\n", "", "elif", "self", ".", "split", "==", "'flickr32'", ":", "\n", "            ", "img_paths", ".", "append", "(", "self", ".", "root", "+", "self", ".", "split", "+", "'/template_ordered/%02d.jpg'", "%", "(", "id", "+", "1", ")", ")", "\n", "\n", "\n", "", "", "target_img", "=", "[", "]", "\n", "target_template", "=", "[", "]", "\n", "for", "img_path", "in", "img_paths", ":", "\n", "        ", "img", "=", "m", ".", "imread", "(", "img_path", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "if", "augmentations", "is", "not", "None", ":", "\n", "            ", "img", ",", "template", "=", "augmentations", "(", "img", ",", "img", ")", "\n", "", "if", "self", ".", "transform", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "template", "=", "self", ".", "transform", "(", "template", ")", "\n", "\n", "", "target_img", ".", "append", "(", "img", ")", "\n", "target_template", ".", "append", "(", "template", ")", "\n", "\n", "", "return", "torch", ".", "stack", "(", "target_img", ",", "dim", "=", "0", ")", ",", "torch", ".", "stack", "(", "target_template", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2toplogo.gtsrb2toplogoLoader.__init__": [[12, 76], ["torch.utils.data.Dataset.__init__", "numpy.array", "open", "open", "open.readlines", "open.readlines", "range", "open", "open.readlines", "range", "print", "print", "len", "len", "gtsrb2toplogo.gtsrb2toplogoLoader.class_names.append", "len", "numpy.array", "torch.LongTensor", "torch.LongTensor", "int", "range", "range", "gtsrb2toplogo.gtsrb2toplogoLoader.tr_class.tolist", "gtsrb2toplogo.gtsrb2toplogoLoader.inputs.append", "gtsrb2toplogo.gtsrb2toplogoLoader.targets.append", "int", "len", "len", "label_lines[].split", "gtsrb2toplogo.gtsrb2toplogoLoader.te_class.tolist", "gtsrb2toplogo.gtsrb2toplogoLoader.inputs.append", "gtsrb2toplogo.gtsrb2toplogoLoader.targets.append", "label_lines[].split"], "methods", ["home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.__init__"], ["  ", "def", "__init__", "(", "self", ",", "root", ",", "exp", ",", "split", "=", "'train'", ",", "is_transform", "=", "False", ",", "img_size", "=", "None", ",", "augmentations", "=", "None", ",", "prototype_sampling_rate", "=", "0.005", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "split", "==", "'train'", ":", "\n", "        ", "self", ".", "proto_rate", "=", "prototype_sampling_rate", "\n", "", "else", ":", "\n", "        ", "self", ".", "proto_rate", "=", "0.0", "\n", "", "self", ".", "inputs", "=", "[", "]", "\n", "self", ".", "targets", "=", "[", "]", "\n", "self", ".", "class_names", "=", "[", "]", "\n", "\n", "if", "split", "==", "'train'", ":", "\n", "        ", "self", ".", "split", "=", "'GTSRB'", "\n", "self", ".", "n_classes", "=", "43", "# test on TT100K (36 classes)", "\n", "#self.tr_class = torch.LongTensor([16, 18, 34, 39]) - 1", "\n", "self", ".", "tr_class", "=", "np", ".", "array", "(", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "16", ",", "17", ",", "18", ",", "19", ",", "20", ",", "21", ",", "22", ",", "23", ",", "24", ",", "25", ",", "26", ",", "27", ",", "28", ",", "29", ",", "30", ",", "31", ",", "32", ",", "33", ",", "34", ",", "35", ",", "36", ",", "37", ",", "38", ",", "39", ",", "40", ",", "41", ",", "42", ",", "43", "]", ")", "-", "1", "\n", "\n", "", "elif", "split", "==", "'test'", ":", "\n", "        ", "self", ".", "split", "=", "'toplogo10'", "\n", "self", ".", "n_classes", "=", "11", "\n", "self", ".", "tr_class", "=", "torch", ".", "LongTensor", "(", "range", "(", "0", ",", "11", ")", ")", "\n", "self", ".", "te_class", "=", "torch", ".", "LongTensor", "(", "range", "(", "0", ",", "11", ")", ")", "\n", "\n", "", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "is_transform", "=", "is_transform", "\n", "self", ".", "augmentations", "=", "augmentations", "\n", "self", ".", "mean", "=", "np", ".", "array", "(", "[", "125.00", ",", "125.00", ",", "125.00", "]", ")", "# average intensity", "\n", "\n", "self", ".", "root", "=", "root", "\n", "if", "self", ".", "split", "==", "'GTSRB'", ":", "\n", "        ", "self", ".", "dataPath", "=", "root", "+", "exp", "+", "'/'", "+", "self", ".", "split", "+", "'_impaths_all.txt'", "\n", "self", ".", "labelPath", "=", "root", "+", "exp", "+", "'/'", "+", "self", ".", "split", "+", "'_imclasses_all.txt'", "\n", "", "else", ":", "\n", "        ", "self", ".", "dataPath", "=", "root", "+", "exp", "+", "'/'", "+", "self", ".", "split", "+", "'_impaths.txt'", "\n", "self", ".", "labelPath", "=", "root", "+", "exp", "+", "'/'", "+", "self", ".", "split", "+", "'_imclasses.txt'", "\n", "\n", "", "f_data", "=", "open", "(", "self", ".", "dataPath", ",", "'r'", ")", "\n", "f_label", "=", "open", "(", "self", ".", "labelPath", ",", "'r'", ")", "\n", "data_lines", "=", "f_data", ".", "readlines", "(", ")", "\n", "label_lines", "=", "f_label", ".", "readlines", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "data_lines", ")", ")", ":", "\n", "        ", "if", "self", ".", "split", "==", "'GTSRB'", ":", "\n", "            ", "label", "=", "int", "(", "label_lines", "[", "i", "]", ".", "split", "(", ")", "[", "0", "]", ")", "\n", "if", "label", "-", "1", "in", "self", ".", "tr_class", ".", "tolist", "(", ")", ":", "\n", "                ", "self", ".", "inputs", ".", "append", "(", "root", "+", "data_lines", "[", "i", "]", "[", "0", ":", "-", "1", "]", ")", "\n", "self", ".", "targets", ".", "append", "(", "label", ")", "\n", "", "", "elif", "self", ".", "split", "==", "'toplogo10'", ":", "\n", "            ", "label", "=", "int", "(", "label_lines", "[", "i", "]", ".", "split", "(", ")", "[", "0", "]", ")", "\n", "if", "label", "-", "1", "in", "self", ".", "te_class", ".", "tolist", "(", ")", ":", "\n", "                ", "self", ".", "inputs", ".", "append", "(", "root", "+", "data_lines", "[", "i", "]", "[", "0", ":", "-", "1", "]", ")", "\n", "self", ".", "targets", ".", "append", "(", "label", ")", "\n", "\n", "\n", "", "", "", "classnamesPath", "=", "root", "+", "exp", "+", "'/'", "+", "self", ".", "split", "+", "'_classnames.txt'", "\n", "f_classnames", "=", "open", "(", "classnamesPath", ",", "'r'", ")", "\n", "data_lines", "=", "f_classnames", ".", "readlines", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "data_lines", ")", ")", ":", "\n", "        ", "self", ".", "class_names", ".", "append", "(", "data_lines", "[", "i", "]", "[", "0", ":", "-", "1", "]", ")", "\n", "\n", "", "assert", "(", "self", ".", "n_classes", "==", "len", "(", "self", ".", "class_names", ")", ")", "\n", "\n", "print", "(", "'%s %s %d classes'", "%", "(", "split", ",", "self", ".", "split", ",", "len", "(", "self", ".", "class_names", ")", ")", ")", "\n", "print", "(", "'Load %s: %s: %d samples'", "%", "(", "split", ",", "self", ".", "split", ",", "len", "(", "self", ".", "targets", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2toplogo.gtsrb2toplogoLoader.__len__": [[77, 79], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2toplogo.gtsrb2toplogoLoader.__getitem__": [[80, 105], ["scipy.imread", "numpy.array", "scipy.imread", "numpy.array", "torch.ones().type", "random.random", "numpy.copy", "gtsrb2toplogo.gtsrb2toplogoLoader.augmentations", "gtsrb2toplogo.gtsrb2toplogoLoader.transform", "gtsrb2toplogo.gtsrb2toplogoLoader.transform", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.transform", "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "    ", "img_path", "=", "self", ".", "inputs", "[", "index", "]", "\n", "gt", "=", "self", ".", "targets", "[", "index", "]", "\n", "gt", "=", "torch", ".", "ones", "(", "1", ")", ".", "type", "(", "torch", ".", "LongTensor", ")", "*", "gt", "\n", "\n", "\n", "\n", "# Load images and templates. perform augmentations", "\n", "img", "=", "m", ".", "imread", "(", "img_path", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "template", "=", "m", ".", "imread", "(", "self", ".", "root", "+", "self", ".", "split", "+", "'/template_ordered/%02d.jpg'", "%", "(", "gt", ")", ")", "\n", "template", "=", "np", ".", "array", "(", "template", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "if", "random", ".", "random", "(", ")", "<", "self", ".", "proto_rate", ":", "\n", "        ", "img", "=", "np", ".", "copy", "(", "template", ")", "\n", "", "if", "self", ".", "augmentations", "is", "not", "None", ":", "\n", "        ", "img", ",", "template", "=", "self", ".", "augmentations", "(", "img", ",", "template", ")", "\n", "", "if", "self", ".", "is_transform", ":", "\n", "        ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "template", "=", "self", ".", "transform", "(", "template", ")", "\n", "\n", "", "gt", "=", "gt", "-", "1", "\n", "\n", "return", "img", ",", "gt", ",", "template", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2toplogo.gtsrb2toplogoLoader.transform": [[106, 121], ["cv2.resize.astype", "cv2.resize.transpose", "torch.from_numpy().float", "cv2.resize", "cv2.resize.astype", "torch.from_numpy"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "img", ")", ":", "\n", "    ", "img", "=", "img", ".", "astype", "(", "np", ".", "float64", ")", "\n", "#img -= self.mean", "\n", "if", "self", ".", "img_size", "is", "not", "None", ":", "\n", "      ", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "self", ".", "img_size", "[", "1", "]", ",", "self", ".", "img_size", "[", "0", "]", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "# Resize scales images from 0 to 255, thus we need", "\n", "# to divide by 255.0", "\n", "\n", "\n", "", "img", "=", "img", ".", "astype", "(", "float", ")", "/", "255.0", "\n", "# NHWC -> NCHW", "\n", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "float", "(", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2toplogo.gtsrb2toplogoLoader.load_template": [[122, 149], ["img_paths.append", "scipy.imread", "numpy.array", "target_img.append", "target_template.append", "torch.stack", "torch.stack", "augmentations", "gtsrb2toplogo.gtsrb2toplogoLoader.transform", "gtsrb2toplogo.gtsrb2toplogoLoader.transform"], "methods", ["home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.transform", "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.transform"], ["", "def", "load_template", "(", "self", ",", "target", ",", "augmentations", "=", "None", ")", ":", "\n", "\n", "# if augmentation is not specified, use self.augmentations. Unless use input augmentation option.", "\n", "    ", "if", "augmentations", "is", "None", ":", "\n", "        ", "augmentations", "=", "self", ".", "augmentations", "\n", "", "img_paths", "=", "[", "]", "\n", "\n", "for", "id", "in", "target", ":", "\n", "        ", "img_paths", ".", "append", "(", "self", ".", "root", "+", "self", ".", "split", "+", "'/template_ordered/%02d.jpg'", "%", "(", "id", "+", "1", ")", ")", "\n", "\n", "\n", "", "target_img", "=", "[", "]", "\n", "target_template", "=", "[", "]", "\n", "for", "img_path", "in", "img_paths", ":", "\n", "        ", "img", "=", "m", ".", "imread", "(", "img_path", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "if", "augmentations", "is", "not", "None", ":", "\n", "            ", "img", ",", "template", "=", "augmentations", "(", "img", ",", "img", ")", "\n", "", "if", "self", ".", "transform", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "template", "=", "self", ".", "transform", "(", "template", ")", "\n", "\n", "", "target_img", ".", "append", "(", "img", ")", "\n", "target_template", ".", "append", "(", "template", ")", "\n", "\n", "", "return", "torch", ".", "stack", "(", "target_img", ",", "dim", "=", "0", ")", ",", "torch", ".", "stack", "(", "target_template", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2flickr.gtsrb2flickrLoader.__init__": [[12, 82], ["torch.utils.data.Dataset.__init__", "numpy.array", "open", "open", "open.readlines", "open.readlines", "range", "open", "open.readlines", "range", "print", "print", "len", "len", "gtsrb2flickr.gtsrb2flickrLoader.class_names.append", "len", "numpy.array", "torch.LongTensor", "torch.LongTensor", "int", "gtsrb2flickr.gtsrb2flickrLoader.tr_class.tolist", "gtsrb2flickr.gtsrb2flickrLoader.inputs.append", "gtsrb2flickr.gtsrb2flickrLoader.targets.append", "int", "len", "len", "label_lines[].split", "gtsrb2flickr.gtsrb2flickrLoader.te_class.tolist", "gtsrb2flickr.gtsrb2flickrLoader.inputs.append", "gtsrb2flickr.gtsrb2flickrLoader.targets.append", "label_lines[].split"], "methods", ["home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.__init__"], ["  ", "def", "__init__", "(", "self", ",", "root", ",", "exp", ",", "split", "=", "'train'", ",", "is_transform", "=", "False", ",", "img_size", "=", "None", ",", "augmentations", "=", "None", ",", "prototype_sampling_rate", "=", "0.005", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "split", "==", "'train'", ":", "\n", "        ", "self", ".", "proto_rate", "=", "prototype_sampling_rate", "\n", "", "else", ":", "\n", "        ", "self", ".", "proto_rate", "=", "0.0", "\n", "", "self", ".", "inputs", "=", "[", "]", "\n", "self", ".", "targets", "=", "[", "]", "\n", "self", ".", "class_names", "=", "[", "]", "\n", "\n", "if", "split", "==", "'train'", ":", "\n", "        ", "self", ".", "split", "=", "'GTSRB'", "\n", "self", ".", "n_classes", "=", "43", "# test on TT100K (36 classes)", "\n", "#self.tr_class = torch.LongTensor([16, 18, 34, 39]) - 1", "\n", "self", ".", "tr_class", "=", "np", ".", "array", "(", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "16", ",", "17", ",", "18", ",", "19", ",", "20", ",", "21", ",", "22", ",", "23", ",", "24", ",", "25", ",", "26", ",", "27", ",", "28", ",", "29", ",", "30", ",", "31", ",", "32", ",", "33", ",", "34", ",", "35", ",", "36", ",", "37", ",", "38", ",", "39", ",", "40", ",", "41", ",", "42", ",", "43", "]", ")", "-", "1", "\n", "\n", "#elif split == 'val':", "\n", "#    self.split = 'toplogo10'", "\n", "#    self.n_classes = 11", "\n", "#    self.tr_class = torch.LongTensor(range(0,11)) + 75", "\n", "#    self.te_class = torch.LongTensor(range(0,11)) + 75", "\n", "", "elif", "split", "==", "'test'", ":", "\n", "        ", "self", ".", "split", "=", "'flickr32'", "\n", "self", ".", "n_classes", "=", "32", "\n", "self", ".", "tr_class", "=", "torch", ".", "LongTensor", "(", "[", "7", ",", "13", ",", "25", ",", "28", "]", ")", "# belga classes", "\n", "self", ".", "te_class", "=", "torch", ".", "LongTensor", "(", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "14", ",", "15", ",", "16", ",", "17", ",", "18", ",", "19", ",", "20", ",", "21", ",", "22", ",", "23", ",", "24", ",", "26", ",", "27", ",", "29", ",", "30", ",", "31", "]", ")", "# belga classes", "\n", "#self.te_class = torch.LongTensor([0]) + 37", "\n", "\n", "", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "is_transform", "=", "is_transform", "\n", "self", ".", "augmentations", "=", "augmentations", "\n", "self", ".", "mean", "=", "np", ".", "array", "(", "[", "125.00", ",", "125.00", ",", "125.00", "]", ")", "# average intensity", "\n", "\n", "self", ".", "root", "=", "root", "\n", "if", "self", ".", "split", "==", "'GTSRB'", ":", "\n", "        ", "self", ".", "dataPath", "=", "root", "+", "exp", "+", "'/'", "+", "self", ".", "split", "+", "'_impaths_all.txt'", "\n", "self", ".", "labelPath", "=", "root", "+", "exp", "+", "'/'", "+", "self", ".", "split", "+", "'_imclasses_all.txt'", "\n", "", "else", ":", "\n", "        ", "self", ".", "dataPath", "=", "root", "+", "exp", "+", "'/'", "+", "self", ".", "split", "+", "'_impaths.txt'", "\n", "self", ".", "labelPath", "=", "root", "+", "exp", "+", "'/'", "+", "self", ".", "split", "+", "'_imclasses.txt'", "\n", "\n", "", "f_data", "=", "open", "(", "self", ".", "dataPath", ",", "'r'", ")", "\n", "f_label", "=", "open", "(", "self", ".", "labelPath", ",", "'r'", ")", "\n", "data_lines", "=", "f_data", ".", "readlines", "(", ")", "\n", "label_lines", "=", "f_label", ".", "readlines", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "data_lines", ")", ")", ":", "\n", "        ", "if", "self", ".", "split", "==", "'GTSRB'", ":", "\n", "            ", "label", "=", "int", "(", "label_lines", "[", "i", "]", ".", "split", "(", ")", "[", "0", "]", ")", "\n", "if", "label", "-", "1", "in", "self", ".", "tr_class", ".", "tolist", "(", ")", ":", "\n", "                ", "self", ".", "inputs", ".", "append", "(", "root", "+", "data_lines", "[", "i", "]", "[", "0", ":", "-", "1", "]", ")", "\n", "self", ".", "targets", ".", "append", "(", "label", ")", "\n", "", "", "elif", "self", ".", "split", "==", "'flickr32'", ":", "\n", "            ", "label", "=", "int", "(", "label_lines", "[", "i", "]", ".", "split", "(", ")", "[", "0", "]", ")", "\n", "if", "label", "-", "1", "in", "self", ".", "te_class", ".", "tolist", "(", ")", ":", "\n", "                ", "self", ".", "inputs", ".", "append", "(", "root", "+", "data_lines", "[", "i", "]", "[", "0", ":", "-", "1", "]", ")", "\n", "self", ".", "targets", ".", "append", "(", "label", ")", "\n", "\n", "\n", "", "", "", "classnamesPath", "=", "root", "+", "exp", "+", "'/'", "+", "self", ".", "split", "+", "'_classnames.txt'", "\n", "f_classnames", "=", "open", "(", "classnamesPath", ",", "'r'", ")", "\n", "data_lines", "=", "f_classnames", ".", "readlines", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "data_lines", ")", ")", ":", "\n", "        ", "self", ".", "class_names", ".", "append", "(", "data_lines", "[", "i", "]", "[", "0", ":", "-", "1", "]", ")", "\n", "\n", "", "assert", "(", "self", ".", "n_classes", "==", "len", "(", "self", ".", "class_names", ")", ")", "\n", "\n", "print", "(", "'%s %s %d classes'", "%", "(", "split", ",", "self", ".", "split", ",", "len", "(", "self", ".", "class_names", ")", ")", ")", "\n", "print", "(", "'Load %s: %s: %d samples'", "%", "(", "split", ",", "self", ".", "split", ",", "len", "(", "self", ".", "targets", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2flickr.gtsrb2flickrLoader.__len__": [[83, 85], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2flickr.gtsrb2flickrLoader.__getitem__": [[86, 111], ["scipy.imread", "numpy.array", "scipy.imread", "numpy.array", "torch.ones().type", "random.random", "numpy.copy", "gtsrb2flickr.gtsrb2flickrLoader.augmentations", "gtsrb2flickr.gtsrb2flickrLoader.transform", "gtsrb2flickr.gtsrb2flickrLoader.transform", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.transform", "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "    ", "img_path", "=", "self", ".", "inputs", "[", "index", "]", "\n", "gt", "=", "self", ".", "targets", "[", "index", "]", "\n", "gt", "=", "torch", ".", "ones", "(", "1", ")", ".", "type", "(", "torch", ".", "LongTensor", ")", "*", "gt", "\n", "\n", "\n", "\n", "# Load images and templates. perform augmentations", "\n", "img", "=", "m", ".", "imread", "(", "img_path", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "template", "=", "m", ".", "imread", "(", "self", ".", "root", "+", "self", ".", "split", "+", "'/template_ordered/%02d.jpg'", "%", "(", "gt", ")", ")", "\n", "template", "=", "np", ".", "array", "(", "template", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "if", "random", ".", "random", "(", ")", "<", "self", ".", "proto_rate", ":", "\n", "        ", "img", "=", "np", ".", "copy", "(", "template", ")", "\n", "", "if", "self", ".", "augmentations", "is", "not", "None", ":", "\n", "        ", "img", ",", "template", "=", "self", ".", "augmentations", "(", "img", ",", "template", ")", "\n", "", "if", "self", ".", "is_transform", ":", "\n", "        ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "template", "=", "self", ".", "transform", "(", "template", ")", "\n", "\n", "", "gt", "=", "gt", "-", "1", "\n", "\n", "return", "img", ",", "gt", ",", "template", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2flickr.gtsrb2flickrLoader.transform": [[112, 127], ["cv2.resize.astype", "cv2.resize.transpose", "torch.from_numpy().float", "cv2.resize", "cv2.resize.astype", "torch.from_numpy"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "img", ")", ":", "\n", "    ", "img", "=", "img", ".", "astype", "(", "np", ".", "float64", ")", "\n", "#img -= self.mean", "\n", "if", "self", ".", "img_size", "is", "not", "None", ":", "\n", "      ", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "self", ".", "img_size", "[", "1", "]", ",", "self", ".", "img_size", "[", "0", "]", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "# Resize scales images from 0 to 255, thus we need", "\n", "# to divide by 255.0", "\n", "\n", "\n", "", "img", "=", "img", ".", "astype", "(", "float", ")", "/", "255.0", "\n", "# NHWC -> NCHW", "\n", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "float", "(", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2flickr.gtsrb2flickrLoader.load_template": [[128, 155], ["img_paths.append", "scipy.imread", "numpy.array", "target_img.append", "target_template.append", "torch.stack", "torch.stack", "augmentations", "gtsrb2flickr.gtsrb2flickrLoader.transform", "gtsrb2flickr.gtsrb2flickrLoader.transform"], "methods", ["home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.transform", "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.transform"], ["", "def", "load_template", "(", "self", ",", "target", ",", "augmentations", "=", "None", ")", ":", "\n", "\n", "# if augmentation is not specified, use self.augmentations. Unless use input augmentation option.", "\n", "    ", "if", "augmentations", "is", "None", ":", "\n", "        ", "augmentations", "=", "self", ".", "augmentations", "\n", "", "img_paths", "=", "[", "]", "\n", "\n", "for", "id", "in", "target", ":", "\n", "        ", "img_paths", ".", "append", "(", "self", ".", "root", "+", "self", ".", "split", "+", "'/template_ordered/%02d.jpg'", "%", "(", "id", "+", "1", ")", ")", "\n", "\n", "\n", "", "target_img", "=", "[", "]", "\n", "target_template", "=", "[", "]", "\n", "for", "img_path", "in", "img_paths", ":", "\n", "        ", "img", "=", "m", ".", "imread", "(", "img_path", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "if", "augmentations", "is", "not", "None", ":", "\n", "            ", "img", ",", "template", "=", "augmentations", "(", "img", ",", "img", ")", "\n", "", "if", "self", ".", "transform", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "template", "=", "self", ".", "transform", "(", "template", ")", "\n", "\n", "", "target_img", ".", "append", "(", "img", ")", "\n", "target_template", ".", "append", "(", "template", ")", "\n", "\n", "", "return", "torch", ".", "stack", "(", "target_img", ",", "dim", "=", "0", ")", ",", "torch", ".", "stack", "(", "target_template", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2TT100K.gtsrb2TT100KLoader.__init__": [[12, 73], ["torch.utils.data.Dataset.__init__", "numpy.array", "open", "open", "open.readlines", "open.readlines", "range", "open", "open.readlines", "range", "print", "print", "len", "len", "gtsrb2TT100K.gtsrb2TT100KLoader.class_names.append", "len", "numpy.array", "int", "numpy.array", "numpy.array", "gtsrb2TT100K.gtsrb2TT100KLoader.tr_class.tolist", "gtsrb2TT100K.gtsrb2TT100KLoader.inputs.append", "gtsrb2TT100K.gtsrb2TT100KLoader.targets.append", "int", "len", "len", "label_lines[].split", "gtsrb2TT100K.gtsrb2TT100KLoader.te_class.tolist", "gtsrb2TT100K.gtsrb2TT100KLoader.inputs.append", "gtsrb2TT100K.gtsrb2TT100KLoader.targets.append", "label_lines[].split"], "methods", ["home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.__init__"], ["  ", "def", "__init__", "(", "self", ",", "root", ",", "exp", ",", "split", "=", "'train'", ",", "is_transform", "=", "False", ",", "img_size", "=", "None", ",", "augmentations", "=", "None", ",", "prototype_sampling_rate", "=", "0.001", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "split", "==", "'train'", ":", "\n", "        ", "self", ".", "proto_rate", "=", "prototype_sampling_rate", "\n", "", "else", ":", "\n", "        ", "self", ".", "proto_rate", "=", "0.0", "\n", "\n", "", "self", ".", "inputs", "=", "[", "]", "\n", "self", ".", "targets", "=", "[", "]", "\n", "self", ".", "class_names", "=", "[", "]", "\n", "\n", "if", "split", "==", "'train'", ":", "\n", "        ", "self", ".", "split", "=", "'GTSRB'", "\n", "self", ".", "n_classes", "=", "43", "# test on TT100K (36 classes)", "\n", "#self.tr_class = torch.LongTensor([16, 18, 34, 39]) - 1", "\n", "self", ".", "tr_class", "=", "np", ".", "array", "(", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "16", ",", "17", ",", "18", ",", "19", ",", "20", ",", "21", ",", "22", ",", "23", ",", "24", ",", "25", ",", "26", ",", "27", ",", "28", ",", "29", ",", "30", ",", "31", ",", "32", ",", "33", ",", "34", ",", "35", ",", "36", ",", "37", ",", "38", ",", "39", ",", "40", ",", "41", ",", "42", ",", "43", "]", ")", "-", "1", "\n", "", "elif", "split", "==", "'test'", ":", "\n", "        ", "self", ".", "split", "=", "'TT100K'", "\n", "self", ".", "n_classes", "=", "36", "# test on TT100K (36 classes)", "\n", "self", ".", "tr_class", "=", "np", ".", "array", "(", "[", "2", ",", "3", ",", "28", ",", "32", "]", ")", "-", "1", "\n", "self", ".", "te_class", "=", "np", ".", "array", "(", "[", "1", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "16", ",", "17", ",", "18", ",", "19", ",", "20", ",", "21", ",", "22", ",", "23", ",", "24", ",", "25", ",", "26", ",", "27", ",", "29", ",", "30", ",", "31", ",", "33", ",", "34", ",", "35", ",", "36", "]", ")", "-", "1", "\n", "#self.te_class = np.array([4]) + 43 - 1", "\n", "\n", "", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "is_transform", "=", "is_transform", "\n", "self", ".", "augmentations", "=", "augmentations", "\n", "self", ".", "mean", "=", "np", ".", "array", "(", "[", "125.00", ",", "125.00", ",", "125.00", "]", ")", "# average intensity", "\n", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "dataPath", "=", "root", "+", "exp", "+", "'/'", "+", "self", ".", "split", "+", "'_impaths_all.txt'", "\n", "self", ".", "labelPath", "=", "root", "+", "exp", "+", "'/'", "+", "self", ".", "split", "+", "'_imclasses_all.txt'", "\n", "\n", "f_data", "=", "open", "(", "self", ".", "dataPath", ",", "'r'", ")", "\n", "f_label", "=", "open", "(", "self", ".", "labelPath", ",", "'r'", ")", "\n", "data_lines", "=", "f_data", ".", "readlines", "(", ")", "\n", "label_lines", "=", "f_label", ".", "readlines", "(", ")", "\n", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "data_lines", ")", ")", ":", "\n", "        ", "if", "self", ".", "split", "==", "'GTSRB'", ":", "\n", "            ", "label", "=", "int", "(", "label_lines", "[", "i", "]", ".", "split", "(", ")", "[", "0", "]", ")", "\n", "if", "label", "-", "1", "in", "self", ".", "tr_class", ".", "tolist", "(", ")", ":", "\n", "                ", "self", ".", "inputs", ".", "append", "(", "root", "+", "data_lines", "[", "i", "]", "[", "0", ":", "-", "1", "]", ")", "\n", "self", ".", "targets", ".", "append", "(", "label", ")", "# label: [road class, wet/dry, video index]", "\n", "", "", "elif", "self", ".", "split", "==", "'TT100K'", ":", "\n", "            ", "label", "=", "int", "(", "label_lines", "[", "i", "]", ".", "split", "(", ")", "[", "0", "]", ")", "\n", "if", "label", "-", "1", "in", "self", ".", "te_class", ".", "tolist", "(", ")", ":", "\n", "                ", "self", ".", "inputs", ".", "append", "(", "root", "+", "data_lines", "[", "i", "]", "[", "0", ":", "-", "1", "]", ")", "\n", "self", ".", "targets", ".", "append", "(", "label", ")", "# label: [road class, wet/dry, video index]", "\n", "\n", "", "", "", "classnamesPath", "=", "root", "+", "exp", "+", "'/'", "+", "self", ".", "split", "+", "'_classnames.txt'", "\n", "f_classnames", "=", "open", "(", "classnamesPath", ",", "'r'", ")", "\n", "data_lines", "=", "f_classnames", ".", "readlines", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "data_lines", ")", ")", ":", "\n", "        ", "self", ".", "class_names", ".", "append", "(", "data_lines", "[", "i", "]", "[", "0", ":", "-", "1", "]", ")", "\n", "\n", "", "assert", "(", "self", ".", "n_classes", "==", "len", "(", "self", ".", "class_names", ")", ")", "\n", "\n", "print", "(", "'%s %d classes'", "%", "(", "self", ".", "split", ",", "len", "(", "self", ".", "class_names", ")", ")", ")", "\n", "print", "(", "'Load %s: %d samples'", "%", "(", "self", ".", "split", ",", "len", "(", "self", ".", "targets", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2TT100K.gtsrb2TT100KLoader.__len__": [[75, 77], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2TT100K.gtsrb2TT100KLoader.__getitem__": [[79, 106], ["scipy.imread", "numpy.array", "numpy.array", "torch.ones().type", "scipy.imread", "scipy.imread", "random.random", "numpy.copy", "gtsrb2TT100K.gtsrb2TT100KLoader.augmentations", "gtsrb2TT100K.gtsrb2TT100KLoader.transform", "gtsrb2TT100K.gtsrb2TT100KLoader.transform", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.transform", "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "    ", "img_path", "=", "self", ".", "inputs", "[", "index", "]", "\n", "gt", "=", "self", ".", "targets", "[", "index", "]", "\n", "gt", "=", "torch", ".", "ones", "(", "1", ")", ".", "type", "(", "torch", ".", "LongTensor", ")", "*", "gt", "\n", "\n", "# Load images and templates. perform augmentations", "\n", "img", "=", "m", ".", "imread", "(", "img_path", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "if", "self", ".", "split", "==", "'TT100K'", ":", "\n", "        ", "template", "=", "m", ".", "imread", "(", "self", ".", "root", "+", "self", ".", "split", "+", "'/template_ordered/%02d.jpg'", "%", "(", "gt", ")", ")", "\n", "", "else", ":", "\n", "        ", "template", "=", "m", ".", "imread", "(", "self", ".", "root", "+", "self", ".", "split", "+", "'/template_ordered/%02d.jpg'", "%", "(", "gt", ")", ")", "\n", "", "template", "=", "np", ".", "array", "(", "template", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "if", "random", ".", "random", "(", ")", "<", "self", ".", "proto_rate", ":", "\n", "        ", "img", "=", "np", ".", "copy", "(", "template", ")", "\n", "\n", "", "if", "self", ".", "augmentations", "is", "not", "None", ":", "\n", "        ", "img", ",", "template", "=", "self", ".", "augmentations", "(", "img", ",", "template", ")", "\n", "\n", "", "if", "self", ".", "is_transform", ":", "\n", "        ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "template", "=", "self", ".", "transform", "(", "template", ")", "\n", "\n", "", "gt", "=", "gt", "-", "1", "\n", "\n", "return", "img", ",", "gt", ",", "template", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2TT100K.gtsrb2TT100KLoader.transform": [[107, 122], ["cv2.resize.astype", "cv2.resize.transpose", "torch.from_numpy().float", "cv2.resize", "cv2.resize.astype", "torch.from_numpy"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "img", ")", ":", "\n", "    ", "img", "=", "img", ".", "astype", "(", "np", ".", "float64", ")", "\n", "#img -= self.mean", "\n", "if", "self", ".", "img_size", "is", "not", "None", ":", "\n", "      ", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "self", ".", "img_size", "[", "1", "]", ",", "self", ".", "img_size", "[", "0", "]", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "# Resize scales images from 0 to 255, thus we need", "\n", "# to divide by 255.0", "\n", "\n", "\n", "", "img", "=", "img", ".", "astype", "(", "float", ")", "/", "255.0", "\n", "# NHWC -> NCHW", "\n", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "float", "(", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2TT100K.gtsrb2TT100KLoader.load_template": [[124, 149], ["img_paths.append", "scipy.imread", "numpy.array", "target_img.append", "target_template.append", "torch.stack", "torch.stack", "augmentations", "gtsrb2TT100K.gtsrb2TT100KLoader.transform", "gtsrb2TT100K.gtsrb2TT100KLoader.transform"], "methods", ["home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.transform", "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.transform"], ["", "def", "load_template", "(", "self", ",", "target", ",", "augmentations", "=", "None", ")", ":", "\n", "# if augmentation is not specified, use self.augmentations. Unless use input augmentation option.", "\n", "    ", "if", "augmentations", "is", "None", ":", "\n", "        ", "augmentations", "=", "self", ".", "augmentations", "\n", "", "img_paths", "=", "[", "]", "\n", "\n", "for", "id", "in", "target", ":", "\n", "        ", "img_paths", ".", "append", "(", "self", ".", "root", "+", "self", ".", "split", "+", "'/template_ordered/%02d.jpg'", "%", "(", "id", "+", "1", ")", ")", "\n", "\n", "", "target_img", "=", "[", "]", "\n", "target_template", "=", "[", "]", "\n", "for", "img_path", "in", "img_paths", ":", "\n", "        ", "img", "=", "m", ".", "imread", "(", "img_path", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "if", "augmentations", "is", "not", "None", ":", "\n", "            ", "img", ",", "template", "=", "augmentations", "(", "img", ",", "img", ")", "\n", "", "if", "self", ".", "transform", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "template", "=", "self", ".", "transform", "(", "template", ")", "\n", "\n", "", "target_img", ".", "append", "(", "img", ")", "\n", "target_template", ".", "append", "(", "template", ")", "\n", "\n", "", "return", "torch", ".", "stack", "(", "target_img", ",", "dim", "=", "0", ")", ",", "torch", ".", "stack", "(", "target_template", ",", "dim", "=", "0", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb.gtsrbLoader.__init__": [[10, 55], ["torch.utils.data.Dataset.__init__", "numpy.array", "torch.LongTensor", "torch.LongTensor", "open", "open", "open.readlines", "open.readlines", "range", "open", "open.readlines", "range", "print", "print", "len", "gtsrb.gtsrbLoader.inputs.append", "gtsrb.gtsrbLoader.targets.append", "len", "gtsrb.gtsrbLoader.class_names.append", "len", "int", "len", "len", "label_lines[].split"], "methods", ["home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.__init__"], ["  ", "def", "__init__", "(", "self", ",", "root", ",", "exp", ",", "split", "=", "'train'", ",", "is_transform", "=", "False", ",", "img_size", "=", "None", ",", "augmentations", "=", "None", ",", "prototype_sampling_rate", "=", "0.005", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "split", "==", "'train'", ":", "\n", "        ", "self", ".", "proto_rate", "=", "prototype_sampling_rate", "\n", "", "else", ":", "\n", "        ", "self", ".", "proto_rate", "=", "0.0", "\n", "\n", "", "self", ".", "inputs", "=", "[", "]", "\n", "self", ".", "targets", "=", "[", "]", "\n", "self", ".", "class_names", "=", "[", "]", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "is_transform", "=", "is_transform", "\n", "self", ".", "augmentations", "=", "augmentations", "\n", "self", ".", "mean", "=", "np", ".", "array", "(", "[", "125.00", ",", "125.00", ",", "125.00", "]", ")", "# average intensity", "\n", "\n", "self", ".", "root", "=", "root", "+", "'GTSRB/'", "\n", "exp", "=", "exp", "+", "'/exp_gtsrb/'", "\n", "self", ".", "dataPath", "=", "root", "+", "exp", "+", "self", ".", "split", "+", "'_impaths.txt'", "\n", "self", ".", "labelPath", "=", "root", "+", "exp", "+", "self", ".", "split", "+", "'_imclasses.txt'", "\n", "\n", "self", ".", "tr_class", "=", "torch", ".", "LongTensor", "(", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "16", ",", "17", ",", "18", ",", "19", ",", "20", ",", "21", ",", "22", ",", "23", ",", "24", ",", "25", ",", "26", ",", "27", ",", "28", ",", "29", ",", "30", ",", "31", ",", "32", ",", "33", ",", "34", ",", "35", ",", "36", ",", "37", ",", "38", ",", "39", ",", "40", ",", "41", ",", "42", "]", ")", "\n", "self", ".", "te_class", "=", "torch", ".", "LongTensor", "(", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "16", ",", "17", ",", "18", ",", "19", ",", "20", ",", "21", ",", "22", ",", "23", ",", "24", ",", "25", ",", "26", ",", "27", ",", "28", ",", "29", ",", "30", ",", "31", ",", "32", ",", "33", ",", "34", ",", "35", ",", "36", ",", "37", ",", "38", ",", "39", ",", "40", ",", "41", ",", "42", "]", ")", "\n", "\n", "f_data", "=", "open", "(", "self", ".", "dataPath", ",", "'r'", ")", "\n", "f_label", "=", "open", "(", "self", ".", "labelPath", ",", "'r'", ")", "\n", "data_lines", "=", "f_data", ".", "readlines", "(", ")", "\n", "label_lines", "=", "f_label", ".", "readlines", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "data_lines", ")", ")", ":", "\n", "      ", "self", ".", "inputs", ".", "append", "(", "root", "+", "data_lines", "[", "i", "]", "[", "0", ":", "-", "1", "]", ")", "\n", "self", ".", "targets", ".", "append", "(", "int", "(", "label_lines", "[", "i", "]", ".", "split", "(", ")", "[", "0", "]", ")", ")", "# label: [road class, wet/dry, video index]", "\n", "\n", "", "classnamesPath", "=", "root", "+", "exp", "+", "'/classnames.txt'", "\n", "f_classnames", "=", "open", "(", "classnamesPath", ",", "'r'", ")", "\n", "data_lines", "=", "f_classnames", ".", "readlines", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "data_lines", ")", ")", ":", "\n", "        ", "self", ".", "class_names", ".", "append", "(", "data_lines", "[", "i", "]", "[", "0", ":", "-", "1", "]", ")", "\n", "\n", "", "self", ".", "n_classes", "=", "43", "\n", "assert", "(", "self", ".", "n_classes", "==", "len", "(", "self", ".", "class_names", ")", ")", "\n", "\n", "print", "(", "'GTSRB %d classes'", "%", "(", "len", "(", "self", ".", "class_names", ")", ")", ")", "\n", "print", "(", "'Load GTSRB %s: %d samples'", "%", "(", "split", ",", "len", "(", "self", ".", "targets", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb.gtsrbLoader.__len__": [[57, 59], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb.gtsrbLoader.__getitem__": [[61, 83], ["scipy.imread", "numpy.array", "scipy.imread", "numpy.array", "torch.ones().type", "random.random", "numpy.copy", "gtsrb.gtsrbLoader.augmentations", "gtsrb.gtsrbLoader.transform", "gtsrb.gtsrbLoader.transform", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.transform", "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "    ", "img_path", "=", "self", ".", "inputs", "[", "index", "]", "\n", "gt", "=", "self", ".", "targets", "[", "index", "]", "\n", "gt", "=", "torch", ".", "ones", "(", "1", ")", ".", "type", "(", "torch", ".", "LongTensor", ")", "*", "gt", "\n", "\n", "# Load images and templates. perform augmentations", "\n", "img", "=", "m", ".", "imread", "(", "img_path", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "template", "=", "m", ".", "imread", "(", "self", ".", "root", "+", "'template_ordered/%02d.jpg'", "%", "(", "gt", "+", "1", ")", ")", "\n", "template", "=", "np", ".", "array", "(", "template", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "if", "random", ".", "random", "(", ")", "<", "self", ".", "proto_rate", ":", "\n", "        ", "img", "=", "np", ".", "copy", "(", "template", ")", "\n", "\n", "", "if", "self", ".", "augmentations", "is", "not", "None", ":", "\n", "        ", "img", ",", "template", "=", "self", ".", "augmentations", "(", "img", ",", "template", ")", "\n", "\n", "", "if", "self", ".", "is_transform", ":", "\n", "        ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "template", "=", "self", ".", "transform", "(", "template", ")", "\n", "\n", "", "return", "img", ",", "gt", ",", "template", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb.gtsrbLoader.transform": [[84, 99], ["cv2.resize.astype", "cv2.resize.transpose", "torch.from_numpy().float", "cv2.resize", "cv2.resize.astype", "torch.from_numpy"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "img", ")", ":", "\n", "    ", "img", "=", "img", ".", "astype", "(", "np", ".", "float64", ")", "\n", "#img -= self.mean", "\n", "if", "self", ".", "img_size", "is", "not", "None", ":", "\n", "      ", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "self", ".", "img_size", "[", "1", "]", ",", "self", ".", "img_size", "[", "0", "]", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "# Resize scales images from 0 to 255, thus we need", "\n", "# to divide by 255.0", "\n", "\n", "\n", "", "img", "=", "img", ".", "astype", "(", "float", ")", "/", "255.0", "\n", "# NHWC -> NCHW", "\n", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "float", "(", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb.gtsrbLoader.load_template": [[101, 127], ["img_paths.append", "scipy.imread", "numpy.array", "target_img.append", "target_template.append", "torch.stack", "torch.stack", "augmentations", "gtsrb.gtsrbLoader.transform", "gtsrb.gtsrbLoader.transform"], "methods", ["home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.transform", "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.transform"], ["", "def", "load_template", "(", "self", ",", "target", ",", "augmentations", "=", "None", ")", ":", "\n", "\n", "# if augmentation is not specified, use self.augmentations. Unless use input augmentation option.", "\n", "    ", "if", "augmentations", "is", "None", ":", "\n", "        ", "augmentations", "=", "self", ".", "augmentations", "\n", "", "img_paths", "=", "[", "]", "\n", "\n", "for", "id", "in", "target", ":", "\n", "        ", "img_paths", ".", "append", "(", "self", ".", "root", "+", "'/template_ordered/%02d.jpg'", "%", "(", "id", "+", "1", ")", ")", "\n", "\n", "", "target_img", "=", "[", "]", "\n", "target_template", "=", "[", "]", "\n", "for", "img_path", "in", "img_paths", ":", "\n", "        ", "img", "=", "m", ".", "imread", "(", "img_path", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "if", "augmentations", "is", "not", "None", ":", "\n", "            ", "img", ",", "template", "=", "augmentations", "(", "img", ",", "img", ")", "\n", "", "if", "self", ".", "transform", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "template", "=", "self", ".", "transform", "(", "template", ")", "\n", "\n", "", "target_img", ".", "append", "(", "img", ")", "\n", "target_template", ".", "append", "(", "template", ")", "\n", "\n", "", "return", "torch", ".", "stack", "(", "target_img", ",", "dim", "=", "0", ")", ",", "torch", ".", "stack", "(", "target_template", ",", "dim", "=", "0", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.__init__.get_loader": [[11, 21], ["None"], "function", ["None"], ["", "if", "name", "is", "'sillnet_gtsrb'", ":", "\n", "        ", "model", "=", "model", "(", "nc", "=", "3", ",", "input_size", "=", "64", ",", "class_train", "=", "class_train", ",", "class_test", "=", "class_test", ",", "extract_chn", "=", "[", "150", ",", "150", ",", "150", ",", "150", ",", "150", ",", "feature_channel", "]", ",", "classify_chn", "=", "[", "100", ",", "150", ",", "200", ",", "150", ",", "100", ",", "100", ",", "100", "]", ",", "param1", "=", "None", ",", "param2", "=", "[", "150", ",", "150", ",", "150", ",", "150", "]", ",", "param3", "=", "[", "150", ",", "150", ",", "150", ",", "150", "]", ",", "param4", "=", "[", "150", ",", "150", ",", "150", ",", "150", "]", ")", "\n", "print", "(", "'Use sillnet_gtsrb with random initialization!'", ")", "\n", "\n", "", "return", "model", "\n", "\n", "", "def", "_get_model_instance", "(", "name", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "return", "{", "\n", "'sillnet'", ":", "SillNet", ",", "\n", "'sillnet_gtsrb'", ":", "SillNet_gtsrb", ",", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.__init__.get_data_path": [[23, 26], ["json.load", "open"], "function", ["None"], ["", "except", ":", "\n", "        ", "print", "(", "'Model {} not available'", ".", "format", "(", "name", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.__init__": [[10, 69], ["torch.utils.data.Dataset.__init__", "numpy.array", "open", "open", "open.readlines", "open.readlines", "range", "open", "open.readlines", "range", "print", "print", "numpy.array", "len", "len", "gtsrb2gtsrb.gtsrb2gtsrbLoader.class_names.append", "len", "numpy.array", "int", "len", "gtsrb2gtsrb.gtsrb2gtsrbLoader.tr_class.tolist", "gtsrb2gtsrb.gtsrb2gtsrbLoader.inputs.append", "gtsrb2gtsrb.gtsrb2gtsrbLoader.targets.append", "int", "len", "label_lines[].split", "gtsrb2gtsrb.gtsrb2gtsrbLoader.te_class.tolist", "gtsrb2gtsrb.gtsrb2gtsrbLoader.inputs.append", "gtsrb2gtsrb.gtsrb2gtsrbLoader.targets.append", "label_lines[].split"], "methods", ["home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.__init__"], ["  ", "def", "__init__", "(", "self", ",", "root", ",", "exp", ",", "split", "=", "'train'", ",", "is_transform", "=", "False", ",", "img_size", "=", "None", ",", "augmentations", "=", "None", ",", "prototype_sampling_rate", "=", "0.005", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "split", "==", "'train'", ":", "\n", "        ", "self", ".", "proto_rate", "=", "prototype_sampling_rate", "\n", "", "else", ":", "\n", "        ", "self", ".", "proto_rate", "=", "0.0", "\n", "\n", "", "self", ".", "inputs", "=", "[", "]", "\n", "self", ".", "targets", "=", "[", "]", "\n", "self", ".", "class_names", "=", "[", "]", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "is_transform", "=", "is_transform", "\n", "self", ".", "augmentations", "=", "augmentations", "\n", "self", ".", "mean", "=", "np", ".", "array", "(", "[", "125.00", ",", "125.00", ",", "125.00", "]", ")", "# average intensity", "\n", "\n", "if", "split", "==", "'train'", ":", "\n", "        ", "self", ".", "split", "=", "'GTSRB'", "\n", "self", ".", "n_classes", "=", "43", "\n", "self", ".", "tr_class", "=", "np", ".", "array", "(", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "17", ",", "18", ",", "25", ",", "26", ",", "31", ",", "33", ",", "35", ",", "38", "]", ")", "\n", "", "elif", "split", "==", "'test'", ":", "\n", "        ", "self", ".", "split", "=", "'GTSRB'", "\n", "self", ".", "n_classes", "=", "43", "\n", "self", ".", "te_class", "=", "np", ".", "array", "(", "[", "0", ",", "6", ",", "16", ",", "19", ",", "20", ",", "21", ",", "22", ",", "23", ",", "24", ",", "27", ",", "28", ",", "29", ",", "30", ",", "32", ",", "34", ",", "36", ",", "37", ",", "39", ",", "40", ",", "41", ",", "42", "]", ")", "\n", "\n", "", "self", ".", "root", "=", "root", "\n", "#exp  = exp + '/exp_gtsrb/'", "\n", "self", ".", "dataPath", "=", "root", "+", "exp", "+", "'/'", "+", "self", ".", "split", "+", "'_impaths_all.txt'", "\n", "self", ".", "labelPath", "=", "root", "+", "exp", "+", "'/'", "+", "self", ".", "split", "+", "'_imclasses_all.txt'", "\n", "\n", "f_data", "=", "open", "(", "self", ".", "dataPath", ",", "'r'", ")", "\n", "f_label", "=", "open", "(", "self", ".", "labelPath", ",", "'r'", ")", "\n", "data_lines", "=", "f_data", ".", "readlines", "(", ")", "\n", "label_lines", "=", "f_label", ".", "readlines", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "data_lines", ")", ")", ":", "\n", "        ", "if", "split", "==", "'train'", ":", "\n", "            ", "label", "=", "int", "(", "label_lines", "[", "i", "]", ".", "split", "(", ")", "[", "0", "]", ")", "\n", "if", "label", "-", "1", "in", "self", ".", "tr_class", ".", "tolist", "(", ")", ":", "\n", "                ", "self", ".", "inputs", ".", "append", "(", "root", "+", "data_lines", "[", "i", "]", "[", "0", ":", "-", "1", "]", ")", "\n", "self", ".", "targets", ".", "append", "(", "label", ")", "# label: [road class, wet/dry, video index]", "\n", "", "", "elif", "split", "==", "'test'", ":", "\n", "            ", "label", "=", "int", "(", "label_lines", "[", "i", "]", ".", "split", "(", ")", "[", "0", "]", ")", "\n", "if", "label", "-", "1", "in", "self", ".", "te_class", ".", "tolist", "(", ")", ":", "\n", "                ", "self", ".", "inputs", ".", "append", "(", "root", "+", "data_lines", "[", "i", "]", "[", "0", ":", "-", "1", "]", ")", "\n", "self", ".", "targets", ".", "append", "(", "label", ")", "# label: [road class, wet/dry, video index]", "\n", "\n", "", "", "", "classnamesPath", "=", "root", "+", "exp", "+", "'/'", "+", "self", ".", "split", "+", "'_classnames.txt'", "\n", "f_classnames", "=", "open", "(", "classnamesPath", ",", "'r'", ")", "\n", "data_lines", "=", "f_classnames", ".", "readlines", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "data_lines", ")", ")", ":", "\n", "        ", "self", ".", "class_names", ".", "append", "(", "data_lines", "[", "i", "]", "[", "0", ":", "-", "1", "]", ")", "\n", "\n", "", "self", ".", "n_classes", "=", "43", "\n", "assert", "(", "self", ".", "n_classes", "==", "len", "(", "self", ".", "class_names", ")", ")", "\n", "\n", "print", "(", "'GTSRB %d classes'", "%", "(", "len", "(", "self", ".", "class_names", ")", ")", ")", "\n", "print", "(", "'Load GTSRB %s: %d samples'", "%", "(", "split", ",", "len", "(", "self", ".", "targets", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.__len__": [[71, 73], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.__getitem__": [[75, 97], ["scipy.imread", "numpy.array", "scipy.imread", "numpy.array", "torch.ones().type", "random.random", "numpy.copy", "gtsrb2gtsrb.gtsrb2gtsrbLoader.augmentations", "gtsrb2gtsrb.gtsrb2gtsrbLoader.transform", "gtsrb2gtsrb.gtsrb2gtsrbLoader.transform", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.transform", "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "    ", "img_path", "=", "self", ".", "inputs", "[", "index", "]", "\n", "gt", "=", "self", ".", "targets", "[", "index", "]", "\n", "gt", "=", "torch", ".", "ones", "(", "1", ")", ".", "type", "(", "torch", ".", "LongTensor", ")", "*", "gt", "\n", "\n", "# Load images and templates. perform augmentations", "\n", "img", "=", "m", ".", "imread", "(", "img_path", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "template", "=", "m", ".", "imread", "(", "self", ".", "root", "+", "self", ".", "split", "+", "'/template_ordered/%02d.jpg'", "%", "(", "gt", ")", ")", "\n", "template", "=", "np", ".", "array", "(", "template", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "if", "random", ".", "random", "(", ")", "<", "self", ".", "proto_rate", ":", "\n", "        ", "img", "=", "np", ".", "copy", "(", "template", ")", "\n", "\n", "", "if", "self", ".", "augmentations", "is", "not", "None", ":", "\n", "        ", "img", ",", "template", "=", "self", ".", "augmentations", "(", "img", ",", "template", ")", "\n", "\n", "", "if", "self", ".", "is_transform", ":", "\n", "        ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "template", "=", "self", ".", "transform", "(", "template", ")", "\n", "", "gt", "=", "gt", "-", "1", "\n", "return", "img", ",", "gt", ",", "template", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.transform": [[98, 113], ["cv2.resize.astype", "cv2.resize.transpose", "torch.from_numpy().float", "cv2.resize", "cv2.resize.astype", "torch.from_numpy"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "img", ")", ":", "\n", "    ", "img", "=", "img", ".", "astype", "(", "np", ".", "float64", ")", "\n", "#img -= self.mean", "\n", "if", "self", ".", "img_size", "is", "not", "None", ":", "\n", "      ", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "self", ".", "img_size", "[", "1", "]", ",", "self", ".", "img_size", "[", "0", "]", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "# Resize scales images from 0 to 255, thus we need", "\n", "# to divide by 255.0", "\n", "\n", "\n", "", "img", "=", "img", ".", "astype", "(", "float", ")", "/", "255.0", "\n", "# NHWC -> NCHW", "\n", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "float", "(", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.load_template": [[115, 141], ["img_paths.append", "scipy.imread", "numpy.array", "target_img.append", "target_template.append", "torch.stack", "torch.stack", "augmentations", "gtsrb2gtsrb.gtsrb2gtsrbLoader.transform", "gtsrb2gtsrb.gtsrb2gtsrbLoader.transform"], "methods", ["home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.transform", "home.repos.pwc.inspect_result.lanfenghuanyu_Sill-Net.loader.gtsrb2gtsrb.gtsrb2gtsrbLoader.transform"], ["", "def", "load_template", "(", "self", ",", "target", ",", "augmentations", "=", "None", ")", ":", "\n", "\n", "# if augmentation is not specified, use self.augmentations. Unless use input augmentation option.", "\n", "    ", "if", "augmentations", "is", "None", ":", "\n", "        ", "augmentations", "=", "self", ".", "augmentations", "\n", "", "img_paths", "=", "[", "]", "\n", "\n", "for", "id", "in", "target", ":", "\n", "        ", "img_paths", ".", "append", "(", "self", ".", "root", "+", "self", ".", "split", "+", "'/template_ordered/%02d.jpg'", "%", "(", "id", "+", "1", ")", ")", "\n", "\n", "", "target_img", "=", "[", "]", "\n", "target_template", "=", "[", "]", "\n", "for", "img_path", "in", "img_paths", ":", "\n", "        ", "img", "=", "m", ".", "imread", "(", "img_path", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "if", "augmentations", "is", "not", "None", ":", "\n", "            ", "img", ",", "template", "=", "augmentations", "(", "img", ",", "img", ")", "\n", "", "if", "self", ".", "transform", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "template", "=", "self", ".", "transform", "(", "template", ")", "\n", "\n", "", "target_img", ".", "append", "(", "img", ")", "\n", "target_template", ".", "append", "(", "template", ")", "\n", "\n", "", "return", "torch", ".", "stack", "(", "target_img", ",", "dim", "=", "0", ")", ",", "torch", ".", "stack", "(", "target_template", ",", "dim", "=", "0", ")", "", "", "", ""]]}