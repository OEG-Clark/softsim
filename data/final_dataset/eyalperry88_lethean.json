{"home.repos.pwc.inspect_result.eyalperry88_lethean.None.gradient_correlation.gn_helper": [[47, 49], ["torch.GroupNorm"], "function", ["None"], ["def", "gn_helper", "(", "planes", ")", ":", "\n", "    ", "return", "nn", ".", "GroupNorm", "(", "args", ".", "group_norm", ",", "planes", ")", "\n", "", "norm_layer", "=", "gn_helper", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.None.adversarial_lethean.gn_helper": [[47, 49], ["torch.GroupNorm"], "function", ["None"], ["def", "gn_helper", "(", "planes", ")", ":", "\n", "    ", "return", "nn", ".", "GroupNorm", "(", "args", ".", "group_norm", ",", "planes", ")", "\n", "", "norm_layer", "=", "gn_helper", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.None.show_table.print_table": [[20, 29], ["print", "str"], "function", ["home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.ProgressMeter.print"], ["def", "print_table", "(", "table", ",", "prec1", "=", "True", ")", ":", "\n", "\t", "for", "row", "in", "table", ":", "\n", "\t\t", "row_str", "=", "''", "\n", "for", "entry", "in", "row", ":", "\n", "\t\t\t", "if", "prec1", ":", "\n", "\t\t\t\t", "row_str", "+=", "'%.1f\\t'", "%", "(", "entry", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "row_str", "+=", "'%s\\t'", "%", "(", "str", "(", "entry", ")", ")", "\n", "", "", "print", "(", "row_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.None.show_table.show_table": [[30, 48], ["numpy.asarray", "numpy.transpose", "np.transpose.append", "torch.load", "torch.load", "row.append", "row.append", "row.append", "row.append"], "function", ["None"], ["", "", "def", "show_table", "(", "folder", ",", "level", ")", ":", "\n", "\t", "results", "=", "[", "]", "\n", "for", "corruption", "in", "corruptions", ":", "\n", "\t\t", "row", "=", "[", "]", "\n", "try", ":", "\n", "\t\t\t", "rdict_ada", "=", "torch", ".", "load", "(", "folder", "+", "'/%s_%d_ada.pth'", "%", "(", "corruption", ",", "level", ")", ")", "\n", "rdict_inl", "=", "torch", ".", "load", "(", "folder", "+", "'/%s_%d_inl.pth'", "%", "(", "corruption", ",", "level", ")", ")", "\n", "row", ".", "append", "(", "1", "-", "rdict_inl", "[", "'cls_initial'", "]", ")", "\n", "row", ".", "append", "(", "1", "-", "rdict_ada", "[", "'cls_adapted'", "]", ")", "\n", "", "except", ":", "\n", "\t\t\t", "row", ".", "append", "(", "0", ")", "\n", "row", ".", "append", "(", "0", ")", "\n", "", "results", ".", "append", "(", "row", ")", "\n", "\n", "", "results", "=", "np", ".", "asarray", "(", "results", ")", "\n", "results", "=", "np", ".", "transpose", "(", "results", ")", "\n", "results", "=", "results", "*", "100", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.None.show_table.show_none": [[49, 60], ["numpy.asarray", "torch.load", "np.asarray.append", "np.asarray.append"], "function", ["None"], ["", "def", "show_none", "(", "folder", ",", "level", ")", ":", "\n", "\t", "results", "=", "[", "]", "\n", "for", "corruption", "in", "corruptions", ":", "\n", "\t\t", "try", ":", "\n", "\t\t\t", "rdict_inl", "=", "torch", ".", "load", "(", "folder", "+", "'/%s_%d_none.pth'", "%", "(", "corruption", ",", "level", ")", ")", "\n", "results", ".", "append", "(", "1", "-", "rdict_inl", "[", "'cls_initial'", "]", ")", "\n", "", "except", ":", "\n", "\t\t\t", "results", ".", "append", "(", "0", ")", "\n", "", "", "results", "=", "np", ".", "asarray", "(", "[", "results", "]", ")", "\n", "results", "=", "results", "*", "100", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.None.main.gn_helper": [[35, 37], ["torch.GroupNorm"], "function", ["None"], ["def", "gn_helper", "(", "planes", ")", ":", "\n", "    ", "return", "nn", ".", "GroupNorm", "(", "args", ".", "group_norm", ",", "planes", ")", "\n", "", "norm_layer", "=", "gn_helper", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.None.main.train": [[50, 86], ["net.train", "utils.misc.AverageMeter", "utils.misc.AverageMeter", "utils.misc.AverageMeter", "utils.misc.AverageMeter", "utils.misc.ProgressMeter", "time.time", "enumerate", "len", "utils.misc.AverageMeter.update", "optimizer.zero_grad", "net", "criterion", "utils.misc.AverageMeter.update", "outputs_cls.max", "utils.misc.AverageMeter.update", "utils.rotation.rotate_batch", "net", "criterion", "criterion.backward", "optimizer.step", "utils.misc.AverageMeter.update", "time.time", "dl[].to", "dl[].to", "criterion.item", "len", "predicted.eq().sum().item", "len", "len", "rot_inputs.to", "rot_labels.to", "utils.misc.ProgressMeter.print", "time.time", "time.time", "predicted.eq().sum", "predicted.eq"], "function", ["home.repos.pwc.inspect_result.eyalperry88_lethean.None.main.train", "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.rotation.rotate_batch", "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.ProgressMeter.print"], ["def", "train", "(", "trloader", ",", "epoch", ")", ":", "\n", "    ", "net", ".", "train", "(", ")", "\n", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "data_time", "=", "AverageMeter", "(", "'Data'", ",", "':6.3f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "top1", "=", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "progress", "=", "ProgressMeter", "(", "len", "(", "trloader", ")", ",", "batch_time", ",", "data_time", ",", "losses", ",", "top1", ",", "\n", "prefix", "=", "\"Epoch: [{}]\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "dl", "in", "enumerate", "(", "trloader", ")", ":", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "inputs_cls", ",", "labels_cls", "=", "dl", "[", "0", "]", ".", "to", "(", "device", ")", ",", "dl", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "outputs_cls", ",", "_", "=", "net", "(", "inputs_cls", ")", "\n", "loss", "=", "criterion", "(", "outputs_cls", ",", "labels_cls", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "len", "(", "labels_cls", ")", ")", "\n", "\n", "_", ",", "predicted", "=", "outputs_cls", ".", "max", "(", "1", ")", "\n", "acc1", "=", "predicted", ".", "eq", "(", "labels_cls", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "len", "(", "labels_cls", ")", "\n", "top1", ".", "update", "(", "acc1", ",", "len", "(", "labels_cls", ")", ")", "\n", "\n", "rot_inputs", ",", "rot_labels", "=", "rotate_batch", "(", "dl", "[", "0", "]", ")", "\n", "inputs_ssh", ",", "labels_ssh", "=", "rot_inputs", ".", "to", "(", "device", ")", ",", "rot_labels", ".", "to", "(", "device", ")", "\n", "_", ",", "outputs_ssh", "=", "net", "(", "inputs_ssh", ")", "\n", "loss_ssh", "=", "criterion", "(", "outputs_ssh", ",", "labels_ssh", ")", "\n", "loss", "+=", "loss_ssh", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "progress", ".", "print", "(", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.None.adversarial_fgsm.imshow": [[17, 22], ["img.numpy", "matplotlib.imshow", "matplotlib.show", "np.transpose"], "function", ["home.repos.pwc.inspect_result.eyalperry88_lethean.None.test.imshow"], ["def", "imshow", "(", "img", ")", ":", "\n", "    ", "img", "=", "img", "/", "2", "+", "0.5", "# unnormalize", "\n", "npimg", "=", "img", ".", "numpy", "(", ")", "\n", "plt", ".", "imshow", "(", "np", ".", "transpose", "(", "npimg", ",", "(", "1", ",", "2", ",", "0", ")", ")", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.None.adversarial_fgsm.gn_helper": [[55, 57], ["torch.GroupNorm"], "function", ["None"], ["def", "gn_helper", "(", "planes", ")", ":", "\n", "    ", "return", "nn", ".", "GroupNorm", "(", "args", ".", "group_norm", ",", "planes", ")", "\n", "", "norm_layer", "=", "gn_helper", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.None.adversarial_fgsm.fgsm_attack": [[74, 83], ["data_grad.sign", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp"], "function", ["None"], ["def", "fgsm_attack", "(", "image", ",", "epsilon", ",", "data_grad", ")", ":", "\n", "# Collect the element-wise sign of the data gradient", "\n", "    ", "sign_data_grad", "=", "data_grad", ".", "sign", "(", ")", "\n", "# Create the perturbed image by adjusting each pixel of the input image", "\n", "perturbed_image", "=", "image", "+", "epsilon", "*", "sign_data_grad", "\n", "# Adding clipping to maintain [0,1] range", "\n", "perturbed_image", "=", "torch", ".", "clamp", "(", "perturbed_image", ",", "0", ",", "1", ")", "\n", "# Return the perturbed image", "\n", "return", "perturbed_image", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.None.adversarial_random.imshow": [[17, 22], ["img.numpy", "matplotlib.imshow", "matplotlib.show", "np.transpose"], "function", ["home.repos.pwc.inspect_result.eyalperry88_lethean.None.test.imshow"], ["def", "imshow", "(", "img", ")", ":", "\n", "    ", "img", "=", "img", "/", "2", "+", "0.5", "# unnormalize", "\n", "npimg", "=", "img", ".", "numpy", "(", ")", "\n", "plt", ".", "imshow", "(", "np", ".", "transpose", "(", "npimg", ",", "(", "1", ",", "2", ",", "0", ")", ")", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.None.adversarial_random.gn_helper": [[55, 57], ["torch.GroupNorm"], "function", ["None"], ["def", "gn_helper", "(", "planes", ")", ":", "\n", "    ", "return", "nn", ".", "GroupNorm", "(", "args", ".", "group_norm", ",", "planes", ")", "\n", "", "norm_layer", "=", "gn_helper", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.None.test.imshow": [[17, 22], ["img.numpy", "matplotlib.imshow", "matplotlib.show", "np.transpose"], "function", ["home.repos.pwc.inspect_result.eyalperry88_lethean.None.test.imshow"], ["def", "imshow", "(", "img", ")", ":", "\n", "    ", "img", "=", "img", "/", "2", "+", "0.5", "# unnormalize", "\n", "npimg", "=", "img", ".", "numpy", "(", ")", "\n", "plt", ".", "imshow", "(", "np", ".", "transpose", "(", "npimg", ",", "(", "1", ",", "2", ",", "0", ")", ")", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.None.test.gn_helper": [[55, 57], ["torch.GroupNorm"], "function", ["None"], ["def", "gn_helper", "(", "planes", ")", ":", "\n", "    ", "return", "nn", ".", "GroupNorm", "(", "args", ".", "group_norm", ",", "planes", ")", "\n", "", "norm_layer", "=", "gn_helper", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.test_helpers.test": [[9, 49], ["model.eval", "AverageMeter", "AverageMeter", "ProgressMeter", "torch.CrossEntropyLoss().to", "time.time", "enumerate", "print", "len", "range", "AverageMeter.update", "AverageMeter.update", "time.time", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.CrossEntropyLoss", "range", "range", "torch.no_grad", "torch.no_grad", "model", "outputs.max", "torch.cat().numpy.append", "torch.cat().numpy.append", "len", "int", "one_hot[].sum().item", "len", "len", "ProgressMeter.print", "inputs.to", "labels.to", "nn.CrossEntropyLoss().to.cpu", "predicted.eq().cpu", "[].item", "time.time", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "one_hot[].sum", "nn.CrossEntropyLoss().to.", "predicted.eq"], "function", ["home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.ProgressMeter.print", "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.ProgressMeter.print"], ["def", "test", "(", "teloader", ",", "model", ",", "verbose", "=", "False", ",", "print_freq", "=", "10", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "top1", "=", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "progress", "=", "ProgressMeter", "(", "len", "(", "teloader", ")", ",", "batch_time", ",", "top1", ",", "prefix", "=", "'Test: '", ")", "\n", "\n", "one_hot", "=", "[", "]", "\n", "losses", "=", "[", "]", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'none'", ")", ".", "to", "(", "device", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "correct_per_class", "=", "[", "0", "for", "i", "in", "range", "(", "10", ")", "]", "\n", "total_per_class", "=", "[", "0", "for", "i", "in", "range", "(", "10", ")", "]", "\n", "for", "i", ",", "(", "inputs", ",", "labels", ")", "in", "enumerate", "(", "teloader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "inputs", ",", "labels", "=", "inputs", ".", "to", "(", "device", ")", ",", "labels", ".", "to", "(", "device", ")", "\n", "outputs", ",", "_", "=", "model", "(", "inputs", ")", "\n", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "\n", "losses", ".", "append", "(", "criterion", "(", "outputs", ",", "labels", ")", ".", "cpu", "(", ")", ")", "\n", "one_hot", ".", "append", "(", "predicted", ".", "eq", "(", "labels", ")", ".", "cpu", "(", ")", ")", "\n", "\n", "", "for", "j", "in", "range", "(", "len", "(", "labels", ")", ")", ":", "\n", "            ", "lbl", "=", "labels", "[", "j", "]", "\n", "total_per_class", "[", "lbl", "]", "+=", "1", "\n", "correct_per_class", "[", "lbl", "]", "+=", "int", "(", "one_hot", "[", "-", "1", "]", "[", "j", "]", ".", "item", "(", ")", ")", "\n", "", "acc1", "=", "one_hot", "[", "-", "1", "]", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "len", "(", "labels", ")", "\n", "top1", ".", "update", "(", "acc1", ",", "len", "(", "labels", ")", ")", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "print_freq", ">", "0", "and", "i", "%", "print_freq", "==", "0", ":", "\n", "            ", "progress", ".", "print", "(", "i", ")", "\n", "", "", "print", "(", "' * Acc@1 {top1.avg:.3f}'", ".", "format", "(", "top1", "=", "top1", ")", ")", "\n", "\n", "if", "verbose", ":", "\n", "        ", "one_hot", "=", "torch", ".", "cat", "(", "one_hot", ")", ".", "numpy", "(", ")", "\n", "losses", "=", "torch", ".", "cat", "(", "losses", ")", ".", "numpy", "(", ")", "\n", "# return 1-top1.avg, one_hot, losses", "\n", "return", "1", "-", "top1", ".", "avg", ",", "correct_per_class", ",", "total_per_class", "\n", "", "else", ":", "\n", "        ", "return", "1", "-", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.test_helpers.pair_buckets": [[50, 56], ["numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_not", "numpy.logical_not", "numpy.logical_not", "numpy.logical_not"], "function", ["None"], ["", "", "def", "pair_buckets", "(", "o1", ",", "o2", ")", ":", "\n", "    ", "crr", "=", "np", ".", "logical_and", "(", "o1", ",", "o2", ")", "\n", "crw", "=", "np", ".", "logical_and", "(", "o1", ",", "np", ".", "logical_not", "(", "o2", ")", ")", "\n", "cwr", "=", "np", ".", "logical_and", "(", "np", ".", "logical_not", "(", "o1", ")", ",", "o2", ")", "\n", "cww", "=", "np", ".", "logical_and", "(", "np", ".", "logical_not", "(", "o1", ")", ",", "np", ".", "logical_not", "(", "o2", ")", ")", "\n", "return", "crr", ",", "crw", ",", "cwr", ",", "cww", "\n", "", "def", "count_each", "(", "tuple", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.test_helpers.count_each": [[56, 58], ["item.sum"], "function", ["None"], ["", "def", "count_each", "(", "tuple", ")", ":", "\n", "    ", "return", "[", "item", ".", "sum", "(", ")", "for", "item", "in", "tuple", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.train_helpers.ImagePathFolder.__init__": [[72, 74], ["torchvision.ImageFolder.__init__"], "methods", ["home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.ProgressMeter.__init__"], ["\t", "def", "__init__", "(", "self", ",", "traindir", ",", "train_transform", ")", ":", "\n", "\t\t", "super", "(", "ImagePathFolder", ",", "self", ")", ".", "__init__", "(", "traindir", ",", "train_transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.train_helpers.ImagePathFolder.__getitem__": [[75, 83], ["train_helpers.ImagePathFolder.loader", "os.path.split", "os.path.split", "train_helpers.ImagePathFolder.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\t\t", "path", ",", "_", "=", "self", ".", "imgs", "[", "index", "]", "\n", "img", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "\t\t\t", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "path", ",", "pa", "=", "os", ".", "path", ".", "split", "(", "path", ")", "\n", "path", ",", "pb", "=", "os", ".", "path", ".", "split", "(", "path", ")", "\n", "return", "img", ",", "'val/%s/%s'", "%", "(", "pb", ",", "pa", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.train_helpers.build_model": [[30, 70], ["ExtractorHead().cuda", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torchvision.resnet152().cuda", "extractor_from_layer4", "torch.Linear", "torch.GroupNorm", "torchvision.resnet50().cuda", "extractor_from_layer3", "copy.deepcopy", "torch.Sequential", "ExtractorHead", "torchvision.resnet152", "torchvision.resnet18().cuda", "extractor_from_layer2", "copy.deepcopy", "torch.Sequential", "torchvision.resnet50", "ViewFlatten", "torch.Linear", "torchvision.resnet18", "ViewFlatten", "torch.Linear"], "function", ["home.repos.pwc.inspect_result.eyalperry88_lethean.utils.model.resnet18"], ["def", "build_model", "(", "args", ")", ":", "\n", "\t", "if", "args", ".", "group_norm", "==", "0", ":", "\n", "\t\t", "norm_layer", "=", "None", "\n", "", "else", ":", "\n", "\t\t", "def", "gn_helper", "(", "planes", ")", ":", "\n", "\t\t\t", "return", "nn", ".", "GroupNorm", "(", "args", ".", "group_norm", ",", "planes", ")", "\n", "", "norm_layer", "=", "gn_helper", "\n", "\n", "", "width", "=", "1", "\n", "if", "args", ".", "depth", "==", "152", ":", "\n", "\t\t", "net", "=", "models", ".", "resnet152", "(", "norm_layer", "=", "norm_layer", ")", ".", "cuda", "(", ")", "\n", "expansion", "=", "4", "\n", "", "elif", "args", ".", "depth", "==", "50", ":", "\n", "\t\t", "net", "=", "models", ".", "resnet50", "(", "norm_layer", "=", "norm_layer", ")", ".", "cuda", "(", ")", "\n", "expansion", "=", "4", "\n", "", "elif", "args", ".", "depth", "==", "18", ":", "\n", "\t\t", "net", "=", "models", ".", "resnet18", "(", "norm_layer", "=", "norm_layer", ")", ".", "cuda", "(", ")", "\n", "expansion", "=", "1", "\n", "\n", "", "planes", "=", "512", "\n", "if", "args", ".", "shared", "==", "'none'", ":", "\n", "\t\t", "args", ".", "shared", "=", "None", "\n", "", "if", "args", ".", "shared", "==", "'layer4'", "or", "args", ".", "shared", "is", "None", ":", "\n", "\t\t", "ext", "=", "extractor_from_layer4", "(", "net", ")", "\n", "head", "=", "nn", ".", "Linear", "(", "expansion", "*", "planes", ",", "4", ")", "\n", "", "elif", "args", ".", "shared", "==", "'layer3'", ":", "\n", "\t\t", "ext", "=", "extractor_from_layer3", "(", "net", ")", "\n", "head", "=", "copy", ".", "deepcopy", "(", "[", "net", ".", "layer4", ",", "net", ".", "avgpool", ",", "\n", "ViewFlatten", "(", ")", ",", "nn", ".", "Linear", "(", "expansion", "*", "planes", "*", "width", ",", "4", ")", "]", ")", "\n", "head", "=", "nn", ".", "Sequential", "(", "*", "head", ")", "\n", "", "elif", "args", ".", "shared", "==", "'layer2'", ":", "\n", "\t\t", "ext", "=", "extractor_from_layer2", "(", "net", ")", "\n", "head", "=", "copy", ".", "deepcopy", "(", "[", "net", ".", "layer3", ",", "net", ".", "layer4", ",", "net", ".", "avgpool", ",", "\n", "ViewFlatten", "(", ")", ",", "nn", ".", "Linear", "(", "expansion", "*", "planes", "*", "width", ",", "4", ")", "]", ")", "\n", "head", "=", "nn", ".", "Sequential", "(", "*", "head", ")", "\n", "\n", "", "ssh", "=", "ExtractorHead", "(", "ext", ",", "head", ")", ".", "cuda", "(", ")", "\n", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "net", ")", "\n", "ssh", "=", "torch", ".", "nn", ".", "DataParallel", "(", "ssh", ")", "\n", "return", "net", ",", "ext", ",", "head", ",", "ssh", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.train_helpers.prepare_train_data": [[84, 93], ["print", "torchvision.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.ProgressMeter.print"], ["", "", "def", "prepare_train_data", "(", "args", ")", ":", "\n", "\t", "print", "(", "'Preparing data...'", ")", "\n", "# traindir = os.path.join(args.dataroot, 'train')", "\n", "# trset = RotateImageFolder(traindir, tr_transforms, original=True, rotation=args.rotation,", "\n", "# \t\t\t\t\t\t\t\t\t\t\t\t\trotation_transform=rotation_tr_transforms)", "\n", "trset", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "tr_transforms", ")", "\n", "trloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "return", "trset", ",", "trloader", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.train_helpers.prepare_test_data": [[94, 120], ["torchvision.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "hasattr"], "function", ["None"], ["", "def", "prepare_test_data", "(", "args", ",", "use_transforms", "=", "True", ",", "shuffle", "=", "False", ")", ":", "\n", "\t", "te_transforms_local", "=", "te_transforms", "if", "use_transforms", "else", "None", "\n", "# if not hasattr(args, 'corruption') or args.corruption == 'original':", "\n", "# \tprint('Test on the original test set')", "\n", "# \tvaliddir = os.path.join(args.dataroot, 'val')", "\n", "# \tteset = RotateImageFolder(validdir, te_transforms_local, original=False, rotation=False,", "\n", "# \t\t\t\t\t\t\t\t\t\t\t\trotation_transform=rotation_te_transforms)", "\n", "#", "\n", "# elif args.corruption in common_corruptions:", "\n", "# \tprint('Test on %s level %d' %(args.corruption, args.level))", "\n", "# \tvaliddir = os.path.join(args.dataroot, 'imagenet-c', args.corruption, str(args.level))", "\n", "# \tteset = RotateImageFolder(validdir, te_transforms_local, original=False, rotation=False,", "\n", "# \t\t\t\t\t\t\t\t\t\t\t\trotation_transform=rotation_te_transforms)", "\n", "#", "\n", "# elif args.corruption == 'video':", "\n", "# \tvaliddir = os.path.join(args.dataroot, 'val')", "\n", "# \tteset = ImagePathFolder(validdir, te_transforms_local)", "\n", "# else:", "\n", "# \traise Exception('Corruption not found!')", "\n", "teset", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "te_transforms_local", ")", "\n", "\n", "if", "not", "hasattr", "(", "args", ",", "'workers'", ")", ":", "\n", "\t\t", "args", ".", "workers", "=", "1", "\n", "", "teloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "teset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "shuffle", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "return", "teset", ",", "teloader", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.train_helpers.adjust_learning_rate": [[121, 126], ["None"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "\t", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "lr", "=", "args", ".", "lr", "*", "(", "0.1", "**", "(", "epoch", "//", "50", ")", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "\t\t", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.train_helpers.plot_epochs": [[127, 136], ["plt.plot", "plt.plot", "plt.xlabel", "plt.ylabel", "plt.legend", "plt.savefig", "plt.close", "numpy.asarray", "numpy.asarray"], "function", ["None"], ["", "", "def", "plot_epochs", "(", "all_err_cls", ",", "all_err_ssh", ",", "fname", ")", ":", "\n", "\t", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "plt", ".", "plot", "(", "np", ".", "asarray", "(", "all_err_cls", ")", "*", "100", ",", "color", "=", "'r'", ",", "label", "=", "'supervised'", ")", "\n", "plt", ".", "plot", "(", "np", ".", "asarray", "(", "all_err_ssh", ")", "*", "100", ",", "color", "=", "'b'", ",", "label", "=", "'self-supervised'", ")", "\n", "plt", ".", "xlabel", "(", "'epoch'", ")", "\n", "plt", ".", "ylabel", "(", "'test error (%)'", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "savefig", "(", "fname", ")", "\n", "plt", ".", "close", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.rotation.RotateImageFolder.__init__": [[41, 46], ["torchvision.datasets.ImageFolder.__init__"], "methods", ["home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.ProgressMeter.__init__"], ["\t", "def", "__init__", "(", "self", ",", "traindir", ",", "train_transform", ",", "original", "=", "True", ",", "rotation", "=", "True", ",", "rotation_transform", "=", "None", ")", ":", "\n", "\t\t", "super", "(", "RotateImageFolder", ",", "self", ")", ".", "__init__", "(", "traindir", ",", "train_transform", ")", "\n", "self", ".", "original", "=", "original", "\n", "self", ".", "rotation", "=", "rotation", "\n", "self", ".", "rotation_transform", "=", "rotation_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.rotation.RotateImageFolder.__getitem__": [[47, 68], ["rotation.RotateImageFolder.loader", "rotation.RotateImageFolder.transform", "results.append", "results.append", "rotation.rotate_single_with_label", "results.append", "results.append", "rotation.RotateImageFolder.rotation_transform", "numpy.random.randint"], "methods", ["home.repos.pwc.inspect_result.eyalperry88_lethean.utils.rotation.rotate_single_with_label"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\t\t", "path", ",", "target", "=", "self", ".", "imgs", "[", "index", "]", "\n", "img_input", "=", "self", ".", "loader", "(", "path", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "\t\t\t", "img", "=", "self", ".", "transform", "(", "img_input", ")", "\n", "", "else", ":", "\n", "\t\t\t", "img", "=", "img_input", "\n", "\n", "", "results", "=", "[", "]", "\n", "if", "self", ".", "original", ":", "\n", "\t\t\t", "results", ".", "append", "(", "img", ")", "\n", "results", ".", "append", "(", "target", ")", "\n", "", "if", "self", ".", "rotation", ":", "\n", "\t\t\t", "if", "self", ".", "rotation_transform", "is", "not", "None", ":", "\n", "\t\t\t\t", "img", "=", "self", ".", "rotation_transform", "(", "img_input", ")", "\n", "", "target_ssh", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "4", ",", "1", ")", "[", "0", "]", "\n", "img_ssh", "=", "rotate_single_with_label", "(", "img", ",", "target_ssh", ")", "\n", "results", ".", "append", "(", "img_ssh", ")", "\n", "results", ".", "append", "(", "target_ssh", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.rotation.RotateImageFolder.switch_mode": [[69, 72], ["None"], "methods", ["None"], ["", "def", "switch_mode", "(", "self", ",", "original", ",", "rotation", ")", ":", "\n", "\t\t", "self", ".", "original", "=", "original", "\n", "self", ".", "rotation", "=", "rotation", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.rotation.tensor_rot_90": [[7, 9], ["x.flip().transpose", "x.flip"], "function", ["None"], ["def", "tensor_rot_90", "(", "x", ")", ":", "\n", "\t", "return", "x", ".", "flip", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.rotation.tensor_rot_180": [[10, 12], ["x.flip().flip", "x.flip"], "function", ["None"], ["", "def", "tensor_rot_180", "(", "x", ")", ":", "\n", "\t", "return", "x", ".", "flip", "(", "2", ")", ".", "flip", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.rotation.tensor_rot_270": [[13, 15], ["x.transpose().flip", "x.transpose"], "function", ["None"], ["", "def", "tensor_rot_270", "(", "x", ")", ":", "\n", "\t", "return", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "flip", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.rotation.rotate_single_with_label": [[16, 24], ["rotation.tensor_rot_90", "rotation.tensor_rot_180", "rotation.tensor_rot_270"], "function", ["home.repos.pwc.inspect_result.eyalperry88_lethean.utils.rotation.tensor_rot_90", "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.rotation.tensor_rot_180", "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.rotation.tensor_rot_270"], ["", "def", "rotate_single_with_label", "(", "img", ",", "label", ")", ":", "\n", "\t", "if", "label", "==", "1", ":", "\n", "\t\t", "img", "=", "tensor_rot_90", "(", "img", ")", "\n", "", "elif", "label", "==", "2", ":", "\n", "\t\t", "img", "=", "tensor_rot_180", "(", "img", ")", "\n", "", "elif", "label", "==", "3", ":", "\n", "\t\t", "img", "=", "tensor_rot_270", "(", "img", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.rotation.rotate_batch_with_labels": [[25, 31], ["zip", "torch.cat", "torch.cat", "rotation.rotate_single_with_label", "images.append", "rotate_single_with_label.unsqueeze"], "function", ["home.repos.pwc.inspect_result.eyalperry88_lethean.utils.rotation.rotate_single_with_label"], ["", "def", "rotate_batch_with_labels", "(", "batch", ",", "labels", ")", ":", "\n", "\t", "images", "=", "[", "]", "\n", "for", "img", ",", "label", "in", "zip", "(", "batch", ",", "labels", ")", ":", "\n", "\t\t", "img", "=", "rotate_single_with_label", "(", "img", ",", "label", ")", "\n", "images", ".", "append", "(", "img", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "return", "torch", ".", "cat", "(", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.rotation.rotate_batch": [[32, 39], ["torch.randint", "torch.randint", "isinstance", "rotation.rotate_batch_with_labels", "torch.zeros", "torch.zeros", "len", "len"], "function", ["home.repos.pwc.inspect_result.eyalperry88_lethean.utils.rotation.rotate_batch_with_labels"], ["", "def", "rotate_batch", "(", "batch", ",", "label", "=", "'rand'", ")", ":", "\n", "\t", "if", "label", "==", "'rand'", ":", "\n", "\t\t", "labels", "=", "torch", ".", "randint", "(", "4", ",", "(", "len", "(", "batch", ")", ",", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "", "else", ":", "\n", "\t\t", "assert", "isinstance", "(", "label", ",", "int", ")", "\n", "labels", "=", "torch", ".", "zeros", "(", "(", "len", "(", "batch", ")", ",", ")", ",", "dtype", "=", "torch", ".", "long", ")", "+", "label", "\n", "", "return", "rotate_batch_with_labels", "(", "batch", ",", "labels", ")", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.adapt_helpers.trerr_single": [[9, 21], ["model.eval", "torch.LongTensor", "torch.LongTensor", "torch.stack", "torch.stack", "predicted.eq().cpu", "torch.stack.append", "torch.stack.cuda", "torch.LongTensor.cuda", "torch.no_grad", "torch.no_grad", "model", "model.max", "utils.rotation.rotate_single_with_label", "torch.stack.cuda", "predicted.eq", "rotation_te_transforms"], "function", ["home.repos.pwc.inspect_result.eyalperry88_lethean.utils.rotation.rotate_single_with_label"], ["def", "trerr_single", "(", "model", ",", "image", ")", ":", "\n", "\t", "model", ".", "eval", "(", ")", "\n", "labels", "=", "torch", ".", "LongTensor", "(", "[", "0", ",", "1", ",", "2", ",", "3", "]", ")", "\n", "inputs", "=", "[", "]", "\n", "for", "label", "in", "labels", ":", "\n", "\t\t", "inputs", ".", "append", "(", "rotate_single_with_label", "(", "rotation_te_transforms", "(", "image", ")", ",", "label", ")", ")", "\n", "", "inputs", "=", "torch", ".", "stack", "(", "inputs", ")", "\n", "inputs", ",", "labels", "=", "inputs", ".", "cuda", "(", ")", ",", "labels", ".", "cuda", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t", "outputs", "=", "model", "(", "inputs", ".", "cuda", "(", ")", ")", "\n", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "\n", "", "return", "predicted", ".", "eq", "(", "labels", ")", ".", "cpu", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.adapt_helpers.adapt_single": [[22, 33], ["model.train", "range", "utils.rotation.rotate_batch", "optimizer.zero_grad", "model", "criterion", "criterion.backward", "optimizer.step", "te_transforms", "inputs.to", "labels.to", "range"], "function", ["home.repos.pwc.inspect_result.eyalperry88_lethean.None.main.train", "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.rotation.rotate_batch"], ["", "def", "adapt_single", "(", "model", ",", "image", ",", "optimizer", ",", "criterion", ",", "niter", ",", "batch_size", ")", ":", "\n", "\t", "model", ".", "train", "(", ")", "\n", "for", "iteration", "in", "range", "(", "niter", ")", ":", "\n", "\t\t", "inputs", "=", "[", "te_transforms", "(", "image", ")", "for", "_", "in", "range", "(", "batch_size", ")", "]", "\n", "inputs", ",", "labels", "=", "rotate_batch", "(", "inputs", ")", "\n", "inputs", ",", "labels", "=", "inputs", ".", "to", "(", "device", ")", ",", "labels", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "_", ",", "ssh", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "ssh", ",", "labels", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.adapt_helpers.adapt_single_tensor": [[34, 45], ["model.train", "range", "utils.rotation.rotate_batch", "optimizer.zero_grad", "model", "criterion", "criterion.backward", "optimizer.step", "inputs.to", "labels.to", "range"], "function", ["home.repos.pwc.inspect_result.eyalperry88_lethean.None.main.train", "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.rotation.rotate_batch"], ["", "", "def", "adapt_single_tensor", "(", "model", ",", "tensor", ",", "optimizer", ",", "criterion", ",", "niter", ",", "batch_size", ")", ":", "\n", "\t", "model", ".", "train", "(", ")", "\n", "for", "iteration", "in", "range", "(", "niter", ")", ":", "\n", "\t\t", "inputs", "=", "[", "tensor", "for", "_", "in", "range", "(", "batch_size", ")", "]", "\n", "inputs", ",", "labels", "=", "rotate_batch", "(", "inputs", ")", "\n", "inputs", ",", "labels", "=", "inputs", ".", "to", "(", "device", ")", ",", "labels", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "_", ",", "ssh", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "ssh", ",", "labels", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.adapt_helpers.test_single": [[47, 56], ["model.eval", "te_transforms().unsqueeze", "torch.no_grad", "torch.no_grad", "model", "outputs.max", "[].item", "te_transforms", "te_transforms().unsqueeze.to", "predicted.item", "torch.functional.softmax().squeeze", "torch.functional.softmax"], "function", ["None"], ["", "", "def", "test_single", "(", "model", ",", "image", ",", "label", ")", ":", "\n", "\t", "model", ".", "eval", "(", ")", "\n", "inputs", "=", "te_transforms", "(", "image", ")", ".", "unsqueeze", "(", "0", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t", "outputs", ",", "outputs_ssh", "=", "model", "(", "inputs", ".", "to", "(", "device", ")", ")", "\n", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "\n", "confidence", "=", "nn", ".", "functional", ".", "softmax", "(", "outputs_ssh", ",", "dim", "=", "1", ")", ".", "squeeze", "(", ")", "[", "0", "]", ".", "item", "(", ")", "\n", "", "correctness", "=", "1", "if", "predicted", ".", "item", "(", ")", "==", "label", "else", "0", "\n", "return", "correctness", ",", "confidence", "\n", "", ""]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.imagenet_vid.load_imagenet_vid_map": [[4, 23], ["imagenet_index_map.items"], "function", ["None"], ["def", "load_imagenet_vid_map", "(", "imagenet_index_map", ",", "imagenet_to_vid_map", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        imagenet_index_map (dict): Maps imagenet index to tuple of\n            (wordnet id, label name)\n        imagenet_to_vid_map (dict): Maps ImageNet wordnet ids to closest\n            ImageNet Vid wordnet ids, as output by generate_wnid_map.py.\n\n    Returns:\n        vid_index_map (dict): Map imagenet label indices to tuple of (ImageNet\n            Vid wordnet id, label name). If the index does not correspond to\n            any label from ImageNet Vid, it is omitted.\n    \"\"\"", "\n", "output", "=", "{", "}", "\n", "for", "index", ",", "(", "wordnet_id", ",", "label_name", ")", "in", "imagenet_index_map", ".", "items", "(", ")", ":", "\n", "        ", "if", "wordnet_id", "in", "imagenet_to_vid_map", ":", "\n", "            ", "vid_wordnet_id", "=", "imagenet_to_vid_map", "[", "wordnet_id", "]", "\n", "output", "[", "index", "]", "=", "(", "vid_wordnet_id", ",", "label_name", ")", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.imagenet_vid.convert_predictions": [[25, 70], ["imagenet_vid.load_imagenet_vid_map", "collections.defaultdict", "load_imagenet_vid_map.items", "numpy.zeros", "imagenet_vid_index_map.items", "vid_wordnet_indices[].append", "int", "int", "len", "mapped_labels.max", "mapped_labels.mean", "ValueError"], "function", ["home.repos.pwc.inspect_result.eyalperry88_lethean.utils.imagenet_vid.load_imagenet_vid_map", "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.mean"], ["", "def", "convert_predictions", "(", "predictions", ",", "\n", "imagenet_index_map", ",", "\n", "imagenet_vid_index_map", ",", "\n", "imagenet_to_vid_map", ",", "\n", "aggregation", "=", "'max'", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        predictions (np.array): Shape (num_frames, num_labels), where\n            num_labels=1000.\n        imagenet_index_map (dict): Maps imagenet index to tuple of\n            (wordnet id, label name)\n        imagenet_vid_index_map (dict): As with imagenet_index_map, but for\n            ImageNet Vid labels.\n        imagenet_to_vid_map (dict): Maps ImageNet wordnet ids to closest\n            ImageNet Vid wordnet ids, as output by generate_wnid_map.py.\n        aggregation (str): Either 'max' or 'avg'. Determines how to aggregate\n            predictions for different imagenet classes that map to the same\n            imagenet vid class.\n\n    Returns:\n        vid_predictions (np.array): Shape (num_frames, num_vid_labels),\n            where num_vid_labels=30.\n    \"\"\"", "\n", "imagenet_index_to_vid", "=", "load_imagenet_vid_map", "(", "imagenet_index_map", ",", "\n", "imagenet_to_vid_map", ")", "\n", "# Map imagenet vid wordnet id to list of imagenet label indices", "\n", "vid_wordnet_indices", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "index", ",", "(", "wordnet_id", ",", "_", ")", "in", "imagenet_index_to_vid", ".", "items", "(", ")", ":", "\n", "        ", "vid_wordnet_indices", "[", "wordnet_id", "]", ".", "append", "(", "int", "(", "index", ")", ")", "\n", "\n", "", "num_frames", "=", "predictions", ".", "shape", "[", "0", "]", "\n", "vid_predictions", "=", "np", ".", "zeros", "(", "(", "num_frames", ",", "len", "(", "imagenet_vid_index_map", ")", ")", ")", "\n", "for", "i", ",", "(", "wordnet_id", ",", "_", ")", "in", "imagenet_vid_index_map", ".", "items", "(", ")", ":", "\n", "        ", "if", "wordnet_id", "==", "'n00001740'", ":", "\n", "# Ignore the background class", "\n", "            ", "break", "\n", "", "i", "=", "int", "(", "i", ")", "\n", "mapped_labels", "=", "predictions", "[", ":", ",", "vid_wordnet_indices", "[", "wordnet_id", "]", "]", "\n", "if", "aggregation", "==", "'max'", ":", "\n", "            ", "vid_predictions", "[", ":", ",", "i", "]", "=", "mapped_labels", ".", "max", "(", "axis", "=", "1", ")", "\n", "", "elif", "aggregation", "==", "'avg'", ":", "\n", "            ", "vid_predictions", "[", ":", ",", "i", "]", "=", "mapped_labels", ".", "mean", "(", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown aggregation: %s'", "%", "aggregation", ")", "\n", "", "", "return", "vid_predictions", "\n", "", ""]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.model.BasicBlock.__init__": [[19, 36], ["torch.Module.__init__", "model.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "model.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.ProgressMeter.__init__", "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.model.conv3x3", "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.model.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.model.BasicBlock.forward": [[37, 54], ["model.BasicBlock.conv1", "model.BasicBlock.bn1", "model.BasicBlock.relu", "model.BasicBlock.conv2", "model.BasicBlock.bn2", "model.BasicBlock.relu", "model.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.model.Bottleneck.__init__": [[60, 76], ["torch.Module.__init__", "model.conv1x1", "norm_layer", "model.conv3x3", "norm_layer", "model.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.ProgressMeter.__init__", "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.model.conv1x1", "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.model.conv3x3", "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.model.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.model.Bottleneck.forward": [[77, 98], ["model.Bottleneck.conv1", "model.Bottleneck.bn1", "model.Bottleneck.relu", "model.Bottleneck.conv2", "model.Bottleneck.bn2", "model.Bottleneck.relu", "model.Bottleneck.conv3", "model.Bottleneck.bn3", "model.Bottleneck.relu", "model.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.model.ResNet.__init__": [[102, 154], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "model.ResNet._make_layer", "model.ResNet._make_layer", "model.ResNet._make_layer", "model.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "model.ResNet.modules", "len", "ValueError", "isinstance", "model.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.ProgressMeter.__init__", "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.model.ResNet._make_layer", "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.model.ResNet._make_layer", "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.model.ResNet._make_layer", "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.model.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "self", ".", "fc_ssh", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "4", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.model.ResNet._make_layer": [[155, 178], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "model.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.eyalperry88_lethean.utils.model.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.model.ResNet._forward_impl": [[179, 203], ["model.ResNet.conv1", "model.ResNet.bn1", "model.ResNet.relu", "model.ResNet.maxpool", "model.ResNet.layer1", "model.ResNet.layer2", "model.ResNet.layer3", "model.ResNet.layer4", "model.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "model.ResNet.fc", "model.ResNet.layer4", "model.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "model.ResNet.fc_ssh"], "methods", ["None"], ["", "def", "_forward_impl", "(", "self", ",", "x", ")", ":", "\n", "# See note [TorchScript super()]", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "# classification head", "\n", "x1", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x1", "=", "self", ".", "avgpool", "(", "x1", ")", "\n", "x1", "=", "torch", ".", "flatten", "(", "x1", ",", "1", ")", "\n", "x1", "=", "self", ".", "fc", "(", "x1", ")", "\n", "\n", "# self supvision head", "\n", "x2", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x2", "=", "self", ".", "avgpool", "(", "x2", ")", "\n", "x2", "=", "torch", ".", "flatten", "(", "x2", ",", "1", ")", "\n", "x2", "=", "self", ".", "fc_ssh", "(", "x2", ")", "\n", "\n", "return", "x1", ",", "x2", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.model.ResNet.forward": [[204, 206], ["model.ResNet._forward_impl"], "methods", ["home.repos.pwc.inspect_result.eyalperry88_lethean.utils.model.ResNet._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.model.conv3x3": [[4, 8], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.model.conv1x1": [[10, 13], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.model._resnet": [[208, 215], ["model.ResNet", "load_state_dict_from_url", "ResNet.load_state_dict"], "function", ["None"], ["", "", "def", "_resnet", "(", "arch", ",", "block", ",", "layers", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.model.resnet18": [[217, 225], ["model._resnet"], "function", ["home.repos.pwc.inspect_result.eyalperry88_lethean.utils.model._resnet"], ["", "def", "resnet18", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-18 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet18'", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.AverageMeter.__init__": [[33, 37], ["misc.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.AverageMeter.reset"], ["def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "':f'", ")", ":", "\n", "\t\t", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.AverageMeter.reset": [[38, 43], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.AverageMeter.update": [[44, 49], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "\t\t", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.AverageMeter.__str__": [[50, 53], ["fmtstr.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "\t\t", "fmtstr", "=", "'{name} {val'", "+", "self", ".", "fmt", "+", "'} ({avg'", "+", "self", ".", "fmt", "+", "'})'", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.ProgressMeter.__init__": [[55, 59], ["misc.ProgressMeter._get_batch_fmtstr"], "methods", ["home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.ProgressMeter._get_batch_fmtstr"], ["\t", "def", "__init__", "(", "self", ",", "num_batches", ",", "*", "meters", ",", "prefix", "=", "\"\"", ")", ":", "\n", "\t\t", "self", ".", "batch_fmtstr", "=", "self", ".", "_get_batch_fmtstr", "(", "num_batches", ")", "\n", "self", ".", "meters", "=", "meters", "\n", "self", ".", "prefix", "=", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.ProgressMeter.print": [[60, 64], ["misc.ProgressMeter.print"], "methods", ["home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.ProgressMeter.print"], ["", "def", "print", "(", "self", ",", "batch", ")", ":", "\n", "\t\t", "entries", "=", "[", "self", ".", "prefix", "+", "self", ".", "batch_fmtstr", ".", "format", "(", "batch", ")", "]", "\n", "entries", "+=", "[", "str", "(", "meter", ")", "for", "meter", "in", "self", ".", "meters", "]", "\n", "print", "(", "'\\t'", ".", "join", "(", "entries", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.ProgressMeter._get_batch_fmtstr": [[65, 69], ["len", "str", "str", "fmt.format"], "methods", ["None"], ["", "def", "_get_batch_fmtstr", "(", "self", ",", "num_batches", ")", ":", "\n", "\t\t", "num_digits", "=", "len", "(", "str", "(", "num_batches", "//", "1", ")", ")", "\n", "fmt", "=", "'{:'", "+", "str", "(", "num_digits", ")", "+", "'d}'", "\n", "return", "'['", "+", "fmt", "+", "'/'", "+", "fmt", ".", "format", "(", "num_batches", ")", "+", "']'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.write_to_txt": [[4, 7], ["open", "text_file.write"], "function", ["None"], ["def", "write_to_txt", "(", "name", ",", "content", ")", ":", "\n", "\t", "with", "open", "(", "name", ",", "'w'", ")", "as", "text_file", ":", "\n", "\t\t", "text_file", ".", "write", "(", "content", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.my_makedir": [[8, 13], ["os.makedirs"], "function", ["None"], ["", "", "def", "my_makedir", "(", "name", ")", ":", "\n", "\t", "try", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "name", ")", "\n", "", "except", "OSError", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.mean": [[14, 16], ["sum", "len"], "function", ["None"], ["", "", "def", "mean", "(", "ls", ")", ":", "\n", "\t", "return", "sum", "(", "ls", ")", "/", "len", "(", "ls", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.print_args": [[17, 20], ["vars", "print", "getattr"], "function", ["home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.ProgressMeter.print"], ["", "def", "print_args", "(", "opt", ")", ":", "\n", "\t", "for", "arg", "in", "vars", "(", "opt", ")", ":", "\n", "\t\t", "print", "(", "'%s %s'", "%", "(", "arg", ",", "getattr", "(", "opt", ",", "arg", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.print_nparams": [[21, 24], ["sum", "print", "param.nelement", "model.parameters"], "function", ["home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.ProgressMeter.print"], ["", "", "def", "print_nparams", "(", "model", ")", ":", "\n", "\t", "nparams", "=", "sum", "(", "[", "param", ".", "nelement", "(", ")", "for", "param", "in", "model", ".", "parameters", "(", ")", "]", ")", "\n", "print", "(", "'number of parameters: %d'", "%", "(", "nparams", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.normalize": [[25, 27], ["v.std", "v.mean"], "function", ["home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.mean"], ["", "def", "normalize", "(", "v", ")", ":", "\n", "\t", "return", "(", "v", "-", "v", ".", "mean", "(", ")", ")", "/", "v", ".", "std", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.print_color": [[28, 30], ["print", "getattr"], "function", ["home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.ProgressMeter.print"], ["", "def", "print_color", "(", "color", ",", "string", ")", ":", "\n", "\t", "print", "(", "getattr", "(", "Fore", ",", "color", ")", "+", "string", "+", "Fore", ".", "RESET", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.test_calls.show_result.analyze": [[10, 17], ["numpy.logical_and().sum", "np.logical_and().sum.sum", "idx_tbd.sum", "print_color", "print_color", "numpy.logical_and", "idx_tbd.sum", "idx_tbd.sum", "np.logical_and().sum.sum", "idx_tbd.sum", "np.logical_and().sum.sum"], "function", ["home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.print_color", "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.print_color"], ["def", "analyze", "(", "idx_tbd", ",", "idx_all", ",", "err", ")", ":", "\n", "\t", "new_tbd", "=", "np", ".", "logical_and", "(", "idx_all", ",", "idx_tbd", ")", ".", "sum", "(", ")", "\n", "new_per", "=", "new_tbd", ".", "sum", "(", ")", "/", "idx_tbd", ".", "sum", "(", ")", "\n", "if", "err", ":", "\n", "\t\t", "print_color", "(", "'RED'", ",", "'%d\\t%d\\t%.2f'", "%", "(", "idx_tbd", ".", "sum", "(", ")", ",", "idx_tbd", ".", "sum", "(", ")", "-", "new_tbd", ".", "sum", "(", ")", ",", "(", "1", "-", "new_per", ")", "*", "100", ")", ")", "\n", "", "else", ":", "\n", "\t\t", "print_color", "(", "'GREEN'", ",", "'%d\\t%d\\t%.2f'", "%", "(", "idx_tbd", ".", "sum", "(", ")", ",", "new_tbd", ".", "sum", "(", ")", ",", "new_per", "*", "100", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.test_calls.show_result.analyze_all": [[18, 22], ["zip", "show_result.analyze"], "function", ["home.repos.pwc.inspect_result.eyalperry88_lethean.test_calls.show_result.analyze"], ["", "", "def", "analyze_all", "(", "adapted", ",", "all_initial", ")", ":", "\n", "\t", "errs", "=", "[", "True", ",", "True", ",", "False", ",", "False", "]", "\n", "for", "err", ",", "initial", "in", "zip", "(", "errs", ",", "all_initial", ")", ":", "\n", "\t\t", "analyze", "(", "initial", ",", "adapted", ",", "err", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.test_calls.show_result.show_result": [[23, 28], ["print", "print_color", "print_color", "print_color"], "function", ["home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.ProgressMeter.print", "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.print_color", "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.print_color", "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.print_color"], ["", "", "def", "show_result", "(", "adapted", ",", "initial", ")", ":", "\n", "\t", "print", "(", "'Error (%)'", ")", "\n", "print_color", "(", "'RED'", ",", "'%.1f'", "%", "(", "initial", "*", "100", ")", ")", "\n", "print_color", "(", "'YELLOW'", ",", "'%.1f'", "%", "(", "adapted", "*", "100", ")", ")", "\n", "print_color", "(", "'GREEN'", ",", "'%.1f'", "%", "(", "(", "initial", "-", "adapted", ")", "*", "100", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.test_calls.show_result.get_err_adapted": [[29, 34], ["sum", "sum", "len", "len"], "function", ["None"], ["", "def", "get_err_adapted", "(", "new_correct", ",", "old_correct", ",", "ssh_confide", ",", "threshold", "=", "1", ")", ":", "\n", "\t", "adapted", "=", "new_correct", "[", "ssh_confide", "<", "threshold", "]", "\n", "noadptd", "=", "old_correct", "[", "ssh_confide", ">=", "threshold", "]", "\n", "# print('prop: %.1f' % (len(adapted) / len(new_correct) * 100))", "\n", "return", "1", "-", "(", "sum", "(", "adapted", ")", "+", "sum", "(", "noadptd", ")", ")", "/", "(", "len", "(", "adapted", ")", "+", "len", "(", "noadptd", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.test_calls.show_result.mean_filter": [[35, 42], ["len", "rs.append", "mean"], "function", ["home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.mean"], ["", "def", "mean_filter", "(", "ls", ",", "r", ",", "s", ")", ":", "\n", "\t", "rs", "=", "[", "]", "\n", "i", "=", "0", "\n", "while", "i", "+", "r", "<=", "len", "(", "ls", ")", ":", "\n", "\t\t", "rs", ".", "append", "(", "mean", "(", "ls", "[", "i", ":", "i", "+", "r", "]", ")", ")", "\n", "i", "+=", "s", "\n", "", "return", "rs", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.test_calls.show_decomp.plot_losses": [[15, 28], ["normalize", "normalize", "scipy.stats.pearsonr", "print", "plt.scatter", "plt.xlabel", "plt.ylabel", "plt.savefig", "plt.close"], "function", ["home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.normalize", "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.normalize", "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.ProgressMeter.print"], ["def", "plot_losses", "(", "cls_losses", ",", "ssh_losses", ",", "fname", ")", ":", "\n", "\t", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "from", "utils", ".", "misc", "import", "normalize", "\n", "\n", "cls_losses", "=", "normalize", "(", "cls_losses", ")", "\n", "ssh_losses", "=", "normalize", "(", "ssh_losses", ")", "\n", "correlation", "=", "pearsonr", "(", "cls_losses", ",", "ssh_losses", ")", "\n", "print", "(", "'correlation: %.3f, significance: %.3f'", "%", "(", "correlation", "[", "0", "]", ",", "correlation", "[", "1", "]", ")", ")", "\n", "plt", ".", "scatter", "(", "cls_losses", ",", "ssh_losses", ",", "color", "=", "'r'", ",", "s", "=", "4", ")", "\n", "plt", ".", "xlabel", "(", "'supervised loss'", ")", "\n", "plt", ".", "ylabel", "(", "'self-supervised loss'", ")", "\n", "plt", ".", "savefig", "(", "'%s_scatter.pdf'", "%", "(", "fname", ")", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.test_calls.show_decomp.decomp_rand": [[29, 38], ["int", "int", "int", "int"], "function", ["None"], ["", "def", "decomp_rand", "(", "clse", ",", "sshe", ",", "total", ")", ":", "\n", "\t", "clsw", "=", "total", "*", "clse", "\n", "clsr", "=", "total", "-", "clsw", "\n", "\n", "crr", "=", "clsr", "*", "(", "1", "-", "sshe", ")", "\n", "crw", "=", "clsr", "*", "sshe", "\n", "cwr", "=", "clsw", "*", "(", "1", "-", "sshe", ")", "\n", "cww", "=", "clsw", "*", "sshe", "\n", "return", "int", "(", "crr", ")", ",", "int", "(", "crw", ")", ",", "int", "(", "cwr", ")", ",", "int", "(", "cww", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.test_calls.show_decomp.show_decomp": [[39, 58], ["count_each", "torch.save", "print", "show_decomp.decomp_rand", "numpy.arange", "plt.bar", "plt.bar", "plt.ylabel", "plt.xticks", "plt.legend", "plt.savefig", "plt.close", "pair_buckets", "sum"], "function", ["home.repos.pwc.inspect_result.eyalperry88_lethean.utils.test_helpers.count_each", "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.misc.ProgressMeter.print", "home.repos.pwc.inspect_result.eyalperry88_lethean.test_calls.show_decomp.decomp_rand", "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.test_helpers.pair_buckets"], ["", "def", "show_decomp", "(", "cls_initial", ",", "cls_correct", ",", "ssh_initial", ",", "ssh_correct", ",", "fname", ")", ":", "\n", "\t", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "from", "utils", ".", "test_helpers", "import", "count_each", ",", "pair_buckets", "\n", "\n", "dtrue", "=", "count_each", "(", "pair_buckets", "(", "cls_correct", ",", "ssh_correct", ")", ")", "\n", "torch", ".", "save", "(", "dtrue", ",", "'%s_dec.pth'", "%", "(", "fname", ")", ")", "\n", "print", "(", "'Error decoposition:'", ",", "*", "dtrue", ")", "\n", "drand", "=", "decomp_rand", "(", "cls_initial", ",", "ssh_initial", ",", "sum", "(", "dtrue", ")", ")", "\n", "\n", "width", "=", "0.25", "\n", "ind", "=", "np", ".", "arange", "(", "4", ")", "\n", "plt", ".", "bar", "(", "ind", ",", "drand", ",", "width", ",", "label", "=", "'independent'", ")", "\n", "plt", ".", "bar", "(", "ind", "+", "width", ",", "dtrue", ",", "width", ",", "label", "=", "'observed'", ")", "\n", "\n", "plt", ".", "ylabel", "(", "'count'", ")", "\n", "plt", ".", "xticks", "(", "ind", "+", "width", "/", "2", ",", "(", "'RR'", ",", "'RW'", ",", "'WR'", ",", "'WW'", ")", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'best'", ")", "\n", "plt", ".", "savefig", "(", "'%s_bar.pdf'", "%", "(", "fname", ")", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.test_calls.test_video.run_plain": [[59, 72], ["net.eval", "prepare_test_data", "tqdm.tqdm", "enumerate", "zip", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "inputs.cuda.cuda", "net", "torch.functional.softmax().cpu().numpy", "utils.imagenet_vid.convert_predictions", "torch.functional.softmax().cpu", "torch.functional.softmax"], "function", ["home.repos.pwc.inspect_result.eyalperry88_lethean.utils.train_helpers.prepare_test_data", "home.repos.pwc.inspect_result.eyalperry88_lethean.utils.imagenet_vid.convert_predictions"], ["", "def", "run_plain", "(", ")", ":", "\n", "\t", "preds", "=", "{", "}", "\n", "net", ".", "eval", "(", ")", "\n", "_", ",", "teloader", "=", "prepare_test_data", "(", "args", ")", "\n", "for", "i", ",", "(", "inputs", ",", "files", ")", "in", "tqdm", "(", "enumerate", "(", "teloader", ")", ")", ":", "\n", "\t\t", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "outputs", "=", "net", "(", "inputs", ")", "\n", "outputs", "=", "nn", ".", "functional", ".", "softmax", "(", "outputs", ",", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "outputs", "=", "convert_predictions", "(", "outputs", ",", "ia", ",", "ib", ",", "wnid", ")", "\n", "", "for", "output", ",", "file", "in", "zip", "(", "outputs", ",", "files", ")", ":", "\n", "\t\t\t", "preds", "[", "file", "]", "=", "output", "\n", "", "", "return", "preds", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.test_calls.test_video.pred_single": [[73, 80], ["model.eval", "te_transforms().unsqueeze", "utils.imagenet_vid.convert_predictions", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "torch.functional.softmax().cpu().numpy", "te_transforms", "te_transforms().unsqueeze.cuda", "torch.functional.softmax().cpu", "torch.functional.softmax"], "function", ["home.repos.pwc.inspect_result.eyalperry88_lethean.utils.imagenet_vid.convert_predictions"], ["", "def", "pred_single", "(", "model", ",", "image", ")", ":", "\n", "\t", "model", ".", "eval", "(", ")", "\n", "inputs", "=", "te_transforms", "(", "image", ")", ".", "unsqueeze", "(", "0", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t", "outputs", "=", "model", "(", "inputs", ".", "cuda", "(", ")", ")", "\n", "outputs", "=", "nn", ".", "functional", ".", "softmax", "(", "outputs", ",", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "return", "convert_predictions", "(", "outputs", ",", "ia", ",", "ib", ",", "wnid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.test_calls.test_video.run_adapt": [[81, 107], ["torch.CrossEntropyLoss().cuda", "torch.SGD", "list", "random.shuffle", "tqdm.tqdm", "ssh.parameters", "torchvision.datasets.folder.default_loader", "sshconf.append", "test_video.pred_single", "pmsets.items", "test_video.run_adapt.local_adapt"], "function", ["home.repos.pwc.inspect_result.eyalperry88_lethean.test_calls.test_video.pred_single"], ["", "def", "run_adapt", "(", ")", ":", "\n", "\t", "preds", "=", "{", "}", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "ssh", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "\n", "def", "local_adapt", "(", "name", ",", "sshconf", ")", ":", "\n", "\t\t", "image", "=", "loader", "(", "args", ".", "dataroot", "+", "name", ")", "\n", "sshconf", ".", "append", "(", "test_single", "(", "ssh", ",", "image", ",", "0", ")", "[", "1", "]", ")", "\n", "if", "sshconf", "[", "-", "1", "]", "<", "args", ".", "threshold", ":", "\n", "\t\t\t", "adapt_single", "(", "ssh", ",", "image", ",", "optimizer", ",", "criterion", ",", "args", ".", "niter", ",", "args", ".", "batch_size", ")", "\n", "", "preds", "[", "name", "]", "=", "pred_single", "(", "net", ",", "image", ")", "\n", "\n", "", "import", "random", "\n", "aa", "=", "list", "(", "pmsets", ".", "items", "(", ")", ")", "\n", "random", ".", "shuffle", "(", "aa", ")", "\n", "\n", "for", "anchor", ",", "pmset", "in", "tqdm", "(", "aa", ")", ":", "\n", "\t\t", "if", "not", "args", ".", "online", ":", "\n", "\t\t\t", "net", ".", "load_state_dict", "(", "ckpt", "[", "'net'", "]", ")", "\n", "head", ".", "load_state_dict", "(", "ckpt", "[", "'head'", "]", ")", "\n", "\n", "", "sshconf", "=", "[", "]", "\n", "local_adapt", "(", "anchor", ",", "sshconf", ")", "\n", "# for elem in pmset:", "\n", "# \tlocal_adapt(elem, sshconf)\t", "\n", "", "return", "preds", "\n", "\n"]], "home.repos.pwc.inspect_result.eyalperry88_lethean.test_calls.test_video.pmk_from_preds": [[108, 122], ["pmsets.items", "one_hot_anc.append", "correct_pmk.append", "one_hot_pmk.append", "numpy.argmax", "all"], "function", ["None"], ["", "def", "pmk_from_preds", "(", "preds", ")", ":", "\n", "\t", "one_hot_anc", "=", "[", "]", "\n", "one_hot_pmk", "=", "[", "]", "\n", "correct_pmk", "=", "[", "]", "\n", "for", "anchor", ",", "pmset", "in", "pmsets", ".", "items", "(", ")", ":", "\n", "\t\t", "correct_anc", "=", "np", ".", "argmax", "(", "preds", "[", "anchor", "]", ")", "in", "labels", "[", "anchor", "]", "\n", "correct_pms", "=", "[", "correct_anc", "]", "\n", "one_hot_anc", ".", "append", "(", "correct_anc", ")", "\n", "\n", "# for elem in pmset:", "\n", "# \tcorrect_pms.append(np.argmax(preds[elem]) in labels[elem])", "\n", "correct_pmk", ".", "append", "(", "correct_pms", ")", "\n", "one_hot_pmk", ".", "append", "(", "all", "(", "correct_pms", ")", ")", "\n", "", "return", "one_hot_anc", ",", "one_hot_pmk", ",", "correct_pmk", "\n", "\n"]]}