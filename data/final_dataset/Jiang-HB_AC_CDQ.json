{"home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_CDDQN_code.main.main": [[5, 20], ["torch.device", "print", "algorithms.ac_cddqn.AC_CDDQN", "algorithms.ac_cddqn.AC_CDDQN.run_steps", "str", "os.path.exists", "os.mkdir", "torch.cuda.is_available"], "function", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.base_dqn.BaseDQN.run_steps"], ["def", "main", "(", ")", ":", "\n", "\n", "    ", "opts", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", "\n", "print", "(", "'Cuda available?: '", "+", "str", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", ")", "\n", "\n", "for", "id", "in", "opts", ".", "ids", ":", "\n", "\n", "        ", "opts", ".", "id", "=", "id", "\n", "opts", ".", "tag", "=", "\"%s_%s_id%d\"", "%", "(", "opts", ".", "env_nm", ",", "opts", ".", "alg_tag", ",", "opts", ".", "id", ")", "\n", "opts", ".", "save_dir", "=", "\"./results/%s/%s\"", "%", "(", "opts", ".", "agent_nm", ",", "opts", ".", "tag", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "opts", ".", "save_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "opts", ".", "save_dir", ")", "\n", "\n", "", "agent", "=", "Method", "(", "opts", ")", "\n", "agent", ".", "run_steps", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.attr_dict.AttrDict.__init__": [[3, 5], ["dict.__init__"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.modules.actor.Actor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AttrDict", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.attr_dict.AttrDict.__getattr__": [[6, 10], ["key.startswith", "attr_dict.AttrDict.get"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "key", ")", ":", "\n", "        ", "if", "key", ".", "startswith", "(", "'__'", ")", ":", "\n", "            ", "raise", "AttributeError", "\n", "", "return", "self", ".", "get", "(", "key", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.attr_dict.AttrDict.__setattr__": [[11, 15], ["key.startswith", "AttributeError"], "methods", ["None"], ["", "def", "__setattr__", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "if", "key", ".", "startswith", "(", "'__'", ")", ":", "\n", "            ", "raise", "AttributeError", "(", "\"Cannot set magic attribute '{}'\"", ".", "format", "(", "key", ")", ")", "\n", "", "self", "[", "key", "]", "=", "value", "", "", "", ""]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.commons.get_state": [[3, 5], ["torch.tensor().permute().unsqueeze().float().cuda", "torch.tensor().permute().unsqueeze().float", "torch.tensor().permute().unsqueeze", "torch.tensor().permute", "torch.tensor"], "function", ["None"], ["def", "get_state", "(", "s", ")", ":", "\n", "    ", "return", "(", "torch", ".", "tensor", "(", "s", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ")", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.commons.to_numpy": [[6, 8], ["t.cpu().detach().numpy", "t.cpu().detach", "t.cpu"], "function", ["None"], ["", "def", "to_numpy", "(", "t", ")", ":", "\n", "  ", "return", "t", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.commons.world_dynamics": [[9, 28], ["env.act", "commons.get_state", "torch.tensor().cuda", "env.state", "torch.tensor().float().cuda", "torch.tensor().cuda", "numpy.random.binomial", "torch.tensor().cuda", "torch.tensor", "torch.no_grad", "[].view", "torch.tensor().float", "torch.tensor", "torch.tensor", "torch.tensor", "random.randrange", "random.randrange", "policy_net1", "policy_net2"], "function", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.space_invaders.Env.act", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.commons.get_state", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.space_invaders.Env.state"], ["", "def", "world_dynamics", "(", "opts", ",", "t", ",", "s", ",", "env", ",", "policy_net1", ",", "policy_net2", ")", ":", "\n", "# A uniform random policy is run before the learning starts", "\n", "    ", "if", "t", "<", "opts", ".", "replay_start_size", ":", "\n", "        ", "action", "=", "torch", ".", "tensor", "(", "[", "[", "random", ".", "randrange", "(", "opts", ".", "num_actions", ")", "]", "]", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "epsilon", "=", "opts", ".", "end_epsilon", "if", "t", "-", "opts", ".", "replay_start_size", ">=", "opts", ".", "first_n_frames", "else", "(", "(", "opts", ".", "end_epsilon", "-", "opts", ".", "epsilon", ")", "/", "opts", ".", "first_n_frames", ")", "*", "(", "t", "-", "opts", ".", "replay_start_size", ")", "+", "opts", ".", "epsilon", "\n", "\n", "if", "np", ".", "random", ".", "binomial", "(", "1", ",", "epsilon", ")", "==", "1", ":", "\n", "            ", "action", "=", "torch", ".", "tensor", "(", "[", "[", "random", ".", "randrange", "(", "opts", ".", "num_actions", ")", "]", "]", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "action", "=", "(", "policy_net1", "(", "s", ")", "+", "policy_net2", "(", "s", ")", ")", ".", "max", "(", "1", ")", "[", "1", "]", ".", "view", "(", "1", ",", "1", ")", "\n", "\n", "", "", "", "reward", ",", "terminated", "=", "env", ".", "act", "(", "action", ")", "\n", "s_prime", "=", "get_state", "(", "env", ".", "state", "(", ")", ")", "\n", "\n", "# return s_prime.cpu(), action.cpu(), torch.tensor([[reward]]).float(), torch.tensor([[terminated]])", "\n", "return", "s_prime", ",", "action", ",", "torch", ".", "tensor", "(", "[", "[", "reward", "]", "]", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", ",", "torch", ".", "tensor", "(", "[", "[", "terminated", "]", "]", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.commons.load_data": [[3, 8], ["open", "pickle.load", "open.close"], "function", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3.ac_td3.AC_TD3.load"], ["def", "get_state", "(", "s", ")", ":", "\n", "    ", "return", "(", "torch", ".", "tensor", "(", "s", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ")", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "", "def", "to_numpy", "(", "t", ")", ":", "\n", "  ", "return", "t", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.commons.save_data": [[9, 13], ["open", "pickle.dump", "open.close"], "function", ["None"], ["", "def", "world_dynamics", "(", "opts", ",", "t", ",", "s", ",", "env", ",", "policy_net1", ",", "policy_net2", ")", ":", "\n", "# A uniform random policy is run before the learning starts", "\n", "    ", "if", "t", "<", "opts", ".", "replay_start_size", ":", "\n", "        ", "action", "=", "torch", ".", "tensor", "(", "[", "[", "random", ".", "randrange", "(", "opts", ".", "num_actions", ")", "]", "]", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.replay.Replay.__init__": [[9, 16], ["int", "collections.namedtuple"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "memory_size", ",", "batch_size", ",", "device", ")", ":", "\n", "    ", "self", ".", "memory_size", "=", "int", "(", "memory_size", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "experience", "=", "namedtuple", "(", "\"Experience\"", ",", "field_names", "=", "[", "\"state\"", ",", "\"action\"", ",", "\"next_state\"", ",", "\"reward\"", ",", "\"done\"", "]", ")", "\n", "self", ".", "memory", "=", "[", "]", "\n", "self", ".", "pos", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.replay.Replay.add": [[17, 26], ["replay.Replay.experience", "len", "replay.Replay.memory.append"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "experience", ")", ":", "\n", "    ", "'''\n    Add experience(s) into memory\n    '''", "\n", "for", "exp", "in", "experience", ":", "\n", "      ", "if", "len", "(", "self", ".", "memory", ")", "<", "self", ".", "memory_size", ":", "\n", "        ", "self", ".", "memory", ".", "append", "(", "None", ")", "\n", "", "self", ".", "memory", "[", "self", ".", "pos", "]", "=", "self", ".", "experience", "(", "*", "exp", ")", "\n", "self", ".", "pos", "=", "(", "self", ".", "pos", "+", "1", ")", "%", "self", ".", "memory_size", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.replay.Replay.sample": [[27, 40], ["replay.Replay.empty", "utils.helper.to_tensor", "utils.helper.to_tensor", "utils.helper.to_tensor", "utils.helper.to_tensor", "utils.helper.to_tensor", "numpy.random.randint", "len", "range", "numpy.asarray", "numpy.asarray", "numpy.asarray", "int"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.replay.Replay.empty", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.helper.to_tensor", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.helper.to_tensor", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.helper.to_tensor", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.helper.to_tensor", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.helper.to_tensor"], ["", "", "def", "sample", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "empty", "(", ")", ":", "\n", "      ", "return", "None", "\n", "", "sampled_indices", "=", "[", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "memory", ")", ")", "for", "_", "in", "range", "(", "self", ".", "batch_size", ")", "]", "\n", "sampled_data", "=", "[", "self", ".", "memory", "[", "idx", "]", "for", "idx", "in", "sampled_indices", "]", "\n", "# Stack sampled data and convert them to tensors", "\n", "states", "=", "to_tensor", "(", "[", "np", ".", "asarray", "(", "e", ".", "state", ")", "for", "e", "in", "sampled_data", "if", "e", "is", "not", "None", "]", ",", "self", ".", "device", ")", "\n", "actions", "=", "to_tensor", "(", "[", "np", ".", "asarray", "(", "[", "e", ".", "action", "]", ")", "for", "e", "in", "sampled_data", "if", "e", "is", "not", "None", "]", ",", "self", ".", "device", ")", "\n", "next_states", "=", "to_tensor", "(", "[", "np", ".", "asarray", "(", "e", ".", "next_state", ")", "for", "e", "in", "sampled_data", "if", "e", "is", "not", "None", "]", ",", "self", ".", "device", ")", "\n", "rewards", "=", "to_tensor", "(", "[", "e", ".", "reward", "for", "e", "in", "sampled_data", "if", "e", "is", "not", "None", "]", ",", "self", ".", "device", ")", "\n", "dones", "=", "to_tensor", "(", "[", "int", "(", "e", ".", "done", ")", "for", "e", "in", "sampled_data", "if", "e", "is", "not", "None", "]", ",", "self", ".", "device", ")", "\n", "sampled_data", "=", "[", "states", ",", "actions", ",", "next_states", ",", "rewards", ",", "dones", "]", "\n", "return", "sampled_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.replay.Replay.__len__": [[41, 43], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "memory", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.replay.Replay.size": [[44, 46], ["None"], "methods", ["None"], ["", "def", "size", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "memory_size", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.replay.Replay.empty": [[47, 49], ["len"], "methods", ["None"], ["", "def", "empty", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "memory", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.replay.Replay.shuffle": [[50, 52], ["numpy.random.shuffle"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.replay.Replay.shuffle"], ["", "def", "shuffle", "(", "self", ")", ":", "\n", "    ", "np", ".", "random", ".", "shuffle", "(", "self", ".", "memory", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.modules.NetworkGlue.__init__": [[19, 23], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.modules.actor.Actor.__init__"], ["def", "__init__", "(", "self", ",", "feature_net", ",", "value_net", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feature_net", "=", "feature_net", "\n", "self", ".", "value_net", "=", "value_net", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.modules.NetworkGlue.forward": [[24, 28], ["modules.NetworkGlue.feature_net", "modules.NetworkGlue.value_net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "f", "=", "self", ".", "feature_net", "(", "x", ")", "\n", "v", "=", "self", ".", "value_net", "(", "f", ")", "\n", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.modules.MLP.__init__": [[35, 46], ["torch.ReLU", "torch.ReLU", "torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "len", "modules.MLP.mlp.append", "modules.layer_init", "len", "modules.MLP.mlp.append", "torch.Linear", "torch.Linear", "modules.MLP.mlp.append"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.modules.actor.Actor.__init__", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.modules.layer_init"], ["def", "__init__", "(", "self", ",", "layer_dims", ",", "hidden_activation", "=", "nn", ".", "ReLU", "(", ")", ",", "output_activation", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# Create layers", "\n", "self", ".", "mlp", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "layer_dims", "[", ":", "-", "1", "]", ")", ")", ":", "\n", "            ", "dim_in", ",", "dim_out", "=", "layer_dims", "[", "i", "]", ",", "layer_dims", "[", "i", "+", "1", "]", "\n", "self", ".", "mlp", ".", "append", "(", "layer_init", "(", "nn", ".", "Linear", "(", "dim_in", ",", "dim_out", ",", "bias", "=", "True", ")", ")", ")", "\n", "if", "i", "+", "2", "!=", "len", "(", "layer_dims", ")", ":", "\n", "                ", "self", ".", "mlp", ".", "append", "(", "hidden_activation", ")", "\n", "", "elif", "output_activation", "!=", "None", ":", "\n", "                ", "self", ".", "mlp", ".", "append", "(", "output_activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.modules.MLP.forward": [[47, 51], ["layer"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "mlp", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.modules.Conv2d_MinAtar.__init__": [[57, 66], ["torch.Module.__init__", "modules.layer_init", "modules.layer_init", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "modules.Conv2d_MinAtar.__init__.size_linear_unit"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.modules.actor.Actor.__init__", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.modules.layer_init", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.modules.layer_init"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "feature_dim", "=", "128", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "layer_init", "(", "nn", ".", "Conv2d", "(", "in_channels", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", ")", "\n", "\n", "def", "size_linear_unit", "(", "size", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", ":", "\n", "            ", "return", "(", "size", "-", "(", "kernel_size", "-", "1", ")", "-", "1", ")", "//", "stride", "+", "1", "\n", "\n", "", "linear_input_size", "=", "size_linear_unit", "(", "10", ")", "*", "size_linear_unit", "(", "10", ")", "*", "16", "\n", "self", ".", "fc2", "=", "layer_init", "(", "nn", ".", "Linear", "(", "linear_input_size", ",", "feature_dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.modules.Conv2d_MinAtar.forward": [[67, 72], ["torch.relu", "torch.relu", "torch.relu.view", "torch.relu", "torch.relu", "modules.Conv2d_MinAtar.conv1", "torch.relu.size", "modules.Conv2d_MinAtar.fc2"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.replay.Replay.size"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "y", "=", "y", ".", "view", "(", "y", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "y", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "y", ")", ")", "\n", "return", "y", "", "", "", ""]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.modules.layer_init": [[4, 12], ["torch.init.kaiming_normal_", "layer.weight.data.mul_", "torch.init.constant_"], "function", ["None"], ["def", "layer_init", "(", "layer", ",", "w_scale", "=", "1.0", ")", ":", "\n", "# Initialize all weights and biases in layer and return it", "\n", "# nn.init.orthogonal_(layer.weight.data)", "\n", "# nn.init.xavier_normal_(layer.weight.data, gain=1)", "\n", "  ", "nn", ".", "init", ".", "kaiming_normal_", "(", "layer", ".", "weight", ".", "data", ",", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "layer", ".", "weight", ".", "data", ".", "mul_", "(", "w_scale", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "layer", ".", "bias", ".", "data", ",", "0", ")", "# layer.bias.data.zero_()", "\n", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.base_dqn.BaseDQN.__init__": [[10, 49], ["minatar.Environment", "base_dqn.BaseDQN.env.num_actions", "base_dqn.BaseDQN.env.state_shape", "base_dqn.BaseDQN.get_state_size", "base_dqn.BaseDQN.creatNN().to", "torch.RMSprop", "torch.RMSprop", "torch.RMSprop", "torch.RMSprop", "utils.replay.Replay", "base_dqn.BaseDQN.Q_net[].parameters", "base_dqn.BaseDQN.creatNN"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.minatar.environment.Environment.num_actions", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.space_invaders.Env.state_shape", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.base_dqn.BaseDQN.get_state_size", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.base_dqn.BaseDQN.creatNN"], ["    ", "def", "__init__", "(", "self", ",", "opts", ")", ":", "\n", "\n", "        ", "self", ".", "opts", "=", "opts", "\n", "self", ".", "env_name", "=", "opts", ".", "env_nm", "\n", "self", ".", "agent_name", "=", "opts", ".", "agent_nm", "\n", "self", ".", "max_episode_steps", "=", "opts", ".", "num_frames", "\n", "self", ".", "device", "=", "opts", ".", "device", "\n", "self", ".", "batch_size", "=", "opts", ".", "batch_size", "\n", "self", ".", "discount", "=", "opts", ".", "discount", "\n", "self", ".", "gradient_clip", "=", "opts", ".", "gradient_clip", "\n", "\n", "# env", "\n", "self", ".", "env", "=", "Environment", "(", "self", ".", "env_name", ")", "\n", "self", ".", "action_size", "=", "self", ".", "env", ".", "num_actions", "(", ")", "\n", "self", ".", "state_shape", "=", "self", ".", "env", ".", "state_shape", "(", ")", "\n", "self", ".", "state_size", "=", "self", ".", "get_state_size", "(", ")", "\n", "self", ".", "history_length", "=", "self", ".", "state_shape", "[", "2", "]", "\n", "\n", "# network", "\n", "self", ".", "input_type", "=", "opts", ".", "input_type", "\n", "self", ".", "layer_dims", "=", "[", "opts", ".", "feature_dim", "]", "+", "opts", ".", "hidden_layers", "+", "[", "self", ".", "action_size", "]", "\n", "self", ".", "Q_net", "=", "[", "None", "]", "\n", "self", ".", "Q_net", "[", "0", "]", "=", "self", ".", "creatNN", "(", "self", ".", "input_type", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# optimizer", "\n", "self", ".", "optimizer", "=", "[", "None", "]", "\n", "self", ".", "optimizer", "[", "0", "]", "=", "optim", ".", "RMSprop", "(", "self", ".", "Q_net", "[", "0", "]", ".", "parameters", "(", ")", ",", "lr", "=", "opts", ".", "step_size", ",", "alpha", "=", "opts", ".", "squared_grad_momentum", ",", "centered", "=", "True", ",", "eps", "=", "opts", ".", "min_squared_grad", ")", "\n", "\n", "# normalizer", "\n", "self", ".", "state_normalizer", "=", "lambda", "x", ":", "x", "\n", "self", ".", "reward_normalizer", "=", "lambda", "x", ":", "x", "\n", "\n", "# replay buffer", "\n", "self", ".", "replay_buffer", "=", "Replay", "(", "opts", ".", "replay_buffer_size", ",", "self", ".", "batch_size", ",", "self", ".", "device", ")", "\n", "\n", "# update", "\n", "self", ".", "loss", "=", "f", ".", "smooth_l1_loss", "\n", "self", ".", "update_Q_net_index", "=", "0", "\n", "self", ".", "sgd_update_frequency", "=", "opts", ".", "training_freq", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.base_dqn.BaseDQN.get_state_size": [[50, 52], ["int", "numpy.prod"], "methods", ["None"], ["", "def", "get_state_size", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "np", ".", "prod", "(", "self", ".", "state_shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.base_dqn.BaseDQN.creatNN": [[53, 58], ["utils.modules.Conv2d_MinAtar", "utils.modules.MLP", "utils.modules.NetworkGlue", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "creatNN", "(", "self", ",", "input_type", ")", ":", "\n", "        ", "feature_net", "=", "Conv2d_MinAtar", "(", "in_channels", "=", "self", ".", "history_length", ",", "feature_dim", "=", "self", ".", "layer_dims", "[", "0", "]", ")", "\n", "value_net", "=", "MLP", "(", "layer_dims", "=", "self", ".", "layer_dims", ",", "hidden_activation", "=", "nn", ".", "ReLU", "(", ")", ")", "\n", "NN", "=", "NetworkGlue", "(", "feature_net", ",", "value_net", ")", "\n", "return", "NN", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.base_dqn.BaseDQN.comput_q": [[59, 63], ["actions.long.long.long"], "methods", ["None"], ["", "def", "comput_q", "(", "self", ",", "states", ",", "actions", ")", ":", "\n", "        ", "actions", "=", "actions", ".", "long", "(", ")", "\n", "q", "=", "self", ".", "Q_net", "[", "self", ".", "update_Q_net_index", "]", "(", "states", ")", ".", "gather", "(", "1", ",", "actions", ")", ".", "squeeze", "(", ")", "\n", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.base_dqn.BaseDQN.compute_q_target": [[64, 68], ["None"], "methods", ["None"], ["", "def", "compute_q_target", "(", "self", ",", "next_states", ",", "rewards", ",", "dones", ")", ":", "\n", "        ", "q_next", "=", "self", ".", "Q_net", "[", "0", "]", "(", "next_states", ")", ".", "detach", "(", ")", ".", "max", "(", "1", ")", "[", "0", "]", "\n", "q_target", "=", "rewards", "+", "self", ".", "discount", "*", "q_next", "*", "(", "1", "-", "dones", ")", "\n", "return", "q_target", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.base_dqn.BaseDQN.learn": [[69, 83], ["base_dqn.BaseDQN.replay_buffer.sample", "base_dqn.BaseDQN.compute_q_target", "base_dqn.BaseDQN.comput_q", "base_dqn.BaseDQN.loss", "base_dqn.BaseDQN.optimizer[].zero_grad", "base_dqn.BaseDQN.backward", "base_dqn.BaseDQN.optimizer[].step", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "base_dqn.BaseDQN.Q_net[].parameters"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.replay_buffer.ReplayBuffer.sample", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.algorithms.ac_cddqn.AC_CDDQN.compute_q_target", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.base_dqn.BaseDQN.comput_q", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.step.step"], ["", "def", "learn", "(", "self", ")", ":", "\n", "        ", "states", ",", "actions", ",", "next_states", ",", "rewards", ",", "dones", "=", "self", ".", "replay_buffer", ".", "sample", "(", ")", "\n", "\n", "# Compute q target", "\n", "q_target", "=", "self", ".", "compute_q_target", "(", "next_states", ",", "rewards", ",", "dones", ")", "\n", "# Compute q", "\n", "q", "=", "self", ".", "comput_q", "(", "states", ",", "actions", ")", "\n", "# Take an optimization step", "\n", "loss", "=", "self", ".", "loss", "(", "q", ",", "q_target", ")", "\n", "self", ".", "optimizer", "[", "self", ".", "update_Q_net_index", "]", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "self", ".", "gradient_clip", ">", "0", ":", "\n", "            ", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "Q_net", "[", "self", ".", "update_Q_net_index", "]", ".", "parameters", "(", ")", ",", "self", ".", "gradient_clip", ")", "\n", "", "self", ".", "optimizer", "[", "self", ".", "update_Q_net_index", "]", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.base_dqn.BaseDQN.save_experience": [[84, 88], ["base_dqn.BaseDQN.replay_buffer.add"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.replay_buffer.ReplayBuffer.add"], ["", "def", "save_experience", "(", "self", ",", "state", ",", "action", ",", "next_state", ",", "reward", ",", "done", ")", ":", "\n", "# Saves recent experience to replay buffer", "\n", "        ", "experience", "=", "[", "state", ",", "action", ",", "next_state", ",", "reward", ",", "done", "]", "\n", "self", ".", "replay_buffer", ".", "add", "(", "[", "experience", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.base_dqn.BaseDQN.get_action_selection_q_values": [[89, 93], ["utils.commons.to_numpy().flatten", "utils.commons.to_numpy"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.helper.to_numpy"], ["", "def", "get_action_selection_q_values", "(", "self", ",", "state", ")", ":", "\n", "        ", "q_values", "=", "self", ".", "Q_net", "[", "0", "]", "(", "state", ")", "\n", "q_values", "=", "to_numpy", "(", "q_values", ")", ".", "flatten", "(", ")", "\n", "return", "q_values", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.base_dqn.BaseDQN.get_action": [[94, 115], ["random.randrange", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "base_dqn.BaseDQN.get_action_selection_q_values", "numpy.argmax", "numpy.random.binomial", "random.randrange", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "base_dqn.BaseDQN.get_action_selection_q_values", "numpy.argmax"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.algorithms.ac_cddqn.AC_CDDQN.get_action_selection_q_values", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.algorithms.ac_cddqn.AC_CDDQN.get_action_selection_q_values"], ["", "def", "get_action", "(", "self", ",", "state", ",", "is_test", "=", "False", ")", ":", "\n", "\n", "        ", "if", "not", "is_test", ":", "\n", "            ", "if", "self", ".", "step_count", "<", "self", ".", "opts", ".", "replay_start_size", ":", "\n", "                ", "action", "=", "random", ".", "randrange", "(", "self", ".", "action_size", ")", "\n", "", "else", ":", "\n", "                ", "epsilon", "=", "self", ".", "opts", ".", "end_epsilon", "if", "self", ".", "step_count", "-", "self", ".", "opts", ".", "replay_start_size", ">=", "self", ".", "opts", ".", "first_n_frames", "else", "(", "(", "self", ".", "opts", ".", "end_epsilon", "-", "self", ".", "opts", ".", "epsilon", ")", "/", "self", ".", "opts", ".", "first_n_frames", ")", "*", "(", "self", ".", "step_count", "-", "self", ".", "opts", ".", "replay_start_size", ")", "+", "self", ".", "opts", ".", "epsilon", "\n", "\n", "if", "np", ".", "random", ".", "binomial", "(", "1", ",", "epsilon", ")", "==", "1", ":", "\n", "                    ", "action", "=", "random", ".", "randrange", "(", "self", ".", "action_size", ")", "\n", "", "else", ":", "\n", "                    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "q_values", "=", "self", ".", "get_action_selection_q_values", "(", "state", ")", "\n", "action", "=", "np", ".", "argmax", "(", "q_values", ")", "\n", "", "", "", "", "else", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "q_values", "=", "self", ".", "get_action_selection_q_values", "(", "state", ")", "\n", "action", "=", "np", ".", "argmax", "(", "q_values", ")", "\n", "\n", "", "", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.base_dqn.BaseDQN.evaluation": [[116, 146], ["minatar.Environment", "range", "print", "[].item", "minatar.Environment.reset", "utils.commons.get_state", "max_qs.append", "scores.append", "real_qs.append", "numpy.asarray", "numpy.asarray", "numpy.asarray", "minatar.Environment.state", "base_dqn.BaseDQN.evaluation.max_q"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.space_invaders.Env.reset", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.commons.get_state", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.space_invaders.Env.state", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3.ac_td3.AC_TD3.max_q"], ["", "def", "evaluation", "(", "self", ")", ":", "\n", "\n", "        ", "def", "max_q", "(", "state", ")", ":", "\n", "            ", "return", "self", ".", "Q_net", "[", "0", "]", "(", "state", ")", ".", "max", "(", "1", ")", "[", "0", "]", ".", "item", "(", ")", "\n", "\n", "", "scores", "=", "[", "]", "\n", "max_qs", ",", "real_qs", "=", "[", "]", ",", "[", "]", "\n", "env", "=", "Environment", "(", "self", ".", "opts", ".", "env_nm", ")", "\n", "for", "seed", "in", "range", "(", "self", ".", "opts", ".", "n_eval_episodes", ")", ":", "\n", "# env = Environment(self.opts.env_nm, random_seed=10*seed)", "\n", "            ", "env", ".", "reset", "(", ")", "\n", "state", "=", "get_state", "(", "env", ".", "state", "(", ")", ")", "\n", "score", ",", "done", "=", "0.", ",", "False", "\n", "max_qs", ".", "append", "(", "max_q", "(", "state", ")", ")", "\n", "discount_score", ",", "t", "=", "0.", ",", "0", "\n", "while", "not", "done", ":", "\n", "                ", "action", "=", "self", ".", "get_action", "(", "state", ",", "is_test", "=", "True", ")", "\n", "reward", ",", "done", "=", "env", ".", "act", "(", "action", ")", "\n", "reward", "=", "reward", ".", "item", "(", ")", "if", "not", "isinstance", "(", "reward", ",", "int", ")", "else", "reward", "\n", "score", "+=", "reward", "\n", "discount_score", "+=", "(", "self", ".", "opts", ".", "discount", "**", "t", ")", "*", "reward", "\n", "t", "+=", "1", "\n", "state", "=", "get_state", "(", "env", ".", "state", "(", ")", ")", "\n", "", "scores", ".", "append", "(", "score", ")", "\n", "real_qs", ".", "append", "(", "discount_score", ")", "\n", "\n", "", "print", "(", "\"timesteps %d, mean score %.4f, mean max_q %.4f, real_q %.4f\"", "%", "(", "\n", "self", ".", "step_count", ",", "np", ".", "mean", "(", "scores", ")", ",", "np", ".", "mean", "(", "max_qs", ")", ",", "np", ".", "mean", "(", "real_qs", ")", ")", ")", "\n", "\n", "return", "np", ".", "asarray", "(", "scores", ")", ",", "np", ".", "asarray", "(", "max_qs", ")", ",", "np", ".", "asarray", "(", "real_qs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.base_dqn.BaseDQN.run_steps": [[147, 205], ["time.time", "utils.recorder.Recoder", "print", "base_dqn.BaseDQN.env.reset", "base_dqn.BaseDQN.state_normalizer", "data_return.append", "frame_stamp.append", "base_dqn.BaseDQN.env.state", "base_dqn.BaseDQN.get_action", "base_dqn.BaseDQN.env.act", "base_dqn.BaseDQN.state_normalizer", "base_dqn.BaseDQN.reward_normalizer", "base_dqn.BaseDQN.save_experience", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "utils.commons.get_state", "base_dqn.BaseDQN.env.state", "base_dqn.BaseDQN.transpose", "base_dqn.BaseDQN.transpose", "base_dqn.BaseDQN.learn", "base_dqn.BaseDQN.evaluation", "utils.recorder.Recoder.add_result", "utils.recorder.Recoder.save_result", "os.path.join", "str", "str", "time.time", "str", "numpy.around", "str", "str"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.space_invaders.Env.reset", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.space_invaders.Env.state", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.base_dqn.BaseDQN.get_action", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.space_invaders.Env.act", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.base_dqn.BaseDQN.save_experience", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3.ac_td3.AC_TD3.save", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3.ac_td3.AC_TD3.save", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3.ac_td3.AC_TD3.save", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3.ac_td3.AC_TD3.save", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3.ac_td3.AC_TD3.save", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3.ac_td3.AC_TD3.save", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3.ac_td3.AC_TD3.save", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3.ac_td3.AC_TD3.save", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3.ac_td3.AC_TD3.save", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3.ac_td3.AC_TD3.save", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3.ac_td3.AC_TD3.save", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3.ac_td3.AC_TD3.save", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3.ac_td3.AC_TD3.save", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3.ac_td3.AC_TD3.save", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3.ac_td3.AC_TD3.save", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3.ac_td3.AC_TD3.save", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.commons.get_state", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.space_invaders.Env.state", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.algorithms.ac_cddqn.AC_CDDQN.learn", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.evaluation.evaluation", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.recorder.Recoder.add_result", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.recorder.Recoder.save_result"], ["", "def", "run_steps", "(", "self", ")", ":", "\n", "# Set initial values", "\n", "        ", "data_return", ",", "frame_stamp", ",", "avg_return", "=", "[", "]", ",", "[", "]", ",", "0.", "\n", "t_start", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "step_count", ",", "self", ".", "episode_count", ",", "self", ".", "policy_net_update_counter", "=", "0", ",", "0", ",", "0", "\n", "recoder", "=", "Recoder", "(", "self", ".", "opts", ".", "save_dir", ",", "seed", "=", "0", ")", "\n", "\n", "while", "self", ".", "step_count", "<", "self", ".", "opts", ".", "num_frames", ":", "\n", "            ", "print", "(", "\"%d / %d: %.4f %s\"", "%", "(", "self", ".", "step_count", ",", "self", ".", "opts", ".", "num_frames", ",", "self", ".", "step_count", "/", "self", ".", "opts", ".", "num_frames", ",", "self", ".", "opts", ".", "tag", ")", ")", "\n", "G", "=", "0.0", "\n", "self", ".", "env", ".", "reset", "(", ")", "\n", "state", "=", "self", ".", "state_normalizer", "(", "self", ".", "env", ".", "state", "(", ")", ")", "\n", "done", "=", "False", "\n", "\n", "while", "(", "not", "done", ")", "and", "self", ".", "step_count", "<", "self", ".", "opts", ".", "num_frames", ":", "\n", "\n", "                ", "action", "=", "self", ".", "get_action", "(", "get_state", "(", "state", ")", ")", "\n", "reward", ",", "done", "=", "self", ".", "env", ".", "act", "(", "action", ")", "\n", "next_state", "=", "self", ".", "state_normalizer", "(", "self", ".", "env", ".", "state", "(", ")", ")", "\n", "reward", "=", "self", ".", "reward_normalizer", "(", "reward", ")", "\n", "# reward = reward.item() if not isinstance(reward, int) else reward", "\n", "\n", "self", ".", "save_experience", "(", "state", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ",", "action", ",", "next_state", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ",", "reward", ",", "done", ")", "\n", "\n", "if", "self", ".", "step_count", ">", "self", ".", "opts", ".", "replay_start_size", "and", "self", ".", "step_count", "%", "self", ".", "sgd_update_frequency", "==", "0", ":", "\n", "                    ", "self", ".", "policy_net_update_counter", "+=", "1", "\n", "self", ".", "learn", "(", ")", "\n", "\n", "", "if", "self", ".", "step_count", "%", "self", ".", "opts", ".", "eval_iterval", "==", "0", ":", "\n", "                    ", "eval_scores", ",", "max_qs", ",", "real_qs", "=", "self", ".", "evaluation", "(", ")", "\n", "recoder", ".", "add_result", "(", "{", "\"eval_scores\"", ":", "eval_scores", ",", "\"max_qs\"", ":", "max_qs", ",", "\"real_qs\"", ":", "real_qs", "}", ",", "\"test_return\"", ")", "\n", "recoder", ".", "save_result", "(", ")", "\n", "\n", "", "G", "+=", "reward", "\n", "self", ".", "step_count", "+=", "1", "\n", "state", "=", "next_state", "\n", "\n", "", "self", ".", "episode_count", "+=", "1", "\n", "data_return", ".", "append", "(", "G", ")", "\n", "frame_stamp", ".", "append", "(", "self", ".", "step_count", ")", "\n", "\n", "avg_return", "=", "0.99", "*", "avg_return", "+", "0.01", "*", "G", "\n", "if", "self", ".", "episode_count", "%", "50", "==", "0", ":", "\n", "                ", "print", "(", "\"Episode \"", "+", "str", "(", "self", ".", "episode_count", ")", "+", "\" | Return: \"", "+", "str", "(", "G", ")", "+", "\" | Avg return: \"", "+", "\n", "str", "(", "np", ".", "around", "(", "avg_return", ",", "2", ")", ")", "+", "\" | Frame: \"", "+", "str", "(", "self", ".", "step_count", ")", "+", "\" | Time per frame: \"", "+", "str", "(", "\n", "(", "time", ".", "time", "(", ")", "-", "t_start", ")", "/", "self", ".", "step_count", ")", ")", "\n", "\n", "# Save model data and other intermediate data if the corresponding flag is true", "\n", "", "if", "self", ".", "opts", ".", "store_intermediate_result", "and", "self", ".", "episode_count", "%", "50", "==", "0", ":", "\n", "                ", "torch", ".", "save", "(", "{", "\n", "'episode'", ":", "self", ".", "episode_count", ",", "\n", "'frame'", ":", "self", ".", "step_count", ",", "\n", "'policy_net_update_counter'", ":", "self", ".", "policy_net_update_counter", ",", "\n", "'avg_return'", ":", "avg_return", ",", "\n", "'return_per_run'", ":", "data_return", ",", "\n", "'frame_stamp_per_run'", ":", "frame_stamp", ",", "\n", "'replay_buffer'", ":", "[", "]", "\n", "}", ",", "os", ".", "path", ".", "join", "(", "self", ".", "opts", ".", "save_dir", ",", "\"checkpoint.pth\"", ")", ")", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.helper.get_time_str": [[9, 11], ["datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["def", "get_time_str", "(", ")", ":", "\n", "  ", "return", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%y.%m.%d-%H:%M:%S\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.helper.str_to_class": [[20, 25], ["getattr"], "function", ["None"], ["", "def", "str_to_class", "(", "module_name", ",", "class_name", ")", ":", "\n", "  ", "'''\n  Convert string to class\n  '''", "\n", "return", "getattr", "(", "sys", ".", "modules", "[", "module_name", "]", ",", "class_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.helper.set_one_thread": [[26, 33], ["torch.set_num_threads"], "function", ["None"], ["", "def", "set_one_thread", "(", ")", ":", "\n", "  ", "'''\n  Set number of threads for pytorch to 1\n  '''", "\n", "os", ".", "environ", "[", "'OMP_NUM_THREADS'", "]", "=", "'1'", "\n", "os", ".", "environ", "[", "'MKL_NUM_THREADS'", "]", "=", "'1'", "\n", "torch", ".", "set_num_threads", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.helper.to_tensor": [[34, 43], ["isinstance", "numpy.asarray", "torch.tensor"], "function", ["None"], ["", "def", "to_tensor", "(", "x", ",", "device", ")", ":", "\n", "  ", "'''\n  Convert an array to tensor\n  '''", "\n", "if", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", ":", "\n", "    ", "return", "x", "\n", "", "x", "=", "np", ".", "asarray", "(", "x", ",", "dtype", "=", "np", ".", "float", ")", "\n", "x", "=", "torch", ".", "tensor", "(", "x", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.helper.to_numpy": [[44, 49], ["t.cpu().detach().numpy", "t.cpu().detach", "t.cpu"], "function", ["None"], ["", "def", "to_numpy", "(", "t", ")", ":", "\n", "  ", "'''\n  Convert a tensor to numpy\n  '''", "\n", "return", "t", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.helper.set_random_seed": [[50, 61], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.is_available", "torch.cuda.manual_seed_all"], "function", ["None"], ["", "def", "set_random_seed", "(", "seed", ")", ":", "\n", "  ", "'''\n  Set all random seeds\n  '''", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "    ", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.helper.make_dir": [[62, 65], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "", "def", "make_dir", "(", "dir", ")", ":", "\n", "  ", "if", "not", "os", ".", "path", ".", "exists", "(", "dir", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "dir", ",", "exist_ok", "=", "True", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.exploration.BaseExploration.__init__": [[6, 8], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "exploration_steps", ",", "epsilon", ")", ":", "\n", "    ", "self", ".", "exploration_steps", "=", "exploration_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.exploration.BaseExploration.select_action": [[9, 11], ["NotImplementedError"], "methods", ["None"], ["", "def", "select_action", "(", "self", ",", "q_values", ")", ":", "\n", "    ", "raise", "NotImplementedError", "(", "\"To be implemented\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.exploration.EpsilonGreedy.__init__": [[17, 20], ["exploration.BaseExploration.__init__"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.modules.actor.Actor.__init__"], ["def", "__init__", "(", "self", ",", "exploration_steps", ",", "epsilon", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", "exploration_steps", ",", "epsilon", ")", "\n", "self", ".", "epsilon", "=", "epsilon", "[", "'end'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.exploration.EpsilonGreedy.select_action": [[21, 27], ["numpy.random.randint", "numpy.argmax", "numpy.random.rand", "len"], "methods", ["None"], ["", "def", "select_action", "(", "self", ",", "q_values", ",", "step_count", ")", ":", "\n", "    ", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "epsilon", "or", "step_count", "<=", "self", ".", "exploration_steps", ":", "\n", "      ", "action", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "q_values", ")", ")", "\n", "", "else", ":", "\n", "      ", "action", "=", "np", ".", "argmax", "(", "q_values", ")", "\n", "", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.exploration.LinearEpsilonGreedy.__init__": [[33, 42], ["exploration.BaseExploration.__init__"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.modules.actor.Actor.__init__"], ["def", "__init__", "(", "self", ",", "exploration_steps", ",", "epsilon", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", "exploration_steps", ",", "epsilon", ")", "\n", "self", ".", "inc", "=", "(", "epsilon", "[", "'end'", "]", "-", "epsilon", "[", "'start'", "]", ")", "/", "epsilon", "[", "'steps'", "]", "\n", "self", ".", "start", "=", "epsilon", "[", "'start'", "]", "\n", "self", ".", "end", "=", "epsilon", "[", "'end'", "]", "\n", "if", "epsilon", "[", "'end'", "]", ">", "epsilon", "[", "'start'", "]", ":", "\n", "      ", "self", ".", "bound", "=", "min", "\n", "", "else", ":", "\n", "      ", "self", ".", "bound", "=", "max", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.exploration.LinearEpsilonGreedy.select_action": [[43, 50], ["exploration.LinearEpsilonGreedy.bound", "numpy.random.randint", "numpy.argmax", "numpy.random.rand", "len"], "methods", ["None"], ["", "", "def", "select_action", "(", "self", ",", "q_values", ",", "step_count", ")", ":", "\n", "    ", "self", ".", "epsilon", "=", "self", ".", "bound", "(", "self", ".", "start", "+", "step_count", "*", "self", ".", "inc", ",", "self", ".", "end", ")", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "epsilon", "or", "step_count", "<=", "self", ".", "exploration_steps", ":", "\n", "      ", "action", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "q_values", ")", ")", "\n", "", "else", ":", "\n", "      ", "action", "=", "np", ".", "argmax", "(", "q_values", ")", "\n", "", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.exploration.ExponentialEpsilonGreedy.__init__": [[57, 66], ["exploration.BaseExploration.__init__"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.modules.actor.Actor.__init__"], ["def", "__init__", "(", "self", ",", "exploration_steps", ",", "epsilon", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", "exploration_steps", ",", "epsilon", ")", "\n", "self", ".", "decay", "=", "epsilon", "[", "'decay'", "]", "\n", "self", ".", "start", "=", "epsilon", "[", "'start'", "]", "\n", "self", ".", "end", "=", "epsilon", "[", "'end'", "]", "\n", "if", "epsilon", "[", "'end'", "]", ">", "epsilon", "[", "'start'", "]", ":", "\n", "      ", "self", ".", "bound", "=", "min", "\n", "", "else", ":", "\n", "      ", "self", ".", "bound", "=", "max", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.exploration.ExponentialEpsilonGreedy.select_action": [[67, 74], ["exploration.ExponentialEpsilonGreedy.bound", "numpy.random.randint", "numpy.argmax", "math.pow", "numpy.random.rand", "len"], "methods", ["None"], ["", "", "def", "select_action", "(", "self", ",", "q_values", ",", "step_count", ")", ":", "\n", "    ", "self", ".", "epsilon", "=", "self", ".", "bound", "(", "self", ".", "start", "*", "math", ".", "pow", "(", "self", ".", "decay", ",", "step_count", ")", ",", "self", ".", "end", ")", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "epsilon", "or", "step_count", "<=", "self", ".", "exploration_steps", ":", "\n", "      ", "action", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "q_values", ")", ")", "\n", "", "else", ":", "\n", "      ", "action", "=", "np", ".", "argmax", "(", "q_values", ")", "\n", "", "return", "action", "", "", "", ""]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.evaluation.max_q": [[5, 7], ["[].item", "policy().max", "policy"], "function", ["None"], ["def", "max_q", "(", "policy", ",", "state", ")", ":", "\n", "    ", "return", "policy", "(", "state", ")", ".", "max", "(", "1", ")", "[", "0", "]", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.evaluation.evaluation": [[8, 30], ["minatar.Environment", "range", "print", "minatar.Environment.reset", "utils.commons.get_state", "max_qs.append", "scores.append", "real_qs.append", "numpy.asarray", "numpy.asarray", "numpy.asarray", "minatar.Environment.state", "evaluation.max_q", "[].view", "minatar.Environment.act", "utils.commons.get_state", "minatar.Environment.state", "numpy.mean", "numpy.mean", "numpy.mean", "policy().max", "policy"], "function", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.space_invaders.Env.reset", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.commons.get_state", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.space_invaders.Env.state", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3.ac_td3.AC_TD3.max_q", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.space_invaders.Env.act", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.commons.get_state", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.space_invaders.Env.state"], ["", "def", "evaluation", "(", "opts", ",", "policy", ",", "timesteps", ")", ":", "\n", "    ", "scores", "=", "[", "]", "\n", "max_qs", ",", "real_qs", "=", "[", "]", ",", "[", "]", "\n", "env", "=", "Environment", "(", "opts", ".", "game", ",", "random_seed", "=", "10", ")", "\n", "for", "seed", "in", "range", "(", "opts", ".", "n_eval_episodes", ")", ":", "\n", "        ", "env", ".", "reset", "(", ")", "\n", "state", "=", "get_state", "(", "env", ".", "state", "(", ")", ")", "\n", "score", ",", "done", "=", "0.", ",", "False", "\n", "max_qs", ".", "append", "(", "max_q", "(", "policy", ",", "state", ")", ")", "\n", "discount_score", "=", "0.", "\n", "while", "not", "done", ":", "\n", "            ", "action", "=", "policy", "(", "state", ")", ".", "max", "(", "1", ")", "[", "1", "]", ".", "view", "(", "1", ",", "1", ")", "\n", "reward", ",", "done", "=", "env", ".", "act", "(", "action", ")", "\n", "score", "+=", "reward", "\n", "discount_score", "=", "opts", ".", "gamma", "*", "discount_score", "+", "reward", "\n", "state", "=", "get_state", "(", "env", ".", "state", "(", ")", ")", "\n", "", "scores", ".", "append", "(", "score", ")", "\n", "real_qs", ".", "append", "(", "discount_score", ")", "\n", "\n", "", "print", "(", "\"timesteps %d, mean score %.4f, mean max_q %.4f, real_q %.4f\"", "%", "(", "timesteps", ",", "np", ".", "mean", "(", "scores", ")", ",", "np", ".", "mean", "(", "max_qs", ")", ",", "np", ".", "mean", "(", "real_qs", ")", ")", ")", "\n", "\n", "return", "np", ".", "asarray", "(", "scores", ")", ",", "np", ".", "asarray", "(", "max_qs", ")", ",", "np", ".", "asarray", "(", "real_qs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.recorder.Recoder.__init__": [[5, 9], ["os.path.join", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "results_dir", ",", "seed", ")", ":", "\n", "        ", "self", ".", "train_returns", ",", "self", ".", "test_returns", "=", "[", "]", ",", "[", "]", "\n", "self", ".", "train_returns_path", "=", "os", ".", "path", ".", "join", "(", "results_dir", ",", "\"train_returns_seed%d.pth\"", "%", "(", "seed", ")", ")", "\n", "self", ".", "test_returns_path", "=", "os", ".", "path", ".", "join", "(", "results_dir", ",", "\"test_returns_seed%d.pth\"", "%", "(", "seed", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.recorder.Recoder.add_result": [[10, 15], ["recorder.Recoder.train_returns.append", "recorder.Recoder.test_returns.append"], "methods", ["None"], ["", "def", "add_result", "(", "self", ",", "result", ",", "result_type", ")", ":", "\n", "        ", "if", "result_type", "==", "\"train_return\"", ":", "\n", "            ", "self", ".", "train_returns", ".", "append", "(", "result", ")", "\n", "", "if", "result_type", "==", "\"test_return\"", ":", "\n", "            ", "self", ".", "test_returns", ".", "append", "(", "result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.recorder.Recoder.save_result": [[16, 19], ["utils.save_data", "utils.save_data"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.commons.save_data", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.commons.save_data"], ["", "", "def", "save_result", "(", "self", ")", ":", "\n", "        ", "save_data", "(", "self", ".", "train_returns_path", ",", "self", ".", "train_returns", ")", "\n", "save_data", "(", "self", ".", "test_returns_path", ",", "self", ".", "test_returns", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.cdq._cdq": [[6, 33], ["numpy.random.seed", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "pipe_send.send", "utils.step.step", "numpy.max", "numpy.argmax", "numpy.mean", "numpy.power", "numpy.minimum", "numpy.max"], "function", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.step.step"], ["def", "_cdq", "(", "opts", ",", "reward_array", ",", "repeat_n", ",", "seed", ",", "which_Q", ",", "pipe_send", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "Q", "=", "np", ".", "zeros", "(", "(", "opts", ".", "n_state", ",", "opts", ".", "n_action", ",", "2", ")", ")", "\n", "current_state", "=", "opts", ".", "start", "\n", "n_eps", "=", "np", ".", "zeros", "(", "opts", ".", "n_state", ")", "\n", "n_alpha", "=", "np", ".", "zeros", "(", "(", "opts", ".", "n_state", ",", "opts", ".", "n_action", ",", "2", ")", ")", "\n", "rewards", "=", "np", ".", "zeros", "(", "opts", ".", "n_step", ")", "\n", "max_Q0", "=", "np", ".", "zeros", "(", "opts", ".", "n_step", ")", "\n", "for", "i", "in", "range", "(", "opts", ".", "n_step", ")", ":", "\n", "        ", "idx_Q", "=", "which_Q", "[", "i", "]", "\n", "n_eps", "[", "current_state", "]", "+=", "1", "\n", "action", ",", "reward", ",", "next_state", "=", "step", "(", "opts", ",", "Q", ",", "current_state", ",", "n_eps", ",", "reward_array", ",", "i", ")", "\n", "n_alpha", "[", "current_state", "]", "[", "action", "]", "[", "idx_Q", "]", "+=", "1", "\n", "\n", "if", "current_state", "==", "opts", ".", "goal", ":", "\n", "            ", "delta", "=", "reward", "-", "Q", "[", "current_state", "]", "[", "action", "]", "[", "idx_Q", "]", "\n", "", "else", ":", "\n", "            ", "max_action", "=", "np", ".", "argmax", "(", "Q", "[", "next_state", ",", ":", ",", "idx_Q", "]", ")", "\n", "delta", "=", "reward", "+", "opts", ".", "gamma", "*", "np", ".", "minimum", "(", "np", ".", "max", "(", "Q", "[", "next_state", ",", "max_action", ",", "1", "-", "idx_Q", "]", ")", ",", "Q", "[", "next_state", ",", "max_action", ",", "idx_Q", "]", ")", "-", "Q", "[", "current_state", "]", "[", "action", "]", "[", "idx_Q", "]", "\n", "\n", "", "Q", "[", "current_state", "]", "[", "action", "]", "[", "idx_Q", "]", "=", "Q", "[", "current_state", "]", "[", "action", "]", "[", "idx_Q", "]", "+", "(", "1", "/", "np", ".", "power", "(", "n_alpha", "[", "current_state", "]", "[", "action", "]", "[", "idx_Q", "]", ",", "opts", ".", "exp", ")", ")", "*", "delta", "\n", "rewards", "[", "i", "]", "=", "reward", "\n", "max_Q0", "[", "i", "]", "=", "np", ".", "max", "(", "np", ".", "mean", "(", "Q", "[", "opts", ".", "start", "]", ",", "1", ")", ",", "0", ")", "\n", "current_state", "=", "next_state", "\n", "\n", "# return repeat_n, rewards, max_Q0", "\n", "", "pipe_send", ".", "send", "(", "[", "repeat_n", ",", "rewards", ",", "max_Q0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.cdq.cdq": [[34, 41], ["multiprocessing.Pool", "utils.play_mp.play_mp", "utils.commons.save_data", "mp.Pool.close", "numpy.random.choice", "range", "numpy.mean", "numpy.mean", "numpy.random.rand"], "function", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.play_mp.play_mp", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.commons.save_data"], ["", "def", "cdq", "(", "opts", ",", "reward_array", ")", ":", "\n", "    ", "pool", "=", "mp", ".", "Pool", "(", "processes", "=", "opts", ".", "n_core", ")", "\n", "which_Q", "=", "(", "np", ".", "random", ".", "rand", "(", "opts", ".", "n_repeat", ",", "opts", ".", "n_step", ")", ">=", "0.5", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "args", "=", "[", "[", "reward_array", "[", "i", "]", ",", "i", ",", "np", ".", "random", ".", "choice", "(", "1000000", ")", ",", "which_Q", "[", "i", "]", "]", "for", "i", "in", "range", "(", "opts", ".", "n_repeat", ")", "]", "\n", "rewards", ",", "max_Q0", "=", "play_mp", "(", "opts", ",", "pool", ",", "args", ",", "_cdq", ")", "\n", "save_data", "(", "[", "np", ".", "mean", "(", "rewards", ",", "0", ")", ",", "np", ".", "mean", "(", "max_Q0", ",", "0", ")", "]", ",", "opts", ".", "save_path", "%", "\"cdq\"", ")", "\n", "pool", ".", "close", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.commons.chunker_num": [[17, 19], ["list", "range", "range"], "function", ["None"], ["if", "np", ".", "random", ".", "binomial", "(", "1", ",", "epsilon", ")", "==", "1", ":", "\n", "            ", "action", "=", "torch", ".", "tensor", "(", "[", "[", "random", ".", "randrange", "(", "opts", ".", "num_actions", ")", "]", "]", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.commons.chunker_list": [[14, 16], ["range", "len"], "function", ["None"], ["        ", "epsilon", "=", "opts", ".", "end_epsilon", "if", "t", "-", "opts", ".", "replay_start_size", ">=", "opts", ".", "first_n_frames", "else", "(", "(", "opts", ".", "end_epsilon", "-", "opts", ".", "epsilon", ")", "/", "opts", ".", "first_n_frames", ")", "*", "(", "t", "-", "opts", ".", "replay_start_size", ")", "+", "opts", ".", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.play_mp.play_mp": [[4, 22], ["numpy.zeros", "numpy.zeros", "range", "multiprocessing.Pipe", "len", "print", "range", "pool.apply_async", "p.get", "pipe[].recv", "enumerate", "len"], "function", ["None"], ["def", "play_mp", "(", "opts", ",", "pool", ",", "args", ",", "fn", ")", ":", "\n", "    ", "pipes", "=", "[", "Pipe", "(", ")", "for", "_", "in", "range", "(", "opts", ".", "n_core", ")", "]", "\n", "rewards", "=", "np", ".", "zeros", "(", "(", "opts", ".", "n_repeat", ",", "opts", ".", "n_step", ")", ")", "\n", "max_Q0", "=", "np", ".", "zeros", "(", "(", "opts", ".", "n_repeat", ",", "opts", ".", "n_step", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "args", ")", ",", "opts", ".", "n_core", ")", ":", "\n", "        ", "print", "(", "\"start: %d\"", "%", "i", ")", "\n", "args_batch", "=", "args", "[", "i", ":", "i", "+", "opts", ".", "n_core", "]", "\n", "ps", "=", "[", "pool", ".", "apply_async", "(", "fn", ",", "args", "=", "[", "opts", "]", "+", "arg", "+", "[", "pipes", "[", "i", "]", "[", "1", "]", "]", ")", "for", "i", ",", "arg", "in", "enumerate", "(", "args_batch", ")", "]", "\n", "[", "p", ".", "get", "(", ")", "for", "p", "in", "ps", "]", "\n", "\n", "for", "pipe", "in", "pipes", "[", ":", "len", "(", "args_batch", ")", "]", ":", "\n", "            ", "repeat_n", ",", "_rewards", ",", "_max_Q", "=", "pipe", "[", "0", "]", ".", "recv", "(", ")", "\n", "rewards", "[", "repeat_n", "]", "=", "_rewards", "\n", "max_Q0", "[", "repeat_n", "]", "=", "_max_Q", "\n", "# print(\"end %d\" % repeat_n)", "\n", "\n", "", "", "return", "rewards", ",", "max_Q0", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.dq._dq": [[6, 31], ["numpy.random.seed", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "pipe_send.send", "utils.step.step", "numpy.max", "numpy.argmax", "numpy.mean", "numpy.power", "numpy.max"], "function", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.step.step"], ["def", "_dq", "(", "opts", ",", "reward_array", ",", "repeat_n", ",", "seed", ",", "which_Q", ",", "pipe_send", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "Q", "=", "np", ".", "zeros", "(", "(", "opts", ".", "n_state", ",", "opts", ".", "n_action", ",", "2", ")", ")", "\n", "current_state", "=", "opts", ".", "start", "\n", "n_eps", "=", "np", ".", "zeros", "(", "opts", ".", "n_state", ")", "\n", "n_alpha", "=", "np", ".", "zeros", "(", "(", "opts", ".", "n_state", ",", "opts", ".", "n_action", ",", "2", ")", ")", "\n", "rewards", "=", "np", ".", "zeros", "(", "opts", ".", "n_step", ")", "\n", "max_Q0", "=", "np", ".", "zeros", "(", "opts", ".", "n_step", ")", "\n", "for", "i", "in", "range", "(", "opts", ".", "n_step", ")", ":", "\n", "        ", "idx_Q", "=", "which_Q", "[", "i", "]", "\n", "n_eps", "[", "current_state", "]", "+=", "1", "\n", "action", ",", "reward", ",", "next_state", "=", "step", "(", "opts", ",", "Q", ",", "current_state", ",", "n_eps", ",", "reward_array", ",", "i", ")", "\n", "n_alpha", "[", "current_state", "]", "[", "action", "]", "[", "idx_Q", "]", "+=", "1", "\n", "if", "current_state", "==", "opts", ".", "goal", ":", "\n", "            ", "delta", "=", "reward", "-", "Q", "[", "current_state", "]", "[", "action", "]", "[", "idx_Q", "]", "\n", "", "else", ":", "\n", "            ", "max_action", "=", "np", ".", "argmax", "(", "Q", "[", "next_state", ",", ":", ",", "idx_Q", "]", ")", "\n", "delta", "=", "reward", "+", "opts", ".", "gamma", "*", "np", ".", "max", "(", "Q", "[", "next_state", ",", "max_action", ",", "1", "-", "idx_Q", "]", ")", "-", "Q", "[", "current_state", "]", "[", "action", "]", "[", "idx_Q", "]", "\n", "\n", "", "Q", "[", "current_state", "]", "[", "action", "]", "[", "idx_Q", "]", "=", "Q", "[", "current_state", "]", "[", "action", "]", "[", "idx_Q", "]", "+", "(", "1", "/", "np", ".", "power", "(", "n_alpha", "[", "current_state", "]", "[", "action", "]", "[", "idx_Q", "]", ",", "opts", ".", "exp", ")", ")", "*", "delta", "\n", "rewards", "[", "i", "]", "=", "reward", "\n", "max_Q0", "[", "i", "]", "=", "np", ".", "max", "(", "np", ".", "mean", "(", "Q", "[", "opts", ".", "start", "]", ",", "1", ")", ",", "0", ")", "\n", "current_state", "=", "next_state", "\n", "\n", "", "pipe_send", ".", "send", "(", "[", "repeat_n", ",", "rewards", ",", "max_Q0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.dq.dq": [[32, 39], ["multiprocessing.Pool", "utils.play_mp.play_mp", "utils.commons.save_data", "mp.Pool.close", "numpy.random.choice", "range", "numpy.random.rand"], "function", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.play_mp.play_mp", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.commons.save_data"], ["", "def", "dq", "(", "opts", ",", "reward_array", ")", ":", "\n", "    ", "pool", "=", "mp", ".", "Pool", "(", "processes", "=", "opts", ".", "n_core", ")", "\n", "which_Q", "=", "(", "np", ".", "random", ".", "rand", "(", "opts", ".", "n_repeat", ",", "opts", ".", "n_step", ")", ">=", "0.5", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "args", "=", "[", "[", "reward_array", "[", "i", "]", ",", "i", ",", "np", ".", "random", ".", "choice", "(", "1000000", ")", ",", "which_Q", "[", "i", "]", "]", "for", "i", "in", "range", "(", "opts", ".", "n_repeat", ")", "]", "\n", "rewards", ",", "max_Q0", "=", "play_mp", "(", "opts", ",", "pool", ",", "args", ",", "_dq", ")", "\n", "save_data", "(", "[", "rewards", ",", "max_Q0", "]", ",", "opts", ".", "save_path", "%", "\"dq\"", ")", "\n", "pool", ".", "close", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.ac_cdq._ac_cdq": [[6, 41], ["numpy.random.seed", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "pipe_send.send", "utils.step.step", "numpy.max", "numpy.mean", "Q[].argsort", "numpy.argmax", "numpy.power", "max", "numpy.minimum", "int", "numpy.max", "numpy.max"], "function", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.step.step"], ["def", "_ac_cdq", "(", "opts", ",", "reward_array", ",", "repeat_n", ",", "seed", ",", "which_Q", ",", "pipe_send", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "Q", "=", "np", ".", "zeros", "(", "(", "opts", ".", "n_state", ",", "opts", ".", "n_action", ",", "2", ")", ")", "\n", "Q_q", "=", "np", ".", "zeros", "(", "(", "opts", ".", "n_state", ",", "opts", ".", "n_action", ")", ")", "\n", "current_state", "=", "opts", ".", "start", "\n", "n_eps", "=", "np", ".", "zeros", "(", "opts", ".", "n_state", ")", "\n", "n_alpha", "=", "np", ".", "zeros", "(", "(", "opts", ".", "n_state", ",", "opts", ".", "n_action", ",", "2", ")", ")", "\n", "\n", "n_alpha_q", "=", "np", ".", "zeros", "(", "(", "opts", ".", "n_state", ",", "opts", ".", "n_action", ")", ")", "\n", "\n", "rewards", "=", "np", ".", "zeros", "(", "opts", ".", "n_step", ")", "\n", "max_Q0", "=", "np", ".", "zeros", "(", "opts", ".", "n_step", ")", "\n", "\n", "for", "i", "in", "range", "(", "opts", ".", "n_step", ")", ":", "\n", "        ", "idx_Q", "=", "which_Q", "[", "i", "]", "\n", "n_eps", "[", "current_state", "]", "+=", "1", "\n", "action", ",", "reward", ",", "next_state", "=", "step", "(", "opts", ",", "Q", ",", "current_state", ",", "n_eps", ",", "reward_array", ",", "i", ")", "\n", "n_alpha", "[", "current_state", "]", "[", "action", "]", "[", "idx_Q", "]", "+=", "1", "\n", "n_alpha_q", "[", "current_state", "]", "[", "action", "]", "+=", "1", "\n", "\n", "if", "current_state", "==", "opts", ".", "goal", ":", "\n", "            ", "delta", "=", "reward", "-", "Q", "[", "current_state", "]", "[", "action", "]", "[", "idx_Q", "]", "\n", "", "else", ":", "\n", "            ", "idxs", "=", "Q", "[", "next_state", ",", ":", ",", "1", "-", "idx_Q", "]", ".", "argsort", "(", ")", "[", "-", "max", "(", "int", "(", "opts", ".", "n_action", "/", "2", ")", ",", "opts", ".", "K", ")", ":", "]", "\n", "max_action", "=", "idxs", "[", "np", ".", "argmax", "(", "Q", "[", "next_state", ",", "idxs", ",", "idx_Q", "]", ")", "]", "\n", "delta", "=", "reward", "+", "opts", ".", "gamma", "*", "np", ".", "minimum", "(", "np", ".", "max", "(", "Q", "[", "next_state", ",", "max_action", ",", "1", "-", "idx_Q", "]", ")", ",", "np", ".", "max", "(", "Q", "[", "next_state", ",", ":", ",", "idx_Q", "]", ")", ")", "-", "Q", "[", "current_state", "]", "[", "action", "]", "[", "idx_Q", "]", "\n", "\n", "", "Q", "[", "current_state", "]", "[", "action", "]", "[", "idx_Q", "]", "=", "Q", "[", "current_state", "]", "[", "action", "]", "[", "idx_Q", "]", "+", "(", "1", "/", "np", ".", "power", "(", "n_alpha", "[", "current_state", "]", "[", "action", "]", "[", "idx_Q", "]", ",", "opts", ".", "exp", ")", ")", "*", "delta", "\n", "\n", "rewards", "[", "i", "]", "=", "reward", "\n", "max_Q0", "[", "i", "]", "=", "np", ".", "max", "(", "np", ".", "mean", "(", "Q", "[", "opts", ".", "start", "]", ",", "1", ")", ",", "0", ")", "\n", "current_state", "=", "next_state", "\n", "\n", "", "pipe_send", ".", "send", "(", "[", "repeat_n", ",", "rewards", ",", "max_Q0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.ac_cdq.ac_cdq": [[42, 49], ["multiprocessing.Pool", "utils.play_mp.play_mp", "utils.commons.save_data", "mp.Pool.close", "numpy.random.choice", "range", "numpy.mean", "numpy.mean", "numpy.random.rand"], "function", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.play_mp.play_mp", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.commons.save_data"], ["", "def", "ac_cdq", "(", "opts", ",", "reward_array", ")", ":", "\n", "    ", "pool", "=", "mp", ".", "Pool", "(", "processes", "=", "opts", ".", "n_core", ")", "\n", "which_Q", "=", "(", "np", ".", "random", ".", "rand", "(", "opts", ".", "n_repeat", ",", "opts", ".", "n_step", ")", ">=", "0.5", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "args", "=", "[", "[", "reward_array", "[", "i", "]", ",", "i", ",", "np", ".", "random", ".", "choice", "(", "1000000", ")", ",", "which_Q", "[", "i", "]", "]", "for", "i", "in", "range", "(", "opts", ".", "n_repeat", ")", "]", "\n", "rewards", ",", "max_Q0", "=", "play_mp", "(", "opts", ",", "pool", ",", "args", ",", "_ac_cdq", ")", "\n", "save_data", "(", "[", "np", ".", "mean", "(", "rewards", ",", "0", ")", ",", "np", ".", "mean", "(", "max_Q0", ",", "0", ")", "]", ",", "opts", ".", "save_path", "%", "\"ac_cdq\"", ")", "\n", "pool", ".", "close", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.q._q": [[6, 31], ["numpy.random.seed", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "pipe_send.send", "utils.step.step", "numpy.max", "numpy.power", "numpy.max"], "function", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.step.step"], ["def", "_q", "(", "opts", ",", "reward_array", ",", "repeat_n", ",", "seed", ",", "pipe_send", ")", ":", "\n", "\n", "    ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "Q", "=", "np", ".", "zeros", "(", "(", "opts", ".", "n_state", ",", "opts", ".", "n_action", ")", ")", "\n", "current_state", "=", "opts", ".", "start", "\n", "n_eps", "=", "np", ".", "zeros", "(", "opts", ".", "n_state", ")", "\n", "n_alpha", "=", "np", ".", "zeros", "(", "(", "opts", ".", "n_state", ",", "opts", ".", "n_action", ")", ")", "\n", "rewards", "=", "np", ".", "zeros", "(", "opts", ".", "n_step", ")", "\n", "max_Q0", "=", "np", ".", "zeros", "(", "opts", ".", "n_step", ")", "\n", "for", "i", "in", "range", "(", "opts", ".", "n_step", ")", ":", "\n", "        ", "n_eps", "[", "current_state", "]", "+=", "1", "\n", "action", ",", "reward", ",", "next_state", "=", "step", "(", "opts", ",", "Q", ",", "current_state", ",", "n_eps", ",", "reward_array", ",", "i", ")", "\n", "n_alpha", "[", "current_state", "]", "[", "action", "]", "+=", "1", "\n", "if", "current_state", "==", "opts", ".", "goal", ":", "\n", "            ", "delta", "=", "reward", "-", "Q", "[", "current_state", "]", "[", "action", "]", "\n", "", "else", ":", "\n", "            ", "delta", "=", "reward", "+", "opts", ".", "gamma", "*", "np", ".", "max", "(", "Q", "[", "next_state", "]", ")", "-", "Q", "[", "current_state", "]", "[", "action", "]", "\n", "\n", "", "Q", "[", "current_state", "]", "[", "action", "]", "=", "Q", "[", "current_state", "]", "[", "action", "]", "+", "(", "\n", "1", "/", "np", ".", "power", "(", "n_alpha", "[", "current_state", "]", "[", "action", "]", ",", "opts", ".", "exp", ")", ")", "*", "delta", "\n", "rewards", "[", "i", "]", "=", "reward", "\n", "max_Q0", "[", "i", "]", "=", "np", ".", "max", "(", "Q", "[", "opts", ".", "start", "]", ",", "0", ")", "\n", "current_state", "=", "next_state", "\n", "\n", "", "pipe_send", ".", "send", "(", "[", "repeat_n", ",", "rewards", ",", "max_Q0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.q.q": [[32, 38], ["multiprocessing.Pool", "utils.play_mp.play_mp", "utils.commons.save_data", "mp.Pool.close", "numpy.random.choice", "range"], "function", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.play_mp.play_mp", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.commons.save_data"], ["", "def", "q", "(", "opts", ",", "reward_array", ")", ":", "\n", "    ", "pool", "=", "mp", ".", "Pool", "(", "processes", "=", "opts", ".", "n_core", ")", "\n", "args", "=", "[", "[", "reward_array", "[", "i", "]", ",", "i", ",", "np", ".", "random", ".", "choice", "(", "1000000", ")", "]", "for", "i", "in", "range", "(", "opts", ".", "n_repeat", ")", "]", "\n", "rewards", ",", "max_Q0", "=", "play_mp", "(", "opts", ",", "pool", ",", "args", ",", "_q", ")", "\n", "save_data", "(", "[", "rewards", ",", "max_Q0", "]", ",", "opts", ".", "save_path", "%", "\"q\"", ")", "\n", "pool", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.step.step": [[3, 42], ["numpy.cumsum", "numpy.random.choice", "numpy.random.choice", "numpy.max", "numpy.where", "numpy.random.rand", "numpy.sqrt", "len", "numpy.argmax", "len", "numpy.argmax", "numpy.random.randint", "numpy.random.rand", "numpy.mean"], "function", ["None"], ["def", "step", "(", "opts", ",", "Q", ",", "current_state", ",", "n_eps", ",", "reward_array", ",", "step_n", ",", "probs", "=", "None", ")", ":", "\n", "\n", "    ", "if", "probs", "is", "not", "None", ":", "\n", "        ", "cums", "=", "np", ".", "cumsum", "(", "probs", ")", "\n", "probs", "=", "cums", "/", "np", ".", "max", "(", "cums", ")", "\n", "action", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "where", "(", "np", ".", "random", ".", "rand", "(", ")", "<=", "probs", ")", "[", "0", "]", ")", "\n", "\n", "", "elif", "opts", ".", "policy", "==", "\"eps\"", ":", "\n", "        ", "if", "np", ".", "random", ".", "rand", "(", ")", ">", "1", "/", "np", ".", "sqrt", "(", "n_eps", "[", "current_state", "]", ")", ":", "\n", "            ", "if", "len", "(", "Q", ".", "shape", ")", "==", "3", ":", "\n", "                ", "action", "=", "np", ".", "argmax", "(", "np", ".", "mean", "(", "Q", ",", "2", ")", "[", "current_state", "]", ")", "\n", "", "if", "len", "(", "Q", ".", "shape", ")", "==", "2", ":", "\n", "                ", "action", "=", "np", ".", "argmax", "(", "Q", "[", "current_state", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "action", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "4", ",", "1", ")", "[", "0", "]", "\n", "\n", "", "", "if", "current_state", "!=", "opts", ".", "goal", ":", "\n", "        ", "if", "action", "==", "0", ":", "\n", "            ", "next_state", "=", "current_state", "-", "opts", ".", "n_col", "\n", "if", "next_state", "<", "0", ":", "\n", "                ", "next_state", "=", "current_state", "\n", "", "", "elif", "action", "==", "1", ":", "\n", "            ", "next_state", "=", "current_state", "+", "opts", ".", "n_col", "\n", "if", "next_state", ">=", "opts", ".", "n_state", ":", "\n", "                ", "next_state", "=", "current_state", "\n", "", "", "elif", "action", "==", "2", ":", "\n", "            ", "next_state", "=", "current_state", "-", "1", "\n", "if", "(", "next_state", "+", "1", ")", "%", "opts", ".", "n_col", "==", "0", ":", "\n", "                ", "next_state", "=", "current_state", "\n", "", "", "elif", "action", "==", "3", ":", "\n", "            ", "next_state", "=", "current_state", "+", "1", "\n", "if", "next_state", "%", "opts", ".", "n_col", "==", "0", ":", "\n", "                ", "next_state", "=", "current_state", "\n", "", "", "reward", "=", "reward_array", "[", "step_n", "]", "\n", "", "else", ":", "\n", "        ", "reward", "=", "np", ".", "random", ".", "choice", "(", "[", "-", "30", ",", "40", "]", ")", "\n", "next_state", "=", "opts", ".", "start", "\n", "\n", "", "return", "action", ",", "reward", ",", "next_state", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.estimators.ME": [[3, 8], ["numpy.mean", "numpy.max"], "function", ["None"], ["def", "ME", "(", ")", ":", "\n", "    ", "def", "_op", "(", "samples", ")", ":", "\n", "        ", "_mus", "=", "np", ".", "mean", "(", "samples", ",", "1", ")", "\n", "return", "np", ".", "max", "(", "_mus", ")", "\n", "", "return", "_op", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.estimators.DE": [[9, 17], ["numpy.mean", "numpy.mean", "int", "int", "numpy.argmax", "numpy.argmax"], "function", ["None"], ["", "def", "DE", "(", ")", ":", "\n", "    ", "def", "_op", "(", "samples", ")", ":", "\n", "        ", "n_sample", "=", "samples", ".", "shape", "[", "1", "]", "\n", "_mus_A", "=", "np", ".", "mean", "(", "(", "samples", "[", ":", ",", ":", "int", "(", "n_sample", "/", "2", ")", "]", ")", ",", "1", ")", "\n", "_mus_B", "=", "np", ".", "mean", "(", "(", "samples", "[", ":", ",", "int", "(", "n_sample", "/", "2", ")", ":", "]", ")", ",", "1", ")", "\n", "estimator", "=", "(", "_mus_B", "[", "np", ".", "argmax", "(", "_mus_A", ")", "]", "+", "_mus_A", "[", "np", ".", "argmax", "(", "_mus_B", ")", "]", ")", "/", "2", "\n", "return", "estimator", "\n", "", "return", "_op", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.estimators.CDE": [[18, 27], ["numpy.max", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.minimum", "numpy.minimum", "int", "int", "numpy.argmax", "numpy.argmax"], "function", ["None"], ["", "def", "CDE", "(", ")", ":", "\n", "    ", "def", "_op", "(", "samples", ")", ":", "\n", "        ", "n_sample", "=", "samples", ".", "shape", "[", "1", "]", "\n", "clip", "=", "np", ".", "max", "(", "np", ".", "mean", "(", "samples", ",", "1", ")", ")", "\n", "_mus_A", "=", "np", ".", "mean", "(", "(", "samples", "[", ":", ",", ":", "int", "(", "n_sample", "/", "2", ")", "]", ")", ",", "1", ")", "\n", "_mus_B", "=", "np", ".", "mean", "(", "(", "samples", "[", ":", ",", "int", "(", "n_sample", "/", "2", ")", ":", "]", ")", ",", "1", ")", "\n", "estimator", "=", "(", "np", ".", "minimum", "(", "_mus_B", "[", "np", ".", "argmax", "(", "_mus_A", ")", "]", ",", "clip", ")", "+", "np", ".", "minimum", "(", "_mus_A", "[", "np", ".", "argmax", "(", "_mus_B", ")", "]", ",", "clip", ")", ")", "/", "2", "\n", "return", "estimator", "\n", "", "return", "_op", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.estimators.AC_CDE": [[28, 52], ["numpy.mean", "numpy.mean", "numpy.mean", "numpy.max", "numpy.minimum", "int", "heapq.nlargest", "numpy.argmax", "heapq.nlargest", "numpy.argmax", "enumerate", "enumerate", "int", "int"], "function", ["None"], ["", "def", "AC_CDE", "(", ")", ":", "\n", "    ", "def", "_op", "(", "samples", ",", "n_action", ",", "K", ",", "r", ")", ":", "\n", "        ", "n_sample", "=", "samples", ".", "shape", "[", "1", "]", "\n", "_mus_A", "=", "np", ".", "mean", "(", "(", "samples", "[", ":", ",", ":", "int", "(", "n_sample", "/", "2", ")", "]", ")", ",", "1", ")", "\n", "_mus_B", "=", "np", ".", "mean", "(", "(", "samples", "[", ":", ",", "int", "(", "n_sample", "/", "2", ")", ":", "]", ")", ",", "1", ")", "\n", "\n", "KK", "=", "K", "if", "K", "is", "not", "None", "else", "int", "(", "n_action", "*", "r", ")", "\n", "\n", "idxs", "=", "[", "x", "[", "0", "]", "for", "x", "in", "heapq", ".", "nlargest", "(", "KK", ",", "enumerate", "(", "_mus_A", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "]", "\n", "max_actionA", "=", "idxs", "[", "np", ".", "argmax", "(", "_mus_B", "[", "idxs", "]", ")", "]", "\n", "\n", "idxs", "=", "[", "x", "[", "0", "]", "for", "x", "in", "heapq", ".", "nlargest", "(", "KK", ",", "enumerate", "(", "_mus_B", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "]", "\n", "max_actionB", "=", "idxs", "[", "np", ".", "argmax", "(", "_mus_A", "[", "idxs", "]", ")", "]", "\n", "\n", "estimator", "=", "(", "_mus_A", "[", "max_actionA", "]", "+", "_mus_B", "[", "max_actionB", "]", ")", "/", "2", "\n", "\n", "_mus", "=", "np", ".", "mean", "(", "samples", ",", "1", ")", "\n", "estimator_q", "=", "np", ".", "max", "(", "_mus", ")", "\n", "\n", "estimator", "=", "np", ".", "minimum", "(", "estimator_q", ",", "estimator", ")", "\n", "\n", "return", "estimator", "\n", "\n", "", "return", "_op", "", "", ""]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.env.Env.__init__": [[4, 7], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_action", ",", "p", ")", ":", "\n", "        ", "self", ".", "n_action", "=", "n_action", "\n", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.env.Env.sample": [[8, 10], ["numpy.random.uniform"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "action", ",", "n_sample", ")", ":", "\n", "        ", "return", "(", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "n_sample", ")", "<", "self", ".", "p", "[", "action", "]", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.env.G1": [[11, 16], ["numpy.random.uniform"], "function", ["None"], ["", "", "def", "G1", "(", ")", ":", "\n", "    ", "def", "_op", "(", "n_action", ")", ":", "\n", "        ", "p", "=", "np", ".", "random", ".", "uniform", "(", "0.02", ",", "0.05", ",", "n_action", ")", "\n", "return", "p", "\n", "", "return", "_op", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.env.G2": [[17, 23], ["numpy.random.uniform"], "function", ["None"], ["", "def", "G2", "(", ")", ":", "\n", "    ", "def", "_op", "(", "idx", ",", "n_action", ")", ":", "\n", "        ", "p_upper", "=", "0.02", "+", "idx", "*", "0.01", "\n", "p", "=", "np", ".", "random", ".", "uniform", "(", "0.02", ",", "p_upper", ",", "n_action", ")", "\n", "return", "p", "\n", "", "return", "_op", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.env.G3": [[24, 29], ["numpy.zeros"], "function", ["None"], ["", "def", "G3", "(", ")", ":", "\n", "    ", "def", "_op", "(", "n_action", ")", ":", "\n", "        ", "p", "=", "np", ".", "zeros", "(", "n_action", ")", "+", "0.05", "\n", "return", "p", "\n", "", "return", "_op", "", "", ""]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.eval_policy.eval_policy": [[3, 27], ["gym.make", "gym.make.seed", "range", "print", "max_qs.append", "real_qs.append", "numpy.mean", "numpy.mean", "gym.make.reset", "policy.max_q", "policy.select_action", "gym.make.step", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.space_invaders.Env.reset", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3.ac_td3.AC_TD3.max_q", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3.ac_td3.AC_TD3.select_action", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.step.step"], ["def", "eval_policy", "(", "opts", ",", "policy", ",", "idx", ",", "timesteps", ")", ":", "\n", "\n", "    ", "env", "=", "gym", ".", "make", "(", "opts", ".", "env_nm", ")", "\n", "env", ".", "seed", "(", "opts", ".", "seed", ")", "\n", "avg_reward", "=", "0.", "\n", "max_qs", ",", "real_qs", "=", "[", "]", ",", "[", "]", "\n", "for", "_", "in", "range", "(", "opts", ".", "n_eval_episodes", ")", ":", "\n", "        ", "state", ",", "done", "=", "env", ".", "reset", "(", ")", ",", "False", "\n", "discount_score", ",", "t", "=", "0.", ",", "0", "\n", "max_qs", ".", "append", "(", "policy", ".", "max_q", "(", "np", ".", "array", "(", "state", ")", ")", ")", "\n", "while", "not", "done", ":", "\n", "            ", "action", "=", "policy", ".", "select_action", "(", "np", ".", "array", "(", "state", ")", ")", "\n", "state", ",", "reward", ",", "done", ",", "_", "=", "env", ".", "step", "(", "action", ")", "\n", "avg_reward", "+=", "reward", "\n", "discount_score", "+=", "(", "opts", ".", "discount", "**", "t", ")", "*", "reward", "\n", "t", "+=", "1", "\n", "", "real_qs", ".", "append", "(", "discount_score", ")", "\n", "\n", "\n", "", "avg_reward", "/=", "opts", ".", "n_eval_episodes", "\n", "\n", "print", "(", "\"=== [%d / %d] Evaluation over %d, episodes: avg_reward: %.3f ===\"", "%", "(", "timesteps", ",", "idx", ",", "opts", ".", "n_eval_episodes", ",", "avg_reward", ")", ")", "\n", "\n", "return", "avg_reward", ",", "np", ".", "mean", "(", "max_qs", ")", ",", "np", ".", "mean", "(", "real_qs", ")", "", "", ""]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.replay_buffer.ReplayBuffer.__init__": [[4, 15], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "opts", ")", ":", "\n", "\n", "        ", "self", ".", "state", "=", "np", ".", "zeros", "(", "(", "opts", ".", "buffer_size", ",", "opts", ".", "state_dim", ")", ")", "\n", "self", ".", "action", "=", "np", ".", "zeros", "(", "(", "opts", ".", "buffer_size", ",", "opts", ".", "action_dim", ")", ")", "\n", "self", ".", "next_state", "=", "np", ".", "zeros", "(", "(", "opts", ".", "buffer_size", ",", "opts", ".", "state_dim", ")", ")", "\n", "self", ".", "reward", "=", "np", ".", "zeros", "(", "(", "opts", ".", "buffer_size", ",", "1", ")", ")", "\n", "self", ".", "not_done", "=", "np", ".", "zeros", "(", "(", "opts", ".", "buffer_size", ",", "1", ")", ")", "\n", "\n", "self", ".", "ptr", "=", "0", "\n", "self", ".", "size", "=", "0", "\n", "self", ".", "opts", "=", "opts", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.replay_buffer.ReplayBuffer.add": [[16, 25], ["min"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "state", ",", "action", ",", "next_state", ",", "reward", ",", "done", ")", ":", "\n", "        ", "self", ".", "state", "[", "self", ".", "ptr", "]", "=", "state", "\n", "self", ".", "action", "[", "self", ".", "ptr", "]", "=", "action", "\n", "self", ".", "next_state", "[", "self", ".", "ptr", "]", "=", "next_state", "\n", "self", ".", "reward", "[", "self", ".", "ptr", "]", "=", "reward", "\n", "self", ".", "not_done", "[", "self", ".", "ptr", "]", "=", "1.", "-", "done", "\n", "\n", "self", ".", "ptr", "=", "(", "self", ".", "ptr", "+", "1", ")", "%", "self", ".", "opts", ".", "buffer_size", "\n", "self", ".", "size", "=", "min", "(", "self", ".", "size", "+", "1", ",", "self", ".", "opts", ".", "buffer_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.replay_buffer.ReplayBuffer.sample": [[26, 35], ["numpy.random.randint", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "ind", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "size", ",", "size", "=", "batch_size", ")", "\n", "\n", "return", "(", "\n", "torch", ".", "FloatTensor", "(", "self", ".", "state", "[", "ind", "]", ")", ".", "to", "(", "self", ".", "opts", ".", "device", ")", ",", "\n", "torch", ".", "FloatTensor", "(", "self", ".", "action", "[", "ind", "]", ")", ".", "to", "(", "self", ".", "opts", ".", "device", ")", ",", "\n", "torch", ".", "FloatTensor", "(", "self", ".", "next_state", "[", "ind", "]", ")", ".", "to", "(", "self", ".", "opts", ".", "device", ")", ",", "\n", "torch", ".", "FloatTensor", "(", "self", ".", "reward", "[", "ind", "]", ")", ".", "to", "(", "self", ".", "opts", ".", "device", ")", ",", "\n", "torch", ".", "FloatTensor", "(", "self", ".", "not_done", "[", "ind", "]", ")", ".", "to", "(", "self", ".", "opts", ".", "device", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.run.run": [[5, 84], ["torch.device", "torch.manual_seed", "numpy.random.seed", "utils.Recoder", "gym.make", "gym.make.seed", "float", "AC_TD3.ac_td3.AC_TD3", "utils.ReplayBuffer", "time.time", "range", "utils.Recoder.save_result", "gym.make.reset", "int", "gym.make.step", "utils.ReplayBuffer.add", "AC_TD3.ac_td3.AC_TD3.save", "torch.cuda.is_available", "gym.make.action_space.sample", "float", "AC_TD3.ac_td3.AC_TD3.train", "print", "utils.Recoder.add_result", "utils.Recoder.save_result", "utils.eval_policy", "print", "utils.Recoder.add_result", "utils.Recoder.save_result", "gym.make.reset", "AC_TD3.ac_td3.AC_TD3.select_action", "numpy.random.normal", "numpy.array", "time.time"], "function", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.recorder.Recoder.save_result", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.space_invaders.Env.reset", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.step.step", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3.ac_td3.AC_TD3.save", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.replay_buffer.ReplayBuffer.sample", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3.ac_td3.AC_TD3.train", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.recorder.Recoder.add_result", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.recorder.Recoder.save_result", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.eval_policy.eval_policy", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.recorder.Recoder.add_result", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.recorder.Recoder.save_result", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.space_invaders.Env.reset", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3.ac_td3.AC_TD3.select_action"], ["def", "run", "(", "opts", ",", "seed", ")", ":", "\n", "\n", "    ", "opts", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "# recoder", "\n", "recoder", "=", "Recoder", "(", "opts", ".", "results_dir", ",", "seed", ")", "\n", "\n", "# env", "\n", "env", "=", "gym", ".", "make", "(", "opts", ".", "env_nm", ")", "\n", "env", ".", "seed", "(", "seed", ")", "\n", "opts", ".", "state_dim", "=", "env", ".", "observation_space", ".", "shape", "[", "0", "]", "\n", "opts", ".", "action_dim", "=", "env", ".", "action_space", ".", "shape", "[", "0", "]", "\n", "opts", ".", "max_action", "=", "float", "(", "env", ".", "action_space", ".", "high", "[", "0", "]", ")", "\n", "\n", "opts", ".", "policy_noise", "=", "opts", ".", "policy_noise", "*", "opts", ".", "max_action", "\n", "opts", ".", "noise_clip", "=", "opts", ".", "noise_clip", "*", "opts", ".", "max_action", "\n", "\n", "# policy setting", "\n", "policy", "=", "Method", "(", "opts", ",", "seed", ")", "\n", "\n", "# replay buffer", "\n", "replay_buffer", "=", "ReplayBuffer", "(", "opts", ")", "\n", "\n", "state", ",", "done", "=", "env", ".", "reset", "(", ")", ",", "False", "\n", "episode_reward", ",", "episode_timesteps", ",", "episode_num", ",", "eval_idx", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "t", "in", "range", "(", "int", "(", "opts", ".", "max_timesteps", ")", ")", ":", "\n", "\n", "        ", "episode_timesteps", "+=", "1", "\n", "\n", "# Select action randomly or according to policy", "\n", "if", "t", "<", "opts", ".", "start_timesteps", ":", "\n", "            ", "action", "=", "env", ".", "action_space", ".", "sample", "(", ")", "\n", "", "else", ":", "\n", "            ", "action", "=", "(", "policy", ".", "select_action", "(", "np", ".", "array", "(", "state", ")", ")", "+", "np", ".", "random", ".", "normal", "(", "0", ",", "opts", ".", "max_action", "*", "opts", ".", "expl_noise", ",", "size", "=", "opts", ".", "action_dim", ")", "\n", ")", ".", "clip", "(", "-", "opts", ".", "max_action", ",", "opts", ".", "max_action", ")", "\n", "\n", "# Perform action", "\n", "", "next_state", ",", "reward", ",", "done", ",", "_", "=", "env", ".", "step", "(", "action", ")", "\n", "done_bool", "=", "float", "(", "done", ")", "if", "episode_timesteps", "<", "env", ".", "_max_episode_steps", "else", "0", "\n", "\n", "# Store data in replay buffer", "\n", "replay_buffer", ".", "add", "(", "state", ",", "action", ",", "next_state", ",", "reward", ",", "done_bool", ")", "\n", "\n", "state", "=", "next_state", "\n", "episode_reward", "+=", "reward", "\n", "\n", "# Train agent after collecting sufficient data", "\n", "if", "t", ">=", "opts", ".", "start_timesteps", ":", "\n", "            ", "policy", ".", "train", "(", "replay_buffer", ")", "\n", "\n", "", "if", "done", ":", "\n", "# +1 to account for 0 indexing. +0 on ep_timesteps since it will increment +1 even if done=True", "\n", "            ", "print", "(", "\"- Seed: %d, Total T: %d, Episode Num: %d, Episode T: %d, Reward: %.3f, Time: %.2f, %s -\"", "%", "(", "\n", "seed", ",", "t", "+", "1", ",", "episode_num", "+", "1", ",", "episode_timesteps", "+", "1", ",", "episode_reward", ",", "time", ".", "time", "(", ")", "-", "t1", ",", "opts", ".", "tag", ")", ")", "\n", "recoder", ".", "add_result", "(", "episode_reward", ",", "\"train_return\"", ")", "\n", "# recoder.add_result(episode_reward, \"train_return\")", "\n", "recoder", ".", "save_result", "(", ")", "\n", "\n", "# Reset environment", "\n", "state", ",", "done", "=", "env", ".", "reset", "(", ")", ",", "False", "\n", "episode_reward", "=", "0", "\n", "episode_timesteps", "=", "0", "\n", "episode_num", "+=", "1", "\n", "\n", "# Evaluate episode", "\n", "", "if", "opts", ".", "is_eval", "and", "(", "t", "+", "1", ")", "%", "opts", ".", "eval_freq", "==", "0", ":", "\n", "            ", "eval_scores", ",", "max_qs", ",", "real_qs", "=", "eval_policy", "(", "opts", ",", "policy", ",", "eval_idx", "+", "1", ",", "t", "+", "1", ")", "\n", "print", "(", "\"eval_scores\"", ",", "eval_scores", ",", "\"max_qs\"", ",", "max_qs", ",", "\"real_qs\"", ",", "real_qs", ")", "\n", "recoder", ".", "add_result", "(", "{", "\"eval_scores\"", ":", "eval_scores", ",", "\"max_qs\"", ":", "max_qs", ",", "\"real_qs\"", ":", "real_qs", "}", ",", "\"test_return\"", ")", "\n", "recoder", ".", "save_result", "(", ")", "\n", "\n", "", "", "if", "opts", ".", "save_model", ":", "\n", "        ", "policy", ".", "save", "(", ")", "\n", "\n", "", "recoder", ".", "save_result", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.minatar.gui.GUI.__init__": [[29, 57], ["seaborn.color_palette", "gui.GUI.cmap.insert", "matplotlib.ListedColormap", "matplotlib.ListedColormap", "matplotlib.BoundaryNorm", "matplotlib.BoundaryNorm", "tkinter.Tk", "gui.GUI.root.title", "gui.GUI.root.config", "gui.GUI.root.attributes", "gui.GUI.root.focus_force", "tkinter.StringVar", "tkinter.Label", "matplotlib.figure.Figure", "matplotlib.figure.Figure", "gui.GUI.fig.add_subplot", "matplotlib.backends.backend_tkagg.FigureCanvasTkAgg", "matplotlib.backends.backend_tkagg.FigureCanvasTkAgg", "gui.GUI.canvas.get_tk_widget().pack", "gui.GUI.canvas.mpl_connect", "gui.GUI.canvas.mpl_connect", "platform.system.system", "os.system", "range", "gui.GUI.canvas.get_tk_widget"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "env_name", ",", "n_channels", ")", ":", "\n", "        ", "self", ".", "n_channels", "=", "n_channels", "\n", "\n", "# The seaborn color_palette cubhelix is used to assign visually distinct colors to each channel for the env", "\n", "self", ".", "cmap", "=", "sns", ".", "color_palette", "(", "\"cubehelix\"", ",", "self", ".", "n_channels", ")", "\n", "self", ".", "cmap", ".", "insert", "(", "0", ",", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "self", ".", "cmap", "=", "colors", ".", "ListedColormap", "(", "self", ".", "cmap", ")", "\n", "bounds", "=", "[", "i", "for", "i", "in", "range", "(", "self", ".", "n_channels", "+", "2", ")", "]", "\n", "self", ".", "norm", "=", "colors", ".", "BoundaryNorm", "(", "bounds", ",", "self", ".", "n_channels", "+", "1", ")", "\n", "\n", "self", ".", "root", "=", "Tk", ".", "Tk", "(", ")", "\n", "self", ".", "root", ".", "title", "(", "env_name", ")", "\n", "self", ".", "root", ".", "config", "(", "background", "=", "'white'", ")", "\n", "\n", "self", ".", "root", ".", "attributes", "(", "\"-topmost\"", ",", "True", ")", "\n", "if", "platform", "(", ")", "==", "'Darwin'", ":", "# How Mac OS X is identified by Python", "\n", "            ", "system", "(", "'''/usr/bin/osascript -e 'tell app \"Finder\" to set frontmost of process \"Python\" to true' '''", ")", "\n", "", "self", ".", "root", ".", "focus_force", "(", ")", "\n", "\n", "self", ".", "text_message", "=", "Tk", ".", "StringVar", "(", ")", "\n", "self", ".", "label", "=", "Tk", ".", "Label", "(", "self", ".", "root", ",", "textvariable", "=", "self", ".", "text_message", ")", "\n", "\n", "self", ".", "fig", "=", "Figure", "(", ")", "\n", "self", ".", "ax", "=", "self", ".", "fig", ".", "add_subplot", "(", "111", ")", "\n", "self", ".", "canvas", "=", "FigureCanvasTkAgg", "(", "self", ".", "fig", ",", "master", "=", "self", ".", "root", ")", "\n", "self", ".", "canvas", ".", "get_tk_widget", "(", ")", ".", "pack", "(", "side", "=", "Tk", ".", "TOP", ",", "fill", "=", "Tk", ".", "BOTH", ",", "expand", "=", "1", ")", "\n", "self", ".", "key_press_handler", "=", "self", ".", "canvas", ".", "mpl_connect", "(", "'key_press_event'", ",", "self", ".", "on_key_event", ")", "\n", "self", ".", "key_release_handler", "=", "self", ".", "canvas", ".", "mpl_connect", "(", "'key_press_event'", ",", "lambda", "x", ":", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.minatar.gui.GUI.set_message": [[59, 62], ["gui.GUI.text_message.set", "gui.GUI.label.pack"], "methods", ["None"], ["", "def", "set_message", "(", "self", ",", "str", ")", ":", "\n", "        ", "self", ".", "text_message", ".", "set", "(", "str", ")", "\n", "self", ".", "label", ".", "pack", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.minatar.gui.GUI.display_state": [[64, 69], ["gui.GUI.ax.cla", "gui.GUI.ax.imshow", "gui.GUI.canvas.draw", "numpy.amax", "numpy.reshape", "numpy.arange"], "methods", ["None"], ["", "def", "display_state", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "ax", ".", "cla", "(", ")", "\n", "numerical_state", "=", "np", ".", "amax", "(", "state", "*", "np", ".", "reshape", "(", "np", ".", "arange", "(", "self", ".", "n_channels", ")", "+", "1", ",", "(", "1", ",", "1", ",", "-", "1", ")", ")", ",", "2", ")", "+", "0.5", "\n", "self", ".", "ax", ".", "imshow", "(", "numerical_state", ",", "cmap", "=", "self", ".", "cmap", ",", "norm", "=", "self", ".", "norm", ",", "interpolation", "=", "'none'", ")", "\n", "self", ".", "canvas", ".", "draw", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.minatar.gui.GUI.overwrite_key_handle": [[71, 77], ["gui.GUI.canvas.mpl_disconnect", "gui.GUI.canvas.mpl_connect", "gui.GUI.canvas.mpl_disconnect", "gui.GUI.canvas.mpl_connect"], "methods", ["None"], ["", "def", "overwrite_key_handle", "(", "self", ",", "key_press_handler", ",", "key_release_handler", "=", "None", ")", ":", "\n", "        ", "self", ".", "canvas", ".", "mpl_disconnect", "(", "self", ".", "key_press_handler", ")", "\n", "self", ".", "key_press_handler", "=", "self", ".", "canvas", ".", "mpl_connect", "(", "'key_press_event'", ",", "key_press_handler", ")", "\n", "if", "(", "key_release_handler", "is", "not", "None", ")", ":", "\n", "            ", "self", ".", "canvas", ".", "mpl_disconnect", "(", "self", ".", "key_release_handler", ")", "\n", "self", ".", "key_release_handler", "=", "self", ".", "canvas", ".", "mpl_connect", "(", "'key_release_event'", ",", "key_release_handler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.minatar.gui.GUI.on_key_event": [[80, 83], ["gui.GUI.quit"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.minatar.gui.GUI.quit"], ["", "", "def", "on_key_event", "(", "self", ",", "event", ")", ":", "\n", "        ", "if", "event", ".", "key", "==", "\"q\"", ":", "\n", "            ", "self", ".", "quit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.minatar.gui.GUI.quit": [[85, 87], ["gui.GUI.root.quit"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.minatar.gui.GUI.quit"], ["", "", "def", "quit", "(", "self", ")", ":", "\n", "        ", "self", ".", "root", ".", "quit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.minatar.gui.GUI.update": [[89, 91], ["gui.GUI.root.after"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "millisecond", ",", "func", ")", ":", "\n", "        ", "self", ".", "root", ".", "after", "(", "millisecond", ",", "func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.minatar.gui.GUI.run": [[93, 95], ["gui.GUI.root.mainloop"], "methods", ["None"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "self", ".", "root", ".", "mainloop", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.minatar.environment.Environment.__init__": [[18, 27], ["importlib.import_module", "importlib.import_module.Env", "environment.Environment.env.state_shape"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.space_invaders.Env.state_shape"], ["    ", "def", "__init__", "(", "self", ",", "env_name", ",", "sticky_action_prob", "=", "0.1", ",", "difficulty_ramping", "=", "True", ",", "random_seed", "=", "None", ")", ":", "\n", "        ", "env_module", "=", "import_module", "(", "'minatar.environments.'", "+", "env_name", ")", "\n", "self", ".", "env_name", "=", "env_name", "\n", "self", ".", "env", "=", "env_module", ".", "Env", "(", "ramping", "=", "difficulty_ramping", ",", "seed", "=", "random_seed", ")", "\n", "self", ".", "n_channels", "=", "self", ".", "env", ".", "state_shape", "(", ")", "[", "2", "]", "\n", "self", ".", "sticky_action_prob", "=", "sticky_action_prob", "\n", "self", ".", "last_action", "=", "0", "\n", "self", ".", "visualized", "=", "False", "\n", "self", ".", "closed", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.minatar.environment.Environment.act": [[29, 34], ["environment.Environment.env.act", "numpy.random.rand"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.space_invaders.Env.act"], ["", "def", "act", "(", "self", ",", "a", ")", ":", "\n", "        ", "if", "(", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "sticky_action_prob", ")", ":", "\n", "            ", "a", "=", "self", ".", "last_action", "\n", "", "self", ".", "last_action", "=", "a", "\n", "return", "self", ".", "env", ".", "act", "(", "a", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.minatar.environment.Environment.state": [[36, 38], ["environment.Environment.env.state"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.space_invaders.Env.state"], ["", "def", "state", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "state", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.minatar.environment.Environment.reset": [[40, 42], ["environment.Environment.env.reset"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.space_invaders.Env.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.minatar.environment.Environment.state_shape": [[44, 46], ["environment.Environment.env.state_shape"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.space_invaders.Env.state_shape"], ["", "def", "state_shape", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "state_shape", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.minatar.environment.Environment.num_actions": [[48, 50], ["None"], "methods", ["None"], ["", "def", "num_actions", "(", "self", ")", ":", "\n", "        ", "return", "6", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.minatar.environment.Environment.game_name": [[52, 54], ["None"], "methods", ["None"], ["", "def", "game_name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "env_name", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.minatar.environment.Environment.minimal_action_set": [[56, 58], ["environment.Environment.env.minimal_action_set"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.space_invaders.Env.minimal_action_set"], ["", "def", "minimal_action_set", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "minimal_action_set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.minatar.environment.Environment.display_state": [[60, 87], ["environment.Environment.env.state", "environment.Environment.ax.imshow", "plt.pause", "plt.cla", "__import__", "__import__", "__import__", "__import__.color_palette", "environment.Environment.cmap.insert", "colors.ListedColormap", "colors.BoundaryNorm", "plt.subplots", "plt.show", "plt.subplots", "plt.show", "numpy.amax", "globals", "locals", "globals", "locals", "globals", "locals", "range", "numpy.reshape", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.space_invaders.Env.state"], ["", "def", "display_state", "(", "self", ",", "time", "=", "50", ")", ":", "\n", "        ", "if", "(", "not", "self", ".", "visualized", ")", ":", "\n", "            ", "global", "plt", "\n", "global", "colors", "\n", "global", "sns", "\n", "mpl", "=", "__import__", "(", "'matplotlib.pyplot'", ",", "globals", "(", ")", ",", "locals", "(", ")", ")", "\n", "plt", "=", "mpl", ".", "pyplot", "\n", "mpl", "=", "__import__", "(", "'matplotlib.colors'", ",", "globals", "(", ")", ",", "locals", "(", ")", ")", "\n", "colors", "=", "mpl", ".", "colors", "\n", "sns", "=", "__import__", "(", "'seaborn'", ",", "globals", "(", ")", ",", "locals", "(", ")", ")", "\n", "self", ".", "cmap", "=", "sns", ".", "color_palette", "(", "\"cubehelix\"", ",", "self", ".", "n_channels", ")", "\n", "self", ".", "cmap", ".", "insert", "(", "0", ",", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "self", ".", "cmap", "=", "colors", ".", "ListedColormap", "(", "self", ".", "cmap", ")", "\n", "bounds", "=", "[", "i", "for", "i", "in", "range", "(", "self", ".", "n_channels", "+", "2", ")", "]", "\n", "self", ".", "norm", "=", "colors", ".", "BoundaryNorm", "(", "bounds", ",", "self", ".", "n_channels", "+", "1", ")", "\n", "_", ",", "self", ".", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "1", ")", "\n", "plt", ".", "show", "(", "block", "=", "False", ")", "\n", "self", ".", "visualized", "=", "True", "\n", "", "if", "(", "self", ".", "closed", ")", ":", "\n", "            ", "_", ",", "self", ".", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "1", ")", "\n", "plt", ".", "show", "(", "block", "=", "False", ")", "\n", "self", ".", "closed", "=", "False", "\n", "", "state", "=", "self", ".", "env", ".", "state", "(", ")", "\n", "numerical_state", "=", "np", ".", "amax", "(", "state", "*", "np", ".", "reshape", "(", "np", ".", "arange", "(", "self", ".", "n_channels", ")", "+", "1", ",", "(", "1", ",", "1", ",", "-", "1", ")", ")", ",", "2", ")", "+", "0.5", "\n", "self", ".", "ax", ".", "imshow", "(", "numerical_state", ",", "cmap", "=", "self", ".", "cmap", ",", "norm", "=", "self", ".", "norm", ",", "interpolation", "=", "'none'", ")", "\n", "plt", ".", "pause", "(", "time", "/", "1000", ")", "\n", "plt", ".", "cla", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.minatar.environment.Environment.close_display": [[88, 91], ["plt.close"], "methods", ["None"], ["", "def", "close_display", "(", "self", ")", ":", "\n", "        ", "plt", ".", "close", "(", ")", "\n", "self", ".", "closed", "=", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.freeway.Env.__init__": [[31, 44], ["numpy.random.RandomState", "freeway.Env.reset"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.space_invaders.Env.reset"], ["    ", "def", "__init__", "(", "self", ",", "ramping", "=", "None", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "channels", "=", "{", "\n", "'chicken'", ":", "0", ",", "\n", "'car'", ":", "1", ",", "\n", "'speed1'", ":", "2", ",", "\n", "'speed2'", ":", "3", ",", "\n", "'speed3'", ":", "4", ",", "\n", "'speed4'", ":", "5", ",", "\n", "'speed5'", ":", "6", ",", "\n", "}", "\n", "self", ".", "action_map", "=", "[", "'n'", ",", "'l'", ",", "'u'", ",", "'r'", ",", "'d'", ",", "'f'", "]", "\n", "self", ".", "random", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.freeway.Env.act": [[46, 88], ["max", "freeway.Env._randomize_cars", "min", "abs"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.freeway.Env._randomize_cars"], ["", "def", "act", "(", "self", ",", "a", ")", ":", "\n", "        ", "r", "=", "0", "\n", "if", "(", "self", ".", "terminal", ")", ":", "\n", "            ", "return", "r", ",", "self", ".", "terminal", "\n", "\n", "", "a", "=", "self", ".", "action_map", "[", "a", "]", "\n", "\n", "if", "(", "a", "==", "'u'", "and", "self", ".", "move_timer", "==", "0", ")", ":", "\n", "            ", "self", ".", "move_timer", "=", "player_speed", "\n", "self", ".", "pos", "=", "max", "(", "0", ",", "self", ".", "pos", "-", "1", ")", "\n", "", "elif", "(", "a", "==", "'d'", "and", "self", ".", "move_timer", "==", "0", ")", ":", "\n", "            ", "self", ".", "move_timer", "=", "player_speed", "\n", "self", ".", "pos", "=", "min", "(", "9", ",", "self", ".", "pos", "+", "1", ")", "\n", "\n", "# Win condition", "\n", "", "if", "(", "self", ".", "pos", "==", "0", ")", ":", "\n", "            ", "r", "+=", "1", "\n", "self", ".", "_randomize_cars", "(", "initialize", "=", "False", ")", "\n", "self", ".", "pos", "=", "9", "\n", "\n", "# Update cars", "\n", "", "for", "car", "in", "self", ".", "cars", ":", "\n", "            ", "if", "(", "car", "[", "0", ":", "2", "]", "==", "[", "4", ",", "self", ".", "pos", "]", ")", ":", "\n", "                ", "self", ".", "pos", "=", "9", "\n", "", "if", "(", "car", "[", "2", "]", "==", "0", ")", ":", "\n", "                ", "car", "[", "2", "]", "=", "abs", "(", "car", "[", "3", "]", ")", "\n", "car", "[", "0", "]", "+=", "1", "if", "car", "[", "3", "]", ">", "0", "else", "-", "1", "\n", "if", "(", "car", "[", "0", "]", "<", "0", ")", ":", "\n", "                    ", "car", "[", "0", "]", "=", "9", "\n", "", "elif", "(", "car", "[", "0", "]", ">", "9", ")", ":", "\n", "                    ", "car", "[", "0", "]", "=", "0", "\n", "", "if", "(", "car", "[", "0", ":", "2", "]", "==", "[", "4", ",", "self", ".", "pos", "]", ")", ":", "\n", "                    ", "self", ".", "pos", "=", "9", "\n", "", "", "else", ":", "\n", "                ", "car", "[", "2", "]", "-=", "1", "\n", "\n", "# Update various timers", "\n", "", "", "self", ".", "move_timer", "-=", "self", ".", "move_timer", ">", "0", "\n", "self", ".", "terminate_timer", "-=", "1", "\n", "if", "(", "self", ".", "terminate_timer", "<", "0", ")", ":", "\n", "            ", "self", ".", "terminal", "=", "True", "\n", "", "return", "r", ",", "self", ".", "terminal", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.freeway.Env.difficulty_ramp": [[90, 92], ["None"], "methods", ["None"], ["", "def", "difficulty_ramp", "(", "self", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.freeway.Env.state": [[94, 116], ["numpy.zeros", "len", "abs", "abs", "abs", "abs", "abs"], "methods", ["None"], ["", "def", "state", "(", "self", ")", ":", "\n", "        ", "state", "=", "np", ".", "zeros", "(", "(", "10", ",", "10", ",", "len", "(", "self", ".", "channels", ")", ")", ")", "\n", "state", "[", "self", ".", "pos", ",", "4", ",", "self", ".", "channels", "[", "'chicken'", "]", "]", "=", "1", "\n", "for", "car", "in", "self", ".", "cars", ":", "\n", "            ", "state", "[", "car", "[", "1", "]", ",", "car", "[", "0", "]", ",", "self", ".", "channels", "[", "'car'", "]", "]", "=", "1", "\n", "back_x", "=", "car", "[", "0", "]", "-", "1", "if", "car", "[", "3", "]", ">", "0", "else", "car", "[", "0", "]", "+", "1", "\n", "if", "(", "back_x", "<", "0", ")", ":", "\n", "                ", "back_x", "=", "9", "\n", "", "elif", "(", "back_x", ">", "9", ")", ":", "\n", "                ", "back_x", "=", "0", "\n", "", "if", "(", "abs", "(", "car", "[", "3", "]", ")", "==", "1", ")", ":", "\n", "                ", "trail", "=", "self", ".", "channels", "[", "'speed1'", "]", "\n", "", "elif", "(", "abs", "(", "car", "[", "3", "]", ")", "==", "2", ")", ":", "\n", "                ", "trail", "=", "self", ".", "channels", "[", "'speed2'", "]", "\n", "", "elif", "(", "abs", "(", "car", "[", "3", "]", ")", "==", "3", ")", ":", "\n", "                ", "trail", "=", "self", ".", "channels", "[", "'speed3'", "]", "\n", "", "elif", "(", "abs", "(", "car", "[", "3", "]", ")", "==", "4", ")", ":", "\n", "                ", "trail", "=", "self", ".", "channels", "[", "'speed4'", "]", "\n", "", "elif", "(", "abs", "(", "car", "[", "3", "]", ")", "==", "5", ")", ":", "\n", "                ", "trail", "=", "self", ".", "channels", "[", "'speed5'", "]", "\n", "", "state", "[", "car", "[", "1", "]", ",", "back_x", ",", "trail", "]", "=", "1", "\n", "", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.freeway.Env._randomize_cars": [[118, 129], ["freeway.Env.random.randint", "freeway.Env.random.choice", "range", "range", "abs", "abs"], "methods", ["None"], ["", "def", "_randomize_cars", "(", "self", ",", "initialize", "=", "False", ")", ":", "\n", "        ", "speeds", "=", "self", ".", "random", ".", "randint", "(", "1", ",", "6", ",", "8", ")", "\n", "directions", "=", "self", ".", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ",", "8", ")", "\n", "speeds", "*=", "directions", "\n", "if", "(", "initialize", ")", ":", "\n", "            ", "self", ".", "cars", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "8", ")", ":", "\n", "                ", "self", ".", "cars", "+=", "[", "[", "0", ",", "i", "+", "1", ",", "abs", "(", "speeds", "[", "i", "]", ")", ",", "speeds", "[", "i", "]", "]", "]", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "8", ")", ":", "\n", "                ", "self", ".", "cars", "[", "i", "]", "[", "2", ":", "4", "]", "=", "[", "abs", "(", "speeds", "[", "i", "]", ")", ",", "speeds", "[", "i", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.freeway.Env.reset": [[131, 137], ["freeway.Env._randomize_cars"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.freeway.Env._randomize_cars"], ["", "", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_randomize_cars", "(", "initialize", "=", "True", ")", "\n", "self", ".", "pos", "=", "9", "\n", "self", ".", "move_timer", "=", "player_speed", "\n", "self", ".", "terminate_timer", "=", "time_limit", "\n", "self", ".", "terminal", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.freeway.Env.state_shape": [[139, 141], ["len"], "methods", ["None"], ["", "def", "state_shape", "(", "self", ")", ":", "\n", "        ", "return", "[", "10", ",", "10", ",", "len", "(", "self", ".", "channels", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.freeway.Env.minimal_action_set": [[143, 146], ["freeway.Env.action_map.index"], "methods", ["None"], ["", "def", "minimal_action_set", "(", "self", ")", ":", "\n", "        ", "minimal_actions", "=", "[", "'n'", ",", "'u'", ",", "'d'", "]", "\n", "return", "[", "self", ".", "action_map", ".", "index", "(", "x", ")", "for", "x", "in", "minimal_actions", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.asterix.Env.__init__": [[29, 40], ["numpy.random.RandomState", "asterix.Env.reset"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.space_invaders.Env.reset"], ["    ", "def", "__init__", "(", "self", ",", "ramping", "=", "True", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "channels", "=", "{", "\n", "'player'", ":", "0", ",", "\n", "'enemy'", ":", "1", ",", "\n", "'trail'", ":", "2", ",", "\n", "'gold'", ":", "3", "\n", "}", "\n", "self", ".", "action_map", "=", "[", "'n'", ",", "'l'", ",", "'u'", ",", "'r'", ",", "'d'", ",", "'f'", "]", "\n", "self", ".", "ramping", "=", "ramping", "\n", "self", ".", "random", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.asterix.Env.act": [[42, 106], ["range", "asterix.Env._spawn_entity", "max", "len", "range", "min", "len", "max", "min"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.asterix.Env._spawn_entity"], ["", "def", "act", "(", "self", ",", "a", ")", ":", "\n", "        ", "r", "=", "0", "\n", "if", "(", "self", ".", "terminal", ")", ":", "\n", "            ", "return", "r", ",", "self", ".", "terminal", "\n", "\n", "", "a", "=", "self", ".", "action_map", "[", "a", "]", "\n", "\n", "# Spawn enemy if timer is up", "\n", "if", "(", "self", ".", "spawn_timer", "==", "0", ")", ":", "\n", "            ", "self", ".", "_spawn_entity", "(", ")", "\n", "self", ".", "spawn_timer", "=", "self", ".", "spawn_speed", "\n", "\n", "# Resolve player action", "\n", "", "if", "(", "a", "==", "'l'", ")", ":", "\n", "            ", "self", ".", "player_x", "=", "max", "(", "0", ",", "self", ".", "player_x", "-", "1", ")", "\n", "", "elif", "(", "a", "==", "'r'", ")", ":", "\n", "            ", "self", ".", "player_x", "=", "min", "(", "9", ",", "self", ".", "player_x", "+", "1", ")", "\n", "", "elif", "(", "a", "==", "'u'", ")", ":", "\n", "            ", "self", ".", "player_y", "=", "max", "(", "1", ",", "self", ".", "player_y", "-", "1", ")", "\n", "", "elif", "(", "a", "==", "'d'", ")", ":", "\n", "            ", "self", ".", "player_y", "=", "min", "(", "8", ",", "self", ".", "player_y", "+", "1", ")", "\n", "\n", "# Update entities", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "entities", ")", ")", ":", "\n", "            ", "x", "=", "self", ".", "entities", "[", "i", "]", "\n", "if", "(", "x", "is", "not", "None", ")", ":", "\n", "                ", "if", "(", "x", "[", "0", ":", "2", "]", "==", "[", "self", ".", "player_x", ",", "self", ".", "player_y", "]", ")", ":", "\n", "                    ", "if", "(", "self", ".", "entities", "[", "i", "]", "[", "3", "]", ")", ":", "\n", "                        ", "self", ".", "entities", "[", "i", "]", "=", "None", "\n", "r", "+=", "1", "\n", "", "else", ":", "\n", "                        ", "self", ".", "terminal", "=", "True", "\n", "", "", "", "", "if", "(", "self", ".", "move_timer", "==", "0", ")", ":", "\n", "            ", "self", ".", "move_timer", "=", "self", ".", "move_speed", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "entities", ")", ")", ":", "\n", "                ", "x", "=", "self", ".", "entities", "[", "i", "]", "\n", "if", "(", "x", "is", "not", "None", ")", ":", "\n", "                    ", "x", "[", "0", "]", "+=", "1", "if", "x", "[", "2", "]", "else", "-", "1", "\n", "if", "(", "x", "[", "0", "]", "<", "0", "or", "x", "[", "0", "]", ">", "9", ")", ":", "\n", "                        ", "self", ".", "entities", "[", "i", "]", "=", "None", "\n", "", "if", "(", "x", "[", "0", ":", "2", "]", "==", "[", "self", ".", "player_x", ",", "self", ".", "player_y", "]", ")", ":", "\n", "                        ", "if", "(", "self", ".", "entities", "[", "i", "]", "[", "3", "]", ")", ":", "\n", "                            ", "self", ".", "entities", "[", "i", "]", "=", "None", "\n", "r", "+=", "1", "\n", "", "else", ":", "\n", "                            ", "self", ".", "terminal", "=", "True", "\n", "\n", "# Update various timers", "\n", "", "", "", "", "", "self", ".", "spawn_timer", "-=", "1", "\n", "self", ".", "move_timer", "-=", "1", "\n", "\n", "\n", "#Ramp difficulty if interval has elapsed", "\n", "if", "(", "self", ".", "spawn_speed", ">", "1", "or", "self", ".", "move_speed", ">", "1", "and", "self", ".", "ramping", ")", ":", "\n", "            ", "if", "(", "self", ".", "ramp_timer", ">=", "0", ")", ":", "\n", "                ", "self", ".", "ramp_timer", "-=", "1", "\n", "", "else", ":", "\n", "                ", "if", "(", "self", ".", "move_speed", ">", "1", "and", "self", ".", "ramp_index", "%", "2", ")", ":", "\n", "                    ", "self", ".", "move_speed", "-=", "1", "\n", "", "if", "(", "self", ".", "spawn_speed", ">", "1", ")", ":", "\n", "                    ", "self", ".", "spawn_speed", "-=", "1", "\n", "", "self", ".", "ramp_index", "+=", "1", "\n", "self", ".", "ramp_timer", "=", "ramp_interval", "\n", "", "", "return", "r", ",", "self", ".", "terminal", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.asterix.Env._spawn_entity": [[108, 117], ["asterix.Env.random.choice", "asterix.Env.random.choice", "asterix.Env.random.choice", "range", "len"], "methods", ["None"], ["", "def", "_spawn_entity", "(", "self", ")", ":", "\n", "        ", "lr", "=", "self", ".", "random", ".", "choice", "(", "[", "True", ",", "False", "]", ")", "\n", "is_gold", "=", "self", ".", "random", ".", "choice", "(", "[", "True", ",", "False", "]", ",", "p", "=", "[", "1", "/", "3", ",", "2", "/", "3", "]", ")", "\n", "x", "=", "0", "if", "lr", "else", "9", "\n", "slot_options", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "self", ".", "entities", ")", ")", "if", "self", ".", "entities", "[", "i", "]", "==", "None", "]", "\n", "if", "(", "not", "slot_options", ")", ":", "\n", "            ", "return", "\n", "", "slot", "=", "self", ".", "random", ".", "choice", "(", "slot_options", ")", "\n", "self", ".", "entities", "[", "slot", "]", "=", "[", "x", ",", "slot", "+", "1", ",", "lr", ",", "is_gold", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.asterix.Env.difficulty_ramp": [[119, 121], ["None"], "methods", ["None"], ["", "def", "difficulty_ramp", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "ramp_index", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.asterix.Env.state": [[123, 134], ["numpy.zeros", "len"], "methods", ["None"], ["", "def", "state", "(", "self", ")", ":", "\n", "        ", "state", "=", "np", ".", "zeros", "(", "(", "10", ",", "10", ",", "len", "(", "self", ".", "channels", ")", ")", ")", "\n", "state", "[", "self", ".", "player_y", ",", "self", ".", "player_x", ",", "self", ".", "channels", "[", "'player'", "]", "]", "=", "1", "\n", "for", "x", "in", "self", ".", "entities", ":", "\n", "            ", "if", "(", "x", "is", "not", "None", ")", ":", "\n", "                ", "c", "=", "self", ".", "channels", "[", "'gold'", "]", "if", "x", "[", "3", "]", "else", "self", ".", "channels", "[", "'enemy'", "]", "\n", "state", "[", "x", "[", "1", "]", ",", "x", "[", "0", "]", ",", "c", "]", "=", "1", "\n", "back_x", "=", "x", "[", "0", "]", "-", "1", "if", "x", "[", "2", "]", "else", "x", "[", "0", "]", "+", "1", "\n", "if", "(", "back_x", ">=", "0", "and", "back_x", "<=", "9", ")", ":", "\n", "                    ", "state", "[", "x", "[", "1", "]", ",", "back_x", ",", "self", ".", "channels", "[", "'trail'", "]", "]", "=", "1", "\n", "", "", "", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.asterix.Env.reset": [[136, 148], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "player_x", "=", "5", "\n", "self", ".", "player_y", "=", "5", "\n", "self", ".", "entities", "=", "[", "None", "]", "*", "8", "\n", "self", ".", "shot_timer", "=", "0", "\n", "self", ".", "spawn_speed", "=", "init_spawn_speed", "\n", "self", ".", "spawn_timer", "=", "self", ".", "spawn_speed", "\n", "self", ".", "move_speed", "=", "init_move_interval", "\n", "self", ".", "move_timer", "=", "self", ".", "move_speed", "\n", "self", ".", "ramp_timer", "=", "ramp_interval", "\n", "self", ".", "ramp_index", "=", "0", "\n", "self", ".", "terminal", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.asterix.Env.state_shape": [[150, 152], ["len"], "methods", ["None"], ["", "def", "state_shape", "(", "self", ")", ":", "\n", "        ", "return", "[", "10", ",", "10", ",", "len", "(", "self", ".", "channels", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.asterix.Env.minimal_action_set": [[154, 157], ["asterix.Env.action_map.index"], "methods", ["None"], ["", "def", "minimal_action_set", "(", "self", ")", ":", "\n", "        ", "minimal_actions", "=", "[", "'n'", ",", "'l'", ",", "'u'", ",", "'r'", ",", "'d'", "]", "\n", "return", "[", "self", ".", "action_map", ".", "index", "(", "x", ")", "for", "x", "in", "minimal_actions", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.breakout.Env.__init__": [[20, 30], ["numpy.random.RandomState", "breakout.Env.reset"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.space_invaders.Env.reset"], ["    ", "def", "__init__", "(", "self", ",", "ramping", "=", "None", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "channels", "=", "{", "\n", "'paddle'", ":", "0", ",", "\n", "'ball'", ":", "1", ",", "\n", "'trail'", ":", "2", ",", "\n", "'brick'", ":", "3", ",", "\n", "}", "\n", "self", ".", "action_map", "=", "[", "'n'", ",", "'l'", ",", "'u'", ",", "'r'", ",", "'d'", ",", "'f'", "]", "\n", "self", ".", "random", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.breakout.Env.act": [[32, 97], ["max", "min", "numpy.count_nonzero"], "methods", ["None"], ["", "def", "act", "(", "self", ",", "a", ")", ":", "\n", "        ", "r", "=", "0", "\n", "if", "(", "self", ".", "terminal", ")", ":", "\n", "            ", "return", "r", ",", "self", ".", "terminal", "\n", "\n", "", "a", "=", "self", ".", "action_map", "[", "a", "]", "\n", "\n", "# Resolve player action", "\n", "if", "(", "a", "==", "'l'", ")", ":", "\n", "            ", "self", ".", "pos", "=", "max", "(", "0", ",", "self", ".", "pos", "-", "1", ")", "\n", "", "elif", "(", "a", "==", "'r'", ")", ":", "\n", "            ", "self", ".", "pos", "=", "min", "(", "9", ",", "self", ".", "pos", "+", "1", ")", "\n", "\n", "# Update ball position", "\n", "", "self", ".", "last_x", "=", "self", ".", "ball_x", "\n", "self", ".", "last_y", "=", "self", ".", "ball_y", "\n", "if", "(", "self", ".", "ball_dir", "==", "0", ")", ":", "\n", "            ", "new_x", "=", "self", ".", "ball_x", "-", "1", "\n", "new_y", "=", "self", ".", "ball_y", "-", "1", "\n", "", "elif", "(", "self", ".", "ball_dir", "==", "1", ")", ":", "\n", "            ", "new_x", "=", "self", ".", "ball_x", "+", "1", "\n", "new_y", "=", "self", ".", "ball_y", "-", "1", "\n", "", "elif", "(", "self", ".", "ball_dir", "==", "2", ")", ":", "\n", "            ", "new_x", "=", "self", ".", "ball_x", "+", "1", "\n", "new_y", "=", "self", ".", "ball_y", "+", "1", "\n", "", "elif", "(", "self", ".", "ball_dir", "==", "3", ")", ":", "\n", "            ", "new_x", "=", "self", ".", "ball_x", "-", "1", "\n", "new_y", "=", "self", ".", "ball_y", "+", "1", "\n", "\n", "", "strike_toggle", "=", "False", "\n", "if", "(", "new_x", "<", "0", "or", "new_x", ">", "9", ")", ":", "\n", "            ", "if", "(", "new_x", "<", "0", ")", ":", "\n", "                ", "new_x", "=", "0", "\n", "", "if", "(", "new_x", ">", "9", ")", ":", "\n", "                ", "new_x", "=", "9", "\n", "", "self", ".", "ball_dir", "=", "[", "1", ",", "0", ",", "3", ",", "2", "]", "[", "self", ".", "ball_dir", "]", "\n", "", "if", "(", "new_y", "<", "0", ")", ":", "\n", "            ", "new_y", "=", "0", "\n", "self", ".", "ball_dir", "=", "[", "3", ",", "2", ",", "1", ",", "0", "]", "[", "self", ".", "ball_dir", "]", "\n", "", "elif", "(", "self", ".", "brick_map", "[", "new_y", ",", "new_x", "]", "==", "1", ")", ":", "\n", "            ", "strike_toggle", "=", "True", "\n", "if", "(", "not", "self", ".", "strike", ")", ":", "\n", "                ", "r", "+=", "1", "\n", "self", ".", "strike", "=", "True", "\n", "self", ".", "brick_map", "[", "new_y", ",", "new_x", "]", "=", "0", "\n", "new_y", "=", "self", ".", "last_y", "\n", "self", ".", "ball_dir", "=", "[", "3", ",", "2", ",", "1", ",", "0", "]", "[", "self", ".", "ball_dir", "]", "\n", "", "", "elif", "(", "new_y", "==", "9", ")", ":", "\n", "            ", "if", "(", "np", ".", "count_nonzero", "(", "self", ".", "brick_map", ")", "==", "0", ")", ":", "\n", "                ", "self", ".", "brick_map", "[", "1", ":", "4", ",", ":", "]", "=", "1", "\n", "", "if", "(", "self", ".", "ball_x", "==", "self", ".", "pos", ")", ":", "\n", "                ", "self", ".", "ball_dir", "=", "[", "3", ",", "2", ",", "1", ",", "0", "]", "[", "self", ".", "ball_dir", "]", "\n", "new_y", "=", "self", ".", "last_y", "\n", "", "elif", "(", "new_x", "==", "self", ".", "pos", ")", ":", "\n", "                ", "self", ".", "ball_dir", "=", "[", "2", ",", "3", ",", "0", ",", "1", "]", "[", "self", ".", "ball_dir", "]", "\n", "new_y", "=", "self", ".", "last_y", "\n", "", "else", ":", "\n", "                ", "self", ".", "terminal", "=", "True", "\n", "\n", "", "", "if", "(", "not", "strike_toggle", ")", ":", "\n", "            ", "self", ".", "strike", "=", "False", "\n", "\n", "", "self", ".", "ball_x", "=", "new_x", "\n", "self", ".", "ball_y", "=", "new_y", "\n", "return", "r", ",", "self", ".", "terminal", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.breakout.Env.difficulty_ramp": [[99, 101], ["None"], "methods", ["None"], ["", "def", "difficulty_ramp", "(", "self", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.breakout.Env.state": [[103, 110], ["numpy.zeros", "len"], "methods", ["None"], ["", "def", "state", "(", "self", ")", ":", "\n", "        ", "state", "=", "np", ".", "zeros", "(", "(", "10", ",", "10", ",", "len", "(", "self", ".", "channels", ")", ")", ")", "\n", "state", "[", "self", ".", "ball_y", ",", "self", ".", "ball_x", ",", "self", ".", "channels", "[", "'ball'", "]", "]", "=", "1", "\n", "state", "[", "9", ",", "self", ".", "pos", ",", "self", ".", "channels", "[", "'paddle'", "]", "]", "=", "1", "\n", "state", "[", "self", ".", "last_y", ",", "self", ".", "last_x", ",", "self", ".", "channels", "[", "'trail'", "]", "]", "=", "1", "\n", "state", "[", ":", ",", ":", ",", "self", ".", "channels", "[", "'brick'", "]", "]", "=", "self", ".", "brick_map", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.breakout.Env.reset": [[112, 123], ["breakout.Env.random.choice", "numpy.zeros"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "ball_y", "=", "3", "\n", "ball_start", "=", "self", ".", "random", ".", "choice", "(", "2", ")", "\n", "self", ".", "ball_x", ",", "self", ".", "ball_dir", "=", "[", "(", "0", ",", "2", ")", ",", "(", "9", ",", "3", ")", "]", "[", "ball_start", "]", "\n", "self", ".", "pos", "=", "4", "\n", "self", ".", "brick_map", "=", "np", ".", "zeros", "(", "(", "10", ",", "10", ")", ")", "\n", "self", ".", "brick_map", "[", "1", ":", "4", ",", ":", "]", "=", "1", "\n", "self", ".", "strike", "=", "False", "\n", "self", ".", "last_x", "=", "self", ".", "ball_x", "\n", "self", ".", "last_y", "=", "self", ".", "ball_y", "\n", "self", ".", "terminal", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.breakout.Env.state_shape": [[125, 127], ["len"], "methods", ["None"], ["", "def", "state_shape", "(", "self", ")", ":", "\n", "        ", "return", "[", "10", ",", "10", ",", "len", "(", "self", ".", "channels", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.breakout.Env.minimal_action_set": [[129, 132], ["breakout.Env.action_map.index"], "methods", ["None"], ["", "def", "minimal_action_set", "(", "self", ")", ":", "\n", "        ", "minimal_actions", "=", "[", "'n'", ",", "'l'", ",", "'r'", "]", "\n", "return", "[", "self", ".", "action_map", ".", "index", "(", "x", ")", "for", "x", "in", "minimal_actions", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.seaquest.Env.__init__": [[43, 60], ["numpy.random.RandomState", "seaquest.Env.reset"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.space_invaders.Env.reset"], ["    ", "def", "__init__", "(", "self", ",", "ramping", "=", "True", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "channels", "=", "{", "\n", "'sub_front'", ":", "0", ",", "\n", "'sub_back'", ":", "1", ",", "\n", "'friendly_bullet'", ":", "2", ",", "\n", "'trail'", ":", "3", ",", "\n", "'enemy_bullet'", ":", "4", ",", "\n", "'enemy_fish'", ":", "5", ",", "\n", "'enemy_sub'", ":", "6", ",", "\n", "'oxygen_guage'", ":", "7", ",", "\n", "'diver_guage'", ":", "8", ",", "\n", "'diver'", ":", "9", "\n", "}", "\n", "self", ".", "action_map", "=", "[", "'n'", ",", "'l'", ",", "'u'", ",", "'r'", ",", "'d'", ",", "'f'", "]", "\n", "self", ".", "ramping", "=", "ramping", "\n", "self", ".", "random", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.seaquest.Env.act": [[62, 205], ["reversed", "reversed", "reversed", "reversed", "reversed", "seaquest.Env._spawn_enemy", "seaquest.Env._spawn_diver", "max", "seaquest.Env.f_bullets.remove", "seaquest.Env.divers.remove", "seaquest.Env.e_bullets.remove", "min", "seaquest.Env.e_subs.remove", "seaquest.Env.e_fish.remove", "seaquest.Env._surface", "max", "seaquest.Env.e_fish.remove", "seaquest.Env.f_bullets.remove", "seaquest.Env.divers.remove", "min", "seaquest.Env.e_subs.remove", "seaquest.Env.f_bullets.remove", "seaquest.Env.divers.remove", "seaquest.Env.e_subs.remove", "seaquest.Env.f_bullets.remove", "seaquest.Env.e_fish.remove", "seaquest.Env.f_bullets.remove"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.seaquest.Env._spawn_enemy", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.seaquest.Env._spawn_diver", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.seaquest.Env._surface"], ["", "def", "act", "(", "self", ",", "a", ")", ":", "\n", "        ", "r", "=", "0", "\n", "if", "(", "self", ".", "terminal", ")", ":", "\n", "            ", "return", "r", ",", "self", ".", "terminal", "\n", "\n", "", "a", "=", "self", ".", "action_map", "[", "a", "]", "\n", "\n", "# Spawn enemy if timer is up", "\n", "if", "(", "self", ".", "e_spawn_timer", "==", "0", ")", ":", "\n", "            ", "self", ".", "_spawn_enemy", "(", ")", "\n", "self", ".", "e_spawn_timer", "=", "self", ".", "e_spawn_speed", "\n", "\n", "", "if", "(", "self", ".", "d_spawn_timer", "==", "0", ")", ":", "\n", "            ", "self", ".", "_spawn_diver", "(", ")", "\n", "self", ".", "d_spawn_timer", "=", "diver_spawn_speed", "\n", "\n", "# Resolve player action", "\n", "", "if", "(", "a", "==", "'f'", "and", "self", ".", "shot_timer", "==", "0", ")", ":", "\n", "            ", "self", ".", "f_bullets", "+=", "[", "[", "self", ".", "sub_x", ",", "self", ".", "sub_y", ",", "self", ".", "sub_or", "]", "]", "\n", "self", ".", "shot_timer", "=", "shot_cool_down", "\n", "", "elif", "(", "a", "==", "'l'", ")", ":", "\n", "            ", "self", ".", "sub_x", "=", "max", "(", "0", ",", "self", ".", "sub_x", "-", "1", ")", "\n", "self", ".", "sub_or", "=", "False", "\n", "", "elif", "(", "a", "==", "'r'", ")", ":", "\n", "            ", "self", ".", "sub_x", "=", "min", "(", "9", ",", "self", ".", "sub_x", "+", "1", ")", "\n", "self", ".", "sub_or", "=", "True", "\n", "", "elif", "(", "a", "==", "'u'", ")", ":", "\n", "            ", "self", ".", "sub_y", "=", "max", "(", "0", ",", "self", ".", "sub_y", "-", "1", ")", "\n", "", "elif", "(", "a", "==", "'d'", ")", ":", "\n", "            ", "self", ".", "sub_y", "=", "min", "(", "8", ",", "self", ".", "sub_y", "+", "1", ")", "\n", "\n", "# Update friendly Bullets", "\n", "", "for", "bullet", "in", "reversed", "(", "self", ".", "f_bullets", ")", ":", "\n", "            ", "bullet", "[", "0", "]", "+=", "1", "if", "bullet", "[", "2", "]", "else", "-", "1", "\n", "if", "(", "bullet", "[", "0", "]", "<", "0", "or", "bullet", "[", "0", "]", ">", "9", ")", ":", "\n", "                ", "self", ".", "f_bullets", ".", "remove", "(", "bullet", ")", "\n", "", "else", ":", "\n", "                ", "removed", "=", "False", "\n", "for", "x", "in", "self", ".", "e_fish", ":", "\n", "                    ", "if", "(", "bullet", "[", "0", ":", "2", "]", "==", "x", "[", "0", ":", "2", "]", ")", ":", "\n", "                        ", "self", ".", "e_fish", ".", "remove", "(", "x", ")", "\n", "self", ".", "f_bullets", ".", "remove", "(", "bullet", ")", "\n", "r", "+=", "1", "\n", "removed", "=", "True", "\n", "break", "\n", "", "", "if", "(", "not", "removed", ")", ":", "\n", "                    ", "for", "x", "in", "self", ".", "e_subs", ":", "\n", "                        ", "if", "(", "bullet", "[", "0", ":", "2", "]", "==", "x", "[", "0", ":", "2", "]", ")", ":", "\n", "                            ", "self", ".", "e_subs", ".", "remove", "(", "x", ")", "\n", "self", ".", "f_bullets", ".", "remove", "(", "bullet", ")", "\n", "r", "+=", "1", "\n", "\n", "# Update divers", "\n", "", "", "", "", "", "for", "diver", "in", "reversed", "(", "self", ".", "divers", ")", ":", "\n", "            ", "if", "(", "diver", "[", "0", ":", "2", "]", "==", "[", "self", ".", "sub_x", ",", "self", ".", "sub_y", "]", "and", "self", ".", "diver_count", "<", "6", ")", ":", "\n", "                ", "self", ".", "divers", ".", "remove", "(", "diver", ")", "\n", "self", ".", "diver_count", "+=", "1", "\n", "", "else", ":", "\n", "                ", "if", "(", "diver", "[", "3", "]", "==", "0", ")", ":", "\n", "                    ", "diver", "[", "3", "]", "=", "diver_move_interval", "\n", "diver", "[", "0", "]", "+=", "1", "if", "diver", "[", "2", "]", "else", "-", "1", "\n", "if", "(", "diver", "[", "0", "]", "<", "0", "or", "diver", "[", "0", "]", ">", "9", ")", ":", "\n", "                        ", "self", ".", "divers", ".", "remove", "(", "diver", ")", "\n", "", "elif", "(", "diver", "[", "0", ":", "2", "]", "==", "[", "self", ".", "sub_x", ",", "self", ".", "sub_y", "]", "and", "self", ".", "diver_count", "<", "6", ")", ":", "\n", "                        ", "self", ".", "divers", ".", "remove", "(", "diver", ")", "\n", "self", ".", "diver_count", "+=", "1", "\n", "", "", "else", ":", "\n", "                    ", "diver", "[", "3", "]", "-=", "1", "\n", "\n", "# Update enemy subs", "\n", "", "", "", "for", "sub", "in", "reversed", "(", "self", ".", "e_subs", ")", ":", "\n", "            ", "if", "(", "sub", "[", "0", ":", "2", "]", "==", "[", "self", ".", "sub_x", ",", "self", ".", "sub_y", "]", ")", ":", "\n", "                ", "self", ".", "terminal", "=", "True", "\n", "", "if", "(", "sub", "[", "3", "]", "==", "0", ")", ":", "\n", "                ", "sub", "[", "3", "]", "=", "self", ".", "move_speed", "\n", "sub", "[", "0", "]", "+=", "1", "if", "sub", "[", "2", "]", "else", "-", "1", "\n", "if", "(", "sub", "[", "0", "]", "<", "0", "or", "sub", "[", "0", "]", ">", "9", ")", ":", "\n", "                    ", "self", ".", "e_subs", ".", "remove", "(", "sub", ")", "\n", "", "elif", "(", "sub", "[", "0", ":", "2", "]", "==", "[", "self", ".", "sub_x", ",", "self", ".", "sub_y", "]", ")", ":", "\n", "                    ", "self", ".", "terminal", "=", "True", "\n", "", "else", ":", "\n", "                    ", "for", "x", "in", "self", ".", "f_bullets", ":", "\n", "                        ", "if", "(", "sub", "[", "0", ":", "2", "]", "==", "x", "[", "0", ":", "2", "]", ")", ":", "\n", "                            ", "self", ".", "e_subs", ".", "remove", "(", "sub", ")", "\n", "self", ".", "f_bullets", ".", "remove", "(", "x", ")", "\n", "r", "+=", "1", "\n", "break", "\n", "", "", "", "", "else", ":", "\n", "                ", "sub", "[", "3", "]", "-=", "1", "\n", "", "if", "(", "sub", "[", "4", "]", "==", "0", ")", ":", "\n", "                ", "sub", "[", "4", "]", "=", "enemy_shot_interval", "\n", "self", ".", "e_bullets", "+=", "[", "[", "sub", "[", "0", "]", "if", "sub", "[", "2", "]", "else", "sub", "[", "0", "]", ",", "sub", "[", "1", "]", ",", "sub", "[", "2", "]", "]", "]", "\n", "", "else", ":", "\n", "                ", "sub", "[", "4", "]", "-=", "1", "\n", "\n", "# Update enemy bullets", "\n", "", "", "for", "bullet", "in", "reversed", "(", "self", ".", "e_bullets", ")", ":", "\n", "            ", "if", "(", "bullet", "[", "0", ":", "2", "]", "==", "[", "self", ".", "sub_x", ",", "self", ".", "sub_y", "]", ")", ":", "\n", "                ", "self", ".", "terminal", "=", "True", "\n", "", "bullet", "[", "0", "]", "+=", "1", "if", "bullet", "[", "2", "]", "else", "-", "1", "\n", "if", "(", "bullet", "[", "0", "]", "<", "0", "or", "bullet", "[", "0", "]", ">", "9", ")", ":", "\n", "                ", "self", ".", "e_bullets", ".", "remove", "(", "bullet", ")", "\n", "", "else", ":", "\n", "                ", "if", "(", "bullet", "[", "0", ":", "2", "]", "==", "[", "self", ".", "sub_x", ",", "self", ".", "sub_y", "]", ")", ":", "\n", "                    ", "self", ".", "terminal", "=", "True", "\n", "\n", "# Update enemy fish", "\n", "", "", "", "for", "fish", "in", "reversed", "(", "self", ".", "e_fish", ")", ":", "\n", "            ", "if", "(", "fish", "[", "0", ":", "2", "]", "==", "[", "self", ".", "sub_x", ",", "self", ".", "sub_y", "]", ")", ":", "\n", "                ", "self", ".", "terminal", "=", "True", "\n", "", "if", "(", "fish", "[", "3", "]", "==", "0", ")", ":", "\n", "                ", "fish", "[", "3", "]", "=", "self", ".", "move_speed", "\n", "fish", "[", "0", "]", "+=", "1", "if", "fish", "[", "2", "]", "else", "-", "1", "\n", "if", "(", "fish", "[", "0", "]", "<", "0", "or", "fish", "[", "0", "]", ">", "9", ")", ":", "\n", "                    ", "self", ".", "e_fish", ".", "remove", "(", "fish", ")", "\n", "", "elif", "(", "fish", "[", "0", ":", "2", "]", "==", "[", "self", ".", "sub_x", ",", "self", ".", "sub_y", "]", ")", ":", "\n", "                    ", "self", ".", "terminal", "=", "True", "\n", "", "else", ":", "\n", "                    ", "for", "x", "in", "self", ".", "f_bullets", ":", "\n", "                        ", "if", "(", "fish", "[", "0", ":", "2", "]", "==", "x", "[", "0", ":", "2", "]", ")", ":", "\n", "                            ", "self", ".", "e_fish", ".", "remove", "(", "fish", ")", "\n", "self", ".", "f_bullets", ".", "remove", "(", "x", ")", "\n", "r", "+=", "1", "\n", "break", "\n", "", "", "", "", "else", ":", "\n", "                ", "fish", "[", "3", "]", "-=", "1", "\n", "\n", "# Update various timers", "\n", "", "", "self", ".", "e_spawn_timer", "-=", "self", ".", "e_spawn_timer", ">", "0", "\n", "self", ".", "d_spawn_timer", "-=", "self", ".", "d_spawn_timer", ">", "0", "\n", "self", ".", "shot_timer", "-=", "self", ".", "shot_timer", ">", "0", "\n", "if", "(", "self", ".", "oxygen", "<", "0", ")", ":", "\n", "            ", "self", ".", "terminal", "=", "True", "\n", "", "if", "(", "self", ".", "sub_y", ">", "0", ")", ":", "\n", "            ", "self", ".", "oxygen", "-=", "1", "\n", "self", ".", "surface", "=", "False", "\n", "", "else", ":", "\n", "            ", "if", "(", "not", "self", ".", "surface", ")", ":", "\n", "                ", "if", "(", "self", ".", "diver_count", "==", "0", ")", ":", "\n", "                    ", "self", ".", "terminal", "=", "True", "\n", "", "else", ":", "\n", "                    ", "r", "+=", "self", ".", "_surface", "(", ")", "\n", "", "", "", "return", "r", ",", "self", ".", "terminal", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.seaquest.Env._surface": [[209, 225], ["None"], "methods", ["None"], ["", "def", "_surface", "(", "self", ")", ":", "\n", "        ", "self", ".", "surface", "=", "True", "\n", "if", "(", "self", ".", "diver_count", "==", "6", ")", ":", "\n", "            ", "self", ".", "diver_count", "=", "0", "\n", "r", "=", "self", ".", "oxygen", "*", "10", "//", "max_oxygen", "\n", "", "else", ":", "\n", "            ", "r", "=", "0", "\n", "", "self", ".", "oxygen", "=", "max_oxygen", "\n", "self", ".", "diver_count", "-=", "1", "\n", "if", "(", "self", ".", "e_spawn_speed", ">", "1", "or", "self", ".", "move_speed", ">", "2", "and", "self", ".", "ramping", ")", ":", "\n", "            ", "if", "(", "self", ".", "move_speed", ">", "2", "and", "self", ".", "ramp_index", "%", "2", ")", ":", "\n", "                    ", "self", ".", "move_speed", "-=", "1", "\n", "", "if", "(", "self", ".", "e_spawn_speed", ">", "1", ")", ":", "\n", "                    ", "self", ".", "e_spawn_speed", "-=", "1", "\n", "", "self", ".", "ramp_index", "+=", "1", "\n", "", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.seaquest.Env._spawn_enemy": [[228, 241], ["seaquest.Env.random.choice", "seaquest.Env.random.choice", "seaquest.Env.random.choice", "any", "numpy.arange"], "methods", ["None"], ["", "def", "_spawn_enemy", "(", "self", ")", ":", "\n", "        ", "lr", "=", "self", ".", "random", ".", "choice", "(", "[", "True", ",", "False", "]", ")", "\n", "is_sub", "=", "self", ".", "random", ".", "choice", "(", "[", "True", ",", "False", "]", ",", "p", "=", "[", "1", "/", "3", ",", "2", "/", "3", "]", ")", "\n", "x", "=", "0", "if", "lr", "else", "9", "\n", "y", "=", "self", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "1", ",", "9", ")", ")", "\n", "\n", "# Do not spawn in same row an opposite direction as existing", "\n", "if", "(", "any", "(", "[", "z", "[", "1", "]", "==", "y", "and", "z", "[", "2", "]", "!=", "lr", "for", "z", "in", "self", ".", "e_subs", "+", "self", ".", "e_fish", "]", ")", ")", ":", "\n", "            ", "return", "\n", "", "if", "(", "is_sub", ")", ":", "\n", "            ", "self", ".", "e_subs", "+=", "[", "[", "x", ",", "y", ",", "lr", ",", "self", ".", "move_speed", ",", "enemy_shot_interval", "]", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "e_fish", "+=", "[", "[", "x", ",", "y", ",", "lr", ",", "self", ".", "move_speed", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.seaquest.Env._spawn_diver": [[243, 248], ["seaquest.Env.random.choice", "seaquest.Env.random.choice", "numpy.arange"], "methods", ["None"], ["", "", "def", "_spawn_diver", "(", "self", ")", ":", "\n", "        ", "lr", "=", "self", ".", "random", ".", "choice", "(", "[", "True", ",", "False", "]", ")", "\n", "x", "=", "0", "if", "lr", "else", "9", "\n", "y", "=", "self", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "1", ",", "9", ")", ")", "\n", "self", ".", "divers", "+=", "[", "[", "x", ",", "y", ",", "lr", ",", "diver_move_interval", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.seaquest.Env.difficulty_ramp": [[250, 252], ["None"], "methods", ["None"], ["", "def", "difficulty_ramp", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "ramp_index", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.seaquest.Env.state": [[254, 282], ["numpy.zeros", "len"], "methods", ["None"], ["", "def", "state", "(", "self", ")", ":", "\n", "        ", "state", "=", "np", ".", "zeros", "(", "(", "10", ",", "10", ",", "len", "(", "self", ".", "channels", ")", ")", ")", "\n", "state", "[", "self", ".", "sub_y", ",", "self", ".", "sub_x", ",", "self", ".", "channels", "[", "'sub_front'", "]", "]", "=", "1", "\n", "back_x", "=", "self", ".", "sub_x", "-", "1", "if", "self", ".", "sub_or", "else", "self", ".", "sub_x", "+", "1", "\n", "state", "[", "self", ".", "sub_y", ",", "back_x", ",", "self", ".", "channels", "[", "'sub_back'", "]", "]", "=", "1", "\n", "state", "[", "9", ",", "0", ":", "self", ".", "oxygen", "*", "10", "//", "max_oxygen", ",", "self", ".", "channels", "[", "'oxygen_guage'", "]", "]", "=", "1", "\n", "state", "[", "9", ",", "9", "-", "self", ".", "diver_count", ":", "9", ",", "self", ".", "channels", "[", "'diver_guage'", "]", "]", "=", "1", "\n", "for", "bullet", "in", "self", ".", "f_bullets", ":", "\n", "            ", "state", "[", "bullet", "[", "1", "]", ",", "bullet", "[", "0", "]", ",", "self", ".", "channels", "[", "'friendly_bullet'", "]", "]", "=", "1", "\n", "", "for", "bullet", "in", "self", ".", "e_bullets", ":", "\n", "            ", "state", "[", "bullet", "[", "1", "]", ",", "bullet", "[", "0", "]", ",", "self", ".", "channels", "[", "'enemy_bullet'", "]", "]", "=", "1", "\n", "", "for", "fish", "in", "self", ".", "e_fish", ":", "\n", "            ", "state", "[", "fish", "[", "1", "]", ",", "fish", "[", "0", "]", ",", "self", ".", "channels", "[", "'enemy_fish'", "]", "]", "=", "1", "\n", "back_x", "=", "fish", "[", "0", "]", "-", "1", "if", "fish", "[", "2", "]", "else", "fish", "[", "0", "]", "+", "1", "\n", "if", "(", "back_x", ">=", "0", "and", "back_x", "<=", "9", ")", ":", "\n", "                ", "state", "[", "fish", "[", "1", "]", ",", "back_x", ",", "self", ".", "channels", "[", "'trail'", "]", "]", "=", "1", "\n", "", "", "for", "sub", "in", "self", ".", "e_subs", ":", "\n", "            ", "state", "[", "sub", "[", "1", "]", ",", "sub", "[", "0", "]", ",", "self", ".", "channels", "[", "'enemy_sub'", "]", "]", "=", "1", "\n", "back_x", "=", "sub", "[", "0", "]", "-", "1", "if", "sub", "[", "2", "]", "else", "sub", "[", "0", "]", "+", "1", "\n", "if", "(", "back_x", ">=", "0", "and", "back_x", "<=", "9", ")", ":", "\n", "                ", "state", "[", "sub", "[", "1", "]", ",", "back_x", ",", "self", ".", "channels", "[", "'trail'", "]", "]", "=", "1", "\n", "", "", "for", "diver", "in", "self", ".", "divers", ":", "\n", "            ", "state", "[", "diver", "[", "1", "]", ",", "diver", "[", "0", "]", ",", "self", ".", "channels", "[", "'diver'", "]", "]", "=", "1", "\n", "back_x", "=", "diver", "[", "0", "]", "-", "1", "if", "diver", "[", "2", "]", "else", "diver", "[", "0", "]", "+", "1", "\n", "if", "(", "back_x", ">=", "0", "and", "back_x", "<=", "9", ")", ":", "\n", "                ", "state", "[", "diver", "[", "1", "]", ",", "back_x", ",", "self", ".", "channels", "[", "'trail'", "]", "]", "=", "1", "\n", "\n", "", "", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.seaquest.Env.reset": [[284, 304], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "oxygen", "=", "max_oxygen", "\n", "self", ".", "diver_count", "=", "0", "\n", "self", ".", "sub_x", "=", "5", "\n", "self", ".", "sub_y", "=", "0", "\n", "# 0=left, 1=right", "\n", "self", ".", "sub_or", "=", "False", "\n", "self", ".", "f_bullets", "=", "[", "]", "\n", "self", ".", "e_bullets", "=", "[", "]", "\n", "self", ".", "e_fish", "=", "[", "]", "\n", "self", ".", "e_subs", "=", "[", "]", "\n", "self", ".", "divers", "=", "[", "]", "\n", "self", ".", "e_spawn_speed", "=", "init_spawn_speed", "\n", "self", ".", "e_spawn_timer", "=", "self", ".", "e_spawn_speed", "\n", "self", ".", "d_spawn_timer", "=", "diver_spawn_speed", "\n", "self", ".", "move_speed", "=", "init_move_interval", "\n", "self", ".", "ramp_index", "=", "0", "\n", "self", ".", "shot_timer", "=", "0", "\n", "self", ".", "surface", "=", "True", "\n", "self", ".", "terminal", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.seaquest.Env.state_shape": [[306, 308], ["len"], "methods", ["None"], ["", "def", "state_shape", "(", "self", ")", ":", "\n", "        ", "return", "[", "10", ",", "10", ",", "len", "(", "self", ".", "channels", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.seaquest.Env.minimal_action_set": [[310, 313], ["seaquest.Env.action_map.index"], "methods", ["None"], ["", "def", "minimal_action_set", "(", "self", ")", ":", "\n", "        ", "minimal_actions", "=", "[", "'n'", ",", "'l'", ",", "'u'", ",", "'r'", ",", "'d'", ",", "'f'", "]", "\n", "return", "[", "self", ".", "action_map", ".", "index", "(", "x", ")", "for", "x", "in", "minimal_actions", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.space_invaders.Env.__init__": [[32, 45], ["numpy.random.RandomState", "space_invaders.Env.reset"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.space_invaders.Env.reset"], ["    ", "def", "__init__", "(", "self", ",", "ramping", "=", "True", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "channels", "=", "{", "\n", "'cannon'", ":", "0", ",", "\n", "'alien'", ":", "1", ",", "\n", "'alien_left'", ":", "2", ",", "\n", "'alien_right'", ":", "3", ",", "\n", "'friendly_bullet'", ":", "4", ",", "\n", "'enemy_bullet'", ":", "5", "\n", "}", "\n", "self", ".", "action_map", "=", "[", "'n'", ",", "'l'", ",", "'u'", ",", "'r'", ",", "'d'", ",", "'f'", "]", "\n", "self", ".", "ramping", "=", "ramping", "\n", "self", ".", "random", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.space_invaders.Env.act": [[47, 108], ["numpy.roll", "numpy.roll", "numpy.logical_and", "numpy.sum", "min", "space_invaders.Env._nearest_alien", "numpy.count_nonzero", "max", "numpy.count_nonzero", "numpy.roll", "numpy.roll", "min", "numpy.sum", "numpy.sum", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.space_invaders.Env._nearest_alien"], ["", "def", "act", "(", "self", ",", "a", ")", ":", "\n", "        ", "r", "=", "0", "\n", "if", "(", "self", ".", "terminal", ")", ":", "\n", "            ", "return", "r", ",", "self", ".", "terminal", "\n", "\n", "", "a", "=", "self", ".", "action_map", "[", "a", "]", "\n", "\n", "# Resolve player action", "\n", "if", "(", "a", "==", "'f'", "and", "self", ".", "shot_timer", "==", "0", ")", ":", "\n", "            ", "self", ".", "f_bullet_map", "[", "9", ",", "self", ".", "pos", "]", "=", "1", "\n", "self", ".", "shot_timer", "=", "shot_cool_down", "\n", "", "elif", "(", "a", "==", "'l'", ")", ":", "\n", "            ", "self", ".", "pos", "=", "max", "(", "0", ",", "self", ".", "pos", "-", "1", ")", "\n", "", "elif", "(", "a", "==", "'r'", ")", ":", "\n", "            ", "self", ".", "pos", "=", "min", "(", "9", ",", "self", ".", "pos", "+", "1", ")", "\n", "\n", "# Update Friendly Bullets", "\n", "", "self", ".", "f_bullet_map", "=", "np", ".", "roll", "(", "self", ".", "f_bullet_map", ",", "-", "1", ",", "axis", "=", "0", ")", "\n", "self", ".", "f_bullet_map", "[", "9", ",", ":", "]", "=", "0", "\n", "\n", "# Update Enemy Bullets", "\n", "self", ".", "e_bullet_map", "=", "np", ".", "roll", "(", "self", ".", "e_bullet_map", ",", "1", ",", "axis", "=", "0", ")", "\n", "self", ".", "e_bullet_map", "[", "0", ",", ":", "]", "=", "0", "\n", "if", "(", "self", ".", "e_bullet_map", "[", "9", ",", "self", ".", "pos", "]", ")", ":", "\n", "            ", "self", ".", "terminal", "=", "True", "\n", "\n", "# Update aliens", "\n", "", "if", "(", "self", ".", "alien_map", "[", "9", ",", "self", ".", "pos", "]", ")", ":", "\n", "            ", "self", ".", "terminal", "=", "True", "\n", "", "if", "(", "self", ".", "alien_move_timer", "==", "0", ")", ":", "\n", "            ", "self", ".", "alien_move_timer", "=", "min", "(", "np", ".", "count_nonzero", "(", "self", ".", "alien_map", ")", ",", "self", ".", "enemy_move_interval", ")", "\n", "if", "(", "np", ".", "sum", "(", "self", ".", "alien_map", "[", ":", ",", "0", "]", ")", ">", "0", "and", "self", ".", "alien_dir", "<", "0", "or", "np", ".", "sum", "(", "self", ".", "alien_map", "[", ":", ",", "9", "]", ")", ">", "0", "and", "self", ".", "alien_dir", ">", "0", ")", ":", "\n", "                ", "self", ".", "alien_dir", "=", "-", "self", ".", "alien_dir", "\n", "if", "(", "np", ".", "sum", "(", "self", ".", "alien_map", "[", "9", ",", ":", "]", ")", ">", "0", ")", ":", "\n", "                    ", "self", ".", "terminal", "=", "True", "\n", "", "self", ".", "alien_map", "=", "np", ".", "roll", "(", "self", ".", "alien_map", ",", "1", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "alien_map", "=", "np", ".", "roll", "(", "self", ".", "alien_map", ",", "self", ".", "alien_dir", ",", "axis", "=", "1", ")", "\n", "", "if", "(", "self", ".", "alien_map", "[", "9", ",", "self", ".", "pos", "]", ")", ":", "\n", "                ", "self", ".", "terminal", "=", "True", "\n", "", "", "if", "(", "self", ".", "alien_shot_timer", "==", "0", ")", ":", "\n", "            ", "self", ".", "alien_shot_timer", "=", "enemy_shot_interval", "\n", "nearest_alien", "=", "self", ".", "_nearest_alien", "(", "self", ".", "pos", ")", "\n", "self", ".", "e_bullet_map", "[", "nearest_alien", "[", "0", "]", ",", "nearest_alien", "[", "1", "]", "]", "=", "1", "\n", "\n", "", "kill_locations", "=", "np", ".", "logical_and", "(", "self", ".", "alien_map", ",", "self", ".", "alien_map", "==", "self", ".", "f_bullet_map", ")", "\n", "\n", "r", "+=", "np", ".", "sum", "(", "kill_locations", ")", "\n", "self", ".", "alien_map", "[", "kill_locations", "]", "=", "self", ".", "f_bullet_map", "[", "kill_locations", "]", "=", "0", "\n", "\n", "\n", "# Update various timers", "\n", "self", ".", "shot_timer", "-=", "self", ".", "shot_timer", ">", "0", "\n", "self", ".", "alien_move_timer", "-=", "1", "\n", "self", ".", "alien_shot_timer", "-=", "1", "\n", "if", "(", "np", ".", "count_nonzero", "(", "self", ".", "alien_map", ")", "==", "0", ")", ":", "\n", "            ", "if", "(", "self", ".", "enemy_move_interval", ">", "6", "and", "self", ".", "ramping", ")", ":", "\n", "                ", "self", ".", "enemy_move_interval", "-=", "1", "\n", "self", ".", "ramp_index", "+=", "1", "\n", "", "self", ".", "alien_map", "[", "0", ":", "4", ",", "2", ":", "8", "]", "=", "1", "\n", "", "return", "r", ",", "self", ".", "terminal", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.space_invaders.Env._nearest_alien": [[110, 117], ["search_order.sort", "range", "numpy.sum", "abs", "numpy.max", "numpy.where"], "methods", ["None"], ["", "def", "_nearest_alien", "(", "self", ",", "pos", ")", ":", "\n", "        ", "search_order", "=", "[", "i", "for", "i", "in", "range", "(", "10", ")", "]", "\n", "search_order", ".", "sort", "(", "key", "=", "lambda", "x", ":", "abs", "(", "x", "-", "pos", ")", ")", "\n", "for", "i", "in", "search_order", ":", "\n", "            ", "if", "(", "np", ".", "sum", "(", "self", ".", "alien_map", "[", ":", ",", "i", "]", ")", ">", "0", ")", ":", "\n", "                ", "return", "[", "np", ".", "max", "(", "np", ".", "where", "(", "self", ".", "alien_map", "[", ":", ",", "i", "]", "==", "1", ")", ")", ",", "i", "]", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.space_invaders.Env.difficulty_ramp": [[119, 121], ["None"], "methods", ["None"], ["", "def", "difficulty_ramp", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "ramp_index", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.space_invaders.Env.state": [[123, 134], ["numpy.zeros", "len"], "methods", ["None"], ["", "def", "state", "(", "self", ")", ":", "\n", "        ", "state", "=", "np", ".", "zeros", "(", "(", "10", ",", "10", ",", "len", "(", "self", ".", "channels", ")", ")", ")", "\n", "state", "[", "9", ",", "self", ".", "pos", ",", "self", ".", "channels", "[", "'cannon'", "]", "]", "=", "1", "\n", "state", "[", ":", ",", ":", ",", "self", ".", "channels", "[", "'alien'", "]", "]", "=", "self", ".", "alien_map", "\n", "if", "(", "self", ".", "alien_dir", "<", "0", ")", ":", "\n", "            ", "state", "[", ":", ",", ":", ",", "self", ".", "channels", "[", "'alien_left'", "]", "]", "=", "self", ".", "alien_map", "\n", "", "else", ":", "\n", "            ", "state", "[", ":", ",", ":", ",", "self", ".", "channels", "[", "'alien_right'", "]", "]", "=", "self", ".", "alien_map", "\n", "", "state", "[", ":", ",", ":", ",", "self", ".", "channels", "[", "'friendly_bullet'", "]", "]", "=", "self", ".", "f_bullet_map", "\n", "state", "[", ":", ",", ":", ",", "self", ".", "channels", "[", "'enemy_bullet'", "]", "]", "=", "self", ".", "e_bullet_map", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.space_invaders.Env.reset": [[136, 149], ["numpy.zeros", "numpy.zeros", "numpy.zeros"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "pos", "=", "5", "\n", "self", ".", "f_bullet_map", "=", "np", ".", "zeros", "(", "(", "10", ",", "10", ")", ")", "\n", "self", ".", "e_bullet_map", "=", "np", ".", "zeros", "(", "(", "10", ",", "10", ")", ")", "\n", "self", ".", "alien_map", "=", "np", ".", "zeros", "(", "(", "10", ",", "10", ")", ")", "\n", "self", ".", "alien_map", "[", "0", ":", "4", ",", "2", ":", "8", "]", "=", "1", "\n", "self", ".", "alien_dir", "=", "-", "1", "\n", "self", ".", "enemy_move_interval", "=", "enemy_move_interval", "\n", "self", ".", "alien_move_timer", "=", "self", ".", "enemy_move_interval", "\n", "self", ".", "alien_shot_timer", "=", "enemy_shot_interval", "\n", "self", ".", "ramp_index", "=", "0", "\n", "self", ".", "shot_timer", "=", "0", "\n", "self", ".", "terminal", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.space_invaders.Env.state_shape": [[151, 153], ["len"], "methods", ["None"], ["", "def", "state_shape", "(", "self", ")", ":", "\n", "        ", "return", "[", "10", ",", "10", ",", "len", "(", "self", ".", "channels", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.environments.space_invaders.Env.minimal_action_set": [[155, 158], ["space_invaders.Env.action_map.index"], "methods", ["None"], ["", "def", "minimal_action_set", "(", "self", ")", ":", "\n", "        ", "minimal_actions", "=", "[", "'n'", ",", "'l'", ",", "'r'", ",", "'f'", "]", "\n", "return", "[", "self", ".", "action_map", ".", "index", "(", "x", ")", "for", "x", "in", "minimal_actions", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.algorithms.ac_cddqn.AC_CDDQN.__init__": [[7, 14], ["utils.base_dqn.BaseDQN.__init__", "ac_cddqn.AC_CDDQN.creatNN().to", "torch.optim.RMSprop", "range", "ac_cddqn.AC_CDDQN.Q_net[].parameters", "range", "ac_cddqn.AC_CDDQN.creatNN"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.modules.actor.Actor.__init__", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.base_dqn.BaseDQN.creatNN"], ["    ", "def", "__init__", "(", "self", ",", "opts", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "opts", ")", "\n", "self", ".", "target_network_update_freq", "=", "opts", ".", "target_network_update_freq", "\n", "self", ".", "Q_net", "=", "[", "self", ".", "creatNN", "(", "self", ".", "input_type", ")", ".", "to", "(", "self", ".", "device", ")", "for", "_", "in", "range", "(", "2", ")", "]", "\n", "self", ".", "optimizer", "=", "[", "torch", ".", "optim", ".", "RMSprop", "(", "self", ".", "Q_net", "[", "i", "]", ".", "parameters", "(", ")", ",", "lr", "=", "opts", ".", "step_size", ",", "alpha", "=", "opts", ".", "squared_grad_momentum", ",", "\n", "centered", "=", "True", ",", "eps", "=", "opts", ".", "min_squared_grad", ")", "for", "i", "in", "range", "(", "2", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.algorithms.ac_cddqn.AC_CDDQN.get_action_selection_q_values": [[15, 19], ["utils.commons.to_numpy().flatten", "utils.commons.to_numpy"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.helper.to_numpy"], ["", "def", "get_action_selection_q_values", "(", "self", ",", "state", ")", ":", "\n", "        ", "q_values", "=", "self", ".", "Q_net", "[", "0", "]", "(", "state", ")", "+", "self", ".", "Q_net", "[", "1", "]", "(", "state", ")", "\n", "q_values", "=", "to_numpy", "(", "q_values", ")", ".", "flatten", "(", ")", "\n", "return", "q_values", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.algorithms.ac_cddqn.AC_CDDQN.learn": [[20, 25], ["super().learn", "super().learn"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.algorithms.ac_cddqn.AC_CDDQN.learn", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.algorithms.ac_cddqn.AC_CDDQN.learn"], ["", "def", "learn", "(", "self", ")", ":", "\n", "        ", "self", ".", "update_Q_net_index", "=", "0", "\n", "super", "(", ")", ".", "learn", "(", ")", "\n", "self", ".", "update_Q_net_index", "=", "1", "\n", "super", "(", ")", ".", "learn", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.algorithms.ac_cddqn.AC_CDDQN.compute_q_target": [[26, 46], ["torch.no_grad", "torch.zeros().cuda", "torch.arange().long", "range", "torch.argmax", "q_next[].view", "[].view", "q_next.argsort", "idxs.size", "torch.zeros", "torch.arange", "idxs.size", "len", "q_next.max", "torch.min"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.replay.Replay.size", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.replay.Replay.size"], ["", "def", "compute_q_target", "(", "self", ",", "next_states", ",", "rewards", ",", "dones", ")", ":", "\n", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "q_next", "=", "self", ".", "Q_net", "[", "1", "-", "self", ".", "update_Q_net_index", "]", "(", "next_states", ")", "\n", "N", "=", "self", ".", "opts", ".", "N", "\n", "idxs", "=", "q_next", ".", "argsort", "(", "1", ")", "[", ":", ",", "-", "N", ":", "]", "# [B, N]", "\n", "tmp", "=", "torch", ".", "zeros", "(", "idxs", ".", "size", "(", ")", ")", ".", "cuda", "(", ")", "# # [B, N]", "\n", "q_next_tmp", "=", "self", ".", "Q_net", "[", "self", ".", "update_Q_net_index", "]", "(", "next_states", ")", "\n", "ords", "=", "torch", ".", "arange", "(", "len", "(", "q_next_tmp", ")", ")", ".", "long", "(", ")", "\n", "for", "i", "in", "range", "(", "idxs", ".", "size", "(", "1", ")", ")", ":", "\n", "                ", "tmp", "[", ":", ",", "i", "]", "=", "q_next_tmp", "[", "ords", ",", "idxs", "[", ":", ",", "i", "]", "]", "\n", "", "best_actions", "=", "torch", ".", "argmax", "(", "tmp", ",", "dim", "=", "-", "1", ")", "\n", "best_actions", "=", "idxs", "[", "ords", ",", "best_actions", "]", "\n", "Q_s_prime_a_prime", "=", "q_next", "[", "ords", ",", "best_actions", "]", ".", "view", "(", "-", "1", ")", "\n", "\n", "clip_Q", "=", "q_next", ".", "max", "(", "1", ")", "[", "0", "]", ".", "view", "(", "-", "1", ")", "\n", "\n", "q_target", "=", "rewards", "+", "self", ".", "discount", "*", "torch", ".", "min", "(", "Q_s_prime_a_prime", ",", "clip_Q", ")", "*", "(", "1", "-", "dones", ")", "\n", "\n", "return", "q_target", "", "", "", "", ""]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_CDQ_code.main.main": [[4, 18], ["numpy.zeros", "numpy.random.rand", "utils.q", "utils.dq", "utils.cdq", "utils.ac_cdq", "numpy.where", "numpy.where"], "function", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.q.q", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.dq.dq", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.cdq.cdq", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.ac_cdq.ac_cdq"], ["\n", "def", "main", "(", ")", ":", "\n", "\n", "    ", "opts", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", "\n", "print", "(", "'Cuda available?: '", "+", "str", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", ")", "\n", "\n", "for", "id", "in", "opts", ".", "ids", ":", "\n", "\n", "        ", "opts", ".", "id", "=", "id", "\n", "opts", ".", "tag", "=", "\"%s_%s_id%d\"", "%", "(", "opts", ".", "env_nm", ",", "opts", ".", "alg_tag", ",", "opts", ".", "id", ")", "\n", "opts", ".", "save_dir", "=", "\"./results/%s/%s\"", "%", "(", "opts", ".", "agent_nm", ",", "opts", ".", "tag", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "opts", ".", "save_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "opts", ".", "save_dir", ")", "\n", "\n", "", "agent", "=", "Method", "(", "opts", ")", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_CDE_code.main.f": [[12, 36], ["print", "numpy.random.seed", "numpy.zeros", "range", "numpy.mean", "numpy.var", "print", "pipe.send", "isinstance", "utils.Env", "numpy.zeros", "range", "numpy.max", "isinstance", "p_op", "p_op", "utils.Env.sample", "numpy.array"], "function", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.replay_buffer.ReplayBuffer.sample"], ["        ", "opts", ".", "id", "=", "id", "\n", "opts", ".", "tag", "=", "\"%s_%s_id%d\"", "%", "(", "opts", ".", "env_nm", ",", "opts", ".", "alg_tag", ",", "opts", ".", "id", ")", "\n", "opts", ".", "save_dir", "=", "\"./results/%s/%s\"", "%", "(", "opts", ".", "agent_nm", ",", "opts", ".", "tag", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "opts", ".", "save_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "opts", ".", "save_dir", ")", "\n", "\n", "", "agent", "=", "Method", "(", "opts", ")", "\n", "agent", ".", "run_steps", "(", ")", "\n", "\n", "", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "main", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_CDE_code.main.mp": [[37, 53], ["len", "multiprocessing.Pool", "range", "multiprocessing.Pipe", "print", "numpy.random.randint", "enumerate", "range", "len", "ps.append", "p.get", "pipe[].recv", "multiprocessing.Pool.apply_async", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_CDE_code.main.setting1": [[54, 65], ["numpy.zeros", "main.mp", "utils.save_data", "numpy.arange", "len", "enumerate", "enumerate"], "function", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_CDE_code.main.mp", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.commons.save_data"], []], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_CDE_code.main.setting2": [[66, 77], ["numpy.zeros", "main.mp", "utils.save_data", "numpy.arange", "len", "enumerate", "enumerate"], "function", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_CDE_code.main.mp", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.commons.save_data"], []], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_CDE_code.main.setting3": [[78, 90], ["numpy.zeros", "main.mp", "utils.save_data", "len", "enumerate", "enumerate", "range"], "function", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_CDE_code.main.mp", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.commons.save_data"], []], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_CDE_code.main.main": [[91, 94], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3_code.main.main": [[4, 10], ["utils.run", "os.path.exists", "os.mkdir"], "function", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.minatar.gui.GUI.run"], ["\n", "def", "main", "(", ")", ":", "\n", "\n", "    ", "opts", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", "\n", "print", "(", "'Cuda available?: '", "+", "str", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", ")", "\n", "\n", "for", "id", "in", "opts", ".", "ids", ":", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3.ac_td3.AC_TD3.__init__": [[6, 21], ["AC_TD3.modules.Actor().to", "copy.deepcopy", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "AC_TD3.modules.Critic().to", "copy.deepcopy", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "os.path.join", "os.path.join", "ac_td3.AC_TD3.actor.parameters", "ac_td3.AC_TD3.critic.parameters", "AC_TD3.modules.Actor", "AC_TD3.modules.Critic"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "opts", ",", "seed", ")", ":", "\n", "\n", "        ", "self", ".", "actor", "=", "Actor", "(", "opts", ")", ".", "to", "(", "opts", ".", "device", ")", "\n", "self", ".", "actor_target", "=", "copy", ".", "deepcopy", "(", "self", ".", "actor", ")", "\n", "self", ".", "actor_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "actor", ".", "parameters", "(", ")", ",", "lr", "=", "3e-4", ")", "\n", "\n", "self", ".", "critic", "=", "Critic", "(", "opts", ")", ".", "to", "(", "opts", ".", "device", ")", "\n", "self", ".", "critic_target", "=", "copy", ".", "deepcopy", "(", "self", ".", "critic", ")", "\n", "self", ".", "critic_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "critic", ".", "parameters", "(", ")", ",", "lr", "=", "3e-4", ")", "\n", "\n", "self", ".", "actor_save_path", "=", "os", ".", "path", ".", "join", "(", "opts", ".", "results_dir", ",", "\"actor_seed%d.path\"", "%", "seed", ")", "\n", "self", ".", "critic_save_path", "=", "os", ".", "path", ".", "join", "(", "opts", ".", "results_dir", ",", "\"critic_seed%d.path\"", "%", "seed", ")", "\n", "\n", "self", ".", "opts", "=", "opts", "\n", "self", ".", "total_it", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3.ac_td3.AC_TD3.select_action": [[22, 25], ["torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "ac_td3.AC_TD3.actor().cpu().data.numpy().flatten", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "ac_td3.AC_TD3.actor().cpu().data.numpy", "torch.FloatTensor().to.reshape", "torch.FloatTensor().to.reshape", "ac_td3.AC_TD3.actor().cpu", "ac_td3.AC_TD3.actor"], "methods", ["None"], ["", "def", "select_action", "(", "self", ",", "state", ")", ":", "\n", "        ", "state", "=", "torch", ".", "FloatTensor", "(", "state", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", ".", "to", "(", "self", ".", "opts", ".", "device", ")", "\n", "return", "self", ".", "actor", "(", "state", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "flatten", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3.ac_td3.AC_TD3.max_q": [[26, 29], ["torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor().to.reshape", "torch.FloatTensor().to.reshape", "ac_td3.AC_TD3.critic.Q1", "ac_td3.AC_TD3.critic.Q2", "ac_td3.AC_TD3.actor.A1", "ac_td3.AC_TD3.actor.A2"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.modules.critic.Critic.Q1", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.modules.critic.Critic.Q2", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.modules.actor.Actor.A1", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.modules.actor.Actor.A2"], ["", "def", "max_q", "(", "self", ",", "state", ")", ":", "\n", "        ", "state", "=", "torch", ".", "FloatTensor", "(", "state", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", ".", "to", "(", "self", ".", "opts", ".", "device", ")", "\n", "return", "(", "self", ".", "critic", ".", "Q1", "(", "state", ",", "self", ".", "actor", ".", "A1", "(", "state", ")", ")", "+", "self", ".", "critic", ".", "Q2", "(", "state", ",", "self", ".", "actor", ".", "A2", "(", "state", ")", ")", ")", ".", "item", "(", ")", "/", "2.", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3.ac_td3.AC_TD3.train": [[30, 84], ["replay_buffer.sample", "next_state.unsqueeze().repeat().reshape", "ac_td3.AC_TD3.critic", "ac_td3.AC_TD3.critic_optimizer.zero_grad", "critic_loss.backward", "ac_td3.AC_TD3.critic_optimizer.step", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "next_actions.reshape.reshape.unsqueeze", "next_actions.reshape.reshape.reshape", "ac_td3.AC_TD3.critic_target.Q1().view", "ac_td3.AC_TD3.critic_target.Q2", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "ac_td3.AC_TD3.actor_optimizer.zero_grad", "actor_loss.backward", "ac_td3.AC_TD3.actor_optimizer.step", "zip", "zip", "next_state.unsqueeze().repeat", "ac_td3.AC_TD3.critic_target.Q1", "ac_td3.AC_TD3.critic.Q2().mean", "ac_td3.AC_TD3.critic.parameters", "ac_td3.AC_TD3.critic_target.parameters", "target_param.data.copy_", "ac_td3.AC_TD3.actor.parameters", "ac_td3.AC_TD3.actor_target.parameters", "target_param.data.copy_", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "ac_td3.AC_TD3.critic_target.Q1", "ac_td3.AC_TD3.actor_target.A1", "ac_td3.AC_TD3.critic.Q1().mean", "next_state.unsqueeze", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "ac_td3.AC_TD3.actor_target.A2", "ac_td3.AC_TD3.argmax", "torch.min", "torch.min", "torch.min", "torch.min", "ac_td3.AC_TD3.critic.Q2", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "ac_td3.AC_TD3.critic.Q1", "ac_td3.AC_TD3.actor.A2", "ac_td3.AC_TD3.actor.A1", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.replay_buffer.ReplayBuffer.sample", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.step.step", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.modules.critic.Critic.Q2", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.utils.step.step", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.modules.critic.Critic.Q1", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.modules.critic.Critic.Q1", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.modules.actor.Actor.A1", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.modules.actor.Actor.A2", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.modules.critic.Critic.Q2", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.modules.critic.Critic.Q1", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.modules.actor.Actor.A2", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.modules.actor.Actor.A1"], ["", "def", "train", "(", "self", ",", "replay_buffer", ")", ":", "\n", "\n", "        ", "self", ".", "total_it", "+=", "1", "\n", "\n", "# sample replay buffer", "\n", "state", ",", "action", ",", "next_state", ",", "reward", ",", "not_done", "=", "replay_buffer", ".", "sample", "(", "self", ".", "opts", ".", "batch_size", ")", "\n", "next_states", "=", "next_state", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "opts", ".", "top_candidates", ",", "1", ")", ".", "reshape", "(", "self", ".", "opts", ".", "batch_size", "*", "self", ".", "opts", ".", "top_candidates", ",", "self", ".", "opts", ".", "state_dim", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "            ", "noise", "=", "(", "torch", ".", "randn_like", "(", "action", ")", "*", "self", ".", "opts", ".", "policy_noise", ")", ".", "clamp", "(", "-", "self", ".", "opts", ".", "noise_clip", ",", "self", ".", "opts", ".", "noise_clip", ")", "\n", "next_actions", "=", "(", "self", ".", "actor_target", ".", "A2", "(", "next_state", ")", "+", "noise", ")", ".", "clamp", "(", "-", "self", ".", "opts", ".", "max_action", ",", "self", ".", "opts", ".", "max_action", ")", "\n", "next_actions", "=", "next_actions", ".", "unsqueeze", "(", "1", ")", "\n", "next_actions", "=", "next_actions", "+", "self", ".", "opts", ".", "ac_td3_std_dev", "*", "torch", ".", "randn", "(", "self", ".", "opts", ".", "batch_size", ",", "self", ".", "opts", ".", "top_candidates", ",", "self", ".", "opts", ".", "action_dim", ")", ".", "cuda", "(", ")", "# [B, TopK, D]", "\n", "next_actions", "=", "next_actions", ".", "reshape", "(", "self", ".", "opts", ".", "batch_size", "*", "self", ".", "opts", ".", "top_candidates", ",", "self", ".", "opts", ".", "action_dim", ")", "\n", "\n", "max_action_values_Q1", "=", "self", ".", "critic_target", ".", "Q1", "(", "next_states", ",", "next_actions", ")", ".", "view", "(", "self", ".", "opts", ".", "batch_size", ",", "self", ".", "opts", ".", "top_candidates", ")", "\n", "max_action_idxs_Q1", "=", "(", "max_action_values_Q1", ".", "argmax", "(", "1", ")", "+", "self", ".", "opts", ".", "top_candidates", "*", "torch", ".", "arange", "(", "0", ",", "self", ".", "opts", ".", "batch_size", ",", "dtype", "=", "torch", ".", "int64", ")", ".", "cuda", "(", ")", ")", ".", "view", "(", "-", "1", ")", "\n", "max_actions_Q1", "=", "next_actions", "[", "max_action_idxs_Q1", "]", "# [B, D]", "\n", "target_Q1", "=", "self", ".", "critic_target", ".", "Q2", "(", "next_state", ",", "max_actions_Q1", ")", "\n", "\n", "if", "self", ".", "opts", ".", "is_clip", ":", "\n", "                ", "clip_target_Q1", "=", "self", ".", "critic_target", ".", "Q1", "(", "next_state", ",", "self", ".", "actor_target", ".", "A1", "(", "next_state", ")", ")", "\n", "target_Q", "=", "reward", "+", "not_done", "*", "self", ".", "opts", ".", "discount", "*", "torch", ".", "min", "(", "target_Q1", ",", "clip_target_Q1", ")", "\n", "", "else", ":", "\n", "                ", "target_Q", "=", "reward", "+", "not_done", "*", "self", ".", "opts", ".", "discount", "*", "target_Q1", "\n", "\n", "# Get current Q estimates", "\n", "", "", "current_Q1", ",", "current_Q2", "=", "self", ".", "critic", "(", "state", ",", "action", ")", "\n", "\n", "# Compute critic loss", "\n", "critic_loss", "=", "F", ".", "mse_loss", "(", "current_Q1", ",", "target_Q", ")", "+", "F", ".", "mse_loss", "(", "current_Q2", ",", "target_Q", ")", "\n", "\n", "# Optimize the critic", "\n", "self", ".", "critic_optimizer", ".", "zero_grad", "(", ")", "\n", "critic_loss", ".", "backward", "(", ")", "\n", "self", ".", "critic_optimizer", ".", "step", "(", ")", "\n", "\n", "# Delayed policy updates", "\n", "if", "self", ".", "total_it", "%", "self", ".", "opts", ".", "policy_freq", "==", "0", ":", "\n", "\n", "# Compute actor losse", "\n", "            ", "actor_loss", "=", "-", "self", ".", "critic", ".", "Q1", "(", "state", ",", "self", ".", "actor", ".", "A1", "(", "state", ")", ")", ".", "mean", "(", ")", "-", "self", ".", "critic", ".", "Q2", "(", "state", ",", "self", ".", "actor", ".", "A2", "(", "state", ")", ")", ".", "mean", "(", ")", "\n", "\n", "# Optimize the actor", "\n", "self", ".", "actor_optimizer", ".", "zero_grad", "(", ")", "\n", "actor_loss", ".", "backward", "(", ")", "\n", "self", ".", "actor_optimizer", ".", "step", "(", ")", "\n", "\n", "# Update the frozen target models", "\n", "for", "param", ",", "target_param", "in", "zip", "(", "self", ".", "critic", ".", "parameters", "(", ")", ",", "self", ".", "critic_target", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "target_param", ".", "data", ".", "copy_", "(", "self", ".", "opts", ".", "tau", "*", "param", ".", "data", "+", "(", "1", "-", "self", ".", "opts", ".", "tau", ")", "*", "target_param", ".", "data", ")", "\n", "\n", "", "for", "param", ",", "target_param", "in", "zip", "(", "self", ".", "actor", ".", "parameters", "(", ")", ",", "self", ".", "actor_target", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "target_param", ".", "data", ".", "copy_", "(", "self", ".", "opts", ".", "tau", "*", "param", ".", "data", "+", "(", "1", "-", "self", ".", "opts", ".", "tau", ")", "*", "target_param", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3.ac_td3.AC_TD3.save": [[85, 88], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "ac_td3.AC_TD3.critic.state_dict", "ac_td3.AC_TD3.actor.state_dict"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3.ac_td3.AC_TD3.save", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3.ac_td3.AC_TD3.save", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3.ac_td3.AC_TD3.save", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3.ac_td3.AC_TD3.save", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3.ac_td3.AC_TD3.save", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3.ac_td3.AC_TD3.save", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3.ac_td3.AC_TD3.save", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3.ac_td3.AC_TD3.save"], ["", "", "", "def", "save", "(", "self", ")", ":", "\n", "        ", "torch", ".", "save", "(", "self", ".", "critic", ".", "state_dict", "(", ")", ",", "self", ".", "critic_save_path", ")", "\n", "torch", ".", "save", "(", "self", ".", "actor", ".", "state_dict", "(", ")", ",", "self", ".", "actor_save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3.ac_td3.AC_TD3.load": [[89, 92], ["ac_td3.AC_TD3.critic.load_state_dict", "ac_td3.AC_TD3.actor.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3.ac_td3.AC_TD3.load", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3.ac_td3.AC_TD3.load", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3.ac_td3.AC_TD3.load", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3.ac_td3.AC_TD3.load", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3.ac_td3.AC_TD3.load", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3.ac_td3.AC_TD3.load", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3.ac_td3.AC_TD3.load", "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.AC_TD3.ac_td3.AC_TD3.load"], ["", "def", "load", "(", "self", ")", ":", "\n", "        ", "self", ".", "critic", ".", "load_state_dict", "(", "torch", ".", "load", "(", "self", ".", "critic_save_path", ")", ")", "\n", "self", ".", "actor", ".", "load_state_dict", "(", "torch", ".", "load", "(", "self", ".", "actor_save_path", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.modules.critic.Critic.__init__": [[4, 16], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.modules.actor.Actor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opts", ")", ":", "\n", "        ", "super", "(", "Critic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Q1 architecture", "\n", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "opts", ".", "state_dim", "+", "opts", ".", "action_dim", ",", "256", ")", "\n", "self", ".", "l2", "=", "nn", ".", "Linear", "(", "256", ",", "256", ")", "\n", "self", ".", "l3", "=", "nn", ".", "Linear", "(", "256", ",", "1", ")", "\n", "\n", "# Q2 architecture", "\n", "self", ".", "l4", "=", "nn", ".", "Linear", "(", "opts", ".", "state_dim", "+", "opts", ".", "action_dim", ",", "256", ")", "\n", "self", ".", "l5", "=", "nn", ".", "Linear", "(", "256", ",", "256", ")", "\n", "self", ".", "l6", "=", "nn", ".", "Linear", "(", "256", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.modules.critic.Critic.forward": [[17, 28], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "critic.Critic.l3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "critic.Critic.l6", "critic.Critic.l1", "critic.Critic.l2", "critic.Critic.l4", "critic.Critic.l5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "state", ",", "action", ")", ":", "\n", "        ", "sa", "=", "torch", ".", "cat", "(", "[", "state", ",", "action", "]", ",", "1", ")", "\n", "\n", "q1", "=", "F", ".", "relu", "(", "self", ".", "l1", "(", "sa", ")", ")", "\n", "q1", "=", "F", ".", "relu", "(", "self", ".", "l2", "(", "q1", ")", ")", "\n", "q1", "=", "self", ".", "l3", "(", "q1", ")", "\n", "\n", "q2", "=", "F", ".", "relu", "(", "self", ".", "l4", "(", "sa", ")", ")", "\n", "q2", "=", "F", ".", "relu", "(", "self", ".", "l5", "(", "q2", ")", ")", "\n", "q2", "=", "self", ".", "l6", "(", "q2", ")", "\n", "return", "q1", ",", "q2", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.modules.critic.Critic.Q1": [[29, 36], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "critic.Critic.l3", "critic.Critic.l1", "critic.Critic.l2"], "methods", ["None"], ["", "def", "Q1", "(", "self", ",", "state", ",", "action", ")", ":", "\n", "        ", "sa", "=", "torch", ".", "cat", "(", "[", "state", ",", "action", "]", ",", "1", ")", "\n", "\n", "q1", "=", "F", ".", "relu", "(", "self", ".", "l1", "(", "sa", ")", ")", "\n", "q1", "=", "F", ".", "relu", "(", "self", ".", "l2", "(", "q1", ")", ")", "\n", "q1", "=", "self", ".", "l3", "(", "q1", ")", "\n", "return", "q1", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.modules.critic.Critic.Q2": [[37, 44], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "critic.Critic.l6", "critic.Critic.l4", "critic.Critic.l5"], "methods", ["None"], ["", "def", "Q2", "(", "self", ",", "state", ",", "action", ")", ":", "\n", "        ", "sa", "=", "torch", ".", "cat", "(", "[", "state", ",", "action", "]", ",", "1", ")", "\n", "\n", "q2", "=", "F", ".", "relu", "(", "self", ".", "l4", "(", "sa", ")", ")", "\n", "q2", "=", "F", ".", "relu", "(", "self", ".", "l5", "(", "q2", ")", ")", "\n", "q2", "=", "self", ".", "l6", "(", "q2", ")", "\n", "return", "q2", "", "", "", ""]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.modules.actor.Actor.__init__": [[4, 18], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.modules.actor.Actor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opts", ")", ":", "\n", "        ", "super", "(", "Actor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# A1", "\n", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "opts", ".", "state_dim", ",", "256", ")", "\n", "self", ".", "l2", "=", "nn", ".", "Linear", "(", "256", ",", "256", ")", "\n", "self", ".", "l3", "=", "nn", ".", "Linear", "(", "256", ",", "opts", ".", "action_dim", ")", "\n", "\n", "# A2", "\n", "self", ".", "l4", "=", "nn", ".", "Linear", "(", "opts", ".", "state_dim", ",", "256", ")", "\n", "self", ".", "l5", "=", "nn", ".", "Linear", "(", "256", ",", "256", ")", "\n", "self", ".", "l6", "=", "nn", ".", "Linear", "(", "256", ",", "opts", ".", "action_dim", ")", "\n", "\n", "self", ".", "max_action", "=", "opts", ".", "max_action", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.modules.actor.Actor.A1": [[19, 23], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "actor.Actor.l1", "actor.Actor.l2", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "actor.Actor.l3"], "methods", ["None"], ["", "def", "A1", "(", "self", ",", "state", ")", ":", "\n", "        ", "a", "=", "F", ".", "relu", "(", "self", ".", "l1", "(", "state", ")", ")", "\n", "a", "=", "F", ".", "relu", "(", "self", ".", "l2", "(", "a", ")", ")", "\n", "return", "self", ".", "max_action", "*", "torch", ".", "tanh", "(", "self", ".", "l3", "(", "a", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.modules.actor.Actor.A2": [[24, 28], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "actor.Actor.l4", "actor.Actor.l5", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "actor.Actor.l6"], "methods", ["None"], ["", "def", "A2", "(", "self", ",", "state", ")", ":", "\n", "        ", "a", "=", "F", ".", "relu", "(", "self", ".", "l4", "(", "state", ")", ")", "\n", "a", "=", "F", ".", "relu", "(", "self", ".", "l5", "(", "a", ")", ")", "\n", "return", "self", ".", "max_action", "*", "torch", ".", "tanh", "(", "self", ".", "l6", "(", "a", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.modules.actor.Actor.forward": [[29, 31], ["actor.Actor.A1"], "methods", ["home.repos.pwc.inspect_result.Jiang-HB_AC_CDQ.modules.actor.Actor.A1"], ["", "def", "forward", "(", "self", ",", "state", ")", ":", "\n", "        ", "return", "self", ".", "A1", "(", "state", ")", "\n", "", "", ""]]}