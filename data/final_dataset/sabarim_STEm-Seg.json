{"home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.transforms._CVTransformBase.__init__": [[6, 8], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.transforms.Identity.__init__": [[11, 13], ["transforms._CVTransformBase.__init__"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "self", ".", "__class__", ",", "self", ")", ".", "__init__", "(", "\"identity\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.transforms.Identity.__call__": [[14, 16], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.transforms.ReverseColorChannels.__init__": [[19, 27], ["transforms._CVTransformBase.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "format", "=", "'HWC'", ")", ":", "\n", "        ", "super", "(", "self", ".", "__class__", ",", "self", ")", ".", "__init__", "(", "\"reverse color channels\"", ")", "\n", "if", "format", "==", "'HWC'", ":", "\n", "            ", "self", ".", "dim", "=", "2", "\n", "", "elif", "format", "==", "'CHW'", ":", "\n", "            ", "self", ".", "dim", "=", "0", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid format '{}' provided\"", ".", "format", "(", "format", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.transforms.ReverseColorChannels.__call__": [[28, 30], ["numpy.flip"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "return", "np", ".", "flip", "(", "image", ",", "self", ".", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.transforms.Normalize.__init__": [[33, 38], ["transforms._CVTransformBase.__init__", "numpy.float32", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "norm_factor", ",", "mean", ",", "std", ")", ":", "\n", "        ", "super", "(", "self", ".", "__class__", ",", "self", ")", ".", "__init__", "(", "\"normalize\"", ")", "\n", "self", ".", "__norm_factor", "=", "np", ".", "float32", "(", "norm_factor", ")", "\n", "self", ".", "__mean", "=", "np", ".", "array", "(", "[", "[", "mean", "]", "]", ",", "np", ".", "float32", ")", "\n", "self", ".", "__std", "=", "np", ".", "array", "(", "[", "[", "std", "]", "]", ",", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.transforms.Normalize.__call__": [[39, 43], ["image.astype"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "normed_image", "=", "image", ".", "astype", "(", "np", ".", "float32", ")", "/", "self", ".", "__norm_factor", "\n", "normed_image", "=", "(", "normed_image", "-", "self", ".", "__mean", ")", "/", "self", ".", "__std", "\n", "return", "normed_image", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.transforms.ReverseNormalize.__init__": [[46, 52], ["transforms._CVTransformBase.__init__", "numpy.float32", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "norm_factor", ",", "mean", ",", "std", ",", "dtype", "=", "np", ".", "uint8", ")", ":", "\n", "        ", "super", "(", "self", ".", "__class__", ",", "self", ")", ".", "__init__", "(", "\"reverse normalize\"", ")", "\n", "self", ".", "__norm_factor", "=", "np", ".", "float32", "(", "norm_factor", ")", "\n", "self", ".", "__mean", "=", "np", ".", "array", "(", "[", "[", "mean", "]", "]", ",", "np", ".", "float32", ")", "\n", "self", ".", "__std", "=", "np", ".", "array", "(", "[", "[", "std", "]", "]", ",", "np", ".", "float32", ")", "\n", "self", ".", "__dtype", "=", "dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.transforms.ReverseNormalize.__call__": [[53, 57], ["rnormed_image.astype"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "rnormed_image", "=", "(", "image", "*", "self", ".", "__std", ")", "+", "self", ".", "__mean", "\n", "rnormed_image", "=", "rnormed_image", "*", "self", ".", "__norm_factor", "\n", "return", "rnormed_image", ".", "astype", "(", "self", ".", "__dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.transforms.ToTorchTensor.__init__": [[60, 65], ["transforms._CVTransformBase.__init__"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "format", "=", "'HWC'", ",", "dtype", "=", "None", ")", ":", "\n", "        ", "super", "(", "self", ".", "__class__", ",", "self", ")", ".", "__init__", "(", "\"to torch tensor\"", ")", "\n", "assert", "format", "in", "[", "'HWC'", ",", "'CHW'", "]", "\n", "self", ".", "format", "=", "format", "\n", "self", ".", "dtype", "=", "dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.transforms.ToTorchTensor.__call__": [[66, 76], ["torch.from_numpy", "numpy.ascontiguousarray", "tensor.permute.permute.permute", "tensor.permute.permute.to", "tensor.permute.permute.ndimension"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "tensor", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "image", ")", ")", "\n", "\n", "if", "tensor", ".", "ndimension", "(", ")", "==", "3", "and", "self", ".", "format", "==", "'CHW'", ":", "\n", "            ", "tensor", "=", "tensor", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "", "if", "self", ".", "dtype", "is", "not", "None", ":", "\n", "            ", "return", "tensor", ".", "to", "(", "dtype", "=", "self", ".", "dtype", ")", "\n", "", "else", ":", "\n", "            ", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.transforms.Compose.__init__": [[79, 82], ["transforms._CVTransformBase.__init__"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "super", "(", "self", ".", "__class__", ",", "self", ")", ".", "__init__", "(", "\"composition\"", ")", "\n", "self", ".", "__transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.transforms.Compose.__call__": [[83, 87], ["transform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "for", "transform", "in", "self", ".", "__transforms", ":", "\n", "            ", "image", "=", "transform", "(", "image", ")", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.transforms.BatchImageTransform.__init__": [[90, 93], ["transforms._CVTransformBase.__init__"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "transform", ")", ":", "\n", "        ", "super", "(", "self", ".", "__class__", ",", "self", ")", ".", "__init__", "(", "\"batch image transform\"", ")", "\n", "self", ".", "__transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.transforms.BatchImageTransform.__call__": [[94, 96], ["transforms.BatchImageTransform.__transform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "*", "images", ")", ":", "\n", "        ", "return", "[", "self", ".", "__transform", "(", "image", ")", "for", "image", "in", "images", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.global_registry.GlobalRegistry.__init__": [[25, 28], ["dict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "_name", "=", "name", "\n", "self", ".", "_obj_map", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.global_registry.GlobalRegistry.__getitem__": [[29, 34], ["KeyError"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "not", "in", "self", ".", "_obj_map", ":", "\n", "            ", "raise", "KeyError", "(", "\"No object with name '{}' is registered under '{}'\"", ".", "format", "(", "\n", "name", ",", "self", ".", "_name", ")", ")", "\n", "", "return", "self", ".", "_obj_map", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.global_registry.GlobalRegistry.create": [[35, 39], ["ValueError"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "create", "(", "name", ")", ":", "\n", "        ", "if", "name", "in", "GlobalRegistry", ".", "_REGISTRIES", ":", "\n", "            ", "raise", "ValueError", "(", "\"A registry with the name '{}' already exists\"", ".", "format", "(", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.global_registry.GlobalRegistry.exists": [[40, 43], ["None"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "exists", "(", "name", ")", ":", "\n", "        ", "return", "name", "in", "GlobalRegistry", ".", "_REGISTRIES", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.global_registry.GlobalRegistry.get": [[44, 49], ["global_registry.GlobalRegistry"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get", "(", "name", ")", ":", "\n", "        ", "if", "name", "not", "in", "GlobalRegistry", ".", "_REGISTRIES", ":", "\n", "            ", "GlobalRegistry", ".", "_REGISTRIES", "[", "name", "]", "=", "GlobalRegistry", "(", "name", ")", "\n", "", "return", "GlobalRegistry", ".", "_REGISTRIES", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.global_registry.GlobalRegistry.register": [[50, 54], ["global_registry.GlobalRegistry.get", "global_registry.GlobalRegistry.get"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get"], ["", "@", "staticmethod", "\n", "def", "register", "(", "registry_name", ",", "obj_name", "=", "None", ",", "obj", "=", "None", ")", ":", "\n", "        ", "register", "=", "GlobalRegistry", ".", "get", "(", "registry_name", ")", "\n", "return", "register", ".", "add", "(", "obj_name", ",", "obj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.global_registry.GlobalRegistry._do_register": [[55, 59], ["None"], "methods", ["None"], ["", "def", "_do_register", "(", "self", ",", "name", ",", "obj", ")", ":", "\n", "        ", "assert", "(", "name", "not", "in", "self", ".", "_obj_map", ")", ",", "\"An object named '{}' was already registered in '{}' registry!\"", ".", "format", "(", "name", ",", "self", ".", "_name", ")", "\n", "self", ".", "_obj_map", "[", "name", "]", "=", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.global_registry.GlobalRegistry.add": [[60, 75], ["global_registry.GlobalRegistry._do_register", "global_registry.GlobalRegistry._do_register", "global_registry.GlobalRegistry.add.deco"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.global_registry.GlobalRegistry._do_register", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.global_registry.GlobalRegistry._do_register"], ["", "def", "add", "(", "self", ",", "name", "=", "None", ",", "obj", "=", "None", ")", ":", "\n", "        ", "if", "obj", "is", "None", ":", "\n", "# used as a decorator", "\n", "            ", "def", "deco", "(", "func_or_class", ",", "name", ")", ":", "\n", "                ", "if", "name", "is", "None", ":", "\n", "                    ", "name", "=", "func_or_class", ".", "__name__", "\n", "", "self", ".", "_do_register", "(", "name", ",", "func_or_class", ")", "\n", "return", "func_or_class", "\n", "\n", "", "return", "lambda", "func_or_class", ":", "deco", "(", "func_or_class", ",", "name", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "name", ":", "\n", "                ", "name", "=", "obj", ".", "__name__", "\n", "", "self", ".", "_do_register", "(", "name", ",", "obj", ")", "\n", "return", "None", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.constants.Loss.__init__": [[27, 29], ["ValueError"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Static class 'Losses' should not be instantiated\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.constants.ModelOutput.__init__": [[45, 47], ["ValueError"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Static class 'ModelOutput' should not be instantiated\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.constants.RepoPaths.__init__": [[50, 52], ["ValueError"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Static class 'RepoPaths' should not be instantiated\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.constants.RepoPaths.dataset_meta_info_dir": [[53, 56], ["os.path.realpath", "os.path.join", "os.path.dirname"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "dataset_meta_info_dir", "(", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "realpath", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "os", ".", "pardir", ",", "'data'", ",", "'metainfo'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.constants.RepoPaths.configs_dir": [[57, 60], ["os.path.realpath", "os.path.join", "os.path.dirname"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "configs_dir", "(", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "realpath", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "os", ".", "pardir", ",", "'config'", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.distributed.is_distributed": [[12, 16], ["torch.is_initialized", "torch.is_available"], "function", ["None"], ["def", "is_distributed", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "False", "\n", "", "return", "dist", ".", "is_initialized", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.distributed.get_world_size": [[18, 24], ["torch.get_world_size", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.distributed.get_world_size"], ["", "def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.distributed.get_rank": [[26, 32], ["torch.get_rank", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.distributed.get_rank"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.distributed.is_main_process": [[34, 36], ["distributed.get_rank"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.distributed.get_rank"], ["", "def", "is_main_process", "(", ")", ":", "\n", "    ", "return", "get_rank", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.distributed.get_device": [[38, 40], ["distributed.get_rank"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.distributed.get_rank"], ["", "def", "get_device", "(", ")", ":", "\n", "    ", "return", "\"cuda:{}\"", ".", "format", "(", "get_rank", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.distributed.synchronize": [[42, 55], ["torch.get_world_size", "torch.barrier", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.distributed.get_world_size"], ["", "def", "synchronize", "(", ")", ":", "\n", "    ", "\"\"\"\n    Helper function to synchronize (barrier) among all processes when\n    using distributed training\n    \"\"\"", "\n", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "\n", "", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.distributed.all_gather": [[57, 98], ["distributed.get_world_size", "pickle.dumps", "torch.ByteStorage.from_buffer", "torch.ByteStorage.from_buffer", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.all_gather", "max", "torch.all_gather", "zip", "torch.LongTensor().to", "torch.LongTensor().to", "int", "tensor_list.append", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.cat", "torch.cat", "data_list.append", "torch.ByteTensor", "torch.ByteTensor", "torch.LongTensor", "torch.LongTensor", "range", "size.item", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.cat.cpu().numpy().tobytes", "pickle.loads", "torch.LongTensor", "torch.LongTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.cat.numel", "torch.ByteTensor", "torch.ByteTensor", "torch.cat.cpu().numpy", "torch.cat.cpu"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.distributed.get_world_size", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.distributed.all_gather", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.distributed.all_gather", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.image_list.ImageList.numpy", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.cpu"], ["", "def", "all_gather", "(", "data", ")", ":", "\n", "    ", "\"\"\"\n    Run all_gather on arbitrary picklable data (not necessarily tensors)\n    Args:\n        data: any picklable object\n    Returns:\n        list[data]: list of data gathered from each rank\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "[", "data", "]", "\n", "\n", "# serialized to a Tensor", "\n", "", "buffer", "=", "pickle", ".", "dumps", "(", "data", ")", "\n", "storage", "=", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "buffer", ")", "\n", "tensor", "=", "torch", ".", "ByteTensor", "(", "storage", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "\n", "# obtain Tensor size of each rank", "\n", "local_size", "=", "torch", ".", "LongTensor", "(", "[", "tensor", ".", "numel", "(", ")", "]", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "size_list", "=", "[", "torch", ".", "LongTensor", "(", "[", "0", "]", ")", ".", "to", "(", "\"cuda\"", ")", "for", "_", "in", "range", "(", "world_size", ")", "]", "\n", "dist", ".", "all_gather", "(", "size_list", ",", "local_size", ")", "\n", "size_list", "=", "[", "int", "(", "size", ".", "item", "(", ")", ")", "for", "size", "in", "size_list", "]", "\n", "max_size", "=", "max", "(", "size_list", ")", "\n", "\n", "# receiving Tensor from all ranks", "\n", "# we pad the tensor because torch all_gather does not support", "\n", "# gathering tensors of different shapes", "\n", "tensor_list", "=", "[", "]", "\n", "for", "_", "in", "size_list", ":", "\n", "        ", "tensor_list", ".", "append", "(", "torch", ".", "ByteTensor", "(", "size", "=", "(", "max_size", ",", ")", ")", ".", "to", "(", "\"cuda\"", ")", ")", "\n", "", "if", "local_size", "!=", "max_size", ":", "\n", "        ", "padding", "=", "torch", ".", "ByteTensor", "(", "size", "=", "(", "max_size", "-", "local_size", ",", ")", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "tensor", "=", "torch", ".", "cat", "(", "(", "tensor", ",", "padding", ")", ",", "dim", "=", "0", ")", "\n", "", "dist", ".", "all_gather", "(", "tensor_list", ",", "tensor", ")", "\n", "\n", "data_list", "=", "[", "]", "\n", "for", "size", ",", "tensor", "in", "zip", "(", "size_list", ",", "tensor_list", ")", ":", "\n", "        ", "buffer", "=", "tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", "[", ":", "size", "]", "\n", "data_list", ".", "append", "(", "pickle", ".", "loads", "(", "buffer", ")", ")", "\n", "\n", "", "return", "data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.distributed.reduce_dict": [[100, 127], ["distributed.get_world_size", "torch.no_grad", "torch.no_grad", "sorted", "torch.stack", "torch.stack", "torch.reduce", "input_dict.keys", "names.append", "torch.stack.append", "torch.get_rank", "zip"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.distributed.get_world_size", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.distributed.get_rank"], ["", "def", "reduce_dict", "(", "input_dict", ",", "average", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        input_dict (dict): all the values will be reduced\n        average (bool): whether to do average or sum\n    Reduce the values in the dictionary from all processes so that process with rank\n    0 has the averaged results. Returns a dict with the same fields as\n    input_dict, after reduction.\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "input_dict", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "names", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "# sort the keys so that they are consistent across processes", "\n", "for", "k", "in", "sorted", "(", "input_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "names", ".", "append", "(", "k", ")", "\n", "values", ".", "append", "(", "input_dict", "[", "k", "]", ")", "\n", "", "values", "=", "torch", ".", "stack", "(", "values", ",", "dim", "=", "0", ")", "\n", "dist", ".", "reduce", "(", "values", ",", "dst", "=", "0", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", "and", "average", ":", "\n", "# only main process gets accumulated, so only divide by", "\n", "# world_size in this case", "\n", "            ", "values", "/=", "world_size", "\n", "", "reduced_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "names", ",", "values", ")", "}", "\n", "", "return", "reduced_dict", "\n", "", ""]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.__init__": [[7, 11], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "_name", "=", "name", "\n", "self", ".", "__tic_time", "=", "None", "\n", "self", ".", "__total_duration", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.__enter__": [[12, 14], ["timer.Timer.tic"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.tic"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "tic", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.__exit__": [[15, 17], ["timer.Timer.toc"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.toc"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_val", ",", "exc_tb", ")", ":", "\n", "        ", "self", ".", "toc", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.tic": [[18, 21], ["time.time.time"], "methods", ["None"], ["", "def", "tic", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "__tic_time", "is", "None", ",", "\"tic() has already been called for timer '{}'\"", ".", "format", "(", "self", ".", "_name", ")", "\n", "self", ".", "__tic_time", "=", "current_time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.toc": [[22, 26], ["time.time.time"], "methods", ["None"], ["", "def", "toc", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "__tic_time", "is", "not", "None", ",", "\"tic() has not been called for timer '{}'\"", ".", "format", "(", "self", ".", "_name", ")", "\n", "self", ".", "__total_duration", "+=", "current_time", "(", ")", "-", "self", ".", "__tic_time", "\n", "self", ".", "__tic_time", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.running": [[27, 30], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "running", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__tic_time", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.paused": [[31, 34], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "paused", "(", "self", ")", ":", "\n", "        ", "return", "not", "self", ".", "running", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.total_duration": [[35, 38], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "total_duration", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__total_duration", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.create": [[39, 45], ["Timer.Timer"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "create", "(", "name", ")", ":", "\n", "        ", "assert", "name", "not", "in", "Timer", ".", "_TIMERS", ",", "\"Timer with name '{}' already exists\"", ".", "format", "(", "name", ")", "\n", "timer", "=", "Timer", "(", "name", ")", "\n", "Timer", ".", "_TIMERS", "[", "name", "]", "=", "timer", "\n", "return", "timer", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get": [[46, 52], ["timer.Timer.create"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.create"], ["", "@", "staticmethod", "\n", "def", "get", "(", "name", ")", ":", "\n", "        ", "if", "name", "not", "in", "Timer", ".", "_TIMERS", ":", "\n", "            ", "return", "Timer", ".", "create", "(", "name", ")", "\n", "", "else", ":", "\n", "            ", "return", "Timer", ".", "_TIMERS", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get_duration": [[53, 58], ["Timer._TIMERS.get"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get"], ["", "", "@", "staticmethod", "\n", "def", "get_duration", "(", "name", ")", ":", "\n", "        ", "timer", "=", "Timer", ".", "_TIMERS", ".", "get", "(", "name", ",", "None", ")", "\n", "assert", "timer", "is", "not", "None", ",", "\"No timer named '{}' exists\"", ".", "format", "(", "name", ")", "\n", "return", "timer", ".", "total_duration", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get_durations_sum": [[59, 62], ["sum", "Timer._TIMERS.values"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_durations_sum", "(", ")", ":", "\n", "        ", "return", "sum", "(", "[", "timer", ".", "total_duration", "for", "timer", "in", "Timer", ".", "_TIMERS", ".", "values", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.print_durations": [[63, 70], ["Timer._TIMERS.items", "print", "print"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "print_durations", "(", ")", ":", "\n", "        ", "durations_sum", "=", "0.", "\n", "for", "name", ",", "timer", "in", "Timer", ".", "_TIMERS", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "\" - {}: {:03f} sec\"", ".", "format", "(", "name", ",", "timer", ".", "total_duration", ")", ")", "\n", "durations_sum", "+=", "timer", ".", "total_duration", "\n", "", "print", "(", "\" - TOTAL: {:03f} sec\"", ".", "format", "(", "durations_sum", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.log_duration": [[71, 92], ["f", "Timer.get.Timer.get", "timer.Timer.get", "timers_to_pause.append", "timer.Timer.get"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get"], ["", "@", "staticmethod", "\n", "def", "log_duration", "(", "*", "timer_names", ")", ":", "\n", "        ", "def", "wrap", "(", "f", ")", ":", "\n", "            ", "def", "wrap2", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "                ", "timers_to_pause", "=", "[", "]", "\n", "\n", "for", "name", "in", "timer_names", ":", "\n", "                    ", "timer", "=", "Timer", ".", "get", "(", "name", ")", "\n", "if", "timer", ".", "paused", ":", "\n", "                        ", "timers_to_pause", ".", "append", "(", "timer", ")", "\n", "timer", ".", "tic", "(", ")", "\n", "\n", "", "", "output", "=", "f", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "for", "timer", "in", "timers_to_pause", ":", "\n", "                    ", "timer", ".", "toc", "(", ")", "\n", "\n", "", "return", "output", "\n", "\n", "", "return", "wrap2", "\n", "", "return", "wrap", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.exclude_duration": [[93, 115], ["f", "timer.Timer.get", "Timer.get.Timer.get", "timer.Timer.get", "timers_to_resume.append"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get"], ["", "@", "staticmethod", "\n", "def", "exclude_duration", "(", "*", "timer_names", ")", ":", "\n", "        ", "def", "wrap", "(", "f", ")", ":", "\n", "            ", "def", "wrap2", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "                ", "timers_to_resume", "=", "[", "]", "\n", "\n", "for", "name", "in", "timer_names", ":", "\n", "                    ", "if", "name", "in", "Timer", ".", "_TIMERS", ":", "\n", "                        ", "timer", "=", "Timer", ".", "get", "(", "name", ")", "\n", "if", "timer", ".", "running", ":", "\n", "                            ", "timer", ".", "toc", "(", ")", "\n", "timers_to_resume", ".", "append", "(", "timer", ")", "\n", "\n", "", "", "", "output", "=", "f", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "for", "timer", "in", "timers_to_resume", ":", "\n", "                    ", "timer", ".", "tic", "(", ")", "\n", "\n", "", "return", "output", "\n", "\n", "", "return", "wrap2", "\n", "", "return", "wrap", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.model_paths.ModelPaths.__init__": [[12, 14], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.model_paths.ModelPaths.checkpoint_base_dir": [[15, 18], ["os.path.join", "model_paths._get_env_var"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths._get_env_var"], ["", "@", "staticmethod", "\n", "def", "checkpoint_base_dir", "(", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "_get_env_var", "(", "'STEMSEG_MODELS_DIR'", ")", ",", "'checkpoints'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.model_paths.ModelPaths.pretrained_backbones_dir": [[19, 22], ["os.path.join", "model_paths._get_env_var"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths._get_env_var"], ["", "@", "staticmethod", "\n", "def", "pretrained_backbones_dir", "(", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "_get_env_var", "(", "'STEMSEG_MODELS_DIR'", ")", ",", "'pretrained'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.model_paths.ModelPaths.pretrained_maskrcnn_x101_fpn": [[23, 26], ["os.path.join", "model_paths.ModelPaths.pretrained_backbones_dir"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.model_paths.ModelPaths.pretrained_backbones_dir"], ["", "@", "staticmethod", "\n", "def", "pretrained_maskrcnn_x101_fpn", "(", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "ModelPaths", ".", "pretrained_backbones_dir", "(", ")", ",", "'e2e_mask_rcnn_X_101_32x8d_FPN_1x.pth'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.model_paths.ModelPaths.pretrained_maskrcnn_r50_fpn": [[27, 30], ["os.path.join", "model_paths.ModelPaths.pretrained_backbones_dir"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.model_paths.ModelPaths.pretrained_backbones_dir"], ["", "@", "staticmethod", "\n", "def", "pretrained_maskrcnn_r50_fpn", "(", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "ModelPaths", ".", "pretrained_backbones_dir", "(", ")", ",", "'e2e_mask_rcnn_R_50_FPN_1x.pth'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.model_paths.ModelPaths.pretrained_maskrcnn_r101_fpn": [[31, 34], ["os.path.join", "model_paths.ModelPaths.pretrained_backbones_dir"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.model_paths.ModelPaths.pretrained_backbones_dir"], ["", "@", "staticmethod", "\n", "def", "pretrained_maskrcnn_r101_fpn", "(", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "ModelPaths", ".", "pretrained_backbones_dir", "(", ")", ",", "'e2e_mask_rcnn_R_101_FPN_1x.pth'", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.model_paths._get_env_var": [[4, 9], ["os.getenv", "EnvironmentError"], "function", ["None"], ["def", "_get_env_var", "(", "varname", ")", ":", "\n", "    ", "value", "=", "os", ".", "getenv", "(", "varname", ")", "\n", "if", "not", "value", ":", "\n", "        ", "raise", "EnvironmentError", "(", "\"Required environment variable '{}' is not set.\"", ".", "format", "(", "varname", ")", ")", "\n", "", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.vis.create_color_map": [[4, 23], ["numpy.zeros", "range", "range", "numpy.array", "vis.create_color_map.bitget"], "function", ["None"], ["def", "create_color_map", "(", "N", "=", "256", ",", "normalized", "=", "False", ")", ":", "\n", "    ", "def", "bitget", "(", "byteval", ",", "idx", ")", ":", "\n", "        ", "return", "(", "byteval", "&", "(", "1", "<<", "idx", ")", ")", "!=", "0", "\n", "\n", "", "dtype", "=", "'float32'", "if", "normalized", "else", "'uint8'", "\n", "cmap", "=", "np", ".", "zeros", "(", "(", "N", ",", "3", ")", ",", "dtype", "=", "dtype", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "r", "=", "g", "=", "b", "=", "0", "\n", "c", "=", "i", "\n", "for", "j", "in", "range", "(", "8", ")", ":", "\n", "            ", "r", "=", "r", "|", "(", "bitget", "(", "c", ",", "0", ")", "<<", "7", "-", "j", ")", "\n", "g", "=", "g", "|", "(", "bitget", "(", "c", ",", "1", ")", "<<", "7", "-", "j", ")", "\n", "b", "=", "b", "|", "(", "bitget", "(", "c", ",", "2", ")", "<<", "7", "-", "j", ")", "\n", "c", "=", "c", ">>", "3", "\n", "\n", "", "cmap", "[", "i", "]", "=", "np", ".", "array", "(", "[", "r", ",", "g", ",", "b", "]", ")", "\n", "\n", "", "cmap", "=", "cmap", "/", "255", "if", "normalized", "else", "cmap", "\n", "return", "cmap", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.vis.overlay_mask_on_image": [[25, 34], ["numpy.stack", "numpy.where", "mask.squeeze"], "function", ["None"], ["", "def", "overlay_mask_on_image", "(", "image", ",", "mask", ",", "mask_opacity", "=", "0.6", ",", "mask_color", "=", "(", "0", ",", "255", ",", "0", ")", ")", ":", "\n", "    ", "if", "mask", ".", "ndim", "==", "3", ":", "\n", "        ", "assert", "mask", ".", "shape", "[", "2", "]", "==", "1", "\n", "_mask", "=", "mask", ".", "squeeze", "(", "axis", "=", "2", ")", "\n", "", "else", ":", "\n", "        ", "_mask", "=", "mask", "\n", "", "mask_bgr", "=", "np", ".", "stack", "(", "(", "_mask", ",", "_mask", ",", "_mask", ")", ",", "axis", "=", "2", ")", "\n", "masked_image", "=", "np", ".", "where", "(", "mask_bgr", ">", "0", ",", "mask_color", ",", "image", ")", "\n", "return", "(", "(", "mask_opacity", "*", "masked_image", ")", "+", "(", "(", "1.", "-", "mask_opacity", ")", "*", "image", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.common.AtrousPyramid3D.__init__": [[39, 63], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "atrous_convs.append", "sum", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Identity", "torch.Identity", "torch.Identity", "zip", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "sum", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "pyramid_channels", ",", "dilation_rates", ",", "out_channels", "=", "None", ",", "include_1x1_conv", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "pyramid_channels", "=", "[", "pyramid_channels", "]", "*", "len", "(", "dilation_rates", ")", "\n", "\n", "atrous_convs", "=", "[", "\n", "nn", ".", "Conv3d", "(", "in_channels", ",", "channels", ",", "3", ",", "padding", "=", "rate", ",", "dilation", "=", "rate", ",", "bias", "=", "False", ")", "\n", "for", "(", "channels", ",", "rate", ")", "in", "zip", "(", "pyramid_channels", ",", "dilation_rates", ")", "\n", "]", "\n", "if", "include_1x1_conv", ":", "\n", "            ", "atrous_convs", ".", "append", "(", "nn", ".", "Conv3d", "(", "in_channels", ",", "pyramid_channels", "[", "0", "]", ",", "1", ",", "bias", "=", "False", ")", ")", "\n", "total_channels", "=", "sum", "(", "pyramid_channels", ")", "+", "pyramid_channels", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "total_channels", "=", "sum", "(", "pyramid_channels", ")", "\n", "\n", "", "self", ".", "atrous_convs", "=", "nn", ".", "ModuleList", "(", "atrous_convs", ")", "\n", "\n", "if", "out_channels", ":", "\n", "            ", "self", ".", "conv_out", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "total_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv_out", "=", "nn", ".", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.common.AtrousPyramid3D.forward": [[64, 67], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "common.AtrousPyramid3D.conv_out", "conv"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "torch", ".", "cat", "(", "[", "conv", "(", "x", ")", "for", "conv", "in", "self", ".", "atrous_convs", "]", ",", "dim", "=", "1", ")", "\n", "return", "self", ".", "conv_out", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.common.UpsampleTrilinear3D.__init__": [[70, 76], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size", "=", "None", ",", "scale_factor", "=", "None", ",", "align_corners", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "self", ".", "align_corners", "=", "align_corners", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.common.UpsampleTrilinear3D.forward": [[77, 79], ["torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "F", ".", "interpolate", "(", "x", ",", "self", ".", "size", ",", "self", ".", "scale_factor", ",", "mode", "=", "'trilinear'", ",", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.common.get_pooling_layer_creator": [[8, 25], ["PoolType", "torch.Identity", "range", "NotImplementedError", "range", "range", "range"], "function", ["None"], ["def", "get_pooling_layer_creator", "(", "PoolType", ")", ":", "\n", "    ", "def", "pooling_module_creator", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "PoolType", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "def", "identity_module_creator", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "nn", ".", "Identity", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "if", "cfg", ".", "INPUT", ".", "NUM_FRAMES", "==", "2", ":", "\n", "        ", "return", "[", "identity_module_creator", "for", "_", "in", "range", "(", "3", ")", "]", "\n", "", "elif", "cfg", ".", "INPUT", ".", "NUM_FRAMES", "==", "4", ":", "\n", "        ", "return", "[", "pooling_module_creator", "]", "+", "[", "identity_module_creator", "for", "_", "in", "range", "(", "2", ")", "]", "\n", "", "elif", "cfg", ".", "INPUT", ".", "NUM_FRAMES", "==", "8", ":", "\n", "        ", "return", "[", "pooling_module_creator", "for", "_", "in", "range", "(", "2", ")", "]", "+", "[", "identity_module_creator", "]", "\n", "", "elif", "cfg", ".", "INPUT", ".", "NUM_FRAMES", "in", "(", "16", ",", "24", ",", "32", ")", ":", "\n", "        ", "return", "[", "pooling_module_creator", "for", "_", "in", "range", "(", "3", ")", "]", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.common.get_temporal_scales": [[27, 36], ["None"], "function", ["None"], ["", "", "def", "get_temporal_scales", "(", ")", ":", "\n", "    ", "if", "cfg", ".", "INPUT", ".", "NUM_FRAMES", "==", "2", ":", "\n", "        ", "return", "[", "1", ",", "1", ",", "1", "]", "\n", "", "elif", "cfg", ".", "INPUT", ".", "NUM_FRAMES", "==", "4", ":", "\n", "        ", "return", "[", "1", ",", "1", ",", "2", "]", "\n", "", "elif", "cfg", ".", "INPUT", ".", "NUM_FRAMES", "==", "8", ":", "\n", "        ", "return", "[", "1", ",", "2", ",", "2", "]", "\n", "", "elif", "cfg", ".", "INPUT", ".", "NUM_FRAMES", "in", "(", "16", ",", "24", ",", "32", ")", ":", "\n", "        ", "return", "[", "2", ",", "2", ",", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.embedding_decoder.SqueezingExpandDecoder.__init__": [[13, 100], ["torch.Module.__init__", "stemseg.modeling.common.get_pooling_layer_creator", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "stemseg.modeling.common.get_temporal_scales", "torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "stemseg.modeling.embedding_utils.get_nb_free_dims", "stemseg.modeling.embedding_utils.get_nb_embedding_dims", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "embedding_decoder.SqueezingExpandDecoder.register_buffer", "ConvType", "NormType", "torch.ReLU", "torch.ReLU", "ConvType", "NormType", "torch.ReLU", "torch.ReLU", "ConvType", "NormType", "torch.ReLU", "torch.ReLU", "ConvType", "NormType", "torch.ReLU", "torch.ReLU", "ConvType", "NormType", "torch.ReLU", "torch.ReLU", "ConvType", "NormType", "torch.ReLU", "torch.ReLU", "ConvType", "NormType", "torch.ReLU", "torch.ReLU", "stemseg.modeling.common.UpsampleTrilinear3D", "stemseg.modeling.common.UpsampleTrilinear3D", "stemseg.modeling.common.UpsampleTrilinear3D", "torch.Conv3d", "torch.Conv3d", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.__init__", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.common.get_pooling_layer_creator", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.common.get_temporal_scales", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.embedding_utils.get_nb_free_dims", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.embedding_utils.get_nb_embedding_dims", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "inter_channels", ",", "embedding_size", ",", "tanh_activation", ",", "\n", "seediness_output", ",", "experimental_dims", ",", "ConvType", "=", "nn", ".", "Conv3d", ",", "\n", "PoolType", "=", "nn", ".", "AvgPool3d", ",", "NormType", "=", "nn", ".", "Identity", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "PoolingLayerCallbacks", "=", "get_pooling_layer_creator", "(", "PoolType", ")", "\n", "\n", "self", ".", "block_32x", "=", "nn", ".", "Sequential", "(", "\n", "ConvType", "(", "in_channels", ",", "inter_channels", "[", "0", "]", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "NormType", "(", "inter_channels", "[", "0", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "PoolingLayerCallbacks", "[", "0", "]", "(", "3", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "padding", "=", "1", ")", ",", "\n", "\n", "ConvType", "(", "inter_channels", "[", "0", "]", ",", "inter_channels", "[", "0", "]", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "NormType", "(", "inter_channels", "[", "0", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "PoolingLayerCallbacks", "[", "1", "]", "(", "3", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "padding", "=", "1", ")", ",", "\n", "\n", "ConvType", "(", "inter_channels", "[", "0", "]", ",", "inter_channels", "[", "0", "]", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "NormType", "(", "inter_channels", "[", "0", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "PoolingLayerCallbacks", "[", "2", "]", "(", "3", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "padding", "=", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "block_16x", "=", "nn", ".", "Sequential", "(", "\n", "ConvType", "(", "in_channels", ",", "inter_channels", "[", "1", "]", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "NormType", "(", "inter_channels", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "PoolingLayerCallbacks", "[", "0", "]", "(", "3", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "padding", "=", "1", ")", ",", "\n", "\n", "ConvType", "(", "inter_channels", "[", "1", "]", ",", "inter_channels", "[", "1", "]", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "NormType", "(", "inter_channels", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "PoolingLayerCallbacks", "[", "1", "]", "(", "3", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "padding", "=", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "block_8x", "=", "nn", ".", "Sequential", "(", "\n", "ConvType", "(", "in_channels", ",", "inter_channels", "[", "2", "]", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "NormType", "(", "inter_channels", "[", "2", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "PoolingLayerCallbacks", "[", "0", "]", "(", "3", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "padding", "=", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "block_4x", "=", "nn", ".", "Sequential", "(", "\n", "ConvType", "(", "in_channels", ",", "inter_channels", "[", "3", "]", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "NormType", "(", "inter_channels", "[", "3", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "t_scales", "=", "get_temporal_scales", "(", ")", "\n", "\n", "# 32x -> 16x", "\n", "self", ".", "upsample_32_to_16", "=", "nn", ".", "Sequential", "(", "\n", "UpsampleTrilinear3D", "(", "scale_factor", "=", "(", "t_scales", "[", "0", "]", ",", "2", ",", "2", ")", ",", "align_corners", "=", "False", ")", "\n", ")", "\n", "self", ".", "conv_16", "=", "nn", ".", "Conv3d", "(", "inter_channels", "[", "0", "]", "+", "inter_channels", "[", "1", "]", ",", "inter_channels", "[", "1", "]", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "# 16x to 8x", "\n", "self", ".", "upsample_16_to_8", "=", "nn", ".", "Sequential", "(", "\n", "UpsampleTrilinear3D", "(", "scale_factor", "=", "(", "t_scales", "[", "1", "]", ",", "2", ",", "2", ")", ",", "align_corners", "=", "False", ")", "\n", ")", "\n", "self", ".", "conv_8", "=", "nn", ".", "Conv3d", "(", "inter_channels", "[", "1", "]", "+", "inter_channels", "[", "2", "]", ",", "inter_channels", "[", "2", "]", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "# 8x to 4x", "\n", "self", ".", "upsample_8_to_4", "=", "nn", ".", "Sequential", "(", "\n", "UpsampleTrilinear3D", "(", "scale_factor", "=", "(", "t_scales", "[", "2", "]", ",", "2", ",", "2", ")", ",", "align_corners", "=", "False", ")", "\n", ")", "\n", "self", ".", "conv_4", "=", "nn", ".", "Conv3d", "(", "inter_channels", "[", "2", "]", "+", "inter_channels", "[", "3", "]", ",", "inter_channels", "[", "3", "]", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "embedding_size", "=", "embedding_size", "\n", "\n", "n_free_dims", "=", "get_nb_free_dims", "(", "experimental_dims", ")", "\n", "self", ".", "variance_channels", "=", "self", ".", "embedding_size", "-", "n_free_dims", "\n", "\n", "self", ".", "embedding_dim_mode", "=", "experimental_dims", "\n", "embedding_output_size", "=", "get_nb_embedding_dims", "(", "self", ".", "embedding_dim_mode", ")", "\n", "\n", "self", ".", "conv_embedding", "=", "nn", ".", "Conv3d", "(", "inter_channels", "[", "-", "1", "]", ",", "embedding_output_size", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv_variance", "=", "nn", ".", "Conv3d", "(", "inter_channels", "[", "-", "1", "]", ",", "self", ".", "variance_channels", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "conv_seediness", ",", "self", ".", "seediness_channels", "=", "None", ",", "0", "\n", "if", "seediness_output", ":", "\n", "            ", "self", ".", "conv_seediness", "=", "nn", ".", "Conv3d", "(", "inter_channels", "[", "-", "1", "]", ",", "1", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "seediness_channels", "=", "1", "\n", "\n", "", "self", ".", "tanh_activation", "=", "tanh_activation", "\n", "self", ".", "register_buffer", "(", "\"time_scale\"", ",", "torch", ".", "tensor", "(", "1.0", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.embedding_decoder.SqueezingExpandDecoder.forward": [[101, 146], ["embedding_decoder.SqueezingExpandDecoder.block_32x", "embedding_decoder.SqueezingExpandDecoder.upsample_32_to_16", "embedding_decoder.SqueezingExpandDecoder.block_16x", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "embedding_decoder.SqueezingExpandDecoder.conv_16", "embedding_decoder.SqueezingExpandDecoder.upsample_16_to_8", "embedding_decoder.SqueezingExpandDecoder.block_8x", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "embedding_decoder.SqueezingExpandDecoder.conv_8", "embedding_decoder.SqueezingExpandDecoder.upsample_8_to_4", "embedding_decoder.SqueezingExpandDecoder.block_4x", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "embedding_decoder.SqueezingExpandDecoder.conv_4", "embedding_decoder.SqueezingExpandDecoder.conv_embedding", "stemseg.modeling.embedding_utils.add_spatiotemporal_offset", "embedding_decoder.SqueezingExpandDecoder.conv_variance", "len", "len", "embedding_decoder.SqueezingExpandDecoder.conv_seediness().sigmoid", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "embedding_decoder.SqueezingExpandDecoder.conv_seediness"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.embedding_utils.add_spatiotemporal_offset"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        :param x: list of multiscale feature map tensors of shape [N, C, T, H, W]. For this implementation, there\n        should be 4 features maps in increasing order of spatial dimensions\n        :return: embedding map of shape [N, E, T, H, W]\n        \"\"\"", "\n", "assert", "len", "(", "x", ")", "==", "4", ",", "\"Expected 4 feature maps, got {}\"", ".", "format", "(", "len", "(", "x", ")", ")", "\n", "\n", "feat_map_32x", ",", "feat_map_16x", ",", "feat_map_8x", ",", "feat_map_4x", "=", "x", "\n", "\n", "feat_map_32x", "=", "self", ".", "block_32x", "(", "feat_map_32x", ")", "\n", "\n", "# 32x to 16x", "\n", "x", "=", "self", ".", "upsample_32_to_16", "(", "feat_map_32x", ")", "\n", "feat_map_16x", "=", "self", ".", "block_16x", "(", "feat_map_16x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "feat_map_16x", ")", ",", "1", ")", "\n", "x", "=", "self", ".", "conv_16", "(", "x", ")", "\n", "\n", "# 16x to 8x", "\n", "x", "=", "self", ".", "upsample_16_to_8", "(", "x", ")", "\n", "feat_map_8x", "=", "self", ".", "block_8x", "(", "feat_map_8x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "feat_map_8x", ")", ",", "1", ")", "\n", "x", "=", "self", ".", "conv_8", "(", "x", ")", "\n", "\n", "# 8x to 4x", "\n", "x", "=", "self", ".", "upsample_8_to_4", "(", "x", ")", "\n", "feat_map_4x", "=", "self", ".", "block_4x", "(", "feat_map_4x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "feat_map_4x", ")", ",", "1", ")", "\n", "x", "=", "self", ".", "conv_4", "(", "x", ")", "\n", "\n", "embeddings", "=", "self", ".", "conv_embedding", "(", "x", ")", "\n", "if", "self", ".", "tanh_activation", ":", "\n", "            ", "embeddings", "=", "(", "embeddings", "*", "0.25", ")", ".", "tanh", "(", ")", "\n", "\n", "", "embeddings", "=", "add_spatiotemporal_offset", "(", "embeddings", ",", "self", ".", "time_scale", ",", "self", ".", "embedding_dim_mode", ")", "\n", "\n", "variances", "=", "self", ".", "conv_variance", "(", "x", ")", "\n", "\n", "if", "self", ".", "conv_seediness", "is", "not", "None", ":", "\n", "            ", "seediness", "=", "self", ".", "conv_seediness", "(", "x", ")", ".", "sigmoid", "(", ")", "\n", "output", "=", "torch", ".", "cat", "(", "(", "embeddings", ",", "variances", ",", "seediness", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "torch", ".", "cat", "(", "(", "embeddings", ",", "variances", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.embedding_decoder.SqueezingExpandDilatedDecoder.__init__": [[149, 235], ["torch.Module.__init__", "stemseg.modeling.common.get_pooling_layer_creator", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "stemseg.modeling.common.get_temporal_scales", "torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "stemseg.modeling.embedding_utils.get_nb_free_dims", "stemseg.modeling.embedding_utils.get_nb_embedding_dims", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "embedding_decoder.SqueezingExpandDilatedDecoder.register_buffer", "stemseg.modeling.common.AtrousPyramid3D", "NormType", "torch.ReLU", "torch.ReLU", "stemseg.modeling.common.AtrousPyramid3D", "NormType", "torch.ReLU", "torch.ReLU", "stemseg.modeling.common.AtrousPyramid3D", "NormType", "torch.ReLU", "torch.ReLU", "stemseg.modeling.common.AtrousPyramid3D", "NormType", "torch.ReLU", "torch.ReLU", "stemseg.modeling.common.AtrousPyramid3D", "NormType", "torch.ReLU", "torch.ReLU", "ConvType", "NormType", "torch.ReLU", "torch.ReLU", "ConvType", "NormType", "torch.ReLU", "torch.ReLU", "stemseg.modeling.common.UpsampleTrilinear3D", "stemseg.modeling.common.UpsampleTrilinear3D", "stemseg.modeling.common.UpsampleTrilinear3D", "torch.Conv3d", "torch.Conv3d", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.__init__", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.common.get_pooling_layer_creator", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.common.get_temporal_scales", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.embedding_utils.get_nb_free_dims", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.embedding_utils.get_nb_embedding_dims", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "inter_channels", ",", "embedding_size", ",", "tanh_activation", ",", "\n", "seediness_output", ",", "experimental_dims", ",", "ConvType", "=", "nn", ".", "Conv3d", ",", "\n", "PoolType", "=", "nn", ".", "AvgPool3d", ",", "NormType", "=", "nn", ".", "Identity", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "PoolingLayerCallbacks", "=", "get_pooling_layer_creator", "(", "PoolType", ")", "\n", "\n", "self", ".", "block_32x", "=", "nn", ".", "Sequential", "(", "\n", "AtrousPyramid3D", "(", "in_channels", ",", "64", ",", "(", "(", "1", ",", "3", ",", "3", ")", ",", "(", "1", ",", "6", ",", "6", ")", ",", "(", "1", ",", "9", ",", "9", ")", ")", ",", "inter_channels", "[", "0", "]", ")", ",", "\n", "NormType", "(", "inter_channels", "[", "0", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "PoolingLayerCallbacks", "[", "0", "]", "(", "(", "3", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ",", "0", ")", ")", ",", "\n", "\n", "AtrousPyramid3D", "(", "inter_channels", "[", "0", "]", ",", "64", ",", "(", "(", "1", ",", "3", ",", "3", ")", ",", "(", "1", ",", "6", ",", "6", ")", ",", "(", "1", ",", "9", ",", "9", ")", ")", ",", "inter_channels", "[", "0", "]", ")", ",", "\n", "NormType", "(", "inter_channels", "[", "0", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "PoolingLayerCallbacks", "[", "1", "]", "(", "(", "3", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ",", "0", ")", ")", ",", "\n", "\n", "AtrousPyramid3D", "(", "inter_channels", "[", "0", "]", ",", "64", ",", "(", "(", "1", ",", "3", ",", "3", ")", ",", "(", "1", ",", "6", ",", "6", ")", ",", "(", "1", ",", "9", ",", "9", ")", ")", ",", "inter_channels", "[", "0", "]", ")", ",", "\n", "NormType", "(", "inter_channels", "[", "0", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "PoolingLayerCallbacks", "[", "2", "]", "(", "(", "3", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ",", "0", ")", ")", ",", "\n", ")", "\n", "\n", "self", ".", "block_16x", "=", "nn", ".", "Sequential", "(", "\n", "AtrousPyramid3D", "(", "in_channels", ",", "64", ",", "(", "(", "1", ",", "4", ",", "4", ")", ",", "(", "1", ",", "8", ",", "8", ")", ",", "(", "1", ",", "12", ",", "12", ")", ")", ",", "inter_channels", "[", "1", "]", ")", ",", "\n", "NormType", "(", "inter_channels", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "PoolingLayerCallbacks", "[", "0", "]", "(", "(", "3", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ",", "0", ")", ")", ",", "\n", "\n", "AtrousPyramid3D", "(", "in_channels", ",", "64", ",", "(", "(", "1", ",", "4", ",", "4", ")", ",", "(", "1", ",", "8", ",", "8", ")", ",", "(", "1", ",", "12", ",", "12", ")", ")", ",", "inter_channels", "[", "1", "]", ")", ",", "\n", "NormType", "(", "inter_channels", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "PoolingLayerCallbacks", "[", "1", "]", "(", "(", "3", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ",", "0", ")", ")", ",", "\n", ")", "\n", "\n", "self", ".", "block_8x", "=", "nn", ".", "Sequential", "(", "\n", "ConvType", "(", "in_channels", ",", "inter_channels", "[", "2", "]", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "NormType", "(", "inter_channels", "[", "2", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "PoolingLayerCallbacks", "[", "0", "]", "(", "3", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "padding", "=", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "block_4x", "=", "nn", ".", "Sequential", "(", "\n", "ConvType", "(", "in_channels", ",", "inter_channels", "[", "3", "]", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "NormType", "(", "inter_channels", "[", "3", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "t_scales", "=", "get_temporal_scales", "(", ")", "\n", "\n", "# 32x -> 16x", "\n", "self", ".", "upsample_32_to_16", "=", "nn", ".", "Sequential", "(", "\n", "UpsampleTrilinear3D", "(", "scale_factor", "=", "(", "t_scales", "[", "0", "]", ",", "2", ",", "2", ")", ",", "align_corners", "=", "False", ")", "\n", ")", "\n", "self", ".", "conv_16", "=", "nn", ".", "Conv3d", "(", "inter_channels", "[", "0", "]", "+", "inter_channels", "[", "1", "]", ",", "inter_channels", "[", "1", "]", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "# 16x to 8x", "\n", "self", ".", "upsample_16_to_8", "=", "nn", ".", "Sequential", "(", "\n", "UpsampleTrilinear3D", "(", "scale_factor", "=", "(", "t_scales", "[", "1", "]", ",", "2", ",", "2", ")", ",", "align_corners", "=", "False", ")", "\n", ")", "\n", "self", ".", "conv_8", "=", "nn", ".", "Conv3d", "(", "inter_channels", "[", "1", "]", "+", "inter_channels", "[", "2", "]", ",", "inter_channels", "[", "2", "]", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "# 8x to 4x", "\n", "self", ".", "upsample_8_to_4", "=", "nn", ".", "Sequential", "(", "\n", "UpsampleTrilinear3D", "(", "scale_factor", "=", "(", "t_scales", "[", "2", "]", ",", "2", ",", "2", ")", ",", "align_corners", "=", "False", ")", "\n", ")", "\n", "self", ".", "conv_4", "=", "nn", ".", "Conv3d", "(", "inter_channels", "[", "2", "]", "+", "inter_channels", "[", "3", "]", ",", "inter_channels", "[", "3", "]", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "embedding_size", "=", "embedding_size", "\n", "n_free_dims", "=", "get_nb_free_dims", "(", "experimental_dims", ")", "\n", "self", ".", "variance_channels", "=", "self", ".", "embedding_size", "-", "n_free_dims", "\n", "\n", "self", ".", "experimental_dim_mode", "=", "experimental_dims", "\n", "embedding_output_size", "=", "get_nb_embedding_dims", "(", "self", ".", "experimental_dim_mode", ")", "\n", "\n", "self", ".", "conv_embedding", "=", "nn", ".", "Conv3d", "(", "inter_channels", "[", "-", "1", "]", ",", "embedding_output_size", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv_variance", "=", "nn", ".", "Conv3d", "(", "inter_channels", "[", "-", "1", "]", ",", "self", ".", "variance_channels", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "conv_seediness", ",", "self", ".", "seediness_channels", "=", "None", ",", "0", "\n", "if", "seediness_output", ":", "\n", "            ", "self", ".", "conv_seediness", "=", "nn", ".", "Conv3d", "(", "inter_channels", "[", "-", "1", "]", ",", "1", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "seediness_channels", "=", "1", "\n", "\n", "", "self", ".", "tanh_activation", "=", "tanh_activation", "\n", "self", ".", "register_buffer", "(", "\"time_scale\"", ",", "torch", ".", "tensor", "(", "1.0", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.embedding_decoder.SqueezingExpandDilatedDecoder.forward": [[236, 282], ["embedding_decoder.SqueezingExpandDilatedDecoder.block_32x", "embedding_decoder.SqueezingExpandDilatedDecoder.upsample_32_to_16", "embedding_decoder.SqueezingExpandDilatedDecoder.block_16x", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "embedding_decoder.SqueezingExpandDilatedDecoder.conv_16", "embedding_decoder.SqueezingExpandDilatedDecoder.upsample_16_to_8", "embedding_decoder.SqueezingExpandDilatedDecoder.block_8x", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "embedding_decoder.SqueezingExpandDilatedDecoder.conv_8", "embedding_decoder.SqueezingExpandDilatedDecoder.upsample_8_to_4", "embedding_decoder.SqueezingExpandDilatedDecoder.block_4x", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "embedding_decoder.SqueezingExpandDilatedDecoder.conv_4", "embedding_decoder.SqueezingExpandDilatedDecoder.conv_embedding", "stemseg.modeling.embedding_utils.add_spatiotemporal_offset", "embedding_decoder.SqueezingExpandDilatedDecoder.conv_variance", "len", "embedding_decoder.SqueezingExpandDilatedDecoder.conv_seediness().sigmoid", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "embedding_decoder.SqueezingExpandDilatedDecoder.conv_seediness"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.embedding_utils.add_spatiotemporal_offset"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        :param x: list of multiscale feature map tensors of shape [N, C, T, H, W]. For this implementation, there\n        should be 4 features maps in increasing order of spatial dimensions\n        :return: embedding map of shape [N, E, T, H, W]\n        \"\"\"", "\n", "assert", "len", "(", "x", ")", "==", "4", "\n", "\n", "feat_map_32x", ",", "feat_map_16x", ",", "feat_map_8x", ",", "feat_map_4x", "=", "x", "\n", "\n", "feat_map_32x", "=", "self", ".", "block_32x", "(", "feat_map_32x", ")", "\n", "\n", "# 32x to 16x", "\n", "x", "=", "self", ".", "upsample_32_to_16", "(", "feat_map_32x", ")", "\n", "feat_map_16x", "=", "self", ".", "block_16x", "(", "feat_map_16x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "feat_map_16x", ")", ",", "1", ")", "\n", "x", "=", "self", ".", "conv_16", "(", "x", ")", "\n", "\n", "# 16x to 8x", "\n", "x", "=", "self", ".", "upsample_16_to_8", "(", "x", ")", "\n", "feat_map_8x", "=", "self", ".", "block_8x", "(", "feat_map_8x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "feat_map_8x", ")", ",", "1", ")", "\n", "x", "=", "self", ".", "conv_8", "(", "x", ")", "\n", "\n", "# 8x to 4x", "\n", "x", "=", "self", ".", "upsample_8_to_4", "(", "x", ")", "\n", "feat_map_4x", "=", "self", ".", "block_4x", "(", "feat_map_4x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "feat_map_4x", ")", ",", "1", ")", "\n", "x", "=", "self", ".", "conv_4", "(", "x", ")", "\n", "\n", "embeddings", "=", "self", ".", "conv_embedding", "(", "x", ")", "\n", "if", "self", ".", "tanh_activation", ":", "\n", "            ", "embeddings", "=", "(", "embeddings", "*", "0.25", ")", ".", "tanh", "(", ")", "\n", "\n", "# embeddings = embeddings + grid.detach()", "\n", "", "embeddings", "=", "add_spatiotemporal_offset", "(", "embeddings", ",", "self", ".", "time_scale", ",", "self", ".", "experimental_dim_mode", ")", "\n", "\n", "variances", "=", "self", ".", "conv_variance", "(", "x", ")", "\n", "\n", "if", "self", ".", "conv_seediness", "is", "not", "None", ":", "\n", "            ", "seediness", "=", "self", ".", "conv_seediness", "(", "x", ")", ".", "sigmoid", "(", ")", "\n", "output", "=", "torch", ".", "cat", "(", "(", "embeddings", ",", "variances", ",", "seediness", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "torch", ".", "cat", "(", "(", "embeddings", ",", "variances", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.embedding_utils.get_nb_embedding_dims": [[4, 15], ["ValueError"], "function", ["None"], ["def", "get_nb_embedding_dims", "(", "mode", ")", ":", "\n", "    ", "if", "mode", "in", "(", "\"xy\"", ",", "\"ff\"", ")", ":", "\n", "        ", "return", "2", "\n", "", "elif", "mode", "in", "(", "\"xyt\"", ",", "\"xyf\"", ")", ":", "\n", "        ", "return", "3", "\n", "", "elif", "mode", "in", "(", "\"xytf\"", ",", "\"xyff\"", ")", ":", "\n", "        ", "return", "4", "\n", "", "elif", "mode", "in", "(", "\"xytff\"", ",", "\"xyfff\"", ")", ":", "\n", "        ", "return", "5", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Invalid experimental embedding mode: {}\"", ".", "format", "(", "mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.embedding_utils.get_nb_free_dims": [[17, 26], ["None"], "function", ["None"], ["", "", "def", "get_nb_free_dims", "(", "mode", ")", ":", "\n", "    ", "if", "mode", "in", "(", "\"xyf\"", ",", "\"xytf\"", ")", ":", "\n", "        ", "return", "1", "\n", "", "elif", "mode", "in", "(", "\"xyff\"", ",", "\"xytff\"", ")", ":", "\n", "        ", "return", "2", "\n", "", "elif", "mode", "==", "\"xyfff\"", ":", "\n", "        ", "return", "3", "\n", "", "else", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.embedding_utils.creat_spatiotemporal_grid": [[28, 42], ["torch.no_grad", "max", "max", "torch.linspace().to", "torch.linspace().to", "torch.linspace().to", "torch.meshgrid", "float", "float", "torch.linspace", "torch.linspace", "torch.linspace"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "creat_spatiotemporal_grid", "(", "height", ",", "width", ",", "time", ",", "t_scale", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "\"cpu\"", ")", ":", "\n", "# returns [tx, ty, txy, y, x]", "\n", "    ", "x_abs", "=", "max", "(", "1.", ",", "width", "/", "float", "(", "height", ")", ")", "\n", "y_abs", "=", "max", "(", "1.", ",", "height", "/", "float", "(", "width", ")", ")", "\n", "\n", "# torch.linspace does not work with float16, so create the tensors using float32 and then cast to appropriate dtype", "\n", "x", "=", "torch", ".", "linspace", "(", "-", "x_abs", ",", "x_abs", ",", "width", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", ".", "to", "(", "dtype", "=", "dtype", ")", "\n", "y", "=", "torch", ".", "linspace", "(", "-", "y_abs", ",", "y_abs", ",", "height", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", ".", "to", "(", "dtype", "=", "dtype", ")", "\n", "t", "=", "torch", ".", "linspace", "(", "-", "t_scale", ",", "t_scale", ",", "time", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", ".", "to", "(", "dtype", "=", "dtype", ")", "\n", "\n", "t", ",", "y", ",", "x", "=", "torch", ".", "meshgrid", "(", "t", ",", "y", ",", "x", ")", "\n", "\n", "return", "t", ",", "y", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.embedding_utils.add_spatiotemporal_offset": [[44, 121], ["embedding_utils.creat_spatiotemporal_grid", "torch.no_grad", "x.unsqueeze", "grid.unsqueeze().expand.detach", "torch.no_grad", "torch.zeros_like", "torch.stack", "grid.unsqueeze().expand.unsqueeze().expand", "grid.unsqueeze().expand.detach", "grid.unsqueeze().expand.unsqueeze", "torch.no_grad", "torch.zeros_like", "torch.stack", "grid.unsqueeze().expand.unsqueeze().expand", "grid.unsqueeze().expand.detach", "torch.no_grad", "torch.zeros_like", "torch.stack", "grid.unsqueeze().expand.unsqueeze().expand", "grid.unsqueeze().expand.detach", "grid.unsqueeze().expand.unsqueeze", "torch.no_grad", "torch.zeros_like", "torch.stack", "grid.unsqueeze().expand.unsqueeze().expand", "grid.unsqueeze().expand.detach", "grid.unsqueeze().expand.unsqueeze", "torch.no_grad", "torch.zeros_like", "torch.stack", "grid.unsqueeze().expand.unsqueeze().expand", "grid.unsqueeze().expand.detach", "grid.unsqueeze().expand.unsqueeze", "torch.no_grad", "torch.zeros_like", "torch.stack", "grid.unsqueeze().expand.unsqueeze().expand", "grid.unsqueeze().expand.detach", "grid.unsqueeze().expand.unsqueeze", "torch.no_grad", "torch.stack", "grid.unsqueeze().expand.unsqueeze().expand", "grid.unsqueeze().expand.detach", "ValueError", "grid.unsqueeze().expand.unsqueeze", "torch.no_grad", "torch.stack", "grid.unsqueeze().expand.unsqueeze().expand", "grid.unsqueeze().expand.detach", "grid.unsqueeze().expand.unsqueeze", "grid.unsqueeze().expand.unsqueeze"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.embedding_utils.creat_spatiotemporal_grid"], ["", "def", "add_spatiotemporal_offset", "(", "embeddings", ",", "time_scale", ",", "mode", ")", ":", "\n", "    ", "N", ",", "C", ",", "T", ",", "H", ",", "W", "=", "embeddings", ".", "shape", "\n", "t", ",", "y", ",", "x", "=", "creat_spatiotemporal_grid", "(", "H", ",", "W", ",", "T", ",", "time_scale", ",", "embeddings", ".", "dtype", ",", "embeddings", ".", "device", ")", "\n", "\n", "if", "mode", "==", "\"x\"", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "grid", "=", "x", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "return", "embeddings", "+", "grid", ".", "detach", "(", ")", "\n", "\n", "", "elif", "mode", "==", "\"xyf\"", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "zeros", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "grid", "=", "torch", ".", "stack", "(", "(", "y", ",", "x", ",", "zeros", ")", ",", "dim", "=", "0", ")", "\n", "grid", "=", "grid", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "N", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "# [N, 3, T, H, W]", "\n", "\n", "", "return", "embeddings", "+", "grid", ".", "detach", "(", ")", "\n", "\n", "", "elif", "mode", "==", "\"ff\"", ":", "\n", "        ", "return", "embeddings", "\n", "\n", "", "elif", "mode", "==", "\"xytf\"", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "zeros", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "grid", "=", "torch", ".", "stack", "(", "(", "t", ",", "y", ",", "x", ",", "zeros", ")", ",", "dim", "=", "0", ")", "\n", "grid", "=", "grid", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "N", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "# [N, 4, T, H, W]", "\n", "\n", "", "return", "embeddings", "+", "grid", ".", "detach", "(", ")", "\n", "\n", "", "elif", "mode", "==", "\"xytff\"", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "zeros", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "grid", "=", "torch", ".", "stack", "(", "(", "t", ",", "y", ",", "x", ",", "zeros", ",", "zeros", ")", ",", "dim", "=", "0", ")", "\n", "grid", "=", "grid", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "N", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "# [N, 5, T, H, W]", "\n", "\n", "", "return", "embeddings", "+", "grid", ".", "detach", "(", ")", "\n", "\n", "", "elif", "mode", "==", "\"xyff\"", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "zeros", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "grid", "=", "torch", ".", "stack", "(", "(", "y", ",", "x", ",", "zeros", ",", "zeros", ")", ",", "dim", "=", "0", ")", "\n", "grid", "=", "grid", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "N", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "# [N, 4, T, H, W]", "\n", "\n", "", "return", "embeddings", "+", "grid", ".", "detach", "(", ")", "\n", "\n", "", "elif", "mode", "==", "\"xyfff\"", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "zeros", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "grid", "=", "torch", ".", "stack", "(", "(", "y", ",", "x", ",", "zeros", ",", "zeros", ",", "zeros", ")", ",", "dim", "=", "0", ")", "\n", "grid", "=", "grid", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "N", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "# [N, 5, T, H, W]", "\n", "\n", "", "return", "embeddings", "+", "grid", ".", "detach", "(", ")", "\n", "\n", "", "elif", "mode", "==", "\"xyffff\"", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "zeros", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "grid", "=", "torch", ".", "stack", "(", "(", "y", ",", "x", ",", "zeros", ",", "zeros", ",", "zeros", ",", "zeros", ")", ",", "dim", "=", "0", ")", "\n", "grid", "=", "grid", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "N", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "# [N, 6, T, H, W]", "\n", "\n", "", "return", "embeddings", "+", "grid", ".", "detach", "(", ")", "\n", "\n", "", "elif", "mode", "==", "\"xy\"", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "grid", "=", "torch", ".", "stack", "(", "(", "y", ",", "x", ")", ",", "dim", "=", "0", ")", "\n", "grid", "=", "grid", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "N", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "# [N, 2, T, H, W]", "\n", "\n", "", "return", "embeddings", "+", "grid", ".", "detach", "(", ")", "\n", "\n", "", "elif", "mode", "==", "\"xyt\"", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "grid", "=", "torch", ".", "stack", "(", "(", "t", ",", "y", ",", "x", ")", ",", "dim", "=", "0", ")", "\n", "grid", "=", "grid", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "N", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "# [N, 3, T, H, W]", "\n", "\n", "", "return", "embeddings", "+", "grid", ".", "detach", "(", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Invalid experimental embedding mode: {}\"", ".", "format", "(", "mode", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.inference_model.InferenceModel.__init__": [[17, 42], ["torch.Module.__init__", "collections.namedtuple", "inference_model.InferenceModel.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "stemseg.modeling.model_builder.build_model", "ValueError", "inference_model.InferenceModel._model.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.__init__", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.model_builder.build_model", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.training_logger.TrainingLogger.load_state_dict"], ["    ", "def", "__init__", "(", "self", ",", "restore_path", "=", "None", ",", "cpu_workers", "=", "4", ",", "preload_images", "=", "False", ",", "semseg_output_type", "=", "\"probs\"", ",", "\n", "resize_scale", "=", "1.0", ",", "semseg_generation_on_gpu", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "_model", "=", "build_model", "(", "restore_pretrained_backbone_wts", "=", "False", ")", "\n", "\n", "", "if", "self", ".", "_model", ".", "backbone", ".", "is_3d", ":", "\n", "            ", "raise", "ValueError", "(", "\"Only implemend for 2D backbones\"", ")", "\n", "\n", "", "if", "restore_path", ":", "\n", "            ", "self", ".", "_model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "restore_path", ")", "[", "'model'", "]", ")", "\n", "\n", "", "self", ".", "cpu_workers", "=", "cpu_workers", "\n", "\n", "self", ".", "EmbeddingMapEntry", "=", "namedtuple", "(", "\n", "\"EmbeddingMapEntry\"", ",", "[", "\"subseq_frames\"", ",", "\"embeddings\"", ",", "\"bandwidths\"", ",", "\"seediness\"", "]", ")", "\n", "\n", "self", ".", "preload_images", "=", "preload_images", "\n", "\n", "self", ".", "semseg_output_type", "=", "semseg_output_type", "\n", "self", ".", "resize_scale", "=", "resize_scale", "\n", "self", ".", "semseg_generation_on_gpu", "=", "semseg_generation_on_gpu", "\n", "\n", "self", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.inference_model.InferenceModel.mask_scale": [[43, 46], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "mask_scale", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_model", ".", "semseg_output_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.inference_model.InferenceModel.has_semseg_head": [[47, 50], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "has_semseg_head", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_model", ".", "semseg_head", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.inference_model.InferenceModel.load_images": [[51, 54], ["stemseg.utils.timer.Timer.exclude_duration", "cv2.imread"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.exclude_duration"], ["", "@", "Timer", ".", "exclude_duration", "(", "\"inference\"", ",", "\"postprocessing\"", ")", "\n", "def", "load_images", "(", "self", ",", "image_paths", ")", ":", "\n", "        ", "return", "[", "cv2", ".", "imread", "(", "path", ",", "cv2", ".", "IMREAD_COLOR", ")", "for", "path", "in", "image_paths", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.inference_model.InferenceModel.resize_output": [[55, 62], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "resize_output", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "resize_scale", "!=", "1.0", ":", "\n", "            ", "return", "F", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "(", "1.0", ",", "self", ".", "resize_scale", ",", "self", ".", "resize_scale", ")", ",", "mode", "=", "'trilinear'", ",", "\n", "align_corners", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.inference_model.InferenceModel.forward": [[63, 194], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "dict", "collections.defaultdict", "enumerate", "tqdm.tqdm.tqdm", "inference_model.InferenceModel.get_semseg_masks", "stemseg.data.InferenceImageLoader", "stemseg.data.InferenceImageLoader", "inference_model.InferenceModel._model.run_backbone", "collections.defaultdict", "inference_model.InferenceModel._model.embedding_head().squeeze", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack.split", "torch.stack.split", "torch.stack.split", "embeddings_maps.append", "set", "collections.defaultdict.items", "inference_model.InferenceModel.load_images", "range", "subseq_deps[].add", "len", "len", "images.cuda", "all", "backbone_features[].items", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "inference_model.InferenceModel._model.semseg_head", "inference_model.InferenceModel.resize_output().permute().cpu", "enumerate", "subseq_bandwidths.exp", "torch.stack.numel", "torch.stack.numel", "torch.stack.numel", "inference_model.InferenceModel._model.seediness_head", "inference_model.InferenceModel.resize_output().squeeze", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "inference_model.InferenceModel.EmbeddingMapEntry", "subseqs.discard", "len", "len", "list", "stacked_features[].append", "inference_model.InferenceModel._model.embedding_head", "enumerate", "sorted", "subseq_embeddings.cpu", "subseq_bandwidths.cpu", "torch.stack.cpu", "torch.stack.cpu", "torch.stack.cpu", "len", "set.add", "dict.items", "current_subseq.values", "inference_model.InferenceModel.resize_output().permute", "sorted", "inference_model.InferenceModel.resize_output", "enumerate", "current_subseq.keys", "current_subseq.keys", "sorted", "inference_model.InferenceModel.resize_output", "current_subseq.keys"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.inference_model.InferenceModel.get_semseg_masks", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.model_builder.TrainingModel.run_backbone", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_video_dataset_parser.GenericVideoSequence.load_images", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.global_registry.GlobalRegistry.add", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.cuda", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.cpu", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.cpu", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.cpu", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.cpu", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.cpu", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.cpu", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.global_registry.GlobalRegistry.add", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.inference_model.InferenceModel.resize_output", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.inference_model.InferenceModel.resize_output"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "forward", "(", "self", ",", "image_paths", ",", "subseq_idxes", ")", ":", "\n", "        ", "\"\"\"\n        Initialize a new sequence of images (arbitrary length)\n        :param image_paths: list of file paths to the images\n        :param subseq_idxes: list of tuples containing frame indices of the sub-sequences\n        \"\"\"", "\n", "\n", "# create an image loader", "\n", "if", "self", ".", "preload_images", ":", "\n", "            ", "image_loader", "=", "InferenceImageLoader", "(", "self", ".", "load_images", "(", "image_paths", ")", ")", "\n", "", "else", ":", "\n", "            ", "image_loader", "=", "InferenceImageLoader", "(", "image_paths", ")", "\n", "\n", "", "image_loader", "=", "DataLoader", "(", "image_loader", ",", "1", ",", "False", ",", "num_workers", "=", "self", ".", "cpu_workers", ",", "collate_fn", "=", "collate_fn", ",", "\n", "drop_last", "=", "False", ")", "\n", "\n", "semseg_logits", "=", "[", "[", "0.", ",", "0", "]", "for", "_", "in", "range", "(", "len", "(", "image_paths", ")", ")", "]", "\n", "embeddings_maps", "=", "[", "]", "\n", "\n", "backbone_features", "=", "dict", "(", ")", "\n", "current_subseq_idx", "=", "0", "\n", "\n", "# to avoid recomputing features for the same frame again and again, we construct a dict to store the subseq", "\n", "# indices which are dependent on each frame.", "\n", "subseq_deps", "=", "defaultdict", "(", "set", ")", "\n", "for", "i", ",", "subseq", "in", "enumerate", "(", "subseq_idxes", ")", ":", "\n", "            ", "for", "t", "in", "subseq", ":", "\n", "                ", "subseq_deps", "[", "t", "]", ".", "add", "(", "i", ")", "\n", "\n", "# sub-sequences are allowed to have duplicate indices. This is useful when, for example, an entire sequence is", "\n", "# smaller than the network's expected temporal input and the first image is repeated. In this case, we", "\n", "# want to avoid running the backbone multiple times for the same image.", "\n", "", "", "current_subseq", "=", "{", "t", ":", "False", "for", "t", "in", "subseq_idxes", "[", "0", "]", "}", "\n", "current_subseq_as_list", "=", "subseq_idxes", "[", "0", "]", "\n", "\n", "for", "images", ",", "idxes", "in", "tqdm", "(", "image_loader", ",", "total", "=", "len", "(", "image_loader", ")", ")", ":", "\n", "            ", "assert", "len", "(", "idxes", ")", "==", "1", "\n", "frame_id", "=", "idxes", "[", "0", "]", "\n", "backbone_features", "[", "frame_id", "]", "=", "self", ".", "_model", ".", "run_backbone", "(", "images", ".", "cuda", "(", ")", ")", "\n", "\n", "if", "frame_id", "in", "current_subseq", ":", "\n", "                ", "current_subseq", "[", "frame_id", "]", "=", "True", "\n", "\n", "", "if", "not", "all", "(", "list", "(", "current_subseq", ".", "values", "(", ")", ")", ")", ":", "\n", "                ", "continue", "\n", "\n", "# required feature maps have been generated. Stack the feature maps and run semseg, embedding and seediness", "\n", "# heads", "\n", "", "stacked_features", "=", "defaultdict", "(", "list", ")", "\n", "for", "t", "in", "current_subseq_as_list", ":", "\n", "                ", "for", "scale", ",", "feature_map", "in", "backbone_features", "[", "t", "]", ".", "items", "(", ")", ":", "\n", "                    ", "stacked_features", "[", "scale", "]", ".", "append", "(", "feature_map", ")", "\n", "\n", "", "", "stacked_features", "=", "{", "\n", "scale", ":", "torch", ".", "stack", "(", "stacked_features", "[", "scale", "]", ",", "2", ")", "for", "scale", "in", "stacked_features", "\n", "}", "# dict(tensor(1, C, T, H, W))", "\n", "\n", "if", "self", ".", "has_semseg_head", ":", "\n", "                ", "semseg_input_features", "=", "[", "stacked_features", "[", "scale", "]", "for", "scale", "in", "self", ".", "_model", ".", "semseg_feature_map_scale", "]", "\n", "subseq_semseg_logits", "=", "self", ".", "_model", ".", "semseg_head", "(", "semseg_input_features", ")", "\n", "subseq_semseg_logits", "=", "self", ".", "resize_output", "(", "subseq_semseg_logits", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ",", "4", ")", ".", "cpu", "(", ")", "\n", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "current_subseq_as_list", ")", ":", "\n", "                    ", "semseg_logits", "[", "t", "]", "[", "0", "]", "+=", "subseq_semseg_logits", "[", "i", "]", "\n", "semseg_logits", "[", "t", "]", "[", "1", "]", "+=", "1", "\n", "\n", "", "", "embedding_input_features", "=", "[", "stacked_features", "[", "scale", "]", "for", "scale", "in", "self", ".", "_model", ".", "embedding_head_feature_map_scale", "]", "\n", "\n", "embedding_head_output", "=", "self", ".", "_model", ".", "embedding_head", "(", "embedding_input_features", ")", ".", "squeeze", "(", "0", ")", "\n", "\n", "# embedding_head_output = self._model.embedding_head(embedding_input_features)", "\n", "# embedding_head_output = self.resize_output(embedding_head_output).squeeze(0)", "\n", "\n", "embedding_head_output_dict", "=", "{", "t", ":", "embedding_head_output", "[", ":", ",", "i", "]", "for", "i", ",", "t", "in", "enumerate", "(", "current_subseq_as_list", ")", "}", "\n", "embedding_head_output", "=", "torch", ".", "stack", "(", "[", "embedding_head_output_dict", "[", "t", "]", "for", "t", "in", "sorted", "(", "current_subseq", ".", "keys", "(", ")", ")", "]", ",", "1", ")", "\n", "\n", "subseq_embeddings", ",", "subseq_bandwidths", ",", "subseq_seediness", "=", "embedding_head_output", ".", "split", "(", "\n", "(", "\n", "self", ".", "_model", ".", "embedding_head", ".", "embedding_size", ",", "\n", "self", ".", "_model", ".", "embedding_head", ".", "variance_channels", ",", "\n", "self", ".", "_model", ".", "embedding_head", ".", "seediness_channels", "\n", ")", ",", "dim", "=", "0", "\n", ")", "\n", "\n", "subseq_bandwidths", "=", "subseq_bandwidths", ".", "exp", "(", ")", "*", "10.", "\n", "\n", "if", "subseq_seediness", ".", "numel", "(", ")", "==", "0", ":", "\n", "                ", "assert", "self", ".", "_model", ".", "seediness_head", "is", "not", "None", "\n", "seediness_input_features", "=", "[", "\n", "stacked_features", "[", "scale", "]", "for", "scale", "in", "self", ".", "_model", ".", "seediness_head_feature_map_scale", "\n", "]", "\n", "subseq_seediness", "=", "self", ".", "_model", ".", "seediness_head", "(", "seediness_input_features", ")", "\n", "subseq_seediness", "=", "self", ".", "resize_output", "(", "subseq_seediness", ")", ".", "squeeze", "(", "0", ")", "\n", "\n", "subseq_seediness_dict", "=", "{", "t", ":", "subseq_seediness", "[", ":", ",", "i", "]", "for", "i", ",", "t", "in", "enumerate", "(", "current_subseq_as_list", ")", "}", "\n", "subseq_seediness", "=", "torch", ".", "stack", "(", "[", "subseq_seediness_dict", "[", "t", "]", "for", "t", "in", "sorted", "(", "current_subseq", ".", "keys", "(", ")", ")", "]", ",", "1", ")", "\n", "\n", "", "embeddings_maps", ".", "append", "(", "self", ".", "EmbeddingMapEntry", "(", "\n", "sorted", "(", "current_subseq", ".", "keys", "(", ")", ")", ",", "subseq_embeddings", ".", "cpu", "(", ")", ",", "subseq_bandwidths", ".", "cpu", "(", ")", ",", "subseq_seediness", ".", "cpu", "(", ")", ")", ")", "\n", "\n", "# clear backbone feature maps which are not needed for the next sub-sequence", "\n", "frames_to_discard", "=", "set", "(", ")", "\n", "for", "frame_id", ",", "subseqs", "in", "subseq_deps", ".", "items", "(", ")", ":", "\n", "                ", "subseqs", ".", "discard", "(", "current_subseq_idx", ")", "\n", "if", "len", "(", "subseqs", ")", "==", "0", ":", "\n", "                    ", "frames_to_discard", ".", "add", "(", "frame_id", ")", "\n", "\n", "", "", "backbone_features", "=", "{", "\n", "t", ":", "feature_map", "for", "t", ",", "feature_map", "in", "backbone_features", ".", "items", "(", ")", "if", "t", "not", "in", "frames_to_discard", "\n", "}", "\n", "\n", "# update current sub-sequence", "\n", "current_subseq_idx", "+=", "1", "\n", "if", "current_subseq_idx", "==", "len", "(", "subseq_idxes", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "current_subseq", "=", "{", "idx", ":", "False", "for", "idx", "in", "subseq_idxes", "[", "current_subseq_idx", "]", "}", "\n", "current_subseq_as_list", "=", "subseq_idxes", "[", "current_subseq_idx", "]", "\n", "\n", "for", "t", "in", "backbone_features", ":", "\n", "                ", "if", "t", "in", "current_subseq", ":", "\n", "                    ", "current_subseq", "[", "t", "]", "=", "True", "\n", "\n", "# compute semseg probabilities", "\n", "", "", "", "fg_masks", ",", "multiclass_masks", "=", "self", ".", "get_semseg_masks", "(", "semseg_logits", ")", "\n", "\n", "return", "{", "\n", "\"fg_masks\"", ":", "fg_masks", ",", "\n", "\"multiclass_masks\"", ":", "multiclass_masks", ",", "\n", "\"embeddings\"", ":", "embeddings_maps", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.inference_model.InferenceModel.get_semseg_masks": [[196, 232], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.split", "torch.cat.split", "torch.cat.split", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.cpu", "torch.cat.cpu", "torch.cat.cpu", "torch.cat.cpu", "torch.cat.cpu", "torch.cat.cpu", "torch.cat.append", "torch.cat.append", "torch.cat.append", "fg_logits.squeeze().sigmoid", "logits.to", "float", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.cat.append", "torch.cat.append", "torch.cat.append", "fg_logits.squeeze", "multiclass_logits.argmax"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.cpu", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.cpu", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.cpu", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.cpu", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.cpu", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.cpu", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_semseg_masks", "(", "self", ",", "semseg_logits", ")", ":", "\n", "        ", "\"\"\"\n        :param semseg_logits: list(tuple(tensor, int))\n        :return: tensor(T, C, H, W) or tensor(T, H, W)\n        \"\"\"", "\n", "fg_masks", ",", "multiclass_masks", "=", "[", "]", ",", "[", "]", "\n", "if", "self", ".", "_model", ".", "semseg_head", "is", "None", ":", "\n", "            ", "return", "fg_masks", ",", "multiclass_masks", "\n", "\n", "", "device", "=", "\"cuda:0\"", "if", "self", ".", "semseg_generation_on_gpu", "else", "\"cpu\"", "\n", "semseg_logits", "=", "torch", ".", "cat", "(", "[", "(", "logits", ".", "to", "(", "device", "=", "device", ")", "/", "float", "(", "num_entries", ")", ")", "for", "logits", ",", "num_entries", "in", "semseg_logits", "]", ",", "0", ")", "\n", "\n", "if", "semseg_logits", ".", "shape", "[", "1", "]", ">", "2", ":", "\n", "# multi-class segmentation: first N-1 channels correspond to logits for N-1 classes and the Nth channels is", "\n", "# a fg/bg mask", "\n", "            ", "multiclass_logits", ",", "fg_logits", "=", "semseg_logits", ".", "split", "(", "(", "semseg_logits", ".", "shape", "[", "1", "]", "-", "1", ",", "1", ")", ",", "dim", "=", "1", ")", "\n", "\n", "if", "self", ".", "semseg_output_type", "==", "\"logits\"", ":", "\n", "                ", "multiclass_masks", ".", "append", "(", "multiclass_logits", ")", "\n", "", "elif", "self", ".", "semseg_output_type", "==", "\"probs\"", ":", "\n", "                ", "multiclass_masks", ".", "append", "(", "F", ".", "softmax", "(", "multiclass_logits", ",", "dim", "=", "1", ")", ")", "\n", "", "elif", "self", ".", "semseg_output_type", "==", "\"argmax\"", ":", "\n", "                ", "multiclass_masks", ".", "append", "(", "multiclass_logits", ".", "argmax", "(", "dim", "=", "1", ")", ")", "\n", "\n", "", "fg_masks", ".", "append", "(", "fg_logits", ".", "squeeze", "(", "1", ")", ".", "sigmoid", "(", ")", ")", "\n", "\n", "", "else", ":", "\n", "# only fg/bg segmentation: the 2 channels correspond to bg and fg logits, respectively", "\n", "            ", "fg_masks", ".", "append", "(", "F", ".", "softmax", "(", "semseg_logits", ",", "dim", "=", "1", ")", "[", ":", ",", "1", "]", ")", "\n", "\n", "", "fg_masks", "=", "torch", ".", "cat", "(", "fg_masks", ")", "\n", "if", "multiclass_masks", ":", "\n", "            ", "multiclass_masks", "=", "torch", ".", "cat", "(", "multiclass_masks", ")", "\n", "\n", "", "return", "fg_masks", ".", "cpu", "(", ")", ",", "multiclass_masks", ".", "cpu", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.model_builder.TrainingModel.__init__": [[38, 74], ["torch.Module.__init__", "min", "min", "model_builder.TrainingModel.embedding_head_feature_map_scale.copy", "int", "int", "math.log2", "math.log2", "min", "max", "range"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.__init__", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.copy"], ["    ", "def", "__init__", "(", "self", ",", "backbone", ",", "embedding_head", ",", "embedding_head_feature_map_scale", ",", "embedding_loss_criterion", ",", "semseg_head", ",", "\n", "semseg_feature_map_scale", ",", "semseg_loss_criterion", ",", "seediness_head", ",", "\n", "seediness_head_feature_map_scale", ",", "multiclass_semseg_output", ",", "output_resize_scale", ",", "logger", ")", ":", "\n", "        ", "super", "(", "self", ".", "__class__", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "backbone", "=", "backbone", "\n", "\n", "# tracker related", "\n", "self", ".", "embedding_head", "=", "embedding_head", "\n", "self", ".", "embedding_head_feature_map_scale", "=", "embedding_head_feature_map_scale", "\n", "self", ".", "embedding_head_output_scale", "=", "min", "(", "self", ".", "embedding_head_feature_map_scale", ")", "\n", "\n", "self", ".", "embedding_loss_criterion", "=", "embedding_loss_criterion", "\n", "\n", "# semantic segmentation related", "\n", "self", ".", "semseg_head", "=", "semseg_head", "\n", "self", ".", "semseg_feature_map_scale", "=", "semseg_feature_map_scale", "\n", "self", ".", "semseg_output_scale", "=", "min", "(", "self", ".", "semseg_feature_map_scale", ")", "\n", "self", ".", "semseg_loss_criterion", "=", "semseg_loss_criterion", "\n", "\n", "# seediness head", "\n", "self", ".", "seediness_head", "=", "seediness_head", "\n", "self", ".", "seediness_head_feature_map_scale", "=", "seediness_head_feature_map_scale", "\n", "\n", "# feature map scale boiler plate", "\n", "all_feature_map_scales", "=", "self", ".", "embedding_head_feature_map_scale", ".", "copy", "(", ")", "\n", "if", "self", ".", "semseg_head", "is", "not", "None", ":", "\n", "            ", "all_feature_map_scales", "+=", "self", ".", "semseg_feature_map_scale", "\n", "\n", "", "min_scale_p", "=", "int", "(", "math", ".", "log2", "(", "min", "(", "all_feature_map_scales", ")", ")", ")", "\n", "max_scale_p", "=", "int", "(", "math", ".", "log2", "(", "max", "(", "all_feature_map_scales", ")", ")", ")", "\n", "self", ".", "feature_map_scales", "=", "[", "2", "**", "p", "for", "p", "in", "range", "(", "min_scale_p", ",", "max_scale_p", "+", "1", ")", "]", "\n", "\n", "self", ".", "multiclass_semseg_output", "=", "multiclass_semseg_output", "\n", "self", ".", "output_resize_scale", "=", "output_resize_scale", "\n", "self", ".", "logger", "=", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.model_builder.TrainingModel.train": [[75, 83], ["model_builder.TrainingModel.named_children", "module.train"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.model_builder.TrainingModel.train"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "self", ".", "training", "=", "mode", "\n", "for", "module_name", ",", "module", "in", "self", ".", "named_children", "(", ")", ":", "\n", "            ", "if", "module_name", "==", "\"backbone\"", "and", "cfg", ".", "TRAINING", ".", "FREEZE_BACKBONE", ":", "\n", "                ", "continue", "\n", "\n", "", "module", ".", "train", "(", "mode", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.model_builder.TrainingModel.restore_temporal_dimension": [[84, 100], ["x.permute.permute.view", "x.permute.permute.permute"], "methods", ["None"], ["", "def", "restore_temporal_dimension", "(", "self", ",", "x", ",", "num_seqs", ",", "num_frames", ",", "format", ")", ":", "\n", "        ", "\"\"\"\n        Restores the temporal dimension given a flattened image/feature tensor\n        :param x: tensor of shape [N*T, C, H, W]\n        :param num_seqs: Number of image sequences (batch size)\n        :param num_frames: Number of frames per image sequence\n        :param format: Either 'NCTHW' or 'NTCHW'\n        :return: tensor of shape defined by 'format' option\n        \"\"\"", "\n", "channels", ",", "height", ",", "width", "=", "x", ".", "shape", "[", "-", "3", ":", "]", "\n", "x", "=", "x", ".", "view", "(", "num_seqs", ",", "num_frames", ",", "channels", ",", "height", ",", "width", ")", "\n", "\n", "assert", "format", "in", "[", "\"NCTHW\"", ",", "\"NTCHW\"", "]", "\n", "if", "format", "==", "\"NCTHW\"", ":", "\n", "            ", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.model_builder.TrainingModel.forward": [[101, 127], ["model_builder.TrainingModel.resize_masks", "model_builder.TrainingModel.run_backbone", "model_builder.TrainingModel.forward_embeddings_and_semseg", "model_builder.TrainingModel.embedding_loss_criterion", "model_builder.TrainingModel.semseg_loss_criterion", "semseg_logits.split", "model_builder.TrainingModel.compute_fg_loss", "fg_logits.squeeze"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.model_builder.TrainingModel.resize_masks", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.model_builder.TrainingModel.run_backbone", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.model_builder.TrainingModel.forward_embeddings_and_semseg", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.model_builder.TrainingModel.compute_fg_loss"], ["", "def", "forward", "(", "self", ",", "image_seqs", ",", "targets", ")", ":", "\n", "        ", "targets", "=", "self", ".", "resize_masks", "(", "targets", ")", "\n", "\n", "num_seqs", "=", "image_seqs", ".", "num_seqs", "\n", "num_frames", "=", "image_seqs", ".", "num_frames", "\n", "features", "=", "self", ".", "run_backbone", "(", "image_seqs", ")", "\n", "\n", "embeddings_map", ",", "semseg_logits", "=", "self", ".", "forward_embeddings_and_semseg", "(", "features", ",", "num_seqs", ",", "num_frames", ")", "\n", "\n", "output", "=", "{", "\n", "ModelOutput", ".", "INFERENCE", ":", "{", "\n", "ModelOutput", ".", "EMBEDDINGS", ":", "embeddings_map", ",", "\n", "ModelOutput", ".", "SEMSEG_MASKS", ":", "semseg_logits", ",", "\n", "}", ",", "\n", "}", "\n", "\n", "self", ".", "embedding_loss_criterion", "(", "embeddings_map", ",", "targets", ",", "output", ")", "\n", "\n", "if", "self", ".", "semseg_head", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "semseg_head", ".", "has_foreground_channel", ":", "\n", "                ", "semseg_logits", ",", "fg_logits", "=", "semseg_logits", ".", "split", "(", "(", "semseg_logits", ".", "shape", "[", "2", "]", "-", "1", ",", "1", ")", ",", "dim", "=", "2", ")", "\n", "self", ".", "compute_fg_loss", "(", "fg_logits", ".", "squeeze", "(", "2", ")", ",", "targets", ",", "output", ")", "\n", "\n", "", "self", ".", "semseg_loss_criterion", "(", "semseg_logits", ",", "targets", ",", "output", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.model_builder.TrainingModel.resize_masks": [[128, 153], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.interpolate", "torch.interpolate", "torch.interpolate", "target[].byte().detach", "torch.interpolate", "torch.interpolate", "torch.interpolate", "target[].squeeze().byte().detach", "stemseg.data.common.instance_masks_to_semseg_mask", "target[].float", "target[].unsqueeze().float", "target[].byte", "target[].squeeze().byte", "target[].unsqueeze", "target[].squeeze"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.common.instance_masks_to_semseg_mask"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "resize_masks", "(", "self", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Downscales masks to the required size\n        :param targets:\n        :return: dict\n        \"\"\"", "\n", "assert", "self", ".", "embedding_head_output_scale", "==", "self", ".", "semseg_output_scale", "\n", "\n", "for", "target", "in", "targets", ":", "\n", "            ", "if", "self", ".", "output_resize_scale", "==", "1.0", ":", "\n", "                ", "target", "[", "'masks'", "]", "=", "F", ".", "interpolate", "(", "target", "[", "'masks'", "]", ".", "float", "(", ")", ",", "\n", "scale_factor", "=", "1.", "/", "self", ".", "embedding_head_output_scale", ",", "\n", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "target", "[", "'masks'", "]", "=", "target", "[", "'masks'", "]", ".", "byte", "(", ")", ".", "detach", "(", ")", "\n", "\n", "target", "[", "'ignore_masks'", "]", "=", "F", ".", "interpolate", "(", "target", "[", "'ignore_masks'", "]", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", ",", "\n", "scale_factor", "=", "1.", "/", "self", ".", "semseg_output_scale", ",", "\n", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "target", "[", "'ignore_masks'", "]", "=", "target", "[", "'ignore_masks'", "]", ".", "squeeze", "(", "0", ")", ".", "byte", "(", ")", ".", "detach", "(", ")", "\n", "\n", "", "if", "self", ".", "semseg_head", "is", "not", "None", ":", "\n", "                ", "target", "[", "'semseg_masks'", "]", "=", "instance_masks_to_semseg_mask", "(", "target", "[", "'masks'", "]", ",", "target", "[", "'category_ids'", "]", ")", "\n", "\n", "", "", "return", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.model_builder.TrainingModel.run_backbone": [[154, 170], ["image_seqs.tensors.view", "collections.OrderedDict", "model_builder.TrainingModel.backbone", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model_builder.TrainingModel.backbone", "zip"], "methods", ["None"], ["", "def", "run_backbone", "(", "self", ",", "image_seqs", ")", ":", "\n", "        ", "\"\"\"\n        Computes backbone features for a set of image sequences.\n        :param image_seqs: Instance of ImageList\n        :return: A dictionary of feature maps with keys denoting the scale.\n        \"\"\"", "\n", "height", ",", "width", "=", "image_seqs", ".", "tensors", ".", "shape", "[", "-", "2", ":", "]", "\n", "images_tensor", "=", "image_seqs", ".", "tensors", ".", "view", "(", "image_seqs", ".", "num_seqs", "*", "image_seqs", ".", "num_frames", ",", "3", ",", "height", ",", "width", ")", "\n", "\n", "if", "cfg", ".", "TRAINING", ".", "FREEZE_BACKBONE", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "features", "=", "self", ".", "backbone", "(", "images_tensor", ")", "\n", "", "", "else", ":", "\n", "            ", "features", "=", "self", ".", "backbone", "(", "images_tensor", ")", "\n", "\n", "", "return", "OrderedDict", "(", "[", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "zip", "(", "self", ".", "feature_map_scales", ",", "features", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.model_builder.TrainingModel.forward_embeddings_and_semseg": [[171, 209], ["model_builder.TrainingModel.embedding_head", "model_builder.TrainingModel.semseg_head", "torch.interpolate.permute", "model_builder.TrainingModel.restore_temporal_dimension", "model_builder.TrainingModel.seediness_head", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "model_builder.TrainingModel.restore_temporal_dimension", "model_builder.TrainingModel.restore_temporal_dimension", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.model_builder.TrainingModel.restore_temporal_dimension", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.model_builder.TrainingModel.restore_temporal_dimension", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.model_builder.TrainingModel.restore_temporal_dimension"], ["", "def", "forward_embeddings_and_semseg", "(", "self", ",", "features", ",", "num_seqs", ",", "num_frames", ")", ":", "\n", "        ", "if", "self", ".", "semseg_head", "is", "None", ":", "\n", "            ", "semseg_logits", "=", "None", "\n", "", "else", ":", "\n", "            ", "semseg_input_features", "=", "[", "\n", "self", ".", "restore_temporal_dimension", "(", "features", "[", "scale", "]", ",", "num_seqs", ",", "num_frames", ",", "\"NCTHW\"", ")", "\n", "for", "scale", "in", "self", ".", "semseg_feature_map_scale", "\n", "]", "\n", "semseg_logits", "=", "self", ".", "semseg_head", "(", "semseg_input_features", ")", "# [N, C, T, H, W]", "\n", "semseg_logits", "=", "semseg_logits", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", "# [N, T, C, H, W]", "\n", "\n", "", "embedding_head_input_features", "=", "[", "\n", "self", ".", "restore_temporal_dimension", "(", "features", "[", "scale", "]", ",", "num_seqs", ",", "num_frames", ",", "\"NCTHW\"", ")", "\n", "for", "scale", "in", "self", ".", "embedding_head_feature_map_scale", "\n", "]", "\n", "embeddings_map", "=", "self", ".", "embedding_head", "(", "embedding_head_input_features", ")", "\n", "\n", "if", "self", ".", "seediness_head", "is", "not", "None", ":", "\n", "            ", "seediness_input_features", "=", "[", "\n", "self", ".", "restore_temporal_dimension", "(", "features", "[", "scale", "]", ",", "num_seqs", ",", "num_frames", ",", "\"NCTHW\"", ")", "\n", "for", "scale", "in", "self", ".", "seediness_head_feature_map_scale", "\n", "]", "\n", "seediness_map", "=", "self", ".", "seediness_head", "(", "seediness_input_features", ")", "\n", "\n", "embeddings_map", "=", "torch", ".", "cat", "(", "(", "embeddings_map", ",", "seediness_map", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "if", "self", ".", "output_resize_scale", "!=", "1.0", ":", "\n", "            ", "embeddings_map", "=", "F", ".", "interpolate", "(", "\n", "embeddings_map", ",", "scale_factor", "=", "(", "1.0", ",", "self", ".", "output_resize_scale", ",", "self", ".", "output_resize_scale", ")", ",", "\n", "mode", "=", "'trilinear'", ",", "align_corners", "=", "False", "\n", ")", "\n", "if", "torch", ".", "is_tensor", "(", "semseg_logits", ")", ":", "\n", "                ", "semseg_logits", "=", "F", ".", "interpolate", "(", "\n", "semseg_logits", ",", "scale_factor", "=", "(", "1.0", ",", "self", ".", "output_resize_scale", ",", "self", ".", "output_resize_scale", ")", ",", "\n", "mode", "=", "'trilinear'", ",", "align_corners", "=", "False", "\n", ")", "\n", "\n", "", "", "return", "embeddings_map", ",", "semseg_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.model_builder.TrainingModel.compute_fg_loss": [[210, 245], ["zip", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.binary_cross_entropy_with_logits.sum", "nonignore_masks_per_seq.sum().detach", "ignore_masks_per_seq.float", "nonignore_masks_per_seq.sum"], "methods", ["None"], ["", "def", "compute_fg_loss", "(", "self", ",", "fg_logits", ",", "targets", ",", "output_dict", ")", ":", "\n", "        ", "\"\"\"\n        Computes the foreground/background loss\n        :param fg_logits: tensor(N, T, H, W)\n        :param targets: dict\n        :param output_dict: dict\n        :return: loss\n        \"\"\"", "\n", "loss", "=", "0.", "\n", "\n", "for", "pred_fg_logits_per_seq", ",", "targets_per_seq", "in", "zip", "(", "fg_logits", ",", "targets", ")", ":", "\n", "            ", "gt_semseg_masks_per_seq", "=", "targets_per_seq", "[", "'semseg_masks'", "]", "\n", "ignore_masks_per_seq", "=", "targets_per_seq", "[", "'ignore_masks'", "]", "\n", "\n", "assert", "gt_semseg_masks_per_seq", ".", "shape", "[", "-", "2", ":", "]", "==", "pred_fg_logits_per_seq", ".", "shape", "[", "-", "2", ":", "]", ",", "\"Shape mismatch between ground truth semseg masks {} and predicted semseg masks {}\"", ".", "format", "(", "\n", "gt_semseg_masks_per_seq", ".", "shape", ",", "pred_fg_logits_per_seq", ".", "shape", "\n", ")", "\n", "assert", "gt_semseg_masks_per_seq", ".", "shape", "[", "-", "2", ":", "]", "==", "ignore_masks_per_seq", ".", "shape", "[", "-", "2", ":", "]", ",", "\"Shape mismatch between ground truth semseg masks {} and ignore masks {} \"", ".", "format", "(", "\n", "gt_semseg_masks_per_seq", ".", "shape", ",", "ignore_masks_per_seq", ".", "shape", "\n", ")", "\n", "\n", "fg_masks_per_seq", "=", "(", "gt_semseg_masks_per_seq", ">", "0", ")", ".", "float", "(", ")", "\n", "seq_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "pred_fg_logits_per_seq", ",", "fg_masks_per_seq", ",", "reduction", "=", "\"none\"", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "nonignore_masks_per_seq", "=", "1.", "-", "ignore_masks_per_seq", ".", "float", "(", ")", "\n", "\n", "", "seq_loss", "=", "seq_loss", "*", "nonignore_masks_per_seq", "\n", "seq_loss", "=", "seq_loss", ".", "sum", "(", ")", "/", "nonignore_masks_per_seq", ".", "sum", "(", ")", ".", "detach", "(", ")", "\n", "\n", "loss", "=", "loss", "+", "seq_loss", "\n", "\n", "", "output_dict", "[", "ModelOutput", ".", "OPTIMIZATION_LOSSES", "]", "[", "LossConsts", ".", "FOREGROUND", "]", "=", "loss", "/", "len", "(", "targets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.model_builder.build_model": [[247, 369], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "backbone_builder", "EmbeddingHeadType", "stemseg.modeling.losses.EmbeddingLoss", "info_to_print.append", "info_to_print.append", "info_to_print.append", "info_to_print.append", "info_to_print.append", "info_to_print.append", "info_to_print.append", "info_to_print.append", "print_fn", "model_builder.TrainingModel", "os.path.join", "print_fn", "os.path.exists", "min", "SeedinessHeadType", "info_to_print.append", "info_to_print.append", "info_to_print.append", "info_to_print.append", "info_to_print.append", "SemsegHeadType", "SemsegLossType", "info_to_print.append", "info_to_print.append", "info_to_print.append", "info_to_print.append", "info_to_print.append", "info_to_print.append", "info_to_print.append", "stemseg.utils.ModelPaths.pretrained_backbones_dir", "torch.load", "torch.load", "torch.load", "backbone_builder.load_state_dict", "ValueError", "stemseg.modeling.embedding_utils.get_nb_free_dims", "stemseg.config.cfg.TRAINING.LOSSES.EMBEDDING.d"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.global_registry.GlobalRegistry.exists", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.model_paths.ModelPaths.pretrained_backbones_dir", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.training_logger.TrainingLogger.load_state_dict", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.embedding_utils.get_nb_free_dims", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.config.config.YamlConfig.d"], ["", "", "def", "build_model", "(", "restore_pretrained_backbone_wts", "=", "False", ",", "logger", "=", "None", ")", ":", "\n", "    ", "print_fn", "=", "logger", ".", "info", "if", "logger", "is", "not", "None", "else", "print", "\n", "\n", "# manually seed the random number generator so that all weights get initialized to the same values when using", "\n", "# torch.nn.parallel.DistributedDataParallel", "\n", "torch", ".", "manual_seed", "(", "42", ")", "\n", "\n", "# build backbone network", "\n", "backbone_type", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "TYPE", "\n", "backbone_builder", "=", "BACKBONE_REGISTRY", "[", "backbone_type", "]", "\n", "backbone", "=", "backbone_builder", "(", "cfg", ")", "\n", "\n", "info_to_print", "=", "[", "\n", "\"Backbone type: {}\"", ".", "format", "(", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "TYPE", ")", ",", "\n", "\"Backbone frozen: {}\"", ".", "format", "(", "\"Yes\"", "if", "cfg", ".", "TRAINING", ".", "FREEZE_BACKBONE", "else", "\"No\"", ")", "\n", "]", "\n", "\n", "# restore pre-trained weights if possible.", "\n", "if", "restore_pretrained_backbone_wts", ":", "\n", "        ", "pretrained_wts_file", "=", "os", ".", "path", ".", "join", "(", "ModelPaths", ".", "pretrained_backbones_dir", "(", ")", ",", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "PRETRAINED_WEIGHTS", ")", "\n", "print_fn", "(", "\"Restoring backbone weights from '{}'\"", ".", "format", "(", "pretrained_wts_file", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "pretrained_wts_file", ")", ":", "\n", "            ", "restore_dict", "=", "torch", ".", "load", "(", "pretrained_wts_file", ")", "\n", "backbone", ".", "load_state_dict", "(", "restore_dict", ",", "strict", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Could not find pre-trained backbone weights file at expected location: '{}'\"", ".", "format", "(", "\n", "pretrained_wts_file", ")", ")", "\n", "\n", "", "", "embedding_head_seediness_output", "=", "not", "cfg", ".", "MODEL", ".", "USE_SEEDINESS_HEAD", "\n", "\n", "add_semseg_head", "=", "cfg", ".", "MODEL", ".", "USE_SEMSEG_HEAD", "\n", "if", "cfg", ".", "INPUT", ".", "NUM_CLASSES", ">", "2", ":", "\n", "        ", "assert", "add_semseg_head", ",", "\"Number of object classes > 2, but 'USE_SEMSEG_HEAD' option is set to False\"", "\n", "\n", "# create embedding/tracker head", "\n", "", "EmbeddingHeadType", "=", "EMBEDDING_HEAD_REGISTRY", "[", "cfg", ".", "MODEL", ".", "EMBEDDINGS", ".", "HEAD_TYPE", "]", "\n", "\n", "embedding_head", "=", "EmbeddingHeadType", "(", "\n", "backbone", ".", "out_channels", ",", "cfg", ".", "MODEL", ".", "EMBEDDINGS", ".", "INTER_CHANNELS", ",", "cfg", ".", "MODEL", ".", "EMBEDDINGS", ".", "EMBEDDING_SIZE", ",", "\n", "tanh_activation", "=", "cfg", ".", "MODEL", ".", "EMBEDDINGS", ".", "TANH_ACTIVATION", ",", "\n", "seediness_output", "=", "embedding_head_seediness_output", ",", "\n", "experimental_dims", "=", "cfg", ".", "MODEL", ".", "EMBEDDING_DIM_MODE", ",", "\n", "PoolType", "=", "POOLER_REGISTRY", "[", "cfg", ".", "MODEL", ".", "EMBEDDINGS", ".", "POOL_TYPE", "]", ",", "\n", "NormType", "=", "NORM_REGISTRY", "[", "cfg", ".", "MODEL", ".", "EMBEDDINGS", ".", "NORMALIZATION_LAYER", "]", "(", "cfg", ".", "MODEL", ".", "EMBEDDINGS", ".", "GN_NUM_GROUPS", ")", ",", "\n", ")", "\n", "\n", "# create embedding loss criterion", "\n", "embedding_loss_criterion", "=", "EmbeddingLoss", "(", "\n", "min", "(", "cfg", ".", "MODEL", ".", "EMBEDDINGS", ".", "SCALE", ")", ",", "\n", "embedding_size", "=", "cfg", ".", "MODEL", ".", "EMBEDDINGS", ".", "EMBEDDING_SIZE", ",", "\n", "nbr_free_dims", "=", "get_nb_free_dims", "(", "cfg", ".", "MODEL", ".", "EMBEDDING_DIM_MODE", ")", ",", "\n", "**", "cfg", ".", "TRAINING", ".", "LOSSES", ".", "EMBEDDING", ".", "d", "(", ")", ")", "\n", "\n", "info_to_print", ".", "append", "(", "\"Embedding head type: {}\"", ".", "format", "(", "cfg", ".", "MODEL", ".", "EMBEDDINGS", ".", "HEAD_TYPE", ")", ")", "\n", "info_to_print", ".", "append", "(", "\"Embedding head channels: {}\"", ".", "format", "(", "cfg", ".", "MODEL", ".", "EMBEDDINGS", ".", "INTER_CHANNELS", ")", ")", "\n", "info_to_print", ".", "append", "(", "\"Embedding dims: {}\"", ".", "format", "(", "cfg", ".", "MODEL", ".", "EMBEDDINGS", ".", "EMBEDDING_SIZE", ")", ")", "\n", "info_to_print", ".", "append", "(", "\"Embedding dim mode: {}\"", ".", "format", "(", "cfg", ".", "MODEL", ".", "EMBEDDING_DIM_MODE", ")", ")", "\n", "info_to_print", ".", "append", "(", "\"Embedding free dim stds: {}\"", ".", "format", "(", "cfg", ".", "TRAINING", ".", "LOSSES", ".", "EMBEDDING", ".", "FREE_DIM_STDS", ")", ")", "\n", "info_to_print", ".", "append", "(", "\"Embedding head normalization: {}\"", ".", "format", "(", "cfg", ".", "MODEL", ".", "EMBEDDINGS", ".", "NORMALIZATION_LAYER", ")", ")", "\n", "info_to_print", ".", "append", "(", "\"Embedding head pooling type: {}\"", ".", "format", "(", "cfg", ".", "MODEL", ".", "EMBEDDINGS", ".", "POOL_TYPE", ")", ")", "\n", "\n", "if", "cfg", ".", "MODEL", ".", "USE_SEEDINESS_HEAD", ":", "\n", "        ", "SeedinessHeadType", "=", "SEEDINESS_HEAD_REGISTRY", "[", "cfg", ".", "MODEL", ".", "SEEDINESS", ".", "HEAD_TYPE", "]", "\n", "seediness_head", "=", "SeedinessHeadType", "(", "\n", "backbone", ".", "out_channels", ",", "cfg", ".", "MODEL", ".", "SEEDINESS", ".", "INTER_CHANNELS", ",", "\n", "PoolType", "=", "POOLER_REGISTRY", "[", "cfg", ".", "MODEL", ".", "SEEDINESS", ".", "POOL_TYPE", "]", ",", "\n", "NormType", "=", "NORM_REGISTRY", "[", "cfg", ".", "MODEL", ".", "SEEDINESS", ".", "NORMALIZATION_LAYER", "]", "(", "cfg", ".", "MODEL", ".", "SEEDINESS", ".", "GN_NUM_GROUPS", ")", "\n", ")", "\n", "info_to_print", ".", "append", "(", "\"Seediness head type: {}\"", ".", "format", "(", "cfg", ".", "MODEL", ".", "SEEDINESS", ".", "HEAD_TYPE", ")", ")", "\n", "info_to_print", ".", "append", "(", "\"Seediness head channels: {}\"", ".", "format", "(", "cfg", ".", "MODEL", ".", "SEEDINESS", ".", "INTER_CHANNELS", ")", ")", "\n", "info_to_print", ".", "append", "(", "\"Seediness head normalization: {}\"", ".", "format", "(", "cfg", ".", "MODEL", ".", "SEEDINESS", ".", "NORMALIZATION_LAYER", ")", ")", "\n", "info_to_print", ".", "append", "(", "\"Seediness head pooling type: {}\"", ".", "format", "(", "cfg", ".", "MODEL", ".", "SEEDINESS", ".", "POOL_TYPE", ")", ")", "\n", "", "else", ":", "\n", "        ", "seediness_head", "=", "None", "\n", "info_to_print", ".", "append", "(", "\"Seediness head type: N/A\"", ")", "\n", "\n", "# create semantic segmentation head", "\n", "", "if", "add_semseg_head", ":", "\n", "        ", "SemsegHeadType", "=", "SEMSEG_HEAD_REGISTRY", "[", "cfg", ".", "MODEL", ".", "SEMSEG", ".", "HEAD_TYPE", "]", "\n", "semseg_head", "=", "SemsegHeadType", "(", "\n", "backbone", ".", "out_channels", ",", "cfg", ".", "INPUT", ".", "NUM_CLASSES", ",", "\n", "inter_channels", "=", "cfg", ".", "MODEL", ".", "SEMSEG", ".", "INTER_CHANNELS", ",", "feature_scales", "=", "cfg", ".", "MODEL", ".", "SEMSEG", ".", "FEATURE_SCALE", ",", "\n", "foreground_channel", "=", "cfg", ".", "MODEL", ".", "SEMSEG", ".", "FOREGROUND_CHANNEL", ",", "PoolType", "=", "POOLER_REGISTRY", "[", "cfg", ".", "MODEL", ".", "SEMSEG", ".", "POOL_TYPE", "]", ",", "\n", "NormType", "=", "NORM_REGISTRY", "[", "cfg", ".", "MODEL", ".", "SEMSEG", ".", "NORMALIZATION_LAYER", "]", "(", "cfg", ".", "MODEL", ".", "SEMSEG", ".", "GN_NUM_GROUPS", ")", "\n", ")", "\n", "\n", "# create semseg loss criterion", "\n", "SemsegLossType", "=", "SEMSEG_LOSS_REGISTRY", "[", "cfg", ".", "TRAINING", ".", "LOSSES", ".", "SEMSEG", "]", "\n", "semseg_loss_criterion", "=", "SemsegLossType", "(", ")", "\n", "\n", "info_to_print", ".", "append", "(", "\"Semseg head type: {}\"", ".", "format", "(", "cfg", ".", "MODEL", ".", "SEMSEG", ".", "HEAD_TYPE", ")", ")", "\n", "info_to_print", ".", "append", "(", "\"Semseg head channels: {}\"", ".", "format", "(", "cfg", ".", "MODEL", ".", "SEMSEG", ".", "INTER_CHANNELS", ")", ")", "\n", "info_to_print", ".", "append", "(", "\"Sesmeg with foreground channel: {}\"", ".", "format", "(", "\"Yes\"", "if", "cfg", ".", "MODEL", ".", "SEMSEG", ".", "FOREGROUND_CHANNEL", "else", "\"No\"", ")", ")", "\n", "info_to_print", ".", "append", "(", "\"Semseg loss type: {}\"", ".", "format", "(", "cfg", ".", "TRAINING", ".", "LOSSES", ".", "SEMSEG", ")", ")", "\n", "info_to_print", ".", "append", "(", "\"Semseg head normalization: {}\"", ".", "format", "(", "cfg", ".", "MODEL", ".", "SEMSEG", ".", "NORMALIZATION_LAYER", ")", ")", "\n", "info_to_print", ".", "append", "(", "\"Semseg head pooling type: {}\"", ".", "format", "(", "cfg", ".", "MODEL", ".", "SEMSEG", ".", "POOL_TYPE", ")", ")", "\n", "", "else", ":", "\n", "        ", "semseg_head", "=", "None", "\n", "semseg_loss_criterion", "=", "None", "\n", "info_to_print", ".", "append", "(", "\"Semseg head type: N/A\"", ")", "\n", "\n", "", "multiclass_semseg_output", "=", "cfg", ".", "INPUT", ".", "NUM_CLASSES", ">", "2", "\n", "output_resize_scale", "=", "4.0", "if", "cfg", ".", "TRAINING", ".", "LOSS_AT_FULL_RES", "else", "1.0", "\n", "\n", "info_to_print", ".", "append", "(", "\"Output resize scale: {}\"", ".", "format", "(", "output_resize_scale", ")", ")", "\n", "\n", "print_fn", "(", "\"Model configuration\\n\"", "\n", "\"{}\\n\"", ".", "format", "(", "\"\\n\"", ".", "join", "(", "[", "\"  - {}\"", ".", "format", "(", "line", ")", "for", "line", "in", "info_to_print", "]", ")", ")", ")", "\n", "\n", "return", "TrainingModel", "(", "\n", "backbone", "=", "backbone", ",", "\n", "embedding_head", "=", "embedding_head", ",", "\n", "embedding_head_feature_map_scale", "=", "cfg", ".", "MODEL", ".", "EMBEDDINGS", ".", "SCALE", ",", "\n", "embedding_loss_criterion", "=", "embedding_loss_criterion", ",", "\n", "semseg_head", "=", "semseg_head", ",", "\n", "semseg_feature_map_scale", "=", "cfg", ".", "MODEL", ".", "SEMSEG", ".", "FEATURE_SCALE", ",", "\n", "semseg_loss_criterion", "=", "semseg_loss_criterion", ",", "\n", "seediness_head", "=", "seediness_head", ",", "\n", "seediness_head_feature_map_scale", "=", "cfg", ".", "MODEL", ".", "SEEDINESS", ".", "FEATURE_SCALE", ",", "\n", "multiclass_semseg_output", "=", "multiclass_semseg_output", ",", "\n", "output_resize_scale", "=", "output_resize_scale", ",", "\n", "logger", "=", "logger", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.seediness_decoder.SqueezingExpandDecoder.__init__": [[13, 81], ["torch.Module.__init__", "stemseg.modeling.common.get_pooling_layer_creator", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "stemseg.modeling.common.get_temporal_scales", "torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "ConvType", "NormType", "torch.ReLU", "torch.ReLU", "ConvType", "NormType", "torch.ReLU", "torch.ReLU", "ConvType", "NormType", "torch.ReLU", "torch.ReLU", "ConvType", "NormType", "torch.ReLU", "torch.ReLU", "ConvType", "NormType", "torch.ReLU", "torch.ReLU", "ConvType", "NormType", "torch.ReLU", "torch.ReLU", "ConvType", "NormType", "torch.ReLU", "torch.ReLU", "stemseg.modeling.common.UpsampleTrilinear3D", "stemseg.modeling.common.UpsampleTrilinear3D", "stemseg.modeling.common.UpsampleTrilinear3D"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.__init__", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.common.get_pooling_layer_creator", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.common.get_temporal_scales"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "inter_channels", ",", "ConvType", "=", "nn", ".", "Conv3d", ",", "PoolType", "=", "nn", ".", "AvgPool3d", ",", "NormType", "=", "nn", ".", "Identity", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "PoolingLayerCallbacks", "=", "get_pooling_layer_creator", "(", "PoolType", ")", "\n", "\n", "self", ".", "block_32x", "=", "nn", ".", "Sequential", "(", "\n", "ConvType", "(", "in_channels", ",", "inter_channels", "[", "0", "]", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "NormType", "(", "inter_channels", "[", "0", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "PoolingLayerCallbacks", "[", "0", "]", "(", "3", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "padding", "=", "1", ")", ",", "\n", "\n", "ConvType", "(", "inter_channels", "[", "0", "]", ",", "inter_channels", "[", "0", "]", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "NormType", "(", "inter_channels", "[", "0", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "PoolingLayerCallbacks", "[", "1", "]", "(", "3", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "padding", "=", "1", ")", ",", "\n", "ConvType", "(", "inter_channels", "[", "0", "]", ",", "inter_channels", "[", "0", "]", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "\n", "NormType", "(", "inter_channels", "[", "0", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "PoolingLayerCallbacks", "[", "2", "]", "(", "3", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "padding", "=", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "block_16x", "=", "nn", ".", "Sequential", "(", "\n", "ConvType", "(", "in_channels", ",", "inter_channels", "[", "1", "]", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "NormType", "(", "inter_channels", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "PoolingLayerCallbacks", "[", "0", "]", "(", "3", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "padding", "=", "1", ")", ",", "\n", "\n", "ConvType", "(", "inter_channels", "[", "1", "]", ",", "inter_channels", "[", "1", "]", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "NormType", "(", "inter_channels", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "PoolingLayerCallbacks", "[", "1", "]", "(", "3", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "padding", "=", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "block_8x", "=", "nn", ".", "Sequential", "(", "\n", "ConvType", "(", "in_channels", ",", "inter_channels", "[", "2", "]", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "NormType", "(", "inter_channels", "[", "2", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "PoolingLayerCallbacks", "[", "0", "]", "(", "3", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "padding", "=", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "block_4x", "=", "nn", ".", "Sequential", "(", "\n", "ConvType", "(", "in_channels", ",", "inter_channels", "[", "3", "]", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "NormType", "(", "inter_channels", "[", "3", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "t_scales", "=", "get_temporal_scales", "(", ")", "\n", "\n", "# 32x -> 16x", "\n", "self", ".", "upsample_32_to_16", "=", "nn", ".", "Sequential", "(", "\n", "UpsampleTrilinear3D", "(", "scale_factor", "=", "(", "t_scales", "[", "0", "]", ",", "2", ",", "2", ")", ",", "align_corners", "=", "False", ")", ",", "\n", ")", "\n", "self", ".", "conv_16", "=", "nn", ".", "Conv3d", "(", "inter_channels", "[", "0", "]", "+", "inter_channels", "[", "1", "]", ",", "inter_channels", "[", "1", "]", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "# 16x to 8x", "\n", "self", ".", "upsample_16_to_8", "=", "nn", ".", "Sequential", "(", "\n", "UpsampleTrilinear3D", "(", "scale_factor", "=", "(", "t_scales", "[", "1", "]", ",", "2", ",", "2", ")", ",", "align_corners", "=", "False", ")", "\n", ")", "\n", "self", ".", "conv_8", "=", "nn", ".", "Conv3d", "(", "inter_channels", "[", "1", "]", "+", "inter_channels", "[", "2", "]", ",", "inter_channels", "[", "2", "]", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "# 8x to 4x", "\n", "self", ".", "upsample_8_to_4", "=", "nn", ".", "Sequential", "(", "\n", "UpsampleTrilinear3D", "(", "scale_factor", "=", "(", "t_scales", "[", "2", "]", ",", "2", ",", "2", ")", ",", "align_corners", "=", "False", ")", "\n", ")", "\n", "self", ".", "conv_4", "=", "nn", ".", "Conv3d", "(", "inter_channels", "[", "2", "]", "+", "inter_channels", "[", "3", "]", ",", "inter_channels", "[", "3", "]", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "conv_out", "=", "nn", ".", "Conv3d", "(", "inter_channels", "[", "3", "]", ",", "1", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.seediness_decoder.SqueezingExpandDecoder.forward": [[82, 113], ["seediness_decoder.SqueezingExpandDecoder.block_32x", "seediness_decoder.SqueezingExpandDecoder.upsample_32_to_16", "seediness_decoder.SqueezingExpandDecoder.block_16x", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "seediness_decoder.SqueezingExpandDecoder.conv_16", "seediness_decoder.SqueezingExpandDecoder.upsample_16_to_8", "seediness_decoder.SqueezingExpandDecoder.block_8x", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "seediness_decoder.SqueezingExpandDecoder.conv_8", "seediness_decoder.SqueezingExpandDecoder.upsample_8_to_4", "seediness_decoder.SqueezingExpandDecoder.block_4x", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "seediness_decoder.SqueezingExpandDecoder.conv_4", "seediness_decoder.SqueezingExpandDecoder.conv_out().sigmoid", "len", "seediness_decoder.SqueezingExpandDecoder.conv_out"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        :param x: list of multiscale feature map tensors of shape [N, C, T, H, W]. For this implementation, there\n        should be 4 features maps in increasing order of spatial dimensions\n        :return: embedding map of shape [N, E, T, H, W]\n        \"\"\"", "\n", "assert", "len", "(", "x", ")", "==", "4", "\n", "\n", "feat_map_32x", ",", "feat_map_16x", ",", "feat_map_8x", ",", "feat_map_4x", "=", "x", "\n", "\n", "feat_map_32x", "=", "self", ".", "block_32x", "(", "feat_map_32x", ")", "\n", "\n", "# 32x to 16x", "\n", "x", "=", "self", ".", "upsample_32_to_16", "(", "feat_map_32x", ")", "\n", "feat_map_16x", "=", "self", ".", "block_16x", "(", "feat_map_16x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "feat_map_16x", ")", ",", "1", ")", "\n", "x", "=", "self", ".", "conv_16", "(", "x", ")", "\n", "\n", "# 16x to 8x", "\n", "x", "=", "self", ".", "upsample_16_to_8", "(", "x", ")", "\n", "feat_map_8x", "=", "self", ".", "block_8x", "(", "feat_map_8x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "feat_map_8x", ")", ",", "1", ")", "\n", "x", "=", "self", ".", "conv_8", "(", "x", ")", "\n", "\n", "# 8x to 4x", "\n", "x", "=", "self", ".", "upsample_8_to_4", "(", "x", ")", "\n", "feat_map_4x", "=", "self", ".", "block_4x", "(", "feat_map_4x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "feat_map_4x", ")", ",", "1", ")", "\n", "x", "=", "self", ".", "conv_4", "(", "x", ")", "\n", "\n", "return", "self", ".", "conv_out", "(", "x", ")", ".", "sigmoid", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.semseg_decoder.SqueezeExpandDecoder.__init__": [[14, 90], ["torch.Module.__init__", "stemseg.modeling.common.get_pooling_layer_creator", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "stemseg.modeling.common.get_temporal_scales", "torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "tuple", "ConvType", "NormType", "torch.ReLU", "torch.ReLU", "ConvType", "NormType", "torch.ReLU", "torch.ReLU", "ConvType", "NormType", "torch.ReLU", "torch.ReLU", "ConvType", "NormType", "torch.ReLU", "torch.ReLU", "ConvType", "NormType", "torch.ReLU", "torch.ReLU", "ConvType", "NormType", "torch.ReLU", "torch.ReLU", "ConvType", "NormType", "torch.ReLU", "torch.ReLU", "stemseg.modeling.common.UpsampleTrilinear3D", "stemseg.modeling.common.UpsampleTrilinear3D", "stemseg.modeling.common.UpsampleTrilinear3D"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.__init__", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.common.get_pooling_layer_creator", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.common.get_temporal_scales"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "num_classes", ",", "inter_channels", ",", "feature_scales", ",", "foreground_channel", "=", "False", ",", "\n", "ConvType", "=", "nn", ".", "Conv3d", ",", "PoolType", "=", "nn", ".", "AvgPool3d", ",", "NormType", "=", "nn", ".", "Identity", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "is_3d", "=", "True", "\n", "\n", "assert", "tuple", "(", "feature_scales", ")", "==", "(", "4", ",", "8", ",", "16", ",", "32", ")", "\n", "\n", "PoolingLayerCallbacks", "=", "get_pooling_layer_creator", "(", "PoolType", ")", "\n", "\n", "self", ".", "block_32x", "=", "nn", ".", "Sequential", "(", "\n", "ConvType", "(", "in_channels", ",", "inter_channels", "[", "0", "]", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "NormType", "(", "inter_channels", "[", "0", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "PoolingLayerCallbacks", "[", "0", "]", "(", "3", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "padding", "=", "1", ")", ",", "\n", "\n", "ConvType", "(", "inter_channels", "[", "0", "]", ",", "inter_channels", "[", "0", "]", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "NormType", "(", "inter_channels", "[", "0", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "PoolingLayerCallbacks", "[", "1", "]", "(", "3", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "padding", "=", "1", ")", ",", "\n", "\n", "ConvType", "(", "inter_channels", "[", "0", "]", ",", "inter_channels", "[", "0", "]", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "NormType", "(", "inter_channels", "[", "0", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "PoolingLayerCallbacks", "[", "2", "]", "(", "3", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "padding", "=", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "block_16x", "=", "nn", ".", "Sequential", "(", "\n", "ConvType", "(", "in_channels", ",", "inter_channels", "[", "1", "]", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "NormType", "(", "inter_channels", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "PoolingLayerCallbacks", "[", "0", "]", "(", "3", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "padding", "=", "1", ")", ",", "\n", "\n", "ConvType", "(", "inter_channels", "[", "1", "]", ",", "inter_channels", "[", "1", "]", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "NormType", "(", "inter_channels", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "PoolingLayerCallbacks", "[", "1", "]", "(", "3", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "padding", "=", "1", ")", ",", "\n", "# ResidualModuleWrapper(NonLocalBlock3DWithDownsamplingV2(inter_channels, 128, 1))", "\n", ")", "\n", "\n", "self", ".", "block_8x", "=", "nn", ".", "Sequential", "(", "\n", "ConvType", "(", "in_channels", ",", "inter_channels", "[", "2", "]", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "NormType", "(", "inter_channels", "[", "2", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "PoolingLayerCallbacks", "[", "0", "]", "(", "3", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "padding", "=", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "block_4x", "=", "nn", ".", "Sequential", "(", "\n", "ConvType", "(", "in_channels", ",", "inter_channels", "[", "3", "]", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "NormType", "(", "inter_channels", "[", "3", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "t_scales", "=", "get_temporal_scales", "(", ")", "\n", "\n", "# 32x -> 16x", "\n", "self", ".", "upsample_32_to_16", "=", "nn", ".", "Sequential", "(", "\n", "UpsampleTrilinear3D", "(", "scale_factor", "=", "(", "t_scales", "[", "0", "]", ",", "2", ",", "2", ")", ",", "align_corners", "=", "False", ")", ",", "\n", ")", "\n", "self", ".", "conv_16", "=", "nn", ".", "Conv3d", "(", "inter_channels", "[", "0", "]", "+", "inter_channels", "[", "1", "]", ",", "inter_channels", "[", "1", "]", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "# 16x to 8x", "\n", "self", ".", "upsample_16_to_8", "=", "nn", ".", "Sequential", "(", "\n", "UpsampleTrilinear3D", "(", "scale_factor", "=", "(", "t_scales", "[", "1", "]", ",", "2", ",", "2", ")", ",", "align_corners", "=", "False", ")", "\n", ")", "\n", "self", ".", "conv_8", "=", "nn", ".", "Conv3d", "(", "inter_channels", "[", "1", "]", "+", "inter_channels", "[", "2", "]", ",", "inter_channels", "[", "2", "]", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "# 8x to 4x", "\n", "self", ".", "upsample_8_to_4", "=", "nn", ".", "Sequential", "(", "\n", "UpsampleTrilinear3D", "(", "scale_factor", "=", "(", "t_scales", "[", "2", "]", ",", "2", ",", "2", ")", ",", "align_corners", "=", "False", ")", "\n", ")", "\n", "self", ".", "conv_4", "=", "nn", ".", "Conv3d", "(", "inter_channels", "[", "2", "]", "+", "inter_channels", "[", "3", "]", ",", "inter_channels", "[", "3", "]", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "out_channels", "=", "num_classes", "+", "1", "if", "foreground_channel", "else", "num_classes", "\n", "self", ".", "conv_out", "=", "nn", ".", "Conv3d", "(", "inter_channels", "[", "3", "]", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "has_foreground_channel", "=", "foreground_channel", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.semseg_decoder.SqueezeExpandDecoder.forward": [[91, 117], ["semseg_decoder.SqueezeExpandDecoder.block_32x", "semseg_decoder.SqueezeExpandDecoder.upsample_32_to_16", "semseg_decoder.SqueezeExpandDecoder.block_16x", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "semseg_decoder.SqueezeExpandDecoder.conv_16", "semseg_decoder.SqueezeExpandDecoder.upsample_16_to_8", "semseg_decoder.SqueezeExpandDecoder.block_8x", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "semseg_decoder.SqueezeExpandDecoder.conv_8", "semseg_decoder.SqueezeExpandDecoder.upsample_8_to_4", "semseg_decoder.SqueezeExpandDecoder.block_4x", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "semseg_decoder.SqueezeExpandDecoder.conv_4", "semseg_decoder.SqueezeExpandDecoder.conv_out", "len", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "len", "(", "x", ")", "==", "4", ",", "\"Expected 4 feature maps, got {}\"", ".", "format", "(", "len", "(", "x", ")", ")", "\n", "\n", "feat_map_32x", ",", "feat_map_16x", ",", "feat_map_8x", ",", "feat_map_4x", "=", "x", "[", ":", ":", "-", "1", "]", "\n", "\n", "feat_map_32x", "=", "self", ".", "block_32x", "(", "feat_map_32x", ")", "\n", "\n", "# 32x to 16x", "\n", "x", "=", "self", ".", "upsample_32_to_16", "(", "feat_map_32x", ")", "\n", "feat_map_16x", "=", "self", ".", "block_16x", "(", "feat_map_16x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "feat_map_16x", ")", ",", "1", ")", "\n", "x", "=", "self", ".", "conv_16", "(", "x", ")", "\n", "\n", "# 16x to 8x", "\n", "x", "=", "self", ".", "upsample_16_to_8", "(", "x", ")", "\n", "feat_map_8x", "=", "self", ".", "block_8x", "(", "feat_map_8x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "feat_map_8x", ")", ",", "1", ")", "\n", "x", "=", "self", ".", "conv_8", "(", "x", ")", "\n", "\n", "# 8x to 4x", "\n", "x", "=", "self", ".", "upsample_8_to_4", "(", "x", ")", "\n", "feat_map_4x", "=", "self", ".", "block_4x", "(", "feat_map_4x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "feat_map_4x", ")", ",", "1", ")", "\n", "x", "=", "self", ".", "conv_4", "(", "x", ")", "\n", "\n", "return", "self", ".", "conv_out", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.semseg_decoder.SqueezeExpandDilatedDecoder.__init__": [[120, 195], ["torch.Module.__init__", "stemseg.modeling.common.get_pooling_layer_creator", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "stemseg.modeling.common.get_temporal_scales", "torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "tuple", "stemseg.modeling.common.AtrousPyramid3D", "NormType", "torch.ReLU", "torch.ReLU", "stemseg.modeling.common.AtrousPyramid3D", "NormType", "torch.ReLU", "torch.ReLU", "stemseg.modeling.common.AtrousPyramid3D", "NormType", "torch.ReLU", "torch.ReLU", "stemseg.modeling.common.AtrousPyramid3D", "NormType", "torch.ReLU", "torch.ReLU", "stemseg.modeling.common.AtrousPyramid3D", "NormType", "torch.ReLU", "torch.ReLU", "ConvType", "NormType", "torch.ReLU", "torch.ReLU", "ConvType", "NormType", "torch.ReLU", "torch.ReLU", "stemseg.modeling.common.UpsampleTrilinear3D", "stemseg.modeling.common.UpsampleTrilinear3D", "stemseg.modeling.common.UpsampleTrilinear3D"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.__init__", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.common.get_pooling_layer_creator", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.common.get_temporal_scales"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "num_classes", ",", "inter_channels", ",", "feature_scales", ",", "foreground_channel", "=", "False", ",", "\n", "ConvType", "=", "nn", ".", "Conv3d", ",", "PoolType", "=", "nn", ".", "AvgPool3d", ",", "NormType", "=", "nn", ".", "Identity", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "tuple", "(", "feature_scales", ")", "==", "(", "4", ",", "8", ",", "16", ",", "32", ")", "\n", "\n", "PoolingLayerCallbacks", "=", "get_pooling_layer_creator", "(", "PoolType", ")", "\n", "\n", "self", ".", "block_32x", "=", "nn", ".", "Sequential", "(", "\n", "AtrousPyramid3D", "(", "in_channels", ",", "64", ",", "(", "(", "1", ",", "3", ",", "3", ")", ",", "(", "1", ",", "6", ",", "6", ")", ",", "(", "1", ",", "9", ",", "9", ")", ")", ",", "inter_channels", "[", "0", "]", ")", ",", "\n", "NormType", "(", "inter_channels", "[", "0", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "PoolingLayerCallbacks", "[", "0", "]", "(", "(", "3", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ",", "0", ")", ")", ",", "\n", "\n", "AtrousPyramid3D", "(", "inter_channels", "[", "0", "]", ",", "64", ",", "(", "(", "1", ",", "3", ",", "3", ")", ",", "(", "1", ",", "6", ",", "6", ")", ",", "(", "1", ",", "9", ",", "9", ")", ")", ",", "inter_channels", "[", "0", "]", ")", ",", "\n", "NormType", "(", "inter_channels", "[", "0", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "PoolingLayerCallbacks", "[", "1", "]", "(", "(", "3", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ",", "0", ")", ")", ",", "\n", "\n", "AtrousPyramid3D", "(", "inter_channels", "[", "0", "]", ",", "64", ",", "(", "(", "1", ",", "3", ",", "3", ")", ",", "(", "1", ",", "6", ",", "6", ")", ",", "(", "1", ",", "9", ",", "9", ")", ")", ",", "inter_channels", "[", "0", "]", ")", ",", "\n", "NormType", "(", "inter_channels", "[", "0", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "PoolingLayerCallbacks", "[", "2", "]", "(", "(", "3", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ",", "0", ")", ")", ",", "\n", ")", "\n", "\n", "self", ".", "block_16x", "=", "nn", ".", "Sequential", "(", "\n", "AtrousPyramid3D", "(", "in_channels", ",", "64", ",", "(", "(", "1", ",", "4", ",", "4", ")", ",", "(", "1", ",", "8", ",", "8", ")", ",", "(", "1", ",", "12", ",", "12", ")", ")", ",", "inter_channels", "[", "1", "]", ")", ",", "\n", "NormType", "(", "inter_channels", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "PoolingLayerCallbacks", "[", "0", "]", "(", "(", "3", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ",", "0", ")", ")", ",", "\n", "\n", "AtrousPyramid3D", "(", "in_channels", ",", "64", ",", "(", "(", "1", ",", "4", ",", "4", ")", ",", "(", "1", ",", "8", ",", "8", ")", ",", "(", "1", ",", "12", ",", "12", ")", ")", ",", "inter_channels", "[", "1", "]", ")", ",", "\n", "NormType", "(", "inter_channels", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "PoolingLayerCallbacks", "[", "1", "]", "(", "(", "3", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ",", "0", ")", ")", ",", "\n", ")", "\n", "\n", "self", ".", "block_8x", "=", "nn", ".", "Sequential", "(", "\n", "ConvType", "(", "in_channels", ",", "inter_channels", "[", "2", "]", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "NormType", "(", "inter_channels", "[", "2", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "PoolingLayerCallbacks", "[", "0", "]", "(", "3", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "padding", "=", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "block_4x", "=", "nn", ".", "Sequential", "(", "\n", "ConvType", "(", "in_channels", ",", "inter_channels", "[", "3", "]", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "NormType", "(", "inter_channels", "[", "3", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "t_scales", "=", "get_temporal_scales", "(", ")", "\n", "\n", "# 32x -> 16x", "\n", "self", ".", "upsample_32_to_16", "=", "nn", ".", "Sequential", "(", "\n", "UpsampleTrilinear3D", "(", "scale_factor", "=", "(", "t_scales", "[", "0", "]", ",", "2", ",", "2", ")", ",", "align_corners", "=", "False", ")", ",", "\n", ")", "\n", "self", ".", "conv_16", "=", "nn", ".", "Conv3d", "(", "inter_channels", "[", "0", "]", "+", "inter_channels", "[", "1", "]", ",", "inter_channels", "[", "1", "]", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "# 16x to 8x", "\n", "self", ".", "upsample_16_to_8", "=", "nn", ".", "Sequential", "(", "\n", "UpsampleTrilinear3D", "(", "scale_factor", "=", "(", "t_scales", "[", "1", "]", ",", "2", ",", "2", ")", ",", "align_corners", "=", "False", ")", "\n", ")", "\n", "self", ".", "conv_8", "=", "nn", ".", "Conv3d", "(", "inter_channels", "[", "1", "]", "+", "inter_channels", "[", "2", "]", ",", "inter_channels", "[", "2", "]", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "# 8x to 4x", "\n", "self", ".", "upsample_8_to_4", "=", "nn", ".", "Sequential", "(", "\n", "UpsampleTrilinear3D", "(", "scale_factor", "=", "(", "t_scales", "[", "2", "]", ",", "2", ",", "2", ")", ",", "align_corners", "=", "False", ")", "\n", ")", "\n", "self", ".", "conv_4", "=", "nn", ".", "Conv3d", "(", "inter_channels", "[", "2", "]", "+", "inter_channels", "[", "3", "]", ",", "inter_channels", "[", "3", "]", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "# output layer", "\n", "out_channels", "=", "num_classes", "+", "1", "if", "foreground_channel", "else", "num_classes", "\n", "self", ".", "conv_out", "=", "nn", ".", "Conv3d", "(", "inter_channels", "[", "-", "1", "]", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "has_foreground_channel", "=", "foreground_channel", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.semseg_decoder.SqueezeExpandDilatedDecoder.forward": [[196, 222], ["semseg_decoder.SqueezeExpandDilatedDecoder.block_32x", "semseg_decoder.SqueezeExpandDilatedDecoder.upsample_32_to_16", "semseg_decoder.SqueezeExpandDilatedDecoder.block_16x", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "semseg_decoder.SqueezeExpandDilatedDecoder.conv_16", "semseg_decoder.SqueezeExpandDilatedDecoder.upsample_16_to_8", "semseg_decoder.SqueezeExpandDilatedDecoder.block_8x", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "semseg_decoder.SqueezeExpandDilatedDecoder.conv_8", "semseg_decoder.SqueezeExpandDilatedDecoder.upsample_8_to_4", "semseg_decoder.SqueezeExpandDilatedDecoder.block_4x", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "semseg_decoder.SqueezeExpandDilatedDecoder.conv_4", "semseg_decoder.SqueezeExpandDilatedDecoder.conv_out", "len", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "len", "(", "x", ")", "==", "4", ",", "\"Expected 4 feature maps, got {}\"", ".", "format", "(", "len", "(", "x", ")", ")", "\n", "\n", "feat_map_32x", ",", "feat_map_16x", ",", "feat_map_8x", ",", "feat_map_4x", "=", "x", "[", ":", ":", "-", "1", "]", "\n", "\n", "feat_map_32x", "=", "self", ".", "block_32x", "(", "feat_map_32x", ")", "\n", "\n", "# 32x to 16x", "\n", "x", "=", "self", ".", "upsample_32_to_16", "(", "feat_map_32x", ")", "\n", "feat_map_16x", "=", "self", ".", "block_16x", "(", "feat_map_16x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "feat_map_16x", ")", ",", "1", ")", "\n", "x", "=", "self", ".", "conv_16", "(", "x", ")", "\n", "\n", "# 16x to 8x", "\n", "x", "=", "self", ".", "upsample_16_to_8", "(", "x", ")", "\n", "feat_map_8x", "=", "self", ".", "block_8x", "(", "feat_map_8x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "feat_map_8x", ")", ",", "1", ")", "\n", "x", "=", "self", ".", "conv_8", "(", "x", ")", "\n", "\n", "# 8x to 4x", "\n", "x", "=", "self", ".", "upsample_8_to_4", "(", "x", ")", "\n", "feat_map_4x", "=", "self", ".", "block_4x", "(", "feat_map_4x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "feat_map_4x", ")", ",", "1", ")", "\n", "x", "=", "self", ".", "conv_4", "(", "x", ")", "\n", "\n", "return", "self", ".", "conv_out", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.backbone.fpn.FPN.__init__": [[15, 46], ["torch.nn.Module.__init__", "enumerate", "conv_block", "conv_block", "fpn.FPN.add_module", "fpn.FPN.add_module", "fpn.FPN.inner_blocks.append", "fpn.FPN.layer_blocks.append"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.__init__"], ["def", "__init__", "(", "\n", "self", ",", "in_channels_list", ",", "out_channels", ",", "conv_block", ",", "top_blocks", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            in_channels_list (list[int]): number of channels for each feature map that\n                will be fed\n            out_channels (int): number of channels of the FPN representation\n            top_blocks (nn.Module or None): if provided, an extra operation will\n                be performed on the output of the last (smallest resolution)\n                FPN output, and the result will extend the result list\n        \"\"\"", "\n", "super", "(", "FPN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inner_blocks", "=", "[", "]", "\n", "self", ".", "layer_blocks", "=", "[", "]", "\n", "for", "idx", ",", "in_channels", "in", "enumerate", "(", "in_channels_list", ",", "1", ")", ":", "\n", "            ", "if", "idx", "<", "0", ":", "\n", "                ", "continue", "\n", "", "inner_block", "=", "\"fpn_inner{}\"", ".", "format", "(", "idx", ")", "\n", "layer_block", "=", "\"fpn_layer{}\"", ".", "format", "(", "idx", ")", "\n", "\n", "if", "in_channels", "==", "0", ":", "\n", "                ", "continue", "\n", "", "inner_block_module", "=", "conv_block", "(", "in_channels", ",", "out_channels", ",", "1", ")", "\n", "layer_block_module", "=", "conv_block", "(", "out_channels", ",", "out_channels", ",", "3", ",", "1", ")", "\n", "self", ".", "add_module", "(", "inner_block", ",", "inner_block_module", ")", "\n", "self", ".", "add_module", "(", "layer_block", ",", "layer_block_module", ")", "\n", "self", ".", "inner_blocks", ".", "append", "(", "inner_block", ")", "\n", "self", ".", "layer_blocks", ".", "append", "(", "layer_block", ")", "\n", "", "self", ".", "top_blocks", "=", "top_blocks", "\n", "\n", "self", ".", "to_discard", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.backbone.fpn.FPN.forward": [[47, 70], ["results.append", "zip", "tuple", "getattr", "torch.interpolate", "results.insert", "getattr", "getattr", "getattr"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            x (list[Tensor]): feature maps for each feature level.\n        Returns:\n            results (tuple[Tensor]): feature maps after FPN layers.\n                They are ordered from highest resolution first.\n        \"\"\"", "\n", "last_inner", "=", "getattr", "(", "self", ",", "self", ".", "inner_blocks", "[", "-", "1", "]", ")", "(", "x", "[", "-", "1", "]", ")", "\n", "results", "=", "[", "]", "\n", "results", ".", "append", "(", "getattr", "(", "self", ",", "self", ".", "layer_blocks", "[", "-", "1", "]", ")", "(", "last_inner", ")", ")", "\n", "\n", "for", "feature", ",", "inner_block", ",", "layer_block", "in", "zip", "(", "\n", "x", "[", "self", ".", "to_discard", ":", "-", "1", "]", "[", ":", ":", "-", "1", "]", ",", "self", ".", "inner_blocks", "[", ":", "-", "1", "]", "[", ":", ":", "-", "1", "]", ",", "self", ".", "layer_blocks", "[", ":", "-", "1", "]", "[", ":", ":", "-", "1", "]", "\n", ")", ":", "\n", "            ", "if", "not", "inner_block", ":", "\n", "                ", "continue", "\n", "", "inner_top_down", "=", "F", ".", "interpolate", "(", "last_inner", ",", "scale_factor", "=", "2", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ")", "\n", "inner_lateral", "=", "getattr", "(", "self", ",", "inner_block", ")", "(", "feature", ")", "\n", "last_inner", "=", "inner_lateral", "+", "inner_top_down", "\n", "results", ".", "insert", "(", "0", ",", "getattr", "(", "self", ",", "layer_block", ")", "(", "last_inner", ")", ")", "\n", "\n", "", "return", "tuple", "(", "results", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.backbone.resnet.ResNet.__init__": [[50, 93], ["torch.nn.Module.__init__", "resnet.StemWithFixedBatchNorm", "resnet.ResNet._freeze_backbone", "resnet._make_stage", "resnet.ResNet.add_module", "resnet.ResNet.stages.append", "str", "int"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.__init__", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.backbone.resnet.ResNet._freeze_backbone", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.backbone.resnet._make_stage"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# If we want to use the cfg in forward(), then we should make a copy", "\n", "# of it and store it for later use:", "\n", "# self.cfg = cfg.clone()", "\n", "\n", "# Translate string names to implementations", "\n", "stage_specs", "=", "_STAGE_SPECS", "[", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "TYPE", "]", "\n", "\n", "# Construct the stem module", "\n", "self", ".", "stem", "=", "StemWithFixedBatchNorm", "(", "cfg", ")", "\n", "\n", "# Constuct the specified ResNet stages", "\n", "num_groups", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "NUM_GROUPS", "\n", "width_per_group", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "WIDTH_PER_GROUP", "\n", "in_channels", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "STEM_OUT_CHANNELS", "\n", "stage2_bottleneck_channels", "=", "num_groups", "*", "width_per_group", "\n", "stage2_out_channels", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "RES2_OUT_CHANNELS", "\n", "self", ".", "stages", "=", "[", "]", "\n", "self", ".", "return_features", "=", "{", "}", "\n", "for", "stage_spec", "in", "stage_specs", ":", "\n", "            ", "name", "=", "\"layer\"", "+", "str", "(", "stage_spec", ".", "index", ")", "\n", "stage2_relative_factor", "=", "2", "**", "(", "stage_spec", ".", "index", "-", "1", ")", "\n", "bottleneck_channels", "=", "stage2_bottleneck_channels", "*", "stage2_relative_factor", "\n", "out_channels", "=", "stage2_out_channels", "*", "stage2_relative_factor", "\n", "module", "=", "_make_stage", "(", "\n", "BottleneckWithFixedBatchNorm", ",", "\n", "in_channels", ",", "\n", "bottleneck_channels", ",", "\n", "out_channels", ",", "\n", "stage_spec", ".", "block_count", ",", "\n", "num_groups", ",", "\n", "cfg", ".", "MODEL", ".", "RESNETS", ".", "STRIDE_IN_1X1", ",", "\n", "first_stride", "=", "int", "(", "stage_spec", ".", "index", ">", "1", ")", "+", "1", ",", "\n", ")", "\n", "in_channels", "=", "out_channels", "\n", "self", ".", "add_module", "(", "name", ",", "module", ")", "\n", "self", ".", "stages", ".", "append", "(", "name", ")", "\n", "self", ".", "return_features", "[", "name", "]", "=", "stage_spec", ".", "return_features", "\n", "\n", "# Optionally freeze (requires_grad=False) parts of the backbone", "\n", "", "self", ".", "_freeze_backbone", "(", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "FREEZE_AT_STAGE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.backbone.resnet.ResNet._freeze_backbone": [[94, 104], ["range", "getattr.parameters", "getattr", "str"], "methods", ["None"], ["", "def", "_freeze_backbone", "(", "self", ",", "freeze_at", ")", ":", "\n", "        ", "if", "freeze_at", "<", "0", ":", "\n", "            ", "return", "\n", "", "for", "stage_index", "in", "range", "(", "freeze_at", ")", ":", "\n", "            ", "if", "stage_index", "==", "0", ":", "\n", "                ", "m", "=", "self", ".", "stem", "# stage 0 is the stem", "\n", "", "else", ":", "\n", "                ", "m", "=", "getattr", "(", "self", ",", "\"layer\"", "+", "str", "(", "stage_index", ")", ")", "\n", "", "for", "p", "in", "m", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.backbone.resnet.ResNet.forward": [[105, 114], ["resnet.ResNet.stem", "getattr", "outputs.append"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "outputs", "=", "[", "]", "\n", "x", "=", "self", ".", "stem", "(", "x", ")", "\n", "for", "stage_name", "in", "self", ".", "stages", ":", "\n", "            ", "x", "=", "getattr", "(", "self", ",", "stage_name", ")", "(", "x", ")", "\n", "if", "self", ".", "return_features", "[", "stage_name", "]", ":", "\n", "                ", "outputs", ".", "append", "(", "x", ")", "\n", "\n", "", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.backbone.resnet.ResNetHead.__init__": [[117, 157], ["torch.nn.Module.__init__", "resnet._make_stage", "resnet.ResNetHead.add_module", "resnet.ResNetHead.stages.append", "str", "int"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.__init__", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.backbone.resnet._make_stage"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "block_module", ",", "\n", "stages", ",", "\n", "num_groups", "=", "1", ",", "\n", "width_per_group", "=", "64", ",", "\n", "stride_in_1x1", "=", "True", ",", "\n", "stride_init", "=", "None", ",", "\n", "res2_out_channels", "=", "256", ",", "\n", "dilation", "=", "1", "\n", ")", ":", "\n", "        ", "super", "(", "ResNetHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "stage2_relative_factor", "=", "2", "**", "(", "stages", "[", "0", "]", ".", "index", "-", "1", ")", "\n", "stage2_bottleneck_channels", "=", "num_groups", "*", "width_per_group", "\n", "out_channels", "=", "res2_out_channels", "*", "stage2_relative_factor", "\n", "in_channels", "=", "out_channels", "//", "2", "\n", "bottleneck_channels", "=", "stage2_bottleneck_channels", "*", "stage2_relative_factor", "\n", "\n", "self", ".", "stages", "=", "[", "]", "\n", "stride", "=", "stride_init", "\n", "for", "stage", "in", "stages", ":", "\n", "            ", "name", "=", "\"layer\"", "+", "str", "(", "stage", ".", "index", ")", "\n", "if", "not", "stride", ":", "\n", "                ", "stride", "=", "int", "(", "stage", ".", "index", ">", "1", ")", "+", "1", "\n", "", "module", "=", "_make_stage", "(", "\n", "BottleneckWithFixedBatchNorm", ",", "\n", "in_channels", ",", "\n", "bottleneck_channels", ",", "\n", "out_channels", ",", "\n", "stage", ".", "block_count", ",", "\n", "num_groups", ",", "\n", "stride_in_1x1", ",", "\n", "first_stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", ")", "\n", "stride", "=", "None", "\n", "self", ".", "add_module", "(", "name", ",", "module", ")", "\n", "self", ".", "stages", ".", "append", "(", "name", ")", "\n", "", "self", ".", "out_channels", "=", "out_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.backbone.resnet.ResNetHead.forward": [[158, 162], ["getattr"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "stage", "in", "self", ".", "stages", ":", "\n", "            ", "x", "=", "getattr", "(", "self", ",", "stage", ")", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.backbone.resnet.Bottleneck.__init__": [[195, 261], ["torch.nn.Module.__init__", "stemseg.modeling.backbone.make_layers.Conv2d", "norm_func", "stemseg.modeling.backbone.make_layers.Conv2d", "torch.nn.init.kaiming_uniform_", "norm_func", "stemseg.modeling.backbone.make_layers.Conv2d", "norm_func", "torch.nn.Sequential", "torch.nn.init.kaiming_uniform_", "stemseg.modeling.backbone.make_layers.Conv2d", "norm_func", "modules.modules", "isinstance", "torch.nn.init.kaiming_uniform_"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "bottleneck_channels", ",", "\n", "out_channels", ",", "\n", "num_groups", ",", "\n", "stride_in_1x1", ",", "\n", "stride", ",", "\n", "dilation", ",", "\n", "norm_func", "\n", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "downsample", "=", "None", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n", "            ", "down_stride", "=", "stride", "if", "dilation", "==", "1", "else", "1", "\n", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "Conv2d", "(", "\n", "in_channels", ",", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "down_stride", ",", "bias", "=", "False", "\n", ")", ",", "\n", "norm_func", "(", "out_channels", ")", ",", "\n", ")", "\n", "for", "modules", "in", "[", "self", ".", "downsample", ",", "]", ":", "\n", "                ", "for", "l", "in", "modules", ".", "modules", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "l", ",", "Conv2d", ")", ":", "\n", "                        ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "l", ".", "weight", ",", "a", "=", "1", ")", "\n", "\n", "", "", "", "", "if", "dilation", ">", "1", ":", "\n", "            ", "stride", "=", "1", "# reset to be 1", "\n", "\n", "# The original MSRA ResNet models have stride in the first 1x1 conv", "\n", "# The subsequent fb.torch.resnet and Caffe2 ResNe[X]t implementations have", "\n", "# stride in the 3x3 conv", "\n", "", "stride_1x1", ",", "stride_3x3", "=", "(", "stride", ",", "1", ")", "if", "stride_in_1x1", "else", "(", "1", ",", "stride", ")", "\n", "\n", "self", ".", "conv1", "=", "Conv2d", "(", "\n", "in_channels", ",", "\n", "bottleneck_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride_1x1", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "self", ".", "bn1", "=", "norm_func", "(", "bottleneck_channels", ")", "\n", "\n", "self", ".", "conv2", "=", "Conv2d", "(", "\n", "bottleneck_channels", ",", "\n", "bottleneck_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride_3x3", ",", "\n", "padding", "=", "dilation", ",", "\n", "bias", "=", "False", ",", "\n", "groups", "=", "num_groups", ",", "\n", "dilation", "=", "dilation", "\n", ")", "\n", "nn", ".", "init", ".", "kaiming_uniform_", "(", "self", ".", "conv2", ".", "weight", ",", "a", "=", "1", ")", "\n", "\n", "self", ".", "bn2", "=", "norm_func", "(", "bottleneck_channels", ")", "\n", "\n", "self", ".", "conv3", "=", "Conv2d", "(", "\n", "bottleneck_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn3", "=", "norm_func", "(", "out_channels", ")", "\n", "\n", "for", "l", "in", "[", "self", ".", "conv1", ",", "self", ".", "conv3", ",", "]", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "l", ".", "weight", ",", "a", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.backbone.resnet.Bottleneck.forward": [[262, 283], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "torch.relu_", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "torch.relu_", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "torch.relu_", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "F", ".", "relu_", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "F", ".", "relu_", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "F", ".", "relu_", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.backbone.resnet.BaseStem.__init__": [[286, 298], ["torch.nn.Module.__init__", "stemseg.modeling.backbone.make_layers.Conv2d", "norm_func", "torch.nn.init.kaiming_uniform_"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "norm_func", ")", ":", "\n", "        ", "super", "(", "BaseStem", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "out_channels", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "STEM_OUT_CHANNELS", "\n", "\n", "self", ".", "conv1", "=", "Conv2d", "(", "\n", "3", ",", "out_channels", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn1", "=", "norm_func", "(", "out_channels", ")", "\n", "\n", "for", "l", "in", "[", "self", ".", "conv1", ",", "]", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "l", ".", "weight", ",", "a", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.backbone.resnet.BaseStem.forward": [[299, 305], ["resnet.BaseStem.conv1", "resnet.BaseStem.bn1", "torch.relu_", "torch.max_pool2d"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu_", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.backbone.resnet.BottleneckWithFixedBatchNorm.__init__": [[308, 327], ["resnet.Bottleneck.__init__"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "bottleneck_channels", ",", "\n", "out_channels", ",", "\n", "num_groups", "=", "1", ",", "\n", "stride_in_1x1", "=", "True", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", "\n", ")", ":", "\n", "        ", "super", "(", "BottleneckWithFixedBatchNorm", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "bottleneck_channels", "=", "bottleneck_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "num_groups", "=", "num_groups", ",", "\n", "stride_in_1x1", "=", "stride_in_1x1", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "norm_func", "=", "FrozenBatchNorm2d", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.backbone.resnet.StemWithFixedBatchNorm.__init__": [[331, 334], ["resnet.BaseStem.__init__"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "StemWithFixedBatchNorm", ",", "self", ")", ".", "__init__", "(", "\n", "cfg", ",", "norm_func", "=", "FrozenBatchNorm2d", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.backbone.resnet._make_stage": [[164, 192], ["range", "torch.nn.Sequential", "blocks.append", "transformation_module"], "function", ["None"], ["", "", "def", "_make_stage", "(", "\n", "transformation_module", ",", "\n", "in_channels", ",", "\n", "bottleneck_channels", ",", "\n", "out_channels", ",", "\n", "block_count", ",", "\n", "num_groups", ",", "\n", "stride_in_1x1", ",", "\n", "first_stride", ",", "\n", "dilation", "=", "1", "\n", ")", ":", "\n", "    ", "blocks", "=", "[", "]", "\n", "stride", "=", "first_stride", "\n", "for", "_", "in", "range", "(", "block_count", ")", ":", "\n", "        ", "blocks", ".", "append", "(", "\n", "transformation_module", "(", "\n", "in_channels", ",", "\n", "bottleneck_channels", ",", "\n", "out_channels", ",", "\n", "num_groups", ",", "\n", "stride_in_1x1", ",", "\n", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", ")", "\n", ")", "\n", "stride", "=", "1", "\n", "in_channels", "=", "out_channels", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "blocks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.backbone.backbone.build_resnet_fpn_backbone": [[13, 33], ["stemseg.modeling.backbone.resnet.ResNet", "stemseg.modeling.backbone.fpn.FPN", "torch.nn.Sequential", "collections.OrderedDict", "stemseg.modeling.backbone.make_layers.conv_with_kaiming_uniform"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.backbone.make_layers.conv_with_kaiming_uniform"], ["def", "build_resnet_fpn_backbone", "(", "cfg", ")", ":", "\n", "    ", "body", "=", "resnet", ".", "ResNet", "(", "cfg", ")", "\n", "in_channels_stage2", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "RES2_OUT_CHANNELS", "\n", "out_channels", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "BACKBONE_OUT_CHANNELS", "\n", "fpn", "=", "fpn_module", ".", "FPN", "(", "\n", "in_channels_list", "=", "[", "\n", "in_channels_stage2", ",", "\n", "in_channels_stage2", "*", "2", ",", "\n", "in_channels_stage2", "*", "4", ",", "\n", "in_channels_stage2", "*", "8", ",", "\n", "]", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "conv_block", "=", "conv_with_kaiming_uniform", "(", "\n", "cfg", ".", "MODEL", ".", "FPN", ".", "USE_GN", ",", "cfg", ".", "MODEL", ".", "FPN", ".", "USE_RELU", "\n", ")", ",", "\n", ")", "\n", "model", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "\"body\"", ",", "body", ")", ",", "(", "\"fpn\"", ",", "fpn", ")", "]", ")", ")", "\n", "model", ".", "out_channels", "=", "out_channels", "\n", "model", ".", "is_3d", "=", "False", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.backbone.make_layers._NewEmptyTensorOp.forward": [[10, 14], ["x.new_empty"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "new_shape", ")", ":", "\n", "        ", "ctx", ".", "shape", "=", "x", ".", "shape", "\n", "return", "x", ".", "new_empty", "(", "new_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.backbone.make_layers._NewEmptyTensorOp.backward": [[15, 19], ["_NewEmptyTensorOp.apply"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad", ")", ":", "\n", "        ", "shape", "=", "ctx", ".", "shape", "\n", "return", "_NewEmptyTensorOp", ".", "apply", "(", "grad", ",", "shape", ")", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.backbone.make_layers.Conv2d.forward": [[22, 35], ["_NewEmptyTensorOp.apply", "x.numel", "super().forward", "zip"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses.embedding_loss.EmbeddingLoss.forward"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", ".", "numel", "(", ")", ">", "0", ":", "\n", "            ", "return", "super", "(", "Conv2d", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "# get output shape", "\n", "\n", "", "output_shape", "=", "[", "\n", "(", "i", "+", "2", "*", "p", "-", "(", "di", "*", "(", "k", "-", "1", ")", "+", "1", ")", ")", "//", "d", "+", "1", "\n", "for", "i", ",", "p", ",", "di", ",", "k", ",", "d", "in", "zip", "(", "\n", "x", ".", "shape", "[", "-", "2", ":", "]", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", "\n", ")", "\n", "]", "\n", "output_shape", "=", "[", "x", ".", "shape", "[", "0", "]", ",", "self", ".", "weight", ".", "shape", "[", "0", "]", "]", "+", "output_shape", "\n", "return", "_NewEmptyTensorOp", ".", "apply", "(", "x", ",", "output_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.backbone.make_layers.FrozenBatchNorm2d.__init__": [[43, 50], ["torch.nn.Module.__init__", "make_layers.FrozenBatchNorm2d.register_buffer", "make_layers.FrozenBatchNorm2d.register_buffer", "make_layers.FrozenBatchNorm2d.register_buffer", "make_layers.FrozenBatchNorm2d.register_buffer", "torch.ones", "torch.zeros", "torch.zeros", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "n", ",", "epsilon", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "FrozenBatchNorm2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "\"weight\"", ",", "torch", ".", "ones", "(", "n", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"bias\"", ",", "torch", ".", "zeros", "(", "n", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"running_mean\"", ",", "torch", ".", "zeros", "(", "n", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"running_var\"", ",", "torch", ".", "ones", "(", "n", ")", ")", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.backbone.make_layers.FrozenBatchNorm2d.forward": [[51, 64], ["scale.reshape.reshape.reshape", "bias.reshape.reshape.reshape", "make_layers.FrozenBatchNorm2d.weight.half", "make_layers.FrozenBatchNorm2d.bias.half", "make_layers.FrozenBatchNorm2d.running_mean.half", "make_layers.FrozenBatchNorm2d.running_var.half"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Cast all fixed parameters to half() if necessary", "\n", "        ", "if", "x", ".", "dtype", "==", "torch", ".", "float16", ":", "\n", "            ", "self", ".", "weight", "=", "self", ".", "weight", ".", "half", "(", ")", "\n", "self", ".", "bias", "=", "self", ".", "bias", ".", "half", "(", ")", "\n", "self", ".", "running_mean", "=", "self", ".", "running_mean", ".", "half", "(", ")", "\n", "self", ".", "running_var", "=", "self", ".", "running_var", ".", "half", "(", ")", "\n", "\n", "", "scale", "=", "self", ".", "weight", "*", "(", "self", ".", "running_var", "+", "self", ".", "epsilon", ")", ".", "rsqrt", "(", ")", "\n", "bias", "=", "self", ".", "bias", "-", "self", ".", "running_mean", "*", "scale", "\n", "scale", "=", "scale", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "bias", "=", "bias", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "return", "x", "*", "scale", "+", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.backbone.make_layers.conv_with_kaiming_uniform": [[66, 94], ["make_layers.Conv2d", "torch.nn.init.kaiming_uniform_", "torch.nn.init.constant_", "module.append", "module.append", "len", "torch.nn.Sequential", "group_norm", "torch.nn.ReLU"], "function", ["None"], ["", "", "def", "conv_with_kaiming_uniform", "(", "use_gn", "=", "False", ",", "use_relu", "=", "False", ")", ":", "\n", "    ", "def", "make_conv", "(", "\n", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "dilation", "=", "1", "\n", ")", ":", "\n", "        ", "conv", "=", "Conv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", "*", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", "if", "use_gn", "else", "True", "\n", ")", "\n", "# Caffe2 implementation uses XavierFill, which in fact", "\n", "# corresponds to kaiming_uniform_ in PyTorch", "\n", "nn", ".", "init", ".", "kaiming_uniform_", "(", "conv", ".", "weight", ",", "a", "=", "1", ")", "\n", "if", "not", "use_gn", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "conv", ".", "bias", ",", "0", ")", "\n", "", "module", "=", "[", "conv", ",", "]", "\n", "if", "use_gn", ":", "\n", "            ", "module", ".", "append", "(", "group_norm", "(", "out_channels", ")", ")", "\n", "", "if", "use_relu", ":", "\n", "            ", "module", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "if", "len", "(", "module", ")", ">", "1", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", "*", "module", ")", "\n", "", "return", "conv", "\n", "\n", "", "return", "make_conv", "\n", "", ""]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.LovaszHingeLoss.__init__": [[21, 23], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.LovaszHingeLoss.forward": [[24, 36], ["_lovasz.lovasz_hinge_flat", "logits.ndimension", "labels.ndimension"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.lovasz_hinge_flat"], ["", "def", "forward", "(", "self", ",", "logits", ",", "labels", ")", ":", "\n", "        ", "\"\"\"\n        :param logits: tensor(N)\n        :param labels: tensor(N)\n        :return:\n        \"\"\"", "\n", "assert", "logits", ".", "shape", "==", "labels", ".", "shape", ",", "\"Logits and labels have mismatching shapes: {} and {}\"", ".", "format", "(", "\n", "logits", ".", "shape", ",", "labels", ".", "shape", ")", "\n", "assert", "logits", ".", "ndimension", "(", ")", "==", "1", ",", "\"Logits should be a 1-D tensor but has {} dimensions\"", ".", "format", "(", "\n", "labels", ".", "ndimension", "(", ")", ")", "\n", "\n", "return", "lovasz_hinge_flat", "(", "logits", ",", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.LovaszSoftmaxLoss.__init__": [[39, 41], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.LovaszSoftmaxLoss.forward": [[42, 49], ["_lovasz.lovasz_softmax_flat"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.lovasz_softmax_flat"], ["", "def", "forward", "(", "self", ",", "probs", ",", "labels", ")", ":", "\n", "        ", "\"\"\"\n        :param probs: tensor(N, C)\n        :param labels: tensor(C) of ints with values in set {0, ..., C-1}\n        :return:\n        \"\"\"", "\n", "return", "lovasz_softmax_flat", "(", "probs", ",", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.StableBCELoss.__init__": [[166, 168], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "StableBCELoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.StableBCELoss.forward": [[169, 173], ["loss.mean", "input.abs", "input.clamp", "neg_abs.exp"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.mean"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "neg_abs", "=", "-", "input", ".", "abs", "(", ")", "\n", "loss", "=", "input", ".", "clamp", "(", "min", "=", "0", ")", "-", "input", "*", "target", "+", "(", "1", "+", "neg_abs", ".", "exp", "(", ")", ")", ".", "log", "(", ")", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.lovasz_grad": [[51, 64], ["len", "gt_sorted.sum", "gt_sorted.sum.float", "gt_sorted.float().cumsum", "gt_sorted.sum.float", "gt_sorted.float"], "function", ["None"], ["", "", "def", "lovasz_grad", "(", "gt_sorted", ")", ":", "\n", "    ", "\"\"\"\n    Computes gradient of the Lovasz extension w.r.t sorted errors\n    See Alg. 1 in paper\n    \"\"\"", "\n", "p", "=", "len", "(", "gt_sorted", ")", "\n", "gts", "=", "gt_sorted", ".", "sum", "(", ")", "\n", "intersection", "=", "gts", ".", "float", "(", ")", "-", "gt_sorted", ".", "float", "(", ")", ".", "cumsum", "(", "0", ")", "\n", "union", "=", "gts", ".", "float", "(", ")", "+", "(", "1", "-", "gt_sorted", ")", ".", "float", "(", ")", ".", "cumsum", "(", "0", ")", "\n", "jaccard", "=", "1.", "-", "intersection", "/", "union", "\n", "if", "p", ">", "1", ":", "# cover 1-pixel case", "\n", "        ", "jaccard", "[", "1", ":", "p", "]", "=", "jaccard", "[", "1", ":", "p", "]", "-", "jaccard", "[", "0", ":", "-", "1", "]", "\n", "", "return", "jaccard", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.iou_binary": [[66, 84], ["zip", "_lovasz.mean", "ious.append", "float"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.mean"], ["", "def", "iou_binary", "(", "preds", ",", "labels", ",", "EMPTY", "=", "1.", ",", "ignore", "=", "None", ",", "per_image", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    IoU for foreground class\n    binary: 1 foreground, 0 background\n    \"\"\"", "\n", "if", "not", "per_image", ":", "\n", "        ", "preds", ",", "labels", "=", "(", "preds", ",", ")", ",", "(", "labels", ",", ")", "\n", "", "ious", "=", "[", "]", "\n", "for", "pred", ",", "label", "in", "zip", "(", "preds", ",", "labels", ")", ":", "\n", "        ", "intersection", "=", "(", "(", "label", "==", "1", ")", "&", "(", "pred", "==", "1", ")", ")", ".", "sum", "(", ")", "\n", "union", "=", "(", "(", "label", "==", "1", ")", "|", "(", "(", "pred", "==", "1", ")", "&", "(", "label", "!=", "ignore", ")", ")", ")", ".", "sum", "(", ")", "\n", "if", "not", "union", ":", "\n", "            ", "iou", "=", "EMPTY", "\n", "", "else", ":", "\n", "            ", "iou", "=", "float", "(", "intersection", ")", "/", "union", "\n", "", "ious", ".", "append", "(", "iou", ")", "\n", "", "iou", "=", "mean", "(", "ious", ")", "# mean accross images if per_image", "\n", "return", "100", "*", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.iou": [[86, 108], ["zip", "map", "range", "map.append", "zip", "numpy.array", "iou.append", "iou.append", "float"], "function", ["None"], ["", "def", "iou", "(", "preds", ",", "labels", ",", "C", ",", "EMPTY", "=", "1.", ",", "ignore", "=", "None", ",", "per_image", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Array of IoU for each (non ignored) class\n    \"\"\"", "\n", "if", "not", "per_image", ":", "\n", "        ", "preds", ",", "labels", "=", "(", "preds", ",", ")", ",", "(", "labels", ",", ")", "\n", "", "ious", "=", "[", "]", "\n", "for", "pred", ",", "label", "in", "zip", "(", "preds", ",", "labels", ")", ":", "\n", "        ", "iou", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "C", ")", ":", "\n", "# The ignored label is sometimes among predicted classes (ENet - CityScapes)", "\n", "            ", "if", "i", "!=", "ignore", ":", "\n", "                ", "intersection", "=", "(", "(", "label", "==", "i", ")", "&", "(", "pred", "==", "i", ")", ")", ".", "sum", "(", ")", "\n", "union", "=", "(", "(", "label", "==", "i", ")", "|", "(", "\n", "(", "pred", "==", "i", ")", "&", "(", "label", "!=", "ignore", ")", ")", ")", ".", "sum", "(", ")", "\n", "if", "not", "union", ":", "\n", "                    ", "iou", ".", "append", "(", "EMPTY", ")", "\n", "", "else", ":", "\n", "                    ", "iou", ".", "append", "(", "float", "(", "intersection", ")", "/", "union", ")", "\n", "", "", "", "ious", ".", "append", "(", "iou", ")", "\n", "", "ious", "=", "map", "(", "mean", ",", "zip", "(", "*", "ious", ")", ")", "# mean accross images if per_image", "\n", "return", "100", "*", "np", ".", "array", "(", "ious", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.lovasz_hinge": [[113, 128], ["_lovasz.mean", "_lovasz.lovasz_hinge_flat", "_lovasz.lovasz_hinge_flat", "_lovasz.flatten_binary_scores", "zip", "_lovasz.flatten_binary_scores", "log.unsqueeze", "lab.unsqueeze"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.mean", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.lovasz_hinge_flat", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.lovasz_hinge_flat", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.flatten_binary_scores", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.flatten_binary_scores"], ["", "def", "lovasz_hinge", "(", "logits", ",", "labels", ",", "per_image", "=", "True", ",", "ignore", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Binary Lovasz hinge loss\n      logits: [B, H, W] Variable, logits at each pixel (between -\\infty and +\\infty)\n      labels: [B, H, W] Tensor, binary ground truth masks (0 or 1)\n      per_image: compute the loss per image instead of per batch\n      ignore: void class id\n    \"\"\"", "\n", "if", "per_image", ":", "\n", "        ", "loss", "=", "mean", "(", "lovasz_hinge_flat", "(", "*", "flatten_binary_scores", "(", "log", ".", "unsqueeze", "(", "0", ")", ",", "lab", ".", "unsqueeze", "(", "0", ")", ",", "ignore", ")", ")", "\n", "for", "log", ",", "lab", "in", "zip", "(", "logits", ",", "labels", ")", ")", "\n", "", "else", ":", "\n", "        ", "loss", "=", "lovasz_hinge_flat", "(", "\n", "*", "flatten_binary_scores", "(", "logits", ",", "labels", ",", "ignore", ")", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.lovasz_hinge_flat": [[130, 148], ["torch.sort", "torch.sort", "torch.sort", "_lovasz.lovasz_grad", "torch.dot", "torch.dot", "torch.dot", "len", "torch.relu", "torch.autograd.Variable", "logits.sum", "labels.float", "torch.autograd.Variable"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.lovasz_grad"], ["", "def", "lovasz_hinge_flat", "(", "logits", ",", "labels", ")", ":", "\n", "    ", "\"\"\"\n    Binary Lovasz hinge loss\n      logits: [P] Variable, logits at each prediction (between -\\infty and +\\infty)\n      labels: [P] Tensor, binary ground truth labels (0 or 1)\n      ignore: label to ignore\n    \"\"\"", "\n", "if", "len", "(", "labels", ")", "==", "0", ":", "\n", "# only void pixels, the gradients should be 0", "\n", "        ", "return", "logits", ".", "sum", "(", ")", "*", "0.", "\n", "", "signs", "=", "2.", "*", "labels", ".", "float", "(", ")", "-", "1.", "\n", "errors", "=", "(", "1.", "-", "logits", "*", "Variable", "(", "signs", ")", ")", "\n", "errors_sorted", ",", "perm", "=", "torch", ".", "sort", "(", "errors", ",", "dim", "=", "0", ",", "descending", "=", "True", ")", "\n", "perm", "=", "perm", ".", "data", "\n", "gt_sorted", "=", "labels", "[", "perm", "]", "\n", "grad", "=", "lovasz_grad", "(", "gt_sorted", ")", "\n", "loss", "=", "torch", ".", "dot", "(", "F", ".", "relu", "(", "errors_sorted", ")", ",", "Variable", "(", "grad", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.flatten_binary_scores": [[150, 163], ["scores.view.view", "labels.view.view"], "function", ["None"], ["", "def", "flatten_binary_scores", "(", "scores", ",", "labels", ",", "ignore", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Flattens predictions in the batch (binary case)\n    Remove labels equal to 'ignore'\n    \"\"\"", "\n", "scores", "=", "scores", ".", "view", "(", "-", "1", ")", "\n", "labels", "=", "labels", ".", "view", "(", "-", "1", ")", "\n", "if", "ignore", "is", "None", ":", "\n", "        ", "return", "scores", ",", "labels", "\n", "", "valid", "=", "(", "labels", "!=", "ignore", ")", "\n", "vscores", "=", "scores", "[", "valid", "]", "\n", "vlabels", "=", "labels", "[", "valid", "]", "\n", "return", "vscores", ",", "vlabels", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.binary_xloss": [[175, 185], ["_lovasz.flatten_binary_scores", "_lovasz.StableBCELoss", "torch.autograd.Variable", "labels.float"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.flatten_binary_scores"], ["", "", "def", "binary_xloss", "(", "logits", ",", "labels", ",", "ignore", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Binary Cross entropy loss\n      logits: [B, H, W] Variable, logits at each pixel (between -\\infty and +\\infty)\n      labels: [B, H, W] Tensor, binary ground truth masks (0 or 1)\n      ignore: void class id\n    \"\"\"", "\n", "logits", ",", "labels", "=", "flatten_binary_scores", "(", "logits", ",", "labels", ",", "ignore", ")", "\n", "loss", "=", "StableBCELoss", "(", ")", "(", "logits", ",", "Variable", "(", "labels", ".", "float", "(", ")", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.lovasz_softmax": [[190, 206], ["_lovasz.mean", "_lovasz.lovasz_softmax_flat", "_lovasz.lovasz_softmax_flat", "_lovasz.flatten_probas", "zip", "_lovasz.flatten_probas", "prob.unsqueeze", "lab.unsqueeze"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.mean", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.lovasz_softmax_flat", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.lovasz_softmax_flat", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.flatten_probas", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.flatten_probas"], ["", "def", "lovasz_softmax", "(", "probas", ",", "labels", ",", "only_present", "=", "False", ",", "per_image", "=", "False", ",", "ignore", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Multi-class Lovasz-Softmax loss\n      probas: [B, C, H, W] Variable, class probabilities at each prediction (between 0 and 1)\n      labels: [B, H, W] Tensor, ground truth labels (between 0 and C - 1)\n      only_present: average only on classes present in ground truth\n      per_image: compute the loss per image instead of per batch\n      ignore: void class labels\n    \"\"\"", "\n", "if", "per_image", ":", "\n", "        ", "loss", "=", "mean", "(", "lovasz_softmax_flat", "(", "*", "flatten_probas", "(", "prob", ".", "unsqueeze", "(", "0", ")", ",", "lab", ".", "unsqueeze", "(", "0", ")", ",", "ignore", ")", ",", "only_present", "=", "only_present", ")", "\n", "for", "prob", ",", "lab", "in", "zip", "(", "probas", ",", "labels", ")", ")", "\n", "", "else", ":", "\n", "        ", "loss", "=", "lovasz_softmax_flat", "(", "\n", "*", "flatten_probas", "(", "probas", ",", "labels", ",", "ignore", ")", ",", "only_present", "=", "only_present", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.lovasz_softmax_flat": [[208, 230], ["probas.size", "range", "torch.sort", "torch.sort", "torch.sort", "losses.append", "_lovasz.mean", "torch.dot", "torch.dot", "torch.dot", "fg.sum", "perm.detach", "_lovasz.lovasz_grad"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.mean", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.lovasz_grad"], ["", "def", "lovasz_softmax_flat", "(", "probas", ",", "labels", ",", "only_present", "=", "False", ",", "reduce_mean", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Multi-class Lovasz-Softmax loss\n      probas: [P, C] Variable, class probabilities at each prediction (between 0 and 1)\n      labels: [P] Tensor, ground truth labels (between 0 and C - 1)\n      only_present: average only on classes present in ground truth\n    \"\"\"", "\n", "C", "=", "probas", ".", "size", "(", "1", ")", "\n", "losses", "=", "[", "]", "\n", "for", "c", "in", "range", "(", "C", ")", ":", "\n", "        ", "fg", "=", "(", "labels", "==", "c", ")", ".", "float", "(", ")", "# foreground for class c", "\n", "if", "only_present", "and", "fg", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "errors", "=", "(", "fg", "-", "probas", "[", ":", ",", "c", "]", ")", ".", "abs", "(", ")", "\n", "errors_sorted", ",", "perm", "=", "torch", ".", "sort", "(", "errors", ",", "0", ",", "descending", "=", "True", ")", "\n", "fg_sorted", "=", "fg", "[", "perm", ".", "detach", "(", ")", "]", "\n", "losses", ".", "append", "(", "torch", ".", "dot", "(", "errors_sorted", ",", "lovasz_grad", "(", "fg_sorted", ")", ")", ")", "\n", "\n", "", "if", "reduce_mean", ":", "\n", "        ", "return", "mean", "(", "losses", ")", "\n", "", "else", ":", "\n", "        ", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.flatten_probas": [[232, 246], ["probas.permute().contiguous().view.size", "probas.permute().contiguous().view.permute().contiguous().view", "labels.view.view", "probas.permute().contiguous().view.permute().contiguous", "valid.nonzero().squeeze", "probas.permute().contiguous().view.permute", "valid.nonzero"], "function", ["None"], ["", "", "def", "flatten_probas", "(", "probas", ",", "labels", ",", "ignore", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Flattens predictions in the batch\n    \"\"\"", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "probas", ".", "size", "(", ")", "\n", "probas", "=", "probas", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", "\n", ")", ".", "view", "(", "-", "1", ",", "C", ")", "# B * H * W, C = P, C", "\n", "labels", "=", "labels", ".", "view", "(", "-", "1", ")", "\n", "if", "ignore", "is", "None", ":", "\n", "        ", "return", "probas", ",", "labels", "\n", "", "valid", "=", "(", "labels", "!=", "ignore", ")", "\n", "vprobas", "=", "probas", "[", "valid", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "]", "\n", "vlabels", "=", "labels", "[", "valid", "]", "\n", "return", "vprobas", ",", "vlabels", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.xloss": [[248, 253], ["torch.cross_entropy", "torch.autograd.Variable"], "function", ["None"], ["", "def", "xloss", "(", "logits", ",", "labels", ",", "ignore", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Cross entropy loss\n    \"\"\"", "\n", "return", "F", ".", "cross_entropy", "(", "logits", ",", "Variable", "(", "labels", ")", ",", "ignore_index", "=", "255", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.mean": [[257, 277], ["iter", "enumerate", "ifilterfalse", "next", "ValueError"], "function", ["None"], ["", "def", "mean", "(", "l", ",", "ignore_nan", "=", "False", ",", "empty", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    nanmean compatible with generators.\n    \"\"\"", "\n", "l", "=", "iter", "(", "l", ")", "\n", "if", "ignore_nan", ":", "\n", "        ", "l", "=", "ifilterfalse", "(", "np", ".", "isnan", ",", "l", ")", "\n", "", "try", ":", "\n", "        ", "n", "=", "1", "\n", "acc", "=", "next", "(", "l", ")", "\n", "", "except", "StopIteration", ":", "\n", "        ", "if", "empty", "==", "'raise'", ":", "\n", "            ", "raise", "ValueError", "(", "'Empty mean'", ")", "\n", "", "return", "empty", "\n", "", "for", "n", ",", "v", "in", "enumerate", "(", "l", ",", "2", ")", ":", "\n", "        ", "acc", "+=", "v", "\n", "", "if", "n", "==", "1", ":", "\n", "        ", "return", "acc", "\n", "\n", "", "return", "acc", "/", "n", "\n", "", ""]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses.cross_entropy.CrossEntropyLoss.__init__": [[10, 12], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses.cross_entropy.CrossEntropyLoss.forward": [[13, 49], ["zip", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.cross_entropy.sum", "nonignore_masks_per_seq.sum().detach", "ignore_masks_per_seq.float", "nonignore_masks_per_seq.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "semseg_logits", ",", "targets", ",", "output_dict", ")", ":", "\n", "        ", "\"\"\"\n        Computes the semantic segmentation loss\n        :param semseg_logits: tensor of shape [N, T, cls, H, W]\n        :param targets: list(dict(tensors))\n        :return: scalar loss for semantic segmentation\n        \"\"\"", "\n", "loss", "=", "0.", "\n", "\n", "for", "pred_semseg_logits_per_seq", ",", "targets_per_seq", "in", "zip", "(", "semseg_logits", ",", "targets", ")", ":", "\n", "            ", "gt_semseg_masks_per_seq", "=", "targets_per_seq", "[", "'semseg_masks'", "]", "\n", "ignore_masks_per_seq", "=", "targets_per_seq", "[", "'ignore_masks'", "]", "\n", "\n", "assert", "gt_semseg_masks_per_seq", ".", "shape", "[", "-", "2", ":", "]", "==", "pred_semseg_logits_per_seq", ".", "shape", "[", "-", "2", ":", "]", ",", "\"Shape mismatch between ground truth semseg masks {} and predicted semseg masks {}\"", ".", "format", "(", "\n", "gt_semseg_masks_per_seq", ".", "shape", ",", "pred_semseg_logits_per_seq", ".", "shape", "\n", ")", "\n", "assert", "gt_semseg_masks_per_seq", ".", "shape", "[", "-", "2", ":", "]", "==", "ignore_masks_per_seq", ".", "shape", "[", "-", "2", ":", "]", ",", "\"Shape mismatch between ground truth semseg masks {} and ignore masks {} \"", ".", "format", "(", "\n", "gt_semseg_masks_per_seq", ".", "shape", ",", "ignore_masks_per_seq", ".", "shape", "\n", ")", "\n", "\n", "seq_loss", "=", "F", ".", "cross_entropy", "(", "pred_semseg_logits_per_seq", ",", "gt_semseg_masks_per_seq", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "nonignore_masks_per_seq", "=", "1.", "-", "ignore_masks_per_seq", ".", "float", "(", ")", "\n", "\n", "", "seq_loss", "=", "seq_loss", "*", "nonignore_masks_per_seq", "\n", "seq_loss", "=", "seq_loss", ".", "sum", "(", ")", "/", "nonignore_masks_per_seq", ".", "sum", "(", ")", ".", "detach", "(", ")", "\n", "\n", "loss", "=", "loss", "+", "seq_loss", "\n", "\n", "", "loss", "=", "loss", "/", "len", "(", "targets", ")", "\n", "\n", "output_dict", "[", "ModelOutputConsts", ".", "OTHERS", "]", "[", "LossConsts", ".", "SEMSEG", "]", "=", "loss", "\n", "output_dict", "[", "ModelOutputConsts", ".", "OPTIMIZATION_LOSSES", "]", "[", "LossConsts", ".", "SEMSEG", "]", "=", "loss", "*", "cfg", ".", "TRAINING", ".", "LOSSES", ".", "WEIGHT_SEMSEG", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses.embedding_loss.EmbeddingLoss.__init__": [[11, 34], ["torch.Module.__init__", "stemseg.modeling.losses._lovasz.LovaszHingeLoss", "sum", "k.lower", "len", "len", "embedding_loss.EmbeddingLoss.register_buffer", "kwargs.items", "torch.tensor().float().unsqueeze", "torch.tensor().float().unsqueeze", "torch.tensor().float().unsqueeze", "torch.tensor().float().unsqueeze", "torch.tensor().float().unsqueeze", "torch.tensor().float().unsqueeze", "torch.tensor().float().unsqueeze", "torch.tensor().float().unsqueeze", "torch.tensor().float().unsqueeze", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.__init__", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor"], ["    ", "def", "__init__", "(", "self", ",", "embedding_map_scale", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "kwargs", "=", "{", "k", ".", "lower", "(", ")", ":", "v", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "}", "\n", "\n", "self", ".", "embedding_map_scale", "=", "embedding_map_scale", "\n", "self", ".", "embedding_size", "=", "kwargs", "[", "\"embedding_size\"", "]", "\n", "self", ".", "w_variance_smoothness", "=", "kwargs", "[", "\"weight_variance_smoothness\"", "]", "\n", "self", ".", "w_lovasz", "=", "kwargs", "[", "\"weight_lovasz\"", "]", "\n", "self", ".", "w_regularization", "=", "kwargs", "[", "\"weight_regularization\"", "]", "\n", "self", ".", "w_seediness", "=", "kwargs", "[", "\"weight_seediness\"", "]", "\n", "self", ".", "w", "=", "kwargs", "[", "\"weight\"", "]", "\n", "self", ".", "n_free_dims", "=", "kwargs", "[", "\"nbr_free_dims\"", "]", "\n", "\n", "assert", "len", "(", "kwargs", "[", "\"free_dim_stds\"", "]", ")", "==", "self", ".", "n_free_dims", ",", "\"List of std values {} does not match number of free dims {}\"", ".", "format", "(", "len", "(", "kwargs", "[", "\"free_dim_stds\"", "]", ")", ",", "self", ".", "n_free_dims", ")", "\n", "\n", "if", "self", ".", "n_free_dims", ">", "0", ":", "\n", "            ", "self", ".", "register_buffer", "(", "\"free_dim_bandwidths\"", ",", "1.", "/", "torch", ".", "tensor", "(", "kwargs", "[", "\"free_dim_stds\"", "]", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "0", ")", "**", "2", ")", "# [1, N_FREE_DIMS]", "\n", "\n", "", "self", ".", "lovasz_hinge_loss", "=", "LovaszHingeLoss", "(", ")", "\n", "\n", "self", ".", "split_sizes", "=", "(", "self", ".", "embedding_size", ",", "self", ".", "embedding_size", "-", "self", ".", "n_free_dims", ",", "1", ")", "\n", "self", ".", "num_input_channels", "=", "sum", "(", "self", ".", "split_sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses.embedding_loss.EmbeddingLoss.forward": [[35, 158], ["embedding_map.permute.permute.permute", "embedding_map.permute.permute.split", "torch.tensor().to().requires_grad_", "torch.tensor().to().requires_grad_", "torch.tensor().to().requires_grad_", "torch.tensor().to().requires_grad_", "torch.tensor().to().requires_grad_", "torch.tensor().to().requires_grad_", "torch.tensor().to().requires_grad_", "torch.tensor().to().requires_grad_", "torch.tensor().to().requires_grad_", "enumerate", "zip", "masks.nonzero", "nonzero_mask_pts[].unique", "nonzero_mask_pts[].argsort", "tuple.split", "tuple", "len", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "ignore_masks[].unsqueeze", "range", "print", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "masks.numel", "print", "tuple", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.where().mean", "torch.where().mean", "torch.where().mean", "torch.where().mean", "torch.where().mean", "torch.where().mean", "torch.where().mean", "torch.where().mean", "torch.where().mean", "embedding_loss.EmbeddingLoss.compute_bandwidth_smoothness_loss", "len", "embedding_loss.EmbeddingLoss.compute_prob_map", "masks[].flatten", "[].detach", "bandwidth_map.sum", "seediness_map.sum", "float", "instance_pt_counts.tolist", "range", "range", "range", "bandwidth_per_instance.exp", "masks[].flatten.sum", "embedding_loss.EmbeddingLoss.lovasz_hinge_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "stemseg.utils.distributed.get_rank", "bandwidth_map.sum", "embedding_map.permute.permute.sum", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "nonzero_mask_pts[].unbind", "range", "len", "len", "len", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "logits_map.flatten", "len", "embedding_loss.EmbeddingLoss.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.mean", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.mean", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.mean", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.mean", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.mean", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.mean", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.mean", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.mean", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.mean", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses.embedding_loss.EmbeddingLoss.compute_bandwidth_smoothness_loss", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses.embedding_loss.EmbeddingLoss.compute_prob_map", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.distributed.get_rank", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor"], ["", "def", "forward", "(", "self", ",", "embedding_map", ",", "targets", ",", "output_dict", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Computes the embedding loss.\n        :param embedding_map: Tensor of shape [N, C, T, H, W] (C = embedding dims + variance dims + seediness dims)\n        :param targets: List (length N) of dicts, each containing a 'masks' field containing a tensor of\n        shape (I (instances), T, H, W)\n        :param output_dict: dict to populate with loss values.\n        :return: Scalar loss\n        \"\"\"", "\n", "assert", "embedding_map", ".", "shape", "[", "1", "]", "==", "self", ".", "num_input_channels", ",", "\"Expected {} channels in input tensor, got {}\"", ".", "format", "(", "\n", "self", ".", "num_input_channels", ",", "embedding_map", ".", "shape", "[", "1", "]", ")", "\n", "\n", "embedding_map", "=", "embedding_map", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "4", ",", "1", ")", "# [N, T, H, W, C]", "\n", "\n", "embedding_map", ",", "bandwidth_map", ",", "seediness_map", "=", "embedding_map", ".", "split", "(", "self", ".", "split_sizes", ",", "dim", "=", "-", "1", ")", "\n", "assert", "bandwidth_map", ".", "shape", "[", "-", "1", "]", "+", "self", ".", "n_free_dims", "==", "embedding_map", ".", "shape", "[", "-", "1", "]", ",", "\"Number of predicted bandwidth dims {} + number of free dims {} should equal number of total embedding \"", "\"dims {}\"", ".", "format", "(", "bandwidth_map", ".", "shape", "[", "-", "1", "]", ",", "self", ".", "n_free_dims", ",", "embedding_map", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "total_instances", "=", "0.", "\n", "lovasz_loss", "=", "0.", "\n", "seediness_loss", "=", "0.", "\n", "bandwidth_smoothness_loss", "=", "0.", "\n", "\n", "torch_zero", "=", "torch", ".", "tensor", "(", "0", ")", ".", "to", "(", "embedding_map", ")", ".", "requires_grad_", "(", "False", ")", "\n", "\n", "for", "idx", ",", "(", "embeddings_per_seq", ",", "bandwidth_per_seq", ",", "seediness_per_seq", ",", "targets_per_seq", ")", "in", "enumerate", "(", "zip", "(", "embedding_map", ",", "bandwidth_map", ",", "seediness_map", ",", "targets", ")", ")", ":", "\n", "\n", "            ", "masks", "=", "targets_per_seq", "[", "'masks'", "]", "\n", "if", "masks", ".", "numel", "(", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "ignore_masks", "=", "targets_per_seq", "[", "'ignore_masks'", "]", "\n", "\n", "assert", "masks", ".", "shape", "[", "-", "2", ":", "]", "==", "ignore_masks", ".", "shape", "[", "-", "2", ":", "]", ",", "\"Masks tensor has shape {} while ignore mask has shape {}\"", ".", "format", "(", "masks", ".", "shape", ",", "ignore_masks", ".", "shape", ")", "\n", "\n", "assert", "masks", ".", "shape", "[", "-", "2", ":", "]", "==", "embedding_map", ".", "shape", "[", "2", ":", "4", "]", ",", "\"Masks tensor has shape {} while embedding map has shape {}\"", ".", "format", "(", "masks", ".", "shape", ",", "embedding_map", ".", "shape", ")", "\n", "\n", "nonzero_mask_pts", "=", "masks", ".", "nonzero", "(", "as_tuple", "=", "False", ")", "\n", "if", "nonzero_mask_pts", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                ", "print", "(", "\"[ WARN] No valid mask points exist in sample.\"", ")", "\n", "continue", "\n", "\n", "", "_", ",", "instance_pt_counts", "=", "nonzero_mask_pts", "[", ":", ",", "0", "]", ".", "unique", "(", "sorted", "=", "True", ",", "return_counts", "=", "True", ")", "\n", "instance_id_sort_idx", "=", "nonzero_mask_pts", "[", ":", ",", "0", "]", ".", "argsort", "(", ")", "\n", "nonzero_mask_pts", "=", "nonzero_mask_pts", "[", "instance_id_sort_idx", "]", "\n", "nonzero_mask_pts", "=", "nonzero_mask_pts", ".", "split", "(", "tuple", "(", "instance_pt_counts", ".", "tolist", "(", ")", ")", ")", "\n", "nonzero_mask_pts", "=", "tuple", "(", "[", "nonzero_mask_pts", "[", "i", "]", ".", "unbind", "(", "1", ")", "[", "1", ":", "]", "for", "i", "in", "range", "(", "len", "(", "nonzero_mask_pts", ")", ")", "]", ")", "\n", "\n", "instance_embeddings", "=", "[", "\n", "embeddings_per_seq", "[", "nonzero_mask_pts", "[", "n", "]", "]", "\n", "for", "n", "in", "range", "(", "len", "(", "nonzero_mask_pts", ")", ")", "\n", "]", "# list(tensor[I, E])", "\n", "\n", "instance_bandwidths", "=", "[", "\n", "bandwidth_per_seq", "[", "nonzero_mask_pts", "[", "n", "]", "]", "\n", "for", "n", "in", "range", "(", "len", "(", "nonzero_mask_pts", ")", ")", "\n", "]", "# list(tensor[I, E])", "\n", "\n", "instance_seediness", "=", "[", "\n", "seediness_per_seq", "[", "nonzero_mask_pts", "[", "n", "]", "]", "\n", "for", "n", "in", "range", "(", "len", "(", "nonzero_mask_pts", ")", ")", "\n", "]", "# list(tensor[I, E])", "\n", "\n", "total_instances", "+=", "len", "(", "nonzero_mask_pts", ")", "\n", "\n", "# regress seediness values for background to 0", "\n", "bg_mask_pts", "=", "(", "masks", "==", "0", ")", ".", "all", "(", "0", ")", ".", "nonzero", "(", "as_tuple", "=", "False", ")", ".", "unbind", "(", "1", ")", "\n", "bg_seediness_pts", "=", "seediness_per_seq", "[", "bg_mask_pts", "]", "\n", "bg_seediness_loss", "=", "F", ".", "mse_loss", "(", "bg_seediness_pts", ",", "torch", ".", "zeros_like", "(", "bg_seediness_pts", ")", ",", "reduction", "=", "'none'", ")", "\n", "\n", "# ignore loss for ignore mask points", "\n", "ignore_mask_pts", "=", "ignore_masks", "[", "bg_mask_pts", "]", ".", "unsqueeze", "(", "1", ")", "\n", "seediness_loss", "=", "seediness_loss", "+", "torch", ".", "where", "(", "ignore_mask_pts", ",", "torch_zero", ",", "bg_seediness_loss", ")", ".", "mean", "(", ")", "\n", "\n", "# compute bandwidth smoothness loss before applying activation", "\n", "bandwidth_smoothness_loss", "=", "bandwidth_smoothness_loss", "+", "self", ".", "compute_bandwidth_smoothness_loss", "(", "instance_bandwidths", ")", "\n", "\n", "# apply activation to bandwidths", "\n", "instance_bandwidths", "=", "[", "\n", "bandwidth_per_instance", ".", "exp", "(", ")", "*", "10.", "\n", "for", "bandwidth_per_instance", "in", "instance_bandwidths", "\n", "]", "\n", "\n", "for", "n", "in", "range", "(", "len", "(", "nonzero_mask_pts", ")", ")", ":", "# iterate over instances", "\n", "                ", "probs_map", "=", "self", ".", "compute_prob_map", "(", "embeddings_per_seq", ",", "instance_embeddings", "[", "n", "]", ",", "instance_bandwidths", "[", "n", "]", ")", "\n", "logits_map", "=", "(", "probs_map", "*", "2.", ")", "-", "1.", "\n", "instance_target", "=", "masks", "[", "n", "]", ".", "flatten", "(", ")", "\n", "if", "instance_target", ".", "sum", "(", "dtype", "=", "torch", ".", "long", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "\n", "", "lovasz_loss", "=", "lovasz_loss", "+", "self", ".", "lovasz_hinge_loss", "(", "logits_map", ".", "flatten", "(", ")", ",", "instance_target", ")", "\n", "instance_probs", "=", "probs_map", ".", "unsqueeze", "(", "3", ")", "[", "nonzero_mask_pts", "[", "n", "]", "]", ".", "detach", "(", ")", "\n", "seediness_loss", "=", "seediness_loss", "+", "F", ".", "mse_loss", "(", "instance_seediness", "[", "n", "]", ",", "instance_probs", ",", "reduction", "=", "'mean'", ")", "\n", "\n", "", "", "if", "total_instances", "==", "0", ":", "\n", "            ", "print", "(", "\"Process {}: Zero instances case occurred embedding loss\"", ".", "format", "(", "dist_utils", ".", "get_rank", "(", ")", ")", ")", "\n", "lovasz_loss", "=", "(", "bandwidth_map", ".", "sum", "(", ")", "+", "embedding_map", ".", "sum", "(", ")", ")", "*", "0", "\n", "bandwidth_smoothness_loss", "=", "bandwidth_map", ".", "sum", "(", ")", "*", "0", "\n", "seediness_loss", "=", "seediness_map", ".", "sum", "(", ")", "*", "0", "\n", "", "else", ":", "\n", "# compute weighted sum of lovasz and variance losses based on number of instances per batch sample", "\n", "            ", "lovasz_loss", "=", "lovasz_loss", "/", "total_instances", "\n", "bandwidth_smoothness_loss", "=", "bandwidth_smoothness_loss", "/", "embedding_map", ".", "shape", "[", "0", "]", "# divide by batch size", "\n", "seediness_loss", "=", "seediness_loss", "/", "float", "(", "total_instances", "+", "1", ")", "\n", "\n", "", "total_loss", "=", "(", "lovasz_loss", "*", "self", ".", "w_lovasz", ")", "+", "(", "bandwidth_smoothness_loss", "*", "self", ".", "w_variance_smoothness", ")", "+", "(", "seediness_loss", "*", "self", ".", "w_seediness", ")", "\n", "\n", "output_dict", "[", "ModelOutputConsts", ".", "OPTIMIZATION_LOSSES", "]", "=", "{", "\n", "LossConsts", ".", "EMBEDDING", ":", "total_loss", "*", "self", ".", "w", "\n", "}", "\n", "\n", "output_dict", "[", "ModelOutputConsts", ".", "OTHERS", "]", "=", "{", "\n", "LossConsts", ".", "LOVASZ_LOSS", ":", "lovasz_loss", ",", "\n", "LossConsts", ".", "VARIANCE_SMOOTHNESS", ":", "bandwidth_smoothness_loss", ",", "\n", "}", "\n", "\n", "output_dict", "[", "ModelOutputConsts", ".", "OTHERS", "]", "[", "LossConsts", ".", "SEEDINESS_LOSS", "]", "=", "seediness_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses.embedding_loss.EmbeddingLoss.compute_prob_map": [[159, 179], ["instance_bandwidth.mean", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "instance_embeddings.mean", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.mean", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.mean"], ["", "def", "compute_prob_map", "(", "self", ",", "embedding_map", ",", "instance_embeddings", ",", "instance_bandwidth", ")", ":", "\n", "        ", "\"\"\"\n        Compute the fg/bg probability per instance\n        :param embedding_map: tensor(T, H, W, E)\n        :param instance_embeddings: tensor(N, E)\n        :param instance_bandwidth: tensor(N, E - N_FREE_DIMS)\n        :return: tensor(T, H, W)\n        \"\"\"", "\n", "embedding_center", "=", "instance_embeddings", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "[", "None", ",", "None", ",", ":", "]", "\n", "mean_bandwidth", "=", "instance_bandwidth", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "# [1, E - N_FREE_DIMS]", "\n", "\n", "if", "self", ".", "n_free_dims", ">", "0", ":", "\n", "            ", "mean_bandwidth", "=", "torch", ".", "cat", "(", "(", "mean_bandwidth", ",", "self", ".", "free_dim_bandwidths", ")", ",", "1", ")", "\n", "\n", "", "mean_bandwidth", "=", "mean_bandwidth", "[", "None", ",", "None", ",", ":", "]", "\n", "\n", "probs", "=", "torch", ".", "exp", "(", "-", "0.5", "*", "torch", ".", "sum", "(", "\n", "torch", ".", "pow", "(", "embedding_map", "-", "embedding_center", ",", "2", ")", "*", "mean_bandwidth", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n", "return", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses.embedding_loss.EmbeddingLoss.compute_bandwidth_smoothness_loss": [[180, 186], ["bandwidths_per_instance.mean", "torch.pow().mean", "torch.pow().mean", "torch.pow().mean", "torch.pow().mean", "torch.pow().mean", "torch.pow().mean", "torch.pow().mean", "torch.pow().mean", "torch.pow().mean", "float", "len", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.mean", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.mean", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.mean", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.mean", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.mean", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.mean", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.mean", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.mean", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.mean", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.losses._lovasz.mean"], ["", "def", "compute_bandwidth_smoothness_loss", "(", "self", ",", "bandwidths", ")", ":", "\n", "        ", "loss", "=", "0.", "\n", "for", "bandwidths_per_instance", "in", "bandwidths", ":", "\n", "            ", "mean_bandwidth", "=", "bandwidths_per_instance", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "loss", "+=", "torch", ".", "pow", "(", "mean_bandwidth", "-", "bandwidths_per_instance", ",", "2", ")", ".", "mean", "(", ")", "\n", "", "return", "loss", "/", "float", "(", "len", "(", "bandwidths", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.image_list.ImageList.__init__": [[9, 18], ["stemseg.utils.transforms.Compose", "stemseg.utils.transforms.ReverseNormalize", "stemseg.utils.transforms.Identity", "stemseg.utils.transforms.ReverseColorChannels"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "images_tensor", ",", "image_sizes", ",", "original_image_sizes", "=", "None", ")", ":", "\n", "        ", "self", ".", "tensors", "=", "images_tensor", "# [N, T, C, H, W]", "\n", "self", ".", "image_sizes", "=", "image_sizes", "# (H, W)", "\n", "self", ".", "original_image_sizes", "=", "original_image_sizes", "# (W, H)", "\n", "\n", "norm_factor", "=", "255.0", "if", "cfg", ".", "INPUT", ".", "NORMALIZE_TO_UNIT_SCALE", "else", "1.0", "\n", "self", ".", "__reverse_preprocessing", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "ReverseNormalize", "(", "norm_factor", ",", "cfg", ".", "INPUT", ".", "IMAGE_MEAN", ",", "cfg", ".", "INPUT", ".", "IMAGE_STD", ")", ",", "\n", "transforms", ".", "Identity", "(", ")", "if", "cfg", ".", "INPUT", ".", "BGR_INPUT", "else", "transforms", ".", "ReverseColorChannels", "(", ")", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.image_list.ImageList.to": [[20, 23], ["image_list.ImageList.tensors.to", "image_list.ImageList.__class__"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to"], ["", "def", "to", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "cast_tensors", "=", "self", ".", "tensors", ".", "to", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "return", "self", ".", "__class__", "(", "cast_tensors", ",", "self", ".", "image_sizes", ",", "self", ".", "original_image_sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.image_list.ImageList.cuda": [[24, 27], ["image_list.ImageList.tensors.cuda", "image_list.ImageList.__class__"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.cuda"], ["", "def", "cuda", "(", "self", ")", ":", "\n", "        ", "cuda_tensors", "=", "self", ".", "tensors", ".", "cuda", "(", ")", "\n", "return", "self", ".", "__class__", "(", "cuda_tensors", ",", "self", ".", "image_sizes", ",", "self", ".", "original_image_sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.image_list.ImageList.__len__": [[28, 30], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_seqs", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.image_list.ImageList.__getitem__": [[31, 34], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "assert", "index", "<=", "self", ".", "num_seqs", "\n", "return", "self", ".", "tensors", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.image_list.ImageList.numpy": [[35, 57], ["list", "list", "sequences.append", "range", "range", "image_list.ImageList.tensors[].permute().detach().cpu().numpy", "image_list.ImageList.__reverse_preprocessing", "seq_images.append", "image_list.ImageList.tensors[].permute().detach().cpu", "image_list.ImageList.tensors[].permute().detach", "image_list.ImageList.tensors[].permute"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.image_list.ImageList.numpy", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.cpu"], ["", "def", "numpy", "(", "self", ",", "seq_idxs", "=", "None", ",", "t_idxs", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Returns the images as NumPy tensors a list of lists (first index: seq, second index: time)\n        :param seq_idxs:\n        :param t_idxs:\n        :return:\n        \"\"\"", "\n", "if", "seq_idxs", "is", "None", ":", "\n", "            ", "seq_idxs", "=", "list", "(", "range", "(", "self", ".", "num_seqs", ")", ")", "\n", "", "if", "t_idxs", "is", "None", ":", "\n", "            ", "t_idxs", "=", "list", "(", "range", "(", "self", ".", "num_frames", ")", ")", "\n", "\n", "", "sequences", "=", "[", "]", "\n", "for", "i", "in", "seq_idxs", ":", "\n", "            ", "seq_images", "=", "[", "]", "\n", "for", "t", "in", "t_idxs", ":", "\n", "                ", "image", "=", "self", ".", "tensors", "[", "i", ",", "t", "]", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "image", "=", "self", ".", "__reverse_preprocessing", "(", "image", ")", "\n", "seq_images", ".", "append", "(", "image", ")", "\n", "", "sequences", ".", "append", "(", "seq_images", ")", "\n", "\n", "", "return", "sequences", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.image_list.ImageList.from_image_sequence_list": [[58, 108], ["len", "torch.zeros", "range", "tensors.detach.detach.detach", "cls", "image_sizes.append", "max", "max", "len", "range", "len", "len", "ValueError", "int", "int", "len", "len", "math.ceil", "math.ceil", "len", "set", "set"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_image_sequence_list", "(", "cls", ",", "image_sequence_list", ",", "original_dims", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Converts a list of image sequences to an ImageList object\n        :param image_sequence_list: Assuming there are N sequences, each of length T, this argument should be a list\n        containing N sub-lists, each of length T.\n        :param original_dims: The original sizes (WH) of the images before (rescaling/padding according to model input\n        requirements).\n        \"\"\"", "\n", "source_dtype", "=", "image_sequence_list", "[", "0", "]", "[", "0", "]", ".", "dtype", "\n", "assert", "source_dtype", "in", "(", "torch", ".", "uint8", ",", "torch", ".", "float32", ",", "torch", ".", "float64", ")", ",", "\"Array type should either be float32 or float64, encountered: {}\"", ".", "format", "(", "source_dtype", ")", "\n", "\n", "max_height", "=", "max_width", "=", "-", "1", "\n", "image_sizes", "=", "[", "]", "\n", "seq_length", "=", "-", "1", "\n", "\n", "for", "image_sequence", "in", "image_sequence_list", ":", "\n", "            ", "seq_length", "=", "len", "(", "image_sequence", ")", "if", "seq_length", "==", "-", "1", "else", "seq_length", "\n", "if", "len", "(", "image_sequence", ")", "!=", "seq_length", ":", "\n", "                ", "raise", "ValueError", "(", "\"All sequences must contain the same number of images. Found {} and {}\"", ".", "format", "(", "\n", "seq_length", ",", "len", "(", "image_sequence", ")", ")", ")", "\n", "\n", "", "seq_heights", "=", "[", "im", ".", "shape", "[", "1", "]", "for", "im", "in", "image_sequence", "]", "\n", "seq_widths", "=", "[", "im", ".", "shape", "[", "2", "]", "for", "im", "in", "image_sequence", "]", "\n", "assert", "len", "(", "set", "(", "seq_widths", ")", ")", "==", "1", "and", "len", "(", "set", "(", "seq_heights", ")", ")", "==", "1", ",", "\"All images within a given sequence must have the same size. Encountered sizes: {}\"", ".", "format", "(", "\n", "\", \"", ".", "join", "(", "[", "\"(%d, %d)\"", "%", "(", "im", ".", "shape", "[", "1", "]", ",", "im", ".", "shape", "[", "0", "]", ")", "for", "im", "in", "image_sequence", "]", ")", ")", "\n", "\n", "height", ",", "width", "=", "seq_heights", "[", "0", "]", ",", "seq_widths", "[", "0", "]", "\n", "image_sizes", ".", "append", "(", "(", "height", ",", "width", ")", ")", "\n", "\n", "max_height", "=", "max", "(", "height", ",", "max_height", ")", "\n", "max_width", "=", "max", "(", "width", ",", "max_width", ")", "\n", "\n", "# make width and height a multiple of 32", "\n", "", "max_width", "=", "(", "int", "(", "math", ".", "ceil", "(", "max_width", "/", "32", ")", ")", "*", "32", ")", "+", "0", "\n", "max_height", "=", "(", "int", "(", "math", ".", "ceil", "(", "max_height", "/", "32", ")", ")", "*", "32", ")", "+", "0", "\n", "\n", "num_sequences", "=", "len", "(", "image_sequence_list", ")", "\n", "tensors", "=", "torch", ".", "zeros", "(", "len", "(", "image_sequence_list", ")", ",", "seq_length", ",", "3", ",", "max_height", ",", "max_width", ",", "dtype", "=", "source_dtype", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_sequences", ")", ":", "\n", "            ", "height", ",", "width", "=", "image_sizes", "[", "i", "]", "\n", "\n", "for", "j", "in", "range", "(", "seq_length", ")", ":", "\n", "                ", "tensors", "[", "i", ",", "j", ",", ":", ",", ":", "height", ",", ":", "width", "]", "=", "image_sequence_list", "[", "i", "]", "[", "j", "]", "\n", "\n", "", "", "tensors", "=", "tensors", ".", "detach", "(", ")", "\n", "return", "cls", "(", "tensors", ",", "image_sizes", ",", "original_dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMask.__init__": [[8, 16], ["isinstance", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "isinstance", "mask.to", "mask.BinaryMask._mask.ndimension", "mask.BinaryMask._mask.ndimension", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.ascontiguousarray"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to"], ["    ", "def", "__init__", "(", "self", ",", "mask", ")", ":", "\n", "        ", "if", "isinstance", "(", "mask", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "self", ".", "_mask", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "mask", ")", ")", ".", "to", "(", "torch", ".", "uint8", ")", "\n", "", "else", ":", "\n", "            ", "assert", "isinstance", "(", "mask", ",", "torch", ".", "Tensor", ")", "\n", "self", ".", "_mask", "=", "mask", ".", "to", "(", "torch", ".", "uint8", ")", "\n", "\n", "", "assert", "self", ".", "_mask", ".", "ndimension", "(", ")", "==", "2", ",", "\"Provided mask has {} dimensions instead of 2\"", ".", "format", "(", "self", ".", "_mask", ".", "ndimension", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMask.__getitem__": [[17, 19], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "_mask", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMask.copy": [[20, 22], ["mask.BinaryMask.__class__", "mask.BinaryMask._mask.clone"], "methods", ["None"], ["", "def", "copy", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", "(", "self", ".", "_mask", ".", "clone", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMask.to": [[23, 25], ["mask.BinaryMask.__class__", "mask.BinaryMask._mask.to"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to"], ["", "def", "to", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "__class__", "(", "self", ".", "_mask", ".", "to", "(", "*", "args", ",", "**", "kwargs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMask.cuda": [[26, 28], ["mask.BinaryMask.to"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to"], ["", "def", "cuda", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "to", "(", "\"cuda:0\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMask.cpu": [[29, 31], ["mask.BinaryMask.to"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to"], ["", "def", "cpu", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "to", "(", "\"cpu\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMask.resize": [[32, 41], ["torch.interpolate", "torch.interpolate", "mask.BinaryMask.__class__", "mask.BinaryMask._mask[].float"], "methods", ["None"], ["", "def", "resize", "(", "self", ",", "size", "=", "None", ",", "scale_factor", "=", "None", ")", ":", "\n", "# Size should be (height, width) here", "\n", "        ", "assert", "not", "(", "size", "is", "None", "and", "scale_factor", "is", "None", ")", "\n", "assert", "not", "(", "size", "is", "not", "None", "and", "scale_factor", "is", "not", "None", ")", "\n", "\n", "# resized_mask = F.interpolate(self._mask[None, None].float(), size, scale_factor, mode='nearest').byte()[0, 0]", "\n", "resized_mask", "=", "F", ".", "interpolate", "(", "self", ".", "_mask", "[", "None", ",", "None", "]", ".", "float", "(", ")", ",", "size", ",", "scale_factor", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "resized_mask", "=", "(", "resized_mask", ">", "0.5", ")", ".", "byte", "(", ")", "[", "0", ",", "0", "]", "\n", "return", "self", ".", "__class__", "(", "resized_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMask.pad": [[42, 48], ["torch.pad().squeeze().squeeze", "torch.pad().squeeze().squeeze", "mask.BinaryMask.__class__", "torch.pad().squeeze", "torch.pad().squeeze", "torch.pad", "torch.pad"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.pad", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.pad"], ["", "def", "pad", "(", "self", ",", "new_width", ",", "new_height", ")", ":", "\n", "        ", "mask_expanded", "=", "self", ".", "_mask", "[", "None", ",", "None", ",", ":", ",", ":", "]", "\n", "pad_right", ",", "pad_bottom", "=", "new_width", "-", "self", ".", "width", ",", "new_height", "-", "self", ".", "height", "\n", "padded", "=", "F", ".", "pad", "(", "mask_expanded", ",", "(", "0", ",", "pad_right", ",", "0", ",", "pad_bottom", ")", ")", ".", "squeeze", "(", "0", ")", ".", "squeeze", "(", "0", ")", "\n", "\n", "return", "self", ".", "__class__", "(", "padded", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMask.crop": [[49, 56], ["mask.BinaryMask.__class__", "str", "str"], "methods", ["None"], ["", "def", "crop", "(", "self", ",", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", ")", ":", "\n", "        ", "assert", "0", "<=", "ymin", "<", "ymax", "<", "self", ".", "_mask", ".", "shape", "[", "0", "]", ",", "\"Invalid y-coords for crop ({}, {}) for mask of size {}\"", ".", "format", "(", "\n", "ymin", ",", "ymax", ",", "str", "(", "self", ".", "_mask", ".", "shape", ")", ")", "\n", "assert", "0", "<=", "xmin", "<", "xmax", "<", "self", ".", "_mask", ".", "shape", "[", "1", "]", ",", "\"Invalid x-coords for crop ({}, {}) for mask of size {}\"", ".", "format", "(", "\n", "xmin", ",", "xmax", ",", "str", "(", "self", ".", "_mask", ".", "shape", ")", ")", "\n", "\n", "return", "self", ".", "__class__", "(", "self", ".", "_mask", "[", "ymin", ":", "ymax", ",", "xmin", ":", "xmax", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMask.flip_horizontal": [[57, 59], ["mask.BinaryMask.__class__", "mask.BinaryMask._mask.flip"], "methods", ["None"], ["", "def", "flip_horizontal", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", "(", "self", ".", "_mask", ".", "flip", "(", "dims", "=", "[", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMask.transform_affine": [[60, 69], ["mask.BinaryMask._mask.detach().cpu().numpy", "cv2.warpAffine", "mask.BinaryMask.__class__", "mask.BinaryMask._mask.detach().cpu", "mask.BinaryMask._mask.detach"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.image_list.ImageList.numpy", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.cpu"], ["", "def", "transform_affine", "(", "self", ",", "transformation_matrix", ")", ":", "\n", "        ", "\"\"\"\n        :param transformation_matrix: should be a (2x3) NumPy array\n        :return:\n        \"\"\"", "\n", "mask_np", "=", "self", ".", "_mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "mask_np", "=", "cv2", ".", "warpAffine", "(", "mask_np", ",", "transformation_matrix", ",", "(", "self", ".", "width", ",", "self", ".", "height", ")", ",", "\n", "borderMode", "=", "cv2", ".", "BORDER_CONSTANT", ",", "borderValue", "=", "0", ")", "\n", "return", "self", ".", "__class__", "(", "mask_np", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMask.translate": [[70, 74], ["torch.pad().squeeze().squeeze", "torch.pad().squeeze().squeeze", "F.pad().squeeze().squeeze.BinaryMask.__class__", "torch.pad().squeeze", "torch.pad().squeeze", "torch.pad", "torch.pad"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.pad", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.pad"], ["", "def", "translate", "(", "self", ",", "tx", ",", "ty", ")", ":", "\n", "        ", "padding", "=", "(", "tx", ",", "-", "tx", ",", "ty", ",", "-", "ty", ")", "\n", "mask", "=", "F", ".", "pad", "(", "self", ".", "_mask", "[", "None", ",", "None", ",", "...", "]", ",", "padding", ")", ".", "squeeze", "(", "0", ")", ".", "squeeze", "(", "0", ")", "\n", "return", "self", ".", "__class__", "(", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMask.tensor": [[75, 80], ["mask.BinaryMask._mask.clone"], "methods", ["None"], ["", "def", "tensor", "(", "self", ",", "copy", "=", "False", ")", ":", "\n", "        ", "if", "copy", ":", "\n", "            ", "return", "self", ".", "_mask", ".", "clone", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMask.bounding_box": [[81, 97], ["torch.any", "torch.any", "torch.any", "torch.any", "torch.any", "torch.any", "torch.any", "torch.any", "torch.any.argmax", "torch.any.argmax", "torch.any.argmax", "torch.any.argmax", "Box", "torch.any.sum", "torch.any.sum", "torch.any.numel", "torch.any.numel", "torch.flip().argmax", "torch.flip().argmax", "torch.flip().argmax", "torch.flip().argmax", "torch.any.numel", "torch.any.numel", "torch.flip().argmax", "torch.flip().argmax", "torch.flip().argmax", "torch.flip().argmax", "Box", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip"], "methods", ["None"], ["", "", "def", "bounding_box", "(", "self", ",", "return_none_if_invalid", ")", ":", "\n", "        ", "reduced_y", "=", "torch", ".", "any", "(", "self", ".", "_mask", ",", "dim", "=", "0", ")", "\n", "reduced_x", "=", "torch", ".", "any", "(", "self", ".", "_mask", ",", "dim", "=", "1", ")", "\n", "\n", "xmax", "=", "reduced_y", ".", "argmax", "(", ")", "\n", "if", "reduced_y", ".", "sum", "(", ")", "==", "0", ":", "# mask is all zeros", "\n", "            ", "if", "return_none_if_invalid", ":", "\n", "                ", "return", "None", "\n", "", "else", ":", "\n", "                ", "return", "Box", "(", "[", "-", "1", ",", "-", "1", ",", "0", ",", "0", "]", ",", "'xyxy'", ",", "False", ")", "\n", "\n", "", "", "xmin", "=", "reduced_y", ".", "numel", "(", ")", "-", "torch", ".", "flip", "(", "reduced_y", ",", "dims", "=", "[", "0", "]", ")", ".", "argmax", "(", ")", "\n", "ymax", "=", "reduced_x", ".", "argmax", "(", ")", "\n", "ymin", "=", "reduced_x", ".", "numel", "(", ")", "-", "torch", ".", "flip", "(", "reduced_x", ",", "dims", "=", "[", "0", "]", ")", ".", "argmax", "(", ")", "\n", "\n", "return", "Box", "(", "(", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", ")", ",", "'xyxy'", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.__init__": [[104, 110], ["len", "range", "len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mask_sequence_list", ")", ":", "\n", "        ", "self", ".", "_mask_sequence_list", "=", "mask_sequence_list", "\n", "\n", "len0", "=", "len", "(", "self", ".", "_mask_sequence_list", "[", "0", "]", ")", "\n", "for", "t", "in", "range", "(", "1", ",", "len", "(", "self", ".", "_mask_sequence_list", ")", ")", ":", "\n", "            ", "assert", "len", "(", "self", ".", "_mask_sequence_list", "[", "t", "]", ")", "==", "len0", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to": [[111, 117], ["mask.BinaryMaskSequenceList.__class__", "mask_sequence_list.append", "mask.to"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to"], ["", "", "def", "to", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "mask_sequence_list", "=", "[", "]", "\n", "for", "instance_list", "in", "self", ".", "_mask_sequence_list", ":", "\n", "            ", "mask_sequence_list", ".", "append", "(", "[", "mask", ".", "to", "(", "*", "args", ",", "**", "kwargs", ")", "for", "mask", "in", "instance_list", "]", ")", "\n", "\n", "", "return", "self", ".", "__class__", "(", "mask_sequence_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.cuda": [[118, 120], ["mask.BinaryMaskSequenceList.to"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to"], ["", "def", "cuda", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "to", "(", "\"cuda:0\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.cpu": [[121, 123], ["mask.BinaryMaskSequenceList.to"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to"], ["", "def", "cpu", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "to", "(", "\"cpu\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.copy": [[124, 129], ["mask.BinaryMaskSequenceList.__class__", "mask_sequence_list.append", "mask.copy"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.copy"], ["", "def", "copy", "(", "self", ")", ":", "\n", "        ", "mask_sequence_list", "=", "[", "]", "\n", "for", "instance_list", "in", "self", ".", "_mask_sequence_list", ":", "\n", "            ", "mask_sequence_list", ".", "append", "(", "[", "mask", ".", "copy", "(", ")", "for", "mask", "in", "instance_list", "]", ")", "\n", "", "return", "self", ".", "__class__", "(", "mask_sequence_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.resize": [[130, 145], ["mask.BinaryMaskSequenceList.__class__", "mask_sequence_list.append", "mask.resize"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.resize"], ["", "def", "resize", "(", "self", ",", "size", "=", "None", ",", "scale_factor", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Resizes all masks in the sequence list\n        :param size: New dimensions in (W, H) format\n        :param scale_factor: Alternatively, a scale factor for resizing\n        :return:\n        \"\"\"", "\n", "if", "size", "is", "not", "None", ":", "\n", "            ", "size", "=", "size", "[", ":", ":", "-", "1", "]", "\n", "\n", "", "mask_sequence_list", "=", "[", "]", "\n", "for", "instance_list", "in", "self", ".", "_mask_sequence_list", ":", "\n", "            ", "mask_sequence_list", ".", "append", "(", "[", "mask", ".", "resize", "(", "size", ",", "scale_factor", ")", "for", "mask", "in", "instance_list", "]", ")", "\n", "\n", "", "return", "self", ".", "__class__", "(", "mask_sequence_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.pad": [[146, 152], ["mask.BinaryMaskSequenceList.__class__", "mask_sequence_list.append", "mask.pad"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.pad"], ["", "def", "pad", "(", "self", ",", "new_width", ",", "new_height", ")", ":", "\n", "        ", "mask_sequence_list", "=", "[", "]", "\n", "for", "instance_list", "in", "self", ".", "_mask_sequence_list", ":", "\n", "            ", "mask_sequence_list", ".", "append", "(", "[", "mask", ".", "pad", "(", "new_width", ",", "new_height", ")", "for", "mask", "in", "instance_list", "]", ")", "\n", "\n", "", "return", "self", ".", "__class__", "(", "mask_sequence_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.crop": [[153, 159], ["mask.BinaryMaskSequenceList.__class__", "mask_sequence_list.append", "mask.crop"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.crop"], ["", "def", "crop", "(", "self", ",", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", ")", ":", "\n", "        ", "mask_sequence_list", "=", "[", "]", "\n", "for", "instance_list", "in", "self", ".", "_mask_sequence_list", ":", "\n", "            ", "mask_sequence_list", ".", "append", "(", "[", "mask", ".", "crop", "(", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", ")", "for", "mask", "in", "instance_list", "]", ")", "\n", "\n", "", "return", "self", ".", "__class__", "(", "mask_sequence_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.flip_horizontal": [[160, 166], ["mask.BinaryMaskSequenceList.__class__", "mask_sequence_list.append", "mask.flip_horizontal"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.flip_horizontal"], ["", "def", "flip_horizontal", "(", "self", ")", ":", "\n", "        ", "mask_sequence_list", "=", "[", "]", "\n", "for", "instance_list", "in", "self", ".", "_mask_sequence_list", ":", "\n", "            ", "mask_sequence_list", ".", "append", "(", "[", "mask", ".", "flip_horizontal", "(", ")", "for", "mask", "in", "instance_list", "]", ")", "\n", "\n", "", "return", "self", ".", "__class__", "(", "mask_sequence_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.transform_affine": [[167, 173], ["mask.BinaryMaskSequenceList.__class__", "mask_sequence_list.append", "mask.transform_affine"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.transform_affine"], ["", "def", "transform_affine", "(", "self", ",", "transformation_matrix", ")", ":", "\n", "        ", "mask_sequence_list", "=", "[", "]", "\n", "for", "instance_list", "in", "self", ".", "_mask_sequence_list", ":", "\n", "            ", "mask_sequence_list", ".", "append", "(", "[", "mask", ".", "transform_affine", "(", "transformation_matrix", ")", "for", "mask", "in", "instance_list", "]", ")", "\n", "\n", "", "return", "self", ".", "__class__", "(", "mask_sequence_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.translate": [[174, 180], ["mask.BinaryMaskSequenceList.__class__", "mask_sequence_list.append", "mask.translate"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.translate"], ["", "def", "translate", "(", "self", ",", "tx", ",", "ty", ",", "frames", "=", "None", ")", ":", "\n", "        ", "mask_sequence_list", "=", "[", "]", "\n", "for", "instance_list", "in", "self", ".", "_mask_sequence_list", ":", "\n", "            ", "mask_sequence_list", ".", "append", "(", "[", "mask", ".", "translate", "(", "tx", ",", "ty", ")", "for", "mask", "in", "instance_list", "]", ")", "\n", "\n", "", "return", "self", ".", "__class__", "(", "mask_sequence_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.reverse": [[181, 183], ["mask.BinaryMaskSequenceList.__class__"], "methods", ["None"], ["", "def", "reverse", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", "(", "self", ".", "_mask_sequence_list", "[", ":", ":", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.reorder": [[184, 187], ["mask.BinaryMaskSequenceList.__class__", "len"], "methods", ["None"], ["", "def", "reorder", "(", "self", ",", "perm", ")", ":", "\n", "        ", "assert", "len", "(", "perm", ")", "==", "self", ".", "num_frames", "\n", "return", "self", ".", "__class__", "(", "[", "self", ".", "_mask_sequence_list", "[", "i", "]", "for", "i", "in", "perm", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.bounding_boxes": [[188, 194], ["BoxSequenceList", "box_sequence_list.append", "mask.bounding_box"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMask.bounding_box"], ["", "def", "bounding_boxes", "(", "self", ")", ":", "\n", "        ", "box_sequence_list", "=", "[", "]", "\n", "for", "instance_list", "in", "self", ".", "_mask_sequence_list", ":", "\n", "            ", "box_sequence_list", ".", "append", "(", "[", "mask", ".", "bounding_box", "(", "False", ")", "for", "mask", "in", "instance_list", "]", ")", "\n", "\n", "", "return", "BoxSequenceList", "(", "box_sequence_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor": [[195, 206], ["tensor_list.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "mask.tensor"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor"], ["", "def", "tensor", "(", "self", ",", "format", "=", "'TN'", ")", ":", "\n", "        ", "assert", "format", "in", "[", "'TN'", ",", "'NT'", "]", "\n", "\n", "tensor_list", "=", "[", "]", "\n", "for", "instance_list", "in", "self", ".", "_mask_sequence_list", ":", "\n", "            ", "tensor_list", ".", "append", "(", "torch", ".", "stack", "(", "[", "mask", ".", "tensor", "(", ")", "for", "mask", "in", "instance_list", "]", ")", ")", "\n", "\n", "", "if", "format", "==", "'TN'", ":", "\n", "            ", "return", "torch", ".", "stack", "(", "tensor_list", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "stack", "(", "tensor_list", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.config.config.YamlConfig.__init__": [[6, 18], ["dict.__init__", "d.items", "isinstance", "config.YamlConfig.__setattr__", "config.YamlConfig.__setattr__", "config.YamlConfig.__class__"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.__init__", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.config.config.YamlConfig.__setattr__", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.config.config.YamlConfig.__setattr__"], ["    ", "def", "__init__", "(", "self", ",", "d", ",", "scope", ")", ":", "\n", "        ", "self", ".", "__immutable", "=", "False", "\n", "self", ".", "__scope", "=", "scope", "\n", "super", "(", "self", ".", "__class__", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "                ", "self", ".", "__setattr__", "(", "k", ",", "self", ".", "__class__", "(", "v", ",", "self", ".", "__scope", "+", "k", "+", "'.'", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "__setattr__", "(", "k", ",", "v", ")", "\n", "\n", "", "", "self", ".", "__immutable", "=", "True", "# prevents changes being made at runtime", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.config.config.YamlConfig.scope": [[19, 22], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "scope", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__scope", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.config.config.YamlConfig.__getattr__": [[23, 28], ["config.YamlConfig.get", "ValueError", "item.startswith"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get"], ["", "def", "__getattr__", "(", "self", ",", "item", ")", ":", "\n", "        ", "attr", "=", "self", ".", "get", "(", "item", ",", "None", ")", "\n", "if", "attr", "is", "None", "and", "not", "item", ".", "startswith", "(", "'_'", "+", "self", ".", "__class__", ".", "__name__", "+", "'__'", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"No attribute named '%s' found in config scope '%s'\"", "%", "(", "item", ",", "self", ".", "__scope", ")", ")", "\n", "", "return", "attr", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.config.config.YamlConfig.__setattr__": [[29, 34], ["config.YamlConfig.__setitem__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.config.config.YamlConfig.__setitem__"], ["", "def", "__setattr__", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "if", "self", ".", "__immutable", "and", "key", "!=", "'_'", "+", "self", ".", "__class__", ".", "__name__", "+", "'__immutable'", ":", "\n", "            ", "raise", "ValueError", "(", "\"The config is immutable and cannot be modified\"", ")", "\n", "\n", "", "return", "self", ".", "__setitem__", "(", "key", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.config.config.YamlConfig.__setitem__": [[35, 40], ["super().__setitem__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.config.config.YamlConfig.__setitem__"], ["", "def", "__setitem__", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "if", "self", ".", "__immutable", "and", "key", "!=", "'_'", "+", "self", ".", "__class__", ".", "__name__", "+", "'__immutable'", ":", "\n", "            ", "raise", "ValueError", "(", "\"The config is immutable and cannot be modified\"", ")", "\n", "\n", "", "return", "super", "(", "self", ".", "__class__", ",", "self", ")", ".", "__setitem__", "(", "key", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.config.config.YamlConfig.__str__": [[41, 43], ["config.YamlConfig.pretty"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.config.config.YamlConfig.pretty"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "pretty", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.config.config.YamlConfig.__repr__": [[44, 46], ["config.YamlConfig.pretty"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.config.config.YamlConfig.pretty"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "pretty", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.config.config.YamlConfig.pretty": [[47, 61], ["config.YamlConfig.items", "k.startswith", "range", "isinstance", "str", "v.pretty", "str"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.config.config.YamlConfig.pretty"], ["", "def", "pretty", "(", "self", ",", "left_margin", "=", "0", ")", ":", "\n", "        ", "s", "=", "\"\"", "\n", "for", "k", ",", "v", "in", "self", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", ".", "startswith", "(", "'_'", "+", "self", ".", "__class__", ".", "__name__", "+", "'__'", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "for", "i", "in", "range", "(", "left_margin", ")", ":", "\n", "                ", "s", "+=", "\" \"", "\n", "\n", "", "if", "isinstance", "(", "v", ",", "self", ".", "__class__", ")", ":", "\n", "                ", "s", "=", "s", "+", "k", "+", "\":\\n\"", "+", "str", "(", "v", ".", "pretty", "(", "left_margin", "+", "2", ")", ")", "\n", "", "else", ":", "\n", "                ", "s", "=", "s", "+", "k", "+", "\": \"", "+", "str", "(", "v", ")", "+", "\"\\n\"", "\n", "", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.config.config.YamlConfig.merge_with": [[62, 85], ["opts.items", "key.startswith", "isinstance", "ValueError", "unexpected_keys.append", "unexpected_keys.extend", "value.merge_with"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.config.config.YamlConfig.merge_with"], ["", "def", "merge_with", "(", "self", ",", "opts", ",", "strict", "=", "True", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "self", ".", "__immutable", "=", "False", "\n", "unexpected_keys", "=", "[", "]", "\n", "\n", "for", "key", ",", "val", "in", "opts", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", ".", "startswith", "(", "\"_YamlConfig__\"", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "key", "not", "in", "self", ":", "\n", "                ", "if", "strict", ":", "\n", "                    ", "self", ".", "__immutable", "=", "True", "\n", "raise", "ValueError", "(", "\"No option named '%s' exists in YamlConfig\"", "%", "key", ")", "\n", "", "else", ":", "\n", "                    ", "unexpected_keys", ".", "append", "(", "key", ")", "\n", "", "", "else", ":", "\n", "                ", "value", "=", "self", "[", "key", "]", "\n", "if", "isinstance", "(", "value", ",", "self", ".", "__class__", ")", ":", "\n", "                    ", "unexpected_keys", ".", "extend", "(", "value", ".", "merge_with", "(", "val", ",", "strict", ")", ")", "\n", "", "else", ":", "\n", "                    ", "self", "[", "key", "]", "=", "val", "\n", "\n", "", "", "", "self", ".", "__immutable", "=", "True", "\n", "return", "unexpected_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.config.config.YamlConfig.merge_from_file": [[86, 89], ["config.YamlConfig.__class__.load_from_file", "config.YamlConfig.merge_with"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.config.config.YamlConfig.load_from_file", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.config.config.YamlConfig.merge_with"], ["", "def", "merge_from_file", "(", "self", ",", "path", ",", "strict", "=", "True", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "other_cfg", "=", "self", ".", "__class__", ".", "load_from_file", "(", "path", ")", "\n", "return", "self", ".", "merge_with", "(", "other_cfg", ",", "strict", "=", "strict", ",", "verbose", "=", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.config.config.YamlConfig.update_param": [[90, 102], ["ValueError"], "methods", ["None"], ["", "def", "update_param", "(", "self", ",", "name", ",", "new_value", ")", ":", "\n", "        ", "\"\"\"\n        Method to update the value of a given parameter.\n        :param name:\n        :param new_value:\n        :return:\n        \"\"\"", "\n", "if", "name", "not", "in", "self", ":", "\n", "            ", "raise", "ValueError", "(", "\"No parameter named '{}' exists\"", ".", "format", "(", "name", ")", ")", "\n", "", "self", ".", "__immutable", "=", "False", "\n", "self", "[", "name", "]", "=", "new_value", "\n", "self", ".", "__immutable", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.config.config.YamlConfig.update_from_args": [[103, 126], ["vars().items", "arg_name.lower().replace.lower().replace.lower().replace", "vars", "arg_name.lower().replace.lower().replace.lower", "len", "k.lower", "print"], "methods", ["None"], ["", "def", "update_from_args", "(", "self", ",", "args", ",", "verbose", "=", "False", ",", "prefix", "=", "''", ")", ":", "\n", "        ", "\"\"\"\n        Update the values based on user input given via 'argparse.ArgumentParser'.\n        :param args:\n        :param verbose:\n        :param prefix: If the arg names have some prefix attached to them, provide it here so it is parsed correctly.\n        :return:\n        \"\"\"", "\n", "self", ".", "__immutable", "=", "False", "\n", "for", "arg_name", ",", "v", "in", "vars", "(", "args", ")", ".", "items", "(", ")", ":", "\n", "            ", "if", "v", "is", "None", ":", "\n", "                ", "continue", "\n", "\n", "", "arg_name", "=", "arg_name", ".", "lower", "(", ")", ".", "replace", "(", "'-'", ",", "'_'", ")", "\n", "n_skip", "=", "len", "(", "prefix", ")", "+", "1", "if", "prefix", "else", "0", "\n", "arg_name", "=", "arg_name", "[", "n_skip", ":", "]", "\n", "\n", "for", "k", "in", "self", ":", "\n", "                ", "if", "k", ".", "lower", "(", ")", "==", "arg_name", ":", "\n", "                    ", "self", "[", "k", "]", "=", "v", "\n", "if", "verbose", ":", "\n", "                        ", "print", "(", "\"{}{} --> {}\"", ".", "format", "(", "self", ".", "__scope", ",", "k", ",", "v", ")", ")", "\n", "", "", "", "", "self", ".", "__immutable", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.config.config.YamlConfig.add_args_to_parser": [[127, 165], ["parser.register", "config.YamlConfig.items", "key.startswith", "isinstance", "isinstance", "v.lower", "parser.add_argument", "isinstance", "v.lower", "ValueError", "val.add_args", "parser.add_argument", "parser.add_argument", "key.lower", "type", "key.lower", "key.lower", "type"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.global_registry.GlobalRegistry.register"], ["", "def", "add_args_to_parser", "(", "self", ",", "parser", ",", "recursive", "=", "False", ",", "prefix", "=", "''", ")", ":", "\n", "        ", "\"\"\"\n        Populates an ArgumentParser instance with argument names from the config instance.\n        :param parser: Instance of argparse.ArgumentParser\n        :param recursive: If True, config values in nested scoped will also be added\n        :param prefix: A string prefix that will be prepended to the arg names\n        :return:\n        \"\"\"", "\n", "\n", "def", "str2bool", "(", "v", ")", ":", "\n", "            ", "if", "v", ".", "lower", "(", ")", "in", "(", "\"yes\"", ",", "\"true\"", ",", "\"on\"", ",", "\"t\"", ",", "\"1\"", ")", ":", "\n", "                ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "\"no\"", ",", "\"false\"", ",", "\"off\"", ",", "\"f\"", ",", "\"0\"", ")", ":", "\n", "                ", "return", "False", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Failed to cast '{}' to boolean type\"", ".", "format", "(", "v", ")", ")", "\n", "\n", "", "", "parser", ".", "register", "(", "'type'", ",", "'bool'", ",", "str2bool", ")", "\n", "\n", "for", "key", ",", "val", "in", "self", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", ".", "startswith", "(", "'_'", "+", "self", ".", "__class__", ".", "__name__", "+", "'__'", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "isinstance", "(", "val", ",", "self", ".", "__class__", ")", ":", "\n", "                ", "if", "recursive", ":", "\n", "                    ", "val", ".", "add_args", "(", "parser", ",", "True", ",", "prefix", "+", "self", ".", "__scope", ")", "\n", "", "else", ":", "\n", "                    ", "continue", "\n", "\n", "", "", "prefix_", "=", "prefix", "+", "\"_\"", "if", "prefix", "else", "\"\"", "\n", "if", "isinstance", "(", "val", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "                ", "parser", ".", "add_argument", "(", "'--{}{}'", ".", "format", "(", "prefix_", ",", "key", ".", "lower", "(", ")", ")", ",", "nargs", "=", "'*'", ",", "type", "=", "type", "(", "val", "[", "0", "]", ")", ",", "required", "=", "False", ")", "\n", "", "elif", "isinstance", "(", "val", ",", "bool", ")", ":", "\n", "                ", "parser", ".", "add_argument", "(", "'--{}{}'", ".", "format", "(", "prefix_", ",", "key", ".", "lower", "(", ")", ")", ",", "type", "=", "'bool'", ",", "required", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "parser", ".", "add_argument", "(", "'--{}{}'", ".", "format", "(", "prefix_", ",", "key", ".", "lower", "(", ")", ")", ",", "type", "=", "type", "(", "val", ")", ",", "required", "=", "False", ")", "\n", "\n", "", "", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.config.config.YamlConfig.d": [[166, 181], ["dict", "config.YamlConfig.items", "k.startswith", "isinstance", "v.d"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.config.config.YamlConfig.d"], ["", "def", "d", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Converts the object instance to a standard Python dict\n        :return: object instance parsed as dict\n        \"\"\"", "\n", "d", "=", "dict", "(", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", ".", "startswith", "(", "'_'", "+", "self", ".", "__class__", ".", "__name__", "+", "'__'", ")", ":", "# ignore class variables", "\n", "                ", "continue", "\n", "", "if", "isinstance", "(", "v", ",", "self", ".", "__class__", ")", ":", "\n", "                ", "d", "[", "k", "]", "=", "v", ".", "d", "(", ")", "\n", "", "else", ":", "\n", "                ", "d", "[", "k", "]", "=", "v", "\n", "\n", "", "", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.config.config.YamlConfig.load_from_file": [[182, 198], ["os.path.exists", "int", "int", "cls", "open", "yaml.__version__.split", "yaml.__version__.split", "yaml.load", "yaml.load"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.global_registry.GlobalRegistry.exists"], ["", "@", "classmethod", "\n", "def", "load_from_file", "(", "cls", ",", "config_file_path", ")", ":", "\n", "        ", "assert", "os", ".", "path", ".", "exists", "(", "config_file_path", ")", ",", "\"config file not found at given path: %s\"", "%", "config_file_path", "\n", "\n", "pyyaml_major_version", "=", "int", "(", "yaml", ".", "__version__", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "pyyaml_minor_version", "=", "int", "(", "yaml", ".", "__version__", ".", "split", "(", "'.'", ")", "[", "1", "]", ")", "\n", "required_loader_arg", "=", "pyyaml_major_version", ">=", "5", "and", "pyyaml_minor_version", ">=", "1", "\n", "\n", "with", "open", "(", "config_file_path", ",", "'r'", ")", "as", "readfile", ":", "\n", "            ", "if", "required_loader_arg", ":", "\n", "                ", "d", "=", "yaml", ".", "load", "(", "readfile", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "", "else", ":", "\n", "                ", "d", "=", "yaml", ".", "load", "(", "readfile", ")", "\n", "\n", "", "", "yaml_config", "=", "cls", "(", "d", ",", "''", ")", "\n", "return", "yaml_config", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.exponential_lr.ExponentialLR.__init__": [[14, 21], ["math.exp", "super().__init__", "math.log", "float"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "decay_factor", ",", "decay_steps", ",", "start_at", "=", "0", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "assert", "decay_steps", ">", "0", "\n", "assert", "decay_factor", "<", "1.0", "\n", "self", ".", "gamma", "=", "math", ".", "exp", "(", "math", ".", "log", "(", "decay_factor", ")", "/", "float", "(", "decay_steps", ")", ")", "\n", "self", ".", "start_at", "=", "start_at", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.exponential_lr.ExponentialLR.get_lr": [[22, 27], ["None"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "last_epoch", "<", "self", ".", "start_at", ":", "\n", "            ", "return", "self", ".", "base_lrs", "\n", "\n", "", "return", "[", "group", "[", "'lr'", "]", "*", "self", ".", "gamma", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.model_output_manager.ModelOutputManager.__init__": [[8, 15], ["float", "collections.defaultdict", "collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "division_factor", ",", "excluded_keys", "=", "(", ")", ")", ":", "\n", "        ", "self", ".", "division_factor", "=", "float", "(", "division_factor", ")", "\n", "\n", "self", ".", "tensor_vars", "=", "defaultdict", "(", "lambda", ":", "0.", ")", "\n", "self", ".", "other_vars", "=", "defaultdict", "(", "lambda", ":", "0.", ")", "\n", "\n", "self", ".", "excluded_keys", "=", "excluded_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.model_output_manager.ModelOutputManager.accumulate_vars": [[16, 26], ["torch.no_grad", "d.items", "torch.is_tensor", "v.detach"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "accumulate_vars", "(", "self", ",", "d", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "in", "self", ".", "excluded_keys", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "torch", ".", "is_tensor", "(", "v", ")", ":", "\n", "                ", "self", ".", "tensor_vars", "[", "k", "]", "+=", "(", "v", ".", "detach", "(", ")", "/", "self", ".", "division_factor", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "other_vars", "[", "k", "]", "+=", "(", "v", "/", "self", ".", "division_factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.model_output_manager.ModelOutputManager.__call__": [[27, 35], ["model_output_manager.ModelOutputManager.accumulate_vars", "model_output_manager.ModelOutputManager.accumulate_vars", "sum", "list", "optimization_losses.values"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.model_output_manager.ModelOutputManager.accumulate_vars", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.model_output_manager.ModelOutputManager.accumulate_vars"], ["", "", "", "def", "__call__", "(", "self", ",", "model_output", ")", ":", "\n", "        ", "optimization_losses", "=", "model_output", "[", "ModelOutput", ".", "OPTIMIZATION_LOSSES", "]", "\n", "total_optimization_loss", "=", "sum", "(", "list", "(", "optimization_losses", ".", "values", "(", ")", ")", ")", "/", "self", ".", "division_factor", "\n", "\n", "self", ".", "accumulate_vars", "(", "model_output", "[", "ModelOutput", ".", "OPTIMIZATION_LOSSES", "]", ")", "\n", "self", ".", "accumulate_vars", "(", "model_output", "[", "ModelOutput", ".", "OTHERS", "]", ")", "\n", "\n", "return", "total_optimization_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.model_output_manager.ModelOutputManager.reset": [[36, 44], ["dict", "dict", "collections.defaultdict", "collections.defaultdict"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "tensor_vars", "=", "dict", "(", "self", ".", "tensor_vars", ")", "\n", "other_vars", "=", "dict", "(", "self", ".", "other_vars", ")", "\n", "\n", "self", ".", "tensor_vars", "=", "defaultdict", "(", "lambda", ":", "0.", ")", "\n", "self", ".", "other_vars", "=", "defaultdict", "(", "lambda", ":", "0.", ")", "\n", "\n", "return", "tensor_vars", ",", "other_vars", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.main.Trainer.__init__": [[34, 89], ["stemseg.utils.distributed.get_world_size", "stemseg.utils.distributed.get_rank", "stemseg.utils.distributed.get_device", "stemseg.utils.distributed.is_main_process", "os.path.join", "stemseg.modeling.model_builder.build_model().to", "stemseg.training.utils.create_optimizer", "stemseg.utils.distributed.is_distributed", "stemseg.training.utils.create_lr_scheduler", "stemseg.training.interrupt_detector.InterruptDetector", "os.makedirs", "main.Trainer.console_logger.info", "amp.initialize", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "stemseg.training.training_logger.TrainingLogger", "main.Trainer.console_logger.info", "main.Trainer.restore_session", "stemseg.modeling.model_builder.build_model", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "main.Trainer.console_logger.info", "main.Trainer._model.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.distributed.get_world_size", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.distributed.get_rank", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.distributed.get_device", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.distributed.is_main_process", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.utils.create_optimizer", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.distributed.is_distributed", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.utils.create_lr_scheduler", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.main.Trainer.restore_session", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.model_builder.build_model", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.training_logger.TrainingLogger.load_state_dict"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "model_save_dir", ",", "args", ",", "logger", ")", ":", "\n", "        ", "self", ".", "num_gpus", "=", "dist_utils", ".", "get_world_size", "(", ")", "\n", "self", ".", "local_rank", "=", "dist_utils", ".", "get_rank", "(", ")", "\n", "self", ".", "local_device", "=", "dist_utils", ".", "get_device", "(", ")", "\n", "self", ".", "is_main_process", "=", "dist_utils", ".", "is_main_process", "(", ")", "\n", "\n", "self", ".", "console_logger", "=", "logger", "\n", "\n", "self", ".", "model_save_dir", "=", "model_save_dir", "\n", "self", ".", "log_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "model_save_dir", ",", "'logs'", ")", "\n", "\n", "if", "self", ".", "is_main_process", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "log_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "self", ".", "model", "=", "build_model", "(", "restore_pretrained_backbone_wts", "=", "True", ",", "logger", "=", "self", ".", "console_logger", ")", ".", "to", "(", "self", ".", "local_device", ")", "\n", "\n", "# create optimizer", "\n", "self", ".", "optimizer", "=", "create_optimizer", "(", "self", ".", "model", ",", "cfg", ",", "self", ".", "console_logger", ".", "info", ")", "\n", "\n", "# wrap model and optimizer around apex if mixed precision training is enabled", "\n", "if", "cfg", ".", "MIXED_PRECISION", ":", "\n", "            ", "assert", "APEX_IMPORTED", "\n", "self", ".", "console_logger", ".", "info", "(", "\"Mixed precision training is enabled.\"", ")", "\n", "self", ".", "model", ",", "self", ".", "optimizer", "=", "amp", ".", "initialize", "(", "\n", "self", ".", "model", ",", "self", ".", "optimizer", ",", "opt_level", "=", "cfg", ".", "MIXED_PRECISION_OPT_LEVEL", ")", "\n", "\n", "", "if", "dist_utils", ".", "is_distributed", "(", ")", ":", "\n", "            ", "self", ".", "model", "=", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "\n", "self", ".", "model", ",", "device_ids", "=", "[", "self", ".", "local_rank", "]", ",", "output_device", "=", "self", ".", "local_rank", ",", "\n", "find_unused_parameters", "=", "cfg", ".", "FREEZE_BACKBONE", "\n", ")", "\n", "\n", "", "self", ".", "total_iterations", "=", "cfg", ".", "MAX_ITERATIONS", "\n", "\n", "# create LR scheduler", "\n", "self", ".", "lr_scheduler", "=", "create_lr_scheduler", "(", "self", ".", "optimizer", ",", "cfg", ",", "self", ".", "console_logger", ".", "info", ")", "\n", "\n", "# create parameter logger", "\n", "self", ".", "logger", "=", "None", "\n", "if", "self", ".", "is_main_process", ":", "\n", "            ", "self", ".", "logger", "=", "TrainingLogger", "(", "self", ".", "log_dir", ")", "\n", "\n", "", "self", ".", "interrupt_detector", "=", "InterruptDetector", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", "\n", "\n", "self", ".", "elapsed_iterations", "=", "0", "\n", "\n", "assert", "not", "(", "args", ".", "restore_session", "and", "args", ".", "initial_ckpt", ")", "\n", "\n", "if", "args", ".", "restore_session", ":", "\n", "            ", "self", ".", "console_logger", ".", "info", "(", "\"Restoring session from {}\"", ".", "format", "(", "args", ".", "restore_session", ")", ")", "\n", "self", ".", "restore_session", "(", "torch", ".", "load", "(", "args", ".", "restore_session", ",", "map_location", "=", "self", ".", "local_device", ")", ")", "\n", "", "elif", "args", ".", "initial_ckpt", ":", "\n", "            ", "self", ".", "console_logger", ".", "info", "(", "\"Loading model weights from checkpoint at: {}\"", ".", "format", "(", "args", ".", "initial_ckpt", ")", ")", "\n", "self", ".", "_model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "args", ".", "initial_ckpt", ",", "map_location", "=", "self", ".", "local_device", ")", "[", "'model'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.main.Trainer._model": [[90, 96], ["isinstance"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "_model", "(", "self", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "model", ",", "nn", ".", "parallel", ".", "DistributedDataParallel", ")", ":", "\n", "            ", "return", "self", ".", "model", ".", "module", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.main.Trainer.backup_session": [[97, 112], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "main.Trainer.console_logger.info", "main.Trainer._model.state_dict", "main.Trainer.optimizer.state_dict", "main.Trainer.lr_scheduler.state_dict", "main.Trainer.logger.state_dict", "amp.state_dict"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.youtube_vis.YoutubeVISOutputGenerator.save", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.youtube_vis.YoutubeVISOutputGenerator.save", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.youtube_vis.YoutubeVISOutputGenerator.save", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.youtube_vis.YoutubeVISOutputGenerator.save", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.youtube_vis.YoutubeVISOutputGenerator.save", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.youtube_vis.YoutubeVISOutputGenerator.save", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.youtube_vis.YoutubeVISOutputGenerator.save", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.youtube_vis.YoutubeVISOutputGenerator.save", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.youtube_vis.YoutubeVISOutputGenerator.save", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.training_logger.TrainingLogger.state_dict", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.training_logger.TrainingLogger.state_dict", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.training_logger.TrainingLogger.state_dict", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.training_logger.TrainingLogger.state_dict", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.training_logger.TrainingLogger.state_dict"], ["", "", "def", "backup_session", "(", "self", ")", ":", "\n", "        ", "model_save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "model_save_dir", ",", "'{:06d}.pth'", ".", "format", "(", "self", ".", "elapsed_iterations", ")", ")", "\n", "\n", "save_dict", "=", "{", "'model'", ":", "self", ".", "_model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'lr_scheduler'", ":", "self", ".", "lr_scheduler", ".", "state_dict", "(", ")", ",", "\n", "'logger'", ":", "self", ".", "logger", ".", "state_dict", "(", ")", ",", "\n", "'iterations'", ":", "self", ".", "elapsed_iterations", "}", "\n", "\n", "if", "global_cfg", ".", "TRAINING", ".", "MIXED_PRECISION", ":", "\n", "            ", "save_dict", "[", "'amp'", "]", "=", "amp", ".", "state_dict", "(", ")", "\n", "\n", "", "torch", ".", "save", "(", "save_dict", ",", "model_save_path", ",", "_use_new_zipfile_serialization", "=", "False", ")", "\n", "self", ".", "console_logger", ".", "info", "(", "\"Checkpoint saved to: {}\"", ".", "format", "(", "model_save_path", ")", ")", "\n", "return", "model_save_path", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.main.Trainer.restore_session": [[113, 132], ["main.Trainer._model.load_state_dict", "main.Trainer.optimizer.load_state_dict", "main.Trainer.lr_scheduler.load_state_dict", "amp.load_state_dict", "main.Trainer.logger.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.training_logger.TrainingLogger.load_state_dict", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.training_logger.TrainingLogger.load_state_dict", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.training_logger.TrainingLogger.load_state_dict", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.training_logger.TrainingLogger.load_state_dict", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.training_logger.TrainingLogger.load_state_dict"], ["", "def", "restore_session", "(", "self", ",", "restore_dict", ")", ":", "\n", "        ", "assert", "'model'", "in", "restore_dict", ",", "\"Restore state dict contains no entry named 'model'\"", "\n", "self", ".", "_model", ".", "load_state_dict", "(", "restore_dict", "[", "'model'", "]", ")", "\n", "\n", "assert", "'optimizer'", "in", "restore_dict", ",", "\"Restore state dict contains no entry named 'optimizer'\"", "\n", "self", ".", "optimizer", ".", "load_state_dict", "(", "(", "restore_dict", "[", "'optimizer'", "]", ")", ")", "\n", "\n", "assert", "'lr_scheduler'", "in", "restore_dict", ",", "\"Restore state dict contains no entry named 'lr_scheduler'\"", "\n", "self", ".", "lr_scheduler", ".", "load_state_dict", "(", "restore_dict", "[", "'lr_scheduler'", "]", ")", "\n", "\n", "assert", "'iterations'", "in", "restore_dict", ",", "\"Restore state dict contains no entry named 'iterations'\"", "\n", "self", ".", "elapsed_iterations", "=", "restore_dict", "[", "'iterations'", "]", "\n", "\n", "if", "'amp'", "in", "restore_dict", "and", "global_cfg", ".", "TRAINING", ".", "MIXED_PRECISION", ":", "\n", "            ", "amp", ".", "load_state_dict", "(", "restore_dict", "[", "'amp'", "]", ")", "\n", "\n", "", "if", "self", ".", "is_main_process", ":", "\n", "            ", "assert", "'logger'", "in", "restore_dict", ",", "\"Restore state dict contains no entry named 'logger'\"", "\n", "self", ".", "logger", ".", "load_state_dict", "(", "restore_dict", "[", "'logger'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.main.Trainer.start": [[133, 256], ["stemseg.training.utils.create_training_dataset", "stemseg.training.model_output_manager.ModelOutputManager", "stemseg.training.utils.create_training_data_loader", "main.Trainer.interrupt_detector.start", "main.Trainer.console_logger.info", "int", "sum", "main.Trainer.console_logger.info", "main.Trainer.logger.start_timer", "main.Trainer.model", "stemseg.utils.distributed.synchronize", "stemseg.training.model_output_manager.ModelOutputManager.", "main.Trainer.optimizer.step", "main.Trainer.lr_scheduler.step", "main.Trainer.optimizer.zero_grad", "stemseg.training.model_output_manager.ModelOutputManager.reset", "stemseg.utils.distributed.reduce_dict", "main.Trainer.console_logger.info", "ValueError", "image_seqs.to", "stemseg.data.common.tensor_struct_to", "stemseg.training.interrupt_detector.InterruptException", "stemseg.training.model_output_manager.ModelOutputManager.backward", "v.item", "main.Trainer.logger.add_training_point", "hasattr", "main.Trainer.logger.compute_eta", "log_func", "stemseg.utils.distributed.synchronize", "p.numel", "amp.scale_loss", "scaled_loss.backward", "stemseg.utils.distributed.reduce_dict.items", "sorted", "main.Trainer.backup_session", "main.Trainer.model.parameters", "main.Trainer.lr_scheduler.get_last_lr", "main.Trainer.lr_scheduler.get_lr", "stemseg.training.utils.var_keys_to_str", "glob.glob.glob", "len", "os.path.join", "os.remove"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.utils.create_training_dataset", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.utils.create_training_data_loader", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.main.TrackGenerator.start", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.training_logger.TrainingLogger.start_timer", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.distributed.synchronize", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.model_output_manager.ModelOutputManager.reset", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.distributed.reduce_dict", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.common.tensor_struct_to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.backbone.make_layers._NewEmptyTensorOp.backward", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.training_logger.TrainingLogger.add_training_point", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.training_logger.TrainingLogger.compute_eta", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.distributed.synchronize", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.backbone.make_layers._NewEmptyTensorOp.backward", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.main.Trainer.backup_session", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.exponential_lr.ExponentialLR.get_lr", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.utils.var_keys_to_str"], ["", "", "def", "start", "(", "self", ",", "opts", ")", ":", "\n", "        ", "max_samples_per_gpu", "=", "self", ".", "cfg", ".", "MAX_SAMPLES_PER_GPU", "\n", "batch_size", "=", "self", ".", "cfg", ".", "BATCH_SIZE", "\n", "accumulate_gradients", "=", "self", ".", "cfg", ".", "ACCUMULATE_GRADIENTS", "\n", "\n", "dataset", "=", "create_training_dataset", "(", "self", ".", "total_iterations", "*", "batch_size", ",", "print_fn", "=", "self", ".", "console_logger", ".", "info", ")", "\n", "\n", "if", "accumulate_gradients", ":", "\n", "            ", "assert", "batch_size", ">=", "self", ".", "num_gpus", ",", "\"Batch size ({}) must be >= number of GPUs ({})\"", ".", "format", "(", "\n", "batch_size", ",", "self", ".", "num_gpus", ")", "\n", "\n", "optimizer_step_interval", "=", "int", "(", "batch_size", "/", "(", "max_samples_per_gpu", "*", "self", ".", "num_gpus", ")", ")", "\n", "assert", "batch_size", "%", "max_samples_per_gpu", "==", "0", ",", "\"Batch size ({}) must be divisible by number of samples per GPU ({})\"", ".", "format", "(", "\n", "batch_size", ",", "max_samples_per_gpu", ")", "\n", "\n", "if", "self", ".", "is_main_process", ":", "\n", "                ", "self", ".", "console_logger", ".", "info", "(", "\"Optimizer will be run every {} iterations\"", ".", "format", "(", "optimizer_step_interval", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "batch_size", ">", "max_samples_per_gpu", ":", "\n", "                ", "raise", "ValueError", "(", "\"A batch size of {} cannot be processed. Max samples per GPU = {}\"", ".", "format", "(", "\n", "batch_size", ",", "max_samples_per_gpu", ")", ")", "\n", "\n", "", "max_samples_per_gpu", "=", "batch_size", "\n", "optimizer_step_interval", "=", "1", "\n", "\n", "", "if", "self", ".", "is_main_process", ":", "\n", "            ", "n_trainable_params", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "self", ".", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "self", ".", "console_logger", ".", "info", "(", "\n", "\"Commencing/resuming training with the following settings:\\n\"", "\n", "\"- Elapsed iterations: %d\\n\"", "\n", "\"- Total iterations: %d\\n\"", "\n", "\"- Batch size: %d\\n\"", "\n", "\"- Optimizer step interval: %d\\n\"", "\n", "\"- Model save directory: %s\\n\"", "\n", "\"- Save interval: %d\\n\"", "\n", "\"- Trainable parameters: %d\"", "%", "(", "\n", "self", ".", "elapsed_iterations", ",", "self", ".", "total_iterations", ",", "\n", "batch_size", ",", "optimizer_step_interval", ",", "self", ".", "model_save_dir", ",", "\n", "opts", ".", "save_interval", ",", "n_trainable_params", ")", ")", "\n", "\n", "self", ".", "logger", ".", "total_iterations", "=", "self", ".", "total_iterations", "\n", "self", ".", "logger", ".", "start_timer", "(", ")", "\n", "\n", "", "output_manager", "=", "ModelOutputManager", "(", "optimizer_step_interval", ")", "\n", "\n", "data_loader", "=", "create_training_data_loader", "(", "\n", "dataset", ",", "max_samples_per_gpu", ",", "True", ",", "collate_fn", ",", "opts", ".", "num_cpu_workers", ",", "\n", "self", ".", "elapsed_iterations", ")", "\n", "\n", "self", ".", "interrupt_detector", ".", "start", "(", ")", "\n", "\n", "sub_iter_idx", "=", "0", "\n", "\n", "for", "image_seqs", ",", "targets", ",", "meta_info", "in", "data_loader", ":", "\n", "            ", "model_output", "=", "self", ".", "model", "(", "\n", "image_seqs", ".", "to", "(", "device", "=", "self", ".", "local_device", ")", ",", "tensor_struct_to", "(", "targets", ",", "device", "=", "self", ".", "local_device", ")", ")", "\n", "\n", "dist_utils", ".", "synchronize", "(", ")", "\n", "if", "self", ".", "interrupt_detector", ".", "is_interrupted", ":", "\n", "                ", "raise", "InterruptException", "(", ")", "\n", "\n", "", "optim_loss", "=", "output_manager", "(", "model_output", ")", "\n", "\n", "if", "self", ".", "cfg", ".", "MIXED_PRECISION", ":", "\n", "                ", "with", "amp", ".", "scale_loss", "(", "optim_loss", ",", "self", ".", "optimizer", ")", "as", "scaled_loss", ":", "\n", "                    ", "scaled_loss", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "optim_loss", ".", "backward", "(", ")", "\n", "\n", "", "sub_iter_idx", "+=", "1", "\n", "if", "sub_iter_idx", "<", "optimizer_step_interval", ":", "\n", "                ", "continue", "\n", "\n", "", "sub_iter_idx", "=", "0", "\n", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "lr_scheduler", ".", "step", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "elapsed_iterations", "+=", "1", "\n", "\n", "logging_vars", ",", "_", "=", "output_manager", ".", "reset", "(", ")", "\n", "logging_vars", "=", "dist_utils", ".", "reduce_dict", "(", "logging_vars", ",", "average", "=", "True", ")", "\n", "logging_vars", "=", "{", "k", ":", "v", ".", "item", "(", ")", "for", "k", ",", "v", "in", "logging_vars", ".", "items", "(", ")", "}", "\n", "\n", "if", "self", ".", "is_main_process", ":", "\n", "                ", "add_to_summary", "=", "self", ".", "elapsed_iterations", "%", "opts", ".", "summary_interval", "==", "0", "\n", "self", ".", "logger", ".", "add_training_point", "(", "self", ".", "elapsed_iterations", ",", "add_to_summary", ",", "**", "logging_vars", ")", "\n", "\n", "if", "hasattr", "(", "self", ".", "lr_scheduler", ",", "\"get_last_lr\"", ")", ":", "# PyTorch versions > 1.5", "\n", "                    ", "logging_vars", "[", "'lr'", "]", "=", "self", ".", "lr_scheduler", ".", "get_last_lr", "(", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "                    ", "logging_vars", "[", "'lr'", "]", "=", "self", ".", "lr_scheduler", ".", "get_lr", "(", ")", "[", "0", "]", "\n", "\n", "", "if", "self", ".", "elapsed_iterations", "%", "opts", ".", "display_interval", "==", "0", ":", "\n", "                    ", "log_func", "=", "self", ".", "console_logger", ".", "info", "\n", "", "else", ":", "\n", "                    ", "log_func", "=", "self", ".", "console_logger", ".", "debug", "\n", "\n", "", "eta", ",", "avg_time_per_iter", "=", "self", ".", "logger", ".", "compute_eta", "(", "as_string", "=", "True", ")", "\n", "log_func", "(", "\n", "\"It: {:05d} - {:s} - ETA: {:s} - sec/it: {:.3f}\"", ".", "format", "(", "\n", "self", ".", "elapsed_iterations", ",", "\n", "var_keys_to_str", "(", "logging_vars", ")", ",", "\n", "eta", ",", "\n", "avg_time_per_iter", ")", ")", "\n", "\n", "", "if", "self", ".", "elapsed_iterations", "%", "opts", ".", "save_interval", "==", "0", ":", "\n", "                ", "if", "self", ".", "is_main_process", ":", "\n", "# remove outdated checkpoints", "\n", "                    ", "checkpoints", "=", "sorted", "(", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "model_save_dir", ",", "'%06d.pth'", ")", ")", ")", "\n", "if", "len", "(", "checkpoints", ")", ">", "opts", ".", "ckpts_to_keep", ":", "\n", "                        ", "for", "ckpt_path", "in", "checkpoints", "[", ":", "-", "opts", ".", "ckpts_to_keep", "]", ":", "\n", "                            ", "os", ".", "remove", "(", "ckpt_path", ")", "\n", "\n", "", "", "self", ".", "backup_session", "(", ")", "\n", "\n", "", "dist_utils", ".", "synchronize", "(", ")", "\n", "\n", "", "", "self", ".", "console_logger", ".", "info", "(", "\n", "\"Training complete\\n\"", "\n", "\"Model(s) saved to: %s\\n\"", "\n", "\"Log file(s) saved to: %s\\n\"", "%", "(", "self", ".", "model_save_dir", ",", "self", ".", "log_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.main.create_logger": [[258, 276], ["logging.getLogger", "stemseg.utils.distributed.is_main_process", "logging.StreamHandler", "logging.Formatter", "logging.StreamHandler.setFormatter", "logging.LoggerAdapter.addHandler", "logging.LoggerAdapter", "logging.LoggerAdapter.setLevel", "logging.LoggerAdapter.setLevel", "stemseg.utils.distributed.get_rank"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.distributed.is_main_process", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.distributed.get_rank"], ["", "", "def", "create_logger", "(", "args", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "\"MaskTCNNTrainLogger\"", ")", "\n", "if", "dist_utils", ".", "is_main_process", "(", ")", ":", "\n", "        ", "logger", ".", "setLevel", "(", "args", ".", "log_level", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "setLevel", "(", "args", ".", "subprocess_log_level", ")", "\n", "\n", "", "ch", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\"[%(proc_id)d] %(asctime)s - %(levelname)s - %(message)s\"", ",", "\"%H:%M:%S\"", ")", "\n", "extra", "=", "{", "\"proc_id\"", ":", "dist_utils", ".", "get_rank", "(", ")", "}", "\n", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "ch", ")", "\n", "logger", ".", "propagate", "=", "False", "\n", "\n", "logger", "=", "logging", ".", "LoggerAdapter", "(", "logger", ",", "extra", ")", "\n", "logger", ".", "propagate", "=", "False", "\n", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.main.setup_cfg": [[278, 300], ["print", "stemseg.config.cfg.merge_from_file", "os.path.realpath", "print", "stemseg.config.cfg.merge_from_file", "os.path.join", "os.path.exists", "os.path.join", "print", "stemseg.config.cfg.merge_from_file"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.config.config.YamlConfig.merge_from_file", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.config.config.YamlConfig.merge_from_file", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.global_registry.GlobalRegistry.exists", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.config.config.YamlConfig.merge_from_file"], ["", "def", "setup_cfg", "(", "args", ",", "model_dir", ",", "ignore_existing_cfg", ")", ":", "\n", "# if a config file has been provided, load it", "\n", "    ", "if", "args", ".", "cfg", ":", "\n", "        ", "print", "(", "\"[ INFO] Loading config from {}\"", ".", "format", "(", "args", ".", "cfg", ")", ")", "\n", "global_cfg", ".", "merge_from_file", "(", "args", ".", "cfg", ")", "\n", "return", "\n", "\n", "", "if", "ignore_existing_cfg", ":", "\n", "        ", "return", "\n", "\n", "# when restoring session, load the config file already present in that directory", "\n", "", "if", "args", ".", "restore_session", ":", "\n", "        ", "expected_config_filepath", "=", "os", ".", "path", ".", "realpath", "(", "os", ".", "path", ".", "join", "(", "args", ".", "restore_session", ",", "os", ".", "pardir", ",", "'config.yaml'", ")", ")", "\n", "print", "(", "\"[ INFO] Restoring config from {}\"", ".", "format", "(", "expected_config_filepath", ")", ")", "\n", "global_cfg", ".", "merge_from_file", "(", "expected_config_filepath", ")", "\n", "\n", "# if the output directory already exists and there is a config file present there, then load it", "\n", "", "else", ":", "\n", "        ", "expected_config_filepath", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'config.yaml'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "expected_config_filepath", ")", ":", "\n", "            ", "print", "(", "\"[ INFO] Restoring config from {}\"", ".", "format", "(", "expected_config_filepath", ")", ")", "\n", "global_cfg", ".", "merge_from_file", "(", "expected_config_filepath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.main.start": [[302, 344], ["main.create_logger", "os.path.join", "stemseg.utils.distributed.is_main_process", "sorted", "stemseg.utils.distributed.is_main_process", "main.Trainer", "stemseg.utils.distributed.get_rank", "warnings.filterwarnings", "stemseg.utils.ModelPaths.checkpoint_base_dir", "os.makedirs", "glob.glob", "main.Trainer.start", "os.path.join", "open", "yaml.dump", "stemseg.utils.distributed.is_main_process", "exit", "stemseg.utils.distributed.is_main_process", "os.path.join", "stemseg.config.cfg.d", "print", "main.Trainer.backup_session", "stemseg.utils.distributed.synchronize", "print", "print", "main.Trainer.backup_session", "stemseg.utils.distributed.is_distributed", "torch.destroy_process_group", "stemseg.config.cfg", "stemseg.config.cfg"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.main.create_logger", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.distributed.is_main_process", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.distributed.is_main_process", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.distributed.get_rank", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.model_paths.ModelPaths.checkpoint_base_dir", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.main.TrackGenerator.start", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.distributed.is_main_process", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.distributed.is_main_process", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.config.config.YamlConfig.d", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.main.Trainer.backup_session", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.distributed.synchronize", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.main.Trainer.backup_session", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.distributed.is_distributed"], ["", "", "", "def", "start", "(", "args", ",", "cfg", ")", ":", "\n", "# suppress Python warnings from sub-processes to prevent duplicate warnings being printed to console", "\n", "    ", "if", "dist_utils", ".", "get_rank", "(", ")", ">", "0", ":", "\n", "        ", "warnings", ".", "filterwarnings", "(", "\"ignore\"", ")", "\n", "\n", "", "logger", "=", "create_logger", "(", "args", ")", "\n", "model_save_dir", "=", "os", ".", "path", ".", "join", "(", "ModelPaths", ".", "checkpoint_base_dir", "(", ")", ",", "cfg", ".", "MODE", ",", "args", ".", "model_dir", ")", "\n", "\n", "if", "dist_utils", ".", "is_main_process", "(", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "model_save_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# check if a checkpoint already exists in the model save directory. If it does, and the 'no_resume' flag is not set,", "\n", "# training should resume from the last pre-existing checkpoint.", "\n", "", "existing_ckpts", "=", "sorted", "(", "glob", "(", "os", ".", "path", ".", "join", "(", "model_save_dir", ",", "\"*.pth\"", ")", ")", ")", "\n", "if", "existing_ckpts", "and", "not", "args", ".", "no_resume", ":", "\n", "        ", "args", ".", "restore_session", "=", "existing_ckpts", "[", "-", "1", "]", "\n", "args", ".", "initial_ckpt", "=", "None", "# when jobs auto-restart on the cluster, this might be set,", "\n", "# however we want to use the latest checkpoint instead", "\n", "\n", "# backup config to model directory", "\n", "", "if", "dist_utils", ".", "is_main_process", "(", ")", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "model_save_dir", ",", "'config.yaml'", ")", ",", "'w'", ")", "as", "writefile", ":", "\n", "            ", "yaml", ".", "dump", "(", "global_cfg", ".", "d", "(", ")", ",", "writefile", ")", "\n", "\n", "", "", "trainer", "=", "Trainer", "(", "cfg", ",", "model_save_dir", ",", "args", ",", "logger", ")", "\n", "\n", "try", ":", "\n", "        ", "trainer", ".", "start", "(", "args", ")", "\n", "", "except", "InterruptException", "as", "_", ":", "\n", "        ", "if", "dist_utils", ".", "is_main_process", "(", ")", ":", "\n", "            ", "print", "(", "\"Interrupt signal received. Saving checkpoint...\"", ")", "\n", "trainer", ".", "backup_session", "(", ")", "\n", "dist_utils", ".", "synchronize", "(", ")", "\n", "", "exit", "(", "1", ")", "\n", "", "except", "Exception", "as", "err", ":", "\n", "        ", "if", "dist_utils", ".", "is_main_process", "(", ")", ":", "\n", "            ", "print", "(", "\"Exception occurred. Saving checkpoint...\"", ")", "\n", "print", "(", "err", ")", "\n", "trainer", ".", "backup_session", "(", ")", "\n", "if", "dist_utils", ".", "is_distributed", "(", ")", ":", "\n", "                ", "dist", ".", "destroy_process_group", "(", ")", "\n", "", "", "raise", "err", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.main.init_distributed": [[346, 361], ["datetime.timedelta", "torch.init_process_group", "stemseg.utils.distributed.synchronize", "torch.destroy_process_group", "main.start", "print", "stemseg.config.cfg"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.distributed.synchronize", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.main.TrackGenerator.start"], ["", "", "def", "init_distributed", "(", "args", ",", "cfg", ",", "num_gpus", ")", ":", "\n", "    ", "os", ".", "environ", "[", "'MASTER_ADDR'", "]", "=", "'localhost'", "\n", "os", ".", "environ", "[", "'MASTER_PORT'", "]", "=", "args", ".", "master_port", "if", "args", ".", "master_port", "else", "'12356'", "\n", "\n", "# initialize the process group", "\n", "timeout", "=", "timedelta", "(", "0", ",", "25", ")", "# 25 seconds", "\n", "dist", ".", "init_process_group", "(", "\"nccl\"", ",", "rank", "=", "args", ".", "local_rank", ",", "world_size", "=", "num_gpus", ",", "timeout", "=", "timeout", ")", "\n", "\n", "try", ":", "\n", "        ", "start", "(", "args", ",", "cfg", ")", "\n", "", "except", "InterruptException", "as", "_", ":", "\n", "        ", "print", "(", "\"Training session was interrupted\"", ")", "\n", "\n", "", "dist_utils", ".", "synchronize", "(", ")", "\n", "dist", ".", "destroy_process_group", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.main.main": [[363, 378], ["os.path.isabs", "print", "stemseg.config.cfg.merge_from_file", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "os.path.join", "main.init_distributed", "main.start", "stemseg.utils.RepoPaths.configs_dir"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.config.config.YamlConfig.merge_from_file", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.main.init_distributed", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.main.TrackGenerator.start", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.constants.RepoPaths.configs_dir"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isabs", "(", "args", ".", "cfg", ")", ":", "\n", "        ", "cfg_path", "=", "args", ".", "cfg", "\n", "", "else", ":", "\n", "        ", "cfg_path", "=", "os", ".", "path", ".", "join", "(", "RepoPaths", ".", "configs_dir", "(", ")", ",", "args", ".", "cfg", ")", "\n", "\n", "", "print", "(", "\"Restoring config from: {}\"", ".", "format", "(", "cfg_path", ")", ")", "\n", "global_cfg", ".", "merge_from_file", "(", "cfg_path", ")", "\n", "\n", "num_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "\n", "if", "args", ".", "allow_multigpu", "and", "num_gpus", ">", "1", ":", "\n", "        ", "init_distributed", "(", "args", ",", "global_cfg", ".", "TRAINING", ",", "num_gpus", ")", "\n", "", "else", ":", "\n", "        ", "start", "(", "args", ",", "global_cfg", ".", "TRAINING", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.training_logger.TrainingLogger.__init__": [[8, 18], ["os.makedirs", "tensorboardX.SummaryWriter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "output_dir", ",", "num_iterations", "=", "None", ")", ":", "\n", "        ", "self", ".", "total_iterations", "=", "num_iterations", "\n", "self", ".", "output_dir", "=", "output_dir", "\n", "os", ".", "makedirs", "(", "self", ".", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "self", ".", "__writer", "=", "tensorboardX", ".", "SummaryWriter", "(", "self", ".", "output_dir", ")", "\n", "self", ".", "__train_start_time", "=", "None", "\n", "self", ".", "__latest_timestamp", "=", "None", "\n", "self", ".", "__latest_iteration_num", "=", "None", "\n", "self", ".", "__pause_duration", "=", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.training_logger.TrainingLogger.elapsed_time": [[19, 22], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "elapsed_time", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__latest_timestamp", "-", "self", ".", "__train_start_time", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.training_logger.TrainingLogger.start_timer": [[23, 28], ["time.time.time", "time.time.time"], "methods", ["None"], ["", "def", "start_timer", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "__train_start_time", "is", "not", "None", "and", "self", ".", "__latest_iteration_num", "is", "not", "None", ":", "\n", "            ", "self", ".", "__pause_duration", "+=", "(", "current_time", "(", ")", "-", "self", ".", "__latest_timestamp", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "__train_start_time", "=", "current_time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.training_logger.TrainingLogger.add_training_point": [[29, 35], ["time.time.time", "kwargs.items", "training_logger.TrainingLogger.__writer.add_scalar"], "methods", ["None"], ["", "", "def", "add_training_point", "(", "self", ",", "iteration_num", ",", "add_to_summary", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "__latest_timestamp", "=", "current_time", "(", ")", "\n", "self", ".", "__latest_iteration_num", "=", "iteration_num", "\n", "if", "add_to_summary", ":", "\n", "            ", "for", "scalar_name", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "__writer", ".", "add_scalar", "(", "'training_'", "+", "scalar_name", ",", "value", ",", "iteration_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.training_logger.TrainingLogger.add_validation_run_results": [[36, 39], ["kwargs.items", "training_logger.TrainingLogger.__writer.add_scalar"], "methods", ["None"], ["", "", "", "def", "add_validation_run_results", "(", "self", ",", "num_training_iterations", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "scalar_name", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "__writer", ".", "add_scalar", "(", "'validation_'", "+", "scalar_name", ",", "value", ",", "num_training_iterations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.training_logger.TrainingLogger.compute_eta": [[40, 51], ["divmod", "divmod", "divmod", "float", "float", "int", "int", "int", "int"], "methods", ["None"], ["", "", "def", "compute_eta", "(", "self", ",", "as_string", "=", "True", ")", ":", "\n", "        ", "assert", "self", ".", "__train_start_time", "is", "not", "None", "and", "self", ".", "__latest_timestamp", "is", "not", "None", "\n", "avg_time_per_iter", "=", "(", "self", ".", "__latest_timestamp", "-", "self", ".", "__train_start_time", "-", "self", ".", "__pause_duration", ")", "/", "float", "(", "self", ".", "__latest_iteration_num", ")", "\n", "eta", "=", "float", "(", "self", ".", "total_iterations", "-", "self", ".", "__latest_iteration_num", ")", "*", "avg_time_per_iter", "\n", "if", "not", "as_string", ":", "\n", "            ", "return", "eta", ",", "avg_time_per_iter", "\n", "\n", "", "days", ",", "rem", "=", "divmod", "(", "eta", ",", "3600", "*", "24", ")", "\n", "hours", ",", "rem", "=", "divmod", "(", "rem", ",", "3600", ")", "\n", "minutes", ",", "seconds", "=", "divmod", "(", "rem", ",", "60", ")", "\n", "return", "\"{:d}-{:02d}:{:02d}:{:02d}\"", ".", "format", "(", "int", "(", "days", ")", ",", "int", "(", "hours", ")", ",", "int", "(", "minutes", ")", ",", "int", "(", "seconds", ")", ")", ",", "avg_time_per_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.training_logger.TrainingLogger.state_dict": [[52, 58], ["None"], "methods", ["None"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "return", "{", "'total_iterations'", ":", "self", ".", "total_iterations", ",", "\n", "'_'", "+", "self", ".", "__class__", ".", "__name__", "+", "'__train_start_time'", ":", "self", ".", "__train_start_time", ",", "\n", "'_'", "+", "self", ".", "__class__", ".", "__name__", "+", "'__latest_timestamp'", ":", "self", ".", "__latest_timestamp", ",", "\n", "'_'", "+", "self", ".", "__class__", ".", "__name__", "+", "'__latest_iteration_num'", ":", "self", ".", "__latest_iteration_num", ",", "\n", "'_'", "+", "self", ".", "__class__", ".", "__name__", "+", "'__pause_duration'", ":", "self", ".", "__pause_duration", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.training_logger.TrainingLogger.load_state_dict": [[59, 63], ["training_logger.TrainingLogger.__dict__.update"], "methods", ["None"], ["", "def", "load_state_dict", "(", "self", ",", "d", ")", ":", "\n", "        ", "for", "key", "in", "d", ":", "\n", "            ", "assert", "key", "in", "self", ".", "__dict__", ",", "\"Invalid parameter '%s' in state dict\"", "%", "key", "\n", "", "self", ".", "__dict__", ".", "update", "(", "d", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.utils.var_keys_to_str": [[32, 40], ["losses.items"], "function", ["None"], ["def", "var_keys_to_str", "(", "losses", ")", ":", "\n", "    ", "s", "=", "''", "\n", "for", "k", ",", "v", "in", "losses", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "==", "\"lr\"", ":", "\n", "            ", "s", "+=", "\"LR: {:.2E} - \"", ".", "format", "(", "v", ")", "\n", "", "else", ":", "\n", "            ", "s", "+=", "\"{:s}: {:.3f} - \"", ".", "format", "(", "_VAR_KEY_TO_DISP_STR", "[", "k", "]", ",", "v", ")", "\n", "", "", "return", "s", "[", ":", "-", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.utils.register_log_level_type": [[42, 63], ["parser.register", "v.lower", "v.lower", "v.lower", "v.lower", "v.lower", "v.lower", "v.lower", "ValueError"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.global_registry.GlobalRegistry.register"], ["", "def", "register_log_level_type", "(", "parser", ")", ":", "\n", "    ", "def", "str2LogLevel", "(", "v", ")", ":", "\n", "        ", "if", "v", ".", "lower", "(", ")", "==", "\"fatal\"", ":", "\n", "            ", "return", "logging", ".", "FATAL", "\n", "", "elif", "v", ".", "lower", "(", ")", "==", "\"critical\"", ":", "\n", "            ", "return", "logging", ".", "CRITICAL", "\n", "", "elif", "v", ".", "lower", "(", ")", "==", "\"error\"", ":", "\n", "            ", "return", "logging", ".", "ERROR", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "\"warn\"", ",", "\"warning\"", ")", ":", "\n", "            ", "return", "logging", ".", "WARN", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "\"info\"", ",", "\"normal\"", ")", ":", "\n", "            ", "return", "logging", ".", "INFO", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "\"debug\"", ",", "\"verbose\"", ")", ":", "\n", "            ", "return", "logging", ".", "DEBUG", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "\"no\"", ",", "\"false\"", ",", "\"off\"", ",", "\"f\"", ",", "\"0\"", ")", ":", "\n", "            ", "return", "False", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Failed to cast '{}' to logging level\"", ".", "format", "(", "v", ")", ")", "\n", "\n", "", "", "parser", ".", "register", "(", "'type'", ",", "'LogLevel'", ",", "str2LogLevel", ")", "\n", "return", "\"LogLevel\"", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.utils.create_concat_dataset_for_davis": [[65, 111], ["print_fn", "datasets.append", "ds_weights.append", "ds_names.append", "int", "datasets.append", "ds_weights.append", "ds_names.append", "int", "datasets.append", "ds_weights.append", "ds_names.append", "datasets.append", "ds_weights.append", "ds_names.append", "print_fn", "stemseg.data.concat_dataset.ConcatDataset", "stemseg.data.CocoDataLoader", "round", "stemseg.data.YoutubeVISDataLoader", "round", "stemseg.data.DavisDataLoader", "stemseg.data.PascalVOCDataLoader", "stemseg.data.CocoPaths.images_dir", "stemseg.data.CocoPaths.ids_file", "stemseg.data.YoutubeVISPaths.training_base_dir", "stemseg.data.YoutubeVISPaths.train_vds_file", "stemseg.data.DavisUnsupervisedPaths.trainval_base_dir", "stemseg.data.DavisUnsupervisedPaths.train_vds_file", "stemseg.data.PascalVOCPaths.images_dir", "stemseg.data.PascalVOCPaths.ids_file"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.PascalVOCPaths.images_dir", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.PascalVOCPaths.ids_file", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.YoutubeVISPaths.training_base_dir", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.KITTIMOTSPaths.train_vds_file", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.DavisUnsupervisedPaths.trainval_base_dir", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.KITTIMOTSPaths.train_vds_file", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.PascalVOCPaths.images_dir", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.PascalVOCPaths.ids_file"], ["", "def", "create_concat_dataset_for_davis", "(", "total_samples", ",", "print_fn", ")", ":", "\n", "    ", "if", "print_fn", "is", "None", ":", "\n", "        ", "print_fn", "=", "print", "\n", "\n", "", "print_fn", "(", "\"Creating training dataset for Davis...\"", ")", "\n", "assert", "cfg", ".", "INPUT", ".", "NUM_CLASSES", "==", "2", "\n", "datasets", "=", "[", "]", "\n", "ds_weights", "=", "[", "]", "\n", "ds_names", "=", "[", "]", "\n", "\n", "ds_cfg", "=", "cfg", ".", "DATA", ".", "DAVIS", "\n", "\n", "# Coco", "\n", "datasets", ".", "append", "(", "CocoDataLoader", "(", "CocoPaths", ".", "images_dir", "(", ")", ",", "CocoPaths", ".", "ids_file", "(", ")", ",", "category_agnostic", "=", "True", ")", ")", "\n", "ds_weights", ".", "append", "(", "ds_cfg", ".", "COCO_WEIGHT", ")", "\n", "ds_names", ".", "append", "(", "\"Coco\"", ")", "\n", "\n", "# YoutubeVIS", "\n", "num_subseqs", "=", "int", "(", "round", "(", "total_samples", "*", "ds_cfg", ".", "YOUTUBE_VIS_WEIGHT", ")", ")", "\n", "datasets", ".", "append", "(", "YoutubeVISDataLoader", "(", "YoutubeVISPaths", ".", "training_base_dir", "(", ")", ",", "YoutubeVISPaths", ".", "train_vds_file", "(", ")", ",", "\n", "num_subseqs", ",", "category_agnostic", "=", "True", ",", "\n", "single_instance_duplication", "=", "cfg", ".", "DATA", ".", "YOUTUBE_VIS", ".", "SINGLE_INSTANCE_DUPLICATION", ")", ")", "\n", "ds_weights", ".", "append", "(", "ds_cfg", ".", "YOUTUBE_VIS_WEIGHT", ")", "\n", "ds_names", ".", "append", "(", "\"YouTubeVIS\"", ")", "\n", "\n", "# Davis", "\n", "num_subseqs", "=", "int", "(", "round", "(", "\n", "cfg", ".", "TRAINING", ".", "MAX_ITERATIONS", "*", "cfg", ".", "TRAINING", ".", "BATCH_SIZE", "*", "ds_cfg", ".", "DAVIS_WEIGHT", ")", ")", "\n", "datasets", ".", "append", "(", "DavisDataLoader", "(", "\n", "DavisPaths", ".", "trainval_base_dir", "(", ")", ",", "DavisPaths", ".", "train_vds_file", "(", ")", ",", "\n", "samples_to_create", "=", "num_subseqs", ",", "\n", "single_instance_duplication", "=", "True", ",", "\n", "background_as_ignore_region", "=", "True", "\n", ")", ")", "\n", "ds_weights", ".", "append", "(", "ds_cfg", ".", "DAVIS_WEIGHT", ")", "\n", "ds_names", ".", "append", "(", "\"Davis\"", ")", "\n", "\n", "# PascalVOC", "\n", "datasets", ".", "append", "(", "PascalVOCDataLoader", "(", "PascalVOCPaths", ".", "images_dir", "(", ")", ",", "PascalVOCPaths", ".", "ids_file", "(", ")", ",", "\n", "category_agnostic", "=", "True", ")", ")", "\n", "ds_weights", ".", "append", "(", "ds_cfg", ".", "PASCAL_VOC_WEIGHT", ")", "\n", "ds_names", ".", "append", "(", "\"PascalVOC\"", ")", "\n", "\n", "print_fn", "(", "\"Training datasets: {}\"", ".", "format", "(", "', '", ".", "join", "(", "ds_names", ")", ")", ")", "\n", "\n", "return", "CustomConcatDataset", "(", "datasets", ",", "total_samples", ",", "ds_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.utils.create_concat_dataset_for_youtube_vis": [[113, 149], ["print_fn", "datasets.append", "ds_weights.append", "ds_names.append", "datasets.append", "ds_weights.append", "ds_names.append", "int", "datasets.append", "ds_weights.append", "ds_names.append", "print_fn", "stemseg.data.concat_dataset.ConcatDataset", "stemseg.data.CocoDataLoader", "stemseg.data.PascalVOCDataLoader", "round", "stemseg.data.YoutubeVISDataLoader", "stemseg.data.CocoPaths.images_dir", "stemseg.data.CocoPaths.ids_file", "stemseg.data.PascalVOCPaths.images_dir", "stemseg.data.PascalVOCPaths.ids_file", "stemseg.data.YoutubeVISPaths.training_base_dir", "stemseg.data.YoutubeVISPaths.train_vds_file"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.PascalVOCPaths.images_dir", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.PascalVOCPaths.ids_file", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.PascalVOCPaths.images_dir", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.PascalVOCPaths.ids_file", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.YoutubeVISPaths.training_base_dir", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.KITTIMOTSPaths.train_vds_file"], ["", "def", "create_concat_dataset_for_youtube_vis", "(", "total_samples", ",", "print_fn", ")", ":", "\n", "    ", "if", "print_fn", "is", "None", ":", "\n", "        ", "print_fn", "=", "print", "\n", "\n", "", "print_fn", "(", "\"Creating training dataset for YouTube-VIS...\"", ")", "\n", "\n", "assert", "cfg", ".", "INPUT", ".", "NUM_CLASSES", "==", "41", "# 40 classes + 1 generic foreground class", "\n", "datasets", "=", "[", "]", "\n", "ds_weights", "=", "[", "]", "\n", "ds_names", "=", "[", "]", "\n", "\n", "ds_cfg", "=", "cfg", ".", "DATA", ".", "YOUTUBE_VIS", "\n", "\n", "# Coco", "\n", "datasets", ".", "append", "(", "CocoDataLoader", "(", "CocoPaths", ".", "images_dir", "(", ")", ",", "CocoPaths", ".", "ids_file", "(", ")", ",", "category_agnostic", "=", "False", ")", ")", "\n", "ds_weights", ".", "append", "(", "ds_cfg", ".", "COCO_WEIGHT", ")", "\n", "ds_names", ".", "append", "(", "\"Coco\"", ")", "\n", "\n", "# PascalVOC", "\n", "datasets", ".", "append", "(", "PascalVOCDataLoader", "(", "PascalVOCPaths", ".", "images_dir", "(", ")", ",", "PascalVOCPaths", ".", "ids_file", "(", ")", ",", "\n", "category_agnostic", "=", "False", ")", ")", "\n", "ds_weights", ".", "append", "(", "ds_cfg", ".", "PASCAL_VOC_WEIGHT", ")", "\n", "ds_names", ".", "append", "(", "\"PascalVOC\"", ")", "\n", "\n", "# YoutubeVIS", "\n", "num_subseqs", "=", "int", "(", "round", "(", "total_samples", "*", "ds_cfg", ".", "YOUTUBE_VIS_WEIGHT", ")", ")", "\n", "datasets", ".", "append", "(", "\n", "YoutubeVISDataLoader", "(", "YoutubeVISPaths", ".", "training_base_dir", "(", ")", ",", "YoutubeVISPaths", ".", "train_vds_file", "(", ")", ",", "\n", "num_subseqs", ",", "\n", "category_agnostic", "=", "False", ",", "\n", "single_instance_duplication", "=", "cfg", ".", "DATA", ".", "YOUTUBE_VIS", ".", "SINGLE_INSTANCE_DUPLICATION", ")", ")", "\n", "ds_weights", ".", "append", "(", "ds_cfg", ".", "YOUTUBE_VIS_WEIGHT", ")", "\n", "ds_names", ".", "append", "(", "\"YouTubeVIS\"", ")", "\n", "\n", "print_fn", "(", "\"Training datasets: {}\"", ".", "format", "(", "', '", ".", "join", "(", "ds_names", ")", ")", ")", "\n", "return", "CustomConcatDataset", "(", "datasets", ",", "total_samples", ",", "ds_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.utils.create_concat_dataset_for_kitti_mots": [[151, 180], ["print_fn", "print_fn", "stemseg.data.concat_dataset.ConcatDataset", "datasets.append", "ds_weights.append", "ds_names.append", "int", "datasets.append", "ds_weights.append", "ds_names.append", "stemseg.data.MapillaryDataLoader", "round", "stemseg.data.MOTSDataLoader", "stemseg.data.MapillaryPaths.images_dir", "stemseg.data.MapillaryPaths.ids_file", "stemseg.data.KITTIMOTSPaths.train_images_dir", "stemseg.data.KITTIMOTSPaths.train_vds_file"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.PascalVOCPaths.images_dir", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.PascalVOCPaths.ids_file", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.KITTIMOTSPaths.train_images_dir", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.KITTIMOTSPaths.train_vds_file"], ["", "def", "create_concat_dataset_for_kitti_mots", "(", "total_samples", ",", "print_fn", "=", "None", ")", ":", "\n", "    ", "if", "print_fn", "is", "None", ":", "\n", "        ", "print_fn", "=", "print", "\n", "\n", "", "print_fn", "(", "\"Creating training dataset for KITTI-MOTS...\"", ")", "\n", "assert", "cfg", ".", "INPUT", ".", "NUM_CLASSES", "==", "3", "# car, pedestrian, background", "\n", "datasets", "=", "[", "]", "\n", "ds_weights", "=", "[", "]", "\n", "ds_names", "=", "[", "]", "\n", "\n", "ds_cfg", "=", "cfg", ".", "DATA", ".", "KITTI_MOTS", "\n", "\n", "# Mapillary", "\n", "if", "ds_cfg", ".", "MAPILLARY_WEIGHT", ">", "0.", ":", "\n", "        ", "datasets", ".", "append", "(", "MapillaryDataLoader", "(", "MapillaryPaths", ".", "images_dir", "(", ")", ",", "MapillaryPaths", ".", "ids_file", "(", ")", ")", ")", "\n", "ds_weights", ".", "append", "(", "ds_cfg", ".", "MAPILLARY_WEIGHT", ")", "\n", "ds_names", ".", "append", "(", "\"Mapillary\"", ")", "\n", "\n", "# KITTI-MOTS", "\n", "", "if", "ds_cfg", ".", "KITTI_MOTS_WEIGHT", ">", "0.", ":", "\n", "        ", "num_subseqs", "=", "int", "(", "round", "(", "total_samples", "*", "ds_cfg", ".", "KITTI_MOTS_WEIGHT", ")", ")", "\n", "datasets", ".", "append", "(", "MOTSDataLoader", "(", "\n", "KITTIMOTSPaths", ".", "train_images_dir", "(", ")", ",", "KITTIMOTSPaths", ".", "train_vds_file", "(", ")", ",", "num_subseqs", ")", ")", "\n", "ds_weights", ".", "append", "(", "ds_cfg", ".", "KITTI_MOTS_WEIGHT", ")", "\n", "ds_names", ".", "append", "(", "\"KITTI-MOTS\"", ")", "\n", "\n", "", "print_fn", "(", "\"Training datasets: {}\"", ".", "format", "(", "', '", ".", "join", "(", "ds_names", ")", ")", ")", "\n", "\n", "return", "CustomConcatDataset", "(", "datasets", ",", "total_samples", ",", "ds_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.utils.create_training_dataset": [[182, 193], ["ValueError"], "function", ["None"], ["", "def", "create_training_dataset", "(", "total_samples", ",", "print_fn", "=", "None", ")", ":", "\n", "    ", "dataset_creation_fns", "=", "{", "\n", "\"davis\"", ":", "create_concat_dataset_for_davis", ",", "\n", "\"youtube_vis\"", ":", "create_concat_dataset_for_youtube_vis", ",", "\n", "\"kitti_mots\"", ":", "create_concat_dataset_for_kitti_mots", ",", "\n", "}", "\n", "\n", "try", ":", "\n", "        ", "return", "dataset_creation_fns", "[", "cfg", ".", "TRAINING", ".", "MODE", "]", "(", "total_samples", ",", "print_fn", ")", "\n", "", "except", "KeyError", "as", "_", ":", "\n", "        ", "raise", "ValueError", "(", "\"Invalid training mode: {}\"", ".", "format", "(", "cfg", ".", "TRAINING", ".", "MODE", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.utils.create_optimizer": [[195, 211], ["stemseg.config.cfg.OPTIMIZER.lower", "torch.optim.SGD", "torch.optim.SGD", "print_fn", "model.parameters", "stemseg.config.cfg.OPTIMIZER.lower", "torch.optim.Adam", "torch.optim.Adam", "print_fn", "ValueError", "model.parameters"], "function", ["None"], ["", "", "def", "create_optimizer", "(", "model", ",", "cfg", ",", "print_fn", "=", "None", ")", ":", "\n", "    ", "if", "print_fn", "is", "None", ":", "\n", "        ", "print_fn", "=", "print", "\n", "\n", "", "if", "cfg", ".", "OPTIMIZER", ".", "lower", "(", ")", "==", "\"sgd\"", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "model", ".", "parameters", "(", ")", ",", "cfg", ".", "INITIAL_LR", ",", "cfg", ".", "MOMENTUM", ",", "weight_decay", "=", "cfg", ".", "WEIGHT_DECAY", ",", "nesterov", "=", "cfg", ".", "NESTEROV", ")", "\n", "print_fn", "(", "\"Using SGD optimizer with momentum {} and weight decay {}\"", ".", "format", "(", "cfg", ".", "MOMENTUM", ",", "cfg", ".", "WEIGHT_DECAY", ")", ")", "\n", "", "elif", "cfg", ".", "OPTIMIZER", ".", "lower", "(", ")", "==", "\"adam\"", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "model", ".", "parameters", "(", ")", ",", "cfg", ".", "INITIAL_LR", ",", "weight_decay", "=", "cfg", ".", "WEIGHT_DECAY", ")", "\n", "print_fn", "(", "\"Using Adam optimizer with weight decay {}\"", ".", "format", "(", "cfg", ".", "WEIGHT_DECAY", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Invalid optimizer choice: '{}'\"", ".", "format", "(", "cfg", ".", "OPTIMIZER", ")", ")", "\n", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.utils.create_lr_scheduler": [[213, 233], ["print_fn", "torch.MultiStepLR", "print_fn", "stemseg.training.exponential_lr.ExponentialLR", "print_fn", "torch.LambdaLR", "print_fn", "ValueError"], "function", ["None"], ["", "def", "create_lr_scheduler", "(", "optimizer", ",", "cfg", ",", "print_fn", "=", "None", ")", ":", "\n", "    ", "if", "print_fn", "is", "None", ":", "\n", "        ", "print_fn", "=", "print", "\n", "\n", "", "if", "cfg", ".", "LR_DECAY_TYPE", "==", "\"step\"", ":", "\n", "        ", "lr_scheduler", "=", "lrs", ".", "MultiStepLR", "(", "optimizer", ",", "cfg", ".", "LR_DECAY_STEPS", ",", "cfg", ".", "LR_DECAY_FACTOR", ")", "\n", "print_fn", "(", "\"Multistep LR decay at {} steps with decay factor {}\"", ".", "format", "(", "cfg", ".", "LR_DECAY_STEPS", ",", "cfg", ".", "LR_DECAY_FACTOR", ")", ")", "\n", "", "elif", "cfg", ".", "LR_DECAY_TYPE", "==", "\"exponential\"", ":", "\n", "        ", "lr_scheduler", "=", "ExponentialLR", "(", "optimizer", ",", "cfg", ".", "LR_EXP_DECAY_FACTOR", ",", "cfg", ".", "LR_EXP_DECAY_STEPS", ",", "cfg", ".", "LR_EXP_DECAY_START", ")", "\n", "print_fn", "(", "\"Exponential decay starting at {} steps, lasting {} steps, with decay factor {}\"", ".", "format", "(", "\n", "cfg", ".", "LR_EXP_DECAY_START", ",", "cfg", ".", "LR_EXP_DECAY_STEPS", ",", "cfg", ".", "LR_EXP_DECAY_FACTOR", ")", ")", "\n", "", "elif", "cfg", ".", "LR_DECAY_TYPE", "==", "\"none\"", ":", "\n", "        ", "lr_scheduler", "=", "lrs", ".", "LambdaLR", "(", "optimizer", ",", "lambda", "step", ":", "1.0", ")", "\n", "print_fn", "(", "\"Learning rate decay is disabled.\"", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Invalid learning rate decay type: {}\"", ".", "format", "(", "cfg", ".", "LR_DECAY_TYPE", ")", ")", "\n", "\n", "", "print_fn", "(", "\"{} optimizer created with initial learning rate {}.\"", ".", "format", "(", "cfg", ".", "OPTIMIZER", ",", "cfg", ".", "INITIAL_LR", ")", ")", "\n", "\n", "return", "lr_scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.utils.create_training_data_loader": [[235, 253], ["stemseg.utils.distributed.is_distributed", "torch.utils.data.sampler.BatchSampler", "torch.utils.data.DataLoader", "stemseg.data.distributed_data_sampler.DistributedSampler", "print", "stemseg.data.iteration_based_batch_sampler.IterationBasedBatchSampler", "stemseg.utils.distributed.get_world_size", "stemseg.utils.distributed.get_rank", "torch.utils.data.sampler.RandomSampler", "torch.utils.data.sampler.SequentialSampler", "int", "len"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.distributed.is_distributed", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.distributed.get_world_size", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.distributed.get_rank"], ["", "def", "create_training_data_loader", "(", "dataset", ",", "batch_size", ",", "shuffle", ",", "collate_fn", "=", "None", ",", "num_workers", "=", "0", ",", "elapsed_iters", "=", "0", ")", ":", "\n", "    ", "is_distributed", "=", "dist_utils", ".", "is_distributed", "(", ")", "\n", "if", "is_distributed", ":", "\n", "        ", "sampler", "=", "CustomDistributedSampler", "(", "dataset", ",", "dist_utils", ".", "get_world_size", "(", ")", ",", "dist_utils", ".", "get_rank", "(", ")", ",", "shuffle", ")", "\n", "", "elif", "shuffle", ":", "\n", "        ", "sampler", "=", "RandomSampler", "(", "dataset", ")", "\n", "", "else", ":", "\n", "        ", "sampler", "=", "SequentialSampler", "(", "dataset", ")", "\n", "\n", "", "batch_sampler", "=", "BatchSampler", "(", "sampler", ",", "batch_size", ",", "drop_last", "=", "False", ")", "\n", "if", "elapsed_iters", ">", "0", ":", "\n", "        ", "print", "(", "\"Elapsed iters: {}\"", ".", "format", "(", "elapsed_iters", ")", ")", "\n", "batch_sampler", "=", "IterationBasedBatchSampler", "(", "batch_sampler", ",", "int", "(", "len", "(", "dataset", ")", "/", "batch_size", ")", ",", "elapsed_iters", ")", "\n", "\n", "", "return", "DataLoader", "(", "dataset", ",", "\n", "collate_fn", "=", "collate_fn", ",", "\n", "batch_sampler", "=", "batch_sampler", ",", "\n", "num_workers", "=", "num_workers", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.interrupt_detector.InterruptException.__init__": [[7, 9], ["RuntimeError.__init__"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "super", "(", "self", ".", "__class__", ",", "self", ")", ".", "__init__", "(", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.interrupt_detector.InterruptDetector.__init__": [[12, 14], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "__is_interrupted", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.interrupt_detector.InterruptDetector.start": [[15, 18], ["signal.signal", "signal.signal"], "methods", ["None"], ["", "def", "start", "(", "self", ")", ":", "\n", "        ", "signal", ".", "signal", "(", "signal", ".", "SIGINT", ",", "self", ".", "__set_interrupted", ")", "\n", "signal", ".", "signal", "(", "signal", ".", "SIGTERM", ",", "self", ".", "__set_interrupted", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.interrupt_detector.InterruptDetector.__set_interrupted": [[19, 21], ["None"], "methods", ["None"], ["", "def", "__set_interrupted", "(", "self", ",", "signum", ",", "frame", ")", ":", "\n", "        ", "self", ".", "__is_interrupted", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.interrupt_detector.parse_args": [[25, 43], ["isinstance", "parser.parse_args", "parser.parse_args._get_kwargs", "dict", "combined_args.update", "argparse.Namespace", "len", "argparse.Namespace"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.training.interrupt_detector.parse_args"], ["", "def", "parse_args", "(", "parser", ")", ":", "\n", "    ", "assert", "isinstance", "(", "parser", ",", "ArgumentParser", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "pos_group", ",", "optional_group", "=", "parser", ".", "_action_groups", "[", "0", "]", ",", "parser", ".", "_action_groups", "[", "1", "]", "\n", "args_dict", "=", "args", ".", "_get_kwargs", "(", ")", "\n", "pos_optional_arg_names", "=", "[", "arg", ".", "dest", "for", "arg", "in", "pos_group", ".", "_group_actions", "]", "+", "[", "arg", ".", "dest", "for", "arg", "in", "optional_group", ".", "_group_actions", "]", "\n", "pos_optional_args", "=", "{", "name", ":", "value", "for", "name", ",", "value", "in", "args_dict", "if", "name", "in", "pos_optional_arg_names", "}", "\n", "other_group_args", "=", "dict", "(", ")", "\n", "\n", "if", "len", "(", "parser", ".", "_action_groups", ")", ">", "2", ":", "\n", "        ", "for", "group", "in", "parser", ".", "_action_groups", "[", "2", ":", "]", ":", "\n", "            ", "group_arg_names", "=", "[", "arg", ".", "dest", "for", "arg", "in", "group", ".", "_group_actions", "]", "\n", "other_group_args", "[", "group", ".", "title", "]", "=", "Namespace", "(", "**", "{", "name", ":", "value", "for", "name", ",", "value", "in", "args_dict", "if", "name", "in", "group_arg_names", "}", ")", "\n", "\n", "", "", "combined_args", "=", "pos_optional_args", "\n", "combined_args", ".", "update", "(", "other_group_args", ")", "\n", "return", "Namespace", "(", "**", "combined_args", ")", "", "", ""]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.clusterers.ClustererBase.__init__": [[8, 10], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_time_log", "=", "defaultdict", "(", "list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.clusterers.ClustererBase.__call__": [[11, 19], ["time.time.time", "clusterers.ClustererBase._process", "clusterers.ClustererBase._time_log[].append", "time.time.time"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.clusterers.SequentialClustering._process"], ["", "def", "__call__", "(", "self", ",", "embeddings", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "embeddings", ".", "dtype", "==", "torch", ".", "float32", "\n", "\n", "start_time", "=", "current_time", "(", ")", "\n", "output", "=", "self", ".", "_process", "(", "embeddings", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "duration", "=", "current_time", "(", ")", "-", "start_time", "\n", "self", ".", "_time_log", "[", "embeddings", ".", "shape", "[", "0", "]", "]", ".", "append", "(", "duration", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.clusterers.ClustererBase._process": [[20, 22], ["NotImplementedError"], "methods", ["None"], ["", "def", "_process", "(", "self", ",", "embeddings", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Must be implemented by derived class\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.clusterers.ClustererBase.reset_time_log": [[23, 25], ["collections.defaultdict"], "methods", ["None"], ["", "def", "reset_time_log", "(", "self", ")", ":", "\n", "        ", "self", ".", "_time_log", "=", "defaultdict", "(", "list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.clusterers.ClustererBase.average_time": [[26, 30], ["sum", "list", "sum", "float", "clusterers.ClustererBase._time_log.values", "len"], "methods", ["None"], ["", "@", "property", "\n", "def", "average_time", "(", "self", ")", ":", "\n", "        ", "all_times", "=", "sum", "(", "list", "(", "self", ".", "_time_log", ".", "values", "(", ")", ")", ",", "[", "]", ")", "\n", "return", "sum", "(", "all_times", ")", "/", "float", "(", "len", "(", "all_times", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.clusterers.SequentialClustering.__init__": [[35, 51], ["clusterers.ClustererBase.__init__"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "primary_prob_thresh", ",", "secondary_prob_thresh", ",", "min_seediness_prob", ",", "\n", "n_free_dims", ",", "free_dim_stds", ",", "device", ",", "max_instances", "=", "20", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "thresholding_mode", "=", "\"probability\"", "\n", "\n", "self", ".", "primary_prob_thresh", "=", "primary_prob_thresh", "\n", "self", ".", "secondary_prob_thresh", "=", "secondary_prob_thresh", "\n", "\n", "self", ".", "min_seediness_prob", "=", "min_seediness_prob", "\n", "\n", "self", ".", "max_instances", "=", "max_instances", "\n", "\n", "self", ".", "n_free_dims", "=", "n_free_dims", "\n", "self", ".", "free_dim_stds", "=", "free_dim_stds", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.clusterers.SequentialClustering.distances_to_prob": [[52, 55], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "distances_to_prob", "(", "distances", ")", ":", "\n", "        ", "return", "(", "-", "0.5", "*", "distances", ")", ".", "exp", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.clusterers.SequentialClustering.compute_distance": [[56, 59], ["torch.pow"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "compute_distance", "(", "embeddings", ",", "center", ",", "bandwidth", ")", ":", "\n", "        ", "return", "(", "torch", ".", "pow", "(", "embeddings", "-", "center", ",", "2", ")", "*", "bandwidth", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "sqrt", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.clusterers.SequentialClustering._process": [[60, 166], ["torch.no_grad", "embeddings.to.to.to", "torch.is_tensor", "bandwidths.expand_as.expand_as.to", "torch.is_tensor", "seediness.squeeze().to.squeeze().to.squeeze().to", "kwargs.get", "torch.full", "range", "embeddings.to.to.numel", "bandwidths.expand_as.expand_as.expand_as", "torch.tensor().to", "available_embeddings_mask.sum", "clusterers.SequentialClustering._get_next_instance_center", "torch.cat", "unique_labels.append", "label_centers.append", "label_stds.append", "torch.full_like", "clusterers.SequentialClustering.compute_distance", "torch.stack.append", "torch.zeros_like", "clusterers.SequentialClustering.distances_to_prob", "torch.where", "torch.stack", "torch.stack.max", "clusterers.SequentialClustering.distances_to_prob", "torch.where", "torch.where.to", "torch.zeros", "seediness.squeeze().to.squeeze().to.squeeze", "torch.zeros().to", "torch.zeros().to", "next_center.tolist", "torch.tensor", "label_masks.append", "torch.tensor", "match_mask.cpu", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.clusterers.SequentialClustering._get_next_instance_center", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.clusterers.SequentialClustering.compute_distance", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.clusterers.SequentialClustering.distances_to_prob", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.clusterers.SequentialClustering.distances_to_prob", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.cpu"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_process", "(", "self", ",", "embeddings", ",", "bandwidths", ",", "seediness", ",", "cluster_label_start", "=", "1", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "embeddings", ".", "numel", "(", ")", "==", "0", ":", "\n", "            ", "return", "torch", ".", "zeros", "(", "0", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "embeddings", ".", "device", ")", ",", "{", "\n", "'instance_labels'", ":", "[", "]", ",", "\n", "'instance_centers'", ":", "[", "]", ",", "\n", "'instance_stds'", ":", "[", "]", ",", "\n", "'instance_masks'", ":", "[", "]", "\n", "}", "\n", "\n", "", "input_device", "=", "embeddings", ".", "device", "\n", "embeddings", "=", "embeddings", ".", "to", "(", "device", "=", "self", ".", "device", ")", "\n", "\n", "assert", "torch", ".", "is_tensor", "(", "bandwidths", ")", "\n", "if", "bandwidths", ".", "shape", "[", "0", "]", "!=", "embeddings", ".", "shape", "[", "0", "]", ":", "\n", "            ", "bandwidths", "=", "bandwidths", ".", "expand_as", "(", "embeddings", ")", "\n", "\n", "", "bandwidths", "=", "bandwidths", ".", "to", "(", "device", "=", "self", ".", "device", ")", "\n", "\n", "if", "self", ".", "n_free_dims", "==", "0", ":", "\n", "            ", "assert", "embeddings", ".", "shape", "==", "bandwidths", ".", "shape", "\n", "\n", "", "assert", "torch", ".", "is_tensor", "(", "seediness", ")", "\n", "seediness", ".", "shape", "[", "0", "]", "==", "embeddings", ".", "shape", "[", "0", "]", ",", "\"Seediness shape: {}, embeddings shape: {}\"", ".", "format", "(", "\n", "seediness", ".", "shape", ",", "embeddings", ".", "shape", ")", "\n", "seediness", "=", "seediness", ".", "squeeze", "(", "1", ")", ".", "to", "(", "device", "=", "self", ".", "device", ")", "# [N, 1] -> [N]", "\n", "\n", "label_masks", "=", "[", "]", "\n", "unique_labels", "=", "[", "]", "\n", "label_centers", "=", "[", "]", "\n", "label_stds", "=", "[", "]", "\n", "\n", "return_label_masks", "=", "kwargs", ".", "get", "(", "\"return_label_masks\"", ",", "False", ")", "\n", "\n", "total_points", "=", "embeddings", ".", "shape", "[", "0", "]", "\n", "labels", "=", "torch", ".", "full", "(", "(", "total_points", ",", ")", ",", "-", "1", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "embeddings", ".", "device", ")", "\n", "label_distances", "=", "[", "]", "\n", "num_unassigned_pts", "=", "total_points", "\n", "\n", "if", "self", ".", "n_free_dims", ">", "0", ":", "\n", "            ", "free_dim_stds", "=", "torch", ".", "tensor", "(", "self", ".", "free_dim_stds", ")", ".", "to", "(", "embeddings", ")", "\n", "free_dim_bandwidths", "=", "1.", "/", "(", "free_dim_stds", "**", "2", ")", "\n", "", "else", ":", "\n", "            ", "free_dim_stds", ",", "free_dim_bandwidths", "=", "torch", ".", "zeros", "(", "0", ")", ".", "to", "(", "embeddings", ")", ",", "torch", ".", "zeros", "(", "0", ")", ".", "to", "(", "embeddings", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "max_instances", ")", ":", "\n", "            ", "available_embeddings_mask", "=", "labels", "==", "-", "1", "\n", "num_unassigned_pts", "=", "available_embeddings_mask", ".", "sum", "(", "dtype", "=", "torch", ".", "long", ")", "\n", "if", "num_unassigned_pts", "==", "0", ":", "\n", "                ", "break", "\n", "\n", "", "next_center", ",", "bandwidth", ",", "prob", "=", "self", ".", "_get_next_instance_center", "(", "\n", "embeddings", "[", "available_embeddings_mask", "]", ",", "bandwidths", "[", "available_embeddings_mask", "]", ",", "\n", "seediness", "[", "available_embeddings_mask", "]", ")", "\n", "\n", "if", "prob", "<", "self", ".", "min_seediness_prob", ":", "\n", "                ", "break", "\n", "\n", "", "bandwidth", "=", "torch", ".", "cat", "(", "(", "bandwidth", ",", "free_dim_bandwidths", ")", ",", "0", ")", "\n", "\n", "instance_label", "=", "i", "+", "cluster_label_start", "\n", "\n", "unique_labels", ".", "append", "(", "instance_label", ")", "\n", "label_centers", ".", "append", "(", "next_center", ".", "tolist", "(", ")", ")", "\n", "label_stds", ".", "append", "(", "(", "1.", "/", "bandwidth", ")", ".", "clamp", "(", "min", "=", "1e-8", ")", ".", "sqrt", "(", ")", ".", "tolist", "(", ")", ")", "\n", "\n", "# compute probability for all embedding under this center and bandwidth", "\n", "distances", "=", "torch", ".", "full_like", "(", "labels", ",", "1e8", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "embeddings", ".", "device", ")", "\n", "distances", "[", "available_embeddings_mask", "]", "=", "self", ".", "compute_distance", "(", "\n", "embeddings", "[", "available_embeddings_mask", "]", ",", "next_center", ",", "bandwidth", ")", "\n", "\n", "# store in dict for later use", "\n", "label_distances", ".", "append", "(", "distances", ")", "\n", "\n", "# update labels for all embeddings which are unassigned and fall within the primary prob threshold", "\n", "probs", "=", "torch", ".", "zeros_like", "(", "distances", ")", "\n", "probs", "[", "available_embeddings_mask", "]", "=", "self", ".", "distances_to_prob", "(", "distances", "[", "available_embeddings_mask", "]", ")", "\n", "match_mask", "=", "(", "probs", ">", "self", ".", "primary_prob_thresh", ")", "&", "available_embeddings_mask", "\n", "\n", "# else:", "\n", "#     raise ValueError(\"Should not be here\")", "\n", "\n", "labels", "=", "torch", ".", "where", "(", "match_mask", ",", "torch", ".", "tensor", "(", "instance_label", ",", "device", "=", "self", ".", "device", ")", ",", "labels", ")", "\n", "\n", "if", "return_label_masks", ":", "\n", "                ", "label_masks", ".", "append", "(", "match_mask", ".", "cpu", "(", ")", ")", "\n", "\n", "# perform secondary assignment for unassigned points", "\n", "", "", "if", "num_unassigned_pts", ">", "0", "and", "label_distances", ":", "\n", "            ", "label_distances", "=", "torch", ".", "stack", "(", "label_distances", ",", "dim", "=", "1", ")", "# [E, N]  (N = number of clusters)", "\n", "\n", "# find ID of cluster to which each point has the highest probability of belonging", "\n", "min_distance", ",", "min_distance_label", "=", "label_distances", ".", "max", "(", "dim", "=", "1", ")", "\n", "min_distance_label", "+=", "cluster_label_start", "\n", "\n", "probs", "=", "self", ".", "distances_to_prob", "(", "min_distance", ")", "\n", "update_mask", "=", "(", "probs", ">", "self", ".", "secondary_prob_thresh", ")", "&", "available_embeddings_mask", "\n", "\n", "labels", "=", "torch", ".", "where", "(", "update_mask", ",", "min_distance_label", ",", "labels", ")", "\n", "\n", "", "return", "labels", ".", "to", "(", "input_device", ")", ",", "{", "\n", "'instance_labels'", ":", "unique_labels", ",", "\n", "'instance_centers'", ":", "label_centers", ",", "\n", "'instance_stds'", ":", "label_stds", ",", "\n", "'instance_masks'", ":", "label_masks", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.clusterers.SequentialClustering._get_next_instance_center": [[168, 176], ["seediness.argmax", "embeddings.numel"], "methods", ["None"], ["", "def", "_get_next_instance_center", "(", "self", ",", "embeddings", ",", "bandwidths", ",", "seediness", ")", ":", "\n", "        ", "if", "self", ".", "n_free_dims", "==", "0", ":", "\n", "            ", "assert", "embeddings", ".", "shape", "==", "bandwidths", ".", "shape", "\n", "", "assert", "embeddings", ".", "numel", "(", ")", ">", "0", "\n", "assert", "embeddings", ".", "shape", "[", "0", "]", "==", "seediness", ".", "shape", "[", "0", "]", "\n", "\n", "max_prob_idx", "=", "seediness", ".", "argmax", "(", ")", "\n", "return", "embeddings", "[", "max_prob_idx", "]", ",", "bandwidths", "[", "max_prob_idx", "]", ",", "seediness", "[", "max_prob_idx", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.main.TrackGenerator.__init__": [[53, 83], ["stemseg.modeling.inference_model.InferenceModel().cuda", "os.path.join", "os.path.join", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "stemseg.inference.online_chainer.OnlineChainer", "main.TrackGenerator.create_clusterer", "stemseg.modeling.inference_model.InferenceModel"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.cuda", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.main.TrackGenerator.create_clusterer"], ["# wrap model and optimizer around apex if mixed precision training is enabled", "\n", "if", "cfg", ".", "MIXED_PRECISION", ":", "\n", "            ", "assert", "APEX_IMPORTED", "\n", "self", ".", "console_logger", ".", "info", "(", "\"Mixed precision training is enabled.\"", ")", "\n", "self", ".", "model", ",", "self", ".", "optimizer", "=", "amp", ".", "initialize", "(", "\n", "self", ".", "model", ",", "self", ".", "optimizer", ",", "opt_level", "=", "cfg", ".", "MIXED_PRECISION_OPT_LEVEL", ")", "\n", "\n", "", "if", "dist_utils", ".", "is_distributed", "(", ")", ":", "\n", "            ", "self", ".", "model", "=", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "\n", "self", ".", "model", ",", "device_ids", "=", "[", "self", ".", "local_rank", "]", ",", "output_device", "=", "self", ".", "local_rank", ",", "\n", "find_unused_parameters", "=", "cfg", ".", "FREEZE_BACKBONE", "\n", ")", "\n", "\n", "", "self", ".", "total_iterations", "=", "cfg", ".", "MAX_ITERATIONS", "\n", "\n", "# create LR scheduler", "\n", "self", ".", "lr_scheduler", "=", "create_lr_scheduler", "(", "self", ".", "optimizer", ",", "cfg", ",", "self", ".", "console_logger", ".", "info", ")", "\n", "\n", "# create parameter logger", "\n", "self", ".", "logger", "=", "None", "\n", "if", "self", ".", "is_main_process", ":", "\n", "            ", "self", ".", "logger", "=", "TrainingLogger", "(", "self", ".", "log_dir", ")", "\n", "\n", "", "self", ".", "interrupt_detector", "=", "InterruptDetector", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", "\n", "\n", "self", ".", "elapsed_iterations", "=", "0", "\n", "\n", "assert", "not", "(", "args", ".", "restore_session", "and", "args", ".", "initial_ckpt", ")", "\n", "\n", "if", "args", ".", "restore_session", ":", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.main.TrackGenerator.create_clusterer": [[84, 92], ["stemseg.inference.clusterers.SequentialClustering", "stemseg.modeling.embedding_utils.get_nb_free_dims"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.modeling.embedding_utils.get_nb_free_dims"], ["            ", "self", ".", "console_logger", ".", "info", "(", "\"Restoring session from {}\"", ".", "format", "(", "args", ".", "restore_session", ")", ")", "\n", "self", ".", "restore_session", "(", "torch", ".", "load", "(", "args", ".", "restore_session", ",", "map_location", "=", "self", ".", "local_device", ")", ")", "\n", "", "elif", "args", ".", "initial_ckpt", ":", "\n", "            ", "self", ".", "console_logger", ".", "info", "(", "\"Loading model weights from checkpoint at: {}\"", ".", "format", "(", "args", ".", "initial_ckpt", ")", ")", "\n", "self", ".", "_model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "args", ".", "initial_ckpt", ",", "map_location", "=", "self", ".", "local_device", ")", "[", "'model'", "]", ")", "\n", "\n", "", "", "@", "property", "\n", "def", "_model", "(", "self", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "model", ",", "nn", ".", "parallel", ".", "DistributedDataParallel", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.main.TrackGenerator.get_fg_masks_from_seediness": [[93, 104], ["collections.defaultdict", "subseq_seediness.cuda().squeeze.cuda().squeeze.cuda().squeeze", "enumerate", "sorted", "subseq_seediness.cuda().squeeze.cuda().squeeze.cuda", "collections.defaultdict.keys", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.cuda"], ["            ", "return", "self", ".", "model", ".", "module", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "model", "\n", "\n", "", "", "def", "backup_session", "(", "self", ")", ":", "\n", "        ", "model_save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "model_save_dir", ",", "'{:06d}.pth'", ".", "format", "(", "self", ".", "elapsed_iterations", ")", ")", "\n", "\n", "save_dict", "=", "{", "'model'", ":", "self", ".", "_model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'lr_scheduler'", ":", "self", ".", "lr_scheduler", ".", "state_dict", "(", ")", ",", "\n", "'logger'", ":", "self", ".", "logger", ".", "state_dict", "(", ")", ",", "\n", "'iterations'", ":", "self", ".", "elapsed_iterations", "}", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.main.TrackGenerator.start": [[105, 124], ["range", "print", "print", "print", "print", "print", "isinstance", "len", "print", "main.TrackGenerator.process_sequence", "len", "str", "len", "stemseg.utils.Timer.get_duration", "stemseg.utils.Timer.get_duration", "stemseg.utils.Timer.get_durations_sum"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.youtube_vis.YoutubeVISOutputGenerator.process_sequence", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get_duration", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get_duration", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get_durations_sum"], ["\n", "if", "global_cfg", ".", "TRAINING", ".", "MIXED_PRECISION", ":", "\n", "            ", "save_dict", "[", "'amp'", "]", "=", "amp", ".", "state_dict", "(", ")", "\n", "\n", "", "torch", ".", "save", "(", "save_dict", ",", "model_save_path", ",", "_use_new_zipfile_serialization", "=", "False", ")", "\n", "self", ".", "console_logger", ".", "info", "(", "\"Checkpoint saved to: {}\"", ".", "format", "(", "model_save_path", ")", ")", "\n", "return", "model_save_path", "\n", "\n", "", "def", "restore_session", "(", "self", ",", "restore_dict", ")", ":", "\n", "        ", "assert", "'model'", "in", "restore_dict", ",", "\"Restore state dict contains no entry named 'model'\"", "\n", "self", ".", "_model", ".", "load_state_dict", "(", "restore_dict", "[", "'model'", "]", ")", "\n", "\n", "assert", "'optimizer'", "in", "restore_dict", ",", "\"Restore state dict contains no entry named 'optimizer'\"", "\n", "self", ".", "optimizer", ".", "load_state_dict", "(", "(", "restore_dict", "[", "'optimizer'", "]", ")", ")", "\n", "\n", "assert", "'lr_scheduler'", "in", "restore_dict", ",", "\"Restore state dict contains no entry named 'lr_scheduler'\"", "\n", "self", ".", "lr_scheduler", ".", "load_state_dict", "(", "restore_dict", "[", "'lr_scheduler'", "]", ")", "\n", "\n", "assert", "'iterations'", "in", "restore_dict", ",", "\"Restore state dict contains no entry named 'iterations'\"", "\n", "self", ".", "elapsed_iterations", "=", "restore_dict", "[", "'iterations'", "]", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.main.TrackGenerator.process_sequence": [[125, 131], ["main.TrackGenerator.do_inference", "main.TrackGenerator.do_clustering", "len"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.main.TrackGenerator.do_inference", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.main.TrackGenerator.do_clustering"], ["\n", "if", "'amp'", "in", "restore_dict", "and", "global_cfg", ".", "TRAINING", ".", "MIXED_PRECISION", ":", "\n", "            ", "amp", ".", "load_state_dict", "(", "restore_dict", "[", "'amp'", "]", ")", "\n", "\n", "", "if", "self", ".", "is_main_process", ":", "\n", "            ", "assert", "'logger'", "in", "restore_dict", ",", "\"Restore state dict contains no entry named 'logger'\"", "\n", "self", ".", "logger", ".", "load_state_dict", "(", "restore_dict", "[", "'logger'", "]", ")", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.main.TrackGenerator.do_inference": [[132, 150], ["stemseg.utils.Timer.log_duration", "main.get_subsequence_frames", "main.TrackGenerator.model", "torch.is_tensor", "len", "os.path.join", "print", "print", "main.TrackGenerator.get_fg_masks_from_seediness"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.log_duration", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.main.get_subsequence_frames", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.main.TrackGenerator.get_fg_masks_from_seediness"], ["\n", "", "", "def", "start", "(", "self", ",", "opts", ")", ":", "\n", "        ", "max_samples_per_gpu", "=", "self", ".", "cfg", ".", "MAX_SAMPLES_PER_GPU", "\n", "batch_size", "=", "self", ".", "cfg", ".", "BATCH_SIZE", "\n", "accumulate_gradients", "=", "self", ".", "cfg", ".", "ACCUMULATE_GRADIENTS", "\n", "\n", "dataset", "=", "create_training_dataset", "(", "self", ".", "total_iterations", "*", "batch_size", ",", "print_fn", "=", "self", ".", "console_logger", ".", "info", ")", "\n", "\n", "if", "accumulate_gradients", ":", "\n", "            ", "assert", "batch_size", ">=", "self", ".", "num_gpus", ",", "\"Batch size ({}) must be >= number of GPUs ({})\"", ".", "format", "(", "\n", "batch_size", ",", "self", ".", "num_gpus", ")", "\n", "\n", "optimizer_step_interval", "=", "int", "(", "batch_size", "/", "(", "max_samples_per_gpu", "*", "self", ".", "num_gpus", ")", ")", "\n", "assert", "batch_size", "%", "max_samples_per_gpu", "==", "0", ",", "\"Batch size ({}) must be divisible by number of samples per GPU ({})\"", ".", "format", "(", "\n", "batch_size", ",", "max_samples_per_gpu", ")", "\n", "\n", "if", "self", ".", "is_main_process", ":", "\n", "                ", "self", ".", "console_logger", ".", "info", "(", "\"Optimizer will be run every {} iterations\"", ".", "format", "(", "optimizer_step_interval", ")", ")", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.main.TrackGenerator.do_clustering": [[151, 170], ["stemseg.utils.Timer.log_duration", "tqdm.tqdm.tqdm", "main.TrackGenerator.chainer.process", "main.TrackGenerator.output_generator.process_sequence", "enumerate", "subseq_dicts.append", "len"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.log_duration", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.online_chainer.OnlineChainer.process", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.youtube_vis.YoutubeVISOutputGenerator.process_sequence"], ["", "", "else", ":", "\n", "            ", "if", "batch_size", ">", "max_samples_per_gpu", ":", "\n", "                ", "raise", "ValueError", "(", "\"A batch size of {} cannot be processed. Max samples per GPU = {}\"", ".", "format", "(", "\n", "batch_size", ",", "max_samples_per_gpu", ")", ")", "\n", "\n", "", "max_samples_per_gpu", "=", "batch_size", "\n", "optimizer_step_interval", "=", "1", "\n", "\n", "", "if", "self", ".", "is_main_process", ":", "\n", "            ", "n_trainable_params", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "self", ".", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "self", ".", "console_logger", ".", "info", "(", "\n", "\"Commencing/resuming training with the following settings:\\n\"", "\n", "\"- Elapsed iterations: %d\\n\"", "\n", "\"- Total iterations: %d\\n\"", "\n", "\"- Batch size: %d\\n\"", "\n", "\"- Optimizer step interval: %d\\n\"", "\n", "\"- Model save directory: %s\\n\"", "\n", "\"- Save interval: %d\\n\"", "\n", "\"- Trainable parameters: %d\"", "%", "(", "\n", "self", ".", "elapsed_iterations", ",", "self", ".", "total_iterations", ",", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.main.get_subsequence_frames": [[23, 50], ["range", "subseq_idxes.append", "subseq_idxes.append", "list", "list", "NotImplementedError", "range", "range", "range", "range", "list", "range", "range", "stemseg.config.cfg.INPUT.NUM_FRAMES"], "function", ["None"], ["import", "yaml", "\n", "\n", "try", ":", "\n", "    ", "import", "apex", ".", "amp", "as", "amp", "\n", "APEX_IMPORTED", "=", "True", "\n", "", "except", "ImportError", "as", "_", ":", "\n", "    ", "print", "(", "\"Could not import apex. Mixed precision training will be unavailable.\"", ")", "\n", "APEX_IMPORTED", "=", "False", "\n", "\n", "\n", "", "class", "Trainer", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "cfg", ",", "model_save_dir", ",", "args", ",", "logger", ")", ":", "\n", "        ", "self", ".", "num_gpus", "=", "dist_utils", ".", "get_world_size", "(", ")", "\n", "self", ".", "local_rank", "=", "dist_utils", ".", "get_rank", "(", ")", "\n", "self", ".", "local_device", "=", "dist_utils", ".", "get_device", "(", ")", "\n", "self", ".", "is_main_process", "=", "dist_utils", ".", "is_main_process", "(", ")", "\n", "\n", "self", ".", "console_logger", "=", "logger", "\n", "\n", "self", ".", "model_save_dir", "=", "model_save_dir", "\n", "self", ".", "log_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "model_save_dir", ",", "'logs'", ")", "\n", "\n", "if", "self", ".", "is_main_process", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "log_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "self", ".", "model", "=", "build_model", "(", "restore_pretrained_backbone_wts", "=", "True", ",", "logger", "=", "self", ".", "console_logger", ")", ".", "to", "(", "self", ".", "local_device", ")", "\n", "\n", "# create optimizer", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.main.configure_directories": [[173, 183], ["os.makedirs", "os.path.join", "os.path.isabs", "os.path.join", "os.path.dirname", "os.path.dirname"], "function", ["None"], ["\n", "self", ".", "logger", ".", "total_iterations", "=", "self", ".", "total_iterations", "\n", "self", ".", "logger", ".", "start_timer", "(", ")", "\n", "\n", "", "output_manager", "=", "ModelOutputManager", "(", "optimizer_step_interval", ")", "\n", "\n", "data_loader", "=", "create_training_data_loader", "(", "\n", "dataset", ",", "max_samples_per_gpu", ",", "True", ",", "collate_fn", ",", "opts", ".", "num_cpu_workers", ",", "\n", "self", ".", "elapsed_iterations", ")", "\n", "\n", "self", ".", "interrupt_detector", ".", "start", "(", ")", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.main.load_cfg": [[185, 199], ["os.path.join", "print", "stemseg.config.cfg.merge_from_file", "os.path.dirname", "os.path.exists", "os.path.join", "stemseg.utils.RepoPaths.configs_dir"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.config.config.YamlConfig.merge_from_file", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.global_registry.GlobalRegistry.exists", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.constants.RepoPaths.configs_dir"], ["sub_iter_idx", "=", "0", "\n", "\n", "for", "image_seqs", ",", "targets", ",", "meta_info", "in", "data_loader", ":", "\n", "            ", "model_output", "=", "self", ".", "model", "(", "\n", "image_seqs", ".", "to", "(", "device", "=", "self", ".", "local_device", ")", ",", "tensor_struct_to", "(", "targets", ",", "device", "=", "self", ".", "local_device", ")", ")", "\n", "\n", "dist_utils", ".", "synchronize", "(", ")", "\n", "if", "self", ".", "interrupt_detector", ".", "is_interrupted", ":", "\n", "                ", "raise", "InterruptException", "(", ")", "\n", "\n", "", "optim_loss", "=", "output_manager", "(", "model_output", ")", "\n", "\n", "if", "self", ".", "cfg", ".", "MIXED_PRECISION", ":", "\n", "                ", "with", "amp", ".", "scale_loss", "(", "optim_loss", ",", "self", ".", "optimizer", ")", "as", "scaled_loss", ":", "\n", "                    ", "scaled_loss", ".", "backward", "(", ")", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.main.configure_input_dims": [[201, 227], ["print", "stemseg.config.cfg.INPUT.update_param", "stemseg.config.cfg.INPUT.update_param", "stemseg.config.cfg.INPUT.update_param", "stemseg.config.cfg.INPUT.update_param", "float", "float", "int", "stemseg.config.cfg.INPUT.update_param", "stemseg.config.cfg.INPUT.update_param", "ValueError", "round", "float", "float", "int", "round"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.config.config.YamlConfig.update_param", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.config.config.YamlConfig.update_param", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.config.config.YamlConfig.update_param", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.config.config.YamlConfig.update_param", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.config.config.YamlConfig.update_param", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.config.config.YamlConfig.update_param"], ["                ", "optim_loss", ".", "backward", "(", ")", "\n", "\n", "", "sub_iter_idx", "+=", "1", "\n", "if", "sub_iter_idx", "<", "optimizer_step_interval", ":", "\n", "                ", "continue", "\n", "\n", "", "sub_iter_idx", "=", "0", "\n", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "lr_scheduler", ".", "step", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "elapsed_iterations", "+=", "1", "\n", "\n", "logging_vars", ",", "_", "=", "output_manager", ".", "reset", "(", ")", "\n", "logging_vars", "=", "dist_utils", ".", "reduce_dict", "(", "logging_vars", ",", "average", "=", "True", ")", "\n", "logging_vars", "=", "{", "k", ":", "v", ".", "item", "(", ")", "for", "k", ",", "v", "in", "logging_vars", ".", "items", "(", ")", "}", "\n", "\n", "if", "self", ".", "is_main_process", ":", "\n", "                ", "add_to_summary", "=", "self", ".", "elapsed_iterations", "%", "opts", ".", "summary_interval", "==", "0", "\n", "self", ".", "logger", ".", "add_training_point", "(", "self", ".", "elapsed_iterations", ",", "add_to_summary", ",", "**", "logging_vars", ")", "\n", "\n", "if", "hasattr", "(", "self", ".", "lr_scheduler", ",", "\"get_last_lr\"", ")", ":", "# PyTorch versions > 1.5", "\n", "                    ", "logging_vars", "[", "'lr'", "]", "=", "self", ".", "lr_scheduler", ".", "get_last_lr", "(", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "                    ", "logging_vars", "[", "'lr'", "]", "=", "self", ".", "lr_scheduler", ".", "get_lr", "(", ")", "[", "0", "]", "\n", "\n", "", "if", "self", ".", "elapsed_iterations", "%", "opts", ".", "display_interval", "==", "0", ":", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.main.main": [[229, 287], ["main.load_cfg", "main.configure_input_dims", "main.configure_directories", "main.TrackGenerator", "main.TrackGenerator.start", "stemseg.inference.output_utils.KittiMOTSOutputGenerator.save", "print", "print", "stemseg.config.cfg.CLUSTERING.update_param", "stemseg.data.generic_video_dataset_parser.parse_generic_video_dataset", "stemseg.inference.output_utils.DavisOutputGenerator", "stemseg.data.DavisUnsupervisedPaths.trainval_base_dir", "stemseg.data.DavisUnsupervisedPaths.val_vds_file", "stemseg.data.generic_video_dataset_parser.parse_generic_video_dataset", "stemseg.inference.output_utils.YoutubeVISOutputGenerator", "stemseg.data.YoutubeVISPaths.val_base_dir", "stemseg.data.YoutubeVISPaths.val_vds_file", "stemseg.data.generic_video_dataset_parser.parse_generic_video_dataset", "stemseg.inference.output_utils.KittiMOTSOutputGenerator", "ValueError", "stemseg.data.KITTIMOTSPaths.train_images_dir", "stemseg.data.KITTIMOTSPaths.val_vds_file"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.main.load_cfg", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.main.configure_input_dims", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.main.configure_directories", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.main.TrackGenerator.start", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.youtube_vis.YoutubeVISOutputGenerator.save", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.config.config.YamlConfig.update_param", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_video_dataset_parser.parse_generic_video_dataset", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.DavisUnsupervisedPaths.trainval_base_dir", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.KITTIMOTSPaths.val_vds_file", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_video_dataset_parser.parse_generic_video_dataset", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.YoutubeVISPaths.val_base_dir", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.KITTIMOTSPaths.val_vds_file", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_video_dataset_parser.parse_generic_video_dataset", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.KITTIMOTSPaths.train_images_dir", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.KITTIMOTSPaths.val_vds_file"], ["", "else", ":", "\n", "                    ", "log_func", "=", "self", ".", "console_logger", ".", "debug", "\n", "\n", "", "eta", ",", "avg_time_per_iter", "=", "self", ".", "logger", ".", "compute_eta", "(", "as_string", "=", "True", ")", "\n", "log_func", "(", "\n", "\"It: {:05d} - {:s} - ETA: {:s} - sec/it: {:.3f}\"", ".", "format", "(", "\n", "self", ".", "elapsed_iterations", ",", "\n", "var_keys_to_str", "(", "logging_vars", ")", ",", "\n", "eta", ",", "\n", "avg_time_per_iter", ")", ")", "\n", "\n", "", "if", "self", ".", "elapsed_iterations", "%", "opts", ".", "save_interval", "==", "0", ":", "\n", "                ", "if", "self", ".", "is_main_process", ":", "\n", "# remove outdated checkpoints", "\n", "                    ", "checkpoints", "=", "sorted", "(", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "model_save_dir", ",", "'%06d.pth'", ")", ")", ")", "\n", "if", "len", "(", "checkpoints", ")", ">", "opts", ".", "ckpts_to_keep", ":", "\n", "                        ", "for", "ckpt_path", "in", "checkpoints", "[", ":", "-", "opts", ".", "ckpts_to_keep", "]", ":", "\n", "                            ", "os", ".", "remove", "(", "ckpt_path", ")", "\n", "\n", "", "", "self", ".", "backup_session", "(", ")", "\n", "\n", "", "dist_utils", ".", "synchronize", "(", ")", "\n", "\n", "", "", "self", ".", "console_logger", ".", "info", "(", "\n", "\"Training complete\\n\"", "\n", "\"Model(s) saved to: %s\\n\"", "\n", "\"Log file(s) saved to: %s\\n\"", "%", "(", "self", ".", "model_save_dir", ",", "self", ".", "log_dir", ")", ")", "\n", "\n", "\n", "", "", "def", "create_logger", "(", "args", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "\"MaskTCNNTrainLogger\"", ")", "\n", "if", "dist_utils", ".", "is_main_process", "(", ")", ":", "\n", "        ", "logger", ".", "setLevel", "(", "args", ".", "log_level", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "setLevel", "(", "args", ".", "subprocess_log_level", ")", "\n", "\n", "", "ch", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\"[%(proc_id)d] %(asctime)s - %(levelname)s - %(message)s\"", ",", "\"%H:%M:%S\"", ")", "\n", "extra", "=", "{", "\"proc_id\"", ":", "dist_utils", ".", "get_rank", "(", ")", "}", "\n", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "ch", ")", "\n", "logger", ".", "propagate", "=", "False", "\n", "\n", "logger", "=", "logging", ".", "LoggerAdapter", "(", "logger", ",", "extra", ")", "\n", "logger", ".", "propagate", "=", "False", "\n", "\n", "return", "logger", "\n", "\n", "\n", "", "def", "setup_cfg", "(", "args", ",", "model_dir", ",", "ignore_existing_cfg", ")", ":", "\n", "# if a config file has been provided, load it", "\n", "    ", "if", "args", ".", "cfg", ":", "\n", "        ", "print", "(", "\"[ INFO] Loading config from {}\"", ".", "format", "(", "args", ".", "cfg", ")", ")", "\n", "global_cfg", ".", "merge_from_file", "(", "args", ".", "cfg", ")", "\n", "return", "\n", "\n", "", "if", "ignore_existing_cfg", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.online_chainer.TrackContainer.__init__": [[29, 34], ["range", "range"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "num_frames", ")", ":", "\n", "        ", "self", ".", "_frame_labels", "=", "[", "None", "for", "_", "in", "range", "(", "num_frames", ")", "]", "\n", "self", ".", "_is_frozen", "=", "[", "False", "for", "_", "in", "range", "(", "num_frames", ")", "]", "\n", "\n", "self", ".", "_highest_instance_id", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.online_chainer.TrackContainer.add_labels": [[35, 50], ["all", "zip", "labels_t.numel", "max", "labels_t.max().item", "labels_t.max"], "methods", ["None"], ["", "def", "add_labels", "(", "self", ",", "frame_nums", ",", "labels", ")", ":", "\n", "        ", "\"\"\"\n        Assign labels to the foreground pixels of a given frame\n        :param frame_nums: list(int)\n        :param labels: list(tensor(N, E)). These should be the global track labels and not the cluster labels within a\n        given sub-sequence.\n        :return: The next available instance ID.\n        \"\"\"", "\n", "assert", "all", "(", "[", "self", ".", "_frame_labels", "[", "t", "]", "is", "None", "for", "t", "in", "frame_nums", "]", ")", "\n", "for", "t", ",", "labels_t", "in", "zip", "(", "frame_nums", ",", "labels", ")", ":", "\n", "            ", "self", ".", "_frame_labels", "[", "t", "]", "=", "labels_t", "\n", "if", "labels_t", ".", "numel", "(", ")", ">", "0", ":", "\n", "                ", "self", ".", "_highest_instance_id", "=", "max", "(", "self", ".", "_highest_instance_id", ",", "labels_t", ".", "max", "(", ")", ".", "item", "(", ")", ")", "\n", "\n", "", "", "return", "self", ".", "_highest_instance_id", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.online_chainer.TrackContainer.labels_exist": [[51, 58], ["None"], "methods", ["None"], ["", "def", "labels_exist", "(", "self", ",", "frame_num", ")", ":", "\n", "        ", "\"\"\"\n        Returns true if track labels have already been assigned to a given frame\n        :param frame_num: int. The frame ID (0, ..., T-1)\n        :return:\n        \"\"\"", "\n", "return", "self", ".", "_frame_labels", "[", "frame_num", "]", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.online_chainer.TrackContainer.has_fg_pixels": [[59, 62], ["online_chainer.TrackContainer.labels_exist", "online_chainer.TrackContainer._frame_labels[].numel"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.online_chainer.TrackContainer.labels_exist"], ["", "def", "has_fg_pixels", "(", "self", ",", "frame_num", ")", ":", "\n", "        ", "assert", "self", ".", "labels_exist", "(", "frame_num", ")", "\n", "return", "self", ".", "_frame_labels", "[", "frame_num", "]", ".", "numel", "(", ")", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.online_chainer.TrackContainer.get_labels": [[63, 66], ["all", "online_chainer.TrackContainer.labels_exist"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.online_chainer.TrackContainer.labels_exist"], ["", "def", "get_labels", "(", "self", ",", "frame_nums", ")", ":", "\n", "        ", "assert", "all", "(", "self", ".", "labels_exist", "(", "t", ")", "for", "t", "in", "frame_nums", ")", "\n", "return", "[", "self", ".", "_frame_labels", "[", "t", "]", "for", "t", "in", "frame_nums", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.online_chainer.TrackContainer.update_labels": [[67, 83], ["online_chainer.TrackContainer.labels_exist", "labels.numel", "max", "labels.max().item", "labels.max"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.online_chainer.TrackContainer.labels_exist"], ["", "def", "update_labels", "(", "self", ",", "frame_num", ",", "labels", ")", ":", "\n", "        ", "\"\"\"\n        Similar to add_labels, but is meant to be used when updating the labels for a given frame (e.g. using a\n        long-range association measure). This method makes sure that the number of points in the previous and updated\n        labels are the same.\n        :param frame_num: int. The frame ID (0, ..., T-1)\n        :param labels: tensor(N, E)\n        :return:\n        \"\"\"", "\n", "assert", "self", ".", "labels_exist", "(", "frame_num", ")", "\n", "assert", "not", "self", ".", "_is_frozen", "[", "frame_num", "]", "\n", "assert", "self", ".", "_frame_labels", "[", "frame_num", "]", ".", "shape", "==", "self", ".", "_frame_labels", "[", "frame_num", "]", ".", "shape", "\n", "self", ".", "_frame_labels", "[", "frame_num", "]", "=", "labels", "\n", "if", "labels", ".", "numel", "(", ")", ">", "0", ":", "\n", "            ", "self", ".", "_highest_instance_id", "=", "max", "(", "self", ".", "_highest_instance_id", ",", "labels", ".", "max", "(", ")", ".", "item", "(", ")", ")", "\n", "", "return", "self", ".", "_highest_instance_id", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.online_chainer.TrackContainer.freeze_frame": [[84, 93], ["online_chainer.TrackContainer.labels_exist"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.online_chainer.TrackContainer.labels_exist"], ["", "def", "freeze_frame", "(", "self", ",", "frame_num", ")", ":", "\n", "        ", "\"\"\"\n        Safety precaution: when you're finished processing a given frame, call this method and it will ensure that no\n        changes are made to the predicted labels of that frame in the future.\n        :param frame_num:\n        :return:\n        \"\"\"", "\n", "assert", "self", ".", "labels_exist", "(", "frame_num", ")", "\n", "self", ".", "_is_frozen", "[", "frame_num", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.online_chainer.TrackContainer.get_track_mask_idxes": [[94, 118], ["collections.defaultdict", "collections.defaultdict", "enumerate", "labels_per_frame.unique().tolist", "min", "max", "collections.defaultdict.items", "labels_per_frame.unique"], "methods", ["None"], ["", "def", "get_track_mask_idxes", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns 3 dicts. The first contains final list of track as a dict with keys being the frame numbers and values\n        being tensors containing the track ID for each foreground pixel. Note that this is just a flattened list of\n        labels and not the final masks.\n\n        The second dict contains the number of pixels belonging to each track ID (useful\n        for breaking ties between tracks when generating the final masks).\n\n        The third dict contains the temporal lifetime of each track ID (also useful\n        for breaking ties between tracks when generating the final masks).\n        :return: dict, dict\n        \"\"\"", "\n", "instance_id_num_pts", "=", "defaultdict", "(", "lambda", ":", "0", ")", "\n", "instance_id_lifetimes", "=", "defaultdict", "(", "lambda", ":", "[", "10000", ",", "-", "1", "]", ")", "\n", "\n", "for", "frame_num", ",", "labels_per_frame", "in", "enumerate", "(", "self", ".", "_frame_labels", ")", ":", "\n", "            ", "for", "id", "in", "labels_per_frame", ".", "unique", "(", ")", ".", "tolist", "(", ")", ":", "\n", "                ", "instance_id_num_pts", "[", "id", "]", "+=", "(", "labels_per_frame", "==", "id", ")", ".", "long", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "instance_id_lifetimes", "[", "id", "]", "[", "0", "]", "=", "min", "(", "frame_num", ",", "instance_id_lifetimes", "[", "id", "]", "[", "0", "]", ")", "\n", "instance_id_lifetimes", "[", "id", "]", "[", "1", "]", "=", "max", "(", "frame_num", ",", "instance_id_lifetimes", "[", "id", "]", "[", "1", "]", ")", "\n", "\n", "", "", "instance_id_lifetimes", "=", "{", "k", ":", "v", "[", "1", "]", "-", "v", "[", "0", "]", "for", "k", ",", "v", "in", "instance_id_lifetimes", ".", "items", "(", ")", "}", "\n", "return", "self", ".", "_frame_labels", ",", "instance_id_num_pts", ",", "instance_id_lifetimes", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.online_chainer.OnlineChainer.__init__": [[123, 126], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "clusterer", ",", "embedding_resize_factor", ")", ":", "\n", "        ", "self", ".", "clusterer", "=", "clusterer", "\n", "self", ".", "resize_scale", "=", "embedding_resize_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.online_chainer.OnlineChainer.resize_tensors": [[127, 141], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "online_chainer.OnlineChainer.resize_tensors.resize"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.resize"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "resize_tensors", "(", "self", ",", "subseq", ")", ":", "\n", "        ", "if", "self", ".", "resize_scale", "==", "1.0", ":", "\n", "            ", "return", "\n", "\n", "", "def", "resize", "(", "x", ")", ":", "\n", "            ", "x", "=", "x", ".", "unsqueeze", "(", "0", ")", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "(", "1.0", ",", "self", ".", "resize_scale", ",", "self", ".", "resize_scale", ")", ",", "mode", "=", "'trilinear'", ",", "\n", "align_corners", "=", "False", ")", "\n", "return", "x", ".", "squeeze", "(", "0", ")", "\n", "\n", "", "subseq", "[", "\"embeddings\"", "]", "=", "resize", "(", "subseq", "[", "\"embeddings\"", "]", ")", "\n", "subseq", "[", "\"seediness\"", "]", "=", "resize", "(", "subseq", "[", "\"seediness\"", "]", ")", "\n", "subseq", "[", "\"bandwidths\"", "]", "=", "resize", "(", "subseq", "[", "\"bandwidths\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.online_chainer.OnlineChainer.process": [[142, 243], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "online_chainer.masks_to_coord_list", "online_chainer.TrackContainer", "print", "tqdm.tqdm.tqdm", "range", "isinstance", "subseq[].cuda", "subseq[].cuda", "subseq[].cuda", "online_chainer.OnlineChainer.resize_tensors", "online_chainer.OnlineChainer.cluster_subsequence", "subseq_labels_list.append", "sorted", "online_chainer.TrackContainer.get_labels", "online_chainer.OnlineChainer.associate_clusters", "enumerate", "subseq_clustering_meta_info.append", "online_chainer.TrackContainer.get_track_mask_idxes", "len", "sorted", "fg_embeddings.append", "online_chainer.TrackContainer.add_labels", "subseq_clustering_meta_info.append", "list", "online_chainer.TrackContainer.add_labels", "meta_info[].index", "subseq[].keys", "subseq_fg_embeddings.cpu", "l.cpu", "set().intersection", "enumerate", "torch.where", "torch.where", "torch.where", "torch.where", "l.cpu", "set", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "set", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.online_chainer.masks_to_coord_list", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.cuda", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.cuda", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.cuda", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.online_chainer.OnlineChainer.resize_tensors", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.online_chainer.OnlineChainer.cluster_subsequence", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.online_chainer.TrackContainer.get_labels", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.online_chainer.OnlineChainer.associate_clusters", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.online_chainer.TrackContainer.get_track_mask_idxes", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.online_chainer.TrackContainer.add_labels", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.online_chainer.TrackContainer.add_labels", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.cpu", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.cpu", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.cpu", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "process", "(", "self", ",", "masks", ",", "subsequences", ",", "return_fg_embeddings", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Performs clustering/stitching of tracklets for a video containing T frames.\n        :param masks: foreground masks as tensor(T, H, W)\n        :param subsequences: list(dict). The list contains one entry per sub-sequence. There can be an arbitrary number\n        sub-sequences. Each dict must contain a 'frames' key with a list of frames belonging to that sub-sequence, and\n        an 'embedding' key with a tensor of shape (E, T_subseq, H, W) containing the embeddings for that sub-sequence.\n        :param return_fg_embeddings: bool\n        :return:\n        \"\"\"", "\n", "num_frames", "=", "masks", ".", "shape", "[", "0", "]", "\n", "\n", "# convert masks into a list of foreground indices", "\n", "mask_idxes", "=", "masks_to_coord_list", "(", "masks", ")", "\n", "\n", "# store labels for each sub-sequence in a list: this will be used for generating visualizations", "\n", "subseq_labels_list", "=", "[", "]", "\n", "subseq_clustering_meta_info", "=", "[", "]", "\n", "track_container", "=", "TrackContainer", "(", "num_frames", ")", "\n", "next_track_label", "=", "1", "\n", "\n", "fg_embeddings", "=", "[", "]", "\n", "\n", "print", "(", "\"Clustering subsequences...\"", ")", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "subsequences", ")", ")", ")", ":", "\n", "            ", "subseq", "=", "subsequences", "[", "i", "]", "\n", "if", "isinstance", "(", "subseq", "[", "'frames'", "]", ",", "dict", ")", ":", "\n", "                ", "subseq", "[", "'frames'", "]", "=", "sorted", "(", "subseq", "[", "'frames'", "]", ".", "keys", "(", ")", ")", "# bug in InferenceModel where dict is saved instead of list", "\n", "\n", "", "subseq_mask_idxes", "=", "[", "mask_idxes", "[", "t", "]", "for", "t", "in", "subseq", "[", "'frames'", "]", "]", "# split the embeddings for different frames", "\n", "\n", "subseq", "[", "'embeddings'", "]", "=", "subseq", "[", "'embeddings'", "]", ".", "cuda", "(", ")", "\n", "subseq", "[", "'bandwidths'", "]", "=", "subseq", "[", "'bandwidths'", "]", ".", "cuda", "(", ")", "\n", "subseq", "[", "'seediness'", "]", "=", "subseq", "[", "'seediness'", "]", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "resize_tensors", "(", "subseq", ")", "\n", "\n", "assert", "subseq", "[", "'embeddings'", "]", ".", "shape", "[", "-", "2", ":", "]", "==", "masks", ".", "shape", "[", "-", "2", ":", "]", ",", "\"Size mismatch between embeddings {} and masks {}\"", ".", "format", "(", "subseq", "[", "'embeddings'", "]", ".", "shape", ",", "masks", ".", "shape", ")", "\n", "\n", "subseq_labels", ",", "subseq_fg_embeddings", ",", "meta_info", "=", "self", ".", "cluster_subsequence", "(", "\n", "subseq_mask_idxes", ",", "subseq", "[", "'embeddings'", "]", ",", "subseq", "[", "'bandwidths'", "]", ",", "subseq", "[", "'seediness'", "]", ",", "next_track_label", ",", "\n", "return_fg_embeddings", ")", "\n", "# print(\"Subseq labels: \", meta_info['instance_labels'])", "\n", "\n", "subseq_labels_list", ".", "append", "(", "subseq_labels", ")", "\n", "\n", "if", "return_fg_embeddings", ":", "\n", "                ", "fg_embeddings", ".", "append", "(", "subseq_fg_embeddings", ".", "cpu", "(", ")", ")", "\n", "\n", "", "if", "i", "==", "0", ":", "\n", "# first sub-sequence; use this to initialize the tracks", "\n", "                ", "subseq_labels_cpu", "=", "[", "l", ".", "cpu", "(", ")", "for", "l", "in", "subseq_labels", "]", "\n", "next_track_label", "=", "track_container", ".", "add_labels", "(", "subseq", "[", "'frames'", "]", ",", "subseq_labels_cpu", ")", "\n", "subseq_clustering_meta_info", ".", "append", "(", "meta_info", ")", "\n", "continue", "\n", "\n", "# associate tracks using the overlapping frames between the current and the previous sub-sequence", "\n", "", "previous_subseq", "=", "subsequences", "[", "i", "-", "1", "]", "\n", "overlapping_frames", "=", "sorted", "(", "list", "(", "set", "(", "subseq", "[", "'frames'", "]", ")", ".", "intersection", "(", "set", "(", "previous_subseq", "[", "'frames'", "]", ")", ")", ")", ")", "\n", "\n", "# get the track labels already assigned to these overlapping frames from the clustering output of the", "\n", "# previous sub-sequence", "\n", "overlapping_frame_existing_labels", "=", "track_container", ".", "get_labels", "(", "overlapping_frames", ")", "\n", "\n", "# get the track labels assigned to these overlapping frames from the clustering output of the current", "\n", "# sub-sequence", "\n", "overlapping_frames_current_labels", "=", "[", "\n", "subseq_labels", "[", "i", "]", "for", "i", ",", "t", "in", "enumerate", "(", "subseq", "[", "'frames'", "]", ")", "if", "t", "in", "overlapping_frames", "\n", "]", "\n", "\n", "# associate these labels", "\n", "associations", ",", "_", ",", "_", ",", "_", ",", "_", "=", "self", ".", "associate_clusters", "(", "\n", "overlapping_frame_existing_labels", ",", "overlapping_frames_current_labels", ")", "\n", "\n", "# update labels in the current subseq clustering accordingly", "\n", "for", "j", ",", "t", "in", "enumerate", "(", "subseq", "[", "'frames'", "]", ")", ":", "\n", "                ", "if", "t", "in", "overlapping_frames", ":", "\n", "                    ", "continue", "\n", "\n", "", "for", "associated_label", ",", "current_subseq_label", "in", "associations", ":", "\n", "                    ", "subseq_labels", "[", "j", "]", "=", "torch", ".", "where", "(", "\n", "subseq_labels", "[", "j", "]", "==", "current_subseq_label", ",", "torch", ".", "tensor", "(", "associated_label", ")", ".", "to", "(", "subseq_labels", "[", "j", "]", ")", ",", "subseq_labels", "[", "j", "]", ")", "\n", "\n", "# add the updated labels to container", "\n", "", "subseq_labels_cpu", "=", "[", "l", ".", "cpu", "(", ")", "for", "l", "in", "subseq_labels", "]", "\n", "next_track_label", "=", "track_container", ".", "add_labels", "(", "[", "t", "]", ",", "[", "subseq_labels_cpu", "[", "j", "]", "]", ")", "\n", "\n", "# update the meta-info dict as well", "\n", "", "for", "associated_label", ",", "current_subseq_label", "in", "associations", ":", "\n", "                ", "idx", "=", "meta_info", "[", "'instance_labels'", "]", ".", "index", "(", "current_subseq_label", ")", "\n", "meta_info", "[", "'instance_labels'", "]", "[", "idx", "]", "=", "associated_label", "\n", "\n", "", "subseq_clustering_meta_info", ".", "append", "(", "meta_info", ")", "\n", "\n", "# clear tensors (save RAM)", "\n", "subseq", "[", "\"embeddings\"", "]", "=", "subseq", "[", "\"bandwidths\"", "]", "=", "subseq", "[", "\"seediness\"", "]", "=", "None", "\n", "\n", "", "return", "track_container", ".", "get_track_mask_idxes", "(", ")", ",", "mask_idxes", ",", "subseq_labels_list", ",", "fg_embeddings", ",", "subseq_clustering_meta_info", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.online_chainer.OnlineChainer.cluster_subsequence": [[244, 290], ["embeddings.permute().unbind.permute().unbind.permute().unbind", "bandwidths.unbind.unbind.permute", "bandwidths.unbind.unbind.unbind", "seediness.permute().unbind.permute().unbind.permute().unbind", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "online_chainer.OnlineChainer.clusterer", "len", "zip", "torch.cat.append", "torch.cat.append", "num_fg_embeddings.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "cluster_labels.numel", "list", "embeddings.permute().unbind.permute().unbind.permute", "seediness.permute().unbind.permute().unbind.permute", "mask_idxes_per_frame[].numel", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "cluster_labels.split"], "methods", ["None"], ["", "def", "cluster_subsequence", "(", "self", ",", "mask_idxes", ",", "embeddings", ",", "bandwidths", ",", "seediness", ",", "label_start", ",", "return_fg_embeddings", ")", ":", "\n", "        ", "\"\"\"\n        Performs clustering within a sub-sequence\n        :param mask_idxes: list(T, tuple(tensor(M), tensor(M))\n        :param embeddings: tensor(E, T, H, W)\n        :param bandwidths: tensor(E, T, H, W) or None\n        :param seediness: tensor(1, T, H, W) or None\n        :param label_start: int\n        :param return_fg_embeddings: bool\n        :return:\n        \"\"\"", "\n", "assert", "len", "(", "mask_idxes", ")", "==", "embeddings", ".", "shape", "[", "1", "]", "\n", "\n", "# extract foreground embeddings", "\n", "embeddings", "=", "embeddings", ".", "permute", "(", "1", ",", "2", ",", "3", ",", "0", ")", ".", "unbind", "(", "0", ")", "# list(T, tensor(H, W, E))", "\n", "\n", "bandwidths", "=", "bandwidths", ".", "permute", "(", "1", ",", "2", ",", "3", ",", "0", ")", "\n", "\n", "bandwidths", "=", "bandwidths", ".", "unbind", "(", "0", ")", "# list(T, tensor(H, W, E))", "\n", "seediness", "=", "seediness", ".", "permute", "(", "1", ",", "2", ",", "3", ",", "0", ")", ".", "unbind", "(", "0", ")", "# list(T, tensor(H, W, 1))", "\n", "\n", "embeddings_flat", ",", "bandwidths_flat", ",", "seediness_flat", ",", "num_fg_embeddings", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "t", ",", "(", "mask_idxes_per_frame", ",", "embeddings_per_frame", ")", "in", "enumerate", "(", "zip", "(", "mask_idxes", ",", "embeddings", ")", ")", ":", "\n", "            ", "embeddings_flat", ".", "append", "(", "embeddings_per_frame", "[", "mask_idxes_per_frame", "]", ")", "\n", "num_fg_embeddings", ".", "append", "(", "mask_idxes_per_frame", "[", "0", "]", ".", "numel", "(", ")", ")", "\n", "\n", "if", "bandwidths", ":", "\n", "                ", "bandwidths_flat", ".", "append", "(", "bandwidths", "[", "t", "]", "[", "mask_idxes_per_frame", "]", ")", "\n", "\n", "", "if", "seediness", ":", "\n", "                ", "seediness_flat", ".", "append", "(", "seediness", "[", "t", "]", "[", "mask_idxes_per_frame", "]", ")", "\n", "\n", "", "", "embeddings_flat", "=", "torch", ".", "cat", "(", "embeddings_flat", ")", "\n", "if", "bandwidths_flat", ":", "\n", "            ", "bandwidths_flat", "=", "torch", ".", "cat", "(", "bandwidths_flat", ")", "\n", "", "if", "seediness_flat", ":", "\n", "            ", "seediness_flat", "=", "torch", ".", "cat", "(", "seediness_flat", ")", "\n", "\n", "", "cluster_labels", ",", "clustering_meta_info", "=", "self", ".", "clusterer", "(", "\n", "embeddings_flat", ",", "bandwidths", "=", "bandwidths_flat", ",", "seediness", "=", "seediness_flat", ",", "cluster_label_start", "=", "label_start", ",", "\n", "return_label_masks", "=", "return_fg_embeddings", ")", "\n", "assert", "cluster_labels", ".", "numel", "(", ")", "==", "embeddings_flat", ".", "shape", "[", "0", "]", "\n", "\n", "# split the labels by frame", "\n", "return", "list", "(", "cluster_labels", ".", "split", "(", "num_fg_embeddings", ",", "0", ")", ")", ",", "embeddings_flat", ",", "clustering_meta_info", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.online_chainer.OnlineChainer.associate_clusters": [[291, 344], ["list", "list", "numpy.zeros", "numpy.zeros", "scipy.optimize.linear_sum_assignment", "set", "set", "zip", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "set().intersection", "associations.append", "set.remove", "set.remove", "set", "set", "set", "len", "len", "len", "len", "range", "range", "iou.item", "l1_active_pts.sum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat().cuda.unique().tolist", "torch.cat().cuda.unique().tolist", "torch.cat().cuda.unique().tolist", "torch.cat().cuda.unique().tolist", "set", "len", "len", "torch.cat().cuda.unique", "torch.cat().cuda.unique", "torch.cat().cuda.unique", "torch.cat().cuda.unique"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.cuda", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.cuda", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.cuda", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.cuda", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.cuda", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.cuda", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.cuda", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.cuda"], ["", "def", "associate_clusters", "(", "self", ",", "labels_1", ",", "labels_2", ")", ":", "\n", "        ", "\"\"\"\n        Associates clusters and resolves inconsistencies for a pair of labels for a given frame.\n        :param labels_1: list(tensor(N, E)).\n        :param labels_2: list(tensor(N, E)).\n        :return:\n        \"\"\"", "\n", "if", "not", "torch", ".", "is_tensor", "(", "labels_1", ")", ":", "\n", "            ", "labels_1", "=", "torch", ".", "cat", "(", "labels_1", ")", ".", "cuda", "(", ")", "\n", "\n", "", "if", "not", "torch", ".", "is_tensor", "(", "labels_2", ")", ":", "\n", "            ", "labels_2", "=", "torch", ".", "cat", "(", "labels_2", ")", ".", "cuda", "(", ")", "\n", "\n", "", "assert", "labels_1", ".", "shape", "==", "labels_2", ".", "shape", ",", "\"Shape mismatch: {}, {}\"", ".", "format", "(", "labels_1", ".", "shape", ",", "labels_2", ".", "shape", ")", "\n", "\n", "# do not associate the outlier ID with anything", "\n", "unique_labels_1", "=", "list", "(", "set", "(", "labels_1", ".", "unique", "(", ")", ".", "tolist", "(", ")", ")", "-", "{", "self", ".", "OUTLIER_LABEL", "}", ")", "\n", "unique_labels_2", "=", "list", "(", "set", "(", "labels_2", ".", "unique", "(", ")", ".", "tolist", "(", ")", ")", "-", "{", "self", ".", "OUTLIER_LABEL", "}", ")", "\n", "\n", "assert", "not", "set", "(", "unique_labels_1", ")", ".", "intersection", "(", "set", "(", "unique_labels_2", ")", ")", ",", "\"Labels overlap: {}, {}\"", ".", "format", "(", "unique_labels_1", ",", "unique_labels_2", ")", "\n", "\n", "association_costs", "=", "np", ".", "zeros", "(", "(", "len", "(", "unique_labels_1", ")", ",", "len", "(", "unique_labels_2", ")", ")", ",", "np", ".", "float32", ")", "\n", "recall_12", "=", "np", ".", "zeros", "(", "(", "len", "(", "unique_labels_1", ")", ",", "len", "(", "unique_labels_2", ")", ")", ",", "np", ".", "float32", ")", "\n", "\n", "# iterate over pairs of labels", "\n", "for", "i1", ",", "i2", "in", "[", "(", "i1", ",", "i2", ")", "for", "i1", "in", "range", "(", "len", "(", "unique_labels_1", ")", ")", "for", "i2", "in", "range", "(", "len", "(", "unique_labels_2", ")", ")", "]", ":", "\n", "            ", "l1", ",", "l2", "=", "unique_labels_1", "[", "i1", "]", ",", "unique_labels_2", "[", "i2", "]", "\n", "l1_active_pts", "=", "labels_1", "==", "l1", "\n", "l2_active_pts", "=", "labels_2", "==", "l2", "\n", "\n", "intersection", "=", "(", "l1_active_pts", "&", "l2_active_pts", ")", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "union", "=", "(", "l1_active_pts", "|", "l2_active_pts", ")", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "iou", "=", "intersection", "/", "union", "\n", "\n", "# print(\"IoU ({}, {}) = {}\".format(l1, l2, iou.item()))", "\n", "association_costs", "[", "i1", ",", "i2", "]", "=", "1.", "-", "iou", ".", "item", "(", ")", "\n", "recall_12", "[", "i1", ",", "i2", "]", "=", "intersection", "/", "l1_active_pts", ".", "sum", "(", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "", "idxes_1", ",", "idxes_2", "=", "linear_sum_assignment", "(", "association_costs", ")", "\n", "\n", "associations", "=", "[", "]", "\n", "unassigned_labels_1", "=", "set", "(", "unique_labels_1", ")", "\n", "unassigned_labels_2", "=", "set", "(", "unique_labels_2", ")", "\n", "\n", "for", "i1", ",", "i2", "in", "zip", "(", "idxes_1", ",", "idxes_2", ")", ":", "\n", "            ", "l1", ",", "l2", "=", "unique_labels_1", "[", "i1", "]", ",", "unique_labels_2", "[", "i2", "]", "\n", "associations", ".", "append", "(", "(", "l1", ",", "l2", ")", ")", "\n", "unassigned_labels_1", ".", "remove", "(", "l1", ")", "\n", "unassigned_labels_2", ".", "remove", "(", "l2", ")", "\n", "\n", "", "return", "associations", ",", "unassigned_labels_1", ",", "unassigned_labels_2", ",", "association_costs", "[", "idxes_1", ",", "idxes_2", "]", ",", "(", "recall_12", ",", "unique_labels_1", ",", "unique_labels_2", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.inference.online_chainer.masks_to_coord_list": [[11, 23], ["range", "masks[].nonzero", "tuple", "fg_idxes_all.append", "tuple.unbind"], "function", ["None"], ["def", "masks_to_coord_list", "(", "masks", ")", ":", "\n", "    ", "\"\"\"\n    :param masks: tensor(T, H, W)\n    :return: list(tuple(tensor(M), tensor(M)))\n    \"\"\"", "\n", "fg_idxes_all", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "masks", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "fg_idxes", "=", "masks", "[", "t", "]", ".", "nonzero", "(", ")", "# [M, 2]", "\n", "fg_idxes", "=", "tuple", "(", "fg_idxes", ".", "unbind", "(", "1", ")", ")", "\n", "fg_idxes_all", ".", "append", "(", "fg_idxes", ")", "\n", "\n", "", "return", "fg_idxes_all", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.kitti_mots.KittiMOTSOutputGenerator.__init__": [[19, 29], ["os.path.join", "os.path.join", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get"], ["    ", "def", "__init__", "(", "self", ",", "output_dir", ",", "outlier_label", ",", "save_visualization", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "results_output_dir", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"results\"", ")", "\n", "self", ".", "vis_output_dir", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"vis\"", ")", "\n", "\n", "self", ".", "outlier_label", "=", "outlier_label", "\n", "self", ".", "save_visualization", "=", "save_visualization", "\n", "\n", "self", ".", "categories", "=", "(", "1", ",", "2", ")", "\n", "self", ".", "category_label", "=", "{", "1", ":", "\"c\"", ",", "2", ":", "\"p\"", "}", "# car, pedestrian", "\n", "self", ".", "upscaled_inputs", "=", "kwargs", ".", "get", "(", "\"upscaled_inputs\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.kitti_mots.KittiMOTSOutputGenerator.process_sequence": [[30, 178], ["stemseg.utils.timer.Timer.exclude_duration", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "sorted", "collections.defaultdict", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "print", "tqdm.tqdm.tqdm", "kitti_mots.KittiMOTSOutputGenerator.add_sequence_result", "len", "len", "len", "ValueError", "x.to", "category_masks.to.to.to", "range", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "enumerate", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.interpolate.unsqueeze().float", "stemseg.data.common.compute_resize_params_2", "enumerate", "len", "tuple", "tuple", "sorted", "enumerate", "instance_id_mapping.values", "coords[].to", "coords[].to", "masks_per_frame.to", "len", "active_instances_t.append", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "label_mask.long", "torch.interpolate.append", "category_mask_t[].unique", "active_semantic_labels.tolist.tolist.tolist", "label_counts.tolist.tolist.tolist", "zip", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.interpolate.max", "[].decode", "instance_rle_masks[].append", "label_mask.sum", "torch.interpolate.unsqueeze", "RuntimeError", "instance_id_mapping.items", "instance_pt_counts.items", "tuple", "pycocotools.encode", "numpy.asfortranarray"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.exclude_duration", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.youtube_vis.YoutubeVISOutputGenerator.add_sequence_result", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.common.compute_resize_params_2", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor"], ["", "@", "Timer", ".", "exclude_duration", "(", "\"postprocessing\"", ")", "\n", "def", "process_sequence", "(", "self", ",", "sequence", ",", "track_mask_idxes", ",", "track_mask_labels", ",", "instance_pt_counts", ",", "instance_lifetimes", ",", "\n", "category_masks", ",", "mask_dims", ",", "mask_scale", ",", "max_tracks", ",", "device", "=", "\"cpu\"", ")", ":", "\n", "        ", "\"\"\"\n        Given a list of mask indices per frame, creates a sequence of masks for the entire sequence.\n        :param sequence: instance of MOTSSequence\n        :param track_mask_idxes: list(tuple(tensor, tensor))\n        :param track_mask_labels: list(tensor)\n        :param instance_pt_counts: dict(int -> int)\n        :param instance_lifetimes: dict(int -> int)\n        :param category_masks: tensor(T, H, W) of type long\n        :param mask_dims: tuple(int, int) (height, width)\n        :param mask_scale: int\n        :param max_tracks: int\n        :param device: str\n        :return: None\n        \"\"\"", "\n", "mask_height", ",", "mask_width", "=", "mask_dims", "\n", "image_height", ",", "image_width", "=", "sequence", ".", "image_dims", "\n", "assert", "len", "(", "track_mask_idxes", ")", "==", "len", "(", "track_mask_labels", ")", "\n", "\n", "if", "torch", ".", "is_tensor", "(", "category_masks", ")", ":", "\n", "            ", "assert", "category_masks", ".", "shape", "[", "0", "]", "==", "len", "(", "track_mask_idxes", ")", "\n", "assert", "tuple", "(", "category_masks", ".", "shape", "[", "-", "2", ":", "]", ")", "==", "tuple", "(", "mask_dims", ")", ",", "\"Shape mismatch between semantic masks {} and embedding masks {}\"", ".", "format", "(", "category_masks", ".", "shape", ",", "mask_dims", ")", "\n", "\n", "# filter out small/unstable instances", "\n", "", "instances_to_keep", "=", "[", "\n", "instance_id", "for", "instance_id", ",", "_", "in", "sorted", "(", "\n", "[", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "instance_pt_counts", ".", "items", "(", ")", "]", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", "\n", ")", "if", "instance_id", "!=", "self", ".", "outlier_label", "\n", "]", "\n", "instances_to_keep", "=", "instances_to_keep", "[", ":", "max_tracks", "]", "\n", "\n", "# MOTS eval does not allow the same pixel to be assigned to multiple instances. To break ties, we assign a", "\n", "# pixel to the instance with longer life-time in case of conflicts.", "\n", "\n", "# reorder the instances in descending order of temporal lifetime", "\n", "instances_to_keep", "=", "sorted", "(", "instances_to_keep", ",", "key", "=", "lambda", "x", ":", "instance_lifetimes", "[", "x", "]", ")", "\n", "\n", "# map the instance IDs to a the range [1, N]", "\n", "instance_id_mapping", "=", "{", "instance_id", ":", "i", "for", "i", ",", "instance_id", "in", "enumerate", "(", "instances_to_keep", ",", "1", ")", "}", "\n", "\n", "if", "len", "(", "instances_to_keep", ")", "==", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Zero instances detected in sequence: {}\"", ".", "format", "(", "sequence", ".", "id", ")", ")", "\n", "\n", "", "instance_semantic_label_votes", "=", "defaultdict", "(", "lambda", ":", "{", "cat_id", ":", "0", "for", "cat_id", "in", "self", ".", "categories", "}", ")", "\n", "instance_rle_masks", "=", "{", "k", ":", "[", "]", "for", "k", "in", "instance_id_mapping", ".", "values", "(", ")", "}", "\n", "\n", "# move tensors to the target device", "\n", "track_mask_labels", "=", "[", "x", ".", "to", "(", "device", "=", "device", ")", "for", "x", "in", "track_mask_labels", "]", "\n", "track_mask_idxes", "=", "[", "(", "coords", "[", "0", "]", ".", "to", "(", "device", "=", "device", ")", ",", "coords", "[", "1", "]", ".", "to", "(", "device", "=", "device", ")", ")", "for", "coords", "in", "track_mask_idxes", "]", "\n", "\n", "if", "torch", ".", "is_tensor", "(", "category_masks", ")", ":", "\n", "            ", "category_masks", "=", "category_masks", ".", "to", "(", "device", "=", "device", ")", "\n", "", "else", ":", "\n", "            ", "category_masks", "=", "[", "masks_per_frame", ".", "to", "(", "device", "=", "device", ")", "for", "masks_per_frame", "in", "category_masks", "]", "\n", "\n", "", "print", "(", "\"Producing mask outputs...\"", ")", "\n", "for", "t", "in", "tqdm", "(", "range", "(", "len", "(", "track_mask_idxes", ")", ")", ")", ":", "\n", "            ", "if", "torch", ".", "is_tensor", "(", "category_masks", ")", ":", "\n", "# filter semantic labels for background pixels", "\n", "                ", "category_mask_t", "=", "category_masks", "[", "t", "]", "[", "track_mask_idxes", "[", "t", "]", "]", "\n", "", "else", ":", "\n", "                ", "category_mask_t", "=", "category_masks", "[", "t", "]", "\n", "\n", "", "assert", "category_mask_t", ".", "shape", "==", "track_mask_labels", "[", "t", "]", ".", "shape", ",", "\"Shape mismatch between category labels {} and instance labels {}\"", ".", "format", "(", "\n", "category_mask_t", ".", "shape", ",", "track_mask_labels", "[", "t", "]", ".", "shape", ")", "\n", "\n", "mask_t", "=", "[", "]", "\n", "active_instances_t", "=", "[", "]", "\n", "for", "i", ",", "instance_id", "in", "enumerate", "(", "instances_to_keep", ",", "1", ")", ":", "\n", "                ", "label_mask", "=", "track_mask_labels", "[", "t", "]", "==", "instance_id", "\n", "if", "label_mask", ".", "sum", "(", "dtype", "=", "torch", ".", "long", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "\n", "", "active_instances_t", ".", "append", "(", "instance_id", ")", "\n", "mask", "=", "torch", ".", "zeros", "(", "mask_height", ",", "mask_width", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "mask", "[", "track_mask_idxes", "[", "t", "]", "]", "=", "label_mask", ".", "long", "(", ")", "\n", "mask_t", ".", "append", "(", "mask", ")", "\n", "\n", "# count votes for the semantic label of each instance", "\n", "active_semantic_labels", ",", "label_counts", "=", "category_mask_t", "[", "label_mask", "]", ".", "unique", "(", "return_counts", "=", "True", ")", "\n", "\n", "active_semantic_labels", "=", "active_semantic_labels", ".", "tolist", "(", ")", "\n", "label_counts", "=", "label_counts", ".", "tolist", "(", ")", "\n", "\n", "for", "label", ",", "count", "in", "zip", "(", "active_semantic_labels", ",", "label_counts", ")", ":", "\n", "                    ", "if", "label", "!=", "0", ":", "\n", "                        ", "instance_semantic_label_votes", "[", "instance_id_mapping", "[", "instance_id", "]", "]", "[", "label", "]", "+=", "count", "\n", "\n", "", "", "", "if", "not", "mask_t", ":", "# no instances in frame 't'", "\n", "                ", "continue", "\n", "\n", "", "mask_t", "=", "torch", ".", "stack", "(", "mask_t", ",", "dim", "=", "0", ")", "\n", "\n", "# to obtain the mask in the original image dims:", "\n", "# 1. up-sample mask to network input size", "\n", "# 2. remove zero padding from right/bottom", "\n", "# 3. resize to original image dims", "\n", "\n", "mask_t", "=", "mask_t", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", "\n", "\n", "if", "not", "self", ".", "upscaled_inputs", ":", "\n", "                ", "mask_t", "=", "F", ".", "interpolate", "(", "mask_t", ",", "scale_factor", "=", "mask_scale", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "# get resized network input dimensions (without zero padding)", "\n", "", "resized_mask_width", ",", "resized_mask_height", ",", "_", "=", "compute_resize_params_2", "(", "\n", "(", "image_width", ",", "image_height", ")", ",", "cfg", ".", "INPUT", ".", "MIN_DIM", ",", "cfg", ".", "INPUT", ".", "MAX_DIM", ")", "\n", "\n", "try", ":", "\n", "                ", "assert", "mask_t", ".", "shape", "[", "3", "]", ">=", "resized_mask_width", "\n", "assert", "mask_t", ".", "shape", "[", "2", "]", ">=", "resized_mask_height", "\n", "", "except", "AssertionError", "as", "_", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Network input dims without padding {} should be <= padded dims {}\"", ".", "format", "(", "\n", "(", "resized_mask_height", ",", "resized_mask_width", ")", ",", "tuple", "(", "mask_t", ".", "shape", "[", "-", "2", ":", "]", ")", ")", ")", "\n", "\n", "# remove extra zeros", "\n", "", "mask_t", "=", "mask_t", "[", ":", ",", ":", ",", ":", "resized_mask_height", ",", ":", "resized_mask_width", "]", "\n", "\n", "# resize to original image dims", "\n", "if", "(", "image_height", ",", "image_width", ")", "!=", "(", "mask_t", ".", "shape", "[", "-", "2", "]", ",", "mask_t", ".", "shape", "[", "-", "1", "]", ")", ":", "\n", "                ", "mask_t", "=", "F", ".", "interpolate", "(", "mask_t", ",", "(", "image_height", ",", "image_width", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "", "mask_t", "=", "(", "mask_t", ">", "0.5", ")", ".", "long", "(", ")", ".", "squeeze", "(", "0", ")", "\n", "\n", "# replace 1s with instance IDs", "\n", "instance_ids_tensor", "=", "torch", ".", "tensor", "(", "active_instances_t", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "[", ":", ",", "None", ",", "None", "]", "\n", "mask_t", "=", "mask_t", "*", "instance_ids_tensor", "\n", "\n", "# assign each pixel to the instance with the longest lifetime", "\n", "mask_t", "=", "mask_t", ".", "max", "(", "dim", "=", "0", ")", "[", "0", "]", "\n", "\n", "for", "i", ",", "instance_id", "in", "enumerate", "(", "active_instances_t", ",", "1", ")", ":", "\n", "                ", "rle_mask", "=", "masktools", ".", "encode", "(", "np", ".", "asfortranarray", "(", "(", "mask_t", "==", "instance_id", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "[", "\"counts\"", "]", ".", "decode", "(", "\"utf-8\"", ")", "\n", "\n", "instance_rle_masks", "[", "instance_id_mapping", "[", "instance_id", "]", "]", ".", "append", "(", "{", "\n", "\"frame_id\"", ":", "t", ",", "\n", "\"image_height\"", ":", "image_height", ",", "\n", "\"image_width\"", ":", "image_width", ",", "\n", "\"instance_id\"", ":", "instance_id_mapping", "[", "instance_id", "]", ",", "\n", "\"mask\"", ":", "rle_mask", "\n", "}", ")", "\n", "\n", "", "", "self", ".", "add_sequence_result", "(", "sequence", ",", "instance_rle_masks", ",", "instance_semantic_label_votes", ")", "\n", "\n", "return", "instances_to_keep", ",", "{", "v", ":", "k", "for", "k", ",", "v", "in", "instance_id_mapping", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.kitti_mots.KittiMOTSOutputGenerator.add_sequence_result": [[179, 210], ["instance_rle_masks.items", "os.makedirs", "os.path.join", "max", "open", "instance_rle_masks.items", "kitti_mots.KittiMOTSOutputGenerator.save_sequence_visualizations", "int", "fh.write", "semantic_label_votes.items", "int"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.youtube_vis.YoutubeVISOutputGenerator.save_sequence_visualizations"], ["", "def", "add_sequence_result", "(", "self", ",", "seq", ",", "instance_rle_masks", ",", "instance_semantic_label_votes", ")", ":", "\n", "# assign semantic label to each instance based on max votes", "\n", "        ", "for", "instance_id", ",", "instance_attribs", "in", "instance_rle_masks", ".", "items", "(", ")", ":", "\n", "            ", "semantic_label_votes", "=", "instance_semantic_label_votes", "[", "instance_id", "]", "\n", "max_voted_label", ",", "num_votes", "=", "max", "(", "[", "\n", "(", "semantic_label", ",", "votes", ")", "for", "semantic_label", ",", "votes", "in", "semantic_label_votes", ".", "items", "(", ")", "]", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "\n", "# map the predicted semantic label to the original labels in the Youtube VIS dataset spec", "\n", "assert", "max_voted_label", "in", "self", ".", "categories", ",", "\"Label {} does not exist in category ID list\"", ".", "format", "(", "max_voted_label", ")", "\n", "\n", "for", "frame_instance", "in", "instance_attribs", ":", "\n", "                ", "frame_instance", "[", "\"category_id\"", "]", "=", "max_voted_label", "\n", "\n", "", "", "os", ".", "makedirs", "(", "self", ".", "results_output_dir", ",", "exist_ok", "=", "True", ")", "\n", "output_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "results_output_dir", ",", "\"{:04d}.txt\"", ".", "format", "(", "int", "(", "seq", ".", "id", ")", ")", ")", "\n", "\n", "with", "open", "(", "output_path", ",", "'w'", ")", "as", "fh", ":", "\n", "            ", "for", "instance_id", ",", "instance_attribs", "in", "instance_rle_masks", ".", "items", "(", ")", ":", "\n", "\n", "                ", "for", "frame_instance", "in", "instance_attribs", ":", "\n", "                    ", "fh", ".", "write", "(", "\"{frame_id} {instance_id} {category_id} {img_height} {img_width} {rle_mask}\\n\"", ".", "format", "(", "\n", "frame_id", "=", "frame_instance", "[", "\"frame_id\"", "]", ",", "\n", "instance_id", "=", "int", "(", "(", "frame_instance", "[", "\"category_id\"", "]", "*", "1000", ")", "+", "instance_id", ")", ",", "\n", "category_id", "=", "frame_instance", "[", "\"category_id\"", "]", ",", "\n", "img_height", "=", "frame_instance", "[", "\"image_height\"", "]", ",", "\n", "img_width", "=", "frame_instance", "[", "\"image_width\"", "]", ",", "\n", "rle_mask", "=", "frame_instance", "[", "\"mask\"", "]", "\n", ")", ")", "\n", "\n", "", "", "", "if", "self", ".", "save_visualization", ":", "\n", "            ", "self", ".", "save_sequence_visualizations", "(", "seq", ",", "instance_rle_masks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.kitti_mots.KittiMOTSOutputGenerator.save_sequence_visualizations": [[211, 240], ["stemseg.utils.timer.Timer.exclude_duration", "stemseg.utils.vis.create_color_map().tolist", "os.path.join", "os.makedirs", "collections.defaultdict", "instances.values", "seq.load_images", "enumerate", "cv2.imwrite", "stemseg.utils.vis.create_color_map", "int", "instances_by_frame[].append", "pycocotools.decode", "stemseg.inference.output_utils.annotate_instance", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.exclude_duration", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_video_dataset_parser.GenericVideoSequence.load_images", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.vis.create_color_map", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.common.annotate_instance"], ["", "", "@", "Timer", ".", "exclude_duration", "(", "\"postprocessing\"", ")", "\n", "def", "save_sequence_visualizations", "(", "self", ",", "seq", ",", "instances", ")", ":", "\n", "        ", "cmap", "=", "create_color_map", "(", ")", ".", "tolist", "(", ")", "\n", "seq_output_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "vis_output_dir", ",", "\"{:04d}\"", ".", "format", "(", "int", "(", "seq", ".", "id", ")", ")", ")", "\n", "os", ".", "makedirs", "(", "seq_output_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# arrange the masks according to frame rather than by instance.", "\n", "instances_by_frame", "=", "defaultdict", "(", "list", ")", "\n", "for", "instance", "in", "instances", ".", "values", "(", ")", ":", "\n", "            ", "for", "frame_instance", "in", "instance", ":", "\n", "                ", "instances_by_frame", "[", "frame_instance", "[", "\"frame_id\"", "]", "]", ".", "append", "(", "frame_instance", ")", "\n", "\n", "", "", "images", "=", "seq", ".", "load_images", "(", ")", "\n", "\n", "for", "t", ",", "image_t", "in", "enumerate", "(", "images", ")", ":", "\n", "            ", "for", "instance", "in", "instances_by_frame", "[", "t", "]", ":", "\n", "                ", "category_label", "=", "instance", "[", "\"category_id\"", "]", "\n", "instance_id", "=", "instance", "[", "\"instance_id\"", "]", "\n", "\n", "color", "=", "cmap", "[", "instance_id", "%", "256", "]", "\n", "mask", "=", "masktools", ".", "decode", "(", "{", "\n", "\"size\"", ":", "(", "instance", "[", "\"image_height\"", "]", ",", "instance", "[", "\"image_width\"", "]", ")", ",", "\n", "\"counts\"", ":", "instance", "[", "\"mask\"", "]", "\n", "}", ")", "\n", "\n", "annotation_text", "=", "\"{}{}\"", ".", "format", "(", "instance_id", ",", "self", ".", "category_label", "[", "category_label", "]", ")", "\n", "image_t", "=", "annotate_instance", "(", "image_t", ",", "mask", ",", "color", ",", "annotation_text", ",", "font_size", "=", "0.25", ")", "\n", "\n", "", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "seq_output_dir", ",", "'{:05d}.jpg'", ".", "format", "(", "t", ")", ")", ",", "image_t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.kitti_mots.KittiMOTSOutputGenerator.save": [[241, 244], ["print", "stemseg.inference.output_utils.kitti_mots_postprocessing.main"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.visualize_data_loading.main"], ["", "", "def", "save", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "print", "(", "\"Applying NMS to results...\"", ")", "\n", "postprocess_results", "(", "results_dir", "=", "self", ".", "results_output_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.kitti_mots.KittiMOTSOutputGenerator.overlay_masks_on_images": [[245, 264], ["stemseg.utils.timer.Timer.exclude_duration", "stemseg.utils.vis.create_color_map", "enumerate", "len", "len", "zip", "numpy.array", "set", "stemseg.utils.vis.overlay_mask_on_image", "numpy.unique"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.exclude_duration", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.vis.create_color_map", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.vis.overlay_mask_on_image"], ["", "@", "Timer", ".", "exclude_duration", "(", "\"postprocessing\"", ")", "\n", "def", "overlay_masks_on_images", "(", "self", ",", "seq", ",", "masks", ")", ":", "\n", "        ", "with", "seq", ":", "\n", "            ", "images", "=", "seq", ".", "images", "\n", "\n", "", "assert", "len", "(", "images", ")", "==", "len", "(", "masks", ")", "\n", "cmap", "=", "create_color_map", "(", ")", "\n", "\n", "for", "t", ",", "(", "image", ",", "mask", ")", "in", "enumerate", "(", "zip", "(", "images", ",", "masks", ")", ")", ":", "\n", "            ", "mask", "=", "np", ".", "array", "(", "mask", ")", "\n", "assert", "mask", ".", "shape", "==", "image", ".", "shape", "[", ":", "2", "]", ",", "\"Mask has shape {} while image has shape {}\"", ".", "format", "(", "mask", ".", "shape", ",", "image", ".", "shape", ")", "\n", "instance_ids", "=", "set", "(", "np", ".", "unique", "(", "mask", ")", ")", "-", "{", "0", "}", "\n", "assert", "self", ".", "outlier_label", "not", "in", "instance_ids", "\n", "\n", "for", "n", "in", "instance_ids", ":", "\n", "                ", "images", "[", "t", "]", "=", "overlay_mask_on_image", "(", "images", "[", "t", "]", ",", "mask", "==", "n", ",", "mask_color", "=", "cmap", "[", "n", "%", "256", "]", ")", "\n", "\n", "", "", "return", "images", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.davis.DavisOutputGenerator.__init__": [[29, 36], ["os.path.join", "os.path.join", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get"], ["    ", "def", "__init__", "(", "self", ",", "output_dir", ",", "outlier_label", ",", "save_visualization", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "results_output_dir", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"results\"", ")", "\n", "self", ".", "vis_output_dir", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"vis\"", ")", "\n", "\n", "self", ".", "outlier_label", "=", "outlier_label", "\n", "self", ".", "save_visualization", "=", "save_visualization", "\n", "self", ".", "upscaled_inputs", "=", "kwargs", ".", "get", "(", "\"upscaled_inputs\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.davis.DavisOutputGenerator.process_sequence": [[37, 135], ["stemseg.utils.timer.Timer.exclude_duration", "len", "print", "stemseg.utils.vis.create_color_map().flatten", "range", "os.path.join", "os.makedirs", "enumerate", "os.path.join", "os.makedirs", "davis.DavisOutputGenerator.overlay_masks_on_images", "enumerate", "len", "len", "len", "x.to", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.interpolate.unsqueeze().float", "stemseg.data.common.compute_resize_params_2", "torch.interpolate.byte().squeeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "PIL.Image.fromarray", "torch.where.putpalette", "torch.where.putpalette", "masks.append", "mask.save", "cv2.imwrite", "dict", "sorted", "coords[].to", "coords[].to", "stemseg.utils.vis.create_color_map", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where.cpu().numpy", "torch.where.cpu().numpy", "os.path.join", "dict", "os.path.join", "torch.interpolate.unsqueeze", "RuntimeError", "torch.interpolate.byte", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.where.cpu", "torch.where.cpu", "instance_lifetimes.items", "tuple"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.exclude_duration", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.davis.DavisOutputGenerator.overlay_masks_on_images", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.common.compute_resize_params_2", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.youtube_vis.YoutubeVISOutputGenerator.save", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.vis.create_color_map", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.image_list.ImageList.numpy", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.image_list.ImageList.numpy", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.cpu", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.cpu"], ["", "@", "Timer", ".", "exclude_duration", "(", "\"postprocessing\"", ")", "\n", "def", "process_sequence", "(", "self", ",", "sequence", ",", "track_mask_idxes", ",", "track_mask_labels", ",", "instance_pt_counts", ",", "instance_lifetimes", ",", "\n", "category_masks", ",", "mask_dims", ",", "mask_scale", ",", "max_tracks", ",", "device", "=", "\"cpu\"", ")", ":", "\n", "        ", "\"\"\"\n        Given a list of mask indices per frame, creates a sequence of masks for the entire sequence.\n        :param track_mask_idxes: list(tuple(tensor, tensor))\n        :param track_mask_labels: list(tensor)\n        :param instance_pt_counts: dict(int -> int)\n        :param category_masks: irrelevant\n        :param mask_dims: tuple(int, int) (height, width)\n        :param mask_scale: int\n        :param max_tracks: int\n        :param device: str\n        :return: list(PIL.Image)\n        \"\"\"", "\n", "mask_height", ",", "mask_width", "=", "mask_dims", "\n", "image_height", ",", "image_width", "=", "sequence", ".", "image_dims", "\n", "\n", "assert", "len", "(", "track_mask_idxes", ")", "==", "len", "(", "track_mask_labels", ")", "\n", "assert", "max_tracks", "<", "256", "\n", "\n", "instances_to_keep", "=", "[", "\n", "instance_id", "for", "instance_id", ",", "_", "in", "sorted", "(", "\n", "[", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "instance_lifetimes", ".", "items", "(", ")", "]", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", "\n", ")", "if", "instance_id", "!=", "self", ".", "outlier_label", "\n", "]", "\n", "\n", "instances_to_keep", "=", "instances_to_keep", "[", ":", "max_tracks", "]", "\n", "num_tracks", "=", "len", "(", "instances_to_keep", ")", "\n", "\n", "print", "(", "\"Number of instances: \"", ",", "len", "(", "instances_to_keep", ")", ")", "\n", "\n", "# move tensors to the target device", "\n", "track_mask_labels", "=", "[", "x", ".", "to", "(", "device", "=", "device", ")", "for", "x", "in", "track_mask_labels", "]", "\n", "track_mask_idxes", "=", "[", "(", "coords", "[", "0", "]", ".", "to", "(", "device", "=", "device", ")", ",", "coords", "[", "1", "]", ".", "to", "(", "device", "=", "device", ")", ")", "for", "coords", "in", "track_mask_idxes", "]", "\n", "\n", "masks", "=", "[", "]", "\n", "cmap", "=", "create_color_map", "(", ")", ".", "flatten", "(", ")", "\n", "\n", "for", "t", "in", "range", "(", "len", "(", "track_mask_idxes", ")", ")", ":", "\n", "            ", "mask_t", "=", "torch", ".", "zeros", "(", "mask_height", ",", "mask_width", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "mask_t", "[", "track_mask_idxes", "[", "t", "]", "]", "=", "track_mask_labels", "[", "t", "]", "\n", "\n", "mask_t", "=", "torch", ".", "stack", "(", "[", "mask_t", "==", "ii", "for", "ii", "in", "instances_to_keep", "]", ",", "0", ")", "\n", "\n", "# to obtain the mask in the original image dims:", "\n", "# 1. up-sample mask to network input size", "\n", "# 2. remove zero padding from right/bottom", "\n", "# 3. resize to original image dims", "\n", "\n", "mask_t", "=", "mask_t", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", "\n", "if", "not", "self", ".", "upscaled_inputs", ":", "\n", "                ", "mask_t", "=", "F", ".", "interpolate", "(", "mask_t", ",", "scale_factor", "=", "mask_scale", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "# get resized network input dimensions (without zero padding)", "\n", "", "resized_mask_width", ",", "resized_mask_height", ",", "_", "=", "compute_resize_params_2", "(", "\n", "(", "image_width", ",", "image_height", ")", ",", "cfg", ".", "INPUT", ".", "MIN_DIM", ",", "cfg", ".", "INPUT", ".", "MAX_DIM", ")", "\n", "\n", "try", ":", "\n", "                ", "assert", "mask_t", ".", "shape", "[", "3", "]", ">=", "resized_mask_width", "\n", "assert", "mask_t", ".", "shape", "[", "2", "]", ">=", "resized_mask_height", "\n", "", "except", "AssertionError", "as", "_", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Network input dims without padding {} should be <= padded dims\"", ".", "format", "(", "\n", "(", "resized_mask_width", ",", "resized_mask_height", ")", ",", "tuple", "(", "mask_t", ".", "shape", "[", "-", "2", ":", "]", ")", ")", ")", "\n", "\n", "# remove extra zeros", "\n", "", "mask_t", "=", "mask_t", "[", ":", ",", ":", ",", ":", "resized_mask_height", ",", ":", "resized_mask_width", "]", "\n", "\n", "# resize to original image dims", "\n", "mask_t", "=", "(", "F", ".", "interpolate", "(", "mask_t", ",", "(", "image_height", ",", "image_width", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", ">", "0.5", ")", "\n", "mask_t", "=", "mask_t", ".", "byte", "(", ")", ".", "squeeze", "(", "0", ")", "\n", "\n", "mask_condensed", "=", "torch", ".", "zeros", "(", "image_height", ",", "image_width", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "device", ")", "\n", "for", "n", "in", "range", "(", "num_tracks", ")", ":", "\n", "                ", "mask_condensed", "=", "torch", ".", "where", "(", "mask_t", "[", "n", "]", ",", "torch", ".", "tensor", "(", "n", "+", "1", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "device", ")", ",", "\n", "mask_condensed", ")", "\n", "\n", "", "mask_condensed", "=", "Image", ".", "fromarray", "(", "mask_condensed", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "mask_condensed", ".", "putpalette", "(", "cmap", ")", "\n", "masks", ".", "append", "(", "mask_condensed", ")", "\n", "\n", "", "seq_results_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "results_output_dir", ",", "sequence", ".", "id", ")", "\n", "os", ".", "makedirs", "(", "seq_results_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "for", "t", ",", "mask", "in", "enumerate", "(", "masks", ")", ":", "\n", "            ", "mask", ".", "save", "(", "os", ".", "path", ".", "join", "(", "seq_results_dir", ",", "\"{:05d}.png\"", ".", "format", "(", "t", ")", ")", ")", "\n", "\n", "", "if", "not", "self", ".", "save_visualization", ":", "\n", "            ", "return", "instances_to_keep", ",", "dict", "(", ")", "\n", "\n", "", "seq_vis_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "vis_output_dir", ",", "sequence", ".", "id", ")", "\n", "os", ".", "makedirs", "(", "seq_vis_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "overlayed_images", "=", "self", ".", "overlay_masks_on_images", "(", "sequence", ",", "masks", ")", "\n", "for", "t", ",", "overlayed_image", "in", "enumerate", "(", "overlayed_images", ")", ":", "\n", "            ", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "seq_vis_dir", ",", "\"{:05d}.jpg\"", ".", "format", "(", "t", ")", ")", ",", "overlayed_image", ")", "\n", "\n", "", "return", "instances_to_keep", ",", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.davis.DavisOutputGenerator.save": [[136, 138], ["None"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.davis.DavisOutputGenerator.overlay_masks_on_images": [[139, 160], ["stemseg.utils.timer.Timer.exclude_duration", "seq.load_images", "stemseg.utils.vis.create_color_map", "enumerate", "len", "len", "len", "len", "zip", "numpy.array", "set", "stemseg.utils.vis.overlay_mask_on_image", "numpy.unique"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.exclude_duration", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_video_dataset_parser.GenericVideoSequence.load_images", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.vis.create_color_map", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.vis.overlay_mask_on_image"], ["", "@", "Timer", ".", "exclude_duration", "(", "\"postprocessing\"", ")", "\n", "def", "overlay_masks_on_images", "(", "self", ",", "seq", ",", "masks", ")", ":", "\n", "# with seq:", "\n", "#     images = seq.images", "\n", "        ", "images", "=", "seq", ".", "load_images", "(", ")", "\n", "\n", "assert", "len", "(", "images", ")", "==", "len", "(", "masks", ")", ",", "\"Got {} images but {} masks\"", ".", "format", "(", "len", "(", "images", ")", ",", "len", "(", "masks", ")", ")", "\n", "cmap", "=", "create_color_map", "(", ")", "\n", "\n", "for", "t", ",", "(", "image", ",", "mask", ")", "in", "enumerate", "(", "zip", "(", "images", ",", "masks", ")", ")", ":", "\n", "            ", "mask", "=", "np", ".", "array", "(", "mask", ")", "\n", "\n", "assert", "mask", ".", "shape", "==", "image", ".", "shape", "[", ":", "2", "]", ",", "\"Mask has shape {} while image has shape {}\"", ".", "format", "(", "mask", ".", "shape", ",", "image", ".", "shape", ")", "\n", "instance_ids", "=", "set", "(", "np", ".", "unique", "(", "mask", ")", ")", "-", "{", "0", "}", "\n", "assert", "self", ".", "outlier_label", "not", "in", "instance_ids", "\n", "\n", "for", "n", "in", "instance_ids", ":", "\n", "                ", "images", "[", "t", "]", "=", "overlay_mask_on_image", "(", "images", "[", "t", "]", ",", "mask", "==", "n", ",", "mask_color", "=", "cmap", "[", "n", "]", ")", "\n", "\n", "", "", "return", "images", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.davis.compute_pixel_box_area_ratio": [[14, 26], ["mask.nonzero().unbind", "mask.sum().item", "y_coords.numel", "box_area.item", "mask.nonzero", "mask.sum", "y_coords.max", "y_coords.min", "x_coords.max", "x_coords.min"], "function", ["None"], ["def", "compute_pixel_box_area_ratio", "(", "mask", ")", ":", "\n", "    ", "y_coords", ",", "x_coords", "=", "mask", ".", "nonzero", "(", ")", ".", "unbind", "(", "1", ")", "\n", "if", "y_coords", ".", "numel", "(", ")", "==", "0", ":", "\n", "        ", "return", "0.0", "\n", "\n", "", "pixel_area", "=", "mask", ".", "sum", "(", "dtype", "=", "torch", ".", "float32", ")", ".", "item", "(", ")", "\n", "\n", "box_area", "=", "(", "y_coords", ".", "max", "(", ")", "-", "y_coords", ".", "min", "(", ")", ")", "*", "(", "x_coords", ".", "max", "(", ")", "-", "x_coords", ".", "min", "(", ")", ")", "\n", "if", "box_area", "==", "0", ":", "\n", "        ", "return", "0.", "\n", "\n", "", "return", "pixel_area", "/", "box_area", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.common.bbox_from_mask": [[7, 21], ["numpy.any", "numpy.any", "np.any.argmax", "np.any.argmax", "len", "numpy.flip().argmax", "len", "numpy.flip().argmax", "numpy.flip", "numpy.flip"], "function", ["None"], ["\n", "def", "get_pooling_layer_creator", "(", "PoolType", ")", ":", "\n", "    ", "def", "pooling_module_creator", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "PoolType", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "def", "identity_module_creator", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "nn", ".", "Identity", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "if", "cfg", ".", "INPUT", ".", "NUM_FRAMES", "==", "2", ":", "\n", "        ", "return", "[", "identity_module_creator", "for", "_", "in", "range", "(", "3", ")", "]", "\n", "", "elif", "cfg", ".", "INPUT", ".", "NUM_FRAMES", "==", "4", ":", "\n", "        ", "return", "[", "pooling_module_creator", "]", "+", "[", "identity_module_creator", "for", "_", "in", "range", "(", "2", ")", "]", "\n", "", "elif", "cfg", ".", "INPUT", ".", "NUM_FRAMES", "==", "8", ":", "\n", "        ", "return", "[", "pooling_module_creator", "for", "_", "in", "range", "(", "2", ")", "]", "+", "[", "identity_module_creator", "]", "\n", "", "elif", "cfg", ".", "INPUT", ".", "NUM_FRAMES", "in", "(", "16", ",", "24", ",", "32", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.common.annotate_instance": [[23, 57], ["tuple", "stemseg.utils.vis.overlay_mask_on_image", "common.bbox_from_mask", "cv2.rectangle", "cv2.getTextSize", "cv2.putText", "int", "int", "int", "int", "int", "int", "cv2.rectangle"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.vis.overlay_mask_on_image", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.instance_duplicator.InstanceDuplicator.bbox_from_mask"], ["", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "\n", "", "", "def", "get_temporal_scales", "(", ")", ":", "\n", "    ", "if", "cfg", ".", "INPUT", ".", "NUM_FRAMES", "==", "2", ":", "\n", "        ", "return", "[", "1", ",", "1", ",", "1", "]", "\n", "", "elif", "cfg", ".", "INPUT", ".", "NUM_FRAMES", "==", "4", ":", "\n", "        ", "return", "[", "1", ",", "1", ",", "2", "]", "\n", "", "elif", "cfg", ".", "INPUT", ".", "NUM_FRAMES", "==", "8", ":", "\n", "        ", "return", "[", "1", ",", "2", ",", "2", "]", "\n", "", "elif", "cfg", ".", "INPUT", ".", "NUM_FRAMES", "in", "(", "16", ",", "24", ",", "32", ")", ":", "\n", "        ", "return", "[", "2", ",", "2", ",", "2", "]", "\n", "\n", "\n", "", "", "class", "AtrousPyramid3D", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "pyramid_channels", ",", "dilation_rates", ",", "out_channels", "=", "None", ",", "include_1x1_conv", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "pyramid_channels", "=", "[", "pyramid_channels", "]", "*", "len", "(", "dilation_rates", ")", "\n", "\n", "atrous_convs", "=", "[", "\n", "nn", ".", "Conv3d", "(", "in_channels", ",", "channels", ",", "3", ",", "padding", "=", "rate", ",", "dilation", "=", "rate", ",", "bias", "=", "False", ")", "\n", "for", "(", "channels", ",", "rate", ")", "in", "zip", "(", "pyramid_channels", ",", "dilation_rates", ")", "\n", "]", "\n", "if", "include_1x1_conv", ":", "\n", "            ", "atrous_convs", ".", "append", "(", "nn", ".", "Conv3d", "(", "in_channels", ",", "pyramid_channels", "[", "0", "]", ",", "1", ",", "bias", "=", "False", ")", ")", "\n", "total_channels", "=", "sum", "(", "pyramid_channels", ")", "+", "pyramid_channels", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "total_channels", "=", "sum", "(", "pyramid_channels", ")", "\n", "\n", "", "self", ".", "atrous_convs", "=", "nn", ".", "ModuleList", "(", "atrous_convs", ")", "\n", "\n", "if", "out_channels", ":", "\n", "            ", "self", ".", "conv_out", "=", "nn", ".", "Sequential", "(", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.youtube_vis.YoutubeVISOutputGenerator.__init__": [[19, 36], ["os.makedirs", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get"], ["    ", "def", "__init__", "(", "self", ",", "output_dir", ",", "outlier_label", ",", "save_visualization", ",", "category_mapping", ",", "category_names", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "# category_mapping contains a mapping from the original youtube vis class labels to the merged labels that were", "\n", "# used to train the model. This mapping now has to be reversed to obtain the original class labels for uploading", "\n", "# results.", "\n", "# self.category_mapping = defaultdict(list)", "\n", "# for orig_label, mapped_label in category_mapping.items():", "\n", "#     self.category_mapping[mapped_label].append(orig_label)  # one to many mapping is possible", "\n", "\n", "        ", "self", ".", "outlier_label", "=", "outlier_label", "\n", "self", ".", "instances", "=", "[", "]", "\n", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "output_dir", "=", "output_dir", "\n", "self", ".", "save_visualization", "=", "save_visualization", "\n", "\n", "self", ".", "category_names", "=", "category_names", "\n", "self", ".", "upscaled_inputs", "=", "kwargs", ".", "get", "(", "\"upscaled_inputs\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.youtube_vis.YoutubeVISOutputGenerator.compute_instance_confidences": [[37, 48], ["float", "max", "instance_pt_counts.items", "list", "float", "instance_pt_counts.items", "instance_pt_counts.values"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "compute_instance_confidences", "(", "instance_pt_counts", ",", "instance_ids_to_keep", ")", ":", "\n", "# set instance confidence based on number of points in the instance mask across the entire sequence.", "\n", "        ", "instance_pt_counts", "=", "{", "\n", "instance_id", ":", "count", "\n", "for", "instance_id", ",", "count", "in", "instance_pt_counts", ".", "items", "(", ")", "if", "instance_id", "in", "instance_ids_to_keep", "\n", "}", "\n", "\n", "max_pts", "=", "float", "(", "max", "(", "list", "(", "instance_pt_counts", ".", "values", "(", ")", ")", ")", ")", "\n", "return", "{", "\n", "instance_id", ":", "float", "(", "count", ")", "/", "max_pts", "for", "instance_id", ",", "count", "in", "instance_pt_counts", ".", "items", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.youtube_vis.YoutubeVISOutputGenerator.process_sequence": [[50, 166], ["stemseg.utils.timer.Timer.exclude_duration", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "print", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "collections.defaultdict", "youtube_vis.YoutubeVISOutputGenerator.compute_instance_confidences", "range", "youtube_vis.YoutubeVISOutputGenerator.add_sequence_result", "len", "len", "len", "len", "print", "x.to", "category_masks.permute().to.permute().to.permute().to", "len", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.interpolate.unsqueeze().float", "stemseg.data.common.compute_resize_params_2", "torch.interpolate.byte().squeeze", "enumerate", "dict", "len", "tuple", "tuple", "sorted", "coords[].to", "coords[].to", "masks_per_frame.to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "label_mask.long", "torch.interpolate.append", "category_mask_t[].sum", "label_mask.sum", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "pycocotools.mask.encode", "rle_mask[].decode", "instance_rle_masks[].append", "category_masks.permute().to.permute().to.permute", "torch.interpolate.unsqueeze", "RuntimeError", "torch.interpolate.byte", "numpy.asfortranarray", "mask_t[].cpu().numpy", "instance_lifetimes.items", "tuple", "mask_t[].cpu"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.exclude_duration", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.youtube_vis.YoutubeVISOutputGenerator.compute_instance_confidences", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.youtube_vis.YoutubeVISOutputGenerator.add_sequence_result", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.common.compute_resize_params_2", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.image_list.ImageList.numpy", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.cpu"], ["", "@", "Timer", ".", "exclude_duration", "(", "\"postprocessing\"", ")", "\n", "def", "process_sequence", "(", "self", ",", "sequence", ",", "track_mask_idxes", ",", "track_mask_labels", ",", "instance_pt_counts", ",", "instance_lifetimes", ",", "\n", "category_masks", ",", "mask_dims", ",", "mask_scale", ",", "max_tracks", ",", "device", "=", "\"cpu\"", ")", ":", "\n", "        ", "\"\"\"\n        Given a list of mask indices per frame, creates a sequence of masks for the entire sequence.\n        :param sequence: instance of YoutubeVISSequence\n        :param track_mask_idxes: list(tuple(tensor, tensor))\n        :param track_mask_labels: list(tensor)\n        :param instance_pt_counts: dict(int -> int)\n        :param category_masks: tensor(T, C, H, W) of type float (result after softmax)\n        :param mask_dims: tuple(int, int) (height, width)\n        :param mask_scale: int\n        :param max_tracks: int\n        :param device: str\n        :return: None\n        \"\"\"", "\n", "mask_height", ",", "mask_width", "=", "mask_dims", "\n", "image_height", ",", "image_width", "=", "sequence", ".", "image_dims", "\n", "assert", "len", "(", "track_mask_idxes", ")", "==", "len", "(", "track_mask_labels", ")", "\n", "\n", "if", "torch", ".", "is_tensor", "(", "category_masks", ")", ":", "\n", "            ", "assert", "category_masks", ".", "shape", "[", "0", "]", "==", "len", "(", "track_mask_idxes", ")", "\n", "assert", "tuple", "(", "category_masks", ".", "shape", "[", "-", "2", ":", "]", ")", "==", "tuple", "(", "mask_dims", ")", ",", "\"Shape mismatch between semantic masks {} and embedding masks {}\"", ".", "format", "(", "category_masks", ".", "shape", ",", "mask_dims", ")", "\n", "\n", "", "assert", "max_tracks", "<", "256", "\n", "\n", "# filter out small/unstable instances", "\n", "instances_to_keep", "=", "[", "\n", "instance_id", "for", "instance_id", ",", "_", "in", "sorted", "(", "\n", "[", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "instance_lifetimes", ".", "items", "(", ")", "]", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", "\n", ")", "if", "instance_id", "!=", "self", ".", "outlier_label", "\n", "]", "\n", "instances_to_keep", "=", "instances_to_keep", "[", ":", "max_tracks", "]", "\n", "# num_tracks = len(instances_to_keep)", "\n", "print", "(", "\"Number of instances: \"", ",", "len", "(", "instances_to_keep", ")", ")", "\n", "if", "len", "(", "instances_to_keep", ")", "==", "0", ":", "\n", "            ", "print", "(", "\"No instances detected for sequence {}\"", ".", "format", "(", "sequence", ".", "seq_id", ")", ")", "\n", "return", "\n", "\n", "# move tensors to the target device", "\n", "", "track_mask_labels", "=", "[", "x", ".", "to", "(", "device", "=", "device", ")", "for", "x", "in", "track_mask_labels", "]", "\n", "track_mask_idxes", "=", "[", "(", "coords", "[", "0", "]", ".", "to", "(", "device", "=", "device", ")", ",", "coords", "[", "1", "]", ".", "to", "(", "device", "=", "device", ")", ")", "for", "coords", "in", "track_mask_idxes", "]", "\n", "\n", "if", "torch", ".", "is_tensor", "(", "category_masks", ")", ":", "\n", "            ", "category_masks", "=", "category_masks", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "to", "(", "device", "=", "device", ")", "# [T, H, W, C]", "\n", "", "else", ":", "\n", "            ", "category_masks", "=", "[", "masks_per_frame", ".", "to", "(", "device", "=", "device", ")", "for", "masks_per_frame", "in", "category_masks", "]", "\n", "\n", "# instance_semantic_label_votes = defaultdict(lambda: {k: 0. for k in self.category_mapping.keys()})", "\n", "", "instance_semantic_label_logits", "=", "defaultdict", "(", "lambda", ":", "0.", ")", "\n", "\n", "instance_rle_masks", "=", "{", "k", ":", "[", "]", "for", "k", "in", "instances_to_keep", "}", "\n", "instance_areas", "=", "{", "k", ":", "0.", "for", "k", "in", "instances_to_keep", "}", "\n", "instance_confidences", "=", "self", ".", "compute_instance_confidences", "(", "instance_pt_counts", ",", "instances_to_keep", ")", "\n", "\n", "for", "t", "in", "range", "(", "len", "(", "track_mask_idxes", ")", ")", ":", "\n", "# filter semantic labels for background pixels", "\n", "            ", "if", "torch", ".", "is_tensor", "(", "category_masks", ")", ":", "\n", "                ", "category_mask_t", "=", "category_masks", "[", "t", "]", "[", "track_mask_idxes", "[", "t", "]", "]", "\n", "", "else", ":", "\n", "                ", "category_mask_t", "=", "category_masks", "[", "t", "]", "\n", "\n", "", "assert", "category_mask_t", ".", "shape", "[", "0", "]", "==", "track_mask_labels", "[", "t", "]", ".", "shape", "[", "0", "]", ",", "\"Shape mismatch between category labels {} and instance labels {}\"", ".", "format", "(", "\n", "category_mask_t", ".", "shape", ",", "track_mask_labels", "[", "t", "]", ".", "shape", ")", "\n", "\n", "mask_t", "=", "[", "]", "\n", "for", "instance_id", "in", "instances_to_keep", ":", "\n", "                ", "label_mask", "=", "track_mask_labels", "[", "t", "]", "==", "instance_id", "\n", "mask", "=", "torch", ".", "zeros", "(", "mask_height", ",", "mask_width", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "mask", "[", "track_mask_idxes", "[", "t", "]", "]", "=", "label_mask", ".", "long", "(", ")", "\n", "mask_t", ".", "append", "(", "mask", ")", "\n", "\n", "instance_category_preds", "=", "category_mask_t", "[", "label_mask", "]", ".", "sum", "(", "dim", "=", "0", ")", "\n", "instance_areas", "[", "instance_id", "]", "+=", "label_mask", ".", "sum", "(", "dtype", "=", "torch", ".", "float32", ")", "\n", "instance_semantic_label_logits", "[", "instance_id", "]", "+=", "instance_category_preds", "[", "1", ":", "]", "# remove background", "\n", "\n", "", "mask_t", "=", "torch", ".", "stack", "(", "mask_t", ",", "dim", "=", "0", ")", "\n", "\n", "# to obtain the mask in the original image dims:", "\n", "# 1. up-sample mask to network input size", "\n", "# 2. remove zero padding from right/bottom", "\n", "# 3. resize to original image dims", "\n", "\n", "mask_t", "=", "mask_t", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", "\n", "\n", "if", "not", "self", ".", "upscaled_inputs", ":", "\n", "                ", "mask_t", "=", "F", ".", "interpolate", "(", "mask_t", ",", "scale_factor", "=", "mask_scale", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "# get resized network input dimensions (without zero padding)", "\n", "", "resized_mask_width", ",", "resized_mask_height", ",", "_", "=", "compute_resize_params_2", "(", "\n", "(", "image_width", ",", "image_height", ")", ",", "cfg", ".", "INPUT", ".", "MIN_DIM", ",", "cfg", ".", "INPUT", ".", "MAX_DIM", ")", "\n", "\n", "try", ":", "\n", "                ", "assert", "mask_t", ".", "shape", "[", "3", "]", ">=", "resized_mask_width", "\n", "assert", "mask_t", ".", "shape", "[", "2", "]", ">=", "resized_mask_height", "\n", "", "except", "AssertionError", "as", "_", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Network input dims without padding {} should be <= padded dims\"", ".", "format", "(", "\n", "(", "resized_mask_width", ",", "resized_mask_height", ")", ",", "tuple", "(", "mask_t", ".", "shape", "[", "-", "2", ":", "]", ")", ")", ")", "\n", "\n", "# remove extra zeros", "\n", "", "mask_t", "=", "mask_t", "[", ":", ",", ":", ",", ":", "resized_mask_height", ",", ":", "resized_mask_width", "]", "\n", "\n", "# resize to original image dims", "\n", "mask_t", "=", "(", "F", ".", "interpolate", "(", "mask_t", ",", "(", "image_height", ",", "image_width", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", ">", "0.5", ")", "\n", "mask_t", "=", "mask_t", ".", "byte", "(", ")", ".", "squeeze", "(", "0", ")", "\n", "\n", "for", "i", ",", "instance_id", "in", "enumerate", "(", "instances_to_keep", ")", ":", "\n", "                ", "rle_mask", "=", "masktools", ".", "encode", "(", "np", ".", "asfortranarray", "(", "mask_t", "[", "i", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "rle_mask", "[", "\"counts\"", "]", "=", "rle_mask", "[", "\"counts\"", "]", ".", "decode", "(", "\"utf-8\"", ")", "# bytes to utf-8 so that json.dump works", "\n", "instance_rle_masks", "[", "instance_id", "]", ".", "append", "(", "rle_mask", ")", "\n", "\n", "", "", "self", ".", "add_sequence_result", "(", "sequence", ",", "instance_rle_masks", ",", "instance_semantic_label_logits", ",", "instance_areas", ",", "instance_confidences", ")", "\n", "\n", "return", "instances_to_keep", ",", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.youtube_vis.YoutubeVISOutputGenerator.add_sequence_result": [[167, 197], ["dict", "youtube_vis.YoutubeVISOutputGenerator.instances.extend", "sorted", "sequence_instances.append", "youtube_vis.YoutubeVISOutputGenerator.save_sequence_visualizations", "enumerate"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.youtube_vis.YoutubeVISOutputGenerator.save_sequence_visualizations"], ["", "def", "add_sequence_result", "(", "self", ",", "seq", ",", "instance_rle_masks", ",", "instance_semantic_label_logits", ",", "instance_areas", ",", "instance_confidences", ")", ":", "\n", "# assign semantic label to each instance based on max votes", "\n", "# instance_mapped_labels = dict()", "\n", "        ", "instance_category_probs", "=", "dict", "(", ")", "\n", "sequence_instances", "=", "[", "]", "\n", "\n", "for", "instance_id", "in", "instance_rle_masks", ":", "\n", "            ", "instance_area", "=", "instance_areas", "[", "instance_id", "]", "\n", "semantic_label_probs", "=", "(", "instance_semantic_label_logits", "[", "instance_id", "]", "/", "instance_area", ")", ".", "softmax", "(", "0", ")", ".", "tolist", "(", ")", "\n", "instance_category_probs", "[", "instance_id", "]", "=", "semantic_label_probs", "\n", "\n", "cat_id_probs_sorted", "=", "sorted", "(", "[", "\n", "(", "cat_id", ",", "prob", ")", "\n", "for", "cat_id", ",", "prob", "in", "enumerate", "(", "semantic_label_probs", ",", "1", ")", "\n", "]", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "max_voted_label", "=", "cat_id_probs_sorted", "[", "0", "]", "[", "0", "]", "\n", "\n", "sequence_instances", ".", "append", "(", "{", "\n", "\"video_id\"", ":", "seq", ".", "id", ",", "\n", "\"score\"", ":", "instance_confidences", "[", "instance_id", "]", ",", "\n", "\"category_id\"", ":", "max_voted_label", ",", "\n", "\"segmentations\"", ":", "instance_rle_masks", "[", "instance_id", "]", "\n", "# \"category_probs\": instance_category_probs[instance_id]", "\n", "}", ")", "\n", "\n", "", "if", "self", ".", "save_visualization", ":", "\n", "            ", "self", ".", "save_sequence_visualizations", "(", "seq", ",", "sequence_instances", ")", "\n", "\n", "", "self", ".", "instances", ".", "extend", "(", "sequence_instances", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.youtube_vis.YoutubeVISOutputGenerator.save_sequence_visualizations": [[198, 223], ["stemseg.utils.timer.Timer.exclude_duration", "stemseg.utils.vis.create_color_map().tolist", "os.path.join", "os.makedirs", "seq.load_images", "enumerate", "str", "enumerate", "cv2.imwrite", "stemseg.utils.vis.create_color_map", "segmentations[].copy", "segmentation_t[].encode", "pycocotools.mask.decode", "stemseg.inference.output_utils.common.annotate_instance", "os.path.join", "len", "len"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.exclude_duration", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_video_dataset_parser.GenericVideoSequence.load_images", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.vis.create_color_map", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.copy", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.common.annotate_instance"], ["", "@", "Timer", ".", "exclude_duration", "(", "\"postprocessing\"", ")", "\n", "def", "save_sequence_visualizations", "(", "self", ",", "seq", ",", "instances", ")", ":", "\n", "        ", "cmap", "=", "create_color_map", "(", ")", ".", "tolist", "(", ")", "\n", "seq_output_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'vis'", ",", "str", "(", "seq", ".", "id", ")", ")", "\n", "os", ".", "makedirs", "(", "seq_output_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "images", "=", "seq", ".", "load_images", "(", ")", "\n", "\n", "for", "t", ",", "image_t", "in", "enumerate", "(", "images", ")", ":", "\n", "            ", "for", "n", ",", "instance", "in", "enumerate", "(", "instances", ",", "1", ")", ":", "\n", "                ", "segmentations", "=", "instance", "[", "\"segmentations\"", "]", "\n", "assert", "len", "(", "segmentations", ")", "==", "len", "(", "images", ")", "\n", "\n", "category_label", "=", "self", ".", "category_names", "[", "instance", "[", "\"category_id\"", "]", "]", "\n", "color", "=", "cmap", "[", "n", "]", "\n", "\n", "segmentation_t", "=", "segmentations", "[", "t", "]", ".", "copy", "(", ")", "\n", "segmentation_t", "[", "\"counts\"", "]", "=", "segmentation_t", "[", "\"counts\"", "]", ".", "encode", "(", "\"utf-8\"", ")", "\n", "\n", "mask", "=", "masktools", ".", "decode", "(", "segmentation_t", ")", "\n", "\n", "annotation_text", "=", "\"{} {:.2f}\"", ".", "format", "(", "category_label", ",", "instance", "[", "\"score\"", "]", ")", "\n", "image_t", "=", "annotate_instance", "(", "image_t", ",", "mask", ",", "color", ",", "annotation_text", ")", "\n", "\n", "", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "seq_output_dir", ",", "'{:05d}.jpg'", ".", "format", "(", "t", ")", ")", ",", "image_t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.youtube_vis.YoutubeVISOutputGenerator.save": [[224, 239], ["os.path.join", "os.path.join", "zipfile.ZipFile", "zipfile.ZipFile.write", "zipfile.ZipFile.close", "open", "json.dump"], "methods", ["None"], ["", "", "def", "save", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Writes out results to disk\n        :return: None\n        \"\"\"", "\n", "# save results as JSON file", "\n", "output_json_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'results.json'", ")", "\n", "with", "open", "(", "output_json_path", ",", "'w'", ")", "as", "fh", ":", "\n", "            ", "json", ".", "dump", "(", "self", ".", "instances", ",", "fh", ")", "\n", "\n", "# zip the JSON file. For uploading to test server", "\n", "", "output_zip_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'results.zip'", ")", "\n", "zf", "=", "ZipFile", "(", "output_zip_path", ",", "'w'", ")", "\n", "zf", ".", "write", "(", "output_json_path", ",", "arcname", "=", "'results.json'", ")", "\n", "zf", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.kitti_mots_postprocessing.Detection.__init__": [[27, 32], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "frame_id", ",", "track_id", ",", "class_id", ",", "mask", ")", ":", "\n", "        ", "self", ".", "frame_id", "=", "frame_id", "\n", "self", ".", "track_id", "=", "track_id", "\n", "self", ".", "class_id", "=", "class_id", "\n", "self", ".", "_mask", "=", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.kitti_mots_postprocessing.Detection.as_txt": [[33, 37], ["kitti_mots_postprocessing.Detection._mask[].decode"], "methods", ["None"], ["", "def", "as_txt", "(", "self", ")", ":", "\n", "        ", "return", "\"{} {} {} {} {} {}\"", ".", "format", "(", "\n", "self", ".", "frame_id", ",", "self", ".", "track_id", ",", "self", ".", "class_id", ",", "self", ".", "_mask", "[", "'size'", "]", "[", "0", "]", ",", "self", ".", "_mask", "[", "'size'", "]", "[", "1", "]", ",", "\n", "self", ".", "_mask", "[", "'counts'", "]", ".", "decode", "(", "\"utf-8\"", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.kitti_mots_postprocessing.Detection.mask": [[39, 42], ["pycocotools.decode"], "methods", ["None"], ["", "@", "property", "\n", "def", "mask", "(", "self", ")", ":", "\n", "        ", "return", "masktools", ".", "decode", "(", "self", ".", "_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.kitti_mots_postprocessing.Detection.pixel_area": [[43, 46], ["pycocotools.area"], "methods", ["None"], ["", "@", "property", "\n", "def", "pixel_area", "(", "self", ")", ":", "\n", "        ", "return", "masktools", ".", "area", "(", "self", ".", "_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.kitti_mots_postprocessing.Detection.bbox_area": [[47, 51], ["pycocotools.toBbox"], "methods", ["None"], ["", "@", "property", "\n", "def", "bbox_area", "(", "self", ")", ":", "\n", "        ", "x", ",", "y", ",", "w", ",", "h", "=", "masktools", ".", "toBbox", "(", "self", ".", "_mask", ")", "\n", "return", "w", "*", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.kitti_mots_postprocessing.Detection.pixel_bbox_area_ratio": [[52, 59], ["float", "float"], "methods", ["None"], ["", "@", "property", "\n", "def", "pixel_bbox_area_ratio", "(", "self", ")", ":", "\n", "        ", "bbox_area", "=", "self", ".", "bbox_area", "\n", "if", "bbox_area", "==", "0", ":", "\n", "            ", "return", "0.", "\n", "", "else", ":", "\n", "            ", "return", "float", "(", "self", ".", "pixel_area", ")", "/", "float", "(", "self", ".", "bbox_area", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.kitti_mots_postprocessing.Detection.from_txt": [[60, 68], ["txt.strip().split", "cls", "int", "int", "int", "txt.strip", "fields[].encode", "int", "int"], "methods", ["None"], ["", "", "@", "classmethod", "\n", "def", "from_txt", "(", "cls", ",", "txt", ")", ":", "\n", "        ", "fields", "=", "txt", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "return", "cls", "(", "\n", "int", "(", "fields", "[", "0", "]", ")", ",", "int", "(", "fields", "[", "1", "]", ")", ",", "int", "(", "fields", "[", "2", "]", ")", ",", "\n", "{", "\n", "\"size\"", ":", "(", "int", "(", "fields", "[", "3", "]", ")", ",", "int", "(", "fields", "[", "4", "]", ")", ")", ",", "\n", "\"counts\"", ":", "fields", "[", "5", "]", ".", "encode", "(", "\"utf-8\"", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.kitti_mots_postprocessing.detections_to_tracks": [[72, 81], ["collections.defaultdict", "list", "tracks[].append", "sorted", "collections.defaultdict.values"], "function", ["None"], ["", "", "def", "detections_to_tracks", "(", "detections", ")", ":", "\n", "    ", "tracks", "=", "defaultdict", "(", "list", ")", "\n", "for", "det", "in", "detections", ":", "\n", "        ", "tracks", "[", "det", ".", "track_id", "]", ".", "append", "(", "det", ")", "\n", "\n", "", "for", "track_id", "in", "tracks", ":", "\n", "        ", "tracks", "[", "track_id", "]", "=", "sorted", "(", "tracks", "[", "track_id", "]", ",", "key", "=", "lambda", "d", ":", "d", ".", "frame_id", ")", "\n", "\n", "", "return", "list", "(", "tracks", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.kitti_mots_postprocessing.compute_track_span": [[83, 87], ["min", "max"], "function", ["None"], ["", "def", "compute_track_span", "(", "track", ")", ":", "\n", "    ", "min_t", "=", "min", "(", "track", ",", "key", "=", "lambda", "det", ":", "det", ".", "frame_id", ")", ".", "frame_id", "\n", "max_t", "=", "max", "(", "track", ",", "key", "=", "lambda", "det", ":", "det", ".", "frame_id", ")", ".", "frame_id", "\n", "return", "max_t", "-", "min_t", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.kitti_mots_postprocessing.compute_nbr_time_breaks": [[89, 96], ["range", "int", "len"], "function", ["None"], ["", "def", "compute_nbr_time_breaks", "(", "track", ")", ":", "\n", "    ", "n_breaks", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "track", ")", "-", "1", ")", ":", "\n", "        ", "n_breaks", "+=", "int", "(", "track", "[", "i", "+", "1", "]", ".", "frame_id", "-", "track", "[", "i", "]", ".", "frame_id", ">", "1", ")", "\n", "\n", "", "return", "n_breaks", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.kitti_mots_postprocessing.filter_tracks_by_length": [[98, 111], ["kitti_mots_postprocessing.detections_to_tracks", "filtered_dets.extend", "len", "len"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.kitti_mots_postprocessing.detections_to_tracks"], ["", "def", "filter_tracks_by_length", "(", "detections", ",", "min_track_length_car", ",", "min_track_length_person", ")", ":", "\n", "    ", "tracks", "=", "detections_to_tracks", "(", "detections", ")", "\n", "\n", "filtered_dets", "=", "[", "]", "\n", "for", "t", "in", "tracks", ":", "\n", "        ", "if", "t", "[", "0", "]", ".", "class_id", "==", "CAR_CLASS_ID", "and", "len", "(", "t", ")", "<", "min_track_length_car", ":", "\n", "            ", "continue", "\n", "", "elif", "t", "[", "0", "]", ".", "class_id", "==", "PERSON_CLASS_ID", "and", "len", "(", "t", ")", "<", "min_track_length_person", ":", "\n", "            ", "continue", "\n", "\n", "", "filtered_dets", ".", "extend", "(", "t", ")", "\n", "\n", "", "return", "filtered_dets", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.kitti_mots_postprocessing.filter_tracks_by_time_breaks": [[113, 127], ["kitti_mots_postprocessing.detections_to_tracks", "filtered_dets.extend", "float", "float", "kitti_mots_postprocessing.compute_nbr_time_breaks", "len", "float", "float", "kitti_mots_postprocessing.compute_nbr_time_breaks", "len"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.kitti_mots_postprocessing.detections_to_tracks", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.kitti_mots_postprocessing.compute_nbr_time_breaks", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.kitti_mots_postprocessing.compute_nbr_time_breaks"], ["", "def", "filter_tracks_by_time_breaks", "(", "detections", ",", "max_time_break_ratio_car", ",", "max_time_break_ratio_person", ")", ":", "\n", "    ", "tracks", "=", "detections_to_tracks", "(", "detections", ")", "\n", "\n", "filtered_dets", "=", "[", "]", "\n", "for", "t", "in", "tracks", ":", "\n", "# print(float(compute_nbr_time_breaks(t)) / float(len(t)))", "\n", "        ", "if", "t", "[", "0", "]", ".", "class_id", "==", "CAR_CLASS_ID", "and", "(", "float", "(", "compute_nbr_time_breaks", "(", "t", ")", ")", "/", "float", "(", "len", "(", "t", ")", ")", ")", ">", "max_time_break_ratio_car", ":", "\n", "            ", "continue", "\n", "", "elif", "t", "[", "0", "]", ".", "class_id", "==", "PERSON_CLASS_ID", "and", "(", "float", "(", "compute_nbr_time_breaks", "(", "t", ")", ")", "/", "float", "(", "len", "(", "t", ")", ")", ")", ">", "max_time_break_ratio_person", ":", "\n", "            ", "continue", "\n", "\n", "", "filtered_dets", ".", "extend", "(", "t", ")", "\n", "\n", "", "return", "filtered_dets", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.kitti_mots_postprocessing.filter_detections_by_area": [[129, 134], ["None"], "function", ["None"], ["", "def", "filter_detections_by_area", "(", "detections", ",", "min_car_area", ",", "min_person_area", ")", ":", "\n", "    ", "return", "[", "\n", "det", "for", "det", "in", "detections", "\n", "if", "(", "det", ".", "class_id", "==", "CAR_CLASS_ID", "and", "det", ".", "pixel_area", ">=", "min_car_area", ")", "or", "\n", "(", "det", ".", "class_id", "==", "PERSON_CLASS_ID", "and", "det", ".", "pixel_area", ">=", "min_person_area", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.kitti_mots_postprocessing.filter_detections_by_area_ratio": [[137, 142], ["None"], "function", ["None"], ["", "def", "filter_detections_by_area_ratio", "(", "detections", ",", "min_ratio_cars", ",", "min_ratio_persons", ")", ":", "\n", "    ", "return", "[", "\n", "det", "for", "det", "in", "detections", "\n", "if", "(", "det", ".", "class_id", "==", "CAR_CLASS_ID", "and", "det", ".", "pixel_bbox_area_ratio", ">", "min_ratio_cars", ")", "or", "\n", "(", "det", ".", "class_id", "==", "PERSON_CLASS_ID", "and", "det", ".", "pixel_bbox_area_ratio", ">", "min_ratio_persons", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.kitti_mots_postprocessing.main": [[145, 181], ["sorted", "os.makedirs", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "print", "glob.glob", "print", "kitti_mots_postprocessing.filter_detections_by_area", "kitti_mots_postprocessing.filter_detections_by_area_ratio", "kitti_mots_postprocessing.filter_tracks_by_time_breaks", "kitti_mots_postprocessing.filter_tracks_by_length", "os.path.join", "kwargs.get", "os.path.split", "open", "open", "fh.writelines", "kitti_mots_postprocessing.Detection.from_txt", "os.path.join", "fh.readlines", "det.as_txt"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.kitti_mots_postprocessing.filter_detections_by_area", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.kitti_mots_postprocessing.filter_detections_by_area_ratio", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.kitti_mots_postprocessing.filter_tracks_by_time_breaks", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.kitti_mots_postprocessing.filter_tracks_by_length", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.kitti_mots_postprocessing.Detection.from_txt", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.output_utils.kitti_mots_postprocessing.Detection.as_txt"], ["", "def", "main", "(", "**", "kwargs", ")", ":", "\n", "    ", "result_files", "=", "sorted", "(", "glob", "(", "os", ".", "path", ".", "join", "(", "kwargs", "[", "'results_dir'", "]", ",", "\"????.txt\"", ")", ")", ")", "\n", "output_dir", "=", "kwargs", "[", "'results_dir'", "]", "+", "\"_{}\"", ".", "format", "(", "kwargs", ".", "get", "(", "'output_dir_suffix'", ",", "'nms'", ")", ")", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "min_area_car", "=", "kwargs", ".", "get", "(", "'min_car_area'", ",", "DEFAULT_MIN_AREA_CAR", ")", "\n", "min_area_pedestrian", "=", "kwargs", ".", "get", "(", "'min_person_area'", ",", "DEFAULT_MIN_AREA_PEDESTRIAN", ")", "\n", "\n", "min_area_ratio_car", "=", "kwargs", ".", "get", "(", "'min_area_ratio_car'", ",", "DEFAULT_MIN_AREA_RATIO_CAR", ")", "\n", "min_area_ratio_pedestrian", "=", "kwargs", ".", "get", "(", "'min_area_ratio_person'", ",", "DEFAULT_MIN_AREA_RATIO_PEDESTRIAN", ")", "\n", "\n", "min_track_length_car", "=", "kwargs", ".", "get", "(", "'min_track_length_car'", ",", "DEFAULT_MIN_TRACK_LENGTH_CAR", ")", "\n", "min_track_length_pedestrian", "=", "kwargs", ".", "get", "(", "'min_track_length_person'", ",", "DEFAULT_MIN_TRACK_LENGTH_PEDESTRIAN", ")", "\n", "\n", "max_time_break_ratio_car", "=", "kwargs", ".", "get", "(", "'max_time_break_ratio_car'", ",", "DEFAULT_MAX_TIME_BREAK_RATIO_CAR", ")", "\n", "max_time_break_ratio_pedestrian", "=", "kwargs", ".", "get", "(", "'max_time_break_ratio_person'", ",", "DEFAULT_MAX_TIME_BREAK_RATIO_PEDESTRIAN", ")", "\n", "\n", "for", "f", "in", "result_files", ":", "\n", "        ", "seq_file_name", "=", "os", ".", "path", ".", "split", "(", "f", ")", "[", "-", "1", "]", "\n", "\n", "print", "(", "\"Processing {}\"", ".", "format", "(", "seq_file_name", ")", ")", "\n", "with", "open", "(", "f", ",", "'r'", ")", "as", "fh", ":", "\n", "            ", "detections", "=", "[", "Detection", ".", "from_txt", "(", "det_txt", ")", "for", "det_txt", "in", "fh", ".", "readlines", "(", ")", "]", "\n", "\n", "", "detections", "=", "filter_detections_by_area", "(", "detections", ",", "min_area_car", ",", "min_area_pedestrian", ")", "\n", "\n", "detections", "=", "filter_detections_by_area_ratio", "(", "detections", ",", "min_area_ratio_car", ",", "min_area_ratio_pedestrian", ")", "\n", "\n", "detections", "=", "filter_tracks_by_time_breaks", "(", "detections", ",", "max_time_break_ratio_car", ",", "max_time_break_ratio_pedestrian", ")", "\n", "\n", "detections", "=", "filter_tracks_by_length", "(", "detections", ",", "min_track_length_car", ",", "min_track_length_pedestrian", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "seq_file_name", ")", ",", "'w'", ")", "as", "fh", ":", "\n", "            ", "fh", ".", "writelines", "(", "[", "det", ".", "as_txt", "(", ")", "+", "\"\\n\"", "for", "det", "in", "detections", "]", ")", "\n", "\n", "", "", "print", "(", "\"Results after applying NMS written to: {}\"", ".", "format", "(", "output_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_video_dataset_parser.GenericVideoSequence.__init__": [[41, 49], ["seq_dict.get", "seq_dict.get"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get"], ["    ", "def", "__init__", "(", "self", ",", "seq_dict", ",", "base_dir", ")", ":", "\n", "        ", "self", ".", "base_dir", "=", "base_dir", "\n", "self", ".", "image_paths", "=", "seq_dict", "[", "\"image_paths\"", "]", "\n", "self", ".", "image_dims", "=", "(", "seq_dict", "[", "\"height\"", "]", ",", "seq_dict", "[", "\"width\"", "]", ")", "\n", "self", ".", "id", "=", "seq_dict", "[", "\"id\"", "]", "\n", "\n", "self", ".", "segmentations", "=", "seq_dict", ".", "get", "(", "\"segmentations\"", ",", "None", ")", "\n", "self", ".", "instance_categories", "=", "seq_dict", ".", "get", "(", "\"categories\"", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_video_dataset_parser.GenericVideoSequence.instance_ids": [[50, 53], ["list", "generic_video_dataset_parser.GenericVideoSequence.instance_categories.keys"], "methods", ["None"], ["", "@", "property", "\n", "def", "instance_ids", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "instance_categories", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_video_dataset_parser.GenericVideoSequence.category_labels": [[54, 57], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "category_labels", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "instance_categories", "[", "instance_id", "]", "for", "instance_id", "in", "self", ".", "instance_ids", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_video_dataset_parser.GenericVideoSequence.__len__": [[58, 60], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "image_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_video_dataset_parser.GenericVideoSequence.load_images": [[61, 73], ["list", "cv2.imread", "images.append", "range", "os.path.join", "ValueError", "len", "os.path.join"], "methods", ["None"], ["", "def", "load_images", "(", "self", ",", "frame_idxes", "=", "None", ")", ":", "\n", "        ", "if", "frame_idxes", "is", "None", ":", "\n", "            ", "frame_idxes", "=", "list", "(", "range", "(", "len", "(", "self", ".", "image_paths", ")", ")", ")", "\n", "\n", "", "images", "=", "[", "]", "\n", "for", "t", "in", "frame_idxes", ":", "\n", "            ", "im", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "self", ".", "base_dir", ",", "self", ".", "image_paths", "[", "t", "]", ")", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "if", "im", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\"No image found at path: {}\"", ".", "format", "(", "os", ".", "path", ".", "join", "(", "self", ".", "base_dir", ",", "self", ".", "image_paths", "[", "t", "]", ")", ")", ")", "\n", "", "images", ".", "append", "(", "im", ")", "\n", "\n", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_video_dataset_parser.GenericVideoSequence.load_masks": [[74, 95], ["list", "masks.append", "range", "len", "masks_t.append", "masks_t.append", "[].encode", "numpy.ascontiguousarray", "numpy.zeros", "pycocotools.mask.decode().astype", "pycocotools.mask.decode"], "methods", ["None"], ["", "def", "load_masks", "(", "self", ",", "frame_idxes", "=", "None", ")", ":", "\n", "        ", "if", "frame_idxes", "is", "None", ":", "\n", "            ", "frame_idxes", "=", "list", "(", "range", "(", "len", "(", "self", ".", "image_paths", ")", ")", ")", "\n", "\n", "", "masks", "=", "[", "]", "\n", "for", "t", "in", "frame_idxes", ":", "\n", "            ", "masks_t", "=", "[", "]", "\n", "\n", "for", "instance_id", "in", "self", ".", "instance_ids", ":", "\n", "                ", "if", "instance_id", "in", "self", ".", "segmentations", "[", "t", "]", ":", "\n", "                    ", "rle_mask", "=", "{", "\n", "\"counts\"", ":", "self", ".", "segmentations", "[", "t", "]", "[", "instance_id", "]", ".", "encode", "(", "'utf-8'", ")", ",", "\n", "\"size\"", ":", "self", ".", "image_dims", "\n", "}", "\n", "masks_t", ".", "append", "(", "np", ".", "ascontiguousarray", "(", "masktools", ".", "decode", "(", "rle_mask", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "masks_t", ".", "append", "(", "np", ".", "zeros", "(", "self", ".", "image_dims", ",", "np", ".", "uint8", ")", ")", "\n", "\n", "", "", "masks", ".", "append", "(", "masks_t", ")", "\n", "\n", "", "return", "masks", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_video_dataset_parser.GenericVideoSequence.filter_categories": [[96, 100], ["sorted", "range", "len", "generic_video_dataset_parser.GenericVideoSequence.instance_categories.items", "generic_video_dataset_parser.GenericVideoSequence.segmentations[].items"], "methods", ["None"], ["", "def", "filter_categories", "(", "self", ",", "cat_ids_to_keep", ")", ":", "\n", "        ", "instance_ids_to_keep", "=", "sorted", "(", "[", "iid", "for", "iid", ",", "cat_id", "in", "self", ".", "instance_categories", ".", "items", "(", ")", "if", "iid", "in", "cat_ids_to_keep", "]", ")", "\n", "for", "t", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "            ", "self", ".", "segmentations", "[", "t", "]", "=", "{", "iid", ":", "seg", "for", "iid", ",", "seg", "in", "self", ".", "segmentations", "[", "t", "]", ".", "items", "(", ")", "if", "iid", "in", "instance_ids_to_keep", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_video_dataset_parser.GenericVideoSequence.filter_zero_instance_frames": [[101, 105], ["range", "len", "len"], "methods", ["None"], ["", "", "def", "filter_zero_instance_frames", "(", "self", ")", ":", "\n", "        ", "t_to_keep", "=", "[", "t", "for", "t", "in", "range", "(", "len", "(", "self", ")", ")", "if", "len", "(", "self", ".", "segmentations", "[", "t", "]", ")", ">", "0", "]", "\n", "self", ".", "image_paths", "=", "[", "self", ".", "image_paths", "[", "t", "]", "for", "t", "in", "t_to_keep", "]", "\n", "self", ".", "segmentations", "=", "[", "self", ".", "segmentations", "[", "t", "]", "for", "t", "in", "t_to_keep", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_video_dataset_parser.GenericVideoSequence.apply_category_id_mapping": [[106, 110], ["set", "set", "mapping.keys", "generic_video_dataset_parser.GenericVideoSequence.instance_categories.keys", "generic_video_dataset_parser.GenericVideoSequence.instance_categories.items"], "methods", ["None"], ["", "def", "apply_category_id_mapping", "(", "self", ",", "mapping", ")", ":", "\n", "        ", "assert", "set", "(", "mapping", ".", "keys", "(", ")", ")", "==", "set", "(", "self", ".", "instance_categories", ".", "keys", "(", ")", ")", "\n", "self", ".", "instance_categories", "=", "{", "\n", "iid", ":", "mapping", "[", "current_cat_id", "]", "for", "iid", ",", "current_cat_id", "in", "self", ".", "instance_categories", ".", "items", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_video_dataset_parser.GenericVideoSequence.extract_subsequence": [[112, 132], ["all", "set", "generic_video_dataset_parser.GenericVideoSequence.__class__", "sum", "range", "list", "enumerate", "len", "generic_video_dataset_parser.GenericVideoSequence.segmentations[].keys"], "methods", ["None"], ["", "def", "extract_subsequence", "(", "self", ",", "frame_idxes", ",", "new_id", "=", "\"\"", ")", ":", "\n", "        ", "assert", "all", "(", "[", "t", "in", "range", "(", "len", "(", "self", ")", ")", "for", "t", "in", "frame_idxes", "]", ")", "\n", "instance_ids_to_keep", "=", "set", "(", "sum", "(", "[", "list", "(", "self", ".", "segmentations", "[", "t", "]", ".", "keys", "(", ")", ")", "for", "t", "in", "frame_idxes", "]", ",", "[", "]", ")", ")", "\n", "\n", "subseq_dict", "=", "{", "\n", "\"id\"", ":", "new_id", "if", "new_id", "else", "self", ".", "id", ",", "\n", "\"height\"", ":", "self", ".", "image_dims", "[", "0", "]", ",", "\n", "\"width\"", ":", "self", ".", "image_dims", "[", "1", "]", ",", "\n", "\"image_paths\"", ":", "[", "self", ".", "image_paths", "[", "t", "]", "for", "t", "in", "frame_idxes", "]", ",", "\n", "\"categories\"", ":", "{", "iid", ":", "self", ".", "instance_categories", "[", "iid", "]", "for", "iid", "in", "instance_ids_to_keep", "}", ",", "\n", "\"segmentations\"", ":", "[", "\n", "{", "\n", "iid", ":", "segmentations_t", "[", "iid", "]", "\n", "for", "iid", "in", "segmentations_t", "if", "iid", "in", "instance_ids_to_keep", "\n", "}", "\n", "for", "t", ",", "segmentations_t", "in", "enumerate", "(", "self", ".", "segmentations", ")", "if", "t", "in", "frame_idxes", "\n", "]", "\n", "}", "\n", "\n", "return", "self", ".", "__class__", "(", "subseq_dict", ",", "self", ".", "base_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_video_dataset_parser.parse_generic_video_dataset": [[9, 38], ["open", "json.load", "int", "generic_video_dataset_parser.GenericVideoSequence", "meta_info[].items", "set", "int", "sum", "set", "set", "seq[].items", "int", "seq[].keys", "seq[].keys", "seg_t.items", "list", "seg_t.keys"], "function", ["None"], ["def", "parse_generic_video_dataset", "(", "base_dir", ",", "dataset_json", ")", ":", "\n", "    ", "with", "open", "(", "dataset_json", ",", "'r'", ")", "as", "fh", ":", "\n", "        ", "dataset", "=", "json", ".", "load", "(", "fh", ")", "\n", "\n", "", "meta_info", "=", "dataset", "[", "\"meta\"", "]", "\n", "\n", "# convert instance and category IDs from str to int", "\n", "meta_info", "[", "\"category_labels\"", "]", "=", "{", "int", "(", "k", ")", ":", "v", "for", "k", ",", "v", "in", "meta_info", "[", "\"category_labels\"", "]", ".", "items", "(", ")", "}", "\n", "\n", "if", "\"segmentations\"", "in", "dataset", "[", "\"sequences\"", "]", "[", "0", "]", ":", "\n", "        ", "for", "seq", "in", "dataset", "[", "\"sequences\"", "]", ":", "\n", "            ", "seq", "[", "\"categories\"", "]", "=", "{", "int", "(", "iid", ")", ":", "cat_id", "for", "iid", ",", "cat_id", "in", "seq", "[", "\"categories\"", "]", ".", "items", "(", ")", "}", "\n", "seq", "[", "\"segmentations\"", "]", "=", "[", "\n", "{", "\n", "int", "(", "iid", ")", ":", "seg", "\n", "for", "iid", ",", "seg", "in", "seg_t", ".", "items", "(", ")", "\n", "}", "\n", "for", "seg_t", "in", "seq", "[", "\"segmentations\"", "]", "\n", "]", "\n", "\n", "# sanity check: instance IDs in \"segmentations\" must match those in \"categories\"", "\n", "seg_iids", "=", "set", "(", "sum", "(", "[", "list", "(", "seg_t", ".", "keys", "(", ")", ")", "for", "seg_t", "in", "seq", "[", "\"segmentations\"", "]", "]", ",", "[", "]", ")", ")", "\n", "assert", "seg_iids", "==", "set", "(", "seq", "[", "\"categories\"", "]", ".", "keys", "(", ")", ")", ",", "\"Instance ID mismatch: {} vs. {}\"", ".", "format", "(", "\n", "seg_iids", ",", "set", "(", "seq", "[", "\"categories\"", "]", ".", "keys", "(", ")", ")", "\n", ")", "\n", "\n", "", "", "seqs", "=", "[", "GenericVideoSequence", "(", "seq", ",", "base_dir", ")", "for", "seq", "in", "dataset", "[", "\"sequences\"", "]", "]", "\n", "\n", "return", "seqs", ",", "meta_info", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_video_dataset_parser.visualize_generic_dataset": [[134, 169], ["generic_video_dataset_parser.parse_generic_video_dataset", "create_color_map().tolist", "cv2.namedWindow", "seq.load_images", "seq.load_masks", "print", "zip", "create_color_map", "len", "list", "enumerate", "cv2.imshow", "range", "zip", "overlay_mask_on_image", "cv2.waitKey", "exit", "print"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_video_dataset_parser.parse_generic_video_dataset", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_video_dataset_parser.GenericVideoSequence.load_images", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_image_dataset_parser.GenericImageSample.load_masks", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.vis.create_color_map", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.vis.overlay_mask_on_image"], ["", "", "def", "visualize_generic_dataset", "(", "base_dir", ",", "dataset_json", ")", ":", "\n", "    ", "from", "stemseg", ".", "utils", ".", "vis", "import", "overlay_mask_on_image", ",", "create_color_map", "\n", "\n", "seqs", ",", "meta_info", "=", "parse_generic_video_dataset", "(", "base_dir", ",", "dataset_json", ")", "\n", "category_names", "=", "meta_info", "[", "\"category_labels\"", "]", "\n", "\n", "cmap", "=", "create_color_map", "(", ")", ".", "tolist", "(", ")", "\n", "cv2", ".", "namedWindow", "(", "'Image'", ",", "cv2", ".", "WINDOW_NORMAL", ")", "\n", "\n", "for", "seq", "in", "seqs", ":", "\n", "        ", "if", "len", "(", "seq", ")", ">", "100", ":", "\n", "            ", "frame_idxes", "=", "list", "(", "range", "(", "100", ",", "150", ")", ")", "\n", "", "else", ":", "\n", "            ", "frame_idxes", "=", "None", "\n", "\n", "", "images", "=", "seq", ".", "load_images", "(", "frame_idxes", ")", "\n", "masks", "=", "seq", ".", "load_masks", "(", "frame_idxes", ")", "\n", "category_labels", "=", "seq", ".", "category_labels", "\n", "\n", "print", "(", "\"[COLOR NAME] -> [CATEGORY NAME]\"", ")", "\n", "color_key_printed", "=", "False", "\n", "\n", "for", "image_t", ",", "masks_t", "in", "zip", "(", "images", ",", "masks", ")", ":", "\n", "            ", "for", "i", ",", "(", "mask", ",", "cat_label", ")", "in", "enumerate", "(", "zip", "(", "masks_t", ",", "category_labels", ")", ",", "1", ")", ":", "\n", "                ", "image_t", "=", "overlay_mask_on_image", "(", "image_t", ",", "mask", ",", "mask_color", "=", "cmap", "[", "i", "]", ")", "\n", "\n", "if", "not", "color_key_printed", ":", "\n", "# print(\"{} -> {}\".format(rgb_to_name(cmap[i][::-1]), category_names[cat_label]))", "\n", "                    ", "print", "(", "\"{} -> {}\"", ".", "format", "(", "cmap", "[", "i", "]", ",", "category_names", "[", "cat_label", "]", ")", ")", "\n", "\n", "", "", "color_key_printed", "=", "True", "\n", "\n", "cv2", ".", "imshow", "(", "'Image'", ",", "image_t", ")", "\n", "if", "cv2", ".", "waitKey", "(", "0", ")", "==", "113", ":", "\n", "                ", "exit", "(", "0", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.inference_image_loader.InferenceImageLoader.__init__": [[13, 19], ["torch.utils.data.Dataset.__init__", "stemseg.utils.transforms.ToTorchTensor"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "images", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "np_to_tensor", "=", "transforms", ".", "ToTorchTensor", "(", "format", "=", "'CHW'", ")", "\n", "\n", "self", ".", "images", "=", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.inference_image_loader.InferenceImageLoader.__len__": [[20, 22], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.inference_image_loader.InferenceImageLoader.__getitem__": [[23, 44], ["isinstance", "inference_image_loader.InferenceImageLoader.np_to_tensor().float", "stemseg.data.common.compute_resize_params_2", "torch.interpolate", "stemseg.data.common.scale_and_normalize_images", "cv2.imread", "cv2.imread.unsqueeze", "cv2.imread.squeeze", "isinstance", "ValueError", "inference_image_loader.InferenceImageLoader.np_to_tensor", "type"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.common.compute_resize_params_2", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.common.scale_and_normalize_images"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "image", "=", "self", ".", "images", "[", "index", "]", "\n", "\n", "if", "isinstance", "(", "image", ",", "str", ")", ":", "\n", "            ", "image", "=", "cv2", ".", "imread", "(", "image", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "", "elif", "not", "isinstance", "(", "image", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unexpected type for image: {}\"", ".", "format", "(", "type", "(", "image", ")", ")", ")", "\n", "\n", "", "image_height", ",", "image_width", "=", "image", ".", "shape", "[", ":", "2", "]", "\n", "\n", "# convert image to tensor", "\n", "image", "=", "self", ".", "np_to_tensor", "(", "image", ")", ".", "float", "(", ")", "\n", "\n", "# resize image", "\n", "new_width", ",", "new_height", ",", "_", "=", "compute_resize_params_2", "(", "(", "image_width", ",", "image_height", ")", ",", "cfg", ".", "INPUT", ".", "MIN_DIM", ",", "cfg", ".", "INPUT", ".", "MAX_DIM", ")", "\n", "image", "=", "F", ".", "interpolate", "(", "image", ".", "unsqueeze", "(", "0", ")", ",", "(", "new_height", ",", "new_width", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "# compute scale factor for image resizing", "\n", "image", "=", "scale_and_normalize_images", "(", "image", ",", "cfg", ".", "INPUT", ".", "IMAGE_MEAN", ",", "cfg", ".", "INPUT", ".", "IMAGE_STD", ",", "not", "cfg", ".", "INPUT", ".", "BGR_INPUT", ",", "cfg", ".", "INPUT", ".", "NORMALIZE_TO_UNIT_SCALE", ")", "\n", "\n", "return", "image", ".", "squeeze", "(", "0", ")", ",", "(", "image_width", ",", "image_height", ")", ",", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.inference_image_loader.collate_fn": [[46, 51], ["zip", "stemseg.structures.ImageList.from_image_sequence_list"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.image_list.ImageList.from_image_sequence_list"], ["", "", "def", "collate_fn", "(", "samples", ")", ":", "\n", "    ", "image_seqs", ",", "original_dims", ",", "idxes", "=", "zip", "(", "*", "samples", ")", "\n", "image_seqs", "=", "[", "[", "im", "]", "for", "im", "in", "image_seqs", "]", "\n", "image_seqs", "=", "ImageList", ".", "from_image_sequence_list", "(", "image_seqs", ",", "original_dims", ")", "\n", "return", "image_seqs", ",", "idxes", "\n", "", ""]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.video_dataset.VideoDataset.__init__": [[16, 48], ["torch.utils.data.Dataset.__init__", "stemseg.data.generic_video_dataset_parser.parse_generic_video_dataset", "stemseg.utils.transforms.BatchImageTransform", "stemseg.utils.transforms.ToTorchTensor", "stemseg.data.image_to_seq_augmenter.ImageToSeqAugmenter", "stemseg.data.image_to_seq_augmenter.ImageToSeqAugmenter", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.__init__", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_video_dataset_parser.parse_generic_video_dataset", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get"], ["    ", "def", "__init__", "(", "self", ",", "base_dir", ",", "vds_json", ",", "clip_length", ",", "apply_augmentations", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "sequences", ",", "self", ".", "meta_info", "=", "parse_generic_video_dataset", "(", "base_dir", ",", "vds_json", ")", "\n", "\n", "self", ".", "clip_length", "=", "clip_length", "\n", "self", ".", "apply_augmentations", "=", "apply_augmentations", "\n", "\n", "self", ".", "np_to_tensor", "=", "transforms", ".", "BatchImageTransform", "(", "\n", "transforms", ".", "ToTorchTensor", "(", "format", "=", "'CHW'", ")", "\n", ")", "\n", "\n", "if", "self", ".", "clip_length", "==", "2", ":", "\n", "            ", "self", ".", "augmenter", "=", "ImageToSeqAugmenter", "(", "\n", "perspective", "=", "kwargs", ".", "get", "(", "\"perspective_transform\"", ",", "False", ")", ",", "\n", "affine", "=", "kwargs", ".", "get", "(", "\"affine_transform\"", ",", "True", ")", ",", "\n", "motion_blur", "=", "kwargs", ".", "get", "(", "\"motion_blur\"", ",", "True", ")", ",", "\n", "motion_blur_prob", "=", "kwargs", ".", "get", "(", "\"motion_blur_prob\"", ",", "0.3", ")", ",", "\n", "motion_blur_kernel_sizes", "=", "kwargs", ".", "get", "(", "\"motion_blur_kernel_sizes\"", ",", "(", "5", ",", "7", ")", ")", ",", "\n", "scale_range", "=", "kwargs", ".", "get", "(", "\"scale_range\"", ",", "(", "0.8", ",", "1.2", ")", ")", ",", "\n", "rotation_range", "=", "kwargs", ".", "get", "(", "\"rotation_range\"", ",", "(", "-", "15", ",", "15", ")", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "augmenter", "=", "ImageToSeqAugmenter", "(", "\n", "perspective", "=", "kwargs", ".", "get", "(", "\"perspective_transform\"", ",", "False", ")", ",", "\n", "affine", "=", "kwargs", ".", "get", "(", "\"affine_transform\"", ",", "False", ")", ",", "\n", "motion_blur", "=", "kwargs", ".", "get", "(", "\"motion_blur\"", ",", "False", ")", ",", "\n", "motion_blur_prob", "=", "kwargs", ".", "get", "(", "\"motion_blur_prob\"", ",", "0.3", ")", ",", "\n", "motion_blur_kernel_sizes", "=", "kwargs", ".", "get", "(", "\"motion_blur_kernel_sizes\"", ",", "(", "5", ",", "7", ")", ")", ",", "\n", "scale_range", "=", "kwargs", ".", "get", "(", "\"scale_range\"", ",", "(", "0.9", ",", "1.1", ")", ")", ",", "\n", "rotation_range", "=", "kwargs", ".", "get", "(", "\"rotation_range\"", ",", "(", "-", "7", ",", "7", ")", ")", ",", "\n", "translate_range", "=", "kwargs", ".", "get", "(", "\"translation_range\"", ",", "{", "\"x\"", ":", "(", "-", "0.1", ",", "0.1", ")", ",", "\"y\"", ":", "(", "-", "0.1", ",", "0.1", ")", "}", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.video_dataset.VideoDataset.filter_zero_instance_frames": [[50, 55], ["seq.filter_zero_instance_frames", "len"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.video_dataset.VideoDataset.filter_zero_instance_frames"], ["", "", "def", "filter_zero_instance_frames", "(", "self", ")", ":", "\n", "        ", "for", "seq", "in", "self", ".", "sequences", ":", "\n", "            ", "seq", ".", "filter_zero_instance_frames", "(", ")", "\n", "\n", "", "self", ".", "sequences", "=", "[", "seq", "for", "seq", "in", "self", ".", "sequences", "if", "len", "(", "seq", ")", ">", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.video_dataset.VideoDataset.filter_categories": [[56, 61], ["seq.filter_categories", "len"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_image_dataset_parser.GenericImageSample.filter_categories"], ["", "def", "filter_categories", "(", "self", ",", "cat_ids_to_keep", ")", ":", "\n", "        ", "for", "seq", "in", "self", ".", "sequences", ":", "\n", "            ", "seq", ".", "filter_categories", "(", "cat_ids_to_keep", ")", "\n", "\n", "", "self", ".", "sequences", "=", "[", "seq", "for", "seq", "in", "self", ".", "sequences", "if", "len", "(", "seq", ")", ">", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.video_dataset.VideoDataset.parse_sample_at": [[62, 64], ["NotImplementedError"], "methods", ["None"], ["", "def", "parse_sample_at", "(", "self", ",", "idx", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"This method must be implemented by the derived class.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.video_dataset.VideoDataset.__getitem__": [[65, 112], ["video_dataset.VideoDataset.parse_sample_at", "video_dataset.VideoDataset.apply_random_flip", "video_dataset.VideoDataset.apply_random_augmentation", "range", "video_dataset.VideoDataset.apply_random_sequence_reversal", "stemseg.data.common.compute_resize_params", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.interpolate", "torch.interpolate", "stemseg.data.common.scale_and_normalize_images", "masks.tensor().permute.tensor().permute.resize", "masks.tensor().permute.tensor().permute.tensor().permute", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "numpy.where", "mask.resize", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "masks.tensor().permute.tensor().permute.tensor", "mask.tensor", "video_dataset.VideoDataset.np_to_tensor"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.mots_data_loader.MOTSDataLoader.parse_sample_at", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.apply_random_flip", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.video_dataset.VideoDataset.apply_random_augmentation", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.video_dataset.VideoDataset.apply_random_sequence_reversal", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.common.compute_resize_params", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.common.scale_and_normalize_images", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.resize", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.resize", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "images", ",", "masks", ",", "category_labels", ",", "meta_info", "=", "self", ".", "parse_sample_at", "(", "index", ")", "# masks: BinaryMaskSequenceList", "\n", "\n", "ignore_masks", "=", "meta_info", "[", "'ignore_masks'", "]", "\n", "\n", "image_height", ",", "image_width", "=", "images", "[", "0", "]", ".", "shape", "[", ":", "2", "]", "\n", "\n", "# apply random horizontal flip and frame sequence reversal in training mode", "\n", "images", ",", "masks", ",", "ignore_masks", "=", "self", ".", "apply_random_flip", "(", "images", ",", "masks", ",", "ignore_masks", ")", "\n", "\n", "# introduce small augmentations (affine, brightness/hue) to the images", "\n", "images", ",", "masks", ",", "ignore_masks", ",", "invalid_pts_mask", "=", "self", ".", "apply_random_augmentation", "(", "images", ",", "masks", ",", "ignore_masks", ")", "\n", "\n", "# apply invalid points mask", "\n", "for", "t", "in", "range", "(", "self", ".", "clip_length", ")", ":", "\n", "            ", "images", "[", "t", "]", "=", "np", ".", "where", "(", "invalid_pts_mask", "[", "t", "]", "[", "...", ",", "None", "]", ",", "0", ",", "images", "[", "t", "]", ")", "\n", "\n", "# reverse the sequence randomly", "\n", "", "images", ",", "masks", ",", "ignore_masks", "=", "self", ".", "apply_random_sequence_reversal", "(", "images", ",", "masks", ",", "ignore_masks", ")", "\n", "\n", "# compute scale factor for mask resizing", "\n", "new_width", ",", "new_height", ",", "scale_factor", "=", "compute_resize_params", "(", "images", "[", "0", "]", ",", "cfg", ".", "INPUT", ".", "MIN_DIM", ",", "cfg", ".", "INPUT", ".", "MAX_DIM", ")", "\n", "\n", "# convert images to torch Tensors", "\n", "images", "=", "torch", ".", "stack", "(", "self", ".", "np_to_tensor", "(", "*", "images", ")", ",", "0", ")", ".", "float", "(", ")", "\n", "\n", "# resize and pad images images", "\n", "images", "=", "F", ".", "interpolate", "(", "images", ",", "(", "new_height", ",", "new_width", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "# scale and normalize images", "\n", "images", "=", "scale_and_normalize_images", "(", "images", ",", "cfg", ".", "INPUT", ".", "IMAGE_MEAN", ",", "cfg", ".", "INPUT", ".", "IMAGE_STD", ",", "not", "cfg", ".", "INPUT", ".", "BGR_INPUT", ",", "\n", "cfg", ".", "INPUT", ".", "NORMALIZE_TO_UNIT_SCALE", ")", "\n", "\n", "# resize masks", "\n", "masks", "=", "masks", ".", "resize", "(", "(", "new_width", ",", "new_height", ")", ",", "None", ")", "\n", "ignore_masks", "=", "[", "mask", ".", "resize", "(", "(", "new_height", ",", "new_width", ")", ")", "for", "mask", "in", "ignore_masks", "]", "\n", "\n", "masks", "=", "masks", ".", "tensor", "(", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "# [N, T, H, W]", "\n", "ignore_masks", "=", "torch", ".", "stack", "(", "[", "mask", ".", "tensor", "(", ")", "for", "mask", "in", "ignore_masks", "]", ",", "0", ")", "# [T, H, W]", "\n", "\n", "targets", "=", "{", "\n", "\"masks\"", ":", "masks", ",", "\n", "\"category_ids\"", ":", "torch", ".", "tensor", "(", "category_labels", ",", "dtype", "=", "torch", ".", "long", ")", ",", "\n", "\"ignore_masks\"", ":", "ignore_masks", "\n", "}", "\n", "\n", "return", "images", ",", "targets", ",", "(", "image_width", ",", "image_height", ")", ",", "meta_info", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.video_dataset.VideoDataset.apply_random_flip": [[113, 120], ["masks.flip_horizontal.flip_horizontal.flip_horizontal", "random.random", "numpy.flip", "mask.flip_horizontal"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.flip_horizontal", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.flip_horizontal"], ["", "def", "apply_random_flip", "(", "self", ",", "images", ",", "masks", ",", "ignore_masks", ")", ":", "\n", "        ", "if", "self", ".", "apply_augmentations", "and", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "images", "=", "[", "np", ".", "flip", "(", "image", ",", "axis", "=", "1", ")", "for", "image", "in", "images", "]", "\n", "masks", "=", "masks", ".", "flip_horizontal", "(", ")", "\n", "ignore_masks", "=", "[", "mask", ".", "flip_horizontal", "(", ")", "for", "mask", "in", "ignore_masks", "]", "\n", "\n", "", "return", "images", ",", "masks", ",", "ignore_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.video_dataset.VideoDataset.apply_random_sequence_reversal": [[121, 128], ["masks.reverse.reverse.reverse", "random.random"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.reverse"], ["", "def", "apply_random_sequence_reversal", "(", "self", ",", "images", ",", "masks", ",", "ignore_masks", ")", ":", "\n", "        ", "if", "self", ".", "apply_augmentations", "and", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "images", "=", "images", "[", ":", ":", "-", "1", "]", "\n", "masks", "=", "masks", ".", "reverse", "(", ")", "\n", "ignore_masks", "=", "ignore_masks", "[", ":", ":", "-", "1", "]", "\n", "\n", "", "return", "images", ",", "masks", ",", "ignore_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.video_dataset.VideoDataset.apply_random_augmentation": [[129, 148], ["range", "video_dataset.VideoDataset.augmenter", "augmented_images.append", "augmented_masks.append", "augmented_ignore_masks.append", "invalid_pts_mask.append", "numpy.zeros", "range"], "methods", ["None"], ["", "def", "apply_random_augmentation", "(", "self", ",", "images", ",", "masks", ",", "ignore_masks", ")", ":", "\n", "        ", "if", "self", ".", "apply_augmentations", ":", "\n", "            ", "augmented_images", ",", "augmented_masks", ",", "augmented_ignore_masks", ",", "invalid_pts_mask", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "t", "in", "range", "(", "self", ".", "clip_length", ")", ":", "\n", "                ", "concat_masks", "=", "masks", ".", "_mask_sequence_list", "[", "t", "]", "+", "[", "ignore_masks", "[", "t", "]", "]", "\n", "augmented_image", ",", "augmented_masks_t", ",", "invalid_pts_mask_t", "=", "self", ".", "augmenter", "(", "images", "[", "t", "]", ",", "concat_masks", ")", "\n", "augmented_masks_t", ",", "augmented_ignore_mask_t", "=", "augmented_masks_t", "[", ":", "-", "1", "]", ",", "augmented_masks_t", "[", "-", "1", "]", "\n", "\n", "augmented_images", ".", "append", "(", "augmented_image", ")", "\n", "augmented_masks", ".", "append", "(", "augmented_masks", ")", "\n", "augmented_ignore_masks", ".", "append", "(", "augmented_ignore_mask_t", ")", "\n", "invalid_pts_mask", ".", "append", "(", "invalid_pts_mask_t", ")", "\n", "\n", "", "return", "augmented_images", ",", "augmented_masks", ",", "augmented_ignore_masks", ",", "invalid_pts_mask", "\n", "", "else", ":", "\n", "            ", "h", ",", "w", "=", "images", "[", "0", "]", ".", "shape", "[", ":", "2", "]", "\n", "invalid_pts_mask", "=", "[", "np", ".", "zeros", "(", "(", "h", ",", "w", ")", ",", "np", ".", "uint8", ")", "for", "_", "in", "range", "(", "self", ".", "clip_length", ")", "]", "\n", "return", "images", ",", "masks", ",", "ignore_masks", ",", "invalid_pts_mask", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.instance_duplicator.InstanceDuplicator.__init__": [[7, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.instance_duplicator.InstanceDuplicator.__call__": [[10, 23], ["instance_duplicator.InstanceDuplicator._augment", "print", "print"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.instance_duplicator.InstanceDuplicator._augment"], ["", "def", "__call__", "(", "self", ",", "images", ",", "masks", ")", ":", "\n", "        ", "\"\"\"\n        :param images: List of T images as numpy arrays in [H, W, 3] (BGR) format\n        :param masks: list of T instance masks as numpy arrays of shape [H, W] and dtype uint8\n        :return: list of T images and masks with duplicated instance\n        \"\"\"", "\n", "# lots of potentially unstable stuff happening here.", "\n", "try", ":", "\n", "            ", "return", "self", ".", "_augment", "(", "images", ",", "masks", ")", "\n", "", "except", "Exception", "as", "err", ":", "\n", "            ", "print", "(", "\"Exception occurred trying to duplicate instance\"", ")", "\n", "print", "(", "err", ")", "\n", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.instance_duplicator.InstanceDuplicator.bbox_from_mask": [[24, 39], ["numpy.any", "numpy.any", "numpy.any.argmax", "numpy.any.argmax", "len", "numpy.flip().argmax", "len", "numpy.flip().argmax", "numpy.flip", "numpy.flip"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "bbox_from_mask", "(", "mask", ")", ":", "\n", "        ", "reduced_y", "=", "np", ".", "any", "(", "mask", ",", "axis", "=", "0", ")", "\n", "reduced_x", "=", "np", ".", "any", "(", "mask", ",", "axis", "=", "1", ")", "\n", "\n", "x_min", "=", "reduced_y", ".", "argmax", "(", ")", "\n", "if", "x_min", "==", "0", "and", "reduced_y", "[", "0", "]", "==", "0", ":", "# mask is all zeros", "\n", "            ", "return", "None", "\n", "\n", "", "x_max", "=", "len", "(", "reduced_y", ")", "-", "np", ".", "flip", "(", "reduced_y", ",", "0", ")", ".", "argmax", "(", ")", "\n", "\n", "y_min", "=", "reduced_x", ".", "argmax", "(", ")", "\n", "y_max", "=", "len", "(", "reduced_x", ")", "-", "np", ".", "flip", "(", "reduced_x", ",", "0", ")", ".", "argmax", "(", ")", "\n", "\n", "return", "x_min", ",", "y_min", ",", "x_max", ",", "y_max", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.instance_duplicator.InstanceDuplicator._augment": [[40, 194], ["zip", "instance_duplicator.InstanceDuplicator.bbox_from_mask", "boxes.append", "bbox_widths.append", "min", "min", "numpy.array", "cv2.warpAffine", "cv2.warpAffine", "numpy.stack", "numpy.where", "duplicated_instance_images.append", "duplicate_instance_masks.append", "numpy.where", "modified_original_instance_masks.append", "random.random", "duplicate_instance_masks.append", "modified_original_instance_masks.append", "duplicated_instance_images.append", "numpy.copy", "numpy.copy", "numpy.flip", "numpy.flip", "random.random", "random.random", "numpy.copy", "numpy.copy", "random.random", "random.random"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.instance_duplicator.InstanceDuplicator.bbox_from_mask", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.copy", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.copy", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.copy", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.copy"], ["", "@", "staticmethod", "\n", "def", "_augment", "(", "images", ",", "masks", ")", ":", "\n", "        ", "modified_original_instance_masks", "=", "[", "]", "\n", "duplicate_instance_masks", "=", "[", "]", "\n", "duplicated_instance_images", "=", "[", "]", "\n", "\n", "boxes", "=", "[", "]", "\n", "bbox_widths", "=", "[", "]", "\n", "horiz_multiplier", "=", "None", "\n", "vert_multiplier", "=", "None", "\n", "\n", "touches_left_boundary", ",", "touches_right_boundary", "=", "False", ",", "False", "\n", "touches_top_boundary", ",", "touches_bottom_boundary", "=", "False", ",", "False", "\n", "\n", "for", "mask", "in", "masks", ":", "\n", "            ", "mask_height", ",", "mask_width", "=", "mask", ".", "shape", "\n", "\n", "# extract bounding box from mask", "\n", "bbox", "=", "InstanceDuplicator", ".", "bbox_from_mask", "(", "mask", ")", "\n", "boxes", ".", "append", "(", "bbox", ")", "\n", "\n", "if", "bbox", "is", "None", ":", "\n", "                ", "continue", "\n", "\n", "", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "=", "bbox", "\n", "bbox_widths", ".", "append", "(", "xmax", "-", "xmin", ")", "\n", "\n", "# check if the mask touches the left/right boundaries", "\n", "if", "xmin", "==", "0", ":", "\n", "                ", "touches_left_boundary", "=", "True", "\n", "", "if", "xmax", "==", "mask_width", ":", "\n", "                ", "touches_right_boundary", "=", "True", "\n", "\n", "# check if the mask touches the top/bottom boundaries", "\n", "", "if", "ymin", "==", "0", ":", "\n", "                ", "touches_top_boundary", "=", "True", "\n", "", "if", "ymax", "==", "mask_height", ":", "\n", "                ", "touches_bottom_boundary", "=", "True", "\n", "\n", "# if the instance has large width...", "\n", "", "if", "xmax", "-", "xmin", ">", "0.4", "*", "mask_width", ":", "\n", "                ", "if", "xmin", "==", "0", ":", "\n", "# ...and it touches the left boundary, only allow it to be shifted further to the left", "\n", "                    ", "horiz_multiplier", "=", "-", "1.", "\n", "", "elif", "xmax", "==", "mask_width", ":", "\n", "# ...and it touches the right boundary, only allow it to be shifted further to the right", "\n", "                    ", "horiz_multiplier", "=", "1.", "\n", "\n", "# if the instance has small width...", "\n", "", "", "elif", "xmax", "-", "xmin", "<", "0.2", "*", "mask_width", ":", "\n", "                ", "xc", "=", "(", "xmin", "+", "xmax", ")", "/", "2.", "\n", "\n", "# ...and it is close to the left boundary", "\n", "if", "xc", "<", "mask_width", "*", "0.25", ":", "\n", "# it might disappear if moved to the left. Hence, only allow it to be moved to the right", "\n", "                    ", "horiz_multiplier", "=", "1.", "\n", "\n", "# ...and it is close to the right boundary", "\n", "", "elif", "xc", ">", "mask_width", "*", "0.75", ":", "\n", "# it might disappear if moved to the right. Hence, only allow it to be moved to the left", "\n", "                    ", "horiz_multiplier", "=", "-", "1.", "\n", "\n", "# --- REPEAT THE ABOVE LOGIC FOR THE VERTICAL AXIS ---", "\n", "\n", "# if the instance has large height...", "\n", "", "", "if", "ymax", "-", "ymin", ">", "0.4", "*", "mask_height", ":", "\n", "                ", "if", "ymin", "==", "0", ":", "\n", "# ...and it touches the top boundary, only allow it to be shifted further to the top", "\n", "                    ", "vert_multiplier", "=", "-", "1.", "\n", "", "elif", "ymax", "==", "mask_height", ":", "\n", "# ...and it touches the bottom boundary, only allow it to be shifted further to the bottom", "\n", "                    ", "vert_multiplier", "=", "1.", "\n", "\n", "# if the instance has small height...", "\n", "", "", "elif", "ymax", "-", "ymin", "<", "0.2", "*", "mask_height", ":", "\n", "                ", "yc", "=", "(", "ymin", "+", "ymax", ")", "/", "2.", "\n", "\n", "# ...and it is close to the top boundary", "\n", "if", "yc", "<", "mask_height", "*", "0.25", ":", "\n", "# it might disappear if moved to the top. Hence, only move to the bottom", "\n", "                    ", "vert_multiplier", "=", "1.", "\n", "\n", "# ...and it is close to the bottom boundary", "\n", "", "elif", "yc", ">", "mask_height", "*", "0.75", ":", "\n", "# it might disappear if moved to the bottom. Hence, only move to the top", "\n", "                    ", "vert_multiplier", "=", "-", "1.", "\n", "\n", "# if the mask touches both the left and right boundaries, duplication is not feasible", "\n", "", "", "", "if", "touches_left_boundary", "and", "touches_right_boundary", ":", "\n", "            ", "return", "None", ",", "None", "\n", "\n", "# if the mask touches either the left or right boundary, flipping the duplicated instance is infeasible", "\n", "", "flipping_feasible", "=", "(", "not", "touches_left_boundary", ")", "and", "(", "not", "touches_right_boundary", ")", "\n", "\n", "# if the mask touches both the top and bottom boundaries, vertical shift should not be applied", "\n", "if", "touches_bottom_boundary", "and", "touches_top_boundary", ":", "\n", "            ", "vert_multiplier", "=", "0.", "\n", "\n", "", "if", "horiz_multiplier", "is", "None", ":", "\n", "            ", "horiz_multiplier", "=", "-", "1", "if", "random", ".", "random", "(", ")", "<", "0.5", "else", "1.", "\n", "\n", "", "if", "vert_multiplier", "is", "None", ":", "\n", "            ", "vert_multiplier", "=", "-", "1", "if", "random", ".", "random", "(", ")", "<", "0.5", "else", "1.", "\n", "\n", "", "flip", "=", "random", ".", "random", "(", ")", "<", "0.5", "if", "flipping_feasible", "else", "False", "\n", "\n", "for", "image", ",", "mask", ",", "bbox", "in", "zip", "(", "images", ",", "masks", ",", "boxes", ")", ":", "\n", "            ", "assert", "image", ".", "shape", "[", ":", "2", "]", "==", "mask", ".", "shape", "\n", "img_height", ",", "img_width", "=", "image", ".", "shape", "[", ":", "2", "]", "\n", "\n", "if", "bbox", "is", "None", ":", "\n", "                ", "duplicate_instance_masks", ".", "append", "(", "np", ".", "copy", "(", "mask", ")", ")", "\n", "modified_original_instance_masks", ".", "append", "(", "mask", ")", "\n", "duplicated_instance_images", ".", "append", "(", "np", ".", "copy", "(", "image", ")", ")", "\n", "continue", "\n", "\n", "", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "=", "bbox", "\n", "width", ",", "height", "=", "xmax", "-", "xmin", ",", "ymax", "-", "ymin", "\n", "\n", "if", "flip", ":", "\n", "                ", "shifted_image", "=", "np", ".", "copy", "(", "image", ")", "\n", "shifted_mask", "=", "np", ".", "copy", "(", "mask", ")", "\n", "shifted_image", "[", "ymin", ":", "ymax", ",", "xmin", ":", "xmax", "]", "=", "np", ".", "flip", "(", "shifted_image", "[", "ymin", ":", "ymax", ",", "xmin", ":", "xmax", "]", ",", "axis", "=", "1", ")", "\n", "shifted_mask", "[", "ymin", ":", "ymax", ",", "xmin", ":", "xmax", "]", "=", "np", ".", "flip", "(", "shifted_mask", "[", "ymin", ":", "ymax", ",", "xmin", ":", "xmax", "]", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "shifted_image", "=", "image", "\n", "shifted_mask", "=", "mask", "\n", "\n", "", "shift_x", "=", "horiz_multiplier", "*", "(", "(", "width", "*", "0.75", ")", "+", "(", "random", ".", "random", "(", ")", "*", "0.25", "*", "width", ")", ")", "\n", "shift_y", "=", "vert_multiplier", "*", "(", "height", "*", "random", ".", "random", "(", ")", "*", "0.25", ")", "\n", "\n", "shift_x", "=", "min", "(", "shift_x", ",", "img_width", "*", "0.3", ")", "\n", "shift_y", "=", "min", "(", "shift_y", ",", "img_height", "*", "0.3", ")", "\n", "\n", "affine_mat", "=", "np", ".", "array", "(", "[", "[", "1.", ",", "0.", ",", "shift_x", "]", ",", "\n", "[", "0.", ",", "1.", ",", "shift_y", "]", "]", ",", "np", ".", "float32", ")", "\n", "\n", "shifted_image", "=", "cv2", ".", "warpAffine", "(", "shifted_image", ",", "affine_mat", ",", "(", "img_width", ",", "img_height", ")", ")", "\n", "shifted_mask", "=", "cv2", ".", "warpAffine", "(", "shifted_mask", ",", "affine_mat", ",", "(", "img_width", ",", "img_height", ")", ")", "\n", "\n", "shifted_mask", "=", "np", ".", "stack", "(", "[", "shifted_mask", "]", "*", "3", ",", "axis", "=", "2", ")", "# [H, W, 3]", "\n", "\n", "# copy duplicated instance", "\n", "duplicated_image", "=", "np", ".", "where", "(", "shifted_mask", ">", "0", ",", "shifted_image", ",", "image", ")", "\n", "\n", "duplicated_instance_images", ".", "append", "(", "duplicated_image", ")", "\n", "\n", "shifted_mask", "=", "shifted_mask", "[", ":", ",", ":", ",", "0", "]", "\n", "duplicate_instance_masks", ".", "append", "(", "shifted_mask", ")", "\n", "\n", "modified_original_mask", "=", "np", ".", "where", "(", "shifted_mask", ",", "0", ",", "mask", ")", "\n", "modified_original_instance_masks", ".", "append", "(", "modified_original_mask", ")", "\n", "\n", "", "return", "duplicated_instance_images", ",", "[", "modified_original_instance_masks", ",", "duplicate_instance_masks", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.pascal_voc_data_loader.PascalVOCDataLoader.__init__": [[19, 84], ["torch.utils.data.Dataset.__init__", "stemseg.data.generic_image_dataset_parser.parse_generic_image_dataset", "map", "map", "list", "stemseg.data.image_to_seq_augmenter.ImageToSeqAugmenter", "stemseg.utils.transforms.BatchImageTransform", "sample.mask_areas", "open", "yaml.load", "filter", "stemseg.utils.transforms.ToTorchTensor", "os.path.join", "range", "stemseg.utils.RepoPaths.dataset_meta_info_dir", "yaml.load.items", "yaml.load.items", "range", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.__init__", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_image_dataset_parser.parse_generic_image_dataset", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_image_dataset_parser.GenericImageSample.mask_areas", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.constants.RepoPaths.dataset_meta_info_dir"], ["    ", "def", "__init__", "(", "self", ",", "base_dir", ",", "ids_json_file", ",", "category_agnostic", ",", "min_instance_size", "=", "50", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "samples", ",", "meta_info", "=", "parse_generic_image_dataset", "(", "base_dir", ",", "ids_json_file", ")", "\n", "\n", "def", "filter_by_mask_area", "(", "sample", ")", ":", "\n", "            ", "mask_areas", "=", "sample", ".", "mask_areas", "(", ")", "\n", "instance_idxes_to_keep", "=", "[", "\n", "i", "for", "i", "in", "range", "(", "len", "(", "sample", ".", "segmentations", ")", ")", "if", "mask_areas", "[", "i", "]", ">=", "min_instance_size", "\n", "]", "\n", "\n", "sample", ".", "segmentations", "=", "[", "sample", ".", "segmentations", "[", "i", "]", "for", "i", "in", "instance_idxes_to_keep", "]", "\n", "sample", ".", "categories", "=", "[", "sample", ".", "categories", "[", "i", "]", "for", "i", "in", "instance_idxes_to_keep", "]", "\n", "\n", "return", "sample", "\n", "\n", "", "self", ".", "samples", "=", "map", "(", "filter_by_mask_area", ",", "self", ".", "samples", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "RepoPaths", ".", "dataset_meta_info_dir", "(", ")", ",", "'pascal_voc.yaml'", ")", ",", "'r'", ")", "as", "fh", ":", "\n", "            ", "category_details", "=", "yaml", ".", "load", "(", "fh", ",", "Loader", "=", "yaml", ".", "SafeLoader", ")", "\n", "category_details", "=", "{", "cat", "[", "'id'", "]", ":", "cat", "for", "cat", "in", "category_details", "}", "\n", "\n", "", "if", "category_agnostic", ":", "# davis", "\n", "            ", "cat_ids_to_keep", "=", "[", "cat_id", "for", "cat_id", ",", "attribs", "in", "category_details", ".", "items", "(", ")", "if", "attribs", "[", "'keep_davis'", "]", "]", "\n", "self", ".", "category_id_mapping", "=", "{", "\n", "cat_id", ":", "1", "for", "cat_id", "in", "cat_ids_to_keep", "\n", "}", "\n", "self", ".", "category_labels", "=", "{", "\n", "cat_id", ":", "'object'", "for", "cat_id", "in", "cat_ids_to_keep", "\n", "}", "\n", "\n", "", "else", ":", "# youtube VIS", "\n", "            ", "cat_ids_to_keep", "=", "[", "cat_id", "for", "cat_id", ",", "attribs", "in", "category_details", ".", "items", "(", ")", "if", "attribs", "[", "'keep_ytvis'", "]", "]", "\n", "self", ".", "category_id_mapping", "=", "{", "\n", "cat_id", ":", "category_details", "[", "cat_id", "]", "[", "'id_ytvis'", "]", "for", "cat_id", "in", "cat_ids_to_keep", "\n", "}", "\n", "self", ".", "category_labels", "=", "{", "\n", "cat_id", ":", "category_details", "[", "cat_id", "]", "[", "'label_ytvis'", "]", "for", "cat_id", "in", "cat_ids_to_keep", "\n", "}", "\n", "\n", "", "def", "filter_by_category_id", "(", "sample", ")", ":", "\n", "            ", "instance_idxes_to_keep", "=", "[", "\n", "i", "for", "i", "in", "range", "(", "len", "(", "sample", ".", "segmentations", ")", ")", "if", "sample", ".", "categories", "[", "i", "]", "in", "cat_ids_to_keep", "\n", "]", "\n", "\n", "sample", ".", "segmentations", "=", "[", "sample", ".", "segmentations", "[", "i", "]", "for", "i", "in", "instance_idxes_to_keep", "]", "\n", "sample", ".", "categories", "=", "[", "sample", ".", "categories", "[", "i", "]", "for", "i", "in", "instance_idxes_to_keep", "]", "\n", "\n", "return", "sample", "\n", "\n", "", "self", ".", "samples", "=", "map", "(", "filter_by_category_id", ",", "self", ".", "samples", ")", "\n", "\n", "# remove samples with 0 instances", "\n", "self", ".", "samples", "=", "list", "(", "filter", "(", "lambda", "s", ":", "len", "(", "s", ".", "segmentations", ")", ">", "0", ",", "self", ".", "samples", ")", ")", "\n", "\n", "self", ".", "augmenter", "=", "ImageToSeqAugmenter", "(", "perspective", "=", "True", ",", "affine", "=", "True", ",", "motion_blur", "=", "True", ",", "\n", "rotation_range", "=", "(", "-", "10", ",", "10", ")", ",", "perspective_magnitude", "=", "0.08", ",", "\n", "hue_saturation_range", "=", "(", "-", "5", ",", "5", ")", ",", "brightness_range", "=", "(", "-", "40", ",", "40", ")", ",", "\n", "motion_blur_prob", "=", "0.25", ",", "motion_blur_kernel_sizes", "=", "(", "9", ",", "11", ")", ",", "\n", "translate_range", "=", "(", "-", "0.1", ",", "0.1", ")", ")", "\n", "\n", "self", ".", "num_frames", "=", "cfg", ".", "INPUT", ".", "NUM_FRAMES", "\n", "self", ".", "category_agnostic", "=", "category_agnostic", "\n", "\n", "self", ".", "np_to_tensor", "=", "transforms", ".", "BatchImageTransform", "(", "transforms", ".", "ToTorchTensor", "(", "format", "=", "'CHW'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.pascal_voc_data_loader.PascalVOCDataLoader.__len__": [[85, 87], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.pascal_voc_data_loader.PascalVOCDataLoader.__getitem__": [[88, 162], ["sample.load_image", "sample.load_masks", "sample.load_ignore_mask", "pascal_voc_data_loader.PascalVOCDataLoader.apply_random_flip", "stemseg.structures.BinaryMask", "range", "pascal_voc_data_loader.PascalVOCDataLoader.apply_random_sequence_shuffle", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "stemseg.data.common.scale_and_normalize_images", "range", "stemseg.data.common.compute_resize_params", "torch.interpolate", "torch.interpolate", "stemseg.structures.BinaryMaskSequenceList", "seq_instance_masks.tensor().permute.tensor().permute.resize", "seq_instance_masks.tensor().permute.tensor().permute.tensor().permute", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "stemseg.structures.BinaryMask", "pascal_voc_data_loader.PascalVOCDataLoader.augmenter", "torch.interpolate.append", "seq_instance_masks.tensor().permute.tensor().permute.append", "torch.stack.append", "torch.stack.append", "seq_invalid_pts_masks.append", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "len", "mask.resize", "numpy.zeros", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "seq_instance_masks.tensor().permute.tensor().permute.tensor", "mask.tensor", "pascal_voc_data_loader.PascalVOCDataLoader.np_to_tensor", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_image_dataset_parser.GenericImageSample.load_image", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_image_dataset_parser.GenericImageSample.load_masks", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_image_dataset_parser.GenericImageSample.load_ignore_mask", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.apply_random_flip", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.apply_random_sequence_shuffle", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.common.scale_and_normalize_images", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.common.compute_resize_params", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.resize", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.resize", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "sample", "=", "self", ".", "samples", "[", "index", "]", "\n", "\n", "image", "=", "sample", ".", "load_image", "(", ")", "\n", "image_height", ",", "image_width", "=", "sample", ".", "height", ",", "sample", ".", "width", "\n", "\n", "instance_masks", "=", "sample", ".", "load_masks", "(", ")", "\n", "ignore_mask", "=", "sample", ".", "load_ignore_mask", "(", ")", "\n", "\n", "# apply random horizontal flip", "\n", "image", ",", "instance_masks", ",", "ignore_mask", "=", "self", ".", "apply_random_flip", "(", "image", ",", "instance_masks", ",", "ignore_mask", ")", "\n", "\n", "# convert masks to BinaryMask type", "\n", "instance_masks", "=", "[", "BinaryMask", "(", "mask", ")", "for", "mask", "in", "instance_masks", "]", "\n", "ignore_mask", "=", "BinaryMask", "(", "ignore_mask", ")", "\n", "\n", "# Convert everything to a single element list so that it becomes a one-image 'sequence'", "\n", "seq_images", ",", "seq_instance_masks", ",", "seq_ignore_masks", ",", "seq_invalid_pts_masks", "=", "[", "image", "]", ",", "[", "instance_masks", "]", ",", "[", "ignore_mask", "]", ",", "[", "np", ".", "zeros", "(", "(", "image_height", ",", "image_width", ")", ",", "np", ".", "uint8", ")", "]", "\n", "\n", "# add remaining sequence images by augmenting the original image", "\n", "for", "t", "in", "range", "(", "self", ".", "num_frames", "-", "1", ")", ":", "\n", "# get transformed image, instance mask and point validity mask", "\n", "            ", "masks", "=", "instance_masks", "+", "[", "ignore_mask", "]", "\n", "im_trafo", ",", "masks_trafo", ",", "invalid_pts", "=", "self", ".", "augmenter", "(", "image", ",", "masks", ")", "\n", "\n", "instance_masks_trafo", ",", "ignore_mask_trafo", "=", "masks_trafo", "[", ":", "-", "1", "]", ",", "masks_trafo", "[", "-", "1", "]", "\n", "\n", "# add everything to the sequence lists", "\n", "seq_images", ".", "append", "(", "im_trafo", ")", "\n", "seq_instance_masks", ".", "append", "(", "instance_masks_trafo", ")", "\n", "seq_ignore_masks", ".", "append", "(", "ignore_mask_trafo", ")", "\n", "seq_invalid_pts_masks", ".", "append", "(", "invalid_pts", ")", "\n", "\n", "# shuffle the elements of the sequence", "\n", "", "seq_images", ",", "seq_instance_masks", ",", "seq_ignore_masks", ",", "seq_invalid_pts_masks", "=", "self", ".", "apply_random_sequence_shuffle", "(", "\n", "seq_images", ",", "seq_instance_masks", ",", "seq_ignore_masks", ",", "seq_invalid_pts_masks", ")", "\n", "\n", "# convert images to tensors", "\n", "seq_images", "=", "torch", ".", "stack", "(", "self", ".", "np_to_tensor", "(", "*", "seq_images", ")", ",", "0", ")", ".", "float", "(", ")", "\n", "\n", "# scale and normalize images", "\n", "seq_images", "=", "scale_and_normalize_images", "(", "seq_images", ",", "cfg", ".", "INPUT", ".", "IMAGE_MEAN", ",", "cfg", ".", "INPUT", ".", "IMAGE_STD", ",", "\n", "not", "cfg", ".", "INPUT", ".", "BGR_INPUT", ",", "cfg", ".", "INPUT", ".", "NORMALIZE_TO_UNIT_SCALE", ")", "\n", "\n", "seq_invalid_pts_masks", "=", "[", "torch", ".", "from_numpy", "(", "mask", ")", ".", "float", "(", ")", "for", "mask", "in", "seq_invalid_pts_masks", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "seq_images", ")", ")", ":", "\n", "            ", "invalid_pts", "=", "1.", "-", "seq_invalid_pts_masks", "[", "i", "]", "[", "None", ",", ":", ",", ":", "]", "\n", "seq_images", "[", "i", "]", "=", "seq_images", "[", "i", "]", "*", "invalid_pts", "\n", "\n", "# resize images to the required input size", "\n", "", "new_width", ",", "new_height", ",", "scale_factor", "=", "compute_resize_params", "(", "image", ",", "cfg", ".", "INPUT", ".", "MIN_DIM", ",", "cfg", ".", "INPUT", ".", "MAX_DIM", ")", "\n", "seq_images", "=", "F", ".", "interpolate", "(", "seq_images", ",", "(", "new_height", ",", "new_width", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "# resize masks to the required input size", "\n", "seq_instance_masks", "=", "BinaryMaskSequenceList", "(", "seq_instance_masks", ")", "\n", "seq_instance_masks", "=", "seq_instance_masks", ".", "resize", "(", "(", "new_width", ",", "new_height", ")", ")", "\n", "seq_ignore_masks", "=", "[", "mask", ".", "resize", "(", "(", "new_height", ",", "new_width", ")", ")", "for", "mask", "in", "seq_ignore_masks", "]", "\n", "\n", "# convert masks to torch tensors", "\n", "seq_instance_masks", "=", "seq_instance_masks", ".", "tensor", "(", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "# [N, T, H, W]", "\n", "seq_ignore_masks", "=", "torch", ".", "stack", "(", "[", "mask", ".", "tensor", "(", ")", "for", "mask", "in", "seq_ignore_masks", "]", ",", "0", ")", "# [T, H, W]", "\n", "\n", "instance_category_ids", "=", "torch", ".", "tensor", "(", "[", "self", ".", "category_id_mapping", "[", "cat_id", "]", "for", "cat_id", "in", "sample", ".", "categories", "]", ")", "\n", "category_labels", "=", "[", "self", ".", "category_labels", "[", "cat_id", "]", "for", "cat_id", "in", "sample", ".", "categories", "]", "\n", "\n", "# combine everything into a dictionary", "\n", "targets", "=", "{", "\"masks\"", ":", "seq_instance_masks", ",", "\n", "\"category_ids\"", ":", "instance_category_ids", ",", "\n", "\"labels\"", ":", "instance_category_ids", ",", "\n", "'ignore_masks'", ":", "seq_ignore_masks", "}", "\n", "\n", "return", "seq_images", ",", "targets", ",", "(", "image_width", ",", "image_height", ")", ",", "{", "\"category_labels\"", ":", "category_labels", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.pascal_voc_data_loader.PascalVOCDataLoader.apply_random_flip": [[163, 170], ["random.random", "numpy.flip", "numpy.flip", "numpy.flip"], "methods", ["None"], ["", "def", "apply_random_flip", "(", "self", ",", "image", ",", "instance_masks", ",", "ignore_mask", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "image", "=", "np", ".", "flip", "(", "image", ",", "axis", "=", "1", ")", "\n", "instance_masks", "=", "[", "np", ".", "flip", "(", "instance_mask", ",", "axis", "=", "1", ")", "for", "instance_mask", "in", "instance_masks", "]", "\n", "ignore_mask", "=", "np", ".", "flip", "(", "ignore_mask", ",", "axis", "=", "1", ")", "\n", "\n", "", "return", "image", ",", "instance_masks", ",", "ignore_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.pascal_voc_data_loader.PascalVOCDataLoader.apply_random_sequence_shuffle": [[171, 181], ["list", "random.shuffle", "range"], "methods", ["None"], ["", "def", "apply_random_sequence_shuffle", "(", "self", ",", "images", ",", "instance_masks", ",", "ignore_masks", ",", "invalid_pt_masks", ")", ":", "\n", "        ", "perm", "=", "list", "(", "range", "(", "self", ".", "num_frames", ")", ")", "\n", "random", ".", "shuffle", "(", "perm", ")", "\n", "\n", "images", "=", "[", "images", "[", "i", "]", "for", "i", "in", "perm", "]", "\n", "instance_masks", "=", "[", "instance_masks", "[", "i", "]", "for", "i", "in", "perm", "]", "\n", "ignore_masks", "=", "[", "ignore_masks", "[", "i", "]", "for", "i", "in", "perm", "]", "\n", "invalid_pt_masks", "=", "[", "invalid_pt_masks", "[", "i", "]", "for", "i", "in", "perm", "]", "\n", "\n", "return", "images", ",", "instance_masks", ",", "ignore_masks", ",", "invalid_pt_masks", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.common.scale_and_normalize_images": [[12, 31], ["torch.tensor", "torch.tensor", "images.flip"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor"], ["", "def", "identity_module_creator", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "nn", ".", "Identity", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "if", "cfg", ".", "INPUT", ".", "NUM_FRAMES", "==", "2", ":", "\n", "        ", "return", "[", "identity_module_creator", "for", "_", "in", "range", "(", "3", ")", "]", "\n", "", "elif", "cfg", ".", "INPUT", ".", "NUM_FRAMES", "==", "4", ":", "\n", "        ", "return", "[", "pooling_module_creator", "]", "+", "[", "identity_module_creator", "for", "_", "in", "range", "(", "2", ")", "]", "\n", "", "elif", "cfg", ".", "INPUT", ".", "NUM_FRAMES", "==", "8", ":", "\n", "        ", "return", "[", "pooling_module_creator", "for", "_", "in", "range", "(", "2", ")", "]", "+", "[", "identity_module_creator", "]", "\n", "", "elif", "cfg", ".", "INPUT", ".", "NUM_FRAMES", "in", "(", "16", ",", "24", ",", "32", ")", ":", "\n", "        ", "return", "[", "pooling_module_creator", "for", "_", "in", "range", "(", "3", ")", "]", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "\n", "", "", "def", "get_temporal_scales", "(", ")", ":", "\n", "    ", "if", "cfg", ".", "INPUT", ".", "NUM_FRAMES", "==", "2", ":", "\n", "        ", "return", "[", "1", ",", "1", ",", "1", "]", "\n", "", "elif", "cfg", ".", "INPUT", ".", "NUM_FRAMES", "==", "4", ":", "\n", "        ", "return", "[", "1", ",", "1", ",", "2", "]", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.common.compute_padding": [[33, 37], ["int", "int", "math.ceil", "math.ceil"], "function", ["None"], ["        ", "return", "[", "1", ",", "2", ",", "2", "]", "\n", "", "elif", "cfg", ".", "INPUT", ".", "NUM_FRAMES", "in", "(", "16", ",", "24", ",", "32", ")", ":", "\n", "        ", "return", "[", "2", ",", "2", ",", "2", "]", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.common.resize_and_pad_images": [[39, 56], ["common.compute_resize_params_2", "torch.nn.functional.interpolate", "torch.nn.functional.pad", "int", "int", "math.ceil", "math.ceil"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.common.compute_resize_params_2", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.pad"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "pyramid_channels", ",", "dilation_rates", ",", "out_channels", "=", "None", ",", "include_1x1_conv", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "pyramid_channels", "=", "[", "pyramid_channels", "]", "*", "len", "(", "dilation_rates", ")", "\n", "\n", "atrous_convs", "=", "[", "\n", "nn", ".", "Conv3d", "(", "in_channels", ",", "channels", ",", "3", ",", "padding", "=", "rate", ",", "dilation", "=", "rate", ",", "bias", "=", "False", ")", "\n", "for", "(", "channels", ",", "rate", ")", "in", "zip", "(", "pyramid_channels", ",", "dilation_rates", ")", "\n", "]", "\n", "if", "include_1x1_conv", ":", "\n", "            ", "atrous_convs", ".", "append", "(", "nn", ".", "Conv3d", "(", "in_channels", ",", "pyramid_channels", "[", "0", "]", ",", "1", ",", "bias", "=", "False", ")", ")", "\n", "total_channels", "=", "sum", "(", "pyramid_channels", ")", "+", "pyramid_channels", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "total_channels", "=", "sum", "(", "pyramid_channels", ")", "\n", "\n", "", "self", ".", "atrous_convs", "=", "nn", ".", "ModuleList", "(", "atrous_convs", ")", "\n", "\n", "if", "out_channels", ":", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.common.pad_masks_to_image": [[58, 75], ["torch.nn.functional.pad", "torch.nn.functional.pad().squeeze", "torch.nn.functional.pad", "F.pad().squeeze.unsqueeze"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.pad", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.pad"], ["nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "total_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv_out", "=", "nn", ".", "Identity", "(", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "torch", ".", "cat", "(", "[", "conv", "(", "x", ")", "for", "conv", "in", "self", ".", "atrous_convs", "]", ",", "dim", "=", "1", ")", "\n", "return", "self", ".", "conv_out", "(", "x", ")", "\n", "\n", "\n", "", "", "class", "UpsampleTrilinear3D", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "size", "=", "None", ",", "scale_factor", "=", "None", ",", "align_corners", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "self", ".", "align_corners", "=", "align_corners", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.common.collate_fn": [[77, 82], ["zip", "stemseg.structures.ImageList.from_image_sequence_list", "common.pad_masks_to_image"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.image_list.ImageList.from_image_sequence_list", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.common.pad_masks_to_image"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "F", ".", "interpolate", "(", "x", ",", "self", ".", "size", ",", "self", ".", "scale_factor", ",", "mode", "=", "'trilinear'", ",", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.common.targets_to": [[84, 95], ["targets_per_image.items", "to_targets.append", "isinstance", "v.to"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to"], []], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.common.tensor_struct_to": [[97, 116], ["isinstance", "isinstance", "struct.items", "TypeError", "torch.is_tensor", "hasattr", "to_struct.append", "to_struct.append", "elem.to", "common.tensor_struct_to", "torch.is_tensor", "hasattr", "v.to", "common.tensor_struct_to", "type"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.common.tensor_struct_to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.common.tensor_struct_to"], []], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.common.tensor_struct_to_cuda": [[118, 120], ["common.tensor_struct_to"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.common.tensor_struct_to"], []], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.common.targets_to_cuda": [[122, 124], ["common.targets_to"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.common.targets_to"], []], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.common.nested_dict_to": [[126, 136], ["dict", "d.items", "torch.is_tensor", "v.to", "isinstance", "common.nested_dict_to"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.common.nested_dict_to"], []], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.common.nested_dict_to_cuda": [[138, 140], ["common.nested_dict_to"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.common.nested_dict_to"], []], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.common.compute_resize_params_2": [[142, 160], ["float", "float", "min", "max", "round", "round"], "function", ["None"], []], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.common.compute_resize_params": [[162, 174], ["float", "float", "min", "max", "round", "round"], "function", ["None"], []], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.common.compute_mask_gradients": [[176, 192], ["numpy.ones", "masks.to().numpy", "mask_gradients.to.to", "torch.any", "torch.stack", "masks.to", "torch.stack", "range", "torch.from_numpy", "cv2.dilate", "range", "cv2.Laplacian"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.image_list.ImageList.numpy", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.to"], []], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.common.instance_masks_to_semseg_mask": [[194, 211], ["torch.no_grad", "instance_masks.long", "enumerate", "len", "len", "len", "torch.where", "instance_masks.long.max"], "function", ["None"], []], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.common.visualize_semseg_masks": [[213, 226], ["numpy.copy", "stemseg.utils.vis.create_color_map", "set", "max", "stemseg.utils.vis.overlay_mask_on_image", "numpy.unique().tolist", "numpy.unique"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.copy", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.vis.create_color_map", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.vis.overlay_mask_on_image"], []], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.mapillary_data_loader.MapillaryDataLoader.__init__": [[20, 75], ["torch.utils.data.Dataset.__init__", "stemseg.data.generic_image_dataset_parser.parse_generic_image_dataset", "map", "stemseg.data.image_to_seq_augmenter.ImageToSeqAugmenter", "stemseg.utils.transforms.BatchImageTransform", "open", "yaml.load", "sample.mask_areas", "mapillary_data_loader.MapillaryDataLoader.samples.append", "stemseg.utils.transforms.ToTorchTensor", "os.path.join", "yaml.load.items", "yaml.load.items", "sum", "stemseg.utils.RepoPaths.dataset_meta_info_dir", "range", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.__init__", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_image_dataset_parser.parse_generic_image_dataset", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_image_dataset_parser.GenericImageSample.mask_areas", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.constants.RepoPaths.dataset_meta_info_dir"], ["    ", "def", "__init__", "(", "self", ",", "base_dir", ",", "ids_json_file", ",", "min_instance_size", "=", "30", ",", "max_nbr_instances", "=", "30", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "samples", ",", "meta_info", "=", "parse_generic_image_dataset", "(", "base_dir", ",", "ids_json_file", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "RepoPaths", ".", "dataset_meta_info_dir", "(", ")", ",", "'mapillary.yaml'", ")", ",", "'r'", ")", "as", "fh", ":", "\n", "            ", "category_details", "=", "yaml", ".", "load", "(", "fh", ",", "Loader", "=", "yaml", ".", "SafeLoader", ")", "\n", "category_details", "=", "{", "cat", "[", "'id'", "]", ":", "cat", "for", "cat", "in", "category_details", "}", "\n", "\n", "", "self", ".", "cat_ids_to_keep", "=", "[", "cat_id", "for", "cat_id", ",", "attribs", "in", "category_details", ".", "items", "(", ")", "if", "attribs", "[", "'keep'", "]", "]", "\n", "self", ".", "cat_ids_to_ignore", "=", "[", "cat_id", "for", "cat_id", ",", "attribs", "in", "category_details", ".", "items", "(", ")", "if", "attribs", "[", "'ignore_mask'", "]", "]", "\n", "\n", "self", ".", "category_id_mapping", "=", "{", "\n", "cat_id", ":", "category_details", "[", "cat_id", "]", "[", "'id_kittimots'", "]", "for", "cat_id", "in", "self", ".", "cat_ids_to_keep", "\n", "}", "\n", "self", ".", "category_labels", "=", "{", "\n", "cat_id", ":", "category_details", "[", "cat_id", "]", "[", "'label'", "]", "for", "cat_id", "in", "self", ".", "cat_ids_to_keep", "\n", "}", "\n", "\n", "def", "filter_by_mask_area", "(", "sample", ")", ":", "\n", "            ", "mask_areas", "=", "sample", ".", "mask_areas", "(", ")", "\n", "instance_idxes_to_keep", "=", "[", "\n", "i", "for", "i", "in", "range", "(", "len", "(", "sample", ".", "segmentations", ")", ")", "if", "mask_areas", "[", "i", "]", ">=", "min_instance_size", "\n", "]", "\n", "\n", "sample", ".", "segmentations", "=", "[", "sample", ".", "segmentations", "[", "i", "]", "for", "i", "in", "instance_idxes_to_keep", "]", "\n", "sample", ".", "categories", "=", "[", "sample", ".", "categories", "[", "i", "]", "for", "i", "in", "instance_idxes_to_keep", "]", "\n", "\n", "return", "sample", "\n", "\n", "", "samples", "=", "map", "(", "filter_by_mask_area", ",", "samples", ")", "\n", "\n", "self", ".", "samples", "=", "[", "]", "\n", "for", "s", "in", "samples", ":", "\n", "            ", "if", "sum", "(", "[", "1", "for", "cat", "in", "s", ".", "categories", "if", "cat", "in", "self", ".", "cat_ids_to_keep", "]", ")", "==", "0", ":", "\n", "                ", "continue", "# no relevant instances present in image", "\n", "\n", "", "instance_idxes_to_keep", "=", "[", "\n", "i", "for", "i", "in", "range", "(", "len", "(", "s", ".", "segmentations", ")", ")", "if", "s", ".", "categories", "[", "i", "]", "in", "self", ".", "cat_ids_to_keep", "+", "self", ".", "cat_ids_to_ignore", "\n", "]", "\n", "\n", "s", ".", "segmentations", "=", "[", "s", ".", "segmentations", "[", "i", "]", "for", "i", "in", "instance_idxes_to_keep", "]", "\n", "s", ".", "categories", "=", "[", "s", ".", "categories", "[", "i", "]", "for", "i", "in", "instance_idxes_to_keep", "]", "\n", "\n", "self", ".", "samples", ".", "append", "(", "s", ")", "\n", "\n", "", "self", ".", "max_nbr_instances", "=", "max_nbr_instances", "\n", "\n", "self", ".", "augmenter", "=", "ImageToSeqAugmenter", "(", "perspective", "=", "True", ",", "affine", "=", "True", ",", "motion_blur", "=", "True", ",", "\n", "rotation_range", "=", "(", "-", "10", ",", "10", ")", ",", "perspective_magnitude", "=", "0.08", ",", "\n", "hue_saturation_range", "=", "(", "-", "5", ",", "5", ")", ",", "brightness_range", "=", "(", "-", "40", ",", "40", ")", ",", "\n", "motion_blur_prob", "=", "0.0", ",", "translate_range", "=", "(", "-", "0.1", ",", "0.1", ")", ")", "\n", "self", ".", "num_frames", "=", "cfg", ".", "INPUT", ".", "NUM_FRAMES", "\n", "\n", "self", ".", "np_to_tensor", "=", "transforms", ".", "BatchImageTransform", "(", "transforms", ".", "ToTorchTensor", "(", "format", "=", "'CHW'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.mapillary_data_loader.MapillaryDataLoader.filter_instance_masks": [[76, 104], ["zip", "enumerate", "zip", "numpy.any().astype", "numpy.zeros_like", "sorted", "ignore_instance_masks.append", "ignore_instance_masks.append", "filtered_instance_masks.append", "filtered_category_labels.append", "numpy.any", "numpy.stack", "enumerate"], "methods", ["None"], ["", "def", "filter_instance_masks", "(", "self", ",", "instance_masks", ",", "category_labels", ",", "instance_areas", ")", ":", "\n", "# reorder instances in descending order of their mask areas", "\n", "        ", "reorder_idxes", ",", "instance_areas", "=", "zip", "(", "*", "sorted", "(", "\n", "[", "(", "i", ",", "area", ")", "for", "i", ",", "area", "in", "enumerate", "(", "instance_areas", ")", "]", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", ")", "\n", "\n", "instance_masks", "=", "[", "instance_masks", "[", "idx", "]", "for", "idx", "in", "reorder_idxes", "]", "\n", "category_labels", "=", "[", "category_labels", "[", "idx", "]", "for", "idx", "in", "reorder_idxes", "]", "\n", "\n", "filtered_instance_masks", "=", "[", "]", "\n", "filtered_category_labels", "=", "[", "]", "\n", "ignore_instance_masks", "=", "[", "]", "\n", "\n", "for", "i", ",", "(", "mask", ",", "label", ")", "in", "enumerate", "(", "zip", "(", "instance_masks", ",", "category_labels", ")", ")", ":", "\n", "            ", "if", "i", "<", "self", ".", "max_nbr_instances", ":", "\n", "                ", "if", "label", "in", "self", ".", "cat_ids_to_ignore", ":", "\n", "                    ", "ignore_instance_masks", ".", "append", "(", "mask", ")", "\n", "", "else", ":", "\n", "                    ", "filtered_instance_masks", ".", "append", "(", "mask", ")", "\n", "filtered_category_labels", ".", "append", "(", "label", ")", "\n", "", "", "else", ":", "\n", "                ", "ignore_instance_masks", ".", "append", "(", "mask", ")", "\n", "\n", "", "", "if", "ignore_instance_masks", ":", "\n", "            ", "ignore_mask", "=", "np", ".", "any", "(", "np", ".", "stack", "(", "ignore_instance_masks", ")", ",", "0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "            ", "ignore_mask", "=", "np", ".", "zeros_like", "(", "instance_masks", "[", "0", "]", ")", "\n", "\n", "", "return", "filtered_instance_masks", ",", "filtered_category_labels", ",", "ignore_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.mapillary_data_loader.MapillaryDataLoader.__len__": [[105, 107], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.mapillary_data_loader.MapillaryDataLoader.__getitem__": [[108, 185], ["sample.load_image", "sample.load_masks", "mapillary_data_loader.MapillaryDataLoader.filter_instance_masks", "mapillary_data_loader.MapillaryDataLoader.apply_random_flip", "stemseg.structures.BinaryMask", "range", "mapillary_data_loader.MapillaryDataLoader.apply_random_sequence_shuffle", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "stemseg.data.common.scale_and_normalize_images", "range", "stemseg.data.common.compute_resize_params", "torch.interpolate", "torch.interpolate", "stemseg.structures.BinaryMaskSequenceList", "seq_instance_masks.tensor().permute.tensor().permute.resize", "seq_instance_masks.tensor().permute.tensor().permute.tensor().permute", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "sample.mask_areas", "stemseg.structures.BinaryMask", "mapillary_data_loader.MapillaryDataLoader.augmenter", "torch.interpolate.append", "seq_instance_masks.tensor().permute.tensor().permute.append", "torch.stack.append", "torch.stack.append", "seq_invalid_pts_masks.append", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "len", "mask.resize", "numpy.zeros", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "seq_instance_masks.tensor().permute.tensor().permute.tensor", "mask.tensor", "mapillary_data_loader.MapillaryDataLoader.np_to_tensor", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_image_dataset_parser.GenericImageSample.load_image", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_image_dataset_parser.GenericImageSample.load_masks", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.mapillary_data_loader.MapillaryDataLoader.filter_instance_masks", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.apply_random_flip", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.apply_random_sequence_shuffle", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.common.scale_and_normalize_images", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.common.compute_resize_params", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.resize", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_image_dataset_parser.GenericImageSample.mask_areas", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.resize", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "sample", "=", "self", ".", "samples", "[", "index", "]", "\n", "\n", "image", "=", "sample", ".", "load_image", "(", ")", "\n", "image_height", ",", "image_width", "=", "sample", ".", "height", ",", "sample", ".", "width", "\n", "\n", "instance_masks", "=", "sample", ".", "load_masks", "(", ")", "\n", "\n", "# separate instance masks of categories which have to be evaluated from the ones which have to be ignored.", "\n", "instance_masks", ",", "category_ids", ",", "ignore_mask", "=", "self", ".", "filter_instance_masks", "(", "\n", "instance_masks", ",", "sample", ".", "categories", ",", "sample", ".", "mask_areas", "(", ")", ")", "\n", "\n", "# apply random horizontal flip", "\n", "image", ",", "instance_masks", ",", "ignore_mask", "=", "self", ".", "apply_random_flip", "(", "image", ",", "instance_masks", ",", "ignore_mask", ")", "\n", "\n", "# convert masks to BinaryMask type", "\n", "instance_masks", "=", "[", "BinaryMask", "(", "mask", ")", "for", "mask", "in", "instance_masks", "]", "\n", "ignore_mask", "=", "BinaryMask", "(", "ignore_mask", ")", "\n", "\n", "# Convert everything to a single element list so that it becomes a one-image 'sequence'", "\n", "seq_images", ",", "seq_instance_masks", ",", "seq_ignore_masks", ",", "seq_invalid_pts_masks", "=", "[", "image", "]", ",", "[", "instance_masks", "]", ",", "[", "ignore_mask", "]", ",", "[", "np", ".", "zeros", "(", "(", "image_height", ",", "image_width", ")", ",", "np", ".", "uint8", ")", "]", "\n", "\n", "# add remaining sequence images by augmenting the original image", "\n", "for", "t", "in", "range", "(", "self", ".", "num_frames", "-", "1", ")", ":", "\n", "# get transformed image, instance mask and point validity mask", "\n", "            ", "masks", "=", "instance_masks", "+", "[", "ignore_mask", "]", "\n", "im_trafo", ",", "masks_trafo", ",", "invalid_pts", "=", "self", ".", "augmenter", "(", "image", ",", "masks", ")", "\n", "\n", "instance_masks_trafo", ",", "ignore_mask_trafo", "=", "masks_trafo", "[", ":", "-", "1", "]", ",", "masks_trafo", "[", "-", "1", "]", "\n", "\n", "# add everything to the sequence lists", "\n", "seq_images", ".", "append", "(", "im_trafo", ")", "\n", "seq_instance_masks", ".", "append", "(", "instance_masks_trafo", ")", "\n", "seq_ignore_masks", ".", "append", "(", "ignore_mask_trafo", ")", "\n", "seq_invalid_pts_masks", ".", "append", "(", "invalid_pts", ")", "\n", "\n", "# shuffle the elements of the sequence", "\n", "", "seq_images", ",", "seq_instance_masks", ",", "seq_ignore_masks", ",", "seq_invalid_pts_masks", "=", "self", ".", "apply_random_sequence_shuffle", "(", "\n", "seq_images", ",", "seq_instance_masks", ",", "seq_ignore_masks", ",", "seq_invalid_pts_masks", ")", "\n", "\n", "# normalize/scale/offset the image colors as needed (automatically converts from uint8 to float32)", "\n", "seq_images", "=", "torch", ".", "stack", "(", "self", ".", "np_to_tensor", "(", "*", "seq_images", ")", ",", "0", ")", ".", "float", "(", ")", "\n", "\n", "# scale and normalize images", "\n", "seq_images", "=", "scale_and_normalize_images", "(", "seq_images", ",", "cfg", ".", "INPUT", ".", "IMAGE_MEAN", ",", "cfg", ".", "INPUT", ".", "IMAGE_STD", ",", "\n", "not", "cfg", ".", "INPUT", ".", "BGR_INPUT", ",", "cfg", ".", "INPUT", ".", "NORMALIZE_TO_UNIT_SCALE", ")", "\n", "\n", "seq_invalid_pts_masks", "=", "[", "torch", ".", "from_numpy", "(", "mask", ")", ".", "float", "(", ")", "for", "mask", "in", "seq_invalid_pts_masks", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "seq_images", ")", ")", ":", "\n", "            ", "invalid_pts", "=", "1.", "-", "seq_invalid_pts_masks", "[", "i", "]", "[", "None", ",", ":", ",", ":", "]", "\n", "seq_images", "[", "i", "]", "=", "seq_images", "[", "i", "]", "*", "invalid_pts", "\n", "\n", "# resize images to the required input size", "\n", "", "new_width", ",", "new_height", ",", "scale_factor", "=", "compute_resize_params", "(", "image", ",", "cfg", ".", "INPUT", ".", "MIN_DIM", ",", "cfg", ".", "INPUT", ".", "MAX_DIM", ")", "\n", "seq_images", "=", "F", ".", "interpolate", "(", "seq_images", ",", "(", "new_height", ",", "new_width", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "# resize masks to the required input size", "\n", "seq_instance_masks", "=", "BinaryMaskSequenceList", "(", "seq_instance_masks", ")", "\n", "seq_instance_masks", "=", "seq_instance_masks", ".", "resize", "(", "(", "new_width", ",", "new_height", ")", ")", "\n", "seq_ignore_masks", "=", "[", "mask", ".", "resize", "(", "(", "new_height", ",", "new_width", ")", ")", "for", "mask", "in", "seq_ignore_masks", "]", "\n", "\n", "# convert masks to torch tensors", "\n", "seq_instance_masks", "=", "seq_instance_masks", ".", "tensor", "(", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "# [N, T, H, W]", "\n", "seq_ignore_masks", "=", "torch", ".", "stack", "(", "[", "mask", ".", "tensor", "(", ")", "for", "mask", "in", "seq_ignore_masks", "]", ",", "0", ")", "# [T, H, W]", "\n", "\n", "category_labels", "=", "[", "self", ".", "category_labels", "[", "label", "]", "for", "label", "in", "category_ids", "]", "\n", "category_ids", "=", "[", "self", ".", "category_id_mapping", "[", "label", "]", "for", "label", "in", "category_ids", "]", "\n", "category_ids", "=", "torch", ".", "tensor", "(", "category_ids", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "# combine everything into a dictionary", "\n", "targets", "=", "{", "\"masks\"", ":", "seq_instance_masks", ",", "\n", "\"category_ids\"", ":", "category_ids", ",", "\n", "'ignore_masks'", ":", "seq_ignore_masks", "}", "\n", "\n", "return", "seq_images", ",", "targets", ",", "(", "image_width", ",", "image_height", ")", ",", "{", "\"category_labels\"", ":", "category_labels", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.mapillary_data_loader.MapillaryDataLoader.apply_random_flip": [[186, 193], ["random.random", "numpy.flip", "numpy.flip", "numpy.flip"], "methods", ["None"], ["", "def", "apply_random_flip", "(", "self", ",", "image", ",", "instance_masks", ",", "ignore_mask", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "image", "=", "np", ".", "flip", "(", "image", ",", "axis", "=", "1", ")", "\n", "instance_masks", "=", "[", "np", ".", "flip", "(", "instance_mask", ",", "axis", "=", "1", ")", "for", "instance_mask", "in", "instance_masks", "]", "\n", "ignore_mask", "=", "np", ".", "flip", "(", "ignore_mask", ",", "axis", "=", "1", ")", "\n", "\n", "", "return", "image", ",", "instance_masks", ",", "ignore_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.mapillary_data_loader.MapillaryDataLoader.apply_random_sequence_shuffle": [[194, 203], ["list", "random.shuffle", "range"], "methods", ["None"], ["", "def", "apply_random_sequence_shuffle", "(", "self", ",", "images", ",", "instance_masks", ",", "ignore_masks", ",", "invalid_pts_masks", ")", ":", "\n", "        ", "perm", "=", "list", "(", "range", "(", "self", ".", "num_frames", ")", ")", "\n", "random", ".", "shuffle", "(", "perm", ")", "\n", "images", "=", "[", "images", "[", "i", "]", "for", "i", "in", "perm", "]", "\n", "instance_masks", "=", "[", "instance_masks", "[", "i", "]", "for", "i", "in", "perm", "]", "\n", "ignore_masks", "=", "[", "ignore_masks", "[", "i", "]", "for", "i", "in", "perm", "]", "\n", "invalid_pts_masks", "=", "[", "invalid_pts_masks", "[", "i", "]", "for", "i", "in", "perm", "]", "\n", "\n", "return", "images", ",", "instance_masks", ",", "ignore_masks", ",", "invalid_pts_masks", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.youtube_vis_data_loader.YoutubeVISDataLoader.__init__": [[12, 27], ["stemseg.data.video_dataset.VideoDataset.__init__", "youtube_vis_data_loader.YoutubeVISDataLoader.filter_zero_instance_frames", "youtube_vis_data_loader.YoutubeVISDataLoader.create_training_subsequences", "stemseg.data.instance_duplicator.InstanceDuplicator"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.__init__", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.video_dataset.VideoDataset.filter_zero_instance_frames", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.mots_data_loader.MOTSDataLoader.create_training_subsequences"], ["    ", "def", "__init__", "(", "self", ",", "base_dir", ",", "vds_json_file", ",", "samples_to_create", ",", "\n", "apply_augmentation", "=", "False", ",", "\n", "category_agnostic", "=", "True", ",", "\n", "single_instance_duplication", "=", "False", ")", ":", "\n", "        ", "super", "(", "YoutubeVISDataLoader", ",", "self", ")", ".", "__init__", "(", "base_dir", ",", "vds_json_file", ",", "cfg", ".", "INPUT", ".", "NUM_FRAMES", ",", "\n", "apply_augmentations", "=", "apply_augmentation", ")", "\n", "self", ".", "filter_zero_instance_frames", "(", ")", "\n", "\n", "self", ".", "category_agnostic", "=", "category_agnostic", "\n", "\n", "assert", "samples_to_create", ">", "0", "\n", "self", ".", "samples", "=", "self", ".", "create_training_subsequences", "(", "samples_to_create", ")", "\n", "\n", "self", ".", "instance_duplicator", "=", "InstanceDuplicator", "(", ")", "\n", "self", ".", "single_instance_duplication", "=", "single_instance_duplication", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.youtube_vis_data_loader.YoutubeVISDataLoader.create_training_subsequences": [[28, 69], ["list", "sum", "list.copy", "zip", "random.sample", "random.shuffle", "range", "max", "range", "len", "len", "sequences[].extract_subsequence", "len", "int", "min", "numpy.round().astype().tolist", "random.sample.append", "len", "math.ceil", "random.choice", "random.randint", "len", "len", "len", "len", "numpy.round().astype", "set", "len", "numpy.round", "numpy.linspace"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.copy", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_video_dataset_parser.GenericVideoSequence.extract_subsequence"], ["", "def", "create_training_subsequences", "(", "self", ",", "num_subsequences", ")", ":", "\n", "        ", "frame_range", "=", "list", "(", "range", "(", "cfg", ".", "DATA", ".", "YOUTUBE_VIS", ".", "FRAME_GAP_LOWER", ",", "cfg", ".", "DATA", ".", "YOUTUBE_VIS", ".", "FRAME_GAP_UPPER", "+", "1", ")", ")", "\n", "subseq_length", "=", "self", ".", "clip_length", "\n", "assert", "self", ".", "clip_length", "<=", "cfg", ".", "DATA", ".", "YOUTUBE_VIS", ".", "FRAME_GAP_LOWER", "<=", "cfg", ".", "DATA", ".", "YOUTUBE_VIS", ".", "FRAME_GAP_UPPER", "\n", "\n", "# filter sequences which are too short", "\n", "min_sequence_length", "=", "frame_range", "[", "0", "]", "+", "1", "# so that multiple, different subsequences can be generated", "\n", "sequences", "=", "[", "seq", "for", "seq", "in", "self", ".", "sequences", "if", "len", "(", "seq", ")", ">", "min_sequence_length", "]", "\n", "\n", "# compute number of sub-sequences to create from each video sequence", "\n", "total_frames", "=", "sum", "(", "[", "len", "(", "seq", ")", "for", "seq", "in", "sequences", "]", ")", "\n", "samples_per_seq", "=", "[", "max", "(", "1", ",", "int", "(", "math", ".", "ceil", "(", "(", "len", "(", "seq", ")", "/", "total_frames", ")", "*", "num_subsequences", ")", ")", ")", "for", "seq", "in", "sequences", "]", "\n", "\n", "subseq_span_range", "=", "frame_range", ".", "copy", "(", ")", "\n", "subsequence_idxes", "=", "[", "]", "\n", "\n", "for", "sequence", ",", "num_samples", "in", "zip", "(", "sequences", ",", "samples_per_seq", ")", ":", "\n", "            ", "for", "_", "in", "range", "(", "num_samples", ")", ":", "\n", "                ", "subseq_span", "=", "min", "(", "random", ".", "choice", "(", "subseq_span_range", ")", ",", "len", "(", "sequence", ")", "-", "1", ")", "\n", "max_start_idx", "=", "len", "(", "sequence", ")", "-", "subseq_span", "-", "1", "\n", "assert", "max_start_idx", ">=", "0", "\n", "\n", "start_idx", "=", "0", "if", "max_start_idx", "==", "0", "else", "random", ".", "randint", "(", "0", ",", "max_start_idx", ")", "\n", "end_idx", "=", "start_idx", "+", "subseq_span", "\n", "sample_idxes", "=", "np", ".", "round", "(", "np", ".", "linspace", "(", "start_idx", ",", "end_idx", ",", "subseq_length", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", ".", "tolist", "(", ")", "\n", "\n", "assert", "len", "(", "set", "(", "sample_idxes", ")", ")", "==", "len", "(", "sample_idxes", ")", "# sanity check: ascertain no duplicate indices", "\n", "subsequence_idxes", ".", "append", "(", "(", "sequence", ".", "id", ",", "sample_idxes", ")", ")", "\n", "\n", "# because of rounding up the number of samples to create per sequence, we will always have more than the", "\n", "# required number of samples. So we randomly select the required number.", "\n", "", "", "assert", "len", "(", "subsequence_idxes", ")", ">=", "num_subsequences", ",", "\"{} should be >= {}\"", ".", "format", "(", "len", "(", "subsequence_idxes", ")", ",", "num_subsequences", ")", "\n", "\n", "subsequence_idxes", "=", "random", ".", "sample", "(", "subsequence_idxes", ",", "num_subsequences", ")", "\n", "random", ".", "shuffle", "(", "subsequence_idxes", ")", "\n", "\n", "sequences", "=", "{", "seq", ".", "id", ":", "seq", "for", "seq", "in", "sequences", "}", "\n", "subsequences", "=", "[", "sequences", "[", "video_id", "]", ".", "extract_subsequence", "(", "frame_idxes", ")", "for", "video_id", ",", "frame_idxes", "in", "subsequence_idxes", "]", "\n", "\n", "return", "subsequences", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.youtube_vis_data_loader.YoutubeVISDataLoader.parse_sample_at": [[70, 101], ["sample.load_images", "sample.load_masks", "stemseg.structures.mask.BinaryMaskSequenceList", "youtube_vis_data_loader.YoutubeVISDataLoader.instance_duplicator", "stemseg.structures.mask.BinaryMask", "len", "list", "instance_categories.append", "numpy.zeros", "range", "stemseg.structures.mask.BinaryMask", "range", "zip", "len"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_video_dataset_parser.GenericVideoSequence.load_images", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_image_dataset_parser.GenericImageSample.load_masks"], ["", "def", "parse_sample_at", "(", "self", ",", "idx", ")", ":", "\n", "        ", "sample", "=", "self", ".", "samples", "[", "idx", "]", "\n", "\n", "images", "=", "sample", ".", "load_images", "(", ")", "\n", "masks", "=", "sample", ".", "load_masks", "(", ")", "# list(T))", "\n", "\n", "if", "self", ".", "category_agnostic", ":", "\n", "            ", "instance_categories", "=", "[", "1", "for", "_", "in", "range", "(", "len", "(", "sample", ".", "instance_ids", ")", ")", "]", "\n", "", "else", ":", "\n", "            ", "instance_categories", "=", "sample", ".", "category_labels", "\n", "\n", "", "if", "len", "(", "sample", ".", "instance_ids", ")", "==", "1", "and", "self", ".", "single_instance_duplication", ":", "\n", "            ", "masks_flat", "=", "[", "mask", "[", "0", "]", "for", "mask", "in", "masks", "]", "\n", "augmented_images", ",", "augmented_masks", "=", "self", ".", "instance_duplicator", "(", "images", ",", "masks_flat", ")", "\n", "if", "augmented_images", "is", "not", "None", ":", "# duplication was successful", "\n", "                ", "images", "=", "augmented_images", "\n", "masks", "=", "list", "(", "zip", "(", "*", "augmented_masks", ")", ")", "# list(N, list(T)) --> list(T, list(N))", "\n", "instance_categories", ".", "append", "(", "instance_categories", "[", "-", "1", "]", ")", "\n", "\n", "", "", "height", ",", "width", "=", "images", "[", "0", "]", ".", "shape", "[", ":", "2", "]", "\n", "ignore_masks", "=", "[", "BinaryMask", "(", "np", ".", "zeros", "(", "(", "height", ",", "width", ")", ",", "np", ".", "uint8", ")", ")", "for", "_", "in", "range", "(", "self", ".", "clip_length", ")", "]", "\n", "\n", "masks", "=", "[", "\n", "[", "\n", "BinaryMask", "(", "mask", ")", "for", "mask", "in", "masks_t", "\n", "]", "\n", "for", "masks_t", "in", "masks", "\n", "]", "\n", "masks", "=", "BinaryMaskSequenceList", "(", "masks", ")", "\n", "\n", "return", "images", ",", "masks", ",", "instance_categories", ",", "{", "'seq_name'", ":", "sample", ".", "id", ",", "'ignore_masks'", ":", "ignore_masks", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.youtube_vis_data_loader.YoutubeVISDataLoader.__len__": [[102, 104], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.visualize_data_loading.visualize_data_loader_output": [[21, 72], ["print", "torch.utils.data.DataLoader", "range", "stemseg.utils.vis.create_color_map().tolist", "cv2.namedWindow", "cv2.namedWindow", "cv2.namedWindow", "image_list.numpy", "range", "len", "stemseg.utils.vis.create_color_map", "print", "stemseg.data.common.instance_masks_to_semseg_mask", "semseg_mask.numpy().astype.numpy().astype", "range", "range", "numpy.copy", "im.copy", "range", "stemseg.data.common.visualize_semseg_masks", "cv2.imshow", "seq_image_ignore_overlayed.append", "cv2.imshow", "cv2.imshow", "cv2.waitKey", "print", "print", "range", "semseg_mask.numpy().astype.numpy", "m.numpy", "stemseg.utils.vis.overlay_mask_on_image", "stemseg.utils.vis.overlay_mask_on_image", "masks[].unbind", "ignore_mask[].numpy", "str"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.image_list.ImageList.numpy", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.vis.create_color_map", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.common.instance_masks_to_semseg_mask", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.copy", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.copy", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.common.visualize_semseg_masks", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.image_list.ImageList.numpy", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.image_list.ImageList.numpy", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.vis.overlay_mask_on_image", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.vis.overlay_mask_on_image", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.image_list.ImageList.numpy"], ["def", "visualize_data_loader_output", "(", "dataset", ",", "num_workers", ",", "batch_size", ",", "shuffle", ")", ":", "\n", "    ", "print", "(", "\"Number of samples: {}\"", ".", "format", "(", "len", "(", "dataset", ")", ")", ")", "\n", "data_loader", "=", "TorchDataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "shuffle", ",", "num_workers", "=", "num_workers", ",", "\n", "collate_fn", "=", "collate_fn", ")", "\n", "\n", "for", "t", "in", "range", "(", "cfg", ".", "INPUT", ".", "NUM_FRAMES", ")", ":", "\n", "        ", "cv2", ".", "namedWindow", "(", "'Image {}'", ".", "format", "(", "t", ")", ",", "cv2", ".", "WINDOW_NORMAL", ")", "\n", "cv2", ".", "namedWindow", "(", "'Ignore {}'", ".", "format", "(", "t", ")", ",", "cv2", ".", "WINDOW_NORMAL", ")", "\n", "cv2", ".", "namedWindow", "(", "'Image {} semseg'", ".", "format", "(", "t", ")", ",", "cv2", ".", "WINDOW_NORMAL", ")", "\n", "\n", "", "cmap", "=", "create_color_map", "(", ")", ".", "tolist", "(", ")", "\n", "for", "image_list", ",", "target", ",", "meta_info", "in", "data_loader", ":", "\n", "        ", "images", "=", "image_list", ".", "numpy", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "if", "meta_info", "[", "i", "]", ":", "\n", "                ", "if", "'seq_name'", "in", "meta_info", "[", "i", "]", ":", "\n", "                    ", "print", "(", "\"Seq name: {}\"", ".", "format", "(", "meta_info", "[", "i", "]", "[", "'seq_name'", "]", ")", ")", "\n", "", "if", "'category_labels'", "in", "meta_info", "[", "i", "]", ":", "\n", "                    ", "print", "(", "\"Category labels: {}\"", ".", "format", "(", "str", "(", "meta_info", "[", "i", "]", "[", "'category_labels'", "]", ")", ")", ")", "\n", "\n", "", "", "seq_images", "=", "[", "np", ".", "copy", "(", "images", "[", "i", "]", "[", "t", "]", ")", "for", "t", "in", "range", "(", "cfg", ".", "INPUT", ".", "NUM_FRAMES", ")", "]", "\n", "\n", "masks", "=", "target", "[", "i", "]", "[", "'masks'", "]", "\n", "num_instances", "=", "masks", ".", "shape", "[", "0", "]", "\n", "print", "(", "\"Instances: {}\"", ".", "format", "(", "num_instances", ")", ")", "\n", "\n", "semseg_mask", "=", "instance_masks_to_semseg_mask", "(", "masks", ",", "target", "[", "i", "]", "[", "'category_ids'", "]", ")", "\n", "semseg_mask", "=", "semseg_mask", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "ignore_mask", "=", "target", "[", "i", "]", "[", "'ignore_masks'", "]", "\n", "seq_images_instances", "=", "[", "im", ".", "copy", "(", ")", "for", "im", "in", "seq_images", "]", "\n", "\n", "for", "j", "in", "range", "(", "num_instances", ")", ":", "\n", "                ", "masks_j", "=", "[", "m", ".", "numpy", "(", ")", "for", "m", "in", "masks", "[", "j", "]", ".", "unbind", "(", "0", ")", "]", "\n", "\n", "for", "t", "in", "range", "(", "cfg", ".", "INPUT", ".", "NUM_FRAMES", ")", ":", "\n", "                    ", "seq_images_instances", "[", "t", "]", "=", "overlay_mask_on_image", "(", "seq_images_instances", "[", "t", "]", ",", "masks_j", "[", "t", "]", ",", "0.5", ",", "cmap", "[", "j", "+", "1", "]", ")", "\n", "\n", "", "", "seq_image_ignore_overlayed", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "cfg", ".", "INPUT", ".", "NUM_FRAMES", ")", ":", "\n", "                ", "semseg_masked_t", "=", "visualize_semseg_masks", "(", "images", "[", "i", "]", "[", "t", "]", ",", "semseg_mask", "[", "t", "]", ")", "\n", "cv2", ".", "imshow", "(", "'Image {} semseg'", ".", "format", "(", "t", ")", ",", "semseg_masked_t", ")", "\n", "\n", "seq_image_ignore_overlayed", ".", "append", "(", "overlay_mask_on_image", "(", "seq_images", "[", "t", "]", ",", "ignore_mask", "[", "t", "]", ".", "numpy", "(", ")", ")", ")", "\n", "\n", "cv2", ".", "imshow", "(", "'Image {}'", ".", "format", "(", "t", ")", ",", "seq_images_instances", "[", "t", "]", ")", "\n", "cv2", ".", "imshow", "(", "'Ignore {}'", ".", "format", "(", "t", ")", ",", "seq_image_ignore_overlayed", "[", "t", "]", ")", "\n", "\n", "", "if", "cv2", ".", "waitKey", "(", "0", ")", "==", "113", ":", "# 'q' key", "\n", "                ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.visualize_data_loading.main": [[74, 125], ["imgaug.seed", "torch.random.manual_seed", "random.seed", "os.path.isabs", "visualize_data_loading.visualize_data_loader_output", "stemseg.config.cfg.merge_from_file", "stemseg.config.cfg.merge_from_file", "stemseg.data.CocoDataLoader", "os.path.join", "stemseg.data.paths.CocoPaths.images_dir", "stemseg.data.paths.CocoPaths.ids_file", "stemseg.data.MapillaryDataLoader", "stemseg.utils.RepoPaths.configs_dir", "stemseg.data.paths.MapillaryPaths.images_dir", "stemseg.data.paths.MapillaryPaths.ids_file", "stemseg.data.PascalVOCDataLoader", "stemseg.data.paths.PascalVOCPaths.images_dir", "stemseg.data.paths.PascalVOCPaths.ids_file", "stemseg.data.YoutubeVISDataLoader", "stemseg.data.paths.YoutubeVISPaths.training_base_dir", "stemseg.data.paths.YoutubeVISPaths.train_vds_file", "stemseg.data.DavisDataLoader", "stemseg.data.paths.DavisUnsupervisedPaths.trainval_base_dir", "stemseg.data.paths.DavisUnsupervisedPaths.train_vds_file", "stemseg.data.MOTSDataLoader", "ValueError", "stemseg.data.paths.KITTIMOTSPaths.train_images_dir", "stemseg.data.paths.KITTIMOTSPaths.train_vds_file"], "function", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.visualize_data_loading.visualize_data_loader_output", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.config.config.YamlConfig.merge_from_file", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.config.config.YamlConfig.merge_from_file", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.PascalVOCPaths.images_dir", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.PascalVOCPaths.ids_file", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.constants.RepoPaths.configs_dir", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.PascalVOCPaths.images_dir", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.PascalVOCPaths.ids_file", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.PascalVOCPaths.images_dir", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.PascalVOCPaths.ids_file", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.YoutubeVISPaths.training_base_dir", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.KITTIMOTSPaths.train_vds_file", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.DavisUnsupervisedPaths.trainval_base_dir", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.KITTIMOTSPaths.train_vds_file", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.KITTIMOTSPaths.train_images_dir", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.KITTIMOTSPaths.train_vds_file"], ["", "", "", "", "def", "main", "(", "args", ")", ":", "\n", "    ", "imgaug", ".", "seed", "(", "42", ")", "\n", "torch", ".", "random", ".", "manual_seed", "(", "42", ")", "\n", "random", ".", "seed", "(", "42", ")", "\n", "\n", "if", "os", ".", "path", ".", "isabs", "(", "args", ".", "cfg", ")", ":", "\n", "        ", "cfg", ".", "merge_from_file", "(", "args", ".", "cfg", ")", "\n", "", "else", ":", "\n", "        ", "cfg", ".", "merge_from_file", "(", "os", ".", "path", ".", "join", "(", "RepoPaths", ".", "configs_dir", "(", ")", ",", "args", ".", "cfg", ")", ")", "\n", "\n", "", "if", "args", ".", "dataset", "==", "\"coco\"", ":", "\n", "        ", "dataset", "=", "CocoDataLoader", "(", "CocoPaths", ".", "images_dir", "(", ")", ",", "CocoPaths", ".", "ids_file", "(", ")", ",", "category_agnostic", "=", "False", ")", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "\"mapillary\"", ":", "\n", "        ", "dataset", "=", "MapillaryDataLoader", "(", "\n", "MapillaryPaths", ".", "images_dir", "(", ")", ",", "MapillaryPaths", ".", "ids_file", "(", ")", "\n", ")", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "\"pascalvoc\"", ":", "\n", "        ", "dataset", "=", "PascalVOCDataLoader", "(", "\n", "PascalVOCPaths", ".", "images_dir", "(", ")", ",", "PascalVOCPaths", ".", "ids_file", "(", ")", ",", "\n", "category_agnostic", "=", "False", "\n", ")", "\n", "", "elif", "args", ".", "dataset", "==", "\"ytvis\"", ":", "\n", "        ", "dataset", "=", "YoutubeVISDataLoader", "(", "\n", "YoutubeVISPaths", ".", "training_base_dir", "(", ")", ",", "\n", "YoutubeVISPaths", ".", "train_vds_file", "(", ")", ",", "\n", "cfg", ".", "TRAINING", ".", "TRACKER", ".", "MAX_ITERATIONS", ",", "\n", "category_agnostic", "=", "False", ",", "\n", "single_instance_duplication", "=", "cfg", ".", "DATA", ".", "YOUTUBE_VIS", ".", "SINGLE_INSTANCE_DUPLICATION", "\n", ")", "\n", "", "elif", "args", ".", "dataset", "==", "\"davis\"", ":", "\n", "        ", "dataset", "=", "DavisDataLoader", "(", "\n", "DavisUnsupervisedPaths", ".", "trainval_base_dir", "(", ")", ",", "\n", "DavisUnsupervisedPaths", ".", "train_vds_file", "(", ")", ",", "\n", "apply_augmentation", "=", "False", ",", "\n", "samples_to_create", "=", "cfg", ".", "DATA", ".", "DAVIS", ".", "TRAINING_SUBSEQUENCES", ",", "\n", "single_instance_duplication", "=", "cfg", ".", "DATA", ".", "DAVIS", ".", "SINGLE_INSTANCE_DUPLICATION", "\n", ")", "\n", "", "elif", "args", ".", "dataset", "==", "\"kittimots\"", ":", "\n", "        ", "dataset", "=", "MOTSDataLoader", "(", "\n", "KITTIMOTSPaths", ".", "train_images_dir", "(", ")", ",", "KITTIMOTSPaths", ".", "train_vds_file", "(", ")", ",", "\n", "samples_to_create", "=", "cfg", ".", "TRAINING", ".", "TRACKER", ".", "MAX_ITERATIONS", ",", "\n", "apply_augmentation", "=", "cfg", ".", "DATA", ".", "KITTI_MOTS", ".", "AUGMENTATION", ",", "\n", "frame_gap_lower", "=", "cfg", ".", "DATA", ".", "KITTI_MOTS", ".", "FRAME_GAP_LOWER", ",", "\n", "frame_gap_upper", "=", "cfg", ".", "DATA", ".", "KITTI_MOTS", ".", "FRAME_GAP_UPPER", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Invalid dataset name given\"", ")", "\n", "\n", "", "visualize_data_loader_output", "(", "dataset", ",", "args", ".", "num_workers", ",", "args", ".", "batch_size", ",", "args", ".", "shuffle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.davis_data_loader.DavisDataLoader.__init__": [[12, 27], ["stemseg.data.video_dataset.VideoDataset.__init__", "davis_data_loader.DavisDataLoader.filter_zero_instance_frames", "davis_data_loader.DavisDataLoader.create_training_subsequences", "stemseg.data.instance_duplicator.InstanceDuplicator"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.__init__", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.video_dataset.VideoDataset.filter_zero_instance_frames", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.mots_data_loader.MOTSDataLoader.create_training_subsequences"], ["    ", "def", "__init__", "(", "self", ",", "base_dir", ",", "vds_json_file", ",", "\n", "samples_to_create", "=", "-", "1", ",", "\n", "apply_augmentation", "=", "False", ",", "\n", "single_instance_duplication", "=", "False", ",", "\n", "background_as_ignore_region", "=", "True", ")", ":", "\n", "\n", "        ", "super", "(", "DavisDataLoader", ",", "self", ")", ".", "__init__", "(", "base_dir", ",", "vds_json_file", ",", "cfg", ".", "INPUT", ".", "NUM_FRAMES", ",", "apply_augmentation", ")", "\n", "\n", "self", ".", "filter_zero_instance_frames", "(", ")", "\n", "\n", "self", ".", "samples", "=", "self", ".", "create_training_subsequences", "(", "samples_to_create", ")", "\n", "\n", "self", ".", "instance_duplicator", "=", "InstanceDuplicator", "(", ")", "\n", "self", ".", "single_instance_duplication", "=", "single_instance_duplication", "\n", "self", ".", "background_as_ignore_region", "=", "background_as_ignore_region", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.davis_data_loader.DavisDataLoader.create_training_subsequences": [[28, 72], ["list", "sum", "list.copy", "zip", "random.sample", "random.shuffle", "range", "max", "range", "len", "len", "sequences[].extract_subsequence", "len", "int", "min", "numpy.round().astype().tolist", "random.sample.append", "len", "math.ceil", "random.choice", "random.randint", "len", "len", "len", "len", "numpy.round().astype", "set", "len", "numpy.round", "numpy.linspace"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.copy", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_video_dataset_parser.GenericVideoSequence.extract_subsequence"], ["", "def", "create_training_subsequences", "(", "self", ",", "num_subsequences", ")", ":", "\n", "        ", "frame_range", "=", "list", "(", "range", "(", "cfg", ".", "DATA", ".", "DAVIS", ".", "FRAME_GAP_LOWER", ",", "cfg", ".", "DATA", ".", "DAVIS", ".", "FRAME_GAP_UPPER", "+", "1", ")", ")", "\n", "subseq_length", "=", "self", ".", "clip_length", "\n", "\n", "# filter sequences which are too short", "\n", "min_sequence_length", "=", "frame_range", "[", "0", "]", "+", "1", "# so that multiple, different subsequences can be generated", "\n", "sequences", "=", "[", "seq", "for", "seq", "in", "self", ".", "sequences", "if", "len", "(", "seq", ")", ">", "min_sequence_length", "]", "\n", "\n", "# compute number of sub-sequences to create from each video sequence", "\n", "total_frames", "=", "sum", "(", "[", "len", "(", "seq", ")", "for", "seq", "in", "sequences", "]", ")", "\n", "samples_per_seq", "=", "[", "max", "(", "1", ",", "int", "(", "math", ".", "ceil", "(", "(", "len", "(", "seq", ")", "/", "total_frames", ")", "*", "num_subsequences", ")", ")", ")", "for", "seq", "in", "sequences", "]", "\n", "\n", "subseq_span_range", "=", "frame_range", ".", "copy", "(", ")", "\n", "subsequence_idxes", "=", "[", "]", "\n", "# num_intermediate_frames = subseq_length - 2", "\n", "\n", "for", "sequence", ",", "num_samples", "in", "zip", "(", "sequences", ",", "samples_per_seq", ")", ":", "\n", "            ", "for", "_", "in", "range", "(", "num_samples", ")", ":", "\n", "                ", "subseq_span", "=", "min", "(", "random", ".", "choice", "(", "subseq_span_range", ")", ",", "len", "(", "sequence", ")", "-", "1", ")", "\n", "max_start_idx", "=", "len", "(", "sequence", ")", "-", "subseq_span", "-", "1", "\n", "assert", "max_start_idx", ">=", "0", "\n", "\n", "start_idx", "=", "0", "if", "max_start_idx", "==", "0", "else", "random", ".", "randint", "(", "0", ",", "max_start_idx", ")", "\n", "end_idx", "=", "start_idx", "+", "subseq_span", "\n", "sample_idxes", "=", "np", ".", "round", "(", "np", ".", "linspace", "(", "start_idx", ",", "end_idx", ",", "subseq_length", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", ".", "tolist", "(", ")", "\n", "\n", "assert", "len", "(", "set", "(", "sample_idxes", ")", ")", "==", "len", "(", "sample_idxes", ")", "# sanity check: ascertain no duplicate indices", "\n", "subsequence_idxes", ".", "append", "(", "(", "sequence", ".", "id", ",", "sample_idxes", ")", ")", "\n", "\n", "# because of rounding up the number of samples to create per sequence, we will always have more than the", "\n", "# required number of samples. So we randomly select the required number.", "\n", "", "", "assert", "len", "(", "subsequence_idxes", ")", ">=", "num_subsequences", ",", "\"{} should be >= {}\"", ".", "format", "(", "len", "(", "subsequence_idxes", ")", ",", "num_subsequences", ")", "\n", "\n", "subsequence_idxes", "=", "random", ".", "sample", "(", "subsequence_idxes", ",", "num_subsequences", ")", "\n", "random", ".", "shuffle", "(", "subsequence_idxes", ")", "\n", "\n", "sequences", "=", "{", "seq", ".", "id", ":", "seq", "for", "seq", "in", "sequences", "}", "\n", "subsequences", "=", "[", "\n", "sequences", "[", "video_id", "]", ".", "extract_subsequence", "(", "frame_idxes", ")", "\n", "for", "video_id", ",", "frame_idxes", "in", "subsequence_idxes", "\n", "]", "\n", "\n", "return", "subsequences", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.davis_data_loader.DavisDataLoader.parse_sample_at": [[73, 101], ["sample.load_images", "sample.load_masks", "stemseg.structures.mask.BinaryMaskSequenceList", "davis_data_loader.DavisDataLoader.instance_duplicator", "len", "list", "numpy.any", "stemseg.structures.mask.BinaryMask", "stemseg.structures.mask.BinaryMask", "stemseg.structures.mask.BinaryMask", "range", "zip", "numpy.stack", "numpy.zeros_like", "range", "len"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_video_dataset_parser.GenericVideoSequence.load_images", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_image_dataset_parser.GenericImageSample.load_masks"], ["", "def", "parse_sample_at", "(", "self", ",", "idx", ")", ":", "\n", "        ", "sample", "=", "self", ".", "samples", "[", "idx", "]", "\n", "\n", "images", "=", "sample", ".", "load_images", "(", ")", "\n", "masks", "=", "sample", ".", "load_masks", "(", ")", "# list(T))", "\n", "\n", "if", "len", "(", "sample", ".", "instance_ids", ")", "==", "1", "and", "self", ".", "single_instance_duplication", ":", "\n", "            ", "masks_flat", "=", "[", "mask", "[", "0", "]", "for", "mask", "in", "masks", "]", "\n", "augmented_images", ",", "augmented_masks", "=", "self", ".", "instance_duplicator", "(", "images", ",", "masks_flat", ")", "\n", "if", "augmented_images", "is", "not", "None", ":", "# duplication was successful", "\n", "                ", "images", "=", "augmented_images", "\n", "masks", "=", "list", "(", "zip", "(", "*", "augmented_masks", ")", ")", "# list(N, list(T)) --> list(T, list(N))", "\n", "\n", "", "", "if", "self", ".", "background_as_ignore_region", ":", "\n", "            ", "fg_masks", "=", "[", "np", ".", "any", "(", "np", ".", "stack", "(", "masks_t", ",", "0", ")", ",", "0", ")", "for", "masks_t", "in", "masks", "]", "\n", "ignore_masks", "=", "[", "BinaryMask", "(", "(", "fg_mask", "==", "0", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "for", "fg_mask", "in", "fg_masks", "]", "\n", "", "else", ":", "\n", "            ", "ignore_masks", "=", "[", "BinaryMask", "(", "np", ".", "zeros_like", "(", "masks", "[", "0", "]", "[", "0", "]", ",", "np", ".", "uint8", ")", ")", "for", "_", "in", "range", "(", "len", "(", "masks", ")", ")", "]", "\n", "\n", "", "masks", "=", "[", "\n", "[", "BinaryMask", "(", "mask", ")", "for", "mask", "in", "masks_t", "]", "\n", "for", "masks_t", "in", "masks", "\n", "]", "\n", "\n", "masks", "=", "BinaryMaskSequenceList", "(", "masks", ")", "\n", "instance_categories", "=", "[", "1", "for", "_", "in", "range", "(", "masks", ".", "num_instances", ")", "]", "\n", "\n", "return", "images", ",", "masks", ",", "instance_categories", ",", "{", "\"ignore_masks\"", ":", "ignore_masks", ",", "\"seq_name\"", ":", "sample", ".", "id", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.davis_data_loader.DavisDataLoader.__len__": [[102, 104], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.distributed_data_sampler.DistributedSampler.__init__": [[25, 41], ["int", "torch.get_world_size", "torch.get_world_size", "torch.get_rank", "torch.get_rank", "math.ceil", "torch.is_available", "torch.is_available", "RuntimeError", "torch.is_available", "torch.is_available", "RuntimeError", "len"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.distributed.get_world_size", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.distributed.get_world_size", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.distributed.get_rank", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.distributed.get_rank"], ["def", "__init__", "(", "self", ",", "dataset", ",", "num_replicas", "=", "None", ",", "rank", "=", "None", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "if", "num_replicas", "is", "None", ":", "\n", "            ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Requires distributed package to be available\"", ")", "\n", "", "num_replicas", "=", "dist", ".", "get_world_size", "(", ")", "\n", "", "if", "rank", "is", "None", ":", "\n", "            ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Requires distributed package to be available\"", ")", "\n", "", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "num_replicas", "=", "num_replicas", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "num_samples", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "self", ".", "dataset", ")", "*", "1.0", "/", "self", ".", "num_replicas", ")", ")", "\n", "self", ".", "total_size", "=", "self", ".", "num_samples", "*", "self", ".", "num_replicas", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.distributed_data_sampler.DistributedSampler.__iter__": [[42, 61], ["iter", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator.manual_seed", "torch.Generator.manual_seed", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.arange().tolist", "torch.arange().tolist", "torch.arange().tolist", "torch.arange().tolist", "len", "len", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "len", "len", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "shuffle", ":", "\n", "# deterministically shuffle based on epoch", "\n", "            ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "epoch", ")", "\n", "indices", "=", "torch", ".", "randperm", "(", "len", "(", "self", ".", "dataset", ")", ",", "generator", "=", "g", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "indices", "=", "torch", ".", "arange", "(", "len", "(", "self", ".", "dataset", ")", ")", ".", "tolist", "(", ")", "\n", "\n", "# add extra samples to make it evenly divisible", "\n", "", "indices", "+=", "indices", "[", ":", "(", "self", ".", "total_size", "-", "len", "(", "indices", ")", ")", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", "\n", "\n", "# subsample", "\n", "offset", "=", "self", ".", "num_samples", "*", "self", ".", "rank", "\n", "indices", "=", "indices", "[", "offset", ":", "offset", "+", "self", ".", "num_samples", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.distributed_data_sampler.DistributedSampler.__len__": [[62, 64], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.distributed_data_sampler.DistributedSampler.set_epoch": [[65, 67], ["None"], "methods", ["None"], ["", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "epoch", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.image_to_seq_augmenter.ImageToSeqAugmenter.__init__": [[11, 44], ["imgaug.SomeOf", "imgaug.SomeOf", "imgaug.Sequential", "imgaug.Sequential", "imgaug.Sequential", "imgaug.Sequential", "imgaug.Sequential.append", "imgaug.Sequential.append", "imgaug.Sometimes", "imgaug.Sometimes", "imgaug.Sequential.append", "imgaug.Add", "imgaug.Add", "imgaug.AddToHueAndSaturation", "imgaug.AddToHueAndSaturation", "imgaug.PerspectiveTransform", "imgaug.PerspectiveTransform", "imgaug.Affine", "imgaug.Affine", "imgaug.OneOf", "imgaug.OneOf", "imgaug.MotionBlur", "imgaug.MotionBlur"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "perspective", "=", "True", ",", "affine", "=", "True", ",", "motion_blur", "=", "True", ",", "\n", "brightness_range", "=", "(", "-", "50", ",", "50", ")", ",", "hue_saturation_range", "=", "(", "-", "15", ",", "15", ")", ",", "perspective_magnitude", "=", "0.12", ",", "\n", "scale_range", "=", "1.0", ",", "translate_range", "=", "{", "\"x\"", ":", "(", "-", "0.15", ",", "0.15", ")", ",", "\"y\"", ":", "(", "-", "0.15", ",", "0.15", ")", "}", ",", "rotation_range", "=", "(", "-", "20", ",", "20", ")", ",", "\n", "motion_blur_kernel_sizes", "=", "(", "7", ",", "9", ")", ",", "motion_blur_prob", "=", "0.5", ")", ":", "\n", "\n", "        ", "self", ".", "basic_augmenter", "=", "iaa", ".", "SomeOf", "(", "(", "1", ",", "None", ")", ",", "[", "\n", "iaa", ".", "Add", "(", "brightness_range", ")", ",", "\n", "iaa", ".", "AddToHueAndSaturation", "(", "hue_saturation_range", ")", "\n", "]", "\n", ")", "\n", "\n", "transforms", "=", "[", "]", "\n", "if", "perspective", ":", "\n", "            ", "transforms", ".", "append", "(", "iaa", ".", "PerspectiveTransform", "(", "perspective_magnitude", ")", ")", "\n", "", "if", "affine", ":", "\n", "            ", "transforms", ".", "append", "(", "iaa", ".", "Affine", "(", "scale", "=", "scale_range", ",", "\n", "translate_percent", "=", "translate_range", ",", "\n", "rotate", "=", "rotation_range", ",", "\n", "order", "=", "1", ",", "# cv2.INTER_LINEAR", "\n", "backend", "=", "'auto'", ")", ")", "\n", "", "transforms", "=", "iaa", ".", "Sequential", "(", "transforms", ")", "\n", "transforms", "=", "[", "transforms", "]", "\n", "\n", "if", "motion_blur", ":", "\n", "            ", "blur", "=", "iaa", ".", "Sometimes", "(", "motion_blur_prob", ",", "iaa", ".", "OneOf", "(", "\n", "[", "\n", "iaa", ".", "MotionBlur", "(", "ksize", ")", "\n", "for", "ksize", "in", "motion_blur_kernel_sizes", "\n", "]", "\n", ")", ")", "\n", "transforms", ".", "append", "(", "blur", ")", "\n", "\n", "", "self", ".", "frame_shift_augmenter", "=", "iaa", ".", "Sequential", "(", "transforms", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.image_to_seq_augmenter.ImageToSeqAugmenter.condense_masks": [[45, 52], ["numpy.zeros_like", "enumerate", "numpy.where"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "condense_masks", "(", "instance_masks", ")", ":", "\n", "        ", "condensed_mask", "=", "np", ".", "zeros_like", "(", "instance_masks", "[", "0", "]", ",", "dtype", "=", "np", ".", "int8", ")", "\n", "for", "instance_id", ",", "mask", "in", "enumerate", "(", "instance_masks", ",", "1", ")", ":", "\n", "            ", "condensed_mask", "=", "np", ".", "where", "(", "mask", ",", "instance_id", ",", "condensed_mask", ")", "\n", "\n", "", "return", "condensed_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.image_to_seq_augmenter.ImageToSeqAugmenter.expand_masks": [[53, 56], ["range"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "expand_masks", "(", "condensed_mask", ",", "num_instances", ")", ":", "\n", "        ", "return", "[", "(", "condensed_mask", "==", "instance_id", ")", ".", "astype", "(", "np", ".", "uint8", ")", "for", "instance_id", "in", "range", "(", "1", ",", "num_instances", "+", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.image_to_seq_augmenter.ImageToSeqAugmenter.__call__": [[57, 95], ["image_to_seq_augmenter.ImageToSeqAugmenter.frame_shift_augmenter.to_deterministic", "len", "imgaug.augmentables.segmaps.SegmentationMapsOnImage", "imgaug.augmentables.segmaps.SegmentationMapsOnImage", "int", "imgaug.seed", "imgaug.seed", "imgaug.seed", "imgaug.seed", "image_to_seq_augmenter.ImageToSeqAugmenter.", "imgaug.seed", "imgaug.seed", "imgaug.seed", "imgaug.seed", "image_to_seq_augmenter.ImageToSeqAugmenter.squeeze", "image_to_seq_augmenter.ImageToSeqAugmenter.expand_masks", "image_to_seq_augmenter.ImageToSeqAugmenter.", "isinstance", "image_to_seq_augmenter.ImageToSeqAugmenter.condense_masks", "image_to_seq_augmenter.ImageToSeqAugmenter.get_arr", "imgaug.augmentables.segmaps.SegmentationMapsOnImage", "imgaug.augmentables.segmaps.SegmentationMapsOnImage", "imgaug.augmentables.segmaps.SegmentationMapsOnImage.append", "imgaug.augmentables.segmaps.SegmentationMapsOnImage.append", "is_binary_mask.append", "isinstance", "datetime.datetime.datetime.now().strftime", "image_to_seq_augmenter.ImageToSeqAugmenter.basic_augmenter", "image_to_seq_augmenter.ImageToSeqAugmenter.", "stemseg.structures.mask.BinaryMask", "zip", "numpy.ones", "image_to_seq_augmenter.ImageToSeqAugmenter.squeeze.get_arr", "mask.tensor().numpy().astype", "imgaug.augmentables.segmaps.SegmentationMapsOnImage.append", "imgaug.augmentables.segmaps.SegmentationMapsOnImage.append", "is_binary_mask.append", "ValueError", "mask.astype", "datetime.datetime.datetime.now", "numpy.ones", "mask.tensor().numpy", "type", "mask.tensor"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.image_to_seq_augmenter.ImageToSeqAugmenter.expand_masks", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.image_to_seq_augmenter.ImageToSeqAugmenter.condense_masks", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.image_list.ImageList.numpy", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor"], ["", "def", "__call__", "(", "self", ",", "image", ",", "masks", "=", "None", ")", ":", "\n", "        ", "det_augmenter", "=", "self", ".", "frame_shift_augmenter", ".", "to_deterministic", "(", ")", "\n", "\n", "if", "masks", ":", "\n", "            ", "masks_np", ",", "is_binary_mask", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "mask", "in", "masks", ":", "\n", "                ", "if", "isinstance", "(", "mask", ",", "BinaryMask", ")", ":", "\n", "                    ", "masks_np", ".", "append", "(", "mask", ".", "tensor", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "bool", ")", ")", "\n", "is_binary_mask", ".", "append", "(", "True", ")", "\n", "", "elif", "isinstance", "(", "mask", ",", "np", ".", "ndarray", ")", ":", "\n", "                    ", "masks_np", ".", "append", "(", "mask", ".", "astype", "(", "np", ".", "bool", ")", ")", "\n", "is_binary_mask", ".", "append", "(", "False", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "\"Invalid mask type: {}\"", ".", "format", "(", "type", "(", "mask", ")", ")", ")", "\n", "\n", "", "", "num_instances", "=", "len", "(", "masks_np", ")", "\n", "masks_np", "=", "SegmentationMapsOnImage", "(", "self", ".", "condense_masks", "(", "masks_np", ")", ",", "shape", "=", "image", ".", "shape", "[", ":", "2", "]", ")", "\n", "\n", "# to keep track of which points in the augmented image are padded zeros, we augment an additional all-ones", "\n", "# array. The problem is that imgaug will apply one augmentation to the image and associated mask, but a", "\n", "# different augmentation to this array. To prevent this, we manually seed the rng in imgaug before both", "\n", "# function calls to ensure that the same augmentation is applied to both.", "\n", "seed", "=", "int", "(", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%M%S%f'", ")", "[", "-", "8", ":", "]", ")", "\n", "imgaug", ".", "seed", "(", "seed", ")", "\n", "aug_image", ",", "aug_masks", "=", "det_augmenter", "(", "image", "=", "self", ".", "basic_augmenter", "(", "image", "=", "image", ")", ",", "segmentation_maps", "=", "masks_np", ")", "\n", "imgaug", ".", "seed", "(", "seed", ")", "\n", "invalid_pts_mask", "=", "det_augmenter", "(", "image", "=", "np", ".", "ones", "(", "image", ".", "shape", "[", ":", "2", "]", "+", "(", "1", ",", ")", ",", "np", ".", "uint8", ")", ")", ".", "squeeze", "(", "2", ")", "\n", "\n", "aug_masks", "=", "self", ".", "expand_masks", "(", "aug_masks", ".", "get_arr", "(", ")", ",", "num_instances", ")", "\n", "\n", "aug_masks", "=", "[", "BinaryMask", "(", "mask", ")", "if", "is_bm", "else", "mask", "for", "mask", ",", "is_bm", "in", "zip", "(", "aug_masks", ",", "is_binary_mask", ")", "]", "\n", "return", "aug_image", ",", "aug_masks", ",", "invalid_pts_mask", "==", "0", "\n", "\n", "", "else", ":", "\n", "            ", "masks", "=", "[", "SegmentationMapsOnImage", "(", "np", ".", "ones", "(", "image", ".", "shape", "[", ":", "2", "]", ",", "np", ".", "bool", ")", ",", "shape", "=", "image", ".", "shape", "[", ":", "2", "]", ")", "]", "\n", "aug_image", ",", "invalid_pts_mask", "=", "det_augmenter", "(", "image", "=", "image", ",", "segmentation_maps", "=", "masks", ")", "\n", "return", "aug_image", ",", "invalid_pts_mask", ".", "get_arr", "(", ")", "==", "0", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.mots_data_loader.MOTSDataLoader.__init__": [[13, 49], ["stemseg.data.video_dataset.VideoDataset.__init__", "mots_data_loader.MOTSDataLoader.create_training_subsequences", "range", "len", "set", "split_sequences.append", "len", "current_seq_frame_idxes.append", "seq.extract_subsequence", "split_sequences.append", "seq.segmentations[].keys", "seq.extract_subsequence", "str", "str"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.__init__", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.mots_data_loader.MOTSDataLoader.create_training_subsequences", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_video_dataset_parser.GenericVideoSequence.extract_subsequence", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_video_dataset_parser.GenericVideoSequence.extract_subsequence"], ["def", "__init__", "(", "self", ",", "base_dir", ",", "vds_json_file", ",", "samples_to_create", ",", "\n", "apply_augmentation", "=", "False", ")", ":", "\n", "        ", "super", "(", "MOTSDataLoader", ",", "self", ")", ".", "__init__", "(", "base_dir", ",", "vds_json_file", ",", "cfg", ".", "INPUT", ".", "NUM_FRAMES", ",", "apply_augmentation", ")", "\n", "\n", "# filtering zero instance frames introduces very long frame gaps for some videos. It is therefore better to", "\n", "# break up such cases into multiple sequences so that a single training sample does not contain large temporal", "\n", "# gaps.", "\n", "split_sequences", "=", "[", "]", "\n", "\n", "for", "seq", "in", "self", ".", "sequences", ":", "\n", "            ", "suffix", "=", "1", "# for keeping the sequence ID unique", "\n", "current_gap_len", "=", "0", "\n", "current_seq_frame_idxes", "=", "[", "]", "\n", "\n", "for", "t", "in", "range", "(", "len", "(", "seq", ")", ")", ":", "\n", "                ", "instance_cats_t", "=", "set", "(", "[", "seq", ".", "instance_categories", "[", "iid", "]", "for", "iid", "in", "seq", ".", "segmentations", "[", "t", "]", ".", "keys", "(", ")", "]", ")", "\n", "\n", "if", "len", "(", "instance_cats_t", "-", "{", "self", ".", "IGNORE_MASK_CAT_ID", "}", ")", "==", "0", ":", "# no car or pedestrian instances", "\n", "                    ", "current_gap_len", "+=", "1", "\n", "if", "current_gap_len", "==", "6", "and", "current_seq_frame_idxes", ":", "\n", "                        ", "split_sequences", ".", "append", "(", "seq", ".", "extract_subsequence", "(", "current_seq_frame_idxes", ",", "\n", "\"{}_{}\"", ".", "format", "(", "seq", ".", "id", ",", "str", "(", "suffix", ")", ")", ")", ")", "\n", "suffix", "+=", "1", "\n", "current_seq_frame_idxes", "=", "[", "]", "\n", "", "", "else", ":", "\n", "                    ", "current_gap_len", "=", "0", "\n", "current_seq_frame_idxes", ".", "append", "(", "t", ")", "\n", "\n", "", "", "if", "current_seq_frame_idxes", ":", "\n", "                ", "split_sequences", ".", "append", "(", "seq", ".", "extract_subsequence", "(", "current_seq_frame_idxes", ",", "\n", "\"{}_{}\"", ".", "format", "(", "seq", ".", "id", ",", "str", "(", "suffix", ")", ")", ")", ")", "\n", "\n", "", "", "self", ".", "sequences", "=", "split_sequences", "\n", "\n", "assert", "samples_to_create", ">", "0", ",", "\"Number of training samples is required for train mode\"", "\n", "self", ".", "samples", "=", "self", ".", "create_training_subsequences", "(", "samples_to_create", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.mots_data_loader.MOTSDataLoader.create_training_subsequences": [[50, 91], ["list", "sum", "list.copy", "zip", "random.sample", "random.shuffle", "range", "max", "range", "len", "len", "sequences[].extract_subsequence", "len", "int", "min", "numpy.round().astype().tolist", "random.sample.append", "len", "math.ceil", "random.choice", "random.randint", "len", "len", "len", "len", "numpy.round().astype", "set", "len", "numpy.round", "numpy.linspace"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.copy", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_video_dataset_parser.GenericVideoSequence.extract_subsequence"], ["", "def", "create_training_subsequences", "(", "self", ",", "num_subsequences", ")", ":", "\n", "        ", "frame_range", "=", "list", "(", "range", "(", "cfg", ".", "DATA", ".", "KITTI_MOTS", ".", "FRAME_GAP_LOWER", ",", "cfg", ".", "DATA", ".", "KITTI_MOTS", ".", "FRAME_GAP_UPPER", "+", "1", ")", ")", "\n", "subseq_length", "=", "self", ".", "clip_length", "\n", "\n", "# filter sequences which are too short", "\n", "min_sequence_length", "=", "frame_range", "[", "0", "]", "+", "1", "# so that multiple, different subsequences can be generated", "\n", "sequences", "=", "[", "seq", "for", "seq", "in", "self", ".", "sequences", "if", "len", "(", "seq", ")", ">", "min_sequence_length", "]", "\n", "# print(\"Num sequences: {} -> {}\".format(len(dataset.sequences), len(sequences)))", "\n", "\n", "# compute number of sub-sequences to create from each video sequence", "\n", "total_frames", "=", "sum", "(", "[", "len", "(", "seq", ")", "for", "seq", "in", "sequences", "]", ")", "\n", "samples_per_seq", "=", "[", "max", "(", "1", ",", "int", "(", "math", ".", "ceil", "(", "(", "len", "(", "seq", ")", "/", "total_frames", ")", "*", "num_subsequences", ")", ")", ")", "for", "seq", "in", "sequences", "]", "\n", "\n", "subseq_span_range", "=", "frame_range", ".", "copy", "(", ")", "\n", "subsequence_idxes", "=", "[", "]", "\n", "\n", "for", "sequence", ",", "num_samples", "in", "zip", "(", "sequences", ",", "samples_per_seq", ")", ":", "\n", "            ", "for", "_", "in", "range", "(", "num_samples", ")", ":", "\n", "                ", "subseq_span", "=", "min", "(", "random", ".", "choice", "(", "subseq_span_range", ")", ",", "len", "(", "sequence", ")", "-", "1", ")", "\n", "max_start_idx", "=", "len", "(", "sequence", ")", "-", "subseq_span", "-", "1", "\n", "assert", "max_start_idx", ">=", "0", "\n", "\n", "start_idx", "=", "0", "if", "max_start_idx", "==", "0", "else", "random", ".", "randint", "(", "0", ",", "max_start_idx", ")", "\n", "end_idx", "=", "start_idx", "+", "subseq_span", "\n", "sample_idxes", "=", "np", ".", "round", "(", "np", ".", "linspace", "(", "start_idx", ",", "end_idx", ",", "subseq_length", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", ".", "tolist", "(", ")", "\n", "\n", "assert", "len", "(", "set", "(", "sample_idxes", ")", ")", "==", "len", "(", "sample_idxes", ")", "# sanity check: ascertain no duplicate indices", "\n", "subsequence_idxes", ".", "append", "(", "(", "sequence", ".", "id", ",", "sample_idxes", ")", ")", "\n", "\n", "# because of rounding up the number of samples to create per sequence, we will always have more than the", "\n", "# required number of samples. So we randomly select the required number.", "\n", "", "", "assert", "len", "(", "subsequence_idxes", ")", ">=", "num_subsequences", ",", "\"{} should be >= {}\"", ".", "format", "(", "len", "(", "subsequence_idxes", ")", ",", "num_subsequences", ")", "\n", "\n", "subsequence_idxes", "=", "random", ".", "sample", "(", "subsequence_idxes", ",", "num_subsequences", ")", "\n", "random", ".", "shuffle", "(", "subsequence_idxes", ")", "\n", "\n", "sequences", "=", "{", "seq", ".", "id", ":", "seq", "for", "seq", "in", "sequences", "}", "\n", "subsequences", "=", "[", "sequences", "[", "video_id", "]", ".", "extract_subsequence", "(", "frame_idxes", ")", "for", "video_id", ",", "frame_idxes", "in", "subsequence_idxes", "]", "\n", "\n", "return", "subsequences", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.mots_data_loader.MOTSDataLoader.parse_sample_at": [[92, 134], ["sample.load_images", "sample.load_masks", "stemseg.structures.mask.BinaryMaskSequenceList", "instance_categories.index", "instance_categories.remove", "list", "list.remove", "ValueError", "stemseg.structures.mask.BinaryMask", "range", "stemseg.structures.mask.BinaryMask", "len", "stemseg.structures.mask.BinaryMask", "numpy.zeros", "range", "stemseg.structures.mask.BinaryMask", "len"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_video_dataset_parser.GenericVideoSequence.load_images", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_image_dataset_parser.GenericImageSample.load_masks"], ["", "def", "parse_sample_at", "(", "self", ",", "idx", ")", ":", "\n", "        ", "sample", "=", "self", ".", "samples", "[", "idx", "]", "\n", "\n", "images", "=", "sample", ".", "load_images", "(", ")", "\n", "masks", "=", "sample", ".", "load_masks", "(", ")", "# list(T))", "\n", "\n", "instance_categories", "=", "sample", ".", "category_labels", "\n", "\n", "# separate the ignore masks", "\n", "if", "3", "in", "instance_categories", ":", "\n", "            ", "ignore_mask_idx", "=", "instance_categories", ".", "index", "(", "self", ".", "IGNORE_MASK_CAT_ID", ")", "\n", "instance_categories", ".", "remove", "(", "self", ".", "IGNORE_MASK_CAT_ID", ")", "\n", "\n", "ignore_masks", "=", "[", "BinaryMask", "(", "masks_t", "[", "ignore_mask_idx", "]", ")", "for", "masks_t", "in", "masks", "]", "\n", "\n", "other_idxes", "=", "list", "(", "range", "(", "len", "(", "sample", ".", "instance_ids", ")", ")", ")", "\n", "other_idxes", ".", "remove", "(", "ignore_mask_idx", ")", "\n", "masks", "=", "[", "\n", "[", "\n", "BinaryMask", "(", "masks_t", "[", "i", "]", ")", "\n", "for", "i", "in", "other_idxes", "\n", "]", "\n", "for", "masks_t", "in", "masks", "\n", "]", "\n", "\n", "", "else", ":", "\n", "            ", "height", ",", "width", "=", "images", "[", "0", "]", ".", "shape", "[", ":", "2", "]", "\n", "ignore_masks", "=", "[", "BinaryMask", "(", "np", ".", "zeros", "(", "(", "height", ",", "width", ")", ",", "np", ".", "uint8", ")", ")", "for", "_", "in", "range", "(", "len", "(", "images", ")", ")", "]", "\n", "\n", "masks", "=", "[", "\n", "[", "\n", "BinaryMask", "(", "mask", ")", "for", "mask", "in", "masks_t", "\n", "]", "\n", "for", "masks_t", "in", "masks", "\n", "]", "\n", "\n", "", "masks", "=", "BinaryMaskSequenceList", "(", "masks", ")", "\n", "\n", "if", "masks", ".", "num_instances", "==", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"No instances exist in the masks (seq: {})\"", ".", "format", "(", "sample", ".", "id", ")", ")", "\n", "\n", "", "return", "images", ",", "masks", ",", "instance_categories", ",", "{", "'seq_name'", ":", "sample", ".", "id", ",", "'ignore_masks'", ":", "ignore_masks", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.mots_data_loader.MOTSDataLoader.__len__": [[135, 137], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.concat_dataset.SparseDataset.__init__": [[9, 18], ["random.seed", "list", "random.shuffle", "len", "range", "len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "num_samples", ")", ":", "\n", "        ", "assert", "num_samples", "<", "len", "(", "dataset", ")", ",", "\"SparseDataset is only applicable when num_samples < len(dataset)\"", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "num_samples", "=", "num_samples", "\n", "\n", "random", ".", "seed", "(", "42", ")", "\n", "self", ".", "idxes", "=", "list", "(", "range", "(", "len", "(", "dataset", ")", ")", ")", "\n", "random", ".", "shuffle", "(", "self", ".", "idxes", ")", "\n", "self", ".", "idxes", "=", "self", ".", "idxes", "[", ":", "len", "(", "dataset", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.concat_dataset.SparseDataset.__len__": [[19, 21], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.concat_dataset.SparseDataset.__getitem__": [[22, 24], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "dataset", "[", "self", ".", "idxes", "[", "index", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.concat_dataset.ConcatDataset.__init__": [[27, 54], ["enumerate", "abs", "sum", "zip", "int", "int", "sum", "torch.linspace().round().long().tolist", "concat_dataset.ConcatDataset.id_mapping.extend", "concat_dataset.ConcatDataset.samples_per_dataset.append", "len", "round", "len", "concat_dataset.SparseDataset", "math.floor", "float", "range", "sum", "list", "torch.linspace().round().long", "len", "len", "float", "range", "range", "len", "len", "torch.linspace().round", "torch.linspace", "len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "datasets", ",", "total_samples", ",", "weights", "=", "None", ")", ":", "\n", "        ", "if", "weights", "is", "None", ":", "\n", "            ", "weights", "=", "[", "1.", "/", "float", "(", "len", "(", "datasets", ")", ")", "for", "_", "in", "range", "(", "len", "(", "datasets", ")", ")", "]", "\n", "\n", "", "assert", "abs", "(", "sum", "(", "weights", ")", "-", "1.", ")", "<", "1e-6", ",", "\"Sum of weights is {}. Should be 1\"", ".", "format", "(", "sum", "(", "weights", ")", ")", "\n", "\n", "self", ".", "id_mapping", "=", "[", "]", "\n", "self", ".", "samples_per_dataset", "=", "[", "]", "\n", "for", "i", ",", "(", "wt", ",", "ds", ")", "in", "enumerate", "(", "zip", "(", "weights", ",", "datasets", ")", ")", ":", "\n", "            ", "assert", "0.", "<", "wt", "<=", "1.", "\n", "num_samples_ds", "=", "int", "(", "round", "(", "wt", "*", "total_samples", ")", ")", "\n", "if", "num_samples_ds", "<", "len", "(", "ds", ")", ":", "\n", "                ", "ds", "=", "SparseDataset", "(", "ds", ",", "num_samples_ds", ")", "\n", "\n", "", "repetitions", "=", "int", "(", "math", ".", "floor", "(", "num_samples_ds", "/", "float", "(", "len", "(", "ds", ")", ")", ")", ")", "\n", "idxes", "=", "sum", "(", "[", "list", "(", "range", "(", "len", "(", "ds", ")", ")", ")", "for", "_", "in", "range", "(", "repetitions", ")", "]", ",", "[", "]", ")", "\n", "\n", "rem_idxes", "=", "torch", ".", "linspace", "(", "0", ",", "len", "(", "ds", ")", "-", "1", ",", "num_samples_ds", "-", "len", "(", "idxes", ")", ")", ".", "round", "(", ")", ".", "long", "(", ")", ".", "tolist", "(", ")", "\n", "idxes", "+=", "rem_idxes", "\n", "\n", "self", ".", "id_mapping", ".", "extend", "(", "[", "(", "i", ",", "j", ")", "for", "j", "in", "idxes", "]", ")", "\n", "self", ".", "samples_per_dataset", ".", "append", "(", "num_samples_ds", ")", "\n", "\n", "", "self", ".", "datasets", "=", "datasets", "\n", "self", ".", "weights", "=", "weights", "\n", "\n", "assert", "len", "(", "self", ".", "id_mapping", ")", "==", "total_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.concat_dataset.ConcatDataset.__len__": [[55, 57], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "id_mapping", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.concat_dataset.ConcatDataset.__getitem__": [[58, 61], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "ds_idx", ",", "sample_idx", "=", "self", ".", "id_mapping", "[", "index", "]", "\n", "return", "self", ".", "datasets", "[", "ds_idx", "]", "[", "sample_idx", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.CocoPaths.__init__": [[12, 14], ["ValueError"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Static class 'CocoPaths' should not be instantiated\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.CocoPaths.images_dir": [[15, 18], ["paths._get_env_var"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths._get_env_var"], ["", "@", "staticmethod", "\n", "def", "images_dir", "(", ")", ":", "\n", "        ", "return", "_get_env_var", "(", "'COCO_TRAIN_IMAGES_DIR'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.CocoPaths.ids_file": [[19, 22], ["os.path.join", "paths._get_env_var"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths._get_env_var"], ["", "@", "staticmethod", "\n", "def", "ids_file", "(", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "_get_env_var", "(", "'STEMSEG_JSON_ANNOTATIONS_DIR'", ")", ",", "'coco.json'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.YoutubeVISPaths.__init__": [[25, 27], ["ValueError"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Static class 'YoutubeVISPaths' should not be instantiated\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.YoutubeVISPaths.training_base_dir": [[28, 31], ["os.path.join", "paths._get_env_var"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths._get_env_var"], ["", "@", "staticmethod", "\n", "def", "training_base_dir", "(", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "_get_env_var", "(", "'YOUTUBE_VIS_BASE_DIR'", ")", ",", "'train'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.YoutubeVISPaths.val_base_dir": [[32, 35], ["os.path.join", "paths._get_env_var"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths._get_env_var"], ["", "@", "staticmethod", "\n", "def", "val_base_dir", "(", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "_get_env_var", "(", "'YOUTUBE_VIS_BASE_DIR'", ")", ",", "'valid'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.YoutubeVISPaths.train_vds_file": [[36, 39], ["os.path.join", "paths._get_env_var"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths._get_env_var"], ["", "@", "staticmethod", "\n", "def", "train_vds_file", "(", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "_get_env_var", "(", "'STEMSEG_JSON_ANNOTATIONS_DIR'", ")", ",", "'youtube_vis_train.json'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.YoutubeVISPaths.val_vds_file": [[40, 43], ["os.path.join", "paths._get_env_var"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths._get_env_var"], ["", "@", "staticmethod", "\n", "def", "val_vds_file", "(", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "_get_env_var", "(", "'STEMSEG_JSON_ANNOTATIONS_DIR'", ")", ",", "'youtube_vis_val.json'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.DavisUnsupervisedPaths.__init__": [[46, 48], ["ValueError"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Static class 'DavisUnsupervisedPaths' should not be instantiated\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.DavisUnsupervisedPaths.trainval_base_dir": [[49, 52], ["paths._get_env_var"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths._get_env_var"], ["", "@", "staticmethod", "\n", "def", "trainval_base_dir", "(", ")", ":", "\n", "        ", "return", "_get_env_var", "(", "'DAVIS_BASE_DIR'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.DavisUnsupervisedPaths.train_vds_file": [[53, 56], ["os.path.join", "paths._get_env_var"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths._get_env_var"], ["", "@", "staticmethod", "\n", "def", "train_vds_file", "(", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "_get_env_var", "(", "'STEMSEG_JSON_ANNOTATIONS_DIR'", ")", ",", "'davis_train.json'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.DavisUnsupervisedPaths.val_vds_file": [[57, 60], ["os.path.join", "paths._get_env_var"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths._get_env_var"], ["", "@", "staticmethod", "\n", "def", "val_vds_file", "(", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "_get_env_var", "(", "'STEMSEG_JSON_ANNOTATIONS_DIR'", ")", ",", "'davis_val.json'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.KITTIMOTSPaths.__init__": [[63, 65], ["ValueError"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Static class 'KITTIMOTSPaths' should not be instantiated\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.KITTIMOTSPaths.train_images_dir": [[66, 69], ["paths._get_env_var"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths._get_env_var"], ["", "@", "staticmethod", "\n", "def", "train_images_dir", "(", ")", ":", "\n", "        ", "return", "_get_env_var", "(", "'KITTIMOTS_BASE_DIR'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.KITTIMOTSPaths.train_vds_file": [[70, 73], ["os.path.join", "paths._get_env_var"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths._get_env_var"], ["", "@", "staticmethod", "\n", "def", "train_vds_file", "(", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "_get_env_var", "(", "'STEMSEG_JSON_ANNOTATIONS_DIR'", ")", ",", "'kittimots_train.json'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.KITTIMOTSPaths.val_vds_file": [[74, 77], ["os.path.join", "paths._get_env_var"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths._get_env_var"], ["", "@", "staticmethod", "\n", "def", "val_vds_file", "(", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "_get_env_var", "(", "'STEMSEG_JSON_ANNOTATIONS_DIR'", ")", ",", "'kittimots_val.json'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.MapillaryPaths.__init__": [[80, 82], ["ValueError"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Static class 'MapillaryPaths' should not be instantiated\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.MapillaryPaths.images_dir": [[83, 86], ["paths._get_env_var"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths._get_env_var"], ["", "@", "staticmethod", "\n", "def", "images_dir", "(", ")", ":", "\n", "        ", "return", "_get_env_var", "(", "'MAPILLARY_IMAGES_DIR'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.MapillaryPaths.ids_file": [[87, 90], ["os.path.join", "paths._get_env_var"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths._get_env_var"], ["", "@", "staticmethod", "\n", "def", "ids_file", "(", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "_get_env_var", "(", "'STEMSEG_JSON_ANNOTATIONS_DIR'", ")", ",", "'mapillary.json'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.PascalVOCPaths.__init__": [[93, 95], ["ValueError"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Static class 'PascalVOCPaths' should not be instantiated\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.PascalVOCPaths.images_dir": [[96, 99], ["os.path.join", "paths._get_env_var"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths._get_env_var"], ["", "@", "staticmethod", "\n", "def", "images_dir", "(", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "_get_env_var", "(", "'PASCAL_VOC_IMAGES_DIR'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths.PascalVOCPaths.ids_file": [[100, 103], ["os.path.join", "paths._get_env_var"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths._get_env_var"], ["", "@", "staticmethod", "\n", "def", "ids_file", "(", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "_get_env_var", "(", "'STEMSEG_JSON_ANNOTATIONS_DIR'", ")", ",", "'pascal_voc.json'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.paths._get_env_var": [[4, 9], ["os.getenv", "EnvironmentError"], "function", ["None"], ["def", "_get_env_var", "(", "varname", ")", ":", "\n", "    ", "value", "=", "os", ".", "getenv", "(", "varname", ")", "\n", "if", "not", "value", ":", "\n", "        ", "raise", "EnvironmentError", "(", "\"Required environment variable '{}' is not set.\"", ".", "format", "(", "varname", ")", ")", "\n", "", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.iteration_based_batch_sampler.IterationBasedBatchSampler.__init__": [[11, 15], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "batch_sampler", ",", "num_iterations", ",", "start_iter", "=", "0", ")", ":", "\n", "        ", "self", ".", "batch_sampler", "=", "batch_sampler", "\n", "self", ".", "num_iterations", "=", "num_iterations", "\n", "self", ".", "start_iter", "=", "start_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.iteration_based_batch_sampler.IterationBasedBatchSampler.__iter__": [[16, 29], ["hasattr", "iteration_based_batch_sampler.IterationBasedBatchSampler.batch_sampler.sampler.set_epoch"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.distributed_data_sampler.DistributedSampler.set_epoch"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "iteration", "=", "self", ".", "start_iter", "\n", "while", "iteration", "<=", "self", ".", "num_iterations", ":", "\n", "# if the underlying sampler has a set_epoch method, like", "\n", "# DistributedSampler, used for making each process see", "\n", "# a different split of the dataset, then set it", "\n", "            ", "if", "hasattr", "(", "self", ".", "batch_sampler", ".", "sampler", ",", "\"set_epoch\"", ")", ":", "\n", "                ", "self", ".", "batch_sampler", ".", "sampler", ".", "set_epoch", "(", "iteration", ")", "\n", "", "for", "batch", "in", "self", ".", "batch_sampler", ":", "\n", "                ", "iteration", "+=", "1", "\n", "if", "iteration", ">", "self", ".", "num_iterations", ":", "\n", "                    ", "break", "\n", "", "yield", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.iteration_based_batch_sampler.IterationBasedBatchSampler.__len__": [[30, 32], ["None"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_iterations", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_image_dataset_parser.GenericImageSample.__init__": [[23, 30], ["os.path.join", "sample.get", "int"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.timer.Timer.get"], ["    ", "def", "__init__", "(", "self", ",", "base_dir", ",", "sample", ")", ":", "\n", "        ", "self", ".", "height", "=", "sample", "[", "'height'", "]", "\n", "self", ".", "width", "=", "sample", "[", "'width'", "]", "\n", "self", ".", "path", "=", "os", ".", "path", ".", "join", "(", "base_dir", ",", "sample", "[", "'image_path'", "]", ")", "\n", "self", ".", "categories", "=", "[", "int", "(", "cat_id", ")", "for", "cat_id", "in", "sample", "[", "'categories'", "]", "]", "\n", "self", ".", "segmentations", "=", "sample", "[", "'segmentations'", "]", "\n", "self", ".", "ignore", "=", "sample", ".", "get", "(", "\"ignore\"", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_image_dataset_parser.GenericImageSample.mask_areas": [[31, 38], ["pycocotools.mask.area", "seg.encode"], "methods", ["None"], ["", "def", "mask_areas", "(", "self", ")", ":", "\n", "        ", "rle_objs", "=", "[", "{", "\n", "\"size\"", ":", "(", "self", ".", "height", ",", "self", ".", "width", ")", ",", "\n", "\"counts\"", ":", "seg", ".", "encode", "(", "\"utf-8\"", ")", "\n", "}", "for", "seg", "in", "self", ".", "segmentations", "]", "\n", "\n", "return", "[", "masktools", ".", "area", "(", "obj", ")", "for", "obj", "in", "rle_objs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_image_dataset_parser.GenericImageSample.load_image": [[39, 44], ["cv2.imread", "ValueError"], "methods", ["None"], ["", "def", "load_image", "(", "self", ")", ":", "\n", "        ", "im", "=", "cv2", ".", "imread", "(", "self", ".", "path", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "if", "im", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"No image found at path: {}\"", ".", "format", "(", "self", ".", "path", ")", ")", "\n", "", "return", "im", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_image_dataset_parser.GenericImageSample.load_ignore_mask": [[45, 53], ["numpy.ascontiguousarray", "pycocotools.mask.decode().astype", "pycocotools.mask.decode", "generic_image_dataset_parser.GenericImageSample.ignore.encode"], "methods", ["None"], ["", "def", "load_ignore_mask", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "ignore", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "", "return", "np", ".", "ascontiguousarray", "(", "masktools", ".", "decode", "(", "{", "\n", "\"size\"", ":", "(", "self", ".", "height", ",", "self", ".", "width", ")", ",", "\n", "\"counts\"", ":", "self", ".", "ignore", ".", "encode", "(", "'utf-8'", ")", "\n", "}", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_image_dataset_parser.GenericImageSample.load_masks": [[54, 59], ["numpy.ascontiguousarray", "pycocotools.mask.decode().astype", "pycocotools.mask.decode", "seg.encode"], "methods", ["None"], ["", "def", "load_masks", "(", "self", ")", ":", "\n", "        ", "return", "[", "np", ".", "ascontiguousarray", "(", "masktools", ".", "decode", "(", "{", "\n", "\"size\"", ":", "(", "self", ".", "height", ",", "self", ".", "width", ")", ",", "\n", "\"counts\"", ":", "seg", ".", "encode", "(", "'utf-8'", ")", "\n", "}", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "for", "seg", "in", "self", ".", "segmentations", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_image_dataset_parser.GenericImageSample.filter_categories": [[60, 63], ["zip", "zip"], "methods", ["None"], ["", "def", "filter_categories", "(", "self", ",", "cat_ids_to_keep", ")", ":", "\n", "        ", "self", ".", "categories", ",", "self", ".", "segmentations", "=", "zip", "(", "*", "[", "\n", "(", "cat_id", ",", "seg", ")", "for", "cat_id", ",", "seg", "in", "zip", "(", "self", ".", "categories", ",", "self", ".", "segmentations", ")", "if", "cat_id", "in", "cat_ids_to_keep", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_image_dataset_parser.parse_generic_image_dataset": [[9, 20], ["open", "json.load", "int", "generic_image_dataset_parser.GenericImageSample", "meta_info[].items"], "function", ["None"], ["def", "parse_generic_image_dataset", "(", "base_dir", ",", "dataset_json", ")", ":", "\n", "    ", "with", "open", "(", "dataset_json", ",", "'r'", ")", "as", "fh", ":", "\n", "        ", "dataset", "=", "json", ".", "load", "(", "fh", ")", "\n", "\n", "", "meta_info", "=", "dataset", "[", "\"meta\"", "]", "\n", "\n", "# convert instance and category IDs from str to int", "\n", "meta_info", "[", "\"category_labels\"", "]", "=", "{", "int", "(", "k", ")", ":", "v", "for", "k", ",", "v", "in", "meta_info", "[", "\"category_labels\"", "]", ".", "items", "(", ")", "}", "\n", "samples", "=", "[", "GenericImageSample", "(", "base_dir", ",", "sample", ")", "for", "sample", "in", "dataset", "[", "\"images\"", "]", "]", "\n", "\n", "return", "samples", ",", "meta_info", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.__init__": [[19, 71], ["torch.utils.data.Dataset.__init__", "stemseg.data.generic_image_dataset_parser.parse_generic_image_dataset", "map", "list", "stemseg.data.image_to_seq_augmenter.ImageToSeqAugmenter", "stemseg.utils.transforms.BatchImageTransform", "open", "yaml.load", "filter", "stemseg.utils.transforms.ToTorchTensor", "os.path.join", "stemseg.utils.RepoPaths.dataset_meta_info_dir", "yaml.load.items", "yaml.load.items", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.__init__", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_image_dataset_parser.parse_generic_image_dataset", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.utils.constants.RepoPaths.dataset_meta_info_dir"], ["    ", "def", "__init__", "(", "self", ",", "base_dir", ",", "ids_json_file", ",", "category_agnostic", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "samples", ",", "meta_info", "=", "parse_generic_image_dataset", "(", "base_dir", ",", "ids_json_file", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "RepoPaths", ".", "dataset_meta_info_dir", "(", ")", ",", "'coco.yaml'", ")", ",", "'r'", ")", "as", "fh", ":", "\n", "            ", "category_details", "=", "yaml", ".", "load", "(", "fh", ",", "Loader", "=", "yaml", ".", "SafeLoader", ")", "\n", "category_details", "=", "{", "cat", "[", "'id'", "]", ":", "cat", "for", "cat", "in", "category_details", "}", "\n", "\n", "", "if", "category_agnostic", ":", "# davis", "\n", "            ", "cat_ids_to_keep", "=", "[", "cat_id", "for", "cat_id", ",", "attribs", "in", "category_details", ".", "items", "(", ")", "if", "attribs", "[", "'keep_davis'", "]", "]", "\n", "self", ".", "category_id_mapping", "=", "{", "\n", "cat_id", ":", "1", "for", "cat_id", "in", "cat_ids_to_keep", "\n", "}", "\n", "self", ".", "category_labels", "=", "{", "\n", "cat_id", ":", "'object'", "for", "cat_id", "in", "cat_ids_to_keep", "\n", "}", "\n", "\n", "", "else", ":", "# youtube VIS", "\n", "            ", "cat_ids_to_keep", "=", "[", "cat_id", "for", "cat_id", ",", "attribs", "in", "category_details", ".", "items", "(", ")", "if", "attribs", "[", "'keep_ytvis'", "]", "]", "\n", "self", ".", "category_id_mapping", "=", "{", "\n", "cat_id", ":", "category_details", "[", "cat_id", "]", "[", "'id_ytvis'", "]", "for", "cat_id", "in", "cat_ids_to_keep", "\n", "}", "\n", "self", ".", "category_labels", "=", "{", "\n", "cat_id", ":", "category_details", "[", "cat_id", "]", "[", "'label_ytvis'", "]", "for", "cat_id", "in", "cat_ids_to_keep", "\n", "}", "\n", "\n", "", "def", "filter_by_category_id", "(", "sample", ")", ":", "\n", "            ", "instance_idxes_to_keep", "=", "[", "\n", "i", "for", "i", "in", "range", "(", "len", "(", "sample", ".", "segmentations", ")", ")", "if", "sample", ".", "categories", "[", "i", "]", "in", "cat_ids_to_keep", "\n", "]", "\n", "\n", "sample", ".", "segmentations", "=", "[", "sample", ".", "segmentations", "[", "i", "]", "for", "i", "in", "instance_idxes_to_keep", "]", "\n", "sample", ".", "categories", "=", "[", "sample", ".", "categories", "[", "i", "]", "for", "i", "in", "instance_idxes_to_keep", "]", "\n", "\n", "return", "sample", "\n", "\n", "", "self", ".", "samples", "=", "map", "(", "filter_by_category_id", ",", "self", ".", "samples", ")", "\n", "\n", "# remove samples with 0 instances", "\n", "self", ".", "samples", "=", "list", "(", "filter", "(", "lambda", "s", ":", "len", "(", "s", ".", "segmentations", ")", ">", "0", ",", "self", ".", "samples", ")", ")", "\n", "\n", "self", ".", "augmenter", "=", "ImageToSeqAugmenter", "(", "perspective", "=", "True", ",", "affine", "=", "True", ",", "motion_blur", "=", "True", ",", "\n", "rotation_range", "=", "(", "-", "12", ",", "12", ")", ",", "perspective_magnitude", "=", "0.08", ",", "\n", "hue_saturation_range", "=", "(", "-", "5", ",", "5", ")", ",", "brightness_range", "=", "(", "-", "40", ",", "40", ")", ",", "\n", "motion_blur_prob", "=", "0.25", ",", "motion_blur_kernel_sizes", "=", "(", "9", ",", "11", ")", ",", "\n", "translate_range", "=", "(", "-", "0.1", ",", "0.1", ")", ")", "\n", "\n", "self", ".", "num_frames", "=", "cfg", ".", "INPUT", ".", "NUM_FRAMES", "\n", "self", ".", "category_agnostic", "=", "category_agnostic", "\n", "\n", "self", ".", "np_to_tensor", "=", "transforms", ".", "BatchImageTransform", "(", "transforms", ".", "ToTorchTensor", "(", "format", "=", "'CHW'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.__len__": [[72, 74], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.__getitem__": [[75, 142], ["sample.load_image", "sample.load_masks", "coco_data_loader.CocoDataLoader.apply_random_flip", "range", "coco_data_loader.CocoDataLoader.apply_random_sequence_shuffle", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "stemseg.data.common.scale_and_normalize_images", "range", "stemseg.data.common.compute_resize_params", "torch.interpolate", "torch.interpolate", "stemseg.structures.BinaryMaskSequenceList", "seq_instance_masks.tensor().permute.tensor().permute.resize", "seq_instance_masks.tensor().permute.tensor().permute.tensor().permute", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "stemseg.structures.BinaryMask", "coco_data_loader.CocoDataLoader.augmenter", "torch.interpolate.append", "seq_instance_masks.tensor().permute.tensor().permute.append", "seq_invalid_pts_masks.append", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "len", "numpy.zeros", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "seq_instance_masks.tensor().permute.tensor().permute.tensor", "coco_data_loader.CocoDataLoader.np_to_tensor", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_image_dataset_parser.GenericImageSample.load_image", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.generic_image_dataset_parser.GenericImageSample.load_masks", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.apply_random_flip", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.apply_random_sequence_shuffle", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.common.scale_and_normalize_images", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.common.compute_resize_params", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.resize", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor", "home.repos.pwc.inspect_result.sabarim_STEm-Seg.structures.mask.BinaryMaskSequenceList.tensor"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "sample", "=", "self", ".", "samples", "[", "index", "]", "\n", "\n", "image", "=", "sample", ".", "load_image", "(", ")", "\n", "image_height", ",", "image_width", "=", "sample", ".", "height", ",", "sample", ".", "width", "\n", "\n", "instance_masks", "=", "sample", ".", "load_masks", "(", ")", "\n", "\n", "# apply random horizontal flip", "\n", "image", ",", "instance_masks", "=", "self", ".", "apply_random_flip", "(", "image", ",", "instance_masks", ")", "\n", "\n", "# convert masks to BinaryMask type", "\n", "instance_masks", "=", "[", "BinaryMask", "(", "mask", ")", "for", "mask", "in", "instance_masks", "]", "\n", "\n", "# Convert everything to a single element list so that it becomes a one-image 'sequence'", "\n", "seq_images", ",", "seq_instance_masks", ",", "seq_invalid_pts_masks", "=", "[", "image", "]", ",", "[", "instance_masks", "]", ",", "[", "np", ".", "zeros", "(", "(", "image_height", ",", "image_width", ")", ",", "np", ".", "uint8", ")", "]", "\n", "\n", "# add remaining sequence images by augmenting the original image", "\n", "for", "t", "in", "range", "(", "self", ".", "num_frames", "-", "1", ")", ":", "\n", "# get transformed image, instance mask and point validity mask", "\n", "            ", "im_trafo", ",", "instance_masks_trafo", ",", "invalid_pts", "=", "self", ".", "augmenter", "(", "image", ",", "instance_masks", ")", "\n", "\n", "# add everything to the sequence lists", "\n", "seq_images", ".", "append", "(", "im_trafo", ")", "\n", "seq_instance_masks", ".", "append", "(", "instance_masks_trafo", ")", "\n", "seq_invalid_pts_masks", ".", "append", "(", "invalid_pts", ")", "\n", "\n", "# shuffle the elements of the sequence", "\n", "", "seq_images", ",", "seq_instance_masks", ",", "seq_invalid_pts_masks", "=", "self", ".", "apply_random_sequence_shuffle", "(", "\n", "seq_images", ",", "seq_instance_masks", ",", "seq_invalid_pts_masks", ")", "\n", "\n", "# convert images to tensors", "\n", "seq_images", "=", "torch", ".", "stack", "(", "self", ".", "np_to_tensor", "(", "*", "seq_images", ")", ",", "0", ")", ".", "float", "(", ")", "\n", "\n", "# scale and normalize images", "\n", "seq_images", "=", "scale_and_normalize_images", "(", "seq_images", ",", "cfg", ".", "INPUT", ".", "IMAGE_MEAN", ",", "cfg", ".", "INPUT", ".", "IMAGE_STD", ",", "\n", "not", "cfg", ".", "INPUT", ".", "BGR_INPUT", ",", "cfg", ".", "INPUT", ".", "NORMALIZE_TO_UNIT_SCALE", ")", "\n", "\n", "seq_invalid_pts_masks", "=", "[", "torch", ".", "from_numpy", "(", "mask", ")", ".", "float", "(", ")", "for", "mask", "in", "seq_invalid_pts_masks", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "seq_images", ")", ")", ":", "\n", "            ", "invalid_pts", "=", "1.", "-", "seq_invalid_pts_masks", "[", "i", "]", "[", "None", ",", ":", ",", ":", "]", "\n", "seq_images", "[", "i", "]", "=", "seq_images", "[", "i", "]", "*", "invalid_pts", "\n", "\n", "# resize images to the required input size", "\n", "", "new_width", ",", "new_height", ",", "scale_factor", "=", "compute_resize_params", "(", "image", ",", "cfg", ".", "INPUT", ".", "MIN_DIM", ",", "cfg", ".", "INPUT", ".", "MAX_DIM", ")", "\n", "seq_images", "=", "F", ".", "interpolate", "(", "seq_images", ",", "(", "new_height", ",", "new_width", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "# resize masks to the required input size", "\n", "seq_instance_masks", "=", "BinaryMaskSequenceList", "(", "seq_instance_masks", ")", "\n", "seq_instance_masks", "=", "seq_instance_masks", ".", "resize", "(", "(", "new_width", ",", "new_height", ")", ")", "\n", "\n", "# convert masks to torch tensors", "\n", "seq_instance_masks", "=", "seq_instance_masks", ".", "tensor", "(", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "# [N, T, H, W]", "\n", "seq_ignore_masks", "=", "torch", ".", "zeros", "(", "*", "seq_instance_masks", ".", "shape", "[", "1", ":", "]", ",", "dtype", "=", "torch", ".", "uint8", ")", "# [T, H, W]", "\n", "\n", "instance_category_ids", "=", "torch", ".", "tensor", "(", "[", "self", ".", "category_id_mapping", "[", "cat_id", "]", "for", "cat_id", "in", "sample", ".", "categories", "]", ")", "\n", "category_labels", "=", "[", "self", ".", "category_labels", "[", "cat_id", "]", "for", "cat_id", "in", "sample", ".", "categories", "]", "\n", "\n", "# combine everything into a dictionary", "\n", "targets", "=", "{", "\"masks\"", ":", "seq_instance_masks", ",", "\n", "\"category_ids\"", ":", "instance_category_ids", ",", "\n", "\"labels\"", ":", "instance_category_ids", ",", "\n", "'ignore_masks'", ":", "seq_ignore_masks", "}", "\n", "\n", "return", "seq_images", ",", "targets", ",", "(", "image_width", ",", "image_height", ")", ",", "{", "\"category_labels\"", ":", "category_labels", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.apply_random_flip": [[143, 149], ["random.random", "numpy.flip", "numpy.flip"], "methods", ["None"], ["", "def", "apply_random_flip", "(", "self", ",", "image", ",", "instance_masks", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "image", "=", "np", ".", "flip", "(", "image", ",", "axis", "=", "1", ")", "\n", "instance_masks", "=", "[", "np", ".", "flip", "(", "instance_mask", ",", "axis", "=", "1", ")", "for", "instance_mask", "in", "instance_masks", "]", "\n", "\n", "", "return", "image", ",", "instance_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.sabarim_STEm-Seg.data.coco_data_loader.CocoDataLoader.apply_random_sequence_shuffle": [[150, 159], ["list", "random.shuffle", "range"], "methods", ["None"], ["", "def", "apply_random_sequence_shuffle", "(", "self", ",", "images", ",", "instance_masks", ",", "invalid_pt_masks", ")", ":", "\n", "        ", "perm", "=", "list", "(", "range", "(", "self", ".", "num_frames", ")", ")", "\n", "random", ".", "shuffle", "(", "perm", ")", "\n", "\n", "images", "=", "[", "images", "[", "i", "]", "for", "i", "in", "perm", "]", "\n", "instance_masks", "=", "[", "instance_masks", "[", "i", "]", "for", "i", "in", "perm", "]", "\n", "invalid_pt_masks", "=", "[", "invalid_pt_masks", "[", "i", "]", "for", "i", "in", "perm", "]", "\n", "\n", "return", "images", ",", "instance_masks", ",", "invalid_pt_masks", "\n", "", "", ""]]}