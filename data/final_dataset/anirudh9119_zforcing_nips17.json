{"home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.eval_timit.evaluate": [[18, 40], ["model.eval", "model.init_hidden", "eval_timit.evaluate.get_batch"], "function", ["home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.ZForcing.init_hidden"], ["def", "evaluate", "(", "dataset", ",", "model", ",", "split", "=", "'valid'", ")", ":", "\n", "    ", "def", "get_batch", "(", ")", ":", "\n", "        ", "if", "split", "==", "'valid'", ":", "\n", "            ", "return", "dataset", ".", "get_valid_batch", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "dataset", ".", "get_test_batch", "(", ")", "\n", "", "", "model", ".", "eval", "(", ")", "\n", "hidden", "=", "model", ".", "init_hidden", "(", "dataset", ".", "batch_size", ")", "\n", "loss", "=", "[", "]", "\n", "length", "=", "40", "\n", "for", "x", ",", "y", ",", "x_mask", "in", "get_batch", "(", ")", ":", "\n", "        ", "l", "=", "0.", "\n", "for", "i", "in", "range", "(", "0", ",", "x", ".", "shape", "[", "0", "]", ",", "length", ")", ":", "\n", "            ", "x_", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "x", "[", "i", ":", "i", "+", "length", "]", ")", ",", "volatile", "=", "True", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "y_", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "y", "[", "i", ":", "i", "+", "length", "]", ")", ",", "volatile", "=", "True", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "x_mask_", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "x_mask", "[", "i", ":", "i", "+", "length", "]", ")", ",", "volatile", "=", "True", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "# compute all the states for forward and backward", "\n", "fwd_nll", ",", "bwd_nll", ",", "aux_nll", ",", "kld", "=", "model", "(", "x_", ",", "y_", ",", "x_mask_", ",", "hidden", ")", "\n", "l", "+=", "(", "fwd_nll", "+", "kld", ")", ".", "data", "[", "0", "]", "\n", "", "loss", ".", "append", "(", "l", ")", "\n", "", "return", "np", ".", "mean", "(", "np", ".", "asarray", "(", "loss", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.eval_timit.run": [[42, 58], ["click.command", "click.option", "click.option", "numpy.random.RandomState", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "model.ZForcing.load", "load.TimitData", "ZForcing.load.cuda", "eval_timit.evaluate", "print", "eval_timit.evaluate", "print"], "function", ["home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard_tbptt.load", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.train_blizzard.evaluate", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.train_blizzard.evaluate"], ["", "@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "option", "(", "'--model'", ")", "\n", "@", "click", ".", "option", "(", "'--data'", ",", "default", "=", "'./'", ")", "\n", "def", "run", "(", "model", ",", "data", ")", ":", "\n", "    ", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "model", "=", "ZForcing", ".", "load", "(", "model", ")", "\n", "timit", "=", "load", ".", "TimitData", "(", "data", "+", "'timit_raw_batchsize64_seqlen40.npz'", ",", "32", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "val_loss", "=", "evaluate", "(", "timit", ",", "model", ")", "\n", "log_line", "=", "'valid -- nll: %f'", "%", "val_loss", "\n", "print", "(", "log_line", ")", "\n", "test_loss", "=", "evaluate", "(", "timit", ",", "model", ",", "split", "=", "'test'", ")", "\n", "log_line", "=", "'test -- nll: %f'", "%", "test_loss", "\n", "print", "(", "log_line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.TimitData.__init__": [[17, 64], ["numpy.load", "numpy.load", "numpy.pad", "numpy.pad", "numpy.pad", "numpy.pad", "numpy.pad", "numpy.pad", "print", "print", "print", "print", "range", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "int", "numpy.mean", "numpy.mean", "load.TimitData.mask_test[].sum", "load.TimitData.mask_test.sum", "numpy.sum", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard_tbptt.load", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard_tbptt.load"], ["    ", "def", "__init__", "(", "self", ",", "fn", ",", "batch_size", ")", ":", "\n", "        ", "data", "=", "np", ".", "load", "(", "fn", ")", "\n", "\n", "####", "\n", "# IMPORTANT: u_train is the input and x_train is the target.", "\n", "##", "\n", "u_train", ",", "x_train", "=", "data", "[", "'u_train'", "]", ",", "data", "[", "'x_train'", "]", "\n", "u_valid", ",", "x_valid", "=", "data", "[", "'u_valid'", "]", ",", "data", "[", "'x_valid'", "]", "\n", "(", "u_test", ",", "x_test", ",", "mask_test", ")", "=", "data", "[", "'u_test'", "]", ",", "data", "[", "'x_test'", "]", ",", "data", "[", "'mask_test'", "]", "\n", "\n", "# assert u_test.shape[0] == 1680", "\n", "# assert x_test.shape[0] == 1680", "\n", "# assert mask_test.shape[0] == 1680", "\n", "\n", "self", ".", "u_train", "=", "u_train", "\n", "self", ".", "x_train", "=", "x_train", "\n", "self", ".", "u_valid", "=", "u_valid", "\n", "self", ".", "x_valid", "=", "x_valid", "\n", "\n", "# make multiple of batchsize", "\n", "n_test_padded", "=", "(", "(", "u_test", ".", "shape", "[", "0", "]", "//", "batch_size", ")", "+", "1", ")", "*", "batch_size", "\n", "assert", "n_test_padded", ">", "u_test", ".", "shape", "[", "0", "]", "\n", "pad", "=", "n_test_padded", "-", "u_test", ".", "shape", "[", "0", "]", "\n", "u_test", "=", "np", ".", "pad", "(", "u_test", ",", "(", "(", "0", ",", "pad", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "'constant'", ")", "\n", "x_test", "=", "np", ".", "pad", "(", "x_test", ",", "(", "(", "0", ",", "pad", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "'constant'", ")", "\n", "mask_test", "=", "np", ".", "pad", "(", "mask_test", ",", "(", "(", "0", ",", "pad", ")", ",", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "'constant'", ")", "\n", "self", ".", "u_test", "=", "u_test", "\n", "self", ".", "x_test", "=", "x_test", "\n", "self", ".", "mask_test", "=", "mask_test", "\n", "\n", "self", ".", "n_train", "=", "u_train", ".", "shape", "[", "0", "]", "\n", "self", ".", "n_valid", "=", "u_valid", ".", "shape", "[", "0", "]", "\n", "self", ".", "n_test", "=", "u_test", ".", "shape", "[", "0", "]", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n", "print", "(", "\"TRAINING SAMPLES LOADED\"", ",", "self", ".", "u_train", ".", "shape", ")", "\n", "print", "(", "\"TEST SAMPLES LOADED\"", ",", "self", ".", "u_test", ".", "shape", ")", "\n", "print", "(", "\"VALID SAMPLES LOADED\"", ",", "self", ".", "u_valid", ".", "shape", ")", "\n", "print", "(", "\"TEST AVG LEN        \"", ",", "np", ".", "mean", "(", "self", ".", "mask_test", ".", "sum", "(", "axis", "=", "1", ")", ")", "*", "200", ")", "\n", "# test that x and u are correctly shifted", "\n", "assert", "np", ".", "sum", "(", "self", ".", "u_train", "[", ":", ",", "1", ":", "]", "-", "self", ".", "x_train", "[", ":", ",", ":", "-", "1", "]", ")", "==", "0.0", "\n", "assert", "np", ".", "sum", "(", "self", ".", "u_valid", "[", ":", ",", "1", ":", "]", "-", "self", ".", "x_valid", "[", ":", ",", ":", "-", "1", "]", ")", "==", "0.0", "\n", "for", "row", "in", "range", "(", "self", ".", "u_test", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "l", "=", "int", "(", "self", ".", "mask_test", "[", "row", "]", ".", "sum", "(", ")", ")", "\n", "if", "l", ">", "0", ":", "# if l is zero the sequence is fully padded.", "\n", "                ", "assert", "np", ".", "sum", "(", "self", ".", "u_test", "[", "row", ",", "1", ":", "l", "]", "-", "\n", "self", ".", "x_test", "[", "row", ",", ":", "l", "-", "1", "]", ")", "==", "0.0", ",", "row", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.TimitData._iter_data": [[65, 75], ["range", "load.chunk", "len", "numpy.ones", "numpy.ones", "u_batch.transpose", "x_batch.transpose"], "methods", ["home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk"], ["", "", "", "def", "_iter_data", "(", "self", ",", "u", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "# u refers to the input whereas x, to the target.", "\n", "        ", "indices", "=", "range", "(", "len", "(", "u", ")", ")", "\n", "for", "idx", "in", "chunk", "(", "indices", ",", "n", "=", "self", ".", "batch_size", ")", ":", "\n", "            ", "u_batch", ",", "x_batch", "=", "u", "[", "idx", "]", ",", "x", "[", "idx", "]", "\n", "if", "mask", "is", "None", ":", "\n", "                ", "mask_batch", "=", "np", ".", "ones", "(", "(", "x_batch", ".", "shape", "[", "0", "]", ",", "x_batch", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "'float32'", ")", "\n", "", "else", ":", "\n", "                ", "mask_batch", "=", "mask", "[", "idx", "]", "\n", "", "yield", "u_batch", ".", "transpose", "(", "1", ",", "0", ",", "2", ")", ",", "x_batch", ".", "transpose", "(", "1", ",", "0", ",", "2", ")", ",", "mask_batch", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.TimitData.get_train_batch": [[76, 78], ["iter", "load.TimitData._iter_data"], "methods", ["home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.TimitData._iter_data"], ["", "", "def", "get_train_batch", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "_iter_data", "(", "self", ".", "u_train", ",", "self", ".", "x_train", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.TimitData.get_valid_batch": [[79, 81], ["iter", "load.TimitData._iter_data"], "methods", ["home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.TimitData._iter_data"], ["", "def", "get_valid_batch", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "_iter_data", "(", "self", ".", "u_valid", ",", "self", ".", "x_valid", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.TimitData.get_test_batch": [[82, 85], ["iter", "load.TimitData._iter_data"], "methods", ["home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.TimitData._iter_data"], ["", "def", "get_test_batch", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "_iter_data", "(", "self", ".", "u_test", ",", "self", ".", "x_test", ",", "\n", "mask", "=", "self", ".", "mask_test", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.BlizzardIterator.__init__": [[88, 113], ["ValueError", "ValueError", "data.num_examples", "ValueError", "int", "numpy.float", "numpy.float", "int", "numpy.float", "numpy.float", "float", "float"], "methods", ["home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Data.num_examples"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "batch_size", "=", "None", ",", "nbatch", "=", "None", ",", "\n", "start", "=", "0", ",", "end", "=", "None", ",", "shuffle", "=", "False", ",", "infinite_data", "=", "0", ",", "\n", "pseudo_n", "=", "1000000", ")", ":", "\n", "        ", "if", "(", "batch_size", "or", "nbatch", ")", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Either batch_size or nbatch should be given.\"", ")", "\n", "", "if", "(", "batch_size", "and", "nbatch", ")", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Provide either batch_size or nbatch.\"", ")", "\n", "", "self", ".", "infinite_data", "=", "infinite_data", "\n", "if", "not", "infinite_data", ":", "\n", "            ", "self", ".", "start", "=", "start", "\n", "self", ".", "end", "=", "data", ".", "num_examples", "(", ")", "if", "end", "is", "None", "else", "end", "\n", "if", "self", ".", "start", ">=", "self", ".", "end", "or", "self", ".", "start", "<", "0", ":", "\n", "                ", "raise", "ValueError", "(", "\"Got wrong value for start %d.\"", "%", "self", ".", "start", ")", "\n", "", "self", ".", "nexp", "=", "self", ".", "end", "-", "self", ".", "start", "\n", "if", "nbatch", "is", "not", "None", ":", "\n", "                ", "self", ".", "batch_size", "=", "int", "(", "np", ".", "float", "(", "self", ".", "nexp", "/", "float", "(", "nbatch", ")", ")", ")", "\n", "self", ".", "nbatch", "=", "nbatch", "\n", "", "elif", "batch_size", "is", "not", "None", ":", "\n", "                ", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "nbatch", "=", "int", "(", "np", ".", "float", "(", "self", ".", "nexp", "/", "float", "(", "batch_size", ")", ")", ")", "\n", "", "self", ".", "shuffle", "=", "shuffle", "\n", "", "else", ":", "\n", "            ", "self", ".", "pseudo_n", "=", "pseudo_n", "\n", "", "self", ".", "data", "=", "data", "\n", "self", ".", "name", "=", "self", ".", "data", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.BlizzardIterator.__iter__": [[114, 126], ["range", "range", "numpy.ones", "numpy.ones", "load.BlizzardIterator.data.slices", "load.BlizzardIterator.data.slices", "load.BlizzardIterator.data.slices"], "methods", ["home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard.slices", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard.slices", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard.slices"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "infinite_data", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "pseudo_n", ")", ":", "\n", "                ", "yield", "self", ".", "data", ".", "slices", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "start", "=", "self", ".", "start", "\n", "end", "=", "self", ".", "end", "-", "self", ".", "end", "%", "self", ".", "batch_size", "\n", "for", "idx", "in", "range", "(", "start", ",", "end", ",", "self", ".", "batch_size", ")", ":", "\n", "                ", "x_batch", "=", "self", ".", "data", ".", "slices", "(", "idx", ",", "idx", "+", "self", ".", "batch_size", ")", "[", "0", "]", "\n", "y_batch", "=", "self", ".", "data", ".", "slices", "(", "idx", "+", "1", ",", "idx", "+", "self", ".", "batch_size", "+", "1", ")", "[", "0", "]", "\n", "mask_batch", "=", "np", ".", "ones", "(", "(", "x_batch", ".", "shape", "[", "0", "]", ",", "x_batch", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "x_batch", ".", "dtype", ")", "\n", "yield", "x_batch", ",", "y_batch", ",", "mask_batch", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk": [[10, 14], ["range", "len"], "function", ["None"], ["def", "chunk", "(", "sequence", ",", "n", ")", ":", "\n", "    ", "\"\"\" Yield successive n-sized chunks from sequence. \"\"\"", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "sequence", ")", ",", "n", ")", ":", "\n", "        ", "yield", "sequence", "[", "i", ":", "i", "+", "n", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.train_timit.evaluate": [[18, 38], ["model.eval", "model.init_hidden", "train_timit.evaluate.get_batch"], "function", ["home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.ZForcing.init_hidden"], ["def", "evaluate", "(", "dataset", ",", "model", ",", "split", "=", "'valid'", ")", ":", "\n", "    ", "def", "get_batch", "(", ")", ":", "\n", "        ", "if", "split", "==", "'valid'", ":", "\n", "            ", "return", "dataset", ".", "get_valid_batch", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "dataset", ".", "get_test_batch", "(", ")", "\n", "\n", "", "", "model", ".", "eval", "(", ")", "\n", "hidden", "=", "model", ".", "init_hidden", "(", "dataset", ".", "batch_size", ")", "\n", "loss", "=", "[", "]", "\n", "for", "x", ",", "y", ",", "x_mask", "in", "get_batch", "(", ")", ":", "\n", "        ", "x", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "x", ")", ",", "volatile", "=", "True", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "y", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "y", ")", ",", "volatile", "=", "True", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "x_mask", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "x_mask", ")", ",", "volatile", "=", "True", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "# compute all the states for forward and backward", "\n", "fwd_nll", ",", "bwd_nll", ",", "aux_nll", ",", "kld", "=", "model", "(", "x", ",", "y", ",", "x_mask", ",", "hidden", ")", "\n", "loss", ".", "append", "(", "(", "fwd_nll", "+", "kld", ")", ".", "data", "[", "0", "]", ")", "\n", "", "return", "np", ".", "mean", "(", "np", ".", "asarray", "(", "loss", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.train_timit.train": [[40, 176], ["click.command", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "numpy.random.RandomState", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "os.path.join", "os.path.join", "open", "model.ZForcing", "print", "load.TimitData", "print", "model.ZForcing.cuda", "model.ZForcing.init_hidden", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "time.time", "range", "int", "os.path.exists", "os.makedirs", "model.ZForcing.parameters", "model.ZForcing.train", "print", "load.TimitData.get_train_batch", "print", "train_timit.evaluate", "print", "open.write", "train_timit.evaluate", "print", "open.write", "open.flush", "torch.optim.Adam.zero_grad", "torch.autograd.Variable().float().cuda", "torch.autograd.Variable().float().cuda", "torch.autograd.Variable().float().cuda", "model.ZForcing.", "min", "all_loss.backward", "torch.nn.utils.clip_grad_norm", "torch.nn.utils.clip_grad_norm", "torch.nn.utils.clip_grad_norm", "torch.optim.Adam.step", "model.ZForcing.save", "model_id.upper", "min", "max", "numpy.isnan", "numpy.isinf", "model.ZForcing.parameters", "time.time", "time.time", "print", "open.write", "open.flush", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.ZForcing.init_hidden", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.train_blizzard.train", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.TimitData.get_train_batch", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.train_blizzard.evaluate", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.train_blizzard.evaluate", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.ZForcing.save"], ["", "@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "option", "(", "'--expname'", ",", "default", "=", "'timit_logs'", ")", "\n", "@", "click", ".", "option", "(", "'--nlayers'", ",", "default", "=", "1", ")", "\n", "@", "click", ".", "option", "(", "'--seed'", ",", "default", "=", "1234", ")", "\n", "@", "click", ".", "option", "(", "'--num_epochs'", ",", "default", "=", "100", ")", "\n", "@", "click", ".", "option", "(", "'--rnn_dim'", ",", "default", "=", "1024", ")", "\n", "@", "click", ".", "option", "(", "'--data'", ",", "default", "=", "'./'", ")", "\n", "@", "click", ".", "option", "(", "'--bsz'", ",", "default", "=", "32", ")", "\n", "@", "click", ".", "option", "(", "'--lr'", ",", "default", "=", "0.001", ")", "\n", "@", "click", ".", "option", "(", "'--z_dim'", ",", "default", "=", "256", ")", "\n", "@", "click", ".", "option", "(", "'--emb_dim'", ",", "default", "=", "512", ")", "\n", "@", "click", ".", "option", "(", "'--mlp_dim'", ",", "default", "=", "512", ")", "\n", "@", "click", ".", "option", "(", "'--aux_end'", ",", "default", "=", "0.0", ")", "\n", "@", "click", ".", "option", "(", "'--aux_sta'", ",", "default", "=", "0.0", ")", "\n", "@", "click", ".", "option", "(", "'--kla_sta'", ",", "default", "=", "0.2", ")", "\n", "@", "click", ".", "option", "(", "'--bwd'", ",", "default", "=", "0.", ")", "\n", "@", "click", ".", "option", "(", "'--cond_ln'", ",", "is_flag", "=", "True", ")", "\n", "@", "click", ".", "option", "(", "'--z_force'", ",", "is_flag", "=", "True", ")", "\n", "def", "train", "(", "expname", ",", "nlayers", ",", "seed", ",", "num_epochs", ",", "rnn_dim", ",", "data", ",", "bsz", ",", "lr", ",", "z_dim", ",", "\n", "emb_dim", ",", "mlp_dim", ",", "aux_end", ",", "aux_sta", ",", "kla_sta", ",", "bwd", ",", "cond_ln", ",", "z_force", ")", ":", "\n", "    ", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "\n", "log_interval", "=", "10", "\n", "model_id", "=", "'timit_seed{}_cln{}_zf{}_auxsta{}_auxend{}_klasta{}_bwd{}'", ".", "format", "(", "\n", "seed", ",", "int", "(", "cond_ln", ")", ",", "z_force", ",", "aux_sta", ",", "aux_end", ",", "kla_sta", ",", "bwd", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "expname", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "expname", ")", "\n", "", "log_file_name", "=", "os", ".", "path", ".", "join", "(", "expname", ",", "model_id", "+", "'.txt'", ")", "\n", "model_file_name", "=", "os", ".", "path", ".", "join", "(", "expname", ",", "model_id", "+", "'.pt'", ")", "\n", "log_file", "=", "open", "(", "log_file_name", ",", "'w'", ")", "\n", "\n", "model", "=", "ZForcing", "(", "200", ",", "emb_dim", ",", "rnn_dim", ",", "z_dim", ",", "\n", "mlp_dim", ",", "400", ",", "nlayers", "=", "nlayers", ",", "\n", "cond_ln", "=", "cond_ln", ")", "\n", "model", ".", "z_force", "=", "z_force", "\n", "print", "(", "'Loading data..'", ")", "\n", "timit", "=", "load", ".", "TimitData", "(", "data", "+", "'timit_raw_batchsize64_seqlen40.npz'", ",", "bsz", ")", "\n", "print", "(", "'Done.'", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "hidden", "=", "model", ".", "init_hidden", "(", "bsz", ")", "\n", "opt", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "eps", "=", "1e-5", ")", "\n", "\n", "kld_step", "=", "0.00005", "\n", "aux_step", "=", "0.00005", "\n", "kld_weight", "=", "kla_sta", "\n", "aux_weight", "=", "aux_sta", "\n", "nbatches", "=", "timit", ".", "u_train", ".", "shape", "[", "0", "]", "//", "bsz", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "        ", "step", "=", "0", "\n", "old_valid_loss", "=", "np", ".", "inf", "\n", "b_fwd_loss", ",", "b_bwd_loss", ",", "b_kld_loss", ",", "b_aux_loss", ",", "b_all_loss", "=", "(", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", ")", "\n", "model", ".", "train", "(", ")", "\n", "print", "(", "'Epoch {}: ({})'", ".", "format", "(", "epoch", ",", "model_id", ".", "upper", "(", ")", ")", ")", "\n", "for", "x", ",", "y", ",", "x_mask", "in", "timit", ".", "get_train_batch", "(", ")", ":", "\n", "            ", "step", "+=", "1", "\n", "opt", ".", "zero_grad", "(", ")", "\n", "x", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "x", ")", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "y", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "y", ")", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "x_mask", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "x_mask", ")", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "# compute all the states for forward and backward", "\n", "fwd_nll", ",", "bwd_nll", ",", "aux_nll", ",", "kld", "=", "model", "(", "x", ",", "y", ",", "x_mask", ",", "hidden", ")", "\n", "bwd_nll", "=", "(", "aux_weight", ">", "0.", ")", "*", "(", "bwd", "*", "bwd_nll", ")", "\n", "aux_nll", "=", "aux_weight", "*", "aux_nll", "\n", "all_loss", "=", "fwd_nll", "+", "bwd_nll", "+", "aux_nll", "+", "kld_weight", "*", "kld", "\n", "# anneal kld cost", "\n", "kld_weight", "+=", "kld_step", "\n", "kld_weight", "=", "min", "(", "kld_weight", ",", "1.", ")", "\n", "# anneal auxiliary cost", "\n", "if", "aux_sta", "<=", "aux_end", ":", "\n", "                ", "aux_weight", "+=", "aux_step", "\n", "aux_weight", "=", "min", "(", "aux_weight", ",", "aux_end", ")", "\n", "", "else", ":", "\n", "                ", "aux_weight", "-=", "aux_step", "\n", "aux_weight", "=", "max", "(", "aux_weight", ",", "aux_end", ")", "\n", "\n", "", "if", "np", ".", "isnan", "(", "all_loss", ".", "data", "[", "0", "]", ")", "or", "np", ".", "isinf", "(", "all_loss", ".", "data", "[", "0", "]", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "all_loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm", "(", "model", ".", "parameters", "(", ")", ",", "100.", ")", "\n", "opt", ".", "step", "(", ")", "\n", "\n", "b_all_loss", "+=", "all_loss", ".", "data", "[", "0", "]", "\n", "b_fwd_loss", "+=", "fwd_nll", ".", "data", "[", "0", "]", "\n", "b_bwd_loss", "+=", "bwd_nll", ".", "data", "[", "0", "]", "\n", "b_kld_loss", "+=", "kld", ".", "data", "[", "0", "]", "\n", "b_aux_loss", "+=", "aux_nll", ".", "data", "[", "0", "]", "\n", "\n", "if", "step", "%", "log_interval", "==", "0", ":", "\n", "                ", "s", "=", "time", ".", "time", "(", ")", "\n", "log_line", "=", "'epoch: [%d/%d], step: [%d/%d], loss: %f, fwd loss: %f, aux loss: %f, bwd loss: %f, kld: %f, kld weight: %f, aux weight: %.4f, %.2fit/s'", "%", "(", "\n", "epoch", ",", "num_epochs", ",", "step", ",", "nbatches", ",", "\n", "b_all_loss", "/", "log_interval", ",", "\n", "b_fwd_loss", "/", "log_interval", ",", "\n", "b_aux_loss", "/", "log_interval", ",", "\n", "b_bwd_loss", "/", "log_interval", ",", "\n", "b_kld_loss", "/", "log_interval", ",", "\n", "kld_weight", ",", "\n", "aux_weight", ",", "\n", "log_interval", "/", "(", "s", "-", "t", ")", ")", "\n", "b_all_loss", "=", "0.", "\n", "b_fwd_loss", "=", "0.", "\n", "b_bwd_loss", "=", "0.", "\n", "b_aux_loss", "=", "0.", "\n", "b_kld_loss", "=", "0.", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "log_line", ")", "\n", "log_file", ".", "write", "(", "log_line", "+", "'\\n'", ")", "\n", "log_file", ".", "flush", "(", ")", "\n", "\n", "# evaluate per epoch", "\n", "", "", "print", "(", "'--- Epoch finished ----'", ")", "\n", "val_loss", "=", "evaluate", "(", "timit", ",", "model", ")", "\n", "log_line", "=", "'valid -- epoch: %s, nll: %f'", "%", "(", "epoch", ",", "val_loss", ")", "\n", "print", "(", "log_line", ")", "\n", "log_file", ".", "write", "(", "log_line", "+", "'\\n'", ")", "\n", "test_loss", "=", "evaluate", "(", "timit", ",", "model", ",", "split", "=", "'test'", ")", "\n", "log_line", "=", "'test -- epoch: %s, nll: %f'", "%", "(", "epoch", ",", "test_loss", ")", "\n", "print", "(", "log_line", ")", "\n", "log_file", ".", "write", "(", "log_line", "+", "'\\n'", ")", "\n", "log_file", ".", "flush", "(", ")", "\n", "\n", "if", "old_valid_loss", ">", "val_loss", ":", "\n", "            ", "old_valid_loss", "=", "val_loss", "\n", "model", ".", "save", "(", "model_file_name", ")", "\n", "", "else", ":", "\n", "            ", "for", "param_group", "in", "opt", ".", "param_groups", ":", "\n", "                ", "lr", "=", "param_group", "[", "'lr'", "]", "\n", "if", "lr", ">", "0.0001", ":", "\n", "                    ", "lr", "*=", "0.5", "\n", "", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.LayerNorm.__init__": [[46, 51], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard_tbptt.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nb_features", ",", "eps", "=", "1e-5", ")", ":", "\n", "        ", "super", "(", "LayerNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "gain", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ",", "nb_features", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "nb_features", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.LayerNorm.forward": [[52, 62], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "len", "torch.sqrt.expand_as", "torch.sqrt.expand_as", "torch.sqrt.expand_as", "bias.expand_as", "x.size", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.mean.expand_as", "torch.mean.expand_as", "torch.mean.expand_as", "gain.expand_as"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "gain", "=", "None", ",", "bias", "=", "None", ")", ":", "\n", "        ", "assert", "len", "(", "x", ".", "size", "(", ")", ")", "==", "2", "\n", "if", "gain", "is", "None", ":", "\n", "            ", "gain", "=", "self", ".", "gain", "\n", "", "if", "bias", "is", "None", ":", "\n", "            ", "bias", "=", "self", ".", "bias", "\n", "", "mean", "=", "torch", ".", "mean", "(", "x", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "std", "=", "torch", ".", "sqrt", "(", "torch", ".", "var", "(", "x", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "+", "self", ".", "eps", ")", "\n", "z", "=", "(", "x", "-", "mean", ".", "expand_as", "(", "x", ")", ")", "/", "std", ".", "expand_as", "(", "x", ")", "\n", "return", "z", "*", "gain", ".", "expand_as", "(", "z", ")", "+", "bias", ".", "expand_as", "(", "z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.LSTMCell.__init__": [[67, 91], ["torch.Module.__init__", "print", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "model.LSTMCell.init_weights", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "model.LayerNorm", "model.LayerNorm", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard_tbptt.__init__", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.LSTMCell.init_weights"], ["def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "use_layernorm", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Most parts are copied from torch.nn.LSTMCell.\n        \"\"\"", "\n", "\n", "super", "(", "LSTMCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "use_layernorm", "=", "use_layernorm", "\n", "self", ".", "has_bias", "=", "not", "self", ".", "use_layernorm", "\n", "if", "self", ".", "use_layernorm", ":", "\n", "            ", "self", ".", "use_bias", "=", "False", "\n", "", "print", "(", "\"LSTMCell: use_layernorm=%s\"", "%", "use_layernorm", ")", "\n", "self", ".", "weight_ih", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "FloatTensor", "(", "input_size", ",", "4", "*", "hidden_size", ")", ")", "\n", "self", ".", "weight_hh", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "FloatTensor", "(", "hidden_size", ",", "4", "*", "hidden_size", ")", ")", "\n", "if", "self", ".", "use_layernorm", ":", "\n", "            ", "self", ".", "ln_ih", "=", "LayerNorm", "(", "4", "*", "hidden_size", ")", "\n", "self", ".", "ln_hh", "=", "LayerNorm", "(", "4", "*", "hidden_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bias_ih", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "4", "*", "hidden_size", ")", ")", "\n", "self", ".", "bias_hh", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "4", "*", "hidden_size", ")", ")", "\n", "", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.LSTMCell.init_weights": [[92, 102], ["model.LSTMCell.weight_ih.data.uniform_", "torch.init.orthogonal", "torch.init.orthogonal", "torch.init.orthogonal", "numpy.sqrt", "numpy.sqrt", "model.LSTMCell.bias_ih.data.fill_", "model.LSTMCell.bias_hh.data.fill_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Initialize parameters following the way proposed in the paper.\n        \"\"\"", "\n", "stdv", "=", "1.0", "/", "np", ".", "sqrt", "(", "self", ".", "hidden_size", ")", "\n", "self", ".", "weight_ih", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "nn", ".", "init", ".", "orthogonal", "(", "self", ".", "weight_hh", ".", "data", ")", "\n", "if", "self", ".", "has_bias", ":", "\n", "            ", "self", ".", "bias_ih", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "bias_hh", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.LSTMCell.forward": [[103, 128], ["torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.nn._functions.thnn.rnnFusedPointwise.LSTMFused", "torch.nn._functions.thnn.rnnFusedPointwise.LSTMFused", "torch.nn._functions.thnn.rnnFusedPointwise.LSTMFused", "model.LSTMCell.ln_ih", "model.LSTMCell.ln_hh", "torch.nn._functions.thnn.rnnFusedPointwise.LSTMFused.", "torch.nn._functions.thnn.rnnFusedPointwise.LSTMFused."], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input_", ",", "hx", ",", "\n", "gain_ih", "=", "None", ",", "gain_hh", "=", "None", ",", "\n", "bias_ih", "=", "None", ",", "bias_hh", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            input_: A (batch, input_size) tensor containing input\n                features.\n            hx: A tuple (h_0, c_0), which contains the initial hidden\n                and cell state, where the size of both states is\n                (batch, hidden_size).\n        Returns:\n            h_1, c_1: Tensors containing the next hidden and cell state.\n        \"\"\"", "\n", "assert", "input_", ".", "is_cuda", "\n", "h_0", ",", "c_0", "=", "hx", "\n", "igates", "=", "torch", ".", "mm", "(", "input_", ",", "self", ".", "weight_ih", ")", "\n", "hgates", "=", "torch", ".", "mm", "(", "h_0", ",", "self", ".", "weight_hh", ")", "\n", "state", "=", "fusedBackend", ".", "LSTMFused", "(", ")", "\n", "if", "self", ".", "use_layernorm", ":", "\n", "            ", "igates", "=", "self", ".", "ln_ih", "(", "igates", ",", "gain", "=", "gain_ih", ",", "bias", "=", "bias_ih", ")", "\n", "hgates", "=", "self", ".", "ln_hh", "(", "hgates", ",", "gain", "=", "gain_hh", ",", "bias", "=", "bias_hh", ")", "\n", "return", "state", "(", "igates", ",", "hgates", ",", "c_0", ")", "\n", "", "else", ":", "\n", "            ", "return", "state", "(", "igates", ",", "hgates", ",", "c_0", ",", "\n", "self", ".", "bias_ih", ",", "self", ".", "bias_hh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.LSTMCell.__repr__": [[129, 132], ["s.format"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "s", "=", "'{name}({input_size}, {hidden_size})'", "\n", "return", "s", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.LReLU.__init__": [[135, 138], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard_tbptt.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c", "=", "1.", "/", "3", ")", ":", "\n", "        ", "super", "(", "LReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "c", "=", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.LReLU.forward": [[139, 141], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "clamp", "(", "F", ".", "leaky_relu", "(", "x", ",", "self", ".", "c", ")", ",", "-", "3.", ",", "3.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.ZForcing.__init__": [[144, 197], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.init.orthogonal", "torch.init.orthogonal", "torch.init.orthogonal", "model.LSTMCell", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "model.LReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "model.LReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "model.LReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "model.LReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard_tbptt.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inp_dim", ",", "emb_dim", ",", "rnn_dim", ",", "\n", "z_dim", ",", "mlp_dim", ",", "out_dim", ",", "out_type", "=", "\"gaussian\"", ",", "\n", "cond_ln", "=", "False", ",", "nlayers", "=", "1", ",", "z_force", "=", "False", ",", "dropout", "=", "0.", ",", "\n", "use_l2", "=", "False", ",", "drop_grad", "=", "False", ")", ":", "\n", "        ", "super", "(", "ZForcing", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "not", "drop_grad", ",", "\"drop_grad is not supported!\"", "\n", "self", ".", "inp_dim", "=", "inp_dim", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "self", ".", "out_dim", "=", "out_dim", "\n", "self", ".", "rnn_dim", "=", "rnn_dim", "\n", "self", ".", "nlayers", "=", "nlayers", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "out_type", "=", "out_type", "\n", "self", ".", "mlp_dim", "=", "mlp_dim", "\n", "self", ".", "cond_ln", "=", "cond_ln", "\n", "self", ".", "z_force", "=", "z_force", "\n", "self", ".", "use_l2", "=", "use_l2", "\n", "self", ".", "drop_grad", "=", "drop_grad", "\n", "if", "out_type", "==", "'softmax'", "or", "out_type", "==", "'bernoulli'", ":", "\n", "            ", "self", ".", "emb_mod", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Embedding", "(", "inp_dim", ",", "emb_dim", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "emb_mod", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "inp_dim", ",", "emb_dim", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ")", "\n", "", "self", ".", "bwd_mod", "=", "nn", ".", "LSTM", "(", "emb_dim", ",", "rnn_dim", ",", "nlayers", ")", "\n", "nn", ".", "init", ".", "orthogonal", "(", "self", ".", "bwd_mod", ".", "weight_hh_l0", ".", "data", ")", "\n", "self", ".", "fwd_mod", "=", "LSTMCell", "(", "\n", "emb_dim", "if", "cond_ln", "else", "emb_dim", "+", "mlp_dim", ",", "\n", "rnn_dim", ",", "use_layernorm", "=", "cond_ln", ")", "\n", "self", ".", "pri_mod", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "rnn_dim", ",", "mlp_dim", ")", ",", "\n", "LReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "mlp_dim", ",", "z_dim", "*", "2", ")", ")", "\n", "self", ".", "inf_mod", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "rnn_dim", "*", "2", ",", "mlp_dim", ")", ",", "\n", "LReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "mlp_dim", ",", "z_dim", "*", "2", ")", ")", "\n", "if", "cond_ln", ":", "\n", "            ", "self", ".", "gen_mod", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "z_dim", ",", "mlp_dim", ")", ",", "\n", "LReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "mlp_dim", ",", "8", "*", "rnn_dim", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "gen_mod", "=", "nn", ".", "Linear", "(", "z_dim", ",", "mlp_dim", ")", "\n", "", "self", ".", "aux_mod", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "z_dim", "+", "rnn_dim", ",", "mlp_dim", ")", ",", "\n", "LReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "mlp_dim", ",", "2", "*", "rnn_dim", ")", ")", "\n", "self", ".", "fwd_out_mod", "=", "nn", ".", "Linear", "(", "rnn_dim", ",", "out_dim", ")", "\n", "self", ".", "bwd_out_mod", "=", "nn", ".", "Linear", "(", "rnn_dim", ",", "out_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.ZForcing.save": [[198, 216], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "model.ZForcing.state_dict"], "methods", ["home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.ZForcing.save", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.ZForcing.save", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.ZForcing.save", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.ZForcing.save", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.ZForcing.save", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.ZForcing.save", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.ZForcing.save", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.ZForcing.save", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.ZForcing.save"], ["", "def", "save", "(", "self", ",", "filename", ")", ":", "\n", "        ", "state", "=", "{", "\n", "'emb_dim'", ":", "self", ".", "emb_dim", ",", "\n", "'rnn_dim'", ":", "self", ".", "rnn_dim", ",", "\n", "'inp_dim'", ":", "self", ".", "inp_dim", ",", "\n", "'nlayers'", ":", "self", ".", "nlayers", ",", "\n", "'mlp_dim'", ":", "self", ".", "mlp_dim", ",", "\n", "'out_dim'", ":", "self", ".", "out_dim", ",", "\n", "'out_type'", ":", "self", ".", "out_type", ",", "\n", "'cond_ln'", ":", "self", ".", "cond_ln", ",", "\n", "'z_force'", ":", "self", ".", "z_force", ",", "\n", "'use_l2'", ":", "self", ".", "use_l2", ",", "\n", "'z_dim'", ":", "self", ".", "z_dim", ",", "\n", "'dropout'", ":", "self", ".", "dropout", ",", "\n", "'drop_grad'", ":", "self", ".", "drop_grad", ",", "\n", "'state_dict'", ":", "self", ".", "state_dict", "(", ")", "\n", "}", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.ZForcing.load": [[217, 228], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "ZForcing.ZForcing", "ZForcing.load_state_dict", "torch.load.get", "torch.load.get", "torch.load.get", "torch.load.get", "torch.load.get", "torch.load.get"], "methods", ["home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard_tbptt.load", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard_tbptt.load", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard_tbptt.load", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard_tbptt.load", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard_tbptt.load", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard_tbptt.load", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard_tbptt.load", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard_tbptt.load", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard_tbptt.load"], ["", "@", "classmethod", "\n", "def", "load", "(", "cls", ",", "filename", ")", ":", "\n", "        ", "state", "=", "torch", ".", "load", "(", "filename", ")", "\n", "model", "=", "ZForcing", "(", "\n", "state", "[", "'inp_dim'", "]", ",", "state", "[", "'emb_dim'", "]", ",", "state", "[", "'rnn_dim'", "]", ",", "\n", "state", "[", "'z_dim'", "]", ",", "state", "[", "'mlp_dim'", "]", ",", "state", "[", "'out_dim'", "]", ",", "\n", "nlayers", "=", "state", "[", "'nlayers'", "]", ",", "cond_ln", "=", "state", "[", "'cond_ln'", "]", ",", "\n", "out_type", "=", "state", "[", "'out_type'", "]", ",", "z_force", "=", "state", "[", "'z_force'", "]", ",", "\n", "use_l2", "=", "state", ".", "get", "(", "'use_l2'", ",", "False", ")", ",", "drop_grad", "=", "state", ".", "get", "(", "'drop_grad'", ",", "False", ")", ")", "\n", "model", ".", "load_state_dict", "(", "state", "[", "'state_dict'", "]", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.ZForcing.reparametrize": [[229, 234], ["logvar.mul().exp_", "torch.autograd.Variable.mul().add_", "torch.autograd.Variable.mul().add_", "torch.autograd.Variable.mul().add_", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "logvar.mul", "logvar.mul().exp_.data.new().normal_", "torch.autograd.Variable.mul", "torch.autograd.Variable.mul", "torch.autograd.Variable.mul", "logvar.mul().exp_.data.new", "logvar.mul().exp_.size"], "methods", ["None"], ["", "def", "reparametrize", "(", "self", ",", "mu", ",", "logvar", ",", "eps", "=", "None", ")", ":", "\n", "        ", "std", "=", "logvar", ".", "mul", "(", "0.5", ")", ".", "exp_", "(", ")", "\n", "if", "eps", "is", "None", ":", "\n", "            ", "eps", "=", "Variable", "(", "std", ".", "data", ".", "new", "(", "std", ".", "size", "(", ")", ")", ".", "normal_", "(", ")", ")", "\n", "", "return", "eps", ".", "mul", "(", "std", ")", ".", "add_", "(", "mu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.ZForcing.init_hidden": [[235, 239], ["next", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "model.ZForcing.parameters", "weight.new().zero_", "weight.new().zero_", "weight.new", "weight.new"], "methods", ["None"], ["", "def", "init_hidden", "(", "self", ",", "bsz", ")", ":", "\n", "        ", "weight", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "data", "\n", "return", "(", "Variable", "(", "weight", ".", "new", "(", "self", ".", "nlayers", ",", "bsz", ",", "self", ".", "rnn_dim", ")", ".", "zero_", "(", ")", ")", ",", "\n", "Variable", "(", "weight", ".", "new", "(", "self", ".", "nlayers", ",", "bsz", ",", "self", ".", "rnn_dim", ")", ".", "zero_", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.ZForcing.fwd_pass": [[240, 319], ["model.ZForcing.emb_mod", "model.ZForcing.size", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.bernoulli().unsqueeze", "torch.bernoulli().unsqueeze", "torch.bernoulli().unsqueeze", "torch.bernoulli().unsqueeze", "torch.bernoulli().unsqueeze", "torch.bernoulli().unsqueeze", "torch.bernoulli().unsqueeze", "torch.bernoulli().unsqueeze", "torch.bernoulli().unsqueeze", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "model.ZForcing.fwd_out_mod", "next().data.new().normal_", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "model.ZForcing.pri_mod", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "model.ZForcing.gen_mod", "states.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "next().data.new().zero_", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "model.ZForcing.inf_mod", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "model.gaussian_kld", "model.ZForcing.reparametrize", "model.ZForcing.aux_mod", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "b_step.detach", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "model.ZForcing.fwd_mod", "model.ZForcing.fwd_mod", "model.log_prob_gaussian", "model.log_prob_gaussian", "next().data.new", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "model.ZForcing.reparametrize", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.ZForcing.size", "next().data.new", "model.log_prob_gaussian", "model.ZForcing.size", "torch.tanh", "torch.tanh", "torch.tanh", "next", "torch.tanh", "torch.tanh", "torch.tanh", "model.ZForcing.parameters", "next", "model.ZForcing.parameters"], "methods", ["home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.gaussian_kld", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.ZForcing.reparametrize", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.log_prob_gaussian", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.log_prob_gaussian", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.ZForcing.reparametrize", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.log_prob_gaussian"], ["", "def", "fwd_pass", "(", "self", ",", "x_fwd", ",", "hidden", ",", "bwd_states", "=", "None", ",", "z_step", "=", "None", ")", ":", "\n", "        ", "x_fwd", "=", "self", ".", "emb_mod", "(", "x_fwd", ")", "\n", "nsteps", "=", "x_fwd", ".", "size", "(", "0", ")", "\n", "states", "=", "[", "(", "hidden", "[", "0", "]", "[", "0", "]", ",", "hidden", "[", "1", "]", "[", "0", "]", ")", "]", "\n", "klds", ",", "zs", ",", "log_pz", ",", "log_qz", ",", "aux_cs", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "eps", "=", "Variable", "(", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "data", ".", "new", "(", "\n", "nsteps", ",", "x_fwd", ".", "size", "(", "1", ")", ",", "self", ".", "z_dim", ")", ".", "normal_", "(", ")", ")", "\n", "big", "=", "Variable", "(", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "data", ".", "new", "(", "x_fwd", ".", "size", "(", "1", ")", ")", ".", "zero_", "(", ")", ")", "+", "0.5", "\n", "big", "=", "torch", ".", "bernoulli", "(", "big", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "assert", "(", "z_step", "is", "None", ")", "or", "(", "nsteps", "==", "1", ")", "\n", "for", "step", "in", "range", "(", "nsteps", ")", ":", "\n", "            ", "states_step", "=", "states", "[", "step", "]", "\n", "x_step", "=", "x_fwd", "[", "step", "]", "\n", "h_step", ",", "c_step", "=", "states_step", "[", "0", "]", ",", "states_step", "[", "1", "]", "\n", "r_step", "=", "eps", "[", "step", "]", "\n", "\n", "pri_params", "=", "self", ".", "pri_mod", "(", "h_step", ")", "\n", "pri_params", "=", "torch", ".", "clamp", "(", "pri_params", ",", "-", "8.", ",", "8.", ")", "\n", "pri_mu", ",", "pri_logvar", "=", "torch", ".", "chunk", "(", "pri_params", ",", "2", ",", "1", ")", "\n", "\n", "# inference phase", "\n", "if", "bwd_states", "is", "not", "None", ":", "\n", "                ", "b_step", "=", "bwd_states", "[", "step", "]", "\n", "inf_params", "=", "self", ".", "inf_mod", "(", "torch", ".", "cat", "(", "(", "h_step", ",", "b_step", ")", ",", "1", ")", ")", "\n", "inf_params", "=", "torch", ".", "clamp", "(", "inf_params", ",", "-", "8.", ",", "8.", ")", "\n", "inf_mu", ",", "inf_logvar", "=", "torch", ".", "chunk", "(", "inf_params", ",", "2", ",", "1", ")", "\n", "kld", "=", "gaussian_kld", "(", "inf_mu", ",", "inf_logvar", ",", "pri_mu", ",", "pri_logvar", ")", "\n", "z_step", "=", "self", ".", "reparametrize", "(", "inf_mu", ",", "inf_logvar", ",", "eps", "=", "r_step", ")", "\n", "if", "self", ".", "z_force", ":", "\n", "                    ", "h_step_", "=", "h_step", "*", "0.", "\n", "", "else", ":", "\n", "                    ", "h_step_", "=", "h_step", "\n", "", "aux_params", "=", "self", ".", "aux_mod", "(", "torch", ".", "cat", "(", "(", "h_step_", ",", "z_step", ")", ",", "1", ")", ")", "\n", "aux_params", "=", "torch", ".", "clamp", "(", "aux_params", ",", "-", "8.", ",", "8.", ")", "\n", "aux_mu", ",", "aux_logvar", "=", "torch", ".", "chunk", "(", "aux_params", ",", "2", ",", "1", ")", "\n", "# disconnect gradient here", "\n", "b_step_", "=", "b_step", ".", "detach", "(", ")", "\n", "if", "self", ".", "use_l2", ":", "\n", "                    ", "aux_step", "=", "torch", ".", "sum", "(", "(", "b_step_", "-", "F", ".", "tanh", "(", "aux_mu", ")", ")", "**", "2.0", ",", "1", ")", "\n", "", "else", ":", "\n", "                    ", "aux_step", "=", "-", "log_prob_gaussian", "(", "\n", "b_step_", ",", "F", ".", "tanh", "(", "aux_mu", ")", ",", "aux_logvar", ",", "mean", "=", "False", ")", "\n", "# generation phase", "\n", "", "", "else", ":", "\n", "# sample from the prior", "\n", "                ", "if", "z_step", "is", "None", ":", "\n", "                    ", "z_step", "=", "self", ".", "reparametrize", "(", "pri_mu", ",", "pri_logvar", ",", "eps", "=", "r_step", ")", "\n", "", "aux_step", "=", "torch", ".", "sum", "(", "pri_mu", "*", "0.", ",", "-", "1", ")", "\n", "inf_mu", ",", "inf_logvar", "=", "pri_mu", ",", "pri_logvar", "\n", "kld", "=", "aux_step", "\n", "\n", "", "i_step", "=", "self", ".", "gen_mod", "(", "z_step", ")", "\n", "if", "self", ".", "cond_ln", ":", "\n", "                ", "i_step", "=", "torch", ".", "clamp", "(", "i_step", ",", "-", "3", ",", "3", ")", "\n", "gain_hh", ",", "bias_hh", "=", "torch", ".", "chunk", "(", "i_step", ",", "2", ",", "1", ")", "\n", "gain_hh", "=", "1.", "+", "gain_hh", "\n", "h_new", ",", "c_new", "=", "self", ".", "fwd_mod", "(", "x_step", ",", "(", "h_step", ",", "c_step", ")", ",", "\n", "gain_hh", "=", "gain_hh", ",", "bias_hh", "=", "bias_hh", ")", "\n", "", "else", ":", "\n", "                ", "h_new", ",", "c_new", "=", "self", ".", "fwd_mod", "(", "torch", ".", "cat", "(", "(", "i_step", ",", "x_step", ")", ",", "1", ")", ",", "\n", "(", "h_step", ",", "c_step", ")", ")", "\n", "", "states", ".", "append", "(", "(", "h_new", ",", "c_new", ")", ")", "\n", "klds", ".", "append", "(", "kld", ")", "\n", "zs", ".", "append", "(", "z_step", ")", "\n", "aux_cs", ".", "append", "(", "aux_step", ")", "\n", "log_pz", ".", "append", "(", "log_prob_gaussian", "(", "z_step", ",", "pri_mu", ",", "pri_logvar", ")", ")", "\n", "log_qz", ".", "append", "(", "log_prob_gaussian", "(", "z_step", ",", "inf_mu", ",", "inf_logvar", ")", ")", "\n", "\n", "", "klds", "=", "torch", ".", "stack", "(", "klds", ",", "0", ")", "\n", "aux_cs", "=", "torch", ".", "stack", "(", "aux_cs", ",", "0", ")", "\n", "log_pz", "=", "torch", ".", "stack", "(", "log_pz", ",", "0", ")", "\n", "log_qz", "=", "torch", ".", "stack", "(", "log_qz", ",", "0", ")", "\n", "zs", "=", "torch", ".", "stack", "(", "zs", ",", "0", ")", "\n", "\n", "outputs", "=", "[", "s", "[", "0", "]", "for", "s", "in", "states", "[", "1", ":", "]", "]", "\n", "outputs", "=", "torch", ".", "stack", "(", "outputs", ",", "0", ")", "\n", "outputs", "=", "self", ".", "fwd_out_mod", "(", "outputs", ")", "\n", "return", "outputs", ",", "states", "[", "1", ":", "]", ",", "klds", ",", "aux_cs", ",", "zs", ",", "log_pz", ",", "log_qz", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.ZForcing.infer": [[320, 329], ["model.ZForcing.bwd_pass", "model.ZForcing.fwd_pass"], "methods", ["home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.ZForcing.bwd_pass", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.ZForcing.fwd_pass"], ["", "def", "infer", "(", "self", ",", "x", ",", "hidden", ")", ":", "\n", "        ", "'''Infer latent variables for a given batch of sentences ``x''.\n        '''", "\n", "x_", "=", "x", "[", ":", "-", "1", "]", "\n", "y_", "=", "x", "[", "1", ":", "]", "\n", "bwd_states", ",", "bwd_outputs", "=", "self", ".", "bwd_pass", "(", "x_", ",", "y_", ",", "hidden", ")", "\n", "fwd_outputs", ",", "fwd_states", ",", "klds", ",", "aux_nll", ",", "zs", ",", "log_pz", ",", "log_qz", "=", "self", ".", "fwd_pass", "(", "\n", "x_", ",", "hidden", ",", "bwd_states", "=", "bwd_states", ")", "\n", "return", "zs", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.ZForcing.bwd_pass": [[330, 344], ["[].tolist", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "y.index_select", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.ZForcing.emb_mod", "model.ZForcing.bwd_mod", "model.ZForcing.bwd_out_mod", "states.index_select.index_select.index_select", "outputs.index_select.index_select.index_select", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "numpy.arange", "numpy.arange", "y.size"], "methods", ["home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.tolist"], ["", "def", "bwd_pass", "(", "self", ",", "x", ",", "y", ",", "hidden", ")", ":", "\n", "        ", "idx", "=", "np", ".", "arange", "(", "y", ".", "size", "(", "0", ")", ")", "[", ":", ":", "-", "1", "]", ".", "tolist", "(", ")", "\n", "idx", "=", "torch", ".", "LongTensor", "(", "idx", ")", "\n", "idx", "=", "Variable", "(", "idx", ")", ".", "cuda", "(", ")", "\n", "\n", "# invert the targets and revert back", "\n", "x_bwd", "=", "y", ".", "index_select", "(", "0", ",", "idx", ")", "\n", "x_bwd", "=", "torch", ".", "cat", "(", "[", "x_bwd", ",", "x", "[", ":", "1", "]", "]", ",", "0", ")", "\n", "x_bwd", "=", "self", ".", "emb_mod", "(", "x_bwd", ")", "\n", "states", ",", "_", "=", "self", ".", "bwd_mod", "(", "x_bwd", ",", "hidden", ")", "\n", "outputs", "=", "self", ".", "bwd_out_mod", "(", "states", "[", ":", "-", "1", "]", ")", "\n", "states", "=", "states", ".", "index_select", "(", "0", ",", "idx", ")", "\n", "outputs", "=", "outputs", ".", "index_select", "(", "0", ",", "idx", ")", "\n", "return", "states", ",", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.ZForcing.forward": [[345, 379], ["model.ZForcing.bwd_pass", "model.ZForcing.fwd_pass", "x.view.view.size", "x.view.view.size", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "fwd_nll.view.view.mean", "torch.gather().squeeze.mean", "torch.gather().squeeze.mean", "torch.gather().squeeze.mean", "aux_nll.mean", "kld.mean", "model.log_prob_gaussian", "model.log_prob_gaussian", "fwd_outputs.view", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "y.view.view.view", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "fwd_nll.view.view.view", "bwd_outputs.view", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "x.view.view.view", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze.view", "torch.gather().squeeze.view", "torch.gather().squeeze.view", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather"], "methods", ["home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.ZForcing.bwd_pass", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.ZForcing.fwd_pass", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.load.chunk", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.log_prob_gaussian", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.log_prob_gaussian"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "x_mask", ",", "hidden", ",", "return_stats", "=", "False", ")", ":", "\n", "        ", "nsteps", ",", "nbatch", "=", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", "\n", "bwd_states", ",", "bwd_outputs", "=", "self", ".", "bwd_pass", "(", "x", ",", "y", ",", "hidden", ")", "\n", "fwd_outputs", ",", "fwd_states", ",", "klds", ",", "aux_nll", ",", "zs", ",", "log_pz", ",", "log_qz", "=", "self", ".", "fwd_pass", "(", "\n", "x", ",", "hidden", ",", "bwd_states", "=", "bwd_states", ")", "\n", "kld", "=", "(", "klds", "*", "x_mask", ")", ".", "sum", "(", "0", ")", "\n", "log_pz", "=", "(", "log_pz", "*", "x_mask", ")", ".", "sum", "(", "0", ")", "\n", "log_qz", "=", "(", "log_qz", "*", "x_mask", ")", ".", "sum", "(", "0", ")", "\n", "aux_nll", "=", "(", "aux_nll", "*", "x_mask", ")", ".", "sum", "(", "0", ")", "\n", "\n", "if", "self", ".", "out_type", "==", "'gaussian'", ":", "\n", "            ", "out_mu", ",", "out_logvar", "=", "torch", ".", "chunk", "(", "fwd_outputs", ",", "2", ",", "-", "1", ")", "\n", "fwd_nll", "=", "-", "log_prob_gaussian", "(", "y", ",", "out_mu", ",", "out_logvar", ")", "\n", "fwd_nll", "=", "(", "fwd_nll", "*", "x_mask", ")", ".", "sum", "(", "0", ")", "\n", "out_mu", ",", "out_logvar", "=", "torch", ".", "chunk", "(", "bwd_outputs", ",", "2", ",", "-", "1", ")", "\n", "bwd_nll", "=", "-", "log_prob_gaussian", "(", "x", ",", "out_mu", ",", "out_logvar", ")", "\n", "bwd_nll", "=", "(", "bwd_nll", "*", "x_mask", ")", ".", "sum", "(", "0", ")", "\n", "", "elif", "self", ".", "out_type", "==", "'softmax'", ":", "\n", "            ", "fwd_out", "=", "fwd_outputs", ".", "view", "(", "nsteps", "*", "nbatch", ",", "self", ".", "out_dim", ")", "\n", "fwd_out", "=", "F", ".", "log_softmax", "(", "fwd_out", ")", "\n", "y", "=", "y", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "fwd_nll", "=", "torch", ".", "gather", "(", "fwd_out", ",", "1", ",", "y", ")", ".", "squeeze", "(", "1", ")", "\n", "fwd_nll", "=", "fwd_nll", ".", "view", "(", "nsteps", ",", "nbatch", ")", "\n", "fwd_nll", "=", "-", "(", "fwd_nll", "*", "x_mask", ")", ".", "sum", "(", "0", ")", "\n", "bwd_out", "=", "bwd_outputs", ".", "view", "(", "nsteps", "*", "nbatch", ",", "self", ".", "out_dim", ")", "\n", "bwd_out", "=", "F", ".", "log_softmax", "(", "bwd_out", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "bwd_nll", "=", "torch", ".", "gather", "(", "bwd_out", ",", "1", ",", "x", ")", ".", "squeeze", "(", "1", ")", "\n", "bwd_nll", "=", "-", "bwd_nll", ".", "view", "(", "nsteps", ",", "nbatch", ")", "\n", "bwd_nll", "=", "(", "bwd_nll", "*", "x_mask", ")", ".", "sum", "(", "0", ")", "\n", "\n", "", "if", "return_stats", ":", "\n", "            ", "return", "fwd_nll", ",", "bwd_nll", ",", "aux_nll", ",", "kld", ",", "log_pz", ",", "log_qz", "\n", "", "return", "fwd_nll", ".", "mean", "(", ")", ",", "bwd_nll", ".", "mean", "(", ")", ",", "aux_nll", ".", "mean", "(", ")", ",", "kld", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.log_prob_gaussian": [[20, 26], ["torch.sum", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "torch.mean", "math.log", "torch.exp", "torch.exp", "torch.exp"], "function", ["None"], ["def", "log_prob_gaussian", "(", "x", ",", "mu", ",", "log_vars", ",", "mean", "=", "False", ")", ":", "\n", "    ", "lp", "=", "-", "0.5", "*", "math", ".", "log", "(", "2", "*", "math", ".", "pi", ")", "-", "log_vars", "/", "2", "-", "(", "x", "-", "mu", ")", "**", "2", "/", "(", "2", "*", "torch", ".", "exp", "(", "log_vars", ")", ")", "\n", "if", "mean", ":", "\n", "        ", "return", "torch", ".", "mean", "(", "lp", ",", "-", "1", ")", "\n", "", "return", "torch", ".", "sum", "(", "lp", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.log_prob_bernoulli": [[27, 30], ["torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "function", ["None"], ["", "def", "log_prob_bernoulli", "(", "x", ",", "mu", ")", ":", "\n", "    ", "lp", "=", "x", "*", "torch", ".", "log", "(", "mu", "+", "1e-5", ")", "+", "(", "1.", "-", "y", ")", "*", "torch", ".", "log", "(", "1.", "-", "mu", "+", "1e-5", ")", "\n", "return", "lp", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.gaussian_kld": [[32, 43], ["torch.sum", "torch.sum", "torch.sum", "len", "gauss_klds.size", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "function", ["None"], ["", "def", "gaussian_kld", "(", "mu_left", ",", "logvar_left", ",", "mu_right", ",", "logvar_right", ")", ":", "\n", "    ", "\"\"\"\n    Compute KL divergence between a bunch of univariate Gaussian distributions\n    with the given means and log-variances.\n    We do KL(N(mu_left, logvar_left) || N(mu_right, logvar_right)).\n    \"\"\"", "\n", "gauss_klds", "=", "0.5", "*", "(", "logvar_right", "-", "logvar_left", "+", "\n", "(", "torch", ".", "exp", "(", "logvar_left", ")", "/", "torch", ".", "exp", "(", "logvar_right", ")", ")", "+", "\n", "(", "(", "mu_left", "-", "mu_right", ")", "**", "2.0", "/", "torch", ".", "exp", "(", "logvar_right", ")", ")", "-", "1.0", ")", "\n", "assert", "len", "(", "gauss_klds", ".", "size", "(", ")", ")", "==", "2", "\n", "return", "torch", ".", "sum", "(", "gauss_klds", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.SequentialPrepMixin.norm_normalize": [[282, 300], ["range", "len", "len", "numpy.sqrt", "numpy.square", "X[].sum"], "methods", ["None"], ["def", "norm_normalize", "(", "self", ",", "X", ",", "avr_norm", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Unify the norm of each sequence in X\n        Parameters\n        ----------\n        X       : list of lists or ndArrays\n        avr_nom : Scalar\n        \"\"\"", "\n", "if", "avr_norm", "is", "None", ":", "\n", "            ", "avr_norm", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "X", ")", ")", ":", "\n", "                ", "euclidean_norm", "=", "np", ".", "sqrt", "(", "np", ".", "square", "(", "X", "[", "i", "]", ".", "sum", "(", ")", ")", ")", "\n", "X", "[", "i", "]", "/=", "euclidean_norm", "\n", "avr_norm", "+=", "euclidean_norm", "\n", "", "avr_norm", "/=", "len", "(", "X", ")", "\n", "", "else", ":", "\n", "            ", "X", "=", "[", "x", "[", "i", "]", "/", "avr_norm", "for", "x", "in", "X", "]", "\n", "", "return", "X", ",", "avr_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.SequentialPrepMixin.global_normalize": [[301, 323], ["numpy.array().sum", "numpy.sqrt", "numpy.array().sum", "numpy.array().sum", "numpy.array", "numpy.array", "numpy.array", "len", "x.sum"], "methods", ["None"], ["", "def", "global_normalize", "(", "self", ",", "X", ",", "X_mean", "=", "None", ",", "X_std", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Globally normalize X into zero mean and unit variance\n        Parameters\n        ----------\n        X      : list of lists or ndArrays\n        X_mean : Scalar\n        X_std  : Scalar\n        Notes\n        -----\n        Compute varaince using the relation\n        >>> Var(X) = E[X^2] - E[X]^2\n        \"\"\"", "\n", "if", "X_mean", "is", "None", "or", "X_std", "is", "None", ":", "\n", "            ", "X_len", "=", "np", ".", "array", "(", "[", "len", "(", "x", ")", "for", "x", "in", "X", "]", ")", ".", "sum", "(", ")", "\n", "X_mean", "=", "np", ".", "array", "(", "[", "x", ".", "sum", "(", ")", "for", "x", "in", "X", "]", ")", ".", "sum", "(", ")", "/", "X_len", "\n", "X_sqr", "=", "np", ".", "array", "(", "[", "(", "x", "**", "2", ")", ".", "sum", "(", ")", "for", "x", "in", "X", "]", ")", ".", "sum", "(", ")", "/", "X_len", "\n", "X_std", "=", "np", ".", "sqrt", "(", "X_sqr", "-", "X_mean", "**", "2", ")", "\n", "X", "=", "(", "X", "-", "X_mean", ")", "/", "X_std", "\n", "", "else", ":", "\n", "            ", "X", "=", "(", "X", "-", "X_mean", ")", "/", "X_std", "\n", "", "return", "(", "X", ",", "X_mean", ",", "X_std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.SequentialPrepMixin.standardize": [[324, 340], ["numpy.array().max", "numpy.array().min", "numpy.array", "numpy.array", "x.max", "x.min"], "methods", ["None"], ["", "def", "standardize", "(", "self", ",", "X", ",", "X_max", "=", "None", ",", "X_min", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Standardize X such that X \\in [0, 1]\n        Parameters\n        ----------\n        X     : list of lists or ndArrays\n        X_max : Scalar\n        X_min : Scalar\n        \"\"\"", "\n", "if", "X_max", "is", "None", "or", "X_min", "is", "None", ":", "\n", "            ", "X_max", "=", "np", ".", "array", "(", "[", "x", ".", "max", "(", ")", "for", "x", "in", "X", "]", ")", ".", "max", "(", ")", "\n", "X_min", "=", "np", ".", "array", "(", "[", "x", ".", "min", "(", ")", "for", "x", "in", "X", "]", ")", ".", "min", "(", ")", "\n", "X", "=", "(", "X", "-", "X_min", ")", "/", "(", "X_max", "-", "X_min", ")", "\n", "", "else", ":", "\n", "            ", "X", "=", "(", "X", "-", "X_min", ")", "/", "(", "X_max", "-", "X_min", ")", "\n", "", "return", "(", "X", ",", "X_max", ",", "X_min", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.SequentialPrepMixin.numpy_rfft": [[341, 350], ["numpy.array", "numpy.fft.rfft"], "methods", ["home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.SequentialPrepMixin.rfft"], ["", "def", "numpy_rfft", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"\n        Apply real FFT to X (numpy)\n        Parameters\n        ----------\n        X     : list of lists or ndArrays\n        \"\"\"", "\n", "X", "=", "np", ".", "array", "(", "[", "np", ".", "fft", ".", "rfft", "(", "x", ")", "for", "x", "in", "X", "]", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.SequentialPrepMixin.numpy_irfft": [[351, 360], ["numpy.array", "numpy.fft.irfft"], "methods", ["home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.SequentialPrepMixin.irfft"], ["", "def", "numpy_irfft", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"\n        Apply real inverse FFT to X (numpy)\n        Parameters\n        ----------\n        X     : list of lists or ndArrays\n        \"\"\"", "\n", "X", "=", "np", ".", "array", "(", "[", "np", ".", "fft", ".", "irfft", "(", "x", ")", "for", "x", "in", "X", "]", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.SequentialPrepMixin.rfft": [[361, 370], ["numpy.array", "scipy.fftpack.rfft"], "methods", ["home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.SequentialPrepMixin.rfft"], ["", "def", "rfft", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"\n        Apply real FFT to X (scipy)\n        Parameters\n        ----------\n        X     : list of lists or ndArrays\n        \"\"\"", "\n", "X", "=", "np", ".", "array", "(", "[", "scipy", ".", "fftpack", ".", "rfft", "(", "x", ")", "for", "x", "in", "X", "]", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.SequentialPrepMixin.irfft": [[371, 380], ["numpy.array", "scipy.fftpack.irfft"], "methods", ["home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.SequentialPrepMixin.irfft"], ["", "def", "irfft", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"\n        Apply real inverse FFT to X (scipy)\n        Parameters\n        ----------\n        X     : list of lists or ndArrays\n        \"\"\"", "\n", "X", "=", "np", ".", "array", "(", "[", "scipy", ".", "fftpack", ".", "irfft", "(", "x", ")", "for", "x", "in", "X", "]", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.SequentialPrepMixin.stft": [[381, 390], ["numpy.array", "scipy.fft"], "methods", ["None"], ["", "def", "stft", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"\n        Apply short-time Fourier transform to X\n        Parameters\n        ----------\n        X     : list of lists or ndArrays\n        \"\"\"", "\n", "X", "=", "np", ".", "array", "(", "[", "scipy", ".", "fft", "(", "x", ")", "for", "x", "in", "X", "]", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.SequentialPrepMixin.istft": [[391, 400], ["numpy.array", "scipy.real", "scipy.ifft"], "methods", ["None"], ["", "def", "istft", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"\n        Apply short-time Fourier transform to X\n        Parameters\n        ----------\n        X     : list of lists or ndArrays\n        \"\"\"", "\n", "X", "=", "np", ".", "array", "(", "[", "scipy", ".", "real", "(", "scipy", ".", "ifft", "(", "x", ")", ")", "for", "x", "in", "X", "]", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.SequentialPrepMixin.fill_zero1D": [[401, 429], ["numpy.concatenate", "numpy.concatenate", "numpy.zeros", "numpy.concatenate", "numpy.zeros", "numpy.zeros", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard.concatenate", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard.concatenate", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard.concatenate"], ["", "def", "fill_zero1D", "(", "self", ",", "x", ",", "pad_len", "=", "0", ",", "mode", "=", "'righthand'", ")", ":", "\n", "        ", "\"\"\"\n        Given variable lengths sequences,\n        pad zeros w.r.t to the maximum\n        length sequences and create a\n        dense design matrix\n        Parameters\n        ----------\n        X       : list or 1D ndArray\n        pad_len : integer\n            if 0, we consider that output should be\n            a design matrix.\n        mode    : string\n            Strategy to fill-in the zeros\n            'righthand': pad the zeros at the right space\n            'lefthand' : pad the zeros at the left space\n            'random'   : pad the zeros with randomly\n                         chosen left space and right space\n        \"\"\"", "\n", "if", "mode", "==", "'lefthand'", ":", "\n", "            ", "new_x", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "(", "pad_len", ")", ")", ",", "x", "]", ")", "\n", "", "elif", "mode", "==", "'righthand'", ":", "\n", "            ", "new_x", "=", "np", ".", "concatenate", "(", "[", "x", ",", "np", ".", "zeros", "(", "(", "pad_len", ")", ")", "]", ")", "\n", "", "elif", "mode", "==", "'random'", ":", "\n", "            ", "new_x", "=", "np", ".", "concatenate", "(", "\n", "[", "np", ".", "zeros", "(", "(", "pad_len", ")", ")", ",", "x", ",", "np", ".", "zeros", "(", "(", "pad_len", ")", ")", "]", "\n", ")", "\n", "", "return", "new_x", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.SequentialPrepMixin.fill_zero": [[430, 479], ["numpy.array().max", "numpy.zeros", "enumerate", "numpy.zeros.append", "numpy.array", "len", "len", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "len", "numpy.zeros", "numpy.random.randint", "numpy.concatenate", "numpy.zeros", "numpy.concatenate", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard.concatenate", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard.concatenate", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard.concatenate", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard.concatenate", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard.concatenate", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard.concatenate"], ["", "def", "fill_zero", "(", "self", ",", "X", ",", "pad_len", "=", "0", ",", "mode", "=", "'righthand'", ")", ":", "\n", "        ", "\"\"\"\n        Given variable lengths sequences,\n        pad zeros w.r.t to the maximum\n        length sequences and create a\n        dense design matrix\n        Parameters\n        ----------\n        X       : list of ndArrays or lists\n        pad_len : integer\n            if 0, we consider that output should be\n            a design matrix.\n        mode    : string\n            Strategy to fill-in the zeros\n            'righthand': pad the zeros at the right space\n            'lefthand' : pad the zeros at the left space\n            'random'   : pad the zeros with randomly\n                         chosen left space and right space\n        \"\"\"", "\n", "if", "pad_len", "==", "0", ":", "\n", "            ", "X_max", "=", "np", ".", "array", "(", "[", "len", "(", "x", ")", "for", "x", "in", "X", "]", ")", ".", "max", "(", ")", "\n", "new_X", "=", "np", ".", "zeros", "(", "(", "len", "(", "X", ")", ",", "X_max", ")", ")", "\n", "for", "i", ",", "x", "in", "enumerate", "(", "X", ")", ":", "\n", "                ", "free_", "=", "X_max", "-", "len", "(", "x", ")", "\n", "if", "mode", "==", "'lefthand'", ":", "\n", "                    ", "new_x", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "(", "free_", ")", ")", ",", "x", "]", ",", "axis", "=", "1", ")", "\n", "", "elif", "mode", "==", "'righthand'", ":", "\n", "                    ", "new_x", "=", "np", ".", "concatenate", "(", "[", "x", ",", "np", ".", "zeros", "(", "(", "free_", ")", ")", "]", ",", "axis", "=", "1", ")", "\n", "", "elif", "mode", "==", "'random'", ":", "\n", "                    ", "j", "=", "np", ".", "random", ".", "randint", "(", "free_", ")", "\n", "new_x", "=", "np", ".", "concatenate", "(", "\n", "[", "np", ".", "zeros", "(", "(", "j", ")", ")", ",", "x", ",", "np", ".", "zeros", "(", "(", "free_", "-", "j", ")", ")", "]", ",", "\n", "axis", "=", "1", "\n", ")", "\n", "", "new_X", "[", "i", "]", "=", "new_x", "\n", "", "", "else", ":", "\n", "            ", "new_X", "=", "[", "]", "\n", "for", "x", "in", "X", ":", "\n", "                ", "if", "mode", "==", "'lefthand'", ":", "\n", "                    ", "new_x", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "(", "pad_len", ")", ")", ",", "x", "]", ",", "axis", "=", "1", ")", "\n", "", "elif", "mode", "==", "'righthand'", ":", "\n", "                    ", "new_x", "=", "np", ".", "concatenate", "(", "[", "x", ",", "np", ".", "zeros", "(", "(", "pad_len", ")", ")", "]", ",", "axis", "=", "1", ")", "\n", "", "elif", "mode", "==", "'random'", ":", "\n", "                    ", "new_x", "=", "np", ".", "concatenate", "(", "\n", "[", "np", ".", "zeros", "(", "(", "pad_len", ")", ")", ",", "x", ",", "np", ".", "zeros", "(", "(", "pad_len", ")", ")", "]", ",", "\n", "axis", "=", "1", "\n", ")", "\n", "", "new_X", ".", "append", "(", "new_x", ")", "\n", "", "", "return", "new_X", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.SequentialPrepMixin.reverse": [[480, 491], ["new_X.append"], "methods", ["None"], ["", "def", "reverse", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"\n        Reverse each sequence of X\n        Parameters\n        ----------\n        X       : list of ndArrays or lists\n        \"\"\"", "\n", "new_X", "=", "[", "]", "\n", "for", "x", "in", "X", ":", "\n", "            ", "new_X", ".", "append", "(", "x", "[", ":", ":", "-", "1", "]", ")", "\n", "", "return", "new_X", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Data.__init__": [[500, 511], ["blizzard_data.Data.load", "multiprocessing.Queue", "range", "multiprocessing.Process", "processes[].start"], "methods", ["home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard_tbptt.load"], ["def", "__init__", "(", "self", ",", "name", "=", "None", ",", "path", "=", "None", ",", "multi_process", "=", "0", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "data", "=", "self", ".", "load", "(", "path", ")", "\n", "self", ".", "multi_process", "=", "multi_process", "\n", "if", "multi_process", ">", "0", ":", "\n", "            ", "self", ".", "queue", "=", "Queue", "(", "2", "**", "15", ")", "\n", "processes", "=", "[", "None", "]", "*", "multi_process", "\n", "for", "mid", "in", "range", "(", "multi_process", ")", ":", "\n", "                ", "processes", "[", "mid", "]", "=", "Process", "(", "target", "=", "self", ".", "multi_process_slices", ",", "\n", "args", "=", "(", "mid", ",", ")", ")", "\n", "processes", "[", "mid", "]", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Data.multi_process_slices": [[512, 515], ["NotImplementedError", "str", "type"], "methods", ["None"], ["", "", "", "def", "multi_process_slices", "(", "self", ",", "mid", "=", "-", "1", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "str", "(", "type", "(", "self", ")", ")", "+", "\" does not implement Data.multi_process_slices.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Data.load": [[516, 518], ["numpy.load"], "methods", ["home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard_tbptt.load"], ["", "def", "load", "(", "self", ",", "path", ")", ":", "\n", "        ", "return", "np", ".", "load", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Data.slices": [[519, 522], ["NotImplementedError", "str", "type"], "methods", ["None"], ["", "def", "slices", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "str", "(", "type", "(", "self", ")", ")", "+", "\" does not implement Data.slices.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Data.num_examples": [[523, 525], ["max"], "methods", ["None"], ["", "def", "num_examples", "(", "self", ")", ":", "\n", "        ", "return", "max", "(", "mat", ".", "shape", "[", "0", "]", "for", "mat", "in", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Data.theano_vars": [[526, 529], ["NotImplementedError", "str", "type"], "methods", ["None"], ["", "def", "theano_vars", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "str", "(", "type", "(", "self", ")", ")", "+", "\" does not implement Data.theano_vars.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.TemporalSeries.slices": [[540, 543], ["mat[].swapaxes"], "methods", ["None"], ["def", "slices", "(", "self", ",", "start", ",", "end", ")", ":", "\n", "        ", "return", "(", "mat", "[", "start", ":", "end", "]", ".", "swapaxes", "(", "0", ",", "1", ")", "\n", "for", "mat", "in", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.TemporalSeries.create_mask": [[544, 551], ["max", "numpy.zeros", "enumerate", "len", "len"], "methods", ["None"], ["", "def", "create_mask", "(", "self", ",", "batch", ")", ":", "\n", "        ", "samples_len", "=", "[", "len", "(", "sample", ")", "for", "sample", "in", "batch", "]", "\n", "max_sample_len", "=", "max", "(", "samples_len", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "max_sample_len", ",", "len", "(", "batch", ")", ")", ",", "dtype", "=", "batch", "[", "0", "]", ".", "dtype", ")", "\n", "for", "i", ",", "sample_len", "in", "enumerate", "(", "samples_len", ")", ":", "\n", "            ", "mask", "[", ":", "sample_len", ",", "i", "]", "=", "1.", "\n", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.TemporalSeries.zero_pad": [[552, 559], ["max", "numpy.zeros", "enumerate", "numpy.zeros.swapaxes", "len", "len", "len"], "methods", ["None"], ["", "def", "zero_pad", "(", "self", ",", "batch", ")", ":", "\n", "        ", "max_sample_len", "=", "max", "(", "len", "(", "sample", ")", "for", "sample", "in", "batch", ")", "\n", "rval", "=", "np", ".", "zeros", "(", "(", "len", "(", "batch", ")", ",", "max_sample_len", ",", "batch", "[", "0", "]", ".", "shape", "[", "-", "1", "]", ")", ",", "\n", "dtype", "=", "batch", "[", "0", "]", ".", "dtype", ")", "\n", "for", "i", ",", "sample", "in", "enumerate", "(", "batch", ")", ":", "\n", "            ", "rval", "[", "i", ",", ":", "len", "(", "sample", ")", "]", "=", "sample", "\n", "", "return", "rval", ".", "swapaxes", "(", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.TemporalSeries.create_mask_and_zero_pad": [[560, 576], ["max", "numpy.zeros", "enumerate", "len", "numpy.zeros", "numpy.zeros", "zip", "len", "len", "len"], "methods", ["None"], ["", "def", "create_mask_and_zero_pad", "(", "self", ",", "batch", ")", ":", "\n", "        ", "samples_len", "=", "[", "len", "(", "sample", ")", "for", "sample", "in", "batch", "]", "\n", "max_sample_len", "=", "max", "(", "samples_len", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "max_sample_len", ",", "len", "(", "batch", ")", ")", ",", "dtype", "=", "batch", "[", "0", "]", ".", "dtype", ")", "\n", "if", "batch", "[", "0", "]", ".", "ndim", "==", "1", ":", "\n", "            ", "rval", "=", "np", ".", "zeros", "(", "(", "max_sample_len", ",", "len", "(", "batch", ")", ")", ",", "dtype", "=", "batch", "[", "0", "]", ".", "dtype", ")", "\n", "", "else", ":", "\n", "            ", "rval", "=", "np", ".", "zeros", "(", "(", "max_sample_len", ",", "len", "(", "batch", ")", ",", "batch", "[", "0", "]", ".", "shape", "[", "1", "]", ")", ",", "\n", "dtype", "=", "batch", "[", "0", "]", ".", "dtype", ")", "\n", "", "for", "i", ",", "(", "sample", ",", "sample_len", ")", "in", "enumerate", "(", "zip", "(", "batch", ",", "samples_len", ")", ")", ":", "\n", "            ", "mask", "[", ":", "sample_len", ",", "i", "]", "=", "1.", "\n", "if", "batch", "[", "0", "]", ".", "ndim", "==", "1", ":", "\n", "                ", "rval", "[", ":", "sample_len", ",", "i", "]", "=", "sample", "\n", "", "else", ":", "\n", "                ", "rval", "[", ":", "sample_len", ",", "i", ",", ":", "]", "=", "sample", "\n", "", "", "return", "rval", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard.__init__": [[585, 621], ["blizzard_data.Data.__init__", "numpy.maximum().astype", "numpy.mod", "blizzard_data.is_power2", "ValueError", "numpy.maximum", "scipy.signal.hann"], "methods", ["home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard_tbptt.__init__", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.is_power2"], ["def", "__init__", "(", "self", ",", "\n", "X_mean", "=", "None", ",", "\n", "X_std", "=", "None", ",", "\n", "shuffle", "=", "0", ",", "\n", "seq_len", "=", "32000", ",", "\n", "use_window", "=", "0", ",", "\n", "use_spec", "=", "0", ",", "\n", "frame_size", "=", "200", ",", "\n", "overlap", "=", "0", ",", "\n", "file_name", "=", "\"full_blizzard\"", ",", "\n", "**", "kwargs", ")", ":", "\n", "\n", "        ", "self", ".", "X_mean", "=", "X_mean", "\n", "self", ".", "X_std", "=", "X_std", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "seq_len", "=", "seq_len", "\n", "self", ".", "use_window", "=", "use_window", "\n", "self", ".", "use_spec", "=", "use_spec", "\n", "self", ".", "frame_size", "=", "frame_size", "\n", "self", ".", "file_name", "=", "file_name", "\n", "self", ".", "overlap", "=", "overlap", "\n", "\n", "if", "self", ".", "use_window", "or", "self", ".", "use_spec", ":", "\n", "            ", "if", "self", ".", "use_spec", ":", "\n", "                ", "if", "not", "is_power2", "(", "self", ".", "frame_size", ")", ":", "\n", "                    ", "raise", "ValueError", "(", "\"Provide a number which is power of 2,\\\n                                      for fast speed of DFT.\"", ")", "\n", "\n", "", "", "if", "np", ".", "mod", "(", "self", ".", "frame_size", ",", "2", ")", "==", "0", ":", "\n", "                ", "self", ".", "overlap", "=", "self", ".", "frame_size", "/", "2", "\n", "", "else", ":", "\n", "                ", "self", ".", "overlap", "=", "(", "self", ".", "frame_size", "-", "1", ")", "/", "2", "\n", "\n", "", "self", ".", "window", "=", "np", ".", "maximum", "(", "scipy", ".", "signal", ".", "hann", "(", "self", ".", "frame_size", ")", "[", "None", ",", ":", "]", ",", "1e-4", ")", ".", "astype", "(", "theano", ".", "config", ".", "floatX", ")", "\n", "\n", "", "super", "(", "Blizzard", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard.load": [[622, 658], ["blizzard_data.fetch_blizzard", "numpy.int", "range", "numpy.sqrt", "numpy.savez", "numpy.ceil", "min", "print", "len", "X[].mean", "len", "float"], "methods", ["home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.fetch_blizzard"], ["", "def", "load", "(", "self", ",", "data_path", ")", ":", "\n", "\n", "        ", "X", "=", "fetch_blizzard", "(", "data_path", ",", "self", ".", "shuffle", ",", "self", ".", "seq_len", ",", "self", ".", "file_name", "+", "'.h5'", ")", "\n", "\n", "if", "(", "self", ".", "X_mean", "is", "None", "or", "self", ".", "X_std", "is", "None", ")", "and", "not", "self", ".", "use_spec", ":", "\n", "            ", "prev_mean", "=", "None", "\n", "prev_var", "=", "None", "\n", "n_seen", "=", "0", "\n", "n_inter", "=", "10000", "\n", "range_end", "=", "np", ".", "int", "(", "np", ".", "ceil", "(", "len", "(", "X", ")", "/", "float", "(", "n_inter", ")", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "range_end", ")", ":", "\n", "                ", "n_seen", "+=", "1", "\n", "i_start", "=", "i", "*", "n_inter", "\n", "i_end", "=", "min", "(", "(", "i", "+", "1", ")", "*", "n_inter", ",", "len", "(", "X", ")", ")", "\n", "\n", "if", "prev_mean", "is", "None", ":", "\n", "                    ", "prev_mean", "=", "X", "[", "i_start", ":", "i_end", "]", ".", "mean", "(", ")", "\n", "prev_var", "=", "0.", "\n", "", "else", ":", "\n", "                    ", "curr_mean", "=", "prev_mean", "+", "(", "X", "[", "i_start", ":", "i_end", "]", "-", "prev_mean", ")", ".", "mean", "(", ")", "/", "n_seen", "\n", "curr_var", "=", "prev_var", "+", "(", "(", "X", "[", "i_start", ":", "i_end", "]", "-", "prev_mean", ")", "*", "\n", "(", "X", "[", "i_start", ":", "i_end", "]", "-", "curr_mean", ")", ")", ".", "mean", "(", ")", "\n", "prev_mean", "=", "curr_mean", "\n", "prev_var", "=", "curr_var", "\n", "\n", "", "print", "(", "\"[%d / %d]\"", "%", "(", "i", "+", "1", ",", "range_end", ")", ")", "\n", "\n", "", "save_file_name", "=", "self", ".", "file_name", "+", "'_normal.npz'", "\n", "self", ".", "X_mean", "=", "prev_mean", "\n", "self", ".", "X_std", "=", "np", ".", "sqrt", "(", "prev_var", "/", "n_seen", ")", "\n", "np", ".", "savez", "(", "data_path", "+", "save_file_name", ",", "X_mean", "=", "self", ".", "X_mean", ",", "X_std", "=", "self", ".", "X_std", ")", "\n", "\n", "", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard.theano_vars": [[659, 661], ["theano.tensor3", "theano.tensor3"], "methods", ["None"], ["", "def", "theano_vars", "(", "self", ")", ":", "\n", "        ", "return", "T", ".", "tensor3", "(", "'x'", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard.test_theano_vars": [[662, 664], ["theano.matrix", "theano.matrix"], "methods", ["None"], ["", "def", "test_theano_vars", "(", "self", ")", ":", "\n", "        ", "return", "T", ".", "matrix", "(", "'x'", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard.slices": [[665, 684], ["numpy.array", "numpy.asarray.transpose", "blizzard_data.totuple", "blizzard_data.Blizzard.apply_fft", "blizzard_data.Blizzard.log_magnitude", "blizzard_data.Blizzard.concatenate", "blizzard_data.Blizzard.apply_window", "numpy.asarray", "blizzard_data.segment_axis"], "methods", ["home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.totuple", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard.apply_fft", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard.log_magnitude", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard.concatenate", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard.apply_window", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.segment_axis"], ["", "def", "slices", "(", "self", ",", "start", ",", "end", ")", ":", "\n", "\n", "        ", "batch", "=", "np", ".", "array", "(", "self", ".", "data", "[", "start", ":", "end", "]", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", "\n", "\n", "if", "self", ".", "use_spec", ":", "\n", "            ", "batch", "=", "self", ".", "apply_fft", "(", "batch", ")", "\n", "batch", "=", "self", ".", "log_magnitude", "(", "batch", ")", "\n", "batch", "=", "self", ".", "concatenate", "(", "batch", ")", "\n", "", "else", ":", "\n", "            ", "batch", "-=", "self", ".", "X_mean", "\n", "batch", "/=", "self", ".", "X_std", "\n", "if", "self", ".", "use_window", ":", "\n", "                ", "batch", "=", "self", ".", "apply_window", "(", "batch", ")", "\n", "", "else", ":", "\n", "                ", "batch", "=", "np", ".", "asarray", "(", "[", "segment_axis", "(", "x", ",", "self", ".", "frame_size", ",", "0", ")", "for", "x", "in", "batch", "]", ")", "\n", "\n", "", "", "batch", "=", "batch", ".", "transpose", "(", "1", ",", "0", ",", "2", ")", "\n", "\n", "return", "totuple", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard.apply_window": [[685, 692], ["numpy.array", "blizzard_data.segment_axis"], "methods", ["home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.segment_axis"], ["", "def", "apply_window", "(", "self", ",", "batch", ")", ":", "\n", "\n", "        ", "batch", "=", "np", ".", "array", "(", "[", "self", ".", "window", "*", "segment_axis", "(", "x", ",", "self", ".", "frame_size", ",", "\n", "self", ".", "overlap", ",", "end", "=", "'pad'", ")", "\n", "for", "x", "in", "batch", "]", ")", "\n", "\n", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard.apply_fft": [[693, 701], ["numpy.array", "blizzard_data.Blizzard.numpy_rfft", "blizzard_data.segment_axis"], "methods", ["home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.SequentialPrepMixin.numpy_rfft", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.segment_axis"], ["", "def", "apply_fft", "(", "self", ",", "batch", ")", ":", "\n", "\n", "        ", "batch", "=", "np", ".", "array", "(", "[", "self", ".", "numpy_rfft", "(", "self", ".", "window", "*", "\n", "segment_axis", "(", "x", ",", "self", ".", "frame_size", ",", "\n", "self", ".", "overlap", ",", "end", "=", "'pad'", ")", ")", "\n", "for", "x", "in", "batch", "]", ")", "\n", "\n", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard.apply_ifft": [[702, 707], ["numpy.array", "blizzard_data.Blizzard.numpy_irfft"], "methods", ["home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.SequentialPrepMixin.numpy_irfft"], ["", "def", "apply_ifft", "(", "self", ",", "batch", ")", ":", "\n", "\n", "        ", "batch", "=", "np", ".", "array", "(", "[", "self", ".", "numpy_irfft", "(", "example", ")", "for", "example", "in", "batch", "]", ")", "\n", "\n", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard.log_magnitude": [[708, 728], ["batch.reshape", "blizzard_data.R2P", "numpy.log10", "blizzard_data.P2R", "P2R.reshape"], "methods", ["home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.R2P", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.P2R"], ["", "def", "log_magnitude", "(", "self", ",", "batch", ")", ":", "\n", "\n", "        ", "batch_shape", "=", "batch", ".", "shape", "\n", "batch_reshaped", "=", "batch", ".", "reshape", "(", "(", "batch_shape", "[", "0", "]", "*", "\n", "batch_shape", "[", "1", "]", ",", "\n", "batch_shape", "[", "2", "]", ")", ")", "\n", "\n", "# Transform into polar domain (magnitude & phase)", "\n", "mag", ",", "phase", "=", "R2P", "(", "batch_reshaped", ")", "\n", "log_mag", "=", "np", ".", "log10", "(", "mag", "+", "1.", ")", "\n", "\n", "# Transform back into complex domain (real & imag)", "\n", "batch_normalized", "=", "P2R", "(", "log_mag", ",", "phase", ")", "\n", "\n", "#batch_normalized = batch_reshaped * log_mag / mag", "\n", "new_batch", "=", "batch_normalized", ".", "reshape", "(", "(", "batch_shape", "[", "0", "]", ",", "\n", "batch_shape", "[", "1", "]", ",", "\n", "batch_shape", "[", "2", "]", ")", ")", "\n", "\n", "return", "new_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard.pow_magnitude": [[729, 749], ["batch.reshape", "blizzard_data.R2P", "blizzard_data.P2R", "P2R.reshape"], "methods", ["home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.R2P", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.P2R"], ["", "def", "pow_magnitude", "(", "self", ",", "batch", ")", ":", "\n", "\n", "        ", "batch_shape", "=", "batch", ".", "shape", "\n", "batch_reshaped", "=", "batch", ".", "reshape", "(", "(", "batch_shape", "[", "0", "]", "*", "\n", "batch_shape", "[", "1", "]", ",", "\n", "batch_shape", "[", "2", "]", ")", ")", "\n", "\n", "# Transform into polar domain (magnitude & phase)", "\n", "log_mag", ",", "phase", "=", "R2P", "(", "batch_reshaped", ")", "\n", "mag", "=", "10", "**", "log_mag", "-", "1.", "\n", "\n", "# Transform back into complex domain (real & imag)", "\n", "batch_unnormalized", "=", "P2R", "(", "mag", ",", "phase", ")", "\n", "\n", "#batch_unnormalized = batch_reshaped * mag / log_mag", "\n", "new_batch", "=", "batch_unnormalized", ".", "reshape", "(", "(", "batch_shape", "[", "0", "]", ",", "\n", "batch_shape", "[", "1", "]", ",", "\n", "batch_shape", "[", "2", "]", ")", ")", "\n", "\n", "return", "new_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard.concatenate": [[750, 763], ["batch.reshape", "blizzard_data.complex_to_real", "complex_to_real.reshape", "new_batch.astype.astype.astype"], "methods", ["home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.complex_to_real"], ["", "def", "concatenate", "(", "self", ",", "batch", ")", ":", "\n", "\n", "        ", "batch_shape", "=", "batch", ".", "shape", "\n", "batch_reshaped", "=", "batch", ".", "reshape", "(", "(", "batch_shape", "[", "0", "]", "*", "\n", "batch_shape", "[", "1", "]", ",", "\n", "batch_shape", "[", "2", "]", ")", ")", "\n", "batch_concatenated", "=", "complex_to_real", "(", "batch_reshaped", ")", "\n", "new_batch", "=", "batch_concatenated", ".", "reshape", "(", "(", "batch_shape", "[", "0", "]", ",", "\n", "batch_shape", "[", "1", "]", ",", "\n", "batch_concatenated", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "new_batch", "=", "new_batch", ".", "astype", "(", "theano", ".", "config", ".", "floatX", ")", "\n", "\n", "return", "new_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard_tbptt.__init__": [[772, 783], ["blizzard_data.Blizzard.__init__"], "methods", ["home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard_tbptt.__init__"], ["def", "__init__", "(", "self", ",", "\n", "batch_size", "=", "100", ",", "\n", "file_name", "=", "'blizzard_tbptt'", ",", "\n", "range_start", "=", "0", ",", "\n", "range_end", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "\n", "        ", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "range_start", "=", "range_start", "\n", "self", ".", "range_end", "=", "range_end", "\n", "super", "(", "Blizzard_tbptt", ",", "self", ")", ".", "__init__", "(", "file_name", "=", "file_name", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard_tbptt.load": [[784, 826], ["blizzard_data.fetch_blizzard_tbptt", "range", "numpy.sqrt", "numpy.savez", "numpy.int", "numpy.int", "min", "print", "numpy.ceil", "numpy.ceil", "len", "X[].mean", "float", "len", "float"], "methods", ["home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.fetch_blizzard_tbptt"], ["", "def", "load", "(", "self", ",", "data_path", ")", ":", "\n", "\n", "        ", "X", "=", "fetch_blizzard_tbptt", "(", "data_path", ",", "self", ".", "seq_len", ",", "self", ".", "batch_size", ",", "\n", "file_name", "=", "self", ".", "file_name", "+", "'.h5'", ")", "\n", "\n", "if", "(", "self", ".", "X_mean", "is", "None", "or", "self", ".", "X_std", "is", "None", ")", "and", "not", "self", ".", "use_spec", ":", "\n", "            ", "prev_mean", "=", "None", "\n", "prev_var", "=", "None", "\n", "n_seen", "=", "0", "\n", "n_inter", "=", "10000", "\n", "range_start", "=", "self", ".", "range_start", "\n", "\n", "if", "self", ".", "range_end", "is", "not", "None", ":", "\n", "                ", "range_end", "=", "np", ".", "int", "(", "np", ".", "ceil", "(", "self", ".", "range_end", "/", "float", "(", "n_inter", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "range_end", "=", "np", ".", "int", "(", "np", ".", "ceil", "(", "len", "(", "X", ")", "/", "float", "(", "n_inter", ")", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "range_start", ",", "range_end", ")", ":", "\n", "                ", "n_seen", "+=", "1", "\n", "i_start", "=", "i", "*", "n_inter", "\n", "i_end", "=", "min", "(", "(", "i", "+", "1", ")", "*", "n_inter", ",", "len", "(", "X", ")", ")", "\n", "\n", "if", "prev_mean", "is", "None", ":", "\n", "                    ", "prev_mean", "=", "X", "[", "i_start", ":", "i_end", "]", ".", "mean", "(", ")", "\n", "prev_var", "=", "0.", "\n", "", "else", ":", "\n", "                    ", "curr_mean", "=", "prev_mean", "+", "(", "X", "[", "i_start", ":", "i_end", "]", "-", "prev_mean", ")", ".", "mean", "(", ")", "/", "n_seen", "\n", "curr_var", "=", "prev_var", "+", "(", "(", "X", "[", "i_start", ":", "i_end", "]", "-", "prev_mean", ")", "*", "(", "X", "[", "i_start", ":", "i_end", "]", "-", "curr_mean", ")", ")", ".", "mean", "(", ")", "\n", "prev_mean", "=", "curr_mean", "\n", "prev_var", "=", "curr_var", "\n", "\n", "", "print", "(", "\"[%d / %d]\"", "%", "(", "i", "+", "1", ",", "range_end", ")", ")", "\n", "\n", "", "save_file_name", "=", "self", ".", "file_name", "+", "'_normal.npz'", "\n", "self", ".", "X_mean", "=", "prev_mean", "\n", "self", ".", "X_std", "=", "np", ".", "sqrt", "(", "prev_var", "/", "n_seen", ")", "\n", "np", ".", "savez", "(", "data_path", "+", "save_file_name", ",", "X_mean", "=", "self", ".", "X_mean", ",", "X_std", "=", "self", ".", "X_std", ")", "\n", "\n", "", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.tolist": [[14, 21], ["type", "isinstance", "list"], "function", ["None"], ["def", "tolist", "(", "arg", ")", ":", "\n", "    ", "if", "type", "(", "arg", ")", "is", "not", "list", ":", "\n", "        ", "if", "isinstance", "(", "arg", ",", "tuple", ")", ":", "\n", "            ", "return", "list", "(", "arg", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "arg", "]", "\n", "", "", "return", "arg", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.totuple": [[23, 30], ["type", "isinstance", "tuple"], "function", ["None"], ["", "def", "totuple", "(", "arg", ")", ":", "\n", "    ", "if", "type", "(", "arg", ")", "is", "not", "tuple", ":", "\n", "        ", "if", "isinstance", "(", "arg", ",", "list", ")", ":", "\n", "            ", "return", "tuple", "(", "arg", ")", "\n", "", "else", ":", "\n", "            ", "return", "(", "arg", ",", ")", "\n", "", "", "return", "arg", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.segment_axis": [[32, 131], ["numpy.ravel", "ValueError", "ValueError", "a.copy.swapaxes", "a.copy.swapaxes", "ValueError", "numpy.lib.stride_tricks.as_strided", "warnings.warn", "a.copy.copy", "numpy.lib.stride_tricks.as_strided", "list", "numpy.empty"], "function", ["None"], ["", "def", "segment_axis", "(", "a", ",", "length", ",", "overlap", "=", "0", ",", "axis", "=", "None", ",", "end", "=", "'cut'", ",", "endvalue", "=", "0", ")", ":", "\n", "    ", "\"\"\"Generate a new array that chops the given array along the given axis\n    into overlapping frames.\n    This code has been implemented by Anne Archibald and has been discussed\n    on the ML.\n    Parameters\n    ----------\n    a : array-like\n        The array to segment\n    length : int\n        The length of each frame\n    overlap : int, optional\n        The number of array elements by which the frames should overlap\n    axis : int, optional\n        The axis to operate on; if None, act on the flattened array\n    end : {'cut', 'wrap', 'end'}, optional\n        What to do with the last frame, if the array is not evenly\n        divisible into pieces.\n            - 'cut'   Simply discard the extra values\n            - 'wrap'  Copy values from the beginning of the array\n            - 'pad'   Pad with a constant value\n    endvalue : object\n        The value to use for end='pad'\n    Examples\n    --------\n    >>> segment_axis(arange(10), 4, 2)\n    array([[0, 1, 2, 3],\n           [2, 3, 4, 5],\n           [4, 5, 6, 7],\n           [6, 7, 8, 9]])\n    Notes\n    -----\n    The array is not copied unless necessary (either because it is\n    unevenly strided and being flattened or because end is set to\n    'pad' or 'wrap').\n    use as_strided\n    \"\"\"", "\n", "\n", "if", "axis", "is", "None", ":", "\n", "        ", "a", "=", "np", ".", "ravel", "(", "a", ")", "# may copy", "\n", "axis", "=", "0", "\n", "\n", "", "l", "=", "a", ".", "shape", "[", "axis", "]", "\n", "\n", "if", "overlap", ">=", "length", ":", "\n", "        ", "raise", "ValueError", "(", "\"frames cannot overlap by more than 100%\"", ")", "\n", "", "if", "overlap", "<", "0", "or", "length", "<=", "0", ":", "\n", "        ", "raise", "ValueError", "(", "\"overlap must be nonnegative and length must be positive\"", ")", "\n", "\n", "", "if", "l", "<", "length", "or", "(", "l", "-", "length", ")", "%", "(", "length", "-", "overlap", ")", ":", "\n", "        ", "if", "l", ">", "length", ":", "\n", "            ", "roundup", "=", "length", "+", "(", "1", "+", "(", "l", "-", "length", ")", "//", "(", "length", "-", "overlap", ")", ")", "*", "(", "length", "-", "overlap", ")", "\n", "rounddown", "=", "length", "+", "(", "(", "l", "-", "length", ")", "//", "(", "length", "-", "overlap", ")", ")", "*", "(", "length", "-", "overlap", ")", "\n", "", "else", ":", "\n", "            ", "roundup", "=", "length", "\n", "rounddown", "=", "0", "\n", "", "assert", "rounddown", "<", "l", "<", "roundup", "\n", "assert", "roundup", "==", "rounddown", "+", "(", "length", "-", "overlap", ")", "or", "(", "roundup", "==", "length", "and", "rounddown", "==", "0", ")", "\n", "a", "=", "a", ".", "swapaxes", "(", "-", "1", ",", "axis", ")", "\n", "\n", "if", "end", "==", "'cut'", ":", "\n", "            ", "a", "=", "a", "[", "...", ",", ":", "rounddown", "]", "\n", "", "elif", "end", "in", "[", "'pad'", ",", "'wrap'", "]", ":", "# copying will be necessary", "\n", "            ", "s", "=", "list", "(", "a", ".", "shape", ")", "\n", "s", "[", "-", "1", "]", "=", "roundup", "\n", "b", "=", "np", ".", "empty", "(", "s", ",", "dtype", "=", "a", ".", "dtype", ")", "\n", "b", "[", "...", ",", ":", "l", "]", "=", "a", "\n", "if", "end", "==", "'pad'", ":", "\n", "                ", "b", "[", "...", ",", "l", ":", "]", "=", "endvalue", "\n", "", "elif", "end", "==", "'wrap'", ":", "\n", "                ", "b", "[", "...", ",", "l", ":", "]", "=", "a", "[", "...", ",", ":", "roundup", "-", "l", "]", "\n", "", "a", "=", "b", "\n", "\n", "", "a", "=", "a", ".", "swapaxes", "(", "-", "1", ",", "axis", ")", "\n", "\n", "\n", "", "l", "=", "a", ".", "shape", "[", "axis", "]", "\n", "if", "l", "==", "0", ":", "\n", "        ", "raise", "ValueError", "(", "\"Not enough data points to segment array in 'cut' mode; try 'pad' or 'wrap'\"", ")", "\n", "", "assert", "l", ">=", "length", "\n", "assert", "(", "l", "-", "length", ")", "%", "(", "length", "-", "overlap", ")", "==", "0", "\n", "n", "=", "1", "+", "(", "l", "-", "length", ")", "//", "(", "length", "-", "overlap", ")", "\n", "s", "=", "a", ".", "strides", "[", "axis", "]", "\n", "newshape", "=", "a", ".", "shape", "[", ":", "axis", "]", "+", "(", "n", ",", "length", ")", "+", "a", ".", "shape", "[", "axis", "+", "1", ":", "]", "\n", "newstrides", "=", "a", ".", "strides", "[", ":", "axis", "]", "+", "(", "(", "length", "-", "overlap", ")", "*", "s", ",", "s", ")", "+", "a", ".", "strides", "[", "axis", "+", "1", ":", "]", "\n", "\n", "try", ":", "\n", "        ", "return", "as_strided", "(", "a", ",", "strides", "=", "newstrides", ",", "shape", "=", "newshape", ")", "\n", "", "except", "TypeError", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"Problem with ndarray creation forces copy.\"", ")", "\n", "a", "=", "a", ".", "copy", "(", ")", "\n", "# Shape doesn't change but strides does", "\n", "newstrides", "=", "a", ".", "strides", "[", ":", "axis", "]", "+", "(", "(", "length", "-", "overlap", ")", "*", "s", ",", "s", ")", "+", "a", ".", "strides", "[", "axis", "+", "1", ":", "]", "\n", "return", "as_strided", "(", "a", ",", "strides", "=", "newstrides", ",", "shape", "=", "newshape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.complex_to_real": [[132, 148], ["range", "numpy.array", "len", "numpy.concatenate", "new_X.append", "numpy.real", "numpy.imag"], "function", ["home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard.concatenate"], ["", "", "def", "complex_to_real", "(", "X", ")", ":", "\n", "    ", "\"\"\"\n    WRITEME\n    Parameters\n    ----------\n    X : list of complex vectors\n    Notes\n    -----\n    This function assumes X as 2D\n    \"\"\"", "\n", "new_X", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "X", ")", ")", ":", "\n", "        ", "x", "=", "X", "[", "i", "]", "\n", "new_x", "=", "np", ".", "concatenate", "(", "[", "np", ".", "real", "(", "x", ")", ",", "np", ".", "imag", "(", "x", ")", "]", ")", "\n", "new_X", ".", "append", "(", "new_x", ")", "\n", "", "return", "np", ".", "array", "(", "new_X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.fetch_blizzard": [[155, 218], ["os.path.join", "tables.open_file", "os.path.exists", "os.walk", "sorted", "tables.Filters", "tables.open_file", "tables.open_file.createEArray", "enumerate", "tables.open_file.close", "fnmatch.filter", "tables.Int16Atom", "print", "sorted.append", "open", "numpy.load", "enumerate", "os.path.join", "int", "numpy.random.permutation", "print", "e.append", "zip", "len", "len", "hdf5_file.createEArray.append", "range", "len", "numpy.zeros", "[].split", "len", "len", "len", "x.split"], "function", ["home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard_tbptt.load"], ["", "def", "fetch_blizzard", "(", "data_path", ",", "shuffle", "=", "0", ",", "sz", "=", "32000", ",", "file_name", "=", "\"full_blizzard.h5\"", ")", ":", "\n", "\n", "    ", "hdf5_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "file_name", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "hdf5_path", ")", ":", "\n", "        ", "data_matches", "=", "[", "]", "\n", "\n", "for", "root", ",", "dir_names", ",", "file_names", "in", "os", ".", "walk", "(", "data_path", ")", ":", "\n", "            ", "for", "filename", "in", "fnmatch", ".", "filter", "(", "file_names", ",", "'data_*.npy'", ")", ":", "\n", "                ", "data_matches", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", ")", "\n", "\n", "# sort in proper order", "\n", "", "", "data_matches", "=", "sorted", "(", "data_matches", ",", "\n", "key", "=", "lambda", "x", ":", "int", "(", "\n", "x", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", "[", "0", "]", ")", ")", "\n", "\n", "# setup tables", "\n", "compression_filter", "=", "tables", ".", "Filters", "(", "complevel", "=", "5", ",", "complib", "=", "'blosc'", ")", "\n", "hdf5_file", "=", "tables", ".", "open_file", "(", "hdf5_path", ",", "mode", "=", "'w'", ")", "\n", "data", "=", "hdf5_file", ".", "createEArray", "(", "hdf5_file", ".", "root", ",", "'data'", ",", "\n", "tables", ".", "Int16Atom", "(", ")", ",", "\n", "shape", "=", "(", "0", ",", "sz", ")", ",", "\n", "filters", "=", "compression_filter", ",", ")", "\n", "\n", "for", "n", ",", "f", "in", "enumerate", "(", "data_matches", ")", ":", "\n", "            ", "print", "(", "\"Reading file %s\"", "%", "(", "f", ")", ")", "\n", "\n", "with", "open", "(", "f", ")", "as", "fp", ":", "\n", "# Array of arrays, ragged", "\n", "                ", "d", "=", "np", ".", "load", "(", "fp", ")", "\n", "\n", "if", "shuffle", ":", "\n", "                    ", "rnd_idx", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "d", ")", ")", "\n", "d", "=", "d", "[", "rnd_idx", "]", "\n", "\n", "", "for", "n", ",", "di", "in", "enumerate", "(", "d", ")", ":", "\n", "                    ", "print", "(", "\"Processing line %i of %i\"", "%", "(", "n", "+", "1", ",", "len", "(", "d", ")", ")", ")", "\n", "\n", "if", "len", "(", "di", ".", "shape", ")", ">", "1", ":", "\n", "                        ", "di", "=", "di", "[", ":", ",", "0", "]", "\n", "\n", "", "e", "=", "[", "r", "for", "r", "in", "range", "(", "0", ",", "len", "(", "di", ")", ",", "sz", ")", "]", "\n", "e", ".", "append", "(", "None", ")", "\n", "starts", "=", "e", "[", ":", "-", "1", "]", "\n", "stops", "=", "e", "[", "1", ":", "]", "\n", "endpoints", "=", "zip", "(", "starts", ",", "stops", ")", "\n", "\n", "for", "i", ",", "j", "in", "endpoints", ":", "\n", "                        ", "di_new", "=", "di", "[", "i", ":", "j", "]", "\n", "\n", "# zero pad", "\n", "if", "len", "(", "di_new", ")", "<", "sz", ":", "\n", "                            ", "di_large", "=", "np", ".", "zeros", "(", "(", "sz", ",", ")", ",", "dtype", "=", "'int16'", ")", "\n", "di_large", "[", ":", "len", "(", "di_new", ")", "]", "=", "di_new", "\n", "di_new", "=", "di_large", "\n", "\n", "", "data", ".", "append", "(", "di_new", "[", "None", "]", ")", "\n", "\n", "", "", "", "", "hdf5_file", ".", "close", "(", ")", "\n", "\n", "", "hdf5_file", "=", "tables", ".", "open_file", "(", "hdf5_path", ",", "mode", "=", "'r'", ")", "\n", "\n", "return", "hdf5_file", ".", "root", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.fetch_blizzard_tbptt": [[220, 276], ["os.path.join", "tables.open_file", "os.path.exists", "os.walk", "sorted", "tables.Filters", "tables.open_file", "tables.open_file.createEArray", "enumerate", "tables.open_file.close", "fnmatch.filter", "tables.Int16Atom", "print", "sorted.append", "open", "numpy.load", "range", "int", "blizzard_data.segment_axis", "int", "range", "os.path.join", "int", "len", "print", "numpy.concatenate", "numpy.float", "numpy.float", "range", "len", "hdf5_file.createEArray.append", "len", "float", "[].split", "len", "x.split"], "function", ["home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard_tbptt.load", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.segment_axis", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard.concatenate"], ["", "def", "fetch_blizzard_tbptt", "(", "data_path", ",", "sz", "=", "8000", ",", "batch_size", "=", "100", ",", "file_name", "=", "\"blizzard_tbptt.h5\"", ")", ":", "\n", "\n", "    ", "hdf5_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "file_name", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "hdf5_path", ")", ":", "\n", "        ", "data_matches", "=", "[", "]", "\n", "\n", "for", "root", ",", "dir_names", ",", "file_names", "in", "os", ".", "walk", "(", "data_path", ")", ":", "\n", "            ", "for", "filename", "in", "fnmatch", ".", "filter", "(", "file_names", ",", "'data_*.npy'", ")", ":", "\n", "                ", "data_matches", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", ")", "\n", "\n", "# sort in proper order", "\n", "", "", "data_matches", "=", "sorted", "(", "data_matches", ",", "\n", "key", "=", "lambda", "x", ":", "int", "(", "\n", "x", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", "[", "0", "]", ")", ")", "\n", "\n", "# setup tables", "\n", "compression_filter", "=", "tables", ".", "Filters", "(", "complevel", "=", "5", ",", "complib", "=", "'blosc'", ")", "\n", "hdf5_file", "=", "tables", ".", "open_file", "(", "hdf5_path", ",", "mode", "=", "'w'", ")", "\n", "data", "=", "hdf5_file", ".", "createEArray", "(", "hdf5_file", ".", "root", ",", "'data'", ",", "\n", "tables", ".", "Int16Atom", "(", ")", ",", "\n", "shape", "=", "(", "0", ",", "sz", ")", ",", "\n", "filters", "=", "compression_filter", ",", ")", "\n", "\n", "for", "n", ",", "f", "in", "enumerate", "(", "data_matches", ")", ":", "\n", "            ", "print", "(", "\"Reading file %s\"", "%", "(", "f", ")", ")", "\n", "\n", "with", "open", "(", "f", ")", "as", "fp", ":", "\n", "# Array of arrays, ragged", "\n", "                ", "d", "=", "np", ".", "load", "(", "fp", ")", "\n", "large_d", "=", "d", "[", "0", "]", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "d", ")", ")", ":", "\n", "                    ", "print", "(", "\"Processing line %i of %i\"", "%", "(", "i", "+", "1", ",", "len", "(", "d", ")", ")", ")", "\n", "di", "=", "d", "[", "i", "]", "\n", "\n", "if", "len", "(", "di", ".", "shape", ")", ">", "1", ":", "\n", "                        ", "di", "=", "di", "[", ":", ",", "0", "]", "\n", "\n", "", "large_d", "=", "np", ".", "concatenate", "(", "[", "large_d", ",", "di", "]", ")", "\n", "\n", "", "chunk_size", "=", "int", "(", "np", ".", "float", "(", "len", "(", "large_d", ")", "/", "batch_size", ")", ")", "\n", "seg_d", "=", "segment_axis", "(", "large_d", ",", "chunk_size", ",", "0", ")", "\n", "num_batch", "=", "int", "(", "np", ".", "float", "(", "(", "seg_d", ".", "shape", "[", "-", "1", "]", "-", "1", ")", "/", "float", "(", "sz", ")", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_batch", ")", ":", "\n", "                    ", "batch", "=", "seg_d", "[", ":", ",", "i", "*", "sz", ":", "(", "i", "+", "1", ")", "*", "sz", "]", "\n", "\n", "for", "j", "in", "range", "(", "batch_size", ")", ":", "\n", "                        ", "data", ".", "append", "(", "batch", "[", "j", "]", "[", "None", "]", ")", "\n", "\n", "", "", "", "", "hdf5_file", ".", "close", "(", ")", "\n", "\n", "", "hdf5_file", "=", "tables", ".", "open_file", "(", "hdf5_path", ",", "mode", "=", "'r'", ")", "\n", "\n", "return", "hdf5_file", ".", "root", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.P2R": [[828, 830], ["numpy.exp"], "function", ["None"], ["", "", "def", "P2R", "(", "magnitude", ",", "phase", ")", ":", "\n", "    ", "return", "magnitude", "*", "np", ".", "exp", "(", "1j", "*", "phase", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.R2P": [[832, 834], ["numpy.abs", "numpy.angle"], "function", ["None"], ["", "def", "R2P", "(", "x", ")", ":", "\n", "    ", "return", "np", ".", "abs", "(", "x", ")", ",", "np", ".", "angle", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.is_power2": [[836, 841], ["None"], "function", ["None"], ["", "def", "is_power2", "(", "num", ")", ":", "\n", "    ", "\"\"\"\n    States if a number is a power of two (Author: A.Polino)\n    \"\"\"", "\n", "return", "num", "!=", "0", "and", "(", "(", "num", "&", "(", "num", "-", "1", ")", ")", "==", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.train_blizzard.evaluate": [[13, 27], ["model.eval", "model.init_hidden", "numpy.mean", "torch.autograd.Variable().float().cuda", "torch.autograd.Variable().float().cuda", "torch.autograd.Variable().float().cuda", "model", "loss.append", "numpy.asarray", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.ZForcing.init_hidden"], ["def", "evaluate", "(", "dataset", ",", "model", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "hidden", "=", "model", ".", "init_hidden", "(", "dataset", ".", "batch_size", ")", "\n", "loss", "=", "[", "]", "\n", "for", "x", ",", "y", ",", "x_mask", "in", "dataset", ":", "\n", "        ", "x", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "x", ")", ",", "volatile", "=", "True", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "y", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "y", ")", ",", "volatile", "=", "True", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "x_mask", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "x_mask", ")", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "# compute all the states for forward and backward", "\n", "fwd_nll", ",", "bwd_nll", ",", "aux_nll", ",", "kld", "=", "model", "(", "x", ",", "y", ",", "x_mask", ",", "hidden", ")", "\n", "loss", ".", "append", "(", "(", "fwd_nll", "+", "kld", ")", ".", "data", "[", "0", "]", ")", "\n", "", "return", "np", ".", "mean", "(", "np", ".", "asarray", "(", "loss", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.train_blizzard.train": [[29, 197], ["click.command", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "numpy.random.RandomState", "torch.manual_seed", "torch.cuda.manual_seed", "os.path.join", "os.path.join", "open", "model.ZForcing", "print", "numpy.load", "blizzard_data.Blizzard_tbptt", "blizzard_data.Blizzard_tbptt", "blizzard_data.Blizzard_tbptt", "load.BlizzardIterator", "load.BlizzardIterator", "load.BlizzardIterator", "print", "model.ZForcing.cuda", "model.ZForcing.init_hidden", "torch.optim.Adam", "print", "time.time", "range", "int", "os.path.exists", "os.makedirs", "model.ZForcing.parameters", "abs", "model.ZForcing.train", "print", "print", "train_blizzard.evaluate", "print", "open.write", "train_blizzard.evaluate", "print", "open.write", "open.flush", "torch.optim.Adam.zero_grad", "torch.autograd.Variable().float().cuda", "torch.autograd.Variable().float().cuda", "torch.autograd.Variable().float().cuda", "model.ZForcing.", "min", "all_loss.backward", "torch.nn.utils.clip_grad_norm", "torch.optim.Adam.step", "model.ZForcing.save", "model_id.upper", "min", "max", "numpy.isnan", "numpy.isinf", "print", "model.ZForcing.parameters", "time.time", "time.time", "print", "open.write", "open.flush", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.blizzard_data.Blizzard_tbptt.load", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.ZForcing.init_hidden", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.train_blizzard.train", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.train_blizzard.evaluate", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.train_blizzard.evaluate", "home.repos.pwc.inspect_result.anirudh9119_zforcing_nips17.None.model.ZForcing.save"], ["", "@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "option", "(", "'--expname'", ",", "default", "=", "'blizzard_logs'", ")", "\n", "@", "click", ".", "option", "(", "'--nlayers'", ",", "default", "=", "1", ")", "\n", "@", "click", ".", "option", "(", "'--seed'", ",", "default", "=", "1234", ")", "\n", "@", "click", ".", "option", "(", "'--num_epochs'", ",", "default", "=", "100", ")", "\n", "@", "click", ".", "option", "(", "'--rnn_dim'", ",", "default", "=", "2048", ")", "# As in SRNN.", "\n", "@", "click", ".", "option", "(", "'--data'", ",", "default", "=", "'./'", ")", "\n", "@", "click", ".", "option", "(", "'--bsz'", ",", "default", "=", "128", ")", "# As in SRNN.", "\n", "@", "click", ".", "option", "(", "'--lr'", ",", "default", "=", "0.0003", ")", "# As in SRNN.", "\n", "@", "click", ".", "option", "(", "'--z_dim'", ",", "default", "=", "256", ")", "# As in SRNN.", "\n", "@", "click", ".", "option", "(", "'--emb_dim'", ",", "default", "=", "1024", ")", "# CHECK: As in SRNN?", "\n", "@", "click", ".", "option", "(", "'--mlp_dim'", ",", "default", "=", "1024", ")", "# As in SRNN.", "\n", "@", "click", ".", "option", "(", "'--bwd'", ",", "default", "=", "0.", ")", "\n", "@", "click", ".", "option", "(", "'--aux_sta'", ",", "default", "=", "0.0", ")", "\n", "@", "click", ".", "option", "(", "'--aux_end'", ",", "default", "=", "0.0", ")", "\n", "@", "click", ".", "option", "(", "'--kla_sta'", ",", "default", "=", "0.2", ")", "\n", "@", "click", ".", "option", "(", "'--cond_ln'", ",", "is_flag", "=", "True", ")", "\n", "@", "click", ".", "option", "(", "'--z_force'", ",", "is_flag", "=", "True", ")", "\n", "def", "train", "(", "expname", ",", "nlayers", ",", "seed", ",", "num_epochs", ",", "rnn_dim", ",", "data", ",", "bsz", ",", "lr", ",", "z_dim", ",", "\n", "emb_dim", ",", "mlp_dim", ",", "aux_sta", ",", "aux_end", ",", "kla_sta", ",", "bwd", ",", "cond_ln", ",", "z_force", ")", ":", "\n", "    ", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "\n", "log_interval", "=", "10", "\n", "model_id", "=", "'blizzard_seed{}_cln{}_zf{}_auxsta{}_auxend{}_klasta{}_bwd{}'", ".", "format", "(", "\n", "seed", ",", "int", "(", "cond_ln", ")", ",", "z_force", ",", "aux_sta", ",", "aux_end", ",", "kla_sta", ",", "bwd", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "expname", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "expname", ")", "\n", "", "log_file_name", "=", "os", ".", "path", ".", "join", "(", "expname", ",", "model_id", "+", "'.txt'", ")", "\n", "model_file_name", "=", "os", ".", "path", ".", "join", "(", "expname", ",", "model_id", "+", "'.pt'", ")", "\n", "log_file", "=", "open", "(", "log_file_name", ",", "'w'", ")", "\n", "\n", "model", "=", "ZForcing", "(", "200", ",", "emb_dim", ",", "rnn_dim", ",", "z_dim", ",", "\n", "mlp_dim", ",", "400", ",", "nlayers", "=", "nlayers", ",", "\n", "cond_ln", "=", "cond_ln", ",", "z_force", "=", "z_force", ")", "\n", "print", "(", "'Loading data..'", ")", "\n", "\n", "file_name", "=", "'blizzard_unseg_tbptt'", "\n", "normal_params", "=", "np", ".", "load", "(", "data", "+", "file_name", "+", "'_normal.npz'", ")", "\n", "X_mean", "=", "normal_params", "[", "'X_mean'", "]", "\n", "X_std", "=", "normal_params", "[", "'X_std'", "]", "\n", "train_data", "=", "Blizzard_tbptt", "(", "name", "=", "'train'", ",", "\n", "path", "=", "data", ",", "\n", "frame_size", "=", "200", ",", "\n", "file_name", "=", "file_name", ",", "\n", "X_mean", "=", "X_mean", ",", "\n", "X_std", "=", "X_std", ")", "\n", "valid_data", "=", "Blizzard_tbptt", "(", "name", "=", "'valid'", ",", "\n", "path", "=", "data", ",", "\n", "frame_size", "=", "200", ",", "\n", "file_name", "=", "file_name", ",", "\n", "X_mean", "=", "X_mean", ",", "\n", "X_std", "=", "X_std", ")", "\n", "test_data", "=", "Blizzard_tbptt", "(", "name", "=", "'test'", ",", "\n", "path", "=", "data", ",", "\n", "frame_size", "=", "200", ",", "\n", "file_name", "=", "file_name", ",", "\n", "X_mean", "=", "X_mean", ",", "\n", "X_std", "=", "X_std", ")", "\n", "\n", "# The following numbers are for batch_size of 128 as in SRNN.", "\n", "assert", "bsz", "==", "128", "\n", "train_data", "=", "load", ".", "BlizzardIterator", "(", "train_data", ",", "bsz", ",", "start", "=", "0", ",", "end", "=", "2040064", ")", "\n", "valid_data", "=", "load", ".", "BlizzardIterator", "(", "valid_data", ",", "bsz", ",", "start", "=", "2040064", ",", "end", "=", "2152704", ")", "\n", "# Use complete batch only.", "\n", "test_data", "=", "load", ".", "BlizzardIterator", "(", "test_data", ",", "bsz", ",", "start", "=", "2152704", ",", "end", "=", "2267008", "-", "128", ")", "\n", "print", "(", "'Done.'", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "hidden", "=", "model", ".", "init_hidden", "(", "bsz", ")", "\n", "opt", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "eps", "=", "1e-5", ")", "\n", "\n", "nbatches", "=", "train_data", ".", "nbatch", "\n", "kld_step", "=", "0.00005", "\n", "aux_step", "=", "abs", "(", "aux_end", "-", "aux_sta", ")", "/", "(", "2", "*", "nbatches", ")", "# Annealing over two epochs.", "\n", "print", "(", "\"aux_step: {}\"", ".", "format", "(", "aux_step", ")", ")", "\n", "kld_weight", "=", "kla_sta", "\n", "aux_weight", "=", "aux_sta", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "        ", "step", "=", "0", "\n", "old_valid_loss", "=", "np", ".", "inf", "\n", "b_fwd_loss", ",", "b_bwd_loss", ",", "b_kld_loss", ",", "b_aux_loss", ",", "b_all_loss", "=", "(", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", ")", "\n", "model", ".", "train", "(", ")", "\n", "print", "(", "'Epoch {}: ({})'", ".", "format", "(", "epoch", ",", "model_id", ".", "upper", "(", ")", ")", ")", "\n", "for", "x", ",", "y", ",", "x_mask", "in", "train_data", ":", "\n", "            ", "step", "+=", "1", "\n", "opt", ".", "zero_grad", "(", ")", "\n", "x", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "x", ")", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "y", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "y", ")", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "x_mask", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "x_mask", ")", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "# compute all the states for forward and backward", "\n", "fwd_nll", ",", "bwd_nll", ",", "aux_nll", ",", "kld", "=", "model", "(", "x", ",", "y", ",", "x_mask", ",", "hidden", ")", "\n", "bwd_nll", "=", "(", "aux_weight", ">", "0.", ")", "*", "(", "bwd", "*", "bwd_nll", ")", "\n", "aux_nll", "=", "aux_weight", "*", "aux_nll", "\n", "all_loss", "=", "fwd_nll", "+", "bwd_nll", "+", "aux_nll", "+", "kld_weight", "*", "kld", "\n", "# anneal kld cost", "\n", "kld_weight", "+=", "kld_step", "\n", "kld_weight", "=", "min", "(", "kld_weight", ",", "1.", ")", "\n", "# anneal auxiliary cost", "\n", "if", "aux_sta", "<=", "aux_end", ":", "\n", "                ", "aux_weight", "+=", "aux_step", "\n", "aux_weight", "=", "min", "(", "aux_weight", ",", "aux_end", ")", "\n", "", "else", ":", "\n", "                ", "aux_weight", "-=", "aux_step", "\n", "aux_weight", "=", "max", "(", "aux_weight", ",", "aux_end", ")", "\n", "\n", "", "if", "kld", ".", "data", "[", "0", "]", ">=", "10000", ":", "\n", "                ", "continue", "\n", "", "if", "np", ".", "isnan", "(", "all_loss", ".", "data", "[", "0", "]", ")", "or", "np", ".", "isinf", "(", "all_loss", ".", "data", "[", "0", "]", ")", ":", "\n", "                ", "print", "(", "\"NaN\"", ",", "end", "=", "\"\\r\"", ")", "# Useful to see if training is stuck.", "\n", "continue", "\n", "\n", "", "all_loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm", "(", "model", ".", "parameters", "(", ")", ",", "100.", ")", "\n", "opt", ".", "step", "(", ")", "\n", "\n", "b_all_loss", "+=", "all_loss", ".", "data", "[", "0", "]", "\n", "b_fwd_loss", "+=", "fwd_nll", ".", "data", "[", "0", "]", "\n", "b_bwd_loss", "+=", "bwd_nll", ".", "data", "[", "0", "]", "\n", "b_kld_loss", "+=", "kld", ".", "data", "[", "0", "]", "\n", "b_aux_loss", "+=", "aux_nll", ".", "data", "[", "0", "]", "\n", "\n", "if", "step", "%", "log_interval", "==", "0", ":", "\n", "                ", "s", "=", "time", ".", "time", "(", ")", "\n", "log_line", "=", "'epoch: [%d/%d], step: [%d/%d], loss: %f, fwd loss: %f, aux loss: %f, bwd loss: %f, kld: %f, kld weight: %f, aux weight: %.4f, %.2fit/s'", "%", "(", "\n", "epoch", ",", "num_epochs", ",", "step", ",", "nbatches", ",", "\n", "b_all_loss", "/", "log_interval", ",", "\n", "b_fwd_loss", "/", "log_interval", ",", "\n", "b_aux_loss", "/", "log_interval", ",", "\n", "b_bwd_loss", "/", "log_interval", ",", "\n", "b_kld_loss", "/", "log_interval", ",", "\n", "kld_weight", ",", "\n", "aux_weight", ",", "\n", "log_interval", "/", "(", "s", "-", "t", ")", ")", "\n", "b_all_loss", "=", "0.", "\n", "b_fwd_loss", "=", "0.", "\n", "b_bwd_loss", "=", "0.", "\n", "b_aux_loss", "=", "0.", "\n", "b_kld_loss", "=", "0.", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "log_line", ")", "\n", "log_file", ".", "write", "(", "log_line", "+", "'\\n'", ")", "\n", "log_file", ".", "flush", "(", ")", "\n", "\n", "# evaluate per epoch", "\n", "", "", "print", "(", "'--- Epoch finished ----'", ")", "\n", "val_loss", "=", "evaluate", "(", "valid_data", ",", "model", ")", "\n", "log_line", "=", "'valid -- epoch: %s, nll: %f'", "%", "(", "epoch", ",", "val_loss", ")", "\n", "print", "(", "log_line", ")", "\n", "log_file", ".", "write", "(", "log_line", "+", "'\\n'", ")", "\n", "test_loss", "=", "evaluate", "(", "test_data", ",", "model", ")", "\n", "log_line", "=", "'test -- epoch: %s, nll: %f'", "%", "(", "epoch", ",", "test_loss", ")", "\n", "print", "(", "log_line", ")", "\n", "log_file", ".", "write", "(", "log_line", "+", "'\\n'", ")", "\n", "log_file", ".", "flush", "(", ")", "\n", "\n", "if", "old_valid_loss", ">", "val_loss", ":", "\n", "            ", "old_valid_loss", "=", "val_loss", "\n", "model", ".", "save", "(", "model_file_name", ")", "\n", "", "else", ":", "\n", "            ", "for", "param_group", "in", "opt", ".", "param_groups", ":", "\n", "                ", "lr", "=", "param_group", "[", "'lr'", "]", "\n", "if", "lr", ">", "0.0001", ":", "\n", "                    ", "lr", "*=", "0.5", "\n", "", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]]}