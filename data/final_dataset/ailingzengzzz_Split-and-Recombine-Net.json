{"home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.data.prepare_data_2d_custom.decode": [[18, 62], ["print", "numpy.load", "data[].item", "range", "numpy.array", "numpy.array", "numpy.arange", "range", "range", "print", "print", "print", "len", "numpy.argmax", "[].T.copy", "results_bb.append", "results_kp.append", "numpy.isnan", "len", "numpy.interp", "range", "results_bb.append", "results_kp.append", "numpy.interp", "len", "numpy.sum", "len", "len", "numpy.full", "numpy.full", "len"], "function", ["None"], ["def", "decode", "(", "filename", ")", ":", "\n", "# Latin1 encoding because Detectron runs on Python 2.7", "\n", "    ", "print", "(", "'Processing {}'", ".", "format", "(", "filename", ")", ")", "\n", "data", "=", "np", ".", "load", "(", "filename", ",", "encoding", "=", "'latin1'", ",", "allow_pickle", "=", "True", ")", "\n", "bb", "=", "data", "[", "'boxes'", "]", "\n", "kp", "=", "data", "[", "'keypoints'", "]", "\n", "metadata", "=", "data", "[", "'metadata'", "]", ".", "item", "(", ")", "\n", "results_bb", "=", "[", "]", "\n", "results_kp", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "bb", ")", ")", ":", "\n", "        ", "if", "len", "(", "bb", "[", "i", "]", "[", "1", "]", ")", "==", "0", "or", "len", "(", "kp", "[", "i", "]", "[", "1", "]", ")", "==", "0", ":", "\n", "# No bbox/keypoints detected for this frame -> will be interpolated", "\n", "            ", "results_bb", ".", "append", "(", "np", ".", "full", "(", "4", ",", "np", ".", "nan", ",", "dtype", "=", "np", ".", "float32", ")", ")", "# 4 bounding box coordinates", "\n", "results_kp", ".", "append", "(", "np", ".", "full", "(", "(", "17", ",", "4", ")", ",", "np", ".", "nan", ",", "dtype", "=", "np", ".", "float32", ")", ")", "# 17 COCO keypoints", "\n", "continue", "\n", "", "best_match", "=", "np", ".", "argmax", "(", "bb", "[", "i", "]", "[", "1", "]", "[", ":", ",", "4", "]", ")", "\n", "best_bb", "=", "bb", "[", "i", "]", "[", "1", "]", "[", "best_match", ",", ":", "4", "]", "\n", "best_kp", "=", "kp", "[", "i", "]", "[", "1", "]", "[", "best_match", "]", ".", "T", ".", "copy", "(", ")", "\n", "results_bb", ".", "append", "(", "best_bb", ")", "\n", "results_kp", ".", "append", "(", "best_kp", ")", "\n", "\n", "", "bb", "=", "np", ".", "array", "(", "results_bb", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "kp", "=", "np", ".", "array", "(", "results_kp", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "kp", "=", "kp", "[", ":", ",", ":", ",", ":", "2", "]", "# Extract (x, y)", "\n", "\n", "# Fix missing bboxes/keypoints by linear interpolation", "\n", "mask", "=", "~", "np", ".", "isnan", "(", "bb", "[", ":", ",", "0", "]", ")", "\n", "indices", "=", "np", ".", "arange", "(", "len", "(", "bb", ")", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "bb", "[", ":", ",", "i", "]", "=", "np", ".", "interp", "(", "indices", ",", "indices", "[", "mask", "]", ",", "bb", "[", "mask", ",", "i", "]", ")", "\n", "", "for", "i", "in", "range", "(", "17", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "2", ")", ":", "\n", "            ", "kp", "[", ":", ",", "i", ",", "j", "]", "=", "np", ".", "interp", "(", "indices", ",", "indices", "[", "mask", "]", ",", "kp", "[", "mask", ",", "i", ",", "j", "]", ")", "\n", "\n", "", "", "print", "(", "'{} total frames processed'", ".", "format", "(", "len", "(", "bb", ")", ")", ")", "\n", "print", "(", "'{} frames were interpolated'", ".", "format", "(", "np", ".", "sum", "(", "~", "mask", ")", ")", ")", "\n", "print", "(", "'----------'", ")", "\n", "\n", "return", "[", "{", "\n", "'start_frame'", ":", "0", ",", "# Inclusive", "\n", "'end_frame'", ":", "len", "(", "kp", ")", ",", "# Exclusive", "\n", "'bounding_boxes'", ":", "bb", ",", "\n", "'keypoints'", ":", "kp", ",", "\n", "}", "]", ",", "metadata", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.data.filter_data.get_data": [[47, 86], ["numpy.zeros", "numpy.concatenate", "print", "print", "keypoints[].keys", "print", "range", "action.split", "len", "train_pose_3d.append", "act.split"], "function", ["None"], ["def", "get_data", "(", "subjects", ",", "action_filter", ")", ":", "\n", "    ", "train_pose_3d", "=", "[", "]", "\n", "label", "=", "[", "]", "\n", "j", "=", "np", ".", "zeros", "(", "1", ")", "\n", "for", "subject", "in", "subjects", ":", "\n", "#print('subject',subject)", "\n", "        ", "for", "action", "in", "keypoints", "[", "subject", "]", ".", "keys", "(", ")", ":", "\n", "            ", "action_split", "=", "action", ".", "split", "(", "' '", ")", "[", "0", "]", "\n", "if", "action_filter", "is", "not", "None", ":", "\n", "                ", "found", "=", "False", "\n", "# distinguish the actions:'Sitting' and 'SittingDown'", "\n", "for", "act", "in", "action_filter", ":", "\n", "                    ", "act", "=", "act", ".", "split", "(", "' '", ")", "[", "0", "]", "\n", "if", "action_split", "==", "act", ":", "\n", "                        ", "found", "=", "True", "\n", "break", "\n", "", "", "if", "not", "found", ":", "\n", "                    ", "continue", "\n", "", "", "print", "(", "'training action is'", ",", "subject", ",", "action", ")", "\n", "# poses_2d = keypoints[subject][action]", "\n", "poses_3d", "=", "dataset", "[", "subject", "]", "[", "action", "]", "[", "'positions_3d'", "]", "\n", "#out = []", "\n", "for", "i", "in", "range", "(", "len", "(", "poses_3d", ")", ")", ":", "\n", "# Remove global offset, but keep trajectory in first position", "\n", "                    ", "poses_3d", "[", "i", "]", "[", ":", ",", "0", "]", "=", "0", "\n", "#plot17j(poses_3d[i][500:510],'a','b')", "\n", "train_pose_3d", ".", "append", "(", "poses_3d", "[", "i", "]", ")", "\n", "# la = np.arange(0,poses_3d)", "\n", "# label.append(la)", "\n", "j", "+=", "poses_3d", "[", "i", "]", ".", "shape", "[", "0", "]", "\n", "#pose = poses_3d[0]", "\n", "", "", "", "full_pose", "=", "np", ".", "concatenate", "(", "train_pose_3d", ",", "axis", "=", "0", ")", "\n", "#full_label = np.concatenate(label, axis=0)", "\n", "N", "=", "full_pose", ".", "shape", "[", "0", "]", "\n", "print", "(", "'Total number:'", ",", "N", ")", "\n", "part_pose", "=", "full_pose", "[", ":", ":", "10", "]", "\n", "print", "(", "'After filter, training data:'", ",", "part_pose", ".", "shape", ")", "\n", "\n", "return", "part_pose", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.data.filter_data.plot_embedding": [[88, 102], ["matplotlib.figure", "matplotlib.subplot", "range", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.title", "numpy.min", "numpy.max", "matplotlib.scatter", "matplotlib.cm.Set1", "len"], "function", ["None"], ["", "def", "plot_embedding", "(", "data", ",", "label", ",", "title", ")", ":", "\n", "    ", "x_min", ",", "x_max", "=", "np", ".", "min", "(", "data", ",", "0", ")", ",", "np", ".", "max", "(", "data", ",", "0", ")", "\n", "data", "=", "(", "data", "-", "x_min", ")", "/", "(", "x_max", "-", "x_min", ")", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "plt", ".", "subplot", "(", "111", ")", "\n", "for", "i", "in", "range", "(", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "# plt.text(data[i, 0], data[i, 1], str(label[i]),", "\n", "#          color=plt.cm.Set1(label[i] / len(label)),", "\n", "#          fontdict={'weight': 'bold', 'size': 12})", "\n", "        ", "plt", ".", "scatter", "(", "data", "[", "i", ",", "0", "]", ",", "data", "[", "i", ",", "1", "]", ",", "20", ",", "plt", ".", "cm", ".", "Set1", "(", "label", "[", "i", "]", "/", "len", "(", "label", ")", ")", ")", "\n", "", "plt", ".", "xticks", "(", "[", "]", ")", "\n", "plt", ".", "yticks", "(", "[", "]", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.data.filter_data.tsne": [[103, 113], ["filter_data.get_data", "print", "sklearn.manifold.TSNE", "time.time", "sklearn.manifold.TSNE.fit_transform", "filter_data.plot_embedding", "matplotlib.show", "numpy.array", "numpy.array", "time.time"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.get_data", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.plot_embedding"], ["", "def", "tsne", "(", ")", ":", "\n", "    ", "data", ",", "label", ",", "n_samples", ",", "n_features", "=", "get_data", "(", ")", "\n", "print", "(", "'Computing t-SNE embedding'", ")", "\n", "tsne", "=", "TSNE", "(", "n_components", "=", "2", ",", "init", "=", "'pca'", ",", "random_state", "=", "0", ")", "\n", "t0", "=", "time", "(", ")", "\n", "result", "=", "tsne", ".", "fit_transform", "(", "data", ")", "\n", "fig", "=", "plot_embedding", "(", "np", ".", "array", "(", "result", ")", ",", "np", ".", "array", "(", "label", ")", ",", "\n", "'t-SNE embedding of the S9/S11 test set (time %.2fs)'", "\n", "%", "(", "time", "(", ")", "-", "t0", ")", ")", "\n", "plt", ".", "show", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.data.filter_data.get_index": [[114, 161], ["numpy.concatenate", "numpy.argsort", "np.concatenate.tolist", "print", "len", "print", "int", "print", "numpy.set_printoptions", "sorted", "print", "dataset[].keys", "len", "range", "len", "train_pose_3d.append", "numpy.mean", "numpy.repeat", "numpy.linalg.norm", "numpy.mean"], "function", ["None"], ["", "def", "get_index", "(", "subjects", ",", "ra", ")", ":", "\n", "    ", "\"\"\"\n    Usage: sort input poses by the distance to [mean pose] from train data\n           sorted from large to small\n    :param subjects: e.g. Test set\n    :return: Reversed Index in the Test set\n    \"\"\"", "\n", "train_pose_3d", "=", "[", "]", "\n", "for", "subject", "in", "subjects", ":", "\n", "#print('subject',subject)", "\n", "        ", "for", "action", "in", "dataset", "[", "subject", "]", ".", "keys", "(", ")", ":", "\n", "#print('action',action)", "\n", "# poses_2d = keypoints[subject][action]", "\n", "            ", "poses_3d", "=", "dataset", "[", "subject", "]", "[", "action", "]", "[", "'positions_3d'", "]", "\n", "#out = []", "\n", "for", "i", "in", "range", "(", "len", "(", "poses_3d", ")", ")", ":", "\n", "# Remove global offset, but keep trajectory in first position", "\n", "                    ", "poses_3d", "[", "i", "]", "-=", "poses_3d", "[", "i", "]", "[", ":", ",", ":", "1", "]", "\n", "if", "cal_mean", ":", "\n", "                        ", "mean_3d_1", "=", "np", ".", "mean", "(", "poses_3d", "[", "i", "]", ",", "axis", "=", "0", ")", "\n", "", "elif", "cal_distance", ":", "\n", "                        ", "ext_mean_pose", "=", "np", ".", "repeat", "(", "mean_pose", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ",", "poses_3d", "[", "i", "]", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "assert", "ext_mean_pose", ".", "shape", "==", "poses_3d", "[", "i", "]", ".", "shape", "\n", "pose_dis", "=", "np", ".", "linalg", ".", "norm", "(", "(", "ext_mean_pose", "-", "poses_3d", "[", "i", "]", ")", ",", "axis", "=", "-", "1", ")", "\n", "pose_dis_mean", "=", "np", ".", "mean", "(", "pose_dis", ",", "axis", "=", "-", "1", ")", "\n", "#out.append(pose_dis_mean)", "\n", "", "train_pose_3d", ".", "append", "(", "pose_dis_mean", ")", "\n", "#plot17j(out, subject, action, show_animation=False)", "\n", "\n", "", "", "", "full_pose", "=", "np", ".", "concatenate", "(", "train_pose_3d", ",", "axis", "=", "0", ")", "\n", "# Sorted from large to small distance", "\n", "sorted_index", "=", "np", ".", "argsort", "(", "-", "full_pose", ")", "\n", "full_pose", ".", "tolist", "(", ")", "\n", "#sorted_dis = sorted(full_pose, reverse=True)", "\n", "#print('From large to small value:',sorted_dis)", "\n", "print", "(", "'index'", ",", "sorted_index", ")", "\n", "num", "=", "len", "(", "full_pose", ")", "\n", "print", "(", "'Total pose:'", ",", "num", ")", "\n", "ratio", "=", "ra", "\n", "pick_num", "=", "int", "(", "ratio", "*", "num", ")", "\n", "print", "(", "'Picked number:'", ",", "pick_num", ")", "\n", "pick_index", "=", "sorted_index", "[", ":", "pick_num", "]", "\n", "np", ".", "set_printoptions", "(", "threshold", "=", "np", ".", "inf", ")", "\n", "#print(pick_index)", "\n", "rerank", "=", "sorted", "(", "pick_index", ")", "\n", "print", "(", "'rerank'", ",", "len", "(", "rerank", ")", ")", "\n", "return", "rerank", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.data.filter_data.find_mean": [[162, 179], ["print", "numpy.zeros", "range", "print", "len", "print", "numpy.mean", "print", "numpy.mean"], "function", ["None"], ["", "def", "find_mean", "(", "train_pose_3d", ")", ":", "\n", "    ", "print", "(", "'----------------Finish fetching training data-------------'", ")", "\n", "N", "=", "0", "\n", "sum_3d", "=", "np", ".", "zeros", "(", "[", "17", ",", "3", "]", ")", "\n", "# Calculte mean pose", "\n", "for", "i", "in", "range", "(", "len", "(", "train_pose_3d", ")", ")", ":", "\n", "# pose.shape = [T,17,3]", "\n", "        ", "N", "+=", "train_pose_3d", "[", "i", "]", ".", "shape", "[", "0", "]", "\n", "print", "(", "'N is :'", ",", "N", ")", "\n", "train_pose_3d", "[", "i", "]", "[", ":", ",", "0", "]", "=", "0", "\n", "mean_3d", "=", "np", ".", "mean", "(", "train_pose_3d", "[", "i", "]", ",", "axis", "=", "0", ")", "\n", "print", "(", "'mm'", ",", "mean_3d", ".", "shape", ",", "mean_3d", ")", "\n", "sum_3d", "+=", "mean_3d", "*", "train_pose_3d", "[", "i", "]", ".", "shape", "[", "0", "]", "\n", "\n", "", "mean1", "=", "sum_3d", "/", "N", "\n", "#plot17j([mean], 'mean', 'mean')", "\n", "print", "(", "'Training set mean 3d pose is:'", ",", "np", ".", "mean", "(", "mean1", ",", "axis", "=", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.data.filter_data.split_data": [[180, 198], ["print", "len", "len", "print", "out.append", "out.append", "len"], "function", ["None"], ["", "def", "split_data", "(", "index", ")", ":", "\n", "    ", "\"\"\"\n    Partition index into a list, make one more dimension\n    :param index: a so long list\n    :return out: splited index, type: List\n    \"\"\"", "\n", "out", "=", "[", "]", "\n", "j", "=", "0", "\n", "for", "i", "in", "index", ":", "\n", "        ", "if", "i", "<", "len", "(", "index", ")", "-", "1", ":", "\n", "            ", "if", "index", "[", "i", "+", "1", "]", "-", "index", "[", "i", "]", ">", "5", ":", "\n", "                ", "print", "(", "'Split index into smaller groups:'", ",", "j", ",", "i", ")", "\n", "out", ".", "append", "(", "index", "[", "j", ":", "(", "i", "+", "1", ")", "]", ")", "\n", "j", "=", "i", "+", "1", "\n", "", "", "elif", "i", "==", "len", "(", "index", ")", "-", "1", ":", "\n", "            ", "out", ".", "append", "(", "index", "[", "j", ":", "]", ")", "\n", "", "", "print", "(", "'Split group:'", ",", "len", "(", "out", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.data.filter_data.svd": [[199, 208], ["numpy.linalg.svd", "numpy.dot", "numpy.diag"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.svd"], ["", "def", "svd", "(", "X", ")", ":", "\n", "# Data matrix X, X doesn't need to be 0-centered", "\n", "#n, m = X.shape", "\n", "# Compute full SVD", "\n", "    ", "U", ",", "Sigma", ",", "Vh", "=", "np", ".", "linalg", ".", "svd", "(", "X", ",", "full_matrices", "=", "False", ",", "# It's not necessary to compute the full matrix of U or V", "\n", "compute_uv", "=", "True", ")", "\n", "# Transform X with SVD components", "\n", "X_svd", "=", "np", ".", "dot", "(", "U", ",", "np", ".", "diag", "(", "Sigma", ")", ")", "\n", "return", "X_svd", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.data.filter_data.cal_mean_var": [[210, 243], ["numpy.concatenate", "print", "numpy.var", "numpy.mean", "print", "print", "keypoints[].keys", "range", "action.split", "len", "numpy.linalg.norm", "train_pose_3d.append", "act.split"], "function", ["None"], ["", "def", "cal_mean_var", "(", "action_filter", ")", ":", "\n", "#    get_data()", "\n", "    ", "train_pose_3d", "=", "[", "]", "\n", "for", "subject", "in", "subjects", ":", "\n", "        ", "for", "action", "in", "keypoints", "[", "subject", "]", ".", "keys", "(", ")", ":", "\n", "            ", "action_split", "=", "action", ".", "split", "(", "' '", ")", "[", "0", "]", "\n", "if", "action_filter", "is", "not", "None", ":", "\n", "                ", "found", "=", "False", "\n", "# distinguish the actions:'Sitting' and 'SittingDown'", "\n", "for", "act", "in", "action_filter", ":", "\n", "                    ", "act", "=", "act", ".", "split", "(", "' '", ")", "[", "0", "]", "\n", "if", "action_split", "==", "act", ":", "\n", "                        ", "found", "=", "True", "\n", "break", "\n", "", "", "if", "not", "found", ":", "\n", "                    ", "continue", "\n", "#print(action)", "\n", "", "", "poses_3d", "=", "dataset", "[", "subject", "]", "[", "action", "]", "[", "'positions_3d'", "]", "\n", "out", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "poses_3d", ")", ")", ":", "\n", "                ", "poses_3d", "[", "i", "]", "[", ":", ",", "0", "]", "=", "0", "\n", "dis", "=", "np", ".", "linalg", ".", "norm", "(", "poses_3d", "[", "i", "]", ",", "axis", "=", "-", "1", ")", "\n", "train_pose_3d", ".", "append", "(", "dis", ")", "\n", "# NUm = poses_3d[i].shape[0]", "\n", "# in_var = np.var((poses_3d[i]),axis=0)", "\n", "# joint_var = np.mean(in_var, axis=-1)", "\n", "# train_pose_3d.append(joint_var)", "\n", "", "", "", "full_pose", "=", "np", ".", "concatenate", "(", "train_pose_3d", ",", "axis", "=", "0", ")", "\n", "print", "(", "full_pose", ".", "shape", ")", "\n", "var_train", "=", "np", ".", "var", "(", "full_pose", ",", "axis", "=", "0", ")", "\n", "mean_train", "=", "np", ".", "mean", "(", "full_pose", ",", "axis", "=", "0", ")", "\n", "print", "(", "mean_train", ")", "\n", "print", "(", "var_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.data.filter_data.pick_mean_var": [[249, 254], ["args.all_action.split", "print", "filter_data.cal_mean_var"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.cal_mean_var"], ["", "def", "pick_mean_var", "(", ")", ":", "\n", "    ", "action_all", "=", "args", ".", "all_action", ".", "split", "(", "','", ")", "\n", "for", "action", "in", "action_all", ":", "\n", "        ", "print", "(", "'This action:'", ",", "action", ")", "\n", "cal_mean_var", "(", "[", "action", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.data.filter_data.un_frequent": [[255, 308], ["filter_data.get_data", "torch.from_numpy", "print", "numpy.array", "print", "print", "numpy.savez_compressed", "print", "numpy.argsort", "np.array.tolist", "len", "int", "print", "numpy.set_printoptions", "sorted", "print", "dataset[].keys", "len", "type", "len", "print", "range", "len", "range", "time.time", "torch.from_numpy().unsqueeze", "torch.norm", "torch.mean", "dis_.cpu().numpy.cpu().numpy", "train_pose_3d.append", "print", "torch.from_numpy", "torch.from_numpy().unsqueeze.cuda", "torch.from_numpy.cuda", "dis_.cpu().numpy.cpu", "time.time"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.get_data"], ["", "", "def", "un_frequent", "(", "subjects", ",", "ra", ")", ":", "\n", "    ", "train_pose", "=", "get_data", "(", "subjects_train", ",", ")", "\n", "train_pose", "=", "torch", ".", "from_numpy", "(", "train_pose", ")", "\n", "print", "(", "train_pose", ".", "shape", ")", "\n", "train_pose_3d", "=", "[", "]", "\n", "for", "subject", "in", "subjects", ":", "\n", "        ", "for", "action", "in", "dataset", "[", "subject", "]", ".", "keys", "(", ")", ":", "\n", "            ", "print", "(", "'action'", ",", "action", ")", "\n", "#     # poses_2d = keypoints[subject][action]", "\n", "poses_3d", "=", "dataset", "[", "subject", "]", "[", "action", "]", "[", "'positions_3d'", "]", "\n", "#     #out = []", "\n", "for", "i", "in", "range", "(", "len", "(", "poses_3d", ")", ")", ":", "\n", "# Remove global offset, but keep trajectory in first position", "\n", "                    ", "poses_3d", "[", "i", "]", "[", ":", ",", "0", "]", "=", "0", "\n", "for", "k", "in", "range", "(", "poses_3d", "[", "i", "]", ".", "shape", "[", "0", "]", ")", ":", "\n", "                        ", "time_now", "=", "time", "(", ")", "\n", "single_3d", "=", "poses_3d", "[", "i", "]", "[", "k", "]", "\n", "single_ext", "=", "torch", ".", "from_numpy", "(", "single_3d", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "dis", "=", "torch", ".", "norm", "(", "(", "single_ext", ".", "cuda", "(", ")", "-", "train_pose", ".", "cuda", "(", ")", ")", ",", "dim", "=", "-", "1", ")", "\n", "dis_", "=", "torch", ".", "mean", "(", "dis", ")", "\n", "dis_", "=", "dis_", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "#dis = np.mean(np.linalg.norm((train_pose-single_ext),axis=-1))", "\n", "train_pose_3d", ".", "append", "(", "dis_", ")", "\n", "#print(train_pose_3d)", "\n", "print", "(", "'Each frame cost:'", ",", "time", "(", ")", "-", "time_now", ")", "\n", "# la = np.repeat(j[np.newaxis, :], poses_3d[i].shape[0], axis=0)", "\n", "# label.append(la)", "\n", "# j += 1", "\n", "#pose = poses_3d[0]", "\n", "#test_distance = torch.cat(train_pose_3d, dim=0)", "\n", "", "", "", "", "test_distance", "=", "np", ".", "array", "(", "train_pose_3d", ")", "\n", "print", "(", "'test'", ",", "len", "(", "test_distance", ")", ",", "test_distance", ",", "type", "(", "test_distance", ")", ")", "\n", "print", "(", "'Saving First...'", ")", "\n", "file_name", "=", "'data/unfrequent_test_distance'", "\n", "np", ".", "savez_compressed", "(", "file_name", ",", "pose_3d", "=", "test_distance", ")", "\n", "print", "(", "'Done.'", ")", "\n", "# full_label = np.concatenate(label, axis=0)", "\n", "# Sorted from large to small distance", "\n", "sorted_index", "=", "np", ".", "argsort", "(", "-", "test_distance", ")", "\n", "test_distance", ".", "tolist", "(", ")", "\n", "#sorted_dis = sorted(full_pose, reverse=True)", "\n", "#print('From large to small value:',sorted_dis)", "\n", "#print('index',sorted_index)", "\n", "num", "=", "len", "(", "test_distance", ")", "\n", "#print('Total pose:',num)", "\n", "ratio", "=", "ra", "\n", "pick_num", "=", "int", "(", "ratio", "*", "num", ")", "\n", "print", "(", "'Picked number:'", ",", "pick_num", ")", "\n", "pick_index", "=", "sorted_index", "[", ":", "pick_num", "]", "\n", "np", ".", "set_printoptions", "(", "threshold", "=", "np", ".", "inf", ")", "\n", "rerank", "=", "sorted", "(", "pick_index", ")", "\n", "print", "(", "'rerank number'", ",", "len", "(", "rerank", ")", ",", "rerank", ")", "\n", "return", "rerank", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.data.filter_data.get_distance": [[310, 329], ["numpy.load", "print", "numpy.argsort", "test_distance.tolist", "len", "int", "print", "print"], "function", ["None"], ["", "def", "get_distance", "(", "ra", ")", ":", "\n", "    ", "input_dis", "=", "np", ".", "load", "(", "'data/unfrequent_test_distance.npz'", ",", "allow_pickle", "=", "True", ")", "\n", "test_distance", "=", "input_dis", "[", "'pose_3d'", "]", "\n", "print", "(", "test_distance", ".", "shape", ")", "\n", "sorted_index", "=", "np", ".", "argsort", "(", "-", "test_distance", ")", "\n", "test_distance", ".", "tolist", "(", ")", "\n", "#sorted_dis = sorted(full_pose, reverse=True)", "\n", "#print('From large to small value:',sorted_dis)", "\n", "#print('index',sorted_index)", "\n", "num", "=", "len", "(", "test_distance", ")", "\n", "#print('Total pose:',num)", "\n", "ratio", "=", "ra", "\n", "pick_num", "=", "int", "(", "ratio", "*", "num", ")", "\n", "print", "(", "'Picked number:'", ",", "pick_num", ")", "\n", "pick_index", "=", "sorted_index", "[", ":", "pick_num", "]", "\n", "#np.set_printoptions(threshold=np.inf)", "\n", "#rerank = sorted(pick_index)", "\n", "print", "(", "'rerank number'", ",", "pick_index", ")", "\n", "return", "pick_index", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.data.filter_data.final_filter": [[330, 359], ["numpy.concatenate", "numpy.concatenate", "filter_data.get_distance", "sorted_pose.append", "sorted_pose_2d.append", "print", "numpy.savez_compressed", "print", "dataset[].keys", "range", "len", "full_out.append", "full_out_2d.append"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.get_distance"], ["", "def", "final_filter", "(", "subjects", ")", ":", "\n", "    ", "full_out", "=", "[", "]", "\n", "full_out_2d", "=", "[", "]", "\n", "ratio", "=", "1", "\n", "for", "subject", "in", "subjects", ":", "\n", "        ", "for", "action", "in", "dataset", "[", "subject", "]", ".", "keys", "(", ")", ":", "\n", "            ", "poses_3d", "=", "dataset", "[", "subject", "]", "[", "action", "]", "[", "'positions_3d'", "]", "\n", "poses_2d", "=", "keypoints", "[", "subject", "]", "[", "action", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "poses_3d", ")", ")", ":", "\n", "                ", "full_out", ".", "append", "(", "poses_3d", "[", "i", "]", ")", "\n", "full_out_2d", ".", "append", "(", "poses_2d", "[", "i", "]", ")", "\n", "", "", "", "full_pose", "=", "np", ".", "concatenate", "(", "full_out", ",", "axis", "=", "0", ")", "\n", "full_pose_2d", "=", "np", ".", "concatenate", "(", "full_out_2d", ",", "axis", "=", "0", ")", "\n", "#sorted_index = get_index(subjects, ra=ratio)", "\n", "#sorted_index = un_frequent(subjects, ra=ratio)", "\n", "sorted_index", "=", "get_distance", "(", "ratio", ")", "\n", "#split_index = split_data(sorted_index)", "\n", "sorted_pose", "=", "[", "]", "\n", "sorted_pose_2d", "=", "[", "]", "\n", "#for i, v in enumerate(split_index):", "\n", "#print('Each test group length:',len(v))", "\n", "sorted_pose", ".", "append", "(", "full_pose", "[", "sorted_index", "]", ")", "\n", "sorted_pose_2d", ".", "append", "(", "full_pose_2d", "[", "sorted_index", "]", ")", "\n", "#plot17j(sorted_pose[400:420], 'dis','large')", "\n", "\n", "print", "(", "'Saving...'", ")", "\n", "file_name", "=", "'data/unfrequent_{}_test_gt'", ".", "format", "(", "ratio", ")", "\n", "np", ".", "savez_compressed", "(", "file_name", ",", "pose_3d", "=", "sorted_pose", ",", "pose_2d", "=", "sorted_pose_2d", ")", "\n", "print", "(", "'Done.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.data.filter_data.sort_K": [[360, 369], ["dist.cpu().numpy.cpu().numpy", "numpy.argsort", "numpy.mean", "dist.cpu().numpy.cpu"], "function", ["None"], ["", "def", "sort_K", "(", "dist", ",", "K", ")", ":", "\n", "# Sort from small to large distance", "\n", "    ", "dist", "=", "dist", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "sorted_index", "=", "np", ".", "argsort", "(", "dist", ")", "\n", "\n", "pick_index", "=", "sorted_index", "[", ":", "K", "]", "\n", "pick_dis", "=", "dist", "[", "pick_index", "]", "\n", "mean_dis", "=", "np", ".", "mean", "(", "pick_dis", ")", "\n", "return", "mean_dis", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.data.filter_data.pose_similar": [[370, 376], ["torch.Tensor().cuda", "torch.exp", "torch.mean", "torch.Tensor"], "function", ["None"], ["", "def", "pose_similar", "(", "dist", ",", "sigma", ")", ":", "\n", "    ", "theta", "=", "torch", ".", "Tensor", "(", "[", "sigma", "]", ")", ".", "cuda", "(", ")", "\n", "ps", "=", "torch", ".", "exp", "(", "-", "dist", "/", "theta", ")", "\n", "ps_mean", "=", "torch", ".", "mean", "(", "ps", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "#print(ps_mean.shape,ps_mean)", "\n", "return", "ps_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.data.filter_data.filter_Kmin": [[377, 488], ["filter_data.get_data", "torch.from_numpy", "print", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "print", "print", "numpy.savez_compressed", "print", "print", "keypoints[].keys", "len", "time.time", "range", "print", "print", "action.split", "len", "range", "time.time", "act.split", "torch.from_numpy().unsqueeze", "torch.norm", "filter_data.pose_similar", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "train_pose_3d.append", "part1_dis.append", "part2_dis.append", "part3_dis.append", "part4_dis.append", "part5_dis.append", "filter_data.sort_K", "filter_data.sort_K", "filter_data.sort_K", "filter_data.sort_K", "filter_data.sort_K", "filter_data.sort_K", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "torch.from_numpy", "torch.from_numpy().unsqueeze.cuda", "torch.from_numpy.cuda", "torch.mean.cpu", "torch.mean.cpu", "torch.mean.cpu", "torch.mean.cpu", "torch.mean.cpu", "torch.mean.cpu"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.get_data", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.pose_similar", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.sort_K", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.sort_K", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.sort_K", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.sort_K", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.sort_K", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.sort_K"], ["", "def", "filter_Kmin", "(", "get_KNN", ",", "subjects", ",", "action_filter", ",", "sig", ")", ":", "\n", "# Filter K nearest pose of training data as the distance (represent the similarity)", "\n", "    ", "train_pose", "=", "get_data", "(", "subjects_train", ",", "all_action", ")", "\n", "train_pose", "=", "torch", ".", "from_numpy", "(", "train_pose", ")", "\n", "print", "(", "train_pose", ".", "shape", ")", "\n", "train_pose_3d", "=", "[", "]", "\n", "part1_dis", "=", "[", "]", "\n", "part2_dis", "=", "[", "]", "\n", "part3_dis", "=", "[", "]", "\n", "part4_dis", "=", "[", "]", "\n", "part5_dis", "=", "[", "]", "\n", "minu", "=", "[", "]", "\n", "train_action", "=", "action_train", "\n", "for", "subject", "in", "subjects", ":", "\n", "# print('subject',subject)", "\n", "        ", "for", "action", "in", "keypoints", "[", "subject", "]", ".", "keys", "(", ")", ":", "\n", "            ", "time_now", "=", "time", "(", ")", "\n", "n", "=", "0", "\n", "mean_min", "=", "0", "\n", "mean_pose", "=", "0", "\n", "mean_part", "=", "0", "\n", "action_split", "=", "action", ".", "split", "(", "' '", ")", "[", "0", "]", "\n", "if", "action_filter", "is", "not", "None", ":", "\n", "                ", "found", "=", "False", "\n", "# distinguish the actions:'Sitting' and 'SittingDown'", "\n", "for", "act", "in", "action_filter", ":", "\n", "                    ", "act", "=", "act", ".", "split", "(", "' '", ")", "[", "0", "]", "\n", "if", "action_split", "==", "act", ":", "\n", "                        ", "found", "=", "True", "\n", "break", "\n", "", "", "if", "not", "found", ":", "\n", "                    ", "continue", "\n", "#print('test action is', subject, action)", "\n", "", "", "poses_3d", "=", "dataset", "[", "subject", "]", "[", "action", "]", "[", "'positions_3d'", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "poses_3d", ")", ")", ":", "\n", "# Remove global offset, but keep trajectory in first position", "\n", "                ", "poses_3d", "[", "i", "]", "[", ":", ",", "0", "]", "=", "0", "\n", "for", "k", "in", "range", "(", "poses_3d", "[", "i", "]", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "if", "k", "%", "5", "==", "0", ":", "\n", "                        ", "n", "+=", "1", "\n", "single_3d", "=", "poses_3d", "[", "i", "]", "[", "k", "]", "\n", "single_ext", "=", "torch", ".", "from_numpy", "(", "single_3d", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "# For all joints mean distance:", "\n", "pose_dis1", "=", "torch", ".", "norm", "(", "(", "single_ext", ".", "cuda", "(", ")", "-", "train_pose", ".", "cuda", "(", ")", ")", ",", "dim", "=", "-", "1", ")", "#[N, 17]", "\n", "# First calculate the joint similarity by Gaussian distribution normalize the joint distance.", "\n", "pose_dis", "=", "pose_similar", "(", "pose_dis1", ",", "sigma", "=", "sig", ")", "\n", "\n", "all_dis", "=", "torch", ".", "mean", "(", "pose_dis", ",", "dim", "=", "-", "1", ")", "#[N,]", "\n", "# For part joints mean distance:", "\n", "part1", "=", "torch", ".", "mean", "(", "pose_dis", "[", ":", ",", "0", ":", "4", "]", ",", "dim", "=", "-", "1", ")", "\n", "part2", "=", "torch", ".", "mean", "(", "pose_dis", "[", ":", ",", "4", ":", "7", "]", ",", "dim", "=", "-", "1", ")", "\n", "part3", "=", "torch", ".", "mean", "(", "pose_dis", "[", ":", ",", "7", ":", "11", "]", ",", "dim", "=", "-", "1", ")", "\n", "part4", "=", "torch", ".", "mean", "(", "pose_dis", "[", ":", ",", "11", ":", "14", "]", ",", "dim", "=", "-", "1", ")", "\n", "part5", "=", "torch", ".", "mean", "(", "pose_dis", "[", ":", ",", "14", ":", "17", "]", ",", "dim", "=", "-", "1", ")", "\n", "# Get the K Nearest mean distance", "\n", "if", "get_KNN", ":", "\n", "                            ", "k_", "=", "5", "\n", "pose_min", "=", "sort_K", "(", "all_dis", ",", "K", "=", "k_", ")", "\n", "part1_min", "=", "sort_K", "(", "part1", ",", "K", "=", "k_", ")", "\n", "part2_min", "=", "sort_K", "(", "part2", ",", "K", "=", "k_", ")", "\n", "part3_min", "=", "sort_K", "(", "part3", ",", "K", "=", "k_", ")", "\n", "part4_min", "=", "sort_K", "(", "part4", ",", "K", "=", "k_", ")", "\n", "part5_min", "=", "sort_K", "(", "part5", ",", "K", "=", "k_", ")", "\n", "\n", "# Get Mean pose similarity", "\n", "# else:", "\n", "#     pose_min = pose_similar(all_dis, sigma)", "\n", "#     part1_min = pose_similar(part1, sigma)", "\n", "#     part2_min = pose_similar(part2, sigma)", "\n", "#     part3_min = pose_similar(part3, sigma)", "\n", "#     part4_min = pose_similar(part4, sigma)", "\n", "#     part5_min = pose_similar(part5, sigma)", "\n", "#", "\n", "# minus = pose_min - (4*part1_min+3*part2_min+4*part3_min+3*part4_min+3*part5_min)/17", "\n", "# mean_min += minus", "\n", "# mean_pose += pose_min", "\n", "# mean_part += (part1_min + part2_min + part3_min + part4_min +part5_min)/5", "\n", "# print(part1_min ,part2_min ,part3_min ,part4_min,part5_min,'mean',mean_part/n)", "\n", "# train_pose_3d.append(pose_min)", "\n", "# part1_dis.append(part1_min)", "\n", "# part2_dis.append(part2_min)", "\n", "# part3_dis.append(part3_min)", "\n", "# part4_dis.append(part4_min)", "\n", "# part5_dis.append(part5_min)", "\n", "# minu.append(minus)", "\n", "", "train_pose_3d", ".", "append", "(", "np", ".", "array", "(", "all_dis", ".", "cpu", "(", ")", ")", ")", "\n", "part1_dis", ".", "append", "(", "np", ".", "array", "(", "part1", ".", "cpu", "(", ")", ")", ")", "\n", "part2_dis", ".", "append", "(", "np", ".", "array", "(", "part2", ".", "cpu", "(", ")", ")", ")", "\n", "part3_dis", ".", "append", "(", "np", ".", "array", "(", "part3", ".", "cpu", "(", ")", ")", ")", "\n", "part4_dis", ".", "append", "(", "np", ".", "array", "(", "part4", ".", "cpu", "(", ")", ")", ")", "\n", "part5_dis", ".", "append", "(", "np", ".", "array", "(", "part5", ".", "cpu", "(", ")", ")", ")", "\n", "", "", "", "print", "(", "'N is'", ",", "n", ")", "\n", "# print('Subject Action',subject, action, 'Each mean whole pose distance:',mean_pose/n*100, 'mean part',mean_part/n*100, 'mean more',mean_min/n*100)", "\n", "print", "(", "'One calculation cost:'", ",", "time", "(", ")", "-", "time_now", ")", "\n", "", "", "test_distance", "=", "np", ".", "array", "(", "train_pose_3d", ")", "\n", "p1_dist", "=", "np", ".", "array", "(", "part1_dis", ")", "\n", "p2_dist", "=", "np", ".", "array", "(", "part2_dis", ")", "\n", "p3_dist", "=", "np", ".", "array", "(", "part3_dis", ")", "\n", "p4_dist", "=", "np", ".", "array", "(", "part4_dis", ")", "\n", "p5_dist", "=", "np", ".", "array", "(", "part5_dis", ")", "\n", "# minu_all = np.array(minu)", "\n", "print", "(", "'test'", ",", "len", "(", "test_distance", ")", ")", "\n", "print", "(", "'Saving First...'", ")", "\n", "# file_name = 'data/K{}_test_5f_{}_distance'.format(k_,train_action)", "\n", "# np.savez_compressed(file_name, pose_3d_dist=test_distance, part1_dist=p1_dist, part2_dist=p2_dist,", "\n", "#                     part3_dist=p3_dist, part4_dist=p4_dist, part5_dist=p5_dist)", "\n", "file_name", "=", "'data/S{}_rare_testset'", ".", "format", "(", "sig", ")", "\n", "np", ".", "savez_compressed", "(", "file_name", ",", "pose_3d_dist", "=", "test_distance", ",", "part1_dist", "=", "p1_dist", ",", "part2_dist", "=", "p2_dist", ",", "\n", "part3_dist", "=", "p3_dist", ",", "part4_dist", "=", "p4_dist", ",", "part5_dist", "=", "p5_dist", ")", "\n", "print", "(", "'Saved as:'", ",", "file_name", ")", "\n", "print", "(", "'Done.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.data.filter_data.fetch_data": [[489, 498], ["numpy.load"], "function", ["None"], ["", "def", "fetch_data", "(", "k", ",", "sig", ")", ":", "\n", "    ", "input_dis", "=", "np", ".", "load", "(", "'data/S{}_rare_testset.npz'", ".", "format", "(", "sig", ")", ",", "allow_pickle", "=", "True", ")", "\n", "test_distance", "=", "input_dis", "[", "'pose_3d_dist'", "]", "\n", "p1", "=", "input_dis", "[", "'part1_dist'", "]", "\n", "p2", "=", "input_dis", "[", "'part2_dist'", "]", "\n", "p3", "=", "input_dis", "[", "'part3_dist'", "]", "\n", "p4", "=", "input_dis", "[", "'part4_dist'", "]", "\n", "p5", "=", "input_dis", "[", "'part5_dist'", "]", "\n", "return", "test_distance", ",", "p1", ",", "p2", ",", "p3", ",", "p4", ",", "p5", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.data.filter_data.sort_testset": [[499, 509], ["numpy.argsort", "int", "print", "print"], "function", ["None"], ["", "def", "sort_testset", "(", "test_distance", ",", "ra", ")", ":", "\n", "# Sort from large to small distance in the test set", "\n", "    ", "sorted_index", "=", "np", ".", "argsort", "(", "test_distance", "[", ":", ",", "0", "]", ")", "\n", "num", "=", "test_distance", ".", "shape", "[", "0", "]", "\n", "ratio", "=", "ra", "\n", "pick_num", "=", "int", "(", "ratio", "*", "num", ")", "\n", "print", "(", "'Picked number:'", ",", "pick_num", ")", "\n", "pick_index", "=", "sorted_index", "[", ":", "pick_num", "]", "\n", "print", "(", "'rerank number'", ",", "pick_index", ")", "\n", "return", "pick_index", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.data.filter_data.final_KN": [[510, 541], ["filter_data.filter_Kmin", "numpy.concatenate", "numpy.concatenate", "print", "filter_data.fetch_data", "filter_data.sort_testset", "sorted_pose.append", "sorted_pose_2d.append", "print", "numpy.savez_compressed", "print", "dataset[].keys", "print", "range", "len", "full_out.append", "full_out_2d.append"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.filter_Kmin", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.fetch_data", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.sort_testset"], ["", "def", "final_KN", "(", "subjects", ",", "sig", ")", ":", "\n", "    ", "full_out", "=", "[", "]", "\n", "full_out_2d", "=", "[", "]", "\n", "ratio", "=", "1", "\n", "k_", "=", "1", "\n", "filter_Kmin", "(", "False", ",", "subjects_test", ",", "all_action", ",", "sig", ")", "\n", "for", "subject", "in", "subjects", ":", "\n", "        ", "for", "action", "in", "dataset", "[", "subject", "]", ".", "keys", "(", ")", ":", "\n", "            ", "print", "(", "action", ")", "\n", "poses_3d", "=", "dataset", "[", "subject", "]", "[", "action", "]", "[", "'positions_3d'", "]", "\n", "poses_2d", "=", "keypoints", "[", "subject", "]", "[", "action", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "poses_3d", ")", ")", ":", "\n", "                ", "full_out", ".", "append", "(", "poses_3d", "[", "i", "]", "[", ":", ":", "5", "]", ")", "\n", "full_out_2d", ".", "append", "(", "poses_2d", "[", "i", "]", "[", ":", ":", "5", "]", ")", "\n", "", "", "", "full_pose", "=", "np", ".", "concatenate", "(", "full_out", ",", "axis", "=", "0", ")", "\n", "full_pose_2d", "=", "np", ".", "concatenate", "(", "full_out_2d", ",", "axis", "=", "0", ")", "\n", "print", "(", "full_pose_2d", ".", "shape", ")", "\n", "all_pose_dist", ",", "p1_dist", ",", "p2_dist", ",", "p3_dist", ",", "p4_dist", ",", "p5_dist", "=", "fetch_data", "(", "k_", ",", "sig", ")", "\n", "sorted_index", "=", "sort_testset", "(", "all_pose_dist", ",", "ra", "=", "ratio", ")", "\n", "\n", "sorted_pose", "=", "[", "]", "\n", "sorted_pose_2d", "=", "[", "]", "\n", "\n", "sorted_pose", ".", "append", "(", "full_pose", "[", "sorted_index", "]", ")", "\n", "sorted_pose_2d", ".", "append", "(", "full_pose_2d", "[", "sorted_index", "]", ")", "\n", "#plot17j(sorted_pose[400:420], 'dis','large')", "\n", "\n", "print", "(", "'Saving...'", ")", "\n", "file_name", "=", "'data/whole_body_S{}_f5_{}_gt'", ".", "format", "(", "sig", ",", "ratio", ")", "\n", "np", ".", "savez_compressed", "(", "file_name", ",", "pose_3d", "=", "sorted_pose", ",", "pose_2d", "=", "sorted_pose_2d", ")", "\n", "print", "(", "'Saved in:'", ",", "file_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.data.filter_data.cal_dist": [[542, 572], ["open", "open.readlines", "print", "numpy.argsort", "print", "keypoints[].keys", "len", "numpy.array", "enumerate", "numpy.array", "action.split", "numpy.array", "numpy.array", "line.split", "act.split", "print", "k.append", "g.append"], "function", ["None"], ["", "def", "cal_dist", "(", "subjects", ",", "action_filter", ")", ":", "\n", "    ", "f", "=", "open", "(", "'log/filter_direct.log'", ")", "\n", "file", "=", "f", ".", "readlines", "(", ")", "\n", "k", "=", "[", "]", "\n", "g", "=", "[", "]", "\n", "for", "subject", "in", "subjects", ":", "\n", "# print('subject',subject)", "\n", "        ", "for", "action", "in", "keypoints", "[", "subject", "]", ".", "keys", "(", ")", ":", "\n", "            ", "action_split", "=", "action", ".", "split", "(", "' '", ")", "[", "0", "]", "\n", "if", "action_filter", "is", "not", "None", ":", "\n", "                ", "found", "=", "False", "\n", "# distinguish the actions:'Sitting' and 'SittingDown'", "\n", "for", "act", "in", "action_filter", ":", "\n", "                    ", "act", "=", "act", ".", "split", "(", "' '", ")", "[", "0", "]", "\n", "if", "action_split", "==", "act", ":", "\n", "                        ", "found", "=", "True", "\n", "break", "\n", "", "", "if", "not", "found", ":", "\n", "                    ", "continue", "\n", "", "", "for", "i", ",", "line", "in", "enumerate", "(", "file", ")", ":", "\n", "                ", "if", "action", "in", "line", ":", "\n", "                    ", "word", "=", "line", ".", "split", "(", "' '", ")", "\n", "if", "action", "==", "word", "[", "-", "1", "]", "or", "action", "==", "word", "[", "-", "2", "]", ":", "\n", "                        ", "print", "(", "'action filter'", ",", "subject", ",", "action", ",", "i", ")", "\n", "k", ".", "append", "(", "i", ")", "\n", "g", ".", "append", "(", "[", "subject", ",", "action", "]", ")", "\n", "", "", "", "", "", "print", "(", "len", "(", "k", ")", ")", "\n", "sort_in", "=", "np", ".", "argsort", "(", "np", ".", "array", "(", "k", ")", ")", "\n", "sort_i", ",", "sort_sub", ",", "sort_act", "=", "np", ".", "array", "(", "k", ")", "[", "sort_in", "]", ",", "np", ".", "array", "(", "g", ")", "[", "sort_in", "]", "[", "0", "]", ",", "np", ".", "array", "(", "g", ")", "[", "sort_in", "]", "[", "1", "]", "\n", "print", "(", "sort_i", ",", "sort_sub", ",", "sort_act", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.data.data_utils.suggest_metadata": [[56, 63], ["KeyError", "names.append"], "function", ["None"], ["def", "suggest_metadata", "(", "name", ")", ":", "\n", "    ", "names", "=", "[", "]", "\n", "for", "metadata", "in", "[", "mpii_metadata", ",", "coco_metadata", ",", "h36m_metadata", ",", "humaneva15_metadata", ",", "humaneva20_metadata", "]", ":", "\n", "        ", "if", "metadata", "[", "'layout_name'", "]", "in", "name", ":", "\n", "            ", "return", "metadata", "\n", "", "names", ".", "append", "(", "metadata", "[", "'layout_name'", "]", ")", "\n", "", "raise", "KeyError", "(", "'Cannot infer keypoint layout from name \"{}\". Tried {}.'", ".", "format", "(", "name", ",", "names", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.data.data_utils.import_detectron_poses": [[64, 81], ["numpy.load", "range", "numpy.array", "len", "numpy.argmax", "[].T.copy", "np.array.append", "len", "np.array.append"], "function", ["None"], ["", "def", "import_detectron_poses", "(", "path", ")", ":", "\n", "# Latin1 encoding because Detectron runs on Python 2.7", "\n", "    ", "data", "=", "np", ".", "load", "(", "path", ",", "encoding", "=", "'latin1'", ")", "\n", "kp", "=", "data", "[", "'keypoints'", "]", "\n", "bb", "=", "data", "[", "'boxes'", "]", "\n", "results", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "bb", ")", ")", ":", "\n", "        ", "if", "len", "(", "bb", "[", "i", "]", "[", "1", "]", ")", "==", "0", ":", "\n", "            ", "assert", "i", ">", "0", "\n", "# Use last pose in case of detection failure", "\n", "results", ".", "append", "(", "results", "[", "-", "1", "]", ")", "\n", "continue", "\n", "", "best_match", "=", "np", ".", "argmax", "(", "bb", "[", "i", "]", "[", "1", "]", "[", ":", ",", "4", "]", ")", "\n", "keypoints", "=", "kp", "[", "i", "]", "[", "1", "]", "[", "best_match", "]", ".", "T", ".", "copy", "(", ")", "\n", "results", ".", "append", "(", "keypoints", ")", "\n", "", "results", "=", "np", ".", "array", "(", "results", ")", "\n", "return", "results", "[", ":", ",", ":", ",", "4", ":", "6", "]", "# Soft-argmax", "\n", "#return results[:, :, [0, 1, 3]] # Argmax + score", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.data.data_utils.import_cpn_poses": [[84, 88], ["numpy.load"], "function", ["None"], ["", "def", "import_cpn_poses", "(", "path", ")", ":", "\n", "    ", "data", "=", "np", ".", "load", "(", "path", ")", "\n", "kp", "=", "data", "[", "'keypoints'", "]", "\n", "return", "kp", "[", ":", ",", ":", ",", ":", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.data.data_utils.import_sh_poses": [[90, 94], ["positions.astype", "h5py.File"], "function", ["None"], ["", "def", "import_sh_poses", "(", "path", ")", ":", "\n", "    ", "with", "h5py", ".", "File", "(", "path", ")", "as", "hf", ":", "\n", "        ", "positions", "=", "hf", "[", "'poses'", "]", ".", "value", "\n", "", "return", "positions", ".", "astype", "(", "'float32'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.data.data_utils.suggest_pose_importer": [[95, 103], ["KeyError"], "function", ["None"], ["", "def", "suggest_pose_importer", "(", "name", ")", ":", "\n", "    ", "if", "'detectron'", "in", "name", ":", "\n", "        ", "return", "import_detectron_poses", "\n", "", "if", "'cpn'", "in", "name", ":", "\n", "        ", "return", "import_cpn_poses", "\n", "", "if", "'sh'", "in", "name", ":", "\n", "        ", "return", "import_sh_poses", "\n", "", "raise", "KeyError", "(", "'Cannot infer keypoint format from name \"{}\". Tried detectron, cpn, sh.'", ".", "format", "(", "name", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.data.prepare_data_2d_h36m_sh.process_subject": [[41, 59], ["[].replace().split", "len", "str", "len", "str", "h5py.File", "positions.astype", "len", "len", "[].replace", "os.path.splitext", "os.path.basename"], "function", ["None"], ["def", "process_subject", "(", "subject", ",", "file_list", ",", "output", ")", ":", "\n", "    ", "if", "subject", "==", "'S11'", ":", "\n", "        ", "assert", "len", "(", "file_list", ")", "==", "119", ",", "\"Expected 119 files for subject \"", "+", "subject", "+", "\", got \"", "+", "str", "(", "len", "(", "file_list", ")", ")", "\n", "", "else", ":", "\n", "        ", "assert", "len", "(", "file_list", ")", "==", "120", ",", "\"Expected 120 files for subject \"", "+", "subject", "+", "\", got \"", "+", "str", "(", "len", "(", "file_list", ")", ")", "\n", "\n", "", "for", "f", "in", "file_list", ":", "\n", "        ", "action", ",", "cam", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "f", ")", ")", "[", "0", "]", ".", "replace", "(", "'_'", ",", "' '", ")", ".", "split", "(", "'.'", ")", "\n", "\n", "if", "subject", "==", "'S11'", "and", "action", "==", "'Directions'", ":", "\n", "            ", "continue", "# Discard corrupted video", "\n", "\n", "", "if", "action", "not", "in", "output", "[", "subject", "]", ":", "\n", "            ", "output", "[", "subject", "]", "[", "action", "]", "=", "[", "None", ",", "None", ",", "None", ",", "None", "]", "\n", "\n", "", "with", "h5py", ".", "File", "(", "f", ")", "as", "hf", ":", "\n", "            ", "positions", "=", "hf", "[", "'poses'", "]", ".", "value", "\n", "output", "[", "subject", "]", "[", "action", "]", "[", "cam_map", "[", "cam", "]", "]", "=", "positions", ".", "astype", "(", "'float32'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.arguments.basic_args.parse_args": [[10, 190], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "exit", "print", "exit"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.arguments.basic_args.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Training SRNet script'", ")", "\n", "\n", "# General arguments", "\n", "parser", ".", "add_argument", "(", "'-d'", ",", "'--dataset'", ",", "default", "=", "'h36m'", ",", "type", "=", "str", ",", "metavar", "=", "'NAME'", ",", "help", "=", "'target dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'-k'", ",", "'--keypoints'", ",", "default", "=", "'gt'", ",", "type", "=", "str", ",", "metavar", "=", "'NAME'", ",", "\n", "help", "=", "'2D detections to use'", ",", "choices", "=", "[", "'gt'", ",", "'cpn_ft_h36m_dbb'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--rand-seed'", ",", "default", "=", "4321", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "help", "=", "'random seeds'", ")", "\n", "### Protocol settings", "\n", "# Differ from subjects (people), e.g. standard protocol 1 (mpjpe) & 2 (pa-mpjpe)#S5,S6,S7,S8", "\n", "parser", ".", "add_argument", "(", "'-str'", ",", "'--subjects-train'", ",", "default", "=", "'S1,S5,S6,S7,S8'", ",", "type", "=", "str", ",", "metavar", "=", "'LIST'", ",", "\n", "help", "=", "'training subjects separated by comma'", ")", "\n", "parser", ".", "add_argument", "(", "'-ste'", ",", "'--subjects-test'", ",", "default", "=", "'S9,S11'", ",", "type", "=", "str", ",", "metavar", "=", "'LIST'", ",", "\n", "help", "=", "'test subjects separated by comma'", ")", "\n", "parser", ".", "add_argument", "(", "'--subjects-full'", ",", "default", "=", "'S1,S5,S6,S7,S8,S9,S11'", ",", "type", "=", "str", ",", "metavar", "=", "'LIST'", ",", "\n", "help", "=", "'All subjects separated by comma'", ")", "\n", "parser", ".", "add_argument", "(", "'-sun'", ",", "'--subjects-unlabeled'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "metavar", "=", "'LIST'", ",", "\n", "help", "=", "'unlabeled subjects separated by comma for self-supervision'", ")", "\n", "\n", "# Differ from actions, e.g. cross-action validation protocol (one action for training, others for test)", "\n", "parser", ".", "add_argument", "(", "'-a'", ",", "'--actions'", ",", "default", "=", "'*'", ",", "type", "=", "str", ",", "metavar", "=", "'LIST'", ",", "\n", "help", "=", "'actions to train/test on, separated by comma, or * for all'", ")", "\n", "parser", ".", "add_argument", "(", "'--use-action-split'", ",", "default", "=", "False", ",", "help", "=", "'Train one some actions, test on others'", ")", "\n", "parser", ".", "add_argument", "(", "'--train-action'", ",", "default", "=", "'Discussion'", ",", "type", "=", "str", ",", "metavar", "=", "'LIST'", ",", "\n", "help", "=", "'action name for training'", ")", "\n", "parser", ".", "add_argument", "(", "'--test-action'", ",", "\n", "default", "=", "'Greeting,Sitting,SittingDown,WalkTogether,Phoning,Posing,WalkDog,Walking,Purchases,Waiting,Directions,Smoking,Photo,Eating'", ",", "\n", "type", "=", "str", ",", "metavar", "=", "'LIST'", ",", "help", "=", "'action name for test'", ")", "\n", "parser", ".", "add_argument", "(", "'--all-action'", ",", "\n", "default", "=", "'Greeting,Sitting,SittingDown,WalkTogether,Phoning,Posing,WalkDog,Walking,Purchases,Waiting,Directions,Smoking,Photo,Eating,Discussion'", ",", "\n", "type", "=", "str", ",", "metavar", "=", "'LIST'", ",", "help", "=", "'action name for test'", ")", "\n", "parser", ".", "add_argument", "(", "'--action_unlabeled'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "metavar", "=", "'LIST'", ",", "help", "=", "'action name for training'", ")", "\n", "\n", "# Differ from camera settings, e.g. cross-camera validation", "\n", "parser", ".", "add_argument", "(", "'--cam-test'", ",", "default", "=", "''", ",", "type", "=", "list", ",", "metavar", "=", "'LIST'", ",", "\n", "help", "=", "'test camera viewpoint, If None, use all cameras; If [5], choose four of them randomly'", ",", "\n", "choices", "=", "[", "0", ",", "1", ",", "2", ",", "3", ",", "5", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--cam-train'", ",", "default", "=", "''", ",", "type", "=", "list", ",", "metavar", "=", "'LIST'", ",", "\n", "help", "=", "'train camera viewpoint,If None, use all cameras; If [5], choose four of them randomly'", ",", "\n", "choices", "=", "[", "0", ",", "1", ",", "2", ",", "3", ",", "5", "]", ")", "\n", "\n", "#### The data to test:", "\n", "parser", ".", "add_argument", "(", "'--three-dpw'", ",", "default", "=", "False", ",", "help", "=", "'Cross train/test on 3DPW testset'", ")", "\n", "parser", ".", "add_argument", "(", "'--use-hard-test'", ",", "default", "=", "False", ",", "\n", "help", "=", "'For evaluation setting, using rarest N% test set in S9/S11'", ")", "\n", "parser", ".", "add_argument", "(", "'--use-mpi-test'", ",", "default", "=", "False", ",", "help", "=", "'Cross test on MPI-INF-3DHP'", ")", "\n", "\n", "#### Data normalization", "\n", "parser", ".", "add_argument", "(", "'--norm'", ",", "choices", "=", "[", "'base'", ",", "'proj'", ",", "'weak_proj'", ",", "'lcn'", "]", ",", "type", "=", "str", ",", "help", "=", "'way of data normalization'", ",", "default", "=", "'base'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-c'", ",", "'--checkpoint'", ",", "default", "=", "'checkpoint'", ",", "type", "=", "str", ",", "metavar", "=", "'PATH'", ",", "\n", "help", "=", "'checkpoint directory to store models'", ")", "\n", "parser", ".", "add_argument", "(", "'-bc'", ",", "'--best-checkpoint'", ",", "default", "=", "'best_checkpoint'", ",", "type", "=", "str", ",", "metavar", "=", "'PATH'", ",", "\n", "help", "=", "'best checkpoint directory to store the best models'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint-frequency'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'create a checkpoint every N epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'-r'", ",", "'--resume'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "metavar", "=", "'FILENAME'", ",", "\n", "help", "=", "'checkpoint to resume (file name)'", ")", "\n", "parser", ".", "add_argument", "(", "'--evaluate'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "metavar", "=", "'FILENAME'", ",", "\n", "help", "=", "'checkpoint to evaluate (file name)'", ")", "\n", "parser", ".", "add_argument", "(", "'-ft'", ",", "'--finetune'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "metavar", "=", "'FILENAME'", ",", "\n", "help", "=", "'checkpoint to finetune (file name)'", ")", "\n", "parser", ".", "add_argument", "(", "'--render'", ",", "action", "=", "'store_true'", ",", "help", "=", "'visualize a particular video'", ")", "\n", "parser", ".", "add_argument", "(", "'--by-subject'", ",", "action", "=", "'store_true'", ",", "help", "=", "'break down error by subject (on evaluation)'", ")", "\n", "parser", ".", "add_argument", "(", "'--export-training-curves'", ",", "action", "=", "'store_true'", ",", "help", "=", "'save training curves as .png images'", ")", "\n", "\n", "# Model arguments", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "default", "=", "'srnet'", ",", "type", "=", "str", ",", "choices", "=", "[", "'srnet'", ",", "'fc'", "]", ",", "\n", "help", "=", "'the name of models which you train'", ")", "\n", "parser", ".", "add_argument", "(", "'-mn'", ",", "'--model-name'", ",", "default", "=", "'sr_h36m_gt2d'", ",", "type", "=", "str", ",", "\n", "help", "=", "'the name of models which you want to save'", ")", "\n", "parser", ".", "add_argument", "(", "'-s'", ",", "'--stride'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "help", "=", "'chunk size to use during training'", ")", "\n", "parser", ".", "add_argument", "(", "'-e'", ",", "'--epochs'", ",", "default", "=", "60", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "help", "=", "'number of training epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'-b'", ",", "'--batch-size'", ",", "default", "=", "1024", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'batch size in terms of predicted frames'", ")", "\n", "parser", ".", "add_argument", "(", "'-tb'", ",", "'--test-batch-size'", ",", "default", "=", "100", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'batch size in terms of predicted frames'", ")", "\n", "parser", ".", "add_argument", "(", "'-arc'", ",", "'--architecture'", ",", "default", "=", "'1,1,1'", ",", "type", "=", "str", ",", "metavar", "=", "'LAYERS'", ",", "\n", "help", "=", "'filter widths separated by comma'", ")", "\n", "parser", ".", "add_argument", "(", "'--causal'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use causal convolutions for real-time processing'", ")", "\n", "parser", ".", "add_argument", "(", "'-ch'", ",", "'--channels'", ",", "default", "=", "1024", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of channels in convolution layers'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-drop'", ",", "'--dropout'", ",", "default", "=", "0", ",", "type", "=", "float", ",", "metavar", "=", "'P'", ",", "help", "=", "'dropout probability'", ")", "\n", "parser", ".", "add_argument", "(", "'-lr'", ",", "'--learning-rate'", ",", "default", "=", "0.001", ",", "type", "=", "float", ",", "metavar", "=", "'LR'", ",", "help", "=", "'initial learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'-lrd'", ",", "'--lr-decay'", ",", "default", "=", "0.95", ",", "type", "=", "float", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'learning rate decay per epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'-no-da'", ",", "'--no-data-augmentation'", ",", "dest", "=", "'data_augmentation'", ",", "action", "=", "'store_false'", ",", "\n", "help", "=", "'disable train-time flipping'", ")", "\n", "parser", ".", "add_argument", "(", "'-no-tta'", ",", "'--no-test-time-augmentation'", ",", "dest", "=", "'test_time_augmentation'", ",", "action", "=", "'store_false'", ",", "\n", "help", "=", "'disable test-time flipping'", ")", "\n", "parser", ".", "add_argument", "(", "'--conf'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "help", "=", "'confidence score number'", ")", "\n", "#### basic model settings, Experimental", "\n", "parser", ".", "add_argument", "(", "'--subset'", ",", "default", "=", "1", ",", "type", "=", "float", ",", "metavar", "=", "'FRACTION'", ",", "help", "=", "'reduce dataset size by fraction'", ")", "\n", "parser", ".", "add_argument", "(", "'--downsample'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "metavar", "=", "'FACTOR'", ",", "\n", "help", "=", "'downsample frame rate by factor (semi-supervised)'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "help", "=", "'warm-up epochs for semi-supervision'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-eval'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'disable epoch evaluation while training (small speed-up)'", ")", "\n", "parser", ".", "add_argument", "(", "'--dense'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use dense convolutions instead of dilated convolutions'", ")", "\n", "parser", ".", "add_argument", "(", "'--disable-optimizations'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'disable optimized model for single-frame predictions'", ")", "\n", "parser", ".", "add_argument", "(", "'--linear-projection'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use only linear coefficients for semi-supervised projection'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-bone-length'", ",", "action", "=", "'store_false'", ",", "dest", "=", "'bone_length_term'", ",", "\n", "help", "=", "'disable bone length term in semi-supervised settings'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-proj'", ",", "action", "=", "'store_true'", ",", "help", "=", "'disable projection for semi-supervised setting'", ")", "\n", "parser", ".", "add_argument", "(", "'--root-log'", ",", "default", "=", "'log'", ",", "type", "=", "str", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--train-rotation'", ",", "default", "=", "False", ",", "\n", "help", "=", "'Use random Y-axis rotation for training stage, please close train-flip augmentation!'", ")", "\n", "parser", ".", "add_argument", "(", "'--repeat-num'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "help", "=", "'number of repeat rotation'", ")", "\n", "\n", "# Temporal Pose settings", "\n", "parser", ".", "add_argument", "(", "'--use-same-3d-input'", ",", "default", "=", "False", ",", "help", "=", "'input frame number is equal to output frame number'", ")", "\n", "\n", "#### For smooth loss:", "\n", "parser", ".", "add_argument", "(", "'--threshold'", ",", "default", "=", "0.0004", ",", "type", "=", "float", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'The threshold of smooth loss to control the loss functions'", ")", "\n", "parser", ".", "add_argument", "(", "'--mi'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "metavar", "=", "'LR'", ",", "help", "=", "'The pow of smooth loss'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--scale'", ",", "default", "=", "0.001", ",", "type", "=", "float", ",", "metavar", "=", "'LR'", ",", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--rnum'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "metavar", "=", "'LR'", ",", "help", "=", "''", ")", "\n", "\n", "# Render function Visualization", "\n", "parser", ".", "add_argument", "(", "'--viz-subject'", ",", "type", "=", "str", ",", "metavar", "=", "'STR'", ",", "help", "=", "'subject to render'", ")", "\n", "parser", ".", "add_argument", "(", "'--viz-action'", ",", "type", "=", "str", ",", "metavar", "=", "'STR'", ",", "help", "=", "'action to render'", ")", "\n", "parser", ".", "add_argument", "(", "'--viz-camera'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "metavar", "=", "'N'", ",", "help", "=", "'camera to render'", ")", "\n", "parser", ".", "add_argument", "(", "'--viz-video'", ",", "type", "=", "str", ",", "metavar", "=", "'PATH'", ",", "help", "=", "'path to input video'", ")", "\n", "parser", ".", "add_argument", "(", "'--viz-skip'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "metavar", "=", "'N'", ",", "help", "=", "'skip first N frames of input video'", ")", "\n", "parser", ".", "add_argument", "(", "'--viz-output'", ",", "type", "=", "str", ",", "metavar", "=", "'PATH'", ",", "help", "=", "'output file name (.gif or .mp4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--viz-export'", ",", "type", "=", "str", ",", "metavar", "=", "'PATH'", ",", "help", "=", "'output file name for coordinates'", ")", "\n", "parser", ".", "add_argument", "(", "'--viz-bitrate'", ",", "type", "=", "int", ",", "default", "=", "3000", ",", "metavar", "=", "'N'", ",", "help", "=", "'bitrate for mp4 videos'", ")", "\n", "parser", ".", "add_argument", "(", "'--viz-no-ground-truth'", ",", "action", "=", "'store_true'", ",", "help", "=", "'do not show ground-truth poses'", ")", "\n", "parser", ".", "add_argument", "(", "'--viz-limit'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "metavar", "=", "'N'", ",", "help", "=", "'only render first N frames'", ")", "\n", "parser", ".", "add_argument", "(", "'--viz-downsample'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'N'", ",", "help", "=", "'downsample FPS by a factor N'", ")", "\n", "parser", ".", "add_argument", "(", "'--viz-size'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "metavar", "=", "'N'", ",", "help", "=", "'image size'", ")", "\n", "\n", "parser", ".", "set_defaults", "(", "bone_length_term", "=", "True", ")", "\n", "parser", ".", "set_defaults", "(", "data_augmentation", "=", "True", ")", "\n", "parser", ".", "set_defaults", "(", "test_time_augmentation", "=", "True", ")", "\n", "\n", "### SRNet arguments", "\n", "### split features", "\n", "parser", ".", "add_argument", "(", "'-mo'", ",", "'--modulation'", ",", "default", "=", "False", ",", "\n", "help", "=", "'Use modulation module for temporal mask self-attention multiply the whole channel [all joint inputs]'", ")", "\n", "parser", ".", "add_argument", "(", "'--group-modulation'", ",", "default", "=", "False", ",", "\n", "help", "=", "'Use modulation module for multiply each group as local attention [group-wise joint inputs]'", ")", "\n", "parser", ".", "add_argument", "(", "'--split-modulation'", ",", "default", "=", "True", ",", "\n", "help", "=", "'Use modulation module multiply each group as global attention [except local joint inputs]'", ")", "\n", "parser", ".", "add_argument", "(", "'--channelwise'", ",", "default", "=", "False", ",", "\n", "help", "=", "'Use modulation module multiply each group with channel-wise attention [all joint inputs]'", ")", "\n", "### recombine feature source", "\n", "\n", "parser", ".", "add_argument", "(", "'--split'", ",", "choices", "=", "[", "'all'", ",", "'others'", ",", "'none'", "]", ",", "type", "=", "str", ",", "\n", "help", "=", "'way of feature split'", ",", "default", "=", "'others'", ")", "\n", "\n", "### recombine operators", "\n", "parser", ".", "add_argument", "(", "'--recombine'", ",", "choices", "=", "[", "'multiply'", ",", "'add'", ",", "'concat'", "]", ",", "type", "=", "str", ",", "\n", "help", "=", "'way of low-dimension global features and local feature recombination'", ",", "default", "=", "'multiply'", ")", "\n", "parser", ".", "add_argument", "(", "'--mean-func'", ",", "default", "=", "False", ",", "help", "=", "'Use mean function [other joint inputs]'", ")", "\n", "parser", ".", "add_argument", "(", "'--repeat-concat'", ",", "default", "=", "False", ",", "\n", "help", "=", "'Use [repeat number] concatenate for fusion group feature and other joint features, if True, --concat must be True'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--ups-mean'", ",", "default", "=", "False", ",", "help", "=", "'Use flexible mean function [other joint inputs]'", ")", "\n", "\n", "# Group number", "\n", "parser", ".", "add_argument", "(", "'--group'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "metavar", "=", "'N'", ",", "help", "=", "'Guide the group strategies'", ",", "choices", "=", "[", "1", ",", "2", ",", "3", ",", "5", "]", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "# Check invalid configuration", "\n", "if", "args", ".", "resume", "and", "args", ".", "evaluate", ":", "\n", "        ", "print", "(", "'Invalid flags: --resume and --evaluate cannot be set at the same time'", ")", "\n", "exit", "(", ")", "\n", "\n", "", "if", "args", ".", "export_training_curves", "and", "args", ".", "no_eval", ":", "\n", "        ", "print", "(", "'Invalid flags: --export-training-curves and --no-eval cannot be set at the same time'", ")", "\n", "exit", "(", ")", "\n", "\n", "", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.visualization.show_video.ColorStyle.__init__": [[88, 99], ["range", "range", "len", "show_video.ColorStyle.line_color.append", "len", "show_video.ColorStyle.ring_color.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "color", ",", "link_pairs", ",", "point_color", ")", ":", "\n", "        ", "self", ".", "color", "=", "color", "\n", "self", ".", "link_pairs", "=", "link_pairs", "\n", "self", ".", "point_color", "=", "point_color", "\n", "self", ".", "line_color", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "color", ")", ")", ":", "\n", "            ", "self", ".", "line_color", ".", "append", "(", "self", ".", "color", "[", "i", "]", ")", "\n", "\n", "", "self", ".", "ring_color", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "point_color", ")", ")", ":", "\n", "            ", "self", ".", "ring_color", ".", "append", "(", "self", ".", "point_color", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.visualization.show_video.get_resolution": [[21, 28], ["subprocess.Popen", "line.decode().strip().split", "int", "int", "line.decode().strip", "line.decode"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.data.prepare_data_2d_custom.decode"], ["def", "get_resolution", "(", "filename", ")", ":", "\n", "    ", "command", "=", "[", "'ffprobe'", ",", "'-v'", ",", "'error'", ",", "'-select_streams'", ",", "'v:0'", ",", "\n", "'-show_entries'", ",", "'stream=width,height'", ",", "'-of'", ",", "'csv=p=0'", ",", "filename", "]", "\n", "with", "sp", ".", "Popen", "(", "command", ",", "stdout", "=", "sp", ".", "PIPE", ",", "bufsize", "=", "-", "1", ")", "as", "pipe", ":", "\n", "        ", "for", "line", "in", "pipe", ".", "stdout", ":", "\n", "            ", "w", ",", "h", "=", "line", ".", "decode", "(", ")", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "\n", "return", "int", "(", "w", ")", ",", "int", "(", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.visualization.show_video.get_fps": [[30, 37], ["subprocess.Popen", "line.decode().strip().split", "int", "int", "line.decode().strip", "line.decode"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.data.prepare_data_2d_custom.decode"], ["", "", "", "def", "get_fps", "(", "filename", ")", ":", "\n", "    ", "command", "=", "[", "'ffprobe'", ",", "'-v'", ",", "'error'", ",", "'-select_streams'", ",", "'v:0'", ",", "\n", "'-show_entries'", ",", "'stream=r_frame_rate'", ",", "'-of'", ",", "'csv=p=0'", ",", "filename", "]", "\n", "with", "sp", ".", "Popen", "(", "command", ",", "stdout", "=", "sp", ".", "PIPE", ",", "bufsize", "=", "-", "1", ")", "as", "pipe", ":", "\n", "        ", "for", "line", "in", "pipe", ".", "stdout", ":", "\n", "            ", "a", ",", "b", "=", "line", ".", "decode", "(", ")", ".", "strip", "(", ")", ".", "split", "(", "'/'", ")", "\n", "return", "int", "(", "a", ")", "/", "int", "(", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.visualization.show_video.read_video": [[39, 60], ["show_video.get_resolution", "subprocess.Popen", "pipe.stdout.read", "numpy.frombuffer().reshape", "numpy.frombuffer"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.visualization.show_video.get_resolution"], ["", "", "", "def", "read_video", "(", "filename", ",", "skip", "=", "0", ",", "limit", "=", "-", "1", ")", ":", "\n", "    ", "w", ",", "h", "=", "get_resolution", "(", "filename", ")", "\n", "\n", "command", "=", "[", "'ffmpeg'", ",", "\n", "'-i'", ",", "filename", ",", "\n", "'-f'", ",", "'image2pipe'", ",", "\n", "'-pix_fmt'", ",", "'rgb24'", ",", "\n", "'-vsync'", ",", "'0'", ",", "\n", "'-vcodec'", ",", "'rawvideo'", ",", "'-'", "]", "\n", "\n", "i", "=", "0", "\n", "with", "sp", ".", "Popen", "(", "command", ",", "stdout", "=", "sp", ".", "PIPE", ",", "bufsize", "=", "-", "1", ")", "as", "pipe", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "data", "=", "pipe", ".", "stdout", ".", "read", "(", "w", "*", "h", "*", "3", ")", "\n", "if", "not", "data", ":", "\n", "                ", "break", "\n", "", "i", "+=", "1", "\n", "if", "i", ">", "limit", "and", "limit", "!=", "-", "1", ":", "\n", "                ", "continue", "\n", "", "if", "i", ">", "skip", ":", "\n", "                ", "yield", "np", ".", "frombuffer", "(", "data", ",", "dtype", "=", "'uint8'", ")", ".", "reshape", "(", "(", "h", ",", "w", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.visualization.show_video.downsample_tensor": [[62, 65], ["numpy.mean", "X[].reshape"], "function", ["None"], ["", "", "", "", "def", "downsample_tensor", "(", "X", ",", "factor", ")", ":", "\n", "    ", "length", "=", "X", ".", "shape", "[", "0", "]", "//", "factor", "*", "factor", "\n", "return", "np", ".", "mean", "(", "X", "[", ":", "length", "]", ".", "reshape", "(", "-", "1", ",", "factor", ",", "*", "X", ".", "shape", "[", "1", ":", "]", ")", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.visualization.show_video.show_2d_hm36_pose": [[101, 122], ["show_video.ColorStyle", "enumerate", "cv2.imshow", "cv2.waitKey", "cv2.destroyAllWindows", "numpy.zeros", "cv2.imread", "cv2.line", "cv2.circle", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["", "", "", "def", "show_2d_hm36_pose", "(", "img_path", ",", "pose_2d", ",", "index", "=", "0", ")", ":", "\n", "# plot single pose from a image", "\n", "    ", "colorstyle", "=", "ColorStyle", "(", "color1", ",", "link_pairs1", ",", "point_color1", ")", "\n", "connections", "=", "[", "[", "0", ",", "1", "]", ",", "[", "1", ",", "2", "]", ",", "[", "2", ",", "3", "]", ",", "[", "0", ",", "4", "]", ",", "[", "4", ",", "5", "]", ",", "\n", "[", "5", ",", "6", "]", ",", "[", "0", ",", "7", "]", ",", "[", "7", ",", "8", "]", ",", "[", "8", ",", "9", "]", ",", "[", "9", ",", "10", "]", ",", "\n", "[", "8", ",", "11", "]", ",", "[", "11", ",", "12", "]", ",", "[", "12", ",", "13", "]", ",", "[", "8", ",", "14", "]", ",", "[", "14", ",", "15", "]", ",", "[", "15", ",", "16", "]", "]", "\n", "if", "img_path", "is", "None", ":", "\n", "        ", "img", "=", "np", ".", "zeros", "(", "(", "1000", ",", "1000", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "        ", "img", "=", "cv2", ".", "imread", "(", "img_path", ")", "\n", "\n", "", "kps", "=", "pose_2d", "# 2d pose in pixel unit, shape [17, 2]", "\n", "for", "j", ",", "c", "in", "enumerate", "(", "connections", ")", ":", "\n", "        ", "start", "=", "kps", "[", "c", "[", "0", "]", "]", "\n", "end", "=", "kps", "[", "c", "[", "1", "]", "]", "\n", "cv2", ".", "line", "(", "img", ",", "(", "int", "(", "start", "[", "0", "]", ")", ",", "int", "(", "start", "[", "1", "]", ")", ")", ",", "(", "int", "(", "end", "[", "0", "]", ")", ",", "int", "(", "end", "[", "1", "]", ")", ")", ",", "colorstyle", ".", "line_color", "[", "j", "]", ",", "3", ")", "\n", "cv2", ".", "circle", "(", "img", ",", "(", "int", "(", "kps", "[", "j", ",", "0", "]", ")", ",", "int", "(", "kps", "[", "j", ",", "1", "]", ")", ")", ",", "4", ",", "colorstyle", ".", "ring_color", "[", "j", "]", ",", "2", ")", "\n", "", "cv2", ".", "imshow", "(", "'3DPW Example'", ",", "img", ")", "\n", "# cv2.imwrite('data/3dpw/validation/{}_{}_{:05d}.jpg'.format(seq, p_id, index), img)", "\n", "cv2", ".", "waitKey", "(", "0", ")", "\n", "cv2", ".", "destroyAllWindows", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.visualization.show_video.render_animation": [[124, 269], ["matplotlib.ioff", "matplotlib.figure", "plt.figure.add_subplot", "fig.add_subplot.get_xaxis().set_visible", "fig.add_subplot.get_yaxis().set_visible", "fig.add_subplot.set_axis_off", "fig.add_subplot.set_title", "enumerate", "list", "skeleton.parents", "plt.figure.tight_layout", "matplotlib.animation.FuncAnimation", "output.endswith", "matplotlib.close", "list.items", "plt.figure.add_subplot", "fig.add_subplot.view_init", "fig.add_subplot.set_xlim3d", "fig.add_subplot.set_zlim3d", "fig.add_subplot.set_ylim3d", "fig.add_subplot.set_aspect", "fig.add_subplot.set_xticklabels", "fig.add_subplot.set_yticklabels", "fig.add_subplot.set_zticklabels", "fig.add_subplot.set_title", "ax_3d.append", "lines_3d.append", "trajectories.append", "list.values", "numpy.zeros", "show_video.read_video", "min", "range", "show_video.downsample_tensor", "downsample_tensor().astype", "range", "len", "min", "enumerate", "numpy.full", "print", "Writer", "matplotlib.animation.FuncAnimation.save", "output.endswith", "len", "fig.add_subplot.get_xaxis", "fig.add_subplot.get_yaxis", "downsample_tensor().astype.append", "len", "len", "show_video.get_fps", "len", "show_video.downsample_tensor", "show_video.downsample_tensor", "len", "fig.add_subplot.set_xlim3d", "fig.add_subplot.set_ylim3d", "fig.add_subplot.imshow", "enumerate", "fig.add_subplot.scatter", "ax_in.imshow.set_data", "enumerate", "ax_in.scatter.set_offsets", "numpy.arange", "matplotlib.animation.FuncAnimation.save", "ValueError", "len", "show_video.downsample_tensor", "enumerate", "enumerate", "numpy.array", "len", "lines.append", "lines_3d[].append", "len", "[].set_data", "[].set_xdata", "[].set_ydata", "[].set_3d_properties", "len", "fig.add_subplot.plot", "skeleton.joints_right", "fig.add_subplot.plot"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.skeleton.Skeleton.parents", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.visualization.show_video.read_video", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.visualization.show_video.downsample_tensor", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.visualization.show_video.get_fps", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.visualization.show_video.downsample_tensor", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.visualization.show_video.downsample_tensor", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.visualization.show_video.downsample_tensor", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.skeleton.Skeleton.joints_right"], ["", "def", "render_animation", "(", "keypoints", ",", "keypoints_metadata", ",", "poses", ",", "skeleton", ",", "fps", ",", "bitrate", ",", "azim", ",", "output", ",", "viewport", ",", "\n", "limit", "=", "-", "1", ",", "downsample", "=", "1", ",", "size", "=", "6", ",", "input_video_path", "=", "None", ",", "input_video_skip", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    TODO\n    Render an animation. The supported output modes are:\n     -- 'interactive': display an interactive figure\n                       (also works on notebooks if associated with %matplotlib inline)\n     -- 'html': render the animation as HTML5 video. Can be displayed in a notebook using HTML(...).\n     -- 'filename.mp4': render and export the animation as an h264 video (requires ffmpeg).\n     -- 'filename.gif': render and export the animation a gif file (requires imagemagick).\n    \"\"\"", "\n", "plt", ".", "ioff", "(", ")", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "size", "*", "(", "1", "+", "len", "(", "poses", ")", ")", ",", "size", ")", ")", "\n", "ax_in", "=", "fig", ".", "add_subplot", "(", "1", ",", "1", "+", "len", "(", "poses", ")", ",", "1", ")", "\n", "ax_in", ".", "get_xaxis", "(", ")", ".", "set_visible", "(", "False", ")", "\n", "ax_in", ".", "get_yaxis", "(", ")", ".", "set_visible", "(", "False", ")", "\n", "ax_in", ".", "set_axis_off", "(", ")", "\n", "ax_in", ".", "set_title", "(", "'Input'", ")", "\n", "\n", "ax_3d", "=", "[", "]", "\n", "lines_3d", "=", "[", "]", "\n", "trajectories", "=", "[", "]", "\n", "radius", "=", "1.7", "\n", "for", "index", ",", "(", "title", ",", "data", ")", "in", "enumerate", "(", "poses", ".", "items", "(", ")", ")", ":", "\n", "        ", "ax", "=", "fig", ".", "add_subplot", "(", "1", ",", "1", "+", "len", "(", "poses", ")", ",", "index", "+", "2", ",", "projection", "=", "'3d'", ")", "\n", "ax", ".", "view_init", "(", "elev", "=", "15.", ",", "azim", "=", "azim", ")", "\n", "ax", ".", "set_xlim3d", "(", "[", "-", "radius", "/", "2", ",", "radius", "/", "2", "]", ")", "\n", "ax", ".", "set_zlim3d", "(", "[", "0", ",", "radius", "]", ")", "\n", "ax", ".", "set_ylim3d", "(", "[", "-", "radius", "/", "2", ",", "radius", "/", "2", "]", ")", "\n", "ax", ".", "set_aspect", "(", "'equal'", ")", "\n", "ax", ".", "set_xticklabels", "(", "[", "]", ")", "\n", "ax", ".", "set_yticklabels", "(", "[", "]", ")", "\n", "ax", ".", "set_zticklabels", "(", "[", "]", ")", "\n", "ax", ".", "dist", "=", "7.5", "\n", "ax", ".", "set_title", "(", "title", ")", "# , pad=35", "\n", "ax_3d", ".", "append", "(", "ax", ")", "\n", "lines_3d", ".", "append", "(", "[", "]", ")", "\n", "trajectories", ".", "append", "(", "data", "[", ":", ",", "0", ",", "[", "0", ",", "1", "]", "]", ")", "\n", "", "poses", "=", "list", "(", "poses", ".", "values", "(", ")", ")", "\n", "\n", "# Decode video", "\n", "if", "input_video_path", "is", "None", ":", "\n", "# Black background", "\n", "        ", "all_frames", "=", "np", ".", "zeros", "(", "(", "keypoints", ".", "shape", "[", "0", "]", ",", "viewport", "[", "1", "]", ",", "viewport", "[", "0", "]", ")", ",", "dtype", "=", "'uint8'", ")", "\n", "", "else", ":", "\n", "# Load video using ffmpeg", "\n", "        ", "all_frames", "=", "[", "]", "\n", "for", "f", "in", "read_video", "(", "input_video_path", ",", "skip", "=", "input_video_skip", ",", "limit", "=", "limit", ")", ":", "\n", "            ", "all_frames", ".", "append", "(", "f", ")", "\n", "", "effective_length", "=", "min", "(", "keypoints", ".", "shape", "[", "0", "]", ",", "len", "(", "all_frames", ")", ")", "\n", "all_frames", "=", "all_frames", "[", ":", "effective_length", "]", "\n", "\n", "keypoints", "=", "keypoints", "[", "input_video_skip", ":", "]", "# todo remove", "\n", "for", "idx", "in", "range", "(", "len", "(", "poses", ")", ")", ":", "\n", "            ", "poses", "[", "idx", "]", "=", "poses", "[", "idx", "]", "[", "input_video_skip", ":", "]", "\n", "\n", "", "if", "fps", "is", "None", ":", "\n", "            ", "fps", "=", "get_fps", "(", "input_video_path", ")", "\n", "\n", "", "", "if", "downsample", ">", "1", ":", "\n", "        ", "keypoints", "=", "downsample_tensor", "(", "keypoints", ",", "downsample", ")", "\n", "all_frames", "=", "downsample_tensor", "(", "np", ".", "array", "(", "all_frames", ")", ",", "downsample", ")", ".", "astype", "(", "'uint8'", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "poses", ")", ")", ":", "\n", "            ", "poses", "[", "idx", "]", "=", "downsample_tensor", "(", "poses", "[", "idx", "]", ",", "downsample", ")", "\n", "trajectories", "[", "idx", "]", "=", "downsample_tensor", "(", "trajectories", "[", "idx", "]", ",", "downsample", ")", "\n", "", "fps", "/=", "downsample", "\n", "\n", "", "initialized", "=", "False", "\n", "image", "=", "None", "\n", "lines", "=", "[", "]", "\n", "points", "=", "None", "\n", "\n", "if", "limit", "<", "1", ":", "\n", "        ", "limit", "=", "len", "(", "all_frames", ")", "\n", "", "else", ":", "\n", "        ", "limit", "=", "min", "(", "limit", ",", "len", "(", "all_frames", ")", ")", "\n", "\n", "", "parents", "=", "skeleton", ".", "parents", "(", ")", "\n", "\n", "def", "update_video", "(", "i", ")", ":", "\n", "        ", "nonlocal", "initialized", ",", "image", ",", "lines", ",", "points", "\n", "\n", "for", "n", ",", "ax", "in", "enumerate", "(", "ax_3d", ")", ":", "\n", "            ", "ax", ".", "set_xlim3d", "(", "[", "-", "radius", "/", "2", "+", "trajectories", "[", "n", "]", "[", "i", ",", "0", "]", ",", "radius", "/", "2", "+", "trajectories", "[", "n", "]", "[", "i", ",", "0", "]", "]", ")", "\n", "ax", ".", "set_ylim3d", "(", "[", "-", "radius", "/", "2", "+", "trajectories", "[", "n", "]", "[", "i", ",", "1", "]", ",", "radius", "/", "2", "+", "trajectories", "[", "n", "]", "[", "i", ",", "1", "]", "]", ")", "\n", "\n", "# Update 2D poses", "\n", "", "joints_right_2d", "=", "keypoints_metadata", "[", "'keypoints_symmetry'", "]", "[", "1", "]", "\n", "colors_2d", "=", "np", ".", "full", "(", "keypoints", ".", "shape", "[", "1", "]", ",", "'black'", ")", "\n", "colors_2d", "[", "joints_right_2d", "]", "=", "'red'", "\n", "if", "not", "initialized", ":", "\n", "            ", "image", "=", "ax_in", ".", "imshow", "(", "all_frames", "[", "i", "]", ",", "aspect", "=", "'equal'", ")", "\n", "\n", "for", "j", ",", "j_parent", "in", "enumerate", "(", "parents", ")", ":", "\n", "                ", "if", "j_parent", "==", "-", "1", ":", "\n", "                    ", "continue", "\n", "\n", "", "if", "len", "(", "parents", ")", "==", "keypoints", ".", "shape", "[", "1", "]", ":", "\n", "# Draw skeleton only if keypoints match (otherwise we don't have the parents definition)", "\n", "                    ", "lines", ".", "append", "(", "ax_in", ".", "plot", "(", "[", "keypoints", "[", "i", ",", "j", ",", "0", "]", ",", "keypoints", "[", "i", ",", "j_parent", ",", "0", "]", "]", ",", "\n", "[", "keypoints", "[", "i", ",", "j", ",", "1", "]", ",", "keypoints", "[", "i", ",", "j_parent", ",", "1", "]", "]", ",", "color", "=", "'pink'", ")", ")", "\n", "\n", "", "col", "=", "'red'", "if", "j", "in", "skeleton", ".", "joints_right", "(", ")", "else", "'black'", "\n", "for", "n", ",", "ax", "in", "enumerate", "(", "ax_3d", ")", ":", "\n", "                    ", "pos", "=", "poses", "[", "n", "]", "[", "i", "]", "\n", "lines_3d", "[", "n", "]", ".", "append", "(", "ax", ".", "plot", "(", "[", "pos", "[", "j", ",", "0", "]", ",", "pos", "[", "j_parent", ",", "0", "]", "]", ",", "\n", "[", "pos", "[", "j", ",", "1", "]", ",", "pos", "[", "j_parent", ",", "1", "]", "]", ",", "\n", "[", "pos", "[", "j", ",", "2", "]", ",", "pos", "[", "j_parent", ",", "2", "]", "]", ",", "zdir", "=", "'z'", ",", "c", "=", "col", ")", ")", "\n", "\n", "", "", "points", "=", "ax_in", ".", "scatter", "(", "*", "keypoints", "[", "i", "]", ".", "T", ",", "10", ",", "color", "=", "colors_2d", ",", "edgecolors", "=", "'white'", ",", "zorder", "=", "10", ")", "\n", "\n", "initialized", "=", "True", "\n", "", "else", ":", "\n", "            ", "image", ".", "set_data", "(", "all_frames", "[", "i", "]", ")", "\n", "\n", "for", "j", ",", "j_parent", "in", "enumerate", "(", "parents", ")", ":", "\n", "                ", "if", "j_parent", "==", "-", "1", ":", "\n", "                    ", "continue", "\n", "\n", "", "if", "len", "(", "parents", ")", "==", "keypoints", ".", "shape", "[", "1", "]", ":", "\n", "                    ", "lines", "[", "j", "-", "1", "]", "[", "0", "]", ".", "set_data", "(", "[", "keypoints", "[", "i", ",", "j", ",", "0", "]", ",", "keypoints", "[", "i", ",", "j_parent", ",", "0", "]", "]", ",", "\n", "[", "keypoints", "[", "i", ",", "j", ",", "1", "]", ",", "keypoints", "[", "i", ",", "j_parent", ",", "1", "]", "]", ")", "\n", "\n", "", "for", "n", ",", "ax", "in", "enumerate", "(", "ax_3d", ")", ":", "\n", "                    ", "pos", "=", "poses", "[", "n", "]", "[", "i", "]", "\n", "lines_3d", "[", "n", "]", "[", "j", "-", "1", "]", "[", "0", "]", ".", "set_xdata", "(", "[", "pos", "[", "j", ",", "0", "]", ",", "pos", "[", "j_parent", ",", "0", "]", "]", ")", "\n", "lines_3d", "[", "n", "]", "[", "j", "-", "1", "]", "[", "0", "]", ".", "set_ydata", "(", "[", "pos", "[", "j", ",", "1", "]", ",", "pos", "[", "j_parent", ",", "1", "]", "]", ")", "\n", "lines_3d", "[", "n", "]", "[", "j", "-", "1", "]", "[", "0", "]", ".", "set_3d_properties", "(", "[", "pos", "[", "j", ",", "2", "]", ",", "pos", "[", "j_parent", ",", "2", "]", "]", ",", "zdir", "=", "'z'", ")", "\n", "\n", "", "", "points", ".", "set_offsets", "(", "keypoints", "[", "i", "]", ")", "\n", "\n", "", "print", "(", "'{}/{}      '", ".", "format", "(", "i", ",", "limit", ")", ",", "end", "=", "'\\r'", ")", "\n", "\n", "", "fig", ".", "tight_layout", "(", ")", "\n", "\n", "anim", "=", "FuncAnimation", "(", "fig", ",", "update_video", ",", "frames", "=", "np", ".", "arange", "(", "0", ",", "limit", ")", ",", "interval", "=", "1000", "/", "fps", ",", "repeat", "=", "False", ")", "\n", "if", "output", ".", "endswith", "(", "'.mp4'", ")", ":", "\n", "        ", "Writer", "=", "writers", "[", "'ffmpeg'", "]", "\n", "writer", "=", "Writer", "(", "fps", "=", "fps", ",", "metadata", "=", "{", "}", ",", "bitrate", "=", "bitrate", ")", "\n", "anim", ".", "save", "(", "output", ",", "writer", "=", "writer", ")", "\n", "", "elif", "output", ".", "endswith", "(", "'.gif'", ")", ":", "\n", "        ", "anim", ".", "save", "(", "output", ",", "dpi", "=", "80", ",", "writer", "=", "'imagemagick'", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unsupported output format (only .mp4 and .gif are supported)'", ")", "\n", "", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.visualization.show_video.render_video": [[272, 331], ["[].copy", "UnchunkedGenerator", "evaluate", "print", "print", "numpy.save", "image_coordinates", "show_video.render_animation", "dataset.subjects", "[].copy", "torch.Tensor", "project_to_2d", "numpy.array", "camera_to_world", "camera_to_world", "dataset.cameras", "camera_to_world", "numpy.min", "dataset.skeleton", "dataset.fps", "dataset.cameras", "dataset.cameras", "dataset.cameras"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.experiment.inference.evaluate", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.transformation.cam_utils.image_coordinates", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.visualization.show_video.render_animation", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.mocap_dataset.MocapDataset.subjects", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.transformation.cam_utils.project_to_2d", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.transformation.cam_utils.camera_to_world", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.transformation.cam_utils.camera_to_world", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.mocap_dataset.MocapDataset.cameras", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.transformation.cam_utils.camera_to_world", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.mocap_dataset.MocapDataset.skeleton", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.mocap_dataset.MocapDataset.fps", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.mocap_dataset.MocapDataset.cameras", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.mocap_dataset.MocapDataset.cameras", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.mocap_dataset.MocapDataset.cameras"], ["", "def", "render_video", "(", "keypoints", ",", "dataset", ",", "keypoints_metadata", ",", "pad", ",", "causal_shift", ",", "kps_left", ",", "kps_right", ",", "joints_left", ",", "joints_right", ")", ":", "\n", "    ", "input_keypoints", "=", "keypoints", "[", "args", ".", "viz_subject", "]", "[", "args", ".", "viz_action", "]", "[", "args", ".", "viz_camera", "]", ".", "copy", "(", ")", "\n", "ground_truth", "=", "None", "\n", "if", "args", ".", "viz_subject", "in", "dataset", ".", "subjects", "(", ")", "and", "args", ".", "viz_action", "in", "dataset", "[", "args", ".", "viz_subject", "]", ":", "\n", "        ", "if", "'positions_3d'", "in", "dataset", "[", "args", ".", "viz_subject", "]", "[", "args", ".", "viz_action", "]", ":", "\n", "            ", "ground_truth", "=", "dataset", "[", "args", ".", "viz_subject", "]", "[", "args", ".", "viz_action", "]", "[", "'positions_3d'", "]", "[", "args", ".", "viz_camera", "]", ".", "copy", "(", ")", "\n", "", "", "if", "ground_truth", "is", "None", ":", "\n", "        ", "print", "(", "'INFO: this action is unlabeled. Ground truth will not be rendered.'", ")", "\n", "\n", "", "gen", "=", "UnchunkedGenerator", "(", "None", ",", "[", "ground_truth", "]", "[", "input_keypoints", "]", ",", "\n", "pad", "=", "pad", ",", "causal_shift", "=", "causal_shift", ",", "augment", "=", "args", ".", "test_time_augmentation", ",", "\n", "kps_left", "=", "kps_left", ",", "kps_right", "=", "kps_right", ",", "joints_left", "=", "joints_left", ",", "joints_right", "=", "joints_right", ")", "\n", "prediction", "=", "evaluate", "(", "gen", ",", "return_predictions", "=", "True", ")", "\n", "\n", "if", "args", ".", "viz_export", "is", "not", "None", ":", "\n", "        ", "print", "(", "'Exporting joint positions to'", ",", "args", ".", "viz_export", ")", "\n", "# Predictions are in camera space", "\n", "np", ".", "save", "(", "args", ".", "viz_export", ",", "prediction", ")", "\n", "\n", "", "if", "args", ".", "viz_output", "is", "not", "None", ":", "\n", "# Invert camera transformation", "\n", "        ", "cam", "=", "dataset", ".", "cameras", "(", ")", "[", "args", ".", "viz_subject", "]", "[", "args", ".", "viz_camera", "]", "\n", "if", "ground_truth", "is", "not", "None", ":", "\n", "# Reapply trajectory", "\n", "            ", "trajectory", "=", "ground_truth", "[", ":", ",", ":", "1", "]", "\n", "ground_truth", "[", ":", ",", "1", ":", "]", "+=", "trajectory", "\n", "prediction", "+=", "trajectory", "\n", "prediction", "=", "torch", ".", "Tensor", "(", "prediction", ")", "\n", "\n", "reconstruction_2d_keypoint", "=", "project_to_2d", "(", "prediction", ",", "cam_intrinsic", ")", "# [1024, 1, 17, 2]", "\n", "reconstruction_2d_keypoint", "=", "np", ".", "array", "(", "reconstruction_2d_keypoint", ")", "\n", "\n", "prediction", "=", "camera_to_world", "(", "prediction", ",", "R", "=", "cam", "[", "'orientation'", "]", ",", "t", "=", "cam", "[", "'translation'", "]", ")", "\n", "ground_truth", "=", "camera_to_world", "(", "ground_truth", ",", "R", "=", "cam", "[", "'orientation'", "]", ",", "t", "=", "cam", "[", "'translation'", "]", ")", "\n", "\n", "", "else", ":", "\n", "# If the ground truth is not available, take the camera extrinsic params from a random subject.", "\n", "# They are almost the same, and anyway, we only need this for visualization purposes.", "\n", "            ", "for", "subject", "in", "dataset", ".", "cameras", "(", ")", ":", "\n", "                ", "if", "'orientation'", "in", "dataset", ".", "cameras", "(", ")", "[", "subject", "]", "[", "args", ".", "viz_camera", "]", ":", "\n", "                    ", "rot", "=", "dataset", ".", "cameras", "(", ")", "[", "subject", "]", "[", "args", ".", "viz_camera", "]", "[", "'orientation'", "]", "\n", "break", "\n", "", "", "prediction", "=", "camera_to_world", "(", "prediction", ",", "R", "=", "rot", ",", "t", "=", "0", ")", "\n", "# We don't have the trajectory, but at least we can rebase the height", "\n", "prediction", "[", ":", ",", ":", ",", "2", "]", "-=", "np", ".", "min", "(", "prediction", "[", ":", ",", ":", ",", "2", "]", ")", "\n", "\n", "", "anim_output", "=", "{", "'Reconstruction'", ":", "prediction", "}", "\n", "if", "ground_truth", "is", "not", "None", "and", "not", "args", ".", "viz_no_ground_truth", ":", "\n", "            ", "anim_output", "[", "'Ground truth'", "]", "=", "ground_truth", "\n", "\n", "# Visualize 2d Gt: Use ' input_keypoints'; While for predicted 2d kpts, use 'pred_2d_keypoints'.", "\n", "", "input_keypoints", "=", "image_coordinates", "(", "input_keypoints", "[", "...", ",", ":", "2", "]", ",", "w", "=", "img_w", ",", "h", "=", "img_h", ")", "\n", "# pred_2d_keypoints = image_coordinates(reconstruction_2d_keypoint[..., :2], w=img_w, h=img_h)", "\n", "\n", "render_animation", "(", "input_keypoints", ",", "keypoints_metadata", ",", "anim_output", ",", "\n", "dataset", ".", "skeleton", "(", ")", ",", "dataset", ".", "fps", "(", ")", ",", "args", ".", "viz_bitrate", ",", "cam", "[", "'azimuth'", "]", ",", "args", ".", "viz_output", ",", "\n", "limit", "=", "args", ".", "viz_limit", ",", "downsample", "=", "args", ".", "viz_downsample", ",", "size", "=", "args", ".", "viz_size", ",", "\n", "input_video_path", "=", "args", ".", "viz_video", ",", "viewport", "=", "(", "cam", "[", "'res_w'", "]", ",", "cam", "[", "'res_h'", "]", ")", ",", "\n", "input_video_skip", "=", "args", ".", "viz_skip", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.visualization.show_video.plot_log": [[333, 345], ["matplotlib.figure", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.xlim", "matplotlib.savefig", "matplotlib.close", "numpy.arange", "os.path.join", "len"], "function", ["None"], ["", "", "def", "plot_log", "(", "losses_3d_train", ",", "losses_3d_train_eval", ",", "losses_3d_valid", ",", "epoch", ",", "checkpoint", ")", ":", "\n", "    ", "plt", ".", "figure", "(", ")", "\n", "epoch_x", "=", "np", ".", "arange", "(", "3", ",", "len", "(", "losses_3d_train", ")", ")", "+", "1", "\n", "plt", ".", "plot", "(", "epoch_x", ",", "losses_3d_train", "[", "3", ":", "]", ",", "'--'", ",", "color", "=", "'C0'", ")", "\n", "plt", ".", "plot", "(", "epoch_x", ",", "losses_3d_train_eval", "[", "3", ":", "]", ",", "color", "=", "'C0'", ")", "\n", "plt", ".", "plot", "(", "epoch_x", ",", "losses_3d_valid", "[", "3", ":", "]", ",", "color", "=", "'C1'", ")", "\n", "plt", ".", "legend", "(", "[", "'3d train'", ",", "'3d train (eval)'", ",", "'3d valid (eval)'", "]", ")", "\n", "plt", ".", "ylabel", "(", "'MPJPE (m)'", ")", "\n", "plt", ".", "xlabel", "(", "'Epoch'", ")", "\n", "plt", ".", "xlim", "(", "(", "3", ",", "epoch", ")", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "checkpoint", ",", "'loss_3d.png'", ")", ")", "\n", "plt", ".", "close", "(", "'all'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.visualization.plot_pose3d.plot17j": [[11, 167], ["matplotlib.get_current_fig_manager", "plt.get_current_fig_manager.window.showMaximized", "matplotlib.show", "matplotlib.savefig", "matplotlib.close", "matplotlib.FuncAnimation", "matplotlib.show", "matplotlib.savefig", "matplotlib.close", "len", "matplotlib.figure", "numpy.linspace().astype", "fig.add_subplot.scatter", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "numpy.array().max", "zip", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "fig.add_subplot.set_zlabel", "fig.add_subplot.axis", "fig.add_subplot.clear", "fig.add_subplot.scatter", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "numpy.array().max", "zip", "matplotlib.axis", "plt.figure.add_subplot", "fig.add_subplot.scatter", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "numpy.array().max", "zip", "fig.add_subplot.view_init", "fig.add_subplot.set_xlim3d", "fig.add_subplot.set_zlim3d", "fig.add_subplot.set_ylim3d", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "fig.add_subplot.set_zlabel", "fig.add_subplot.axis", "fig.add_subplot.plot", "fig.add_subplot.plot", "len", "numpy.linspace", "fig.add_subplot.plot", "numpy.array", "[].flatten", "[].flatten", "[].flatten", "numpy.array", "[].flatten", "[].flatten", "[].flatten", "numpy.array", "[].flatten", "[].flatten", "[].flatten", "x.max", "x.min", "y.max", "y.min", "z.max", "z.min", "x.max", "x.min", "y.max", "y.min", "z.max", "z.min", "x.max", "x.min", "y.max", "y.min", "z.max", "z.min", "x.max", "x.min", "y.max", "y.min", "z.max", "z.min", "x.max", "x.min", "y.max", "y.min", "z.max", "z.min", "x.max", "x.min", "y.max", "y.min", "z.max", "z.min"], "function", ["None"], ["def", "plot17j", "(", "poses", ",", "ax", "=", "None", ",", "subject", "=", "None", ",", "action", "=", "None", ",", "show_animation", "=", "False", ")", ":", "\n", "    ", "if", "not", "show_animation", ":", "\n", "        ", "plot_idx", "=", "1", "\n", "if", "len", "(", "poses", ".", "shape", ")", ">", "2", ":", "\n", "            ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "frames", "=", "np", ".", "linspace", "(", "start", "=", "0", ",", "stop", "=", "poses", ".", "shape", "[", "0", "]", "-", "1", ",", "num", "=", "6", ")", ".", "astype", "(", "int", ")", "\n", "for", "i", "in", "frames", ":", "\n", "                ", "ax", "=", "fig", ".", "add_subplot", "(", "2", ",", "3", ",", "plot_idx", ",", "projection", "=", "'3d'", ")", "\n", "pose", "=", "poses", "[", "i", "]", "\n", "x", "=", "pose", "[", ":", ",", "0", "]", "\n", "y", "=", "pose", "[", ":", ",", "1", "]", "\n", "z", "=", "pose", "[", ":", ",", "2", "]", "\n", "ax", ".", "scatter", "(", "x", ",", "y", ",", "z", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "0", ",", "1", "]", ")", "]", ",", "y", "[", "(", "[", "0", ",", "1", "]", ")", "]", ",", "z", "[", "(", "[", "0", ",", "1", "]", ")", "]", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "1", ",", "2", "]", ")", "]", ",", "y", "[", "(", "[", "1", ",", "2", "]", ")", "]", ",", "z", "[", "(", "[", "1", ",", "2", "]", ")", "]", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "2", ",", "3", "]", ")", "]", ",", "y", "[", "(", "[", "2", ",", "3", "]", ")", "]", ",", "z", "[", "(", "[", "2", ",", "3", "]", ")", "]", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "0", ",", "4", "]", ")", "]", ",", "y", "[", "(", "[", "0", ",", "4", "]", ")", "]", ",", "z", "[", "(", "[", "0", ",", "4", "]", ")", "]", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "4", ",", "5", "]", ")", "]", ",", "y", "[", "(", "[", "4", ",", "5", "]", ")", "]", ",", "z", "[", "(", "[", "4", ",", "5", "]", ")", "]", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "5", ",", "6", "]", ")", "]", ",", "y", "[", "(", "[", "5", ",", "6", "]", ")", "]", ",", "z", "[", "(", "[", "5", ",", "6", "]", ")", "]", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "0", ",", "7", "]", ")", "]", ",", "y", "[", "(", "[", "0", ",", "7", "]", ")", "]", ",", "z", "[", "(", "[", "0", ",", "7", "]", ")", "]", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "7", ",", "8", "]", ")", "]", ",", "y", "[", "(", "[", "7", ",", "8", "]", ")", "]", ",", "z", "[", "(", "[", "7", ",", "8", "]", ")", "]", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "8", ",", "9", "]", ")", "]", ",", "y", "[", "(", "[", "8", ",", "9", "]", ")", "]", ",", "z", "[", "(", "[", "8", ",", "9", "]", ")", "]", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "9", ",", "10", "]", ")", "]", ",", "y", "[", "(", "[", "9", ",", "10", "]", ")", "]", ",", "z", "[", "(", "[", "9", ",", "10", "]", ")", "]", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "8", ",", "11", "]", ")", "]", ",", "y", "[", "(", "[", "8", ",", "11", "]", ")", "]", ",", "z", "[", "(", "[", "8", ",", "11", "]", ")", "]", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "11", ",", "12", "]", ")", "]", ",", "y", "[", "(", "[", "11", ",", "12", "]", ")", "]", ",", "z", "[", "(", "[", "11", ",", "12", "]", ")", "]", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "12", ",", "13", "]", ")", "]", ",", "y", "[", "(", "[", "12", ",", "13", "]", ")", "]", ",", "z", "[", "(", "[", "12", ",", "13", "]", ")", "]", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "8", ",", "14", "]", ")", "]", ",", "y", "[", "(", "[", "8", ",", "14", "]", ")", "]", ",", "z", "[", "(", "[", "8", ",", "14", "]", ")", "]", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "14", ",", "15", "]", ")", "]", ",", "y", "[", "(", "[", "14", ",", "15", "]", ")", "]", ",", "z", "[", "(", "[", "14", ",", "15", "]", ")", "]", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "15", ",", "16", "]", ")", "]", ",", "y", "[", "(", "[", "15", ",", "16", "]", ")", "]", ",", "z", "[", "(", "[", "15", ",", "16", "]", ")", "]", ")", "\n", "# Create cubic bounding box to simulate equal aspect ratio", "\n", "max_range", "=", "np", ".", "array", "(", "[", "x", ".", "max", "(", ")", "-", "x", ".", "min", "(", ")", ",", "y", ".", "max", "(", ")", "-", "y", ".", "min", "(", ")", ",", "z", ".", "max", "(", ")", "-", "z", ".", "min", "(", ")", "]", ")", ".", "max", "(", ")", "\n", "Xb", "=", "0.5", "*", "max_range", "*", "np", ".", "mgrid", "[", "-", "1", ":", "1", ":", "1", ",", "-", "1", ":", "1", ":", "1", ",", "-", "1", ":", "1", ":", "1", "]", "[", "0", "]", ".", "flatten", "(", ")", "+", "0.5", "*", "(", "x", ".", "max", "(", ")", "+", "x", ".", "min", "(", ")", ")", "\n", "Yb", "=", "0.5", "*", "max_range", "*", "np", ".", "mgrid", "[", "-", "1", ":", "1", ":", "1", ",", "-", "1", ":", "1", ":", "1", ",", "-", "1", ":", "1", ":", "1", "]", "[", "1", "]", ".", "flatten", "(", ")", "+", "0.5", "*", "(", "y", ".", "max", "(", ")", "+", "y", ".", "min", "(", ")", ")", "\n", "Zb", "=", "0.5", "*", "max_range", "*", "np", ".", "mgrid", "[", "-", "1", ":", "1", ":", "1", ",", "-", "1", ":", "1", ":", "1", ",", "-", "1", ":", "1", ":", "1", "]", "[", "2", "]", ".", "flatten", "(", ")", "+", "0.5", "*", "(", "z", ".", "max", "(", ")", "+", "z", ".", "min", "(", ")", ")", "\n", "\n", "for", "xb", ",", "yb", ",", "zb", "in", "zip", "(", "Xb", ",", "Yb", ",", "Zb", ")", ":", "\n", "                    ", "ax", ".", "plot", "(", "[", "xb", "]", ",", "[", "yb", "]", ",", "[", "zb", "]", ",", "'w'", ")", "\n", "", "radius", "=", "2", "\n", "ax", ".", "view_init", "(", "elev", "=", "75", ",", "azim", "=", "110", ")", "\n", "ax", ".", "set_xlim3d", "(", "[", "-", "radius", "/", "2", ",", "radius", "/", "2", "]", ")", "\n", "ax", ".", "set_zlim3d", "(", "[", "0", ",", "radius", "]", ")", "\n", "ax", ".", "set_ylim3d", "(", "[", "-", "radius", "/", "2", ",", "radius", "/", "2", "]", ")", "\n", "\n", "ax", ".", "set_xlabel", "(", "\"x\"", ")", "\n", "ax", ".", "set_ylabel", "(", "\"y\"", ")", "\n", "ax", ".", "set_zlabel", "(", "\"z\"", ")", "\n", "# ax.invert_zaxis()", "\n", "ax", ".", "axis", "(", "'equal'", ")", "\n", "# ax.axis('off')", "\n", "\n", "# ax.set_title('camera = ' + str(i))", "\n", "\n", "plot_idx", "+=", "1", "\n", "", "", "else", ":", "\n", "            ", "pose", "=", "poses", "\n", "x", "=", "pose", "[", ":", ",", "0", "]", "\n", "y", "=", "pose", "[", ":", ",", "1", "]", "\n", "z", "=", "pose", "[", ":", ",", "2", "]", "\n", "ax", ".", "scatter", "(", "x", ",", "y", ",", "z", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "0", ",", "1", "]", ")", "]", ",", "y", "[", "(", "[", "0", ",", "1", "]", ")", "]", ",", "z", "[", "(", "[", "0", ",", "1", "]", ")", "]", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "1", ",", "2", "]", ")", "]", ",", "y", "[", "(", "[", "1", ",", "2", "]", ")", "]", ",", "z", "[", "(", "[", "1", ",", "2", "]", ")", "]", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "2", ",", "3", "]", ")", "]", ",", "y", "[", "(", "[", "2", ",", "3", "]", ")", "]", ",", "z", "[", "(", "[", "2", ",", "3", "]", ")", "]", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "0", ",", "4", "]", ")", "]", ",", "y", "[", "(", "[", "0", ",", "4", "]", ")", "]", ",", "z", "[", "(", "[", "0", ",", "4", "]", ")", "]", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "4", ",", "5", "]", ")", "]", ",", "y", "[", "(", "[", "4", ",", "5", "]", ")", "]", ",", "z", "[", "(", "[", "4", ",", "5", "]", ")", "]", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "5", ",", "6", "]", ")", "]", ",", "y", "[", "(", "[", "5", ",", "6", "]", ")", "]", ",", "z", "[", "(", "[", "5", ",", "6", "]", ")", "]", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "0", ",", "7", "]", ")", "]", ",", "y", "[", "(", "[", "0", ",", "7", "]", ")", "]", ",", "z", "[", "(", "[", "0", ",", "7", "]", ")", "]", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "7", ",", "8", "]", ")", "]", ",", "y", "[", "(", "[", "7", ",", "8", "]", ")", "]", ",", "z", "[", "(", "[", "7", ",", "8", "]", ")", "]", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "8", ",", "9", "]", ")", "]", ",", "y", "[", "(", "[", "8", ",", "9", "]", ")", "]", ",", "z", "[", "(", "[", "8", ",", "9", "]", ")", "]", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "9", ",", "10", "]", ")", "]", ",", "y", "[", "(", "[", "9", ",", "10", "]", ")", "]", ",", "z", "[", "(", "[", "9", ",", "10", "]", ")", "]", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "8", ",", "11", "]", ")", "]", ",", "y", "[", "(", "[", "8", ",", "11", "]", ")", "]", ",", "z", "[", "(", "[", "8", ",", "11", "]", ")", "]", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "11", ",", "12", "]", ")", "]", ",", "y", "[", "(", "[", "11", ",", "12", "]", ")", "]", ",", "z", "[", "(", "[", "11", ",", "12", "]", ")", "]", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "12", ",", "13", "]", ")", "]", ",", "y", "[", "(", "[", "12", ",", "13", "]", ")", "]", ",", "z", "[", "(", "[", "12", ",", "13", "]", ")", "]", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "8", ",", "14", "]", ")", "]", ",", "y", "[", "(", "[", "8", ",", "14", "]", ")", "]", ",", "z", "[", "(", "[", "8", ",", "14", "]", ")", "]", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "14", ",", "15", "]", ")", "]", ",", "y", "[", "(", "[", "14", ",", "15", "]", ")", "]", ",", "z", "[", "(", "[", "14", ",", "15", "]", ")", "]", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "15", ",", "16", "]", ")", "]", ",", "y", "[", "(", "[", "15", ",", "16", "]", ")", "]", ",", "z", "[", "(", "[", "15", ",", "16", "]", ")", "]", ")", "\n", "# Create cubic bounding box to simulate equal aspect ratio", "\n", "max_range", "=", "np", ".", "array", "(", "[", "x", ".", "max", "(", ")", "-", "x", ".", "min", "(", ")", ",", "y", ".", "max", "(", ")", "-", "y", ".", "min", "(", ")", ",", "z", ".", "max", "(", ")", "-", "z", ".", "min", "(", ")", "]", ")", ".", "max", "(", ")", "\n", "Xb", "=", "0.5", "*", "max_range", "*", "np", ".", "mgrid", "[", "-", "1", ":", "1", ":", "1", ",", "-", "1", ":", "1", ":", "1", ",", "-", "1", ":", "1", ":", "1", "]", "[", "0", "]", ".", "flatten", "(", ")", "+", "0.5", "*", "(", "x", ".", "max", "(", ")", "+", "x", ".", "min", "(", ")", ")", "\n", "Yb", "=", "0.5", "*", "max_range", "*", "np", ".", "mgrid", "[", "-", "1", ":", "1", ":", "1", ",", "-", "1", ":", "1", ":", "1", ",", "-", "1", ":", "1", ":", "1", "]", "[", "1", "]", ".", "flatten", "(", ")", "+", "0.5", "*", "(", "y", ".", "max", "(", ")", "+", "y", ".", "min", "(", ")", ")", "\n", "Zb", "=", "0.5", "*", "max_range", "*", "np", ".", "mgrid", "[", "-", "1", ":", "1", ":", "1", ",", "-", "1", ":", "1", ":", "1", ",", "-", "1", ":", "1", ":", "1", "]", "[", "2", "]", ".", "flatten", "(", ")", "+", "0.5", "*", "(", "z", ".", "max", "(", ")", "+", "z", ".", "min", "(", ")", ")", "\n", "\n", "for", "xb", ",", "yb", ",", "zb", "in", "zip", "(", "Xb", ",", "Yb", ",", "Zb", ")", ":", "\n", "                ", "ax", ".", "plot", "(", "[", "xb", "]", ",", "[", "yb", "]", ",", "[", "zb", "]", ",", "'w'", ")", "\n", "# radius = 2", "\n", "# ax.view_init(elev=15., azim=110)", "\n", "# ax.set_xlim3d([-radius / 2, radius / 2])", "\n", "# ax.set_zlim3d([0, radius])", "\n", "# ax.set_ylim3d([-radius / 2, radius / 2])", "\n", "\n", "", "ax", ".", "set_xlabel", "(", "\"x\"", ")", "\n", "ax", ".", "set_ylabel", "(", "\"y\"", ")", "\n", "ax", ".", "set_zlabel", "(", "\"z\"", ")", "\n", "# ax.invert_zaxis()", "\n", "ax", ".", "axis", "(", "'equal'", ")", "\n", "#ax.axis('off')", "\n", "\n", "#ax.set_title('camera = ' + str(i))", "\n", "\n", "plot_idx", "+=", "1", "\n", "\n", "# this uses QT5Agg backend", "\n", "# you can identify the backend using plt.get_backend()", "\n", "# delete the following two lines and resize manually if it throws an error", "\n", "", "figManager", "=", "plt", ".", "get_current_fig_manager", "(", ")", "\n", "figManager", ".", "window", ".", "showMaximized", "(", ")", "\n", "\n", "plt", ".", "show", "(", ")", "\n", "plt", ".", "savefig", "(", "'show/mean_train_pose_{}_{}'", ".", "format", "(", "subject", ",", "action", ")", ",", "bbox_inches", "=", "'tight'", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "", "else", ":", "\n", "        ", "def", "update", "(", "i", ")", ":", "\n", "\n", "            ", "ax", ".", "clear", "(", ")", "\n", "\n", "pose", "=", "poses", "[", "i", "]", "\n", "\n", "x", "=", "pose", "[", ":", ",", "0", "]", "\n", "y", "=", "pose", "[", ":", ",", "1", "]", "\n", "z", "=", "pose", "[", ":", ",", "2", "]", "\n", "ax", ".", "scatter", "(", "x", ",", "y", ",", "z", ")", "\n", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "0", ",", "1", "]", ")", "]", ",", "y", "[", "(", "[", "0", ",", "1", "]", ")", "]", ",", "z", "[", "(", "[", "0", ",", "1", "]", ")", "]", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "1", ",", "2", "]", ")", "]", ",", "y", "[", "(", "[", "1", ",", "2", "]", ")", "]", ",", "z", "[", "(", "[", "1", ",", "2", "]", ")", "]", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "2", ",", "3", "]", ")", "]", ",", "y", "[", "(", "[", "2", ",", "3", "]", ")", "]", ",", "z", "[", "(", "[", "2", ",", "3", "]", ")", "]", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "0", ",", "4", "]", ")", "]", ",", "y", "[", "(", "[", "0", ",", "4", "]", ")", "]", ",", "z", "[", "(", "[", "0", ",", "4", "]", ")", "]", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "4", ",", "5", "]", ")", "]", ",", "y", "[", "(", "[", "4", ",", "5", "]", ")", "]", ",", "z", "[", "(", "[", "4", ",", "5", "]", ")", "]", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "5", ",", "6", "]", ")", "]", ",", "y", "[", "(", "[", "5", ",", "6", "]", ")", "]", ",", "z", "[", "(", "[", "5", ",", "6", "]", ")", "]", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "0", ",", "7", "]", ")", "]", ",", "y", "[", "(", "[", "0", ",", "7", "]", ")", "]", ",", "z", "[", "(", "[", "0", ",", "7", "]", ")", "]", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "7", ",", "8", "]", ")", "]", ",", "y", "[", "(", "[", "7", ",", "8", "]", ")", "]", ",", "z", "[", "(", "[", "7", ",", "8", "]", ")", "]", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "8", ",", "9", "]", ")", "]", ",", "y", "[", "(", "[", "8", ",", "9", "]", ")", "]", ",", "z", "[", "(", "[", "8", ",", "9", "]", ")", "]", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "9", ",", "10", "]", ")", "]", ",", "y", "[", "(", "[", "9", ",", "10", "]", ")", "]", ",", "z", "[", "(", "[", "9", ",", "10", "]", ")", "]", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "8", ",", "11", "]", ")", "]", ",", "y", "[", "(", "[", "8", ",", "11", "]", ")", "]", ",", "z", "[", "(", "[", "8", ",", "11", "]", ")", "]", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "11", ",", "12", "]", ")", "]", ",", "y", "[", "(", "[", "11", ",", "12", "]", ")", "]", ",", "z", "[", "(", "[", "11", ",", "12", "]", ")", "]", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "12", ",", "13", "]", ")", "]", ",", "y", "[", "(", "[", "12", ",", "13", "]", ")", "]", ",", "z", "[", "(", "[", "12", ",", "13", "]", ")", "]", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "8", ",", "14", "]", ")", "]", ",", "y", "[", "(", "[", "8", ",", "14", "]", ")", "]", ",", "z", "[", "(", "[", "8", ",", "14", "]", ")", "]", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "14", ",", "15", "]", ")", "]", ",", "y", "[", "(", "[", "14", ",", "15", "]", ")", "]", ",", "z", "[", "(", "[", "14", ",", "15", "]", ")", "]", ")", "\n", "ax", ".", "plot", "(", "x", "[", "(", "[", "15", ",", "16", "]", ")", "]", ",", "y", "[", "(", "[", "15", ",", "16", "]", ")", "]", ",", "z", "[", "(", "[", "15", ",", "16", "]", ")", "]", ")", "\n", "\n", "# Create cubic bounding box to simulate equal aspect ratio", "\n", "max_range", "=", "np", ".", "array", "(", "[", "x", ".", "max", "(", ")", "-", "x", ".", "min", "(", ")", ",", "y", ".", "max", "(", ")", "-", "y", ".", "min", "(", ")", ",", "z", ".", "max", "(", ")", "-", "z", ".", "min", "(", ")", "]", ")", ".", "max", "(", ")", "\n", "Xb", "=", "0.5", "*", "max_range", "*", "np", ".", "mgrid", "[", "-", "1", ":", "2", ":", "2", ",", "-", "1", ":", "2", ":", "2", ",", "-", "1", ":", "2", ":", "2", "]", "[", "0", "]", ".", "flatten", "(", ")", "+", "0.5", "*", "(", "x", ".", "max", "(", ")", "+", "x", ".", "min", "(", ")", ")", "\n", "Yb", "=", "0.5", "*", "max_range", "*", "np", ".", "mgrid", "[", "-", "1", ":", "2", ":", "2", ",", "-", "1", ":", "2", ":", "2", ",", "-", "1", ":", "2", ":", "2", "]", "[", "1", "]", ".", "flatten", "(", ")", "+", "0.5", "*", "(", "y", ".", "max", "(", ")", "+", "y", ".", "min", "(", ")", ")", "\n", "Zb", "=", "0.5", "*", "max_range", "*", "np", ".", "mgrid", "[", "-", "1", ":", "2", ":", "2", ",", "-", "1", ":", "2", ":", "2", ",", "-", "1", ":", "2", ":", "2", "]", "[", "2", "]", ".", "flatten", "(", ")", "+", "0.5", "*", "(", "z", ".", "max", "(", ")", "+", "z", ".", "min", "(", ")", ")", "\n", "\n", "for", "xb", ",", "yb", ",", "zb", "in", "zip", "(", "Xb", ",", "Yb", ",", "Zb", ")", ":", "\n", "                ", "ax", ".", "plot", "(", "[", "xb", "]", ",", "[", "yb", "]", ",", "[", "zb", "]", ",", "'w'", ")", "\n", "\n", "", "plt", ".", "axis", "(", "'equal'", ")", "\n", "\n", "", "a", "=", "anim", ".", "FuncAnimation", "(", "fig", ",", "update", ",", "frames", "=", "len", "(", "poses", ")", ",", "repeat", "=", "False", ")", "\n", "plt", ".", "show", "(", ")", "\n", "plt", ".", "savefig", "(", "'show/mean_train_pose_{}_{}'", ".", "format", "(", "subject", ",", "action", ")", ",", "bbox_inches", "=", "'tight'", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.visualization.plot_pose3d.drawskeleton": [[169, 193], ["enumerate", "numpy.array", "map", "map", "list", "list", "cv2.line", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "drawskeleton", "(", "img", ",", "kps", ",", "thickness", "=", "3", ",", "lcolor", "=", "(", "255", ",", "0", ",", "0", ")", ",", "rcolor", "=", "(", "0", ",", "0", ",", "255", ")", ",", "mpii", "=", "2", ")", ":", "\n", "\n", "    ", "if", "mpii", "==", "0", ":", "# h36m with mpii joints", "\n", "        ", "connections", "=", "[", "[", "0", ",", "1", "]", ",", "[", "1", ",", "2", "]", ",", "[", "2", ",", "3", "]", ",", "[", "0", ",", "4", "]", ",", "[", "4", ",", "5", "]", ",", "\n", "[", "5", ",", "6", "]", ",", "[", "0", ",", "8", "]", ",", "[", "8", ",", "9", "]", ",", "[", "9", ",", "10", "]", ",", "\n", "[", "8", ",", "11", "]", ",", "[", "11", ",", "12", "]", ",", "[", "12", ",", "13", "]", ",", "[", "8", ",", "14", "]", ",", "[", "14", ",", "15", "]", ",", "[", "15", ",", "16", "]", "]", "\n", "LR", "=", "np", ".", "array", "(", "[", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", "]", ",", "dtype", "=", "bool", ")", "\n", "", "elif", "mpii", "==", "1", ":", "# only mpii", "\n", "        ", "connections", "=", "[", "[", "0", ",", "1", "]", ",", "[", "1", ",", "2", "]", ",", "[", "2", ",", "6", "]", ",", "[", "6", ",", "3", "]", ",", "[", "3", ",", "4", "]", ",", "[", "4", ",", "5", "]", ",", "[", "6", ",", "7", "]", ",", "\n", "[", "7", ",", "8", "]", ",", "[", "8", ",", "9", "]", ",", "[", "7", ",", "12", "]", ",", "[", "12", ",", "11", "]", ",", "[", "11", ",", "10", "]", ",", "[", "7", ",", "13", "]", ",", "[", "13", ",", "14", "]", ",", "[", "14", ",", "15", "]", "]", "\n", "LR", "=", "np", ".", "array", "(", "[", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "dtype", "=", "bool", ")", "\n", "", "else", ":", "# default h36m", "\n", "        ", "connections", "=", "[", "[", "0", ",", "1", "]", ",", "[", "1", ",", "2", "]", ",", "[", "2", ",", "3", "]", ",", "[", "0", ",", "4", "]", ",", "[", "4", ",", "5", "]", ",", "\n", "[", "5", ",", "6", "]", ",", "[", "0", ",", "7", "]", ",", "[", "7", ",", "8", "]", ",", "[", "8", ",", "9", "]", ",", "[", "9", ",", "10", "]", ",", "\n", "[", "8", ",", "11", "]", ",", "[", "11", ",", "12", "]", ",", "[", "12", ",", "13", "]", ",", "[", "8", ",", "14", "]", ",", "[", "14", ",", "15", "]", ",", "[", "15", ",", "16", "]", "]", "\n", "\n", "LR", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "dtype", "=", "bool", ")", "\n", "\n", "", "for", "j", ",", "c", "in", "enumerate", "(", "connections", ")", ":", "\n", "        ", "start", "=", "map", "(", "int", ",", "kps", "[", "c", "[", "0", "]", "]", ")", "\n", "end", "=", "map", "(", "int", ",", "kps", "[", "c", "[", "1", "]", "]", ")", "\n", "start", "=", "list", "(", "start", ")", "\n", "end", "=", "list", "(", "end", ")", "\n", "cv2", ".", "line", "(", "img", ",", "(", "start", "[", "0", "]", ",", "start", "[", "1", "]", ")", ",", "(", "end", "[", "0", "]", ",", "end", "[", "1", "]", ")", ",", "lcolor", "if", "LR", "[", "j", "]", "else", "rcolor", ",", "thickness", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.visualization.plot_pose3d.show3Dpose": [[195, 230], ["enumerate", "ax.set_xlim3d", "ax.set_zlim3d", "ax.set_ylim3d", "ax.set_xlabel", "ax.set_ylabel", "ax.set_zlabel", "numpy.array", "ax.plot", "numpy.array", "numpy.array", "numpy.array", "range"], "function", ["None"], ["", "", "def", "show3Dpose", "(", "channels", ",", "ax", ",", "radius", "=", "40", ",", "mpii", "=", "2", ",", "lcolor", "=", "'#ff0000'", ",", "rcolor", "=", "'#0000ff'", ")", ":", "\n", "    ", "vals", "=", "channels", "\n", "\n", "if", "mpii", "==", "0", ":", "# h36m with mpii joints", "\n", "        ", "connections", "=", "[", "[", "0", ",", "1", "]", ",", "[", "1", ",", "2", "]", ",", "[", "2", ",", "3", "]", ",", "[", "0", ",", "4", "]", ",", "[", "4", ",", "5", "]", ",", "\n", "[", "5", ",", "6", "]", ",", "[", "0", ",", "8", "]", ",", "[", "8", ",", "9", "]", ",", "[", "9", ",", "10", "]", ",", "\n", "[", "8", ",", "11", "]", ",", "[", "11", ",", "12", "]", ",", "[", "12", ",", "13", "]", ",", "[", "8", ",", "14", "]", ",", "[", "14", ",", "15", "]", ",", "[", "15", ",", "16", "]", "]", "\n", "LR", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", "]", ",", "dtype", "=", "bool", ")", "\n", "", "elif", "mpii", "==", "1", ":", "# only mpii", "\n", "        ", "connections", "=", "[", "[", "0", ",", "1", "]", ",", "[", "1", ",", "2", "]", ",", "[", "2", ",", "6", "]", ",", "[", "6", ",", "3", "]", ",", "[", "3", ",", "4", "]", ",", "[", "4", ",", "5", "]", ",", "[", "6", ",", "7", "]", ",", "\n", "[", "7", ",", "8", "]", ",", "[", "8", ",", "9", "]", ",", "[", "7", ",", "12", "]", ",", "[", "12", ",", "11", "]", ",", "[", "11", ",", "10", "]", ",", "[", "7", ",", "13", "]", ",", "[", "13", ",", "14", "]", ",", "[", "14", ",", "15", "]", "]", "\n", "LR", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", "]", ",", "dtype", "=", "bool", ")", "\n", "", "else", ":", "# default h36m", "\n", "        ", "connections", "=", "[", "[", "0", ",", "1", "]", ",", "[", "1", ",", "2", "]", ",", "[", "2", ",", "3", "]", ",", "[", "0", ",", "4", "]", ",", "[", "4", ",", "5", "]", ",", "\n", "[", "5", ",", "6", "]", ",", "[", "0", ",", "7", "]", ",", "[", "7", ",", "8", "]", ",", "[", "8", ",", "9", "]", ",", "[", "9", ",", "10", "]", ",", "\n", "[", "8", ",", "11", "]", ",", "[", "11", ",", "12", "]", ",", "[", "12", ",", "13", "]", ",", "[", "8", ",", "14", "]", ",", "[", "14", ",", "15", "]", ",", "[", "15", ",", "16", "]", "]", "\n", "\n", "LR", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "dtype", "=", "bool", ")", "\n", "\n", "", "for", "ind", ",", "(", "i", ",", "j", ")", "in", "enumerate", "(", "connections", ")", ":", "\n", "        ", "x", ",", "y", ",", "z", "=", "[", "np", ".", "array", "(", "[", "vals", "[", "i", ",", "c", "]", ",", "vals", "[", "j", ",", "c", "]", "]", ")", "for", "c", "in", "range", "(", "3", ")", "]", "\n", "ax", ".", "plot", "(", "x", ",", "y", ",", "z", ",", "lw", "=", "2", ",", "c", "=", "lcolor", "if", "LR", "[", "ind", "]", "else", "rcolor", ")", "\n", "\n", "", "RADIUS", "=", "radius", "# space around the subject", "\n", "if", "mpii", "==", "1", ":", "\n", "        ", "xroot", ",", "yroot", ",", "zroot", "=", "vals", "[", "6", ",", "0", "]", ",", "vals", "[", "6", ",", "1", "]", ",", "vals", "[", "6", ",", "2", "]", "\n", "", "else", ":", "\n", "        ", "xroot", ",", "yroot", ",", "zroot", "=", "vals", "[", "0", ",", "0", "]", ",", "vals", "[", "0", ",", "1", "]", ",", "vals", "[", "0", ",", "2", "]", "\n", "", "ax", ".", "set_xlim3d", "(", "[", "-", "RADIUS", "+", "xroot", ",", "RADIUS", "+", "xroot", "]", ")", "\n", "ax", ".", "set_zlim3d", "(", "[", "-", "RADIUS", "+", "zroot", ",", "RADIUS", "+", "zroot", "]", ")", "\n", "ax", ".", "set_ylim3d", "(", "[", "-", "RADIUS", "+", "yroot", ",", "RADIUS", "+", "yroot", "]", ")", "\n", "\n", "ax", ".", "set_xlabel", "(", "\"x\"", ")", "\n", "ax", ".", "set_ylabel", "(", "\"y\"", ")", "\n", "ax", ".", "set_zlabel", "(", "\"z\"", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.visualization.plot_pose2d.ColorStyle.__init__": [[24, 35], ["range", "range", "len", "plot_pose2d.ColorStyle.line_color.append", "len", "plot_pose2d.ColorStyle.ring_color.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "color", ",", "link_pairs", ",", "point_color", ")", ":", "\n", "        ", "self", ".", "color", "=", "color", "\n", "self", ".", "link_pairs", "=", "link_pairs", "\n", "self", ".", "point_color", "=", "point_color", "\n", "self", ".", "line_color", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "color", ")", ")", ":", "\n", "            ", "self", ".", "line_color", ".", "append", "(", "self", ".", "color", "[", "i", "]", ")", "\n", "\n", "", "self", ".", "ring_color", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "point_color", ")", ")", ":", "\n", "            ", "self", ".", "ring_color", ".", "append", "(", "self", ".", "point_color", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.visualization.plot_pose2d.show_2d_hm36_pose": [[36, 57], ["plot_pose2d.ColorStyle", "enumerate", "cv2.imshow", "cv2.waitKey", "cv2.destroyAllWindows", "numpy.zeros", "cv2.imread", "cv2.line", "cv2.circle", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["", "", "", "def", "show_2d_hm36_pose", "(", "img_path", ",", "pose_2d", ",", "index", "=", "0", ")", ":", "\n", "# plot single pose from a image", "\n", "    ", "colorstyle", "=", "ColorStyle", "(", "color1", ",", "link_pairs1", ",", "point_color1", ")", "\n", "connections", "=", "[", "[", "0", ",", "1", "]", ",", "[", "1", ",", "2", "]", ",", "[", "2", ",", "3", "]", ",", "[", "0", ",", "4", "]", ",", "[", "4", ",", "5", "]", ",", "\n", "[", "5", ",", "6", "]", ",", "[", "0", ",", "7", "]", ",", "[", "7", ",", "8", "]", ",", "[", "8", ",", "9", "]", ",", "[", "9", ",", "10", "]", ",", "\n", "[", "8", ",", "11", "]", ",", "[", "11", ",", "12", "]", ",", "[", "12", ",", "13", "]", ",", "[", "8", ",", "14", "]", ",", "[", "14", ",", "15", "]", ",", "[", "15", ",", "16", "]", "]", "\n", "if", "img_path", "is", "None", ":", "\n", "        ", "img", "=", "np", ".", "zeros", "(", "(", "1000", ",", "1000", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "        ", "img", "=", "cv2", ".", "imread", "(", "img_path", ")", "\n", "\n", "", "kps", "=", "pose_2d", "# 2d pose in pixel unit, shape [17, 2]", "\n", "for", "j", ",", "c", "in", "enumerate", "(", "connections", ")", ":", "\n", "        ", "start", "=", "kps", "[", "c", "[", "0", "]", "]", "\n", "end", "=", "kps", "[", "c", "[", "1", "]", "]", "\n", "cv2", ".", "line", "(", "img", ",", "(", "int", "(", "start", "[", "0", "]", ")", ",", "int", "(", "start", "[", "1", "]", ")", ")", ",", "(", "int", "(", "end", "[", "0", "]", ")", ",", "int", "(", "end", "[", "1", "]", ")", ")", ",", "colorstyle", ".", "line_color", "[", "j", "]", ",", "3", ")", "\n", "cv2", ".", "circle", "(", "img", ",", "(", "int", "(", "kps", "[", "j", ",", "0", "]", ")", ",", "int", "(", "kps", "[", "j", ",", "1", "]", ")", ")", ",", "4", ",", "colorstyle", ".", "ring_color", "[", "j", "]", ",", "2", ")", "\n", "", "cv2", ".", "imshow", "(", "'3DPW Example'", ",", "img", ")", "\n", "#cv2.imwrite('data/3dpw/validation/{}_{}_{:05d}.jpg'.format(seq, p_id, index), img)", "\n", "cv2", ".", "waitKey", "(", "0", ")", "\n", "cv2", ".", "destroyAllWindows", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.visualization.plot_log_kpt.average": [[58, 68], ["len"], "function", ["None"], ["def", "average", "(", "*", "args", ")", ":", "\n", "    ", "l", "=", "len", "(", "args", ")", "\n", "sum", "=", "0", "\n", "if", "l", "==", "0", ":", "\n", "        ", "return", "0.0", "\n", "", "i", "=", "0", "\n", "while", "i", "<", "l", ":", "\n", "        ", "sum", "+=", "args", "[", "i", "]", "\n", "i", "+=", "1", "\n", "", "return", "sum", "*", "1.0", "/", "l", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.transformation.kpt_trans.kpt_to_bone_vector": [[4, 17], ["range", "torch.cat", "len", "bone.append", "bone_3d.unsqueeze"], "function", ["None"], ["def", "kpt_to_bone_vector", "(", "pose_3d", ",", "parent_index", "=", "None", ")", ":", "\n", "    ", "if", "parent_index", "is", "not", "None", ":", "\n", "        ", "hm36_parent", "=", "parent_index", "\n", "\n", "", "else", ":", "\n", "        ", "hm36_parent", "=", "[", "-", "1", ",", "0", ",", "1", ",", "2", ",", "0", ",", "4", ",", "5", ",", "0", ",", "7", ",", "8", ",", "9", ",", "8", ",", "11", ",", "12", ",", "8", ",", "14", ",", "15", "]", "#by body kinematic connections", "\n", "#print('random parent index:',hm36_parent)", "\n", "", "bone", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "hm36_parent", ")", ")", ":", "\n", "        ", "bone_3d", "=", "pose_3d", "[", ":", ",", ":", ",", "i", "]", "-", "pose_3d", "[", ":", ",", ":", ",", "hm36_parent", "[", "i", "]", "]", "\n", "bone", ".", "append", "(", "bone_3d", ".", "unsqueeze", "(", "dim", "=", "-", "2", ")", ")", "\n", "", "bone_out", "=", "torch", ".", "cat", "(", "bone", ",", "dim", "=", "-", "2", ")", "\n", "return", "bone_out", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.transformation.kpt_trans.two_order_bone_vector": [[18, 30], ["range", "torch.cat", "len", "bone.append", "bone_3d_2.unsqueeze"], "function", ["None"], ["", "def", "two_order_bone_vector", "(", "bone_3d", ",", "parent_index", "=", "None", ")", ":", "\n", "    ", "if", "parent_index", "is", "not", "None", ":", "\n", "        ", "hm36_parent", "=", "parent_index", "\n", "", "else", ":", "\n", "        ", "hm36_parent", "=", "[", "-", "1", ",", "0", ",", "1", ",", "0", ",", "3", ",", "4", ",", "0", ",", "6", ",", "7", ",", "8", ",", "7", ",", "10", ",", "11", ",", "7", ",", "13", ",", "14", "]", "#by body kinematic connections, same to calculate angles", "\n", "#print('random parent index:',hm36_parent)", "\n", "", "bone", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "hm36_parent", ")", ")", ":", "\n", "        ", "bone_3d_2", "=", "bone_3d", "[", ":", ",", ":", ",", "i", "]", "-", "bone_3d", "[", ":", ",", ":", ",", "hm36_parent", "[", "i", "]", "]", "\n", "bone", ".", "append", "(", "bone_3d_2", ".", "unsqueeze", "(", "dim", "=", "-", "2", ")", ")", "\n", "", "bone_out", "=", "torch", ".", "cat", "(", "bone", ",", "dim", "=", "-", "2", ")", "\n", "return", "bone_out", "", "", ""]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.transformation.cam_utils.normalize_screen_coordinates": [[15, 25], ["numpy.concatenate"], "function", ["None"], ["def", "normalize_screen_coordinates", "(", "X", ",", "w", ",", "h", ")", ":", "\n", "# Normalize so that [0, w] is mapped to [-1, 1], while preserving the aspect ratio", "\n", "    ", "if", "X", ".", "shape", "[", "-", "1", "]", "==", "3", ":", "#input 3d pose", "\n", "        ", "X_norm", "=", "X", "[", "...", ",", ":", "2", "]", "\n", "X_norm", "=", "X_norm", "/", "w", "*", "2", "-", "[", "1", ",", "h", "/", "w", "]", "\n", "X_out", "=", "np", ".", "concatenate", "(", "(", "X_norm", ",", "X", "[", "...", ",", "2", ":", "3", "]", "/", "1000", ")", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "assert", "X", ".", "shape", "[", "-", "1", "]", "==", "2", "\n", "X_out", "=", "X", "/", "w", "*", "2", "-", "[", "1", ",", "h", "/", "w", "]", "\n", "", "return", "X_out", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.transformation.cam_utils.image_coordinates": [[27, 39], ["torch.cat"], "function", ["None"], ["", "def", "image_coordinates", "(", "X", ",", "w", ",", "h", ")", ":", "\n", "# Reverse camera frame normalization", "\n", "    ", "if", "X", ".", "shape", "[", "-", "1", "]", "==", "3", ":", "#input 3d pose", "\n", "        ", "X_norm", "=", "X", "[", "...", ",", ":", "2", "]", "\n", "X_norm", "[", "...", ",", ":", "1", "]", "=", "(", "X_norm", "[", "...", ",", ":", "1", "]", "+", "1", ")", "*", "w", "/", "2", "\n", "X_norm", "[", "...", ",", "1", ":", "2", "]", "=", "(", "X_norm", "[", "...", ",", "1", ":", "2", "]", "+", "h", "/", "w", ")", "*", "w", "/", "2", "\n", "X_out", "=", "torch", ".", "cat", "(", "[", "X_norm", ",", "X", "[", "...", ",", "2", ":", "3", "]", "*", "1000", "]", ",", "-", "1", ")", "\n", "\n", "", "else", ":", "\n", "        ", "assert", "X", ".", "shape", "[", "-", "1", "]", "==", "2", "\n", "X_out", "=", "(", "X", "+", "[", "1", ",", "h", "/", "w", "]", ")", "*", "w", "/", "2", "\n", "", "return", "X_out", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.transformation.cam_utils.world_to_camera": [[41, 44], ["common.common_pytorch.utils.wrap", "common.common_pytorch.utils.wrap", "numpy.tile"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.common_pytorch.utils.wrap", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.common_pytorch.utils.wrap"], ["", "def", "world_to_camera", "(", "X", ",", "R", ",", "t", ")", ":", "\n", "    ", "Rt", "=", "wrap", "(", "qinverse", ",", "R", ")", "# Invert rotation", "\n", "return", "wrap", "(", "qrot", ",", "np", ".", "tile", "(", "Rt", ",", "(", "*", "X", ".", "shape", "[", ":", "-", "1", "]", ",", "1", ")", ")", ",", "X", "-", "t", ")", "# Rotate and translate", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.transformation.cam_utils.camera_to_world": [[46, 48], ["common.common_pytorch.utils.wrap", "numpy.tile"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.common_pytorch.utils.wrap"], ["", "def", "camera_to_world", "(", "X", ",", "R", ",", "t", ")", ":", "\n", "    ", "return", "wrap", "(", "qrot", ",", "np", ".", "tile", "(", "R", ",", "(", "*", "X", ".", "shape", "[", ":", "-", "1", "]", ",", "1", ")", ")", ",", "X", ")", "+", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.transformation.cam_utils.get_intrinsic": [[50, 55], ["len"], "function", ["None"], ["", "def", "get_intrinsic", "(", "camera_params", ")", ":", "\n", "    ", "assert", "len", "(", "camera_params", ".", "shape", ")", "==", "2", "\n", "assert", "camera_params", ".", "shape", "[", "-", "1", "]", "==", "9", "\n", "fx", ",", "fy", ",", "cx", ",", "cy", "=", "camera_params", "[", "...", ",", ":", "1", "]", ",", "camera_params", "[", "...", ",", "1", ":", "2", "]", ",", "camera_params", "[", "...", ",", "2", ":", "3", "]", ",", "camera_params", "[", "...", ",", "3", ":", "4", "]", "\n", "return", "fx", ",", "fy", ",", "cx", ",", "cy", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.transformation.cam_utils.infer_camera_intrinsics": [[57, 68], ["points2d.reshape", "points3d.reshape", "numpy.stack", "list", "numpy.stack", "list", "numpy.array", "[].flatten", "[].flatten", "numpy.linalg.lstsq", "numpy.linalg.lstsq"], "function", ["None"], ["", "def", "infer_camera_intrinsics", "(", "points2d", ",", "points3d", ")", ":", "\n", "    ", "\"\"\"Infer camera instrinsics from 2D<->3D point correspondences.\"\"\"", "\n", "pose2d", "=", "points2d", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "pose3d", "=", "points3d", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "x3d", "=", "np", ".", "stack", "(", "[", "pose3d", "[", ":", ",", "0", "]", ",", "pose3d", "[", ":", ",", "2", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "x2d", "=", "(", "pose2d", "[", ":", ",", "0", "]", "*", "pose3d", "[", ":", ",", "2", "]", ")", "\n", "alpha_x", ",", "x_0", "=", "list", "(", "np", ".", "linalg", ".", "lstsq", "(", "x3d", ",", "x2d", ",", "rcond", "=", "-", "1", ")", "[", "0", "]", ".", "flatten", "(", ")", ")", "\n", "y3d", "=", "np", ".", "stack", "(", "[", "pose3d", "[", ":", ",", "1", "]", ",", "pose3d", "[", ":", ",", "2", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "y2d", "=", "(", "pose2d", "[", ":", ",", "1", "]", "*", "pose3d", "[", ":", ",", "2", "]", ")", "\n", "alpha_y", ",", "y_0", "=", "list", "(", "np", ".", "linalg", ".", "lstsq", "(", "y3d", ",", "y2d", ",", "rcond", "=", "-", "1", ")", "[", "0", "]", ".", "flatten", "(", ")", ")", "\n", "return", "np", ".", "array", "(", "[", "alpha_x", ",", "x_0", ",", "alpha_y", ",", "y_0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.transformation.cam_utils.project_to_2d": [[70, 102], ["torch.clamp", "torch.sum", "torch.sum", "len", "len", "len", "camera_params.unsqueeze.unsqueeze", "torch.sum", "len", "torch.cat", "len", "len", "len"], "function", ["None"], ["", "def", "project_to_2d", "(", "X", ",", "camera_params", ")", ":", "\n", "    ", "\"\"\"\n    Project 3D points to 2D using the Human3.6M camera projection function.\n    This is a differentiable and batched reimplementation of the original MATLAB script.\n\n    Arguments:\n    X -- 3D points in *camera space* to transform (N, *, 3)\n    camera_params -- intrinsic parameteres (N, 2+2+3+2=9)\n    \"\"\"", "\n", "assert", "X", ".", "shape", "[", "-", "1", "]", "==", "3", "\n", "assert", "len", "(", "camera_params", ".", "shape", ")", "==", "2", "\n", "assert", "camera_params", ".", "shape", "[", "-", "1", "]", "==", "9", "\n", "assert", "X", ".", "shape", "[", "0", "]", "==", "camera_params", ".", "shape", "[", "0", "]", "\n", "\n", "while", "len", "(", "camera_params", ".", "shape", ")", "<", "len", "(", "X", ".", "shape", ")", ":", "\n", "        ", "camera_params", "=", "camera_params", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "", "f", "=", "camera_params", "[", "...", ",", ":", "2", "]", "\n", "c", "=", "camera_params", "[", "...", ",", "2", ":", "4", "]", "\n", "k", "=", "camera_params", "[", "...", ",", "4", ":", "7", "]", "\n", "p", "=", "camera_params", "[", "...", ",", "7", ":", "]", "\n", "\n", "XX", "=", "torch", ".", "clamp", "(", "X", "[", "...", ",", ":", "2", "]", "/", "X", "[", "...", ",", "2", ":", "]", ",", "min", "=", "-", "1", ",", "max", "=", "1", ")", "\n", "r2", "=", "torch", ".", "sum", "(", "XX", "[", "...", ",", ":", "2", "]", "**", "2", ",", "dim", "=", "len", "(", "XX", ".", "shape", ")", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "radial", "=", "1", "+", "torch", ".", "sum", "(", "k", "*", "torch", ".", "cat", "(", "(", "r2", ",", "r2", "**", "2", ",", "r2", "**", "3", ")", ",", "dim", "=", "len", "(", "r2", ".", "shape", ")", "-", "1", ")", ",", "dim", "=", "len", "(", "r2", ".", "shape", ")", "-", "1", ",", "\n", "keepdim", "=", "True", ")", "\n", "tan", "=", "torch", ".", "sum", "(", "p", "*", "XX", ",", "dim", "=", "len", "(", "XX", ".", "shape", ")", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "XXX", "=", "XX", "*", "(", "radial", "+", "tan", ")", "+", "p", "*", "r2", "\n", "\n", "return", "f", "*", "XXX", "+", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.transformation.cam_utils.project_to_2d_linear": [[104, 131], ["len", "len", "len", "print", "print", "type", "camera_params.unsqueeze.unsqueeze", "numpy.array().any", "numpy.array().any", "numpy.array", "numpy.array", "numpy.array().any", "numpy.array().any", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "project_to_2d_linear", "(", "X", ",", "camera_params", ")", ":", "\n", "    ", "\"\"\"\n    Project 3D points to 2D using only linear parameters (focal length and principal point).\n\n    Arguments:\n    X -- 3D points in *camera space* to transform (N, *, 3)\n    camera_params -- intrinsic parameteres (N, 2+2+3+2=9)\n    \"\"\"", "\n", "assert", "X", ".", "shape", "[", "-", "1", "]", "==", "3", "\n", "assert", "len", "(", "camera_params", ".", "shape", ")", "==", "2", "\n", "assert", "camera_params", ".", "shape", "[", "-", "1", "]", "==", "9", "\n", "assert", "X", ".", "shape", "[", "0", "]", "==", "camera_params", ".", "shape", "[", "0", "]", "\n", "\n", "while", "len", "(", "camera_params", ".", "shape", ")", "<", "len", "(", "X", ".", "shape", ")", ":", "\n", "        ", "if", "type", "(", "camera_params", ")", "==", "torch", ":", "\n", "            ", "camera_params", "=", "camera_params", ".", "unsqueeze", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "camera_params", "=", "camera_params", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "", "", "f", "=", "camera_params", "[", "...", ",", ":", "2", "]", "\n", "c", "=", "camera_params", "[", "...", ",", "2", ":", "4", "]", "\n", "XX", "=", "X", "[", "...", ",", ":", "2", "]", "/", "X", "[", "...", ",", "2", ":", "]", "\n", "# XX = torch.clamp(X[..., :2] / X[..., 2:], min=-1, max=1)", "\n", "if", "np", ".", "array", "(", "XX", ")", ".", "any", "(", ")", ">", "1", "or", "np", ".", "array", "(", "XX", ")", ".", "any", "(", ")", "<", "-", "1", ":", "\n", "        ", "print", "(", "np", ".", "array", "(", "XX", ")", ".", "any", "(", ")", ">", "1", "or", "np", ".", "array", "(", "XX", ")", ".", "any", "(", ")", "<", "-", "1", ")", "\n", "print", "(", "'Attention for this pose!!!'", ")", "\n", "", "return", "f", "*", "XX", "+", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.transformation.cam_utils.reprojection": [[133, 149], ["camera.unsqueeze().unsqueeze.unsqueeze().unsqueeze", "torch.zeros_like", "camera.unsqueeze().unsqueeze.unsqueeze"], "function", ["None"], ["", "def", "reprojection", "(", "pose_3d", ",", "abs_depth", ",", "camera", ")", ":", "\n", "    ", "\"\"\"\n    :param pose_3d: predicted 3d or normed 3d with pixel unit\n    :param abs_depth: absolute depth root Z in the camera coordinate\n    :param camera: camera intrinsic parameters\n    :return: 3d pose in the camera cooridinate with millimeter unit, root joint: zero-center\n    \"\"\"", "\n", "camera", "=", "camera", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "cx", ",", "cy", ",", "fx", ",", "fy", "=", "camera", "[", ":", ",", ":", ",", ":", ",", "2", ":", "3", "]", ",", "camera", "[", ":", ",", ":", ",", ":", ",", "3", ":", "4", "]", ",", "camera", "[", ":", ",", ":", ",", ":", ",", "0", ":", "1", "]", ",", "camera", "[", ":", ",", ":", ",", ":", ",", "1", ":", "2", "]", "\n", "final_3d", "=", "torch", ".", "zeros_like", "(", "pose_3d", ")", "\n", "final_3d_x", "=", "(", "pose_3d", "[", ":", ",", ":", ",", ":", ",", "0", ":", "1", "]", "-", "cx", ")", "/", "fx", "\n", "final_3d_y", "=", "(", "pose_3d", "[", ":", ",", ":", ",", ":", ",", "1", ":", "2", "]", "-", "cy", ")", "/", "fy", "\n", "final_3d", "[", ":", ",", ":", ",", ":", ",", "0", ":", "1", "]", "=", "final_3d_x", "*", "abs_depth", "\n", "final_3d", "[", ":", ",", ":", ",", ":", ",", "1", ":", "2", "]", "=", "final_3d_y", "*", "abs_depth", "\n", "final_3d", "[", ":", ",", ":", ",", ":", ",", "2", ":", "3", "]", "=", "abs_depth", "\n", "return", "final_3d", "", "", ""]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.transformation.aug_rotate.rotate": [[12, 32], ["range", "numpy.concatenate", "numpy.concatenate", "aug_rotate.process_2d", "range", "numpy.concatenate", "aug_rotate.axis_rotation", "pose_3d.append", "pose_2d.append", "aug_rotate.norm_pixel", "pose_out.append", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.transformation.aug_rotate.process_2d", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.transformation.aug_rotate.axis_rotation", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.transformation.aug_rotate.norm_pixel"], ["def", "rotate", "(", "batch_2d_in", ",", "batch_3d_in", ",", "cam", ",", "repeat_num", ")", ":", "\n", "    ", "pose_3d", "=", "[", "]", "\n", "pose_2d", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "repeat_num", ")", ":", "\n", "        ", "batch_3d", ",", "batch_2d", "=", "axis_rotation", "(", "batch_3d_in", "*", "1000", ",", "cam", ")", "\n", "pose_3d", ".", "append", "(", "batch_3d", ")", "\n", "pose_2d", ".", "append", "(", "batch_2d", ")", "\n", "", "rotate_3d", "=", "np", ".", "concatenate", "(", "pose_3d", ",", "axis", "=", "0", ")", "\n", "batch_3d_out", "=", "np", ".", "concatenate", "(", "(", "batch_3d_in", ",", "rotate_3d", ")", ",", "axis", "=", "0", ")", "\n", "batch_3d_relative", "=", "batch_3d_out", "-", "batch_3d_out", "[", ":", ",", ":", ",", ":", "1", "]", "\n", "\n", "w", ",", "h", "=", "batch_2d_in", "[", ":", ",", ":", ",", "17", ":", "18", ",", "0", ":", "1", "]", ",", "batch_2d_in", "[", ":", ",", ":", ",", "17", ":", "18", ",", "1", ":", "2", "]", "\n", "batch_2d_in_norm", "=", "process_2d", "(", "batch_2d_in", ")", "\n", "\n", "pose_out", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "repeat_num", ")", ":", "\n", "        ", "batch_2d_norm", "=", "norm_pixel", "(", "pose_2d", "[", "i", "]", ",", "w", ",", "h", ")", "\n", "pose_out", ".", "append", "(", "batch_2d_norm", ")", "\n", "", "batch_2d_out", "=", "np", ".", "concatenate", "(", "(", "batch_2d_in_norm", ",", "np", ".", "concatenate", "(", "pose_out", ",", "axis", "=", "0", ")", ")", ",", "axis", "=", "0", ")", "\n", "return", "batch_2d_out", ",", "batch_3d_relative", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.transformation.aug_rotate.axis_rotation": [[33, 75], ["batch_3d[].copy", "numpy.random.uniform().astype", "numpy.random.uniform().astype", "numpy.random.uniform().astype", "numpy.concatenate", "wrap", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.common_pytorch.utils.wrap"], ["", "def", "axis_rotation", "(", "batch_3d", ",", "cam", ")", ":", "\n", "# Input batch 3d pose is presented by the Relative value in pose model coordination. Root=[0,0,0]", "\n", "    ", "batch_root", "=", "batch_3d", "[", ":", ",", ":", ",", ":", "1", "]", ".", "copy", "(", ")", "\n", "batch_size", "=", "batch_3d", ".", "shape", "[", "0", "]", "\n", "batch_pose", "=", "batch_3d", "-", "batch_root", "\n", "theta", "=", "np", ".", "random", ".", "uniform", "(", "-", "np", ".", "pi", ",", "np", ".", "pi", ",", "batch_size", ")", ".", "astype", "(", "'f'", ")", "# Y axis - roll", "\n", "beta", "=", "np", ".", "random", ".", "uniform", "(", "-", "np", ".", "pi", "/", "5", ",", "np", ".", "pi", "/", "5", ",", "batch_size", ")", ".", "astype", "(", "'f'", ")", "# X axis - pitch", "\n", "alpha", "=", "np", ".", "random", ".", "uniform", "(", "-", "np", ".", "pi", "/", "5", ",", "np", ".", "pi", "/", "5", ",", "batch_size", ")", ".", "astype", "(", "'f'", ")", "#Z axis - yaw", "\n", "\n", "cos_theta", "=", "np", ".", "cos", "(", "theta", ")", "[", ":", ",", "None", ",", "None", ",", "None", "]", "\n", "sin_theta", "=", "np", ".", "sin", "(", "theta", ")", "[", ":", ",", "None", ",", "None", ",", "None", "]", "\n", "\n", "cos_beta", "=", "np", ".", "cos", "(", "beta", ")", "[", ":", ",", "None", ",", "None", ",", "None", "]", "\n", "sin_beta", "=", "np", ".", "sin", "(", "beta", ")", "[", ":", ",", "None", ",", "None", ",", "None", "]", "\n", "\n", "cos_alpha", "=", "np", ".", "cos", "(", "alpha", ")", "[", ":", ",", "None", ",", "None", ",", "None", "]", "\n", "sin_alpha", "=", "np", ".", "sin", "(", "alpha", ")", "[", ":", ",", "None", ",", "None", ",", "None", "]", "\n", "\n", "X", "=", "batch_pose", "[", "...", ",", "0", ":", "1", "]", "\n", "Y", "=", "batch_pose", "[", "...", ",", "1", ":", "2", "]", "\n", "Z", "=", "batch_pose", "[", "...", ",", "2", ":", "3", "]", "\n", "\n", "# rotate around Y axis", "\n", "new_x", "=", "X", "*", "cos_theta", "+", "Z", "*", "sin_theta", "\n", "new_y", "=", "Y", "\n", "new_z", "=", "-", "X", "*", "sin_theta", "+", "Z", "*", "cos_theta", "\n", "\n", "# rotate around X axis", "\n", "new_x", "=", "new_x", "\n", "new_y", "=", "new_y", "*", "cos_beta", "-", "new_z", "*", "sin_beta", "\n", "new_z", "=", "new_y", "*", "sin_beta", "+", "new_z", "*", "cos_beta", "\n", "\n", "# rotate around Z axis", "\n", "new_x", "=", "new_x", "*", "cos_alpha", "-", "new_y", "*", "sin_alpha", "\n", "new_y", "=", "new_x", "*", "sin_alpha", "+", "new_y", "*", "cos_alpha", "\n", "new_z", "=", "new_z", "\n", "\n", "rotated_pose", "=", "np", ".", "concatenate", "(", "(", "new_x", ",", "new_y", ",", "new_z", ")", ",", "axis", "=", "-", "1", ")", "\n", "rotated_abs_3d", "=", "rotated_pose", "+", "batch_root", "\n", "rotated_2d", "=", "wrap", "(", "project_to_2d", ",", "rotated_abs_3d", ",", "cam", ")", "\n", "rotated_3d", "=", "rotated_abs_3d", "/", "1000.0", "#change unit from mm to m", "\n", "return", "rotated_3d", ",", "rotated_2d", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.transformation.aug_rotate.process_3d": [[76, 79], ["None"], "function", ["None"], ["", "def", "process_3d", "(", "pose_3d_in", ")", ":", "\n", "    ", "pose_3d_out", "=", "pose_3d_in", "-", "pose_3d_in", "[", ":", ",", ":", ",", ":", "1", "]", "\n", "return", "pose_3d_out", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.transformation.aug_rotate.process_2d": [[80, 85], ["aug_rotate.norm_pixel"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.transformation.aug_rotate.norm_pixel"], ["", "def", "process_2d", "(", "pose_2d_in", ")", ":", "\n", "    ", "pose_2d_joint", "=", "pose_2d_in", "[", ":", ",", ":", ",", ":", "17", "]", "\n", "w", ",", "h", "=", "pose_2d_in", "[", ":", ",", ":", ",", "17", ":", "18", ",", "0", ":", "1", "]", ",", "pose_2d_in", "[", ":", ",", ":", ",", "17", ":", "18", ",", "1", ":", "2", "]", "\n", "pose_2d_in_norm", "=", "norm_pixel", "(", "pose_2d_joint", ",", "w", ",", "h", ")", "\n", "return", "pose_2d_in_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.transformation.aug_rotate.norm_pixel": [[86, 94], ["numpy.abs", "numpy.concatenate"], "function", ["None"], ["", "def", "norm_pixel", "(", "pose_2d", ",", "w", ",", "h", ")", ":", "\n", "    ", "X", "=", "pose_2d", "[", "...", ",", "0", ":", "1", "]", "\n", "Y", "=", "pose_2d", "[", "...", ",", "1", ":", "2", "]", "\n", "norm_X", "=", "X", "/", "w", "*", "2", "-", "1", "\n", "w_abs", "=", "np", ".", "abs", "(", "w", ")", "\n", "norm_Y", "=", "Y", "/", "w_abs", "*", "2", "-", "h", "/", "w_abs", "#The flip influences the w value.", "\n", "norm_2d", "=", "np", ".", "concatenate", "(", "(", "norm_X", ",", "norm_Y", ")", ",", "axis", "=", "-", "1", ")", "\n", "return", "norm_2d", "\n", "", ""]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.transformation.quaternion.qrot": [[10, 25], ["torch.cross", "torch.cross", "len", "len"], "function", ["None"], ["def", "qrot", "(", "q", ",", "v", ")", ":", "\n", "    ", "\"\"\"\n    Rotate vector(s) v about the rotation described by quaternion(s) q.\n    Expects a tensor of shape (*, 4) for q and a tensor of shape (*, 3) for v,\n    where * denotes any number of dimensions.\n    Returns a tensor of shape (*, 3).\n    \"\"\"", "\n", "assert", "q", ".", "shape", "[", "-", "1", "]", "==", "4", "\n", "assert", "v", ".", "shape", "[", "-", "1", "]", "==", "3", "\n", "assert", "q", ".", "shape", "[", ":", "-", "1", "]", "==", "v", ".", "shape", "[", ":", "-", "1", "]", "\n", "\n", "qvec", "=", "q", "[", "...", ",", "1", ":", "]", "\n", "uv", "=", "torch", ".", "cross", "(", "qvec", ",", "v", ",", "dim", "=", "len", "(", "q", ".", "shape", ")", "-", "1", ")", "\n", "uuv", "=", "torch", ".", "cross", "(", "qvec", ",", "uv", ",", "dim", "=", "len", "(", "q", ".", "shape", ")", "-", "1", ")", "\n", "return", "(", "v", "+", "2", "*", "(", "q", "[", "...", ",", ":", "1", "]", "*", "uv", "+", "uuv", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.transformation.quaternion.qinverse": [[27, 36], ["torch.cat", "len"], "function", ["None"], ["", "def", "qinverse", "(", "q", ",", "inplace", "=", "False", ")", ":", "\n", "# We assume the quaternion to be normalized", "\n", "    ", "if", "inplace", ":", "\n", "        ", "q", "[", "...", ",", "1", ":", "]", "*=", "-", "1", "\n", "return", "q", "\n", "", "else", ":", "\n", "        ", "w", "=", "q", "[", "...", ",", ":", "1", "]", "\n", "xyz", "=", "q", "[", "...", ",", "1", ":", "]", "\n", "return", "torch", ".", "cat", "(", "(", "w", ",", "-", "xyz", ")", ",", "dim", "=", "len", "(", "q", ".", "shape", ")", "-", "1", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.h36m_dataset.Human36mDataset.__init__": [[210, 249], ["common.dataset.mocap_dataset.MocapDataset.__init__", "copy.deepcopy", "h36m_dataset.Human36mDataset._cameras.values", "[].item", "[].item.items", "enumerate", "actions.items", "h36m_dataset.Human36mDataset.remove_joints", "cam.update", "cam.items", "numpy.concatenate", "numpy.load", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.loss.loss_family.L1GaussianRegressionNewFlow.__init__", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.skeleton.Skeleton.remove_joints"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "remove_static_joints", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "fps", "=", "50", ",", "skeleton", "=", "h36m_skeleton", ")", "\n", "\n", "self", ".", "_cameras", "=", "copy", ".", "deepcopy", "(", "h36m_cameras_extrinsic_params", ")", "\n", "for", "cameras", "in", "self", ".", "_cameras", ".", "values", "(", ")", ":", "\n", "            ", "for", "i", ",", "cam", "in", "enumerate", "(", "cameras", ")", ":", "\n", "                ", "cam", ".", "update", "(", "h36m_cameras_intrinsic_params", "[", "i", "]", ")", "\n", "for", "k", ",", "v", "in", "cam", ".", "items", "(", ")", ":", "\n", "                    ", "if", "k", "not", "in", "[", "'id'", ",", "'res_w'", ",", "'res_h'", "]", ":", "\n", "                        ", "cam", "[", "k", "]", "=", "np", ".", "array", "(", "v", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "", "", "if", "'translation'", "in", "cam", ":", "\n", "                    ", "cam", "[", "'translation'", "]", "=", "cam", "[", "'translation'", "]", "/", "1000", "# mm to meters", "\n", "\n", "# Add intrinsic parameters vector", "\n", "", "cam", "[", "'intrinsic'", "]", "=", "np", ".", "concatenate", "(", "(", "cam", "[", "'focal_length'", "]", ",", "\n", "cam", "[", "'center'", "]", ",", "\n", "cam", "[", "'radial_distortion'", "]", ",", "\n", "cam", "[", "'tangential_distortion'", "]", ")", ")", "\n", "\n", "# Load serialized dataset", "\n", "", "", "data", "=", "np", ".", "load", "(", "path", ",", "allow_pickle", "=", "True", ")", "[", "'positions_3d'", "]", ".", "item", "(", ")", "\n", "\n", "self", ".", "_data", "=", "{", "}", "\n", "for", "subject", ",", "actions", "in", "data", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "_data", "[", "subject", "]", "=", "{", "}", "\n", "for", "action_name", ",", "positions", "in", "actions", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "_data", "[", "subject", "]", "[", "action_name", "]", "=", "{", "\n", "'positions'", ":", "positions", ",", "\n", "'cameras'", ":", "self", ".", "_cameras", "[", "subject", "]", ",", "\n", "}", "\n", "\n", "", "", "if", "remove_static_joints", ":", "\n", "# Bring the skeleton to 17 joints instead of the original 32", "\n", "            ", "self", ".", "remove_joints", "(", "[", "4", ",", "5", ",", "9", ",", "10", ",", "11", ",", "16", ",", "20", ",", "21", ",", "22", ",", "23", ",", "24", ",", "28", ",", "29", ",", "30", ",", "31", "]", ")", "\n", "\n", "# Rewire shoulders to the correct parents", "\n", "self", ".", "_skeleton", ".", "_parents", "[", "11", "]", "=", "8", "\n", "self", ".", "_skeleton", ".", "_parents", "[", "14", "]", "=", "8", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.h36m_dataset.Human36mDataset.supports_semi_supervised": [[250, 252], ["None"], "methods", ["None"], ["", "", "def", "supports_semi_supervised", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.mocap_dataset.MocapDataset.__init__": [[13, 18], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "fps", ",", "skeleton", ")", ":", "\n", "        ", "self", ".", "_skeleton", "=", "skeleton", "\n", "self", ".", "_fps", "=", "fps", "\n", "self", ".", "_data", "=", "None", "# Must be filled by subclass", "\n", "self", ".", "_cameras", "=", "None", "# Must be filled by subclass", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.mocap_dataset.MocapDataset.remove_joints": [[19, 26], ["mocap_dataset.MocapDataset._skeleton.remove_joints", "mocap_dataset.MocapDataset._data.keys", "mocap_dataset.MocapDataset._data[].keys"], "methods", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.skeleton.Skeleton.remove_joints"], ["", "def", "remove_joints", "(", "self", ",", "joints_to_remove", ")", ":", "\n", "        ", "kept_joints", "=", "self", ".", "_skeleton", ".", "remove_joints", "(", "joints_to_remove", ")", "\n", "for", "subject", "in", "self", ".", "_data", ".", "keys", "(", ")", ":", "\n", "            ", "for", "action", "in", "self", ".", "_data", "[", "subject", "]", ".", "keys", "(", ")", ":", "\n", "                ", "s", "=", "self", ".", "_data", "[", "subject", "]", "[", "action", "]", "\n", "if", "'positions'", "in", "s", ":", "\n", "                    ", "s", "[", "'positions'", "]", "=", "s", "[", "'positions'", "]", "[", ":", ",", "kept_joints", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.mocap_dataset.MocapDataset.__getitem__": [[27, 29], ["None"], "methods", ["None"], ["", "", "", "", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "_data", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.mocap_dataset.MocapDataset.subjects": [[30, 32], ["mocap_dataset.MocapDataset._data.keys"], "methods", ["None"], ["", "def", "subjects", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_data", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.mocap_dataset.MocapDataset.fps": [[33, 35], ["None"], "methods", ["None"], ["", "def", "fps", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_fps", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.mocap_dataset.MocapDataset.skeleton": [[36, 38], ["None"], "methods", ["None"], ["", "def", "skeleton", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_skeleton", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.mocap_dataset.MocapDataset.cameras": [[39, 41], ["None"], "methods", ["None"], ["", "def", "cameras", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_cameras", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.mocap_dataset.MocapDataset.supports_semi_supervised": [[42, 45], ["None"], "methods", ["None"], ["", "def", "supports_semi_supervised", "(", "self", ")", ":", "\n", "# This method can be overridden", "\n", "        ", "return", "False", "", "", "", ""]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.data_generators.ChunkedGenerator.__init__": [[38, 116], ["range", "numpy.empty", "numpy.random.RandomState", "len", "len", "len", "print", "range", "pose2d_rot.copy", "pose3d_rot.copy", "len", "numpy.full", "zip", "numpy.empty", "len", "len", "len", "len", "common.transformation.aug_rotate.rotate", "pose2d_rot.append", "pose3d_rot.append", "print", "range", "pose2d.copy", "pose3d.copy", "len", "numpy.repeat", "zip", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.repeat", "p_2d.squeeze", "p_3d.squeeze", "len", "pose2d.append", "pose3d.append", "numpy.arange", "len", "numpy.repeat", "len", "common.transformation.aug_rotate.process_2d().squeeze", "common.transformation.aug_rotate.process_3d().squeeze", "len", "common.transformation.aug_rotate.process_2d", "common.transformation.aug_rotate.process_3d"], "methods", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.transformation.aug_rotate.rotate", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.transformation.aug_rotate.process_2d", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.transformation.aug_rotate.process_3d"], ["def", "__init__", "(", "self", ",", "batch_size", ",", "use_params", ",", "poses_3d", ",", "poses_2d", ",", "\n", "chunk_length", ",", "pad", "=", "0", ",", "causal_shift", "=", "0", ",", "\n", "shuffle", "=", "True", ",", "random_seed", "=", "args", ".", "rand_seed", ",", "\n", "augment", "=", "False", ",", "kps_left", "=", "None", ",", "kps_right", "=", "None", ",", "joints_left", "=", "None", ",", "joints_right", "=", "None", ",", "\n", "endless", "=", "False", ",", "train_rotation", "=", "False", ")", ":", "\n", "        ", "assert", "poses_3d", "is", "None", "or", "len", "(", "poses_3d", ")", "==", "len", "(", "poses_2d", ")", ",", "(", "len", "(", "poses_3d", ")", ",", "len", "(", "poses_2d", ")", ")", "\n", "assert", "use_params", "is", "None", "or", "len", "(", "use_params", ")", "==", "len", "(", "poses_2d", ")", "\n", "\n", "if", "train_rotation", ":", "\n", "            ", "lens", "=", "len", "(", "poses_2d", ")", "\n", "pose2d_rot", "=", "[", "]", "\n", "pose3d_rot", "=", "[", "]", "\n", "print", "(", "'use rotation augmentation'", ")", "\n", "for", "i", "in", "range", "(", "lens", ")", ":", "\n", "                ", "p_2d", ",", "p_3d", "=", "rotate", "(", "poses_2d", "[", "i", "]", "[", ":", ",", "np", ".", "newaxis", "]", ",", "poses_3d", "[", "i", "]", "[", ":", ",", "np", ".", "newaxis", "]", ",", "\n", "np", ".", "repeat", "(", "use_params", "[", "i", "]", "[", "'intrinsic'", "]", "[", "np", ".", "newaxis", ",", ":", "]", ",", "poses_3d", "[", "i", "]", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", ",", "\n", "args", ".", "repeat_num", ")", "\n", "pose2d_rot", ".", "append", "(", "p_2d", ".", "squeeze", "(", ")", ")", "\n", "pose3d_rot", ".", "append", "(", "p_3d", ".", "squeeze", "(", ")", ")", "\n", "", "poses_2d", "=", "pose2d_rot", ".", "copy", "(", ")", "\n", "poses_3d", "=", "pose3d_rot", ".", "copy", "(", ")", "\n", "", "else", ":", "# For eval", "\n", "            ", "if", "poses_2d", "[", "0", "]", ".", "shape", "[", "-", "2", "]", "==", "18", ":", "\n", "                ", "pose2d", "=", "[", "]", "\n", "pose3d", "=", "[", "]", "\n", "print", "(", "'do normalization in generator'", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "poses_2d", ")", ")", ":", "\n", "                    ", "pose2d", ".", "append", "(", "process_2d", "(", "poses_2d", "[", "i", "]", "[", ":", ",", "np", ".", "newaxis", "]", ")", ".", "squeeze", "(", ")", ")", "\n", "pose3d", ".", "append", "(", "process_3d", "(", "poses_3d", "[", "i", "]", "[", ":", ",", "np", ".", "newaxis", "]", ")", ".", "squeeze", "(", ")", ")", "\n", "", "poses_2d", "=", "pose2d", ".", "copy", "(", ")", "\n", "poses_3d", "=", "pose3d", ".", "copy", "(", ")", "\n", "\n", "# Build lineage info", "\n", "", "", "pairs", "=", "[", "]", "# (seq_idx, start_frame, end_frame, flip) tuples", "\n", "for", "i", "in", "range", "(", "len", "(", "poses_2d", ")", ")", ":", "\n", "            ", "assert", "poses_3d", "is", "None", "or", "poses_3d", "[", "i", "]", ".", "shape", "[", "0", "]", "==", "poses_2d", "[", "i", "]", ".", "shape", "[", "0", "]", "\n", "# change poses_2d[i].shape[0] to poses_3d[i].shape[0], since CPN 2d detector have more data than 3d.", "\n", "n_chunks", "=", "(", "poses_3d", "[", "i", "]", ".", "shape", "[", "0", "]", "+", "chunk_length", "-", "1", ")", "//", "chunk_length", "\n", "offset", "=", "(", "n_chunks", "*", "chunk_length", "-", "poses_3d", "[", "i", "]", ".", "shape", "[", "0", "]", ")", "//", "2", "\n", "bounds", "=", "np", ".", "arange", "(", "n_chunks", "+", "1", ")", "*", "chunk_length", "-", "offset", "\n", "augment_vector", "=", "np", ".", "full", "(", "len", "(", "bounds", "-", "1", ")", ",", "False", ",", "dtype", "=", "bool", ")", "\n", "pairs", "+=", "zip", "(", "np", ".", "repeat", "(", "i", ",", "len", "(", "bounds", "-", "1", ")", ")", ",", "bounds", "[", ":", "-", "1", "]", ",", "bounds", "[", "1", ":", "]", ",", "augment_vector", ")", "\n", "if", "augment", ":", "\n", "                ", "pairs", "+=", "zip", "(", "np", ".", "repeat", "(", "i", ",", "len", "(", "bounds", "-", "1", ")", ")", ",", "bounds", "[", ":", "-", "1", "]", ",", "bounds", "[", "1", ":", "]", ",", "~", "augment_vector", ")", "\n", "# Initialize buffers", "\n", "", "", "if", "use_params", "is", "not", "None", ":", "\n", "            ", "self", ".", "batch_cam", "=", "np", ".", "empty", "(", "(", "batch_size", ",", "use_params", "[", "0", "]", "[", "'intrinsic'", "]", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "if", "'normalization_params'", "in", "use_params", "[", "0", "]", ":", "\n", "                ", "self", ".", "norm_params", "=", "np", ".", "empty", "(", "\n", "(", "batch_size", ",", "chunk_length", ",", "chunk_length", ",", "use_params", "[", "0", "]", "[", "'normalization_params'", "]", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "", "", "if", "poses_3d", "is", "not", "None", ":", "\n", "            ", "if", "args", ".", "use_same_3d_input", ":", "\n", "                ", "self", ".", "batch_3d", "=", "np", ".", "empty", "(", "\n", "(", "batch_size", ",", "chunk_length", "+", "2", "*", "pad", ",", "poses_3d", "[", "0", "]", ".", "shape", "[", "-", "2", "]", ",", "poses_3d", "[", "0", "]", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "batch_3d", "=", "np", ".", "empty", "(", "(", "batch_size", ",", "chunk_length", ",", "poses_3d", "[", "0", "]", ".", "shape", "[", "-", "2", "]", ",", "poses_3d", "[", "0", "]", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "", "", "self", ".", "batch_2d", "=", "np", ".", "empty", "(", "(", "batch_size", ",", "chunk_length", "+", "2", "*", "pad", ",", "poses_2d", "[", "0", "]", ".", "shape", "[", "-", "2", "]", ",", "poses_2d", "[", "0", "]", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "\n", "self", ".", "num_batches", "=", "(", "len", "(", "pairs", ")", "+", "batch_size", "-", "1", ")", "//", "batch_size", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "random", "=", "np", ".", "random", ".", "RandomState", "(", "random_seed", ")", "\n", "self", ".", "pairs", "=", "pairs", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "pad", "=", "pad", "\n", "self", ".", "causal_shift", "=", "causal_shift", "\n", "self", ".", "endless", "=", "endless", "\n", "self", ".", "state", "=", "None", "\n", "\n", "self", ".", "use_params", "=", "use_params", "\n", "self", ".", "poses_3d", "=", "poses_3d", "\n", "self", ".", "poses_2d", "=", "poses_2d", "\n", "\n", "self", ".", "augment", "=", "augment", "\n", "self", ".", "kps_left", "=", "kps_left", "\n", "self", ".", "kps_right", "=", "kps_right", "\n", "self", ".", "joints_left", "=", "joints_left", "\n", "self", ".", "joints_right", "=", "joints_right", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.data_generators.ChunkedGenerator.num_frames": [[117, 119], ["None"], "methods", ["None"], ["", "def", "num_frames", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_batches", "*", "self", ".", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.data_generators.ChunkedGenerator.random_state": [[120, 122], ["None"], "methods", ["None"], ["", "def", "random_state", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "random", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.data_generators.ChunkedGenerator.set_random_state": [[123, 125], ["None"], "methods", ["None"], ["", "def", "set_random_state", "(", "self", ",", "random", ")", ":", "\n", "        ", "self", ".", "random", "=", "random", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.data_generators.ChunkedGenerator.augment_enabled": [[126, 128], ["None"], "methods", ["None"], ["", "def", "augment_enabled", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "augment", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.data_generators.ChunkedGenerator.next_pairs": [[129, 138], ["data_generators.ChunkedGenerator.random.permutation"], "methods", ["None"], ["", "def", "next_pairs", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "state", "is", "None", ":", "\n", "            ", "if", "self", ".", "shuffle", ":", "\n", "                ", "pairs", "=", "self", ".", "random", ".", "permutation", "(", "self", ".", "pairs", ")", "\n", "", "else", ":", "\n", "                ", "pairs", "=", "self", ".", "pairs", "\n", "", "return", "0", ",", "pairs", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.data_generators.ChunkedGenerator.next_epoch": [[139, 233], ["data_generators.ChunkedGenerator.next_pairs", "range", "enumerate", "max", "min", "numpy.pad", "max", "min", "numpy.pad", "max", "min", "numpy.pad", "len", "len", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.data_generators.ChunkedGenerator.next_pairs"], ["", "", "def", "next_epoch", "(", "self", ")", ":", "\n", "        ", "enabled", "=", "True", "\n", "while", "enabled", ":", "\n", "            ", "start_idx", ",", "pairs", "=", "self", ".", "next_pairs", "(", ")", "\n", "for", "b_i", "in", "range", "(", "start_idx", ",", "self", ".", "num_batches", ")", ":", "\n", "                ", "chunks", "=", "pairs", "[", "b_i", "*", "self", ".", "batch_size", ":", "(", "b_i", "+", "1", ")", "*", "self", ".", "batch_size", "]", "\n", "for", "i", ",", "(", "seq_i", ",", "start_3d", ",", "end_3d", ",", "flip", ")", "in", "enumerate", "(", "chunks", ")", ":", "\n", "                    ", "start_2d", "=", "start_3d", "-", "self", ".", "pad", "-", "self", ".", "causal_shift", "\n", "end_2d", "=", "end_3d", "+", "self", ".", "pad", "-", "self", ".", "causal_shift", "\n", "# 2D poses", "\n", "seq_2d", "=", "self", ".", "poses_2d", "[", "seq_i", "]", "\n", "# Chunk 2d pose", "\n", "low_2d", "=", "max", "(", "start_2d", ",", "0", ")", "\n", "high_2d", "=", "min", "(", "end_2d", ",", "seq_2d", ".", "shape", "[", "0", "]", ")", "\n", "pad_left_2d", "=", "low_2d", "-", "start_2d", "\n", "pad_right_2d", "=", "end_2d", "-", "high_2d", "\n", "if", "pad_left_2d", "!=", "0", "or", "pad_right_2d", "!=", "0", ":", "\n", "                        ", "self", ".", "batch_2d", "[", "i", "]", "=", "np", ".", "pad", "(", "seq_2d", "[", "low_2d", ":", "high_2d", "]", ",", "(", "(", "pad_left_2d", ",", "pad_right_2d", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ")", ",", "\n", "'edge'", ")", "\n", "", "else", ":", "\n", "                        ", "self", ".", "batch_2d", "[", "i", "]", "=", "seq_2d", "[", "low_2d", ":", "high_2d", "]", "\n", "", "if", "flip", ":", "\n", "# Flip 2D joints", "\n", "                        ", "self", ".", "batch_2d", "[", "i", ",", ":", ",", ":", ",", "0", "]", "*=", "-", "1", "\n", "self", ".", "batch_2d", "[", "i", ",", ":", ",", "self", ".", "kps_left", "+", "self", ".", "kps_right", "]", "=", "self", ".", "batch_2d", "[", "i", ",", ":", ",", "\n", "self", ".", "kps_right", "+", "self", ".", "kps_left", "]", "\n", "\n", "# 3D poses", "\n", "", "if", "self", ".", "poses_3d", "is", "not", "None", ":", "\n", "                        ", "seq_3d", "=", "self", ".", "poses_3d", "[", "seq_i", "]", "\n", "if", "args", ".", "use_same_3d_input", ":", "\n", "                            ", "start_3d", "=", "start_2d", "\n", "end_3d", "=", "end_2d", "\n", "# Chunk 3d pose", "\n", "", "low_3d", "=", "max", "(", "start_3d", ",", "0", ")", "\n", "high_3d", "=", "min", "(", "end_3d", ",", "seq_3d", ".", "shape", "[", "0", "]", ")", "\n", "pad_left_3d", "=", "low_3d", "-", "start_3d", "\n", "pad_right_3d", "=", "end_3d", "-", "high_3d", "\n", "if", "pad_left_3d", "!=", "0", "or", "pad_right_3d", "!=", "0", ":", "\n", "                            ", "self", ".", "batch_3d", "[", "i", "]", "=", "np", ".", "pad", "(", "seq_3d", "[", "low_3d", ":", "high_3d", "]", ",", "\n", "(", "(", "pad_left_3d", ",", "pad_right_3d", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'edge'", ")", "\n", "", "else", ":", "\n", "                            ", "self", ".", "batch_3d", "[", "i", "]", "=", "seq_3d", "[", "low_3d", ":", "high_3d", "]", "\n", "\n", "", "if", "flip", ":", "\n", "# Flip 3D joints", "\n", "                            ", "self", ".", "batch_3d", "[", "i", ",", ":", ",", ":", ",", "0", "]", "*=", "-", "1", "\n", "self", ".", "batch_3d", "[", "i", ",", ":", ",", "self", ".", "joints_left", "+", "self", ".", "joints_right", "]", "=", "self", ".", "batch_3d", "[", "i", ",", ":", ",", "\n", "self", ".", "joints_right", "+", "self", ".", "joints_left", "]", "\n", "# Cameras", "\n", "", "", "if", "self", ".", "use_params", "is", "not", "None", ":", "\n", "                        ", "self", ".", "batch_cam", "[", "i", "]", "=", "self", ".", "use_params", "[", "seq_i", "]", "[", "'intrinsic'", "]", "\n", "# if flip:", "\n", "#     # Flip horizontal distortion coefficients", "\n", "#     self.batch_cam[i, 2] *= -1", "\n", "#     self.batch_cam[i, 7] *= -1", "\n", "if", "'normalization_params'", "in", "self", ".", "use_params", "[", "seq_i", "]", ":", "\n", "# Chunk normalization parameters", "\n", "                            ", "seq_params", "=", "self", ".", "use_params", "[", "seq_i", "]", "[", "'normalization_params'", "]", "# [T,1,5]", "\n", "low_3d", "=", "max", "(", "start_3d", ",", "0", ")", "\n", "high_3d", "=", "min", "(", "end_3d", ",", "seq_params", ".", "shape", "[", "0", "]", ")", "\n", "pad_left_3d", "=", "low_3d", "-", "start_3d", "\n", "pad_right_3d", "=", "end_3d", "-", "high_3d", "\n", "if", "pad_left_3d", "!=", "0", "or", "pad_right_3d", "!=", "0", ":", "\n", "                                ", "self", ".", "norm_params", "[", "i", "]", "=", "np", ".", "pad", "(", "seq_params", "[", "low_3d", ":", "high_3d", "]", ",", "\n", "(", "(", "pad_left_3d", ",", "pad_right_3d", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'edge'", ")", "\n", "", "else", ":", "\n", "                                ", "self", ".", "norm_params", "[", "i", "]", "=", "seq_params", "[", "low_3d", ":", "high_3d", "]", "# [1,5]", "\n", "", "if", "flip", ":", "\n", "# Flip 3D joints", "\n", "                                ", "self", ".", "norm_params", "[", "i", ",", ":", ",", ":", ",", "2", "]", "=", "2", "*", "self", ".", "batch_cam", "[", "\n", "i", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "2", "]", "-", "self", ".", "norm_params", "[", "i", ",", ":", ",", ":", ",", "2", "]", "# Flip offset_x", "\n", "", "", "", "use_params", "=", "{", "}", "\n", "if", "self", ".", "use_params", "is", "not", "None", ":", "\n", "                        ", "if", "'normalization_params'", "in", "self", ".", "use_params", "[", "0", "]", ":", "\n", "                            ", "use_params", "[", "'normalization_params'", "]", "=", "self", ".", "norm_params", "[", ":", "len", "(", "chunks", ")", "]", "\n", "", "use_params", "[", "'intrinsic'", "]", "=", "self", ".", "batch_cam", "[", ":", "len", "(", "chunks", ")", "]", "\n", "self", ".", "use_param", "=", "use_params", "\n", "\n", "", "", "if", "self", ".", "endless", ":", "\n", "                    ", "self", ".", "state", "=", "(", "b_i", "+", "1", ",", "pairs", ")", "\n", "", "if", "self", ".", "poses_3d", "is", "None", "and", "self", ".", "use_params", "is", "None", ":", "\n", "                    ", "yield", "None", ",", "None", ",", "self", ".", "batch_2d", "[", ":", "len", "(", "chunks", ")", "]", "\n", "", "elif", "self", ".", "poses_3d", "is", "not", "None", "and", "self", ".", "use_params", "is", "None", ":", "\n", "                    ", "yield", "None", ",", "self", ".", "batch_3d", "[", ":", "len", "(", "chunks", ")", "]", ",", "self", ".", "batch_2d", "[", ":", "len", "(", "chunks", ")", "]", "\n", "", "elif", "self", ".", "poses_3d", "is", "None", ":", "\n", "                    ", "yield", "self", ".", "use_param", ",", "None", ",", "self", ".", "batch_2d", "[", ":", "len", "(", "chunks", ")", "]", "\n", "", "else", ":", "\n", "                    ", "yield", "self", ".", "use_param", ",", "self", ".", "batch_3d", "[", ":", "len", "(", "chunks", ")", "]", ",", "self", ".", "batch_2d", "[", ":", "len", "(", "chunks", ")", "]", "\n", "\n", "", "", "if", "self", ".", "endless", ":", "\n", "                ", "self", ".", "state", "=", "None", "\n", "", "else", ":", "\n", "                ", "enabled", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.data_generators.UnchunkedGenerator.__init__": [[255, 271], ["len", "len", "len", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "use_params", ",", "poses_3d", ",", "poses_2d", ",", "pad", "=", "0", ",", "causal_shift", "=", "0", ",", "\n", "augment", "=", "False", ",", "kps_left", "=", "None", ",", "kps_right", "=", "None", ",", "joints_left", "=", "None", ",", "joints_right", "=", "None", ")", ":", "\n", "        ", "assert", "poses_3d", "is", "None", "or", "len", "(", "poses_3d", ")", "==", "len", "(", "poses_2d", ")", "\n", "assert", "use_params", "is", "None", "or", "len", "(", "use_params", ")", "==", "len", "(", "poses_2d", ")", "\n", "\n", "self", ".", "augment", "=", "augment", "\n", "self", ".", "kps_left", "=", "kps_left", "\n", "self", ".", "kps_right", "=", "kps_right", "\n", "self", ".", "joints_left", "=", "joints_left", "\n", "self", ".", "joints_right", "=", "joints_right", "\n", "\n", "self", ".", "pad", "=", "pad", "\n", "self", ".", "causal_shift", "=", "causal_shift", "\n", "self", ".", "cameras", "=", "[", "]", "if", "use_params", "is", "None", "else", "use_params", "\n", "self", ".", "poses_3d", "=", "[", "]", "if", "poses_3d", "is", "None", "else", "poses_3d", "\n", "self", ".", "poses_2d", "=", "poses_2d", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.data_generators.UnchunkedGenerator.num_frames": [[272, 277], ["None"], "methods", ["None"], ["", "def", "num_frames", "(", "self", ")", ":", "\n", "        ", "count", "=", "0", "\n", "for", "p", "in", "self", ".", "poses_2d", ":", "\n", "            ", "count", "+=", "p", ".", "shape", "[", "0", "]", "\n", "", "return", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.data_generators.UnchunkedGenerator.augment_enabled": [[278, 280], ["None"], "methods", ["None"], ["", "def", "augment_enabled", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "augment", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.data_generators.UnchunkedGenerator.set_augment": [[281, 283], ["None"], "methods", ["None"], ["", "def", "set_augment", "(", "self", ",", "augment", ")", ":", "\n", "        ", "self", ".", "augment", "=", "augment", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.data_generators.UnchunkedGenerator.next_epoch": [[284, 324], ["itertools.zip_longest", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.concatenate", "numpy.pad", "numpy.concatenate", "numpy.expand_dims", "numpy.concatenate", "numpy.concatenate"], "methods", ["None"], ["", "def", "next_epoch", "(", "self", ")", ":", "\n", "        ", "for", "seq_cam", ",", "seq_3d", ",", "seq_2d", "in", "zip_longest", "(", "self", ".", "cameras", ",", "self", ".", "poses_3d", ",", "self", ".", "poses_2d", ")", ":", "\n", "            ", "batch_cam", "=", "None", "if", "seq_cam", "is", "None", "else", "np", ".", "expand_dims", "(", "seq_cam", "[", "'intrinsic'", "]", ",", "axis", "=", "0", ")", "# [1,9]", "\n", "if", "seq_cam", ":", "\n", "                ", "if", "'normalization_params'", "in", "seq_cam", ":", "\n", "                    ", "batch_norm_param", "=", "None", "if", "seq_cam", "is", "None", "else", "np", ".", "expand_dims", "(", "seq_cam", "[", "'normalization_params'", "]", ",", "\n", "axis", "=", "0", ")", "# [1,T,1,5]", "\n", "", "", "if", "args", ".", "use_same_3d_input", ":", "\n", "                ", "batch_2d", "=", "np", ".", "expand_dims", "(", "seq_2d", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "batch_2d", "=", "np", ".", "expand_dims", "(", "\n", "np", ".", "pad", "(", "seq_2d", ",", "(", "(", "self", ".", "pad", "+", "self", ".", "causal_shift", ",", "self", ".", "pad", "-", "self", ".", "causal_shift", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ")", ",", "\n", "'edge'", ")", ",", "axis", "=", "0", ")", "\n", "# batch_3d = None if seq_3d is None else np.expand_dims(np.pad(seq_3d,((self.pad + self.causal_shift, self.pad - self.causal_shift), (0, 0), (0, 0)),'edge'), axis=0)", "\n", "", "batch_3d", "=", "None", "if", "seq_3d", "is", "None", "else", "np", ".", "expand_dims", "(", "seq_3d", ",", "axis", "=", "0", ")", "\n", "\n", "if", "self", ".", "augment", ":", "\n", "# Append flipped version", "\n", "                ", "if", "seq_cam", ":", "\n", "                    ", "if", "batch_cam", "is", "not", "None", ":", "\n", "                        ", "batch_cam", "=", "np", ".", "concatenate", "(", "(", "batch_cam", ",", "batch_cam", ")", ",", "axis", "=", "0", ")", "\n", "", "if", "'normalization_params'", "in", "seq_cam", ":", "\n", "                        ", "batch_norm_param", "=", "np", ".", "concatenate", "(", "(", "batch_norm_param", ",", "batch_norm_param", ")", ",", "axis", "=", "0", ")", "\n", "batch_norm_param", "[", "1", ",", ":", ",", ":", ",", "2", "]", "=", "2", "*", "batch_cam", "[", "0", ",", "2", "]", "-", "batch_norm_param", "[", "0", ",", ":", ",", ":", ",", "2", "]", "# offset_x", "\n", "\n", "", "", "if", "batch_3d", "is", "not", "None", ":", "\n", "                    ", "batch_3d", "=", "np", ".", "concatenate", "(", "(", "batch_3d", ",", "batch_3d", ")", ",", "axis", "=", "0", ")", "\n", "batch_3d", "[", "1", ",", ":", ",", ":", ",", "0", "]", "*=", "-", "1", "\n", "batch_3d", "[", "1", ",", ":", ",", "self", ".", "joints_left", "+", "self", ".", "joints_right", "]", "=", "batch_3d", "[", "1", ",", ":", ",", "\n", "self", ".", "joints_right", "+", "self", ".", "joints_left", "]", "\n", "", "batch_2d", "=", "np", ".", "concatenate", "(", "(", "batch_2d", ",", "batch_2d", ")", ",", "axis", "=", "0", ")", "\n", "batch_2d", "[", "1", ",", ":", ",", ":", ",", "0", "]", "*=", "-", "1", "\n", "batch_2d", "[", "1", ",", ":", ",", "self", ".", "kps_left", "+", "self", ".", "kps_right", "]", "=", "batch_2d", "[", "1", ",", ":", ",", "self", ".", "kps_right", "+", "self", ".", "kps_left", "]", "\n", "", "use_params", "=", "{", "}", "\n", "if", "seq_cam", ":", "\n", "                ", "if", "'normalization_params'", "in", "seq_cam", ":", "\n", "                    ", "use_params", "[", "'normalization_params'", "]", "=", "batch_norm_param", "\n", "", "use_params", "[", "'intrinsic'", "]", "=", "batch_cam", "\n", "\n", "", "yield", "use_params", ",", "batch_3d", ",", "batch_2d", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.skeleton.Skeleton.__init__": [[10, 17], ["numpy.array", "skeleton.Skeleton._compute_metadata", "len", "len"], "methods", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.skeleton.Skeleton._compute_metadata"], ["    ", "def", "__init__", "(", "self", ",", "parents", ",", "joints_left", ",", "joints_right", ")", ":", "\n", "        ", "assert", "len", "(", "joints_left", ")", "==", "len", "(", "joints_right", ")", "\n", "\n", "self", ".", "_parents", "=", "np", ".", "array", "(", "parents", ")", "\n", "self", ".", "_joints_left", "=", "joints_left", "\n", "self", ".", "_joints_right", "=", "joints_right", "\n", "self", ".", "_compute_metadata", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.skeleton.Skeleton.num_joints": [[18, 20], ["len"], "methods", ["None"], ["", "def", "num_joints", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_parents", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.skeleton.Skeleton.parents": [[21, 23], ["None"], "methods", ["None"], ["", "def", "parents", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_parents", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.skeleton.Skeleton.has_children": [[24, 26], ["None"], "methods", ["None"], ["", "def", "has_children", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_has_children", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.skeleton.Skeleton.children": [[27, 29], ["None"], "methods", ["None"], ["", "def", "children", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_children", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.skeleton.Skeleton.remove_joints": [[30, 68], ["range", "range", "numpy.zeros", "enumerate", "numpy.array", "skeleton.Skeleton._compute_metadata", "len", "len", "len", "valid_joints.append", "new_parents.append", "new_joints_left.append", "new_joints_right.append"], "methods", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.skeleton.Skeleton._compute_metadata"], ["", "def", "remove_joints", "(", "self", ",", "joints_to_remove", ")", ":", "\n", "        ", "\"\"\"\n        Remove the joints specified in 'joints_to_remove'.\n        \"\"\"", "\n", "valid_joints", "=", "[", "]", "\n", "for", "joint", "in", "range", "(", "len", "(", "self", ".", "_parents", ")", ")", ":", "\n", "            ", "if", "joint", "not", "in", "joints_to_remove", ":", "\n", "                ", "valid_joints", ".", "append", "(", "joint", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "_parents", ")", ")", ":", "\n", "            ", "while", "self", ".", "_parents", "[", "i", "]", "in", "joints_to_remove", ":", "\n", "                ", "self", ".", "_parents", "[", "i", "]", "=", "self", ".", "_parents", "[", "self", ".", "_parents", "[", "i", "]", "]", "\n", "\n", "", "", "index_offsets", "=", "np", ".", "zeros", "(", "len", "(", "self", ".", "_parents", ")", ",", "dtype", "=", "int", ")", "\n", "new_parents", "=", "[", "]", "\n", "for", "i", ",", "parent", "in", "enumerate", "(", "self", ".", "_parents", ")", ":", "\n", "            ", "if", "i", "not", "in", "joints_to_remove", ":", "\n", "                ", "new_parents", ".", "append", "(", "parent", "-", "index_offsets", "[", "parent", "]", ")", "\n", "", "else", ":", "\n", "                ", "index_offsets", "[", "i", ":", "]", "+=", "1", "\n", "", "", "self", ".", "_parents", "=", "np", ".", "array", "(", "new_parents", ")", "\n", "\n", "if", "self", ".", "_joints_left", "is", "not", "None", ":", "\n", "            ", "new_joints_left", "=", "[", "]", "\n", "for", "joint", "in", "self", ".", "_joints_left", ":", "\n", "                ", "if", "joint", "in", "valid_joints", ":", "\n", "                    ", "new_joints_left", ".", "append", "(", "joint", "-", "index_offsets", "[", "joint", "]", ")", "\n", "", "", "self", ".", "_joints_left", "=", "new_joints_left", "\n", "", "if", "self", ".", "_joints_right", "is", "not", "None", ":", "\n", "            ", "new_joints_right", "=", "[", "]", "\n", "for", "joint", "in", "self", ".", "_joints_right", ":", "\n", "                ", "if", "joint", "in", "valid_joints", ":", "\n", "                    ", "new_joints_right", ".", "append", "(", "joint", "-", "index_offsets", "[", "joint", "]", ")", "\n", "", "", "self", ".", "_joints_right", "=", "new_joints_right", "\n", "\n", "", "self", ".", "_compute_metadata", "(", ")", "\n", "\n", "return", "valid_joints", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.skeleton.Skeleton.joints_left": [[69, 71], ["None"], "methods", ["None"], ["", "def", "joints_left", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_joints_left", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.skeleton.Skeleton.joints_right": [[72, 74], ["None"], "methods", ["None"], ["", "def", "joints_right", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_joints_right", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.skeleton.Skeleton._compute_metadata": [[75, 87], ["numpy.zeros().astype", "enumerate", "enumerate", "enumerate", "skeleton.Skeleton._children.append", "numpy.zeros", "skeleton.Skeleton._children[].append", "len"], "methods", ["None"], ["", "def", "_compute_metadata", "(", "self", ")", ":", "\n", "        ", "self", ".", "_has_children", "=", "np", ".", "zeros", "(", "len", "(", "self", ".", "_parents", ")", ")", ".", "astype", "(", "bool", ")", "\n", "for", "i", ",", "parent", "in", "enumerate", "(", "self", ".", "_parents", ")", ":", "\n", "            ", "if", "parent", "!=", "-", "1", ":", "\n", "                ", "self", ".", "_has_children", "[", "parent", "]", "=", "True", "\n", "\n", "", "", "self", ".", "_children", "=", "[", "]", "\n", "for", "i", ",", "parent", "in", "enumerate", "(", "self", ".", "_parents", ")", ":", "\n", "            ", "self", ".", "_children", ".", "append", "(", "[", "]", ")", "\n", "", "for", "i", ",", "parent", "in", "enumerate", "(", "self", ".", "_parents", ")", ":", "\n", "            ", "if", "parent", "!=", "-", "1", ":", "\n", "                ", "self", ".", "_children", "[", "parent", "]", ".", "append", "(", "i", ")", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.post_process.process3d.get_final_3d_coord": [[5, 29], ["pos_3d_stage3[].clone", "common.transformation.cam_utils.reprojection", "common.transformation.cam_utils.image_coordinates", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "pos_3d_stage2[].clone", "int", "int"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.transformation.cam_utils.reprojection", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.transformation.cam_utils.image_coordinates"], ["def", "get_final_3d_coord", "(", "pos_3d_out", ",", "abs_root_3d", ",", "relaive_root_3d", ",", "camera", ",", "rescale_bbox_ratio", ",", "pixel_depth_ratio", ",", "norm", ")", ":", "\n", "    ", "if", "norm", "==", "'lcn'", ":", "# Another way to process pixel XY -> normalize xy by image height and width. Same way with LCN", "\n", "        ", "img_w", ",", "img_h", "=", "int", "(", "camera", "[", "0", ",", "2", "]", "*", "2", ")", ",", "int", "(", "camera", "[", "0", ",", "3", "]", "*", "2", ")", "\n", "pixel_pose_3d", "=", "image_coordinates", "(", "pos_3d_out", ",", "img_w", ",", "img_h", ")", "\n", "pos_3d_stage3", "=", "torch", ".", "zeros_like", "(", "pos_3d_out", ")", "\n", "pos_3d_stage3", "[", "...", ",", "2", ":", "3", "]", "=", "pixel_pose_3d", "[", "...", ",", "2", ":", "3", "]", "/", "pixel_depth_ratio", "\n", "pos_3d_stage3", "[", "...", ",", ":", "2", "]", "=", "pixel_pose_3d", "[", "...", ",", ":", "2", "]", "\n", "\n", "", "else", ":", "\n", "        ", "pose_relative", "=", "torch", ".", "zeros_like", "(", "pos_3d_out", ")", "\n", "pose_relative", "[", "...", ",", ":", "2", "]", "=", "relaive_root_3d", "\n", "pos_3d_stage1", "=", "pos_3d_out", "/", "rescale_bbox_ratio", "# To recover xyz bbox scale", "\n", "pos_3d_stage2", "=", "pos_3d_stage1", "+", "pose_relative", "# (2000,1,17,3) #To recover xy first.", "\n", "\n", "pos_3d_stage3", "=", "torch", ".", "zeros_like", "(", "pos_3d_out", ")", "\n", "pos_3d_stage3", "[", ":", ",", ":", ",", ":", ",", "2", ":", "3", "]", "=", "pos_3d_stage2", "[", ":", ",", ":", ",", ":", ",", "2", ":", "3", "]", "/", "pixel_depth_ratio", "\n", "pos_3d_stage3", "[", "...", ",", ":", "2", "]", "=", "pos_3d_stage2", "[", "...", ",", ":", "2", "]", ".", "clone", "(", ")", "\n", "\n", "", "abs_depth_z", "=", "pos_3d_stage3", "[", "...", ",", "2", ":", "3", "]", ".", "clone", "(", ")", "\n", "abs_depth", "=", "abs_depth_z", "+", "abs_root_3d", "\n", "# Reprojection to get 3d X,Y", "\n", "reproject_3d", "=", "reprojection", "(", "pos_3d_stage3", ",", "abs_depth", ",", "camera", ")", "\n", "final_3d", "=", "reproject_3d", "-", "reproject_3d", "[", ":", ",", ":", ",", ":", "1", "]", "\n", "return", "final_3d", "/", "1000", "#Use meters", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.post_process.process3d.post_process3d": [[30, 39], ["process3d.get_final_3d_coord", "process3d.get_final_3d_coord"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.post_process.process3d.get_final_3d_coord", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.post_process.process3d.get_final_3d_coord"], ["", "def", "post_process3d", "(", "predicted_3d", ",", "inputs3d", ",", "cam", ",", "normalize_param", ",", "norm", ")", ":", "\n", "    ", "inputs_3d_depth", "=", "normalize_param", "[", "...", ",", "4", ":", "5", "]", "\n", "inputs_3d_relative_xy", "=", "normalize_param", "[", "...", ",", "2", ":", "4", "]", "\n", "rescale_bbox_ratio", ",", "pixel_depth_ratio", "=", "normalize_param", "[", "...", ",", "1", ":", "2", "]", ",", "normalize_param", "[", "...", ",", "0", ":", "1", "]", "\n", "predicted_3d_pos", "=", "get_final_3d_coord", "(", "predicted_3d", ",", "inputs_3d_depth", ",", "inputs_3d_relative_xy", ",", "cam", ",", "rescale_bbox_ratio", ",", "\n", "pixel_depth_ratio", ",", "norm", ")", "\n", "inputs_3d", "=", "get_final_3d_coord", "(", "inputs3d", ",", "inputs_3d_depth", ",", "inputs_3d_relative_xy", ",", "cam", ",", "rescale_bbox_ratio", ",", "\n", "pixel_depth_ratio", ",", "norm", ")", "\n", "return", "predicted_3d_pos", ",", "inputs_3d", "\n", "", ""]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.mpi-inf.load_mpi_test": [[4, 45], ["numpy.load", "range", "normalize_screen_coordinates", "common.dataset.pre_process.norm_data.norm_to_pixel", "numpy.concatenate", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.transformation.cam_utils.normalize_screen_coordinates", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.norm_data.norm_to_pixel"], ["def", "load_mpi_test", "(", "file_path", ",", "seq", ",", "baseline_normalize", ")", ":", "\n", "    ", "\"\"\"\n    Usage: Load a section once\n    :param dataset_root: root path\n    :param section: There are six sequences in this (seq=0,1,2,3,4,5). And 2935 poses in a unique set(seq==7).\n    If you want to evaluate by scene setting, you can use the sequencewise evaluation\n    to convert to these numbers by doing\n    #1:Studio with Green Screen (TS1*603 + TS2 *540)/ (603+540)\n    #2:Studio without Green Screen (TS3*505+TS4*553)/(505+553)\n    #3:Outdoor (TS5*276+TS6*452)/(276+452)\n    :return: Normalized 2d/3d pose, normalization params and camera intrinics. All types: List\n    \"\"\"", "\n", "info", "=", "np", ".", "load", "(", "file_path", ",", "allow_pickle", "=", "True", ")", "\n", "if", "seq", "in", "range", "(", "0", ",", "6", ")", ":", "\n", "        ", "pose_3d", "=", "info", "[", "'pose3d_univ'", "]", "[", "seq", "]", "\n", "pose_2d", "=", "info", "[", "'pose2d'", "]", "[", "seq", "]", "\n", "if", "seq", "in", "[", "0", ",", "1", ",", "2", ",", "3", "]", ":", "\n", "            ", "img_w", ",", "img_h", "=", "2048", ",", "2048", "\n", "cam_intri", "=", "np", ".", "array", "(", "[", "1500.0686135995716", ",", "1500.6590966853348", ",", "1017.3794860438494", ",", "1043.062824876024", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "", "elif", "seq", "in", "[", "4", ",", "5", "]", ":", "\n", "            ", "img_w", ",", "img_h", "=", "1920", ",", "1080", "\n", "cam_intri", "=", "np", ".", "array", "(", "[", "1683.482559482185", ",", "1671.927242063379", ",", "939.9278168524228", ",", "560.2072491988034", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "\n", "", "", "elif", "seq", "==", "7", ":", "\n", "        ", "pose_3d", "=", "info", "[", "'pose3d_univ'", "]", "[", "0", "]", "\n", "pose_2d", "=", "info", "[", "'pose2d'", "]", "[", "0", "]", "\n", "img_w", ",", "img_h", "=", "2048", ",", "2048", "\n", "cam_intri", "=", "np", ".", "array", "(", "[", "1504.1479043534127", ",", "1556.86936732066", ",", "991.7469587022122", ",", "872.994958045596", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "", "params", "=", "{", "}", "\n", "if", "baseline_normalize", ":", "\n", "# Remove global offset, but keep trajectory in first position", "\n", "        ", "pose_3d", "[", ":", ",", "1", ":", "]", "-=", "pose_3d", "[", ":", ",", ":", "1", "]", "\n", "normed_pose_3d", "=", "pose_3d", "/", "1000", "\n", "normed_pose_2d", "=", "normalize_screen_coordinates", "(", "pose_2d", "[", "...", ",", ":", "2", "]", ",", "w", "=", "img_w", ",", "h", "=", "img_h", ")", "\n", "params", "[", "'intrinsic'", "]", "=", "cam_intri", "\n", "", "else", ":", "\n", "        ", "normed_pose_3d", ",", "normed_pose_2d", ",", "pixel_ratio", ",", "rescale_ratio", ",", "offset_2d", ",", "abs_root_Z", "=", "norm_to_pixel", "(", "pose_3d", "/", "1000", ",", "pose_2d", ",", "cam_intri", ",", "norm", ")", "\n", "norm_params", "=", "np", ".", "concatenate", "(", "(", "pixel_ratio", ",", "rescale_ratio", ",", "offset_2d", ",", "abs_root_Z", ")", ",", "axis", "=", "-", "1", ")", "# [T, 1, 5], len()==4", "\n", "params", "[", "'intrinsic'", "]", "=", "cam_intri", "\n", "params", "[", "'normalization_params'", "]", "=", "norm_params", "\n", "", "return", "normed_pose_3d", ",", "normed_pose_2d", ",", "params", "", "", ""]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.kpt_index.keypoint_hflip": [[19, 27], ["len", "len"], "function", ["None"], ["def", "keypoint_hflip", "(", "kp", ",", "img_width", ")", ":", "\n", "# Flip a keypoint horizontally around the y-axis", "\n", "# kp N,2", "\n", "    ", "if", "len", "(", "kp", ".", "shape", ")", "==", "2", ":", "\n", "        ", "kp", "[", ":", ",", "0", "]", "=", "(", "img_width", "-", "1.", ")", "-", "kp", "[", ":", ",", "0", "]", "\n", "", "elif", "len", "(", "kp", ".", "shape", ")", "==", "3", ":", "\n", "        ", "kp", "[", ":", ",", ":", ",", "0", "]", "=", "(", "img_width", "-", "1.", ")", "-", "kp", "[", ":", ",", ":", ",", "0", "]", "\n", "", "return", "kp", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.kpt_index.convert_kps": [[28, 39], ["numpy.zeros", "enumerate", "eval", "eval", "len", "src_names.index"], "function", ["None"], ["", "def", "convert_kps", "(", "joints2d", ",", "src", ",", "dst", ")", ":", "\n", "    ", "src_names", "=", "eval", "(", "f'get_{src}_joint_names'", ")", "(", ")", "\n", "dst_names", "=", "eval", "(", "f'get_{dst}_joint_names'", ")", "(", ")", "\n", "\n", "out_joints2d", "=", "np", ".", "zeros", "(", "(", "joints2d", ".", "shape", "[", "0", "]", ",", "len", "(", "dst_names", ")", ",", "3", ")", ")", "\n", "\n", "for", "idx", ",", "jn", "in", "enumerate", "(", "dst_names", ")", ":", "\n", "        ", "if", "jn", "in", "src_names", ":", "\n", "            ", "out_joints2d", "[", ":", ",", "idx", "]", "=", "joints2d", "[", ":", ",", "src_names", ".", "index", "(", "jn", ")", "]", "\n", "\n", "", "", "return", "out_joints2d", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.kpt_index.get_perm_idxs": [[40, 45], ["eval", "eval", "src_names.index"], "function", ["None"], ["", "def", "get_perm_idxs", "(", "src", ",", "dst", ")", ":", "\n", "    ", "src_names", "=", "eval", "(", "f'get_{src}_joint_names'", ")", "(", ")", "\n", "dst_names", "=", "eval", "(", "f'get_{dst}_joint_names'", ")", "(", ")", "\n", "idxs", "=", "[", "src_names", ".", "index", "(", "h", ")", "for", "h", "in", "dst_names", "if", "h", "in", "src_names", "]", "\n", "return", "idxs", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.kpt_index.get_mpii3d_test_joint_names": [[46, 65], ["None"], "function", ["None"], ["", "def", "get_mpii3d_test_joint_names", "(", ")", ":", "\n", "    ", "return", "[", "\n", "'headtop'", ",", "# 'head_top',", "\n", "'neck'", ",", "\n", "'rshoulder'", ",", "# 'right_shoulder',", "\n", "'relbow'", ",", "# 'right_elbow',", "\n", "'rwrist'", ",", "# 'right_wrist',", "\n", "'lshoulder'", ",", "# 'left_shoulder',", "\n", "'lelbow'", ",", "# 'left_elbow',", "\n", "'lwrist'", ",", "# 'left_wrist',", "\n", "'rhip'", ",", "# 'right_hip',", "\n", "'rknee'", ",", "# 'right_knee',", "\n", "'rankle'", ",", "# 'right_ankle',", "\n", "'lhip'", ",", "# 'left_hip',", "\n", "'lknee'", ",", "# 'left_knee',", "\n", "'lankle'", ",", "# 'left_ankle'", "\n", "'hip'", ",", "# 'pelvis',", "\n", "'Spine (H36M)'", ",", "# 'spine',", "\n", "'Head (H36M)'", ",", "# 'head'", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.kpt_index.get_mpii3d_joint_names": [[67, 97], ["None"], "function", ["None"], ["", "def", "get_mpii3d_joint_names", "(", ")", ":", "\n", "    ", "return", "[", "\n", "'spine3'", ",", "# 0,", "\n", "'spine4'", ",", "# 1,", "\n", "'spine2'", ",", "# 2,", "\n", "'Spine (H36M)'", ",", "#'spine', # 3,", "\n", "'hip'", ",", "# 'pelvis', # 4,", "\n", "'neck'", ",", "# 5,", "\n", "'Head (H36M)'", ",", "# 'head', # 6,", "\n", "\"headtop\"", ",", "# 'head_top', # 7,", "\n", "'left_clavicle'", ",", "# 8,", "\n", "\"lshoulder\"", ",", "# 'left_shoulder', # 9,", "\n", "\"lelbow\"", ",", "# 'left_elbow',# 10,", "\n", "\"lwrist\"", ",", "# 'left_wrist',# 11,", "\n", "'left_hand'", ",", "# 12,", "\n", "'right_clavicle'", ",", "# 13,", "\n", "'rshoulder'", ",", "# 'right_shoulder',# 14,", "\n", "'relbow'", ",", "# 'right_elbow',# 15,", "\n", "'rwrist'", ",", "# 'right_wrist',# 16,", "\n", "'right_hand'", ",", "# 17,", "\n", "'lhip'", ",", "# left_hip',# 18,", "\n", "'lknee'", ",", "# 'left_knee',# 19,", "\n", "'lankle'", ",", "#left ankle # 20", "\n", "'left_foot'", ",", "# 21", "\n", "'left_toe'", ",", "# 22", "\n", "\"rhip\"", ",", "# 'right_hip',# 23", "\n", "\"rknee\"", ",", "# 'right_knee',# 24", "\n", "\"rankle\"", ",", "#'right_ankle', # 25", "\n", "'right_foot'", ",", "# 26", "\n", "'right_toe'", "# 27", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.kpt_index.get_insta_joint_names": [[99, 126], ["None"], "function", ["None"], ["", "def", "get_insta_joint_names", "(", ")", ":", "\n", "    ", "return", "[", "\n", "'OP RHeel'", ",", "\n", "'OP RKnee'", ",", "\n", "'OP RHip'", ",", "\n", "'OP LHip'", ",", "\n", "'OP LKnee'", ",", "\n", "'OP LHeel'", ",", "\n", "'OP RWrist'", ",", "\n", "'OP RElbow'", ",", "\n", "'OP RShoulder'", ",", "\n", "'OP LShoulder'", ",", "\n", "'OP LElbow'", ",", "\n", "'OP LWrist'", ",", "\n", "'OP Neck'", ",", "\n", "'headtop'", ",", "\n", "'OP Nose'", ",", "\n", "'OP LEye'", ",", "\n", "'OP REye'", ",", "\n", "'OP LEar'", ",", "\n", "'OP REar'", ",", "\n", "'OP LBigToe'", ",", "\n", "'OP RBigToe'", ",", "\n", "'OP LSmallToe'", ",", "\n", "'OP RSmallToe'", ",", "\n", "'OP LAnkle'", ",", "\n", "'OP RAnkle'", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.kpt_index.get_insta_skeleton": [[128, 157], ["numpy.array"], "function", ["None"], ["", "def", "get_insta_skeleton", "(", ")", ":", "\n", "    ", "return", "np", ".", "array", "(", "\n", "[", "\n", "[", "0", ",", "1", "]", ",", "\n", "[", "1", ",", "2", "]", ",", "\n", "[", "2", ",", "3", "]", ",", "\n", "[", "3", ",", "4", "]", ",", "\n", "[", "4", ",", "5", "]", ",", "\n", "[", "6", ",", "7", "]", ",", "\n", "[", "7", ",", "8", "]", ",", "\n", "[", "8", ",", "9", "]", ",", "\n", "[", "9", ",", "10", "]", ",", "\n", "[", "2", ",", "8", "]", ",", "\n", "[", "3", ",", "9", "]", ",", "\n", "[", "10", ",", "11", "]", ",", "\n", "[", "8", ",", "12", "]", ",", "\n", "[", "9", ",", "12", "]", ",", "\n", "[", "12", ",", "13", "]", ",", "\n", "[", "12", ",", "14", "]", ",", "\n", "[", "14", ",", "15", "]", ",", "\n", "[", "14", ",", "16", "]", ",", "\n", "[", "15", ",", "17", "]", ",", "\n", "[", "16", ",", "18", "]", ",", "\n", "[", "0", ",", "20", "]", ",", "\n", "[", "20", ",", "22", "]", ",", "\n", "[", "5", ",", "19", "]", ",", "\n", "[", "19", ",", "21", "]", ",", "\n", "[", "5", ",", "23", "]", ",", "\n", "[", "0", ",", "24", "]", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.kpt_index.get_staf_skeleton": [[159, 184], ["numpy.array"], "function", ["None"], ["", "def", "get_staf_skeleton", "(", ")", ":", "\n", "    ", "return", "np", ".", "array", "(", "\n", "[", "\n", "[", "0", ",", "1", "]", ",", "\n", "[", "1", ",", "2", "]", ",", "\n", "[", "2", ",", "3", "]", ",", "\n", "[", "3", ",", "4", "]", ",", "\n", "[", "1", ",", "5", "]", ",", "\n", "[", "5", ",", "6", "]", ",", "\n", "[", "6", ",", "7", "]", ",", "\n", "[", "1", ",", "8", "]", ",", "\n", "[", "8", ",", "9", "]", ",", "\n", "[", "9", ",", "10", "]", ",", "\n", "[", "10", ",", "11", "]", ",", "\n", "[", "8", ",", "12", "]", ",", "\n", "[", "12", ",", "13", "]", ",", "\n", "[", "13", ",", "14", "]", ",", "\n", "[", "0", ",", "15", "]", ",", "\n", "[", "0", ",", "16", "]", ",", "\n", "[", "15", ",", "17", "]", ",", "\n", "[", "16", ",", "18", "]", ",", "\n", "[", "2", ",", "9", "]", ",", "\n", "[", "5", ",", "12", "]", ",", "\n", "[", "1", ",", "19", "]", ",", "\n", "[", "20", ",", "19", "]", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.kpt_index.get_staf_joint_names": [[187, 210], ["None"], "function", ["None"], ["", "def", "get_staf_joint_names", "(", ")", ":", "\n", "    ", "return", "[", "\n", "'OP Nose'", ",", "# 0,", "\n", "'OP Neck'", ",", "# 1,", "\n", "'OP RShoulder'", ",", "# 2,", "\n", "'OP RElbow'", ",", "# 3,", "\n", "'OP RWrist'", ",", "# 4,", "\n", "'OP LShoulder'", ",", "# 5,", "\n", "'OP LElbow'", ",", "# 6,", "\n", "'OP LWrist'", ",", "# 7,", "\n", "'OP MidHip'", ",", "# 8,", "\n", "'OP RHip'", ",", "# 9,", "\n", "'OP RKnee'", ",", "# 10,", "\n", "'OP RAnkle'", ",", "# 11,", "\n", "'OP LHip'", ",", "# 12,", "\n", "'OP LKnee'", ",", "# 13,", "\n", "'OP LAnkle'", ",", "# 14,", "\n", "'OP REye'", ",", "# 15,", "\n", "'OP LEye'", ",", "# 16,", "\n", "'OP REar'", ",", "# 17,", "\n", "'OP LEar'", ",", "# 18,", "\n", "'Neck (LSP)'", ",", "# 19,", "\n", "'Top of Head (LSP)'", ",", "# 20,", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.kpt_index.get_spin_joint_names": [[212, 263], ["None"], "function", ["None"], ["", "def", "get_spin_joint_names", "(", ")", ":", "\n", "    ", "return", "[", "\n", "'OP Nose'", ",", "# 0", "\n", "'OP Neck'", ",", "# 1", "\n", "'OP RShoulder'", ",", "# 2", "\n", "'OP RElbow'", ",", "# 3", "\n", "'OP RWrist'", ",", "# 4", "\n", "'OP LShoulder'", ",", "# 5", "\n", "'OP LElbow'", ",", "# 6", "\n", "'OP LWrist'", ",", "# 7", "\n", "'OP MidHip'", ",", "# 8", "\n", "'OP RHip'", ",", "# 9", "\n", "'OP RKnee'", ",", "# 10", "\n", "'OP RAnkle'", ",", "# 11", "\n", "'OP LHip'", ",", "# 12", "\n", "'OP LKnee'", ",", "# 13", "\n", "'OP LAnkle'", ",", "# 14", "\n", "'OP REye'", ",", "# 15", "\n", "'OP LEye'", ",", "# 16", "\n", "'OP REar'", ",", "# 17", "\n", "'OP LEar'", ",", "# 18", "\n", "'OP LBigToe'", ",", "# 19", "\n", "'OP LSmallToe'", ",", "# 20", "\n", "'OP LHeel'", ",", "# 21", "\n", "'OP RBigToe'", ",", "# 22", "\n", "'OP RSmallToe'", ",", "# 23", "\n", "'OP RHeel'", ",", "# 24", "\n", "'rankle'", ",", "# 25", "\n", "'rknee'", ",", "# 26", "\n", "'rhip'", ",", "# 27", "\n", "'lhip'", ",", "# 28", "\n", "'lknee'", ",", "# 29", "\n", "'lankle'", ",", "# 30", "\n", "'rwrist'", ",", "# 31", "\n", "'relbow'", ",", "# 32", "\n", "'rshoulder'", ",", "# 33", "\n", "'lshoulder'", ",", "# 34", "\n", "'lelbow'", ",", "# 35", "\n", "'lwrist'", ",", "# 36", "\n", "'neck'", ",", "# 37", "\n", "'headtop'", ",", "# 38", "\n", "'hip'", ",", "# 39 'Pelvis (MPII)', # 39", "\n", "'thorax'", ",", "# 40 'Thorax (MPII)', # 40", "\n", "'Spine (H36M)'", ",", "# 41", "\n", "'Jaw (H36M)'", ",", "# 42", "\n", "'Head (H36M)'", ",", "# 43", "\n", "'nose'", ",", "# 44", "\n", "'leye'", ",", "# 45 'Left Eye', # 45", "\n", "'reye'", ",", "# 46 'Right Eye', # 46", "\n", "'lear'", ",", "# 47 'Left Ear', # 47", "\n", "'rear'", ",", "# 48 'Right Ear', # 48", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.kpt_index.get_h36m_joint_names": [[265, 284], ["None"], "function", ["None"], ["", "def", "get_h36m_joint_names", "(", ")", ":", "\n", "    ", "return", "[", "\n", "'hip'", ",", "# 0", "\n", "'lhip'", ",", "# 1", "\n", "'lknee'", ",", "# 2", "\n", "'lankle'", ",", "# 3", "\n", "'rhip'", ",", "# 4", "\n", "'rknee'", ",", "# 5", "\n", "'rankle'", ",", "# 6", "\n", "'Spine (H36M)'", ",", "# 7", "\n", "'neck'", ",", "# 8", "\n", "'nose'", ",", "# 9 #change 'Head (H36M)' into 'nose'", "\n", "'headtop'", ",", "# 10", "\n", "'lshoulder'", ",", "# 11 #11~13 should change with 14~16", "\n", "'lelbow'", ",", "# 12", "\n", "'lwrist'", ",", "# 13", "\n", "'rshoulder'", ",", "# 14", "\n", "'relbow'", ",", "# 15", "\n", "'rwrist'", ",", "# 16", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.kpt_index.get_spin_skeleton": [[286, 314], ["numpy.array"], "function", ["None"], ["", "def", "get_spin_skeleton", "(", ")", ":", "\n", "    ", "return", "np", ".", "array", "(", "\n", "[", "\n", "[", "0", ",", "1", "]", ",", "\n", "[", "1", ",", "2", "]", ",", "\n", "[", "2", ",", "3", "]", ",", "\n", "[", "3", ",", "4", "]", ",", "\n", "[", "1", ",", "5", "]", ",", "\n", "[", "5", ",", "6", "]", ",", "\n", "[", "6", ",", "7", "]", ",", "\n", "[", "1", ",", "8", "]", ",", "\n", "[", "8", ",", "9", "]", ",", "\n", "[", "9", ",", "10", "]", ",", "\n", "[", "10", ",", "11", "]", ",", "\n", "[", "8", ",", "12", "]", ",", "\n", "[", "12", ",", "13", "]", ",", "\n", "[", "13", ",", "14", "]", ",", "\n", "[", "0", ",", "15", "]", ",", "\n", "[", "0", ",", "16", "]", ",", "\n", "[", "15", ",", "17", "]", ",", "\n", "[", "16", ",", "18", "]", ",", "\n", "[", "21", ",", "19", "]", ",", "\n", "[", "19", ",", "20", "]", ",", "\n", "[", "14", ",", "21", "]", ",", "\n", "[", "11", ",", "24", "]", ",", "\n", "[", "24", ",", "22", "]", ",", "\n", "[", "22", ",", "23", "]", ",", "\n", "[", "0", ",", "38", "]", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.kpt_index.get_posetrack_joint_names": [[317, 336], ["None"], "function", ["None"], ["", "def", "get_posetrack_joint_names", "(", ")", ":", "\n", "    ", "return", "[", "\n", "\"nose\"", ",", "\n", "\"neck\"", ",", "\n", "\"headtop\"", ",", "\n", "\"lear\"", ",", "\n", "\"rear\"", ",", "\n", "\"lshoulder\"", ",", "\n", "\"rshoulder\"", ",", "\n", "\"lelbow\"", ",", "\n", "\"relbow\"", ",", "\n", "\"lwrist\"", ",", "\n", "\"rwrist\"", ",", "\n", "\"lhip\"", ",", "\n", "\"rhip\"", ",", "\n", "\"lknee\"", ",", "\n", "\"rknee\"", ",", "\n", "\"lankle\"", ",", "\n", "\"rankle\"", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.kpt_index.get_posetrack_original_kp_names": [[338, 357], ["None"], "function", ["None"], ["", "def", "get_posetrack_original_kp_names", "(", ")", ":", "\n", "    ", "return", "[", "\n", "'nose'", ",", "\n", "'head_bottom'", ",", "\n", "'head_top'", ",", "\n", "'left_ear'", ",", "\n", "'right_ear'", ",", "\n", "'left_shoulder'", ",", "\n", "'right_shoulder'", ",", "\n", "'left_elbow'", ",", "\n", "'right_elbow'", ",", "\n", "'left_wrist'", ",", "\n", "'right_wrist'", ",", "\n", "'left_hip'", ",", "\n", "'right_hip'", ",", "\n", "'left_knee'", ",", "\n", "'right_knee'", ",", "\n", "'left_ankle'", ",", "\n", "'right_ankle'", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.kpt_index.get_pennaction_joint_names": [[359, 374], ["None"], "function", ["None"], ["", "def", "get_pennaction_joint_names", "(", ")", ":", "\n", "   ", "return", "[", "\n", "\"headtop\"", ",", "# 0", "\n", "\"lshoulder\"", ",", "# 1", "\n", "\"rshoulder\"", ",", "# 2", "\n", "\"lelbow\"", ",", "# 3", "\n", "\"relbow\"", ",", "# 4", "\n", "\"lwrist\"", ",", "# 5", "\n", "\"rwrist\"", ",", "# 6", "\n", "\"lhip\"", ",", "# 7", "\n", "\"rhip\"", ",", "# 8", "\n", "\"lknee\"", ",", "# 9", "\n", "\"rknee\"", ",", "# 10", "\n", "\"lankle\"", ",", "# 11", "\n", "\"rankle\"", "# 12", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.kpt_index.get_common_joint_names": [[376, 392], ["None"], "function", ["None"], ["", "def", "get_common_joint_names", "(", ")", ":", "\n", "    ", "return", "[", "\n", "\"rankle\"", ",", "# 0  \"lankle\",    # 0", "\n", "\"rknee\"", ",", "# 1  \"lknee\",     # 1", "\n", "\"rhip\"", ",", "# 2  \"lhip\",      # 2", "\n", "\"lhip\"", ",", "# 3  \"rhip\",      # 3", "\n", "\"lknee\"", ",", "# 4  \"rknee\",     # 4", "\n", "\"lankle\"", ",", "# 5  \"rankle\",    # 5", "\n", "\"rwrist\"", ",", "# 6  \"lwrist\",    # 6", "\n", "\"relbow\"", ",", "# 7  \"lelbow\",    # 7", "\n", "\"rshoulder\"", ",", "# 8  \"lshoulder\", # 8", "\n", "\"lshoulder\"", ",", "# 9  \"rshoulder\", # 9", "\n", "\"lelbow\"", ",", "# 10  \"relbow\",    # 10", "\n", "\"lwrist\"", ",", "# 11  \"rwrist\",    # 11", "\n", "\"neck\"", ",", "# 12  \"neck\",      # 12", "\n", "\"headtop\"", ",", "# 13  \"headtop\",   # 13", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.kpt_index.get_common_skeleton": [[394, 412], ["numpy.array"], "function", ["None"], ["", "def", "get_common_skeleton", "(", ")", ":", "\n", "    ", "return", "np", ".", "array", "(", "\n", "[", "\n", "[", "0", ",", "1", "]", ",", "\n", "[", "1", ",", "2", "]", ",", "\n", "[", "3", ",", "4", "]", ",", "\n", "[", "4", ",", "5", "]", ",", "\n", "[", "6", ",", "7", "]", ",", "\n", "[", "7", ",", "8", "]", ",", "\n", "[", "8", ",", "2", "]", ",", "\n", "[", "8", ",", "9", "]", ",", "\n", "[", "9", ",", "3", "]", ",", "\n", "[", "2", ",", "3", "]", ",", "\n", "[", "8", ",", "12", "]", ",", "\n", "[", "9", ",", "10", "]", ",", "\n", "[", "12", ",", "9", "]", ",", "\n", "[", "10", ",", "11", "]", ",", "\n", "[", "12", ",", "13", "]", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.kpt_index.get_coco_joint_names": [[415, 434], ["None"], "function", ["None"], ["", "def", "get_coco_joint_names", "(", ")", ":", "\n", "    ", "return", "[", "\n", "\"nose\"", ",", "# 0", "\n", "\"leye\"", ",", "# 1", "\n", "\"reye\"", ",", "# 2", "\n", "\"lear\"", ",", "# 3", "\n", "\"rear\"", ",", "# 4", "\n", "\"lshoulder\"", ",", "# 5", "\n", "\"rshoulder\"", ",", "# 6", "\n", "\"lelbow\"", ",", "# 7", "\n", "\"relbow\"", ",", "# 8", "\n", "\"lwrist\"", ",", "# 9", "\n", "\"rwrist\"", ",", "# 10", "\n", "\"lhip\"", ",", "# 11", "\n", "\"rhip\"", ",", "# 12", "\n", "\"lknee\"", ",", "# 13", "\n", "\"rknee\"", ",", "# 14", "\n", "\"lankle\"", ",", "# 15", "\n", "\"rankle\"", ",", "# 16", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.kpt_index.get_coco_skeleton": [[436, 475], ["numpy.array"], "function", ["None"], ["", "def", "get_coco_skeleton", "(", ")", ":", "\n", "# 0  - nose,", "\n", "# 1  - leye,", "\n", "# 2  - reye,", "\n", "# 3  - lear,", "\n", "# 4  - rear,", "\n", "# 5  - lshoulder,", "\n", "# 6  - rshoulder,", "\n", "# 7  - lelbow,", "\n", "# 8  - relbow,", "\n", "# 9  - lwrist,", "\n", "# 10 - rwrist,", "\n", "# 11 - lhip,", "\n", "# 12 - rhip,", "\n", "# 13 - lknee,", "\n", "# 14 - rknee,", "\n", "# 15 - lankle,", "\n", "# 16 - rankle,", "\n", "    ", "return", "np", ".", "array", "(", "\n", "[", "\n", "[", "15", ",", "13", "]", ",", "\n", "[", "13", ",", "11", "]", ",", "\n", "[", "16", ",", "14", "]", ",", "\n", "[", "14", ",", "12", "]", ",", "\n", "[", "11", ",", "12", "]", ",", "\n", "[", "5", ",", "11", "]", ",", "\n", "[", "6", ",", "12", "]", ",", "\n", "[", "5", ",", "6", "]", ",", "\n", "[", "5", ",", "7", "]", ",", "\n", "[", "6", ",", "8", "]", ",", "\n", "[", "7", ",", "9", "]", ",", "\n", "[", "8", ",", "10", "]", ",", "\n", "[", "1", ",", "2", "]", ",", "\n", "[", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "2", "]", ",", "\n", "[", "1", ",", "3", "]", ",", "\n", "[", "2", ",", "4", "]", ",", "\n", "[", "3", ",", "5", "]", ",", "\n", "[", "4", ",", "6", "]", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.kpt_index.get_mpii_joint_names": [[478, 496], ["None"], "function", ["None"], ["", "def", "get_mpii_joint_names", "(", ")", ":", "\n", "    ", "return", "[", "\n", "\"rankle\"", ",", "# 0", "\n", "\"rknee\"", ",", "# 1", "\n", "\"rhip\"", ",", "# 2", "\n", "\"lhip\"", ",", "# 3", "\n", "\"lknee\"", ",", "# 4", "\n", "\"lankle\"", ",", "# 5", "\n", "\"hip\"", ",", "# 6", "\n", "\"thorax\"", ",", "# 7", "\n", "\"neck\"", ",", "# 8", "\n", "\"headtop\"", ",", "# 9", "\n", "\"rwrist\"", ",", "# 10", "\n", "\"relbow\"", ",", "# 11", "\n", "\"rshoulder\"", ",", "# 12", "\n", "\"lshoulder\"", ",", "# 13", "\n", "\"lelbow\"", ",", "# 14", "\n", "\"lwrist\"", ",", "# 15", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.kpt_index.get_mpii_skeleton": [[498, 532], ["numpy.array"], "function", ["None"], ["", "def", "get_mpii_skeleton", "(", ")", ":", "\n", "# 0  - rankle,", "\n", "# 1  - rknee,", "\n", "# 2  - rhip,", "\n", "# 3  - lhip,", "\n", "# 4  - lknee,", "\n", "# 5  - lankle,", "\n", "# 6  - hip,", "\n", "# 7  - thorax,", "\n", "# 8  - neck,", "\n", "# 9  - headtop,", "\n", "# 10 - rwrist,", "\n", "# 11 - relbow,", "\n", "# 12 - rshoulder,", "\n", "# 13 - lshoulder,", "\n", "# 14 - lelbow,", "\n", "# 15 - lwrist,", "\n", "    ", "return", "np", ".", "array", "(", "\n", "[", "\n", "[", "0", ",", "1", "]", ",", "\n", "[", "1", ",", "2", "]", ",", "\n", "[", "2", ",", "6", "]", ",", "\n", "[", "6", ",", "3", "]", ",", "\n", "[", "3", ",", "4", "]", ",", "\n", "[", "4", ",", "5", "]", ",", "\n", "[", "6", ",", "7", "]", ",", "\n", "[", "7", ",", "8", "]", ",", "\n", "[", "8", ",", "9", "]", ",", "\n", "[", "7", ",", "12", "]", ",", "\n", "[", "12", ",", "11", "]", ",", "\n", "[", "11", ",", "10", "]", ",", "\n", "[", "7", ",", "13", "]", ",", "\n", "[", "13", ",", "14", "]", ",", "\n", "[", "14", ",", "15", "]", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.kpt_index.get_aich_joint_names": [[535, 551], ["None"], "function", ["None"], ["", "def", "get_aich_joint_names", "(", ")", ":", "\n", "    ", "return", "[", "\n", "\"rshoulder\"", ",", "# 0", "\n", "\"relbow\"", ",", "# 1", "\n", "\"rwrist\"", ",", "# 2", "\n", "\"lshoulder\"", ",", "# 3", "\n", "\"lelbow\"", ",", "# 4", "\n", "\"lwrist\"", ",", "# 5", "\n", "\"rhip\"", ",", "# 6", "\n", "\"rknee\"", ",", "# 7", "\n", "\"rankle\"", ",", "# 8", "\n", "\"lhip\"", ",", "# 9", "\n", "\"lknee\"", ",", "# 10", "\n", "\"lankle\"", ",", "# 11", "\n", "\"headtop\"", ",", "# 12", "\n", "\"neck\"", ",", "# 13", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.kpt_index.get_aich_skeleton": [[553, 583], ["numpy.array"], "function", ["None"], ["", "def", "get_aich_skeleton", "(", ")", ":", "\n", "# 0  - rshoulder,", "\n", "# 1  - relbow,", "\n", "# 2  - rwrist,", "\n", "# 3  - lshoulder,", "\n", "# 4  - lelbow,", "\n", "# 5  - lwrist,", "\n", "# 6  - rhip,", "\n", "# 7  - rknee,", "\n", "# 8  - rankle,", "\n", "# 9  - lhip,", "\n", "# 10 - lknee,", "\n", "# 11 - lankle,", "\n", "# 12 - headtop,", "\n", "# 13 - neck,", "\n", "    ", "return", "np", ".", "array", "(", "\n", "[", "\n", "[", "0", ",", "1", "]", ",", "\n", "[", "1", ",", "2", "]", ",", "\n", "[", "3", ",", "4", "]", ",", "\n", "[", "4", ",", "5", "]", ",", "\n", "[", "6", ",", "7", "]", ",", "\n", "[", "7", ",", "8", "]", ",", "\n", "[", "9", ",", "10", "]", ",", "\n", "[", "10", ",", "11", "]", ",", "\n", "[", "12", ",", "13", "]", ",", "\n", "[", "13", ",", "0", "]", ",", "\n", "[", "13", ",", "3", "]", ",", "\n", "[", "0", ",", "6", "]", ",", "\n", "[", "3", ",", "9", "]", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.kpt_index.get_3dpw_joint_names": [[586, 602], ["None"], "function", ["None"], ["", "def", "get_3dpw_joint_names", "(", ")", ":", "\n", "    ", "return", "[", "\n", "\"nose\"", ",", "# 0", "\n", "\"thorax\"", ",", "# 1", "\n", "\"rshoulder\"", ",", "# 2", "\n", "\"relbow\"", ",", "# 3", "\n", "\"rwrist\"", ",", "# 4", "\n", "\"lshoulder\"", ",", "# 5", "\n", "\"lelbow\"", ",", "# 6", "\n", "\"lwrist\"", ",", "# 7", "\n", "\"rhip\"", ",", "# 8", "\n", "\"rknee\"", ",", "# 9", "\n", "\"rankle\"", ",", "# 10", "\n", "\"lhip\"", ",", "# 11", "\n", "\"lknee\"", ",", "# 12", "\n", "\"lankle\"", ",", "# 13", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.kpt_index.get_3dpw_skeleton": [[604, 621], ["numpy.array"], "function", ["None"], ["", "def", "get_3dpw_skeleton", "(", ")", ":", "\n", "    ", "return", "np", ".", "array", "(", "\n", "[", "\n", "[", "0", ",", "1", "]", ",", "\n", "[", "1", ",", "2", "]", ",", "\n", "[", "2", ",", "3", "]", ",", "\n", "[", "3", ",", "4", "]", ",", "\n", "[", "1", ",", "5", "]", ",", "\n", "[", "5", ",", "6", "]", ",", "\n", "[", "6", ",", "7", "]", ",", "\n", "[", "2", ",", "8", "]", ",", "\n", "[", "5", ",", "11", "]", ",", "\n", "[", "8", ",", "11", "]", ",", "\n", "[", "8", ",", "9", "]", ",", "\n", "[", "9", ",", "10", "]", ",", "\n", "[", "11", ",", "12", "]", ",", "\n", "[", "12", ",", "13", "]", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.kpt_index.get_smplcoco_joint_names": [[624, 645], ["None"], "function", ["None"], ["", "def", "get_smplcoco_joint_names", "(", ")", ":", "\n", "    ", "return", "[", "\n", "\"rankle\"", ",", "# 0", "\n", "\"rknee\"", ",", "# 1", "\n", "\"rhip\"", ",", "# 2", "\n", "\"lhip\"", ",", "# 3", "\n", "\"lknee\"", ",", "# 4", "\n", "\"lankle\"", ",", "# 5", "\n", "\"rwrist\"", ",", "# 6", "\n", "\"relbow\"", ",", "# 7", "\n", "\"rshoulder\"", ",", "# 8", "\n", "\"lshoulder\"", ",", "# 9", "\n", "\"lelbow\"", ",", "# 10", "\n", "\"lwrist\"", ",", "# 11", "\n", "\"neck\"", ",", "# 12", "\n", "\"headtop\"", ",", "# 13", "\n", "\"nose\"", ",", "# 14", "\n", "\"leye\"", ",", "# 15", "\n", "\"reye\"", ",", "# 16", "\n", "\"lear\"", ",", "# 17", "\n", "\"rear\"", ",", "# 18", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.kpt_index.get_smplcoco_skeleton": [[647, 668], ["numpy.array"], "function", ["None"], ["", "def", "get_smplcoco_skeleton", "(", ")", ":", "\n", "    ", "return", "np", ".", "array", "(", "\n", "[", "\n", "[", "0", ",", "1", "]", ",", "\n", "[", "1", ",", "2", "]", ",", "\n", "[", "3", ",", "4", "]", ",", "\n", "[", "4", ",", "5", "]", ",", "\n", "[", "6", ",", "7", "]", ",", "\n", "[", "7", ",", "8", "]", ",", "\n", "[", "8", ",", "12", "]", ",", "\n", "[", "12", ",", "9", "]", ",", "\n", "[", "9", ",", "10", "]", ",", "\n", "[", "10", ",", "11", "]", ",", "\n", "[", "12", ",", "13", "]", ",", "\n", "[", "14", ",", "15", "]", ",", "\n", "[", "15", ",", "17", "]", ",", "\n", "[", "16", ",", "18", "]", ",", "\n", "[", "14", ",", "16", "]", ",", "\n", "[", "8", ",", "2", "]", ",", "\n", "[", "9", ",", "3", "]", ",", "\n", "[", "2", ",", "3", "]", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.kpt_index.get_smpl_joint_names": [[671, 697], ["None"], "function", ["None"], ["", "def", "get_smpl_joint_names", "(", ")", ":", "\n", "    ", "return", "[", "\n", "'hip'", ",", "# 0", "\n", "'lhip'", ",", "# 1", "\n", "'rhip'", ",", "# 2", "\n", "'Spine (H36M)'", ",", "# 3", "\n", "'lknee'", ",", "# 4", "\n", "'rknee'", ",", "# 5", "\n", "'spine1'", ",", "# 6", "\n", "'lankle'", ",", "# 7", "\n", "'rankle'", ",", "# 8", "\n", "'spine2'", ",", "# 9", "\n", "'leftToeBase'", ",", "# 10", "\n", "'rightToeBase'", ",", "# 11", "\n", "'neck'", ",", "# 12", "\n", "'lchesk'", ",", "# 13", "\n", "'rchesk'", ",", "# 14", "\n", "'nose'", ",", "# 15", "\n", "'lshoulder'", ",", "# 16", "\n", "'rshoulder'", ",", "# 17", "\n", "'lelbow'", ",", "# 18", "\n", "'relbow'", ",", "# 19", "\n", "'lwrist'", ",", "# 20", "\n", "'rwrist'", ",", "# 21", "\n", "'leftHandIndex1'", ",", "# 22", "\n", "'rightHandIndex1'", ",", "# 23", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.kpt_index.get_smpl_skeleton": [[726, 752], ["numpy.array"], "function", ["None"], ["", "def", "get_smpl_skeleton", "(", ")", ":", "\n", "    ", "return", "np", ".", "array", "(", "\n", "[", "\n", "[", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "2", "]", ",", "\n", "[", "0", ",", "3", "]", ",", "\n", "[", "1", ",", "4", "]", ",", "\n", "[", "2", ",", "5", "]", ",", "\n", "[", "3", ",", "6", "]", ",", "\n", "[", "4", ",", "7", "]", ",", "\n", "[", "5", ",", "8", "]", ",", "\n", "[", "6", ",", "9", "]", ",", "\n", "[", "7", ",", "10", "]", ",", "\n", "[", "8", ",", "11", "]", ",", "\n", "[", "9", ",", "12", "]", ",", "\n", "[", "9", ",", "13", "]", ",", "\n", "[", "9", ",", "14", "]", ",", "\n", "[", "12", ",", "15", "]", ",", "\n", "[", "13", ",", "16", "]", ",", "\n", "[", "14", ",", "17", "]", ",", "\n", "[", "16", ",", "18", "]", ",", "\n", "[", "17", ",", "19", "]", ",", "\n", "[", "18", ",", "20", "]", ",", "\n", "[", "19", ",", "21", "]", ",", "\n", "[", "20", ",", "22", "]", ",", "\n", "[", "21", ",", "23", "]", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.norm_data.week_perspective_scale": [[8, 11], ["None"], "function", ["None"], ["def", "week_perspective_scale", "(", "camera_params", ",", "depth", ")", ":", "\n", "    ", "fx", "=", "camera_params", "[", "...", ",", "0", ":", "1", "]", "\n", "return", "fx", "/", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.norm_data.change_to_mm": [[12, 14], ["None"], "function", ["None"], ["", "def", "change_to_mm", "(", "input", ")", ":", "\n", "    ", "return", "input", "*", "1000", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.norm_data.change_to_m": [[15, 17], ["None"], "function", ["None"], ["", "def", "change_to_m", "(", "input", ")", ":", "\n", "    ", "return", "input", "/", "1000", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.norm_data.norm_to_pixel": [[18, 29], ["norm_data.change_to_mm", "norm_data.norm_to_pixel_s1", "norm_data.norm_to_pixel_s2", "int", "int", "common.transformation.cam_utils.normalize_screen_coordinates", "common.transformation.cam_utils.normalize_screen_coordinates"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.norm_data.change_to_mm", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.norm_data.norm_to_pixel_s1", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.norm_data.norm_to_pixel_s2", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.transformation.cam_utils.normalize_screen_coordinates", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.transformation.cam_utils.normalize_screen_coordinates"], ["", "def", "norm_to_pixel", "(", "pose_3d", ",", "pose_2d", ",", "camera", ",", "norm", ")", ":", "\n", "    ", "pose_3d", "=", "change_to_mm", "(", "pose_3d", ")", "# change m into mm", "\n", "pose3d_pixel", ",", "pixel_ratio", "=", "norm_to_pixel_s1", "(", "pose_3d", ",", "camera", ",", "norm", ")", "\n", "normed_3d", ",", "normed_2d", ",", "rescale_ratio", ",", "offset_2d", ",", "abs_root_Z", "=", "norm_to_pixel_s2", "(", "pose3d_pixel", ",", "pose_3d", "[", ":", ",", "0", ":", "1", "]", ",", "pose_2d", ",", "camera", ")", "\n", "if", "norm", "==", "'lcn'", ":", "\n", "        ", "c_x", ",", "c_y", "=", "camera", "[", "2", "]", ",", "camera", "[", "3", "]", "\n", "img_w", "=", "int", "(", "2", "*", "c_x", ")", "\n", "img_h", "=", "int", "(", "2", "*", "c_y", ")", "\n", "normed_3d", "=", "normalize_screen_coordinates", "(", "pose3d_pixel", ",", "img_w", ",", "img_h", ")", "\n", "normed_2d", "=", "normalize_screen_coordinates", "(", "pose_2d", ",", "img_w", ",", "img_h", ")", "\n", "", "return", "normed_3d", ",", "normed_2d", ",", "pixel_ratio", ",", "rescale_ratio", ",", "offset_2d", ",", "abs_root_Z", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.norm_data.norm_to_pixel_s1": [[31, 59], ["pose_3d[].copy", "numpy.repeat", "numpy.zeros_like", "norm_data.minus_root", "pose3d_stage1_depth.copy", "norm_data.week_perspective_scale", "numpy.repeat", "common.common_pytorch.utils.wrap", "norm_data.week_perspective_scale", "pose_3d.copy"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.norm_data.minus_root", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.norm_data.week_perspective_scale", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.common_pytorch.utils.wrap", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.norm_data.week_perspective_scale"], ["", "def", "norm_to_pixel_s1", "(", "pose_3d", ",", "camera", ",", "norm", ")", ":", "\n", "    ", "\"\"\"\n    pose_3d: 3d joints with absolute location in the camera coordinate system (meters)\n    pose_3d.shape = [T, K, N], e.g. [1500, 17, 3]\n    pose_2d: 2d joints with pixel location in the images coordinate system (pixels)\n    pose_3d.shape = [T, K, M], e.g. [1500, 17, 2]\n    return: normed_3d: root joint contain relative [x,y] offset and absolute depth of root Z. others joints are normed 3d joints in pixel unit\n            normed_2d: zero-center root with resize into a fixed bbox\n    \"\"\"", "\n", "# stage1: linear project 3d X,Y to pixel unit, corresponding scale Z to keep the same 3d scale", "\n", "pose3d_root_Z", "=", "pose_3d", "[", ":", ",", "0", ":", "1", ",", "2", ":", "3", "]", ".", "copy", "(", ")", "\n", "\n", "camera", "=", "np", ".", "repeat", "(", "camera", "[", "np", ".", "newaxis", ",", ":", "]", ",", "pose3d_root_Z", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "if", "norm", "==", "'lcn'", ":", "\n", "        ", "ratio1", "=", "week_perspective_scale", "(", "camera", "[", ":", ",", "np", ".", "newaxis", "]", ",", "pose3d_root_Z", ")", "+", "1", "#[T,1,1] project depth as the same scale with XY", "\n", "", "else", ":", "\n", "        ", "ratio1", "=", "week_perspective_scale", "(", "camera", "[", ":", ",", "np", ".", "newaxis", "]", ",", "pose3d_root_Z", ")", "#[T,1,1] project depth as the same scale with XY", "\n", "\n", "", "pose3d_pixel", "=", "np", ".", "zeros_like", "(", "pose_3d", ")", "\n", "if", "norm", "==", "'weak_proj'", ":", "\n", "        ", "pose3d_root", "=", "np", ".", "repeat", "(", "pose3d_root_Z", ",", "17", ",", "axis", "=", "-", "2", ")", "# (T,17,1) # For weak perspective projection", "\n", "pose3d_pixel", "[", "...", ",", ":", "2", "]", "=", "pose_3d", "[", "...", ",", ":", "2", "]", "/", "pose3d_root", "*", "camera", "[", ":", ",", "np", ".", "newaxis", ",", ":", "2", "]", "+", "camera", "[", ":", ",", "np", ".", "newaxis", ",", "2", ":", "4", "]", "\n", "", "else", ":", "\n", "        ", "pose3d_pixel", "[", "...", ",", ":", "2", "]", "=", "wrap", "(", "project_to_2d_linear", ",", "pose_3d", ".", "copy", "(", ")", ",", "camera", ")", "# Keep all depth from each joints, projected 2d xy are more precise.", "\n", "", "pose3d_relative_depth", "=", "minus_root", "(", "pose_3d", "[", "...", ",", "2", ":", "3", "]", ")", "# Make root depth=0", "\n", "pose3d_stage1_depth", "=", "pose3d_relative_depth", "*", "ratio1", "# Root_depth=0 [2000,17,1]", "\n", "pose3d_pixel", "[", "...", ",", "2", ":", "3", "]", "=", "pose3d_stage1_depth", ".", "copy", "(", ")", "\n", "return", "pose3d_pixel", ",", "ratio1", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.norm_data.norm_to_pixel_s2": [[60, 82], ["root_joint[].copy", "norm_data.make_3d_bbox", "numpy.repeat", "common.common_pytorch.utils.wrap", "common.common_pytorch.utils.wrap", "numpy.concatenate", "norm_data.minus_root", "norm_data.minus_root", "common.common_pytorch.utils.wrap.squeeze", "common.common_pytorch.utils.wrap.squeeze"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.norm_data.make_3d_bbox", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.common_pytorch.utils.wrap", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.common_pytorch.utils.wrap", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.norm_data.minus_root", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.norm_data.minus_root"], ["", "def", "norm_to_pixel_s2", "(", "pose3d_pixel", ",", "root_joint", ",", "pose_2d", ",", "camera", ",", "bbox_scale", "=", "2", ")", ":", "\n", "# stage2: Resize 2d and 3d pixel position into one fixed bbox_scale", "\n", "    ", "pose3d_root_Z", "=", "root_joint", "[", ":", ",", ":", ",", "2", ":", "3", "]", ".", "copy", "(", ")", "\n", "tl_3d_joint", ",", "br_3d_joint", "=", "make_3d_bbox", "(", "root_joint", ")", "\n", "\n", "camera", "=", "np", ".", "repeat", "(", "camera", "[", "np", ".", "newaxis", ",", ":", "]", ",", "root_joint", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "tl2d", "=", "wrap", "(", "project_to_2d_linear", ",", "tl_3d_joint", ",", "camera", ")", "# Use weak perspective", "\n", "br2d", "=", "wrap", "(", "project_to_2d_linear", ",", "br_3d_joint", ",", "camera", ")", "# Use weak perspective", "\n", "bbox_2d", "=", "np", ".", "concatenate", "(", "(", "tl2d", ".", "squeeze", "(", ")", ",", "br2d", ".", "squeeze", "(", ")", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "diff_bbox_2d", "=", "bbox_2d", "[", "...", ",", "2", ":", "3", "]", "-", "bbox_2d", "[", "...", ",", "0", ":", "1", "]", "# (x_br - x_tl)", "\n", "ratio2", "=", "bbox_scale", "/", "diff_bbox_2d", "# ratio2.all() == (bbox_scale/(ratio2 * rectange_3d_size).all())", "\n", "\n", "# Get normed 3d joints", "\n", "pixel_xy_root", "=", "pose3d_pixel", "[", ":", ",", "0", ":", "1", ",", "0", ":", "2", "]", "# [T,1,2]", "\n", "reshape_3d", "=", "pose3d_pixel", "*", "ratio2", "[", ":", ",", "np", ".", "newaxis", ",", ":", "]", "\n", "normed_3d", "=", "minus_root", "(", "reshape_3d", ")", "\n", "\n", "# Get normed 2d joints", "\n", "reshape_2d", "=", "pose_2d", "*", "ratio2", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "normed_2d", "=", "minus_root", "(", "reshape_2d", ")", "\n", "return", "normed_3d", ",", "normed_2d", ",", "ratio2", "[", ":", ",", "np", ".", "newaxis", "]", ",", "pixel_xy_root", ",", "pose3d_root_Z", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.norm_data.make_3d_bbox": [[83, 89], ["pose_3d_root.copy", "pose_3d_root.copy"], "function", ["None"], ["", "def", "make_3d_bbox", "(", "pose_3d_root", ",", "rectangle_3d_size", "=", "2000", ")", ":", "\n", "    ", "tl_joint", "=", "pose_3d_root", ".", "copy", "(", ")", "\n", "tl_joint", "[", "...", ",", ":", "2", "]", "-=", "rectangle_3d_size", "/", "2", "# 1000mm", "\n", "br_joint", "=", "pose_3d_root", ".", "copy", "(", ")", "\n", "br_joint", "[", "...", ",", ":", "2", "]", "+=", "rectangle_3d_size", "/", "2", "# 1000mm", "\n", "return", "tl_joint", ",", "br_joint", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.norm_data.minus_root": [[90, 95], ["None"], "function", ["None"], ["", "def", "minus_root", "(", "pose", ")", ":", "\n", "# Assume pose.shape = [T, K ,N]", "\n", "    ", "pose_root", "=", "pose", "[", ":", ",", ":", "1", "]", "\n", "relative_pose", "=", "pose", "-", "pose_root", "\n", "return", "relative_pose", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.norm_data.get_ratio": [[96, 107], ["camera.unsqueeze().unsqueeze.unsqueeze().unsqueeze", "camera.unsqueeze().unsqueeze.unsqueeze"], "function", ["None"], ["", "def", "get_ratio", "(", "abs_root_3d", ",", "camera", ")", ":", "\n", "# abs_root_3d.shape = [B, T, 1, 1]", "\n", "# camera.shape = [B, 9] & [2, 9]", "\n", "    ", "bbox_scale", "=", "1", "\n", "rectangle_3d_size", "=", "2000", "\n", "camera", "=", "camera", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "fx", ",", "fy", "=", "camera", "[", ":", ",", ":", ",", ":", ",", "0", ":", "1", "]", ",", "camera", "[", ":", ",", ":", ",", ":", ",", "1", ":", "2", "]", "\n", "pixel_depth_ratio", "=", "fx", "/", "abs_root_3d", "\n", "rescale_bbox", "=", "bbox_scale", "/", "pixel_depth_ratio", "\n", "rescale_bbox_ratio", "=", "rescale_bbox", "/", "rectangle_3d_size", "\n", "return", "rescale_bbox_ratio", ",", "pixel_depth_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.hm36.load_data": [[6, 13], ["common.dataset.h36m_dataset.Human36mDataset", "KeyError"], "function", ["None"], ["def", "load_data", "(", "dataset_root", ",", "dataset_name", ",", "kpt_name", ")", ":", "\n", "    ", "dataset_path", "=", "dataset_root", "+", "'data_3d_'", "+", "dataset_name", "+", "'.npz'", "\n", "if", "dataset_name", "==", "'h36m'", ":", "\n", "        ", "dataset", "=", "Human36mDataset", "(", "dataset_path", ")", "\n", "", "else", ":", "\n", "        ", "raise", "KeyError", "(", "'Invalid dataset'", ")", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.hm36.prepare_dataset": [[16, 26], ["dataset.subjects", "dataset[].keys", "world_to_camera", "positions_3d.append"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.mocap_dataset.MocapDataset.subjects", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.transformation.cam_utils.world_to_camera"], ["", "def", "prepare_dataset", "(", "dataset", ")", ":", "\n", "    ", "for", "subject", "in", "dataset", ".", "subjects", "(", ")", ":", "\n", "        ", "for", "action", "in", "dataset", "[", "subject", "]", ".", "keys", "(", ")", ":", "\n", "            ", "anim", "=", "dataset", "[", "subject", "]", "[", "action", "]", "\n", "if", "'positions'", "in", "anim", ":", "\n", "                ", "positions_3d", "=", "[", "]", "\n", "for", "cam", "in", "anim", "[", "'cameras'", "]", ":", "\n", "                    ", "pos_3d", "=", "world_to_camera", "(", "anim", "[", "'positions'", "]", ",", "R", "=", "cam", "[", "'orientation'", "]", ",", "t", "=", "cam", "[", "'translation'", "]", ")", "\n", "positions_3d", ".", "append", "(", "pos_3d", ")", "\n", "", "anim", "[", "'positions_3d'", "]", "=", "positions_3d", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.hm36.load_2d_data": [[28, 41], ["numpy.load", "keypoints[].item", "keypoints[].item", "list", "list", "print", "numpy.load", "smooth_2d[].item"], "function", ["None"], ["", "", "", "", "def", "load_2d_data", "(", "dataset_root", ",", "dataset_name", ",", "kpt_name", ")", ":", "\n", "    ", "keypoints", "=", "np", ".", "load", "(", "dataset_root", "+", "'data_2d_'", "+", "dataset_name", "+", "'_'", "+", "kpt_name", "+", "'.npz'", ",", "allow_pickle", "=", "True", ")", "\n", "keypoints_metadata", "=", "keypoints", "[", "'metadata'", "]", ".", "item", "(", ")", "\n", "keypoints_symmetry", "=", "keypoints_metadata", "[", "'keypoints_symmetry'", "]", "\n", "kps_left", ",", "kps_right", "=", "list", "(", "keypoints_symmetry", "[", "0", "]", ")", ",", "list", "(", "keypoints_symmetry", "[", "1", "]", ")", "\n", "keypoints", "=", "keypoints", "[", "'positions_2d'", "]", ".", "item", "(", ")", "\n", "use_smooth_2d", "=", "False", "\n", "if", "use_smooth_2d", ":", "\n", "        ", "print", "(", "'use smooth 2d pose:'", ")", "\n", "smooth_2d", "=", "np", ".", "load", "(", "'common/dataset/pre_process/smooth_cpn_ft_81_all.npz'", ",", "allow_pickle", "=", "True", ")", "\n", "keypoints", "=", "smooth_2d", "[", "'positions_2d'", "]", ".", "item", "(", ")", "\n", "\n", "", "return", "keypoints", ",", "keypoints_metadata", ",", "kps_left", ",", "kps_right", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.hm36.load_hard_test": [[42, 62], ["numpy.load", "len", "range", "t_3d.append", "t_2d.append", "t_3d.append", "t_2d.append"], "function", ["None"], ["", "def", "load_hard_test", "(", "file_path", ",", "eval_num", ")", ":", "\n", "# Used for load hard test set in our evaluation", "\n", "    ", "hard_pose", "=", "np", ".", "load", "(", "file_path", ",", "allow_pickle", "=", "True", ")", "\n", "pose_3d", "=", "hard_pose", "[", "'pose_3d'", "]", "# Have normalized, type:list", "\n", "pose_2d", "=", "hard_pose", "[", "'pose_2d'", "]", "# Have normalized; type:list", "\n", "if", "len", "(", "pose_3d", ")", "==", "1", ":", "\n", "        ", "num", "=", "pose_3d", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "size", "=", "num", "//", "eval_num", "\n", "t_3d", "=", "[", "]", "\n", "t_2d", "=", "[", "]", "\n", "t", "=", "0", "\n", "for", "j", "in", "range", "(", "size", ")", ":", "\n", "            ", "t_3d", ".", "append", "(", "pose_3d", "[", "0", "]", "[", "t", ":", "t", "+", "eval_num", "]", ")", "\n", "t_2d", ".", "append", "(", "pose_2d", "[", "0", "]", "[", "t", ":", "t", "+", "eval_num", "]", ")", "\n", "t", "+=", "eval_num", "\n", "", "t_3d", ".", "append", "(", "pose_3d", "[", "0", "]", "[", "t", ":", "]", ")", "\n", "t_2d", ".", "append", "(", "pose_2d", "[", "0", "]", "[", "t", ":", "]", ")", "\n", "return", "t_3d", ",", "t_2d", "\n", "", "else", ":", "\n", "        ", "return", "pose_3d", ",", "pose_2d", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.hm36.prepare_2d_data": [[64, 85], ["dataset.subjects", "dataset[].keys", "range", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.mocap_dataset.MocapDataset.subjects"], ["", "", "def", "prepare_2d_data", "(", "keypoints", ",", "dataset", ")", ":", "\n", "    ", "for", "subject", "in", "dataset", ".", "subjects", "(", ")", ":", "\n", "        ", "assert", "subject", "in", "keypoints", ",", "'Subject {} is missing from the 2D detections dataset'", ".", "format", "(", "subject", ")", "\n", "for", "action", "in", "dataset", "[", "subject", "]", ".", "keys", "(", ")", ":", "\n", "            ", "assert", "action", "in", "keypoints", "[", "\n", "subject", "]", ",", "'Action {} of subject {} is missing from the 2D detections dataset'", ".", "format", "(", "\n", "action", ",", "subject", ")", "\n", "if", "'positions_3d'", "not", "in", "dataset", "[", "subject", "]", "[", "action", "]", ":", "\n", "                ", "continue", "\n", "\n", "", "for", "cam_idx", "in", "range", "(", "len", "(", "keypoints", "[", "subject", "]", "[", "action", "]", ")", ")", ":", "\n", "\n", "# We check for >= instead of == because some videos in H3.6M contain extra frames", "\n", "                ", "mocap_length", "=", "dataset", "[", "subject", "]", "[", "action", "]", "[", "'positions_3d'", "]", "[", "cam_idx", "]", ".", "shape", "[", "0", "]", "\n", "assert", "keypoints", "[", "subject", "]", "[", "action", "]", "[", "cam_idx", "]", ".", "shape", "[", "0", "]", ">=", "mocap_length", "\n", "\n", "if", "keypoints", "[", "subject", "]", "[", "action", "]", "[", "cam_idx", "]", ".", "shape", "[", "0", "]", ">", "mocap_length", ":", "\n", "# Shorten sequence", "\n", "                    ", "keypoints", "[", "subject", "]", "[", "action", "]", "[", "cam_idx", "]", "=", "keypoints", "[", "subject", "]", "[", "action", "]", "[", "cam_idx", "]", "[", ":", "mocap_length", "]", "\n", "\n", "", "", "assert", "len", "(", "keypoints", "[", "subject", "]", "[", "action", "]", ")", "==", "len", "(", "dataset", "[", "subject", "]", "[", "action", "]", "[", "'positions_3d'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.hm36.random_rotate": [[86, 121], ["print", "dataset[].keys", "action.split", "dataset.cameras", "len", "len", "len", "len", "range", "numpy.concatenate", "numpy.concatenate", "len", "numpy.concatenate", "numpy.concatenate", "act.split", "numpy.repeat", "numpy.repeat", "numpy.repeat", "numpy.repeat", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.mocap_dataset.MocapDataset.cameras"], ["", "", "", "def", "random_rotate", "(", "dataset", ",", "keypoints", ",", "subjects", ",", "action_filter", "=", "None", ",", "cam_filter", "=", "None", ")", ":", "\n", "    ", "print", "(", "'Random rotate 3d pose around Y axis, output rotated 2d and 3d poses '", ")", "\n", "for", "subject", "in", "subjects", ":", "\n", "        ", "for", "action", "in", "dataset", "[", "subject", "]", ".", "keys", "(", ")", ":", "\n", "            ", "action_split", "=", "action", ".", "split", "(", "' '", ")", "[", "0", "]", "\n", "if", "action_filter", "is", "not", "None", ":", "\n", "                ", "found", "=", "False", "\n", "# distinguish the actions:'Sitting' and 'SittingDown'", "\n", "for", "act", "in", "action_filter", ":", "\n", "                    ", "act", "=", "act", ".", "split", "(", "' '", ")", "[", "0", "]", "\n", "if", "action_split", "==", "act", ":", "\n", "                        ", "found", "=", "True", "\n", "break", "\n", "", "", "if", "not", "found", ":", "\n", "                    ", "continue", "\n", "", "", "cams", "=", "dataset", ".", "cameras", "(", ")", "[", "subject", "]", "\n", "poses_3d", "=", "dataset", "[", "subject", "]", "[", "action", "]", "[", "'positions_3d'", "]", "\n", "poses_2d", "=", "keypoints", "[", "subject", "]", "[", "action", "]", "\n", "assert", "len", "(", "poses_3d", ")", "==", "len", "(", "cams", ")", ",", "'Camera count mismatch'", "\n", "assert", "len", "(", "cams", ")", "==", "len", "(", "poses_2d", ")", ",", "'Camera count mismatch'", "\n", "\n", "if", "cam_filter", ":", "\n", "                ", "for", "i", "in", "cam_filter", ":", "# Select by some camera viewpoints", "\n", "                    ", "dataset", "[", "subject", "]", "[", "action", "]", "[", "'positions_3d'", "]", "[", "i", "]", "=", "poses_3d", "[", "i", "]", "\n", "w", ",", "h", "=", "np", ".", "repeat", "(", "np", ".", "array", "(", "cams", "[", "i", "]", "[", "'res_w'", "]", ")", "[", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", ",", "poses_2d", "[", "i", "]", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", ",", "np", ".", "repeat", "(", "np", ".", "array", "(", "cams", "[", "i", "]", "[", "'res_h'", "]", ")", "[", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", ",", "poses_2d", "[", "i", "]", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "wh", "=", "np", ".", "concatenate", "(", "(", "w", ",", "h", ")", ",", "axis", "=", "-", "1", ")", "\n", "keypoints", "[", "subject", "]", "[", "action", "]", "[", "i", "]", "=", "np", ".", "concatenate", "(", "(", "poses_2d", "[", "i", "]", ",", "wh", ")", ",", "axis", "=", "1", ")", "\n", "", "", "else", ":", "\n", "                ", "for", "i", "in", "range", "(", "len", "(", "poses_3d", ")", ")", ":", "\n", "                    ", "dataset", "[", "subject", "]", "[", "action", "]", "[", "'positions_3d'", "]", "[", "i", "]", "=", "poses_3d", "[", "i", "]", "\n", "w", ",", "h", "=", "np", ".", "repeat", "(", "np", ".", "array", "(", "cams", "[", "i", "]", "[", "'res_w'", "]", ")", "[", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", ",", "poses_2d", "[", "i", "]", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", ",", "np", ".", "repeat", "(", "np", ".", "array", "(", "cams", "[", "i", "]", "[", "'res_h'", "]", ")", "[", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", ",", "poses_2d", "[", "i", "]", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "wh", "=", "np", ".", "concatenate", "(", "(", "w", ",", "h", ")", ",", "axis", "=", "-", "1", ")", "\n", "keypoints", "[", "subject", "]", "[", "action", "]", "[", "i", "]", "=", "np", ".", "concatenate", "(", "(", "poses_2d", "[", "i", "]", ",", "wh", ")", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.hm36.normalization": [[122, 175], ["print", "keypoints[].keys", "action.split", "dataset.cameras", "len", "len", "len", "len", "range", "len", "act.split", "normalize_screen_coordinates", "common.dataset.pre_process.norm_data.norm_to_pixel", "norm_params.append", "normalize_screen_coordinates", "common.dataset.pre_process.norm_data.norm_to_pixel", "norm_params.append", "numpy.concatenate", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.mocap_dataset.MocapDataset.cameras", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.transformation.cam_utils.normalize_screen_coordinates", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.norm_data.norm_to_pixel", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.transformation.cam_utils.normalize_screen_coordinates", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.norm_data.norm_to_pixel"], ["", "", "", "", "", "def", "normalization", "(", "dataset", ",", "keypoints", ",", "subjects", ",", "action_filter", ",", "cam_filter", ",", "norm", ")", ":", "\n", "    ", "print", "(", "'Start to normalize input 2d and 3d pose: '", ")", "\n", "for", "subject", "in", "subjects", ":", "\n", "        ", "for", "action", "in", "keypoints", "[", "subject", "]", ".", "keys", "(", ")", ":", "\n", "            ", "action_split", "=", "action", ".", "split", "(", "' '", ")", "[", "0", "]", "\n", "if", "action_filter", "is", "not", "None", ":", "\n", "                ", "found", "=", "False", "\n", "# distinguish the actions:'Sitting' and 'SittingDown'", "\n", "for", "act", "in", "action_filter", ":", "\n", "                    ", "act", "=", "act", ".", "split", "(", "' '", ")", "[", "0", "]", "\n", "if", "action_split", "==", "act", ":", "\n", "                        ", "found", "=", "True", "\n", "break", "\n", "", "", "if", "not", "found", ":", "\n", "                    ", "continue", "\n", "\n", "", "", "poses_2d", "=", "keypoints", "[", "subject", "]", "[", "action", "]", "\n", "cams", "=", "dataset", ".", "cameras", "(", ")", "[", "subject", "]", "\n", "poses_3d", "=", "dataset", "[", "subject", "]", "[", "action", "]", "[", "'positions_3d'", "]", "\n", "assert", "len", "(", "poses_3d", ")", "==", "len", "(", "poses_2d", ")", ",", "'Camera count mismatch'", "\n", "assert", "len", "(", "cams", ")", "==", "len", "(", "poses_2d", ")", ",", "'Camera count mismatch'", "\n", "norm_params", "=", "[", "]", "\n", "if", "cam_filter", ":", "\n", "                ", "for", "i", "in", "cam_filter", ":", "# Select by some camera viewpoints", "\n", "                    ", "if", "norm", "==", "'base'", ":", "\n", "# Remove global offset, but keep trajectory in first position", "\n", "                        ", "poses_3d", "[", "i", "]", "[", ":", ",", "1", ":", "]", "-=", "poses_3d", "[", "i", "]", "[", ":", ",", ":", "1", "]", "\n", "normed_pose_3d", "=", "poses_3d", "[", "i", "]", "\n", "normed_pose_2d", "=", "normalize_screen_coordinates", "(", "poses_2d", "[", "i", "]", "[", "...", ",", ":", "2", "]", ",", "w", "=", "cams", "[", "i", "]", "[", "'res_w'", "]", ",", "h", "=", "cams", "[", "i", "]", "[", "'res_h'", "]", ")", "\n", "\n", "", "else", ":", "\n", "                        ", "normed_pose_3d", ",", "normed_pose_2d", ",", "pixel_ratio", ",", "rescale_ratio", ",", "offset_2d", ",", "abs_root_Z", "=", "norm_to_pixel", "(", "\n", "poses_3d", "[", "i", "]", ",", "poses_2d", "[", "i", "]", ",", "cams", "[", "i", "]", "[", "'intrinsic'", "]", ",", "norm", ")", "\n", "norm_params", ".", "append", "(", "np", ".", "concatenate", "(", "(", "pixel_ratio", ",", "rescale_ratio", ",", "offset_2d", ",", "abs_root_Z", ")", ",", "axis", "=", "-", "1", ")", ")", "# [T, 1, 5], len()==4", "\n", "", "keypoints", "[", "subject", "]", "[", "action", "]", "[", "i", "]", "=", "normed_pose_2d", "\n", "dataset", "[", "subject", "]", "[", "action", "]", "[", "'positions_3d'", "]", "[", "i", "]", "=", "normed_pose_3d", "\n", "", "if", "norm_params", ":", "\n", "                    ", "dataset", "[", "subject", "]", "[", "action", "]", "[", "'normalization_params'", "]", "=", "norm_params", "\n", "", "", "else", ":", "\n", "                ", "for", "i", "in", "range", "(", "len", "(", "poses_2d", ")", ")", ":", "\n", "                    ", "if", "norm", "==", "'base'", ":", "\n", "# Remove global offset, but keep trajectory in first position", "\n", "                        ", "poses_3d", "[", "i", "]", "[", ":", ",", "1", ":", "]", "-=", "poses_3d", "[", "i", "]", "[", ":", ",", ":", "1", "]", "\n", "normed_pose_3d", "=", "poses_3d", "[", "i", "]", "\n", "normed_pose_2d", "=", "normalize_screen_coordinates", "(", "poses_2d", "[", "i", "]", "[", "...", ",", ":", "2", "]", ",", "w", "=", "cams", "[", "i", "]", "[", "'res_w'", "]", ",", "h", "=", "cams", "[", "i", "]", "[", "'res_h'", "]", ")", "\n", "\n", "", "else", ":", "\n", "                        ", "normed_pose_3d", ",", "normed_pose_2d", ",", "pixel_ratio", ",", "rescale_ratio", ",", "offset_2d", ",", "abs_root_Z", "=", "norm_to_pixel", "(", "poses_3d", "[", "i", "]", ",", "poses_2d", "[", "i", "]", ",", "cams", "[", "i", "]", "[", "'intrinsic'", "]", ",", "norm", ")", "\n", "norm_params", ".", "append", "(", "np", ".", "concatenate", "(", "(", "pixel_ratio", ",", "rescale_ratio", ",", "offset_2d", ",", "abs_root_Z", ")", ",", "axis", "=", "-", "1", ")", ")", "# [T, 1, 5], len()==4", "\n", "", "keypoints", "[", "subject", "]", "[", "action", "]", "[", "i", "]", "=", "normed_pose_2d", "\n", "dataset", "[", "subject", "]", "[", "action", "]", "[", "'positions_3d'", "]", "[", "i", "]", "=", "normed_pose_3d", "\n", "", "if", "norm_params", ":", "\n", "                    ", "dataset", "[", "subject", "]", "[", "action", "]", "[", "'normalization_params'", "]", "=", "norm_params", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.utils.suggest_metadata": [[59, 66], ["KeyError", "names.append"], "function", ["None"], ["def", "suggest_metadata", "(", "name", ")", ":", "\n", "    ", "names", "=", "[", "]", "\n", "for", "metadata", "in", "[", "mpii_metadata", ",", "coco_metadata", ",", "h36m_metadata", ",", "humaneva15_metadata", ",", "humaneva20_metadata", "]", ":", "\n", "        ", "if", "metadata", "[", "'layout_name'", "]", "in", "name", ":", "\n", "            ", "return", "metadata", "\n", "", "names", ".", "append", "(", "metadata", "[", "'layout_name'", "]", ")", "\n", "", "raise", "KeyError", "(", "'Cannot infer keypoint layout from name \"{}\". Tried {}.'", ".", "format", "(", "name", ",", "names", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.utils.import_detectron_poses": [[68, 85], ["numpy.load", "range", "numpy.array", "len", "numpy.argmax", "[].T.copy", "np.array.append", "len", "np.array.append"], "function", ["None"], ["", "def", "import_detectron_poses", "(", "path", ")", ":", "\n", "# Latin1 encoding because Detectron runs on Python 2.7", "\n", "    ", "data", "=", "np", ".", "load", "(", "path", ",", "encoding", "=", "'latin1'", ")", "\n", "kp", "=", "data", "[", "'keypoints'", "]", "\n", "bb", "=", "data", "[", "'boxes'", "]", "\n", "results", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "bb", ")", ")", ":", "\n", "        ", "if", "len", "(", "bb", "[", "i", "]", "[", "1", "]", ")", "==", "0", ":", "\n", "            ", "assert", "i", ">", "0", "\n", "# Use last pose in case of detection failure", "\n", "results", ".", "append", "(", "results", "[", "-", "1", "]", ")", "\n", "continue", "\n", "", "best_match", "=", "np", ".", "argmax", "(", "bb", "[", "i", "]", "[", "1", "]", "[", ":", ",", "4", "]", ")", "\n", "keypoints", "=", "kp", "[", "i", "]", "[", "1", "]", "[", "best_match", "]", ".", "T", ".", "copy", "(", ")", "\n", "results", ".", "append", "(", "keypoints", ")", "\n", "", "results", "=", "np", ".", "array", "(", "results", ")", "\n", "return", "results", "[", ":", ",", ":", ",", "4", ":", "6", "]", "# Soft-argmax", "\n", "# return results[:, :, [0, 1, 3]] # Argmax + score", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.utils.import_cpn_poses": [[88, 92], ["numpy.load"], "function", ["None"], ["", "def", "import_cpn_poses", "(", "path", ")", ":", "\n", "    ", "data", "=", "np", ".", "load", "(", "path", ")", "\n", "kp", "=", "data", "[", "'keypoints'", "]", "\n", "return", "kp", "[", ":", ",", ":", ",", ":", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.utils.import_sh_poses": [[94, 98], ["positions.astype", "h5py.File"], "function", ["None"], ["", "def", "import_sh_poses", "(", "path", ")", ":", "\n", "    ", "with", "h5py", ".", "File", "(", "path", ")", "as", "hf", ":", "\n", "        ", "positions", "=", "hf", "[", "'poses'", "]", ".", "value", "\n", "", "return", "positions", ".", "astype", "(", "'float32'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.utils.suggest_pose_importer": [[100, 108], ["KeyError"], "function", ["None"], ["", "def", "suggest_pose_importer", "(", "name", ")", ":", "\n", "    ", "if", "'detectron'", "in", "name", ":", "\n", "        ", "return", "import_detectron_poses", "\n", "", "if", "'cpn'", "in", "name", ":", "\n", "        ", "return", "import_cpn_poses", "\n", "", "if", "'sh'", "in", "name", ":", "\n", "        ", "return", "import_sh_poses", "\n", "", "raise", "KeyError", "(", "'Cannot infer keypoint format from name \"{}\". Tried detectron, cpn, sh.'", ".", "format", "(", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.utils.fetch": [[110, 206], ["keypoints[].keys", "len", "len", "range", "numpy.random.randint", "len", "int", "deterministic_random", "range", "action.split", "out_poses_2d.append", "print", "dataset.cameras", "str", "len", "range", "dataset.cameras", "len", "len", "len", "len", "out_poses_3d.append", "round", "len", "act.split", "out_poses_2d.append", "len", "out_poses_2d.append", "out_camera_params.append", "enumerate", "range", "len", "enumerate", "out_poses_3d.append", "len", "out_poses_3d.append", "out_camera_params.append", "len", "out_camera_params.append"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.experiment.tools.deterministic_random", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.mocap_dataset.MocapDataset.cameras", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.mocap_dataset.MocapDataset.cameras"], ["", "def", "fetch", "(", "subjects", ",", "keypoints", ",", "dataset", ",", "downsample", ",", "action_filter", "=", "None", ",", "cam_filter", "=", "None", ",", "subset", "=", "1", ",", "parse_3d_poses", "=", "True", ")", ":", "\n", "    ", "out_poses_3d", "=", "[", "]", "\n", "out_poses_2d", "=", "[", "]", "\n", "out_camera_params", "=", "[", "]", "\n", "for", "subject", "in", "subjects", ":", "\n", "        ", "for", "action", "in", "keypoints", "[", "subject", "]", ".", "keys", "(", ")", ":", "\n", "            ", "action_split", "=", "action", ".", "split", "(", "' '", ")", "[", "0", "]", "\n", "if", "action_filter", "is", "not", "None", ":", "\n", "                ", "found", "=", "False", "\n", "# distinguish the actions:'Sitting' and 'SittingDown'", "\n", "for", "act", "in", "action_filter", ":", "\n", "                    ", "act", "=", "act", ".", "split", "(", "' '", ")", "[", "0", "]", "\n", "if", "action_split", "==", "act", ":", "\n", "                        ", "found", "=", "True", "\n", "break", "\n", "", "", "if", "not", "found", ":", "\n", "                    ", "continue", "\n", "", "", "poses_2d", "=", "keypoints", "[", "subject", "]", "[", "action", "]", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "4", ")", "\n", "if", "cam_filter", "==", "[", "5", "]", ":", "#random camera index", "\n", "                ", "out_poses_2d", ".", "append", "(", "poses_2d", "[", "index", "]", ")", "\n", "print", "(", "'choose a camera index for each action:'", ",", "index", ")", "\n", "\n", "", "elif", "cam_filter", ":", "\n", "                ", "for", "j", "in", "cam_filter", ":", "# Select by some camera viewpoints", "\n", "                    ", "out_poses_2d", ".", "append", "(", "poses_2d", "[", "j", "]", ")", "\n", "\n", "", "", "else", ":", "\n", "                ", "for", "i", "in", "range", "(", "len", "(", "poses_2d", ")", ")", ":", "# Iterate across cameras", "\n", "                    ", "out_poses_2d", ".", "append", "(", "poses_2d", "[", "i", "]", ")", "\n", "\n", "", "", "if", "subject", "in", "dataset", ".", "cameras", "(", ")", ":", "\n", "                ", "cams", "=", "dataset", ".", "cameras", "(", ")", "[", "subject", "]", "\n", "assert", "len", "(", "cams", ")", "==", "len", "(", "poses_2d", ")", ",", "'Camera count mismatch'", "\n", "if", "cam_filter", "==", "[", "5", "]", ":", "\n", "                    ", "cam", "=", "cams", "[", "index", "]", "\n", "if", "'intrinsic'", "in", "cam", ":", "\n", "                        ", "use_params", "=", "{", "}", "\n", "use_params", "[", "'intrinsic'", "]", "=", "cam", "[", "'intrinsic'", "]", "\n", "if", "'normalization_params'", "in", "dataset", "[", "subject", "]", "[", "action", "]", ":", "\n", "                            ", "use_params", "[", "'normalization_params'", "]", "=", "dataset", "[", "subject", "]", "[", "action", "]", "[", "'normalization_params'", "]", "[", "index", "]", "\n", "", "out_camera_params", ".", "append", "(", "use_params", ")", "\n", "", "", "elif", "cam_filter", ":", "\n", "                    ", "for", "j", "in", "cam_filter", ":", "\n", "                        ", "for", "i", ",", "cam", "in", "enumerate", "(", "cams", ")", ":", "\n", "                            ", "if", "j", "==", "i", ":", "\n", "                                ", "if", "'intrinsic'", "in", "cam", ":", "\n", "                                    ", "use_params", "=", "{", "}", "\n", "use_params", "[", "'intrinsic'", "]", "=", "cam", "[", "'intrinsic'", "]", "\n", "if", "'normalization_params'", "in", "dataset", "[", "subject", "]", "[", "action", "]", ":", "\n", "                                        ", "use_params", "[", "'normalization_params'", "]", "=", "dataset", "[", "subject", "]", "[", "action", "]", "[", "'normalization_params'", "]", "[", "i", "]", "\n", "", "out_camera_params", ".", "append", "(", "use_params", ")", "\n", "", "", "", "", "", "else", ":", "\n", "                    ", "for", "i", ",", "cam", "in", "enumerate", "(", "cams", ")", ":", "\n", "                        ", "if", "'intrinsic'", "in", "cam", ":", "\n", "                            ", "use_params", "=", "{", "}", "\n", "use_params", "[", "'intrinsic'", "]", "=", "cam", "[", "'intrinsic'", "]", "\n", "if", "'normalization_params'", "in", "dataset", "[", "subject", "]", "[", "action", "]", ":", "\n", "                                ", "use_params", "[", "'normalization_params'", "]", "=", "dataset", "[", "subject", "]", "[", "action", "]", "[", "'normalization_params'", "]", "[", "i", "]", "\n", "", "out_camera_params", ".", "append", "(", "use_params", ")", "\n", "\n", "", "", "", "", "if", "parse_3d_poses", "and", "'positions_3d'", "in", "dataset", "[", "subject", "]", "[", "action", "]", ":", "\n", "                ", "poses_3d", "=", "dataset", "[", "subject", "]", "[", "action", "]", "[", "'positions_3d'", "]", "\n", "assert", "len", "(", "poses_3d", ")", "==", "len", "(", "poses_2d", ")", ",", "'Camera count mismatch'", "\n", "if", "cam_filter", "==", "[", "5", "]", ":", "\n", "                    ", "out_poses_3d", ".", "append", "(", "poses_3d", "[", "index", "]", ")", "\n", "", "elif", "cam_filter", ":", "\n", "                    ", "for", "j", "in", "cam_filter", ":", "\n", "                        ", "out_poses_3d", ".", "append", "(", "poses_3d", "[", "j", "]", ")", "\n", "", "", "else", ":", "\n", "                    ", "for", "i", "in", "range", "(", "len", "(", "poses_3d", ")", ")", ":", "# Iterate across cameras", "\n", "                        ", "out_poses_3d", ".", "append", "(", "poses_3d", "[", "i", "]", ")", "\n", "\n", "", "", "", "", "", "if", "len", "(", "out_camera_params", ")", "==", "0", ":", "\n", "        ", "out_camera_params", "=", "None", "\n", "", "if", "len", "(", "out_poses_3d", ")", "==", "0", ":", "\n", "        ", "out_poses_3d", "=", "None", "\n", "\n", "", "stride", "=", "downsample", "\n", "if", "subset", "<", "1", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "out_poses_2d", ")", ")", ":", "\n", "            ", "n_frames", "=", "int", "(", "round", "(", "len", "(", "out_poses_2d", "[", "i", "]", ")", "//", "stride", "*", "subset", ")", "*", "stride", ")", "\n", "start", "=", "deterministic_random", "(", "0", ",", "len", "(", "out_poses_2d", "[", "i", "]", ")", "-", "n_frames", "+", "1", ",", "str", "(", "len", "(", "out_poses_2d", "[", "i", "]", ")", ")", ")", "\n", "out_poses_2d", "[", "i", "]", "=", "out_poses_2d", "[", "i", "]", "[", "start", ":", "start", "+", "n_frames", ":", "stride", "]", "\n", "if", "out_poses_3d", "is", "not", "None", ":", "\n", "                ", "out_poses_3d", "[", "i", "]", "=", "out_poses_3d", "[", "i", "]", "[", "start", ":", "start", "+", "n_frames", ":", "stride", "]", "\n", "", "", "", "elif", "stride", ">", "1", ":", "\n", "# Downsample as requested", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "out_poses_2d", ")", ")", ":", "\n", "            ", "out_poses_2d", "[", "i", "]", "=", "out_poses_2d", "[", "i", "]", "[", ":", ":", "stride", "]", "\n", "if", "out_poses_3d", "is", "not", "None", ":", "\n", "                ", "out_poses_3d", "[", "i", "]", "=", "out_poses_3d", "[", "i", "]", "[", ":", ":", "stride", "]", "\n", "\n", "", "", "", "return", "out_camera_params", ",", "out_poses_3d", ",", "out_poses_2d", "\n", "", ""]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.get_mpi_inf.load_mpi_test": [[5, 46], ["numpy.load", "range", "common.transformation.cam_utils.normalize_screen_coordinates", "common.dataset.pre_process.norm_data.norm_to_pixel", "numpy.concatenate", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.transformation.cam_utils.normalize_screen_coordinates", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.norm_data.norm_to_pixel"], ["def", "load_mpi_test", "(", "file_path", ",", "seq", ",", "norm", ")", ":", "\n", "    ", "\"\"\"\n    Usage: Load a section once\n    :param dataset_root: root path\n    :param section: There are six sequences in this (seq=0,1,2,3,4,5). And 2935 poses in a unique set(seq==7).\n    If you want to evaluate by scene setting, you can use the sequencewise evaluation\n    to convert to these numbers by doing\n    #1:Studio with Green Screen (TS1*603 + TS2 *540)/ (603+540)\n    #2:Studio without Green Screen (TS3*505+TS4*553)/(505+553)\n    #3:Outdoor (TS5*276+TS6*452)/(276+452)\n    :return: Normalized 2d/3d pose, normalization params and camera intrinics. All types: List\n    \"\"\"", "\n", "info", "=", "np", ".", "load", "(", "file_path", ",", "allow_pickle", "=", "True", ")", "\n", "if", "seq", "in", "range", "(", "0", ",", "6", ")", ":", "\n", "        ", "pose_3d", "=", "info", "[", "'pose3d_univ'", "]", "[", "seq", "]", "\n", "pose_2d", "=", "info", "[", "'pose2d'", "]", "[", "seq", "]", "\n", "if", "seq", "in", "[", "0", ",", "1", ",", "2", ",", "3", "]", ":", "\n", "            ", "img_w", ",", "img_h", "=", "2048", ",", "2048", "\n", "cam_intri", "=", "np", ".", "array", "(", "[", "1500.0686135995716", ",", "1500.6590966853348", ",", "1017.3794860438494", ",", "1043.062824876024", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "", "elif", "seq", "in", "[", "4", ",", "5", "]", ":", "\n", "            ", "img_w", ",", "img_h", "=", "1920", ",", "1080", "\n", "cam_intri", "=", "np", ".", "array", "(", "[", "1683.482559482185", ",", "1671.927242063379", ",", "939.9278168524228", ",", "560.2072491988034", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "\n", "", "", "elif", "seq", "==", "7", ":", "\n", "        ", "pose_3d", "=", "info", "[", "'pose3d_univ'", "]", "[", "0", "]", "\n", "pose_2d", "=", "info", "[", "'pose2d'", "]", "[", "0", "]", "\n", "img_w", ",", "img_h", "=", "2048", ",", "2048", "\n", "cam_intri", "=", "np", ".", "array", "(", "[", "1504.1479043534127", ",", "1556.86936732066", ",", "991.7469587022122", ",", "872.994958045596", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "", "params", "=", "{", "}", "\n", "if", "norm", "==", "'base'", ":", "\n", "# Remove global offset, but keep trajectory in first position", "\n", "        ", "pose_3d", "[", ":", ",", "1", ":", "]", "-=", "pose_3d", "[", ":", ",", ":", "1", "]", "\n", "normed_pose_3d", "=", "pose_3d", "/", "1000", "\n", "normed_pose_2d", "=", "normalize_screen_coordinates", "(", "pose_2d", "[", "...", ",", ":", "2", "]", ",", "w", "=", "img_w", ",", "h", "=", "img_h", ")", "\n", "params", "[", "'intrinsic'", "]", "=", "cam_intri", "\n", "", "else", ":", "\n", "        ", "normed_pose_3d", ",", "normed_pose_2d", ",", "pixel_ratio", ",", "rescale_ratio", ",", "offset_2d", ",", "abs_root_Z", "=", "norm_to_pixel", "(", "pose_3d", "/", "1000", ",", "pose_2d", ",", "cam_intri", ",", "norm", ")", "\n", "norm_params", "=", "np", ".", "concatenate", "(", "(", "pixel_ratio", ",", "rescale_ratio", ",", "offset_2d", ",", "abs_root_Z", ")", ",", "axis", "=", "-", "1", ")", "# [T, 1, 5], len()==4", "\n", "params", "[", "'intrinsic'", "]", "=", "cam_intri", "\n", "params", "[", "'normalization_params'", "]", "=", "norm_params", "\n", "", "return", "normed_pose_3d", ",", "normed_pose_2d", ",", "params", "", "", ""]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.get_3dpw.get_3dpw": [[20, 181], ["print", "enumerate", "print", "numpy.savez_compressed", "print", "print", "len", "print", "os.join", "pickle.load", "os.join", "len", "len", "print", "range", "len", "x.split", "os.listdir", "os.listdir", "open", "print", "[].reshape", "[].transpose", "print", "numpy.zeros", "numpy.zeros", "common.dataset.pre_process.kpt_index.get_perm_idxs", "common.dataset.pre_process.kpt_index.get_perm_idxs", "numpy.zeros_like", "range", "numpy.array", "int", "int", "range", "print", "print", "indices_to_use.any", "numpy.zeros", "pose_2d.append", "pose_3d.append", "cam_intri.append", "os.join", "numpy.where", "numpy.count_nonzero", "len", "enumerate", "print", "print", "len", "os.path.join", "os.path.join", "print", "common.visualization.plot_pose3d.plot17j", "numpy.where", "len", "print", "numpy.array().any", "numpy.array().any", "common.visualization.plot_pose2d.ColorStyle", "cv2.imread", "enumerate", "print", "cv2.imshow", "numpy.concatenate", "numpy.dot", "cv2.line", "cv2.circle", "cv2.line", "cv2.circle", "numpy.array", "numpy.array", "numpy.array().any", "numpy.array().any", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.kpt_index.get_perm_idxs", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.kpt_index.get_perm_idxs", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.visualization.plot_pose3d.plot17j"], ["def", "get_3dpw", "(", "part", ")", ":", "\n", "# part can be :'train', 'validation', 'test'", "\n", "\n", "    ", "folder", "=", "'/data/ailing/Video3d/data/3dpw/'", "\n", "NUM_JOINTS", "=", "24", "\n", "VIS_THRESH", "=", "0.3", "\n", "MIN_KP", "=", "6", "\n", "\n", "sequences", "=", "[", "x", ".", "split", "(", "'.'", ")", "[", "0", "]", "for", "x", "in", "os", ".", "listdir", "(", "osp", ".", "join", "(", "folder", ",", "'sequenceFiles'", ",", "part", ")", ")", "]", "\n", "print", "(", "'action sequence:'", ",", "sequences", ",", "len", "(", "sequences", ")", ")", "\n", "imgs_path", "=", "[", "]", "\n", "pose_3d", "=", "[", "]", "\n", "pose_2d", "=", "[", "]", "\n", "cam_ex", "=", "[", "]", "\n", "cam_intri", "=", "[", "]", "\n", "\n", "# start to process 3dpw raw data", "\n", "for", "i", ",", "seq", "in", "enumerate", "(", "sequences", ")", ":", "\n", "        ", "print", "(", "'sub sequence index:'", ",", "i", ")", "\n", "data_file", "=", "osp", ".", "join", "(", "folder", ",", "'sequenceFiles'", ",", "part", ",", "seq", "+", "'.pkl'", ")", "\n", "data", "=", "pkl", ".", "load", "(", "open", "(", "data_file", ",", "'rb'", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "img_dir", "=", "osp", ".", "join", "(", "folder", ",", "'imageFiles'", ",", "seq", ")", "\n", "\n", "num_people", "=", "len", "(", "data", "[", "'poses'", "]", ")", "\n", "num_frames", "=", "len", "(", "data", "[", "'img_frame_ids'", "]", ")", "\n", "print", "(", "'open action file:'", ",", "data_file", ",", "img_dir", ",", "'has number people:'", ",", "num_people", ",", "'with frame number:'", ",", "num_frames", ")", "\n", "\n", "assert", "(", "data", "[", "'poses2d'", "]", "[", "0", "]", ".", "shape", "[", "0", "]", "==", "num_frames", ")", "\n", "\n", "for", "p_id", "in", "range", "(", "num_people", ")", ":", "\n", "            ", "print", "(", "'person number:'", ",", "p_id", ")", "\n", "j3d", "=", "data", "[", "'jointPositions'", "]", "[", "p_id", "]", ".", "reshape", "(", "-", "1", ",", "24", ",", "3", ")", "\n", "j2d", "=", "data", "[", "'poses2d'", "]", "[", "p_id", "]", ".", "transpose", "(", "0", ",", "2", ",", "1", ")", "\n", "cam_in", "=", "data", "[", "'cam_intrinsics'", "]", "#[3,3]", "\n", "cam_pose", "=", "data", "[", "'cam_poses'", "]", "#[T, 4, 4] all people in a image will share the same", "\n", "\n", "campose_valid", "=", "data", "[", "'campose_valid'", "]", "[", "p_id", "]", "#[T,]", "\n", "print", "(", "'invalid frames:'", ",", "np", ".", "where", "(", "campose_valid", "==", "0", ")", ",", "'valid frame number:'", ",", "np", ".", "count_nonzero", "(", "campose_valid", ")", ")", "\n", "new_j2d", "=", "np", ".", "zeros", "(", "(", "j2d", ".", "shape", "[", "0", "]", ",", "17", ",", "3", ")", ")", "\n", "new_j3d", "=", "np", ".", "zeros", "(", "(", "j3d", ".", "shape", "[", "0", "]", ",", "17", ",", "3", ")", ")", "\n", "\n", "# process 2d 3dpw keypoints into hm36 style", "\n", "perm_idxs", "=", "get_perm_idxs", "(", "'3dpw'", ",", "'h36m'", ")", "\n", "j2d", "=", "j2d", "[", ":", ",", "perm_idxs", "]", "\n", "new_j2d", "[", ":", ",", "0", "]", "=", "(", "j2d", "[", ":", ",", "0", "]", "+", "j2d", "[", ":", ",", "3", "]", ")", "/", "2", "\n", "new_j2d", "[", ":", ",", "1", ":", "7", "]", "=", "j2d", "[", ":", ",", "0", ":", "6", "]", "\n", "# new_j2d[:,4:7] = j2d[:,0:3]", "\n", "# new_j2d[:,1:4] = j2d[:,3:6]", "\n", "\n", "new_j2d", "[", ":", ",", "8", "]", "=", "(", "j2d", "[", ":", ",", "7", "]", "+", "j2d", "[", ":", ",", "10", "]", ")", "/", "2", "#neck", "\n", "new_j2d", "[", ":", ",", "7", "]", "=", "0.7", "*", "new_j2d", "[", ":", ",", "0", "]", "+", "0.3", "*", "new_j2d", "[", ":", ",", "8", "]", "\n", "new_j2d", "[", ":", ",", "9", "]", "=", "j2d", "[", ":", ",", "6", "]", "\n", "new_j2d", "[", ":", ",", "10", "]", "=", "2", "*", "j2d", "[", ":", ",", "6", "]", "-", "new_j2d", "[", ":", ",", "9", "]", "\n", "new_j2d", "[", ":", ",", "11", ":", "14", "]", "=", "j2d", "[", ":", ",", "10", ":", "13", "]", "\n", "new_j2d", "[", ":", ",", "14", ":", "17", "]", "=", "j2d", "[", ":", ",", "7", ":", "10", "]", "\n", "\n", "new_j2d", "[", ":", ",", ":", ",", "2", "]", "=", "new_j2d", "[", ":", ",", ":", ",", "2", "]", ">", "0.3", "# set the visibility flags", "\n", "\n", "# process 3d 3dpw_smpl joints into hm36 style", "\n", "perm_idxs", "=", "get_perm_idxs", "(", "'smpl'", ",", "'h36m'", ")", "\n", "j3d", "=", "j3d", "[", ":", ",", "perm_idxs", "]", "\n", "new_j3d", "[", ":", ",", "10", "]", "=", "2", "*", "j3d", "[", ":", ",", "9", "]", "-", "j3d", "[", ":", ",", "8", "]", "\n", "new_j3d", "[", ":", ",", ":", "10", "]", "=", "j3d", "[", ":", ",", ":", "10", "]", "\n", "new_j3d", "[", ":", ",", "11", ":", "]", "=", "j3d", "[", ":", ",", "10", ":", "]", "\n", "new_j3d", "[", ":", ",", "7", "]", "=", "0.7", "*", "new_j3d", "[", ":", ",", "0", "]", "+", "0.3", "*", "new_j3d", "[", ":", ",", "8", "]", "#update lower spine position", "\n", "#print('new pose 2d/3d shape:',new_j2d.shape, new_j3d.shape)", "\n", "\n", "# get camere params.", "\n", "cam_rt", "=", "cam_pose", "[", ":", ",", "0", ":", "3", ",", "0", ":", "3", "]", "\n", "cam_t", "=", "cam_pose", "[", ":", ",", "0", ":", "3", ",", "3", ":", "4", "]", "\n", "cam_pose3d", "=", "np", ".", "zeros_like", "(", "new_j3d", ")", "# get 3d pose under camere coordination system", "\n", "for", "j", "in", "range", "(", "len", "(", "new_j3d", ")", ")", ":", "\n", "                ", "for", "k", ",", "kpt", "in", "enumerate", "(", "new_j3d", "[", "0", "]", ")", ":", "\n", "                    ", "cam_pose3d", "[", "j", ",", "k", "]", "[", ":", ",", "np", ".", "newaxis", "]", "=", "np", ".", "dot", "(", "cam_rt", "[", "j", "]", ",", "new_j3d", "[", "j", ",", "k", "]", "[", ":", ",", "np", ".", "newaxis", "]", ")", "+", "cam_t", "[", "j", "]", "\n", "\n", "#cam_pose3d[:,8]=(cam_pose3d[:,11]+cam_pose3d[:,14])/2", "\n", "", "", "cam_pose3d", "[", ":", ",", "0", "]", "=", "(", "cam_pose3d", "[", ":", ",", "1", "]", "+", "cam_pose3d", "[", ":", ",", "4", "]", ")", "/", "2", "\n", "\n", "cam_f", "=", "np", ".", "array", "(", "[", "cam_in", "[", "0", ",", "0", "]", ",", "cam_in", "[", "1", ",", "1", "]", "]", ")", "\n", "cam_c", "=", "cam_in", "[", "0", ":", "2", ",", "2", "]", "\n", "h", "=", "int", "(", "2", "*", "cam_c", "[", "1", "]", ")", "\n", "w", "=", "int", "(", "2", "*", "cam_c", "[", "0", "]", ")", "\n", "\n", "# verify cam_pose is right:", "\n", "XX", "=", "cam_pose3d", "[", ":", ",", ":", ",", ":", "2", "]", "/", "cam_pose3d", "[", ":", ",", ":", ",", "2", ":", "]", "\n", "if", "np", ".", "array", "(", "XX", ")", ".", "any", "(", ")", ">", "1", "or", "np", ".", "array", "(", "XX", ")", ".", "any", "(", ")", "<", "-", "1", ":", "\n", "                ", "print", "(", "np", ".", "array", "(", "XX", ")", ".", "any", "(", ")", ">", "1", "or", "np", ".", "array", "(", "XX", ")", ".", "any", "(", ")", "<", "-", "1", ")", "\n", "print", "(", "'Attention for this pose!!!'", ")", "\n", "", "pose_2", "=", "cam_f", "*", "XX", "+", "cam_c", "\n", "\n", "\n", "show_2d", "=", "False", "\n", "show_3d", "=", "False", "\n", "for", "index", "in", "range", "(", "0", ",", "len", "(", "pose_2", ")", ")", ":", "\n", "#index = 350", "\n", "                ", "img_path", "=", "os", ".", "path", ".", "join", "(", "img_dir", "+", "'/image_%05d.jpg'", "%", "index", ")", "\n", "text", "=", "\"Root 3d: ({:04.2f},{:04.2f},{:04.2f})m\"", ".", "format", "(", "cam_pose3d", "[", "index", ",", "0", ",", "0", "]", ",", "cam_pose3d", "[", "index", ",", "0", ",", "1", "]", ",", "\n", "cam_pose3d", "[", "index", ",", "0", ",", "2", "]", ")", "\n", "print", "(", "text", ",", "'seq'", ",", "seq", ",", "'person_id'", ",", "p_id", ",", "'index'", ",", "index", ")", "\n", "if", "show_2d", ":", "\n", "                    ", "colorstyle", "=", "ColorStyle", "(", "color1", ",", "link_pairs1", ",", "point_color1", ")", "\n", "connections", "=", "[", "[", "0", ",", "1", "]", ",", "[", "1", ",", "2", "]", ",", "[", "2", ",", "3", "]", ",", "[", "0", ",", "4", "]", ",", "[", "4", ",", "5", "]", ",", "\n", "[", "5", ",", "6", "]", ",", "[", "0", ",", "7", "]", ",", "[", "7", ",", "8", "]", ",", "[", "8", ",", "9", "]", ",", "[", "9", ",", "10", "]", ",", "\n", "[", "8", ",", "11", "]", ",", "[", "11", ",", "12", "]", ",", "[", "12", ",", "13", "]", ",", "[", "8", ",", "14", "]", ",", "[", "14", ",", "15", "]", ",", "[", "15", ",", "16", "]", "]", "\n", "img", "=", "cv2", ".", "imread", "(", "img_path", ")", "\n", "\n", "kps", "=", "pose_2", "# projected 2d pose", "\n", "kps_gt", "=", "new_j2d", "#given 2d pose", "\n", "for", "j", ",", "c", "in", "enumerate", "(", "connections", ")", ":", "\n", "                        ", "start", "=", "kps", "[", "index", ",", "c", "[", "0", "]", "]", "\n", "end", "=", "kps", "[", "index", ",", "c", "[", "1", "]", "]", "\n", "cv2", ".", "line", "(", "img", ",", "(", "int", "(", "start", "[", "0", "]", ")", ",", "int", "(", "start", "[", "1", "]", ")", ")", ",", "(", "int", "(", "end", "[", "0", "]", ")", ",", "int", "(", "end", "[", "1", "]", ")", ")", ",", "colorstyle", ".", "line_color", "[", "j", "]", ",", "3", ")", "\n", "cv2", ".", "circle", "(", "img", ",", "(", "int", "(", "kps", "[", "index", ",", "j", ",", "0", "]", ")", ",", "int", "(", "kps", "[", "index", ",", "j", ",", "1", "]", ")", ")", ",", "4", ",", "colorstyle", ".", "ring_color", "[", "j", "]", ",", "2", ")", "\n", "\n", "start_gt", "=", "kps_gt", "[", "index", ",", "c", "[", "0", "]", "]", "\n", "end_gt", "=", "kps_gt", "[", "index", ",", "c", "[", "1", "]", "]", "\n", "cv2", ".", "line", "(", "img", ",", "(", "int", "(", "start_gt", "[", "0", "]", ")", ",", "int", "(", "start_gt", "[", "1", "]", ")", ")", ",", "(", "int", "(", "end_gt", "[", "0", "]", ")", ",", "int", "(", "end_gt", "[", "1", "]", ")", ")", ",", "(", "255", ",", "0", ",", "0", ")", ",", "3", ")", "\n", "cv2", ".", "circle", "(", "img", ",", "(", "int", "(", "kps_gt", "[", "index", ",", "j", ",", "0", "]", ")", ",", "int", "(", "kps_gt", "[", "index", ",", "j", ",", "1", "]", ")", ")", ",", "3", ",", "(", "255", ",", "100", ",", "0", ")", ",", "2", ")", "\n", "", "text", "=", "\"Root 3d: ({:04.2f}, {:04.2f}, {:04.2f})m\"", ".", "format", "(", "cam_pose3d", "[", "index", ",", "0", ",", "0", "]", ",", "cam_pose3d", "[", "index", ",", "0", ",", "1", "]", ",", "cam_pose3d", "[", "index", ",", "0", ",", "2", "]", ")", "\n", "print", "(", "part", ",", "text", ",", "'seq'", ",", "seq", ",", "'person_id'", ",", "p_id", ",", "'index'", ",", "index", ")", "\n", "# cv2.putText(img, text, (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2, cv2.LINE_AA)", "\n", "cv2", ".", "imshow", "(", "'3DPW Example'", ",", "img", ")", "\n", "\n", "# cv2.imwrite('data/3dpw/validation/{}_{}_{:05d}.jpg'.format(seq, p_id, index), img)", "\n", "# cv2.waitKey(0)", "\n", "# cv2.destroyAllWindows()", "\n", "\n", "", "", "if", "show_3d", ":", "\n", "                ", "plot17j", "(", "np", ".", "concatenate", "(", "(", "new_j3d", "[", "345", ":", "349", "]", ",", "cam_pose3d", "[", "345", ":", "349", "]", ")", ",", "axis", "=", "0", ")", ",", "None", ",", "'a'", ",", "'a'", ")", "\n", "\n", "\n", "# Filter out keypoints", "\n", "", "indices_to_use", "=", "np", ".", "where", "(", "(", "j2d", "[", ":", ",", ":", ",", "2", "]", ">", "VIS_THRESH", ")", ".", "sum", "(", "-", "1", ")", ">", "MIN_KP", ")", "[", "0", "]", "# you can change the VIS_THRESH to get pose_2d with different quality", "\n", "print", "(", "'selected indexes:'", ",", "indices_to_use", ")", "\n", "print", "(", "'selected valid frame number:'", ",", "len", "(", "indices_to_use", ")", ")", "\n", "\n", "#norm pose 3d use zero-root", "\n", "#cam_pose_norm = cam_pose3d-cam_pose3d[:,:1]", "\n", "#pose_2_norm  = normalize_screen_coordinates(pose_2, w, h)", "\n", "#pose_2_norm[indices_to_use] = normalize_screen_coordinates(new_j2d[indices_to_use,:,:2], w, h)", "\n", "#pose_3d.append(cam_pose_norm)", "\n", "#pose_2d.append(pose_2_norm)", "\n", "\n", "if", "indices_to_use", ".", "any", "(", ")", ":", "\n", "                ", "pose_2", "=", "pose_2", "[", "indices_to_use", "]", "\n", "cam_pose3d", "=", "cam_pose3d", "[", "indices_to_use", "]", "\n", "print", "(", "'final pose shape:'", ",", "pose_2", ".", "shape", ",", "cam_pose3d", ".", "shape", ")", "\n", "", "cam_int", "=", "np", ".", "zeros", "(", "(", "9", ")", ")", "\n", "cam_int", "[", ":", "2", "]", "=", "cam_f", "\n", "cam_int", "[", "2", ":", "4", "]", "=", "cam_c", "\n", "\n", "pose_2d", ".", "append", "(", "pose_2", ")", "\n", "pose_3d", ".", "append", "(", "cam_pose3d", ")", "\n", "cam_intri", ".", "append", "(", "cam_int", ")", "\n", "\n", "\n", "", "", "print", "(", "'total length:'", ",", "len", "(", "pose_3d", ")", ")", "\n", "file_name", "=", "'data/3dpw_{}'", ".", "format", "(", "part", ")", "\n", "np", ".", "savez_compressed", "(", "file_name", ",", "pose_3d", "=", "pose_3d", ",", "pose_2d", "=", "pose_2d", ",", "intrinsic", "=", "cam_intri", ")", "\n", "print", "(", "'Saved as:'", ",", "file_name", ")", "\n", "print", "(", "'Done'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.get_3dpw.load_3dpw": [[183, 213], ["numpy.load", "range", "len", "int", "int", "common.transformation.cam_utils.normalize_screen_coordinates", "common.dataset.pre_process.norm_data.norm_to_pixel", "norm_val.append", "cameras_valid.append", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.transformation.cam_utils.normalize_screen_coordinates", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.norm_data.norm_to_pixel"], ["", "def", "load_3dpw", "(", "part", ",", "norm", ")", ":", "\n", "    ", "data_3dpw_test", "=", "np", ".", "load", "(", "'data/3dpw_{}_valid.npz'", ".", "format", "(", "part", ")", ",", "allow_pickle", "=", "True", ")", "\n", "poses_valid", "=", "data_3dpw_test", "[", "'pose_3d'", "]", "\n", "poses_valid_2d", "=", "data_3dpw_test", "[", "'pose_2d'", "]", "\n", "valid_cam_in", "=", "data_3dpw_test", "[", "'intrinsic'", "]", "\n", "# normalize", "\n", "norm_val", "=", "[", "]", "\n", "cameras_valid", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "poses_valid", ")", ")", ":", "\n", "        ", "if", "norm", "==", "'base'", ":", "\n", "            ", "poses_valid", "[", "i", "]", "[", ":", ",", "1", ":", "]", "-=", "poses_valid", "[", "i", "]", "[", ":", ",", ":", "1", "]", "\n", "normed_pose_3d", "=", "poses_valid", "[", "i", "]", "\n", "c_x", ",", "c_y", "=", "valid_cam_in", "[", "i", "]", "[", "2", "]", ",", "valid_cam_in", "[", "i", "]", "[", "3", "]", "\n", "img_w", "=", "int", "(", "2", "*", "c_x", ")", "\n", "img_h", "=", "int", "(", "2", "*", "c_y", ")", "\n", "normed_pose_2d", "=", "normalize_screen_coordinates", "(", "poses_valid_2d", "[", "i", "]", "[", "...", ",", ":", "2", "]", ",", "w", "=", "img_w", ",", "h", "=", "img_h", ")", "\n", "cameras_valid", "=", "None", "\n", "", "else", ":", "\n", "            ", "normed_pose_3d", ",", "normed_pose_2d", ",", "pixel_ratio", ",", "rescale_ratio", ",", "offset_2d", ",", "abs_root_Z", "=", "norm_to_pixel", "(", "poses_valid", "[", "i", "]", ",", "\n", "poses_valid_2d", "[", "i", "]", ",", "\n", "valid_cam_in", "[", "i", "]", ",", "\n", "norm", ")", "\n", "norm_val", ".", "append", "(", "np", ".", "concatenate", "(", "(", "pixel_ratio", ",", "rescale_ratio", ",", "offset_2d", ",", "abs_root_Z", ")", ",", "axis", "=", "-", "1", ")", ")", "# [T, 1, 5], len()==4", "\n", "use_params", "=", "{", "}", "\n", "use_params", "[", "'intrinsic'", "]", "=", "valid_cam_in", "[", "i", "]", "\n", "use_params", "[", "'normalization_params'", "]", "=", "norm_val", "[", "i", "]", "\n", "cameras_valid", ".", "append", "(", "use_params", ")", "\n", "", "poses_valid_2d", "[", "i", "]", "=", "normed_pose_2d", "\n", "poses_valid", "[", "i", "]", "=", "normed_pose_3d", "\n", "", "return", "poses_valid", ",", "poses_valid_2d", ",", "cameras_valid", "", "", ""]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.get_data": [[51, 90], ["numpy.zeros", "numpy.concatenate", "print", "print", "keypoints[].keys", "print", "range", "action.split", "len", "train_pose_3d.append", "act.split"], "function", ["None"], ["def", "get_data", "(", "subjects", ",", "action_filter", ")", ":", "\n", "    ", "train_pose_3d", "=", "[", "]", "\n", "label", "=", "[", "]", "\n", "j", "=", "np", ".", "zeros", "(", "1", ")", "\n", "for", "subject", "in", "subjects", ":", "\n", "# print('subject',subject)", "\n", "        ", "for", "action", "in", "keypoints", "[", "subject", "]", ".", "keys", "(", ")", ":", "\n", "            ", "action_split", "=", "action", ".", "split", "(", "' '", ")", "[", "0", "]", "\n", "if", "action_filter", "is", "not", "None", ":", "\n", "                ", "found", "=", "False", "\n", "# distinguish the actions:'Sitting' and 'SittingDown'", "\n", "for", "act", "in", "action_filter", ":", "\n", "                    ", "act", "=", "act", ".", "split", "(", "' '", ")", "[", "0", "]", "\n", "if", "action_split", "==", "act", ":", "\n", "                        ", "found", "=", "True", "\n", "break", "\n", "", "", "if", "not", "found", ":", "\n", "                    ", "continue", "\n", "", "", "print", "(", "'training action is'", ",", "subject", ",", "action", ")", "\n", "# poses_2d = keypoints[subject][action]", "\n", "poses_3d", "=", "dataset", "[", "subject", "]", "[", "action", "]", "[", "'positions_3d'", "]", "\n", "# out = []", "\n", "for", "i", "in", "range", "(", "len", "(", "poses_3d", ")", ")", ":", "\n", "# Remove global offset, but keep trajectory in first position", "\n", "                ", "poses_3d", "[", "i", "]", "[", ":", ",", "0", "]", "=", "0", "\n", "# plot17j(poses_3d[i][500:510],'a','b')", "\n", "train_pose_3d", ".", "append", "(", "poses_3d", "[", "i", "]", ")", "\n", "# la = np.arange(0,poses_3d)", "\n", "# label.append(la)", "\n", "j", "+=", "poses_3d", "[", "i", "]", ".", "shape", "[", "0", "]", "\n", "# pose = poses_3d[0]", "\n", "", "", "", "full_pose", "=", "np", ".", "concatenate", "(", "train_pose_3d", ",", "axis", "=", "0", ")", "\n", "# full_label = np.concatenate(label, axis=0)", "\n", "N", "=", "full_pose", ".", "shape", "[", "0", "]", "\n", "print", "(", "'Total number:'", ",", "N", ")", "\n", "part_pose", "=", "full_pose", "[", ":", ":", "10", "]", "\n", "print", "(", "'After filter, training data:'", ",", "part_pose", ".", "shape", ")", "\n", "\n", "return", "part_pose", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.plot_embedding": [[92, 106], ["matplotlib.figure", "matplotlib.subplot", "range", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.title", "numpy.min", "numpy.max", "matplotlib.scatter", "matplotlib.cm.Set1", "len"], "function", ["None"], ["", "def", "plot_embedding", "(", "data", ",", "label", ",", "title", ")", ":", "\n", "    ", "x_min", ",", "x_max", "=", "np", ".", "min", "(", "data", ",", "0", ")", ",", "np", ".", "max", "(", "data", ",", "0", ")", "\n", "data", "=", "(", "data", "-", "x_min", ")", "/", "(", "x_max", "-", "x_min", ")", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "plt", ".", "subplot", "(", "111", ")", "\n", "for", "i", "in", "range", "(", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "# plt.text(data[i, 0], data[i, 1], str(label[i]),", "\n", "#          color=plt.cm.Set1(label[i] / len(label)),", "\n", "#          fontdict={'weight': 'bold', 'size': 12})", "\n", "        ", "plt", ".", "scatter", "(", "data", "[", "i", ",", "0", "]", ",", "data", "[", "i", ",", "1", "]", ",", "20", ",", "plt", ".", "cm", ".", "Set1", "(", "label", "[", "i", "]", "/", "len", "(", "label", ")", ")", ")", "\n", "", "plt", ".", "xticks", "(", "[", "]", ")", "\n", "plt", ".", "yticks", "(", "[", "]", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.tsne": [[108, 118], ["filter_hm36.get_data", "print", "sklearn.manifold.TSNE", "time.time", "sklearn.manifold.TSNE.fit_transform", "filter_hm36.plot_embedding", "matplotlib.show", "numpy.array", "numpy.array", "time.time"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.get_data", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.plot_embedding"], ["", "def", "tsne", "(", ")", ":", "\n", "    ", "data", ",", "label", ",", "n_samples", ",", "n_features", "=", "get_data", "(", ")", "\n", "print", "(", "'Computing t-SNE embedding'", ")", "\n", "tsne", "=", "TSNE", "(", "n_components", "=", "2", ",", "init", "=", "'pca'", ",", "random_state", "=", "0", ")", "\n", "t0", "=", "time", "(", ")", "\n", "result", "=", "tsne", ".", "fit_transform", "(", "data", ")", "\n", "fig", "=", "plot_embedding", "(", "np", ".", "array", "(", "result", ")", ",", "np", ".", "array", "(", "label", ")", ",", "\n", "'t-SNE embedding of the S9/S11 test set (time %.2fs)'", "\n", "%", "(", "time", "(", ")", "-", "t0", ")", ")", "\n", "plt", ".", "show", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.get_index": [[120, 167], ["numpy.concatenate", "numpy.argsort", "np.concatenate.tolist", "print", "len", "print", "int", "print", "numpy.set_printoptions", "sorted", "print", "dataset[].keys", "len", "range", "len", "train_pose_3d.append", "numpy.mean", "numpy.repeat", "numpy.linalg.norm", "numpy.mean"], "function", ["None"], ["", "def", "get_index", "(", "subjects", ",", "ra", ")", ":", "\n", "    ", "\"\"\"\n    Usage: sort input poses by the distance to [mean pose] from train data\n           sorted from large to small\n    :param subjects: e.g. Test set\n    :return: Reversed Index in the Test set\n    \"\"\"", "\n", "train_pose_3d", "=", "[", "]", "\n", "for", "subject", "in", "subjects", ":", "\n", "# print('subject',subject)", "\n", "        ", "for", "action", "in", "dataset", "[", "subject", "]", ".", "keys", "(", ")", ":", "\n", "# print('action',action)", "\n", "# poses_2d = keypoints[subject][action]", "\n", "            ", "poses_3d", "=", "dataset", "[", "subject", "]", "[", "action", "]", "[", "'positions_3d'", "]", "\n", "# out = []", "\n", "for", "i", "in", "range", "(", "len", "(", "poses_3d", ")", ")", ":", "\n", "# Remove global offset, but keep trajectory in first position", "\n", "                ", "poses_3d", "[", "i", "]", "-=", "poses_3d", "[", "i", "]", "[", ":", ",", ":", "1", "]", "\n", "if", "cal_mean", ":", "\n", "                    ", "mean_3d_1", "=", "np", ".", "mean", "(", "poses_3d", "[", "i", "]", ",", "axis", "=", "0", ")", "\n", "", "elif", "cal_distance", ":", "\n", "                    ", "ext_mean_pose", "=", "np", ".", "repeat", "(", "mean_pose", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ",", "poses_3d", "[", "i", "]", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "assert", "ext_mean_pose", ".", "shape", "==", "poses_3d", "[", "i", "]", ".", "shape", "\n", "pose_dis", "=", "np", ".", "linalg", ".", "norm", "(", "(", "ext_mean_pose", "-", "poses_3d", "[", "i", "]", ")", ",", "axis", "=", "-", "1", ")", "\n", "pose_dis_mean", "=", "np", ".", "mean", "(", "pose_dis", ",", "axis", "=", "-", "1", ")", "\n", "# out.append(pose_dis_mean)", "\n", "", "train_pose_3d", ".", "append", "(", "pose_dis_mean", ")", "\n", "# plot17j(out, subject, action, show_animation=False)", "\n", "\n", "", "", "", "full_pose", "=", "np", ".", "concatenate", "(", "train_pose_3d", ",", "axis", "=", "0", ")", "\n", "# Sorted from large to small distance", "\n", "sorted_index", "=", "np", ".", "argsort", "(", "-", "full_pose", ")", "\n", "full_pose", ".", "tolist", "(", ")", "\n", "# sorted_dis = sorted(full_pose, reverse=True)", "\n", "# print('From large to small value:',sorted_dis)", "\n", "print", "(", "'index'", ",", "sorted_index", ")", "\n", "num", "=", "len", "(", "full_pose", ")", "\n", "print", "(", "'Total pose:'", ",", "num", ")", "\n", "ratio", "=", "ra", "\n", "pick_num", "=", "int", "(", "ratio", "*", "num", ")", "\n", "print", "(", "'Picked number:'", ",", "pick_num", ")", "\n", "pick_index", "=", "sorted_index", "[", ":", "pick_num", "]", "\n", "np", ".", "set_printoptions", "(", "threshold", "=", "np", ".", "inf", ")", "\n", "# print(pick_index)", "\n", "rerank", "=", "sorted", "(", "pick_index", ")", "\n", "print", "(", "'rerank'", ",", "len", "(", "rerank", ")", ")", "\n", "return", "rerank", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.find_mean": [[169, 186], ["print", "numpy.zeros", "range", "print", "len", "print", "numpy.mean", "print", "numpy.mean"], "function", ["None"], ["", "def", "find_mean", "(", "train_pose_3d", ")", ":", "\n", "    ", "print", "(", "'----------------Finish fetching training data-------------'", ")", "\n", "N", "=", "0", "\n", "sum_3d", "=", "np", ".", "zeros", "(", "[", "17", ",", "3", "]", ")", "\n", "# Calculte mean pose", "\n", "for", "i", "in", "range", "(", "len", "(", "train_pose_3d", ")", ")", ":", "\n", "# pose.shape = [T,17,3]", "\n", "        ", "N", "+=", "train_pose_3d", "[", "i", "]", ".", "shape", "[", "0", "]", "\n", "print", "(", "'N is :'", ",", "N", ")", "\n", "train_pose_3d", "[", "i", "]", "[", ":", ",", "0", "]", "=", "0", "\n", "mean_3d", "=", "np", ".", "mean", "(", "train_pose_3d", "[", "i", "]", ",", "axis", "=", "0", ")", "\n", "print", "(", "'mm'", ",", "mean_3d", ".", "shape", ",", "mean_3d", ")", "\n", "sum_3d", "+=", "mean_3d", "*", "train_pose_3d", "[", "i", "]", ".", "shape", "[", "0", "]", "\n", "\n", "", "mean1", "=", "sum_3d", "/", "N", "\n", "# plot17j([mean], 'mean', 'mean')", "\n", "print", "(", "'Training set mean 3d pose is:'", ",", "np", ".", "mean", "(", "mean1", ",", "axis", "=", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.split_data": [[188, 206], ["print", "len", "len", "print", "out.append", "out.append", "len"], "function", ["None"], ["", "def", "split_data", "(", "index", ")", ":", "\n", "    ", "\"\"\"\n    Partition index into a list, make one more dimension\n    :param index: a so long list\n    :return out: splited index, type: List\n    \"\"\"", "\n", "out", "=", "[", "]", "\n", "j", "=", "0", "\n", "for", "i", "in", "index", ":", "\n", "        ", "if", "i", "<", "len", "(", "index", ")", "-", "1", ":", "\n", "            ", "if", "index", "[", "i", "+", "1", "]", "-", "index", "[", "i", "]", ">", "5", ":", "\n", "                ", "print", "(", "'Split index into smaller groups:'", ",", "j", ",", "i", ")", "\n", "out", ".", "append", "(", "index", "[", "j", ":", "(", "i", "+", "1", ")", "]", ")", "\n", "j", "=", "i", "+", "1", "\n", "", "", "elif", "i", "==", "len", "(", "index", ")", "-", "1", ":", "\n", "            ", "out", ".", "append", "(", "index", "[", "j", ":", "]", ")", "\n", "", "", "print", "(", "'Split group:'", ",", "len", "(", "out", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.svd": [[208, 217], ["numpy.linalg.svd", "numpy.dot", "numpy.diag"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.svd"], ["", "def", "svd", "(", "X", ")", ":", "\n", "# Data matrix X, X doesn't need to be 0-centered", "\n", "# n, m = X.shape", "\n", "# Compute full SVD", "\n", "    ", "U", ",", "Sigma", ",", "Vh", "=", "np", ".", "linalg", ".", "svd", "(", "X", ",", "full_matrices", "=", "False", ",", "# It's not necessary to compute the full matrix of U or V", "\n", "compute_uv", "=", "True", ")", "\n", "# Transform X with SVD components", "\n", "X_svd", "=", "np", ".", "dot", "(", "U", ",", "np", ".", "diag", "(", "Sigma", ")", ")", "\n", "return", "X_svd", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.cal_mean_var": [[219, 252], ["numpy.concatenate", "print", "numpy.var", "numpy.mean", "print", "print", "keypoints[].keys", "range", "action.split", "len", "numpy.linalg.norm", "train_pose_3d.append", "act.split"], "function", ["None"], ["", "def", "cal_mean_var", "(", "action_filter", ")", ":", "\n", "#    get_data()", "\n", "    ", "train_pose_3d", "=", "[", "]", "\n", "for", "subject", "in", "subjects", ":", "\n", "        ", "for", "action", "in", "keypoints", "[", "subject", "]", ".", "keys", "(", ")", ":", "\n", "            ", "action_split", "=", "action", ".", "split", "(", "' '", ")", "[", "0", "]", "\n", "if", "action_filter", "is", "not", "None", ":", "\n", "                ", "found", "=", "False", "\n", "# distinguish the actions:'Sitting' and 'SittingDown'", "\n", "for", "act", "in", "action_filter", ":", "\n", "                    ", "act", "=", "act", ".", "split", "(", "' '", ")", "[", "0", "]", "\n", "if", "action_split", "==", "act", ":", "\n", "                        ", "found", "=", "True", "\n", "break", "\n", "", "", "if", "not", "found", ":", "\n", "                    ", "continue", "\n", "# print(action)", "\n", "", "", "poses_3d", "=", "dataset", "[", "subject", "]", "[", "action", "]", "[", "'positions_3d'", "]", "\n", "out", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "poses_3d", ")", ")", ":", "\n", "                ", "poses_3d", "[", "i", "]", "[", ":", ",", "0", "]", "=", "0", "\n", "dis", "=", "np", ".", "linalg", ".", "norm", "(", "poses_3d", "[", "i", "]", ",", "axis", "=", "-", "1", ")", "\n", "train_pose_3d", ".", "append", "(", "dis", ")", "\n", "# NUm = poses_3d[i].shape[0]", "\n", "# in_var = np.var((poses_3d[i]),axis=0)", "\n", "# joint_var = np.mean(in_var, axis=-1)", "\n", "# train_pose_3d.append(joint_var)", "\n", "", "", "", "full_pose", "=", "np", ".", "concatenate", "(", "train_pose_3d", ",", "axis", "=", "0", ")", "\n", "print", "(", "full_pose", ".", "shape", ")", "\n", "var_train", "=", "np", ".", "var", "(", "full_pose", ",", "axis", "=", "0", ")", "\n", "mean_train", "=", "np", ".", "mean", "(", "full_pose", ",", "axis", "=", "0", ")", "\n", "print", "(", "mean_train", ")", "\n", "print", "(", "var_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.pick_mean_var": [[259, 264], ["args.all_action.split", "print", "filter_hm36.cal_mean_var"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.cal_mean_var"], ["", "def", "pick_mean_var", "(", ")", ":", "\n", "    ", "action_all", "=", "args", ".", "all_action", ".", "split", "(", "','", ")", "\n", "for", "action", "in", "action_all", ":", "\n", "        ", "print", "(", "'This action:'", ",", "action", ")", "\n", "cal_mean_var", "(", "[", "action", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.un_frequent": [[266, 319], ["filter_hm36.get_data", "torch.from_numpy", "print", "numpy.array", "print", "print", "numpy.savez_compressed", "print", "numpy.argsort", "np.array.tolist", "len", "int", "print", "numpy.set_printoptions", "sorted", "print", "dataset[].keys", "len", "type", "len", "print", "range", "len", "range", "time.time", "torch.from_numpy().unsqueeze", "torch.norm", "torch.mean", "dis_.cpu().numpy.cpu().numpy", "train_pose_3d.append", "print", "torch.from_numpy", "torch.from_numpy().unsqueeze.cuda", "torch.from_numpy.cuda", "dis_.cpu().numpy.cpu", "time.time"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.get_data"], ["", "", "def", "un_frequent", "(", "subjects", ",", "ra", ")", ":", "\n", "    ", "train_pose", "=", "get_data", "(", "subjects_train", ",", ")", "\n", "train_pose", "=", "torch", ".", "from_numpy", "(", "train_pose", ")", "\n", "print", "(", "train_pose", ".", "shape", ")", "\n", "train_pose_3d", "=", "[", "]", "\n", "for", "subject", "in", "subjects", ":", "\n", "        ", "for", "action", "in", "dataset", "[", "subject", "]", ".", "keys", "(", ")", ":", "\n", "            ", "print", "(", "'action'", ",", "action", ")", "\n", "#     # poses_2d = keypoints[subject][action]", "\n", "poses_3d", "=", "dataset", "[", "subject", "]", "[", "action", "]", "[", "'positions_3d'", "]", "\n", "#     #out = []", "\n", "for", "i", "in", "range", "(", "len", "(", "poses_3d", ")", ")", ":", "\n", "# Remove global offset, but keep trajectory in first position", "\n", "                ", "poses_3d", "[", "i", "]", "[", ":", ",", "0", "]", "=", "0", "\n", "for", "k", "in", "range", "(", "poses_3d", "[", "i", "]", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "time_now", "=", "time", "(", ")", "\n", "single_3d", "=", "poses_3d", "[", "i", "]", "[", "k", "]", "\n", "single_ext", "=", "torch", ".", "from_numpy", "(", "single_3d", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "dis", "=", "torch", ".", "norm", "(", "(", "single_ext", ".", "cuda", "(", ")", "-", "train_pose", ".", "cuda", "(", ")", ")", ",", "dim", "=", "-", "1", ")", "\n", "dis_", "=", "torch", ".", "mean", "(", "dis", ")", "\n", "dis_", "=", "dis_", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# dis = np.mean(np.linalg.norm((train_pose-single_ext),axis=-1))", "\n", "train_pose_3d", ".", "append", "(", "dis_", ")", "\n", "# print(train_pose_3d)", "\n", "print", "(", "'Each frame cost:'", ",", "time", "(", ")", "-", "time_now", ")", "\n", "# la = np.repeat(j[np.newaxis, :], poses_3d[i].shape[0], axis=0)", "\n", "# label.append(la)", "\n", "# j += 1", "\n", "# pose = poses_3d[0]", "\n", "# test_distance = torch.cat(train_pose_3d, dim=0)", "\n", "", "", "", "", "test_distance", "=", "np", ".", "array", "(", "train_pose_3d", ")", "\n", "print", "(", "'test'", ",", "len", "(", "test_distance", ")", ",", "test_distance", ",", "type", "(", "test_distance", ")", ")", "\n", "print", "(", "'Saving First...'", ")", "\n", "file_name", "=", "'data/unfrequent_test_distance'", "\n", "np", ".", "savez_compressed", "(", "file_name", ",", "pose_3d", "=", "test_distance", ")", "\n", "print", "(", "'Done.'", ")", "\n", "# full_label = np.concatenate(label, axis=0)", "\n", "# Sorted from large to small distance", "\n", "sorted_index", "=", "np", ".", "argsort", "(", "-", "test_distance", ")", "\n", "test_distance", ".", "tolist", "(", ")", "\n", "# sorted_dis = sorted(full_pose, reverse=True)", "\n", "# print('From large to small value:',sorted_dis)", "\n", "# print('index',sorted_index)", "\n", "num", "=", "len", "(", "test_distance", ")", "\n", "# print('Total pose:',num)", "\n", "ratio", "=", "ra", "\n", "pick_num", "=", "int", "(", "ratio", "*", "num", ")", "\n", "print", "(", "'Picked number:'", ",", "pick_num", ")", "\n", "pick_index", "=", "sorted_index", "[", ":", "pick_num", "]", "\n", "np", ".", "set_printoptions", "(", "threshold", "=", "np", ".", "inf", ")", "\n", "rerank", "=", "sorted", "(", "pick_index", ")", "\n", "print", "(", "'rerank number'", ",", "len", "(", "rerank", ")", ",", "rerank", ")", "\n", "return", "rerank", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.get_distance": [[321, 340], ["numpy.load", "print", "numpy.argsort", "test_distance.tolist", "len", "int", "print", "print"], "function", ["None"], ["", "def", "get_distance", "(", "ra", ")", ":", "\n", "    ", "input_dis", "=", "np", ".", "load", "(", "'data/unfrequent_test_distance.npz'", ",", "allow_pickle", "=", "True", ")", "\n", "test_distance", "=", "input_dis", "[", "'pose_3d'", "]", "\n", "print", "(", "test_distance", ".", "shape", ")", "\n", "sorted_index", "=", "np", ".", "argsort", "(", "-", "test_distance", ")", "\n", "test_distance", ".", "tolist", "(", ")", "\n", "# sorted_dis = sorted(full_pose, reverse=True)", "\n", "# print('From large to small value:',sorted_dis)", "\n", "# print('index',sorted_index)", "\n", "num", "=", "len", "(", "test_distance", ")", "\n", "# print('Total pose:',num)", "\n", "ratio", "=", "ra", "\n", "pick_num", "=", "int", "(", "ratio", "*", "num", ")", "\n", "print", "(", "'Picked number:'", ",", "pick_num", ")", "\n", "pick_index", "=", "sorted_index", "[", ":", "pick_num", "]", "\n", "# np.set_printoptions(threshold=np.inf)", "\n", "# rerank = sorted(pick_index)", "\n", "print", "(", "'rerank number'", ",", "pick_index", ")", "\n", "return", "pick_index", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.final_filter": [[342, 371], ["numpy.concatenate", "numpy.concatenate", "filter_hm36.get_distance", "sorted_pose.append", "sorted_pose_2d.append", "print", "numpy.savez_compressed", "print", "dataset[].keys", "range", "len", "full_out.append", "full_out_2d.append"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.get_distance"], ["", "def", "final_filter", "(", "subjects", ")", ":", "\n", "    ", "full_out", "=", "[", "]", "\n", "full_out_2d", "=", "[", "]", "\n", "ratio", "=", "1", "\n", "for", "subject", "in", "subjects", ":", "\n", "        ", "for", "action", "in", "dataset", "[", "subject", "]", ".", "keys", "(", ")", ":", "\n", "            ", "poses_3d", "=", "dataset", "[", "subject", "]", "[", "action", "]", "[", "'positions_3d'", "]", "\n", "poses_2d", "=", "keypoints", "[", "subject", "]", "[", "action", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "poses_3d", ")", ")", ":", "\n", "                ", "full_out", ".", "append", "(", "poses_3d", "[", "i", "]", ")", "\n", "full_out_2d", ".", "append", "(", "poses_2d", "[", "i", "]", ")", "\n", "", "", "", "full_pose", "=", "np", ".", "concatenate", "(", "full_out", ",", "axis", "=", "0", ")", "\n", "full_pose_2d", "=", "np", ".", "concatenate", "(", "full_out_2d", ",", "axis", "=", "0", ")", "\n", "# sorted_index = get_index(subjects, ra=ratio)", "\n", "# sorted_index = un_frequent(subjects, ra=ratio)", "\n", "sorted_index", "=", "get_distance", "(", "ratio", ")", "\n", "# split_index = split_data(sorted_index)", "\n", "sorted_pose", "=", "[", "]", "\n", "sorted_pose_2d", "=", "[", "]", "\n", "# for i, v in enumerate(split_index):", "\n", "# print('Each test group length:',len(v))", "\n", "sorted_pose", ".", "append", "(", "full_pose", "[", "sorted_index", "]", ")", "\n", "sorted_pose_2d", ".", "append", "(", "full_pose_2d", "[", "sorted_index", "]", ")", "\n", "# plot17j(sorted_pose[400:420], 'dis','large')", "\n", "\n", "print", "(", "'Saving...'", ")", "\n", "file_name", "=", "'data/unfrequent_{}_test_gt'", ".", "format", "(", "ratio", ")", "\n", "np", ".", "savez_compressed", "(", "file_name", ",", "pose_3d", "=", "sorted_pose", ",", "pose_2d", "=", "sorted_pose_2d", ")", "\n", "print", "(", "'Done.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.sort_K": [[373, 382], ["dist.cpu().numpy.cpu().numpy", "numpy.argsort", "numpy.mean", "dist.cpu().numpy.cpu"], "function", ["None"], ["", "def", "sort_K", "(", "dist", ",", "K", ")", ":", "\n", "# Sort from small to large distance", "\n", "    ", "dist", "=", "dist", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "sorted_index", "=", "np", ".", "argsort", "(", "dist", ")", "\n", "\n", "pick_index", "=", "sorted_index", "[", ":", "K", "]", "\n", "pick_dis", "=", "dist", "[", "pick_index", "]", "\n", "mean_dis", "=", "np", ".", "mean", "(", "pick_dis", ")", "\n", "return", "mean_dis", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.pose_similar": [[384, 390], ["torch.Tensor().cuda", "torch.exp", "torch.mean", "torch.Tensor"], "function", ["None"], ["", "def", "pose_similar", "(", "dist", ",", "sigma", ")", ":", "\n", "    ", "theta", "=", "torch", ".", "Tensor", "(", "[", "sigma", "]", ")", ".", "cuda", "(", ")", "\n", "ps", "=", "torch", ".", "exp", "(", "-", "dist", "/", "theta", ")", "\n", "ps_mean", "=", "torch", ".", "mean", "(", "ps", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "# print(ps_mean.shape,ps_mean)", "\n", "return", "ps_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.filter_Kmin": [[392, 503], ["filter_hm36.get_data", "torch.from_numpy", "print", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "print", "print", "numpy.savez_compressed", "print", "print", "keypoints[].keys", "len", "time.time", "range", "print", "print", "action.split", "len", "range", "time.time", "act.split", "torch.from_numpy().unsqueeze", "torch.norm", "filter_hm36.pose_similar", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "train_pose_3d.append", "part1_dis.append", "part2_dis.append", "part3_dis.append", "part4_dis.append", "part5_dis.append", "filter_hm36.sort_K", "filter_hm36.sort_K", "filter_hm36.sort_K", "filter_hm36.sort_K", "filter_hm36.sort_K", "filter_hm36.sort_K", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "torch.from_numpy", "torch.from_numpy().unsqueeze.cuda", "torch.from_numpy.cuda", "torch.mean.cpu", "torch.mean.cpu", "torch.mean.cpu", "torch.mean.cpu", "torch.mean.cpu", "torch.mean.cpu"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.get_data", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.pose_similar", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.sort_K", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.sort_K", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.sort_K", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.sort_K", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.sort_K", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.sort_K"], ["", "def", "filter_Kmin", "(", "get_KNN", ",", "subjects", ",", "action_filter", ",", "sig", ")", ":", "\n", "# Filter K nearest pose of training data as the distance (represent the similarity)", "\n", "    ", "train_pose", "=", "get_data", "(", "subjects_train", ",", "all_action", ")", "\n", "train_pose", "=", "torch", ".", "from_numpy", "(", "train_pose", ")", "\n", "print", "(", "train_pose", ".", "shape", ")", "\n", "train_pose_3d", "=", "[", "]", "\n", "part1_dis", "=", "[", "]", "\n", "part2_dis", "=", "[", "]", "\n", "part3_dis", "=", "[", "]", "\n", "part4_dis", "=", "[", "]", "\n", "part5_dis", "=", "[", "]", "\n", "minu", "=", "[", "]", "\n", "train_action", "=", "action_train", "\n", "for", "subject", "in", "subjects", ":", "\n", "# print('subject',subject)", "\n", "        ", "for", "action", "in", "keypoints", "[", "subject", "]", ".", "keys", "(", ")", ":", "\n", "            ", "time_now", "=", "time", "(", ")", "\n", "n", "=", "0", "\n", "mean_min", "=", "0", "\n", "mean_pose", "=", "0", "\n", "mean_part", "=", "0", "\n", "action_split", "=", "action", ".", "split", "(", "' '", ")", "[", "0", "]", "\n", "if", "action_filter", "is", "not", "None", ":", "\n", "                ", "found", "=", "False", "\n", "# distinguish the actions:'Sitting' and 'SittingDown'", "\n", "for", "act", "in", "action_filter", ":", "\n", "                    ", "act", "=", "act", ".", "split", "(", "' '", ")", "[", "0", "]", "\n", "if", "action_split", "==", "act", ":", "\n", "                        ", "found", "=", "True", "\n", "break", "\n", "", "", "if", "not", "found", ":", "\n", "                    ", "continue", "\n", "# print('test action is', subject, action)", "\n", "", "", "poses_3d", "=", "dataset", "[", "subject", "]", "[", "action", "]", "[", "'positions_3d'", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "poses_3d", ")", ")", ":", "\n", "# Remove global offset, but keep trajectory in first position", "\n", "                ", "poses_3d", "[", "i", "]", "[", ":", ",", "0", "]", "=", "0", "\n", "for", "k", "in", "range", "(", "poses_3d", "[", "i", "]", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "if", "k", "%", "5", "==", "0", ":", "\n", "                        ", "n", "+=", "1", "\n", "single_3d", "=", "poses_3d", "[", "i", "]", "[", "k", "]", "\n", "single_ext", "=", "torch", ".", "from_numpy", "(", "single_3d", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "# For all joints mean distance:", "\n", "pose_dis1", "=", "torch", ".", "norm", "(", "(", "single_ext", ".", "cuda", "(", ")", "-", "train_pose", ".", "cuda", "(", ")", ")", ",", "dim", "=", "-", "1", ")", "# [N, 17]", "\n", "# First calculate the joint similarity by Gaussian distribution normalize the joint distance.", "\n", "pose_dis", "=", "pose_similar", "(", "pose_dis1", ",", "sigma", "=", "sig", ")", "\n", "\n", "all_dis", "=", "torch", ".", "mean", "(", "pose_dis", ",", "dim", "=", "-", "1", ")", "# [N,]", "\n", "# For part joints mean distance:", "\n", "part1", "=", "torch", ".", "mean", "(", "pose_dis", "[", ":", ",", "0", ":", "4", "]", ",", "dim", "=", "-", "1", ")", "\n", "part2", "=", "torch", ".", "mean", "(", "pose_dis", "[", ":", ",", "4", ":", "7", "]", ",", "dim", "=", "-", "1", ")", "\n", "part3", "=", "torch", ".", "mean", "(", "pose_dis", "[", ":", ",", "7", ":", "11", "]", ",", "dim", "=", "-", "1", ")", "\n", "part4", "=", "torch", ".", "mean", "(", "pose_dis", "[", ":", ",", "11", ":", "14", "]", ",", "dim", "=", "-", "1", ")", "\n", "part5", "=", "torch", ".", "mean", "(", "pose_dis", "[", ":", ",", "14", ":", "17", "]", ",", "dim", "=", "-", "1", ")", "\n", "# Get the K Nearest mean distance", "\n", "if", "get_KNN", ":", "\n", "                            ", "k_", "=", "5", "\n", "pose_min", "=", "sort_K", "(", "all_dis", ",", "K", "=", "k_", ")", "\n", "part1_min", "=", "sort_K", "(", "part1", ",", "K", "=", "k_", ")", "\n", "part2_min", "=", "sort_K", "(", "part2", ",", "K", "=", "k_", ")", "\n", "part3_min", "=", "sort_K", "(", "part3", ",", "K", "=", "k_", ")", "\n", "part4_min", "=", "sort_K", "(", "part4", ",", "K", "=", "k_", ")", "\n", "part5_min", "=", "sort_K", "(", "part5", ",", "K", "=", "k_", ")", "\n", "\n", "# Get Mean pose similarity", "\n", "# else:", "\n", "#     pose_min = pose_similar(all_dis, sigma)", "\n", "#     part1_min = pose_similar(part1, sigma)", "\n", "#     part2_min = pose_similar(part2, sigma)", "\n", "#     part3_min = pose_similar(part3, sigma)", "\n", "#     part4_min = pose_similar(part4, sigma)", "\n", "#     part5_min = pose_similar(part5, sigma)", "\n", "#", "\n", "# minus = pose_min - (4*part1_min+3*part2_min+4*part3_min+3*part4_min+3*part5_min)/17", "\n", "# mean_min += minus", "\n", "# mean_pose += pose_min", "\n", "# mean_part += (part1_min + part2_min + part3_min + part4_min +part5_min)/5", "\n", "# print(part1_min ,part2_min ,part3_min ,part4_min,part5_min,'mean',mean_part/n)", "\n", "# train_pose_3d.append(pose_min)", "\n", "# part1_dis.append(part1_min)", "\n", "# part2_dis.append(part2_min)", "\n", "# part3_dis.append(part3_min)", "\n", "# part4_dis.append(part4_min)", "\n", "# part5_dis.append(part5_min)", "\n", "# minu.append(minus)", "\n", "", "train_pose_3d", ".", "append", "(", "np", ".", "array", "(", "all_dis", ".", "cpu", "(", ")", ")", ")", "\n", "part1_dis", ".", "append", "(", "np", ".", "array", "(", "part1", ".", "cpu", "(", ")", ")", ")", "\n", "part2_dis", ".", "append", "(", "np", ".", "array", "(", "part2", ".", "cpu", "(", ")", ")", ")", "\n", "part3_dis", ".", "append", "(", "np", ".", "array", "(", "part3", ".", "cpu", "(", ")", ")", ")", "\n", "part4_dis", ".", "append", "(", "np", ".", "array", "(", "part4", ".", "cpu", "(", ")", ")", ")", "\n", "part5_dis", ".", "append", "(", "np", ".", "array", "(", "part5", ".", "cpu", "(", ")", ")", ")", "\n", "", "", "", "print", "(", "'N is'", ",", "n", ")", "\n", "# print('Subject Action',subject, action, 'Each mean whole pose distance:',mean_pose/n*100, 'mean part',mean_part/n*100, 'mean more',mean_min/n*100)", "\n", "print", "(", "'One calculation cost:'", ",", "time", "(", ")", "-", "time_now", ")", "\n", "", "", "test_distance", "=", "np", ".", "array", "(", "train_pose_3d", ")", "\n", "p1_dist", "=", "np", ".", "array", "(", "part1_dis", ")", "\n", "p2_dist", "=", "np", ".", "array", "(", "part2_dis", ")", "\n", "p3_dist", "=", "np", ".", "array", "(", "part3_dis", ")", "\n", "p4_dist", "=", "np", ".", "array", "(", "part4_dis", ")", "\n", "p5_dist", "=", "np", ".", "array", "(", "part5_dis", ")", "\n", "# minu_all = np.array(minu)", "\n", "print", "(", "'test'", ",", "len", "(", "test_distance", ")", ")", "\n", "print", "(", "'Saving First...'", ")", "\n", "# file_name = 'data/K{}_test_5f_{}_distance'.format(k_,train_action)", "\n", "# np.savez_compressed(file_name, pose_3d_dist=test_distance, part1_dist=p1_dist, part2_dist=p2_dist,", "\n", "#                     part3_dist=p3_dist, part4_dist=p4_dist, part5_dist=p5_dist)", "\n", "file_name", "=", "'data/S{}_rare_testset'", ".", "format", "(", "sig", ")", "\n", "np", ".", "savez_compressed", "(", "file_name", ",", "pose_3d_dist", "=", "test_distance", ",", "part1_dist", "=", "p1_dist", ",", "part2_dist", "=", "p2_dist", ",", "\n", "part3_dist", "=", "p3_dist", ",", "part4_dist", "=", "p4_dist", ",", "part5_dist", "=", "p5_dist", ")", "\n", "print", "(", "'Saved as:'", ",", "file_name", ")", "\n", "print", "(", "'Done.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.fetch_data": [[505, 514], ["numpy.load"], "function", ["None"], ["", "def", "fetch_data", "(", "k", ",", "sig", ")", ":", "\n", "    ", "input_dis", "=", "np", ".", "load", "(", "'data/S{}_rare_testset.npz'", ".", "format", "(", "sig", ")", ",", "allow_pickle", "=", "True", ")", "\n", "test_distance", "=", "input_dis", "[", "'pose_3d_dist'", "]", "\n", "p1", "=", "input_dis", "[", "'part1_dist'", "]", "\n", "p2", "=", "input_dis", "[", "'part2_dist'", "]", "\n", "p3", "=", "input_dis", "[", "'part3_dist'", "]", "\n", "p4", "=", "input_dis", "[", "'part4_dist'", "]", "\n", "p5", "=", "input_dis", "[", "'part5_dist'", "]", "\n", "return", "test_distance", ",", "p1", ",", "p2", ",", "p3", ",", "p4", ",", "p5", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.sort_testset": [[516, 526], ["numpy.argsort", "int", "print", "print"], "function", ["None"], ["", "def", "sort_testset", "(", "test_distance", ",", "ra", ")", ":", "\n", "# Sort from large to small distance in the test set", "\n", "    ", "sorted_index", "=", "np", ".", "argsort", "(", "test_distance", "[", ":", ",", "0", "]", ")", "\n", "num", "=", "test_distance", ".", "shape", "[", "0", "]", "\n", "ratio", "=", "ra", "\n", "pick_num", "=", "int", "(", "ratio", "*", "num", ")", "\n", "print", "(", "'Picked number:'", ",", "pick_num", ")", "\n", "pick_index", "=", "sorted_index", "[", ":", "pick_num", "]", "\n", "print", "(", "'rerank number'", ",", "pick_index", ")", "\n", "return", "pick_index", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.final_KN": [[528, 559], ["filter_hm36.filter_Kmin", "numpy.concatenate", "numpy.concatenate", "print", "filter_hm36.fetch_data", "filter_hm36.sort_testset", "sorted_pose.append", "sorted_pose_2d.append", "print", "numpy.savez_compressed", "print", "dataset[].keys", "print", "range", "len", "full_out.append", "full_out_2d.append"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.filter_Kmin", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.fetch_data", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.sort_testset"], ["", "def", "final_KN", "(", "subjects", ",", "sig", ")", ":", "\n", "    ", "full_out", "=", "[", "]", "\n", "full_out_2d", "=", "[", "]", "\n", "ratio", "=", "1", "\n", "k_", "=", "1", "\n", "filter_Kmin", "(", "False", ",", "subjects_test", ",", "all_action", ",", "sig", ")", "\n", "for", "subject", "in", "subjects", ":", "\n", "        ", "for", "action", "in", "dataset", "[", "subject", "]", ".", "keys", "(", ")", ":", "\n", "            ", "print", "(", "action", ")", "\n", "poses_3d", "=", "dataset", "[", "subject", "]", "[", "action", "]", "[", "'positions_3d'", "]", "\n", "poses_2d", "=", "keypoints", "[", "subject", "]", "[", "action", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "poses_3d", ")", ")", ":", "\n", "                ", "full_out", ".", "append", "(", "poses_3d", "[", "i", "]", "[", ":", ":", "5", "]", ")", "\n", "full_out_2d", ".", "append", "(", "poses_2d", "[", "i", "]", "[", ":", ":", "5", "]", ")", "\n", "", "", "", "full_pose", "=", "np", ".", "concatenate", "(", "full_out", ",", "axis", "=", "0", ")", "\n", "full_pose_2d", "=", "np", ".", "concatenate", "(", "full_out_2d", ",", "axis", "=", "0", ")", "\n", "print", "(", "full_pose_2d", ".", "shape", ")", "\n", "all_pose_dist", ",", "p1_dist", ",", "p2_dist", ",", "p3_dist", ",", "p4_dist", ",", "p5_dist", "=", "fetch_data", "(", "k_", ",", "sig", ")", "\n", "sorted_index", "=", "sort_testset", "(", "all_pose_dist", ",", "ra", "=", "ratio", ")", "\n", "\n", "sorted_pose", "=", "[", "]", "\n", "sorted_pose_2d", "=", "[", "]", "\n", "\n", "sorted_pose", ".", "append", "(", "full_pose", "[", "sorted_index", "]", ")", "\n", "sorted_pose_2d", ".", "append", "(", "full_pose_2d", "[", "sorted_index", "]", ")", "\n", "# plot17j(sorted_pose[400:420], 'dis','large')", "\n", "\n", "print", "(", "'Saving...'", ")", "\n", "file_name", "=", "'data/whole_body_S{}_f5_{}_gt'", ".", "format", "(", "sig", ",", "ratio", ")", "\n", "np", ".", "savez_compressed", "(", "file_name", ",", "pose_3d", "=", "sorted_pose", ",", "pose_2d", "=", "sorted_pose_2d", ")", "\n", "print", "(", "'Saved in:'", ",", "file_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.cal_dist": [[561, 591], ["open", "open.readlines", "print", "numpy.argsort", "print", "keypoints[].keys", "len", "numpy.array", "enumerate", "numpy.array", "action.split", "numpy.array", "numpy.array", "line.split", "act.split", "print", "k.append", "g.append"], "function", ["None"], ["", "def", "cal_dist", "(", "subjects", ",", "action_filter", ")", ":", "\n", "    ", "f", "=", "open", "(", "'log/filter_direct.log'", ")", "\n", "file", "=", "f", ".", "readlines", "(", ")", "\n", "k", "=", "[", "]", "\n", "g", "=", "[", "]", "\n", "for", "subject", "in", "subjects", ":", "\n", "# print('subject',subject)", "\n", "        ", "for", "action", "in", "keypoints", "[", "subject", "]", ".", "keys", "(", ")", ":", "\n", "            ", "action_split", "=", "action", ".", "split", "(", "' '", ")", "[", "0", "]", "\n", "if", "action_filter", "is", "not", "None", ":", "\n", "                ", "found", "=", "False", "\n", "# distinguish the actions:'Sitting' and 'SittingDown'", "\n", "for", "act", "in", "action_filter", ":", "\n", "                    ", "act", "=", "act", ".", "split", "(", "' '", ")", "[", "0", "]", "\n", "if", "action_split", "==", "act", ":", "\n", "                        ", "found", "=", "True", "\n", "break", "\n", "", "", "if", "not", "found", ":", "\n", "                    ", "continue", "\n", "", "", "for", "i", ",", "line", "in", "enumerate", "(", "file", ")", ":", "\n", "                ", "if", "action", "in", "line", ":", "\n", "                    ", "word", "=", "line", ".", "split", "(", "' '", ")", "\n", "if", "action", "==", "word", "[", "-", "1", "]", "or", "action", "==", "word", "[", "-", "2", "]", ":", "\n", "                        ", "print", "(", "'action filter'", ",", "subject", ",", "action", ",", "i", ")", "\n", "k", ".", "append", "(", "i", ")", "\n", "g", ".", "append", "(", "[", "subject", ",", "action", "]", ")", "\n", "", "", "", "", "", "print", "(", "len", "(", "k", ")", ")", "\n", "sort_in", "=", "np", ".", "argsort", "(", "np", ".", "array", "(", "k", ")", ")", "\n", "sort_i", ",", "sort_sub", ",", "sort_act", "=", "np", ".", "array", "(", "k", ")", "[", "sort_in", "]", ",", "np", ".", "array", "(", "g", ")", "[", "sort_in", "]", "[", "0", "]", ",", "np", ".", "array", "(", "g", ")", "[", "sort_in", "]", "[", "1", "]", "\n", "print", "(", "sort_i", ",", "sort_sub", ",", "sort_act", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.common_pytorch.utils.wrap": [[5, 36], ["list", "enumerate", "func", "isinstance", "list", "enumerate", "tuple", "type", "torch.from_numpy", "type", "result.squeeze.numpy", "args[].unsqueeze", "type", "res.squeeze.numpy", "result.squeeze.squeeze", "res.squeeze.squeeze"], "function", ["None"], ["#", "\n", "# This source code is licensed under the license found in the", "\n", "# LICENSE file in the root directory of this source tree.", "\n", "#", "\n", "\n", "import", "numpy", "as", "np", "\n", "#import h5py", "\n", "\n", "mpii_metadata", "=", "{", "\n", "'layout_name'", ":", "'mpii'", ",", "\n", "'num_joints'", ":", "16", ",", "\n", "'keypoints_symmetry'", ":", "[", "\n", "[", "3", ",", "4", ",", "5", ",", "13", ",", "14", ",", "15", "]", ",", "\n", "[", "0", ",", "1", ",", "2", ",", "10", ",", "11", ",", "12", "]", ",", "\n", "]", "\n", "}", "\n", "\n", "coco_metadata", "=", "{", "\n", "'layout_name'", ":", "'coco'", ",", "\n", "'num_joints'", ":", "17", ",", "\n", "'keypoints_symmetry'", ":", "[", "\n", "[", "1", ",", "3", ",", "5", ",", "7", ",", "9", ",", "11", ",", "13", ",", "15", "]", ",", "\n", "[", "2", ",", "4", ",", "6", ",", "8", ",", "10", ",", "12", ",", "14", ",", "16", "]", ",", "\n", "]", "\n", "}", "\n", "\n", "h36m_metadata", "=", "{", "\n", "'layout_name'", ":", "'h36m'", ",", "\n", "'num_joints'", ":", "17", ",", "\n", "'keypoints_symmetry'", ":", "[", "\n", "[", "4", ",", "5", ",", "6", ",", "11", ",", "12", ",", "13", "]", ",", "\n", "[", "1", ",", "2", ",", "3", ",", "14", ",", "15", ",", "16", "]", ",", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.model.fc_baseline.TemporalModelBase.__init__": [[17, 36], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.LeakyReLU", "torch.LeakyReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.loss.loss_family.L1GaussianRegressionNewFlow.__init__"], ["def", "__init__", "(", "self", ",", "num_joints_in", ",", "in_features", ",", "num_joints_out", ",", "\n", "filter_widths", ",", "causal", ",", "dropout", ",", "channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# Validate input", "\n", "for", "fw", "in", "filter_widths", ":", "\n", "            ", "assert", "fw", "%", "2", "!=", "0", ",", "'Only odd filter widths are supported'", "\n", "\n", "", "self", ".", "num_joints_in", "=", "num_joints_in", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "num_joints_out", "=", "num_joints_out", "\n", "self", ".", "filter_widths", "=", "filter_widths", "\n", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.01", ",", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "pad", "=", "[", "filter_widths", "[", "0", "]", "//", "2", "]", "\n", "self", ".", "expand_bn", "=", "nn", ".", "BatchNorm1d", "(", "channels", ",", "momentum", "=", "0.1", ")", "\n", "self", ".", "shrink", "=", "nn", ".", "Conv1d", "(", "channels", ",", "num_joints_out", "*", "3", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.model.fc_baseline.TemporalModelBase.set_bn_momentum": [[37, 41], ["None"], "methods", ["None"], ["", "def", "set_bn_momentum", "(", "self", ",", "momentum", ")", ":", "\n", "        ", "self", ".", "expand_bn", ".", "momentum", "=", "momentum", "\n", "for", "bn", "in", "self", ".", "layers_bn", ":", "\n", "            ", "bn", ".", "momentum", "=", "momentum", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.model.fc_baseline.TemporalModelBase.receptive_field": [[42, 50], ["None"], "methods", ["None"], ["", "", "def", "receptive_field", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return the total receptive field of this model as # of frames.\n        \"\"\"", "\n", "frames", "=", "0", "\n", "for", "f", "in", "self", ".", "pad", ":", "\n", "            ", "frames", "+=", "f", "\n", "", "return", "1", "+", "2", "*", "frames", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.model.fc_baseline.TemporalModelBase.total_causal_shift": [[51, 63], ["range", "len"], "methods", ["None"], ["", "def", "total_causal_shift", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return the asymmetric offset for sequence padding.\n        The returned value is typically 0 if causal convolutions are disabled,\n        otherwise it is half the receptive field.\n        \"\"\"", "\n", "frames", "=", "self", ".", "causal_shift", "[", "0", "]", "\n", "next_dilation", "=", "self", ".", "filter_widths", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "self", ".", "filter_widths", ")", ")", ":", "\n", "            ", "frames", "+=", "self", ".", "causal_shift", "[", "i", "]", "*", "next_dilation", "\n", "next_dilation", "*=", "self", ".", "filter_widths", "[", "i", "]", "\n", "", "return", "frames", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.model.fc_baseline.TemporalModelBase.forward": [[64, 85], ["x.permute.permute.view", "x.permute.permute.permute", "fc_baseline.TemporalModelBase._forward_blocks", "torch.cat.permute", "torch.cat.permute", "torch.cat.view", "torch.cat.view", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.model.srnet.TemporalModelOptimized1f._forward_blocks"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "len", "(", "x", ".", "shape", ")", "==", "4", "\n", "assert", "x", ".", "shape", "[", "-", "2", "]", "==", "self", ".", "num_joints_in", "\n", "assert", "x", ".", "shape", "[", "-", "1", "]", "==", "self", ".", "in_features", "\n", "\n", "sz", "=", "x", ".", "shape", "[", ":", "3", "]", "\n", "\n", "x_out", "=", "x", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "y", "=", "self", ".", "_forward_blocks", "(", "x", ")", "\n", "\n", "y", "=", "y", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "#[1024,1,3K]", "\n", "\n", "y", "=", "y", ".", "view", "(", "sz", "[", "0", "]", ",", "-", "1", ",", "self", ".", "num_joints_out", ",", "3", ")", "\n", "if", "args", ".", "norm", "==", "'lcn'", ":", "\n", "            ", "pose_2d", "=", "x_out", "+", "y", "[", "...", ",", ":", "2", "]", "\n", "y", "=", "torch", ".", "cat", "(", "[", "pose_2d", ",", "y", "[", "...", ",", "2", ":", "3", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.model.fc_baseline.TemporalModel.__init__": [[93, 133], ["fc_baseline.TemporalModelBase.__init__", "torch.Conv1d", "torch.Conv1d", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "fc_baseline.TemporalModel.pad.append", "fc_baseline.TemporalModel.causal_shift.append", "layers_conv.append", "layers_bn.append", "layers_conv.append", "layers_bn.append", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.loss.loss_family.L1GaussianRegressionNewFlow.__init__"], ["def", "__init__", "(", "self", ",", "num_joints_in", ",", "in_features", ",", "num_joints_out", ",", "\n", "filter_widths", ",", "causal", "=", "False", ",", "dropout", "=", "0.25", ",", "channels", "=", "1024", ",", "dense", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Initialize this model.\n\n        Arguments:\n        num_joints_in -- number of input joints (e.g. 17 for Human3.6M)\n        in_features -- number of input features for each joint (typically 2 for 2D input)\n        num_joints_out -- number of output joints (can be different than input)\n        filter_widths -- list of convolution widths, which also determines the # of blocks and receptive field\n        causal -- use causal convolutions instead of symmetric convolutions (for real-time applications)\n        dropout -- dropout probability\n        channels -- number of convolution channels\n        dense -- use regular dense convolutions instead of dilated convolutions (ablation experiment)\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "num_joints_in", ",", "in_features", ",", "num_joints_out", ",", "filter_widths", ",", "causal", ",", "dropout", ",", "channels", ")", "\n", "\n", "self", ".", "expand_conv", "=", "nn", ".", "Conv1d", "(", "num_joints_in", "*", "in_features", ",", "channels", ",", "filter_widths", "[", "0", "]", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "layers_conv", "=", "[", "]", "\n", "layers_bn", "=", "[", "]", "\n", "\n", "self", ".", "causal_shift", "=", "[", "(", "filter_widths", "[", "0", "]", ")", "//", "2", "if", "causal", "else", "0", "]", "\n", "next_dilation", "=", "filter_widths", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "filter_widths", ")", ")", ":", "\n", "            ", "self", ".", "pad", ".", "append", "(", "(", "filter_widths", "[", "i", "]", "-", "1", ")", "*", "next_dilation", "//", "2", ")", "\n", "self", ".", "causal_shift", ".", "append", "(", "(", "filter_widths", "[", "i", "]", "//", "2", "*", "next_dilation", ")", "if", "causal", "else", "0", ")", "\n", "\n", "layers_conv", ".", "append", "(", "nn", ".", "Conv1d", "(", "channels", ",", "channels", ",", "\n", "filter_widths", "[", "i", "]", "if", "not", "dense", "else", "(", "2", "*", "self", ".", "pad", "[", "-", "1", "]", "+", "1", ")", ",", "\n", "dilation", "=", "next_dilation", "if", "not", "dense", "else", "1", ",", "groups", "=", "1", ",", "\n", "bias", "=", "False", ")", ")", "\n", "layers_bn", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "channels", ",", "momentum", "=", "0.1", ")", ")", "\n", "layers_conv", ".", "append", "(", "nn", ".", "Conv1d", "(", "channels", ",", "channels", ",", "1", ",", "dilation", "=", "1", ",", "bias", "=", "False", ",", "groups", "=", "1", ")", ")", "\n", "layers_bn", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "channels", ",", "momentum", "=", "0.1", ")", ")", "\n", "\n", "next_dilation", "*=", "filter_widths", "[", "i", "]", "\n", "\n", "", "self", ".", "layers_conv", "=", "nn", ".", "ModuleList", "(", "layers_conv", ")", "\n", "self", ".", "layers_bn", "=", "nn", ".", "ModuleList", "(", "layers_bn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.model.fc_baseline.TemporalModel._forward_blocks": [[134, 147], ["fc_baseline.TemporalModel.drop", "range", "fc_baseline.TemporalModel.shrink", "fc_baseline.TemporalModel.relu", "fc_baseline.TemporalModel.drop", "fc_baseline.TemporalModel.expand_bn", "len", "fc_baseline.TemporalModel.relu", "fc_baseline.TemporalModel.drop", "fc_baseline.TemporalModel.expand_conv", "fc_baseline.TemporalModel.relu"], "methods", ["None"], ["", "def", "_forward_blocks", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "expand_bn", "(", "self", ".", "expand_conv", "(", "x", ")", ")", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "pad", ")", "-", "1", ")", ":", "\n", "            ", "pad", "=", "self", ".", "pad", "[", "i", "+", "1", "]", "\n", "shift", "=", "self", ".", "causal_shift", "[", "i", "+", "1", "]", "\n", "res", "=", "x", "[", ":", ",", ":", ",", "pad", "+", "shift", ":", "x", ".", "shape", "[", "2", "]", "-", "pad", "+", "shift", "]", "\n", "\n", "x", "=", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "layers_bn", "[", "2", "*", "i", "]", "(", "self", ".", "layers_conv", "[", "2", "*", "i", "]", "(", "x", ")", ")", ")", ")", "\n", "x", "=", "res", "+", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "layers_bn", "[", "2", "*", "i", "+", "1", "]", "(", "self", ".", "layers_conv", "[", "2", "*", "i", "+", "1", "]", "(", "x", ")", ")", ")", ")", "\n", "\n", "", "x", "=", "self", ".", "shrink", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.model.fc_baseline.TemporalModelOptimized1f.__init__": [[160, 195], ["fc_baseline.TemporalModelBase.__init__", "torch.Conv1d", "torch.Conv1d", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "fc_baseline.TemporalModelOptimized1f.pad.append", "fc_baseline.TemporalModelOptimized1f.causal_shift.append", "layers_conv.append", "layers_bn.append", "layers_conv.append", "layers_bn.append", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.loss.loss_family.L1GaussianRegressionNewFlow.__init__"], ["def", "__init__", "(", "self", ",", "num_joints_in", ",", "in_features", ",", "num_joints_out", ",", "\n", "filter_widths", ",", "causal", "=", "False", ",", "dropout", "=", "0.25", ",", "channels", "=", "1024", ")", ":", "\n", "        ", "\"\"\"\n        Initialize this model.\n\n        Arguments:\n        num_joints_in -- number of input joints (e.g. 17 for Human3.6M)\n        in_features -- number of input features for each joint (typically 2 for 2D input)\n        num_joints_out -- number of output joints (can be different than input)\n        filter_widths -- list of convolution widths, which also determines the # of blocks and receptive field\n        causal -- use causal convolutions instead of symmetric convolutions (for real-time applications)\n        dropout -- dropout probability\n        channels -- number of convolution channels\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "num_joints_in", ",", "in_features", ",", "num_joints_out", ",", "filter_widths", ",", "causal", ",", "dropout", ",", "channels", ")", "\n", "\n", "self", ".", "expand_conv", "=", "nn", ".", "Conv1d", "(", "num_joints_in", "*", "in_features", ",", "channels", ",", "filter_widths", "[", "0", "]", ",", "stride", "=", "filter_widths", "[", "0", "]", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "layers_conv", "=", "[", "]", "\n", "layers_bn", "=", "[", "]", "\n", "\n", "self", ".", "causal_shift", "=", "[", "(", "filter_widths", "[", "0", "]", "//", "2", ")", "if", "causal", "else", "0", "]", "\n", "next_dilation", "=", "filter_widths", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "filter_widths", ")", ")", ":", "\n", "            ", "self", ".", "pad", ".", "append", "(", "(", "filter_widths", "[", "i", "]", "-", "1", ")", "*", "next_dilation", "//", "2", ")", "\n", "self", ".", "causal_shift", ".", "append", "(", "(", "filter_widths", "[", "i", "]", "//", "2", ")", "if", "causal", "else", "0", ")", "\n", "\n", "layers_conv", ".", "append", "(", "nn", ".", "Conv1d", "(", "channels", ",", "channels", ",", "filter_widths", "[", "i", "]", ",", "stride", "=", "filter_widths", "[", "i", "]", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "layers_bn", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "channels", ",", "momentum", "=", "0.1", ")", ")", "\n", "layers_conv", ".", "append", "(", "nn", ".", "Conv1d", "(", "channels", ",", "channels", ",", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "layers_bn", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "channels", ",", "momentum", "=", "0.1", ")", ")", "\n", "next_dilation", "*=", "filter_widths", "[", "i", "]", "\n", "\n", "", "self", ".", "layers_conv", "=", "nn", ".", "ModuleList", "(", "layers_conv", ")", "\n", "self", ".", "layers_bn", "=", "nn", ".", "ModuleList", "(", "layers_bn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.model.fc_baseline.TemporalModelOptimized1f._forward_blocks": [[196, 206], ["fc_baseline.TemporalModelOptimized1f.drop", "range", "fc_baseline.TemporalModelOptimized1f.shrink", "fc_baseline.TemporalModelOptimized1f.relu", "fc_baseline.TemporalModelOptimized1f.drop", "fc_baseline.TemporalModelOptimized1f.expand_bn", "len", "fc_baseline.TemporalModelOptimized1f.relu", "fc_baseline.TemporalModelOptimized1f.drop", "fc_baseline.TemporalModelOptimized1f.expand_conv", "fc_baseline.TemporalModelOptimized1f.relu"], "methods", ["None"], ["", "def", "_forward_blocks", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "expand_bn", "(", "self", ".", "expand_conv", "(", "x", ")", ")", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "pad", ")", "-", "1", ")", ":", "\n", "            ", "res", "=", "x", "[", ":", ",", ":", ",", "self", ".", "causal_shift", "[", "i", "+", "1", "]", "+", "self", ".", "filter_widths", "[", "i", "+", "1", "]", "//", "2", ":", ":", "self", ".", "filter_widths", "[", "i", "+", "1", "]", "]", "\n", "x", "=", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "layers_bn", "[", "2", "*", "i", "]", "(", "self", ".", "layers_conv", "[", "2", "*", "i", "]", "(", "x", ")", ")", ")", ")", "\n", "x", "=", "res", "+", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "layers_bn", "[", "2", "*", "i", "+", "1", "]", "(", "self", ".", "layers_conv", "[", "2", "*", "i", "+", "1", "]", "(", "x", ")", ")", ")", ")", "\n", "\n", "", "x", "=", "self", ".", "shrink", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.model.fc_baseline.Same_Model.__init__": [[218, 255], ["fc_baseline.TemporalModelBase.__init__", "torch.Conv1d", "torch.Conv1d", "range", "torch.ReplicationPad1d", "torch.ReplicationPad1d", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.AdaptiveAvgPool1d", "torch.AdaptiveAvgPool1d", "torch.Conv1d", "torch.Conv1d", "len", "fc_baseline.Same_Model.pad.append", "fc_baseline.Same_Model.causal_shift.append", "layers_conv.append", "layers_bn.append", "layers_conv.append", "layers_bn.append", "fc_baseline.Same_Model.ref_pad.append", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReplicationPad1d", "torch.ReplicationPad1d"], "methods", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.loss.loss_family.L1GaussianRegressionNewFlow.__init__"], ["def", "__init__", "(", "self", ",", "num_joints_in", ",", "in_features", ",", "num_joints_out", ",", "\n", "filter_widths", ",", "causal", "=", "False", ",", "dropout", "=", "0.25", ",", "channels", "=", "1024", ")", ":", "\n", "        ", "\"\"\"\n        Initialize this model.\n\n        New Arguments:\n        FlexGroupLayer: Use this function with different group strategies\n        self.rep_pad: Recommend use nn.ReflectionPad1d to make the same temporal size as 2d inputs.\n\n        \"\"\"", "\n", "mode", "=", "'replicate'", "#padding mode: reflect, replicate, zeros", "\n", "super", "(", ")", ".", "__init__", "(", "num_joints_in", ",", "in_features", ",", "num_joints_out", ",", "filter_widths", ",", "causal", ",", "dropout", ",", "channels", ")", "\n", "self", ".", "expand_conv", "=", "nn", ".", "Conv1d", "(", "num_joints_in", "*", "in_features", ",", "channels", ",", "kernel_size", "=", "filter_widths", "[", "0", "]", ",", "bias", "=", "False", ")", "\n", "\n", "layers_conv", "=", "[", "]", "\n", "layers_bn", "=", "[", "]", "\n", "\n", "self", ".", "ref_pad", "=", "[", "]", "\n", "\n", "self", ".", "causal_shift", "=", "[", "(", "filter_widths", "[", "0", "]", ")", "//", "2", "if", "causal", "else", "0", "]", "\n", "next_dilation", "=", "filter_widths", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "filter_widths", ")", ")", ":", "\n", "            ", "self", ".", "pad", ".", "append", "(", "(", "filter_widths", "[", "i", "]", "-", "1", ")", "*", "next_dilation", "//", "2", ")", "\n", "self", ".", "causal_shift", ".", "append", "(", "(", "filter_widths", "[", "i", "]", "//", "2", "*", "next_dilation", ")", "if", "causal", "else", "0", ")", "\n", "layers_conv", ".", "append", "(", "nn", ".", "Conv1d", "(", "channels", ",", "channels", ",", "kernel_size", "=", "filter_widths", "[", "0", "]", ",", "dilation", "=", "next_dilation", ",", "bias", "=", "False", ")", ")", "\n", "layers_bn", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "channels", ",", "momentum", "=", "0.1", ")", ")", "\n", "layers_conv", ".", "append", "(", "nn", ".", "Conv1d", "(", "channels", ",", "channels", ",", "kernel_size", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "layers_bn", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "channels", ",", "momentum", "=", "0.1", ")", ")", "\n", "self", ".", "ref_pad", ".", "append", "(", "nn", ".", "ReplicationPad1d", "(", "next_dilation", ")", ")", "\n", "#self.ref_pad.append(nn.ReflectionPad1d(next_dilation))", "\n", "next_dilation", "*=", "filter_widths", "[", "i", "]", "\n", "#self.reflec = nn.ReflectionPad1d(1)", "\n", "", "self", ".", "reflec", "=", "nn", ".", "ReplicationPad1d", "(", "1", ")", "\n", "self", ".", "layers_conv", "=", "nn", ".", "ModuleList", "(", "layers_conv", ")", "\n", "self", ".", "layers_bn", "=", "nn", ".", "ModuleList", "(", "layers_bn", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool1d", "(", "1", ")", "\n", "self", ".", "final_layer", "=", "nn", ".", "Conv1d", "(", "channels", ",", "num_joints_out", "*", "3", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.model.fc_baseline.Same_Model._forward_blocks": [[256, 264], ["fc_baseline.Same_Model.drop", "range", "fc_baseline.Same_Model.final_layer", "fc_baseline.Same_Model.relu", "fc_baseline.Same_Model.drop", "fc_baseline.Same_Model.expand_bn", "len", "fc_baseline.Same_Model.relu", "fc_baseline.Same_Model.drop", "fc_baseline.Same_Model.expand_conv", "fc_baseline.Same_Model.relu", "fc_baseline.Same_Model.reflec"], "methods", ["None"], ["", "def", "_forward_blocks", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "expand_bn", "(", "self", ".", "expand_conv", "(", "self", ".", "reflec", "(", "x", ")", ")", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "pad", ")", "-", "1", ")", ":", "\n", "            ", "res", "=", "x", "\n", "x", "=", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "layers_bn", "[", "2", "*", "i", "]", "(", "self", ".", "layers_conv", "[", "2", "*", "i", "]", "(", "self", ".", "ref_pad", "[", "i", "]", "(", "x", ")", ")", ")", ")", ")", "\n", "x", "=", "res", "+", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "layers_bn", "[", "2", "*", "i", "+", "1", "]", "(", "self", ".", "layers_conv", "[", "2", "*", "i", "+", "1", "]", "(", "x", ")", ")", ")", ")", "\n", "", "x", "=", "self", ".", "final_layer", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.model.srnet.TemporalModelBase.__init__": [[20, 41], ["torch.Module.__init__", "torch.ReplicationPad1d", "torch.ReplicationPad1d", "torch.Dropout", "torch.Dropout", "torch.LeakyReLU", "torch.LeakyReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "common.common_pytorch.model.srnet_utils.group_index.get_input"], "methods", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.loss.loss_family.L1GaussianRegressionNewFlow.__init__", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.group_index.get_input"], ["def", "__init__", "(", "self", ",", "num_joints_in", ",", "in_features", ",", "num_joints_out", ",", "\n", "filter_widths", ",", "causal", ",", "dropout", ",", "channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# Validate input", "\n", "for", "fw", "in", "filter_widths", ":", "\n", "            ", "assert", "fw", "%", "2", "!=", "0", ",", "'Only odd filter widths are supported'", "\n", "\n", "", "self", ".", "num_joints_in", "=", "num_joints_in", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "num_joints_out", "=", "num_joints_out", "\n", "self", ".", "filter_widths", "=", "filter_widths", "\n", "self", ".", "replication_padding", "=", "nn", ".", "ReplicationPad1d", "(", "1", ")", "# For replication padding", "\n", "self", ".", "padding", "=", "1", "# For zero padding", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.01", ",", "inplace", "=", "True", ")", "\n", "self", ".", "pad", "=", "[", "filter_widths", "[", "0", "]", "//", "2", "]", "\n", "self", ".", "expand_bn", "=", "nn", ".", "BatchNorm1d", "(", "channels", ",", "momentum", "=", "0.1", ")", "\n", "\n", "self", ".", "conv_inc", "=", "[", "1", "]", "*", "34", "\n", "self", ".", "conv_seq", ",", "self", ".", "final_outc", "=", "get_input", "(", "args", ".", "group", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.model.srnet.TemporalModelBase.set_bn_momentum": [[42, 46], ["None"], "methods", ["None"], ["", "def", "set_bn_momentum", "(", "self", ",", "momentum", ")", ":", "\n", "        ", "self", ".", "expand_bn", ".", "momentum", "=", "momentum", "\n", "for", "bn", "in", "self", ".", "layers_bn", ":", "\n", "            ", "bn", ".", "momentum", "=", "momentum", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.model.srnet.TemporalModelBase.receptive_field": [[47, 56], ["None"], "methods", ["None"], ["", "", "def", "receptive_field", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return the total receptive field of this model as # of frames.\n        \"\"\"", "\n", "frames", "=", "0", "\n", "for", "f", "in", "self", ".", "pad", ":", "\n", "            ", "frames", "+=", "f", "\n", "", "self", ".", "frames", "=", "frames", "\n", "return", "1", "+", "2", "*", "frames", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.model.srnet.TemporalModelBase.total_causal_shift": [[57, 69], ["range", "len"], "methods", ["None"], ["", "def", "total_causal_shift", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return the asymmetric offset for sequence padding.\n        The returned value is typically 0 if causal convolutions are disabled,\n        otherwise it is half the receptive field.\n        \"\"\"", "\n", "frames", "=", "self", ".", "causal_shift", "[", "0", "]", "\n", "next_dilation", "=", "self", ".", "filter_widths", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "self", ".", "filter_widths", ")", ")", ":", "\n", "            ", "frames", "+=", "self", ".", "causal_shift", "[", "i", "]", "*", "next_dilation", "\n", "next_dilation", "*=", "self", ".", "filter_widths", "[", "i", "]", "\n", "", "return", "frames", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.model.srnet.TemporalModelBase._get_next_seq": [[70, 94], ["enumerate", "enumerate", "sum", "sum", "out_chs.append", "next_seq.append", "map", "map", "len", "int", "len", "sum"], "methods", ["None"], ["", "def", "_get_next_seq", "(", "self", ",", "inc", ",", "channels", ",", "out_seq", ")", ":", "\n", "        ", "\"\"\"\n        Generate input information of the next layer\n        :param inc: input sequence of each group, type:list e.g [455, 569]\n        :param channels: output channel size of the whole layer, type:int e.g 1024\n        :param out_seq: output sequence index of each each group, which decides how to group with those indexes. type:list. e.g [[0],[1]]\n        :return: Next input sequence and Next output sequence index\n        \"\"\"", "\n", "in_ch_sum", "=", "0", "\n", "for", "index", ",", "i", "in", "enumerate", "(", "out_seq", ")", ":", "\n", "            ", "in_ch_sum", "+=", "sum", "(", "map", "(", "lambda", "x", ":", "inc", "[", "x", "]", ",", "i", ")", ")", "\n", "", "out_chs", "=", "[", "]", "\n", "next_seq", "=", "[", "]", "\n", "for", "index", ",", "i", "in", "enumerate", "(", "out_seq", ")", ":", "\n", "            ", "in_ch", "=", "sum", "(", "map", "(", "lambda", "x", ":", "inc", "[", "x", "]", ",", "i", ")", ")", "\n", "if", "len", "(", "out_seq", ")", "==", "1", ":", "\n", "                ", "out_ch", "=", "channels", "\n", "", "elif", "index", "==", "len", "(", "out_seq", ")", "-", "1", ":", "\n", "                ", "out_ch", "=", "channels", "-", "sum", "(", "out_chs", ")", "\n", "", "else", ":", "\n", "                ", "out_ch", "=", "int", "(", "in_ch", "/", "in_ch_sum", "*", "channels", ")", "\n", "", "out_chs", ".", "append", "(", "out_ch", ")", "\n", "next_seq", ".", "append", "(", "[", "index", "]", ")", "\n", "", "return", "out_chs", ",", "next_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.model.srnet.TemporalModelBase._get_all_seq": [[95, 108], ["in_out_seq.append", "range", "in_out_seq.append", "srnet.TemporalModelBase._get_next_seq", "len", "in_out_seq.append", "in_out_seq.append", "srnet.TemporalModelBase._get_next_seq", "srnet.TemporalModelBase._get_next_seq", "srnet.TemporalModelBase._get_next_seq"], "methods", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.model.srnet.TemporalModelBase._get_next_seq", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.model.srnet.TemporalModelBase._get_next_seq", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.model.srnet.TemporalModelBase._get_next_seq", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.model.srnet.TemporalModelBase._get_next_seq"], ["", "def", "_get_all_seq", "(", "self", ",", "inc", ",", "channels", ",", "out_seq", ",", "filter_widths", ")", ":", "\n", "        ", "\"\"\"\n        :return: Get all sequence info. for a model.\n        \"\"\"", "\n", "in_out_seq", "=", "[", "]", "\n", "in_out_seq", ".", "append", "(", "self", ".", "_get_next_seq", "(", "inc", ",", "channels", ",", "out_seq", ")", ")", "\n", "# Generate input sequence and output sequence of each layer", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "filter_widths", ")", ")", ":", "\n", "            ", "in_out_seq", ".", "append", "(", "self", ".", "_get_next_seq", "(", "in_out_seq", "[", "2", "*", "i", "-", "2", "]", "[", "0", "]", ",", "channels", ",", "in_out_seq", "[", "2", "*", "i", "-", "2", "]", "[", "1", "]", ")", ")", "\n", "in_out_seq", ".", "append", "(", "self", ".", "_get_next_seq", "(", "in_out_seq", "[", "2", "*", "i", "-", "1", "]", "[", "0", "]", ",", "channels", ",", "in_out_seq", "[", "2", "*", "i", "-", "1", "]", "[", "1", "]", ")", ")", "\n", "# For Final layer:", "\n", "", "in_out_seq", ".", "append", "(", "self", ".", "_get_next_seq", "(", "in_out_seq", "[", "2", "*", "i", "]", "[", "0", "]", ",", "channels", ",", "in_out_seq", "[", "2", "*", "i", "]", "[", "1", "]", ")", ")", "\n", "return", "in_out_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.model.srnet.TemporalModelBase.forward": [[109, 132], ["x.permute.permute.view", "x.permute.permute.permute", "srnet.TemporalModelBase._forward_blocks", "torch.cat.permute", "torch.cat.permute", "common.common_pytorch.model.srnet_utils.group_index.shrink_output", "torch.cat.view", "torch.cat.view", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.model.srnet.TemporalModelOptimized1f._forward_blocks", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.group_index.shrink_output"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "len", "(", "x", ".", "shape", ")", "==", "4", "\n", "assert", "x", ".", "shape", "[", "-", "2", "]", "==", "self", ".", "num_joints_in", "\n", "assert", "x", ".", "shape", "[", "-", "1", "]", "==", "self", ".", "in_features", "\n", "\n", "sz", "=", "x", ".", "shape", "[", ":", "3", "]", "\n", "\n", "x_out", "=", "x", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "y", "=", "self", ".", "_forward_blocks", "(", "x", ")", "\n", "\n", "y", "=", "y", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "#[1024,1,3K]", "\n", "y", "=", "shrink_output", "(", "y", ")", "\n", "\n", "y", "=", "y", ".", "view", "(", "sz", "[", "0", "]", ",", "-", "1", ",", "self", ".", "num_joints_out", ",", "3", ")", "\n", "\n", "if", "args", ".", "norm", "==", "'lcn'", ":", "\n", "            ", "pose_2d", "=", "x_out", "+", "y", "[", "...", ",", ":", "2", "]", "\n", "y", "=", "torch", ".", "cat", "(", "[", "pose_2d", ",", "y", "[", "...", ",", "2", ":", "3", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.model.srnet.TemporalModel.__init__": [[139, 193], ["srnet.TemporalModelBase.__init__", "common.common_pytorch.model.srnet_utils.flex_layer.FlexGroupLayer", "srnet.TemporalModel._get_all_seq", "range", "common.common_pytorch.model.srnet_utils.flex_layer.FlexGroupLayer", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "srnet.TemporalModel.pad.append", "srnet.TemporalModel.causal_shift.append", "layers_conv.append", "layers_bn.append", "layers_conv.append", "layers_bn.append", "common.common_pytorch.model.srnet_utils.flex_layer.FlexGroupLayer", "torch.BatchNorm1d", "torch.BatchNorm1d", "common.common_pytorch.model.srnet_utils.flex_layer.FlexGroupLayer", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.loss.loss_family.L1GaussianRegressionNewFlow.__init__", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.model.srnet.TemporalModelBase._get_all_seq"], ["def", "__init__", "(", "self", ",", "num_joints_in", ",", "in_features", ",", "num_joints_out", ",", "\n", "filter_widths", ",", "causal", "=", "False", ",", "dropout", "=", "0.25", ",", "channels", "=", "1024", ",", "dense", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Initialize this model.\n\n        Arguments:\n        num_joints_in -- number of input joints (e.g. 17 for Human3.6M)\n        in_features -- number of input features for each joint (typically 2 for 2D input)\n        num_joints_out -- number of output joints (can be different than input)\n        filter_widths -- list of convolution widths, which also determines the # of blocks and receptive field\n        causal -- use causal convolutions instead of symmetric convolutions (for real-time applications)\n        dropout -- dropout probability\n        channels -- number of convolution channels\n        dense -- use regular dense convolutions instead of dilated convolutions (ablation experiment)\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "num_joints_in", ",", "in_features", ",", "num_joints_out", ",", "filter_widths", ",", "causal", ",", "dropout", ",", "channels", ")", "\n", "self", ".", "expand_conv", "=", "FlexGroupLayer", "(", "self", ".", "conv_inc", ",", "channels", ",", "self", ".", "conv_seq", ",", "kernel_size", "=", "filter_widths", "[", "0", "]", ",", "\n", "feature_split", "=", "args", ".", "split", ",", "recombine", "=", "args", ".", "recombine", ",", "\n", "fix_seq", "=", "self", ".", "conv_seq", ",", "mean_func", "=", "args", ".", "mean_func", ",", "\n", "ups_mean", "=", "args", ".", "ups_mean", ",", "bias", "=", "False", ")", "\n", "\n", "in_out_seq", "=", "self", ".", "_get_all_seq", "(", "self", ".", "conv_inc", ",", "channels", ",", "self", ".", "conv_seq", ",", "filter_widths", ")", "\n", "\n", "layers_conv", "=", "[", "]", "\n", "layers_bn", "=", "[", "]", "\n", "\n", "self", ".", "causal_shift", "=", "[", "(", "filter_widths", "[", "0", "]", ")", "//", "2", "if", "causal", "else", "0", "]", "\n", "next_dilation", "=", "filter_widths", "[", "0", "]", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "filter_widths", ")", ")", ":", "\n", "            ", "self", ".", "pad", ".", "append", "(", "(", "filter_widths", "[", "i", "]", "-", "1", ")", "*", "next_dilation", "//", "2", ")", "\n", "self", ".", "causal_shift", ".", "append", "(", "(", "filter_widths", "[", "i", "]", "//", "2", "*", "next_dilation", ")", "if", "causal", "else", "0", ")", "\n", "layers_conv", ".", "append", "(", "FlexGroupLayer", "(", "in_out_seq", "[", "2", "*", "i", "-", "2", "]", "[", "0", "]", ",", "channels", ",", "in_out_seq", "[", "2", "*", "i", "-", "2", "]", "[", "1", "]", ",", "kernel_size", "=", "filter_widths", "[", "0", "]", ",", "dilation", "=", "next_dilation", ",", "\n", "feature_split", "=", "args", ".", "split", ",", "recombine", "=", "args", ".", "recombine", ",", "\n", "fix_seq", "=", "self", ".", "conv_seq", ",", "mean_func", "=", "args", ".", "mean_func", ",", "\n", "ups_mean", "=", "args", ".", "ups_mean", ",", "bias", "=", "False", ")", ")", "\n", "\n", "layers_bn", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "channels", ",", "momentum", "=", "0.1", ")", ")", "\n", "\n", "layers_conv", ".", "append", "(", "FlexGroupLayer", "(", "in_out_seq", "[", "2", "*", "i", "-", "1", "]", "[", "0", "]", ",", "channels", ",", "in_out_seq", "[", "2", "*", "i", "-", "1", "]", "[", "1", "]", ",", "kernel_size", "=", "1", ",", "dilation", "=", "1", ",", "\n", "feature_split", "=", "args", ".", "split", ",", "recombine", "=", "args", ".", "recombine", ",", "\n", "fix_seq", "=", "self", ".", "conv_seq", ",", "mean_func", "=", "args", ".", "mean_func", ",", "\n", "ups_mean", "=", "args", ".", "ups_mean", ",", "bias", "=", "False", ")", ")", "\n", "\n", "layers_bn", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "channels", ",", "momentum", "=", "0.1", ")", ")", "\n", "next_dilation", "*=", "filter_widths", "[", "i", "]", "\n", "\n", "", "self", ".", "final_layer", "=", "FlexGroupLayer", "(", "in_out_seq", "[", "-", "1", "]", "[", "0", "]", ",", "self", ".", "final_outc", ",", "in_out_seq", "[", "2", "*", "i", "]", "[", "1", "]", ",", "kernel_size", "=", "1", ",", "dilation", "=", "1", ",", "\n", "feature_split", "=", "args", ".", "split", ",", "recombine", "=", "args", ".", "recombine", ",", "\n", "fix_seq", "=", "self", ".", "conv_seq", ",", "mean_func", "=", "args", ".", "mean_func", ",", "\n", "ups_mean", "=", "args", ".", "ups_mean", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "layers_conv", "=", "nn", ".", "ModuleList", "(", "layers_conv", ")", "\n", "self", ".", "layers_bn", "=", "nn", ".", "ModuleList", "(", "layers_bn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.model.srnet.TemporalModel._forward_blocks": [[194, 205], ["srnet.TemporalModel.drop", "range", "srnet.TemporalModel.final_layer", "srnet.TemporalModel.relu", "srnet.TemporalModel.drop", "srnet.TemporalModel.expand_bn", "len", "srnet.TemporalModel.relu", "srnet.TemporalModel.drop", "srnet.TemporalModel.expand_conv", "srnet.TemporalModel.relu"], "methods", ["None"], ["", "def", "_forward_blocks", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "expand_bn", "(", "self", ".", "expand_conv", "(", "x", ")", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "pad", ")", "-", "1", ")", ":", "\n", "            ", "pad", "=", "self", ".", "pad", "[", "i", "+", "1", "]", "\n", "shift", "=", "self", ".", "causal_shift", "[", "i", "+", "1", "]", "\n", "res", "=", "x", "[", ":", ",", ":", ",", "pad", "+", "shift", ":", "x", ".", "shape", "[", "2", "]", "-", "pad", "+", "shift", "]", "# Drop left&right with length of pad", "\n", "x", "=", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "layers_bn", "[", "2", "*", "i", "]", "(", "self", ".", "layers_conv", "[", "2", "*", "i", "]", "(", "x", ")", ")", ")", ")", "\n", "x", "=", "res", "+", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "layers_bn", "[", "2", "*", "i", "+", "1", "]", "(", "self", ".", "layers_conv", "[", "2", "*", "i", "+", "1", "]", "(", "x", ")", ")", ")", ")", "\n", "", "x", "=", "self", ".", "final_layer", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.model.srnet.Same_Model.__init__": [[212, 270], ["srnet.TemporalModelBase.__init__", "common.common_pytorch.model.srnet_utils.flex_layer.FlexGroupLayer", "srnet.Same_Model._get_all_seq", "range", "common.common_pytorch.model.srnet_utils.flex_layer.FlexGroupLayer", "torch.ReflectionPad1d", "torch.ReflectionPad1d", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "srnet.Same_Model.pad.append", "srnet.Same_Model.causal_shift.append", "layers_conv.append", "layers_bn.append", "layers_conv.append", "srnet.Same_Model.ref_pad.append", "layers_bn.append", "common.common_pytorch.model.srnet_utils.flex_layer.FlexGroupLayer", "torch.BatchNorm1d", "torch.BatchNorm1d", "common.common_pytorch.model.srnet_utils.flex_layer.FlexGroupLayer", "torch.ReflectionPad1d", "torch.ReflectionPad1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.loss.loss_family.L1GaussianRegressionNewFlow.__init__", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.model.srnet.TemporalModelBase._get_all_seq"], ["def", "__init__", "(", "self", ",", "num_joints_in", ",", "in_features", ",", "num_joints_out", ",", "\n", "filter_widths", ",", "causal", "=", "False", ",", "dropout", "=", "0.25", ",", "channels", "=", "1024", ",", "dense", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Initialize this model.\n\n        Arguments:\n        num_joints_in -- number of input joints (e.g. 17 for Human3.6M)\n        in_features -- number of input features for each joint (typically 2 for 2D input)\n        num_joints_out -- number of output joints (can be different than input)\n        filter_widths -- list of convolution widths, which also determines the # of blocks and receptive field\n        causal -- use causal convolutions instead of symmetric convolutions (for real-time applications)\n        dropout -- dropout probability\n        channels -- number of convolution channels\n        dense -- use regular dense convolutions instead of dilated convolutions (ablation experiment)\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "num_joints_in", ",", "in_features", ",", "num_joints_out", ",", "filter_widths", ",", "causal", ",", "dropout", ",", "channels", ")", "\n", "self", ".", "expand_conv", "=", "FlexGroupLayer", "(", "self", ".", "conv_inc", ",", "channels", ",", "self", ".", "conv_seq", ",", "kernel_size", "=", "filter_widths", "[", "0", "]", ",", "\n", "feature_split", "=", "args", ".", "split", ",", "recombine", "=", "args", ".", "recombine", ",", "\n", "fix_seq", "=", "self", ".", "conv_seq", ",", "mean_func", "=", "args", ".", "mean_func", ",", "\n", "ups_mean", "=", "args", ".", "ups_mean", ",", "bias", "=", "False", ")", "\n", "\n", "in_out_seq", "=", "self", ".", "_get_all_seq", "(", "self", ".", "conv_inc", ",", "channels", ",", "self", ".", "conv_seq", ",", "filter_widths", ")", "\n", "\n", "layers_conv", "=", "[", "]", "\n", "layers_bn", "=", "[", "]", "\n", "self", ".", "ref_pad", "=", "[", "]", "\n", "self", ".", "causal_shift", "=", "[", "(", "filter_widths", "[", "0", "]", ")", "//", "2", "if", "causal", "else", "0", "]", "\n", "next_dilation", "=", "filter_widths", "[", "0", "]", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "filter_widths", ")", ")", ":", "\n", "            ", "self", ".", "pad", ".", "append", "(", "(", "filter_widths", "[", "i", "]", "-", "1", ")", "*", "next_dilation", "//", "2", ")", "\n", "self", ".", "causal_shift", ".", "append", "(", "(", "filter_widths", "[", "i", "]", "//", "2", "*", "next_dilation", ")", "if", "causal", "else", "0", ")", "\n", "layers_conv", ".", "append", "(", "FlexGroupLayer", "(", "in_out_seq", "[", "2", "*", "i", "-", "2", "]", "[", "0", "]", ",", "channels", ",", "in_out_seq", "[", "2", "*", "i", "-", "2", "]", "[", "1", "]", ",", "kernel_size", "=", "filter_widths", "[", "0", "]", ",", "dilation", "=", "next_dilation", ",", "\n", "feature_split", "=", "args", ".", "split", ",", "recombine", "=", "args", ".", "recombine", ",", "\n", "fix_seq", "=", "self", ".", "conv_seq", ",", "mean_func", "=", "args", ".", "mean_func", ",", "\n", "ups_mean", "=", "args", ".", "ups_mean", ",", "bias", "=", "False", ")", ")", "\n", "\n", "layers_bn", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "channels", ",", "momentum", "=", "0.1", ")", ")", "\n", "\n", "layers_conv", ".", "append", "(", "FlexGroupLayer", "(", "in_out_seq", "[", "2", "*", "i", "-", "1", "]", "[", "0", "]", ",", "channels", ",", "in_out_seq", "[", "2", "*", "i", "-", "1", "]", "[", "1", "]", ",", "kernel_size", "=", "1", ",", "dilation", "=", "1", ",", "\n", "feature_split", "=", "args", ".", "split", ",", "recombine", "=", "args", ".", "recombine", ",", "\n", "fix_seq", "=", "self", ".", "conv_seq", ",", "mean_func", "=", "args", ".", "mean_func", ",", "\n", "ups_mean", "=", "args", ".", "ups_mean", ",", "bias", "=", "False", ")", ")", "\n", "#self.ref_pad.append(nn.ReplicationPad1d(next_dilation))", "\n", "self", ".", "ref_pad", ".", "append", "(", "nn", ".", "ReflectionPad1d", "(", "next_dilation", ")", ")", "\n", "layers_bn", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "channels", ",", "momentum", "=", "0.1", ")", ")", "\n", "next_dilation", "*=", "filter_widths", "[", "i", "]", "\n", "\n", "", "self", ".", "final_layer", "=", "FlexGroupLayer", "(", "in_out_seq", "[", "-", "1", "]", "[", "0", "]", ",", "self", ".", "final_outc", ",", "in_out_seq", "[", "2", "*", "i", "]", "[", "1", "]", ",", "kernel_size", "=", "1", ",", "dilation", "=", "1", ",", "\n", "feature_split", "=", "args", ".", "split", ",", "recombine", "=", "args", ".", "recombine", ",", "\n", "fix_seq", "=", "self", ".", "conv_seq", ",", "mean_func", "=", "args", ".", "mean_func", ",", "\n", "ups_mean", "=", "args", ".", "ups_mean", ",", "bias", "=", "True", ")", "\n", "\n", "\n", "self", ".", "reflec", "=", "nn", ".", "ReflectionPad1d", "(", "1", ")", "\n", "#self.reflec = nn.ReplicationPad1d(1)", "\n", "self", ".", "layers_conv", "=", "nn", ".", "ModuleList", "(", "layers_conv", ")", "\n", "self", ".", "layers_bn", "=", "nn", ".", "ModuleList", "(", "layers_bn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.model.srnet.Same_Model._forward_blocks": [[271, 282], ["srnet.Same_Model.drop", "range", "srnet.Same_Model.final_layer", "srnet.Same_Model.relu", "srnet.Same_Model.drop", "srnet.Same_Model.expand_bn", "len", "srnet.Same_Model.relu", "srnet.Same_Model.drop", "srnet.Same_Model.expand_conv", "srnet.Same_Model.relu", "srnet.Same_Model.reflec"], "methods", ["None"], ["", "def", "_forward_blocks", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "expand_bn", "(", "self", ".", "expand_conv", "(", "self", ".", "reflec", "(", "x", ")", ")", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "pad", ")", "-", "1", ")", ":", "\n", "            ", "pad", "=", "self", ".", "pad", "[", "i", "+", "1", "]", "\n", "shift", "=", "self", ".", "causal_shift", "[", "i", "+", "1", "]", "\n", "res", "=", "x", "# Drop left&right with length of pad", "\n", "x", "=", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "layers_bn", "[", "2", "*", "i", "]", "(", "self", ".", "layers_conv", "[", "2", "*", "i", "]", "(", "self", ".", "ref_pad", "[", "i", "]", "(", "x", ")", ")", ")", ")", ")", "\n", "x", "=", "res", "+", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "layers_bn", "[", "2", "*", "i", "+", "1", "]", "(", "self", ".", "layers_conv", "[", "2", "*", "i", "+", "1", "]", "(", "x", ")", ")", ")", ")", "\n", "", "x", "=", "self", ".", "final_layer", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.model.srnet.TemporalModelOptimized1f.__init__": [[296, 341], ["srnet.TemporalModelBase.__init__", "common.common_pytorch.model.srnet_utils.flex_layer.FlexGroupLayer", "srnet.TemporalModelOptimized1f._get_all_seq", "range", "common.common_pytorch.model.srnet_utils.flex_layer.FlexGroupLayer", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "srnet.TemporalModelOptimized1f.pad.append", "srnet.TemporalModelOptimized1f.causal_shift.append", "layers_conv.append", "layers_bn.append", "layers_conv.append", "layers_bn.append", "common.common_pytorch.model.srnet_utils.flex_layer.FlexGroupLayer", "torch.BatchNorm1d", "torch.BatchNorm1d", "common.common_pytorch.model.srnet_utils.flex_layer.FlexGroupLayer", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.loss.loss_family.L1GaussianRegressionNewFlow.__init__", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.model.srnet.TemporalModelBase._get_all_seq"], ["def", "__init__", "(", "self", ",", "num_joints_in", ",", "in_features", ",", "num_joints_out", ",", "\n", "filter_widths", ",", "causal", "=", "False", ",", "dropout", "=", "0.25", ",", "channels", "=", "1024", ")", ":", "\n", "        ", "\"\"\"\n        Initialize this model.\n\n        Arguments:\n        num_joints_in -- number of input joints (e.g. 17 for Human3.6M)\n        in_features -- number of input features for each joint (typically 2 for 2D input)\n        num_joints_out -- number of output joints (can be different than input)\n        filter_widths -- list of convolution widths, which also determines the # of blocks and receptive field\n        causal -- use causal convolutions instead of symmetric convolutions (for real-time applications)\n        dropout -- dropout probability\n        channels -- number of convolution channels\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "num_joints_in", ",", "in_features", ",", "num_joints_out", ",", "filter_widths", ",", "causal", ",", "dropout", ",", "channels", ")", "\n", "\n", "self", ".", "expand_conv", "=", "FlexGroupLayer", "(", "self", ".", "conv_inc", ",", "channels", ",", "self", ".", "conv_seq", ",", "kernel_size", "=", "filter_widths", "[", "0", "]", ",", "stride", "=", "filter_widths", "[", "0", "]", ",", "\n", "feature_split", "=", "args", ".", "split", ",", "recombine", "=", "args", ".", "recombine", ",", "\n", "fix_seq", "=", "self", ".", "conv_seq", ",", "mean_func", "=", "args", ".", "mean_func", ",", "ups_mean", "=", "args", ".", "ups_mean", ",", "bias", "=", "False", ")", "\n", "in_out_seq", "=", "self", ".", "_get_all_seq", "(", "self", ".", "conv_inc", ",", "channels", ",", "self", ".", "conv_seq", ",", "filter_widths", ")", "\n", "layers_conv", "=", "[", "]", "\n", "layers_bn", "=", "[", "]", "\n", "\n", "self", ".", "causal_shift", "=", "[", "(", "filter_widths", "[", "0", "]", "//", "2", ")", "if", "causal", "else", "0", "]", "\n", "next_dilation", "=", "filter_widths", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "filter_widths", ")", ")", ":", "\n", "            ", "self", ".", "pad", ".", "append", "(", "(", "filter_widths", "[", "i", "]", "-", "1", ")", "*", "next_dilation", "//", "2", ")", "\n", "self", ".", "causal_shift", ".", "append", "(", "(", "filter_widths", "[", "i", "]", "//", "2", ")", "if", "causal", "else", "0", ")", "\n", "layers_conv", ".", "append", "(", "FlexGroupLayer", "(", "in_out_seq", "[", "2", "*", "i", "-", "2", "]", "[", "0", "]", ",", "channels", ",", "in_out_seq", "[", "2", "*", "i", "-", "2", "]", "[", "1", "]", ",", "kernel_size", "=", "filter_widths", "[", "0", "]", ",", "stride", "=", "filter_widths", "[", "0", "]", ",", "\n", "feature_split", "=", "args", ".", "split", ",", "recombine", "=", "args", ".", "recombine", ",", "\n", "fix_seq", "=", "self", ".", "conv_seq", ",", "mean_func", "=", "args", ".", "mean_func", ",", "\n", "ups_mean", "=", "args", ".", "ups_mean", ",", "bias", "=", "False", ")", ")", "\n", "layers_bn", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "channels", ",", "momentum", "=", "0.1", ")", ")", "\n", "layers_conv", ".", "append", "(", "FlexGroupLayer", "(", "in_out_seq", "[", "2", "*", "i", "-", "1", "]", "[", "0", "]", ",", "channels", ",", "in_out_seq", "[", "2", "*", "i", "-", "1", "]", "[", "1", "]", ",", "kernel_size", "=", "1", ",", "dilation", "=", "1", ",", "\n", "feature_split", "=", "args", ".", "split", ",", "recombine", "=", "args", ".", "recombine", ",", "\n", "fix_seq", "=", "self", ".", "conv_seq", ",", "mean_func", "=", "args", ".", "mean_func", ",", "\n", "ups_mean", "=", "args", ".", "ups_mean", ",", "bias", "=", "False", ")", ")", "\n", "layers_bn", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "channels", ",", "momentum", "=", "0.1", ")", ")", "\n", "next_dilation", "*=", "filter_widths", "[", "i", "]", "\n", "", "self", ".", "final_layer", "=", "FlexGroupLayer", "(", "in_out_seq", "[", "-", "1", "]", "[", "0", "]", ",", "self", ".", "final_outc", ",", "in_out_seq", "[", "2", "*", "i", "]", "[", "1", "]", ",", "kernel_size", "=", "1", ",", "dilation", "=", "1", ",", "\n", "feature_split", "=", "args", ".", "split", ",", "recombine", "=", "args", ".", "recombine", ",", "\n", "fix_seq", "=", "self", ".", "conv_seq", ",", "mean_func", "=", "args", ".", "mean_func", ",", "\n", "ups_mean", "=", "args", ".", "ups_mean", ",", "bias", "=", "True", ")", "\n", "self", ".", "layers_conv", "=", "nn", ".", "ModuleList", "(", "layers_conv", ")", "\n", "self", ".", "layers_bn", "=", "nn", ".", "ModuleList", "(", "layers_bn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.model.srnet.TemporalModelOptimized1f._forward_blocks": [[342, 351], ["srnet.TemporalModelOptimized1f.drop", "range", "srnet.TemporalModelOptimized1f.final_layer", "srnet.TemporalModelOptimized1f.relu", "srnet.TemporalModelOptimized1f.drop", "srnet.TemporalModelOptimized1f.expand_bn", "len", "srnet.TemporalModelOptimized1f.relu", "srnet.TemporalModelOptimized1f.drop", "srnet.TemporalModelOptimized1f.expand_conv", "srnet.TemporalModelOptimized1f.relu"], "methods", ["None"], ["", "def", "_forward_blocks", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "expand_bn", "(", "self", ".", "expand_conv", "(", "x", ")", ")", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "pad", ")", "-", "1", ")", ":", "\n", "            ", "res", "=", "x", "[", ":", ",", ":", ",", "self", ".", "causal_shift", "[", "i", "+", "1", "]", "+", "self", ".", "filter_widths", "[", "i", "+", "1", "]", "//", "2", ":", ":", "self", ".", "filter_widths", "[", "i", "+", "1", "]", "]", "\n", "x", "=", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "layers_bn", "[", "2", "*", "i", "]", "(", "self", ".", "layers_conv", "[", "2", "*", "i", "]", "(", "x", ")", ")", ")", ")", "\n", "x", "=", "res", "+", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "layers_bn", "[", "2", "*", "i", "+", "1", "]", "(", "self", ".", "layers_conv", "[", "2", "*", "i", "+", "1", "]", "(", "x", ")", ")", ")", ")", "\n", "", "x", "=", "self", ".", "final_layer", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.group_index.get_input": [[3, 26], ["print", "range", "print", "range", "print", "range", "print", "KeyError", "range"], "function", ["None"], ["def", "get_input", "(", "group", ")", ":", "\n", "    ", "if", "group", "==", "2", ":", "\n", "        ", "print", "(", "'Now group is:'", ",", "group", ")", "\n", "conv_seq", "=", "[", "range", "(", "0", ",", "16", ")", ",", "[", "0", ",", "1", ",", "16", ",", "17", ",", "18", ",", "19", ",", "20", ",", "21", ",", "22", ",", "23", ",", "24", ",", "25", ",", "26", ",", "27", ",", "28", ",", "29", ",", "30", ",", "31", ",", "32", ",", "33", "]", "]", "\n", "final_outc", "=", "55", "\n", "", "elif", "group", "==", "3", ":", "\n", "        ", "print", "(", "'Now group is:'", ",", "group", ")", "\n", "conv_seq", "=", "[", "range", "(", "0", ",", "14", ")", ",", "[", "0", ",", "1", ",", "14", ",", "15", ",", "16", ",", "17", ",", "18", ",", "19", ",", "20", ",", "21", "]", ",", "\n", "[", "0", ",", "1", ",", "22", ",", "23", ",", "24", ",", "25", ",", "26", ",", "27", ",", "28", ",", "29", ",", "30", ",", "31", ",", "32", ",", "33", "]", "]", "\n", "final_outc", "=", "58", "\n", "", "elif", "group", "==", "5", ":", "\n", "        ", "print", "(", "'Now group is:'", ",", "group", ")", "\n", "conv_seq", "=", "[", "range", "(", "0", ",", "8", ")", ",", "[", "0", ",", "1", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", "]", ",", "[", "0", ",", "1", ",", "14", ",", "15", ",", "16", ",", "17", ",", "18", ",", "19", ",", "20", ",", "21", "]", ",", "\n", "[", "0", ",", "1", ",", "22", ",", "23", ",", "24", ",", "25", ",", "26", ",", "27", "]", ",", "[", "0", ",", "1", ",", "28", ",", "29", ",", "30", ",", "31", ",", "32", ",", "33", "]", "]", "\n", "final_outc", "=", "64", "\n", "", "elif", "group", "==", "1", ":", "\n", "        ", "print", "(", "'Now group is:'", ",", "group", ")", "\n", "conv_seq", "=", "[", "range", "(", "0", ",", "34", ")", "]", "\n", "final_outc", "=", "51", "\n", "", "else", ":", "\n", "        ", "raise", "KeyError", "(", "'Invalid group number!'", ")", "\n", "\n", "", "return", "conv_seq", ",", "final_outc", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.group_index.shrink_output": [[28, 47], ["torch.cat", "torch.cat", "torch.cat", "KeyError"], "function", ["None"], ["", "def", "shrink_output", "(", "x", ")", ":", "\n", "    ", "num_joints_out", "=", "x", ".", "shape", "[", "-", "1", "]", "\n", "pose_dim", "=", "3", "# means [X,Y,Z]: three values", "\n", "if", "num_joints_out", "==", "1", ":", "\n", "        ", "x", "=", "x", "[", ":", ",", ":", ",", ":", "pose_dim", "]", "\n", "", "elif", "num_joints_out", "==", "64", ":", "#Group = 5", "\n", "        ", "x", "=", "torch", ".", "cat", "(", "[", "x", "[", ":", ",", ":", ",", ":", "(", "4", "*", "pose_dim", ")", "]", ",", "x", "[", ":", ",", ":", ",", "(", "5", "*", "pose_dim", ")", ":", "(", "8", "*", "pose_dim", ")", "]", ",", "x", "[", ":", ",", ":", ",", "(", "9", "*", "pose_dim", ")", ":", "(", "13", "*", "pose_dim", ")", "]", ",", "x", "[", ":", ",", ":", ",", "(", "14", "*", "pose_dim", ")", ":", "(", "17", "*", "pose_dim", ")", "]", ",", "x", "[", ":", ",", ":", ",", "(", "18", "*", "pose_dim", ")", ":", "(", "21", "*", "pose_dim", ")", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "elif", "num_joints_out", "==", "58", ":", "#Group = 3", "\n", "        ", "x", "=", "torch", ".", "cat", "(", "[", "x", "[", ":", ",", ":", ",", ":", "(", "7", "*", "pose_dim", ")", "]", ",", "x", "[", ":", ",", ":", ",", "(", "8", "*", "pose_dim", ")", ":", "(", "12", "*", "pose_dim", ")", "]", ",", "x", "[", ":", ",", ":", ",", "(", "13", "*", "pose_dim", ")", ":", "(", "19", "*", "pose_dim", ")", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "elif", "num_joints_out", "==", "55", ":", "#Group = 2", "\n", "        ", "x", "=", "torch", ".", "cat", "(", "[", "x", "[", ":", ",", ":", ",", ":", "(", "8", "*", "pose_dim", ")", "]", ",", "x", "[", ":", ",", ":", ",", "(", "9", "*", "pose_dim", ")", ":", "(", "18", "*", "pose_dim", ")", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "elif", "num_joints_out", "==", "52", ":", "#Group = 1", "\n", "        ", "x", "=", "x", "[", ":", ",", ":", ",", ":", "(", "17", "*", "pose_dim", ")", "]", "\n", "", "else", ":", "\n", "        ", "raise", "KeyError", "(", "'Invalid outputs!'", ")", "\n", "", "return", "x", "", "", ""]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.global_module.Generate_Info.__init__": [[6, 41], ["torch.nn.Module.__init__", "sum", "len", "len", "range", "enumerate", "torch.nn.LeakyReLU", "in_group_accmulate.append", "list", "global_module.Generate_Info.groups.append", "sum", "map"], "methods", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.loss.loss_family.L1GaussianRegressionNewFlow.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inc", ",", "outc", ",", "out_seq", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "stride", "=", "1", ",", "modulation", "=", "False", ",", "\n", "group_modulation", "=", "False", ",", "split_modulation", "=", "False", ",", "channelwise", "=", "False", ",", "recombine", "=", "'multiply'", ",", "repeat_concat", "=", "False", ",", "\n", "mean_dim", "=", "None", ",", "global_info", "=", "False", ",", "bias", "=", "None", ")", ":", "\n", "        ", "super", "(", "Generate_Info", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "in_channel_group", "=", "inc", "\n", "self", ".", "in_channel", "=", "sum", "(", "inc", ")", "\n", "self", ".", "out_channel", "=", "outc", "\n", "self", ".", "out_seq", "=", "out_seq", "\n", "self", ".", "in_group_num", "=", "len", "(", "inc", ")", "\n", "self", ".", "out_group_num", "=", "len", "(", "out_seq", ")", "\n", "self", ".", "cat_num", "=", "mean_dim", "#List", "\n", "# Experiment Setting", "\n", "self", ".", "modulation", "=", "modulation", "\n", "self", ".", "group_modulation", "=", "group_modulation", "\n", "self", ".", "split_modulation", "=", "split_modulation", "\n", "self", ".", "channelwise", "=", "channelwise", "\n", "self", ".", "global_info", "=", "global_info", "\n", "\n", "# Operators of combination info.", "\n", "self", ".", "recombine", "=", "recombine", "\n", "\n", "self", ".", "repeat_concat", "=", "repeat_concat", "\n", "in_group_accmulate", "=", "[", "0", "]", "\n", "self", ".", "groups", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "in_group_num", ")", ":", "\n", "            ", "in_group_accmulate", ".", "append", "(", "sum", "(", "self", ".", "in_channel_group", "[", ":", "i", "+", "1", "]", ")", ")", "\n", "", "for", "index", ",", "i", "in", "enumerate", "(", "out_seq", ")", ":", "\n", "            ", "indexes", "=", "(", "list", "(", "map", "(", "lambda", "x", ":", "[", "in_group_accmulate", "[", "x", "]", ",", "in_group_accmulate", "[", "x", "+", "1", "]", "]", ",", "i", ")", ")", ")", "\n", "self", ".", "groups", ".", "append", "(", "indexes", ")", "\n", "\n", "", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.01", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.global_module.Generate_Info._set_lr": [[42, 46], ["range", "range", "len", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_set_lr", "(", "module", ",", "grad_input", ",", "grad_output", ")", ":", "\n", "        ", "grad_input", "=", "(", "grad_input", "[", "i", "]", "*", "0.1", "for", "i", "in", "range", "(", "len", "(", "grad_input", ")", ")", ")", "\n", "grad_output", "=", "(", "grad_output", "[", "i", "]", "*", "0.1", "for", "i", "in", "range", "(", "len", "(", "grad_output", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.global_module.Generate_Info.forward": [[47, 53], ["global_module.Generate_Info._forward", "global_module.Generate_Info._part_forward"], "methods", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.global_module.With_all_joints._forward", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.global_module.With_other_joints._part_forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "global_info", "==", "'all'", ":", "\n", "            ", "m", "=", "self", ".", "_forward", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "m", "=", "self", ".", "_part_forward", "(", "x", ")", "\n", "", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.global_module.With_all_joints.__init__": [[55, 103], ["global_module.Generate_Info.__init__", "enumerate", "print", "torch.nn.Conv1d", "torch.nn.init.constant_", "global_module.With_all_joints.m_conv.register_backward_hook", "print", "enumerate", "torch.nn.ModuleList", "print", "range", "torch.nn.ModuleList", "sum", "print", "torch.nn.Conv1d", "torch.nn.init.constant_", "global_module.With_all_joints.m_conv.register_backward_hook", "sum", "group_mo.append", "torch.nn.init.constant_", "group_mo[].register_backward_hook", "len", "torch.nn.init.constant_", "m_conv[].register_backward_hook", "map", "map", "torch.nn.Conv1d", "m_conv.append", "print", "m_conv.append", "print", "m_conv.append", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d"], "methods", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.loss.loss_family.L1GaussianRegressionNewFlow.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "With_all_joints", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\"\"\"\n        Usage: Inputs are all joints information, which can be used to generate three different learnable values:\n                1.Global modulation; 2.Group-wise modulation. 3.Channel-wise modulation. \n                For each of the above format, it can be combined with group convolution by [Addition] and [Multiply].\n        \"\"\"", "\n", "if", "self", ".", "modulation", ":", "\n", "            ", "print", "(", "'Use overall global-joint modulation for the all groups'", ")", "\n", "self", ".", "m_conv", "=", "nn", ".", "Conv1d", "(", "self", ".", "in_channel", ",", "out_channels", "=", "self", ".", "kernel_size", ",", "kernel_size", "=", "self", ".", "kernel_size", ",", "dilation", "=", "self", ".", "dilation", ",", "stride", "=", "self", ".", "stride", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "m_conv", ".", "weight", ",", "0", ")", "\n", "self", ".", "m_conv", ".", "register_backward_hook", "(", "self", ".", "_set_lr", ")", "\n", "\n", "", "if", "self", ".", "group_modulation", ":", "\n", "            ", "print", "(", "'Use [group-wise] modulation for each group'", ")", "\n", "group_mo", "=", "[", "]", "\n", "for", "index", ",", "i", "in", "enumerate", "(", "self", ".", "out_seq", ")", ":", "\n", "                ", "in_ch", "=", "sum", "(", "map", "(", "lambda", "x", ":", "self", ".", "in_channel_group", "[", "x", "]", ",", "i", ")", ")", "\n", "group_mo", ".", "append", "(", "nn", ".", "Conv1d", "(", "in_ch", ",", "self", ".", "kernel_size", ",", "kernel_size", "=", "self", ".", "kernel_size", ",", "stride", "=", "self", ".", "stride", ",", "dilation", "=", "self", ".", "dilation", ")", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "group_mo", "[", "index", "]", ".", "weight", ",", "0", ")", "\n", "group_mo", "[", "index", "]", ".", "register_backward_hook", "(", "self", ".", "_set_lr", ")", "\n", "", "self", ".", "group_mo", "=", "nn", ".", "ModuleList", "(", "group_mo", ")", "\n", "\n", "", "if", "self", ".", "split_modulation", ":", "\n", "            ", "m_conv", "=", "[", "]", "\n", "print", "(", "'Use Split [global-joint] modulation for each group'", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "out_seq", ")", ")", ":", "\n", "                ", "if", "self", ".", "recombine", "==", "'concat'", ":", "\n", "                    ", "if", "self", ".", "repeat_concat", ":", "\n", "                        ", "print", "(", "'Use [Repeated values for concat]'", ")", "\n", "m_conv", ".", "append", "(", "nn", ".", "Conv1d", "(", "self", ".", "in_channel", ",", "out_channels", "=", "self", ".", "kernel_size", ",", "kernel_size", "=", "self", ".", "kernel_size", ",", "dilation", "=", "self", ".", "dilation", ",", "stride", "=", "self", ".", "stride", ")", ")", "\n", "", "else", ":", "\n", "                        ", "print", "(", "'Use [different values for concat]'", ")", "\n", "m_conv", ".", "append", "(", "nn", ".", "Conv1d", "(", "self", ".", "in_channel", ",", "out_channels", "=", "self", ".", "cat_num", "[", "i", "]", "*", "self", ".", "kernel_size", ",", "kernel_size", "=", "self", ".", "kernel_size", ",", "dilation", "=", "self", ".", "dilation", ",", "stride", "=", "self", ".", "stride", ")", ")", "\n", "", "", "else", ":", "\n", "                    ", "m_conv", ".", "append", "(", "nn", ".", "Conv1d", "(", "self", ".", "in_channel", ",", "out_channels", "=", "self", ".", "kernel_size", ",", "kernel_size", "=", "self", ".", "kernel_size", ",", "dilation", "=", "self", ".", "dilation", ",", "stride", "=", "self", ".", "stride", ")", ")", "\n", "", "nn", ".", "init", ".", "constant_", "(", "m_conv", "[", "i", "]", ".", "weight", ",", "0", ")", "\n", "m_conv", "[", "i", "]", ".", "register_backward_hook", "(", "self", ".", "_set_lr", ")", "\n", "", "self", ".", "m_conv", "=", "nn", ".", "ModuleList", "(", "m_conv", ")", "\n", "\n", "", "in_ch_sum", "=", "0", "\n", "for", "index", ",", "i", "in", "enumerate", "(", "self", ".", "out_seq", ")", ":", "\n", "            ", "in_ch_sum", "+=", "sum", "(", "map", "(", "lambda", "x", ":", "self", ".", "in_channel_group", "[", "x", "]", ",", "i", ")", ")", "\n", "", "if", "self", ".", "channelwise", ":", "\n", "            ", "print", "(", "'Use overall global-joint channelwise modulation for the all groups'", ")", "\n", "self", ".", "m_conv", "=", "nn", ".", "Conv1d", "(", "self", ".", "in_channel", ",", "out_channels", "=", "in_ch_sum", "*", "self", ".", "kernel_size", ",", "kernel_size", "=", "self", ".", "kernel_size", ",", "dilation", "=", "self", ".", "dilation", ",", "stride", "=", "self", ".", "stride", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "m_conv", ".", "weight", ",", "0", ")", "\n", "self", ".", "m_conv", ".", "register_backward_hook", "(", "self", ".", "_set_lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.global_module.With_all_joints._forward": [[104, 115], ["global_module.With_all_joints._get_learnable_shift", "global_module.With_all_joints._get_learnable_scale", "global_module.With_all_joints._get_concat", "print"], "methods", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.global_module.With_other_joints._get_learnable_shift", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.global_module.With_other_joints._get_learnable_scale", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.global_module.With_all_joints._get_concat"], ["", "", "def", "_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_ori", ",", "x_full", "=", "x", "[", "0", "]", ",", "x", "[", "1", "]", "\n", "if", "self", ".", "recombine", "==", "'add'", ":", "\n", "            ", "m", "=", "self", ".", "_get_learnable_shift", "(", "x_ori", ",", "x_full", ")", "\n", "", "elif", "self", ".", "recombine", "==", "'multiply'", ":", "\n", "            ", "m", "=", "self", ".", "_get_learnable_scale", "(", "x_ori", ",", "x_full", ")", "\n", "", "elif", "self", ".", "recombine", "==", "'concat'", ":", "\n", "            ", "m", "=", "self", ".", "_get_concat", "(", "x_ori", ",", "self", ".", "cat_num", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Error: There is no gate! Please choose [addition] or [multiply] operator'", ")", "\n", "", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.global_module.With_all_joints._get_concat": [[116, 127], ["range", "global_module.With_all_joints.relu", "global_module.reshape_with_kernel", "m.append", "torch.cat", "range"], "methods", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.global_module.reshape_with_kernel"], ["", "def", "_get_concat", "(", "self", ",", "x", ",", "cat_num", ")", ":", "\n", "        ", "if", "self", ".", "split_modulation", ":", "\n", "# Use all joint info to generate some dimension for each group", "\n", "            ", "m", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "out_group_num", ")", ":", "\n", "                ", "m1", "=", "self", ".", "relu", "(", "self", ".", "m_conv", "[", "i", "]", "(", "x", ")", ")", "\n", "m1", "=", "reshape_with_kernel", "(", "m1", ",", "self", ".", "kernel_size", ")", "\n", "if", "self", ".", "repeat_concat", ":", "\n", "                    ", "m1", "=", "torch", ".", "cat", "(", "[", "m1", "for", "_", "in", "range", "(", "cat_num", "[", "i", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "m", ".", "append", "(", "m1", ")", "\n", "", "", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.global_module.With_all_joints._get_learnable_scale": [[128, 154], ["torch.sigmoid", "torch.cat.contiguous().permute().unsqueeze", "torch.cat", "global_module.With_all_joints.m_conv", "torch.sigmoid", "global_module.reshape_with_kernel", "enumerate", "torch.cat", "torch.cat.contiguous().permute", "global_module.With_all_joints.m_conv", "torch.cat", "torch.sigmoid.contiguous().permute().unsqueeze", "torch.cat", "m_out.append", "range", "xs.append", "torch.sigmoid", "torch.cat.contiguous", "x_full.size", "torch.sigmoid", "torch.sigmoid.contiguous().permute", "range", "torch.sigmoid.contiguous", "torch.cat.size"], "methods", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.global_module.reshape_with_kernel"], ["", "def", "_get_learnable_scale", "(", "self", ",", "x", ",", "x_full", ")", ":", "\n", "        ", "if", "self", ".", "modulation", ":", "\n", "            ", "m", "=", "torch", ".", "sigmoid", "(", "self", ".", "m_conv", "(", "x", ")", ")", "\n", "m", "=", "m", ".", "contiguous", "(", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "m", "=", "torch", ".", "cat", "(", "[", "m", "for", "_", "in", "range", "(", "x_full", ".", "size", "(", "1", ")", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "elif", "self", ".", "channelwise", ":", "\n", "            ", "m1", "=", "torch", ".", "sigmoid", "(", "self", ".", "m_conv", "(", "x", ")", ")", "\n", "m", "=", "reshape_with_kernel", "(", "m1", ",", "self", ".", "kernel_size", ")", "\n", "", "else", ":", "\n", "            ", "m_out", "=", "[", "]", "\n", "for", "i", ",", "group", "in", "enumerate", "(", "self", ".", "groups", ")", ":", "\n", "                ", "indexes", "=", "group", "\n", "xs", "=", "[", "]", "\n", "for", "index", "in", "indexes", ":", "\n", "                    ", "xs", ".", "append", "(", "x", "[", ":", ",", "index", "[", "0", "]", ":", "index", "[", "1", "]", "]", ")", "\n", "", "x_out", "=", "torch", ".", "cat", "(", "xs", ",", "dim", "=", "1", ")", "\n", "if", "self", ".", "split_modulation", ":", "\n", "                    ", "m1", "=", "torch", ".", "sigmoid", "(", "self", ".", "m_conv", "[", "i", "]", "(", "x", ")", ")", "\n", "", "elif", "self", ".", "group_modulation", ":", "\n", "                    ", "m1", "=", "torch", ".", "sigmoid", "(", "self", ".", "group_mo", "[", "i", "]", "(", "x_out", ")", ")", "\n", "", "m1", "=", "m1", ".", "contiguous", "(", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "m1", "=", "torch", ".", "cat", "(", "[", "m1", "for", "_", "in", "range", "(", "x_out", ".", "size", "(", "1", ")", ")", "]", ",", "dim", "=", "1", ")", "\n", "m_out", ".", "append", "(", "m1", ")", "\n", "", "m", "=", "torch", ".", "cat", "(", "m_out", ",", "dim", "=", "1", ")", "\n", "", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.global_module.With_all_joints._get_learnable_shift": [[155, 181], ["global_module.With_all_joints.relu", "torch.cat.contiguous().permute().unsqueeze", "torch.cat", "global_module.With_all_joints.m_conv", "global_module.With_all_joints.relu", "global_module.reshape_with_kernel", "enumerate", "torch.cat", "torch.cat.contiguous().permute", "global_module.With_all_joints.m_conv", "torch.cat", "global_module.With_all_joints.contiguous().permute().unsqueeze", "torch.cat", "m_out.append", "range", "xs.append", "global_module.With_all_joints.relu", "torch.cat.contiguous", "x_full.size", "global_module.With_all_joints.relu", "global_module.With_all_joints.contiguous().permute", "range", "global_module.With_all_joints.contiguous", "torch.cat.size"], "methods", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.global_module.reshape_with_kernel"], ["", "def", "_get_learnable_shift", "(", "self", ",", "x", ",", "x_full", ")", ":", "\n", "        ", "if", "self", ".", "modulation", ":", "\n", "            ", "m", "=", "self", ".", "relu", "(", "self", ".", "m_conv", "(", "x", ")", ")", "\n", "m", "=", "m", ".", "contiguous", "(", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "m", "=", "torch", ".", "cat", "(", "[", "m", "for", "_", "in", "range", "(", "x_full", ".", "size", "(", "1", ")", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "elif", "self", ".", "channelwise", ":", "\n", "            ", "m1", "=", "self", ".", "relu", "(", "self", ".", "m_conv", "(", "x", ")", ")", "\n", "m", "=", "reshape_with_kernel", "(", "m1", ",", "self", ".", "kernel_size", ")", "\n", "", "else", ":", "\n", "            ", "m_out", "=", "[", "]", "\n", "for", "i", ",", "group", "in", "enumerate", "(", "self", ".", "groups", ")", ":", "\n", "                ", "indexes", "=", "group", "\n", "xs", "=", "[", "]", "\n", "for", "index", "in", "indexes", ":", "\n", "                    ", "xs", ".", "append", "(", "x", "[", ":", ",", "index", "[", "0", "]", ":", "index", "[", "1", "]", "]", ")", "\n", "", "x_out", "=", "torch", ".", "cat", "(", "xs", ",", "dim", "=", "1", ")", "\n", "if", "self", ".", "split_modulation", ":", "\n", "                    ", "m1", "=", "self", ".", "relu", "(", "self", ".", "m_conv", "[", "i", "]", "(", "x", ")", ")", "\n", "", "elif", "self", ".", "group_modulation", ":", "\n", "                    ", "m1", "=", "self", ".", "relu", "(", "self", ".", "group_mo", "[", "i", "]", "(", "x_out", ")", ")", "\n", "", "m1", "=", "m1", ".", "contiguous", "(", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "m1", "=", "torch", ".", "cat", "(", "[", "m1", "for", "_", "in", "range", "(", "x_out", ".", "size", "(", "1", ")", ")", "]", ",", "dim", "=", "1", ")", "\n", "m_out", ".", "append", "(", "m1", ")", "\n", "", "m", "=", "torch", ".", "cat", "(", "m_out", ",", "dim", "=", "1", ")", "\n", "", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.global_module.With_other_joints.__init__": [[183, 238], ["global_module.Generate_Info.__init__", "range", "torch.nn.ModuleList", "print", "range", "torch.nn.ModuleList", "print", "range", "torch.nn.ModuleList", "len", "layers_bn.append", "len", "torch.nn.init.constant_", "m_conv[].register_backward_hook", "len", "torch.nn.BatchNorm1d", "m_conv.append", "print", "m_conv.append", "print", "m_conv.append", "torch.nn.Conv1d", "print", "m_conv.append", "torch.nn.init.constant_", "m_conv[].register_backward_hook", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d"], "methods", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.loss.loss_family.L1GaussianRegressionNewFlow.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inc", ",", "outc", ",", "out_seq", ",", "kernel_size", ",", "padding", ",", "dilation", ",", "stride", ",", "split_modulation", ",", "\n", "recombine", ",", "repeat_concat", ",", "in_c", ",", "mean_func", ",", "mean_dim", ",", "ups_mean", ")", ":", "\n", "        ", "\"\"\"\n        Usage: Inputs from [Out of the group] Joints to get their information that can divided into two formats:\n                1.Learnable local modulation. 2. Manual function,e.g. Mean opertation\n                For each of the above format, it can be combined with group convolution by [Addition], [Multiply] and [Concat].\n        :param args: from parents args\n        :param kwargs: from parents kwargs\n        :param in_channel: different group has different in channel number.[Sum up: Other joints channel number]\n        :param mean_dim: The output number of the mean_function. e.g. 1, group number or satisfing the ratio for addition/multipy/concat\n        \"\"\"", "\n", "super", "(", "With_other_joints", ",", "self", ")", ".", "__init__", "(", "inc", ",", "outc", ",", "out_seq", ",", "kernel_size", ",", "padding", ",", "dilation", ",", "stride", ",", "split_modulation", ",", "recombine", ",", "repeat_concat", ")", "\n", "\n", "self", ".", "split_modulation", "=", "split_modulation", "\n", "self", ".", "mean_func", "=", "mean_func", "\n", "self", ".", "cat_num", "=", "mean_dim", "\n", "\n", "self", ".", "in_channel", "=", "in_c", "\n", "self", ".", "ups_mean", "=", "ups_mean", "\n", "# Experiment operators", "\n", "self", ".", "recombine", "=", "recombine", "\n", "self", ".", "repeat_concat", "=", "repeat_concat", "\n", "if", "self", ".", "recombine", "==", "'multiply'", ":", "\n", "            ", "layers_bn", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "out_seq", ")", ")", ":", "\n", "                ", "layers_bn", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "self", ".", "kernel_size", ",", "momentum", "=", "0.1", ")", ")", "\n", "", "self", ".", "layers_bn", "=", "nn", ".", "ModuleList", "(", "layers_bn", ")", "\n", "\n", "", "if", "self", ".", "split_modulation", ":", "\n", "            ", "m_conv", "=", "[", "]", "\n", "print", "(", "'Use Split [Other-joint] modulation for each group'", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "out_seq", ")", ")", ":", "\n", "                ", "if", "self", ".", "recombine", "==", "'concat'", ":", "\n", "                    ", "if", "self", ".", "repeat_concat", ":", "\n", "                        ", "print", "(", "'Use [Repeated values for concat]'", ")", "\n", "m_conv", ".", "append", "(", "nn", ".", "Conv1d", "(", "self", ".", "in_channel", "[", "i", "]", ",", "out_channels", "=", "self", ".", "kernel_size", ",", "kernel_size", "=", "self", ".", "kernel_size", ",", "dilation", "=", "self", ".", "dilation", ",", "stride", "=", "self", ".", "stride", ")", ")", "\n", "", "else", ":", "\n", "                        ", "print", "(", "'Use [Different values for concat]'", ")", "\n", "m_conv", ".", "append", "(", "nn", ".", "Conv1d", "(", "self", ".", "in_channel", "[", "i", "]", ",", "out_channels", "=", "self", ".", "cat_num", "[", "i", "]", "*", "self", ".", "kernel_size", ",", "kernel_size", "=", "self", ".", "kernel_size", ",", "dilation", "=", "self", ".", "dilation", ",", "stride", "=", "self", ".", "stride", ")", ")", "\n", "", "", "else", ":", "\n", "                    ", "m_conv", ".", "append", "(", "nn", ".", "Conv1d", "(", "self", ".", "in_channel", "[", "i", "]", ",", "out_channels", "=", "self", ".", "kernel_size", ",", "kernel_size", "=", "self", ".", "kernel_size", ",", "dilation", "=", "self", ".", "dilation", ",", "stride", "=", "self", ".", "stride", ")", ")", "\n", "", "nn", ".", "init", ".", "constant_", "(", "m_conv", "[", "i", "]", ".", "weight", ",", "0", ")", "\n", "m_conv", "[", "i", "]", ".", "register_backward_hook", "(", "self", ".", "_set_lr", ")", "\n", "", "self", ".", "m_conv", "=", "nn", ".", "ModuleList", "(", "m_conv", ")", "\n", "", "if", "self", ".", "mean_func", ":", "\n", "            ", "m_conv", "=", "[", "]", "\n", "print", "(", "'Use Split [Other-joint] manual mean values for each group'", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "out_seq", ")", ")", ":", "\n", "                ", "if", "self", ".", "recombine", "==", "'concat'", ":", "\n", "                    ", "if", "self", ".", "ups_mean", ":", "\n", "                        ", "print", "(", "'Use [upsampling mean value] for concat'", ")", "\n", "m_conv", ".", "append", "(", "nn", ".", "Conv1d", "(", "1", ",", "out_channels", "=", "self", ".", "cat_num", "[", "i", "]", "*", "self", ".", "kernel_size", ",", "kernel_size", "=", "self", ".", "kernel_size", ",", "dilation", "=", "self", ".", "dilation", ",", "stride", "=", "self", ".", "stride", ")", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m_conv", "[", "i", "]", ".", "weight", ",", "0", ")", "\n", "m_conv", "[", "i", "]", ".", "register_backward_hook", "(", "self", ".", "_set_lr", ")", "\n", "", "", "", "self", ".", "m_conv", "=", "nn", ".", "ModuleList", "(", "m_conv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.global_module.With_other_joints._part_forward": [[239, 251], ["len", "len", "len", "global_module.With_other_joints._get_learnable_shift", "global_module.With_other_joints._get_learnable_scale", "global_module.With_other_joints._get_value", "print"], "methods", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.global_module.With_other_joints._get_learnable_shift", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.global_module.With_other_joints._get_learnable_scale", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.global_module.With_other_joints._get_value"], ["", "", "def", "_part_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_other", ",", "x_self", "=", "x", "[", "0", "]", ",", "x", "[", "1", "]", "\n", "assert", "len", "(", "x_other", ")", "==", "len", "(", "self", ".", "out_seq", ")", "==", "len", "(", "x_self", ")", "\n", "if", "self", ".", "recombine", "==", "'add'", ":", "\n", "            ", "m", "=", "self", ".", "_get_learnable_shift", "(", "x_other", ",", "x_self", ")", "\n", "", "elif", "self", ".", "recombine", "==", "'multiply'", ":", "\n", "            ", "m", "=", "self", ".", "_get_learnable_scale", "(", "x_other", ",", "x_self", ")", "\n", "", "elif", "self", ".", "recombine", "==", "'concat'", ":", "\n", "            ", "m", "=", "self", ".", "_get_value", "(", "x_other", ",", "x_self", ",", "self", ".", "cat_num", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Error: There is no gate! Please choose [addition] or [multiply] or [concat] operator'", ")", "\n", "", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.global_module.With_other_joints._get_learnable_shift": [[252, 264], ["torch.cat", "range", "global_module.With_other_joints.relu", "torch.cat.contiguous().permute().unsqueeze", "torch.cat", "global_module.With_other_joints.append", "global_module.With_other_joints._mean_func", "torch.cat.contiguous().permute", "range", "torch.cat.contiguous", "global_module.With_other_joints.size"], "methods", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.global_module.With_other_joints._mean_func"], ["", "def", "_get_learnable_shift", "(", "self", ",", "x", ",", "x_self", ")", ":", "\n", "        ", "if", "self", ".", "split_modulation", ":", "\n", "            ", "m_out", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "out_group_num", ")", ":", "\n", "                ", "m1", "=", "self", ".", "relu", "(", "self", ".", "m_conv", "[", "i", "]", "(", "x", "[", "i", "]", ")", ")", "\n", "m1", "=", "m1", ".", "contiguous", "(", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "m1", "=", "torch", ".", "cat", "(", "[", "m1", "for", "_", "in", "range", "(", "x_self", "[", "i", "]", ".", "size", "(", "1", ")", ")", "]", ",", "dim", "=", "1", ")", "\n", "m_out", ".", "append", "(", "m1", ")", "\n", "", "", "elif", "self", ".", "mean_func", ":", "\n", "            ", "m_out", "=", "self", ".", "_mean_func", "(", "x", ",", "self", ".", "cat_num", ",", "x_self", ")", "\n", "", "m", "=", "torch", ".", "cat", "(", "m_out", ",", "dim", "=", "1", ")", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.global_module.With_other_joints._get_learnable_scale": [[265, 277], ["torch.cat", "range", "torch.sigmoid", "torch.cat.contiguous().permute().unsqueeze", "torch.cat", "global_module.With_other_joints.append", "global_module.With_other_joints._mean_func", "torch.cat.contiguous().permute", "range", "torch.cat.contiguous", "global_module.With_other_joints.size"], "methods", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.global_module.With_other_joints._mean_func"], ["", "def", "_get_learnable_scale", "(", "self", ",", "x", ",", "x_self", ")", ":", "\n", "        ", "if", "self", ".", "split_modulation", ":", "\n", "            ", "m_out", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "out_group_num", ")", ":", "\n", "                ", "m1", "=", "torch", ".", "sigmoid", "(", "self", ".", "layers_bn", "[", "i", "]", "(", "self", ".", "m_conv", "[", "i", "]", "(", "x", "[", "i", "]", ")", ")", ")", "\n", "m1", "=", "m1", ".", "contiguous", "(", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "m1", "=", "torch", ".", "cat", "(", "[", "m1", "for", "_", "in", "range", "(", "x_self", "[", "i", "]", ".", "size", "(", "1", ")", ")", "]", ",", "dim", "=", "1", ")", "\n", "m_out", ".", "append", "(", "m1", ")", "\n", "", "", "elif", "self", ".", "mean_func", ":", "\n", "            ", "m_out", "=", "self", ".", "_mean_func", "(", "x", ",", "self", ".", "cat_num", ",", "x_self", ")", "\n", "", "m", "=", "torch", ".", "cat", "(", "m_out", ",", "dim", "=", "1", ")", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.global_module.With_other_joints._get_value": [[278, 291], ["range", "global_module.With_other_joints.relu", "global_module.reshape_with_kernel", "global_module.With_other_joints.append", "global_module.With_other_joints._mean_func", "torch.cat", "range"], "methods", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.global_module.reshape_with_kernel", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.global_module.With_other_joints._mean_func"], ["", "def", "_get_value", "(", "self", ",", "x", ",", "x_self", ",", "cat_num", ")", ":", "\n", "# Get by learnable way", "\n", "        ", "if", "self", ".", "split_modulation", ":", "\n", "            ", "m", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "out_group_num", ")", ":", "\n", "                ", "m1", "=", "self", ".", "relu", "(", "self", ".", "m_conv", "[", "i", "]", "(", "x", "[", "i", "]", ")", ")", "\n", "m1", "=", "reshape_with_kernel", "(", "m1", ",", "self", ".", "kernel_size", ")", "\n", "if", "self", ".", "repeat_concat", ":", "\n", "                    ", "m1", "=", "torch", ".", "cat", "(", "[", "m1", "for", "_", "in", "range", "(", "cat_num", "[", "i", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "m", ".", "append", "(", "m1", ")", "\n", "", "", "elif", "self", ".", "mean_func", ":", "\n", "            ", "m", "=", "self", ".", "_mean_func", "(", "x", ",", "self", ".", "cat_num", ",", "x_self", ")", "\n", "", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.global_module.With_other_joints._mean_func": [[292, 312], ["enumerate", "torch.mean", "out_mean.append", "global_module.reshape_with_kernel", "torch.cat", "torch.cat", "range", "range", "global_module.With_other_joints.size"], "methods", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.global_module.reshape_with_kernel"], ["", "def", "_mean_func", "(", "self", ",", "x", ",", "cat_num", ",", "x_self", ")", ":", "\n", "        ", "\"\"\"\n        Get mean value of each group from all other joints\n        :param x: a list with [other joints] of the group\n        :param cat_num: the repeat channel size\n        :param x_self: a list with [itself joints] of the group\n        :return: the processed mean value\n        \"\"\"", "\n", "out_mean", "=", "[", "]", "\n", "for", "i", ",", "x_g", "in", "enumerate", "(", "x", ")", ":", "\n", "            ", "m_mean", "=", "torch", ".", "mean", "(", "x_g", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "if", "self", ".", "ups_mean", ":", "# Upsample to get more variable values from mean value", "\n", "                ", "m1", "=", "self", ".", "m_conv", "[", "i", "]", "(", "m_mean", ")", "\n", "m1", "=", "reshape_with_kernel", "(", "m1", ",", "self", ".", "kernel_size", ")", "\n", "", "elif", "self", ".", "repeat_concat", ":", "\n", "                ", "m1", "=", "torch", ".", "cat", "(", "[", "m_mean", "for", "_", "in", "range", "(", "cat_num", "[", "i", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "elif", "self", ".", "recombine", "==", "'add'", "or", "'multiply'", ":", "\n", "                ", "m1", "=", "torch", ".", "cat", "(", "[", "m_mean", "for", "_", "in", "range", "(", "x_self", "[", "i", "]", ".", "size", "(", "1", ")", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "out_mean", ".", "append", "(", "m1", ")", "\n", "", "return", "out_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.global_module.reshape_with_kernel": [[313, 318], ["input.unsqueeze", "input.unsqueeze.view", "int"], "function", ["None"], ["", "", "def", "reshape_with_kernel", "(", "input", ",", "kernel_size", ")", ":", "\n", "    ", "B", ",", "C", ",", "K", "=", "input", ".", "shape", "[", "0", "]", ",", "int", "(", "input", ".", "shape", "[", "1", "]", "/", "kernel_size", ")", ",", "input", ".", "shape", "[", "2", "]", "\n", "m1", "=", "input", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", "\n", "m", "=", "m1", ".", "view", "(", "B", ",", "C", ",", "K", ",", "kernel_size", ")", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.flex_layer.FlexGroupLayer.__init__": [[13, 83], ["torch.nn.Module.__init__", "sum", "len", "len", "enumerate", "range", "enumerate", "torch.nn.ModuleList", "sum", "in_group_accmulate.append", "sum", "flex_layer.FlexGroupLayer.out_chs.append", "part_in.append", "list", "flex_layer.FlexGroupLayer.groups.append", "common.common_pytorch.model.srnet_utils.global_module.With_all_joints", "map", "sum", "map", "flex_layer.FlexGroupLayer._keep_ratio", "in_ch_cat_list.append", "in_cat.append", "cat_num.append", "list", "flex_layer.FlexGroupLayer.concat_group.append", "group_conv.append", "group_conv.append", "map", "common.common_pytorch.model.srnet_utils.global_module.With_other_joints", "int", "sum", "map", "torch.nn.Conv1d", "torch.nn.Conv1d", "len", "sum"], "methods", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.loss.loss_family.L1GaussianRegressionNewFlow.__init__", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.flex_layer.FlexGroupLayer._keep_ratio"], ["    ", "def", "__init__", "(", "self", ",", "inc", ",", "outc", ",", "out_seq", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "stride", "=", "1", ",", "\n", "feature_split", "=", "'others'", ",", "recombine", "=", "'multiply'", ",", "repeat_concat", "=", "False", ",", "fix_seq", "=", "None", ",", "mean_func", "=", "False", ",", "ups_mean", "=", "False", ",", "bias", "=", "None", ")", ":", "\n", "        ", "super", "(", "FlexGroupLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "in_channel_group", "=", "inc", "\n", "self", ".", "in_channel", "=", "sum", "(", "inc", ")", "\n", "self", ".", "out_channel", "=", "outc", "\n", "self", ".", "out_seq", "=", "out_seq", "\n", "self", ".", "in_group_num", "=", "len", "(", "inc", ")", "\n", "self", ".", "out_group_num", "=", "len", "(", "out_seq", ")", "\n", "\n", "# Experiment params", "\n", "self", ".", "feature_split", "=", "feature_split", "\n", "\n", "# Operators of combination info.", "\n", "self", ".", "recombine", "=", "recombine", "\n", "self", ".", "fix_seq", "=", "fix_seq", "#Used for concat by the [1st layer ratio]", "\n", "self", ".", "mean_func", "=", "mean_func", "\n", "self", ".", "ups_mean", "=", "ups_mean", "\n", "in_ch_sum", "=", "0", "\n", "for", "index", ",", "i", "in", "enumerate", "(", "out_seq", ")", ":", "\n", "            ", "in_ch_sum", "+=", "sum", "(", "map", "(", "lambda", "x", ":", "self", ".", "in_channel_group", "[", "x", "]", ",", "i", ")", ")", "\n", "", "in_group_accmulate", "=", "[", "0", "]", "\n", "self", ".", "groups", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "in_group_num", ")", ":", "\n", "            ", "in_group_accmulate", ".", "append", "(", "sum", "(", "self", ".", "in_channel_group", "[", ":", "i", "+", "1", "]", ")", ")", "\n", "", "self", ".", "out_chs", "=", "[", "]", "#record each out channels of each conv to computer last group channel number", "\n", "group_conv", "=", "[", "]", "\n", "# Prepare concat", "\n", "cat_num", "=", "[", "]", "\n", "part_in", "=", "[", "]", "#For partial inputs", "\n", "in_cat", "=", "[", "0", "]", "\n", "in_ch_cat_list", "=", "[", "]", "\n", "self", ".", "concat_group", "=", "[", "]", "\n", "for", "index", ",", "i", "in", "enumerate", "(", "out_seq", ")", ":", "\n", "            ", "in_ch", "=", "sum", "(", "map", "(", "lambda", "x", ":", "self", ".", "in_channel_group", "[", "x", "]", ",", "i", ")", ")", "\n", "if", "self", ".", "out_group_num", "==", "1", ":", "\n", "                ", "out_ch", "=", "self", ".", "out_channel", "\n", "", "elif", "index", "==", "len", "(", "out_seq", ")", "-", "1", ":", "\n", "                ", "out_ch", "=", "self", ".", "out_channel", "-", "sum", "(", "self", ".", "out_chs", ")", "\n", "", "else", ":", "\n", "                ", "out_ch", "=", "int", "(", "in_ch", "/", "in_ch_sum", "*", "self", ".", "out_channel", ")", "\n", "", "self", ".", "out_chs", ".", "append", "(", "out_ch", ")", "\n", "part_in", ".", "append", "(", "in_ch_sum", "-", "in_ch", ")", "\n", "if", "self", ".", "recombine", "==", "'concat'", ":", "\n", "                ", "in_ch_cat", ",", "cat_num_", "=", "self", ".", "_keep_ratio", "(", "in_ch", ",", "self", ".", "fix_seq", ",", "index", ",", "added_dim", "=", "1", ",", "by_ratio", "=", "False", ")", "\n", "in_ch_cat_list", ".", "append", "(", "in_ch_cat", ")", "\n", "in_cat", ".", "append", "(", "sum", "(", "in_ch_cat_list", ")", ")", "\n", "cat_num", ".", "append", "(", "cat_num_", ")", "# Store How many additional values can be included?", "\n", "cat_index", "=", "(", "list", "(", "map", "(", "lambda", "x", ":", "[", "in_cat", "[", "x", "]", ",", "in_cat", "[", "x", "+", "1", "]", "]", ",", "[", "index", "]", ")", ")", ")", "\n", "self", ".", "concat_group", ".", "append", "(", "cat_index", ")", "\n", "group_conv", ".", "append", "(", "nn", ".", "Conv1d", "(", "in_ch_cat", ",", "out_ch", ",", "kernel_size", "=", "self", ".", "kernel_size", ",", "stride", "=", "self", ".", "kernel_size", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "                ", "group_conv", ".", "append", "(", "nn", ".", "Conv1d", "(", "in_ch", ",", "out_ch", ",", "kernel_size", "=", "self", ".", "kernel_size", ",", "stride", "=", "self", ".", "kernel_size", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "", "indexes", "=", "(", "list", "(", "map", "(", "lambda", "x", ":", "[", "in_group_accmulate", "[", "x", "]", ",", "in_group_accmulate", "[", "x", "+", "1", "]", "]", ",", "i", ")", ")", ")", "\n", "self", ".", "groups", ".", "append", "(", "indexes", ")", "\n", "", "self", ".", "group_conv", "=", "nn", ".", "ModuleList", "(", "group_conv", ")", "\n", "\n", "# Get information from all joints or other joints", "\n", "if", "self", ".", "feature_split", "==", "'all'", ":", "\n", "            ", "self", ".", "get_all_info", "=", "With_all_joints", "(", "inc", ",", "outc", ",", "out_seq", ",", "kernel_size", ",", "padding", ",", "dilation", ",", "stride", ",", "\n", "modulation", "=", "args", ".", "modulation", ",", "group_modulation", "=", "args", ".", "group_modulation", ",", "split_modulation", "=", "args", ".", "split_modulation", ",", "\n", "channelwise", "=", "args", ".", "channelwise", ",", "recombine", "=", "self", ".", "recombine", ",", "repeat_concat", "=", "args", ".", "repeat_concat", ",", "mean_dim", "=", "cat_num", ",", "global_info", "=", "feature_split", ",", "bias", "=", "None", ")", "\n", "", "elif", "self", ".", "feature_split", "==", "'others'", ":", "\n", "            ", "self", ".", "get_part_info", "=", "With_other_joints", "(", "inc", ",", "outc", ",", "out_seq", ",", "kernel_size", ",", "padding", ",", "dilation", ",", "stride", ",", "\n", "split_modulation", "=", "args", ".", "split_modulation", ",", "recombine", "=", "self", ".", "recombine", ",", "repeat_concat", "=", "args", ".", "repeat_concat", ",", "\n", "in_c", "=", "part_in", ",", "mean_func", "=", "mean_func", ",", "mean_dim", "=", "cat_num", ",", "ups_mean", "=", "ups_mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.flex_layer.FlexGroupLayer._set_lr": [[84, 88], ["range", "range", "len", "len"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_set_lr", "(", "module", ",", "grad_input", ",", "grad_output", ")", ":", "\n", "        ", "grad_input", "=", "(", "grad_input", "[", "i", "]", "*", "0.1", "for", "i", "in", "range", "(", "len", "(", "grad_input", ")", ")", ")", "\n", "grad_output", "=", "(", "grad_output", "[", "i", "]", "*", "0.1", "for", "i", "in", "range", "(", "len", "(", "grad_output", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.flex_layer.FlexGroupLayer.forward": [[90, 159], ["x.data.type", "flex_layer.FlexGroupLayer._split_fc", "flex_layer.FlexGroupLayer._reorganize_sequence", "flex_layer.FlexGroupLayer._get_global_input", "flex_layer.FlexGroupLayer.get_all_info", "len", "flex_layer.FlexGroupLayer._group_conv", "range", "len", "flex_layer.FlexGroupLayer.op_cat", "flex_layer.FlexGroupLayer.op_add", "flex_layer.FlexGroupLayer._group_conv", "flex_layer.FlexGroupLayer._group_conv", "flex_layer.FlexGroupLayer._get_partial_input", "flex_layer.FlexGroupLayer.get_part_info", "KeyError", "len", "flex_layer.FlexGroupLayer.append", "flex_layer.FlexGroupLayer._reorganize_sequence", "KeyError", "len", "flex_layer.FlexGroupLayer.op_cat", "flex_layer.FlexGroupLayer.op_mul", "flex_layer.FlexGroupLayer._reorganize_sequence", "len", "KeyError"], "methods", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.flex_layer.FlexGroupLayer._split_fc", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.flex_layer.FlexGroupLayer._reorganize_sequence", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.flex_layer.FlexGroupLayer._get_global_input", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.flex_layer.FlexGroupLayer._group_conv", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.flex_layer.FlexGroupLayer.op_cat", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.flex_layer.FlexGroupLayer.op_add", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.flex_layer.FlexGroupLayer._group_conv", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.flex_layer.FlexGroupLayer._group_conv", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.flex_layer.FlexGroupLayer._get_partial_input", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.flex_layer.FlexGroupLayer._reorganize_sequence", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.flex_layer.FlexGroupLayer.op_cat", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.flex_layer.FlexGroupLayer.op_mul", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.flex_layer.FlexGroupLayer._reorganize_sequence"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "dtype", "=", "x", ".", "data", ".", "type", "(", ")", "\n", "# Rerank and group input following the joint indexes", "\n", "x_group", ",", "x_full", "=", "self", ".", "_split_fc", "(", "x", ",", "dtype", ")", "\n", "\n", "# Divide the info. source from [all joints] or [other joints] that is out of the group", "\n", "if", "self", ".", "feature_split", "==", "'all'", ":", "\n", "            ", "x_out", "=", "self", ".", "_get_global_input", "(", "x_full", ")", "\n", "# Get additional info from all joints", "\n", "m", "=", "self", ".", "get_all_info", "(", "(", "x", ",", "x_full", ")", ")", "#[B, C, w,N]", "\n", "\n", "", "elif", "self", ".", "feature_split", "==", "'none'", ":", "\n", "# No any other joints info", "\n", "            ", "x_out", "=", "x_full", "\n", "\n", "", "elif", "self", ".", "feature_split", "==", "'others'", ":", "\n", "            ", "x_other", ",", "x_out", "=", "self", ".", "_get_partial_input", "(", "x_full", ")", "\n", "# Get additional info from partial joints", "\n", "m", "=", "self", ".", "get_part_info", "(", "(", "x_other", ",", "x_group", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "KeyError", "(", "'Invalid split strategies, please check srnet_args!'", ")", "\n", "# Re-organize inner sequence of features for preparation of a convolution", "\n", "", "x_off", "=", "self", ".", "_reorganize_sequence", "(", "x_out", ",", "dtype", ")", "\n", "# Since calculate mean value of input will not change temporal dimension, and x_off has changed the temporal dimension. Change m coorrespondingly.", "\n", "if", "self", ".", "mean_func", "and", "not", "self", ".", "ups_mean", ":", "\n", "            ", "if", "self", ".", "recombine", "==", "'concat'", ":", "\n", "                ", "m1", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "out_seq", ")", ")", ":", "\n", "                    ", "m1", ".", "append", "(", "self", ".", "_reorganize_sequence", "(", "m", "[", "i", "]", ",", "dtype", ")", ")", "\n", "", "", "elif", "self", ".", "recombine", "==", "'add'", "or", "'multiply'", ":", "\n", "                ", "m1", "=", "self", ".", "_reorganize_sequence", "(", "m", ",", "dtype", ")", "\n", "", "else", ":", "\n", "                ", "raise", "KeyError", "(", "'Invalid combination operator, please check srnet_args!'", ")", "\n", "", "m", "=", "m1", "\n", "\n", "# Since use the full input with root joint in each group", "\n", "", "if", "len", "(", "self", ".", "out_chs", ")", "==", "2", ":", "\n", "            ", "new_group", "=", "[", "[", "[", "0", ",", "16", "]", "]", ",", "[", "[", "16", ",", "36", "]", "]", "]", "\n", "", "elif", "len", "(", "self", ".", "out_chs", ")", "==", "1", ":", "\n", "            ", "new_group", "=", "[", "[", "[", "0", ",", "34", "]", "]", "]", "\n", "", "elif", "len", "(", "self", ".", "out_chs", ")", "==", "3", ":", "\n", "            ", "new_group", "=", "[", "[", "[", "0", ",", "14", "]", "]", ",", "[", "[", "14", ",", "24", "]", "]", ",", "[", "[", "24", ",", "38", "]", "]", "]", "\n", "", "elif", "len", "(", "self", ".", "out_chs", ")", "==", "5", ":", "\n", "            ", "new_group", "=", "[", "[", "[", "0", ",", "8", "]", "]", ",", "[", "[", "8", ",", "16", "]", "]", ",", "[", "[", "16", ",", "26", "]", "]", ",", "[", "[", "26", ",", "34", "]", "]", ",", "[", "[", "34", ",", "42", "]", "]", "]", "\n", "", "else", ":", "\n", "            ", "raise", "KeyError", "(", "'Invalid group number!'", ")", "\n", "\n", "# Do [operations] to aggregate information in each group", "\n", "", "if", "self", ".", "recombine", "==", "'concat'", ":", "\n", "            ", "if", "x_off", ".", "shape", "[", "1", "]", "<", "50", ":", "\n", "                ", "x_", "=", "self", ".", "op_cat", "(", "x_off", ",", "m", ",", "new_group", ")", "\n", "", "elif", "x_off", ".", "shape", "[", "1", "]", "==", "1024", ":", "\n", "                ", "x_", "=", "self", ".", "op_cat", "(", "x_off", ",", "m", ",", "self", ".", "groups", ")", "\n", "", "", "elif", "self", ".", "recombine", "==", "'add'", ":", "\n", "            ", "x_", "=", "self", ".", "op_add", "(", "x_off", ",", "m", ")", "\n", "", "elif", "self", ".", "recombine", "==", "'multiply'", ":", "\n", "            ", "x_", "=", "self", ".", "op_mul", "(", "x_off", ",", "m", ")", "\n", "", "else", ":", "# zero function", "\n", "            ", "x_", "=", "x_off", "\n", "\n", "# Fully connection in each group", "\n", "", "if", "self", ".", "recombine", "==", "'concat'", ":", "\n", "            ", "final_out", "=", "self", ".", "_group_conv", "(", "x_", ",", "self", ".", "concat_group", ")", "\n", "", "else", ":", "\n", "            ", "if", "x_off", ".", "shape", "[", "1", "]", ">", "1000", ":", "\n", "                ", "final_out", "=", "self", ".", "_group_conv", "(", "x_", ",", "self", ".", "groups", ")", "\n", "", "else", ":", "\n", "                ", "final_out", "=", "self", ".", "_group_conv", "(", "x_", ",", "new_group", ")", "\n", "", "", "return", "final_out", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.flex_layer.FlexGroupLayer.op_add": [[160, 162], ["None"], "methods", ["None"], ["", "def", "op_add", "(", "self", ",", "x_out", ",", "m", ")", ":", "\n", "        ", "return", "(", "x_out", "+", "m", ")", "\n", "", "def", "op_mul", "(", "self", ",", "x_out", ",", "m", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.flex_layer.FlexGroupLayer.op_mul": [[162, 164], ["None"], "methods", ["None"], ["", "def", "op_mul", "(", "self", ",", "x_out", ",", "m", ")", ":", "\n", "        ", "return", "(", "x_out", "*", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.flex_layer.FlexGroupLayer.op_cat": [[165, 179], ["enumerate", "torch.cat", "torch.cat", "cat_m.append", "xs.append", "torch.cat"], "methods", ["None"], ["", "def", "op_cat", "(", "self", ",", "x_out", ",", "m", ",", "groups", ")", ":", "\n", "        ", "\"\"\"\n        Usage: Concat by input joints ratio of the first layer, always keep the ratio = N_i : 1; N_i is joint number in the ith group.\n        :return: Concat with other info and adjust the channel size\n        \"\"\"", "\n", "cat_m", "=", "[", "]", "\n", "for", "i", ",", "group", "in", "enumerate", "(", "groups", ")", ":", "\n", "            ", "indexes", "=", "group", "\n", "xs", "=", "[", "]", "\n", "for", "index", "in", "indexes", ":", "\n", "                ", "xs", ".", "append", "(", "x_out", "[", ":", ",", "index", "[", "0", "]", ":", "index", "[", "1", "]", "]", ")", "\n", "", "x_cat", "=", "torch", ".", "cat", "(", "xs", ",", "dim", "=", "1", ")", "\n", "cat_m", ".", "append", "(", "torch", ".", "cat", "(", "[", "x_cat", ",", "m", "[", "i", "]", "]", ",", "dim", "=", "1", ")", ")", "\n", "", "return", "torch", ".", "cat", "(", "cat_m", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.flex_layer.FlexGroupLayer._keep_ratio": [[180, 195], ["len", "int"], "methods", ["None"], ["", "def", "_keep_ratio", "(", "self", ",", "inc_num", ",", "fix_seq", ",", "index", ",", "added_dim", ",", "by_ratio", ")", ":", "\n", "        ", "\"\"\"\n        For concat by a certain ratio, you can change [joint_dim] to give various concat ratios.\n        :param inc_num: input channel number of a group. type:torch.Tensor\n        :param fix_seq: output index sequence of 1st layer, knowing the groups number.\n        :return: a concatenated input channel number\n        \"\"\"", "\n", "ori_size", "=", "len", "(", "fix_seq", "[", "index", "]", ")", "\n", "# add [x,y] dimension", "\n", "if", "by_ratio", ":", "# Add the dimension by ratio. e.g. 20%, 40%...", "\n", "            ", "out_num", "=", "int", "(", "inc_num", "*", "(", "ori_size", "+", "added_dim", ")", "/", "ori_size", ")", "\n", "", "else", ":", "# Add the dimension by discrete values", "\n", "            ", "out_num", "=", "added_dim", "+", "inc_num", "\n", "", "concat_size", "=", "out_num", "-", "inc_num", "\n", "return", "out_num", ",", "concat_size", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.flex_layer.FlexGroupLayer._get_global_input": [[196, 198], ["None"], "methods", ["None"], ["", "def", "_get_global_input", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.flex_layer.FlexGroupLayer._get_partial_input": [[199, 222], ["enumerate", "torch.cat", "flex_layer.FlexGroupLayer.append", "x_other.append", "in_dim.append", "xs.append", "torch.cat"], "methods", ["None"], ["", "def", "_get_partial_input", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Usage: Get inputs as Group representation\n        :param x: all 2d joints inputs, x.shape=[B, 34, T]\n        :param out_seq: output index sequence of each layer\n        :return: 1. x_self: Each group inputs; type: list\n                2. x_other: Out of the group values; type: list\n        \"\"\"", "\n", "x_other", "=", "[", "]", "\n", "x_self", "=", "[", "]", "\n", "in_dim", "=", "[", "]", "\n", "v", "=", "0", "\n", "for", "i", ",", "group", "in", "enumerate", "(", "self", ".", "groups", ")", ":", "\n", "            ", "indexes", "=", "group", "\n", "xs", "=", "[", "]", "\n", "for", "index", "in", "indexes", ":", "\n", "                ", "xs", ".", "append", "(", "x", "[", ":", ",", "index", "[", "0", "]", ":", "index", "[", "1", "]", "]", ")", "\n", "", "x_cat", "=", "torch", ".", "cat", "(", "xs", ",", "dim", "=", "1", ")", "\n", "x_self", ".", "append", "(", "x_cat", ")", "\n", "x_other", ".", "append", "(", "torch", ".", "cat", "(", "[", "x", "[", ":", ",", "0", ":", "v", "]", ",", "x", "[", ":", ",", "(", "v", "+", "x_cat", ".", "shape", "[", "1", "]", ")", ":", "]", "]", ",", "dim", "=", "1", ")", ")", "\n", "in_dim", ".", "append", "(", "x_other", "[", "i", "]", ".", "shape", "[", "1", "]", ")", "\n", "v", "+=", "x_cat", ".", "shape", "[", "1", "]", "\n", "", "return", "x_other", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.flex_layer.FlexGroupLayer._split_fc": [[223, 242], ["enumerate", "torch.cat", "x1.append", "torch.cat", "len", "xs.append", "xs.append", "x[].type", "x[].type"], "methods", ["None"], ["", "def", "_split_fc", "(", "self", ",", "x", ",", "dtype", ")", ":", "\n", "        ", "\"\"\"\n        Usage: Split channels into groups\n        :param x: Input features\n        :return: x1: each group features. type: list\n                 x_cat: concatenate each group features. type:torch.Tensor\n        \"\"\"", "\n", "x1", "=", "[", "]", "\n", "for", "i", ",", "group", "in", "enumerate", "(", "self", ".", "groups", ")", ":", "\n", "            ", "indexes", "=", "group", "\n", "xs", "=", "[", "]", "\n", "for", "index", "in", "indexes", ":", "\n", "                ", "if", "len", "(", "index", ")", "==", "1", ":", "\n", "                    ", "xs", ".", "append", "(", "x", "[", ":", ",", "index", "[", "0", "]", ":", "index", "[", "0", "]", "+", "1", "]", ".", "type", "(", "dtype", ")", ")", "\n", "", "else", ":", "\n", "                    ", "xs", ".", "append", "(", "x", "[", ":", ",", "index", "[", "0", "]", ":", "index", "[", "1", "]", "]", ".", "type", "(", "dtype", ")", ")", "\n", "", "", "x1", ".", "append", "(", "torch", ".", "cat", "(", "xs", ",", "dim", "=", "1", ")", ")", "#Each group features", "\n", "", "x_cat", "=", "torch", ".", "cat", "(", "x1", ",", "dim", "=", "1", ")", "\n", "return", "x1", ",", "x_cat", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.flex_layer.FlexGroupLayer._group_conv": [[243, 264], ["enumerate", "torch.cat", "torch.cat", "flex_layer.FlexGroupLayer._reshape_x_offset", "outs.append", "len", "xs.append", "xs.append"], "methods", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.flex_layer.FlexGroupLayer._reshape_x_offset"], ["", "def", "_group_conv", "(", "self", ",", "x", ",", "groups", ")", ":", "\n", "        ", "\"\"\"\n        Usage: fully connection in a group\n        :param x: features\n        :param groups: depend on concat or not of different input size\n        :return: final outputs after group conv.\n        \"\"\"", "\n", "outs", "=", "[", "]", "\n", "ks", "=", "self", ".", "kernel_size", "\n", "for", "i", ",", "group", "in", "enumerate", "(", "groups", ")", ":", "\n", "            ", "indexes", "=", "group", "\n", "xs", "=", "[", "]", "\n", "for", "index", "in", "indexes", ":", "\n", "                ", "if", "len", "(", "index", ")", "==", "1", ":", "\n", "                    ", "xs", ".", "append", "(", "x", "[", ":", ",", "index", "[", "0", "]", ":", "index", "[", "0", "]", "+", "1", "]", ")", "\n", "", "else", ":", "\n", "                    ", "xs", ".", "append", "(", "x", "[", ":", ",", "index", "[", "0", "]", ":", "index", "[", "1", "]", "]", ")", "\n", "", "", "x1", "=", "torch", ".", "cat", "(", "xs", ",", "dim", "=", "1", ")", "\n", "x_out", "=", "self", ".", "_reshape_x_offset", "(", "x1", ",", "ks", ")", "\n", "outs", ".", "append", "(", "self", ".", "group_conv", "[", "i", "]", "(", "x_out", ")", ")", "\n", "", "return", "torch", ".", "cat", "(", "outs", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.flex_layer.FlexGroupLayer._reorganize_sequence": [[265, 292], ["flex_layer.FlexGroupLayer._get_p", "torch.clamp.contiguous().permute", "torch.clamp", "torch.autograd.Variable().floor", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "flex_layer.FlexGroupLayer._get_x_q", "flex_layer.FlexGroupLayer._get_x_q", "torch.clamp.contiguous", "x.size", "torch.autograd.Variable", "torch.clamp", "torch.clamp", "q_t[].type_as", "q_b[].type_as", "torch.clamp", "g_t.unsqueeze", "g_b.unsqueeze", "x.size", "x.size", "x.size"], "methods", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.flex_layer.FlexGroupLayer._get_p", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.flex_layer.FlexGroupLayer._get_x_q", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.flex_layer.FlexGroupLayer._get_x_q"], ["", "def", "_reorganize_sequence", "(", "self", ",", "x", ",", "dtype", ")", ":", "\n", "        ", "N", "=", "self", ".", "kernel_size", "\n", "# (b, N, w)", "\n", "p", "=", "self", ".", "_get_p", "(", "x", ",", "dtype", ")", "\n", "# (b, w', N)", "\n", "p", "=", "p", ".", "contiguous", "(", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "p", "=", "torch", ".", "clamp", "(", "p", "[", "...", ",", "0", ":", "N", "]", ",", "0", ",", "x", ".", "size", "(", "2", ")", "-", "1", ")", "# add", "\n", "q_lt", "=", "Variable", "(", "p", ".", "data", ",", "requires_grad", "=", "False", ")", ".", "floor", "(", ")", "\n", "q_rb", "=", "q_lt", "+", "1", "\n", "\n", "q_t", "=", "torch", ".", "clamp", "(", "q_lt", "[", "...", ",", "0", ":", "N", "]", ",", "0", ",", "x", ".", "size", "(", "2", ")", "-", "1", ")", ".", "long", "(", ")", "# (b,w,N)", "\n", "q_b", "=", "torch", ".", "clamp", "(", "q_rb", "[", "...", ",", "0", ":", "N", "]", ",", "0", ",", "x", ".", "size", "(", "2", ")", ")", ".", "long", "(", ")", "\n", "\n", "# bilinear kernel (b, w, N)", "\n", "g_t", "=", "1", "+", "(", "q_t", "[", "...", ",", ":", "N", "]", ".", "type_as", "(", "p", ")", "-", "p", "[", "...", ",", ":", "N", "]", ")", "\n", "g_b", "=", "1", "-", "(", "q_b", "[", "...", ",", ":", "N", "]", ".", "type_as", "(", "p", ")", "-", "p", "[", "...", ",", ":", "N", "]", ")", "\n", "# This operation is for p'value >= 4.0, and make sure g_t+g_b=1", "\n", "q_b", "=", "torch", ".", "clamp", "(", "q_rb", "[", "...", ",", "0", ":", "N", "]", ",", "0", ",", "x", ".", "size", "(", "2", ")", "-", "1", ")", ".", "long", "(", ")", "\n", "\n", "# (b, c, w, N)", "\n", "x_q_t", "=", "self", ".", "_get_x_q", "(", "x", ",", "q_t", ",", "N", ")", "\n", "x_q_b", "=", "self", ".", "_get_x_q", "(", "x", ",", "q_b", ",", "N", ")", "\n", "\n", "# (b, c, w, N) # Keep the same value of channels", "\n", "x_offset", "=", "g_t", ".", "unsqueeze", "(", "dim", "=", "1", ")", "*", "x_q_t", "+", "g_b", ".", "unsqueeze", "(", "dim", "=", "1", ")", "*", "x_q_b", "\n", "\n", "return", "x_offset", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.flex_layer.FlexGroupLayer._get_p_n": [[293, 307], ["numpy.array.flatten", "numpy.reshape", "torch.autograd.Variable", "numpy.meshgrid", "torch.from_numpy().type", "range", "numpy.meshgrid", "range", "numpy.array", "torch.from_numpy"], "methods", ["None"], ["", "def", "_get_p_n", "(", "self", ",", "N", ",", "dtype", ")", ":", "\n", "        ", "if", "self", ".", "dilation", ">", "1", ":", "\n", "            ", "p_n_x", ",", "p_n_y", "=", "np", ".", "meshgrid", "(", "0", ",", "range", "(", "0", ",", "(", "N", "-", "1", ")", "*", "self", ".", "dilation", "+", "1", ",", "self", ".", "dilation", ")", ",", "indexing", "=", "'ij'", ")", "\n", "", "elif", "self", ".", "kernel_size", ">", "1", ":", "\n", "            ", "p_n_x", ",", "p_n_y", "=", "np", ".", "meshgrid", "(", "0", ",", "range", "(", "-", "(", "self", ".", "kernel_size", "-", "1", ")", "//", "2", ",", "(", "self", ".", "kernel_size", "-", "1", ")", "//", "2", "+", "1", ")", ",", "\n", "indexing", "=", "'ij'", ")", "\n", "", "elif", "self", ".", "kernel_size", "==", "1", ":", "\n", "            ", "p_n_y", "=", "np", ".", "array", "(", "[", "-", "1.", "]", ")", "\n", "# (N, 1)", "\n", "", "p_n", "=", "p_n_y", ".", "flatten", "(", ")", "# [ -1 0 1]", "\n", "p_n", "=", "np", ".", "reshape", "(", "p_n", ",", "(", "1", ",", "N", ",", "1", ")", ")", "\n", "p_n", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "p_n", ")", ".", "type", "(", "dtype", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "return", "p_n", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.flex_layer.FlexGroupLayer._get_p_0": [[308, 324], ["p_0_y.flatten().reshape().repeat.flatten().reshape().repeat.flatten().reshape().repeat", "torch.autograd.Variable", "numpy.meshgrid", "torch.from_numpy().type", "range", "numpy.meshgrid", "p_0_y.flatten().reshape().repeat.flatten().reshape().repeat.flatten().reshape", "range", "numpy.meshgrid", "torch.from_numpy", "range", "p_0_y.flatten().reshape().repeat.flatten().reshape().repeat.flatten"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_p_0", "(", "self", ",", "w", ",", "N", ",", "dtype", ")", ":", "\n", "        ", "s", "=", "self", ".", "stride", "\n", "p", "=", "self", ".", "padding", "\n", "if", "self", ".", "dilation", ">", "1", ":", "\n", "            ", "p_0_x", ",", "p_0_y", "=", "np", ".", "meshgrid", "(", "0", ",", "range", "(", "0", ",", "w", "-", "(", "N", "-", "1", ")", "*", "self", ".", "dilation", ",", "1", ")", ",", "indexing", "=", "'ij'", ")", "\n", "", "elif", "self", ".", "kernel_size", ">", "1", ":", "\n", "            ", "p_0_x", ",", "p_0_y", "=", "np", ".", "meshgrid", "(", "1", ",", "range", "(", "(", "self", ".", "kernel_size", "-", "1", ")", "//", "2", ",", "w", "-", "(", "self", ".", "kernel_size", "-", "1", ")", "//", "2", ",", "s", ")", ",", "\n", "indexing", "=", "'ij'", ")", "\n", "", "elif", "self", ".", "kernel_size", "==", "1", ":", "\n", "            ", "p_0_x", ",", "p_0_y", "=", "np", ".", "meshgrid", "(", "1", ",", "range", "(", "1", ",", "w", "-", "(", "self", ".", "kernel_size", "-", "1", ")", "//", "2", "+", "1", "+", "2", "*", "p", ",", "s", ")", ",", "indexing", "=", "'ij'", ")", "\n", "\n", "", "p_0_y", "=", "p_0_y", ".", "flatten", "(", ")", ".", "reshape", "(", "1", ",", "1", ",", "-", "1", ")", ".", "repeat", "(", "N", ",", "axis", "=", "1", ")", "# (1,N, (w-ks+2d)/stride))", "\n", "p_0", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "p_0_y", ")", ".", "type", "(", "dtype", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "return", "p_0", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.flex_layer.FlexGroupLayer._get_p": [[325, 336], ["flex_layer.FlexGroupLayer._get_p_n", "flex_layer.FlexGroupLayer._get_p_0", "p.repeat.repeat.repeat", "x.size", "x.size"], "methods", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.flex_layer.FlexGroupLayer._get_p_n", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.flex_layer.FlexGroupLayer._get_p_0"], ["", "def", "_get_p", "(", "self", ",", "x", ",", "dtype", ")", ":", "\n", "        ", "b", ",", "N", ",", "w", "=", "x", ".", "size", "(", "0", ")", ",", "self", ".", "kernel_size", ",", "x", ".", "size", "(", "2", ")", "\n", "# (1,N,1)", "\n", "p_n", "=", "self", ".", "_get_p_n", "(", "N", ",", "dtype", ")", "\n", "# (1, N, (w-ks+2d)/stride))", "\n", "p_0", "=", "self", ".", "_get_p_0", "(", "self", ",", "w", ",", "N", ",", "dtype", ")", "\n", "# Get final p", "\n", "p", "=", "p_0", "+", "p_n", "\n", "p", "=", "p", ".", "repeat", "(", "b", ",", "1", ",", "1", ")", "\n", "\n", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.flex_layer.FlexGroupLayer._get_x_q": [[337, 350], ["q.size", "x.size", "index.contiguous().unsqueeze().expand().contiguous().view.contiguous().unsqueeze().expand().contiguous().view.contiguous().unsqueeze().expand().contiguous().view", "x.gather", "x_offset.contiguous().view.contiguous().view.contiguous().view", "index.contiguous().unsqueeze().expand().contiguous().view.contiguous().unsqueeze().expand().contiguous().view.contiguous().unsqueeze().expand().contiguous", "x_offset.contiguous().view.contiguous().view.contiguous", "index.contiguous().unsqueeze().expand().contiguous().view.contiguous().unsqueeze().expand().contiguous().view.contiguous().unsqueeze().expand", "index.contiguous().unsqueeze().expand().contiguous().view.contiguous().unsqueeze().expand().contiguous().view.contiguous().unsqueeze", "index.contiguous().unsqueeze().expand().contiguous().view.contiguous().unsqueeze().expand().contiguous().view.contiguous"], "methods", ["None"], ["", "def", "_get_x_q", "(", "self", ",", "x", ",", "q", ",", "N", ")", ":", "\n", "        ", "b", ",", "w", ",", "_", "=", "q", ".", "size", "(", ")", "\n", "# padded_w = x.size(2)", "\n", "c", "=", "x", ".", "size", "(", "1", ")", "\n", "# (b, w, N)", "\n", "index", "=", "q", "[", "...", ",", ":", "N", "]", "\n", "# (b, c, w*N)", "\n", "index", "=", "index", ".", "contiguous", "(", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "expand", "(", "-", "1", ",", "c", ",", "-", "1", ",", "-", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "b", ",", "c", ",", "-", "1", ")", "\n", "# this size is exactly (b,c,w*N)", "\n", "x_offset", "=", "x", ".", "gather", "(", "dim", "=", "-", "1", ",", "index", "=", "index", ")", "\n", "x_offset", "=", "x_offset", ".", "contiguous", "(", ")", ".", "view", "(", "b", ",", "c", ",", "w", ",", "N", ")", "\n", "\n", "return", "x_offset", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.srnet_utils.flex_layer.FlexGroupLayer._reshape_x_offset": [[351, 357], ["x_offset.contiguous().view.contiguous().view.size", "x_offset.contiguous().view.contiguous().view.contiguous().view", "x_offset.contiguous().view.contiguous().view.contiguous"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_reshape_x_offset", "(", "x_offset", ",", "ks", ")", ":", "\n", "        ", "b", ",", "c", ",", "w", ",", "N", "=", "x_offset", ".", "size", "(", ")", "\n", "x_offset", "=", "x_offset", ".", "contiguous", "(", ")", ".", "view", "(", "b", ",", "c", ",", "w", "*", "ks", ")", "\n", "\n", "return", "x_offset", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.experiment.tools.count_params": [[13, 15], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["def", "count_params", "(", "model", ",", ")", ":", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.experiment.tools.check_rootfolder": [[17, 26], ["os.path.join", "os.path.join", "os.path.exists", "print", "os.mkdir"], "function", ["None"], ["", "def", "check_rootfolder", "(", ")", ":", "\n", "####### Create log and model folder #######3", "\n", "    ", "folders_util", "=", "[", "args", ".", "root_log", ",", "args", ".", "checkpoint", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "root_log", ",", "args", ".", "model_name", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint", ",", "args", ".", "model_name", ")", "]", "\n", "for", "folder", "in", "folders_util", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "folder", ")", ":", "\n", "            ", "print", "(", "'creating folder: '", "+", "folder", ")", "\n", "os", ".", "mkdir", "(", "folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.experiment.tools.deterministic_random": [[27, 31], ["hashlib.sha256().digest", "int.from_bytes", "int", "hashlib.sha256", "data.encode"], "function", ["None"], ["", "", "", "def", "deterministic_random", "(", "min_value", ",", "max_value", ",", "data", ")", ":", "\n", "    ", "digest", "=", "hashlib", ".", "sha256", "(", "data", ".", "encode", "(", ")", ")", ".", "digest", "(", ")", "\n", "raw_value", "=", "int", ".", "from_bytes", "(", "digest", "[", ":", "4", "]", ",", "byteorder", "=", "'little'", ",", "signed", "=", "False", ")", "\n", "return", "int", "(", "raw_value", "/", "(", "2", "**", "32", "-", "1", ")", "*", "(", "max_value", "-", "min_value", ")", ")", "+", "min_value", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.experiment.tools.print_result": [[32, 53], ["tf_writer.add_scalar", "tf_writer.add_scalar", "print", "print", "tf_writer.add_scalar", "tf_writer.add_scalar"], "function", ["None"], ["", "def", "print_result", "(", "epoch", ",", "elapsed", ",", "lr", ",", "losses_3d_train", ",", "losses_3d_train_eval", ",", "losses_3d_valid", ")", ":", "\n", "    ", "if", "args", ".", "no_eval", ":", "\n", "        ", "print", "(", "'[%d] time %.2f lr %f 3d_train %f'", "%", "(", "\n", "epoch", "+", "1", ",", "\n", "elapsed", ",", "\n", "lr", ",", "\n", "losses_3d_train", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "        ", "output", "=", "(", "'[%d] time %.2f lr %f 3d_train %f 3d_eval %f 3d_valid %f'", "%", "(", "\n", "epoch", "+", "1", ",", "\n", "elapsed", ",", "\n", "lr", ",", "\n", "losses_3d_train", "[", "-", "1", "]", ",", "\n", "losses_3d_train_eval", "[", "-", "1", "]", ",", "\n", "losses_3d_valid", "[", "-", "1", "]", ")", ")", "\n", "\n", "tf_writer", ".", "add_scalar", "(", "'loss/valid'", ",", "losses_3d_train_eval", "[", "-", "1", "]", ",", "epoch", "+", "1", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'loss/test'", ",", "losses_3d_valid", "[", "-", "1", "]", ",", "epoch", "+", "1", ")", "\n", "", "tf_writer", ".", "add_scalar", "(", "'lr'", ",", "lr", ",", "epoch", "+", "1", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'loss/train'", ",", "losses_3d_train", "[", "-", "1", "]", ",", "epoch", "+", "1", ")", "\n", "print", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.experiment.tools.save_model": [[54, 84], ["os.path.join", "print", "torch.save", "print", "os.path.join", "print", "print", "torch.save", "train_generator.random_state", "optimizer.state_dict", "model_pos_train.state_dict", "train_generator.random_state", "optimizer.state_dict", "model_pos_train.state_dict"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.data_generators.ChunkedGenerator.random_state", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.data_generators.ChunkedGenerator.random_state"], ["", "def", "save_model", "(", "losses_3d_train", ",", "losses_3d_train_eval", ",", "losses_3d_valid", ",", "train_generator", ",", "optimizer", ",", "model_pos_train", ",", "epoch", ",", "lr", ",", "Best_model", "=", "False", ")", ":", "\n", "    ", "if", "epoch", "%", "args", ".", "checkpoint_frequency", "==", "0", ":", "\n", "        ", "chk_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint", ",", "'latest_epoch_{}.bin'", ".", "format", "(", "args", ".", "model_name", ")", ")", "\n", "print", "(", "'Saving checkpoint to'", ",", "chk_path", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'lr'", ":", "lr", ",", "\n", "'loss 3d train'", ":", "losses_3d_train", "[", "-", "1", "]", ",", "\n", "'loss 3d eval'", ":", "losses_3d_train_eval", "[", "-", "1", "]", ",", "\n", "'loss 3d test'", ":", "losses_3d_valid", "[", "-", "1", "]", ",", "\n", "'random_state'", ":", "train_generator", ".", "random_state", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'model_pos'", ":", "model_pos_train", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "chk_path", ")", "\n", "", "if", "Best_model", ":", "\n", "        ", "print", "(", "'Best model got in epoch'", ",", "epoch", ",", "' with test error:'", ",", "losses_3d_valid", "[", "-", "1", "]", ")", "\n", "best_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "best_checkpoint", ",", "'model_best'", "+", "args", ".", "model_name", "+", "'.bin'", ")", "\n", "print", "(", "'Saving best checkpoint to'", ",", "best_path", ")", "\n", "out", "=", "'Best model got in epoch {0} \\n with test error: {1} \\n Saving best checkpoint to{2}'", ".", "format", "(", "epoch", "+", "1", ",", "losses_3d_valid", "[", "-", "1", "]", ",", "best_path", ")", "\n", "print", "(", "out", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'lr'", ":", "lr", ",", "\n", "'loss 3d train'", ":", "losses_3d_train", "[", "-", "1", "]", "*", "1000", ",", "\n", "'loss 3d eval'", ":", "losses_3d_train_eval", "[", "-", "1", "]", "*", "1000", ",", "\n", "'loss 3d test'", ":", "losses_3d_valid", "[", "-", "1", "]", ",", "\n", "'random_state'", ":", "train_generator", ".", "random_state", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'model_pos'", ":", "model_pos_train", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "best_path", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.experiment.eval_metrics.gather_3d_metrics": [[7, 28], ["eval_metrics.pck", "eval_metrics.auc", "expected.cpu().numpy().reshape", "actual.cpu().numpy().reshape", "common.common_pytorch.loss.loss_family.p_mpjpe", "eval_metrics.pck", "eval_metrics.auc", "dict", "expected.cpu().numpy", "actual.cpu().numpy", "expected.cpu", "actual.cpu"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.experiment.eval_metrics.pck", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.experiment.eval_metrics.auc", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.loss.loss_family.p_mpjpe", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.experiment.eval_metrics.pck", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.experiment.eval_metrics.auc"], ["def", "gather_3d_metrics", "(", "expected", ",", "actual", ")", ":", "\n", "    ", "\"\"\"\n\n    :param expected: Predicted pose\n    :param actual: Ground Truth\n    :return: evaluation results\n    \"\"\"", "\n", "unaligned_pck", "=", "pck", "(", "actual", ",", "expected", ")", "\n", "unaligned_auc", "=", "auc", "(", "actual", ",", "expected", ")", "\n", "expect_np", "=", "expected", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "-", "1", ",", "expected", ".", "shape", "[", "-", "2", "]", ",", "expected", ".", "shape", "[", "-", "1", "]", ")", "\n", "actual_np", "=", "actual", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "-", "1", ",", "expected", ".", "shape", "[", "-", "2", "]", ",", "expected", ".", "shape", "[", "-", "1", "]", ")", "\n", "aligned_mpjpe", ",", "aligned", "=", "p_mpjpe", "(", "expect_np", ",", "actual_np", ")", "\n", "#plot17j(np.concatenate((actual_np[100:104],expect_np[100:104],aligned[0,100:104].cpu().numpy()),axis=0),'aa','aa')", "\n", "aligned_pck", "=", "pck", "(", "aligned", ",", "actual", ")", "\n", "aligned_auc", "=", "auc", "(", "aligned", ",", "actual", ")", "\n", "return", "dict", "(", "\n", "pck", "=", "unaligned_pck", ",", "\n", "auc", "=", "unaligned_auc", ",", "\n", "aligned_mpjpe", "=", "aligned_mpjpe", ",", "\n", "aligned_pck", "=", "aligned_pck", ",", "\n", "aligned_auc", "=", "aligned_auc", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.experiment.eval_metrics.pck": [[30, 34], ["torch.norm", "len"], "function", ["None"], ["", "def", "pck", "(", "actual", ",", "expected", ",", "threshold", "=", "150", ")", ":", "\n", "    ", "dists", "=", "torch", ".", "norm", "(", "(", "actual", "-", "expected", ")", ",", "dim", "=", "len", "(", "actual", ".", "shape", ")", "-", "1", ")", "\n", "error", "=", "(", "dists", "<", "threshold", ")", ".", "double", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "return", "error", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.experiment.eval_metrics.auc": [[35, 43], ["torch.linspace().tolist", "torch.DoubleTensor", "enumerate", "torch.DoubleTensor.mean().item", "len", "eval_metrics.pck", "torch.linspace", "torch.DoubleTensor.mean"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.experiment.eval_metrics.pck"], ["", "def", "auc", "(", "actual", ",", "expected", ")", ":", "\n", "# This range of thresholds mimics `mpii_compute_3d_pck.m`, which is provided as part of the", "\n", "# MPI-INF-3DHP test data release.", "\n", "    ", "thresholds", "=", "torch", ".", "linspace", "(", "0", ",", "150", ",", "31", ")", ".", "tolist", "(", ")", "\n", "pck_values", "=", "torch", ".", "DoubleTensor", "(", "len", "(", "thresholds", ")", ")", "\n", "for", "i", ",", "threshold", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "        ", "pck_values", "[", "i", "]", "=", "pck", "(", "actual", ",", "expected", ",", "threshold", "=", "threshold", ")", "\n", "", "return", "pck_values", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.experiment.eval_metrics.kpt_to_bone_vector": [[44, 57], ["range", "torch.cat", "len", "bone.append", "bone_3d.unsqueeze"], "function", ["None"], ["", "def", "kpt_to_bone_vector", "(", "pose_3d", ",", "parent_index", "=", "None", ")", ":", "\n", "    ", "if", "parent_index", "is", "not", "None", ":", "\n", "        ", "hm36_parent", "=", "parent_index", "\n", "\n", "", "else", ":", "\n", "        ", "hm36_parent", "=", "[", "-", "1", ",", "0", ",", "1", ",", "2", ",", "0", ",", "4", ",", "5", ",", "0", ",", "7", ",", "8", ",", "9", ",", "8", ",", "11", ",", "12", ",", "8", ",", "14", ",", "15", "]", "#by body kinematic connections", "\n", "#print('random parent index:',hm36_parent)", "\n", "", "bone", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "hm36_parent", ")", ")", ":", "\n", "        ", "bone_3d", "=", "pose_3d", "[", ":", ",", ":", ",", "i", "]", "-", "pose_3d", "[", ":", ",", ":", ",", "hm36_parent", "[", "i", "]", "]", "\n", "bone", ".", "append", "(", "bone_3d", ".", "unsqueeze", "(", "dim", "=", "-", "2", ")", ")", "\n", "", "bone_out", "=", "torch", ".", "cat", "(", "bone", ",", "dim", "=", "-", "2", ")", "\n", "return", "bone_out", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.experiment.eval_metrics.cal_bone_sym": [[58, 84], ["range", "print", "torch.mean", "print", "torch.tensor", "bone_lengths_lift.append", "bone_lengths_right.append", "len", "torch.abs", "each_bone_error.append", "torch.mean", "torch.mean", "torch.mean", "torch.mean.item", "torch.norm", "torch.norm", "torch.abs"], "function", ["None"], ["", "def", "cal_bone_sym", "(", "predicted_3d_pos", ")", ":", "\n", "# calculate bone length symmetry", "\n", "    ", "left", "=", "[", "4", ",", "5", ",", "6", ",", "11", ",", "12", ",", "13", "]", "\n", "right", "=", "[", "1", ",", "2", ",", "3", ",", "14", ",", "15", ",", "16", "]", "\n", "hm36_parent", "=", "[", "-", "1", ",", "0", ",", "1", ",", "2", ",", "0", ",", "4", ",", "5", ",", "0", ",", "7", ",", "8", ",", "9", ",", "8", ",", "11", ",", "12", ",", "8", ",", "14", ",", "15", "]", "\n", "\n", "bone_lengths_lift", "=", "[", "]", "\n", "bone_lengths_right", "=", "[", "]", "\n", "each_bone_error", "=", "[", "]", "\n", "left_right_error", "=", "0", "\n", "for", "i", "in", "left", ":", "\n", "        ", "dists_l", "=", "predicted_3d_pos", "[", ":", ",", ":", ",", "i", ",", ":", "]", "-", "predicted_3d_pos", "[", ":", ",", ":", ",", "hm36_parent", "[", "i", "]", ",", ":", "]", "\n", "bone_lengths_lift", ".", "append", "(", "torch", ".", "mean", "(", "torch", ".", "norm", "(", "dists_l", ",", "dim", "=", "-", "1", ")", ",", "dim", "=", "1", ")", ")", "\n", "", "for", "i", "in", "right", ":", "\n", "        ", "dists_r", "=", "predicted_3d_pos", "[", ":", ",", ":", ",", "i", ",", ":", "]", "-", "predicted_3d_pos", "[", ":", ",", ":", ",", "hm36_parent", "[", "i", "]", ",", ":", "]", "\n", "bone_lengths_right", ".", "append", "(", "torch", ".", "mean", "(", "torch", ".", "norm", "(", "dists_r", ",", "dim", "=", "-", "1", ")", ",", "dim", "=", "1", ")", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "left", ")", ")", ":", "\n", "        ", "left_right_error", "+=", "torch", ".", "abs", "(", "bone_lengths_right", "[", "i", "]", "-", "bone_lengths_lift", "[", "i", "]", ")", "\n", "each_bone_error", ".", "append", "(", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "bone_lengths_right", "[", "i", "]", "-", "bone_lengths_lift", "[", "i", "]", ")", ")", ")", "\n", "", "txt1", "=", "'Bone symmetric error (right-left): Hip {0}mm, Upper Leg {1}mm, Lower Leg {2}mm, '", "'Shoulder {3}mm, Upper elbow {4}mm, Lower elbow {5}mm'", ".", "format", "(", "each_bone_error", "[", "0", "]", "*", "1000", ",", "each_bone_error", "[", "1", "]", "*", "1000", ",", "each_bone_error", "[", "2", "]", "*", "1000", ",", "\n", "each_bone_error", "[", "3", "]", "*", "1000", ",", "each_bone_error", "[", "4", "]", "*", "1000", ",", "each_bone_error", "[", "5", "]", "*", "1000", ")", "\n", "print", "(", "txt1", ")", "\n", "left_right_err_mean", "=", "torch", ".", "mean", "(", "left_right_error", "/", "6", ")", "\n", "print", "(", "'all parts mean symmetric error: '", ",", "left_right_err_mean", ".", "item", "(", ")", "*", "1000", ")", "\n", "return", "torch", ".", "tensor", "(", "each_bone_error", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.experiment.eval_metrics.angle_np": [[85, 94], ["numpy.arccos", "numpy.dot", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["", "def", "angle_np", "(", "v1", ",", "v2", ",", "acute", "=", "False", ")", ":", "\n", "# v1 is your firsr vector", "\n", "# v2 is your second vector", "\n", "    ", "angle", "=", "np", ".", "arccos", "(", "np", ".", "dot", "(", "v1", ",", "v2", ")", "/", "(", "np", ".", "linalg", ".", "norm", "(", "v1", ",", "axis", "=", "-", "1", ")", "*", "np", ".", "linalg", ".", "norm", "(", "v2", ",", "axis", "=", "-", "1", ")", ")", ")", "\n", "#angle = angle[:, :, np.newaxis]", "\n", "if", "(", "acute", "==", "True", ")", ":", "\n", "        ", "return", "angle", "\n", "", "else", ":", "\n", "        ", "return", "2", "*", "np", ".", "pi", "-", "angle", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.experiment.eval_metrics.angle_torch": [[95, 105], ["torch.norm", "torch.norm", "torch.mean", "torch.acos", "torch.sum", "v1.mul", "torch.Tensor().cuda", "torch.Tensor"], "function", ["None"], ["", "", "def", "angle_torch", "(", "v1", ",", "v2", ",", "torch_pi", ",", "acute", "=", "False", ")", ":", "\n", "# v1 is your firsr 3d vector, v.shape: [B, T, 1, 3]", "\n", "# v2 is your second 3d vector", "\n", "    ", "v1_len", "=", "torch", ".", "norm", "(", "v1", ",", "dim", "=", "-", "1", ")", "\n", "v2_len", "=", "torch", ".", "norm", "(", "v2", ",", "dim", "=", "-", "1", ")", "\n", "angle", "=", "torch", ".", "mean", "(", "torch", ".", "acos", "(", "torch", ".", "sum", "(", "v1", ".", "mul", "(", "v2", ")", ",", "dim", "=", "-", "1", ")", "/", "(", "v1_len", "*", "v2_len", "+", "torch", ".", "Tensor", "(", "[", "1e-8", "]", ")", ".", "cuda", "(", ")", ")", ")", ")", "#shape: [B, T. 1]", "\n", "if", "(", "acute", "==", "True", ")", ":", "\n", "        ", "return", "angle", "\n", "", "else", ":", "\n", "        ", "return", "2", "*", "torch_pi", "-", "angle", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.experiment.eval_metrics.cal_bone_angle": [[106, 135], ["torch.acos().item", "print", "range", "torch.cat", "print", "bone_angle.append", "text.append", "bone_angle.append", "text.append", "torch.acos", "joint_angle.unsqueeze", "torch.zeros", "eval_metrics.angle_torch", "eval_metrics.angle_torch", "bone_child.squeeze", "bone_parent.squeeze"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.experiment.eval_metrics.angle_torch", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.experiment.eval_metrics.angle_torch"], ["", "", "def", "cal_bone_angle", "(", "bone_3d", ",", "indexes", "=", "None", ")", ":", "\n", "    ", "torch_pi", "=", "torch", ".", "acos", "(", "torch", ".", "zeros", "(", "1", ")", ")", ".", "item", "(", ")", "*", "2", "\n", "bone_parent_index", "=", "[", "-", "1", ",", "0", ",", "1", ",", "0", ",", "3", ",", "4", ",", "0", ",", "6", ",", "7", ",", "8", ",", "7", ",", "10", ",", "11", ",", "7", ",", "13", ",", "14", "]", "\n", "bone_angle", "=", "[", "]", "\n", "text", "=", "[", "]", "\n", "# init_vector = [0,-1,0] #relative to root joint", "\n", "\n", "if", "indexes", ":", "\n", "# calculate specific pair joint angle", "\n", "        ", "for", "index", "in", "indexes", ":", "\n", "            ", "bone_child", "=", "bone_3d", "[", "index", "]", "\n", "bone_parent", "=", "bone_3d", "[", "bone_parent_index", "[", "index", "]", "]", "\n", "bone_angle", ".", "append", "(", "180", "*", "angle_torch", "(", "bone_child", ",", "bone_parent", ",", "torch_pi", ",", "acute", "=", "True", ")", "/", "torch", ".", "pi", ")", "\n", "text", ".", "append", "(", "'The bone angle between child bone {} and parent bone {} is :{}'", ".", "format", "(", "index", ",", "bone_parent_index", "[", "index", "]", ",", "bone_angle", "[", "-", "1", "]", ")", ")", "\n", "", "print", "(", "text", ")", "\n", "\n", "", "else", ":", "\n", "# calculate each pair joint angle", "\n", "        ", "for", "index", "in", "range", "(", "1", ",", "16", ")", ":", "\n", "            ", "bone_child", "=", "bone_3d", "[", ":", ",", ":", ",", "index", "]", "\n", "bone_parent", "=", "bone_3d", "[", ":", ",", ":", ",", "bone_parent_index", "[", "index", "]", "]", "\n", "#angle1 = 180*angle(bone_child.squeeze().cpu().detach().numpy()[0], bone_parent.squeeze().cpu().detach().numpy()[0], acute=True)/np.pi", "\n", "joint_angle", "=", "180", "*", "angle_torch", "(", "bone_child", ".", "squeeze", "(", ")", ",", "bone_parent", ".", "squeeze", "(", ")", ",", "torch_pi", ",", "acute", "=", "True", ")", "/", "torch_pi", "\n", "bone_angle", ".", "append", "(", "joint_angle", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ")", "\n", "text", ".", "append", "(", "'The bone angle between child bone {} and parent bone {} is :{}'", ".", "format", "(", "index", ",", "bone_parent_index", "[", "index", "]", ",", "bone_angle", "[", "-", "1", "]", ")", ")", "\n", "\n", "", "body_angle", "=", "torch", ".", "cat", "(", "bone_angle", ",", "dim", "=", "-", "1", ")", "\n", "print", "(", "text", ")", "\n", "", "return", "body_angle", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.experiment.eval_metrics.cal_bone_length_np": [[136, 156], ["range", "print", "e4.append", "print", "numpy.mean", "numpy.std", "numpy.mean", "numpy.mean", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["", "def", "cal_bone_length_np", "(", "pose_3d", ")", ":", "\n", "    ", "hm36_parent", "=", "[", "-", "1", ",", "0", ",", "1", ",", "2", ",", "0", ",", "4", ",", "5", ",", "0", ",", "7", ",", "8", ",", "9", ",", "8", ",", "11", ",", "12", ",", "8", ",", "14", ",", "15", "]", "\n", "hm36_num", "=", "17", "\n", "e4", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "hm36_num", ")", ":", "\n", "        ", "bone_3d", "=", "pose_3d", "[", ":", ",", ":", ",", "i", "]", "-", "pose_3d", "[", ":", ",", ":", ",", "hm36_parent", "[", "i", "]", "]", "\n", "e4", ".", "append", "(", "np", ".", "mean", "(", "np", ".", "mean", "(", "np", ".", "linalg", ".", "norm", "(", "bone_3d", ",", "axis", "=", "-", "1", ")", "*", "100", ",", "0", ")", ",", "0", ")", ")", "\n", "print", "(", "'std of each bone length'", ",", "np", ".", "std", "(", "np", ".", "mean", "(", "np", ".", "linalg", ".", "norm", "(", "bone_3d", ",", "axis", "=", "-", "1", ")", "*", "100", ",", "0", ")", ",", "0", ")", ",", "'cm'", ")", "\n", "", "kpt_txt", "=", "'Bone length of RHip is {0}cm,RUleg is {1}cm, RLleg is {2}cm, Lhip is {3}cm,  LUleg is {4}cm, LLleg is {5}cm, '", "'Lspine is {6}cm, Uspine is {7}cm, Neck is {8}cm, Head is {9}cm, Lshoulder is {10}cm, LUelbow is {11}cm, LLelbow is {12}cm, '", "'Rshoudle is {13}cm, RUelbow is {14}cm, RLelbow is {15}cm:'", ".", "format", "(", "e4", "[", "0", "]", ",", "e4", "[", "1", "]", ",", "e4", "[", "2", "]", ",", "e4", "[", "3", "]", ",", "\n", "e4", "[", "4", "]", ",", "e4", "[", "5", "]", ",", "\n", "e4", "[", "6", "]", ",", "\n", "e4", "[", "7", "]", ",", "e4", "[", "8", "]", ",", "\n", "e4", "[", "9", "]", ",", "e4", "[", "10", "]", ",", "\n", "e4", "[", "11", "]", ",", "e4", "[", "12", "]", ",", "\n", "e4", "[", "13", "]", ",", "\n", "e4", "[", "14", "]", ",", "e4", "[", "15", "]", ")", "\n", "print", "(", "kpt_txt", ")", "\n", "return", "e4", "", "", ""]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.experiment.inference.infer_function": [[16, 51], ["print", "print", "print", "print", "print", "numpy.mean", "print", "args.all_action.split", "print", "common.dataset.pre_process.utils.fetch", "common.dataset.data_generators.UnchunkedGenerator", "inference.evaluate", "errors_p1.append", "errors_p2.append", "errors_p3.append", "errors_vel.append", "errors_em.append", "errors_ea.append", "round", "round", "round", "round", "round", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.utils.fetch", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.experiment.inference.evaluate"], ["def", "infer_function", "(", "subjects_tests", ",", "keypoints", ",", "dataset", ",", "norm", ",", "action_test", ",", "model_pos", ",", "pad", ",", "causal_shift", ",", "kps_left", ",", "kps_right", ",", "joints_left", ",", "joints_right", ",", "test_cam", ")", ":", "\n", "    ", "errors_p1", "=", "[", "]", "\n", "errors_p2", "=", "[", "]", "\n", "errors_p3", "=", "[", "]", "\n", "errors_vel", "=", "[", "]", "\n", "errors_em", "=", "[", "]", "\n", "errors_ea", "=", "[", "]", "\n", "if", "action_test", "==", "None", ":", "\n", "        ", "print", "(", "' Input action is action_filter, so evaluate on every action seperately'", ")", "\n", "action_test", "=", "args", ".", "all_action", ".", "split", "(", "','", ")", "\n", "", "for", "action_key", "in", "action_test", ":", "\n", "        ", "print", "(", "'Start evaluate on action:'", ",", "action_key", ")", "\n", "cam_act", ",", "poses_act", ",", "poses_2d_act", "=", "fetch", "(", "subjects_tests", ",", "keypoints", ",", "dataset", ",", "args", ".", "downsample", ",", "[", "action_key", "]", ",", "test_cam", ")", "# len(pose_act)=batch_size, type:list", "\n", "\n", "gen", "=", "UnchunkedGenerator", "(", "cam_act", ",", "poses_act", ",", "poses_2d_act", ",", "\n", "pad", "=", "pad", ",", "causal_shift", "=", "causal_shift", ",", "\n", "augment", "=", "args", ".", "test_time_augmentation", ",", "\n", "kps_left", "=", "kps_left", ",", "kps_right", "=", "kps_right", ",", "joints_left", "=", "joints_left", ",", "\n", "joints_right", "=", "joints_right", ")", "\n", "\n", "e1", ",", "e2", ",", "e3", ",", "ev", ",", "em", ",", "ea", "=", "evaluate", "(", "gen", ",", "model_pos", ",", "joints_left", ",", "joints_right", ",", "norm", ",", "action_key", ",", "False", ")", "\n", "\n", "errors_p1", ".", "append", "(", "e1", ")", "\n", "errors_p2", ".", "append", "(", "e2", ")", "\n", "errors_p3", ".", "append", "(", "e3", ")", "\n", "errors_vel", ".", "append", "(", "ev", ")", "\n", "errors_em", ".", "append", "(", "em", ")", "\n", "errors_ea", ".", "append", "(", "ea", ")", "\n", "", "print", "(", "'Mean protocol #1   (MPJPE) action-wise average:'", ",", "round", "(", "np", ".", "mean", "(", "errors_p1", ")", ",", "2", ")", ",", "'mm'", ")", "\n", "print", "(", "'Mean protocol #2 (P-MPJPE) action-wise average:'", ",", "round", "(", "np", ".", "mean", "(", "errors_p2", ")", ",", "2", ")", ",", "'mm'", ")", "\n", "print", "(", "'Mean protocol #3 (N-MPJPE) action-wise average:'", ",", "round", "(", "np", ".", "mean", "(", "errors_p3", ")", ",", "2", ")", ",", "'mm'", ")", "\n", "print", "(", "'Mean velocity      (MPJVE) action-wise average:'", ",", "round", "(", "np", ".", "mean", "(", "errors_vel", ")", ",", "2", ")", ",", "'mm'", ")", "\n", "# print('Mean bone sym error        action-wise average:', round(np.mean(errors_em), 2), 'mm')", "\n", "print", "(", "'Mean angle absolute Error  action-wise average:'", ",", "round", "(", "np", ".", "mean", "(", "errors_ea", ")", ",", "2", ")", ",", "'degree'", ")", "\n", "return", "np", ".", "mean", "(", "errors_p1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.experiment.inference.eval_hard_test": [[52, 60], ["common.dataset.data_generators.UnchunkedGenerator", "inference.evaluate"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.experiment.inference.evaluate"], ["", "def", "eval_hard_test", "(", "pose_3d", ",", "pose_2d", ",", "model_pos", ",", "norm", ",", "pad", ",", "causal_shift", ",", "kps_left", ",", "kps_right", ",", "joints_left", ",", "joints_right", ")", ":", "\n", "    ", "gen", "=", "UnchunkedGenerator", "(", "None", ",", "pose_3d", ",", "pose_2d", ",", "\n", "pad", "=", "pad", ",", "causal_shift", "=", "causal_shift", ",", "\n", "augment", "=", "args", ".", "test_time_augmentation", ",", "\n", "kps_left", "=", "kps_left", ",", "kps_right", "=", "kps_right", ",", "joints_left", "=", "joints_left", ",", "\n", "joints_right", "=", "joints_right", ")", "\n", "\n", "evaluate", "(", "gen", ",", "model_pos", ",", "joints_left", ",", "joints_right", ",", "norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.experiment.inference.eval_mpi_test": [[61, 69], ["common.dataset.data_generators.UnchunkedGenerator", "inference.evaluate"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.experiment.inference.evaluate"], ["", "def", "eval_mpi_test", "(", "pose_3d", ",", "pose_2d", ",", "info", ",", "model_pos", ",", "norm", ",", "pad", ",", "causal_shift", ",", "kps_left", ",", "kps_right", ",", "joints_left", ",", "joints_right", ")", ":", "\n", "    ", "gen", "=", "UnchunkedGenerator", "(", "info", ",", "pose_3d", ",", "pose_2d", ",", "\n", "pad", "=", "pad", ",", "causal_shift", "=", "causal_shift", ",", "\n", "augment", "=", "args", ".", "test_time_augmentation", ",", "\n", "kps_left", "=", "kps_left", ",", "kps_right", "=", "kps_right", ",", "joints_left", "=", "joints_left", ",", "\n", "joints_right", "=", "joints_right", ")", "\n", "\n", "evaluate", "(", "gen", ",", "model_pos", ",", "joints_left", ",", "joints_right", ",", "norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.experiment.inference.eval_lcn": [[70, 81], ["common.dataset.data_generators.UnchunkedGenerator", "numpy.concatenate", "pred_3d.append", "numpy.concatenate", "inference.evaluate"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.experiment.inference.evaluate"], ["", "def", "eval_lcn", "(", "pose_3d", ",", "pose_2d", ",", "model_pos", ",", "norm", ",", "pad", ",", "causal_shift", ",", "kps_left", ",", "kps_right", ",", "joints_left", ",", "joints_right", ")", ":", "\n", "    ", "pred_3d", "=", "[", "]", "\n", "gen", "=", "UnchunkedGenerator", "(", "None", ",", "pose_3d", ",", "pose_2d", ",", "\n", "pad", "=", "pad", ",", "causal_shift", "=", "causal_shift", ",", "\n", "augment", "=", "False", ",", "\n", "kps_left", "=", "kps_left", ",", "kps_right", "=", "kps_right", ",", "joints_left", "=", "joints_left", ",", "\n", "joints_right", "=", "joints_right", ")", "\n", "out_pose", "=", "np", ".", "concatenate", "(", "evaluate", "(", "gen", ",", "model_pos", ",", "joints_left", ",", "joints_right", ",", "norm", ",", "return_predictions", "=", "False", ")", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "pred_3d", ".", "append", "(", "out_pose", ")", "\n", "pose", "=", "np", ".", "concatenate", "(", "pred_3d", ",", "axis", "=", "0", ")", "\n", "return", "pose", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.experiment.inference.evaluate": [[84, 232], ["print", "print", "print", "print", "print", "print", "print", "print", "print", "torch.no_grad", "model_pos.eval", "time.time", "test_generator.next_epoch", "print", "print", "print", "print", "test_generator.augment_enabled", "print", "print", "print", "torch.from_numpy", "torch.from_numpy", "torch.cuda.is_available", "model_pos", "test_generator.augment_enabled", "test_generator.augment_enabled", "common.common_pytorch.experiment.eval_metrics.cal_bone_sym", "common.common_pytorch.experiment.eval_metrics.kpt_to_bone_vector", "common.common_pytorch.experiment.eval_metrics.cal_bone_angle", "common.common_pytorch.experiment.eval_metrics.kpt_to_bone_vector", "common.common_pytorch.experiment.eval_metrics.cal_bone_angle", "mpjae", "common.common_pytorch.experiment.eval_metrics.gather_3d_metrics", "print", "pred_3d.append", "mpjpe", "print", "kpt_mpjpe", "print", "print", "print", "print", "print", "torch.cat.cpu().numpy().reshape", "torch.cat.cpu().numpy().reshape", "print", "print", "batch_2d.astype", "batch.astype", "inputs_2d.cuda.cuda", "torch.cat.cuda", "common.dataset.post_process.process3d.post_process3d", "torch.mean", "torch.cat.squeeze().cpu().numpy", "mpjae.item", "torch.cat", "torch.cat", "torch.cat.squeeze().cpu().numpy", "n_mpjpe().item", "mpjpe.item", "mean_velocity_error", "torch.mean", "torch.mean", "time.time", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "mpjpe.item", "n_mpjpe().item", "torch.cat.cpu().numpy", "torch.cat.cpu().numpy", "p_mpjpe", "mean_velocity_error", "torch.cat.squeeze().cpu", "torch.cat.squeeze().cpu", "n_mpjpe", "p_mpjpe", "torch.from_numpy", "torch.from_numpy", "n_mpjpe", "torch.cat.cpu", "torch.cat.cpu", "torch.from_numpy().cuda.astype", "torch.from_numpy().cuda.astype", "torch.cat.squeeze", "torch.cat.squeeze"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.data_generators.UnchunkedGenerator.next_epoch", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.data_generators.UnchunkedGenerator.augment_enabled", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.data_generators.UnchunkedGenerator.augment_enabled", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.data_generators.UnchunkedGenerator.augment_enabled", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.experiment.eval_metrics.cal_bone_sym", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.experiment.eval_metrics.kpt_to_bone_vector", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.experiment.eval_metrics.cal_bone_angle", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.experiment.eval_metrics.kpt_to_bone_vector", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.experiment.eval_metrics.cal_bone_angle", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.loss.loss_family.mpjae", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.experiment.eval_metrics.gather_3d_metrics", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.loss.loss_family.mpjpe", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.loss.loss_family.kpt_mpjpe", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.post_process.process3d.post_process3d", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.loss.loss_family.mean_velocity_error", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.loss.loss_family.p_mpjpe", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.loss.loss_family.mean_velocity_error", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.loss.loss_family.n_mpjpe", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.loss.loss_family.p_mpjpe", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.loss.loss_family.n_mpjpe"], ["", "def", "evaluate", "(", "test_generator", ",", "model_pos", ",", "joints_left", ",", "joints_right", ",", "norm", ",", "action", "=", "None", ",", "return_predictions", "=", "False", ")", ":", "\n", "    ", "epoch_loss_3d_pos", "=", "0", "\n", "epoch_loss_3d_pos_procrustes", "=", "0", "\n", "epoch_loss_3d_pos_scale", "=", "0", "\n", "epoch_loss_3d_vel", "=", "0", "\n", "epoch_kpt_3d_pos", "=", "0", "\n", "epoch_sym_error", "=", "0", "\n", "epoch_angle_loss", "=", "0", "\n", "\n", "mean_pck", "=", "0", "\n", "mean_apck", "=", "0", "\n", "mean_auc", "=", "0", "\n", "mean_aauc", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "model_pos", ".", "eval", "(", ")", "\n", "N", "=", "0", "\n", "i", "=", "0", "\n", "pred_3d", "=", "[", "]", "\n", "time_now", "=", "time", "(", ")", "\n", "predict_std1", "=", "0", "\n", "predict_std2", "=", "0", "\n", "for", "use_params", ",", "batch", ",", "batch_2d", "in", "test_generator", ".", "next_epoch", "(", ")", ":", "\n", "            ", "i", "+=", "1", "\n", "print", "(", "'this the {} action in the test set.'", ".", "format", "(", "i", ")", ")", "\n", "if", "norm", "!=", "'base'", ":", "\n", "                ", "normalize_param", "=", "use_params", "[", "'normalization_params'", "]", "\n", "cam", "=", "use_params", "[", "'intrinsic'", "]", "\n", "\n", "", "inputs_2d", "=", "torch", ".", "from_numpy", "(", "batch_2d", ".", "astype", "(", "'float32'", ")", ")", "#shape:(2,t,17,2),if data augment", "\n", "inputs_3d", "=", "torch", ".", "from_numpy", "(", "batch", ".", "astype", "(", "'float32'", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "inputs_2d", "=", "inputs_2d", ".", "cuda", "(", ")", "\n", "inputs_3d", "=", "inputs_3d", ".", "cuda", "(", ")", "\n", "if", "norm", "!=", "'base'", ":", "\n", "                    ", "cam", "=", "torch", ".", "from_numpy", "(", "cam", ".", "astype", "(", "'float32'", ")", ")", ".", "cuda", "(", ")", "# torch.Size([2,9])", "\n", "normalize_param", "=", "torch", ".", "from_numpy", "(", "normalize_param", ".", "astype", "(", "'float32'", ")", ")", ".", "cuda", "(", ")", "#[2, T, 1, 5]", "\n", "# Positional model", "\n", "", "", "predicted_3d_pos", "=", "model_pos", "(", "inputs_2d", ")", "#shape:(2,t,17,3)", "\n", "\n", "\n", "if", "norm", "!=", "'base'", ":", "\n", "                ", "predicted_3d_pos", ",", "inputs_3d", "=", "post_process3d", "(", "predicted_3d_pos", ",", "inputs_3d", ",", "cam", ",", "normalize_param", ",", "norm", ")", "\n", "", "elif", "norm", "==", "'base'", ":", "\n", "                ", "inputs_3d", "[", ":", ",", ":", ",", "0", "]", "=", "0", "\n", "\n", "\n", "# Test-time augmentation (if enabled)", "\n", "", "if", "test_generator", ".", "augment_enabled", "(", ")", ":", "\n", "# Undo flipping and take average with non-flipped version", "\n", "                ", "predicted_3d_pos", "[", "1", ",", ":", ",", ":", ",", "0", "]", "*=", "-", "1", "\n", "# joints left[4, 5, 6, 11, 12, 13]", "\n", "# joints right[1, 2, 3, 14, 15, 16]", "\n", "predicted_3d_pos", "[", "1", ",", ":", ",", "joints_left", "+", "joints_right", "]", "=", "predicted_3d_pos", "[", "1", ",", ":", ",", "joints_right", "+", "joints_left", "]", "\n", "predicted_3d_pos", "=", "torch", ".", "mean", "(", "predicted_3d_pos", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "\n", "", "if", "return_predictions", ":", "\n", "                ", "return", "predicted_3d_pos", ".", "squeeze", "(", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "test_generator", ".", "augment_enabled", "(", ")", ":", "\n", "                ", "inputs_3d", "=", "inputs_3d", "[", ":", "1", "]", "\n", "\n", "", "sym_bone", "=", "cal_bone_sym", "(", "predicted_3d_pos", ")", "\n", "epoch_sym_error", "+=", "inputs_3d", ".", "shape", "[", "0", "]", "*", "inputs_3d", ".", "shape", "[", "1", "]", "*", "sym_bone", "\n", "\n", "bone_gt", "=", "kpt_to_bone_vector", "(", "inputs_3d", ")", "\n", "bone_angle_gt", "=", "cal_bone_angle", "(", "bone_gt", ",", "indexes", "=", "None", ")", "\n", "bone_pred", "=", "kpt_to_bone_vector", "(", "predicted_3d_pos", ")", "\n", "bone_angle_pred", "=", "cal_bone_angle", "(", "bone_pred", ",", "indexes", "=", "None", ")", "\n", "angle_loss", "=", "mpjae", "(", "bone_angle_pred", ",", "bone_angle_gt", ")", "\n", "epoch_angle_loss", "+=", "inputs_3d", ".", "shape", "[", "0", "]", "*", "inputs_3d", ".", "shape", "[", "1", "]", "*", "angle_loss", ".", "item", "(", ")", "\n", "#", "\n", "if", "args", ".", "three_dpw", ":", "\n", "#only evaluate 14 joints", "\n", "                ", "predicted_3d_pos", "=", "torch", ".", "cat", "(", "[", "predicted_3d_pos", "[", ":", ",", ":", ",", ":", "7", "]", ",", "predicted_3d_pos", "[", ":", ",", ":", ",", "8", ":", "9", "]", ",", "predicted_3d_pos", "[", ":", ",", ":", ",", "11", ":", "17", "]", "]", ",", "-", "2", ")", "\n", "inputs_3d", "=", "torch", ".", "cat", "(", "[", "inputs_3d", "[", ":", ",", ":", ",", ":", "7", "]", ",", "inputs_3d", "[", ":", ",", ":", ",", "8", ":", "9", "]", ",", "inputs_3d", "[", ":", ",", ":", ",", "11", ":", "17", "]", "]", ",", "-", "2", ")", "\n", "# Calculate mean per joint position error in meters.", "\n", "", "gather_error", "=", "gather_3d_metrics", "(", "predicted_3d_pos", "*", "1000", ",", "inputs_3d", "*", "1000", ")", "\n", "\n", "print", "(", "gather_error", ")", "\n", "mean_pck", "+=", "inputs_3d", ".", "shape", "[", "0", "]", "*", "inputs_3d", ".", "shape", "[", "1", "]", "*", "gather_error", "[", "'pck'", "]", "\n", "mean_apck", "+=", "inputs_3d", ".", "shape", "[", "0", "]", "*", "inputs_3d", ".", "shape", "[", "1", "]", "*", "gather_error", "[", "'aligned_pck'", "]", "\n", "mean_auc", "+=", "inputs_3d", ".", "shape", "[", "0", "]", "*", "inputs_3d", ".", "shape", "[", "1", "]", "*", "gather_error", "[", "'auc'", "]", "\n", "mean_aauc", "+=", "inputs_3d", ".", "shape", "[", "0", "]", "*", "inputs_3d", ".", "shape", "[", "1", "]", "*", "gather_error", "[", "'aligned_auc'", "]", "\n", "pred_3d", ".", "append", "(", "predicted_3d_pos", ".", "squeeze", "(", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "error", "=", "mpjpe", "(", "predicted_3d_pos", ",", "inputs_3d", ")", "\n", "print", "(", "'each subaction MPJPE:'", ",", "error", ".", "item", "(", ")", "*", "1000", ")", "\n", "error_kpt", "=", "kpt_mpjpe", "(", "predicted_3d_pos", ",", "inputs_3d", ")", "\n", "print", "(", "'error kpt of T input frames:'", ",", "(", "error_kpt", ")", "*", "1000", ")", "\n", "\n", "epoch_loss_3d_pos_scale", "+=", "inputs_3d", ".", "shape", "[", "0", "]", "*", "inputs_3d", ".", "shape", "[", "1", "]", "*", "n_mpjpe", "(", "predicted_3d_pos", ",", "inputs_3d", ")", ".", "item", "(", ")", "\n", "print", "(", "'each subaction 3d scale error (NMPJPE):'", ",", "n_mpjpe", "(", "predicted_3d_pos", ",", "inputs_3d", ")", ".", "item", "(", ")", "*", "1000", ")", "\n", "\n", "epoch_loss_3d_pos", "+=", "inputs_3d", ".", "shape", "[", "0", "]", "*", "inputs_3d", ".", "shape", "[", "1", "]", "*", "error", ".", "item", "(", ")", "\n", "N", "+=", "inputs_3d", ".", "shape", "[", "0", "]", "*", "inputs_3d", ".", "shape", "[", "1", "]", "\n", "print", "(", "'mean pck/aligned_pck/auc/aligned_auc:'", ",", "mean_pck", "/", "N", ",", "mean_apck", "/", "N", ",", "mean_auc", "/", "N", ",", "mean_aauc", "/", "N", ")", "\n", "\n", "print", "(", "'mean MPJPE:'", ",", "(", "epoch_loss_3d_pos", "/", "N", ")", "*", "1000", ")", "\n", "print", "(", "'Average angle L1 error:'", ",", "epoch_angle_loss", "/", "N", ")", "\n", "epoch_kpt_3d_pos", "+=", "inputs_3d", ".", "shape", "[", "0", "]", "*", "inputs_3d", ".", "shape", "[", "1", "]", "*", "error_kpt", "\n", "inputs", "=", "inputs_3d", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "-", "1", ",", "inputs_3d", ".", "shape", "[", "-", "2", "]", ",", "inputs_3d", ".", "shape", "[", "-", "1", "]", ")", "\n", "predicted_3d_pos", "=", "predicted_3d_pos", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "-", "1", ",", "inputs_3d", ".", "shape", "[", "-", "2", "]", ",", "inputs_3d", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "epoch_loss_3d_pos_procrustes", "+=", "inputs_3d", ".", "shape", "[", "0", "]", "*", "inputs_3d", ".", "shape", "[", "1", "]", "*", "p_mpjpe", "(", "predicted_3d_pos", ",", "inputs", ")", "[", "0", "]", "\n", "print", "(", "'each 3d procrustes error:'", ",", "p_mpjpe", "(", "predicted_3d_pos", ",", "inputs", ")", "[", "0", "]", "*", "1000", ")", "\n", "# Compute velocity error", "\n", "epoch_loss_3d_vel", "+=", "inputs_3d", ".", "shape", "[", "0", "]", "*", "inputs_3d", ".", "shape", "[", "1", "]", "*", "mean_velocity_error", "(", "predicted_3d_pos", ",", "inputs", ")", "\n", "print", "(", "'each 3d mean velocity error'", ",", "mean_velocity_error", "(", "predicted_3d_pos", ",", "inputs", ")", "*", "1000", ")", "\n", "", "", "if", "args", ".", "rnum", ":", "\n", "        ", "print", "(", "'final STD'", ",", "predict_std1", "/", "i", ",", "predict_std2", "/", "i", ",", "torch", ".", "mean", "(", "predict_std1", ")", "/", "i", ",", "torch", ".", "mean", "(", "predict_std2", ")", "/", "i", ")", "\n", "\n", "", "if", "action", "is", "None", ":", "\n", "        ", "print", "(", "'------Not evaluate by actions------'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'----'", "+", "action", "+", "'----'", ")", "\n", "print", "(", "'Have i epoch'", ",", "i", ")", "\n", "", "e1", "=", "(", "epoch_loss_3d_pos", "/", "N", ")", "*", "1000", "\n", "e2", "=", "(", "epoch_loss_3d_pos_procrustes", "/", "N", ")", "*", "1000", "\n", "e3", "=", "(", "epoch_loss_3d_pos_scale", "/", "N", ")", "*", "1000", "\n", "e4", "=", "(", "epoch_kpt_3d_pos", "/", "N", ")", "*", "1000", "\n", "ev", "=", "(", "epoch_loss_3d_vel", "/", "N", ")", "*", "1000", "\n", "each_bone_error", "=", "(", "epoch_sym_error", "/", "N", ")", "*", "1000", "\n", "each_angle_error", "=", "(", "epoch_angle_loss", "/", "N", ")", "\n", "#    error_cat = np.concatenate(pred_3d)", "\n", "#    np.save('fc_predicted_3dpose_{}.npy'.format(action), error_cat)", "\n", "print", "(", "'Test time augmentation:'", ",", "test_generator", ".", "augment_enabled", "(", ")", ")", "\n", "print", "(", "action", ",", "'Protocol #1 Error (MPJPE):'", ",", "e1", ",", "'mm'", ")", "\n", "print", "(", "'Protocol #2 Error (P-MPJPE):'", ",", "e2", ",", "'mm'", ")", "\n", "print", "(", "'Protocol #3 Error (N-MPJPE):'", ",", "e3", ",", "'mm'", ")", "\n", "if", "args", ".", "three_dpw", ":", "\n", "        ", "print", "(", "action", ",", "'Error(MPJPE) of Hip(root) is {0}mm, Rhip is {1}mm, Rknee is {2}mm, Rfoot is {3}mm, Lhip is {4}mm, Lknee is {5}mm, '", "\n", "'Lfoot is {6}mm, Thorax is {7}mm, Lshoulder is {8}mm, Lelbow is {9}mm, '", "\n", "'Lwrist is {10}mm, Rshoulder is {11}mm, Relbow is {12}mm, Rwrist is {13}mm:'", ".", "format", "(", "e4", "[", "0", "]", ",", "e4", "[", "1", "]", ",", "e4", "[", "2", "]", ",", "e4", "[", "3", "]", ",", "e4", "[", "4", "]", ",", "e4", "[", "5", "]", ",", "e4", "[", "6", "]", ",", "\n", "e4", "[", "7", "]", ",", "e4", "[", "8", "]", ",", "e4", "[", "9", "]", ",", "e4", "[", "10", "]", ",", "e4", "[", "11", "]", ",", "e4", "[", "12", "]", ",", "e4", "[", "13", "]", ")", ")", "\n", "\n", "", "else", ":", "\n", "        ", "print", "(", "action", ",", "'Error(MPJPE) of Hip(root) is {0}mm, Rhip is {1}mm, Rknee is {2}mm, Rfoot is {3}mm, Lhip is {4}mm, Lknee is {5}mm, '", "\n", "'Lfoot is {6}mm, Spine is {7}mm, Thorax is {8}mm, Neck is {9}mm, Head is {10}mm, Lshoulder is {11}mm, Lelbow is {12}mm, '", "\n", "'Lwrist is {13}mm, Rshoulder is {14}mm, Relbow is {15}mm, Rwrist is {16}mm:'", ".", "format", "(", "e4", "[", "0", "]", ",", "e4", "[", "1", "]", ",", "e4", "[", "2", "]", ",", "e4", "[", "3", "]", ",", "e4", "[", "4", "]", ",", "e4", "[", "5", "]", ",", "e4", "[", "6", "]", ",", "\n", "e4", "[", "7", "]", ",", "e4", "[", "8", "]", ",", "e4", "[", "9", "]", ",", "e4", "[", "10", "]", ",", "e4", "[", "11", "]", ",", "e4", "[", "12", "]", ",", "e4", "[", "13", "]", ",", "\n", "e4", "[", "14", "]", ",", "e4", "[", "15", "]", ",", "e4", "[", "16", "]", ")", ")", "\n", "", "print", "(", "'Velocity Error (MPJVE):'", ",", "ev", ",", "'mm'", ")", "\n", "print", "(", "'Average test time for each frame is: '", ",", "(", "time", "(", ")", "-", "time_now", ")", "/", "N", ")", "\n", "print", "(", "action", ",", "'Mean Action bone error (right-left): Hip {0}mm, Upper Leg {1}mm, Lower Leg {2}mm, '", "'Shoulder {3}mm, Upper elbow {4}mm, Lower elbow {5}mm'", ".", "format", "(", "each_bone_error", "[", "0", "]", ",", "each_bone_error", "[", "1", "]", ",", "each_bone_error", "[", "2", "]", ",", "\n", "each_bone_error", "[", "3", "]", ",", "each_bone_error", "[", "4", "]", ",", "each_bone_error", "[", "5", "]", ")", ")", "\n", "print", "(", "'3d Angle absolute error:'", ",", "each_angle_error", ",", "'degree'", ")", "\n", "print", "(", "'----------'", ")", "\n", "return", "e1", ",", "e2", ",", "e3", ",", "ev", ",", "each_bone_error", ",", "each_angle_error", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.experiment.inference.val": [[234, 269], ["torch.no_grad", "model_pos.eval", "trainval_generator.next_epoch", "torch.from_numpy", "torch.from_numpy", "torch.cuda.is_available", "model_pos", "mpjpe", "batch.astype", "batch_2d.astype", "inputs_3d.cuda.cuda", "inputs_2d.cuda.cuda", "common.dataset.post_process.process3d.post_process3d", "mpjpe.item", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().cuda.astype", "torch.from_numpy().cuda.astype"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.data_generators.UnchunkedGenerator.next_epoch", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.loss.loss_family.mpjpe", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.post_process.process3d.post_process3d"], ["", "def", "val", "(", "trainval_generator", ",", "model_pos", ",", "norm", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "model_pos", ".", "eval", "(", ")", "\n", "epoch_loss_3d_train_eval", "=", "0", "\n", "N", "=", "0", "\n", "for", "use_params", ",", "batch", ",", "batch_2d", "in", "trainval_generator", ".", "next_epoch", "(", ")", ":", "\n", "            ", "if", "batch_2d", ".", "shape", "[", "1", "]", "==", "0", ":", "\n", "# This can only happen when downsampling the dataset", "\n", "                ", "continue", "\n", "", "if", "norm", "!=", "'base'", ":", "\n", "                ", "normalize_param", "=", "use_params", "[", "'normalization_params'", "]", "\n", "cam", "=", "use_params", "[", "'intrinsic'", "]", "\n", "", "inputs_3d", "=", "torch", ".", "from_numpy", "(", "batch", ".", "astype", "(", "'float32'", ")", ")", "\n", "inputs_2d", "=", "torch", ".", "from_numpy", "(", "batch_2d", ".", "astype", "(", "'float32'", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "inputs_3d", "=", "inputs_3d", ".", "cuda", "(", ")", "\n", "inputs_2d", "=", "inputs_2d", ".", "cuda", "(", ")", "\n", "if", "norm", "!=", "'base'", ":", "\n", "                    ", "cam", "=", "torch", ".", "from_numpy", "(", "cam", ".", "astype", "(", "'float32'", ")", ")", ".", "cuda", "(", ")", "# torch.Size([1024,9])", "\n", "normalize_param", "=", "torch", ".", "from_numpy", "(", "normalize_param", ".", "astype", "(", "'float32'", ")", ")", ".", "cuda", "(", ")", "\n", "# Compute 3D poses", "\n", "", "", "predicted_3d_pos", "=", "model_pos", "(", "inputs_2d", ")", "\n", "# Denorm 3d pose, from pixel unit to meter unit.", "\n", "if", "norm", "!=", "'base'", ":", "\n", "                ", "predicted_3d_pos", ",", "inputs_3d", "=", "post_process3d", "(", "predicted_3d_pos", ",", "inputs_3d", ",", "cam", ",", "normalize_param", ",", "norm", ")", "\n", "\n", "", "else", ":", "\n", "                ", "inputs_3d", "[", ":", ",", ":", ",", "0", "]", "=", "0", "\n", "\n", "# Calculate L2 error here", "\n", "", "loss_3d_pos", "=", "mpjpe", "(", "predicted_3d_pos", ",", "inputs_3d", ")", "\n", "epoch_loss_3d_train_eval", "+=", "inputs_3d", ".", "shape", "[", "0", "]", "*", "inputs_3d", ".", "shape", "[", "1", "]", "*", "loss_3d_pos", ".", "item", "(", ")", "\n", "N", "+=", "inputs_3d", ".", "shape", "[", "0", "]", "*", "inputs_3d", ".", "shape", "[", "1", "]", "\n", "\n", "", "", "return", "epoch_loss_3d_train_eval", "/", "N", "*", "1000", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.experiment.train.train": [[13, 94], ["model_pos_train.train", "train_generator.next_epoch", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.cuda.is_available", "torch.cuda.is_available", "optimizer.zero_grad", "model_pos_train", "L1_loss", "mpjpe", "print", "tf_writer.add_scalar", "loss_total.backward", "optimizer.step", "batch_3d.astype", "batch_2d.astype", "inputs_3d.cuda.cuda", "inputs_2d.cuda.cuda", "L1_loss.item", "common.dataset.post_process.process3d.post_process3d", "mpjpe.item", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "L1_loss.item", "range", "torch.mean", "torch.mean", "print", "bone_lengths_lift.append", "bone_lengths_right.append", "len", "torch.abs", "torch.abs", "each_bone_error.append", "torch.mean.item", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.mean", "torch.mean", "cam_intri.astype", "torch.from_numpy().cuda.astype", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.abs", "torch.abs", "dataset.skeleton().parents", "dataset.skeleton().parents", "dataset.skeleton", "dataset.skeleton"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.experiment.train.train", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.data_generators.UnchunkedGenerator.next_epoch", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.loss.loss_family.L1_loss", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.loss.loss_family.mpjpe", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.post_process.process3d.post_process3d", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.skeleton.Skeleton.parents", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.skeleton.Skeleton.parents", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.mocap_dataset.MocapDataset.skeleton", "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.dataset.mocap_dataset.MocapDataset.skeleton"], ["def", "train", "(", "train_generator", ",", "model_pos_train", ",", "dataset", ",", "optimizer", ",", "epoch", ",", "norm", ",", "i_train", "=", "0", ",", "bone_length_term", "=", "False", ")", ":", "\n", "    ", "N", "=", "0", "\n", "\n", "epoch_loss_3d_train_l1", "=", "0", "\n", "epoch_loss_left_right", "=", "0", "\n", "epoch_loss_3d_train_l2", "=", "0", "\n", "model_pos_train", ".", "train", "(", ")", "\n", "\n", "# Regular supervised scenario", "\n", "i", "=", "0", "\n", "\n", "for", "use_params", ",", "batch_3d", ",", "batch_2d", "in", "train_generator", ".", "next_epoch", "(", ")", ":", "\n", "        ", "if", "norm", "!=", "'base'", ":", "\n", "            ", "normalize_param", "=", "use_params", "[", "'normalization_params'", "]", "\n", "cam_intri", "=", "use_params", "[", "'intrinsic'", "]", "\n", "", "inputs_3d", "=", "torch", ".", "from_numpy", "(", "batch_3d", ".", "astype", "(", "'float32'", ")", ")", "# torch.Size([1024,1,17,3])", "\n", "inputs_2d", "=", "torch", ".", "from_numpy", "(", "batch_2d", ".", "astype", "(", "'float32'", ")", ")", "# torch.Size([1024,27,17,2])", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "inputs_3d", "=", "inputs_3d", ".", "cuda", "(", ")", "\n", "inputs_2d", "=", "inputs_2d", ".", "cuda", "(", ")", "\n", "if", "norm", "!=", "'base'", ":", "\n", "                ", "cam", "=", "torch", ".", "from_numpy", "(", "cam_intri", ".", "astype", "(", "'float32'", ")", ")", ".", "cuda", "(", ")", "# torch.Size([1024,9])", "\n", "normalize_param", "=", "torch", ".", "from_numpy", "(", "normalize_param", ".", "astype", "(", "'float32'", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "# Train model", "\n", "predicted_3d_pos", "=", "model_pos_train", "(", "inputs_2d", ")", "\n", "if", "norm", "==", "'base'", ":", "\n", "            ", "inputs_3d", "[", ":", ",", ":", ",", "0", "]", "=", "0", "\n", "# Calculate L1 Loss", "\n", "\n", "", "loss_3d_pos_l1", "=", "L1_loss", "(", "predicted_3d_pos", ",", "inputs_3d", ")", "\n", "epoch_loss_3d_train_l1", "+=", "inputs_3d", ".", "shape", "[", "0", "]", "*", "inputs_3d", ".", "shape", "[", "1", "]", "*", "loss_3d_pos_l1", ".", "item", "(", ")", "\n", "N", "+=", "inputs_3d", ".", "shape", "[", "0", "]", "*", "inputs_3d", ".", "shape", "[", "1", "]", "\n", "\n", "# denorm 3d pose for proposed normalization", "\n", "if", "norm", "!=", "'base'", ":", "\n", "            ", "predicted_3d_pos", ",", "inputs_3d", "=", "post_process3d", "(", "predicted_3d_pos", ",", "inputs_3d", ",", "cam", ",", "normalize_param", ",", "norm", ")", "\n", "# Calculate L2 error with denormed 3d pose in meters unit.", "\n", "", "loss_l2", "=", "mpjpe", "(", "predicted_3d_pos", ",", "inputs_3d", ")", "\n", "epoch_loss_3d_train_l2", "+=", "inputs_3d", ".", "shape", "[", "0", "]", "*", "inputs_3d", ".", "shape", "[", "1", "]", "*", "loss_l2", ".", "item", "(", ")", "\n", "\n", "print", "(", "'each joint l1 loss'", ",", "loss_3d_pos_l1", ".", "item", "(", ")", "*", "1000", ",", "'Total epoch l1 loss average'", ",", "epoch_loss_3d_train_l1", "/", "N", "*", "1000", ")", "\n", "\n", "# Bone length term to enforce kinematic constraints", "\n", "if", "bone_length_term", ":", "#not used by default", "\n", "            ", "if", "epoch", ">", "100", ":", "\n", "                ", "left", "=", "[", "4", ",", "5", ",", "6", ",", "11", ",", "12", ",", "13", "]", "\n", "right", "=", "[", "1", ",", "2", ",", "3", ",", "14", ",", "15", ",", "16", "]", "\n", "bone_lengths_lift", "=", "[", "]", "\n", "bone_lengths_right", "=", "[", "]", "\n", "each_bone_error", "=", "[", "]", "\n", "left_right_error", "=", "0", "\n", "# error = [0.001, 0.0018, 0.0008, 0.0019, 0.0043, 0.0011]", "\n", "for", "i", "in", "left", ":", "\n", "                    ", "dists_l", "=", "predicted_3d_pos", "[", ":", ",", ":", ",", "i", ",", ":", "]", "-", "predicted_3d_pos", "[", ":", ",", ":", ",", "dataset", ".", "skeleton", "(", ")", ".", "parents", "(", ")", "[", "i", "]", ",", ":", "]", "\n", "bone_lengths_lift", ".", "append", "(", "torch", ".", "mean", "(", "torch", ".", "norm", "(", "dists_l", ",", "dim", "=", "-", "1", ")", ",", "dim", "=", "1", ")", ")", "\n", "", "for", "i", "in", "right", ":", "\n", "                    ", "dists_r", "=", "predicted_3d_pos", "[", ":", ",", ":", ",", "i", ",", ":", "]", "-", "predicted_3d_pos", "[", ":", ",", ":", ",", "dataset", ".", "skeleton", "(", ")", ".", "parents", "(", ")", "[", "i", "]", ",", ":", "]", "\n", "bone_lengths_right", ".", "append", "(", "torch", ".", "mean", "(", "torch", ".", "norm", "(", "dists_r", ",", "dim", "=", "-", "1", ")", ",", "dim", "=", "1", ")", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "left", ")", ")", ":", "\n", "                    ", "left_right_error", "+=", "torch", ".", "abs", "(", "\n", "torch", ".", "abs", "(", "bone_lengths_right", "[", "i", "]", "-", "bone_lengths_lift", "[", "i", "]", ")", ")", "\n", "each_bone_error", ".", "append", "(", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "bone_lengths_right", "[", "i", "]", "-", "bone_lengths_lift", "[", "i", "]", ")", ")", ")", "\n", "# print('each bone error', each_bone_error[-1] * 1000)", "\n", "", "left_right_err_mean", "=", "torch", ".", "mean", "(", "left_right_error", ")", "\n", "\n", "epoch_loss_left_right", "+=", "inputs_3d", ".", "shape", "[", "0", "]", "*", "inputs_3d", ".", "shape", "[", "1", "]", "*", "left_right_err_mean", ".", "item", "(", ")", "\n", "print", "(", "'Each epoch left right error average'", ",", "(", "epoch_loss_left_right", "/", "N", ")", "*", "1000", ")", "\n", "", "else", ":", "\n", "                ", "left_right_err_mean", "=", "0", "\n", "", "", "else", ":", "\n", "            ", "left_right_err_mean", "=", "0", "\n", "", "i_train", "+=", "1", "\n", "tf_writer", ".", "add_scalar", "(", "'loss/training part'", ",", "(", "epoch_loss_3d_train_l1", "/", "N", ")", "*", "1000", ",", "i_train", ")", "\n", "\n", "# loss_total = loss_3d_pos_l1 + 0.1*left_right_err_mean", "\n", "loss_total", "=", "loss_3d_pos_l1", "\n", "loss_total", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "return", "epoch_loss_3d_train_l2", "/", "N", "*", "1000", ",", "i_train", "\n", "", ""]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.loss.loss_family.L1GaussianRegressionNewFlow.__init__": [[138, 142], ["torch.Module.__init__", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.loss.loss_family.L1GaussianRegressionNewFlow.__init__"], ["def", "__init__", "(", "self", ",", "OUTPUT_3D", "=", "False", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "L1GaussianRegressionNewFlow", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "amp", "=", "1", "/", "math", ".", "sqrt", "(", "2", "*", "math", ".", "pi", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.loss.loss_family.L1GaussianRegressionNewFlow.weighted_l2_loss": [[143, 147], ["diff.sum", "weight.sum"], "methods", ["None"], ["", "def", "weighted_l2_loss", "(", "self", ",", "pred", ",", "gt", ",", "weight", ")", ":", "\n", "        ", "diff", "=", "(", "pred", "-", "gt", ")", "**", "2", "\n", "diff", "=", "diff", "*", "weight", "\n", "return", "diff", ".", "sum", "(", ")", "/", "(", "weight", ".", "sum", "(", ")", "+", "1e-9", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.loss.loss_family.L1GaussianRegressionNewFlow._generate_activation": [[148, 159], ["gt_coords.permute.permute.permute", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "def", "_generate_activation", "(", "self", ",", "gt_coords", ",", "pred_coords", ")", ":", "\n", "        ", "sigma", "=", "2", "*", "2", "/", "64", "\n", "# (B, K, 1, 2)", "\n", "gt_coords", "=", "gt_coords", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "# (B, 1, K, 2)", "\n", "pred_coords", "=", "pred_coords", "\n", "\n", "diff", "=", "torch", ".", "sum", "(", "(", "gt_coords", "-", "pred_coords", ")", "**", "2", ",", "dim", "=", "-", "1", ")", "\n", "activation", "=", "torch", ".", "exp", "(", "-", "(", "diff", "/", "(", "2", "*", "(", "sigma", "**", "2", ")", ")", ")", ")", "\n", "\n", "return", "activation", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.loss.loss_family.L1GaussianRegressionNewFlow.forward": [[160, 184], ["torch.abs", "torch.abs", "torch.abs", "torch.abs", "nf_loss.sum", "nf_loss.sum", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "output", ",", "labels", ")", ":", "\n", "        ", "nf_loss", "=", "output", ".", "nf_loss", "\n", "pred_jts", "=", "output", ".", "pred_jts", "\n", "sigma", "=", "output", ".", "sigma", "\n", "\n", "gt_uv", "=", "labels", "\n", "weight", "=", "1", "\n", "#gaussian = weight * torch.log(sigma / self.amp) + torch.abs(gt_uv - pred_jts) / (math.sqrt(2) * sigma + 1e-9)", "\n", "gaussian", "=", "torch", ".", "abs", "(", "gt_uv", "-", "pred_jts", ")", "\n", "residual", "=", "True", "\n", "if", "residual", ":", "\n", "            ", "weight1", "=", "1", "\n", "nf_loss", "=", "weight1", "*", "nf_loss", "+", "gaussian", "\n", "\n", "", "if", "self", ".", "size_average", ">", "0", ":", "\n", "            ", "regression_loss", "=", "nf_loss", ".", "sum", "(", ")", "/", "len", "(", "nf_loss", ")", "\n", "#regression_loss = torch.mean(nf_loss)#todo", "\n", "\n", "", "else", ":", "\n", "            ", "regression_loss", "=", "nf_loss", ".", "sum", "(", ")", "\n", "\n", "", "loss", "=", "regression_loss", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.loss.loss_family.mpjpe": [[14, 26], ["torch.mean", "torch.mean", "torch.norm", "torch.norm", "len"], "function", ["None"], ["def", "mpjpe", "(", "predicted", ",", "target", ")", ":", "\n", "    ", "\"\"\"\n    Mean per-joint position error (i.e. mean Euclidean distance),\n    often referred to as \"Protocol #1\" in many papers.\n    \"\"\"", "\n", "assert", "predicted", ".", "shape", "==", "target", ".", "shape", "\n", "#l2_error = torch.mean(torch.norm((predicted - target), dim=len(target.shape) - 1), -1).squeeze()", "\n", "#print('each joint error:', torch.norm((predicted - target), dim=len(target.shape) - 1))", "\n", "#index = np.where(l2_error.cpu().detach().numpy() > 0.3)  # mean body l2 distance larger than 300mm", "\n", "#value = l2_error[l2_error > 0.3]", "\n", "#print('Index of mean body l2 distance larger than 300mm', index, value)", "\n", "return", "torch", ".", "mean", "(", "torch", ".", "norm", "(", "(", "predicted", "-", "target", ")", ",", "dim", "=", "len", "(", "target", ".", "shape", ")", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.loss.loss_family.mpjae": [[28, 36], ["torch.mean", "torch.mean", "print", "torch.mean", "torch.mean", "torch.abs().cuda", "torch.abs().cuda", "torch.abs", "torch.abs"], "function", ["None"], ["", "def", "mpjae", "(", "predicted", ",", "target", ")", ":", "\n", "    ", "\"\"\"\n    Mean per-joint angle error (3d bone vector angle error between gt and predicted one)\n    \"\"\"", "\n", "assert", "predicted", ".", "shape", "==", "target", ".", "shape", "# [B,T, K]", "\n", "joint_error", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "predicted", "-", "target", ")", ".", "cuda", "(", ")", ",", "dim", "=", "0", ")", "# Calculate each joint angle", "\n", "print", "(", "'each bone angle error:'", ",", "joint_error", ")", "\n", "return", "torch", ".", "mean", "(", "joint_error", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.loss.loss_family.mpjpe_smooth": [[41, 54], ["torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs.clone", "torch.pow", "torch.pow", "len"], "function", ["None"], ["", "def", "mpjpe_smooth", "(", "predicted", ",", "target", ",", "threshold", ",", "mi", ",", "L1", ")", ":", "\n", "    ", "\"\"\"\n    Referred in triangulation 3d pose paper\n    \"\"\"", "\n", "assert", "predicted", ".", "shape", "==", "target", ".", "shape", "\n", "if", "L1", ":", "\n", "        ", "diff_norm", "=", "torch", ".", "abs", "(", "(", "predicted", "-", "target", ")", ",", "dim", "=", "len", "(", "target", ".", "shape", ")", "-", "1", ")", "\n", "diff", "=", "diff_norm", ".", "clone", "(", ")", "\n", "", "else", ":", "# MSE", "\n", "        ", "diff", "=", "(", "predicted", "-", "target", ")", "**", "2", "\n", "", "diff", "[", "diff", ">", "threshold", "]", "=", "torch", ".", "pow", "(", "diff", "[", "diff", ">", "threshold", "]", ",", "mi", ")", "*", "(", "threshold", "**", "(", "1", "-", "mi", ")", ")", "\n", "loss", "=", "torch", ".", "mean", "(", "diff", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.loss.loss_family.L1_loss": [[56, 61], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs().cuda", "torch.abs().cuda", "torch.abs", "torch.abs"], "function", ["None"], ["", "def", "L1_loss", "(", "predicted", ",", "target", ")", ":", "\n", "    ", "assert", "predicted", ".", "shape", "==", "target", ".", "shape", "\n", "abs_error", "=", "torch", ".", "mean", "(", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "predicted", "-", "target", ")", ".", "cuda", "(", ")", ",", "dim", "=", "-", "2", ")", ",", "dim", "=", "0", ")", "\n", "error", "=", "torch", ".", "mean", "(", "abs_error", ")", "\n", "return", "error", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.loss.loss_family.kpt_mpjpe": [[63, 72], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "print", "torch.mean", "torch.mean", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.mean", "torch.mean", "numpy.sqrt", "torch.norm", "torch.norm", "len", "len", "len"], "function", ["None"], ["", "def", "kpt_mpjpe", "(", "predicted", ",", "target", ")", ":", "\n", "#   Mean per-joint position error for each keypoint(i.e. mean Euclidean distance)", "\n", "#   This function is just for evaluate!! input shape is (1,t,17,3)", "\n", "    ", "assert", "predicted", ".", "shape", "==", "target", ".", "shape", "\n", "kpt_error", "=", "torch", ".", "mean", "(", "torch", ".", "norm", "(", "predicted", "-", "target", ",", "dim", "=", "len", "(", "target", ".", "shape", ")", "-", "1", ")", ")", "\n", "kpt_xyz", "=", "torch", ".", "mean", "(", "torch", ".", "norm", "(", "predicted", "-", "target", ",", "dim", "=", "len", "(", "target", ".", "shape", ")", "-", "2", ")", ",", "dim", "=", "1", ")", "\n", "print", "(", "'X,Y,Z error of T input frames:'", ",", "kpt_xyz", "/", "np", ".", "sqrt", "(", "17", ")", ")", "\n", "kpt_17", "=", "torch", ".", "mean", "(", "torch", ".", "mean", "(", "torch", ".", "norm", "(", "predicted", "-", "target", ",", "dim", "=", "len", "(", "target", ".", "shape", ")", "-", "1", ")", ",", "dim", "=", "0", ")", ",", "dim", "=", "0", ")", "\n", "return", "kpt_17", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.loss.loss_family.kpt_test": [[74, 82], ["print", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "target.size", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "len", "len"], "function", ["None"], ["", "def", "kpt_test", "(", "predicted", ",", "target", ")", ":", "\n", "#   Mean per-joint position error for each keypoint(i.e. mean Euclidean distance)", "\n", "#   This function is just for evaluate!! input shape is (2,t,17,3)", "\n", "    ", "assert", "predicted", ".", "shape", "==", "target", ".", "shape", "\n", "print", "(", "'The frame number is'", ",", "target", ".", "size", "(", ")", ")", "\n", "kpt_xyz", "=", "torch", ".", "mean", "(", "torch", ".", "mean", "(", "torch", ".", "norm", "(", "predicted", "-", "target", ",", "dim", "=", "len", "(", "target", ".", "shape", ")", "-", "2", ")", ",", "dim", "=", "0", ")", ",", "dim", "=", "0", ")", "\n", "kpt_17", "=", "torch", ".", "mean", "(", "torch", ".", "mean", "(", "torch", ".", "norm", "(", "predicted", "-", "target", ",", "dim", "=", "len", "(", "target", ".", "shape", ")", "-", "1", ")", ",", "dim", "=", "0", ")", ",", "dim", "=", "0", ")", "\n", "return", "kpt_xyz", ",", "kpt_17", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.loss.loss_family.class_accuracy": [[83, 94], ["torch.mean", "torch.mean", "torch.Sigmoid", "torch.mean", "torch.mean", "print", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.norm", "torch.norm", "nn.Sigmoid.", "len"], "function", ["None"], ["", "def", "class_accuracy", "(", "predicted", ",", "target", ",", "confidence", ",", "threshold", "=", "0.04", ")", ":", "\n", "# confidence.shape = [B,T,1,1]", "\n", "    ", "confidence", "=", "torch", ".", "mean", "(", "torch", ".", "mean", "(", "torch", ".", "mean", "(", "confidence", ",", "-", "1", ")", ",", "-", "1", ")", ",", "0", ")", "\n", "sig", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n", "diff", "=", "torch", ".", "mean", "(", "torch", ".", "mean", "(", "torch", ".", "norm", "(", "predicted", "-", "target", ",", "dim", "=", "len", "(", "target", ".", "shape", ")", "-", "1", ")", ",", "dim", "=", "0", ")", ",", "dim", "=", "-", "1", ")", "\n", "class0", "=", "(", "diff", "<=", "threshold", ")", ".", "cpu", "(", ")", "\n", "conf", "=", "(", "sig", "(", "confidence", ")", ">", "0.5", ")", ".", "cpu", "(", ")", "\n", "correct", "=", "(", "conf", "==", "class0", ")", ".", "sum", "(", ")", "\n", "print", "(", "'ooo'", ",", "diff", ".", "shape", ",", "correct", ",", "predicted", ".", "shape", "[", "1", "]", ",", "correct", "/", "predicted", ".", "shape", "[", "1", "]", ")", "\n", "return", "correct", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.loss.loss_family.Uncertain_CE": [[97, 130], ["torch.mean", "torch.mean", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.mean", "torch.mean", "torch.Sigmoid", "nn.Sigmoid.", "torch.BCEWithLogitsLoss", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "print", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "nn.BCEWithLogitsLoss.", "torch.mean", "torch.mean", "torch.norm", "torch.norm", "torch.abs", "torch.abs", "len"], "function", ["None"], ["", "def", "Uncertain_CE", "(", "predicted", ",", "target", ",", "confidence", ",", "threshold", "=", "0.04", ",", "L1_loss", "=", "True", ")", ":", "\n", "# confidence.shape = [B,T,1,1]", "\n", "    ", "confidence", "=", "torch", ".", "mean", "(", "torch", ".", "mean", "(", "torch", ".", "mean", "(", "confidence", ",", "-", "1", ")", ",", "-", "1", ")", ",", "-", "1", ")", "\n", "above_thre", "=", "torch", ".", "zeros_like", "(", "confidence", ")", ".", "cuda", "(", ")", "\n", "below_thre", "=", "torch", ".", "zeros_like", "(", "confidence", ")", ".", "cuda", "(", ")", "\n", "# class0 = torch.zeros((len(confidence), 2)).cuda()", "\n", "class0", "=", "torch", ".", "zeros_like", "(", "confidence", ")", ".", "cuda", "(", ")", "\n", "if", "L1_loss", ":", "\n", "        ", "diff", "=", "torch", ".", "mean", "(", "torch", ".", "mean", "(", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "predicted", "-", "target", ")", ",", "dim", "=", "1", ")", ",", "dim", "=", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "#[B]", "\n", "", "else", ":", "\n", "        ", "diff", "=", "torch", ".", "mean", "(", "torch", ".", "mean", "(", "torch", ".", "norm", "(", "predicted", "-", "target", ",", "dim", "=", "len", "(", "target", ".", "shape", ")", "-", "1", ")", ",", "dim", "=", "1", ")", ",", "dim", "=", "-", "1", ")", "#[B]", "\n", "", "threshold", "=", "torch", ".", "mean", "(", "diff", ")", "\n", "above_thre", "=", "diff", "*", "(", "diff", ">", "threshold", ")", ".", "float", "(", ")", "\n", "below_thre", "=", "diff", "*", "(", "diff", "<=", "threshold", ")", ".", "float", "(", ")", "\n", "# print('ccc',above_thre,'ppp',below_thre)", "\n", "# class0[:, 0] = (diff>threshold).long().cuda()", "\n", "# class0[:, 1] = (diff<=threshold).long().cuda()", "\n", "class0", "=", "(", "diff", "<=", "threshold", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "sig", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "a1", "=", "sig", "(", "confidence", ")", "\n", "# a1 = 0.5", "\n", "a2", "=", "1", "-", "a1", "\n", "\n", "weight", "=", "0.1", "\n", "# pos_weight = torch.sum(diff>threshold)/torch.sum(diff<=threshold)", "\n", "# BCE = nn.BCEWithLogitsLoss(pos_weight=pos_weight)", "\n", "BCE", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "item1", "=", "torch", ".", "mean", "(", "a1", "*", "below_thre", ")", "\n", "item2", "=", "torch", ".", "mean", "(", "a2", "*", "above_thre", ")", "\n", "item3", "=", "torch", ".", "mean", "(", "weight", "*", "BCE", "(", "confidence", ",", "class0", ")", ")", "\n", "print", "(", "'xxx'", ",", "item3", ",", "item2", ",", "item1", ")", "\n", "loss", "=", "item1", "+", "item2", "+", "item3", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.loss.loss_family.p_mpjpe": [[186, 233], ["numpy.mean", "numpy.mean", "numpy.sqrt", "numpy.sqrt", "numpy.matmul", "numpy.linalg.svd", "Vt.transpose", "numpy.matmul", "numpy.sign", "np.sign.flatten", "numpy.matmul", "numpy.expand_dims", "numpy.mean", "numpy.sum", "numpy.sum", "np.sqrt.any", "X0.transpose", "U.transpose", "numpy.expand_dims", "U.transpose", "numpy.sum", "numpy.matmul", "numpy.linalg.norm", "torch.from_numpy().unsqueeze().cuda", "torch.from_numpy().unsqueeze().cuda", "numpy.linalg.det", "numpy.matmul", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "len", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.pre_process.filter_hm36.svd"], ["", "", "def", "p_mpjpe", "(", "predicted", ",", "target", ")", ":", "\n", "    ", "\"\"\"\n    Pose error: MPJPE after rigid alignment (scale, rotation, and translation),\n    often referred to as \"Protocol #2\" in many papers.\n    \"\"\"", "\n", "assert", "predicted", ".", "shape", "==", "target", ".", "shape", "# (3071, 17, 3)", "\n", "muX", "=", "np", ".", "mean", "(", "target", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "muY", "=", "np", ".", "mean", "(", "predicted", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "\n", "X0", "=", "target", "-", "muX", "\n", "Y0", "=", "predicted", "-", "muY", "\n", "\n", "# Remove scale", "\n", "normX", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "X0", "**", "2", ",", "axis", "=", "(", "1", ",", "2", ")", ",", "keepdims", "=", "True", ")", ")", "\n", "normY", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "Y0", "**", "2", ",", "axis", "=", "(", "1", ",", "2", ")", ",", "keepdims", "=", "True", ")", ")", "\n", "# print('target',normX,'predice',normY)", "\n", "X0", "/=", "(", "normX", "+", "1e-8", ")", "\n", "if", "normY", ".", "any", "(", ")", "==", "0", ":", "\n", "        ", "normY", "=", "normY", "+", "1e-8", "\n", "\n", "", "Y0", "/=", "(", "normY", "+", "1e-8", ")", "\n", "# Optimum rotation matrix of Y0", "\n", "H", "=", "np", ".", "matmul", "(", "X0", ".", "transpose", "(", "0", ",", "2", ",", "1", ")", ",", "Y0", ")", "\n", "U", ",", "s", ",", "Vt", "=", "np", ".", "linalg", ".", "svd", "(", "H", ")", "\n", "V", "=", "Vt", ".", "transpose", "(", "0", ",", "2", ",", "1", ")", "\n", "R", "=", "np", ".", "matmul", "(", "V", ",", "U", ".", "transpose", "(", "0", ",", "2", ",", "1", ")", ")", "# Rotation", "\n", "\n", "# Avoid improper rotations (reflections), i.e. rotations with det(R) = -1", "\n", "sign_detR", "=", "np", ".", "sign", "(", "np", ".", "expand_dims", "(", "np", ".", "linalg", ".", "det", "(", "R", ")", ",", "axis", "=", "1", ")", ")", "\n", "V", "[", ":", ",", ":", ",", "-", "1", "]", "*=", "sign_detR", "\n", "s", "[", ":", ",", "-", "1", "]", "*=", "sign_detR", ".", "flatten", "(", ")", "\n", "R", "=", "np", ".", "matmul", "(", "V", ",", "U", ".", "transpose", "(", "0", ",", "2", ",", "1", ")", ")", "# Rotation", "\n", "\n", "tr", "=", "np", ".", "expand_dims", "(", "np", ".", "sum", "(", "s", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", ",", "axis", "=", "2", ")", "\n", "\n", "a", "=", "tr", "*", "normX", "/", "normY", "# Scale", "\n", "t", "=", "muX", "-", "a", "*", "np", ".", "matmul", "(", "muY", ",", "R", ")", "# Translation", "\n", "\n", "# Standarized Distance between X0 and a*Y0*R+c", "\n", "d", "=", "1", "-", "tr", "**", "2", "\n", "\n", "# Perform rigid transformation on the input", "\n", "predicted_aligned", "=", "a", "*", "np", ".", "matmul", "(", "predicted", ",", "R", ")", "\n", "trans_aligned", "=", "predicted_aligned", "+", "t", "\n", "error", "=", "np", ".", "mean", "(", "np", ".", "linalg", ".", "norm", "(", "trans_aligned", "-", "target", ",", "axis", "=", "len", "(", "target", ".", "shape", ")", "-", "1", ")", ")", "\n", "# Return MPJPE", "\n", "return", "error", ",", "torch", ".", "from_numpy", "(", "trans_aligned", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.loss.loss_family.n_mpjpe": [[235, 246], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.norm", "torch.norm", "len"], "function", ["None"], ["", "def", "n_mpjpe", "(", "predicted", ",", "target", ")", ":", "\n", "    ", "\"\"\"\n    Normalized MPJPE (scale only), adapted from:\n    https://github.com/hrhodin/UnsupervisedGeometryAwareRepresentationLearning/blob/master/losses/poses.py\n    \"\"\"", "\n", "assert", "predicted", ".", "shape", "==", "target", ".", "shape", "# [1, 1703, 17, 3]", "\n", "norm_predicted", "=", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "predicted", "**", "2", ",", "dim", "=", "3", ",", "keepdim", "=", "True", ")", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "norm_target", "=", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "target", "*", "predicted", ",", "dim", "=", "3", ",", "keepdim", "=", "True", ")", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "scale", "=", "norm_target", "/", "norm_predicted", "\n", "out", "=", "torch", ".", "mean", "(", "torch", ".", "norm", "(", "(", "scale", "*", "predicted", "-", "target", ")", ",", "dim", "=", "len", "(", "target", ".", "shape", ")", "-", "1", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ailingzengzzz_Split-and-Recombine-Net.loss.loss_family.mean_velocity_error": [[248, 256], ["numpy.diff", "numpy.diff", "numpy.mean", "numpy.linalg.norm", "len"], "function", ["None"], ["", "def", "mean_velocity_error", "(", "predicted", ",", "target", ")", ":", "\n", "    ", "\"\"\"\n    Mean per-joint velocity error (i.e. mean Euclidean distance of the 1st derivative)\n    \"\"\"", "\n", "assert", "predicted", ".", "shape", "==", "target", ".", "shape", "\n", "velocity_predicted", "=", "np", ".", "diff", "(", "predicted", ",", "axis", "=", "0", ")", "\n", "velocity_target", "=", "np", ".", "diff", "(", "target", ",", "axis", "=", "0", ")", "\n", "return", "np", ".", "mean", "(", "np", ".", "linalg", ".", "norm", "(", "velocity_predicted", "-", "velocity_target", ",", "axis", "=", "len", "(", "target", ".", "shape", ")", "-", "1", ")", ")", "\n", "", ""]]}